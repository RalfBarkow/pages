{
  "title": "guix-gtoolkit",
  "story": [
    {
      "type": "markdown",
      "id": "1d16becd1b5c3608",
      "text": "# A plugin for [Glamorous Toolkit](https://gtoolkit.com/download/) for reproducible computations with [[Guix]] \n\n## Installation \n\nOn a Linux system with the [Guix](https://guix.gnu.org/) package manager:\n\n1. Download the [Glamorous Toolkit](https://gtoolkit.com/download/).\n2. Launch Glamorous Toolkit and open a Playground.\n3. Paste the following lines into the playground and run them\n"
    },
    {
      "type": "code",
      "id": "4415f092f6ca853e",
      "text": "Metacello new\n    baseline: 'Guix';\n    repository: 'github://khinsen/guix-gtoolkit:main/';\n    load.\n"
    },
    {
      "type": "markdown",
      "id": "ad4cf466e83c48e5",
      "text": "**Note**: Until Glamorous Toolkit is packaged for Guix, you will have to use Guix hosted on a different Linux distribution because the precompiled binaries for Glamorous Toolkit won't work on a pure Guix System. [[Konrad Hinsen]] is using Ubuntu for development. [https://github.com/khinsen/guix-gtoolkit github]\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n\n"
    },
    {
      "type": "code",
      "id": "0545ff9b0e04626a",
      "text": "```smalltalk\nGxPersistentEnvironments new\n```"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "guix-gtoolkit",
        "story": []
      },
      "date": 1661949784408
    },
    {
      "item": {
        "type": "factory",
        "id": "1d16becd1b5c3608"
      },
      "id": "1d16becd1b5c3608",
      "type": "add",
      "date": 1661949790059
    },
    {
      "type": "edit",
      "id": "1d16becd1b5c3608",
      "item": {
        "type": "markdown",
        "id": "1d16becd1b5c3608",
        "text": "# A plugin for [Glamorous Toolkit](https://gtoolkit.com/download/) for reproducible computations with Guix\n\n## Installation\n\nOn a Linux system with the [Guix](https://guix.gnu.org/) package manager:\n\n1. Download the [Glamorous Toolkit](https://gtoolkit.com/download/).\n2. Launch Glamorous Toolkit and open a Playground.\n3. Paste the following lines into the playground and run them\n```\nMetacello new\n    baseline: 'Guix';\n    repository: 'github://khinsen/guix-gtoolkit:main/';\n    load.\n```\n\nNote: Until Glamorous Toolkit is packaged for Guix, you will\nhave to use Guix hosted on a different Linux distribution because\nthe precompiled binaries for Glamorous Toolkit won't work on\na pure Guix System. I am using Ubuntu for development.\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n```smalltalk\nGxPersistentEnvironments new\n```\n"
      },
      "date": 1661949792185
    },
    {
      "type": "edit",
      "id": "1d16becd1b5c3608",
      "item": {
        "type": "markdown",
        "id": "1d16becd1b5c3608",
        "text": "# A plugin for [Glamorous Toolkit](https://gtoolkit.com/download/) for reproducible computations with Guix [https://github.com/khinsen/guix-gtoolkit github]\n\n## Installation\n\nOn a Linux system with the [Guix](https://guix.gnu.org/) package manager:\n\n1. Download the [Glamorous Toolkit](https://gtoolkit.com/download/).\n2. Launch Glamorous Toolkit and open a Playground.\n3. Paste the following lines into the playground and run them\n```\nMetacello new\n    baseline: 'Guix';\n    repository: 'github://khinsen/guix-gtoolkit:main/';\n    load.\n```\n\nNote: Until Glamorous Toolkit is packaged for Guix, you will\nhave to use Guix hosted on a different Linux distribution because\nthe precompiled binaries for Glamorous Toolkit won't work on\na pure Guix System. I am using Ubuntu for development.\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n```smalltalk\nGxPersistentEnvironments new\n```\n"
      },
      "date": 1661949818952
    },
    {
      "type": "edit",
      "id": "1d16becd1b5c3608",
      "item": {
        "type": "markdown",
        "id": "1d16becd1b5c3608",
        "text": "# A plugin for [Glamorous Toolkit](https://gtoolkit.com/download/) for reproducible computations with [[Guix]] [https://github.com/khinsen/guix-gtoolkit github]\n\n## Installation\n\nOn a Linux system with the [Guix](https://guix.gnu.org/) package manager:\n\n1. Download the [Glamorous Toolkit](https://gtoolkit.com/download/).\n2. Launch Glamorous Toolkit and open a Playground.\n3. Paste the following lines into the playground and run them\n```\nMetacello new\n    baseline: 'Guix';\n    repository: 'github://khinsen/guix-gtoolkit:main/';\n    load.\n```\n\nNote: Until Glamorous Toolkit is packaged for Guix, you will\nhave to use Guix hosted on a different Linux distribution because\nthe precompiled binaries for Glamorous Toolkit won't work on\na pure Guix System. I am using Ubuntu for development.\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n```smalltalk\nGxPersistentEnvironments new\n```\n"
      },
      "date": 1661949832376
    },
    {
      "type": "edit",
      "id": "1d16becd1b5c3608",
      "item": {
        "type": "markdown",
        "id": "1d16becd1b5c3608",
        "text": "# A plugin for [Glamorous Toolkit](https://gtoolkit.com/download/) for reproducible computations with [[Guix]] [https://github.com/khinsen/guix-gtoolkit github]\n\n## Installation\n\nOn a Linux system with the [Guix](https://guix.gnu.org/) package manager:\n\n1. Download the [Glamorous Toolkit](https://gtoolkit.com/download/).\n2. Launch Glamorous Toolkit and open a Playground.\n3. Paste the following lines into the playground and run them\n"
      },
      "date": 1661949845396
    },
    {
      "item": {
        "type": "factory",
        "id": "4415f092f6ca853e"
      },
      "id": "4415f092f6ca853e",
      "type": "add",
      "after": "ad4cf466e83c48e5",
      "date": 1661949851078
    },
    {
      "type": "add",
      "id": "ad4cf466e83c48e5",
      "item": {
        "type": "markdown",
        "id": "ad4cf466e83c48e5",
        "text": "\n\nNote: Until Glamorous Toolkit is packaged for Guix, you will\nhave to use Guix hosted on a different Linux distribution because\nthe precompiled binaries for Glamorous Toolkit won't work on\na pure Guix System. I am using Ubuntu for development.\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n```smalltalk\nGxPersistentEnvironments new\n```\n"
      },
      "after": "1d16becd1b5c3608",
      "date": 1661949852314
    },
    {
      "type": "edit",
      "id": "4415f092f6ca853e",
      "item": {
        "type": "code",
        "id": "4415f092f6ca853e",
        "text": "```\nMetacello new\n    baseline: 'Guix';\n    repository: 'github://khinsen/guix-gtoolkit:main/';\n    load.\n```"
      },
      "date": 1661949855328
    },
    {
      "id": "4415f092f6ca853e",
      "type": "move",
      "order": [
        "1d16becd1b5c3608",
        "4415f092f6ca853e",
        "ad4cf466e83c48e5"
      ],
      "date": 1661949867024
    },
    {
      "type": "edit",
      "id": "4415f092f6ca853e",
      "item": {
        "type": "code",
        "id": "4415f092f6ca853e",
        "text": "Metacello new\n    baseline: 'Guix';\n    repository: 'github://khinsen/guix-gtoolkit:main/';\n    load.\n"
      },
      "date": 1661949875271
    },
    {
      "type": "edit",
      "id": "1d16becd1b5c3608",
      "item": {
        "type": "markdown",
        "id": "1d16becd1b5c3608",
        "text": "# A plugin for [Glamorous Toolkit](https://gtoolkit.com/download/) for reproducible computations with [[Guix]] \n\n## Installation [https://github.com/khinsen/guix-gtoolkit github]\n\nOn a Linux system with the [Guix](https://guix.gnu.org/) package manager:\n\n1. Download the [Glamorous Toolkit](https://gtoolkit.com/download/).\n2. Launch Glamorous Toolkit and open a Playground.\n3. Paste the following lines into the playground and run them\n"
      },
      "date": 1661949900370
    },
    {
      "type": "edit",
      "id": "ad4cf466e83c48e5",
      "item": {
        "type": "markdown",
        "id": "ad4cf466e83c48e5",
        "text": "\nNote: Until Glamorous Toolkit is packaged for Guix, you will have to use Guix hosted on a different Linux distribution because the precompiled binaries for Glamorous Toolkit won't work on\na pure Guix System. I am using Ubuntu for development. \n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n```smalltalk\nGxPersistentEnvironments new\n```\n"
      },
      "date": 1661949924075
    },
    {
      "type": "edit",
      "id": "1d16becd1b5c3608",
      "item": {
        "type": "markdown",
        "id": "1d16becd1b5c3608",
        "text": "# A plugin for [Glamorous Toolkit](https://gtoolkit.com/download/) for reproducible computations with [[Guix]] \n\n## Installation \n\nOn a Linux system with the [Guix](https://guix.gnu.org/) package manager:\n\n1. Download the [Glamorous Toolkit](https://gtoolkit.com/download/).\n2. Launch Glamorous Toolkit and open a Playground.\n3. Paste the following lines into the playground and run them\n"
      },
      "date": 1661949928724
    },
    {
      "type": "edit",
      "id": "ad4cf466e83c48e5",
      "item": {
        "type": "markdown",
        "id": "ad4cf466e83c48e5",
        "text": "Note: Until Glamorous Toolkit is packaged for Guix, you will have to use Guix hosted on a different Linux distribution because the precompiled binaries for Glamorous Toolkit won't work on a pure Guix System. I am using Ubuntu for development. [https://github.com/khinsen/guix-gtoolkit github]\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n```smalltalk\nGxPersistentEnvironments new\n```\n"
      },
      "date": 1661949933204
    },
    {
      "type": "edit",
      "id": "ad4cf466e83c48e5",
      "item": {
        "type": "markdown",
        "id": "ad4cf466e83c48e5",
        "text": "Note: Until Glamorous Toolkit is packaged for Guix, you will have to use Guix hosted on a different Linux distribution because the precompiled binaries for Glamorous Toolkit won't work on a pure Guix System. [[Konrad Hinsen]] is using Ubuntu for development. [https://github.com/khinsen/guix-gtoolkit github]\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n```smalltalk\nGxPersistentEnvironments new\n```\n"
      },
      "date": 1661949963317
    },
    {
      "type": "edit",
      "id": "ad4cf466e83c48e5",
      "item": {
        "type": "markdown",
        "id": "ad4cf466e83c48e5",
        "text": "**Note**: Until Glamorous Toolkit is packaged for Guix, you will have to use Guix hosted on a different Linux distribution because the precompiled binaries for Glamorous Toolkit won't work on a pure Guix System. [[Konrad Hinsen]] is using Ubuntu for development. [https://github.com/khinsen/guix-gtoolkit github]\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n```smalltalk\nGxPersistentEnvironments new\n```\n"
      },
      "date": 1661949972859
    },
    {
      "item": {
        "type": "factory",
        "id": "0545ff9b0e04626a"
      },
      "id": "0545ff9b0e04626a",
      "type": "add",
      "after": "ad4cf466e83c48e5",
      "date": 1661950134747
    },
    {
      "type": "edit",
      "id": "ad4cf466e83c48e5",
      "item": {
        "type": "markdown",
        "id": "ad4cf466e83c48e5",
        "text": "**Note**: Until Glamorous Toolkit is packaged for Guix, you will have to use Guix hosted on a different Linux distribution because the precompiled binaries for Glamorous Toolkit won't work on a pure Guix System. [[Konrad Hinsen]] is using Ubuntu for development. [https://github.com/khinsen/guix-gtoolkit github]\n\n## Functionality\n\nThe goal of this project is to support\n - the exploration of packages and environments, for the sake of transparency\n - the management of reproducible computational environments\n\nGuix features that are currently (and perhaps forever) unsupported include\n - profiles\n - modifications to package definitions\n - package development\n\n## Channels\n\nA collection of packages in Guix is defined by a set of [channels](https://guix.gnu.org/en/manual/en/html_node/Channels.html#Channels), a channel being a Git repository containing package definitions. Guix manages a set of default channels for each user, which you can see by typing `guix describe` in a terminal, and which you can update using `guix pull`. In Pharo code, this set of default channels is accessed as\n```smalltalk\nGxChannels current\n```\n\nAlternatively, you can define channels explicitly in terms of (1) a name, (2) the URL of a Git repository and (3) the commit to be used:\n```smalltalk\nGxChannel \n\tname: 'guix-past'\n\turl: 'https://gitlab.inria.fr/guix-hpc/guix-past'\n\tcommit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'\n```\n\nThe most important channel is the standard Guix channel, which can be accessed with a shorthand that requires only the commit:\n```smalltalk\nGxGuixChannel commit: '5bc5371b347681c13a41fa8d9ed5fbf64354480a'\n```\n\nFinally, you can access the more recent commit in the Guix channel via\n```smalltalk\nGxGuixChannel latest\n```\nWatch out though: the latest commit typically changes several times a day!\n\nYou can combine channels by concatenation:\n```smalltalk\nguix := GxGuixChannel latest.\nguixPast := GxChannel name: 'guix-past' url: 'https://gitlab.inria.fr/guix-hpc/guix-past' commit: '0f892e4f9c37c385ecde66547d5c56d096b7109c'.\ntwoChannels := guix, guixPast\n```\n\n## Exploring packages\n\nStarting from a set of channels, you can obtain a package catalog with many browsing features:\n```smalltalk\nGxChannels current packageCatalog\n```\n\nThe looking-glass icon gives access to a powerful search engine, don't miss it!\n\n![package-catalog](https://user-images.githubusercontent.com/94934/116088801-7dc66980-a6a2-11eb-8775-44f7a41aaf06.png)\n\n## Environments\n\nA computational environment defines the resources that a computation has access to. These resources include in particular software packages, but also the network, parts of the file system, environment variables, etc. Guix provides very detailed control over the resources that are accessible in the environment (see [the manual](https://guix.gnu.org/en/manual/en/html_node/Invoking-guix-environment.html)), but the command-line interface is rather messy and oriented towards the needs of software developers rather than towards facilitating reproducible computation.\n\nFor now, the only type of Guix environment supported corresponds to `guix environment --pure`, with all environment variables cleared. Support for container environments will be added later. Non-pure environments, however, will not be supported, because they are not reproducible.\n\nEnvironments can be ephemeral or persistent. Ephemeral environments are typically constructed on the fly for running a specific program. Example:\n```smalltalk\nenv := GxChannels current newEnvironment\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'.\n(env command: 'python3' arguments: #('-c' 'import numpy; print(numpy.__version__)'))\n\trunAndWait;\n\tstdout\n```\nThis creates an empty environment based on the current state of the user's default channels and adds two packages. Next, a command is run in that environment, returning its standard output. The `command:argument:` method is a convenience function that has some limitations. It is useful mainly for short runs returning small enough output to collect in memory. In the spirit of a convenience function, it passes a few frequently needed environment variables (such as `HOME` or `DISPLAY`) into the new environment. For more control over processes run in a `GxEnvironment`, use\n```smalltalk\nenv newSubprocess\n```\nwhich creates an instance of `OSSUnixSubprocess` (see the [OSSubprocess](https://github.com/pharo-contributions/OSSubprocess) package) whose behavior is only slightly  modified:\n 1. The subprocess does not inherit any environment variables.\n 2. The command/arguments combination is modified to include the required invocation of Guix.\n\nPersistent environments are identified by a name:\n```smalltalk\nenv := (GxChannels current newEnvironmentNamed: 'Python')\n\taddPackageOutput: 'python';\n\taddPackageOutput: 'python-numpy'\n```\nTheir definitions are stored in the filesystem (under `$HOME/.config/guix-environments`), in one directory per environment, each containing two files:\n - `channels.scm` to define the channels\n - `manifest.scm` to define the packages\nThese two files contain Scheme code compatible with the Guix command line tool, meaning that persistent environments can be used from the terminal and also in shell scripts.\n\nThere is a rudimentary editor for persistent environments, available by inspecting\n\n"
      },
      "date": 1661950136068
    },
    {
      "type": "edit",
      "id": "0545ff9b0e04626a",
      "item": {
        "type": "code",
        "id": "0545ff9b0e04626a",
        "text": "```smalltalk\nGxPersistentEnvironments new\n```"
      },
      "date": 1661950137309
    }
  ]
}