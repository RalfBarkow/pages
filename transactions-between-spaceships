{
  "title": "Transactions between Spaceships",
  "story": [
    {
      "type": "paragraph",
      "id": "f7e0601273619cf5",
      "text": "The next use case is fictional and about a fleet of spaceships. Imagine, people can freely travel from one spaceship to another by beaming. However, each ship has an upper and lower bound of people it can carry. That implies, that there is some protecting mechanism to ensure, that the upper or lower bound is not exceeded when several people move simultaneously to the same spaceship and vice versa. This fictional use case, represents any other in which atomic transactions are needed to ascertain given limitations (e.g. a bank system). Under the term atomic transaction, a change from one state to another is meant which either succeeds completely or not at all. In order to be able to classify the characteristics, it is determined that the implemented model of this use case will run locally on one machine. Moreover, the sequence of transaction is known before the execution to guarantee an equal burden for each implementation."
    },
    {
      "type": "paragraph",
      "id": "8ce03554597ef508",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "7419ce5cba0fb16d",
      "text": "Relating to the characteristics (see figure 6.5), the problem has to track the number of people carried by each ship. Abstracting this more, the problem deals with having several counters which are modified concurrently and it is mandatory to keep each counter in a valid state. To achieve that, different techniques and models for concurrency can be employed but nevertheless the capability for parallelization of the problem is limited. The amount of state which is cared about is medium to high, because tracking a counter is only few work but caring about their concurrent modification needs more effort. Moreover, modifying multiple counters is not computing intensive and the I/O intensity will mostly depend whether it is executed locally or on a distributed system. The latter would cause a higher I/O intensity due to the network communication."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Transactions between Spaceships",
        "story": []
      },
      "date": 1713164673511
    },
    {
      "item": {
        "type": "factory",
        "id": "f7e0601273619cf5"
      },
      "id": "f7e0601273619cf5",
      "type": "add",
      "date": 1713164674946
    },
    {
      "type": "edit",
      "id": "f7e0601273619cf5",
      "item": {
        "type": "paragraph",
        "id": "f7e0601273619cf5",
        "text": "The next use case is fictional and about a fleet of spaceships. Imagine, people can freely travel from one spaceship to another by beaming. However, each ship has an upper and lower bound of people it can carry. That implies, that there is some protecting mechanism to ensure, that the upper or lower bound is not exceeded when several people move simultaneously to the same spaceship and vice versa. This fictional use case, represents any other in which atomic transactions are needed to ascertain given limitations (e.g. a bank system). Under the term atomic"
      },
      "date": 1713164677323
    },
    {
      "type": "edit",
      "id": "f7e0601273619cf5",
      "item": {
        "type": "paragraph",
        "id": "f7e0601273619cf5",
        "text": "The next use case is fictional and about a fleet of spaceships. Imagine, people can freely travel from one spaceship to another by beaming. However, each ship has an upper and lower bound of people it can carry. That implies, that there is some protecting mechanism to ensure, that the upper or lower bound is not exceeded when several people move simultaneously to the same spaceship and vice versa. This fictional use case, represents any other in which atomic transactions are needed to ascertain given limitations (e.g. a bank system). Under the term atomic transaction, a change from one state to another is meant which either succeeds completely or not at all. In order to be able to classify the characteristics, it is determined that the implemented model of this use case will run locally on one machine. Moreover, the sequence of transaction is known before the execution to guarantee an equal burden for each implementation."
      },
      "date": 1713164688716
    },
    {
      "type": "add",
      "id": "8ce03554597ef508",
      "item": {
        "type": "paragraph",
        "id": "8ce03554597ef508",
        "text": "[…]"
      },
      "after": "f7e0601273619cf5",
      "date": 1713164690394
    },
    {
      "item": {
        "type": "factory",
        "id": "7419ce5cba0fb16d"
      },
      "id": "7419ce5cba0fb16d",
      "type": "add",
      "after": "8ce03554597ef508",
      "date": 1713164757143
    },
    {
      "type": "edit",
      "id": "7419ce5cba0fb16d",
      "item": {
        "type": "paragraph",
        "id": "7419ce5cba0fb16d",
        "text": "Relating to the characteristics (see figure 6.5), the problem has to track the number of people carried by each ship. Abstracting this more, the problem deals with having several counters which are modified concurrently and it is mandatory to keep each counter in a valid state. To achieve that, different techniques and models for concurrency can be employed but nevertheless the capability for parallelization of the problem is limited. The amount of state which is cared about is medium to high, because tracking a counter is only few work but caring about their concurrent modification needs more effort. Moreover, modifying multiple counters is not computing intensive and the I/O intensity will mostly depend whether it is executed locally or on a distributed system. The latter would cause a higher I/O intensity due to the network communication."
      },
      "date": 1713164760641
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713183984625
    }
  ]
}