{
  "title": "New Computational Markup",
  "story": [
    {
      "type": "paragraph",
      "id": "46b7336f7d90a17c",
      "text": "As I (Ward) write ever more html scripts to work within the sandbox provided by the Frame plugin I wonder if I just stepped up a level of abstraction I might write a transformer that reads and writes \"sources\" as we do in our lineups and offer a bit of uniform UI for buttons, lists and and other visual navigations. [https://app.element.io/#/room/#fedwiki:matrix.org/$171624567336872ClCoj:matrix.org matrix]"
    },
    {
      "type": "paragraph",
      "id": "f38db00e7680c316",
      "text": "I thought, what would I call such a computational plugin? We source and sink objects through the lineup so I search \"source sink transformation\" and found that there is already quite a bit out there for inspiration."
    },
    {
      "type": "paragraph",
      "id": "c2d2a15f6dc91a63",
      "text": "That doesn't mean that we wouldn't benefit from building a plugin with complexity similar to the \"algorithmic drawing\" markup of the Graphviz plugin. This is markup that describes the \"visitor pattern\" for collecting dot language content from wiki pages. [http://fed.wiki/view/more-about-algorithmic-markup about]"
    },
    {
      "type": "paragraph",
      "id": "75875ec61b0b576a",
      "text": "I think the most valuable thing a new interpreter could offer is uniform and tolerant exception handling. I wrote a calculator plugin once that echoed the steps of the calculation and added footnotes (clickable asterisks) on statements that failed one way or another. This might be a good model for describing a \"happy path\" and then learning where deviations happen and leaving it to the reader-programmer to decide if they matter."
    },
    {
      "type": "paragraph",
      "id": "3b626f5d30d27bca",
      "text": "See [[Happy Path Script Summaries]]"
    },
    {
      "type": "paragraph",
      "id": "2a77a5d87eac8cfd",
      "text": "Aside: I've used a similar methodology in my \"exploratory parsing\". This would be an exploratory transformer that would encourage more structured content in federated wiki."
    },
    {
      "type": "paragraph",
      "id": "aa48a722a83c81c4",
      "text": "The heart of algorithmic drawing is the function eval that interprets markup (pre-parsed into a tree) as instructions for a breadth-first traversal of wiki pages starting from what is already available in the plugin's context. [https://github.com/dobbs/wiki-plugin-graphviz/blob/main/client/graphviz.js#L200-L376 github]"
    },
    {
      "type": "paragraph",
      "id": "784bfc97e7edca37",
      "text": "I'm not proud of this code except that it did manage efficient async fetches of wiki pages before I had a lot of skill in this area. I find async overlap is the dominant consideration in most of the scripts I write these days. Maybe we can make an eval that is beautiful?"
    },
    {
      "type": "paragraph",
      "id": "4715e2bdba6e6586",
      "text": "See [[More Motivation for new Markup]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "New Computational Markup",
        "story": []
      },
      "date": 1716249422746
    },
    {
      "item": {
        "type": "factory",
        "id": "46b7336f7d90a17c"
      },
      "id": "46b7336f7d90a17c",
      "type": "add",
      "date": 1716249440607
    },
    {
      "type": "edit",
      "id": "46b7336f7d90a17c",
      "item": {
        "type": "paragraph",
        "id": "46b7336f7d90a17c",
        "text": "As I write ever more html scripts to work within the sandbox provided by the Frame plugin I wonder if I just stepped up a level of abstraction I might write a transformer that reads and writes \"sources\" as we do in our lineups and offer a bit of uniform UI for buttons, lists and and other visual navigations."
      },
      "date": 1716249452465
    },
    {
      "type": "add",
      "id": "f38db00e7680c316",
      "item": {
        "type": "paragraph",
        "id": "f38db00e7680c316",
        "text": "I thought, what would I call such a computational plugin? We source and sink objects through the lineup so I search \"source sink transformation\" and found that there is already quite a bit out there for inspiration."
      },
      "after": "46b7336f7d90a17c",
      "date": 1716249458247
    },
    {
      "type": "add",
      "id": "c2d2a15f6dc91a63",
      "item": {
        "type": "paragraph",
        "id": "c2d2a15f6dc91a63",
        "text": "That doesn't mean that we wouldn't benefit from building a plugin with complexity similar to the \"algorithmic drawing\" markup of the Graphviz plugin. This is markup that describes the \"visitor pattern\" for collecting dot language content from wiki pages."
      },
      "after": "f38db00e7680c316",
      "date": 1716249475917
    },
    {
      "type": "add",
      "id": "db9a3275bacc6f25",
      "item": {
        "type": "paragraph",
        "id": "db9a3275bacc6f25",
        "text": "See http://fed.wiki/view/more-about-algorithmic-markup"
      },
      "after": "c2d2a15f6dc91a63",
      "date": 1716249478117
    },
    {
      "type": "add",
      "id": "75875ec61b0b576a",
      "item": {
        "type": "paragraph",
        "id": "75875ec61b0b576a",
        "text": "I think the most valuable thing a new interpreter could offer is uniform and tolerant exception handling. I wrote a calculator plugin once that echoed the steps of the calculation and added footnotes (clickable asterisks) on statements that failed one way or another. This might be a good model for describing a \"happy path\" and then learning where deviations happen and leaving it to the reader-programmer to decide if they matter."
      },
      "after": "db9a3275bacc6f25",
      "date": 1716249482937
    },
    {
      "type": "add",
      "id": "2a77a5d87eac8cfd",
      "item": {
        "type": "paragraph",
        "id": "2a77a5d87eac8cfd",
        "text": "Aside: I've used a similar methodology in my \"exploratory parsing\". This would be an exploratory transformer that would encourage more structured content in federated wiki."
      },
      "after": "75875ec61b0b576a",
      "date": 1716249495063
    },
    {
      "type": "add",
      "id": "aa48a722a83c81c4",
      "item": {
        "type": "paragraph",
        "id": "aa48a722a83c81c4",
        "text": "The heart of algorithmic drawing is the function eval that interprets markup (pre-parsed into a tree) as instructions for a breadth-first traversal of wiki pages starting from what is already available in the plugin's context. https://github.com/dobbs/wiki-plugin-graphviz/blob/main/client/graphviz.js#L200-L376"
      },
      "after": "2a77a5d87eac8cfd",
      "date": 1716249499587
    },
    {
      "type": "add",
      "id": "784bfc97e7edca37",
      "item": {
        "type": "paragraph",
        "id": "784bfc97e7edca37",
        "text": "I'm not proud of this code except that it did manage efficient async fetches of wiki pages before I had a lot of skill in this area. I find async overlap is the dominant consideration in most of the scripts I write these days. Maybe we can make an eval that is beautiful?"
      },
      "after": "aa48a722a83c81c4",
      "date": 1716249503156
    },
    {
      "type": "remove",
      "id": "db9a3275bacc6f25",
      "date": 1716249522362
    },
    {
      "type": "edit",
      "id": "c2d2a15f6dc91a63",
      "item": {
        "type": "paragraph",
        "id": "c2d2a15f6dc91a63",
        "text": "That doesn't mean that we wouldn't benefit from building a plugin with complexity similar to the \"algorithmic drawing\" markup of the Graphviz plugin. This is markup that describes the \"visitor pattern\" for collecting dot language content from wiki pages. [http://fed.wiki/view/more-about-algorithmic-markup github]"
      },
      "date": 1716249532037
    },
    {
      "type": "edit",
      "id": "c2d2a15f6dc91a63",
      "item": {
        "type": "paragraph",
        "id": "c2d2a15f6dc91a63",
        "text": "That doesn't mean that we wouldn't benefit from building a plugin with complexity similar to the \"algorithmic drawing\" markup of the Graphviz plugin. This is markup that describes the \"visitor pattern\" for collecting dot language content from wiki pages. [http://fed.wiki/view/more-about-algorithmic-markup wiki]"
      },
      "date": 1716249564475
    },
    {
      "type": "edit",
      "id": "c2d2a15f6dc91a63",
      "item": {
        "type": "paragraph",
        "id": "c2d2a15f6dc91a63",
        "text": "That doesn't mean that we wouldn't benefit from building a plugin with complexity similar to the \"algorithmic drawing\" markup of the Graphviz plugin. This is markup that describes the \"visitor pattern\" for collecting dot language content from wiki pages. [http://fed.wiki/view/more-about-algorithmic-markup about]"
      },
      "date": 1716249570663
    },
    {
      "type": "edit",
      "id": "aa48a722a83c81c4",
      "item": {
        "type": "paragraph",
        "id": "aa48a722a83c81c4",
        "text": "The heart of algorithmic drawing is the function eval that interprets markup (pre-parsed into a tree) as instructions for a breadth-first traversal of wiki pages starting from what is already available in the plugin's context. [https://github.com/dobbs/wiki-plugin-graphviz/blob/main/client/graphviz.js#L200-L376 github]"
      },
      "date": 1716249589103
    },
    {
      "type": "edit",
      "id": "46b7336f7d90a17c",
      "item": {
        "type": "paragraph",
        "id": "46b7336f7d90a17c",
        "text": "As I write ever more html scripts to work within the sandbox provided by the Frame plugin I wonder if I just stepped up a level of abstraction I might write a transformer that reads and writes \"sources\" as we do in our lineups and offer a bit of uniform UI for buttons, lists and and other visual navigations. [https://app.element.io/#/room/#fedwiki:matrix.org/$171624567336872ClCoj:matrix.org matrix]"
      },
      "date": 1716249713509
    },
    {
      "type": "add",
      "id": "3b626f5d30d27bca",
      "item": {
        "type": "paragraph",
        "id": "3b626f5d30d27bca",
        "text": "See [[Happy Path Script Summaries]]"
      },
      "after": "75875ec61b0b576a",
      "date": 1716260853134
    },
    {
      "type": "add",
      "id": "4715e2bdba6e6586",
      "item": {
        "type": "paragraph",
        "id": "4715e2bdba6e6586",
        "text": "See [[More Motivation for new Markup]]"
      },
      "after": "784bfc97e7edca37",
      "date": 1716432130058
    },
    {
      "type": "fork",
      "site": "found.ward.fed.wiki",
      "date": 1716477743478
    },
    {
      "type": "edit",
      "id": "46b7336f7d90a17c",
      "item": {
        "type": "paragraph",
        "id": "46b7336f7d90a17c",
        "text": "As I (Ward) write ever more html scripts to work within the sandbox provided by the Frame plugin I wonder if I just stepped up a level of abstraction I might write a transformer that reads and writes \"sources\" as we do in our lineups and offer a bit of uniform UI for buttons, lists and and other visual navigations. [https://app.element.io/#/room/#fedwiki:matrix.org/$171624567336872ClCoj:matrix.org matrix]"
      },
      "date": 1716477755334
    }
  ]
}