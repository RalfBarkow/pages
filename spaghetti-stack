{
  "title": "Spaghetti Stack",
  "story": [
    {
      "type": "html",
      "text": "<i>\"The continuation that obeys only obvious stack semantics, O grasshopper, is not the true continuation.\"</i>",
      "id": "205be130dd1ccb27106670bfbd8b467a"
    },
    {
      "type": "html",
      "text": "- [[Guy Steele]] Jr.",
      "id": "5c1489a712e0306f207a17f3bb61c279"
    },
    {
      "type": "html",
      "text": "\nA [[Spaghetti Stack]] is a stack structure in which the frames that are pushed onto the stack are not destroyed when they are popped. Instead, they persist indefinitely, and continue to refer to the parent frames. They can be re-visited and popped again.",
      "id": "36bed5c46d8a217c7b836d9294836ce0"
    },
    {
      "type": "html",
      "text": "\nThis idea may be familiar to some people who have written C compilers. When scanning a statement block scope, you push a symbol table which points to the parent symbol table. This creates a [[Lexical Scope]]. When the block terminates, the symbol table is popped from the stack---but references to it remain in the constructed parse tree, and it keeps a pointer back to the parent!",
      "id": "9bb01eac85901d263f4845003aea5093"
    },
    {
      "type": "html",
      "text": "\n[[Spaghetti Stack]]s are used at <b>run-time</b> in languages that support [[Call With Current Continuation]]. They allow control to return to a frame that has previously executed and returned. The elements of the [[Spaghetti Stack]] are dynamically allocated objects that are subject to garbage collection, rather than a flat array of memory with a moving pointer.",
      "id": "947584848d040d360678b016d8c09457"
    },
    {
      "type": "html",
      "text": "\nIf an implementation of the C language were equipped with a [[Spaghetti Stack]], it would become legal to save a context with setjmp() in some function, return from that function and then jump back in with a longjmp(), then return from that function again!",
      "id": "89be52c6bbd16de3b1829ba0d27141eb"
    },
    {
      "type": "html",
      "text": "\nIn the [[Scheme Language]], this kind of jumping around is done with continuations. There is even a special construct for winding and [[Unwinding The Stack]] called dynamic-wind, by which one can indicate some set-up actions to be done on the way down, and clean-up actions on the way up. These are invoked repeatedly, as many times as you go in and out.",
      "id": "2ac55d52c6c323eec714ee70b5f8f1bb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f6261d63b1c8e24a8696ac08a19a6cb2"
    },
    {
      "type": "html",
      "text": "See [[Call With Current Continuation]], [[Continuation Explanation]] [[Category Continuation]]",
      "id": "0c7905f2a8578de4357b90592a0a185c"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SpaghettiStack c2.com]",
      "id": "44a580eb1109542165501e49d923e7dd"
    }
  ],
  "journal": [
    {
      "date": 1093028245000,
      "id": "ad53eb70a9db46f969197c8bb3842628",
      "type": "create",
      "item": {
        "title": "Spaghetti Stack",
        "story": [
          {
            "type": "html",
            "text": "<i>\"The continuation that obeys only obvious stack semantics, O grasshopper, is not the true continuation.\"</i>",
            "id": "205be130dd1ccb27106670bfbd8b467a"
          },
          {
            "type": "html",
            "text": "- [[Guy Steele]] Jr.",
            "id": "5c1489a712e0306f207a17f3bb61c279"
          },
          {
            "type": "html",
            "text": "\nA [[Spaghetti Stack]] is a stack structure in which the frames that are pushed onto the stack are not destroyed when they are popped. Instead, they persist indefinitely, and continue to refer to the parent frames. They can be re-visited and popped again.",
            "id": "36bed5c46d8a217c7b836d9294836ce0"
          },
          {
            "type": "html",
            "text": "\nThis idea may be familiar to some people who have written C compilers. When scanning a statement block scope, you push a symbol table which points to the parent symbol table. This creates a [[Lexical Scope]]. When the block terminates, the symbol table is popped from the stack---but references to it remain in the constructed parse tree, and it keeps a pointer back to the parent!",
            "id": "9bb01eac85901d263f4845003aea5093"
          },
          {
            "type": "html",
            "text": "\n[[Spaghetti Stack]]s are used at <b>run-time</b> in languages that support [[Call With Current Continuation]]. They allow control to return to a frame that has previously executed and returned. The elements of the [[Spaghetti Stack]] are dynamically allocated objects that are subject to garbage collection, rather than a flat array of memory with a moving pointer.",
            "id": "947584848d040d360678b016d8c09457"
          },
          {
            "type": "html",
            "text": "\nIf an implementation of the C language were equipped with a [[Spaghetti Stack]], it would become legal to save a context with setjmp() in some function, return from that function and then jump back in with a longjmp(), then return from that function again!",
            "id": "89be52c6bbd16de3b1829ba0d27141eb"
          },
          {
            "type": "html",
            "text": "\nIn the [[Scheme Language]], this kind of jumping around is done with continuations. There is even a special construct for winding and [[Unwinding The Stack]] called dynamic-wind, by which one can indicate some set-up actions to be done on the way down, and clean-up actions on the way up. These are invoked repeatedly, as many times as you go in and out.",
            "id": "2ac55d52c6c323eec714ee70b5f8f1bb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f6261d63b1c8e24a8696ac08a19a6cb2"
          },
          {
            "type": "html",
            "text": "See [[Call With Current Continuation]], [[Continuation Explanation]] [[Category Continuation]]",
            "id": "0c7905f2a8578de4357b90592a0a185c"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SpaghettiStack c2.com]",
            "id": "44a580eb1109542165501e49d923e7dd"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1674055822441
    }
  ]
}