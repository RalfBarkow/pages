{
  "title": "Regular Expression",
  "story": [
    {
      "type": "html",
      "text": "Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems. --[[Jamie Zawinski]] ",
      "id": "8cbf98f3d87dc5e209050f1e218fafc0"
    },
    {
      "type": "html",
      "text": "\nFor a contrary opinion, and a pointer to a book well worth reading, [http://gilesbowkett.blogspot.com/2011/10/i-had-problem-and-i-decided-to-use.html gilesbowkett.blogspot.com]. -- [[Robert Field]]",
      "id": "5760a76dd092790f968dc27b03d171dc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "Also known as regex or regexp ([[Reg Exp]])",
      "id": "7e7fec0e0dc8560e12eccaf79d0def9e"
    },
    {
      "type": "html",
      "text": "\n[[Regular Expressions]] are a fundamental building block of [[Computer Science]]. In their basic form, the language of [[Regular Expressions]] is formally equivalent to [[Finite Automata]] ([[Finite State Machine]]s), both of the deterministic and nondeterministic flavors. Regexes are also extremely commonly used in Unix, and are basically the heart of the Perl programming language. ",
      "id": "e732e44f585adfe358cd4c6d078f0a1a"
    },
    {
      "type": "html",
      "text": "\nThey are also a wonderful way to write programs that are [[Wrong But Good Enough]]?. [[Regular Expressions]] are most often incorrect - to do a correct search, you usually need to consider the structure of the file. -- [[Lex Spoon]] ",
      "id": "2e7bf78f83d86b725fa46f6043bbcbf4"
    },
    {
      "type": "html",
      "text": "\nNote that the <i>programming language feature</i> known as regular expressions, and the thing from computation theory (the set of grammars which can be recognized by a DFA) are two different things.  [[Regular Expressions Arent]].",
      "id": "7729afcf8aba7f3f3537a9652836c84b"
    },
    {
      "type": "html",
      "text": "\nI find [[Regular Expressions]] a wonderful way of coming up with programs that are Right, let alone [[Good Enough]]. In practice, [[Regular Expressions]] are usually capable of handling the structure of the file (in other words, for simple enough structures). Granted, there is often the temptation to use overly simplified regex - but this way lies madness. If it is a relatively sane parsing problem, [[Regular Expressions]] are just the ticket. -- [[Anonymous Donor]] ",
      "id": "f7e4b2aeab9dd95308f34ae30aa40af2"
    },
    {
      "type": "html",
      "text": "\n[[Regular Expressions]] are surprisingly good at analysing imprecise, free-form or natural-language material. They really suck for structured-text analysis, which I think is what [[Lex Spoon]] is talking about. ",
      "id": "dd1f85d6947c17f3d7ac16aed7ee4472"
    },
    {
      "type": "html",
      "text": "\nI guess a good exercise is to try and make a [[Regular Expression]] that matches all SGML/XML tags within text. You have to make sure they are not within a quoted environment, and in searching the end of the tag, you have to take into account comments, quotes and quoted quotes. And that doesn't yet even check the tag is correctly written. The complete [[Regular Expression]] might get many lines long. -- [[Panu Kalliokoski]] ",
      "id": "1b5c479a5ec28c333d110252e3296cde"
    },
    {
      "type": "html",
      "text": "\nActually, I believe complete XML parsing with [[Regular Expressions]] isn't possible, due to limitations inherent to [[Regular Expressions]]. It's been a couple of years since I read a book about 'compiler building' (the new [[Dragon Book]]?, I believe it was), and I'd have to crack it open again to fill in the details. (And I believe there is some information on wiki about the three levels of grammars, but I can't find it. Anyhow, only the most restricted of those levels can be parsed with only regexps. And XML isn't in that level). ",
      "id": "bfc4616a01ed7080a84dae7fd2595793"
    },
    {
      "type": "html",
      "text": "<b><i>Matching all tags</b> is not the same as <b>parsing</b>. XML parsing is indeed impossible with Regular Expressions, as is anything that allows arbitrarily deep nesting (the touchstone of a non-regular language), but that doesn't imply that it is impossible to at least pluck out all tags with a nice, long regular expression. I don't think it's impossible but a standard Finite Automata to do so would be as ugly as sin, because standard Finite Automata do not fare well with rules like \"Anything but an A followed by a B\"... nest two or three of those within each other and it passes the human ability to read or write with the multiplicity of states, but it is still, technically, an FA. A regular expression can be written because while a correct one must worry about CDATA and commenting, there are still a finite number of permutations of \"modes\" you can be in, because you can't be in a \"CDATA nested in a comment nested in CDATA nested in CDATA\".</i>",
      "id": "f33a1c283959eb932d945469283ea49b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "<b>A few pages on this wiki:</b> [[[Edit Hint]], move to bottom?]",
      "id": "96cb0551845503f9f708ff94890f0e22"
    },
    {
      "type": "html",
      "text": "\nSee [[Text Formatting Regular Expressions]] for the regular expressions this Wiki uses. ",
      "id": "a53bd0088d44eae756bb5c12bfd0d5e6"
    },
    {
      "type": "html",
      "text": "\nSee [[Regular Expression Match Assertion]], [[Alternatives To Regular Expressions]], [[Structural Regular Expressions]], [[Regular Expression Examples]].",
      "id": "22339b733c26e15c1ea90415b9fe50b3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "<b>Other sources of information on [[Regular Expressions]]:</b>",
      "id": "d92baf1dc63ee98d69381f658b3b48f1"
    },
    {
      "type": "html",
      "text": "\nJeffrey E.F. Friedl's book [[Mastering Regular Expressions]] has more information than you probably want to know, including specifics of POSIX [[Regular Expressions]].",
      "id": "b6cb6cd62a37d89df030bb4d374d4315"
    },
    {
      "type": "html",
      "text": "\nFor an online tutorial see: [http://www.regular-expressions.info/about.html www.regular-expressions.info]",
      "id": "727e27f1b67085eb58084de01424a401"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "\nRegular expressions are a broken form of [[Prolog Language]]. Without cuts!",
      "id": "d85c26dee3d9d30f156ceae0598f8ae3"
    },
    {
      "type": "html",
      "text": "\nYou can't write a serious program with regular expressions. Even toy programs end up having to reimplement cuts outside of regexp. That's because each additional subexpression explodes the space which has to be backtracked, and the run time ends up being very polynomial.",
      "id": "2a49868a8c2a050976bee7be7f5c9f7c"
    },
    {
      "type": "html",
      "text": "\nConcrete example: I have a regular expression made up of 27 distinct subexpressions, and I want to match the whole sucker to a string that contains a <b>single</b> matching entry. Matching 17 of those 27 subexpressions takes 0.8 seconds. 19 takes 8 seconds. I ran out of patience so I don't even know how long it takes to match 21 out of 27.",
      "id": "a7bfb78156518fc43639ee92afa906e1"
    },
    {
      "type": "html",
      "text": "\nOh, and here's the bad thing. Regular expressions are <i>also</i> polynomial in the <i>number of matching entries</i> they're working over. But if you limit it to 3 subexpressions, it's linear. Go figure.",
      "id": "5c9cb73b1b323b91f2bd22dc63dc79e8"
    },
    {
      "type": "html",
      "text": "<i> The problem is Perl (or some other PCRE language).  Use awk (lol) and/or see [http://swtch.com/~rsc/regexp/regexp1.html swtch.com]</i>",
      "id": "a4c411ba59f71b05ec57a88503355dcc"
    },
    {
      "type": "html",
      "text": "\nRestructuring my program so it CAN make use of cuts, which of course I'll have to implement, will be a pain.",
      "id": "4ed4f51d0004b51c863ec3d5244e6f65"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "\n[[Regular Expression]]s were introduced by S.C. Kleene to describe the [[Mc Culloch]] and Pitts 1943 finite automata model of neurons. (\"Representation of Events in Nerve Nets\", p3-40 in [[Claude Shannon]]/[[John Mc Carthy]] \"Automata Studies\", 1956)",
      "id": "59f80d311719398ce4a81cc30c8772ca"
    },
    {
      "type": "html",
      "text": "\nThe first application of [[Regular Expression]]s to editor search/replace (in the QED editor) was by [[Ken Thompson]], who published a [[Regular Expression]]-to-NFA algorithm in 1968, \"Regular Expression Search Algorithm\", CACM 11:6, 419-422",
      "id": "1f9734d91b4af88ea59f057e841e5d9b"
    },
    {
      "type": "html",
      "text": "\n[[Ken Thompson]] went on to reimplement this in the Unix <b>ed</b> editor, which [[Bill Joy]] turned into the <b>vi</b> editor. [[Ken Thompson]] adapted the <b>ed</b> code for <b>grep</b> and <b>sed</b>. (Some years after its creation, Emacs eventually borrowed the idea of [[Regular Expression]]s, but not the code, directly from these Unix editors -- RMS, private communication)",
      "id": "23625b75bdde6160d9c0866914d4de6d"
    },
    {
      "type": "html",
      "text": "\n[[Steve Johnson]] (prior to, and building towards, his Unix <b>yacc</b> tool) and [[Mike Lesk]] (in the Unix <b>lex</b>) did some of the earliest applications of [[Regular Expression]]s to compiler lexical analyzers via automated DFA-building tools.",
      "id": "757d072276b3d9af9b843ca8c6b8270b"
    },
    {
      "type": "html",
      "text": "\nAwk is a scripting language/command line tool derived directly from this Unix Culture of [[Regular Expression]]s; it is no coincidence that the language most famous for [[Regular Expression]]s today, <b>perl</b>, was developed in a Unix environment, inspired by <b>awk</b> and other Unix [[Regular Expression]] tools.",
      "id": "f75efafc2c5fd6a7353aaf9fbb9c16bf"
    },
    {
      "type": "html",
      "text": "\n[[Regular Expression]]s were thus widespread in Unix tools of all sorts from the beginning, years to decades before this technology was widespread elsewhere (although obviously there were exceptions), and [[Regular Expression]]s have always been an extremely important (albeit under-acknowledged) part of [[Unix Culture]], contributing to the historical attitudes of [[Smug Unix Weenies]] that other systems [[Just Dont Get It]].",
      "id": "2c2e62cd0518d5e17624f5ecf246c098"
    },
    {
      "type": "html",
      "text": "\nPipes have historically been considered to have been the [[Killer App]] of Unix, but there's a strong argument that it was actually [[Regular Expression]]s. Never heard that, but if its a \"strong\" argument, I'm convinced",
      "id": "d5249968a7fe795b81e0a259cfe68154"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "<b>Resources</b>",
      "id": "467eb89b3b14d39507aa39252e03fd0e"
    },
    {
      "type": "html",
      "text": "<i>Netscape [[Java Script]] </i> [http://www.evolt.org/article/Regular_Expressions_in_JavaScript/17/36435/ www.evolt.org] and \n[http://web.archive.org/web/20030810202454/devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html web.archive.org]",
      "id": "3c270f9d4ccc71eb2d8fd798c054beb7"
    },
    {
      "type": "html",
      "text": "<i>[[Perl Language]] usage</i>",
      "id": "96234494ee41145da3bdc8adc3adb640"
    },
    {
      "type": "html",
      "text": "\nSyntax ",
      "id": "ca8dbd10dfa45cbcb6f7d2328221c2a6"
    },
    {
      "type": "html",
      "text": " [http://search.cpan.org/dist/perl/pod/perlre.pod search.cpan.org]\nTutorial",
      "id": "d8d71774f28d70f2aefa82a8ab32c8db"
    },
    {
      "type": "html",
      "text": " [http://search.cpan.org/~dapm/perl-5.10.1/pod/perlretut.pod search.cpan.org]\nOperators",
      "id": "c08f6e314ada3866efb63b75a313575a"
    },
    {
      "type": "html",
      "text": " [http://search.cpan.org/~dapm/perl-5.10.1/pod/perlop.pod search.cpan.org]\nReference",
      "id": "4791a3595b606bbe3bf65d7eb4f3c21a"
    },
    {
      "type": "html",
      "text": " [http://search.cpan.org/~dapm/perl-5.10.1/pod/perlreref.pod search.cpan.org]",
      "id": "83dcc71ab6d6f68f9d0adb85db7b2b0c"
    },
    {
      "type": "html",
      "text": "<i>[[Vb Script]] usage</i>",
      "id": "588bc1909a5ddb8f39d7e26269a96ae4"
    },
    {
      "type": "html",
      "text": "\n[http://msdn.microsoft.com/library/default.asp?URL=/library/en-us/dnclinic/html/scripting051099.asp msdn.microsoft.com]",
      "id": "4a99abbbad6bd7c1b303b8e4e4c427f3"
    },
    {
      "type": "html",
      "text": "<i>Reg<b></b>Exp Coach</i> [http://farm.tucows.com/blog/_archives/2004/10/27/167823.html farm.tucows.com]",
      "id": "05fbf9498a2bc1413cfd3db7e9ad8307"
    },
    {
      "type": "html",
      "text": "<i>Regex<b></b>Coach (same as above?)</i> [http://www.weitz.de/regex-coach/ www.weitz.de] - <i>Very good! And in Lisp, for all the [[Smug Lisp Weenies]] out there.</i>",
      "id": "eb34f5bd18ea6a407315edcd9ce51719"
    },
    {
      "type": "html",
      "text": "<i>Steve Ramsay's Guide to Regular Expressions</i> [http://etext.lib.virginia.edu/helpsheets/regex.html etext.lib.virginia.edu]",
      "id": "8476e935840552afe0ac9da9a39574b1"
    },
    {
      "type": "html",
      "text": "<i>Redet</i> [http://billposer.org/Software/redet.html billposer.org] - a regular expression development and execution tool, supporting more than 40 search programs and programming languages.",
      "id": "cf5454b56faf2eb10169502329529fd8"
    },
    {
      "type": "html",
      "text": "\n[[Tcl Tk]] regexp visualizer  - can highlught what each part of the regexp matches - very useful when learning regexps",
      "id": "8b7c48e256523b9d0a6968eb8487c87c"
    },
    {
      "type": "html",
      "text": " [http://www.doulos.com/knowhow/tcltk/examples/trev/ www.doulos.com]",
      "id": "691e1911d88d7232bd9380e3c29f5446"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "\nI've been known to refer to [[Regular Expressions]] as \"<i>a precise notation for fuzzy matches</i>\" or \"<i>a precise notation for expressing fuzzy search logic</i>\" when explaining them to people familiar only with \"string matching\" as their search method.",
      "id": "e110470df9e1132dc4938a681389a482"
    },
    {
      "type": "html",
      "text": "\nThe concept of inclusion in/exclusion from sets, and a grammar for saying things like \"any digit at the beginning of a line, followed by at least 1 but not more than 12 of any non-punctuation character, followed by any combination of alpha-numeric characters joined to a set of non-empty parentheses, said line ending in a semicolon, possibly followed by white space\" in a compact and exact notation is not necessarily easily taught, but the look of revelation when one \"gets it\" is priceless.",
      "id": "cf805a3122a48e4846c75294ff175806"
    },
    {
      "type": "html",
      "text": "<i>As a pedagogical tool for helping people to \"get it\", that's interesting. I suppose it doesn't matter that it's technically inaccurate to call it fuzzy matching, since it depends on the pattern whether or not one specifies a literally fuzzy match in the technical [[Zadeh Lotfi]] [[Fuzzy Logic]] sense, since these people  won't be familiar with [[Fuzzy Logic]] now nor in the future?</i>",
      "id": "ac686e9c91a99e9a955fe05ea4634500"
    },
    {
      "type": "html",
      "text": "\nJust so.  I originally hesitated before using \"fuzzy\" to describe it, but you're right, [[Fuzzy Logic]] is well beyond the scope of where they'll go (though I usually throw in a disclaimer that I'm playing fast and loose with the term).  The main hurdle for them is usually the use of \"any\" and \"not\" in conjunction with \"at least\" and so on.  It's getting them to the point where they realize that they're not looking for precise spellings and not confined by having to examine every occurrence of some word just because they can't remember <i>exactly</i> what words are around it.  It's a little liberty I take -- somewhat in the name of [[Wittgensteins Ladder]] -- to get over the concept hump.",
      "id": "98e27be8ca316bb4d3452b310f33812d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "I think I just broke a refactoring record. I was rewriting code from a [[Bad Programmer]] and I chopped 127 lines into 7 using a [[Regular Expression]] in [[Csharp Language]]  :) The Regex parsed an XML file stream and split out 2 elements by name, with values optionally in quotes. The other programmer manually parsed the file, split it into arrays, split those into key/value pairs, foreach-ed through those till he found the ones he wanted, stored them into separates strings, then later recombined them into the final XML. OMG what a nightmare it was, but I will never go back to a non-[[Regular Expression]] language! (I'm a former VB6 junkie)",
      "id": "1035e0b361ebe0d4b7dbd50dc0bcfe9d"
    },
    {
      "type": "html",
      "text": " [[Regular Expression]] was not supported well in MS environments (buggy and slow) before. Why did you not use the Xml parsers to do what you need to do?",
      "id": "2ae1dfc02089131f9e8711f191d030c0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "[[My Browser]], [[Fire Fox]] 2.0.0.11 -- allows Find in this page, but without [[Regular Expression]]s -- Maybe the [[Open Source]] contributors can add that.",
      "id": "7d58ed405591f3ed4515d69596084e05"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "See also: [[Alternatives To Regular Expressions]]",
      "id": "322effaf210ddaed3a46293bf28edee2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3526701aebe0e24667755b2755f6f5be"
    },
    {
      "type": "html",
      "text": "[[Category Regular Expressions]] [[Category Language Feature]]",
      "id": "798b9fddb6fdc4f02eeb969dcc38ab15"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?RegularExpression c2.com]",
      "id": "6d3e37eceae517d30728a941c0fd9808"
    }
  ],
  "journal": [
    {
      "date": 1408321803000,
      "id": "0cd1cee099ba09486245ed8149a6c225",
      "type": "create",
      "item": {
        "title": "Regular Expression",
        "story": [
          {
            "type": "html",
            "text": "Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems. --[[Jamie Zawinski]] ",
            "id": "8cbf98f3d87dc5e209050f1e218fafc0"
          },
          {
            "type": "html",
            "text": "\nFor a contrary opinion, and a pointer to a book well worth reading, [http://gilesbowkett.blogspot.com/2011/10/i-had-problem-and-i-decided-to-use.html gilesbowkett.blogspot.com]. -- [[Robert Field]]",
            "id": "5760a76dd092790f968dc27b03d171dc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "Also known as regex or regexp ([[Reg Exp]])",
            "id": "7e7fec0e0dc8560e12eccaf79d0def9e"
          },
          {
            "type": "html",
            "text": "\n[[Regular Expressions]] are a fundamental building block of [[Computer Science]]. In their basic form, the language of [[Regular Expressions]] is formally equivalent to [[Finite Automata]] ([[Finite State Machine]]s), both of the deterministic and nondeterministic flavors. Regexes are also extremely commonly used in Unix, and are basically the heart of the Perl programming language. ",
            "id": "e732e44f585adfe358cd4c6d078f0a1a"
          },
          {
            "type": "html",
            "text": "\nThey are also a wonderful way to write programs that are [[Wrong But Good Enough]]?. [[Regular Expressions]] are most often incorrect - to do a correct search, you usually need to consider the structure of the file. -- [[Lex Spoon]] ",
            "id": "2e7bf78f83d86b725fa46f6043bbcbf4"
          },
          {
            "type": "html",
            "text": "\nNote that the <i>programming language feature</i> known as regular expressions, and the thing from computation theory (the set of grammars which can be recognized by a DFA) are two different things.  [[Regular Expressions Arent]].",
            "id": "7729afcf8aba7f3f3537a9652836c84b"
          },
          {
            "type": "html",
            "text": "\nI find [[Regular Expressions]] a wonderful way of coming up with programs that are Right, let alone [[Good Enough]]. In practice, [[Regular Expressions]] are usually capable of handling the structure of the file (in other words, for simple enough structures). Granted, there is often the temptation to use overly simplified regex - but this way lies madness. If it is a relatively sane parsing problem, [[Regular Expressions]] are just the ticket. -- [[Anonymous Donor]] ",
            "id": "f7e4b2aeab9dd95308f34ae30aa40af2"
          },
          {
            "type": "html",
            "text": "\n[[Regular Expressions]] are surprisingly good at analysing imprecise, free-form or natural-language material. They really suck for structured-text analysis, which I think is what [[Lex Spoon]] is talking about. ",
            "id": "dd1f85d6947c17f3d7ac16aed7ee4472"
          },
          {
            "type": "html",
            "text": "\nI guess a good exercise is to try and make a [[Regular Expression]] that matches all SGML/XML tags within text. You have to make sure they are not within a quoted environment, and in searching the end of the tag, you have to take into account comments, quotes and quoted quotes. And that doesn't yet even check the tag is correctly written. The complete [[Regular Expression]] might get many lines long. -- [[Panu Kalliokoski]] ",
            "id": "1b5c479a5ec28c333d110252e3296cde"
          },
          {
            "type": "html",
            "text": "\nActually, I believe complete XML parsing with [[Regular Expressions]] isn't possible, due to limitations inherent to [[Regular Expressions]]. It's been a couple of years since I read a book about 'compiler building' (the new [[Dragon Book]]?, I believe it was), and I'd have to crack it open again to fill in the details. (And I believe there is some information on wiki about the three levels of grammars, but I can't find it. Anyhow, only the most restricted of those levels can be parsed with only regexps. And XML isn't in that level). ",
            "id": "bfc4616a01ed7080a84dae7fd2595793"
          },
          {
            "type": "html",
            "text": "<b><i>Matching all tags</b> is not the same as <b>parsing</b>. XML parsing is indeed impossible with Regular Expressions, as is anything that allows arbitrarily deep nesting (the touchstone of a non-regular language), but that doesn't imply that it is impossible to at least pluck out all tags with a nice, long regular expression. I don't think it's impossible but a standard Finite Automata to do so would be as ugly as sin, because standard Finite Automata do not fare well with rules like \"Anything but an A followed by a B\"... nest two or three of those within each other and it passes the human ability to read or write with the multiplicity of states, but it is still, technically, an FA. A regular expression can be written because while a correct one must worry about CDATA and commenting, there are still a finite number of permutations of \"modes\" you can be in, because you can't be in a \"CDATA nested in a comment nested in CDATA nested in CDATA\".</i>",
            "id": "f33a1c283959eb932d945469283ea49b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "<b>A few pages on this wiki:</b> [[[Edit Hint]], move to bottom?]",
            "id": "96cb0551845503f9f708ff94890f0e22"
          },
          {
            "type": "html",
            "text": "\nSee [[Text Formatting Regular Expressions]] for the regular expressions this Wiki uses. ",
            "id": "a53bd0088d44eae756bb5c12bfd0d5e6"
          },
          {
            "type": "html",
            "text": "\nSee [[Regular Expression Match Assertion]], [[Alternatives To Regular Expressions]], [[Structural Regular Expressions]], [[Regular Expression Examples]].",
            "id": "22339b733c26e15c1ea90415b9fe50b3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "<b>Other sources of information on [[Regular Expressions]]:</b>",
            "id": "d92baf1dc63ee98d69381f658b3b48f1"
          },
          {
            "type": "html",
            "text": "\nJeffrey E.F. Friedl's book [[Mastering Regular Expressions]] has more information than you probably want to know, including specifics of POSIX [[Regular Expressions]].",
            "id": "b6cb6cd62a37d89df030bb4d374d4315"
          },
          {
            "type": "html",
            "text": "\nFor an online tutorial see: [http://www.regular-expressions.info/about.html www.regular-expressions.info]",
            "id": "727e27f1b67085eb58084de01424a401"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "\nRegular expressions are a broken form of [[Prolog Language]]. Without cuts!",
            "id": "d85c26dee3d9d30f156ceae0598f8ae3"
          },
          {
            "type": "html",
            "text": "\nYou can't write a serious program with regular expressions. Even toy programs end up having to reimplement cuts outside of regexp. That's because each additional subexpression explodes the space which has to be backtracked, and the run time ends up being very polynomial.",
            "id": "2a49868a8c2a050976bee7be7f5c9f7c"
          },
          {
            "type": "html",
            "text": "\nConcrete example: I have a regular expression made up of 27 distinct subexpressions, and I want to match the whole sucker to a string that contains a <b>single</b> matching entry. Matching 17 of those 27 subexpressions takes 0.8 seconds. 19 takes 8 seconds. I ran out of patience so I don't even know how long it takes to match 21 out of 27.",
            "id": "a7bfb78156518fc43639ee92afa906e1"
          },
          {
            "type": "html",
            "text": "\nOh, and here's the bad thing. Regular expressions are <i>also</i> polynomial in the <i>number of matching entries</i> they're working over. But if you limit it to 3 subexpressions, it's linear. Go figure.",
            "id": "5c9cb73b1b323b91f2bd22dc63dc79e8"
          },
          {
            "type": "html",
            "text": "<i> The problem is Perl (or some other PCRE language).  Use awk (lol) and/or see [http://swtch.com/~rsc/regexp/regexp1.html swtch.com]</i>",
            "id": "a4c411ba59f71b05ec57a88503355dcc"
          },
          {
            "type": "html",
            "text": "\nRestructuring my program so it CAN make use of cuts, which of course I'll have to implement, will be a pain.",
            "id": "4ed4f51d0004b51c863ec3d5244e6f65"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "\n[[Regular Expression]]s were introduced by S.C. Kleene to describe the [[Mc Culloch]] and Pitts 1943 finite automata model of neurons. (\"Representation of Events in Nerve Nets\", p3-40 in [[Claude Shannon]]/[[John Mc Carthy]] \"Automata Studies\", 1956)",
            "id": "59f80d311719398ce4a81cc30c8772ca"
          },
          {
            "type": "html",
            "text": "\nThe first application of [[Regular Expression]]s to editor search/replace (in the QED editor) was by [[Ken Thompson]], who published a [[Regular Expression]]-to-NFA algorithm in 1968, \"Regular Expression Search Algorithm\", CACM 11:6, 419-422",
            "id": "1f9734d91b4af88ea59f057e841e5d9b"
          },
          {
            "type": "html",
            "text": "\n[[Ken Thompson]] went on to reimplement this in the Unix <b>ed</b> editor, which [[Bill Joy]] turned into the <b>vi</b> editor. [[Ken Thompson]] adapted the <b>ed</b> code for <b>grep</b> and <b>sed</b>. (Some years after its creation, Emacs eventually borrowed the idea of [[Regular Expression]]s, but not the code, directly from these Unix editors -- RMS, private communication)",
            "id": "23625b75bdde6160d9c0866914d4de6d"
          },
          {
            "type": "html",
            "text": "\n[[Steve Johnson]] (prior to, and building towards, his Unix <b>yacc</b> tool) and [[Mike Lesk]] (in the Unix <b>lex</b>) did some of the earliest applications of [[Regular Expression]]s to compiler lexical analyzers via automated DFA-building tools.",
            "id": "757d072276b3d9af9b843ca8c6b8270b"
          },
          {
            "type": "html",
            "text": "\nAwk is a scripting language/command line tool derived directly from this Unix Culture of [[Regular Expression]]s; it is no coincidence that the language most famous for [[Regular Expression]]s today, <b>perl</b>, was developed in a Unix environment, inspired by <b>awk</b> and other Unix [[Regular Expression]] tools.",
            "id": "f75efafc2c5fd6a7353aaf9fbb9c16bf"
          },
          {
            "type": "html",
            "text": "\n[[Regular Expression]]s were thus widespread in Unix tools of all sorts from the beginning, years to decades before this technology was widespread elsewhere (although obviously there were exceptions), and [[Regular Expression]]s have always been an extremely important (albeit under-acknowledged) part of [[Unix Culture]], contributing to the historical attitudes of [[Smug Unix Weenies]] that other systems [[Just Dont Get It]].",
            "id": "2c2e62cd0518d5e17624f5ecf246c098"
          },
          {
            "type": "html",
            "text": "\nPipes have historically been considered to have been the [[Killer App]] of Unix, but there's a strong argument that it was actually [[Regular Expression]]s. Never heard that, but if its a \"strong\" argument, I'm convinced",
            "id": "d5249968a7fe795b81e0a259cfe68154"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "<b>Resources</b>",
            "id": "467eb89b3b14d39507aa39252e03fd0e"
          },
          {
            "type": "html",
            "text": "<i>Netscape [[Java Script]] </i> [http://www.evolt.org/article/Regular_Expressions_in_JavaScript/17/36435/ www.evolt.org] and \n[http://web.archive.org/web/20030810202454/devedge.netscape.com/library/manuals/2000/javascript/1.5/reference/regexp.html web.archive.org]",
            "id": "3c270f9d4ccc71eb2d8fd798c054beb7"
          },
          {
            "type": "html",
            "text": "<i>[[Perl Language]] usage</i>",
            "id": "96234494ee41145da3bdc8adc3adb640"
          },
          {
            "type": "html",
            "text": "\nSyntax ",
            "id": "ca8dbd10dfa45cbcb6f7d2328221c2a6"
          },
          {
            "type": "html",
            "text": " [http://search.cpan.org/dist/perl/pod/perlre.pod search.cpan.org]\nTutorial",
            "id": "d8d71774f28d70f2aefa82a8ab32c8db"
          },
          {
            "type": "html",
            "text": " [http://search.cpan.org/~dapm/perl-5.10.1/pod/perlretut.pod search.cpan.org]\nOperators",
            "id": "c08f6e314ada3866efb63b75a313575a"
          },
          {
            "type": "html",
            "text": " [http://search.cpan.org/~dapm/perl-5.10.1/pod/perlop.pod search.cpan.org]\nReference",
            "id": "4791a3595b606bbe3bf65d7eb4f3c21a"
          },
          {
            "type": "html",
            "text": " [http://search.cpan.org/~dapm/perl-5.10.1/pod/perlreref.pod search.cpan.org]",
            "id": "83dcc71ab6d6f68f9d0adb85db7b2b0c"
          },
          {
            "type": "html",
            "text": "<i>[[Vb Script]] usage</i>",
            "id": "588bc1909a5ddb8f39d7e26269a96ae4"
          },
          {
            "type": "html",
            "text": "\n[http://msdn.microsoft.com/library/default.asp?URL=/library/en-us/dnclinic/html/scripting051099.asp msdn.microsoft.com]",
            "id": "4a99abbbad6bd7c1b303b8e4e4c427f3"
          },
          {
            "type": "html",
            "text": "<i>Reg<b></b>Exp Coach</i> [http://farm.tucows.com/blog/_archives/2004/10/27/167823.html farm.tucows.com]",
            "id": "05fbf9498a2bc1413cfd3db7e9ad8307"
          },
          {
            "type": "html",
            "text": "<i>Regex<b></b>Coach (same as above?)</i> [http://www.weitz.de/regex-coach/ www.weitz.de] - <i>Very good! And in Lisp, for all the [[Smug Lisp Weenies]] out there.</i>",
            "id": "eb34f5bd18ea6a407315edcd9ce51719"
          },
          {
            "type": "html",
            "text": "<i>Steve Ramsay's Guide to Regular Expressions</i> [http://etext.lib.virginia.edu/helpsheets/regex.html etext.lib.virginia.edu]",
            "id": "8476e935840552afe0ac9da9a39574b1"
          },
          {
            "type": "html",
            "text": "<i>Redet</i> [http://billposer.org/Software/redet.html billposer.org] - a regular expression development and execution tool, supporting more than 40 search programs and programming languages.",
            "id": "cf5454b56faf2eb10169502329529fd8"
          },
          {
            "type": "html",
            "text": "\n[[Tcl Tk]] regexp visualizer  - can highlught what each part of the regexp matches - very useful when learning regexps",
            "id": "8b7c48e256523b9d0a6968eb8487c87c"
          },
          {
            "type": "html",
            "text": " [http://www.doulos.com/knowhow/tcltk/examples/trev/ www.doulos.com]",
            "id": "691e1911d88d7232bd9380e3c29f5446"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "\nI've been known to refer to [[Regular Expressions]] as \"<i>a precise notation for fuzzy matches</i>\" or \"<i>a precise notation for expressing fuzzy search logic</i>\" when explaining them to people familiar only with \"string matching\" as their search method.",
            "id": "e110470df9e1132dc4938a681389a482"
          },
          {
            "type": "html",
            "text": "\nThe concept of inclusion in/exclusion from sets, and a grammar for saying things like \"any digit at the beginning of a line, followed by at least 1 but not more than 12 of any non-punctuation character, followed by any combination of alpha-numeric characters joined to a set of non-empty parentheses, said line ending in a semicolon, possibly followed by white space\" in a compact and exact notation is not necessarily easily taught, but the look of revelation when one \"gets it\" is priceless.",
            "id": "cf805a3122a48e4846c75294ff175806"
          },
          {
            "type": "html",
            "text": "<i>As a pedagogical tool for helping people to \"get it\", that's interesting. I suppose it doesn't matter that it's technically inaccurate to call it fuzzy matching, since it depends on the pattern whether or not one specifies a literally fuzzy match in the technical [[Zadeh Lotfi]] [[Fuzzy Logic]] sense, since these people  won't be familiar with [[Fuzzy Logic]] now nor in the future?</i>",
            "id": "ac686e9c91a99e9a955fe05ea4634500"
          },
          {
            "type": "html",
            "text": "\nJust so.  I originally hesitated before using \"fuzzy\" to describe it, but you're right, [[Fuzzy Logic]] is well beyond the scope of where they'll go (though I usually throw in a disclaimer that I'm playing fast and loose with the term).  The main hurdle for them is usually the use of \"any\" and \"not\" in conjunction with \"at least\" and so on.  It's getting them to the point where they realize that they're not looking for precise spellings and not confined by having to examine every occurrence of some word just because they can't remember <i>exactly</i> what words are around it.  It's a little liberty I take -- somewhat in the name of [[Wittgensteins Ladder]] -- to get over the concept hump.",
            "id": "98e27be8ca316bb4d3452b310f33812d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "I think I just broke a refactoring record. I was rewriting code from a [[Bad Programmer]] and I chopped 127 lines into 7 using a [[Regular Expression]] in [[Csharp Language]]  :) The Regex parsed an XML file stream and split out 2 elements by name, with values optionally in quotes. The other programmer manually parsed the file, split it into arrays, split those into key/value pairs, foreach-ed through those till he found the ones he wanted, stored them into separates strings, then later recombined them into the final XML. OMG what a nightmare it was, but I will never go back to a non-[[Regular Expression]] language! (I'm a former VB6 junkie)",
            "id": "1035e0b361ebe0d4b7dbd50dc0bcfe9d"
          },
          {
            "type": "html",
            "text": " [[Regular Expression]] was not supported well in MS environments (buggy and slow) before. Why did you not use the Xml parsers to do what you need to do?",
            "id": "2ae1dfc02089131f9e8711f191d030c0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "[[My Browser]], [[Fire Fox]] 2.0.0.11 -- allows Find in this page, but without [[Regular Expression]]s -- Maybe the [[Open Source]] contributors can add that.",
            "id": "7d58ed405591f3ed4515d69596084e05"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "See also: [[Alternatives To Regular Expressions]]",
            "id": "322effaf210ddaed3a46293bf28edee2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3526701aebe0e24667755b2755f6f5be"
          },
          {
            "type": "html",
            "text": "[[Category Regular Expressions]] [[Category Language Feature]]",
            "id": "798b9fddb6fdc4f02eeb969dcc38ab15"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?RegularExpression c2.com]",
            "id": "6d3e37eceae517d30728a941c0fd9808"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1709398482974
    }
  ]
}