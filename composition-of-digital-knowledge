{
  "title": "Composition of Digital Knowledge",
  "story": [
    {
      "type": "paragraph",
      "id": "7dd9d53c79732d8f",
      "text": "In the pre-digital era, [[Composition]] was never much of a problem. A scientist would take a few research articles or monographs describing the various ingredients, and then write down their composition on a fresh sheet of paper. Variations in the notations across different sources would be no more than an inconvenience. Our pre-digital scientist would translate notation into concepts when reading each source, and the concepts into his or her preferred notation when writing down the composition. As long as the concepts match, as they do in any mature field of science, that is routine work."
    },
    {
      "type": "paragraph",
      "id": "e5a7473904493999",
      "text": "Composition of digital knowledge is very different. The items to be composed must be matched not only in terms of (human) concepts, but also in terms of the syntax and semantics of a formal language. And that means that all ingredients must be expressed in the same formal language, which is then also the language of the composed assembly."
    },
    {
      "type": "paragraph",
      "id": "f7276ac7addbd2f5",
      "text": "If we start from ingredients expressed in different languages, we have basically two options: translate everything to a common language, or define a new formal language that is a superset of all the languages used for expressing the various ingredients. We can of course choose a mixture of these two extreme approaches. But both of them imply a lot of overhead and add considerable complexity to the composed assembly. Translation requires either tedious and error-prone manual labor, or writing a program to do the job. Defining a superlanguage requires implementing software tools for processing it."
    },
    {
      "type": "paragraph",
      "id": "6cde2eca9d8c1c6e",
      "text": "As an illustration, consider a frequent situation in computational science: a data processing program that reads a specific file format, and a dataset stored in a different format. The translation option means writing a file format converter. The superlanguage option means extending the data processing program to read a second file format. In both cases, the use of multiple formal languages adds complexity to the composition that is unrelated to the real problem to be solved, which is the data analysis. In software engineering, this is known as “accidental complexity”, as opposed to the “essential complexity” inherent in the task."
    },
    {
      "type": "paragraph",
      "id": "131515f5b61d3a9a",
      "text": "As a second example, consider writing a program that is supposed to call a procedure written in language A and another procedure written in language B. The translation option means writing a compiler from A to B or vice-versa. The superlanguage option means writing a compiler or interpreter that accepts both languages A and B. A mixed approach could use two compilers, one for A and one for B, that share a common target language. The latter solution seems easy at first sight, because compilers from A and B to processor instructions probably already exist. However, the target language of a compiler is not “processor instructions” but “the processor instruction set plus specific representations of data structures and conventions for code composition and memory management”. It is unlikely that two unrelated compilers for A and B have the same target language at this level of detail. Practice has shown that combining code written in different programming languages is always a source of trouble and errors, except when using tools that were explicitly designed from the start for implementing the superlanguage."
    },
    {
      "type": "paragraph",
      "id": "b8e7a84be1687114",
      "text": "Many of the chores and frustrations in the daily life of a computational scientist are manifestations of the composition problem for digital knowledge. Some examples are"
    },
    {
      "type": "markdown",
      "id": "0021147e5e305058",
      "text": "* file format conversion, as explained above \n* combining code in different languages, also explained above \n* software installation, which is the composition of an operating system with libraries and application-specific software into a functioning whole \n* package management, which is an attempt to facilitate software installation that re-creates the problem it tries to solve at another level \n* software maintenance, which is the continuous modification of source code to keep it composable with changing computational environments \n* I/O code in scientific software, which handles the composition of software and input data into a completely specified computation \n* workflow management, which is the composition of datasets with multiple independently written and installed software packages into a single computation"
    },
    {
      "type": "paragraph",
      "id": "b57ab5f06cd7def8",
      "text": "These examples should be sufficient to show that the management of composition must be a high-priority consideration when designing formal languages for digital scientific knowledge."
    },
    {
      "type": "pagefold",
      "id": "6dfb017aefe9a96a",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "42ee5fa331086e46",
      "site": "konrad.hinsen.dreyeck.ch",
      "slug": "digital-scientific-notation",
      "title": "Digital Scientific Notation",
      "text": "See [[Konrad Hinsen]]'s Scientific notations for the digital era paper. [http://arxiv.org/abs/1605.02960 arxiv]"
    },
    {
      "type": "reference",
      "id": "5f51ee11f94e99e4",
      "site": "wiki.ralfbarkow.ch",
      "slug": "2022-08-29",
      "title": "2022-08-29",
      "text": "Re: [[Jon Udell]], Federated Wiki for teaching and learning basic [[Composition]]. [https://blog.jonudell.net/2014/12/30/federated-wiki-for-teaching-and-learning-basic-composition post]"
    },
    {
      "type": "reference",
      "id": "36d404ea02714fc7",
      "site": "wiki.ralfbarkow.ch",
      "slug": "paragraphs-as-atomic-structure",
      "title": "Paragraphs as Atomic Structure",
      "text": "And here we come to something that is very hard to get about federated wiki which [[Mike Caulfield]] would love your help explaining — Ward likes to say his interest is can you take a few simple ideas and data structures and make them really generative. And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view."
    },
    {
      "type": "reference",
      "id": "572059dbb9a29b30",
      "site": "wiki.ralfbarkow.ch",
      "slug": "knowledge",
      "title": "Knowledge",
      "text": "Knowledge is a particular property that matter can have in our universe. This way of looking at knowledge breaks with a long-standing tradition that sees it as a mainly anthropomorphic, subjective concept. According to this tradition, knowledge presupposes that there is a sentient being, such as a human being. Knowledge, in other words, would only exist in minds. According to this idea, knowledge seems to be subjective."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Composition of Digital Knowledge",
        "story": []
      },
      "date": 1676520772902
    },
    {
      "item": {
        "type": "factory",
        "id": "7dd9d53c79732d8f"
      },
      "id": "7dd9d53c79732d8f",
      "type": "add",
      "date": 1676520779858
    },
    {
      "type": "edit",
      "id": "7dd9d53c79732d8f",
      "item": {
        "type": "paragraph",
        "id": "7dd9d53c79732d8f",
        "text": "In the pre-digital era, composition was never much of a problem. A scientist would take a few research articles or monographs describing the various ingredients, and then write down their composition on a fresh sheet of paper. Variations in the notations across different sources would be no more than an inconvenience. Our pre-digital scientist would translate notation into concepts when reading each source, and the concepts into his or her preferred notation when writing down the composition. As long as the concepts match, as they do in any mature field of science, that is routine work."
      },
      "date": 1676520781998
    },
    {
      "item": {
        "type": "factory",
        "id": "6dfb017aefe9a96a"
      },
      "id": "6dfb017aefe9a96a",
      "type": "add",
      "after": "7dd9d53c79732d8f",
      "date": 1676520866884
    },
    {
      "type": "edit",
      "id": "6dfb017aefe9a96a",
      "item": {
        "type": "pagefold",
        "id": "6dfb017aefe9a96a",
        "text": "~"
      },
      "date": 1676520869654
    },
    {
      "item": {
        "type": "factory",
        "id": "42ee5fa331086e46"
      },
      "id": "42ee5fa331086e46",
      "type": "add",
      "after": "6dfb017aefe9a96a",
      "date": 1676520870993
    },
    {
      "type": "edit",
      "id": "42ee5fa331086e46",
      "item": {
        "type": "reference",
        "id": "42ee5fa331086e46",
        "site": "konrad.hinsen.dreyeck.ch",
        "slug": "digital-scientific-notation",
        "title": "Digital Scientific Notation",
        "text": "Abstract:"
      },
      "date": 1676520873598
    },
    {
      "type": "edit",
      "id": "42ee5fa331086e46",
      "item": {
        "type": "reference",
        "id": "42ee5fa331086e46",
        "site": "konrad.hinsen.dreyeck.ch",
        "slug": "digital-scientific-notation",
        "title": "Digital Scientific Notation",
        "text": "See [http://arxiv.org/abs/1605.02960 Scientific notations for the digital era]"
      },
      "date": 1676520883387
    },
    {
      "type": "edit",
      "id": "42ee5fa331086e46",
      "item": {
        "type": "reference",
        "id": "42ee5fa331086e46",
        "site": "konrad.hinsen.dreyeck.ch",
        "slug": "digital-scientific-notation",
        "title": "Digital Scientific Notation",
        "text": "See  Scientific notations for the digital era [http://arxiv.org/abs/1605.02960 arxiv]"
      },
      "date": 1676520910283
    },
    {
      "type": "edit",
      "id": "42ee5fa331086e46",
      "item": {
        "type": "reference",
        "id": "42ee5fa331086e46",
        "site": "konrad.hinsen.dreyeck.ch",
        "slug": "digital-scientific-notation",
        "title": "Digital Scientific Notation",
        "text": "See [[Konrad Hinsen]]'s Scientific notations for the digital era [http://arxiv.org/abs/1605.02960 arxiv]"
      },
      "date": 1676520925687
    },
    {
      "type": "edit",
      "id": "42ee5fa331086e46",
      "item": {
        "type": "reference",
        "id": "42ee5fa331086e46",
        "site": "konrad.hinsen.dreyeck.ch",
        "slug": "digital-scientific-notation",
        "title": "Digital Scientific Notation",
        "text": "See [[Konrad Hinsen]]'s Scientific notations for the digital era paper [http://arxiv.org/abs/1605.02960 arxiv]"
      },
      "date": 1676520933581
    },
    {
      "type": "edit",
      "id": "42ee5fa331086e46",
      "item": {
        "type": "reference",
        "id": "42ee5fa331086e46",
        "site": "konrad.hinsen.dreyeck.ch",
        "slug": "digital-scientific-notation",
        "title": "Digital Scientific Notation",
        "text": "See [[Konrad Hinsen]]'s Scientific notations for the digital era paper. [http://arxiv.org/abs/1605.02960 arxiv]"
      },
      "date": 1676520938380
    },
    {
      "type": "edit",
      "id": "7dd9d53c79732d8f",
      "item": {
        "type": "paragraph",
        "id": "7dd9d53c79732d8f",
        "text": "In the pre-digital era, [[Composition]] was never much of a problem. A scientist would take a few research articles or monographs describing the various ingredients, and then write down their composition on a fresh sheet of paper. Variations in the notations across different sources would be no more than an inconvenience. Our pre-digital scientist would translate notation into concepts when reading each source, and the concepts into his or her preferred notation when writing down the composition. As long as the concepts match, as they do in any mature field of science, that is routine work."
      },
      "date": 1676520960694
    },
    {
      "item": {
        "type": "factory",
        "id": "e5a7473904493999"
      },
      "id": "e5a7473904493999",
      "type": "add",
      "after": "42ee5fa331086e46",
      "date": 1676521002810
    },
    {
      "id": "e5a7473904493999",
      "type": "move",
      "order": [
        "7dd9d53c79732d8f",
        "e5a7473904493999",
        "6dfb017aefe9a96a",
        "42ee5fa331086e46"
      ],
      "date": 1676521004760
    },
    {
      "type": "edit",
      "id": "e5a7473904493999",
      "item": {
        "type": "paragraph",
        "id": "e5a7473904493999",
        "text": "Composition of digital knowledge is very different. The items to be composed must be matched not only in terms of (human) concepts, but also in terms of the syntax and semantics of a formal language. And that means that all ingredients must be expressed in the same formal language, which is then also the language of the composed assembly."
      },
      "date": 1676521005865
    },
    {
      "item": {
        "type": "factory",
        "id": "f7276ac7addbd2f5"
      },
      "id": "f7276ac7addbd2f5",
      "type": "add",
      "after": "42ee5fa331086e46",
      "date": 1676521023829
    },
    {
      "id": "f7276ac7addbd2f5",
      "type": "move",
      "order": [
        "7dd9d53c79732d8f",
        "e5a7473904493999",
        "f7276ac7addbd2f5",
        "6dfb017aefe9a96a",
        "42ee5fa331086e46"
      ],
      "date": 1676521026079
    },
    {
      "type": "edit",
      "id": "f7276ac7addbd2f5",
      "item": {
        "type": "paragraph",
        "id": "f7276ac7addbd2f5",
        "text": "If we start from ingredients expressed in different languages, we have basically two options: translate everything to a common language, or define a new formal language that is a superset of all the languages used for expressing the various ingredients. We can of course choose a mixture of these two extreme approaches. But both of them imply a lot of overhead and add considerable complexity to the composed assembly. Translation requires either tedious and error-prone manual labor, or writing a program to do the job. Defining a superlanguage requires implementing software tools for processing it."
      },
      "date": 1676521027237
    },
    {
      "type": "add",
      "id": "6cde2eca9d8c1c6e",
      "item": {
        "type": "paragraph",
        "id": "6cde2eca9d8c1c6e",
        "text": "As an illustration, consider a frequent situation in computational science: a data processing program that reads a specific file format, and a dataset stored in a different format. The translation option means writing a file format converter. The superlanguage option means extending the data processing program to read a second file format. In both cases, the use of multiple formal languages adds complexity to the composition that is unrelated to the real problem to be solved,"
      },
      "after": "f7276ac7addbd2f5",
      "date": 1676521058642
    },
    {
      "type": "edit",
      "id": "6cde2eca9d8c1c6e",
      "item": {
        "type": "paragraph",
        "id": "6cde2eca9d8c1c6e",
        "text": "As an illustration, consider a frequent situation in computational science: a data processing program that reads a specific file format, and a dataset stored in a different format. The translation option means writing a file format converter. The superlanguage option means extending the data processing program to read a second file format. In both cases, the use of multiple formal languages adds complexity to the composition that is unrelated to the real problem to be solved, which is the data analysis. In software engineering, this is known as “accidental complexity”, as opposed to the “essential complexity” inherent in the task (15)."
      },
      "date": 1676521067710
    },
    {
      "type": "edit",
      "id": "6cde2eca9d8c1c6e",
      "item": {
        "type": "paragraph",
        "id": "6cde2eca9d8c1c6e",
        "text": "As an illustration, consider a frequent situation in computational science: a data processing program that reads a specific file format, and a dataset stored in a different format. The translation option means writing a file format converter. The superlanguage option means extending the data processing program to read a second file format. In both cases, the use of multiple formal languages adds complexity to the composition that is unrelated to the real problem to be solved, which is the data analysis. In software engineering, this is known as “accidental complexity”, as opposed to the “essential complexity” inherent in the task."
      },
      "date": 1676521076263
    },
    {
      "item": {
        "type": "factory",
        "id": "131515f5b61d3a9a"
      },
      "id": "131515f5b61d3a9a",
      "type": "add",
      "after": "42ee5fa331086e46",
      "date": 1676521101350
    },
    {
      "id": "131515f5b61d3a9a",
      "type": "move",
      "order": [
        "7dd9d53c79732d8f",
        "e5a7473904493999",
        "f7276ac7addbd2f5",
        "6cde2eca9d8c1c6e",
        "131515f5b61d3a9a",
        "6dfb017aefe9a96a",
        "42ee5fa331086e46"
      ],
      "date": 1676521102764
    },
    {
      "type": "edit",
      "id": "131515f5b61d3a9a",
      "item": {
        "type": "paragraph",
        "id": "131515f5b61d3a9a",
        "text": "As a second example, consider writing a program that is supposed to call a procedure written in language A and another procedure written in language B. The translation option means writing a compiler from A to B or vice-versa. The superlanguage option means writing a compiler or interpreter that accepts both languages A and B. A mixed approach could use two compilers, one for A and one for B, that share a common target language. The latter solution seems easy at first sight, because compilers from A and B to processor instructions probably already exist. However, the target language of a compiler is not “processor instructions” but “the processor instruction set plus specific representations of data structures and conventions for code composition and memory management”. It is unlikely that two unrelated compilers for A and B have the same target language at this level of detail. Practice has shown that combining code written in different programming languages is always a source of trouble and errors, except when using tools that were explicitly designed from the start for implementing the superlanguage."
      },
      "date": 1676521103909
    },
    {
      "type": "add",
      "id": "b8e7a84be1687114",
      "item": {
        "type": "paragraph",
        "id": "b8e7a84be1687114",
        "text": "Many of the chores and frustrations in the daily life of a computational scientist are manifestations of the composition problem for digital knowledge. Some examples are"
      },
      "after": "131515f5b61d3a9a",
      "date": 1676521149564
    },
    {
      "type": "add",
      "id": "0021147e5e305058",
      "item": {
        "type": "paragraph",
        "id": "0021147e5e305058",
        "text": "• file format conversion, as explained above • combining code in different languages, also explained above • software installation, which is the composition of an operating system with libraries and application-specific software into a functioning whole • package management, which is an attempt to facilitate software installation that re-creates the problem it tries to solve at another level • software maintenance, which is the continuous modification of source code to keep it composable with changing computational environments • I/O code in scientific software, which handles the composition of software and input data into a completely specified computation • workflow management, which is the composition of datasets with multiple independently written and installed software packages into a single computation"
      },
      "after": "b8e7a84be1687114",
      "date": 1676521162677
    },
    {
      "type": "add",
      "id": "b57ab5f06cd7def8",
      "item": {
        "type": "paragraph",
        "id": "b57ab5f06cd7def8",
        "text": "These examples should be sufficient to show that the management of composition must be a high-priority consideration when designing formal languages for digital scientific knowledge."
      },
      "after": "0021147e5e305058",
      "date": 1676521173947
    },
    {
      "type": "edit",
      "id": "0021147e5e305058",
      "item": {
        "type": "paragraph",
        "id": "0021147e5e305058",
        "text": "* file format conversion, as explained above \n* combining code in different languages, also explained above \n* software installation, which is the composition of an operating system with libraries and application-specific software into a functioning whole \n* package management, which is an attempt to facilitate software installation that re-creates the problem it tries to solve at another level \n* software maintenance, which is the continuous modification of source code to keep it composable with changing computational environments \n* I/O code in scientific software, which handles the composition of software and input data into a completely specified computation \n* workflow management, which is the composition of datasets with multiple independently written and installed software packages into a single computation"
      },
      "date": 1676521259973
    },
    {
      "type": "edit",
      "id": "0021147e5e305058",
      "item": {
        "type": "markdown",
        "id": "0021147e5e305058",
        "text": "* file format conversion, as explained above \n* combining code in different languages, also explained above \n* software installation, which is the composition of an operating system with libraries and application-specific software into a functioning whole \n* package management, which is an attempt to facilitate software installation that re-creates the problem it tries to solve at another level \n* software maintenance, which is the continuous modification of source code to keep it composable with changing computational environments \n* I/O code in scientific software, which handles the composition of software and input data into a completely specified computation \n* workflow management, which is the composition of datasets with multiple independently written and installed software packages into a single computation"
      },
      "date": 1676521260704
    },
    {
      "id": "5f51ee11f94e99e4",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "5f51ee11f94e99e4",
        "site": "wiki.ralfbarkow.ch",
        "slug": "2022-08-29",
        "title": "2022-08-29",
        "text": "Re: [[Jon Udell]], Federated Wiki for teaching and learning basic [[Composition]]. [https://blog.jonudell.net/2014/12/30/federated-wiki-for-teaching-and-learning-basic-composition post]"
      },
      "after": "42ee5fa331086e46",
      "attribution": {
        "page": "2022-08-30"
      },
      "date": 1676521440535
    },
    {
      "item": {
        "type": "factory",
        "id": "36d404ea02714fc7"
      },
      "id": "36d404ea02714fc7",
      "type": "add",
      "after": "5f51ee11f94e99e4",
      "date": 1676521482233
    },
    {
      "type": "edit",
      "id": "36d404ea02714fc7",
      "item": {
        "type": "reference",
        "id": "36d404ea02714fc7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "paragraphs-as-atomic-structure",
        "title": "Paragraphs as Atomic Structure",
        "text": "And here we come to something that is very hard to get about federated wiki which [[Mike Caulfield]] would love your help explaining — Ward likes to say his interest is can you take a few simple ideas and data structures and make them really generative. **And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view.**"
      },
      "date": 1676521484468
    },
    {
      "type": "edit",
      "id": "36d404ea02714fc7",
      "item": {
        "type": "reference",
        "id": "36d404ea02714fc7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "paragraphs-as-atomic-structure",
        "title": "Paragraphs as Atomic Structure",
        "text": "And here we come to something that is very hard to get about federated wiki which [[Mike Caulfield]] would love your help explaining — Ward likes to say his interest is can you take a few simple ideas and data structures and make them really generative. And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view."
      },
      "date": 1676521508848
    },
    {
      "item": {
        "type": "factory",
        "id": "572059dbb9a29b30"
      },
      "id": "572059dbb9a29b30",
      "type": "add",
      "after": "36d404ea02714fc7",
      "date": 1676521616827
    },
    {
      "type": "edit",
      "id": "572059dbb9a29b30",
      "item": {
        "type": "reference",
        "id": "572059dbb9a29b30",
        "site": "wiki.ralfbarkow.ch",
        "slug": "knowledge",
        "title": "Knowledge",
        "text": "Knowledge is a particular property that matter can have in our universe [1, p. 157]. This way of looking at knowledge breaks with a long-standing tradition that sees it as a mainly anthropomorphic, subjective concept. According to this tradition, knowledge presupposes that there is a sentient being, such as a human being. Knowledge, in other words, would only exist in minds. According to this idea, knowledge seems to be subjective."
      },
      "date": 1676521619225
    },
    {
      "type": "edit",
      "id": "572059dbb9a29b30",
      "item": {
        "type": "reference",
        "id": "572059dbb9a29b30",
        "site": "wiki.ralfbarkow.ch",
        "slug": "knowledge",
        "title": "Knowledge",
        "text": "Knowledge is a particular property that matter can have in our universe. This way of looking at knowledge breaks with a long-standing tradition that sees it as a mainly anthropomorphic, subjective concept. According to this tradition, knowledge presupposes that there is a sentient being, such as a human being. Knowledge, in other words, would only exist in minds. According to this idea, knowledge seems to be subjective."
      },
      "date": 1676521630196
    }
  ]
}