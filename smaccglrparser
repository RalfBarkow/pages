{
  "title": "SmaCCGLRParser",
  "story": [
    {
      "type": "markdown",
      "id": "a2864a877759c213",
      "text": "an abstract superclass for all [[GLR]] generated parsers in [[SmaCC]]"
    },
    {
      "type": "markdown",
      "id": "138b0b0d8407826b",
      "text": "Instance Variables:\n\ncurrentState\t<SmaCCParserState>\tthe current parse that we are trying\n\nlastPosition\t<Integer>\tthe starting location of the scanner before calling getNextToken\n\nlastState\t<Symbol>\tthe state of the scanner before calling getNextToken\n\nlastToken\t<SmaCCToken>\tthe token returned from getNextToken (if the lastState and lastToken are the same as the current token, then this value is returned without scanning anything)\n\nnextScannerPosition\t<Integer>\tthe ending location of the scanner after calling getNextToken\n\nnextScannerState\t<Symbol>\tthe ending state of the scanner after calling getNextToken\n\nparseAll\t<Boolean>\tshould we return a collection of all potential parses or just one\n\nstates\t<SequenceableCollection of: SmaCCParserState>\tthe current list of valid parses\n\ntryAllStates\t<Boolean>\tshould we try to parse starting from any state instead of the starting state"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "SmaCCGLRParser",
        "story": []
      },
      "date": 1652799368333
    },
    {
      "item": {
        "type": "factory",
        "id": "a2864a877759c213"
      },
      "id": "a2864a877759c213",
      "type": "add",
      "date": 1652799374648
    },
    {
      "type": "edit",
      "id": "a2864a877759c213",
      "item": {
        "type": "markdown",
        "id": "a2864a877759c213",
        "text": "SmaCCGLRParser is an abstract superclass for all GLR generated parsers in SmaCC.\n\nInstance Variables:\n\tcurrentState\t<SmaCCParserState>\tthe current parse that we are trying\n\tlastPosition\t<Integer>\tthe starting location of the scanner before calling getNextToken\n\tlastState\t<Symbol>\tthe state of the scanner before calling getNextToken\n\tlastToken\t<SmaCCToken>\tthe token returned from getNextToken (if the lastState and lastToken are the same as the current token, then this value is returned without scanning anything)\n\tnextScannerPosition\t<Integer>\tthe ending location of the scanner after calling getNextToken\n\tnextScannerState\t<Symbol>\tthe ending state of the scanner after calling getNextToken\n\tparseAll\t<Boolean>\tshould we return a collection of all potential parses or just one\n\tstates\t<SequenceableCollection of: SmaCCParserState>\tthe current list of valid parses\n\ttryAllStates\t<Boolean>\tshould we try to parse starting from any state instead of the starting state"
      },
      "date": 1652799376520
    },
    {
      "type": "edit",
      "id": "a2864a877759c213",
      "item": {
        "type": "markdown",
        "id": "a2864a877759c213",
        "text": "SmaCCGLRParser is an abstract superclass for all GLR generated parsers in [[SmaCC]]].\n\nInstance Variables:\n\tcurrentState\t<SmaCCParserState>\tthe current parse that we are trying\n\tlastPosition\t<Integer>\tthe starting location of the scanner before calling getNextToken\n\tlastState\t<Symbol>\tthe state of the scanner before calling getNextToken\n\tlastToken\t<SmaCCToken>\tthe token returned from getNextToken (if the lastState and lastToken are the same as the current token, then this value is returned without scanning anything)\n\tnextScannerPosition\t<Integer>\tthe ending location of the scanner after calling getNextToken\n\tnextScannerState\t<Symbol>\tthe ending state of the scanner after calling getNextToken\n\tparseAll\t<Boolean>\tshould we return a collection of all potential parses or just one\n\tstates\t<SequenceableCollection of: SmaCCParserState>\tthe current list of valid parses\n\ttryAllStates\t<Boolean>\tshould we try to parse starting from any state instead of the starting state"
      },
      "date": 1652799393779
    },
    {
      "type": "edit",
      "id": "a2864a877759c213",
      "item": {
        "type": "markdown",
        "id": "a2864a877759c213",
        "text": "SmaCCGLRParser is an abstract superclass for all GLR generated parsers in [[SmaCC]].\n\nInstance Variables:\n\tcurrentState\t<SmaCCParserState>\tthe current parse that we are trying\n\tlastPosition\t<Integer>\tthe starting location of the scanner before calling getNextToken\n\tlastState\t<Symbol>\tthe state of the scanner before calling getNextToken\n\tlastToken\t<SmaCCToken>\tthe token returned from getNextToken (if the lastState and lastToken are the same as the current token, then this value is returned without scanning anything)\n\tnextScannerPosition\t<Integer>\tthe ending location of the scanner after calling getNextToken\n\tnextScannerState\t<Symbol>\tthe ending state of the scanner after calling getNextToken\n\tparseAll\t<Boolean>\tshould we return a collection of all potential parses or just one\n\tstates\t<SequenceableCollection of: SmaCCParserState>\tthe current list of valid parses\n\ttryAllStates\t<Boolean>\tshould we try to parse starting from any state instead of the starting state"
      },
      "date": 1652799397687
    },
    {
      "type": "edit",
      "id": "a2864a877759c213",
      "item": {
        "type": "markdown",
        "id": "a2864a877759c213",
        "text": "SmaCCGLRParser is an abstract superclass for all GLR generated parsers in [[SmaCC]].\n\nInstance Variables:\n\n\tcurrentState\t<SmaCCParserState>\tthe current parse that we are trying\n\n\tlastPosition\t<Integer>\tthe starting location of the scanner before calling getNextToken\n\n\tlastState\t<Symbol>\tthe state of the scanner before calling getNextToken\n\n\tlastToken\t<SmaCCToken>\tthe token returned from getNextToken (if the lastState and lastToken are the same as the current token, then this value is returned without scanning anything)\n\n\tnextScannerPosition\t<Integer>\tthe ending location of the scanner after calling getNextToken\n\n\tnextScannerState\t<Symbol>\tthe ending state of the scanner after calling getNextToken\n\n\tparseAll\t<Boolean>\tshould we return a collection of all potential parses or just one\n\n\tstates\t<SequenceableCollection of: SmaCCParserState>\tthe current list of valid parses\n\n\ttryAllStates\t<Boolean>\tshould we try to parse starting from any state instead of the starting state"
      },
      "date": 1652799738857
    },
    {
      "type": "edit",
      "id": "a2864a877759c213",
      "item": {
        "type": "markdown",
        "id": "a2864a877759c213",
        "text": "SmaCCGLRParser is an abstract superclass for all GLR generated parsers in [[SmaCC]].\n\nInstance Variables:\n\ncurrentState\t<SmaCCParserState>\tthe current parse that we are trying\n\nlastPosition\t<Integer>\tthe starting location of the scanner before calling getNextToken\n\nlastState\t<Symbol>\tthe state of the scanner before calling getNextToken\n\nlastToken\t<SmaCCToken>\tthe token returned from getNextToken (if the lastState and lastToken are the same as the current token, then this value is returned without scanning anything)\n\nnextScannerPosition\t<Integer>\tthe ending location of the scanner after calling getNextToken\n\nnextScannerState\t<Symbol>\tthe ending state of the scanner after calling getNextToken\n\nparseAll\t<Boolean>\tshould we return a collection of all potential parses or just one\n\nstates\t<SequenceableCollection of: SmaCCParserState>\tthe current list of valid parses\n\ntryAllStates\t<Boolean>\tshould we try to parse starting from any state instead of the starting state"
      },
      "date": 1652799785070
    },
    {
      "type": "edit",
      "id": "a2864a877759c213",
      "item": {
        "type": "markdown",
        "id": "a2864a877759c213",
        "text": "is an abstract superclass for all GLR generated parsers in [[SmaCC]].\n\nInstance Variables:\n\ncurrentState\t<SmaCCParserState>\tthe current parse that we are trying\n\nlastPosition\t<Integer>\tthe starting location of the scanner before calling getNextToken\n\nlastState\t<Symbol>\tthe state of the scanner before calling getNextToken\n\nlastToken\t<SmaCCToken>\tthe token returned from getNextToken (if the lastState and lastToken are the same as the current token, then this value is returned without scanning anything)\n\nnextScannerPosition\t<Integer>\tthe ending location of the scanner after calling getNextToken\n\nnextScannerState\t<Symbol>\tthe ending state of the scanner after calling getNextToken\n\nparseAll\t<Boolean>\tshould we return a collection of all potential parses or just one\n\nstates\t<SequenceableCollection of: SmaCCParserState>\tthe current list of valid parses\n\ntryAllStates\t<Boolean>\tshould we try to parse starting from any state instead of the starting state"
      },
      "date": 1694839417628
    },
    {
      "type": "edit",
      "id": "a2864a877759c213",
      "item": {
        "type": "markdown",
        "id": "a2864a877759c213",
        "text": "an abstract superclass for all GLR generated parsers in [[SmaCC]]"
      },
      "date": 1702981239555
    },
    {
      "type": "add",
      "id": "138b0b0d8407826b",
      "item": {
        "type": "markdown",
        "id": "138b0b0d8407826b",
        "text": "Instance Variables:\n\ncurrentState\t<SmaCCParserState>\tthe current parse that we are trying\n\nlastPosition\t<Integer>\tthe starting location of the scanner before calling getNextToken\n\nlastState\t<Symbol>\tthe state of the scanner before calling getNextToken\n\nlastToken\t<SmaCCToken>\tthe token returned from getNextToken (if the lastState and lastToken are the same as the current token, then this value is returned without scanning anything)\n\nnextScannerPosition\t<Integer>\tthe ending location of the scanner after calling getNextToken\n\nnextScannerState\t<Symbol>\tthe ending state of the scanner after calling getNextToken\n\nparseAll\t<Boolean>\tshould we return a collection of all potential parses or just one\n\nstates\t<SequenceableCollection of: SmaCCParserState>\tthe current list of valid parses\n\ntryAllStates\t<Boolean>\tshould we try to parse starting from any state instead of the starting state"
      },
      "after": "a2864a877759c213",
      "date": 1702981241149
    },
    {
      "type": "edit",
      "id": "a2864a877759c213",
      "item": {
        "type": "markdown",
        "id": "a2864a877759c213",
        "text": "an abstract superclass for all [[GLR]] generated parsers in [[SmaCC]]"
      },
      "date": 1702986006056
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702986031605
    }
  ]
}