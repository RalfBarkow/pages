{
  "title": "Extreme Programming",
  "story": [
    {
      "type": "paragraph",
      "id": "b604259d1f8cfe90",
      "text": "Wiki turned its attention from patterns to extreme programming. I was ok with this since I saw it as a way to methodically discovering the patterns you needed to complete a program never written before. [https://wiki.c2.com/?ExtremeProgramming wiki]"
    },
    {
      "type": "paragraph",
      "text": "The basic advantage of XP is that the whole process is visible and accountable. The developers will make concrete commitments about what they will accomplish, show concrete progress in the form of deployable software, and when a milestone is reached they will describe exactly what they did and how and why that differed from the plan. This allows business-oriented people to make their own business commitments with confidence, to take advantage of opportunities as they arise, and eliminate dead-ends quickly and cheaply. -- KentBeck",
      "wiki": "ExtremeProgramming",
      "id": "2f1cb7ad6d06c735w"
    },
    {
      "type": "paragraph",
      "text": "The differences between XP and trial-and-error are basically two-fold: first, you solve each error as it comes up, so that it doesn't compound with later errors. And second, you meant to do it that way in the first place, rather than being forced to come back and deal with unforeseen complications. This looks like a development of StepwiseRefinement where the project is broken down into smaller and smaller tasks until each task is small enough to code, the idea being that one task is one module to handle an operation ie input:process:output if a task is too big to code, its split into modules. these modules are iterated to the same criteria",
      "wiki": "ExtremeProgramming",
      "id": "630cab398719da03w"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Extreme Programming",
        "story": []
      },
      "date": 1641085714538
    },
    {
      "id": "2f1cb7ad6d06c735w",
      "type": "add",
      "item": {
        "type": "paragraph",
        "text": "The basic advantage of XP is that the whole process is visible and accountable. The developers will make concrete commitments about what they will accomplish, show concrete progress in the form of deployable software, and when a milestone is reached they will describe exactly what they did and how and why that differed from the plan. This allows business-oriented people to make their own business commitments with confidence, to take advantage of opportunities as they arise, and eliminate dead-ends quickly and cheaply. -- KentBeck",
        "wiki": "ExtremeProgramming",
        "id": "2f1cb7ad6d06c735w"
      },
      "date": 1641085737433
    },
    {
      "id": "630cab398719da03w",
      "type": "add",
      "item": {
        "type": "paragraph",
        "text": "The differences between XP and trial-and-error are basically two-fold: first, you solve each error as it comes up, so that it doesn't compound with later errors. And second, you meant to do it that way in the first place, rather than being forced to come back and deal with unforeseen complications. (This paragraph would need to be written out more verbosely. I can't understand the point the paragraph is trying to make. PleaseComment) this looks like a development of StepwiseRefinement where the project is broken down into smaller and smaller tasks until each task is small enough to code, the idea being that one task is one module to handle an operation ie input:process:output if a task is too big to code, its split into modules. these modules are iterated to the same criteria",
        "wiki": "ExtremeProgramming",
        "id": "630cab398719da03w"
      },
      "after": "2f1cb7ad6d06c735w",
      "date": 1641085773678
    },
    {
      "type": "edit",
      "id": "630cab398719da03w",
      "item": {
        "type": "paragraph",
        "text": "The differences between XP and trial-and-error are basically two-fold: first, you solve each error as it comes up, so that it doesn't compound with later errors. And second, you meant to do it that way in the first place, rather than being forced to come back and deal with unforeseen complications. This looks like a development of StepwiseRefinement where the project is broken down into smaller and smaller tasks until each task is small enough to code, the idea being that one task is one module to handle an operation ie input:process:output if a task is too big to code, its split into modules. these modules are iterated to the same criteria",
        "wiki": "ExtremeProgramming",
        "id": "630cab398719da03w"
      },
      "date": 1641085872366
    },
    {
      "item": {
        "type": "factory",
        "id": "b604259d1f8cfe90"
      },
      "id": "b604259d1f8cfe90",
      "type": "add",
      "after": "630cab398719da03w",
      "date": 1641085928988
    },
    {
      "type": "edit",
      "id": "b604259d1f8cfe90",
      "item": {
        "type": "paragraph",
        "id": "b604259d1f8cfe90",
        "text": "Wiki turned its attention from patterns to extreme programming. I was ok with this since I saw it as a way to methodically discovering the patterns you needed to complete a program never written before. [https://wiki.c2.com/?ExtremeProgramming wiki]"
      },
      "date": 1641086036127
    },
    {
      "id": "b604259d1f8cfe90",
      "type": "move",
      "order": [
        "2f1cb7ad6d06c735w",
        "b604259d1f8cfe90",
        "630cab398719da03w"
      ],
      "date": 1641086039839
    },
    {
      "id": "b604259d1f8cfe90",
      "type": "move",
      "order": [
        "b604259d1f8cfe90",
        "2f1cb7ad6d06c735w",
        "630cab398719da03w"
      ],
      "date": 1641086042686
    },
    {
      "type": "fork",
      "site": "found.ward.bay.wiki.org",
      "date": 1650922446283
    }
  ]
}