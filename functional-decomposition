{
  "title": "Functional Decomposition",
  "story": [
    {
      "type": "markdown",
      "id": "47b9f382fe8389d6",
      "text": "The contrast between [[function]] on the one hand and [[data]] on the other leads to two polar approaches to software design, namely, traditional [[functional decomposition]] (dating from the 1960s) and data-driven or entity-relationship decomposition (dating from the 1970s).\n"
    },
    {
      "type": "markdown",
      "id": "d64d45a92ae4219b",
      "text": "[[Objets]] occupy a middle ground; they have the tangibility and data content of an entity, but their outsides are defined by their function or [[behavior]]. This synthesis of data and function is what differentiates object-driven approaches from the other.  – ([[Smalltalk Objects And Design]], p 10)"
    },
    {
      "type": "pagefold",
      "id": "72423fb26385c0e7",
      "text": "I := Ward"
    },
    {
      "type": "paragraph",
      "id": "91eeee3143ac3d03",
      "text": "I have to see the program working in my mind as I write. Modern scoping makes it easy to write little functions of local scope that say what I mean to do."
    },
    {
      "type": "pagefold",
      "id": "ee5dff45ed59acfe",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "ca339d7375d9ea64",
      "text": "\nOf course, as soon as you start asking “does this object *do* the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either (⇒ [[Extensionality]]). –– [[Quildreen Motta]]"
    },
    {
      "type": "pagefold",
      "id": "8d9c3c9a9a4cd81b",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "b82f6f1c95ed1d9a",
      "text": "A friend was amazed that I wrote functions *apr* and *may* in a test suite working with dates. Java's Date constructors are a confusing mess. I could say *apr(15)* or *may(26)* and get on with my business."
    },
    {
      "type": "paragraph",
      "id": "96d3e19491290000",
      "text": "There is a confusion among programmers that the tools of their trade are to be applied only to their assigned [[problem]]. Every [[abstraction]] must be in service of the customer. With local functions I'm happy to abstract what I'm doing in the moment without any need to generalize beyond my immediate need."
    },
    {
      "type": "markdown",
      "id": "41489a41c0785bfb",
      "text": "[[Macros]] served this purpose for the assembly language programmer and have been raised to high art in [[lisp]]. I'm talking about something much simpler. **A handy function or two at the bottom of the page.**"
    },
    {
      "type": "paragraph",
      "id": "6a81829dc60cbf22",
      "text": "Javascript seems to encourage this and coffeescript even more so. I chose tiny functions in the latter when rewriting programs I'd written in high school. See [[Craps Dice Game]]"
    },
    {
      "type": "pagefold",
      "id": "ac6ececf9b6fc006",
      "text": "."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Functional Decomposition",
        "story": []
      },
      "date": 1463146607487
    },
    {
      "item": {
        "type": "factory",
        "id": "91eeee3143ac3d03"
      },
      "id": "91eeee3143ac3d03",
      "type": "add",
      "date": 1463146627640
    },
    {
      "type": "edit",
      "id": "91eeee3143ac3d03",
      "item": {
        "type": "paragraph",
        "id": "91eeee3143ac3d03",
        "text": "I have to see the program working in my mind as I write. Modern scoping makes it easy to write little functions of local scope that say what I mean to do."
      },
      "date": 1463146801170
    },
    {
      "type": "add",
      "id": "44fa4383fc158880",
      "item": {
        "type": "paragraph",
        "id": "44fa4383fc158880",
        "text": "A friend was amazed that I wrote functions apr and may in a test suite working with dates. Java's Date constructors are a confusing mess. I could say apr(15) or may(26) and get on with my business."
      },
      "after": "91eeee3143ac3d03",
      "date": 1463147059491
    },
    {
      "type": "add",
      "id": "96d3e19491290000",
      "item": {
        "type": "paragraph",
        "id": "96d3e19491290000",
        "text": "There is a confusion among programmers that the tools of their trade are to be applied only to their assigned problem. Every abstraction must be in service of the customer. With local functions I'm happy to abstract what I'm doing in the moment without any need to generalize beyond my immediate need."
      },
      "after": "44fa4383fc158880",
      "date": 1463147367947
    },
    {
      "type": "add",
      "id": "41489a41c0785bfb",
      "item": {
        "type": "paragraph",
        "id": "41489a41c0785bfb",
        "text": "Macros served this purpose for the assembly language programmer and have been raised to high art in lisp. I'm talking about something much simpler. A handy function or two at the bottom of the page."
      },
      "after": "96d3e19491290000",
      "date": 1463147602143
    },
    {
      "type": "add",
      "id": "6a81829dc60cbf22",
      "item": {
        "type": "paragraph",
        "id": "6a81829dc60cbf22",
        "text": "Javascript seems to encourage this and coffeescript even more so. I chose tiny functions in the latter when rewriting programs I'd written in high school. See [[Craps Dice Game]]"
      },
      "after": "41489a41c0785bfb",
      "date": 1463147940734
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1627473799115
    },
    {
      "item": {
        "type": "factory",
        "id": "72423fb26385c0e7"
      },
      "id": "72423fb26385c0e7",
      "type": "add",
      "after": "6a81829dc60cbf22",
      "date": 1628317235204
    },
    {
      "type": "edit",
      "id": "72423fb26385c0e7",
      "item": {
        "type": "pagefold",
        "id": "72423fb26385c0e7",
        "text": "I"
      },
      "date": 1628317239567
    },
    {
      "id": "72423fb26385c0e7",
      "type": "move",
      "order": [
        "72423fb26385c0e7",
        "91eeee3143ac3d03",
        "44fa4383fc158880",
        "96d3e19491290000",
        "41489a41c0785bfb",
        "6a81829dc60cbf22"
      ],
      "date": 1628317243788
    },
    {
      "item": {
        "type": "factory",
        "id": "ac6ececf9b6fc006"
      },
      "id": "ac6ececf9b6fc006",
      "type": "add",
      "after": "6a81829dc60cbf22",
      "date": 1628317245055
    },
    {
      "type": "edit",
      "id": "ac6ececf9b6fc006",
      "item": {
        "type": "pagefold",
        "id": "ac6ececf9b6fc006",
        "text": "."
      },
      "date": 1628317248261
    },
    {
      "item": {
        "type": "factory",
        "id": "47b9f382fe8389d6"
      },
      "id": "47b9f382fe8389d6",
      "type": "add",
      "after": "ac6ececf9b6fc006",
      "date": 1628317265341
    },
    {
      "type": "edit",
      "id": "47b9f382fe8389d6",
      "item": {
        "type": "markdown",
        "id": "47b9f382fe8389d6",
        "text": "The "
      },
      "date": 1628317277986
    },
    {
      "id": "47b9f382fe8389d6",
      "type": "move",
      "order": [
        "47b9f382fe8389d6",
        "72423fb26385c0e7",
        "91eeee3143ac3d03",
        "44fa4383fc158880",
        "96d3e19491290000",
        "41489a41c0785bfb",
        "6a81829dc60cbf22",
        "ac6ececf9b6fc006"
      ],
      "date": 1628317283035
    },
    {
      "type": "edit",
      "id": "47b9f382fe8389d6",
      "item": {
        "type": "markdown",
        "id": "47b9f382fe8389d6",
        "text": "The contrast between function on the one hand and data on the other leads to two polar approaches to software design, namely, traditional functional decomposition (dating from the 1960s) and data-driven or entity-relationship decomposition (dating from the 1970s)."
      },
      "date": 1628317387957
    },
    {
      "type": "edit",
      "id": "47b9f382fe8389d6",
      "item": {
        "type": "markdown",
        "id": "47b9f382fe8389d6",
        "text": "The contrast between function on the one hand and data on the other leads to two polar approaches to software design, namely, traditional [[functional decomposition]] (dating from the 1960s) and data-driven or entity-relationship decomposition (dating from the 1970s).\n"
      },
      "date": 1628317494341
    },
    {
      "type": "add",
      "id": "d64d45a92ae4219b",
      "item": {
        "type": "markdown",
        "id": "d64d45a92ae4219b",
        "text": "Objets occupy a middle ground; they have the tangibility and data content of an entity, but their outsides are defined by their function or behavior. This synthesis of data and function is what differentiates object-driven approaches from the other."
      },
      "after": "47b9f382fe8389d6",
      "date": 1628317602538
    },
    {
      "type": "edit",
      "id": "d64d45a92ae4219b",
      "item": {
        "type": "markdown",
        "id": "d64d45a92ae4219b",
        "text": "Objets occupy a middle ground; they have the tangibility and data content of an entity, but their outsides are defined by their function or behavior. This synthesis of data and function is what differentiates object-driven approaches from the other.  – ([[Smalltalk Objects And Design]], p 10)"
      },
      "date": 1628317766801
    },
    {
      "type": "edit",
      "id": "47b9f382fe8389d6",
      "item": {
        "type": "markdown",
        "id": "47b9f382fe8389d6",
        "text": "The contrast between [[function]] on the one hand and [[data]] on the other leads to two polar approaches to software design, namely, traditional [[functional decomposition]] (dating from the 1960s) and data-driven or entity-relationship decomposition (dating from the 1970s).\n"
      },
      "date": 1628317822882
    },
    {
      "type": "edit",
      "id": "d64d45a92ae4219b",
      "item": {
        "type": "markdown",
        "id": "d64d45a92ae4219b",
        "text": "[[Objets]] occupy a middle ground; they have the tangibility and data content of an entity, but their outsides are defined by their function or behavior. This synthesis of data and function is what differentiates object-driven approaches from the other.  – ([[Smalltalk Objects And Design]], p 10)"
      },
      "date": 1628317850310
    },
    {
      "type": "edit",
      "id": "96d3e19491290000",
      "item": {
        "type": "paragraph",
        "id": "96d3e19491290000",
        "text": "There is a confusion among programmers that the tools of their trade are to be applied only to their assigned [[problem]]. Every abstraction must be in service of the customer. With local functions I'm happy to abstract what I'm doing in the moment without any need to generalize beyond my immediate need."
      },
      "date": 1628317912920
    },
    {
      "type": "edit",
      "id": "96d3e19491290000",
      "item": {
        "type": "paragraph",
        "id": "96d3e19491290000",
        "text": "There is a confusion among programmers that the tools of their trade are to be applied only to their assigned [[problem]]. Every [[abstraction]] must be in service of the customer. With local functions I'm happy to abstract what I'm doing in the moment without any need to generalize beyond my immediate need."
      },
      "date": 1628317925237
    },
    {
      "type": "edit",
      "id": "44fa4383fc158880",
      "item": {
        "type": "paragraph",
        "id": "44fa4383fc158880",
        "text": "A friend was amazed that I wrote functions *apr* and *may* in a test suite working with dates. Java's Date constructors are a confusing mess. I could say *apr(15)* or *may(26)* and get on with my business."
      },
      "date": 1628317980467
    },
    {
      "item": {
        "type": "factory",
        "id": "b82f6f1c95ed1d9a"
      },
      "id": "b82f6f1c95ed1d9a",
      "type": "add",
      "after": "ac6ececf9b6fc006",
      "date": 1628317982898
    },
    {
      "type": "edit",
      "id": "b82f6f1c95ed1d9a",
      "item": {
        "type": "markdown",
        "id": "b82f6f1c95ed1d9a",
        "text": "apr"
      },
      "date": 1628317987431
    },
    {
      "id": "b82f6f1c95ed1d9a",
      "type": "move",
      "order": [
        "47b9f382fe8389d6",
        "d64d45a92ae4219b",
        "72423fb26385c0e7",
        "91eeee3143ac3d03",
        "b82f6f1c95ed1d9a",
        "44fa4383fc158880",
        "96d3e19491290000",
        "41489a41c0785bfb",
        "6a81829dc60cbf22",
        "ac6ececf9b6fc006"
      ],
      "date": 1628317991190
    },
    {
      "type": "remove",
      "id": "44fa4383fc158880",
      "date": 1628317993913
    },
    {
      "type": "edit",
      "id": "b82f6f1c95ed1d9a",
      "item": {
        "type": "markdown",
        "id": "b82f6f1c95ed1d9a",
        "text": "A friend was amazed that I wrote functions *apr* and *may* in a test suite working with dates. Java's Date constructors are a confusing mess. I could say *apr(15)* or *may(26)* and get on with my business."
      },
      "date": 1628317995554
    },
    {
      "type": "edit",
      "id": "41489a41c0785bfb",
      "item": {
        "type": "paragraph",
        "id": "41489a41c0785bfb",
        "text": "Macros served this purpose for the assembly language programmer and have been raised to high art in [[lisp]]. I'm talking about something much simpler. A handy function or two at the bottom of the page."
      },
      "date": 1628318073565
    },
    {
      "type": "edit",
      "id": "72423fb26385c0e7",
      "item": {
        "type": "pagefold",
        "id": "72423fb26385c0e7",
        "text": "I := Ward"
      },
      "date": 1628318136037
    },
    {
      "type": "edit",
      "id": "d64d45a92ae4219b",
      "item": {
        "type": "markdown",
        "id": "d64d45a92ae4219b",
        "text": "[[Objets]] occupy a middle ground; they have the tangibility and data content of an entity, but their outsides are defined by their function or [[behavior]]. This synthesis of data and function is what differentiates object-driven approaches from the other.  – ([[Smalltalk Objects And Design]], p 10)"
      },
      "date": 1651236448136
    },
    {
      "item": {
        "type": "pagefold",
        "id": "ee5dff45ed59acfe",
        "text": "~"
      },
      "id": "ee5dff45ed59acfe",
      "type": "add",
      "after": "ac6ececf9b6fc006",
      "date": 1651236503325
    },
    {
      "type": "edit",
      "id": "ee5dff45ed59acfe",
      "item": {
        "type": "pagefold",
        "id": "ee5dff45ed59acfe",
        "text": "~"
      },
      "date": 1651236506906
    },
    {
      "id": "ee5dff45ed59acfe",
      "type": "move",
      "order": [
        "47b9f382fe8389d6",
        "d64d45a92ae4219b",
        "72423fb26385c0e7",
        "91eeee3143ac3d03",
        "ee5dff45ed59acfe",
        "b82f6f1c95ed1d9a",
        "96d3e19491290000",
        "41489a41c0785bfb",
        "6a81829dc60cbf22",
        "ac6ececf9b6fc006"
      ],
      "date": 1651236514215
    },
    {
      "item": {
        "type": "pagefold",
        "id": "8d9c3c9a9a4cd81b",
        "text": "~"
      },
      "id": "8d9c3c9a9a4cd81b",
      "type": "add",
      "after": "ac6ececf9b6fc006",
      "date": 1651236516679
    },
    {
      "type": "edit",
      "id": "8d9c3c9a9a4cd81b",
      "item": {
        "type": "pagefold",
        "id": "8d9c3c9a9a4cd81b",
        "text": "~"
      },
      "date": 1651236519498
    },
    {
      "id": "8d9c3c9a9a4cd81b",
      "type": "move",
      "order": [
        "47b9f382fe8389d6",
        "d64d45a92ae4219b",
        "72423fb26385c0e7",
        "91eeee3143ac3d03",
        "ee5dff45ed59acfe",
        "8d9c3c9a9a4cd81b",
        "b82f6f1c95ed1d9a",
        "96d3e19491290000",
        "41489a41c0785bfb",
        "6a81829dc60cbf22",
        "ac6ececf9b6fc006"
      ],
      "date": 1651236524092
    },
    {
      "item": {
        "type": "paragraph",
        "id": "6cee2322a4368424",
        "text": ""
      },
      "id": "6cee2322a4368424",
      "type": "add",
      "after": "ac6ececf9b6fc006",
      "date": 1651236525578
    },
    {
      "id": "6cee2322a4368424",
      "type": "move",
      "order": [
        "47b9f382fe8389d6",
        "d64d45a92ae4219b",
        "72423fb26385c0e7",
        "91eeee3143ac3d03",
        "ee5dff45ed59acfe",
        "6cee2322a4368424",
        "8d9c3c9a9a4cd81b",
        "b82f6f1c95ed1d9a",
        "96d3e19491290000",
        "41489a41c0785bfb",
        "6a81829dc60cbf22",
        "ac6ececf9b6fc006"
      ],
      "date": 1651236527817
    },
    {
      "id": "ca339d7375d9ea64",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ca339d7375d9ea64",
        "text": "\nOf course, as soon as you start asking “does this object *do* the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either (⇒ [[Extensionality]]). –– [[Quildreen Motta]]"
      },
      "after": "6cee2322a4368424",
      "date": 1651236542015
    },
    {
      "type": "remove",
      "id": "6cee2322a4368424",
      "date": 1651236544989
    },
    {
      "id": "ca339d7375d9ea64",
      "type": "remove",
      "date": 1651236682602
    },
    {
      "id": "ca339d7375d9ea64",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ca339d7375d9ea64",
        "text": "\nOf course, as soon as you start asking “does this object *do* the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either (⇒ [[Extensionality]]). –– [[Quildreen Motta]]"
      },
      "after": "ee5dff45ed59acfe",
      "date": 1651236710177
    },
    {
      "type": "fork",
      "date": 1651236713067
    },
    {
      "id": "ca339d7375d9ea64",
      "type": "remove",
      "date": 1651236755886
    },
    {
      "id": "ca339d7375d9ea64",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ca339d7375d9ea64",
        "text": "\nOf course, as soon as you start asking “does this object *do* the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either (⇒ [[Extensionality]]). –– [[Quildreen Motta]]"
      },
      "after": "ee5dff45ed59acfe",
      "date": 1651236796151
    },
    {
      "type": "fork",
      "date": 1651236819518
    },
    {
      "type": "edit",
      "id": "41489a41c0785bfb",
      "item": {
        "type": "paragraph",
        "id": "41489a41c0785bfb",
        "text": "[[Macros]] served this purpose for the assembly language programmer and have been raised to high art in [[lisp]]. I'm talking about something much simpler. A handy function or two at the bottom of the page."
      },
      "date": 1651236884974
    },
    {
      "type": "edit",
      "id": "41489a41c0785bfb",
      "item": {
        "type": "paragraph",
        "id": "41489a41c0785bfb",
        "text": "[[Macros]] served this purpose for the assembly language programmer and have been raised to high art in [[lisp]]. I'm talking about something much simpler. **A handy function or two at the bottom of the page.**"
      },
      "date": 1651236923708
    },
    {
      "type": "edit",
      "id": "41489a41c0785bfb",
      "item": {
        "type": "markdown",
        "id": "41489a41c0785bfb",
        "text": "[[Macros]] served this purpose for the assembly language programmer and have been raised to high art in [[lisp]]. I'm talking about something much simpler. **A handy function or two at the bottom of the page.**"
      },
      "date": 1651236925694
    }
  ]
}