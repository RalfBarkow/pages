{
  "title": "Teradata vs SAP",
  "story": [
    {
      "type": "markdown",
      "id": "27e862de7c6a2aa6",
      "text": "A good example of a Software Development Cooperation Agreement (“SDCA”) and Technology Partner Agreement (“TPA”) come undone [https://www.theregister.com/2021/11/16/sap_patent_not_inventive_enough/ page], [https://docs.justia.com/cases/federal/district-courts/california/candce/3:2018cv03670/328186/603 docket]"
    },
    {
      "type": "markdown",
      "id": "6fa6da9f7f7d7162",
      "text": "SAP developed MPP technology over 3 years in parallel, then discontinued the SDCA leaving the TPA in dispute."
    },
    {
      "type": "markdown",
      "id": "12a687d0c0f51e60",
      "text": "# Teradata sued. \n\n# SAP counter sued."
    },
    {
      "type": "markdown",
      "id": "212ae7f61eae79b4",
      "text": "Judge Orrick whittled both parties claims down to a narrow set focused on Teradata’s Batched Merge method [https://www.revisitclass.com/teradata/merge-or-upsert-statement-in-teradata-with-examples/ page]"
    },
    {
      "type": "markdown",
      "id": "b9dc70c5c6bf7ca1",
      "text": "> Merge Statement in Teradata\nMerge statement is also referred as Upsert that\n\n> inserts a record to a table in a database if the record doesn’t exist.\nif the record already exists , update the existing record.\n> It combines the UPDATE and INSERT statements into a single statement with two conditional test clauses.\n\n> WHEN MATCHED, UPDATE.\n> WHEN NOT MATCHED, INSERT.\n> We can also delete the rows if the record matched by specifying : WHEN MATCHED,DELETE. The source and target table should have the same PI and PPI that helps to process the merge statement faster in Teradata.\n\n> WHEN MATCHED:\n\n> It updates the matched target table row with the values taken from the source table row. Also it deletes the matching target table row.\n\n> WHEN NOT MATCHED:\n\n> It inserts the current source row into the target table.  "
    },
    {
      "type": "markdown",
      "id": "99658a0aef03c642",
      "text": "Teradata moves for summary judgment and argues that counterclaim-plaintiff SAP SE’s U.S. Patent No. 8,214,321 (“’321 [https://patents.google.com/patent/US8214321B2/en Patent]”) is invalid under 35\nU.S.C. § 101. \n"
    },
    {
      "type": "markdown",
      "id": "15eb246ba4df9f70",
      "text": "It argues that SAP is not entitled to damages for the alleged infringement of U.S. Patent Nos. 7,617,179 (“’179 [https://patents.google.com/patent/US7617179B2/en Patent]”), and 9,626,421 (“’421 [https://patents.google.com/patent/US9626421B2/en Patent]”) before May 19, 2019. "
    },
    {
      "type": "pagefold",
      "id": "556f8a26e4e602e5",
      "text": "Summary Judgement"
    },
    {
      "type": "markdown",
      "id": "3f82d790b73e1a18",
      "text": "Summary judgment is a judgment entered by a court for one party and against another party without a full trial.\n- “hypothetical monopolist” test (“HMT”) tying claim\n- Inventive Concept Identified During the Hearing\n- Remaining Claim Elements (2003)\n- CONCLUSION - IT IS SO ORDERED."
    },
    {
      "type": "pagefold",
      "id": "bcee5d85bc403951",
      "text": "A note on Insert vs Upsert"
    },
    {
      "type": "markdown",
      "id": "1bf18b641a4b6fa5",
      "text": "Syntax of Merge Statement in Teradata... provides great insight into big data in enterprise vs social.\n"
    },
    {
      "type": "markdown",
      "id": "94e08d5aaea32225",
      "text": "Enterprise databases are optimized for immediate consistency to solve the [[Byzantine generals problem]],  especially in banking settlements (prevent withdrawal from 2 ATMs at the same time)."
    },
    {
      "type": "markdown",
      "id": "06b71ed09cc6d009",
      "text": "Social databases are optimized for immediacy without consistency. Immediacy provides instant messages without delay, the Byzantine generals problem, is a feature not a bug.  "
    },
    {
      "type": "markdown",
      "id": "5501f88bd124e42f",
      "text": "Blockchain separates optimizing for consistency from performing updates.\n"
    },
    {
      "type": "markdown",
      "id": "5116d53a74b38c8e",
      "text": "SAP sought out Teradata expertise at identifying matched data from unmatched data. \n"
    },
    {
      "type": "markdown",
      "id": "f582ac5b729bb6d2",
      "text": "Matched data must be updated with consistency (merged). Unmatched data may be inserted (upserted) without consistency. [https://www.revisitclass.com/teradata/merge-or-upsert-statement-in-teradata-with-examples/ page]\n"
    },
    {
      "type": "markdown",
      "id": "08cb8d4395b217c6",
      "text": "The [[BigTable]] paper, the [[DynamoDB]] paper switched this around by treating all data as unmatched, inserting it into the database table, then looping around to merge any consistency columns with updates, thus [[decentralizing database consistency]] (my SWAG).  "
    },
    {
      "type": "markdown",
      "id": "dd4e6d95720bb7d4",
      "text": "By marking any column cells that are currently inconsistent, we can defer any transactions that require enterprise consistency, simply by waiting for a few moments. Unnoticeable to most."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Teradata vs SAP",
        "story": []
      },
      "date": 1644107757622
    },
    {
      "item": {
        "type": "factory",
        "id": "6fa6da9f7f7d7162"
      },
      "id": "6fa6da9f7f7d7162",
      "type": "add",
      "date": 1644107759148
    },
    {
      "type": "edit",
      "id": "6fa6da9f7f7d7162",
      "item": {
        "type": "markdown",
        "id": "6fa6da9f7f7d7162",
        "text": "SAP developed MPP technology over 3 years in parallel, then discontinued the SDCA leaving the TPA in dispute."
      },
      "date": 1644107781674
    },
    {
      "item": {
        "type": "factory",
        "id": "27e862de7c6a2aa6"
      },
      "id": "27e862de7c6a2aa6",
      "type": "add",
      "after": "6fa6da9f7f7d7162",
      "date": 1644107784396
    },
    {
      "type": "edit",
      "id": "27e862de7c6a2aa6",
      "item": {
        "type": "markdown",
        "id": "27e862de7c6a2aa6",
        "text": "A good example of a Software Development Cooperation Agreement (“SDCA”) and Technology Partner Agreement (“TPA”) come undone [https://www.theregister.com/2021/11/16/sap_patent_not_inventive_enough/ page], [https://docs.justia.com/cases/federal/district-courts/california/candce/3:2018cv03670/328186/603 docket]"
      },
      "date": 1644107799125
    },
    {
      "id": "27e862de7c6a2aa6",
      "type": "move",
      "order": [
        "27e862de7c6a2aa6",
        "6fa6da9f7f7d7162"
      ],
      "date": 1644107802072
    },
    {
      "item": {
        "type": "factory",
        "id": "12a687d0c0f51e60"
      },
      "id": "12a687d0c0f51e60",
      "type": "add",
      "after": "6fa6da9f7f7d7162",
      "date": 1644107803613
    },
    {
      "type": "edit",
      "id": "12a687d0c0f51e60",
      "item": {
        "type": "markdown",
        "id": "12a687d0c0f51e60",
        "text": "# Teradata sued. "
      },
      "date": 1644107824408
    },
    {
      "type": "edit",
      "id": "12a687d0c0f51e60",
      "item": {
        "type": "markdown",
        "id": "12a687d0c0f51e60",
        "text": "# Teradata sued. \n"
      },
      "date": 1644107836136
    },
    {
      "type": "edit",
      "id": "12a687d0c0f51e60",
      "item": {
        "type": "markdown",
        "id": "12a687d0c0f51e60",
        "text": "# Teradata sued. \n\n# SAP counter sued."
      },
      "date": 1644107844973
    },
    {
      "item": {
        "type": "factory",
        "id": "212ae7f61eae79b4"
      },
      "id": "212ae7f61eae79b4",
      "type": "add",
      "after": "12a687d0c0f51e60",
      "date": 1644107849057
    },
    {
      "type": "edit",
      "id": "212ae7f61eae79b4",
      "item": {
        "type": "markdown",
        "id": "212ae7f61eae79b4",
        "text": "Judge Orrick whittled both parties claims down to a narrow set focused on Teradata’s Batched Merge method [https://www.revisitclass.com/teradata/merge-or-upsert-statement-in-teradata-with-examples/ page]"
      },
      "date": 1644107871989
    },
    {
      "item": {
        "type": "factory",
        "id": "b9dc70c5c6bf7ca1"
      },
      "id": "b9dc70c5c6bf7ca1",
      "type": "add",
      "after": "212ae7f61eae79b4",
      "date": 1644107875048
    },
    {
      "type": "edit",
      "id": "b9dc70c5c6bf7ca1",
      "item": {
        "type": "markdown",
        "id": "b9dc70c5c6bf7ca1",
        "text": "> Merge Statement in Teradata\nMerge statement is also referred as Upsert that\n\n> inserts a record to a table in a database if the record doesn’t exist.\nif the record already exists , update the existing record.\n> It combines the UPDATE and INSERT statements into a single statement with two conditional test clauses.\n\n> WHEN MATCHED, UPDATE.\n> WHEN NOT MATCHED, INSERT.\n> We can also delete the rows if the record matched by specifying : WHEN MATCHED,DELETE. The source and target table should have the same PI and PPI that helps to process the merge statement faster in Teradata.\n\n> WHEN MATCHED:\n\n> It updates the matched target table row with the values taken from the source table row. Also it deletes the matching target table row.\n\n> WHEN NOT MATCHED:\n\n> It inserts the current source row into the target table.  "
      },
      "date": 1644107898902
    },
    {
      "item": {
        "type": "factory",
        "id": "99658a0aef03c642"
      },
      "id": "99658a0aef03c642",
      "type": "add",
      "after": "b9dc70c5c6bf7ca1",
      "date": 1644107915768
    },
    {
      "type": "edit",
      "id": "99658a0aef03c642",
      "item": {
        "type": "markdown",
        "id": "99658a0aef03c642",
        "text": "Teradata moves for summary judgment and argues that counterclaim-plaintiff SAP SE’s U.S. Patent No. 8,214,321 (“’321 [https://patents.google.com/patent/US8214321B2/en Patent]”) is invalid under 35\nU.S.C. § 101. \n"
      },
      "date": 1644107919850
    },
    {
      "item": {
        "type": "factory",
        "id": "15eb246ba4df9f70"
      },
      "id": "15eb246ba4df9f70",
      "type": "add",
      "after": "99658a0aef03c642",
      "date": 1644107923077
    },
    {
      "type": "edit",
      "id": "15eb246ba4df9f70",
      "item": {
        "type": "markdown",
        "id": "15eb246ba4df9f70",
        "text": "It argues that SAP is not entitled to damages for the alleged infringement of U.S. Patent Nos. 7,617,179 (“’179 [https://patents.google.com/patent/US7617179B2/en Patent]”), and 9,626,421 (“’421 [https://patents.google.com/patent/US9626421B2/en Patent]”) before May 19, 2019. "
      },
      "date": 1644107943988
    },
    {
      "item": {
        "type": "factory",
        "id": "3f82d790b73e1a18"
      },
      "id": "3f82d790b73e1a18",
      "type": "add",
      "after": "15eb246ba4df9f70",
      "date": 1644107945839
    },
    {
      "type": "edit",
      "id": "3f82d790b73e1a18",
      "item": {
        "type": "markdown",
        "id": "3f82d790b73e1a18",
        "text": "Summary judgment is a judgment entered by a court for one party and against another party without a full trial.\n- “hypothetical monopolist” test (“HMT”) tying claim\n- Inventive Concept Identified During the Hearing\n- Remaining Claim Elements (2003)\n- CONCLUSION - IT IS SO ORDERED."
      },
      "date": 1644107961740
    },
    {
      "item": {
        "type": "factory",
        "id": "556f8a26e4e602e5"
      },
      "id": "556f8a26e4e602e5",
      "type": "add",
      "after": "3f82d790b73e1a18",
      "date": 1644107963269
    },
    {
      "type": "edit",
      "id": "556f8a26e4e602e5",
      "item": {
        "type": "pagefold",
        "id": "556f8a26e4e602e5",
        "text": "Summary Judgement"
      },
      "date": 1644107979657
    },
    {
      "id": "556f8a26e4e602e5",
      "type": "move",
      "order": [
        "27e862de7c6a2aa6",
        "6fa6da9f7f7d7162",
        "12a687d0c0f51e60",
        "212ae7f61eae79b4",
        "b9dc70c5c6bf7ca1",
        "99658a0aef03c642",
        "15eb246ba4df9f70",
        "556f8a26e4e602e5",
        "3f82d790b73e1a18"
      ],
      "date": 1644107984139
    },
    {
      "item": {
        "type": "factory",
        "id": "bcee5d85bc403951"
      },
      "id": "bcee5d85bc403951",
      "type": "add",
      "after": "3f82d790b73e1a18",
      "date": 1644122879238
    },
    {
      "type": "edit",
      "id": "bcee5d85bc403951",
      "item": {
        "type": "pagefold",
        "id": "bcee5d85bc403951",
        "text": "'Technical Observation'"
      },
      "date": 1644122935973
    },
    {
      "item": {
        "type": "factory",
        "id": "7fa72755e4b62078"
      },
      "id": "7fa72755e4b62078",
      "type": "add",
      "after": "bcee5d85bc403951",
      "date": 1644122938277
    },
    {
      "type": "remove",
      "id": "7fa72755e4b62078",
      "date": 1644122951472
    },
    {
      "item": {
        "type": "factory",
        "id": "1bf18b641a4b6fa5"
      },
      "id": "1bf18b641a4b6fa5",
      "type": "add",
      "after": "bcee5d85bc403951",
      "date": 1644122963577
    },
    {
      "type": "edit",
      "id": "1bf18b641a4b6fa5",
      "item": {
        "type": "markdown",
        "id": "1bf18b641a4b6fa5",
        "text": "Syntax of Merge Statement in Teradata... provides great insight into big data in enterprise vs social.\n"
      },
      "date": 1644123083784
    },
    {
      "type": "add",
      "id": "94e08d5aaea32225",
      "item": {
        "type": "markdown",
        "id": "94e08d5aaea32225",
        "text": "Enterprise databases are optimized for immediate consistency.\n"
      },
      "after": "1bf18b641a4b6fa5",
      "date": 1644123187279
    },
    {
      "type": "add",
      "id": "06b71ed09cc6d009",
      "item": {
        "type": "markdown",
        "id": "06b71ed09cc6d009",
        "text": "Social databases are optimized for immediacy without consistency.   "
      },
      "after": "94e08d5aaea32225",
      "date": 1644123264103
    },
    {
      "type": "edit",
      "id": "94e08d5aaea32225",
      "item": {
        "type": "markdown",
        "id": "94e08d5aaea32225",
        "text": "Enterprise databases are optimized for immediate consistency to solve the Byzantine Generals problem in financials.\n"
      },
      "date": 1644123347298
    },
    {
      "type": "edit",
      "id": "94e08d5aaea32225",
      "item": {
        "type": "markdown",
        "id": "94e08d5aaea32225",
        "text": "Enterprise databases are optimized for immediate consistency to solve the Byzantine generals problem,  especially in banking settlements (withdrawal from 2 ATMs at the same time)."
      },
      "date": 1644123470200
    },
    {
      "type": "edit",
      "id": "94e08d5aaea32225",
      "item": {
        "type": "markdown",
        "id": "94e08d5aaea32225",
        "text": "Enterprise databases are optimized for immediate consistency to solve the Byzantine generals problem,  especially in banking settlements (prevent withdrawal from 2 ATMs at the same time)."
      },
      "date": 1644123483337
    },
    {
      "type": "edit",
      "id": "06b71ed09cc6d009",
      "item": {
        "type": "markdown",
        "id": "06b71ed09cc6d009",
        "text": "Social databases are optimized for immediacy without consistency. The   "
      },
      "date": 1644123508743
    },
    {
      "type": "edit",
      "id": "06b71ed09cc6d009",
      "item": {
        "type": "markdown",
        "id": "06b71ed09cc6d009",
        "text": "Social databases are optimized for immediacy without consistency. Immediacy provides instant messages without delay, the  "
      },
      "date": 1644123685408
    },
    {
      "type": "edit",
      "id": "06b71ed09cc6d009",
      "item": {
        "type": "markdown",
        "id": "06b71ed09cc6d009",
        "text": "Social databases are optimized for immediacy without consistency. Immediacy provides instant messages without delay, the Byzantine generals problem, is a feature not a bug.  "
      },
      "date": 1644123717661
    },
    {
      "item": {
        "type": "factory",
        "id": "5501f88bd124e42f"
      },
      "id": "5501f88bd124e42f",
      "type": "add",
      "after": "06b71ed09cc6d009",
      "date": 1644123724639
    },
    {
      "type": "edit",
      "id": "5501f88bd124e42f",
      "item": {
        "type": "markdown",
        "id": "5501f88bd124e42f",
        "text": "Blockchain separates optimizing for consistency from performing updates.\n"
      },
      "date": 1644123824848
    },
    {
      "type": "add",
      "id": "5116d53a74b38c8e",
      "item": {
        "type": "markdown",
        "id": "5116d53a74b38c8e",
        "text": "SAP sought out Teradata expertise at identifying  "
      },
      "after": "5501f88bd124e42f",
      "date": 1644123902220
    },
    {
      "type": "edit",
      "id": "5116d53a74b38c8e",
      "item": {
        "type": "markdown",
        "id": "5116d53a74b38c8e",
        "text": "SAP sought out Teradata expertise at identifying matched data from unmatched data. \n"
      },
      "date": 1644123957210
    },
    {
      "type": "add",
      "id": "f582ac5b729bb6d2",
      "item": {
        "type": "markdown",
        "id": "f582ac5b729bb6d2",
        "text": "Matched data must be updated with consistency. Un matched data may be inserted without consistency."
      },
      "after": "5116d53a74b38c8e",
      "date": 1644124028307
    },
    {
      "type": "edit",
      "id": "f582ac5b729bb6d2",
      "item": {
        "type": "markdown",
        "id": "f582ac5b729bb6d2",
        "text": "Matched data must be updated with consistency. Un matched data may be inserted without consistency. [https://www.revisitclass.com/teradata/merge-or-upsert-statement-in-teradata-with-examples/ page]"
      },
      "date": 1644124110797
    },
    {
      "type": "edit",
      "id": "f582ac5b729bb6d2",
      "item": {
        "type": "markdown",
        "id": "f582ac5b729bb6d2",
        "text": "Matched data must be updated with consistency (merged). Unmatched data may be inserted (upserted) without consistency. [https://www.revisitclass.com/teradata/merge-or-upsert-statement-in-teradata-with-examples/ page]"
      },
      "date": 1644124187618
    },
    {
      "type": "edit",
      "id": "f582ac5b729bb6d2",
      "item": {
        "type": "markdown",
        "id": "f582ac5b729bb6d2",
        "text": "Matched data must be updated with consistency (merged). Unmatched data may be inserted (upserted) without consistency. [https://www.revisitclass.com/teradata/merge-or-upsert-statement-in-teradata-with-examples/ page]\n"
      },
      "date": 1644124277502
    },
    {
      "type": "add",
      "id": "08cb8d4395b217c6",
      "item": {
        "type": "markdown",
        "id": "08cb8d4395b217c6",
        "text": "The [[BigTable]] paper, the [[DynamoDB]] paper switched this around by treating all data as unmatched, inserting it into the database table, then looping around to merge any consistency columns with updates, thus decentralizing consistency.  "
      },
      "after": "f582ac5b729bb6d2",
      "date": 1644124633406
    },
    {
      "type": "edit",
      "id": "08cb8d4395b217c6",
      "item": {
        "type": "markdown",
        "id": "08cb8d4395b217c6",
        "text": "The [[BigTable]] paper, the [[DynamoDB]] paper switched this around by treating all data as unmatched, inserting it into the database table, then looping around to merge any consistency columns with updates, thus decentralizing consistency (I think).  "
      },
      "date": 1644124653847
    },
    {
      "type": "edit",
      "id": "08cb8d4395b217c6",
      "item": {
        "type": "markdown",
        "id": "08cb8d4395b217c6",
        "text": "The [[BigTable]] paper, the [[DynamoDB]] paper switched this around by treating all data as unmatched, inserting it into the database table, then looping around to merge any consistency columns with updates, thus decentralizing consistency (my SWAG).  "
      },
      "date": 1644124675195
    },
    {
      "type": "edit",
      "id": "bcee5d85bc403951",
      "item": {
        "type": "pagefold",
        "id": "bcee5d85bc403951",
        "text": "Insert vs Upsert"
      },
      "date": 1644124712559
    },
    {
      "type": "edit",
      "id": "bcee5d85bc403951",
      "item": {
        "type": "pagefold",
        "id": "bcee5d85bc403951",
        "text": "A note on Insert vs Upsert"
      },
      "date": 1644124737471
    },
    {
      "type": "edit",
      "id": "08cb8d4395b217c6",
      "item": {
        "type": "markdown",
        "id": "08cb8d4395b217c6",
        "text": "The [[BigTable]] paper, the [[DynamoDB]] paper switched this around by treating all data as unmatched, inserting it into the database table, then looping around to merge any consistency columns with updates, thus [[decentralizing consistency]] (my SWAG).  "
      },
      "date": 1644124802448
    },
    {
      "type": "edit",
      "id": "08cb8d4395b217c6",
      "item": {
        "type": "markdown",
        "id": "08cb8d4395b217c6",
        "text": "The [[BigTable]] paper, the [[DynamoDB]] paper switched this around by treating all data as unmatched, inserting it into the database table, then looping around to merge any consistency columns with updates, thus [[decentralizing database consistency]] (my SWAG).  "
      },
      "date": 1644124816910
    },
    {
      "item": {
        "type": "factory",
        "id": "dd4e6d95720bb7d4"
      },
      "id": "dd4e6d95720bb7d4",
      "type": "add",
      "after": "08cb8d4395b217c6",
      "date": 1644124852230
    },
    {
      "type": "edit",
      "id": "dd4e6d95720bb7d4",
      "item": {
        "type": "markdown",
        "id": "dd4e6d95720bb7d4",
        "text": "By marking any column cells that are currently looping for consistency, we can defer any transactions that require enterprise consistency. Simply by waiting for a few moments. Unnoticeable to most generals.      "
      },
      "date": 1644125226307
    },
    {
      "type": "edit",
      "id": "dd4e6d95720bb7d4",
      "item": {
        "type": "markdown",
        "id": "dd4e6d95720bb7d4",
        "text": "By marking any column cells that are currently looping for consistency, we can defer any transactions that require enterprise consistency. Simply by waiting for a few moments. Unnoticeable to most."
      },
      "date": 1644125321160
    },
    {
      "type": "edit",
      "id": "94e08d5aaea32225",
      "item": {
        "type": "markdown",
        "id": "94e08d5aaea32225",
        "text": "Enterprise databases are optimized for immediate consistency to solve the [[Byzantine generals problem]],  especially in banking settlements (prevent withdrawal from 2 ATMs at the same time)."
      },
      "date": 1644125336980
    },
    {
      "type": "fork",
      "date": 1644130351775
    },
    {
      "type": "edit",
      "id": "dd4e6d95720bb7d4",
      "item": {
        "type": "markdown",
        "id": "dd4e6d95720bb7d4",
        "text": "By marking any column cells that are currently inconsistent, we can defer any transactions that require enterprise consistency, simply by waiting for a few moments. Unnoticeable to most. And eminently scalable "
      },
      "date": 1644130515256
    },
    {
      "type": "edit",
      "id": "dd4e6d95720bb7d4",
      "item": {
        "type": "markdown",
        "id": "dd4e6d95720bb7d4",
        "text": "By marking any column cells that are currently inconsistent, we can defer any transactions that require enterprise consistency, simply by waiting for a few moments. Unnoticeable to most."
      },
      "date": 1644130530874
    },
    {
      "type": "fork",
      "site": "clive.tries.fed.wiki",
      "date": 1644151732474
    }
  ]
}