{
  "title": "Interaction with the Outside World",
  "story": [
    {
      "type": "paragraph",
      "id": "566193cca09ee104",
      "text": "Because of their platform heritage, commercial Smalltalk products had similar problems to those Java had. There was an “impedance mismatch” between the Smalltalk way of doing things and the dominant client platforms such as Microsoft Windows. The non-Smalltalk-80 derived platforms (Digitalk and OTI/IBM) did a better job than ParcPlace Systems at smoothing that mismatch."
    },
    {
      "type": "markdown",
      "id": "faaca924911fcc89",
      "text": "> Windowing. Smalltalk was the birthplace of windowing. Ironically, Smalltalks continued to run on top of their own idiosyncratic window systems, locked inside a single OS window.\n>\n> Strongtalk addressed this too; occasionally, so did others, but the main efforts remained focused on their own isolated world, graphically as in every other way.\n"
    },
    {
      "type": "paragraph",
      "id": "1b195616e4f9728c",
      "text": "This describes ParcPlace’s VisualWorks, but not Digitalk’s Visual Smalltalk or IBM’s VisualAge Smalltalk. Applications written for those Smalltalks used native platform windows and widgets, just like other languages. Each Smalltalk vendor supplied their own higher-level GUI frameworks. Those frameworks were different from each other and from frameworks used with other languages. Digitalk’s early Smalltalk products for MSDOS supplied their own windowing systems, but Digitalk’s Windows and OS/2 products always used the native windows and graphics."
    },
    {
      "type": "markdown",
      "id": "c59ff2cac06ae43e",
      "text": "> **Source control**. The lack of a conventional syntax meant that Smalltalk code could not be managed with conventional source control systems. Instead, there were custom tools. Some were great – but they were very expensive."
    },
    {
      "type": "paragraph",
      "id": "250116e5f5890b0b",
      "text": "Both IBM and Digitalk bundled source control systems into their enterprise Smalltalk products which were competitively priced with other enterprise development platforms. OTI/IBM’s [[Envy]] source control system successfully built upon Smalltalk’s traditional reflective syntax and stored code in a multiuser object database. OTI also sold Envy for ParcPlace’s VisualWorks but lacked the pricing advantage of bundling. Digitalk’s Team/V unobtrusively introduced a non-reflective syntax and versioned source code using RCS. Team/V could forward and backwards migrate versions of Smalltalk “modules” within an running virtual image."
    },
    {
      "type": "markdown",
      "id": "b5967af940ad41ab",
      "text": "> **Deployment**. Smalltalk made it very difficult to deploy an application separate from the programming environment."
    },
    {
      "type": "paragraph",
      "id": "80cdb8a42733f4bd",
      "text": "As Gilad describes, extracting an application from its development environment could be tricky. But both Team/V and Envy included tools to help developers do this. Team/V support the deployment of applications as Digitalk Smalltalk Link Libraries (SLLs) which were separable virtual image segments that could be dynamically loaded. Envy, which originally was designed to generate ROM-based embedded applications, had rich tools for tree-shaking a deployable application from a development image."
    },
    {
      "type": "paragraph",
      "id": "8569943350e497b8",
      "text": "Gilad also mentioned that “unprotected IP” was a deployment concern that hindered Smalltalk acceptance. This is presumably because even if source code wasn’t deployed with an application it was quite easy to decompile a Smalltalk bytecoded method back into human readable source code. Indeed, potential enterprise customers would occasionally raise that as a concern. But, it was usually as a “what about” issue. Out of hundreds of enterprise customers we dealt with at Digitalk, I can’t recall a single instance where unprotected IP killed a deal. If it had been, we would have done something about this as we knew of various techniques that could be used to obfuscate Smalltalk code."
    },
    {
      "type": "paragraph",
      "id": "6cb54fdaed0be29f",
      "text": "Next: [[Why Didn’t Smalltalk Take Over]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Interaction with the Outside World",
        "story": []
      },
      "date": 1640400899494
    },
    {
      "item": {
        "type": "factory",
        "id": "566193cca09ee104"
      },
      "id": "566193cca09ee104",
      "type": "add",
      "date": 1640400914142
    },
    {
      "type": "edit",
      "id": "566193cca09ee104",
      "item": {
        "type": "paragraph",
        "id": "566193cca09ee104",
        "text": "Because of their platform heritage, commercial Smalltalk products had similar problems to those Java had. There was an “impedance mismatch” between the Smalltalk way of doing things and the dominant client platforms such as Microsoft Windows. The non-Smalltalk-80 derived platforms (Digitalk and OTI/IBM) did a better job than ParcPlace Systems at smoothing that mismatch."
      },
      "date": 1640400916175
    },
    {
      "item": {
        "type": "factory",
        "id": "faaca924911fcc89"
      },
      "id": "faaca924911fcc89",
      "type": "add",
      "after": "566193cca09ee104",
      "date": 1640400926642
    },
    {
      "type": "edit",
      "id": "faaca924911fcc89",
      "item": {
        "type": "markdown",
        "id": "faaca924911fcc89",
        "text": "> \n\n    Windowing. Smalltalk was the birthplace of windowing. Ironically, Smalltalks continued to run on top of their own idiosyncratic window systems, locked inside a single OS window.\n\n    Strongtalk addressed this too; occasionally, so did others, but the main efforts remained focused on their own isolated world, graphically as in every other way.\n"
      },
      "date": 1640400931505
    },
    {
      "type": "edit",
      "id": "faaca924911fcc89",
      "item": {
        "type": "markdown",
        "id": "faaca924911fcc89",
        "text": "> Windowing. Smalltalk was the birthplace of windowing. Ironically, Smalltalks continued to run on top of their own idiosyncratic window systems, locked inside a single OS window.\n>\n> Strongtalk addressed this too; occasionally, so did others, but the main efforts remained focused on their own isolated world, graphically as in every other way.\n"
      },
      "date": 1640400947493
    },
    {
      "item": {
        "type": "factory",
        "id": "1b195616e4f9728c"
      },
      "id": "1b195616e4f9728c",
      "type": "add",
      "after": "faaca924911fcc89",
      "date": 1640400964208
    },
    {
      "type": "edit",
      "id": "1b195616e4f9728c",
      "item": {
        "type": "paragraph",
        "id": "1b195616e4f9728c",
        "text": "This describes ParcPlace’s VisualWorks, but not Digitalk’s Visual Smalltalk or IBM’s VisualAge Smalltalk. Applications written for those Smalltalks used native platform windows and widgets, just like other languages. Each Smalltalk vendor supplied their own higher-level GUI frameworks. Those frameworks were different from each other and from frameworks used with other languages. Digitalk’s early Smalltalk products for MSDOS supplied their own windowing systems, but Digitalk’s Windows and OS/2 products always used the native windows and graphics."
      },
      "date": 1640400966272
    },
    {
      "item": {
        "type": "factory",
        "id": "c59ff2cac06ae43e"
      },
      "id": "c59ff2cac06ae43e",
      "type": "add",
      "after": "1b195616e4f9728c",
      "date": 1640401067931
    },
    {
      "type": "edit",
      "id": "c59ff2cac06ae43e",
      "item": {
        "type": "markdown",
        "id": "c59ff2cac06ae43e",
        "text": "> **Source control**. The lack of a conventional syntax meant that Smalltalk code could not be managed with conventional source control systems. Instead, there were custom tools. Some were great – but they were very expensive."
      },
      "date": 1640401078936
    },
    {
      "item": {
        "type": "factory",
        "id": "250116e5f5890b0b"
      },
      "id": "250116e5f5890b0b",
      "type": "add",
      "after": "c59ff2cac06ae43e",
      "date": 1640401105598
    },
    {
      "type": "edit",
      "id": "250116e5f5890b0b",
      "item": {
        "type": "paragraph",
        "id": "250116e5f5890b0b",
        "text": "Both IBM and Digitalk bundled source control systems into their enterprise Smalltalk products which were competitively priced with other enterprise development platforms. OTI/IBM’s Envy source control system successfully built upon Smalltalk’s traditional reflective syntax and stored code in a multiuser object database. OTI also sold Envy for ParcPlace’s VisualWorks but lacked the pricing advantage of bundling. Digitalk’s Team/V unobtrusively introduced a non-reflective syntax and versioned source code using RCS. Team/V could forward and backwards migrate versions of Smalltalk “modules” within an running virtual image."
      },
      "date": 1640401108150
    },
    {
      "type": "edit",
      "id": "250116e5f5890b0b",
      "item": {
        "type": "paragraph",
        "id": "250116e5f5890b0b",
        "text": "Both IBM and Digitalk bundled source control systems into their enterprise Smalltalk products which were competitively priced with other enterprise development platforms. OTI/IBM’s [[Envy]] source control system successfully built upon Smalltalk’s traditional reflective syntax and stored code in a multiuser object database. OTI also sold Envy for ParcPlace’s VisualWorks but lacked the pricing advantage of bundling. Digitalk’s Team/V unobtrusively introduced a non-reflective syntax and versioned source code using RCS. Team/V could forward and backwards migrate versions of Smalltalk “modules” within an running virtual image."
      },
      "date": 1640401336683
    },
    {
      "item": {
        "type": "factory",
        "id": "b5967af940ad41ab"
      },
      "id": "b5967af940ad41ab",
      "type": "add",
      "after": "250116e5f5890b0b",
      "date": 1640402240598
    },
    {
      "type": "edit",
      "id": "b5967af940ad41ab",
      "item": {
        "type": "markdown",
        "id": "b5967af940ad41ab",
        "text": "> **Deployment**. Smalltalk made it very difficult to deploy an application separate from the programming environment."
      },
      "date": 1640402252712
    },
    {
      "item": {
        "type": "factory",
        "id": "80cdb8a42733f4bd"
      },
      "id": "80cdb8a42733f4bd",
      "type": "add",
      "after": "b5967af940ad41ab",
      "date": 1640402267943
    },
    {
      "type": "edit",
      "id": "80cdb8a42733f4bd",
      "item": {
        "type": "paragraph",
        "id": "80cdb8a42733f4bd",
        "text": "As Gilad describes, extracting an application from its development environment could be tricky. But both Team/V and Envy included tools to help developers do this. Team/V support the deployment of applications as Digitalk Smalltalk Link Libraries (SLLs) which were separable virtual image segments that could be dynamically loaded. Envy, which originally was designed to generate ROM-based embedded applications, had rich tools for tree-shaking a deployable application from a development image."
      },
      "date": 1640402270686
    },
    {
      "item": {
        "type": "factory",
        "id": "8569943350e497b8"
      },
      "id": "8569943350e497b8",
      "type": "add",
      "after": "80cdb8a42733f4bd",
      "date": 1640402324937
    },
    {
      "type": "edit",
      "id": "8569943350e497b8",
      "item": {
        "type": "paragraph",
        "id": "8569943350e497b8",
        "text": "Gilad also mentioned that “unprotected IP” was a deployment concern that hindered Smalltalk acceptance. This is presumably because even if source code wasn’t deployed with an application it was quite easy to decompile a Smalltalk bytecoded method back into human readable source code. Indeed, potential enterprise customers would occasionally raise that as a concern. But, it was usually as a “what about” issue. Out of hundreds of enterprise customers we dealt with at Digitalk, I can’t recall a single instance where unprotected IP killed a deal. If it had been, we would have done something about this as we knew of various techniques that could be used to obfuscate Smalltalk code."
      },
      "date": 1640402326569
    },
    {
      "type": "add",
      "id": "6cb54fdaed0be29f",
      "item": {
        "type": "paragraph",
        "id": "6cb54fdaed0be29f",
        "text": "Next: [[“So why didn’t Smalltalk take over the world?”]]"
      },
      "after": "8569943350e497b8",
      "date": 1640402412990
    },
    {
      "type": "edit",
      "id": "6cb54fdaed0be29f",
      "item": {
        "type": "paragraph",
        "id": "6cb54fdaed0be29f",
        "text": "Next: [[[Why Didn’t Smalltalk Take Over]]"
      },
      "date": 1640402494493
    },
    {
      "type": "edit",
      "id": "6cb54fdaed0be29f",
      "item": {
        "type": "paragraph",
        "id": "6cb54fdaed0be29f",
        "text": "Next: [[Why Didn’t Smalltalk Take Over]]"
      },
      "date": 1640402500547
    }
  ]
}