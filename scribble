{
  "title": "Scribble",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "We scribble a line on a canvas from a [[Stream of Points]]."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nLINEUP point"
    },
    {
      "type": "paragraph",
      "id": "b8a37b6e0014e5d2",
      "text": "We need something that knows how to convert a sequence of points into graphics instructions."
    },
    {
      "type": "code",
      "id": "7474b13b85017948",
      "text": "async function drawLine(ctx, line, color) {\n  ctx.beginPath()\n  ctx.strokeStyle = color\n  ctx.lineWidth = 1\n  let first = true\n  for await (let {x, y} of line) { // knows iterators \n    first ? ctx.moveTo(x, y) : ctx.lineTo(x, y)\n    ctx.stroke()\n    first = false\n  }\n}"
    },
    {
      "type": "paragraph",
      "id": "2b83956535395893",
      "text": "We need a canvas on which to draw."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  ctx.translate(190, 150)\n  resize()\n  drawLine(ctx, line(), \"purple\")\n}"
    },
    {
      "type": "paragraph",
      "id": "82a8264d72d607c5",
      "text": "We import the Generators library."
    },
    {
      "type": "code",
      "id": "25aa1330f1af2131",
      "text": "import {Library}\n  from \"https://cdn.skypack.dev/@observablehq/stdlib@3\"\nconst {Generators} = new Library()",
      "alias": "5eb6b67568179aa3"
    },
    {
      "type": "paragraph",
      "id": "57ef99e7e9e72c99",
      "text": "We create a few helper functions."
    },
    {
      "type": "code",
      "id": "1175e36fb0ffb4cc",
      "text": "function resize() {\n  window.parent.postMessage({\n    action: \"resize\",\n    height: document.body.offsetHeight\n  }, \"*\")\n}"
    },
    {
      "type": "paragraph",
      "id": "95446a77750b9884",
      "text": "We use Generators.observe to create something to convert a stream of point events into a sequence of points."
    },
    {
      "type": "code",
      "id": "f60c71defbe486e0",
      "text": "function line() {return Generators.observe(change => {\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {point} = data\n      change(point)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Scribble",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "export async function emit(el) {\n  el.innerHTML = `<h2>Hello, World!</h2>`\n}\n\nexport async function bind(el) {\n  window.parent.postMessage({\n    action: \"resize\",\n    height: document.body.offsetHeight\n  }, \"*\")\n}"
          },
          {
            "type": "paragraph",
            "id": "caa626ac93aa7d4c",
            "text": "In the frame below we can view the results."
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html"
          },
          {
            "type": "paragraph",
            "id": "4af3e06016116216",
            "text": "See [[About Frame Plugin]]."
          },
          {
            "type": "paragraph",
            "id": "da49ee08fd0e2a07",
            "text": "See [[About Frame Integrations]]."
          }
        ]
      },
      "date": 1623805627008
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  window.parent.postMessage({\n    action: \"resize\",\n    height: document.body.offsetHeight\n  }, \"*\")\n}"
      },
      "date": 1623806019344
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nLINEUP point"
      },
      "date": 1623806033782
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html"
      },
      "date": 1623806071541
    },
    {
      "id": "b8a37b6e0014e5d2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b8a37b6e0014e5d2",
        "text": "We need something that knows how to convert a sequence of points into graphics instructions."
      },
      "after": "484e092159df2d01",
      "date": 1623806573683
    },
    {
      "id": "7474b13b85017948",
      "type": "add",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "async function drawLine(ctx, line, color) {\n  ctx.beginPath()\n  ctx.strokeStyle = color\n  ctx.lineWidth = 1\n  let first = true\n  for await (let {x, y} of line) { // knows iterators \n    first ? ctx.moveTo(x, y) : ctx.lineTo(x, y)\n    ctx.stroke()\n    first = false\n  }\n}"
      },
      "after": "b8a37b6e0014e5d2",
      "date": 1623806576889
    },
    {
      "id": "2b83956535395893",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a canvas on which to draw."
      },
      "after": "7474b13b85017948",
      "date": 1623806590116
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We scribble a line on a canvas from a [[Stream of Points]]."
      },
      "date": 1623806643068
    },
    {
      "id": "57ef99e7e9e72c99",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "57ef99e7e9e72c99",
        "text": "We create a few helper functions."
      },
      "after": "5eb6b67568179aa3",
      "date": 1623806856582
    },
    {
      "id": "1175e36fb0ffb4cc",
      "type": "add",
      "item": {
        "type": "code",
        "id": "1175e36fb0ffb4cc",
        "text": "function resize() {\n  window.parent.postMessage({\n    action: \"resize\",\n    height: document.body.offsetHeight\n  }, \"*\")\n}"
      },
      "after": "57ef99e7e9e72c99",
      "date": 1623806862822
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  resize()\n}"
      },
      "date": 1623806876909
    },
    {
      "id": "82a8264d72d607c5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "82a8264d72d607c5",
        "text": "We import the Generators library."
      },
      "after": "5eb6b67568179aa3",
      "date": 1623807013018
    },
    {
      "id": "25aa1330f1af2131",
      "type": "add",
      "item": {
        "type": "code",
        "id": "25aa1330f1af2131",
        "text": "import {Library}\n  from \"https://cdn.skypack.dev/@observablehq/stdlib@3\"\nconst {Generators} = new Library()",
        "alias": "5eb6b67568179aa3"
      },
      "after": "82a8264d72d607c5",
      "date": 1623807016139
    },
    {
      "id": "95446a77750b9884",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "95446a77750b9884",
        "text": "We use Generators.observe to create something to convert a stream of pointer events on the canvas into a sequence of points."
      },
      "after": "1175e36fb0ffb4cc",
      "date": 1623807029739
    },
    {
      "type": "edit",
      "id": "95446a77750b9884",
      "item": {
        "type": "paragraph",
        "id": "95446a77750b9884",
        "text": "We use Generators.observe to create something to convert a stream of point events into a sequence of points."
      },
      "date": 1623807050925
    },
    {
      "id": "f60c71defbe486e0",
      "type": "add",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    ctx.moveTo(event.offsetX, event.offsetY)\n    canvas.addEventListener(\"pointerup\", dragend)\n    canvas.addEventListener(\"pointermove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"pointerup\", dragend)\n    canvas.removeEventListener(\"pointermove\", point)\n  }\n  canvas.addEventListener(\"pointerdown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"pointerdown\", dragstart)\n  }\n})"
      },
      "after": "95446a77750b9884",
      "date": 1623807068096
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {point} = data\n      change(point)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})\n"
      },
      "date": 1623807337912
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  resize()\n}"
      },
      "date": 1623807459720
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "function line() {return Generators.observe(change => {\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {point} = data\n      change(point)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})}"
      },
      "date": 1623807589083
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  resize()\n  drawLine(ctx, line(), \"purple\")\n}"
      },
      "date": 1623807663528
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nLINEUP point"
      },
      "date": 1623807688635
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  ctx.translate(-190, -150)\n  resize()\n  drawLine(ctx, line(), \"purple\")\n}"
      },
      "date": 1623807814751
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  ctx.translate(190, 150)\n  resize()\n  drawLine(ctx, line(), \"purple\")\n}"
      },
      "date": 1623807839093
    },
    {
      "id": "6cf52409eec3988c",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "6cf52409eec3988c",
        "b8a37b6e0014e5d2",
        "7474b13b85017948",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "82a8264d72d607c5",
        "25aa1330f1af2131",
        "57ef99e7e9e72c99",
        "1175e36fb0ffb4cc",
        "95446a77750b9884",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "4af3e06016116216",
        "da49ee08fd0e2a07"
      ],
      "date": 1623862992481
    },
    {
      "type": "remove",
      "id": "caa626ac93aa7d4c",
      "date": 1623863000552
    },
    {
      "type": "remove",
      "id": "da49ee08fd0e2a07",
      "date": 1623863003072
    },
    {
      "type": "remove",
      "id": "4af3e06016116216",
      "date": 1623863004276
    },
    {
      "type": "fork",
      "site": "frame.wiki.dbbs.co",
      "date": 1707599516023
    }
  ]
}