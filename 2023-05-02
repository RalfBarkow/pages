{
  "title": "2023-05-02",
  "story": [
    {
      "type": "paragraph",
      "id": "d5a63d8aa699f8c2",
      "text": "⇒ [[Glamorous Toolkit]] v0.8.2746 beta released on May 1 11:37 ⇒ [[Dynabook]] [https://github.com/seandenigris/Dynabook github]"
    },
    {
      "type": "code",
      "id": "142e4bb5782ac662",
      "text": "[\nEpMonitor current disable.\n[ Metacello new\n\tbaseline: 'Dynabook';\n\trepository: 'github://seandenigris/Dynabook';\n\t\"onConflict: [ :ex | ex allow ];\"\n\tload ] ensure: [ EpMonitor current enable ].\n\n] fork.\n"
    },
    {
      "type": "paragraph",
      "id": "f7389d492198ec5c",
      "text": "[[Sean DeNigris]] would recommend starting with a new image and restoring using the fuel patch. Afterwards, spot check the address book to make sure you still see contacts, same with event participants if you have any in your model - make sure those collections still contain items. [https://discord.com/channels/@me/869566842807652453/1101869458097721386 discord], [https://github.com/seandenigris/My-People/commit/92079d8346d682d824fc457cb1ffa07ca81d60b5 github]"
    },
    {
      "type": "code",
      "id": "c894515ac01e7af2",
      "text": "SpFuel4dotOneStrategy>>#materializeFrom: aFileReference\n\t| materialization |\n\tmaterialization := FLMaterializer new\n\t\t\tfilePath: aFileReference fullName;\n\t\t\tmigrateClassNamed: #MpAddressBook\n\t\t\t\tvariables: {'contacts' -> 'privateContacts'} asDictionary;\n\t\t\tmigrateClassNamed: #MpEntityCollection\n\t\t\t\tvariables: {'contacts' -> 'privateContacts'} asDictionary;\n\t\t\tmaterialize.\n\n\t^ materialization root"
    },
    {
      "type": "paragraph",
      "id": "27d2b1037e3dfc19",
      "text": "a ReTrivialCritique ([materialize] Messages sent but not implemented)"
    },
    {
      "type": "paragraph",
      "id": "58b2516f37cfcb26",
      "text": "Checks for messages that are sent by a method, but no class in the system implements such a message. Reported methods will certainly cause a doesNotUnderstand: message when they are executed."
    },
    {
      "type": "paragraph",
      "id": "ef82799aaccf8bae",
      "text": "a ReRefactoringCritique ([superclass categorizes as: accessing] Inconsistent method classification)"
    },
    {
      "type": "paragraph",
      "id": "ac7e45c83cc36897",
      "text": "This smell arises when a method protocol is not equivalent to the one defined in the superclass of such method class. All methods should be put into a protocol (method category) that is equivalent to the one of the superclass, which is a standard style in Pharo. Furthermore, methods which are extended in the superclass are ignored, since they may have different protocol name. Pay attention when you apply automatic recategorisation because it may move method in antoher package if the method is defined in the superclass as an extension.\n\n"
    },
    {
      "type": "paragraph",
      "id": "2eccc860b10e5ed3",
      "text": "⇒ [[Magritte]]"
    },
    {
      "type": "paragraph",
      "id": "3959e67ccf258092",
      "text": "Restore Last Backup"
    },
    {
      "type": "paragraph",
      "id": "e26fce8d9690a1e0",
      "text": "a MAActionDescription label: 'Restore Last Backup' comment: ''"
    },
    {
      "type": "paragraph",
      "id": "9ce2cbc8ceec9440",
      "text": "Fuel, the Smalltalk object serializer [https://github.com/theseion/Fuel github], [https://theseion.github.io/Fuel/ page]"
    },
    {
      "type": "code",
      "id": "4685d06bfd99b10d",
      "text": "Metacello new\n    repository: 'github://theseion/Fuel:5.1.0/repository';\n    baseline: 'Fuel';\n    load."
    },
    {
      "type": "paragraph",
      "id": "272f097a92e35612",
      "text": "⇒ [[Fuel]] [https://github.com/theseion/Fuel github]"
    },
    {
      "type": "code",
      "id": "d8cb495070f04307",
      "text": "fuelPreLoad\n    \"Needed for Fuel 5.1.0 to load cleanly (at least on GT)\"\n\n    | fuelPackages |\n    fuelPackages := RPackage organizer packages\n            select: [ :e | e name beginsWith: 'Fuel-' ].\n    fuelPackages do: #removeFromSystem"
    },
    {
      "type": "code",
      "id": "0ea0b7db2d06e01c",
      "text": "Metacello new\n    repository: 'github://theseion/Fuel:5.1.0/repository';\n    baseline: 'Fuel';\n    load."
    },
    {
      "type": "pagefold",
      "id": "0231a4ef734efb54",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "b67dcaa32e661c4d",
      "site": "goals.pod.rodwell.me",
      "slug": "wiki-update---april-2023",
      "title": "Wiki Update - April 2023",
      "text": "Slightly later than intended, here is the April 2023 update. This update sees a long overdue update to some of the internals of wiki, with an update to the versions of both jQuery and D3 libraries."
    },
    {
      "type": "pagefold",
      "id": "5705302d54daf063",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "edba30d17dc3fa5a",
      "text": "⇒ [[Fuel]] [https://github.com/theseion/Fuel#description github]: Description"
    },
    {
      "type": "paragraph",
      "id": "ad69c11794611adf",
      "text": "A general-purpose object serialization framework developed in Pharo. Fuel is developed under the MIT license.\nConcrete\n\nWe don't aspire to have a dialect-interchange format. This enables us to serialize special objects like contexts, block closures, exceptions, compiled methods and classes. Although there are ports to other dialects, Fuel development is Pharo-centric.\nFlexible\n\nDepending on the context, there could be multiple ways of serializing the same object. For example, a class can be considered either a global or a regular object. In the former case, it will be encoded just its name; in the latter case, the class will be encoded in detail, with its method dictionary, etc.\nFast\n\nWe worry about to have the best performance. We developed a complete benchmark suite to help analyse the performance with diverse sample sets, as well as compare against other serializers. Our pickling algorithm allows outstanding materialization performance, as well as very good serialization performance too.\nObject-Oriented Design\n\nFrom the beginning it was a constraint to have a good object-oriented design and to do not need any special support from the VM. In addition, Fuel has a complete test suite, with a high coverage. We also worry about writing comments on classes and methods."
    },
    {
      "type": "pagefold",
      "id": "accc29f82552bbc2",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "748b79e9b60f5329",
      "text": "\nSILVA, Luciana L., VALENTE, Marco Tulio, DE A. MAIA, Marcelo and ANQUETIL, Nicolas, 2015. Developers’ perception of co-change patterns: An empirical study. In: 2015 IEEE International Conference on Software Maintenance and Evolution (ICSME). September 2015. p. 21–30. DOI 10.1109/ICSM.2015.7332448. Co-change clusters are groups of classes that frequently change together. They are proposed as an alternative modular view, which can be used to assess the traditional decomposition of systems in packages. To investigate developer’s perception of co-change clusters, we report in this paper a study with experts on six systems, implemented in two languages. We mine 102 co-change clusters from the version history of such systems, which are classified in three patterns regarding their projection to the package structure: Encapsulated, Crosscutting, and Octopus. We then collect the perception of expert developers on such clusters, aiming to ask two central questions: (a) what concerns and changes are captured by the extracted clusters? (b) do the extracted clusters reveal design anomalies? We conclude that Encapsulated Clusters are often viewed as healthy designs and that Crosscutting Clusters tend to be associated to design anomalies. Octopus Clusters are normally associated to expected class distributions, which are not easy to implement in an encapsulated way, according to the interviewed developers.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-05-02",
        "story": []
      },
      "date": 1683005952676
    },
    {
      "item": {
        "type": "factory",
        "id": "d5a63d8aa699f8c2"
      },
      "id": "d5a63d8aa699f8c2",
      "type": "add",
      "date": 1683005953846
    },
    {
      "type": "edit",
      "id": "d5a63d8aa699f8c2",
      "item": {
        "type": "paragraph",
        "id": "d5a63d8aa699f8c2",
        "text": "⇒ [[]]"
      },
      "date": 1683005965752
    },
    {
      "type": "edit",
      "id": "d5a63d8aa699f8c2",
      "item": {
        "type": "paragraph",
        "id": "d5a63d8aa699f8c2",
        "text": "⇒ [[]] v0.8.2746 beta released on May 1 11:37"
      },
      "date": 1683005980328
    },
    {
      "type": "edit",
      "id": "d5a63d8aa699f8c2",
      "item": {
        "type": "paragraph",
        "id": "d5a63d8aa699f8c2",
        "text": "⇒ [[Glamorous Toolkit]] v0.8.2746 beta released on May 1 11:37"
      },
      "date": 1683005991821
    },
    {
      "item": {
        "type": "factory",
        "id": "142e4bb5782ac662"
      },
      "id": "142e4bb5782ac662",
      "type": "add",
      "after": "d5a63d8aa699f8c2",
      "date": 1683006047168
    },
    {
      "type": "edit",
      "id": "142e4bb5782ac662",
      "item": {
        "type": "code",
        "id": "142e4bb5782ac662",
        "text": "[\nEpMonitor current disable.\n[ Metacello new\n\tbaseline: 'Dynabook';\n\trepository: 'github://seandenigris/Dynabook';\n\t\"onConflict: [ :ex | ex allow ];\"\n\tload ] ensure: [ EpMonitor current enable ].\n\n] fork.\n"
      },
      "date": 1683006049198
    },
    {
      "type": "edit",
      "id": "d5a63d8aa699f8c2",
      "item": {
        "type": "paragraph",
        "id": "d5a63d8aa699f8c2",
        "text": "⇒ [[Glamorous Toolkit]] v0.8.2746 beta released on May 1 11:37 ⇒ [[Dynabook]]"
      },
      "date": 1683006068197
    },
    {
      "type": "edit",
      "id": "d5a63d8aa699f8c2",
      "item": {
        "type": "paragraph",
        "id": "d5a63d8aa699f8c2",
        "text": "⇒ [[Glamorous Toolkit]] v0.8.2746 beta released on May 1 11:37 ⇒ [[Dynabook]] [https://github.com/seandenigris/Dynabook github]"
      },
      "date": 1683006113023
    },
    {
      "item": {
        "type": "factory",
        "id": "f7389d492198ec5c"
      },
      "id": "f7389d492198ec5c",
      "type": "add",
      "after": "142e4bb5782ac662",
      "date": 1683006804334
    },
    {
      "type": "edit",
      "id": "f7389d492198ec5c",
      "item": {
        "type": "paragraph",
        "id": "f7389d492198ec5c",
        "text": "[[Sean DeNigris]] would recommend starting with a new image and restoring using the fuel patch. Afterwards, spot check the address book to make sure you still see contacts, same with event participants if you have any in your model - make sure those collections still contain items"
      },
      "date": 1683006819663
    },
    {
      "type": "edit",
      "id": "f7389d492198ec5c",
      "item": {
        "type": "paragraph",
        "id": "f7389d492198ec5c",
        "text": "[[Sean DeNigris]] would recommend starting with a new image and restoring using the fuel patch. Afterwards, spot check the address book to make sure you still see contacts, same with event participants if you have any in your model - make sure those collections still contain items. [https://discord.com/channels/@me/869566842807652453/1101869458097721386 discord]"
      },
      "date": 1683006838252
    },
    {
      "type": "edit",
      "id": "f7389d492198ec5c",
      "item": {
        "type": "paragraph",
        "id": "f7389d492198ec5c",
        "text": "[[Sean DeNigris]] would recommend starting with a new image and restoring using the fuel patch. Afterwards, spot check the address book to make sure you still see contacts, same with event participants if you have any in your model - make sure those collections still contain items. [https://discord.com/channels/@me/869566842807652453/1101869458097721386 discord], [https://github.com/seandenigris/My-People/commit/92079d8346d682d824fc457cb1ffa07ca81d60b5 github]"
      },
      "date": 1683006876656
    },
    {
      "item": {
        "type": "factory",
        "id": "c894515ac01e7af2"
      },
      "id": "c894515ac01e7af2",
      "type": "add",
      "after": "f7389d492198ec5c",
      "date": 1683006890332
    },
    {
      "type": "edit",
      "id": "c894515ac01e7af2",
      "item": {
        "type": "code",
        "id": "c894515ac01e7af2",
        "text": "\n```smalltalk\nSpFuel4dotOneStrategy>>#materializeFrom: aFileReference\n\n\t| materialization |\n\tmaterialization := FLMaterializer new\n\t\tfilePath: aFileReference fullName;\n\t\tmigrateClassNamed: #MpAddressBook\n\t\t\tvariables: {'contacts' -> 'privateContacts'} asDictionary;\n\t\tmigrateClassNamed: #MpEntityCollection\n\t\t\tvariables: {'contacts' -> 'privateContacts'} asDictionary;\n\t\tmaterialize.\n\t\t\n\t^ materialization root\n```"
      },
      "date": 1683006892321
    },
    {
      "type": "edit",
      "id": "c894515ac01e7af2",
      "item": {
        "type": "code",
        "id": "c894515ac01e7af2",
        "text": "SpFuel4dotOneStrategy>>#materializeFrom: aFileReference\n\n\t| materialization |\n\tmaterialization := FLMaterializer new\n\t\tfilePath: aFileReference fullName;\n\t\tmigrateClassNamed: #MpAddressBook\n\t\t\tvariables: {'contacts' -> 'privateContacts'} asDictionary;\n\t\tmigrateClassNamed: #MpEntityCollection\n\t\t\tvariables: {'contacts' -> 'privateContacts'} asDictionary;\n\t\tmaterialize.\n\t\t\n\t^ materialization root"
      },
      "date": 1683006905301
    },
    {
      "type": "edit",
      "id": "c894515ac01e7af2",
      "item": {
        "type": "code",
        "id": "c894515ac01e7af2",
        "text": "SpFuel4dotOneStrategy>>#materializeFrom: aFileReference\n\t| materialization |\n\tmaterialization := FLMaterializer new\n\t\t\tfilePath: aFileReference fullName;\n\t\t\tmigrateClassNamed: #MpAddressBook\n\t\t\t\tvariables: {'contacts' -> 'privateContacts'} asDictionary;\n\t\t\tmigrateClassNamed: #MpEntityCollection\n\t\t\t\tvariables: {'contacts' -> 'privateContacts'} asDictionary;\n\t\t\tmaterialize.\n\n\t^ materialization root"
      },
      "date": 1683007086358
    },
    {
      "item": {
        "type": "factory",
        "id": "58b2516f37cfcb26"
      },
      "id": "58b2516f37cfcb26",
      "type": "add",
      "after": "c894515ac01e7af2",
      "date": 1683007257987
    },
    {
      "type": "edit",
      "id": "58b2516f37cfcb26",
      "item": {
        "type": "paragraph",
        "id": "58b2516f37cfcb26",
        "text": "Checks for messages that are sent by a method, but no class in the system implements such a message. Reported methods will certainly cause a doesNotUnderstand: message when they are executed."
      },
      "date": 1683007259825
    },
    {
      "item": {
        "type": "factory",
        "id": "27d2b1037e3dfc19"
      },
      "id": "27d2b1037e3dfc19",
      "type": "add",
      "after": "58b2516f37cfcb26",
      "date": 1683007331960
    },
    {
      "id": "27d2b1037e3dfc19",
      "type": "move",
      "order": [
        "d5a63d8aa699f8c2",
        "142e4bb5782ac662",
        "f7389d492198ec5c",
        "c894515ac01e7af2",
        "27d2b1037e3dfc19",
        "58b2516f37cfcb26"
      ],
      "date": 1683007333693
    },
    {
      "type": "edit",
      "id": "27d2b1037e3dfc19",
      "item": {
        "type": "paragraph",
        "id": "27d2b1037e3dfc19",
        "text": "a ReTrivialCritique ([materialize] Messages sent but not implemented)"
      },
      "date": 1683007334974
    },
    {
      "item": {
        "type": "factory",
        "id": "ef82799aaccf8bae"
      },
      "id": "ef82799aaccf8bae",
      "type": "add",
      "after": "58b2516f37cfcb26",
      "date": 1683007932378
    },
    {
      "type": "edit",
      "id": "ef82799aaccf8bae",
      "item": {
        "type": "paragraph",
        "id": "ef82799aaccf8bae",
        "text": "a ReRefactoringCritique ([superclass categorizes as: accessing] Inconsistent method classification)"
      },
      "date": 1683007934700
    },
    {
      "item": {
        "type": "factory",
        "id": "ac7e45c83cc36897"
      },
      "id": "ac7e45c83cc36897",
      "type": "add",
      "after": "ef82799aaccf8bae",
      "date": 1683007944363
    },
    {
      "type": "edit",
      "id": "ac7e45c83cc36897",
      "item": {
        "type": "paragraph",
        "id": "ac7e45c83cc36897",
        "text": "This smell arises when a method protocol is not equivalent to the one defined in the superclass of such method class. All methods should be put into a protocol (method category) that is equivalent to the one of the superclass, which is a standard style in Pharo. Furthermore, methods which are extended in the superclass are ignored, since they may have different protocol name. Pay attention when you apply automatic recategorisation because it may move method in antoher package if the method is defined in the superclass as an extension.\n\n"
      },
      "date": 1683007946040
    },
    {
      "item": {
        "type": "factory",
        "id": "2eccc860b10e5ed3"
      },
      "id": "2eccc860b10e5ed3",
      "type": "add",
      "after": "ac7e45c83cc36897",
      "date": 1683014225776
    },
    {
      "type": "edit",
      "id": "2eccc860b10e5ed3",
      "item": {
        "type": "paragraph",
        "id": "2eccc860b10e5ed3",
        "text": "[[Magritte]]"
      },
      "date": 1683014230717
    },
    {
      "type": "edit",
      "id": "2eccc860b10e5ed3",
      "item": {
        "type": "paragraph",
        "id": "2eccc860b10e5ed3",
        "text": "⇒ [[Magritte]]"
      },
      "date": 1683014244649
    },
    {
      "item": {
        "type": "factory",
        "id": "3959e67ccf258092"
      },
      "id": "3959e67ccf258092",
      "type": "add",
      "after": "2eccc860b10e5ed3",
      "date": 1683014257728
    },
    {
      "type": "edit",
      "id": "3959e67ccf258092",
      "item": {
        "type": "paragraph",
        "id": "3959e67ccf258092",
        "text": "Restore Last Backup"
      },
      "date": 1683014260599
    },
    {
      "item": {
        "type": "factory",
        "id": "e26fce8d9690a1e0"
      },
      "id": "e26fce8d9690a1e0",
      "type": "add",
      "after": "3959e67ccf258092",
      "date": 1683014333427
    },
    {
      "type": "edit",
      "id": "e26fce8d9690a1e0",
      "item": {
        "type": "paragraph",
        "id": "e26fce8d9690a1e0",
        "text": "a MAActionDescription label: 'Restore Last Backup' comment: ''"
      },
      "date": 1683014341119
    },
    {
      "item": {
        "type": "factory",
        "id": "4685d06bfd99b10d"
      },
      "id": "4685d06bfd99b10d",
      "type": "add",
      "after": "e26fce8d9690a1e0",
      "date": 1683023216021
    },
    {
      "type": "edit",
      "id": "4685d06bfd99b10d",
      "item": {
        "type": "code",
        "id": "4685d06bfd99b10d",
        "text": "Metacello new\n    repository: 'github://theseion/Fuel:5.1.0/repository';\n    baseline: 'Fuel';\n    load."
      },
      "date": 1683023219340
    },
    {
      "item": {
        "type": "factory",
        "id": "9ce2cbc8ceec9440"
      },
      "id": "9ce2cbc8ceec9440",
      "type": "add",
      "after": "4685d06bfd99b10d",
      "date": 1683023228840
    },
    {
      "id": "9ce2cbc8ceec9440",
      "type": "move",
      "order": [
        "d5a63d8aa699f8c2",
        "142e4bb5782ac662",
        "f7389d492198ec5c",
        "c894515ac01e7af2",
        "27d2b1037e3dfc19",
        "58b2516f37cfcb26",
        "ef82799aaccf8bae",
        "ac7e45c83cc36897",
        "2eccc860b10e5ed3",
        "3959e67ccf258092",
        "e26fce8d9690a1e0",
        "9ce2cbc8ceec9440",
        "4685d06bfd99b10d"
      ],
      "date": 1683023230555
    },
    {
      "type": "edit",
      "id": "9ce2cbc8ceec9440",
      "item": {
        "type": "paragraph",
        "id": "9ce2cbc8ceec9440",
        "text": "Fuel, the Smalltalk object serializer "
      },
      "date": 1683023235053
    },
    {
      "type": "edit",
      "id": "9ce2cbc8ceec9440",
      "item": {
        "type": "paragraph",
        "id": "9ce2cbc8ceec9440",
        "text": "Fuel, the Smalltalk object serializer [https://github.com/theseion/Fuel github]"
      },
      "date": 1683023250227
    },
    {
      "type": "edit",
      "id": "9ce2cbc8ceec9440",
      "item": {
        "type": "paragraph",
        "id": "9ce2cbc8ceec9440",
        "text": "Fuel, the Smalltalk object serializer [https://github.com/theseion/Fuel github], [https://theseion.github.io/Fuel/ page]"
      },
      "date": 1683023270266
    },
    {
      "item": {
        "type": "factory",
        "id": "272f097a92e35612"
      },
      "id": "272f097a92e35612",
      "type": "add",
      "after": "4685d06bfd99b10d",
      "date": 1683042327142
    },
    {
      "type": "edit",
      "id": "272f097a92e35612",
      "item": {
        "type": "paragraph",
        "id": "272f097a92e35612",
        "text": "[[Fuel]]"
      },
      "date": 1683042334464
    },
    {
      "type": "edit",
      "id": "272f097a92e35612",
      "item": {
        "type": "paragraph",
        "id": "272f097a92e35612",
        "text": "⇒ [[Fuel]]"
      },
      "date": 1683042340030
    },
    {
      "type": "edit",
      "id": "272f097a92e35612",
      "item": {
        "type": "paragraph",
        "id": "272f097a92e35612",
        "text": "⇒ [[Fuel]] [https://github.com/theseion/Fuel github]"
      },
      "date": 1683042384454
    },
    {
      "item": {
        "type": "factory",
        "id": "0ea0b7db2d06e01c"
      },
      "id": "0ea0b7db2d06e01c",
      "type": "add",
      "after": "272f097a92e35612",
      "date": 1683042559532
    },
    {
      "type": "edit",
      "id": "0ea0b7db2d06e01c",
      "item": {
        "type": "code",
        "id": "0ea0b7db2d06e01c",
        "text": "Metacello new\n    repository: 'github://theseion/Fuel:5.1.0/repository';\n    baseline: 'Fuel';\n    load."
      },
      "date": 1683042565875
    },
    {
      "item": {
        "type": "factory",
        "id": "d8cb495070f04307"
      },
      "id": "d8cb495070f04307",
      "type": "add",
      "after": "0ea0b7db2d06e01c",
      "date": 1683042576708
    },
    {
      "type": "edit",
      "id": "d8cb495070f04307",
      "item": {
        "type": "code",
        "id": "d8cb495070f04307",
        "text": "fuelPreLoad\n    \"Needed for Fuel 5.1.0 to load cleanly (at least on GT)\"\n\n    | fuelPackages |\n    fuelPackages := RPackage organizer packages\n            select: [ :e | e name beginsWith: 'Fuel-' ].\n    fuelPackages do: #removeFromSystem"
      },
      "date": 1683042578587
    },
    {
      "id": "d8cb495070f04307",
      "type": "move",
      "order": [
        "d5a63d8aa699f8c2",
        "142e4bb5782ac662",
        "f7389d492198ec5c",
        "c894515ac01e7af2",
        "27d2b1037e3dfc19",
        "58b2516f37cfcb26",
        "ef82799aaccf8bae",
        "ac7e45c83cc36897",
        "2eccc860b10e5ed3",
        "3959e67ccf258092",
        "e26fce8d9690a1e0",
        "9ce2cbc8ceec9440",
        "4685d06bfd99b10d",
        "272f097a92e35612",
        "d8cb495070f04307",
        "0ea0b7db2d06e01c"
      ],
      "date": 1683042579998
    },
    {
      "item": {
        "type": "factory",
        "id": "0231a4ef734efb54"
      },
      "id": "0231a4ef734efb54",
      "type": "add",
      "after": "0ea0b7db2d06e01c",
      "date": 1683048025659
    },
    {
      "type": "edit",
      "id": "0231a4ef734efb54",
      "item": {
        "type": "pagefold",
        "id": "0231a4ef734efb54",
        "text": "~"
      },
      "date": 1683048029317
    },
    {
      "item": {
        "type": "factory",
        "id": "b67dcaa32e661c4d"
      },
      "id": "b67dcaa32e661c4d",
      "type": "add",
      "after": "0231a4ef734efb54",
      "date": 1683048031992
    },
    {
      "type": "edit",
      "id": "b67dcaa32e661c4d",
      "item": {
        "type": "reference",
        "id": "b67dcaa32e661c4d",
        "site": "goals.pod.rodwell.me",
        "slug": "wiki-update---april-2023",
        "title": "Wiki Update - April 2023",
        "text": "Slightly later than intended, here is the April 2023 update. This update sees a long overdue update to some of the internals of wiki, with an update to the versions of both jQuery and D3 libraries."
      },
      "date": 1683048037001
    },
    {
      "item": {
        "type": "factory",
        "id": "5705302d54daf063"
      },
      "id": "5705302d54daf063",
      "type": "add",
      "after": "b67dcaa32e661c4d",
      "date": 1683066795428
    },
    {
      "type": "edit",
      "id": "5705302d54daf063",
      "item": {
        "type": "pagefold",
        "id": "5705302d54daf063",
        "text": "~"
      },
      "date": 1683066799661
    },
    {
      "item": {
        "type": "factory",
        "id": "edba30d17dc3fa5a"
      },
      "id": "edba30d17dc3fa5a",
      "type": "add",
      "after": "5705302d54daf063",
      "date": 1683066809251
    },
    {
      "type": "edit",
      "id": "edba30d17dc3fa5a",
      "item": {
        "type": "paragraph",
        "id": "edba30d17dc3fa5a",
        "text": "Description"
      },
      "date": 1683066812381
    },
    {
      "type": "edit",
      "id": "edba30d17dc3fa5a",
      "item": {
        "type": "paragraph",
        "id": "edba30d17dc3fa5a",
        "text": "⇒ [[Fuel]] [https://github.com/theseion/Fuel github]: Description"
      },
      "date": 1683066820698
    },
    {
      "type": "edit",
      "id": "edba30d17dc3fa5a",
      "item": {
        "type": "paragraph",
        "id": "edba30d17dc3fa5a",
        "text": "⇒ [[Fuel]] [https://github.com/theseion/Fuel#description github]: Description"
      },
      "date": 1683066843686
    },
    {
      "item": {
        "type": "factory",
        "id": "ad69c11794611adf"
      },
      "id": "ad69c11794611adf",
      "type": "add",
      "after": "edba30d17dc3fa5a",
      "date": 1683066861679
    },
    {
      "type": "edit",
      "id": "ad69c11794611adf",
      "item": {
        "type": "paragraph",
        "id": "ad69c11794611adf",
        "text": "A general-purpose object serialization framework developed in Pharo. Fuel is developed under the MIT license.\nConcrete\n\nWe don't aspire to have a dialect-interchange format. This enables us to serialize special objects like contexts, block closures, exceptions, compiled methods and classes. Although there are ports to other dialects, Fuel development is Pharo-centric.\nFlexible\n\nDepending on the context, there could be multiple ways of serializing the same object. For example, a class can be considered either a global or a regular object. In the former case, it will be encoded just its name; in the latter case, the class will be encoded in detail, with its method dictionary, etc.\nFast\n\nWe worry about to have the best performance. We developed a complete benchmark suite to help analyse the performance with diverse sample sets, as well as compare against other serializers. Our pickling algorithm allows outstanding materialization performance, as well as very good serialization performance too.\nObject-Oriented Design\n\nFrom the beginning it was a constraint to have a good object-oriented design and to do not need any special support from the VM. In addition, Fuel has a complete test suite, with a high coverage. We also worry about writing comments on classes and methods."
      },
      "date": 1683066863441
    },
    {
      "item": {
        "type": "factory",
        "id": "748b79e9b60f5329"
      },
      "id": "748b79e9b60f5329",
      "type": "add",
      "after": "ad69c11794611adf",
      "date": 1683067159606
    },
    {
      "type": "edit",
      "id": "748b79e9b60f5329",
      "item": {
        "type": "paragraph",
        "id": "748b79e9b60f5329",
        "text": "\nSILVA, Luciana L., VALENTE, Marco Tulio, DE A. MAIA, Marcelo and ANQUETIL, Nicolas, 2015. Developers’ perception of co-change patterns: An empirical study. In: 2015 IEEE International Conference on Software Maintenance and Evolution (ICSME). September 2015. p. 21–30. DOI 10.1109/ICSM.2015.7332448. Co-change clusters are groups of classes that frequently change together. They are proposed as an alternative modular view, which can be used to assess the traditional decomposition of systems in packages. To investigate developer’s perception of co-change clusters, we report in this paper a study with experts on six systems, implemented in two languages. We mine 102 co-change clusters from the version history of such systems, which are classified in three patterns regarding their projection to the package structure: Encapsulated, Crosscutting, and Octopus. We then collect the perception of expert developers on such clusters, aiming to ask two central questions: (a) what concerns and changes are captured by the extracted clusters? (b) do the extracted clusters reveal design anomalies? We conclude that Encapsulated Clusters are often viewed as healthy designs and that Crosscutting Clusters tend to be associated to design anomalies. Octopus Clusters are normally associated to expected class distributions, which are not easy to implement in an encapsulated way, according to the interviewed developers.\n"
      },
      "date": 1683067161391
    },
    {
      "item": {
        "type": "factory",
        "id": "accc29f82552bbc2"
      },
      "id": "accc29f82552bbc2",
      "type": "add",
      "after": "748b79e9b60f5329",
      "date": 1683067174486
    },
    {
      "type": "edit",
      "id": "accc29f82552bbc2",
      "item": {
        "type": "pagefold",
        "id": "accc29f82552bbc2",
        "text": "~"
      },
      "date": 1683067177646
    },
    {
      "id": "accc29f82552bbc2",
      "type": "move",
      "order": [
        "d5a63d8aa699f8c2",
        "142e4bb5782ac662",
        "f7389d492198ec5c",
        "c894515ac01e7af2",
        "27d2b1037e3dfc19",
        "58b2516f37cfcb26",
        "ef82799aaccf8bae",
        "ac7e45c83cc36897",
        "2eccc860b10e5ed3",
        "3959e67ccf258092",
        "e26fce8d9690a1e0",
        "9ce2cbc8ceec9440",
        "4685d06bfd99b10d",
        "272f097a92e35612",
        "d8cb495070f04307",
        "0ea0b7db2d06e01c",
        "0231a4ef734efb54",
        "b67dcaa32e661c4d",
        "5705302d54daf063",
        "edba30d17dc3fa5a",
        "ad69c11794611adf",
        "accc29f82552bbc2",
        "748b79e9b60f5329"
      ],
      "date": 1683067181459
    }
  ]
}