{
  "title": "Decorator Pattern",
  "story": [
    {
      "type": "html",
      "text": "<b>Intent:</b> Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality. ",
      "id": "865af77bb81443564e169d2a3c0db5b0"
    },
    {
      "type": "html",
      "text": "<i>While reading the [[Gang Of Four]] book on CD I noticed that the original name of this pattern was \"Wrapper\". -- [[Dave Mitchell]]</i>",
      "id": "f4cfbae187561ae9da86eccd1d2f581b"
    },
    {
      "type": "html",
      "text": "<b>See also:</b> [[Composite Pattern]], [[Proxy Pattern]], [[Design Patterns]]",
      "id": "686b6aac8b7185bc520070fb9ba726b3"
    },
    {
      "type": "html",
      "text": "\nThis pattern was also called <i>shadowing</i> in LPC.",
      "id": "6f48869ad250dd67433f326aab9f6d76"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": " [http://www.patnys.com/archive/2008/04/21/decorator-pattern.aspx www.patnys.com]",
      "id": "4086edd73b356bd5a1d81b9314e05e6b"
    },
    {
      "type": "html",
      "text": " [http://home.earthlink.net/~huston2/dp/decorator.html home.earthlink.net]",
      "id": "01bec8b6df8ba6a948886788a87ec0db"
    },
    {
      "type": "html",
      "text": " [http://wiki.cs.uiuc.edu/patternStories/DecoratorPattern wiki.cs.uiuc.edu]",
      "id": "e50cc422f3856afaaf436cdf57c989a7"
    },
    {
      "type": "html",
      "text": " [http://perldesignpatterns.com/?word=decorator+pattern perldesignpatterns.com]",
      "id": "100178ca1ac5d48a590c53e6aa327b69"
    },
    {
      "type": "html",
      "text": " [http://www.dofactory.com/Patterns/PatternDecorator.aspx www.dofactory.com]",
      "id": "eae40410a61afeb130fde1dcd4824ba6"
    },
    {
      "type": "html",
      "text": " [http://www.lukeredpath.co.uk/2006/9/6/decorator-pattern-with-ruby-in-8-lines www.lukeredpath.co.uk]",
      "id": "c046e5aebbdbb7e6d95a48ba8d2a3ed8"
    },
    {
      "type": "html",
      "text": " [http://delphipatterns.blog.com/2011/02/22/decorator-5/ delphipatterns.blog.com]",
      "id": "27aacf62e46b157b454039aa19dc8cdb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\nThis pattern can also be used as a way to refactor a complex class into smaller pieces.  Even if you don't need to attach responsibilities dynamically it can be clearer to have each responsibility in a different class.  Somewhat like [[Mix In]]s. -- [[Christian Taubman]]",
      "id": "dbe8e8be30c1402347e9c8258a1ea7fe"
    },
    {
      "type": "html",
      "text": "\nAlso see [[Aspect Oriented Programming]]",
      "id": "ecb92bed449a3522d3c695bfee7c87c9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "<i>The \"Adapter\" pattern is also known as \"Wrapper\" pattern  ([[Wrapper Pattern]]). Is Wrapper/Adapter/Decorator the same pattern?</i>",
      "id": "82f18848bb3f21a3509c05e076c1dc76"
    },
    {
      "type": "html",
      "text": "\nNo.  [[Adapter Pattern]] is used to convert the interface of an object into something else.  [[Decorator Pattern]] is used to extend the functionality of an object while maintaining its interface.  Both of these are probably sometimes called [[Wrapper Pattern]] since both of them do \"wrap\" an object.",
      "id": "12ca6bb98a0765ae7d96a6e8102dff59"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\nMy understanding is that the [[Decorator Pattern]] does not refer to just <b>any</b> dynamic modifications to a class. My understanding is that it works like this:",
      "id": "8efefafd072dfffe26e7dc002c643c38"
    },
    {
      "type": "html",
      "text": " You have an instance, and you put another instance inside of it. They both support the same (or similar) interfaces. The one on the outside is a \"decorator.\"",
      "id": "82f36897913a7049f1003979091045a4"
    },
    {
      "type": "html",
      "text": " You use the one on the outside. It either masks, changes, or pass-throughs the methods of the instance inside of it.",
      "id": "c9fb3fe5e67c36d0430553310eb1b78d"
    },
    {
      "type": "html",
      "text": " (Jim Coplien calls this a Letter/Envelope idiom, with the inner instance being the letter and the outer instance being the envelope.)",
      "id": "ad8a3e18e797adfa0d948a15cb79e284"
    },
    {
      "type": "html",
      "text": "\nThis is <b>very different</b> from what I've heard people say \"the Decorator Pattern\" means - I've heard people saying that <i>pretty much anything</i> that dynamically changes a class is an instance of \"the Decorator Pattern.\"",
      "id": "63636f9213d2e244b58783eeeaf5fa68"
    },
    {
      "type": "html",
      "text": "\nSo for instance, if you dynamically change a class at run-time in a language that lets you do that, you are now using, \"The Decorator Pattern.\" If there's a feature of a language that lets you add a method to a class at run-time, they're calling that use of \"the decorator pattern.\"",
      "id": "e192f7d92158abff96150b326397dc76"
    },
    {
      "type": "html",
      "text": "\nReality check?",
      "id": "4e5255f4989e4e53a2d2646fd38a068f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\nThe description above implies that decorating an object changes its behaviour but not its interface. Is that necessarily true? For example, say you have a spell-check dictionary object. You want to get statistics on the most commonly misspelled words, so you wrap your spell-check dictionary in an envelope that tracks statistics. It exposes new methods for reading the stats.",
      "id": "9c42cd3e2336a8553cce9af4ff28d95f"
    },
    {
      "type": "html",
      "text": "\nNow it's true that the original client of the spell-check dictionary is in no way aware of the expanded interface. So from its perspective, your modification has not changed the interface. Isn't this an example of the [[Decorator Pattern]]?",
      "id": "1922dd1cc015750ef68ef9ebe2c08f0f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\nIn python, the 'random' module has a shuffle function which shuffles a list: random.shuffle(lyst) but what you mean is lyst.shuffle(); so importing the random module should add the shuffling behaviour to lists. Is this the [[Decorator Pattern]]?",
      "id": "eb12e56d08d6c87cf908e36070f825f3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\nAn example of this pattern is how java.io's Readers and Writers work.",
      "id": "2d8c538230a61ab46972eb6961262e21"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\nThe difference that I see between a [[Decorator Pattern]] and subclassing is that you can decorate any class that implements an interface with a single class.  Say I wanted to give myself a java.util.Map that printed a message whenever I added or removed a key.  If I only ever actually used java.util.[[Hash Map]] I could just create [[Printing Map]] as a subclass of [[Hash Map]] and override put & remove.  But if I want to create a printing version of [[Tree Map]] then I either create [[Printing Tree Map]] (which has almost identical code to [[Printing Map]] (which should itself become [[Printing Hash Map]])), or I create a Map decorator.",
      "id": "638c3a7e311d5e3126b9201e34c6bf2b"
    },
    {
      "type": "html",
      "text": "\nIn short, you are trading \"have to write pass-throughs for every method, not just the ones you're changing & do 2 step object creation\", for \"have to write a subclass for each concrete class you want to change\".  This goes from helpful to imperative if you are writing a library for others to use.",
      "id": "c47091d4474759b0b4d805a5c98a5fb3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\nIn java jdk 1.3 added dynamic proxy",
      "id": "77651bdce72d1617e770f965c1930327"
    },
    {
      "type": "html",
      "text": "\nthat is a great way to \"decorate\" any object",
      "id": "8a385b81bc0ca0216d0f738dfc25c118"
    },
    {
      "type": "html",
      "text": "\nauthor has added pre-method / post-method processing, which is decorating the instance",
      "id": "cfa17370c2555f784d1bc9ef75496e91"
    },
    {
      "type": "html",
      "text": "\n[http://www.ibm.com/developerworks/java/library/j-jtp08305.html www.ibm.com]",
      "id": "5b3688134359d9e3f96c953f97378f41"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\nThe term \"wrapper\" its used for several software design patterns, so an alternative, more specific identifier, should be used.",
      "id": "39198aef88ade2526613717d00a32fb5"
    },
    {
      "type": "html",
      "text": "\nThe Decorator Design Pattern has several requirements.",
      "id": "0c2cd99a1fe5ebb4a5e26d3e0d06097c"
    },
    {
      "type": "html",
      "text": "(1) An object that requires the extension.",
      "id": "652914433fe2a0312963049e41cc405a"
    },
    {
      "type": "html",
      "text": "\nExample:",
      "id": "2196bf9c24431e3c87feccb9c26e6ea3"
    },
    {
      "type": "html",
      "text": "\nA window control that requires additional optional features like:",
      "id": "fbcc608100488ed8ea80d55c66fc1784"
    },
    {
      "type": "html",
      "text": " horizontal scrollbar",
      "id": "d477ed3f0543efa4f56713e768178bd8"
    },
    {
      "type": "html",
      "text": " vertical scrollbar",
      "id": "99a8e53009112af74bc4304bd0c2d85a"
    },
    {
      "type": "html",
      "text": " titlebar",
      "id": "2f3079977c6ad8aa8008183429fa2f93"
    },
    {
      "type": "html",
      "text": " footerbar or statusbar",
      "id": "f0c509c79c6af8dcfb805581d24e889e"
    },
    {
      "type": "html",
      "text": " other",
      "id": "ff87721a7151d0f19b782b53caa049eb"
    },
    {
      "type": "html",
      "text": "\nAn example with an Object Oriented C style pseudocode:",
      "id": "9aa521532651509a4c9645f729e2fc5e"
    },
    {
      "type": "code",
      "text": "  public class WindowClass\n  {\n    // ...\n  } // class",
      "id": "5d16a7ae87d76c11d3f64dde4c7e67e1"
    },
    {
      "type": "html",
      "text": "(2) Several objects that support the extension by \"decoration\". Usually, those objects share a common interface, traits, or superclass, and sometimes, additional, intermediate superclasses .",
      "id": "0f7462f6659f342bb197d552ec9e911b"
    },
    {
      "type": "code",
      "text": "  /* abstract */ public class WindowDecoratorClass\n  {\n    // ...\n  } // class",
      "id": "16781e45f976b414f268806e40104fdc"
    },
    {
      "type": "code",
      "text": "  /* concrete*/ public class WindowTitleBarClass:\n     extends WindowDecoratorClass\n  {\n    // ...\n  } // class",
      "id": "d9eefe4dc5b06d0af6b83c28b689d865"
    },
    {
      "type": "code",
      "text": "  /* concrete*/ public class WindowStatusBarClass:\n     extends WindowDecoratorClass\n  {\n    // ...\n  } // class",
      "id": "899c2af839df5f437b130f80732b48bd"
    },
    {
      "type": "code",
      "text": "  /* abstract */  public class WindowScrollbarClass:\n     extends WindowDecoratorClass\n  {\n    // ...\n  } // class",
      "id": "a9f50a46031c8775856491ba44a1b651"
    },
    {
      "type": "code",
      "text": "  /* concrete*/ public class WindowHorizontalScrollbarClass:\n     extends WindowScrollbarClass\n  {\n    // ...\n  } // class",
      "id": "9b3a06e1c64017ec701c6016561fb4a8"
    },
    {
      "type": "code",
      "text": "  /* concrete*/ public class WindowVerticalScrollbarClass:\n     extends WindowScrollbarClass\n  {\n    // ...\n  } // class",
      "id": "997a236a0c790363f479f87936b3e744"
    },
    {
      "type": "html",
      "text": "(3) The decorated object (class or prototype instantation), and the decorator objects have one or several common features. In order to enssure that functuonality, the decorated object & the decorators have a common interface, traits, or class inheritance.",
      "id": "995d28aebedd32ced0c8e8d4cb642050"
    },
    {
      "type": "html",
      "text": "\nIn the next example, the \"Draw();\" method & the \"[[Get Description]]();\" method are the features that are the requirement, and are defined by the \"[[Drawing Control Interface]]\", ",
      "id": "f3d5786116855ff1ed38dade4de165a5"
    },
    {
      "type": "code",
      "text": "  public interface WindowDecoratorInterface\n  {\n    // ...",
      "id": "80ed8f0beeaf0d8e6e9fff0ac9742d23"
    },
    {
      "type": "code",
      "text": "    public String GetDescription() { ... }",
      "id": "1ad588f78b7fe6e86dc8c283de7019ca"
    },
    {
      "type": "code",
      "text": "    public void Draw() { ... }",
      "id": "d2fec843c039d70927908f328684b5b2"
    },
    {
      "type": "code",
      "text": "    // ...\n  } // interface",
      "id": "a3cf840bda006eed24685ad7c84c5933"
    },
    {
      "type": "code",
      "text": "  public class WindowClass:\n    implements WindowDecoratorInterface\n  {\n    public String GetDescription() { ... }",
      "id": "90e01de07333a5b33a9c3eca513f93e5"
    },
    {
      "type": "code",
      "text": "    public void Draw() { ... }\n  } // class",
      "id": "6e171528e73a0967aa6c33771fcc964d"
    },
    {
      "type": "code",
      "text": "  /* abstract */ public class WindowDecoratorClass:\n    implements WindowDecoratorInterface\n  {\n    public String GetDescription() { ... }",
      "id": "b5dc08547ccfdfbf5dfd247758b41bb4"
    },
    {
      "type": "code",
      "text": "    public void Draw() { ... }\n  } // class",
      "id": "6e171528e73a0967aa6c33771fcc964d"
    },
    {
      "type": "code",
      "text": "  /* concrete*/ public class WindowTitleBarClass:\n     extends WindowDecoratorClass\n  {\n    public String GetDescription() { ... }",
      "id": "dbf1870eb1206c45a7e1f88d904bec59"
    },
    {
      "type": "code",
      "text": "    public void Draw() { ... }\n  } // class",
      "id": "6e171528e73a0967aa6c33771fcc964d"
    },
    {
      "type": "code",
      "text": "  /* concrete*/ public class WindowStatusBarClass:\n     extends WindowDecoratorClass\n  {\n    public String GetDescription() { ... }",
      "id": "c78e181f563f98eef45e9d906f579f81"
    },
    {
      "type": "code",
      "text": "    public void Draw() { ... }\n  } // class",
      "id": "6e171528e73a0967aa6c33771fcc964d"
    },
    {
      "type": "code",
      "text": "  /* abstract */  public class WindowScrollbarClass:\n     extends WindowDecoratorClass\n  {\n    public String GetDescription() { ... }",
      "id": "3e68d17c76585b5bd7e8f1db2a1d1553"
    },
    {
      "type": "code",
      "text": "    public void Draw() { ... }\n  } // class",
      "id": "6e171528e73a0967aa6c33771fcc964d"
    },
    {
      "type": "code",
      "text": "  /* concrete*/ public class WindowHorizontalScrollbarClass:\n     extends WindowScrollbarClass\n  {\n    public String GetDescription() { ... }",
      "id": "0fe12dcf923f5abf1cbe16f9d0a8c0aa"
    },
    {
      "type": "code",
      "text": "    public void Draw() { ... }\n  } // class",
      "id": "6e171528e73a0967aa6c33771fcc964d"
    },
    {
      "type": "code",
      "text": "  /* concrete*/ public class WindowVerticalScrollbarClass:\n     extends WindowScrollbarClass\n  {\n    public String GetDescription() { ... }",
      "id": "f4efe5ea1ae4c98e665968a338169d6b"
    },
    {
      "type": "code",
      "text": "    public void Draw() { ... }\n  } // class",
      "id": "6e171528e73a0967aa6c33771fcc964d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5bdef69bf01cd002d37f70d71026521d"
    },
    {
      "type": "html",
      "text": "\n[[Category Pattern]] | [[Category Structural Patterns]]",
      "id": "136c76a7019109fa429565283b068a3e"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?DecoratorPattern c2.com]",
      "id": "1ad1029f726834ecf0e461bec87848bb"
    }
  ],
  "journal": [
    {
      "date": 1360874226000,
      "id": "81bc1e2d8de23164fb3a1ae522d3165e",
      "type": "create",
      "item": {
        "title": "Decorator Pattern",
        "story": [
          {
            "type": "html",
            "text": "<b>Intent:</b> Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality. ",
            "id": "865af77bb81443564e169d2a3c0db5b0"
          },
          {
            "type": "html",
            "text": "<i>While reading the [[Gang Of Four]] book on CD I noticed that the original name of this pattern was \"Wrapper\". -- [[Dave Mitchell]]</i>",
            "id": "f4cfbae187561ae9da86eccd1d2f581b"
          },
          {
            "type": "html",
            "text": "<b>See also:</b> [[Composite Pattern]], [[Proxy Pattern]], [[Design Patterns]]",
            "id": "686b6aac8b7185bc520070fb9ba726b3"
          },
          {
            "type": "html",
            "text": "\nThis pattern was also called <i>shadowing</i> in LPC.",
            "id": "6f48869ad250dd67433f326aab9f6d76"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": " [http://www.patnys.com/archive/2008/04/21/decorator-pattern.aspx www.patnys.com]",
            "id": "4086edd73b356bd5a1d81b9314e05e6b"
          },
          {
            "type": "html",
            "text": " [http://home.earthlink.net/~huston2/dp/decorator.html home.earthlink.net]",
            "id": "01bec8b6df8ba6a948886788a87ec0db"
          },
          {
            "type": "html",
            "text": " [http://wiki.cs.uiuc.edu/patternStories/DecoratorPattern wiki.cs.uiuc.edu]",
            "id": "e50cc422f3856afaaf436cdf57c989a7"
          },
          {
            "type": "html",
            "text": " [http://perldesignpatterns.com/?word=decorator+pattern perldesignpatterns.com]",
            "id": "100178ca1ac5d48a590c53e6aa327b69"
          },
          {
            "type": "html",
            "text": " [http://www.dofactory.com/Patterns/PatternDecorator.aspx www.dofactory.com]",
            "id": "eae40410a61afeb130fde1dcd4824ba6"
          },
          {
            "type": "html",
            "text": " [http://www.lukeredpath.co.uk/2006/9/6/decorator-pattern-with-ruby-in-8-lines www.lukeredpath.co.uk]",
            "id": "c046e5aebbdbb7e6d95a48ba8d2a3ed8"
          },
          {
            "type": "html",
            "text": " [http://delphipatterns.blog.com/2011/02/22/decorator-5/ delphipatterns.blog.com]",
            "id": "27aacf62e46b157b454039aa19dc8cdb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\nThis pattern can also be used as a way to refactor a complex class into smaller pieces.  Even if you don't need to attach responsibilities dynamically it can be clearer to have each responsibility in a different class.  Somewhat like [[Mix In]]s. -- [[Christian Taubman]]",
            "id": "dbe8e8be30c1402347e9c8258a1ea7fe"
          },
          {
            "type": "html",
            "text": "\nAlso see [[Aspect Oriented Programming]]",
            "id": "ecb92bed449a3522d3c695bfee7c87c9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "<i>The \"Adapter\" pattern is also known as \"Wrapper\" pattern  ([[Wrapper Pattern]]). Is Wrapper/Adapter/Decorator the same pattern?</i>",
            "id": "82f18848bb3f21a3509c05e076c1dc76"
          },
          {
            "type": "html",
            "text": "\nNo.  [[Adapter Pattern]] is used to convert the interface of an object into something else.  [[Decorator Pattern]] is used to extend the functionality of an object while maintaining its interface.  Both of these are probably sometimes called [[Wrapper Pattern]] since both of them do \"wrap\" an object.",
            "id": "12ca6bb98a0765ae7d96a6e8102dff59"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\nMy understanding is that the [[Decorator Pattern]] does not refer to just <b>any</b> dynamic modifications to a class. My understanding is that it works like this:",
            "id": "8efefafd072dfffe26e7dc002c643c38"
          },
          {
            "type": "html",
            "text": " You have an instance, and you put another instance inside of it. They both support the same (or similar) interfaces. The one on the outside is a \"decorator.\"",
            "id": "82f36897913a7049f1003979091045a4"
          },
          {
            "type": "html",
            "text": " You use the one on the outside. It either masks, changes, or pass-throughs the methods of the instance inside of it.",
            "id": "c9fb3fe5e67c36d0430553310eb1b78d"
          },
          {
            "type": "html",
            "text": " (Jim Coplien calls this a Letter/Envelope idiom, with the inner instance being the letter and the outer instance being the envelope.)",
            "id": "ad8a3e18e797adfa0d948a15cb79e284"
          },
          {
            "type": "html",
            "text": "\nThis is <b>very different</b> from what I've heard people say \"the Decorator Pattern\" means - I've heard people saying that <i>pretty much anything</i> that dynamically changes a class is an instance of \"the Decorator Pattern.\"",
            "id": "63636f9213d2e244b58783eeeaf5fa68"
          },
          {
            "type": "html",
            "text": "\nSo for instance, if you dynamically change a class at run-time in a language that lets you do that, you are now using, \"The Decorator Pattern.\" If there's a feature of a language that lets you add a method to a class at run-time, they're calling that use of \"the decorator pattern.\"",
            "id": "e192f7d92158abff96150b326397dc76"
          },
          {
            "type": "html",
            "text": "\nReality check?",
            "id": "4e5255f4989e4e53a2d2646fd38a068f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\nThe description above implies that decorating an object changes its behaviour but not its interface. Is that necessarily true? For example, say you have a spell-check dictionary object. You want to get statistics on the most commonly misspelled words, so you wrap your spell-check dictionary in an envelope that tracks statistics. It exposes new methods for reading the stats.",
            "id": "9c42cd3e2336a8553cce9af4ff28d95f"
          },
          {
            "type": "html",
            "text": "\nNow it's true that the original client of the spell-check dictionary is in no way aware of the expanded interface. So from its perspective, your modification has not changed the interface. Isn't this an example of the [[Decorator Pattern]]?",
            "id": "1922dd1cc015750ef68ef9ebe2c08f0f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\nIn python, the 'random' module has a shuffle function which shuffles a list: random.shuffle(lyst) but what you mean is lyst.shuffle(); so importing the random module should add the shuffling behaviour to lists. Is this the [[Decorator Pattern]]?",
            "id": "eb12e56d08d6c87cf908e36070f825f3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\nAn example of this pattern is how java.io's Readers and Writers work.",
            "id": "2d8c538230a61ab46972eb6961262e21"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\nThe difference that I see between a [[Decorator Pattern]] and subclassing is that you can decorate any class that implements an interface with a single class.  Say I wanted to give myself a java.util.Map that printed a message whenever I added or removed a key.  If I only ever actually used java.util.[[Hash Map]] I could just create [[Printing Map]] as a subclass of [[Hash Map]] and override put & remove.  But if I want to create a printing version of [[Tree Map]] then I either create [[Printing Tree Map]] (which has almost identical code to [[Printing Map]] (which should itself become [[Printing Hash Map]])), or I create a Map decorator.",
            "id": "638c3a7e311d5e3126b9201e34c6bf2b"
          },
          {
            "type": "html",
            "text": "\nIn short, you are trading \"have to write pass-throughs for every method, not just the ones you're changing & do 2 step object creation\", for \"have to write a subclass for each concrete class you want to change\".  This goes from helpful to imperative if you are writing a library for others to use.",
            "id": "c47091d4474759b0b4d805a5c98a5fb3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\nIn java jdk 1.3 added dynamic proxy",
            "id": "77651bdce72d1617e770f965c1930327"
          },
          {
            "type": "html",
            "text": "\nthat is a great way to \"decorate\" any object",
            "id": "8a385b81bc0ca0216d0f738dfc25c118"
          },
          {
            "type": "html",
            "text": "\nauthor has added pre-method / post-method processing, which is decorating the instance",
            "id": "cfa17370c2555f784d1bc9ef75496e91"
          },
          {
            "type": "html",
            "text": "\n[http://www.ibm.com/developerworks/java/library/j-jtp08305.html www.ibm.com]",
            "id": "5b3688134359d9e3f96c953f97378f41"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\nThe term \"wrapper\" its used for several software design patterns, so an alternative, more specific identifier, should be used.",
            "id": "39198aef88ade2526613717d00a32fb5"
          },
          {
            "type": "html",
            "text": "\nThe Decorator Design Pattern has several requirements.",
            "id": "0c2cd99a1fe5ebb4a5e26d3e0d06097c"
          },
          {
            "type": "html",
            "text": "(1) An object that requires the extension.",
            "id": "652914433fe2a0312963049e41cc405a"
          },
          {
            "type": "html",
            "text": "\nExample:",
            "id": "2196bf9c24431e3c87feccb9c26e6ea3"
          },
          {
            "type": "html",
            "text": "\nA window control that requires additional optional features like:",
            "id": "fbcc608100488ed8ea80d55c66fc1784"
          },
          {
            "type": "html",
            "text": " horizontal scrollbar",
            "id": "d477ed3f0543efa4f56713e768178bd8"
          },
          {
            "type": "html",
            "text": " vertical scrollbar",
            "id": "99a8e53009112af74bc4304bd0c2d85a"
          },
          {
            "type": "html",
            "text": " titlebar",
            "id": "2f3079977c6ad8aa8008183429fa2f93"
          },
          {
            "type": "html",
            "text": " footerbar or statusbar",
            "id": "f0c509c79c6af8dcfb805581d24e889e"
          },
          {
            "type": "html",
            "text": " other",
            "id": "ff87721a7151d0f19b782b53caa049eb"
          },
          {
            "type": "html",
            "text": "\nAn example with an Object Oriented C style pseudocode:",
            "id": "9aa521532651509a4c9645f729e2fc5e"
          },
          {
            "type": "code",
            "text": "  public class WindowClass\n  {\n    // ...\n  } // class",
            "id": "5d16a7ae87d76c11d3f64dde4c7e67e1"
          },
          {
            "type": "html",
            "text": "(2) Several objects that support the extension by \"decoration\". Usually, those objects share a common interface, traits, or superclass, and sometimes, additional, intermediate superclasses .",
            "id": "0f7462f6659f342bb197d552ec9e911b"
          },
          {
            "type": "code",
            "text": "  /* abstract */ public class WindowDecoratorClass\n  {\n    // ...\n  } // class",
            "id": "16781e45f976b414f268806e40104fdc"
          },
          {
            "type": "code",
            "text": "  /* concrete*/ public class WindowTitleBarClass:\n     extends WindowDecoratorClass\n  {\n    // ...\n  } // class",
            "id": "d9eefe4dc5b06d0af6b83c28b689d865"
          },
          {
            "type": "code",
            "text": "  /* concrete*/ public class WindowStatusBarClass:\n     extends WindowDecoratorClass\n  {\n    // ...\n  } // class",
            "id": "899c2af839df5f437b130f80732b48bd"
          },
          {
            "type": "code",
            "text": "  /* abstract */  public class WindowScrollbarClass:\n     extends WindowDecoratorClass\n  {\n    // ...\n  } // class",
            "id": "a9f50a46031c8775856491ba44a1b651"
          },
          {
            "type": "code",
            "text": "  /* concrete*/ public class WindowHorizontalScrollbarClass:\n     extends WindowScrollbarClass\n  {\n    // ...\n  } // class",
            "id": "9b3a06e1c64017ec701c6016561fb4a8"
          },
          {
            "type": "code",
            "text": "  /* concrete*/ public class WindowVerticalScrollbarClass:\n     extends WindowScrollbarClass\n  {\n    // ...\n  } // class",
            "id": "997a236a0c790363f479f87936b3e744"
          },
          {
            "type": "html",
            "text": "(3) The decorated object (class or prototype instantation), and the decorator objects have one or several common features. In order to enssure that functuonality, the decorated object & the decorators have a common interface, traits, or class inheritance.",
            "id": "995d28aebedd32ced0c8e8d4cb642050"
          },
          {
            "type": "html",
            "text": "\nIn the next example, the \"Draw();\" method & the \"[[Get Description]]();\" method are the features that are the requirement, and are defined by the \"[[Drawing Control Interface]]\", ",
            "id": "f3d5786116855ff1ed38dade4de165a5"
          },
          {
            "type": "code",
            "text": "  public interface WindowDecoratorInterface\n  {\n    // ...",
            "id": "80ed8f0beeaf0d8e6e9fff0ac9742d23"
          },
          {
            "type": "code",
            "text": "    public String GetDescription() { ... }",
            "id": "1ad588f78b7fe6e86dc8c283de7019ca"
          },
          {
            "type": "code",
            "text": "    public void Draw() { ... }",
            "id": "d2fec843c039d70927908f328684b5b2"
          },
          {
            "type": "code",
            "text": "    // ...\n  } // interface",
            "id": "a3cf840bda006eed24685ad7c84c5933"
          },
          {
            "type": "code",
            "text": "  public class WindowClass:\n    implements WindowDecoratorInterface\n  {\n    public String GetDescription() { ... }",
            "id": "90e01de07333a5b33a9c3eca513f93e5"
          },
          {
            "type": "code",
            "text": "    public void Draw() { ... }\n  } // class",
            "id": "6e171528e73a0967aa6c33771fcc964d"
          },
          {
            "type": "code",
            "text": "  /* abstract */ public class WindowDecoratorClass:\n    implements WindowDecoratorInterface\n  {\n    public String GetDescription() { ... }",
            "id": "b5dc08547ccfdfbf5dfd247758b41bb4"
          },
          {
            "type": "code",
            "text": "    public void Draw() { ... }\n  } // class",
            "id": "6e171528e73a0967aa6c33771fcc964d"
          },
          {
            "type": "code",
            "text": "  /* concrete*/ public class WindowTitleBarClass:\n     extends WindowDecoratorClass\n  {\n    public String GetDescription() { ... }",
            "id": "dbf1870eb1206c45a7e1f88d904bec59"
          },
          {
            "type": "code",
            "text": "    public void Draw() { ... }\n  } // class",
            "id": "6e171528e73a0967aa6c33771fcc964d"
          },
          {
            "type": "code",
            "text": "  /* concrete*/ public class WindowStatusBarClass:\n     extends WindowDecoratorClass\n  {\n    public String GetDescription() { ... }",
            "id": "c78e181f563f98eef45e9d906f579f81"
          },
          {
            "type": "code",
            "text": "    public void Draw() { ... }\n  } // class",
            "id": "6e171528e73a0967aa6c33771fcc964d"
          },
          {
            "type": "code",
            "text": "  /* abstract */  public class WindowScrollbarClass:\n     extends WindowDecoratorClass\n  {\n    public String GetDescription() { ... }",
            "id": "3e68d17c76585b5bd7e8f1db2a1d1553"
          },
          {
            "type": "code",
            "text": "    public void Draw() { ... }\n  } // class",
            "id": "6e171528e73a0967aa6c33771fcc964d"
          },
          {
            "type": "code",
            "text": "  /* concrete*/ public class WindowHorizontalScrollbarClass:\n     extends WindowScrollbarClass\n  {\n    public String GetDescription() { ... }",
            "id": "0fe12dcf923f5abf1cbe16f9d0a8c0aa"
          },
          {
            "type": "code",
            "text": "    public void Draw() { ... }\n  } // class",
            "id": "6e171528e73a0967aa6c33771fcc964d"
          },
          {
            "type": "code",
            "text": "  /* concrete*/ public class WindowVerticalScrollbarClass:\n     extends WindowScrollbarClass\n  {\n    public String GetDescription() { ... }",
            "id": "f4efe5ea1ae4c98e665968a338169d6b"
          },
          {
            "type": "code",
            "text": "    public void Draw() { ... }\n  } // class",
            "id": "6e171528e73a0967aa6c33771fcc964d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5bdef69bf01cd002d37f70d71026521d"
          },
          {
            "type": "html",
            "text": "\n[[Category Pattern]] | [[Category Structural Patterns]]",
            "id": "136c76a7019109fa429565283b068a3e"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?DecoratorPattern c2.com]",
            "id": "1ad1029f726834ecf0e461bec87848bb"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907646422
    }
  ]
}