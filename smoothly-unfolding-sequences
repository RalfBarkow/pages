{
  "title": "Smoothly Unfolding Sequences",
  "story": [
    {
      "type": "paragraph",
      "id": "03f7dc0afcac5478",
      "text": "Which of the things that we make are good? Which are beautiful? Which are wonderful, coherent, clear, natural, and full of life?"
    },
    {
      "type": "paragraph",
      "id": "4fb5e66ec20127fe",
      "text": "Good work may be hard to describe in words, but we know how it makes us feel. So how do we create work like that? And how can we make the act of working, the process of working itself, something that's smooth, comprehensive, flowing, focusing, comprehensible, reliable, well-informed, rich and rewarding, personal and pleasant?"
    },
    {
      "type": "paragraph",
      "id": "4ddc6c6d2ce9764b",
      "text": "And if we figure out how to do all that, how can we explain it to people, and empower them to do good work?"
    },
    {
      "type": "video",
      "id": "9ea8c7ed7fd5d769",
      "text": "YOUTUBE m1IZqlnEbmg\nUnfolding Sequences - An Introduction by [[Greg Bryant]]"
    },
    {
      "type": "paragraph",
      "id": "501fb7830f480007",
      "text": "An architect, scientist, and Berkeley professor, [[Christopher Alexander]], spent decades trying to answer these kinds of questions. He found that the most useful places to look for answers were on the one hand in traditional communities, that build their own structures in harmony with their lives, and on the other hand in living organisms, which produce by far the most beautiful and complex systems on the planet."
    },
    {
      "type": "paragraph",
      "id": "b53ec834b0aa16dc",
      "text": "Alexander publicly explored these questions in the realm of architecture, art, and urban planning, starting in the late 1950s. But surprisingly his work had a regular impact on the way computing has progressed. An insanely prolific impact."
    },
    {
      "type": "paragraph",
      "id": "40b0d92084e33758",
      "text": "Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming, scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools."
    },
    {
      "type": "paragraph",
      "id": "817ef4a5968e9aaa",
      "text": "All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book '[[A Pattern Language]]'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims."
    },
    {
      "type": "paragraph",
      "id": "0c5c9d5497578886",
      "text": "But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work."
    },
    {
      "type": "paragraph",
      "id": "c9e9a6441d7e8e20",
      "text": "There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I ([[Greg Bryant]]) like to call 'smoothly unfolding sequences'."
    },
    {
      "type": "paragraph",
      "id": "8327410c5b0ae9fc",
      "text": "In this context, '[[Sequence]]s' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences."
    },
    {
      "type": "paragraph",
      "id": "5fdf7e5ff93661d5",
      "text": "Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain."
    },
    {
      "type": "paragraph",
      "id": "2572d331dcf7f002",
      "text": "But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry."
    },
    {
      "type": "paragraph",
      "id": "fa145b2799fa01a2",
      "text": "So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack."
    },
    {
      "type": "paragraph",
      "id": "1d5bc3699bb33d0c",
      "text": "In 1996 Alexander and I ([[Greg Bryant]]) embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages."
    },
    {
      "type": "paragraph",
      "id": "c21832a2822fc235",
      "text": "Thanks to a grant from [[Bill Joy]] at Sun Microsystems we had our first real successes with it in 1997. The program was called '[[Gatemaker]]', and we gave it to people who had no idea how to design a good gate. Here [https://youtu.be/m1IZqlnEbmg?t=373 video] is a recording of musician [[Peter Gabriel]] making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex."
    },
    {
      "type": "paragraph",
      "id": "ad05147a1d2a0114",
      "text": "The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects."
    },
    {
      "type": "paragraph",
      "id": "b4819a83a7c8864c",
      "text": "Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
    },
    {
      "type": "pagefold",
      "id": "e58333b136c6da6c",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "6289c5bde4b8d107",
      "site": "wiki.ralfbarkow.ch",
      "slug": "unfolding-sequence",
      "title": "Unfolding Sequence",
      "text": "[[Greg Bryant]]: \"Here's an attempt to explain 'unfolding sequences', and include computer people in the audience. Unfolding sequences are natural, pervasive, and extremely powerful. But we don't notice them or use them enough.\" [https://twitter.com/greg_bryant/status/1483962627277549569?s=20&t=yrPPt2XXhdzzqf1z-k1XoQ tweet], [https://beautiful.software/docs/intro_to_sequences_transcript.html page], [https://gregbryant.com/ site]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Smoothly Unfolding Sequences",
        "story": []
      },
      "date": 1696409658584
    },
    {
      "id": "03f7dc0afcac5478",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "03f7dc0afcac5478",
        "text": "Which of the things that we make are good? Which are beautiful? Which are wonderful, coherent, clear, natural, and full of life? Good work may be hard to describe in words, but we know how it makes us feel. So how do we create work like that? And how can we make the act of working, the process of working itself, something that's smooth, comprehensive, flowing, focusing, comprehensible, reliable, well-informed, rich and rewarding, personal and pleasant? And if we figure out how to do all that, how can we explain it to people, and empower them to do good work? An architect, scientist, and Berkeley professor, Christopher Alexander, spent decades trying to answer these kinds of questions. He found that the most useful places to look for answers were on the one hand in traditional communities, that build their own structures in harmony with their lives, and on the other hand in living organisms, which produce by far the most beautiful and complex systems on the planet. Alexander publicly explored these questions in the realm of architecture, art, and urban planning, starting in the late 1950s. But surprisingly his work had a regular impact on the way computing has progressed. An insanely prolific impact. Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools. All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book 'A Pattern Language'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims. But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696409663063
    },
    {
      "item": {
        "type": "factory",
        "id": "e58333b136c6da6c"
      },
      "id": "e58333b136c6da6c",
      "type": "add",
      "after": "03f7dc0afcac5478",
      "date": 1696409677145
    },
    {
      "type": "edit",
      "id": "e58333b136c6da6c",
      "item": {
        "type": "pagefold",
        "id": "e58333b136c6da6c",
        "text": "~"
      },
      "date": 1696409679912
    },
    {
      "id": "6289c5bde4b8d107",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "6289c5bde4b8d107",
        "site": "wiki.ralfbarkow.ch",
        "slug": "unfolding-sequence",
        "title": "Unfolding Sequence",
        "text": "[[Greg Bryant]]: \"Here's an attempt to explain 'unfolding sequences', and include computer people in the audience. Unfolding sequences are natural, pervasive, and extremely powerful. But we don't notice them or use them enough.\" [https://twitter.com/greg_bryant/status/1483962627277549569?s=20&t=yrPPt2XXhdzzqf1z-k1XoQ tweet], [https://beautiful.software/docs/intro_to_sequences_transcript.html page], [https://gregbryant.com/ site]"
      },
      "after": "e58333b136c6da6c",
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696409685645
    },
    {
      "type": "edit",
      "id": "03f7dc0afcac5478",
      "item": {
        "type": "paragraph",
        "id": "03f7dc0afcac5478",
        "text": "Which of the things that we make are good? Which are beautiful? Which are wonderful, coherent, clear, natural, and full of life?"
      },
      "date": 1696409702755
    },
    {
      "type": "add",
      "id": "4fb5e66ec20127fe",
      "item": {
        "type": "paragraph",
        "id": "4fb5e66ec20127fe",
        "text": "Good work may be hard to describe in words, but we know how it makes us feel. So how do we create work like that? And how can we make the act of working, the process of working itself, something that's smooth, comprehensive, flowing, focusing, comprehensible, reliable, well-informed, rich and rewarding, personal and pleasant? And if we figure out how to do all that, how can we explain it to people, and empower them to do good work? An architect, scientist, and Berkeley professor, Christopher Alexander, spent decades trying to answer these kinds of questions. He found that the most useful places to look for answers were on the one hand in traditional communities, that build their own structures in harmony with their lives, and on the other hand in living organisms, which produce by far the most beautiful and complex systems on the planet. Alexander publicly explored these questions in the realm of architecture, art, and urban planning, starting in the late 1950s. But surprisingly his work had a regular impact on the way computing has progressed. An insanely prolific impact. Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools. All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book 'A Pattern Language'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims. But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "03f7dc0afcac5478",
      "date": 1696409703296
    },
    {
      "type": "edit",
      "id": "4fb5e66ec20127fe",
      "item": {
        "type": "paragraph",
        "id": "4fb5e66ec20127fe",
        "text": "Good work may be hard to describe in words, but we know how it makes us feel. So how do we create work like that? And how can we make the act of working, the process of working itself, something that's smooth, comprehensive, flowing, focusing, comprehensible, reliable, well-informed, rich and rewarding, personal and pleasant?"
      },
      "date": 1696409737455
    },
    {
      "type": "add",
      "id": "4ddc6c6d2ce9764b",
      "item": {
        "type": "paragraph",
        "id": "4ddc6c6d2ce9764b",
        "text": "And if we figure out how to do all that, how can we explain it to people, and empower them to do good work? An architect, scientist, and Berkeley professor, Christopher Alexander, spent decades trying to answer these kinds of questions. He found that the most useful places to look for answers were on the one hand in traditional communities, that build their own structures in harmony with their lives, and on the other hand in living organisms, which produce by far the most beautiful and complex systems on the planet. Alexander publicly explored these questions in the realm of architecture, art, and urban planning, starting in the late 1950s. But surprisingly his work had a regular impact on the way computing has progressed. An insanely prolific impact. Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools. All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book 'A Pattern Language'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims. But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "4fb5e66ec20127fe",
      "date": 1696409738497
    },
    {
      "type": "edit",
      "id": "4ddc6c6d2ce9764b",
      "item": {
        "type": "paragraph",
        "id": "4ddc6c6d2ce9764b",
        "text": "And if we figure out how to do all that, how can we explain it to people, and empower them to do good work?"
      },
      "date": 1696409778836
    },
    {
      "type": "add",
      "id": "501fb7830f480007",
      "item": {
        "type": "paragraph",
        "id": "501fb7830f480007",
        "text": "An architect, scientist, and Berkeley professor, Christopher Alexander, spent decades trying to answer these kinds of questions. He found that the most useful places to look for answers were on the one hand in traditional communities, that build their own structures in harmony with their lives, and on the other hand in living organisms, which produce by far the most beautiful and complex systems on the planet. Alexander publicly explored these questions in the realm of architecture, art, and urban planning, starting in the late 1950s. But surprisingly his work had a regular impact on the way computing has progressed. An insanely prolific impact. Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools. All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book 'A Pattern Language'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims. But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "4ddc6c6d2ce9764b",
      "date": 1696409779567
    },
    {
      "id": "9ea8c7ed7fd5d769",
      "type": "add",
      "item": {
        "type": "video",
        "id": "9ea8c7ed7fd5d769",
        "text": "YOUTUBE m1IZqlnEbmg\nUnfolding Sequences - an introduction"
      },
      "after": "4ddc6c6d2ce9764b",
      "attribution": {
        "page": "Unfolding Sequence"
      },
      "date": 1696409786293
    },
    {
      "type": "edit",
      "id": "9ea8c7ed7fd5d769",
      "item": {
        "type": "video",
        "id": "9ea8c7ed7fd5d769",
        "text": "YOUTUBE m1IZqlnEbmg\nUnfolding Sequences - an introduction by [[Greg Bryant]]"
      },
      "date": 1696409800584
    },
    {
      "type": "edit",
      "id": "501fb7830f480007",
      "item": {
        "type": "paragraph",
        "id": "501fb7830f480007",
        "text": "An architect, scientist, and Berkeley professor, [[Christopher Alexander]], spent decades trying to answer these kinds of questions. He found that the most useful places to look for answers were on the one hand in traditional communities, that build their own structures in harmony with their lives, and on the other hand in living organisms, which produce by far the most beautiful and complex systems on the planet. Alexander publicly explored these questions in the realm of architecture, art, and urban planning, starting in the late 1950s. But surprisingly his work had a regular impact on the way computing has progressed. An insanely prolific impact. Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools. All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book 'A Pattern Language'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims. But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "date": 1696409835583
    },
    {
      "type": "edit",
      "id": "501fb7830f480007",
      "item": {
        "type": "paragraph",
        "id": "501fb7830f480007",
        "text": "An architect, scientist, and Berkeley professor, [[Christopher Alexander]], spent decades trying to answer these kinds of questions. He found that the most useful places to look for answers were on the one hand in traditional communities, that build their own structures in harmony with their lives, and on the other hand in living organisms, which produce by far the most beautiful and complex systems on the planet."
      },
      "date": 1696409948062
    },
    {
      "type": "add",
      "id": "b53ec834b0aa16dc",
      "item": {
        "type": "paragraph",
        "id": "b53ec834b0aa16dc",
        "text": "Alexander publicly explored these questions in the realm of architecture, art, and urban planning, starting in the late 1950s. But surprisingly his work had a regular impact on the way computing has progressed. An insanely prolific impact. Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools. All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book 'A Pattern Language'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims. But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "501fb7830f480007",
      "date": 1696409949239
    },
    {
      "type": "edit",
      "id": "b53ec834b0aa16dc",
      "item": {
        "type": "paragraph",
        "id": "b53ec834b0aa16dc",
        "text": "Alexander publicly explored these questions in the realm of architecture, art, and urban planning, starting in the late 1950s. But surprisingly his work had a regular impact on the way computing has progressed. An insanely prolific impact."
      },
      "date": 1696409981903
    },
    {
      "type": "add",
      "id": "40b0d92084e33758",
      "item": {
        "type": "paragraph",
        "id": "40b0d92084e33758",
        "text": "Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools."
      },
      "after": "b53ec834b0aa16dc",
      "date": 1696409990978
    },
    {
      "type": "add",
      "id": "817ef4a5968e9aaa",
      "item": {
        "type": "paragraph",
        "id": "817ef4a5968e9aaa",
        "text": "All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book 'A Pattern Language'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims. But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "40b0d92084e33758",
      "date": 1696409993644
    },
    {
      "type": "edit",
      "id": "817ef4a5968e9aaa",
      "item": {
        "type": "paragraph",
        "id": "817ef4a5968e9aaa",
        "text": "All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book '[[A Pattern Language]]'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims. But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "date": 1696410012601
    },
    {
      "type": "edit",
      "id": "817ef4a5968e9aaa",
      "item": {
        "type": "paragraph",
        "id": "817ef4a5968e9aaa",
        "text": "All these, and many more, were influenced by a series of groundbreaking books by Alexander. Even the wiki was invented to store patterns as Alexander defined them in his classic book '[[A Pattern Language]]'. And his work influenced countless successful products from Java's first frameworks, to SimCity, Spore, and The Sims."
      },
      "date": 1696410421684
    },
    {
      "type": "add",
      "id": "0c5c9d5497578886",
      "item": {
        "type": "paragraph",
        "id": "0c5c9d5497578886",
        "text": "But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work. There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "817ef4a5968e9aaa",
      "date": 1696410422485
    },
    {
      "type": "edit",
      "id": "0c5c9d5497578886",
      "item": {
        "type": "paragraph",
        "id": "0c5c9d5497578886",
        "text": "But in his core research and practice, Alexander was not completely satisfied with the quality of the work that people do by using only patterns, user directed design, incremental construction, and pattern languages. He knew early on that these tools were not sufficient to energize people to generate truly wonderful work."
      },
      "date": 1696410443311
    },
    {
      "type": "add",
      "id": "c9e9a6441d7e8e20",
      "item": {
        "type": "paragraph",
        "id": "c9e9a6441d7e8e20",
        "text": "There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "0c5c9d5497578886",
      "date": 1696410444547
    },
    {
      "type": "edit",
      "id": "c9e9a6441d7e8e20",
      "item": {
        "type": "paragraph",
        "id": "c9e9a6441d7e8e20",
        "text": "There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I ([[Greg Bryant]]) like to call 'smoothly unfolding sequences'. In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "date": 1696410476085
    },
    {
      "type": "edit",
      "id": "c9e9a6441d7e8e20",
      "item": {
        "type": "paragraph",
        "id": "c9e9a6441d7e8e20",
        "text": "There was something else required. A feeling, an innate sensibility and appreciation for life, which people need to find within themselves. One of the best contexts for discovery and use of this sensitivity were tools that I ([[Greg Bryant]]) like to call 'smoothly unfolding sequences'."
      },
      "date": 1696410483819
    },
    {
      "type": "add",
      "id": "8327410c5b0ae9fc",
      "item": {
        "type": "paragraph",
        "id": "8327410c5b0ae9fc",
        "text": "In this context, 'sequences' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "c9e9a6441d7e8e20",
      "date": 1696410484146
    },
    {
      "type": "edit",
      "id": "8327410c5b0ae9fc",
      "item": {
        "type": "paragraph",
        "id": "8327410c5b0ae9fc",
        "text": "In this context, '[[Sequence]]s' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences. Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "date": 1696410537353
    },
    {
      "type": "edit",
      "id": "8327410c5b0ae9fc",
      "item": {
        "type": "paragraph",
        "id": "8327410c5b0ae9fc",
        "text": "In this context, '[[Sequence]]s' means a series of prioritized steps that an experienced designer or engineer or builder would take so that they, and their colleagues, and their users, could together build the most well-adapted, custom, beautiful thing possible in the smoothest and most robust way possible, together making the best decisions, and adjusting the growing system to changing conditions, revealed facts, and emerging structures, at every stage in the development of their project. Within specific domains done properly these sequences could be tested, debugged if you will, smoothed out, and corrected, until they could be used repeatedly, and people who experienced them could use them for new kinds of projects, once the general principles as expressed by the sequence were understood. Or, they could write new sequences."
      },
      "date": 1696410570432
    },
    {
      "type": "add",
      "id": "5fdf7e5ff93661d5",
      "item": {
        "type": "paragraph",
        "id": "5fdf7e5ff93661d5",
        "text": "Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain. But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "8327410c5b0ae9fc",
      "date": 1696410571820
    },
    {
      "type": "edit",
      "id": "5fdf7e5ff93661d5",
      "item": {
        "type": "paragraph",
        "id": "5fdf7e5ff93661d5",
        "text": "Overall, after much experimentation during many group projects, Alexander concluded that these natural sequences significantly improved communication, process, and satisfaction with the resulting quality, in any domain."
      },
      "date": 1696410600060
    },
    {
      "type": "add",
      "id": "2572d331dcf7f002",
      "item": {
        "type": "paragraph",
        "id": "2572d331dcf7f002",
        "text": "But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "5fdf7e5ff93661d5",
      "date": 1696410600624
    },
    {
      "type": "edit",
      "id": "2572d331dcf7f002",
      "item": {
        "type": "paragraph",
        "id": "2572d331dcf7f002",
        "text": "But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry. So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack."
      },
      "date": 1696410678513
    },
    {
      "type": "add",
      "id": "1d5bc3699bb33d0c",
      "item": {
        "type": "paragraph",
        "id": "1d5bc3699bb33d0c",
        "text": "In 1996 Alexander and I embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "2572d331dcf7f002",
      "date": 1696410679930
    },
    {
      "type": "edit",
      "id": "1d5bc3699bb33d0c",
      "item": {
        "type": "paragraph",
        "id": "1d5bc3699bb33d0c",
        "text": "In 1996 Alexander and I ([[Greg Bryant]]) embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages. Thanks to a grant from Bill Joy at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "date": 1696410721093
    },
    {
      "type": "edit",
      "id": "1d5bc3699bb33d0c",
      "item": {
        "type": "paragraph",
        "id": "1d5bc3699bb33d0c",
        "text": "In 1996 Alexander and I ([[Greg Bryant]]) embarked on building a psychologically effective computer program that would facilitate some complex design work. The user would be guided by just this kind of evocative, smoothly unfolding sequence of suggestions about the kinds of structures that should be emerging, by their hand, at a series of important stages."
      },
      "date": 1696410754148
    },
    {
      "type": "add",
      "id": "c21832a2822fc235",
      "item": {
        "type": "paragraph",
        "id": "c21832a2822fc235",
        "text": "Thanks to a grant from [[Bill Joy]] at Sun Microsystems we had our first real successes with it in 1997. The program was called 'Gatemaker', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "1d5bc3699bb33d0c",
      "date": 1696410761045
    },
    {
      "type": "edit",
      "id": "c21832a2822fc235",
      "item": {
        "type": "paragraph",
        "id": "c21832a2822fc235",
        "text": "Thanks to a grant from [[Bill Joy]] at Sun Microsystems we had our first real successes with it in 1997. The program was called '[[Gatemaker]]', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician Peter Gabriel making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex. The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "date": 1696410776203
    },
    {
      "type": "edit",
      "id": "c21832a2822fc235",
      "item": {
        "type": "paragraph",
        "id": "c21832a2822fc235",
        "text": "Thanks to a grant from [[Bill Joy]] at Sun Microsystems we had our first real successes with it in 1997. The program was called '[[Gatemaker]]', and we gave it to people who had no idea how to design a good gate. Here is a recording of musician [[Peter Gabriel]] making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex."
      },
      "date": 1696410814669
    },
    {
      "type": "add",
      "id": "ad05147a1d2a0114",
      "item": {
        "type": "paragraph",
        "id": "ad05147a1d2a0114",
        "text": "The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects. Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "c21832a2822fc235",
      "date": 1696410815089
    },
    {
      "type": "edit",
      "id": "ad05147a1d2a0114",
      "item": {
        "type": "paragraph",
        "id": "ad05147a1d2a0114",
        "text": "The authoring of good sequences records institutional and community knowledge, in a way that increases quality and reduces risk in future projects."
      },
      "date": 1696410835095
    },
    {
      "type": "add",
      "id": "b4819a83a7c8864c",
      "item": {
        "type": "paragraph",
        "id": "b4819a83a7c8864c",
        "text": "Unfortunately the dot-com boom and crash interfered with our initial work. But we've discovered many important things about unfolding sequences, over the years, which we would like to share with people. We believe everyone will find that they feel very familiar. In the description below read more about how to join us and where we're going.\""
      },
      "after": "ad05147a1d2a0114",
      "date": 1696410851615
    },
    {
      "type": "edit",
      "id": "40b0d92084e33758",
      "item": {
        "type": "paragraph",
        "id": "40b0d92084e33758",
        "text": "Structured programming, structure decomposition, design methods, object-oriented programming, software patterns, pattern languages of programming, incremental improvement, extreme programming, scrum, agile, continuous delivery, life cycle management, user interface and user experience principles and design tools."
      },
      "date": 1696411058643
    },
    {
      "type": "edit",
      "id": "2572d331dcf7f002",
      "item": {
        "type": "paragraph",
        "id": "2572d331dcf7f002",
        "text": "But this result, which could be considered Alexander's next big idea, has not yet been adopted by the computer industry."
      },
      "date": 1696411241011
    },
    {
      "type": "add",
      "id": "fa145b2799fa01a2",
      "item": {
        "type": "paragraph",
        "id": "fa145b2799fa01a2",
        "text": "So, what might that be like? Imagine you have a technology stack. You want people to become good at using it. You get your best people together to make a complex product, one they know quite well how to build with your stack. They write a special kind of plan for building this product, which we'll call a sequence. They now build it, following this sequence. But of course it's not quite right so they correct the sequence. You're left with a product, and an unfolding sequence. Then this or another group tests the resulting sequence, building the product again. Eventually you have a well-debugged 'example unfolding' of a complex product with your stack. If the sequence is really good anyone who follows it will be using an expert guide to making any application with that stack. At the same time, problems with the stack itself will become apparent. You can then make other sequences if there are different kinds of approaches to making use of your stack."
      },
      "after": "2572d331dcf7f002",
      "date": 1696411242581
    },
    {
      "type": "edit",
      "id": "c21832a2822fc235",
      "item": {
        "type": "paragraph",
        "id": "c21832a2822fc235",
        "text": "Thanks to a grant from [[Bill Joy]] at Sun Microsystems we had our first real successes with it in 1997. The program was called '[[Gatemaker]]', and we gave it to people who had no idea how to design a good gate. Here [https://youtu.be/m1IZqlnEbmg?t=372 video] is a recording of musician [[Peter Gabriel]] making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex."
      },
      "date": 1696411385968
    },
    {
      "type": "edit",
      "id": "c21832a2822fc235",
      "item": {
        "type": "paragraph",
        "id": "c21832a2822fc235",
        "text": "Thanks to a grant from [[Bill Joy]] at Sun Microsystems we had our first real successes with it in 1997. The program was called '[[Gatemaker]]', and we gave it to people who had no idea how to design a good gate. Here [https://youtu.be/m1IZqlnEbmg?t=373 video] is a recording of musician [[Peter Gabriel]] making use of the sequence. The result has been natural and satisfying for everyone who has been guided to use it. Sequences may turn out to be the best way to communicate ideas about the design and development of anything complex."
      },
      "date": 1696411402752
    },
    {
      "type": "edit",
      "id": "9ea8c7ed7fd5d769",
      "item": {
        "type": "video",
        "id": "9ea8c7ed7fd5d769",
        "text": "YOUTUBE m1IZqlnEbmg\nUnfolding Sequences - An Introductionby [[Greg Bryant]]"
      },
      "date": 1696426245644
    },
    {
      "type": "edit",
      "id": "9ea8c7ed7fd5d769",
      "item": {
        "type": "video",
        "id": "9ea8c7ed7fd5d769",
        "text": "YOUTUBE m1IZqlnEbmg\nUnfolding Sequences - An Introduction by [[Greg Bryant]]"
      },
      "date": 1696426250976
    }
  ]
}