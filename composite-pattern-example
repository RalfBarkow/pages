{
  "title": "Composite Pattern Example",
  "story": [
    {
      "type": "html",
      "text": "A simple example of using the [[Composite Pattern]]:",
      "id": "0ca6cd3f36cc4d7d6f693c2404b33133"
    },
    {
      "type": "code",
      "text": "  // Copyright(C) 2000 Yoshinori Oota All rights reserved.\n  \n  public class CompositeSample\n  { \n    static public void main(String args[])\n    {\n      /* [???]\n      aComposite --aLeaf   \n        --aLeaf   \n        --Composite --aLeaf \n          --aLeaf \n      */\n      Component aComponent1 = new Composite();\n      Component aComponent2 = new Leaf();\n      Component aComponent3 = new Leaf();\n      aComponent1.AddComponent(aComponent2);\n      aComponent1.AddComponent(aComponent3);\n      \n      Component aComponent4 = new Composite();\n      Component aComponent5 = new Leaf();\n      Component aComponent6 = new Leaf();\n      aComponent4.AddComponent(aComponent5);\n      aComponent4.AddComponent(aComponent6);\n      aComponent1.AddComponent(aComponent4);\n      \n      // Opearation [???]\n      aComponent1.Operation(); \n    } \n  }\n  \n  abstract class Component\n  { \n    abstract public void Operation();\n    abstract public void AddComponent(Component aComponent); \n  }\n  \n  class Leaf extends Component\n  { \n    public Leaf() { }\n    \n    public void Operation()\n    { \n      System.out.println(\"**I'm Leaf\"); \n    }\n    \n    public void AddComponent(Component aComponent) { } \n  }\n  \n  class Composite extends Component\n  { \n    private Vector _components; //children\n    \n    public Composite()\n    { \n      _components = new Vector(); \n    }\n    \n    public void Operation()\n    { \n      System.out.println(\"I'm Composite\");\n      Enumeration componentList = _components.elements();\n      while(componentList.hasMoreElements())\n      { \n        // forall Component in _components\n        // aComponent.Operation();\n        \n        Component aComponent = (Component)componentList.nextElement();\n        aComponent.Operation(); \n      } \n    } \n    \n    public void AddComponent(Component aComponent)\n    { \n      _components.addElement(aComponent); \n    } \n  } ",
      "id": "b35a11a567169b904b15f8c66d081b96"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0f2f405e6f2c75d506f992c014293a08"
    },
    {
      "type": "html",
      "text": "Graphically:",
      "id": "6894540726916aa8c1fb7cc68046cdc9"
    },
    {
      "type": "image",
      "url": "http://www.javaworld.com/javaworld/jw-09-2002/images/jw-0913-designpatternsf1.jpg",
      "text": "www.javaworld.com",
      "id": "e1e975d44dd5af5389161e10d320020f"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "a27d35f991df9059e4a9741e74bbf25e"
    },
    {
      "type": "html",
      "text": "\nWorth noting: This is not the GOF implementation, which puts the collection methods on the component. Heated discussion on [[Composite Considered Harmful]].",
      "id": "1afa5cf5ee1a4dfb07e07d8028404fa2"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CompositePatternExample c2.com]",
      "id": "b3fd698f6132765c299cccaba5aea3e9"
    }
  ],
  "journal": [
    {
      "date": 1145965938000,
      "id": "581691ff5247a3314a232b61fc771cd9",
      "type": "create",
      "item": {
        "title": "Composite Pattern Example",
        "story": [
          {
            "type": "html",
            "text": "A simple example of using the [[Composite Pattern]]:",
            "id": "0ca6cd3f36cc4d7d6f693c2404b33133"
          },
          {
            "type": "code",
            "text": "  // Copyright(C) 2000 Yoshinori Oota All rights reserved.\n  \n  public class CompositeSample\n  { \n    static public void main(String args[])\n    {\n      /* [???]\n      aComposite --aLeaf   \n        --aLeaf   \n        --Composite --aLeaf \n          --aLeaf \n      */\n      Component aComponent1 = new Composite();\n      Component aComponent2 = new Leaf();\n      Component aComponent3 = new Leaf();\n      aComponent1.AddComponent(aComponent2);\n      aComponent1.AddComponent(aComponent3);\n      \n      Component aComponent4 = new Composite();\n      Component aComponent5 = new Leaf();\n      Component aComponent6 = new Leaf();\n      aComponent4.AddComponent(aComponent5);\n      aComponent4.AddComponent(aComponent6);\n      aComponent1.AddComponent(aComponent4);\n      \n      // Opearation [???]\n      aComponent1.Operation(); \n    } \n  }\n  \n  abstract class Component\n  { \n    abstract public void Operation();\n    abstract public void AddComponent(Component aComponent); \n  }\n  \n  class Leaf extends Component\n  { \n    public Leaf() { }\n    \n    public void Operation()\n    { \n      System.out.println(\"**I'm Leaf\"); \n    }\n    \n    public void AddComponent(Component aComponent) { } \n  }\n  \n  class Composite extends Component\n  { \n    private Vector _components; //children\n    \n    public Composite()\n    { \n      _components = new Vector(); \n    }\n    \n    public void Operation()\n    { \n      System.out.println(\"I'm Composite\");\n      Enumeration componentList = _components.elements();\n      while(componentList.hasMoreElements())\n      { \n        // forall Component in _components\n        // aComponent.Operation();\n        \n        Component aComponent = (Component)componentList.nextElement();\n        aComponent.Operation(); \n      } \n    } \n    \n    public void AddComponent(Component aComponent)\n    { \n      _components.addElement(aComponent); \n    } \n  } ",
            "id": "b35a11a567169b904b15f8c66d081b96"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0f2f405e6f2c75d506f992c014293a08"
          },
          {
            "type": "html",
            "text": "Graphically:",
            "id": "6894540726916aa8c1fb7cc68046cdc9"
          },
          {
            "type": "image",
            "url": "http://www.javaworld.com/javaworld/jw-09-2002/images/jw-0913-designpatternsf1.jpg",
            "text": "www.javaworld.com",
            "id": "e1e975d44dd5af5389161e10d320020f"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "a27d35f991df9059e4a9741e74bbf25e"
          },
          {
            "type": "html",
            "text": "\nWorth noting: This is not the GOF implementation, which puts the collection methods on the component. Heated discussion on [[Composite Considered Harmful]].",
            "id": "1afa5cf5ee1a4dfb07e07d8028404fa2"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CompositePatternExample c2.com]",
            "id": "b3fd698f6132765c299cccaba5aea3e9"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1706653448794
    }
  ]
}