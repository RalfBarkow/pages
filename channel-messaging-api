{
  "title": "Channel Messaging API",
  "story": [
    {
      "type": "markdown",
      "id": "3f2a6d8ef559934c",
      "text": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two [[IFrame]]s, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end - [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API mdn]\n"
    },
    {
      "type": "markdown",
      "id": "6f43495413a82b3d",
      "text": "- [https://caniuse.com/#feat=channel-messaging Can I Use It?]\n"
    },
    {
      "type": "markdown",
      "id": "624651ce7ec9adbc",
      "text": "# Channel messaging concepts and usage\n"
    },
    {
      "type": "markdown",
      "id": "b38cbc46f2e1446e",
      "text": "A message channel is created using the MessageChannel() constructor. Once created, the two [[ports]] of the channel can be accessed through the MessageChannel.port1 and MessageChannel.port2 properties (which both return MessagePort objects.) \n"
    },
    {
      "type": "markdown",
      "id": "1341c331b50d730e",
      "text": "The app that created the channel uses port1, and the app at the other end of the port uses port2 — you send a message to port2, and transfer the port over to the other browsing context using [[window.postMessage]] along with two arguments (the message to send, and the object to transfer ownership of, in this case the port itself.)\n"
    },
    {
      "type": "markdown",
      "id": "27cccca59c290cec",
      "text": "When these transferable objects are transferred, they are 'neutered' on the previous context — the one they previously belonged to. For instance a port, when is sent, cannot be used anymore by the original context. Note that the only two objects that can currently be transferred are ArrayBuffer and MessagePort.\n"
    },
    {
      "type": "markdown",
      "id": "73f6eeaae49dc195",
      "text": "The other browsing context can listen for the message using MessagePort.onmessage, and grab the contents of the message using the event's data attribute. You could then respond by sending a message back to the original document using MessagePort.postMessage.\n"
    },
    {
      "type": "markdown",
      "id": "212028d0beca5a54",
      "text": "When you want to stop sending messages down the channel, you can invoke MessagePort.close to close the ports.\n\n"
    },
    {
      "type": "markdown",
      "id": "2bb6ee331952a57f",
      "text": "Find out more about how to use this API in:\n- [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging Using channel messaging]"
    },
    {
      "type": "markdown",
      "id": "6e15a48615fba8fe",
      "text": "# See also\n"
    },
    {
      "text": "- [[Communicating With Wiki]]\n- [[Web Messaging]]\n- [[Framed]]",
      "id": "6dfd1b0d-7795-4e93-99fa-9c0d6ea133dd",
      "type": "markdown"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Channel Messaging API",
        "story": []
      },
      "date": 1550596554101
    },
    {
      "item": {
        "type": "factory",
        "id": "3f2a6d8ef559934c"
      },
      "id": "3f2a6d8ef559934c",
      "type": "add",
      "date": 1550596885946
    },
    {
      "type": "edit",
      "id": "3f2a6d8ef559934c",
      "item": {
        "type": "markdown",
        "id": "3f2a6d8ef559934c",
        "text": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end."
      },
      "date": 1550596890753
    },
    {
      "type": "edit",
      "id": "3f2a6d8ef559934c",
      "item": {
        "type": "markdown",
        "id": "3f2a6d8ef559934c",
        "text": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end - [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API mdn]\n"
      },
      "date": 1550596924054
    },
    {
      "type": "add",
      "id": "6f43495413a82b3d",
      "item": {
        "type": "markdown",
        "id": "6f43495413a82b3d",
        "text": "- [https://caniuse.com/#feat=channel-messaging Can I Use It?]\n"
      },
      "after": "3f2a6d8ef559934c",
      "date": 1550596926146
    },
    {
      "item": {
        "type": "factory",
        "id": "624651ce7ec9adbc"
      },
      "id": "624651ce7ec9adbc",
      "type": "add",
      "after": "6f43495413a82b3d",
      "date": 1550597016329
    },
    {
      "type": "edit",
      "id": "624651ce7ec9adbc",
      "item": {
        "type": "markdown",
        "id": "624651ce7ec9adbc",
        "text": "A message channel is created using the MessageChannel() constructor. Once created, the two ports of the channel can be accessed through the MessageChannel.port1 and MessageChannel.port2 properties (which both return MessagePort objects.) The app that created the channel uses port1, and the app at the other end of the port uses port2 — you send a message to port2, and transfer the port over to the other browsing context using window.postMessage along with two arguments (the message to send, and the object to transfer ownership of, in this case the port itself.)\n\nWhen these transferable objects are transferred, they are 'neutered' on the previous context — the one they previously belonged to. For instance a port, when is sent, cannot be used anymore by the original context. Note that the only two objects that can currently be transferred are ArrayBuffer and MessagePort.\n\nThe other browsing context can listen for the message using MessagePort.onmessage, and grab the contents of the message using the event's data attribute. You could then respond by sending a message back to the original document using MessagePort.postMessage.\n\nWhen you want to stop sending messages down the channel, you can invoke MessagePort.close to close the ports.\n\nFind out more about how to use this API in Using channel messaging."
      },
      "date": 1550597022640
    },
    {
      "type": "edit",
      "id": "624651ce7ec9adbc",
      "item": {
        "type": "markdown",
        "id": "624651ce7ec9adbc",
        "text": "# Channel messaging concepts and usage\n"
      },
      "date": 1550597035099
    },
    {
      "type": "add",
      "id": "b38cbc46f2e1446e",
      "item": {
        "type": "markdown",
        "id": "b38cbc46f2e1446e",
        "text": "A message channel is created using the MessageChannel() constructor. Once created, the two ports of the channel can be accessed through the MessageChannel.port1 and MessageChannel.port2 properties (which both return MessagePort objects.) \n"
      },
      "after": "624651ce7ec9adbc",
      "date": 1550597043562
    },
    {
      "type": "add",
      "id": "1341c331b50d730e",
      "item": {
        "type": "markdown",
        "id": "1341c331b50d730e",
        "text": "The app that created the channel uses port1, and the app at the other end of the port uses port2 — you send a message to port2, and transfer the port over to the other browsing context using [[window.postMessage]] along with two arguments (the message to send, and the object to transfer ownership of, in this case the port itself.)\n"
      },
      "after": "b38cbc46f2e1446e",
      "date": 1550597054897
    },
    {
      "type": "add",
      "id": "27cccca59c290cec",
      "item": {
        "type": "markdown",
        "id": "27cccca59c290cec",
        "text": "When these transferable objects are transferred, they are 'neutered' on the previous context — the one they previously belonged to. For instance a port, when is sent, cannot be used anymore by the original context. Note that the only two objects that can currently be transferred are ArrayBuffer and MessagePort.\n"
      },
      "after": "1341c331b50d730e",
      "date": 1550597059768
    },
    {
      "type": "add",
      "id": "73f6eeaae49dc195",
      "item": {
        "type": "markdown",
        "id": "73f6eeaae49dc195",
        "text": "The other browsing context can listen for the message using MessagePort.onmessage, and grab the contents of the message using the event's data attribute. You could then respond by sending a message back to the original document using MessagePort.postMessage.\n"
      },
      "after": "27cccca59c290cec",
      "date": 1550597066780
    },
    {
      "type": "add",
      "id": "212028d0beca5a54",
      "item": {
        "type": "markdown",
        "id": "212028d0beca5a54",
        "text": "When you want to stop sending messages down the channel, you can invoke MessagePort.close to close the ports.\n"
      },
      "after": "73f6eeaae49dc195",
      "date": 1550597070753
    },
    {
      "type": "edit",
      "id": "212028d0beca5a54",
      "item": {
        "type": "markdown",
        "id": "212028d0beca5a54",
        "text": "When you want to stop sending messages down the channel, you can invoke MessagePort.close to close the ports.\n\n"
      },
      "date": 1550597079609
    },
    {
      "type": "add",
      "id": "2bb6ee331952a57f",
      "item": {
        "type": "markdown",
        "id": "2bb6ee331952a57f",
        "text": "Find out more about how to use this API in Using channel messaging."
      },
      "after": "212028d0beca5a54",
      "date": 1550597081089
    },
    {
      "type": "edit",
      "id": "2bb6ee331952a57f",
      "item": {
        "type": "markdown",
        "id": "2bb6ee331952a57f",
        "text": "Find out more about how to use this API in Using channel [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging messaging]"
      },
      "date": 1550597102634
    },
    {
      "type": "edit",
      "id": "2bb6ee331952a57f",
      "item": {
        "type": "markdown",
        "id": "2bb6ee331952a57f",
        "text": "Find out more about how to use this API in [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging Using channel messaging]"
      },
      "date": 1550597133538
    },
    {
      "type": "edit",
      "id": "2bb6ee331952a57f",
      "item": {
        "type": "markdown",
        "id": "2bb6ee331952a57f",
        "text": "Find out more about how to use this API in:\n- [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging Using channel messaging]"
      },
      "date": 1550597143571
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "6e15a48615fba8fe",
        "text": "# See also\n"
      },
      "after": "2bb6ee331952a57f",
      "id": "6e15a48615fba8fe",
      "date": 1550597150809
    },
    {
      "type": "add",
      "item": {
        "text": "- [[Communicating With Wiki]]\n- [[Web Messaging]]\n- [[Channel Messaging API]]\n- [[Framed]]\n- [[SVG Image Map]]\n",
        "id": "6dfd1b0d-7795-4e93-99fa-9c0d6ea133dd",
        "type": "markdown"
      },
      "after": "2bb6ee331952a57f",
      "id": "6dfd1b0d-7795-4e93-99fa-9c0d6ea133dd",
      "date": 1550597154332
    },
    {
      "type": "move",
      "order": [
        "3f2a6d8ef559934c",
        "6f43495413a82b3d",
        "624651ce7ec9adbc",
        "b38cbc46f2e1446e",
        "1341c331b50d730e",
        "27cccca59c290cec",
        "73f6eeaae49dc195",
        "212028d0beca5a54",
        "2bb6ee331952a57f",
        "6e15a48615fba8fe",
        "6dfd1b0d-7795-4e93-99fa-9c0d6ea133dd"
      ],
      "id": "6e15a48615fba8fe",
      "date": 1550597158338
    },
    {
      "type": "edit",
      "id": "6dfd1b0d-7795-4e93-99fa-9c0d6ea133dd",
      "item": {
        "text": "- [[Communicating With Wiki]]\n- [[Web Messaging]]\n- [[Framed]]",
        "id": "6dfd1b0d-7795-4e93-99fa-9c0d6ea133dd",
        "type": "markdown"
      },
      "date": 1550597167442
    },
    {
      "type": "fork",
      "site": "future.fedwiki.org",
      "date": 1627296069391
    },
    {
      "type": "edit",
      "id": "3f2a6d8ef559934c",
      "item": {
        "type": "markdown",
        "id": "3f2a6d8ef559934c",
        "text": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two [[IFrame]]s, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end - [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API mdn]\n"
      },
      "date": 1637917440911
    },
    {
      "type": "edit",
      "id": "b38cbc46f2e1446e",
      "item": {
        "type": "markdown",
        "id": "b38cbc46f2e1446e",
        "text": "A message channel is created using the MessageChannel() constructor. Once created, the two [[ports]] of the channel can be accessed through the MessageChannel.port1 and MessageChannel.port2 properties (which both return MessagePort objects.) \n"
      },
      "date": 1637917468355
    }
  ]
}