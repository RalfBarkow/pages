{
  "title": "Objective-Lepiter",
  "story": [
    {
      "type": "markdown",
      "id": "b54a621c5a756b5e",
      "text": "SeanDeNigris — 2022-05-27 [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]\nThis is my library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github] ⇒ [[Objective-Lepiter]]"
    },
    {
      "type": "markdown",
      "id": "1f47c40da20e50d0",
      "text": "# OlObjectUIDReference"
    },
    {
      "type": "markdown",
      "id": "13c7bda723776e4c",
      "text": "\"I am a dynamic reference to an object with a UUID, similar to what aFileLocator is for a file\".\n\n### Responsibilities\n- I maintain a UID representing an object\n- I am able to produce the object on demand\n- I am easily serializable because my state is only value objects which can be materialized independent of any particular object graph\n- Subclasses must implement #object in a way that preserves the previous point e.g. don't store a block or an object that will be serialized elsewhere\n\n### Collaborators\nMy client."
    },
    {
      "type": "pagefold",
      "id": "3845412b800c8711",
      "text": "~"
    },
    {
      "type": "graphviz",
      "id": "59b846d7ff12ebbc",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Objective-Lepiter",
        "story": []
      },
      "date": 1653995103878
    },
    {
      "id": "b54a621c5a756b5e",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "b54a621c5a756b5e",
        "text": "SeanDeNigris — 2022-05-27\nThis is my library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation, you might be able to hook into Lepiter's UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata https://github.com/seandenigris/Objective-Lepiter ⇒ [[Objective-Lepiter]]"
      },
      "date": 1653995108238
    },
    {
      "type": "fork",
      "date": 1653995119247
    },
    {
      "type": "edit",
      "id": "b54a621c5a756b5e",
      "item": {
        "type": "markdown",
        "id": "b54a621c5a756b5e",
        "text": "SeanDeNigris — 2022-05-27 [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]\nThis is my library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation, you might be able to hook into Lepiter's UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata https://github.com/seandenigris/Objective-Lepiter ⇒ [[Objective-Lepiter]]"
      },
      "date": 1653995137839
    },
    {
      "type": "edit",
      "id": "b54a621c5a756b5e",
      "item": {
        "type": "markdown",
        "id": "b54a621c5a756b5e",
        "text": "SeanDeNigris — 2022-05-27 [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]\nThis is my library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation, you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata https://github.com/seandenigris/Objective-Lepiter ⇒ [[Objective-Lepiter]]"
      },
      "date": 1653995165717
    },
    {
      "type": "edit",
      "id": "b54a621c5a756b5e",
      "item": {
        "type": "markdown",
        "id": "b54a621c5a756b5e",
        "text": "SeanDeNigris — 2022-05-27 [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]\nThis is my library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata https://github.com/seandenigris/Objective-Lepiter ⇒ [[Objective-Lepiter]]"
      },
      "date": 1653995197310
    },
    {
      "type": "edit",
      "id": "b54a621c5a756b5e",
      "item": {
        "type": "markdown",
        "id": "b54a621c5a756b5e",
        "text": "SeanDeNigris — 2022-05-27 [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]\nThis is my library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github] ⇒ [[Objective-Lepiter]]"
      },
      "date": 1653995230113
    },
    {
      "item": {
        "type": "factory",
        "id": "1f47c40da20e50d0"
      },
      "id": "1f47c40da20e50d0",
      "type": "add",
      "after": "b54a621c5a756b5e",
      "date": 1653995648108
    },
    {
      "type": "edit",
      "id": "1f47c40da20e50d0",
      "item": {
        "type": "markdown",
        "id": "1f47c40da20e50d0",
        "text": "# OlObjectUIDReference"
      },
      "date": 1653995654465
    },
    {
      "item": {
        "type": "factory",
        "id": "cadcb6b46409f8a2"
      },
      "id": "cadcb6b46409f8a2",
      "type": "add",
      "after": "1f47c40da20e50d0",
      "date": 1653995659770
    },
    {
      "type": "edit",
      "id": "cadcb6b46409f8a2",
      "item": {
        "type": "markdown",
        "id": "cadcb6b46409f8a2",
        "text": "\"I am a dynamic reference to an object with a UUID, similar to what aFileLocator is for a file\".\n\n#Responsibilities\n- I maintain a UID representing an object\n- I am able to produce the object on demand\n- I am easily serializable because my state is only value objects which can be materialized independent of any particular object graph\n- Subclasses must implement #object in a way that preserves the previous point e.g. don't store a block or an object that will be serialized elsewhere\n\n#Collaborators\nMy client."
      },
      "date": 1653995661365
    },
    {
      "type": "remove",
      "id": "cadcb6b46409f8a2",
      "date": 1653995668832
    },
    {
      "item": {
        "type": "factory",
        "id": "13c7bda723776e4c"
      },
      "id": "13c7bda723776e4c",
      "type": "add",
      "after": "1f47c40da20e50d0",
      "date": 1653995670035
    },
    {
      "type": "edit",
      "id": "13c7bda723776e4c",
      "item": {
        "type": "markdown",
        "id": "13c7bda723776e4c",
        "text": "\"I am a dynamic reference to an object with a UUID, similar to what aFileLocator is for a file\".\n\n#Responsibilities\n- I maintain a UID representing an object\n- I am able to produce the object on demand\n- I am easily serializable because my state is only value objects which can be materialized independent of any particular object graph\n- Subclasses must implement #object in a way that preserves the previous point e.g. don't store a block or an object that will be serialized elsewhere\n\n#Collaborators\nMy client."
      },
      "date": 1653995672097
    },
    {
      "type": "edit",
      "id": "13c7bda723776e4c",
      "item": {
        "type": "markdown",
        "id": "13c7bda723776e4c",
        "text": "\"I am a dynamic reference to an object with a UUID, similar to what aFileLocator is for a file\".\n\n### Responsibilities\n- I maintain a UID representing an object\n- I am able to produce the object on demand\n- I am easily serializable because my state is only value objects which can be materialized independent of any particular object graph\n- Subclasses must implement #object in a way that preserves the previous point e.g. don't store a block or an object that will be serialized elsewhere\n\n### Collaborators\nMy client."
      },
      "date": 1653995689019
    },
    {
      "item": {
        "type": "factory",
        "id": "3fcea9d0b94c8e79"
      },
      "id": "3fcea9d0b94c8e79",
      "type": "add",
      "after": "13c7bda723776e4c",
      "date": 1654084808103
    },
    {
      "type": "remove",
      "id": "3fcea9d0b94c8e79",
      "date": 1654084812531
    },
    {
      "item": {
        "type": "factory",
        "id": "3845412b800c8711"
      },
      "id": "3845412b800c8711",
      "type": "add",
      "after": "13c7bda723776e4c",
      "date": 1654084814783
    },
    {
      "type": "edit",
      "id": "3845412b800c8711",
      "item": {
        "type": "pagefold",
        "id": "3845412b800c8711",
        "text": "~"
      },
      "date": 1654084818389
    },
    {
      "item": {
        "type": "factory",
        "id": "59b846d7ff12ebbc"
      },
      "id": "59b846d7ff12ebbc",
      "type": "add",
      "after": "3845412b800c8711",
      "date": 1654084819858
    },
    {
      "type": "edit",
      "id": "59b846d7ff12ebbc",
      "item": {
        "type": "graphviz",
        "id": "59b846d7ff12ebbc",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1654084822550
    }
  ]
}