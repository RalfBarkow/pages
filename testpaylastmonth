{
  "title": "testPayLastMonth",
  "story": [
    {
      "type": "paragraph",
      "id": "050b07960cd495a0",
      "text": "The next test case shows that we can look up pay rates even if the pay rate changes:"
    },
    {
      "type": "code",
      "id": "07470f7631c93764",
      "text": "NavigationTest>>testPayLastMonth\n| contract firstVersion secondVersion |\ncontract := Contract new.\nfirstVersion := ContractVersion pay: 1000.\ncontract versionAt: '1/1/99' asDate put: firstVersion.\nsecondVersion := ContractVersion pay: 2000.\ncontract versionAt: '2/1/99' asDate put: secondVersion.\nself assert: (contract versionAt: '1/1/99' asDate) pay = 1000.\nself assert: (contract versionAt: '2/1/99' asDate) pay = 2000\n"
    },
    {
      "type": "paragraph",
      "id": "e37b6620a7df76ad",
      "text": "This test case is already satisfied by the code above."
    },
    {
      "type": "paragraph",
      "id": "d64c1e2ddfdefba7",
      "text": "⇒ [[ContractVersion]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "testPayLastMonth",
        "story": []
      },
      "date": 1654322146564
    },
    {
      "item": {
        "type": "factory",
        "id": "050b07960cd495a0"
      },
      "id": "050b07960cd495a0",
      "type": "add",
      "date": 1654322165643
    },
    {
      "type": "edit",
      "id": "050b07960cd495a0",
      "item": {
        "type": "paragraph",
        "id": "050b07960cd495a0",
        "text": "The next test case shows that we can look up pay rates even if the pay rate changes:\nNavigationTest>>testPayLastMonth\n| contract firstVersion secondVersion |\ncontract := Contract new.\nfirstVersion := ContractVersion pay: 1000.\ncontract versionAt: '1/1/99' asDate put: firstVersion.\nsecondVersion := ContractVersion pay: 2000.\ncontract versionAt: '2/1/99' asDate put: secondVersion.\nself assert: (contract versionAt: '1/1/99' asDate) pay = 1000.\nself assert: (contract versionAt: '2/1/99' asDate) pay = 2000\nThis test case is already satisfied by the code above."
      },
      "date": 1654322168308
    },
    {
      "type": "edit",
      "id": "050b07960cd495a0",
      "item": {
        "type": "paragraph",
        "id": "050b07960cd495a0",
        "text": "The next test case shows that we can look up pay rates even if the pay rate changes:\nNavigationTest>>testPayLastMonth\n| contract firstVersion secondVersion |\ncontract := Contract new.\nfirstVersion := ContractVersion pay: 1000.\ncontract versionAt: '1/1/99' asDate put: firstVersion.\nsecondVersion := ContractVersion pay: 2000.\ncontract versionAt: '2/1/99' asDate put: secondVersion.\nself assert: (contract versionAt: '1/1/99' asDate) pay = 1000.\nself assert: (contract versionAt: '2/1/99' asDate) pay = 2000\n"
      },
      "date": 1654322177896
    },
    {
      "type": "add",
      "id": "e37b6620a7df76ad",
      "item": {
        "type": "paragraph",
        "id": "e37b6620a7df76ad",
        "text": "This test case is already satisfied by the code above."
      },
      "after": "050b07960cd495a0",
      "date": 1654322181905
    },
    {
      "type": "edit",
      "id": "050b07960cd495a0",
      "item": {
        "type": "paragraph",
        "id": "050b07960cd495a0",
        "text": "The next test case shows that we can look up pay rates even if the pay rate changes:"
      },
      "date": 1654322186965
    },
    {
      "item": {
        "type": "factory",
        "id": "07470f7631c93764"
      },
      "id": "07470f7631c93764",
      "type": "add",
      "after": "e37b6620a7df76ad",
      "date": 1654322191607
    },
    {
      "type": "edit",
      "id": "07470f7631c93764",
      "item": {
        "type": "code",
        "id": "07470f7631c93764",
        "text": "NavigationTest>>testPayLastMonth\n| contract firstVersion secondVersion |\ncontract := Contract new.\nfirstVersion := ContractVersion pay: 1000.\ncontract versionAt: '1/1/99' asDate put: firstVersion.\nsecondVersion := ContractVersion pay: 2000.\ncontract versionAt: '2/1/99' asDate put: secondVersion.\nself assert: (contract versionAt: '1/1/99' asDate) pay = 1000.\nself assert: (contract versionAt: '2/1/99' asDate) pay = 2000\n"
      },
      "date": 1654322194249
    },
    {
      "id": "07470f7631c93764",
      "type": "move",
      "order": [
        "050b07960cd495a0",
        "07470f7631c93764",
        "e37b6620a7df76ad"
      ],
      "date": 1654322195929
    },
    {
      "item": {
        "type": "factory",
        "id": "d64c1e2ddfdefba7"
      },
      "id": "d64c1e2ddfdefba7",
      "type": "add",
      "after": "e37b6620a7df76ad",
      "date": 1654322209641
    },
    {
      "type": "edit",
      "id": "d64c1e2ddfdefba7",
      "item": {
        "type": "paragraph",
        "id": "d64c1e2ddfdefba7",
        "text": "[[ContractVersion]]"
      },
      "date": 1654322220232
    },
    {
      "type": "edit",
      "id": "d64c1e2ddfdefba7",
      "item": {
        "type": "paragraph",
        "id": "d64c1e2ddfdefba7",
        "text": "⇒ [[ContractVersion]]"
      },
      "date": 1654322226642
    }
  ]
}