{
  "title": "Expression Parsing",
  "story": [
    {
      "type": "paragraph",
      "id": "b5ee79c2ab6e0270",
      "text": "We wonder if we can parse an arithmetic expression and return an abstract syntax tree as a graph. Try this one:"
    },
    {
      "type": "code",
      "id": "de9498e06c5bf481",
      "text": "\"360/(2*Pi)\""
    },
    {
      "type": "frame",
      "id": "d28867297e3b4f1f",
      "text": "http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\nHEIGHT 240"
    },
    {
      "type": "markdown",
      "id": "dcf63055151a61af",
      "text": "We'll match a few things and make a few nodes then see if we can't recurse a bit and end up with a general solution."
    },
    {
      "type": "code",
      "id": "98581c30481726a8",
      "text": "const expr = (a,op,b) =>\n  r(n('Opr',op),n('Num',a),n('Exp',b))\n\nconst n = (type,name) =>\n  graph.addNode(type,{name})\n\nconst r = (op, ...args) => {\n  for (const arg of args)\n    graph.addRel('',op,arg)\n  return op\n}"
    },
    {
      "type": "code",
      "id": "c552922cec666ac0",
      "text": "let op = json.split('/')\nif (op) expr(op[0],'/',op[1])\n\n\n"
    },
    {
      "type": "paragraph",
      "id": "2552cc153037b9d8",
      "text": "Tip: LL(1) grammar of arithmetic operations. [https://www.lewuathe.com/how-to-construct-grammar-of-arithmetic-operations.html post]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Expression Parsing",
        "story": [
          {
            "type": "paragraph",
            "id": "b5ee79c2ab6e0270",
            "text": "Describe here the diagramming tool to be translated and how one can get a json formatted description out of it."
          },
          {
            "type": "frame",
            "id": "d28867297e3b4f1f",
            "text": "http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\nHEIGHT 240"
          },
          {
            "type": "markdown",
            "id": "dcf63055151a61af",
            "text": "Add code here to extract nodes and relations from _json_ and add them to _graph_. Remember node ids in _nids_."
          },
          {
            "type": "code",
            "id": "c552922cec666ac0",
            "text": "nids.m = graph.addNode('Man', {name:'Pat'})\nnids.w = graph.addNode('Woman', {name:'Jane'})\nnids.c = graph.addNode('Child', {name:'Ward'})"
          },
          {
            "type": "code",
            "id": "525c4b38800ac571",
            "text": "graph.addRel('Mother', nids.w, nids.c)\ngraph.addRel('Father', nids.m, nids.c)"
          }
        ]
      },
      "date": 1667519304309
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "graph.addNode('Expr', {name:json[0]})\n"
      },
      "date": 1667519534689
    },
    {
      "type": "remove",
      "id": "525c4b38800ac571",
      "date": 1667519564903
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "let op = parse('/', json[0])\nif (op) expr(op[0],'/',op[1])\n\n\n"
      },
      "date": 1667519961644
    },
    {
      "item": {
        "type": "factory",
        "id": "98581c30481726a8"
      },
      "id": "98581c30481726a8",
      "type": "add",
      "after": "c552922cec666ac0",
      "date": 1667519964000
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "function expr(l,op,r) {\n  return rel(node(op),node(l),node(r))\n}\n\nfunction node(t) {\n  return graph.addNode('Exp',{name:t})\n}\n\nfunction rel(op, ...args) {\n  for (const arg of args) {\n    graph.addRel('Arg',op,arg)\n  }\n}"
      },
      "date": 1667520407829
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "let op = json[0].split('/')\nif (op) expr(op[0],'/',op[1])\n\n\n"
      },
      "date": 1667520463384
    },
    {
      "type": "edit",
      "id": "b5ee79c2ab6e0270",
      "item": {
        "type": "paragraph",
        "id": "b5ee79c2ab6e0270",
        "text": "We wonder if we can parse an arithmetic expression and return an abstract syntax tree as our converted graph."
      },
      "date": 1667520562633
    },
    {
      "type": "edit",
      "id": "b5ee79c2ab6e0270",
      "item": {
        "type": "paragraph",
        "id": "b5ee79c2ab6e0270",
        "text": "We wonder if we can parse an arithmetic expression and return an abstract syntax tree as our converted graph. Try this one:"
      },
      "date": 1667520583609
    },
    {
      "type": "add",
      "id": "de9498e06c5bf481",
      "item": {
        "type": "factory",
        "id": "de9498e06c5bf481",
        "text": "."
      },
      "after": "b5ee79c2ab6e0270",
      "date": 1667520603373
    },
    {
      "type": "edit",
      "id": "de9498e06c5bf481",
      "item": {
        "type": "code",
        "id": "de9498e06c5bf481",
        "text": "[\"360/(2*Pi)\"]"
      },
      "date": 1667520633400
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "let op = json.split('/')\nif (op) expr(op[0],'/',op[1])\n\n\n"
      },
      "date": 1667520693399
    },
    {
      "type": "edit",
      "id": "de9498e06c5bf481",
      "item": {
        "type": "code",
        "id": "de9498e06c5bf481",
        "text": "\"360/(2*Pi)\""
      },
      "date": 1667520717947
    },
    {
      "type": "edit",
      "id": "dcf63055151a61af",
      "item": {
        "type": "markdown",
        "id": "dcf63055151a61af",
        "text": "We'll match a few things and make a few nodes then see if we can't recurse a bit and end up with a general solution."
      },
      "date": 1667521016643
    },
    {
      "type": "edit",
      "id": "b5ee79c2ab6e0270",
      "item": {
        "type": "paragraph",
        "id": "b5ee79c2ab6e0270",
        "text": "We wonder if we can parse an arithmetic expression and return an abstract syntax tree as a graph. Try this one:"
      },
      "date": 1667521204683
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  rel(node(op),node(l),node(r))\n\nfunction node(t) {\n  return graph.addNode('Exp',{name:t})\n}\n\nfunction rel(op, ...args) {\n  for (const arg of args) {\n    graph.addRel('Arg',op,arg)\n  }\n}"
      },
      "date": 1667522332661
    },
    {
      "id": "98581c30481726a8",
      "type": "move",
      "order": [
        "b5ee79c2ab6e0270",
        "de9498e06c5bf481",
        "d28867297e3b4f1f",
        "dcf63055151a61af",
        "98581c30481726a8",
        "c552922cec666ac0"
      ],
      "date": 1667522348504
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  rel(node(op),node(l),node(r))\n\nconst node = t =>\n  graph.addNode('Exp',{name:t})\n\nrel = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('Arg',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667522457899
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  rel(node(op),node(l),node(r))\n\nconst node = t =>\n  graph.addNode('Exp',{name:t})\n\nconst rel = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('Arg',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667522478054
    },
    {
      "type": "add",
      "id": "2552cc153037b9d8",
      "item": {
        "type": "paragraph",
        "id": "2552cc153037b9d8",
        "text": "Tip: How to construct LL(1) grammar of arithmetic operations. "
      },
      "after": "dcf63055151a61af",
      "date": 1667522790602
    },
    {
      "type": "edit",
      "id": "2552cc153037b9d8",
      "item": {
        "type": "paragraph",
        "id": "2552cc153037b9d8",
        "text": "Tip: How to construct LL(1) grammar of arithmetic operations. [https://www.lewuathe.com/how-to-construct-grammar-of-arithmetic-operations.html post]"
      },
      "date": 1667522805347
    },
    {
      "type": "edit",
      "id": "2552cc153037b9d8",
      "item": {
        "type": "paragraph",
        "id": "2552cc153037b9d8",
        "text": "Tip: LL(1) grammar of arithmetic operations. [https://www.lewuathe.com/how-to-construct-grammar-of-arithmetic-operations.html post]"
      },
      "date": 1667522824492
    },
    {
      "id": "2552cc153037b9d8",
      "type": "move",
      "order": [
        "b5ee79c2ab6e0270",
        "de9498e06c5bf481",
        "d28867297e3b4f1f",
        "dcf63055151a61af",
        "98581c30481726a8",
        "c552922cec666ac0",
        "2552cc153037b9d8"
      ],
      "date": 1667522837942
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  rel(node(op),node(l),node(r))\n\nconst node = t =>\n  graph.addNode('Exp',{name:t})\n\nconst rel = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667592652603
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  rel(node(op),node(l),node(r))\n\nconst node = t =>\n  graph.addNode('',{name:t})\n\nconst rel = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667592675277
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  rel(node(op),node(l),node(r))\n\nconst node = t =>\n  graph.addNode('Exp',{name:t})\n\nconst rel = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667592702287
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  rel(node('Op',op),node('Num',l),node('Exp',r))\n\nconst node = (type,name) =>\n  graph.addNode(type,{name})\n\nconst rel = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667592840000
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  rel(node('Opr',op),node('Num',l),node('Exp',r))\n\nconst node = (type,name) =>\n  graph.addNode(type,{name})\n\nconst rel = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667592884894
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (l,op,r) =>\n  r(n('Opr',op),n('Num',l),n('Exp',r))\n\nconst n = (type,name) =>\n  graph.addNode(type,{name})\n\nconst r = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667593143767
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (a,op,b) =>\n  r(n('Opr',op),n('Num',a),n('Exp',b))\n\nconst n = (type,name) =>\n  graph.addNode(type,{name})\n\nconst r = (op, ...args) => {\n  for (const arg of args) {\n    graph.addRel('',op,arg)\n  }\n  return op\n}"
      },
      "date": 1667593187025
    },
    {
      "type": "edit",
      "id": "98581c30481726a8",
      "item": {
        "type": "code",
        "id": "98581c30481726a8",
        "text": "const expr = (a,op,b) =>\n  r(n('Opr',op),n('Num',a),n('Exp',b))\n\nconst n = (type,name) =>\n  graph.addNode(type,{name})\n\nconst r = (op, ...args) => {\n  for (const arg of args)\n    graph.addRel('',op,arg)\n  return op\n}"
      },
      "date": 1667593213783
    },
    {
      "type": "fork",
      "site": "hsc.fed.wiki",
      "date": 1667638915376
    }
  ]
}