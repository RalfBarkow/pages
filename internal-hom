{
  "title": "Internal Hom",
  "story": [
    {
      "type": "markdown",
      "id": "a28e3c3337181232",
      "text": "In [[Category Theory]] objects are described as [[Universal Objects]]. The internal hom is one of these objects. In the well known [[Category Set]] it is the function object. This means that it is possible to encode a function "
    },
    {
      "type": "mathjax",
      "id": "59c8faacb16ffa18",
      "text": "a = f(b)"
    },
    {
      "type": "markdown",
      "id": "dbe2d1d86e588599",
      "text": "with type signature"
    },
    {
      "type": "mathjax",
      "id": "f7c62ba93e0f354a",
      "text": "$$ f : A \\rightarrow B $$"
    },
    {
      "type": "markdown",
      "id": "ab471e5564bd806e",
      "text": "as a set of tuples\n"
    },
    {
      "type": "mathjax",
      "id": "0ab0960ce51847cd",
      "text": "$$ \\{ <a, f(b)> | b \\in B \\} $$"
    },
    {
      "type": "markdown",
      "id": "608550004130b0d8",
      "text": "This is related [https://wiki.ralfbarkow.ch/view/welcome-visitors/view/functional-programming/view/currying-schonfinkelling currying]. It is the opposite operation. Currying takes a function which works on two arguments transforms it into a function with one argument which then returns a function with one argument. The opposite operation is known as [https://hoogle.haskell.org/?hoogle=+%28a+-%3E+b+-%3E+c%29+-%3E+%28a%2C+b%29+-%3E+c&scope=set%3Astackage `uncurry`] in Haskell."
    },
    {
      "type": "code",
      "id": "2109c40a528e783c",
      "text": "uncurry :: (a -> b -> c) -> (a, b) -> c\nuncurry f a b = f (a, b)"
    },
    {
      "type": "markdown",
      "id": "e635c83ce04cb545",
      "text": "The function curry looks as follows:"
    },
    {
      "type": "code",
      "id": "bd7f6b3a24a78d42",
      "text": "curry :: ((a, b) -> c) -> a -> b -> c\ncurry f (a, b) = f a b"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Internal Hom",
        "story": []
      },
      "date": 1676880827369
    },
    {
      "item": {
        "type": "factory",
        "id": "a28e3c3337181232"
      },
      "id": "a28e3c3337181232",
      "type": "add",
      "date": 1676880858196
    },
    {
      "type": "edit",
      "id": "a28e3c3337181232",
      "item": {
        "type": "markdown",
        "id": "a28e3c3337181232",
        "text": "In [[Category Theory]] objects are described as [[Universal Objects]]. The internal hom is one of these objects. In the well known [[Category Set]] it is the function object. This means that it is possible to encode a function "
      },
      "date": 1676881005459
    },
    {
      "item": {
        "type": "factory",
        "id": "59c8faacb16ffa18"
      },
      "id": "59c8faacb16ffa18",
      "type": "add",
      "after": "a28e3c3337181232",
      "date": 1676881007969
    },
    {
      "type": "edit",
      "id": "59c8faacb16ffa18",
      "item": {
        "type": "mathjax",
        "id": "59c8faacb16ffa18",
        "text": "a = f(b)"
      },
      "date": 1676881037112
    },
    {
      "item": {
        "type": "factory",
        "id": "ab471e5564bd806e"
      },
      "id": "ab471e5564bd806e",
      "type": "add",
      "after": "59c8faacb16ffa18",
      "date": 1676881043215
    },
    {
      "type": "edit",
      "id": "ab471e5564bd806e",
      "item": {
        "type": "markdown",
        "id": "ab471e5564bd806e",
        "text": "as a set of tuples\n"
      },
      "date": 1676881054457
    },
    {
      "item": {
        "type": "factory",
        "id": "0ab0960ce51847cd"
      },
      "id": "0ab0960ce51847cd",
      "type": "add",
      "after": "ab471e5564bd806e",
      "date": 1676881056286
    },
    {
      "type": "edit",
      "id": "0ab0960ce51847cd",
      "item": {
        "type": "mathjax",
        "id": "0ab0960ce51847cd",
        "text": "{ <a. f(b)> | b "
      },
      "date": 1676881076799
    },
    {
      "type": "edit",
      "id": "0ab0960ce51847cd",
      "item": {
        "type": "mathjax",
        "id": "0ab0960ce51847cd",
        "text": "{ <a. f(b)> | b \\elem B } "
      },
      "date": 1676881136929
    },
    {
      "type": "edit",
      "id": "0ab0960ce51847cd",
      "item": {
        "type": "mathjax",
        "id": "0ab0960ce51847cd",
        "text": "$${ <a. f(b)> | b \\elem B } $$"
      },
      "date": 1676881165297
    },
    {
      "type": "edit",
      "id": "0ab0960ce51847cd",
      "item": {
        "type": "mathjax",
        "id": "0ab0960ce51847cd",
        "text": "$$ \\{ <a. f(b)> | b \\elem B \\} $$"
      },
      "date": 1676881179801
    },
    {
      "type": "edit",
      "id": "0ab0960ce51847cd",
      "item": {
        "type": "mathjax",
        "id": "0ab0960ce51847cd",
        "text": "$$ \\{ <a. f(b)> | b \\in B \\} $$"
      },
      "date": 1676881185408
    },
    {
      "type": "edit",
      "id": "0ab0960ce51847cd",
      "item": {
        "type": "mathjax",
        "id": "0ab0960ce51847cd",
        "text": "$$ \\{ <a, f(b)> | b \\in B \\} $$"
      },
      "date": 1676881195146
    },
    {
      "item": {
        "type": "factory",
        "id": "dbe2d1d86e588599"
      },
      "id": "dbe2d1d86e588599",
      "type": "add",
      "after": "0ab0960ce51847cd",
      "date": 1676881214027
    },
    {
      "type": "edit",
      "id": "dbe2d1d86e588599",
      "item": {
        "type": "markdown",
        "id": "dbe2d1d86e588599",
        "text": "with type signature"
      },
      "date": 1676881221947
    },
    {
      "id": "dbe2d1d86e588599",
      "type": "move",
      "order": [
        "a28e3c3337181232",
        "59c8faacb16ffa18",
        "dbe2d1d86e588599",
        "ab471e5564bd806e",
        "0ab0960ce51847cd"
      ],
      "date": 1676881225019
    },
    {
      "item": {
        "type": "factory",
        "id": "990b69b073d44aef"
      },
      "id": "990b69b073d44aef",
      "type": "add",
      "after": "0ab0960ce51847cd",
      "date": 1676881226800
    },
    {
      "type": "edit",
      "id": "990b69b073d44aef",
      "item": {
        "type": "markdown",
        "id": "990b69b073d44aef",
        "text": "$ f : A \\larrwo B $"
      },
      "date": 1676881241025
    },
    {
      "type": "edit",
      "id": "990b69b073d44aef",
      "item": {
        "type": "markdown",
        "id": "990b69b073d44aef",
        "text": "$$ f : A \\larrow B $$"
      },
      "date": 1676881248953
    },
    {
      "type": "remove",
      "id": "990b69b073d44aef",
      "date": 1676881267065
    },
    {
      "item": {
        "type": "factory",
        "id": "f7c62ba93e0f354a"
      },
      "id": "f7c62ba93e0f354a",
      "type": "add",
      "after": "0ab0960ce51847cd",
      "date": 1676881268799
    },
    {
      "type": "edit",
      "id": "f7c62ba93e0f354a",
      "item": {
        "type": "mathjax",
        "id": "f7c62ba93e0f354a",
        "text": "$$ f : A \\larrow B $$"
      },
      "date": 1676881272062
    },
    {
      "type": "edit",
      "id": "f7c62ba93e0f354a",
      "item": {
        "type": "mathjax",
        "id": "f7c62ba93e0f354a",
        "text": "$$ f : A \\rightarrow B $$"
      },
      "date": 1676881303150
    },
    {
      "id": "f7c62ba93e0f354a",
      "type": "move",
      "order": [
        "a28e3c3337181232",
        "59c8faacb16ffa18",
        "dbe2d1d86e588599",
        "f7c62ba93e0f354a",
        "ab471e5564bd806e",
        "0ab0960ce51847cd"
      ],
      "date": 1676881306530
    },
    {
      "item": {
        "type": "factory",
        "id": "608550004130b0d8"
      },
      "id": "608550004130b0d8",
      "type": "add",
      "after": "0ab0960ce51847cd",
      "date": 1676881334222
    },
    {
      "type": "edit",
      "id": "608550004130b0d8",
      "item": {
        "type": "markdown",
        "id": "608550004130b0d8",
        "text": "This is related [https://wiki.ralfbarkow.ch/view/welcome-visitors/view/functional-programming/view/currying-schonfinkelling currying]. It is the opposite operation. While currying takes a function which works on two arguments "
      },
      "date": 1676881422812
    },
    {
      "type": "edit",
      "id": "608550004130b0d8",
      "item": {
        "type": "markdown",
        "id": "608550004130b0d8",
        "text": "This is related [https://wiki.ralfbarkow.ch/view/welcome-visitors/view/functional-programming/view/currying-schonfinkelling currying]. It is the opposite operation. Currying takes a function which works on two arguments transforms it into a function with one argument which then returns a function with one argument. The opposite operation is known as `uncurry` in Haskell."
      },
      "date": 1676881583760
    },
    {
      "item": {
        "type": "factory",
        "id": "2109c40a528e783c"
      },
      "id": "2109c40a528e783c",
      "type": "add",
      "after": "608550004130b0d8",
      "date": 1676881587247
    },
    {
      "type": "edit",
      "id": "608550004130b0d8",
      "item": {
        "type": "markdown",
        "id": "608550004130b0d8",
        "text": "This is related [https://wiki.ralfbarkow.ch/view/welcome-visitors/view/functional-programming/view/currying-schonfinkelling currying]. It is the opposite operation. Currying takes a function which works on two arguments transforms it into a function with one argument which then returns a function with one argument. The opposite operation is known as [https://hoogle.haskell.org/?hoogle=+%28a+-%3E+b+-%3E+c%29+-%3E+%28a%2C+b%29+-%3E+c&scope=set%3Astackage `uncurry`] in Haskell."
      },
      "date": 1676881599032
    },
    {
      "item": {
        "type": "factory",
        "id": "e635c83ce04cb545"
      },
      "id": "e635c83ce04cb545",
      "type": "add",
      "after": "2109c40a528e783c",
      "date": 1676881602974
    },
    {
      "type": "edit",
      "id": "2109c40a528e783c",
      "item": {
        "type": "code",
        "id": "2109c40a528e783c",
        "text": "unucurry :"
      },
      "date": 1676881625618
    },
    {
      "type": "edit",
      "id": "2109c40a528e783c",
      "item": {
        "type": "code",
        "id": "2109c40a528e783c",
        "text": "unucurry : (a -> b -> c) -> (a, b) -> c"
      },
      "date": 1676881634814
    },
    {
      "type": "edit",
      "id": "2109c40a528e783c",
      "item": {
        "type": "code",
        "id": "2109c40a528e783c",
        "text": "uncurry : (a -> b -> c) -> (a, b) -> c\nuncurry f a b = f (a, b)"
      },
      "date": 1676881662754
    },
    {
      "type": "edit",
      "id": "e635c83ce04cb545",
      "item": {
        "type": "markdown",
        "id": "e635c83ce04cb545",
        "text": "The function curry looks as follows:"
      },
      "date": 1676882621208
    },
    {
      "item": {
        "type": "factory",
        "id": "693509c5474c3f1b"
      },
      "id": "693509c5474c3f1b",
      "type": "add",
      "after": "e635c83ce04cb545",
      "date": 1676882622948
    },
    {
      "type": "remove",
      "id": "693509c5474c3f1b",
      "date": 1676882630787
    },
    {
      "item": {
        "type": "factory",
        "id": "bd7f6b3a24a78d42"
      },
      "id": "bd7f6b3a24a78d42",
      "type": "add",
      "after": "e635c83ce04cb545",
      "date": 1676882632345
    },
    {
      "type": "edit",
      "id": "bd7f6b3a24a78d42",
      "item": {
        "type": "code",
        "id": "bd7f6b3a24a78d42",
        "text": "uncurry : ("
      },
      "date": 1676882642664
    },
    {
      "type": "edit",
      "id": "2109c40a528e783c",
      "item": {
        "type": "code",
        "id": "2109c40a528e783c",
        "text": "uncurry :: (a -> b -> c) -> (a, b) -> c\nuncurry f a b = f (a, b)"
      },
      "date": 1676882644765
    },
    {
      "type": "edit",
      "id": "bd7f6b3a24a78d42",
      "item": {
        "type": "code",
        "id": "bd7f6b3a24a78d42",
        "text": "curry :: a -> "
      },
      "date": 1676882658537
    },
    {
      "type": "edit",
      "id": "bd7f6b3a24a78d42",
      "item": {
        "type": "code",
        "id": "bd7f6b3a24a78d42",
        "text": "curry :: ((a, b) -> c) -> a -> b -> c\ncurry f (a, b) = f a b"
      },
      "date": 1676882695974
    },
    {
      "item": {
        "type": "factory",
        "id": "07e1ab4adbb97c73"
      },
      "id": "07e1ab4adbb97c73",
      "type": "add",
      "after": "bd7f6b3a24a78d42",
      "date": 1676882712526
    },
    {
      "type": "edit",
      "id": "07e1ab4adbb97c73",
      "item": {
        "type": "markdown",
        "id": "07e1ab4adbb97c73",
        "text": "Thus the [Category Hask] has an internal hom."
      },
      "date": 1676882767347
    },
    {
      "type": "edit",
      "id": "07e1ab4adbb97c73",
      "item": {
        "type": "markdown",
        "id": "07e1ab4adbb97c73",
        "text": "Thus the [[Category Hask]] has an internal hom."
      },
      "date": 1676882772689
    },
    {
      "type": "remove",
      "id": "07e1ab4adbb97c73",
      "date": 1676882799601
    },
    {
      "type": "fork",
      "site": "johannes.tries.fed.wiki",
      "date": 1676997810210
    }
  ]
}