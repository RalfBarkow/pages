{
  "title": "Wiki With Programmable Content",
  "story": [
    {
      "type": "paragraph",
      "text": "Who knows a Wiki-System in which programmers can experiment with programmable content, integrated in a Wiki forum? -- [[Fridemar Pache]] - [http://c2.com/cgi/wiki?WikiWithProgrammableContent c2.com]",
      "id": "f626fc57d9990391e48aa8dbdecacae8"
    },
    {
      "type": "html",
      "text": "<i>Why would we want to do this?</i>",
      "id": "dbe81c435e3c0d075e101731ba7daf55"
    },
    {
      "type": "paragraph",
      "text": "\nSecurity reasons aside (see below), why not? -- fp",
      "id": "da3fdc2547ab6cc97b7191daabaec8f9"
    },
    {
      "type": "markdown",
      "text": "The risk is running high of becoming a never-ending process yielding no results. Why indeed. With no purpose, there is no design. Of course, from an aesthetic perspective, Wiki is its own reward. Still, computers are already wiki enough. Software is never truly complete. Bug fixes and third-party support and beta testing and the like. It's all relative. Even the hardware is dynamic when the software becomes more static, but it's a cycle. It only serves us humans when we make the effort to break the cycle by obtaining and using output, or merely turning it off and breaking from the loop somewhere. Editing is not power, neither is restraint. Wiki enthusiasts need to read more *Godel, Escher, Bach: an Eternal Golden Braid*.",
      "id": "37af040d7658fad4958178dd99a9ece4"
    },
    {
      "type": "paragraph",
      "text": "[[Swiki]] can do this - you can embed [[Small Talk]] code directly in the pages you edit. See [http://www.cc.gatech.edu/fac/mark.guzdial/squeak/pws/active.html www.cc.gatech.edu]",
      "id": "99aee237190bdaf5a249bde113db32d5"
    },
    {
      "type": "paragraph",
      "text": "\n[[Seed Wiki]] can also do this, but it's not really limited to a particular language.\n[http://www.seedwiki.com/ www.seedwiki.com]",
      "id": "84d6553d92a93f514337740536e439be"
    },
    {
      "type": "paragraph",
      "text": "\nI've explored this space with a wiki behind my own firewall. Although it gives my windows/browser environment a bit of the feel I've always had with Smalltalk, some errors I made while using it could only be debugged by the author of the server, i.e. me. -- [[Ward Cunningham]]",
      "id": "372626856b658eb34b64516857852db6"
    },
    {
      "type": "paragraph",
      "text": "\nThis boils down to [[Security Policy]] development. How does one create a [[Security Policy]] that implements a [[Secure Sand Box]] and a [[Functional Sand Box]] at the same time? [[Capability System]]s like [[Eros Os]] supposedly provide [[Provable Security]]. It would be interesting to put a [[Capability System]] into a [[Wiki With Programmable Content]]. -- [[Taral Dragon]]",
      "id": "12f3198cffdc585c24bea6f2229b10ae"
    },
    {
      "type": "paragraph",
      "text": "\nTcl allows scripts inside a [[Secure Sand Box]] to implement a [[Capability System]] in the form of nested [[Secure Sand Box]]es. [[Soft Wiki]] can use this to build a hierarchical access control system where each interpreter can impose its own arbitrary restrictions on interpreters that it creates. Of course the first and most important restriction of this kind is something to prevent the [[Security Policy]] script from being rewritten. -- [[Zygo Blaxell]]",
      "id": "153a099748b1436cf225ce4abd43caad"
    },
    {
      "type": "paragraph",
      "text": "\nI did made a [[Wiki With Programmable Content]], which we could call [[Lukes Programmable Wiki]], which takes the path of of running programs in a custom interpreter which simply doesn't provide any primitives that could be harmful. -- [[Luke Gorrie]]",
      "id": "e036f2db1f209958fbd4786dcff89d3c"
    },
    {
      "type": "markdown",
      "text": "*Part of the [[Wiki Nature]] as I understand it means that anyone can edit anything. Surely we don't want everybody to be able to run any script on our wiki servers. The really interesting question here is:\"what security model do we use?\" This causes an essential conflict between the safety and integrity of the server and the open-ended trust of the [[Wiki Nature]]. (N.B. I believe that [[Niki Niki]] already embeds JPython.) --*",
      "id": "57c80bd4a7fcff3082fcd9fdf87195eb"
    },
    {
      "type": "paragraph",
      "text": "\n[[Niki Niki]] has some access control, so it's a bit safer to allow code, but allowing some pages to be active queries, and authored from a browser, is really cool. -- [[Steve Freeman]]",
      "id": "2ca71d8eb00014463df975d0d73d8460"
    },
    {
      "type": "paragraph",
      "text": "\nOne of my perpetual prototypes allows edit access to the underlying Perl scripts, though I've found it more convenient to use an editor in a separate window. -- [[Dave Smith]]",
      "id": "557f3eb11262ff5caefc811b1cfd5f8d"
    },
    {
      "type": "paragraph",
      "text": "[[Platform For Information Applications]] does some very neat stuff using [[Extensible Markup Language]], <if>,<let>,<while> tags, very interesting, plus the fact that they are using [[Servlet Handlers]] to implement the active tags adds another layer of indirection enhancing the security model a bit, and it's [[Open Source]], and it works. Definite potential, it might be the [[Next Big Thing]].",
      "id": "ee45442db149bdde31b145034056da99"
    },
    {
      "type": "paragraph",
      "text": "To whet the appetite, what about [[Java Script Enabled Wiki]]s. -- [[Fridemar Pache]]",
      "id": "f517b74a58e2e9094a7cb7b9857f9ec3"
    },
    {
      "type": "paragraph",
      "text": "\n[[Another Php Wiki]] has it.",
      "id": "8738ccae7f3bb58484a927e795d4cf67"
    },
    {
      "type": "paragraph",
      "text": "<i>There is a simple Lisp interpreter written in [[Java Script]], I wonder how they'd go together :-).</i>",
      "id": "41699024351eced646c431b49ea0812a"
    },
    {
      "type": "paragraph",
      "text": "<i>[http://ganley.org/software/jslisp.html ganley.org]</i>",
      "id": "9ad2bcac324a2eaedc622fb2498c6959"
    },
    {
      "type": "paragraph",
      "text": "\nAlso a pretty complete [[Forth Language]] interpreter has been written in [[Java Script]]: [[Js Forth]]. Works now best with [[Mozilla Firefox]], [[Mozilla Browser]], and [[Netscape Navigator]]. [[Opera Browser]], [[Konqueror Browser]], and [[Safari Browser]] don't get the cursor position right, [[Internet Explorer]] the Backspace key (try alternative backspace keys: Pause, Scroll Lock, center-5, Windows key...)",
      "id": "4026cedc22719c92029948e2bd25b3e8"
    },
    {
      "type": "paragraph",
      "text": "\nTogether with the wiki markup in work here: [http://fwiki.logilan.com fwiki.logilan.com] , this may become a bundle which, server and client side, bases everything on Forth, though the interpreter is meant in first place as tutorial and practicing system. It can dynamically load Forth screen from cookies, ram drive and web servers!",
      "id": "f0484c4b6c1fc5eb3fe6ab9244c0b47d"
    },
    {
      "type": "paragraph",
      "text": "[[Zwi Ki]] does this too. The default markup mode permits embedded DTML (a reporting language) and limited python code. I believe these are interpreted in a safe manner. Some of the wiki functionality is implemented this way, eg the recent changes and jumpsearch pages.",
      "id": "c7a4fd0cbf7ced8e1f3b81df106a234e"
    },
    {
      "type": "paragraph",
      "text": "\nSwiki, jslisp, [[Zwi Ki]]: Then you or every user in your [[Wiki Forum]] could easily program",
      "id": "1ce4e9765a0000623cf2e1790650f166"
    },
    {
      "type": "paragraph",
      "text": " the one-click solution in [[Opportunity For Wiki Entrepreneur]] and",
      "id": "5e2e5eda2d986420764872bff2dacf78"
    },
    {
      "type": "paragraph",
      "text": " an automatic email notification for an [[Addressed And Signed Message]] like this one.",
      "id": "d2e0934edf66e87d4314282c54b9babe"
    },
    {
      "type": "paragraph",
      "text": "-- [[Fridemar Pache]]",
      "id": "89596cb254121c63448b500529a5ccce"
    },
    {
      "type": "paragraph",
      "text": "[[Wiki Type Framework]] has this too. But there is security to allow only 'trusted' individuals to create code. On [http://wtfw.sourceforge.net/wtfw/index.php wtfw.sourceforge.net] there are two examples of code that can be placed on pages: a calendar where clicking on a date generates the option of a new page, and the idea of accessing web services on a page. Of course, several other pages are also created on the fly by code.",
      "id": "e9e3bb6b5672c25e0aba2a49660269d1"
    },
    {
      "type": "paragraph",
      "text": "\nQuestion: Fridemar, are you playing with all these constructs like [[Double Colon Message]] and the {} tagging to see how they'd work in the normal stream of text and how easy they are to maintain? So that if and when you write a [[Wiki With Programmable Content]] you have some experience with them?",
      "id": "631b9c69b7383076a0973bcacd955125"
    },
    {
      "type": "paragraph",
      "text": "\nYou are just testing/playing? <i>(positioning 'Question:' at the start of your writing. You could have omitted it, without loss of content, thus making your note an [[Addressed And Signed Message]]:-).</i> I thought of doing this, using the public-domain Win32Forth editor component [[Win View]] of [[Tom Zimmer]]. (See [[Forth Language]]) This amazing editor comes as Forth source, has two independent hypertext subsystems implemented. In browse-mode html-links (and some other elementary html-format-tags) are supported, and additionally each clicked Forth Word let you jump to its definition). This editor has even built-in a rudimentary online Web Browser. My main activity behind the scenes, the [[Data Music Project]] doesn't allow me to do that at moment. Besides that, I think that there might be better existing solutions, as extensions of the standard Web Browsers. At moment I look urgently for existing DHTML-capable [[Wiki Forum]]<i>s</i>. You would make me happy to add your favorite forum with programmable content in [[Java Script Enabled Wiki]], if you know one more. -- Fridemar",
      "id": "7e783a72065352a99444d464bc2edc3f"
    },
    {
      "type": "paragraph",
      "text": "\nSee [[Smart Wiki]] for Wiki (Engines) With Programmable Content.",
      "id": "685f7ca3212f239b987d9dc6596077e9"
    },
    {
      "type": "paragraph",
      "text": "\nSounds like [[Wiki With Programmable Content]] and [[Smart Wiki]] refer to any Wiki that allows code (store and execute) as well as text.",
      "id": "814dfd3bf7cb7b506817cf4b84aa82ca"
    },
    {
      "type": "paragraph",
      "text": "\nAnd [[Meta Wiki]] says it's a [[Wiki With Programmable Content]] that includes global options for trusted peers to reprogram the underlying [[Wiki Engine]] of the respective [[Wiki Forum]].",
      "id": "3149b62a5733b61388c51d72b768da48"
    },
    {
      "type": "paragraph",
      "text": "\nSo [[Meta Wiki]] is a subset of [[Smart Wiki]]s.",
      "id": "129a661477208adfe0b2687d449c298a"
    },
    {
      "type": "paragraph",
      "text": "\n[[Zzo Wiki]] you can enter programs in the text. Is that consider [[Smart Wiki]], or [[Wiki With Programmable Content]]? Does it have enough commands?",
      "id": "0663e18ff17b6381d531b6ce1f11b43e"
    },
    {
      "type": "paragraph",
      "text": "There is no need that publicly programmable [[Wiki Clones]] impose a security threat at all. You only have to do it the right way. I'm currently into writing a [[Server Side Java Script]] interpreter running in the [[Php Language]] ([http://phpjs.berlios.de/ phpjs.berlios.de]), which will allow to run user contributed code in a [[Sand Box]] (mixing it with [[Erfurt Wiki]] and [[Php Wiki]] somewhen). That is safe as long as you do not provide raw access interfaces to the filesystem or allow unfiltered SQL queries. With a powerful API this would still allow for the majority of interesting features to be written, despite any security restrictions. See also the discussions on [http://wikifeatures.wiki.taoriver.net/moin.cgi/AutomaticFeatureInstall wikifeatures.wiki.taoriver.net] -- [[Mario Salzer]]",
      "id": "d3f497966179d238cbd54cdbce18e5ba"
    },
    {
      "type": "paragraph",
      "text": "\n[[Flex Wiki]] uses a custom programming language called [[Wiki Talk]] to provide a very simple way to add dynamic content to the Wiki. [[Wiki Talk]] is based on an object model that is capable of searching pages for [[Wiki Properties]] and acting on them.",
      "id": "87354f5003e9d44dea1f55320783e05f"
    },
    {
      "type": "paragraph",
      "text": "\n[http://jot.com jot.com] is a wiki with structured forms and programmable pages. Jot's wiki markup includes search, if, etc.",
      "id": "5cda67fe466e2a282b0abf684060ebd2"
    },
    {
      "type": "html",
      "text": "<i>Why would we want to do this?</i>",
      "id": "dbe81c435e3c0d075e101731ba7daf55"
    },
    {
      "type": "paragraph",
      "text": "\nOn the Cryptodox wiki, it would be nifty to have \"live examples\" of encryption and cryptanalysis algorithms. Type in some text, see what the encrypted text looks like, etc. I imagine that \"live example\" for \"simple substitution cipher\" might look something like the substitution solving tool Simon Singh wrote ( [http://www.simonsingh.net/The_Black_Chamber/frequencypuzzle.htm www.simonsingh.net] ).",
      "id": "ba252c54b444c2778573f449ce7c9820"
    },
    {
      "type": "paragraph",
      "text": "\nIf I ever get my data compression wiki online, \"live examples\" of data compression algorithms would be nifty. Type in (or paste) some text into one textbox, see several following textboxes show the several stages in compression, followed by the resulting compressed text (in hex?) and the compression ratio. But how do I allow people to improve, wiki-style, each other's experimental compression algorithms, without doing something harmful? I thought that was the whole point of Java and [[Java Script]] -- that they could be contained in a [[Sand Box]], guaranteed impossible for them to do anything harmful? -- [[David Cary]]",
      "id": "cb654db782833494d446448651d0da5a"
    },
    {
      "type": "paragraph",
      "text": "[[Collaborative Programming]] is also a related term - see my summary [http://keinze.wordpress.com/category/programming/ keinze.wordpress.com]",
      "id": "60dbe14b5a3d5945025ad884f8a62c7c"
    },
    {
      "type": "paragraph",
      "text": "\nMirko 20.05.2012",
      "id": "951613c7917225ef7cc281d421c5f01c"
    },
    {
      "type": "paragraph",
      "text": "See also: [[Soft Wiki]], [[Forum With Programmable Content]], [[Another Php Wiki]], [[Xp System]], [[Java Script Enabled Wiki]], [[Wiki With More Than Pages]], [[Wiki With More Than Users]], [[Programming In Wiki]]",
      "id": "19155cd18bbf664b6a72f7444d57a7c2"
    },
    {
      "type": "paragraph",
      "text": "[[Category Wiki Implementation]]",
      "id": "5d99302f92dfb68a93e9d66e7c9d6cf2"
    },
    {
      "type": "markdown",
      "id": "4d265b900d3cf759",
      "text": "# See also\n"
    },
    {
      "type": "markdown",
      "id": "2dfa736f1c31a277",
      "text": "- [[Literate Wiki]]\n- [[Self Programming Wiki]]\n- [[Programming In Wiki]]\n- [[Wiki With Programmable Content]]\n- [[Wiki Ide]]\n- [[Soft Wiki]]\n- [[Wiki With More Than Pages]]"
    }
  ],
  "journal": [
    {
      "date": 1337542901000,
      "id": "a7f750e02e6a3d669cad114317efba49",
      "type": "create",
      "item": {
        "title": "Wiki With Programmable Content",
        "story": [
          {
            "type": "paragraph",
            "text": "Who knows a Wiki-System in which programmers can experiment with programmable content, integrated in a Wiki forum? -- [[Fridemar Pache]]",
            "id": "f626fc57d9990391e48aa8dbdecacae8"
          },
          {
            "type": "paragraph",
            "text": "<i>Why would we want to do this?</i>",
            "id": "dbe81c435e3c0d075e101731ba7daf55"
          },
          {
            "type": "paragraph",
            "text": "\nSecurity reasons aside (see below), why not? -- fp",
            "id": "da3fdc2547ab6cc97b7191daabaec8f9"
          },
          {
            "type": "paragraph",
            "text": "\nThe risk is running high of becoming a never-ending process yielding no results. Why indeed. With no purpose, there is no design. Of course, from an aesthetic perspective, Wiki is its own reward. Still, computers are already wiki enough. Software is never truly complete. Bug fixes and third-party support and beta testing and the like. It's all relative. Even the hardware is dynamic when the software becomes more static, but it's a cycle. It only serves us humans when we make the effort to break the cycle by obtaining and using output, or merely turning it off and breaking from the loop somewhere. Editing is not power, neither is restraint. Wiki enthusiasts need to read more <i>Godel, Escher, Bach: an Eternal Golden Braid</i>.",
            "id": "37af040d7658fad4958178dd99a9ece4"
          },
          {
            "type": "paragraph",
            "text": "\nSwiki can do this - you can embed [[Small Talk]] code directly in the pages you edit. See [http://www.cc.gatech.edu/fac/mark.guzdial/squeak/pws/active.html www.cc.gatech.edu]",
            "id": "99aee237190bdaf5a249bde113db32d5"
          },
          {
            "type": "paragraph",
            "text": "\n[[Seed Wiki]] can also do this, but it's not really limited to a particular language.\n[http://www.seedwiki.com/ www.seedwiki.com]",
            "id": "84d6553d92a93f514337740536e439be"
          },
          {
            "type": "paragraph",
            "text": "\nI've explored this space with a wiki behind my own firewall. Although it gives my windows/browser environment a bit of the feel I've always had with Smalltalk, some errors I made while using it could only be debugged by the author of the server, i.e. me. -- [[Ward Cunningham]]",
            "id": "372626856b658eb34b64516857852db6"
          },
          {
            "type": "paragraph",
            "text": "\nThis boils down to [[Security Policy]] development. How does one create a [[Security Policy]] that implements a [[Secure Sand Box]] and a [[Functional Sand Box]] at the same time? [[Capability System]]s like [[Eros Os]] supposedly provide [[Provable Security]]. It would be interesting to put a [[Capability System]] into a [[Wiki With Programmable Content]]. -- [[Taral Dragon]]",
            "id": "12f3198cffdc585c24bea6f2229b10ae"
          },
          {
            "type": "paragraph",
            "text": "\nTcl allows scripts inside a [[Secure Sand Box]] to implement a [[Capability System]] in the form of nested [[Secure Sand Box]]es. [[Soft Wiki]] can use this to build a hierarchical access control system where each interpreter can impose its own arbitrary restrictions on interpreters that it creates. Of course the first and most important restriction of this kind is something to prevent the [[Security Policy]] script from being rewritten. -- [[Zygo Blaxell]]",
            "id": "153a099748b1436cf225ce4abd43caad"
          },
          {
            "type": "paragraph",
            "text": "\nI did made a [[Wiki With Programmable Content]], which we could call [[Lukes Programmable Wiki]], which takes the path of of running programs in a custom interpreter which simply doesn't provide any primitives that could be harmful. -- [[Luke Gorrie]]",
            "id": "e036f2db1f209958fbd4786dcff89d3c"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "<i>Part of the [[Wiki Nature]] as I understand it means that anyone can edit anything. Surely we don't want everybody to be able to run any script on our wiki servers. The really interesting question here is:\"what security model do we use?\" This causes an essential conflict between the safety and integrity of the server and the open-ended trust of the [[Wiki Nature]]. (N.B. I believe that [[Niki Niki]] already embeds JPython.) --</i>",
            "id": "57c80bd4a7fcff3082fcd9fdf87195eb"
          },
          {
            "type": "paragraph",
            "text": "\n[[Niki Niki]] has some access control, so it's a bit safer to allow code, but allowing some pages to be active queries, and authored from a browser, is really cool. -- [[Steve Freeman]]",
            "id": "2ca71d8eb00014463df975d0d73d8460"
          },
          {
            "type": "paragraph",
            "text": "\nOne of my perpetual prototypes allows edit access to the underlying Perl scripts, though I've found it more convenient to use an editor in a separate window. -- [[Dave Smith]]",
            "id": "557f3eb11262ff5caefc811b1cfd5f8d"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "[[Platform For Information Applications]] does some very neat stuff using [[Extensible Markup Language]], <if>,<let>,<while> tags, very interesting, plus the fact that they are using [[Servlet Handlers]] to implement the active tags adds another layer of indirection enhancing the security model a bit, and it's [[Open Source]], and it works. Definite potential, it might be the [[Next Big Thing]].",
            "id": "ee45442db149bdde31b145034056da99"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "To whet the appetite, what about [[Java Script Enabled Wiki]]s. -- [[Fridemar Pache]]",
            "id": "f517b74a58e2e9094a7cb7b9857f9ec3"
          },
          {
            "type": "paragraph",
            "text": "\n[[Another Php Wiki]] has it.",
            "id": "8738ccae7f3bb58484a927e795d4cf67"
          },
          {
            "type": "paragraph",
            "text": "<i>There is a simple Lisp interpreter written in [[Java Script]], I wonder how they'd go together :-).</i>",
            "id": "41699024351eced646c431b49ea0812a"
          },
          {
            "type": "paragraph",
            "text": "<i>[http://ganley.org/software/jslisp.html ganley.org]</i>",
            "id": "9ad2bcac324a2eaedc622fb2498c6959"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "\nAlso a pretty complete [[Forth Language]] interpreter has been written in [[Java Script]]: [[Js Forth]]. Works now best with [[Mozilla Firefox]], [[Mozilla Browser]], and [[Netscape Navigator]]. [[Opera Browser]], [[Konqueror Browser]], and [[Safari Browser]] don't get the cursor position right, [[Internet Explorer]] the Backspace key (try alternative backspace keys: Pause, Scroll Lock, center-5, Windows key...)",
            "id": "4026cedc22719c92029948e2bd25b3e8"
          },
          {
            "type": "paragraph",
            "text": "\nTogether with the wiki markup in work here: [http://fwiki.logilan.com fwiki.logilan.com] , this may become a bundle which, server and client side, bases everything on Forth, though the interpreter is meant in first place as tutorial and practicing system. It can dynamically load Forth screen from cookies, ram drive and web servers!",
            "id": "f0484c4b6c1fc5eb3fe6ab9244c0b47d"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "[[Zwi Ki]] does this too. The default markup mode permits embedded DTML (a reporting language) and limited python code. I believe these are interpreted in a safe manner. Some of the wiki functionality is implemented this way, eg the recent changes and jumpsearch pages.",
            "id": "c7a4fd0cbf7ced8e1f3b81df106a234e"
          },
          {
            "type": "paragraph",
            "text": "\nSwiki, jslisp, [[Zwi Ki]]: Then you or every user in your [[Wiki Forum]] could easily program",
            "id": "1ce4e9765a0000623cf2e1790650f166"
          },
          {
            "type": "paragraph",
            "text": " the one-click solution in [[Opportunity For Wiki Entrepreneur]] and",
            "id": "5e2e5eda2d986420764872bff2dacf78"
          },
          {
            "type": "paragraph",
            "text": " an automatic email notification for an [[Addressed And Signed Message]] like this one.",
            "id": "d2e0934edf66e87d4314282c54b9babe"
          },
          {
            "type": "paragraph",
            "text": "-- [[Fridemar Pache]]",
            "id": "89596cb254121c63448b500529a5ccce"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "[[Wiki Type Framework]] has this too. But there is security to allow only 'trusted' individuals to create code. On [http://wtfw.sourceforge.net/wtfw/index.php wtfw.sourceforge.net] there are two examples of code that can be placed on pages: a calendar where clicking on a date generates the option of a new page, and the idea of accessing web services on a page. Of course, several other pages are also created on the fly by code.",
            "id": "e9e3bb6b5672c25e0aba2a49660269d1"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "\nQuestion: Fridemar, are you playing with all these constructs like [[Double Colon Message]] and the {} tagging to see how they'd work in the normal stream of text and how easy they are to maintain? So that if and when you write a [[Wiki With Programmable Content]] you have some experience with them?",
            "id": "631b9c69b7383076a0973bcacd955125"
          },
          {
            "type": "paragraph",
            "text": "\nYou are just testing/playing? <i>(positioning 'Question:' at the start of your writing. You could have omitted it, without loss of content, thus making your note an [[Addressed And Signed Message]]:-).</i> I thought of doing this, using the public-domain Win32Forth editor component [[Win View]] of [[Tom Zimmer]]. (See [[Forth Language]]) This amazing editor comes as Forth source, has two independent hypertext subsystems implemented. In browse-mode html-links (and some other elementary html-format-tags) are supported, and additionally each clicked Forth Word let you jump to its definition). This editor has even built-in a rudimentary online Web Browser. My main activity behind the scenes, the [[Data Music Project]] doesn't allow me to do that at moment. Besides that, I think that there might be better existing solutions, as extensions of the standard Web Browsers. At moment I look urgently for existing DHTML-capable [[Wiki Forum]]<i>s</i>. You would make me happy to add your favorite forum with programmable content in [[Java Script Enabled Wiki]], if you know one more. -- Fridemar",
            "id": "7e783a72065352a99444d464bc2edc3f"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "\nSee [[Smart Wiki]] for Wiki (Engines) With Programmable Content.",
            "id": "685f7ca3212f239b987d9dc6596077e9"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "\nSounds like [[Wiki With Programmable Content]] and [[Smart Wiki]] refer to any Wiki that allows code (store and execute) as well as text.",
            "id": "814dfd3bf7cb7b506817cf4b84aa82ca"
          },
          {
            "type": "paragraph",
            "text": "\nAnd [[Meta Wiki]] says it's a [[Wiki With Programmable Content]] that includes global options for trusted peers to reprogram the underlying [[Wiki Engine]] of the respective [[Wiki Forum]].",
            "id": "3149b62a5733b61388c51d72b768da48"
          },
          {
            "type": "paragraph",
            "text": "\nSo [[Meta Wiki]] is a subset of [[Smart Wiki]]s.",
            "id": "129a661477208adfe0b2687d449c298a"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "\n[[Zzo Wiki]] you can enter programs in the text. Is that consider [[Smart Wiki]], or [[Wiki With Programmable Content]]? Does it have enough commands?",
            "id": "0663e18ff17b6381d531b6ce1f11b43e"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "There is no need that publicly programmable [[Wiki Clones]] impose a security threat at all. You only have to do it the right way. I'm currently into writing a [[Server Side Java Script]] interpreter running in the [[Php Language]] ([http://phpjs.berlios.de/ phpjs.berlios.de]), which will allow to run user contributed code in a [[Sand Box]] (mixing it with [[Erfurt Wiki]] and [[Php Wiki]] somewhen). That is safe as long as you do not provide raw access interfaces to the filesystem or allow unfiltered SQL queries. With a powerful API this would still allow for the majority of interesting features to be written, despite any security restrictions. See also the discussions on [http://wikifeatures.wiki.taoriver.net/moin.cgi/AutomaticFeatureInstall wikifeatures.wiki.taoriver.net] -- [[Mario Salzer]]",
            "id": "d3f497966179d238cbd54cdbce18e5ba"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "\n[[Flex Wiki]] uses a custom programming language called [[Wiki Talk]] to provide a very simple way to add dynamic content to the Wiki. [[Wiki Talk]] is based on an object model that is capable of searching pages for [[Wiki Properties]] and acting on them.",
            "id": "87354f5003e9d44dea1f55320783e05f"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "\n[http://jot.com jot.com] is a wiki with structured forms and programmable pages. Jot's wiki markup includes search, if, etc.",
            "id": "5cda67fe466e2a282b0abf684060ebd2"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "<i>Why would we want to do this?</i>",
            "id": "dbe81c435e3c0d075e101731ba7daf55"
          },
          {
            "type": "paragraph",
            "text": "\nOn the Cryptodox wiki, it would be nifty to have \"live examples\" of encryption and cryptanalysis algorithms. Type in some text, see what the encrypted text looks like, etc. I imagine that \"live example\" for \"simple substitution cipher\" might look something like the substitution solving tool Simon Singh wrote ( [http://www.simonsingh.net/The_Black_Chamber/frequencypuzzle.htm www.simonsingh.net] ).",
            "id": "ba252c54b444c2778573f449ce7c9820"
          },
          {
            "type": "paragraph",
            "text": "\nIf I ever get my data compression wiki online, \"live examples\" of data compression algorithms would be nifty. Type in (or paste) some text into one textbox, see several following textboxes show the several stages in compression, followed by the resulting compressed text (in hex?) and the compression ratio. But how do I allow people to improve, wiki-style, each other's experimental compression algorithms, without doing something harmful? I thought that was the whole point of Java and [[Java Script]] -- that they could be contained in a [[Sand Box]], guaranteed impossible for them to do anything harmful? -- [[David Cary]]",
            "id": "cb654db782833494d446448651d0da5a"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "[[Collaborative Programming]] is also a related term - see my summary [http://keinze.wordpress.com/category/programming/ keinze.wordpress.com]",
            "id": "60dbe14b5a3d5945025ad884f8a62c7c"
          },
          {
            "type": "paragraph",
            "text": "\nMirko 20.05.2012",
            "id": "951613c7917225ef7cc281d421c5f01c"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "See also: [[Soft Wiki]], [[Forum With Programmable Content]], [[Another Php Wiki]], [[Xp System]], [[Java Script Enabled Wiki]], [[Wiki With More Than Pages]], [[Wiki With More Than Users]], [[Programming In Wiki]]",
            "id": "19155cd18bbf664b6a72f7444d57a7c2"
          },
          {
            "type": "paragraph",
            "text": "<hr>",
            "id": "d4b373162049318b0a0622a069bb4e0d"
          },
          {
            "type": "paragraph",
            "text": "[[Category Wiki Implementation]]",
            "id": "5d99302f92dfb68a93e9d66e7c9d6cf2"
          },
          {
            "type": "paragraph",
            "text": "See original on  [http://c2.com/cgi/wiki?WikiWithProgrammableContent c2.com]",
            "id": "86ead9acab68d1132eebd2fcc2246e90"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1371126022050
    },
    {
      "type": "move",
      "order": [
        "f626fc57d9990391e48aa8dbdecacae8",
        "dbe81c435e3c0d075e101731ba7daf55",
        "da3fdc2547ab6cc97b7191daabaec8f9",
        "37af040d7658fad4958178dd99a9ece4",
        "99aee237190bdaf5a249bde113db32d5",
        "84d6553d92a93f514337740536e439be",
        "372626856b658eb34b64516857852db6",
        "12f3198cffdc585c24bea6f2229b10ae",
        "153a099748b1436cf225ce4abd43caad",
        "e036f2db1f209958fbd4786dcff89d3c",
        "d4b373162049318b0a0622a069bb4e0d",
        "57c80bd4a7fcff3082fcd9fdf87195eb",
        "2ca71d8eb00014463df975d0d73d8460",
        "557f3eb11262ff5caefc811b1cfd5f8d",
        "d4b373162049318b0a0622a069bb4e0d",
        "ee45442db149bdde31b145034056da99",
        "d4b373162049318b0a0622a069bb4e0d",
        "f517b74a58e2e9094a7cb7b9857f9ec3",
        "8738ccae7f3bb58484a927e795d4cf67",
        "41699024351eced646c431b49ea0812a",
        "9ad2bcac324a2eaedc622fb2498c6959",
        "d4b373162049318b0a0622a069bb4e0d",
        "4026cedc22719c92029948e2bd25b3e8",
        "f0484c4b6c1fc5eb3fe6ab9244c0b47d",
        "d4b373162049318b0a0622a069bb4e0d",
        "c7a4fd0cbf7ced8e1f3b81df106a234e",
        "1ce4e9765a0000623cf2e1790650f166",
        "5e2e5eda2d986420764872bff2dacf78",
        "d2e0934edf66e87d4314282c54b9babe",
        "89596cb254121c63448b500529a5ccce",
        "d4b373162049318b0a0622a069bb4e0d",
        "e9e3bb6b5672c25e0aba2a49660269d1",
        "d4b373162049318b0a0622a069bb4e0d",
        "631b9c69b7383076a0973bcacd955125",
        "7e783a72065352a99444d464bc2edc3f",
        "d4b373162049318b0a0622a069bb4e0d",
        "685f7ca3212f239b987d9dc6596077e9",
        "d4b373162049318b0a0622a069bb4e0d",
        "814dfd3bf7cb7b506817cf4b84aa82ca",
        "3149b62a5733b61388c51d72b768da48",
        "129a661477208adfe0b2687d449c298a",
        "d4b373162049318b0a0622a069bb4e0d",
        "0663e18ff17b6381d531b6ce1f11b43e",
        "d4b373162049318b0a0622a069bb4e0d",
        "d3f497966179d238cbd54cdbce18e5ba",
        "d4b373162049318b0a0622a069bb4e0d",
        "87354f5003e9d44dea1f55320783e05f",
        "d4b373162049318b0a0622a069bb4e0d",
        "5cda67fe466e2a282b0abf684060ebd2",
        "d4b373162049318b0a0622a069bb4e0d",
        "dbe81c435e3c0d075e101731ba7daf55",
        "ba252c54b444c2778573f449ce7c9820",
        "cb654db782833494d446448651d0da5a",
        "d4b373162049318b0a0622a069bb4e0d",
        "60dbe14b5a3d5945025ad884f8a62c7c",
        "951613c7917225ef7cc281d421c5f01c",
        "19155cd18bbf664b6a72f7444d57a7c2",
        "d4b373162049318b0a0622a069bb4e0d",
        "d4b373162049318b0a0622a069bb4e0d",
        "5d99302f92dfb68a93e9d66e7c9d6cf2",
        "86ead9acab68d1132eebd2fcc2246e90"
      ],
      "id": "19155cd18bbf664b6a72f7444d57a7c2",
      "date": 1371126031045
    },
    {
      "type": "fork",
      "site": "sfwhangout.don.fed.wiki.org",
      "date": 1550581067318
    },
    {
      "type": "edit",
      "id": "dbe81c435e3c0d075e101731ba7daf55",
      "item": {
        "type": "html",
        "text": "<i>Why would we want to do this?</i>",
        "id": "dbe81c435e3c0d075e101731ba7daf55"
      },
      "date": 1550599476704
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "4d265b900d3cf759",
        "text": "# See also\n"
      },
      "after": "86ead9acab68d1132eebd2fcc2246e90",
      "id": "4d265b900d3cf759",
      "date": 1550599715268
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "2dfa736f1c31a277",
        "text": "- [[Literate Wiki]]\n- [[Self Programming Wiki]]\n- [[Programming In Wiki]]\n- [[Wiki With Programmable Content]]\n- [[Wiki Ide]]\n- [[Soft Wiki]]\n- [[Wiki With More Than Pages]]"
      },
      "after": "4d265b900d3cf759",
      "id": "2dfa736f1c31a277",
      "date": 1550599717464
    },
    {
      "type": "remove",
      "id": "86ead9acab68d1132eebd2fcc2246e90",
      "date": 1550599722790
    },
    {
      "type": "remove",
      "id": "d4b373162049318b0a0622a069bb4e0d",
      "date": 1550599725470
    },
    {
      "type": "remove",
      "id": "d4b373162049318b0a0622a069bb4e0d",
      "date": 1550599729991
    },
    {
      "type": "edit",
      "id": "f626fc57d9990391e48aa8dbdecacae8",
      "item": {
        "type": "paragraph",
        "text": "Who knows a Wiki-System in which programmers can experiment with programmable content, integrated in a Wiki forum? -- [[Fridemar Pache]] - [http://c2.com/cgi/wiki?WikiWithProgrammableContent c2.com]",
        "id": "f626fc57d9990391e48aa8dbdecacae8"
      },
      "date": 1550599738337
    },
    {
      "type": "fork",
      "site": "literate.wiki",
      "date": 1626101514092
    },
    {
      "type": "fork",
      "date": 1627567205626
    },
    {
      "type": "edit",
      "id": "99aee237190bdaf5a249bde113db32d5",
      "item": {
        "type": "paragraph",
        "text": "[[Swiki]] can do this - you can embed [[Small Talk]] code directly in the pages you edit. See [http://www.cc.gatech.edu/fac/mark.guzdial/squeak/pws/active.html www.cc.gatech.edu]",
        "id": "99aee237190bdaf5a249bde113db32d5"
      },
      "date": 1645326242686
    },
    {
      "type": "edit",
      "id": "37af040d7658fad4958178dd99a9ece4",
      "item": {
        "type": "paragraph",
        "text": "The risk is running high of becoming a never-ending process yielding no results. Why indeed. With no purpose, there is no design. Of course, from an aesthetic perspective, Wiki is its own reward. Still, computers are already wiki enough. Software is never truly complete. Bug fixes and third-party support and beta testing and the like. It's all relative. Even the hardware is dynamic when the software becomes more static, but it's a cycle. It only serves us humans when we make the effort to break the cycle by obtaining and using output, or merely turning it off and breaking from the loop somewhere. Editing is not power, neither is restraint. Wiki enthusiasts need to read more *Godel, Escher, Bach: an Eternal Golden Braid*.",
        "id": "37af040d7658fad4958178dd99a9ece4"
      },
      "date": 1654061141905
    },
    {
      "type": "edit",
      "id": "37af040d7658fad4958178dd99a9ece4",
      "item": {
        "type": "markdown",
        "text": "The risk is running high of becoming a never-ending process yielding no results. Why indeed. With no purpose, there is no design. Of course, from an aesthetic perspective, Wiki is its own reward. Still, computers are already wiki enough. Software is never truly complete. Bug fixes and third-party support and beta testing and the like. It's all relative. Even the hardware is dynamic when the software becomes more static, but it's a cycle. It only serves us humans when we make the effort to break the cycle by obtaining and using output, or merely turning it off and breaking from the loop somewhere. Editing is not power, neither is restraint. Wiki enthusiasts need to read more *Godel, Escher, Bach: an Eternal Golden Braid*.",
        "id": "37af040d7658fad4958178dd99a9ece4"
      },
      "date": 1654061143713
    },
    {
      "type": "edit",
      "id": "57c80bd4a7fcff3082fcd9fdf87195eb",
      "item": {
        "type": "paragraph",
        "text": "*Part of the [[Wiki Nature]] as I understand it means that anyone can edit anything. Surely we don't want everybody to be able to run any script on our wiki servers. The really interesting question here is:\"what security model do we use?\" This causes an essential conflict between the safety and integrity of the server and the open-ended trust of the [[Wiki Nature]]. (N.B. I believe that [[Niki Niki]] already embeds JPython.) --*",
        "id": "57c80bd4a7fcff3082fcd9fdf87195eb"
      },
      "date": 1654061721722
    },
    {
      "type": "edit",
      "id": "57c80bd4a7fcff3082fcd9fdf87195eb",
      "item": {
        "type": "markdown",
        "text": "*Part of the [[Wiki Nature]] as I understand it means that anyone can edit anything. Surely we don't want everybody to be able to run any script on our wiki servers. The really interesting question here is:\"what security model do we use?\" This causes an essential conflict between the safety and integrity of the server and the open-ended trust of the [[Wiki Nature]]. (N.B. I believe that [[Niki Niki]] already embeds JPython.) --*",
        "id": "57c80bd4a7fcff3082fcd9fdf87195eb"
      },
      "date": 1654061722958
    }
  ]
}