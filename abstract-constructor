{
  "title": "Abstract Constructor",
  "story": [
    {
      "type": "html",
      "text": "In an OOP language, an [[Abstract Constructor]] is a mechanism to polymorphically produce an object of an [[Abstract Base Class]]. ",
      "id": "a64ba235b209bb5a7a67494938290fc7"
    },
    {
      "type": "html",
      "text": "\nMost OOP languages do not support the [[Abstract Constructor]] pattern as a language feature, but rather require using [[Design Patterns]] such as [[Abstract Factory]], [[Plugin Architecture]], or some combination thereof.",
      "id": "0e64388279320bf0b213fa2d17a3fc25"
    },
    {
      "type": "html",
      "text": "\n[[Abstract Constructor]] supports [[Constructor Injection]] which is a [[Dependency Injection]] pattern.",
      "id": "69c00a50cd9d2a016437102228f0cfe1"
    },
    {
      "type": "html",
      "text": "\nIt is possible that you have overlapping constructor options for a given value (e.g. you need a clock, but you can choose between the local hardware clock vs. an network-time-protocol clock). At this point, [[Abstract Constructor]] benefits from [[Policy Injection]] to select heuristically between available options (e.g. allowing user to decide between favoring performance, precision, or accuracy).",
      "id": "b0b0a2cde238501f1de99c7427c4075c"
    },
    {
      "type": "html",
      "text": "\n[[Abstract Constructor]] supports data-driven object construction, since the selection of object is based entirely on dynamic input data and available constructors (potentially via plugins) rather than being based upon static code.",
      "id": "3e5fa63ef9ff1ada84b1e6a042fb9258"
    },
    {
      "type": "html",
      "text": "\n[[Abstract Constructor]] does not imply [[Garbage Collection]], but [[Abstract Constructor]] + [[Garbage Collection]] is a powerful combination in that it allows one to return singletons and other shared objects from the [[Abstract Constructor]]. Without [[Garbage Collection]], one would need to be concerned about figuring out when to delete a potentially shared object, which would defeat its use for singletons and shared objects.",
      "id": "1411c6ad0efd0544cf21516b3ac194e6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1d39faa92c40ff78d4243a54fba97ffe"
    },
    {
      "type": "html",
      "text": "Other approaches to handling shared objects exist, such as constructing a pool of named objects then using [[Setter Injection]] to obtain references to appropriate objects from the pool - i.e. a two-pass approach that allows sharing of objects other than just singletons. In this case, [[Abstract Constructor]] is still useful for data-driven construction for the pool of objects. This approach does require a little discipline - in particular, to not send any [[messages]] as part of the first or second passes. A third pass could be utilized for 'startup' procedures.",
      "id": "813c8c5ba75f7560cd4e1be5637513dc"
    },
    {
      "type": "html",
      "text": " Pass 1: examine object-graph representation; use [[Abstract Constructor]] to produce and name each object within the graph. (Now all 'points' are loaded)",
      "id": "f680c14a6db05816e988aad70c327476"
    },
    {
      "type": "html",
      "text": " Pass 2: to each object, pass the pool of objects in the configuration so that all references in the object-graph are closed. (Now all 'edges' are loaded)",
      "id": "2417cd7f65d58779f2a9a0dcfb90a931"
    },
    {
      "type": "html",
      "text": " Pass 3 (optional): for each object, call the 'init' method (Now everything is running).",
      "id": "1407ebea9db80bc8eecb81fae74f8c2f"
    },
    {
      "type": "html",
      "text": "\nAlternative to Pass 3 is to construct a startup procedure to run later. The delay allows easily for composing multiple object graphs. [[First Class]] support for two-pass or three-pass object-graph construction [[Design Patterns]] is quite useful for achieving the latter half of [[Primitives And Means Of Composition]] in [[Object Oriented Programming]].",
      "id": "9f41c8d29936f331c638d32bd109f60f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1d39faa92c40ff78d4243a54fba97ffe"
    },
    {
      "type": "html",
      "text": "\nSee: [[Dependency Injection]], [[New Considered Harmful]], [[Policy Injection]]",
      "id": "4ee2a4eb86de90c3b965252a29ac7999"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AbstractConstructor c2.com]",
      "id": "62dade9a16875d383972d415373d5fb8"
    }
  ],
  "journal": [
    {
      "date": 1415630755000,
      "id": "505f4f3a20dc399b6c3d4dd4bc57a9ed",
      "type": "create",
      "item": {
        "title": "Abstract Constructor",
        "story": [
          {
            "type": "html",
            "text": "In an OOP language, an [[Abstract Constructor]] is a mechanism to polymorphically produce an object of an [[Abstract Base Class]]. ",
            "id": "a64ba235b209bb5a7a67494938290fc7"
          },
          {
            "type": "html",
            "text": "\nMost OOP languages do not support the [[Abstract Constructor]] pattern as a language feature, but rather require using [[Design Patterns]] such as [[Abstract Factory]], [[Plugin Architecture]], or some combination thereof.",
            "id": "0e64388279320bf0b213fa2d17a3fc25"
          },
          {
            "type": "html",
            "text": "\n[[Abstract Constructor]] supports [[Constructor Injection]] which is a [[Dependency Injection]] pattern.",
            "id": "69c00a50cd9d2a016437102228f0cfe1"
          },
          {
            "type": "html",
            "text": "\nIt is possible that you have overlapping constructor options for a given value (e.g. you need a clock, but you can choose between the local hardware clock vs. an network-time-protocol clock). At this point, [[Abstract Constructor]] benefits from [[Policy Injection]] to select heuristically between available options (e.g. allowing user to decide between favoring performance, precision, or accuracy).",
            "id": "b0b0a2cde238501f1de99c7427c4075c"
          },
          {
            "type": "html",
            "text": "\n[[Abstract Constructor]] supports data-driven object construction, since the selection of object is based entirely on dynamic input data and available constructors (potentially via plugins) rather than being based upon static code.",
            "id": "3e5fa63ef9ff1ada84b1e6a042fb9258"
          },
          {
            "type": "html",
            "text": "\n[[Abstract Constructor]] does not imply [[Garbage Collection]], but [[Abstract Constructor]] + [[Garbage Collection]] is a powerful combination in that it allows one to return singletons and other shared objects from the [[Abstract Constructor]]. Without [[Garbage Collection]], one would need to be concerned about figuring out when to delete a potentially shared object, which would defeat its use for singletons and shared objects.",
            "id": "1411c6ad0efd0544cf21516b3ac194e6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1d39faa92c40ff78d4243a54fba97ffe"
          },
          {
            "type": "html",
            "text": "\nOther approaches to handling shared objects exist, such as constructing a pool of named objects then using [[Setter Injection]] to obtain references to appropriate objects from the pool - i.e. a two-pass approach that allows sharing of objects other than just singletons. In this case, [[Abstract Constructor]] is still useful for data-driven construction for the pool of objects. This approach does require a little discipline - in particular, to not send any messages as part of the first or second passes. A third pass could be utilized for 'startup' procedures.",
            "id": "813c8c5ba75f7560cd4e1be5637513dc"
          },
          {
            "type": "html",
            "text": " Pass 1: examine object-graph representation; use [[Abstract Constructor]] to produce and name each object within the graph. (Now all 'points' are loaded)",
            "id": "f680c14a6db05816e988aad70c327476"
          },
          {
            "type": "html",
            "text": " Pass 2: to each object, pass the pool of objects in the configuration so that all references in the object-graph are closed. (Now all 'edges' are loaded)",
            "id": "2417cd7f65d58779f2a9a0dcfb90a931"
          },
          {
            "type": "html",
            "text": " Pass 3 (optional): for each object, call the 'init' method (Now everything is running).",
            "id": "1407ebea9db80bc8eecb81fae74f8c2f"
          },
          {
            "type": "html",
            "text": "\nAlternative to Pass 3 is to construct a startup procedure to run later. The delay allows easily for composing multiple object graphs. [[First Class]] support for two-pass or three-pass object-graph construction [[Design Patterns]] is quite useful for achieving the latter half of [[Primitives And Means Of Composition]] in [[Object Oriented Programming]].",
            "id": "9f41c8d29936f331c638d32bd109f60f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1d39faa92c40ff78d4243a54fba97ffe"
          },
          {
            "type": "html",
            "text": "\nSee: [[Dependency Injection]], [[New Considered Harmful]], [[Policy Injection]]",
            "id": "4ee2a4eb86de90c3b965252a29ac7999"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AbstractConstructor c2.com]",
            "id": "62dade9a16875d383972d415373d5fb8"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628511108930
    },
    {
      "type": "edit",
      "id": "813c8c5ba75f7560cd4e1be5637513dc",
      "item": {
        "type": "html",
        "text": "Other approaches to handling shared objects exist, such as constructing a pool of named objects then using [[Setter Injection]] to obtain references to appropriate objects from the pool - i.e. a two-pass approach that allows sharing of objects other than just singletons. In this case, [[Abstract Constructor]] is still useful for data-driven construction for the pool of objects. This approach does require a little discipline - in particular, to not send any [[messages]] as part of the first or second passes. A third pass could be utilized for 'startup' procedures.",
        "id": "813c8c5ba75f7560cd4e1be5637513dc"
      },
      "date": 1645022172640
    }
  ]
}