{
  "title": "Spike Solution",
  "story": [
    {
      "type": "html",
      "text": "\"Spike\" because [[Top Down]] is typically [[Breadth First]], but a Spike is [[Depth First]]. From the top to the bottom, then [[Close The Loop]].",
      "id": "48ea41b86fd965bccaa8c7f201b54e65"
    },
    {
      "type": "html",
      "text": "\nSo-called because a spike is \"end to end, but very thin\", like driving a spike all the way through a log.",
      "id": "c49fb0a1332876dfa359df9ee762914e"
    },
    {
      "type": "html",
      "text": "\nNow described in Alistair's medical format in [[Spike Described]]. ",
      "id": "944b848211bd768f45179bdd997be511"
    },
    {
      "type": "html",
      "text": "<i>[[Yag Ni]] + domain_ignorance?</i>",
      "id": "1906ac90fe999106aa6a62790d7a5720"
    },
    {
      "type": "html",
      "text": "---//---",
      "id": "905501a7d68abdd5c1e6498625d59c84"
    },
    {
      "type": "html",
      "text": "<i>Also, referred to as a \"steel thread\". Runs the length of the application architecture (front-to-back, top-to-bottom, whatever) of what you are building. Each new top-to-bottom feature is a new thread. Steel threads wrapped together incrementally form a cable stronger than an equivalent diameter solid cable extruded all at once. Thread akin to string, as in string testing. - NormanECarpenter</i>",
      "id": "48bd1334c3df475edb5012b7f812ff1b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nI would often ask Kent, \"What is the simplest thing we can program that will convince us we are on the right track?\" Such stepping outside the difficulties at hand often led us to simpler and more compelling solutions. Kent dubbed this a <i>Spike</i>. I found the practice particularly useful while maintaining large frameworks.",
      "id": "d98ebc6985fe7bfa735911fdb1860887"
    },
    {
      "type": "html",
      "text": "\nI've mentioned that it is to be a part of Episodes-II when ever that gets written. The following pattern is from my overhead slide of the same name ...",
      "id": "10fcbe2c2aee7689c74a75f4b2cbf6dd"
    },
    {
      "type": "html",
      "text": " Compounded complexity within existing code can distract from the essence of a requirement. ",
      "id": "68309004361949975825b2427d0e102e"
    },
    {
      "type": "html",
      "text": " <b>Therefore</b>, Write the smallest possible code that could be said to perform a function independent of existing mechanism.",
      "id": "57db77eb96ae68201c801bf136b5feac"
    },
    {
      "type": "html",
      "text": "\n[[Ron Jeffries]] tells me that he has an elaboration of this in the works too. There, now we are both on the hook. -- [[Ward Cunningham]]",
      "id": "53cee955f6c0dfa7aa4e991c71a5abed"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nA micro example of this occurred at OOPSLA 97 at Ward's and my [[Pair Programming]] BoF. Someone asked us to implement accounts and transactions in less than five minutes. Here is the code for our first spike:",
      "id": "c18595f136cb4ee2fd9d5420eef28012"
    },
    {
      "type": "html",
      "text": "#(10 -5 -2) inject:<br>0 into: [:s :e | s + e]",
      "id": "a1273d048fde3209a0d18b887dcd97ea"
    },
    {
      "type": "html",
      "text": "The final balance of this account is, of course, 3. Our user then added the requirement that the transactions be dated. The new spike looked like this:",
      "id": "5a9417570a448ebebe923e76967cd3a8"
    },
    {
      "type": "code",
      "text": "  t := #((10 0) (-5 3) (-2 7)).\n  (t select: [:e | e last < 5]) inject: 0 into: [:s :e | s + e first]",
      "id": "a15d1d50cfa2364edec1e967db38276f"
    },
    {
      "type": "html",
      "text": "\nThe point with this spike is that we were able to explore (learn about) the crux of the problem- the combination of selection and summing- without invoking any of the impedimenta of objects.",
      "id": "b3269dcaf10fdd71370905e66368b59e"
    },
    {
      "type": "html",
      "text": "\nSpikes are good when you are knowledge-limited, not time-limited.",
      "id": "2903d9d13daad0640b9cc2938c554ec9"
    },
    {
      "type": "html",
      "text": "-- [[Kent Beck]]",
      "id": "2b95d8fb9e678f38606380ace6e9d557"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "... and I am really sorry I did not see [[Spike Solution]] in time to ask you for a copy to put into the appendix of my book with the other knowledge-based [[Project Management Patterns]]. It is a perfect complement to [[Clear The Fog]], [[Early And Regular Delivery]], [[Proto Type]], and [[Micro Cosm]], illustrating something none of those do. [[Spike Solution]] is a cross between [[Early And Regular Delivery]] (deliver increments continuously to get feedback on the process) and [[Proto Type]] (codify subset of best current understanding to shed light on the problem or solution), and much shorter in duration than anything I suggested. I cite [[Spike Solution]] to many people these days as the shortest initial 'V' in a [[Vw Staging]] policy (where a V is either a prototype or a deliverable increment).",
      "id": "d0d182ddf92ff24eacbdc3ebbfed8cb1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nOn the Chrysler C3 project, the way we use [[Spike Solution]], in the context of Alistair's patterns, is as a tiny version of [[Clear The Fog]]. We like a [[Spike Solution]] to take no more than a couple of days, and a half day is ideal. We plan to throw away the code, although sometimes something is salvaged.",
      "id": "96693914066670ebb2d546aed357d53f"
    },
    {
      "type": "html",
      "text": "\nSometimes we might use a Spike to learn about the algorithm, as with the accounts example Kent gives above. Those should take minutes in most cases, not hours.",
      "id": "e5cce2fc2781f1b6af707644cdff8844"
    },
    {
      "type": "html",
      "text": "\nUsually, however, we'll go deeper, using the real objects, and broader, typically from reading the real input to writing the real output. We found that when we didn't consider the full breadth, we got into trouble, so we changed our process accordingly.",
      "id": "5d056845208cf9edab95c3b436becf30"
    },
    {
      "type": "html",
      "text": "-- [[Ron Jeffries]]",
      "id": "20aaece63388f827927df957e23fc701"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nOne more thing ... there's a special kind of discovery that goes with the kind of [[Spike Solution]] Kent shows above. This approach goes to the core algorithm, and shows you the shape that the final solution would like to have. Here we see that we'd like the collection of accounts to have real Collection behavior, selection and injection.",
      "id": "3b019d5c2119e6c4134295a3739ac822"
    },
    {
      "type": "html",
      "text": "\nWhen we focus on this \"inner loop\", it seems to me that we are exploring some essential reality of the problem and its natural solution. We can focus the outer parts of the solution (the input and the output, for example) to bring us the objects that are just right for making the core algorithm clear, simple, and efficient.",
      "id": "dbd5dd86bec697da0ed16c07cdd62d90"
    },
    {
      "type": "html",
      "text": "\nThis sounds weird and vague even to me, but I know there's an idea in here somewhere. Fix it for me?",
      "id": "c5f342c1aaa491187f0763f841d6a1dd"
    },
    {
      "type": "html",
      "text": "-- [[Ron Jeffries]]",
      "id": "20aaece63388f827927df957e23fc701"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nIf I said \"transform-centered design\", would you hit me? What I hear you saying is \"Write the middle first\". After you understand the middle, you know the preconditions and postconditions necessary to support it.",
      "id": "ccb80db4739153a2fe9ed2eac45cc094"
    },
    {
      "type": "html",
      "text": "-- [[Betsy Hanes Perry]]",
      "id": "97dc0ebf4a4363d1e66b4a3c3c7d0bbd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "[[Ron Jeffries]]' comments remind me of Fred Brooks' directive to \"Write one to throw away\", in [[Mythical Man Month]].",
      "id": "72a2f842eea97c8eb9f2872497b68dab"
    },
    {
      "type": "html",
      "text": "-- [[Katy Mulvey]]",
      "id": "20342f9c3049a6ca35f1d3379ca2fcfc"
    },
    {
      "type": "html",
      "text": "\nDon't look broke to me. It does remind me of [[Dijkstra And Refrigerators]]. ps. I just took a crack at describing it in my medical pattern form in [[Spike Described]]. -- [[Alistair Cockburn]]",
      "id": "df4f2523aad9db66f4a8b0882c231113"
    },
    {
      "type": "html",
      "text": "\nPerhaps not <i>broke</i>, but the essence of \"write one to throw away\", to me, is that you learn something from your first attempt to write something. This pattern says the same thing, with the constraint that you keep your first attempt small and simple, so you can learn something new quickly. ",
      "id": "e4c6fa135c4ffe8ca90739dcae93a590"
    },
    {
      "type": "html",
      "text": "-- [[Katy Mulvey]]",
      "id": "20342f9c3049a6ca35f1d3379ca2fcfc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "This reminds me of a standard technique for learning a new programming language (see [[Hello World]]) or testing the actual effect of some command or language construct. ",
      "id": "4e33d41e9361f13e3514c0746fdf834f"
    },
    {
      "type": "html",
      "text": "\nCreate the shortest possible procedure (or object and method) that exercises the command (containing only command, output, and life-support). Compile, run (possibly in the debugger), and modify until understanding comes.",
      "id": "b7374457d20c172c3a7dfaaf79643f0f"
    },
    {
      "type": "html",
      "text": "\nAlthough this should be obvious, sometimes I forget and instead wade through huge chunks of code in the debugger. ",
      "id": "da7e1221516af165111d8b01f6f3ddf4"
    },
    {
      "type": "html",
      "text": "-- [[Wayne Carson]]",
      "id": "ba1b92796741c3a5bac89aec4496adbe"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "If we regard a [[Spike Solution]] as research, there's a quote from [[Roger Needham]] on the lines of",
      "id": "47498a936fc126d95cc5258fc7d2bad9"
    },
    {
      "type": "html",
      "text": "<i>The best research is done with a shovel, not tweezers</i>",
      "id": "e562babc0fba90e70ae59defdc848933"
    },
    {
      "type": "html",
      "text": "-- [[Steve Freeman]]",
      "id": "45a8920539890680908409186018e457"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nI've put my experience with [[Spike Solution]](s) on the ATS project in [[Ats Spike Solution]]. -- [[Jim Little]]",
      "id": "ded607a995a9f98bd23cf7003abae07b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nI hope XP authors will write [[Spike Solution]] uses into future XP books. I have had a very enlightening experience with a [[Spike Solution]]. My experience and recommendations are at [[Spike As Design Aid]]. -- [[Bret Williams]]",
      "id": "dda20368ee4dccab05bbfd3fb030f8e5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nIs a [[Spike Solution]] the same thing as [[Tracer Bullets]], described in [[The Pragmatic Programmer]]? -- Paul",
      "id": "aaae5f0b5548787c1fcceff103287be3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "<i>We choose to write this code first, not because it is easy, but because it is hard.</i> -- [[John Fitzgerald Kennedy]]",
      "id": "1d5839cf19560ab59e1142dcb6cdf20f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "These remind me an awful lot of the famous APL one-liners (1970 vintage), where each operator did the work of many lines of traditional code. Often the whole program consisted of a single-line, especially in the hands of a master, like Ken Iverson and Adin Falkoff. ",
      "id": "7cc9f7611cedecb47e4ff4351d6885cf"
    },
    {
      "type": "html",
      "text": "-- Birol Ayg�n ",
      "id": "f00ff75d51757f28fb2eba29f838d656"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "APL:  Try the K or J programming languages.",
      "id": "27007becbfb20f64900804144df06392"
    },
    {
      "type": "html",
      "text": "\nAn [[Extreme Programming]] variation I am experimenting with is to develop spike solutions in the style of unit tests so they are integrated into the build system and, hence, the totality of the extreme programming experience so that all programmers have the potential to benefit from availability of further research on spikes, so that if fundamental project foundations change (core vendor libraries external to ones user stories) the spikes actually break at the right time so someone catches it and refactors the spike if there is a payoff...or one just deletes it.",
      "id": "dc9e6f418974dba865bf517f0860d114"
    },
    {
      "type": "html",
      "text": "\nThis seems to be working so far except the spikes are noisy and occasionally interfere with a quick run of all tests.",
      "id": "a56bdba39b33798c2f493c9bd852de5d"
    },
    {
      "type": "html",
      "text": "\nI guess I am so [[Test Infected]] at this point that I cannot explore any programming task, including spike solutions, without first writing a [[Unit Test]].  And since XP believes the fastest way to deliver deliverables is by doing XP, then a spike solution, since it is a deliverable, ought to be done with miniature XP iterations.  And that includes stories, tasks & estimates, unit tests, and an [[Extreme Programming End Zone Dance]] when all tests once-again pass 100%.",
      "id": "3c51f0585b9afc91d2198b3a77481a8e"
    },
    {
      "type": "html",
      "text": "-- [[Eric Newhuis]]",
      "id": "ca375596fba0c5dfc00bd8035984ee69"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nA common idiom in writing small Java programs that make heavy use of one or\nmore libraries is to write a static program.\nThis will commonly take place as part of a spike in an XP project to \nexamine how external class libraries are used.\nHowever, after some amount of time, the program needs to become a \nfull-fledged object.\nUnfortunately, such a program will probably use \"tester inspects output\" \nas the testing regime.\nIn this context, all but the main method will be private, as nothing calls \nthis program, and it isn't subclasssed.\nWhat series of refactorings is needed to change a static program into an \nobject?",
      "id": "f142d0a2b77aace3f0005dfa95b83ca0"
    },
    {
      "type": "html",
      "text": "\nThe first refactoring is to extract method on main to form a static init \nmethod.\nThis refactoring will create a method that will have a String[] argument to \naccept the command line arguments of main.\nAt this point, a simple unit test can be written by making one or more of \nthe static fields public, and writing corresponding test methods to test \nthe values of these fields after calling Class.main().",
      "id": "d326aa880bb7b50e9f0755483a926108"
    },
    {
      "type": "html",
      "text": "\nNext, create a constructor that calls init.\nThis constructor should take a String[] argument.\nThis argument may be removed later or other constructors added.\nA unit test can now be added that calls the constructor, then accesses the \nstatic fields in much the same way as the previous unit tests.",
      "id": "cdabc28bc090d866c9fa087a4752800e"
    },
    {
      "type": "html",
      "text": "\nThe next step is the biggest.\nChange all of the appropriate static fields to instance fields.\nChange all of the appropriate static methods to instance methods.\nThis will include the init.\nChange main to call the constructor instead of init.\nThe unit tests will now need to be changed to reference the fields as \ninstance fields of the object, rather than as static fields of the class.",
      "id": "937bc00336535409555348eab0a0ba65"
    },
    {
      "type": "html",
      "text": "\nAt this point, do encapsulate field on the appropriate fields.\nRewrite unit tests to use the field accessors, rather than directly \naccessing the fields.",
      "id": "cd9a4b5db7e4b84bb61fcd3471acc905"
    },
    {
      "type": "html",
      "text": "\nIf the program does more than one calculation and clients of the class \nmay not need all of the different calculations, then make the appropriate \nmethods public and move code from init into these methods.\nWrite unit tests for each of these public methods.",
      "id": "16a9a4d0d267186f93cdddadd46332fc"
    },
    {
      "type": "html",
      "text": "\nThis is somewhat like make data objects, but has to deal with behavioral \naspects.",
      "id": "29dd6cf6e00227c834eb476a8f48a66e"
    },
    {
      "type": "html",
      "text": "\nCan showing this (series of) refactoring(s) help students learn \nproper OOP techniques?\nBy taking a program that properly follows structured programming \nusing an object-oriented language, would this help students \nunderstand how to properly encapsulate, distinguish class from \ninstance data, distinguish class from instance behavior, how to \nintroduce unit testing where none existed before, etc.",
      "id": "e3c7ae593fda84d90e522588c8528101"
    },
    {
      "type": "html",
      "text": "-- [[Joel Jones]]",
      "id": "ea45f76152a61b7ef131458adeddae7c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nI did this on another project (didn't know it was XP), and I thought of it more as being like building a suspension bridge. First, you get the string over the chasm, then you use the string to pull a light rope across, the light rope to pul a heavier rope, and so on, The key is to get that string over, all the way, from one side to the other. On this particular project, the chasm was the public [[Inter Net]] and the string was an SSL connection.",
      "id": "3ce067566d492cb0cc0b2dee01a6090c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06717025b0f0a864b2daa8763b4be8f3"
    },
    {
      "type": "html",
      "text": "\nForgive me for asking, but I'm curious as to why there's a need for this term when the same process is already called research & development. Is there some aspect of a spike solution that traditional R&D does not cover?",
      "id": "f8fd6baa913d5b1d65b1fc340ebc823e"
    },
    {
      "type": "html",
      "text": "\nI may have been using [[Spike Solution]] without intending to, but R&D depending on the level you are talking may start as a [[Spike Solution]] but will continue to grow.  The point, as I understand it, of a [[Spike Solution]] is not to give you the full answer which, hopefully R&D will eventually lead to, but rather to give you a workable framework to determine how to make progress towards that solution.  It is an initial step and when it moves onto something more it is that more and nolonger a [[Spike Solution]].  This is by no means a bad thing but one possible progression if you don't like writing throw away code. --[[Andrew Ricketts]] [often wrong but almost always opinionated correct if worng]",
      "id": "60e39fbc876833b1194e8aa0ddf97fa4"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SpikeSolution c2.com]",
      "id": "46a44f45b27b40543e8a5401e2a456a6"
    }
  ],
  "journal": [
    {
      "date": 1281714662000,
      "id": "a94d68ad755ad3fd329dc011e02cebe1",
      "type": "create",
      "item": {
        "title": "Spike Solution",
        "story": [
          {
            "type": "html",
            "text": "\"Spike\" because [[Top Down]] is typically [[Breadth First]], but a Spike is [[Depth First]]. From the top to the bottom, then [[Close The Loop]].",
            "id": "48ea41b86fd965bccaa8c7f201b54e65"
          },
          {
            "type": "html",
            "text": "\nSo-called because a spike is \"end to end, but very thin\", like driving a spike all the way through a log.",
            "id": "c49fb0a1332876dfa359df9ee762914e"
          },
          {
            "type": "html",
            "text": "\nNow described in Alistair's medical format in [[Spike Described]]. ",
            "id": "944b848211bd768f45179bdd997be511"
          },
          {
            "type": "html",
            "text": "<i>[[Yag Ni]] + domain_ignorance?</i>",
            "id": "1906ac90fe999106aa6a62790d7a5720"
          },
          {
            "type": "html",
            "text": "---//---",
            "id": "905501a7d68abdd5c1e6498625d59c84"
          },
          {
            "type": "html",
            "text": "<i>Also, referred to as a \"steel thread\". Runs the length of the application architecture (front-to-back, top-to-bottom, whatever) of what you are building. Each new top-to-bottom feature is a new thread. Steel threads wrapped together incrementally form a cable stronger than an equivalent diameter solid cable extruded all at once. Thread akin to string, as in string testing. - NormanECarpenter</i>",
            "id": "48bd1334c3df475edb5012b7f812ff1b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nI would often ask Kent, \"What is the simplest thing we can program that will convince us we are on the right track?\" Such stepping outside the difficulties at hand often led us to simpler and more compelling solutions. Kent dubbed this a <i>Spike</i>. I found the practice particularly useful while maintaining large frameworks.",
            "id": "d98ebc6985fe7bfa735911fdb1860887"
          },
          {
            "type": "html",
            "text": "\nI've mentioned that it is to be a part of Episodes-II when ever that gets written. The following pattern is from my overhead slide of the same name ...",
            "id": "10fcbe2c2aee7689c74a75f4b2cbf6dd"
          },
          {
            "type": "html",
            "text": " Compounded complexity within existing code can distract from the essence of a requirement. ",
            "id": "68309004361949975825b2427d0e102e"
          },
          {
            "type": "html",
            "text": " <b>Therefore</b>, Write the smallest possible code that could be said to perform a function independent of existing mechanism.",
            "id": "57db77eb96ae68201c801bf136b5feac"
          },
          {
            "type": "html",
            "text": "\n[[Ron Jeffries]] tells me that he has an elaboration of this in the works too. There, now we are both on the hook. -- [[Ward Cunningham]]",
            "id": "53cee955f6c0dfa7aa4e991c71a5abed"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nA micro example of this occurred at OOPSLA 97 at Ward's and my [[Pair Programming]] BoF. Someone asked us to implement accounts and transactions in less than five minutes. Here is the code for our first spike:",
            "id": "c18595f136cb4ee2fd9d5420eef28012"
          },
          {
            "type": "html",
            "text": "#(10 -5 -2) inject:<br>0 into: [:s :e | s + e]",
            "id": "a1273d048fde3209a0d18b887dcd97ea"
          },
          {
            "type": "html",
            "text": "The final balance of this account is, of course, 3. Our user then added the requirement that the transactions be dated. The new spike looked like this:",
            "id": "5a9417570a448ebebe923e76967cd3a8"
          },
          {
            "type": "code",
            "text": "  t := #((10 0) (-5 3) (-2 7)).\n  (t select: [:e | e last < 5]) inject: 0 into: [:s :e | s + e first]",
            "id": "a15d1d50cfa2364edec1e967db38276f"
          },
          {
            "type": "html",
            "text": "\nThe point with this spike is that we were able to explore (learn about) the crux of the problem- the combination of selection and summing- without invoking any of the impedimenta of objects.",
            "id": "b3269dcaf10fdd71370905e66368b59e"
          },
          {
            "type": "html",
            "text": "\nSpikes are good when you are knowledge-limited, not time-limited.",
            "id": "2903d9d13daad0640b9cc2938c554ec9"
          },
          {
            "type": "html",
            "text": "-- [[Kent Beck]]",
            "id": "2b95d8fb9e678f38606380ace6e9d557"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "... and I am really sorry I did not see [[Spike Solution]] in time to ask you for a copy to put into the appendix of my book with the other knowledge-based [[Project Management Patterns]]. It is a perfect complement to [[Clear The Fog]], [[Early And Regular Delivery]], [[Proto Type]], and [[Micro Cosm]], illustrating something none of those do. [[Spike Solution]] is a cross between [[Early And Regular Delivery]] (deliver increments continuously to get feedback on the process) and [[Proto Type]] (codify subset of best current understanding to shed light on the problem or solution), and much shorter in duration than anything I suggested. I cite [[Spike Solution]] to many people these days as the shortest initial 'V' in a [[Vw Staging]] policy (where a V is either a prototype or a deliverable increment).",
            "id": "d0d182ddf92ff24eacbdc3ebbfed8cb1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nOn the Chrysler C3 project, the way we use [[Spike Solution]], in the context of Alistair's patterns, is as a tiny version of [[Clear The Fog]]. We like a [[Spike Solution]] to take no more than a couple of days, and a half day is ideal. We plan to throw away the code, although sometimes something is salvaged.",
            "id": "96693914066670ebb2d546aed357d53f"
          },
          {
            "type": "html",
            "text": "\nSometimes we might use a Spike to learn about the algorithm, as with the accounts example Kent gives above. Those should take minutes in most cases, not hours.",
            "id": "e5cce2fc2781f1b6af707644cdff8844"
          },
          {
            "type": "html",
            "text": "\nUsually, however, we'll go deeper, using the real objects, and broader, typically from reading the real input to writing the real output. We found that when we didn't consider the full breadth, we got into trouble, so we changed our process accordingly.",
            "id": "5d056845208cf9edab95c3b436becf30"
          },
          {
            "type": "html",
            "text": "-- [[Ron Jeffries]]",
            "id": "20aaece63388f827927df957e23fc701"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nOne more thing ... there's a special kind of discovery that goes with the kind of [[Spike Solution]] Kent shows above. This approach goes to the core algorithm, and shows you the shape that the final solution would like to have. Here we see that we'd like the collection of accounts to have real Collection behavior, selection and injection.",
            "id": "3b019d5c2119e6c4134295a3739ac822"
          },
          {
            "type": "html",
            "text": "\nWhen we focus on this \"inner loop\", it seems to me that we are exploring some essential reality of the problem and its natural solution. We can focus the outer parts of the solution (the input and the output, for example) to bring us the objects that are just right for making the core algorithm clear, simple, and efficient.",
            "id": "dbd5dd86bec697da0ed16c07cdd62d90"
          },
          {
            "type": "html",
            "text": "\nThis sounds weird and vague even to me, but I know there's an idea in here somewhere. Fix it for me?",
            "id": "c5f342c1aaa491187f0763f841d6a1dd"
          },
          {
            "type": "html",
            "text": "-- [[Ron Jeffries]]",
            "id": "20aaece63388f827927df957e23fc701"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nIf I said \"transform-centered design\", would you hit me? What I hear you saying is \"Write the middle first\". After you understand the middle, you know the preconditions and postconditions necessary to support it.",
            "id": "ccb80db4739153a2fe9ed2eac45cc094"
          },
          {
            "type": "html",
            "text": "-- [[Betsy Hanes Perry]]",
            "id": "97dc0ebf4a4363d1e66b4a3c3c7d0bbd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "[[Ron Jeffries]]' comments remind me of Fred Brooks' directive to \"Write one to throw away\", in [[Mythical Man Month]].",
            "id": "72a2f842eea97c8eb9f2872497b68dab"
          },
          {
            "type": "html",
            "text": "-- [[Katy Mulvey]]",
            "id": "20342f9c3049a6ca35f1d3379ca2fcfc"
          },
          {
            "type": "html",
            "text": "\nDon't look broke to me. It does remind me of [[Dijkstra And Refrigerators]]. ps. I just took a crack at describing it in my medical pattern form in [[Spike Described]]. -- [[Alistair Cockburn]]",
            "id": "df4f2523aad9db66f4a8b0882c231113"
          },
          {
            "type": "html",
            "text": "\nPerhaps not <i>broke</i>, but the essence of \"write one to throw away\", to me, is that you learn something from your first attempt to write something. This pattern says the same thing, with the constraint that you keep your first attempt small and simple, so you can learn something new quickly. ",
            "id": "e4c6fa135c4ffe8ca90739dcae93a590"
          },
          {
            "type": "html",
            "text": "-- [[Katy Mulvey]]",
            "id": "20342f9c3049a6ca35f1d3379ca2fcfc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "This reminds me of a standard technique for learning a new programming language (see [[Hello World]]) or testing the actual effect of some command or language construct. ",
            "id": "4e33d41e9361f13e3514c0746fdf834f"
          },
          {
            "type": "html",
            "text": "\nCreate the shortest possible procedure (or object and method) that exercises the command (containing only command, output, and life-support). Compile, run (possibly in the debugger), and modify until understanding comes.",
            "id": "b7374457d20c172c3a7dfaaf79643f0f"
          },
          {
            "type": "html",
            "text": "\nAlthough this should be obvious, sometimes I forget and instead wade through huge chunks of code in the debugger. ",
            "id": "da7e1221516af165111d8b01f6f3ddf4"
          },
          {
            "type": "html",
            "text": "-- [[Wayne Carson]]",
            "id": "ba1b92796741c3a5bac89aec4496adbe"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "If we regard a [[Spike Solution]] as research, there's a quote from [[Roger Needham]] on the lines of",
            "id": "47498a936fc126d95cc5258fc7d2bad9"
          },
          {
            "type": "html",
            "text": "<i>The best research is done with a shovel, not tweezers</i>",
            "id": "e562babc0fba90e70ae59defdc848933"
          },
          {
            "type": "html",
            "text": "-- [[Steve Freeman]]",
            "id": "45a8920539890680908409186018e457"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nI've put my experience with [[Spike Solution]](s) on the ATS project in [[Ats Spike Solution]]. -- [[Jim Little]]",
            "id": "ded607a995a9f98bd23cf7003abae07b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nI hope XP authors will write [[Spike Solution]] uses into future XP books. I have had a very enlightening experience with a [[Spike Solution]]. My experience and recommendations are at [[Spike As Design Aid]]. -- [[Bret Williams]]",
            "id": "dda20368ee4dccab05bbfd3fb030f8e5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nIs a [[Spike Solution]] the same thing as [[Tracer Bullets]], described in [[The Pragmatic Programmer]]? -- Paul",
            "id": "aaae5f0b5548787c1fcceff103287be3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "<i>We choose to write this code first, not because it is easy, but because it is hard.</i> -- [[John Fitzgerald Kennedy]]",
            "id": "1d5839cf19560ab59e1142dcb6cdf20f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "These remind me an awful lot of the famous APL one-liners (1970 vintage), where each operator did the work of many lines of traditional code. Often the whole program consisted of a single-line, especially in the hands of a master, like Ken Iverson and Adin Falkoff. ",
            "id": "7cc9f7611cedecb47e4ff4351d6885cf"
          },
          {
            "type": "html",
            "text": "-- Birol Ayg�n ",
            "id": "f00ff75d51757f28fb2eba29f838d656"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "APL:  Try the K or J programming languages.",
            "id": "27007becbfb20f64900804144df06392"
          },
          {
            "type": "html",
            "text": "\nAn [[Extreme Programming]] variation I am experimenting with is to develop spike solutions in the style of unit tests so they are integrated into the build system and, hence, the totality of the extreme programming experience so that all programmers have the potential to benefit from availability of further research on spikes, so that if fundamental project foundations change (core vendor libraries external to ones user stories) the spikes actually break at the right time so someone catches it and refactors the spike if there is a payoff...or one just deletes it.",
            "id": "dc9e6f418974dba865bf517f0860d114"
          },
          {
            "type": "html",
            "text": "\nThis seems to be working so far except the spikes are noisy and occasionally interfere with a quick run of all tests.",
            "id": "a56bdba39b33798c2f493c9bd852de5d"
          },
          {
            "type": "html",
            "text": "\nI guess I am so [[Test Infected]] at this point that I cannot explore any programming task, including spike solutions, without first writing a [[Unit Test]].  And since XP believes the fastest way to deliver deliverables is by doing XP, then a spike solution, since it is a deliverable, ought to be done with miniature XP iterations.  And that includes stories, tasks & estimates, unit tests, and an [[Extreme Programming End Zone Dance]] when all tests once-again pass 100%.",
            "id": "3c51f0585b9afc91d2198b3a77481a8e"
          },
          {
            "type": "html",
            "text": "-- [[Eric Newhuis]]",
            "id": "ca375596fba0c5dfc00bd8035984ee69"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nA common idiom in writing small Java programs that make heavy use of one or\nmore libraries is to write a static program.\nThis will commonly take place as part of a spike in an XP project to \nexamine how external class libraries are used.\nHowever, after some amount of time, the program needs to become a \nfull-fledged object.\nUnfortunately, such a program will probably use \"tester inspects output\" \nas the testing regime.\nIn this context, all but the main method will be private, as nothing calls \nthis program, and it isn't subclasssed.\nWhat series of refactorings is needed to change a static program into an \nobject?",
            "id": "f142d0a2b77aace3f0005dfa95b83ca0"
          },
          {
            "type": "html",
            "text": "\nThe first refactoring is to extract method on main to form a static init \nmethod.\nThis refactoring will create a method that will have a String[] argument to \naccept the command line arguments of main.\nAt this point, a simple unit test can be written by making one or more of \nthe static fields public, and writing corresponding test methods to test \nthe values of these fields after calling Class.main().",
            "id": "d326aa880bb7b50e9f0755483a926108"
          },
          {
            "type": "html",
            "text": "\nNext, create a constructor that calls init.\nThis constructor should take a String[] argument.\nThis argument may be removed later or other constructors added.\nA unit test can now be added that calls the constructor, then accesses the \nstatic fields in much the same way as the previous unit tests.",
            "id": "cdabc28bc090d866c9fa087a4752800e"
          },
          {
            "type": "html",
            "text": "\nThe next step is the biggest.\nChange all of the appropriate static fields to instance fields.\nChange all of the appropriate static methods to instance methods.\nThis will include the init.\nChange main to call the constructor instead of init.\nThe unit tests will now need to be changed to reference the fields as \ninstance fields of the object, rather than as static fields of the class.",
            "id": "937bc00336535409555348eab0a0ba65"
          },
          {
            "type": "html",
            "text": "\nAt this point, do encapsulate field on the appropriate fields.\nRewrite unit tests to use the field accessors, rather than directly \naccessing the fields.",
            "id": "cd9a4b5db7e4b84bb61fcd3471acc905"
          },
          {
            "type": "html",
            "text": "\nIf the program does more than one calculation and clients of the class \nmay not need all of the different calculations, then make the appropriate \nmethods public and move code from init into these methods.\nWrite unit tests for each of these public methods.",
            "id": "16a9a4d0d267186f93cdddadd46332fc"
          },
          {
            "type": "html",
            "text": "\nThis is somewhat like make data objects, but has to deal with behavioral \naspects.",
            "id": "29dd6cf6e00227c834eb476a8f48a66e"
          },
          {
            "type": "html",
            "text": "\nCan showing this (series of) refactoring(s) help students learn \nproper OOP techniques?\nBy taking a program that properly follows structured programming \nusing an object-oriented language, would this help students \nunderstand how to properly encapsulate, distinguish class from \ninstance data, distinguish class from instance behavior, how to \nintroduce unit testing where none existed before, etc.",
            "id": "e3c7ae593fda84d90e522588c8528101"
          },
          {
            "type": "html",
            "text": "-- [[Joel Jones]]",
            "id": "ea45f76152a61b7ef131458adeddae7c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nI did this on another project (didn't know it was XP), and I thought of it more as being like building a suspension bridge. First, you get the string over the chasm, then you use the string to pull a light rope across, the light rope to pul a heavier rope, and so on, The key is to get that string over, all the way, from one side to the other. On this particular project, the chasm was the public [[Inter Net]] and the string was an SSL connection.",
            "id": "3ce067566d492cb0cc0b2dee01a6090c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06717025b0f0a864b2daa8763b4be8f3"
          },
          {
            "type": "html",
            "text": "\nForgive me for asking, but I'm curious as to why there's a need for this term when the same process is already called research & development. Is there some aspect of a spike solution that traditional R&D does not cover?",
            "id": "f8fd6baa913d5b1d65b1fc340ebc823e"
          },
          {
            "type": "html",
            "text": "\nI may have been using [[Spike Solution]] without intending to, but R&D depending on the level you are talking may start as a [[Spike Solution]] but will continue to grow.  The point, as I understand it, of a [[Spike Solution]] is not to give you the full answer which, hopefully R&D will eventually lead to, but rather to give you a workable framework to determine how to make progress towards that solution.  It is an initial step and when it moves onto something more it is that more and nolonger a [[Spike Solution]].  This is by no means a bad thing but one possible progression if you don't like writing throw away code. --[[Andrew Ricketts]] [often wrong but almost always opinionated correct if worng]",
            "id": "60e39fbc876833b1194e8aa0ddf97fa4"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SpikeSolution c2.com]",
            "id": "46a44f45b27b40543e8a5401e2a456a6"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1660315396180
    }
  ]
}