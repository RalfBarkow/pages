{
  "title": "Proxy Pattern",
  "story": [
    {
      "type": "html",
      "text": "A rather vague pattern name, which might refer to any of the following:",
      "id": "72cada29847bd967135b408cde7c7294"
    },
    {
      "type": "html",
      "text": " [[Protection Proxy]]",
      "id": "c0f87f00c8af8a7d73f71d975ec6f171"
    },
    {
      "type": "html",
      "text": " [[Remote Proxy]]",
      "id": "5505d6079083399e447bce849b56eff1"
    },
    {
      "type": "html",
      "text": " [[Caretaker Pattern]]",
      "id": "c80a2090984476d549f74f0675fefcde"
    },
    {
      "type": "html",
      "text": " [[Lazy Instantiation Pattern]]",
      "id": "46edcbb1eed5996e13359d98d4462b9f"
    },
    {
      "type": "html",
      "text": " any other [[Handle Body Pattern]].",
      "id": "40e02605059a24ce22bb673bfa6150cb"
    },
    {
      "type": "html",
      "text": "\nIn the GOF book, [[Proxy Pattern]] is described with the following intent: \"Provide a surrogate or placeholder for another object to control access to it.\"",
      "id": "63a6d9fa8b717e4a24af89eb8283325f"
    },
    {
      "type": "html",
      "text": "\nThis is a [[Protection Proxy]], or possibly [[Caretaker Pattern]]. However, the term \"proxy\" is more commonly used to refer to [[Remote Proxy]], or for handles / wrapper objects (see [[Handle Body Pattern]]).",
      "id": "18110c11904aec911162acf8e4654026"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1a744ac69507965c465589ee5085e932"
    },
    {
      "type": "html",
      "text": "Simply speaking, a Proxy object is one through which we control access to the actual object on which the functionality lies. Depending on the context in which the Proxy object is used, the Pattern is broadly divided into the following 3 types:",
      "id": "fccb0a0e41a8934c5093a9d97cf44be1"
    },
    {
      "type": "html",
      "text": "<b>'Virtual Proxy:</b>' Used for Lazy instantiation of objects or for Lazy processing. Suppose you need to support 'resource-hungry' objects that involve high amount of I/O or one those that involved a database transaction. One need not instantiate these objects until they are really required. The real object would get created only when the client actully requests for some of its functionality. ",
      "id": "9c19c0389c78fd0a22e4db2d25b4c561"
    },
    {
      "type": "html",
      "text": "<i>[This is [[Lazy Instantiation Pattern]].]</i>",
      "id": "b2c105cf3b5275b2cd1a9b697da50e86"
    },
    {
      "type": "html",
      "text": "<b>'Remote Proxy:</b>' Used to hide the communication mechanisms between remote objects. In RMI, for example, we have the stubs which act as Remote Proxies for the Skeleton.",
      "id": "035f2c6b8f92adf47971356f4496a9e3"
    },
    {
      "type": "html",
      "text": "<i>[This is [[Remote Proxy]].]</i>",
      "id": "928763f3f01b6e5348ed99c81d75996c"
    },
    {
      "type": "html",
      "text": "<b>'Access Proxy:</b>' Used to provide control over a sensitive master object. This proxy object could check for the client's access permission before allowing methods to be executed on the actual object.",
      "id": "ee292828a3af5ab5d92944f37d57bbf6"
    },
    {
      "type": "html",
      "text": "<i>[This is [[Protection Proxy]].]</i>",
      "id": "800fcab50a317c67e9a30b5eeaa85de5"
    },
    {
      "type": "html",
      "text": "\nThere are also a proxy type called <b>'Smart Proxy</b>'. This could provide additional functionality over that offered by the existing object.",
      "id": "87fa03aefabc197494e611f6814b0bec"
    },
    {
      "type": "html",
      "text": "<i>[This is [[Decorator Pattern]].]</i>",
      "id": "a6769df64122fdf881a678d8f7c7dddb"
    },
    {
      "type": "html",
      "text": "\neg. Suppose an existing class provides a set of non-threadsafe functions. Instead of modifying the existing class to be threadsafe, a smart proxy could be used to synchronize the method calls.",
      "id": "2917fcde9048a35a208c74170af6f7b9"
    },
    {
      "type": "html",
      "text": "<i>[This should probably be given another name; it is in [[Category Concurrency Patterns]]. The Java collections API uses it.]</i>",
      "id": "b0ab2815ed40d62024c824d95d5c4f2f"
    },
    {
      "type": "html",
      "text": "-- [[Abhishek Gupta]]",
      "id": "8a6bedfe799ccab6c2e6b741cebabede"
    },
    {
      "type": "html",
      "text": "\nCould you list some example code for each kind of proxy? -- will.wang",
      "id": "2c829f670ce344fa45547d41bddcc6d1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1a744ac69507965c465589ee5085e932"
    },
    {
      "type": "html",
      "text": "KCS:\nThe Proxy Class in Java and C# is the only way I know of to dynamically inherit an already instantiated object, and, in effect, create a sort of \"Runtime Multiple Inheritance\". More and more at work, I seeing how this can really help my multi-layered applications.",
      "id": "58438e9ef5d8c4cd7102c585d7a2890b"
    },
    {
      "type": "html",
      "text": "<i>Proxies are Dangerous</i>",
      "id": "da1e4abdd7f273d94bc4a82b96e075ba"
    },
    {
      "type": "html",
      "text": "\n[[Sam Gentile]] noted in his blog that \"If the programming model for your distributed technology of choice includes the concept of a proxy, you're being forced into distributed object semantics\".",
      "id": "06992f3499cd7103233b0ffdf56aa758"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1a744ac69507965c465589ee5085e932"
    },
    {
      "type": "html",
      "text": "\n[http://home.earthlink.net/~huston2/dp/proxy.html home.earthlink.net]",
      "id": "9ae49d1a62eb929e321bcb5931d72132"
    },
    {
      "type": "html",
      "text": "\n[http://wiki.cs.uiuc.edu/patternStories/ProxyPattern wiki.cs.uiuc.edu]",
      "id": "2f9fb3e6e15a99bcaa5e232591a041d6"
    },
    {
      "type": "html",
      "text": "\n[http://delphipatterns.blog.com/2011/02/22/proxy-2/ delphipatterns.blog.com]",
      "id": "f69877d25a69bb24ae67b286f4c4f7e5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1a744ac69507965c465589ee5085e932"
    },
    {
      "type": "html",
      "text": "<b>See also:</b> [[Composite Pattern]], [[Decorator Pattern]], [[Design Patterns]], [[Lazy Proxies]]",
      "id": "b049d7286ececaefc52005712a2ad55b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1a744ac69507965c465589ee5085e932"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]] | [[Category Structural Patterns]]",
      "id": "918f5bc01834cb0dee621bb26135596b"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ProxyPattern c2.com]",
      "id": "351d3dd12df0fbbffe07559326b6b85d"
    }
  ],
  "journal": [
    {
      "date": 1300705768000,
      "id": "0e11f977e082d5f2d5e9efe65108a029",
      "type": "create",
      "item": {
        "title": "Proxy Pattern",
        "story": [
          {
            "type": "html",
            "text": "A rather vague pattern name, which might refer to any of the following:",
            "id": "72cada29847bd967135b408cde7c7294"
          },
          {
            "type": "html",
            "text": " [[Protection Proxy]]",
            "id": "c0f87f00c8af8a7d73f71d975ec6f171"
          },
          {
            "type": "html",
            "text": " [[Remote Proxy]]",
            "id": "5505d6079083399e447bce849b56eff1"
          },
          {
            "type": "html",
            "text": " [[Caretaker Pattern]]",
            "id": "c80a2090984476d549f74f0675fefcde"
          },
          {
            "type": "html",
            "text": " [[Lazy Instantiation Pattern]]",
            "id": "46edcbb1eed5996e13359d98d4462b9f"
          },
          {
            "type": "html",
            "text": " any other [[Handle Body Pattern]].",
            "id": "40e02605059a24ce22bb673bfa6150cb"
          },
          {
            "type": "html",
            "text": "\nIn the GOF book, [[Proxy Pattern]] is described with the following intent: \"Provide a surrogate or placeholder for another object to control access to it.\"",
            "id": "63a6d9fa8b717e4a24af89eb8283325f"
          },
          {
            "type": "html",
            "text": "\nThis is a [[Protection Proxy]], or possibly [[Caretaker Pattern]]. However, the term \"proxy\" is more commonly used to refer to [[Remote Proxy]], or for handles / wrapper objects (see [[Handle Body Pattern]]).",
            "id": "18110c11904aec911162acf8e4654026"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1a744ac69507965c465589ee5085e932"
          },
          {
            "type": "html",
            "text": "Simply speaking, a Proxy object is one through which we control access to the actual object on which the functionality lies. Depending on the context in which the Proxy object is used, the Pattern is broadly divided into the following 3 types:",
            "id": "fccb0a0e41a8934c5093a9d97cf44be1"
          },
          {
            "type": "html",
            "text": "<b>'Virtual Proxy:</b>' Used for Lazy instantiation of objects or for Lazy processing. Suppose you need to support 'resource-hungry' objects that involve high amount of I/O or one those that involved a database transaction. One need not instantiate these objects until they are really required. The real object would get created only when the client actully requests for some of its functionality. ",
            "id": "9c19c0389c78fd0a22e4db2d25b4c561"
          },
          {
            "type": "html",
            "text": "<i>[This is [[Lazy Instantiation Pattern]].]</i>",
            "id": "b2c105cf3b5275b2cd1a9b697da50e86"
          },
          {
            "type": "html",
            "text": "<b>'Remote Proxy:</b>' Used to hide the communication mechanisms between remote objects. In RMI, for example, we have the stubs which act as Remote Proxies for the Skeleton.",
            "id": "035f2c6b8f92adf47971356f4496a9e3"
          },
          {
            "type": "html",
            "text": "<i>[This is [[Remote Proxy]].]</i>",
            "id": "928763f3f01b6e5348ed99c81d75996c"
          },
          {
            "type": "html",
            "text": "<b>'Access Proxy:</b>' Used to provide control over a sensitive master object. This proxy object could check for the client's access permission before allowing methods to be executed on the actual object.",
            "id": "ee292828a3af5ab5d92944f37d57bbf6"
          },
          {
            "type": "html",
            "text": "<i>[This is [[Protection Proxy]].]</i>",
            "id": "800fcab50a317c67e9a30b5eeaa85de5"
          },
          {
            "type": "html",
            "text": "\nThere are also a proxy type called <b>'Smart Proxy</b>'. This could provide additional functionality over that offered by the existing object.",
            "id": "87fa03aefabc197494e611f6814b0bec"
          },
          {
            "type": "html",
            "text": "<i>[This is [[Decorator Pattern]].]</i>",
            "id": "a6769df64122fdf881a678d8f7c7dddb"
          },
          {
            "type": "html",
            "text": "\neg. Suppose an existing class provides a set of non-threadsafe functions. Instead of modifying the existing class to be threadsafe, a smart proxy could be used to synchronize the method calls.",
            "id": "2917fcde9048a35a208c74170af6f7b9"
          },
          {
            "type": "html",
            "text": "<i>[This should probably be given another name; it is in [[Category Concurrency Patterns]]. The Java collections API uses it.]</i>",
            "id": "b0ab2815ed40d62024c824d95d5c4f2f"
          },
          {
            "type": "html",
            "text": "-- [[Abhishek Gupta]]",
            "id": "8a6bedfe799ccab6c2e6b741cebabede"
          },
          {
            "type": "html",
            "text": "\nCould you list some example code for each kind of proxy? -- will.wang",
            "id": "2c829f670ce344fa45547d41bddcc6d1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1a744ac69507965c465589ee5085e932"
          },
          {
            "type": "html",
            "text": "KCS:\nThe Proxy Class in Java and C# is the only way I know of to dynamically inherit an already instantiated object, and, in effect, create a sort of \"Runtime Multiple Inheritance\". More and more at work, I seeing how this can really help my multi-layered applications.",
            "id": "58438e9ef5d8c4cd7102c585d7a2890b"
          },
          {
            "type": "html",
            "text": "<i>Proxies are Dangerous</i>",
            "id": "da1e4abdd7f273d94bc4a82b96e075ba"
          },
          {
            "type": "html",
            "text": "\n[[Sam Gentile]] noted in his blog that \"If the programming model for your distributed technology of choice includes the concept of a proxy, you're being forced into distributed object semantics\".",
            "id": "06992f3499cd7103233b0ffdf56aa758"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1a744ac69507965c465589ee5085e932"
          },
          {
            "type": "html",
            "text": "\n[http://home.earthlink.net/~huston2/dp/proxy.html home.earthlink.net]",
            "id": "9ae49d1a62eb929e321bcb5931d72132"
          },
          {
            "type": "html",
            "text": "\n[http://wiki.cs.uiuc.edu/patternStories/ProxyPattern wiki.cs.uiuc.edu]",
            "id": "2f9fb3e6e15a99bcaa5e232591a041d6"
          },
          {
            "type": "html",
            "text": "\n[http://delphipatterns.blog.com/2011/02/22/proxy-2/ delphipatterns.blog.com]",
            "id": "f69877d25a69bb24ae67b286f4c4f7e5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1a744ac69507965c465589ee5085e932"
          },
          {
            "type": "html",
            "text": "<b>See also:</b> [[Composite Pattern]], [[Decorator Pattern]], [[Design Patterns]], [[Lazy Proxies]]",
            "id": "b049d7286ececaefc52005712a2ad55b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1a744ac69507965c465589ee5085e932"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]] | [[Category Structural Patterns]]",
            "id": "918f5bc01834cb0dee621bb26135596b"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ProxyPattern c2.com]",
            "id": "351d3dd12df0fbbffe07559326b6b85d"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907721419
    }
  ]
}