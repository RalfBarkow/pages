{
  "title": "Functional Pattern System For Object Oriented Design",
  "story": [
    {
      "type": "html",
      "text": "\"A Functional Pattern System For Object-Oriented Design\" by [[Thomas Kuehne]].\nPublished by Verlag Dr. Kovac, Hamburg, Germany, in 1999. 328 pages. ",
      "id": "32562cad240d703eb9acbb35c2d3cae1"
    },
    {
      "type": "image",
      "url": "http://homepages.mcs.vuw.ac.nz/~tk/fps/fps-small.jpg",
      "text": "homepages.mcs.vuw.ac.nz",
      "id": "6c67684cab0b9e970d3c920a97762e4c"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "2ff8a7eb2188111624647c12b8158f12"
    },
    {
      "type": "html",
      "text": "\nISBN 3-86064-770-9 (Please note that although the ISBN link does work, the book is not available through amazon.com.) ",
      "id": "04234f90626c840e639f0d9536e2913a"
    },
    {
      "type": "html",
      "text": "\nDescribes how functional and object-oriented programming can be used\ntogether by giving some patterns for doing functional programming\nwith an OO language.",
      "id": "c6cb3795e15cec9ca56ebeba356daf7e"
    },
    {
      "type": "html",
      "text": "\nExample implementations are in [[Eiffel Language]].",
      "id": "69fd6dcf90d219946fc51d07023fc9f7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "638e53787fdb35753e0eee92552e6288"
    },
    {
      "type": "html",
      "text": "(While the commercial version of the book is Out of Print, a [https://homepages.ecs.vuw.ac.nz/~tk/fps/fps-sans-escher.pdf pdf] version can be had from the author's home page)",
      "id": "0a7fec722d407468f1d7c302b0fd45e3"
    },
    {
      "type": "html",
      "text": "\nIf interested it can be ordered, or read online, see [http://www.mm.informatik.tu-darmstadt.de/~kuehne/fps/ www.mm.informatik.tu-darmstadt.de].",
      "id": "9c2b3475f0e3406bb2bd2d377dde28fa"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "638e53787fdb35753e0eee92552e6288"
    },
    {
      "type": "html",
      "text": "\nDesign patterns inspired by [[Functional Programming]] concepts can advance\nobject-oriented design.",
      "id": "38d207f7da6a0d75fb8642fb16479575"
    },
    {
      "type": "html",
      "text": "\nThis thesis promotes the idea that concepts from the world of [[Functional Programming]] can be captured with design pattern descriptions. These can then be used to benefit from functional programming concepts with ordinary\nobject-oriented languages. The functional patterns are evaluated for their impact on language design and a new approach to a dual-paradigm language is presented.",
      "id": "5e87202523cd1653b93e79ffb0322026"
    },
    {
      "type": "html",
      "text": "\nCheck [http://www.mm.informatik.tu-darmstadt.de/staff/kuehne/fps/ www.mm.informatik.tu-darmstadt.de] for Contents,\nAbstract, and How to Order.",
      "id": "cc21ddf2e1f0144ecb4353b3301f3f35"
    },
    {
      "type": "html",
      "text": "-- [[Thomas Kuehne]]",
      "id": "3eb67839f23c853b4fcdaba404849fac"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "638e53787fdb35753e0eee92552e6288"
    },
    {
      "type": "html",
      "text": "The patterns are:",
      "id": "595ccd4724b27e10aa4480a373952a00"
    },
    {
      "type": "html",
      "text": "[[Functor Object]] (called [[Function Object]] in [[Thomas Kuehne]]s thesis but different from the [[Function Object]] described on this wiki):<br>Black-box behavior parameterization",
      "id": "3f8548ee499fbc05b4239012f5a33585"
    },
    {
      "type": "html",
      "text": "[[Lazy Object]]:<br>Evaluation-by-need semantics ([[Lazy Evaluation]]) and [[Call By Need Semantics]]",
      "id": "8f95d28b5533e9bfdc2c3c07413e691a"
    },
    {
      "type": "html",
      "text": "[[Value Object]]:<br>[[Immutable Value]]s",
      "id": "86a6a89692ce72ee5a7b5dde6b67006f"
    },
    {
      "type": "html",
      "text": "[[Transfold Pattern]]:<br>Combining [[Internal Iteration]] and [[External Iteration]]",
      "id": "09d7d7353c4311e1db184097cd101025"
    },
    {
      "type": "html",
      "text": "[[Null Object]]:<br>Abandoning null references",
      "id": "3d0c46f7ac635f7b1a9c9957c44116d4"
    },
    {
      "type": "html",
      "text": "[[Translator Pattern]]:<br>[[Homomorphic Mapping]] with multi-dispatch functions ([[External Polymorphism]])",
      "id": "1bb4a0bc7fd8849a0a02e55bbbd92dc9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "638e53787fdb35753e0eee92552e6288"
    },
    {
      "type": "html",
      "text": "\nVery Cool!!!",
      "id": "26482c21165ad00d2c19f470626f2056"
    },
    {
      "type": "html",
      "text": "\nI am fascinated by the efficiency, elegance and beauty of functional programs -- my favorite language are Lisp and Haskell, although most systems I am involved with are Java architectures.",
      "id": "44bb03dea40f703bf3cd4f4bef169640"
    },
    {
      "type": "html",
      "text": "\nI'll have to take your patterns out for a spin before I can comment more but I am definitely interested,",
      "id": "e3edaf422818bfb33a06b158cf60c56e"
    },
    {
      "type": "html",
      "text": "--- [[Mike Beedle]]",
      "id": "f188534860fb1a63c425b71bc838ab05"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "638e53787fdb35753e0eee92552e6288"
    },
    {
      "type": "html",
      "text": "\nSome People prefer the term Do Nothing or Empty Behavior Object to [[Null Object]] as it eliminates the usual arguments over void, nil, or null.",
      "id": "c02009e0c4f4ff4c2dacfe5a33c1f651"
    },
    {
      "type": "html",
      "text": "\nI wonder what Thomas would think of the [[Python Language]]. It seems to support most of this stuff pretty directly. -- [[Phil Goodwin]]",
      "id": "f27efa1915416e434419d00c8d6a51fe"
    },
    {
      "type": "html",
      "text": "\nPython's support is nice, but it is a long stretch to a full blown multi-paradigm language. Still, that guy is right (see below). -- [[Thomas Kuehne]]",
      "id": "5bdf773368f2da788e92b01f5a7dc2c0"
    },
    {
      "type": "html",
      "text": "\nPython supports some functional programming concepts.  See \"Lambda forms\" in the Python tutorial [1]. -- A guy",
      "id": "c0e3daffeb26ecf11512eadea63ae692"
    },
    {
      "type": "html",
      "text": "\nGood old Smalltalk supports many more functional programming concepts than Python, including full closures and continuations. -- [[Markus Kohler]]",
      "id": "99015ff186ffd35f1ab517fbfbfae091"
    },
    {
      "type": "html",
      "text": "\nThere are also examples of OO-FP languages.  See OHaskell on page [[Fp Vs Oo]] -- [[Gunnar Andersson]]",
      "id": "aabc7b89dd18dadb0c5dd44f97fc6cd7"
    },
    {
      "type": "html",
      "text": "\nThere are several examples of OO-FP languages. See [[Nice Language]] (multi methods) and [[Scala Language]] (Traits).",
      "id": "e8998acec213bd9257dc1deb4c5e6c11"
    },
    {
      "type": "html",
      "text": "\nOr [[Common Lisp Object System]].",
      "id": "0def4c1f8543153e8433b49d1842125f"
    },
    {
      "type": "html",
      "text": "\nFor some attempts to implement the patterns in [[Cee Plus Plus]] and also implement [[Eiffel Language]] examples using [[Smart Eiffel]] see [[Object Functional Implementation]].",
      "id": "95c08630227eb3fdec2f29060e72192c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "638e53787fdb35753e0eee92552e6288"
    },
    {
      "type": "html",
      "text": "And here I thought this was the exact opposite, a guide on implementing <i>objects in functional languages</i>.  But then again, that's so simple, one could hardly write a paper, let alone a book about that.",
      "id": "3819cee9c0dc268d2164e53d8fc52bfb"
    },
    {
      "type": "html",
      "text": "<i>Please read [[Parking Ticket]].</i>",
      "id": "8f2b586ee97734b2fdac12b266d1c93a"
    },
    {
      "type": "html",
      "text": "\nSee also [[Pattern Implementation Discussion]], [[Functoids In Cpp]], [[Software Design Pattern Critique]], [[Patterns In Functional Programming]].",
      "id": "06e95be0e0b858e2db5341be79dd9d5e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "638e53787fdb35753e0eee92552e6288"
    },
    {
      "type": "html",
      "text": "[[Category Object Functional Patterns]] [[Category Book]] [[Category Eiffel]] [[Category Functional Programming]]",
      "id": "834208227bcedec95fef522a16b87740"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?FunctionalPatternSystemForObjectOrientedDesign c2.com]",
      "id": "35094730fb3b9d2a2d95b146b3626e1e"
    }
  ],
  "journal": [
    {
      "date": 1384796350000,
      "id": "fa1f6ebfcb39610aa47d7e42977ecc4f",
      "type": "create",
      "item": {
        "title": "Functional Pattern System For Object Oriented Design",
        "story": [
          {
            "type": "html",
            "text": "\"A Functional Pattern System For Object-Oriented Design\" by [[Thomas Kuehne]].\nPublished by Verlag Dr. Kovac, Hamburg, Germany, in 1999. 328 pages. ",
            "id": "32562cad240d703eb9acbb35c2d3cae1"
          },
          {
            "type": "image",
            "url": "http://homepages.mcs.vuw.ac.nz/~tk/fps/fps-small.jpg",
            "text": "homepages.mcs.vuw.ac.nz",
            "id": "6c67684cab0b9e970d3c920a97762e4c"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "2ff8a7eb2188111624647c12b8158f12"
          },
          {
            "type": "html",
            "text": "\nISBN 3-86064-770-9 (Please note that although the ISBN link does work, the book is not available through amazon.com.) ",
            "id": "04234f90626c840e639f0d9536e2913a"
          },
          {
            "type": "html",
            "text": "\nDescribes how functional and object-oriented programming can be used\ntogether by giving some patterns for doing functional programming\nwith an OO language.",
            "id": "c6cb3795e15cec9ca56ebeba356daf7e"
          },
          {
            "type": "html",
            "text": "\nExample implementations are in [[Eiffel Language]].",
            "id": "69fd6dcf90d219946fc51d07023fc9f7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "638e53787fdb35753e0eee92552e6288"
          },
          {
            "type": "html",
            "text": "(While the commercial version of the book is Out of Print, a pdf version can be had from the author's home page)",
            "id": "0a7fec722d407468f1d7c302b0fd45e3"
          },
          {
            "type": "html",
            "text": "\nIf interested it can be ordered, or read online, see [http://www.mm.informatik.tu-darmstadt.de/~kuehne/fps/ www.mm.informatik.tu-darmstadt.de].",
            "id": "9c2b3475f0e3406bb2bd2d377dde28fa"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "638e53787fdb35753e0eee92552e6288"
          },
          {
            "type": "html",
            "text": "\nDesign patterns inspired by [[Functional Programming]] concepts can advance\nobject-oriented design.",
            "id": "38d207f7da6a0d75fb8642fb16479575"
          },
          {
            "type": "html",
            "text": "\nThis thesis promotes the idea that concepts from the world of [[Functional Programming]] can be captured with design pattern descriptions. These can then be used to benefit from functional programming concepts with ordinary\nobject-oriented languages. The functional patterns are evaluated for their impact on language design and a new approach to a dual-paradigm language is presented.",
            "id": "5e87202523cd1653b93e79ffb0322026"
          },
          {
            "type": "html",
            "text": "\nCheck [http://www.mm.informatik.tu-darmstadt.de/staff/kuehne/fps/ www.mm.informatik.tu-darmstadt.de] for Contents,\nAbstract, and How to Order.",
            "id": "cc21ddf2e1f0144ecb4353b3301f3f35"
          },
          {
            "type": "html",
            "text": "-- [[Thomas Kuehne]]",
            "id": "3eb67839f23c853b4fcdaba404849fac"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "638e53787fdb35753e0eee92552e6288"
          },
          {
            "type": "html",
            "text": "The patterns are:",
            "id": "595ccd4724b27e10aa4480a373952a00"
          },
          {
            "type": "html",
            "text": "[[Functor Object]] (called [[Function Object]] in [[Thomas Kuehne]]s thesis but different from the [[Function Object]] described on this wiki):<br>Black-box behavior parameterization",
            "id": "3f8548ee499fbc05b4239012f5a33585"
          },
          {
            "type": "html",
            "text": "[[Lazy Object]]:<br>Evaluation-by-need semantics ([[Lazy Evaluation]]) and [[Call By Need Semantics]]",
            "id": "8f95d28b5533e9bfdc2c3c07413e691a"
          },
          {
            "type": "html",
            "text": "[[Value Object]]:<br>[[Immutable Value]]s",
            "id": "86a6a89692ce72ee5a7b5dde6b67006f"
          },
          {
            "type": "html",
            "text": "[[Transfold Pattern]]:<br>Combining [[Internal Iteration]] and [[External Iteration]]",
            "id": "09d7d7353c4311e1db184097cd101025"
          },
          {
            "type": "html",
            "text": "[[Null Object]]:<br>Abandoning null references",
            "id": "3d0c46f7ac635f7b1a9c9957c44116d4"
          },
          {
            "type": "html",
            "text": "[[Translator Pattern]]:<br>[[Homomorphic Mapping]] with multi-dispatch functions ([[External Polymorphism]])",
            "id": "1bb4a0bc7fd8849a0a02e55bbbd92dc9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "638e53787fdb35753e0eee92552e6288"
          },
          {
            "type": "html",
            "text": "\nVery Cool!!!",
            "id": "26482c21165ad00d2c19f470626f2056"
          },
          {
            "type": "html",
            "text": "\nI am fascinated by the efficiency, elegance and beauty of functional programs -- my favorite language are Lisp and Haskell, although most systems I am involved with are Java architectures.",
            "id": "44bb03dea40f703bf3cd4f4bef169640"
          },
          {
            "type": "html",
            "text": "\nI'll have to take your patterns out for a spin before I can comment more but I am definitely interested,",
            "id": "e3edaf422818bfb33a06b158cf60c56e"
          },
          {
            "type": "html",
            "text": "--- [[Mike Beedle]]",
            "id": "f188534860fb1a63c425b71bc838ab05"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "638e53787fdb35753e0eee92552e6288"
          },
          {
            "type": "html",
            "text": "\nSome People prefer the term Do Nothing or Empty Behavior Object to [[Null Object]] as it eliminates the usual arguments over void, nil, or null.",
            "id": "c02009e0c4f4ff4c2dacfe5a33c1f651"
          },
          {
            "type": "html",
            "text": "\nI wonder what Thomas would think of the [[Python Language]]. It seems to support most of this stuff pretty directly. -- [[Phil Goodwin]]",
            "id": "f27efa1915416e434419d00c8d6a51fe"
          },
          {
            "type": "html",
            "text": "\nPython's support is nice, but it is a long stretch to a full blown multi-paradigm language. Still, that guy is right (see below). -- [[Thomas Kuehne]]",
            "id": "5bdf773368f2da788e92b01f5a7dc2c0"
          },
          {
            "type": "html",
            "text": "\nPython supports some functional programming concepts.  See \"Lambda forms\" in the Python tutorial [1]. -- A guy",
            "id": "c0e3daffeb26ecf11512eadea63ae692"
          },
          {
            "type": "html",
            "text": "\nGood old Smalltalk supports many more functional programming concepts than Python, including full closures and continuations. -- [[Markus Kohler]]",
            "id": "99015ff186ffd35f1ab517fbfbfae091"
          },
          {
            "type": "html",
            "text": "\nThere are also examples of OO-FP languages.  See OHaskell on page [[Fp Vs Oo]] -- [[Gunnar Andersson]]",
            "id": "aabc7b89dd18dadb0c5dd44f97fc6cd7"
          },
          {
            "type": "html",
            "text": "\nThere are several examples of OO-FP languages. See [[Nice Language]] (multi methods) and [[Scala Language]] (Traits).",
            "id": "e8998acec213bd9257dc1deb4c5e6c11"
          },
          {
            "type": "html",
            "text": "\nOr [[Common Lisp Object System]].",
            "id": "0def4c1f8543153e8433b49d1842125f"
          },
          {
            "type": "html",
            "text": "\nFor some attempts to implement the patterns in [[Cee Plus Plus]] and also implement [[Eiffel Language]] examples using [[Smart Eiffel]] see [[Object Functional Implementation]].",
            "id": "95c08630227eb3fdec2f29060e72192c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "638e53787fdb35753e0eee92552e6288"
          },
          {
            "type": "html",
            "text": "And here I thought this was the exact opposite, a guide on implementing <i>objects in functional languages</i>.  But then again, that's so simple, one could hardly write a paper, let alone a book about that.",
            "id": "3819cee9c0dc268d2164e53d8fc52bfb"
          },
          {
            "type": "html",
            "text": "<i>Please read [[Parking Ticket]].</i>",
            "id": "8f2b586ee97734b2fdac12b266d1c93a"
          },
          {
            "type": "html",
            "text": "\nSee also [[Pattern Implementation Discussion]], [[Functoids In Cpp]], [[Software Design Pattern Critique]], [[Patterns In Functional Programming]].",
            "id": "06e95be0e0b858e2db5341be79dd9d5e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "638e53787fdb35753e0eee92552e6288"
          },
          {
            "type": "html",
            "text": "[[Category Object Functional Patterns]] [[Category Book]] [[Category Eiffel]] [[Category Functional Programming]]",
            "id": "834208227bcedec95fef522a16b87740"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?FunctionalPatternSystemForObjectOrientedDesign c2.com]",
            "id": "35094730fb3b9d2a2d95b146b3626e1e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1650994630630
    },
    {
      "type": "edit",
      "id": "0a7fec722d407468f1d7c302b0fd45e3",
      "item": {
        "type": "html",
        "text": "(While the commercial version of the book is Out of Print, a [https://homepages.ecs.vuw.ac.nz/~tk/fps/fps-sans-escher.pdf pdf] version can be had from the author's home page)",
        "id": "0a7fec722d407468f1d7c302b0fd45e3"
      },
      "date": 1650994644290
    }
  ]
}