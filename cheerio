{
  "title": "cheerio",
  "story": [
    {
      "type": "paragraph",
      "id": "4140f9a0151ecd00",
      "text": "[[Cheerio]] parses markup and provides an API for traversing/manipulating the resulting data structure. It does not interpret the result as a web browser does. Specifically, it does not produce a visual rendering, apply CSS, load external resources, or execute JavaScript which is common for a SPA (single page application). This makes Cheerio much, much faster than other solutions. If your use case requires any of this functionality, you should consider browser automation software like [[Puppeteer]] and [[Playwright]] or DOM emulation projects like [[JSDom]]. [https://cheerio.js.org site]"
    },
    {
      "type": "video",
      "id": "ec990283bbe5ca67",
      "text": "VIMEO 31950192\nHow to Scrape Web Pages with Node.js and Cheerio"
    },
    {
      "type": "pagefold",
      "id": "f02f67bcd8cc7aee",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "0892b0530388de0a",
      "text": "Parse remote DOM in JS.\n[https://stackoverflow.com/questions/36248844/parse-remote-dom-in-js stackoverflow]"
    },
    {
      "type": "markdown",
      "id": "deaa3d5d0a49dc68",
      "text": "> If you're familiar with jQuery you can use [[cheerio]] to go through the DOM."
    },
    {
      "type": "code",
      "id": "74fe22ba888a35cc",
      "text": "import request from 'request';\nimport cheerio from 'cheerio';\n\nexport default function getBody(url, callback) {\n  request(url, (err, res, body) => {\n    $ = cheerio.load(body);\n    $('h2') // finds all of the `h2` tags within the `body` object.\n  });\n}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "cheerio",
        "story": []
      },
      "date": 1651590874547
    },
    {
      "item": {
        "type": "factory",
        "id": "4140f9a0151ecd00"
      },
      "id": "4140f9a0151ecd00",
      "type": "add",
      "date": 1651590879461
    },
    {
      "type": "edit",
      "id": "4140f9a0151ecd00",
      "item": {
        "type": "paragraph",
        "id": "4140f9a0151ecd00",
        "text": "[https://cheerio.js.org site]"
      },
      "date": 1651590884843
    },
    {
      "item": {
        "type": "factory",
        "id": "f370d13f7ab1b833"
      },
      "id": "f370d13f7ab1b833",
      "type": "add",
      "after": "4140f9a0151ecd00",
      "date": 1651590895465
    },
    {
      "type": "edit",
      "id": "4140f9a0151ecd00",
      "item": {
        "type": "paragraph",
        "id": "4140f9a0151ecd00",
        "text": "Cheerio parses markup and provides an API for traversing/manipulating the resulting data structure. It does not interpret the result as a web browser does. Specifically, it does not produce a visual rendering, apply CSS, load external resources, or execute JavaScript which is common for a SPA (single page application). This makes Cheerio much, much faster than other solutions. If your use case requires any of this functionality, you should consider browser automation software like Puppeteer and Playwright or DOM emulation projects like JSDom. [https://cheerio.js.org site]"
      },
      "date": 1651590900914
    },
    {
      "type": "remove",
      "id": "f370d13f7ab1b833",
      "date": 1651590902855
    },
    {
      "type": "edit",
      "id": "4140f9a0151ecd00",
      "item": {
        "type": "paragraph",
        "id": "4140f9a0151ecd00",
        "text": "[[Cheerio]] parses markup and provides an API for traversing/manipulating the resulting data structure. It does not interpret the result as a web browser does. Specifically, it does not produce a visual rendering, apply CSS, load external resources, or execute JavaScript which is common for a SPA (single page application). This makes Cheerio much, much faster than other solutions. If your use case requires any of this functionality, you should consider browser automation software like Puppeteer and Playwright or DOM emulation projects like JSDom. [https://cheerio.js.org site]"
      },
      "date": 1651590913412
    },
    {
      "type": "edit",
      "id": "4140f9a0151ecd00",
      "item": {
        "type": "paragraph",
        "id": "4140f9a0151ecd00",
        "text": "[[Cheerio]] parses markup and provides an API for traversing/manipulating the resulting data structure. It does not interpret the result as a web browser does. Specifically, it does not produce a visual rendering, apply CSS, load external resources, or execute JavaScript which is common for a SPA (single page application). This makes Cheerio much, much faster than other solutions. If your use case requires any of this functionality, you should consider browser automation software like [[Puppeteer]] and [[Playwright]] or DOM emulation projects like [[JSDom]]. [https://cheerio.js.org site]"
      },
      "date": 1651590954436
    },
    {
      "item": {
        "type": "factory",
        "id": "0892b0530388de0a"
      },
      "id": "0892b0530388de0a",
      "type": "add",
      "after": "4140f9a0151ecd00",
      "date": 1651591410322
    },
    {
      "type": "edit",
      "id": "0892b0530388de0a",
      "item": {
        "type": "paragraph",
        "id": "0892b0530388de0a",
        "text": "https://stackoverflow.com/questions/36248844/parse-remote-dom-in-js"
      },
      "date": 1651591416559
    },
    {
      "type": "edit",
      "id": "0892b0530388de0a",
      "item": {
        "type": "paragraph",
        "id": "0892b0530388de0a",
        "text": "Parse remote DOM in JS\n[https://stackoverflow.com/questions/36248844/parse-remote-dom-in-js stackoverflow]"
      },
      "date": 1651591434730
    },
    {
      "type": "edit",
      "id": "0892b0530388de0a",
      "item": {
        "type": "paragraph",
        "id": "0892b0530388de0a",
        "text": "Parse remote DOM in JS.\n[https://stackoverflow.com/questions/36248844/parse-remote-dom-in-js stackoverflow]"
      },
      "date": 1651591442616
    },
    {
      "item": {
        "type": "factory",
        "id": "74fe22ba888a35cc"
      },
      "id": "74fe22ba888a35cc",
      "type": "add",
      "after": "0892b0530388de0a",
      "date": 1651591473254
    },
    {
      "type": "edit",
      "id": "74fe22ba888a35cc",
      "item": {
        "type": "code",
        "id": "74fe22ba888a35cc",
        "text": "import request from 'request';\nimport cheerio from 'cheerio';\n\nexport default function getBody(url, callback) {\n  request(url, (err, res, body) => {\n    $ = cheerio.load(body);\n    $('h2') // finds all of the `h2` tags within the `body` object.\n  });\n}"
      },
      "date": 1651591482537
    },
    {
      "type": "add",
      "id": "deaa3d5d0a49dc68",
      "item": {
        "type": "paragraph",
        "id": "deaa3d5d0a49dc68",
        "text": "> If you're familiar with jQuery you can use cheerio to go through the DOM."
      },
      "after": "0892b0530388de0a",
      "date": 1651591486928
    },
    {
      "type": "edit",
      "id": "deaa3d5d0a49dc68",
      "item": {
        "type": "markdown",
        "id": "deaa3d5d0a49dc68",
        "text": "> If you're familiar with jQuery you can use cheerio to go through the DOM."
      },
      "date": 1651591487873
    },
    {
      "type": "edit",
      "id": "deaa3d5d0a49dc68",
      "item": {
        "type": "markdown",
        "id": "deaa3d5d0a49dc68",
        "text": "> If you're familiar with jQuery you can use [[cheerio]] to go through the DOM."
      },
      "date": 1651591498486
    },
    {
      "item": {
        "type": "factory",
        "id": "ec990283bbe5ca67"
      },
      "id": "ec990283bbe5ca67",
      "type": "add",
      "after": "74fe22ba888a35cc",
      "date": 1651591593183
    },
    {
      "id": "ec990283bbe5ca67",
      "type": "move",
      "order": [
        "4140f9a0151ecd00",
        "ec990283bbe5ca67",
        "0892b0530388de0a",
        "deaa3d5d0a49dc68",
        "74fe22ba888a35cc"
      ],
      "date": 1651591596992
    },
    {
      "item": {
        "type": "factory",
        "id": "f02f67bcd8cc7aee"
      },
      "id": "f02f67bcd8cc7aee",
      "type": "add",
      "after": "74fe22ba888a35cc",
      "date": 1651591599732
    },
    {
      "type": "edit",
      "id": "f02f67bcd8cc7aee",
      "item": {
        "type": "pagefold",
        "id": "f02f67bcd8cc7aee",
        "text": "~"
      },
      "date": 1651591602909
    },
    {
      "id": "f02f67bcd8cc7aee",
      "type": "move",
      "order": [
        "4140f9a0151ecd00",
        "ec990283bbe5ca67",
        "f02f67bcd8cc7aee",
        "0892b0530388de0a",
        "deaa3d5d0a49dc68",
        "74fe22ba888a35cc"
      ],
      "date": 1651591605115
    },
    {
      "type": "edit",
      "id": "ec990283bbe5ca67",
      "item": {
        "type": "video",
        "id": "ec990283bbe5ca67",
        "text": "VIMEO 31950192"
      },
      "date": 1651591611982
    },
    {
      "type": "edit",
      "id": "ec990283bbe5ca67",
      "item": {
        "type": "video",
        "id": "ec990283bbe5ca67",
        "text": "VIMEO 31950192\nHow to Scrape Web Pages with Node.js and Cheerio"
      },
      "date": 1651591621653
    }
  ]
}