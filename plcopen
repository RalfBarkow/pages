{
  "title": "PLCopen",
  "story": [
    {
      "type": "paragraph",
      "id": "c2ad1c6470413245",
      "text": "Since the release of the IEC 61131-3 programming standard, users want to be able to exchange their\nprograms, libraries and projects between development environments. Although this was not the intent\nof the standard itself, it was a task that the independent organization PLCopen committed itself to.\nIEC 61131-3 is focused on the software development environment. As such it is just a part of a total\nsolution. The other parts are a structure of tools like:"
    },
    {
      "type": "markdown",
      "id": "1830f1d9adf7519d",
      "text": "* networking tools\n* debugging tools\n* simulators\n* documentation tools\n"
    },
    {
      "type": "paragraph",
      "id": "0f6bc00507264f38",
      "text": "Therefore PLCopen had decided to develop interfaces towards these support tools. This has resulted\nin a workgroup named TC6 for XML (eXtended Markup Language). This committee has defined an\nopen interface, which supports different kinds of software tools, and provides the ability to transfer\nthe information that is on the screen to other platforms. This screen information does not only contain textual information, but also graphical information. This can include the position and size of the function blocks, and how they are connected."
    },
    {
      "type": "paragraph",
      "id": "57958bc7fa80a4cb",
      "text": "The design of the ‘transferred’ program itself has to remain the same after the transfer, so not to be\naltered in look and feel. The wide variety of possibilities, especially in the graphical tools, has to be brought under one umbrella. Originally, PLCopen looked to the STEP sandard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled."
    },
    {
      "type": "paragraph",
      "id": "5b6c10580b6e98d4",
      "text": "PLCopen wants to be able to transfer a control project without much additional effort, from one\ndevelopment environment to another without loosing information even when it is incomplete, e.g. not\ncompilable without errors. This of course is also valid for the POUs, and especially for the User\nDerived Function Block libraries. XML provides the right technology for this."
    },
    {
      "type": "paragraph",
      "id": "4ad26709e3152c12",
      "text": "As such it will be more than an export / import tool from one development environment to another.\nFrom the moment that this format is available, it is just a small step to feed a documentation tool with the information, for instance. Actually, it is not important where this XML-code is coming from, as long as it is recognizable and useable. It could be generated by other tools like simulation and modeling tools, and consumed by verification, documentation, and version control tools. To support this principle, all relevant information will be exported. The importing tool has to be intelligent in filtering which parts of this information are useful and needs to be imported. With this approach, PLCopen creates a complete new market, in which the focus is on reusability of software development from libraries up to complete control projects."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "PLCopen",
        "story": []
      },
      "date": 1653389263199
    },
    {
      "item": {
        "type": "factory",
        "id": "c2ad1c6470413245"
      },
      "id": "c2ad1c6470413245",
      "type": "add",
      "date": 1653389291146
    },
    {
      "type": "edit",
      "id": "c2ad1c6470413245",
      "item": {
        "type": "paragraph",
        "id": "c2ad1c6470413245",
        "text": "Since the release of the IEC 61131-3 programming standard, users want to be able to exchange their\nprograms, libraries and projects between development environments. Although this was not the intent\nof the standard itself, it was a task that the independent organization PLCopen committed itself to.\nIEC 61131-3 is focused on the software development environment. As such it is just a part of a total\nsolution. The other parts are a structure of tools like:\n* networking tools\n* debugging tools\n* simulators\n* documentation tools\n"
      },
      "date": 1653389312286
    },
    {
      "type": "add",
      "id": "0f6bc00507264f38",
      "item": {
        "type": "paragraph",
        "id": "0f6bc00507264f38",
        "text": "Therefore PLCopen had decided to develop interfaces towards these su pport tools. This has resulted\nin a workgroup named TC6 for XML (eXtended Mar kup Language). This committee has defined an\nopen interface, which supports differe nt kinds of software tools, and provides the ability to transfer\nthe information that is on the screen to other platforms. This screen information does not only contain\ntextual information, but also graphical information. This can include the position and size of the\nfunction blocks, and how they are connected.\nThe design of the ‘transferred’ prog ram itself has to remain the same after the transfer, so not to be\naltered in look and feel. Th e wide variety of possibilities, especia lly in the graphical tools, has to be\nbrought under one umbrella. Originally, PLCopen looked to the STEP st andard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled.\nPLCopen wants to be able to transfer a control project without much addi tional effort, from one\ndevelopment environment to another without loosing information even when it is incomplete, e.g. not\ncompilable without errors. This of course is also valid for the POUs, and especially for the User\nDerived Function Block libraries. XML provides the right technology for this.\nAs such it will be more than an export / import tool from one development environment to another.\nFrom the moment that this format is available, it is just a small step to feed a documentation tool with\nthe information, for instance. Actual ly, it is not important where this XML-code is coming from, as\nlong as it is recognizable and us eable. It could be generated by other tools like simulation and\nmodeling tools, and consumed by verification, documentation, and version control tools.\nTo support this principle, all relevant information will be exported. The importing tool has to be\nintelligent in filtering which parts of this information are useful and needs to be imported. With this\napproach, PLCopen creates a complete new market, in which the focus is on reusability of software\ndevelopment from libraries up to complete control projects."
      },
      "after": "c2ad1c6470413245",
      "date": 1653389315147
    },
    {
      "type": "edit",
      "id": "c2ad1c6470413245",
      "item": {
        "type": "paragraph",
        "id": "c2ad1c6470413245",
        "text": "Since the release of the IEC 61131-3 programming standard, users want to be able to exchange their\nprograms, libraries and projects between development environments. Although this was not the intent\nof the standard itself, it was a task that the independent organization PLCopen committed itself to.\nIEC 61131-3 is focused on the software development environment. As such it is just a part of a total\nsolution. The other parts are a structure of tools like:"
      },
      "date": 1653389316710
    },
    {
      "type": "add",
      "id": "1830f1d9adf7519d",
      "item": {
        "type": "paragraph",
        "id": "1830f1d9adf7519d",
        "text": "* networking tools\n* debugging tools\n* simulators\n* documentation tools\n"
      },
      "after": "c2ad1c6470413245",
      "date": 1653389317254
    },
    {
      "type": "edit",
      "id": "1830f1d9adf7519d",
      "item": {
        "type": "markdown",
        "id": "1830f1d9adf7519d",
        "text": "* networking tools\n* debugging tools\n* simulators\n* documentation tools\n"
      },
      "date": 1653389318481
    },
    {
      "type": "edit",
      "id": "0f6bc00507264f38",
      "item": {
        "type": "paragraph",
        "id": "0f6bc00507264f38",
        "text": "Therefore PLCopen had decided to develop interfaces towards these support tools. This has resulted\nin a workgroup named TC6 for XML (eXtended Mar kup Language). This committee has defined an\nopen interface, which supports differe nt kinds of software tools, and provides the ability to transfer\nthe information that is on the screen to other platforms. This screen information does not only contain\ntextual information, but also graphical information. This can include the position and size of the\nfunction blocks, and how they are connected.\nThe design of the ‘transferred’ prog ram itself has to remain the same after the transfer, so not to be\naltered in look and feel. Th e wide variety of possibilities, especia lly in the graphical tools, has to be\nbrought under one umbrella. Originally, PLCopen looked to the STEP st andard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled.\nPLCopen wants to be able to transfer a control project without much addi tional effort, from one\ndevelopment environment to another without loosing information even when it is incomplete, e.g. not\ncompilable without errors. This of course is also valid for the POUs, and especially for the User\nDerived Function Block libraries. XML provides the right technology for this.\nAs such it will be more than an export / import tool from one development environment to another.\nFrom the moment that this format is available, it is just a small step to feed a documentation tool with\nthe information, for instance. Actual ly, it is not important where this XML-code is coming from, as\nlong as it is recognizable and us eable. It could be generated by other tools like simulation and\nmodeling tools, and consumed by verification, documentation, and version control tools.\nTo support this principle, all relevant information will be exported. The importing tool has to be\nintelligent in filtering which parts of this information are useful and needs to be imported. With this\napproach, PLCopen creates a complete new market, in which the focus is on reusability of software\ndevelopment from libraries up to complete control projects."
      },
      "date": 1653389351264
    },
    {
      "type": "edit",
      "id": "0f6bc00507264f38",
      "item": {
        "type": "paragraph",
        "id": "0f6bc00507264f38",
        "text": "Therefore PLCopen had decided to develop interfaces towards these support tools. This has resulted\nin a workgroup named TC6 for XML (eXtended Mar kup Language). This committee has defined an\nopen interface, which supports differe nt kinds of software tools, and provides the ability to transfer\nthe information that is on the screen to other platforms. This screen information does not only contain\ntextual information, but also graphical information. This can include the position and size of the\nfunction blocks, and how they are connected.\nThe design of the ‘transferred’ prog ram itself has to remain the same after the transfer, so not to be\naltered in look and feel. Th e wide variety of possibilities, especia lly in the graphical tools, has to be\nbrought under one umbrella. Originally, PLCopen looked to the STEP st andard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled.\nPLCopen wants to be able to transfer a control project without much addi tional effort, from one\ndevelopment environment to another without loosing information even when it is incomplete, e.g. not\ncompilable without errors. This of course is also valid for the POUs, and especially for the User\nDerived Function Block libraries. XML provides the right technology for this."
      },
      "date": 1653389392373
    },
    {
      "type": "add",
      "id": "4ad26709e3152c12",
      "item": {
        "type": "paragraph",
        "id": "4ad26709e3152c12",
        "text": "As such it will be more than an export / import tool from one development environment to another.\nFrom the moment that this format is available, it is just a small step to feed a documentation tool with\nthe information, for instance. Actual ly, it is not important where this XML-code is coming from, as\nlong as it is recognizable and us eable. It could be generated by other tools like simulation and\nmodeling tools, and consumed by verification, documentation, and version control tools.\nTo support this principle, all relevant information will be exported. The importing tool has to be\nintelligent in filtering which parts of this information are useful and needs to be imported. With this\napproach, PLCopen creates a complete new market, in which the focus is on reusability of software\ndevelopment from libraries up to complete control projects."
      },
      "after": "0f6bc00507264f38",
      "date": 1653389395913
    },
    {
      "type": "edit",
      "id": "0f6bc00507264f38",
      "item": {
        "type": "paragraph",
        "id": "0f6bc00507264f38",
        "text": "Therefore PLCopen had decided to develop interfaces towards these support tools. This has resulted\nin a workgroup named TC6 for XML (eXtended Mar kup Language). This committee has defined an\nopen interface, which supports differe nt kinds of software tools, and provides the ability to transfer\nthe information that is on the screen to other platforms. This screen information does not only contain\ntextual information, but also graphical information. This can include the position and size of the\nfunction blocks, and how they are connected."
      },
      "date": 1653389412519
    },
    {
      "type": "add",
      "id": "57958bc7fa80a4cb",
      "item": {
        "type": "paragraph",
        "id": "57958bc7fa80a4cb",
        "text": "The design of the ‘transferred’ prog ram itself has to remain the same after the transfer, so not to be\naltered in look and feel. Th e wide variety of possibilities, especia lly in the graphical tools, has to be\nbrought under one umbrella. Originally, PLCopen looked to the STEP st andard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled.\nPLCopen wants to be able to transfer a control project without much addi tional effort, from one\ndevelopment environment to another without loosing information even when it is incomplete, e.g. not\ncompilable without errors. This of course is also valid for the POUs, and especially for the User\nDerived Function Block libraries. XML provides the right technology for this."
      },
      "after": "0f6bc00507264f38",
      "date": 1653389413478
    },
    {
      "type": "edit",
      "id": "0f6bc00507264f38",
      "item": {
        "type": "paragraph",
        "id": "0f6bc00507264f38",
        "text": "Therefore PLCopen had decided to develop interfaces towards these support tools. This has resulted\nin a workgroup named TC6 for XML (eXtended Mar kup Language). This committee has defined an\nopen interface, which supports different kinds of software tools, and provides the ability to transfer\nthe information that is on the screen to other platforms. This screen information does not only contain textual information, but also graphical information. This can include the position and size of the function blocks, and how they are connected."
      },
      "date": 1653389437275
    },
    {
      "type": "edit",
      "id": "0f6bc00507264f38",
      "item": {
        "type": "paragraph",
        "id": "0f6bc00507264f38",
        "text": "Therefore PLCopen had decided to develop interfaces towards these support tools. This has resulted\nin a workgroup named TC6 for XML (eXtended Markup Language). This committee has defined an\nopen interface, which supports different kinds of software tools, and provides the ability to transfer\nthe information that is on the screen to other platforms. This screen information does not only contain textual information, but also graphical information. This can include the position and size of the function blocks, and how they are connected."
      },
      "date": 1653389451976
    },
    {
      "type": "edit",
      "id": "57958bc7fa80a4cb",
      "item": {
        "type": "paragraph",
        "id": "57958bc7fa80a4cb",
        "text": "The design of the ‘transferred’ program itself has to remain the same after the transfer, so not to be\naltered in look and feel. Th e wide variety of possibilities, especia lly in the graphical tools, has to be brought under one umbrella. Originally, PLCopen looked to the STEP st andard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled.\nPLCopen wants to be able to transfer a control project without much addi tional effort, from one\ndevelopment environment to another without loosing information even when it is incomplete, e.g. not\ncompilable without errors. This of course is also valid for the POUs, and especially for the User\nDerived Function Block libraries. XML provides the right technology for this."
      },
      "date": 1653389476949
    },
    {
      "type": "edit",
      "id": "57958bc7fa80a4cb",
      "item": {
        "type": "paragraph",
        "id": "57958bc7fa80a4cb",
        "text": "The design of the ‘transferred’ program itself has to remain the same after the transfer, so not to be\naltered in look and feel. The wide variety of possibilities, especia lly in the graphical tools, has to be brought under one umbrella. Originally, PLCopen looked to the STEP st andard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled."
      },
      "date": 1653389493656
    },
    {
      "type": "add",
      "id": "5b6c10580b6e98d4",
      "item": {
        "type": "paragraph",
        "id": "5b6c10580b6e98d4",
        "text": "PLCopen wants to be able to transfer a control project without much addi tional effort, from one\ndevelopment environment to another without loosing information even when it is incomplete, e.g. not\ncompilable without errors. This of course is also valid for the POUs, and especially for the User\nDerived Function Block libraries. XML provides the right technology for this."
      },
      "after": "57958bc7fa80a4cb",
      "date": 1653389500666
    },
    {
      "type": "edit",
      "id": "57958bc7fa80a4cb",
      "item": {
        "type": "paragraph",
        "id": "57958bc7fa80a4cb",
        "text": "The design of the ‘transferred’ program itself has to remain the same after the transfer, so not to be\naltered in look and feel. The wide variety of possibilities, especially in the graphical tools, has to be brought under one umbrella. Originally, PLCopen looked to the STEP st andard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled."
      },
      "date": 1653389505758
    },
    {
      "type": "edit",
      "id": "57958bc7fa80a4cb",
      "item": {
        "type": "paragraph",
        "id": "57958bc7fa80a4cb",
        "text": "The design of the ‘transferred’ program itself has to remain the same after the transfer, so not to be\naltered in look and feel. The wide variety of possibilities, especially in the graphical tools, has to be brought under one umbrella. Originally, PLCopen looked to the STEP sandard to do this. STEP can\nbe looked at as an earlier version of XML, but the graphical part was limited. The STEP protocol was\nused for the PLCopen Portability Level, but showed a lack of graphical definitions. This meant that,\nwithout extensive work, the graphical languages could not be transferred, and the original goals could\nnot be fulfilled."
      },
      "date": 1653389520737
    },
    {
      "type": "edit",
      "id": "5b6c10580b6e98d4",
      "item": {
        "type": "paragraph",
        "id": "5b6c10580b6e98d4",
        "text": "PLCopen wants to be able to transfer a control project without much additional effort, from one\ndevelopment environment to another without loosing information even when it is incomplete, e.g. not\ncompilable without errors. This of course is also valid for the POUs, and especially for the User\nDerived Function Block libraries. XML provides the right technology for this."
      },
      "date": 1653389543489
    },
    {
      "type": "edit",
      "id": "4ad26709e3152c12",
      "item": {
        "type": "paragraph",
        "id": "4ad26709e3152c12",
        "text": "As such it will be more than an export / import tool from one development environment to another.\nFrom the moment that this format is available, it is just a small step to feed a documentation tool with the information, for instance. Actual ly, it is not important where this XML-code is coming from, as long as it is recognizable and us eable. It could be generated by other tools like simulation and modeling tools, and consumed by verification, documentation, and version control tools. To support this principle, all relevant information will be exported. The importing tool has to be intelligent in filtering which parts of this information are useful and needs to be imported. With this approach, PLCopen creates a complete new market, in which the focus is on reusability of software development from libraries up to complete control projects."
      },
      "date": 1653389606010
    },
    {
      "type": "edit",
      "id": "4ad26709e3152c12",
      "item": {
        "type": "paragraph",
        "id": "4ad26709e3152c12",
        "text": "As such it will be more than an export / import tool from one development environment to another.\nFrom the moment that this format is available, it is just a small step to feed a documentation tool with the information, for instance. Actually, it is not important where this XML-code is coming from, as long as it is recognizable and useable. It could be generated by other tools like simulation and modeling tools, and consumed by verification, documentation, and version control tools. To support this principle, all relevant information will be exported. The importing tool has to be intelligent in filtering which parts of this information are useful and needs to be imported. With this approach, PLCopen creates a complete new market, in which the focus is on reusability of software development from libraries up to complete control projects."
      },
      "date": 1653389621812
    }
  ]
}