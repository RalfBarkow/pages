{
  "title": "Nest",
  "story": [
    {
      "type": "paragraph",
      "id": "7e61957d30e9372b",
      "text": "The term metaframework still says little about the orientation. [[Nest]], for example, is a metaframework, but a server-side one that uses [[Express]] as its foundation. The popular client-side metaframeworks are currently developing into hybrid frameworks that combine the strengths of client and server and thus make the web an overarching platform again. The direction the [[Evolution]] may take is foreshadowed by a statement from [[Dan Abramov]], one of React's core developers. He had this to say about the future of Create React App, the previous standard tool for setting up a React application: \"When I was thinking about possible futures for Create React App, it was clear client-only doesn't make sense. Way too limiting. Why are we always producing an empty HTML file if React can pre-render to HTML? Why can't i make a blog by map()ing over markdown files on my disk?\" (For link to source see [https://www.heise.de/select/ix/2023/8/softlinks/za4c?wt_mc=pred.red.ix.ix082023.108.softlink.softlink ix.de/za4c], [https://twitter.com/dan_abramov/status/1636827365677383700 tweet]). "
    },
    {
      "type": "paragraph",
      "id": "727f4c5579340787",
      "text": "He considers the previous purely client-side approach of React to make little sense in the future, as this architecture entails too many restrictions. This culminates in a web server delivering an SPA as an (almost) empty HTML document, which the browser then gradually fills with life. React tackles the issue head-on, recommending in its documentation that developers start a new application directly with a metaframework like Next.js, Remix or Gatsby. This does not mean that a Node.js background process is then always required for a React application, but it does show what the future may look like. Competitors have similar approaches, although they advertise them much less aggressively."
    },
    {
      "type": "pagefold",
      "id": "62ccf9d8412bb1bc",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "dc49c2839a81588b",
      "text": "SPRINGER, Sebastian, 2023. Die neue Generation der JavaScript-Metaframeworks. iX. 26 Juli 2023. Bd. 2023, Nr. 8, S. 108–110 [https://www.heise.de/select/ix/2023/8/2309408465876534332 page]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Nest",
        "story": []
      },
      "date": 1708069047412
    },
    {
      "id": "7e61957d30e9372b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7e61957d30e9372b",
        "text": "The term metaframework still says little about the orientation. [[Nest]], for example, is a metaframework, but a server-side one that uses [[Express]] as its foundation. The popular client-side metaframeworks are currently developing into hybrid frameworks that combine the strengths of client and server and thus make the web an overarching platform again. The direction the evolution may take is foreshadowed by a statement from [[Dan Abramov]], one of React's core developers. He had this to say about the future of Create React App, the previous standard tool for setting up a React application: \"When I was thinking about possible futures for Create React App, it was clear client-only doesn't make sense. Way too limiting. Why are we always producing an empty HTML file if React can pre-render to HTML? Why can't i make a blog by map()ing over markdown files on my disk?\" (For link to source see [https://www.heise.de/select/ix/2023/8/softlinks/za4c?wt_mc=pred.red.ix.ix082023.108.softlink.softlink ix.de/za4c], [https://twitter.com/dan_abramov/status/1636827365677383700 tweet]). "
      },
      "attribution": {
        "page": "2023-09-06"
      },
      "date": 1708069055035
    },
    {
      "type": "edit",
      "id": "7e61957d30e9372b",
      "item": {
        "type": "paragraph",
        "id": "7e61957d30e9372b",
        "text": "The term metaframework still says little about the orientation. [[Nest]], for example, is a metaframework, but a server-side one that uses [[Express]] as its foundation. The popular client-side metaframeworks are currently developing into hybrid frameworks that combine the strengths of client and server and thus make the web an overarching platform again. The direction the [[Evolution] may take is foreshadowed by a statement from [[Dan Abramov]], one of React's core developers. He had this to say about the future of Create React App, the previous standard tool for setting up a React application: \"When I was thinking about possible futures for Create React App, it was clear client-only doesn't make sense. Way too limiting. Why are we always producing an empty HTML file if React can pre-render to HTML? Why can't i make a blog by map()ing over markdown files on my disk?\" (For link to source see [https://www.heise.de/select/ix/2023/8/softlinks/za4c?wt_mc=pred.red.ix.ix082023.108.softlink.softlink ix.de/za4c], [https://twitter.com/dan_abramov/status/1636827365677383700 tweet]). "
      },
      "date": 1708069105481
    },
    {
      "type": "edit",
      "id": "7e61957d30e9372b",
      "item": {
        "type": "paragraph",
        "id": "7e61957d30e9372b",
        "text": "The term metaframework still says little about the orientation. [[Nest]], for example, is a metaframework, but a server-side one that uses [[Express]] as its foundation. The popular client-side metaframeworks are currently developing into hybrid frameworks that combine the strengths of client and server and thus make the web an overarching platform again. The direction the [[Evolution]] may take is foreshadowed by a statement from [[Dan Abramov]], one of React's core developers. He had this to say about the future of Create React App, the previous standard tool for setting up a React application: \"When I was thinking about possible futures for Create React App, it was clear client-only doesn't make sense. Way too limiting. Why are we always producing an empty HTML file if React can pre-render to HTML? Why can't i make a blog by map()ing over markdown files on my disk?\" (For link to source see [https://www.heise.de/select/ix/2023/8/softlinks/za4c?wt_mc=pred.red.ix.ix082023.108.softlink.softlink ix.de/za4c], [https://twitter.com/dan_abramov/status/1636827365677383700 tweet]). "
      },
      "date": 1708069138530
    },
    {
      "id": "727f4c5579340787",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "727f4c5579340787",
        "text": "He considers the previous purely client-side approach of React to make little sense in the future, as this architecture entails too many restrictions. This culminates in a web server delivering an SPA as an (almost) empty HTML document, which the browser then gradually fills with life. React tackles the issue head-on, recommending in its documentation that developers start a new application directly with a metaframework like Next.js, Remix or Gatsby. This does not mean that a Node.js background process is then always required for a React application, but it does show what the future may look like. Competitors have similar approaches, although they advertise them much less aggressively. The following list shows metaframeworks of various SPA frameworks:"
      },
      "after": "7e61957d30e9372b",
      "attribution": {
        "page": "2023-09-06"
      },
      "date": 1708069255767
    },
    {
      "type": "edit",
      "id": "727f4c5579340787",
      "item": {
        "type": "paragraph",
        "id": "727f4c5579340787",
        "text": "He considers the previous purely client-side approach of React to make little sense in the future, as this architecture entails too many restrictions. This culminates in a web server delivering an SPA as an (almost) empty HTML document, which the browser then gradually fills with life. React tackles the issue head-on, recommending in its documentation that developers start a new application directly with a metaframework like Next.js, Remix or Gatsby. This does not mean that a Node.js background process is then always required for a React application, but it does show what the future may look like. Competitors have similar approaches, although they advertise them much less aggressively."
      },
      "date": 1708069262734
    },
    {
      "item": {
        "type": "factory",
        "id": "62ccf9d8412bb1bc"
      },
      "id": "62ccf9d8412bb1bc",
      "type": "add",
      "after": "727f4c5579340787",
      "date": 1708069311009
    },
    {
      "type": "edit",
      "id": "62ccf9d8412bb1bc",
      "item": {
        "type": "pagefold",
        "id": "62ccf9d8412bb1bc",
        "text": "~"
      },
      "date": 1708069314043
    },
    {
      "id": "dc49c2839a81588b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "dc49c2839a81588b",
        "text": "SPRINGER, Sebastian, 2023. Die neue Generation der JavaScript-Metaframeworks. iX. 26 Juli 2023. Bd. 2023, Nr. 8, S. 108–110 [https://www.heise.de/select/ix/2023/8/2309408465876534332 page]"
      },
      "after": "62ccf9d8412bb1bc",
      "attribution": {
        "page": "2023-09-06"
      },
      "date": 1708069330755
    }
  ]
}