{
  "title": "Elm Markup",
  "story": [
    {
      "type": "paragraph",
      "id": "55491db9a34ff821",
      "text": "is a markup language that integrates closely with [[Elm]]. [https://github.com/mdgriffith/elm-markup github] [https://package.elm-lang.org/packages/mdgriffith/elm-markup/latest/ package]"
    },
    {
      "type": "paragraph",
      "id": "67554c26d1d5ab12",
      "text": "You describe your document and get a [[Parser]] that can parse that document or hand you nice error messages.\n"
    },
    {
      "type": "video",
      "id": "8a8e577e2157cf8e",
      "text": "START 19\nYOUTUBE 8Zd3ocr9Di8\n[[Matthew Griffith]] â€“ A Markup for the Statically Typed ; the v3 release article [https://github.com/mdgriffith/elm-markup/blob/master/design-decisions/WHY-ELM-MARKUP-V3.md github]\n"
    },
    {
      "type": "paragraph",
      "id": "6a3940369d60d419",
      "text": "VSCode support for the Elm Markup package. [https://marketplace.visualstudio.com/items?itemName=mdgriffith.elm-markup-vscode page] [https://github.com/mdgriffith/elm-markup github] [https://package.elm-lang.org/packages/mdgriffith/elm-markup/3.0.1/ package]"
    },
    {
      "type": "pagefold",
      "id": "000c860a9a383316",
      "text": "Transcript"
    },
    {
      "type": "paragraph",
      "id": "640d277d5a91c03d",
      "text": "This talk is called markup for the statically typed and I'm Matthew Griffith and kind of exciting I actually just moved from Cornell Tech and now I'm writing Elm code 100% of the time at blissfully which is super awesome go check us out if you want to check it out it does kind of sass management for like onboarding people and managing their services they need"
    },
    {
      "type": "paragraph",
      "id": "062404efd3d45084",
      "text": "but this is really about Elm Markup and what I'm going to be talking about is I'm going to be talking about version 3 which is not out yet so if you like look through this stuff and go to the package and then try to do the thing and you're like where is the feature it's like it's it's coming it's coming but hopefully you'll see that it's it's it'll be worth it so in building an elm mark-up library I would frequently get kind of this interaction where I'm like I'm writing like a new markup language and in Elm and they were like yeah I saw you were doing that but you know like why like and so I kind of want to go into my journey"
    },
    {
      "type": "paragraph",
      "id": "03a154c24b791414",
      "text": "What was my journey? Actually to sort of get where I got and it kind of came down to three practical problems I had I really wanted to write some documentation for L me why that was interactive there was only so much I could do on the actual documentation website and I wanted to make these kind of interactive widgets that you could actually mess around with and maybe you would like manipulate some code and also show you kind of the results and I'm like okay well you know I could write some markdown but I want like a view function in the middle and okay well that's weird and then you know life kind of went on I'm like oh I really do want to write some articles too and I want to you know put some again some inner of content sort of in the middle and like okay well I'm running did this problem again and then there this other thing came up my plan for this year is to actually do some video game development and I'm really excited about kind of like writing the narrative for video games and I was like oh well again markdown would be great but if you're writing narrative for a video game it is classically you need to intermingle data with your prose and so you have a lot of these solutions that are out there that are more graphical they're like whole system's there are some languages that have very specific semantics around this I was like okay this all feels kind of weird"
    },
    {
      "type": "paragraph",
      "id": "3488abfe879eef49",
      "text": "(2:56) and so the [[Challenges]] I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff"
    },
    {
      "type": "paragraph",
      "id": "f0883d1097ab06f1",
      "text": "(4:14) so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey"
    },
    {
      "type": "image",
      "id": "8bd224930b8bb1c2",
      "text": "What is markup?",
      "size": "wide",
      "width": 430,
      "height": 242,
      "url": "/assets/plugins/image/0e09c60e69155ca447e00b4c01e787ea.jpg"
    },
    {
      "type": "paragraph",
      "id": "1a98a5ccce532fd8",
      "text": "(5:00) and this journey sort of started with well [[What Is Markup?]] and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough [[YAML]] seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great"
    },
    {
      "type": "markdown",
      "id": "3de452bbd49b17e4",
      "text": "# Markup is about writing data."
    },
    {
      "type": "paragraph",
      "id": "ca018097e01329d0",
      "text": "so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the [[Shape]] of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like [[String Literals]] or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing YAML and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types"
    },
    {
      "type": "paragraph",
      "id": "d2e4476a9d61660c",
      "text": "(7:25) Why do we want [[Types]] because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together"
    },
    {
      "type": "paragraph",
      "id": "0a1bd29066432c12",
      "text": "and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like"
    },
    {
      "type": "image",
      "id": "0f46743772963e49",
      "text": "The Language",
      "size": "wide",
      "width": 430,
      "height": 242,
      "url": "/assets/plugins/image/8c95b692e21be91939fa229c11450e76.jpg"
    },
    {
      "type": "paragraph",
      "id": "b637d47de6d37f3a",
      "text": "so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it"
    },
    {
      "type": "paragraph",
      "id": "3eb0971df4a4db1a",
      "text": "so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later"
    },
    {
      "type": "image",
      "id": "f1928eb2bba2f764",
      "text": "Limited Special Characters",
      "size": "wide",
      "width": 430,
      "height": 241,
      "url": "/assets/plugins/image/da82268875d6335a962a5b3b47386a1e.jpg"
    },
    {
      "type": "paragraph",
      "id": "106460bc9869179a",
      "text": "(09:32) Limited Special Characters. Some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text"
    },
    {
      "type": "image",
      "id": "4ba583282d3eeebf",
      "text": "The Definition",
      "size": "wide",
      "width": 430,
      "height": 241,
      "url": "/assets/plugins/image/87bc3ea6fde3291cc030ff8bf5ace998.jpg"
    },
    {
      "type": "paragraph",
      "id": "d578476c085fca21",
      "text": "(10:25) so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted"
    },
    {
      "type": "image",
      "id": "c9d80229aa4c3959",
      "text": "Additional Constraints",
      "size": "wide",
      "width": 430,
      "height": 241,
      "url": "/assets/plugins/image/800d9349e42686dc10cddf9a9dd108b5.jpg"
    },
    {
      "type": "paragraph",
      "id": "fcb76b477aa5b119",
      "text": "(11:13) and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages"
    },
    {
      "type": "paragraph",
      "id": "d6029eaa1cd017f9",
      "text": "now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in data"
    },
    {
      "type": "image",
      "id": "6da059cdce26efcc",
      "text": "Embedded Erros",
      "size": "wide",
      "width": 430,
      "height": 241,
      "url": "/assets/plugins/image/577d002a84433b7b06b256801f627bf5.jpg"
    },
    {
      "type": "paragraph",
      "id": "3423e987dd70764d",
      "text": "(12:59) so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer"
    },
    {
      "type": "image",
      "id": "bca8aa47b0e41a81",
      "text": "The Conversation",
      "size": "wide",
      "width": 430,
      "height": 242,
      "url": "/assets/plugins/image/a1fff59a95f7575eaf3bb06c221d656d.jpg"
    },
    {
      "type": "paragraph",
      "id": "d71fa0327c345ac0",
      "text": "(13:42) so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient"
    },
    {
      "type": "video",
      "id": "c51bd76d95f518b0",
      "text": "START 892\nYOUTUBE 8Zd3ocr9Di8\nDemo\n"
    },
    {
      "type": "paragraph",
      "id": "ebdd758d79c759cb",
      "text": "so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great"
    },
    {
      "type": "paragraph",
      "id": "d651cd5c09171c6e",
      "text": "(18:06) where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience"
    },
    {
      "type": "paragraph",
      "id": "b279b72b3fd95ad7",
      "text": "(19:11) and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
    },
    {
      "type": "paragraph",
      "id": "c9e44ca64e4b2928",
      "text": "â‡’ [[Elmstatic]]: Type-safe markup for your static site with Elmstatic and elm-markup [https://korban.net/posts/elm/2019-08-05-elmstatic-now-supports-elm-markup/ post] and An introduction to elm-markup by way of Elmstatic [https://korban.net/posts/elm/2019-05-21-intro-elm-markup-elmstatic/ post]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Elm Markup",
        "story": []
      },
      "date": 1696917058371
    },
    {
      "item": {
        "type": "factory",
        "id": "6a3940369d60d419"
      },
      "id": "6a3940369d60d419",
      "type": "add",
      "date": 1696917059835
    },
    {
      "type": "edit",
      "id": "6a3940369d60d419",
      "item": {
        "type": "paragraph",
        "id": "6a3940369d60d419",
        "text": "VSCode support for the Elm Markup package."
      },
      "date": 1696917064382
    },
    {
      "type": "edit",
      "id": "6a3940369d60d419",
      "item": {
        "type": "paragraph",
        "id": "6a3940369d60d419",
        "text": "VSCode support for the Elm Markup package. [https://marketplace.visualstudio.com/items?itemName=mdgriffith.elm-markup-vscode page]"
      },
      "date": 1696917074769
    },
    {
      "type": "edit",
      "id": "6a3940369d60d419",
      "item": {
        "type": "paragraph",
        "id": "6a3940369d60d419",
        "text": "VSCode support for the Elm Markup package. [https://marketplace.visualstudio.com/items?itemName=mdgriffith.elm-markup-vscode page] [https://github.com/mdgriffith/elm-markup github]"
      },
      "date": 1696917937455
    },
    {
      "type": "edit",
      "id": "6a3940369d60d419",
      "item": {
        "type": "paragraph",
        "id": "6a3940369d60d419",
        "text": "VSCode support for the Elm Markup package. [https://marketplace.visualstudio.com/items?itemName=mdgriffith.elm-markup-vscode page] [https://github.com/mdgriffith/elm-markup github] [https://package.elm-lang.org/packages/mdgriffith/elm-markup/3.0.1/ package]"
      },
      "date": 1696917978801
    },
    {
      "id": "55491db9a34ff821",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "55491db9a34ff821",
        "text": "is a markup language that integrates closely with Elm.\n"
      },
      "attribution": {
        "page": "2023-10-25"
      },
      "date": 1698237988847
    },
    {
      "type": "edit",
      "id": "55491db9a34ff821",
      "item": {
        "type": "paragraph",
        "id": "55491db9a34ff821",
        "text": "is a markup language that integrates closely with Elm.\n"
      },
      "date": 1698237998580,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1698238092171
    },
    {
      "type": "edit",
      "id": "55491db9a34ff821",
      "item": {
        "type": "paragraph",
        "id": "55491db9a34ff821",
        "text": "is a markup language that integrates closely with Elm."
      },
      "date": 1698238196030
    },
    {
      "type": "add",
      "id": "67554c26d1d5ab12",
      "item": {
        "type": "paragraph",
        "id": "67554c26d1d5ab12",
        "text": "You describe your document and get a parser that can parse that document or hand you nice error messages.\n"
      },
      "after": "55491db9a34ff821",
      "date": 1698238197178
    },
    {
      "type": "edit",
      "id": "55491db9a34ff821",
      "item": {
        "type": "paragraph",
        "id": "55491db9a34ff821",
        "text": "is a markup language that integrates closely with [[Elm]]. [https://github.com/mdgriffith/elm-markup github]"
      },
      "date": 1698238248988
    },
    {
      "item": {
        "type": "factory",
        "id": "8a8e577e2157cf8e"
      },
      "id": "8a8e577e2157cf8e",
      "type": "add",
      "after": "6a3940369d60d419",
      "date": 1698238315102
    },
    {
      "id": "8a8e577e2157cf8e",
      "type": "move",
      "order": [
        "55491db9a34ff821",
        "67554c26d1d5ab12",
        "8a8e577e2157cf8e",
        "6a3940369d60d419"
      ],
      "date": 1698238318126
    },
    {
      "type": "edit",
      "id": "8a8e577e2157cf8e",
      "item": {
        "type": "video",
        "id": "8a8e577e2157cf8e",
        "text": "YOUTUBE 8Zd3ocr9Di8"
      },
      "date": 1698238327293
    },
    {
      "type": "edit",
      "id": "8a8e577e2157cf8e",
      "item": {
        "type": "video",
        "id": "8a8e577e2157cf8e",
        "text": "YOUTUBE 8Zd3ocr9Di8\n[[Matthew Griffith]] â€“ A Markup for the Statically Typed"
      },
      "date": 1698238357149
    },
    {
      "type": "edit",
      "id": "55491db9a34ff821",
      "item": {
        "type": "paragraph",
        "id": "55491db9a34ff821",
        "text": "is a markup language that integrates closely with [[Elm]]. [https://github.com/mdgriffith/elm-markup github] [https://package.elm-lang.org/packages/mdgriffith/elm-markup/latest/ package]"
      },
      "date": 1698238418923
    },
    {
      "type": "edit",
      "id": "8a8e577e2157cf8e",
      "item": {
        "type": "video",
        "id": "8a8e577e2157cf8e",
        "text": "YOUTUBE 8Zd3ocr9Di8\n[[Matthew Griffith]] â€“ A Markup for the Statically Typed ; the v3 release article[]"
      },
      "date": 1698246248356
    },
    {
      "type": "edit",
      "id": "8a8e577e2157cf8e",
      "item": {
        "type": "video",
        "id": "8a8e577e2157cf8e",
        "text": "YOUTUBE 8Zd3ocr9Di8\n[[Matthew Griffith]] â€“ A Markup for the Statically Typed ; the v3 release article [https://github.com/mdgriffith/elm-markup/blob/master/design-decisions/WHY-ELM-MARKUP-V3.md github]"
      },
      "date": 1698246266562
    },
    {
      "type": "edit",
      "id": "67554c26d1d5ab12",
      "item": {
        "type": "paragraph",
        "id": "67554c26d1d5ab12",
        "text": "You describe your document and get a [[Parser]] that can parse that document or hand you nice error messages.\n"
      },
      "date": 1698246729626
    },
    {
      "item": {
        "type": "factory",
        "id": "000c860a9a383316"
      },
      "id": "000c860a9a383316",
      "type": "add",
      "after": "6a3940369d60d419",
      "date": 1711521367494
    },
    {
      "type": "edit",
      "id": "000c860a9a383316",
      "item": {
        "type": "pagefold",
        "id": "000c860a9a383316",
        "text": "Transcript"
      },
      "date": 1711521376905
    },
    {
      "item": {
        "type": "factory",
        "id": "640d277d5a91c03d"
      },
      "id": "640d277d5a91c03d",
      "type": "add",
      "after": "000c860a9a383316",
      "date": 1711521378685
    },
    {
      "type": "edit",
      "id": "640d277d5a91c03d",
      "item": {
        "type": "paragraph",
        "id": "640d277d5a91c03d",
        "text": "this talk is called markup for the statically typed and I'm Matthew Griffith and kind of exciting I actually just moved from Cornell Tech and now I'm writing Elm code 100% of the time at blissfully which is super awesome go check us out if you want to check it out it does kind of sass management for like onboarding people and managing their services they need but this is really about El markup and what I'm going to be talking about is I'm going to be talking about version 3 which is not out yet so if you like look through this stuff and go to the package and then try to do the thing and you're like where is the feature it's like it's it's coming it's coming but hopefully you'll see that it's it's it'll be worth it so in building an elm mark-up library I would frequently get kind of this interaction where I'm like I'm writing like a new markup language and in Elm and they were like yeah I saw you were doing that but you know like why like and so I kind of want to go into my journey what was my journey actually to sort of get where I got and it kind of came down to three practical problems I had I really wanted to write some documentation for L me why that was interactive there was only so much I could do on the actual documentation website and I wanted to make these kind of interactive widgets that you could actually mess around with and maybe you would like manipulate some code and also show you kind of the results and I'm like okay well you know I could write some markdown but I want like a view function in the middle and okay well that's weird and then you know life kind of went on I'm like oh I really do want to write some articles too and I want to you know put some again some inner of content sort of in the middle and like okay well I'm running did this problem again and then there this other thing came up my plan for this year is to actually do some video game development and I'm really excited about kind of like writing the narrative for video games and I was like oh well again markdown would be great but if you're writing narrative for a video game it is classically you need to intermingle data with your prose and so you have a lot of these solutions that are out there that are more graphical they're like whole system's there are some languages that have very specific semantics around this I was like okay this all feels kind of weird and so the challenges I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711521380516
    },
    {
      "type": "edit",
      "id": "640d277d5a91c03d",
      "item": {
        "type": "paragraph",
        "id": "640d277d5a91c03d",
        "text": "This talk is called markup for the statically typed and I'm Matthew Griffith and kind of exciting I actually just moved from Cornell Tech and now I'm writing Elm code 100% of the time at blissfully which is super awesome go check us out if you want to check it out it does kind of sass management for like onboarding people and managing their services they need but this is really about El markup and what I'm going to be talking about is I'm going to be talking about version 3 which is not out yet so if you like look through this stuff and go to the package and then try to do the thing and you're like where is the feature it's like it's it's coming it's coming but hopefully you'll see that it's it's it'll be worth it so in building an elm mark-up library I would frequently get kind of this interaction where I'm like I'm writing like a new markup language and in Elm and they were like yeah I saw you were doing that but you know like why like and so I kind of want to go into my journey what was my journey actually to sort of get where I got and it kind of came down to three practical problems I had I really wanted to write some documentation for L me why that was interactive there was only so much I could do on the actual documentation website and I wanted to make these kind of interactive widgets that you could actually mess around with and maybe you would like manipulate some code and also show you kind of the results and I'm like okay well you know I could write some markdown but I want like a view function in the middle and okay well that's weird and then you know life kind of went on I'm like oh I really do want to write some articles too and I want to you know put some again some inner of content sort of in the middle and like okay well I'm running did this problem again and then there this other thing came up my plan for this year is to actually do some video game development and I'm really excited about kind of like writing the narrative for video games and I was like oh well again markdown would be great but if you're writing narrative for a video game it is classically you need to intermingle data with your prose and so you have a lot of these solutions that are out there that are more graphical they're like whole system's there are some languages that have very specific semantics around this I was like okay this all feels kind of weird and so the challenges I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711521395797
    },
    {
      "type": "edit",
      "id": "8a8e577e2157cf8e",
      "item": {
        "type": "video",
        "id": "8a8e577e2157cf8e",
        "text": "START 17\nYOUTUBE 8Zd3ocr9Di8\n[[Matthew Griffith]] â€“ A Markup for the Statically Typed ; the v3 release article [https://github.com/mdgriffith/elm-markup/blob/master/design-decisions/WHY-ELM-MARKUP-V3.md github]\n"
      },
      "date": 1711521466070
    },
    {
      "type": "edit",
      "id": "8a8e577e2157cf8e",
      "item": {
        "type": "video",
        "id": "8a8e577e2157cf8e",
        "text": "START 19\nYOUTUBE 8Zd3ocr9Di8\n[[Matthew Griffith]] â€“ A Markup for the Statically Typed ; the v3 release article [https://github.com/mdgriffith/elm-markup/blob/master/design-decisions/WHY-ELM-MARKUP-V3.md github]\n"
      },
      "date": 1711521474680
    },
    {
      "type": "edit",
      "id": "640d277d5a91c03d",
      "item": {
        "type": "paragraph",
        "id": "640d277d5a91c03d",
        "text": "This talk is called markup for the statically typed and I'm Matthew Griffith and kind of exciting I actually just moved from Cornell Tech and now I'm writing Elm code 100% of the time at blissfully which is super awesome go check us out if you want to check it out it does kind of sass management for like onboarding people and managing their services they need"
      },
      "date": 1711521528158
    },
    {
      "type": "add",
      "id": "062404efd3d45084",
      "item": {
        "type": "paragraph",
        "id": "062404efd3d45084",
        "text": "but this is really about El markup and what I'm going to be talking about is I'm going to be talking about version 3 which is not out yet so if you like look through this stuff and go to the package and then try to do the thing and you're like where is the feature it's like it's it's coming it's coming but hopefully you'll see that it's it's it'll be worth it so in building an elm mark-up library I would frequently get kind of this interaction where I'm like I'm writing like a new markup language and in Elm and they were like yeah I saw you were doing that but you know like why like and so I kind of want to go into my journey what was my journey actually to sort of get where I got and it kind of came down to three practical problems I had I really wanted to write some documentation for L me why that was interactive there was only so much I could do on the actual documentation website and I wanted to make these kind of interactive widgets that you could actually mess around with and maybe you would like manipulate some code and also show you kind of the results and I'm like okay well you know I could write some markdown but I want like a view function in the middle and okay well that's weird and then you know life kind of went on I'm like oh I really do want to write some articles too and I want to you know put some again some inner of content sort of in the middle and like okay well I'm running did this problem again and then there this other thing came up my plan for this year is to actually do some video game development and I'm really excited about kind of like writing the narrative for video games and I was like oh well again markdown would be great but if you're writing narrative for a video game it is classically you need to intermingle data with your prose and so you have a lot of these solutions that are out there that are more graphical they're like whole system's there are some languages that have very specific semantics around this I was like okay this all feels kind of weird and so the challenges I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "640d277d5a91c03d",
      "date": 1711521530133
    },
    {
      "type": "edit",
      "id": "062404efd3d45084",
      "item": {
        "type": "paragraph",
        "id": "062404efd3d45084",
        "text": "but this is really about Elm Markup and what I'm going to be talking about is I'm going to be talking about version 3 which is not out yet so if you like look through this stuff and go to the package and then try to do the thing and you're like where is the feature it's like it's it's coming it's coming but hopefully you'll see that it's it's it'll be worth it so in building an elm mark-up library I would frequently get kind of this interaction where I'm like I'm writing like a new markup language and in Elm and they were like yeah I saw you were doing that but you know like why like and so I kind of want to go into my journey what was my journey actually to sort of get where I got and it kind of came down to three practical problems I had I really wanted to write some documentation for L me why that was interactive there was only so much I could do on the actual documentation website and I wanted to make these kind of interactive widgets that you could actually mess around with and maybe you would like manipulate some code and also show you kind of the results and I'm like okay well you know I could write some markdown but I want like a view function in the middle and okay well that's weird and then you know life kind of went on I'm like oh I really do want to write some articles too and I want to you know put some again some inner of content sort of in the middle and like okay well I'm running did this problem again and then there this other thing came up my plan for this year is to actually do some video game development and I'm really excited about kind of like writing the narrative for video games and I was like oh well again markdown would be great but if you're writing narrative for a video game it is classically you need to intermingle data with your prose and so you have a lot of these solutions that are out there that are more graphical they're like whole system's there are some languages that have very specific semantics around this I was like okay this all feels kind of weird and so the challenges I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711521544494
    },
    {
      "type": "edit",
      "id": "062404efd3d45084",
      "item": {
        "type": "paragraph",
        "id": "062404efd3d45084",
        "text": "but this is really about Elm Markup and what I'm going to be talking about is I'm going to be talking about version 3 which is not out yet so if you like look through this stuff and go to the package and then try to do the thing and you're like where is the feature it's like it's it's coming it's coming but hopefully you'll see that it's it's it'll be worth it so in building an elm mark-up library I would frequently get kind of this interaction where I'm like I'm writing like a new markup language and in Elm and they were like yeah I saw you were doing that but you know like why like and so I kind of want to go into my journey"
      },
      "date": 1711521623701
    },
    {
      "type": "add",
      "id": "03a154c24b791414",
      "item": {
        "type": "paragraph",
        "id": "03a154c24b791414",
        "text": "What was my journey? Actually to sort of get where I got and it kind of came down to three practical problems I had I really wanted to write some documentation for L me why that was interactive there was only so much I could do on the actual documentation website and I wanted to make these kind of interactive widgets that you could actually mess around with and maybe you would like manipulate some code and also show you kind of the results and I'm like okay well you know I could write some markdown but I want like a view function in the middle and okay well that's weird and then you know life kind of went on I'm like oh I really do want to write some articles too and I want to you know put some again some inner of content sort of in the middle and like okay well I'm running did this problem again and then there this other thing came up my plan for this year is to actually do some video game development and I'm really excited about kind of like writing the narrative for video games and I was like oh well again markdown would be great but if you're writing narrative for a video game it is classically you need to intermingle data with your prose and so you have a lot of these solutions that are out there that are more graphical they're like whole system's there are some languages that have very specific semantics around this I was like okay this all feels kind of weird and so the challenges I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "062404efd3d45084",
      "date": 1711521631117
    },
    {
      "type": "edit",
      "id": "03a154c24b791414",
      "item": {
        "type": "paragraph",
        "id": "03a154c24b791414",
        "text": "What was my journey? Actually to sort of get where I got and it kind of came down to three practical problems I had I really wanted to write some documentation for L me why that was interactive there was only so much I could do on the actual documentation website and I wanted to make these kind of interactive widgets that you could actually mess around with and maybe you would like manipulate some code and also show you kind of the results and I'm like okay well you know I could write some markdown but I want like a view function in the middle and okay well that's weird and then you know life kind of went on I'm like oh I really do want to write some articles too and I want to you know put some again some inner of content sort of in the middle and like okay well I'm running did this problem again and then there this other thing came up my plan for this year is to actually do some video game development and I'm really excited about kind of like writing the narrative for video games and I was like oh well again markdown would be great but if you're writing narrative for a video game it is classically you need to intermingle data with your prose and so you have a lot of these solutions that are out there that are more graphical they're like whole system's there are some languages that have very specific semantics around this I was like okay this all feels kind of weird"
      },
      "date": 1711521718822
    },
    {
      "type": "add",
      "id": "3488abfe879eef49",
      "item": {
        "type": "paragraph",
        "id": "3488abfe879eef49",
        "text": "(2:53) and so the challenges I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "03a154c24b791414",
      "date": 1711521723494
    },
    {
      "type": "edit",
      "id": "3488abfe879eef49",
      "item": {
        "type": "paragraph",
        "id": "3488abfe879eef49",
        "text": "(2:56) and so the challenges I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711521738376
    },
    {
      "type": "edit",
      "id": "3488abfe879eef49",
      "item": {
        "type": "paragraph",
        "id": "3488abfe879eef49",
        "text": "(2:56) and so the [[Challenges]] I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711521770727
    },
    {
      "type": "edit",
      "id": "3488abfe879eef49",
      "item": {
        "type": "paragraph",
        "id": "3488abfe879eef49",
        "text": "(2:56) and so the [[Challenges]] I was running into in each of these is again I want to insert a view function in the middle of my document an arbitrary view function not just a static view function but something I could actually like it could like look at my model and it could like do a little thing and and it's like that would be great why is this kind of so difficult and I was already using Elm UI because if I wasn't that would be kind of absurd and so I didn't want to write CSS I was like I just don't feel good if I have to like okay I built this whole thing where I never have to use CSS again except when I have to write my markdown I need to write I mean it's just a little bit of CSS but you know well but you know I didn't want to kind of go there and again with the narrative video game I want to embed arbitrary data it wasn't about HTML in a lot of these cases it may eventually become HTML but could be a lot of different things and the last one is really important because it should be convenient for my girlfriend to write in the narrative game my plan is that her and I would actually write these stories together so she's not a programmer she's a writer so um great like or any of the solutions I had before like do they meet that criteria and that actually became kind of a guiding light for a lot of this stuff"
      },
      "date": 1711521850321
    },
    {
      "type": "add",
      "id": "f0883d1097ab06f1",
      "item": {
        "type": "paragraph",
        "id": "f0883d1097ab06f1",
        "text": "(4:14) so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "3488abfe879eef49",
      "date": 1711521854092
    },
    {
      "type": "edit",
      "id": "f0883d1097ab06f1",
      "item": {
        "type": "paragraph",
        "id": "f0883d1097ab06f1",
        "text": "(4:14) so I had a lot of almost solutions a lot of things where it's actually talking with different people people have kind of like the solution they figured out to kind of any number of things that we mentioned up like okay I have the thing like you know it just like you know grabs the markdown it like does some substitution like some pre-processing and then like I make it I'm a I make it work and I wasn't really satisfied with almost solutions I really I really want something that was just like it felt nice and would be a tool that I could really build on and so I went on this journey"
      },
      "date": 1711521936511
    },
    {
      "type": "add",
      "id": "1a98a5ccce532fd8",
      "item": {
        "type": "paragraph",
        "id": "1a98a5ccce532fd8",
        "text": "(5:00) and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "f0883d1097ab06f1",
      "date": 1711521942731
    },
    {
      "id": "8bd224930b8bb1c2",
      "type": "add",
      "item": {
        "type": "image",
        "id": "8bd224930b8bb1c2",
        "text": "What is markup?",
        "size": "wide",
        "width": 430,
        "height": 242,
        "url": "/assets/plugins/image/0e09c60e69155ca447e00b4c01e787ea.jpg"
      },
      "after": "f0883d1097ab06f1",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711522081403
    },
    {
      "type": "edit",
      "id": "1a98a5ccce532fd8",
      "item": {
        "type": "paragraph",
        "id": "1a98a5ccce532fd8",
        "text": "(5:00) and this journey sort of started with well what is markup and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great"
      },
      "date": 1711522193183
    },
    {
      "type": "add",
      "id": "ca018097e01329d0",
      "item": {
        "type": "paragraph",
        "id": "ca018097e01329d0",
        "text": "so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the shape of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "1a98a5ccce532fd8",
      "date": 1711522194171
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711522326771
    },
    {
      "type": "edit",
      "id": "1a98a5ccce532fd8",
      "item": {
        "type": "paragraph",
        "id": "1a98a5ccce532fd8",
        "text": "(5:00) and this journey sort of started with well [[What Is Markup?]] and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough Gamal seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great"
      },
      "date": 1711522564875
    },
    {
      "type": "edit",
      "id": "1a98a5ccce532fd8",
      "item": {
        "type": "paragraph",
        "id": "1a98a5ccce532fd8",
        "text": "(5:00) and this journey sort of started with well [[What Is Markup?]] and I ran into this kind of initial problem where I'm like what's the difference between markup and just data serialization and I didn't really have I'm like okay well I don't I don't think there's a difference I think we we have two terms right interesting and well interestingly enough [[YAML]] seems to have like an issue with this or the same like confusion because it's like yet another markup language was the original like-like-like acronym that's what that meant and then they actually changed it to ya mole ain't a markup language so I'm like okay well I think we're on the same page that we just don't know what's going on so that's great"
      },
      "date": 1711522609701
    },
    {
      "type": "add",
      "id": "3de452bbd49b17e4",
      "item": {
        "type": "paragraph",
        "id": "3de452bbd49b17e4",
        "text": "Markup is about writing data."
      },
      "after": "1a98a5ccce532fd8",
      "date": 1711522725298
    },
    {
      "type": "edit",
      "id": "3de452bbd49b17e4",
      "item": {
        "type": "paragraph",
        "id": "3de452bbd49b17e4",
        "text": "# Markup is about writing data."
      },
      "date": 1711522736733
    },
    {
      "type": "edit",
      "id": "3de452bbd49b17e4",
      "item": {
        "type": "markdown",
        "id": "3de452bbd49b17e4",
        "text": "# Markup is about writing data."
      },
      "date": 1711522738171
    },
    {
      "type": "edit",
      "id": "ca018097e01329d0",
      "item": {
        "type": "paragraph",
        "id": "ca018097e01329d0",
        "text": "so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the [[Shape]] of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like string literals or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711522805123
    },
    {
      "type": "edit",
      "id": "ca018097e01329d0",
      "item": {
        "type": "paragraph",
        "id": "ca018097e01329d0",
        "text": "so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the [[Shape]] of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like [[String Literals]] or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing Gamal and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711522827353
    },
    {
      "type": "edit",
      "id": "ca018097e01329d0",
      "item": {
        "type": "paragraph",
        "id": "ca018097e01329d0",
        "text": "so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the [[Shape]] of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like [[String Literals]] or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing YAMAL and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711522908364
    },
    {
      "type": "edit",
      "id": "ca018097e01329d0",
      "item": {
        "type": "paragraph",
        "id": "ca018097e01329d0",
        "text": "so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the [[Shape]] of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like [[String Literals]] or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing YAML and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types why do we want types because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711522946202
    },
    {
      "type": "edit",
      "id": "ca018097e01329d0",
      "item": {
        "type": "paragraph",
        "id": "ca018097e01329d0",
        "text": "so what I really thought about is like okay well markup is about writing data cool well how would we write some data and I kind of like started to like think like okay well if I'm writing data if I'm in the headspace of data I would like some types I would like to actually know the [[Shape]] of the data but I would also like I want to write prose I'm not sure if everybody can see this it says easy to write prose down here or another way to say it is like easy to write a novel would you want to write a novel in it so you probably wouldn't want to write a novel and protobuf you know no not json yamo you might maybe you want to write it like more in the animal than json and elm i felt like it was kind of like okay well i've definitely written content in elm for blog posts and everything where's just like [[String Literals]] or whatever so I'm like okay that seems like obviously more types but like similar baby into like writing YAML and then it's like okay you know markdown and asciidoc and there's there's like so many of these things it's absurd and like well isn't there something there like what about over there and it's kind of like this question of like what would an elm like markup look like well the first requirement is it's got to have like a light weight same syntax we can't like I want to be able to write a novel on this I don't want to be in here in like just really trying to figure out okay what's the nesting what's whatever and it would have types and specifically like with types"
      },
      "date": 1711522996468
    },
    {
      "type": "add",
      "id": "d2e4476a9d61660c",
      "item": {
        "type": "paragraph",
        "id": "d2e4476a9d61660c",
        "text": "(7:50) Why do we want [[Types]] because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "ca018097e01329d0",
      "date": 1711523012130
    },
    {
      "type": "edit",
      "id": "d2e4476a9d61660c",
      "item": {
        "type": "paragraph",
        "id": "d2e4476a9d61660c",
        "text": "(7:25) Why do we want [[Types]] because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711523061928
    },
    {
      "type": "edit",
      "id": "d2e4476a9d61660c",
      "item": {
        "type": "paragraph",
        "id": "d2e4476a9d61660c",
        "text": "(7:25) Why do we want [[Types]] because we have to work a little bit to get them and they allow human-computer collaboration that's they have we have a similar language we can both talk and we can actually like figure out what we're gonna do about creating this content we want to create together"
      },
      "date": 1711523111343
    },
    {
      "type": "add",
      "id": "0a1bd29066432c12",
      "item": {
        "type": "paragraph",
        "id": "0a1bd29066432c12",
        "text": "and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "d2e4476a9d61660c",
      "date": 1711523112548
    },
    {
      "type": "edit",
      "id": "0a1bd29066432c12",
      "item": {
        "type": "paragraph",
        "id": "0a1bd29066432c12",
        "text": "and we know this like in Elm we have this lovely like collaboration with a compiler you know you're like I want to do this compiler is like that does make any sense thing like oh yeah you're right it's great and it would be specifically about writing data could we do that well where are your writing data so what is the where did I actually land if that was kind of like my guiding light what does the language actually look like"
      },
      "date": 1711523260969
    },
    {
      "type": "add",
      "id": "b637d47de6d37f3a",
      "item": {
        "type": "paragraph",
        "id": "b637d47de6d37f3a",
        "text": "so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "0a1bd29066432c12",
      "date": 1711523262061
    },
    {
      "id": "0f46743772963e49",
      "type": "add",
      "item": {
        "type": "image",
        "id": "0f46743772963e49",
        "text": "The Language",
        "size": "wide",
        "width": 430,
        "height": 242,
        "url": "/assets/plugins/image/8c95b692e21be91939fa229c11450e76.jpg"
      },
      "after": "0a1bd29066432c12",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711523277418
    },
    {
      "type": "edit",
      "id": "b637d47de6d37f3a",
      "item": {
        "type": "paragraph",
        "id": "b637d47de6d37f3a",
        "text": "so this is the language this contains nearly every constructor in the language every special like case you know we got an image down here we got a header you may think like well I it's not just all about headers and images which we'll get to that you know we got some bold text Oslo elm day and cat is italicized I really like the idea of like representing like what it looks like physically you know so it's like italicized and I wanted like unambiguous syntax and this is because me I've shipped multiple versions of my documentation for Elm UI with markdown that was rendering not how I wanted it and it was because I was kind of too lazy to sort of check the visual it's like oh I was indented too far so that for therefore I'm like I'm not a list I'm a code block great but I'm already published so I'm am I gonna publish a patch version to actually fix that well no I'm just gonna feel bad about it"
      },
      "date": 1711523380102
    },
    {
      "type": "add",
      "id": "3eb0971df4a4db1a",
      "item": {
        "type": "paragraph",
        "id": "3eb0971df4a4db1a",
        "text": "so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "b637d47de6d37f3a",
      "date": 1711523405596
    },
    {
      "type": "edit",
      "id": "3eb0971df4a4db1a",
      "item": {
        "type": "paragraph",
        "id": "3eb0971df4a4db1a",
        "text": "so everything is unambiguous you have a human name at the top of this stuff no block is also hard-coded will see header there's no special thing about header it's actually a block that's named header and we'll see how to name those later"
      },
      "date": 1711523458318
    },
    {
      "type": "add",
      "id": "106460bc9869179a",
      "item": {
        "type": "paragraph",
        "id": "106460bc9869179a",
        "text": "limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "3eb0971df4a4db1a",
      "date": 1711523480643
    },
    {
      "id": "f1928eb2bba2f764",
      "type": "add",
      "item": {
        "type": "image",
        "id": "f1928eb2bba2f764",
        "text": "Limited Special Characters",
        "size": "wide",
        "width": 430,
        "height": 241,
        "url": "/assets/plugins/image/da82268875d6335a962a5b3b47386a1e.jpg"
      },
      "after": "3eb0971df4a4db1a",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711523543414
    },
    {
      "type": "edit",
      "id": "106460bc9869179a",
      "item": {
        "type": "paragraph",
        "id": "106460bc9869179a",
        "text": "(10:11) limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711523553835
    },
    {
      "type": "edit",
      "id": "106460bc9869179a",
      "item": {
        "type": "paragraph",
        "id": "106460bc9869179a",
        "text": "(09:32) limited special characters some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711523579625
    },
    {
      "type": "edit",
      "id": "106460bc9869179a",
      "item": {
        "type": "paragraph",
        "id": "106460bc9869179a",
        "text": "(09:32) Limited Special Characters. Some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711523618749
    },
    {
      "type": "edit",
      "id": "106460bc9869179a",
      "item": {
        "type": "paragraph",
        "id": "106460bc9869179a",
        "text": "(09:32) Limited Special Characters. Some of these markup languages when they extend their there are some really interesting ones like there's one called Inc which is specifically for narrative like creating a narrative structure in your game right so it's got all these like crazy like characters that mean stuff and these people are it like they've done the narrative game design stuff so they know kind of the concerns but you come into it you just like oh my god like what's happening there's so many characters on here and there's gonna be a lot of learning to actually figure out what's going on so these are the special characters and for arbitrary in line stuff we have essentially like an inline ability to attach certain attributes and again these are all arbitrary data attached to you know a range of text"
      },
      "date": 1711523670384
    },
    {
      "type": "add",
      "id": "d578476c085fca21",
      "item": {
        "type": "paragraph",
        "id": "d578476c085fca21",
        "text": "so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "106460bc9869179a",
      "date": 1711523685423
    },
    {
      "id": "4ba583282d3eeebf",
      "type": "add",
      "item": {
        "type": "image",
        "id": "4ba583282d3eeebf",
        "text": "The Definition",
        "size": "wide",
        "width": 430,
        "height": 241,
        "url": "/assets/plugins/image/87bc3ea6fde3291cc030ff8bf5ace998.jpg"
      },
      "after": "106460bc9869179a",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711523727756
    },
    {
      "type": "edit",
      "id": "d578476c085fca21",
      "item": {
        "type": "paragraph",
        "id": "d578476c085fca21",
        "text": "(10:25) so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711523745775
    },
    {
      "type": "edit",
      "id": "d578476c085fca21",
      "item": {
        "type": "paragraph",
        "id": "d578476c085fca21",
        "text": "(10:25) so the definition if we want types we need to inform the compiler which is basically what I ended up writing what it should be expecting so how would we do this well this is like an example of the language and this is slightly simplified we'll get into that in a moment but you know we have a document and that document should be rendered as an HTML article that would be great and the document is composed of many of text and images and we say well text is just some text but here is an image it's a record of two things and these are the things great and it's very obvious to see that this is just a mapping from one to the other and also that we don't just have to have HTML we could it could be any data anything you absolutely wanted"
      },
      "date": 1711523833416
    },
    {
      "type": "add",
      "id": "fcb76b477aa5b119",
      "item": {
        "type": "paragraph",
        "id": "fcb76b477aa5b119",
        "text": "and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "d578476c085fca21",
      "date": 1711523851676
    },
    {
      "id": "c9d80229aa4c3959",
      "type": "add",
      "item": {
        "type": "image",
        "id": "c9d80229aa4c3959",
        "text": "Additional Constraints",
        "size": "wide",
        "width": 430,
        "height": 241,
        "url": "/assets/plugins/image/800d9349e42686dc10cddf9a9dd108b5.jpg"
      },
      "after": "d578476c085fca21",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711523887961
    },
    {
      "type": "edit",
      "id": "fcb76b477aa5b119",
      "item": {
        "type": "paragraph",
        "id": "fcb76b477aa5b119",
        "text": "(11:13) and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711523911311
    },
    {
      "type": "edit",
      "id": "fcb76b477aa5b119",
      "item": {
        "type": "paragraph",
        "id": "fcb76b477aa5b119",
        "text": "(11:13) and we can also do things like we can add additional constraints to our documents so we can say this thing is an integer between whatever and whatever that's cool and we can also say oh you know this document or this thing starts with a record and then I want a bunch of like paragraphs so this is a classic example for you know I want to create this blog and I want my frontmatter at the front and it's required it has to be there but if we have types we have error messages"
      },
      "date": 1711524045695
    },
    {
      "type": "add",
      "id": "d6029eaa1cd017f9",
      "item": {
        "type": "paragraph",
        "id": "d6029eaa1cd017f9",
        "text": "now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in detta so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "fcb76b477aa5b119",
      "date": 1711524046238
    },
    {
      "type": "edit",
      "id": "d6029eaa1cd017f9",
      "item": {
        "type": "paragraph",
        "id": "d6029eaa1cd017f9",
        "text": "now I actually have kind of wondered if like this fact is why as far as I know there is not a like lightweight markup language with types on the level of elm and it's because it's like oh well if we have types that it'll break my flow you know I'll be writing I'll run into a type error and then everything is broken and then you know so what would these actually these error messages look like well fortunately have some pretty good guidance on that and this is actually an error message from the Elm markup compiler formatted to look familiar and it'll actually like figure out exactly what's going on there are a lot of different error messages that can give and they're all hopefully pretty intuitive but that's actually not enough if we just got these errors you can imagine if you have an error we really want to again we're writing data you writing is in like you are sitting down to write your novel and but your novel is in data"
      },
      "date": 1711524218211
    },
    {
      "type": "add",
      "id": "3423e987dd70764d",
      "item": {
        "type": "paragraph",
        "id": "3423e987dd70764d",
        "text": "so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "d6029eaa1cd017f9",
      "date": 1711524219873
    },
    {
      "id": "6da059cdce26efcc",
      "type": "add",
      "item": {
        "type": "image",
        "id": "6da059cdce26efcc",
        "text": "Embedded Erros",
        "size": "wide",
        "width": 430,
        "height": 241,
        "url": "/assets/plugins/image/577d002a84433b7b06b256801f627bf5.jpg"
      },
      "after": "d6029eaa1cd017f9",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711524240044
    },
    {
      "type": "edit",
      "id": "3423e987dd70764d",
      "item": {
        "type": "paragraph",
        "id": "3423e987dd70764d",
        "text": "(12:59) so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711524267357
    },
    {
      "type": "edit",
      "id": "3423e987dd70764d",
      "item": {
        "type": "paragraph",
        "id": "3423e987dd70764d",
        "text": "(12:59) so we need additional ways to actually handle errors so here's kind of an expanded version of what we just saw before Marc record actually doesn't take just the view function or really this is it turns it into it doesn't just turn into HTML but it also has the idea of converting if there is an error in this block do this content so you still at the high level have the ability to you know know oh this is a successful totally valid document but this allows you to actually make things sort of dynamic which again we're getting back into this collaboration idea with the computer"
      },
      "date": 1711524327689
    },
    {
      "type": "add",
      "id": "d71fa0327c345ac0",
      "item": {
        "type": "paragraph",
        "id": "d71fa0327c345ac0",
        "text": "so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "3423e987dd70764d",
      "date": 1711524329941
    },
    {
      "id": "bca8aa47b0e41a81",
      "type": "add",
      "item": {
        "type": "image",
        "id": "bca8aa47b0e41a81",
        "text": "The Conversation",
        "size": "wide",
        "width": 430,
        "height": 242,
        "url": "/assets/plugins/image/a1fff59a95f7575eaf3bb06c221d656d.jpg"
      },
      "after": "3423e987dd70764d",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711524447797
    },
    {
      "type": "edit",
      "id": "d71fa0327c345ac0",
      "item": {
        "type": "paragraph",
        "id": "d71fa0327c345ac0",
        "text": "(13:44) so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711524469483
    },
    {
      "type": "edit",
      "id": "d71fa0327c345ac0",
      "item": {
        "type": "paragraph",
        "id": "d71fa0327c345ac0",
        "text": "(13:42) so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711524488914
    },
    {
      "type": "edit",
      "id": "d71fa0327c345ac0",
      "item": {
        "type": "paragraph",
        "id": "d71fa0327c345ac0",
        "text": "(13:42) so with Elm markup there's kind of one final piece and started out as a parser where it would just like parse some stuff and then you have the thing and great it's done and then I said like I gotta go nuts and instead I was like well we have to have this intermediate step so that we can do all these other cool things so we have a string great we can parse it then we get an ast it's called mark description and once we have this ast which we can store in our model we can then convert it to our results it's just a generalized data structure the mark dot description we can convert to our result at any time and our results can actually emit error edit messages to edit the ast and the ast intern can actually to string itself back into the code you may notice this looks like a conversation that's convenient"
      },
      "date": 1711524548245
    },
    {
      "type": "add",
      "id": "ebdd758d79c759cb",
      "item": {
        "type": "paragraph",
        "id": "ebdd758d79c759cb",
        "text": "so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "d71fa0327c345ac0",
      "date": 1711524549565
    },
    {
      "id": "c51bd76d95f518b0",
      "type": "add",
      "item": {
        "type": "video",
        "id": "c51bd76d95f518b0",
        "text": "START 892\nYOUTUBE 8Zd3ocr9Di8\nDemo\n"
      },
      "after": "d71fa0327c345ac0",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711524702577
    },
    {
      "type": "edit",
      "id": "ebdd758d79c759cb",
      "item": {
        "type": "paragraph",
        "id": "ebdd758d79c759cb",
        "text": "so demo time man okay how do I get this thing out there perfect oh man is flux on where is that just we're good so this is an editor this is basically just an elm program the cool thing about it is that the model is just that mark description we also capture the source text the string of our document which is on the left and we also like track I think one boolean and one other thing but it's mostly just the document so what do we get from having this document well you can see the documents rendered under here like it's partially rendered we know this is an image there's something wrong with it so it's just like hey if this is this is broken at the moment but we can kind of see everything else in case we need that we had these two error messages so if we go over here and we correct that it's like okay well that's good and then we want to align this F image not aligned Lert but aligned left that would be fantastic okay and we need to be oh we have an int out of range between 30 and 80 800 and we have a width of 20 so it's like okay well great so we had that it's like okay well we now have a valid document these are my two cats they're awesome that's Bardot that's Phoebe it's like okay well we actually have this this issue here this is like welcome to L marker it's like well could we just do that and you can see actually it connects over here in fact we can say like we're actually pretty excited about this but can we can we go can we go even farther so what I did here you might have seen in the corner now says editable that's the boolean that we're storing all it's doing here is that because we're also storing the cursor position on the actual text so when we highlight different things you can see it knows where it is and we actually have some controls so that feels pretty good but how much farther could we take it so this is just this is like my cheating right like I'm able to add some stuff so we have a new component called draw it's like okay well we have this record of you know three fields we have a width and a height and we have we want some circles now I could have made like a very like elaborate like actually drawing mechanic all this does is draw circles but but it does draw circles and we can change this to our way to go you know everything's modifiable so that's great"
      },
      "date": 1711524933938
    },
    {
      "type": "add",
      "id": "d651cd5c09171c6e",
      "item": {
        "type": "paragraph",
        "id": "d651cd5c09171c6e",
        "text": "where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "ebdd758d79c759cb",
      "date": 1711524941299
    },
    {
      "type": "edit",
      "id": "d651cd5c09171c6e",
      "item": {
        "type": "paragraph",
        "id": "d651cd5c09171c6e",
        "text": "(18:06) where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "date": 1711524973126
    },
    {
      "type": "edit",
      "id": "d651cd5c09171c6e",
      "item": {
        "type": "paragraph",
        "id": "d651cd5c09171c6e",
        "text": "(18:06) where my slides again so that's kind of where we landed or I landed the results everything's fully typed we have this ability to be fully types but not just like throw everything out the water or out the window when like there's something wrong we can actually increment incrementally fixed stuff it's easy to make fragment errors so or editors so a fragment editor is basically like oh I know I have an image here and in order to like modify this field of this image I can send a mark dot update float with a special opaque ID that represents that float and whatever I want it to be and then the actual ast will figure out what needs to change this is actually very convenient for my girlfriend to write like it's able to actually set something up where she can modify the text or even build a tool that she could use to actually have this lovely like collaboration experience"
      },
      "date": 1711525090489
    },
    {
      "type": "add",
      "id": "b279b72b3fd95ad7",
      "item": {
        "type": "paragraph",
        "id": "b279b72b3fd95ad7",
        "text": "(19:11) and there's potential for the future there's you know we can have automatic semantic versioning kind of the entire realm that we're familiar with an elm all of a sudden becomes just available it's just like sort of free it's sort of just like oh it's there great just in markup for writing your content we have an L markup format this is literally like one function we already have this description of what we should be it's a very simple syntax there aren't many edge cases hardly at all so writing that I just haven't gotten around to it yet making a code editor integration is actually pretty easy like we just like hawk that data outside of Elm through a port and then do whatever kind of transformation we want to do and then having CLI like support is kind of naturally that's what you'd want with that and that's it thanks thanks for all the organizers and yeah I'm Matt Griffith [Music] [Applause]"
      },
      "after": "d651cd5c09171c6e",
      "date": 1711525097842
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1711525194300
    },
    {
      "type": "add",
      "id": "c9e44ca64e4b2928",
      "item": {
        "type": "paragraph",
        "id": "c9e44ca64e4b2928",
        "text": "â‡’ [[Elmstatic]]"
      },
      "after": "b279b72b3fd95ad7",
      "date": 1711525325539
    },
    {
      "type": "edit",
      "id": "c9e44ca64e4b2928",
      "item": {
        "type": "paragraph",
        "id": "c9e44ca64e4b2928",
        "text": "â‡’ [[Elmstatic]]: Type-safe markup for your static site with Elmstatic and elm-markup"
      },
      "date": 1711525424455
    },
    {
      "type": "edit",
      "id": "c9e44ca64e4b2928",
      "item": {
        "type": "paragraph",
        "id": "c9e44ca64e4b2928",
        "text": "â‡’ [[Elmstatic]]: Type-safe markup for your static site with Elmstatic and elm-markup [https://korban.net/posts/elm/2019-08-05-elmstatic-now-supports-elm-markup/ page]"
      },
      "date": 1711525432969
    },
    {
      "type": "edit",
      "id": "c9e44ca64e4b2928",
      "item": {
        "type": "paragraph",
        "id": "c9e44ca64e4b2928",
        "text": "â‡’ [[Elmstatic]]: Type-safe markup for your static site with Elmstatic and elm-markup [https://korban.net/posts/elm/2019-08-05-elmstatic-now-supports-elm-markup/ post]"
      },
      "date": 1711525442279
    },
    {
      "type": "edit",
      "id": "c9e44ca64e4b2928",
      "item": {
        "type": "paragraph",
        "id": "c9e44ca64e4b2928",
        "text": "â‡’ [[Elmstatic]]: Type-safe markup for your static site with Elmstatic and elm-markup [https://korban.net/posts/elm/2019-08-05-elmstatic-now-supports-elm-markup/ post] and An introduction to elm-markup by way of Elmstatic"
      },
      "date": 1711525547105
    },
    {
      "type": "edit",
      "id": "c9e44ca64e4b2928",
      "item": {
        "type": "paragraph",
        "id": "c9e44ca64e4b2928",
        "text": "â‡’ [[Elmstatic]]: Type-safe markup for your static site with Elmstatic and elm-markup [https://korban.net/posts/elm/2019-08-05-elmstatic-now-supports-elm-markup/ post] and An introduction to elm-markup by way of Elmstatic [https://korban.net/posts/elm/2019-05-21-intro-elm-markup-elmstatic/ post]"
      },
      "date": 1711525557627
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711525812500
    }
  ]
}