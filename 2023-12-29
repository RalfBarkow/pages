{
  "title": "2023-12-29",
  "story": [
    {
      "type": "paragraph",
      "id": "604236f230de9a75",
      "text": "The [[Journal]], when properly maintained, [[collect]]s the complete history of a wiki page."
    },
    {
      "type": "markdown",
      "id": "a085daa1319256c6",
      "text": "[[Action]]s of type `create` indicate newly made pages."
    },
    {
      "type": "image",
      "id": "445175f0c33f7a49",
      "text": "KeyNotFound",
      "size": "wide",
      "width": 430,
      "height": 263,
      "url": "/assets/plugins/image/06bdf2e60a5638833dc2c44a3b75e57e.jpg"
    },
    {
      "type": "markdown",
      "id": "ed4882f2acd77d26",
      "text": "# Key #id Not Found"
    },
    {
      "type": "reference",
      "id": "964da54eb1b95bc0",
      "site": "wiki.ralfbarkow.ch",
      "slug": "item-id",
      "title": "Item-id",
      "text": "Every [[Wiki Page]] in the federation [[contains]] a [[Story]] element which in turn is composed of an ordered list of items. Each item has an ID which is assigned on creation."
    },
    {
      "type": "markdown",
      "id": "f93bb393c5c0cf4c",
      "text": "The `create` [[Action]] type alone does not generate an ID."
    },
    {
      "type": "markdown",
      "id": "a1a5a0cf98bf025c",
      "text": "After the `create` action, the `story` is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The `title` is"
    },
    {
      "type": "code",
      "id": "054846bb1397244c",
      "text": "(self item) value at: #title"
    },
    {
      "type": "markdown",
      "id": "15c2f146e91c99ed",
      "text": "**Note**: The instance variables `slug` and `url` are not yet initialized."
    },
    {
      "type": "markdown",
      "id": "19a483d723b52c81",
      "text": "# Arrange the Story"
    },
    {
      "type": "paragraph",
      "id": "cdf0423981d247b0",
      "text": "[[Action]]s of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked. "
    },
    {
      "type": "paragraph",
      "id": "8529156add09189b",
      "text": "The [[Arrangement]] axiom gives permission to take multiple forms out of the interior [[Content]] of a [[Frame]] and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
    },
    {
      "type": "markdown",
      "id": "c8dc9b07d86e3d4f",
      "text": "**Note**: Our context that we carry with the story snippets is their ID. ⇒ [[Fluid Not Permanent]] ⇒ [[Unique Item Identifiers]] ⇒ Universal Intent"
    },
    {
      "type": "markdown",
      "id": "74028ce7b58cf53c",
      "text": "> Our software will break if our ids are not unique, and we seek to preserve content across time, and with the participation of any number of future authors.\n"
    },
    {
      "type": "paragraph",
      "id": "78bd3bb0ba09a858",
      "text": "The generic template collapses if either the [[Type]] or the [[Content]] is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In [[Arrangement]], [[collect]] gathers together framed-content that has in common the same [[Frame Type]]."
    },
    {
      "type": "paragraph",
      "id": "97c983f4fb3fdb3e",
      "text": "Everything is a page."
    },
    {
      "type": "markdown",
      "id": "d30b51f1c85858ce",
      "text": "## See also\n"
    },
    {
      "type": "markdown",
      "id": "63c23c1135f05a38",
      "text": "- [[Item Distribution]]\n- [[Unique Item Identifiers]] ⇒ [[Fluid Not Permanent]]\n- [[Example of a Void-Equivalent Type]]"
    },
    {
      "type": "graphviz",
      "id": "9d35c2d92831c091",
      "text": "DOT FROM two-level-diagram",
      "dot": "strict digraph {rankdir=LR\nnode [shape=plaintext]\n\"2023-12-29\" -> \"Journal\"\n\"2023-12-29\" -> \"collect\"\n\"2023-12-29\" -> \"Action\"\n\"2023-12-29\" -> \"Wiki\nPage\"\n\"2023-12-29\" -> \"contains\"\n\"2023-12-29\" -> \"Story\"\n\"2023-12-29\" -> \"Action\"\n\"2023-12-29\" -> \"Void-Equivalent\"\n\"2023-12-29\" -> \"Action\"\n\"2023-12-29\" -> \"arrange\"\n\"2023-12-29\" -> \"Story\"\n\"2023-12-29\" -> \"Arrangement\"\n\"2023-12-29\" -> \"Arrangement\"\n\"2023-12-29\" -> \"Content\"\n\"2023-12-29\" -> \"Frame\"\n\"2023-12-29\" -> \"put\"\n\"2023-12-29\" -> \"Frame\nType\"\n\"2023-12-29\" -> \"Fluid\nNot\nPermanent\"\n\"2023-12-29\" -> \"Unique\nItem\nIdentifiers\"\n\"2023-12-29\" -> \"Type\"\n\"2023-12-29\" -> \"Content\"\n\"2023-12-29\" -> \"Void-Equivalent\"\n\"2023-12-29\" -> \"Arrangement\"\n\"2023-12-29\" -> \"collect\"\n\"2023-12-29\" -> \"Frame\nType\"\n\"2023-12-29\" -> \"Item\nDistribution\"\n\"2023-12-29\" -> \"Unique\nItem\nIdentifiers\"\n\"2023-12-29\" -> \"Fluid\nNot\nPermanent\"\n\"2023-12-29\" -> \"Example\nof\na\nVoid-Equivalent\nType\"\n\"2023-12-29\" -> \"Interpreter\"\n\"2023-12-29\" -> \"Alan\nKay\"\n\"2023-12-29\" -> \"Quildreen\nMotta\"\n\"2023-12-29\" -> \"Structure\"\n\"2023-12-29\" -> \"Objects\nas\nPlain\nRecords\nof\nData\"\n\"2023-12-29\" -> \"Item\"\n\"2023-12-29\" -> \"The\nFederation\"\n\"2023-12-29\" -> \"Objects\nas\nBehaviour\"\n\"2023-12-29\" -> \"Card\"\n\"2023-12-29\" -> \"Behavior\"\n\"2023-12-29\" -> \"Alan\nKay\"\n\"2023-12-29\" -> \"Quildreen\nMotta\"\n\"2023-12-29\" -> \"Alan\nKay\"\n\"2023-12-29\" -> \"Object\"\n\"2023-12-29\" -> \"Something\"\n\"2023-12-29\" -> \"Full-Duplex\"\n\"2023-12-29\" -> \"negotiate\"\n\"2023-12-29\" -> \"Get\nInterior\nViews\nof\nExterior\nResources\"\n\"2023-12-29\" -> \"Telegram\"\n\"2023-12-29\" -> \"Ambassador\"\n\"2023-12-29\" -> \"Negotiation\nof\nMeaning\"\n\"2023-12-29\" -> \"Semantic\nMatchmaker\"\n\"2023-12-29\" -> \"General\nGame\nPlaying\"\n\"2023-12-29\" -> \"Michael\nGenesereth\"\n\"2023-12-29\" -> \"Quildreen\nMotta\"\n\"2023-12-29\" -> \"Strongtalk\"\n\"2023-12-29\" -> \"Type\nSystems\nas\nMacros\"\n\"2023-12-29\" -> \"Amal\nAhmed\"\n\"2023-12-29\" -> \"Name\"\n\"2023-12-29\" -> \"Structure\"\n\"2023-12-29\" -> \"Objects\nas\nBehaviour\"\n\"2023-12-29\" -> \"Objects\nas\nBehaviour\"\n\"2023-12-29\" -> \"Type\nSystems\nas\nMacros\"\n\"2023-12-29\" -> \"Extensionality\"\n\"2023-12-29\" -> \"Attribution\"\n\"2023-12-29\" -> \"Contents\nIs\nIntention\nObscuring\"\n\"2023-12-29\" -> \"Fluid\nNot\nPermanent\"\n\"2023-12-29\" -> \"Unique\nItem\nIdentifiers\"\n\"2023-12-29\" -> \"A\nSoup\nof\nObjects\"\n\"2023-12-29\" -> \"Collection\"\n\"2023-12-29\" -> \"DbSoup\"\n\"2023-12-29\" -> \"Objective-Lepiter\"\n\"2023-12-29\" -> \"DbSoup\"\n\"2023-12-29\" -> \"Sean\nDeNigris\"\n\"2023-12-29\" -> \"UID-Based\nLinks\"\n\"2023-12-29\" -> \"Lepiter\"\n\"2023-12-29\" -> \"Represent\nArbitrary\nDomain\nObjects\"\n\"2023-12-29\" -> \"Slug\"\n\"2023-12-29\" -> \"Sitemap\"\n\"2023-12-29\" -> \"Represent\nArbitrary\nDomain\nObjects\"\n\"2023-12-29\" -> \"Metadata\nAware\nNaming\"\n\"2023-12-29\" -> \"Slug\"\n\"2023-12-29\" -> \"UID-Based\nLinks\"\n\"2023-12-29\" -> \"Lepiter\"\n\"2023-12-29\" -> \"Sean\nDeNigris\"\n\"2023-12-29\" -> \"Database\nSlug\"\n\"2023-12-29\" -> \"Slug\"\n\"2023-12-29\" -> \"Links\"\n\"2023-12-29\" -> \"FileReference\"\n\"2023-12-29\" -> \"ZnUrl\"\n\"2023-12-29\" -> \"FileLocator\"\n\"2023-12-29\" -> \"Slug\"\n\"2023-12-29\" -> \"Sitemap\"\n\"2023-12-29\" -> \"Regular\nExpressions\nin\nPharo\"\n\"2023-12-29\" -> \"Convert\na\nSitemap\nto\na\nDITA\nMap\"\n\"Journal\" -> \"Wiki\nPage\"\n\"Journal\" -> \"Action\"\n\"Journal\" -> \"Neighborhood\"\n\"Journal\" -> \"Names\nof\nThings\"\n\"Journal\" -> \"Events\nand\nCausal\nDependence\"\n\"Journal\" -> \"Journal\nto\nGraph\"\n\"collect\" -> \"Inversion\"\n\"collect\" -> \"Arrangement\"\n\"collect\" -> \"James\nForm\"\n\"collect\" -> \"Frame\nType\"\n\"collect\" -> \"Structure\"\n\"collect\" -> \"Square-Bracket\"\n\"collect\" -> \"Arrangement\"\n\"collect\" -> \"Square-Bracket\"\n\"collect\" -> \"Inversion\"\n\"collect\" -> \"Event\"\n\"collect\" -> \"Structure\"\n\"collect\" -> \"Loop\"\n\"Action\" -> \"record\"\n\"Action\" -> \"Types\"\n\"Action\" -> \"Ownership\"\n\"Action\" -> \"Journal\"\n\"Wiki\nPage\" -> \"Federated\nWiki\nPage\"\n\"Wiki\nPage\" -> \"Fedwiki\nPage\"\n\"Wiki\nPage\" -> \"Hypertext\"\n\"Wiki\nPage\" -> \"Lineup\"\n\"Wiki\nPage\" -> \"Web\nPage\"\n\"Wiki\nPage\" -> \"Snippet\"\n\"Wiki\nPage\" -> \"Story\"\n\"Wiki\nPage\" -> \"combine\"\n\"Wiki\nPage\" -> \"Hypertext\"\n\"Wiki\nPage\" -> \"Where\nPages\nLive\"\n\"Wiki\nPage\" -> \"Story\"\n\"Wiki\nPage\" -> \"Item\"\n\"Wiki\nPage\" -> \"Journal\"\n\"Wiki\nPage\" -> \"Lineup\"\n\"Wiki\nPage\" -> \"Wiki\nPage\nJSON\"\n\"Wiki\nPage\" -> \"JSON\nSchema\"\n\"contains\" -> \"Concepts\"\n\"contains\" -> \"Network\"\n\"contains\" -> \"Relation\"\n\"contains\" -> \"Matrix\"\n\"contains\" -> \"relation\"\n\"Story\" -> \"Distinction\"\n\"Story\" -> \"Life\"\n\"Story\" -> \"Storycraft\"\n\"Story\" -> \"Choice\"\n\"Action\" -> \"record\"\n\"Action\" -> \"Types\"\n\"Action\" -> \"Ownership\"\n\"Action\" -> \"Journal\"\n\"Action\" -> \"record\"\n\"Action\" -> \"Types\"\n\"Action\" -> \"Ownership\"\n\"Action\" -> \"Journal\"\n\"Story\" -> \"Distinction\"\n\"Story\" -> \"Life\"\n\"Story\" -> \"Storycraft\"\n\"Story\" -> \"Choice\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"Inversion\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"disperse\"\n\"Arrangement\" -> \"put\"\n\"Arrangement\" -> \"Context\"\n\"Arrangement\" -> \"Frames\"\n\"Arrangement\" -> \"Structure\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"Iconic\nArithmetic\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"Inversion\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"disperse\"\n\"Arrangement\" -> \"put\"\n\"Arrangement\" -> \"Context\"\n\"Arrangement\" -> \"Frames\"\n\"Arrangement\" -> \"Structure\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"Iconic\nArithmetic\"\n\"Frame\" -> \"About\nFrame\nPlugin\"\n\"Frame\" -> \"About\nFrame\nIntegrations\"\n\"Frame\" -> \"Key\nFrame\"\n\"put\" -> \"Lambda\nCalculus\"\n\"put\" -> \"Lingdong\nHuang\"\n\"put\" -> \"put\"\n\"put\" -> \"Content\"\n\"put\" -> \"Frame\"\n\"put\" -> \"Frame\nType\"\n\"Frame\nType\" -> \"Structure\"\n\"Frame\nType\" -> \"Square-Bracket\"\n\"Frame\nType\" -> \"Arrangement\"\n\"Frame\nType\" -> \"collect\"\n\"Frame\nType\" -> \"Iconic\nArithmetic\"\n\"Frame\nType\" -> \"Arrangement\"\n\"Frame\nType\" -> \"Content\"\n\"Frame\nType\" -> \"Frame\"\n\"Frame\nType\" -> \"put\"\n\"Frame\nType\" -> \"Context\"\n\"Fluid\nNot\nPermanent\" -> \"fluid\"\n\"Fluid\nNot\nPermanent\" -> \"permanent\"\n\"Fluid\nNot\nPermanent\" -> \"Intent\"\n\"Fluid\nNot\nPermanent\" -> \"Intention\"\n\"Unique\nItem\nIdentifiers\" -> \"The\nFederation\"\n\"Unique\nItem\nIdentifiers\" -> \"Fluid\nNot\nPermanent\"\n\"Unique\nItem\nIdentifiers\" -> \"Permanent\nWeb\"\n\"Unique\nItem\nIdentifiers\" -> \"Permanent\nWeb\"\n\"Unique\nItem\nIdentifiers\" -> \"Dead\nWiki\"\n\"Unique\nItem\nIdentifiers\" -> \"The\nLong\nNow\"\n\"Unique\nItem\nIdentifiers\" -> \"Mediawiki\nTransport\"\n\"Unique\nItem\nIdentifiers\" -> \"LiveCode\"\n\"Unique\nItem\nIdentifiers\" -> \"Transporters\"\n\"Unique\nItem\nIdentifiers\" -> \"UUID\"\n\"Unique\nItem\nIdentifiers\" -> \"UUID\"\n\"Unique\nItem\nIdentifiers\" -> \"node.js\"\n\"Unique\nItem\nIdentifiers\" -> \"Universally\nunique\nidentifier\"\n\"Type\" -> \"The\nBehavioural\nPoint\nof\nView\"\n\"Type\" -> \"Name\"\n\"Type\" -> \"Behaviour\"\n\"Type\" -> \"Being\nthe\nSame\"\n\"Type\" -> \"JavaScript\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"Inversion\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"disperse\"\n\"Arrangement\" -> \"put\"\n\"Arrangement\" -> \"Context\"\n\"Arrangement\" -> \"Frames\"\n\"Arrangement\" -> \"Structure\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"Iconic\nArithmetic\"\n\"collect\" -> \"Inversion\"\n\"collect\" -> \"Arrangement\"\n\"collect\" -> \"James\nForm\"\n\"collect\" -> \"Frame\nType\"\n\"collect\" -> \"Structure\"\n\"collect\" -> \"Square-Bracket\"\n\"collect\" -> \"Arrangement\"\n\"collect\" -> \"Square-Bracket\"\n\"collect\" -> \"Inversion\"\n\"collect\" -> \"Event\"\n\"collect\" -> \"Structure\"\n\"collect\" -> \"Loop\"\n\"Frame\nType\" -> \"Structure\"\n\"Frame\nType\" -> \"Square-Bracket\"\n\"Frame\nType\" -> \"Arrangement\"\n\"Frame\nType\" -> \"collect\"\n\"Frame\nType\" -> \"Iconic\nArithmetic\"\n\"Frame\nType\" -> \"Arrangement\"\n\"Frame\nType\" -> \"Content\"\n\"Frame\nType\" -> \"Frame\"\n\"Frame\nType\" -> \"put\"\n\"Frame\nType\" -> \"Context\"\n\"Item\nDistribution\" -> \"Search\nIndex\nDownloads\"\n\"Unique\nItem\nIdentifiers\" -> \"The\nFederation\"\n\"Unique\nItem\nIdentifiers\" -> \"Fluid\nNot\nPermanent\"\n\"Unique\nItem\nIdentifiers\" -> \"Permanent\nWeb\"\n\"Unique\nItem\nIdentifiers\" -> \"Permanent\nWeb\"\n\"Unique\nItem\nIdentifiers\" -> \"Dead\nWiki\"\n\"Unique\nItem\nIdentifiers\" -> \"The\nLong\nNow\"\n\"Unique\nItem\nIdentifiers\" -> \"Mediawiki\nTransport\"\n\"Unique\nItem\nIdentifiers\" -> \"LiveCode\"\n\"Unique\nItem\nIdentifiers\" -> \"Transporters\"\n\"Unique\nItem\nIdentifiers\" -> \"UUID\"\n\"Unique\nItem\nIdentifiers\" -> \"UUID\"\n\"Unique\nItem\nIdentifiers\" -> \"node.js\"\n\"Unique\nItem\nIdentifiers\" -> \"Universally\nunique\nidentifier\"\n\"Fluid\nNot\nPermanent\" -> \"fluid\"\n\"Fluid\nNot\nPermanent\" -> \"permanent\"\n\"Fluid\nNot\nPermanent\" -> \"Intent\"\n\"Fluid\nNot\nPermanent\" -> \"Intention\"\n\"Interpreter\" -> \"Mixins\"\n\"Alan\nKay\" -> \"Seymour\nPapert\"\n\"Alan\nKay\" -> \"Blue\nPlane\"\n\"Alan\nKay\" -> \"Smalltalk\"\n\"Quildreen\nMotta\" -> \"Structure\"\n\"Quildreen\nMotta\" -> \"Objects\nas\nBehaviour\"\n\"Structure\" -> \"Advance\nOrganizer\"\n\"Structure\" -> \"Scaffolding\"\n\"Structure\" -> \"Change\"\n\"Structure\" -> \"Inside\"\n\"Structure\" -> \"Outside\"\n\"Structure\" -> \"Model\"\n\"Structure\" -> \"Boundary\"\n\"Structure\" -> \"Cognition\"\n\"Structure\" -> \"remind\"\n\"Structure\" -> \"William\nBricken\"\n\"Structure\" -> \"Surprise\"\n\"Structure\" -> \"Autopoiesis\"\n\"Structure\" -> \"Event\"\n\"Structure\" -> \"Learning\nEnvironment\"\n\"Structure\" -> \"Path\"\n\"Structure\" -> \"Choice\"\n\"Structure\" -> \"Patterns\"\n\"Objects\nas\nPlain\nRecords\nof\nData\" -> \"Structure\"\n\"Objects\nas\nPlain\nRecords\nof\nData\" -> \"Objects\nas\nPlain\nRecords\nof\nData\"\n\"Objects\nas\nPlain\nRecords\nof\nData\" -> \"Objects\nas\nBehaviour\"\n\"Objects\nas\nPlain\nRecords\nof\nData\" -> \"Quildreen\nMotta\"\n\"The\nFederation\" -> \"Star\nTrek\"\n\"The\nFederation\" -> \"Decentralised\nWeb\"\n\"The\nFederation\" -> \"Federated\nCommons\"\n\"The\nFederation\" -> \"Commons\"\n\"The\nFederation\" -> \"Series\nof\nCultural\nEvents\"\n\"The\nFederation\" -> \"Conversations\nAcross\nSpace\"\n\"The\nFederation\" -> \"Thematic\nconversations\"\n\"The\nFederation\" -> \"Decentralised\nArchive\"\n\"The\nFederation\" -> \"Podcasting\nCommunity\"\n\"The\nFederation\" -> \"Film\nand\nDocumentary\nResearch\"\n\"The\nFederation\" -> \"Future\nof\nthe\nFederation\"\n\"The\nFederation\" -> \"Visualising\nthe\nFederation\"\n\"The\nFederation\" -> \"Graphing\nthe\nFederation\"\n\"The\nFederation\" -> \"The\nPermanent\nFederation\"\n\"The\nFederation\" -> \"United\nFederation\nof\nPlanets\"\n\"The\nFederation\" -> \"Federation\nWars\"\n\"The\nFederation\" -> \"Federated\nGovernance\"\n\"Objects\nas\nBehaviour\" -> \"Structure\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nPlain\nRecords\nof\nData\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nBehaviour\"\n\"Objects\nas\nBehaviour\" -> \"Quildreen\nMotta\"\n\"Card\" -> \"Cards\"\n\"Card\" -> \"Behaviors\"\n\"Card\" -> \"flip\"\n\"Card\" -> \"Flip\nOperation\"\n\"Behavior\" -> \"State\"\n\"Behavior\" -> \"Class\"\n\"Behavior\" -> \"Metaclass\"\n\"Behavior\" -> \"The\nBehavioural\nPoint\nof\nView\"\n\"Behavior\" -> \"The\nArt\nof\nthe\nInterpreter\"\n\"Behavior\" -> \"A\nPattern\nof\nPerception\"\n\"Behavior\" -> \"A\nMentoring\nCourse\non\nSmalltalk\"\n\"Behavior\" -> \"Trait\nComposition\nMechanism\"\n\"Behavior\" -> \"Croquet\"\n\"Behavior\" -> \"Card\"\n\"Behavior\" -> \"interact\"\n\"Behavior\" -> \"Computation\"\n\"Behavior\" -> \"replicate\"\n\"Behavior\" -> \"Static\nContext\"\n\"Behavior\" -> \"Worldcore\"\n\"Behavior\" -> \"Behavior\nTrees\"\n\"Alan\nKay\" -> \"Seymour\nPapert\"\n\"Alan\nKay\" -> \"Blue\nPlane\"\n\"Alan\nKay\" -> \"Smalltalk\"\n\"Quildreen\nMotta\" -> \"Structure\"\n\"Quildreen\nMotta\" -> \"Objects\nas\nBehaviour\"\n\"Alan\nKay\" -> \"Seymour\nPapert\"\n\"Alan\nKay\" -> \"Blue\nPlane\"\n\"Alan\nKay\" -> \"Smalltalk\"\n\"Object\" -> \"Container\"\n\"Object\" -> \"Outside\"\n\"Object\" -> \"Process\"\n\"Object\" -> \"Inside\"\n\"Object\" -> \"Iconic\nArithmetic\"\n\"Object\" -> \"Life-like\nSystems\"\n\"Object\" -> \"Living\nSystems\"\n\"Object\" -> \"Hyperlink\nin\nObject\"\n\"Object\" -> \"Verb\"\n\"Something\" -> \"Void\"\n\"Something\" -> \"Reference\"\n\"Something\" -> \"Communication\"\n\"Something\" -> \"Something\"\n\"Something\" -> \"Internal\nLink\"\n\"Something\" -> \"Something\"\n\"Something\" -> \"\"\n\"Something\" -> \"QWAN\"\n\"Something\" -> \"Distinction\"\n\"Something\" -> \"Laws\nOf\nForm\"\n\"Something\" -> \"Laws\nof\nForm\nand\nObject\nOriented\nProgramming\"\n\"Full-Duplex\" -> \"Alan\nKay\"\n\"Full-Duplex\" -> \"Full-Duplex\"\n\"Full-Duplex\" -> \"Alan\nKay\"\n\"negotiate\" -> \"negotiate\"\n\"negotiate\" -> \"The\nPedestrian\nCrossing\nas\nSocial\nGift\"\n\"negotiate\" -> \"cross\"\n\"Get\nInterior\nViews\nof\nExterior\nResources\" -> \"negotiate\"\n\"Get\nInterior\nViews\nof\nExterior\nResources\" -> \"Get\nInterior\nViews\nof\nExterior\nResources\"\n\"Get\nInterior\nViews\nof\nExterior\nResources\" -> \"Telegram\"\n\"Get\nInterior\nViews\nof\nExterior\nResources\" -> \"Ambassador\"\n\"Get\nInterior\nViews\nof\nExterior\nResources\" -> \"Negotiation\nof\nMeaning\"\n\"Telegram\" -> \"Telegram\"\n\"Telegram\" -> \"Ambassador\"\n\"Telegram\" -> \"Negotiation\nof\nMeaning\"\n\"Ambassador\" -> \"Telegram\"\n\"Ambassador\" -> \"Ambassador\"\n\"Ambassador\" -> \"Negotiation\nof\nMeaning\"\n\"Negotiation\nof\nMeaning\" -> \"Message\"\n\"Negotiation\nof\nMeaning\" -> \"Telegram\"\n\"Negotiation\nof\nMeaning\" -> \"Ambassador\"\n\"Negotiation\nof\nMeaning\" -> \"Negotiation\nof\nMeaning\"\n\"Negotiation\nof\nMeaning\" -> \"negotiate\"\n\"Negotiation\nof\nMeaning\" -> \"Get\nInterior\nViews\nof\nExterior\nResources\"\n\"Negotiation\nof\nMeaning\" -> \"Meaning\n(Sinn)\"\n\"Semantic\nMatchmaker\" -> \"Object\nHas\nTwo\nPublic\nBillboards\"\n\"Semantic\nMatchmaker\" -> \"Semantic\nMatchmaker\"\n\"Semantic\nMatchmaker\" -> \"Loose\nCoupling\"\n\"General\nGame\nPlaying\" -> \"Michael\nGenesereth\"\n\"Quildreen\nMotta\" -> \"Structure\"\n\"Quildreen\nMotta\" -> \"Objects\nas\nBehaviour\"\n\"Strongtalk\" -> \"Smalltalk-80\"\n\"Strongtalk\" -> \"Strongtalk\"\n\"Name\" -> \"Event\"\n\"Name\" -> \"Distinction\"\n\"Name\" -> \"It’s\nAll\nin\na\nName\"\n\"Structure\" -> \"Advance\nOrganizer\"\n\"Structure\" -> \"Scaffolding\"\n\"Structure\" -> \"Change\"\n\"Structure\" -> \"Inside\"\n\"Structure\" -> \"Outside\"\n\"Structure\" -> \"Model\"\n\"Structure\" -> \"Boundary\"\n\"Structure\" -> \"Cognition\"\n\"Structure\" -> \"remind\"\n\"Structure\" -> \"William\nBricken\"\n\"Structure\" -> \"Surprise\"\n\"Structure\" -> \"Autopoiesis\"\n\"Structure\" -> \"Event\"\n\"Structure\" -> \"Learning\nEnvironment\"\n\"Structure\" -> \"Path\"\n\"Structure\" -> \"Choice\"\n\"Structure\" -> \"Patterns\"\n\"Objects\nas\nBehaviour\" -> \"Structure\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nPlain\nRecords\nof\nData\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nBehaviour\"\n\"Objects\nas\nBehaviour\" -> \"Quildreen\nMotta\"\n\"Objects\nas\nBehaviour\" -> \"Structure\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nPlain\nRecords\nof\nData\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nBehaviour\"\n\"Objects\nas\nBehaviour\" -> \"Quildreen\nMotta\"\n\"Extensionality\" -> \"Logic\"\n\"Extensionality\" -> \"Equality\"\n\"Attribution\" -> \"Attribution\n(Zurechnung)\"\n\"Attribution\" -> \"Attributionsforschung\"\n\"Contents\nIs\nIntention\nObscuring\" -> \"Intention\"\n\"Contents\nIs\nIntention\nObscuring\" -> \"Laws\nof\nForm\nObjects\"\n\"Fluid\nNot\nPermanent\" -> \"fluid\"\n\"Fluid\nNot\nPermanent\" -> \"permanent\"\n\"Fluid\nNot\nPermanent\" -> \"Intent\"\n\"Fluid\nNot\nPermanent\" -> \"Intention\"\n\"Unique\nItem\nIdentifiers\" -> \"The\nFederation\"\n\"Unique\nItem\nIdentifiers\" -> \"Fluid\nNot\nPermanent\"\n\"Unique\nItem\nIdentifiers\" -> \"Permanent\nWeb\"\n\"Unique\nItem\nIdentifiers\" -> \"Permanent\nWeb\"\n\"Unique\nItem\nIdentifiers\" -> \"Dead\nWiki\"\n\"Unique\nItem\nIdentifiers\" -> \"The\nLong\nNow\"\n\"Unique\nItem\nIdentifiers\" -> \"Mediawiki\nTransport\"\n\"Unique\nItem\nIdentifiers\" -> \"LiveCode\"\n\"Unique\nItem\nIdentifiers\" -> \"Transporters\"\n\"Unique\nItem\nIdentifiers\" -> \"UUID\"\n\"Unique\nItem\nIdentifiers\" -> \"UUID\"\n\"Unique\nItem\nIdentifiers\" -> \"node.js\"\n\"Unique\nItem\nIdentifiers\" -> \"Universally\nunique\nidentifier\"\n\"DbSoup\" -> \"A\nSoup\nof\nObjects\"\n\"Objective-Lepiter\" -> \"Sean\nDeNigris\"\n\"Objective-Lepiter\" -> \"UID-Based\nLinks\"\n\"Objective-Lepiter\" -> \"Lepiter\"\n\"Objective-Lepiter\" -> \"Objective-Lepiter\"\n\"DbSoup\" -> \"A\nSoup\nof\nObjects\"\n\"Sean\nDeNigris\" -> \"Computer\"\n\"UID-Based\nLinks\" -> \"Lepiter\"\n\"Lepiter\" -> \"Glamorous\nToolkit\nBook\"\n\"Lepiter\" -> \"Markdown\"\n\"Lepiter\" -> \"Glamorous\nToolkit\"\n\"Represent\nArbitrary\nDomain\nObjects\" -> \"UID-Based\nLinks\"\n\"Represent\nArbitrary\nDomain\nObjects\" -> \"Lepiter\"\n\"Slug\" -> \"Where\nPages\nLive\"\n\"Sitemap\" -> \"XML\"\n\"Sitemap\" -> \"crawl\"\n\"Sitemap\" -> \"Sitemap\nProtocol\"\n\"Sitemap\" -> \"Wiki\nSitemap\"\n\"Sitemap\" -> \"Sitemap\nProtocol\"\n\"Sitemap\" -> \"Types\nof\nSitemap\"\n\"Sitemap\" -> \"Federation\nDirectory\"\n\"Sitemap\" -> \"Convert\na\nSitemap\nto\na\nDITA\nMap\"\n\"Represent\nArbitrary\nDomain\nObjects\" -> \"UID-Based\nLinks\"\n\"Represent\nArbitrary\nDomain\nObjects\" -> \"Lepiter\"\n\"Slug\" -> \"Where\nPages\nLive\"\n\"UID-Based\nLinks\" -> \"Lepiter\"\n\"Lepiter\" -> \"Glamorous\nToolkit\nBook\"\n\"Lepiter\" -> \"Markdown\"\n\"Lepiter\" -> \"Glamorous\nToolkit\"\n\"Sean\nDeNigris\" -> \"Computer\"\n\"Slug\" -> \"Where\nPages\nLive\"\n\"Links\" -> \"Slug\"\n\"Links\" -> \"Links\"\n\"Links\" -> \"Slug\"\n\"Slug\" -> \"Where\nPages\nLive\"\n\"Sitemap\" -> \"XML\"\n\"Sitemap\" -> \"crawl\"\n\"Sitemap\" -> \"Sitemap\nProtocol\"\n\"Sitemap\" -> \"Wiki\nSitemap\"\n\"Sitemap\" -> \"Sitemap\nProtocol\"\n\"Sitemap\" -> \"Types\nof\nSitemap\"\n\"Sitemap\" -> \"Federation\nDirectory\"\n\"Sitemap\" -> \"Convert\na\nSitemap\nto\na\nDITA\nMap\"\n\"Regular\nExpressions\nin\nPharo\" -> \"Regular\nExpressions\nin\nPharo\"\n\"Convert\na\nSitemap\nto\na\nDITA\nMap\" -> \"Sitemap\"\n\"Convert\na\nSitemap\nto\na\nDITA\nMap\" -> \"Slug\"\n\"Convert\na\nSitemap\nto\na\nDITA\nMap\" -> \"01-story-and-journal\"\n\"Convert\na\nSitemap\nto\na\nDITA\nMap\" -> \"Story\"\n\"Convert\na\nSitemap\nto\na\nDITA\nMap\" -> \"Snippets\"\n\"Convert\na\nSitemap\nto\na\nDITA\nMap\" -> \"LeHtmlFormatPiece\"\n\"Convert\na\nSitemap\nto\na\nDITA\nMap\" -> \"Map\"}",
      "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 8.0.5 (0)\n -->\n<!-- Pages: 1 -->\n<svg width=\"967pt\" height=\"6870pt\"\n viewBox=\"0.00 0.00 966.60 6869.60\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 6865.6)\">\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-6865.6 962.6,-6865.6 962.6,4 -4,4\"/>\n<!-- 2023&#45;12&#45;29 -->\n<g id=\"node1\" class=\"node\">\n<title>2023&#45;12&#45;29</title>\n<text text-anchor=\"middle\" x=\"40.66\" y=\"-2047.4\" font-family=\"Times,serif\" font-size=\"14.00\">2023&#45;12&#45;29</text>\n</g>\n<!-- Journal -->\n<g id=\"node2\" class=\"node\">\n<title>Journal</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-6512.4\" font-family=\"Times,serif\" font-size=\"14.00\">Journal</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Journal -->\n<g id=\"edge1\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Journal</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.67,-2069.22C41.8,-2362.2 44.91,-6212.76 117.32,-6435.6 123.93,-6455.94 137.55,-6475.66 149.78,-6490.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"147.61,-6492.4 156.76,-6497.73 152.93,-6487.85 147.61,-6492.4\"/>\n</g>\n<!-- collect -->\n<g id=\"node3\" class=\"node\">\n<title>collect</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-5152.4\" font-family=\"Times,serif\" font-size=\"14.00\">collect</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;collect -->\n<g id=\"edge2\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;collect</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.74,-2069.52C42.84,-2301.09 55.71,-4703.74 117.32,-5010.6 125.95,-5053.58 146.22,-5100.32 160.04,-5129.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"157.27,-5130.34 164.81,-5137.78 163.55,-5127.26 157.27,-5130.34\"/>\n</g>\n<!-- Action -->\n<g id=\"node4\" class=\"node\">\n<title>Action</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6774.4\" font-family=\"Times,serif\" font-size=\"14.00\">Action</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Action -->\n<g id=\"edge3\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Action</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.63,-2069.18C41.03,-2377.94 34.3,-6652.19 117.32,-6746.6 162.65,-6798.14 251.11,-6793.58 301.05,-6785.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"301.39,-6789.27 310.69,-6784.18 300.25,-6782.36 301.39,-6789.27\"/>\n</g>\n<!-- Wiki\nPage -->\n<g id=\"node5\" class=\"node\">\n<title>Wiki\nPage</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6349.8\" font-family=\"Times,serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6333\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Wiki\nPage -->\n<g id=\"edge4\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Wiki\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.66,-2069.29C41.63,-2363.29 42.66,-6224.7 117.32,-6310.6 162.56,-6362.64 251.44,-6359.23 301.38,-6352.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"301.64,-6355.67 311.01,-6350.72 300.6,-6348.75 301.64,-6355.67\"/>\n</g>\n<!-- contains -->\n<g id=\"node6\" class=\"node\">\n<title>contains</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2675.4\" font-family=\"Times,serif\" font-size=\"14.00\">contains</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;contains -->\n<g id=\"edge5\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;contains</title>\n<path fill=\"none\" stroke=\"black\" d=\"M45.41,-2069.38C63.87,-2156.92 145.09,-2542.14 168.03,-2650.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"164.81,-2651.61 170.3,-2660.67 171.66,-2650.17 164.81,-2651.61\"/>\n</g>\n<!-- Story -->\n<g id=\"node7\" class=\"node\">\n<title>Story</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-5754.4\" font-family=\"Times,serif\" font-size=\"14.00\">Story</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Story -->\n<g id=\"edge6\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Story</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.75,-2069.49C43.06,-2337.74 59.84,-5533.37 117.32,-5608.6 199.24,-5715.82 285.62,-5638.82 408.48,-5694.6 432.51,-5705.51 457.58,-5721.38 476.72,-5734.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"474.41,-5737.94 484.61,-5740.82 478.43,-5732.21 474.41,-5737.94\"/>\n</g>\n<!-- Void&#45;Equivalent -->\n<g id=\"node8\" class=\"node\">\n<title>Void&#45;Equivalent</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2370.4\" font-family=\"Times,serif\" font-size=\"14.00\">Void&#45;Equivalent</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Void&#45;Equivalent -->\n<g id=\"edge7\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Void&#45;Equivalent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.25,-2069.57C41.06,-2119.56 47.06,-2262.2 117.32,-2347.6 117.95,-2348.36 118.59,-2349.09 119.27,-2349.81\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"116.4,-2352.83 126.24,-2356.77 121.01,-2347.55 116.4,-2352.83\"/>\n</g>\n<!-- arrange -->\n<g id=\"node9\" class=\"node\">\n<title>arrange</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2316.4\" font-family=\"Times,serif\" font-size=\"14.00\">arrange</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;arrange -->\n<g id=\"edge8\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;arrange</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.49,-2069.42C45.43,-2112.93 58.6,-2225.95 117.32,-2293.6 122.54,-2299.6 129.38,-2304.38 136.5,-2308.14\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"134.72,-2311.63 145.27,-2312.65 137.66,-2305.28 134.72,-2311.63\"/>\n</g>\n<!-- Arrangement -->\n<g id=\"node10\" class=\"node\">\n<title>Arrangement</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5322.4\" font-family=\"Times,serif\" font-size=\"14.00\">Arrangement</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Arrangement -->\n<g id=\"edge9\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Arrangement</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.64,-2069.48C41.39,-2316.22 40.41,-5036.33 117.32,-5183.6 151.44,-5248.91 230.27,-5288.75 283.77,-5309.25\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"282.19,-5312.77 292.79,-5312.97 284.63,-5306.2 282.19,-5312.77\"/>\n</g>\n<!-- Content -->\n<g id=\"node11\" class=\"node\">\n<title>Content</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-5466.4\" font-family=\"Times,serif\" font-size=\"14.00\">Content</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Content -->\n<g id=\"edge10\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Content</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.72,-2069.29C42.67,-2334.49 55.24,-5493.71 117.32,-5563.6 160.05,-5611.69 638.2,-5640.83 694.44,-5609.6 736.86,-5586.04 761.18,-5532.1 772.68,-5498.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"776.31,-5499.92 776.1,-5489.32 769.66,-5497.74 776.31,-5499.92\"/>\n</g>\n<!-- Frame -->\n<g id=\"node12\" class=\"node\">\n<title>Frame</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-5800.4\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Frame -->\n<g id=\"edge11\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Frame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.74,-2069.3C42.93,-2338.02 58.48,-5576.88 117.32,-5652.6 199.33,-5758.11 300.01,-5649.56 408.48,-5727.6 433.11,-5745.32 422.84,-5764.34 444.48,-5785.6 506.44,-5846.44 528.62,-5862.55 612.34,-5885.6 647.52,-5895.28 660.5,-5899 694.44,-5885.6 722.03,-5874.7 745.99,-5850.39 761.65,-5831.23\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"765.02,-5833.61 768.45,-5823.59 759.52,-5829.28 765.02,-5833.61\"/>\n</g>\n<!-- put -->\n<g id=\"node13\" class=\"node\">\n<title>put</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-5560.4\" font-family=\"Times,serif\" font-size=\"14.00\">put</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;put -->\n<g id=\"edge12\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;put</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.72,-2069.55C42.56,-2335.34 53.82,-5465.19 117.32,-5532.6 164.99,-5583.2 384.79,-5573.56 472.82,-5567.49\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.88,-5570.92 482.61,-5566.72 472.38,-5563.94 472.88,-5570.92\"/>\n</g>\n<!-- Frame\nType -->\n<g id=\"node14\" class=\"node\">\n<title>Frame\nType</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5425.8\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5409\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Frame\nType -->\n<g id=\"edge13\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Frame\nType</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.62,-2069.46C41.12,-2318.85 37.37,-5098 117.32,-5247.6 201.11,-5404.35 275.02,-5423.99 444.48,-5477.6 500.36,-5495.27 520.66,-5495.89 576.34,-5477.6 593.72,-5471.89 610.39,-5460.52 623.68,-5449.51\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"625.63,-5451.59 630.89,-5442.39 621.04,-5446.3 625.63,-5451.59\"/>\n</g>\n<!-- Fluid\nNot\nPermanent -->\n<g id=\"node15\" class=\"node\">\n<title>Fluid\nNot\nPermanent</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2414.2\" font-family=\"Times,serif\" font-size=\"14.00\">Fluid</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2397.4\" font-family=\"Times,serif\" font-size=\"14.00\">Not</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2380.6\" font-family=\"Times,serif\" font-size=\"14.00\">Permanent</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Fluid\nNot\nPermanent -->\n<g id=\"edge14\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Fluid\nNot\nPermanent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M49.86,-2069.33C61.61,-2092.92 85.4,-2134.42 117.32,-2158.6 160.75,-2191.49 196.79,-2158.75 232.83,-2199.6 282.2,-2255.56 224.19,-2303.8 268.83,-2363.6 274.76,-2371.55 282.88,-2378.05 291.46,-2383.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.42,-2386.71 299.87,-2388.47 292.8,-2380.58 289.42,-2386.71\"/>\n</g>\n<!-- Unique\nItem\nIdentifiers -->\n<g id=\"node16\" class=\"node\">\n<title>Unique\nItem\nIdentifiers</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2098.2\" font-family=\"Times,serif\" font-size=\"14.00\">Unique</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2081.4\" font-family=\"Times,serif\" font-size=\"14.00\">Item</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2064.6\" font-family=\"Times,serif\" font-size=\"14.00\">Identifiers</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Unique\nItem\nIdentifiers -->\n<g id=\"edge15\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Unique\nItem\nIdentifiers</title>\n<path fill=\"none\" stroke=\"black\" d=\"M81.03,-2061.71C95.9,-2065.53 112.94,-2069.9 128.34,-2073.86\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"127.13,-2077.42 137.69,-2076.51 128.87,-2070.64 127.13,-2077.42\"/>\n</g>\n<!-- Type -->\n<g id=\"node17\" class=\"node\">\n<title>Type</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-4040.4\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Type -->\n<g id=\"edge16\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Type</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.5,-2069.54C47.95,-2185.59 79.38,-2842.24 117.32,-3376.6 134.94,-3624.6 162.67,-3923.83 171.37,-4016.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"167.96,-4016.18 172.38,-4025.81 174.93,-4015.52 167.96,-4016.18\"/>\n</g>\n<!-- Item\nDistribution -->\n<g id=\"node18\" class=\"node\">\n<title>Item\nDistribution</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2021.8\" font-family=\"Times,serif\" font-size=\"14.00\">Item</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2005\" font-family=\"Times,serif\" font-size=\"14.00\">Distribution</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Item\nDistribution -->\n<g id=\"edge17\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Item\nDistribution</title>\n<path fill=\"none\" stroke=\"black\" d=\"M81.03,-2041.49C94.15,-2038.12 108.97,-2034.32 122.86,-2030.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"123.43,-2033.96 132.25,-2028.08 121.69,-2027.18 123.43,-2033.96\"/>\n</g>\n<!-- Example\nof\na\nVoid&#45;Equivalent\nType -->\n<g id=\"node19\" class=\"node\">\n<title>Example\nof\na\nVoid&#45;Equivalent\nType</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1962\" font-family=\"Times,serif\" font-size=\"14.00\">Example</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1945.2\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1928.4\" font-family=\"Times,serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1911.6\" font-family=\"Times,serif\" font-size=\"14.00\">Void&#45;Equivalent</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1894.8\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Example\nof\na\nVoid&#45;Equivalent\nType -->\n<g id=\"edge18\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Example\nof\na\nVoid&#45;Equivalent\nType</title>\n<path fill=\"none\" stroke=\"black\" d=\"M61.49,-2033.78C75.69,-2021.02 95.62,-2003.11 114.77,-1985.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"116.81,-1988.87 121.91,-1979.59 112.13,-1983.67 116.81,-1988.87\"/>\n</g>\n<!-- Interpreter -->\n<g id=\"node20\" class=\"node\">\n<title>Interpreter</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1837.4\" font-family=\"Times,serif\" font-size=\"14.00\">Interpreter</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Interpreter -->\n<g id=\"edge19\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Interpreter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M45.71,-2033.69C54.09,-1999.89 76.09,-1925.78 117.32,-1877.6 120.93,-1873.39 125.15,-1869.5 129.64,-1865.96\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131.43,-1868.26 137.5,-1859.58 127.34,-1862.58 131.43,-1868.26\"/>\n</g>\n<!-- Alan\nKay -->\n<g id=\"node21\" class=\"node\">\n<title>Alan\nKay</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1599.8\" font-family=\"Times,serif\" font-size=\"14.00\">Alan</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1583\" font-family=\"Times,serif\" font-size=\"14.00\">Kay</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Alan\nKay -->\n<g id=\"edge20\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Alan\nKay</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.81,-2033.64C46.42,-1990.84 60.95,-1881.48 117.32,-1814.6 154.61,-1770.37 196.37,-1799.51 232.83,-1754.6 270.35,-1708.39 229.76,-1670.51 268.83,-1625.6 277.36,-1615.79 289.7,-1609.07 301.58,-1604.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.45,-1607.58 310.79,-1601.06 300.2,-1600.95 302.45,-1607.58\"/>\n</g>\n<!-- Quildreen\nMotta -->\n<g id=\"node22\" class=\"node\">\n<title>Quildreen\nMotta</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-4792.8\" font-family=\"Times,serif\" font-size=\"14.00\">Quildreen</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-4776\" font-family=\"Times,serif\" font-size=\"14.00\">Motta</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Quildreen\nMotta -->\n<g id=\"edge21\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Quildreen\nMotta</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.62,-2069.33C41.24,-2266.58 39.99,-4052.94 117.32,-4577.6 126.95,-4642.92 149.72,-4716.95 163.31,-4757.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"160.28,-4758.62 166.8,-4766.98 166.91,-4756.38 160.28,-4758.62\"/>\n</g>\n<!-- Structure -->\n<g id=\"node23\" class=\"node\">\n<title>Structure</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-4960.4\" font-family=\"Times,serif\" font-size=\"14.00\">Structure</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Structure -->\n<g id=\"edge22\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.58,-2069.34C40.62,-2303.45 32.47,-4777.77 117.32,-4902.6 177.18,-4990.65 231.19,-4996.6 337.66,-4996.6 337.66,-4996.6 337.66,-4996.6 511.41,-4996.6 591.71,-4996.6 684.52,-4982.43 737.63,-4972.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"738.12,-4976.23 747.34,-4971 736.87,-4969.34 738.12,-4976.23\"/>\n</g>\n<!-- Objects\nas\nPlain\nRecords\nof\nData -->\n<g id=\"node24\" class=\"node\">\n<title>Objects\nas\nPlain\nRecords\nof\nData</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4896.4\" font-family=\"Times,serif\" font-size=\"14.00\">Objects</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4879.6\" font-family=\"Times,serif\" font-size=\"14.00\">as</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4862.8\" font-family=\"Times,serif\" font-size=\"14.00\">Plain</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4846\" font-family=\"Times,serif\" font-size=\"14.00\">Records</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4829.2\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4812.4\" font-family=\"Times,serif\" font-size=\"14.00\">Data</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Objects\nas\nPlain\nRecords\nof\nData -->\n<g id=\"edge23\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Objects\nas\nPlain\nRecords\nof\nData</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.86,-2069.46C44.45,-2305.02 72.9,-4793.24 117.32,-4852.6 195.95,-4957.66 279.91,-4927.85 408.48,-4901.6 429.58,-4897.29 451.73,-4888.4 469.89,-4879.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.08,-4882.64 478.53,-4875.11 468.01,-4876.35 471.08,-4882.64\"/>\n</g>\n<!-- Item -->\n<g id=\"node25\" class=\"node\">\n<title>Item</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6037.4\" font-family=\"Times,serif\" font-size=\"14.00\">Item</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Item -->\n<g id=\"edge24\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Item</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.8,-2069.25C43.99,-2344.04 71.88,-5738.3 117.32,-5940.6 153.32,-6100.82 130.94,-6188.41 268.83,-6277.6 320.94,-6311.31 361.01,-6317.59 408.48,-6277.6 480.57,-6216.87 385.68,-6142.27 444.48,-6068.6 451.76,-6059.49 462.64,-6053.42 473.42,-6049.39\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"474.16,-6052.51 482.61,-6046.12 472.02,-6045.84 474.16,-6052.51\"/>\n</g>\n<!-- The\nFederation -->\n<g id=\"node26\" class=\"node\">\n<title>The\nFederation</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2337.8\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2321\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;The\nFederation -->\n<g id=\"edge25\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;The\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M56.57,-2069.42C70.78,-2085.45 93.49,-2108.71 117.32,-2123.6 163.78,-2152.63 196.07,-2125.99 232.83,-2166.6 275.08,-2213.27 227.87,-2255.79 268.83,-2303.6 274.8,-2310.57 282.7,-2315.98 291.01,-2320.15\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.3,-2323.67 299.86,-2324.51 292.13,-2317.27 289.3,-2323.67\"/>\n</g>\n<!-- Objects\nas\nBehaviour -->\n<g id=\"node27\" class=\"node\">\n<title>Objects\nas\nBehaviour</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4858.2\" font-family=\"Times,serif\" font-size=\"14.00\">Objects</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4841.4\" font-family=\"Times,serif\" font-size=\"14.00\">as</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4824.6\" font-family=\"Times,serif\" font-size=\"14.00\">Behaviour</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Objects\nas\nBehaviour -->\n<g id=\"edge26\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Objects\nas\nBehaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.82,-2069.27C43.99,-2302.37 68.04,-4764.41 117.32,-4818.6 160.33,-4865.88 240.07,-4863.23 290.91,-4855.51\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.32,-4858.82 300.61,-4853.74 290.18,-4851.92 291.32,-4858.82\"/>\n</g>\n<!-- Card -->\n<g id=\"node28\" class=\"node\">\n<title>Card</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2902.4\" font-family=\"Times,serif\" font-size=\"14.00\">Card</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Card -->\n<g id=\"edge27\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Card</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42,-2069.23C44.34,-2183.3 59.86,-2814.03 117.32,-2874.6 164.34,-2924.16 251.45,-2920.54 300.89,-2913.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"301.37,-2916.86 310.72,-2911.88 300.3,-2909.94 301.37,-2916.86\"/>\n</g>\n<!-- Behavior -->\n<g id=\"node29\" class=\"node\">\n<title>Behavior</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-3345.4\" font-family=\"Times,serif\" font-size=\"14.00\">Behavior</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Behavior -->\n<g id=\"edge28\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Behavior</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.95,-2069.59C49.48,-2160.32 80.21,-2576.8 117.32,-2916.6 134.02,-3069.42 159.87,-3251.81 169.9,-3321.04\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"166.58,-3321.5 171.48,-3330.9 173.5,-3320.5 166.58,-3321.5\"/>\n</g>\n<!-- Object -->\n<g id=\"node30\" class=\"node\">\n<title>Object</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-4103.4\" font-family=\"Times,serif\" font-size=\"14.00\">Object</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Object -->\n<g id=\"edge29\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Object</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.03,-2069.54C44.18,-2162.65 57.25,-2590.91 117.32,-2706.6 158.89,-2786.64 189.54,-2798.62 268.83,-2841.6 325.38,-2872.26 366.31,-2831.03 408.48,-2879.6 492.76,-2976.67 360.93,-3068.9 444.48,-3166.6 484.12,-3212.95 537.65,-3157.45 576.34,-3204.6 633.12,-3273.8 649.05,-3933.64 651.88,-4079.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"648.4,-4079 652.09,-4088.93 655.4,-4078.87 648.4,-4079\"/>\n</g>\n<!-- Something -->\n<g id=\"node31\" class=\"node\">\n<title>Something</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-5891.4\" font-family=\"Times,serif\" font-size=\"14.00\">Something</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Something -->\n<g id=\"edge30\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Something</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.71,-2069.22C42.39,-2327.22 51.73,-5337.7 117.32,-5722.6 126.31,-5775.32 148.21,-5833.92 162.02,-5867.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"159.12,-5868.73 166.2,-5876.62 165.58,-5866.04 159.12,-5868.73\"/>\n</g>\n<!-- Full&#45;Duplex -->\n<g id=\"node32\" class=\"node\">\n<title>Full&#45;Duplex</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1705.4\" font-family=\"Times,serif\" font-size=\"14.00\">Full&#45;Duplex</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Full&#45;Duplex -->\n<g id=\"edge31\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Full&#45;Duplex</title>\n<path fill=\"none\" stroke=\"black\" d=\"M43.03,-2033.86C47.31,-1986.86 63.59,-1856.44 117.32,-1764.6 123.81,-1753.52 133.14,-1743.19 142.36,-1734.54\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"144.24,-1737.67 149.37,-1728.4 139.58,-1732.44 144.24,-1737.67\"/>\n</g>\n<!-- negotiate -->\n<g id=\"node33\" class=\"node\">\n<title>negotiate</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-1504.4\" font-family=\"Times,serif\" font-size=\"14.00\">negotiate</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;negotiate -->\n<g id=\"edge32\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;negotiate</title>\n<path fill=\"none\" stroke=\"black\" d=\"M43.48,-2033.97C50.46,-1968.74 77.25,-1741.75 117.32,-1682.6 151.8,-1631.73 186.47,-1646.94 232.83,-1606.6 251.12,-1590.68 247.32,-1576.8 268.83,-1565.6 437.62,-1477.7 505.33,-1539.97 694.44,-1518.6 708.55,-1517.01 723.95,-1515.24 737.79,-1513.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"737.98,-1517.02 747.51,-1512.39 737.18,-1510.07 737.98,-1517.02\"/>\n</g>\n<!-- Get\nInterior\nViews\nof\nExterior\nResources -->\n<g id=\"node34\" class=\"node\">\n<title>Get\nInterior\nViews\nof\nExterior\nResources</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1528.4\" font-family=\"Times,serif\" font-size=\"14.00\">Get</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1511.6\" font-family=\"Times,serif\" font-size=\"14.00\">Interior</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1494.8\" font-family=\"Times,serif\" font-size=\"14.00\">Views</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1478\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1461.2\" font-family=\"Times,serif\" font-size=\"14.00\">Exterior</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1444.4\" font-family=\"Times,serif\" font-size=\"14.00\">Resources</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Get\nInterior\nViews\nof\nExterior\nResources -->\n<g id=\"edge33\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Get\nInterior\nViews\nof\nExterior\nResources</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.83,-2033.65C42.96,-1969.36 51.69,-1745.5 117.32,-1576.6 121.35,-1566.24 126.77,-1555.84 132.66,-1546.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"136.08,-1548.16 138.43,-1537.83 130.15,-1544.45 136.08,-1548.16\"/>\n</g>\n<!-- Telegram -->\n<g id=\"node35\" class=\"node\">\n<title>Telegram</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1346.4\" font-family=\"Times,serif\" font-size=\"14.00\">Telegram</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Telegram -->\n<g id=\"edge34\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Telegram</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.37,-2033.72C40.24,-1941.93 39.5,-1524.31 117.32,-1427.6 120.22,-1424 230.78,-1386.46 294.16,-1365.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.91,-1368.26 303.28,-1361.76 292.68,-1361.63 294.91,-1368.26\"/>\n</g>\n<!-- Ambassador -->\n<g id=\"node36\" class=\"node\">\n<title>Ambassador</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1290.4\" font-family=\"Times,serif\" font-size=\"14.00\">Ambassador</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Ambassador -->\n<g id=\"edge35\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Ambassador</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.52,-2033.61C47.51,-1932.3 74.06,-1435.68 117.32,-1384.6 151.83,-1343.86 191.45,-1385.34 232.83,-1351.6 259.63,-1329.74 239.25,-1300.53 268.83,-1282.6 326.04,-1247.92 405.7,-1261.27 457.41,-1276.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"456.1,-1279.72 466.68,-1279.25 458.11,-1273.02 456.1,-1279.72\"/>\n</g>\n<!-- Negotiation\nof\nMeaning -->\n<g id=\"node37\" class=\"node\">\n<title>Negotiation\nof\nMeaning</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-1416.2\" font-family=\"Times,serif\" font-size=\"14.00\">Negotiation</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-1399.4\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-1382.6\" font-family=\"Times,serif\" font-size=\"14.00\">Meaning</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Negotiation\nof\nMeaning -->\n<g id=\"edge36\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Negotiation\nof\nMeaning</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.43,-2033.75C45.96,-1960.07 62.79,-1680.28 117.32,-1614.6 152.32,-1572.46 187.34,-1602.12 232.83,-1571.6 252.42,-1558.46 248.84,-1545.12 268.83,-1532.6 389.84,-1456.81 443.11,-1490.95 576.34,-1439.6 585.05,-1436.24 594.16,-1432.31 602.92,-1428.31\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"604.03,-1431.19 611.62,-1423.79 601.07,-1424.84 604.03,-1431.19\"/>\n</g>\n<!-- Semantic\nMatchmaker -->\n<g id=\"node38\" class=\"node\">\n<title>Semantic\nMatchmaker</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1307.8\" font-family=\"Times,serif\" font-size=\"14.00\">Semantic</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1291\" font-family=\"Times,serif\" font-size=\"14.00\">Matchmaker</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Semantic\nMatchmaker -->\n<g id=\"edge37\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Semantic\nMatchmaker</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.94,-2033.87C43.69,-1937.94 55.2,-1480.74 117.32,-1356.6 122.03,-1347.2 129.14,-1338.6 136.74,-1331.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"138.4,-1334.52 143.45,-1325.21 133.69,-1329.34 138.4,-1334.52\"/>\n</g>\n<!-- General\nGame\nPlaying -->\n<g id=\"node39\" class=\"node\">\n<title>General\nGame\nPlaying</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1210.2\" font-family=\"Times,serif\" font-size=\"14.00\">General</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1193.4\" font-family=\"Times,serif\" font-size=\"14.00\">Game</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1176.6\" font-family=\"Times,serif\" font-size=\"14.00\">Playing</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;General\nGame\nPlaying -->\n<g id=\"edge38\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;General\nGame\nPlaying</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.41,-2033.65C40.2,-1927.63 38,-1383.17 117.32,-1240.6 121.9,-1232.37 128.78,-1225.23 136.19,-1219.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"138.02,-1221.53 144.02,-1212.79 133.88,-1215.88 138.02,-1221.53\"/>\n</g>\n<!-- Michael\nGenesereth -->\n<g id=\"node40\" class=\"node\">\n<title>Michael\nGenesereth</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1051.8\" font-family=\"Times,serif\" font-size=\"14.00\">Michael</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1035\" font-family=\"Times,serif\" font-size=\"14.00\">Genesereth</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Michael\nGenesereth -->\n<g id=\"edge39\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Michael\nGenesereth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.25,-2033.63C46.01,-1922.82 68.19,-1334.99 117.32,-1273.6 151.09,-1231.41 196.45,-1275.56 232.83,-1235.6 281.31,-1182.34 222.88,-1133.06 268.83,-1077.6 274.32,-1070.97 281.57,-1065.76 289.3,-1061.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.62,-1064.46 298.24,-1057.1 287.7,-1058.1 290.62,-1064.46\"/>\n</g>\n<!-- Strongtalk -->\n<g id=\"node41\" class=\"node\">\n<title>Strongtalk</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1110.4\" font-family=\"Times,serif\" font-size=\"14.00\">Strongtalk</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Strongtalk -->\n<g id=\"edge40\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Strongtalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.33,-2033.61C46.9,-1914.3 74.47,-1239.46 117.32,-1159.6 121.42,-1151.97 127.42,-1145.18 134.01,-1139.34\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"135.97,-1141.45 141.57,-1132.46 131.58,-1136 135.97,-1141.45\"/>\n</g>\n<!-- Type\nSystems\nas\nMacros -->\n<g id=\"node42\" class=\"node\">\n<title>Type\nSystems\nas\nMacros</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1061.6\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1044.8\" font-family=\"Times,serif\" font-size=\"14.00\">Systems</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1028\" font-family=\"Times,serif\" font-size=\"14.00\">as</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-1011.2\" font-family=\"Times,serif\" font-size=\"14.00\">Macros</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Type\nSystems\nas\nMacros -->\n<g id=\"edge41\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Type\nSystems\nas\nMacros</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.23,-2033.8C46.28,-1909.58 72.04,-1174.86 117.32,-1087.6 121.78,-1079.01 128.56,-1071.39 135.9,-1064.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"137.43,-1067.38 143,-1058.36 133.02,-1061.94 137.43,-1067.38\"/>\n</g>\n<!-- Amal\nAhmed -->\n<g id=\"node43\" class=\"node\">\n<title>Amal\nAhmed</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-968.8\" font-family=\"Times,serif\" font-size=\"14.00\">Amal</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-952\" font-family=\"Times,serif\" font-size=\"14.00\">Ahmed</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Amal\nAhmed -->\n<g id=\"edge42\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Amal\nAhmed</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.89,-2033.65C43.74,-1901.68 57.53,-1083.9 117.32,-993.6 122.09,-986.4 129.23,-980.89 136.84,-976.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"138.05,-979.55 145.61,-972.12 135.07,-973.22 138.05,-979.55\"/>\n</g>\n<!-- Name -->\n<g id=\"node44\" class=\"node\">\n<title>Name</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4192.4\" font-family=\"Times,serif\" font-size=\"14.00\">Name</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Name -->\n<g id=\"edge43\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Name</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.86,-2069.42C44.06,-2263.52 64.96,-3979.51 117.32,-4071.6 156.49,-4140.49 249.68,-4174.33 301.43,-4188.33\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.26,-4191.9 310.82,-4191.02 302.01,-4185.12 300.26,-4191.9\"/>\n</g>\n<!-- Extensionality -->\n<g id=\"node45\" class=\"node\">\n<title>Extensionality</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-903.4\" font-family=\"Times,serif\" font-size=\"14.00\">Extensionality</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Extensionality -->\n<g id=\"edge44\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Extensionality</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.79,-2033.95C42.95,-1898.7 52.84,-1029.43 117.32,-934.6 117.89,-933.77 118.48,-932.97 119.11,-932.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"121.07,-935.19 125.81,-925.71 116.19,-930.17 121.07,-935.19\"/>\n</g>\n<!-- Attribution -->\n<g id=\"node46\" class=\"node\">\n<title>Attribution</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-849.4\" font-family=\"Times,serif\" font-size=\"14.00\">Attribution</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Attribution -->\n<g id=\"edge45\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Attribution</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.74,-2033.99C42.45,-1895.19 49.75,-980.31 117.32,-880.6 119.91,-876.79 123.18,-873.5 126.84,-870.67\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"128.42,-873.18 134.97,-864.85 124.66,-867.27 128.42,-873.18\"/>\n</g>\n<!-- Contents\nIs\nIntention\nObscuring -->\n<g id=\"node47\" class=\"node\">\n<title>Contents\nIs\nIntention\nObscuring</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2267.6\" font-family=\"Times,serif\" font-size=\"14.00\">Contents</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2250.8\" font-family=\"Times,serif\" font-size=\"14.00\">Is</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2234\" font-family=\"Times,serif\" font-size=\"14.00\">Intention</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-2217.2\" font-family=\"Times,serif\" font-size=\"14.00\">Obscuring</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Contents\nIs\nIntention\nObscuring -->\n<g id=\"edge46\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Contents\nIs\nIntention\nObscuring</title>\n<path fill=\"none\" stroke=\"black\" d=\"M48.75,-2069.47C60.46,-2097.72 85.73,-2153.71 117.32,-2194.6 121.2,-2199.61 125.58,-2204.55 130.16,-2209.27\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"127.4,-2211.46 136.98,-2215.99 132.32,-2206.47 127.4,-2211.46\"/>\n</g>\n<!-- A\nSoup\nof\nObjects -->\n<g id=\"node48\" class=\"node\">\n<title>A\nSoup\nof\nObjects</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-715.6\" font-family=\"Times,serif\" font-size=\"14.00\">A</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-698.8\" font-family=\"Times,serif\" font-size=\"14.00\">Soup</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-682\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-665.2\" font-family=\"Times,serif\" font-size=\"14.00\">Objects</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;A\nSoup\nof\nObjects -->\n<g id=\"edge47\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;A\nSoup\nof\nObjects</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.58,-2034.01C41.03,-1891.35 40.19,-926.54 117.32,-826.6 150.34,-783.82 188.77,-819.89 232.83,-788.6 254.28,-773.37 249.72,-759.69 268.83,-741.6 278.25,-732.67 289.53,-724.23 300.19,-717.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"301.9,-719.44 308.35,-711.04 298.07,-713.59 301.9,-719.44\"/>\n</g>\n<!-- Collection -->\n<g id=\"node49\" class=\"node\">\n<title>Collection</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-703.4\" font-family=\"Times,serif\" font-size=\"14.00\">Collection</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Collection -->\n<g id=\"edge48\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Collection</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.6,-2033.73C41.23,-1884.44 41.44,-847.44 117.32,-734.6 120.29,-730.19 124.18,-726.48 128.53,-723.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"130.16,-725.88 136.98,-717.77 126.59,-719.86 130.16,-725.88\"/>\n</g>\n<!-- DbSoup -->\n<g id=\"node50\" class=\"node\">\n<title>DbSoup</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-757.4\" font-family=\"Times,serif\" font-size=\"14.00\">DbSoup</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;DbSoup -->\n<g id=\"edge49\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;DbSoup</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.71,-2033.66C42.28,-1888.11 48.6,-903.52 117.32,-793.6 121.61,-786.74 127.93,-781.22 134.81,-776.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"136.36,-779.41 143.41,-771.5 132.97,-773.29 136.36,-779.41\"/>\n</g>\n<!-- Objective&#45;Lepiter -->\n<g id=\"node51\" class=\"node\">\n<title>Objective&#45;Lepiter</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-593.4\" font-family=\"Times,serif\" font-size=\"14.00\">Objective&#45;Lepiter</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Objective&#45;Lepiter -->\n<g id=\"edge50\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Objective&#45;Lepiter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.79,-2033.69C43.02,-1879.48 53.99,-778.31 117.32,-647.6 122.01,-637.94 129.48,-629.35 137.5,-622.13\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"139.16,-624.47 144.6,-615.38 134.68,-619.09 139.16,-624.47\"/>\n</g>\n<!-- Sean\nDeNigris -->\n<g id=\"node52\" class=\"node\">\n<title>Sean\nDeNigris</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-622.8\" font-family=\"Times,serif\" font-size=\"14.00\">Sean</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-606\" font-family=\"Times,serif\" font-size=\"14.00\">DeNigris</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Sean\nDeNigris -->\n<g id=\"edge51\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Sean\nDeNigris</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.05,-2034.03C45.58,-1878.15 72.87,-736.05 117.32,-680.6 122.99,-673.53 232.49,-645.05 294.94,-629.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.44,-632.5 304.28,-626.66 293.73,-625.71 295.44,-632.5\"/>\n</g>\n<!-- UID&#45;Based\nLinks -->\n<g id=\"node53\" class=\"node\">\n<title>UID&#45;Based\nLinks</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-524.8\" font-family=\"Times,serif\" font-size=\"14.00\">UID&#45;Based</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-508\" font-family=\"Times,serif\" font-size=\"14.00\">Links</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;UID&#45;Based\nLinks -->\n<g id=\"edge52\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;UID&#45;Based\nLinks</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.96,-2033.65C44.8,-1869.25 67.81,-629.46 117.32,-570.6 128.34,-557.5 226.74,-539.03 288.25,-528.59\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.63,-531.91 297.91,-526.8 287.47,-525.01 288.63,-531.91\"/>\n</g>\n<!-- Lepiter -->\n<g id=\"node54\" class=\"node\">\n<title>Lepiter</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-492.4\" font-family=\"Times,serif\" font-size=\"14.00\">Lepiter</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Lepiter -->\n<g id=\"edge53\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Lepiter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.8,-2033.63C43.25,-1860.69 56.54,-496.6 117.32,-438.6 167.8,-390.43 384.35,-454.97 472.18,-483.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"470.88,-487.47 481.48,-487.3 473.09,-480.83 470.88,-487.47\"/>\n</g>\n<!-- Represent\nArbitrary\nDomain\nObjects -->\n<g id=\"node55\" class=\"node\">\n<title>Represent\nArbitrary\nDomain\nObjects</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-506.6\" font-family=\"Times,serif\" font-size=\"14.00\">Represent</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-489.8\" font-family=\"Times,serif\" font-size=\"14.00\">Arbitrary</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-473\" font-family=\"Times,serif\" font-size=\"14.00\">Domain</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-456.2\" font-family=\"Times,serif\" font-size=\"14.00\">Objects</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Represent\nArbitrary\nDomain\nObjects -->\n<g id=\"edge54\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Represent\nArbitrary\nDomain\nObjects</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.74,-2033.84C42.51,-1873.6 50.49,-679.75 117.32,-537.6 120.84,-530.12 125.98,-523.21 131.74,-517.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"133.6,-520.14 138.3,-510.64 128.7,-515.14 133.6,-520.14\"/>\n</g>\n<!-- Slug -->\n<g id=\"node56\" class=\"node\">\n<title>Slug</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6677.4\" font-family=\"Times,serif\" font-size=\"14.00\">Slug</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Slug -->\n<g id=\"edge55\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Slug</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.6,-2069.22C40.67,-2366.2 29.93,-6319.86 117.32,-6543.6 154.15,-6637.87 176.48,-6672.2 268.83,-6713.6 336.53,-6743.95 424.92,-6717.41 473.5,-6697.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"474.64,-6700.79 482.53,-6693.72 471.95,-6694.32 474.64,-6700.79\"/>\n</g>\n<!-- Sitemap -->\n<g id=\"node57\" class=\"node\">\n<title>Sitemap</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-4417.4\" font-family=\"Times,serif\" font-size=\"14.00\">Sitemap</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Sitemap -->\n<g id=\"edge56\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Sitemap</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.9,-2069.44C44.36,-2247.56 65.94,-3708.48 117.32,-4141.6 128.38,-4234.78 154.09,-4343.16 166.76,-4393.38\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"163.54,-4393.92 169.39,-4402.75 170.32,-4392.19 163.54,-4393.92\"/>\n</g>\n<!-- Metadata\nAware\nNaming -->\n<g id=\"node58\" class=\"node\">\n<title>Metadata\nAware\nNaming</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-375.2\" font-family=\"Times,serif\" font-size=\"14.00\">Metadata</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-358.4\" font-family=\"Times,serif\" font-size=\"14.00\">Aware</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-341.6\" font-family=\"Times,serif\" font-size=\"14.00\">Naming</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Metadata\nAware\nNaming -->\n<g id=\"edge57\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Metadata\nAware\nNaming</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.57,-2033.86C40.82,-1865.8 37.6,-557.2 117.32,-405.6 121.04,-398.53 126.5,-392.29 132.58,-386.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"134.5,-389.07 140.16,-380.11 130.15,-383.58 134.5,-389.07\"/>\n</g>\n<!-- Database\nSlug -->\n<g id=\"node59\" class=\"node\">\n<title>Database\nSlug</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-298.8\" font-family=\"Times,serif\" font-size=\"14.00\">Database</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-282\" font-family=\"Times,serif\" font-size=\"14.00\">Slug</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Database\nSlug -->\n<g id=\"edge58\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Database\nSlug</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.94,-2033.66C44.76,-1855.01 69.13,-400.76 117.32,-324.6 121.04,-318.73 126.31,-313.94 132.16,-310.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"133.71,-312.63 140.69,-304.66 130.26,-306.54 133.71,-312.63\"/>\n</g>\n<!-- Links -->\n<g id=\"node60\" class=\"node\">\n<title>Links</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-6386.4\" font-family=\"Times,serif\" font-size=\"14.00\">Links</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Links -->\n<g id=\"edge59\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Links</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.74,-2069.41C43.03,-2365.49 61.03,-6254.33 117.32,-6354.6 122.27,-6363.42 130.38,-6370.39 138.93,-6375.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"136.82,-6379.15 147.26,-6380.96 140.23,-6373.03 136.82,-6379.15\"/>\n</g>\n<!-- FileReference -->\n<g id=\"node61\" class=\"node\">\n<title>FileReference</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-233.4\" font-family=\"Times,serif\" font-size=\"14.00\">FileReference</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;FileReference -->\n<g id=\"edge60\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;FileReference</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.89,-2033.88C44.29,-1852.75 65.79,-342.49 117.32,-264.6 118.21,-263.26 119.18,-261.99 120.22,-260.78\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"122,-263.98 127.02,-254.65 117.28,-258.82 122,-263.98\"/>\n</g>\n<!-- ZnUrl -->\n<g id=\"node62\" class=\"node\">\n<title>ZnUrl</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-179.4\" font-family=\"Times,serif\" font-size=\"14.00\">ZnUrl</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;ZnUrl -->\n<g id=\"edge61\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;ZnUrl</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.87,-2033.63C44.09,-1848.36 64.25,-290.92 117.32,-210.6 122.33,-203.03 130.07,-197.53 138.25,-193.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"139.36,-196.46 147.28,-189.42 136.7,-189.99 139.36,-196.46\"/>\n</g>\n<!-- FileLocator -->\n<g id=\"node63\" class=\"node\">\n<title>FileLocator</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-125.4\" font-family=\"Times,serif\" font-size=\"14.00\">FileLocator</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;FileLocator -->\n<g id=\"edge62\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;FileLocator</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.85,-2033.7C43.87,-1845.74 62.69,-239.39 117.32,-156.6 119.59,-153.17 122.42,-150.16 125.6,-147.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"127.35,-149.89 133.68,-141.39 123.44,-144.09 127.35,-149.89\"/>\n</g>\n<!-- Regular\nExpressions\nin\nPharo -->\n<g id=\"node64\" class=\"node\">\n<title>Regular\nExpressions\nin\nPharo</title>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-58.6\" font-family=\"Times,serif\" font-size=\"14.00\">Regular</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-41.8\" font-family=\"Times,serif\" font-size=\"14.00\">Expressions</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-25\" font-family=\"Times,serif\" font-size=\"14.00\">in</text>\n<text text-anchor=\"middle\" x=\"175.08\" y=\"-8.2\" font-family=\"Times,serif\" font-size=\"14.00\">Pharo</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Regular\nExpressions\nin\nPharo -->\n<g id=\"edge63\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Regular\nExpressions\nin\nPharo</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.63,-2033.69C41.44,-1848.88 42.05,-292 117.32,-102.6 119.96,-95.96 123.59,-89.54 127.74,-83.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"130.98,-86 134.15,-75.89 125.37,-81.81 130.98,-86\"/>\n</g>\n<!-- Convert\na\nSitemap\nto\na\nDITA\nMap -->\n<g id=\"node65\" class=\"node\">\n<title>Convert\na\nSitemap\nto\na\nDITA\nMap</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4705.8\" font-family=\"Times,serif\" font-size=\"14.00\">Convert</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4689\" font-family=\"Times,serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4672.2\" font-family=\"Times,serif\" font-size=\"14.00\">Sitemap</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4655.4\" font-family=\"Times,serif\" font-size=\"14.00\">to</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4638.6\" font-family=\"Times,serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4621.8\" font-family=\"Times,serif\" font-size=\"14.00\">DITA</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4605\" font-family=\"Times,serif\" font-size=\"14.00\">Map</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Convert\na\nSitemap\nto\na\nDITA\nMap -->\n<g id=\"edge64\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Convert\na\nSitemap\nto\na\nDITA\nMap</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.84,-2069.27C43.97,-2281.36 65.89,-4333.21 117.32,-4448.6 155.56,-4534.39 246.57,-4602.58 298.87,-4636.38\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.54,-4639.68 306.86,-4642.1 300.3,-4633.78 296.54,-4639.68\"/>\n</g>\n<!-- Journal&#45;&gt;Action -->\n<g id=\"edge66\" class=\"edge\">\n<title>Journal&#45;&gt;Action</title>\n<path fill=\"none\" stroke=\"black\" d=\"M183.83,-6534.41C197.3,-6569.47 227.57,-6647.66 268.83,-6704.6 281.89,-6722.62 300.39,-6739.77 314.92,-6753.25\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"312.25,-6755.48 321.95,-6759.75 317.03,-6750.36 312.25,-6755.48\"/>\n</g>\n<!-- Journal&#45;&gt;Wiki\nPage -->\n<g id=\"edge65\" class=\"edge\">\n<title>Journal&#45;&gt;Wiki\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M186.7,-6498.68C203.71,-6475.82 238.25,-6436.62 268.83,-6404.6 280.03,-6392.87 292.57,-6380.31 303.85,-6369.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"305.83,-6372.72 310.81,-6363.37 301.08,-6367.58 305.83,-6372.72\"/>\n</g>\n<!-- Neighborhood -->\n<g id=\"node66\" class=\"node\">\n<title>Neighborhood</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6512.4\" font-family=\"Times,serif\" font-size=\"14.00\">Neighborhood</text>\n</g>\n<!-- Journal&#45;&gt;Neighborhood -->\n<g id=\"edge67\" class=\"edge\">\n<title>Journal&#45;&gt;Neighborhood</title>\n<path fill=\"none\" stroke=\"black\" d=\"M203.49,-6516.6C224.28,-6516.6 253.63,-6516.6 279.57,-6516.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"279.45,-6520.1 289.45,-6516.6 279.45,-6513.1 279.45,-6520.1\"/>\n</g>\n<!-- Names\nof\nThings -->\n<g id=\"node67\" class=\"node\">\n<title>Names\nof\nThings</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6464.2\" font-family=\"Times,serif\" font-size=\"14.00\">Names</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6447.4\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6430.6\" font-family=\"Times,serif\" font-size=\"14.00\">Things</text>\n</g>\n<!-- Journal&#45;&gt;Names\nof\nThings -->\n<g id=\"edge68\" class=\"edge\">\n<title>Journal&#45;&gt;Names\nof\nThings</title>\n<path fill=\"none\" stroke=\"black\" d=\"M203.49,-6505.57C230.47,-6494.72 271.83,-6478.08 301.49,-6466.15\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.48,-6469.12 310.45,-6462.14 299.87,-6462.63 302.48,-6469.12\"/>\n</g>\n<!-- Events\nand\nCausal\nDependence -->\n<g id=\"node68\" class=\"node\">\n<title>Events\nand\nCausal\nDependence</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6687.6\" font-family=\"Times,serif\" font-size=\"14.00\">Events</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6670.8\" font-family=\"Times,serif\" font-size=\"14.00\">and</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6654\" font-family=\"Times,serif\" font-size=\"14.00\">Causal</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6637.2\" font-family=\"Times,serif\" font-size=\"14.00\">Dependence</text>\n</g>\n<!-- Journal&#45;&gt;Events\nand\nCausal\nDependence -->\n<g id=\"edge69\" class=\"edge\">\n<title>Journal&#45;&gt;Events\nand\nCausal\nDependence</title>\n<path fill=\"none\" stroke=\"black\" d=\"M190.02,-6534.55C207.23,-6556.09 238.03,-6592.67 268.83,-6619.6 274.67,-6624.71 281.08,-6629.74 287.57,-6634.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"285.25,-6637.85 295.43,-6640.8 289.31,-6632.15 285.25,-6637.85\"/>\n</g>\n<!-- Journal\nto\nGraph -->\n<g id=\"node69\" class=\"node\">\n<title>Journal\nto\nGraph</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6594.2\" font-family=\"Times,serif\" font-size=\"14.00\">Journal</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6577.4\" font-family=\"Times,serif\" font-size=\"14.00\">to</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6560.6\" font-family=\"Times,serif\" font-size=\"14.00\">Graph</text>\n</g>\n<!-- Journal&#45;&gt;Journal\nto\nGraph -->\n<g id=\"edge70\" class=\"edge\">\n<title>Journal&#45;&gt;Journal\nto\nGraph</title>\n<path fill=\"none\" stroke=\"black\" d=\"M203.49,-6527.63C230.06,-6538.32 270.6,-6554.62 300.15,-6566.51\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"298.53,-6570.03 309.11,-6570.52 301.14,-6563.54 298.53,-6570.03\"/>\n</g>\n<!-- collect&#45;&gt;Arrangement -->\n<g id=\"edge72\" class=\"edge\">\n<title>collect&#45;&gt;Arrangement</title>\n<path fill=\"none\" stroke=\"black\" d=\"M189.84,-5174.48C210.4,-5205.98 248.86,-5268.53 268.83,-5285.6 277.41,-5292.93 287.95,-5298.94 298.18,-5304.02\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.29,-5307.48 306.82,-5308.63 299.3,-5301.16 296.29,-5307.48\"/>\n</g>\n<!-- collect&#45;&gt;Frame\nType -->\n<g id=\"edge74\" class=\"edge\">\n<title>collect&#45;&gt;Frame\nType</title>\n<path fill=\"none\" stroke=\"black\" d=\"M201.83,-5154.68C212.34,-5157.54 224.05,-5162.87 232.83,-5170.6 257.33,-5192.16 240.66,-5218.12 268.83,-5234.6 322.41,-5265.94 357.47,-5269.95 408.48,-5234.6 445.94,-5208.64 407.03,-5164.56 444.48,-5138.6 492.65,-5105.22 529.69,-5103.13 576.34,-5138.6 616.18,-5168.89 640.62,-5323.1 649.06,-5390.39\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"645.69,-5390.65 650.36,-5400.15 652.63,-5389.81 645.69,-5390.65\"/>\n</g>\n<!-- collect&#45;&gt;Structure -->\n<g id=\"edge75\" class=\"edge\">\n<title>collect&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M201.71,-5141.5C219.93,-5131.29 245.25,-5118.18 268.83,-5109.6 451.34,-5043.23 512.58,-5078.75 694.44,-5010.6 710.77,-5004.48 727.9,-4995.88 742.57,-4987.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"743.84,-4990.51 750.83,-4982.55 740.4,-4984.42 743.84,-4990.51\"/>\n</g>\n<!-- Inversion -->\n<g id=\"node70\" class=\"node\">\n<title>Inversion</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-5170.4\" font-family=\"Times,serif\" font-size=\"14.00\">Inversion</text>\n</g>\n<!-- collect&#45;&gt;Inversion -->\n<g id=\"edge71\" class=\"edge\">\n<title>collect&#45;&gt;Inversion</title>\n<path fill=\"none\" stroke=\"black\" d=\"M202.03,-5146.9C220.39,-5140.57 245.75,-5132.89 268.83,-5129.6 330.28,-5120.84 347.77,-5116.68 408.48,-5129.6 429.13,-5133.99 450.67,-5142.92 468.52,-5151.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"466.8,-5155.23 477.3,-5156.63 469.97,-5148.99 466.8,-5155.23\"/>\n</g>\n<!-- James\nForm -->\n<g id=\"node71\" class=\"node\">\n<title>James\nForm</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5217.8\" font-family=\"Times,serif\" font-size=\"14.00\">James</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5201\" font-family=\"Times,serif\" font-size=\"14.00\">Form</text>\n</g>\n<!-- collect&#45;&gt;James\nForm -->\n<g id=\"edge73\" class=\"edge\">\n<title>collect&#45;&gt;James\nForm</title>\n<path fill=\"none\" stroke=\"black\" d=\"M202.04,-5165.76C229.01,-5175.27 271.42,-5190.23 301.63,-5200.89\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.16,-5204.44 310.76,-5204.46 302.49,-5197.84 300.16,-5204.44\"/>\n</g>\n<!-- Square&#45;Bracket -->\n<g id=\"node72\" class=\"node\">\n<title>Square&#45;Bracket</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-5330.4\" font-family=\"Times,serif\" font-size=\"14.00\">Square&#45;Bracket</text>\n</g>\n<!-- collect&#45;&gt;Square&#45;Bracket -->\n<g id=\"edge76\" class=\"edge\">\n<title>collect&#45;&gt;Square&#45;Bracket</title>\n<path fill=\"none\" stroke=\"black\" d=\"M201.92,-5142.06C220.03,-5132.73 245.13,-5121.49 268.83,-5116.6 286.72,-5112.91 570.24,-5114.86 576.34,-5117.6 669.68,-5159.47 658.28,-5216.08 730.44,-5288.6 737.44,-5295.64 745.27,-5303 752.63,-5309.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"749.61,-5311.59 759.38,-5315.69 754.3,-5306.4 749.61,-5311.59\"/>\n</g>\n<!-- Event -->\n<g id=\"node73\" class=\"node\">\n<title>Event</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4607.4\" font-family=\"Times,serif\" font-size=\"14.00\">Event</text>\n</g>\n<!-- collect&#45;&gt;Event -->\n<g id=\"edge77\" class=\"edge\">\n<title>collect&#45;&gt;Event</title>\n<path fill=\"none\" stroke=\"black\" d=\"M190.91,-5138.86C208.03,-5119.29 237.83,-5087.89 268.83,-5067.6 392.69,-4986.52 453.87,-5022.76 576.34,-4939.6 730.83,-4834.7 723.92,-4755.56 869.5,-4638.6 872.28,-4636.37 875.25,-4634.18 878.29,-4632.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"880.05,-4634.44 886.47,-4626.02 876.2,-4628.6 880.05,-4634.44\"/>\n</g>\n<!-- Loop -->\n<g id=\"node74\" class=\"node\">\n<title>Loop</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5152.4\" font-family=\"Times,serif\" font-size=\"14.00\">Loop</text>\n</g>\n<!-- collect&#45;&gt;Loop -->\n<g id=\"edge78\" class=\"edge\">\n<title>collect&#45;&gt;Loop</title>\n<path fill=\"none\" stroke=\"black\" d=\"M202.04,-5156.6C228.77,-5156.6 270.68,-5156.6 300.83,-5156.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.76,-5160.1 310.76,-5156.6 300.76,-5153.1 300.76,-5160.1\"/>\n</g>\n<!-- Action&#45;&gt;Journal -->\n<g id=\"edge82\" class=\"edge\">\n<title>Action&#45;&gt;Journal</title>\n<path fill=\"none\" stroke=\"black\" d=\"M311.84,-6766.24C297.84,-6755.38 280.98,-6739.37 268.83,-6722.6 227.29,-6665.27 196.89,-6586.4 183.56,-6544.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"186.69,-6543.92 180.4,-6535.4 180,-6545.99 186.69,-6543.92\"/>\n</g>\n<!-- record -->\n<g id=\"node75\" class=\"node\">\n<title>record</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6839.4\" font-family=\"Times,serif\" font-size=\"14.00\">record</text>\n</g>\n<!-- Action&#45;&gt;record -->\n<g id=\"edge79\" class=\"edge\">\n<title>Action&#45;&gt;record</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.44,-6788.47C394.31,-6799.53 441.3,-6817.52 473.7,-6829.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.07,-6833.43 482.66,-6833.74 474.58,-6826.9 472.07,-6833.43\"/>\n</g>\n<!-- Types -->\n<g id=\"node76\" class=\"node\">\n<title>Types</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6785.4\" font-family=\"Times,serif\" font-size=\"14.00\">Types</text>\n</g>\n<!-- Action&#45;&gt;Types -->\n<g id=\"edge80\" class=\"edge\">\n<title>Action&#45;&gt;Types</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.44,-6780.27C394.06,-6782.13 440.49,-6785.13 472.85,-6787.23\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.46,-6790.78 482.66,-6787.93 472.91,-6783.79 472.46,-6790.78\"/>\n</g>\n<!-- Ownership -->\n<g id=\"node77\" class=\"node\">\n<title>Ownership</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6731.4\" font-family=\"Times,serif\" font-size=\"14.00\">Ownership</text>\n</g>\n<!-- Action&#45;&gt;Ownership -->\n<g id=\"edge81\" class=\"edge\">\n<title>Action&#45;&gt;Ownership</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.44,-6772.07C390.74,-6765.66 429.96,-6755.73 461.08,-6747.84\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"461.88,-6751 470.71,-6745.15 460.16,-6744.21 461.88,-6751\"/>\n</g>\n<!-- Wiki\nPage&#45;&gt;Journal -->\n<g id=\"edge93\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Journal</title>\n<path fill=\"none\" stroke=\"black\" d=\"M323.18,-6366.31C309.08,-6382 287.16,-6403.4 268.83,-6422.6 247.02,-6445.44 223.19,-6471.94 205.15,-6491.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"203.14,-6488.2 198.79,-6497.86 208.22,-6493.02 203.14,-6488.2\"/>\n</g>\n<!-- Wiki\nPage&#45;&gt;Story -->\n<g id=\"edge89\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Story</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.48,-6327.15C380.58,-6314.89 398.57,-6297.43 408.48,-6277.6 461.26,-6172.08 421.95,-6130.41 444.48,-6014.6 460.78,-5930.85 487.69,-5833.59 501.17,-5786.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"504.73,-5788.02 504.15,-5777.44 498,-5786.08 504.73,-5788.02\"/>\n</g>\n<!-- Wiki\nPage&#45;&gt;Item -->\n<g id=\"edge92\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Item</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.52,-6338.91C380.44,-6333.68 398.22,-6324.85 408.48,-6310.6 472.02,-6222.35 377.63,-6154.36 444.48,-6068.6 451.65,-6059.41 462.5,-6053.32 473.3,-6049.29\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"474.04,-6052.41 482.5,-6046.03 471.91,-6045.74 474.04,-6052.41\"/>\n</g>\n<!-- Federated\nWiki\nPage -->\n<g id=\"node78\" class=\"node\">\n<title>Federated\nWiki\nPage</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6347.2\" font-family=\"Times,serif\" font-size=\"14.00\">Federated</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6330.4\" font-family=\"Times,serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6313.6\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Federated\nWiki\nPage -->\n<g id=\"edge83\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Federated\nWiki\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.44,-6343.93C391.57,-6342.24 432.55,-6339.58 464.11,-6337.54\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"464.09,-6340.98 473.85,-6336.84 463.64,-6333.99 464.09,-6340.98\"/>\n</g>\n<!-- Fedwiki\nPage -->\n<g id=\"node79\" class=\"node\">\n<title>Fedwiki\nPage</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6270.8\" font-family=\"Times,serif\" font-size=\"14.00\">Fedwiki</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6254\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Fedwiki\nPage -->\n<g id=\"edge84\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Fedwiki\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.49,-6333.49C386.7,-6323.55 417.52,-6309.13 444.48,-6296.6 452.65,-6292.81 461.4,-6288.75 469.75,-6284.89\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.05,-6287.68 478.66,-6280.31 468.12,-6281.33 471.05,-6287.68\"/>\n</g>\n<!-- Hypertext -->\n<g id=\"node80\" class=\"node\">\n<title>Hypertext</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6205.4\" font-family=\"Times,serif\" font-size=\"14.00\">Hypertext</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Hypertext -->\n<g id=\"edge85\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Hypertext</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.38,-6337.15C379.52,-6331.45 396.55,-6322.74 408.48,-6310.6 434.12,-6284.51 417.87,-6261.69 444.48,-6236.6 450.28,-6231.13 457.35,-6226.69 464.66,-6223.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"465.91,-6225.96 473.68,-6218.76 463.12,-6219.54 465.91,-6225.96\"/>\n</g>\n<!-- Lineup -->\n<g id=\"node81\" class=\"node\">\n<title>Lineup</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6151.4\" font-family=\"Times,serif\" font-size=\"14.00\">Lineup</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Lineup -->\n<g id=\"edge86\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Lineup</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.57,-6338.17C380.12,-6332.75 397.51,-6323.97 408.48,-6310.6 445.98,-6264.92 405.28,-6226.82 444.48,-6182.6 451.89,-6174.24 462.3,-6168.41 472.62,-6164.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"473.46,-6167.44 481.79,-6160.89 471.19,-6160.81 473.46,-6167.44\"/>\n</g>\n<!-- Web\nPage -->\n<g id=\"node82\" class=\"node\">\n<title>Web\nPage</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6102.8\" font-family=\"Times,serif\" font-size=\"14.00\">Web</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6086\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Web\nPage -->\n<g id=\"edge87\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Web\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.62,-6338.61C380.38,-6333.3 397.97,-6324.5 408.48,-6310.6 458.24,-6244.85 393.5,-6193.4 444.48,-6128.6 451.81,-6119.28 462.71,-6112.74 473.49,-6108.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"474.5,-6111.19 482.67,-6104.44 472.08,-6104.62 474.5,-6111.19\"/>\n</g>\n<!-- Snippet -->\n<g id=\"node83\" class=\"node\">\n<title>Snippet</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6585.4\" font-family=\"Times,serif\" font-size=\"14.00\">Snippet</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Snippet -->\n<g id=\"edge88\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Snippet</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.62,-6352.59C380.38,-6357.9 397.97,-6366.7 408.48,-6380.6 458.24,-6446.35 392.25,-6498.8 444.48,-6562.6 451.26,-6570.87 460.99,-6576.65 470.87,-6580.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"469.51,-6584.24 480.11,-6584.24 471.82,-6577.63 469.51,-6584.24\"/>\n</g>\n<!-- combine -->\n<g id=\"node84\" class=\"node\">\n<title>combine</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6531.4\" font-family=\"Times,serif\" font-size=\"14.00\">combine</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;combine -->\n<g id=\"edge90\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;combine</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.57,-6353.03C380.12,-6358.45 397.51,-6367.23 408.48,-6380.6 445.98,-6426.28 405.28,-6464.38 444.48,-6508.6 450.9,-6515.83 459.56,-6521.18 468.46,-6525.1\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"466.92,-6528.64 477.51,-6528.96 469.43,-6522.11 466.92,-6528.64\"/>\n</g>\n<!-- Where\nPages\nLive -->\n<g id=\"node85\" class=\"node\">\n<title>Where\nPages\nLive</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-6671.2\" font-family=\"Times,serif\" font-size=\"14.00\">Where</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-6654.4\" font-family=\"Times,serif\" font-size=\"14.00\">Pages</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-6637.6\" font-family=\"Times,serif\" font-size=\"14.00\">Live</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Where\nPages\nLive -->\n<g id=\"edge91\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Where\nPages\nLive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.54,-6353.45C380.46,-6359.34 398.24,-6368.94 408.48,-6383.6 468.5,-6469.5 372.11,-6540.82 444.48,-6616.6 467.57,-6640.78 562.51,-6651.79 615.75,-6656.15\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"615.2,-6659.69 625.44,-6656.98 615.74,-6652.71 615.2,-6659.69\"/>\n</g>\n<!-- Wiki\nPage\nJSON -->\n<g id=\"node86\" class=\"node\">\n<title>Wiki\nPage\nJSON</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6483.2\" font-family=\"Times,serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6466.4\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6449.6\" font-family=\"Times,serif\" font-size=\"14.00\">JSON</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Wiki\nPage\nJSON -->\n<g id=\"edge94\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Wiki\nPage\nJSON</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.36,-6355.06C379.16,-6360.97 395.86,-6369.58 408.48,-6380.6 429.66,-6399.09 423.87,-6413.49 444.48,-6432.6 453.19,-6440.67 463.91,-6447.81 474.11,-6453.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.18,-6457.13 482.64,-6458.84 475.53,-6450.98 472.18,-6457.13\"/>\n</g>\n<!-- JSON\nSchema -->\n<g id=\"node87\" class=\"node\">\n<title>JSON\nSchema</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6406.8\" font-family=\"Times,serif\" font-size=\"14.00\">JSON</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-6390\" font-family=\"Times,serif\" font-size=\"14.00\">Schema</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;JSON\nSchema -->\n<g id=\"edge95\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;JSON\nSchema</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.44,-6354.26C393.27,-6363.6 437.93,-6378.6 470.14,-6389.41\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"468.95,-6393.04 479.54,-6392.91 471.17,-6386.4 468.95,-6393.04\"/>\n</g>\n<!-- Concepts -->\n<g id=\"node88\" class=\"node\">\n<title>Concepts</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2648.4\" font-family=\"Times,serif\" font-size=\"14.00\">Concepts</text>\n</g>\n<!-- contains&#45;&gt;Concepts -->\n<g id=\"edge96\" class=\"edge\">\n<title>contains&#45;&gt;Concepts</title>\n<path fill=\"none\" stroke=\"black\" d=\"M206.09,-2674.58C230.82,-2670.45 266.24,-2664.53 294.09,-2659.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.46,-2663.2 303.75,-2658.1 293.31,-2656.3 294.46,-2663.2\"/>\n</g>\n<!-- Network -->\n<g id=\"node89\" class=\"node\">\n<title>Network</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2594.4\" font-family=\"Times,serif\" font-size=\"14.00\">Network</text>\n</g>\n<!-- contains&#45;&gt;Network -->\n<g id=\"edge97\" class=\"edge\">\n<title>contains&#45;&gt;Network</title>\n<path fill=\"none\" stroke=\"black\" d=\"M204.29,-2661.65C222.36,-2650.54 246.52,-2636.39 268.83,-2625.6 277.56,-2621.38 287.13,-2617.29 296.29,-2613.64\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"297.34,-2616.6 305.39,-2609.7 294.8,-2610.07 297.34,-2616.6\"/>\n</g>\n<!-- Relation -->\n<g id=\"node90\" class=\"node\">\n<title>Relation</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2810.4\" font-family=\"Times,serif\" font-size=\"14.00\">Relation</text>\n</g>\n<!-- contains&#45;&gt;Relation -->\n<g id=\"edge98\" class=\"edge\">\n<title>contains&#45;&gt;Relation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M187.2,-2697.27C202.82,-2720.81 233.36,-2762.41 268.83,-2787.6 277.37,-2793.67 287.47,-2798.61 297.25,-2802.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.67,-2806.05 306.26,-2806.25 298.11,-2799.49 295.67,-2806.05\"/>\n</g>\n<!-- Matrix -->\n<g id=\"node91\" class=\"node\">\n<title>Matrix</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2756.4\" font-family=\"Times,serif\" font-size=\"14.00\">Matrix</text>\n</g>\n<!-- contains&#45;&gt;Matrix -->\n<g id=\"edge99\" class=\"edge\">\n<title>contains&#45;&gt;Matrix</title>\n<path fill=\"none\" stroke=\"black\" d=\"M204.29,-2697.55C222.36,-2708.66 246.52,-2722.81 268.83,-2733.6 279.23,-2738.63 290.82,-2743.46 301.49,-2747.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.17,-2751.23 310.76,-2751.51 302.66,-2744.69 300.17,-2751.23\"/>\n</g>\n<!-- relation -->\n<g id=\"node92\" class=\"node\">\n<title>relation</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2702.4\" font-family=\"Times,serif\" font-size=\"14.00\">relation</text>\n</g>\n<!-- contains&#45;&gt;relation -->\n<g id=\"edge100\" class=\"edge\">\n<title>contains&#45;&gt;relation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M206.09,-2684.62C232.19,-2688.98 270.19,-2695.33 298.65,-2700.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"297.99,-2703.69 308.43,-2701.88 299.14,-2696.78 297.99,-2703.69\"/>\n</g>\n<!-- Distinction -->\n<g id=\"node93\" class=\"node\">\n<title>Distinction</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5708.4\" font-family=\"Times,serif\" font-size=\"14.00\">Distinction</text>\n</g>\n<!-- Story&#45;&gt;Distinction -->\n<g id=\"edge101\" class=\"edge\">\n<title>Story&#45;&gt;Distinction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.27,-5750.16C555.93,-5744.07 581.69,-5735.67 604.11,-5728.35\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"605.05,-5731.4 613.47,-5724.97 602.88,-5724.75 605.05,-5731.4\"/>\n</g>\n<!-- Life -->\n<g id=\"node94\" class=\"node\">\n<title>Life</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5800.4\" font-family=\"Times,serif\" font-size=\"14.00\">Life</text>\n</g>\n<!-- Story&#45;&gt;Life -->\n<g id=\"edge102\" class=\"edge\">\n<title>Story&#45;&gt;Life</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.27,-5767.04C559.43,-5774.27 591.58,-5784.76 616.28,-5792.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"615.1,-5796.44 625.69,-5796.22 617.27,-5789.79 615.1,-5796.44\"/>\n</g>\n<!-- Storycraft -->\n<g id=\"node95\" class=\"node\">\n<title>Storycraft</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5854.4\" font-family=\"Times,serif\" font-size=\"14.00\">Storycraft</text>\n</g>\n<!-- Story&#45;&gt;Storycraft -->\n<g id=\"edge103\" class=\"edge\">\n<title>Story&#45;&gt;Storycraft</title>\n<path fill=\"none\" stroke=\"black\" d=\"M535.72,-5776.53C556.07,-5791.45 585.92,-5813.15 612.34,-5831.6 613.8,-5832.62 615.3,-5833.66 616.82,-5834.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"614.36,-5837.95 624.59,-5840.71 618.31,-5832.18 614.36,-5837.95\"/>\n</g>\n<!-- Choice -->\n<g id=\"node96\" class=\"node\">\n<title>Choice</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5530.4\" font-family=\"Times,serif\" font-size=\"14.00\">Choice</text>\n</g>\n<!-- Story&#45;&gt;Choice -->\n<g id=\"edge104\" class=\"edge\">\n<title>Story&#45;&gt;Choice</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.31,-5760.94C574.05,-5763.18 642.56,-5763.29 694.44,-5739.6 783.66,-5698.86 860.02,-5606.96 894.09,-5561.33\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"897.41,-5563.73 900.51,-5553.6 891.77,-5559.58 897.41,-5563.73\"/>\n</g>\n<!-- Arrangement&#45;&gt;collect -->\n<g id=\"edge107\" class=\"edge\">\n<title>Arrangement&#45;&gt;collect</title>\n<path fill=\"none\" stroke=\"black\" d=\"M294,-5319.46C285.12,-5315.28 276.24,-5309.93 268.83,-5303.6 248.48,-5286.21 208.95,-5221.61 188.7,-5183.89\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"191.5,-5182.71 183.76,-5175.48 185.3,-5185.96 191.5,-5182.71\"/>\n</g>\n<!-- Arrangement&#45;&gt;put -->\n<g id=\"edge109\" class=\"edge\">\n<title>Arrangement&#45;&gt;put</title>\n<path fill=\"none\" stroke=\"black\" d=\"M349.33,-5344.49C366.69,-5376.01 405.01,-5442.99 444.48,-5494.6 456.41,-5510.19 471.19,-5526.34 483.64,-5539.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"480.54,-5541.05 490.04,-5545.73 485.54,-5536.14 480.54,-5541.05\"/>\n</g>\n<!-- Arrangement&#45;&gt;Structure -->\n<g id=\"edge112\" class=\"edge\">\n<title>Arrangement&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M361.98,-5308.75C382.56,-5292.87 414.38,-5269.73 444.48,-5253.6 500.01,-5223.84 524.96,-5238.05 576.34,-5201.6 660.74,-5141.71 732.78,-5039.82 764.17,-4991.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"767.61,-4993.64 770.06,-4983.34 761.72,-4989.86 767.61,-4993.64\"/>\n</g>\n<!-- Arrangement&#45;&gt;Inversion -->\n<g id=\"edge106\" class=\"edge\">\n<title>Arrangement&#45;&gt;Inversion</title>\n<path fill=\"none\" stroke=\"black\" d=\"M383.27,-5312.31C392.46,-5307.76 401.48,-5301.94 408.48,-5294.6 437.66,-5264.03 415.66,-5237.5 444.48,-5206.6 450.58,-5200.07 458.29,-5194.69 466.26,-5190.34\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"467.6,-5193.09 475.01,-5185.53 464.5,-5186.82 467.6,-5193.09\"/>\n</g>\n<!-- Arrangement&#45;&gt;Square&#45;Bracket -->\n<g id=\"edge105\" class=\"edge\">\n<title>Arrangement&#45;&gt;Square&#45;Bracket</title>\n<path fill=\"none\" stroke=\"black\" d=\"M363.1,-5344.48C383.4,-5358.77 414.18,-5377.66 444.48,-5385.6 501.17,-5400.46 520.74,-5404.13 576.34,-5385.6 595.31,-5379.28 593.86,-5366.25 612.34,-5358.6 646.22,-5344.58 686.83,-5338.51 719.71,-5335.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"719.81,-5339.41 729.55,-5335.25 719.34,-5332.43 719.81,-5339.41\"/>\n</g>\n<!-- disperse -->\n<g id=\"node97\" class=\"node\">\n<title>disperse</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-5354.4\" font-family=\"Times,serif\" font-size=\"14.00\">disperse</text>\n</g>\n<!-- Arrangement&#45;&gt;disperse -->\n<g id=\"edge108\" class=\"edge\">\n<title>Arrangement&#45;&gt;disperse</title>\n<path fill=\"none\" stroke=\"black\" d=\"M383.37,-5334.84C409.76,-5339.82 443.15,-5346.11 468.94,-5350.97\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"468,-5354.54 478.48,-5352.96 469.3,-5347.67 468,-5354.54\"/>\n</g>\n<!-- Context -->\n<g id=\"node98\" class=\"node\">\n<title>Context</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-5398.4\" font-family=\"Times,serif\" font-size=\"14.00\">Context</text>\n</g>\n<!-- Arrangement&#45;&gt;Context -->\n<g id=\"edge110\" class=\"edge\">\n<title>Arrangement&#45;&gt;Context</title>\n<path fill=\"none\" stroke=\"black\" d=\"M356.11,-5344.58C375.18,-5363.94 408.61,-5393.6 444.48,-5405.6 500.06,-5424.2 518.74,-5416.41 576.34,-5405.6 593.21,-5402.43 595.47,-5394.77 612.34,-5391.6 648.2,-5384.87 658.02,-5389.29 694.44,-5391.6 709.73,-5392.57 726.46,-5394.49 741.09,-5396.46\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"740.43,-5400.04 750.82,-5397.96 741.4,-5393.11 740.43,-5400.04\"/>\n</g>\n<!-- Frames -->\n<g id=\"node99\" class=\"node\">\n<title>Frames</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-5300.4\" font-family=\"Times,serif\" font-size=\"14.00\">Frames</text>\n</g>\n<!-- Arrangement&#45;&gt;Frames -->\n<g id=\"edge111\" class=\"edge\">\n<title>Arrangement&#45;&gt;Frames</title>\n<path fill=\"none\" stroke=\"black\" d=\"M383.37,-5320.93C410.62,-5317.4 445.34,-5312.9 471.43,-5309.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.57,-5312.9 481.04,-5308.15 470.67,-5305.96 471.57,-5312.9\"/>\n</g>\n<!-- Iconic\nArithmetic -->\n<g id=\"node100\" class=\"node\">\n<title>Iconic\nArithmetic</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-5262.8\" font-family=\"Times,serif\" font-size=\"14.00\">Iconic</text>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-5246\" font-family=\"Times,serif\" font-size=\"14.00\">Arithmetic</text>\n</g>\n<!-- Arrangement&#45;&gt;Iconic\nArithmetic -->\n<g id=\"edge113\" class=\"edge\">\n<title>Arrangement&#45;&gt;Iconic\nArithmetic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.7,-5308.79C390.06,-5297.69 417.99,-5284.28 444.48,-5277.6 544.65,-5252.36 666.68,-5252.9 732.79,-5255.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"732.54,-5259.2 742.68,-5256.16 732.85,-5252.21 732.54,-5259.2\"/>\n</g>\n<!-- About\nFrame\nPlugin -->\n<g id=\"node101\" class=\"node\">\n<title>About\nFrame\nPlugin</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5893.2\" font-family=\"Times,serif\" font-size=\"14.00\">About</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5876.4\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5859.6\" font-family=\"Times,serif\" font-size=\"14.00\">Plugin</text>\n</g>\n<!-- Frame&#45;&gt;About\nFrame\nPlugin -->\n<g id=\"edge114\" class=\"edge\">\n<title>Frame&#45;&gt;About\nFrame\nPlugin</title>\n<path fill=\"none\" stroke=\"black\" d=\"M808.67,-5819.62C828.54,-5831.22 856.24,-5847.41 878.12,-5860.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"876.01,-5863.59 886.41,-5865.62 879.54,-5857.55 876.01,-5863.59\"/>\n</g>\n<!-- About\nFrame\nIntegrations -->\n<g id=\"node102\" class=\"node\">\n<title>About\nFrame\nIntegrations</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5817.2\" font-family=\"Times,serif\" font-size=\"14.00\">About</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5800.4\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5783.6\" font-family=\"Times,serif\" font-size=\"14.00\">Integrations</text>\n</g>\n<!-- Frame&#45;&gt;About\nFrame\nIntegrations -->\n<g id=\"edge115\" class=\"edge\">\n<title>Frame&#45;&gt;About\nFrame\nIntegrations</title>\n<path fill=\"none\" stroke=\"black\" d=\"M808.67,-5804.6C823.89,-5804.6 843.71,-5804.6 861.98,-5804.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"861.81,-5808.1 871.81,-5804.6 861.81,-5801.1 861.81,-5808.1\"/>\n</g>\n<!-- Key\nFrame -->\n<g id=\"node103\" class=\"node\">\n<title>Key\nFrame</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5740.8\" font-family=\"Times,serif\" font-size=\"14.00\">Key</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5724\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n</g>\n<!-- Frame&#45;&gt;Key\nFrame -->\n<g id=\"edge116\" class=\"edge\">\n<title>Frame&#45;&gt;Key\nFrame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M808.67,-5791.17C828.45,-5780.83 856,-5766.43 877.83,-5755.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"879.17,-5757.74 886.41,-5750.01 875.92,-5751.54 879.17,-5757.74\"/>\n</g>\n<!-- put&#45;&gt;Content -->\n<g id=\"edge120\" class=\"edge\">\n<title>put&#45;&gt;Content</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.19,-5554.85C549.72,-5549.4 564.58,-5541.84 576.34,-5532.6 595.94,-5517.2 590.38,-5501.4 612.34,-5489.6 652.44,-5468.06 705.57,-5465.6 741.39,-5467.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"740.74,-5470.56 750.91,-5467.59 741.11,-5463.57 740.74,-5470.56\"/>\n</g>\n<!-- put&#45;&gt;Frame -->\n<g id=\"edge121\" class=\"edge\">\n<title>put&#45;&gt;Frame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.12,-5577.73C574.53,-5597.64 644.88,-5638.21 694.44,-5685.6 723.57,-5713.47 749.68,-5752.21 765.41,-5777.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"762.75,-5779.19 770.92,-5785.94 768.75,-5775.57 762.75,-5779.19\"/>\n</g>\n<!-- put&#45;&gt;put -->\n<g id=\"edge119\" class=\"edge\">\n<title>put&#45;&gt;put</title>\n<path fill=\"none\" stroke=\"black\" d=\"M484.71,-5582.38C480.34,-5591.91 488.91,-5600.6 510.41,-5600.6 523.18,-5600.6 531.38,-5597.54 535.03,-5593.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"538.59,-5593.68 536.11,-5583.38 531.62,-5592.98 538.59,-5593.68\"/>\n</g>\n<!-- put&#45;&gt;Frame\nType -->\n<g id=\"edge122\" class=\"edge\">\n<title>put&#45;&gt;Frame\nType</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.31,-5548.43C550.33,-5542.3 565.58,-5534.52 576.34,-5523.6 602.56,-5496.97 589.8,-5477.41 612.34,-5447.6 614.4,-5444.87 616.7,-5442.21 619.13,-5439.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"620.86,-5442.9 625.69,-5433.47 616.03,-5437.83 620.86,-5442.9\"/>\n</g>\n<!-- Lambda\nCalculus -->\n<g id=\"node104\" class=\"node\">\n<title>Lambda\nCalculus</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5523.8\" font-family=\"Times,serif\" font-size=\"14.00\">Lambda</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5507\" font-family=\"Times,serif\" font-size=\"14.00\">Calculus</text>\n</g>\n<!-- put&#45;&gt;Lambda\nCalculus -->\n<g id=\"edge117\" class=\"edge\">\n<title>put&#45;&gt;Lambda\nCalculus</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.27,-5556.35C557.83,-5549.78 587.01,-5540.47 610.84,-5532.86\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"611.56,-5535.99 620.03,-5529.61 609.44,-5529.32 611.56,-5535.99\"/>\n</g>\n<!-- Lingdong\nHuang -->\n<g id=\"node105\" class=\"node\">\n<title>Lingdong\nHuang</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5583.8\" font-family=\"Times,serif\" font-size=\"14.00\">Lingdong</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-5567\" font-family=\"Times,serif\" font-size=\"14.00\">Huang</text>\n</g>\n<!-- put&#45;&gt;Lingdong\nHuang -->\n<g id=\"edge118\" class=\"edge\">\n<title>put&#45;&gt;Lingdong\nHuang</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.27,-5567.35C556.89,-5569.44 584.36,-5572.36 607.54,-5574.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"606.87,-5578.38 617.19,-5575.96 607.61,-5571.42 606.87,-5578.38\"/>\n</g>\n<!-- Frame\nType&#45;&gt;collect -->\n<g id=\"edge126\" class=\"edge\">\n<title>Frame\nType&#45;&gt;collect</title>\n<path fill=\"none\" stroke=\"black\" d=\"M649.27,-5400.92C641.04,-5343.74 616.52,-5187.15 576.34,-5156.6 529.69,-5121.13 492.65,-5123.22 444.48,-5156.6 407.03,-5182.56 445.94,-5226.64 408.48,-5252.6 357.47,-5287.95 322.41,-5283.94 268.83,-5252.6 240.66,-5236.12 257.33,-5210.16 232.83,-5188.6 226.79,-5183.29 219.37,-5179.11 211.91,-5175.62\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"213.4,-5172.02 202.83,-5171.26 210.62,-5178.44 213.4,-5172.02\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Arrangement -->\n<g id=\"edge125\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Arrangement</title>\n<path fill=\"none\" stroke=\"black\" d=\"M626.62,-5436.84C612.34,-5444.41 593.94,-5452.74 576.34,-5456.6 519.09,-5469.14 497.35,-5481.88 444.48,-5456.6 400.11,-5435.38 368.52,-5385.2 352.25,-5353.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"355.11,-5352.65 347.51,-5345.27 348.84,-5355.78 355.11,-5352.65\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Content -->\n<g id=\"edge128\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Content</title>\n<path fill=\"none\" stroke=\"black\" d=\"M680.31,-5431.63C698.05,-5438.5 721.89,-5447.73 741.92,-5455.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"740.4,-5459.04 750.99,-5459.38 742.93,-5452.51 740.4,-5459.04\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Frame -->\n<g id=\"edge129\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Frame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M668.51,-5442.28C676.96,-5455.39 687.39,-5472.94 694.44,-5489.6 737.33,-5591 764.93,-5719.75 775.77,-5776.06\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"772.47,-5776.46 777.77,-5785.64 779.35,-5775.16 772.47,-5776.46\"/>\n</g>\n<!-- Frame\nType&#45;&gt;put -->\n<g id=\"edge130\" class=\"edge\">\n<title>Frame\nType&#45;&gt;put</title>\n<path fill=\"none\" stroke=\"black\" d=\"M635.35,-5442.05C627.63,-5449.07 618.8,-5457.06 612.34,-5465.6 589.8,-5495.41 602.56,-5514.97 576.34,-5541.6 568.27,-5549.79 557.68,-5556.22 547.39,-5560.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"546.44,-5557.68 538.31,-5564.48 548.91,-5564.23 546.44,-5557.68\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Structure -->\n<g id=\"edge123\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M660.07,-5401.08C680.42,-5327.61 749.67,-5077.6 773.13,-4992.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"776.7,-4994.11 776,-4983.54 769.96,-4992.24 776.7,-4994.11\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Square&#45;Bracket -->\n<g id=\"edge124\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Square&#45;Bracket</title>\n<path fill=\"none\" stroke=\"black\" d=\"M680.31,-5403.78C699.34,-5390.71 725.39,-5372.8 746.22,-5358.49\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"747.82,-5360.94 754.08,-5352.39 743.86,-5355.17 747.82,-5360.94\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Context -->\n<g id=\"edge131\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Context</title>\n<path fill=\"none\" stroke=\"black\" d=\"M680.31,-5417.71C697.89,-5415.07 721.45,-5411.53 741.36,-5408.54\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"741.62,-5411.9 750.99,-5406.95 740.58,-5404.97 741.62,-5411.9\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Iconic\nArithmetic -->\n<g id=\"edge127\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Iconic\nArithmetic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M666.35,-5400.91C680.39,-5377.34 705.01,-5338.13 730.44,-5307.6 736.34,-5300.51 743.15,-5293.35 749.83,-5286.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"751.76,-5289.8 756.54,-5280.34 746.91,-5284.76 751.76,-5289.8\"/>\n</g>\n<!-- fluid -->\n<g id=\"node106\" class=\"node\">\n<title>fluid</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2973.4\" font-family=\"Times,serif\" font-size=\"14.00\">fluid</text>\n</g>\n<!-- Fluid\nNot\nPermanent&#45;&gt;fluid -->\n<g id=\"edge132\" class=\"edge\">\n<title>Fluid\nNot\nPermanent&#45;&gt;fluid</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.28,-2413.57C388.54,-2419.45 400.99,-2427.87 408.48,-2439.6 469.75,-2535.54 378.01,-2858.18 444.48,-2950.6 451.34,-2960.14 462.22,-2966.32 473.13,-2970.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.87,-2973.91 482.46,-2973.53 473.95,-2967.22 471.87,-2973.91\"/>\n</g>\n<!-- permanent -->\n<g id=\"node107\" class=\"node\">\n<title>permanent</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-3081.4\" font-family=\"Times,serif\" font-size=\"14.00\">permanent</text>\n</g>\n<!-- Fluid\nNot\nPermanent&#45;&gt;permanent -->\n<g id=\"edge133\" class=\"edge\">\n<title>Fluid\nNot\nPermanent&#45;&gt;permanent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.35,-2413.52C388.63,-2419.4 401.06,-2427.82 408.48,-2439.6 481.93,-2556.18 364.72,-2946.25 444.48,-3058.6 449.15,-3065.17 455.72,-3070.15 462.91,-3073.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"461.41,-3077.52 471.98,-3078.34 464.23,-3071.11 461.41,-3077.52\"/>\n</g>\n<!-- Intent -->\n<g id=\"node108\" class=\"node\">\n<title>Intent</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-3027.4\" font-family=\"Times,serif\" font-size=\"14.00\">Intent</text>\n</g>\n<!-- Fluid\nNot\nPermanent&#45;&gt;Intent -->\n<g id=\"edge134\" class=\"edge\">\n<title>Fluid\nNot\nPermanent&#45;&gt;Intent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.32,-2413.54C388.59,-2419.42 401.03,-2427.84 408.48,-2439.6 475.84,-2545.86 371.37,-2902.22 444.48,-3004.6 451.31,-3014.16 462.18,-3020.35 473.09,-3024.35\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.84,-3027.94 482.43,-3027.55 473.91,-3021.25 471.84,-3027.94\"/>\n</g>\n<!-- Intention -->\n<g id=\"node109\" class=\"node\">\n<title>Intention</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-3135.4\" font-family=\"Times,serif\" font-size=\"14.00\">Intention</text>\n</g>\n<!-- Fluid\nNot\nPermanent&#45;&gt;Intention -->\n<g id=\"edge135\" class=\"edge\">\n<title>Fluid\nNot\nPermanent&#45;&gt;Intention</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.38,-2413.5C388.66,-2419.37 401.09,-2427.8 408.48,-2439.6 488.02,-2566.5 358.06,-2990.28 444.48,-3112.6 450.06,-3120.5 458.4,-3126.09 467.26,-3130.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"465.78,-3133.61 476.37,-3133.87 468.25,-3127.06 465.78,-3133.61\"/>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;Fluid\nNot\nPermanent -->\n<g id=\"edge137\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;Fluid\nNot\nPermanent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M200.96,-2114.54C212.35,-2129.24 225.01,-2147.91 232.83,-2166.6 267.16,-2248.72 216.86,-2291.34 268.83,-2363.6 274.68,-2371.74 282.84,-2378.33 291.5,-2383.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.56,-2387.08 300.01,-2388.81 292.92,-2380.94 289.56,-2387.08\"/>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;The\nFederation -->\n<g id=\"edge136\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;The\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.6,-2106.31C219.66,-2112.53 227.42,-2120.03 232.83,-2128.6 275.19,-2195.77 218.82,-2241.92 268.83,-2303.6 274.67,-2310.8 282.58,-2316.32 290.96,-2320.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.35,-2324.09 299.92,-2324.9 292.17,-2317.68 289.35,-2324.09\"/>\n</g>\n<!-- Permanent\nWeb -->\n<g id=\"node110\" class=\"node\">\n<title>Permanent\nWeb</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2093.8\" font-family=\"Times,serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2077\" font-family=\"Times,serif\" font-size=\"14.00\">Web</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;Permanent\nWeb -->\n<g id=\"edge138\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;Permanent\nWeb</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.54,-2086.48C234.6,-2087.05 264.95,-2087.8 290.1,-2088.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.79,-2091.94 299.88,-2088.69 289.97,-2084.94 289.79,-2091.94\"/>\n</g>\n<!-- Dead\nWiki -->\n<g id=\"node111\" class=\"node\">\n<title>Dead\nWiki</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2033.8\" font-family=\"Times,serif\" font-size=\"14.00\">Dead</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2017\" font-family=\"Times,serif\" font-size=\"14.00\">Wiki</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;Dead\nWiki -->\n<g id=\"edge139\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;Dead\nWiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.54,-2073.31C238.27,-2064.04 274.8,-2051.38 301.66,-2042.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.5,-2045.14 310.81,-2038.56 300.21,-2038.53 302.5,-2045.14\"/>\n</g>\n<!-- The\nLong\nNow -->\n<g id=\"node112\" class=\"node\">\n<title>The\nLong\nNow</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1974.2\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1957.4\" font-family=\"Times,serif\" font-size=\"14.00\">Long</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1940.6\" font-family=\"Times,serif\" font-size=\"14.00\">Now</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;The\nLong\nNow -->\n<g id=\"edge140\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;The\nLong\nNow</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.69,-2064.44C219.03,-2059.36 226.46,-2053.64 232.83,-2047.6 252.18,-2029.25 248.71,-2017.1 268.83,-1999.6 278.71,-1991.01 290.84,-1983.52 302.16,-1977.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"303.47,-1980.27 310.82,-1972.63 300.31,-1974.02 303.47,-1980.27\"/>\n</g>\n<!-- Mediawiki\nTransport -->\n<g id=\"node113\" class=\"node\">\n<title>Mediawiki\nTransport</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1897.8\" font-family=\"Times,serif\" font-size=\"14.00\">Mediawiki</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1881\" font-family=\"Times,serif\" font-size=\"14.00\">Transport</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;Mediawiki\nTransport -->\n<g id=\"edge141\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;Mediawiki\nTransport</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.72,-2067.27C219.58,-2061.84 227.23,-2055.26 232.83,-2047.6 266.71,-2001.29 230.94,-1966.7 268.83,-1923.6 274.76,-1916.85 282.5,-1911.56 290.63,-1907.43\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.94,-1910.23 299.65,-1902.95 289.09,-1903.84 291.94,-1910.23\"/>\n</g>\n<!-- LiveCode -->\n<g id=\"node114\" class=\"node\">\n<title>LiveCode</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1832.4\" font-family=\"Times,serif\" font-size=\"14.00\">LiveCode</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;LiveCode -->\n<g id=\"edge142\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;LiveCode</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.63,-2068.02C219.68,-2062.5 227.44,-2055.7 232.83,-2047.6 278.98,-1978.22 215.46,-1927.6 268.83,-1863.6 275.1,-1856.08 283.75,-1850.64 292.79,-1846.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"293.92,-1849.66 302.08,-1842.9 291.48,-1843.1 293.92,-1849.66\"/>\n</g>\n<!-- Transporters -->\n<g id=\"node115\" class=\"node\">\n<title>Transporters</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1778.4\" font-family=\"Times,serif\" font-size=\"14.00\">Transporters</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;Transporters -->\n<g id=\"edge143\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;Transporters</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.58,-2068.38C219.74,-2062.83 227.55,-2055.91 232.83,-2047.6 290.15,-1957.27 202.1,-1893.22 268.83,-1809.6 273.35,-1803.94 279.22,-1799.46 285.63,-1795.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"286.74,-1798.79 294.3,-1791.37 283.76,-1792.46 286.74,-1798.79\"/>\n</g>\n<!-- UUID -->\n<g id=\"node116\" class=\"node\">\n<title>UUID</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2272.4\" font-family=\"Times,serif\" font-size=\"14.00\">UUID</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;UUID -->\n<g id=\"edge144\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;UUID</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.68,-2107.1C219.54,-2113.22 227.2,-2120.47 232.83,-2128.6 264.78,-2174.72 230.87,-2208.28 268.83,-2249.6 277.49,-2259.03 289.86,-2265.21 301.72,-2269.24\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.33,-2272.78 310.92,-2272.26 302.32,-2266.07 300.33,-2272.78\"/>\n</g>\n<!-- node.js -->\n<g id=\"node117\" class=\"node\">\n<title>node.js</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2218.4\" font-family=\"Times,serif\" font-size=\"14.00\">node.js</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;node.js -->\n<g id=\"edge145\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;node.js</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.73,-2108.89C219.24,-2114.77 226.72,-2121.46 232.83,-2128.6 254.8,-2154.29 243.54,-2173.16 268.83,-2195.6 277.78,-2203.54 289.33,-2209.28 300.41,-2213.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"299.2,-2216.98 309.79,-2216.79 301.39,-2210.33 299.2,-2216.98\"/>\n</g>\n<!-- Universally\nunique\nidentifier -->\n<g id=\"node118\" class=\"node\">\n<title>Universally\nunique\nidentifier</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2170.2\" font-family=\"Times,serif\" font-size=\"14.00\">Universally</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2153.4\" font-family=\"Times,serif\" font-size=\"14.00\">unique</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2136.6\" font-family=\"Times,serif\" font-size=\"14.00\">identifier</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;Universally\nunique\nidentifier -->\n<g id=\"edge146\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;Universally\nunique\nidentifier</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.54,-2101.4C233.99,-2111.41 263.35,-2124.49 288.09,-2135.51\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"286.47,-2139.07 297.02,-2139.94 289.32,-2132.67 286.47,-2139.07\"/>\n</g>\n<!-- Type&#45;&gt;Name -->\n<g id=\"edge148\" class=\"edge\">\n<title>Type&#45;&gt;Name</title>\n<path fill=\"none\" stroke=\"black\" d=\"M191.85,-4062.59C203.59,-4076.25 219.76,-4095.68 232.83,-4113.6 250.26,-4137.51 245.95,-4150.84 268.83,-4169.6 278.33,-4177.39 290.34,-4183.13 301.67,-4187.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.19,-4190.79 310.78,-4190.62 302.39,-4184.14 300.19,-4190.79\"/>\n</g>\n<!-- The\nBehavioural\nPoint\nof\nView -->\n<g id=\"node119\" class=\"node\">\n<title>The\nBehavioural\nPoint\nof\nView</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3960\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3943.2\" font-family=\"Times,serif\" font-size=\"14.00\">Behavioural</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3926.4\" font-family=\"Times,serif\" font-size=\"14.00\">Point</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3909.6\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3892.8\" font-family=\"Times,serif\" font-size=\"14.00\">View</text>\n</g>\n<!-- Type&#45;&gt;The\nBehavioural\nPoint\nof\nView -->\n<g id=\"edge147\" class=\"edge\">\n<title>Type&#45;&gt;The\nBehavioural\nPoint\nof\nView</title>\n<path fill=\"none\" stroke=\"black\" d=\"M201.32,-4026.79C224.41,-4010.5 259.22,-3985.94 287.89,-3965.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.42,-3968.21 295.57,-3959.59 285.38,-3962.49 289.42,-3968.21\"/>\n</g>\n<!-- Behaviour -->\n<g id=\"node120\" class=\"node\">\n<title>Behaviour</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4138.4\" font-family=\"Times,serif\" font-size=\"14.00\">Behaviour</text>\n</g>\n<!-- Type&#45;&gt;Behaviour -->\n<g id=\"edge149\" class=\"edge\">\n<title>Type&#45;&gt;Behaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M195.91,-4062.43C213.95,-4077.97 241.8,-4100.36 268.83,-4115.6 275.98,-4119.63 283.85,-4123.34 291.65,-4126.62\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.19,-4130.21 300.77,-4130.7 292.8,-4123.72 290.19,-4130.21\"/>\n</g>\n<!-- Being\nthe\nSame -->\n<g id=\"node121\" class=\"node\">\n<title>Being\nthe\nSame</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4090.2\" font-family=\"Times,serif\" font-size=\"14.00\">Being</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4073.4\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4056.6\" font-family=\"Times,serif\" font-size=\"14.00\">Same</text>\n</g>\n<!-- Type&#45;&gt;Being\nthe\nSame -->\n<g id=\"edge150\" class=\"edge\">\n<title>Type&#45;&gt;Being\nthe\nSame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M202.04,-4049.9C228.89,-4055.39 271.05,-4064 301.23,-4070.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.26,-4073.74 310.76,-4072.31 301.66,-4066.88 300.26,-4073.74\"/>\n</g>\n<!-- JavaScript -->\n<g id=\"node122\" class=\"node\">\n<title>JavaScript</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4008.4\" font-family=\"Times,serif\" font-size=\"14.00\">JavaScript</text>\n</g>\n<!-- Type&#45;&gt;JavaScript -->\n<g id=\"edge151\" class=\"edge\">\n<title>Type&#45;&gt;JavaScript</title>\n<path fill=\"none\" stroke=\"black\" d=\"M202.04,-4039.46C225.93,-4034.73 261.93,-4027.6 290.83,-4021.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.39,-4025.13 300.52,-4019.76 290.03,-4018.27 291.39,-4025.13\"/>\n</g>\n<!-- Search\nIndex\nDownloads -->\n<g id=\"node123\" class=\"node\">\n<title>Search\nIndex\nDownloads</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1730.2\" font-family=\"Times,serif\" font-size=\"14.00\">Search</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1713.4\" font-family=\"Times,serif\" font-size=\"14.00\">Index</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1696.6\" font-family=\"Times,serif\" font-size=\"14.00\">Downloads</text>\n</g>\n<!-- Item\nDistribution&#45;&gt;Search\nIndex\nDownloads -->\n<g id=\"edge152\" class=\"edge\">\n<title>Item\nDistribution&#45;&gt;Search\nIndex\nDownloads</title>\n<path fill=\"none\" stroke=\"black\" d=\"M216.69,-2002.27C222.9,-1998.34 228.62,-1993.5 232.83,-1987.6 293.39,-1902.63 209.04,-1841.12 268.83,-1755.6 274.17,-1747.96 281.56,-1741.69 289.52,-1736.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.09,-1739.17 298.04,-1731.17 287.62,-1733.09 291.09,-1739.17\"/>\n</g>\n<!-- Mixins -->\n<g id=\"node124\" class=\"node\">\n<title>Mixins</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1648.4\" font-family=\"Times,serif\" font-size=\"14.00\">Mixins</text>\n</g>\n<!-- Interpreter&#45;&gt;Mixins -->\n<g id=\"edge153\" class=\"edge\">\n<title>Interpreter&#45;&gt;Mixins</title>\n<path fill=\"none\" stroke=\"black\" d=\"M202.7,-1823.63C213.35,-1815.28 224.94,-1804.55 232.83,-1792.6 261.87,-1748.61 232.8,-1718.07 268.83,-1679.6 277.29,-1670.56 289.15,-1664.5 300.64,-1660.46\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"301.46,-1663.56 309.99,-1657.28 299.4,-1656.87 301.46,-1663.56\"/>\n</g>\n<!-- Seymour\nPapert -->\n<g id=\"node125\" class=\"node\">\n<title>Seymour\nPapert</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1713.8\" font-family=\"Times,serif\" font-size=\"14.00\">Seymour</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1697\" font-family=\"Times,serif\" font-size=\"14.00\">Papert</text>\n</g>\n<!-- Alan\nKay&#45;&gt;Seymour\nPapert -->\n<g id=\"edge154\" class=\"edge\">\n<title>Alan\nKay&#45;&gt;Seymour\nPapert</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.46,-1602.91C379.29,-1607.74 395.99,-1615.14 408.48,-1625.6 430.6,-1644.11 422.57,-1660.85 444.48,-1679.6 451.26,-1685.4 459.34,-1690.3 467.46,-1694.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"465.76,-1697.89 476.31,-1698.89 468.69,-1691.53 465.76,-1697.89\"/>\n</g>\n<!-- Blue\nPlane -->\n<g id=\"node126\" class=\"node\">\n<title>Blue\nPlane</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1653.8\" font-family=\"Times,serif\" font-size=\"14.00\">Blue</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1637\" font-family=\"Times,serif\" font-size=\"14.00\">Plane</text>\n</g>\n<!-- Alan\nKay&#45;&gt;Blue\nPlane -->\n<g id=\"edge155\" class=\"edge\">\n<title>Alan\nKay&#45;&gt;Blue\nPlane</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.44,-1603.8C394.19,-1612.95 440.89,-1627.8 473.28,-1638.11\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.07,-1641.71 482.66,-1641.41 474.2,-1635.04 472.07,-1641.71\"/>\n</g>\n<!-- Smalltalk -->\n<g id=\"node127\" class=\"node\">\n<title>Smalltalk</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1588.4\" font-family=\"Times,serif\" font-size=\"14.00\">Smalltalk</text>\n</g>\n<!-- Alan\nKay&#45;&gt;Smalltalk -->\n<g id=\"edge156\" class=\"edge\">\n<title>Alan\nKay&#45;&gt;Smalltalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.44,-1595.14C391.82,-1594.68 433.33,-1593.94 465.01,-1593.38\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"464.83,-1596.87 474.77,-1593.19 464.71,-1589.87 464.83,-1596.87\"/>\n</g>\n<!-- Quildreen\nMotta&#45;&gt;Structure -->\n<g id=\"edge157\" class=\"edge\">\n<title>Quildreen\nMotta&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.82,-4777.58C301.27,-4751.22 547.2,-4694.75 694.44,-4807.6 737.31,-4840.46 761.82,-4900.92 773.16,-4936.46\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"770,-4937.08 776.27,-4945.63 776.7,-4935.04 770,-4937.08\"/>\n</g>\n<!-- Quildreen\nMotta&#45;&gt;Objects\nas\nBehaviour -->\n<g id=\"edge158\" class=\"edge\">\n<title>Quildreen\nMotta&#45;&gt;Objects\nas\nBehaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.74,-4795.17C234.4,-4802.25 265.99,-4813.23 291.74,-4823.25\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.06,-4826.74 300.65,-4827.17 292.64,-4820.23 290.06,-4826.74\"/>\n</g>\n<!-- Structure&#45;&gt;Event -->\n<g id=\"edge171\" class=\"edge\">\n<title>Structure&#45;&gt;Event</title>\n<path fill=\"none\" stroke=\"black\" d=\"M791.97,-4946.61C803.25,-4923.37 822.44,-4881.4 833.5,-4843.6 859.49,-4754.82 817.67,-4715.22 869.5,-4638.6 871.9,-4635.05 874.94,-4631.89 878.29,-4629.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"879.95,-4631.49 886.07,-4622.85 875.89,-4625.78 879.95,-4631.49\"/>\n</g>\n<!-- Structure&#45;&gt;Choice -->\n<g id=\"edge174\" class=\"edge\">\n<title>Structure&#45;&gt;Choice</title>\n<path fill=\"none\" stroke=\"black\" d=\"M786.69,-4982.31C798.38,-5037.87 835.67,-5213.68 869.5,-5358.6 881.71,-5410.88 896.98,-5471.61 905.82,-5506.33\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"902.58,-5506.82 908.45,-5515.65 909.37,-5505.09 902.58,-5506.82\"/>\n</g>\n<!-- Advance\nOrganizer -->\n<g id=\"node128\" class=\"node\">\n<title>Advance\nOrganizer</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4996.8\" font-family=\"Times,serif\" font-size=\"14.00\">Advance</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4980\" font-family=\"Times,serif\" font-size=\"14.00\">Organizer</text>\n</g>\n<!-- Structure&#45;&gt;Advance\nOrganizer -->\n<g id=\"edge159\" class=\"edge\">\n<title>Structure&#45;&gt;Advance\nOrganizer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M815.46,-4971.59C831.29,-4975 850.58,-4979.15 867.83,-4982.86\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"866.73,-4986.43 877.25,-4985.11 868.21,-4979.58 866.73,-4986.43\"/>\n</g>\n<!-- Scaffolding -->\n<g id=\"node129\" class=\"node\">\n<title>Scaffolding</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4931.4\" font-family=\"Times,serif\" font-size=\"14.00\">Scaffolding</text>\n</g>\n<!-- Structure&#45;&gt;Scaffolding -->\n<g id=\"edge160\" class=\"edge\">\n<title>Structure&#45;&gt;Scaffolding</title>\n<path fill=\"none\" stroke=\"black\" d=\"M815.46,-4957.36C829.91,-4954.14 847.24,-4950.27 863.26,-4946.7\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"863.56,-4950 872.56,-4944.41 862.03,-4943.17 863.56,-4950\"/>\n</g>\n<!-- Change -->\n<g id=\"node130\" class=\"node\">\n<title>Change</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4877.4\" font-family=\"Times,serif\" font-size=\"14.00\">Change</text>\n</g>\n<!-- Structure&#45;&gt;Change -->\n<g id=\"edge161\" class=\"edge\">\n<title>Structure&#45;&gt;Change</title>\n<path fill=\"none\" stroke=\"black\" d=\"M810.17,-4946.81C827.17,-4935.73 849.55,-4921.24 869.5,-4908.6 871.52,-4907.32 873.59,-4906.02 875.68,-4904.7\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"877.27,-4907.22 883.89,-4898.95 873.56,-4901.28 877.27,-4907.22\"/>\n</g>\n<!-- Inside -->\n<g id=\"node131\" class=\"node\">\n<title>Inside</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4476.4\" font-family=\"Times,serif\" font-size=\"14.00\">Inside</text>\n</g>\n<!-- Structure&#45;&gt;Inside -->\n<g id=\"edge162\" class=\"edge\">\n<title>Structure&#45;&gt;Inside</title>\n<path fill=\"none\" stroke=\"black\" d=\"M785.88,-4946.89C795.11,-4892.15 825.72,-4721.19 869.5,-4584.6 878,-4558.09 890.5,-4528.94 899.93,-4508.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"903.52,-4509.83 904.54,-4499.28 897.17,-4506.89 903.52,-4509.83\"/>\n</g>\n<!-- Outside -->\n<g id=\"node132\" class=\"node\">\n<title>Outside</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4234.4\" font-family=\"Times,serif\" font-size=\"14.00\">Outside</text>\n</g>\n<!-- Structure&#45;&gt;Outside -->\n<g id=\"edge163\" class=\"edge\">\n<title>Structure&#45;&gt;Outside</title>\n<path fill=\"none\" stroke=\"black\" d=\"M785.75,-4946.91C796.11,-4881.41 833.65,-4646.45 869.5,-4453.6 881.98,-4386.52 898.32,-4308.03 907.01,-4266.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"910.6,-4267.91 909.25,-4257.4 903.75,-4266.46 910.6,-4267.91\"/>\n</g>\n<!-- Model -->\n<g id=\"node133\" class=\"node\">\n<title>Model</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4823.4\" font-family=\"Times,serif\" font-size=\"14.00\">Model</text>\n</g>\n<!-- Structure&#45;&gt;Model -->\n<g id=\"edge164\" class=\"edge\">\n<title>Structure&#45;&gt;Model</title>\n<path fill=\"none\" stroke=\"black\" d=\"M794.22,-4946.65C809.34,-4923.47 837.99,-4882.78 869.5,-4854.6 872.16,-4852.23 875.04,-4849.94 878.03,-4847.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"879.8,-4850.11 886.13,-4841.61 875.88,-4844.31 879.8,-4850.11\"/>\n</g>\n<!-- Boundary -->\n<g id=\"node134\" class=\"node\">\n<title>Boundary</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4769.4\" font-family=\"Times,serif\" font-size=\"14.00\">Boundary</text>\n</g>\n<!-- Structure&#45;&gt;Boundary -->\n<g id=\"edge165\" class=\"edge\">\n<title>Structure&#45;&gt;Boundary</title>\n<path fill=\"none\" stroke=\"black\" d=\"M788.85,-4946.69C800.18,-4914.36 827.67,-4845.44 869.5,-4800.6 870.17,-4799.89 870.86,-4799.19 871.56,-4798.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"873.35,-4800.72 878.73,-4791.59 868.84,-4795.38 873.35,-4800.72\"/>\n</g>\n<!-- Cognition -->\n<g id=\"node135\" class=\"node\">\n<title>Cognition</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4715.4\" font-family=\"Times,serif\" font-size=\"14.00\">Cognition</text>\n</g>\n<!-- Structure&#45;&gt;Cognition -->\n<g id=\"edge166\" class=\"edge\">\n<title>Structure&#45;&gt;Cognition</title>\n<path fill=\"none\" stroke=\"black\" d=\"M790.73,-4946.65C800.85,-4923.11 818.98,-4880.45 833.5,-4843.6 850.37,-4800.82 840.39,-4782.19 869.5,-4746.6 870.01,-4745.98 870.54,-4745.37 871.08,-4744.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"872.91,-4747.92 877.88,-4738.56 868.16,-4742.78 872.91,-4747.92\"/>\n</g>\n<!-- remind -->\n<g id=\"node136\" class=\"node\">\n<title>remind</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-4661.4\" font-family=\"Times,serif\" font-size=\"14.00\">remind</text>\n</g>\n<!-- Structure&#45;&gt;remind -->\n<g id=\"edge167\" class=\"edge\">\n<title>Structure&#45;&gt;remind</title>\n<path fill=\"none\" stroke=\"black\" d=\"M791.43,-4946.9C802.3,-4923.63 821.24,-4881.26 833.5,-4843.6 854.87,-4778 829.14,-4748.55 869.5,-4692.6 871.83,-4689.38 874.66,-4686.46 877.76,-4683.84\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"879.36,-4686.28 885.41,-4677.58 875.26,-4680.61 879.36,-4686.28\"/>\n</g>\n<!-- William\nBricken -->\n<g id=\"node137\" class=\"node\">\n<title>William\nBricken</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5332.8\" font-family=\"Times,serif\" font-size=\"14.00\">William</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5316\" font-family=\"Times,serif\" font-size=\"14.00\">Bricken</text>\n</g>\n<!-- Structure&#45;&gt;William\nBricken -->\n<g id=\"edge168\" class=\"edge\">\n<title>Structure&#45;&gt;William\nBricken</title>\n<path fill=\"none\" stroke=\"black\" d=\"M785.86,-4982.21C796.14,-5043.32 832.33,-5245.47 869.5,-5298.6 871.23,-5301.07 873.23,-5303.4 875.41,-5305.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"872.48,-5308.54 882.33,-5312.44 877.06,-5303.25 872.48,-5308.54\"/>\n</g>\n<!-- Surprise -->\n<g id=\"node138\" class=\"node\">\n<title>Surprise</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5267.4\" font-family=\"Times,serif\" font-size=\"14.00\">Surprise</text>\n</g>\n<!-- Structure&#45;&gt;Surprise -->\n<g id=\"edge169\" class=\"edge\">\n<title>Structure&#45;&gt;Surprise</title>\n<path fill=\"none\" stroke=\"black\" d=\"M784.19,-4982.29C788.28,-5029.62 805.12,-5161.25 869.5,-5244.6 871.12,-5246.69 872.95,-5248.67 874.92,-5250.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"872.08,-5253.53 882.07,-5257.05 876.46,-5248.06 872.08,-5253.53\"/>\n</g>\n<!-- Autopoiesis -->\n<g id=\"node139\" class=\"node\">\n<title>Autopoiesis</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5213.4\" font-family=\"Times,serif\" font-size=\"14.00\">Autopoiesis</text>\n</g>\n<!-- Structure&#45;&gt;Autopoiesis -->\n<g id=\"edge170\" class=\"edge\">\n<title>Structure&#45;&gt;Autopoiesis</title>\n<path fill=\"none\" stroke=\"black\" d=\"M785.79,-4982.4C793.04,-5023.31 815.7,-5125.51 869.5,-5190.6 870.01,-5191.22 870.54,-5191.82 871.09,-5192.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"868.18,-5194.42 877.91,-5198.61 872.92,-5189.27 868.18,-5194.42\"/>\n</g>\n<!-- Learning\nEnvironment -->\n<g id=\"node140\" class=\"node\">\n<title>Learning\nEnvironment</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5164.8\" font-family=\"Times,serif\" font-size=\"14.00\">Learning</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5148\" font-family=\"Times,serif\" font-size=\"14.00\">Environment</text>\n</g>\n<!-- Structure&#45;&gt;Learning\nEnvironment -->\n<g id=\"edge172\" class=\"edge\">\n<title>Structure&#45;&gt;Learning\nEnvironment</title>\n<path fill=\"none\" stroke=\"black\" d=\"M789.01,-4982.53C800.6,-5014.94 828.49,-5084.22 869.5,-5130.6 870.14,-5131.32 870.8,-5132.04 871.48,-5132.74\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"868.57,-5134.73 878.31,-5138.91 873.29,-5129.57 868.57,-5134.73\"/>\n</g>\n<!-- Path -->\n<g id=\"node141\" class=\"node\">\n<title>Path</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5099.4\" font-family=\"Times,serif\" font-size=\"14.00\">Path</text>\n</g>\n<!-- Structure&#45;&gt;Path -->\n<g id=\"edge173\" class=\"edge\">\n<title>Structure&#45;&gt;Path</title>\n<path fill=\"none\" stroke=\"black\" d=\"M793.89,-4982.49C808.86,-5006.04 837.58,-5047.8 869.5,-5076.6 872.15,-5078.98 875.03,-5081.28 878,-5083.46\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"875.86,-5086.91 886.1,-5089.62 879.78,-5081.12 875.86,-5086.91\"/>\n</g>\n<!-- Patterns -->\n<g id=\"node142\" class=\"node\">\n<title>Patterns</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-5045.4\" font-family=\"Times,serif\" font-size=\"14.00\">Patterns</text>\n</g>\n<!-- Structure&#45;&gt;Patterns -->\n<g id=\"edge175\" class=\"edge\">\n<title>Structure&#45;&gt;Patterns</title>\n<path fill=\"none\" stroke=\"black\" d=\"M808.94,-4982.36C826.04,-4993.96 848.99,-5009.37 869.5,-5022.6 871.24,-5023.72 873.02,-5024.86 874.83,-5026.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"872.59,-5029.36 882.92,-5031.73 876.32,-5023.44 872.59,-5029.36\"/>\n</g>\n<!-- Objects\nas\nPlain\nRecords\nof\nData&#45;&gt;Quildreen\nMotta -->\n<g id=\"edge179\" class=\"edge\">\n<title>Objects\nas\nPlain\nRecords\nof\nData&#45;&gt;Quildreen\nMotta</title>\n<path fill=\"none\" stroke=\"black\" d=\"M479.74,-4839.75C460.27,-4828.38 433.8,-4814.74 408.48,-4807.6 345.36,-4789.81 269.05,-4786.93 221.53,-4787.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"221.63,-4783.72 211.67,-4787.33 221.71,-4790.72 221.63,-4783.72\"/>\n</g>\n<!-- Objects\nas\nPlain\nRecords\nof\nData&#45;&gt;Structure -->\n<g id=\"edge176\" class=\"edge\">\n<title>Objects\nas\nPlain\nRecords\nof\nData&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M541.29,-4870.35C589.19,-4889.19 683.37,-4926.22 738.33,-4947.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"736.86,-4951.41 747.45,-4951.81 739.42,-4944.89 736.86,-4951.41\"/>\n</g>\n<!-- Objects\nas\nPlain\nRecords\nof\nData&#45;&gt;Objects\nas\nPlain\nRecords\nof\nData -->\n<g id=\"edge177\" class=\"edge\">\n<title>Objects\nas\nPlain\nRecords\nof\nData&#45;&gt;Objects\nas\nPlain\nRecords\nof\nData</title>\n<path fill=\"none\" stroke=\"black\" d=\"M484.8,-4912.91C487.77,-4923.49 496.31,-4931 510.41,-4931 519.67,-4931 526.52,-4927.76 530.99,-4922.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"534.5,-4924.39 536.03,-4913.91 528.29,-4921.15 534.5,-4924.39\"/>\n</g>\n<!-- Objects\nas\nPlain\nRecords\nof\nData&#45;&gt;Objects\nas\nBehaviour -->\n<g id=\"edge178\" class=\"edge\">\n<title>Objects\nas\nPlain\nRecords\nof\nData&#45;&gt;Objects\nas\nBehaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M479.68,-4861.6C453.88,-4861.26 416.07,-4858.64 386.25,-4855.27\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"387,-4851.71 376.66,-4853.99 386.17,-4858.66 387,-4851.71\"/>\n</g>\n<!-- Star\nTrek -->\n<g id=\"node143\" class=\"node\">\n<title>Star\nTrek</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2559.8\" font-family=\"Times,serif\" font-size=\"14.00\">Star</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2543\" font-family=\"Times,serif\" font-size=\"14.00\">Trek</text>\n</g>\n<!-- The\nFederation&#45;&gt;Star\nTrek -->\n<g id=\"edge180\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Star\nTrek</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.31,-2342.37C388.12,-2346.9 400.28,-2353.64 408.48,-2363.6 455.39,-2420.52 398.2,-2468.17 444.48,-2525.6 451.86,-2534.76 462.67,-2541.25 473.36,-2545.79\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.86,-2549.34 482.46,-2549.57 474.32,-2542.78 471.86,-2549.34\"/>\n</g>\n<!-- Decentralised\nWeb -->\n<g id=\"node144\" class=\"node\">\n<title>Decentralised\nWeb</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2499.8\" font-family=\"Times,serif\" font-size=\"14.00\">Decentralised</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2483\" font-family=\"Times,serif\" font-size=\"14.00\">Web</text>\n</g>\n<!-- The\nFederation&#45;&gt;Decentralised\nWeb -->\n<g id=\"edge181\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Decentralised\nWeb</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.36,-2343.23C387.9,-2347.8 399.87,-2354.34 408.48,-2363.6 441.24,-2398.79 412.12,-2430.05 444.48,-2465.6 447.54,-2468.96 451.05,-2471.97 454.82,-2474.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.65,-2478.06 462.99,-2480.39 456.36,-2472.12 452.65,-2478.06\"/>\n</g>\n<!-- Federated\nCommons -->\n<g id=\"node145\" class=\"node\">\n<title>Federated\nCommons</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2439.8\" font-family=\"Times,serif\" font-size=\"14.00\">Federated</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2423\" font-family=\"Times,serif\" font-size=\"14.00\">Commons</text>\n</g>\n<!-- The\nFederation&#45;&gt;Federated\nCommons -->\n<g id=\"edge182\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Federated\nCommons</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.33,-2345.98C387.24,-2350.59 398.84,-2356.47 408.48,-2363.6 428.25,-2378.22 424.87,-2390.77 444.48,-2405.6 450.54,-2410.18 457.42,-2414.29 464.37,-2417.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"462.3,-2421.26 472.82,-2422.47 465.35,-2414.96 462.3,-2421.26\"/>\n</g>\n<!-- Commons -->\n<g id=\"node146\" class=\"node\">\n<title>Commons</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2374.4\" font-family=\"Times,serif\" font-size=\"14.00\">Commons</text>\n</g>\n<!-- The\nFederation&#45;&gt;Commons -->\n<g id=\"edge183\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Commons</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.49,-2343.36C401.97,-2350.12 436.07,-2359.16 463.35,-2366.39\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"462.25,-2369.98 472.81,-2369.16 464.04,-2363.22 462.25,-2369.98\"/>\n</g>\n<!-- Series\nof\nCultural\nEvents -->\n<g id=\"node147\" class=\"node\">\n<title>Series\nof\nCultural\nEvents</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2325.6\" font-family=\"Times,serif\" font-size=\"14.00\">Series</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2308.8\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2292\" font-family=\"Times,serif\" font-size=\"14.00\">Cultural</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2275.2\" font-family=\"Times,serif\" font-size=\"14.00\">Events</text>\n</g>\n<!-- The\nFederation&#45;&gt;Series\nof\nCultural\nEvents -->\n<g id=\"edge184\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Series\nof\nCultural\nEvents</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.49,-2327.31C403.78,-2322.65 440.95,-2316.3 469.04,-2311.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"469.44,-2314.81 478.71,-2309.67 468.26,-2307.91 469.44,-2314.81\"/>\n</g>\n<!-- Conversations\nAcross\nSpace -->\n<g id=\"node148\" class=\"node\">\n<title>Conversations\nAcross\nSpace</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2232.2\" font-family=\"Times,serif\" font-size=\"14.00\">Conversations</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2215.4\" font-family=\"Times,serif\" font-size=\"14.00\">Across</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2198.6\" font-family=\"Times,serif\" font-size=\"14.00\">Space</text>\n</g>\n<!-- The\nFederation&#45;&gt;Conversations\nAcross\nSpace -->\n<g id=\"edge185\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Conversations\nAcross\nSpace</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.53,-2321.48C387.45,-2316.88 399,-2310.94 408.48,-2303.6 429.01,-2287.71 424.93,-2274.68 444.48,-2257.6 447.41,-2255.04 450.53,-2252.57 453.77,-2250.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"455.3,-2252.7 461.53,-2244.13 451.31,-2246.94 455.3,-2252.7\"/>\n</g>\n<!-- Thematic\nconversations -->\n<g id=\"node149\" class=\"node\">\n<title>Thematic\nconversations</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2155.8\" font-family=\"Times,serif\" font-size=\"14.00\">Thematic</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2139\" font-family=\"Times,serif\" font-size=\"14.00\">conversations</text>\n</g>\n<!-- The\nFederation&#45;&gt;Thematic\nconversations -->\n<g id=\"edge186\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Thematic\nconversations</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.28,-2324.37C387.96,-2319.82 400.03,-2313.18 408.48,-2303.6 445.9,-2261.22 407.53,-2224.38 444.48,-2181.6 447.5,-2178.11 451,-2175 454.79,-2172.24\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"456.47,-2174.69 463.06,-2166.4 452.73,-2168.77 456.47,-2174.69\"/>\n</g>\n<!-- Decentralised\nArchive -->\n<g id=\"node150\" class=\"node\">\n<title>Decentralised\nArchive</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2095.8\" font-family=\"Times,serif\" font-size=\"14.00\">Decentralised</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2079\" font-family=\"Times,serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- The\nFederation&#45;&gt;Decentralised\nArchive -->\n<g id=\"edge187\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Decentralised\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.44,-2324.93C388.27,-2320.42 400.39,-2313.65 408.48,-2303.6 460.17,-2239.36 393.5,-2186.4 444.48,-2121.6 447.5,-2117.76 451.12,-2114.4 455.09,-2111.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"456.68,-2113.95 463.24,-2105.64 452.92,-2108.05 456.68,-2113.95\"/>\n</g>\n<!-- Podcasting\nCommunity -->\n<g id=\"node151\" class=\"node\">\n<title>Podcasting\nCommunity</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2035.8\" font-family=\"Times,serif\" font-size=\"14.00\">Podcasting</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2019\" font-family=\"Times,serif\" font-size=\"14.00\">Community</text>\n</g>\n<!-- The\nFederation&#45;&gt;Podcasting\nCommunity -->\n<g id=\"edge188\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Podcasting\nCommunity</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.35,-2325.28C388.32,-2320.79 400.56,-2313.95 408.48,-2303.6 474.61,-2217.28 379.3,-2148.64 444.48,-2061.6 448.54,-2056.19 453.81,-2051.72 459.59,-2048.04\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"460.91,-2050.76 468,-2042.88 457.55,-2044.62 460.91,-2050.76\"/>\n</g>\n<!-- Film\nand\nDocumentary\nResearch -->\n<g id=\"node152\" class=\"node\">\n<title>Film\nand\nDocumentary\nResearch</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1976.6\" font-family=\"Times,serif\" font-size=\"14.00\">Film</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1959.8\" font-family=\"Times,serif\" font-size=\"14.00\">and</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1943\" font-family=\"Times,serif\" font-size=\"14.00\">Documentary</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1926.2\" font-family=\"Times,serif\" font-size=\"14.00\">Research</text>\n</g>\n<!-- The\nFederation&#45;&gt;Film\nand\nDocumentary\nResearch -->\n<g id=\"edge189\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Film\nand\nDocumentary\nResearch</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.52,-2325.41C388.5,-2320.93 400.71,-2314.06 408.48,-2303.6 489.12,-2195.11 375.39,-2117.78 444.48,-2001.6 447.7,-1996.2 451.82,-1991.27 456.42,-1986.8\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"458.3,-1988.94 463.55,-1979.74 453.71,-1983.66 458.3,-1988.94\"/>\n</g>\n<!-- Future\nof\nthe\nFederation -->\n<g id=\"node153\" class=\"node\">\n<title>Future\nof\nthe\nFederation</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1883.6\" font-family=\"Times,serif\" font-size=\"14.00\">Future</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1866.8\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1850\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1833.2\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- The\nFederation&#45;&gt;Future\nof\nthe\nFederation -->\n<g id=\"edge190\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Future\nof\nthe\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.32,-2325.66C388.44,-2321.2 400.78,-2314.27 408.48,-2303.6 460.08,-2232.14 400.49,-1984.97 444.48,-1908.6 449.34,-1900.16 456.45,-1892.88 464.2,-1886.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"465.72,-1889.26 471.78,-1880.58 461.63,-1883.58 465.72,-1889.26\"/>\n</g>\n<!-- Visualising\nthe\nFederation -->\n<g id=\"node154\" class=\"node\">\n<title>Visualising\nthe\nFederation</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1790.2\" font-family=\"Times,serif\" font-size=\"14.00\">Visualising</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1773.4\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-1756.6\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- The\nFederation&#45;&gt;Visualising\nthe\nFederation -->\n<g id=\"edge191\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Visualising\nthe\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.42,-2325.74C388.55,-2321.28 400.87,-2314.34 408.48,-2303.6 471.37,-2214.89 386.96,-1907.88 444.48,-1815.6 448.86,-1808.59 455.03,-1802.72 461.86,-1797.86\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"463.18,-1800.53 469.76,-1792.23 459.44,-1794.62 463.18,-1800.53\"/>\n</g>\n<!-- Graphing\nthe\nFederation -->\n<g id=\"node155\" class=\"node\">\n<title>Graphing\nthe\nFederation</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2925.2\" font-family=\"Times,serif\" font-size=\"14.00\">Graphing</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2908.4\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2891.6\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- The\nFederation&#45;&gt;Graphing\nthe\nFederation -->\n<g id=\"edge192\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Graphing\nthe\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.44,-2341.45C388.57,-2345.91 400.89,-2352.85 408.48,-2363.6 474.17,-2456.58 384.42,-2777.9 444.48,-2874.6 449.24,-2882.26 456.15,-2888.54 463.7,-2893.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"461.41,-2896.95 471.78,-2899.11 465.01,-2890.95 461.41,-2896.95\"/>\n</g>\n<!-- The\nPermanent\nFederation -->\n<g id=\"node156\" class=\"node\">\n<title>The\nPermanent\nFederation</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2849.2\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2832.4\" font-family=\"Times,serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2815.6\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- The\nFederation&#45;&gt;The\nPermanent\nFederation -->\n<g id=\"edge193\" class=\"edge\">\n<title>The\nFederation&#45;&gt;The\nPermanent\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.37,-2341.5C388.49,-2345.97 400.82,-2352.89 408.48,-2363.6 464.93,-2442.48 392.8,-2716.52 444.48,-2798.6 449.24,-2806.15 456.07,-2812.37 463.54,-2817.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"461.15,-2820.69 471.52,-2822.87 464.77,-2814.7 461.15,-2820.69\"/>\n</g>\n<!-- United\nFederation\nof\nPlanets -->\n<g id=\"node157\" class=\"node\">\n<title>United\nFederation\nof\nPlanets</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2772.6\" font-family=\"Times,serif\" font-size=\"14.00\">United</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2755.8\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2739\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2722.2\" font-family=\"Times,serif\" font-size=\"14.00\">Planets</text>\n</g>\n<!-- The\nFederation&#45;&gt;United\nFederation\nof\nPlanets -->\n<g id=\"edge194\" class=\"edge\">\n<title>The\nFederation&#45;&gt;United\nFederation\nof\nPlanets</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.24,-2341.6C388.35,-2346.07 400.7,-2352.98 408.48,-2363.6 498.81,-2486.89 367.27,-2573.7 444.48,-2705.6 449.35,-2713.92 456.39,-2721.12 464.05,-2727.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"461.39,-2730.31 471.54,-2733.34 465.49,-2724.64 461.39,-2730.31\"/>\n</g>\n<!-- Federation\nWars -->\n<g id=\"node158\" class=\"node\">\n<title>Federation\nWars</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2679.8\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2663\" font-family=\"Times,serif\" font-size=\"14.00\">Wars</text>\n</g>\n<!-- The\nFederation&#45;&gt;Federation\nWars -->\n<g id=\"edge195\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Federation\nWars</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.47,-2341.83C388.45,-2346.31 400.66,-2353.17 408.48,-2363.6 484.28,-2464.69 369.79,-2543.69 444.48,-2645.6 449.23,-2652.07 455.71,-2657.19 462.76,-2661.22\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"461.09,-2664.79 471.61,-2666.07 464.18,-2658.51 461.09,-2664.79\"/>\n</g>\n<!-- Federated\nGovernance -->\n<g id=\"node159\" class=\"node\">\n<title>Federated\nGovernance</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2619.8\" font-family=\"Times,serif\" font-size=\"14.00\">Federated</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-2603\" font-family=\"Times,serif\" font-size=\"14.00\">Governance</text>\n</g>\n<!-- The\nFederation&#45;&gt;Federated\nGovernance -->\n<g id=\"edge196\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Federated\nGovernance</title>\n<path fill=\"none\" stroke=\"black\" d=\"M376.28,-2341.97C388.24,-2346.47 400.49,-2353.3 408.48,-2363.6 469.79,-2442.55 384.04,-2505.99 444.48,-2585.6 448.52,-2590.92 453.73,-2595.33 459.45,-2598.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"457.29,-2602.34 467.73,-2604.1 460.67,-2596.21 457.29,-2602.34\"/>\n</g>\n<!-- Objects\nas\nBehaviour&#45;&gt;Quildreen\nMotta -->\n<g id=\"edge200\" class=\"edge\">\n<title>Objects\nas\nBehaviour&#45;&gt;Quildreen\nMotta</title>\n<path fill=\"none\" stroke=\"black\" d=\"M301.65,-4838.63C277.81,-4831.43 246.35,-4820.47 220.89,-4810.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"222.32,-4806.93 211.74,-4806.49 219.74,-4813.43 222.32,-4806.93\"/>\n</g>\n<!-- Objects\nas\nBehaviour&#45;&gt;Structure -->\n<g id=\"edge197\" class=\"edge\">\n<title>Objects\nas\nBehaviour&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M375.55,-4823.57C395.15,-4812.83 420.29,-4801.07 444.48,-4795.6 501.64,-4782.67 521.19,-4775.77 576.34,-4795.6 655.75,-4824.15 726.27,-4898.35 759.98,-4938.27\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"757.9,-4940.24 766.98,-4945.7 763.29,-4935.77 757.9,-4940.24\"/>\n</g>\n<!-- Objects\nas\nBehaviour&#45;&gt;Objects\nas\nPlain\nRecords\nof\nData -->\n<g id=\"edge198\" class=\"edge\">\n<title>Objects\nas\nBehaviour&#45;&gt;Objects\nas\nPlain\nRecords\nof\nData</title>\n<path fill=\"none\" stroke=\"black\" d=\"M375.66,-4842.72C402.98,-4843.4 440.55,-4846.21 468.92,-4849.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"468.32,-4853.23 478.68,-4851.05 469.22,-4846.29 468.32,-4853.23\"/>\n</g>\n<!-- Objects\nas\nBehaviour&#45;&gt;Objects\nas\nBehaviour -->\n<g id=\"edge199\" class=\"edge\">\n<title>Objects\nas\nBehaviour&#45;&gt;Objects\nas\nBehaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M307.99,-4874.64C307.67,-4884.69 317.89,-4892.8 338.66,-4892.8 351.64,-4892.8 360.5,-4889.63 365.24,-4884.8\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"368.84,-4886.22 369.32,-4875.64 362.34,-4883.61 368.84,-4886.22\"/>\n</g>\n<!-- Cards -->\n<g id=\"node160\" class=\"node\">\n<title>Cards</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-3281.4\" font-family=\"Times,serif\" font-size=\"14.00\">Cards</text>\n</g>\n<!-- Card&#45;&gt;Cards -->\n<g id=\"edge201\" class=\"edge\">\n<title>Card&#45;&gt;Cards</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.55,-2910.08C380.48,-2913.49 398.26,-2920.25 408.48,-2933.6 496.85,-3048.97 357.29,-3142.34 444.48,-3258.6 451.53,-3268 462.46,-3274.15 473.35,-3278.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.06,-3281.74 482.65,-3281.39 474.16,-3275.06 472.06,-3281.74\"/>\n</g>\n<!-- Behaviors -->\n<g id=\"node161\" class=\"node\">\n<title>Behaviors</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-3227.4\" font-family=\"Times,serif\" font-size=\"14.00\">Behaviors</text>\n</g>\n<!-- Card&#45;&gt;Behaviors -->\n<g id=\"edge202\" class=\"edge\">\n<title>Card&#45;&gt;Behaviors</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.43,-2910.17C380.32,-2913.62 398.1,-2920.38 408.48,-2933.6 482.17,-3027.42 374.81,-3102.76 444.48,-3199.6 449.65,-3206.78 456.88,-3212.43 464.66,-3216.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"462.79,-3220.33 473.3,-3221.65 465.91,-3214.06 462.79,-3220.33\"/>\n</g>\n<!-- flip -->\n<g id=\"node162\" class=\"node\">\n<title>flip</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-3395.4\" font-family=\"Times,serif\" font-size=\"14.00\">flip</text>\n</g>\n<!-- Card&#45;&gt;flip -->\n<g id=\"edge203\" class=\"edge\">\n<title>Card&#45;&gt;flip</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.34,-2909.9C380.39,-2913.25 398.37,-2920 408.48,-2933.6 466.89,-3012.15 386.87,-3293.47 444.48,-3372.6 451.4,-3382.1 462.29,-3388.27 473.19,-3392.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.93,-3395.86 482.52,-3395.49 474.01,-3389.18 471.93,-3395.86\"/>\n</g>\n<!-- Flip\nOperation -->\n<g id=\"node163\" class=\"node\">\n<title>Flip\nOperation</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-3346.8\" font-family=\"Times,serif\" font-size=\"14.00\">Flip</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-3330\" font-family=\"Times,serif\" font-size=\"14.00\">Operation</text>\n</g>\n<!-- Card&#45;&gt;Flip\nOperation -->\n<g id=\"edge204\" class=\"edge\">\n<title>Card&#45;&gt;Flip\nOperation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.62,-2910.02C380.58,-2913.42 398.36,-2920.17 408.48,-2933.6 510.32,-3068.73 346.68,-3174.53 444.48,-3312.6 449.59,-3319.8 456.86,-3325.32 464.71,-3329.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"462.92,-3333.02 473.46,-3334.04 465.86,-3326.67 462.92,-3333.02\"/>\n</g>\n<!-- Behavior&#45;&gt;Card -->\n<g id=\"edge214\" class=\"edge\">\n<title>Behavior&#45;&gt;Card</title>\n<path fill=\"none\" stroke=\"black\" d=\"M177.82,-3331.88C185.16,-3260.61 215.64,-2995.71 268.83,-2933.6 277.22,-2923.8 289.64,-2917.53 301.63,-2913.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.29,-2916.7 310.94,-2910.57 300.36,-2909.97 302.29,-2916.7\"/>\n</g>\n<!-- Behavior&#45;&gt;The\nBehavioural\nPoint\nof\nView -->\n<g id=\"edge208\" class=\"edge\">\n<title>Behavior&#45;&gt;The\nBehavioural\nPoint\nof\nView</title>\n<path fill=\"none\" stroke=\"black\" d=\"M177.53,-3367.47C184.43,-3449.05 215.71,-3786.09 268.83,-3875.6 273.87,-3884.1 280.76,-3891.81 288.23,-3898.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"285.61,-3901.81 295.51,-3905.58 290.12,-3896.46 285.61,-3901.81\"/>\n</g>\n<!-- State -->\n<g id=\"node164\" class=\"node\">\n<title>State</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3174.4\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n</g>\n<!-- Behavior&#45;&gt;State -->\n<g id=\"edge205\" class=\"edge\">\n<title>Behavior&#45;&gt;State</title>\n<path fill=\"none\" stroke=\"black\" d=\"M183.08,-3332.01C195.83,-3302.08 225.58,-3241.02 268.83,-3205.6 278.33,-3197.82 290.35,-3192.08 301.67,-3187.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.4,-3191.06 310.78,-3184.59 300.19,-3184.42 302.4,-3191.06\"/>\n</g>\n<!-- Class -->\n<g id=\"node165\" class=\"node\">\n<title>Class</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3120.4\" font-family=\"Times,serif\" font-size=\"14.00\">Class</text>\n</g>\n<!-- Behavior&#45;&gt;Class -->\n<g id=\"edge206\" class=\"edge\">\n<title>Behavior&#45;&gt;Class</title>\n<path fill=\"none\" stroke=\"black\" d=\"M179.76,-3331.63C188.5,-3293.34 214,-3203.01 268.83,-3151.6 277.93,-3143.06 290.05,-3137.12 301.58,-3133.02\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.42,-3136.11 310.9,-3129.76 300.31,-3129.44 302.42,-3136.11\"/>\n</g>\n<!-- Metaclass -->\n<g id=\"node166\" class=\"node\">\n<title>Metaclass</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3066.4\" font-family=\"Times,serif\" font-size=\"14.00\">Metaclass</text>\n</g>\n<!-- Behavior&#45;&gt;Metaclass -->\n<g id=\"edge207\" class=\"edge\">\n<title>Behavior&#45;&gt;Metaclass</title>\n<path fill=\"none\" stroke=\"black\" d=\"M177.69,-3331.71C182.71,-3286.4 201.97,-3165.89 268.83,-3097.6 275.41,-3090.88 283.87,-3085.79 292.59,-3081.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"293.77,-3084.86 301.84,-3078 291.25,-3078.33 293.77,-3084.86\"/>\n</g>\n<!-- The\nArt\nof\nthe\nInterpreter -->\n<g id=\"node167\" class=\"node\">\n<title>The\nArt\nof\nthe\nInterpreter</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3018\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3001.2\" font-family=\"Times,serif\" font-size=\"14.00\">Art</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2984.4\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2967.6\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2950.8\" font-family=\"Times,serif\" font-size=\"14.00\">Interpreter</text>\n</g>\n<!-- Behavior&#45;&gt;The\nArt\nof\nthe\nInterpreter -->\n<g id=\"edge209\" class=\"edge\">\n<title>Behavior&#45;&gt;The\nArt\nof\nthe\nInterpreter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M177.77,-3331.8C183.21,-3282.14 203.91,-3139.42 268.83,-3043.6 275.26,-3034.1 283.84,-3025.44 292.75,-3017.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.67,-3020.1 300.33,-3011.14 290.32,-3014.62 294.67,-3020.1\"/>\n</g>\n<!-- A\nPattern\nof\nPerception -->\n<g id=\"node168\" class=\"node\">\n<title>A\nPattern\nof\nPerception</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3849.6\" font-family=\"Times,serif\" font-size=\"14.00\">A</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3832.8\" font-family=\"Times,serif\" font-size=\"14.00\">Pattern</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3816\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3799.2\" font-family=\"Times,serif\" font-size=\"14.00\">Perception</text>\n</g>\n<!-- Behavior&#45;&gt;A\nPattern\nof\nPerception -->\n<g id=\"edge210\" class=\"edge\">\n<title>Behavior&#45;&gt;A\nPattern\nof\nPerception</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.4,-3367.43C173.91,-3430.09 176.21,-3643.75 268.83,-3781.6 274.82,-3790.52 283.13,-3798.22 291.9,-3804.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.52,-3807.95 299.76,-3810.67 293.45,-3802.16 289.52,-3807.95\"/>\n</g>\n<!-- A\nMentoring\nCourse\non\nSmalltalk -->\n<g id=\"node169\" class=\"node\">\n<title>A\nMentoring\nCourse\non\nSmalltalk</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3756\" font-family=\"Times,serif\" font-size=\"14.00\">A</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3739.2\" font-family=\"Times,serif\" font-size=\"14.00\">Mentoring</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3722.4\" font-family=\"Times,serif\" font-size=\"14.00\">Course</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3705.6\" font-family=\"Times,serif\" font-size=\"14.00\">on</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3688.8\" font-family=\"Times,serif\" font-size=\"14.00\">Smalltalk</text>\n</g>\n<!-- Behavior&#45;&gt;A\nMentoring\nCourse\non\nSmalltalk -->\n<g id=\"edge211\" class=\"edge\">\n<title>Behavior&#45;&gt;A\nMentoring\nCourse\non\nSmalltalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M177.45,-3367.58C182.13,-3419.13 201.17,-3570.23 268.83,-3671.6 275.2,-3681.14 283.75,-3689.82 292.65,-3697.31\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.22,-3700.65 300.23,-3704.13 294.58,-3695.17 290.22,-3700.65\"/>\n</g>\n<!-- Trait\nComposition\nMechanism -->\n<g id=\"node170\" class=\"node\">\n<title>Trait\nComposition\nMechanism</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3646.2\" font-family=\"Times,serif\" font-size=\"14.00\">Trait</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3629.4\" font-family=\"Times,serif\" font-size=\"14.00\">Composition</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3612.6\" font-family=\"Times,serif\" font-size=\"14.00\">Mechanism</text>\n</g>\n<!-- Behavior&#45;&gt;Trait\nComposition\nMechanism -->\n<g id=\"edge212\" class=\"edge\">\n<title>Behavior&#45;&gt;Trait\nComposition\nMechanism</title>\n<path fill=\"none\" stroke=\"black\" d=\"M178.51,-3367.53C185.29,-3411.35 208.04,-3525.37 268.83,-3595.6 273.57,-3601.08 279.3,-3605.92 285.41,-3610.15\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.24,-3613.55 293.57,-3615.92 286.97,-3607.62 283.24,-3613.55\"/>\n</g>\n<!-- Croquet -->\n<g id=\"node171\" class=\"node\">\n<title>Croquet</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3564.4\" font-family=\"Times,serif\" font-size=\"14.00\">Croquet</text>\n</g>\n<!-- Behavior&#45;&gt;Croquet -->\n<g id=\"edge213\" class=\"edge\">\n<title>Behavior&#45;&gt;Croquet</title>\n<path fill=\"none\" stroke=\"black\" d=\"M180.06,-3367.6C189.25,-3405.05 215.33,-3492.03 268.83,-3541.6 277.02,-3549.19 287.59,-3554.74 297.98,-3558.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.62,-3562.34 307.22,-3562.29 298.9,-3555.72 296.62,-3562.34\"/>\n</g>\n<!-- interact -->\n<g id=\"node172\" class=\"node\">\n<title>interact</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3510.4\" font-family=\"Times,serif\" font-size=\"14.00\">interact</text>\n</g>\n<!-- Behavior&#45;&gt;interact -->\n<g id=\"edge215\" class=\"edge\">\n<title>Behavior&#45;&gt;interact</title>\n<path fill=\"none\" stroke=\"black\" d=\"M183.7,-3367.37C196.97,-3396.37 226.96,-3453.99 268.83,-3487.6 277.76,-3494.77 288.83,-3500.22 299.46,-3504.29\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"298.26,-3507.92 308.85,-3507.89 300.55,-3501.31 298.26,-3507.92\"/>\n</g>\n<!-- Computation -->\n<g id=\"node173\" class=\"node\">\n<title>Computation</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3456.4\" font-family=\"Times,serif\" font-size=\"14.00\">Computation</text>\n</g>\n<!-- Behavior&#45;&gt;Computation -->\n<g id=\"edge216\" class=\"edge\">\n<title>Behavior&#45;&gt;Computation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M191.99,-3367.42C209.36,-3385.99 238.73,-3414.94 268.83,-3433.6 273.74,-3436.64 279.05,-3439.45 284.47,-3442.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"282.71,-3445.5 293.27,-3446.35 285.54,-3439.1 282.71,-3445.5\"/>\n</g>\n<!-- replicate -->\n<g id=\"node174\" class=\"node\">\n<title>replicate</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3402.4\" font-family=\"Times,serif\" font-size=\"14.00\">replicate</text>\n</g>\n<!-- Behavior&#45;&gt;replicate -->\n<g id=\"edge217\" class=\"edge\">\n<title>Behavior&#45;&gt;replicate</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.39,-3361C233.78,-3369.96 269.32,-3382.49 296.71,-3392.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.18,-3395.68 305.77,-3395.71 297.51,-3389.08 295.18,-3395.68\"/>\n</g>\n<!-- Static\nContext -->\n<g id=\"node175\" class=\"node\">\n<title>Static\nContext</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3353.8\" font-family=\"Times,serif\" font-size=\"14.00\">Static</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3337\" font-family=\"Times,serif\" font-size=\"14.00\">Context</text>\n</g>\n<!-- Behavior&#45;&gt;Static\nContext -->\n<g id=\"edge218\" class=\"edge\">\n<title>Behavior&#45;&gt;Static\nContext</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.39,-3349.6C234.13,-3349.6 270.28,-3349.6 297.82,-3349.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"297.66,-3353.1 307.66,-3349.6 297.66,-3346.1 297.66,-3353.1\"/>\n</g>\n<!-- Worldcore -->\n<g id=\"node176\" class=\"node\">\n<title>Worldcore</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3288.4\" font-family=\"Times,serif\" font-size=\"14.00\">Worldcore</text>\n</g>\n<!-- Behavior&#45;&gt;Worldcore -->\n<g id=\"edge219\" class=\"edge\">\n<title>Behavior&#45;&gt;Worldcore</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.39,-3338.2C231.96,-3329.88 264.28,-3318.48 290.71,-3309.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.62,-3312.2 299.89,-3305.57 289.29,-3305.6 291.62,-3312.2\"/>\n</g>\n<!-- Behavior\nTrees -->\n<g id=\"node177\" class=\"node\">\n<title>Behavior\nTrees</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3239.8\" font-family=\"Times,serif\" font-size=\"14.00\">Behavior</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-3223\" font-family=\"Times,serif\" font-size=\"14.00\">Trees</text>\n</g>\n<!-- Behavior&#45;&gt;Behavior\nTrees -->\n<g id=\"edge220\" class=\"edge\">\n<title>Behavior&#45;&gt;Behavior\nTrees</title>\n<path fill=\"none\" stroke=\"black\" d=\"M192.45,-3331.66C209.97,-3313.26 239.26,-3284.7 268.83,-3265.6 276.94,-3260.36 286.13,-3255.64 295.08,-3251.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.24,-3254.46 304.03,-3247.28 293.46,-3248.03 296.24,-3254.46\"/>\n</g>\n<!-- Object&#45;&gt;Iconic\nArithmetic -->\n<g id=\"edge225\" class=\"edge\">\n<title>Object&#45;&gt;Iconic\nArithmetic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M655.25,-4125.42C659.82,-4217.11 682.82,-4644.8 730.44,-4991.6 742.22,-5077.45 763.11,-5177.57 773.97,-5227.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"770.75,-5227.93 776.32,-5236.95 777.59,-5226.43 770.75,-5227.93\"/>\n</g>\n<!-- Object&#45;&gt;Inside -->\n<g id=\"edge224\" class=\"edge\">\n<title>Object&#45;&gt;Inside</title>\n<path fill=\"none\" stroke=\"black\" d=\"M680.28,-4123.18C694.76,-4131.56 713.29,-4141.76 730.44,-4149.6 774.84,-4169.9 800.54,-4151.59 833.5,-4187.6 869.43,-4226.84 898.16,-4386.4 908.71,-4452.11\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"905.39,-4452.55 910.41,-4461.89 912.31,-4451.46 905.39,-4452.55\"/>\n</g>\n<!-- Object&#45;&gt;Outside -->\n<g id=\"edge222\" class=\"edge\">\n<title>Object&#45;&gt;Outside</title>\n<path fill=\"none\" stroke=\"black\" d=\"M680.12,-4109.88C716.52,-4114.05 784.13,-4125.36 833.5,-4154.6 858.01,-4169.11 879.77,-4193.32 894.32,-4212.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"892.04,-4213.82 900.85,-4219.7 897.63,-4209.61 892.04,-4213.82\"/>\n</g>\n<!-- Container -->\n<g id=\"node178\" class=\"node\">\n<title>Container</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-4080.4\" font-family=\"Times,serif\" font-size=\"14.00\">Container</text>\n</g>\n<!-- Object&#45;&gt;Container -->\n<g id=\"edge221\" class=\"edge\">\n<title>Object&#45;&gt;Container</title>\n<path fill=\"none\" stroke=\"black\" d=\"M680.31,-4102.89C696.27,-4099.99 717.17,-4096.19 735.79,-4092.81\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"736.23,-4096.11 745.44,-4090.87 734.97,-4089.22 736.23,-4096.11\"/>\n</g>\n<!-- Process -->\n<g id=\"node179\" class=\"node\">\n<title>Process</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-4026.4\" font-family=\"Times,serif\" font-size=\"14.00\">Process</text>\n</g>\n<!-- Object&#45;&gt;Process -->\n<g id=\"edge223\" class=\"edge\">\n<title>Object&#45;&gt;Process</title>\n<path fill=\"none\" stroke=\"black\" d=\"M680.06,-4089.88C694.63,-4080.04 713.32,-4067.77 730.44,-4057.6 734.54,-4055.16 738.88,-4052.69 743.22,-4050.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"744.54,-4053 751.65,-4045.15 741.19,-4046.86 744.54,-4053\"/>\n</g>\n<!-- Life&#45;like\nSystems -->\n<g id=\"node180\" class=\"node\">\n<title>Life&#45;like\nSystems</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-3977.8\" font-family=\"Times,serif\" font-size=\"14.00\">Life&#45;like</text>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-3961\" font-family=\"Times,serif\" font-size=\"14.00\">Systems</text>\n</g>\n<!-- Object&#45;&gt;Life&#45;like\nSystems -->\n<g id=\"edge226\" class=\"edge\">\n<title>Object&#45;&gt;Life&#45;like\nSystems</title>\n<path fill=\"none\" stroke=\"black\" d=\"M664.38,-4089.71C677.42,-4067.53 701.96,-4029.47 730.44,-4003.6 733.57,-4000.75 737.03,-3998.03 740.61,-3995.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"742.25,-3997.93 748.66,-3989.5 738.39,-3992.09 742.25,-3997.93\"/>\n</g>\n<!-- Living\nSystems -->\n<g id=\"node181\" class=\"node\">\n<title>Living\nSystems</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-3917.8\" font-family=\"Times,serif\" font-size=\"14.00\">Living</text>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-3901\" font-family=\"Times,serif\" font-size=\"14.00\">Systems</text>\n</g>\n<!-- Object&#45;&gt;Living\nSystems -->\n<g id=\"edge227\" class=\"edge\">\n<title>Object&#45;&gt;Living\nSystems</title>\n<path fill=\"none\" stroke=\"black\" d=\"M658.83,-4089.85C667.7,-4057.48 690.25,-3988.08 730.44,-3943.6 733.72,-3939.97 737.54,-3936.64 741.6,-3933.64\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"743.32,-3936.03 749.7,-3927.57 739.44,-3930.2 743.32,-3936.03\"/>\n</g>\n<!-- Hyperlink\nin\nObject -->\n<g id=\"node182\" class=\"node\">\n<title>Hyperlink\nin\nObject</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-4292.2\" font-family=\"Times,serif\" font-size=\"14.00\">Hyperlink</text>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-4275.4\" font-family=\"Times,serif\" font-size=\"14.00\">in</text>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-4258.6\" font-family=\"Times,serif\" font-size=\"14.00\">Object</text>\n</g>\n<!-- Object&#45;&gt;Hyperlink\nin\nObject -->\n<g id=\"edge228\" class=\"edge\">\n<title>Object&#45;&gt;Hyperlink\nin\nObject</title>\n<path fill=\"none\" stroke=\"black\" d=\"M661.72,-4125.55C673.42,-4152.73 698.29,-4205.04 730.44,-4241.6 732.68,-4244.16 735.13,-4246.65 737.69,-4249.06\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"734.8,-4252.06 744.63,-4256.01 739.41,-4246.79 734.8,-4252.06\"/>\n</g>\n<!-- Verb -->\n<g id=\"node183\" class=\"node\">\n<title>Verb</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-4210.4\" font-family=\"Times,serif\" font-size=\"14.00\">Verb</text>\n</g>\n<!-- Object&#45;&gt;Verb -->\n<g id=\"edge229\" class=\"edge\">\n<title>Object&#45;&gt;Verb</title>\n<path fill=\"none\" stroke=\"black\" d=\"M670.34,-4125.37C685.1,-4141.3 708.08,-4164.83 730.44,-4182.6 735.33,-4186.49 740.72,-4190.32 746.1,-4193.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"743.75,-4197.2 754.05,-4199.67 747.54,-4191.31 743.75,-4197.2\"/>\n</g>\n<!-- Something&#45;&gt;Something -->\n<g id=\"edge233\" class=\"edge\">\n<title>Something&#45;&gt;Something</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.91,-5913.38C146.81,-5922.91 154.86,-5931.6 175.08,-5931.6 187.08,-5931.6 194.79,-5928.54 198.22,-5924.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"201.78,-5924.67 199.24,-5914.38 194.81,-5924 201.78,-5924.67\"/>\n</g>\n<!-- Something&#45;&gt;Distinction -->\n<g id=\"edge237\" class=\"edge\">\n<title>Something&#45;&gt;Distinction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M179.88,-5877.62C188.53,-5841.74 213.39,-5761.8 268.83,-5727.6 373.51,-5663.03 526.62,-5683.77 603.92,-5700.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"602.78,-5703.93 613.31,-5702.68 604.3,-5697.09 602.78,-5703.93\"/>\n</g>\n<!-- Void -->\n<g id=\"node184\" class=\"node\">\n<title>Void</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5972.4\" font-family=\"Times,serif\" font-size=\"14.00\">Void</text>\n</g>\n<!-- Something&#45;&gt;Void -->\n<g id=\"edge230\" class=\"edge\">\n<title>Something&#45;&gt;Void</title>\n<path fill=\"none\" stroke=\"black\" d=\"M204.29,-5913.55C222.36,-5924.66 246.52,-5938.81 268.83,-5949.6 279.23,-5954.63 290.82,-5959.46 301.49,-5963.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.17,-5967.23 310.76,-5967.51 302.66,-5960.69 300.17,-5967.23\"/>\n</g>\n<!-- Reference -->\n<g id=\"node185\" class=\"node\">\n<title>Reference</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5918.4\" font-family=\"Times,serif\" font-size=\"14.00\">Reference</text>\n</g>\n<!-- Something&#45;&gt;Reference -->\n<g id=\"edge231\" class=\"edge\">\n<title>Something&#45;&gt;Reference</title>\n<path fill=\"none\" stroke=\"black\" d=\"M213.15,-5901.79C236.52,-5905.7 266.88,-5910.77 291.77,-5914.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.98,-5918.52 301.42,-5916.71 292.13,-5911.61 290.98,-5918.52\"/>\n</g>\n<!-- Communication -->\n<g id=\"node186\" class=\"node\">\n<title>Communication</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5864.4\" font-family=\"Times,serif\" font-size=\"14.00\">Communication</text>\n</g>\n<!-- Something&#45;&gt;Communication -->\n<g id=\"edge232\" class=\"edge\">\n<title>Something&#45;&gt;Communication</title>\n<path fill=\"none\" stroke=\"black\" d=\"M213.15,-5889.41C231.47,-5886.34 254.1,-5882.56 275.01,-5879.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"275.47,-5882.37 284.76,-5877.27 274.32,-5875.47 275.47,-5882.37\"/>\n</g>\n<!-- Internal\nLink -->\n<g id=\"node187\" class=\"node\">\n<title>Internal\nLink</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5815.8\" font-family=\"Times,serif\" font-size=\"14.00\">Internal</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-5799\" font-family=\"Times,serif\" font-size=\"14.00\">Link</text>\n</g>\n<!-- Something&#45;&gt;Internal\nLink -->\n<g id=\"edge234\" class=\"edge\">\n<title>Something&#45;&gt;Internal\nLink</title>\n<path fill=\"none\" stroke=\"black\" d=\"M204.84,-5877.69C222.92,-5866.73 246.89,-5852.72 268.83,-5841.6 278.49,-5836.7 289.14,-5831.82 299.11,-5827.46\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.38,-5830.3 308.18,-5823.13 297.61,-5823.87 300.38,-5830.3\"/>\n</g>\n<g id=\"node188\" class=\"node\">\n<title></title>\n</g>\n<!-- Something&#45;&gt; -->\n<g id=\"edge235\" class=\"edge\">\n<title>Something&#45;&gt;</title>\n<path fill=\"none\" stroke=\"black\" d=\"M186.45,-5877.76C201.64,-5853.04 232.15,-5808.39 268.83,-5781.6 278.57,-5774.49 290.43,-5768.96 301.55,-5764.81\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.57,-5767.81 310.88,-5761.24 300.29,-5761.19 302.57,-5767.81\"/>\n</g>\n<!-- QWAN -->\n<g id=\"node189\" class=\"node\">\n<title>QWAN</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6246.4\" font-family=\"Times,serif\" font-size=\"14.00\">QWAN</text>\n</g>\n<!-- Something&#45;&gt;QWAN -->\n<g id=\"edge236\" class=\"edge\">\n<title>Something&#45;&gt;QWAN</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.89,-5913.48C176.3,-5967.48 184.78,-6130.86 268.83,-6223.6 276.73,-6232.32 287.8,-6238.26 298.76,-6242.29\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"297.53,-6245.89 308.12,-6245.59 299.66,-6239.22 297.53,-6245.89\"/>\n</g>\n<!-- Laws\nOf\nForm -->\n<g id=\"node190\" class=\"node\">\n<title>Laws\nOf\nForm</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6198.2\" font-family=\"Times,serif\" font-size=\"14.00\">Laws</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6181.4\" font-family=\"Times,serif\" font-size=\"14.00\">Of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6164.6\" font-family=\"Times,serif\" font-size=\"14.00\">Form</text>\n</g>\n<!-- Something&#45;&gt;Laws\nOf\nForm -->\n<g id=\"edge238\" class=\"edge\">\n<title>Something&#45;&gt;Laws\nOf\nForm</title>\n<path fill=\"none\" stroke=\"black\" d=\"M178.29,-5913.31C184.65,-5957.69 206.72,-6075.27 268.83,-6147.6 277.72,-6157.96 290.17,-6166.02 302.04,-6172\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.24,-6175.49 310.78,-6176.54 303.19,-6169.14 300.24,-6175.49\"/>\n</g>\n<!-- Laws\nof\nForm\nand\nObject\nOriented\nProgramming -->\n<g id=\"node191\" class=\"node\">\n<title>Laws\nof\nForm\nand\nObject\nOriented\nProgramming</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6121.8\" font-family=\"Times,serif\" font-size=\"14.00\">Laws</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6105\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6088.2\" font-family=\"Times,serif\" font-size=\"14.00\">Form</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6071.4\" font-family=\"Times,serif\" font-size=\"14.00\">and</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6054.6\" font-family=\"Times,serif\" font-size=\"14.00\">Object</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6037.8\" font-family=\"Times,serif\" font-size=\"14.00\">Oriented</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-6021\" font-family=\"Times,serif\" font-size=\"14.00\">Programming</text>\n</g>\n<!-- Something&#45;&gt;Laws\nof\nForm\nand\nObject\nOriented\nProgramming -->\n<g id=\"edge239\" class=\"edge\">\n<title>Something&#45;&gt;Laws\nof\nForm\nand\nObject\nOriented\nProgramming</title>\n<path fill=\"none\" stroke=\"black\" d=\"M190.89,-5913.43C208.97,-5935.06 240.61,-5972.47 268.83,-6003.6 274.02,-6009.33 279.49,-6015.25 284.99,-6021.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"282.09,-6023.2 291.49,-6028.08 287.18,-6018.4 282.09,-6023.2\"/>\n</g>\n<!-- Full&#45;Duplex&#45;&gt;Alan\nKay -->\n<g id=\"edge240\" class=\"edge\">\n<title>Full&#45;Duplex&#45;&gt;Alan\nKay</title>\n<path fill=\"none\" stroke=\"black\" d=\"M192.45,-1691.66C209.97,-1673.26 239.26,-1644.7 268.83,-1625.6 278.95,-1619.06 290.74,-1613.33 301.67,-1608.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.86,-1611.57 310.8,-1604.56 300.22,-1605.09 302.86,-1611.57\"/>\n</g>\n<!-- Full&#45;Duplex&#45;&gt;Full&#45;Duplex -->\n<g id=\"edge241\" class=\"edge\">\n<title>Full&#45;Duplex&#45;&gt;Full&#45;Duplex</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.91,-1727.38C146.81,-1736.91 154.86,-1745.6 175.08,-1745.6 187.08,-1745.6 194.79,-1742.54 198.22,-1738.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"201.78,-1738.67 199.24,-1728.38 194.81,-1738 201.78,-1738.67\"/>\n</g>\n<!-- negotiate&#45;&gt;negotiate -->\n<g id=\"edge242\" class=\"edge\">\n<title>negotiate&#45;&gt;negotiate</title>\n<path fill=\"none\" stroke=\"black\" d=\"M758.86,-1526.38C754.93,-1535.91 762.63,-1544.6 781.97,-1544.6 793.45,-1544.6 800.83,-1541.54 804.11,-1537.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"807.66,-1537.66 805.08,-1527.38 800.69,-1537.02 807.66,-1537.66\"/>\n</g>\n<!-- The\nPedestrian\nCrossing\nas\nSocial\nGift -->\n<g id=\"node192\" class=\"node\">\n<title>The\nPedestrian\nCrossing\nas\nSocial\nGift</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-1591.4\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-1574.6\" font-family=\"Times,serif\" font-size=\"14.00\">Pedestrian</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-1557.8\" font-family=\"Times,serif\" font-size=\"14.00\">Crossing</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-1541\" font-family=\"Times,serif\" font-size=\"14.00\">as</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-1524.2\" font-family=\"Times,serif\" font-size=\"14.00\">Social</text>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-1507.4\" font-family=\"Times,serif\" font-size=\"14.00\">Gift</text>\n</g>\n<!-- negotiate&#45;&gt;The\nPedestrian\nCrossing\nas\nSocial\nGift -->\n<g id=\"edge243\" class=\"edge\">\n<title>negotiate&#45;&gt;The\nPedestrian\nCrossing\nas\nSocial\nGift</title>\n<path fill=\"none\" stroke=\"black\" d=\"M815.46,-1519.84C831.04,-1525.23 849.98,-1531.78 867.01,-1537.67\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"865.73,-1541.28 876.32,-1541.24 868.01,-1534.66 865.73,-1541.28\"/>\n</g>\n<!-- cross -->\n<g id=\"node193\" class=\"node\">\n<title>cross</title>\n<text text-anchor=\"middle\" x=\"914.05\" y=\"-1459.4\" font-family=\"Times,serif\" font-size=\"14.00\">cross</text>\n</g>\n<!-- negotiate&#45;&gt;cross -->\n<g id=\"edge244\" class=\"edge\">\n<title>negotiate&#45;&gt;cross</title>\n<path fill=\"none\" stroke=\"black\" d=\"M815.46,-1497.36C834.13,-1490.9 857.62,-1482.78 876.87,-1476.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"877.77,-1479.16 886.07,-1472.59 875.48,-1472.55 877.77,-1479.16\"/>\n</g>\n<!-- Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;negotiate -->\n<g id=\"edge245\" class=\"edge\">\n<title>Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;negotiate</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.66,-1491.66C316.43,-1494.78 623.61,-1503.92 737.68,-1507.31\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"737.31,-1510.83 747.41,-1507.63 737.52,-1503.84 737.31,-1510.83\"/>\n</g>\n<!-- Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;Get\nInterior\nViews\nof\nExterior\nResources -->\n<g id=\"edge246\" class=\"edge\">\n<title>Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;Get\nInterior\nViews\nof\nExterior\nResources</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.99,-1544.91C153.79,-1555.49 161.82,-1563 175.08,-1563 183.78,-1563 190.22,-1559.76 194.42,-1554.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"197.89,-1556.43 199.16,-1545.91 191.61,-1553.34 197.89,-1556.43\"/>\n</g>\n<!-- Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;Telegram -->\n<g id=\"edge247\" class=\"edge\">\n<title>Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;Telegram</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.52,-1453.88C228.36,-1437.06 249.08,-1417.21 268.83,-1400.6 279.34,-1391.76 291.29,-1382.75 302.25,-1374.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"304.05,-1377.16 310.17,-1368.51 300,-1371.45 304.05,-1377.16\"/>\n</g>\n<!-- Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;Ambassador -->\n<g id=\"edge248\" class=\"edge\">\n<title>Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;Ambassador</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.5,-1436.26C231.64,-1388.21 266.12,-1325.42 268.83,-1323.6 324.73,-1286.02 404.81,-1284.1 456.96,-1287.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"456.39,-1291.49 466.65,-1288.84 456.98,-1284.51 456.39,-1291.49\"/>\n</g>\n<!-- Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;Negotiation\nof\nMeaning -->\n<g id=\"edge249\" class=\"edge\">\n<title>Get\nInterior\nViews\nof\nExterior\nResources&#45;&gt;Negotiation\nof\nMeaning</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.64,-1467.37C228.67,-1459.84 249.52,-1452.41 268.83,-1447.6 385.93,-1418.4 527.43,-1404.09 601.51,-1401.25\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"601.49,-1404.72 611.37,-1400.9 601.27,-1397.72 601.49,-1404.72\"/>\n</g>\n<!-- Telegram&#45;&gt;Telegram -->\n<g id=\"edge250\" class=\"edge\">\n<title>Telegram&#45;&gt;Telegram</title>\n<path fill=\"none\" stroke=\"black\" d=\"M309.25,-1368.38C304.25,-1377.91 314.05,-1386.6 338.66,-1386.6 353.26,-1386.6 362.65,-1383.54 366.82,-1379.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"370.39,-1379.72 368.06,-1369.38 363.43,-1378.91 370.39,-1379.72\"/>\n</g>\n<!-- Telegram&#45;&gt;Ambassador -->\n<g id=\"edge251\" class=\"edge\">\n<title>Telegram&#45;&gt;Ambassador</title>\n<path fill=\"none\" stroke=\"black\" d=\"M373.19,-1334.03C397.18,-1324.78 429.94,-1313.71 457.32,-1305.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"457.91,-1308.68 466.52,-1302.51 455.94,-1301.97 457.91,-1308.68\"/>\n</g>\n<!-- Telegram&#45;&gt;Negotiation\nof\nMeaning -->\n<g id=\"edge252\" class=\"edge\">\n<title>Telegram&#45;&gt;Negotiation\nof\nMeaning</title>\n<path fill=\"none\" stroke=\"black\" d=\"M373.42,-1351.94C428.36,-1358.37 537.43,-1376.6 601.71,-1389.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"600.89,-1393.49 611.39,-1392.13 602.33,-1386.64 600.89,-1393.49\"/>\n</g>\n<!-- Ambassador&#45;&gt;Telegram -->\n<g id=\"edge253\" class=\"edge\">\n<title>Ambassador&#45;&gt;Telegram</title>\n<path fill=\"none\" stroke=\"black\" d=\"M472.41,-1312.49C446.32,-1322.4 411.26,-1334.07 383.72,-1342.06\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"382.87,-1338.95 374.19,-1345.04 384.77,-1345.69 382.87,-1338.95\"/>\n</g>\n<!-- Ambassador&#45;&gt;Ambassador -->\n<g id=\"edge254\" class=\"edge\">\n<title>Ambassador&#45;&gt;Ambassador</title>\n<path fill=\"none\" stroke=\"black\" d=\"M484.71,-1312.38C480.34,-1321.91 488.91,-1330.6 510.41,-1330.6 523.18,-1330.6 531.38,-1327.54 535.03,-1323.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"538.59,-1323.68 536.11,-1313.38 531.62,-1322.98 538.59,-1323.68\"/>\n</g>\n<!-- Ambassador&#45;&gt;Negotiation\nof\nMeaning -->\n<g id=\"edge255\" class=\"edge\">\n<title>Ambassador&#45;&gt;Negotiation\nof\nMeaning</title>\n<path fill=\"none\" stroke=\"black\" d=\"M545.8,-1312.41C555.67,-1319.64 566.43,-1327.94 576.34,-1335.6 589.68,-1345.91 604.32,-1357.26 617.16,-1367.78\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"614.38,-1370.85 624.3,-1374.55 618.85,-1365.46 614.38,-1370.85\"/>\n</g>\n<!-- Negotiation\nof\nMeaning&#45;&gt;negotiate -->\n<g id=\"edge260\" class=\"edge\">\n<title>Negotiation\nof\nMeaning&#45;&gt;negotiate</title>\n<path fill=\"none\" stroke=\"black\" d=\"M689.31,-1432.57C708.64,-1448.6 732.43,-1468.33 750.92,-1483.67\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"748.34,-1486.91 758.27,-1490.6 752.81,-1481.52 748.34,-1486.91\"/>\n</g>\n<!-- Negotiation\nof\nMeaning&#45;&gt;Get\nInterior\nViews\nof\nExterior\nResources -->\n<g id=\"edge261\" class=\"edge\">\n<title>Negotiation\nof\nMeaning&#45;&gt;Get\nInterior\nViews\nof\nExterior\nResources</title>\n<path fill=\"none\" stroke=\"black\" d=\"M612.37,-1411.69C542.02,-1420.66 391.94,-1434.91 268.83,-1465.6 253.29,-1469.47 236.76,-1475.04 222.01,-1480.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"220.95,-1477.13 212.64,-1483.7 223.23,-1483.75 220.95,-1477.13\"/>\n</g>\n<!-- Negotiation\nof\nMeaning&#45;&gt;Telegram -->\n<g id=\"edge257\" class=\"edge\">\n<title>Negotiation\nof\nMeaning&#45;&gt;Telegram</title>\n<path fill=\"none\" stroke=\"black\" d=\"M612.39,-1401.51C553.75,-1394.26 444.81,-1375.86 383.86,-1362.97\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"384.93,-1359.4 374.42,-1360.71 383.45,-1366.24 384.93,-1359.4\"/>\n</g>\n<!-- Negotiation\nof\nMeaning&#45;&gt;Ambassador -->\n<g id=\"edge258\" class=\"edge\">\n<title>Negotiation\nof\nMeaning&#45;&gt;Ambassador</title>\n<path fill=\"none\" stroke=\"black\" d=\"M612.54,-1381.27C600.88,-1372.6 588.11,-1362.7 576.34,-1353.6 562.16,-1342.64 546.22,-1330.37 533.68,-1319.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"536.42,-1317.51 526.61,-1313.51 531.78,-1322.76 536.42,-1317.51\"/>\n</g>\n<!-- Negotiation\nof\nMeaning&#45;&gt;Negotiation\nof\nMeaning -->\n<g id=\"edge259\" class=\"edge\">\n<title>Negotiation\nof\nMeaning&#45;&gt;Negotiation\nof\nMeaning</title>\n<path fill=\"none\" stroke=\"black\" d=\"M629.28,-1432.64C629.03,-1442.69 637.06,-1450.8 653.39,-1450.8 663.59,-1450.8 670.55,-1447.63 674.28,-1442.8\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"677.82,-1444.23 677.49,-1433.64 671.14,-1442.12 677.82,-1444.23\"/>\n</g>\n<!-- Message -->\n<g id=\"node194\" class=\"node\">\n<title>Message</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-1435.4\" font-family=\"Times,serif\" font-size=\"14.00\">Message</text>\n</g>\n<!-- Negotiation\nof\nMeaning&#45;&gt;Message -->\n<g id=\"edge256\" class=\"edge\">\n<title>Negotiation\nof\nMeaning&#45;&gt;Message</title>\n<path fill=\"none\" stroke=\"black\" d=\"M694.09,-1414.89C708.56,-1419.01 724.95,-1423.67 739.56,-1427.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"738.26,-1431.38 748.84,-1430.75 740.18,-1424.64 738.26,-1431.38\"/>\n</g>\n<!-- Meaning\n(Sinn) -->\n<g id=\"node195\" class=\"node\">\n<title>Meaning\n(Sinn)</title>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-1386.8\" font-family=\"Times,serif\" font-size=\"14.00\">Meaning</text>\n<text text-anchor=\"middle\" x=\"781.97\" y=\"-1370\" font-family=\"Times,serif\" font-size=\"14.00\">(Sinn)</text>\n</g>\n<!-- Negotiation\nof\nMeaning&#45;&gt;Meaning\n(Sinn) -->\n<g id=\"edge262\" class=\"edge\">\n<title>Negotiation\nof\nMeaning&#45;&gt;Meaning\n(Sinn)</title>\n<path fill=\"none\" stroke=\"black\" d=\"M694.09,-1397.01C708.3,-1394.66 724.37,-1391.99 738.79,-1389.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"739.14,-1392.92 748.43,-1387.83 737.99,-1386.02 739.14,-1392.92\"/>\n</g>\n<!-- Semantic\nMatchmaker&#45;&gt;Semantic\nMatchmaker -->\n<g id=\"edge264\" class=\"edge\">\n<title>Semantic\nMatchmaker&#45;&gt;Semantic\nMatchmaker</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.37,-1324.36C147.68,-1333.99 155.91,-1342.4 175.08,-1342.4 186.46,-1342.4 193.98,-1339.43 197.65,-1335.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"201.25,-1335.85 199.78,-1325.36 194.39,-1334.48 201.25,-1335.85\"/>\n</g>\n<!-- Object\nHas\nTwo\nPublic\nBillboards -->\n<g id=\"node196\" class=\"node\">\n<title>Object\nHas\nTwo\nPublic\nBillboards</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1222\" font-family=\"Times,serif\" font-size=\"14.00\">Object</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1205.2\" font-family=\"Times,serif\" font-size=\"14.00\">Has</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1188.4\" font-family=\"Times,serif\" font-size=\"14.00\">Two</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1171.6\" font-family=\"Times,serif\" font-size=\"14.00\">Public</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1154.8\" font-family=\"Times,serif\" font-size=\"14.00\">Billboards</text>\n</g>\n<!-- Semantic\nMatchmaker&#45;&gt;Object\nHas\nTwo\nPublic\nBillboards -->\n<g id=\"edge263\" class=\"edge\">\n<title>Semantic\nMatchmaker&#45;&gt;Object\nHas\nTwo\nPublic\nBillboards</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.55,-1282.91C217.97,-1278.3 225.71,-1273.37 232.83,-1268.6 252.89,-1255.17 274.58,-1239.62 292.99,-1226.11\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.77,-1228.41 300.74,-1219.66 290.62,-1222.77 294.77,-1228.41\"/>\n</g>\n<!-- Loose\nCoupling -->\n<g id=\"node197\" class=\"node\">\n<title>Loose\nCoupling</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1111.8\" font-family=\"Times,serif\" font-size=\"14.00\">Loose</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-1095\" font-family=\"Times,serif\" font-size=\"14.00\">Coupling</text>\n</g>\n<!-- Semantic\nMatchmaker&#45;&gt;Loose\nCoupling -->\n<g id=\"edge265\" class=\"edge\">\n<title>Semantic\nMatchmaker&#45;&gt;Loose\nCoupling</title>\n<path fill=\"none\" stroke=\"black\" d=\"M218.18,-1282.82C223.69,-1278.71 228.8,-1273.97 232.83,-1268.6 269.04,-1220.28 229.29,-1183.23 268.83,-1137.6 275.73,-1129.63 285.15,-1123.7 294.8,-1119.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.86,-1122.26 303.84,-1115.29 293.25,-1115.77 295.86,-1122.26\"/>\n</g>\n<!-- General\nGame\nPlaying&#45;&gt;Michael\nGenesereth -->\n<g id=\"edge266\" class=\"edge\">\n<title>General\nGame\nPlaying&#45;&gt;Michael\nGenesereth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.13,-1182.59C214.89,-1176.48 225.21,-1168.69 232.83,-1159.6 258.38,-1129.09 240.65,-1105.71 268.83,-1077.6 274.67,-1071.78 281.83,-1067 289.29,-1063.1\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.62,-1065.88 298.2,-1058.48 287.66,-1059.54 290.62,-1065.88\"/>\n</g>\n<!-- Strongtalk&#45;&gt;Strongtalk -->\n<g id=\"edge268\" class=\"edge\">\n<title>Strongtalk&#45;&gt;Strongtalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.91,-1132.38C146.81,-1141.91 154.86,-1150.6 175.08,-1150.6 187.08,-1150.6 194.79,-1147.54 198.22,-1143.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"201.78,-1143.67 199.24,-1133.38 194.81,-1143 201.78,-1143.67\"/>\n</g>\n<!-- Smalltalk&#45;80 -->\n<g id=\"node198\" class=\"node\">\n<title>Smalltalk&#45;80</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-986.4\" font-family=\"Times,serif\" font-size=\"14.00\">Smalltalk&#45;80</text>\n</g>\n<!-- Strongtalk&#45;&gt;Smalltalk&#45;80 -->\n<g id=\"edge267\" class=\"edge\">\n<title>Strongtalk&#45;&gt;Smalltalk&#45;80</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.96,-1101.89C219.45,-1098.1 226.87,-1093.37 232.83,-1087.6 257.95,-1063.25 242.87,-1041.06 268.83,-1017.6 273.53,-1013.35 278.97,-1009.74 284.7,-1006.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"285.98,-1009.47 293.52,-1002.02 282.98,-1003.14 285.98,-1009.47\"/>\n</g>\n<!-- Name&#45;&gt;Event -->\n<g id=\"edge269\" class=\"edge\">\n<title>Name&#45;&gt;Event</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.61,-4204.83C378.85,-4209.5 394.96,-4215.95 408.48,-4223.6 607.61,-4336.21 814.65,-4520.43 886.58,-4586.79\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"883.57,-4588.7 893.29,-4592.93 888.33,-4583.57 883.57,-4588.7\"/>\n</g>\n<!-- Name&#45;&gt;Distinction -->\n<g id=\"edge270\" class=\"edge\">\n<title>Name&#45;&gt;Distinction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.37,-4200.22C380.23,-4203.68 398.01,-4210.44 408.48,-4223.6 476.21,-4308.68 372.87,-4383.77 444.48,-4465.6 484.65,-4511.49 538.88,-4455.47 576.34,-4503.6 614.1,-4552.11 600.02,-5549.37 612.34,-5609.6 617.77,-5636.17 629.42,-5664.8 638.76,-5685.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"635.95,-5686.38 643.38,-5693.93 642.28,-5683.39 635.95,-5686.38\"/>\n</g>\n<!-- It’s\nAll\nin\na\nName -->\n<g id=\"node199\" class=\"node\">\n<title>It’s\nAll\nin\na\nName</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4440\" font-family=\"Times,serif\" font-size=\"14.00\">It’s</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4423.2\" font-family=\"Times,serif\" font-size=\"14.00\">All</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4406.4\" font-family=\"Times,serif\" font-size=\"14.00\">in</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4389.6\" font-family=\"Times,serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4372.8\" font-family=\"Times,serif\" font-size=\"14.00\">Name</text>\n</g>\n<!-- Name&#45;&gt;It’s\nAll\nin\na\nName -->\n<g id=\"edge271\" class=\"edge\">\n<title>Name&#45;&gt;It’s\nAll\nin\na\nName</title>\n<path fill=\"none\" stroke=\"black\" d=\"M365.45,-4200.89C379.97,-4204.57 397.36,-4211.33 408.48,-4223.6 447.89,-4267.06 413.79,-4300.6 444.48,-4350.6 452.48,-4363.63 464.09,-4375.6 475.28,-4385.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.77,-4388.67 482.69,-4392.39 477.25,-4383.3 472.77,-4388.67\"/>\n</g>\n<!-- Logic -->\n<g id=\"node200\" class=\"node\">\n<title>Logic</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-932.4\" font-family=\"Times,serif\" font-size=\"14.00\">Logic</text>\n</g>\n<!-- Extensionality&#45;&gt;Logic -->\n<g id=\"edge272\" class=\"edge\">\n<title>Extensionality&#45;&gt;Logic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M223.25,-916.07C248.06,-920.52 278.03,-925.9 301.07,-930.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.31,-933.63 310.77,-931.95 301.54,-926.74 300.31,-933.63\"/>\n</g>\n<!-- Equality -->\n<g id=\"node201\" class=\"node\">\n<title>Equality</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-878.4\" font-family=\"Times,serif\" font-size=\"14.00\">Equality</text>\n</g>\n<!-- Extensionality&#45;&gt;Equality -->\n<g id=\"edge273\" class=\"edge\">\n<title>Extensionality&#45;&gt;Equality</title>\n<path fill=\"none\" stroke=\"black\" d=\"M223.25,-900.3C246.36,-896.73 273.93,-892.46 296.22,-889.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.67,-892.33 306.02,-887.34 295.6,-885.41 296.67,-892.33\"/>\n</g>\n<!-- Attribution\n(Zurechnung) -->\n<g id=\"node202\" class=\"node\">\n<title>Attribution\n(Zurechnung)</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-829.8\" font-family=\"Times,serif\" font-size=\"14.00\">Attribution</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-813\" font-family=\"Times,serif\" font-size=\"14.00\">(Zurechnung)</text>\n</g>\n<!-- Attribution&#45;&gt;Attribution\n(Zurechnung) -->\n<g id=\"edge274\" class=\"edge\">\n<title>Attribution&#45;&gt;Attribution\n(Zurechnung)</title>\n<path fill=\"none\" stroke=\"black\" d=\"M213.96,-847.04C234.08,-843.55 259.2,-839.2 281.54,-835.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"281.99,-838.62 291.25,-833.47 280.8,-831.73 281.99,-838.62\"/>\n</g>\n<!-- Attributionsforschung -->\n<g id=\"node203\" class=\"node\">\n<title>Attributionsforschung</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-764.4\" font-family=\"Times,serif\" font-size=\"14.00\">Attributionsforschung</text>\n</g>\n<!-- Attribution&#45;&gt;Attributionsforschung -->\n<g id=\"edge275\" class=\"edge\">\n<title>Attribution&#45;&gt;Attributionsforschung</title>\n<path fill=\"none\" stroke=\"black\" d=\"M209.46,-835.6C217.23,-831.19 225.4,-826.36 232.83,-821.6 249.45,-810.96 251.5,-805.06 268.83,-795.6 271.72,-794.02 274.72,-792.49 277.79,-791.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"279.09,-793.8 286.72,-786.46 276.17,-787.44 279.09,-793.8\"/>\n</g>\n<!-- Contents\nIs\nIntention\nObscuring&#45;&gt;Intention -->\n<g id=\"edge276\" class=\"edge\">\n<title>Contents\nIs\nIntention\nObscuring&#45;&gt;Intention</title>\n<path fill=\"none\" stroke=\"black\" d=\"M212.24,-2269.81C220.18,-2276.56 227.73,-2284.58 232.83,-2293.6 285.86,-2387.52 197.14,-2453.01 268.83,-2533.6 311.58,-2581.66 367.75,-2521.82 408.48,-2571.6 484.79,-2664.85 374.32,-3014.65 444.48,-3112.6 450.11,-3120.46 458.47,-3126.04 467.34,-3130\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"465.85,-3133.56 476.44,-3133.82 468.32,-3127.01 465.85,-3133.56\"/>\n</g>\n<!-- Laws\nof\nForm\nObjects -->\n<g id=\"node204\" class=\"node\">\n<title>Laws\nof\nForm\nObjects</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2507.6\" font-family=\"Times,serif\" font-size=\"14.00\">Laws</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2490.8\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2474\" font-family=\"Times,serif\" font-size=\"14.00\">Form</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-2457.2\" font-family=\"Times,serif\" font-size=\"14.00\">Objects</text>\n</g>\n<!-- Contents\nIs\nIntention\nObscuring&#45;&gt;Laws\nof\nForm\nObjects -->\n<g id=\"edge277\" class=\"edge\">\n<title>Contents\nIs\nIntention\nObscuring&#45;&gt;Laws\nof\nForm\nObjects</title>\n<path fill=\"none\" stroke=\"black\" d=\"M211.95,-2270.41C219.81,-2277.09 227.39,-2284.93 232.83,-2293.6 268.35,-2350.21 230.72,-2384.7 268.83,-2439.6 276.84,-2451.14 288.66,-2460.68 300.27,-2468.09\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"298.06,-2471.44 308.44,-2473.56 301.65,-2465.43 298.06,-2471.44\"/>\n</g>\n<!-- DbSoup&#45;&gt;A\nSoup\nof\nObjects -->\n<g id=\"edge278\" class=\"edge\">\n<title>DbSoup&#45;&gt;A\nSoup\nof\nObjects</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.71,-749.31C232,-738.41 270.57,-722.42 299.22,-710.54\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.39,-713.43 308.29,-706.36 297.71,-706.96 300.39,-713.43\"/>\n</g>\n<!-- Objective&#45;Lepiter&#45;&gt;Objective&#45;Lepiter -->\n<g id=\"edge282\" class=\"edge\">\n<title>Objective&#45;Lepiter&#45;&gt;Objective&#45;Lepiter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.91,-615.38C146.81,-624.91 154.86,-633.6 175.08,-633.6 187.08,-633.6 194.79,-630.54 198.22,-626.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"201.78,-626.67 199.24,-616.38 194.81,-626 201.78,-626.67\"/>\n</g>\n<!-- Objective&#45;Lepiter&#45;&gt;Sean\nDeNigris -->\n<g id=\"edge279\" class=\"edge\">\n<title>Objective&#45;Lepiter&#45;&gt;Sean\nDeNigris</title>\n<path fill=\"none\" stroke=\"black\" d=\"M232.59,-604.94C252.98,-607.59 275.64,-610.54 294.68,-613.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.06,-616.59 304.43,-614.41 294.97,-609.65 294.06,-616.59\"/>\n</g>\n<!-- Objective&#45;Lepiter&#45;&gt;UID&#45;Based\nLinks -->\n<g id=\"edge280\" class=\"edge\">\n<title>Objective&#45;Lepiter&#45;&gt;UID&#45;Based\nLinks</title>\n<path fill=\"none\" stroke=\"black\" d=\"M213.55,-579.74C236.08,-569 265,-555.22 289.25,-543.67\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.46,-546.49 297.98,-539.03 287.45,-540.17 290.46,-546.49\"/>\n</g>\n<!-- Objective&#45;Lepiter&#45;&gt;Lepiter -->\n<g id=\"edge281\" class=\"edge\">\n<title>Objective&#45;Lepiter&#45;&gt;Lepiter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M232.73,-590.85C280.58,-584.05 350.38,-571.51 408.48,-550.6 430.94,-542.52 454.53,-530.14 473.25,-519.27\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"474.75,-521.86 481.57,-513.76 471.18,-515.84 474.75,-521.86\"/>\n</g>\n<!-- Computer -->\n<g id=\"node205\" class=\"node\">\n<title>Computer</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-614.4\" font-family=\"Times,serif\" font-size=\"14.00\">Computer</text>\n</g>\n<!-- Sean\nDeNigris&#45;&gt;Computer -->\n<g id=\"edge283\" class=\"edge\">\n<title>Sean\nDeNigris&#45;&gt;Computer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M371.99,-618.6C398,-618.6 434.88,-618.6 463.88,-618.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"463.57,-622.1 473.57,-618.6 463.57,-615.1 463.57,-622.1\"/>\n</g>\n<!-- UID&#45;Based\nLinks&#45;&gt;Lepiter -->\n<g id=\"edge284\" class=\"edge\">\n<title>UID&#45;Based\nLinks&#45;&gt;Lepiter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M378.18,-515.15C406.12,-511.2 443.73,-505.89 471.52,-501.96\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.99,-505.28 481.4,-500.42 471.01,-498.35 471.99,-505.28\"/>\n</g>\n<!-- Glamorous\nToolkit\nBook -->\n<g id=\"node206\" class=\"node\">\n<title>Glamorous\nToolkit\nBook</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-574.2\" font-family=\"Times,serif\" font-size=\"14.00\">Glamorous</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-557.4\" font-family=\"Times,serif\" font-size=\"14.00\">Toolkit</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-540.6\" font-family=\"Times,serif\" font-size=\"14.00\">Book</text>\n</g>\n<!-- Lepiter&#45;&gt;Glamorous\nToolkit\nBook -->\n<g id=\"edge285\" class=\"edge\">\n<title>Lepiter&#45;&gt;Glamorous\nToolkit\nBook</title>\n<path fill=\"none\" stroke=\"black\" d=\"M538.59,-509.13C557.26,-517.74 582.54,-529.39 604.53,-539.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"602.82,-543.06 613.36,-544.07 605.75,-536.7 602.82,-543.06\"/>\n</g>\n<!-- Markdown -->\n<g id=\"node207\" class=\"node\">\n<title>Markdown</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-492.4\" font-family=\"Times,serif\" font-size=\"14.00\">Markdown</text>\n</g>\n<!-- Lepiter&#45;&gt;Markdown -->\n<g id=\"edge286\" class=\"edge\">\n<title>Lepiter&#45;&gt;Markdown</title>\n<path fill=\"none\" stroke=\"black\" d=\"M538.59,-496.6C557.14,-496.6 582.22,-496.6 604.12,-496.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"603.9,-500.1 613.9,-496.6 603.9,-493.1 603.9,-500.1\"/>\n</g>\n<!-- Glamorous\nToolkit -->\n<g id=\"node208\" class=\"node\">\n<title>Glamorous\nToolkit</title>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-443.8\" font-family=\"Times,serif\" font-size=\"14.00\">Glamorous</text>\n<text text-anchor=\"middle\" x=\"653.39\" y=\"-427\" font-family=\"Times,serif\" font-size=\"14.00\">Toolkit</text>\n</g>\n<!-- Lepiter&#45;&gt;Glamorous\nToolkit -->\n<g id=\"edge287\" class=\"edge\">\n<title>Lepiter&#45;&gt;Glamorous\nToolkit</title>\n<path fill=\"none\" stroke=\"black\" d=\"M538.59,-485.61C557.17,-478.1 582.31,-467.93 604.23,-459.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"605.41,-461.97 613.36,-454.97 602.78,-455.48 605.41,-461.97\"/>\n</g>\n<!-- Represent\nArbitrary\nDomain\nObjects&#45;&gt;UID&#45;Based\nLinks -->\n<g id=\"edge288\" class=\"edge\">\n<title>Represent\nArbitrary\nDomain\nObjects&#45;&gt;UID&#45;Based\nLinks</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.74,-493.11C233.38,-498.01 263.28,-504.49 288.37,-509.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"287.29,-513.49 297.8,-512.18 288.77,-506.65 287.29,-513.49\"/>\n</g>\n<!-- Represent\nArbitrary\nDomain\nObjects&#45;&gt;Lepiter -->\n<g id=\"edge289\" class=\"edge\">\n<title>Represent\nArbitrary\nDomain\nObjects&#45;&gt;Lepiter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.74,-485.94C256.17,-486.47 338.32,-487.76 408.48,-490.6 429.35,-491.44 452.62,-492.8 471.56,-494.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.23,-497.56 481.44,-494.72 471.69,-490.58 471.23,-497.56\"/>\n</g>\n<!-- Slug&#45;&gt;Where\nPages\nLive -->\n<g id=\"edge290\" class=\"edge\">\n<title>Slug&#45;&gt;Where\nPages\nLive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.27,-6677.38C559.33,-6673.78 591.29,-6668.57 615.94,-6664.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"616.39,-6667.86 625.69,-6662.79 615.26,-6660.95 616.39,-6667.86\"/>\n</g>\n<!-- Sitemap&#45;&gt;Convert\na\nSitemap\nto\na\nDITA\nMap -->\n<g id=\"edge297\" class=\"edge\">\n<title>Sitemap&#45;&gt;Convert\na\nSitemap\nto\na\nDITA\nMap</title>\n<path fill=\"none\" stroke=\"black\" d=\"M187.07,-4439.56C202.89,-4469.89 234.01,-4531.47 268.83,-4578.6 278.18,-4591.26 289.58,-4604.01 300.39,-4615.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"297.34,-4617.54 306.75,-4622.43 302.44,-4612.74 297.34,-4617.54\"/>\n</g>\n<!-- XML -->\n<g id=\"node209\" class=\"node\">\n<title>XML</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4360.4\" font-family=\"Times,serif\" font-size=\"14.00\">XML</text>\n</g>\n<!-- Sitemap&#45;&gt;XML -->\n<g id=\"edge291\" class=\"edge\">\n<title>Sitemap&#45;&gt;XML</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.71,-4411.15C232.73,-4401.61 272.72,-4387.51 301.59,-4377.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.41,-4380.39 310.68,-4373.76 300.08,-4373.79 302.41,-4380.39\"/>\n</g>\n<!-- crawl -->\n<g id=\"node210\" class=\"node\">\n<title>crawl</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4306.4\" font-family=\"Times,serif\" font-size=\"14.00\">crawl</text>\n</g>\n<!-- Sitemap&#45;&gt;crawl -->\n<g id=\"edge292\" class=\"edge\">\n<title>Sitemap&#45;&gt;crawl</title>\n<path fill=\"none\" stroke=\"black\" d=\"M191.99,-4403.78C209.36,-4385.21 238.73,-4356.26 268.83,-4337.6 278.91,-4331.35 290.69,-4326.09 301.62,-4321.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"302.54,-4324.95 310.76,-4318.27 300.17,-4318.37 302.54,-4324.95\"/>\n</g>\n<!-- Sitemap\nProtocol -->\n<g id=\"node211\" class=\"node\">\n<title>Sitemap\nProtocol</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4257.8\" font-family=\"Times,serif\" font-size=\"14.00\">Sitemap</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4241\" font-family=\"Times,serif\" font-size=\"14.00\">Protocol</text>\n</g>\n<!-- Sitemap&#45;&gt;Sitemap\nProtocol -->\n<g id=\"edge293\" class=\"edge\">\n<title>Sitemap&#45;&gt;Sitemap\nProtocol</title>\n<path fill=\"none\" stroke=\"black\" d=\"M183.84,-4404C197.31,-4375.25 227.59,-4317.99 268.83,-4283.6 277.08,-4276.72 287.14,-4271.17 297,-4266.79\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"298.19,-4269.68 306.12,-4262.65 295.54,-4263.2 298.19,-4269.68\"/>\n</g>\n<!-- Wiki\nSitemap -->\n<g id=\"node212\" class=\"node\">\n<title>Wiki\nSitemap</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4561.8\" font-family=\"Times,serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4545\" font-family=\"Times,serif\" font-size=\"14.00\">Sitemap</text>\n</g>\n<!-- Sitemap&#45;&gt;Wiki\nSitemap -->\n<g id=\"edge294\" class=\"edge\">\n<title>Sitemap&#45;&gt;Wiki\nSitemap</title>\n<path fill=\"none\" stroke=\"black\" d=\"M187.96,-4439.53C203.98,-4462.54 234.49,-4502.48 268.83,-4527.6 277.57,-4534 287.9,-4539.4 297.85,-4543.79\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.43,-4547.4 307.01,-4547.98 299.1,-4540.93 296.43,-4547.4\"/>\n</g>\n<!-- Types\nof\nSitemap -->\n<g id=\"node213\" class=\"node\">\n<title>Types\nof\nSitemap</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4502.2\" font-family=\"Times,serif\" font-size=\"14.00\">Types</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4485.4\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4468.6\" font-family=\"Times,serif\" font-size=\"14.00\">Sitemap</text>\n</g>\n<!-- Sitemap&#45;&gt;Types\nof\nSitemap -->\n<g id=\"edge295\" class=\"edge\">\n<title>Sitemap&#45;&gt;Types\nof\nSitemap</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.71,-4434.07C231.6,-4444.97 269.38,-4460.87 297.89,-4472.86\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.36,-4476.44 306.93,-4477.09 299.07,-4469.99 296.36,-4476.44\"/>\n</g>\n<!-- Federation\nDirectory -->\n<g id=\"node214\" class=\"node\">\n<title>Federation\nDirectory</title>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4425.8\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n<text text-anchor=\"middle\" x=\"338.66\" y=\"-4409\" font-family=\"Times,serif\" font-size=\"14.00\">Directory</text>\n</g>\n<!-- Sitemap&#45;&gt;Federation\nDirectory -->\n<g id=\"edge296\" class=\"edge\">\n<title>Sitemap&#45;&gt;Federation\nDirectory</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.71,-4421.6C229.25,-4421.6 262.64,-4421.6 289.94,-4421.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.83,-4425.1 299.83,-4421.6 289.83,-4418.1 289.83,-4425.1\"/>\n</g>\n<!-- Links&#45;&gt;Slug -->\n<g id=\"edge298\" class=\"edge\">\n<title>Links&#45;&gt;Slug</title>\n<path fill=\"none\" stroke=\"black\" d=\"M201.97,-6389.35C256.26,-6387.32 379.36,-6385.97 408.48,-6413.6 485.46,-6486.62 381.79,-6564 444.48,-6649.6 451.57,-6659.28 462.41,-6666.19 473.21,-6671.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"471.84,-6674.67 482.42,-6675.11 474.42,-6668.17 471.84,-6674.67\"/>\n</g>\n<!-- Links&#45;&gt;Links -->\n<g id=\"edge299\" class=\"edge\">\n<title>Links&#45;&gt;Links</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.91,-6408.38C146.81,-6417.91 154.86,-6426.6 175.08,-6426.6 187.08,-6426.6 194.79,-6423.54 198.22,-6419.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"201.78,-6419.67 199.24,-6409.38 194.81,-6419 201.78,-6419.67\"/>\n</g>\n<!-- Regular\nExpressions\nin\nPharo&#45;&gt;Regular\nExpressions\nin\nPharo -->\n<g id=\"edge300\" class=\"edge\">\n<title>Regular\nExpressions\nin\nPharo&#45;&gt;Regular\nExpressions\nin\nPharo</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150.03,-75.02C151.24,-85.32 159.59,-93.2 175.08,-93.2 185,-93.2 191.99,-89.97 196.05,-84.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"199.57,-86.6 200.12,-76.02 193.09,-83.94 199.57,-86.6\"/>\n</g>\n<!-- Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Story -->\n<g id=\"edge304\" class=\"edge\">\n<title>Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Story</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.55,-4710.86C384.11,-4738.55 400.23,-4773.88 408.48,-4807.6 493.32,-5154.17 363.87,-5262.02 444.48,-5609.6 454.86,-5654.35 478.3,-5702.44 493.99,-5731.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"491.3,-5732.91 499.18,-5739.99 497.44,-5729.54 491.3,-5732.91\"/>\n</g>\n<!-- Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Slug -->\n<g id=\"edge302\" class=\"edge\">\n<title>Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Slug</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.54,-4710.1C384.29,-4737.86 400.59,-4773.51 408.48,-4807.6 453.85,-5003.46 365.76,-6431.62 444.48,-6616.6 451.08,-6632.1 463.29,-6645.88 475.35,-6656.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.72,-6659.92 482.61,-6663.73 477.25,-6654.59 472.72,-6659.92\"/>\n</g>\n<!-- Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Sitemap -->\n<g id=\"edge301\" class=\"edge\">\n<title>Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Sitemap</title>\n<path fill=\"none\" stroke=\"black\" d=\"M307.75,-4639.92C294.95,-4627.91 280.34,-4612.18 268.83,-4596.6 233.3,-4548.5 201.62,-4485.37 186.12,-4449.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"189.1,-4448.42 182.02,-4440.54 182.64,-4451.11 189.1,-4448.42\"/>\n</g>\n<!-- 01&#45;story&#45;and&#45;journal -->\n<g id=\"node215\" class=\"node\">\n<title>01&#45;story&#45;and&#45;journal</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4688.4\" font-family=\"Times,serif\" font-size=\"14.00\">01&#45;story&#45;and&#45;journal</text>\n</g>\n<!-- Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;01&#45;story&#45;and&#45;journal -->\n<g id=\"edge303\" class=\"edge\">\n<title>Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;01&#45;story&#45;and&#45;journal</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.22,-4665.35C387.18,-4668.84 410.99,-4673.47 433.89,-4677.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"433.18,-4681.54 443.67,-4680.01 434.52,-4674.67 433.18,-4681.54\"/>\n</g>\n<!-- Snippets -->\n<g id=\"node216\" class=\"node\">\n<title>Snippets</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4634.4\" font-family=\"Times,serif\" font-size=\"14.00\">Snippets</text>\n</g>\n<!-- Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Snippets -->\n<g id=\"edge305\" class=\"edge\">\n<title>Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Snippets</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.22,-4655.94C396.47,-4652.57 437.17,-4647.54 467.71,-4643.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"467.97,-4647.13 477.46,-4642.43 467.11,-4640.18 467.97,-4647.13\"/>\n</g>\n<!-- LeHtmlFormatPiece -->\n<g id=\"node217\" class=\"node\">\n<title>LeHtmlFormatPiece</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4580.4\" font-family=\"Times,serif\" font-size=\"14.00\">LeHtmlFormatPiece</text>\n</g>\n<!-- Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;LeHtmlFormatPiece -->\n<g id=\"edge306\" class=\"edge\">\n<title>Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;LeHtmlFormatPiece</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.35,-4645.66C390.27,-4635.93 418.99,-4622.73 444.48,-4611.6 448.11,-4610.02 451.86,-4608.4 455.64,-4606.79\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"456.82,-4609.67 464.66,-4602.54 454.09,-4603.22 456.82,-4609.67\"/>\n</g>\n<!-- Map -->\n<g id=\"node218\" class=\"node\">\n<title>Map</title>\n<text text-anchor=\"middle\" x=\"510.41\" y=\"-4526.4\" font-family=\"Times,serif\" font-size=\"14.00\">Map</text>\n</g>\n<!-- Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Map -->\n<g id=\"edge307\" class=\"edge\">\n<title>Convert\na\nSitemap\nto\na\nDITA\nMap&#45;&gt;Map</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.52,-4628.04C394.44,-4602.19 428.37,-4568.22 444.48,-4557.6 453.41,-4551.71 463.83,-4546.7 473.67,-4542.64\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"474.58,-4545.65 482.63,-4538.77 472.05,-4539.13 474.58,-4545.65\"/>\n</g>\n</g>\n</svg>\n"
    },
    {
      "type": "reference",
      "id": "2539b58d08cc3a99",
      "site": "wiki.ralfbarkow.ch",
      "slug": "the-behavioural-point-of-view",
      "title": "The Behavioural Point of View",
      "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there Static Typing for a Smalltalk derivative?, [[Alan Kay]], [[Quildreen Motta]] et al.)"
    },
    {
      "type": "markdown",
      "id": "119e9c0883c3e602",
      "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see [[Objects as Plain Records of Data]]**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), […]"
    },
    {
      "type": "reference",
      "id": "d62ef64cc402cc99",
      "site": "wiki.ralfbarkow.ch",
      "slug": "unique-item-identifiers",
      "title": "Unique Item Identifiers",
      "text": "Wiki tries to mark every [[Item]] created with a unique identifier. We can think of each item in [[The Federation]] as a database record, and we can refer to it with this unique ID however it might move through the federation, and whatever its contents."
    },
    {
      "type": "markdown",
      "id": "939940910a95498c",
      "text": "> but it doesn’t work **if you see [[Objects as Behaviour]]**."
    },
    {
      "type": "reference",
      "id": "34c346ab600ee576",
      "site": "wiki.ralfbarkow.ch",
      "slug": "behaviors",
      "title": "Behaviors",
      "text": "These define how the [[Card]] acts when a user or another card interacts with it. [[Behavior]]s computation is replicated on all user systems, providing a perfect, bit-identical shared experience. [https://www.croquet.io/microverse-ide/ croquet]"
    },
    {
      "type": "markdown",
      "id": "ec2d82b0d3ace017",
      "text": "# Is there Static Typing for a Smalltalk derivative?"
    },
    {
      "type": "paragraph",
      "id": "f322f7f836e53eb6",
      "text": "[[Alan Kay]], [[Quildreen Motta]] et al. via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
    },
    {
      "type": "paragraph",
      "id": "41f5317aef39a03f",
      "text": "[[Alan Kay]]: Besides looking at the past, we should look to the present and the future."
    },
    {
      "type": "paragraph",
      "id": "ab9254fcd69fd2aa",
      "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.)."
    },
    {
      "type": "paragraph",
      "id": "bdb01a0943055321",
      "text": "An object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “[[Something]]” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services."
    },
    {
      "type": "paragraph",
      "id": "aa5df413d00700d3",
      "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were [[Full-Duplex]].\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like [[LINDA]] as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado."
    },
    {
      "type": "video",
      "id": "ba2fc3eafab5e292",
      "text": "YOUTUBE AnrlSqtpOkw\nTribute to Ted Nelson at Intertwingled Festival by Alan Kay, Bonnie MacBird"
    },
    {
      "type": "paragraph",
      "id": "53e845c239e52dca",
      "text": "Let me start the discussion with readers, here, with three points."
    },
    {
      "type": "markdown",
      "id": "9bc3702b5cb190e9",
      "text": "• **First** we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource."
    },
    {
      "type": "markdown",
      "id": "a8c562d6e5ec0551",
      "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages."
    },
    {
      "type": "markdown",
      "id": "e7fa159d4146488d",
      "text": "We can now imagine that to bind to a resource, our object (and object system) will be able to [[negotiate]] actively with the environment of the object to [[Get Interior Views of Exterior Resources]]."
    },
    {
      "type": "markdown",
      "id": "e9e4e669f11bd271",
      "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “[[Telegram]]”, but has the potential of being a full-fledged [[Ambassador]], so that it can likewise take part in real [[Negotiation of Meaning]] at the receiving end."
    },
    {
      "type": "markdown",
      "id": "357cf905780a950f",
      "text": "• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The [[Semantic Matchmaker]] will make useful loose couplings, and very large, very robust systems can be made."
    },
    {
      "type": "paragraph",
      "id": "7e3bbdd5c2ad3bdf",
      "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing."
    },
    {
      "type": "paragraph",
      "id": "7d7c0360a7068f0b",
      "text": "[[General Game Playing]] [http://ggp.stanford.edu/ site] of [[Michael Genesereth]] at Stanford."
    },
    {
      "type": "paragraph",
      "id": "f8b2b8e3bfc3856d",
      "text": "But consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
    },
    {
      "type": "pagefold",
      "id": "4428c1a77bd206c5",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "9555d42403421e9b",
      "text": "[[Quildreen Motta]]: Other people have already mentioned [[Strongtalk]], and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now."
    },
    {
      "type": "paragraph",
      "id": "8c4354e2ce43ed99",
      "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important."
    },
    {
      "type": "paragraph",
      "id": "2b1bc89d5894a606",
      "text": "Anyway, if we look at the practicality of a type system, we have to consider:"
    },
    {
      "type": "markdown",
      "id": "aa24c609049a7b07",
      "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
    },
    {
      "type": "paragraph",
      "id": "ad74e462298d43ca",
      "text": "So, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”."
    },
    {
      "type": "markdown",
      "id": "d145214312bfec04",
      "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”."
    },
    {
      "type": "paragraph",
      "id": "90c891c42c56fd5f",
      "text": "Most type systems use a concept of “[[Name]]”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular."
    },
    {
      "type": "markdown",
      "id": "8a2e63fd807cd031",
      "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see [[Objects as Behaviour]]."
    },
    {
      "type": "markdown",
      "id": "9361525a4ede8220",
      "text": "A problem with these two approaches is that, if you have something like:"
    },
    {
      "type": "code",
      "id": "e7b758816b456107",
      "text": "    interface Counter { \n      next(): Int; \n    } "
    },
    {
      "type": "markdown",
      "id": "43d1cc7247d60225",
      "text": "Then all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:"
    },
    {
      "type": "code",
      "id": "c339fa62fcdaa88b",
      "text": "    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } "
    },
    {
      "type": "markdown",
      "id": "16c4ba04e0bf75eb",
      "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]].\n\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]."
    },
    {
      "type": "markdown",
      "id": "d8287e16d3ca293f",
      "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed [https://www.khoury.northeastern.edu/home/amal/ page]\n[3] [[Extensionality]]"
    },
    {
      "type": "pagefold",
      "id": "d70e4b9a39bf4c9f",
      "text": "~"
    },
    {
      "type": "image",
      "id": "5625d3b0ad698829",
      "text": "[[Attribution]]",
      "size": "wide",
      "width": 419,
      "height": 254,
      "url": "/assets/plugins/image/2653239a9bf74e3740cc6def90827f66.jpg"
    },
    {
      "type": "paragraph",
      "id": "7f36d85b891c6c4c",
      "text": "⇒ [[Contents Is Intention Obscuring]] ⇒ [[Fluid Not Permanent]] ⇐ [[Unique Item Identifiers]] ⇒ [[A Soup of Objects]]"
    },
    {
      "type": "reference",
      "id": "1de79b51ffb1661b",
      "site": "wiki.ralfbarkow.ch",
      "slug": "dbsoup",
      "title": "DbSoup",
      "text": "A facade presenting something like HPI's soup, a [[Collection]] from which all interesting domain objects are easily reachable."
    },
    {
      "type": "reference",
      "id": "d197705d135ac17f",
      "site": "wiki.ralfbarkow.ch",
      "slug": "per-instance-page",
      "title": "Per-Instance Page",
      "text": "[[DbSoup]] class>>#addSourceForOlReferencedClass:withBuilder:"
    },
    {
      "type": "markdown",
      "id": "36cf5ffe22bed370",
      "text": "> […] usually one wants to add to both [[Objective-Lepiter]] (to support per-instance pages) and [[DbSoup]]"
    },
    {
      "type": "reference",
      "id": "157aa190b39313b4",
      "site": "wiki.ralfbarkow.ch",
      "slug": "objective-lepiter",
      "title": "Objective-Lepiter",
      "text": "[[Sean DeNigris]]' library to have pages representing arbitrary domain objects. [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]"
    },
    {
      "type": "markdown",
      "id": "b54a621c5a756b5e",
      "text": "> The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github]"
    },
    {
      "type": "markdown",
      "id": "724ca2ba46e164bd",
      "text": "⇒ [[Represent Arbitrary Domain Objects]]"
    },
    {
      "type": "paragraph",
      "id": "85921bf7ee14a8ac",
      "text": "Simulated Soup #10 [https://github.com/seandenigris/Dynabook/issues/10 github]"
    },
    {
      "type": "paragraph",
      "id": "ca1ace3b2a6b20f5",
      "text": "Right now, the Soup handles the case of finding an object from a UID.\n\nObjectiveLepiter's model reference map handles a different case: how to build a reference from an object. This is currently done based on the object's class.\n\nSee OlObjectPageType class>>#modelReferenceForClass: and DbSoup class>>#detectUIDString36:\n\nOne solution would be to scrap the OL map completely and hold UIDs instead of reference objects. These could simply be passed to the soup. To manage the dependencies, OL would need a hook to specify an object source (probably a valuable), which for Dynabook would be the Soup, which could be passed as a message send to avoid block use, although maybe that's not important since it could be handled during setup vs. domain materialization. [https://github.com/seandenigris/Dynabook/issues/10#issuecomment-1129169564 github]"
    },
    {
      "type": "paragraph",
      "id": "aed6c23421d22434",
      "text": "Lepiter - Custom Annotations #2 [https://github.com/seandenigris/My-People/issues/2 github]"
    },
    {
      "type": "paragraph",
      "id": "1e7de8ce4f1247dc",
      "text": "Lepiter Custom Annotations #5 [https://github.com/seandenigris/Dynabook/issues/5 github]"
    },
    {
      "type": "pagefold",
      "id": "a0086bca83f09898",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "385e27b454937640",
      "text": "⇒ [[Slug]] ⇐ [[Sitemap]]"
    },
    {
      "type": "markdown",
      "id": "f7e91b42c88e78ab",
      "text": "- [ ] **TODO**: add the external UID as additional metadata \n⇐ [[Represent Arbitrary Domain Objects]]"
    },
    {
      "type": "code",
      "id": "b7fd89657640dd6b",
      "text": "Sitemap get slugs"
    },
    {
      "type": "image",
      "id": "927d7f0dc0841e07",
      "text": "Slug>>#gtJournalFor:",
      "size": "wide",
      "width": 430,
      "height": 262,
      "url": "/assets/plugins/image/cdfaa7d83eeb9fcc945da1c6c9118da2.jpg"
    },
    {
      "type": "paragraph",
      "id": "4862c37c78810ebb",
      "text": "PARKER-WOOD, Aleatha, LONG, Darrell D. E., MILLER, Ethan, RIGAUX, Philippe and ISAACSON, Andy, 2014. A File By Any Other Name: Managing File Names with Metadata. In: Proceedings of International Conference on Systems and Storage. Haifa Israel: ACM. 30 June 2014. p. 1–11. ISBN 978-1-4503-2920-0. DOI 10.1145/2611354.2611367. [https://escholarship.org/content/qt3404q9xv/qt3404q9xv.pdf pdf] [https://escholarship.org/uc/item/3404q9xv permalink] [Accessed 29 December 2023]."
    },
    {
      "type": "markdown",
      "id": "222a8b91d1392efd",
      "text": "**Abstract**. File names are one of the earliest computing abstractions, a string of characters to uniquely identify a file for the system, and to help users remember the contents when they look for it later. They are also a rich source of semantic metadata about files. However, this metadata is unstructured and opaque to the rest of the system. As a result, metadata in file names is often error-prone, and hard to search for. File names can and should be more meaningful and reliable, while simplifying application design and encouraging users and applications to provide more metadata for search."
    },
    {
      "type": "markdown",
      "id": "8236c10ec3d3bc68",
      "text": "We describe a POSIX compliant prototype file system, TrueNames, which demonstrates an alternate approach to naming and metadata, called [[Metadata Aware Naming]]. TrueNames separates the task of uniquely identifying a file from the task of helping the user remember its contents. It captures metadata in a structured format for later indexing, and uses it to generate file names which are correct, regenerable, and disambiguatable by design. TrueNames simplifies application design by providing a consistent interface for metadata aware naming, incurs a low overhead of approximately 15% under realistic workloads, and can simplify a wide variety of data management tasks for both applications and users."
    },
    {
      "type": "code",
      "id": "4710134aa307915a",
      "text": "Slug>>#gtLinksFor:"
    },
    {
      "type": "image",
      "id": "f3f0256ff2704aa2",
      "text": "[[Slug]]>>#gtLinksFor:",
      "size": "wide",
      "width": 430,
      "height": 261,
      "url": "/assets/plugins/image/69febcdece58e045dd74faf0296c27d1.jpg"
    },
    {
      "type": "reference",
      "id": "9ed7e150e43f1e33",
      "site": "wiki.ralfbarkow.ch",
      "slug": "represent-arbitrary-domain-objects",
      "title": "Represent Arbitrary Domain Objects",
      "text": "The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID."
    },
    {
      "type": "markdown",
      "id": "18786771d00890ae",
      "text": "> […] Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github]",
      "alias": "b54a621c5a756b5e"
    },
    {
      "type": "reference",
      "id": "6b1ca2b080db1b52",
      "site": "wiki.ralfbarkow.ch",
      "slug": "objective-lepiter",
      "title": "Objective-Lepiter",
      "text": "[[Sean DeNigris]]' library to have pages representing arbitrary domain objects. [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]"
    },
    {
      "type": "paragraph",
      "id": "ac2297b52b9cb419",
      "text": "⇒ [[Database Slug]]"
    },
    {
      "type": "markdown",
      "id": "62e6b165473b8d7e",
      "text": "2. **Database Slug:**\n   - In the context of databases, a \"slug\" can be used as an index or identifier for a record in a database table. It's a unique identifier that is usually derived from a more human-readable field, such as a name or title.\n   - The purpose of using a slug in a database is to create a unique key that is more user-friendly than an auto-incremented numerical ID. For example, a blog post database might have a \"slug\" column that stores the URL-friendly version of the post title.\n\nIn both cases, the goal is to create a more readable and user-friendly representation of a resource, whether it's in a URL or a database. This improves the user experience and makes it easier to remember or share resource identifiers.\n\nHere's a simple example in Pharo Smalltalk where a slug is generated from a title:\n\n```smalltalk\nObject subclass: #SlugGenerator\n    instanceVariableNames: ''\n    classVariableNames: ''\n    poolDictionaries: ''\n    category: 'YourCategory'\n\nSlugGenerator>>generateSlugFromTitle: aTitle\n    \"Generate a URL-friendly slug from a title\"\n    | slug |\n    slug := aTitle\n                convertTo: 'ascii'\n                asUppercase\n                translating: ' ' to: '-';\n                select: [ :each | each isAlphaNumeric or: [ each = '-' ] ].\n    ^ slug\n```\n\nThis method in `SlugGenerator` takes a title, converts it to ASCII, converts to uppercase, replaces spaces with dashes, and removes non-alphanumeric characters, resulting in a URL-friendly slug.\n\nKeep in mind that the specifics of slug generation may vary based on requirements and conventions used in a particular application or framework. (ChatGPT 3.5)"
    },
    {
      "type": "paragraph",
      "id": "24b6d5ff44f07345",
      "text": "MELÉ, Antonio, 2020. Django 3 By Example. 3rd ed. Packt Publishing. ISBN 978-1-83898-195-2."
    },
    {
      "type": "markdown",
      "id": "cd209740b34c0419",
      "text": "> slug: A short label that contains only letters, numbers, underscores, or hyphens to be used for building beautiful SEO-friendly URLs."
    },
    {
      "type": "paragraph",
      "id": "4c9feb038518a409",
      "text": "In the Meta class of the Product model, you use the index_together meta option to specify an index for the id and slug fields together. You define this index because you plan to query products by both id and slug. Both fields are indexed together to improve performance for queries that utilize the two fields. [⇐ [[Slug]]>>#gtLinksFor:]"
    },
    {
      "type": "markdown",
      "id": "1957401c51a841c0",
      "text": "⇐ Both fields: `Index` (Slug) and `Item` ID ⇒ [[Links]]"
    },
    {
      "type": "markdown",
      "id": "b6d6d66cd0a6d0be",
      "text": "**Note**: The instance variables `slug` and `url` are not yet initialized."
    },
    {
      "type": "markdown",
      "id": "dbb8f844b9556e1c",
      "text": "[[FileReference]]>>#asLepiterZnUrl ⇒ [[ZnUrl]]"
    },
    {
      "type": "code",
      "id": "011ba753bb08f39e",
      "text": "asLepiterZnUrl\n\n\t^ ZnUrl new\n\t\tscheme: #file;\n\t\tsegments: path segments asOrderedCollection.\n"
    },
    {
      "type": "markdown",
      "id": "c3855449e9be96d9",
      "text": "[[FileLocator]]>>#asLepiterZnUrl"
    },
    {
      "type": "paragraph",
      "id": "52e8d0daec3cc229",
      "text": "[[Slug]]>>#slug"
    },
    {
      "type": "code",
      "id": "571389cd2e882308",
      "text": "slug\n\tslug := rawData at: #slug.\n\t^ slug"
    },
    {
      "type": "paragraph",
      "id": "b28394cc127bbaa4",
      "text": "Context:"
    },
    {
      "type": "code",
      "id": "0d4819d043245bd6",
      "text": "Sitemap get slugs"
    },
    {
      "type": "paragraph",
      "id": "e5e3d185aed057b1",
      "text": "⇐ [[Sitemap]]"
    },
    {
      "type": "paragraph",
      "id": "3f56dd8c0b94afbf",
      "text": "NIERSTRASZ, Oscar, [no date]. [[Regular Expressions in Pharo]]. [https://scg.unibe.ch/archive/papers/Nier13aRegEx.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "eb3a1d27c83fb12f",
      "text": "Tutorial example — generating a site map"
    },
    {
      "type": "paragraph",
      "id": "89452d5cec763cf3",
      "text": "In this chapter we will start with a small tutorial example in which we will develop a couple of classes to generate a very simple site map for a web site. We will use regular expressions (i) to identify HTML files, (ii) to strip the full path name of a file down to just the file name, (iii) to extract the title of each web page for the site map, and (iv) to generate a relative path from the root directory of the web site to the HTML files it contains."
    },
    {
      "type": "paragraph",
      "id": "03c3c70efcc13f1f",
      "text": "Our job is to write a simple application that will generate a site map for a web site that we have stored locally on our hard drive. The site map will contain links to each of the HTML files in the web site, using the title of the document as the text of the link. Furthermore, links will be indented to reflect the directory structure of the web site."
    },
    {
      "type": "paragraph",
      "id": "7077d7fc253cc108",
      "text": "We will develop two classes, WebDir and WebPage, to represent directories and web pages. The idea is to create an instance of WebDir which will point to the root directory containing our web site. When we send it the message makeToc, it will walk through the files and directories inside it to build up the site map. It will then create a new file, called toc.html, containing links to all the pages in the web site."
    },
    {
      "type": "paragraph",
      "id": "42948db50dcf4844",
      "text": "In order to generate our site map, we need to generate links to the individual web pages. We can use the document title as the name of the link. We just need to generate the right path to the web page from the root of the web site. Luckily this is trivial — it is simple the full path to the web page minus the full path to the root directory of the web site."
    },
    {
      "type": "paragraph",
      "id": "e8cf0c8c04f0407e",
      "text": "Actually, we are now done with the regular expressions we need to generate the site map. We just need a few more methods to complete the application."
    },
    {
      "type": "paragraph",
      "id": "2bc2f02d9b8f4459",
      "text": "We create a file called “toc.html” in the root web directory and dump the site map there."
    },
    {
      "type": "paragraph",
      "id": "802e63f3dad4edc9",
      "text": "⇒ [[Convert a Sitemap to a DITA Map]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-12-29",
        "story": []
      },
      "date": 1703826284687
    },
    {
      "item": {
        "type": "factory",
        "id": "445175f0c33f7a49"
      },
      "id": "445175f0c33f7a49",
      "type": "add",
      "date": 1703826293736
    },
    {
      "type": "edit",
      "id": "445175f0c33f7a49",
      "item": {
        "type": "image",
        "id": "445175f0c33f7a49",
        "text": "[[2023-12-28]]",
        "size": "wide",
        "width": 430,
        "height": 263,
        "url": "/assets/plugins/image/06bdf2e60a5638833dc2c44a3b75e57e.jpg"
      },
      "date": 1703826311324
    },
    {
      "item": {
        "type": "factory",
        "id": "054846bb1397244c"
      },
      "id": "054846bb1397244c",
      "type": "add",
      "after": "445175f0c33f7a49",
      "date": 1703826383640
    },
    {
      "type": "edit",
      "id": "054846bb1397244c",
      "item": {
        "type": "code",
        "id": "054846bb1397244c",
        "text": "(self item) value at: #title"
      },
      "date": 1703826385682
    },
    {
      "id": "ed4882f2acd77d26",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ed4882f2acd77d26",
        "text": "create alone does not generate an id"
      },
      "attribution": {
        "page": "2023-12-28"
      },
      "date": 1703826405573
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "paragraph",
        "id": "ed4882f2acd77d26",
        "text": "[[Action]] type `create` alone does not generate an id"
      },
      "date": 1703826418485
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "[[Action]] type `create` alone does not generate an id"
      },
      "date": 1703826420081
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "[[Action]] type `create` alone does not generate an `id`."
      },
      "date": 1703826439775
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "The `create` [[Action]] type alone does not generate an `id`."
      },
      "date": 1703826518231
    },
    {
      "id": "cdf0423981d247b0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' arrange the story."
      },
      "attribution": {
        "page": "Action",
        "site": "glossary.asia.wiki.org"
      },
      "date": 1703826565371
    },
    {
      "id": "a085daa1319256c6",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a085daa1319256c6",
        "text": "Actions of type 'create' indicate newly made pages."
      },
      "after": "cdf0423981d247b0",
      "attribution": {
        "page": "Action",
        "site": "glossary.asia.wiki.org"
      },
      "date": 1703826575624
    },
    {
      "type": "remove",
      "id": "cdf0423981d247b0",
      "date": 1703826578828
    },
    {
      "type": "edit",
      "id": "a085daa1319256c6",
      "item": {
        "type": "paragraph",
        "id": "a085daa1319256c6",
        "text": "Actions of type `create` indicate newly made pages."
      },
      "date": 1703826590488
    },
    {
      "type": "edit",
      "id": "a085daa1319256c6",
      "item": {
        "type": "markdown",
        "id": "a085daa1319256c6",
        "text": "Actions of type `create` indicate newly made pages."
      },
      "date": 1703826592240
    },
    {
      "id": "ed4882f2acd77d26",
      "type": "move",
      "order": [
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "054846bb1397244c"
      ],
      "date": 1703826607891
    },
    {
      "id": "604236f230de9a75",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "604236f230de9a75",
        "text": "The [[Journal]], when properly maintained, collects the complete history of a wiki page."
      },
      "after": "054846bb1397244c",
      "attribution": {
        "page": "Action",
        "site": "glossary.asia.wiki.org"
      },
      "date": 1703826671923
    },
    {
      "id": "604236f230de9a75",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "054846bb1397244c"
      ],
      "date": 1703826679557
    },
    {
      "type": "edit",
      "id": "604236f230de9a75",
      "item": {
        "type": "paragraph",
        "id": "604236f230de9a75",
        "text": "The [[Journal]], when properly maintained, [[collect]]s the complete history of a wiki page."
      },
      "date": 1703826699704
    },
    {
      "item": {
        "type": "factory",
        "id": "9d35c2d92831c091"
      },
      "id": "9d35c2d92831c091",
      "type": "add",
      "after": "054846bb1397244c",
      "date": 1703826724329
    },
    {
      "type": "edit",
      "id": "9d35c2d92831c091",
      "item": {
        "type": "graphviz",
        "id": "9d35c2d92831c091",
        "text": "DOT FROM two-level-diagram"
      },
      "date": 1703826735620
    },
    {
      "item": {
        "type": "factory",
        "id": "2539b58d08cc3a99"
      },
      "id": "2539b58d08cc3a99",
      "type": "add",
      "after": "9d35c2d92831c091",
      "date": 1703826923495
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is *written in its own language, for which the object is that language’s [[Interpreter]]*) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703826975704
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703827065585
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703827154997
    },
    {
      "type": "edit",
      "id": "a085daa1319256c6",
      "item": {
        "type": "markdown",
        "id": "a085daa1319256c6",
        "text": "[[Action]]s of type `create` indicate newly made pages."
      },
      "date": 1703827216583
    },
    {
      "item": {
        "type": "factory",
        "id": "964da54eb1b95bc0"
      },
      "id": "964da54eb1b95bc0",
      "type": "add",
      "after": "2539b58d08cc3a99",
      "date": 1703827339354
    },
    {
      "id": "964da54eb1b95bc0",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "054846bb1397244c",
        "9d35c2d92831c091",
        "2539b58d08cc3a99"
      ],
      "date": 1703827347973
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[wiki-page]] in the federation contains a story-element which in turn is composed of an ordered list of items. Each item has an [[item-id]] which is assigned on creation."
      },
      "date": 1703827353785
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation contains a story-element which in turn is composed of an ordered list of items. Each item has an [[item-id]] which is assigned on creation."
      },
      "date": 1703827446465
    },
    {
      "id": "cdf0423981d247b0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' arrange the story."
      },
      "after": "054846bb1397244c",
      "attribution": {
        "page": "Action",
        "site": "glossary.asia.wiki.org"
      },
      "date": 1703827700515
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the story."
      },
      "date": 1703827710844
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]."
      },
      "date": 1703827734202
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and the generation of an id seems to be related."
      },
      "date": 1703827784142
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation contains a story-element which in turn is composed of an ordered list of items. Each item has an id which is assigned on creation."
      },
      "date": 1703827808080
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation contains a [[Story]] element which in turn is composed of an ordered list of items. Each item has an id which is assigned on creation."
      },
      "date": 1703827973412
    },
    {
      "id": "8529156add09189b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The Arrangement axiom gives permission to take multiple forms out of the interior content of a frame and [[put]] them into separate frames, so long as we carry their [[Context]] — i.e. their frame type, (A [...]) — along with them."
      },
      "after": "cdf0423981d247b0",
      "attribution": {
        "page": "Arrangement"
      },
      "date": 1703828073354
    },
    {
      "id": "d30b51f1c85858ce",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "d30b51f1c85858ce",
        "text": "# See also\n"
      },
      "after": "8529156add09189b",
      "attribution": {
        "page": "Item-id"
      },
      "date": 1703828117459
    },
    {
      "id": "63c23c1135f05a38",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "63c23c1135f05a38",
        "text": "- [[Item Distribution]]\n- [[Unique Item Identifiers]]"
      },
      "after": "d30b51f1c85858ce",
      "attribution": {
        "page": "Item-id"
      },
      "date": 1703828126998
    },
    {
      "type": "edit",
      "id": "d30b51f1c85858ce",
      "item": {
        "type": "markdown",
        "id": "d30b51f1c85858ce",
        "text": "## See also\n"
      },
      "date": 1703828138535
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The Arrangement axiom gives permission to take multiple forms out of the interior content of a frame and [[put]] them into separate frames, so long as we carry their [[Context]] — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703828291801
    },
    {
      "id": "78bd3bb0ba09a858",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "78bd3bb0ba09a858",
        "text": "The generic template collapses if either the type or the content is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In [[Arrangement]], [[collect]] gathers together framed-content that has in common the same frame-type. (p. 198)"
      },
      "after": "8529156add09189b",
      "attribution": {
        "page": "Frame Type"
      },
      "date": 1703828435639
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked."
      },
      "date": 1703828549151
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation contains a [[Story]] element which in turn is composed of an ordered list of items. Each item has an ID which is assigned on creation."
      },
      "date": 1703828575826
    },
    {
      "id": "964da54eb1b95bc0",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "964da54eb1b95bc0",
        "ed4882f2acd77d26",
        "054846bb1397244c",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99"
      ],
      "date": 1703828639512
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation [[contains]] a [[Story]] element which in turn is composed of an ordered list of items. Each item has an ID which is assigned on creation."
      },
      "date": 1703828971677
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The Arrangement axiom gives permission to take multiple forms out of the interior content of a frame and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703829030867
    },
    {
      "item": {
        "type": "factory",
        "id": "d62ef64cc402cc99"
      },
      "id": "d62ef64cc402cc99",
      "type": "add",
      "after": "2539b58d08cc3a99",
      "date": 1703829253784
    },
    {
      "id": "119e9c0883c3e602",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**.\n\nA problem with these two approaches is that, if you have something like:"
      },
      "after": "2539b58d08cc3a99",
      "attribution": {
        "page": "The Behavioural Point of View"
      },
      "date": 1703829306193
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**.\n\nA problem with these two approaches is that, if you have something like:"
      },
      "date": 1703829310229
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**."
      },
      "date": 1703829324523
    },
    {
      "type": "edit",
      "id": "d62ef64cc402cc99",
      "item": {
        "type": "reference",
        "id": "d62ef64cc402cc99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "unique-item-identifiers",
        "title": "Unique Item Identifiers",
        "text": "Wiki tries to mark every item created with a unique identifier. We can think of each item in [[The Federation]] as a database record, and we can refer to it with this unique id however it might move through the federation, and whatever its contents."
      },
      "date": 1703829371369
    },
    {
      "type": "edit",
      "id": "d62ef64cc402cc99",
      "item": {
        "type": "reference",
        "id": "d62ef64cc402cc99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "unique-item-identifiers",
        "title": "Unique Item Identifiers",
        "text": "Wiki tries to mark every [[Item]] created with a unique identifier. We can think of each item in [[The Federation]] as a database record, and we can refer to it with this unique id however it might move through the federation, and whatever its contents."
      },
      "date": 1703829391070
    },
    {
      "type": "edit",
      "id": "d62ef64cc402cc99",
      "item": {
        "type": "reference",
        "id": "d62ef64cc402cc99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "unique-item-identifiers",
        "title": "Unique Item Identifiers",
        "text": "Wiki tries to mark every [[Item]] created with a unique identifier. We can think of each item in [[The Federation]] as a database record, and we can refer to it with this unique ID however it might move through the federation, and whatever its contents."
      },
      "date": 1703829414436
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see objects as plain records of data**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**."
      },
      "date": 1703829440508
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see objects as plain records of data**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as [[Behaviour]]**."
      },
      "date": 1703829459245
    },
    {
      "item": {
        "type": "factory",
        "id": "34c346ab600ee576"
      },
      "id": "34c346ab600ee576",
      "type": "add",
      "after": "d62ef64cc402cc99",
      "date": 1703829495014
    },
    {
      "type": "edit",
      "id": "34c346ab600ee576",
      "item": {
        "type": "reference",
        "id": "34c346ab600ee576",
        "site": "wiki.ralfbarkow.ch",
        "slug": "behaviors",
        "title": "Behaviors",
        "text": "These define how the [[Card]] acts when a user or another card interacts with it. [[Behavior]]s computation is replicated on all user systems, providing a perfect, bit-identical shared experience. [https://www.croquet.io/microverse-ide/ croquet]"
      },
      "date": 1703829501920
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see objects as plain records of data**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), […]"
      },
      "date": 1703829537934
    },
    {
      "type": "add",
      "id": "939940910a95498c",
      "item": {
        "type": "markdown",
        "id": "939940910a95498c",
        "text": "> but it doesn’t work **if you see objects as [[Behaviour]]**."
      },
      "after": "119e9c0883c3e602",
      "date": 1703829538702
    },
    {
      "id": "939940910a95498c",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "964da54eb1b95bc0",
        "ed4882f2acd77d26",
        "054846bb1397244c",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576"
      ],
      "date": 1703829679337
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there static typing for a Smalltalk derivative?, [[Alan Kay]])"
      },
      "date": 1703829990417
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]])"
      },
      "date": 1703830039744
    },
    {
      "item": {
        "type": "factory",
        "id": "ec2d82b0d3ace017"
      },
      "id": "ec2d82b0d3ace017",
      "type": "add",
      "after": "34c346ab600ee576",
      "date": 1703830202652
    },
    {
      "type": "edit",
      "id": "ec2d82b0d3ace017",
      "item": {
        "type": "markdown",
        "id": "ec2d82b0d3ace017",
        "text": "# Is there static typing for a Smalltalk derivative?"
      },
      "date": 1703830207849
    },
    {
      "item": {
        "type": "factory",
        "id": "f322f7f836e53eb6"
      },
      "id": "f322f7f836e53eb6",
      "type": "add",
      "after": "ec2d82b0d3ace017",
      "date": 1703830230626
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]])"
      },
      "date": 1703830232208
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "[https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]])"
      },
      "date": 1703830249074
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "[[Alan Kay]]) via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703830270272
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "[[Alan Kay]] via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703830274742
    },
    {
      "item": {
        "type": "factory",
        "id": "41f5317aef39a03f"
      },
      "id": "41f5317aef39a03f",
      "type": "add",
      "after": "f322f7f836e53eb6",
      "date": 1703830292294
    },
    {
      "type": "edit",
      "id": "41f5317aef39a03f",
      "item": {
        "type": "paragraph",
        "id": "41f5317aef39a03f",
        "text": "Besides looking at the past, we should look to the present and the future.\n\nThe basic idea of “object” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford.\n\nBut consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "date": 1703830293884
    },
    {
      "type": "edit",
      "id": "41f5317aef39a03f",
      "item": {
        "type": "paragraph",
        "id": "41f5317aef39a03f",
        "text": "Besides looking at the past, we should look to the present and the future."
      },
      "date": 1703830309424
    },
    {
      "type": "add",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford.\n\nBut consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "after": "41f5317aef39a03f",
      "date": 1703830325683
    },
    {
      "type": "add",
      "id": "b25695ed45720a48",
      "item": {
        "type": "paragraph",
        "id": "b25695ed45720a48",
        "text": "This also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford.\n\nBut consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703830331434
    },
    {
      "type": "edit",
      "id": "ec2d82b0d3ace017",
      "item": {
        "type": "markdown",
        "id": "ec2d82b0d3ace017",
        "text": "# Is there [[Static Typing]] for a Smalltalk derivative?"
      },
      "date": 1703830374351
    },
    {
      "type": "edit",
      "id": "b25695ed45720a48",
      "item": {
        "type": "paragraph",
        "id": "b25695ed45720a48",
        "text": "This also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703830782768
    },
    {
      "type": "add",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford."
      },
      "after": "b25695ed45720a48",
      "date": 1703830787516
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing [http://ggp.stanford.edu/ site]\n\nof [[Mike Genesereth]] at Stanford."
      },
      "date": 1703830801047
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\n[[General Game Playing]] [http://ggp.stanford.edu/ site]\n\nof [[Mike Genesereth]] at Stanford."
      },
      "date": 1703830818950
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\n[[General Game Playing]] [http://ggp.stanford.edu/ site] of [[Mike Genesereth]] at Stanford."
      },
      "date": 1703830947778
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\n[[General Game Playing]] [http://ggp.stanford.edu/ site] of [[Michael Genesereth]] at Stanford."
      },
      "date": 1703831131569
    },
    {
      "item": {
        "type": "factory",
        "id": "f8b2b8e3bfc3856d"
      },
      "id": "f8b2b8e3bfc3856d",
      "type": "add",
      "after": "7258867ccf7a7f35",
      "date": 1703831228174
    },
    {
      "type": "edit",
      "id": "f8b2b8e3bfc3856d",
      "item": {
        "type": "paragraph",
        "id": "f8b2b8e3bfc3856d",
        "text": "But consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "date": 1703831230312
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford."
      },
      "date": 1703831339899
    },
    {
      "type": "add",
      "id": "b15e24b09b633757",
      "item": {
        "type": "paragraph",
        "id": "b15e24b09b633757",
        "text": "But consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703831350621
    },
    {
      "type": "remove",
      "id": "b25695ed45720a48",
      "date": 1703831357500
    },
    {
      "type": "remove",
      "id": "b15e24b09b633757",
      "date": 1703831361627
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing."
      },
      "date": 1703831370591
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703831380176
    },
    {
      "type": "add",
      "id": "7e3bbdd5c2ad3bdf",
      "item": {
        "type": "paragraph",
        "id": "7e3bbdd5c2ad3bdf",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing."
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703831382429
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing."
      },
      "date": 1703831388643
    },
    {
      "type": "add",
      "id": "7d7c0360a7068f0b",
      "item": {
        "type": "paragraph",
        "id": "7d7c0360a7068f0b",
        "text": "[[General Game Playing]] [http://ggp.stanford.edu/ site] of [[Michael Genesereth]] at Stanford."
      },
      "after": "7258867ccf7a7f35",
      "date": 1703831389783
    },
    {
      "type": "remove",
      "id": "7258867ccf7a7f35",
      "date": 1703831397566
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources."
      },
      "date": 1703831447637
    },
    {
      "type": "edit",
      "id": "80a16d76e462ae2a",
      "item": {
        "type": "markdown",
        "id": "80a16d76e462ae2a",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703831451144
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points."
      },
      "date": 1703831477850
    },
    {
      "type": "add",
      "id": "9bc3702b5cb190e9",
      "item": {
        "type": "paragraph",
        "id": "9bc3702b5cb190e9",
        "text": "• **First** we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource."
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703831486441
    },
    {
      "type": "edit",
      "id": "9bc3702b5cb190e9",
      "item": {
        "type": "markdown",
        "id": "9bc3702b5cb190e9",
        "text": "• **First** we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource."
      },
      "date": 1703831488011
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703831534759
    },
    {
      "item": {
        "type": "factory",
        "id": "4428c1a77bd206c5"
      },
      "id": "4428c1a77bd206c5",
      "type": "add",
      "after": "f8b2b8e3bfc3856d",
      "date": 1703845003880
    },
    {
      "type": "edit",
      "id": "4428c1a77bd206c5",
      "item": {
        "type": "pagefold",
        "id": "4428c1a77bd206c5",
        "text": "~"
      },
      "date": 1703845007667
    },
    {
      "type": "edit",
      "id": "e3a5d1f35617c5cc",
      "item": {
        "type": "image",
        "id": "e3a5d1f35617c5cc",
        "text": "[[Attribution]]",
        "size": "wide",
        "width": 419,
        "height": 254,
        "url": "/assets/plugins/image/2653239a9bf74e3740cc6def90827f66.jpg"
      },
      "date": 1703845055598
    },
    {
      "type": "add",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is #()."
      },
      "after": "ed4882f2acd77d26",
      "date": 1703845294345
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`."
      },
      "date": 1703845302066
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`, an Array with 0 items."
      },
      "date": 1703845327336
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`, an Array with 0 items.\nThe title is"
      },
      "date": 1703845356596
    },
    {
      "item": {
        "type": "factory",
        "id": "5625d3b0ad698829"
      },
      "id": "5625d3b0ad698829",
      "type": "add",
      "after": "4428c1a77bd206c5",
      "date": 1703845387800
    },
    {
      "type": "edit",
      "id": "5625d3b0ad698829",
      "item": {
        "type": "image",
        "id": "5625d3b0ad698829",
        "text": "[[Attribution]]",
        "size": "wide",
        "width": 419,
        "height": 254,
        "url": "/assets/plugins/image/2653239a9bf74e3740cc6def90827f66.jpg"
      },
      "date": 1703845404122
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703845457643
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "**Note**: Slug is nil."
      },
      "date": 1703845841829
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "markdown",
        "id": "cdf0423981d247b0",
        "text": "**Note**: Slug is nil."
      },
      "date": 1703845844525
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "markdown",
        "id": "cdf0423981d247b0",
        "text": "**Note**: The `slug` is still nil."
      },
      "date": 1703845906357
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "markdown",
        "id": "cdf0423981d247b0",
        "text": "**Note**: The instance variables `slug` and `url` are still nil."
      },
      "date": 1703845961798
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`, an Array with 0 items. [⇒[[Void-Equivalent]]?]\nThe title is"
      },
      "date": 1703846404479
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. \nThe title is"
      },
      "date": 1703846481825
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`[⇒[[Void-Equivalent]]?], an Array with 0 items. \nThe title is"
      },
      "date": 1703846498918
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. \nThe title is"
      },
      "date": 1703846509927
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The title is"
      },
      "date": 1703846528048
    },
    {
      "id": "135e0eab7e2dbdb2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "135e0eab7e2dbdb2",
        "text": "The frame-type is [[Structure]] between round- and [[Square-Bracket]]s. The generic template collapses if either the type or the content is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In Arrangement [[collect]] gathers together framed-content that has in common the same frame-type. (p. 198)"
      },
      "after": "9f1482ef8c8ab10c",
      "attribution": {
        "page": "Arrangement"
      },
      "date": 1703846688918
    },
    {
      "type": "remove",
      "id": "135e0eab7e2dbdb2",
      "date": 1703846693840
    },
    {
      "type": "edit",
      "id": "9f1482ef8c8ab10c",
      "item": {
        "type": "paragraph",
        "id": "9f1482ef8c8ab10c",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked. In Arrangement [[collect]] gathers together framed-content that has in common the same [[Frame Type]]. "
      },
      "date": 1703846708503
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703846988743
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "[[Alan Kay]], [[Quildreen Motta]] et al. via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703847027600
    },
    {
      "type": "edit",
      "id": "41f5317aef39a03f",
      "item": {
        "type": "paragraph",
        "id": "41f5317aef39a03f",
        "text": "Alan Kay: Besides looking at the past, we should look to the present and the future."
      },
      "date": 1703847380904
    },
    {
      "type": "add",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "Quildreen Motta:"
      },
      "after": "f8b2b8e3bfc3856d",
      "date": 1703847870791
    },
    {
      "id": "9555d42403421e9b",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "964da54eb1b95bc0",
        "ed4882f2acd77d26",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "9bc3702b5cb190e9",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "5625d3b0ad698829"
      ],
      "date": 1703847873759
    },
    {
      "type": "edit",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "Quildreen Motta: Other people have already mentioned Strongtalk, and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now.\n\nAlthough nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n.\n\nFootnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia\n"
      },
      "date": 1703847935701
    },
    {
      "type": "edit",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "[[Quildreen Motta]]: Other people have already mentioned Strongtalk, and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now.\n\nAlthough nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n.\n\nFootnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia\n"
      },
      "date": 1703847950714
    },
    {
      "type": "edit",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "[[Quildreen Motta]]: Other people have already mentioned [[Strongtalk]], and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now.\n\nAlthough nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n.\n\nFootnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia\n"
      },
      "date": 1703847969959
    },
    {
      "type": "edit",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "[[Quildreen Motta]]: Other people have already mentioned [[Strongtalk]], and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now."
      },
      "date": 1703847983940
    },
    {
      "type": "add",
      "id": "8c4354e2ce43ed99",
      "item": {
        "type": "paragraph",
        "id": "8c4354e2ce43ed99",
        "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n.\n\nFootnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia"
      },
      "after": "9555d42403421e9b",
      "date": 1703847984491
    },
    {
      "type": "edit",
      "id": "41f5317aef39a03f",
      "item": {
        "type": "paragraph",
        "id": "41f5317aef39a03f",
        "text": "[[Alan Kay]]: Besides looking at the past, we should look to the present and the future."
      },
      "date": 1703847995063
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703848098570
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "# key #id not found"
      },
      "date": 1703848259356
    },
    {
      "type": "add",
      "id": "f93bb393c5c0cf4c",
      "item": {
        "type": "markdown",
        "id": "f93bb393c5c0cf4c",
        "text": "The `create` [[Action]] type alone does not generate an `id`."
      },
      "after": "ed4882f2acd77d26",
      "date": 1703848260000
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "# Key #id Not Found"
      },
      "date": 1703848363223
    },
    {
      "id": "ed4882f2acd77d26",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "9bc3702b5cb190e9",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "5625d3b0ad698829"
      ],
      "date": 1703848372575
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703848388487
    },
    {
      "type": "edit",
      "id": "445175f0c33f7a49",
      "item": {
        "type": "image",
        "id": "445175f0c33f7a49",
        "text": "KeyNotFound",
        "size": "wide",
        "width": 430,
        "height": 263,
        "url": "/assets/plugins/image/06bdf2e60a5638833dc2c44a3b75e57e.jpg"
      },
      "date": 1703848433229
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The [[Arrangement]] axiom gives permission to take multiple forms out of the interior content of a frame and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703848491944
    },
    {
      "id": "2fcfde9b5b9606a5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2fcfde9b5b9606a5",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked.",
        "alias": "cdf0423981d247b0"
      },
      "after": "cdf0423981d247b0",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703848582581
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703848648477
    },
    {
      "type": "edit",
      "id": "2fcfde9b5b9606a5",
      "item": {
        "type": "paragraph",
        "id": "2fcfde9b5b9606a5",
        "text": "[[Action]]s of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked. ",
        "alias": "cdf0423981d247b0"
      },
      "date": 1703848712571
    },
    {
      "type": "edit",
      "id": "78bd3bb0ba09a858",
      "item": {
        "type": "paragraph",
        "id": "78bd3bb0ba09a858",
        "text": "The generic template collapses if either the type or the content is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In [[Arrangement]], [[collect]] gathers together framed-content that has in common the same [[Frame Type]]."
      },
      "date": 1703848794995
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703848990873
    },
    {
      "id": "cdf0423981d247b0",
      "type": "remove",
      "removedTo": {
        "page": "scratch"
      },
      "date": 1703849021058
    },
    {
      "id": "cdf0423981d247b0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' arrange the story."
      },
      "after": "054846bb1397244c",
      "attribution": {
        "page": "Action"
      },
      "date": 1703849038966
    },
    {
      "type": "remove",
      "id": "2fcfde9b5b9606a5",
      "date": 1703849043887
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "[[Action]]s of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked. "
      },
      "date": 1703849045930
    },
    {
      "type": "add",
      "id": "15c2f146e91c99ed",
      "item": {
        "type": "markdown",
        "id": "15c2f146e91c99ed",
        "text": "**Note**: The instance variables `slug` and `url` are still nil."
      },
      "after": "a1a5a0cf98bf025c",
      "date": 1703849071111
    },
    {
      "id": "15c2f146e91c99ed",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "9bc3702b5cb190e9",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "5625d3b0ad698829"
      ],
      "date": 1703849072949
    },
    {
      "type": "edit",
      "id": "15c2f146e91c99ed",
      "item": {
        "type": "markdown",
        "id": "15c2f146e91c99ed",
        "text": "**Note**: The instance variables `slug` and `url` are not yet initialized."
      },
      "date": 1703849293219
    },
    {
      "item": {
        "type": "factory",
        "id": "d70e4b9a39bf4c9f"
      },
      "id": "d70e4b9a39bf4c9f",
      "type": "add",
      "after": "5625d3b0ad698829",
      "date": 1703850205447
    },
    {
      "id": "d70e4b9a39bf4c9f",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "9bc3702b5cb190e9",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829"
      ],
      "date": 1703850209795
    },
    {
      "type": "edit",
      "id": "d70e4b9a39bf4c9f",
      "item": {
        "type": "pagefold",
        "id": "d70e4b9a39bf4c9f",
        "text": "~"
      },
      "date": 1703850218199
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "After the `create` action, The story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The title is"
      },
      "date": 1703850392463
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "After the `create` action, the story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The title is"
      },
      "date": 1703850398952
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "After the `create` action, the `story` is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The `title` is"
      },
      "date": 1703850441819
    },
    {
      "type": "add",
      "id": "19a483d723b52c81",
      "item": {
        "type": "markdown",
        "id": "19a483d723b52c81",
        "text": "# Arrange the Story"
      },
      "after": "15c2f146e91c99ed",
      "date": 1703850525720
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The [[Arrangement]] axiom gives permission to take multiple forms out of the interior [[Content]] of a frame and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703850623276
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The [[Arrangement]] axiom gives permission to take multiple forms out of the interior [[Content]] of a [[Frame]] and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703850644668
    },
    {
      "type": "edit",
      "id": "78bd3bb0ba09a858",
      "item": {
        "type": "paragraph",
        "id": "78bd3bb0ba09a858",
        "text": "The generic template collapses if either the [[Type]] or the [[Content]] is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In [[Arrangement]], [[collect]] gathers together framed-content that has in common the same [[Frame Type]]."
      },
      "date": 1703850680422
    },
    {
      "type": "edit",
      "id": "63c23c1135f05a38",
      "item": {
        "type": "markdown",
        "id": "63c23c1135f05a38",
        "text": "- [[Item Distribution]]\n- [[Unique Item Identifiers]]\n- [[Example of a Void-Equivalent Type]]"
      },
      "date": 1703850991529
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.)."
      },
      "date": 1703851469786
    },
    {
      "type": "add",
      "id": "bdb01a0943055321",
      "item": {
        "type": "paragraph",
        "id": "bdb01a0943055321",
        "text": "An object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “[[Something]]” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services."
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703851480869
    },
    {
      "type": "add",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "paragraph",
        "id": "aa5df413d00700d3",
        "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points."
      },
      "after": "bdb01a0943055321",
      "date": 1703851482153
    },
    {
      "type": "add",
      "id": "a8c562d6e5ec0551",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "after": "9bc3702b5cb190e9",
      "date": 1703851675144
    },
    {
      "type": "edit",
      "id": "a8c562d6e5ec0551",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources."
      },
      "date": 1703851755967
    },
    {
      "type": "add",
      "id": "e9e4e669f11bd271",
      "item": {
        "type": "markdown",
        "id": "e9e4e669f11bd271",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "after": "a8c562d6e5ec0551",
      "date": 1703851775588
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]], [[Quildreen Motta]] et al.)"
      },
      "date": 1703851942466
    },
    {
      "type": "edit",
      "id": "63c23c1135f05a38",
      "item": {
        "type": "markdown",
        "id": "63c23c1135f05a38",
        "text": "- [[Item Distribution]]\n- [[Unique Item Identifiers]] ⇒ [[Fluid Not Permanent]]\n- [[Example of a Void-Equivalent Type]]"
      },
      "date": 1703852394532
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703852728310
    },
    {
      "type": "edit",
      "id": "a8c562d6e5ec0551",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages."
      },
      "date": 1703852830394
    },
    {
      "type": "add",
      "id": "e7fa159d4146488d",
      "item": {
        "type": "markdown",
        "id": "e7fa159d4146488d",
        "text": "We can now imagine that to bind to a resource, our object (and object system) will be able to [[negotiate]] actively with the environment of the object to get interior views of exterior resources."
      },
      "after": "a8c562d6e5ec0551",
      "date": 1703852839987
    },
    {
      "item": {
        "type": "factory",
        "id": "7f36d85b891c6c4c"
      },
      "id": "7f36d85b891c6c4c",
      "type": "add",
      "after": "5625d3b0ad698829",
      "date": 1703853002708
    },
    {
      "type": "edit",
      "id": "7f36d85b891c6c4c",
      "item": {
        "type": "paragraph",
        "id": "7f36d85b891c6c4c",
        "text": "⇒ [[Contents Is Intention Obscuring]]"
      },
      "date": 1703853014551
    },
    {
      "type": "edit",
      "id": "e9e4e669f11bd271",
      "item": {
        "type": "markdown",
        "id": "e9e4e669f11bd271",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “[[Telegram]]”, but has the potential of being a full-fledged [[Ambassador]], so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703853601139
    },
    {
      "type": "edit",
      "id": "e9e4e669f11bd271",
      "item": {
        "type": "markdown",
        "id": "e9e4e669f11bd271",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “[[Telegram]]”, but has the potential of being a full-fledged [[Ambassador]], so that it can likewise take part in real negotiation of meaning at the receiving end."
      },
      "date": 1703853637686
    },
    {
      "type": "add",
      "id": "357cf905780a950f",
      "item": {
        "type": "markdown",
        "id": "357cf905780a950f",
        "text": "• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "after": "e9e4e669f11bd271",
      "date": 1703853638262
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703854416313
    },
    {
      "type": "edit",
      "id": "8c4354e2ce43ed99",
      "item": {
        "type": "paragraph",
        "id": "8c4354e2ce43ed99",
        "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "date": 1703855096902
    },
    {
      "type": "add",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "paragraph",
        "id": "d8287e16d3ca293f",
        "text": "Footnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia"
      },
      "after": "8c4354e2ce43ed99",
      "date": 1703855099277
    },
    {
      "type": "edit",
      "id": "8c4354e2ce43ed99",
      "item": {
        "type": "paragraph",
        "id": "8c4354e2ce43ed99",
        "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”."
      },
      "date": 1703855115938
    },
    {
      "type": "add",
      "id": "90c891c42c56fd5f",
      "item": {
        "type": "paragraph",
        "id": "90c891c42c56fd5f",
        "text": "Most type systems use a concept of “[[Name]]”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "after": "8c4354e2ce43ed99",
      "date": 1703855125354
    },
    {
      "type": "edit",
      "id": "90c891c42c56fd5f",
      "item": {
        "type": "paragraph",
        "id": "90c891c42c56fd5f",
        "text": "Most type systems use a concept of “[[Name]]”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular."
      },
      "date": 1703855153017
    },
    {
      "type": "add",
      "id": "8a2e63fd807cd031",
      "item": {
        "type": "paragraph",
        "id": "8a2e63fd807cd031",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "after": "90c891c42c56fd5f",
      "date": 1703855161118
    },
    {
      "type": "edit",
      "id": "8a2e63fd807cd031",
      "item": {
        "type": "paragraph",
        "id": "8a2e63fd807cd031",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour."
      },
      "date": 1703855182928
    },
    {
      "type": "edit",
      "id": "8a2e63fd807cd031",
      "item": {
        "type": "markdown",
        "id": "8a2e63fd807cd031",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour."
      },
      "date": 1703855185094
    },
    {
      "type": "edit",
      "id": "8a2e63fd807cd031",
      "item": {
        "type": "markdown",
        "id": "8a2e63fd807cd031",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see [[Objects as Behaviour]]."
      },
      "date": 1703855240688
    },
    {
      "type": "edit",
      "id": "a5e4ee82b4cba378",
      "item": {
        "type": "paragraph",
        "id": "a5e4ee82b4cba378",
        "text": "A problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour."
      },
      "date": 1703855490522
    },
    {
      "type": "add",
      "id": "20552725b101f341",
      "item": {
        "type": "paragraph",
        "id": "20552725b101f341",
        "text": "Of course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "after": "a5e4ee82b4cba378",
      "date": 1703855492707
    },
    {
      "type": "edit",
      "id": "a5e4ee82b4cba378",
      "item": {
        "type": "paragraph",
        "id": "a5e4ee82b4cba378",
        "text": "A problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]]."
      },
      "date": 1703855498738
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "paragraph",
        "id": "d8287e16d3ca293f",
        "text": "Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855519174
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855520216
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855526661
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf [[\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855552029
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf [[Type Systems as Macros]]\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855566496
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855607615
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed\n[3] [[Extensionality]] - Wikipedia"
      },
      "date": 1703855655096
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed\n[3] [[Extensionality]]"
      },
      "date": 1703855663922
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703855713989
    },
    {
      "type": "edit",
      "id": "8c4354e2ce43ed99",
      "item": {
        "type": "paragraph",
        "id": "8c4354e2ce43ed99",
        "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important."
      },
      "date": 1703855887158
    },
    {
      "type": "add",
      "id": "2b1bc89d5894a606",
      "item": {
        "type": "paragraph",
        "id": "2b1bc89d5894a606",
        "text": "Anyway, if we look at the practicality of a type system, we have to consider:"
      },
      "after": "8c4354e2ce43ed99",
      "date": 1703855894599
    },
    {
      "type": "add",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;"
      },
      "after": "2b1bc89d5894a606",
      "date": 1703855905973
    },
    {
      "type": "add",
      "id": "ad74e462298d43ca",
      "item": {
        "type": "paragraph",
        "id": "ad74e462298d43ca",
        "text": "So, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”."
      },
      "after": "aa24c609049a7b07",
      "date": 1703855906851
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703855908034
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703855961914
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703855971686
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed [https://www.khoury.northeastern.edu/home/amal/ page]\n[3] [[Extensionality]]"
      },
      "date": 1703856019152
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703856034768
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703856068504
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703856076779
    },
    {
      "type": "edit",
      "id": "ad74e462298d43ca",
      "item": {
        "type": "paragraph",
        "id": "ad74e462298d43ca",
        "text": "So, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”."
      },
      "date": 1703856126086
    },
    {
      "type": "add",
      "id": "d145214312bfec04",
      "item": {
        "type": "markdown",
        "id": "d145214312bfec04",
        "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”."
      },
      "after": "ad74e462298d43ca",
      "date": 1703856127054
    },
    {
      "type": "edit",
      "id": "d145214312bfec04",
      "item": {
        "type": "markdown",
        "id": "d145214312bfec04",
        "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”."
      },
      "date": 1703856132040
    },
    {
      "type": "add",
      "id": "43d1cc7247d60225",
      "item": {
        "type": "markdown",
        "id": "43d1cc7247d60225",
        "text": "[…]"
      },
      "after": "8a2e63fd807cd031",
      "date": 1703856158343
    },
    {
      "type": "add",
      "id": "9361525a4ede8220",
      "item": {
        "type": "markdown",
        "id": "9361525a4ede8220",
        "text": "A problem with these two approaches is that, if you have something like:"
      },
      "after": "8a2e63fd807cd031",
      "date": 1703856198010
    },
    {
      "item": {
        "type": "code",
        "id": "e7b758816b456107",
        "text": "    interface Counter { \n      next(): Int; \n    } "
      },
      "id": "e7b758816b456107",
      "type": "add",
      "after": "7f36d85b891c6c4c",
      "date": 1703856206985
    },
    {
      "id": "e7b758816b456107",
      "type": "move",
      "order": [
        "20552725b101f341",
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c"
      ],
      "date": 1703856212086,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1703856220026
    },
    {
      "type": "edit",
      "id": "43d1cc7247d60225",
      "item": {
        "type": "markdown",
        "id": "43d1cc7247d60225",
        "text": "Then all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:"
      },
      "date": 1703856252525
    },
    {
      "type": "add",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "[…]"
      },
      "after": "43d1cc7247d60225",
      "date": 1703856252868
    },
    {
      "item": {
        "type": "factory",
        "id": "c339fa62fcdaa88b"
      },
      "id": "c339fa62fcdaa88b",
      "type": "add",
      "after": "7f36d85b891c6c4c",
      "date": 1703856264442
    },
    {
      "type": "edit",
      "id": "c339fa62fcdaa88b",
      "item": {
        "type": "code",
        "id": "c339fa62fcdaa88b",
        "text": "    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } "
      },
      "date": 1703856269192
    },
    {
      "id": "c339fa62fcdaa88b",
      "type": "move",
      "order": [
        "20552725b101f341",
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c"
      ],
      "date": 1703856287356
    },
    {
      "type": "edit",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "date": 1703856302592
    },
    {
      "type": "edit",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]].\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]."
      },
      "date": 1703856326823
    },
    {
      "type": "edit",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]].\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either [3]."
      },
      "date": 1703856453859
    },
    {
      "type": "edit",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]].\n\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]."
      },
      "date": 1703856469625
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703863067789
    },
    {
      "type": "remove",
      "id": "20552725b101f341",
      "date": 1703863076056
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703863109392
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703866966408
    },
    {
      "type": "edit",
      "id": "7f36d85b891c6c4c",
      "item": {
        "type": "paragraph",
        "id": "7f36d85b891c6c4c",
        "text": "⇒ [[Contents Is Intention Obscuring]] ⇒ [[Fluid Not Permanent]]"
      },
      "date": 1703867847052
    },
    {
      "type": "edit",
      "id": "7f36d85b891c6c4c",
      "item": {
        "type": "paragraph",
        "id": "7f36d85b891c6c4c",
        "text": "⇒ [[Contents Is Intention Obscuring]] ⇒ [[Fluid Not Permanent]] ⇐ [[Unique Item Identifiers]]"
      },
      "date": 1703867933758
    },
    {
      "item": {
        "type": "factory",
        "id": "1de79b51ffb1661b"
      },
      "id": "1de79b51ffb1661b",
      "type": "add",
      "after": "7f36d85b891c6c4c",
      "date": 1703868002043
    },
    {
      "type": "edit",
      "id": "1de79b51ffb1661b",
      "item": {
        "type": "reference",
        "id": "1de79b51ffb1661b",
        "site": "wiki.ralfbarkow.ch",
        "slug": "dbsoup",
        "title": "DbSoup",
        "text": "A facade presenting something like HPI's soup, a collection from which all interesting domain objects are easily reachable."
      },
      "date": 1703868004592
    },
    {
      "type": "edit",
      "id": "7f36d85b891c6c4c",
      "item": {
        "type": "paragraph",
        "id": "7f36d85b891c6c4c",
        "text": "⇒ [[Contents Is Intention Obscuring]] ⇒ [[Fluid Not Permanent]] ⇐ [[Unique Item Identifiers]] ⇒ [[A Soup of Objects]]"
      },
      "date": 1703868020350
    },
    {
      "item": {
        "type": "factory",
        "id": "d197705d135ac17f"
      },
      "id": "d197705d135ac17f",
      "type": "add",
      "after": "1de79b51ffb1661b",
      "date": 1703868047429
    },
    {
      "type": "edit",
      "id": "d197705d135ac17f",
      "item": {
        "type": "reference",
        "id": "d197705d135ac17f",
        "site": "wiki.ralfbarkow.ch",
        "slug": "per-instance-page",
        "title": "Per-Instance Page",
        "text": "[[DbSoup]] class>>#addSourceForOlReferencedClass:withBuilder:"
      },
      "date": 1703868050527
    },
    {
      "item": {
        "type": "factory",
        "id": "36cf5ffe22bed370"
      },
      "id": "36cf5ffe22bed370",
      "type": "add",
      "after": "d197705d135ac17f",
      "date": 1703868168741
    },
    {
      "type": "edit",
      "id": "36cf5ffe22bed370",
      "item": {
        "type": "markdown",
        "id": "36cf5ffe22bed370",
        "text": "> […] usually one wants to add to both ObjectiveLepiter (to support per-instance pages) and DbSoup"
      },
      "date": 1703868179093
    },
    {
      "type": "edit",
      "id": "36cf5ffe22bed370",
      "item": {
        "type": "markdown",
        "id": "36cf5ffe22bed370",
        "text": "> […] usually one wants to add to both [[ObjectiveLepiter]] (to support per-instance pages) and [[DbSoup]]"
      },
      "date": 1703868203596
    },
    {
      "item": {
        "type": "factory",
        "id": "85921bf7ee14a8ac"
      },
      "id": "85921bf7ee14a8ac",
      "type": "add",
      "after": "36cf5ffe22bed370",
      "date": 1703868322778
    },
    {
      "type": "edit",
      "id": "85921bf7ee14a8ac",
      "item": {
        "type": "paragraph",
        "id": "85921bf7ee14a8ac",
        "text": "Simulated Soup #10 "
      },
      "date": 1703868327847
    },
    {
      "type": "edit",
      "id": "85921bf7ee14a8ac",
      "item": {
        "type": "paragraph",
        "id": "85921bf7ee14a8ac",
        "text": "Simulated Soup #10 [https://github.com/seandenigris/Dynabook/issues/10 github]"
      },
      "date": 1703868341549
    },
    {
      "type": "edit",
      "id": "36cf5ffe22bed370",
      "item": {
        "type": "markdown",
        "id": "36cf5ffe22bed370",
        "text": "> […] usually one wants to add to both [[# Objective-Lepiter]] (to support per-instance pages) and [[DbSoup]]"
      },
      "date": 1703868393445
    },
    {
      "type": "edit",
      "id": "36cf5ffe22bed370",
      "item": {
        "type": "markdown",
        "id": "36cf5ffe22bed370",
        "text": "> […] usually one wants to add to both [[Objective-Lepiter]] (to support per-instance pages) and [[DbSoup]]"
      },
      "date": 1703868401353
    },
    {
      "item": {
        "type": "factory",
        "id": "ca1ace3b2a6b20f5"
      },
      "id": "ca1ace3b2a6b20f5",
      "type": "add",
      "after": "85921bf7ee14a8ac",
      "date": 1703868591601
    },
    {
      "type": "edit",
      "id": "ca1ace3b2a6b20f5",
      "item": {
        "type": "paragraph",
        "id": "ca1ace3b2a6b20f5",
        "text": "Right now, the Soup handles the case of finding an object from a UID.\n\nObjectiveLepiter's model reference map handles a different case: how to build a reference from an object. This is currently done based on the object's class.\n\nSee OlObjectPageType class>>#modelReferenceForClass: and DbSoup class>>#detectUIDString36:\n\nOne solution would be to scrap the OL map completely and hold UIDs instead of reference objects. These could simply be passed to the soup. To manage the dependencies, OL would need a hook to specify an object source (probably a valuable), which for Dynabook would be the Soup, which could be passed as a message send to avoid block use, although maybe that's not important since it could be handled during setup vs. domain materialization."
      },
      "date": 1703868594195
    },
    {
      "type": "edit",
      "id": "ca1ace3b2a6b20f5",
      "item": {
        "type": "paragraph",
        "id": "ca1ace3b2a6b20f5",
        "text": "Right now, the Soup handles the case of finding an object from a UID.\n\nObjectiveLepiter's model reference map handles a different case: how to build a reference from an object. This is currently done based on the object's class.\n\nSee OlObjectPageType class>>#modelReferenceForClass: and DbSoup class>>#detectUIDString36:\n\nOne solution would be to scrap the OL map completely and hold UIDs instead of reference objects. These could simply be passed to the soup. To manage the dependencies, OL would need a hook to specify an object source (probably a valuable), which for Dynabook would be the Soup, which could be passed as a message send to avoid block use, although maybe that's not important since it could be handled during setup vs. domain materialization. [https://github.com/seandenigris/Dynabook/issues/10#issuecomment-1129169564 github]"
      },
      "date": 1703868658838
    },
    {
      "item": {
        "type": "factory",
        "id": "85d191b1e1f2146c"
      },
      "id": "85d191b1e1f2146c",
      "type": "add",
      "after": "ca1ace3b2a6b20f5",
      "date": 1703868703491
    },
    {
      "type": "remove",
      "id": "85d191b1e1f2146c",
      "date": 1703868708348
    },
    {
      "type": "add",
      "id": "1e7de8ce4f1247dc",
      "item": {
        "type": "paragraph",
        "id": "1e7de8ce4f1247dc",
        "text": "Lepiter Custom Annotations #5"
      },
      "after": "ca1ace3b2a6b20f5",
      "date": 1703868713642
    },
    {
      "type": "edit",
      "id": "1e7de8ce4f1247dc",
      "item": {
        "type": "paragraph",
        "id": "1e7de8ce4f1247dc",
        "text": "Lepiter Custom Annotations #5 [https://github.com/seandenigris/Dynabook/issues/5 github]"
      },
      "date": 1703868721567
    },
    {
      "type": "add",
      "id": "aed6c23421d22434",
      "item": {
        "type": "paragraph",
        "id": "aed6c23421d22434",
        "text": "Lepiter - Custom Annotations #2 "
      },
      "after": "1e7de8ce4f1247dc",
      "date": 1703868764155
    },
    {
      "type": "edit",
      "id": "aed6c23421d22434",
      "item": {
        "type": "paragraph",
        "id": "aed6c23421d22434",
        "text": "Lepiter - Custom Annotations #2 [https://github.com/seandenigris/My-People/issues/2 github]"
      },
      "date": 1703868771988
    },
    {
      "id": "aed6c23421d22434",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc"
      ],
      "date": 1703868774131
    },
    {
      "item": {
        "type": "factory",
        "id": "157aa190b39313b4"
      },
      "id": "157aa190b39313b4",
      "type": "add",
      "after": "1e7de8ce4f1247dc",
      "date": 1703868836193
    },
    {
      "type": "edit",
      "id": "157aa190b39313b4",
      "item": {
        "type": "reference",
        "id": "157aa190b39313b4",
        "site": "wiki.ralfbarkow.ch",
        "slug": "objective-lepiter",
        "title": "Objective-Lepiter",
        "text": "[[Sean DeNigris]]' library to have pages representing arbitrary domain objects. [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]"
      },
      "date": 1703868874281
    },
    {
      "id": "157aa190b39313b4",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc"
      ],
      "date": 1703868885149
    },
    {
      "id": "b54a621c5a756b5e",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "b54a621c5a756b5e",
        "text": "> […] library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github]"
      },
      "after": "157aa190b39313b4",
      "attribution": {
        "page": "Per-Instance Page"
      },
      "date": 1703868903865
    },
    {
      "type": "edit",
      "id": "b54a621c5a756b5e",
      "item": {
        "type": "markdown",
        "id": "b54a621c5a756b5e",
        "text": "> The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github]"
      },
      "date": 1703868916320
    },
    {
      "id": "724ca2ba46e164bd",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "724ca2ba46e164bd",
        "text": "⇒ [[Represent Arbitrary Domain Objects]]"
      },
      "after": "b54a621c5a756b5e",
      "attribution": {
        "page": "Per-Instance Page"
      },
      "date": 1703868969222
    },
    {
      "type": "edit",
      "id": "1de79b51ffb1661b",
      "item": {
        "type": "reference",
        "id": "1de79b51ffb1661b",
        "site": "wiki.ralfbarkow.ch",
        "slug": "dbsoup",
        "title": "DbSoup",
        "text": "A facade presenting something like HPI's soup, a [[Collection]] from which all interesting domain objects are easily reachable."
      },
      "date": 1703869007946
    },
    {
      "item": {
        "type": "factory",
        "id": "a0086bca83f09898"
      },
      "id": "a0086bca83f09898",
      "type": "add",
      "after": "1e7de8ce4f1247dc",
      "date": 1703869461818
    },
    {
      "type": "edit",
      "id": "a0086bca83f09898",
      "item": {
        "type": "pagefold",
        "id": "a0086bca83f09898",
        "text": "~"
      },
      "date": 1703869468248
    },
    {
      "item": {
        "type": "factory",
        "id": "385e27b454937640"
      },
      "id": "385e27b454937640",
      "type": "add",
      "after": "a0086bca83f09898",
      "date": 1703869470713
    },
    {
      "type": "edit",
      "id": "385e27b454937640",
      "item": {
        "type": "paragraph",
        "id": "385e27b454937640",
        "text": "⇒ [[Slug]]"
      },
      "date": 1703869482091
    },
    {
      "item": {
        "type": "factory",
        "id": "4862c37c78810ebb"
      },
      "id": "4862c37c78810ebb",
      "type": "add",
      "after": "385e27b454937640",
      "date": 1703869485118
    },
    {
      "type": "edit",
      "id": "4862c37c78810ebb",
      "item": {
        "type": "paragraph",
        "id": "4862c37c78810ebb",
        "text": "\nPARKER-WOOD, Aleatha, LONG, Darrell D. E., MILLER, Ethan, RIGAUX, Philippe and ISAACSON, Andy, 2014. A File By Any Other Name: Managing File Names with Metadata. In: Proceedings of International Conference on Systems and Storage. Online. Haifa Israel: ACM. 30 June 2014. p. 1–11. ISBN 978-1-4503-2920-0. DOI 10.1145/2611354.2611367. [Accessed 29 December 2023]. \n"
      },
      "date": 1703869487660
    },
    {
      "type": "edit",
      "id": "4862c37c78810ebb",
      "item": {
        "type": "paragraph",
        "id": "4862c37c78810ebb",
        "text": "PARKER-WOOD, Aleatha, LONG, Darrell D. E., MILLER, Ethan, RIGAUX, Philippe and ISAACSON, Andy, 2014. A File By Any Other Name: Managing File Names with Metadata. In: Proceedings of International Conference on Systems and Storage. Haifa Israel: ACM. 30 June 2014. p. 1–11. ISBN 978-1-4503-2920-0. DOI 10.1145/2611354.2611367. [Accessed 29 December 2023]. \n"
      },
      "date": 1703869495842
    },
    {
      "type": "edit",
      "id": "4862c37c78810ebb",
      "item": {
        "type": "paragraph",
        "id": "4862c37c78810ebb",
        "text": "PARKER-WOOD, Aleatha, LONG, Darrell D. E., MILLER, Ethan, RIGAUX, Philippe and ISAACSON, Andy, 2014. A File By Any Other Name: Managing File Names with Metadata. In: Proceedings of International Conference on Systems and Storage. Haifa Israel: ACM. 30 June 2014. p. 1–11. ISBN 978-1-4503-2920-0. DOI 10.1145/2611354.2611367. [https://escholarship.org/content/qt3404q9xv/qt3404q9xv.pdf pdf] [Accessed 29 December 2023]. \n"
      },
      "date": 1703869512442
    },
    {
      "type": "edit",
      "id": "4862c37c78810ebb",
      "item": {
        "type": "paragraph",
        "id": "4862c37c78810ebb",
        "text": "PARKER-WOOD, Aleatha, LONG, Darrell D. E., MILLER, Ethan, RIGAUX, Philippe and ISAACSON, Andy, 2014. A File By Any Other Name: Managing File Names with Metadata. In: Proceedings of International Conference on Systems and Storage. Haifa Israel: ACM. 30 June 2014. p. 1–11. ISBN 978-1-4503-2920-0. DOI 10.1145/2611354.2611367. [https://escholarship.org/content/qt3404q9xv/qt3404q9xv.pdf pdf] [https://escholarship.org/uc/item/3404q9xv permalink] [Accessed 29 December 2023]. \n"
      },
      "date": 1703869539995
    },
    {
      "item": {
        "type": "factory",
        "id": "927d7f0dc0841e07"
      },
      "id": "927d7f0dc0841e07",
      "type": "add",
      "after": "4862c37c78810ebb",
      "date": 1703869828751
    },
    {
      "type": "edit",
      "id": "927d7f0dc0841e07",
      "item": {
        "type": "image",
        "id": "927d7f0dc0841e07",
        "text": "Slug>>#gtJournalFor:",
        "size": "wide",
        "width": 430,
        "height": 262,
        "url": "/assets/plugins/image/cdfaa7d83eeb9fcc945da1c6c9118da2.jpg"
      },
      "date": 1703869841157
    },
    {
      "id": "927d7f0dc0841e07",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "b54a621c5a756b5e",
        "724ca2ba46e164bd",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc",
        "a0086bca83f09898",
        "385e27b454937640",
        "927d7f0dc0841e07",
        "4862c37c78810ebb"
      ],
      "date": 1703869848797
    },
    {
      "item": {
        "type": "factory",
        "id": "b7fd89657640dd6b"
      },
      "id": "b7fd89657640dd6b",
      "type": "add",
      "after": "4862c37c78810ebb",
      "date": 1703869883959
    },
    {
      "type": "edit",
      "id": "b7fd89657640dd6b",
      "item": {
        "type": "code",
        "id": "b7fd89657640dd6b",
        "text": "Sitemap get slugs"
      },
      "date": 1703869887391
    },
    {
      "id": "b7fd89657640dd6b",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "b54a621c5a756b5e",
        "724ca2ba46e164bd",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc",
        "a0086bca83f09898",
        "385e27b454937640",
        "b7fd89657640dd6b",
        "927d7f0dc0841e07",
        "4862c37c78810ebb"
      ],
      "date": 1703869896422
    },
    {
      "type": "edit",
      "id": "385e27b454937640",
      "item": {
        "type": "paragraph",
        "id": "385e27b454937640",
        "text": "⇒ [[Slug]] ⇐ [[Sitemap]]"
      },
      "date": 1703869923838
    },
    {
      "item": {
        "type": "factory",
        "id": "4710134aa307915a"
      },
      "id": "4710134aa307915a",
      "type": "add",
      "after": "4862c37c78810ebb",
      "date": 1703869986434
    },
    {
      "type": "edit",
      "id": "4710134aa307915a",
      "item": {
        "type": "code",
        "id": "4710134aa307915a",
        "text": "Slug>>#gtLinksFor:"
      },
      "date": 1703869990989
    },
    {
      "type": "edit",
      "id": "4862c37c78810ebb",
      "item": {
        "type": "paragraph",
        "id": "4862c37c78810ebb",
        "text": "PARKER-WOOD, Aleatha, LONG, Darrell D. E., MILLER, Ethan, RIGAUX, Philippe and ISAACSON, Andy, 2014. A File By Any Other Name: Managing File Names with Metadata. In: Proceedings of International Conference on Systems and Storage. Haifa Israel: ACM. 30 June 2014. p. 1–11. ISBN 978-1-4503-2920-0. DOI 10.1145/2611354.2611367. [https://escholarship.org/content/qt3404q9xv/qt3404q9xv.pdf pdf] [https://escholarship.org/uc/item/3404q9xv permalink] [Accessed 29 December 2023]."
      },
      "date": 1703870065092
    },
    {
      "type": "add",
      "id": "222a8b91d1392efd",
      "item": {
        "type": "paragraph",
        "id": "222a8b91d1392efd",
        "text": "**Abstract**. \n\nFile names are one of the earliest computing abstractions, a string of characters to uniquely identify a file for the system, and to help users remember the contents when they look for it later. They are also a rich source of semantic metadata about files. However, this metadata is unstructured and opaque to the rest of the system. As a result, metadata in file names is often error-prone, and hard to search for. File names can and should be more meaningful and reliable, while simplifying application design and encouraging users and applications to provide more metadata for search.\n\nWe describe a POSIX compliant prototype file system, TrueNames, which demonstrates an alternate approach to naming and metadata, called metadata aware naming. TrueNames separates the task of uniquely identifying a file from the task of helping the user remember its contents. It captures metadata in a structured format for later indexing, and uses it to generate file names which are correct, regenerable, and disambiguatable by design. TrueNames simplifies application design by providing a consistent interface for metadata aware naming, incurs a low overhead of approximately 15% under realistic workloads, and can simplify a wide variety of data management tasks for both applications and users.\n"
      },
      "after": "4862c37c78810ebb",
      "date": 1703870076528
    },
    {
      "type": "edit",
      "id": "222a8b91d1392efd",
      "item": {
        "type": "paragraph",
        "id": "222a8b91d1392efd",
        "text": "**Abstract**. File names are one of the earliest computing abstractions, a string of characters to uniquely identify a file for the system, and to help users remember the contents when they look for it later. They are also a rich source of semantic metadata about files. However, this metadata is unstructured and opaque to the rest of the system. As a result, metadata in file names is often error-prone, and hard to search for. File names can and should be more meaningful and reliable, while simplifying application design and encouraging users and applications to provide more metadata for search.\n\nWe describe a POSIX compliant prototype file system, TrueNames, which demonstrates an alternate approach to naming and metadata, called metadata aware naming. TrueNames separates the task of uniquely identifying a file from the task of helping the user remember its contents. It captures metadata in a structured format for later indexing, and uses it to generate file names which are correct, regenerable, and disambiguatable by design. TrueNames simplifies application design by providing a consistent interface for metadata aware naming, incurs a low overhead of approximately 15% under realistic workloads, and can simplify a wide variety of data management tasks for both applications and users.\n"
      },
      "date": 1703870083379
    },
    {
      "type": "edit",
      "id": "222a8b91d1392efd",
      "item": {
        "type": "markdown",
        "id": "222a8b91d1392efd",
        "text": "**Abstract**. File names are one of the earliest computing abstractions, a string of characters to uniquely identify a file for the system, and to help users remember the contents when they look for it later. They are also a rich source of semantic metadata about files. However, this metadata is unstructured and opaque to the rest of the system. As a result, metadata in file names is often error-prone, and hard to search for. File names can and should be more meaningful and reliable, while simplifying application design and encouraging users and applications to provide more metadata for search.\n\nWe describe a POSIX compliant prototype file system, TrueNames, which demonstrates an alternate approach to naming and metadata, called metadata aware naming. TrueNames separates the task of uniquely identifying a file from the task of helping the user remember its contents. It captures metadata in a structured format for later indexing, and uses it to generate file names which are correct, regenerable, and disambiguatable by design. TrueNames simplifies application design by providing a consistent interface for metadata aware naming, incurs a low overhead of approximately 15% under realistic workloads, and can simplify a wide variety of data management tasks for both applications and users.\n"
      },
      "date": 1703870084361
    },
    {
      "item": {
        "type": "factory",
        "id": "f3f0256ff2704aa2"
      },
      "id": "f3f0256ff2704aa2",
      "type": "add",
      "after": "4710134aa307915a",
      "date": 1703870157298
    },
    {
      "type": "edit",
      "id": "f3f0256ff2704aa2",
      "item": {
        "type": "image",
        "id": "f3f0256ff2704aa2",
        "text": "Uploaded image",
        "size": "wide",
        "width": 430,
        "height": 261,
        "url": "/assets/plugins/image/69febcdece58e045dd74faf0296c27d1.jpg"
      },
      "date": 1703870168217
    },
    {
      "type": "edit",
      "id": "f3f0256ff2704aa2",
      "item": {
        "type": "image",
        "id": "f3f0256ff2704aa2",
        "text": "Slug>>#gtLinksFor:",
        "size": "wide",
        "width": 430,
        "height": 261,
        "url": "/assets/plugins/image/69febcdece58e045dd74faf0296c27d1.jpg"
      },
      "date": 1703870174564
    },
    {
      "type": "edit",
      "id": "f3f0256ff2704aa2",
      "item": {
        "type": "image",
        "id": "f3f0256ff2704aa2",
        "text": "[[Slug]]>>#gtLinksFor:",
        "size": "wide",
        "width": 430,
        "height": 261,
        "url": "/assets/plugins/image/69febcdece58e045dd74faf0296c27d1.jpg"
      },
      "date": 1703870187743
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703870297349
    },
    {
      "type": "edit",
      "id": "222a8b91d1392efd",
      "item": {
        "type": "markdown",
        "id": "222a8b91d1392efd",
        "text": "**Abstract**. File names are one of the earliest computing abstractions, a string of characters to uniquely identify a file for the system, and to help users remember the contents when they look for it later. They are also a rich source of semantic metadata about files. However, this metadata is unstructured and opaque to the rest of the system. As a result, metadata in file names is often error-prone, and hard to search for. File names can and should be more meaningful and reliable, while simplifying application design and encouraging users and applications to provide more metadata for search."
      },
      "date": 1703870453536
    },
    {
      "type": "add",
      "id": "8236c10ec3d3bc68",
      "item": {
        "type": "markdown",
        "id": "8236c10ec3d3bc68",
        "text": "We describe a POSIX compliant prototype file system, TrueNames, which demonstrates an alternate approach to naming and metadata, called [[Metadata Aware Naming]]. TrueNames separates the task of uniquely identifying a file from the task of helping the user remember its contents. It captures metadata in a structured format for later indexing, and uses it to generate file names which are correct, regenerable, and disambiguatable by design. TrueNames simplifies application design by providing a consistent interface for metadata aware naming, incurs a low overhead of approximately 15% under realistic workloads, and can simplify a wide variety of data management tasks for both applications and users."
      },
      "after": "222a8b91d1392efd",
      "date": 1703870464578
    },
    {
      "type": "add",
      "id": "f7e91b42c88e78ab",
      "item": {
        "type": "paragraph",
        "id": "f7e91b42c88e78ab",
        "text": "- [ ] **TODO**: add the external UID as additional metadata"
      },
      "after": "385e27b454937640",
      "date": 1703870654609
    },
    {
      "type": "edit",
      "id": "f7e91b42c88e78ab",
      "item": {
        "type": "markdown",
        "id": "f7e91b42c88e78ab",
        "text": "- [ ] **TODO**: add the external UID as additional metadata"
      },
      "date": 1703870656482
    },
    {
      "type": "edit",
      "id": "724ca2ba46e164bd",
      "item": {
        "type": "markdown",
        "id": "724ca2ba46e164bd",
        "text": "⇒ [[Represent Arbitrary Domain Objects]]"
      },
      "date": 1703870672228
    },
    {
      "type": "edit",
      "id": "f7e91b42c88e78ab",
      "item": {
        "type": "markdown",
        "id": "f7e91b42c88e78ab",
        "text": "- [ ] **TODO**: add the external UID as additional metadata ⇐ [[Represent Arbitrary Domain Objects]]"
      },
      "date": 1703870687551
    },
    {
      "item": {
        "type": "factory",
        "id": "9ed7e150e43f1e33"
      },
      "id": "9ed7e150e43f1e33",
      "type": "add",
      "after": "f3f0256ff2704aa2",
      "date": 1703870729828
    },
    {
      "type": "edit",
      "id": "9ed7e150e43f1e33",
      "item": {
        "type": "reference",
        "id": "9ed7e150e43f1e33",
        "site": "wiki.ralfbarkow.ch",
        "slug": "represent-arbitrary-domain-objects",
        "title": "Represent Arbitrary Domain Objects",
        "text": "> […] library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github]"
      },
      "date": 1703870736313
    },
    {
      "id": "18786771d00890ae",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "18786771d00890ae",
        "text": "> […] library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID. Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github]",
        "alias": "b54a621c5a756b5e"
      },
      "after": "9ed7e150e43f1e33",
      "attribution": {
        "page": "Represent Arbitrary Domain Objects"
      },
      "date": 1703870742003
    },
    {
      "type": "edit",
      "id": "9ed7e150e43f1e33",
      "item": {
        "type": "reference",
        "id": "9ed7e150e43f1e33",
        "site": "wiki.ralfbarkow.ch",
        "slug": "represent-arbitrary-domain-objects",
        "title": "Represent Arbitrary Domain Objects",
        "text": "> […] library to have pages representing arbitrary domain objects. The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID."
      },
      "date": 1703870772308
    },
    {
      "type": "edit",
      "id": "18786771d00890ae",
      "item": {
        "type": "markdown",
        "id": "18786771d00890ae",
        "text": "> […] Regarding your situation [⇒ [[UID-Based Links]]], you might be able to hook into [[Lepiter]]'s UID assignment and substitute your external UIDs, but it might be easier to just add the external UID as additional metadata. [https://github.com/seandenigris/Objective-Lepiter github]",
        "alias": "b54a621c5a756b5e"
      },
      "date": 1703870784027
    },
    {
      "item": {
        "type": "factory",
        "id": "6b1ca2b080db1b52"
      },
      "id": "6b1ca2b080db1b52",
      "type": "add",
      "after": "18786771d00890ae",
      "date": 1703870794977
    },
    {
      "type": "edit",
      "id": "6b1ca2b080db1b52",
      "item": {
        "type": "reference",
        "id": "6b1ca2b080db1b52",
        "site": "wiki.ralfbarkow.ch",
        "slug": "objective-lepiter",
        "title": "Objective-Lepiter",
        "text": "[[Sean DeNigris]]' library to have pages representing arbitrary domain objects. [https://discord.com/channels/729445214812504107/735946052347363551/979841325245530132 discord]"
      },
      "date": 1703870801273
    },
    {
      "type": "edit",
      "id": "f7e91b42c88e78ab",
      "item": {
        "type": "markdown",
        "id": "f7e91b42c88e78ab",
        "text": "- [ ] **TODO**: add the external UID as additional metadata \n⇐ [[Represent Arbitrary Domain Objects]]"
      },
      "date": 1703870818130
    },
    {
      "type": "edit",
      "id": "9ed7e150e43f1e33",
      "item": {
        "type": "reference",
        "id": "9ed7e150e43f1e33",
        "site": "wiki.ralfbarkow.ch",
        "slug": "represent-arbitrary-domain-objects",
        "title": "Represent Arbitrary Domain Objects",
        "text": "The pages have titles, but they are mutable depending on object state, so the pages are keyed by UID."
      },
      "date": 1703870874712
    },
    {
      "item": {
        "type": "factory",
        "id": "ac2297b52b9cb419"
      },
      "id": "ac2297b52b9cb419",
      "type": "add",
      "after": "6b1ca2b080db1b52",
      "date": 1703876501633
    },
    {
      "type": "edit",
      "id": "ac2297b52b9cb419",
      "item": {
        "type": "paragraph",
        "id": "ac2297b52b9cb419",
        "text": "⇒ [[Database Slug]]"
      },
      "date": 1703876517239
    },
    {
      "item": {
        "type": "factory",
        "id": "62e6b165473b8d7e"
      },
      "id": "62e6b165473b8d7e",
      "type": "add",
      "after": "ac2297b52b9cb419",
      "date": 1703876542343
    },
    {
      "type": "edit",
      "id": "62e6b165473b8d7e",
      "item": {
        "type": "markdown",
        "id": "62e6b165473b8d7e",
        "text": "2. **Database Slug:**\n   - In the context of databases, a \"slug\" can be used as an index or identifier for a record in a database table. It's a unique identifier that is usually derived from a more human-readable field, such as a name or title.\n   - The purpose of using a slug in a database is to create a unique key that is more user-friendly than an auto-incremented numerical ID. For example, a blog post database might have a \"slug\" column that stores the URL-friendly version of the post title.\n\nIn both cases, the goal is to create a more readable and user-friendly representation of a resource, whether it's in a URL or a database. This improves the user experience and makes it easier to remember or share resource identifiers.\n\nHere's a simple example in Pharo Smalltalk where a slug is generated from a title:\n\n```smalltalk\nObject subclass: #SlugGenerator\n    instanceVariableNames: ''\n    classVariableNames: ''\n    poolDictionaries: ''\n    category: 'YourCategory'\n\nSlugGenerator>>generateSlugFromTitle: aTitle\n    \"Generate a URL-friendly slug from a title\"\n    | slug |\n    slug := aTitle\n                convertTo: 'ascii'\n                asUppercase\n                translating: ' ' to: '-';\n                select: [ :each | each isAlphaNumeric or: [ each = '-' ] ].\n    ^ slug\n```\n\nThis method in `SlugGenerator` takes a title, converts it to ASCII, converts to uppercase, replaces spaces with dashes, and removes non-alphanumeric characters, resulting in a URL-friendly slug.\n\nKeep in mind that the specifics of slug generation may vary based on requirements and conventions used in a particular application or framework. (ChatGPT 3.5)"
      },
      "date": 1703876546658
    },
    {
      "item": {
        "type": "factory",
        "id": "b6d6d66cd0a6d0be"
      },
      "id": "b6d6d66cd0a6d0be",
      "type": "add",
      "after": "62e6b165473b8d7e",
      "date": 1703876681472
    },
    {
      "type": "edit",
      "id": "b6d6d66cd0a6d0be",
      "item": {
        "type": "markdown",
        "id": "b6d6d66cd0a6d0be",
        "text": "**Note**: The instance variables `slug` and `url` are not yet initialized."
      },
      "date": 1703876686191
    },
    {
      "item": {
        "type": "factory",
        "id": "52e8d0daec3cc229"
      },
      "id": "52e8d0daec3cc229",
      "type": "add",
      "after": "b6d6d66cd0a6d0be",
      "date": 1703876726350
    },
    {
      "type": "edit",
      "id": "52e8d0daec3cc229",
      "item": {
        "type": "paragraph",
        "id": "52e8d0daec3cc229",
        "text": "[[Slug]]>>#slug"
      },
      "date": 1703876736824
    },
    {
      "item": {
        "type": "factory",
        "id": "571389cd2e882308"
      },
      "id": "571389cd2e882308",
      "type": "add",
      "after": "52e8d0daec3cc229",
      "date": 1703876745310
    },
    {
      "type": "edit",
      "id": "571389cd2e882308",
      "item": {
        "type": "code",
        "id": "571389cd2e882308",
        "text": "slug\n\tslug := rawData at: #slug.\n\t^ slug"
      },
      "date": 1703876748409
    },
    {
      "item": {
        "type": "factory",
        "id": "b28394cc127bbaa4"
      },
      "id": "b28394cc127bbaa4",
      "type": "add",
      "after": "571389cd2e882308",
      "date": 1703876775223
    },
    {
      "type": "edit",
      "id": "b28394cc127bbaa4",
      "item": {
        "type": "paragraph",
        "id": "b28394cc127bbaa4",
        "text": "Context:"
      },
      "date": 1703876779568
    },
    {
      "item": {
        "type": "factory",
        "id": "0d4819d043245bd6"
      },
      "id": "0d4819d043245bd6",
      "type": "add",
      "after": "b28394cc127bbaa4",
      "date": 1703876782010
    },
    {
      "type": "edit",
      "id": "0d4819d043245bd6",
      "item": {
        "type": "code",
        "id": "0d4819d043245bd6",
        "text": "Sitemap get slugs"
      },
      "date": 1703876784690
    },
    {
      "item": {
        "type": "factory",
        "id": "e5e3d185aed057b1"
      },
      "id": "e5e3d185aed057b1",
      "type": "add",
      "after": "0d4819d043245bd6",
      "date": 1703876800647
    },
    {
      "type": "edit",
      "id": "e5e3d185aed057b1",
      "item": {
        "type": "paragraph",
        "id": "e5e3d185aed057b1",
        "text": "⇐ [[Sitemap]]"
      },
      "date": 1703876809082
    },
    {
      "item": {
        "type": "factory",
        "id": "eb3a1d27c83fb12f"
      },
      "id": "eb3a1d27c83fb12f",
      "type": "add",
      "after": "e5e3d185aed057b1",
      "date": 1703876821627
    },
    {
      "type": "edit",
      "id": "eb3a1d27c83fb12f",
      "item": {
        "type": "paragraph",
        "id": "eb3a1d27c83fb12f",
        "text": "Tutorial example — generating a site map"
      },
      "date": 1703876823961
    },
    {
      "item": {
        "type": "factory",
        "id": "3f56dd8c0b94afbf"
      },
      "id": "3f56dd8c0b94afbf",
      "type": "add",
      "after": "eb3a1d27c83fb12f",
      "date": 1703876833909
    },
    {
      "type": "edit",
      "id": "3f56dd8c0b94afbf",
      "item": {
        "type": "paragraph",
        "id": "3f56dd8c0b94afbf",
        "text": "NIERSTRASZ, Oscar, [no date]. Regular Expressions in Pharo. [pdf](https://scg.unibe.ch/archive/papers/Nier13aRegEx.pdf)"
      },
      "date": 1703876836701
    },
    {
      "type": "edit",
      "id": "3f56dd8c0b94afbf",
      "item": {
        "type": "paragraph",
        "id": "3f56dd8c0b94afbf",
        "text": "NIERSTRASZ, Oscar, [no date]. Regular Expressions in Pharo. [https://scg.unibe.ch/archive/papers/Nier13aRegEx.pdf pdf]"
      },
      "date": 1703876848220
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703876893258
    },
    {
      "type": "edit",
      "id": "3f56dd8c0b94afbf",
      "item": {
        "type": "paragraph",
        "id": "3f56dd8c0b94afbf",
        "text": "NIERSTRASZ, Oscar, [no date]. [[Regular Expressions in Pharo]]. [https://scg.unibe.ch/archive/papers/Nier13aRegEx.pdf pdf]"
      },
      "date": 1703876909908
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703876997394
    },
    {
      "type": "edit",
      "id": "ec2d82b0d3ace017",
      "item": {
        "type": "markdown",
        "id": "ec2d82b0d3ace017",
        "text": "# Is there Static Typing for a Smalltalk derivative?"
      },
      "date": 1703877108063
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703877239263
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there Static Typing for a Smalltalk derivative?, [[Alan Kay]], [[Quildreen Motta]] et al.)"
      },
      "date": 1703877287211
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703877355453
    },
    {
      "item": {
        "type": "factory",
        "id": "24b6d5ff44f07345"
      },
      "id": "24b6d5ff44f07345",
      "type": "add",
      "after": "3f56dd8c0b94afbf",
      "date": 1703880372434
    },
    {
      "type": "edit",
      "id": "24b6d5ff44f07345",
      "item": {
        "type": "paragraph",
        "id": "24b6d5ff44f07345",
        "text": "\nMELÉ, Antonio, 2020. Django 3 By Example. 3rd ed. Packt Publishing. ISBN 978-1-83898-195-2. \n"
      },
      "date": 1703880376020
    },
    {
      "id": "24b6d5ff44f07345",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "b54a621c5a756b5e",
        "724ca2ba46e164bd",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc",
        "a0086bca83f09898",
        "385e27b454937640",
        "f7e91b42c88e78ab",
        "b7fd89657640dd6b",
        "927d7f0dc0841e07",
        "4862c37c78810ebb",
        "222a8b91d1392efd",
        "8236c10ec3d3bc68",
        "4710134aa307915a",
        "f3f0256ff2704aa2",
        "9ed7e150e43f1e33",
        "18786771d00890ae",
        "6b1ca2b080db1b52",
        "ac2297b52b9cb419",
        "62e6b165473b8d7e",
        "24b6d5ff44f07345",
        "b6d6d66cd0a6d0be",
        "52e8d0daec3cc229",
        "571389cd2e882308",
        "b28394cc127bbaa4",
        "0d4819d043245bd6",
        "e5e3d185aed057b1",
        "eb3a1d27c83fb12f",
        "3f56dd8c0b94afbf"
      ],
      "date": 1703880390665
    },
    {
      "type": "edit",
      "id": "24b6d5ff44f07345",
      "item": {
        "type": "paragraph",
        "id": "24b6d5ff44f07345",
        "text": "MELÉ, Antonio, 2020. Django 3 By Example. 3rd ed. Packt Publishing. ISBN 978-1-83898-195-2."
      },
      "date": 1703880407069
    },
    {
      "type": "edit",
      "id": "2310ceee8319b9cf",
      "item": {
        "type": "markdown",
        "id": "2310ceee8319b9cf",
        "text": "> slug: A short label that contains only letters, numbers, underscores, or hyphens to be used for building beautiful SEO-friendly URLs."
      },
      "date": 1703880410392
    },
    {
      "item": {
        "type": "factory",
        "id": "4c9feb038518a409"
      },
      "id": "4c9feb038518a409",
      "type": "add",
      "after": "3f56dd8c0b94afbf",
      "date": 1703880607649
    },
    {
      "type": "edit",
      "id": "4c9feb038518a409",
      "item": {
        "type": "paragraph",
        "id": "4c9feb038518a409",
        "text": "In the Meta class of the Product model, you use the index_together meta option to specify an index for the id and slug fields together. You define this index because you plan to query products by both id and slug. Both fields are indexed together to improve performance for queries that utilize the two fields."
      },
      "date": 1703880613433
    },
    {
      "id": "4c9feb038518a409",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "b54a621c5a756b5e",
        "724ca2ba46e164bd",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc",
        "a0086bca83f09898",
        "385e27b454937640",
        "f7e91b42c88e78ab",
        "b7fd89657640dd6b",
        "927d7f0dc0841e07",
        "4862c37c78810ebb",
        "222a8b91d1392efd",
        "8236c10ec3d3bc68",
        "4710134aa307915a",
        "f3f0256ff2704aa2",
        "9ed7e150e43f1e33",
        "18786771d00890ae",
        "6b1ca2b080db1b52",
        "ac2297b52b9cb419",
        "62e6b165473b8d7e",
        "24b6d5ff44f07345",
        "4c9feb038518a409",
        "b6d6d66cd0a6d0be",
        "52e8d0daec3cc229",
        "571389cd2e882308",
        "b28394cc127bbaa4",
        "0d4819d043245bd6",
        "e5e3d185aed057b1",
        "eb3a1d27c83fb12f",
        "3f56dd8c0b94afbf"
      ],
      "date": 1703880814723
    },
    {
      "type": "add",
      "id": "cd209740b34c0419",
      "item": {
        "type": "paragraph",
        "id": "cd209740b34c0419",
        "text": "> slug: A short label that contains only letters, numbers, underscores, or hyphens to be used for building beautiful SEO-friendly URLs."
      },
      "after": "24b6d5ff44f07345",
      "date": 1703880855302
    },
    {
      "type": "edit",
      "id": "cd209740b34c0419",
      "item": {
        "type": "markdown",
        "id": "cd209740b34c0419",
        "text": "> slug: A short label that contains only letters, numbers, underscores, or hyphens to be used for building beautiful SEO-friendly URLs."
      },
      "date": 1703880857685
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703880915822
    },
    {
      "type": "edit",
      "id": "4c9feb038518a409",
      "item": {
        "type": "paragraph",
        "id": "4c9feb038518a409",
        "text": "In the Meta class of the Product model, you use the index_together meta option to specify an index for the id and slug fields together. You define this index because you plan to query products by both id and slug. Both fields are indexed together to improve performance for queries that utilize the two fields. [⇐ [[Slug]]>>#gtLinksFor:]"
      },
      "date": 1703881003659
    },
    {
      "type": "add",
      "id": "1957401c51a841c0",
      "item": {
        "type": "paragraph",
        "id": "1957401c51a841c0",
        "text": "⇐ Both fields: "
      },
      "after": "4c9feb038518a409",
      "date": 1703881086488
    },
    {
      "type": "edit",
      "id": "1957401c51a841c0",
      "item": {
        "type": "paragraph",
        "id": "1957401c51a841c0",
        "text": "⇐ Both fields: `Index` and `Item` ID"
      },
      "date": 1703881123985
    },
    {
      "type": "edit",
      "id": "1957401c51a841c0",
      "item": {
        "type": "markdown",
        "id": "1957401c51a841c0",
        "text": "⇐ Both fields: `Index` and `Item` ID"
      },
      "date": 1703881126889
    },
    {
      "type": "edit",
      "id": "1957401c51a841c0",
      "item": {
        "type": "markdown",
        "id": "1957401c51a841c0",
        "text": "⇐ Both fields: `Index` (Slug) and `Item` ID"
      },
      "date": 1703881142422
    },
    {
      "type": "edit",
      "id": "1957401c51a841c0",
      "item": {
        "type": "markdown",
        "id": "1957401c51a841c0",
        "text": "⇐ Both fields: `Index` (Slug) and `Item` ID "
      },
      "date": 1703881160117
    },
    {
      "type": "edit",
      "id": "1957401c51a841c0",
      "item": {
        "type": "markdown",
        "id": "1957401c51a841c0",
        "text": "⇐ Both fields: `Index` (Slug) and `Item` ID ⇒ [[Links]]"
      },
      "date": 1703881180941
    },
    {
      "type": "add",
      "id": "dbb8f844b9556e1c",
      "item": {
        "type": "markdown",
        "id": "dbb8f844b9556e1c",
        "text": "[[FileReference]]>>#asLepiterZnUrl"
      },
      "after": "b6d6d66cd0a6d0be",
      "date": 1703885205023
    },
    {
      "item": {
        "type": "factory",
        "id": "011ba753bb08f39e"
      },
      "id": "011ba753bb08f39e",
      "type": "add",
      "after": "3f56dd8c0b94afbf",
      "date": 1703885233891
    },
    {
      "id": "011ba753bb08f39e",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "b54a621c5a756b5e",
        "724ca2ba46e164bd",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc",
        "a0086bca83f09898",
        "385e27b454937640",
        "f7e91b42c88e78ab",
        "b7fd89657640dd6b",
        "927d7f0dc0841e07",
        "4862c37c78810ebb",
        "222a8b91d1392efd",
        "8236c10ec3d3bc68",
        "4710134aa307915a",
        "f3f0256ff2704aa2",
        "9ed7e150e43f1e33",
        "18786771d00890ae",
        "6b1ca2b080db1b52",
        "ac2297b52b9cb419",
        "62e6b165473b8d7e",
        "24b6d5ff44f07345",
        "cd209740b34c0419",
        "4c9feb038518a409",
        "1957401c51a841c0",
        "b6d6d66cd0a6d0be",
        "dbb8f844b9556e1c",
        "011ba753bb08f39e",
        "52e8d0daec3cc229",
        "571389cd2e882308",
        "b28394cc127bbaa4",
        "0d4819d043245bd6",
        "e5e3d185aed057b1",
        "eb3a1d27c83fb12f",
        "3f56dd8c0b94afbf"
      ],
      "date": 1703885239312
    },
    {
      "type": "edit",
      "id": "011ba753bb08f39e",
      "item": {
        "type": "code",
        "id": "011ba753bb08f39e",
        "text": "asLepiterZnUrl\n\n\t^ ZnUrl new\n\t\tscheme: #file;\n\t\tsegments: path segments asOrderedCollection.\n"
      },
      "date": 1703885241493
    },
    {
      "type": "edit",
      "id": "dbb8f844b9556e1c",
      "item": {
        "type": "markdown",
        "id": "dbb8f844b9556e1c",
        "text": "[[FileReference]]>>#asLepiterZnUrl ⇒ [[ZnUrl]]"
      },
      "date": 1703885285927
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703885432223
    },
    {
      "type": "add",
      "id": "c3855449e9be96d9",
      "item": {
        "type": "markdown",
        "id": "c3855449e9be96d9",
        "text": "FileLocator>>#asLepiterZnUrl"
      },
      "after": "dbb8f844b9556e1c",
      "date": 1703885561623
    },
    {
      "id": "c3855449e9be96d9",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "b54a621c5a756b5e",
        "724ca2ba46e164bd",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc",
        "a0086bca83f09898",
        "385e27b454937640",
        "f7e91b42c88e78ab",
        "b7fd89657640dd6b",
        "927d7f0dc0841e07",
        "4862c37c78810ebb",
        "222a8b91d1392efd",
        "8236c10ec3d3bc68",
        "4710134aa307915a",
        "f3f0256ff2704aa2",
        "9ed7e150e43f1e33",
        "18786771d00890ae",
        "6b1ca2b080db1b52",
        "ac2297b52b9cb419",
        "62e6b165473b8d7e",
        "24b6d5ff44f07345",
        "cd209740b34c0419",
        "4c9feb038518a409",
        "1957401c51a841c0",
        "b6d6d66cd0a6d0be",
        "dbb8f844b9556e1c",
        "011ba753bb08f39e",
        "c3855449e9be96d9",
        "52e8d0daec3cc229",
        "571389cd2e882308",
        "b28394cc127bbaa4",
        "0d4819d043245bd6",
        "e5e3d185aed057b1",
        "eb3a1d27c83fb12f",
        "3f56dd8c0b94afbf"
      ],
      "date": 1703885564211
    },
    {
      "type": "edit",
      "id": "c3855449e9be96d9",
      "item": {
        "type": "markdown",
        "id": "c3855449e9be96d9",
        "text": "[[FileLocator]]>>#asLepiterZnUrl"
      },
      "date": 1703885572340
    },
    {
      "id": "eb3a1d27c83fb12f",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "b54a621c5a756b5e",
        "724ca2ba46e164bd",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc",
        "a0086bca83f09898",
        "385e27b454937640",
        "f7e91b42c88e78ab",
        "b7fd89657640dd6b",
        "927d7f0dc0841e07",
        "4862c37c78810ebb",
        "222a8b91d1392efd",
        "8236c10ec3d3bc68",
        "4710134aa307915a",
        "f3f0256ff2704aa2",
        "9ed7e150e43f1e33",
        "18786771d00890ae",
        "6b1ca2b080db1b52",
        "ac2297b52b9cb419",
        "62e6b165473b8d7e",
        "24b6d5ff44f07345",
        "cd209740b34c0419",
        "4c9feb038518a409",
        "1957401c51a841c0",
        "b6d6d66cd0a6d0be",
        "dbb8f844b9556e1c",
        "011ba753bb08f39e",
        "c3855449e9be96d9",
        "52e8d0daec3cc229",
        "571389cd2e882308",
        "b28394cc127bbaa4",
        "0d4819d043245bd6",
        "e5e3d185aed057b1",
        "3f56dd8c0b94afbf",
        "eb3a1d27c83fb12f"
      ],
      "date": 1703886113004
    },
    {
      "type": "edit",
      "id": "3e36c3e5f61b864e",
      "item": {
        "type": "paragraph",
        "id": "3e36c3e5f61b864e",
        "text": "In this chapter we will start with a small tutorial example in which we will develop a couple of classes to generate a very simple site map for a web site. We will use regular expressions (i) to identify HTML files, (ii) to strip the full path name of a file down to just the file name, (iii) to extract the title of each web page for the site map, and (iv) to generate a relative path from the root directory of the web site to the HTML files it contains."
      },
      "date": 1703886119737
    },
    {
      "type": "add",
      "id": "89452d5cec763cf3",
      "item": {
        "type": "paragraph",
        "id": "89452d5cec763cf3",
        "text": "Our job is to write a simple application that will generate a site map for a web site that we have stored locally on our hard drive. The site map will contain links to each of the HTML files in the web site, using the title of the document as the text of the link. Furthermore, links will be indented to reflect the directory structure of the web site."
      },
      "after": "3e36c3e5f61b864e",
      "date": 1703886184639
    },
    {
      "type": "add",
      "id": "a698c98bc96f1109",
      "item": {
        "type": "paragraph",
        "id": "a698c98bc96f1109",
        "text": "We will develop two classes, WebDir and WebPage, to represent directories and web pages. The idea is to create an instance of WebDir which will point to the root directory containing our web site. When we send it the message makeToc, it will walk through the files and directories inside it to build up the site map. It will then create a new file, called toc.html, containing links to all the pages in the web site."
      },
      "after": "89452d5cec763cf3",
      "date": 1703886226914
    },
    {
      "type": "add",
      "id": "42948db50dcf4844",
      "item": {
        "type": "paragraph",
        "id": "42948db50dcf4844",
        "text": "n order to generate our site map, we need to generate links to the individual web pages. We can use the document title as the name of the link. We just need to generate the right path to the web page from the root of the web site. Luckily this is trivial — it is simple the full path to the web page minus the full path to the root directory of the web site."
      },
      "after": "a698c98bc96f1109",
      "date": 1703886305419
    },
    {
      "type": "edit",
      "id": "42948db50dcf4844",
      "item": {
        "type": "paragraph",
        "id": "42948db50dcf4844",
        "text": "In order to generate our site map, we need to generate links to the individual web pages. We can use the document title as the name of the link. We just need to generate the right path to the web page from the root of the web site. Luckily this is trivial — it is simple the full path to the web page minus the full path to the root directory of the web site."
      },
      "date": 1703886309846
    },
    {
      "type": "add",
      "id": "e8cf0c8c04f0407e",
      "item": {
        "type": "paragraph",
        "id": "e8cf0c8c04f0407e",
        "text": "Actually, we are now done with the regular expressions we need to generate the site map. We just need a few more methods to complete the application."
      },
      "after": "42948db50dcf4844",
      "date": 1703886361634
    },
    {
      "type": "add",
      "id": "2bc2f02d9b8f4459",
      "item": {
        "type": "paragraph",
        "id": "2bc2f02d9b8f4459",
        "text": "We create a file called “toc.html” in the root web directory and dump the site map there."
      },
      "after": "e8cf0c8c04f0407e",
      "date": 1703886388343
    },
    {
      "type": "add",
      "id": "802e63f3dad4edc9",
      "item": {
        "type": "paragraph",
        "id": "802e63f3dad4edc9",
        "text": "⇒ [[Convert a Sitemap to a DITA Map]]"
      },
      "after": "2bc2f02d9b8f4459",
      "date": 1703886481321
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703932517204
    },
    {
      "type": "remove",
      "id": "89452d5cec763cf3",
      "date": 1703932525542
    },
    {
      "type": "remove",
      "id": "a698c98bc96f1109",
      "date": 1703932527003
    },
    {
      "type": "remove",
      "id": "42948db50dcf4844",
      "date": 1703932528452
    },
    {
      "type": "remove",
      "id": "e8cf0c8c04f0407e",
      "date": 1703932531062
    },
    {
      "type": "remove",
      "id": "2bc2f02d9b8f4459",
      "date": 1703932532802
    },
    {
      "type": "remove",
      "id": "802e63f3dad4edc9",
      "date": 1703932535023
    },
    {
      "id": "89452d5cec763cf3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "89452d5cec763cf3",
        "text": "Our job is to write a simple application that will generate a site map for a web site that we have stored locally on our hard drive. The site map will contain links to each of the HTML files in the web site, using the title of the document as the text of the link. Furthermore, links will be indented to reflect the directory structure of the web site."
      },
      "after": "eb3a1d27c83fb12f",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703932615467
    },
    {
      "id": "42948db50dcf4844",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "42948db50dcf4844",
        "text": "In order to generate our site map, we need to generate links to the individual web pages. We can use the document title as the name of the link. We just need to generate the right path to the web page from the root of the web site. Luckily this is trivial — it is simple the full path to the web page minus the full path to the root directory of the web site."
      },
      "after": "a698c98bc96f1109",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703932620856
    },
    {
      "id": "e8cf0c8c04f0407e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e8cf0c8c04f0407e",
        "text": "Actually, we are now done with the regular expressions we need to generate the site map. We just need a few more methods to complete the application."
      },
      "after": "42948db50dcf4844",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703932623365
    },
    {
      "id": "2bc2f02d9b8f4459",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2bc2f02d9b8f4459",
        "text": "We create a file called “toc.html” in the root web directory and dump the site map there."
      },
      "after": "e8cf0c8c04f0407e",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703932630725
    },
    {
      "id": "802e63f3dad4edc9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "802e63f3dad4edc9",
        "text": "⇒ [[Convert a Sitemap to a DITA Map]]"
      },
      "after": "2bc2f02d9b8f4459",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703932633715
    },
    {
      "id": "42948db50dcf4844",
      "type": "remove",
      "removedTo": {
        "page": "scratch"
      },
      "date": 1703932710081
    },
    {
      "id": "e8cf0c8c04f0407e",
      "type": "remove",
      "removedTo": {
        "page": "scratch"
      },
      "date": 1703932717930
    },
    {
      "id": "2bc2f02d9b8f4459",
      "type": "remove",
      "removedTo": {
        "page": "scratch"
      },
      "date": 1703932720893
    },
    {
      "id": "802e63f3dad4edc9",
      "type": "remove",
      "removedTo": {
        "page": "scratch"
      },
      "date": 1703932726918
    },
    {
      "type": "edit",
      "id": "89452d5cec763cf3",
      "item": {
        "type": "paragraph",
        "id": "89452d5cec763cf3",
        "text": "In this chapter we will start with a small tutorial example in which we will develop a couple of classes to generate a very simple site map for a web site. We will use regular expressions (i) to identify HTML files, (ii) to strip the full path name of a file down to just the file name, (iii) to extract the title of each web page for the site map, and (iv) to generate a relative path from the root directory of the web site to the HTML files it contains."
      },
      "date": 1703933616228
    },
    {
      "type": "add",
      "id": "03c3c70efcc13f1f",
      "item": {
        "type": "paragraph",
        "id": "03c3c70efcc13f1f",
        "text": "Our job is to write a simple application that will generate a site map for a web site that we have stored locally on our hard drive. The site map will contain links to each of the HTML files in the web site, using the title of the document as the text of the link. Furthermore, links will be indented to reflect the directory structure of the web site."
      },
      "after": "89452d5cec763cf3",
      "date": 1703933616817
    },
    {
      "type": "add",
      "id": "7077d7fc253cc108",
      "item": {
        "type": "paragraph",
        "id": "7077d7fc253cc108",
        "text": "We will develop two classes, WebDir and WebPage, to represent directories and web pages. The idea is to create an instance of WebDir which will point to the root directory containing our web site. When we send it the message makeToc, it will walk through the files and directories inside it to build up the site map. It will then create a new file, called toc.html, containing links to all the pages in the web site."
      },
      "after": "03c3c70efcc13f1f",
      "date": 1703933677088
    },
    {
      "id": "42948db50dcf4844",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "42948db50dcf4844",
        "text": "In order to generate our site map, we need to generate links to the individual web pages. We can use the document title as the name of the link. We just need to generate the right path to the web page from the root of the web site. Luckily this is trivial — it is simple the full path to the web page minus the full path to the root directory of the web site."
      },
      "after": "7077d7fc253cc108",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703933744540
    },
    {
      "id": "e8cf0c8c04f0407e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e8cf0c8c04f0407e",
        "text": "Actually, we are now done with the regular expressions we need to generate the site map. We just need a few more methods to complete the application."
      },
      "after": "42948db50dcf4844",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703933788314
    },
    {
      "id": "2bc2f02d9b8f4459",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2bc2f02d9b8f4459",
        "text": "We create a file called “toc.html” in the root web directory and dump the site map there."
      },
      "after": "e8cf0c8c04f0407e",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703933796995
    },
    {
      "id": "802e63f3dad4edc9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "802e63f3dad4edc9",
        "text": "⇒ [[Convert a Sitemap to a DITA Map]]"
      },
      "after": "2bc2f02d9b8f4459",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703933800351
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703933864333
    },
    {
      "type": "add",
      "id": "98e74135e829b947",
      "item": {
        "type": "paragraph",
        "id": "98e74135e829b947",
        "text": " ⇒ [[Fluid Not Permanent]]"
      },
      "after": "8529156add09189b",
      "date": 1703934105398
    },
    {
      "type": "edit",
      "id": "98e74135e829b947",
      "item": {
        "type": "paragraph",
        "id": "98e74135e829b947",
        "text": "  [[Fluid Not Permanent]]"
      },
      "date": 1703934110346
    },
    {
      "type": "edit",
      "id": "98e74135e829b947",
      "item": {
        "type": "paragraph",
        "id": "98e74135e829b947",
        "text": "⇒ [[Fluid Not Permanent]]"
      },
      "date": 1703934120414
    },
    {
      "type": "edit",
      "id": "98e74135e829b947",
      "item": {
        "type": "paragraph",
        "id": "98e74135e829b947",
        "text": "⇒ [[Fluid Not Permanent]] ⇒ [[Unique Item Identifiers]]"
      },
      "date": 1703934145062
    },
    {
      "type": "edit",
      "id": "98e74135e829b947",
      "item": {
        "type": "paragraph",
        "id": "98e74135e829b947",
        "text": "⇒ [[Fluid Not Permanent]] ⇒ [[Unique Item Identifiers]] ⇒ Universal Intent"
      },
      "date": 1703934198936
    },
    {
      "id": "74028ce7b58cf53c",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "74028ce7b58cf53c",
        "text": "However even though we do not use content addressable references (ie mulithash-based) – we do want these references to be universal. Our software will break if our ids are not unique, and we seek to preserve content across time, and with the participation of any number of future authors.\n"
      },
      "after": "98e74135e829b947",
      "attribution": {
        "page": "Unique Item Identifiers"
      },
      "date": 1703934204304
    },
    {
      "type": "edit",
      "id": "74028ce7b58cf53c",
      "item": {
        "type": "markdown",
        "id": "74028ce7b58cf53c",
        "text": "> Our software will break if our ids are not unique, and we seek to preserve content across time, and with the participation of any number of future authors.\n"
      },
      "date": 1703934208996
    },
    {
      "type": "add",
      "id": "c8dc9b07d86e3d4f",
      "item": {
        "type": "paragraph",
        "id": "c8dc9b07d86e3d4f",
        "text": "**Note**: Our Context is our id."
      },
      "after": "8529156add09189b",
      "date": 1703934372235
    },
    {
      "type": "edit",
      "id": "c8dc9b07d86e3d4f",
      "item": {
        "type": "markdown",
        "id": "c8dc9b07d86e3d4f",
        "text": "**Note**: Our Context is our id."
      },
      "date": 1703934374267
    },
    {
      "type": "edit",
      "id": "c8dc9b07d86e3d4f",
      "item": {
        "type": "markdown",
        "id": "c8dc9b07d86e3d4f",
        "text": "**Note**: Our Context is our id. ⇒ [[Fluid Not Permanent]] ⇒ [[Unique Item Identifiers]] ⇒ Universal Intent"
      },
      "date": 1703934396102
    },
    {
      "type": "edit",
      "id": "c8dc9b07d86e3d4f",
      "item": {
        "type": "markdown",
        "id": "c8dc9b07d86e3d4f",
        "text": "**Note**: Our Context we carry along with the story snippets is their id. ⇒ [[Fluid Not Permanent]] ⇒ [[Unique Item Identifiers]] ⇒ Universal Intent"
      },
      "date": 1703934464464
    },
    {
      "type": "edit",
      "id": "c8dc9b07d86e3d4f",
      "item": {
        "type": "markdown",
        "id": "c8dc9b07d86e3d4f",
        "text": "**Note**: Our context that we carry with the story snippets is their ID.. ⇒ [[Fluid Not Permanent]] ⇒ [[Unique Item Identifiers]] ⇒ Universal Intent"
      },
      "date": 1703934506296
    },
    {
      "type": "edit",
      "id": "c8dc9b07d86e3d4f",
      "item": {
        "type": "markdown",
        "id": "c8dc9b07d86e3d4f",
        "text": "**Note**: Our context that we carry with the story snippets is their ID. ⇒ [[Fluid Not Permanent]] ⇒ [[Unique Item Identifiers]] ⇒ Universal Intent"
      },
      "date": 1703934518502
    },
    {
      "type": "add",
      "id": "97c983f4fb3fdb3e",
      "item": {
        "type": "paragraph",
        "id": "97c983f4fb3fdb3e",
        "text": "Everything is a page."
      },
      "after": "78bd3bb0ba09a858",
      "date": 1703934596819
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703934682207
    },
    {
      "type": "edit",
      "id": "f93bb393c5c0cf4c",
      "item": {
        "type": "markdown",
        "id": "f93bb393c5c0cf4c",
        "text": "The `create` [[Action]] type alone does not generate an ID."
      },
      "date": 1703934785802
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see [[objects as plain records of data]]**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), […]"
      },
      "date": 1703934962477
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see [[Objects as Plain Records of Data]]**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), […]"
      },
      "date": 1703934978307
    },
    {
      "type": "edit",
      "id": "939940910a95498c",
      "item": {
        "type": "markdown",
        "id": "939940910a95498c",
        "text": "> but it doesn’t work **if you see [[objects as Behaviour]]**."
      },
      "date": 1703935001773
    },
    {
      "type": "edit",
      "id": "939940910a95498c",
      "item": {
        "type": "markdown",
        "id": "939940910a95498c",
        "text": "> but it doesn’t work **if you see [[Objects as Behaviour]]**."
      },
      "date": 1703935013623
    },
    {
      "type": "edit",
      "id": "e7fa159d4146488d",
      "item": {
        "type": "markdown",
        "id": "e7fa159d4146488d",
        "text": "We can now imagine that to bind to a resource, our object (and object system) will be able to [[negotiate]] actively with the environment of the object to [[get interior views of exterior resources]]."
      },
      "date": 1703935105948
    },
    {
      "type": "edit",
      "id": "e7fa159d4146488d",
      "item": {
        "type": "markdown",
        "id": "e7fa159d4146488d",
        "text": "We can now imagine that to bind to a resource, our object (and object system) will be able to [[negotiate]] actively with the environment of the object to [[Get Interior Views of Exterior Resources]]."
      },
      "date": 1703935116704
    },
    {
      "type": "edit",
      "id": "e9e4e669f11bd271",
      "item": {
        "type": "markdown",
        "id": "e9e4e669f11bd271",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “[[Telegram]]”, but has the potential of being a full-fledged [[Ambassador]], so that it can likewise take part in real [[Negotiation of meaning]] at the receiving end."
      },
      "date": 1703935147891
    },
    {
      "type": "edit",
      "id": "e9e4e669f11bd271",
      "item": {
        "type": "markdown",
        "id": "e9e4e669f11bd271",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “[[Telegram]]”, but has the potential of being a full-fledged [[Ambassador]], so that it can likewise take part in real [[Negotiation of Meaning]] at the receiving end."
      },
      "date": 1703935157732
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703936669532
    },
    {
      "type": "remove",
      "id": "98e74135e829b947",
      "date": 1703937064479
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703938932976
    },
    {
      "type": "edit",
      "id": "357cf905780a950f",
      "item": {
        "type": "markdown",
        "id": "357cf905780a950f",
        "text": "• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The [[Semantic Matchmaker]] will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703941285103
    },
    {
      "type": "edit",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "paragraph",
        "id": "aa5df413d00700d3",
        "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were [[Full-Duplex]].\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points."
      },
      "date": 1704210228990
    },
    {
      "id": "ba2fc3eafab5e292",
      "type": "add",
      "item": {
        "type": "video",
        "id": "ba2fc3eafab5e292",
        "text": "YOUTUBE AnrlSqtpOkw\nTribute to Ted Nelson at Intertwingled Festival by Alan Kay, Bonnie MacBird"
      },
      "after": "aa5df413d00700d3",
      "attribution": {
        "page": "2023-12-31"
      },
      "date": 1704212435849
    },
    {
      "type": "add",
      "id": "53e845c239e52dca",
      "item": {
        "type": "paragraph",
        "id": "53e845c239e52dca",
        "text": "Let me start the discussion with readers, here, with three points."
      },
      "after": "aa5df413d00700d3",
      "date": 1704212442799
    },
    {
      "id": "53e845c239e52dca",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "c8dc9b07d86e3d4f",
        "74028ce7b58cf53c",
        "78bd3bb0ba09a858",
        "97c983f4fb3fdb3e",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "ba2fc3eafab5e292",
        "53e845c239e52dca",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c",
        "1de79b51ffb1661b",
        "d197705d135ac17f",
        "36cf5ffe22bed370",
        "157aa190b39313b4",
        "b54a621c5a756b5e",
        "724ca2ba46e164bd",
        "85921bf7ee14a8ac",
        "ca1ace3b2a6b20f5",
        "aed6c23421d22434",
        "1e7de8ce4f1247dc",
        "a0086bca83f09898",
        "385e27b454937640",
        "f7e91b42c88e78ab",
        "b7fd89657640dd6b",
        "927d7f0dc0841e07",
        "4862c37c78810ebb",
        "222a8b91d1392efd",
        "8236c10ec3d3bc68",
        "4710134aa307915a",
        "f3f0256ff2704aa2",
        "9ed7e150e43f1e33",
        "18786771d00890ae",
        "6b1ca2b080db1b52",
        "ac2297b52b9cb419",
        "62e6b165473b8d7e",
        "24b6d5ff44f07345",
        "cd209740b34c0419",
        "4c9feb038518a409",
        "1957401c51a841c0",
        "b6d6d66cd0a6d0be",
        "dbb8f844b9556e1c",
        "011ba753bb08f39e",
        "c3855449e9be96d9",
        "52e8d0daec3cc229",
        "571389cd2e882308",
        "b28394cc127bbaa4",
        "0d4819d043245bd6",
        "e5e3d185aed057b1",
        "3f56dd8c0b94afbf",
        "eb3a1d27c83fb12f",
        "89452d5cec763cf3",
        "03c3c70efcc13f1f",
        "7077d7fc253cc108",
        "42948db50dcf4844",
        "e8cf0c8c04f0407e",
        "2bc2f02d9b8f4459",
        "802e63f3dad4edc9"
      ],
      "date": 1704212447081
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1704212504950
    },
    {
      "type": "edit",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "paragraph",
        "id": "aa5df413d00700d3",
        "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were [[Full-Duplex]].\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado."
      },
      "date": 1704212527602
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1704212581957
    },
    {
      "type": "edit",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "paragraph",
        "id": "aa5df413d00700d3",
        "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were [[Full-Duplex]].\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like [[LINDA]] as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado."
      },
      "date": 1705505908471
    }
  ]
}