{
  "title": "2023-12-29",
  "story": [
    {
      "type": "paragraph",
      "id": "604236f230de9a75",
      "text": "The [[Journal]], when properly maintained, [[collect]]s the complete history of a wiki page."
    },
    {
      "type": "markdown",
      "id": "a085daa1319256c6",
      "text": "[[Action]]s of type `create` indicate newly made pages."
    },
    {
      "type": "image",
      "id": "445175f0c33f7a49",
      "text": "KeyNotFound",
      "size": "wide",
      "width": 430,
      "height": 263,
      "url": "/assets/plugins/image/06bdf2e60a5638833dc2c44a3b75e57e.jpg"
    },
    {
      "type": "markdown",
      "id": "ed4882f2acd77d26",
      "text": "# Key #id Not Found"
    },
    {
      "type": "reference",
      "id": "964da54eb1b95bc0",
      "site": "wiki.ralfbarkow.ch",
      "slug": "item-id",
      "title": "Item-id",
      "text": "Every [[Wiki Page]] in the federation [[contains]] a [[Story]] element which in turn is composed of an ordered list of items. Each item has an ID which is assigned on creation."
    },
    {
      "type": "markdown",
      "id": "f93bb393c5c0cf4c",
      "text": "The `create` [[Action]] type alone does not generate an `id`."
    },
    {
      "type": "markdown",
      "id": "a1a5a0cf98bf025c",
      "text": "After the `create` action, the `story` is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The `title` is"
    },
    {
      "type": "code",
      "id": "054846bb1397244c",
      "text": "(self item) value at: #title"
    },
    {
      "type": "markdown",
      "id": "15c2f146e91c99ed",
      "text": "**Note**: The instance variables `slug` and `url` are not yet initialized."
    },
    {
      "type": "markdown",
      "id": "19a483d723b52c81",
      "text": "# Arrange the Story"
    },
    {
      "type": "paragraph",
      "id": "cdf0423981d247b0",
      "text": "[[Action]]s of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked. "
    },
    {
      "type": "paragraph",
      "id": "8529156add09189b",
      "text": "The [[Arrangement]] axiom gives permission to take multiple forms out of the interior [[Content]] of a [[Frame]] and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
    },
    {
      "type": "paragraph",
      "id": "78bd3bb0ba09a858",
      "text": "The generic template collapses if either the [[Type]] or the [[Content]] is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In [[Arrangement]], [[collect]] gathers together framed-content that has in common the same [[Frame Type]]."
    },
    {
      "type": "markdown",
      "id": "d30b51f1c85858ce",
      "text": "## See also\n"
    },
    {
      "type": "markdown",
      "id": "63c23c1135f05a38",
      "text": "- [[Item Distribution]]\n- [[Unique Item Identifiers]] ⇒ [[Fluid Not Permanent]]\n- [[Example of a Void-Equivalent Type]]"
    },
    {
      "type": "graphviz",
      "id": "9d35c2d92831c091",
      "text": "DOT FROM two-level-diagram",
      "dot": "strict digraph {rankdir=LR\nnode [shape=plaintext]\n\"2023-12-29\" -> \"Journal\"\n\"2023-12-29\" -> \"collect\"\n\"2023-12-29\" -> \"Action\"\n\"2023-12-29\" -> \"Wiki\nPage\"\n\"2023-12-29\" -> \"contains\"\n\"2023-12-29\" -> \"Story\"\n\"2023-12-29\" -> \"Action\"\n\"2023-12-29\" -> \"Void-Equivalent\"\n\"2023-12-29\" -> \"Action\"\n\"2023-12-29\" -> \"arrange\"\n\"2023-12-29\" -> \"Story\"\n\"2023-12-29\" -> \"Arrangement\"\n\"2023-12-29\" -> \"Arrangement\"\n\"2023-12-29\" -> \"Content\"\n\"2023-12-29\" -> \"Frame\"\n\"2023-12-29\" -> \"put\"\n\"2023-12-29\" -> \"Frame\nType\"\n\"2023-12-29\" -> \"Type\"\n\"2023-12-29\" -> \"Content\"\n\"2023-12-29\" -> \"Void-Equivalent\"\n\"2023-12-29\" -> \"Arrangement\"\n\"2023-12-29\" -> \"collect\"\n\"2023-12-29\" -> \"Frame\nType\"\n\"2023-12-29\" -> \"Item\nDistribution\"\n\"2023-12-29\" -> \"Unique\nItem\nIdentifiers\"\n\"2023-12-29\" -> \"Fluid\nNot\nPermanent\"\n\"2023-12-29\" -> \"Example\nof\na\nVoid-Equivalent\nType\"\n\"2023-12-29\" -> \"Interpreter\"\n\"2023-12-29\" -> \"Static\nTyping\"\n\"2023-12-29\" -> \"Alan\nKay\"\n\"2023-12-29\" -> \"Quildreen\nMotta\"\n\"2023-12-29\" -> \"Structure\"\n\"2023-12-29\" -> \"Item\"\n\"2023-12-29\" -> \"The\nFederation\"\n\"2023-12-29\" -> \"Behaviour\"\n\"2023-12-29\" -> \"Card\"\n\"2023-12-29\" -> \"Behavior\"\n\"2023-12-29\" -> \"Static\nTyping\"\n\"2023-12-29\" -> \"Alan\nKay\"\n\"2023-12-29\" -> \"Quildreen\nMotta\"\n\"2023-12-29\" -> \"Alan\nKay\"\n\"2023-12-29\" -> \"Object\"\n\"2023-12-29\" -> \"Something\"\n\"2023-12-29\" -> \"negotiate\"\n\"2023-12-29\" -> \"Telegram\"\n\"2023-12-29\" -> \"Ambassador\"\n\"2023-12-29\" -> \"General\nGame\nPlaying\"\n\"2023-12-29\" -> \"Michael\nGenesereth\"\n\"2023-12-29\" -> \"Quildreen\nMotta\"\n\"2023-12-29\" -> \"Strongtalk\"\n\"2023-12-29\" -> \"Type\nSystems\nas\nMacros\"\n\"2023-12-29\" -> \"Amal\nAhmed\"\n\"2023-12-29\" -> \"Name\"\n\"2023-12-29\" -> \"Structure\"\n\"2023-12-29\" -> \"Objects\nas\nBehaviour\"\n\"2023-12-29\" -> \"Objects\nas\nBehaviour\"\n\"2023-12-29\" -> \"Type\nSystems\nas\nMacros\"\n\"2023-12-29\" -> \"Extensionality\"\n\"2023-12-29\" -> \"Attribution\"\n\"2023-12-29\" -> \"Contents\nIs\nIntention\nObscuring\"\n\"Journal\" -> \"Wiki\nPage\"\n\"Journal\" -> \"Action\"\n\"Journal\" -> \"Neighborhood\"\n\"Journal\" -> \"Names\nof\nThings\"\n\"Journal\" -> \"Events\nand\nCausal\nDependence\"\n\"Journal\" -> \"Journal\nto\nGraph\"\n\"collect\" -> \"Inversion\"\n\"collect\" -> \"Arrangement\"\n\"collect\" -> \"James\nForm\"\n\"collect\" -> \"Frame\nType\"\n\"collect\" -> \"Structure\"\n\"collect\" -> \"Square-Bracket\"\n\"collect\" -> \"Arrangement\"\n\"collect\" -> \"Square-Bracket\"\n\"collect\" -> \"Inversion\"\n\"collect\" -> \"Event\"\n\"collect\" -> \"Structure\"\n\"collect\" -> \"Loop\"\n\"Action\" -> \"record\"\n\"Action\" -> \"Types\"\n\"Action\" -> \"Ownership\"\n\"Action\" -> \"Journal\"\n\"Wiki\nPage\" -> \"Federated\nWiki\nPage\"\n\"Wiki\nPage\" -> \"Fedwiki\nPage\"\n\"Wiki\nPage\" -> \"Hypertext\"\n\"Wiki\nPage\" -> \"Lineup\"\n\"Wiki\nPage\" -> \"Web\nPage\"\n\"Wiki\nPage\" -> \"Snippet\"\n\"Wiki\nPage\" -> \"Story\"\n\"Wiki\nPage\" -> \"combine\"\n\"Wiki\nPage\" -> \"Hypertext\"\n\"Wiki\nPage\" -> \"JSON\nSchema\"\n\"Wiki\nPage\" -> \"Where\nPages\nLive\"\n\"Wiki\nPage\" -> \"Wiki\nPage\nJSON\"\n\"Wiki\nPage\" -> \"Story\"\n\"Wiki\nPage\" -> \"Journal\"\n\"Wiki\nPage\" -> \"Lineup\"\n\"Wiki\nPage\" -> \"Item\"\n\"contains\" -> \"Concepts\"\n\"contains\" -> \"Network\"\n\"contains\" -> \"Relation\"\n\"contains\" -> \"Matrix\"\n\"contains\" -> \"relation\"\n\"Story\" -> \"Distinction\"\n\"Story\" -> \"Life\"\n\"Story\" -> \"Storycraft\"\n\"Story\" -> \"Choice\"\n\"Action\" -> \"record\"\n\"Action\" -> \"Types\"\n\"Action\" -> \"Ownership\"\n\"Action\" -> \"Journal\"\n\"Action\" -> \"record\"\n\"Action\" -> \"Types\"\n\"Action\" -> \"Ownership\"\n\"Action\" -> \"Journal\"\n\"Story\" -> \"Distinction\"\n\"Story\" -> \"Life\"\n\"Story\" -> \"Storycraft\"\n\"Story\" -> \"Choice\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"Inversion\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"disperse\"\n\"Arrangement\" -> \"put\"\n\"Arrangement\" -> \"Context\"\n\"Arrangement\" -> \"Frames\"\n\"Arrangement\" -> \"Structure\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"Iconic\nArithmetic\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"Inversion\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"disperse\"\n\"Arrangement\" -> \"put\"\n\"Arrangement\" -> \"Context\"\n\"Arrangement\" -> \"Frames\"\n\"Arrangement\" -> \"Structure\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"Iconic\nArithmetic\"\n\"Frame\" -> \"About\nFrame\nPlugin\"\n\"Frame\" -> \"About\nFrame\nIntegrations\"\n\"Frame\" -> \"Key\nFrame\"\n\"put\" -> \"Lambda\nCalculus\"\n\"put\" -> \"Lingdong\nHuang\"\n\"put\" -> \"put\"\n\"put\" -> \"Content\"\n\"put\" -> \"Frame\"\n\"put\" -> \"Frame\nType\"\n\"Frame\nType\" -> \"Structure\"\n\"Frame\nType\" -> \"Square-Bracket\"\n\"Frame\nType\" -> \"Arrangement\"\n\"Frame\nType\" -> \"collect\"\n\"Frame\nType\" -> \"Iconic\nArithmetic\"\n\"Frame\nType\" -> \"Arrangement\"\n\"Frame\nType\" -> \"Content\"\n\"Frame\nType\" -> \"Frame\"\n\"Frame\nType\" -> \"put\"\n\"Frame\nType\" -> \"Context\"\n\"Type\" -> \"The\nBehavioural\nPoint\nof\nView\"\n\"Type\" -> \"Name\"\n\"Type\" -> \"Behaviour\"\n\"Type\" -> \"Being\nthe\nSame\"\n\"Type\" -> \"JavaScript\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"Inversion\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"disperse\"\n\"Arrangement\" -> \"put\"\n\"Arrangement\" -> \"Context\"\n\"Arrangement\" -> \"Frames\"\n\"Arrangement\" -> \"Structure\"\n\"Arrangement\" -> \"Square-Bracket\"\n\"Arrangement\" -> \"collect\"\n\"Arrangement\" -> \"Iconic\nArithmetic\"\n\"collect\" -> \"Inversion\"\n\"collect\" -> \"Arrangement\"\n\"collect\" -> \"James\nForm\"\n\"collect\" -> \"Frame\nType\"\n\"collect\" -> \"Structure\"\n\"collect\" -> \"Square-Bracket\"\n\"collect\" -> \"Arrangement\"\n\"collect\" -> \"Square-Bracket\"\n\"collect\" -> \"Inversion\"\n\"collect\" -> \"Event\"\n\"collect\" -> \"Structure\"\n\"collect\" -> \"Loop\"\n\"Frame\nType\" -> \"Structure\"\n\"Frame\nType\" -> \"Square-Bracket\"\n\"Frame\nType\" -> \"Arrangement\"\n\"Frame\nType\" -> \"collect\"\n\"Frame\nType\" -> \"Iconic\nArithmetic\"\n\"Frame\nType\" -> \"Arrangement\"\n\"Frame\nType\" -> \"Content\"\n\"Frame\nType\" -> \"Frame\"\n\"Frame\nType\" -> \"put\"\n\"Frame\nType\" -> \"Context\"\n\"Item\nDistribution\" -> \"Search\nIndex\nDownloads\"\n\"Unique\nItem\nIdentifiers\" -> \"the\nfederation\"\n\"Unique\nItem\nIdentifiers\" -> \"permanent\nweb\"\n\"Unique\nItem\nIdentifiers\" -> \"permanent\nweb\"\n\"Unique\nItem\nIdentifiers\" -> \"dead\nwiki\"\n\"Unique\nItem\nIdentifiers\" -> \"long\nnow\"\n\"Unique\nItem\nIdentifiers\" -> \"mediawiki\ntransport\"\n\"Unique\nItem\nIdentifiers\" -> \"Livecode\"\n\"Unique\nItem\nIdentifiers\" -> \"transporters\"\n\"Unique\nItem\nIdentifiers\" -> \"uuid\"\n\"Unique\nItem\nIdentifiers\" -> \"uuid\"\n\"Unique\nItem\nIdentifiers\" -> \"node.js\"\n\"Unique\nItem\nIdentifiers\" -> \"Universally\nunique\nidentifier\"\n\"Fluid\nNot\nPermanent\" -> \"fluid\"\n\"Fluid\nNot\nPermanent\" -> \"permanent\"\n\"Fluid\nNot\nPermanent\" -> \"Intent\"\n\"Fluid\nNot\nPermanent\" -> \"Intention\"\n\"Interpreter\" -> \"Mixins\"\n\"Static\nTyping\" -> \"Compile\nTime\"\n\"Static\nTyping\" -> \"Reference\nValue\"\n\"Static\nTyping\" -> \"Compile\nTime\"\n\"Static\nTyping\" -> \"Type\nInference\"\n\"Static\nTyping\" -> \"Type\nSystem\"\n\"Static\nTyping\" -> \"Programming\nLanguage\"\n\"Static\nTyping\" -> \"Strong\nTyping\"\n\"Static\nTyping\" -> \"Dynamic\nTyping\"\n\"Static\nTyping\" -> \"Soft\nTyping\"\n\"Static\nTyping\" -> \"Adam\nBerger\"\n\"Static\nTyping\" -> \"Java\nLanguage\"\n\"Static\nTyping\" -> \"Cee\nPlus\nPlus\"\n\"Static\nTyping\" -> \"Pascal\nLanguage\"\n\"Static\nTyping\" -> \"Ada\nLanguage\"\n\"Static\nTyping\" -> \"Objective\nCaml\"\n\"Static\nTyping\" -> \"Sml\nLanguage\"\n\"Static\nTyping\" -> \"Haskell\nLanguage\"\n\"Static\nTyping\" -> \"Definitions\nOf\nTypes\"\n\"Static\nTyping\" -> \"Category\nLanguage\nTyping\"\n\"Alan\nKay\" -> \"Seymour\nPapert\"\n\"Alan\nKay\" -> \"Blue\nPlane\"\n\"Alan\nKay\" -> \"Smalltalk\"\n\"Quildreen\nMotta\" -> \"Structure\"\n\"Quildreen\nMotta\" -> \"Objects\nas\nBehaviour\"\n\"Structure\" -> \"Advance\nOrganizer\"\n\"Structure\" -> \"Scaffolding\"\n\"Structure\" -> \"Change\"\n\"Structure\" -> \"Inside\"\n\"Structure\" -> \"Outside\"\n\"Structure\" -> \"Model\"\n\"Structure\" -> \"Boundary\"\n\"Structure\" -> \"Cognition\"\n\"Structure\" -> \"remind\"\n\"Structure\" -> \"William\nBricken\"\n\"Structure\" -> \"Surprise\"\n\"Structure\" -> \"Autopoiesis\"\n\"Structure\" -> \"Event\"\n\"Structure\" -> \"Learning\nEnvironment\"\n\"Structure\" -> \"Path\"\n\"Structure\" -> \"Choice\"\n\"Structure\" -> \"Patterns\"\n\"The\nFederation\" -> \"Star\nTrek\"\n\"The\nFederation\" -> \"Decentralised\nWeb\"\n\"The\nFederation\" -> \"Federated\nCommons\"\n\"The\nFederation\" -> \"Commons\"\n\"The\nFederation\" -> \"Series\nof\nCultural\nEvents\"\n\"The\nFederation\" -> \"Conversations\nAcross\nSpace\"\n\"The\nFederation\" -> \"Thematic\nconversations\"\n\"The\nFederation\" -> \"Decentralised\nArchive\"\n\"The\nFederation\" -> \"Podcasting\nCommunity\"\n\"The\nFederation\" -> \"Film\nand\nDocumentary\nResearch\"\n\"The\nFederation\" -> \"Future\nof\nthe\nFederation\"\n\"The\nFederation\" -> \"Visualising\nthe\nFederation\"\n\"The\nFederation\" -> \"Graphing\nthe\nFederation\"\n\"The\nFederation\" -> \"The\nPermanent\nFederation\"\n\"The\nFederation\" -> \"United\nFederation\nof\nPlanets\"\n\"The\nFederation\" -> \"Federation\nWars\"\n\"The\nFederation\" -> \"Federated\nGovernance\"\n\"Behaviour\" -> \"Behaviors\"\n\"Behaviour\" -> \"Interpreter\"\n\"Behaviour\" -> \"Logic\"\n\"Behaviour\" -> \"Equality\"\n\"Behaviour\" -> \"Responsible\nBehaviour\"\n\"Behaviour\" -> \"Eco-Innovation\"\n\"Card\" -> \"Cards\"\n\"Card\" -> \"Behaviors\"\n\"Behavior\" -> \"State\"\n\"Behavior\" -> \"Class\"\n\"Behavior\" -> \"Metaclass\"\n\"Behavior\" -> \"The\nBehavioural\nPoint\nof\nView\"\n\"Behavior\" -> \"The\nArt\nof\nthe\nInterpreter\"\n\"Behavior\" -> \"A\nPattern\nof\nPerception\"\n\"Behavior\" -> \"A\nMentoring\nCourse\non\nSmalltalk\"\n\"Behavior\" -> \"Trait\nComposition\nMechanism\"\n\"Behavior\" -> \"Croquet\"\n\"Behavior\" -> \"Card\"\n\"Behavior\" -> \"interact\"\n\"Behavior\" -> \"Computation\"\n\"Behavior\" -> \"replicate\"\n\"Behavior\" -> \"Static\nContext\"\n\"Behavior\" -> \"Worldcore\"\n\"Behavior\" -> \"Behavior\nTrees\"\n\"Static\nTyping\" -> \"Compile\nTime\"\n\"Static\nTyping\" -> \"Reference\nValue\"\n\"Static\nTyping\" -> \"Compile\nTime\"\n\"Static\nTyping\" -> \"Type\nInference\"\n\"Static\nTyping\" -> \"Type\nSystem\"\n\"Static\nTyping\" -> \"Programming\nLanguage\"\n\"Static\nTyping\" -> \"Strong\nTyping\"\n\"Static\nTyping\" -> \"Dynamic\nTyping\"\n\"Static\nTyping\" -> \"Soft\nTyping\"\n\"Static\nTyping\" -> \"Adam\nBerger\"\n\"Static\nTyping\" -> \"Java\nLanguage\"\n\"Static\nTyping\" -> \"Cee\nPlus\nPlus\"\n\"Static\nTyping\" -> \"Pascal\nLanguage\"\n\"Static\nTyping\" -> \"Ada\nLanguage\"\n\"Static\nTyping\" -> \"Objective\nCaml\"\n\"Static\nTyping\" -> \"Sml\nLanguage\"\n\"Static\nTyping\" -> \"Haskell\nLanguage\"\n\"Static\nTyping\" -> \"Definitions\nOf\nTypes\"\n\"Static\nTyping\" -> \"Category\nLanguage\nTyping\"\n\"Alan\nKay\" -> \"Seymour\nPapert\"\n\"Alan\nKay\" -> \"Blue\nPlane\"\n\"Alan\nKay\" -> \"Smalltalk\"\n\"Quildreen\nMotta\" -> \"Structure\"\n\"Quildreen\nMotta\" -> \"Objects\nas\nBehaviour\"\n\"Alan\nKay\" -> \"Seymour\nPapert\"\n\"Alan\nKay\" -> \"Blue\nPlane\"\n\"Alan\nKay\" -> \"Smalltalk\"\n\"Object\" -> \"Container\"\n\"Object\" -> \"Outside\"\n\"Object\" -> \"Process\"\n\"Object\" -> \"Inside\"\n\"Object\" -> \"Iconic\nArithmetic\"\n\"Object\" -> \"Life-like\nSystems\"\n\"Object\" -> \"Living\nSystems\"\n\"Object\" -> \"Hyperlink\nin\nObject\"\n\"Object\" -> \"Verb\"\n\"Something\" -> \"Void\"\n\"Something\" -> \"Reference\"\n\"Something\" -> \"Communication\"\n\"Something\" -> \"Something\"\n\"Something\" -> \"Internal\nLink\"\n\"Something\" -> \"Something\"\n\"Something\" -> \"\"\n\"Something\" -> \"QWAN\"\n\"Something\" -> \"Distinction\"\n\"Something\" -> \"Laws\nOf\nForm\"\n\"Something\" -> \"Laws\nof\nForm\nand\nObject\nOriented\nProgramming\"\n\"negotiate\" -> \"The\nPedestrian\nCrossing\nas\nSocial\nGift\"\n\"negotiate\" -> \"cross\"\n\"Telegram\" -> \"Telegram\"\n\"Telegram\" -> \"Ambassador\"\n\"Telegram\" -> \"Negotiation\nof\nMeaning\"\n\"Ambassador\" -> \"Telegram\"\n\"Ambassador\" -> \"Ambassador\"\n\"Ambassador\" -> \"Negotiation\nof\nMeaning\"\n\"General\nGame\nPlaying\" -> \"Michael\nGenesereth\"\n\"Quildreen\nMotta\" -> \"Structure\"\n\"Quildreen\nMotta\" -> \"Objects\nas\nBehaviour\"\n\"Strongtalk\" -> \"Strongtalk\"\n\"Strongtalk\" -> \"Smalltalk-80\"\n\"Strongtalk\" -> \"Strongtalk\"\n\"Name\" -> \"Event\"\n\"Name\" -> \"Distinction\"\n\"Name\" -> \"It’s\nAll\nin\na\nName\"\n\"Structure\" -> \"Advance\nOrganizer\"\n\"Structure\" -> \"Scaffolding\"\n\"Structure\" -> \"Change\"\n\"Structure\" -> \"Inside\"\n\"Structure\" -> \"Outside\"\n\"Structure\" -> \"Model\"\n\"Structure\" -> \"Boundary\"\n\"Structure\" -> \"Cognition\"\n\"Structure\" -> \"remind\"\n\"Structure\" -> \"William\nBricken\"\n\"Structure\" -> \"Surprise\"\n\"Structure\" -> \"Autopoiesis\"\n\"Structure\" -> \"Event\"\n\"Structure\" -> \"Learning\nEnvironment\"\n\"Structure\" -> \"Path\"\n\"Structure\" -> \"Choice\"\n\"Structure\" -> \"Patterns\"\n\"Objects\nas\nBehaviour\" -> \"Structure\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nPlain\nRecords\nof\nData\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nBehaviour\"\n\"Objects\nas\nBehaviour\" -> \"Quildreen\nMotta\"\n\"Objects\nas\nBehaviour\" -> \"Structure\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nPlain\nRecords\nof\nData\"\n\"Objects\nas\nBehaviour\" -> \"Objects\nas\nBehaviour\"\n\"Objects\nas\nBehaviour\" -> \"Quildreen\nMotta\"\n\"Extensionality\" -> \"Logic\"\n\"Extensionality\" -> \"Equality\"\n\"Attribution\" -> \"Attribution\n(Zurechnung)\"\n\"Attribution\" -> \"Attributionsforschung\"\n\"Contents\nIs\nIntention\nObscuring\" -> \"Intention\"\n\"Contents\nIs\nIntention\nObscuring\" -> \"Laws\nof\nForm\nObjects\"}",
      "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 8.0.5 (0)\n -->\n<!-- Pages: 1 -->\n<svg width=\"928pt\" height=\"7727pt\"\n viewBox=\"0.00 0.00 927.76 7727.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 7723)\">\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-7723 923.76,-7723 923.76,4 -4,4\"/>\n<!-- 2023&#45;12&#45;29 -->\n<g id=\"node1\" class=\"node\">\n<title>2023&#45;12&#45;29</title>\n<text text-anchor=\"middle\" x=\"40.66\" y=\"-4412.8\" font-family=\"Times,serif\" font-size=\"14.00\">2023&#45;12&#45;29</text>\n</g>\n<!-- Journal -->\n<g id=\"node2\" class=\"node\">\n<title>Journal</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-7339.8\" font-family=\"Times,serif\" font-size=\"14.00\">Journal</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Journal -->\n<g id=\"edge1\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Journal</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.79,-4434.87C43.43,-4658.57 61.26,-6911.47 117.32,-7200 125.53,-7242.22 144.68,-7288.37 157.73,-7316.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"154.82,-7317.8 162.23,-7325.37 161.16,-7314.83 154.82,-7317.8\"/>\n</g>\n<!-- collect -->\n<g id=\"node3\" class=\"node\">\n<title>collect</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-6184.8\" font-family=\"Times,serif\" font-size=\"14.00\">collect</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;collect -->\n<g id=\"edge2\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;collect</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.41,-4434.87C39.9,-4560.92 34.53,-5328.95 117.32,-5946 127.89,-6024.75 150.97,-6115.77 163.13,-6160.78\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"159.96,-6161.47 165.97,-6170.2 166.71,-6159.63 159.96,-6161.47\"/>\n</g>\n<!-- Action -->\n<g id=\"node4\" class=\"node\">\n<title>Action</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7584.8\" font-family=\"Times,serif\" font-size=\"14.00\">Action</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Action -->\n<g id=\"edge3\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Action</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.77,-4434.66C43.38,-4684 62.63,-7491.19 117.32,-7554 160.93,-7604.08 246.01,-7601.79 294.78,-7595.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.07,-7598.85 304.47,-7593.98 294.08,-7591.92 295.07,-7598.85\"/>\n</g>\n<!-- Wiki\nPage -->\n<g id=\"node5\" class=\"node\">\n<title>Wiki\nPage</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7195.2\" font-family=\"Times,serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7178.4\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Wiki\nPage -->\n<g id=\"edge4\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Wiki\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.84,-4434.84C44.17,-4667.64 69.64,-7101.43 117.32,-7156 161.02,-7206 246.06,-7203.74 294.8,-7197.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.08,-7200.83 304.49,-7195.97 294.1,-7193.9 295.08,-7200.83\"/>\n</g>\n<!-- contains -->\n<g id=\"node6\" class=\"node\">\n<title>contains</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-4277.8\" font-family=\"Times,serif\" font-size=\"14.00\">contains</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;contains -->\n<g id=\"edge5\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;contains</title>\n<path fill=\"none\" stroke=\"black\" d=\"M58.83,-4399.07C81.37,-4375.54 121.07,-4334.1 146.68,-4307.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"148.76,-4310.21 153.15,-4300.57 143.7,-4305.37 148.76,-4310.21\"/>\n</g>\n<!-- Story -->\n<g id=\"node7\" class=\"node\">\n<title>Story</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7534.8\" font-family=\"Times,serif\" font-size=\"14.00\">Story</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Story -->\n<g id=\"edge6\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Story</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.75,-4434.91C42.91,-4673.92 56.74,-7226.73 117.32,-7371 153.26,-7456.58 178.67,-7481.44 262.63,-7521 324.2,-7550.01 405.68,-7548.06 452.16,-7543.73\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.33,-7547.13 461.92,-7542.63 451.61,-7540.17 452.33,-7547.13\"/>\n</g>\n<!-- Void&#45;Equivalent -->\n<g id=\"node8\" class=\"node\">\n<title>Void&#45;Equivalent</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-4223.8\" font-family=\"Times,serif\" font-size=\"14.00\">Void&#45;Equivalent</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Void&#45;Equivalent -->\n<g id=\"edge7\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Void&#45;Equivalent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M45.83,-4399.2C54.23,-4366.78 76.02,-4297.53 117.32,-4255 118.14,-4254.16 118.99,-4253.34 119.87,-4252.54\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"121.63,-4254.83 127.38,-4245.93 117.33,-4249.3 121.63,-4254.83\"/>\n</g>\n<!-- arrange -->\n<g id=\"node9\" class=\"node\">\n<title>arrange</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-4169.8\" font-family=\"Times,serif\" font-size=\"14.00\">arrange</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;arrange -->\n<g id=\"edge8\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;arrange</title>\n<path fill=\"none\" stroke=\"black\" d=\"M43.41,-4399.09C48.2,-4358.96 64.88,-4260.7 117.32,-4201 121.84,-4195.86 127.57,-4191.58 133.59,-4188.06\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"134.87,-4190.82 142.16,-4183.13 131.66,-4184.6 134.87,-4190.82\"/>\n</g>\n<!-- Arrangement -->\n<g id=\"node10\" class=\"node\">\n<title>Arrangement</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6336.8\" font-family=\"Times,serif\" font-size=\"14.00\">Arrangement</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Arrangement -->\n<g id=\"edge9\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Arrangement</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.92,-4434.82C44.65,-4616.93 68.8,-6135.46 117.32,-6216 152.55,-6274.47 226.3,-6308.47 277.33,-6325.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"275.94,-6329.43 286.54,-6329.24 278.13,-6322.78 275.94,-6329.43\"/>\n</g>\n<!-- Content -->\n<g id=\"node11\" class=\"node\">\n<title>Content</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-6642.8\" font-family=\"Times,serif\" font-size=\"14.00\">Content</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Content -->\n<g id=\"edge10\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Content</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.69,-4434.74C42.02,-4629.8 46.97,-6368.88 117.32,-6449 202.07,-6545.51 309.54,-6408.16 402.29,-6497 457.75,-6550.12 378.6,-6617.68 438.29,-6666 514.56,-6727.74 640.02,-6689.93 703.2,-6664.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"704.25,-6667.44 712.15,-6660.38 701.57,-6660.97 704.25,-6667.44\"/>\n</g>\n<!-- Frame -->\n<g id=\"node12\" class=\"node\">\n<title>Frame</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-6852.8\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Frame -->\n<g id=\"edge11\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Frame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.79,-4434.94C43.28,-4640.03 58.67,-6538.57 117.32,-6780 152.77,-6925.91 135.66,-7004.85 262.63,-7085 315.12,-7118.13 355.39,-7125.65 402.29,-7085 487.45,-7011.18 353.13,-6907.82 438.29,-6834 514.02,-6768.36 644.07,-6812.47 706.56,-6839.84\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"704.79,-6843.33 715.35,-6844.23 707.66,-6836.94 704.79,-6843.33\"/>\n</g>\n<!-- put -->\n<g id=\"node13\" class=\"node\">\n<title>put</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-6616.8\" font-family=\"Times,serif\" font-size=\"14.00\">put</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;put -->\n<g id=\"edge12\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;put</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.7,-4434.75C42.15,-4628.11 48.13,-6337.24 117.32,-6416 202.1,-6512.48 299.46,-6387.05 402.29,-6464 431.57,-6485.91 420.76,-6505.9 438.29,-6538 448.77,-6557.19 461.59,-6578.21 471.69,-6594.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"468.99,-6595.57 477.29,-6602.15 474.9,-6591.83 468.99,-6595.57\"/>\n</g>\n<!-- Frame\nType -->\n<g id=\"node14\" class=\"node\">\n<title>Frame\nType</title>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-6444.2\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-6427.4\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Frame\nType -->\n<g id=\"edge13\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Frame\nType</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.92,-4434.79C44.67,-4619.86 69.39,-6188.56 117.32,-6273 155.41,-6340.1 195.19,-6330.51 262.63,-6368 322.47,-6401.26 354.73,-6383.75 402.29,-6433 430.79,-6462.51 404.09,-6495.34 438.29,-6518 476.48,-6543.3 499.27,-6536.07 541.37,-6518 564.32,-6508.15 583.51,-6487.31 596.61,-6469.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"599.97,-6471.97 602.9,-6461.78 594.26,-6467.92 599.97,-6471.97\"/>\n</g>\n<!-- Type -->\n<g id=\"node15\" class=\"node\">\n<title>Type</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-5648.8\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Type -->\n<g id=\"edge14\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Type</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.79,-4434.6C42.9,-4575.35 52.75,-5515.18 117.32,-5621 121.77,-5628.29 128.56,-5634.12 135.83,-5638.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"133.71,-5642.09 144.15,-5643.86 137.09,-5635.96 133.71,-5642.09\"/>\n</g>\n<!-- Item\nDistribution -->\n<g id=\"node16\" class=\"node\">\n<title>Item\nDistribution</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-4063.2\" font-family=\"Times,serif\" font-size=\"14.00\">Item</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-4046.4\" font-family=\"Times,serif\" font-size=\"14.00\">Distribution</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Item\nDistribution -->\n<g id=\"edge15\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Item\nDistribution</title>\n<path fill=\"none\" stroke=\"black\" d=\"M44.92,-4399.05C53.3,-4354.87 77.8,-4237.84 117.32,-4147 126.3,-4126.37 139.4,-4104.78 150.41,-4088.15\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"153.58,-4090.7 156.27,-4080.46 147.78,-4086.79 153.58,-4090.7\"/>\n</g>\n<!-- Unique\nItem\nIdentifiers -->\n<g id=\"node17\" class=\"node\">\n<title>Unique\nItem\nIdentifiers</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3741.6\" font-family=\"Times,serif\" font-size=\"14.00\">Unique</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3724.8\" font-family=\"Times,serif\" font-size=\"14.00\">Item</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3708\" font-family=\"Times,serif\" font-size=\"14.00\">Identifiers</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Unique\nItem\nIdentifiers -->\n<g id=\"edge16\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Unique\nItem\nIdentifiers</title>\n<path fill=\"none\" stroke=\"black\" d=\"M44.99,-4399.3C61.97,-4308.97 139.11,-3898.53 163.54,-3768.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"167.13,-3769.42 165.54,-3758.95 160.25,-3768.13 167.13,-3769.42\"/>\n</g>\n<!-- Fluid\nNot\nPermanent -->\n<g id=\"node18\" class=\"node\">\n<title>Fluid\nNot\nPermanent</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3329.6\" font-family=\"Times,serif\" font-size=\"14.00\">Fluid</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3312.8\" font-family=\"Times,serif\" font-size=\"14.00\">Not</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3296\" font-family=\"Times,serif\" font-size=\"14.00\">Permanent</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Fluid\nNot\nPermanent -->\n<g id=\"edge17\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Fluid\nNot\nPermanent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M43.28,-4399.01C50.68,-4317.27 82.45,-3972.71 117.32,-3691 132.44,-3568.9 154.21,-3424.96 164.77,-3356.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"168.35,-3357.46 166.42,-3347.05 161.43,-3356.39 168.35,-3357.46\"/>\n</g>\n<!-- Example\nof\na\nVoid&#45;Equivalent\nType -->\n<g id=\"node19\" class=\"node\">\n<title>Example\nof\na\nVoid&#45;Equivalent\nType</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3148.4\" font-family=\"Times,serif\" font-size=\"14.00\">Example</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3131.6\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3114.8\" font-family=\"Times,serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3098\" font-family=\"Times,serif\" font-size=\"14.00\">Void&#45;Equivalent</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3081.2\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Example\nof\na\nVoid&#45;Equivalent\nType -->\n<g id=\"edge18\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Example\nof\na\nVoid&#45;Equivalent\nType</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.99,-4399.41C44.71,-4260.07 64.49,-3335.94 118.34,-3174.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"121.96,-3176.32 122.27,-3165.73 115.42,-3173.81 121.96,-3176.32\"/>\n</g>\n<!-- Interpreter -->\n<g id=\"node20\" class=\"node\">\n<title>Interpreter</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5556.8\" font-family=\"Times,serif\" font-size=\"14.00\">Interpreter</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Interpreter -->\n<g id=\"edge19\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Interpreter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.03,-4434.94C45.2,-4568.78 72.61,-5410.09 262.63,-5550 314.44,-5588.14 392.43,-5582.02 441.97,-5572.64\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"442.59,-5575.88 451.69,-5570.47 441.2,-5569.02 442.59,-5575.88\"/>\n</g>\n<!-- Static\nTyping -->\n<g id=\"node21\" class=\"node\">\n<title>Static\nTyping</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-2550.2\" font-family=\"Times,serif\" font-size=\"14.00\">Static</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-2533.4\" font-family=\"Times,serif\" font-size=\"14.00\">Typing</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Static\nTyping -->\n<g id=\"edge20\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Static\nTyping</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.34,-4399.05C46.88,-4281.55 73.82,-3609.84 117.32,-3064 132.05,-2879.31 157.58,-2658.39 167.18,-2577.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"170.77,-2578.04 168.48,-2567.69 163.82,-2577.21 170.77,-2578.04\"/>\n</g>\n<!-- Alan\nKay -->\n<g id=\"node22\" class=\"node\">\n<title>Alan\nKay</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-1905.2\" font-family=\"Times,serif\" font-size=\"14.00\">Alan</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-1888.4\" font-family=\"Times,serif\" font-size=\"14.00\">Kay</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Alan\nKay -->\n<g id=\"edge21\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Alan\nKay</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.05,-4399.16C45.21,-4257.19 67.83,-3295.58 117.32,-2516 131.54,-2292.1 158.38,-2023.17 167.7,-1932.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"171.27,-1932.99 168.82,-1922.68 164.31,-1932.27 171.27,-1932.99\"/>\n</g>\n<!-- Quildreen\nMotta -->\n<g id=\"node23\" class=\"node\">\n<title>Quildreen\nMotta</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-5828.2\" font-family=\"Times,serif\" font-size=\"14.00\">Quildreen</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-5811.4\" font-family=\"Times,serif\" font-size=\"14.00\">Motta</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Quildreen\nMotta -->\n<g id=\"edge22\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Quildreen\nMotta</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.68,-4434.57C41.94,-4585.87 46.31,-5666.1 117.32,-5789 119.97,-5793.57 123.48,-5797.66 127.44,-5801.27\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"125.05,-5804.63 135.08,-5808.04 129.37,-5799.12 125.05,-5804.63\"/>\n</g>\n<!-- Structure -->\n<g id=\"node24\" class=\"node\">\n<title>Structure</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-6002.8\" font-family=\"Times,serif\" font-size=\"14.00\">Structure</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Structure -->\n<g id=\"edge23\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.68,-4434.57C41.97,-4579.21 46.54,-5570.62 117.32,-5680 156.92,-5741.19 191.86,-5738.61 262.63,-5756 322.91,-5770.81 344.44,-5778.5 402.29,-5756 422.52,-5748.13 418.06,-5730.87 438.29,-5723 480.99,-5706.39 495.67,-5719.81 541.37,-5723 592.51,-5726.56 616.35,-5706.02 655.59,-5739 693.04,-5770.46 724.8,-5916.41 736.9,-5978.7\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"733.61,-5979.14 738.93,-5988.31 740.49,-5977.83 733.61,-5979.14\"/>\n</g>\n<!-- Item -->\n<g id=\"node25\" class=\"node\">\n<title>Item</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-6856.8\" font-family=\"Times,serif\" font-size=\"14.00\">Item</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Item -->\n<g id=\"edge24\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Item</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.82,-4434.98C43.85,-4667.01 66.11,-7068.2 117.32,-7118 162.72,-7162.15 354.17,-7159.17 402.29,-7118 480.91,-7050.73 378.37,-6972.35 438.29,-6888 442.22,-6882.47 447.65,-6877.96 453.5,-6874.33\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"454.7,-6877.13 461.87,-6869.33 451.4,-6870.95 454.7,-6877.13\"/>\n</g>\n<!-- The\nFederation -->\n<g id=\"node26\" class=\"node\">\n<title>The\nFederation</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-1196.2\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-1179.4\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;The\nFederation -->\n<g id=\"edge25\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;The\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.86,-4399.03C43.74,-4231.61 59.95,-2926.87 117.32,-1871 130.92,-1620.81 158.77,-1319.62 167.96,-1223.25\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"171.52,-1223.82 168.99,-1213.53 164.55,-1223.15 171.52,-1223.82\"/>\n</g>\n<!-- Behaviour -->\n<g id=\"node27\" class=\"node\">\n<title>Behaviour</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5518.8\" font-family=\"Times,serif\" font-size=\"14.00\">Behaviour</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Behaviour -->\n<g id=\"edge26\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Behaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M44.67,-4434.93C54.45,-4492.82 86.46,-4679.97 117.32,-4834 176.51,-5129.35 67.08,-5266.88 262.63,-5496 268.68,-5503.09 276.84,-5508.33 285.41,-5512.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.99,-5515.78 294.58,-5516.14 286.52,-5509.26 283.99,-5515.78\"/>\n</g>\n<!-- Card -->\n<g id=\"node28\" class=\"node\">\n<title>Card</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4412.8\" font-family=\"Times,serif\" font-size=\"14.00\">Card</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Card -->\n<g id=\"edge27\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Card</title>\n<path fill=\"none\" stroke=\"black\" d=\"M81.05,-4417C137.25,-4417 239.71,-4417 294.53,-4417\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.47,-4420.5 304.47,-4417 294.47,-4413.5 294.47,-4420.5\"/>\n</g>\n<!-- Behavior -->\n<g id=\"node29\" class=\"node\">\n<title>Behavior</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-4802.8\" font-family=\"Times,serif\" font-size=\"14.00\">Behavior</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Behavior -->\n<g id=\"edge28\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Behavior</title>\n<path fill=\"none\" stroke=\"black\" d=\"M47.55,-4434.77C68.09,-4496.7 136.6,-4703.31 161.68,-4778.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"158.58,-4779.73 165.05,-4788.12 165.23,-4777.53 158.58,-4779.73\"/>\n</g>\n<!-- Object -->\n<g id=\"node30\" class=\"node\">\n<title>Object</title>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-5602.8\" font-family=\"Times,serif\" font-size=\"14.00\">Object</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Object -->\n<g id=\"edge29\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Object</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.77,-4434.76C42.69,-4549.98 50.74,-5192.62 117.32,-5375 155.37,-5479.23 166.11,-5523.28 262.63,-5578 365.2,-5636.15 512.17,-5623.44 579.41,-5613.41\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"579.54,-5616.78 588.88,-5611.77 578.46,-5609.86 579.54,-5616.78\"/>\n</g>\n<!-- Something -->\n<g id=\"node31\" class=\"node\">\n<title>Something</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-6730.8\" font-family=\"Times,serif\" font-size=\"14.00\">Something</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Something -->\n<g id=\"edge30\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Something</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.87,-4435C43.96,-4613.12 62.56,-6062.67 117.32,-6492 127.38,-6570.82 150.68,-6661.81 163,-6706.8\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"159.85,-6707.51 165.89,-6716.21 166.59,-6705.64 159.85,-6707.51\"/>\n</g>\n<!-- negotiate -->\n<g id=\"node32\" class=\"node\">\n<title>negotiate</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-545.8\" font-family=\"Times,serif\" font-size=\"14.00\">negotiate</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;negotiate -->\n<g id=\"edge31\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;negotiate</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.64,-4399.09C41.44,-4207.87 41.93,-2522.89 117.32,-1162 129.79,-936.99 158.23,-666.51 167.78,-578.89\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"171.37,-579.31 168.98,-568.99 164.41,-578.55 171.37,-579.31\"/>\n</g>\n<!-- Telegram -->\n<g id=\"node33\" class=\"node\">\n<title>Telegram</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-473.8\" font-family=\"Times,serif\" font-size=\"14.00\">Telegram</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Telegram -->\n<g id=\"edge32\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Telegram</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.8,-4399.22C44.01,-4118.92 72.51,-616.69 117.32,-523 120.94,-515.44 126.5,-508.69 132.69,-502.86\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"134.42,-505.13 139.77,-495.98 129.89,-499.8 134.42,-505.13\"/>\n</g>\n<!-- Ambassador -->\n<g id=\"node34\" class=\"node\">\n<title>Ambassador</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-307.8\" font-family=\"Times,serif\" font-size=\"14.00\">Ambassador</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Ambassador -->\n<g id=\"edge33\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Ambassador</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.72,-4399.29C42.75,-4116.36 56.91,-537.89 117.32,-451 147.13,-408.14 185.57,-440.23 226.63,-408 248.46,-390.87 242.67,-376.27 262.63,-357 270.65,-349.27 280.17,-342.07 289.53,-335.8\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.26,-338.2 297.78,-329.85 287.48,-332.31 291.26,-338.2\"/>\n</g>\n<!-- General\nGame\nPlaying -->\n<g id=\"node35\" class=\"node\">\n<title>General\nGame\nPlaying</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-349.6\" font-family=\"Times,serif\" font-size=\"14.00\">General</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-332.8\" font-family=\"Times,serif\" font-size=\"14.00\">Game</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-316\" font-family=\"Times,serif\" font-size=\"14.00\">Playing</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;General\nGame\nPlaying -->\n<g id=\"edge34\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;General\nGame\nPlaying</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.78,-4399.01C43.77,-4111.63 69.79,-476.67 117.32,-380 121.1,-372.32 126.97,-365.56 133.47,-359.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"135.28,-362.06 140.92,-353.1 130.92,-356.59 135.28,-362.06\"/>\n</g>\n<!-- Michael\nGenesereth -->\n<g id=\"node36\" class=\"node\">\n<title>Michael\nGenesereth</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-259.2\" font-family=\"Times,serif\" font-size=\"14.00\">Michael</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-242.4\" font-family=\"Times,serif\" font-size=\"14.00\">Genesereth</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Michael\nGenesereth -->\n<g id=\"edge35\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Michael\nGenesereth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.7,-4399.08C42.42,-4112.9 52.73,-493.28 117.32,-408 147.97,-367.55 189.22,-409.28 226.63,-375 258.4,-345.9 232.64,-315.92 262.63,-285 268.51,-278.95 275.8,-274.04 283.43,-270.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.59,-272.94 292.19,-265.56 281.65,-266.59 284.59,-272.94\"/>\n</g>\n<!-- Strongtalk -->\n<g id=\"node37\" class=\"node\">\n<title>Strongtalk</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-249.8\" font-family=\"Times,serif\" font-size=\"14.00\">Strongtalk</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Strongtalk -->\n<g id=\"edge36\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Strongtalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.78,-4399.09C43.76,-4109.31 69.94,-398.2 117.32,-299 120.94,-291.44 126.49,-284.69 132.68,-278.86\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"134.42,-281.13 139.76,-271.98 129.88,-275.8 134.42,-281.13\"/>\n</g>\n<!-- Type\nSystems\nas\nMacros -->\n<g id=\"node38\" class=\"node\">\n<title>Type\nSystems\nas\nMacros</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-201\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-184.2\" font-family=\"Times,serif\" font-size=\"14.00\">Systems</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-167.4\" font-family=\"Times,serif\" font-size=\"14.00\">as</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-150.6\" font-family=\"Times,serif\" font-size=\"14.00\">Macros</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Type\nSystems\nas\nMacros -->\n<g id=\"edge37\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Type\nSystems\nas\nMacros</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.78,-4399.23C43.75,-4107.81 70.19,-328.51 117.32,-227 120.92,-219.26 126.46,-212.28 132.65,-206.22\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"134.59,-209.29 139.73,-200.03 129.93,-204.06 134.59,-209.29\"/>\n</g>\n<!-- Amal\nAhmed -->\n<g id=\"node39\" class=\"node\">\n<title>Amal\nAhmed</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-108.2\" font-family=\"Times,serif\" font-size=\"14.00\">Amal</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-91.4\" font-family=\"Times,serif\" font-size=\"14.00\">Ahmed</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Amal\nAhmed -->\n<g id=\"edge38\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Amal\nAhmed</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.72,-4399.26C42.78,-4104.34 57.83,-230.81 117.32,-133 121.37,-126.35 127.52,-121.12 134.24,-117.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"135.33,-119.91 142.59,-112.2 132.1,-113.7 135.33,-119.91\"/>\n</g>\n<!-- Name -->\n<g id=\"node40\" class=\"node\">\n<title>Name</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5948.8\" font-family=\"Times,serif\" font-size=\"14.00\">Name</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Name -->\n<g id=\"edge39\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Name</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42,-4434.76C45.19,-4597.48 70.74,-5824.65 117.32,-5885 159.45,-5939.57 245.47,-5951.2 294.7,-5953.17\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.4,-5956.7 304.5,-5953.48 294.6,-5949.7 294.4,-5956.7\"/>\n</g>\n<!-- Objects\nas\nBehaviour -->\n<g id=\"node41\" class=\"node\">\n<title>Objects\nas\nBehaviour</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5882.6\" font-family=\"Times,serif\" font-size=\"14.00\">Objects</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5865.8\" font-family=\"Times,serif\" font-size=\"14.00\">as</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5849\" font-family=\"Times,serif\" font-size=\"14.00\">Behaviour</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Objects\nas\nBehaviour -->\n<g id=\"edge40\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Objects\nas\nBehaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.94,-4434.97C44.49,-4596.95 65.19,-5800.7 117.32,-5854 160.1,-5897.73 236.02,-5891.97 285.02,-5882.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"285.6,-5885.45 294.65,-5879.94 284.14,-5878.6 285.6,-5885.45\"/>\n</g>\n<!-- Extensionality -->\n<g id=\"node42\" class=\"node\">\n<title>Extensionality</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4358.8\" font-family=\"Times,serif\" font-size=\"14.00\">Extensionality</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Extensionality -->\n<g id=\"edge41\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Extensionality</title>\n<path fill=\"none\" stroke=\"black\" d=\"M81.05,-4409.66C130.77,-4400.4 216.7,-4384.38 273.81,-4373.74\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"274.29,-4377.03 283.48,-4371.75 273.01,-4370.15 274.29,-4377.03\"/>\n</g>\n<!-- Attribution -->\n<g id=\"node43\" class=\"node\">\n<title>Attribution</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-42.8\" font-family=\"Times,serif\" font-size=\"14.00\">Attribution</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Attribution -->\n<g id=\"edge42\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Attribution</title>\n<path fill=\"none\" stroke=\"black\" d=\"M41.71,-4399.01C42.61,-4099.97 55.58,-172.27 117.32,-74 119.24,-70.95 121.61,-68.24 124.28,-65.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"126.03,-68.15 132.04,-59.42 121.9,-62.49 126.03,-68.15\"/>\n</g>\n<!-- Contents\nIs\nIntention\nObscuring -->\n<g id=\"node44\" class=\"node\">\n<title>Contents\nIs\nIntention\nObscuring</title>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3242\" font-family=\"Times,serif\" font-size=\"14.00\">Contents</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3225.2\" font-family=\"Times,serif\" font-size=\"14.00\">Is</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3208.4\" font-family=\"Times,serif\" font-size=\"14.00\">Intention</text>\n<text text-anchor=\"middle\" x=\"171.98\" y=\"-3191.6\" font-family=\"Times,serif\" font-size=\"14.00\">Obscuring</text>\n</g>\n<!-- 2023&#45;12&#45;29&#45;&gt;Contents\nIs\nIntention\nObscuring -->\n<g id=\"edge43\" class=\"edge\">\n<title>2023&#45;12&#45;29&#45;&gt;Contents\nIs\nIntention\nObscuring</title>\n<path fill=\"none\" stroke=\"black\" d=\"M42.13,-4399.21C45.81,-4262.9 71.14,-3386.31 117.32,-3279 120.13,-3272.48 123.99,-3266.23 128.37,-3260.4\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"131.47,-3263.14 135.09,-3253.18 126.05,-3258.71 131.47,-3263.14\"/>\n</g>\n<!-- Journal&#45;&gt;Action -->\n<g id=\"edge45\" class=\"edge\">\n<title>Journal&#45;&gt;Action</title>\n<path fill=\"none\" stroke=\"black\" d=\"M182.1,-7361.88C196.29,-7394 225.9,-7461.63 262.63,-7512 276.41,-7530.89 295.56,-7549.35 310.16,-7563.7\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"307.18,-7565.67 316.75,-7570.23 312.12,-7560.7 307.18,-7565.67\"/>\n</g>\n<!-- Journal&#45;&gt;Wiki\nPage -->\n<g id=\"edge44\" class=\"edge\">\n<title>Journal&#45;&gt;Wiki\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M179.17,-7326.41C191.78,-7298.17 222.64,-7244.07 262.63,-7212 272.19,-7204.34 284,-7198.26 295.13,-7194.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.09,-7197.11 304.49,-7190.66 293.9,-7190.47 296.09,-7197.11\"/>\n</g>\n<!-- Neighborhood -->\n<g id=\"node45\" class=\"node\">\n<title>Neighborhood</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7489.8\" font-family=\"Times,serif\" font-size=\"14.00\">Neighborhood</text>\n</g>\n<!-- Journal&#45;&gt;Neighborhood -->\n<g id=\"edge46\" class=\"edge\">\n<title>Journal&#45;&gt;Neighborhood</title>\n<path fill=\"none\" stroke=\"black\" d=\"M181.81,-7361.96C195.63,-7388.39 224.77,-7437.77 262.63,-7467 266.39,-7469.9 270.5,-7472.53 274.79,-7474.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"272.85,-7478.35 283.36,-7479.69 275.98,-7472.09 272.85,-7478.35\"/>\n</g>\n<!-- Names\nof\nThings -->\n<g id=\"node46\" class=\"node\">\n<title>Names\nof\nThings</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7441.6\" font-family=\"Times,serif\" font-size=\"14.00\">Names</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7424.8\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7408\" font-family=\"Times,serif\" font-size=\"14.00\">Things</text>\n</g>\n<!-- Journal&#45;&gt;Names\nof\nThings -->\n<g id=\"edge47\" class=\"edge\">\n<title>Journal&#45;&gt;Names\nof\nThings</title>\n<path fill=\"none\" stroke=\"black\" d=\"M200.59,-7358.81C226.92,-7372.93 266.74,-7394.29 295.54,-7409.73\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"293.76,-7413.29 304.23,-7414.93 297.07,-7407.12 293.76,-7413.29\"/>\n</g>\n<!-- Events\nand\nCausal\nDependence -->\n<g id=\"node47\" class=\"node\">\n<title>Events\nand\nCausal\nDependence</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7365\" font-family=\"Times,serif\" font-size=\"14.00\">Events</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7348.2\" font-family=\"Times,serif\" font-size=\"14.00\">and</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7331.4\" font-family=\"Times,serif\" font-size=\"14.00\">Causal</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7314.6\" font-family=\"Times,serif\" font-size=\"14.00\">Dependence</text>\n</g>\n<!-- Journal&#45;&gt;Events\nand\nCausal\nDependence -->\n<g id=\"edge48\" class=\"edge\">\n<title>Journal&#45;&gt;Events\nand\nCausal\nDependence</title>\n<path fill=\"none\" stroke=\"black\" d=\"M200.59,-7344C222.16,-7344 252.77,-7344 278.97,-7344\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"278.89,-7347.5 288.89,-7344 278.89,-7340.5 278.89,-7347.5\"/>\n</g>\n<!-- Journal\nto\nGraph -->\n<g id=\"node48\" class=\"node\">\n<title>Journal\nto\nGraph</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7271.6\" font-family=\"Times,serif\" font-size=\"14.00\">Journal</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7254.8\" font-family=\"Times,serif\" font-size=\"14.00\">to</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7238\" font-family=\"Times,serif\" font-size=\"14.00\">Graph</text>\n</g>\n<!-- Journal&#45;&gt;Journal\nto\nGraph -->\n<g id=\"edge49\" class=\"edge\">\n<title>Journal&#45;&gt;Journal\nto\nGraph</title>\n<path fill=\"none\" stroke=\"black\" d=\"M200.59,-7329.19C226.53,-7315.28 265.54,-7294.35 294.23,-7278.97\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.75,-7281.59 302.91,-7273.78 292.44,-7275.42 295.75,-7281.59\"/>\n</g>\n<!-- collect&#45;&gt;Arrangement -->\n<g id=\"edge51\" class=\"edge\">\n<title>collect&#45;&gt;Arrangement</title>\n<path fill=\"none\" stroke=\"black\" d=\"M189.97,-6206.68C206.73,-6227.79 233.96,-6262.68 262.63,-6288 274.78,-6298.73 289.8,-6308.64 302.7,-6317.14\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"300.38,-6320.46 310.65,-6323.06 304.25,-6314.62 300.38,-6320.46\"/>\n</g>\n<!-- collect&#45;&gt;Frame\nType -->\n<g id=\"edge53\" class=\"edge\">\n<title>collect&#45;&gt;Frame\nType</title>\n<path fill=\"none\" stroke=\"black\" d=\"M198.75,-6186.49C216.6,-6188.35 240.96,-6192.28 262.63,-6194 264.56,-6194.15 539.81,-6193.85 541.37,-6195 608.35,-6244.35 616.4,-6354.15 616.35,-6408.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"612.84,-6408.25 616.24,-6418.28 619.84,-6408.32 612.84,-6408.25\"/>\n</g>\n<!-- collect&#45;&gt;Structure -->\n<g id=\"edge54\" class=\"edge\">\n<title>collect&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M176.19,-6171.21C183.8,-6134.89 206.67,-6052.73 262.63,-6018 299.1,-5995.37 587.82,-6002.06 698.84,-6005.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"698.53,-6009.04 708.64,-6005.86 698.75,-6002.04 698.53,-6009.04\"/>\n</g>\n<!-- Inversion -->\n<g id=\"node49\" class=\"node\">\n<title>Inversion</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-6226.8\" font-family=\"Times,serif\" font-size=\"14.00\">Inversion</text>\n</g>\n<!-- collect&#45;&gt;Inversion -->\n<g id=\"edge50\" class=\"edge\">\n<title>collect&#45;&gt;Inversion</title>\n<path fill=\"none\" stroke=\"black\" d=\"M188.74,-6206.81C205.21,-6223.94 232.76,-6248.72 262.63,-6259 323.73,-6280.03 398.91,-6262.84 445.35,-6247.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"446.32,-6250.66 454.66,-6244.13 444.07,-6244.03 446.32,-6250.66\"/>\n</g>\n<!-- James\nForm -->\n<g id=\"node50\" class=\"node\">\n<title>James\nForm</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6144.2\" font-family=\"Times,serif\" font-size=\"14.00\">James</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6127.4\" font-family=\"Times,serif\" font-size=\"14.00\">Form</text>\n</g>\n<!-- collect&#45;&gt;James\nForm -->\n<g id=\"edge52\" class=\"edge\">\n<title>collect&#45;&gt;James\nForm</title>\n<path fill=\"none\" stroke=\"black\" d=\"M198.8,-6181.02C225.04,-6172.9 265.93,-6160.26 295.37,-6151.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.14,-6154.28 304.66,-6147.98 294.07,-6147.59 296.14,-6154.28\"/>\n</g>\n<!-- Square&#45;Bracket -->\n<g id=\"node51\" class=\"node\">\n<title>Square&#45;Bracket</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-6358.8\" font-family=\"Times,serif\" font-size=\"14.00\">Square&#45;Bracket</text>\n</g>\n<!-- collect&#45;&gt;Square&#45;Bracket -->\n<g id=\"edge55\" class=\"edge\">\n<title>collect&#45;&gt;Square&#45;Bracket</title>\n<path fill=\"none\" stroke=\"black\" d=\"M198.88,-6187.39C272.07,-6183.2 479.22,-6173.94 541.37,-6199 625.18,-6232.79 617.79,-6283.86 691.59,-6336 693.27,-6337.18 695,-6338.35 696.77,-6339.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"694.49,-6342.82 704.85,-6345.04 698.14,-6336.84 694.49,-6342.82\"/>\n</g>\n<!-- Event -->\n<g id=\"node52\" class=\"node\">\n<title>Event</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6397.8\" font-family=\"Times,serif\" font-size=\"14.00\">Event</text>\n</g>\n<!-- collect&#45;&gt;Event -->\n<g id=\"edge56\" class=\"edge\">\n<title>collect&#45;&gt;Event</title>\n<path fill=\"none\" stroke=\"black\" d=\"M186.98,-6171.24C203,-6152.36 231.15,-6123.43 262.63,-6110 355.44,-6070.43 387.95,-6091 488.83,-6091 488.83,-6091 488.83,-6091 617.48,-6091 731.33,-6091 734.55,-6179.32 794.66,-6276 819.39,-6315.76 801.14,-6338.66 830.66,-6375 833.23,-6378.15 836.26,-6381.04 839.52,-6383.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"837.29,-6387.07 847.49,-6389.95 841.31,-6381.34 837.29,-6387.07\"/>\n</g>\n<!-- Loop -->\n<g id=\"node53\" class=\"node\">\n<title>Loop</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6040.8\" font-family=\"Times,serif\" font-size=\"14.00\">Loop</text>\n</g>\n<!-- collect&#45;&gt;Loop -->\n<g id=\"edge57\" class=\"edge\">\n<title>collect&#45;&gt;Loop</title>\n<path fill=\"none\" stroke=\"black\" d=\"M183.42,-6171.36C198.37,-6147.34 227.96,-6104.22 262.63,-6077 272.48,-6069.28 284.48,-6062.88 295.7,-6057.89\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.82,-6060.8 304.69,-6053.7 294.11,-6054.34 296.82,-6060.8\"/>\n</g>\n<!-- Action&#45;&gt;Journal -->\n<g id=\"edge61\" class=\"edge\">\n<title>Action&#45;&gt;Journal</title>\n<path fill=\"none\" stroke=\"black\" d=\"M305.56,-7575.08C291.71,-7563.57 275.01,-7546.96 262.63,-7530 225.34,-7478.87 195.4,-7409.96 181.47,-7371.8\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"184.6,-7371.16 177.97,-7362.9 178,-7373.49 184.6,-7371.16\"/>\n</g>\n<!-- record -->\n<g id=\"node54\" class=\"node\">\n<title>record</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7696.8\" font-family=\"Times,serif\" font-size=\"14.00\">record</text>\n</g>\n<!-- Action&#45;&gt;record -->\n<g id=\"edge58\" class=\"edge\">\n<title>Action&#45;&gt;record</title>\n<path fill=\"none\" stroke=\"black\" d=\"M353.07,-7606.81C373.5,-7624.9 406.86,-7653.14 438.29,-7674 443.16,-7677.23 448.46,-7680.4 453.73,-7683.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.63,-7686.76 462.09,-7688.46 454.98,-7680.61 451.63,-7686.76\"/>\n</g>\n<!-- Types -->\n<g id=\"node55\" class=\"node\">\n<title>Types</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7642.8\" font-family=\"Times,serif\" font-size=\"14.00\">Types</text>\n</g>\n<!-- Action&#45;&gt;Types -->\n<g id=\"edge59\" class=\"edge\">\n<title>Action&#45;&gt;Types</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.47,-7598.71C385.09,-7608.27 424.43,-7622.96 453.01,-7633.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.41,-7637.14 462,-7637.36 453.86,-7630.58 451.41,-7637.14\"/>\n</g>\n<!-- Ownership -->\n<g id=\"node56\" class=\"node\">\n<title>Ownership</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7588.8\" font-family=\"Times,serif\" font-size=\"14.00\">Ownership</text>\n</g>\n<!-- Action&#45;&gt;Ownership -->\n<g id=\"edge60\" class=\"edge\">\n<title>Action&#45;&gt;Ownership</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.47,-7589.67C381.56,-7590.24 413.86,-7591.07 440.66,-7591.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"440.3,-7595.28 450.38,-7592.04 440.48,-7588.28 440.3,-7595.28\"/>\n</g>\n<!-- Wiki\nPage&#45;&gt;Journal -->\n<g id=\"edge73\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Journal</title>\n<path fill=\"none\" stroke=\"black\" d=\"M305.49,-7206.61C291.79,-7212.53 275.24,-7219.89 262.63,-7230 232.11,-7254.48 206.9,-7291.8 191.07,-7317.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"187.74,-7314.9 185.47,-7325.25 193.7,-7318.57 187.74,-7314.9\"/>\n</g>\n<!-- Wiki\nPage&#45;&gt;Story -->\n<g id=\"edge68\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Story</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.36,-7195.69C374.29,-7199.78 392.07,-7207.32 402.29,-7221 480.26,-7325.42 364.53,-7404.56 438.29,-7512 442.17,-7517.65 447.62,-7522.22 453.52,-7525.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.52,-7529.3 461.99,-7530.89 454.8,-7523.11 451.52,-7529.3\"/>\n</g>\n<!-- Wiki\nPage&#45;&gt;Item -->\n<g id=\"edge74\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Item</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.4,-7184.36C374.35,-7179.15 392.13,-7170.32 402.29,-7156 471.82,-7057.97 369.75,-6986.72 438.29,-6888 442.2,-6882.37 447.67,-6877.81 453.57,-6874.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"454.84,-6876.92 462.04,-6869.14 451.57,-6870.73 454.84,-6876.92\"/>\n</g>\n<!-- Federated\nWiki\nPage -->\n<g id=\"node57\" class=\"node\">\n<title>Federated\nWiki\nPage</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7334.6\" font-family=\"Times,serif\" font-size=\"14.00\">Federated</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7317.8\" font-family=\"Times,serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7301\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Federated\nWiki\nPage -->\n<g id=\"edge62\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Federated\nWiki\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.23,-7197.87C373.2,-7202.59 390.07,-7210.03 402.29,-7221 426.29,-7242.54 416.96,-7259.81 438.29,-7284 440.72,-7286.76 443.39,-7289.45 446.18,-7292.04\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"443.43,-7295.16 453.29,-7299.04 448.01,-7289.86 443.43,-7295.16\"/>\n</g>\n<!-- Fedwiki\nPage -->\n<g id=\"node58\" class=\"node\">\n<title>Fedwiki\nPage</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7258.2\" font-family=\"Times,serif\" font-size=\"14.00\">Fedwiki</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7241.4\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Fedwiki\nPage -->\n<g id=\"edge63\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Fedwiki\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.12,-7201.4C383.61,-7211.33 420.86,-7226.44 449.17,-7237.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"447.57,-7241.45 458.15,-7241.97 450.2,-7234.96 447.57,-7241.45\"/>\n</g>\n<!-- Hypertext -->\n<g id=\"node59\" class=\"node\">\n<title>Hypertext</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7192.8\" font-family=\"Times,serif\" font-size=\"14.00\">Hypertext</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Hypertext -->\n<g id=\"edge64\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Hypertext</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.12,-7191.99C381.92,-7192.87 415.79,-7194.18 443.2,-7195.24\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"442.99,-7198.77 453.12,-7195.66 443.26,-7191.78 442.99,-7198.77\"/>\n</g>\n<!-- Lineup -->\n<g id=\"node60\" class=\"node\">\n<title>Lineup</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7138.8\" font-family=\"Times,serif\" font-size=\"14.00\">Lineup</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Lineup -->\n<g id=\"edge65\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Lineup</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.12,-7183.07C384.34,-7175.28 423.1,-7163.31 451.69,-7154.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.57,-7157.56 461.1,-7151.26 450.51,-7150.87 452.57,-7157.56\"/>\n</g>\n<!-- Web\nPage -->\n<g id=\"node61\" class=\"node\">\n<title>Web\nPage</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7090.2\" font-family=\"Times,serif\" font-size=\"14.00\">Web</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7073.4\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Web\nPage -->\n<g id=\"edge66\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Web\nPage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.3,-7180.6C372.81,-7174.51 389.21,-7166.03 402.29,-7156 421.27,-7141.45 419.8,-7131.17 438.29,-7116 443.09,-7112.06 448.47,-7108.3 453.87,-7104.86\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"455.16,-7107.56 461.9,-7099.38 451.53,-7101.57 455.16,-7107.56\"/>\n</g>\n<!-- Snippet -->\n<g id=\"node62\" class=\"node\">\n<title>Snippet</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7024.8\" font-family=\"Times,serif\" font-size=\"14.00\">Snippet</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Snippet -->\n<g id=\"edge67\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Snippet</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.36,-7183.15C373.73,-7177.62 390.94,-7168.87 402.29,-7156 433.54,-7120.58 407.4,-7091.73 438.29,-7056 441.94,-7051.78 446.41,-7048.11 451.17,-7044.96\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.66,-7047.57 459.55,-7039.52 449.14,-7041.51 452.66,-7047.57\"/>\n</g>\n<!-- combine -->\n<g id=\"node63\" class=\"node\">\n<title>combine</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-6970.8\" font-family=\"Times,serif\" font-size=\"14.00\">combine</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;combine -->\n<g id=\"edge69\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;combine</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.25,-7183.88C373.96,-7178.52 391.54,-7169.71 402.29,-7156 445.66,-7100.69 395.48,-7057.75 438.29,-7002 441.23,-6998.17 444.88,-6994.82 448.85,-6991.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"450.32,-6994.49 456.94,-6986.21 446.6,-6988.56 450.32,-6994.49\"/>\n</g>\n<!-- JSON\nSchema -->\n<g id=\"node64\" class=\"node\">\n<title>JSON\nSchema</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-6922.2\" font-family=\"Times,serif\" font-size=\"14.00\">JSON</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-6905.4\" font-family=\"Times,serif\" font-size=\"14.00\">Schema</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;JSON\nSchema -->\n<g id=\"edge70\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;JSON\nSchema</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.21,-7184.22C374.08,-7178.96 391.86,-7170.13 402.29,-7156 458.01,-7080.52 385.06,-7025.26 438.29,-6948 441.62,-6943.17 446,-6938.99 450.8,-6935.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.24,-6938.01 458.74,-6929.64 448.44,-6932.13 452.24,-6938.01\"/>\n</g>\n<!-- Where\nPages\nLive -->\n<g id=\"node65\" class=\"node\">\n<title>Where\nPages\nLive</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7486.6\" font-family=\"Times,serif\" font-size=\"14.00\">Where</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7469.8\" font-family=\"Times,serif\" font-size=\"14.00\">Pages</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7453\" font-family=\"Times,serif\" font-size=\"14.00\">Live</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Where\nPages\nLive -->\n<g id=\"edge71\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Where\nPages\nLive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.15,-7195.85C374.01,-7200 391.78,-7207.54 402.29,-7221 461.91,-7297.37 387.98,-7353.2 438.29,-7436 442.41,-7442.77 448.22,-7448.75 454.44,-7453.84\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.95,-7457.08 462.07,-7460.22 456.11,-7451.46 451.95,-7457.08\"/>\n</g>\n<!-- Wiki\nPage\nJSON -->\n<g id=\"node66\" class=\"node\">\n<title>Wiki\nPage\nJSON</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7410.6\" font-family=\"Times,serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7393.8\" font-family=\"Times,serif\" font-size=\"14.00\">Page</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-7377\" font-family=\"Times,serif\" font-size=\"14.00\">JSON</text>\n</g>\n<!-- Wiki\nPage&#45;&gt;Wiki\nPage\nJSON -->\n<g id=\"edge72\" class=\"edge\">\n<title>Wiki\nPage&#45;&gt;Wiki\nPage\nJSON</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.41,-7196.38C373.98,-7200.69 391.37,-7208.21 402.29,-7221 443.72,-7269.54 402.8,-7306.96 438.29,-7360 442.61,-7366.46 448.41,-7372.25 454.54,-7377.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.89,-7380.39 461.99,-7383.57 456.08,-7374.78 451.89,-7380.39\"/>\n</g>\n<!-- Concepts -->\n<g id=\"node67\" class=\"node\">\n<title>Concepts</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4142.8\" font-family=\"Times,serif\" font-size=\"14.00\">Concepts</text>\n</g>\n<!-- contains&#45;&gt;Concepts -->\n<g id=\"edge75\" class=\"edge\">\n<title>contains&#45;&gt;Concepts</title>\n<path fill=\"none\" stroke=\"black\" d=\"M203.23,-4271.23C211.61,-4267.15 220.16,-4261.79 226.63,-4255 253.82,-4226.48 234.17,-4201.23 262.63,-4174 269.92,-4167.03 279.22,-4161.79 288.61,-4157.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.57,-4160.89 297.74,-4154.14 287.15,-4154.32 289.57,-4160.89\"/>\n</g>\n<!-- Network -->\n<g id=\"node68\" class=\"node\">\n<title>Network</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4088.8\" font-family=\"Times,serif\" font-size=\"14.00\">Network</text>\n</g>\n<!-- contains&#45;&gt;Network -->\n<g id=\"edge76\" class=\"edge\">\n<title>contains&#45;&gt;Network</title>\n<path fill=\"none\" stroke=\"black\" d=\"M203.1,-4272.25C211.76,-4268.15 220.52,-4262.53 226.63,-4255 265.81,-4206.82 221.28,-4166.32 262.63,-4120 269.8,-4111.97 279.66,-4106.3 289.68,-4102.31\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.75,-4105.3 299.07,-4098.73 288.47,-4098.68 290.75,-4105.3\"/>\n</g>\n<!-- Relation -->\n<g id=\"node69\" class=\"node\">\n<title>Relation</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4304.8\" font-family=\"Times,serif\" font-size=\"14.00\">Relation</text>\n</g>\n<!-- contains&#45;&gt;Relation -->\n<g id=\"edge77\" class=\"edge\">\n<title>contains&#45;&gt;Relation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M203.16,-4287.14C227.79,-4291.34 262.84,-4297.31 290.08,-4301.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"289.41,-4305.56 299.85,-4303.79 290.58,-4298.66 289.41,-4305.56\"/>\n</g>\n<!-- Matrix -->\n<g id=\"node70\" class=\"node\">\n<title>Matrix</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4250.8\" font-family=\"Times,serif\" font-size=\"14.00\">Matrix</text>\n</g>\n<!-- contains&#45;&gt;Matrix -->\n<g id=\"edge78\" class=\"edge\">\n<title>contains&#45;&gt;Matrix</title>\n<path fill=\"none\" stroke=\"black\" d=\"M203.16,-4276.86C229.33,-4272.4 267.25,-4265.94 295.09,-4261.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.32,-4264.54 304.59,-4259.41 294.14,-4257.64 295.32,-4264.54\"/>\n</g>\n<!-- relation -->\n<g id=\"node71\" class=\"node\">\n<title>relation</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4196.8\" font-family=\"Times,serif\" font-size=\"14.00\">relation</text>\n</g>\n<!-- contains&#45;&gt;relation -->\n<g id=\"edge79\" class=\"edge\">\n<title>contains&#45;&gt;relation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M203.29,-4267.92C211.05,-4264 219.28,-4259.56 226.63,-4255 243.63,-4244.46 245.17,-4237.74 262.63,-4228 272.12,-4222.71 282.85,-4217.97 292.97,-4213.99\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.1,-4216.93 302.22,-4210.13 291.63,-4210.38 294.1,-4216.93\"/>\n</g>\n<!-- Distinction -->\n<g id=\"node72\" class=\"node\">\n<title>Distinction</title>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-6764.8\" font-family=\"Times,serif\" font-size=\"14.00\">Distinction</text>\n</g>\n<!-- Story&#45;&gt;Distinction -->\n<g id=\"edge80\" class=\"edge\">\n<title>Story&#45;&gt;Distinction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516.72,-7531.22C526.07,-7527.05 535.71,-7520.9 541.37,-7512 581.58,-7448.83 556.97,-6911.05 577.37,-6839 581.67,-6823.83 589.69,-6808.29 597.27,-6795.73\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"600.56,-6798.08 602.91,-6787.75 594.63,-6794.35 600.56,-6798.08\"/>\n</g>\n<!-- Life -->\n<g id=\"node73\" class=\"node\">\n<title>Life</title>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-7561.8\" font-family=\"Times,serif\" font-size=\"14.00\">Life</text>\n</g>\n<!-- Story&#45;&gt;Life -->\n<g id=\"edge81\" class=\"edge\">\n<title>Story&#45;&gt;Life</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516.66,-7544.59C534.71,-7548.5 559.07,-7553.78 579.08,-7558.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"578.17,-7561.72 588.69,-7560.41 579.66,-7554.88 578.17,-7561.72\"/>\n</g>\n<!-- Storycraft -->\n<g id=\"node74\" class=\"node\">\n<title>Storycraft</title>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-7507.8\" font-family=\"Times,serif\" font-size=\"14.00\">Storycraft</text>\n</g>\n<!-- Story&#45;&gt;Storycraft -->\n<g id=\"edge82\" class=\"edge\">\n<title>Story&#45;&gt;Storycraft</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516.66,-7533.41C532.09,-7530.06 552.12,-7525.72 570.11,-7521.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"570.67,-7525.07 579.7,-7519.53 569.19,-7518.23 570.67,-7525.07\"/>\n</g>\n<!-- Choice -->\n<g id=\"node75\" class=\"node\">\n<title>Choice</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6604.8\" font-family=\"Times,serif\" font-size=\"14.00\">Choice</text>\n</g>\n<!-- Story&#45;&gt;Choice -->\n<g id=\"edge83\" class=\"edge\">\n<title>Story&#45;&gt;Choice</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516.78,-7530.35C525.79,-7526.13 535.18,-7520.17 541.37,-7512 728.83,-7264.63 555.56,-7108.98 691.59,-6830 730.98,-6749.22 805.65,-6672.45 846.24,-6634.22\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"848.19,-6637.26 853.13,-6627.88 843.42,-6632.13 848.19,-6637.26\"/>\n</g>\n<!-- Arrangement&#45;&gt;collect -->\n<g id=\"edge86\" class=\"edge\">\n<title>Arrangement&#45;&gt;collect</title>\n<path fill=\"none\" stroke=\"black\" d=\"M287.77,-6324.76C279.08,-6319.2 270.29,-6312.76 262.63,-6306 232.18,-6279.11 203.37,-6241.44 186.98,-6215.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"189.57,-6214.49 181.33,-6207.83 183.62,-6218.17 189.57,-6214.49\"/>\n</g>\n<!-- Arrangement&#45;&gt;put -->\n<g id=\"edge88\" class=\"edge\">\n<title>Arrangement&#45;&gt;put</title>\n<path fill=\"none\" stroke=\"black\" d=\"M352.11,-6358.81C367.85,-6374.91 389.76,-6400 402.29,-6426 434.49,-6492.84 395.68,-6528.27 438.29,-6589 442.42,-6594.88 448.01,-6599.92 453.97,-6604.15\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.51,-6607.37 461.84,-6609.76 455.25,-6601.45 451.51,-6607.37\"/>\n</g>\n<!-- Arrangement&#45;&gt;Structure -->\n<g id=\"edge91\" class=\"edge\">\n<title>Arrangement&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M377.34,-6330.59C421.83,-6318.49 491.11,-6295.27 541.37,-6258 627.52,-6194.13 697.47,-6084.69 726.98,-6034.11\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"730.38,-6036.22 732.34,-6025.8 724.32,-6032.72 730.38,-6036.22\"/>\n</g>\n<!-- Arrangement&#45;&gt;Inversion -->\n<g id=\"edge85\" class=\"edge\">\n<title>Arrangement&#45;&gt;Inversion</title>\n<path fill=\"none\" stroke=\"black\" d=\"M364.11,-6323.12C376.34,-6315.56 390.33,-6306.34 402.29,-6297 419.64,-6283.46 420.91,-6276.5 438.29,-6263 441.84,-6260.24 445.64,-6257.5 449.5,-6254.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.12,-6257.3 457.52,-6248.86 447.25,-6251.47 451.12,-6257.3\"/>\n</g>\n<!-- Arrangement&#45;&gt;Square&#45;Bracket -->\n<g id=\"edge84\" class=\"edge\">\n<title>Arrangement&#45;&gt;Square&#45;Bracket</title>\n<path fill=\"none\" stroke=\"black\" d=\"M377.2,-6343.35C450.31,-6347.29 597.51,-6355.21 680.89,-6359.7\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"680.55,-6363.24 690.72,-6360.29 680.93,-6356.25 680.55,-6363.24\"/>\n</g>\n<!-- disperse -->\n<g id=\"node76\" class=\"node\">\n<title>disperse</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-6394.8\" font-family=\"Times,serif\" font-size=\"14.00\">disperse</text>\n</g>\n<!-- Arrangement&#45;&gt;disperse -->\n<g id=\"edge87\" class=\"edge\">\n<title>Arrangement&#45;&gt;disperse</title>\n<path fill=\"none\" stroke=\"black\" d=\"M377.15,-6357.31C399.78,-6365.76 427.2,-6375.99 449.2,-6384.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"447.62,-6387.72 458.21,-6387.94 450.07,-6381.17 447.62,-6387.72\"/>\n</g>\n<!-- Context -->\n<g id=\"node77\" class=\"node\">\n<title>Context</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-6460.8\" font-family=\"Times,serif\" font-size=\"14.00\">Context</text>\n</g>\n<!-- Arrangement&#45;&gt;Context -->\n<g id=\"edge89\" class=\"edge\">\n<title>Arrangement&#45;&gt;Context</title>\n<path fill=\"none\" stroke=\"black\" d=\"M350.53,-6358.69C365.67,-6375.1 387.59,-6400.72 402.29,-6426 424.37,-6463.95 402.02,-6493.25 438.29,-6518 476.13,-6543.83 495.98,-6524.19 541.37,-6518 557.83,-6515.76 561.34,-6512.32 577.37,-6508 620.26,-6496.45 669.55,-6483.65 702.96,-6475.04\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"703.41,-6478.28 712.22,-6472.4 701.67,-6471.5 703.41,-6478.28\"/>\n</g>\n<!-- Frames -->\n<g id=\"node78\" class=\"node\">\n<title>Frames</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-6486.8\" font-family=\"Times,serif\" font-size=\"14.00\">Frames</text>\n</g>\n<!-- Arrangement&#45;&gt;Frames -->\n<g id=\"edge90\" class=\"edge\">\n<title>Arrangement&#45;&gt;Frames</title>\n<path fill=\"none\" stroke=\"black\" d=\"M366.59,-6358.85C378.89,-6366.62 392.27,-6376.58 402.29,-6388 425.63,-6414.59 414.49,-6432.82 438.29,-6459 442.35,-6463.47 447.17,-6467.55 452.2,-6471.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"450.09,-6474.67 460.36,-6477.29 453.97,-6468.84 450.09,-6474.67\"/>\n</g>\n<!-- Iconic\nArithmetic -->\n<g id=\"node79\" class=\"node\">\n<title>Iconic\nArithmetic</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-6310.2\" font-family=\"Times,serif\" font-size=\"14.00\">Iconic</text>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-6293.4\" font-family=\"Times,serif\" font-size=\"14.00\">Arithmetic</text>\n</g>\n<!-- Arrangement&#45;&gt;Iconic\nArithmetic -->\n<g id=\"edge92\" class=\"edge\">\n<title>Arrangement&#45;&gt;Iconic\nArithmetic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M377.2,-6337.25C454.39,-6330.64 614.17,-6316.96 694.23,-6310.1\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"694.31,-6313.52 703.98,-6309.18 693.71,-6306.55 694.31,-6313.52\"/>\n</g>\n<!-- About\nFrame\nPlugin -->\n<g id=\"node80\" class=\"node\">\n<title>About\nFrame\nPlugin</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6801.6\" font-family=\"Times,serif\" font-size=\"14.00\">About</text>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6784.8\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6768\" font-family=\"Times,serif\" font-size=\"14.00\">Plugin</text>\n</g>\n<!-- Frame&#45;&gt;About\nFrame\nPlugin -->\n<g id=\"edge93\" class=\"edge\">\n<title>Frame&#45;&gt;About\nFrame\nPlugin</title>\n<path fill=\"none\" stroke=\"black\" d=\"M769.83,-6843.57C789.61,-6833.23 817.15,-6818.83 838.99,-6807.41\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"840.32,-6810.14 847.56,-6802.41 837.08,-6803.94 840.32,-6810.14\"/>\n</g>\n<!-- About\nFrame\nIntegrations -->\n<g id=\"node81\" class=\"node\">\n<title>About\nFrame\nIntegrations</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6937.6\" font-family=\"Times,serif\" font-size=\"14.00\">About</text>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6920.8\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6904\" font-family=\"Times,serif\" font-size=\"14.00\">Integrations</text>\n</g>\n<!-- Frame&#45;&gt;About\nFrame\nIntegrations -->\n<g id=\"edge94\" class=\"edge\">\n<title>Frame&#45;&gt;About\nFrame\nIntegrations</title>\n<path fill=\"none\" stroke=\"black\" d=\"M769.83,-6870.43C785.4,-6878.58 805.8,-6889.24 824.42,-6898.97\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"822.48,-6902.43 832.97,-6903.96 825.73,-6896.23 822.48,-6902.43\"/>\n</g>\n<!-- Key\nFrame -->\n<g id=\"node82\" class=\"node\">\n<title>Key\nFrame</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6861.2\" font-family=\"Times,serif\" font-size=\"14.00\">Key</text>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6844.4\" font-family=\"Times,serif\" font-size=\"14.00\">Frame</text>\n</g>\n<!-- Frame&#45;&gt;Key\nFrame -->\n<g id=\"edge95\" class=\"edge\">\n<title>Frame&#45;&gt;Key\nFrame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M769.83,-6857C789.25,-6857 816.16,-6857 837.8,-6857\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"837.56,-6860.5 847.56,-6857 837.56,-6853.5 837.56,-6860.5\"/>\n</g>\n<!-- put&#45;&gt;Content -->\n<g id=\"edge99\" class=\"edge\">\n<title>put&#45;&gt;Content</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516.78,-6623.68C560.82,-6628.24 650.49,-6637.52 702.45,-6642.89\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"701.94,-6646.46 712.25,-6644.01 702.66,-6639.5 701.94,-6646.46\"/>\n</g>\n<!-- put&#45;&gt;Frame -->\n<g id=\"edge100\" class=\"edge\">\n<title>put&#45;&gt;Frame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516.61,-6636.56C550.65,-6657.83 611.42,-6698.34 655.59,-6742 683.2,-6769.29 709.18,-6805.82 725.33,-6830.31\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"722.84,-6831.91 731.22,-6838.38 728.71,-6828.09 722.84,-6831.91\"/>\n</g>\n<!-- put&#45;&gt;put -->\n<g id=\"edge98\" class=\"edge\">\n<title>put&#45;&gt;put</title>\n<path fill=\"none\" stroke=\"black\" d=\"M467.06,-6638.78C463.2,-6648.31 470.78,-6657 489.83,-6657 501.14,-6657 508.41,-6653.94 511.64,-6649.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"515.19,-6650.05 512.6,-6639.78 508.22,-6649.43 515.19,-6650.05\"/>\n</g>\n<!-- put&#45;&gt;Frame\nType -->\n<g id=\"edge101\" class=\"edge\">\n<title>put&#45;&gt;Frame\nType</title>\n<path fill=\"none\" stroke=\"black\" d=\"M499.37,-6603.04C509.53,-6586.65 526.92,-6562.81 541.37,-6542 558.22,-6517.74 576.67,-6490.12 590.94,-6469.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"594.3,-6471.92 597.19,-6461.72 588.57,-6467.89 594.3,-6471.92\"/>\n</g>\n<!-- Lambda\nCalculus -->\n<g id=\"node83\" class=\"node\">\n<title>Lambda\nCalculus</title>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-6602.2\" font-family=\"Times,serif\" font-size=\"14.00\">Lambda</text>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-6585.4\" font-family=\"Times,serif\" font-size=\"14.00\">Calculus</text>\n</g>\n<!-- put&#45;&gt;Lambda\nCalculus -->\n<g id=\"edge96\" class=\"edge\">\n<title>put&#45;&gt;Lambda\nCalculus</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516.66,-6616.23C533.11,-6613.2 554.8,-6609.2 573.67,-6605.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"574.2,-6608.99 583.4,-6603.74 572.93,-6602.11 574.2,-6608.99\"/>\n</g>\n<!-- Lingdong\nHuang -->\n<g id=\"node84\" class=\"node\">\n<title>Lingdong\nHuang</title>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-6542.2\" font-family=\"Times,serif\" font-size=\"14.00\">Lingdong</text>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-6525.4\" font-family=\"Times,serif\" font-size=\"14.00\">Huang</text>\n</g>\n<!-- put&#45;&gt;Lingdong\nHuang -->\n<g id=\"edge97\" class=\"edge\">\n<title>put&#45;&gt;Lingdong\nHuang</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516.67,-6604.91C524.63,-6599.88 533.4,-6594.26 541.37,-6589 553.1,-6581.26 565.73,-6572.66 577.19,-6564.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"578.85,-6567.18 585.09,-6558.61 574.87,-6561.42 578.85,-6567.18\"/>\n</g>\n<!-- Frame\nType&#45;&gt;collect -->\n<g id=\"edge105\" class=\"edge\">\n<title>Frame\nType&#45;&gt;collect</title>\n<path fill=\"none\" stroke=\"black\" d=\"M616.35,-6419.32C616.46,-6373.04 608.62,-6262.55 541.37,-6213 539.81,-6211.85 264.56,-6212.15 262.63,-6212 245.03,-6210.6 225.64,-6207.74 209.42,-6204.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"210.29,-6200.59 199.75,-6201.67 208.67,-6207.4 210.29,-6200.59\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Arrangement -->\n<g id=\"edge104\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Arrangement</title>\n<path fill=\"none\" stroke=\"black\" d=\"M589.66,-6443.52C553.79,-6447.21 487.71,-6449.61 438.29,-6426 417.3,-6415.97 420,-6403.09 402.29,-6388 392.75,-6379.87 381.79,-6371.86 371.45,-6364.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"373.85,-6361.54 363.59,-6358.91 369.96,-6367.37 373.85,-6361.54\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Content -->\n<g id=\"edge107\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Content</title>\n<path fill=\"none\" stroke=\"black\" d=\"M629.89,-6460.6C652.52,-6498.19 700.5,-6577.86 725.77,-6619.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"723.23,-6621.4 731.38,-6628.16 729.22,-6617.79 723.23,-6621.4\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Frame -->\n<g id=\"edge108\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Frame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M631.19,-6460.65C639.33,-6473.74 649.26,-6491.3 655.59,-6508 682.34,-6578.59 673.54,-6600.7 691.59,-6674 705.2,-6729.25 723.44,-6793.21 733.87,-6829\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"730.68,-6829.55 736.85,-6838.16 737.4,-6827.58 730.68,-6829.55\"/>\n</g>\n<!-- Frame\nType&#45;&gt;put -->\n<g id=\"edge109\" class=\"edge\">\n<title>Frame\nType&#45;&gt;put</title>\n<path fill=\"none\" stroke=\"black\" d=\"M605.82,-6460.76C591.84,-6485.24 565.03,-6525.93 541.37,-6560 533.36,-6571.54 524.43,-6584.02 516.34,-6594.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"513.09,-6592.24 509.78,-6602.3 518.65,-6596.5 513.09,-6592.24\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Structure -->\n<g id=\"edge102\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M623.41,-6419.41C643.74,-6348.78 710.67,-6116.27 734.01,-6035.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"737.61,-6036.36 737.01,-6025.79 730.88,-6034.43 737.61,-6036.36\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Square&#45;Bracket -->\n<g id=\"edge103\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Square&#45;Bracket</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.31,-6424.05C660.84,-6413.22 684.31,-6398.72 703.98,-6386.57\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"705.62,-6389.05 712.29,-6380.82 701.94,-6383.1 705.62,-6389.05\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Context -->\n<g id=\"edge110\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Context</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.31,-6445.18C660.44,-6448.62 683.24,-6453.19 702.63,-6457.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"701.79,-6460.68 712.29,-6459.21 703.17,-6453.82 701.79,-6460.68\"/>\n</g>\n<!-- Frame\nType&#45;&gt;Iconic\nArithmetic -->\n<g id=\"edge106\" class=\"edge\">\n<title>Frame\nType&#45;&gt;Iconic\nArithmetic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M628.71,-6419.31C641.67,-6396.81 664.67,-6360.77 691.59,-6336 693.11,-6334.6 694.71,-6333.24 696.36,-6331.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"697.98,-6334.33 703.96,-6325.59 693.83,-6328.69 697.98,-6334.33\"/>\n</g>\n<!-- Type&#45;&gt;Behaviour -->\n<g id=\"edge113\" class=\"edge\">\n<title>Type&#45;&gt;Behaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M194.68,-5635.2C222.35,-5612.5 270.31,-5573.16 301.46,-5547.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"303.25,-5549.84 308.77,-5540.8 298.82,-5544.43 303.25,-5549.84\"/>\n</g>\n<!-- Type&#45;&gt;Name -->\n<g id=\"edge112\" class=\"edge\">\n<title>Type&#45;&gt;Name</title>\n<path fill=\"none\" stroke=\"black\" d=\"M180.32,-5670.61C191.21,-5697.1 211.95,-5748.92 226.63,-5794 245.47,-5851.82 222.01,-5880.75 262.63,-5926 271.19,-5935.53 283.53,-5941.73 295.41,-5945.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.04,-5949.29 304.62,-5948.76 296.01,-5942.58 294.04,-5949.29\"/>\n</g>\n<!-- The\nBehavioural\nPoint\nof\nView -->\n<g id=\"node85\" class=\"node\">\n<title>The\nBehavioural\nPoint\nof\nView</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5470.4\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5453.6\" font-family=\"Times,serif\" font-size=\"14.00\">Behavioural</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5436.8\" font-family=\"Times,serif\" font-size=\"14.00\">Point</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5420\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5403.2\" font-family=\"Times,serif\" font-size=\"14.00\">View</text>\n</g>\n<!-- Type&#45;&gt;The\nBehavioural\nPoint\nof\nView -->\n<g id=\"edge111\" class=\"edge\">\n<title>Type&#45;&gt;The\nBehavioural\nPoint\nof\nView</title>\n<path fill=\"none\" stroke=\"black\" d=\"M180.48,-5635.14C193.9,-5604.49 224.27,-5540.84 262.63,-5496 268.5,-5489.15 275.31,-5482.54 282.32,-5476.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.18,-5478.58 289.6,-5469.48 279.69,-5473.22 284.18,-5478.58\"/>\n</g>\n<!-- Being\nthe\nSame -->\n<g id=\"node86\" class=\"node\">\n<title>Being\nthe\nSame</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5730.6\" font-family=\"Times,serif\" font-size=\"14.00\">Being</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5713.8\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5697\" font-family=\"Times,serif\" font-size=\"14.00\">Same</text>\n</g>\n<!-- Type&#45;&gt;Being\nthe\nSame -->\n<g id=\"edge114\" class=\"edge\">\n<title>Type&#45;&gt;Being\nthe\nSame</title>\n<path fill=\"none\" stroke=\"black\" d=\"M198.8,-5663.59C225.16,-5674.4 266.29,-5691.27 295.76,-5703.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.08,-5706.86 304.66,-5707.42 296.73,-5700.38 294.08,-5706.86\"/>\n</g>\n<!-- JavaScript -->\n<g id=\"node87\" class=\"node\">\n<title>JavaScript</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5648.8\" font-family=\"Times,serif\" font-size=\"14.00\">JavaScript</text>\n</g>\n<!-- Type&#45;&gt;JavaScript -->\n<g id=\"edge115\" class=\"edge\">\n<title>Type&#45;&gt;JavaScript</title>\n<path fill=\"none\" stroke=\"black\" d=\"M198.8,-5653C222.02,-5653 256.72,-5653 284.8,-5653\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.6,-5656.5 294.6,-5653 284.6,-5649.5 284.6,-5656.5\"/>\n</g>\n<!-- Search\nIndex\nDownloads -->\n<g id=\"node88\" class=\"node\">\n<title>Search\nIndex\nDownloads</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4040.6\" font-family=\"Times,serif\" font-size=\"14.00\">Search</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4023.8\" font-family=\"Times,serif\" font-size=\"14.00\">Index</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4007\" font-family=\"Times,serif\" font-size=\"14.00\">Downloads</text>\n</g>\n<!-- Item\nDistribution&#45;&gt;Search\nIndex\nDownloads -->\n<g id=\"edge116\" class=\"edge\">\n<title>Item\nDistribution&#45;&gt;Search\nIndex\nDownloads</title>\n<path fill=\"none\" stroke=\"black\" d=\"M213.79,-4051.02C234.58,-4046.95 260.03,-4041.97 281.94,-4037.69\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"282.56,-4040.94 291.7,-4035.58 281.21,-4034.07 282.56,-4040.94\"/>\n</g>\n<!-- the\nfederation -->\n<g id=\"node89\" class=\"node\">\n<title>the\nfederation</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3492.2\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3475.4\" font-family=\"Times,serif\" font-size=\"14.00\">federation</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;the\nfederation -->\n<g id=\"edge117\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;the\nfederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M178.19,-3699.94C187.58,-3655.33 211.37,-3569.74 262.63,-3518 269.23,-3511.34 277.55,-3506.06 286.1,-3501.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"287.38,-3504.73 295.16,-3497.53 284.59,-3498.31 287.38,-3504.73\"/>\n</g>\n<!-- permanent\nweb -->\n<g id=\"node90\" class=\"node\">\n<title>permanent\nweb</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3432.2\" font-family=\"Times,serif\" font-size=\"14.00\">permanent</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3415.4\" font-family=\"Times,serif\" font-size=\"14.00\">web</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;permanent\nweb -->\n<g id=\"edge118\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;permanent\nweb</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.96,-3699.84C180.14,-3645.58 198.5,-3528.29 262.63,-3458 268.82,-3451.22 276.82,-3445.9 285.15,-3441.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"286.28,-3444.63 294.01,-3437.39 283.45,-3438.23 286.28,-3444.63\"/>\n</g>\n<!-- dead\nwiki -->\n<g id=\"node91\" class=\"node\">\n<title>dead\nwiki</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3964.2\" font-family=\"Times,serif\" font-size=\"14.00\">dead</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3947.4\" font-family=\"Times,serif\" font-size=\"14.00\">wiki</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;dead\nwiki -->\n<g id=\"edge119\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;dead\nwiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M178.91,-3758.11C189.04,-3800.99 213.52,-3881.31 262.63,-3930 271.64,-3938.92 283.73,-3945.4 295.27,-3949.99\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.01,-3953.62 304.6,-3953.7 296.37,-3947.03 294.01,-3953.62\"/>\n</g>\n<!-- long\nnow -->\n<g id=\"node92\" class=\"node\">\n<title>long\nnow</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3904.2\" font-family=\"Times,serif\" font-size=\"14.00\">long</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3887.4\" font-family=\"Times,serif\" font-size=\"14.00\">now</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;long\nnow -->\n<g id=\"edge120\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;long\nnow</title>\n<path fill=\"none\" stroke=\"black\" d=\"M185.12,-3757.99C199.53,-3789.3 226.27,-3838.88 262.63,-3870 272.11,-3878.11 284.12,-3884.35 295.45,-3888.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"293.97,-3892.54 304.56,-3892.79 296.44,-3885.99 293.97,-3892.54\"/>\n</g>\n<!-- mediawiki\ntransport -->\n<g id=\"node93\" class=\"node\">\n<title>mediawiki\ntransport</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3844.2\" font-family=\"Times,serif\" font-size=\"14.00\">mediawiki</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3827.4\" font-family=\"Times,serif\" font-size=\"14.00\">transport</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;mediawiki\ntransport -->\n<g id=\"edge121\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;mediawiki\ntransport</title>\n<path fill=\"none\" stroke=\"black\" d=\"M200.49,-3758.2C217.31,-3774.88 239.9,-3795.33 262.63,-3810 269.57,-3814.47 277.28,-3818.56 284.95,-3822.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.41,-3825.79 293.97,-3826.69 286.28,-3819.4 283.41,-3825.79\"/>\n</g>\n<!-- Livecode -->\n<g id=\"node94\" class=\"node\">\n<title>Livecode</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3778.8\" font-family=\"Times,serif\" font-size=\"14.00\">Livecode</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;Livecode -->\n<g id=\"edge122\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;Livecode</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.55,-3741.12C232.1,-3749.15 263.15,-3759.72 288.15,-3768.24\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"286.85,-3771.84 297.45,-3771.75 289.11,-3765.21 286.85,-3771.84\"/>\n</g>\n<!-- transporters -->\n<g id=\"node95\" class=\"node\">\n<title>transporters</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3724.8\" font-family=\"Times,serif\" font-size=\"14.00\">transporters</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;transporters -->\n<g id=\"edge123\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;transporters</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.55,-3729C229.82,-3729 257.2,-3729 280.71,-3729\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"280.56,-3732.5 290.56,-3729 280.56,-3725.5 280.56,-3732.5\"/>\n</g>\n<!-- uuid -->\n<g id=\"node96\" class=\"node\">\n<title>uuid</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3670.8\" font-family=\"Times,serif\" font-size=\"14.00\">uuid</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;uuid -->\n<g id=\"edge124\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;uuid</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.55,-3716.88C234.53,-3708.03 269.64,-3696.07 295.68,-3687.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.54,-3690.26 304.88,-3683.72 294.28,-3683.63 296.54,-3690.26\"/>\n</g>\n<!-- node.js -->\n<g id=\"node97\" class=\"node\">\n<title>node.js</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3616.8\" font-family=\"Times,serif\" font-size=\"14.00\">node.js</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;node.js -->\n<g id=\"edge125\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;node.js</title>\n<path fill=\"none\" stroke=\"black\" d=\"M199.91,-3699.88C216.69,-3683.02 239.45,-3662.35 262.63,-3648 272.38,-3641.97 283.69,-3636.86 294.3,-3632.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.39,-3635.73 303.58,-3629.01 292.99,-3629.15 295.39,-3635.73\"/>\n</g>\n<!-- Universally\nunique\nidentifier -->\n<g id=\"node98\" class=\"node\">\n<title>Universally\nunique\nidentifier</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3568.6\" font-family=\"Times,serif\" font-size=\"14.00\">Universally</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3551.8\" font-family=\"Times,serif\" font-size=\"14.00\">unique</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3535\" font-family=\"Times,serif\" font-size=\"14.00\">identifier</text>\n</g>\n<!-- Unique\nItem\nIdentifiers&#45;&gt;Universally\nunique\nidentifier -->\n<g id=\"edge126\" class=\"edge\">\n<title>Unique\nItem\nIdentifiers&#45;&gt;Universally\nunique\nidentifier</title>\n<path fill=\"none\" stroke=\"black\" d=\"M186.95,-3699.98C202.28,-3670.46 229.22,-3624.79 262.63,-3594 268.7,-3588.41 275.75,-3583.34 282.96,-3578.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.27,-3581.56 291.14,-3573.49 280.74,-3575.52 284.27,-3581.56\"/>\n</g>\n<!-- fluid -->\n<g id=\"node99\" class=\"node\">\n<title>fluid</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3258.8\" font-family=\"Times,serif\" font-size=\"14.00\">fluid</text>\n</g>\n<!-- Fluid\nNot\nPermanent&#45;&gt;fluid -->\n<g id=\"edge127\" class=\"edge\">\n<title>Fluid\nNot\nPermanent&#45;&gt;fluid</title>\n<path fill=\"none\" stroke=\"black\" d=\"M209.74,-3304.48C235.5,-3295.7 269.77,-3284.02 295.38,-3275.29\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.44,-3278.29 304.78,-3271.75 294.18,-3271.66 296.44,-3278.29\"/>\n</g>\n<!-- permanent -->\n<g id=\"node100\" class=\"node\">\n<title>permanent</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3366.8\" font-family=\"Times,serif\" font-size=\"14.00\">permanent</text>\n</g>\n<!-- Fluid\nNot\nPermanent&#45;&gt;permanent -->\n<g id=\"edge128\" class=\"edge\">\n<title>Fluid\nNot\nPermanent&#45;&gt;permanent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M209.74,-3329.52C232.12,-3337.15 260.92,-3346.96 284.89,-3355.13\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.58,-3358.72 294.18,-3358.64 285.84,-3352.1 283.58,-3358.72\"/>\n</g>\n<!-- Intent -->\n<g id=\"node101\" class=\"node\">\n<title>Intent</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3312.8\" font-family=\"Times,serif\" font-size=\"14.00\">Intent</text>\n</g>\n<!-- Fluid\nNot\nPermanent&#45;&gt;Intent -->\n<g id=\"edge129\" class=\"edge\">\n<title>Fluid\nNot\nPermanent&#45;&gt;Intent</title>\n<path fill=\"none\" stroke=\"black\" d=\"M209.74,-3317C235.39,-3317 269.46,-3317 295.04,-3317\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.78,-3320.5 304.78,-3317 294.78,-3313.5 294.78,-3320.5\"/>\n</g>\n<!-- Intention -->\n<g id=\"node102\" class=\"node\">\n<title>Intention</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3204.8\" font-family=\"Times,serif\" font-size=\"14.00\">Intention</text>\n</g>\n<!-- Fluid\nNot\nPermanent&#45;&gt;Intention -->\n<g id=\"edge130\" class=\"edge\">\n<title>Fluid\nNot\nPermanent&#45;&gt;Intention</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.01,-3287.82C230.06,-3265.04 260.95,-3237.04 262.63,-3236 270.88,-3230.9 280.26,-3226.45 289.38,-3222.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.42,-3225.69 298.49,-3218.82 287.9,-3219.16 290.42,-3225.69\"/>\n</g>\n<!-- Mixins -->\n<g id=\"node103\" class=\"node\">\n<title>Mixins</title>\n<text text-anchor=\"middle\" x=\"616.48\" y=\"-5548.8\" font-family=\"Times,serif\" font-size=\"14.00\">Mixins</text>\n</g>\n<!-- Interpreter&#45;&gt;Mixins -->\n<g id=\"edge131\" class=\"edge\">\n<title>Interpreter&#45;&gt;Mixins</title>\n<path fill=\"none\" stroke=\"black\" d=\"M527.22,-5558.66C543.22,-5557.64 561.99,-5556.43 578.1,-5555.4\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"578.01,-5558.85 587.76,-5554.71 577.56,-5551.86 578.01,-5558.85\"/>\n</g>\n<!-- Compile\nTime -->\n<g id=\"node104\" class=\"node\">\n<title>Compile\nTime</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2910.2\" font-family=\"Times,serif\" font-size=\"14.00\">Compile</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2893.4\" font-family=\"Times,serif\" font-size=\"14.00\">Time</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Compile\nTime -->\n<g id=\"edge132\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Compile\nTime</title>\n<path fill=\"none\" stroke=\"black\" d=\"M172.74,-2566.6C173.18,-2623.11 181.91,-2782.56 262.63,-2876 269.92,-2884.43 280.02,-2890.58 290.23,-2895.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.8,-2898.61 299.39,-2898.93 291.31,-2892.08 288.8,-2898.61\"/>\n</g>\n<!-- Reference\nValue -->\n<g id=\"node105\" class=\"node\">\n<title>Reference\nValue</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2850.2\" font-family=\"Times,serif\" font-size=\"14.00\">Reference</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2833.4\" font-family=\"Times,serif\" font-size=\"14.00\">Value</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Reference\nValue -->\n<g id=\"edge133\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Reference\nValue</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.25,-2566.77C178.34,-2616.19 195.18,-2742.15 262.63,-2816 269.15,-2823.13 277.66,-2828.65 286.47,-2832.89\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.87,-2836.44 295.44,-2837.15 287.62,-2830 284.87,-2836.44\"/>\n</g>\n<!-- Type\nInference -->\n<g id=\"node106\" class=\"node\">\n<title>Type\nInference</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2790.2\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2773.4\" font-family=\"Times,serif\" font-size=\"14.00\">Inference</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Type\nInference -->\n<g id=\"edge134\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Type\nInference</title>\n<path fill=\"none\" stroke=\"black\" d=\"M176.55,-2566.74C184.66,-2608.01 208.18,-2701.13 262.63,-2756 269.78,-2763.2 278.95,-2768.8 288.24,-2773.1\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"286.71,-2776.67 297.29,-2777.27 289.4,-2770.2 286.71,-2776.67\"/>\n</g>\n<!-- Type\nSystem -->\n<g id=\"node107\" class=\"node\">\n<title>Type\nSystem</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2730.2\" font-family=\"Times,serif\" font-size=\"14.00\">Type</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2713.4\" font-family=\"Times,serif\" font-size=\"14.00\">System</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Type\nSystem -->\n<g id=\"edge135\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Type\nSystem</title>\n<path fill=\"none\" stroke=\"black\" d=\"M180.52,-2566.69C193.05,-2598.43 220.95,-2659.33 262.63,-2696 271.61,-2703.9 282.98,-2709.98 293.89,-2714.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"292.52,-2718.15 303.11,-2718.46 295.02,-2711.62 292.52,-2718.15\"/>\n</g>\n<!-- Programming\nLanguage -->\n<g id=\"node108\" class=\"node\">\n<title>Programming\nLanguage</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2670.2\" font-family=\"Times,serif\" font-size=\"14.00\">Programming</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2653.4\" font-family=\"Times,serif\" font-size=\"14.00\">Language</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Programming\nLanguage -->\n<g id=\"edge136\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Programming\nLanguage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M189.37,-2566.45C206.1,-2586.29 233.68,-2616.22 262.63,-2636 267.03,-2639 271.77,-2641.81 276.64,-2644.41\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"274.59,-2647.8 285.1,-2649.14 277.73,-2641.54 274.59,-2647.8\"/>\n</g>\n<!-- Strong\nTyping -->\n<g id=\"node109\" class=\"node\">\n<title>Strong\nTyping</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2610.2\" font-family=\"Times,serif\" font-size=\"14.00\">Strong</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2593.4\" font-family=\"Times,serif\" font-size=\"14.00\">Typing</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Strong\nTyping -->\n<g id=\"edge137\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Strong\nTyping</title>\n<path fill=\"none\" stroke=\"black\" d=\"M199.86,-2556.18C225.82,-2566 265.34,-2580.97 294.3,-2591.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"292.85,-2595.5 303.45,-2595.77 295.33,-2588.96 292.85,-2595.5\"/>\n</g>\n<!-- Dynamic\nTyping -->\n<g id=\"node110\" class=\"node\">\n<title>Dynamic\nTyping</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2550.2\" font-family=\"Times,serif\" font-size=\"14.00\">Dynamic</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2533.4\" font-family=\"Times,serif\" font-size=\"14.00\">Typing</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Dynamic\nTyping -->\n<g id=\"edge138\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Dynamic\nTyping</title>\n<path fill=\"none\" stroke=\"black\" d=\"M199.86,-2546C224.03,-2546 259.96,-2546 288.18,-2546\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"287.96,-2549.5 297.96,-2546 287.96,-2542.5 287.96,-2549.5\"/>\n</g>\n<!-- Soft\nTyping -->\n<g id=\"node111\" class=\"node\">\n<title>Soft\nTyping</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2490.2\" font-family=\"Times,serif\" font-size=\"14.00\">Soft</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2473.4\" font-family=\"Times,serif\" font-size=\"14.00\">Typing</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Soft\nTyping -->\n<g id=\"edge139\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Soft\nTyping</title>\n<path fill=\"none\" stroke=\"black\" d=\"M199.86,-2535.82C225.82,-2526 265.34,-2511.03 294.3,-2500.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.33,-2503.04 303.45,-2496.23 292.85,-2496.5 295.33,-2503.04\"/>\n</g>\n<!-- Adam\nBerger -->\n<g id=\"node112\" class=\"node\">\n<title>Adam\nBerger</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2430.2\" font-family=\"Times,serif\" font-size=\"14.00\">Adam</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2413.4\" font-family=\"Times,serif\" font-size=\"14.00\">Berger</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Adam\nBerger -->\n<g id=\"edge140\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Adam\nBerger</title>\n<path fill=\"none\" stroke=\"black\" d=\"M189.37,-2525.55C206.1,-2505.71 233.68,-2475.78 262.63,-2456 272.59,-2449.2 284.33,-2443.4 295.27,-2438.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.45,-2441.66 304.42,-2434.68 293.84,-2435.17 296.45,-2441.66\"/>\n</g>\n<!-- Java\nLanguage -->\n<g id=\"node113\" class=\"node\">\n<title>Java\nLanguage</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2370.2\" font-family=\"Times,serif\" font-size=\"14.00\">Java</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2353.4\" font-family=\"Times,serif\" font-size=\"14.00\">Language</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Java\nLanguage -->\n<g id=\"edge141\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Java\nLanguage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M180.52,-2525.31C193.05,-2493.57 220.95,-2432.67 262.63,-2396 269.82,-2389.68 278.54,-2384.52 287.32,-2380.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.4,-2383.29 296.19,-2376.11 285.62,-2376.86 288.4,-2383.29\"/>\n</g>\n<!-- Cee\nPlus\nPlus -->\n<g id=\"node114\" class=\"node\">\n<title>Cee\nPlus\nPlus</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2310.6\" font-family=\"Times,serif\" font-size=\"14.00\">Cee</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2293.8\" font-family=\"Times,serif\" font-size=\"14.00\">Plus</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2277\" font-family=\"Times,serif\" font-size=\"14.00\">Plus</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Cee\nPlus\nPlus -->\n<g id=\"edge142\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Cee\nPlus\nPlus</title>\n<path fill=\"none\" stroke=\"black\" d=\"M177.06,-2525.37C186.04,-2484.7 210.93,-2393.2 262.63,-2336 271.72,-2325.95 284.1,-2317.99 295.85,-2312\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.96,-2314.87 304.5,-2307.43 293.96,-2308.54 296.96,-2314.87\"/>\n</g>\n<!-- Pascal\nLanguage -->\n<g id=\"node115\" class=\"node\">\n<title>Pascal\nLanguage</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2234.2\" font-family=\"Times,serif\" font-size=\"14.00\">Pascal</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2217.4\" font-family=\"Times,serif\" font-size=\"14.00\">Language</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Pascal\nLanguage -->\n<g id=\"edge143\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Pascal\nLanguage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M173.77,-2525.55C176.82,-2474.36 191.53,-2339.17 262.63,-2260 269.29,-2252.59 278.1,-2246.94 287.18,-2242.64\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.19,-2245.6 296.06,-2238.5 285.49,-2239.14 288.19,-2245.6\"/>\n</g>\n<!-- Ada\nLanguage -->\n<g id=\"node116\" class=\"node\">\n<title>Ada\nLanguage</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2174.2\" font-family=\"Times,serif\" font-size=\"14.00\">Ada</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2157.4\" font-family=\"Times,serif\" font-size=\"14.00\">Language</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Ada\nLanguage -->\n<g id=\"edge144\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Ada\nLanguage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M172.42,-2525.27C171.96,-2466.83 178.43,-2298.64 262.63,-2200 269.16,-2192.36 278,-2186.59 287.17,-2182.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.25,-2185.2 296.15,-2178.13 285.57,-2178.73 288.25,-2185.2\"/>\n</g>\n<!-- Objective\nCaml -->\n<g id=\"node117\" class=\"node\">\n<title>Objective\nCaml</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2114.2\" font-family=\"Times,serif\" font-size=\"14.00\">Objective</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2097.4\" font-family=\"Times,serif\" font-size=\"14.00\">Caml</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Objective\nCaml -->\n<g id=\"edge145\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Objective\nCaml</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.07,-2525.33C182.92,-2451.3 212.75,-2200.62 262.63,-2140 269.08,-2132.16 277.97,-2126.32 287.22,-2121.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.39,-2124.88 296.31,-2117.84 285.73,-2118.4 288.39,-2124.88\"/>\n</g>\n<!-- Sml\nLanguage -->\n<g id=\"node118\" class=\"node\">\n<title>Sml\nLanguage</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2054.2\" font-family=\"Times,serif\" font-size=\"14.00\">Sml</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2037.4\" font-family=\"Times,serif\" font-size=\"14.00\">Language</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Sml\nLanguage -->\n<g id=\"edge146\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Sml\nLanguage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.42,-2525.42C180.44,-2444.72 205.95,-2150.84 262.63,-2080 268.97,-2072.08 277.82,-2066.2 287.07,-2061.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.23,-2064.75 296.16,-2057.72 285.58,-2058.27 288.23,-2064.75\"/>\n</g>\n<!-- Haskell\nLanguage -->\n<g id=\"node119\" class=\"node\">\n<title>Haskell\nLanguage</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1994.2\" font-family=\"Times,serif\" font-size=\"14.00\">Haskell</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1977.4\" font-family=\"Times,serif\" font-size=\"14.00\">Language</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Haskell\nLanguage -->\n<g id=\"edge147\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Haskell\nLanguage</title>\n<path fill=\"none\" stroke=\"black\" d=\"M173.93,-2525.21C178.33,-2437.82 199.17,-2101.05 262.63,-2020 268.89,-2012.01 277.71,-2006.11 286.95,-2001.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.11,-2004.65 296.04,-1997.62 285.46,-1998.18 288.11,-2004.65\"/>\n</g>\n<!-- Definitions\nOf\nTypes -->\n<g id=\"node120\" class=\"node\">\n<title>Definitions\nOf\nTypes</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3062.6\" font-family=\"Times,serif\" font-size=\"14.00\">Definitions</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3045.8\" font-family=\"Times,serif\" font-size=\"14.00\">Of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3029\" font-family=\"Times,serif\" font-size=\"14.00\">Types</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Definitions\nOf\nTypes -->\n<g id=\"edge148\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Definitions\nOf\nTypes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.64,-2566.7C181.44,-2647.22 209.37,-2938.68 262.63,-3012 268.11,-3019.54 275.56,-3025.76 283.55,-3030.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"281.66,-3034.35 292.08,-3036.26 285.12,-3028.27 281.66,-3034.35\"/>\n</g>\n<!-- Category\nLanguage\nTyping -->\n<g id=\"node121\" class=\"node\">\n<title>Category\nLanguage\nTyping</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2986.6\" font-family=\"Times,serif\" font-size=\"14.00\">Category</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2969.8\" font-family=\"Times,serif\" font-size=\"14.00\">Language</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-2953\" font-family=\"Times,serif\" font-size=\"14.00\">Typing</text>\n</g>\n<!-- Static\nTyping&#45;&gt;Category\nLanguage\nTyping -->\n<g id=\"edge149\" class=\"edge\">\n<title>Static\nTyping&#45;&gt;Category\nLanguage\nTyping</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.49,-2566.7C184.54,-2638.54 217.35,-2875.95 262.63,-2936 269.04,-2944.49 277.92,-2951.34 287.18,-2956.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"285.4,-2960.3 295.88,-2961.88 288.68,-2954.11 285.4,-2960.3\"/>\n</g>\n<!-- Seymour\nPapert -->\n<g id=\"node122\" class=\"node\">\n<title>Seymour\nPapert</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1820.2\" font-family=\"Times,serif\" font-size=\"14.00\">Seymour</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1803.4\" font-family=\"Times,serif\" font-size=\"14.00\">Papert</text>\n</g>\n<!-- Alan\nKay&#45;&gt;Seymour\nPapert -->\n<g id=\"edge150\" class=\"edge\">\n<title>Alan\nKay&#45;&gt;Seymour\nPapert</title>\n<path fill=\"none\" stroke=\"black\" d=\"M198.71,-1883.89C216.34,-1872.51 240.45,-1857.57 262.63,-1846 271.2,-1841.53 280.57,-1837.14 289.57,-1833.15\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.73,-1836.03 298.51,-1828.83 287.94,-1829.61 290.73,-1836.03\"/>\n</g>\n<!-- Blue\nPlane -->\n<g id=\"node123\" class=\"node\">\n<title>Blue\nPlane</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1934.2\" font-family=\"Times,serif\" font-size=\"14.00\">Blue</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1917.4\" font-family=\"Times,serif\" font-size=\"14.00\">Plane</text>\n</g>\n<!-- Alan\nKay&#45;&gt;Blue\nPlane -->\n<g id=\"edge151\" class=\"edge\">\n<title>Alan\nKay&#45;&gt;Blue\nPlane</title>\n<path fill=\"none\" stroke=\"black\" d=\"M198.8,-1905.72C224.93,-1910.51 265.57,-1917.94 294.99,-1923.33\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.19,-1926.92 304.66,-1925.28 295.45,-1920.04 294.19,-1926.92\"/>\n</g>\n<!-- Smalltalk -->\n<g id=\"node124\" class=\"node\">\n<title>Smalltalk</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1868.8\" font-family=\"Times,serif\" font-size=\"14.00\">Smalltalk</text>\n</g>\n<!-- Alan\nKay&#45;&gt;Smalltalk -->\n<g id=\"edge152\" class=\"edge\">\n<title>Alan\nKay&#45;&gt;Smalltalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M198.8,-1896.44C222.67,-1892.22 258.66,-1885.86 287.14,-1880.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"287.4,-1884.16 296.64,-1878.98 286.18,-1877.27 287.4,-1884.16\"/>\n</g>\n<!-- Quildreen\nMotta&#45;&gt;Structure -->\n<g id=\"edge153\" class=\"edge\">\n<title>Quildreen\nMotta&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M207.64,-5826.69C255.14,-5828.69 341.49,-5826.2 402.29,-5789 425.65,-5774.71 413.92,-5751.48 438.29,-5739 479.07,-5718.11 496.15,-5731.67 541.37,-5739 594.19,-5747.55 617.04,-5739.91 655.59,-5777 713.25,-5832.47 732.87,-5930.1 739.24,-5978.35\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"735.88,-5978.72 740.56,-5988.23 742.83,-5977.88 735.88,-5978.72\"/>\n</g>\n<!-- Quildreen\nMotta&#45;&gt;Objects\nas\nBehaviour -->\n<g id=\"edge154\" class=\"edge\">\n<title>Quildreen\nMotta&#45;&gt;Objects\nas\nBehaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M207.76,-5828.4C230.48,-5833.78 260.42,-5842.31 285.15,-5850.35\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.8,-5853.93 294.39,-5853.76 286.01,-5847.28 283.8,-5853.93\"/>\n</g>\n<!-- Structure&#45;&gt;Event -->\n<g id=\"edge167\" class=\"edge\">\n<title>Structure&#45;&gt;Event</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.72,-6021.58C783.69,-6026.18 790.27,-6031.95 794.66,-6039 874,-6166.52 750.72,-6247.85 830.66,-6375 832.99,-6378.71 836.04,-6381.99 839.43,-6384.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"837.22,-6388.29 847.4,-6391.21 841.26,-6382.58 837.22,-6388.29\"/>\n</g>\n<!-- Structure&#45;&gt;Choice -->\n<g id=\"edge170\" class=\"edge\">\n<title>Structure&#45;&gt;Choice</title>\n<path fill=\"none\" stroke=\"black\" d=\"M747.53,-6024.74C758.74,-6082.86 795.77,-6272.8 830.66,-6429 842.68,-6482.8 858.13,-6545.27 867.03,-6580.67\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"863.84,-6581.32 869.68,-6590.16 870.63,-6579.61 863.84,-6581.32\"/>\n</g>\n<!-- Advance\nOrganizer -->\n<g id=\"node125\" class=\"node\">\n<title>Advance\nOrganizer</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5959.2\" font-family=\"Times,serif\" font-size=\"14.00\">Advance</text>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5942.4\" font-family=\"Times,serif\" font-size=\"14.00\">Organizer</text>\n</g>\n<!-- Structure&#45;&gt;Advance\nOrganizer -->\n<g id=\"edge155\" class=\"edge\">\n<title>Structure&#45;&gt;Advance\nOrganizer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.62,-5994.01C792.6,-5987.63 812.11,-5979.83 829.47,-5972.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"830.42,-5975.88 838.4,-5968.91 827.82,-5969.38 830.42,-5975.88\"/>\n</g>\n<!-- Scaffolding -->\n<g id=\"node126\" class=\"node\">\n<title>Scaffolding</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5893.8\" font-family=\"Times,serif\" font-size=\"14.00\">Scaffolding</text>\n</g>\n<!-- Structure&#45;&gt;Scaffolding -->\n<g id=\"edge156\" class=\"edge\">\n<title>Structure&#45;&gt;Scaffolding</title>\n<path fill=\"none\" stroke=\"black\" d=\"M760.76,-5989.26C777.53,-5971.86 804.6,-5945.09 830.66,-5925 832.07,-5923.92 833.52,-5922.84 835,-5921.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"836.42,-5924.36 842.69,-5915.82 832.46,-5918.58 836.42,-5924.36\"/>\n</g>\n<!-- Change -->\n<g id=\"node127\" class=\"node\">\n<title>Change</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5839.8\" font-family=\"Times,serif\" font-size=\"14.00\">Change</text>\n</g>\n<!-- Structure&#45;&gt;Change -->\n<g id=\"edge157\" class=\"edge\">\n<title>Structure&#45;&gt;Change</title>\n<path fill=\"none\" stroke=\"black\" d=\"M752.12,-5989.37C765.36,-5961.62 794.04,-5907.2 830.66,-5871 832.8,-5868.89 835.13,-5866.87 837.56,-5864.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"839.03,-5867.48 845.12,-5858.82 834.95,-5861.79 839.03,-5867.48\"/>\n</g>\n<!-- Inside -->\n<g id=\"node128\" class=\"node\">\n<title>Inside</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5623.8\" font-family=\"Times,serif\" font-size=\"14.00\">Inside</text>\n</g>\n<!-- Structure&#45;&gt;Inside -->\n<g id=\"edge158\" class=\"edge\">\n<title>Structure&#45;&gt;Inside</title>\n<path fill=\"none\" stroke=\"black\" d=\"M748.07,-5989.38C763.64,-5920.04 820.47,-5669.03 830.66,-5655 833.18,-5651.54 836.29,-5648.42 839.68,-5645.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"841.34,-5648.05 847.51,-5639.44 837.31,-5642.33 841.34,-5648.05\"/>\n</g>\n<!-- Outside -->\n<g id=\"node129\" class=\"node\">\n<title>Outside</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5569.8\" font-family=\"Times,serif\" font-size=\"14.00\">Outside</text>\n</g>\n<!-- Structure&#45;&gt;Outside -->\n<g id=\"edge159\" class=\"edge\">\n<title>Structure&#45;&gt;Outside</title>\n<path fill=\"none\" stroke=\"black\" d=\"M748.35,-5989.03C757.24,-5951.06 778.4,-5859.83 794.66,-5783 811.74,-5702.33 783.73,-5668.79 830.66,-5601 832.47,-5598.39 834.61,-5595.99 836.97,-5593.78\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"838.88,-5595.95 844.61,-5587.03 834.57,-5590.43 838.88,-5595.95\"/>\n</g>\n<!-- Model -->\n<g id=\"node130\" class=\"node\">\n<title>Model</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5785.8\" font-family=\"Times,serif\" font-size=\"14.00\">Model</text>\n</g>\n<!-- Structure&#45;&gt;Model -->\n<g id=\"edge160\" class=\"edge\">\n<title>Structure&#45;&gt;Model</title>\n<path fill=\"none\" stroke=\"black\" d=\"M748.5,-5989.09C758.07,-5952.95 783.85,-5870.2 830.66,-5817 833.29,-5814.02 836.32,-5811.26 839.53,-5808.73\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"841.14,-5811.18 847.34,-5802.59 837.13,-5805.44 841.14,-5811.18\"/>\n</g>\n<!-- Boundary -->\n<g id=\"node131\" class=\"node\">\n<title>Boundary</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5731.8\" font-family=\"Times,serif\" font-size=\"14.00\">Boundary</text>\n</g>\n<!-- Structure&#45;&gt;Boundary -->\n<g id=\"edge161\" class=\"edge\">\n<title>Structure&#45;&gt;Boundary</title>\n<path fill=\"none\" stroke=\"black\" d=\"M746.36,-5989.09C752.54,-5945.84 773.41,-5834.04 830.66,-5763 831.17,-5762.38 831.69,-5761.76 832.22,-5761.16\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"834.06,-5764.3 838.99,-5754.92 829.29,-5759.18 834.06,-5764.3\"/>\n</g>\n<!-- Cognition -->\n<g id=\"node132\" class=\"node\">\n<title>Cognition</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-5677.8\" font-family=\"Times,serif\" font-size=\"14.00\">Cognition</text>\n</g>\n<!-- Structure&#45;&gt;Cognition -->\n<g id=\"edge162\" class=\"edge\">\n<title>Structure&#45;&gt;Cognition</title>\n<path fill=\"none\" stroke=\"black\" d=\"M747.54,-5989.28C758.76,-5932.31 795.81,-5754.92 830.66,-5709 831.07,-5708.47 831.48,-5707.95 831.91,-5707.43\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"834.06,-5710.25 838.79,-5700.77 829.18,-5705.23 834.06,-5710.25\"/>\n</g>\n<!-- remind -->\n<g id=\"node133\" class=\"node\">\n<title>remind</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6343.8\" font-family=\"Times,serif\" font-size=\"14.00\">remind</text>\n</g>\n<!-- Structure&#45;&gt;remind -->\n<g id=\"edge163\" class=\"edge\">\n<title>Structure&#45;&gt;remind</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.62,-6021.64C783.6,-6026.24 790.2,-6031.99 794.66,-6039 862.49,-6145.6 762.33,-6214.72 830.66,-6321 832.86,-6324.42 835.66,-6327.48 838.78,-6330.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"836.44,-6333.55 846.58,-6336.61 840.56,-6327.89 836.44,-6333.55\"/>\n</g>\n<!-- William\nBricken -->\n<g id=\"node134\" class=\"node\">\n<title>William\nBricken</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6295.2\" font-family=\"Times,serif\" font-size=\"14.00\">William</text>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6278.4\" font-family=\"Times,serif\" font-size=\"14.00\">Bricken</text>\n</g>\n<!-- Structure&#45;&gt;William\nBricken -->\n<g id=\"edge164\" class=\"edge\">\n<title>Structure&#45;&gt;William\nBricken</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.71,-6021.92C783.6,-6026.49 790.14,-6032.15 794.66,-6039 849.74,-6122.42 777.22,-6176.53 830.66,-6261 832.32,-6263.62 834.3,-6266.07 836.48,-6268.35\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"833.72,-6270.46 843.54,-6274.44 838.35,-6265.21 833.72,-6270.46\"/>\n</g>\n<!-- Surprise -->\n<g id=\"node135\" class=\"node\">\n<title>Surprise</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6229.8\" font-family=\"Times,serif\" font-size=\"14.00\">Surprise</text>\n</g>\n<!-- Structure&#45;&gt;Surprise -->\n<g id=\"edge165\" class=\"edge\">\n<title>Structure&#45;&gt;Surprise</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.73,-6022.26C783.53,-6026.79 790.03,-6032.35 794.66,-6039 838.33,-6101.65 786.7,-6144.56 830.66,-6207 832.08,-6209.01 833.69,-6210.9 835.45,-6212.67\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"832.96,-6215.99 842.88,-6219.71 837.45,-6210.61 832.96,-6215.99\"/>\n</g>\n<!-- Autopoiesis -->\n<g id=\"node136\" class=\"node\">\n<title>Autopoiesis</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6175.8\" font-family=\"Times,serif\" font-size=\"14.00\">Autopoiesis</text>\n</g>\n<!-- Structure&#45;&gt;Autopoiesis -->\n<g id=\"edge166\" class=\"edge\">\n<title>Structure&#45;&gt;Autopoiesis</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.54,-6022.76C783.27,-6027.24 789.79,-6032.66 794.66,-6039 827.08,-6081.1 798.05,-6111.05 830.66,-6153 831.07,-6153.53 831.5,-6154.05 831.93,-6154.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"829.23,-6156.78 838.87,-6161.17 834.07,-6151.72 829.23,-6156.78\"/>\n</g>\n<!-- Learning\nEnvironment -->\n<g id=\"node137\" class=\"node\">\n<title>Learning\nEnvironment</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6127.2\" font-family=\"Times,serif\" font-size=\"14.00\">Learning</text>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6110.4\" font-family=\"Times,serif\" font-size=\"14.00\">Environment</text>\n</g>\n<!-- Structure&#45;&gt;Learning\nEnvironment -->\n<g id=\"edge168\" class=\"edge\">\n<title>Structure&#45;&gt;Learning\nEnvironment</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.63,-6024.73C782.98,-6028.96 789.31,-6033.78 794.66,-6039 815.3,-6059.15 810.42,-6072.45 830.66,-6093 831.47,-6093.82 832.3,-6094.63 833.15,-6095.43\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"830.38,-6098.51 840.26,-6102.34 834.92,-6093.19 830.38,-6098.51\"/>\n</g>\n<!-- Path -->\n<g id=\"node138\" class=\"node\">\n<title>Path</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6061.8\" font-family=\"Times,serif\" font-size=\"14.00\">Path</text>\n</g>\n<!-- Structure&#45;&gt;Path -->\n<g id=\"edge169\" class=\"edge\">\n<title>Structure&#45;&gt;Path</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.62,-6021.74C795.37,-6030.24 818.99,-6040.95 838.3,-6049.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"836.68,-6053.27 847.23,-6054.22 839.57,-6046.9 836.68,-6053.27\"/>\n</g>\n<!-- Patterns -->\n<g id=\"node139\" class=\"node\">\n<title>Patterns</title>\n<text text-anchor=\"middle\" x=\"875.21\" y=\"-6007.8\" font-family=\"Times,serif\" font-size=\"14.00\">Patterns</text>\n</g>\n<!-- Structure&#45;&gt;Patterns -->\n<g id=\"edge171\" class=\"edge\">\n<title>Structure&#45;&gt;Patterns</title>\n<path fill=\"none\" stroke=\"black\" d=\"M776.62,-6008.25C793.94,-6008.91 815.42,-6009.74 833.81,-6010.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"833.67,-6013.98 843.8,-6010.87 833.94,-6006.99 833.67,-6013.98\"/>\n</g>\n<!-- Star\nTrek -->\n<g id=\"node140\" class=\"node\">\n<title>Star\nTrek</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-877.2\" font-family=\"Times,serif\" font-size=\"14.00\">Star</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-860.4\" font-family=\"Times,serif\" font-size=\"14.00\">Trek</text>\n</g>\n<!-- The\nFederation&#45;&gt;Star\nTrek -->\n<g id=\"edge172\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Star\nTrek</title>\n<path fill=\"none\" stroke=\"black\" d=\"M173.7,-1171.34C176.59,-1119.62 190.97,-983.03 262.63,-903 271.31,-893.31 283.68,-886.62 295.54,-882.06\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.4,-885.12 304.73,-878.58 294.14,-878.5 296.4,-885.12\"/>\n</g>\n<!-- Decentralised\nWeb -->\n<g id=\"node141\" class=\"node\">\n<title>Decentralised\nWeb</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-817.2\" font-family=\"Times,serif\" font-size=\"14.00\">Decentralised</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-800.4\" font-family=\"Times,serif\" font-size=\"14.00\">Web</text>\n</g>\n<!-- The\nFederation&#45;&gt;Decentralised\nWeb -->\n<g id=\"edge173\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Decentralised\nWeb</title>\n<path fill=\"none\" stroke=\"black\" d=\"M172.37,-1171.51C171.72,-1112.97 177.64,-942.76 262.63,-843 266.64,-838.3 271.53,-834.31 276.82,-830.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"278.01,-833.71 285.05,-825.8 274.61,-827.6 278.01,-833.71\"/>\n</g>\n<!-- Federated\nCommons -->\n<g id=\"node142\" class=\"node\">\n<title>Federated\nCommons</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-757.2\" font-family=\"Times,serif\" font-size=\"14.00\">Federated</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-740.4\" font-family=\"Times,serif\" font-size=\"14.00\">Commons</text>\n</g>\n<!-- The\nFederation&#45;&gt;Federated\nCommons -->\n<g id=\"edge174\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Federated\nCommons</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.02,-1171.43C182.76,-1097.18 212.39,-844.15 262.63,-783 268.77,-775.54 277.12,-769.88 285.89,-765.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"287.04,-768.49 294.87,-761.35 284.3,-762.06 287.04,-768.49\"/>\n</g>\n<!-- Commons -->\n<g id=\"node143\" class=\"node\">\n<title>Commons</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-691.8\" font-family=\"Times,serif\" font-size=\"14.00\">Commons</text>\n</g>\n<!-- The\nFederation&#45;&gt;Commons -->\n<g id=\"edge175\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Commons</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.32,-1171.22C179.98,-1089.77 204.32,-793.24 262.63,-723 268.65,-715.76 276.86,-710.45 285.52,-706.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"286.71,-709.47 294.79,-702.62 284.2,-702.94 286.71,-709.47\"/>\n</g>\n<!-- Series\nof\nCultural\nEvents -->\n<g id=\"node144\" class=\"node\">\n<title>Series\nof\nCultural\nEvents</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-643\" font-family=\"Times,serif\" font-size=\"14.00\">Series</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-626.2\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-609.4\" font-family=\"Times,serif\" font-size=\"14.00\">Cultural</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-592.6\" font-family=\"Times,serif\" font-size=\"14.00\">Events</text>\n</g>\n<!-- The\nFederation&#45;&gt;Series\nof\nCultural\nEvents -->\n<g id=\"edge176\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Series\nof\nCultural\nEvents</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.38,-1171.33C180.54,-1085.16 207.39,-755.05 262.63,-669 269.96,-657.58 281.15,-648.23 292.4,-640.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"293.99,-643.47 300.77,-635.33 290.39,-637.47 293.99,-643.47\"/>\n</g>\n<!-- Conversations\nAcross\nSpace -->\n<g id=\"node145\" class=\"node\">\n<title>Conversations\nAcross\nSpace</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1760.6\" font-family=\"Times,serif\" font-size=\"14.00\">Conversations</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1743.8\" font-family=\"Times,serif\" font-size=\"14.00\">Across</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1727\" font-family=\"Times,serif\" font-size=\"14.00\">Space</text>\n</g>\n<!-- The\nFederation&#45;&gt;Conversations\nAcross\nSpace -->\n<g id=\"edge177\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Conversations\nAcross\nSpace</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.19,-1212.62C179.6,-1298.54 203.87,-1627.48 262.63,-1710 266.29,-1715.13 270.86,-1719.64 275.9,-1723.6\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"273.53,-1726.91 283.74,-1729.73 277.52,-1721.16 273.53,-1726.91\"/>\n</g>\n<!-- Thematic\nconversations -->\n<g id=\"node146\" class=\"node\">\n<title>Thematic\nconversations</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1684.2\" font-family=\"Times,serif\" font-size=\"14.00\">Thematic</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1667.4\" font-family=\"Times,serif\" font-size=\"14.00\">conversations</text>\n</g>\n<!-- The\nFederation&#45;&gt;Thematic\nconversations -->\n<g id=\"edge178\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Thematic\nconversations</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.51,-1212.77C180.79,-1292.86 206.9,-1580.58 262.63,-1650 266.56,-1654.88 271.43,-1658.99 276.76,-1662.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"274.64,-1665.82 285.08,-1667.65 278.05,-1659.71 274.64,-1665.82\"/>\n</g>\n<!-- Decentralised\nArchive -->\n<g id=\"node147\" class=\"node\">\n<title>Decentralised\nArchive</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1624.2\" font-family=\"Times,serif\" font-size=\"14.00\">Decentralised</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1607.4\" font-family=\"Times,serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- The\nFederation&#45;&gt;Decentralised\nArchive -->\n<g id=\"edge179\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Decentralised\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.18,-1212.77C183.3,-1285.98 213.68,-1530.76 262.63,-1590 266.62,-1594.83 271.54,-1598.9 276.9,-1602.33\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"274.79,-1605.72 285.24,-1607.52 278.19,-1599.6 274.79,-1605.72\"/>\n</g>\n<!-- Podcasting\nCommunity -->\n<g id=\"node148\" class=\"node\">\n<title>Podcasting\nCommunity</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1564.2\" font-family=\"Times,serif\" font-size=\"14.00\">Podcasting</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1547.4\" font-family=\"Times,serif\" font-size=\"14.00\">Community</text>\n</g>\n<!-- The\nFederation&#45;&gt;Podcasting\nCommunity -->\n<g id=\"edge180\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Podcasting\nCommunity</title>\n<path fill=\"none\" stroke=\"black\" d=\"M172.5,-1212.79C172.27,-1270.57 179.39,-1435.18 262.63,-1531 267.78,-1536.92 274.34,-1541.66 281.35,-1545.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"279.57,-1548.96 290.11,-1550.05 282.56,-1542.62 279.57,-1548.96\"/>\n</g>\n<!-- Film\nand\nDocumentary\nResearch -->\n<g id=\"node149\" class=\"node\">\n<title>Film\nand\nDocumentary\nResearch</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1505\" font-family=\"Times,serif\" font-size=\"14.00\">Film</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1488.2\" font-family=\"Times,serif\" font-size=\"14.00\">and</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1471.4\" font-family=\"Times,serif\" font-size=\"14.00\">Documentary</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1454.6\" font-family=\"Times,serif\" font-size=\"14.00\">Research</text>\n</g>\n<!-- The\nFederation&#45;&gt;Film\nand\nDocumentary\nResearch -->\n<g id=\"edge181\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Film\nand\nDocumentary\nResearch</title>\n<path fill=\"none\" stroke=\"black\" d=\"M176.03,-1212.57C183.59,-1257.67 206.78,-1366.85 262.63,-1438 267.05,-1443.62 272.34,-1448.79 278.01,-1453.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"275.45,-1456.7 285.52,-1459.99 279.71,-1451.14 275.45,-1456.7\"/>\n</g>\n<!-- Future\nof\nthe\nFederation -->\n<g id=\"node150\" class=\"node\">\n<title>Future\nof\nthe\nFederation</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1412\" font-family=\"Times,serif\" font-size=\"14.00\">Future</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1395.2\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1378.4\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1361.6\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- The\nFederation&#45;&gt;Future\nof\nthe\nFederation -->\n<g id=\"edge182\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Future\nof\nthe\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M181.57,-1212.55C195.29,-1243.64 224.53,-1303.29 262.63,-1344 269.46,-1351.29 277.61,-1358.07 285.87,-1364.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.61,-1367.47 293.82,-1370.29 287.6,-1361.71 283.61,-1367.47\"/>\n</g>\n<!-- Visualising\nthe\nFederation -->\n<g id=\"node151\" class=\"node\">\n<title>Visualising\nthe\nFederation</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1318.6\" font-family=\"Times,serif\" font-size=\"14.00\">Visualising</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1301.8\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1285\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- The\nFederation&#45;&gt;Visualising\nthe\nFederation -->\n<g id=\"edge183\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Visualising\nthe\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M194.83,-1212.67C212.4,-1228.74 238.11,-1251.09 262.63,-1268 269.12,-1272.48 276.19,-1276.87 283.24,-1280.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"281.36,-1284.51 291.78,-1286.41 284.82,-1278.42 281.36,-1284.51\"/>\n</g>\n<!-- Graphing\nthe\nFederation -->\n<g id=\"node152\" class=\"node\">\n<title>Graphing\nthe\nFederation</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1242.6\" font-family=\"Times,serif\" font-size=\"14.00\">Graphing</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1225.8\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1209\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- The\nFederation&#45;&gt;Graphing\nthe\nFederation -->\n<g id=\"edge184\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Graphing\nthe\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M209.74,-1200.81C231.86,-1206.12 260.26,-1212.93 284.06,-1218.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.09,-1222.24 293.63,-1221.17 284.72,-1215.43 283.09,-1222.24\"/>\n</g>\n<!-- The\nPermanent\nFederation -->\n<g id=\"node153\" class=\"node\">\n<title>The\nPermanent\nFederation</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1166.6\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1149.8\" font-family=\"Times,serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1133\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- The\nFederation&#45;&gt;The\nPermanent\nFederation -->\n<g id=\"edge185\" class=\"edge\">\n<title>The\nFederation&#45;&gt;The\nPermanent\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M209.74,-1183.19C231.86,-1177.88 260.26,-1171.07 284.06,-1165.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.72,-1168.57 293.63,-1162.83 283.09,-1161.76 284.72,-1168.57\"/>\n</g>\n<!-- United\nFederation\nof\nPlanets -->\n<g id=\"node154\" class=\"node\">\n<title>United\nFederation\nof\nPlanets</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1090\" font-family=\"Times,serif\" font-size=\"14.00\">United</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1073.2\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1056.4\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-1039.6\" font-family=\"Times,serif\" font-size=\"14.00\">Planets</text>\n</g>\n<!-- The\nFederation&#45;&gt;United\nFederation\nof\nPlanets -->\n<g id=\"edge186\" class=\"edge\">\n<title>The\nFederation&#45;&gt;United\nFederation\nof\nPlanets</title>\n<path fill=\"none\" stroke=\"black\" d=\"M196.03,-1171.31C213.82,-1155.63 239.26,-1133.81 262.63,-1116 270.08,-1110.33 278.15,-1104.52 286.06,-1099.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"287.63,-1101.5 293.88,-1092.94 283.66,-1095.73 287.63,-1101.5\"/>\n</g>\n<!-- Federation\nWars -->\n<g id=\"node155\" class=\"node\">\n<title>Federation\nWars</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-997.2\" font-family=\"Times,serif\" font-size=\"14.00\">Federation</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-980.4\" font-family=\"Times,serif\" font-size=\"14.00\">Wars</text>\n</g>\n<!-- The\nFederation&#45;&gt;Federation\nWars -->\n<g id=\"edge187\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Federation\nWars</title>\n<path fill=\"none\" stroke=\"black\" d=\"M178.81,-1171.36C189.72,-1136.21 216.4,-1064.4 262.63,-1022 269.09,-1016.08 276.93,-1011.27 284.97,-1007.39\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"286.04,-1010.31 293.81,-1003.1 283.24,-1003.89 286.04,-1010.31\"/>\n</g>\n<!-- Federated\nGovernance -->\n<g id=\"node156\" class=\"node\">\n<title>Federated\nGovernance</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-937.2\" font-family=\"Times,serif\" font-size=\"14.00\">Federated</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-920.4\" font-family=\"Times,serif\" font-size=\"14.00\">Governance</text>\n</g>\n<!-- The\nFederation&#45;&gt;Federated\nGovernance -->\n<g id=\"edge188\" class=\"edge\">\n<title>The\nFederation&#45;&gt;Federated\nGovernance</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.67,-1171.44C182.43,-1127.58 204,-1023.9 262.63,-963 267.98,-957.45 274.53,-952.86 281.44,-949.09\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"282.54,-951.96 290,-944.43 279.48,-945.66 282.54,-951.96\"/>\n</g>\n<!-- Behaviour&#45;&gt;Interpreter -->\n<g id=\"edge190\" class=\"edge\">\n<title>Behaviour&#45;&gt;Interpreter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.5,-5531.81C391.01,-5537.08 418.58,-5543.82 441.79,-5549.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"440.91,-5553.13 451.45,-5552.1 442.57,-5546.33 440.91,-5553.13\"/>\n</g>\n<!-- Behaviors -->\n<g id=\"node157\" class=\"node\">\n<title>Behaviors</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-4954.8\" font-family=\"Times,serif\" font-size=\"14.00\">Behaviors</text>\n</g>\n<!-- Behaviour&#45;&gt;Behaviors -->\n<g id=\"edge189\" class=\"edge\">\n<title>Behaviour&#45;&gt;Behaviors</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.3,-5516.51C381.48,-5512.55 394.07,-5506.19 402.29,-5496 466.49,-5416.35 484.01,-5086.85 487.88,-4987.49\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"491.4,-4987.92 488.27,-4977.8 484.41,-4987.66 491.4,-4987.92\"/>\n</g>\n<!-- Logic -->\n<g id=\"node158\" class=\"node\">\n<title>Logic</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-4358.8\" font-family=\"Times,serif\" font-size=\"14.00\">Logic</text>\n</g>\n<!-- Behaviour&#45;&gt;Logic -->\n<g id=\"edge191\" class=\"edge\">\n<title>Behaviour&#45;&gt;Logic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.3,-5517.28C381.79,-5513.41 394.59,-5506.91 402.29,-5496 473.2,-5395.56 373.36,-4494.41 438.29,-4390 441.94,-4384.12 447.34,-4379.45 453.27,-4375.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"454.62,-4378.47 461.85,-4370.72 451.36,-4372.28 454.62,-4378.47\"/>\n</g>\n<!-- Equality -->\n<g id=\"node159\" class=\"node\">\n<title>Equality</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-4412.8\" font-family=\"Times,serif\" font-size=\"14.00\">Equality</text>\n</g>\n<!-- Behaviour&#45;&gt;Equality -->\n<g id=\"edge192\" class=\"edge\">\n<title>Behaviour&#45;&gt;Equality</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.29,-5517.27C381.78,-5513.4 394.58,-5506.9 402.29,-5496 469.83,-5400.51 376.44,-4543.27 438.29,-4444 441.07,-4439.54 444.86,-4435.77 449.11,-4432.59\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"450.68,-4435.12 457.35,-4426.89 447,-4429.17 450.68,-4435.12\"/>\n</g>\n<!-- Responsible\nBehaviour -->\n<g id=\"node160\" class=\"node\">\n<title>Responsible\nBehaviour</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5454.2\" font-family=\"Times,serif\" font-size=\"14.00\">Responsible</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5437.4\" font-family=\"Times,serif\" font-size=\"14.00\">Behaviour</text>\n</g>\n<!-- Behaviour&#45;&gt;Responsible\nBehaviour -->\n<g id=\"edge193\" class=\"edge\">\n<title>Behaviour&#45;&gt;Responsible\nBehaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.51,-5509.76C380.17,-5505.6 391.8,-5500.83 402.29,-5496 415.59,-5489.88 429.73,-5482.68 442.64,-5475.81\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"444.09,-5478.46 451.24,-5470.65 440.78,-5472.3 444.09,-5478.46\"/>\n</g>\n<!-- Eco&#45;Innovation -->\n<g id=\"node161\" class=\"node\">\n<title>Eco&#45;Innovation</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5502.8\" font-family=\"Times,serif\" font-size=\"14.00\">Eco&#45;Innovation</text>\n</g>\n<!-- Behaviour&#45;&gt;Eco&#45;Innovation -->\n<g id=\"edge194\" class=\"edge\">\n<title>Behaviour&#45;&gt;Eco&#45;Innovation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.5,-5519.29C386.82,-5517.51 408.06,-5515.32 427.8,-5513.29\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"427.99,-5516.68 437.58,-5512.18 427.27,-5509.72 427.99,-5516.68\"/>\n</g>\n<!-- Card&#45;&gt;Behaviors -->\n<g id=\"edge196\" class=\"edge\">\n<title>Card&#45;&gt;Behaviors</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.43,-4420.77C374.19,-4424.28 391.78,-4431.04 402.29,-4444 463.91,-4519.94 483.13,-4833.61 487.66,-4930.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"484.19,-4930.28 488.14,-4940.12 491.18,-4929.97 484.19,-4930.28\"/>\n</g>\n<!-- Cards -->\n<g id=\"node162\" class=\"node\">\n<title>Cards</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-4466.8\" font-family=\"Times,serif\" font-size=\"14.00\">Cards</text>\n</g>\n<!-- Card&#45;&gt;Cards -->\n<g id=\"edge195\" class=\"edge\">\n<title>Card&#45;&gt;Cards</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.12,-4425.92C384.68,-4434.8 424.15,-4448.52 452.84,-4458.49\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.28,-4462 461.88,-4461.98 453.58,-4455.39 451.28,-4462\"/>\n</g>\n<!-- Behavior&#45;&gt;Card -->\n<g id=\"edge206\" class=\"edge\">\n<title>Behavior&#45;&gt;Card</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.18,-4789.35C183.63,-4724.07 215.9,-4497.34 262.63,-4444 271.07,-4434.37 283.39,-4428.14 295.28,-4424.13\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.89,-4427.31 304.51,-4421.15 293.93,-4420.59 295.89,-4427.31\"/>\n</g>\n<!-- Behavior&#45;&gt;The\nBehavioural\nPoint\nof\nView -->\n<g id=\"edge200\" class=\"edge\">\n<title>Behavior&#45;&gt;The\nBehavioural\nPoint\nof\nView</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.56,-4824.86C189.5,-4921.02 255.34,-5373.42 262.63,-5386 267.65,-5394.65 274.59,-5402.47 282.14,-5409.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"279.61,-5412.6 289.52,-5416.36 284.12,-5407.24 279.61,-5412.6\"/>\n</g>\n<!-- State -->\n<g id=\"node163\" class=\"node\">\n<title>State</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4520.8\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n</g>\n<!-- Behavior&#45;&gt;State -->\n<g id=\"edge197\" class=\"edge\">\n<title>Behavior&#45;&gt;State</title>\n<path fill=\"none\" stroke=\"black\" d=\"M174.25,-4789.25C178.44,-4743.7 195.67,-4621.4 262.63,-4552 271.37,-4542.95 283.5,-4536.87 295.15,-4532.81\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.06,-4535.89 304.6,-4529.63 294.02,-4529.2 296.06,-4535.89\"/>\n</g>\n<!-- Class -->\n<g id=\"node164\" class=\"node\">\n<title>Class</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4466.8\" font-family=\"Times,serif\" font-size=\"14.00\">Class</text>\n</g>\n<!-- Behavior&#45;&gt;Class -->\n<g id=\"edge198\" class=\"edge\">\n<title>Behavior&#45;&gt;Class</title>\n<path fill=\"none\" stroke=\"black\" d=\"M172.96,-4789.05C173.89,-4737.07 183.57,-4584.65 262.63,-4498 271.27,-4488.54 283.63,-4482.35 295.49,-4478.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.09,-4481.5 304.69,-4475.31 294.11,-4474.79 296.09,-4481.5\"/>\n</g>\n<!-- Metaclass -->\n<g id=\"node165\" class=\"node\">\n<title>Metaclass</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5354.8\" font-family=\"Times,serif\" font-size=\"14.00\">Metaclass</text>\n</g>\n<!-- Behavior&#45;&gt;Metaclass -->\n<g id=\"edge199\" class=\"edge\">\n<title>Behavior&#45;&gt;Metaclass</title>\n<path fill=\"none\" stroke=\"black\" d=\"M175.53,-4824.9C188.39,-4914.6 246.07,-5311.65 262.63,-5332 268.82,-5339.6 277.42,-5345.06 286.47,-5348.99\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"285.16,-5352.61 295.75,-5352.81 287.59,-5346.05 285.16,-5352.61\"/>\n</g>\n<!-- The\nArt\nof\nthe\nInterpreter -->\n<g id=\"node166\" class=\"node\">\n<title>The\nArt\nof\nthe\nInterpreter</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5306.4\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5289.6\" font-family=\"Times,serif\" font-size=\"14.00\">Art</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5272.8\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5256\" font-family=\"Times,serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5239.2\" font-family=\"Times,serif\" font-size=\"14.00\">Interpreter</text>\n</g>\n<!-- Behavior&#45;&gt;The\nArt\nof\nthe\nInterpreter -->\n<g id=\"edge201\" class=\"edge\">\n<title>Behavior&#45;&gt;The\nArt\nof\nthe\nInterpreter</title>\n<path fill=\"none\" stroke=\"black\" d=\"M172.72,-4824.74C172.63,-4885.2 178.97,-5086.97 262.63,-5222 268.86,-5232.05 277.61,-5241.05 286.78,-5248.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.24,-5251.95 294.27,-5255.37 288.56,-5246.45 284.24,-5251.95\"/>\n</g>\n<!-- A\nPattern\nof\nPerception -->\n<g id=\"node167\" class=\"node\">\n<title>A\nPattern\nof\nPerception</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5196\" font-family=\"Times,serif\" font-size=\"14.00\">A</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5179.2\" font-family=\"Times,serif\" font-size=\"14.00\">Pattern</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5162.4\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5145.6\" font-family=\"Times,serif\" font-size=\"14.00\">Perception</text>\n</g>\n<!-- Behavior&#45;&gt;A\nPattern\nof\nPerception -->\n<g id=\"edge202\" class=\"edge\">\n<title>Behavior&#45;&gt;A\nPattern\nof\nPerception</title>\n<path fill=\"none\" stroke=\"black\" d=\"M173.77,-4824.8C176.86,-4876.51 191.83,-5029.25 262.63,-5128 268.77,-5136.55 276.97,-5144.04 285.57,-5150.38\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.38,-5153.8 293.61,-5156.56 287.34,-5148.02 283.38,-5153.8\"/>\n</g>\n<!-- A\nMentoring\nCourse\non\nSmalltalk -->\n<g id=\"node168\" class=\"node\">\n<title>A\nMentoring\nCourse\non\nSmalltalk</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5102.4\" font-family=\"Times,serif\" font-size=\"14.00\">A</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5085.6\" font-family=\"Times,serif\" font-size=\"14.00\">Mentoring</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5068.8\" font-family=\"Times,serif\" font-size=\"14.00\">Course</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5052\" font-family=\"Times,serif\" font-size=\"14.00\">on</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-5035.2\" font-family=\"Times,serif\" font-size=\"14.00\">Smalltalk</text>\n</g>\n<!-- Behavior&#45;&gt;A\nMentoring\nCourse\non\nSmalltalk -->\n<g id=\"edge203\" class=\"edge\">\n<title>Behavior&#45;&gt;A\nMentoring\nCourse\non\nSmalltalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M177.36,-4824.92C187.41,-4863.33 214.99,-4955.22 262.63,-5018 269.43,-5026.96 278,-5035.3 286.76,-5042.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.18,-5045.87 294.17,-5049.38 288.55,-5040.4 284.18,-5045.87\"/>\n</g>\n<!-- Trait\nComposition\nMechanism -->\n<g id=\"node169\" class=\"node\">\n<title>Trait\nComposition\nMechanism</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4992.6\" font-family=\"Times,serif\" font-size=\"14.00\">Trait</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4975.8\" font-family=\"Times,serif\" font-size=\"14.00\">Composition</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4959\" font-family=\"Times,serif\" font-size=\"14.00\">Mechanism</text>\n</g>\n<!-- Behavior&#45;&gt;Trait\nComposition\nMechanism -->\n<g id=\"edge204\" class=\"edge\">\n<title>Behavior&#45;&gt;Trait\nComposition\nMechanism</title>\n<path fill=\"none\" stroke=\"black\" d=\"M181.23,-4824.7C194.9,-4852.53 224.56,-4906.92 262.63,-4942 267.64,-4946.61 273.31,-4950.87 279.19,-4954.74\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"277.19,-4958.23 287.55,-4960.48 280.86,-4952.27 277.19,-4958.23\"/>\n</g>\n<!-- Croquet -->\n<g id=\"node170\" class=\"node\">\n<title>Croquet</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4910.8\" font-family=\"Times,serif\" font-size=\"14.00\">Croquet</text>\n</g>\n<!-- Behavior&#45;&gt;Croquet -->\n<g id=\"edge205\" class=\"edge\">\n<title>Behavior&#45;&gt;Croquet</title>\n<path fill=\"none\" stroke=\"black\" d=\"M188.99,-4824.84C205.86,-4842.77 233.92,-4870.22 262.63,-4888 271.71,-4893.62 282.14,-4898.43 292.1,-4902.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.64,-4905.94 301.23,-4906.16 293.09,-4899.38 290.64,-4905.94\"/>\n</g>\n<!-- interact -->\n<g id=\"node171\" class=\"node\">\n<title>interact</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4856.8\" font-family=\"Times,serif\" font-size=\"14.00\">interact</text>\n</g>\n<!-- Behavior&#45;&gt;interact -->\n<g id=\"edge207\" class=\"edge\">\n<title>Behavior&#45;&gt;interact</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.43,-4818.06C230.94,-4826.75 266.51,-4838.87 293.37,-4848.02\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.96,-4851.58 302.55,-4851.49 294.22,-4844.95 291.96,-4851.58\"/>\n</g>\n<!-- Computation -->\n<g id=\"node172\" class=\"node\">\n<title>Computation</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4802.8\" font-family=\"Times,serif\" font-size=\"14.00\">Computation</text>\n</g>\n<!-- Behavior&#45;&gt;Computation -->\n<g id=\"edge208\" class=\"edge\">\n<title>Behavior&#45;&gt;Computation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.43,-4807C226.09,-4807 253.35,-4807 277.23,-4807\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"276.93,-4810.5 286.93,-4807 276.93,-4803.5 276.93,-4810.5\"/>\n</g>\n<!-- replicate -->\n<g id=\"node173\" class=\"node\">\n<title>replicate</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4748.8\" font-family=\"Times,serif\" font-size=\"14.00\">replicate</text>\n</g>\n<!-- Behavior&#45;&gt;replicate -->\n<g id=\"edge209\" class=\"edge\">\n<title>Behavior&#45;&gt;replicate</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.43,-4795.94C229.98,-4787.58 263.85,-4776.04 290.3,-4767.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.06,-4770.12 299.4,-4763.58 288.81,-4763.5 291.06,-4770.12\"/>\n</g>\n<!-- Static\nContext -->\n<g id=\"node174\" class=\"node\">\n<title>Static\nContext</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4700.2\" font-family=\"Times,serif\" font-size=\"14.00\">Static</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4683.4\" font-family=\"Times,serif\" font-size=\"14.00\">Context</text>\n</g>\n<!-- Behavior&#45;&gt;Static\nContext -->\n<g id=\"edge210\" class=\"edge\">\n<title>Behavior&#45;&gt;Static\nContext</title>\n<path fill=\"none\" stroke=\"black\" d=\"M189.45,-4789.05C206.46,-4771.29 234.43,-4744.19 262.63,-4726 271.92,-4720.01 282.6,-4714.7 292.73,-4710.27\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"293.73,-4713.23 301.61,-4706.15 291.04,-4706.77 293.73,-4713.23\"/>\n</g>\n<!-- Worldcore -->\n<g id=\"node175\" class=\"node\">\n<title>Worldcore</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4634.8\" font-family=\"Times,serif\" font-size=\"14.00\">Worldcore</text>\n</g>\n<!-- Behavior&#45;&gt;Worldcore -->\n<g id=\"edge211\" class=\"edge\">\n<title>Behavior&#45;&gt;Worldcore</title>\n<path fill=\"none\" stroke=\"black\" d=\"M179.88,-4789.31C192.23,-4759.83 220.77,-4700.49 262.63,-4666 269.18,-4660.61 276.94,-4656.2 284.84,-4652.62\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"285.91,-4655.56 293.85,-4648.54 283.27,-4649.08 285.91,-4655.56\"/>\n</g>\n<!-- Behavior\nTrees -->\n<g id=\"node176\" class=\"node\">\n<title>Behavior\nTrees</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4586.2\" font-family=\"Times,serif\" font-size=\"14.00\">Behavior</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-4569.4\" font-family=\"Times,serif\" font-size=\"14.00\">Trees</text>\n</g>\n<!-- Behavior&#45;&gt;Behavior\nTrees -->\n<g id=\"edge212\" class=\"edge\">\n<title>Behavior&#45;&gt;Behavior\nTrees</title>\n<path fill=\"none\" stroke=\"black\" d=\"M176.65,-4789.18C185.26,-4751.61 210.08,-4663.52 262.63,-4612 270.1,-4604.69 279.63,-4599.01 289.21,-4594.67\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"290.2,-4597.63 298.13,-4590.61 287.55,-4591.16 290.2,-4597.63\"/>\n</g>\n<!-- Object&#45;&gt;Iconic\nArithmetic -->\n<g id=\"edge217\" class=\"edge\">\n<title>Object&#45;&gt;Iconic\nArithmetic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M620.51,-5624.91C630.46,-5683.62 663.12,-5875.52 691.59,-6034 707.31,-6121.46 726.7,-6224.57 736.25,-6275.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"732.94,-6275.37 738.24,-6284.54 739.82,-6274.07 732.94,-6275.37\"/>\n</g>\n<!-- Object&#45;&gt;Inside -->\n<g id=\"edge216\" class=\"edge\">\n<title>Object&#45;&gt;Inside</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.04,-5609.09C688.77,-5612.83 784.73,-5620.68 837.5,-5625\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"837.13,-5628.56 847.38,-5625.89 837.7,-5621.58 837.13,-5628.56\"/>\n</g>\n<!-- Object&#45;&gt;Outside -->\n<g id=\"edge214\" class=\"edge\">\n<title>Object&#45;&gt;Outside</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.04,-5603.72C688.03,-5597.93 781.66,-5585.9 834.93,-5579.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"835.18,-5582.42 844.65,-5577.67 834.28,-5575.48 835.18,-5582.42\"/>\n</g>\n<!-- Container -->\n<g id=\"node177\" class=\"node\">\n<title>Container</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5545.8\" font-family=\"Times,serif\" font-size=\"14.00\">Container</text>\n</g>\n<!-- Object&#45;&gt;Container -->\n<g id=\"edge213\" class=\"edge\">\n<title>Object&#45;&gt;Container</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.31,-5595.19C659.07,-5587.98 679.65,-5578.57 697.94,-5570.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"699.18,-5573.03 706.82,-5565.69 696.27,-5566.67 699.18,-5573.03\"/>\n</g>\n<!-- Process -->\n<g id=\"node178\" class=\"node\">\n<title>Process</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5491.8\" font-family=\"Times,serif\" font-size=\"14.00\">Process</text>\n</g>\n<!-- Object&#45;&gt;Process -->\n<g id=\"edge215\" class=\"edge\">\n<title>Object&#45;&gt;Process</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.22,-5590.88C647.59,-5587.56 651.91,-5583.88 655.59,-5580 676.21,-5558.26 669.65,-5543.4 691.59,-5523 695.44,-5519.42 699.86,-5516.17 704.44,-5513.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"706.03,-5515.81 712.95,-5507.78 702.53,-5509.74 706.03,-5515.81\"/>\n</g>\n<!-- Life&#45;like\nSystems -->\n<g id=\"node179\" class=\"node\">\n<title>Life&#45;like\nSystems</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5443.2\" font-family=\"Times,serif\" font-size=\"14.00\">Life&#45;like</text>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5426.4\" font-family=\"Times,serif\" font-size=\"14.00\">Systems</text>\n</g>\n<!-- Object&#45;&gt;Life&#45;like\nSystems -->\n<g id=\"edge218\" class=\"edge\">\n<title>Object&#45;&gt;Life&#45;like\nSystems</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.28,-5592.19C647.86,-5588.66 652.23,-5584.57 655.59,-5580 686.32,-5538.22 659.21,-5509.51 691.59,-5469 694.58,-5465.27 698.16,-5461.9 702.02,-5458.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"703.55,-5461.39 709.8,-5452.84 699.58,-5455.62 703.55,-5461.39\"/>\n</g>\n<!-- Living\nSystems -->\n<g id=\"node180\" class=\"node\">\n<title>Living\nSystems</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5383.2\" font-family=\"Times,serif\" font-size=\"14.00\">Living</text>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5366.4\" font-family=\"Times,serif\" font-size=\"14.00\">Systems</text>\n</g>\n<!-- Object&#45;&gt;Living\nSystems -->\n<g id=\"edge219\" class=\"edge\">\n<title>Object&#45;&gt;Living\nSystems</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.28,-5592.77C647.97,-5589.15 652.39,-5584.88 655.59,-5580 698.22,-5515.08 646.39,-5472.15 691.59,-5409 694.66,-5404.71 698.55,-5400.94 702.8,-5397.64\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"704.55,-5400.01 710.89,-5391.52 700.64,-5394.2 704.55,-5400.01\"/>\n</g>\n<!-- Hyperlink\nin\nObject -->\n<g id=\"node181\" class=\"node\">\n<title>Hyperlink\nin\nObject</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5757.6\" font-family=\"Times,serif\" font-size=\"14.00\">Hyperlink</text>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5740.8\" font-family=\"Times,serif\" font-size=\"14.00\">in</text>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5724\" font-family=\"Times,serif\" font-size=\"14.00\">Object</text>\n</g>\n<!-- Object&#45;&gt;Hyperlink\nin\nObject -->\n<g id=\"edge220\" class=\"edge\">\n<title>Object&#45;&gt;Hyperlink\nin\nObject</title>\n<path fill=\"none\" stroke=\"black\" d=\"M634.03,-5624.93C640.96,-5632.73 648.93,-5642.1 655.59,-5651 673.32,-5674.69 671.45,-5685.32 691.59,-5707 693.87,-5709.45 696.33,-5711.86 698.88,-5714.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"695.9,-5717.12 705.77,-5720.98 700.47,-5711.81 695.9,-5717.12\"/>\n</g>\n<!-- Verb -->\n<g id=\"node182\" class=\"node\">\n<title>Verb</title>\n<text text-anchor=\"middle\" x=\"743.13\" y=\"-5675.8\" font-family=\"Times,serif\" font-size=\"14.00\">Verb</text>\n</g>\n<!-- Object&#45;&gt;Verb -->\n<g id=\"edge221\" class=\"edge\">\n<title>Object&#45;&gt;Verb</title>\n<path fill=\"none\" stroke=\"black\" d=\"M643.31,-5622.13C661.78,-5632.94 686.85,-5647.62 707.11,-5659.49\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"704.94,-5662.86 715.33,-5664.89 708.47,-5656.82 704.94,-5662.86\"/>\n</g>\n<!-- Something&#45;&gt;Something -->\n<g id=\"edge225\" class=\"edge\">\n<title>Something&#45;&gt;Something</title>\n<path fill=\"none\" stroke=\"black\" d=\"M148.37,-6752.78C144.36,-6762.31 152.23,-6771 171.98,-6771 183.71,-6771 191.24,-6767.94 194.59,-6763.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"198.14,-6764.06 195.59,-6753.78 191.17,-6763.41 198.14,-6764.06\"/>\n</g>\n<!-- Something&#45;&gt;Distinction -->\n<g id=\"edge229\" class=\"edge\">\n<title>Something&#45;&gt;Distinction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M209.95,-6737.84C289.63,-6743.96 477.54,-6758.4 566.79,-6765.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"566.45,-6768.82 576.68,-6766.1 566.98,-6761.84 566.45,-6768.82\"/>\n</g>\n<!-- Void -->\n<g id=\"node183\" class=\"node\">\n<title>Void</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6909.8\" font-family=\"Times,serif\" font-size=\"14.00\">Void</text>\n</g>\n<!-- Something&#45;&gt;Void -->\n<g id=\"edge222\" class=\"edge\">\n<title>Something&#45;&gt;Void</title>\n<path fill=\"none\" stroke=\"black\" d=\"M178.95,-6752.57C190.41,-6783.8 218.33,-6849.24 262.63,-6887 272.06,-6895.03 284.15,-6900.85 295.57,-6904.97\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"294.17,-6908.52 304.76,-6908.3 296.34,-6901.87 294.17,-6908.52\"/>\n</g>\n<!-- Reference -->\n<g id=\"node184\" class=\"node\">\n<title>Reference</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6855.8\" font-family=\"Times,serif\" font-size=\"14.00\">Reference</text>\n</g>\n<!-- Something&#45;&gt;Reference -->\n<g id=\"edge223\" class=\"edge\">\n<title>Something&#45;&gt;Reference</title>\n<path fill=\"none\" stroke=\"black\" d=\"M185.32,-6752.85C201.05,-6774.45 230.13,-6810.68 262.63,-6833 269.86,-6837.96 278.12,-6842.19 286.35,-6845.74\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.73,-6849.26 295.32,-6849.72 287.33,-6842.76 284.73,-6849.26\"/>\n</g>\n<!-- Communication -->\n<g id=\"node185\" class=\"node\">\n<title>Communication</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6801.8\" font-family=\"Times,serif\" font-size=\"14.00\">Communication</text>\n</g>\n<!-- Something&#45;&gt;Communication -->\n<g id=\"edge224\" class=\"edge\">\n<title>Something&#45;&gt;Communication</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.14,-6751.65C231.42,-6761.18 258.4,-6773.27 281.51,-6783.62\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"279.93,-6787.2 290.49,-6788.09 282.79,-6780.81 279.93,-6787.2\"/>\n</g>\n<!-- Internal\nLink -->\n<g id=\"node186\" class=\"node\">\n<title>Internal\nLink</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6715.2\" font-family=\"Times,serif\" font-size=\"14.00\">Internal</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6698.4\" font-family=\"Times,serif\" font-size=\"14.00\">Link</text>\n</g>\n<!-- Something&#45;&gt;Internal\nLink -->\n<g id=\"edge226\" class=\"edge\">\n<title>Something&#45;&gt;Internal\nLink</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.14,-6729.37C234.76,-6725.64 267.03,-6720.76 292.09,-6716.96\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"292.34,-6720.31 301.7,-6715.36 291.29,-6713.39 292.34,-6720.31\"/>\n</g>\n<g id=\"node187\" class=\"node\">\n<title></title>\n</g>\n<!-- Something&#45;&gt; -->\n<g id=\"edge227\" class=\"edge\">\n<title>Something&#45;&gt;</title>\n<path fill=\"none\" stroke=\"black\" d=\"M199.78,-6717.23C217.25,-6706.06 240.8,-6691.77 262.63,-6681 273,-6675.89 284.58,-6671.04 295.24,-6666.89\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.41,-6669.81 304.52,-6663 293.93,-6663.27 296.41,-6669.81\"/>\n</g>\n<!-- QWAN -->\n<g id=\"node188\" class=\"node\">\n<title>QWAN</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6595.8\" font-family=\"Times,serif\" font-size=\"14.00\">QWAN</text>\n</g>\n<!-- Something&#45;&gt;QWAN -->\n<g id=\"edge228\" class=\"edge\">\n<title>Something&#45;&gt;QWAN</title>\n<path fill=\"none\" stroke=\"black\" d=\"M183.59,-6717.31C198.53,-6693.75 227.88,-6652.13 262.63,-6627 271.61,-6620.51 282.35,-6615.33 292.64,-6611.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"293.49,-6614.37 301.71,-6607.68 291.12,-6607.78 293.49,-6614.37\"/>\n</g>\n<!-- Laws\nOf\nForm -->\n<g id=\"node189\" class=\"node\">\n<title>Laws\nOf\nForm</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6547.6\" font-family=\"Times,serif\" font-size=\"14.00\">Laws</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6530.8\" font-family=\"Times,serif\" font-size=\"14.00\">Of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6514\" font-family=\"Times,serif\" font-size=\"14.00\">Form</text>\n</g>\n<!-- Something&#45;&gt;Laws\nOf\nForm -->\n<g id=\"edge230\" class=\"edge\">\n<title>Something&#45;&gt;Laws\nOf\nForm</title>\n<path fill=\"none\" stroke=\"black\" d=\"M179.08,-6717.11C190.82,-6684.85 219.31,-6616.28 262.63,-6573 272.05,-6563.6 284.27,-6555.85 295.79,-6549.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"297.2,-6552.57 304.65,-6545.04 294.13,-6546.28 297.2,-6552.57\"/>\n</g>\n<!-- Laws\nof\nForm\nand\nObject\nOriented\nProgramming -->\n<g id=\"node190\" class=\"node\">\n<title>Laws\nof\nForm\nand\nObject\nOriented\nProgramming</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7059.2\" font-family=\"Times,serif\" font-size=\"14.00\">Laws</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7042.4\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7025.6\" font-family=\"Times,serif\" font-size=\"14.00\">Form</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-7008.8\" font-family=\"Times,serif\" font-size=\"14.00\">and</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6992\" font-family=\"Times,serif\" font-size=\"14.00\">Object</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6975.2\" font-family=\"Times,serif\" font-size=\"14.00\">Oriented</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-6958.4\" font-family=\"Times,serif\" font-size=\"14.00\">Programming</text>\n</g>\n<!-- Something&#45;&gt;Laws\nof\nForm\nand\nObject\nOriented\nProgramming -->\n<g id=\"edge231\" class=\"edge\">\n<title>Something&#45;&gt;Laws\nof\nForm\nand\nObject\nOriented\nProgramming</title>\n<path fill=\"none\" stroke=\"black\" d=\"M178.38,-6752.87C190.09,-6789.96 220.2,-6877.17 262.63,-6941 267.52,-6948.35 273.19,-6955.63 279.14,-6962.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"275.97,-6964.4 285.23,-6969.56 281.21,-6959.76 275.97,-6964.4\"/>\n</g>\n<!-- The\nPedestrian\nCrossing\nas\nSocial\nGift -->\n<g id=\"node191\" class=\"node\">\n<title>The\nPedestrian\nCrossing\nas\nSocial\nGift</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-549.8\" font-family=\"Times,serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-533\" font-family=\"Times,serif\" font-size=\"14.00\">Pedestrian</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-516.2\" font-family=\"Times,serif\" font-size=\"14.00\">Crossing</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-499.4\" font-family=\"Times,serif\" font-size=\"14.00\">as</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-482.6\" font-family=\"Times,serif\" font-size=\"14.00\">Social</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-465.8\" font-family=\"Times,serif\" font-size=\"14.00\">Gift</text>\n</g>\n<!-- negotiate&#45;&gt;The\nPedestrian\nCrossing\nas\nSocial\nGift -->\n<g id=\"edge232\" class=\"edge\">\n<title>negotiate&#45;&gt;The\nPedestrian\nCrossing\nas\nSocial\nGift</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.43,-542.22C228.33,-536.73 259.36,-529.29 284.89,-523.17\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"285.55,-526.37 294.46,-520.63 283.92,-519.56 285.55,-526.37\"/>\n</g>\n<!-- cross -->\n<g id=\"node192\" class=\"node\">\n<title>cross</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-417.8\" font-family=\"Times,serif\" font-size=\"14.00\">cross</text>\n</g>\n<!-- negotiate&#45;&gt;cross -->\n<g id=\"edge233\" class=\"edge\">\n<title>negotiate&#45;&gt;cross</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205.6,-537.83C213.15,-533.92 220.7,-529.01 226.63,-523 252.32,-496.96 235.77,-473.82 262.63,-449 271.8,-440.53 283.93,-434.6 295.46,-430.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.29,-433.59 304.77,-427.23 294.18,-426.92 296.29,-433.59\"/>\n</g>\n<!-- Telegram&#45;&gt;Telegram -->\n<g id=\"edge234\" class=\"edge\">\n<title>Telegram&#45;&gt;Telegram</title>\n<path fill=\"none\" stroke=\"black\" d=\"M148.37,-495.78C144.36,-505.31 152.23,-514 171.98,-514 183.71,-514 191.24,-510.94 194.59,-506.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"198.14,-507.06 195.59,-496.78 191.17,-506.41 198.14,-507.06\"/>\n</g>\n<!-- Telegram&#45;&gt;Ambassador -->\n<g id=\"edge235\" class=\"edge\">\n<title>Telegram&#45;&gt;Ambassador</title>\n<path fill=\"none\" stroke=\"black\" d=\"M196.13,-460.09C206.56,-453.93 218.35,-446.47 226.63,-437 253.39,-406.44 237.29,-384.74 262.63,-353 267.95,-346.35 274.36,-340.15 281.1,-334.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"282.92,-336.91 288.77,-328.07 278.69,-331.33 282.92,-336.91\"/>\n</g>\n<!-- Negotiation\nof\nMeaning -->\n<g id=\"node193\" class=\"node\">\n<title>Negotiation\nof\nMeaning</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-356.6\" font-family=\"Times,serif\" font-size=\"14.00\">Negotiation</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-339.8\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-323\" font-family=\"Times,serif\" font-size=\"14.00\">Meaning</text>\n</g>\n<!-- Telegram&#45;&gt;Negotiation\nof\nMeaning -->\n<g id=\"edge236\" class=\"edge\">\n<title>Telegram&#45;&gt;Negotiation\nof\nMeaning</title>\n<path fill=\"none\" stroke=\"black\" d=\"M206.57,-460.92C213.59,-456.56 220.67,-451.53 226.63,-446 246.99,-427.15 239.56,-410.41 262.63,-395 277.16,-385.3 375.98,-365.3 438.11,-353.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"438.7,-356.7 447.87,-351.39 437.39,-349.82 438.7,-356.7\"/>\n</g>\n<!-- Ambassador&#45;&gt;Telegram -->\n<g id=\"edge237\" class=\"edge\">\n<title>Ambassador&#45;&gt;Telegram</title>\n<path fill=\"none\" stroke=\"black\" d=\"M311.4,-329.97C296.3,-340.45 276,-354.26 262.63,-371 237.29,-402.74 253.39,-424.44 226.63,-455 223.41,-458.68 219.66,-462.06 215.67,-465.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"214.03,-462.63 207.65,-471.08 217.91,-468.45 214.03,-462.63\"/>\n</g>\n<!-- Ambassador&#45;&gt;Ambassador -->\n<g id=\"edge238\" class=\"edge\">\n<title>Ambassador&#45;&gt;Ambassador</title>\n<path fill=\"none\" stroke=\"black\" d=\"M304.17,-329.78C299.37,-339.31 308.8,-348 332.46,-348 346.51,-348 355.55,-344.94 359.56,-340.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"363.12,-341.11 360.75,-330.78 356.16,-340.33 363.12,-341.11\"/>\n</g>\n<!-- Ambassador&#45;&gt;Negotiation\nof\nMeaning -->\n<g id=\"edge239\" class=\"edge\">\n<title>Ambassador&#45;&gt;Negotiation\nof\nMeaning</title>\n<path fill=\"none\" stroke=\"black\" d=\"M375.1,-320.58C394.53,-324.58 417.82,-329.37 438.26,-333.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"437.46,-337.2 447.96,-335.79 438.87,-330.34 437.46,-337.2\"/>\n</g>\n<!-- General\nGame\nPlaying&#45;&gt;Michael\nGenesereth -->\n<g id=\"edge240\" class=\"edge\">\n<title>General\nGame\nPlaying&#45;&gt;Michael\nGenesereth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M201.99,-319.04C219.32,-308.6 241.92,-295.48 262.63,-285 269.35,-281.6 276.54,-278.21 283.65,-275\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.52,-278 292.23,-270.74 281.67,-271.6 284.52,-278\"/>\n</g>\n<!-- Strongtalk&#45;&gt;Strongtalk -->\n<g id=\"edge241\" class=\"edge\">\n<title>Strongtalk&#45;&gt;Strongtalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M148.37,-271.78C144.36,-281.31 152.23,-290 171.98,-290 183.71,-290 191.24,-286.94 194.59,-282.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"198.14,-283.06 195.59,-272.78 191.17,-282.41 198.14,-283.06\"/>\n</g>\n<!-- Smalltalk&#45;80 -->\n<g id=\"node194\" class=\"node\">\n<title>Smalltalk&#45;80</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-193.8\" font-family=\"Times,serif\" font-size=\"14.00\">Smalltalk&#45;80</text>\n</g>\n<!-- Strongtalk&#45;&gt;Smalltalk&#45;80 -->\n<g id=\"edge242\" class=\"edge\">\n<title>Strongtalk&#45;&gt;Smalltalk&#45;80</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.94,-241.29C229.37,-234.07 255.35,-224.9 278.11,-216.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"279.05,-219.88 287.32,-213.25 276.72,-213.28 279.05,-219.88\"/>\n</g>\n<!-- Name&#45;&gt;Event -->\n<g id=\"edge243\" class=\"edge\">\n<title>Name&#45;&gt;Event</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.3,-5965C380.25,-5974.39 410.72,-5987.28 438.29,-5996 477.01,-6008.25 767.47,-6046.84 794.66,-6077 884,-6176.08 758.9,-6262.54 830.66,-6375 833.02,-6378.69 836.08,-6381.96 839.48,-6384.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"837.27,-6388.26 847.46,-6391.18 841.31,-6382.55 837.27,-6388.26\"/>\n</g>\n<!-- Name&#45;&gt;Distinction -->\n<g id=\"edge244\" class=\"edge\">\n<title>Name&#45;&gt;Distinction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.14,-5969.61C374.59,-5981.15 393.01,-5998.02 402.29,-6018 463.03,-6148.81 362.92,-6543.04 438.29,-6666 466.92,-6712.71 525.2,-6740.49 567.11,-6755.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"565.79,-6758.8 576.38,-6758.68 568.03,-6752.17 565.79,-6758.8\"/>\n</g>\n<!-- It’s\nAll\nin\na\nName -->\n<g id=\"node195\" class=\"node\">\n<title>It’s\nAll\nin\na\nName</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5970.4\" font-family=\"Times,serif\" font-size=\"14.00\">It’s</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5953.6\" font-family=\"Times,serif\" font-size=\"14.00\">All</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5936.8\" font-family=\"Times,serif\" font-size=\"14.00\">in</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5920\" font-family=\"Times,serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5903.2\" font-family=\"Times,serif\" font-size=\"14.00\">Name</text>\n</g>\n<!-- Name&#45;&gt;It’s\nAll\nin\na\nName -->\n<g id=\"edge245\" class=\"edge\">\n<title>Name&#45;&gt;It’s\nAll\nin\na\nName</title>\n<path fill=\"none\" stroke=\"black\" d=\"M359.12,-5951.02C384.46,-5949.06 423.46,-5946.05 452.08,-5943.84\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.18,-5947.26 461.88,-5943 451.64,-5940.29 452.18,-5947.26\"/>\n</g>\n<!-- Objects\nas\nBehaviour&#45;&gt;Quildreen\nMotta -->\n<g id=\"edge249\" class=\"edge\">\n<title>Objects\nas\nBehaviour&#45;&gt;Quildreen\nMotta</title>\n<path fill=\"none\" stroke=\"black\" d=\"M295.39,-5865.3C272.4,-5859.79 242.43,-5851.22 217.9,-5843.19\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"219.35,-5839.65 208.76,-5839.79 217.13,-5846.29 219.35,-5839.65\"/>\n</g>\n<!-- Objects\nas\nBehaviour&#45;&gt;Structure -->\n<g id=\"edge246\" class=\"edge\">\n<title>Objects\nas\nBehaviour&#45;&gt;Structure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.32,-5852.39C380.8,-5845.56 392.95,-5836.97 402.29,-5827 425.4,-5802.33 409.28,-5777.35 438.29,-5760 477.61,-5736.49 500,-5740.31 541.37,-5760 638.44,-5806.19 703.91,-5924.81 729.75,-5979.11\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"727,-5980.48 734.39,-5988.07 733.34,-5977.53 727,-5980.48\"/>\n</g>\n<!-- Objects\nas\nBehaviour&#45;&gt;Objects\nas\nBehaviour -->\n<g id=\"edge248\" class=\"edge\">\n<title>Objects\nas\nBehaviour&#45;&gt;Objects\nas\nBehaviour</title>\n<path fill=\"none\" stroke=\"black\" d=\"M302.96,-5899.04C302.65,-5909.09 312.48,-5917.2 332.46,-5917.2 344.95,-5917.2 353.47,-5914.03 358.03,-5909.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"361.62,-5910.63 361.96,-5900.04 355.09,-5908.1 361.62,-5910.63\"/>\n</g>\n<!-- Objects\nas\nPlain\nRecords\nof\nData -->\n<g id=\"node196\" class=\"node\">\n<title>Objects\nas\nPlain\nRecords\nof\nData</title>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5860.8\" font-family=\"Times,serif\" font-size=\"14.00\">Objects</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5844\" font-family=\"Times,serif\" font-size=\"14.00\">as</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5827.2\" font-family=\"Times,serif\" font-size=\"14.00\">Plain</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5810.4\" font-family=\"Times,serif\" font-size=\"14.00\">Records</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5793.6\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"489.83\" y=\"-5776.8\" font-family=\"Times,serif\" font-size=\"14.00\">Data</text>\n</g>\n<!-- Objects\nas\nBehaviour&#45;&gt;Objects\nas\nPlain\nRecords\nof\nData -->\n<g id=\"edge247\" class=\"edge\">\n<title>Objects\nas\nBehaviour&#45;&gt;Objects\nas\nPlain\nRecords\nof\nData</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.5,-5859.1C393.16,-5851.94 424.14,-5842.57 448.6,-5835.17\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"449.43,-5838.27 457.99,-5832.03 447.4,-5831.57 449.43,-5838.27\"/>\n</g>\n<!-- Extensionality&#45;&gt;Logic -->\n<g id=\"edge250\" class=\"edge\">\n<title>Extensionality&#45;&gt;Logic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M380.5,-4363C403.52,-4363 430.8,-4363 452.24,-4363\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.16,-4366.5 462.16,-4363 452.16,-4359.5 452.16,-4366.5\"/>\n</g>\n<!-- Extensionality&#45;&gt;Equality -->\n<g id=\"edge251\" class=\"edge\">\n<title>Extensionality&#45;&gt;Equality</title>\n<path fill=\"none\" stroke=\"black\" d=\"M380.5,-4379.35C401.95,-4386.8 427.11,-4395.55 447.78,-4402.73\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"446.54,-4406.35 457.14,-4406.33 448.84,-4399.74 446.54,-4406.35\"/>\n</g>\n<!-- Attribution\n(Zurechnung) -->\n<g id=\"node197\" class=\"node\">\n<title>Attribution\n(Zurechnung)</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-79.2\" font-family=\"Times,serif\" font-size=\"14.00\">Attribution</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-62.4\" font-family=\"Times,serif\" font-size=\"14.00\">(Zurechnung)</text>\n</g>\n<!-- Attribution&#45;&gt;Attribution\n(Zurechnung) -->\n<g id=\"edge252\" class=\"edge\">\n<title>Attribution&#45;&gt;Attribution\n(Zurechnung)</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.94,-53.71C230.29,-57.13 254.2,-61.35 275.6,-65.13\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"274.75,-68.71 285.2,-67 275.96,-61.82 274.75,-68.71\"/>\n</g>\n<!-- Attributionsforschung -->\n<g id=\"node198\" class=\"node\">\n<title>Attributionsforschung</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\">Attributionsforschung</text>\n</g>\n<!-- Attribution&#45;&gt;Attributionsforschung -->\n<g id=\"edge253\" class=\"edge\">\n<title>Attribution&#45;&gt;Attributionsforschung</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.94,-40.05C223.47,-37.76 237.9,-35.12 252.34,-32.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"252.61,-35.8 261.82,-30.56 251.35,-28.92 252.61,-35.8\"/>\n</g>\n<!-- Contents\nIs\nIntention\nObscuring&#45;&gt;Intention -->\n<g id=\"edge254\" class=\"edge\">\n<title>Contents\nIs\nIntention\nObscuring&#45;&gt;Intention</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.94,-3218.28C232.54,-3216.49 263.53,-3214.14 288.44,-3212.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"288.7,-3215.67 298.41,-3211.43 288.17,-3208.69 288.7,-3215.67\"/>\n</g>\n<!-- Laws\nof\nForm\nObjects -->\n<g id=\"node199\" class=\"node\">\n<title>Laws\nof\nForm\nObjects</title>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3156\" font-family=\"Times,serif\" font-size=\"14.00\">Laws</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3139.2\" font-family=\"Times,serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3122.4\" font-family=\"Times,serif\" font-size=\"14.00\">Form</text>\n<text text-anchor=\"middle\" x=\"332.46\" y=\"-3105.6\" font-family=\"Times,serif\" font-size=\"14.00\">Objects</text>\n</g>\n<!-- Contents\nIs\nIntention\nObscuring&#45;&gt;Laws\nof\nForm\nObjects -->\n<g id=\"edge255\" class=\"edge\">\n<title>Contents\nIs\nIntention\nObscuring&#45;&gt;Laws\nof\nForm\nObjects</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.94,-3201.49C234.29,-3187.73 268.16,-3169.35 293.86,-3155.4\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"295.16,-3158.14 302.28,-3150.29 291.82,-3151.99 295.16,-3158.14\"/>\n</g>\n</g>\n</svg>\n"
    },
    {
      "type": "reference",
      "id": "2539b58d08cc3a99",
      "site": "wiki.ralfbarkow.ch",
      "slug": "the-behavioural-point-of-view",
      "title": "The Behavioural Point of View",
      "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]], [[Quildreen Motta]] et al.)"
    },
    {
      "type": "markdown",
      "id": "119e9c0883c3e602",
      "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see objects as plain records of data**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), […]"
    },
    {
      "type": "reference",
      "id": "d62ef64cc402cc99",
      "site": "wiki.ralfbarkow.ch",
      "slug": "unique-item-identifiers",
      "title": "Unique Item Identifiers",
      "text": "Wiki tries to mark every [[Item]] created with a unique identifier. We can think of each item in [[The Federation]] as a database record, and we can refer to it with this unique ID however it might move through the federation, and whatever its contents."
    },
    {
      "type": "markdown",
      "id": "939940910a95498c",
      "text": "> but it doesn’t work **if you see objects as [[Behaviour]]**."
    },
    {
      "type": "reference",
      "id": "34c346ab600ee576",
      "site": "wiki.ralfbarkow.ch",
      "slug": "behaviors",
      "title": "Behaviors",
      "text": "These define how the [[Card]] acts when a user or another card interacts with it. [[Behavior]]s computation is replicated on all user systems, providing a perfect, bit-identical shared experience. [https://www.croquet.io/microverse-ide/ croquet]"
    },
    {
      "type": "markdown",
      "id": "ec2d82b0d3ace017",
      "text": "# Is there [[Static Typing]] for a Smalltalk derivative?"
    },
    {
      "type": "paragraph",
      "id": "f322f7f836e53eb6",
      "text": "[[Alan Kay]], [[Quildreen Motta]] et al. via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
    },
    {
      "type": "paragraph",
      "id": "41f5317aef39a03f",
      "text": "[[Alan Kay]]: Besides looking at the past, we should look to the present and the future."
    },
    {
      "type": "paragraph",
      "id": "ab9254fcd69fd2aa",
      "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.)."
    },
    {
      "type": "paragraph",
      "id": "bdb01a0943055321",
      "text": "An object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “[[Something]]” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services."
    },
    {
      "type": "paragraph",
      "id": "aa5df413d00700d3",
      "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado."
    },
    {
      "type": "video",
      "id": "ba2fc3eafab5e292",
      "text": "YOUTUBE AnrlSqtpOkw\nTribute to Ted Nelson at Intertwingled Festival by Alan Kay, Bonnie MacBird"
    },
    {
      "type": "paragraph",
      "id": "fdfc4988d950b88d",
      "text": "Let me start the discussion with readers, here, with three points."
    },
    {
      "type": "markdown",
      "id": "9bc3702b5cb190e9",
      "text": "• **First** we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource."
    },
    {
      "type": "markdown",
      "id": "a8c562d6e5ec0551",
      "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages."
    },
    {
      "type": "markdown",
      "id": "e7fa159d4146488d",
      "text": "We can now imagine that to bind to a resource, our object (and object system) will be able to [[negotiate]] actively with the environment of the object to get interior views of exterior resources."
    },
    {
      "type": "markdown",
      "id": "e9e4e669f11bd271",
      "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “[[Telegram]]”, but has the potential of being a full-fledged [[Ambassador]], so that it can likewise take part in real negotiation of meaning at the receiving end."
    },
    {
      "type": "markdown",
      "id": "357cf905780a950f",
      "text": "• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
    },
    {
      "type": "paragraph",
      "id": "7e3bbdd5c2ad3bdf",
      "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing."
    },
    {
      "type": "paragraph",
      "id": "7d7c0360a7068f0b",
      "text": "[[General Game Playing]] [http://ggp.stanford.edu/ site] of [[Michael Genesereth]] at Stanford."
    },
    {
      "type": "paragraph",
      "id": "f8b2b8e3bfc3856d",
      "text": "But consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
    },
    {
      "type": "pagefold",
      "id": "4428c1a77bd206c5",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "9555d42403421e9b",
      "text": "[[Quildreen Motta]]: Other people have already mentioned [[Strongtalk]], and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now."
    },
    {
      "type": "paragraph",
      "id": "8c4354e2ce43ed99",
      "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important."
    },
    {
      "type": "paragraph",
      "id": "2b1bc89d5894a606",
      "text": "Anyway, if we look at the practicality of a type system, we have to consider:"
    },
    {
      "type": "markdown",
      "id": "aa24c609049a7b07",
      "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
    },
    {
      "type": "paragraph",
      "id": "ad74e462298d43ca",
      "text": "So, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”."
    },
    {
      "type": "markdown",
      "id": "d145214312bfec04",
      "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”."
    },
    {
      "type": "paragraph",
      "id": "90c891c42c56fd5f",
      "text": "Most type systems use a concept of “[[Name]]”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular."
    },
    {
      "type": "markdown",
      "id": "8a2e63fd807cd031",
      "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see [[Objects as Behaviour]]."
    },
    {
      "type": "markdown",
      "id": "9361525a4ede8220",
      "text": "A problem with these two approaches is that, if you have something like:"
    },
    {
      "type": "code",
      "id": "e7b758816b456107",
      "text": "    interface Counter { \n      next(): Int; \n    } "
    },
    {
      "type": "markdown",
      "id": "43d1cc7247d60225",
      "text": "Then all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:"
    },
    {
      "type": "code",
      "id": "c339fa62fcdaa88b",
      "text": "    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } "
    },
    {
      "type": "markdown",
      "id": "16c4ba04e0bf75eb",
      "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]].\n\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]."
    },
    {
      "type": "markdown",
      "id": "d8287e16d3ca293f",
      "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed [https://www.khoury.northeastern.edu/home/amal/ page]\n[3] [[Extensionality]]"
    },
    {
      "type": "pagefold",
      "id": "d70e4b9a39bf4c9f",
      "text": "~"
    },
    {
      "type": "image",
      "id": "5625d3b0ad698829",
      "text": "[[Attribution]]",
      "size": "wide",
      "width": 419,
      "height": 254,
      "url": "/assets/plugins/image/2653239a9bf74e3740cc6def90827f66.jpg"
    },
    {
      "type": "paragraph",
      "id": "7f36d85b891c6c4c",
      "text": "⇒ [[Contents Is Intention Obscuring]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-12-29",
        "story": []
      },
      "date": 1703826284687
    },
    {
      "item": {
        "type": "factory",
        "id": "445175f0c33f7a49"
      },
      "id": "445175f0c33f7a49",
      "type": "add",
      "date": 1703826293736
    },
    {
      "type": "edit",
      "id": "445175f0c33f7a49",
      "item": {
        "type": "image",
        "id": "445175f0c33f7a49",
        "text": "[[2023-12-28]]",
        "size": "wide",
        "width": 430,
        "height": 263,
        "url": "/assets/plugins/image/06bdf2e60a5638833dc2c44a3b75e57e.jpg"
      },
      "date": 1703826311324
    },
    {
      "item": {
        "type": "factory",
        "id": "054846bb1397244c"
      },
      "id": "054846bb1397244c",
      "type": "add",
      "after": "445175f0c33f7a49",
      "date": 1703826383640
    },
    {
      "type": "edit",
      "id": "054846bb1397244c",
      "item": {
        "type": "code",
        "id": "054846bb1397244c",
        "text": "(self item) value at: #title"
      },
      "date": 1703826385682
    },
    {
      "id": "ed4882f2acd77d26",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ed4882f2acd77d26",
        "text": "create alone does not generate an id"
      },
      "attribution": {
        "page": "2023-12-28"
      },
      "date": 1703826405573
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "paragraph",
        "id": "ed4882f2acd77d26",
        "text": "[[Action]] type `create` alone does not generate an id"
      },
      "date": 1703826418485
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "[[Action]] type `create` alone does not generate an id"
      },
      "date": 1703826420081
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "[[Action]] type `create` alone does not generate an `id`."
      },
      "date": 1703826439775
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "The `create` [[Action]] type alone does not generate an `id`."
      },
      "date": 1703826518231
    },
    {
      "id": "cdf0423981d247b0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' arrange the story."
      },
      "attribution": {
        "page": "Action",
        "site": "glossary.asia.wiki.org"
      },
      "date": 1703826565371
    },
    {
      "id": "a085daa1319256c6",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a085daa1319256c6",
        "text": "Actions of type 'create' indicate newly made pages."
      },
      "after": "cdf0423981d247b0",
      "attribution": {
        "page": "Action",
        "site": "glossary.asia.wiki.org"
      },
      "date": 1703826575624
    },
    {
      "type": "remove",
      "id": "cdf0423981d247b0",
      "date": 1703826578828
    },
    {
      "type": "edit",
      "id": "a085daa1319256c6",
      "item": {
        "type": "paragraph",
        "id": "a085daa1319256c6",
        "text": "Actions of type `create` indicate newly made pages."
      },
      "date": 1703826590488
    },
    {
      "type": "edit",
      "id": "a085daa1319256c6",
      "item": {
        "type": "markdown",
        "id": "a085daa1319256c6",
        "text": "Actions of type `create` indicate newly made pages."
      },
      "date": 1703826592240
    },
    {
      "id": "ed4882f2acd77d26",
      "type": "move",
      "order": [
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "054846bb1397244c"
      ],
      "date": 1703826607891
    },
    {
      "id": "604236f230de9a75",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "604236f230de9a75",
        "text": "The [[Journal]], when properly maintained, collects the complete history of a wiki page."
      },
      "after": "054846bb1397244c",
      "attribution": {
        "page": "Action",
        "site": "glossary.asia.wiki.org"
      },
      "date": 1703826671923
    },
    {
      "id": "604236f230de9a75",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "054846bb1397244c"
      ],
      "date": 1703826679557
    },
    {
      "type": "edit",
      "id": "604236f230de9a75",
      "item": {
        "type": "paragraph",
        "id": "604236f230de9a75",
        "text": "The [[Journal]], when properly maintained, [[collect]]s the complete history of a wiki page."
      },
      "date": 1703826699704
    },
    {
      "item": {
        "type": "factory",
        "id": "9d35c2d92831c091"
      },
      "id": "9d35c2d92831c091",
      "type": "add",
      "after": "054846bb1397244c",
      "date": 1703826724329
    },
    {
      "type": "edit",
      "id": "9d35c2d92831c091",
      "item": {
        "type": "graphviz",
        "id": "9d35c2d92831c091",
        "text": "DOT FROM two-level-diagram"
      },
      "date": 1703826735620
    },
    {
      "item": {
        "type": "factory",
        "id": "2539b58d08cc3a99"
      },
      "id": "2539b58d08cc3a99",
      "type": "add",
      "after": "9d35c2d92831c091",
      "date": 1703826923495
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is *written in its own language, for which the object is that language’s [[Interpreter]]*) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703826975704
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703827065585
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703827154997
    },
    {
      "type": "edit",
      "id": "a085daa1319256c6",
      "item": {
        "type": "markdown",
        "id": "a085daa1319256c6",
        "text": "[[Action]]s of type `create` indicate newly made pages."
      },
      "date": 1703827216583
    },
    {
      "item": {
        "type": "factory",
        "id": "964da54eb1b95bc0"
      },
      "id": "964da54eb1b95bc0",
      "type": "add",
      "after": "2539b58d08cc3a99",
      "date": 1703827339354
    },
    {
      "id": "964da54eb1b95bc0",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "054846bb1397244c",
        "9d35c2d92831c091",
        "2539b58d08cc3a99"
      ],
      "date": 1703827347973
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[wiki-page]] in the federation contains a story-element which in turn is composed of an ordered list of items. Each item has an [[item-id]] which is assigned on creation."
      },
      "date": 1703827353785
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation contains a story-element which in turn is composed of an ordered list of items. Each item has an [[item-id]] which is assigned on creation."
      },
      "date": 1703827446465
    },
    {
      "id": "cdf0423981d247b0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' arrange the story."
      },
      "after": "054846bb1397244c",
      "attribution": {
        "page": "Action",
        "site": "glossary.asia.wiki.org"
      },
      "date": 1703827700515
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the story."
      },
      "date": 1703827710844
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]."
      },
      "date": 1703827734202
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and the generation of an id seems to be related."
      },
      "date": 1703827784142
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation contains a story-element which in turn is composed of an ordered list of items. Each item has an id which is assigned on creation."
      },
      "date": 1703827808080
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation contains a [[Story]] element which in turn is composed of an ordered list of items. Each item has an id which is assigned on creation."
      },
      "date": 1703827973412
    },
    {
      "id": "8529156add09189b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The Arrangement axiom gives permission to take multiple forms out of the interior content of a frame and [[put]] them into separate frames, so long as we carry their [[Context]] — i.e. their frame type, (A [...]) — along with them."
      },
      "after": "cdf0423981d247b0",
      "attribution": {
        "page": "Arrangement"
      },
      "date": 1703828073354
    },
    {
      "id": "d30b51f1c85858ce",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "d30b51f1c85858ce",
        "text": "# See also\n"
      },
      "after": "8529156add09189b",
      "attribution": {
        "page": "Item-id"
      },
      "date": 1703828117459
    },
    {
      "id": "63c23c1135f05a38",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "63c23c1135f05a38",
        "text": "- [[Item Distribution]]\n- [[Unique Item Identifiers]]"
      },
      "after": "d30b51f1c85858ce",
      "attribution": {
        "page": "Item-id"
      },
      "date": 1703828126998
    },
    {
      "type": "edit",
      "id": "d30b51f1c85858ce",
      "item": {
        "type": "markdown",
        "id": "d30b51f1c85858ce",
        "text": "## See also\n"
      },
      "date": 1703828138535
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The Arrangement axiom gives permission to take multiple forms out of the interior content of a frame and [[put]] them into separate frames, so long as we carry their [[Context]] — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703828291801
    },
    {
      "id": "78bd3bb0ba09a858",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "78bd3bb0ba09a858",
        "text": "The generic template collapses if either the type or the content is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In [[Arrangement]], [[collect]] gathers together framed-content that has in common the same frame-type. (p. 198)"
      },
      "after": "8529156add09189b",
      "attribution": {
        "page": "Frame Type"
      },
      "date": 1703828435639
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked."
      },
      "date": 1703828549151
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation contains a [[Story]] element which in turn is composed of an ordered list of items. Each item has an ID which is assigned on creation."
      },
      "date": 1703828575826
    },
    {
      "id": "964da54eb1b95bc0",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "964da54eb1b95bc0",
        "ed4882f2acd77d26",
        "054846bb1397244c",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99"
      ],
      "date": 1703828639512
    },
    {
      "type": "edit",
      "id": "964da54eb1b95bc0",
      "item": {
        "type": "reference",
        "id": "964da54eb1b95bc0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "item-id",
        "title": "Item-id",
        "text": "Every [[Wiki Page]] in the federation [[contains]] a [[Story]] element which in turn is composed of an ordered list of items. Each item has an ID which is assigned on creation."
      },
      "date": 1703828971677
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The Arrangement axiom gives permission to take multiple forms out of the interior content of a frame and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703829030867
    },
    {
      "item": {
        "type": "factory",
        "id": "d62ef64cc402cc99"
      },
      "id": "d62ef64cc402cc99",
      "type": "add",
      "after": "2539b58d08cc3a99",
      "date": 1703829253784
    },
    {
      "id": "119e9c0883c3e602",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**.\n\nA problem with these two approaches is that, if you have something like:"
      },
      "after": "2539b58d08cc3a99",
      "attribution": {
        "page": "The Behavioural Point of View"
      },
      "date": 1703829306193
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**.\n\nA problem with these two approaches is that, if you have something like:"
      },
      "date": 1703829310229
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**."
      },
      "date": 1703829324523
    },
    {
      "type": "edit",
      "id": "d62ef64cc402cc99",
      "item": {
        "type": "reference",
        "id": "d62ef64cc402cc99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "unique-item-identifiers",
        "title": "Unique Item Identifiers",
        "text": "Wiki tries to mark every item created with a unique identifier. We can think of each item in [[The Federation]] as a database record, and we can refer to it with this unique id however it might move through the federation, and whatever its contents."
      },
      "date": 1703829371369
    },
    {
      "type": "edit",
      "id": "d62ef64cc402cc99",
      "item": {
        "type": "reference",
        "id": "d62ef64cc402cc99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "unique-item-identifiers",
        "title": "Unique Item Identifiers",
        "text": "Wiki tries to mark every [[Item]] created with a unique identifier. We can think of each item in [[The Federation]] as a database record, and we can refer to it with this unique id however it might move through the federation, and whatever its contents."
      },
      "date": 1703829391070
    },
    {
      "type": "edit",
      "id": "d62ef64cc402cc99",
      "item": {
        "type": "reference",
        "id": "d62ef64cc402cc99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "unique-item-identifiers",
        "title": "Unique Item Identifiers",
        "text": "Wiki tries to mark every [[Item]] created with a unique identifier. We can think of each item in [[The Federation]] as a database record, and we can refer to it with this unique ID however it might move through the federation, and whatever its contents."
      },
      "date": 1703829414436
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see objects as plain records of data**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**."
      },
      "date": 1703829440508
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see objects as plain records of data**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as [[Behaviour]]**."
      },
      "date": 1703829459245
    },
    {
      "item": {
        "type": "factory",
        "id": "34c346ab600ee576"
      },
      "id": "34c346ab600ee576",
      "type": "add",
      "after": "d62ef64cc402cc99",
      "date": 1703829495014
    },
    {
      "type": "edit",
      "id": "34c346ab600ee576",
      "item": {
        "type": "reference",
        "id": "34c346ab600ee576",
        "site": "wiki.ralfbarkow.ch",
        "slug": "behaviors",
        "title": "Behaviors",
        "text": "These define how the [[Card]] acts when a user or another card interacts with it. [[Behavior]]s computation is replicated on all user systems, providing a perfect, bit-identical shared experience. [https://www.croquet.io/microverse-ide/ croquet]"
      },
      "date": 1703829501920
    },
    {
      "type": "edit",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "> The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works **if you see objects as plain records of data**, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), […]"
      },
      "date": 1703829537934
    },
    {
      "type": "add",
      "id": "939940910a95498c",
      "item": {
        "type": "markdown",
        "id": "939940910a95498c",
        "text": "> but it doesn’t work **if you see objects as [[Behaviour]]**."
      },
      "after": "119e9c0883c3e602",
      "date": 1703829538702
    },
    {
      "id": "939940910a95498c",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "964da54eb1b95bc0",
        "ed4882f2acd77d26",
        "054846bb1397244c",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576"
      ],
      "date": 1703829679337
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there static typing for a Smalltalk derivative?, [[Alan Kay]])"
      },
      "date": 1703829990417
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]])"
      },
      "date": 1703830039744
    },
    {
      "item": {
        "type": "factory",
        "id": "ec2d82b0d3ace017"
      },
      "id": "ec2d82b0d3ace017",
      "type": "add",
      "after": "34c346ab600ee576",
      "date": 1703830202652
    },
    {
      "type": "edit",
      "id": "ec2d82b0d3ace017",
      "item": {
        "type": "markdown",
        "id": "ec2d82b0d3ace017",
        "text": "# Is there static typing for a Smalltalk derivative?"
      },
      "date": 1703830207849
    },
    {
      "item": {
        "type": "factory",
        "id": "f322f7f836e53eb6"
      },
      "id": "f322f7f836e53eb6",
      "type": "add",
      "after": "ec2d82b0d3ace017",
      "date": 1703830230626
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]])"
      },
      "date": 1703830232208
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "[https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]])"
      },
      "date": 1703830249074
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "[[Alan Kay]]) via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703830270272
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "[[Alan Kay]] via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703830274742
    },
    {
      "item": {
        "type": "factory",
        "id": "41f5317aef39a03f"
      },
      "id": "41f5317aef39a03f",
      "type": "add",
      "after": "f322f7f836e53eb6",
      "date": 1703830292294
    },
    {
      "type": "edit",
      "id": "41f5317aef39a03f",
      "item": {
        "type": "paragraph",
        "id": "41f5317aef39a03f",
        "text": "Besides looking at the past, we should look to the present and the future.\n\nThe basic idea of “object” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford.\n\nBut consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "date": 1703830293884
    },
    {
      "type": "edit",
      "id": "41f5317aef39a03f",
      "item": {
        "type": "paragraph",
        "id": "41f5317aef39a03f",
        "text": "Besides looking at the past, we should look to the present and the future."
      },
      "date": 1703830309424
    },
    {
      "type": "add",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford.\n\nBut consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "after": "41f5317aef39a03f",
      "date": 1703830325683
    },
    {
      "type": "add",
      "id": "b25695ed45720a48",
      "item": {
        "type": "paragraph",
        "id": "b25695ed45720a48",
        "text": "This also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford.\n\nBut consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703830331434
    },
    {
      "type": "edit",
      "id": "ec2d82b0d3ace017",
      "item": {
        "type": "markdown",
        "id": "ec2d82b0d3ace017",
        "text": "# Is there [[Static Typing]] for a Smalltalk derivative?"
      },
      "date": 1703830374351
    },
    {
      "type": "edit",
      "id": "b25695ed45720a48",
      "item": {
        "type": "paragraph",
        "id": "b25695ed45720a48",
        "text": "This also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703830782768
    },
    {
      "type": "add",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford."
      },
      "after": "b25695ed45720a48",
      "date": 1703830787516
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing [http://ggp.stanford.edu/ site]\n\nof [[Mike Genesereth]] at Stanford."
      },
      "date": 1703830801047
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\n[[General Game Playing]] [http://ggp.stanford.edu/ site]\n\nof [[Mike Genesereth]] at Stanford."
      },
      "date": 1703830818950
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\n[[General Game Playing]] [http://ggp.stanford.edu/ site] of [[Mike Genesereth]] at Stanford."
      },
      "date": 1703830947778
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\n[[General Game Playing]] [http://ggp.stanford.edu/ site] of [[Michael Genesereth]] at Stanford."
      },
      "date": 1703831131569
    },
    {
      "item": {
        "type": "factory",
        "id": "f8b2b8e3bfc3856d"
      },
      "id": "f8b2b8e3bfc3856d",
      "type": "add",
      "after": "7258867ccf7a7f35",
      "date": 1703831228174
    },
    {
      "type": "edit",
      "id": "f8b2b8e3bfc3856d",
      "item": {
        "type": "paragraph",
        "id": "f8b2b8e3bfc3856d",
        "text": "But consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "date": 1703831230312
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing.\n\nGeneral Game Playing\n\nof Mike Genesereth at Stanford."
      },
      "date": 1703831339899
    },
    {
      "type": "add",
      "id": "b15e24b09b633757",
      "item": {
        "type": "paragraph",
        "id": "b15e24b09b633757",
        "text": "But consider all the ramifications of what it means to write a program that is able to look at “requirements for a possibly very complex ‘game’ ”, and to generate a process that can then synthesize a game playing agent from those requirements.\n\nIn short, I like “types” if they can really pay their way by dealing with the semantics that really count!"
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703831350621
    },
    {
      "type": "remove",
      "id": "b25695ed45720a48",
      "date": 1703831357500
    },
    {
      "type": "remove",
      "id": "b15e24b09b633757",
      "date": 1703831361627
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made.\n\nThe only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing."
      },
      "date": 1703831370591
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703831380176
    },
    {
      "type": "add",
      "id": "7e3bbdd5c2ad3bdf",
      "item": {
        "type": "paragraph",
        "id": "7e3bbdd5c2ad3bdf",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing."
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703831382429
    },
    {
      "type": "edit",
      "id": "7258867ccf7a7f35",
      "item": {
        "type": "paragraph",
        "id": "7258867ccf7a7f35",
        "text": "The only system I’ve seen over the last some years that “feels” like this will seem to have little to do with what I’ve been discussing."
      },
      "date": 1703831388643
    },
    {
      "type": "add",
      "id": "7d7c0360a7068f0b",
      "item": {
        "type": "paragraph",
        "id": "7d7c0360a7068f0b",
        "text": "[[General Game Playing]] [http://ggp.stanford.edu/ site] of [[Michael Genesereth]] at Stanford."
      },
      "after": "7258867ccf7a7f35",
      "date": 1703831389783
    },
    {
      "type": "remove",
      "id": "7258867ccf7a7f35",
      "date": 1703831397566
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points.\n\n• First we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource.\n\nOne starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources."
      },
      "date": 1703831447637
    },
    {
      "type": "edit",
      "id": "80a16d76e462ae2a",
      "item": {
        "type": "markdown",
        "id": "80a16d76e462ae2a",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703831451144
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.).\n\nAn object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “something” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services.\n\nNow let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points."
      },
      "date": 1703831477850
    },
    {
      "type": "add",
      "id": "9bc3702b5cb190e9",
      "item": {
        "type": "paragraph",
        "id": "9bc3702b5cb190e9",
        "text": "• **First** we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource."
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703831486441
    },
    {
      "type": "edit",
      "id": "9bc3702b5cb190e9",
      "item": {
        "type": "markdown",
        "id": "9bc3702b5cb190e9",
        "text": "• **First** we need to find the resources that would help us, and we don’t know their names. However, when we install “foo” we could associate with it the best set of stuff we can come up with to assist a local search engine to find that resource."
      },
      "date": 1703831488011
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703831534759
    },
    {
      "item": {
        "type": "factory",
        "id": "4428c1a77bd206c5"
      },
      "id": "4428c1a77bd206c5",
      "type": "add",
      "after": "f8b2b8e3bfc3856d",
      "date": 1703845003880
    },
    {
      "type": "edit",
      "id": "4428c1a77bd206c5",
      "item": {
        "type": "pagefold",
        "id": "4428c1a77bd206c5",
        "text": "~"
      },
      "date": 1703845007667
    },
    {
      "type": "edit",
      "id": "e3a5d1f35617c5cc",
      "item": {
        "type": "image",
        "id": "e3a5d1f35617c5cc",
        "text": "[[Attribution]]",
        "size": "wide",
        "width": 419,
        "height": 254,
        "url": "/assets/plugins/image/2653239a9bf74e3740cc6def90827f66.jpg"
      },
      "date": 1703845055598
    },
    {
      "type": "add",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is #()."
      },
      "after": "ed4882f2acd77d26",
      "date": 1703845294345
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`."
      },
      "date": 1703845302066
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`, an Array with 0 items."
      },
      "date": 1703845327336
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`, an Array with 0 items.\nThe title is"
      },
      "date": 1703845356596
    },
    {
      "item": {
        "type": "factory",
        "id": "5625d3b0ad698829"
      },
      "id": "5625d3b0ad698829",
      "type": "add",
      "after": "4428c1a77bd206c5",
      "date": 1703845387800
    },
    {
      "type": "edit",
      "id": "5625d3b0ad698829",
      "item": {
        "type": "image",
        "id": "5625d3b0ad698829",
        "text": "[[Attribution]]",
        "size": "wide",
        "width": 419,
        "height": 254,
        "url": "/assets/plugins/image/2653239a9bf74e3740cc6def90827f66.jpg"
      },
      "date": 1703845404122
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703845457643
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "**Note**: Slug is nil."
      },
      "date": 1703845841829
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "markdown",
        "id": "cdf0423981d247b0",
        "text": "**Note**: Slug is nil."
      },
      "date": 1703845844525
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "markdown",
        "id": "cdf0423981d247b0",
        "text": "**Note**: The `slug` is still nil."
      },
      "date": 1703845906357
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "markdown",
        "id": "cdf0423981d247b0",
        "text": "**Note**: The instance variables `slug` and `url` are still nil."
      },
      "date": 1703845961798
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`, an Array with 0 items. [⇒[[Void-Equivalent]]?]\nThe title is"
      },
      "date": 1703846404479
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. \nThe title is"
      },
      "date": 1703846481825
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()`[⇒[[Void-Equivalent]]?], an Array with 0 items. \nThe title is"
      },
      "date": 1703846498918
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. \nThe title is"
      },
      "date": 1703846509927
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "The story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The title is"
      },
      "date": 1703846528048
    },
    {
      "id": "135e0eab7e2dbdb2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "135e0eab7e2dbdb2",
        "text": "The frame-type is [[Structure]] between round- and [[Square-Bracket]]s. The generic template collapses if either the type or the content is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In Arrangement [[collect]] gathers together framed-content that has in common the same frame-type. (p. 198)"
      },
      "after": "9f1482ef8c8ab10c",
      "attribution": {
        "page": "Arrangement"
      },
      "date": 1703846688918
    },
    {
      "type": "remove",
      "id": "135e0eab7e2dbdb2",
      "date": 1703846693840
    },
    {
      "type": "edit",
      "id": "9f1482ef8c8ab10c",
      "item": {
        "type": "paragraph",
        "id": "9f1482ef8c8ab10c",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked. In Arrangement [[collect]] gathers together framed-content that has in common the same [[Frame Type]]. "
      },
      "date": 1703846708503
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703846988743
    },
    {
      "type": "edit",
      "id": "f322f7f836e53eb6",
      "item": {
        "type": "paragraph",
        "id": "f322f7f836e53eb6",
        "text": "[[Alan Kay]], [[Quildreen Motta]] et al. via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1703847027600
    },
    {
      "type": "edit",
      "id": "41f5317aef39a03f",
      "item": {
        "type": "paragraph",
        "id": "41f5317aef39a03f",
        "text": "Alan Kay: Besides looking at the past, we should look to the present and the future."
      },
      "date": 1703847380904
    },
    {
      "type": "add",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "Quildreen Motta:"
      },
      "after": "f8b2b8e3bfc3856d",
      "date": 1703847870791
    },
    {
      "id": "9555d42403421e9b",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "964da54eb1b95bc0",
        "ed4882f2acd77d26",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "9bc3702b5cb190e9",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "5625d3b0ad698829"
      ],
      "date": 1703847873759
    },
    {
      "type": "edit",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "Quildreen Motta: Other people have already mentioned Strongtalk, and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now.\n\nAlthough nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n.\n\nFootnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia\n"
      },
      "date": 1703847935701
    },
    {
      "type": "edit",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "[[Quildreen Motta]]: Other people have already mentioned Strongtalk, and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now.\n\nAlthough nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n.\n\nFootnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia\n"
      },
      "date": 1703847950714
    },
    {
      "type": "edit",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "[[Quildreen Motta]]: Other people have already mentioned [[Strongtalk]], and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now.\n\nAlthough nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n.\n\nFootnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia\n"
      },
      "date": 1703847969959
    },
    {
      "type": "edit",
      "id": "9555d42403421e9b",
      "item": {
        "type": "paragraph",
        "id": "9555d42403421e9b",
        "text": "[[Quildreen Motta]]: Other people have already mentioned [[Strongtalk]], and Kay has talked about the problems of deciding what these types should cover—objects are about behaviour, and most type systems are kinda useless at modelling behaviours for now."
      },
      "date": 1703847983940
    },
    {
      "type": "add",
      "id": "8c4354e2ce43ed99",
      "item": {
        "type": "paragraph",
        "id": "8c4354e2ce43ed99",
        "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n.\n\nFootnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia"
      },
      "after": "9555d42403421e9b",
      "date": 1703847984491
    },
    {
      "type": "edit",
      "id": "41f5317aef39a03f",
      "item": {
        "type": "paragraph",
        "id": "41f5317aef39a03f",
        "text": "[[Alan Kay]]: Besides looking at the past, we should look to the present and the future."
      },
      "date": 1703847995063
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703848098570
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "# key #id not found"
      },
      "date": 1703848259356
    },
    {
      "type": "add",
      "id": "f93bb393c5c0cf4c",
      "item": {
        "type": "markdown",
        "id": "f93bb393c5c0cf4c",
        "text": "The `create` [[Action]] type alone does not generate an `id`."
      },
      "after": "ed4882f2acd77d26",
      "date": 1703848260000
    },
    {
      "type": "edit",
      "id": "ed4882f2acd77d26",
      "item": {
        "type": "markdown",
        "id": "ed4882f2acd77d26",
        "text": "# Key #id Not Found"
      },
      "date": 1703848363223
    },
    {
      "id": "ed4882f2acd77d26",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "9bc3702b5cb190e9",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "5625d3b0ad698829"
      ],
      "date": 1703848372575
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703848388487
    },
    {
      "type": "edit",
      "id": "445175f0c33f7a49",
      "item": {
        "type": "image",
        "id": "445175f0c33f7a49",
        "text": "KeyNotFound",
        "size": "wide",
        "width": 430,
        "height": 263,
        "url": "/assets/plugins/image/06bdf2e60a5638833dc2c44a3b75e57e.jpg"
      },
      "date": 1703848433229
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The [[Arrangement]] axiom gives permission to take multiple forms out of the interior content of a frame and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703848491944
    },
    {
      "id": "2fcfde9b5b9606a5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2fcfde9b5b9606a5",
        "text": "Actions of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked.",
        "alias": "cdf0423981d247b0"
      },
      "after": "cdf0423981d247b0",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703848582581
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703848648477
    },
    {
      "type": "edit",
      "id": "2fcfde9b5b9606a5",
      "item": {
        "type": "paragraph",
        "id": "2fcfde9b5b9606a5",
        "text": "[[Action]]s of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked. ",
        "alias": "cdf0423981d247b0"
      },
      "date": 1703848712571
    },
    {
      "type": "edit",
      "id": "78bd3bb0ba09a858",
      "item": {
        "type": "paragraph",
        "id": "78bd3bb0ba09a858",
        "text": "The generic template collapses if either the type or the content is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In [[Arrangement]], [[collect]] gathers together framed-content that has in common the same [[Frame Type]]."
      },
      "date": 1703848794995
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703848990873
    },
    {
      "id": "cdf0423981d247b0",
      "type": "remove",
      "removedTo": {
        "page": "scratch"
      },
      "date": 1703849021058
    },
    {
      "id": "cdf0423981d247b0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "Actions of type 'add', 'delete' and 'move' arrange the story."
      },
      "after": "054846bb1397244c",
      "attribution": {
        "page": "Action"
      },
      "date": 1703849038966
    },
    {
      "type": "remove",
      "id": "2fcfde9b5b9606a5",
      "date": 1703849043887
    },
    {
      "type": "edit",
      "id": "cdf0423981d247b0",
      "item": {
        "type": "paragraph",
        "id": "cdf0423981d247b0",
        "text": "[[Action]]s of type 'add', 'delete' and 'move' [[arrange]] the [[Story]]. [[Arrangement]] and creating an ID appear to be linked. "
      },
      "date": 1703849045930
    },
    {
      "type": "add",
      "id": "15c2f146e91c99ed",
      "item": {
        "type": "markdown",
        "id": "15c2f146e91c99ed",
        "text": "**Note**: The instance variables `slug` and `url` are still nil."
      },
      "after": "a1a5a0cf98bf025c",
      "date": 1703849071111
    },
    {
      "id": "15c2f146e91c99ed",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "9bc3702b5cb190e9",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "5625d3b0ad698829"
      ],
      "date": 1703849072949
    },
    {
      "type": "edit",
      "id": "15c2f146e91c99ed",
      "item": {
        "type": "markdown",
        "id": "15c2f146e91c99ed",
        "text": "**Note**: The instance variables `slug` and `url` are not yet initialized."
      },
      "date": 1703849293219
    },
    {
      "item": {
        "type": "factory",
        "id": "d70e4b9a39bf4c9f"
      },
      "id": "d70e4b9a39bf4c9f",
      "type": "add",
      "after": "5625d3b0ad698829",
      "date": 1703850205447
    },
    {
      "id": "d70e4b9a39bf4c9f",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "9bc3702b5cb190e9",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829"
      ],
      "date": 1703850209795
    },
    {
      "type": "edit",
      "id": "d70e4b9a39bf4c9f",
      "item": {
        "type": "pagefold",
        "id": "d70e4b9a39bf4c9f",
        "text": "~"
      },
      "date": 1703850218199
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "After the `create` action, The story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The title is"
      },
      "date": 1703850392463
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "After the `create` action, the story is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The title is"
      },
      "date": 1703850398952
    },
    {
      "type": "edit",
      "id": "a1a5a0cf98bf025c",
      "item": {
        "type": "markdown",
        "id": "a1a5a0cf98bf025c",
        "text": "After the `create` action, the `story` is `#()` [⇒[[Void-Equivalent]]?], an Array with 0 items. The `title` is"
      },
      "date": 1703850441819
    },
    {
      "type": "add",
      "id": "19a483d723b52c81",
      "item": {
        "type": "markdown",
        "id": "19a483d723b52c81",
        "text": "# Arrange the Story"
      },
      "after": "15c2f146e91c99ed",
      "date": 1703850525720
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The [[Arrangement]] axiom gives permission to take multiple forms out of the interior [[Content]] of a frame and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703850623276
    },
    {
      "type": "edit",
      "id": "8529156add09189b",
      "item": {
        "type": "paragraph",
        "id": "8529156add09189b",
        "text": "The [[Arrangement]] axiom gives permission to take multiple forms out of the interior [[Content]] of a [[Frame]] and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1703850644668
    },
    {
      "type": "edit",
      "id": "78bd3bb0ba09a858",
      "item": {
        "type": "paragraph",
        "id": "78bd3bb0ba09a858",
        "text": "The generic template collapses if either the [[Type]] or the [[Content]] is [[Void-Equivalent]]. There are categories of frames that all have the same frame-type. In [[Arrangement]], [[collect]] gathers together framed-content that has in common the same [[Frame Type]]."
      },
      "date": 1703850680422
    },
    {
      "type": "edit",
      "id": "63c23c1135f05a38",
      "item": {
        "type": "markdown",
        "id": "63c23c1135f05a38",
        "text": "- [[Item Distribution]]\n- [[Unique Item Identifiers]]\n- [[Example of a Void-Equivalent Type]]"
      },
      "date": 1703850991529
    },
    {
      "type": "edit",
      "id": "ab9254fcd69fd2aa",
      "item": {
        "type": "paragraph",
        "id": "ab9254fcd69fd2aa",
        "text": "The basic idea of “[[Object]]” is to invest a “full virtual computer” so it can provide useful services via messages in a machine independent way and with enough encapsulation to be safe against attack.\n\nThis also means that everything can and should be an object because (a) a full virtual computer can simulate any other kind of thing, and (b) because this also allows objects to be self-defining, self-documenting, etc.\n\nThis means objects should be transportable across machines and requires the inter-object messaging to be done well (i.e. messages are objects, an object got to another machine by being sent as a message, etc.)."
      },
      "date": 1703851469786
    },
    {
      "type": "add",
      "id": "bdb01a0943055321",
      "item": {
        "type": "paragraph",
        "id": "bdb01a0943055321",
        "text": "An object can contain everything it needs above the simplest VM substrate. But what if we want our object to be able to deal with external resources? From inside the object we could decide that a particular external resource will have the local name of “foo”. We expect that “foo” will be bound to “[[Something]]” that is exterior, but to which we can exchange messages, and both use — and perhaps provide — services."
      },
      "after": "ab9254fcd69fd2aa",
      "date": 1703851480869
    },
    {
      "type": "add",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "paragraph",
        "id": "aa5df413d00700d3",
        "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado.\n\nLet me start the discussion with readers, here, with three points."
      },
      "after": "bdb01a0943055321",
      "date": 1703851482153
    },
    {
      "type": "add",
      "id": "a8c562d6e5ec0551",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources.\n\n• Secondly we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• Third we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "after": "9bc3702b5cb190e9",
      "date": 1703851675144
    },
    {
      "type": "edit",
      "id": "a8c562d6e5ec0551",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages.\n\nWe can now imagine that to bind to a resource, our object (and object system) will be able to negotiate actively with the environment of the object to get interior views of exterior resources."
      },
      "date": 1703851755967
    },
    {
      "type": "add",
      "id": "e9e4e669f11bd271",
      "item": {
        "type": "markdown",
        "id": "e9e4e669f11bd271",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “telegram”, but has the potential of being a full-fledged ambassador, so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "after": "a8c562d6e5ec0551",
      "date": 1703851775588
    },
    {
      "type": "edit",
      "id": "2539b58d08cc3a99",
      "item": {
        "type": "reference",
        "id": "2539b58d08cc3a99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-behavioural-point-of-view",
        "title": "The Behavioural Point of View",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s [[Interpreter]]) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora] (Is there [[Static Typing]] for a Smalltalk derivative?, [[Alan Kay]], [[Quildreen Motta]] et al.)"
      },
      "date": 1703851942466
    },
    {
      "type": "edit",
      "id": "63c23c1135f05a38",
      "item": {
        "type": "markdown",
        "id": "63c23c1135f05a38",
        "text": "- [[Item Distribution]]\n- [[Unique Item Identifiers]] ⇒ [[Fluid Not Permanent]]\n- [[Example of a Void-Equivalent Type]]"
      },
      "date": 1703852394532
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703852728310
    },
    {
      "type": "edit",
      "id": "a8c562d6e5ec0551",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages."
      },
      "date": 1703852830394
    },
    {
      "type": "add",
      "id": "e7fa159d4146488d",
      "item": {
        "type": "markdown",
        "id": "e7fa159d4146488d",
        "text": "We can now imagine that to bind to a resource, our object (and object system) will be able to [[negotiate]] actively with the environment of the object to get interior views of exterior resources."
      },
      "after": "a8c562d6e5ec0551",
      "date": 1703852839987
    },
    {
      "item": {
        "type": "factory",
        "id": "7f36d85b891c6c4c"
      },
      "id": "7f36d85b891c6c4c",
      "type": "add",
      "after": "5625d3b0ad698829",
      "date": 1703853002708
    },
    {
      "type": "edit",
      "id": "7f36d85b891c6c4c",
      "item": {
        "type": "paragraph",
        "id": "7f36d85b891c6c4c",
        "text": "⇒ [[Contents Is Intention Obscuring]]"
      },
      "date": 1703853014551
    },
    {
      "type": "edit",
      "id": "e9e4e669f11bd271",
      "item": {
        "type": "markdown",
        "id": "e9e4e669f11bd271",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “[[Telegram]]”, but has the potential of being a full-fledged [[Ambassador]], so that it can likewise take part in real negotiation of meaning at the receiving end.\n\n• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "date": 1703853601139
    },
    {
      "type": "edit",
      "id": "e9e4e669f11bd271",
      "item": {
        "type": "markdown",
        "id": "e9e4e669f11bd271",
        "text": "• **Secondly** we should imagine that when we are sending messages under the conditions of possible enormous scales that every message is not an encapsulated “[[Telegram]]”, but has the potential of being a full-fledged [[Ambassador]], so that it can likewise take part in real negotiation of meaning at the receiving end."
      },
      "date": 1703853637686
    },
    {
      "type": "add",
      "id": "357cf905780a950f",
      "item": {
        "type": "markdown",
        "id": "357cf905780a950f",
        "text": "• **Third** we could imagine an extension of a “publish and subscribe” scheme as the general way to build systems. The basic idea here is a bit more biological and stochastic. The matching and negotiation processes would be used so that each object has two public billboards, one for “requests for resources, help, etc.” and the other “offers to the general good”. The semantic matchmaker will make useful loose couplings, and very large, very robust systems can be made."
      },
      "after": "e9e4e669f11bd271",
      "date": 1703853638262
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703854416313
    },
    {
      "type": "edit",
      "id": "8c4354e2ce43ed99",
      "item": {
        "type": "paragraph",
        "id": "8c4354e2ce43ed99",
        "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "date": 1703855096902
    },
    {
      "type": "add",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "paragraph",
        "id": "d8287e16d3ca293f",
        "text": "Footnotes\n[1]\nhttps://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2]\nAmal Ahmed\n[3]\nExtensionality - Wikipedia"
      },
      "after": "8c4354e2ce43ed99",
      "date": 1703855099277
    },
    {
      "type": "edit",
      "id": "8c4354e2ce43ed99",
      "item": {
        "type": "paragraph",
        "id": "8c4354e2ce43ed99",
        "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important.\n\nAnyway, if we look at the practicality of a type system, we have to consider:\n\n    What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n    Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;\n\nSo, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”.\n\nEdit: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”."
      },
      "date": 1703855115938
    },
    {
      "type": "add",
      "id": "90c891c42c56fd5f",
      "item": {
        "type": "paragraph",
        "id": "90c891c42c56fd5f",
        "text": "Most type systems use a concept of “[[Name]]”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "after": "8c4354e2ce43ed99",
      "date": 1703855125354
    },
    {
      "type": "edit",
      "id": "90c891c42c56fd5f",
      "item": {
        "type": "paragraph",
        "id": "90c891c42c56fd5f",
        "text": "Most type systems use a concept of “[[Name]]”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular."
      },
      "date": 1703855153017
    },
    {
      "type": "add",
      "id": "8a2e63fd807cd031",
      "item": {
        "type": "paragraph",
        "id": "8a2e63fd807cd031",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "after": "90c891c42c56fd5f",
      "date": 1703855161118
    },
    {
      "type": "edit",
      "id": "8a2e63fd807cd031",
      "item": {
        "type": "paragraph",
        "id": "8a2e63fd807cd031",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour."
      },
      "date": 1703855182928
    },
    {
      "type": "edit",
      "id": "8a2e63fd807cd031",
      "item": {
        "type": "markdown",
        "id": "8a2e63fd807cd031",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour."
      },
      "date": 1703855185094
    },
    {
      "type": "edit",
      "id": "8a2e63fd807cd031",
      "item": {
        "type": "markdown",
        "id": "8a2e63fd807cd031",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see [[Objects as Behaviour]]."
      },
      "date": 1703855240688
    },
    {
      "type": "edit",
      "id": "a5e4ee82b4cba378",
      "item": {
        "type": "paragraph",
        "id": "a5e4ee82b4cba378",
        "text": "A problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour."
      },
      "date": 1703855490522
    },
    {
      "type": "add",
      "id": "20552725b101f341",
      "item": {
        "type": "paragraph",
        "id": "20552725b101f341",
        "text": "Of course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "after": "a5e4ee82b4cba378",
      "date": 1703855492707
    },
    {
      "type": "edit",
      "id": "a5e4ee82b4cba378",
      "item": {
        "type": "paragraph",
        "id": "a5e4ee82b4cba378",
        "text": "A problem with these two approaches is that, if you have something like:\n\n    interface Counter { \n      next(): Int; \n    } \n\nThen all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:\n\n    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } \n\nAnd they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]]."
      },
      "date": 1703855498738
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "paragraph",
        "id": "d8287e16d3ca293f",
        "text": "Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855519174
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855520216
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855526661
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf [[\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855552029
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] https://www2.ccs.neu.edu/racket/pubs/popl17-ckg.pdf [[Type Systems as Macros]]\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855566496
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed\n[3] Extensionality - Wikipedia"
      },
      "date": 1703855607615
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed\n[3] [[Extensionality]] - Wikipedia"
      },
      "date": 1703855655096
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed\n[3] [[Extensionality]]"
      },
      "date": 1703855663922
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703855713989
    },
    {
      "type": "edit",
      "id": "8c4354e2ce43ed99",
      "item": {
        "type": "paragraph",
        "id": "8c4354e2ce43ed99",
        "text": "Although nobody mentioned it, and to the extent that it counts, Newspeak has an optional type system—you can use types for documentation, but the specification does not define how those types should be checked. Bracha has talked a lot about why optional type systems would be interesting for letting the user decide what type checking means for their programs, and why that’s important."
      },
      "date": 1703855887158
    },
    {
      "type": "add",
      "id": "2b1bc89d5894a606",
      "item": {
        "type": "paragraph",
        "id": "2b1bc89d5894a606",
        "text": "Anyway, if we look at the practicality of a type system, we have to consider:"
      },
      "after": "8c4354e2ce43ed99",
      "date": 1703855894599
    },
    {
      "type": "add",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction[1]\n    last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this[2]\n    ). And types for distributed programs are an even bloodier mess;"
      },
      "after": "2b1bc89d5894a606",
      "date": 1703855905973
    },
    {
      "type": "add",
      "id": "ad74e462298d43ca",
      "item": {
        "type": "paragraph",
        "id": "ad74e462298d43ca",
        "text": "So, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”."
      },
      "after": "aa24c609049a7b07",
      "date": 1703855906851
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703855908034
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703855961914
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703855971686
    },
    {
      "type": "edit",
      "id": "d8287e16d3ca293f",
      "item": {
        "type": "markdown",
        "id": "d8287e16d3ca293f",
        "text": "## Footnotes\n[1] [[Type Systems as Macros]]\n[2] Amal Ahmed [https://www.khoury.northeastern.edu/home/amal/ page]\n[3] [[Extensionality]]"
      },
      "date": 1703856019152
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703856034768
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703856068504
    },
    {
      "type": "edit",
      "id": "aa24c609049a7b07",
      "item": {
        "type": "markdown",
        "id": "aa24c609049a7b07",
        "text": "* What is it that we’re trying to model? Nothing prevents us from just implementing [math]\\text{System F}_{<:}[/math], but we do have to ask ourselves: “is this really what I’m interested in modelling?”;\n*  Different programs need different types. Combining type systems is still open research (we only got Chang et al’s paper as a step in that direction [1] [⇒ [[Type Systems as Macros]]] last year). We don’t know how to combine types of different languages yet (but see Amal’s research and talks on this [2] [⇒ [[Amal Ahmed]] [https://www.khoury.northeastern.edu/home/amal/ page]]). And types for distributed programs are an even bloodier mess;"
      },
      "date": 1703856076779
    },
    {
      "type": "edit",
      "id": "ad74e462298d43ca",
      "item": {
        "type": "paragraph",
        "id": "ad74e462298d43ca",
        "text": "So, do we have type systems for Smalltalk derivatives? Yes. You can throw any derivative of System F at any language and it will “work”. And people have done so in some languages out there.\n\nDoes that mean that these type systems are useful, or do they just get in the way of what Smalltalk tries to be? That’s a much harder question. If you’re not really looking at Smalltalk and objects from a purely behavioural point of view then the answer is probably “yes, they’re useful”.\n\nOtherwise, if you look at objects from the behavioural point of view (and here we could say that each object is written in its own language, for which the object is that language’s interpreter) the answer is “we don’t know how to build that yet, or even what that is”."
      },
      "date": 1703856126086
    },
    {
      "type": "add",
      "id": "d145214312bfec04",
      "item": {
        "type": "markdown",
        "id": "d145214312bfec04",
        "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”."
      },
      "after": "ad74e462298d43ca",
      "date": 1703856127054
    },
    {
      "type": "edit",
      "id": "d145214312bfec04",
      "item": {
        "type": "markdown",
        "id": "d145214312bfec04",
        "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”."
      },
      "date": 1703856132040
    },
    {
      "type": "add",
      "id": "43d1cc7247d60225",
      "item": {
        "type": "markdown",
        "id": "43d1cc7247d60225",
        "text": "[…]"
      },
      "after": "8a2e63fd807cd031",
      "date": 1703856158343
    },
    {
      "type": "add",
      "id": "9361525a4ede8220",
      "item": {
        "type": "markdown",
        "id": "9361525a4ede8220",
        "text": "A problem with these two approaches is that, if you have something like:"
      },
      "after": "8a2e63fd807cd031",
      "date": 1703856198010
    },
    {
      "item": {
        "type": "code",
        "id": "e7b758816b456107",
        "text": "    interface Counter { \n      next(): Int; \n    } "
      },
      "id": "e7b758816b456107",
      "type": "add",
      "after": "7f36d85b891c6c4c",
      "date": 1703856206985
    },
    {
      "id": "e7b758816b456107",
      "type": "move",
      "order": [
        "20552725b101f341",
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c"
      ],
      "date": 1703856212086,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1703856220026
    },
    {
      "type": "edit",
      "id": "43d1cc7247d60225",
      "item": {
        "type": "markdown",
        "id": "43d1cc7247d60225",
        "text": "Then all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:"
      },
      "date": 1703856252525
    },
    {
      "type": "add",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "[…]"
      },
      "after": "43d1cc7247d60225",
      "date": 1703856252868
    },
    {
      "item": {
        "type": "factory",
        "id": "c339fa62fcdaa88b"
      },
      "id": "c339fa62fcdaa88b",
      "type": "add",
      "after": "7f36d85b891c6c4c",
      "date": 1703856264442
    },
    {
      "type": "edit",
      "id": "c339fa62fcdaa88b",
      "item": {
        "type": "code",
        "id": "c339fa62fcdaa88b",
        "text": "    counter1 = { \n      next() { return 1 } \n    }; \n     \n    counter2 = { \n      next() { return randomInt(1, 100) } \n    } \n     \n    counter3 = { \n      value: 1, \n      next() { return this.value / 2 } \n    } "
      },
      "date": 1703856269192
    },
    {
      "id": "c339fa62fcdaa88b",
      "type": "move",
      "order": [
        "20552725b101f341",
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c"
      ],
      "date": 1703856287356
    },
    {
      "type": "edit",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]\n."
      },
      "date": 1703856302592
    },
    {
      "type": "edit",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]].\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]."
      },
      "date": 1703856326823
    },
    {
      "type": "edit",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]].\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either [3]."
      },
      "date": 1703856453859
    },
    {
      "type": "edit",
      "id": "16c4ba04e0bf75eb",
      "item": {
        "type": "markdown",
        "id": "16c4ba04e0bf75eb",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the behaviour of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s completely useless for a view of [[Objects as Behaviour]].\n\n\nOf course, as soon as you start asking “does this object do the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either[3]."
      },
      "date": 1703856469625
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703863067789
    },
    {
      "type": "remove",
      "id": "20552725b101f341",
      "date": 1703863076056
    },
    {
      "id": "ba2fc3eafab5e292",
      "type": "add",
      "item": {
        "type": "video",
        "id": "ba2fc3eafab5e292",
        "text": "YOUTUBE AnrlSqtpOkw\nTribute to Ted Nelson at Intertwingled Festival by Alan Kay, Bonnie MacBird"
      },
      "after": "aa5df413d00700d3",
      "attribution": {
        "page": "2023-12-31"
      },
      "date": 1704021660249
    },
    {
      "type": "edit",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "paragraph",
        "id": "aa5df413d00700d3",
        "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were full-duplex.\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like LINDA as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado."
      },
      "date": 1704021665422
    },
    {
      "type": "add",
      "id": "fdfc4988d950b88d",
      "item": {
        "type": "paragraph",
        "id": "fdfc4988d950b88d",
        "text": "Let me start the discussion with readers, here, with three points."
      },
      "after": "aa5df413d00700d3",
      "date": 1704021666649
    },
    {
      "id": "ba2fc3eafab5e292",
      "type": "move",
      "order": [
        "604236f230de9a75",
        "a085daa1319256c6",
        "445175f0c33f7a49",
        "ed4882f2acd77d26",
        "964da54eb1b95bc0",
        "f93bb393c5c0cf4c",
        "a1a5a0cf98bf025c",
        "054846bb1397244c",
        "15c2f146e91c99ed",
        "19a483d723b52c81",
        "cdf0423981d247b0",
        "8529156add09189b",
        "78bd3bb0ba09a858",
        "d30b51f1c85858ce",
        "63c23c1135f05a38",
        "9d35c2d92831c091",
        "2539b58d08cc3a99",
        "119e9c0883c3e602",
        "d62ef64cc402cc99",
        "939940910a95498c",
        "34c346ab600ee576",
        "ec2d82b0d3ace017",
        "f322f7f836e53eb6",
        "41f5317aef39a03f",
        "ab9254fcd69fd2aa",
        "bdb01a0943055321",
        "aa5df413d00700d3",
        "ba2fc3eafab5e292",
        "fdfc4988d950b88d",
        "9bc3702b5cb190e9",
        "a8c562d6e5ec0551",
        "e7fa159d4146488d",
        "e9e4e669f11bd271",
        "357cf905780a950f",
        "7e3bbdd5c2ad3bdf",
        "7d7c0360a7068f0b",
        "f8b2b8e3bfc3856d",
        "4428c1a77bd206c5",
        "9555d42403421e9b",
        "8c4354e2ce43ed99",
        "2b1bc89d5894a606",
        "aa24c609049a7b07",
        "ad74e462298d43ca",
        "d145214312bfec04",
        "90c891c42c56fd5f",
        "8a2e63fd807cd031",
        "9361525a4ede8220",
        "e7b758816b456107",
        "43d1cc7247d60225",
        "c339fa62fcdaa88b",
        "16c4ba04e0bf75eb",
        "d8287e16d3ca293f",
        "d70e4b9a39bf4c9f",
        "5625d3b0ad698829",
        "7f36d85b891c6c4c"
      ],
      "date": 1704021671387
    }
  ]
}