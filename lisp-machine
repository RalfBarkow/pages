{
  "title": "Lisp Machine",
  "story": [
    {
      "type": "html",
      "text": "Lisp-based computers developed at MIT and Xerox. The MIT line went commercial with [[Symbolics Machine]], [[Lisp Machines Incorporated]] (LMI), and later [[Texas Instruments Explorer]] which subsumed LMI. Commodity hardware ([[Moores Law]]) and better compiler techniques erased the cost/benefit ratio for a special purpose [[Lisp Machine]].",
      "id": "c0edc789461d916f2e387947bdba55fc"
    },
    {
      "type": "html",
      "text": "\nThere is an emulator for the CADR (MITs second generation [[Lisp Machine]]) at [http://www.heeltoe.com/retro/cadr/ www.heeltoe.com]",
      "id": "15befb3717097293b9e6d959c5ed95c0"
    },
    {
      "type": "html",
      "text": "\nSee [http://pt.withington.org/publications/LispM.html pt.withington.org]",
      "id": "d2387dbf2dd343e91680a380b9a9daee"
    },
    {
      "type": "html",
      "text": "\nLisp Machine Manual version 1.4 Jan 1984, 1 PDF file per chapter, see directory [http://www.bitsavers.org/pdf/mit/cadr/chinual_6thEd_Jan84/ www.bitsavers.org]",
      "id": "88e6a392cdbfd9c16e52a58a4b35e64a"
    },
    {
      "type": "html",
      "text": "\"A Few Things I Know About Lisp Machines\" -- extensive notes by someone who bought one post-2000 to see what they were all about. [http://fare.tunes.org/LispM.html fare.tunes.org]",
      "id": "228ef6122c293d46a61ab1be84b899cc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed78279a9001c718a35e8614b2d5c982"
    },
    {
      "type": "html",
      "text": "\"Lisp Machine\" is a generic term. A Lisp Machine is a computer whose operating system and applications are written in Lisp. There were commercial vendors which offered such systems. Lisp Machines have been developed for AI programming in the mid 70s, because machines at that time were not powerful enough for complex AI software. It lead to the first workstations with megapixel screen, networking, large memory, multiple processes, mouse, graphical user interface, etc. Often Lisp Machines have hardware support for special facilities needed by Lisp - like Garbage Collection. The commercial Lisp Machines were setting standards for interactive programming environments.",
      "id": "5a1e53b8fa7be7354d6a31e1f156e4e1"
    },
    {
      "type": "html",
      "text": "\nXerox' [[Inter Lisp]] D systems were one branch. Cool machines.",
      "id": "fde89a4e1c794e360473a5db96f62ad2"
    },
    {
      "type": "html",
      "text": "\nAt roughly the same time, the MIT AI Lab created a Lisp machine for their AI research. These systems later were commercialized by companies such as Symbolics, Lisp Machines Inc. and Texas Instruments . These companies created their own machines.",
      "id": "acf7e54b155a3b4039a4be0f0c00fd02"
    },
    {
      "type": "html",
      "text": "With the \"[[Ai Winter]]\", commercial Lisp Machines disappeared. Emulators of Xerox and Symbolics systems are still available.",
      "id": "307e43c0b73010b35fcba09c9e9f8dbe"
    },
    {
      "type": "html",
      "text": " Even more important than the [[Ai Winter]], actually, was Moore's Law, which (not for the first nor last time in history) made the price/performance of the Symbolics [[Lisp Machine]] worse than that of general purpose CPU systems at an very quickly increasing rate.",
      "id": "a4a708067b51cb3b0a3c8fb6a8c4aec5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed78279a9001c718a35e8614b2d5c982"
    },
    {
      "type": "html",
      "text": "Here's a whacky question:  If there's so many bootable [[Forth Language]] flavors out there ([[Enth Forth]] being the most memorable example) how come there aren't any bootable [[Lisp Language]] floppies?  Having a Lisp run on bare hardware with shadow blocks would be a pretty sweet deal. -- [[Mike Godfrey]] (who wants to write one but wouldn't know where to start)",
      "id": "4e6f9d5a39247981214419af0020683f"
    },
    {
      "type": "html",
      "text": "\nPS: Are there any [[Lisp Language]] implementations out there written using raw x86 BIOS calls?  Finding a free, tiny one of those would be a great step toward making a lispy operating system.",
      "id": "c30c57176e8ae87d10c207d85d76b164"
    },
    {
      "type": "html",
      "text": "\nPPS: Sorry if I've posted this on the wrong topic.",
      "id": "de9ed57b427a5dc820a4297d7c8346fe"
    },
    {
      "type": "html",
      "text": " Checkout Movitz [http://common-lisp.net/project/movitz/ common-lisp.net] - But the reason why there are so many [[Forth Language]] flavors for that purpose is probably because Forth is damn close to hardware while Lithp is far away from it. That's why there were [[Lisp Machines]] after all.",
      "id": "45ec44808d165d3e5f58866083cd4d07"
    },
    {
      "type": "html",
      "text": "<i>[[Mz Scheme]] uses the OS Kit to run on bare hardware as its own OS.</i>",
      "id": "fbf5800ce9f9ebc48c09c54f2ad54b7e"
    },
    {
      "type": "html",
      "text": "<b>Whoa!!</b> You are kidding, of course. Raw BIOS to build your OS on?!? Talk about pokey! There's a reason Windoze uses a Hardware Abstraction Layer to get some performance out of the underlying machine metalics.",
      "id": "09962646eb86059a81b59c1409e2fe08"
    },
    {
      "type": "html",
      "text": " How do you get from \"OS Kit\" to \"Raw BIOS\"? And the usual point of a HAL is for ease of programming and/or portability, not for performance. Are you sure that Windoze uses HAL in a way that gives better performance than without? That seems very odd.",
      "id": "55f3cc3f9a0cbcfbe1b031990ea1be2f"
    },
    {
      "type": "html",
      "text": "\nThe x86 BIOS is extremely crusty and slow these days.  Nothing big uses it for anything other than to load a bootloader off the disk that can get the machine into protected mode as fast as possible.  Once in protected mode calling the BIOS becomes rather a chore.  The \"OS Kit\" mentioned above talks to the raw hardware, not the raw BIOS.  There is a big difference.",
      "id": "3f370ecdaad3a79fa1b901341db58041"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed78279a9001c718a35e8614b2d5c982"
    },
    {
      "type": "html",
      "text": "The reason there are tons of [[Forth Language]] implementations is because Forth is <i>easy to write.</i>  The standard for Forth is diminutive compared to [[Common Lisp]].  It's even simpler than Scheme's.  It is entirely possible to implement a small Lisp-alike that runs on bare hardware.  But, it will always be far more complex to write than the equivalent Forth language.",
      "id": "c4a174a7c51bc0b52f8a8516e9a23611"
    },
    {
      "type": "html",
      "text": "Forth lacks any form of memory management, save a simple dictionary space pointer.  Everything from [0,p) is allocated, and [p,ADDRESS_MAX) is free.  It literally is as simple as that.",
      "id": "509814a3954844045e630b01e10bd040"
    },
    {
      "type": "html",
      "text": "Forth lacks macros, and therefore, doesn't need to implement a macro processor.  Forth uses [[Immediate Words]] instead, which are just as powerful, if somewhat harder to use, and a whole lot simpler to implement.",
      "id": "5f3be8060fd1bbb09efa96d4529d809f"
    },
    {
      "type": "html",
      "text": "Forth lacks a reader.  Again, it relies on immediate words for forward parsing while compiling.  Same mechanism; no need for separating macros and reader macros.",
      "id": "3a1a72715d349f8131ca31d9d1b30f59"
    },
    {
      "type": "html",
      "text": "Forth lacks any distinction between interpretation and compilation.  When you define a word in Forth, it's compiled.  Always.  There simply is no choice in the matter.  This eliminates the need to support both interpreted and compiled forms of a (defun) form.",
      "id": "5d7f04262d201659a9993f6b5eb96007"
    },
    {
      "type": "html",
      "text": "Forth uses a very simple token parser for is lexer, and has <i>no</i> parser to speak of otherwise.  Hence, there is no such thing as a Forth analog to (read).  You can read a string and evaluate it, but that's not really the same thing.  There is no structured, internal representation of data or code.",
      "id": "ec81a15f9518d3ff7ba575c95cc49aa4"
    },
    {
      "type": "html",
      "text": "Forth is typeless -- more accurately it supports one, and only one, system-wide type: the cell.  The cell is usually the same number of bits as the widest value the underlying processor can work with comfortably.  Any form of Lisp I can think of, in the meanwhile, has a range of different types to support.",
      "id": "5367be5ce6c04ed384530f402e828c64"
    },
    {
      "type": "html",
      "text": "Etc...",
      "id": "95a81db6886fd0797be53457c81b7ab3"
    },
    {
      "type": "html",
      "text": "\nOne of the biggest challenges is to write a good performance garbage collector.  There are tons available to re-use, but now you need a static or dynamic linker when building your language's core.  Forth does away with this, since it's dictionary management is inherently LIFO.  It's MUCH simpler.  You can implement Forth's dictionary management words in 15 minutes in raw x86 machine language (not even assembler).  You'll need a student body at a high-visibility school like MIT to get a decent GC implementation.",
      "id": "31793028afc7784b981a4b2a6c4f4368"
    },
    {
      "type": "html",
      "text": "\nThis is not to slam Lisp, however.  [[Common Lisp]] is, to me, very fun to code in, even though I haven't done a whole lot of it yet.",
      "id": "9d3579f5c9bc21b843d9e0950098626a"
    },
    {
      "type": "html",
      "text": "--[[Samuel Falvo]]",
      "id": "50e4abde177a4c58c50c2647fd9552ac"
    },
    {
      "type": "html",
      "text": "\nFirst, what you say is true of [[Common Lisp]], but there's nothing (well, nothing but lack of [[Copious Free Time]]) preventing someone from creating a Lisp dialect that can be as simple to implement as a simple Forth implementation.  Such a dialect, however, would of necessity be close to the hardware, and wouldn't have garbage collection, types, and other things we tend to take for granted.",
      "id": "e11972a9bfad4e54fb07c96a8a4f7574"
    },
    {
      "type": "html",
      "text": "\nSecond, when I was toying with [[Ruby Language]] a few years ago, and had to deal with their system for dealing with different versions of Ruby (which advanced fast enough that it conflicted with Debian's package system), it occurred to me that language ecosystems are literally their own operating system environments--they just piggy-back on other systems.  (Later I learned about [[Python Language]] and Pip, which only reinforces my conclusions.)  I have thought about how interesting it would be to write a [[Linux Kernel]] using [[Common Lisp]]...but that would involve writing a scheduler, functionality for disk access, ways to keep track of processes, etc (and would involve more of this [[Copious Free Time]] I keep hearing about).   People like to bemoan the fact that there doesn't seem to be much research in developing Operating Systems, but there's a good reason this doesn't happen:  developing a new operating system is <i>hard</i>!  (That, and such bemoaning ignores the fact that research and new things happen more often than we realize; it's just hard to see, because it's in the background of our typical computer use.)",
      "id": "a21a2716a2b9e908b36934d133e0e539"
    },
    {
      "type": "html",
      "text": "\nIn any case, I don't think your observations on [[Common Lisp]] are a slam at all:  when [[John Mc Carthy]] started developing [[Lisp Language]], he chose garbage collection, because he wanted to work with differential equations in an elegant manner.  It is a choice that has advanced memory management in ways he couldn't have imagined at the time!  And it is a choice that has benefited all of us greatly, even if it makes it more difficult (but not impossible) to write [[Common Lisp]] and friends \"close to the metal\".",
      "id": "6507ee10f4893aaa5b9d6f82db61ea5a"
    },
    {
      "type": "html",
      "text": "--Alpheus",
      "id": "a45c090bb45d7ceb0897754600853428"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed78279a9001c718a35e8614b2d5c982"
    },
    {
      "type": "html",
      "text": "<i>Several [[Lisp Machine]] innovations have found their way into general-purpose microprocessors.  One is software instruction emulation (where an unsupported machine instruction causes a processor exception; so that the OS can emulate the instruction in SW), see </i> [http://pt.withington.org/publications/LispM.html pt.withington.org] ",
      "id": "2714c6fc0416c02c4da6847f1bad6ec3"
    },
    {
      "type": "html",
      "text": " I did not recall that this innovation originated with [[Lisp Machine]]; do you have a citation? I remember that the PDP 11, for instance, used this technique to simulate floating point if the optional expensive FPU wasn't installed, and I thought it predated the PDP 11 by a good bit.",
      "id": "d3ec63d85c17cbfce89e1ed297ab8312"
    },
    {
      "type": "html",
      "text": " The link above.  Of course, that could just be the [[Smug Lisp Weenie]]s trying to take credit for <i>hardware</i> innovations as well... :) :) :) :) :)",
      "id": "aa0f79bb8ceccc629103efc60aada4cf"
    },
    {
      "type": "html",
      "text": " The link above uses the word \"novel\", which sounds like they mean \"invented\", but apparently doesn't mean that, since they also say using microprogramming was \"novel\", and I know for a fact that they didn't invent <b>that</b>. Here's a reference that says it goes back as far as 1951, in fact: [http://research.microsoft.com/~gbell/Computer_Structures_Principles_and_Examples/csp0106.htm research.microsoft.com] -- a bit earlier than I would have guessed, but for sure Burroughs used microprogramming in the 1960s, for instance.",
      "id": "a449dddd3f73ca21df41cdfdec0e7da7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed78279a9001c718a35e8614b2d5c982"
    },
    {
      "type": "html",
      "text": "It may be that [[Lisp Machines Are Coming Back]]",
      "id": "de0f5a15f14f5c164d9bdee77d1e5194"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed78279a9001c718a35e8614b2d5c982"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] (since the point was to support Lisp)",
      "id": "c39dc78410705068ee6354a881b6f95f"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?LispMachine c2.com]",
      "id": "26508d29249a28d630685fcb03e305c2"
    }
  ],
  "journal": [
    {
      "date": 1378830589000,
      "id": "f8b53e458b3de43e966d6d87b676d0fd",
      "type": "create",
      "item": {
        "title": "Lisp Machine",
        "story": [
          {
            "type": "html",
            "text": "Lisp-based computers developed at MIT and Xerox. The MIT line went commercial with [[Symbolics Machine]], [[Lisp Machines Incorporated]] (LMI), and later [[Texas Instruments Explorer]] which subsumed LMI. Commodity hardware ([[Moores Law]]) and better compiler techniques erased the cost/benefit ratio for a special purpose [[Lisp Machine]].",
            "id": "c0edc789461d916f2e387947bdba55fc"
          },
          {
            "type": "html",
            "text": "\nThere is an emulator for the CADR (MITs second generation [[Lisp Machine]]) at [http://www.heeltoe.com/retro/cadr/ www.heeltoe.com]",
            "id": "15befb3717097293b9e6d959c5ed95c0"
          },
          {
            "type": "html",
            "text": "\nSee [http://pt.withington.org/publications/LispM.html pt.withington.org]",
            "id": "d2387dbf2dd343e91680a380b9a9daee"
          },
          {
            "type": "html",
            "text": "\nLisp Machine Manual version 1.4 Jan 1984, 1 PDF file per chapter, see directory [http://www.bitsavers.org/pdf/mit/cadr/chinual_6thEd_Jan84/ www.bitsavers.org]",
            "id": "88e6a392cdbfd9c16e52a58a4b35e64a"
          },
          {
            "type": "html",
            "text": "\"A Few Things I Know About Lisp Machines\" -- extensive notes by someone who bought one post-2000 to see what they were all about. [http://fare.tunes.org/LispM.html fare.tunes.org]",
            "id": "228ef6122c293d46a61ab1be84b899cc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed78279a9001c718a35e8614b2d5c982"
          },
          {
            "type": "html",
            "text": "\"Lisp Machine\" is a generic term. A Lisp Machine is a computer whose operating system and applications are written in Lisp. There were commercial vendors which offered such systems. Lisp Machines have been developed for AI programming in the mid 70s, because machines at that time were not powerful enough for complex AI software. It lead to the first workstations with megapixel screen, networking, large memory, multiple processes, mouse, graphical user interface, etc. Often Lisp Machines have hardware support for special facilities needed by Lisp - like Garbage Collection. The commercial Lisp Machines were setting standards for interactive programming environments.",
            "id": "5a1e53b8fa7be7354d6a31e1f156e4e1"
          },
          {
            "type": "html",
            "text": "\nXerox' [[Inter Lisp]] D systems were one branch. Cool machines.",
            "id": "fde89a4e1c794e360473a5db96f62ad2"
          },
          {
            "type": "html",
            "text": "\nAt roughly the same time, the MIT AI Lab created a Lisp machine for their AI research. These systems later were commercialized by companies such as Symbolics, Lisp Machines Inc. and Texas Instruments . These companies created their own machines.",
            "id": "acf7e54b155a3b4039a4be0f0c00fd02"
          },
          {
            "type": "html",
            "text": "With the \"[[Ai Winter]]\", commercial Lisp Machines disappeared. Emulators of Xerox and Symbolics systems are still available.",
            "id": "307e43c0b73010b35fcba09c9e9f8dbe"
          },
          {
            "type": "html",
            "text": " Even more important than the [[Ai Winter]], actually, was Moore's Law, which (not for the first nor last time in history) made the price/performance of the Symbolics [[Lisp Machine]] worse than that of general purpose CPU systems at an very quickly increasing rate.",
            "id": "a4a708067b51cb3b0a3c8fb6a8c4aec5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed78279a9001c718a35e8614b2d5c982"
          },
          {
            "type": "html",
            "text": "Here's a whacky question:  If there's so many bootable [[Forth Language]] flavors out there ([[Enth Forth]] being the most memorable example) how come there aren't any bootable [[Lisp Language]] floppies?  Having a Lisp run on bare hardware with shadow blocks would be a pretty sweet deal. -- [[Mike Godfrey]] (who wants to write one but wouldn't know where to start)",
            "id": "4e6f9d5a39247981214419af0020683f"
          },
          {
            "type": "html",
            "text": "\nPS: Are there any [[Lisp Language]] implementations out there written using raw x86 BIOS calls?  Finding a free, tiny one of those would be a great step toward making a lispy operating system.",
            "id": "c30c57176e8ae87d10c207d85d76b164"
          },
          {
            "type": "html",
            "text": "\nPPS: Sorry if I've posted this on the wrong topic.",
            "id": "de9ed57b427a5dc820a4297d7c8346fe"
          },
          {
            "type": "html",
            "text": " Checkout Movitz [http://common-lisp.net/project/movitz/ common-lisp.net] - But the reason why there are so many [[Forth Language]] flavors for that purpose is probably because Forth is damn close to hardware while Lithp is far away from it. That's why there were [[Lisp Machines]] after all.",
            "id": "45ec44808d165d3e5f58866083cd4d07"
          },
          {
            "type": "html",
            "text": "<i>[[Mz Scheme]] uses the OS Kit to run on bare hardware as its own OS.</i>",
            "id": "fbf5800ce9f9ebc48c09c54f2ad54b7e"
          },
          {
            "type": "html",
            "text": "<b>Whoa!!</b> You are kidding, of course. Raw BIOS to build your OS on?!? Talk about pokey! There's a reason Windoze uses a Hardware Abstraction Layer to get some performance out of the underlying machine metalics.",
            "id": "09962646eb86059a81b59c1409e2fe08"
          },
          {
            "type": "html",
            "text": " How do you get from \"OS Kit\" to \"Raw BIOS\"? And the usual point of a HAL is for ease of programming and/or portability, not for performance. Are you sure that Windoze uses HAL in a way that gives better performance than without? That seems very odd.",
            "id": "55f3cc3f9a0cbcfbe1b031990ea1be2f"
          },
          {
            "type": "html",
            "text": "\nThe x86 BIOS is extremely crusty and slow these days.  Nothing big uses it for anything other than to load a bootloader off the disk that can get the machine into protected mode as fast as possible.  Once in protected mode calling the BIOS becomes rather a chore.  The \"OS Kit\" mentioned above talks to the raw hardware, not the raw BIOS.  There is a big difference.",
            "id": "3f370ecdaad3a79fa1b901341db58041"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed78279a9001c718a35e8614b2d5c982"
          },
          {
            "type": "html",
            "text": "The reason there are tons of [[Forth Language]] implementations is because Forth is <i>easy to write.</i>  The standard for Forth is diminutive compared to [[Common Lisp]].  It's even simpler than Scheme's.  It is entirely possible to implement a small Lisp-alike that runs on bare hardware.  But, it will always be far more complex to write than the equivalent Forth language.",
            "id": "c4a174a7c51bc0b52f8a8516e9a23611"
          },
          {
            "type": "html",
            "text": "Forth lacks any form of memory management, save a simple dictionary space pointer.  Everything from [0,p) is allocated, and [p,ADDRESS_MAX) is free.  It literally is as simple as that.",
            "id": "509814a3954844045e630b01e10bd040"
          },
          {
            "type": "html",
            "text": "Forth lacks macros, and therefore, doesn't need to implement a macro processor.  Forth uses [[Immediate Words]] instead, which are just as powerful, if somewhat harder to use, and a whole lot simpler to implement.",
            "id": "5f3be8060fd1bbb09efa96d4529d809f"
          },
          {
            "type": "html",
            "text": "Forth lacks a reader.  Again, it relies on immediate words for forward parsing while compiling.  Same mechanism; no need for separating macros and reader macros.",
            "id": "3a1a72715d349f8131ca31d9d1b30f59"
          },
          {
            "type": "html",
            "text": "Forth lacks any distinction between interpretation and compilation.  When you define a word in Forth, it's compiled.  Always.  There simply is no choice in the matter.  This eliminates the need to support both interpreted and compiled forms of a (defun) form.",
            "id": "5d7f04262d201659a9993f6b5eb96007"
          },
          {
            "type": "html",
            "text": "Forth uses a very simple token parser for is lexer, and has <i>no</i> parser to speak of otherwise.  Hence, there is no such thing as a Forth analog to (read).  You can read a string and evaluate it, but that's not really the same thing.  There is no structured, internal representation of data or code.",
            "id": "ec81a15f9518d3ff7ba575c95cc49aa4"
          },
          {
            "type": "html",
            "text": "Forth is typeless -- more accurately it supports one, and only one, system-wide type: the cell.  The cell is usually the same number of bits as the widest value the underlying processor can work with comfortably.  Any form of Lisp I can think of, in the meanwhile, has a range of different types to support.",
            "id": "5367be5ce6c04ed384530f402e828c64"
          },
          {
            "type": "html",
            "text": "Etc...",
            "id": "95a81db6886fd0797be53457c81b7ab3"
          },
          {
            "type": "html",
            "text": "\nOne of the biggest challenges is to write a good performance garbage collector.  There are tons available to re-use, but now you need a static or dynamic linker when building your language's core.  Forth does away with this, since it's dictionary management is inherently LIFO.  It's MUCH simpler.  You can implement Forth's dictionary management words in 15 minutes in raw x86 machine language (not even assembler).  You'll need a student body at a high-visibility school like MIT to get a decent GC implementation.",
            "id": "31793028afc7784b981a4b2a6c4f4368"
          },
          {
            "type": "html",
            "text": "\nThis is not to slam Lisp, however.  [[Common Lisp]] is, to me, very fun to code in, even though I haven't done a whole lot of it yet.",
            "id": "9d3579f5c9bc21b843d9e0950098626a"
          },
          {
            "type": "html",
            "text": "--[[Samuel Falvo]]",
            "id": "50e4abde177a4c58c50c2647fd9552ac"
          },
          {
            "type": "html",
            "text": "\nFirst, what you say is true of [[Common Lisp]], but there's nothing (well, nothing but lack of [[Copious Free Time]]) preventing someone from creating a Lisp dialect that can be as simple to implement as a simple Forth implementation.  Such a dialect, however, would of necessity be close to the hardware, and wouldn't have garbage collection, types, and other things we tend to take for granted.",
            "id": "e11972a9bfad4e54fb07c96a8a4f7574"
          },
          {
            "type": "html",
            "text": "\nSecond, when I was toying with [[Ruby Language]] a few years ago, and had to deal with their system for dealing with different versions of Ruby (which advanced fast enough that it conflicted with Debian's package system), it occurred to me that language ecosystems are literally their own operating system environments--they just piggy-back on other systems.  (Later I learned about [[Python Language]] and Pip, which only reinforces my conclusions.)  I have thought about how interesting it would be to write a [[Linux Kernel]] using [[Common Lisp]]...but that would involve writing a scheduler, functionality for disk access, ways to keep track of processes, etc (and would involve more of this [[Copious Free Time]] I keep hearing about).   People like to bemoan the fact that there doesn't seem to be much research in developing Operating Systems, but there's a good reason this doesn't happen:  developing a new operating system is <i>hard</i>!  (That, and such bemoaning ignores the fact that research and new things happen more often than we realize; it's just hard to see, because it's in the background of our typical computer use.)",
            "id": "a21a2716a2b9e908b36934d133e0e539"
          },
          {
            "type": "html",
            "text": "\nIn any case, I don't think your observations on [[Common Lisp]] are a slam at all:  when [[John Mc Carthy]] started developing [[Lisp Language]], he chose garbage collection, because he wanted to work with differential equations in an elegant manner.  It is a choice that has advanced memory management in ways he couldn't have imagined at the time!  And it is a choice that has benefited all of us greatly, even if it makes it more difficult (but not impossible) to write [[Common Lisp]] and friends \"close to the metal\".",
            "id": "6507ee10f4893aaa5b9d6f82db61ea5a"
          },
          {
            "type": "html",
            "text": "--Alpheus",
            "id": "a45c090bb45d7ceb0897754600853428"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed78279a9001c718a35e8614b2d5c982"
          },
          {
            "type": "html",
            "text": "<i>Several [[Lisp Machine]] innovations have found their way into general-purpose microprocessors.  One is software instruction emulation (where an unsupported machine instruction causes a processor exception; so that the OS can emulate the instruction in SW), see </i> [http://pt.withington.org/publications/LispM.html pt.withington.org] ",
            "id": "2714c6fc0416c02c4da6847f1bad6ec3"
          },
          {
            "type": "html",
            "text": " I did not recall that this innovation originated with [[Lisp Machine]]; do you have a citation? I remember that the PDP 11, for instance, used this technique to simulate floating point if the optional expensive FPU wasn't installed, and I thought it predated the PDP 11 by a good bit.",
            "id": "d3ec63d85c17cbfce89e1ed297ab8312"
          },
          {
            "type": "html",
            "text": " The link above.  Of course, that could just be the [[Smug Lisp Weenie]]s trying to take credit for <i>hardware</i> innovations as well... :) :) :) :) :)",
            "id": "aa0f79bb8ceccc629103efc60aada4cf"
          },
          {
            "type": "html",
            "text": " The link above uses the word \"novel\", which sounds like they mean \"invented\", but apparently doesn't mean that, since they also say using microprogramming was \"novel\", and I know for a fact that they didn't invent <b>that</b>. Here's a reference that says it goes back as far as 1951, in fact: [http://research.microsoft.com/~gbell/Computer_Structures_Principles_and_Examples/csp0106.htm research.microsoft.com] -- a bit earlier than I would have guessed, but for sure Burroughs used microprogramming in the 1960s, for instance.",
            "id": "a449dddd3f73ca21df41cdfdec0e7da7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed78279a9001c718a35e8614b2d5c982"
          },
          {
            "type": "html",
            "text": "It may be that [[Lisp Machines Are Coming Back]]",
            "id": "de0f5a15f14f5c164d9bdee77d1e5194"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed78279a9001c718a35e8614b2d5c982"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] (since the point was to support Lisp)",
            "id": "c39dc78410705068ee6354a881b6f95f"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?LispMachine c2.com]",
            "id": "26508d29249a28d630685fcb03e305c2"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1631860194052
    }
  ]
}