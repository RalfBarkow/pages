{
  "title": "Circuit Structure Inverter",
  "story": [
    {
      "type": "paragraph",
      "id": "7f2cd2e125822997",
      "text": "Using lex, yacc and cons-cells to transform a node-centric hierarchical circuit to a cad-ready net-centric model. This would be the \"dual\" of the initial representation."
    },
    {
      "type": "pagefold",
      "id": "5738f57bdd5da032",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "c71e973564ad0037",
      "text": "From a conversation August, 2023."
    },
    {
      "type": "paragraph",
      "id": "a85ff8690d98497e",
      "text": "There is something magical about [[lisp]], but it might not be what you think. Paul shared with me ([[Ward Cunningham]]) yesterday this 2010 presentation by Closure author [[Rich Hickey]] where he describes the part of problem solving best done with eyes closed. I once spent a few weeks at MIT and got to know folks from their AI lab, a hotbed of lisp. I remember observing their confidence, \"if they could think it, they could program it.\" This led me to study their \"flavors\" version looking for that magic. But as Hickey explains, the thinking-it is actually the hard part. [https://www.youtube.com/watch?v=f84n5oFoZBc youtube]"
    },
    {
      "type": "video",
      "id": "b4531db8430eeb2f",
      "text": "YOUTUBE f84n5oFoZBc\nRich Hickey's second, \"philosophical\" talk at the first Clojure Conj, in Durham, North Carolina on October 23rd, 2010. "
    },
    {
      "type": "paragraph",
      "id": "27b5e53179a29e05",
      "text": "Yeah, this also occurs to me at times. As I'm doodling in C I find it that all memory problems are solved easily after I sit down for a bit to think through as if it were Rust move semantics.\nBy the way, progressing with my Web0/JS0 interpreter in C (after completing it in JS), I do think about whether it would simplify and improve the overall implementation if I rather implemented a \"buggy Lisp interpreter in C\" first and finished parsing & evaluation in that."
    },
    {
      "type": "paragraph",
      "id": "652771cac29bcf08",
      "text": "I kinda did the lisp in c thing once. I was exploring [[VLSI]] opportunities from the computer research lab. The \"pros\" in our IC CAD group suggested I come work with them for a month or so to learn how the real work is done. I thought of this as a vacation and made some lasting friends. But they had a specific problem in mind: Text to Text translation of a circuit description language. They couldn't get a yacc parser to work and asked me to help. I understood yacc's weird messages so that part was easy. But the next step was to take the hierarchal circuit description and turn it inside out. To do this I wrote [[CONS]] cell functions and the typical recursive traversals. Their problem reduced to a page of c code. The trick was I never had to reclaim any memory because once the work was done the program terminated."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Circuit Structure Inverter",
        "story": []
      },
      "date": 1691088212582
    },
    {
      "item": {
        "type": "factory",
        "id": "a85ff8690d98497e"
      },
      "id": "a85ff8690d98497e",
      "type": "add",
      "date": 1691088224293
    },
    {
      "type": "edit",
      "id": "a85ff8690d98497e",
      "item": {
        "type": "paragraph",
        "id": "a85ff8690d98497e",
        "text": "There is something magical about lisp, but it might not be what you think. Paul shared with me yesterday this 2010 presentation by Closure author Rich Hickey where he describes the part of problem solving best done with eyes closed. I once spent a few weeks at MIT and got to know folks from their AI lab, a hotbed of lisp. I remember observing their confidence, \"if they could think it, they could program it.\" This led me to study their \"flavors\" version looking for that magic. But as Hickey explains, the thinking-it is actually the hard part. https://www.youtube.com/watch?v=f84n5oFoZBc\nbkil\nYeah, this also occurs to me at times. As I'm doodling in C I find it that all memory problems are solved easily after I sit down for a bit to think through as if it were Rust move semantics.\nBy the way, progressing with my Web0/JS0 interpreter in C (after completing it in JS), I do think about whether it would simplify and improve the overall implementation if I rather implemented a \"buggy Lisp interpreter in C\" first and finished parsing & evaluation in that.\nWard@Ward:matrix.org\nI kinda did the lisp in c thing once. I was exploring VLSI opportunities from the computer research lab. The \"pros\" in our IC CAD group suggested I come work with them for a month or so to learn how the real work is done. I thought of this as a vacation and made some lasting friends. But they had a specific problem in mind: Text to Text translation of a circuit description language. They couldn't get a yacc parser to work and asked me to help. I understood yacc's weird messages so that part was easy. But the next step was to take the hierarchal circuit description and turn it inside out. To do this I wrote CONS cell functions and the typical recursive traversals. Their problem reduced to a page of c code. The trick was I never had to reclaim any memory because once the work was done the program terminated."
      },
      "date": 1691088229185
    },
    {
      "type": "edit",
      "id": "a85ff8690d98497e",
      "item": {
        "type": "paragraph",
        "id": "a85ff8690d98497e",
        "text": "There is something magical about lisp, but it might not be what you think. Paul shared with me yesterday this 2010 presentation by Closure author Rich Hickey where he describes the part of problem solving best done with eyes closed. I once spent a few weeks at MIT and got to know folks from their AI lab, a hotbed of lisp. I remember observing their confidence, \"if they could think it, they could program it.\" This led me to study their \"flavors\" version looking for that magic. But as Hickey explains, the thinking-it is actually the hard part. [https://www.youtube.com/watch?v=f84n5oFoZBc youtube]"
      },
      "date": 1691088270986
    },
    {
      "type": "add",
      "id": "27b5e53179a29e05",
      "item": {
        "type": "paragraph",
        "id": "27b5e53179a29e05",
        "text": "Yeah, this also occurs to me at times. As I'm doodling in C I find it that all memory problems are solved easily after I sit down for a bit to think through as if it were Rust move semantics.\nBy the way, progressing with my Web0/JS0 interpreter in C (after completing it in JS), I do think about whether it would simplify and improve the overall implementation if I rather implemented a \"buggy Lisp interpreter in C\" first and finished parsing & evaluation in that."
      },
      "after": "a85ff8690d98497e",
      "date": 1691088280836
    },
    {
      "type": "add",
      "id": "652771cac29bcf08",
      "item": {
        "type": "paragraph",
        "id": "652771cac29bcf08",
        "text": "I kinda did the lisp in c thing once. I was exploring VLSI opportunities from the computer research lab. The \"pros\" in our IC CAD group suggested I come work with them for a month or so to learn how the real work is done. I thought of this as a vacation and made some lasting friends. But they had a specific problem in mind: Text to Text translation of a circuit description language. They couldn't get a yacc parser to work and asked me to help. I understood yacc's weird messages so that part was easy. But the next step was to take the hierarchal circuit description and turn it inside out. To do this I wrote CONS cell functions and the typical recursive traversals. Their problem reduced to a page of c code. The trick was I never had to reclaim any memory because once the work was done the program terminated."
      },
      "after": "27b5e53179a29e05",
      "date": 1691088298085
    },
    {
      "item": {
        "type": "factory",
        "id": "7f2cd2e125822997"
      },
      "id": "7f2cd2e125822997",
      "type": "add",
      "after": "652771cac29bcf08",
      "date": 1691088325860
    },
    {
      "type": "edit",
      "id": "7f2cd2e125822997",
      "item": {
        "type": "paragraph",
        "id": "7f2cd2e125822997",
        "text": "Using lex, yacc and cons-cells to transform a node-centric hierarchical circuit to a cad-ready net-centric model."
      },
      "date": 1691088334496
    },
    {
      "id": "7f2cd2e125822997",
      "type": "move",
      "order": [
        "7f2cd2e125822997",
        "a85ff8690d98497e",
        "27b5e53179a29e05",
        "652771cac29bcf08"
      ],
      "date": 1691088339914
    },
    {
      "item": {
        "type": "factory",
        "id": "5738f57bdd5da032"
      },
      "id": "5738f57bdd5da032",
      "type": "add",
      "after": "652771cac29bcf08",
      "date": 1691088343950
    },
    {
      "type": "edit",
      "id": "5738f57bdd5da032",
      "item": {
        "type": "pagefold",
        "id": "5738f57bdd5da032",
        "text": "."
      },
      "date": 1691088347155
    },
    {
      "id": "5738f57bdd5da032",
      "type": "move",
      "order": [
        "7f2cd2e125822997",
        "5738f57bdd5da032",
        "a85ff8690d98497e",
        "27b5e53179a29e05",
        "652771cac29bcf08"
      ],
      "date": 1691088352066
    },
    {
      "type": "add",
      "id": "c71e973564ad0037",
      "item": {
        "type": "paragraph",
        "id": "c71e973564ad0037",
        "text": "From a conversation August, 2023."
      },
      "after": "7f2cd2e125822997",
      "date": 1691097327572
    },
    {
      "id": "c71e973564ad0037",
      "type": "move",
      "order": [
        "7f2cd2e125822997",
        "5738f57bdd5da032",
        "c71e973564ad0037",
        "a85ff8690d98497e",
        "27b5e53179a29e05",
        "652771cac29bcf08"
      ],
      "date": 1691097330359
    },
    {
      "type": "edit",
      "id": "7f2cd2e125822997",
      "item": {
        "type": "paragraph",
        "id": "7f2cd2e125822997",
        "text": "Using lex, yacc and cons-cells to transform a node-centric hierarchical circuit to a cad-ready net-centric model. This would be the \"dual\" of the initial representation."
      },
      "date": 1694646100849
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1696365407556
    },
    {
      "type": "edit",
      "id": "a85ff8690d98497e",
      "item": {
        "type": "paragraph",
        "id": "a85ff8690d98497e",
        "text": "There is something magical about lisp, but it might not be what you think. Paul shared with me ([[Ward Cunningham]]) yesterday this 2010 presentation by Closure author Rich Hickey where he describes the part of problem solving best done with eyes closed. I once spent a few weeks at MIT and got to know folks from their AI lab, a hotbed of lisp. I remember observing their confidence, \"if they could think it, they could program it.\" This led me to study their \"flavors\" version looking for that magic. But as Hickey explains, the thinking-it is actually the hard part. [https://www.youtube.com/watch?v=f84n5oFoZBc youtube]"
      },
      "date": 1696365438670
    },
    {
      "type": "edit",
      "id": "652771cac29bcf08",
      "item": {
        "type": "paragraph",
        "id": "652771cac29bcf08",
        "text": "I kinda did the lisp in c thing once. I was exploring [[VLSI]] opportunities from the computer research lab. The \"pros\" in our IC CAD group suggested I come work with them for a month or so to learn how the real work is done. I thought of this as a vacation and made some lasting friends. But they had a specific problem in mind: Text to Text translation of a circuit description language. They couldn't get a yacc parser to work and asked me to help. I understood yacc's weird messages so that part was easy. But the next step was to take the hierarchal circuit description and turn it inside out. To do this I wrote CONS cell functions and the typical recursive traversals. Their problem reduced to a page of c code. The trick was I never had to reclaim any memory because once the work was done the program terminated."
      },
      "date": 1696365571556
    },
    {
      "type": "edit",
      "id": "a85ff8690d98497e",
      "item": {
        "type": "paragraph",
        "id": "a85ff8690d98497e",
        "text": "There is something magical about lisp, but it might not be what you think. Paul shared with me ([[Ward Cunningham]]) yesterday this 2010 presentation by Closure author [[Rich Hickey]] where he describes the part of problem solving best done with eyes closed. I once spent a few weeks at MIT and got to know folks from their AI lab, a hotbed of lisp. I remember observing their confidence, \"if they could think it, they could program it.\" This led me to study their \"flavors\" version looking for that magic. But as Hickey explains, the thinking-it is actually the hard part. [https://www.youtube.com/watch?v=f84n5oFoZBc youtube]"
      },
      "date": 1696365736159
    },
    {
      "item": {
        "type": "factory",
        "id": "b4531db8430eeb2f"
      },
      "id": "b4531db8430eeb2f",
      "type": "add",
      "after": "652771cac29bcf08",
      "date": 1696365751167
    },
    {
      "id": "b4531db8430eeb2f",
      "type": "move",
      "order": [
        "7f2cd2e125822997",
        "5738f57bdd5da032",
        "c71e973564ad0037",
        "a85ff8690d98497e",
        "b4531db8430eeb2f",
        "27b5e53179a29e05",
        "652771cac29bcf08"
      ],
      "date": 1696365760498
    },
    {
      "type": "edit",
      "id": "b4531db8430eeb2f",
      "item": {
        "type": "video",
        "id": "b4531db8430eeb2f",
        "text": "YOUTUBE f84n5oFoZBc"
      },
      "date": 1696365774873
    },
    {
      "type": "edit",
      "id": "b4531db8430eeb2f",
      "item": {
        "type": "video",
        "id": "b4531db8430eeb2f",
        "text": "YOUTUBE f84n5oFoZBc\nRich Hickey's second, \"philosophical\" talk at the first Clojure Conj, in Durham, North Carolina on October 23rd, 2010. "
      },
      "date": 1696365808996
    },
    {
      "type": "edit",
      "id": "652771cac29bcf08",
      "item": {
        "type": "paragraph",
        "id": "652771cac29bcf08",
        "text": "I kinda did the lisp in c thing once. I was exploring [[VLSI]] opportunities from the computer research lab. The \"pros\" in our IC CAD group suggested I come work with them for a month or so to learn how the real work is done. I thought of this as a vacation and made some lasting friends. But they had a specific problem in mind: Text to Text translation of a circuit description language. They couldn't get a yacc parser to work and asked me to help. I understood yacc's weird messages so that part was easy. But the next step was to take the hierarchal circuit description and turn it inside out. To do this I wrote [[CONS]] cell functions and the typical recursive traversals. Their problem reduced to a page of c code. The trick was I never had to reclaim any memory because once the work was done the program terminated."
      },
      "date": 1696367093091
    },
    {
      "type": "edit",
      "id": "a85ff8690d98497e",
      "item": {
        "type": "paragraph",
        "id": "a85ff8690d98497e",
        "text": "There is something magical about [[lisp]], but it might not be what you think. Paul shared with me ([[Ward Cunningham]]) yesterday this 2010 presentation by Closure author [[Rich Hickey]] where he describes the part of problem solving best done with eyes closed. I once spent a few weeks at MIT and got to know folks from their AI lab, a hotbed of lisp. I remember observing their confidence, \"if they could think it, they could program it.\" This led me to study their \"flavors\" version looking for that magic. But as Hickey explains, the thinking-it is actually the hard part. [https://www.youtube.com/watch?v=f84n5oFoZBc youtube]"
      },
      "date": 1696396284893
    }
  ]
}