{
  "title": "elm/parser",
  "story": [
    {
      "type": "paragraph",
      "id": "861fc594cb0394fe",
      "text": "[[Evan Czaplicki]]. 2020. [[Elm Parser]]. [https://package.elm-lang.org/packages/elm/parser/latest/ page]"
    },
    {
      "type": "paragraph",
      "id": "1321e5848dd5255e",
      "text": "⇒ [[Backtracking]] ⇒ Semantics [https://github.com/elm/parser/blob/master/semantics.md#semantics page]  ⇒ [[How Different Parsers Fit Together]]"
    },
    {
      "type": "pagefold",
      "id": "756915f0115ed8e7",
      "text": "~"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "elm-parser",
      "title": "Elm Parser",
      "text": "Regular expressions are quite confusing and difficult to use. This library provides a coherent alternative that handles more cases and produces clearer code. [https://github.com/elm/parser#parser github], [https://package.elm-lang.org/packages/elm/parser/latest page]"
    },
    {
      "type": "paragraph",
      "id": "99f9253ba92aa6ae",
      "text": "⇒ [[Elm Radio]] Episode #6 [[elm/parser]] [https://elm-radio.com/episode/elm-parser/ podcast]"
    },
    {
      "type": "paragraph",
      "id": "1f3efc4fac2328ad",
      "text": "I mean, when you're working with Elm and you can parse things and then having parsed into a nice data structure, you can then use that data structure in Elm and do case statements on this well defined data type. [https://elm-radio.com/episode/elm-parser/#00-03-05 elm-radio]"
    },
    {
      "type": "paragraph",
      "id": "a2063384ea3ea4d8",
      "text": "You expect some kind of order, some kind of syntax. [https://elm-radio.com/episode/elm-parser/#00-07-26 elm-radio]"
    },
    {
      "type": "paragraph",
      "id": "f94911eb4b474632",
      "text": "And if those expectations are not met, then you have a parsing failure."
    },
    {
      "type": "paragraph",
      "id": "86c0a2403b670994",
      "text": "That is a really great point. And that's a great way to frame the distinction."
    },
    {
      "type": "paragraph",
      "id": "1fe271c9b76e6ca5",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-08-46 00-08-46] –  And so parsers are very different because parsers, you're going through one character at a time and eating the symbols to define what the structure of the content is."
    },
    {
      "type": "paragraph",
      "id": "82f1f1574e12ef11",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-20-08 00-20-08] – as soon as you chomp a value, as soon as you eat a character, you've committed down that path."
    },
    {
      "type": "paragraph",
      "id": "2c34ac6e1c49d7cc",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-25-37 00-25-37] –  And then the whole decoder fails. And that's for performance reasons. So what do you do instead?"
    },
    {
      "type": "paragraph",
      "id": "9c004b776741506f",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-28-08 00-28-08] –  You know, a one of list that contains each of those parsers. Instead of that, you're going to say try parsing it as an integer or float."
    },
    {
      "type": "paragraph",
      "id": "61f06e4cf8dcf39c",
      "text": "textOrLink"
    },
    {
      "type": "paragraph",
      "id": "657ff5f9d26772ef",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-36-11 00-36-11] – Start with a hard coded success, get your tests passing as fast as possible. I mean, this is the basic sort of TDD concept of, you know, fake it till you make it where you make it dumb, then make it smarter."
    },
    {
      "type": "paragraph",
      "id": "5f339c5cd7464d26",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-44-43 00-44-43] – So now your data is start set, end set, plus whatever expression data structure you had."
    },
    {
      "type": "paragraph",
      "id": "550a61d14b5379e8",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-45-13 00-45-13] – [[Parser.loop]]"
    },
    {
      "type": "paragraph",
      "id": "83f3e444d7af9a68",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-46-32 00-46-32] – So I think of it kind of like a fold expression in Elm where you can do like list dot fold L where like compared to list dot map list dot map,"
    },
    {
      "type": "paragraph",
      "id": "430590c6305992d0",
      "text": "[https://elm-radio.com/episode/elm-parser/#00-51-36 00-51-36] –  So in Elm parser terminology, that's a dead end."
    },
    {
      "type": "paragraph",
      "id": "b1598b7af6a9fd80",
      "text": "context from loop"
    },
    {
      "type": "paragraph",
      "id": "529bd5d903adba19",
      "text": "[https://elm-radio.com/episode/elm-parser/#01-02-21 01-02-21] –  [[Martin Janacek]] has his Elm in Elm compiler, which is not fully completed, still a work in progress, but that's something to check out and you can look at his talk on that at Elm Europe."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "elm/parser",
        "story": []
      },
      "date": 1694609613917
    },
    {
      "item": {
        "type": "factory",
        "id": "861fc594cb0394fe"
      },
      "id": "861fc594cb0394fe",
      "type": "add",
      "date": 1694609615481
    },
    {
      "type": "edit",
      "id": "861fc594cb0394fe",
      "item": {
        "type": "paragraph",
        "id": "861fc594cb0394fe",
        "text": "Evan Czaplicki. 2018. elm/parser. https://package.elm-lang.org/packages/elm/parser/latest/"
      },
      "date": 1694609617084
    },
    {
      "id": "71eadde9b88255c8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "71eadde9b88255c8",
        "text": "⇒ [[Elm Parser]]"
      },
      "after": "861fc594cb0394fe",
      "attribution": {
        "page": "2023-09-13"
      },
      "date": 1694609633269
    },
    {
      "type": "edit",
      "id": "861fc594cb0394fe",
      "item": {
        "type": "paragraph",
        "id": "861fc594cb0394fe",
        "text": "Evan Czaplicki. 2018. elm/parser. [https://package.elm-lang.org/packages/elm/parser/latest/ page]"
      },
      "date": 1694609831975
    },
    {
      "type": "edit",
      "id": "861fc594cb0394fe",
      "item": {
        "type": "paragraph",
        "id": "861fc594cb0394fe",
        "text": "Evan Czaplicki. 2020. elm/parser. [https://package.elm-lang.org/packages/elm/parser/latest/ page]"
      },
      "date": 1694609861688
    },
    {
      "type": "edit",
      "id": "71eadde9b88255c8",
      "item": {
        "type": "paragraph",
        "id": "71eadde9b88255c8",
        "text": "⇒ "
      },
      "date": 1694609880798
    },
    {
      "type": "edit",
      "id": "861fc594cb0394fe",
      "item": {
        "type": "paragraph",
        "id": "861fc594cb0394fe",
        "text": "Evan Czaplicki. 2020. [[Elm Parser]]. [https://package.elm-lang.org/packages/elm/parser/latest/ page]"
      },
      "date": 1694609888092
    },
    {
      "type": "remove",
      "id": "71eadde9b88255c8",
      "date": 1694609889487
    },
    {
      "type": "edit",
      "id": "861fc594cb0394fe",
      "item": {
        "type": "paragraph",
        "id": "861fc594cb0394fe",
        "text": "[[Evan Czaplicki]]. 2020. [[Elm Parser]]. [https://package.elm-lang.org/packages/elm/parser/latest/ page]"
      },
      "date": 1694609950465
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-parser",
        "title": "Elm Parser",
        "text": "Regular expressions are quite confusing and difficult to use. This library provides a coherent alternative that handles more cases and produces clearer code. [https://github.com/elm/parser#parser github], [https://package.elm-lang.org/packages/elm/parser/latest page]"
      },
      "after": "861fc594cb0394fe",
      "date": 1694926260440
    },
    {
      "item": {
        "type": "pagefold",
        "id": "756915f0115ed8e7",
        "text": "~"
      },
      "id": "756915f0115ed8e7",
      "type": "add",
      "date": 1694926264053
    },
    {
      "id": "756915f0115ed8e7",
      "type": "move",
      "order": [
        "861fc594cb0394fe",
        "756915f0115ed8e7",
        "undefined"
      ],
      "date": 1694926266023,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "edit",
      "id": "756915f0115ed8e7",
      "item": {
        "type": "pagefold",
        "id": "756915f0115ed8e7",
        "text": "~"
      },
      "date": 1694926268387
    },
    {
      "type": "fork",
      "date": 1694926270012
    },
    {
      "id": "1321e5848dd5255e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1321e5848dd5255e",
        "text": "⇒ [[Backtracking]] ⇒ Semantics [https://github.com/elm/parser/blob/master/semantics.md#semantics page]"
      },
      "after": "861fc594cb0394fe",
      "attribution": {
        "page": "Elm Parser"
      },
      "date": 1695156413464
    },
    {
      "type": "edit",
      "id": "1321e5848dd5255e",
      "item": {
        "type": "paragraph",
        "id": "1321e5848dd5255e",
        "text": "⇒ [[Backtracking]] ⇒ Semantics [https://github.com/elm/parser/blob/master/semantics.md#semantics page]  ⇒ [[How Different Parsers Fit Together]]"
      },
      "date": 1695156912933
    },
    {
      "id": "99f9253ba92aa6ae",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "99f9253ba92aa6ae",
        "text": "⇒ [[Elm Radio]] Episode #6 [[elm/parser]] [https://elm-radio.com/episode/elm-parser/ podcast]"
      },
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837085798
    },
    {
      "id": "1f3efc4fac2328ad",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1f3efc4fac2328ad",
        "text": "I mean, when you're working with Elm and you can parse things and then having parsed into a nice data structure, you can then use that data structure in Elm and do case statements on this well defined data type. [https://elm-radio.com/episode/elm-parser/#00-03-05 elm-radio]"
      },
      "after": "99f9253ba92aa6ae",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837092677
    },
    {
      "id": "a2063384ea3ea4d8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a2063384ea3ea4d8",
        "text": "You expect some kind of order, some kind of syntax. [https://elm-radio.com/episode/elm-parser/#00-07-26 elm-radio]"
      },
      "after": "1f3efc4fac2328ad",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837096312
    },
    {
      "id": "f94911eb4b474632",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f94911eb4b474632",
        "text": "And if those expectations are not met, then you have a parsing failure."
      },
      "after": "a2063384ea3ea4d8",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837101352
    },
    {
      "id": "86c0a2403b670994",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "86c0a2403b670994",
        "text": "That is a really great point. And that's a great way to frame the distinction."
      },
      "after": "f94911eb4b474632",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837111575
    },
    {
      "id": "1fe271c9b76e6ca5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1fe271c9b76e6ca5",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-08-46 00-08-46] –  And so parsers are very different because parsers, you're going through one character at a time and eating the symbols to define what the structure of the content is."
      },
      "after": "86c0a2403b670994",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837114673
    },
    {
      "id": "82f1f1574e12ef11",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "82f1f1574e12ef11",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-20-08 00-20-08] – as soon as you chomp a value, as soon as you eat a character, you've committed down that path."
      },
      "after": "1fe271c9b76e6ca5",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837119169
    },
    {
      "id": "2c34ac6e1c49d7cc",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2c34ac6e1c49d7cc",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-25-37 00-25-37] –  And then the whole decoder fails. And that's for performance reasons. So what do you do instead?"
      },
      "after": "82f1f1574e12ef11",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837121735
    },
    {
      "id": "9c004b776741506f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9c004b776741506f",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-28-08 00-28-08] –  You know, a one of list that contains each of those parsers. Instead of that, you're going to say try parsing it as an integer or float."
      },
      "after": "2c34ac6e1c49d7cc",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837124246
    },
    {
      "id": "61f06e4cf8dcf39c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "61f06e4cf8dcf39c",
        "text": "textOrLink"
      },
      "after": "9c004b776741506f",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837127286
    },
    {
      "id": "657ff5f9d26772ef",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "657ff5f9d26772ef",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-36-11 00-36-11] – Start with a hard coded success, get your tests passing as fast as possible. I mean, this is the basic sort of TDD concept of, you know, fake it till you make it where you make it dumb, then make it smarter."
      },
      "after": "61f06e4cf8dcf39c",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837135890
    },
    {
      "id": "5f339c5cd7464d26",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5f339c5cd7464d26",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-44-43 00-44-43] – So now your data is start set, end set, plus whatever expression data structure you had."
      },
      "after": "657ff5f9d26772ef",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837153149
    },
    {
      "id": "550a61d14b5379e8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "550a61d14b5379e8",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-45-13 00-45-13] – [[Parser.loop]]"
      },
      "after": "5f339c5cd7464d26",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837162598
    },
    {
      "id": "83f3e444d7af9a68",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "83f3e444d7af9a68",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-46-32 00-46-32] – So I think of it kind of like a fold expression in Elm where you can do like list dot fold L where like compared to list dot map list dot map,"
      },
      "after": "550a61d14b5379e8",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837165526
    },
    {
      "id": "430590c6305992d0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "430590c6305992d0",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-51-36 00-51-36] –  So in Elm parser terminology, that's a dead end."
      },
      "after": "83f3e444d7af9a68",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837171800
    },
    {
      "id": "b1598b7af6a9fd80",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b1598b7af6a9fd80",
        "text": "context from loop"
      },
      "after": "430590c6305992d0",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837195183
    },
    {
      "id": "529bd5d903adba19",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "529bd5d903adba19",
        "text": "[https://elm-radio.com/episode/elm-parser/#01-02-21 01-02-21] –  [[Martin Janacek]] has his Elm in Elm compiler, which is not fully completed, still a work in progress, but that's something to check out and you can look at his talk on that at Elm Europe."
      },
      "after": "b1598b7af6a9fd80",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1697837199066
    }
  ]
}