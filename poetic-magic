{
  "title": "Poetic Magic",
  "story": [
    {
      "type": "paragraph",
      "id": "8039533d7fb439bf",
      "text": "Math is said to be the language of the universe. Through math, we hoped to describe the laws that govern all relationships – in math lies our aspiration for conceptual truth. "
    },
    {
      "type": "paragraph",
      "id": "2495fc214f3ada01",
      "text": "But just as quantum physics created an existential crisis for physicists who sought to define a physical truth in matter, math was shortly to suffer its own existential crisis. "
    },
    {
      "type": "paragraph",
      "id": "a38312912cb6bb51",
      "text": "In 1930, Kurt Gödel, a German logician, mathematician, and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility that we could define an inherent truth through math."
    },
    {
      "type": "paragraph",
      "id": "ad55b60e60962488",
      "text": "His findings tormented mathematicians but also unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a logician and mathematician that walked into this creative unknown."
    },
    {
      "type": "markdown",
      "id": "60f9784fe9f3dd32",
      "text": "Influenced by Whitehead and Russell, Church developed lambda calculus in the 1930s to create a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
    },
    {
      "type": "paragraph",
      "id": "4747e6e053eedc05",
      "text": "Lambda calculus lies at the heart of all modern computer languages, enabling programmers to develop increasingly more powerful algorithms that unleash the analytical and creative potential of computers – a potential that empowers computer-enabled creativity, the potential that is defining this new age. "
    },
    {
      "type": "markdown",
      "id": "d0f6e6b6abac6357",
      "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more complex recursive algorithms, which the power of each could be used by simply referring to its name.  \n"
    },
    {
      "type": "markdown",
      "id": "b517facba3ccf387",
      "text": "This potential gave computer programmers the capacity to wield words like a poet with the metaphoric power of abstraction. "
    },
    {
      "type": "markdown",
      "id": "a6dfda81d60f5bde",
      "text": "The synthesis of abstractions into higher-level meaning in magical moments that unleash new creative potential. \n"
    },
    {
      "type": "paragraph",
      "id": "3eb7f5536f635695",
      "text": "Next: [[Many Paths]]"
    },
    {
      "type": "graphviz",
      "id": "af659bcd8cb40348",
      "text": "DOT FROM preview-next-diagram",
      "dot": "strict digraph {rankdir=LR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n\"Poetic\nMagic\"\nnode [style=filled fillcolor=lightblue]\n\"Poetic\nMagic\" -> \"Many\nPaths\"\nnode [style=filled fillcolor=white]\n\"Many\nPaths\"\n\"Many\nPaths\" -> \"Verbs,\nNot\nNouns\"\nnode [style=filled fillcolor=white penwidth=3 color=black]\n\"Poetic\nMagic\" -> \"Many\nPaths\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Many\nPaths\"\n\"Many\nPaths\" -> \"Verbs,\nNot\nNouns\"\nnode [style=\"filled,rounded,dotted\" fillcolor=white]\nedge [style=dotted]\n\"Poetic\nMagic\"\n\"Garden\" -> \"Poetic\nMagic\"\n\"Gates\nto\nthe\nGarden\nGraph\" -> \"Poetic\nMagic\"\n\"Imagination\nUnleashed\" -> \"Poetic\nMagic\"\n\"More\nMore\nMore\nTelling\nThompson's\nStory\" -> \"Poetic\nMagic\"\n\"More\nTelling\nThompson's\nStory\" -> \"Poetic\nMagic\"\n\"Telling\nThompson's\nStory\" -> \"Poetic\nMagic\"\n\"More\nGarden\" -> \"Poetic\nMagic\"}",
      "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.44.0 (20200518.1210)\n -->\n<!-- Pages: 1 -->\n<svg width=\"477pt\" height=\"741pt\"\n viewBox=\"0.00 0.00 477.14 741.42\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 737.42)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-737.42 473.14,-737.42 473.14,4 -4,4\"/>\n<!-- Poetic\nMagic -->\n<g id=\"node1\" class=\"node\">\n<title>Poetic\nMagic</title>\n<ellipse fill=\"lightyellow\" stroke=\"black\" stroke-width=\"3\" cx=\"205.24\" cy=\"-378.42\" rx=\"38.64\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"205.24\" y=\"-382.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Poetic</text>\n<text text-anchor=\"middle\" x=\"205.24\" y=\"-365.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Magic</text>\n</g>\n<!-- Many\nPaths -->\n<g id=\"node2\" class=\"node\">\n<title>Many\nPaths</title>\n<ellipse fill=\"lightblue\" stroke=\"black\" stroke-width=\"3\" cx=\"316.68\" cy=\"-378.42\" rx=\"36.75\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"316.68\" y=\"-382.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Many</text>\n<text text-anchor=\"middle\" x=\"316.68\" y=\"-365.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Paths</text>\n</g>\n<!-- Poetic\nMagic&#45;&gt;Many\nPaths -->\n<g id=\"edge1\" class=\"edge\">\n<title>Poetic\nMagic&#45;&gt;Many\nPaths</title>\n<path fill=\"none\" stroke=\"black\" d=\"M244.21,-378.42C252.46,-378.42 261.27,-378.42 269.79,-378.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"269.98,-381.92 279.98,-378.42 269.98,-374.92 269.98,-381.92\"/>\n</g>\n<!-- Verbs,\nNot\nNouns -->\n<g id=\"node3\" class=\"node\">\n<title>Verbs,\nNot\nNouns</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"429.22\" cy=\"-378.42\" rx=\"39.84\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"429.22\" y=\"-391.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Verbs,</text>\n<text text-anchor=\"middle\" x=\"429.22\" y=\"-374.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Not</text>\n<text text-anchor=\"middle\" x=\"429.22\" y=\"-357.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Nouns</text>\n</g>\n<!-- Many\nPaths&#45;&gt;Verbs,\nNot\nNouns -->\n<g id=\"edge2\" class=\"edge\">\n<title>Many\nPaths&#45;&gt;Verbs,\nNot\nNouns</title>\n<path fill=\"none\" stroke=\"black\" d=\"M353.57,-378.42C361.64,-378.42 370.33,-378.42 378.84,-378.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"379.08,-381.92 389.08,-378.42 379.08,-374.92 379.08,-381.92\"/>\n</g>\n<!-- Garden -->\n<g id=\"node4\" class=\"node\">\n<title>Garden</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"65.21\" cy=\"-715.42\" rx=\"43.47\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-711.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n</g>\n<!-- Garden&#45;&gt;Poetic\nMagic -->\n<g id=\"edge3\" class=\"edge\">\n<title>Garden&#45;&gt;Poetic\nMagic</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M103.31,-706.55C113.35,-702.52 123.38,-696.72 130.42,-688.42 164.94,-647.69 189.37,-492.16 199.3,-418.09\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"202.82,-418.15 200.66,-407.78 195.88,-417.23 202.82,-418.15\"/>\n</g>\n<!-- Gates\nto\nthe\nGarden\nGraph -->\n<g id=\"node5\" class=\"node\">\n<title>Gates\nto\nthe\nGarden\nGraph</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"65.21\" cy=\"-614.42\" rx=\"44.15\" ry=\"65.11\"/>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-643.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Gates</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-627.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">to</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-610.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-593.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-576.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Graph</text>\n</g>\n<!-- Gates\nto\nthe\nGarden\nGraph&#45;&gt;Poetic\nMagic -->\n<g id=\"edge4\" class=\"edge\">\n<title>Gates\nto\nthe\nGarden\nGraph&#45;&gt;Poetic\nMagic</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M102.08,-577.29C111.98,-565.98 122.23,-553.15 130.42,-540.42 156.04,-500.54 177.46,-450.3 190.51,-416.43\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"193.85,-417.49 194.13,-406.9 187.3,-415.01 193.85,-417.49\"/>\n</g>\n<!-- Imagination\nUnleashed -->\n<g id=\"node6\" class=\"node\">\n<title>Imagination\nUnleashed</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"65.21\" cy=\"-502.42\" rx=\"62.45\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-506.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Imagination</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-489.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Unleashed</text>\n</g>\n<!-- Imagination\nUnleashed&#45;&gt;Poetic\nMagic -->\n<g id=\"edge5\" class=\"edge\">\n<title>Imagination\nUnleashed&#45;&gt;Poetic\nMagic</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M107.64,-480.61C115.52,-475.72 123.47,-470.24 130.42,-464.42 148.68,-449.09 166.2,-429.01 179.58,-412.1\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"182.43,-414.14 185.8,-404.09 176.9,-409.84 182.43,-414.14\"/>\n</g>\n<!-- More\nMore\nMore\nTelling\nThompson&#39;s\nStory -->\n<g id=\"node7\" class=\"node\">\n<title>More\nMore\nMore\nTelling\nThompson&#39;s\nStory</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"65.21\" cy=\"-378.42\" rx=\"65.42\" ry=\"76.87\"/>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-416.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">More</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-399.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">More</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-382.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">More</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-365.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Telling</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-349.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Thompson&#39;s</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-332.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Story</text>\n</g>\n<!-- More\nMore\nMore\nTelling\nThompson&#39;s\nStory&#45;&gt;Poetic\nMagic -->\n<g id=\"edge6\" class=\"edge\">\n<title>More\nMore\nMore\nTelling\nThompson&#39;s\nStory&#45;&gt;Poetic\nMagic</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M130.78,-378.42C139.26,-378.42 147.84,-378.42 155.99,-378.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"156.04,-381.92 166.04,-378.42 156.04,-374.92 156.04,-381.92\"/>\n</g>\n<!-- More\nTelling\nThompson&#39;s\nStory -->\n<g id=\"node8\" class=\"node\">\n<title>More\nTelling\nThompson&#39;s\nStory</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"65.21\" cy=\"-230.42\" rx=\"65.42\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-251.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">More</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-234.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Telling</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-217.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Thompson&#39;s</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-201.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Story</text>\n</g>\n<!-- More\nTelling\nThompson&#39;s\nStory&#45;&gt;Poetic\nMagic -->\n<g id=\"edge7\" class=\"edge\">\n<title>More\nTelling\nThompson&#39;s\nStory&#45;&gt;Poetic\nMagic</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M108.56,-270.22C115.97,-277.48 123.51,-285.09 130.42,-292.42 146.54,-309.52 163.69,-329.38 177.4,-345.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"174.74,-347.98 183.83,-353.41 180.11,-343.49 174.74,-347.98\"/>\n</g>\n<!-- Telling\nThompson&#39;s\nStory -->\n<g id=\"node9\" class=\"node\">\n<title>Telling\nThompson&#39;s\nStory</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"65.21\" cy=\"-118.42\" rx=\"65.42\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-131.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Telling</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-114.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Thompson&#39;s</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-97.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Story</text>\n</g>\n<!-- Telling\nThompson&#39;s\nStory&#45;&gt;Poetic\nMagic -->\n<g id=\"edge8\" class=\"edge\">\n<title>Telling\nThompson&#39;s\nStory&#45;&gt;Poetic\nMagic</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M111.15,-147.93C118.28,-154.07 125.05,-160.96 130.42,-168.42 168.21,-220.95 188.14,-294.61 197.41,-339.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"194,-340.05 199.39,-349.17 200.86,-338.68 194,-340.05\"/>\n</g>\n<!-- More\nGarden -->\n<g id=\"node10\" class=\"node\">\n<title>More\nGarden</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"65.21\" cy=\"-29.42\" rx=\"44.15\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-33.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">More</text>\n<text text-anchor=\"middle\" x=\"65.21\" y=\"-16.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n</g>\n<!-- More\nGarden&#45;&gt;Poetic\nMagic -->\n<g id=\"edge9\" class=\"edge\">\n<title>More\nGarden&#45;&gt;Poetic\nMagic</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M103.14,-45.18C113.3,-51.12 123.43,-58.82 130.42,-68.42 190.45,-150.86 202.3,-275.31 204.23,-338.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"200.74,-338.94 204.48,-348.86 207.74,-338.78 200.74,-338.94\"/>\n</g>\n</g>\n</svg>\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Poetic Magic",
        "story": []
      },
      "date": 1608831867869
    },
    {
      "item": {
        "type": "factory",
        "id": "7e52d12726f6522b"
      },
      "id": "7e52d12726f6522b",
      "type": "add",
      "date": 1608831871180
    },
    {
      "type": "edit",
      "id": "7e52d12726f6522b",
      "item": {
        "type": "paragraph",
        "id": "7e52d12726f6522b",
        "text": "Create an abstraction of poetic meaning that feels magical."
      },
      "date": 1608831896549
    },
    {
      "type": "add",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "paragraph",
        "id": "60f9784fe9f3dd32",
        "text": "Alonzo Church reimagined calculus is the foundation of all computer languages. At its core he created a framework that allowed mathemeticians to create abstractison of poetic meaning the feels magical."
      },
      "after": "7e52d12726f6522b",
      "date": 1608832022972
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "paragraph",
        "id": "60f9784fe9f3dd32",
        "text": "Alonzo Church reimagined calculus, what he called lambda calculus, is the foundation of all computer languages. At its core  is a framework that allowed mathematicians to create abstractions of poetic meaning the feel magical."
      },
      "date": 1608832084639
    },
    {
      "type": "remove",
      "id": "7e52d12726f6522b",
      "date": 1608832109763
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "paragraph",
        "id": "60f9784fe9f3dd32",
        "text": "Alonzo Church reimagined calculus, what he called lambda calculus, is the foundation of all computer languages. At its core  is a framework that allowed mathematicians to create abstractions of poetic meaning that feel magical."
      },
      "date": 1608832258479
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Alonzo Church reimagined calculus, what he called lambda calculus, is the foundation of all computer languages. At its core  is a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that feel _magical_."
      },
      "date": 1608839025454
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Alonzo Church reimagined calculus, what he called lambda calculus, is the foundation of all computer languages. At its core  is a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that felt _magical_."
      },
      "date": 1609260176721
    },
    {
      "item": {
        "type": "factory",
        "id": "d0f6e6b6abac6357"
      },
      "id": "d0f6e6b6abac6357",
      "type": "add",
      "after": "60f9784fe9f3dd32",
      "date": 1609260183441
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "factory",
        "id": "d0f6e6b6abac6357",
        "text": "The use of the greek character 'lambda', is said to be derived from a concept of abstraction introduced by Whitehead and Russell in their book "
      },
      "date": 1609260381283
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "The use of the greek character 'lambda', is said to be derived from a concept of abstraction introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character, annotated with a cravat, could contain a greater meaning based on how it had been defined. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609260566557
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nThe use of the greek character 'lambda', is said to be derived from a concept of abstraction introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character, annotated with a cravat, could contain a greater meaning based on how it had been defined. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609260597339
    },
    {
      "type": "add",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nAs you begin to put abstractions together, they begin to synthesize into a new greater meaning, much like the words in a poem. Whitehead talked of this synthesize of greater meaning as 'concrescence'. \n"
      },
      "after": "d0f6e6b6abac6357",
      "date": 1609260832085
    },
    {
      "type": "add",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_magical_\nThis combination of abstractions fuse into meaning in moments of insight that feel magical, [[Eureka Moments]]. \n"
      },
      "after": "fe7fb484d8165f34",
      "date": 1609261005409
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Alonzo Church reimagined calculus, what he called lambda calculus, is the foundation of all computer languages. At its core  is a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that feel _magical_."
      },
      "date": 1609261011206
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into meaning in moments of insight that feel magical, [[Eureka Moments]]. \n"
      },
      "date": 1609261015551
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into meaning in moments of insight that seem to rush through us in ways that are hard to describe - [[Eureka Moments]]. \n"
      },
      "date": 1609261070405
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into meaning in moments of insight that seem to rush through us in ways that are joyful, yet hard to describe - [[Eureka Moments]]. \n"
      },
      "date": 1609261096572
    },
    {
      "item": {
        "type": "factory",
        "id": "71c33df326855160"
      },
      "id": "71c33df326855160",
      "type": "add",
      "after": "a6dfda81d60f5bde",
      "date": 1609261130919
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure that allows numbers to be simply transformed by an abstract function. But as these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative power as the imagined more sophisticated concepts. "
      },
      "date": 1609261477530
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure that allows numbers to be transformed by an abstract function. But as these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative power as the imagined more sophisticated concepts. "
      },
      "date": 1609261487524
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure that allows numbers to be transformed by an abstract function. But as these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative power as they imagined more sophisticated concepts. "
      },
      "date": 1609261528513
    },
    {
      "type": "add",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This fundamental nature of lambda calculus is yielded today by computer programmers to create increasingly more sophisticated computing systems, systems that are continually evolving and are organic in nature. Systems that are changing the very nature of  our human society. "
      },
      "after": "71c33df326855160",
      "date": 1609262189931
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into meaning in moments of insight that seem to rush through us in ways that feel significant yet hard to describe - [[Eureka Moments]]. \n"
      },
      "date": 1609262304460
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into meaning in moments of insight that seem to rush through us in ways that are significant yet hard to describe - [[Eureka Moments]]. \n"
      },
      "date": 1609262327538
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure that allows numbers to be transformed by a function. But as these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative power as they imagined more sophisticated concepts. "
      },
      "date": 1609262359805
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure that allows numbers to be transformed by a function that can be named, to become, in a sense, a metaphor. But as these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative power as they imagined more sophisticated concepts. "
      },
      "date": 1609262447523
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure that allows numbers to be transformed by a function that can be named, to become, in a sense, a metaphor. But as these metaphoric abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative power as they imagined more sophisticated concepts. "
      },
      "date": 1609262498827
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This fundamental nature of lambda calculus is yielded today by computer programmers to create increasingly more complicated computing systems, systems that are continually evolving and are organic in nature. Systems that are changing the very nature of  our human society. "
      },
      "date": 1609262533564
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This fundamental structure of lambda calculus is yielded today by computer programmers to create increasingly more complicated computing systems, systems that are organic in nature systems that are changing the very nature of  our human society. "
      },
      "date": 1609262787308
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "In the 1930's, Alonzo Church reimagined calculus, what he called lambda calculus, is the foundation of all computer languages. At its core  is a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that feel _magical_."
      },
      "date": 1609262799713
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "In the 1930's, Alonzo Church reimagined calculus, what he called lambda calculus At its core it is a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that feel _magical_ and it went on to become the foundation of all computer languages."
      },
      "date": 1609262909455
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "In the 1930's, Alonzo Church reimagined calculus, what he called lambda calculus as a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that feel _magical_ and it went on to become the foundation of all computer languages."
      },
      "date": 1609262951412
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "In the 1930's, Alonzo Church reimagined calculus, calling it lambda calculus, devising a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that feel _magical_. It went on to become the foundation of all computer languages."
      },
      "date": 1609263008874
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used of the greek character 'lambda' to represent a concept of abstraction introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character, annotated with a cravat, could contain a greater meaning based on how it had been defined. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609263118847
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used of the greek character 'lambda' to represent the concept of abstraction introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character, annotated with a cravat, could contain a greater meaning based on how it had been defined. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609263129728
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent the concept of abstraction introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character, annotated with a cravat, could contain a greater meaning based on how it had been defined. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609263235470
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent the concept of abstraction as found by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character, annotated with a cravat, could contain a greater meaning based on how it had been defined. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609263265511
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent the concept of abstraction as introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character, annotated with a cravat, could contain a greater meaning based on how it had been defined. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609263281191
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent the concept of abstraction as introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character or name, annotated with a symbol, could be understood to hold a greater meaning based on a definition. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609263349695
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent the concept of abstraction as introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character or name, annotated with a symbol, could be understood to hold a greater meaning based on a previous definition. These greater meanings could then be used in subsequent formulations. \n"
      },
      "date": 1609263428994
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent the concept of abstraction as introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character or name, annotated with a symbol, could be understood to hold a greater meaning based on a previous definition. These abstractions could then be used in subsequent calculations. \n"
      },
      "date": 1609263482186
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. The concept that a single character or name, annotated with a symbol, could be understood to hold a greater meaning based on a previous definition. These abstractions could then be used in subsequent calculations. \n"
      },
      "date": 1609263521891
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name, annotated with a symbol, could be understood to hold a greater meaning based on a previous definition. These abstractions could then be used in subsequent calculations. \n"
      },
      "date": 1609263569874
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nAs you begin to put abstractions together, they begin to synthesize into a new and more powerful abstraction, much like the words in a poem. Whitehead talked of this synthesize of greater meaning as 'concrescence'. \n"
      },
      "date": 1609263621984
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nAs you begin to put abstractions together, you can begin to develop new and more powerful abstraction, much like the words in a poem. Whitehead talked of this synthesize of greater meaning as 'concrescence'. \n"
      },
      "date": 1609263660814
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into meaning in moments of insight that seem to energetically rush through us in ways that are significant yet hard to describe - [[Eureka Moments]]. \n"
      },
      "date": 1609263721920
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into meaning in moments of insight that seem to rush through us in ways that are significant yet hard to describe - [[Eureka Moments]]. \n"
      },
      "date": 1609263739328
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure that allows numbers to be transformed by a function that can be named. But as these metaphoric abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative power as they imagined more sophisticated concepts. "
      },
      "date": 1609263770396
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure that allows numbers to be transformed by a function that can be named. But as these metaphoric abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity as they imagined more sophisticated concepts. "
      },
      "date": 1609263803631
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This concept of metaphoric abstraction of lambda calculus is yielded today by computer programmers to create increasingly more complicated computing systems, systems that are organic in nature and are changing the very nature of our human society. "
      },
      "date": 1609263896300
    },
    {
      "type": "add",
      "id": "3eb7f5536f635695",
      "item": {
        "type": "paragraph",
        "id": "3eb7f5536f635695",
        "text": "Next: [[Into the Garden]]"
      },
      "after": "4747e6e053eedc05",
      "date": 1609263960582
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "In the 1930's, Alonzo Church reimagined calculus, calling it lambda calculus, devising a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that felt _magical_. It went on to become the foundation of all computer languages."
      },
      "date": 1609264064594
    },
    {
      "type": "edit",
      "id": "3eb7f5536f635695",
      "item": {
        "type": "paragraph",
        "id": "3eb7f5536f635695",
        "text": "Next: [[Many Paths]]"
      },
      "date": 1609264133008
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "In the 1930's, Alonzo Church reimagined calculus, calling it lambda calculus, a framework that allowed mathematicians to create _abstractions_ of _poetic meaning_ that felt _magical_. It went on to become the foundation of all computer languages."
      },
      "date": 1609344947798
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name, annotated with a symbol, could be understood to have a meaning based on a previous definition. These abstractions could then be used in subsequent calculations. \n"
      },
      "date": 1609345012757
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name, annotated with a symbol, could be understood to have a meaning based on an explicit definition. These abstractions could then be used in subsequent calculations. \n"
      },
      "date": 1609345036662
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name, annotated with a symbol, could be understood to have a meaning based on an explicit definition. These abstractions could then be used to streamline subsequent calculations. \n"
      },
      "date": 1609345073455
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nAs you begin to synthesize abstractions together, you can begin to develop new and more powerful abstraction, much like the words in a poem. Whitehead talked of this synthesize of greater meaning as 'concrescence'. \n"
      },
      "date": 1609345111020
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nAs you begin to synthesize abstractions together, you can begin to develop new and more powerful abstractions, much like the words in a poem. Whitehead talked of this synthesize of greater meaning as 'concrescence'. \n"
      },
      "date": 1609345120545
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nAs you begin to synthesize abstractions together, you can begin to develop new and more powerful abstractions, much like a poet does with words in a poem. Whitehead talked of this synthesize of greater meaning as 'concrescence'. \n"
      },
      "date": 1609345136130
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "In the 1930's, Alonzo Church reimagined calculus, calling it lambda calculus, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt _magical_. It went on to become the foundation of all computer languages."
      },
      "date": 1609346743249
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name, annotated with a symbol, could be understood to have a meaning based on an explicit definition. These abstractions could then be used to simplfy subsequent calculations. \n"
      },
      "date": 1609346804312
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nBy synthesizing abstractions together, you can begin to develop new and more powerful abstractions, much like a poet does with words in a poem. Whitehead talked of this synthesize of greater meaning as 'concrescence'. \n"
      },
      "date": 1609346838790
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nBy synthesizing abstractions together, one can begin to develop new and more powerful abstractions, much like a poet does with words in a poem. Whitehead talked of this synthesize of greater meaning as 'concrescence'. \n"
      },
      "date": 1609346847718
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nBy synthesizing abstractions together, one can begin to develop new and more powerful abstractions, much like a poet does with words in a poem. Whitehead talked of this synthesize of elements into a greater whole as 'concrescence'. \n"
      },
      "date": 1609346888292
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into new meaning in moments of insight that seem to rush through us in ways that are significant yet hard to describe - [[Eureka Moments]]. \n"
      },
      "date": 1609346914785
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into new meaning in moments of insight – [[Eureka Moments]] – that seem to rush through us in ways that are significant yet hard to describe. \n"
      },
      "date": 1609346966094
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure of (variables, abstraction, applications) that allows numbers to be transformed by a named function. But as these metaphoric abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity as they imagined more sophisticated concepts. "
      },
      "date": 1609347192811
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure (variables, abstraction, applications) that allows numbers to be transformed by a named function. But as these metaphoric abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity as they imagined more sophisticated concepts. "
      },
      "date": 1609347221588
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure (variables, abstraction, applications) that allows numbers to be transformed by a named function. As these metaphoric abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity with amazing simplicity. "
      },
      "date": 1609347304346
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This capacity allows computer programmers to create increasingly more complicated algorithms that unleashes the creative potential of computers in a way that fundamentally changes the very nature of our human society. "
      },
      "date": 1609347460019
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure (variables, abstraction, applications) that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity with amazing simplicity. "
      },
      "date": 1609347475894
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This capacity allows computer programmers to develop increasingly more complex algorithms that unleashes the creative potential of computers – a potential that is fundamentally changing the very nature of our human society. "
      },
      "date": 1609347564786
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead, in the 1930's, Alonzo Church reimagined calculus, calling it lambda calculus, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt _magical_. It went on to become the foundation of all computer languages."
      },
      "date": 1609347899656
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure, based on the [[Semantic Triple]] comprised of variables, abstraction, applications that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity with amazing simplicity. "
      },
      "date": 1609348123155
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure, based on a [[Semantic Triple]] comprised of variables, abstraction, applications that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity with amazing simplicity. "
      },
      "date": 1609348132890
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure, based on a [[Semantic Triple]] comprised of variables and abstraction, applications that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity with amazing simplicity. "
      },
      "date": 1609348147572
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – based on a [[Semantic Triple]] comprised of variables and abstraction, applications – that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity with amazing simplicity. "
      },
      "date": 1609348167686
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Today, this capacity allows computer programmers to develop increasingly more complex algorithms that unleashes the creative potential of computers – a potential that is fundamentally changing the very nature of our human society. "
      },
      "date": 1609348315922
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages allowing computer programmers to develop increasingly more complex algorithms that unleashes the creative potential of computers – a potential that is fundamentally changing the very nature of our mind and human society. "
      },
      "date": 1609348517599
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – based on a [[Semantic Triple]] comprised of variables and abstraction, applications – that allows numbers to be transformed by a named function. As these abstractions become more complex they become more powerful, allowing mathematicians to yield immense transformative capacity with amazing simplicity. "
      },
      "date": 1609348587734
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – based on a [[Semantic Triple]] comprised of variables and abstraction, applications – that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful, allowing mathematicians to yield immense transformative capacity with amazing simplicity. "
      },
      "date": 1609348593716
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – based on a [[Semantic Triple]] comprised of variables and abstraction, applications – that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1609348652017
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages allowing computer programmers to develop increasingly more powerful algorithms that unleashes the creative potential of computers – a potential that is fundamentally changing the very nature of our mind and human society. "
      },
      "date": 1609348678432
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages allowing computer programmers to develop increasingly more powerful algorithms to unleash the creative potential of computers – a potential that is fundamentally changing the very nature of our mind and human society. "
      },
      "date": 1609348691524
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing computer programmers to develop increasingly more powerful algorithms to unleash the creative potential of computers – a potential that is fundamentally changing the very nature of our mind and human society. "
      },
      "date": 1609348703579
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead, in the 1930's, Alonzo Church introduced lambda calculus, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt _magical_. It went on to become the foundation of all computer languages."
      },
      "date": 1609351182740
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead, in the 1930's, Alonzo Church introduced lambda calculus, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt _magical_. It went on to become the foundation for all computer languages."
      },
      "date": 1609351217616
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name, originally annotated with a circumflex symbol, could be understood to have a meaning based on an explicit definition. These abstractions could then be used to simplfy subsequent calculations. \n"
      },
      "date": 1609351560665
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name, originally annotated with a circumflex, could be understood to have a meaning based on an explicit definition. These abstractions could then be used to simplfy subsequent calculations. \n"
      },
      "date": 1609351570211
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name, originally annotated with a circumflex, could be understood to have an abstract meaning based on an explicit definition. These abstractions could then be used to simplfy subsequent calculations. \n"
      },
      "date": 1609351628249
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name could be understood to have an abstract meaning based on an explicit definition. These abstractions could then be used to simplfy subsequent calculations. \n"
      },
      "date": 1609351856413
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_feel magical_\nThis combination of abstractions fuse into new meaning in moments of insight – [[Eureka Moments]] – that seem to rush through us in ways that are significant yet often hard to describe. \n"
      },
      "date": 1609351899885
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – based on a [[Semantic Triple]] comprised of variables and abstraction, and applications – that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1609351920474
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – based on a [[Semantic Triple]] comprised of variables, abstraction, and applications – that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1609351930452
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – based on a [[Semantic Triple]] of variables, abstraction, and applications – that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1609351943783
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the creative potential of computers – a potential that is fundamentally changing the very nature of our mind and human society. "
      },
      "date": 1609351998423
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead, Alonzo Church introduced lambda calculus in the 1930's, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt _magical_. It went on to become the foundation for all computer languages."
      },
      "date": 1609352174670
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead, Alonzo Church introduced lambda calculus in the 1930's, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt _magical_. "
      },
      "date": 1609352633422
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "_magical_\nThis combination of abstractions fuse into new meaning in moments of insight – [[Eureka Moments]] – that seem to rush through us in ways that are significant yet often hard to describe. \n"
      },
      "date": 1609352667905
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead, Alonzo Church introduced lambda calculus in the 1930s, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt _magical_. "
      },
      "date": 1609356376812
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name could be understood to have a meaning based on an explicit definition. These abstractions could then be used to simplfy subsequent calculations. \n"
      },
      "date": 1609431373221
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name could be understood to have a meaning based on an explicit definition of a function. These abstractions could then be used to simplfy subsequent calculations. \n"
      },
      "date": 1609431405977
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nBy synthesizing abstractions together, one can begin to develop new and more powerful mathematical abstractions, much like a poet does with words in a poem. Whitehead talked of this synthesize of elements into a greater whole as 'concrescence'. \n"
      },
      "date": 1609431440585
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nBy synthesizing abstractions together, one can begin to develop new and more powerful mathematical abstractions, much like a poet does with metaphoric words in a poem. Whitehead talked of this synthesize of elements into a greater whole as 'concrescence'. \n"
      },
      "date": 1609431462765
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nBy synthesizing abstractions together, one can begin to develop new and more powerful mathematical abstractions, much like a poet does with metaphoric words in a poem. Whitehead talked of this synthesize of elements into a greater meaning as 'concrescence'. \n"
      },
      "date": 1609431492650
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name could be understood to represent a mathematical meaning based on an explicit definition of a function. These abstractions could then be used to simplfy subsequent calculations. \n"
      },
      "date": 1609432404168
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – what could be thought of as a [[Semantic Triple]] – of variables, abstraction, and applications – that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1609432557585
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure – what could be thought of as a [[Semantic Triple]] – of variables, abstraction, and applications that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1609432579158
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is fundamentally changing the very nature of our mind and human society. "
      },
      "date": 1609432647418
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is fundamentally empowering our mind and changing human society. "
      },
      "date": 1609432709541
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is empowering our minds and changing human society. "
      },
      "date": 1609432726498
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is empowering our minds. "
      },
      "date": 1609434623198
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name could be understood to represent a generalized mathematical formula. These terms could then be used to simplify subsequent calculations. \n"
      },
      "date": 1609871813588
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nBy synthesizing these abstract terms together, one can begin to develop new and more powerful mathematical abstractions, much like a poet does with metaphoric words in a poem. Whitehead talked of this synthesize of elements into a greater meaning as 'concrescence'. \n"
      },
      "date": 1609871857825
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "paragraph",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure of variables, abstraction, and applications that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1617208066382
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "markdown",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure of _variables_, _abstraction_, and _applications_ that allows numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1617208091612
    },
    {
      "item": {
        "type": "factory",
        "id": "af659bcd8cb40348"
      },
      "id": "af659bcd8cb40348",
      "type": "add",
      "after": "3eb7f5536f635695",
      "date": 1621380606355
    },
    {
      "type": "edit",
      "id": "af659bcd8cb40348",
      "item": {
        "type": "graphviz",
        "id": "af659bcd8cb40348",
        "text": "DOT FROM preview-next-diagram"
      },
      "date": 1621380608945
    },
    {
      "type": "edit",
      "id": "71c33df326855160",
      "item": {
        "type": "markdown",
        "id": "71c33df326855160",
        "text": "Lambda calculus has a surprisingly simple structure of _variables_, _abstraction_, and _applications_ that allow numbers to be transformed by a named function. As these abstractions become more complex, they become more powerful."
      },
      "date": 1625940481166
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead, Alonzo Church introduced lambda calculus in the 1930s, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
      },
      "date": 1625943850042
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "_poetic meaning_\nBy synthesizing these abstract terms together, one could begin to develop new and more powerful mathematical abstractions, much like a poet does with metaphoric words in a poem. Whitehead talked of this synthesize of elements into a greater meaning as 'concrescence'. \n"
      },
      "date": 1625943875477
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is empowering a whole new level of our creativity."
      },
      "date": 1625943940737
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is empowering a whole new level of our creativity defining this new age. "
      },
      "date": 1625943962628
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "This essential nature of lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is empowering a whole new level of our creativity, a creativity that is defining this new age. "
      },
      "date": 1625944004101
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name could be understood to represent a generalized mathematical function. These terms could then be used to simplify subsequent calculations. \n"
      },
      "date": 1625956453122
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction, an idea that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single character or name could be understood to represent a generalized mathematical function. These terms could then be used to simplify subsequent calculations. \n"
      },
      "date": 1631896191362
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Lambda calculus lies at the heart of all computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is empowering a whole new level of our creativity, a creativity that is defining this new age. "
      },
      "date": 1631896248956
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent a concept of abstraction, an idea that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single name could be understood to represent a generalized mathematical function. These terms could then be used to simplify subsequent calculations. \n"
      },
      "date": 1635278052093
    },
    {
      "id": "4747e6e053eedc05",
      "type": "move",
      "order": [
        "4747e6e053eedc05",
        "60f9784fe9f3dd32",
        "d0f6e6b6abac6357",
        "fe7fb484d8165f34",
        "a6dfda81d60f5bde",
        "71c33df326855160",
        "3eb7f5536f635695",
        "af659bcd8cb40348"
      ],
      "date": 1641583470160
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Lambda calculus lies at the heart of all modern computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that is empowering a whole new level of our creativity, a creativity that is defining this new age. "
      },
      "date": 1641583545829
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead and Russell, Alonzo Church introduced lambda calculus in the 1930s, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
      },
      "date": 1641583638245
    },
    {
      "type": "add",
      "id": "8039533d7fb439bf",
      "item": {
        "type": "paragraph",
        "id": "8039533d7fb439bf",
        "text": "Math is said to be the language of the universe. Through math, we can describe abstract laws that govern all relationships. "
      },
      "after": "4747e6e053eedc05",
      "date": 1641836797776
    },
    {
      "id": "8039533d7fb439bf",
      "type": "move",
      "order": [
        "8039533d7fb439bf",
        "4747e6e053eedc05",
        "cc32b1fbd7707723",
        "60f9784fe9f3dd32",
        "d0f6e6b6abac6357",
        "fe7fb484d8165f34",
        "a6dfda81d60f5bde",
        "71c33df326855160",
        "3eb7f5536f635695",
        "af659bcd8cb40348"
      ],
      "date": 1641836799748,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1641836807535
    },
    {
      "type": "edit",
      "id": "8039533d7fb439bf",
      "item": {
        "type": "paragraph",
        "id": "8039533d7fb439bf",
        "text": "Math is said to be the language of the universe. Through math, we can describe abstract laws that govern all relationships. In math, lies out aspiration for truth. "
      },
      "date": 1641836852611
    },
    {
      "type": "edit",
      "id": "8039533d7fb439bf",
      "item": {
        "type": "paragraph",
        "id": "8039533d7fb439bf",
        "text": "Math is said to be the language of the universe. Through math, we can describe abstract laws that govern all relationships. In math lies our aspiration for truth. "
      },
      "date": 1641836872987
    },
    {
      "type": "add",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding of reality, math was suffering its own existential crisis for our ability to describe it. In 1930, Kurt Godel presented his incompleteness theorums  to "
      },
      "after": "8039533d7fb439bf",
      "date": 1641837086190
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding of reality, math was suffering its own existential crisis for our ability to describe it. In 1930, Kurt presented his incompleteness theorems  to "
      },
      "date": 1641837162400
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding of reality, math was suffering its own existential crisis for our ability to describe it. In 1930, Kurt Gödel, a German logician, mathematician and philosophy presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending the quest to define inherent truth with math. "
      },
      "date": 1641837292911
    },
    {
      "type": "add",
      "id": "ad55b60e60962488",
      "item": {
        "type": "paragraph",
        "id": "ad55b60e60962488",
        "text": "His findings completely upended the mathematical world, but also, unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a mathemetician tha walked into the creative unknown."
      },
      "after": "2495fc214f3ada01",
      "date": 1641837426630
    },
    {
      "type": "edit",
      "id": "ad55b60e60962488",
      "item": {
        "type": "paragraph",
        "id": "ad55b60e60962488",
        "text": "His findings completely upended the mathematical world, but also, unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a mathematician that walked into the creative unknown."
      },
      "date": 1641837437262
    },
    {
      "id": "60f9784fe9f3dd32",
      "type": "move",
      "order": [
        "8039533d7fb439bf",
        "2495fc214f3ada01",
        "ad55b60e60962488",
        "60f9784fe9f3dd32",
        "4747e6e053eedc05",
        "d0f6e6b6abac6357",
        "fe7fb484d8165f34",
        "a6dfda81d60f5bde",
        "71c33df326855160",
        "3eb7f5536f635695",
        "af659bcd8cb40348"
      ],
      "date": 1641837451902
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead and Russell, Alonzo Church developed lambda calculus, creating a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
      },
      "date": 1641837496053
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding of physical reality, math was suffering its own existential crisis for our ability to describe it. In 1930, Kurt Gödel, a German logician, mathematician and philosophy presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending the quest to define inherent truth with math. "
      },
      "date": 1641837530464
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding of matter, math was suffering its own existential crisis for our ability to describe it. In 1930, Kurt Gödel, a German logician, mathematician and philosophy presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending the quest to define inherent truth with math. "
      },
      "date": 1641837543778
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding reality, math was suffering its own existential crisis for our ability to describe it. In 1930, Kurt Gödel, a German logician, mathematician and philosophy presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending the quest to define inherent truth with math. "
      },
      "date": 1641837575183
    },
    {
      "type": "edit",
      "id": "8039533d7fb439bf",
      "item": {
        "type": "paragraph",
        "id": "8039533d7fb439bf",
        "text": "Math is said to be the language of the universe. Through math, we can describe abstract laws that govern all relationships – in math lies our aspiration for truth. "
      },
      "date": 1641837592885
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding reality, math was suffering its own existential crisis for our ability to describe it. In 1930, Kurt Gödel, a German logician, mathematician and philosophy presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any quest to define inherent truth with math. "
      },
      "date": 1641837652440
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding reality, math was suffering its own existential crisis for our ability to describe it. In 1930, Kurt Gödel, a German logician, mathematician and philosophy presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any quest to define inherent truth in math. "
      },
      "date": 1641837657383
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding reality, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosophy presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any quest to define inherent truth in math. "
      },
      "date": 1641837679277
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding reality, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any quest to define inherent truth in math. "
      },
      "date": 1641837743451
    },
    {
      "type": "edit",
      "id": "ad55b60e60962488",
      "item": {
        "type": "paragraph",
        "id": "ad55b60e60962488",
        "text": "His findings tormented the mathematical world, but also, unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a mathematician that walked into the creative unknown."
      },
      "date": 1641837765758
    },
    {
      "type": "edit",
      "id": "ad55b60e60962488",
      "item": {
        "type": "paragraph",
        "id": "ad55b60e60962488",
        "text": "His findings tormented the mathematical world, but also, unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a mathematician that walked into this creative unknown."
      },
      "date": 1641837803179
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead and Russell, Alonzo Church developed lambda calculus in the 1930s that create a framework which allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
      },
      "date": 1641837846568
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Lambda calculus lies at the heart of all modern computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that empowered a whole new level of our creativity, a creativity that is defining this new age. "
      },
      "date": 1641837888591
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Lambda calculus lies at the heart of all modern computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that empowered a whole new level of our creativity, potential that is defining this new age. "
      },
      "date": 1641837905402
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding reality, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any quest to define inherent truth in math. "
      },
      "date": 1641837952114
    },
    {
      "type": "edit",
      "id": "ad55b60e60962488",
      "item": {
        "type": "paragraph",
        "id": "ad55b60e60962488",
        "text": "His findings tormented the mathematical world, but also unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a mathematician that walked into this creative unknown."
      },
      "date": 1641837977582
    },
    {
      "type": "edit",
      "id": "ad55b60e60962488",
      "item": {
        "type": "paragraph",
        "id": "ad55b60e60962488",
        "text": "His findings tormented the mathematical world but also unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a mathematician that walked into this creative unknown."
      },
      "date": 1641837985132
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Lambda calculus lies at the heart of all modern computer languages, allowing programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that empowered computer-enabled creativity, the potential that is defining this new age. "
      },
      "date": 1641838066360
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent an abstraction, an idea that was introduced by Whitehead and Russell in their book _Principia Mathematica_. This concept held that a single name could be understood to represent a generalized mathematical formula. These terms could then be used to construct increasingly more powerful algorithms. \n"
      },
      "date": 1641838181141
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a generalized mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, all that could be easily accessed through a single word, a meta-abstraction.\n"
      },
      "date": 1641838517452
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a generalized mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, all that could be easily used through a single word, a meta-abstraction.\n"
      },
      "date": 1641838637019
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a generalized mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, all that could be easily used through a single word, what we might think of as a meta-abstraction.\n"
      },
      "date": 1641838659876
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a generalized mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, each of which could be easily used using a simple name, what we might think of as a meta-abstraction.\n"
      },
      "date": 1641838739344
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "_abstraction_\nChurch used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a generalized mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, each of which could be easily used using a simple name, what we might think of as a meta-abstractions.\n"
      },
      "date": 1641838755094
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis for our understanding matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any quest to define inherent truth in math. "
      },
      "date": 1641838930389
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "\nChurch used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a generalized mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, each of which could be easily used using a simple name, what we might think of as a meta-abstractions.\n"
      },
      "date": 1641839007475
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "By synthesizing these abstract terms together, one could begin to develop new and more powerful mathematical abstractions, much like a poet does with metaphoric words in a poem. Whitehead talked of this synthesize of elements into a greater meaning as 'concrescence'. \n"
      },
      "date": 1641839020230
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "\nThis combination of abstractions fuse into new meaning in moments of insight – [[Eureka Moments]] – that seem to rush through us in ways that are significant yet often hard to describe. \n"
      },
      "date": 1641839041311
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "This combination of abstractions fuse into new meaning in moments of potential. \n"
      },
      "date": 1641839067512
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "This combination of abstractions fuse into new meaning in moments that unleash new potential. \n"
      },
      "date": 1641839093594
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "This combination of abstractions fuse into new meaning in moments that unleashed new potential. \n"
      },
      "date": 1641839120365
    },
    {
      "type": "remove",
      "id": "71c33df326855160",
      "date": 1641839134632
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis in our quest to understand the inherent truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any quest to define inherent truth in math. "
      },
      "date": 1641839284677
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis in our quest to understand the inherent truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define inherent truth in math. "
      },
      "date": 1641839393907
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis in our quest to understand the inherent truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define the inherent truth in math. "
      },
      "date": 1641839405685
    },
    {
      "type": "edit",
      "id": "ad55b60e60962488",
      "item": {
        "type": "paragraph",
        "id": "ad55b60e60962488",
        "text": "His findings tormented the mathematical world but also unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a logician and mathematician that walked into this creative unknown."
      },
      "date": 1641839439241
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead and Russell, Church developed lambda calculus in the 1930s that create a framework which allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
      },
      "date": 1641839450281
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Lambda calculus lies at the heart of all modern computer languages, enabling programmers to develop increasingly more powerful algorithms to unleash the analytical and creative potential of computers – a potential that empowered computer-enabled creativity, the potential that is defining this new age. "
      },
      "date": 1641839474848
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Lambda calculus lies at the heart of all modern computer languages, enabling programmers to develop increasingly more powerful algorithms that unleash the analytical and creative potential of computers – a potential that empowered computer-enabled creativity, the potential that is defining this new age. "
      },
      "date": 1641839485858
    },
    {
      "type": "edit",
      "id": "4747e6e053eedc05",
      "item": {
        "type": "paragraph",
        "id": "4747e6e053eedc05",
        "text": "Lambda calculus lies at the heart of all modern computer languages, enabling programmers to develop increasingly more powerful algorithms that unleash the analytical and creative potential of computers – a potential that empowers computer-enabled creativity, the potential that is defining this new age. "
      },
      "date": 1641839499853
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, each of which could be easily used using a simple name, what we might think of as a meta-abstractions.\n"
      },
      "date": 1641839526325
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "This combination of abstractions fuse into new meaning in moments that unleashed new creative potential. \n"
      },
      "date": 1641839589640
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis in our quest to define the inherent truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define the inherent truth in math. "
      },
      "date": 1641839625814
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis in our quest to define the inherent truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define inherent truth in math. "
      },
      "date": 1641839671154
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, each of which could be easily used using a simple name, a meta-abstraction.\n"
      },
      "date": 1641839757095
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "By combining these abstract terms together, one could begin to develop new and more powerful mathematical abstractions, much like a poet does with metaphoric words in a poem. Whitehead talked of this synthesize of elements into a greater meaning as 'concrescence'. \n"
      },
      "date": 1641839802773
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "By combining these abstract terms together, one could begin to develop new and more powerful mathematical abstractions, much like a poet does with words in a poem. Whitehead talked of this synthesize of elements into a greater meaning as 'concrescence'. \n"
      },
      "date": 1641839814813
    },
    {
      "type": "edit",
      "id": "fe7fb484d8165f34",
      "item": {
        "type": "markdown",
        "id": "fe7fb484d8165f34",
        "text": "By combining these abstract terms together, one could begin to develop new and more powerful mathematical abstractions, much like a poet does with metaphors in a poem. Whitehead talked of this synthesize of elements into a greater meaning as 'concrescence'. \n"
      },
      "date": 1641839828338
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a mathematical formula. These terms could then be used to construct increasingly more powerful algorithms, each of which could be easily used by a simple name, a meta-abstraction.\n"
      },
      "date": 1641839964805
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "This synthesis of abstractions fuse into new meaning in moments that unleash new creative potential. \n"
      },
      "date": 1641840091875
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis as physicists sought define the inherent truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define inherent truth in math. "
      },
      "date": 1641919621664
    },
    {
      "type": "edit",
      "id": "ad55b60e60962488",
      "item": {
        "type": "paragraph",
        "id": "ad55b60e60962488",
        "text": "His findings tormented mathematicians but also unleashed incredible new potential. If math could not prove its own truth, what could it let us imagine? Alonzo Church was a logician and mathematician that walked into this creative unknown."
      },
      "date": 1641919682127
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a mathematical function. These terms could then be used to construct increasingly more powerful algorithms, each of which could be easily used by a simple name, a meta-abstraction.\n"
      },
      "date": 1641919767864
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a mathematical function. These functions could then be used to construct increasingly more powerful algorithms, each of which could be easily used by a simple name, a meta-abstraction.\n"
      },
      "date": 1641919777712
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined to represent a mathematical function. These functions could then be used to construct increasingly more powerful algorithms, each becoming a meta-abstraction.\n"
      },
      "date": 1641919847061
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent what he called an 'abstraction' that could be defined a function. These functions could then be used to construct increasingly more powerful algorithms, each becoming a meta-abstraction that could be named.\n"
      },
      "date": 1641920009946
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more powerful algorithms, each which could be named and used by simply referring to its name. "
      },
      "date": 1641920303679
    },
    {
      "type": "remove",
      "id": "fe7fb484d8165f34",
      "date": 1641920382176
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more powerful recursive algorithms, each which could be named and used by simply referring to its name.  This potential gives programers the power to wield words like a poet – metaphoric power. "
      },
      "date": 1641920648134
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more powerful recursive algorithms, each which could be named and used by simply referring to its name.  This potential gives programers the power to wield words like a poet – metaphoric power of abstraction. "
      },
      "date": 1641920663728
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more powerful recursive algorithms, each which could be named and used by simply referring to its name.  This potential gives programers the power to wield words like a poet – the metaphoric power of abstraction. "
      },
      "date": 1641920694858
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "The synthesis of abstractions into new meaning in moments that unleash new creative potential. \n"
      },
      "date": 1641920768648
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "The synthesis of abstractions into higher level meaning in moments that unleash new creative potential. \n"
      },
      "date": 1641920793497
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "The synthesis of abstractions into higher-level meaning in moments that unleash new creative potential. \n"
      },
      "date": 1641920806778
    },
    {
      "type": "edit",
      "id": "8039533d7fb439bf",
      "item": {
        "type": "paragraph",
        "id": "8039533d7fb439bf",
        "text": "Math is said to be the language of the universe. Through math, we can describe abstract laws that govern all relationships – in math lies our aspiration for conceptual truth. "
      },
      "date": 1641921098232
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics brought about an existential crisis as physicists sought define the physical truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define inherent truth in math. "
      },
      "date": 1641921119675
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics created an existential crisis as physicists sought define the physical truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define inherent truth in math. "
      },
      "date": 1641921145217
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics created an existential crisis for physicists who sought to define the physical truth of matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define inherent truth in math. "
      },
      "date": 1641921169251
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics created an existential crisis for physicists who sought to define a physical truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define inherent truth in math. "
      },
      "date": 1641921197592
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics created an existential crisis for physicists who sought to define a physical truth in matter, math was suffering its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define an inherent truth in math. "
      },
      "date": 1641921243216
    },
    {
      "type": "edit",
      "id": "8039533d7fb439bf",
      "item": {
        "type": "paragraph",
        "id": "8039533d7fb439bf",
        "text": "Math is said to be the language of the universe. Through math, we can describe the laws that govern all relationships – in math lies our aspiration for conceptual truth. "
      },
      "date": 1641921396757
    },
    {
      "type": "edit",
      "id": "8039533d7fb439bf",
      "item": {
        "type": "paragraph",
        "id": "8039533d7fb439bf",
        "text": "Math is said to be the language of the universe. Through math, we hoped to describe the laws that govern all relationships – in math lies our aspiration for conceptual truth. "
      },
      "date": 1641921465020
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more powerful recursive algorithms, each which could be named and used by simply referring to its name.  This potential gave computer programers the power to wield words like a poet – the metaphoric power of abstraction. "
      },
      "date": 1641922141134
    },
    {
      "type": "edit",
      "id": "a6dfda81d60f5bde",
      "item": {
        "type": "markdown",
        "id": "a6dfda81d60f5bde",
        "text": "The synthesis of abstractions into higher-level meaning in magical moments that unleash new creative potential. \n"
      },
      "date": 1641922184866
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more powerful recursive algorithms, each which could be used by simply referring to its name.  This potential gave computer programers the power to wield words like a poet – the metaphoric power of abstraction. "
      },
      "date": 1641922467063
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more powerful recursive algorithms, each which could be used by simply referring to its name.  This potential gave computer programers the power to wield words like a poet with the metaphoric power of abstraction. "
      },
      "date": 1641922490281
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead and Russell, Church developed lambda calculus in the 1930s to create a framework which allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
      },
      "date": 1641922584546
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics created an existential crisis for physicists who sought to define a physical truth in matter, math was shortly to suffer its own existential crisis. In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define an inherent truth in math. "
      },
      "date": 1642003245855
    },
    {
      "type": "edit",
      "id": "2495fc214f3ada01",
      "item": {
        "type": "paragraph",
        "id": "2495fc214f3ada01",
        "text": "But just as quantum physics created an existential crisis for physicists who sought to define a physical truth in matter, math was shortly to suffer its own existential crisis. "
      },
      "date": 1642003263569
    },
    {
      "type": "add",
      "id": "a38312912cb6bb51",
      "item": {
        "type": "paragraph",
        "id": "a38312912cb6bb51",
        "text": "In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility to define an inherent truth in math. "
      },
      "after": "2495fc214f3ada01",
      "date": 1642003264635
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more complex recursive algorithms, the power of each which could be used by simply referring to its name.  This potential gave computer programers the power to wield words like a poet with the metaphoric power of abstraction. "
      },
      "date": 1642003445086
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more complex recursive algorithms, the power of each which could be used by simply referring to its name.  This potential gave computer programers the capacity to wield words like a poet with the metaphoric power of abstraction. "
      },
      "date": 1642003491690
    },
    {
      "type": "edit",
      "id": "a38312912cb6bb51",
      "item": {
        "type": "paragraph",
        "id": "a38312912cb6bb51",
        "text": "In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility that we could define an inherent truth in math. "
      },
      "date": 1642004061501
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead and Russell, Church developed lambda calculus in the 1930s to create a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
      },
      "date": 1642004188249
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more complex recursive algorithms, the power of each which could be used by simply referring to its name.  \n"
      },
      "date": 1642004389737
    },
    {
      "type": "add",
      "id": "b517facba3ccf387",
      "item": {
        "type": "markdown",
        "id": "b517facba3ccf387",
        "text": "This potential gave computer programers the capacity to wield words like a poet with the metaphoric power of abstraction. "
      },
      "after": "d0f6e6b6abac6357",
      "date": 1642004390699
    },
    {
      "type": "edit",
      "id": "a38312912cb6bb51",
      "item": {
        "type": "paragraph",
        "id": "a38312912cb6bb51",
        "text": "In 1930, Kurt Gödel, a German logician, mathematician and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility that we could define an inherent truth through math."
      },
      "date": 1670009813959
    },
    {
      "type": "edit",
      "id": "b517facba3ccf387",
      "item": {
        "type": "markdown",
        "id": "b517facba3ccf387",
        "text": "This potential gave computer programmers the capacity to wield words like a poet with the metaphoric power of abstraction. "
      },
      "date": 1670009847755
    },
    {
      "type": "edit",
      "id": "60f9784fe9f3dd32",
      "item": {
        "type": "markdown",
        "id": "60f9784fe9f3dd32",
        "text": "Influenced by Whitehead and Russell, Church developed lambda calculus in the 1930s to create a framework that allowed mathematicians to develop _abstractions_ of _poetic meaning_ that felt, well, _magical_. "
      },
      "date": 1670546272068
    },
    {
      "type": "edit",
      "id": "a38312912cb6bb51",
      "item": {
        "type": "paragraph",
        "id": "a38312912cb6bb51",
        "text": "In 1930, Kurt Gödel, a German logician, mathematician, and philosopher, presented his incompleteness theorems that demonstrated that no mathematical system could prove its own truth, completely upending any possibility that we could define an inherent truth through math."
      },
      "date": 1670785537926
    },
    {
      "type": "edit",
      "id": "d0f6e6b6abac6357",
      "item": {
        "type": "markdown",
        "id": "d0f6e6b6abac6357",
        "text": "Church used the greek character 'lambda' to represent a transformational expression that could be defined as a function. These functions could then be used to construct increasingly more complex recursive algorithms, which the power of each could be used by simply referring to its name.  \n"
      },
      "date": 1670785640733
    },
    {
      "type": "fork",
      "site": "thompson.reimage.fed.wiki",
      "date": 1670934620420
    }
  ]
}