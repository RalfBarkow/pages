{
  "title": "Source Code Metamodels",
  "story": [
    {
      "type": "markdown",
      "id": "3be7ccb0675da88d",
      "text": "Once we have a format defined, it is important to specify the [[model]] to represent source code elements. This section and the subsequent ones describe the global structure of the FAMIX model. They introduce the core model (which illustrates the core entities and associations), the abstract part of the model (defining the abstract superclasses that will be extended). This document describes the version 3.0 of the FAMIX metamodel. It is a major revision over FAMIX2.1 [DTD01].\n"
    },
    {
      "type": "markdown",
      "id": "e4972e0c5289e544",
      "text": "[[FAMIX]] is a family of meta-models for representing models related to various facets of software systems. These meta-models are typically geared towards enabling analysis and they provide a rich API that can be used for querying and navigation. In this document we will not present the complete API but explain the key classes.\nIn addition it is important to understand that the goal of FAMIX is to represent in a language independent fashion programs. While this is possible to represent several languages with a common subsets, it is important to realize that\n1. We have to do some compromises - sometimes for a given language a simpler solution could be better.\n1. Meta model elements should be extended to support specific language features.\nIn Moose we use class extensions (the fact that a method can be packaged in a different package than its classes, and that a class can get extra method when other packages are loaded) to extend the core metamodel classes without being forced to subclasses them.\n1. While a meta model can be language independent, the analyses built on top of it may have to be language specific."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Source Code Metamodels",
        "story": []
      },
      "date": 1644223533990
    },
    {
      "item": {
        "type": "factory",
        "id": "3be7ccb0675da88d"
      },
      "id": "3be7ccb0675da88d",
      "type": "add",
      "date": 1644223535301
    },
    {
      "type": "edit",
      "id": "3be7ccb0675da88d",
      "item": {
        "type": "paragraph",
        "id": "3be7ccb0675da88d",
        "text": "Once we have a format defined, it is important to specify the model to represent source\ncode elements. This section and the subsequent ones describe the global structure of\nthe FAMIX model. They introduce the core model (which illustrates the core entities\nand associations), the abstract part of the model (defining the abstract superclasses that\nwill be extended). This document describes the version 3.0 of the FAMIX metamodel.\nIt is a major revision over FAMIX2.1 [DTD01].\nFAMIX is a family of meta-models for representing models related to various facets\nof software systems. These meta-models are typically geared towards enabling analysis\nand they provide a rich API that can be used for querying and navigation. In this\ndocument we will not present the complete API but explain the key classes.\nIn addition it is important to understand that the goal of FAMIX is to represent in\na language independent fashion programs. While this is possible to represent several\nlanguages with a common subsets, it is important to realize that\n1. We have to do some compromises - sometimes for a given language a simpler\nsolution could be better.\n1. Meta model elements should be extended to support specific language features.\nIn Moose we use class extensions (the fact that a method can be packaged in a\ndifferent package than its classes, and that a class can get extra method when\nother packages are loaded) to extend the core metamodel classes without being\nforced to subclasses them.\n1. While a meta model can be language independent, the analyses built on top of it\nmay have to be language specific."
      },
      "date": 1644223567701
    },
    {
      "type": "edit",
      "id": "3be7ccb0675da88d",
      "item": {
        "type": "markdown",
        "id": "3be7ccb0675da88d",
        "text": "Once we have a format defined, it is important to specify the model to represent source\ncode elements. This section and the subsequent ones describe the global structure of\nthe FAMIX model. They introduce the core model (which illustrates the core entities\nand associations), the abstract part of the model (defining the abstract superclasses that\nwill be extended). This document describes the version 3.0 of the FAMIX metamodel.\nIt is a major revision over FAMIX2.1 [DTD01].\nFAMIX is a family of meta-models for representing models related to various facets\nof software systems. These meta-models are typically geared towards enabling analysis\nand they provide a rich API that can be used for querying and navigation. In this\ndocument we will not present the complete API but explain the key classes.\nIn addition it is important to understand that the goal of FAMIX is to represent in\na language independent fashion programs. While this is possible to represent several\nlanguages with a common subsets, it is important to realize that\n1. We have to do some compromises - sometimes for a given language a simpler\nsolution could be better.\n1. Meta model elements should be extended to support specific language features.\nIn Moose we use class extensions (the fact that a method can be packaged in a\ndifferent package than its classes, and that a class can get extra method when\nother packages are loaded) to extend the core metamodel classes without being\nforced to subclasses them.\n1. While a meta model can be language independent, the analyses built on top of it\nmay have to be language specific."
      },
      "date": 1644223568527
    },
    {
      "type": "edit",
      "id": "3be7ccb0675da88d",
      "item": {
        "type": "markdown",
        "id": "3be7ccb0675da88d",
        "text": "Once we have a format defined, it is important to specify the model to represent source code elements. This section and the subsequent ones describe the global structure of\nthe FAMIX model. They introduce the core model (which illustrates the core entities and associations), the abstract part of the model (defining the abstract superclasses that will be extended). This document describes the version 3.0 of the FAMIX metamodel.\nIt is a major revision over FAMIX2.1 [DTD01].\nFAMIX is a family of meta-models for representing models related to various facets\nof software systems. These meta-models are typically geared towards enabling analysis\nand they provide a rich API that can be used for querying and navigation. In this\ndocument we will not present the complete API but explain the key classes.\nIn addition it is important to understand that the goal of FAMIX is to represent in\na language independent fashion programs. While this is possible to represent several\nlanguages with a common subsets, it is important to realize that\n1. We have to do some compromises - sometimes for a given language a simpler solution could be better.\n1. Meta model elements should be extended to support specific language features.\nIn Moose we use class extensions (the fact that a method can be packaged in a\ndifferent package than its classes, and that a class can get extra method when\nother packages are loaded) to extend the core metamodel classes without being\nforced to subclasses them.\n1. While a meta model can be language independent, the analyses built on top of it\nmay have to be language specific."
      },
      "date": 1644223595059
    },
    {
      "type": "edit",
      "id": "3be7ccb0675da88d",
      "item": {
        "type": "markdown",
        "id": "3be7ccb0675da88d",
        "text": "Once we have a format defined, it is important to specify the model to represent source code elements. This section and the subsequent ones describe the global structure of the FAMIX model. They introduce the core model (which illustrates the core entities and associations), the abstract part of the model (defining the abstract superclasses that will be extended). This document describes the version 3.0 of the FAMIX metamodel. It is a major revision over FAMIX2.1 [DTD01].\n"
      },
      "date": 1644223633545
    },
    {
      "type": "add",
      "id": "e4972e0c5289e544",
      "item": {
        "type": "markdown",
        "id": "e4972e0c5289e544",
        "text": "[[FAMIX]] is a family of meta-models for representing models related to various facets of software systems. These meta-models are typically geared towards enabling analysis and they provide a rich API that can be used for querying and navigation. In this\ndocument we will not present the complete API but explain the key classes.\nIn addition it is important to understand that the goal of FAMIX is to represent in\na language independent fashion programs. While this is possible to represent several\nlanguages with a common subsets, it is important to realize that\n1. We have to do some compromises - sometimes for a given language a simpler solution could be better.\n1. Meta model elements should be extended to support specific language features.\nIn Moose we use class extensions (the fact that a method can be packaged in a\ndifferent package than its classes, and that a class can get extra method when\nother packages are loaded) to extend the core metamodel classes without being\nforced to subclasses them.\n1. While a meta model can be language independent, the analyses built on top of it\nmay have to be language specific."
      },
      "after": "3be7ccb0675da88d",
      "date": 1644223640675
    },
    {
      "type": "edit",
      "id": "3be7ccb0675da88d",
      "item": {
        "type": "markdown",
        "id": "3be7ccb0675da88d",
        "text": "Once we have a format defined, it is important to specify the [[model]] to represent source code elements. This section and the subsequent ones describe the global structure of the FAMIX model. They introduce the core model (which illustrates the core entities and associations), the abstract part of the model (defining the abstract superclasses that will be extended). This document describes the version 3.0 of the FAMIX metamodel. It is a major revision over FAMIX2.1 [DTD01].\n"
      },
      "date": 1644223652032
    },
    {
      "type": "edit",
      "id": "e4972e0c5289e544",
      "item": {
        "type": "markdown",
        "id": "e4972e0c5289e544",
        "text": "[[FAMIX]] is a family of meta-models for representing models related to various facets of software systems. These meta-models are typically geared towards enabling analysis and they provide a rich API that can be used for querying and navigation. In this document we will not present the complete API but explain the key classes.\nIn addition it is important to understand that the goal of FAMIX is to represent in a language independent fashion programs. While this is possible to represent several languages with a common subsets, it is important to realize that\n1. We have to do some compromises - sometimes for a given language a simpler solution could be better.\n1. Meta model elements should be extended to support specific language features.\nIn Moose we use class extensions (the fact that a method can be packaged in a\ndifferent package than its classes, and that a class can get extra method when\nother packages are loaded) to extend the core metamodel classes without being\nforced to subclasses them.\n1. While a meta model can be language independent, the analyses built on top of it\nmay have to be language specific."
      },
      "date": 1644223691722
    },
    {
      "type": "edit",
      "id": "e4972e0c5289e544",
      "item": {
        "type": "markdown",
        "id": "e4972e0c5289e544",
        "text": "[[FAMIX]] is a family of meta-models for representing models related to various facets of software systems. These meta-models are typically geared towards enabling analysis and they provide a rich API that can be used for querying and navigation. In this document we will not present the complete API but explain the key classes.\nIn addition it is important to understand that the goal of FAMIX is to represent in a language independent fashion programs. While this is possible to represent several languages with a common subsets, it is important to realize that\n1. We have to do some compromises - sometimes for a given language a simpler solution could be better.\n1. Meta model elements should be extended to support specific language features.\nIn Moose we use class extensions (the fact that a method can be packaged in a different package than its classes, and that a class can get extra method when other packages are loaded) to extend the core metamodel classes without being forced to subclasses them.\n1. While a meta model can be language independent, the analyses built on top of it may have to be language specific."
      },
      "date": 1644230695386
    }
  ]
}