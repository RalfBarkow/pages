{
  "title": "Parser Parser Combinators for Program Transformation",
  "story": [
    {
      "type": "paragraph",
      "id": "1e3c62de2d399715",
      "text": "[[Rijnard van Tonder]], creator of Comby [https://comby.live/ site]"
    },
    {
      "type": "video",
      "id": "d7e9fe3f3cceb349",
      "text": "YOUTUBE JMZLBB_BFNg\n\"Parser Parser Combinators for Program Transformation\" by Rijnard van Tonder"
    },
    {
      "type": "paragraph",
      "id": "4d9e684bbb56080f",
      "text": "15.09.2019"
    },
    {
      "type": "paragraph",
      "id": "0b4a8c557ca8332d",
      "text": "Multi-language tool support for syntax transformation is hard due to heterogeneous representations in syntax and abstract syntax trees (ASTs). Regex-based search-and-replace falls short of recognizing syntax that fundamentally delineates tree data structures. Recent approaches develop new strategies that overcome the limitations of regex matching but remain underdeveloped for easily changing code. Our work goes one step further, focusing on the problem of enabling lightweight program transformation in every language for every programmer. We show that the problem can be decomposed where (1) a common grammar expresses the central context-free language properties shared by many contemporary languages (e.g., balanced parentheses) and (2) open extension points in the grammar customizes syntax handling (e.g., for language-specific comments) with smaller parsers. We introduce Parser Parser Combinators (PPCs), our key mechanism implementing these ideas. PPCs are parser combinators that produce parsers from user-supplied patterns. Generated parsers run directly on program source to match syntax of interest (we don't define or use any AST), thereby lifting syntax rewriting to a modularly-defined parsing problem. We share large-scale results from rewriting code across 12 languages (Go, Rust, Scala, and Elm to name but a few) for top-100 most popular GitHub repositories (per language). We show over 50 syntactic changes merged into 40+ of these projects using our tool, and give a demo."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Parser Parser Combinators for Program Transformation",
        "story": []
      },
      "date": 1695305749654
    },
    {
      "id": "d7e9fe3f3cceb349",
      "type": "add",
      "item": {
        "type": "video",
        "id": "d7e9fe3f3cceb349",
        "text": "YOUTUBE JMZLBB_BFNg"
      },
      "attribution": {
        "page": "2023-09-21"
      },
      "date": 1695305755195
    },
    {
      "item": {
        "type": "factory",
        "id": "4d9e684bbb56080f"
      },
      "id": "4d9e684bbb56080f",
      "type": "add",
      "after": "d7e9fe3f3cceb349",
      "date": 1695305774740
    },
    {
      "type": "edit",
      "id": "4d9e684bbb56080f",
      "item": {
        "type": "paragraph",
        "id": "4d9e684bbb56080f",
        "text": "15.09.2019\nMulti-language tool support for syntax transformation is hard due to heterogeneous representations in syntax and abstract syntax trees (ASTs). Regex-based search-and-replace falls short of recognizing syntax that fundamentally delineates tree data structures. Recent approaches develop new strategies that overcome the limitations of regex matching but remain underdeveloped for easily changing code. Our work goes one step further, focusing on the problem of enabling lightweight program transformation in every language for every programmer. We show that the problem can be decomposed where (1) a common grammar expresses the central context-free language properties shared by many contemporary languages (e.g., balanced parentheses) and (2) open extension points in the grammar customizes syntax handling (e.g., for language-specific comments) with smaller parsers. We introduce Parser Parser Combinators (PPCs), our key mechanism implementing these ideas. PPCs are parser combinators that produce parsers from user-supplied patterns. Generated parsers run directly on program source to match syntax of interest (we don't define or use any AST), thereby lifting syntax rewriting to a modularly-defined parsing problem. We share large-scale results from rewriting code across 12 languages (Go, Rust, Scala, and Elm to name but a few) for top-100 most popular GitHub repositories (per language). We show over 50 syntactic changes merged into 40+ of these projects using our tool, and give a demo.\n\nRijnard van Tonder\nCarnegie Mellon University and Sourcegraph\n@rvtond\n\nRijnard is a PhD candidate at Carnegie Mellon University and a part-time software engineer at Sourcegraph. His research interest is in the overlap of Automated Program Repair, Program Transformation, and Program Analysis, with an emphasis on bringing new advances in this area to practice. Rijnard is born South African and holds a Master's and Bachelor's from Stellenbosch University."
      },
      "date": 1695305776283
    },
    {
      "type": "edit",
      "id": "4d9e684bbb56080f",
      "item": {
        "type": "paragraph",
        "id": "4d9e684bbb56080f",
        "text": "15.09.2019"
      },
      "date": 1695305826161
    },
    {
      "type": "add",
      "id": "0b4a8c557ca8332d",
      "item": {
        "type": "paragraph",
        "id": "0b4a8c557ca8332d",
        "text": "Multi-language tool support for syntax transformation is hard due to heterogeneous representations in syntax and abstract syntax trees (ASTs). Regex-based search-and-replace falls short of recognizing syntax that fundamentally delineates tree data structures. Recent approaches develop new strategies that overcome the limitations of regex matching but remain underdeveloped for easily changing code. Our work goes one step further, focusing on the problem of enabling lightweight program transformation in every language for every programmer. We show that the problem can be decomposed where (1) a common grammar expresses the central context-free language properties shared by many contemporary languages (e.g., balanced parentheses) and (2) open extension points in the grammar customizes syntax handling (e.g., for language-specific comments) with smaller parsers. We introduce Parser Parser Combinators (PPCs), our key mechanism implementing these ideas. PPCs are parser combinators that produce parsers from user-supplied patterns. Generated parsers run directly on program source to match syntax of interest (we don't define or use any AST), thereby lifting syntax rewriting to a modularly-defined parsing problem. We share large-scale results from rewriting code across 12 languages (Go, Rust, Scala, and Elm to name but a few) for top-100 most popular GitHub repositories (per language). We show over 50 syntactic changes merged into 40+ of these projects using our tool, and give a demo.\n\nRijnard van Tonder\nCarnegie Mellon University and Sourcegraph\n@rvtond\n\nRijnard is a PhD candidate at Carnegie Mellon University and a part-time software engineer at Sourcegraph. His research interest is in the overlap of Automated Program Repair, Program Transformation, and Program Analysis, with an emphasis on bringing new advances in this area to practice. Rijnard is born South African and holds a Master's and Bachelor's from Stellenbosch University."
      },
      "after": "4d9e684bbb56080f",
      "date": 1695305827249
    },
    {
      "item": {
        "type": "factory",
        "id": "1e3c62de2d399715"
      },
      "id": "1e3c62de2d399715",
      "type": "add",
      "after": "0b4a8c557ca8332d",
      "date": 1695305940149
    },
    {
      "id": "1e3c62de2d399715",
      "type": "move",
      "order": [
        "1e3c62de2d399715",
        "d7e9fe3f3cceb349",
        "4d9e684bbb56080f",
        "0b4a8c557ca8332d"
      ],
      "date": 1695305945175
    },
    {
      "type": "edit",
      "id": "1e3c62de2d399715",
      "item": {
        "type": "paragraph",
        "id": "1e3c62de2d399715",
        "text": "Rijnard van Tonder, creator of Comby"
      },
      "date": 1695305949022
    },
    {
      "type": "edit",
      "id": "1e3c62de2d399715",
      "item": {
        "type": "paragraph",
        "id": "1e3c62de2d399715",
        "text": "Rijnard van Tonder, creator of Comby [https://comby.live/ site]"
      },
      "date": 1695306256569
    },
    {
      "type": "edit",
      "id": "0b4a8c557ca8332d",
      "item": {
        "type": "paragraph",
        "id": "0b4a8c557ca8332d",
        "text": "Multi-language tool support for syntax transformation is hard due to heterogeneous representations in syntax and abstract syntax trees (ASTs). Regex-based search-and-replace falls short of recognizing syntax that fundamentally delineates tree data structures. Recent approaches develop new strategies that overcome the limitations of regex matching but remain underdeveloped for easily changing code. Our work goes one step further, focusing on the problem of enabling lightweight program transformation in every language for every programmer. We show that the problem can be decomposed where (1) a common grammar expresses the central context-free language properties shared by many contemporary languages (e.g., balanced parentheses) and (2) open extension points in the grammar customizes syntax handling (e.g., for language-specific comments) with smaller parsers. We introduce Parser Parser Combinators (PPCs), our key mechanism implementing these ideas. PPCs are parser combinators that produce parsers from user-supplied patterns. Generated parsers run directly on program source to match syntax of interest (we don't define or use any AST), thereby lifting syntax rewriting to a modularly-defined parsing problem. We share large-scale results from rewriting code across 12 languages (Go, Rust, Scala, and Elm to name but a few) for top-100 most popular GitHub repositories (per language). We show over 50 syntactic changes merged into 40+ of these projects using our tool, and give a demo."
      },
      "date": 1695306515153
    },
    {
      "type": "add",
      "id": "d7e821c6aad8cc36",
      "item": {
        "type": "paragraph",
        "id": "d7e821c6aad8cc36",
        "text": "[[Rijnard van Tonder]]\nCarnegie Mellon University and Sourcegraph\n@rvtond\n\nRijnard is a PhD candidate at Carnegie Mellon University and a part-time software engineer at Sourcegraph. His research interest is in the overlap of Automated Program Repair, Program Transformation, and Program Analysis, with an emphasis on bringing new advances in this area to practice. Rijnard is born South African and holds a Master's and Bachelor's from Stellenbosch University."
      },
      "after": "0b4a8c557ca8332d",
      "date": 1695306519297
    },
    {
      "id": "d7e821c6aad8cc36",
      "type": "remove",
      "removedTo": {
        "page": "Rijnard van Tonder"
      },
      "date": 1695306528130
    },
    {
      "type": "edit",
      "id": "1e3c62de2d399715",
      "item": {
        "type": "paragraph",
        "id": "1e3c62de2d399715",
        "text": "[[Rijnard van Tonder]], creator of Comby [https://comby.live/ site]"
      },
      "date": 1695306546187
    },
    {
      "type": "edit",
      "id": "d7e9fe3f3cceb349",
      "item": {
        "type": "video",
        "id": "d7e9fe3f3cceb349",
        "text": "YOUTUBE JMZLBB_BFNg\n\"Parser Parser Combinators for Program Transformation\" by Rijnard van Tonder"
      },
      "date": 1695329200386
    }
  ]
}