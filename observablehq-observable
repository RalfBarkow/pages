{
  "title": "ObservableHQ Observable",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "We use a tool from ObservableHQ's standard library to learn more about processing event streams from existing tools. [https://github.com/observablehq/stdlib#Generators_observe docs]"
    },
    {
      "type": "paragraph",
      "id": "0546e7ca19bc1760",
      "text": "This draws parts from [[Javascript Generators]] and [[RxJS Observable]]."
    },
    {
      "type": "paragraph",
      "id": "b8a37b6e0014e5d2",
      "text": "We need something that knows how to convert a sequence of points into graphics instructions."
    },
    {
      "type": "code",
      "id": "7474b13b85017948",
      "text": "async function drawLine(ctx, line, color) {\n  ctx.beginPath()\n  ctx.strokeStyle = color\n  ctx.lineWidth = 1\n  let first = true\n  for await (let {x, y} of line) { // knows iterators \n    first ? ctx.moveTo(x, y) : ctx.lineTo(x, y)\n    ctx.stroke()\n    first = false\n  }\n}"
    },
    {
      "type": "paragraph",
      "id": "2b83956535395893",
      "text": "We need a canvas on which to draw."
    },
    {
      "type": "code",
      "id": "992841a9d56810ba",
      "text": "let canvas = document.createElement(\"canvas\")\ncanvas.id = \"canvas\"\ncanvas.style = \"border: 1px solid black;\"\ncanvas.width = 380\ncanvas.height = 330\nlet ctx = canvas.getContext(\"2d\")\noutput.appendChild(canvas)\n\n"
    },
    {
      "type": "paragraph",
      "id": "82a8264d72d607c5",
      "text": "We import the Generators library."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "import {Library}\n  from \"https://cdn.skypack.dev/@observablehq/stdlib@3\"\nconst {Generators} = new Library()"
    },
    {
      "type": "paragraph",
      "id": "95446a77750b9884",
      "text": "We use Generators.observe to create something to convert a stream of pointer events on the canvas into a sequence of points."
    },
    {
      "type": "code",
      "id": "f60c71defbe486e0",
      "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    ctx.moveTo(event.offsetX, event.offsetY)\n    canvas.addEventListener(\"pointerup\", dragend)\n    canvas.addEventListener(\"pointermove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"pointerup\", dragend)\n    canvas.removeEventListener(\"pointermove\", point)\n  }\n  canvas.addEventListener(\"pointerdown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"pointerdown\", dragstart)\n  }\n})"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "Can we draw a line with these parts?"
    },
    {
      "type": "code",
      "id": "353e5e4c7514dc74",
      "text": "drawLine(ctx, line, \"green\")\n\nexport default `<em>\nTry drawing lines in the box above. Reload to clear.\n</em>`"
    },
    {
      "type": "paragraph",
      "id": "9b107b325dab0d9b",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/importjs.html\nHEIGHT 400"
    },
    {
      "type": "pagefold",
      "id": "b3a9971bdf9e818f",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "fc064523fbef3510",
      "text": "(We forked an Observable Notebook that looks handy for figuring urls for imports—if we continue to be motivated with these experiments:  Module Require Debugger [https://observablehq.com/@dobbs/module-require-debugger notebook])"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "ObservableHQ Observable",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\n2 + 3\n\n"
          },
          {
            "type": "paragraph",
            "id": "caa626ac93aa7d4c",
            "text": "In the frame below we can view the results."
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/basicjs.html\nHEIGHT 400"
          },
          {
            "type": "paragraph",
            "id": "8155a586f5842b0f",
            "text": "See also [[Static Import Snippet]]"
          }
        ]
      },
      "date": 1620251238753
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/importjs.html\nHEIGHT 400"
      },
      "date": 1620251276614
    },
    {
      "type": "remove",
      "id": "8155a586f5842b0f",
      "date": 1620251283048
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "import {Library}\n  from \"https://cdn.skypack.dev/@observablehq/stdlib@3\"\nconst {DOM, Observable, Generators} = new Library()\n\nexport default {DOM, Observable, Generators}"
      },
      "date": 1620252869792
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "import {Library}\n  from \"https://cdn.skypack.dev/@observablehq/stdlib@3\"\nconst {DOM, Generators} = new Library()\n\nexport default {DOM, Observable, Generators}"
      },
      "date": 1620253123522
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "import {Library}\n  from \"https://cdn.skypack.dev/@observablehq/stdlib@3\"\nconst {DOM, Generators} = new Library()\n\nexport default {DOM, Generators}"
      },
      "date": 1620253133240
    },
    {
      "type": "add",
      "id": "fc064523fbef3510",
      "item": {
        "type": "paragraph",
        "id": "fc064523fbef3510",
        "text": "(We forked an Observable Notebook that looks handy if we continue to be motivated with these experiments:  Module Require Debugger [https://observablehq.com/@dobbs/module-require-debugger notebook])"
      },
      "after": "484e092159df2d01",
      "date": 1620253302579
    },
    {
      "type": "edit",
      "id": "fc064523fbef3510",
      "item": {
        "type": "paragraph",
        "id": "fc064523fbef3510",
        "text": "(We forked an Observable Notebook that looks handy for figuring urls for imports—if we continue to be motivated with these experiments:  Module Require Debugger [https://observablehq.com/@dobbs/module-require-debugger notebook])"
      },
      "date": 1620253343479
    },
    {
      "id": "2b83956535395893",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a canvas on which to draw."
      },
      "after": "caa626ac93aa7d4c",
      "date": 1620253911072
    },
    {
      "id": "992841a9d56810ba",
      "type": "add",
      "item": {
        "type": "code",
        "id": "992841a9d56810ba",
        "text": "let canvas = document.createElement(\"canvas\")\ncanvas.id = \"canvas\"\ncanvas.style = \"border: 1px solid black;\"\ncanvas.width = 380\ncanvas.height = 330\nlet transX = Math.floor(canvas.width/2)\nlet transY = Math.floor(canvas.height/2)\nlet ctx = canvas.getContext(\"2d\")\nctx.translate(transX, transY)\noutput.appendChild(canvas)\n\n"
      },
      "after": "2b83956535395893",
      "date": 1620253914993
    },
    {
      "id": "caa626ac93aa7d4c",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "fc064523fbef3510",
        "5eb6b67568179aa3",
        "2b83956535395893",
        "992841a9d56810ba",
        "caa626ac93aa7d4c",
        "6cf52409eec3988c"
      ],
      "date": 1620253922149
    },
    {
      "id": "b8a37b6e0014e5d2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b8a37b6e0014e5d2",
        "text": "We need something that knows how to convert a sequence of points into graphics instructions."
      },
      "after": "5eb6b67568179aa3",
      "date": 1620266486442
    },
    {
      "id": "7474b13b85017948",
      "type": "add",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "async function drawLine(ctx, line, color) {\n  ctx.beginPath()\n  ctx.strokeStyle = color\n  ctx.lineWidth = 1\n  let first = true\n  for await (let {x, y} of line) { // knows iterators \n    first ? ctx.moveTo(x, y) : ctx.lineTo(x, y)\n    ctx.stroke()\n    first = false\n  }\n}"
      },
      "after": "b8a37b6e0014e5d2",
      "date": 1620266489332
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "import {Library}\n  from \"https://cdn.skypack.dev/@observablehq/stdlib@3\"\nconst {DOM, Generators} = new Library()"
      },
      "date": 1620309761484
    },
    {
      "type": "add",
      "id": "95446a77750b9884",
      "item": {
        "type": "paragraph",
        "id": "95446a77750b9884",
        "text": "We need something that can convert a stream of pointer events on the canvas into a sequence of points."
      },
      "after": "992841a9d56810ba",
      "date": 1620310133158
    },
    {
      "type": "add",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "factory",
        "id": "f60c71defbe486e0",
        "text": "Generators.observe(change => {\n\n  // An event listener to yield the element’s new value.\n  const inputted = () => change(element.value);\n\n  // Attach the event listener.\n  element.addEventListener(\"input\", inputted);\n\n  // Yield the element’s initial value.\n  change(element.value);\n\n  // Detach the event listener when the generator is disposed.\n  return () => element.removeEventListener(\"input\", inputted);\n})"
      },
      "after": "95446a77750b9884",
      "date": 1620310135275
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    point(event)\n    function dragend() => {\n      canvas.removeEventListener(\"mouseup\", dragged)\n      canvas.removeEventListener(\"mousemove\", point)\n    }\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n    \n  }\n\n  // Yield the element’s initial value.\n  change(element.value);\n\n  // Detach the event listener when the generator is disposed.\n  return () => element.removeEventListener(\"input\", inputted);\n})"
      },
      "date": 1620310819210
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    point(event)\n    function dragend() => {\n      canvas.removeEventListener(\"mouseup\", dragged)\n      canvas.removeEventListener(\"mousemove\", point)\n    }\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n  }\n\n  // Yield the element’s initial value.\n  change(element.value);\n\n  // Detach the event listener when the generator is disposed.\n  return () => element.removeEventListener(\"input\", inputted);\n})"
      },
      "date": 1620310958860
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    point(event)\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n  }\n  function dragend() => {\n    canvas.removeEventListener(\"mouseup\", dragged)\n    canvas.removeEventListener(\"mousemove\", point)\n  }\n  canvas.addEventListener(\"mousedown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"mousedown\", dragstart)\n  }\n})"
      },
      "date": 1620311160892
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    point(event)\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"mouseup\", dragged)\n    canvas.removeEventListener(\"mousemove\", point)\n  }\n  canvas.addEventListener(\"mousedown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"mousedown\", dragstart)\n  }\n})"
      },
      "date": 1620311176834
    },
    {
      "type": "edit",
      "id": "caa626ac93aa7d4c",
      "item": {
        "type": "paragraph",
        "id": "caa626ac93aa7d4c",
        "text": "Can we draw a line with these parts?"
      },
      "date": 1620311220418
    },
    {
      "type": "add",
      "id": "9b107b325dab0d9b",
      "item": {
        "type": "paragraph",
        "id": "9b107b325dab0d9b",
        "text": "In the frame below we can view the results."
      },
      "after": "caa626ac93aa7d4c",
      "date": 1620311224066
    },
    {
      "type": "add",
      "id": "d8b3c9df06a3e46f",
      "item": {
        "type": "paragraph",
        "id": "d8b3c9df06a3e46f",
        "text": "await drawLine(ctx, line(), \"paleblue\")"
      },
      "after": "caa626ac93aa7d4c",
      "date": 1620311260251
    },
    {
      "type": "edit",
      "id": "d8b3c9df06a3e46f",
      "item": {
        "type": "code",
        "id": "d8b3c9df06a3e46f",
        "text": "await drawLine(ctx, line(), \"paleblue\")\n"
      },
      "date": 1620311277179
    },
    {
      "type": "edit",
      "id": "d8b3c9df06a3e46f",
      "item": {
        "type": "code",
        "id": "d8b3c9df06a3e46f",
        "text": "drawLine(ctx, line(), \"paleblue\")\n"
      },
      "date": 1620311285863
    },
    {
      "type": "remove",
      "id": "d8b3c9df06a3e46f",
      "date": 1620311489028
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    point(event)\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"mouseup\", dragged)\n    canvas.removeEventListener(\"mousemove\", point)\n  }\n  canvas.addEventListener(\"mousedown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"mousedown\", dragstart)\n  }\n})\n\nconsole.log({line, type: typeof line})\ndrawLine(ctx, line(), \"paleblue\")\n"
      },
      "date": 1620311523822
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    point(event)\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"mouseup\", dragged)\n    canvas.removeEventListener(\"mousemove\", point)\n  }\n  canvas.addEventListener(\"mousedown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"mousedown\", dragstart)\n  }\n})\n\nconsole.log({line, type: typeof line})\ndrawLine(ctx, line, \"paleblue\")\n"
      },
      "date": 1620311582168
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    point(event)\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"mouseup\", dragend)\n    canvas.removeEventListener(\"mousemove\", point)\n  }\n  canvas.addEventListener(\"mousedown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"mousedown\", dragstart)\n  }\n})"
      },
      "date": 1620311631706
    },
    {
      "type": "add",
      "id": "353e5e4c7514dc74",
      "item": {
        "type": "factory",
        "id": "353e5e4c7514dc74",
        "text": "\nconsole.log({line, type: typeof line})\ndrawLine(ctx, line, \"paleblue\")\n"
      },
      "after": "caa626ac93aa7d4c",
      "date": 1620311641266
    },
    {
      "type": "edit",
      "id": "353e5e4c7514dc74",
      "item": {
        "type": "code",
        "id": "353e5e4c7514dc74",
        "text": "drawLine(ctx, line, \"lightblue\")\n"
      },
      "date": 1620311657977
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({\n      x: event.offsetX - transX,\n      y: event.offsetY - transY\n    })\n  }\n  function dragstart(event) {\n    ctx.moveTo(\n      event.offsetX - transX,\n      event.offsetY - transY\n    )\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"mouseup\", dragend)\n    canvas.removeEventListener(\"mousemove\", point)\n  }\n  canvas.addEventListener(\"mousedown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"mousedown\", dragstart)\n  }\n})"
      },
      "date": 1620311897671
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We use a tool from ObservableHQ's standard library to learn more about processing event streams from existing tools. [ docs]"
      },
      "date": 1620313285120
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We use a tool from ObservableHQ's standard library to learn more about processing event streams from existing tools. [https://github.com/observablehq/stdlib#Generators_observe docs]"
      },
      "date": 1620313302862
    },
    {
      "type": "edit",
      "id": "353e5e4c7514dc74",
      "item": {
        "type": "code",
        "id": "353e5e4c7514dc74",
        "text": "drawLine(ctx, line, \"lightblue\")\n\nexport default `<em>\nTry drawing lines in the box above. Reload to clear.\n</em>`"
      },
      "date": 1620313354838
    },
    {
      "item": {
        "type": "factory",
        "id": "b3a9971bdf9e818f"
      },
      "id": "b3a9971bdf9e818f",
      "type": "add",
      "after": "6cf52409eec3988c",
      "date": 1620313371608
    },
    {
      "type": "edit",
      "id": "b3a9971bdf9e818f",
      "item": {
        "type": "pagefold",
        "id": "b3a9971bdf9e818f",
        "text": "."
      },
      "date": 1620313374798
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "import {Library}\n  from \"https://cdn.skypack.dev/@observablehq/stdlib@3\"\nconst {Generators} = new Library()"
      },
      "date": 1620313404378
    },
    {
      "type": "add",
      "id": "82a8264d72d607c5",
      "item": {
        "type": "paragraph",
        "id": "82a8264d72d607c5",
        "text": "We import the Generators library."
      },
      "after": "fc064523fbef3510",
      "date": 1620313427584
    },
    {
      "id": "fc064523fbef3510",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "82a8264d72d607c5",
        "5eb6b67568179aa3",
        "b8a37b6e0014e5d2",
        "7474b13b85017948",
        "2b83956535395893",
        "992841a9d56810ba",
        "95446a77750b9884",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1620313440620
    },
    {
      "type": "add",
      "id": "0546e7ca19bc1760",
      "item": {
        "type": "paragraph",
        "id": "0546e7ca19bc1760",
        "text": "This draws parts from [[Javascript Generators]] and [[RxJS Observable]]."
      },
      "after": "484e092159df2d01",
      "date": 1620313512157
    },
    {
      "id": "82a8264d72d607c5",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "0546e7ca19bc1760",
        "5eb6b67568179aa3",
        "b8a37b6e0014e5d2",
        "7474b13b85017948",
        "2b83956535395893",
        "992841a9d56810ba",
        "95446a77750b9884",
        "82a8264d72d607c5",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1620326378231
    },
    {
      "id": "5eb6b67568179aa3",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "0546e7ca19bc1760",
        "b8a37b6e0014e5d2",
        "7474b13b85017948",
        "2b83956535395893",
        "992841a9d56810ba",
        "95446a77750b9884",
        "82a8264d72d607c5",
        "5eb6b67568179aa3",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1620326395432
    },
    {
      "id": "95446a77750b9884",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "0546e7ca19bc1760",
        "b8a37b6e0014e5d2",
        "7474b13b85017948",
        "2b83956535395893",
        "992841a9d56810ba",
        "82a8264d72d607c5",
        "5eb6b67568179aa3",
        "95446a77750b9884",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1620326400320
    },
    {
      "type": "edit",
      "id": "95446a77750b9884",
      "item": {
        "type": "paragraph",
        "id": "95446a77750b9884",
        "text": "We use Generators.observe to create something to convert a stream of pointer events on the canvas into a sequence of points."
      },
      "date": 1620326438070
    },
    {
      "type": "edit",
      "id": "992841a9d56810ba",
      "item": {
        "type": "code",
        "id": "992841a9d56810ba",
        "text": "let canvas = document.createElement(\"canvas\")\ncanvas.id = \"canvas\"\ncanvas.style = \"border: 1px solid black;\"\ncanvas.width = 380\ncanvas.height = 330\nlet ctx = canvas.getContext(\"2d\")\noutput.appendChild(canvas)\n\n"
      },
      "date": 1620326517273
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    ctx.moveTo(event.offsetX, event.offsetY)\n    canvas.addEventListener(\"mouseup\", dragend)\n    canvas.addEventListener(\"mousemove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"mouseup\", dragend)\n    canvas.removeEventListener(\"mousemove\", point)\n  }\n  canvas.addEventListener(\"mousedown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"mousedown\", dragstart)\n  }\n})"
      },
      "date": 1620326560725
    },
    {
      "id": "2b83956535395893",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "0546e7ca19bc1760",
        "2b83956535395893",
        "b8a37b6e0014e5d2",
        "7474b13b85017948",
        "992841a9d56810ba",
        "82a8264d72d607c5",
        "5eb6b67568179aa3",
        "95446a77750b9884",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1622521120579
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "let line = Generators.observe(change => {\n  function point(event) {\n    event.preventDefault()\n    event.stopPropagation()\n    change({x: event.offsetX, y: event.offsetY})\n  }\n  function dragstart(event) {\n    ctx.moveTo(event.offsetX, event.offsetY)\n    canvas.addEventListener(\"pointerup\", dragend)\n    canvas.addEventListener(\"pointermove\", point)\n  }\n  function dragend() {\n    canvas.removeEventListener(\"pointerup\", dragend)\n    canvas.removeEventListener(\"pointermove\", point)\n  }\n  canvas.addEventListener(\"pointerdown\", dragstart)\n  return () => {\n    dragend()\n    canvas.removeEventListener(\"pointerdown\", dragstart)\n  }\n})"
      },
      "date": 1622750810936
    },
    {
      "id": "7474b13b85017948",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "7474b13b85017948",
        "0546e7ca19bc1760",
        "b8a37b6e0014e5d2",
        "2b83956535395893",
        "992841a9d56810ba",
        "82a8264d72d607c5",
        "5eb6b67568179aa3",
        "95446a77750b9884",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1622754203931
    },
    {
      "id": "7474b13b85017948",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "0546e7ca19bc1760",
        "7474b13b85017948",
        "b8a37b6e0014e5d2",
        "2b83956535395893",
        "992841a9d56810ba",
        "82a8264d72d607c5",
        "5eb6b67568179aa3",
        "95446a77750b9884",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1622754205526
    },
    {
      "id": "2b83956535395893",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "0546e7ca19bc1760",
        "7474b13b85017948",
        "2b83956535395893",
        "b8a37b6e0014e5d2",
        "992841a9d56810ba",
        "82a8264d72d607c5",
        "5eb6b67568179aa3",
        "95446a77750b9884",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1622754224228
    },
    {
      "id": "b8a37b6e0014e5d2",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "0546e7ca19bc1760",
        "b8a37b6e0014e5d2",
        "7474b13b85017948",
        "2b83956535395893",
        "992841a9d56810ba",
        "82a8264d72d607c5",
        "5eb6b67568179aa3",
        "95446a77750b9884",
        "f60c71defbe486e0",
        "caa626ac93aa7d4c",
        "353e5e4c7514dc74",
        "9b107b325dab0d9b",
        "6cf52409eec3988c",
        "b3a9971bdf9e818f",
        "fc064523fbef3510"
      ],
      "date": 1622754237226
    },
    {
      "type": "edit",
      "id": "353e5e4c7514dc74",
      "item": {
        "type": "code",
        "id": "353e5e4c7514dc74",
        "text": "drawLine(ctx, line, \"green\")\n\nexport default `<em>\nTry drawing lines in the box above. Reload to clear.\n</em>`"
      },
      "date": 1629651881397
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1629785182375
    }
  ]
}