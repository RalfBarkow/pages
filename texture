{
  "title": "Texture",
  "story": [
    {
      "type": "paragraph",
      "id": "314a885342e90ffa",
      "text": "Basic 2D texture. It can be loaded from a source image, or used as a render target.\n"
    },
    {
      "type": "paragraph",
      "id": "2b847c8fcba3ca18",
      "text": "If you load from a power of 2 image, it will generate mips and set the parameters so it will tile.\n"
    },
    {
      "type": "code",
      "id": "037c12e6134703bc",
      "text": "export class Texture {\n\n    constructor(width = 1, height = 1) {\n        this.texture = gl.createTexture();\n        this.width = width;\n        this.height = height;\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    }\n\n    destroy() {\n        gl.deleteTexture(this.texture);\n    }\n\n    loadFromURL(url) {\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 0, 255, 255]));\n        const cached = LoadImage(url, image => this.loadImage(image));\n        if (cached) this.loadImage(cached);\n    }\n\n    loadFromByteArray(width, height, array) {\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, array);\n        this.width = width;\n        this.height = height;\n        if (this.isPowerOfTwo) { // Generate MIPs\n            gl.generateMipmap(gl.TEXTURE_2D);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        } else { // Display options are restricted in WebGL for non-power-of-two textures\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        }\n    }\n\n    loadImage(image) {\n        if (!gl.isTexture(this.texture)) return; // In case texture is destroyed while we're waiting for it to load.\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        this.width = image.width;\n        this.height = image.height;\n        if (this.isPowerOfTwo) { // Generate MIPs\n            gl.generateMipmap(gl.TEXTURE_2D);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        } else { // Display options are restricted in WebGL for non-power-of-two textures\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        }\n    }\n\n    apply(unit = 0) {\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        glShader.setUniform(\"uSampler\" + unit, unit);\n        glShader.setUniform(\"uTextureWidth\" + unit, this.width);\n        glShader.setUniform(\"uTextureHeight\" + unit, this.height);\n    }\n\n    get isPowerOfTwo() {\n        return !(this.width & (this.width-1)) && !(this.height & (this.height-1));\n    }\n\n}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Texture",
        "story": []
      },
      "date": 1655153400332
    },
    {
      "item": {
        "type": "paragraph",
        "id": "314a885342e90ffa",
        "text": "Basic 2D texture. It can be loaded from a source image, or used as a render target.\n"
      },
      "id": "314a885342e90ffa",
      "type": "add",
      "date": 1655153402077
    },
    {
      "type": "edit",
      "id": "314a885342e90ffa",
      "item": {
        "type": "paragraph",
        "id": "314a885342e90ffa",
        "text": "Basic 2D texture. It can be loaded from a source image, or used as a render target.\n"
      },
      "date": 1655153410610
    },
    {
      "type": "add",
      "id": "2b847c8fcba3ca18",
      "item": {
        "type": "paragraph",
        "id": "2b847c8fcba3ca18",
        "text": "If you load from a power of 2 image, it will generate mips and set the parameters so it will tile.\n"
      },
      "after": "314a885342e90ffa",
      "date": 1655153415652
    },
    {
      "item": {
        "type": "code",
        "id": "037c12e6134703bc",
        "text": "export class Texture {\n\n    constructor(width = 1, height = 1) {\n        this.texture = gl.createTexture();\n        this.width = width;\n        this.height = height;\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    }\n\n    destroy() {\n        gl.deleteTexture(this.texture);\n    }\n\n    loadFromURL(url) {\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 0, 255, 255]));\n        const cached = LoadImage(url, image => this.loadImage(image));\n        if (cached) this.loadImage(cached);\n    }\n\n    loadFromByteArray(width, height, array) {\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, array);\n        this.width = width;\n        this.height = height;\n        if (this.isPowerOfTwo) { // Generate MIPs\n            gl.generateMipmap(gl.TEXTURE_2D);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        } else { // Display options are restricted in WebGL for non-power-of-two textures\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        }\n    }\n\n    loadImage(image) {\n        if (!gl.isTexture(this.texture)) return; // In case texture is destroyed while we're waiting for it to load.\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        this.width = image.width;\n        this.height = image.height;\n        if (this.isPowerOfTwo) { // Generate MIPs\n            gl.generateMipmap(gl.TEXTURE_2D);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        } else { // Display options are restricted in WebGL for non-power-of-two textures\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        }\n    }\n\n    apply(unit = 0) {\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        glShader.setUniform(\"uSampler\" + unit, unit);\n        glShader.setUniform(\"uTextureWidth\" + unit, this.width);\n        glShader.setUniform(\"uTextureHeight\" + unit, this.height);\n    }\n\n    get isPowerOfTwo() {\n        return !(this.width & (this.width-1)) && !(this.height & (this.height-1));\n    }\n\n}"
      },
      "id": "037c12e6134703bc",
      "type": "add",
      "after": "2b847c8fcba3ca18",
      "date": 1655153433326
    },
    {
      "type": "edit",
      "id": "037c12e6134703bc",
      "item": {
        "type": "code",
        "id": "037c12e6134703bc",
        "text": "export class Texture {\n\n    constructor(width = 1, height = 1) {\n        this.texture = gl.createTexture();\n        this.width = width;\n        this.height = height;\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    }\n\n    destroy() {\n        gl.deleteTexture(this.texture);\n    }\n\n    loadFromURL(url) {\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([255, 0, 255, 255]));\n        const cached = LoadImage(url, image => this.loadImage(image));\n        if (cached) this.loadImage(cached);\n    }\n\n    loadFromByteArray(width, height, array) {\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, array);\n        this.width = width;\n        this.height = height;\n        if (this.isPowerOfTwo) { // Generate MIPs\n            gl.generateMipmap(gl.TEXTURE_2D);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        } else { // Display options are restricted in WebGL for non-power-of-two textures\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        }\n    }\n\n    loadImage(image) {\n        if (!gl.isTexture(this.texture)) return; // In case texture is destroyed while we're waiting for it to load.\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        this.width = image.width;\n        this.height = image.height;\n        if (this.isPowerOfTwo) { // Generate MIPs\n            gl.generateMipmap(gl.TEXTURE_2D);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        } else { // Display options are restricted in WebGL for non-power-of-two textures\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        }\n    }\n\n    apply(unit = 0) {\n        gl.activeTexture(gl.TEXTURE0 + unit);\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        glShader.setUniform(\"uSampler\" + unit, unit);\n        glShader.setUniform(\"uTextureWidth\" + unit, this.width);\n        glShader.setUniform(\"uTextureHeight\" + unit, this.height);\n    }\n\n    get isPowerOfTwo() {\n        return !(this.width & (this.width-1)) && !(this.height & (this.height-1));\n    }\n\n}"
      },
      "date": 1655153435893
    },
    {
      "type": "fork",
      "date": 1655153444059
    },
    {
      "type": "fork",
      "date": 1655153524500
    }
  ]
}