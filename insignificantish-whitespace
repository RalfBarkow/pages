{
  "title": "Insignificantish whitespace",
  "story": [
    {
      "type": "paragraph",
      "id": "75ddad9003e51dff",
      "text": "Whitespace in JavaScript is insignificant. Well, except where it is significant. As you might imagine this makes white space one of the [[JavaScript common pitfalls]]."
    },
    {
      "type": "paragraph",
      "id": "4e6bbdee0d977f6f",
      "text": "When I say whitespace, here I'm mostly talking about line breaks. The other whitespace characters are less tricky to deal with. New lines give you a real sense of a break in visual flow, like something new is starting and the old thing is over. In JS this is only sometimes true. Usually in the least helpful situations."
    },
    {
      "type": "code",
      "id": "3b52c5927b10a382",
      "text": "// broken\nvar add = function (a, b) { return a + b }\n\n// Innocent comma separated numbers \n// sitting here for no reason.\n(1, 2)\n\nconsole.log(add) // 3"
    },
    {
      "type": "paragraph",
      "id": "f591bf56cf2b9b6a",
      "text": "Well, not so innocent after all. Those parens actually call the function expression above, assigning 3 to the variable 'add'. The whitespace and comments in-between don't stand in the way. To fix this you need a semicolon somewhere in the middle. The traditional c inspired syntax would have it at the end of the line after the function expression, but it is a fairly common JavaScript style to have it at the beginning of the line before the `(`."
    },
    {
      "type": "paragraph",
      "id": "1ee2f8e7fa51c27d",
      "text": "I'm not going to make a value judgment here on which is better. It's possible to choose because of JavaScript's 'automatic semicolon insertion' which is a unique feature that if javascript encounters a syntax error, it backs up to the new line, and tries again as if it had a semicolon there. This mechanism is standardized, and consistent across platforms."
    },
    {
      "type": "paragraph",
      "id": "b883b211679314ef",
      "text": "The other type of whitespace that can bite us bad is white space that looks insignificant but actually turns out to be significant."
    },
    {
      "type": "code",
      "id": "55f84f78aeffb7a8",
      "text": "console.log(\n  get('foo')({foo: 'bar'})\n)\n// broken\nfunction get (property) {\n  return\n    function getter (obj) {\n      return obj[property]\n    }\n}"
    },
    {
      "type": "paragraph",
      "id": "6cfb205a76d507aa",
      "text": "This is a common function i write all the time, it takes the name of a property, and returns a getter function that returns the value of that property on any objects it's handed. But this one has a subtle error."
    },
    {
      "type": "paragraph",
      "id": "f770e8eb13e4be44",
      "text": "For some reason, while new lines are almost never significant, they are after a return, if what follows is valid standing on its own. In this case that means that 'get' returns undefined, and 'getter' is a function statement that is hanging out in the ether never to be referenced again."
    },
    {
      "type": "code",
      "id": "b5a6c3083fea3754",
      "text": "console.log(\n  get('foo')({foo: 'bar'})\n)\n\nfunction get (property) {\n  return function getter (obj) {\n      return obj[property]\n    }\n}"
    },
    {
      "type": "paragraph",
      "id": "400613fae9dea46f",
      "text": "Move that function up a line, and all of a sudden 'getter' is a function expression that gets returned by 'get' and used to access 'bar' to be logged."
    },
    {
      "type": "paragraph",
      "id": "78d37857ad95b49e",
      "text": "One way to guard against this is to treat all whitespace as significant and prefixing '(', '[' and unary usage of operators that can also be binary operators with a ';' at the start of the line. Kind of a nuclear option, but it has other benefits too. The other way is to always wrap multi line returns in parens, with the opening paren on the same line as the return. That open paren forces it to not magically treat a new line significantly."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Insignificantish whitespace",
        "story": []
      },
      "date": 1432446522536
    },
    {
      "item": {
        "type": "factory",
        "id": "75ddad9003e51dff"
      },
      "id": "75ddad9003e51dff",
      "type": "add",
      "date": 1432446524546
    },
    {
      "type": "edit",
      "id": "75ddad9003e51dff",
      "item": {
        "type": "paragraph",
        "id": "75ddad9003e51dff",
        "text": "Whitespace in JavaScript is insignificant. Well, except where it is significant. As you might imagine this makes white space one of the [[JavaScript common pitfalls]]."
      },
      "date": 1432446668412
    },
    {
      "type": "add",
      "id": "4e6bbdee0d977f6f",
      "item": {
        "type": "paragraph",
        "id": "4e6bbdee0d977f6f",
        "text": "When I say whitespace, here I'm mostly talking about line breaks. The other whitespace characters are less tricky to deal with. New lines give you a real sense of a break in visual flow, like something new is starting and the old thing is over. In JS this is only sometimes true. Usually in the least helpful situations."
      },
      "after": "75ddad9003e51dff",
      "date": 1432446822644
    },
    {
      "item": {
        "type": "factory",
        "id": "3b52c5927b10a382"
      },
      "id": "3b52c5927b10a382",
      "type": "add",
      "after": "4e6bbdee0d977f6f",
      "date": 1432447120007
    },
    {
      "type": "edit",
      "id": "3b52c5927b10a382",
      "item": {
        "type": "code",
        "id": "3b52c5927b10a382",
        "text": "// broken\nvar add = function (a, b) { return a + b }\n\n// Innocent comma separated numbers sitting here for no reason.\n(1, 2)\n\nconsole.log(add) // 3"
      },
      "date": 1432447124566
    },
    {
      "item": {
        "type": "factory",
        "id": "f591bf56cf2b9b6a"
      },
      "id": "f591bf56cf2b9b6a",
      "type": "add",
      "after": "3b52c5927b10a382",
      "date": 1432447129969
    },
    {
      "type": "edit",
      "id": "3b52c5927b10a382",
      "item": {
        "type": "code",
        "id": "3b52c5927b10a382",
        "text": "// broken\nvar add = function (a, b) { return a + b }\n\n// Innocent comma separated numbers \n// sitting here for no reason.\n(1, 2)\n\nconsole.log(add) // 3"
      },
      "date": 1432447143379
    },
    {
      "type": "edit",
      "id": "f591bf56cf2b9b6a",
      "item": {
        "type": "paragraph",
        "id": "f591bf56cf2b9b6a",
        "text": "Well, not so innocent after all. Those parens actually call the function expression above, assigning 3 to the variable 'add'. The whitespace and comments in-between don't stand in the way. To fix this you need a semicolon somewhere in the middle. The traditional c inspired syntax would have it at the end of the line after the function expression, but it is a fairly common JavaScript style to have it at the beginning of the line before the `(`."
      },
      "date": 1432447414410
    },
    {
      "type": "add",
      "id": "1ee2f8e7fa51c27d",
      "item": {
        "type": "paragraph",
        "id": "1ee2f8e7fa51c27d",
        "text": "I'm not going to make a value judgment here on which is better. It's possible to choose because of JavaScript's 'automatic semicolon insertion' which is a unique feature that if javascript encounters a syntax error, it backs up to the new line, and tries again as if it had a semicolon there. This mechanism is standardized, and consistent across platforms."
      },
      "after": "f591bf56cf2b9b6a",
      "date": 1432447591383
    },
    {
      "type": "add",
      "id": "b883b211679314ef",
      "item": {
        "type": "paragraph",
        "id": "b883b211679314ef",
        "text": "The other type of whitespace that can bite us bad is white space that looks insignificant but actually turns out to be significant."
      },
      "after": "1ee2f8e7fa51c27d",
      "date": 1432447642146
    },
    {
      "item": {
        "type": "factory",
        "id": "55f84f78aeffb7a8"
      },
      "id": "55f84f78aeffb7a8",
      "type": "add",
      "after": "b883b211679314ef",
      "date": 1432447912106
    },
    {
      "type": "edit",
      "id": "55f84f78aeffb7a8",
      "item": {
        "type": "code",
        "id": "55f84f78aeffb7a8",
        "text": "console.log(\n  get('foo')({foo: 'bar'})\n)\n\nfunction get (property) {\n  return\n    function getter (obj) {\n      return obj[property]\n    }\n}"
      },
      "date": 1432447918339
    },
    {
      "item": {
        "type": "factory",
        "id": "6cfb205a76d507aa"
      },
      "id": "6cfb205a76d507aa",
      "type": "add",
      "after": "55f84f78aeffb7a8",
      "date": 1432447942765
    },
    {
      "type": "edit",
      "id": "6cfb205a76d507aa",
      "item": {
        "type": "paragraph",
        "id": "6cfb205a76d507aa",
        "text": "This is a common function i write all the time, it takes the name of a property, and returns a getter function that returns the value of that property on any objects it's handed."
      },
      "date": 1432447997885
    },
    {
      "type": "edit",
      "id": "55f84f78aeffb7a8",
      "item": {
        "type": "code",
        "id": "55f84f78aeffb7a8",
        "text": "console.log(\n  get('foo')({foo: 'bar'})\n)\n// broken\nfunction get (property) {\n  return\n    function getter (obj) {\n      return obj[property]\n    }\n}"
      },
      "date": 1432448009141
    },
    {
      "type": "edit",
      "id": "6cfb205a76d507aa",
      "item": {
        "type": "paragraph",
        "id": "6cfb205a76d507aa",
        "text": "This is a common function i write all the time, it takes the name of a property, and returns a getter function that returns the value of that property on any objects it's handed. But this one has a subtle error."
      },
      "date": 1432448022500
    },
    {
      "type": "add",
      "id": "f770e8eb13e4be44",
      "item": {
        "type": "paragraph",
        "id": "f770e8eb13e4be44",
        "text": "For some reason, while new lines are almost never significant, they are after a return, if what follows is valid standing on its own. In this case that means that 'get' returns undefined, and 'getter' is a function statement that is hanging out in the ether never to be referenced again."
      },
      "after": "6cfb205a76d507aa",
      "date": 1432448109539
    },
    {
      "item": {
        "type": "factory",
        "id": "b5a6c3083fea3754"
      },
      "id": "b5a6c3083fea3754",
      "type": "add",
      "after": "f770e8eb13e4be44",
      "date": 1432448151458
    },
    {
      "type": "edit",
      "id": "b5a6c3083fea3754",
      "item": {
        "type": "code",
        "id": "b5a6c3083fea3754",
        "text": "console.log(\n  get('foo')({foo: 'bar'})\n)\n\nfunction get (property) {\n  return function getter (obj) {\n      return obj[property]\n    }\n}"
      },
      "date": 1432448157208
    },
    {
      "item": {
        "type": "factory",
        "id": "400613fae9dea46f"
      },
      "id": "400613fae9dea46f",
      "type": "add",
      "after": "b5a6c3083fea3754",
      "date": 1432448164116
    },
    {
      "type": "edit",
      "id": "400613fae9dea46f",
      "item": {
        "type": "paragraph",
        "id": "400613fae9dea46f",
        "text": "Move that function up a line, and all of a sudden 'getter' is a function expression that gets returned by 'get' and used to access 'bar' to be logged."
      },
      "date": 1432448257662
    },
    {
      "type": "add",
      "id": "78d37857ad95b49e",
      "item": {
        "type": "paragraph",
        "id": "78d37857ad95b49e",
        "text": "One way to guard against this is to treat all whitespace as significant and prefixing '(', '[' and unary usage of operators that can also be binary operators with a ';' at the start of the line. Kind of a nuclear option, but it has other benefits too. The other way is to always wrap multi line returns in parens, with the opening paren on the same line as the return. That open paren forces it to not magically treat a new line significantly."
      },
      "after": "400613fae9dea46f",
      "date": 1432448562812
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1652868544639
    }
  ]
}