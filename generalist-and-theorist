{
  "title": "Generalist and Theorist",
  "story": [
    {
      "type": "paragraph",
      "id": "d86bd354d1a0a84a",
      "text": "[[Maximiliano Contieri]]: \"We need to train generalists, but not theorists. People who understand the basics and foundations of software engineering and can adapt to accidental implementations based on current tools, but also to future ones that we do not yet know today.\" [https://betterprogramming.pub/gpt-3-training-programmers-for-the-present-and-the-future-9d00534c8e9a post]"
    },
    {
      "type": "paragraph",
      "id": "b7e919573cf4a556",
      "text": "For me it is not a question of either/or."
    },
    {
      "type": "markdown",
      "id": "1eaf19ff19c3a23f",
      "text": "# What Do We Need to Teach?\n\nIn addition to “soft” skills such as construction and teamwork (since software arises from a collective activity) (17), we must teach design and prototyping techniques to validate our high-level solutions.\n\nAs for software, it is imperative to teach solution design, focusing on the behavior of our models and, paraphrasing Donald Knuth (21), the historical author of most of the algorithms we use today, avoiding premature optimizations because we want to [[play]] a game that machines dominate much better than us."
    },
    {
      "type": "pagefold",
      "id": "e2d640ce8c531eaf",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f3ae65183c76d8a0",
      "text": "17. Theory building ⇒ [[Programming as Theory Building]] ⇒ [[Scientific Software Development]]"
    },
    {
      "type": "paragraph",
      "id": "e17c154f2747d417",
      "text": "21. Knuth — The art of computing programming [https://es.wikipedia.org/wiki/The_Art_of_Computer_Programming wikipedia]"
    },
    {
      "type": "reference",
      "id": "df1a619015d92cdf",
      "site": "wiki.ralfbarkow.ch",
      "slug": "what-do-we-do-when-we-play",
      "title": "What Do We Do When We Play?",
      "text": "We play something, we play a game. A [[Game]]: that is obviously a different kind of [[Reality]] than the \"normal\" one, and playing a different activity than the normal one. What is different? This is the question I want to clarify: What is this strange other reality that we create through play?"
    },
    {
      "type": "paragraph",
      "id": "a91bedd1ec1bf668",
      "text": "Cf. how human chess differs from computer chess"
    },
    {
      "type": "reference",
      "id": "bd181ba9df90fe64",
      "site": "code.fed.wiki",
      "slug": "automation-as-team-player",
      "title": "Automation as Team Player",
      "text": "The challenges associated with making automation a 'team player' in a joint human-agent activity are discussed. Joint activity is defined as an extended set of actions that are carried out by an ensemble of people coordinating with each other. To carry out joint activity, each party effectively enters into a Basic Compact, an agreement to facilitate coordination, work toward shared goals, and prevent breakdowns in team coordination. Effective coordination requires establishing and maintaining common ground and an intelligent agent must fulfil the require"
    },
    {
      "type": "reference",
      "id": "e90a5a18c1c0f9cb",
      "site": "about.fed.wiki",
      "slug": "neighborhoods",
      "title": "Neighborhoods",
      "text": "Pages move freely throughout the federation which we subdivide into regions of various scale so as to have the pages we want and avoid the pages that would conflict or distract."
    },
    {
      "type": "paragraph",
      "id": "3ab79b24322d188e",
      "text": "One advantage of Federated Wiki seems to be that these neighborhoods organize themselves along the factual dimension (Sachdimension) of wiki pages."
    },
    {
      "type": "paragraph",
      "id": "f8afeaa4d7b71d87",
      "text": "Conflict avoidance and"
    },
    {
      "type": "reference",
      "id": "957178d841bf4bc7",
      "site": "wiki.ralfbarkow.ch",
      "slug": "finding-communities",
      "title": "Finding Communities",
      "text": "We present a new approach to the problem of *Finding Communities*: a community is a subset of actors who induce a locally optimal subgraph with respect to a density function defined on subsets of actors. Two different subsets with significant overlap can both be locally optimal, and in this way we may obtain overlapping communities. We design, implement, and test two novel efficient algorithms, RaRe and IS, which find communities according to our definition. These algorithms are shown to work effectively on both synthetic and real-world graphs, and also "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Generalist and Theorist",
        "story": []
      },
      "date": 1674825191537
    },
    {
      "item": {
        "type": "factory",
        "id": "d86bd354d1a0a84a"
      },
      "id": "d86bd354d1a0a84a",
      "type": "add",
      "date": 1674825225325
    },
    {
      "type": "edit",
      "id": "d86bd354d1a0a84a",
      "item": {
        "type": "paragraph",
        "id": "d86bd354d1a0a84a",
        "text": "We need to train generalists, but not theorists. People who understand the basics and foundations of software engineering and can adapt to accidental implementations based on current tools, but also to future ones that we do not yet know today."
      },
      "date": 1674825228040
    },
    {
      "type": "edit",
      "id": "d86bd354d1a0a84a",
      "item": {
        "type": "paragraph",
        "id": "d86bd354d1a0a84a",
        "text": "[[Maximiliano Contieri]]: \"We need to train generalists, but not theorists. People who understand the basics and foundations of software engineering and can adapt to accidental implementations based on current tools, but also to future ones that we do not yet know today.\""
      },
      "date": 1674825259937
    },
    {
      "type": "edit",
      "id": "d86bd354d1a0a84a",
      "item": {
        "type": "paragraph",
        "id": "d86bd354d1a0a84a",
        "text": "[[Maximiliano Contieri]]: \"We need to train generalists, but not theorists. People who understand the basics and foundations of software engineering and can adapt to accidental implementations based on current tools, but also to future ones that we do not yet know today.\" [https://betterprogramming.pub/gpt-3-training-programmers-for-the-present-and-the-future-9d00534c8e9a post]"
      },
      "date": 1674825287758
    },
    {
      "item": {
        "type": "factory",
        "id": "b7e919573cf4a556"
      },
      "id": "b7e919573cf4a556",
      "type": "add",
      "after": "d86bd354d1a0a84a",
      "date": 1674825316631
    },
    {
      "type": "edit",
      "id": "b7e919573cf4a556",
      "item": {
        "type": "paragraph",
        "id": "b7e919573cf4a556",
        "text": "For me it is not a question of either/or."
      },
      "date": 1674825319440
    },
    {
      "item": {
        "type": "factory",
        "id": "1f9a7184f2003bb0"
      },
      "id": "1f9a7184f2003bb0",
      "type": "add",
      "after": "b7e919573cf4a556",
      "date": 1674825623520
    },
    {
      "type": "edit",
      "id": "1f9a7184f2003bb0",
      "item": {
        "type": "paragraph",
        "id": "1f9a7184f2003bb0",
        "text": "⇒ [[Programming as Theory Building]]"
      },
      "date": 1674825637999
    },
    {
      "type": "edit",
      "id": "1f9a7184f2003bb0",
      "item": {
        "type": "paragraph",
        "id": "1f9a7184f2003bb0",
        "text": "⇒ [[Programming as Theory Building]] ⇒ [[Scientific Software Development]]"
      },
      "date": 1674826086051
    },
    {
      "item": {
        "type": "factory",
        "id": "1eaf19ff19c3a23f"
      },
      "id": "1eaf19ff19c3a23f",
      "type": "add",
      "after": "1f9a7184f2003bb0",
      "date": 1674826415493
    },
    {
      "type": "edit",
      "id": "1eaf19ff19c3a23f",
      "item": {
        "type": "paragraph",
        "id": "1eaf19ff19c3a23f",
        "text": "What Do We Need to Teach?\n\nIn addition to “soft” skills such as construction and teamwork (since software arises from a collective activity) (17), we must teach design and prototyping techniques to validate our high-level solutions.\n\nAs for software, it is imperative to teach solution design, focusing on the behavior of our models and, paraphrasing Donald Knuth (21), the historical author of most of the algorithms we use today, avoiding premature optimizations because we want to play a game that machines dominate much better than us."
      },
      "date": 1674826417490
    },
    {
      "item": {
        "type": "factory",
        "id": "f3ae65183c76d8a0"
      },
      "id": "f3ae65183c76d8a0",
      "type": "add",
      "after": "1eaf19ff19c3a23f",
      "date": 1674826451339
    },
    {
      "type": "edit",
      "id": "f3ae65183c76d8a0",
      "item": {
        "type": "paragraph",
        "id": "f3ae65183c76d8a0",
        "text": "17. Theory building"
      },
      "date": 1674826456006
    },
    {
      "type": "remove",
      "id": "1f9a7184f2003bb0",
      "date": 1674826467664
    },
    {
      "type": "edit",
      "id": "f3ae65183c76d8a0",
      "item": {
        "type": "paragraph",
        "id": "f3ae65183c76d8a0",
        "text": "17. Theory building ⇒ [[Programming as Theory Building]] ⇒ [[Scientific Software Development]]"
      },
      "date": 1674826469765
    },
    {
      "item": {
        "type": "factory",
        "id": "e2d640ce8c531eaf"
      },
      "id": "e2d640ce8c531eaf",
      "type": "add",
      "after": "f3ae65183c76d8a0",
      "date": 1674826475342
    },
    {
      "type": "edit",
      "id": "e2d640ce8c531eaf",
      "item": {
        "type": "pagefold",
        "id": "e2d640ce8c531eaf",
        "text": "~"
      },
      "date": 1674826479678
    },
    {
      "id": "e2d640ce8c531eaf",
      "type": "move",
      "order": [
        "d86bd354d1a0a84a",
        "b7e919573cf4a556",
        "1eaf19ff19c3a23f",
        "e2d640ce8c531eaf",
        "f3ae65183c76d8a0"
      ],
      "date": 1674826481221
    },
    {
      "type": "edit",
      "id": "1eaf19ff19c3a23f",
      "item": {
        "type": "paragraph",
        "id": "1eaf19ff19c3a23f",
        "text": "# What Do We Need to Teach?\n\nIn addition to “soft” skills such as construction and teamwork (since software arises from a collective activity) (17), we must teach design and prototyping techniques to validate our high-level solutions.\n\nAs for software, it is imperative to teach solution design, focusing on the behavior of our models and, paraphrasing Donald Knuth (21), the historical author of most of the algorithms we use today, avoiding premature optimizations because we want to play a game that machines dominate much better than us."
      },
      "date": 1674826491458
    },
    {
      "type": "edit",
      "id": "1eaf19ff19c3a23f",
      "item": {
        "type": "markdown",
        "id": "1eaf19ff19c3a23f",
        "text": "# What Do We Need to Teach?\n\nIn addition to “soft” skills such as construction and teamwork (since software arises from a collective activity) (17), we must teach design and prototyping techniques to validate our high-level solutions.\n\nAs for software, it is imperative to teach solution design, focusing on the behavior of our models and, paraphrasing Donald Knuth (21), the historical author of most of the algorithms we use today, avoiding premature optimizations because we want to play a game that machines dominate much better than us."
      },
      "date": 1674826492709
    },
    {
      "item": {
        "type": "factory",
        "id": "e17c154f2747d417"
      },
      "id": "e17c154f2747d417",
      "type": "add",
      "after": "f3ae65183c76d8a0",
      "date": 1674826512837
    },
    {
      "type": "edit",
      "id": "e17c154f2747d417",
      "item": {
        "type": "paragraph",
        "id": "e17c154f2747d417",
        "text": "21. Knuth — The art of computing programming"
      },
      "date": 1674826517804
    },
    {
      "type": "edit",
      "id": "e17c154f2747d417",
      "item": {
        "type": "paragraph",
        "id": "e17c154f2747d417",
        "text": "21. Knuth — The art of computing programming [https://es.wikipedia.org/wiki/The_Art_of_Computer_Programming wikipedia]"
      },
      "date": 1674826532534
    },
    {
      "type": "edit",
      "id": "1eaf19ff19c3a23f",
      "item": {
        "type": "markdown",
        "id": "1eaf19ff19c3a23f",
        "text": "# What Do We Need to Teach?\n\nIn addition to “soft” skills such as construction and teamwork (since software arises from a collective activity) (17), we must teach design and prototyping techniques to validate our high-level solutions.\n\nAs for software, it is imperative to teach solution design, focusing on the behavior of our models and, paraphrasing Donald Knuth (21), the historical author of most of the algorithms we use today, avoiding premature optimizations because we want to [[play]] a game that machines dominate much better than us."
      },
      "date": 1674826553026
    },
    {
      "item": {
        "type": "factory",
        "id": "bce608d46d075856"
      },
      "id": "bce608d46d075856",
      "type": "add",
      "after": "e17c154f2747d417",
      "date": 1674826558109
    },
    {
      "id": "df1a619015d92cdf",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "df1a619015d92cdf",
        "site": "wiki.ralfbarkow.ch",
        "slug": "what-do-we-do-when-we-play",
        "title": "What Do We Do When We Play?",
        "text": "We play something, we play a game. A [[Game]]: that is obviously a different kind of [[Reality]] than the \"normal\" one, and playing a different activity than the normal one. What is different? This is the question I want to clarify: What is this strange other reality that we create through play?"
      },
      "after": "e17c154f2747d417",
      "date": 1674826560330
    },
    {
      "type": "remove",
      "id": "bce608d46d075856",
      "date": 1674826562518
    },
    {
      "item": {
        "type": "factory",
        "id": "a91bedd1ec1bf668"
      },
      "id": "a91bedd1ec1bf668",
      "type": "add",
      "after": "df1a619015d92cdf",
      "date": 1674826632926
    },
    {
      "type": "edit",
      "id": "a91bedd1ec1bf668",
      "item": {
        "type": "paragraph",
        "id": "a91bedd1ec1bf668",
        "text": "Cf. how human chess differs from computer chess"
      },
      "date": 1674826635689
    },
    {
      "item": {
        "type": "factory",
        "id": "bd181ba9df90fe64"
      },
      "id": "bd181ba9df90fe64",
      "type": "add",
      "after": "a91bedd1ec1bf668",
      "date": 1674826656542
    },
    {
      "type": "edit",
      "id": "bd181ba9df90fe64",
      "item": {
        "type": "reference",
        "id": "bd181ba9df90fe64",
        "site": "code.fed.wiki",
        "slug": "automation-as-team-player",
        "title": "Automation as Team Player",
        "text": "The challenges associated with making automation a 'team player' in a joint human-agent activity are discussed. Joint activity is defined as an extended set of actions that are carried out by an ensemble of people coordinating with each other. To carry out joint activity, each party effectively enters into a Basic Compact, an agreement to facilitate coordination, work toward shared goals, and prevent breakdowns in team coordination. Effective coordination requires establishing and maintaining common ground and an intelligent agent must fulfil the require"
      },
      "date": 1674826671132
    },
    {
      "item": {
        "type": "factory",
        "id": "e90a5a18c1c0f9cb"
      },
      "id": "e90a5a18c1c0f9cb",
      "type": "add",
      "after": "bd181ba9df90fe64",
      "date": 1674826737298
    },
    {
      "type": "edit",
      "id": "e90a5a18c1c0f9cb",
      "item": {
        "type": "reference",
        "id": "e90a5a18c1c0f9cb",
        "site": "about.fed.wiki",
        "slug": "neighborhoods",
        "title": "Neighborhoods",
        "text": "Pages move freely throughout the federation which we subdivide into regions of various scale so as to have the pages we want and avoid the pages that would conflict or distract."
      },
      "date": 1674826740240
    },
    {
      "item": {
        "type": "factory",
        "id": "3ab79b24322d188e"
      },
      "id": "3ab79b24322d188e",
      "type": "add",
      "after": "e90a5a18c1c0f9cb",
      "date": 1674827076280
    },
    {
      "type": "edit",
      "id": "3ab79b24322d188e",
      "item": {
        "type": "paragraph",
        "id": "3ab79b24322d188e",
        "text": "One advantage of Federated Wiki seems to be that these neighborhoods organize themselves along the factual dimension of wiki pages."
      },
      "date": 1674827086352
    },
    {
      "item": {
        "type": "factory",
        "id": "f8afeaa4d7b71d87"
      },
      "id": "f8afeaa4d7b71d87",
      "type": "add",
      "after": "3ab79b24322d188e",
      "date": 1674827098615
    },
    {
      "type": "edit",
      "id": "f8afeaa4d7b71d87",
      "item": {
        "type": "paragraph",
        "id": "f8afeaa4d7b71d87",
        "text": "Conflict avoidance"
      },
      "date": 1674827106563
    },
    {
      "item": {
        "type": "factory",
        "id": "957178d841bf4bc7"
      },
      "id": "957178d841bf4bc7",
      "type": "add",
      "after": "f8afeaa4d7b71d87",
      "date": 1674827145863
    },
    {
      "type": "edit",
      "id": "957178d841bf4bc7",
      "item": {
        "type": "reference",
        "id": "957178d841bf4bc7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "finding-communities",
        "title": "Finding Communities",
        "text": "We present a new approach to the problem of *Finding Communities*: a community is a subset of actors who induce a locally optimal subgraph with respect to a density function defined on subsets of actors. Two different subsets with significant overlap can both be locally optimal, and in this way we may obtain overlapping communities. We design, implement, and test two novel efficient algorithms, RaRe and IS, which find communities according to our definition. These algorithms are shown to work effectively on both synthetic and real-world graphs, and also "
      },
      "date": 1674827150726
    },
    {
      "type": "edit",
      "id": "f8afeaa4d7b71d87",
      "item": {
        "type": "paragraph",
        "id": "f8afeaa4d7b71d87",
        "text": "Conflict avoidance and"
      },
      "date": 1674827154729
    },
    {
      "type": "edit",
      "id": "3ab79b24322d188e",
      "item": {
        "type": "paragraph",
        "id": "3ab79b24322d188e",
        "text": "One advantage of Federated Wiki seems to be that these neighborhoods organize themselves along the factual dimension (Sachdimension) of wiki pages."
      },
      "date": 1674830107189
    }
  ]
}