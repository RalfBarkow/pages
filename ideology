{
  "title": "Ideology",
  "story": [
    {
      "type": "markdown",
      "id": "93f9e91b822e5025",
      "text": "* ‘software is a functional analog to ideology’\n"
    },
    {
      "type": "paragraph",
      "id": "70fb8150f7d2c591",
      "text": "GALLOWAY, Alexander R., 2006. Language Wants To Be Overlooked: On Software and Ideology. Journal of Visual Culture. Online. 1 December 2006. Vol. 5, no. 3, p. 315–331. [Accessed 25 August 2022]. DOI 10.1177/1470412906070519. [https://journals.sagepub.com/doi/abs/10.1177/1470412906070519 doi]"
    },
    {
      "type": "markdown",
      "id": "3a026c986efd0397",
      "text": "> This article is a theoretical response to the observation from Wendy Hui Kyong Chun that ‘software is a functional analog to ideology’. Several principles of software design support this claim, the first being the principles of  reflection and obfuscation evident in all types of code. At the same time, in contrast to natural language, code is both scriptural and executable, indicating the functional quality of software. In simulating the ideological model, software is an example of technical transcoding without figuration that nevertheless coexists with an exceedingly high level of ideological fetishism and misrecognition.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Ideology",
        "story": []
      },
      "date": 1661426330591
    },
    {
      "item": {
        "type": "factory",
        "id": "93f9e91b822e5025"
      },
      "id": "93f9e91b822e5025",
      "type": "add",
      "date": 1661426339118
    },
    {
      "type": "edit",
      "id": "93f9e91b822e5025",
      "item": {
        "type": "paragraph",
        "id": "93f9e91b822e5025",
        "text": "– https://journals.sagepub.com/doi/abs/10.1177/1470412906070519"
      },
      "date": 1661426341881
    },
    {
      "type": "edit",
      "id": "93f9e91b822e5025",
      "item": {
        "type": "markdown",
        "id": "93f9e91b822e5025",
        "text": "– https://journals.sagepub.com/doi/abs/10.1177/1470412906070519"
      },
      "date": 1661426343079
    },
    {
      "item": {
        "type": "factory",
        "id": "70fb8150f7d2c591"
      },
      "id": "70fb8150f7d2c591",
      "type": "add",
      "after": "93f9e91b822e5025",
      "date": 1661426384035
    },
    {
      "type": "edit",
      "id": "70fb8150f7d2c591",
      "item": {
        "type": "paragraph",
        "id": "70fb8150f7d2c591",
        "text": "\nGALLOWAY, Alexander R., 2006. Language Wants To Be Overlooked: On Software and Ideology. Journal of Visual Culture. Online. 1 December 2006. Vol. 5, no. 3, p. 315–331. [Accessed 25 August 2022]. DOI 10.1177/1470412906070519. "
      },
      "date": 1661426392428
    },
    {
      "type": "add",
      "id": "3a026c986efd0397",
      "item": {
        "type": "paragraph",
        "id": "3a026c986efd0397",
        "text": "> This article is a theoretical response to the observation from Wendy Hui Kyong Chun that ‘software is a functional analog to ideology’. Several principles of software design support this claim, the first being the principles of  reflection and obfuscation evident in all types of code. At the same time, in contrast to natural language, code is both scriptural and executable, indicating the functional quality of software. In simulating the ideological model, software is an example of technical transcoding without figuration that nevertheless coexists with an exceedingly high level of ideological fetishism and misrecognition.\n"
      },
      "after": "70fb8150f7d2c591",
      "date": 1661426393657
    },
    {
      "type": "edit",
      "id": "3a026c986efd0397",
      "item": {
        "type": "markdown",
        "id": "3a026c986efd0397",
        "text": "> This article is a theoretical response to the observation from Wendy Hui Kyong Chun that ‘software is a functional analog to ideology’. Several principles of software design support this claim, the first being the principles of  reflection and obfuscation evident in all types of code. At the same time, in contrast to natural language, code is both scriptural and executable, indicating the functional quality of software. In simulating the ideological model, software is an example of technical transcoding without figuration that nevertheless coexists with an exceedingly high level of ideological fetishism and misrecognition.\n"
      },
      "date": 1661426394865
    },
    {
      "type": "edit",
      "id": "93f9e91b822e5025",
      "item": {
        "type": "markdown",
        "id": "93f9e91b822e5025",
        "text": "* ‘software is a functional analog to ideology’\n"
      },
      "date": 1661426430757
    },
    {
      "type": "add",
      "id": "d2e332aa55440b28",
      "item": {
        "type": "markdown",
        "id": "d2e332aa55440b28",
        "text": "– https://journals.sagepub.com/doi/abs/10.1177/1470412906070519"
      },
      "after": "93f9e91b822e5025",
      "date": 1661426431439
    },
    {
      "type": "remove",
      "id": "d2e332aa55440b28",
      "date": 1661426441819
    },
    {
      "type": "edit",
      "id": "70fb8150f7d2c591",
      "item": {
        "type": "paragraph",
        "id": "70fb8150f7d2c591",
        "text": "GALLOWAY, Alexander R., 2006. Language Wants To Be Overlooked: On Software and Ideology. Journal of Visual Culture. Online. 1 December 2006. Vol. 5, no. 3, p. 315–331. [Accessed 25 August 2022]. DOI 10.1177/1470412906070519. [https://journals.sagepub.com/doi/abs/10.1177/1470412906070519 doi]"
      },
      "date": 1661426452146
    }
  ]
}