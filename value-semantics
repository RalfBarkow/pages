{
  "title": "Value Semantics",
  "story": [
    {
      "type": "paragraph",
      "id": "bc11b8b1500beba2",
      "text": "C++ supports value semantics as well as [[reference semantics]]. A C++ programmer may optionally embed a seat solidly into a bicycle. Also, messages frequently pass an object around by passing a copy of the object instead of a pointer to the object. Because of this tendency for C++ code to copy objects, C++ programmers discipline themselves to think rigorously about whether their copies should be deep or shallow. Copying demands so much attention in C++ that each class has a special feature (a [[copy constructor]]) with which the programmer defines just how copying of its instances should work. Smalltalk programmers tend to be less disciplined in thinking about copy behavior, and get away with it because copying occurs so much less fre­quently in Smalltalk."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Value Semantics",
        "story": []
      },
      "date": 1654630695181
    },
    {
      "item": {
        "type": "factory",
        "id": "bc11b8b1500beba2"
      },
      "id": "bc11b8b1500beba2",
      "type": "add",
      "date": 1654630713251
    },
    {
      "type": "edit",
      "id": "bc11b8b1500beba2",
      "item": {
        "type": "paragraph",
        "id": "bc11b8b1500beba2",
        "text": "C++ supports value semantics as well as [[reference semantics]]. A C+ + programmer may optionally embed a seat solidly into a bicycle. Also, messages fre­ quently pass an object around by passing a copy of the object instead of a pointer to the object. Because of this tendency for C++ code to copy objects, C+ + programmers discipline themselves to think rigorously about whether their copies should be deep or shallow. Copying demands so much attention in C++ that each class has a special fea­ ture (a copy constructor) with which the programmer defines just how copying of its instances should work. Smalltalk programmers tend to be less disciplined in thinking about copy behavior, and get away with it because copying occurs so much less fre­ quently in Smalltalk"
      },
      "date": 1654630737308
    },
    {
      "type": "edit",
      "id": "bc11b8b1500beba2",
      "item": {
        "type": "paragraph",
        "id": "bc11b8b1500beba2",
        "text": "C++ supports value semantics as well as [[reference semantics]]. A C+ + programmer may optionally embed a seat solidly into a bicycle. Also, messages fre­ quently pass an object around by passing a copy of the object instead of a pointer to the object. Because of this tendency for C++ code to copy objects, C++ programmers discipline themselves to think rigorously about whether their copies should be deep or shallow. Copying demands so much attention in C++ that each class has a special feature (a [[copy constructor]]) with which the programmer defines just how copying of its instances should work. Smalltalk programmers tend to be less disciplined in thinking about copy behavior, and get away with it because copying occurs so much less fre­ quently in Smalltalk"
      },
      "date": 1654630809560
    },
    {
      "type": "edit",
      "id": "bc11b8b1500beba2",
      "item": {
        "type": "paragraph",
        "id": "bc11b8b1500beba2",
        "text": "C++ supports value semantics as well as [[reference semantics]]. A C++ programmer may optionally embed a seat solidly into a bicycle. Also, messages frequently pass an object around by passing a copy of the object instead of a pointer to the object. Because of this tendency for C++ code to copy objects, C++ programmers discipline themselves to think rigorously about whether their copies should be deep or shallow. Copying demands so much attention in C++ that each class has a special feature (a [[copy constructor]]) with which the programmer defines just how copying of its instances should work. Smalltalk programmers tend to be less disciplined in thinking about copy behavior, and get away with it because copying occurs so much less fre­ quently in Smalltalk"
      },
      "date": 1654630920612
    },
    {
      "type": "edit",
      "id": "bc11b8b1500beba2",
      "item": {
        "type": "paragraph",
        "id": "bc11b8b1500beba2",
        "text": "C++ supports value semantics as well as [[reference semantics]]. A C++ programmer may optionally embed a seat solidly into a bicycle. Also, messages frequently pass an object around by passing a copy of the object instead of a pointer to the object. Because of this tendency for C++ code to copy objects, C++ programmers discipline themselves to think rigorously about whether their copies should be deep or shallow. Copying demands so much attention in C++ that each class has a special feature (a [[copy constructor]]) with which the programmer defines just how copying of its instances should work. Smalltalk programmers tend to be less disciplined in thinking about copy behavior, and get away with it because copying occurs so much less fre­quently in Smalltalk"
      },
      "date": 1654630933602
    },
    {
      "type": "edit",
      "id": "bc11b8b1500beba2",
      "item": {
        "type": "paragraph",
        "id": "bc11b8b1500beba2",
        "text": "C++ supports value semantics as well as [[reference semantics]]. A C++ programmer may optionally embed a seat solidly into a bicycle. Also, messages frequently pass an object around by passing a copy of the object instead of a pointer to the object. Because of this tendency for C++ code to copy objects, C++ programmers discipline themselves to think rigorously about whether their copies should be deep or shallow. Copying demands so much attention in C++ that each class has a special feature (a [[copy constructor]]) with which the programmer defines just how copying of its instances should work. Smalltalk programmers tend to be less disciplined in thinking about copy behavior, and get away with it because copying occurs so much less fre­quently in Smalltalk."
      },
      "date": 1654630981438
    }
  ]
}