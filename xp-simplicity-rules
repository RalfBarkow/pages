{
  "title": "Xp Simplicity Rules",
  "story": [
    {
      "type": "html",
      "text": "[[Extreme Programmer]]s recommend that we [[Do The Simplest Thing That Could Possibly Work]].  The idea is that simple code means you're travelling light -- low up-front investment, and not much to slow you down when you want to change.",
      "id": "ed1462de824b2c880bb39176f6607119"
    },
    {
      "type": "html",
      "text": "\n[[What Is Simplest]] though?  Is it \"the first thing that comes to mind\"?  Is it \"whatever takes the least effort\"?  \"Whatever takes the least mental strain\"?  Well, here's the official scoop:",
      "id": "44ade3178a10dfff6a952c51f16cda34"
    },
    {
      "type": "image",
      "url": "http://www.zeroplayer.com/images/stuff/TheFourCommandments.png",
      "text": "www.zeroplayer.com",
      "id": "a5e431817c4d53590a341655bbf4e9f5"
    },
    {
      "type": "html",
      "text": "<b>The Four Commandments</b>: ",
      "id": "1adb4b0887bd1b38b69ac711215d2611"
    },
    {
      "type": "html",
      "text": "\nSimple code:",
      "id": "ee4a96bda0ddba3a679efda889516bdc"
    },
    {
      "type": "html",
      "text": " Passes all the tests.",
      "id": "d49353d092ffff364b110422c9476fc5"
    },
    {
      "type": "html",
      "text": " Expresses every idea that we need to express.",
      "id": "7f143181de09de213ca8987cb2783538"
    },
    {
      "type": "html",
      "text": " Says everything [[Once And Only Once]].",
      "id": "06e92ceb42fa7b4f755c07453ebc9ed4"
    },
    {
      "type": "html",
      "text": " Has no superfluous parts.",
      "id": "336d8790172a43d0d7c31a984de85449"
    },
    {
      "type": "html",
      "text": "\nWiki pages for each of the above, respectively:",
      "id": "ef80500249c58a3a8f47181284f78d6d"
    },
    {
      "type": "html",
      "text": " [[Unit Tests Tell You When Youre Done]], ...",
      "id": "4badf9b8cfa5ef47c94dcc346c171f96"
    },
    {
      "type": "html",
      "text": " [[Self Documenting Code]], ...",
      "id": "c0cc3fe4d25ffb172b68be872276fcb7"
    },
    {
      "type": "html",
      "text": " [[Once And Only Once]], [[Dont Repeat Yourself]], [[Redundancy Is Inertia]], ...",
      "id": "1d15670f1eb98e6c59ffd961eac27ee9"
    },
    {
      "type": "html",
      "text": " [[You Arent Gonna Need It]], [[Minimum Number Of Classes And Methods]], ...",
      "id": "5b2b12a7b43b3b81101559f3838ad50c"
    },
    {
      "type": "html",
      "text": "\nAlternative list:",
      "id": "4a15da12f1c33adc4ab668d99a9e77d9"
    },
    {
      "type": "html",
      "text": " Runs all the tests.",
      "id": "ab176b42c235d501fc3b4211218be3c7"
    },
    {
      "type": "html",
      "text": " Maximizes Cohesion",
      "id": "7b412b843954ddbbbaaab797665e2be2"
    },
    {
      "type": "html",
      "text": " Minimizes Coupling",
      "id": "852353989d9f7212ca5a8baed593f4fe"
    },
    {
      "type": "html",
      "text": " Says everything [[Once And Only Once]].",
      "id": "06e92ceb42fa7b4f755c07453ebc9ed4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "893a35f5ae71220f0e5706537d9e0c6f"
    },
    {
      "type": "html",
      "text": "[[Alan Shalloway]] and [[Ron Jeffries]] agreed on a slightly more <i>constructive</i> pronunciation of the four rules for emerging simple design:",
      "id": "fea0e6a86460e9fdf39691b138b8e6d3"
    },
    {
      "type": "html",
      "text": " Runs all the tests.",
      "id": "ab176b42c235d501fc3b4211218be3c7"
    },
    {
      "type": "html",
      "text": " Contains no duplication ([[Once And Only Once]])",
      "id": "0c8bb74abc138ae9d68f9a0a971285d9"
    },
    {
      "type": "html",
      "text": " Expresses all the ideas you want to express.",
      "id": "8ee689964c842f38102bbc344355fb6e"
    },
    {
      "type": "html",
      "text": " Do not put the implementation of unrelated ideas in the same method.",
      "id": "7473380e94ec4226c98b1745c2dfba8a"
    },
    {
      "type": "html",
      "text": " Classes should organize ideas in a readily understandable way.",
      "id": "7a8bfdfa4256c72e459fd0482605700e"
    },
    {
      "type": "html",
      "text": " Use appropriate names so you don't have to explain method, member or class names with additional documentation",
      "id": "4c038e49c220351e2f7ef5f08fa67e2f"
    },
    {
      "type": "html",
      "text": " Methods and classes should be implemented so they can be understood totally from their public interfaces.  This not only allows for up-front testing, but decreases coupling.",
      "id": "5f882084abaea14d0116a65d91d3670f"
    },
    {
      "type": "html",
      "text": " Minimizes classes and methods.  This is actually redundant, but is a reminder that we are trying to make this simple and concise.",
      "id": "0dc7221a3eb6ab21d2a2d6df94093a4e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "893a35f5ae71220f0e5706537d9e0c6f"
    },
    {
      "type": "html",
      "text": "The way I like to derive this is to think about what is most important.  The most important thing is that the code works.  We use tests to show us that the code works therefore the first point must be that all the tests must run.  The next most important thing is that the code is as easy to understand as possible, therefore we need to ensure that it expresses every idea that we need to express clearly.  Even though it works and it's understandable, we still need to consider maintainability.  Therefore say everything once and only once and minimize the number of classes and methods. -- [[Jason Yip]]",
      "id": "72ac2982ce7def9af94c4fcf5aa6c3d7"
    },
    {
      "type": "html",
      "text": "<i>Along similar lines, here is some discussion that was originally on [[Once And Only Once]]:</i>",
      "id": "c76e167ecdfb798322bb5e9877d092f9"
    },
    {
      "type": "html",
      "text": "\nI agree with [[Wayne Carson]] that [[Once And Only Once]] needs some constraint - or more explanation. I have seen this principle used to justify way too much inheritance for implementation (i.e., code sharing), which often limits reuse. Using [[Design Patterns]] terminology, I'd rather see [[Once And Only Once]] operate at the interface level, where it leads to a nicely factored set of interfaces, and encourages interface inheritance (in which case delegation can be used to reuse implementation). But expressing this rule simply in terms of raw code can be counterproductive. ",
      "id": "2084f044cc6cbb0e1b036755657b328e"
    },
    {
      "type": "html",
      "text": "-- [[Joe Bowbeer]]",
      "id": "f02b9ae78b0dbb9f7201986b0cddbceb"
    },
    {
      "type": "html",
      "text": "\nIn XP, the constraint is [[Simple Design]]... too much inheritance implies too many classes, so perhaps you want refactor to combine classes, and then possibly refactor again to use composition instead of inheritance.",
      "id": "6444575f5eb6e2febce0c9b96c5773e5"
    },
    {
      "type": "html",
      "text": "<i>Later on in the [[Once And Only Once]] page, the following paradoxical discussion took place:</i>",
      "id": "fef048bfa3ce48281a5acc43d0cf1bfb"
    },
    {
      "type": "html",
      "text": "\nI think the application of [[Once And Only Once]] to code should be restricted to not making the overall system too confusing or tightly coupled. Over reuse can make the system difficult to modify. Think of the extreme case of code produced by an efficient optimizing compiler. -- [[Wayne Carson]]",
      "id": "5505e54ff0c77596311ff2629d522d07"
    },
    {
      "type": "html",
      "text": "My experience is quite the opposite. If I apply the once and only once rule to code until I can't any more, I certainly get lots of little pieces. This takes commitment. If I am committed to communicating through my code ([[System Of Names]], etc), though, the result is not confusing. And it certainly isn't tightly coupled. It is radically decoupled, in that changes tend to be very localized, and all without much in the way of planning.",
      "id": "0e1668dd7e91e98b412f6eaa6e0232f0"
    },
    {
      "type": "html",
      "text": "--[[Kent Beck]]",
      "id": "ec439da478c8df42d512b850ce35062e"
    },
    {
      "type": "html",
      "text": "\nI can see this happening, if *I* (or apparently Kent) does lots of refactoring, the result will be radically decoupled code. The nagging problem I have always had with XP is that I could not find which bit of XP said that we would end up with radically decoupled code. [[Once And Only Once]] kind of means that we will, but the once can wind up splattered all over the place and still be only once. If there was also an All_in_one_place XP/wiki word I would feel way more confident in what the XP protagonists are saying. I expect the XP people will say of course, but it has been my sad experience that what it is about code that smells is not obvious to all programmers. I could do an XP project and *know* the project would come out on time and on budget, just so long the team first agrees that one thing we are going to need that will never appear on any user story is [[Radically Decoupled Code]]. ",
      "id": "867b29a43a113b1b53773b71736cbc50"
    },
    {
      "type": "html",
      "text": "-- [[Alan Christiansen]]",
      "id": "37b0017ae64a97ea5d45139be8b2d273"
    },
    {
      "type": "html",
      "text": "\nDoes anyone find that there is a learning tradeoff between systems that have lots of little pieces and those with fewer pieces?  It seems that the chunkier systems might be easier to understand at first glance.  ",
      "id": "b53f68190e54fa5a26e788e0c1819d12"
    },
    {
      "type": "html",
      "text": "-- [[Michael Feathers]]",
      "id": "e0417c065914067273c0a3ee83a62e46"
    },
    {
      "type": "html",
      "text": "\nYes, and cards and diagrams help, but when it comes down to actually doing things the highly-factored system is easier to modify by far.  It's much easier to get to some specific thing you do need because the highly-factored system separates out all the information you don't need.  ",
      "id": "54c88f00631f78c40171da633f75dd19"
    },
    {
      "type": "html",
      "text": "-- [[Ron Jeffries]]",
      "id": "1ee65e7588075a4eaf0ecc05d435df84"
    },
    {
      "type": "html",
      "text": "\nA related idea in the business domain: \"Strategy as Simple Rules\", an article\nin Harvard Business Review (January? '01), online for a fee at [http://www.hbsp.harvard.edu/hbsp/prod_detail.asp?R0101G www.hbsp.harvard.edu]",
      "id": "181f2b00e1e8ca26c973ade6a82ef5d9"
    },
    {
      "type": "html",
      "text": "-- [[Bill Wake]]",
      "id": "777022d33caf547fd9816af529431be5"
    },
    {
      "type": "html",
      "text": "\nI don't know, I find it funny that they say \"the success of ..., Enron ... \" :) --[[Vlad Ender]]",
      "id": "14ca21ef3f4b3c2df117254b12d8ccd1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "893a35f5ae71220f0e5706537d9e0c6f"
    },
    {
      "type": "html",
      "text": "The question [[What Is Simplicity]] is closely related to the [[What Is Quality]] question.",
      "id": "6a7007c5bf7d668c25dac648dfe8d699"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "893a35f5ae71220f0e5706537d9e0c6f"
    },
    {
      "type": "html",
      "text": "Am I the only one that finds this list funny:  \"[[Once And Only Once]], [[Dont Repeat Yourself]], [[Redundancy Is Inertia]], ...\"?",
      "id": "08d08655c62b005415ac33a9ecdeb7ba"
    },
    {
      "type": "html",
      "text": "<i>No.  That is, indeed, quite hilarious.  Maybe a reflection on the fact that Wiki doesn't exactly encourage XP?</i>  Or, that we're not refactoring the Wiki mercilessly.",
      "id": "421af84fac7d75f85f22dfdfe549be9d"
    },
    {
      "type": "html",
      "text": "'Au contraire. i believe it's the only rule worth repeating. repeatedly.' similar to 'The beatings shall continue until morale improves'",
      "id": "4b4cec65592c55031e1bb3d3ae205957"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "893a35f5ae71220f0e5706537d9e0c6f"
    },
    {
      "type": "html",
      "text": "According to [[Worse Is Better]] there is a tradeoff (or at least a tension) between simplicity of interface and simplicity of implementation? If an XP team must make a choice which one does it choose? -- [[Asim Jalis]]",
      "id": "92b8691176144035100547eaf9467a7a"
    },
    {
      "type": "html",
      "text": "<i>An XP team does not make that choice up front.  Write a test, make it pass, refactor, repeat.  Refactor to the point of simplicity.  Listen to the code.</i>",
      "id": "4c1da193d7e5b292774e13989bc27f7c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "893a35f5ae71220f0e5706537d9e0c6f"
    },
    {
      "type": "html",
      "text": "[[Category Extreme Programming]] [[Category Simplicity]]",
      "id": "95fdf2f2f554f3735835ec827b572ce4"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?XpSimplicityRules c2.com]",
      "id": "76f4f65eb817f52f716cd48600e2a3b2"
    }
  ],
  "journal": [
    {
      "date": 1415815333000,
      "id": "3e388977f5e7ace1337e68fd3636a9ab",
      "type": "create",
      "item": {
        "title": "Xp Simplicity Rules",
        "story": [
          {
            "type": "html",
            "text": "[[Extreme Programmer]]s recommend that we [[Do The Simplest Thing That Could Possibly Work]].  The idea is that simple code means you're travelling light -- low up-front investment, and not much to slow you down when you want to change.",
            "id": "ed1462de824b2c880bb39176f6607119"
          },
          {
            "type": "html",
            "text": "\n[[What Is Simplest]] though?  Is it \"the first thing that comes to mind\"?  Is it \"whatever takes the least effort\"?  \"Whatever takes the least mental strain\"?  Well, here's the official scoop:",
            "id": "44ade3178a10dfff6a952c51f16cda34"
          },
          {
            "type": "image",
            "url": "http://www.zeroplayer.com/images/stuff/TheFourCommandments.png",
            "text": "www.zeroplayer.com",
            "id": "a5e431817c4d53590a341655bbf4e9f5"
          },
          {
            "type": "html",
            "text": "<b>The Four Commandments</b>: ",
            "id": "1adb4b0887bd1b38b69ac711215d2611"
          },
          {
            "type": "html",
            "text": "\nSimple code:",
            "id": "ee4a96bda0ddba3a679efda889516bdc"
          },
          {
            "type": "html",
            "text": " Passes all the tests.",
            "id": "d49353d092ffff364b110422c9476fc5"
          },
          {
            "type": "html",
            "text": " Expresses every idea that we need to express.",
            "id": "7f143181de09de213ca8987cb2783538"
          },
          {
            "type": "html",
            "text": " Says everything [[Once And Only Once]].",
            "id": "06e92ceb42fa7b4f755c07453ebc9ed4"
          },
          {
            "type": "html",
            "text": " Has no superfluous parts.",
            "id": "336d8790172a43d0d7c31a984de85449"
          },
          {
            "type": "html",
            "text": "\nWiki pages for each of the above, respectively:",
            "id": "ef80500249c58a3a8f47181284f78d6d"
          },
          {
            "type": "html",
            "text": " [[Unit Tests Tell You When Youre Done]], ...",
            "id": "4badf9b8cfa5ef47c94dcc346c171f96"
          },
          {
            "type": "html",
            "text": " [[Self Documenting Code]], ...",
            "id": "c0cc3fe4d25ffb172b68be872276fcb7"
          },
          {
            "type": "html",
            "text": " [[Once And Only Once]], [[Dont Repeat Yourself]], [[Redundancy Is Inertia]], ...",
            "id": "1d15670f1eb98e6c59ffd961eac27ee9"
          },
          {
            "type": "html",
            "text": " [[You Arent Gonna Need It]], [[Minimum Number Of Classes And Methods]], ...",
            "id": "5b2b12a7b43b3b81101559f3838ad50c"
          },
          {
            "type": "html",
            "text": "\nAlternative list:",
            "id": "4a15da12f1c33adc4ab668d99a9e77d9"
          },
          {
            "type": "html",
            "text": " Runs all the tests.",
            "id": "ab176b42c235d501fc3b4211218be3c7"
          },
          {
            "type": "html",
            "text": " Maximizes Cohesion",
            "id": "7b412b843954ddbbbaaab797665e2be2"
          },
          {
            "type": "html",
            "text": " Minimizes Coupling",
            "id": "852353989d9f7212ca5a8baed593f4fe"
          },
          {
            "type": "html",
            "text": " Says everything [[Once And Only Once]].",
            "id": "06e92ceb42fa7b4f755c07453ebc9ed4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "893a35f5ae71220f0e5706537d9e0c6f"
          },
          {
            "type": "html",
            "text": "[[Alan Shalloway]] and [[Ron Jeffries]] agreed on a slightly more <i>constructive</i> pronunciation of the four rules for emerging simple design:",
            "id": "fea0e6a86460e9fdf39691b138b8e6d3"
          },
          {
            "type": "html",
            "text": " Runs all the tests.",
            "id": "ab176b42c235d501fc3b4211218be3c7"
          },
          {
            "type": "html",
            "text": " Contains no duplication ([[Once And Only Once]])",
            "id": "0c8bb74abc138ae9d68f9a0a971285d9"
          },
          {
            "type": "html",
            "text": " Expresses all the ideas you want to express.",
            "id": "8ee689964c842f38102bbc344355fb6e"
          },
          {
            "type": "html",
            "text": " Do not put the implementation of unrelated ideas in the same method.",
            "id": "7473380e94ec4226c98b1745c2dfba8a"
          },
          {
            "type": "html",
            "text": " Classes should organize ideas in a readily understandable way.",
            "id": "7a8bfdfa4256c72e459fd0482605700e"
          },
          {
            "type": "html",
            "text": " Use appropriate names so you don't have to explain method, member or class names with additional documentation",
            "id": "4c038e49c220351e2f7ef5f08fa67e2f"
          },
          {
            "type": "html",
            "text": " Methods and classes should be implemented so they can be understood totally from their public interfaces.  This not only allows for up-front testing, but decreases coupling.",
            "id": "5f882084abaea14d0116a65d91d3670f"
          },
          {
            "type": "html",
            "text": " Minimizes classes and methods.  This is actually redundant, but is a reminder that we are trying to make this simple and concise.",
            "id": "0dc7221a3eb6ab21d2a2d6df94093a4e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "893a35f5ae71220f0e5706537d9e0c6f"
          },
          {
            "type": "html",
            "text": "The way I like to derive this is to think about what is most important.  The most important thing is that the code works.  We use tests to show us that the code works therefore the first point must be that all the tests must run.  The next most important thing is that the code is as easy to understand as possible, therefore we need to ensure that it expresses every idea that we need to express clearly.  Even though it works and it's understandable, we still need to consider maintainability.  Therefore say everything once and only once and minimize the number of classes and methods. -- [[Jason Yip]]",
            "id": "72ac2982ce7def9af94c4fcf5aa6c3d7"
          },
          {
            "type": "html",
            "text": "<i>Along similar lines, here is some discussion that was originally on [[Once And Only Once]]:</i>",
            "id": "c76e167ecdfb798322bb5e9877d092f9"
          },
          {
            "type": "html",
            "text": "\nI agree with [[Wayne Carson]] that [[Once And Only Once]] needs some constraint - or more explanation. I have seen this principle used to justify way too much inheritance for implementation (i.e., code sharing), which often limits reuse. Using [[Design Patterns]] terminology, I'd rather see [[Once And Only Once]] operate at the interface level, where it leads to a nicely factored set of interfaces, and encourages interface inheritance (in which case delegation can be used to reuse implementation). But expressing this rule simply in terms of raw code can be counterproductive. ",
            "id": "2084f044cc6cbb0e1b036755657b328e"
          },
          {
            "type": "html",
            "text": "-- [[Joe Bowbeer]]",
            "id": "f02b9ae78b0dbb9f7201986b0cddbceb"
          },
          {
            "type": "html",
            "text": "\nIn XP, the constraint is [[Simple Design]]... too much inheritance implies too many classes, so perhaps you want refactor to combine classes, and then possibly refactor again to use composition instead of inheritance.",
            "id": "6444575f5eb6e2febce0c9b96c5773e5"
          },
          {
            "type": "html",
            "text": "<i>Later on in the [[Once And Only Once]] page, the following paradoxical discussion took place:</i>",
            "id": "fef048bfa3ce48281a5acc43d0cf1bfb"
          },
          {
            "type": "html",
            "text": "\nI think the application of [[Once And Only Once]] to code should be restricted to not making the overall system too confusing or tightly coupled. Over reuse can make the system difficult to modify. Think of the extreme case of code produced by an efficient optimizing compiler. -- [[Wayne Carson]]",
            "id": "5505e54ff0c77596311ff2629d522d07"
          },
          {
            "type": "html",
            "text": "My experience is quite the opposite. If I apply the once and only once rule to code until I can't any more, I certainly get lots of little pieces. This takes commitment. If I am committed to communicating through my code ([[System Of Names]], etc), though, the result is not confusing. And it certainly isn't tightly coupled. It is radically decoupled, in that changes tend to be very localized, and all without much in the way of planning.",
            "id": "0e1668dd7e91e98b412f6eaa6e0232f0"
          },
          {
            "type": "html",
            "text": "--[[Kent Beck]]",
            "id": "ec439da478c8df42d512b850ce35062e"
          },
          {
            "type": "html",
            "text": "\nI can see this happening, if *I* (or apparently Kent) does lots of refactoring, the result will be radically decoupled code. The nagging problem I have always had with XP is that I could not find which bit of XP said that we would end up with radically decoupled code. [[Once And Only Once]] kind of means that we will, but the once can wind up splattered all over the place and still be only once. If there was also an All_in_one_place XP/wiki word I would feel way more confident in what the XP protagonists are saying. I expect the XP people will say of course, but it has been my sad experience that what it is about code that smells is not obvious to all programmers. I could do an XP project and *know* the project would come out on time and on budget, just so long the team first agrees that one thing we are going to need that will never appear on any user story is [[Radically Decoupled Code]]. ",
            "id": "867b29a43a113b1b53773b71736cbc50"
          },
          {
            "type": "html",
            "text": "-- [[Alan Christiansen]]",
            "id": "37b0017ae64a97ea5d45139be8b2d273"
          },
          {
            "type": "html",
            "text": "\nDoes anyone find that there is a learning tradeoff between systems that have lots of little pieces and those with fewer pieces?  It seems that the chunkier systems might be easier to understand at first glance.  ",
            "id": "b53f68190e54fa5a26e788e0c1819d12"
          },
          {
            "type": "html",
            "text": "-- [[Michael Feathers]]",
            "id": "e0417c065914067273c0a3ee83a62e46"
          },
          {
            "type": "html",
            "text": "\nYes, and cards and diagrams help, but when it comes down to actually doing things the highly-factored system is easier to modify by far.  It's much easier to get to some specific thing you do need because the highly-factored system separates out all the information you don't need.  ",
            "id": "54c88f00631f78c40171da633f75dd19"
          },
          {
            "type": "html",
            "text": "-- [[Ron Jeffries]]",
            "id": "1ee65e7588075a4eaf0ecc05d435df84"
          },
          {
            "type": "html",
            "text": "\nA related idea in the business domain: \"Strategy as Simple Rules\", an article\nin Harvard Business Review (January? '01), online for a fee at [http://www.hbsp.harvard.edu/hbsp/prod_detail.asp?R0101G www.hbsp.harvard.edu]",
            "id": "181f2b00e1e8ca26c973ade6a82ef5d9"
          },
          {
            "type": "html",
            "text": "-- [[Bill Wake]]",
            "id": "777022d33caf547fd9816af529431be5"
          },
          {
            "type": "html",
            "text": "\nI don't know, I find it funny that they say \"the success of ..., Enron ... \" :) --[[Vlad Ender]]",
            "id": "14ca21ef3f4b3c2df117254b12d8ccd1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "893a35f5ae71220f0e5706537d9e0c6f"
          },
          {
            "type": "html",
            "text": "The question [[What Is Simplicity]] is closely related to the [[What Is Quality]] question.",
            "id": "6a7007c5bf7d668c25dac648dfe8d699"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "893a35f5ae71220f0e5706537d9e0c6f"
          },
          {
            "type": "html",
            "text": "Am I the only one that finds this list funny:  \"[[Once And Only Once]], [[Dont Repeat Yourself]], [[Redundancy Is Inertia]], ...\"?",
            "id": "08d08655c62b005415ac33a9ecdeb7ba"
          },
          {
            "type": "html",
            "text": "<i>No.  That is, indeed, quite hilarious.  Maybe a reflection on the fact that Wiki doesn't exactly encourage XP?</i>  Or, that we're not refactoring the Wiki mercilessly.",
            "id": "421af84fac7d75f85f22dfdfe549be9d"
          },
          {
            "type": "html",
            "text": "'Au contraire. i believe it's the only rule worth repeating. repeatedly.' similar to 'The beatings shall continue until morale improves'",
            "id": "4b4cec65592c55031e1bb3d3ae205957"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "893a35f5ae71220f0e5706537d9e0c6f"
          },
          {
            "type": "html",
            "text": "According to [[Worse Is Better]] there is a tradeoff (or at least a tension) between simplicity of interface and simplicity of implementation? If an XP team must make a choice which one does it choose? -- [[Asim Jalis]]",
            "id": "92b8691176144035100547eaf9467a7a"
          },
          {
            "type": "html",
            "text": "<i>An XP team does not make that choice up front.  Write a test, make it pass, refactor, repeat.  Refactor to the point of simplicity.  Listen to the code.</i>",
            "id": "4c1da193d7e5b292774e13989bc27f7c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "893a35f5ae71220f0e5706537d9e0c6f"
          },
          {
            "type": "html",
            "text": "[[Category Extreme Programming]] [[Category Simplicity]]",
            "id": "95fdf2f2f554f3735835ec827b572ce4"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?XpSimplicityRules c2.com]",
            "id": "76f4f65eb817f52f716cd48600e2a3b2"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "code.sfw.c2.com",
      "date": 1708086448805
    }
  ]
}