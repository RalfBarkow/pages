{
  "title": "2022-05-24",
  "story": [
    {
      "type": "reference",
      "id": "e1b77c7987d0f483",
      "site": "wiki.ralfbarkow.ch",
      "slug": "capacity-building",
      "title": "Capacity Building",
      "text": "Jami recognized that changing how her teachers taught would require a tremendous amount of courage. They would need to experience the reason to change."
    },
    {
      "type": "markdown",
      "id": "c240169423449d17",
      "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n\n> Nachdem die Lehrer mehrere Zyklen dieser vorgeschriebenen Methoden durchlaufen haben, werden viele zynisch. Sie fühlen sich auch zunehmend machtlos und haben das Gefühl, dass ihre eigenen Erfahrungen und ihr Fachwissen von ihren Führungskräften nicht geschätzt werden.\n\n> Jami verstand, dass sie kein neues Lehrmodell einführte, sondern eine neue Art des Lernens - eine, die die Kultur innovativer Unternehmen widerspiegelt.\t\t\n"
    },
    {
      "type": "markdown",
      "id": "429d278c06ce6009",
      "text": "⇒ [[Design Thinking]]"
    },
    {
      "type": "reference",
      "id": "7d0fe636ee2d831b",
      "site": "wiki.ralfbarkow.ch",
      "slug": "building-capacity",
      "title": "Building Capacity",
      "text": "# Intention"
    },
    {
      "type": "pagefold",
      "id": "2bdc961f9f2b6c43",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "7b3e4c66119f1016",
      "site": "david.dojo.fed.wiki",
      "slug": "garden-metaphor",
      "title": "Garden Metaphor",
      "text": "The concept of the [[Permanent Wiki]] differs from a traditionally organised [[Archive]] in that we seek to structure it with a [[Garden Metaphor]]."
    },
    {
      "type": "reference",
      "id": "0c6301ec9189387f",
      "site": "david.dojo.fed.wiki",
      "slug": "gardens-stream",
      "title": "Garden's Stream",
      "text": "Wiki favors tending its own rather than publishing breaking news from others. But can this chasm be crossed? We ask, what sort of stream of news might flow from a well tended garden?"
    },
    {
      "type": "reference",
      "id": "1be1db9b938804ac",
      "site": "david.dojo.fed.wiki",
      "slug": "one-garden-one-planet",
      "title": "One Garden One Planet",
      "text": "'One Garden One Planet' is an experimental method to explore how the science of [[Conservation Biology]] is diffused. It takes the study of practical [[Conservation]] and examines its [[Knowledge Management]] challenges."
    },
    {
      "type": "reference",
      "id": "7d8987367d8aad9f",
      "site": "david.dojo.fed.wiki",
      "slug": "garden-map",
      "title": "Garden Map",
      "text": "This [[Hyperbook]] is slowly being built. Unlike a traditional book which has a single scripted path for the reader to follow, a hyperbook is design to encourage exploration, based on the [[Curiosity]] of the reader. In this process, meaning is co-created with the author and the reader."
    },
    {
      "type": "reference",
      "id": "10e13866ffa3c59a",
      "site": "garden.asia.wiki.org",
      "slug": "garden-patterns-inventory",
      "title": "Garden Patterns Inventory",
      "text": "We duplicate an illustration from Timeless Way of Building using Graph plugins and our graph building workflow."
    },
    {
      "type": "reference",
      "id": "ee4625e9595ab237",
      "site": "garden.asia.wiki.org",
      "slug": "half-hidden-garden",
      "title": "Half-Hidden Garden",
      "text": "If a garden is too close to the street, people won't use it because it isn't private enough. But if it is too far from the street, then it won't be used either, because it is too isolated."
    },
    {
      "type": "reference",
      "id": "96afbe7308a407f4",
      "site": "garden.asia.wiki.org",
      "slug": "courtyards-which-live",
      "title": "Courtyards Which Live",
      "text": "The courtyards built in modern buildings are very often dead. They are intended to be private open spaces for people to use - but they end up unused, full of gravel and abstract sculptures."
    },
    {
      "type": "reference",
      "id": "e48afd4ba3d6138e",
      "site": "house.asia.wiki.org",
      "slug": "built-in-seats",
      "title": "Built-in Seats",
      "text": "Write a couple of sentences that describe the solution captured by this pattern. Drag flags to make connections."
    },
    {
      "type": "paragraph",
      "id": "984d9e2b98b9d7bf",
      "text": "Federated Wiki - Graph Plugin. [https://www.npmjs.com/package/wiki-plugin-graph npmjs]"
    },
    {
      "type": "paragraph",
      "id": "8bc7f53a2877f6fe",
      "text": "Graphs should provide \"Collaborative Links\" #1 [https://github.com/WardCunningham/wiki-plugin-graph/issues/1 github]"
    },
    {
      "type": "reference",
      "id": "dd8ea813cbe10cce",
      "site": "ward.asia.wiki.org",
      "slug": "collaborative-link",
      "title": "Collaborative Link",
      "text": "The web became more collaborative with wiki's introduction of the [[Internal Link]]. Link names were drawn from a shared space backed up at the time by shared storage. Federated wiki's internal links preserves the shared space but not the shared storage making it the ideal link for the distributed collaborative web."
    },
    {
      "type": "reference",
      "id": "0cad72faabf92f89",
      "site": "ward.bay.wiki.org",
      "slug": "collaborative-link",
      "title": "Collaborative Link",
      "text": "The web became more collaborative with wiki's introduction of the [[Internal Link]]. Link names were drawn from a shared space backed up at the time by shared storage. Federated wiki's internal links preserves the shared space but not the shared storage making it the ideal link for the distributed collaborative web."
    },
    {
      "type": "graphviz",
      "id": "a08c1b50449eb693",
      "text": "DOT strict digraph\n  \nrankdir=LR\n\n  node [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n  HERE NODE\n\n    node [style=filled fillcolor=lightblue]\n    WHERE /^⇒/\n      LINKS HERE -> NODE\n          node [style=filled fillcolor=white]\n          HERE NODE\n            WHERE /^⇒/\n              LINKS HERE -> NODE\n\n    node [style=filled fillcolor=white penwidth=3 color=black]\n    LINKS HERE -> NODE\n       node [style=filled fillcolor=white penwidth=1 color=black]\n       HERE NODE\n         LINKS HERE -> NODE\n\n   node [style=\"filled,rounded,dotted\" fillcolor=white]\n   edge [style=dotted]\n   HERE NODE\n      BACKLINKS NODE -> HERE",
      "dot": "strict digraph {rankdir=LR\n\n\n\n\n\nnode [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n\"2022-05-24\"\nnode [style=filled fillcolor=lightblue]\n\"2022-05-24\" -> \"Design\nThinking\"\nnode [style=filled fillcolor=white]\n\"Design\nThinking\"\nnode [style=filled fillcolor=white penwidth=3 color=black]\n\"2022-05-24\" -> \"Design\nThinking\"\n\"2022-05-24\" -> \"Permanent\nWiki\"\n\"2022-05-24\" -> \"Archive\"\n\"2022-05-24\" -> \"Garden\nMetaphor\"\n\"2022-05-24\" -> \"Conservation\nBiology\"\n\"2022-05-24\" -> \"Conservation\"\n\"2022-05-24\" -> \"Knowledge\nManagement\"\n\"2022-05-24\" -> \"Hyperbook\"\n\"2022-05-24\" -> \"Curiosity\"\n\"2022-05-24\" -> \"Internal\nLink\"\n\"2022-05-24\" -> \"Internal\nLink\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Design\nThinking\"\n\"Design\nThinking\" -> \"Learning\nCycles\"\n\"Design\nThinking\" -> \"Process\nThinking\"\n\"Design\nThinking\" -> \"Systems\nThinking\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Permanent\nWiki\"\n\"Permanent\nWiki\" -> \"Fluid\nNature\nof\nWiki\"\n\"Permanent\nWiki\" -> \"Permanent\nWeb\"\n\"Permanent\nWiki\" -> \"Your\ndata\nis\nsafe\"\n\"Permanent\nWiki\" -> \"Your\ndata\nis\nyours\"\n\"Permanent\nWiki\" -> \"page\njson\"\n\"Permanent\nWiki\" -> \"sitemap\"\n\"Permanent\nWiki\" -> \"favicon\"\n\"Permanent\nWiki\" -> \"Permanent\nWiki\"\n\"Permanent\nWiki\" -> \"Architectonic\nArchive\"\n\"Permanent\nWiki\" -> \"Lena\nNalbach\"\n\"Permanent\nWiki\" -> \"InterPlantery\nFile\nSystem\"\n\"Permanent\nWiki\" -> \"FedWiki\"\n\"Permanent\nWiki\" -> \"Permanent\nArchive\"\n\"Permanent\nWiki\" -> \"Internet\nArchive\"\n\"Permanent\nWiki\" -> \"Decentralised\nWeb\"\n\"Permanent\nWiki\" -> \"Decentralised\nMedia\nCommons\"\n\"Permanent\nWiki\" -> \"Permanent\nWiki\"\n\"Permanent\nWiki\" -> \"The\nPermanent\nFederation\"\n\"Permanent\nWiki\" -> \"Fedwiki\nMedia\nArchive\"\n\"Permanent\nWiki\" -> \"Wiki\non\nIPFS\"\n\"Permanent\nWiki\" -> \"Permanent\nWiki\nFolder\nStructure\"\n\"Permanent\nWiki\" -> \"Legacy\nand\nImmortality\"\n\"Permanent\nWiki\" -> \"How\nTo\nStart\nA\nFoundation\"\n\"Permanent\nWiki\" -> \"Cost\nof\na\nFoundation\"\n\"Permanent\nWiki\" -> \"Alternatives\nto\na\nFoundation\"\n\"Permanent\nWiki\" -> \"Permanent\nActivity\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Archive\"\n\"Archive\" -> \"Video\nArchive\"\n\"Archive\" -> \"Audio\nArchive\"\n\"Archive\" -> \"Interesting\nArchives\"\n\"Archive\" -> \"Metadata\"\n\"Archive\" -> \"Decentralised\nArchive\"\n\"Archive\" -> \"Archive-It\"\n\"Archive\" -> \"Internet\nArchive\"\n\"Archive\" -> \"Brewster\nKahle\"\n\"Archive\" -> \"Legacy\nand\nImmortality\"\n\"Archive\" -> \"Archive\nEverything\"\n\"Archive\" -> \"Permanent\nWeb\nSites\"\n\"Archive\" -> \"Archived\nWiki\"\n\"Archive\" -> \"Federated\nWayback\nMachine\"\n\"Archive\" -> \"Audio\nArchive\"\n\"Archive\" -> \"Decentralised\nMedia\nCommons\"\n\"Archive\" -> \"Open\nSimulation\nArchive\"\n\"Archive\" -> \"Anthropological\nArchive\"\n\"Archive\" -> \"Web\nArchive\nFormat\"\n\"Archive\" -> \"Web\narchiving\"\n\"Archive\" -> \"The\nMemex\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Garden\nMetaphor\"\n\"Garden\nMetaphor\" -> \"permanent\nwiki\"\n\"Garden\nMetaphor\" -> \"archive\"\n\"Garden\nMetaphor\" -> \"garden\nmetaphor\"\n\"Garden\nMetaphor\" -> \"Wiki\"\n\"Garden\nMetaphor\" -> \"immutable\ndata\"\n\"Garden\nMetaphor\" -> \"anthropological\narchive\"\n\"Garden\nMetaphor\" -> \"Thought\nSoup\"\n\"Garden\nMetaphor\" -> \"The\nHypertext\nGarden\"\n\"Garden\nMetaphor\" -> \"Knowledge\nGarden\"\n\"Garden\nMetaphor\" -> \"Mind\nGarden\"\n\"Garden\nMetaphor\" -> \"The\nGarden\nof\nForking\nPaths\"\n\"Garden\nMetaphor\" -> \"Garden's\nStream\"\n\"Garden\nMetaphor\" -> \"The\nGarden\nand\nthe\nStream\"\n\"Garden\nMetaphor\" -> \"The\nRe-emerging\nGarden\"\n\"Garden\nMetaphor\" -> \"Barriers\nto\na\nGarden\nMindset\"\n\"Garden\nMetaphor\" -> \"One\nGarden\nOne\nPlanet\"\n\"Garden\nMetaphor\" -> \"Garden\nPatterns\nInventory\"\n\"Garden\nMetaphor\" -> \"Garden\nMap\"\n\"Garden\nMetaphor\" -> \"Garden's\nMeet\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\nnode [style=filled fillcolor=white penwidth=1 color=black]\nnode [style=filled fillcolor=white penwidth=1 color=black]\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Hyperbook\"\n\"Hyperbook\" -> \"Age\nof\nEnlightenment\"\n\"Hyperbook\" -> \"Digital\nMind\"\n\"Hyperbook\" -> \"Federated\nWiki\"\n\"Hyperbook\" -> \"Curiosity\"\n\"Hyperbook\" -> \"Poetry\nof\nPatterns\"\n\"Hyperbook\" -> \"DIG\nExtras\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Curiosity\"\n\"Curiosity\" -> \"Deeper\nLearning\"\n\"Curiosity\" -> \"Creative\nConfidence\"\n\"Curiosity\" -> \"Flow\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Internal\nLink\"\n\"Internal\nLink\" -> \"Context\"\n\"Internal\nLink\" -> \"Collaborative\nLink\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Internal\nLink\"\n\"Internal\nLink\" -> \"Context\"\n\"Internal\nLink\" -> \"Collaborative\nLink\"\nnode [style=\"filled,rounded,dotted\" fillcolor=white]\nedge [style=dotted]\n\"2022-05-24\"}",
      "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.44.0 (20200518.1210)\n -->\n<!-- Pages: 1 -->\n<svg width=\"658pt\" height=\"6137pt\"\n viewBox=\"0.00 0.00 657.88 6136.83\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 6132.83)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-6132.83 653.88,-6132.83 653.88,4 -4,4\"/>\n<!-- 2022&#45;05&#45;24 -->\n<g id=\"node1\" class=\"node\">\n<title>2022&#45;05&#45;24</title>\n<ellipse fill=\"lightyellow\" stroke=\"black\" stroke-width=\"3\" cx=\"60.41\" cy=\"-1533.42\" rx=\"60.33\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"60.41\" y=\"-1529.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">2022&#45;05&#45;24</text>\n</g>\n<!-- Design\nThinking -->\n<g id=\"node2\" class=\"node\">\n<title>Design\nThinking</title>\n<ellipse fill=\"lightblue\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-5983.42\" rx=\"48.93\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-5987.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Design</text>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-5970.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Thinking</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Design\nThinking -->\n<g id=\"edge1\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Design\nThinking</title>\n<path fill=\"none\" stroke=\"black\" d=\"M61.68,-1551.65C64.62,-1748.09 92.01,-3493.44 156.82,-4904.42 175.48,-5310.57 211.69,-5801.89 222.4,-5943.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"218.94,-5944.12 223.18,-5953.83 225.92,-5943.59 218.94,-5944.12\"/>\n</g>\n<!-- Permanent\nWiki -->\n<g id=\"node3\" class=\"node\">\n<title>Permanent\nWiki</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-4848.42\" rx=\"59.95\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-4852.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-4835.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Wiki</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Permanent\nWiki -->\n<g id=\"edge2\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Permanent\nWiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M62.31,-1551.65C74.48,-1797.47 205.8,-4451.37 223.48,-4808.7\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"219.99,-4809.02 223.98,-4818.83 226.98,-4808.67 219.99,-4809.02\"/>\n</g>\n<!-- Archive -->\n<g id=\"node4\" class=\"node\">\n<title>Archive</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-3121.42\" rx=\"43.46\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-3117.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Archive -->\n<g id=\"edge3\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Archive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M63.28,-1551.52C79.89,-1712.29 201.96,-2894.01 222.51,-3093\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"219.06,-3093.64 223.57,-3103.22 226.02,-3092.92 219.06,-3093.64\"/>\n</g>\n<!-- Garden\nMetaphor -->\n<g id=\"node5\" class=\"node\">\n<title>Garden\nMetaphor</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-1643.42\" rx=\"53.24\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-1647.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-1630.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Metaphor</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Garden\nMetaphor -->\n<g id=\"edge4\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Garden\nMetaphor</title>\n<path fill=\"none\" stroke=\"black\" d=\"M82.47,-1550.26C101.46,-1565.16 130.37,-1587.15 156.82,-1604.42 163.84,-1608.99 171.41,-1613.6 178.88,-1617.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"177.14,-1621.02 187.55,-1622.98 180.64,-1614.95 177.14,-1621.02\"/>\n</g>\n<!-- Conservation\nBiology -->\n<g id=\"node6\" class=\"node\">\n<title>Conservation\nBiology</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-1566.42\" rx=\"69.74\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-1570.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Conservation</text>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-1553.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Biology</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Conservation\nBiology -->\n<g id=\"edge5\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Conservation\nBiology</title>\n<path fill=\"none\" stroke=\"black\" d=\"M111.07,-1543.41C124.28,-1546.06 138.81,-1548.99 152.96,-1551.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"152.68,-1555.35 163.17,-1553.89 154.06,-1548.48 152.68,-1555.35\"/>\n</g>\n<!-- Conservation -->\n<g id=\"node7\" class=\"node\">\n<title>Conservation</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-1501.42\" rx=\"67.83\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-1497.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Conservation</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Conservation -->\n<g id=\"edge6\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Conservation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M111.52,-1523.64C127.2,-1520.58 144.73,-1517.16 161.24,-1513.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"162.23,-1517.32 171.37,-1511.96 160.88,-1510.44 162.23,-1517.32\"/>\n</g>\n<!-- Knowledge\nManagement -->\n<g id=\"node8\" class=\"node\">\n<title>Knowledge\nManagement</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-1436.42\" rx=\"69.15\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-1440.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Knowledge</text>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-1423.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Management</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Knowledge\nManagement -->\n<g id=\"edge7\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Knowledge\nManagement</title>\n<path fill=\"none\" stroke=\"black\" d=\"M87.13,-1517.05C106.21,-1505.02 132.96,-1488.39 156.82,-1474.42 162.38,-1471.16 168.22,-1467.82 174.05,-1464.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"176.16,-1467.35 183.17,-1459.41 172.73,-1461.25 176.16,-1467.35\"/>\n</g>\n<!-- Hyperbook -->\n<g id=\"node9\" class=\"node\">\n<title>Hyperbook</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-414.42\" rx=\"57.94\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-410.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Hyperbook</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Hyperbook -->\n<g id=\"edge8\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Hyperbook</title>\n<path fill=\"none\" stroke=\"black\" d=\"M64.06,-1515.39C82.99,-1386.23 197.9,-602.33 221.29,-442.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"224.77,-443.16 222.76,-432.76 217.84,-442.15 224.77,-443.16\"/>\n</g>\n<!-- Curiosity -->\n<g id=\"node10\" class=\"node\">\n<title>Curiosity</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"411.6\" cy=\"-580.42\" rx=\"48.67\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-576.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Curiosity</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Curiosity -->\n<g id=\"edge9\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Curiosity</title>\n<path fill=\"none\" stroke=\"black\" d=\"M60.99,-1515.33C59.58,-1411.48 66.12,-886.11 332.07,-607.42 339.01,-600.14 348,-594.83 357.4,-590.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"358.67,-594.21 366.89,-587.52 356.29,-587.62 358.67,-594.21\"/>\n</g>\n<!-- Internal\nLink -->\n<g id=\"node11\" class=\"node\">\n<title>Internal\nLink</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"226.45\" cy=\"-94.42\" rx=\"44.14\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-98.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Internal</text>\n<text text-anchor=\"middle\" x=\"226.45\" y=\"-81.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Link</text>\n</g>\n<!-- 2022&#45;05&#45;24&#45;&gt;Internal\nLink -->\n<g id=\"edge10\" class=\"edge\">\n<title>2022&#45;05&#45;24&#45;&gt;Internal\nLink</title>\n<path fill=\"none\" stroke=\"black\" d=\"M61.93,-1515.1C65.18,-1407.04 85.07,-841.97 156.82,-387.42 171.4,-295.11 199.11,-188.76 214.48,-133.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"217.9,-133.82 217.2,-123.25 211.15,-131.95 217.9,-133.82\"/>\n</g>\n<!-- Learning\nCycles -->\n<g id=\"node12\" class=\"node\">\n<title>Learning\nCycles</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-6099.42\" rx=\"49.65\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-6103.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Learning</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-6086.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Cycles</text>\n</g>\n<!-- Design\nThinking&#45;&gt;Learning\nCycles -->\n<g id=\"edge11\" class=\"edge\">\n<title>Design\nThinking&#45;&gt;Learning\nCycles</title>\n<path fill=\"none\" stroke=\"black\" d=\"M256.26,-6006.74C276.76,-6022.79 305.31,-6044.09 332.07,-6060.42 341.62,-6066.24 352.16,-6071.94 362.33,-6077.1\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"361.02,-6080.35 371.53,-6081.67 364.14,-6074.09 361.02,-6080.35\"/>\n</g>\n<!-- Process\nThinking -->\n<g id=\"node13\" class=\"node\">\n<title>Process\nThinking</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-6022.42\" rx=\"48.93\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-6026.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Process</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-6009.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Thinking</text>\n</g>\n<!-- Design\nThinking&#45;&gt;Process\nThinking -->\n<g id=\"edge12\" class=\"edge\">\n<title>Design\nThinking&#45;&gt;Process\nThinking</title>\n<path fill=\"none\" stroke=\"black\" d=\"M272.72,-5993.06C297.8,-5998.4 329.17,-6005.08 355.64,-6010.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"355.02,-6014.16 365.53,-6012.82 356.47,-6007.31 355.02,-6014.16\"/>\n</g>\n<!-- Systems\nThinking -->\n<g id=\"node14\" class=\"node\">\n<title>Systems\nThinking</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5945.42\" rx=\"49.03\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5949.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Systems</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5932.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Thinking</text>\n</g>\n<!-- Design\nThinking&#45;&gt;Systems\nThinking -->\n<g id=\"edge13\" class=\"edge\">\n<title>Design\nThinking&#45;&gt;Systems\nThinking</title>\n<path fill=\"none\" stroke=\"black\" d=\"M272.72,-5974.02C297.61,-5968.86 328.7,-5962.41 355.05,-5956.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"355.81,-5960.36 364.89,-5954.9 354.39,-5953.5 355.81,-5960.36\"/>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Permanent\nWiki -->\n<g id=\"edge21\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Permanent\nWiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M195.94,-4873.78C192.61,-4885.55 202.78,-4895.83 226.45,-4895.83 242.72,-4895.83 252.61,-4890.97 256.12,-4884.11\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"259.64,-4884.03 256.96,-4873.78 252.66,-4883.47 259.64,-4884.03\"/>\n</g>\n<!-- Fluid\nNature\nof\nWiki -->\n<g id=\"node15\" class=\"node\">\n<title>Fluid\nNature\nof\nWiki</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5844.42\" rx=\"41.03\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5865.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Fluid</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5848.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Nature</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5831.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5815.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Wiki</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Fluid\nNature\nof\nWiki -->\n<g id=\"edge14\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Fluid\nNature\nof\nWiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.77,-4878.13C229.78,-5019.13 243.45,-5620.42 332.07,-5781.42 339.88,-5795.61 352.33,-5807.78 365.04,-5817.54\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"363.23,-5820.55 373.38,-5823.6 367.34,-5814.89 363.23,-5820.55\"/>\n</g>\n<!-- Permanent\nWeb -->\n<g id=\"node16\" class=\"node\">\n<title>Permanent\nWeb</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5743.42\" rx=\"59.95\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5747.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5730.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Web</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Permanent\nWeb -->\n<g id=\"edge15\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Permanent\nWeb</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.4,-4877.88C227.72,-5012.35 235.01,-5567.22 332.07,-5704.42 337.19,-5711.65 344.04,-5717.61 351.57,-5722.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"350.25,-5725.79 360.66,-5727.77 353.76,-5719.73 350.25,-5725.79\"/>\n</g>\n<!-- Your\ndata\nis\nsafe -->\n<g id=\"node17\" class=\"node\">\n<title>Your\ndata\nis\nsafe</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5642.42\" rx=\"32.44\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5663.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Your</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5646.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">data</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5629.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">is</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5613.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">safe</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Your\ndata\nis\nsafe -->\n<g id=\"edge16\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Your\ndata\nis\nsafe</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.77,-4878C234.63,-4999.21 261.15,-5457.19 332.07,-5580.42 341.56,-5596.9 357.3,-5610.63 372.2,-5620.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"370.55,-5624.04 380.83,-5626.61 374.4,-5618.19 370.55,-5624.04\"/>\n</g>\n<!-- Your\ndata\nis\nyours -->\n<g id=\"node18\" class=\"node\">\n<title>Your\ndata\nis\nyours</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5518.42\" rx=\"35.53\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5539.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Your</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5522.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">data</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5505.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">is</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5489.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">yours</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Your\ndata\nis\nyours -->\n<g id=\"edge17\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Your\ndata\nis\nyours</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.77,-4877.93C238.63,-4985.43 272.87,-5355 332.07,-5455.42 341.11,-5470.75 355.39,-5483.86 369.3,-5494.08\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"367.67,-5497.21 377.87,-5500.07 371.68,-5491.47 367.67,-5497.21\"/>\n</g>\n<!-- page\njson -->\n<g id=\"node19\" class=\"node\">\n<title>page\njson</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5417.42\" rx=\"33.15\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5421.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">page</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5404.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">json</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;page\njson -->\n<g id=\"edge18\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;page\njson</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.83,-4878.06C238.36,-4977.78 270.21,-5299.27 332.07,-5379.42 341.54,-5391.69 356,-5400.22 369.93,-5406.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"368.84,-5409.38 379.43,-5409.66 371.33,-5402.83 368.84,-5409.38\"/>\n</g>\n<!-- sitemap -->\n<g id=\"node20\" class=\"node\">\n<title>sitemap</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5352.42\" rx=\"44.68\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5348.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">sitemap</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;sitemap -->\n<g id=\"edge19\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;sitemap</title>\n<path fill=\"none\" stroke=\"black\" d=\"M230.16,-4877.9C239.31,-4971.21 271.86,-5257.84 332.07,-5325.42 339.34,-5333.57 349.19,-5339.27 359.45,-5343.24\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"358.34,-5346.56 368.93,-5346.43 360.57,-5339.93 358.34,-5346.56\"/>\n</g>\n<!-- favicon -->\n<g id=\"node21\" class=\"node\">\n<title>favicon</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5298.42\" rx=\"41.75\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5294.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">favicon</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;favicon -->\n<g id=\"edge20\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;favicon</title>\n<path fill=\"none\" stroke=\"black\" d=\"M231.05,-4877.88C242.14,-4963.95 278.25,-5212.6 332.07,-5271.42 339.97,-5280.05 350.76,-5285.93 361.82,-5289.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"360.94,-5293.32 371.53,-5292.97 363.04,-5286.64 360.94,-5293.32\"/>\n</g>\n<!-- Architectonic\nArchive -->\n<g id=\"node22\" class=\"node\">\n<title>Architectonic\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5233.42\" rx=\"67.94\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5237.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Architectonic</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5220.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Architectonic\nArchive -->\n<g id=\"edge22\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Architectonic\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.71,-4878.05C232.95,-4942.87 251.45,-5099.04 332.07,-5194.42 336.93,-5200.17 342.85,-5205.16 349.24,-5209.46\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"347.81,-5212.69 358.17,-5214.91 351.46,-5206.71 347.81,-5212.69\"/>\n</g>\n<!-- Lena\nNalbach -->\n<g id=\"node23\" class=\"node\">\n<title>Lena\nNalbach</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5156.42\" rx=\"47.74\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5160.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Lena</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5143.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Nalbach</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Lena\nNalbach -->\n<g id=\"edge23\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Lena\nNalbach</title>\n<path fill=\"none\" stroke=\"black\" d=\"M231.77,-4877.97C241.04,-4931.8 267.51,-5046.76 332.07,-5117.42 339.85,-5125.93 349.91,-5132.83 360.21,-5138.31\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"358.76,-5141.5 369.28,-5142.77 361.85,-5135.21 358.76,-5141.5\"/>\n</g>\n<!-- InterPlantery\nFile\nSystem -->\n<g id=\"node24\" class=\"node\">\n<title>InterPlantery\nFile\nSystem</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-5067.42\" rx=\"67.34\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5080.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">InterPlantery</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5063.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">File</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-5046.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">System</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;InterPlantery\nFile\nSystem -->\n<g id=\"edge24\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;InterPlantery\nFile\nSystem</title>\n<path fill=\"none\" stroke=\"black\" d=\"M240.23,-4877.11C257.28,-4913.05 290.25,-4975.06 332.07,-5017.42 338.03,-5023.45 344.84,-5029.11 351.91,-5034.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"350.09,-5037.3 360.29,-5040.16 354.11,-5031.56 350.09,-5037.3\"/>\n</g>\n<!-- FedWiki -->\n<g id=\"node25\" class=\"node\">\n<title>FedWiki</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4990.42\" rx=\"45.8\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4986.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">FedWiki</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;FedWiki -->\n<g id=\"edge25\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;FedWiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M246.4,-4876.26C265.34,-4902.15 296.67,-4940.13 332.07,-4963.42 341.1,-4969.36 351.59,-4974.14 361.9,-4977.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"361.08,-4981.34 371.67,-4981.26 363.33,-4974.72 361.08,-4981.34\"/>\n</g>\n<!-- Permanent\nArchive -->\n<g id=\"node26\" class=\"node\">\n<title>Permanent\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4925.42\" rx=\"59.95\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4929.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4912.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Permanent\nArchive -->\n<g id=\"edge26\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Permanent\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M272.72,-4867.45C297.91,-4878.04 329.44,-4891.3 355.99,-4902.46\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"354.95,-4905.82 365.53,-4906.47 357.66,-4899.37 354.95,-4905.82\"/>\n</g>\n<!-- Internet\nArchive -->\n<g id=\"node27\" class=\"node\">\n<title>Internet\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3871.42\" rx=\"44.75\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3875.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Internet</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3858.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Internet\nArchive -->\n<g id=\"edge27\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Internet\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.04,-4818.57C225.65,-4675.65 226.05,-4061.96 332.07,-3910.42 339.16,-3900.28 349.66,-3892.65 360.69,-3886.96\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"362.43,-3890.01 370.02,-3882.62 359.47,-3883.66 362.43,-3890.01\"/>\n</g>\n<!-- Decentralised\nWeb -->\n<g id=\"node28\" class=\"node\">\n<title>Decentralised\nWeb</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4848.42\" rx=\"71.64\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4852.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Decentralised</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4835.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Web</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Decentralised\nWeb -->\n<g id=\"edge28\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Decentralised\nWeb</title>\n<path fill=\"none\" stroke=\"black\" d=\"M286.4,-4848.42C300.04,-4848.42 314.78,-4848.42 329.18,-4848.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"329.58,-4851.92 339.58,-4848.42 329.58,-4844.92 329.58,-4851.92\"/>\n</g>\n<!-- Decentralised\nMedia\nCommons -->\n<g id=\"node29\" class=\"node\">\n<title>Decentralised\nMedia\nCommons</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3782.42\" rx=\"71.64\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3795.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Decentralised</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3778.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Media</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3761.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Commons</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Decentralised\nMedia\nCommons -->\n<g id=\"edge29\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Decentralised\nMedia\nCommons</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.13,-4818.9C226.05,-4670.34 227.19,-4004.96 332.07,-3833.42 336.24,-3826.59 341.71,-3820.5 347.83,-3815.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"350.25,-3817.67 355.87,-3808.69 345.88,-3812.2 350.25,-3817.67\"/>\n</g>\n<!-- The\nPermanent\nFederation -->\n<g id=\"node30\" class=\"node\">\n<title>The\nPermanent\nFederation</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4759.42\" rx=\"59.95\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4772.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4755.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4738.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Federation</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;The\nPermanent\nFederation -->\n<g id=\"edge30\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;The\nPermanent\nFederation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M269.46,-4828C294.32,-4815.92 326.16,-4800.45 353.29,-4787.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"354.84,-4790.4 362.3,-4782.88 351.78,-4784.11 354.84,-4790.4\"/>\n</g>\n<!-- Fedwiki\nMedia\nArchive -->\n<g id=\"node31\" class=\"node\">\n<title>Fedwiki\nMedia\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4658.42\" rx=\"44.71\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4671.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Fedwiki</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4654.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Media</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4637.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Fedwiki\nMedia\nArchive -->\n<g id=\"edge31\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Fedwiki\nMedia\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M244.41,-4820.28C263.3,-4790.46 295.96,-4743.11 332.07,-4709.42 341.63,-4700.49 352.95,-4692.14 363.96,-4684.88\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"366.15,-4687.63 372.69,-4679.3 362.38,-4681.73 366.15,-4687.63\"/>\n</g>\n<!-- Wiki\non\nIPFS -->\n<g id=\"node32\" class=\"node\">\n<title>Wiki\non\nIPFS</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4557.42\" rx=\"33.13\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4570.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4553.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">on</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4536.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">IPFS</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Wiki\non\nIPFS -->\n<g id=\"edge32\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Wiki\non\nIPFS</title>\n<path fill=\"none\" stroke=\"black\" d=\"M234.38,-4818.86C246.95,-4770.38 277.41,-4672.92 332.07,-4608.42 342.84,-4595.7 357.59,-4584.99 371.39,-4576.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"373.33,-4579.64 380.27,-4571.63 369.85,-4573.56 373.33,-4579.64\"/>\n</g>\n<!-- Permanent\nWiki\nFolder\nStructure -->\n<g id=\"node33\" class=\"node\">\n<title>Permanent\nWiki\nFolder\nStructure</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4445.42\" rx=\"59.95\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4466.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4449.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Wiki</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4432.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Folder</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4416.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Structure</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Permanent\nWiki\nFolder\nStructure -->\n<g id=\"edge33\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Permanent\nWiki\nFolder\nStructure</title>\n<path fill=\"none\" stroke=\"black\" d=\"M230.52,-4818.95C238.23,-4756.51 263,-4608.35 332.07,-4507.42 338.23,-4498.42 346.09,-4490.1 354.44,-4482.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"356.84,-4485.24 362.23,-4476.12 352.32,-4479.89 356.84,-4485.24\"/>\n</g>\n<!-- Legacy\nand\nImmortality -->\n<g id=\"node34\" class=\"node\">\n<title>Legacy\nand\nImmortality</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3681.42\" rx=\"59.91\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3694.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Legacy</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3677.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">and</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3660.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Immortality</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Legacy\nand\nImmortality -->\n<g id=\"edge34\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Legacy\nand\nImmortality</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.68,-4818.91C235.89,-4651.79 274.17,-3828.1 332.07,-3732.42 337.31,-3723.76 344.64,-3716.29 352.74,-3709.96\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"354.97,-3712.67 361.05,-3703.99 350.88,-3706.98 354.97,-3712.67\"/>\n</g>\n<!-- How\nTo\nStart\nA\nFoundation -->\n<g id=\"node35\" class=\"node\">\n<title>How\nTo\nStart\nA\nFoundation</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4309.42\" rx=\"60.66\" ry=\"65.11\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4338.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">How</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4322.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">To</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4305.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Start</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4288.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">A</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4271.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Foundation</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;How\nTo\nStart\nA\nFoundation -->\n<g id=\"edge35\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;How\nTo\nStart\nA\nFoundation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.21,-4818.8C231.38,-4741.85 247.74,-4531.32 332.07,-4383.42 338.01,-4372.99 345.9,-4363.15 354.38,-4354.25\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"357.03,-4356.56 361.62,-4347.01 352.08,-4351.61 357.03,-4356.56\"/>\n</g>\n<!-- Cost\nof\na\nFoundation -->\n<g id=\"node36\" class=\"node\">\n<title>Cost\nof\na\nFoundation</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4173.42\" rx=\"60.66\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4194.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Cost</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4177.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4160.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4144.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Foundation</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Cost\nof\na\nFoundation -->\n<g id=\"edge36\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Cost\nof\na\nFoundation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.68,-4818.97C238.29,-4710.84 271.93,-4336.72 332.07,-4235.42 337.64,-4226.04 345.19,-4217.53 353.43,-4210.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"355.83,-4212.59 361.16,-4203.43 351.28,-4207.27 355.83,-4212.59\"/>\n</g>\n<!-- Alternatives\nto\na\nFoundation -->\n<g id=\"node37\" class=\"node\">\n<title>Alternatives\nto\na\nFoundation</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-4049.42\" rx=\"63.04\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4070.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Alternatives</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4053.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">to</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4036.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-4020.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Foundation</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Alternatives\nto\na\nFoundation -->\n<g id=\"edge37\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Alternatives\nto\na\nFoundation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.75,-4818.63C234.52,-4696.6 260.74,-4235.5 332.07,-4111.42 337.2,-4102.49 344.16,-4094.38 351.83,-4087.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"354.48,-4089.51 359.7,-4080.29 349.87,-4084.24 354.48,-4089.51\"/>\n</g>\n<!-- Permanent\nActivity -->\n<g id=\"node38\" class=\"node\">\n<title>Permanent\nActivity</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3948.42\" rx=\"59.95\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3952.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3935.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Activity</text>\n</g>\n<!-- Permanent\nWiki&#45;&gt;Permanent\nActivity -->\n<g id=\"edge38\" class=\"edge\">\n<title>Permanent\nWiki&#45;&gt;Permanent\nActivity</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.38,-4818.78C227.6,-4683.53 234.5,-4125.43 332.07,-3987.42 337.18,-3980.18 344.03,-3974.22 351.57,-3969.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"353.76,-3972.1 360.66,-3964.06 350.25,-3966.04 353.76,-3972.1\"/>\n</g>\n<!-- Archive&#45;&gt;Internet\nArchive -->\n<g id=\"edge45\" class=\"edge\">\n<title>Archive&#45;&gt;Internet\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.89,-3139.62C230.65,-3239.1 248.14,-3716.81 332.07,-3832.42 339.26,-3842.33 349.7,-3849.86 360.62,-3855.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"359.31,-3858.79 369.85,-3859.87 362.28,-3852.45 359.31,-3858.79\"/>\n</g>\n<!-- Archive&#45;&gt;Decentralised\nMedia\nCommons -->\n<g id=\"edge52\" class=\"edge\">\n<title>Archive&#45;&gt;Decentralised\nMedia\nCommons</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.61,-3139.5C234.68,-3229.6 265.07,-3629.67 332.07,-3731.42 336.47,-3738.1 342.08,-3744.1 348.27,-3749.43\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"346.36,-3752.38 356.38,-3755.82 350.7,-3746.88 346.36,-3752.38\"/>\n</g>\n<!-- Archive&#45;&gt;Legacy\nand\nImmortality -->\n<g id=\"edge47\" class=\"edge\">\n<title>Archive&#45;&gt;Legacy\nand\nImmortality</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.3,-3139.64C237.81,-3220.58 275.18,-3547.05 332.07,-3630.42 337.77,-3638.77 345.34,-3646.08 353.54,-3652.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"351.72,-3655.36 361.9,-3658.29 355.77,-3649.65 351.72,-3655.36\"/>\n</g>\n<!-- Video\nArchive -->\n<g id=\"node39\" class=\"node\">\n<title>Video\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3438.42\" rx=\"44.13\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3442.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Video</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3425.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Archive&#45;&gt;Video\nArchive -->\n<g id=\"edge39\" class=\"edge\">\n<title>Archive&#45;&gt;Video\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.66,-3139.72C236.38,-3187.98 260.67,-3320.41 332.07,-3399.42 340.28,-3408.5 351.09,-3415.73 362.05,-3421.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"360.71,-3424.61 371.24,-3425.74 363.71,-3418.28 360.71,-3424.61\"/>\n</g>\n<!-- Audio\nArchive -->\n<g id=\"node40\" class=\"node\">\n<title>Audio\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3361.42\" rx=\"44.13\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3365.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Audio</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3348.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Archive&#45;&gt;Audio\nArchive -->\n<g id=\"edge40\" class=\"edge\">\n<title>Archive&#45;&gt;Audio\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M232.56,-3139.29C244.29,-3177.46 276.47,-3267.86 332.07,-3322.42 340.81,-3330.99 351.82,-3338.03 362.8,-3343.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"361.44,-3346.88 371.97,-3348.04 364.46,-3340.57 361.44,-3346.88\"/>\n</g>\n<!-- Interesting\nArchives -->\n<g id=\"node41\" class=\"node\">\n<title>Interesting\nArchives</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3284.42\" rx=\"57.55\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3288.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Interesting</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3271.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archives</text>\n</g>\n<!-- Archive&#45;&gt;Interesting\nArchives -->\n<g id=\"edge41\" class=\"edge\">\n<title>Archive&#45;&gt;Interesting\nArchives</title>\n<path fill=\"none\" stroke=\"black\" d=\"M238.44,-3138.77C255.71,-3164.93 291.45,-3214.74 332.07,-3246.42 339.51,-3252.22 347.99,-3257.45 356.55,-3262.05\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"354.97,-3265.17 365.47,-3266.6 358.16,-3258.93 354.97,-3265.17\"/>\n</g>\n<!-- Metadata -->\n<g id=\"node42\" class=\"node\">\n<title>Metadata</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3219.42\" rx=\"51.08\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3215.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Metadata</text>\n</g>\n<!-- Archive&#45;&gt;Metadata -->\n<g id=\"edge42\" class=\"edge\">\n<title>Archive&#45;&gt;Metadata</title>\n<path fill=\"none\" stroke=\"black\" d=\"M247.3,-3137.25C267.64,-3152.9 300.66,-3176.71 332.07,-3192.42 341.45,-3197.11 351.84,-3201.31 361.91,-3204.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"360.83,-3208.26 371.42,-3208.21 363.11,-3201.64 360.83,-3208.26\"/>\n</g>\n<!-- Decentralised\nArchive -->\n<g id=\"node43\" class=\"node\">\n<title>Decentralised\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3154.42\" rx=\"71.64\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3158.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Decentralised</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3141.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Archive&#45;&gt;Decentralised\nArchive -->\n<g id=\"edge43\" class=\"edge\">\n<title>Archive&#45;&gt;Decentralised\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M266.29,-3128.41C286.41,-3132.04 311.68,-3136.59 335.43,-3140.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"335.04,-3144.36 345.5,-3142.69 336.28,-3137.47 335.04,-3144.36\"/>\n</g>\n<!-- Archive&#45;It -->\n<g id=\"node44\" class=\"node\">\n<title>Archive&#45;It</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3089.42\" rx=\"51.62\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3085.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive&#45;It</text>\n</g>\n<!-- Archive&#45;&gt;Archive&#45;It -->\n<g id=\"edge44\" class=\"edge\">\n<title>Archive&#45;&gt;Archive&#45;It</title>\n<path fill=\"none\" stroke=\"black\" d=\"M266.74,-3114.55C292.39,-3110.07 326.27,-3104.15 354.7,-3099.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"355.66,-3102.57 364.91,-3097.4 354.46,-3095.67 355.66,-3102.57\"/>\n</g>\n<!-- Brewster\nKahle -->\n<g id=\"node45\" class=\"node\">\n<title>Brewster\nKahle</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3024.42\" rx=\"50.22\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3028.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Brewster</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3011.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Kahle</text>\n</g>\n<!-- Archive&#45;&gt;Brewster\nKahle -->\n<g id=\"edge46\" class=\"edge\">\n<title>Archive&#45;&gt;Brewster\nKahle</title>\n<path fill=\"none\" stroke=\"black\" d=\"M252.15,-3106.91C273.2,-3094.68 304.35,-3076.92 332.07,-3062.42 341.83,-3057.31 352.38,-3052.04 362.49,-3047.1\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"364.14,-3050.19 371.61,-3042.69 361.09,-3043.89 364.14,-3050.19\"/>\n</g>\n<!-- Archive\nEverything -->\n<g id=\"node46\" class=\"node\">\n<title>Archive\nEverything</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2947.42\" rx=\"58.14\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2951.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2934.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Everything</text>\n</g>\n<!-- Archive&#45;&gt;Archive\nEverything -->\n<g id=\"edge48\" class=\"edge\">\n<title>Archive&#45;&gt;Archive\nEverything</title>\n<path fill=\"none\" stroke=\"black\" d=\"M237.6,-3103.59C254.28,-3075.6 289.86,-3020.99 332.07,-2986.42 339.41,-2980.4 347.83,-2975.01 356.38,-2970.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"358.06,-2973.35 365.28,-2965.6 354.8,-2967.15 358.06,-2973.35\"/>\n</g>\n<!-- Permanent\nWeb\nSites -->\n<g id=\"node47\" class=\"node\">\n<title>Permanent\nWeb\nSites</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2858.42\" rx=\"59.95\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2871.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Permanent</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2854.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Web</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2837.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Sites</text>\n</g>\n<!-- Archive&#45;&gt;Permanent\nWeb\nSites -->\n<g id=\"edge49\" class=\"edge\">\n<title>Archive&#45;&gt;Permanent\nWeb\nSites</title>\n<path fill=\"none\" stroke=\"black\" d=\"M232.72,-3103.35C244.85,-3064.23 277.94,-2970.31 332.07,-2909.42 338.71,-2901.94 346.69,-2895.12 354.99,-2889.06\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"357.13,-2891.84 363.35,-2883.26 353.14,-2886.08 357.13,-2891.84\"/>\n</g>\n<!-- Archived\nWiki -->\n<g id=\"node48\" class=\"node\">\n<title>Archived\nWiki</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2769.42\" rx=\"49.63\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2773.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archived</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2756.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Wiki</text>\n</g>\n<!-- Archive&#45;&gt;Archived\nWiki -->\n<g id=\"edge50\" class=\"edge\">\n<title>Archive&#45;&gt;Archived\nWiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.75,-3103.15C233.37,-3050.93 253.26,-2898.96 332.07,-2808.42 339.26,-2800.15 348.62,-2793.45 358.35,-2788.09\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"360,-2791.18 367.34,-2783.54 356.84,-2784.93 360,-2791.18\"/>\n</g>\n<!-- Federated\nWayback\nMachine -->\n<g id=\"node49\" class=\"node\">\n<title>Federated\nWayback\nMachine</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2680.42\" rx=\"56.35\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2693.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Federated</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2676.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Wayback</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2659.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Machine</text>\n</g>\n<!-- Archive&#45;&gt;Federated\nWayback\nMachine -->\n<g id=\"edge51\" class=\"edge\">\n<title>Archive&#45;&gt;Federated\nWayback\nMachine</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.85,-3103.17C230.02,-3043.76 243.87,-2852.77 332.07,-2731.42 338.43,-2722.66 346.8,-2715 355.7,-2708.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"357.72,-2711.33 363.98,-2702.79 353.76,-2705.56 357.72,-2711.33\"/>\n</g>\n<!-- Open\nSimulation\nArchive -->\n<g id=\"node50\" class=\"node\">\n<title>Open\nSimulation\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2579.42\" rx=\"57.53\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2592.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Open</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2575.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Simulation</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2558.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Archive&#45;&gt;Open\nSimulation\nArchive -->\n<g id=\"edge53\" class=\"edge\">\n<title>Archive&#45;&gt;Open\nSimulation\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.44,-3103.3C238.4,-3024.34 276.94,-2710.58 332.07,-2630.42 338.07,-2621.69 346.11,-2614.1 354.75,-2607.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"356.96,-2610.36 363.18,-2601.78 352.97,-2604.61 356.96,-2610.36\"/>\n</g>\n<!-- Anthropological\nArchive -->\n<g id=\"node51\" class=\"node\">\n<title>Anthropological\nArchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2490.42\" rx=\"79.55\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2494.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Anthropological</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2477.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n</g>\n<!-- Archive&#45;&gt;Anthropological\nArchive -->\n<g id=\"edge54\" class=\"edge\">\n<title>Archive&#45;&gt;Anthropological\nArchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.47,-3103.41C233.85,-3014.65 261.25,-2624.05 332.07,-2529.42 335.69,-2524.57 340.08,-2520.3 344.91,-2516.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"347.17,-2519.22 353.4,-2510.64 343.18,-2513.46 347.17,-2519.22\"/>\n</g>\n<!-- Web\nArchive\nFormat -->\n<g id=\"node52\" class=\"node\">\n<title>Web\nArchive\nFormat</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2401.42\" rx=\"44.13\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2414.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Web</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2397.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Archive</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2380.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Format</text>\n</g>\n<!-- Archive&#45;&gt;Web\nArchive\nFormat -->\n<g id=\"edge55\" class=\"edge\">\n<title>Archive&#45;&gt;Web\nArchive\nFormat</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.31,-3103.19C233.14,-3007.68 259.19,-2564.88 332.07,-2452.42 339.54,-2440.89 350.62,-2431.42 362.13,-2423.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"364.24,-2426.72 370.96,-2418.53 360.6,-2420.74 364.24,-2426.72\"/>\n</g>\n<!-- Web\narchiving -->\n<g id=\"node53\" class=\"node\">\n<title>Web\narchiving</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3592.42\" rx=\"50.83\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3596.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Web</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3579.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">archiving</text>\n</g>\n<!-- Archive&#45;&gt;Web\narchiving -->\n<g id=\"edge56\" class=\"edge\">\n<title>Archive&#45;&gt;Web\narchiving</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.8,-3139.7C239.55,-3213.24 278.87,-3486.78 332.07,-3553.42 338.76,-3561.8 347.72,-3568.52 357.19,-3573.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"355.88,-3577.12 366.37,-3578.57 359.07,-3570.89 355.88,-3577.12\"/>\n</g>\n<!-- The\nMemex -->\n<g id=\"node54\" class=\"node\">\n<title>The\nMemex</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-3515.42\" rx=\"43.52\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3519.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-3502.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Memex</text>\n</g>\n<!-- Archive&#45;&gt;The\nMemex -->\n<g id=\"edge57\" class=\"edge\">\n<title>Archive&#45;&gt;The\nMemex</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.88,-3139.62C230.15,-3196.27 244.3,-3371.83 332.07,-3476.42 340.1,-3485.98 351.04,-3493.42 362.21,-3499.11\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"361.05,-3502.43 371.59,-3503.49 364.01,-3496.09 361.05,-3502.43\"/>\n</g>\n<!-- permanent\nwiki -->\n<g id=\"node55\" class=\"node\">\n<title>permanent\nwiki</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2235.42\" rx=\"58.75\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2239.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">permanent</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2222.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">wiki</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;permanent\nwiki -->\n<g id=\"edge58\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;permanent\nwiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.55,-1672.9C237.37,-1775.22 267.66,-2113.28 332.07,-2197.42 337.43,-2204.42 344.41,-2210.2 352,-2214.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"350.7,-2218.24 361.13,-2220.08 354.12,-2212.13 350.7,-2218.24\"/>\n</g>\n<!-- archive -->\n<g id=\"node56\" class=\"node\">\n<title>archive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2170.42\" rx=\"42.31\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2166.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">archive</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;archive -->\n<g id=\"edge59\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;archive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M229.84,-1672.95C238.22,-1769.26 269.14,-2072.09 332.07,-2143.42 339.74,-2152.11 350.34,-2158.01 361.28,-2162.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"360.32,-2165.37 370.91,-2165.05 362.43,-2158.7 360.32,-2165.37\"/>\n</g>\n<!-- garden\nmetaphor -->\n<g id=\"node57\" class=\"node\">\n<title>garden\nmetaphor</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2105.42\" rx=\"53.24\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2109.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">garden</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2092.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">metaphor</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;garden\nmetaphor -->\n<g id=\"edge60\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;garden\nmetaphor</title>\n<path fill=\"none\" stroke=\"black\" d=\"M226.6,-1673.09C226.01,-1747.9 234.33,-1946.8 332.07,-2067.42 338.43,-2075.27 346.82,-2081.61 355.74,-2086.7\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"354.29,-2089.89 364.78,-2091.37 357.5,-2083.67 354.29,-2089.89\"/>\n</g>\n<!-- Wiki -->\n<g id=\"node58\" class=\"node\">\n<title>Wiki</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2040.42\" rx=\"29.03\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2036.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Wiki</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Wiki -->\n<g id=\"edge61\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Wiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M227.08,-1673.04C227.87,-1742.15 239.52,-1915.57 332.07,-2013.42 342.69,-2024.65 358.2,-2031.21 372.63,-2035.04\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"371.85,-2038.45 382.38,-2037.28 373.41,-2031.63 371.85,-2038.45\"/>\n</g>\n<!-- immutable\ndata -->\n<g id=\"node59\" class=\"node\">\n<title>immutable\ndata</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1975.42\" rx=\"56.92\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1979.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">immutable</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1962.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">data</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;immutable\ndata -->\n<g id=\"edge62\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;immutable\ndata</title>\n<path fill=\"none\" stroke=\"black\" d=\"M230.64,-1672.86C238.28,-1730.21 262.47,-1858.08 332.07,-1936.42 338.45,-1943.59 346.45,-1949.6 354.89,-1954.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"353.33,-1957.72 363.79,-1959.41 356.67,-1951.57 353.33,-1957.72\"/>\n</g>\n<!-- anthropological\narchive -->\n<g id=\"node60\" class=\"node\">\n<title>anthropological\narchive</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1898.42\" rx=\"78.36\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1902.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">anthropological</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1885.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">archive</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;anthropological\narchive -->\n<g id=\"edge63\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;anthropological\narchive</title>\n<path fill=\"none\" stroke=\"black\" d=\"M234.92,-1672.5C247.84,-1717.66 278.27,-1805.08 332.07,-1859.42 336.64,-1864.03 341.86,-1868.19 347.4,-1871.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"345.96,-1875.14 356.31,-1877.42 349.64,-1869.19 345.96,-1875.14\"/>\n</g>\n<!-- Thought\nSoup -->\n<g id=\"node61\" class=\"node\">\n<title>Thought\nSoup</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1821.42\" rx=\"47.76\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1825.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Thought</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1808.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Soup</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Thought\nSoup -->\n<g id=\"edge64\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Thought\nSoup</title>\n<path fill=\"none\" stroke=\"black\" d=\"M243.18,-1671.55C261.35,-1702.03 293.74,-1750.57 332.07,-1782.42 340.94,-1789.79 351.45,-1796.21 361.84,-1801.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"360.38,-1804.79 370.89,-1806.08 363.48,-1798.51 360.38,-1804.79\"/>\n</g>\n<!-- The\nHypertext\nGarden -->\n<g id=\"node62\" class=\"node\">\n<title>The\nHypertext\nGarden</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1732.42\" rx=\"53.83\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1745.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1728.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Hypertext</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1711.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;The\nHypertext\nGarden -->\n<g id=\"edge65\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;The\nHypertext\nGarden</title>\n<path fill=\"none\" stroke=\"black\" d=\"M267.19,-1662.73C293.39,-1675.46 328.03,-1692.29 356.7,-1706.23\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"355.26,-1709.42 365.78,-1710.64 358.32,-1703.12 355.26,-1709.42\"/>\n</g>\n<!-- Knowledge\nGarden -->\n<g id=\"node63\" class=\"node\">\n<title>Knowledge\nGarden</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1643.42\" rx=\"60.06\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1647.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Knowledge</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1630.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Knowledge\nGarden -->\n<g id=\"edge66\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Knowledge\nGarden</title>\n<path fill=\"none\" stroke=\"black\" d=\"M279.93,-1643.42C298.92,-1643.42 320.67,-1643.42 340.91,-1643.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"341.01,-1646.92 351.01,-1643.42 341.01,-1639.92 341.01,-1646.92\"/>\n</g>\n<!-- Mind\nGarden -->\n<g id=\"node64\" class=\"node\">\n<title>Mind\nGarden</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1566.42\" rx=\"44.15\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1570.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Mind</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1553.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Mind\nGarden -->\n<g id=\"edge67\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Mind\nGarden</title>\n<path fill=\"none\" stroke=\"black\" d=\"M269.46,-1625.75C297.74,-1613.86 335.04,-1598.18 364.19,-1585.93\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"365.87,-1589.02 373.73,-1581.91 363.16,-1582.56 365.87,-1589.02\"/>\n</g>\n<!-- The\nGarden\nof\nForking\nPaths -->\n<g id=\"node65\" class=\"node\">\n<title>The\nGarden\nof\nForking\nPaths</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1454.42\" rx=\"44.15\" ry=\"65.11\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1483.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1467.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1450.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1433.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Forking</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1416.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Paths</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;The\nGarden\nof\nForking\nPaths -->\n<g id=\"edge68\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;The\nGarden\nof\nForking\nPaths</title>\n<path fill=\"none\" stroke=\"black\" d=\"M268.86,-1625.27C278.64,-1619.61 288.42,-1612.65 296.07,-1604.42 321.5,-1577.02 310.09,-1558.64 332.07,-1528.42 341.38,-1515.61 353.09,-1503.2 364.62,-1492.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"367.15,-1494.74 372.13,-1485.4 362.41,-1489.59 367.15,-1494.74\"/>\n</g>\n<!-- Garden&#39;s\nStream -->\n<g id=\"node66\" class=\"node\">\n<title>Garden&#39;s\nStream</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1342.42\" rx=\"51.42\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1346.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden&#39;s</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1329.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Stream</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Garden&#39;s\nStream -->\n<g id=\"edge69\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Garden&#39;s\nStream</title>\n<path fill=\"none\" stroke=\"black\" d=\"M270.58,-1626.65C280.32,-1620.97 289.66,-1613.65 296.07,-1604.42 353.56,-1521.58 271.87,-1461.31 332.07,-1380.42 338.37,-1371.94 347.07,-1365.27 356.38,-1360.04\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"358.1,-1363.09 365.45,-1355.46 354.94,-1356.85 358.1,-1363.09\"/>\n</g>\n<!-- The\nGarden\nand\nthe\nStream -->\n<g id=\"node67\" class=\"node\">\n<title>The\nGarden\nand\nthe\nStream</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1230.42\" rx=\"44.15\" ry=\"65.11\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1259.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1243.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1226.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">and</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1209.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">the</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1192.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Stream</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;The\nGarden\nand\nthe\nStream -->\n<g id=\"edge70\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;The\nGarden\nand\nthe\nStream</title>\n<path fill=\"none\" stroke=\"black\" d=\"M270.84,-1626.83C280.57,-1621.14 289.85,-1613.77 296.07,-1604.42 370.41,-1492.58 271.58,-1424.31 332.07,-1304.42 339.61,-1289.46 351.47,-1275.92 363.71,-1264.63\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"366.15,-1267.14 371.34,-1257.91 361.53,-1261.89 366.15,-1267.14\"/>\n</g>\n<!-- The\nRe&#45;emerging\nGarden -->\n<g id=\"node68\" class=\"node\">\n<title>The\nRe&#45;emerging\nGarden</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-1106.42\" rx=\"68.52\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1119.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">The</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1102.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Re&#45;emerging</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1085.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;The\nRe&#45;emerging\nGarden -->\n<g id=\"edge71\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;The\nRe&#45;emerging\nGarden</title>\n<path fill=\"none\" stroke=\"black\" d=\"M271.09,-1626.99C280.82,-1621.3 290.03,-1613.89 296.07,-1604.42 349.72,-1520.17 280.55,-1241.98 332.07,-1156.42 336.29,-1149.41 341.91,-1143.21 348.22,-1137.79\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"350.78,-1140.23 356.51,-1131.33 346.47,-1134.71 350.78,-1140.23\"/>\n</g>\n<!-- Barriers\nto\na\nGarden\nMindset -->\n<g id=\"node69\" class=\"node\">\n<title>Barriers\nto\na\nGarden\nMindset</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-982.42\" rx=\"45.93\" ry=\"65.11\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-1011.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Barriers</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-995.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">to</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-978.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">a</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-961.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-944.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Mindset</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Barriers\nto\na\nGarden\nMindset -->\n<g id=\"edge72\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Barriers\nto\na\nGarden\nMindset</title>\n<path fill=\"none\" stroke=\"black\" d=\"M271.19,-1627.05C280.92,-1621.36 290.1,-1613.94 296.07,-1604.42 360.87,-1501 280.05,-1166.81 332.07,-1056.42 339.08,-1041.54 350.51,-1028.17 362.51,-1017.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"364.86,-1019.61 370.03,-1010.36 360.22,-1014.37 364.86,-1019.61\"/>\n</g>\n<!-- One\nGarden\nOne\nPlanet -->\n<g id=\"node70\" class=\"node\">\n<title>One\nGarden\nOne\nPlanet</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-846.42\" rx=\"44.15\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-867.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">One</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-850.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-833.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">One</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-817.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Planet</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;One\nGarden\nOne\nPlanet -->\n<g id=\"edge73\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;One\nGarden\nOne\nPlanet</title>\n<path fill=\"none\" stroke=\"black\" d=\"M270.92,-1627.32C280.78,-1621.6 290.1,-1614.1 296.07,-1604.42 377.39,-1472.61 260.95,-1046 332.07,-908.42 339.07,-894.88 350.49,-883.33 362.49,-874.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"364.83,-876.64 370.84,-867.91 360.7,-870.98 364.83,-876.64\"/>\n</g>\n<!-- Garden\nPatterns\nInventory -->\n<g id=\"node71\" class=\"node\">\n<title>Garden\nPatterns\nInventory</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-734.42\" rx=\"52.05\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-747.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-730.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Patterns</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-713.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Inventory</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Garden\nPatterns\nInventory -->\n<g id=\"edge74\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Garden\nPatterns\nInventory</title>\n<path fill=\"none\" stroke=\"black\" d=\"M270.98,-1627.35C280.83,-1621.63 290.13,-1614.12 296.07,-1604.42 391.24,-1448.82 240.83,-942.35 332.07,-784.42 337.95,-774.24 346.82,-765.81 356.51,-758.96\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"358.7,-761.71 365.19,-753.34 354.89,-755.84 358.7,-761.71\"/>\n</g>\n<!-- Garden\nMap -->\n<g id=\"node72\" class=\"node\">\n<title>Garden\nMap</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-645.42\" rx=\"44.15\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-649.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-632.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Map</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Garden\nMap -->\n<g id=\"edge75\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Garden\nMap</title>\n<path fill=\"none\" stroke=\"black\" d=\"M271.01,-1627.37C280.87,-1621.65 290.16,-1614.13 296.07,-1604.42 349.24,-1517.02 276.48,-770.29 332.07,-684.42 338.92,-673.83 349.56,-666.01 360.82,-660.28\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"362.29,-663.45 369.93,-656.11 359.38,-657.09 362.29,-663.45\"/>\n</g>\n<!-- Garden&#39;s\nMeet -->\n<g id=\"node73\" class=\"node\">\n<title>Garden&#39;s\nMeet</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-2312.42\" rx=\"51.42\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2316.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Garden&#39;s</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-2299.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Meet</text>\n</g>\n<!-- Garden\nMetaphor&#45;&gt;Garden&#39;s\nMeet -->\n<g id=\"edge76\" class=\"edge\">\n<title>Garden\nMetaphor&#45;&gt;Garden&#39;s\nMeet</title>\n<path fill=\"none\" stroke=\"black\" d=\"M228.84,-1672.98C234.62,-1784.16 259.84,-2175.83 332.07,-2273.42 338.38,-2281.95 347.08,-2288.72 356.4,-2294.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"354.97,-2297.27 365.46,-2298.76 358.19,-2291.06 354.97,-2297.27\"/>\n</g>\n<!-- Hyperbook&#45;&gt;Curiosity -->\n<g id=\"edge80\" class=\"edge\">\n<title>Hyperbook&#45;&gt;Curiosity</title>\n<path fill=\"none\" stroke=\"black\" d=\"M236.44,-432.5C251.99,-461.98 286.62,-520.39 332.07,-553.42 340.29,-559.39 349.94,-564.12 359.61,-567.84\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"358.63,-571.21 369.23,-571.23 360.96,-564.61 358.63,-571.21\"/>\n</g>\n<!-- Age\nof\nEnlightenment -->\n<g id=\"node74\" class=\"node\">\n<title>Age\nof\nEnlightenment</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-503.42\" rx=\"74.66\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-516.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Age</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-499.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-482.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Enlightenment</text>\n</g>\n<!-- Hyperbook&#45;&gt;Age\nof\nEnlightenment -->\n<g id=\"edge77\" class=\"edge\">\n<title>Hyperbook&#45;&gt;Age\nof\nEnlightenment</title>\n<path fill=\"none\" stroke=\"black\" d=\"M258.52,-429.51C282.38,-441.11 316.16,-457.53 345.83,-471.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"344.36,-475.12 354.89,-476.34 347.42,-468.83 344.36,-475.12\"/>\n</g>\n<!-- Digital\nMind -->\n<g id=\"node75\" class=\"node\">\n<title>Digital\nMind</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-414.42\" rx=\"38.62\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-418.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Digital</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-401.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Mind</text>\n</g>\n<!-- Hyperbook&#45;&gt;Digital\nMind -->\n<g id=\"edge78\" class=\"edge\">\n<title>Hyperbook&#45;&gt;Digital\nMind</title>\n<path fill=\"none\" stroke=\"black\" d=\"M284.39,-414.42C309.36,-414.42 338.36,-414.42 362.26,-414.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"362.51,-417.92 372.51,-414.42 362.51,-410.92 362.51,-417.92\"/>\n</g>\n<!-- Federated\nWiki -->\n<g id=\"node76\" class=\"node\">\n<title>Federated\nWiki</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-337.42\" rx=\"56.35\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-341.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Federated</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-324.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Wiki</text>\n</g>\n<!-- Hyperbook&#45;&gt;Federated\nWiki -->\n<g id=\"edge79\" class=\"edge\">\n<title>Hyperbook&#45;&gt;Federated\nWiki</title>\n<path fill=\"none\" stroke=\"black\" d=\"M261.9,-399.93C288.94,-388.56 327.05,-372.54 357.92,-359.56\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"359.39,-362.74 367.25,-355.64 356.67,-356.29 359.39,-362.74\"/>\n</g>\n<!-- Poetry\nof\nPatterns -->\n<g id=\"node77\" class=\"node\">\n<title>Poetry\nof\nPatterns</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-248.42\" rx=\"48.35\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-261.02\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Poetry</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-244.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-227.42\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Patterns</text>\n</g>\n<!-- Hyperbook&#45;&gt;Poetry\nof\nPatterns -->\n<g id=\"edge81\" class=\"edge\">\n<title>Hyperbook&#45;&gt;Poetry\nof\nPatterns</title>\n<path fill=\"none\" stroke=\"black\" d=\"M241.11,-396.75C259.99,-373 295.87,-330.18 332.07,-299.42 341.46,-291.44 352.17,-283.72 362.6,-276.8\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"364.77,-279.56 371.25,-271.18 360.96,-273.69 364.77,-279.56\"/>\n</g>\n<!-- DIG\nExtras -->\n<g id=\"node78\" class=\"node\">\n<title>DIG\nExtras</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-159.42\" rx=\"39.23\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-163.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">DIG</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-146.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Extras</text>\n</g>\n<!-- Hyperbook&#45;&gt;DIG\nExtras -->\n<g id=\"edge82\" class=\"edge\">\n<title>Hyperbook&#45;&gt;DIG\nExtras</title>\n<path fill=\"none\" stroke=\"black\" d=\"M231.86,-396.43C242.56,-356.16 273.43,-257.63 332.07,-198.42 341.63,-188.76 354.07,-181.1 366.21,-175.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"367.73,-178.37 375.39,-171.05 364.84,-171.99 367.73,-178.37\"/>\n</g>\n<!-- Deeper\nLearning -->\n<g id=\"node79\" class=\"node\">\n<title>Deeper\nLearning</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"588.5\" cy=\"-657.42\" rx=\"49.65\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-661.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Deeper</text>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-644.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Learning</text>\n</g>\n<!-- Curiosity&#45;&gt;Deeper\nLearning -->\n<g id=\"edge83\" class=\"edge\">\n<title>Curiosity&#45;&gt;Deeper\nLearning</title>\n<path fill=\"none\" stroke=\"black\" d=\"M449.38,-591.82C462.69,-596.27 477.74,-601.68 491.12,-607.42 508.36,-614.8 526.75,-624 542.8,-632.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"541.48,-635.75 551.95,-637.37 544.78,-629.57 541.48,-635.75\"/>\n</g>\n<!-- Creative\nConfidence -->\n<g id=\"node80\" class=\"node\">\n<title>Creative\nConfidence</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"588.5\" cy=\"-580.42\" rx=\"61.25\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-584.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Creative</text>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-567.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Confidence</text>\n</g>\n<!-- Curiosity&#45;&gt;Creative\nConfidence -->\n<g id=\"edge84\" class=\"edge\">\n<title>Curiosity&#45;&gt;Creative\nConfidence</title>\n<path fill=\"none\" stroke=\"black\" d=\"M460.39,-580.42C477.79,-580.42 497.86,-580.42 516.82,-580.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"516.92,-583.92 526.92,-580.42 516.92,-576.92 516.92,-583.92\"/>\n</g>\n<!-- Flow -->\n<g id=\"node81\" class=\"node\">\n<title>Flow</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"588.5\" cy=\"-515.42\" rx=\"31.34\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-511.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Flow</text>\n</g>\n<!-- Curiosity&#45;&gt;Flow -->\n<g id=\"edge85\" class=\"edge\">\n<title>Curiosity&#45;&gt;Flow</title>\n<path fill=\"none\" stroke=\"black\" d=\"M448.29,-568.52C461.76,-563.93 477.19,-558.55 491.12,-553.42 511.72,-545.82 534.59,-536.83 552.87,-529.5\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"554.28,-532.7 562.25,-525.73 551.67,-526.21 554.28,-532.7\"/>\n</g>\n<!-- Context -->\n<g id=\"node82\" class=\"node\">\n<title>Context</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-94.42\" rx=\"44.12\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-90.22\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Context</text>\n</g>\n<!-- Internal\nLink&#45;&gt;Context -->\n<g id=\"edge86\" class=\"edge\">\n<title>Internal\nLink&#45;&gt;Context</title>\n<path fill=\"none\" stroke=\"black\" d=\"M270.85,-94.42C296.64,-94.42 329.57,-94.42 356.98,-94.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"357.19,-97.92 367.19,-94.42 357.19,-90.92 357.19,-97.92\"/>\n</g>\n<!-- Collaborative\nLink -->\n<g id=\"node83\" class=\"node\">\n<title>Collaborative\nLink</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"411.6\" cy=\"-29.42\" rx=\"69.13\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-33.62\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Collaborative</text>\n<text text-anchor=\"middle\" x=\"411.6\" y=\"-16.82\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Link</text>\n</g>\n<!-- Internal\nLink&#45;&gt;Collaborative\nLink -->\n<g id=\"edge87\" class=\"edge\">\n<title>Internal\nLink&#45;&gt;Collaborative\nLink</title>\n<path fill=\"none\" stroke=\"black\" d=\"M265.84,-80.79C289.77,-72.3 321.11,-61.18 348.5,-51.45\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"349.76,-54.72 358.01,-48.08 347.42,-48.12 349.76,-54.72\"/>\n</g>\n</g>\n</svg>\n"
    },
    {
      "type": "paragraph",
      "id": "4d32990f19ad573a",
      "text": "Generate garden contents. [https://github.com/WardCunningham/assets/commit/c078855 github] ⇒ [[Story Telling Punch List]]"
    },
    {
      "type": "pagefold",
      "id": "0d0cd5371c8c5db3",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "3ffca2f7aca1b2ad",
      "text": "# Gt, Some Pros, Cons & Scope\n"
    },
    {
      "type": "markdown",
      "id": "010fdcf6308ebed0",
      "text": "tudor girba — 2022-05-22\nHello everyone. I'd be interested to learn a little about how you perceive our work. So:\n\n* What do you find interesting about GT?\n* What annoys you at GT?\n* Did your understanding of the scope of GT change over time?\n"
    },
    {
      "type": "markdown",
      "id": "0812cb647073829c",
      "text": "botwhytho — via [https://discord.com/channels/729445214812504107/978036401209770034/978491793937170452 discord]\n\n- Interesting: being able to quickly prototype certain types of computing tasks, mostly in the realm of personal computation. A much more consistent and clean UI than Pharo. Lepiter is a more recent addition but a game changer, note-taking where you can leverage full programmability is great, as well as prototyping while taking notes in the playground so that by the time I am coding up Classes + methods I have a very good idea of what I'm doing. More of an implementation detail, but leveraging modern third party libraries & languages (Rust) when having to go low-level, not having to reinvent wheels and delegating to other languages when appropriate.\n\n- Not so great: At the moment, the combination of feenk's priorities (implicit ones I've gathered as they don't have a roadmap which is good & bad) + the small size of the community around Gt makes it hard for the project to become a platform on top of which to extend and/or build additional tools/products is an easy thing to do as there are a good amount of breaking changes and little to none 'test harnesses' for downstream users to notice these without a lot of effort. Making decisions on how outside contributions would work has been stalled for a while, needing a lot of code to live as extensions in people's personal repos while making it hard for the community at large to take advantage of them.\n\n- Scope: I originally thought Gt would be a great platform to build upon but as time has passed not sure it's there yet. I originally thought of it only as a place for computation, but Lepiter in my mind added note-taking/KMS & Notebook (like Jupyter) use-cases.  So as time has passed, the scope in my mind has both increased & decreased in different ways: Lepiter brings a lot of new use-cases & people/attention that wouldn't have known about Gt, but the current level of effort that can be put into the project (feenk + community hours) is not yet big enough for it to be a more steady and easy to use platform.\n"
    },
    {
      "type": "markdown",
      "id": "84cf9a86827c131c",
      "text": "tatut — heute um 08:23 Uhr\nI've never been much into notebooks or other note taking systems, so I haven't really used lepiter that much. So my perspective is that of more traditional development and IDE.\n\nI found the Coder and the git interface to be really nice looking compared to pharo... but I find the gt ui is quite sluggish on my machine so pharo feels much snappier and I mostly use that\n\n"
    },
    {
      "type": "markdown",
      "id": "053cd3602d71232e",
      "text": "tudor girba — heute um 10:40 Uhr\nCould you detail what specifically you find sluggish?\n\n"
    },
    {
      "type": "markdown",
      "id": "a887c5198d00c7f6",
      "text": "tatut — heute um 10:48 Uhr\ntyping in the code editor, scrolling through a large lepiter page, generally many basic UI things\nthis is on an intel macbook\n\n"
    },
    {
      "type": "markdown",
      "id": "af77e50db7e62401",
      "text": "tudor girba — heute um 11:15 Uhr\nThanks. Would it be possible to qualify what you mean by \"many basic UI things\"?\n\n"
    },
    {
      "type": "markdown",
      "id": "fa5417814e8b1f71",
      "text": "tatut — heute um 11:28 Uhr\ntyping, scrolling, clicking, sometimes I just feel there is a noticeable delay before I see feedback... sorry I don't have a more detailed report, as I haven't used it so extensively.\n\n"
    },
    {
      "type": "markdown",
      "id": "588800b6eb58fb1e",
      "text": "tudor girba — heute um 11:33 Uhr\nThank you.\n\n"
    },
    {
      "type": "markdown",
      "id": "297220abce02071a",
      "text": "tudor girba — heute um 11:36 Uhr\nThanks for the feedback. Indeed, we are still in beta because we do not consider we got to a reasonable 1.0 version. I believe we are not far, but we are not there yet. It's remarkable and humbling how people put up with a fast changing environment and still stay with it. Thank you.\n\n"
    },
    {
      "type": "markdown",
      "id": "4cf9eaa26144b127",
      "text": "TeMPOraL — heute um 14:38 Uhr\nI concur with @tatut here, the no 1. thing I notice about GT is that the UI overall noticeably (and distractingly) sluggish. As far as I could tell, the actual \"business operations\" are very fast, it's only the UI layer that goes slow. Like playing a game on 12 FPS slow.\n"
    },
    {
      "type": "markdown",
      "id": "d02c8acda6ca8a75",
      "text": "More concrete examples:\n- I can type faster than the UI can pick up events; I sometimes have to wait to see what I did;\n- I move my mouse faster than UI events seem to fire, which means I need to go slow all the time; typical is that I move my mouse over and all the way past some UI element, before it does its \"on mouse over\" animation; half the time, it doesn't even register on-mouse-over!\n- Related to that, I spent an hour+ trying to break out of the debugger loop, because I've managed to delete and select text faster than the internals of the text widget updated; the result was a \"select text\" event with selection endpoint past the end of the text in the widget, causing an assertion in widget code - and getting out of the debugger caused that same event to be retransmitted ad infinitum, hence a debugger loop :/\n- Some other cases of me misclicking things based solely on the fact that I was moving faster than the UI was updating;\n- Also occasionally the debugger pops up with a failed assertion that was evidently caused by a UI handler race condition - some of those were, I believe, when I managed to switch inspector to a different object while widgets in it were still processing some on-hover or on-key-press event... \nAnd overall, it feels weird to have UI seemingly desynchronized in such a way: not in sync with user input, not in sync with itself. I understand it's an artifact of event-driven architecture, but I feel it should not work like this; I shouldn't be able to (seemingly) catch UI handlers mid-processing.\n"
    },
    {
      "type": "markdown",
      "id": "9469cbbfdcf45b07",
      "text": "For context, I'm running this on Ubuntu 18.04, on a Ryzen 2700X 8-core CPU + 32GB RAM + decent videocard, so I strongly suspect it's not hardware.\n"
    },
    {
      "type": "markdown",
      "id": "6a8fc1fdb819769a",
      "text": "Oh, and another unusual thing: if I hide a GT window and pop it back up, it doesn't re-render its content for me - I have to start clicking at the window with my mouse, and wait 1-10 seconds, before UI is redrawn again (usually it's closer to 1-3 seconds, but several times it was 10+; there's no obvious correlation to load / UI complexity inside GT that I could see) \n"
    },
    {
      "type": "markdown",
      "id": "7d46a6afb1018719",
      "text": "TeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\nSecondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\n\n"
    },
    {
      "type": "markdown",
      "id": "57bf27e1a2de3058",
      "text": "tudor girba — heute um 15:12 Uhr\nThank you for the feedback. About whether GT is meant for working with complex software project: GT is built in GT :). It’s far from a trivial project. Also, there are systems that use it that are many times larger than GT. So, the intent is to make it work with it. Yes, it’s not as fast as we would want it, but that is because it takes time to nail performance on a highly flexible graphical stack (see one rendering tree). Over the past 18 months, performance improved somewhere around 15x, and it will continue to get better. Performance is one reason we still consider it a beta 🙂\n\n"
    },
    {
      "type": "markdown",
      "id": "ffeb4c3a98bcb097",
      "text": "TeMPOraL — heute um 15:13 Uhr\nOn lack of facilities for self-help:\nI'd contrast that with Emacs, which calls itself a \"self-documenting editor\". Once you learn a few basic help commands there (\"help for function\", \"help for variable\", \"what happens when I press this key?\", \"apropos\", \"info manual\", \"jump to source\"), you can figure out most of the stuff about Emacs on your own, offline. The editor tries to make sure you're exposed to those crucial self-help commands early on. In contrast, GT so far:\n- Had me ask on Discord to get sent a link on Twitter that explained how you can list some shortcuts in a pretty  roundabout way; there's no such list available in GT;\n- Most of the code I end up inspecting doesn't carry documentation on classes or methods;\n- The GT Lepiter book covers a lot of things well, but it feels like 10% of what I'd expect (again, comparing to e.g. Emacs manual). For example, where it talks about types of Lepiter snippets, it doesn't even list all of the ones that come built-in. Etc.\n- There's lots of general GT knowledge hidden deep in various Lepiter pages in the GT book, that could've been useful if exposed in a \"how GT works\" chapter, or even linked to.\n- I haven't played with Driller (?) enough to tell, but I think there aren't enough ways to basically pop a debugger in the middle of GT doing something, so I can jump into the code I see running\n\n"
    },
    {
      "type": "markdown",
      "id": "01a966e3b6fe19e7",
      "text": "TeMPOraL — heute um 15:22 Uhr\n@tudor girba to be clear, I'm not complaining - GT is a great piece of work as it is;\n\n"
    },
    {
      "type": "markdown",
      "id": "64cfe7dca0030c2f",
      "text": "tudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \n\n"
    },
    {
      "type": "markdown",
      "id": "7f9937036d6ad684",
      "text": "TeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\n\n"
    },
    {
      "type": "markdown",
      "id": "da5221738d64b059",
      "text": "tudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\n\n"
    },
    {
      "type": "markdown",
      "id": "aedab9efd92160a5",
      "text": "TeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\n\n"
    },
    {
      "type": "markdown",
      "id": "b2b3f909caf1f56c",
      "text": "tudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\n\n"
    },
    {
      "type": "markdown",
      "id": "92d61f7386da62a5",
      "text": "TeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\n\nBild\n\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\n\n"
    },
    {
      "type": "markdown",
      "id": "3255bba081aa57a9",
      "text": "TeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\n\n"
    },
    {
      "type": "markdown",
      "id": "67f31d5b9cb39c4b",
      "text": "TeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
    },
    {
      "type": "pagefold",
      "id": "1fa96108af0c399e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "24a5079e2157c866",
      "text": "[[Hest]] – [https://ivanish.s3.amazonaws.com/hest/15.mp3 mp3]"
    },
    {
      "type": "paragraph",
      "id": "c69af1e8fc67ae07",
      "text": "– [https://ivanish.ca/hest-time-travel/ page]"
    },
    {
      "type": "video",
      "id": "e0ab8da29be01f99",
      "text": "YOUTUBE -3gFWyYbFb8\n2021-05-17: Riffing on [[Ivan Reese]]'s Hest by [[Kartik Agaram]]"
    },
    {
      "type": "paragraph",
      "id": "f9349dedc0ff2969",
      "text": "[[Time Travel]]"
    },
    {
      "type": "markdown",
      "id": "daa1410c28d46191",
      "text": "> You choose how time progresses. The passage of time is just an attribute of the objects in [[Hest]], so you can have different parts of your sim running at different rates. Generally, core functions, libraries, and your main simulation logic run as fast as possible. But you probably also want to have a part of your sim that runs at a finite, constant rate, where your game's graphics and GUI exist.\n\nWhen debugging, you can run time in slow motion. This lets you follow data as it moves through the sim. By default, data points are labelled to show what values they contain, so you get the benefits of a debugger — seeing your current variable values in every scope, stepping through code — but you don't need to completely stop time. You can still interact with your sim, and see it slowly respond.\n\nYou can also run time backwards. By the end of this post we will have thoroughly explored the consequences of going back in time."
    },
    {
      "type": "paragraph",
      "id": "50717a73c5f71227",
      "text": "– Factorio. [https://github.com/ivanreese/visual-programming-codex/blob/main/inspirations.md github]"
    },
    {
      "type": "markdown",
      "id": "e0f39725e37ef462",
      "text": "> This is a perpetual work-in-progress, inspired by [[Shaun Lebron]]'s History of Lisp Parens. It's small right now, but will grow and gain structure and substance over the coming years. If you know of anything that could or should be added, please do open an issue or pull request. (Personally, I haven't had much time or energy to update this recently — but I am capturing all the interesting VPLs I hear about as issues, so check those out if you're looking for more.)"
    },
    {
      "type": "pagefold",
      "id": "12c7f63564a71c9e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "ea0b6528290101bb",
      "text": "⇒ [[GoJs]] ⇒ [[Interactive Diagrams]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-05-24",
        "story": []
      },
      "date": 1653368488642
    },
    {
      "item": {
        "type": "factory",
        "id": "7b3e4c66119f1016"
      },
      "id": "7b3e4c66119f1016",
      "type": "add",
      "date": 1653368490790
    },
    {
      "type": "edit",
      "id": "7b3e4c66119f1016",
      "item": {
        "type": "reference",
        "id": "7b3e4c66119f1016",
        "site": "david.dojo.fed.wiki",
        "slug": "garden-metaphor",
        "title": "Garden Metaphor",
        "text": "The concept of the [[permanent wiki]] differs from a traditionally organised [[archive]] in that we seek to structure it with a [[garden metaphor]]."
      },
      "date": 1653368493432
    },
    {
      "item": {
        "type": "factory",
        "id": "0c6301ec9189387f"
      },
      "id": "0c6301ec9189387f",
      "type": "add",
      "after": "7b3e4c66119f1016",
      "date": 1653368552452
    },
    {
      "type": "edit",
      "id": "0c6301ec9189387f",
      "item": {
        "type": "reference",
        "id": "0c6301ec9189387f",
        "site": "david.dojo.fed.wiki",
        "slug": "gardens-stream",
        "title": "Garden's Stream",
        "text": "Wiki favors tending its own rather than publishing breaking news from others. But can this chasm be crossed? We ask, what sort of stream of news might flow from a well tended garden?"
      },
      "date": 1653368556935
    },
    {
      "item": {
        "type": "factory",
        "id": "1be1db9b938804ac"
      },
      "id": "1be1db9b938804ac",
      "type": "add",
      "after": "0c6301ec9189387f",
      "date": 1653368610558
    },
    {
      "type": "edit",
      "id": "1be1db9b938804ac",
      "item": {
        "type": "reference",
        "id": "1be1db9b938804ac",
        "site": "david.dojo.fed.wiki",
        "slug": "one-garden-one-planet",
        "title": "One Garden One Planet",
        "text": "'One Garden One Planet' is an experimental method to explore how the science of [[Conservation Biology]] is diffused. It takes the study of practical [[Conservation]] and examines its [[Knowledge Management]] challenges."
      },
      "date": 1653368613884
    },
    {
      "item": {
        "type": "factory",
        "id": "ee4625e9595ab237"
      },
      "id": "ee4625e9595ab237",
      "type": "add",
      "after": "1be1db9b938804ac",
      "date": 1653368669891
    },
    {
      "type": "edit",
      "id": "ee4625e9595ab237",
      "item": {
        "type": "reference",
        "id": "ee4625e9595ab237",
        "site": "garden.asia.wiki.org",
        "slug": "half-hidden-garden",
        "title": "Half-Hidden Garden",
        "text": "If a garden is too close to the street, people won't use it because it isn't private enough. But if it is too far from the street, then it won't be used either, because it is too isolated."
      },
      "date": 1653368673121
    },
    {
      "item": {
        "type": "factory",
        "id": "7d8987367d8aad9f"
      },
      "id": "7d8987367d8aad9f",
      "type": "add",
      "after": "ee4625e9595ab237",
      "date": 1653368760949
    },
    {
      "type": "edit",
      "id": "7d8987367d8aad9f",
      "item": {
        "type": "reference",
        "id": "7d8987367d8aad9f",
        "site": "david.dojo.fed.wiki",
        "slug": "garden-map",
        "title": "Garden Map",
        "text": "This [[Hyperbook]] is slowly being built. Unlike a traditional book which has a single scripted path for the reader to follow, a hyperbook is design to encourage exploration, based on the [[Curiosity]] of the reader. In this process, meaning is co-created with the author and the reader."
      },
      "date": 1653368764041
    },
    {
      "item": {
        "type": "factory",
        "id": "10e13866ffa3c59a"
      },
      "id": "10e13866ffa3c59a",
      "type": "add",
      "after": "7d8987367d8aad9f",
      "date": 1653368794718
    },
    {
      "id": "10e13866ffa3c59a",
      "type": "move",
      "order": [
        "7b3e4c66119f1016",
        "0c6301ec9189387f",
        "1be1db9b938804ac",
        "10e13866ffa3c59a",
        "ee4625e9595ab237",
        "7d8987367d8aad9f"
      ],
      "date": 1653368799167
    },
    {
      "type": "edit",
      "id": "10e13866ffa3c59a",
      "item": {
        "type": "reference",
        "id": "10e13866ffa3c59a",
        "site": "garden.asia.wiki.org",
        "slug": "garden-patterns-inventory",
        "title": "Garden Patterns Inventory",
        "text": "We duplicate an illustration from Timeless Way of Building using Graph plugins and our graph building workflow."
      },
      "date": 1653368804314
    },
    {
      "id": "7d8987367d8aad9f",
      "type": "move",
      "order": [
        "7b3e4c66119f1016",
        "0c6301ec9189387f",
        "1be1db9b938804ac",
        "10e13866ffa3c59a",
        "7d8987367d8aad9f",
        "ee4625e9595ab237"
      ],
      "date": 1653368820988
    },
    {
      "id": "10e13866ffa3c59a",
      "type": "move",
      "order": [
        "7b3e4c66119f1016",
        "0c6301ec9189387f",
        "1be1db9b938804ac",
        "7d8987367d8aad9f",
        "10e13866ffa3c59a",
        "ee4625e9595ab237"
      ],
      "date": 1653368824790
    },
    {
      "item": {
        "type": "factory",
        "id": "96afbe7308a407f4"
      },
      "id": "96afbe7308a407f4",
      "type": "add",
      "after": "ee4625e9595ab237",
      "date": 1653368887240
    },
    {
      "type": "edit",
      "id": "96afbe7308a407f4",
      "item": {
        "type": "reference",
        "id": "96afbe7308a407f4",
        "site": "garden.asia.wiki.org",
        "slug": "courtyards-which-live",
        "title": "Courtyards Which Live",
        "text": "The courtyards built in modern buildings are very often dead. They are intended to be private open spaces for people to use - but they end up unused, full of gravel and abstract sculptures."
      },
      "date": 1653368890526
    },
    {
      "item": {
        "type": "factory",
        "id": "e48afd4ba3d6138e"
      },
      "id": "e48afd4ba3d6138e",
      "type": "add",
      "after": "96afbe7308a407f4",
      "date": 1653369287150
    },
    {
      "type": "edit",
      "id": "e48afd4ba3d6138e",
      "item": {
        "type": "reference",
        "id": "e48afd4ba3d6138e",
        "site": "house.asia.wiki.org",
        "slug": "built-in-seats",
        "title": "Built-in Seats",
        "text": "Write a couple of sentences that describe the solution captured by this pattern. Drag flags to make connections."
      },
      "date": 1653369300442
    },
    {
      "item": {
        "type": "factory",
        "id": "984d9e2b98b9d7bf"
      },
      "id": "984d9e2b98b9d7bf",
      "type": "add",
      "after": "e48afd4ba3d6138e",
      "date": 1653369456636
    },
    {
      "type": "edit",
      "id": "984d9e2b98b9d7bf",
      "item": {
        "type": "paragraph",
        "id": "984d9e2b98b9d7bf",
        "text": "Federated Wiki - Graph Plugin"
      },
      "date": 1653369460159
    },
    {
      "type": "edit",
      "id": "984d9e2b98b9d7bf",
      "item": {
        "type": "paragraph",
        "id": "984d9e2b98b9d7bf",
        "text": "Federated Wiki - Graph Plugin [https://www.npmjs.com/package/wiki-plugin-graph npmjs]"
      },
      "date": 1653369875869
    },
    {
      "type": "edit",
      "id": "984d9e2b98b9d7bf",
      "item": {
        "type": "paragraph",
        "id": "984d9e2b98b9d7bf",
        "text": "Federated Wiki - Graph Plugin. [https://www.npmjs.com/package/wiki-plugin-graph npmjs]"
      },
      "date": 1653369883990
    },
    {
      "item": {
        "type": "factory",
        "id": "dd8ea813cbe10cce"
      },
      "id": "dd8ea813cbe10cce",
      "type": "add",
      "after": "984d9e2b98b9d7bf",
      "date": 1653370304482
    },
    {
      "type": "edit",
      "id": "dd8ea813cbe10cce",
      "item": {
        "type": "reference",
        "id": "dd8ea813cbe10cce",
        "site": "ward.asia.wiki.org",
        "slug": "collaborative-link",
        "title": "Collaborative Link",
        "text": "The web became more collaborative with wiki's introduction of the [[Internal Link]]. Link names were drawn from a shared space backed up at the time by shared storage. Federated wiki's internal links preserves the shared space but not the shared storage making it the ideal link for the distributed collaborative web."
      },
      "date": 1653370340499
    },
    {
      "type": "add",
      "id": "8bc7f53a2877f6fe",
      "item": {
        "type": "paragraph",
        "id": "8bc7f53a2877f6fe",
        "text": "Graphs should provide \"Collaborative Links\" #1"
      },
      "after": "984d9e2b98b9d7bf",
      "date": 1653370381689
    },
    {
      "type": "edit",
      "id": "8bc7f53a2877f6fe",
      "item": {
        "type": "paragraph",
        "id": "8bc7f53a2877f6fe",
        "text": "Graphs should provide \"Collaborative Links\" #1 [https://github.com/WardCunningham/wiki-plugin-graph/issues/1 github]"
      },
      "date": 1653370393378
    },
    {
      "item": {
        "type": "factory",
        "id": "0cad72faabf92f89"
      },
      "id": "0cad72faabf92f89",
      "type": "add",
      "after": "dd8ea813cbe10cce",
      "date": 1653370642006
    },
    {
      "type": "edit",
      "id": "0cad72faabf92f89",
      "item": {
        "type": "reference",
        "id": "0cad72faabf92f89",
        "site": "ward.bay.wiki.org",
        "slug": "collaborative-link",
        "title": "Collaborative Link",
        "text": "The web became more collaborative with wiki's introduction of the [[Internal Link]]. Link names were drawn from a shared space backed up at the time by shared storage. Federated wiki's internal links preserves the shared space but not the shared storage making it the ideal link for the distributed collaborative web."
      },
      "date": 1653370646480
    },
    {
      "item": {
        "type": "factory",
        "id": "2bdc961f9f2b6c43"
      },
      "id": "2bdc961f9f2b6c43",
      "type": "add",
      "after": "0cad72faabf92f89",
      "date": 1653374039544
    },
    {
      "type": "edit",
      "id": "2bdc961f9f2b6c43",
      "item": {
        "type": "pagefold",
        "id": "2bdc961f9f2b6c43",
        "text": "~"
      },
      "date": 1653374043699
    },
    {
      "id": "2bdc961f9f2b6c43",
      "type": "move",
      "order": [
        "2bdc961f9f2b6c43",
        "7b3e4c66119f1016",
        "0c6301ec9189387f",
        "1be1db9b938804ac",
        "7d8987367d8aad9f",
        "10e13866ffa3c59a",
        "ee4625e9595ab237",
        "96afbe7308a407f4",
        "e48afd4ba3d6138e",
        "984d9e2b98b9d7bf",
        "8bc7f53a2877f6fe",
        "dd8ea813cbe10cce",
        "0cad72faabf92f89"
      ],
      "date": 1653374048600
    },
    {
      "item": {
        "type": "factory",
        "id": "e1b77c7987d0f483"
      },
      "id": "e1b77c7987d0f483",
      "type": "add",
      "after": "0cad72faabf92f89",
      "date": 1653374051429
    },
    {
      "id": "e1b77c7987d0f483",
      "type": "move",
      "order": [
        "e1b77c7987d0f483",
        "2bdc961f9f2b6c43",
        "7b3e4c66119f1016",
        "0c6301ec9189387f",
        "1be1db9b938804ac",
        "7d8987367d8aad9f",
        "10e13866ffa3c59a",
        "ee4625e9595ab237",
        "96afbe7308a407f4",
        "e48afd4ba3d6138e",
        "984d9e2b98b9d7bf",
        "8bc7f53a2877f6fe",
        "dd8ea813cbe10cce",
        "0cad72faabf92f89"
      ],
      "date": 1653374056316
    },
    {
      "type": "edit",
      "id": "e1b77c7987d0f483",
      "item": {
        "type": "reference",
        "id": "e1b77c7987d0f483",
        "site": "wiki.ralfbarkow.ch",
        "slug": "capacity-building",
        "title": "Capacity Building",
        "text": "Jami recognized that changing how her teachers taught would require a tremendous amount of courage. They would need to experience the reason to change."
      },
      "date": 1653374072092
    },
    {
      "item": {
        "type": "factory",
        "id": "7d0fe636ee2d831b"
      },
      "id": "7d0fe636ee2d831b",
      "type": "add",
      "after": "0cad72faabf92f89",
      "date": 1653374088195
    },
    {
      "id": "7d0fe636ee2d831b",
      "type": "move",
      "order": [
        "e1b77c7987d0f483",
        "7d0fe636ee2d831b",
        "2bdc961f9f2b6c43",
        "7b3e4c66119f1016",
        "0c6301ec9189387f",
        "1be1db9b938804ac",
        "7d8987367d8aad9f",
        "10e13866ffa3c59a",
        "ee4625e9595ab237",
        "96afbe7308a407f4",
        "e48afd4ba3d6138e",
        "984d9e2b98b9d7bf",
        "8bc7f53a2877f6fe",
        "dd8ea813cbe10cce",
        "0cad72faabf92f89"
      ],
      "date": 1653374092229
    },
    {
      "type": "edit",
      "id": "7d0fe636ee2d831b",
      "item": {
        "type": "reference",
        "id": "7d0fe636ee2d831b",
        "site": "wiki.ralfbarkow.ch",
        "slug": "building-capacity",
        "title": "Building Capacity",
        "text": "# Intention"
      },
      "date": 1653374093941
    },
    {
      "item": {
        "type": "factory",
        "id": "c240169423449d17"
      },
      "id": "c240169423449d17",
      "type": "add",
      "after": "0cad72faabf92f89",
      "date": 1653374144499
    },
    {
      "id": "c240169423449d17",
      "type": "move",
      "order": [
        "e1b77c7987d0f483",
        "c240169423449d17",
        "7d0fe636ee2d831b",
        "2bdc961f9f2b6c43",
        "7b3e4c66119f1016",
        "0c6301ec9189387f",
        "1be1db9b938804ac",
        "7d8987367d8aad9f",
        "10e13866ffa3c59a",
        "ee4625e9595ab237",
        "96afbe7308a407f4",
        "e48afd4ba3d6138e",
        "984d9e2b98b9d7bf",
        "8bc7f53a2877f6fe",
        "dd8ea813cbe10cce",
        "0cad72faabf92f89"
      ],
      "date": 1653374148473
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "paragraph",
        "id": "c240169423449d17",
        "text": "Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n"
      },
      "date": 1653374151152
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "paragraph",
        "id": "c240169423449d17",
        "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n"
      },
      "date": 1653374154780
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "markdown",
        "id": "c240169423449d17",
        "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n"
      },
      "date": 1653374156456
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "markdown",
        "id": "c240169423449d17",
        "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n> Nachdem die Lehrer mehrere Zyklen dieser vorgeschriebenen Methoden durchlaufen haben, werden viele zynisch. Sie fühlen sich auch zunehmend machtlos und haben das Gefühl, dass ihre eigenen Erfahrungen und ihr Fachwissen von ihren Führungskräften nicht geschätzt werden.\n\n"
      },
      "date": 1653374195221
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "markdown",
        "id": "c240169423449d17",
        "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n\n> Nachdem die Lehrer mehrere Zyklen dieser vorgeschriebenen Methoden durchlaufen haben, werden viele zynisch. Sie fühlen sich auch zunehmend machtlos und haben das Gefühl, dass ihre eigenen Erfahrungen und ihr Fachwissen von ihren Führungskräften nicht geschätzt werden.\n\n"
      },
      "date": 1653374199643
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "markdown",
        "id": "c240169423449d17",
        "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n\n> Jami verstand, dass sie kein neues Lehrmodell einführte, sondern eine neue Art des Lernens - eine, die die Kultur innovativer Unternehmen widerspiegelt.\t\t\n\n> Nachdem die Lehrer mehrere Zyklen dieser vorgeschriebenen Methoden durchlaufen haben, werden viele zynisch. Sie fühlen sich auch zunehmend machtlos und haben das Gefühl, dass ihre eigenen Erfahrungen und ihr Fachwissen von ihren Führungskräften nicht geschätzt werden.\n\n"
      },
      "date": 1653374241883
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "markdown",
        "id": "c240169423449d17",
        "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n\n> Nachdem die Lehrer mehrere Zyklen dieser vorgeschriebenen Methoden durchlaufen haben, werden viele zynisch. Sie fühlen sich auch zunehmend machtlos und haben das Gefühl, dass ihre eigenen Erfahrungen und ihr Fachwissen von ihren Führungskräften nicht geschätzt werden.\n\n> Jami verstand, dass sie kein neues Lehrmodell einführte, sondern eine neue Art des Lernens - eine, die die Kultur innovativer Unternehmen widerspiegelt.\t\t\n"
      },
      "date": 1653374256645
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "markdown",
        "id": "c240169423449d17",
        "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n\n⇒ [[Design Thinking]]\n> Nachdem die Lehrer mehrere Zyklen dieser vorgeschriebenen Methoden durchlaufen haben, werden viele zynisch. Sie fühlen sich auch zunehmend machtlos und haben das Gefühl, dass ihre eigenen Erfahrungen und ihr Fachwissen von ihren Führungskräften nicht geschätzt werden.\n\n> Jami verstand, dass sie kein neues Lehrmodell einführte, sondern eine neue Art des Lernens - eine, die die Kultur innovativer Unternehmen widerspiegelt.\t\t\n"
      },
      "date": 1653374323199
    },
    {
      "type": "edit",
      "id": "c240169423449d17",
      "item": {
        "type": "markdown",
        "id": "c240169423449d17",
        "text": "> Jahrelang wurden Lehrerinnen und Lehrer ständig mit neuen Bildungsmodellen konfrontiert. Mit jedem neuen Modell wurden sie von ihren Verwaltern aufgefordert, ihre Unterrichtsmethoden zu ändern. Es gab einen neuen Weg, einen besseren Weg zu unterrichten. Und dann wurde dieses Modell wieder verworfen und durch ein anderes Modell ersetzt. Sie wurden erneut aufgefordert, auf eine andere Art zu unterrichten.\n\n> Nachdem die Lehrer mehrere Zyklen dieser vorgeschriebenen Methoden durchlaufen haben, werden viele zynisch. Sie fühlen sich auch zunehmend machtlos und haben das Gefühl, dass ihre eigenen Erfahrungen und ihr Fachwissen von ihren Führungskräften nicht geschätzt werden.\n\n> Jami verstand, dass sie kein neues Lehrmodell einführte, sondern eine neue Art des Lernens - eine, die die Kultur innovativer Unternehmen widerspiegelt.\t\t\n"
      },
      "date": 1653374348542
    },
    {
      "type": "add",
      "id": "429d278c06ce6009",
      "item": {
        "type": "markdown",
        "id": "429d278c06ce6009",
        "text": "⇒ [[Design Thinking]]"
      },
      "after": "c240169423449d17",
      "date": 1653374349569
    },
    {
      "item": {
        "type": "factory",
        "id": "a08c1b50449eb693"
      },
      "id": "a08c1b50449eb693",
      "type": "add",
      "after": "0cad72faabf92f89",
      "date": 1653374403689
    },
    {
      "type": "edit",
      "id": "a08c1b50449eb693",
      "item": {
        "type": "graphviz",
        "id": "a08c1b50449eb693",
        "text": "DOT strict digraph\n  \nrankdir=LR\n\n  node [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n  HERE NODE\n\n    node [style=filled fillcolor=lightblue]\n    WHERE /^⇒/\n      LINKS HERE -> NODE\n          node [style=filled fillcolor=white]\n          HERE NODE\n            WHERE /^⇒/\n              LINKS HERE -> NODE\n\n    node [style=filled fillcolor=white penwidth=3 color=black]\n    LINKS HERE -> NODE\n       node [style=filled fillcolor=white penwidth=1 color=black]\n       HERE NODE\n         LINKS HERE -> NODE\n\n   node [style=\"filled,rounded,dotted\" fillcolor=white]\n   edge [style=dotted]\n   HERE NODE\n      BACKLINKS NODE -> HERE"
      },
      "date": 1653374406570
    },
    {
      "type": "edit",
      "id": "7b3e4c66119f1016",
      "item": {
        "type": "reference",
        "id": "7b3e4c66119f1016",
        "site": "david.dojo.fed.wiki",
        "slug": "garden-metaphor",
        "title": "Garden Metaphor",
        "text": "The concept of the [[permanent wiki]] differs from a traditionally organised [[Archive]] in that we seek to structure it with a [[garden metaphor]]."
      },
      "date": 1653374467939
    },
    {
      "type": "edit",
      "id": "7b3e4c66119f1016",
      "item": {
        "type": "reference",
        "id": "7b3e4c66119f1016",
        "site": "david.dojo.fed.wiki",
        "slug": "garden-metaphor",
        "title": "Garden Metaphor",
        "text": "The concept of the [[Permanent Wiki]] differs from a traditionally organised [[Archive]] in that we seek to structure it with a [[garden metaphor]]."
      },
      "date": 1653374504728
    },
    {
      "type": "edit",
      "id": "7b3e4c66119f1016",
      "item": {
        "type": "reference",
        "id": "7b3e4c66119f1016",
        "site": "david.dojo.fed.wiki",
        "slug": "garden-metaphor",
        "title": "Garden Metaphor",
        "text": "The concept of the [[Permanent Wiki]] differs from a traditionally organised [[Archive]] in that we seek to structure it with a [[Garden Metaphor]]."
      },
      "date": 1653374604648
    },
    {
      "item": {
        "type": "pagefold",
        "id": "0d0cd5371c8c5db3",
        "text": "~"
      },
      "id": "0d0cd5371c8c5db3",
      "type": "add",
      "after": "a08c1b50449eb693",
      "date": 1653401917712
    },
    {
      "type": "edit",
      "id": "0d0cd5371c8c5db3",
      "item": {
        "type": "pagefold",
        "id": "0d0cd5371c8c5db3",
        "text": "~"
      },
      "date": 1653401921058
    },
    {
      "item": {
        "type": "markdown",
        "id": "3ffca2f7aca1b2ad",
        "text": "tudor girba — 22.05.2022\nHello everyone. I'd be interested to learn a little about how you perceive our work. So:\n\nWhat do you find interesting about GT?\nWhat annoys you at GT?\nDid your understanding of the scope of GT change over time?\nbotwhytho — via [https://discord.com/channels/729445214812504107/978036401209770034/978491793937170452 discord]\n- Interesting: being able to quickly prototype certain types of computing tasks, mostly in the realm of personal computation. A much more consistent and clean UI than Pharo. Lepiter is a more recent addition but a game changer, note-taking where you can leverage full programmability is great, as well as prototyping while taking notes in the playground so that by the time I am coding up Classes + methods I have a very good idea of what I'm doing. More of an implementation detail, but leveraging modern third party libraries & languages (Rust) when having to go low-level, not having to reinvent wheels and delegating to other languages when appropriate.\n- Not so great: At the moment, the combination of feenk's priorities (implicit ones I've gathered as they don't have a roadmap which is good & bad) + the small size of the community around Gt makes it hard for the project to become a platform on top of which to extend and/or build additional tools/products is an easy thing to do as there are a good amount of breaking changes and little to none 'test harnesses' for downstream users to notice these without a lot of effort. Making decisions on how outside contributions would work has been stalled for a while, needing a lot of code to live as extensions in people's personal repos while making it hard for the community at large to take advantage of them.\n- Scope: I originally thought Gt would be a great platform to build upon but as time has passed not sure it's there yet. I originally thought of it only as a place for computation, but Lepiter in my mind added note-taking/KMS & Notebook (like Jupyter) use-cases.  So as time has passed, the scope in my mind has both increased & decreased in different ways: Lepiter brings a lot of new use-cases & people/attention that wouldn't have known about Gt, but the current level of effort that can be put into the project (feenk + community hours) is not yet big enough for it to be a more steady and easy to use platform.\ntatut — heute um 08:23 Uhr\nI've never been much into notebooks or other note taking systems, so I haven't really used lepiter that much. So my perspective is that of more traditional development and IDE.\nI found the Coder and the git interface to be really nice looking compared to pharo... but I find the gt ui is quite sluggish on my machine so pharo feels much snappier and I mostly use that\ntudor girba — heute um 10:40 Uhr\nCould you detail what specifically you find sluggish?\ntatut — heute um 10:48 Uhr\ntyping in the code editor, scrolling through a large lepiter page, generally many basic UI things\nthis is on an intel macbook\ntudor girba — heute um 11:15 Uhr\nThanks. Would it be possible to qualify what you mean by \"many basic UI things\"?\ntatut — heute um 11:28 Uhr\ntyping, scrolling, clicking, sometimes I just feel there is a noticeable delay before I see feedback... sorry I don't have a more detailed report, as I haven't used it so extensively.\ntudor girba — heute um 11:33 Uhr\nThank you.\ntudor girba — heute um 11:36 Uhr\nThanks for the feedback. Indeed, we are still in beta because we do not consider we got to a reasonable 1.0 version. I believe we are not far, but we are not there yet. It's remarkable and humbling how people put up with a fast changing environment and still stay with it. Thank you.\nTeMPOraL — heute um 14:38 Uhr\nI concur with @tatut here, the no 1. thing I notice about GT is that the UI overall noticeably (and distractingly) sluggish. As far as I could tell, the actual \"business operations\" are very fast, it's only the UI layer that goes slow. Like playing a game on 12 FPS slow.\nMore concrete examples:\n- I can type faster than the UI can pick up events; I sometimes have to wait to see what I did;\n- I move my mouse faster than UI events seem to fire, which means I need to go slow all the time; typical is that I move my mouse over and all the way past some UI element, before it does its \"on mouse over\" animation; half the time, it doesn't even register on-mouse-over!\n- Related to that, I spent an hour+ trying to break out of the debugger loop, because I've managed to delete and select text faster than the internals of the text widget updated; the result was a \"select text\" event with selection endpoint past the end of the text in the widget, causing an assertion in widget code - and getting out of the debugger caused that same event to be retransmitted ad infinitum, hence a debugger loop :/\n- Some other cases of me misclicking things based solely on the fact that I was moving faster than the UI was updating;\n- Also occasionally the debugger pops up with a failed assertion that was evidently caused by a UI handler race condition - some of those were, I believe, when I managed to switch inspector to a different object while widgets in it were still processing some on-hover or on-key-press event... \nAnd overall, it feels weird to have UI seemingly desynchronized in such a way: not in sync with user input, not in sync with itself. I understand it's an artifact of event-driven architecture, but I feel it should not work like this; I shouldn't be able to (seemingly) catch UI handlers mid-processing.\nFor context, I'm running this on Ubuntu 18.04, on a Ryzen 2700X 8-core CPU + 32GB RAM + decent videocard, so I strongly suspect it's not hardware.\nOh, and another unusual thing: if I hide a GT window and pop it back up, it doesn't re-render its content for me - I have to start clicking at the window with my mouse, and wait 1-10 seconds, before UI is redrawn again (usually it's closer to 1-3 seconds, but several times it was 10+; there's no obvious correlation to load / UI complexity inside GT that I could see) \nTeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\nSecondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\ntudor girba — heute um 15:12 Uhr\nThank you for the feedback. About whether GT is meant for working with complex software project: GT is built in GT :). It’s far from a trivial project. Also, there are systems that use it that are many times larger than GT. So, the intent is to make it work with it. Yes, it’s not as fast as we would want it, but that is because it takes time to nail performance on a highly flexible graphical stack (see one rendering tree). Over the past 18 months, performance improved somewhere around 15x, and it will continue to get better. Performance is one reason we still consider it a beta 🙂\nTeMPOraL — heute um 15:13 Uhr\nOn lack of facilities for self-help:\nI'd contrast that with Emacs, which calls itself a \"self-documenting editor\". Once you learn a few basic help commands there (\"help for function\", \"help for variable\", \"what happens when I press this key?\", \"apropos\", \"info manual\", \"jump to source\"), you can figure out most of the stuff about Emacs on your own, offline. The editor tries to make sure you're exposed to those crucial self-help commands early on. In contrast, GT so far:\n- Had me ask on Discord to get sent a link on Twitter that explained how you can list some shortcuts in a pretty  roundabout way; there's no such list available in GT;\n- Most of the code I end up inspecting doesn't carry documentation on classes or methods;\n- The GT Lepiter book covers a lot of things well, but it feels like 10% of what I'd expect (again, comparing to e.g. Emacs manual). For example, where it talks about types of Lepiter snippets, it doesn't even list all of the ones that come built-in. Etc.\n- There's lots of general GT knowledge hidden deep in various Lepiter pages in the GT book, that could've been useful if exposed in a \"how GT works\" chapter, or even linked to.\n- I haven't played with Driller (?) enough to tell, but I think there aren't enough ways to basically pop a debugger in the middle of GT doing something, so I can jump into the code I see running\nTeMPOraL — heute um 15:22 Uhr\n@tudor girba to be clear, I'm not complaining - GT is a great piece of work as it is;\ntudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \nTeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\ntudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\nTeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "id": "3ffca2f7aca1b2ad",
      "type": "add",
      "after": "0d0cd5371c8c5db3",
      "date": 1653401922480
    },
    {
      "type": "edit",
      "id": "3ffca2f7aca1b2ad",
      "item": {
        "type": "markdown",
        "id": "3ffca2f7aca1b2ad",
        "text": "tudor girba — 22.05.2022\nHello everyone. I'd be interested to learn a little about how you perceive our work. So:\n\nWhat do you find interesting about GT?\nWhat annoys you at GT?\nDid your understanding of the scope of GT change over time?\nbotwhytho — via [https://discord.com/channels/729445214812504107/978036401209770034/978491793937170452 discord]\n- Interesting: being able to quickly prototype certain types of computing tasks, mostly in the realm of personal computation. A much more consistent and clean UI than Pharo. Lepiter is a more recent addition but a game changer, note-taking where you can leverage full programmability is great, as well as prototyping while taking notes in the playground so that by the time I am coding up Classes + methods I have a very good idea of what I'm doing. More of an implementation detail, but leveraging modern third party libraries & languages (Rust) when having to go low-level, not having to reinvent wheels and delegating to other languages when appropriate.\n- Not so great: At the moment, the combination of feenk's priorities (implicit ones I've gathered as they don't have a roadmap which is good & bad) + the small size of the community around Gt makes it hard for the project to become a platform on top of which to extend and/or build additional tools/products is an easy thing to do as there are a good amount of breaking changes and little to none 'test harnesses' for downstream users to notice these without a lot of effort. Making decisions on how outside contributions would work has been stalled for a while, needing a lot of code to live as extensions in people's personal repos while making it hard for the community at large to take advantage of them.\n- Scope: I originally thought Gt would be a great platform to build upon but as time has passed not sure it's there yet. I originally thought of it only as a place for computation, but Lepiter in my mind added note-taking/KMS & Notebook (like Jupyter) use-cases.  So as time has passed, the scope in my mind has both increased & decreased in different ways: Lepiter brings a lot of new use-cases & people/attention that wouldn't have known about Gt, but the current level of effort that can be put into the project (feenk + community hours) is not yet big enough for it to be a more steady and easy to use platform.\ntatut — heute um 08:23 Uhr\nI've never been much into notebooks or other note taking systems, so I haven't really used lepiter that much. So my perspective is that of more traditional development and IDE.\nI found the Coder and the git interface to be really nice looking compared to pharo... but I find the gt ui is quite sluggish on my machine so pharo feels much snappier and I mostly use that\ntudor girba — heute um 10:40 Uhr\nCould you detail what specifically you find sluggish?\ntatut — heute um 10:48 Uhr\ntyping in the code editor, scrolling through a large lepiter page, generally many basic UI things\nthis is on an intel macbook\ntudor girba — heute um 11:15 Uhr\nThanks. Would it be possible to qualify what you mean by \"many basic UI things\"?\ntatut — heute um 11:28 Uhr\ntyping, scrolling, clicking, sometimes I just feel there is a noticeable delay before I see feedback... sorry I don't have a more detailed report, as I haven't used it so extensively.\ntudor girba — heute um 11:33 Uhr\nThank you.\ntudor girba — heute um 11:36 Uhr\nThanks for the feedback. Indeed, we are still in beta because we do not consider we got to a reasonable 1.0 version. I believe we are not far, but we are not there yet. It's remarkable and humbling how people put up with a fast changing environment and still stay with it. Thank you.\nTeMPOraL — heute um 14:38 Uhr\nI concur with @tatut here, the no 1. thing I notice about GT is that the UI overall noticeably (and distractingly) sluggish. As far as I could tell, the actual \"business operations\" are very fast, it's only the UI layer that goes slow. Like playing a game on 12 FPS slow.\nMore concrete examples:\n- I can type faster than the UI can pick up events; I sometimes have to wait to see what I did;\n- I move my mouse faster than UI events seem to fire, which means I need to go slow all the time; typical is that I move my mouse over and all the way past some UI element, before it does its \"on mouse over\" animation; half the time, it doesn't even register on-mouse-over!\n- Related to that, I spent an hour+ trying to break out of the debugger loop, because I've managed to delete and select text faster than the internals of the text widget updated; the result was a \"select text\" event with selection endpoint past the end of the text in the widget, causing an assertion in widget code - and getting out of the debugger caused that same event to be retransmitted ad infinitum, hence a debugger loop :/\n- Some other cases of me misclicking things based solely on the fact that I was moving faster than the UI was updating;\n- Also occasionally the debugger pops up with a failed assertion that was evidently caused by a UI handler race condition - some of those were, I believe, when I managed to switch inspector to a different object while widgets in it were still processing some on-hover or on-key-press event... \nAnd overall, it feels weird to have UI seemingly desynchronized in such a way: not in sync with user input, not in sync with itself. I understand it's an artifact of event-driven architecture, but I feel it should not work like this; I shouldn't be able to (seemingly) catch UI handlers mid-processing.\nFor context, I'm running this on Ubuntu 18.04, on a Ryzen 2700X 8-core CPU + 32GB RAM + decent videocard, so I strongly suspect it's not hardware.\nOh, and another unusual thing: if I hide a GT window and pop it back up, it doesn't re-render its content for me - I have to start clicking at the window with my mouse, and wait 1-10 seconds, before UI is redrawn again (usually it's closer to 1-3 seconds, but several times it was 10+; there's no obvious correlation to load / UI complexity inside GT that I could see) \nTeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\nSecondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\ntudor girba — heute um 15:12 Uhr\nThank you for the feedback. About whether GT is meant for working with complex software project: GT is built in GT :). It’s far from a trivial project. Also, there are systems that use it that are many times larger than GT. So, the intent is to make it work with it. Yes, it’s not as fast as we would want it, but that is because it takes time to nail performance on a highly flexible graphical stack (see one rendering tree). Over the past 18 months, performance improved somewhere around 15x, and it will continue to get better. Performance is one reason we still consider it a beta 🙂\nTeMPOraL — heute um 15:13 Uhr\nOn lack of facilities for self-help:\nI'd contrast that with Emacs, which calls itself a \"self-documenting editor\". Once you learn a few basic help commands there (\"help for function\", \"help for variable\", \"what happens when I press this key?\", \"apropos\", \"info manual\", \"jump to source\"), you can figure out most of the stuff about Emacs on your own, offline. The editor tries to make sure you're exposed to those crucial self-help commands early on. In contrast, GT so far:\n- Had me ask on Discord to get sent a link on Twitter that explained how you can list some shortcuts in a pretty  roundabout way; there's no such list available in GT;\n- Most of the code I end up inspecting doesn't carry documentation on classes or methods;\n- The GT Lepiter book covers a lot of things well, but it feels like 10% of what I'd expect (again, comparing to e.g. Emacs manual). For example, where it talks about types of Lepiter snippets, it doesn't even list all of the ones that come built-in. Etc.\n- There's lots of general GT knowledge hidden deep in various Lepiter pages in the GT book, that could've been useful if exposed in a \"how GT works\" chapter, or even linked to.\n- I haven't played with Driller (?) enough to tell, but I think there aren't enough ways to basically pop a debugger in the middle of GT doing something, so I can jump into the code I see running\nTeMPOraL — heute um 15:22 Uhr\n@tudor girba to be clear, I'm not complaining - GT is a great piece of work as it is;\ntudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \nTeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\ntudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\nTeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "date": 1653401924985
    },
    {
      "type": "edit",
      "id": "3ffca2f7aca1b2ad",
      "item": {
        "type": "markdown",
        "id": "3ffca2f7aca1b2ad",
        "text": "tudor girba — 22.05.2022\nHello everyone. I'd be interested to learn a little about how you perceive our work. So:\n\nWhat do you find interesting about GT?\nWhat annoys you at GT?\nDid your understanding of the scope of GT change over time?\nbotwhytho — via [https://discord.com/channels/729445214812504107/978036401209770034/978491793937170452 discord]\n- Interesting: being able to quickly prototype certain types of computing tasks, mostly in the realm of personal computation. A much more consistent and clean UI than Pharo. Lepiter is a more recent addition but a game changer, note-taking where you can leverage full programmability is great, as well as prototyping while taking notes in the playground so that by the time I am coding up Classes + methods I have a very good idea of what I'm doing. More of an implementation detail, but leveraging modern third party libraries & languages (Rust) when having to go low-level, not having to reinvent wheels and delegating to other languages when appropriate.\n- Not so great: At the moment, the combination of feenk's priorities (implicit ones I've gathered as they don't have a roadmap which is good & bad) + the small size of the community around Gt makes it hard for the project to become a platform on top of which to extend and/or build additional tools/products is an easy thing to do as there are a good amount of breaking changes and little to none 'test harnesses' for downstream users to notice these without a lot of effort. Making decisions on how outside contributions would work has been stalled for a while, needing a lot of code to live as extensions in people's personal repos while making it hard for the community at large to take advantage of them.\n- Scope: I originally thought Gt would be a great platform to build upon but as time has passed not sure it's there yet. I originally thought of it only as a place for computation, but Lepiter in my mind added note-taking/KMS & Notebook (like Jupyter) use-cases.  So as time has passed, the scope in my mind has both increased & decreased in different ways: Lepiter brings a lot of new use-cases & people/attention that wouldn't have known about Gt, but the current level of effort that can be put into the project (feenk + community hours) is not yet big enough for it to be a more steady and easy to use platform.\ntatut — heute um 08:23 Uhr\nI've never been much into notebooks or other note taking systems, so I haven't really used lepiter that much. So my perspective is that of more traditional development and IDE.\nI found the Coder and the git interface to be really nice looking compared to pharo... but I find the gt ui is quite sluggish on my machine so pharo feels much snappier and I mostly use that\ntudor girba — heute um 10:40 Uhr\nCould you detail what specifically you find sluggish?\ntatut — heute um 10:48 Uhr\ntyping in the code editor, scrolling through a large lepiter page, generally many basic UI things\nthis is on an intel macbook\ntudor girba — heute um 11:15 Uhr\nThanks. Would it be possible to qualify what you mean by \"many basic UI things\"?\ntatut — heute um 11:28 Uhr\ntyping, scrolling, clicking, sometimes I just feel there is a noticeable delay before I see feedback... sorry I don't have a more detailed report, as I haven't used it so extensively.\ntudor girba — heute um 11:33 Uhr\nThank you.\ntudor girba — heute um 11:36 Uhr\nThanks for the feedback. Indeed, we are still in beta because we do not consider we got to a reasonable 1.0 version. I believe we are not far, but we are not there yet. It's remarkable and humbling how people put up with a fast changing environment and still stay with it. Thank you.\nTeMPOraL — heute um 14:38 Uhr\nI concur with @tatut here, the no 1. thing I notice about GT is that the UI overall noticeably (and distractingly) sluggish. As far as I could tell, the actual \"business operations\" are very fast, it's only the UI layer that goes slow. Like playing a game on 12 FPS slow.\nMore concrete examples:\n- I can type faster than the UI can pick up events; I sometimes have to wait to see what I did;\n- I move my mouse faster than UI events seem to fire, which means I need to go slow all the time; typical is that I move my mouse over and all the way past some UI element, before it does its \"on mouse over\" animation; half the time, it doesn't even register on-mouse-over!\n- Related to that, I spent an hour+ trying to break out of the debugger loop, because I've managed to delete and select text faster than the internals of the text widget updated; the result was a \"select text\" event with selection endpoint past the end of the text in the widget, causing an assertion in widget code - and getting out of the debugger caused that same event to be retransmitted ad infinitum, hence a debugger loop :/\n- Some other cases of me misclicking things based solely on the fact that I was moving faster than the UI was updating;\n- Also occasionally the debugger pops up with a failed assertion that was evidently caused by a UI handler race condition - some of those were, I believe, when I managed to switch inspector to a different object while widgets in it were still processing some on-hover or on-key-press event... \nAnd overall, it feels weird to have UI seemingly desynchronized in such a way: not in sync with user input, not in sync with itself. I understand it's an artifact of event-driven architecture, but I feel it should not work like this; I shouldn't be able to (seemingly) catch UI handlers mid-processing.\nFor context, I'm running this on Ubuntu 18.04, on a Ryzen 2700X 8-core CPU + 32GB RAM + decent videocard, so I strongly suspect it's not hardware.\nOh, and another unusual thing: if I hide a GT window and pop it back up, it doesn't re-render its content for me - I have to start clicking at the window with my mouse, and wait 1-10 seconds, before UI is redrawn again (usually it's closer to 1-3 seconds, but several times it was 10+; there's no obvious correlation to load / UI complexity inside GT that I could see) \nTeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\nSecondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\ntudor girba — heute um 15:12 Uhr\nThank you for the feedback. About whether GT is meant for working with complex software project: GT is built in GT :). It’s far from a trivial project. Also, there are systems that use it that are many times larger than GT. So, the intent is to make it work with it. Yes, it’s not as fast as we would want it, but that is because it takes time to nail performance on a highly flexible graphical stack (see one rendering tree). Over the past 18 months, performance improved somewhere around 15x, and it will continue to get better. Performance is one reason we still consider it a beta 🙂\nTeMPOraL — heute um 15:13 Uhr\nOn lack of facilities for self-help:\nI'd contrast that with Emacs, which calls itself a \"self-documenting editor\". Once you learn a few basic help commands there (\"help for function\", \"help for variable\", \"what happens when I press this key?\", \"apropos\", \"info manual\", \"jump to source\"), you can figure out most of the stuff about Emacs on your own, offline. The editor tries to make sure you're exposed to those crucial self-help commands early on. In contrast, GT so far:\n- Had me ask on Discord to get sent a link on Twitter that explained how you can list some shortcuts in a pretty  roundabout way; there's no such list available in GT;\n- Most of the code I end up inspecting doesn't carry documentation on classes or methods;\n- The GT Lepiter book covers a lot of things well, but it feels like 10% of what I'd expect (again, comparing to e.g. Emacs manual). For example, where it talks about types of Lepiter snippets, it doesn't even list all of the ones that come built-in. Etc.\n- There's lots of general GT knowledge hidden deep in various Lepiter pages in the GT book, that could've been useful if exposed in a \"how GT works\" chapter, or even linked to.\n- I haven't played with Driller (?) enough to tell, but I think there aren't enough ways to basically pop a debugger in the middle of GT doing something, so I can jump into the code I see running\nTeMPOraL — heute um 15:22 Uhr\n@tudor girba to be clear, I'm not complaining - GT is a great piece of work as it is;\ntudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \nTeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\ntudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\nTeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "date": 1653401951999,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1653402040887
    },
    {
      "type": "edit",
      "id": "3ffca2f7aca1b2ad",
      "item": {
        "type": "markdown",
        "id": "3ffca2f7aca1b2ad",
        "text": "tudor girba — 22.05.2022\nHello everyone. I'd be interested to learn a little about how you perceive our work. So:\n\nWhat do you find interesting about GT?\nWhat annoys you at GT?\nDid your understanding of the scope of GT change over time?\nbotwhytho — via [https://discord.com/channels/729445214812504107/978036401209770034/978491793937170452 discord]\n- Interesting: being able to quickly prototype certain types of computing tasks, mostly in the realm of personal computation. A much more consistent and clean UI than Pharo. Lepiter is a more recent addition but a game changer, note-taking where you can leverage full programmability is great, as well as prototyping while taking notes in the playground so that by the time I am coding up Classes + methods I have a very good idea of what I'm doing. More of an implementation detail, but leveraging modern third party libraries & languages (Rust) when having to go low-level, not having to reinvent wheels and delegating to other languages when appropriate.\n- Not so great: At the moment, the combination of feenk's priorities (implicit ones I've gathered as they don't have a roadmap which is good & bad) + the small size of the community around Gt makes it hard for the project to become a platform on top of which to extend and/or build additional tools/products is an easy thing to do as there are a good amount of breaking changes and little to none 'test harnesses' for downstream users to notice these without a lot of effort. Making decisions on how outside contributions would work has been stalled for a while, needing a lot of code to live as extensions in people's personal repos while making it hard for the community at large to take advantage of them.\n- Scope: I originally thought Gt would be a great platform to build upon but as time has passed not sure it's there yet. I originally thought of it only as a place for computation, but Lepiter in my mind added note-taking/KMS & Notebook (like Jupyter) use-cases.  So as time has passed, the scope in my mind has both increased & decreased in different ways: Lepiter brings a lot of new use-cases & people/attention that wouldn't have known about Gt, but the current level of effort that can be put into the project (feenk + community hours) is not yet big enough for it to be a more steady and easy to use platform.\n\n"
      },
      "date": 1653402120310
    },
    {
      "type": "add",
      "id": "84cf9a86827c131c",
      "item": {
        "type": "markdown",
        "id": "84cf9a86827c131c",
        "text": "tatut — heute um 08:23 Uhr\nI've never been much into notebooks or other note taking systems, so I haven't really used lepiter that much. So my perspective is that of more traditional development and IDE.\nI found the Coder and the git interface to be really nice looking compared to pharo... but I find the gt ui is quite sluggish on my machine so pharo feels much snappier and I mostly use that\ntudor girba — heute um 10:40 Uhr\nCould you detail what specifically you find sluggish?\ntatut — heute um 10:48 Uhr\ntyping in the code editor, scrolling through a large lepiter page, generally many basic UI things\nthis is on an intel macbook\ntudor girba — heute um 11:15 Uhr\nThanks. Would it be possible to qualify what you mean by \"many basic UI things\"?\ntatut — heute um 11:28 Uhr\ntyping, scrolling, clicking, sometimes I just feel there is a noticeable delay before I see feedback... sorry I don't have a more detailed report, as I haven't used it so extensively.\ntudor girba — heute um 11:33 Uhr\nThank you.\ntudor girba — heute um 11:36 Uhr\nThanks for the feedback. Indeed, we are still in beta because we do not consider we got to a reasonable 1.0 version. I believe we are not far, but we are not there yet. It's remarkable and humbling how people put up with a fast changing environment and still stay with it. Thank you.\nTeMPOraL — heute um 14:38 Uhr\nI concur with @tatut here, the no 1. thing I notice about GT is that the UI overall noticeably (and distractingly) sluggish. As far as I could tell, the actual \"business operations\" are very fast, it's only the UI layer that goes slow. Like playing a game on 12 FPS slow.\nMore concrete examples:\n- I can type faster than the UI can pick up events; I sometimes have to wait to see what I did;\n- I move my mouse faster than UI events seem to fire, which means I need to go slow all the time; typical is that I move my mouse over and all the way past some UI element, before it does its \"on mouse over\" animation; half the time, it doesn't even register on-mouse-over!\n- Related to that, I spent an hour+ trying to break out of the debugger loop, because I've managed to delete and select text faster than the internals of the text widget updated; the result was a \"select text\" event with selection endpoint past the end of the text in the widget, causing an assertion in widget code - and getting out of the debugger caused that same event to be retransmitted ad infinitum, hence a debugger loop :/\n- Some other cases of me misclicking things based solely on the fact that I was moving faster than the UI was updating;\n- Also occasionally the debugger pops up with a failed assertion that was evidently caused by a UI handler race condition - some of those were, I believe, when I managed to switch inspector to a different object while widgets in it were still processing some on-hover or on-key-press event... \nAnd overall, it feels weird to have UI seemingly desynchronized in such a way: not in sync with user input, not in sync with itself. I understand it's an artifact of event-driven architecture, but I feel it should not work like this; I shouldn't be able to (seemingly) catch UI handlers mid-processing.\nFor context, I'm running this on Ubuntu 18.04, on a Ryzen 2700X 8-core CPU + 32GB RAM + decent videocard, so I strongly suspect it's not hardware.\nOh, and another unusual thing: if I hide a GT window and pop it back up, it doesn't re-render its content for me - I have to start clicking at the window with my mouse, and wait 1-10 seconds, before UI is redrawn again (usually it's closer to 1-3 seconds, but several times it was 10+; there's no obvious correlation to load / UI complexity inside GT that I could see) \nTeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\nSecondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\ntudor girba — heute um 15:12 Uhr\nThank you for the feedback. About whether GT is meant for working with complex software project: GT is built in GT :). It’s far from a trivial project. Also, there are systems that use it that are many times larger than GT. So, the intent is to make it work with it. Yes, it’s not as fast as we would want it, but that is because it takes time to nail performance on a highly flexible graphical stack (see one rendering tree). Over the past 18 months, performance improved somewhere around 15x, and it will continue to get better. Performance is one reason we still consider it a beta 🙂\nTeMPOraL — heute um 15:13 Uhr\nOn lack of facilities for self-help:\nI'd contrast that with Emacs, which calls itself a \"self-documenting editor\". Once you learn a few basic help commands there (\"help for function\", \"help for variable\", \"what happens when I press this key?\", \"apropos\", \"info manual\", \"jump to source\"), you can figure out most of the stuff about Emacs on your own, offline. The editor tries to make sure you're exposed to those crucial self-help commands early on. In contrast, GT so far:\n- Had me ask on Discord to get sent a link on Twitter that explained how you can list some shortcuts in a pretty  roundabout way; there's no such list available in GT;\n- Most of the code I end up inspecting doesn't carry documentation on classes or methods;\n- The GT Lepiter book covers a lot of things well, but it feels like 10% of what I'd expect (again, comparing to e.g. Emacs manual). For example, where it talks about types of Lepiter snippets, it doesn't even list all of the ones that come built-in. Etc.\n- There's lots of general GT knowledge hidden deep in various Lepiter pages in the GT book, that could've been useful if exposed in a \"how GT works\" chapter, or even linked to.\n- I haven't played with Driller (?) enough to tell, but I think there aren't enough ways to basically pop a debugger in the middle of GT doing something, so I can jump into the code I see running\nTeMPOraL — heute um 15:22 Uhr\n@tudor girba to be clear, I'm not complaining - GT is a great piece of work as it is;\ntudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \nTeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\ntudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\nTeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "after": "3ffca2f7aca1b2ad",
      "date": 1653402125779
    },
    {
      "type": "edit",
      "id": "84cf9a86827c131c",
      "item": {
        "type": "markdown",
        "id": "84cf9a86827c131c",
        "text": "tatut — heute um 08:23 Uhr\nI've never been much into notebooks or other note taking systems, so I haven't really used lepiter that much. So my perspective is that of more traditional development and IDE.\nI found the Coder and the git interface to be really nice looking compared to pharo... but I find the gt ui is quite sluggish on my machine so pharo feels much snappier and I mostly use that\n\n"
      },
      "date": 1653402219461
    },
    {
      "type": "add",
      "id": "053cd3602d71232e",
      "item": {
        "type": "markdown",
        "id": "053cd3602d71232e",
        "text": "tudor girba — heute um 10:40 Uhr\nCould you detail what specifically you find sluggish?\n\n"
      },
      "after": "84cf9a86827c131c",
      "date": 1653402222422
    },
    {
      "type": "add",
      "id": "a887c5198d00c7f6",
      "item": {
        "type": "markdown",
        "id": "a887c5198d00c7f6",
        "text": "tatut — heute um 10:48 Uhr\ntyping in the code editor, scrolling through a large lepiter page, generally many basic UI things\nthis is on an intel macbook\n\n"
      },
      "after": "053cd3602d71232e",
      "date": 1653402225699
    },
    {
      "type": "add",
      "id": "af77e50db7e62401",
      "item": {
        "type": "markdown",
        "id": "af77e50db7e62401",
        "text": "tudor girba — heute um 11:15 Uhr\nThanks. Would it be possible to qualify what you mean by \"many basic UI things\"?\n\n"
      },
      "after": "a887c5198d00c7f6",
      "date": 1653402228006
    },
    {
      "type": "add",
      "id": "fa5417814e8b1f71",
      "item": {
        "type": "markdown",
        "id": "fa5417814e8b1f71",
        "text": "tatut — heute um 11:28 Uhr\ntyping, scrolling, clicking, sometimes I just feel there is a noticeable delay before I see feedback... sorry I don't have a more detailed report, as I haven't used it so extensively.\n\n"
      },
      "after": "af77e50db7e62401",
      "date": 1653402232150
    },
    {
      "type": "add",
      "id": "588800b6eb58fb1e",
      "item": {
        "type": "markdown",
        "id": "588800b6eb58fb1e",
        "text": "tudor girba — heute um 11:33 Uhr\nThank you.\n\n"
      },
      "after": "fa5417814e8b1f71",
      "date": 1653402234790
    },
    {
      "type": "add",
      "id": "297220abce02071a",
      "item": {
        "type": "markdown",
        "id": "297220abce02071a",
        "text": "tudor girba — heute um 11:36 Uhr\nThanks for the feedback. Indeed, we are still in beta because we do not consider we got to a reasonable 1.0 version. I believe we are not far, but we are not there yet. It's remarkable and humbling how people put up with a fast changing environment and still stay with it. Thank you.\n\n"
      },
      "after": "588800b6eb58fb1e",
      "date": 1653402240369
    },
    {
      "type": "add",
      "id": "4cf9eaa26144b127",
      "item": {
        "type": "markdown",
        "id": "4cf9eaa26144b127",
        "text": "TeMPOraL — heute um 14:38 Uhr\nI concur with @tatut here, the no 1. thing I notice about GT is that the UI overall noticeably (and distractingly) sluggish. As far as I could tell, the actual \"business operations\" are very fast, it's only the UI layer that goes slow. Like playing a game on 12 FPS slow.\n"
      },
      "after": "297220abce02071a",
      "date": 1653402255251
    },
    {
      "type": "add",
      "id": "d02c8acda6ca8a75",
      "item": {
        "type": "markdown",
        "id": "d02c8acda6ca8a75",
        "text": "More concrete examples:\n- I can type faster than the UI can pick up events; I sometimes have to wait to see what I did;\n- I move my mouse faster than UI events seem to fire, which means I need to go slow all the time; typical is that I move my mouse over and all the way past some UI element, before it does its \"on mouse over\" animation; half the time, it doesn't even register on-mouse-over!\n- Related to that, I spent an hour+ trying to break out of the debugger loop, because I've managed to delete and select text faster than the internals of the text widget updated; the result was a \"select text\" event with selection endpoint past the end of the text in the widget, causing an assertion in widget code - and getting out of the debugger caused that same event to be retransmitted ad infinitum, hence a debugger loop :/\n- Some other cases of me misclicking things based solely on the fact that I was moving faster than the UI was updating;\n- Also occasionally the debugger pops up with a failed assertion that was evidently caused by a UI handler race condition - some of those were, I believe, when I managed to switch inspector to a different object while widgets in it were still processing some on-hover or on-key-press event... \nAnd overall, it feels weird to have UI seemingly desynchronized in such a way: not in sync with user input, not in sync with itself. I understand it's an artifact of event-driven architecture, but I feel it should not work like this; I shouldn't be able to (seemingly) catch UI handlers mid-processing.\n"
      },
      "after": "4cf9eaa26144b127",
      "date": 1653402278754
    },
    {
      "type": "add",
      "id": "9469cbbfdcf45b07",
      "item": {
        "type": "markdown",
        "id": "9469cbbfdcf45b07",
        "text": "For context, I'm running this on Ubuntu 18.04, on a Ryzen 2700X 8-core CPU + 32GB RAM + decent videocard, so I strongly suspect it's not hardware.\nOh, and another unusual thing: if I hide a GT window and pop it back up, it doesn't re-render its content for me - I have to start clicking at the window with my mouse, and wait 1-10 seconds, before UI is redrawn again (usually it's closer to 1-3 seconds, but several times it was 10+; there's no obvious correlation to load / UI complexity inside GT that I could see) \n"
      },
      "after": "d02c8acda6ca8a75",
      "date": 1653402283300
    },
    {
      "type": "add",
      "id": "7d46a6afb1018719",
      "item": {
        "type": "markdown",
        "id": "7d46a6afb1018719",
        "text": "TeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\n"
      },
      "after": "9469cbbfdcf45b07",
      "date": 1653402327858
    },
    {
      "type": "add",
      "id": "f669f330415d046f",
      "item": {
        "type": "markdown",
        "id": "f669f330415d046f",
        "text": "Secondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\ntudor girba — heute um 15:12 Uhr\nThank you for the feedback. About whether GT is meant for working with complex software project: GT is built in GT :). It’s far from a trivial project. Also, there are systems that use it that are many times larger than GT. So, the intent is to make it work with it. Yes, it’s not as fast as we would want it, but that is because it takes time to nail performance on a highly flexible graphical stack (see one rendering tree). Over the past 18 months, performance improved somewhere around 15x, and it will continue to get better. Performance is one reason we still consider it a beta 🙂\nTeMPOraL — heute um 15:13 Uhr\nOn lack of facilities for self-help:\nI'd contrast that with Emacs, which calls itself a \"self-documenting editor\". Once you learn a few basic help commands there (\"help for function\", \"help for variable\", \"what happens when I press this key?\", \"apropos\", \"info manual\", \"jump to source\"), you can figure out most of the stuff about Emacs on your own, offline. The editor tries to make sure you're exposed to those crucial self-help commands early on. In contrast, GT so far:\n- Had me ask on Discord to get sent a link on Twitter that explained how you can list some shortcuts in a pretty  roundabout way; there's no such list available in GT;\n- Most of the code I end up inspecting doesn't carry documentation on classes or methods;\n- The GT Lepiter book covers a lot of things well, but it feels like 10% of what I'd expect (again, comparing to e.g. Emacs manual). For example, where it talks about types of Lepiter snippets, it doesn't even list all of the ones that come built-in. Etc.\n- There's lots of general GT knowledge hidden deep in various Lepiter pages in the GT book, that could've been useful if exposed in a \"how GT works\" chapter, or even linked to.\n- I haven't played with Driller (?) enough to tell, but I think there aren't enough ways to basically pop a debugger in the middle of GT doing something, so I can jump into the code I see running\nTeMPOraL — heute um 15:22 Uhr\n@tudor girba to be clear, I'm not complaining - GT is a great piece of work as it is;\ntudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \nTeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\ntudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\nTeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "after": "7d46a6afb1018719",
      "date": 1653402336389
    },
    {
      "type": "remove",
      "id": "f669f330415d046f",
      "date": 1653402356613
    },
    {
      "type": "edit",
      "id": "7d46a6afb1018719",
      "item": {
        "type": "markdown",
        "id": "7d46a6afb1018719",
        "text": "TeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\n\nSecondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\ntudor girba — heute um 15:12 Uhr\nThank you for the feedback. About whether GT is meant for working with complex software project: GT is built in GT :). It’s far from a trivial project. Also, there are systems that use it that are many times larger than GT. So, the intent is to make it work with it. Yes, it’s not as fast as we would want it, but that is because it takes time to nail performance on a highly flexible graphical stack (see one rendering tree). Over the past 18 months, performance improved somewhere around 15x, and it will continue to get better. Performance is one reason we still consider it a beta 🙂\nTeMPOraL — heute um 15:13 Uhr\nOn lack of facilities for self-help:\nI'd contrast that with Emacs, which calls itself a \"self-documenting editor\". Once you learn a few basic help commands there (\"help for function\", \"help for variable\", \"what happens when I press this key?\", \"apropos\", \"info manual\", \"jump to source\"), you can figure out most of the stuff about Emacs on your own, offline. The editor tries to make sure you're exposed to those crucial self-help commands early on. In contrast, GT so far:\n- Had me ask on Discord to get sent a link on Twitter that explained how you can list some shortcuts in a pretty  roundabout way; there's no such list available in GT;\n- Most of the code I end up inspecting doesn't carry documentation on classes or methods;\n- The GT Lepiter book covers a lot of things well, but it feels like 10% of what I'd expect (again, comparing to e.g. Emacs manual). For example, where it talks about types of Lepiter snippets, it doesn't even list all of the ones that come built-in. Etc.\n- There's lots of general GT knowledge hidden deep in various Lepiter pages in the GT book, that could've been useful if exposed in a \"how GT works\" chapter, or even linked to.\n- I haven't played with Driller (?) enough to tell, but I think there aren't enough ways to basically pop a debugger in the middle of GT doing something, so I can jump into the code I see running\nTeMPOraL — heute um 15:22 Uhr\n@tudor girba to be clear, I'm not complaining - GT is a great piece of work as it is;\ntudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \nTeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\ntudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\nTeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "date": 1653402359225
    },
    {
      "type": "edit",
      "id": "7d46a6afb1018719",
      "item": {
        "type": "markdown",
        "id": "7d46a6afb1018719",
        "text": "TeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\n\nSecondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\n\n"
      },
      "date": 1653402384190
    },
    {
      "type": "add",
      "id": "57bf27e1a2de3058",
      "item": {
        "type": "markdown",
        "id": "57bf27e1a2de3058",
        "text": "tudor girba — heute um 15:12 Uhr\nThank you for the feedback. About whether GT is meant for working with complex software project: GT is built in GT :). It’s far from a trivial project. Also, there are systems that use it that are many times larger than GT. So, the intent is to make it work with it. Yes, it’s not as fast as we would want it, but that is because it takes time to nail performance on a highly flexible graphical stack (see one rendering tree). Over the past 18 months, performance improved somewhere around 15x, and it will continue to get better. Performance is one reason we still consider it a beta 🙂\n\n"
      },
      "after": "7d46a6afb1018719",
      "date": 1653402393761
    },
    {
      "type": "add",
      "id": "ffeb4c3a98bcb097",
      "item": {
        "type": "markdown",
        "id": "ffeb4c3a98bcb097",
        "text": "TeMPOraL — heute um 15:13 Uhr\nOn lack of facilities for self-help:\nI'd contrast that with Emacs, which calls itself a \"self-documenting editor\". Once you learn a few basic help commands there (\"help for function\", \"help for variable\", \"what happens when I press this key?\", \"apropos\", \"info manual\", \"jump to source\"), you can figure out most of the stuff about Emacs on your own, offline. The editor tries to make sure you're exposed to those crucial self-help commands early on. In contrast, GT so far:\n- Had me ask on Discord to get sent a link on Twitter that explained how you can list some shortcuts in a pretty  roundabout way; there's no such list available in GT;\n- Most of the code I end up inspecting doesn't carry documentation on classes or methods;\n- The GT Lepiter book covers a lot of things well, but it feels like 10% of what I'd expect (again, comparing to e.g. Emacs manual). For example, where it talks about types of Lepiter snippets, it doesn't even list all of the ones that come built-in. Etc.\n- There's lots of general GT knowledge hidden deep in various Lepiter pages in the GT book, that could've been useful if exposed in a \"how GT works\" chapter, or even linked to.\n- I haven't played with Driller (?) enough to tell, but I think there aren't enough ways to basically pop a debugger in the middle of GT doing something, so I can jump into the code I see running\n\n"
      },
      "after": "57bf27e1a2de3058",
      "date": 1653402400326
    },
    {
      "type": "add",
      "id": "01a966e3b6fe19e7",
      "item": {
        "type": "markdown",
        "id": "01a966e3b6fe19e7",
        "text": "TeMPOraL — heute um 15:22 Uhr\n@tudor girba to be clear, I'm not complaining - GT is a great piece of work as it is;\n\n"
      },
      "after": "ffeb4c3a98bcb097",
      "date": 1653402405017
    },
    {
      "type": "add",
      "id": "64cfe7dca0030c2f",
      "item": {
        "type": "markdown",
        "id": "64cfe7dca0030c2f",
        "text": "tudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \nTeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\ntudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\nTeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "after": "01a966e3b6fe19e7",
      "date": 1653402406663
    },
    {
      "type": "edit",
      "id": "64cfe7dca0030c2f",
      "item": {
        "type": "markdown",
        "id": "64cfe7dca0030c2f",
        "text": "tudor girba — heute um 15:22 Uhr\nThanks. Most things you mention seem to relate to how you find information. For example, the Driller is not exposed indeed in the UI. However, once you do know it exists, it should offer interesting entry points addressing what you list. If it does not, I would be interested to learn what is not covered out of the box.\n\nI am not sure what you mean by not being able to stop GT. Do you mean interrupting the current execution? I’d so, please try Alt+.\ntudor girba — heute um 15:24 Uhr\nI am not defending either. I am just explaining why there can appear to be performance issues :). Making one rendering tree work is hard, but I am quite confident we are past the uncertainty point. Also, the UI concept is rather demanding. \n\n"
      },
      "date": 1653402422829
    },
    {
      "type": "add",
      "id": "7f9937036d6ad684",
      "item": {
        "type": "markdown",
        "id": "7f9937036d6ad684",
        "text": "TeMPOraL — heute um 15:25 Uhr\nI suppose when I say there isn't enough of something, it's likely I just don't know it exists, which may be because it's not discoverable enough (or at all). Anyway, I tried Alt+. (Ctrl+. on my machine, it seems), and it popped up a debugger that's... frozen.\n\n"
      },
      "after": "64cfe7dca0030c2f",
      "date": 1653402427683
    },
    {
      "type": "add",
      "id": "da5221738d64b059",
      "item": {
        "type": "markdown",
        "id": "da5221738d64b059",
        "text": "tudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\nTeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "after": "7f9937036d6ad684",
      "date": 1653402428390
    },
    {
      "type": "edit",
      "id": "da5221738d64b059",
      "item": {
        "type": "markdown",
        "id": "da5221738d64b059",
        "text": "tudor girba — heute um 15:25 Uhr\nThat’s a problem. Could you reproduce it?\n\n"
      },
      "date": 1653402434440
    },
    {
      "type": "add",
      "id": "aedab9efd92160a5",
      "item": {
        "type": "markdown",
        "id": "aedab9efd92160a5",
        "text": "TeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\ntudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\nTeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\nBild\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\nTeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\nTeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "after": "da5221738d64b059",
      "date": 1653402434897
    },
    {
      "type": "edit",
      "id": "aedab9efd92160a5",
      "item": {
        "type": "markdown",
        "id": "aedab9efd92160a5",
        "text": "TeMPOraL — heute um 15:26 Uhr\nI'll try, give me a few minutes.\n\n"
      },
      "date": 1653402440614
    },
    {
      "type": "add",
      "id": "b2b3f909caf1f56c",
      "item": {
        "type": "markdown",
        "id": "b2b3f909caf1f56c",
        "text": "tudor girba — heute um 15:26 Uhr\nAlso, if you are at it, could you try spawning a tab in a new window and see if it freezes, too?\n\n"
      },
      "after": "aedab9efd92160a5",
      "date": 1653402442016
    },
    {
      "type": "add",
      "id": "92d61f7386da62a5",
      "item": {
        "type": "markdown",
        "id": "92d61f7386da62a5",
        "text": "TeMPOraL — heute um 15:35 Uhr\nOk, I failed to reproduce it now, but I captured a debugger view that shows (IIRC) the same code that it did when it froze earlier:\nBild\nOk, I pressed \"Play\" twice on that debugger, and it froze the whole thing (i.e. the debugger and two other GT windows).\n\nBild\n\nBy \"froze\", I mean no redraws of any kind happening.\nBut then, pressing Ctrl+. unblocked it.\nI've made repeated attempts now; it seems pressing \"Play\" on that particular debugging capture is a reliable way to freeze GT rendering, but Ctrl+. always seems to unfreeze it again.\n\n"
      },
      "after": "b2b3f909caf1f56c",
      "date": 1653402451227
    },
    {
      "type": "add",
      "id": "3255bba081aa57a9",
      "item": {
        "type": "markdown",
        "id": "3255bba081aa57a9",
        "text": "TeMPOraL — heute um 15:46 Uhr\nRE that, it seems Ctrl+. does the thing I meant by \"interrupting the current execution\", except well... it doesn't seem as useful as I hoped. Emacs equivalent here is executing toggle-debug-on-quit , then the \"quit/cancel\" command (Ctrl+g) will interrupt the event loop and land you straight in the debugger. The difference is, Emacs is single-threaded, so you almost always end up with the thing Emacs was doing right there on the call stack. It's a fast way to diagnose or discover stuff - Ctrl+g in the middle of an operation you're interested in, and look around the call stack.\nHere, the equivalent would (probably?) be spawning the debugger frame, and freezing every other thread in GT for the duration. Or not. Not sure how to make this work. Emacs does its trick by launching a second event loop on top of the first one, which means the thing you're debugging is frozen on call stack, but otherwise the whole editor works. Quitting the debugger quits the second event loop, and resumes/restarts the underlying one. (And this can stack recursively - you can debug a debugger debugging a debugger.)\n\n"
      },
      "after": "92d61f7386da62a5",
      "date": 1653402458085
    },
    {
      "type": "add",
      "id": "67f31d5b9cb39c4b",
      "item": {
        "type": "markdown",
        "id": "67f31d5b9cb39c4b",
        "text": "TeMPOraL — heute um 15:59 Uhr\n@tudor girba I also wanted to mention some cases where the UI design feels limiting to me. I see GT adopting a design pattern of opening \"cards\" in a horizontally laid out stack. There's no possibility to branch out (that I know of). So e.g. I can inspect object A, drill into its slot value a1, and then into that value's method m. If I want to check out slot value a2, I need to first quit my view of m. What I'd like to do is being able to simultaneously see A, a1, a2, m, and superclass of a2's class. All the objects in my runtime form a graph, and exploring a graph with an interface showing only a single path is very limiting. \nAlso (and perhaps I'm again missing some trick here), I'm surprised so little things are editable in the inspector and the debugger. I expected to be albe to e.g. double-click on most of the values in \"Raw\" view of an object, and edit the value inline, like I can do with most debuggers elsewhere. Is there a design / architectural reason preventing that here?\n"
      },
      "after": "3255bba081aa57a9",
      "date": 1653402465269
    },
    {
      "type": "edit",
      "id": "3ffca2f7aca1b2ad",
      "item": {
        "type": "markdown",
        "id": "3ffca2f7aca1b2ad",
        "text": "# Gt, Some Pros, Cons & Scope\n"
      },
      "date": 1653402537145
    },
    {
      "type": "add",
      "id": "010fdcf6308ebed0",
      "item": {
        "type": "markdown",
        "id": "010fdcf6308ebed0",
        "text": "tudor girba — 2022-05-22\nHello everyone. I'd be interested to learn a little about how you perceive our work. So:\n\nWhat do you find interesting about GT?\nWhat annoys you at GT?\nDid your understanding of the scope of GT change over time?\nbotwhytho — via [https://discord.com/channels/729445214812504107/978036401209770034/978491793937170452 discord]\n- Interesting: being able to quickly prototype certain types of computing tasks, mostly in the realm of personal computation. A much more consistent and clean UI than Pharo. Lepiter is a more recent addition but a game changer, note-taking where you can leverage full programmability is great, as well as prototyping while taking notes in the playground so that by the time I am coding up Classes + methods I have a very good idea of what I'm doing. More of an implementation detail, but leveraging modern third party libraries & languages (Rust) when having to go low-level, not having to reinvent wheels and delegating to other languages when appropriate.\n- Not so great: At the moment, the combination of feenk's priorities (implicit ones I've gathered as they don't have a roadmap which is good & bad) + the small size of the community around Gt makes it hard for the project to become a platform on top of which to extend and/or build additional tools/products is an easy thing to do as there are a good amount of breaking changes and little to none 'test harnesses' for downstream users to notice these without a lot of effort. Making decisions on how outside contributions would work has been stalled for a while, needing a lot of code to live as extensions in people's personal repos while making it hard for the community at large to take advantage of them.\n- Scope: I originally thought Gt would be a great platform to build upon but as time has passed not sure it's there yet. I originally thought of it only as a place for computation, but Lepiter in my mind added note-taking/KMS & Notebook (like Jupyter) use-cases.  So as time has passed, the scope in my mind has both increased & decreased in different ways: Lepiter brings a lot of new use-cases & people/attention that wouldn't have known about Gt, but the current level of effort that can be put into the project (feenk + community hours) is not yet big enough for it to be a more steady and easy to use platform.\n\n"
      },
      "after": "3ffca2f7aca1b2ad",
      "date": 1653402537728
    },
    {
      "type": "edit",
      "id": "010fdcf6308ebed0",
      "item": {
        "type": "markdown",
        "id": "010fdcf6308ebed0",
        "text": "tudor girba — 2022-05-22\nHello everyone. I'd be interested to learn a little about how you perceive our work. So:\n\nWhat do you find interesting about GT?\nWhat annoys you at GT?\nDid your understanding of the scope of GT change over time?\n"
      },
      "date": 1653402551181
    },
    {
      "type": "add",
      "id": "0812cb647073829c",
      "item": {
        "type": "markdown",
        "id": "0812cb647073829c",
        "text": "botwhytho — via [https://discord.com/channels/729445214812504107/978036401209770034/978491793937170452 discord]\n- Interesting: being able to quickly prototype certain types of computing tasks, mostly in the realm of personal computation. A much more consistent and clean UI than Pharo. Lepiter is a more recent addition but a game changer, note-taking where you can leverage full programmability is great, as well as prototyping while taking notes in the playground so that by the time I am coding up Classes + methods I have a very good idea of what I'm doing. More of an implementation detail, but leveraging modern third party libraries & languages (Rust) when having to go low-level, not having to reinvent wheels and delegating to other languages when appropriate.\n- Not so great: At the moment, the combination of feenk's priorities (implicit ones I've gathered as they don't have a roadmap which is good & bad) + the small size of the community around Gt makes it hard for the project to become a platform on top of which to extend and/or build additional tools/products is an easy thing to do as there are a good amount of breaking changes and little to none 'test harnesses' for downstream users to notice these without a lot of effort. Making decisions on how outside contributions would work has been stalled for a while, needing a lot of code to live as extensions in people's personal repos while making it hard for the community at large to take advantage of them.\n- Scope: I originally thought Gt would be a great platform to build upon but as time has passed not sure it's there yet. I originally thought of it only as a place for computation, but Lepiter in my mind added note-taking/KMS & Notebook (like Jupyter) use-cases.  So as time has passed, the scope in my mind has both increased & decreased in different ways: Lepiter brings a lot of new use-cases & people/attention that wouldn't have known about Gt, but the current level of effort that can be put into the project (feenk + community hours) is not yet big enough for it to be a more steady and easy to use platform.\n\n"
      },
      "after": "010fdcf6308ebed0",
      "date": 1653402551814
    },
    {
      "type": "edit",
      "id": "010fdcf6308ebed0",
      "item": {
        "type": "markdown",
        "id": "010fdcf6308ebed0",
        "text": "tudor girba — 2022-05-22\nHello everyone. I'd be interested to learn a little about how you perceive our work. So:\n\n* What do you find interesting about GT?\n* What annoys you at GT?\n* Did your understanding of the scope of GT change over time?\n"
      },
      "date": 1653402566548
    },
    {
      "type": "edit",
      "id": "0812cb647073829c",
      "item": {
        "type": "markdown",
        "id": "0812cb647073829c",
        "text": "botwhytho — via [https://discord.com/channels/729445214812504107/978036401209770034/978491793937170452 discord]\n\n- Interesting: being able to quickly prototype certain types of computing tasks, mostly in the realm of personal computation. A much more consistent and clean UI than Pharo. Lepiter is a more recent addition but a game changer, note-taking where you can leverage full programmability is great, as well as prototyping while taking notes in the playground so that by the time I am coding up Classes + methods I have a very good idea of what I'm doing. More of an implementation detail, but leveraging modern third party libraries & languages (Rust) when having to go low-level, not having to reinvent wheels and delegating to other languages when appropriate.\n\n- Not so great: At the moment, the combination of feenk's priorities (implicit ones I've gathered as they don't have a roadmap which is good & bad) + the small size of the community around Gt makes it hard for the project to become a platform on top of which to extend and/or build additional tools/products is an easy thing to do as there are a good amount of breaking changes and little to none 'test harnesses' for downstream users to notice these without a lot of effort. Making decisions on how outside contributions would work has been stalled for a while, needing a lot of code to live as extensions in people's personal repos while making it hard for the community at large to take advantage of them.\n\n- Scope: I originally thought Gt would be a great platform to build upon but as time has passed not sure it's there yet. I originally thought of it only as a place for computation, but Lepiter in my mind added note-taking/KMS & Notebook (like Jupyter) use-cases.  So as time has passed, the scope in my mind has both increased & decreased in different ways: Lepiter brings a lot of new use-cases & people/attention that wouldn't have known about Gt, but the current level of effort that can be put into the project (feenk + community hours) is not yet big enough for it to be a more steady and easy to use platform.\n"
      },
      "date": 1653402607734
    },
    {
      "type": "edit",
      "id": "84cf9a86827c131c",
      "item": {
        "type": "markdown",
        "id": "84cf9a86827c131c",
        "text": "tatut — heute um 08:23 Uhr\nI've never been much into notebooks or other note taking systems, so I haven't really used lepiter that much. So my perspective is that of more traditional development and IDE.\n\nI found the Coder and the git interface to be really nice looking compared to pharo... but I find the gt ui is quite sluggish on my machine so pharo feels much snappier and I mostly use that\n\n"
      },
      "date": 1653402979768
    },
    {
      "type": "edit",
      "id": "9469cbbfdcf45b07",
      "item": {
        "type": "markdown",
        "id": "9469cbbfdcf45b07",
        "text": "For context, I'm running this on Ubuntu 18.04, on a Ryzen 2700X 8-core CPU + 32GB RAM + decent videocard, so I strongly suspect it's not hardware.\n"
      },
      "date": 1653403129918
    },
    {
      "type": "add",
      "id": "6a8fc1fdb819769a",
      "item": {
        "type": "markdown",
        "id": "6a8fc1fdb819769a",
        "text": "Oh, and another unusual thing: if I hide a GT window and pop it back up, it doesn't re-render its content for me - I have to start clicking at the window with my mouse, and wait 1-10 seconds, before UI is redrawn again (usually it's closer to 1-3 seconds, but several times it was 10+; there's no obvious correlation to load / UI complexity inside GT that I could see) \n"
      },
      "after": "9469cbbfdcf45b07",
      "date": 1653403131013
    },
    {
      "type": "edit",
      "id": "7d46a6afb1018719",
      "item": {
        "type": "markdown",
        "id": "7d46a6afb1018719",
        "text": "TeMPOraL — heute um 15:06 Uhr\n@tudor girba , RE your original questions:\n1. What drew me to GT is what you called \"moldable development\". I'm interested primarily in creating new applications (games, tools, services) and working on existing codebases. For a while, I've been feeling the tools we have for coding are too low-level (as is the notion of plaintext, tree-structured code). I'm thus very interested in an environment that lets me add higher-level \"views\" of the codebase, through which I could not only analyze the code, but also efficiently create and modify it.\nSecondarily: I'm a Lisp  guy at heart, but I've heard so many nice things about Smalltalk that I thought it's a perfect opportunity to finally learn some :).\n\n2. What annoys me is, first and foremost, aforementioned UI performance issues. The second thing would be there's not enough facilities to help me orient myself. I'll expand on this below. Thirdly, the UI feels a bit too low-density most of the time. I guess I could set a lower \"zoom factor\", but with the UI performance issues, which may or may not be proportional to number of widgets in viewport, I hesitate to try...\n\n3. I suppose, though not in a way I like. I feel that GT is aiming for a different use case than I initially expected - trying to be more of a computational notebook and experimentation tool, rather than a tool to support working on a complex software project.\n\n"
      },
      "date": 1653403186646
    },
    {
      "item": {
        "type": "factory",
        "id": "1fa96108af0c399e"
      },
      "id": "1fa96108af0c399e",
      "type": "add",
      "after": "67f31d5b9cb39c4b",
      "date": 1653405803460
    },
    {
      "type": "edit",
      "id": "1fa96108af0c399e",
      "item": {
        "type": "pagefold",
        "id": "1fa96108af0c399e",
        "text": "~"
      },
      "date": 1653405806981
    },
    {
      "item": {
        "type": "factory",
        "id": "24a5079e2157c866"
      },
      "id": "24a5079e2157c866",
      "type": "add",
      "after": "1fa96108af0c399e",
      "date": 1653405808974
    },
    {
      "type": "edit",
      "id": "24a5079e2157c866",
      "item": {
        "type": "paragraph",
        "id": "24a5079e2157c866",
        "text": "[[Hest]]"
      },
      "date": 1653405814659
    },
    {
      "type": "edit",
      "id": "24a5079e2157c866",
      "item": {
        "type": "paragraph",
        "id": "24a5079e2157c866",
        "text": "[[Hest]] – [https://ivanish.s3.amazonaws.com/hest/15.mp3 mp3]"
      },
      "date": 1653405839141
    },
    {
      "item": {
        "type": "factory",
        "id": "c69af1e8fc67ae07"
      },
      "id": "c69af1e8fc67ae07",
      "type": "add",
      "after": "24a5079e2157c866",
      "date": 1653405856552
    },
    {
      "type": "edit",
      "id": "c69af1e8fc67ae07",
      "item": {
        "type": "paragraph",
        "id": "c69af1e8fc67ae07",
        "text": "– [https://ivanish.ca/hest-time-travel/ page]"
      },
      "date": 1653405865071
    },
    {
      "item": {
        "type": "factory",
        "id": "f9349dedc0ff2969"
      },
      "id": "f9349dedc0ff2969",
      "type": "add",
      "after": "c69af1e8fc67ae07",
      "date": 1653405983092
    },
    {
      "type": "edit",
      "id": "f9349dedc0ff2969",
      "item": {
        "type": "paragraph",
        "id": "f9349dedc0ff2969",
        "text": "[[Time Travel]]"
      },
      "date": 1653405988136
    },
    {
      "item": {
        "type": "factory",
        "id": "daa1410c28d46191"
      },
      "id": "daa1410c28d46191",
      "type": "add",
      "after": "f9349dedc0ff2969",
      "date": 1653406000159
    },
    {
      "type": "edit",
      "id": "daa1410c28d46191",
      "item": {
        "type": "paragraph",
        "id": "daa1410c28d46191",
        "text": "> "
      },
      "date": 1653406002365
    },
    {
      "type": "edit",
      "id": "daa1410c28d46191",
      "item": {
        "type": "paragraph",
        "id": "daa1410c28d46191",
        "text": "> You choose how time progresses. The passage of time is just an attribute of the objects in Hest, so you can have different parts of your sim running at different rates. Generally, core functions, libraries, and your main simulation logic run as fast as possible. But you probably also want to have a part of your sim that runs at a finite, constant rate, where your game's graphics and GUI exist.\n\nWhen debugging, you can run time in slow motion. This lets you follow data as it moves through the sim. By default, data points are labelled to show what values they contain, so you get the benefits of a debugger — seeing your current variable values in every scope, stepping through code — but you don't need to completely stop time. You can still interact with your sim, and see it slowly respond.\n\nYou can also run time backwards. By the end of this post we will have thoroughly explored the consequences of going back in time."
      },
      "date": 1653406004306
    },
    {
      "type": "edit",
      "id": "daa1410c28d46191",
      "item": {
        "type": "markdown",
        "id": "daa1410c28d46191",
        "text": "> You choose how time progresses. The passage of time is just an attribute of the objects in Hest, so you can have different parts of your sim running at different rates. Generally, core functions, libraries, and your main simulation logic run as fast as possible. But you probably also want to have a part of your sim that runs at a finite, constant rate, where your game's graphics and GUI exist.\n\nWhen debugging, you can run time in slow motion. This lets you follow data as it moves through the sim. By default, data points are labelled to show what values they contain, so you get the benefits of a debugger — seeing your current variable values in every scope, stepping through code — but you don't need to completely stop time. You can still interact with your sim, and see it slowly respond.\n\nYou can also run time backwards. By the end of this post we will have thoroughly explored the consequences of going back in time."
      },
      "date": 1653406005534
    },
    {
      "type": "edit",
      "id": "daa1410c28d46191",
      "item": {
        "type": "markdown",
        "id": "daa1410c28d46191",
        "text": "> You choose how time progresses. The passage of time is just an attribute of the objects in [[Hest]], so you can have different parts of your sim running at different rates. Generally, core functions, libraries, and your main simulation logic run as fast as possible. But you probably also want to have a part of your sim that runs at a finite, constant rate, where your game's graphics and GUI exist.\n\nWhen debugging, you can run time in slow motion. This lets you follow data as it moves through the sim. By default, data points are labelled to show what values they contain, so you get the benefits of a debugger — seeing your current variable values in every scope, stepping through code — but you don't need to completely stop time. You can still interact with your sim, and see it slowly respond.\n\nYou can also run time backwards. By the end of this post we will have thoroughly explored the consequences of going back in time."
      },
      "date": 1653406021147
    },
    {
      "item": {
        "type": "factory",
        "id": "50717a73c5f71227"
      },
      "id": "50717a73c5f71227",
      "type": "add",
      "after": "daa1410c28d46191",
      "date": 1653406187380
    },
    {
      "type": "edit",
      "id": "50717a73c5f71227",
      "item": {
        "type": "paragraph",
        "id": "50717a73c5f71227",
        "text": "– https://github.com/ivanreese/visual-programming-codex/blob/main/inspirations.md github"
      },
      "date": 1653406199165
    },
    {
      "type": "edit",
      "id": "50717a73c5f71227",
      "item": {
        "type": "paragraph",
        "id": "50717a73c5f71227",
        "text": "– Factorio. [https://github.com/ivanreese/visual-programming-codex/blob/main/inspirations.md github]"
      },
      "date": 1653406216458
    },
    {
      "item": {
        "type": "factory",
        "id": "e0f39725e37ef462"
      },
      "id": "e0f39725e37ef462",
      "type": "add",
      "after": "50717a73c5f71227",
      "date": 1653406256787
    },
    {
      "type": "edit",
      "id": "e0f39725e37ef462",
      "item": {
        "type": "paragraph",
        "id": "e0f39725e37ef462",
        "text": "> This is a perpetual work-in-progress, inspired by Shaun Lebron's History of Lisp Parens. It's small right now, but will grow and gain structure and substance over the coming years. If you know of anything that could or should be added, please do open an issue or pull request. (Personally, I haven't had much time or energy to update this recently — but I am capturing all the interesting VPLs I hear about as issues, so check those out if you're looking for more.)"
      },
      "date": 1653406259394
    },
    {
      "type": "edit",
      "id": "e0f39725e37ef462",
      "item": {
        "type": "markdown",
        "id": "e0f39725e37ef462",
        "text": "> This is a perpetual work-in-progress, inspired by Shaun Lebron's History of Lisp Parens. It's small right now, but will grow and gain structure and substance over the coming years. If you know of anything that could or should be added, please do open an issue or pull request. (Personally, I haven't had much time or energy to update this recently — but I am capturing all the interesting VPLs I hear about as issues, so check those out if you're looking for more.)"
      },
      "date": 1653406260272
    },
    {
      "type": "edit",
      "id": "e0f39725e37ef462",
      "item": {
        "type": "markdown",
        "id": "e0f39725e37ef462",
        "text": "> This is a perpetual work-in-progress, inspired by [[Shaun Lebron]]'s History of Lisp Parens. It's small right now, but will grow and gain structure and substance over the coming years. If you know of anything that could or should be added, please do open an issue or pull request. (Personally, I haven't had much time or energy to update this recently — but I am capturing all the interesting VPLs I hear about as issues, so check those out if you're looking for more.)"
      },
      "date": 1653406270691
    },
    {
      "item": {
        "type": "factory",
        "id": "e0ab8da29be01f99"
      },
      "id": "e0ab8da29be01f99",
      "type": "add",
      "after": "e0f39725e37ef462",
      "date": 1653408040669
    },
    {
      "type": "edit",
      "id": "e0ab8da29be01f99",
      "item": {
        "type": "video",
        "id": "e0ab8da29be01f99",
        "text": "YOUTUBE -3gFWyYbFb8"
      },
      "date": 1653408052818
    },
    {
      "type": "edit",
      "id": "e0ab8da29be01f99",
      "item": {
        "type": "video",
        "id": "e0ab8da29be01f99",
        "text": "YOUTUBE -3gFWyYbFb8\n2021-05-17: Riffing on Ivan Reese's Hest"
      },
      "date": 1653408091951
    },
    {
      "type": "edit",
      "id": "e0ab8da29be01f99",
      "item": {
        "type": "video",
        "id": "e0ab8da29be01f99",
        "text": "YOUTUBE -3gFWyYbFb8\n2021-05-17: Riffing on Ivan Reese's Hest by [[ Kartik Agaram\n]]"
      },
      "date": 1653408126921
    },
    {
      "type": "edit",
      "id": "e0ab8da29be01f99",
      "item": {
        "type": "video",
        "id": "e0ab8da29be01f99",
        "text": "YOUTUBE -3gFWyYbFb8\n2021-05-17: Riffing on Ivan Reese's Hest by [[Kartik Agaram\n]]"
      },
      "date": 1653408137039
    },
    {
      "type": "edit",
      "id": "e0ab8da29be01f99",
      "item": {
        "type": "video",
        "id": "e0ab8da29be01f99",
        "text": "YOUTUBE -3gFWyYbFb8\n2021-05-17: Riffing on Ivan Reese's Hest by [[Kartik Agaram]]"
      },
      "date": 1653408144371
    },
    {
      "id": "e0ab8da29be01f99",
      "type": "move",
      "order": [
        "e1b77c7987d0f483",
        "c240169423449d17",
        "429d278c06ce6009",
        "7d0fe636ee2d831b",
        "2bdc961f9f2b6c43",
        "7b3e4c66119f1016",
        "0c6301ec9189387f",
        "1be1db9b938804ac",
        "7d8987367d8aad9f",
        "10e13866ffa3c59a",
        "ee4625e9595ab237",
        "96afbe7308a407f4",
        "e48afd4ba3d6138e",
        "984d9e2b98b9d7bf",
        "8bc7f53a2877f6fe",
        "dd8ea813cbe10cce",
        "0cad72faabf92f89",
        "a08c1b50449eb693",
        "0d0cd5371c8c5db3",
        "3ffca2f7aca1b2ad",
        "010fdcf6308ebed0",
        "0812cb647073829c",
        "84cf9a86827c131c",
        "053cd3602d71232e",
        "a887c5198d00c7f6",
        "af77e50db7e62401",
        "fa5417814e8b1f71",
        "588800b6eb58fb1e",
        "297220abce02071a",
        "4cf9eaa26144b127",
        "d02c8acda6ca8a75",
        "9469cbbfdcf45b07",
        "6a8fc1fdb819769a",
        "7d46a6afb1018719",
        "57bf27e1a2de3058",
        "ffeb4c3a98bcb097",
        "01a966e3b6fe19e7",
        "64cfe7dca0030c2f",
        "7f9937036d6ad684",
        "da5221738d64b059",
        "aedab9efd92160a5",
        "b2b3f909caf1f56c",
        "92d61f7386da62a5",
        "3255bba081aa57a9",
        "67f31d5b9cb39c4b",
        "1fa96108af0c399e",
        "24a5079e2157c866",
        "c69af1e8fc67ae07",
        "e0ab8da29be01f99",
        "f9349dedc0ff2969",
        "daa1410c28d46191",
        "50717a73c5f71227",
        "e0f39725e37ef462"
      ],
      "date": 1653408297232
    },
    {
      "type": "edit",
      "id": "e0ab8da29be01f99",
      "item": {
        "type": "video",
        "id": "e0ab8da29be01f99",
        "text": "YOUTUBE -3gFWyYbFb8\n2021-05-17: Riffing on [[Ivan Reese]]'s Hest by [[Kartik Agaram]]"
      },
      "date": 1653408306661
    },
    {
      "item": {
        "type": "factory",
        "id": "12c7f63564a71c9e"
      },
      "id": "12c7f63564a71c9e",
      "type": "add",
      "after": "e0f39725e37ef462",
      "date": 1653412598443
    },
    {
      "type": "edit",
      "id": "12c7f63564a71c9e",
      "item": {
        "type": "pagefold",
        "id": "12c7f63564a71c9e",
        "text": "~"
      },
      "date": 1653412602325
    },
    {
      "item": {
        "type": "factory",
        "id": "ea0b6528290101bb"
      },
      "id": "ea0b6528290101bb",
      "type": "add",
      "after": "12c7f63564a71c9e",
      "date": 1653412610223
    },
    {
      "type": "edit",
      "id": "ea0b6528290101bb",
      "item": {
        "type": "paragraph",
        "id": "ea0b6528290101bb",
        "text": "⇒ [[GoJs]] ⇒ [[Interactive Diagrams]]"
      },
      "date": 1653412660971
    },
    {
      "id": "4d32990f19ad573a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4d32990f19ad573a",
        "text": "Generate garden contents. [https://github.com/WardCunningham/assets/commit/c078855 github]"
      },
      "after": "a08c1b50449eb693",
      "date": 1653427355856
    },
    {
      "type": "edit",
      "id": "4d32990f19ad573a",
      "item": {
        "type": "paragraph",
        "id": "4d32990f19ad573a",
        "text": "Generate garden contents. [https://github.com/WardCunningham/assets/commit/c078855 github] Story Telling Punch List"
      },
      "date": 1653427402723
    },
    {
      "type": "edit",
      "id": "4d32990f19ad573a",
      "item": {
        "type": "paragraph",
        "id": "4d32990f19ad573a",
        "text": "Generate garden contents. [https://github.com/WardCunningham/assets/commit/c078855 github] ⇒ [[Story Telling Punch List]]"
      },
      "date": 1653427425076
    }
  ]
}