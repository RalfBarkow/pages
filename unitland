{
  "title": "unit.land",
  "story": [
    {
      "type": "paragraph",
      "id": "57905df453af98d7",
      "text": "It is heavily inspired by Live, Data Flow, Reactive, Functional and Object Oriented Programming paradigms. Formally, units are Multi Input Multi Output (MIMO) Finite State Machines (FSM). A program in Unit is represented as a [[Graph]].\n\nThe [[Unit Programming Language]] was developed in close junction to the Unit Programming Environment, which is a Web application built for easy composition of new units. The environment is designed to feel visual and kinesthetic, giving the perception of Direct Manipulation of Live Virtual Objects. The Unit Programming experience is minimalistic, ergonomic, mobile, and can be performed through a variety of input devices, and editing can be partially expressed through Drawing, Gesture and Voice.\n\nUnit is similar in concept to the Unix shell. For a seasoned programmer, Unit should feel like the 2D evolution of the Command Line Interface (CLI) where units' (commands) inputs and outputs (stdin/stdout/stderr) can be piped together into a graph (script). In fact, Unit can be thought of as a re-exploration of the Unix Philosophy in the context of modern Software Engineering and Web Development.\n\nThe Unit system is set to grow into a simple and approachable Web Operating System, which is sandboxed by default, enabling a new era of Software Sharing and Collaboration, unifying the currently fragmented Computer Experience.\n\nFor an introduction to Unit Programming, visit Getting Started. [https://github.com/samuelmtimbo/unit/blob/main/src/docs/start/README.md github]"
    },
    {
      "type": "paragraph",
      "id": "9d5ee8ed85047a19",
      "text": "The broader design philosophy behind Unit is discussed in Concept. [https://github.com/samuelmtimbo/unit/blob/main/src/docs/concept/README.md github]"
    },
    {
      "type": "paragraph",
      "id": "4328fa38a0f83920",
      "text": "To jump right into the official Unit Programming Environment, visit unit.land (beta).\n\nCheck out a collection of public open source units at unit.tools (beta)."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "unit.land",
        "story": []
      },
      "date": 1711582459926
    },
    {
      "type": "edit",
      "id": "a146ab6ec434c0f8",
      "item": {
        "type": "paragraph",
        "id": "a146ab6ec434c0f8",
        "text": "Unit is a General Purpose Visual Programming Language and Environment built with a primary focus on Developer Experience."
      },
      "date": 1711582463060
    },
    {
      "type": "edit",
      "id": "a146ab6ec434c0f8",
      "item": {
        "type": "paragraph",
        "id": "a146ab6ec434c0f8",
        "text": "Unit is a General Purpose Visual Programming Language and Environment built with a primary focus on Developer Experience. [https://github.com/samuelmtimbo/unit github]"
      },
      "date": 1711582481145
    },
    {
      "item": {
        "type": "factory",
        "id": "57905df453af98d7"
      },
      "id": "57905df453af98d7",
      "type": "add",
      "after": "a146ab6ec434c0f8",
      "date": 1711582498379
    },
    {
      "type": "edit",
      "id": "57905df453af98d7",
      "item": {
        "type": "paragraph",
        "id": "57905df453af98d7",
        "text": "It is heavily inspired by Live, Data Flow, Reactive, Functional and Object Oriented Programming paradigms. Formally, units are Multi Input Multi Output (MIMO) Finite State Machines (FSM). A program in Unit is represented as a Graph.\n\nThe Unit Programming Language was developed in close junction to the Unit Programming Environment, which is a Web application built for easy composition of new units. The environment is designed to feel visual and kinesthetic, giving the perception of Direct Manipulation of Live Virtual Objects. The Unit Programming experience is minimalistic, ergonomic, mobile, and can be performed through a variety of input devices, and editing can be partially expressed through Drawing, Gesture and Voice.\n\nUnit is similar in concept to the Unix shell. For a seasoned programmer, Unit should feel like the 2D evolution of the Command Line Interface (CLI) where units' (commands) inputs and outputs (stdin/stdout/stderr) can be piped together into a graph (script). In fact, Unit can be thought of as a re-exploration of the Unix Philosophy in the context of modern Software Engineering and Web Development.\n\nThe Unit system is set to grow into a simple and approachable Web Operating System, which is sandboxed by default, enabling a new era of Software Sharing and Collaboration, unifying the currently fragmented Computer Experience.\n\nFor an introduction to Unit Programming, visit Getting Started.\n\nThe broader design philosophy behind Unit is discussed in Concept.\n\nTo jump right into the official Unit Programming Environment, visit unit.land (beta).\n\nCheck out a collection of public open source units at unit.tools (beta)."
      },
      "date": 1711582500056
    },
    {
      "type": "edit",
      "id": "57905df453af98d7",
      "item": {
        "type": "paragraph",
        "id": "57905df453af98d7",
        "text": "It is heavily inspired by Live, Data Flow, Reactive, Functional and Object Oriented Programming paradigms. Formally, units are Multi Input Multi Output (MIMO) Finite State Machines (FSM). A program in Unit is represented as a [[Graph]].\n\nThe Unit Programming Language was developed in close junction to the Unit Programming Environment, which is a Web application built for easy composition of new units. The environment is designed to feel visual and kinesthetic, giving the perception of Direct Manipulation of Live Virtual Objects. The Unit Programming experience is minimalistic, ergonomic, mobile, and can be performed through a variety of input devices, and editing can be partially expressed through Drawing, Gesture and Voice.\n\nUnit is similar in concept to the Unix shell. For a seasoned programmer, Unit should feel like the 2D evolution of the Command Line Interface (CLI) where units' (commands) inputs and outputs (stdin/stdout/stderr) can be piped together into a graph (script). In fact, Unit can be thought of as a re-exploration of the Unix Philosophy in the context of modern Software Engineering and Web Development.\n\nThe Unit system is set to grow into a simple and approachable Web Operating System, which is sandboxed by default, enabling a new era of Software Sharing and Collaboration, unifying the currently fragmented Computer Experience.\n\nFor an introduction to Unit Programming, visit Getting Started.\n\nThe broader design philosophy behind Unit is discussed in Concept.\n\nTo jump right into the official Unit Programming Environment, visit unit.land (beta).\n\nCheck out a collection of public open source units at unit.tools (beta)."
      },
      "date": 1711582525056
    },
    {
      "type": "edit",
      "id": "57905df453af98d7",
      "item": {
        "type": "paragraph",
        "id": "57905df453af98d7",
        "text": "It is heavily inspired by Live, Data Flow, Reactive, Functional and Object Oriented Programming paradigms. Formally, units are Multi Input Multi Output (MIMO) Finite State Machines (FSM). A program in Unit is represented as a [[Graph]].\n\nThe [[Unit Programming Language]] was developed in close junction to the Unit Programming Environment, which is a Web application built for easy composition of new units. The environment is designed to feel visual and kinesthetic, giving the perception of Direct Manipulation of Live Virtual Objects. The Unit Programming experience is minimalistic, ergonomic, mobile, and can be performed through a variety of input devices, and editing can be partially expressed through Drawing, Gesture and Voice.\n\nUnit is similar in concept to the Unix shell. For a seasoned programmer, Unit should feel like the 2D evolution of the Command Line Interface (CLI) where units' (commands) inputs and outputs (stdin/stdout/stderr) can be piped together into a graph (script). In fact, Unit can be thought of as a re-exploration of the Unix Philosophy in the context of modern Software Engineering and Web Development.\n\nThe Unit system is set to grow into a simple and approachable Web Operating System, which is sandboxed by default, enabling a new era of Software Sharing and Collaboration, unifying the currently fragmented Computer Experience.\n\nFor an introduction to Unit Programming, visit Getting Started.\n\nThe broader design philosophy behind Unit is discussed in Concept.\n\nTo jump right into the official Unit Programming Environment, visit unit.land (beta).\n\nCheck out a collection of public open source units at unit.tools (beta)."
      },
      "date": 1711582554893
    },
    {
      "type": "edit",
      "id": "57905df453af98d7",
      "item": {
        "type": "paragraph",
        "id": "57905df453af98d7",
        "text": "It is heavily inspired by Live, Data Flow, Reactive, Functional and Object Oriented Programming paradigms. Formally, units are Multi Input Multi Output (MIMO) Finite State Machines (FSM). A program in Unit is represented as a [[Graph]].\n\nThe [[Unit Programming Language]] was developed in close junction to the Unit Programming Environment, which is a Web application built for easy composition of new units. The environment is designed to feel visual and kinesthetic, giving the perception of Direct Manipulation of Live Virtual Objects. The Unit Programming experience is minimalistic, ergonomic, mobile, and can be performed through a variety of input devices, and editing can be partially expressed through Drawing, Gesture and Voice.\n\nUnit is similar in concept to the Unix shell. For a seasoned programmer, Unit should feel like the 2D evolution of the Command Line Interface (CLI) where units' (commands) inputs and outputs (stdin/stdout/stderr) can be piped together into a graph (script). In fact, Unit can be thought of as a re-exploration of the Unix Philosophy in the context of modern Software Engineering and Web Development.\n\nThe Unit system is set to grow into a simple and approachable Web Operating System, which is sandboxed by default, enabling a new era of Software Sharing and Collaboration, unifying the currently fragmented Computer Experience.\n\nFor an introduction to Unit Programming, visit Getting Started. [https://github.com/samuelmtimbo/unit/blob/main/src/docs/start/README.md github]"
      },
      "date": 1711582656826
    },
    {
      "type": "add",
      "id": "9d5ee8ed85047a19",
      "item": {
        "type": "paragraph",
        "id": "9d5ee8ed85047a19",
        "text": "The broader design philosophy behind Unit is discussed in Concept.\n\nTo jump right into the official Unit Programming Environment, visit unit.land (beta).\n\nCheck out a collection of public open source units at unit.tools (beta)."
      },
      "after": "57905df453af98d7",
      "date": 1711582658572
    },
    {
      "type": "edit",
      "id": "9d5ee8ed85047a19",
      "item": {
        "type": "paragraph",
        "id": "9d5ee8ed85047a19",
        "text": "The broader design philosophy behind Unit is discussed in Concept. [https://github.com/samuelmtimbo/unit/blob/main/src/docs/concept/README.md github]\n \nTo jump right into the official Unit Programming Environment, visit unit.land (beta).\n\nCheck out a collection of public open source units at unit.tools (beta)."
      },
      "date": 1711582693045
    },
    {
      "type": "edit",
      "id": "9d5ee8ed85047a19",
      "item": {
        "type": "paragraph",
        "id": "9d5ee8ed85047a19",
        "text": "The broader design philosophy behind Unit is discussed in Concept. [https://github.com/samuelmtimbo/unit/blob/main/src/docs/concept/README.md github]"
      },
      "date": 1711582725285
    },
    {
      "type": "add",
      "id": "4328fa38a0f83920",
      "item": {
        "type": "paragraph",
        "id": "4328fa38a0f83920",
        "text": "To jump right into the official Unit Programming Environment, visit unit.land (beta).\n\nCheck out a collection of public open source units at unit.tools (beta)."
      },
      "after": "9d5ee8ed85047a19",
      "date": 1711582726120
    }
  ]
}