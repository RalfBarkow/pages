{
  "title": "JavaScript Scope",
  "story": [
    {
      "type": "paragraph",
      "id": "df8dee73e5c5daac",
      "text": "JavaScript has lexical, function level scoping. This means that any inner scope has access to the outer scope where it is defined, no matter when/how it is invoked. And that the function is the only unit of scope, something defined within a function is defined inside the whole function. Loop or conditional bodies are irrelevant to scope."
    },
    {
      "type": "paragraph",
      "id": "aa6f2e74798cda2a",
      "text": "Whenever a variable is used JS looks for it starting with current function's scope, moving down through each outer scope until it finds it or gets to the global scope. This is the same whether setting or getting a value. If it doesn't find anything it declares the value in the global scope, which is known as leaking a global variable."
    },
    {
      "type": "paragraph",
      "id": "51ac72f5b8de682b",
      "text": "This is extremely important to how JavaScript is written. It means that a function defined in a scope, and used as an event handler, or callback, can always refer back to that scope, even if the containing function has returned long before."
    },
    {
      "type": "paragraph",
      "id": "b98576ff04356812",
      "text": "Especially interesting is that we can do this on purpose, using functions that have a return value that is a function. This is  called a closure. The returned function can be passed around, assigned to variables, or passed in to other functions, all while retaining it's reference to the original scope it was returned from."
    },
    {
      "type": "paragraph",
      "id": "3f7a997bcee6beb8",
      "text": "Variables in the local scope permanently shadow variables of the same name in outer scopes, leaving no way to get or set the outer variables from the inner scope. There are four ways for variables to be declared in the local scope."
    },
    {
      "type": "paragraph",
      "id": "17bd2da62fd7d654",
      "text": "With the `var` statement, which takes a list of comma separated variables and optional initialization values. The declaration is hoisted, so that the variable is declared from the start of the function. However the initialization is not, so the variable has a value of undefined until a value is assigned."
    },
    {
      "type": "paragraph",
      "id": "d3a4277078d586aa",
      "text": "Function statements also declare a local variable with the name of the function. Like var statements the variable is hoisted to the start of the scope, unlike var statements so is the value of the function. This means that you can invoke a function that is declared by function statement anywhere in the scope, even before the function statement itself. Function expressions however follow the rules for var statements above."
    },
    {
      "type": "paragraph",
      "id": "33c7dd8d920e40bb",
      "text": "A functions arguments also become local variables in the functions scope. These variables can be used like normal, they are just declared locally and assigned the values passed to them before you can interact with them. If the function is called without some of the arguments those arguments start with a value of undefined."
    },
    {
      "type": "paragraph",
      "id": "bd8463c3c7d8b34c",
      "text": "Finally there are two variables that appear in local scope as if by magic, `arguments` and `this`. arguments is an array like object that doesn't inherit from Array.prototype. It contains everything passed to the function when it was invoked, including the named argument's values.  this refers to the [[JavaScript Invocation Context]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "id": "86657823490c6e86",
      "item": {
        "title": "JavaScript Scope"
      },
      "date": 1345449096644
    },
    {
      "item": {
        "type": "factory",
        "id": "df8dee73e5c5daac"
      },
      "id": "df8dee73e5c5daac",
      "type": "add",
      "date": 1345449985896
    },
    {
      "type": "edit",
      "id": "df8dee73e5c5daac",
      "item": {
        "type": "paragraph",
        "id": "df8dee73e5c5daac",
        "text": "JavaScript has lexical, function level scoping. This means that any inner scope has access to the outer scope where it is defined, not where it is invoked. And that the function is the only unit of scope, something defined within a function is defined inside the whole function. Loop or conditional bodies are irreverent to scope."
      },
      "date": 1345450237334
    },
    {
      "item": {
        "type": "factory",
        "id": "aa6f2e74798cda2a"
      },
      "id": "aa6f2e74798cda2a",
      "type": "add",
      "after": "df8dee73e5c5daac",
      "date": 1345453158250
    },
    {
      "type": "edit",
      "id": "aa6f2e74798cda2a",
      "item": {
        "type": "paragraph",
        "id": "aa6f2e74798cda2a",
        "text": "Whenever a variable is used JS looks for it starting with current function's scope, moving down through each outer scope until it finds it or gets to the global scope. This is the same whether setting or getting a value."
      },
      "date": 1345453363699
    },
    {
      "item": {
        "type": "paragraph",
        "id": "cb8c2e5d5fee1af8",
        "text": ""
      },
      "id": "cb8c2e5d5fee1af8",
      "type": "add",
      "after": "aa6f2e74798cda2a",
      "date": 1345453364208
    },
    {
      "type": "remove",
      "id": "cb8c2e5d5fee1af8",
      "date": 1345453378652
    },
    {
      "type": "edit",
      "id": "df8dee73e5c5daac",
      "item": {
        "type": "paragraph",
        "id": "df8dee73e5c5daac",
        "text": "JavaScript has lexical, function level scoping. This means that any inner scope has access to the outer scope where it is defined, no matter when/how it is invoked. And that the function is the only unit of scope, something defined within a function is defined inside the whole function. Loop or conditional bodies are irrelevant to scope."
      },
      "date": 1346214858358
    },
    {
      "type": "edit",
      "id": "aa6f2e74798cda2a",
      "item": {
        "type": "paragraph",
        "id": "aa6f2e74798cda2a",
        "text": "Whenever a variable is used JS looks for it starting with current function's scope, moving down through each outer scope until it finds it or gets to the global scope. This is the same whether setting or getting a value. If it doesn't find anything it declares the value in the global scope, which is known as leaking a global variable."
      },
      "date": 1346214996953
    },
    {
      "item": {
        "type": "paragraph",
        "id": "3f7a997bcee6beb8",
        "text": ""
      },
      "id": "3f7a997bcee6beb8",
      "type": "add",
      "after": "aa6f2e74798cda2a",
      "date": 1346218416140
    },
    {
      "type": "edit",
      "id": "3f7a997bcee6beb8",
      "item": {
        "type": "paragraph",
        "id": "3f7a997bcee6beb8",
        "text": "Variables in the local scope permanently shadow variables of the same name in outer scopes, leaving no way to get or set the outer variables from the inner scope. There are four ways for variables to be declared in the local scope."
      },
      "date": 1346218503852
    },
    {
      "item": {
        "type": "paragraph",
        "id": "17bd2da62fd7d654",
        "text": ""
      },
      "id": "17bd2da62fd7d654",
      "type": "add",
      "after": "3f7a997bcee6beb8",
      "date": 1346218504364
    },
    {
      "type": "edit",
      "id": "17bd2da62fd7d654",
      "item": {
        "type": "paragraph",
        "id": "17bd2da62fd7d654",
        "text": "With the `var` statement, which takes a list of comma separated variables and optional initialization values. The declaration is hoisted, so that the variable is declared from the start of the function. However the initialization is not, so the variable has a value of undefined until a value is assigned."
      },
      "date": 1346218639553
    },
    {
      "item": {
        "type": "paragraph",
        "id": "d3a4277078d586aa",
        "text": ""
      },
      "id": "d3a4277078d586aa",
      "type": "add",
      "after": "17bd2da62fd7d654",
      "date": 1346218640063
    },
    {
      "type": "edit",
      "id": "d3a4277078d586aa",
      "item": {
        "type": "paragraph",
        "id": "d3a4277078d586aa",
        "text": "Function statements also declare a local variable with the name of the function. Like var statements the variable is hoisted to the start of the scope, unlike var statements so is the value of the function. This means that you can invoke a function that is declared by function statement anywhere in the scope, even before the function statement itself. Function expressions however follow the rules for var statements above."
      },
      "date": 1346218842861
    },
    {
      "item": {
        "type": "paragraph",
        "id": "33c7dd8d920e40bb",
        "text": ""
      },
      "id": "33c7dd8d920e40bb",
      "type": "add",
      "after": "d3a4277078d586aa",
      "date": 1346218843369
    },
    {
      "type": "edit",
      "id": "33c7dd8d920e40bb",
      "item": {
        "type": "paragraph",
        "id": "33c7dd8d920e40bb",
        "text": "A functions arguments also become local variables in the functions scope. These variables can be used like normal, they are just declared locally and assigned the values passed to them before you can interact with them. If the function is called without some of the arguments those arguments start with a value of undefined."
      },
      "date": 1346218988147
    },
    {
      "item": {
        "type": "paragraph",
        "id": "bd8463c3c7d8b34c",
        "text": ""
      },
      "id": "bd8463c3c7d8b34c",
      "type": "add",
      "after": "33c7dd8d920e40bb",
      "date": 1346218988658
    },
    {
      "type": "edit",
      "id": "bd8463c3c7d8b34c",
      "item": {
        "type": "paragraph",
        "id": "bd8463c3c7d8b34c",
        "text": "Finally there are two variables that appear in local scope as if by magic, `arguments` and `this`. arguments is an array like object that doesn't inherit from Array.prototype. It contains everything passed to the function when it was invoked, including the named argument's values.  this refers to the [[JavaScript Invocation Context]]"
      },
      "date": 1346219137212
    },
    {
      "item": {
        "type": "paragraph",
        "id": "51ac72f5b8de682b",
        "text": ""
      },
      "id": "51ac72f5b8de682b",
      "type": "add",
      "after": "aa6f2e74798cda2a",
      "date": 1346219241073
    },
    {
      "type": "edit",
      "id": "51ac72f5b8de682b",
      "item": {
        "type": "paragraph",
        "id": "51ac72f5b8de682b",
        "text": "This is extremely important to how JavaScript is written. It means that a function defined in a scope, and used as an event handler, or callback, can always refer back to that scope, even if the containing function has returned long before."
      },
      "date": 1346219432983
    },
    {
      "item": {
        "type": "paragraph",
        "id": "b98576ff04356812",
        "text": ""
      },
      "id": "b98576ff04356812",
      "type": "add",
      "after": "51ac72f5b8de682b",
      "date": 1346219433494
    },
    {
      "type": "edit",
      "id": "b98576ff04356812",
      "item": {
        "type": "paragraph",
        "id": "b98576ff04356812",
        "text": "Especially interesting is that we can do this on purpose, using functions that have a return value that is a function. This is  called a closure. The returned function can be passed around, assigned to variables, or passed in to other functions, all while retaining it's reference to the original scope it was returned from."
      },
      "date": 1346219613009
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1678777271396
    }
  ]
}