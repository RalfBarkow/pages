{
  "title": "MyModelRoot",
  "story": [
    {
      "type": "paragraph",
      "id": "69e314ecb1e868cb",
      "text": "Here we define the top-level [[Worldcore]] model. This is the model that is spawned when the Croquet session starts, and every actor and model service is contained within it. Your app can only have one model root.\n\nIn this case, our model root is very simple. All it does is spawn a single actor on start-up. Note that when we create our actor, we pass in options to initialize it. Our actor was extended with the [[Spatial]] mixin, so we can pass in an initial translation and rotation. The translation is a vector in 3D space, and the rotation is a [[Quaternion]] that represents a rotation around an axis.\n\nCreating an actor returns a pointer to it. You can save the pointer if want to refer to the actor later, but it's not required. The model root maintains an internal list of all actors.\n\n(Try modifying the init rountine to create more actors with different initialization values.)\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "MyModelRoot",
        "story": []
      },
      "date": 1655027048615
    },
    {
      "item": {
        "type": "factory",
        "id": "69e314ecb1e868cb"
      },
      "id": "69e314ecb1e868cb",
      "type": "add",
      "date": 1655027098441
    },
    {
      "type": "edit",
      "id": "69e314ecb1e868cb",
      "item": {
        "type": "paragraph",
        "id": "69e314ecb1e868cb",
        "text": "Here we define the top-level Worldcore model. This is the model that is spawned when the Croquet session starts, and every actor and model service is contained within it. Your app can only have one model root.\n\nIn this case, our model root is very simple. All it does is spawn a single actor on start-up. Note that when we create our actor, we pass in options to initialize it. our actor was extended with the Spatial mixin, so we can pass in an initial translation and rotation. The translation is a vector in 3D space, and the rotation is a quaternion that represents a rotation around an axis.\n\nCreating an actor returns a pointer to it. You can save the pointer if want to refer to the actor later, but it's not required. The model root maintains an internal list of all actors.\n\n(Try modifying the init rountine to create more actors with different initialization values.)\n"
      },
      "date": 1655027100181
    },
    {
      "type": "edit",
      "id": "69e314ecb1e868cb",
      "item": {
        "type": "paragraph",
        "id": "69e314ecb1e868cb",
        "text": "Here we define the top-level [[Worldcore]] model. This is the model that is spawned when the Croquet session starts, and every actor and model service is contained within it. Your app can only have one model root.\n\nIn this case, our model root is very simple. All it does is spawn a single actor on start-up. Note that when we create our actor, we pass in options to initialize it. our actor was extended with the Spatial mixin, so we can pass in an initial translation and rotation. The translation is a vector in 3D space, and the rotation is a quaternion that represents a rotation around an axis.\n\nCreating an actor returns a pointer to it. You can save the pointer if want to refer to the actor later, but it's not required. The model root maintains an internal list of all actors.\n\n(Try modifying the init rountine to create more actors with different initialization values.)\n"
      },
      "date": 1655027111926
    },
    {
      "type": "edit",
      "id": "69e314ecb1e868cb",
      "item": {
        "type": "paragraph",
        "id": "69e314ecb1e868cb",
        "text": "Here we define the top-level [[Worldcore]] model. This is the model that is spawned when the Croquet session starts, and every actor and model service is contained within it. Your app can only have one model root.\n\nIn this case, our model root is very simple. All it does is spawn a single actor on start-up. Note that when we create our actor, we pass in options to initialize it. Our actor was extended with the [[Spatial]] mixin, so we can pass in an initial translation and rotation. The translation is a vector in 3D space, and the rotation is a quaternion that represents a rotation around an axis.\n\nCreating an actor returns a pointer to it. You can save the pointer if want to refer to the actor later, but it's not required. The model root maintains an internal list of all actors.\n\n(Try modifying the init rountine to create more actors with different initialization values.)\n"
      },
      "date": 1655027176937
    },
    {
      "type": "edit",
      "id": "69e314ecb1e868cb",
      "item": {
        "type": "paragraph",
        "id": "69e314ecb1e868cb",
        "text": "Here we define the top-level [[Worldcore]] model. This is the model that is spawned when the Croquet session starts, and every actor and model service is contained within it. Your app can only have one model root.\n\nIn this case, our model root is very simple. All it does is spawn a single actor on start-up. Note that when we create our actor, we pass in options to initialize it. Our actor was extended with the [[Spatial]] mixin, so we can pass in an initial translation and rotation. The translation is a vector in 3D space, and the rotation is a [[quaternion]] that represents a rotation around an axis.\n\nCreating an actor returns a pointer to it. You can save the pointer if want to refer to the actor later, but it's not required. The model root maintains an internal list of all actors.\n\n(Try modifying the init rountine to create more actors with different initialization values.)\n"
      },
      "date": 1655027219258
    },
    {
      "type": "edit",
      "id": "69e314ecb1e868cb",
      "item": {
        "type": "paragraph",
        "id": "69e314ecb1e868cb",
        "text": "Here we define the top-level [[Worldcore]] model. This is the model that is spawned when the Croquet session starts, and every actor and model service is contained within it. Your app can only have one model root.\n\nIn this case, our model root is very simple. All it does is spawn a single actor on start-up. Note that when we create our actor, we pass in options to initialize it. Our actor was extended with the [[Spatial]] mixin, so we can pass in an initial translation and rotation. The translation is a vector in 3D space, and the rotation is a [[Quaternion]] that represents a rotation around an axis.\n\nCreating an actor returns a pointer to it. You can save the pointer if want to refer to the actor later, but it's not required. The model root maintains an internal list of all actors.\n\n(Try modifying the init rountine to create more actors with different initialization values.)\n"
      },
      "date": 1655027241274
    }
  ]
}