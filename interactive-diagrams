{
  "title": "Interactive Diagrams",
  "story": [
    {
      "type": "paragraph",
      "id": "38f0732ef419e76a",
      "text": "An interactive diagram can be an effective way to communicate a mental model, because it can convey a way of seeing a problem or system. Currently, to create an interactive diagram one must write code to procedurally draw the diagram and respond appropriately to user input. Writing this code can take hours or days. [[Apparatus]] aims to reduce the time to create an interactive diagram from hours to minutes."
    },
    {
      "type": "video",
      "id": "d2e5a2f051c1a519",
      "text": "YOUTUBE i3Xack9ufYk\n\"[[Apparatus]]: A Hybrid Graphics Editor / Programming Environment\" by [[Toby Schachman]]"
    },
    {
      "type": "paragraph",
      "id": "31b0be6bfd92d25a",
      "text": "[[Apparatus]] combines the direct manipulation capabilities of a vector graphics editor with the dataflow capabilities of a spreadsheet. Through this hybridization, Apparatus supports both spatial and symbolic ways of working in tandem. Dataflow defines the state space of a diagram, algebra driving geometry. Dragging shapes moves through this state space, [[Geometry Driving Algebra]]. Instead of function calls or object-oriented inheritance, Apparatus uses a \"call by copying\" pattern for diagram reuse. Reused diagrams do not need to be explicitly parameterized. Instead of loops, Apparatus uses spreads which allow any value to exist in a \"superposition\". This allows shapes to be looped over implicitly. By decomposing shapes into paths of points, it also enables Apparatus to plot curves.\n\n\n"
    },
    {
      "type": "pagefold",
      "id": "ef945e3331e4664d",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "4522e3bd2212b125",
      "text": "⇒ [[GoJS]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Interactive Diagrams",
        "story": []
      },
      "date": 1650440016826
    },
    {
      "id": "38f0732ef419e76a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "38f0732ef419e76a",
        "text": "An interactive diagram can be an effective way to communicate a mental model, because it can convey a way of seeing a problem or system. Currently, to create an interactive diagram one must write code to procedurally draw the diagram and respond appropriately to user input. Writing this code can take hours or days. Apparatus aims to reduce the time to create an interactive diagram from hours to minutes.\n\nApparatus combines the direct manipulation capabilities of a vector graphics editor with the dataflow capabilities of a spreadsheet. Through this hybridization, Apparatus supports both spatial and symbolic ways of working in tandem. Dataflow defines the state space of a diagram, algebra driving geometry. Dragging shapes moves through this state space, geometry driving algebra. Instead of function calls or object-oriented inheritance, Apparatus uses a \"call by copying\" pattern for diagram reuse. Reused diagrams do not need to be explicitly parameterized. Instead of loops, Apparatus uses spreads which allow any value to exist in a \"superposition\". This allows shapes to be looped over implicitly. By decomposing shapes into paths of points, it also enables Apparatus to plot curves.\n\nToby Schachman\nCOMMUNICATIONS DESIGN GROUP\n\n"
      },
      "date": 1650440023500
    },
    {
      "type": "edit",
      "id": "38f0732ef419e76a",
      "item": {
        "type": "paragraph",
        "id": "38f0732ef419e76a",
        "text": "An interactive diagram can be an effective way to communicate a mental model, because it can convey a way of seeing a problem or system. Currently, to create an interactive diagram one must write code to procedurally draw the diagram and respond appropriately to user input. Writing this code can take hours or days. Apparatus aims to reduce the time to create an interactive diagram from hours to minutes."
      },
      "date": 1650440032801
    },
    {
      "type": "add",
      "id": "31b0be6bfd92d25a",
      "item": {
        "type": "paragraph",
        "id": "31b0be6bfd92d25a",
        "text": "\nApparatus combines the direct manipulation capabilities of a vector graphics editor with the dataflow capabilities of a spreadsheet. Through this hybridization, Apparatus supports both spatial and symbolic ways of working in tandem. Dataflow defines the state space of a diagram, algebra driving geometry. Dragging shapes moves through this state space, geometry driving algebra. Instead of function calls or object-oriented inheritance, Apparatus uses a \"call by copying\" pattern for diagram reuse. Reused diagrams do not need to be explicitly parameterized. Instead of loops, Apparatus uses spreads which allow any value to exist in a \"superposition\". This allows shapes to be looped over implicitly. By decomposing shapes into paths of points, it also enables Apparatus to plot curves.\n\nToby Schachman\nCOMMUNICATIONS DESIGN GROUP\n\n"
      },
      "after": "38f0732ef419e76a",
      "date": 1650440034396
    },
    {
      "id": "d2e5a2f051c1a519",
      "type": "add",
      "item": {
        "type": "video",
        "id": "d2e5a2f051c1a519",
        "text": "YOUTUBE i3Xack9ufYk\n\"Apparatus: A Hybrid Graphics Editor / Programming Environment\" by [[Toby Schachman]]"
      },
      "after": "38f0732ef419e76a",
      "date": 1650440050851
    },
    {
      "type": "edit",
      "id": "d2e5a2f051c1a519",
      "item": {
        "type": "video",
        "id": "d2e5a2f051c1a519",
        "text": "YOUTUBE i3Xack9ufYk\n\"[[Apparatus]]: A Hybrid Graphics Editor / Programming Environment\" by [[Toby Schachman]]"
      },
      "date": 1650440064919
    },
    {
      "type": "edit",
      "id": "31b0be6bfd92d25a",
      "item": {
        "type": "paragraph",
        "id": "31b0be6bfd92d25a",
        "text": "[[Apparatus]] combines the direct manipulation capabilities of a vector graphics editor with the dataflow capabilities of a spreadsheet. Through this hybridization, Apparatus supports both spatial and symbolic ways of working in tandem. Dataflow defines the state space of a diagram, algebra driving geometry. Dragging shapes moves through this state space, geometry driving algebra. Instead of function calls or object-oriented inheritance, Apparatus uses a \"call by copying\" pattern for diagram reuse. Reused diagrams do not need to be explicitly parameterized. Instead of loops, Apparatus uses spreads which allow any value to exist in a \"superposition\". This allows shapes to be looped over implicitly. By decomposing shapes into paths of points, it also enables Apparatus to plot curves.\n\n[[Toby Schachman]]\nCOMMUNICATIONS DESIGN GROUP\n\n"
      },
      "date": 1650440083988
    },
    {
      "type": "edit",
      "id": "31b0be6bfd92d25a",
      "item": {
        "type": "paragraph",
        "id": "31b0be6bfd92d25a",
        "text": "[[Apparatus]] combines the direct manipulation capabilities of a vector graphics editor with the dataflow capabilities of a spreadsheet. Through this hybridization, Apparatus supports both spatial and symbolic ways of working in tandem. Dataflow defines the state space of a diagram, algebra driving geometry. Dragging shapes moves through this state space, geometry driving algebra. Instead of function calls or object-oriented inheritance, Apparatus uses a \"call by copying\" pattern for diagram reuse. Reused diagrams do not need to be explicitly parameterized. Instead of loops, Apparatus uses spreads which allow any value to exist in a \"superposition\". This allows shapes to be looped over implicitly. By decomposing shapes into paths of points, it also enables Apparatus to plot curves.\n\n\n"
      },
      "date": 1650440117642
    },
    {
      "type": "edit",
      "id": "38f0732ef419e76a",
      "item": {
        "type": "paragraph",
        "id": "38f0732ef419e76a",
        "text": "An interactive diagram can be an effective way to communicate a mental model, because it can convey a way of seeing a problem or system. Currently, to create an interactive diagram one must write code to procedurally draw the diagram and respond appropriately to user input. Writing this code can take hours or days. [[Apparatus]] aims to reduce the time to create an interactive diagram from hours to minutes."
      },
      "date": 1650440143334
    },
    {
      "type": "edit",
      "id": "31b0be6bfd92d25a",
      "item": {
        "type": "paragraph",
        "id": "31b0be6bfd92d25a",
        "text": "[[Apparatus]] combines the direct manipulation capabilities of a vector graphics editor with the dataflow capabilities of a spreadsheet. Through this hybridization, Apparatus supports both spatial and symbolic ways of working in tandem. Dataflow defines the state space of a diagram, algebra driving geometry. Dragging shapes moves through this state space, [[geometry driving algebra]]. Instead of function calls or object-oriented inheritance, Apparatus uses a \"call by copying\" pattern for diagram reuse. Reused diagrams do not need to be explicitly parameterized. Instead of loops, Apparatus uses spreads which allow any value to exist in a \"superposition\". This allows shapes to be looped over implicitly. By decomposing shapes into paths of points, it also enables Apparatus to plot curves.\n\n\n"
      },
      "date": 1650440226364
    },
    {
      "type": "fork",
      "date": 1650440249169
    },
    {
      "item": {
        "type": "factory",
        "id": "ef945e3331e4664d"
      },
      "id": "ef945e3331e4664d",
      "type": "add",
      "after": "31b0be6bfd92d25a",
      "date": 1653412313368
    },
    {
      "type": "edit",
      "id": "ef945e3331e4664d",
      "item": {
        "type": "pagefold",
        "id": "ef945e3331e4664d",
        "text": "…"
      },
      "date": 1653412318842
    },
    {
      "item": {
        "type": "factory",
        "id": "4522e3bd2212b125"
      },
      "id": "4522e3bd2212b125",
      "type": "add",
      "after": "ef945e3331e4664d",
      "date": 1653412325024
    },
    {
      "type": "edit",
      "id": "ef945e3331e4664d",
      "item": {
        "type": "pagefold",
        "id": "ef945e3331e4664d",
        "text": "."
      },
      "date": 1653412327924
    },
    {
      "type": "edit",
      "id": "4522e3bd2212b125",
      "item": {
        "type": "paragraph",
        "id": "4522e3bd2212b125",
        "text": "[[GoJS]]"
      },
      "date": 1653412337853
    },
    {
      "type": "edit",
      "id": "4522e3bd2212b125",
      "item": {
        "type": "paragraph",
        "id": "4522e3bd2212b125",
        "text": "⇒ [[GoJS]]"
      },
      "date": 1653412386873
    },
    {
      "type": "edit",
      "id": "31b0be6bfd92d25a",
      "item": {
        "type": "paragraph",
        "id": "31b0be6bfd92d25a",
        "text": "[[Apparatus]] combines the direct manipulation capabilities of a vector graphics editor with the dataflow capabilities of a spreadsheet. Through this hybridization, Apparatus supports both spatial and symbolic ways of working in tandem. Dataflow defines the state space of a diagram, algebra driving geometry. Dragging shapes moves through this state space, [[Geometry Driving Algebra]]. Instead of function calls or object-oriented inheritance, Apparatus uses a \"call by copying\" pattern for diagram reuse. Reused diagrams do not need to be explicitly parameterized. Instead of loops, Apparatus uses spreads which allow any value to exist in a \"superposition\". This allows shapes to be looped over implicitly. By decomposing shapes into paths of points, it also enables Apparatus to plot curves.\n\n\n"
      },
      "date": 1653412745370,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1653412755278
    }
  ]
}