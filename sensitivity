{
  "title": "Sensitivity",
  "story": [
    {
      "type": "paragraph",
      "id": "2aecb1fcde9af804",
      "text": "We note that the neighboring relation is often defined in terms of the [[Hamming distance]] (instead of size of symmetric difference) yielding a slightly different notion of sensitivity. All our results can be easily modified to accomodate this variant. Furthermore, one can define sensitivity with respect to any metric on the output space; see Section 3.3"
    },
    {
      "type": "pagefold",
      "id": "defce0f221ea9499",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "0772e789ba1baf55",
      "text": "\"Calibrating Noise to Sensitivity in Private Data Analysis\" by Dwork et al., p. 31"
    },
    {
      "type": "pagefold",
      "id": "42ccd5d9df80ec63",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "3be52c23623c9f2c",
      "text": "How is the Hamming distance related to this \"sensitivity\"?"
    },
    {
      "type": "pagefold",
      "id": "457e39c8dc722666",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "694a0db22df71ec2",
      "text": "The [[Hamming distance]] is related to the sensitivity in the sense that it is used to quantify the amount of change in the output of a query function when a single individual's data is included or excluded from the dataset. In \"Calibrating Noise to Sensitivity in Private Data Analysis\" by Dwork et al., the sensitivity of a query function is defined as the maximum of the absolute value of the difference between the query function's output on two datasets that differ by at most one individual's data.\n\nThe Hamming distance is a way to measure the difference between two binary strings of the same length. It is defined as the number of positions in which the two strings differ. In this context, it can be used to compare the outputs of a query function on two datasets that differ by at most one individual's data.\n\nFor example, if a query function returns a binary string that represents a count of the number of individuals in a dataset with a certain attribute, the Hamming distance between the outputs of the query function on two datasets that differ by one individual's attribute can be used to calculate the sensitivity of the query function. If the Hamming distance is 1, then the sensitivity is 1, since the output of the query function changed by 1 when one individual's attribute was changed."
    },
    {
      "type": "pagefold",
      "id": "2772839512725439",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "213a059243fb973d",
      "text": "How is the Hamming distance related to this \"sensitivity\"? as JavaScript code"
    },
    {
      "type": "pagefold",
      "id": "020369ce65a12e2c",
      "text": "chat.openai",
      "alias": "457e39c8dc722666"
    },
    {
      "type": "paragraph",
      "id": "c7ee33c99e4c4b0a",
      "text": "Here's an example of how the Hamming distance could be calculated in JavaScript:"
    },
    {
      "type": "code",
      "id": "e4852198b69ba55e",
      "text": "function hammingDistance(str1, str2) {\n  if (str1.length !== str2.length) {\n    throw new Error(\"Input strings must have the same length.\");\n  }\n\n  let distance = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] !== str2[i]) {\n      distance++;\n    }\n  }\n\n  return distance;\n}\n"
    },
    {
      "type": "paragraph",
      "id": "b0ce1df7fb0a9adf",
      "text": "This function takes in two binary strings, str1 and str2, and compares them character by character. If a character in the same position of both strings is different, the distance is incremented. Finally, it returns the total distance."
    },
    {
      "type": "paragraph",
      "id": "5b662b27480080c9",
      "text": "Here's an example of how it could be used to calculate the sensitivity of a query function in JavaScript:"
    },
    {
      "type": "code",
      "id": "0fc6b840a412330c",
      "text": "function queryFunction(dataset) {\n  // Your code here to determine the output of the query function\n  let output;\n  return output;\n}\n\nlet dataset1 = [/* list of individuals */];\nlet dataset2 = [/* list of individuals */];\n\nlet sensitivity = hammingDistance(queryFunction(dataset1), queryFunction(dataset2));\n"
    },
    {
      "type": "paragraph",
      "id": "17371eb737d8176e",
      "text": "In this example, the queryFunction takes in a dataset and returns a binary string. The dataset1 and dataset2 are two datasets that differ by at most one individual's data. By calling the queryFunction on both datasets and passing the output to hammingDistance function, you can calculate the sensitivity of the query function, which is the maximum of the absolute value of the difference between the query function's output on two datasets that differ by at most one individual's data."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Sensitivity",
        "story": []
      },
      "date": 1674841556133
    },
    {
      "item": {
        "type": "factory",
        "id": "2aecb1fcde9af804"
      },
      "id": "2aecb1fcde9af804",
      "type": "add",
      "date": 1674841557767
    },
    {
      "type": "edit",
      "id": "2aecb1fcde9af804",
      "item": {
        "type": "paragraph",
        "id": "2aecb1fcde9af804",
        "text": "We note that the neighboring relation is often defined in terms of the Hamming distance (instead of size of symmetric difference) yielding a slightly different notion of sensitivity. All our results can be easily modified to accomodate this variant. Furthermore, one can define sensitivity with respect to any metric on the output space; see Section 3.3"
      },
      "date": 1674841560184
    },
    {
      "item": {
        "type": "factory",
        "id": "defce0f221ea9499"
      },
      "id": "defce0f221ea9499",
      "type": "add",
      "after": "2aecb1fcde9af804",
      "date": 1674841572905
    },
    {
      "type": "edit",
      "id": "defce0f221ea9499",
      "item": {
        "type": "pagefold",
        "id": "defce0f221ea9499",
        "text": "~"
      },
      "date": 1674841575871
    },
    {
      "item": {
        "type": "factory",
        "id": "0772e789ba1baf55"
      },
      "id": "0772e789ba1baf55",
      "type": "add",
      "after": "defce0f221ea9499",
      "date": 1674841577241
    },
    {
      "type": "edit",
      "id": "0772e789ba1baf55",
      "item": {
        "type": "paragraph",
        "id": "0772e789ba1baf55",
        "text": "Dwork et. al., Calibrating noise to sensitivity in private data analysis, p. "
      },
      "date": 1674841599038
    },
    {
      "type": "edit",
      "id": "0772e789ba1baf55",
      "item": {
        "type": "paragraph",
        "id": "0772e789ba1baf55",
        "text": "Dwork et. al., Calibrating noise to sensitivity in private data analysis, p. 31"
      },
      "date": 1674841608333
    },
    {
      "type": "edit",
      "id": "2aecb1fcde9af804",
      "item": {
        "type": "paragraph",
        "id": "2aecb1fcde9af804",
        "text": "We note that the neighboring relation is often defined in terms of the [[Hamming distance]] (instead of size of symmetric difference) yielding a slightly different notion of sensitivity. All our results can be easily modified to accomodate this variant. Furthermore, one can define sensitivity with respect to any metric on the output space; see Section 3.3"
      },
      "date": 1674841621098
    },
    {
      "item": {
        "type": "factory",
        "id": "42ccd5d9df80ec63"
      },
      "id": "42ccd5d9df80ec63",
      "type": "add",
      "after": "0772e789ba1baf55",
      "date": 1674841672862
    },
    {
      "type": "edit",
      "id": "42ccd5d9df80ec63",
      "item": {
        "type": "pagefold",
        "id": "42ccd5d9df80ec63",
        "text": "~"
      },
      "date": 1674841679924
    },
    {
      "item": {
        "type": "factory",
        "id": "3be52c23623c9f2c"
      },
      "id": "3be52c23623c9f2c",
      "type": "add",
      "after": "42ccd5d9df80ec63",
      "date": 1674841693879
    },
    {
      "type": "edit",
      "id": "3be52c23623c9f2c",
      "item": {
        "type": "paragraph",
        "id": "3be52c23623c9f2c",
        "text": "How is the Hamming distance related to this \"sensitivity\"?"
      },
      "date": 1674841697516
    },
    {
      "id": "457e39c8dc722666",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "457e39c8dc722666",
        "text": "chat.openai"
      },
      "after": "3be52c23623c9f2c",
      "date": 1674841700124
    },
    {
      "item": {
        "type": "factory",
        "id": "694a0db22df71ec2"
      },
      "id": "694a0db22df71ec2",
      "type": "add",
      "after": "457e39c8dc722666",
      "date": 1674841709347
    },
    {
      "type": "edit",
      "id": "694a0db22df71ec2",
      "item": {
        "type": "paragraph",
        "id": "694a0db22df71ec2",
        "text": "The Hamming distance is related to the sensitivity in the sense that it is used to quantify the amount of change in the output of a query function when a single individual's data is included or excluded from the dataset. In \"Calibrating Noise to Sensitivity in Private Data Analysis\" by Dwork et al., the sensitivity of a query function is defined as the maximum of the absolute value of the difference between the query function's output on two datasets that differ by at most one individual's data.\n\nThe Hamming distance is a way to measure the difference between two binary strings of the same length. It is defined as the number of positions in which the two strings differ. In this context, it can be used to compare the outputs of a query function on two datasets that differ by at most one individual's data.\n\nFor example, if a query function returns a binary string that represents a count of the number of individuals in a dataset with a certain attribute, the Hamming distance between the outputs of the query function on two datasets that differ by one individual's attribute can be used to calculate the sensitivity of the query function. If the Hamming distance is 1, then the sensitivity is 1, since the output of the query function changed by 1 when one individual's attribute was changed."
      },
      "date": 1674841711658
    },
    {
      "type": "edit",
      "id": "0772e789ba1baf55",
      "item": {
        "type": "paragraph",
        "id": "0772e789ba1baf55",
        "text": "\"Calibrating Noise to Sensitivity in Private Data Analysis\" by Dwork et al., p. 31"
      },
      "date": 1674841786497
    },
    {
      "type": "edit",
      "id": "694a0db22df71ec2",
      "item": {
        "type": "paragraph",
        "id": "694a0db22df71ec2",
        "text": "The [[Hamming distance]] is related to the sensitivity in the sense that it is used to quantify the amount of change in the output of a query function when a single individual's data is included or excluded from the dataset. In \"Calibrating Noise to Sensitivity in Private Data Analysis\" by Dwork et al., the sensitivity of a query function is defined as the maximum of the absolute value of the difference between the query function's output on two datasets that differ by at most one individual's data.\n\nThe Hamming distance is a way to measure the difference between two binary strings of the same length. It is defined as the number of positions in which the two strings differ. In this context, it can be used to compare the outputs of a query function on two datasets that differ by at most one individual's data.\n\nFor example, if a query function returns a binary string that represents a count of the number of individuals in a dataset with a certain attribute, the Hamming distance between the outputs of the query function on two datasets that differ by one individual's attribute can be used to calculate the sensitivity of the query function. If the Hamming distance is 1, then the sensitivity is 1, since the output of the query function changed by 1 when one individual's attribute was changed."
      },
      "date": 1674841926344
    },
    {
      "item": {
        "type": "factory",
        "id": "2772839512725439"
      },
      "id": "2772839512725439",
      "type": "add",
      "after": "694a0db22df71ec2",
      "date": 1674841979139
    },
    {
      "type": "edit",
      "id": "2772839512725439",
      "item": {
        "type": "pagefold",
        "id": "2772839512725439",
        "text": "~"
      },
      "date": 1674841983040
    },
    {
      "item": {
        "type": "factory",
        "id": "213a059243fb973d"
      },
      "id": "213a059243fb973d",
      "type": "add",
      "after": "2772839512725439",
      "date": 1674841984581
    },
    {
      "type": "edit",
      "id": "213a059243fb973d",
      "item": {
        "type": "paragraph",
        "id": "213a059243fb973d",
        "text": "How is the Hamming distance related to this \"sensitivity\"? as JavaScript code"
      },
      "date": 1674841991907
    },
    {
      "id": "020369ce65a12e2c",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "020369ce65a12e2c",
        "text": "chat.openai",
        "alias": "457e39c8dc722666"
      },
      "after": "213a059243fb973d",
      "date": 1674841995433
    },
    {
      "item": {
        "type": "factory",
        "id": "c7ee33c99e4c4b0a"
      },
      "id": "c7ee33c99e4c4b0a",
      "type": "add",
      "after": "020369ce65a12e2c",
      "date": 1674842002663
    },
    {
      "type": "edit",
      "id": "c7ee33c99e4c4b0a",
      "item": {
        "type": "paragraph",
        "id": "c7ee33c99e4c4b0a",
        "text": "Here's an example of how the Hamming distance could be calculated in JavaScript:"
      },
      "date": 1674842005822
    },
    {
      "item": {
        "type": "factory",
        "id": "e4852198b69ba55e"
      },
      "id": "e4852198b69ba55e",
      "type": "add",
      "after": "c7ee33c99e4c4b0a",
      "date": 1674842010303
    },
    {
      "type": "edit",
      "id": "e4852198b69ba55e",
      "item": {
        "type": "code",
        "id": "e4852198b69ba55e",
        "text": "function hammingDistance(str1, str2) {\n  if (str1.length !== str2.length) {\n    throw new Error(\"Input strings must have the same length.\");\n  }\n\n  let distance = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] !== str2[i]) {\n      distance++;\n    }\n  }\n\n  return distance;\n}\n"
      },
      "date": 1674842012891
    },
    {
      "item": {
        "type": "factory",
        "id": "b0ce1df7fb0a9adf"
      },
      "id": "b0ce1df7fb0a9adf",
      "type": "add",
      "after": "e4852198b69ba55e",
      "date": 1674842037541
    },
    {
      "type": "edit",
      "id": "b0ce1df7fb0a9adf",
      "item": {
        "type": "paragraph",
        "id": "b0ce1df7fb0a9adf",
        "text": "This function takes in two binary strings, str1 and str2, and compares them character by character. If a character in the same position of both strings is different, the distance is incremented. Finally, it returns the total distance."
      },
      "date": 1674842040353
    },
    {
      "item": {
        "type": "factory",
        "id": "5b662b27480080c9"
      },
      "id": "5b662b27480080c9",
      "type": "add",
      "after": "b0ce1df7fb0a9adf",
      "date": 1674842059758
    },
    {
      "type": "edit",
      "id": "5b662b27480080c9",
      "item": {
        "type": "paragraph",
        "id": "5b662b27480080c9",
        "text": "Here's an example of how it could be used to calculate the sensitivity of a query function in JavaScript:"
      },
      "date": 1674842061715
    },
    {
      "item": {
        "type": "factory",
        "id": "0fc6b840a412330c"
      },
      "id": "0fc6b840a412330c",
      "type": "add",
      "after": "5b662b27480080c9",
      "date": 1674842066025
    },
    {
      "type": "edit",
      "id": "0fc6b840a412330c",
      "item": {
        "type": "code",
        "id": "0fc6b840a412330c",
        "text": "function queryFunction(dataset) {\n  // Your code here to determine the output of the query function\n  let output;\n  return output;\n}\n\nlet dataset1 = [/* list of individuals */];\nlet dataset2 = [/* list of individuals */];\n\nlet sensitivity = hammingDistance(queryFunction(dataset1), queryFunction(dataset2));\n"
      },
      "date": 1674842069116
    },
    {
      "item": {
        "type": "factory",
        "id": "17371eb737d8176e"
      },
      "id": "17371eb737d8176e",
      "type": "add",
      "after": "0fc6b840a412330c",
      "date": 1674842079264
    },
    {
      "type": "edit",
      "id": "17371eb737d8176e",
      "item": {
        "type": "paragraph",
        "id": "17371eb737d8176e",
        "text": "In this example, the queryFunction takes in a dataset and returns a binary string. The dataset1 and dataset2 are two datasets that differ by at most one individual's data. By calling the queryFunction on both datasets and passing the output to hammingDistance function, you can calculate the sensitivity of the query function, which is the maximum of the absolute value of the difference between the query function's output on two datasets that differ by at most one individual's data."
      },
      "date": 1674842080803
    }
  ]
}