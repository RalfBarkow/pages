{
  "title": "You Arent Gonna Need It",
  "story": [
    {
      "type": "html",
      "text": "[[You Arent Gonna Need It]] (often abbreviated YAGNI, or [[Yag Ni]] on this wiki) is an [[Extreme Programming]] practice which states:",
      "id": "34f0ff136dee843dc6499c0318d84141"
    },
    {
      "type": "html",
      "text": "\"Always implement things when you <b>actually</b> need them, never when you just <b>foresee</b> that you need them.\"",
      "id": "5992e9059f7df9761d2221aeebce0317"
    },
    {
      "type": "html",
      "text": "\nEven if you're totally, totally, totally sure that you'll need a feature <i>later on</i>, don't implement it now. Usually, it'll turn out either a) you don't need it after all, or b) what you actually need is quite different from what you foresaw needing earlier.",
      "id": "2d4a293ed8796cea7d60a14599821b67"
    },
    {
      "type": "html",
      "text": "\nThis doesn't mean you should avoid building flexibility into your code. It means you shouldn't overengineer something based on what you <b>think you might need later on</b>.",
      "id": "5b6314e3d088b665c02f7f5c4e27405d"
    },
    {
      "type": "html",
      "text": "\nThis also follows the KISS theorem: Keep it simple, stupid!",
      "id": "b8093d7ce6d0cdd7f8dcd4243466a46a"
    },
    {
      "type": "html",
      "text": "\nThere are two main reasons to practise [[Yag Ni]]:",
      "id": "1845e25b8e53104af8d254040d468c9c"
    },
    {
      "type": "html",
      "text": " You save time, because you avoid writing code that you turn out not to need.",
      "id": "fe14dbe4ecd1e309f61b403d6ae0412a"
    },
    {
      "type": "html",
      "text": " Your code is better, because you avoid polluting it with 'guesses' that turn out to be more or less wrong but stick around anyway.",
      "id": "35312bc827b18ca0f84edff2c6eede45"
    },
    {
      "type": "html",
      "text": "\nA scenario from [[Ron Jeffries]] explains the practices:",
      "id": "f129d3b7fd01ffe253ee062abfc604aa"
    },
    {
      "type": "html",
      "text": "\nYou're working on some class. You have just added some functionality that you need. You realize that you are going to need some other bit of functionality.\nIf you don't need it now, don't add it now. Why not?",
      "id": "90a9bb06bbda3b5c4bedd0deb92a9427"
    },
    {
      "type": "html",
      "text": "\"OK, Sam, why do you want to add it now?\"",
      "id": "0f8a6bedd73b5922f37c4afa653f8c02"
    },
    {
      "type": "html",
      "text": "\"Well, Ron, it will save time later.\"",
      "id": "dbbf84a121d5fa5900a00e43051f11a4"
    },
    {
      "type": "html",
      "text": "\nBut unless your <b>universe</b> is very different from mine, you can't 'save' time by doing the work now, <i>unless</i> it will take more time to do it later than it will to do now. So you are saying:",
      "id": "ebaf3af86f7a8314aa52070a3d336525"
    },
    {
      "type": "html",
      "text": "\"We will be able to do less work overall, at the cost of doing more work now.\"",
      "id": "387614d6b1b3442220f0561324cce9f2"
    },
    {
      "type": "html",
      "text": "\nBut unless your <b>project</b> is very different from mine, you already have too much to do right now. Doing more now is a very bad thing when you already have too much to do.",
      "id": "a953bb3a0458bfeb3976149cea9ee5f2"
    },
    {
      "type": "html",
      "text": "\nAnd unless your <b>mind</b> is very different from mine, there is a high chance that you won't need it after all, or that you'll need to rewrite or fix it once you <b>do</b> need it. If either of these happens, not only will you waste time overall, you will prevent yourself from adding things that you <i>do</i> need right now.",
      "id": "f1a0ea82630c1809bded83abfda49977"
    },
    {
      "type": "html",
      "text": "\"But Ron, I know how to do it right now, and later I might not.\"",
      "id": "fe2ac27f613c7c2a1495b542e4e05472"
    },
    {
      "type": "html",
      "text": "\"So, Sam, you're telling me that this class you're writing is so complex that even <b>you</b> won't be able to maintain it?\"",
      "id": "1eea3faa5e3d697f571b4e778be51864"
    },
    {
      "type": "html",
      "text": "\nKeep it simple. If you need it, you can put it in later. If you don't need it, you won't have to do the work at all. Take that day off.",
      "id": "2620528ff8d41206bca18001364cc6b8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "To the tune of \"We're Not Gonna Take It\" by The Who, from the classic rock opera \"Tommy\", which is highly recommended.",
      "id": "af0b4db5ec3d6cdfc3094c9b6d92d37c"
    },
    {
      "type": "code",
      "text": " You ain't gonna need it!\n Never did and never will!\n Don't need featuritis\n And the users will never tell.",
      "id": "7f77f780c71d1f14d1ffb2c21b660346"
    },
    {
      "type": "code",
      "text": " You ain't gonna need it\n Half a feature's \n better than \n none...",
      "id": "aeb3dc4566a341f2df3aeddcdf5faf20"
    },
    {
      "type": "html",
      "text": "||:<br>Test me... Code me.. Refactor me... In'grate me... :|| ",
      "id": "ff9a5eb1c6cd3092af3b427697135885"
    },
    {
      "type": "code",
      "text": " (x8)",
      "id": "f4b544d9e510487ff1042c2368b668b4"
    },
    {
      "type": "code",
      "text": " List'ning to you, we get the features\n Planning with you, we get priorit-eees\n Coding for you, we build releases\n Pairing for you, we make deliver-eees",
      "id": "889bf48a22fa662142e64d8fc64f8317"
    },
    {
      "type": "code",
      "text": "  - Phlip (on the XP mailing list)",
      "id": "8aa4feeaf56c8348bbbc6cae3777a9da"
    },
    {
      "type": "html",
      "text": "\nP.S. There is another song with the same name, featured in the teen testosterone flick \"Iron Eagle\", \"Twisted Sister\". ''Both bands did (<b>rather</b> different) songs of that name; the takeoff here is based on the rather earlier one by The Who.",
      "id": "36edd633787e818183eb1979af01c887"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "<b>[[You Arent Gonna Need It]] in the context of the other [[Extreme Programming]] practices</b>",
      "id": "24b40e71cb816b86faa2cdac90b21d50"
    },
    {
      "type": "html",
      "text": "\nYou have a [[Release Plan]]: each [[User Story]] has been assigned to an Iteration where it will be done. Under the current [[Iteration Plan]], you are working on an [[Engineering Task]] that you signed up for, in support of one of the Iteration's [[User Stories]]. As always, you have signed up for as much [[Ideal Programming Time]] as your [[Load Factor]] indicates you can accomplish.",
      "id": "5f5611c2e053a2e2bf4340b9d57b3e1e"
    },
    {
      "type": "html",
      "text": "\nYou are evolving the system to have the new functionality required by the [[User Story]], defined in the [[Engineering Task]]. You add capability to any class we need to, directly growing from the requirement. If you find yourself writing duplicate code, you refactor to eliminate it, even (perhaps) adding an abstract class, or making a subclass, etc. You and your co-programmers always keep the code clean.",
      "id": "58c60ef1f1e1e1ea2ffec011112e14ae"
    },
    {
      "type": "html",
      "text": "\nYou're building a class, and suddenly you get an idea for a feature you could add to it. You don't need it right now, but \"Someday we're gonna need ...\", you say to yourself.",
      "id": "e0dd5e0c6b987dbe42e234ed47195158"
    },
    {
      "type": "html",
      "text": "\nKeep in mind that you are employing other [[Extreme Programming]] practices that allow you to deal with the future when it happens. [[Collective Code Ownership]] allows you to change anybody else's code to give it the functionality you want. [[Refactor Mercilessly]] and [[Once And Only Once]] make it easier to understand the best way to add your functionality. [[Unit Test]]s help ensure that your added functionality won't break any past functionality. So if you do need to implement this feature in the future, it probably won't be much harder than it would be to implement now.",
      "id": "05e1f1c37bc5c4339fee777ebf32af5b"
    },
    {
      "type": "html",
      "text": "\nAt this moment, you have a choice: continue working on what you signed up to do, or begin working on something you didn't sign up to do, and that isn't needed in this Iteration.",
      "id": "3b02cb2297d0471d4db77664e707d220"
    },
    {
      "type": "html",
      "text": "\nTherefore, tell yourself [[You Arent Gonna Need It]]. Set aside your thoughts and fears about tomorrow and get back to work on today. Without a clear use for the feature, you don't know enough about what is really needed. Spending time on it is speculative at best.",
      "id": "f2daf75e39a61c637a54c5a4b670fd82"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "How serious are we about this? Here's how serious: if a developer finds a method in the system that is not sent, she should remove it. Ditto unused classes, in spades.",
      "id": "902bff2536e52de5bd94f4f50dd6bed6"
    },
    {
      "type": "html",
      "text": "\nThe upside in a nutshell: it keeps the system small and understandable.",
      "id": "d2e67a1d96f67a3b837f25f672e649cf"
    },
    {
      "type": "html",
      "text": "\nThe downside would seem to be that it may take longer in the future to do something that would have taken less time now. <b>This turns out not to be the case. It has never happened in two years on the C3 project that we wish we had added functionality we didn't need at the time.</b> <i>There's something of the self-fulfilling prophecy about this argument. I've been trying to persuade myself to adopt YAGNI more rigorously for several years, but I haven't managed it yet. As a result, I occasionally come across cases where I think I'm glad I didn't.</i> <b>On the other hand, if you've gone bankrupt implementing features you didn't actually need, you'll self-fulfill in the other direction.</b>",
      "id": "a51f457448f5684f1c9d97b3d5f7c841"
    },
    {
      "type": "html",
      "text": "\nReplacement/paraphrase of deleted comment: \"Ummm...but the C3 project didn't turn out so well, as I understand it, so how well does it really serve as an anecdote?\"",
      "id": "947bedcf437071627a17e95a9d45596b"
    },
    {
      "type": "html",
      "text": "<i>That depends on whether or not [[Cthree Project Terminated]] due to a lack of unforeseen future functionality and if [[Was Chrysler Comprehensive Compensation Success]] even though it was terminated early.</i>",
      "id": "26a3e8cd77cb1c9fddf7f1b11e18086b"
    },
    {
      "type": "html",
      "text": "\nThere are, on the other hand, places where the system isn't what it ought to be. These are mostly due to these causes:",
      "id": "fea43d10a8c78f17aa327e7486e4e31d"
    },
    {
      "type": "html",
      "text": " Use of a framework that's bigger than the actual problem we have;",
      "id": "009dfc5d171aeb156e2e7561a9d8d1d4"
    },
    {
      "type": "html",
      "text": " Over-engineering, resulting in classes that are too complex but hard to refactor down to reasonable;",
      "id": "1e3db33bae70fb08d99c598f45f26783"
    },
    {
      "type": "html",
      "text": " Delay in refactoring something that needed it.",
      "id": "b9da12cd5b8bc3342a90cae03d5d5669"
    },
    {
      "type": "html",
      "text": "\nThere <b>are</b>, therefore, cases where we wish we had done better engineering of what we had ... but not cases where we wish we had put in things to be used later.",
      "id": "0a5c2d79736505aef661f80c90a11395"
    },
    {
      "type": "html",
      "text": "\nContributors: [[Kiel Hodges]] [[Ron Jeffries]] and many many others",
      "id": "c7bba40afff1020d5feacd13ddf7e535"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "Traditionally, ordering your implementation efforts has been done by subsystem - you implement everything in a subsystem's interface, and then move on to implementing the next subsystem, and that makes for a lot of useless overhead with a [[Big Bang]] at the end where you do all your testing and QA. [[You Arent Gonna Need It]] is suited to an iterative or evolutionary development method whereby you do a fair amount of planning and architecture definition up front, and then implement by feature-set rather than by subsystem.",
      "id": "dc9be33557c3fe2ce3cf1c21de574a46"
    },
    {
      "type": "html",
      "text": "-- [[Peter Merel]]",
      "id": "01a9bc421d8cac3d83821a97cde92f55"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "As I just wrote in [[Shield Pattern]], I think this is an example of a force, not a pattern. There are circumstances where premature work would be wasted. There are also circumstances where a little bit of forethought and planning has saved me enormous effort further down the line. The best way to balance conflicting forces may not be to yield to one of them. (PS. I think identifying forces, and their strengths, is a valuable contribution - see [[Pattern Component]].)",
      "id": "e7426fb557fd61842aa0aae448ed433c"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "5f000c9194f63a7b7f66467068060f54"
    },
    {
      "type": "html",
      "text": "<i>I suggest that the forces are the cost of investing now, vs savings then, or something like that. The pattern would be \"Do it now\" or \"Do it later\", perhaps?</i>",
      "id": "414359485b2b7a9f98702b1dc4d99113"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "Not only might you not need it in the future - even if you do, it might not take the exact form then, that you can anticipate now. Also, how are you going to test it, if you don't need it now?",
      "id": "57d9cffc7a7b565006b49d7391839421"
    },
    {
      "type": "html",
      "text": "\nThe one exception that I would make to this is consistency with standards. For example, if I have a standard that I always provide a getter for any setter, I will add it immediately, even if I don't need it now, lest someone trying to maintain the class later assume that I really intended the attribute to be write-only.",
      "id": "dae9dfed0d37cc93c99587e47c9b46bb"
    },
    {
      "type": "html",
      "text": "-- [[Russell Gold]]",
      "id": "d70e30ad8a1afbce910a1a7819b766fa"
    },
    {
      "type": "html",
      "text": " I don't always provide getters for setters. I'd say your second paragraph here should be in the opposing column, because it advocates writing stuff you don't need. -- [[Dave Harris]]",
      "id": "63c586ed001938584f5ad6de9262195c"
    },
    {
      "type": "html",
      "text": " I would first take a careful look at any code that requires a \"setter.\" Directly changing a class variable is a strong hint you have an encapsulation problem.",
      "id": "70bd94931c7bb1b9e7996bbcb15e13b5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "I've been meaning to say this for a while. Here goes. I think that much of the conversation that we have been having about [[Extreme Programming]] practices, and many of the contentions, have been because of [[Premature Generalization]]. Not in code, but in concepts. [[You Arent Gonna Need It]] has spawned an incredible number of subpages and back and forth discussions. I'm now convinced that this is because the words [[You Arent Gonna Need It]] themselves have no context. At first glance, that is <i>without reading further and looking at Ron's page and much of the discussion</i>, the words can be used to justify just about any form of avoidance right down to hacking.",
      "id": "2882c4adb151d02ec959c55d32b0ab02"
    },
    {
      "type": "html",
      "text": "\nThat said, I understand what is intended by the words [[You Arent Gonna Need It]], but it is only through context and example. The words themselves are aphorism that can be taken to be very general. I am excited about [[Extreme Programming]] and I hope that descriptions are published, but I also hope that enough context is published to prevent misunderstanding. -- [[Michael Feathers]] ",
      "id": "335b24e9f958e0e11909d588a4cca4d2"
    },
    {
      "type": "html",
      "text": "<i>This is an interesting and important point, IMO. Kent and I both like strong statements, memorable phrases. \"[[Extreme Programming]]\" for example. To try to learn what a pattern is from its name, however evocative, is perilous. [[Extreme Programming]] and [[You Arent Gonna Need It]] aren't even patterns yet, they are characterizations of a philosophy that is undergoing change and testing every day. We XPers may be generalizing prematurely in thinking we know what we are doing: our readers are certainly generalizing prematurely if they assume that a phrase like [[You Arent Gonna Need It]] justifies hacking or writing only half a function. Thanks for putting this idea so clearly. Rewrote the lead-in in response. -- [[Ron Jeffries]]</i>",
      "id": "f7b439a9e66e2cce66526b85362c5e93"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "Twice, in different organizations that practiced traditional [[Code Ownership]], I've seen situations where a developer got ahead of the rest of the team, and, rather than helping the team catch up, spent time making their yet-to-be-used code \"reusable,\" adding features that would <i>certainly</i> be needed. But by the time the team caught up, more was known about the problem, requirements had drifted, the design had changed, <i>etc.</i> But there sat the developer with the work of art into which he'd poured all of his talents, unwilling\nto acknowledge that it wasn't quite what the rest of the team needed after all, and resisting requests for changes. -- [[Dave Smith]]",
      "id": "7a64bc1e9530325c74897d1912106f52"
    },
    {
      "type": "html",
      "text": " Agreed. I don't think anyone is advocating this. -- [[Dave Harris]]",
      "id": "9d2a0a0df7a9a769c77c3cbb6b359e67"
    },
    {
      "type": "html",
      "text": "\n[[Premature Generalization]] can be a triple whammy:",
      "id": "e8ce9e07808b706c64844cf2407d3e74"
    },
    {
      "type": "html",
      "text": " time that could have been spent helping the team reach a milestone is lost",
      "id": "387a78396db16e01977d0b1c25a96d01"
    },
    {
      "type": "html",
      "text": " the code base gets bloated",
      "id": "eadd4f3e1a0816b74315390f996cde5e"
    },
    {
      "type": "html",
      "text": " enflamed egos weaken the team.",
      "id": "54343f0f308d05b4fb12d88a6768f78d"
    },
    {
      "type": "html",
      "text": "Better to build what you need as you need it, avoiding unused clutter, and discovering and harvesting reusable components as you go.",
      "id": "4323b394fb0ae9523d6eddf3ad329d47"
    },
    {
      "type": "html",
      "text": "-- [[Dave Smith]]",
      "id": "587203dc09ab55bbd88441b8bcf59a97"
    },
    {
      "type": "html",
      "text": "\nThe \"did you finish high priority task X?\", \"No, but I wrote this neat new feature\" conversation doesn't just happen between programmer and PMs. More than a few times as a programmer I've had to prod my fellow coders to complete work I'm dependent on for my progress. As much as I might like to do mine and my co-workers tasks, I've never found that conducive to meeting schedules. -- [[Steven Newton]]",
      "id": "c81b6888250b8f1b189d14d95e4c65d1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "In the large C and C++ projects I've worked on, the implied message is often \"we don't want to <i>touch</i> that part again,\" since touching often means recompiling, and touching the lower levels may imply rebuilding most or all of the product. The fear I perceive in my co-workers is that if you don't do the lower levels right the first time, you're going to spend 60+% of your time just waiting for the product to build.",
      "id": "c1afb030e2ea80bf8eb65d93396c7ca2"
    },
    {
      "type": "html",
      "text": "\n[[You Arent Gonna Need It]] is a lot easier in Smalltalk than it is in C++. -- [[Dave Smith]]",
      "id": "54fb1bc6a5eca52a5e3e2eafa98fcbbc"
    },
    {
      "type": "html",
      "text": "<i>Change can be difficult when the tools don't support it. When it's possible you should choose your tools and processes to make change easy, but you don't always have that luxury, and the practices must bend accordingly. Nonetheless, all things being equal, a process that invests less in unnecessary futures will have more to spend on necessary presents (for the staff). The question becomes: what's necessary.</i>",
      "id": "7ae6dac7a76410a32c097169bec136f7"
    },
    {
      "type": "html",
      "text": "<i>You can refactor C++, but it takes focus. The less people are allowed to refactor, the more the \"get it right\" fear takes hold. But if you have comprehensive unit tests for every part of the system, and you work hard all the time to reduce the compile time impact of changes - tightening up use of forward declarations, narrowing the interfaces between different packages - you can make it easier to have highly changeable C++.</i>",
      "id": "1d87b51a042abd47a67f2ee48d5407ee"
    },
    {
      "type": "html",
      "text": "<i>People can refactor in C++. The perception that it's hard to do so is most of the problem.</i>",
      "id": "0e8b021ca3fc86c498b376436c0dc2da"
    },
    {
      "type": "html",
      "text": "<i>And how large does a system have to be before you can't build it every day anyway?</i>",
      "id": "f5d26e332cab093b879526c19b56fadb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "If I was applying [[You Arent Gonna Need It]] while I was implementing #isLeapYear in Date, and I knew, from previous difficult experience, about all the various flavors of leap years, and I was acting as a moral developer (or if I was tempted not to, at least my partner was acting moral), <b>then</b> I would implement [[Unit Test]]s representing all the interesting problems I knew about and I wouldn't be done with the [[Engineering Task]] until they worked. If I didn't know about such problem, but I suspected them, I would do the necessary research before starting.",
      "id": "377ba364316a450d6a00270a3adffa73"
    },
    {
      "type": "html",
      "text": "\n[[You Arent Gonna Need It]] is not the same as forgetting experience, acting stupid, or abandoning morals. It is a challenge to developers to abandon their fears of a far-flung future that may never happen and do an absolutely stellar job of solving today's problems today. Actually, when I violate this rule, it is typically because I am overwhelmed by my fears of not being good enough for today's task. Solving tomorrow's problem is an excellent avoidance strategy, because you can't be proven wrong.",
      "id": "9faf7c9245c2d318da6fda39aaf5d515"
    },
    {
      "type": "html",
      "text": "-- [[Kent Beck]] <i>[[Be Brave Little Piglet]]</i>",
      "id": "4f406a2ac7bee06afd5cdd1366f6de80"
    },
    {
      "type": "html",
      "text": "\nA consistent thread here is that there are two different time periods, <b>now</b> and <b>later</b>. The anti-YAGNI folks seem to believe that in <b>now</b>, there is enough time to implement the needed features plus extra time to add possibly-desired future features (including generality and flexibility). This is good thing, because <b>later</b> there won't be enough time to add the newly-needed features, and only the efficient use of the extra <b>now</b> time allows <b>later</b> work to be successful.",
      "id": "148244fd611906880b83d85330cb5505"
    },
    {
      "type": "html",
      "text": "\nIf this is true, then what happens when it's <b>even later</b>? Does the project collapse under it's own weight? Does there need to be more time spent <b>now</b> to plan for the features needed <b>even later</b> (since there certainly isn't extra time <b>later</b>)?",
      "id": "ab8068b13320493e01d0ecae2786acaf"
    },
    {
      "type": "html",
      "text": "\nThe YAGNI rebuttal is that since there will always be an <b>even later</b>, treat <b>now</b> the same as <b>later</b> by doing <b>now's</b> work <b>now</b> and <b>later's</b> work <b>later</b>. -- [[Jeremy Cromwell]]",
      "id": "2d085c437c13eb8609cba1a41ef70099"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "At times, I've seen the idea of leaving extra unused fields in data structures to be useful for expansion and backward compatibility. I'm not sure how to reconcile it with [[Extreme Programming]], but in my experience it can work. Of course, empty space is not functionality.",
      "id": "80c921ad63048177355bf962d40169ed"
    },
    {
      "type": "html",
      "text": "-- [[Cayte Lindner]]",
      "id": "02d713a326ecf16adc7f999d01fca91e"
    },
    {
      "type": "html",
      "text": "\nWhen I have an \"inspiration\" to add a method to a class that isn't needed right away, I create it, but the body just throws an exception. That way I \"save\" the idea, don't spend the time writing the method, and it's easily caught in testing when it _is_ used.",
      "id": "8c5de8e265f9de536bba0a572b8c8d84"
    },
    {
      "type": "html",
      "text": "-- [[Rob Crawford]]",
      "id": "2cef27cdc962c0368d5409ce469a4797"
    },
    {
      "type": "html",
      "text": "<i>Kind of like eating carrots when you really want a smoke. On C3, we would have to build a special convention. One of the ways we remind ourselves [[You Arent Gonna Need It]] is that all engineers routinely remove methods that have no senders. -- [[Ron Jeffries]]</i>",
      "id": "2cde8fea9dfa07eef8855968be50eedb"
    },
    {
      "type": "html",
      "text": "... Bit aggressive that: do you dispense with backing up if you don't have a crash for a while too? :-o -- [[Andrew Cates]]",
      "id": "14ce3b6810644d8b6d4ce85833f65900"
    },
    {
      "type": "html",
      "text": " I think that YAGNI applied to backups would be: \"Don't start doing backups until you have crashed\". And no, I wouldn't seriously advocate that either. (But when <b>do</b> you first need it?) Nothing about YAGNI calls upon the removal of function that was added when it was needed: that would be [[You No Longer Need It]].",
      "id": "228622b11fae046a11f71214fcf5bd16"
    },
    {
      "type": "html",
      "text": "<i>I think the principle applied to backups is \"Don't do them until you need them\", where \"you need them\" equates to \"you are storing important data\" rather than \"you have crashed\" - [[John James Irvine]]</i>",
      "id": "561bd6ed2e8ba9bf08dbcd3c2287749a"
    },
    {
      "type": "html",
      "text": " I find that some XP practices, notably Yagni and [[Once And Only Once]], are supposed to only really apply to the code. With code, it's easy to add stuff when you need it (or at least no harder). In the physical world, the cost of change is usually much higher. This is why we have backups, insurance, and fire-proof safes. It is also why many xp practices <i>seem</i> silly if you think about them with a physical metaphor.",
      "id": "c8801e610d72737ae10b64fbbf6f8a44"
    },
    {
      "type": "html",
      "text": "\nI tend to use comments for the same purpose, though the 'method that throws an exception' idea seems useful. If YAGNI, but you know _now_ how to do it, why not install the method as either an exception-thrower or a comment, and comment heavily on how to do it? Documenting thoughts, plans and possibilities doesn't take long - certainly less time than implementing and thoroughly testing - but ensures that whatever you're worried about is written down for the next person to consider.",
      "id": "31f84a998dec0f10ebe25ff85b5a792b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "How about an example: A client asks for a system to hold ten objects, so I write code using an array of size ten. A week later the client says that they want to add more objects on the fly. So I rebuild using a Vector (I'm programming in Java). I could've used a Vector first time 'round, but didn't because of YAGNI, and an array is by most definitions simpler. And now I've got to start from scratch. Is this a problem with YAGNI, or how I'm interpreting it?",
      "id": "d239e94ab2062e632883049bb243429a"
    },
    {
      "type": "html",
      "text": "<i>When the client changes, amends, or further explains a requirements, some changes are to be expected. The point is to keep the roots of a change shallow to make it easy to pull out later. To guess and guess wrong about what a client's future intentions may be only grows those entwining roots deeper and make the choice even harder to rip out later.</i>",
      "id": "4fd134f046249a286a8be45b269d0a8a"
    },
    {
      "type": "html",
      "text": "<i>In the example you've got, there's three sets of objects. They are the container, the objects to go into the container, and the clients to the container. The last two wouldn't have to be changed, assuming you've got decent encapsulation.</i>",
      "id": "80cfb0a64bde3b84beba56a5bcf5751f"
    },
    {
      "type": "html",
      "text": "<i>But if you choose the Vector to begin with, you might not be so careful about enforcing encapsulation. So if the customer asks you to store a list of Strings along with objects, and you have to change your container from Vector to [[Hash Map]], the change might be difficult.</i>",
      "id": "d01e7ce924f5c39a0ce22e400673fd52"
    },
    {
      "type": "html",
      "text": "<i>The point is that the requirements are always going to change in unpredictable ways, so trying to design for that unpredictable future is a losing proposition. But you'll always need flexibility, so designing for flexibility is a winning proposition. If you have flexibility, then the cost of putting in the feature when it's actually needed shouldn't be much higher than putting it in at the start.</i>",
      "id": "582d9b41c9ea88cc3a944c6e342d97bb"
    },
    {
      "type": "html",
      "text": "<i>And is an array necessarily simpler than a container class? [[Do The Simplest Thing That Could Possibly Work]] is a subjective standard and will vary somewhat individual to individual. (See [[What Is Simplest]] for more.)</i>",
      "id": "0090057b28a8850bff8bdb39b0cb113a"
    },
    {
      "type": "html",
      "text": "<b>Concur.</b> The \"simplest\" thing is not a license to implement an under-designed solution to a system, particularly when your vision of the client's needs may extend beyond his own.",
      "id": "48136e057c6df94d7c4d51d0abc88df2"
    },
    {
      "type": "html",
      "text": "\nIn other words, there is another pattern at work here: [[The Customer Will Always Want More]]. No, really. Every single time.",
      "id": "b2d8fd2e629e0f2a4c4b87c760af590e"
    },
    {
      "type": "html",
      "text": "<i>No, you miss the point. If you put the customer's objects into a [[Tree Map]] instead of an [[Array List]], just because you thought he would eventually ask you to index them by string, you're screwing the pooch. Do what is right for right now, and write good code. That's all.</i>",
      "id": "2260173751e49e085fecad6b2a5e5c7a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "I exercise forethought when we go on a car trip. I run around grabbing everything we might need or want on the road -- food, six different things to read, umbrellas, and of course baby stuff: the stroller, some blankets, toys, two snuglis, lots of formula, one diaper per hour, a whole big package of wipes...",
      "id": "7e2db36358d7ad12abc5e02f40c014ce"
    },
    {
      "type": "html",
      "text": "\nMy wife, on the other hand, exercises <i>more</i> forethought: she points out that we don't actually need most of the stuff, and that there's a lot of benefit to traveling light - we get going faster, we have room to bring stuff back with us, we don't have a bunch of stuff to bring in from the car when we get home late at night.",
      "id": "f720b3cd82098b9f2d5131a30b7d18e1"
    },
    {
      "type": "html",
      "text": "\nI wonder how she'd react to a new nickname: \"Yagni\". -- [[George Paci]]",
      "id": "f2efb1e984a218d866e82400896317e1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "Perhaps, if you <b>know</b> that you're going to need to do X, then adding X isn't a violation of YAGNI or DTSTTCPW.",
      "id": "6be301615ff793e3cccc9b0935d61616"
    },
    {
      "type": "html",
      "text": "<i>But suppose you implement <b></i> X </b><i> (needed now) and <b></i> Y </b><i> (you claim (correctly) that you'll need it) and the time taken to implement <b></i> Y </b><i> now takes you beyond a time limit of which you weren't aware. The project is cancelled, so you really didn't need <b></i> Y </b><i> after all. What's more, if you hadn't spent the time on <b></i> Y </b><i> you would have satisfied the [[Gold Owner]]/[[Goal Donor]] enough that the project would not have been cancelled.</i>",
      "id": "9aa5e98bb307c9bb7f872eb37858ff9c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "<i>I've worked with \"balls out, get the job done quickly\" programmers, and while that seems to be very YAGNI, it wasn't very Good.</i>",
      "id": "65bf0a8b0c39ef70a4e0317148e7ae11"
    },
    {
      "type": "html",
      "text": "\nThat may seem to be very YAGNI but I don't think it's what the pro-YAGNI folks are talking about. YAGNI is a principle meant to be applied within the context of XP, or at the very least a set of practices that includes refactoring. As [[Kent Beck]] points out toward the top of the page, adhering to YAGNI without the pairing, unit testing and refactoring (i.e. balls out, get the job done quickly) \"clearly doesn't work.\" -- [[Jason Arhart]]  <i>Huh?  Blowing off mental masturbation and avoiding issues that aren't actually pressing doesn't require XP at all.  YAGNI, and the sky ain't gonna fall!</i>",
      "id": "39af8fccf2a53806f8a1fc133c3e8c6c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "I can't help thinking that there are essentially a set of well known exceptions to [[You Arent Gonna Need It]] where no experienced developer would seriously consider waiting until later on to implement a probable requirement. At the moment the only one I can can think of is internationalization. Would you really write a large financial application for a European multi-national with hard coded messages everywhere and worry about internationalization later? -- [[David Plumpton]]",
      "id": "a50aa12f78ec2c69115121ec250490d2"
    },
    {
      "type": "html",
      "text": "\nIf the client is deploying this application around the world, then you are going to need it, and it will be reflected in the [[User Stories]] to prove it. If the client is only deploying it in one office in the US, you aren't gonna need it. In the latter case, many would (and have) argue that you should put it in anyway; YAGNI disagrees.",
      "id": "465b39d490d3845832ec09e4bc93b0d6"
    },
    {
      "type": "html",
      "text": "<i>There's no question that i18n is difficult. The question is: Is it much more difficult if you wait to do it when you need it? If somebody gave me pre-existing software and told me to internationalize it, the first thing I would do would be search all the code for instances of text-delimiting characters like \", ', and (if your language uses \"here\" documents) <<. I wonder if that would take care of the problem ... -- francis</i>",
      "id": "057776f2f9c876ab0c31b51a1fff480d"
    },
    {
      "type": "html",
      "text": "\nNo, I think i18n is a good example of something you would want to start doing from the beginning (or not too far into development). There are many considerations to be made throughout the development. However, YAGNI still holds if the client doesn't make it a priority.",
      "id": "908ef9120ff6767fb56b24744d0d30b5"
    },
    {
      "type": "html",
      "text": "<i>It seems to me that hard-coded constants of any kind - messages, magic numbers, whatever - are inherently inflexible and should be avoided on general principles. You can make it possible to internationalize later without taking the time to fully implement your interface in ten different languages.</i> ",
      "id": "fd26449c5f78bbf8173ed9720ad33ee0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "I think what causes much confusion for the readers (ok, I admit it: I talk about myself here) is where to draw the line between \"foresightment\" and \"programming unneeded features\".",
      "id": "459f50689fa118c3ad670321f67495b3"
    },
    {
      "type": "html",
      "text": "\nHardcoding messages for the user into the code does not sound smart - but it would apply to the YAGNI rule. I know when I write a program, that with high probability there will be an point in the future when someone wants a change to a message. Be it that the program is released in another language, or just that there is an spelling error.",
      "id": "2a56f184ee400e346269be93dc5ac0ba"
    },
    {
      "type": "html",
      "text": "\nIf you used the YAGNI rule, you would have to search through the code for every message. If you had foreseen that (from experience), and written something to make messages easily accessible, you could have saved a lot of time. Or am I wrong here?",
      "id": "668656b981930a59eaaf3f4a778dfb5c"
    },
    {
      "type": "html",
      "text": "\nSo is foreseeing later problems always bad?",
      "id": "ee377e2438024d5214662dede79dbc5a"
    },
    {
      "type": "html",
      "text": "\nAren't [[Unit Test]]s in some way breaking the YAGNI rule? Since you write something you only need if you write bad code?",
      "id": "c28c088b496a53c20dcebfc63ae9b576"
    },
    {
      "type": "html",
      "text": "<i>Possible sources for an answer: [[Economics Of Yagni]], [[When Are We Gonna Need It]], [[Yagni Is Bologna]], [[Xp Simplicity Rules]]</i> and [[Test Driven Development]]",
      "id": "4c1119ebdedebb6b816cdacfcc7bf7be"
    },
    {
      "type": "html",
      "text": "\nIn XP you need Unit Tests in this iteration, because you will do continuous integration and probably also some refactoring.",
      "id": "e4b2fde6492364ffdef6a993fe90e3f1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "From my experience trying to explain YAGNI to less XP-enlightened developers, I have come to deprecate \"YAGNI\", in favour of [[Wd Niy]] ([[We Dont Need It Yet]])",
      "id": "bae1870d659b3c0b60f24f386006715c"
    },
    {
      "type": "html",
      "text": "-- [[Douglas Dickinson]]",
      "id": "b0148e290e010b0b758dfcb477d5c716"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "<b>[[Problem Domain]] and applicability</b>",
      "id": "8e3518cc70c1e36c1bbbd526b316d673"
    },
    {
      "type": "html",
      "text": "\nMay I make a suggestion. I think YAGNI, like most XP policies, is a good set of ideas to keep in mind, but another is \"know your problem space\". YAGNI doesn't mean you should choose an array of 10 spaces over a Vector. Most programmers know that if you need two, you need many, so if you have the choice, you choose a solution with the ability to expand. [A]",
      "id": "e6b837606e3b6e156bdeca30dfa043cb"
    },
    {
      "type": "html",
      "text": "\nMy motto has always been more along the lines of: Understand the problem space to the best of your abilities including required, optional and possible requirements. Once you have done this, program so as not to preclude the optional/possible requirements wherever possible.",
      "id": "cc9d2a349393888ed1337e9de99cebd4"
    },
    {
      "type": "html",
      "text": "-- [[Bill Kress]]",
      "id": "cc5b03e1d4e0897caacb2e4610dbf035"
    },
    {
      "type": "html",
      "text": "\nThere are exceptions. Twos may just be binary splitting; threes are almost always manys. -- Joshua Hudson [B]",
      "id": "00de21d0bfe4cd96e2467458cb384438"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "I've very recently had an [[Aha Moment]] regarding this topic. For ages I've considered YAGNI harmful for various reasons, but what if we shift the emphasis to the YOU, as in <i>YOU aren't gonna need it</i>. Suddenly, we can drop all these discussions about time as YAGNI ceases to be a statment about <i>now</i> and <i>then</i>, and becomes a statement about <i>you</i> and <i>them</i>. This formulation sits a lot better with me, though of course it is very open ended as to who exactly you are (developer, team, or company?). -- [[Richard Cordova]]",
      "id": "b218f8030ea273b776c570cb8446ad17"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "What is the [[Opposite Of Yagni]]? ",
      "id": "7d9aa6e1beb8ca25d8fc454ecc8f1df9"
    },
    {
      "type": "html",
      "text": "<i>Would [[Couple Leaping With Looking]] serve the purpose?</i>",
      "id": "9b9b30cba0e2690024a86206762f3cb0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "Sometimes [[You Are Gonna Need It]] (a good solution) because if you start out with something bad and continue to hack the bad solution ([[You Arent Gonna Need It]]), it might end up worse than if you had done some thoughtful design first. ",
      "id": "9ecac7e9ffced1a175880f382b446fae"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "[[How Do You Know You Arent Gonna Need It Eh]] (HdykYagniE) and [[So You Really Think Your Arent Gonna Need It Ha]] (SyrtYagniH):",
      "id": "383c81fc74f435972d5bc1acc02f0cd1"
    },
    {
      "type": "html",
      "text": "\nYagni is often applied as a principle to justify failure (hesitation, decision) to partition or to separate fully (see [[Principles Of Object Oriented Design]] and [[Separation Of Concerns]]).  ",
      "id": "275e859faf46721aa21f87247d135fcd"
    },
    {
      "type": "html",
      "text": "\nHowever, [[Hdyk Yagni]] and [[Syrt Yagni]] are applicable as principles to counter such justification.  I suppose that such a counter could get into even more questionable principles such as [[But We Have Never Needed It Before]] or [[Even If We May Need It We Cant Mess With It Now]].",
      "id": "e02326f42c34d46743e96ecbb19d3056"
    },
    {
      "type": "html",
      "text": "\nAll of this may have more to do with [[Organizational Psychology]] than [[Object Orientation]].",
      "id": "991370a3d3592ddd5e5562177ed51234"
    },
    {
      "type": "html",
      "text": "-- [[Carl Castro]] (Carl R Castro)",
      "id": "64dfc329961913574b10497222572ce7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "Several people on this page have mentioned something I believe to be key to understanding YAGNI. Every programmer makes judgment calls all the time about whether to invest now for the future, or delay work to the future. The programmer must evaluate the costs of implementing more general and reusable code vs the cost of doing that more powerful implementation. It's the simple standard question of investment, which every programmer does on a daily basis. These things play out when deciding if you should invest in code: ",
      "id": "d06d070543ddeeb39f0931b3dc11ad79"
    },
    {
      "type": "html",
      "text": "\n1- What's the cost of the investment, of writing the \"better\" code now? ",
      "id": "4bd356f342709e2855d03514f7a41aaa"
    },
    {
      "type": "html",
      "text": "\n2- What's the cost of delaying? AKA How much harder would it be to write later vs now? ",
      "id": "9d01136af0964d10f482be4e33000df6"
    },
    {
      "type": "html",
      "text": "\n3- What's the likelihood of the investment being used, and how much value would having this investment be? ",
      "id": "9814e0baa3650a5945478c531da5a647"
    },
    {
      "type": "html",
      "text": "\n4- What is your time horizon? Do we need something now, and the future is less important? This is a very normative question which depends on the company, share holders, etc. ",
      "id": "fe4bd50868c1cd1a884591c5e3f984eb"
    },
    {
      "type": "html",
      "text": "\n5- Opportunity cost. Could your time be better spent elsewhere? ",
      "id": "335081df39f3e795f3f86f0776c9f60d"
    },
    {
      "type": "html",
      "text": "\nYAGNI is simply an observation that many people do not base their designs on cost benefit analysis. They program for fun, for academic reasons, etc., and not for the company's bottom line, and this is a very bad kind of programmer to have in a company. ",
      "id": "1f6bc4aa17f1598d2c160c6be81c7dda"
    },
    {
      "type": "html",
      "text": "\nFor example: the aforementioned case of using Java built-in array vs Java Vector. It's a simple decision. There is no cost to invest in the better implementation, the implementation using Java Vector, thus you should invest. You may or may not use the more powerful aspects of a dynamically resizing container, but you lose nothing by using Vector over an array. ",
      "id": "7a18df420215ed6dac12a9854b6665a0"
    },
    {
      "type": "html",
      "text": "\nHowever, you might have a case where you need to decide between single threaded, multi threaded, or distributed. There are definite costs in implementing the \"better\" system over the simpler system, so you need to do the proper cost benefit analysis as outlined above in order to reach a reasonable conclusion. ",
      "id": "613b01cb4bc04ddfab7c5004e7e489ed"
    },
    {
      "type": "html",
      "text": "\nAs a vague claim unsupported by facts, I tend to believe that a <i>little</i> investment up front for a cleaner design almost always pays off in the end. Not very YAGNI I know. However, in my current company, I see many many places where I wish people did practice YAGNI, instead of producing overcomplicated designs that are a pain to debug, enhance, and maintain. ",
      "id": "a6a31138140b803993db74c247437e3d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "Someone added the following text to the original story. I removed it to here because I think we reserve the first section for arguments in favor of an article. Maybe create [[You Are Gonna Need It]] if you feel the need to embellish the story.",
      "id": "edb0d1b00fe30b7b951aebf7ac8c0ea1"
    },
    {
      "type": "html",
      "text": "\"Ron, stop being a dramatic prick.  Let me explain this in terms even your feeble mind can understand.  I have spent the last few days concentrating on this issue, and it is fresh in my mind.  The probability of me generating bugs by adding the feature now is much lower than if I came back to this in a year or two and attempted to do it with imperfect understanding.  Any programmer with any experience in the field understands this concept.  If you don't understand this, you have no business being a programmer.  Furthermore, there is some non-zero probability that it won't be me maintaining this code.  It might even be--God help us--<b>you</b> maintaining the code.  I know you'll get it wrong in various and subtle ways, so I'm saving the company from that.\"",
      "id": "3ac535607e338234fef06cd2505952c7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "<b>See Also</b>",
      "id": "c5ad534dce868628132c169cb866b83d"
    },
    {
      "type": "html",
      "text": "\n[[You Arent Gonna Need It]] has generated many related pages. If you have comments or questions about YAGNI, please consider using one of the pages below rather than adding new comments to this page.",
      "id": "045a989547660cc5afe2d43615064222"
    },
    {
      "type": "html",
      "text": "\nYou might or might not need it:",
      "id": "68be209259418be1f7aaab592df7cb82"
    },
    {
      "type": "html",
      "text": "[[You Are Gonna Need It]], [[You Might Need It]], [[You Really Arent Gonna Need This]], [[When Are We Gonna Need It]], [[Daves Real Example Where Thinking Ahead Would Have Helped]], [[Yagni Exceptions]]",
      "id": "d18e04424e333835126d5f37261ab08c"
    },
    {
      "type": "html",
      "text": "\nOrganizational and methodological issues:",
      "id": "5c8d3aa5d995f6d1dd791566efd66503"
    },
    {
      "type": "html",
      "text": "[[Oaoo Balances Yagni]], [[Economics Of Yagni]], [[Yagni And Company Assets]], [[Yagni And Reuse]], [[Yagni And Team Dynamics]], [[Eliciting Requirements]]",
      "id": "658f395bf0142a2b9d972df657a07c2d"
    },
    {
      "type": "html",
      "text": "\nYAGNI as applied to specific domains:",
      "id": "5adcdc13cbe374d418846c52dced2fae"
    },
    {
      "type": "html",
      "text": "[[You Arent Gonna Need It And Ytwok]], [[Yagni And Logging]], [[Needing Binary Search]], [[Not Needing Binary Search]], [[Yagni And Databases]], [[Yagni And Cpp]], [[Yagni And Cost Of Change]]",
      "id": "a7b22cb232274eb1b3dc4c5255d5c49e"
    },
    {
      "type": "html",
      "text": "\nPages with related philosophies:",
      "id": "14190f6ffd4ec5e90000eacb0893d693"
    },
    {
      "type": "html",
      "text": "[[Do The Simplest Thing That Could Possibly Work]], [[Just Sufficient Implementation]], [[Premature Generalization]], [[Just In Time Programming]], [[Forth Values]]",
      "id": "c89fa4f02b0ed518ce08c667f0515319"
    },
    {
      "type": "html",
      "text": "Others:",
      "id": "2f83f98f05282798346b17e2e3b9e674"
    },
    {
      "type": "html",
      "text": "[[Extreme Need]], [[Refactoring Yagni]], [[Yagni Is Bologna]], [[Does Yagni Interrupt Flow]], [[Yagni And Deleting]], [[Decision Math And Yagni]], [[Future Discounting]]",
      "id": "30d92f05cc43975bf75d58efdd6a0ac9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
    },
    {
      "type": "html",
      "text": "[[Category Extreme Programming]], [[Category Decision Making]], [[Category Jargon]]",
      "id": "8aaef6615679fe708d6dc920c7b015c4"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?YouArentGonnaNeedIt c2.com]",
      "id": "9c70e327250044baecb9607912831eb5"
    }
  ],
  "journal": [
    {
      "date": 1416882548000,
      "id": "ee584a4e6f25b576fbce627ab0d9122c",
      "type": "create",
      "item": {
        "title": "You Arent Gonna Need It",
        "story": [
          {
            "type": "html",
            "text": "[[You Arent Gonna Need It]] (often abbreviated YAGNI, or [[Yag Ni]] on this wiki) is an [[Extreme Programming]] practice which states:",
            "id": "34f0ff136dee843dc6499c0318d84141"
          },
          {
            "type": "html",
            "text": "\"Always implement things when you <b>actually</b> need them, never when you just <b>foresee</b> that you need them.\"",
            "id": "5992e9059f7df9761d2221aeebce0317"
          },
          {
            "type": "html",
            "text": "\nEven if you're totally, totally, totally sure that you'll need a feature <i>later on</i>, don't implement it now. Usually, it'll turn out either a) you don't need it after all, or b) what you actually need is quite different from what you foresaw needing earlier.",
            "id": "2d4a293ed8796cea7d60a14599821b67"
          },
          {
            "type": "html",
            "text": "\nThis doesn't mean you should avoid building flexibility into your code. It means you shouldn't overengineer something based on what you <b>think you might need later on</b>.",
            "id": "5b6314e3d088b665c02f7f5c4e27405d"
          },
          {
            "type": "html",
            "text": "\nThis also follows the KISS theorem: Keep it simple, stupid!",
            "id": "b8093d7ce6d0cdd7f8dcd4243466a46a"
          },
          {
            "type": "html",
            "text": "\nThere are two main reasons to practise [[Yag Ni]]:",
            "id": "1845e25b8e53104af8d254040d468c9c"
          },
          {
            "type": "html",
            "text": " You save time, because you avoid writing code that you turn out not to need.",
            "id": "fe14dbe4ecd1e309f61b403d6ae0412a"
          },
          {
            "type": "html",
            "text": " Your code is better, because you avoid polluting it with 'guesses' that turn out to be more or less wrong but stick around anyway.",
            "id": "35312bc827b18ca0f84edff2c6eede45"
          },
          {
            "type": "html",
            "text": "\nA scenario from [[Ron Jeffries]] explains the practices:",
            "id": "f129d3b7fd01ffe253ee062abfc604aa"
          },
          {
            "type": "html",
            "text": "\nYou're working on some class. You have just added some functionality that you need. You realize that you are going to need some other bit of functionality.\nIf you don't need it now, don't add it now. Why not?",
            "id": "90a9bb06bbda3b5c4bedd0deb92a9427"
          },
          {
            "type": "html",
            "text": "\"OK, Sam, why do you want to add it now?\"",
            "id": "0f8a6bedd73b5922f37c4afa653f8c02"
          },
          {
            "type": "html",
            "text": "\"Well, Ron, it will save time later.\"",
            "id": "dbbf84a121d5fa5900a00e43051f11a4"
          },
          {
            "type": "html",
            "text": "\nBut unless your <b>universe</b> is very different from mine, you can't 'save' time by doing the work now, <i>unless</i> it will take more time to do it later than it will to do now. So you are saying:",
            "id": "ebaf3af86f7a8314aa52070a3d336525"
          },
          {
            "type": "html",
            "text": "\"We will be able to do less work overall, at the cost of doing more work now.\"",
            "id": "387614d6b1b3442220f0561324cce9f2"
          },
          {
            "type": "html",
            "text": "\nBut unless your <b>project</b> is very different from mine, you already have too much to do right now. Doing more now is a very bad thing when you already have too much to do.",
            "id": "a953bb3a0458bfeb3976149cea9ee5f2"
          },
          {
            "type": "html",
            "text": "\nAnd unless your <b>mind</b> is very different from mine, there is a high chance that you won't need it after all, or that you'll need to rewrite or fix it once you <b>do</b> need it. If either of these happens, not only will you waste time overall, you will prevent yourself from adding things that you <i>do</i> need right now.",
            "id": "f1a0ea82630c1809bded83abfda49977"
          },
          {
            "type": "html",
            "text": "\"But Ron, I know how to do it right now, and later I might not.\"",
            "id": "fe2ac27f613c7c2a1495b542e4e05472"
          },
          {
            "type": "html",
            "text": "\"So, Sam, you're telling me that this class you're writing is so complex that even <b>you</b> won't be able to maintain it?\"",
            "id": "1eea3faa5e3d697f571b4e778be51864"
          },
          {
            "type": "html",
            "text": "\nKeep it simple. If you need it, you can put it in later. If you don't need it, you won't have to do the work at all. Take that day off.",
            "id": "2620528ff8d41206bca18001364cc6b8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "To the tune of \"We're Not Gonna Take It\" by The Who, from the classic rock opera \"Tommy\", which is highly recommended.",
            "id": "af0b4db5ec3d6cdfc3094c9b6d92d37c"
          },
          {
            "type": "code",
            "text": " You ain't gonna need it!\n Never did and never will!\n Don't need featuritis\n And the users will never tell.",
            "id": "7f77f780c71d1f14d1ffb2c21b660346"
          },
          {
            "type": "code",
            "text": " You ain't gonna need it\n Half a feature's \n better than \n none...",
            "id": "aeb3dc4566a341f2df3aeddcdf5faf20"
          },
          {
            "type": "html",
            "text": "||:<br>Test me... Code me.. Refactor me... In'grate me... :|| ",
            "id": "ff9a5eb1c6cd3092af3b427697135885"
          },
          {
            "type": "code",
            "text": " (x8)",
            "id": "f4b544d9e510487ff1042c2368b668b4"
          },
          {
            "type": "code",
            "text": " List'ning to you, we get the features\n Planning with you, we get priorit-eees\n Coding for you, we build releases\n Pairing for you, we make deliver-eees",
            "id": "889bf48a22fa662142e64d8fc64f8317"
          },
          {
            "type": "code",
            "text": "  - Phlip (on the XP mailing list)",
            "id": "8aa4feeaf56c8348bbbc6cae3777a9da"
          },
          {
            "type": "html",
            "text": "\nP.S. There is another song with the same name, featured in the teen testosterone flick \"Iron Eagle\", \"Twisted Sister\". ''Both bands did (<b>rather</b> different) songs of that name; the takeoff here is based on the rather earlier one by The Who.",
            "id": "36edd633787e818183eb1979af01c887"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "<b>[[You Arent Gonna Need It]] in the context of the other [[Extreme Programming]] practices</b>",
            "id": "24b40e71cb816b86faa2cdac90b21d50"
          },
          {
            "type": "html",
            "text": "\nYou have a [[Release Plan]]: each [[User Story]] has been assigned to an Iteration where it will be done. Under the current [[Iteration Plan]], you are working on an [[Engineering Task]] that you signed up for, in support of one of the Iteration's [[User Stories]]. As always, you have signed up for as much [[Ideal Programming Time]] as your [[Load Factor]] indicates you can accomplish.",
            "id": "5f5611c2e053a2e2bf4340b9d57b3e1e"
          },
          {
            "type": "html",
            "text": "\nYou are evolving the system to have the new functionality required by the [[User Story]], defined in the [[Engineering Task]]. You add capability to any class we need to, directly growing from the requirement. If you find yourself writing duplicate code, you refactor to eliminate it, even (perhaps) adding an abstract class, or making a subclass, etc. You and your co-programmers always keep the code clean.",
            "id": "58c60ef1f1e1e1ea2ffec011112e14ae"
          },
          {
            "type": "html",
            "text": "\nYou're building a class, and suddenly you get an idea for a feature you could add to it. You don't need it right now, but \"Someday we're gonna need ...\", you say to yourself.",
            "id": "e0dd5e0c6b987dbe42e234ed47195158"
          },
          {
            "type": "html",
            "text": "\nKeep in mind that you are employing other [[Extreme Programming]] practices that allow you to deal with the future when it happens. [[Collective Code Ownership]] allows you to change anybody else's code to give it the functionality you want. [[Refactor Mercilessly]] and [[Once And Only Once]] make it easier to understand the best way to add your functionality. [[Unit Test]]s help ensure that your added functionality won't break any past functionality. So if you do need to implement this feature in the future, it probably won't be much harder than it would be to implement now.",
            "id": "05e1f1c37bc5c4339fee777ebf32af5b"
          },
          {
            "type": "html",
            "text": "\nAt this moment, you have a choice: continue working on what you signed up to do, or begin working on something you didn't sign up to do, and that isn't needed in this Iteration.",
            "id": "3b02cb2297d0471d4db77664e707d220"
          },
          {
            "type": "html",
            "text": "\nTherefore, tell yourself [[You Arent Gonna Need It]]. Set aside your thoughts and fears about tomorrow and get back to work on today. Without a clear use for the feature, you don't know enough about what is really needed. Spending time on it is speculative at best.",
            "id": "f2daf75e39a61c637a54c5a4b670fd82"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "How serious are we about this? Here's how serious: if a developer finds a method in the system that is not sent, she should remove it. Ditto unused classes, in spades.",
            "id": "902bff2536e52de5bd94f4f50dd6bed6"
          },
          {
            "type": "html",
            "text": "\nThe upside in a nutshell: it keeps the system small and understandable.",
            "id": "d2e67a1d96f67a3b837f25f672e649cf"
          },
          {
            "type": "html",
            "text": "\nThe downside would seem to be that it may take longer in the future to do something that would have taken less time now. <b>This turns out not to be the case. It has never happened in two years on the C3 project that we wish we had added functionality we didn't need at the time.</b> <i>There's something of the self-fulfilling prophecy about this argument. I've been trying to persuade myself to adopt YAGNI more rigorously for several years, but I haven't managed it yet. As a result, I occasionally come across cases where I think I'm glad I didn't.</i> <b>On the other hand, if you've gone bankrupt implementing features you didn't actually need, you'll self-fulfill in the other direction.</b>",
            "id": "a51f457448f5684f1c9d97b3d5f7c841"
          },
          {
            "type": "html",
            "text": "\nReplacement/paraphrase of deleted comment: \"Ummm...but the C3 project didn't turn out so well, as I understand it, so how well does it really serve as an anecdote?\"",
            "id": "947bedcf437071627a17e95a9d45596b"
          },
          {
            "type": "html",
            "text": "<i>That depends on whether or not [[Cthree Project Terminated]] due to a lack of unforeseen future functionality and if [[Was Chrysler Comprehensive Compensation Success]] even though it was terminated early.</i>",
            "id": "26a3e8cd77cb1c9fddf7f1b11e18086b"
          },
          {
            "type": "html",
            "text": "\nThere are, on the other hand, places where the system isn't what it ought to be. These are mostly due to these causes:",
            "id": "fea43d10a8c78f17aa327e7486e4e31d"
          },
          {
            "type": "html",
            "text": " Use of a framework that's bigger than the actual problem we have;",
            "id": "009dfc5d171aeb156e2e7561a9d8d1d4"
          },
          {
            "type": "html",
            "text": " Over-engineering, resulting in classes that are too complex but hard to refactor down to reasonable;",
            "id": "1e3db33bae70fb08d99c598f45f26783"
          },
          {
            "type": "html",
            "text": " Delay in refactoring something that needed it.",
            "id": "b9da12cd5b8bc3342a90cae03d5d5669"
          },
          {
            "type": "html",
            "text": "\nThere <b>are</b>, therefore, cases where we wish we had done better engineering of what we had ... but not cases where we wish we had put in things to be used later.",
            "id": "0a5c2d79736505aef661f80c90a11395"
          },
          {
            "type": "html",
            "text": "\nContributors: [[Kiel Hodges]] [[Ron Jeffries]] and many many others",
            "id": "c7bba40afff1020d5feacd13ddf7e535"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "Traditionally, ordering your implementation efforts has been done by subsystem - you implement everything in a subsystem's interface, and then move on to implementing the next subsystem, and that makes for a lot of useless overhead with a [[Big Bang]] at the end where you do all your testing and QA. [[You Arent Gonna Need It]] is suited to an iterative or evolutionary development method whereby you do a fair amount of planning and architecture definition up front, and then implement by feature-set rather than by subsystem.",
            "id": "dc9be33557c3fe2ce3cf1c21de574a46"
          },
          {
            "type": "html",
            "text": "-- [[Peter Merel]]",
            "id": "01a9bc421d8cac3d83821a97cde92f55"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "As I just wrote in [[Shield Pattern]], I think this is an example of a force, not a pattern. There are circumstances where premature work would be wasted. There are also circumstances where a little bit of forethought and planning has saved me enormous effort further down the line. The best way to balance conflicting forces may not be to yield to one of them. (PS. I think identifying forces, and their strengths, is a valuable contribution - see [[Pattern Component]].)",
            "id": "e7426fb557fd61842aa0aae448ed433c"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "5f000c9194f63a7b7f66467068060f54"
          },
          {
            "type": "html",
            "text": "<i>I suggest that the forces are the cost of investing now, vs savings then, or something like that. The pattern would be \"Do it now\" or \"Do it later\", perhaps?</i>",
            "id": "414359485b2b7a9f98702b1dc4d99113"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "Not only might you not need it in the future - even if you do, it might not take the exact form then, that you can anticipate now. Also, how are you going to test it, if you don't need it now?",
            "id": "57d9cffc7a7b565006b49d7391839421"
          },
          {
            "type": "html",
            "text": "\nThe one exception that I would make to this is consistency with standards. For example, if I have a standard that I always provide a getter for any setter, I will add it immediately, even if I don't need it now, lest someone trying to maintain the class later assume that I really intended the attribute to be write-only.",
            "id": "dae9dfed0d37cc93c99587e47c9b46bb"
          },
          {
            "type": "html",
            "text": "-- [[Russell Gold]]",
            "id": "d70e30ad8a1afbce910a1a7819b766fa"
          },
          {
            "type": "html",
            "text": " I don't always provide getters for setters. I'd say your second paragraph here should be in the opposing column, because it advocates writing stuff you don't need. -- [[Dave Harris]]",
            "id": "63c586ed001938584f5ad6de9262195c"
          },
          {
            "type": "html",
            "text": " I would first take a careful look at any code that requires a \"setter.\" Directly changing a class variable is a strong hint you have an encapsulation problem.",
            "id": "70bd94931c7bb1b9e7996bbcb15e13b5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "I've been meaning to say this for a while. Here goes. I think that much of the conversation that we have been having about [[Extreme Programming]] practices, and many of the contentions, have been because of [[Premature Generalization]]. Not in code, but in concepts. [[You Arent Gonna Need It]] has spawned an incredible number of subpages and back and forth discussions. I'm now convinced that this is because the words [[You Arent Gonna Need It]] themselves have no context. At first glance, that is <i>without reading further and looking at Ron's page and much of the discussion</i>, the words can be used to justify just about any form of avoidance right down to hacking.",
            "id": "2882c4adb151d02ec959c55d32b0ab02"
          },
          {
            "type": "html",
            "text": "\nThat said, I understand what is intended by the words [[You Arent Gonna Need It]], but it is only through context and example. The words themselves are aphorism that can be taken to be very general. I am excited about [[Extreme Programming]] and I hope that descriptions are published, but I also hope that enough context is published to prevent misunderstanding. -- [[Michael Feathers]] ",
            "id": "335b24e9f958e0e11909d588a4cca4d2"
          },
          {
            "type": "html",
            "text": "<i>This is an interesting and important point, IMO. Kent and I both like strong statements, memorable phrases. \"[[Extreme Programming]]\" for example. To try to learn what a pattern is from its name, however evocative, is perilous. [[Extreme Programming]] and [[You Arent Gonna Need It]] aren't even patterns yet, they are characterizations of a philosophy that is undergoing change and testing every day. We XPers may be generalizing prematurely in thinking we know what we are doing: our readers are certainly generalizing prematurely if they assume that a phrase like [[You Arent Gonna Need It]] justifies hacking or writing only half a function. Thanks for putting this idea so clearly. Rewrote the lead-in in response. -- [[Ron Jeffries]]</i>",
            "id": "f7b439a9e66e2cce66526b85362c5e93"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "Twice, in different organizations that practiced traditional [[Code Ownership]], I've seen situations where a developer got ahead of the rest of the team, and, rather than helping the team catch up, spent time making their yet-to-be-used code \"reusable,\" adding features that would <i>certainly</i> be needed. But by the time the team caught up, more was known about the problem, requirements had drifted, the design had changed, <i>etc.</i> But there sat the developer with the work of art into which he'd poured all of his talents, unwilling\nto acknowledge that it wasn't quite what the rest of the team needed after all, and resisting requests for changes. -- [[Dave Smith]]",
            "id": "7a64bc1e9530325c74897d1912106f52"
          },
          {
            "type": "html",
            "text": " Agreed. I don't think anyone is advocating this. -- [[Dave Harris]]",
            "id": "9d2a0a0df7a9a769c77c3cbb6b359e67"
          },
          {
            "type": "html",
            "text": "\n[[Premature Generalization]] can be a triple whammy:",
            "id": "e8ce9e07808b706c64844cf2407d3e74"
          },
          {
            "type": "html",
            "text": " time that could have been spent helping the team reach a milestone is lost",
            "id": "387a78396db16e01977d0b1c25a96d01"
          },
          {
            "type": "html",
            "text": " the code base gets bloated",
            "id": "eadd4f3e1a0816b74315390f996cde5e"
          },
          {
            "type": "html",
            "text": " enflamed egos weaken the team.",
            "id": "54343f0f308d05b4fb12d88a6768f78d"
          },
          {
            "type": "html",
            "text": "Better to build what you need as you need it, avoiding unused clutter, and discovering and harvesting reusable components as you go.",
            "id": "4323b394fb0ae9523d6eddf3ad329d47"
          },
          {
            "type": "html",
            "text": "-- [[Dave Smith]]",
            "id": "587203dc09ab55bbd88441b8bcf59a97"
          },
          {
            "type": "html",
            "text": "\nThe \"did you finish high priority task X?\", \"No, but I wrote this neat new feature\" conversation doesn't just happen between programmer and PMs. More than a few times as a programmer I've had to prod my fellow coders to complete work I'm dependent on for my progress. As much as I might like to do mine and my co-workers tasks, I've never found that conducive to meeting schedules. -- [[Steven Newton]]",
            "id": "c81b6888250b8f1b189d14d95e4c65d1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "In the large C and C++ projects I've worked on, the implied message is often \"we don't want to <i>touch</i> that part again,\" since touching often means recompiling, and touching the lower levels may imply rebuilding most or all of the product. The fear I perceive in my co-workers is that if you don't do the lower levels right the first time, you're going to spend 60+% of your time just waiting for the product to build.",
            "id": "c1afb030e2ea80bf8eb65d93396c7ca2"
          },
          {
            "type": "html",
            "text": "\n[[You Arent Gonna Need It]] is a lot easier in Smalltalk than it is in C++. -- [[Dave Smith]]",
            "id": "54fb1bc6a5eca52a5e3e2eafa98fcbbc"
          },
          {
            "type": "html",
            "text": "<i>Change can be difficult when the tools don't support it. When it's possible you should choose your tools and processes to make change easy, but you don't always have that luxury, and the practices must bend accordingly. Nonetheless, all things being equal, a process that invests less in unnecessary futures will have more to spend on necessary presents (for the staff). The question becomes: what's necessary.</i>",
            "id": "7ae6dac7a76410a32c097169bec136f7"
          },
          {
            "type": "html",
            "text": "<i>You can refactor C++, but it takes focus. The less people are allowed to refactor, the more the \"get it right\" fear takes hold. But if you have comprehensive unit tests for every part of the system, and you work hard all the time to reduce the compile time impact of changes - tightening up use of forward declarations, narrowing the interfaces between different packages - you can make it easier to have highly changeable C++.</i>",
            "id": "1d87b51a042abd47a67f2ee48d5407ee"
          },
          {
            "type": "html",
            "text": "<i>People can refactor in C++. The perception that it's hard to do so is most of the problem.</i>",
            "id": "0e8b021ca3fc86c498b376436c0dc2da"
          },
          {
            "type": "html",
            "text": "<i>And how large does a system have to be before you can't build it every day anyway?</i>",
            "id": "f5d26e332cab093b879526c19b56fadb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "If I was applying [[You Arent Gonna Need It]] while I was implementing #isLeapYear in Date, and I knew, from previous difficult experience, about all the various flavors of leap years, and I was acting as a moral developer (or if I was tempted not to, at least my partner was acting moral), <b>then</b> I would implement [[Unit Test]]s representing all the interesting problems I knew about and I wouldn't be done with the [[Engineering Task]] until they worked. If I didn't know about such problem, but I suspected them, I would do the necessary research before starting.",
            "id": "377ba364316a450d6a00270a3adffa73"
          },
          {
            "type": "html",
            "text": "\n[[You Arent Gonna Need It]] is not the same as forgetting experience, acting stupid, or abandoning morals. It is a challenge to developers to abandon their fears of a far-flung future that may never happen and do an absolutely stellar job of solving today's problems today. Actually, when I violate this rule, it is typically because I am overwhelmed by my fears of not being good enough for today's task. Solving tomorrow's problem is an excellent avoidance strategy, because you can't be proven wrong.",
            "id": "9faf7c9245c2d318da6fda39aaf5d515"
          },
          {
            "type": "html",
            "text": "-- [[Kent Beck]] <i>[[Be Brave Little Piglet]]</i>",
            "id": "4f406a2ac7bee06afd5cdd1366f6de80"
          },
          {
            "type": "html",
            "text": "\nA consistent thread here is that there are two different time periods, <b>now</b> and <b>later</b>. The anti-YAGNI folks seem to believe that in <b>now</b>, there is enough time to implement the needed features plus extra time to add possibly-desired future features (including generality and flexibility). This is good thing, because <b>later</b> there won't be enough time to add the newly-needed features, and only the efficient use of the extra <b>now</b> time allows <b>later</b> work to be successful.",
            "id": "148244fd611906880b83d85330cb5505"
          },
          {
            "type": "html",
            "text": "\nIf this is true, then what happens when it's <b>even later</b>? Does the project collapse under it's own weight? Does there need to be more time spent <b>now</b> to plan for the features needed <b>even later</b> (since there certainly isn't extra time <b>later</b>)?",
            "id": "ab8068b13320493e01d0ecae2786acaf"
          },
          {
            "type": "html",
            "text": "\nThe YAGNI rebuttal is that since there will always be an <b>even later</b>, treat <b>now</b> the same as <b>later</b> by doing <b>now's</b> work <b>now</b> and <b>later's</b> work <b>later</b>. -- [[Jeremy Cromwell]]",
            "id": "2d085c437c13eb8609cba1a41ef70099"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "At times, I've seen the idea of leaving extra unused fields in data structures to be useful for expansion and backward compatibility. I'm not sure how to reconcile it with [[Extreme Programming]], but in my experience it can work. Of course, empty space is not functionality.",
            "id": "80c921ad63048177355bf962d40169ed"
          },
          {
            "type": "html",
            "text": "-- [[Cayte Lindner]]",
            "id": "02d713a326ecf16adc7f999d01fca91e"
          },
          {
            "type": "html",
            "text": "\nWhen I have an \"inspiration\" to add a method to a class that isn't needed right away, I create it, but the body just throws an exception. That way I \"save\" the idea, don't spend the time writing the method, and it's easily caught in testing when it _is_ used.",
            "id": "8c5de8e265f9de536bba0a572b8c8d84"
          },
          {
            "type": "html",
            "text": "-- [[Rob Crawford]]",
            "id": "2cef27cdc962c0368d5409ce469a4797"
          },
          {
            "type": "html",
            "text": "<i>Kind of like eating carrots when you really want a smoke. On C3, we would have to build a special convention. One of the ways we remind ourselves [[You Arent Gonna Need It]] is that all engineers routinely remove methods that have no senders. -- [[Ron Jeffries]]</i>",
            "id": "2cde8fea9dfa07eef8855968be50eedb"
          },
          {
            "type": "html",
            "text": "... Bit aggressive that: do you dispense with backing up if you don't have a crash for a while too? :-o -- [[Andrew Cates]]",
            "id": "14ce3b6810644d8b6d4ce85833f65900"
          },
          {
            "type": "html",
            "text": " I think that YAGNI applied to backups would be: \"Don't start doing backups until you have crashed\". And no, I wouldn't seriously advocate that either. (But when <b>do</b> you first need it?) Nothing about YAGNI calls upon the removal of function that was added when it was needed: that would be [[You No Longer Need It]].",
            "id": "228622b11fae046a11f71214fcf5bd16"
          },
          {
            "type": "html",
            "text": "<i>I think the principle applied to backups is \"Don't do them until you need them\", where \"you need them\" equates to \"you are storing important data\" rather than \"you have crashed\" - [[John James Irvine]]</i>",
            "id": "561bd6ed2e8ba9bf08dbcd3c2287749a"
          },
          {
            "type": "html",
            "text": " I find that some XP practices, notably Yagni and [[Once And Only Once]], are supposed to only really apply to the code. With code, it's easy to add stuff when you need it (or at least no harder). In the physical world, the cost of change is usually much higher. This is why we have backups, insurance, and fire-proof safes. It is also why many xp practices <i>seem</i> silly if you think about them with a physical metaphor.",
            "id": "c8801e610d72737ae10b64fbbf6f8a44"
          },
          {
            "type": "html",
            "text": "\nI tend to use comments for the same purpose, though the 'method that throws an exception' idea seems useful. If YAGNI, but you know _now_ how to do it, why not install the method as either an exception-thrower or a comment, and comment heavily on how to do it? Documenting thoughts, plans and possibilities doesn't take long - certainly less time than implementing and thoroughly testing - but ensures that whatever you're worried about is written down for the next person to consider.",
            "id": "31f84a998dec0f10ebe25ff85b5a792b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "How about an example: A client asks for a system to hold ten objects, so I write code using an array of size ten. A week later the client says that they want to add more objects on the fly. So I rebuild using a Vector (I'm programming in Java). I could've used a Vector first time 'round, but didn't because of YAGNI, and an array is by most definitions simpler. And now I've got to start from scratch. Is this a problem with YAGNI, or how I'm interpreting it?",
            "id": "d239e94ab2062e632883049bb243429a"
          },
          {
            "type": "html",
            "text": "<i>When the client changes, amends, or further explains a requirements, some changes are to be expected. The point is to keep the roots of a change shallow to make it easy to pull out later. To guess and guess wrong about what a client's future intentions may be only grows those entwining roots deeper and make the choice even harder to rip out later.</i>",
            "id": "4fd134f046249a286a8be45b269d0a8a"
          },
          {
            "type": "html",
            "text": "<i>In the example you've got, there's three sets of objects. They are the container, the objects to go into the container, and the clients to the container. The last two wouldn't have to be changed, assuming you've got decent encapsulation.</i>",
            "id": "80cfb0a64bde3b84beba56a5bcf5751f"
          },
          {
            "type": "html",
            "text": "<i>But if you choose the Vector to begin with, you might not be so careful about enforcing encapsulation. So if the customer asks you to store a list of Strings along with objects, and you have to change your container from Vector to [[Hash Map]], the change might be difficult.</i>",
            "id": "d01e7ce924f5c39a0ce22e400673fd52"
          },
          {
            "type": "html",
            "text": "<i>The point is that the requirements are always going to change in unpredictable ways, so trying to design for that unpredictable future is a losing proposition. But you'll always need flexibility, so designing for flexibility is a winning proposition. If you have flexibility, then the cost of putting in the feature when it's actually needed shouldn't be much higher than putting it in at the start.</i>",
            "id": "582d9b41c9ea88cc3a944c6e342d97bb"
          },
          {
            "type": "html",
            "text": "<i>And is an array necessarily simpler than a container class? [[Do The Simplest Thing That Could Possibly Work]] is a subjective standard and will vary somewhat individual to individual. (See [[What Is Simplest]] for more.)</i>",
            "id": "0090057b28a8850bff8bdb39b0cb113a"
          },
          {
            "type": "html",
            "text": "<b>Concur.</b> The \"simplest\" thing is not a license to implement an under-designed solution to a system, particularly when your vision of the client's needs may extend beyond his own.",
            "id": "48136e057c6df94d7c4d51d0abc88df2"
          },
          {
            "type": "html",
            "text": "\nIn other words, there is another pattern at work here: [[The Customer Will Always Want More]]. No, really. Every single time.",
            "id": "b2d8fd2e629e0f2a4c4b87c760af590e"
          },
          {
            "type": "html",
            "text": "<i>No, you miss the point. If you put the customer's objects into a [[Tree Map]] instead of an [[Array List]], just because you thought he would eventually ask you to index them by string, you're screwing the pooch. Do what is right for right now, and write good code. That's all.</i>",
            "id": "2260173751e49e085fecad6b2a5e5c7a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "I exercise forethought when we go on a car trip. I run around grabbing everything we might need or want on the road -- food, six different things to read, umbrellas, and of course baby stuff: the stroller, some blankets, toys, two snuglis, lots of formula, one diaper per hour, a whole big package of wipes...",
            "id": "7e2db36358d7ad12abc5e02f40c014ce"
          },
          {
            "type": "html",
            "text": "\nMy wife, on the other hand, exercises <i>more</i> forethought: she points out that we don't actually need most of the stuff, and that there's a lot of benefit to traveling light - we get going faster, we have room to bring stuff back with us, we don't have a bunch of stuff to bring in from the car when we get home late at night.",
            "id": "f720b3cd82098b9f2d5131a30b7d18e1"
          },
          {
            "type": "html",
            "text": "\nI wonder how she'd react to a new nickname: \"Yagni\". -- [[George Paci]]",
            "id": "f2efb1e984a218d866e82400896317e1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "Perhaps, if you <b>know</b> that you're going to need to do X, then adding X isn't a violation of YAGNI or DTSTTCPW.",
            "id": "6be301615ff793e3cccc9b0935d61616"
          },
          {
            "type": "html",
            "text": "<i>But suppose you implement <b></i> X </b><i> (needed now) and <b></i> Y </b><i> (you claim (correctly) that you'll need it) and the time taken to implement <b></i> Y </b><i> now takes you beyond a time limit of which you weren't aware. The project is cancelled, so you really didn't need <b></i> Y </b><i> after all. What's more, if you hadn't spent the time on <b></i> Y </b><i> you would have satisfied the [[Gold Owner]]/[[Goal Donor]] enough that the project would not have been cancelled.</i>",
            "id": "9aa5e98bb307c9bb7f872eb37858ff9c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "<i>I've worked with \"balls out, get the job done quickly\" programmers, and while that seems to be very YAGNI, it wasn't very Good.</i>",
            "id": "65bf0a8b0c39ef70a4e0317148e7ae11"
          },
          {
            "type": "html",
            "text": "\nThat may seem to be very YAGNI but I don't think it's what the pro-YAGNI folks are talking about. YAGNI is a principle meant to be applied within the context of XP, or at the very least a set of practices that includes refactoring. As [[Kent Beck]] points out toward the top of the page, adhering to YAGNI without the pairing, unit testing and refactoring (i.e. balls out, get the job done quickly) \"clearly doesn't work.\" -- [[Jason Arhart]]  <i>Huh?  Blowing off mental masturbation and avoiding issues that aren't actually pressing doesn't require XP at all.  YAGNI, and the sky ain't gonna fall!</i>",
            "id": "39af8fccf2a53806f8a1fc133c3e8c6c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "I can't help thinking that there are essentially a set of well known exceptions to [[You Arent Gonna Need It]] where no experienced developer would seriously consider waiting until later on to implement a probable requirement. At the moment the only one I can can think of is internationalization. Would you really write a large financial application for a European multi-national with hard coded messages everywhere and worry about internationalization later? -- [[David Plumpton]]",
            "id": "a50aa12f78ec2c69115121ec250490d2"
          },
          {
            "type": "html",
            "text": "\nIf the client is deploying this application around the world, then you are going to need it, and it will be reflected in the [[User Stories]] to prove it. If the client is only deploying it in one office in the US, you aren't gonna need it. In the latter case, many would (and have) argue that you should put it in anyway; YAGNI disagrees.",
            "id": "465b39d490d3845832ec09e4bc93b0d6"
          },
          {
            "type": "html",
            "text": "<i>There's no question that i18n is difficult. The question is: Is it much more difficult if you wait to do it when you need it? If somebody gave me pre-existing software and told me to internationalize it, the first thing I would do would be search all the code for instances of text-delimiting characters like \", ', and (if your language uses \"here\" documents) <<. I wonder if that would take care of the problem ... -- francis</i>",
            "id": "057776f2f9c876ab0c31b51a1fff480d"
          },
          {
            "type": "html",
            "text": "\nNo, I think i18n is a good example of something you would want to start doing from the beginning (or not too far into development). There are many considerations to be made throughout the development. However, YAGNI still holds if the client doesn't make it a priority.",
            "id": "908ef9120ff6767fb56b24744d0d30b5"
          },
          {
            "type": "html",
            "text": "<i>It seems to me that hard-coded constants of any kind - messages, magic numbers, whatever - are inherently inflexible and should be avoided on general principles. You can make it possible to internationalize later without taking the time to fully implement your interface in ten different languages.</i> ",
            "id": "fd26449c5f78bbf8173ed9720ad33ee0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "I think what causes much confusion for the readers (ok, I admit it: I talk about myself here) is where to draw the line between \"foresightment\" and \"programming unneeded features\".",
            "id": "459f50689fa118c3ad670321f67495b3"
          },
          {
            "type": "html",
            "text": "\nHardcoding messages for the user into the code does not sound smart - but it would apply to the YAGNI rule. I know when I write a program, that with high probability there will be an point in the future when someone wants a change to a message. Be it that the program is released in another language, or just that there is an spelling error.",
            "id": "2a56f184ee400e346269be93dc5ac0ba"
          },
          {
            "type": "html",
            "text": "\nIf you used the YAGNI rule, you would have to search through the code for every message. If you had foreseen that (from experience), and written something to make messages easily accessible, you could have saved a lot of time. Or am I wrong here?",
            "id": "668656b981930a59eaaf3f4a778dfb5c"
          },
          {
            "type": "html",
            "text": "\nSo is foreseeing later problems always bad?",
            "id": "ee377e2438024d5214662dede79dbc5a"
          },
          {
            "type": "html",
            "text": "\nAren't [[Unit Test]]s in some way breaking the YAGNI rule? Since you write something you only need if you write bad code?",
            "id": "c28c088b496a53c20dcebfc63ae9b576"
          },
          {
            "type": "html",
            "text": "<i>Possible sources for an answer: [[Economics Of Yagni]], [[When Are We Gonna Need It]], [[Yagni Is Bologna]], [[Xp Simplicity Rules]]</i> and [[Test Driven Development]]",
            "id": "4c1119ebdedebb6b816cdacfcc7bf7be"
          },
          {
            "type": "html",
            "text": "\nIn XP you need Unit Tests in this iteration, because you will do continuous integration and probably also some refactoring.",
            "id": "e4b2fde6492364ffdef6a993fe90e3f1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "From my experience trying to explain YAGNI to less XP-enlightened developers, I have come to deprecate \"YAGNI\", in favour of [[Wd Niy]] ([[We Dont Need It Yet]])",
            "id": "bae1870d659b3c0b60f24f386006715c"
          },
          {
            "type": "html",
            "text": "-- [[Douglas Dickinson]]",
            "id": "b0148e290e010b0b758dfcb477d5c716"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "<b>[[Problem Domain]] and applicability</b>",
            "id": "8e3518cc70c1e36c1bbbd526b316d673"
          },
          {
            "type": "html",
            "text": "\nMay I make a suggestion. I think YAGNI, like most XP policies, is a good set of ideas to keep in mind, but another is \"know your problem space\". YAGNI doesn't mean you should choose an array of 10 spaces over a Vector. Most programmers know that if you need two, you need many, so if you have the choice, you choose a solution with the ability to expand. [A]",
            "id": "e6b837606e3b6e156bdeca30dfa043cb"
          },
          {
            "type": "html",
            "text": "\nMy motto has always been more along the lines of: Understand the problem space to the best of your abilities including required, optional and possible requirements. Once you have done this, program so as not to preclude the optional/possible requirements wherever possible.",
            "id": "cc9d2a349393888ed1337e9de99cebd4"
          },
          {
            "type": "html",
            "text": "-- [[Bill Kress]]",
            "id": "cc5b03e1d4e0897caacb2e4610dbf035"
          },
          {
            "type": "html",
            "text": "\nThere are exceptions. Twos may just be binary splitting; threes are almost always manys. -- Joshua Hudson [B]",
            "id": "00de21d0bfe4cd96e2467458cb384438"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "I've very recently had an [[Aha Moment]] regarding this topic. For ages I've considered YAGNI harmful for various reasons, but what if we shift the emphasis to the YOU, as in <i>YOU aren't gonna need it</i>. Suddenly, we can drop all these discussions about time as YAGNI ceases to be a statment about <i>now</i> and <i>then</i>, and becomes a statement about <i>you</i> and <i>them</i>. This formulation sits a lot better with me, though of course it is very open ended as to who exactly you are (developer, team, or company?). -- [[Richard Cordova]]",
            "id": "b218f8030ea273b776c570cb8446ad17"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "What is the [[Opposite Of Yagni]]? ",
            "id": "7d9aa6e1beb8ca25d8fc454ecc8f1df9"
          },
          {
            "type": "html",
            "text": "<i>Would [[Couple Leaping With Looking]] serve the purpose?</i>",
            "id": "9b9b30cba0e2690024a86206762f3cb0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "Sometimes [[You Are Gonna Need It]] (a good solution) because if you start out with something bad and continue to hack the bad solution ([[You Arent Gonna Need It]]), it might end up worse than if you had done some thoughtful design first. ",
            "id": "9ecac7e9ffced1a175880f382b446fae"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "[[How Do You Know You Arent Gonna Need It Eh]] (HdykYagniE) and [[So You Really Think Your Arent Gonna Need It Ha]] (SyrtYagniH):",
            "id": "383c81fc74f435972d5bc1acc02f0cd1"
          },
          {
            "type": "html",
            "text": "\nYagni is often applied as a principle to justify failure (hesitation, decision) to partition or to separate fully (see [[Principles Of Object Oriented Design]] and [[Separation Of Concerns]]).  ",
            "id": "275e859faf46721aa21f87247d135fcd"
          },
          {
            "type": "html",
            "text": "\nHowever, [[Hdyk Yagni]] and [[Syrt Yagni]] are applicable as principles to counter such justification.  I suppose that such a counter could get into even more questionable principles such as [[But We Have Never Needed It Before]] or [[Even If We May Need It We Cant Mess With It Now]].",
            "id": "e02326f42c34d46743e96ecbb19d3056"
          },
          {
            "type": "html",
            "text": "\nAll of this may have more to do with [[Organizational Psychology]] than [[Object Orientation]].",
            "id": "991370a3d3592ddd5e5562177ed51234"
          },
          {
            "type": "html",
            "text": "-- [[Carl Castro]] (Carl R Castro)",
            "id": "64dfc329961913574b10497222572ce7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "Several people on this page have mentioned something I believe to be key to understanding YAGNI. Every programmer makes judgment calls all the time about whether to invest now for the future, or delay work to the future. The programmer must evaluate the costs of implementing more general and reusable code vs the cost of doing that more powerful implementation. It's the simple standard question of investment, which every programmer does on a daily basis. These things play out when deciding if you should invest in code: ",
            "id": "d06d070543ddeeb39f0931b3dc11ad79"
          },
          {
            "type": "html",
            "text": "\n1- What's the cost of the investment, of writing the \"better\" code now? ",
            "id": "4bd356f342709e2855d03514f7a41aaa"
          },
          {
            "type": "html",
            "text": "\n2- What's the cost of delaying? AKA How much harder would it be to write later vs now? ",
            "id": "9d01136af0964d10f482be4e33000df6"
          },
          {
            "type": "html",
            "text": "\n3- What's the likelihood of the investment being used, and how much value would having this investment be? ",
            "id": "9814e0baa3650a5945478c531da5a647"
          },
          {
            "type": "html",
            "text": "\n4- What is your time horizon? Do we need something now, and the future is less important? This is a very normative question which depends on the company, share holders, etc. ",
            "id": "fe4bd50868c1cd1a884591c5e3f984eb"
          },
          {
            "type": "html",
            "text": "\n5- Opportunity cost. Could your time be better spent elsewhere? ",
            "id": "335081df39f3e795f3f86f0776c9f60d"
          },
          {
            "type": "html",
            "text": "\nYAGNI is simply an observation that many people do not base their designs on cost benefit analysis. They program for fun, for academic reasons, etc., and not for the company's bottom line, and this is a very bad kind of programmer to have in a company. ",
            "id": "1f6bc4aa17f1598d2c160c6be81c7dda"
          },
          {
            "type": "html",
            "text": "\nFor example: the aforementioned case of using Java built-in array vs Java Vector. It's a simple decision. There is no cost to invest in the better implementation, the implementation using Java Vector, thus you should invest. You may or may not use the more powerful aspects of a dynamically resizing container, but you lose nothing by using Vector over an array. ",
            "id": "7a18df420215ed6dac12a9854b6665a0"
          },
          {
            "type": "html",
            "text": "\nHowever, you might have a case where you need to decide between single threaded, multi threaded, or distributed. There are definite costs in implementing the \"better\" system over the simpler system, so you need to do the proper cost benefit analysis as outlined above in order to reach a reasonable conclusion. ",
            "id": "613b01cb4bc04ddfab7c5004e7e489ed"
          },
          {
            "type": "html",
            "text": "\nAs a vague claim unsupported by facts, I tend to believe that a <i>little</i> investment up front for a cleaner design almost always pays off in the end. Not very YAGNI I know. However, in my current company, I see many many places where I wish people did practice YAGNI, instead of producing overcomplicated designs that are a pain to debug, enhance, and maintain. ",
            "id": "a6a31138140b803993db74c247437e3d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "Someone added the following text to the original story. I removed it to here because I think we reserve the first section for arguments in favor of an article. Maybe create [[You Are Gonna Need It]] if you feel the need to embellish the story.",
            "id": "edb0d1b00fe30b7b951aebf7ac8c0ea1"
          },
          {
            "type": "html",
            "text": "\"Ron, stop being a dramatic prick.  Let me explain this in terms even your feeble mind can understand.  I have spent the last few days concentrating on this issue, and it is fresh in my mind.  The probability of me generating bugs by adding the feature now is much lower than if I came back to this in a year or two and attempted to do it with imperfect understanding.  Any programmer with any experience in the field understands this concept.  If you don't understand this, you have no business being a programmer.  Furthermore, there is some non-zero probability that it won't be me maintaining this code.  It might even be--God help us--<b>you</b> maintaining the code.  I know you'll get it wrong in various and subtle ways, so I'm saving the company from that.\"",
            "id": "3ac535607e338234fef06cd2505952c7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "<b>See Also</b>",
            "id": "c5ad534dce868628132c169cb866b83d"
          },
          {
            "type": "html",
            "text": "\n[[You Arent Gonna Need It]] has generated many related pages. If you have comments or questions about YAGNI, please consider using one of the pages below rather than adding new comments to this page.",
            "id": "045a989547660cc5afe2d43615064222"
          },
          {
            "type": "html",
            "text": "\nYou might or might not need it:",
            "id": "68be209259418be1f7aaab592df7cb82"
          },
          {
            "type": "html",
            "text": "[[You Are Gonna Need It]], [[You Might Need It]], [[You Really Arent Gonna Need This]], [[When Are We Gonna Need It]], [[Daves Real Example Where Thinking Ahead Would Have Helped]], [[Yagni Exceptions]]",
            "id": "d18e04424e333835126d5f37261ab08c"
          },
          {
            "type": "html",
            "text": "\nOrganizational and methodological issues:",
            "id": "5c8d3aa5d995f6d1dd791566efd66503"
          },
          {
            "type": "html",
            "text": "[[Oaoo Balances Yagni]], [[Economics Of Yagni]], [[Yagni And Company Assets]], [[Yagni And Reuse]], [[Yagni And Team Dynamics]], [[Eliciting Requirements]]",
            "id": "658f395bf0142a2b9d972df657a07c2d"
          },
          {
            "type": "html",
            "text": "\nYAGNI as applied to specific domains:",
            "id": "5adcdc13cbe374d418846c52dced2fae"
          },
          {
            "type": "html",
            "text": "[[You Arent Gonna Need It And Ytwok]], [[Yagni And Logging]], [[Needing Binary Search]], [[Not Needing Binary Search]], [[Yagni And Databases]], [[Yagni And Cpp]], [[Yagni And Cost Of Change]]",
            "id": "a7b22cb232274eb1b3dc4c5255d5c49e"
          },
          {
            "type": "html",
            "text": "\nPages with related philosophies:",
            "id": "14190f6ffd4ec5e90000eacb0893d693"
          },
          {
            "type": "html",
            "text": "[[Do The Simplest Thing That Could Possibly Work]], [[Just Sufficient Implementation]], [[Premature Generalization]], [[Just In Time Programming]], [[Forth Values]]",
            "id": "c89fa4f02b0ed518ce08c667f0515319"
          },
          {
            "type": "html",
            "text": "Others:",
            "id": "2f83f98f05282798346b17e2e3b9e674"
          },
          {
            "type": "html",
            "text": "[[Extreme Need]], [[Refactoring Yagni]], [[Yagni Is Bologna]], [[Does Yagni Interrupt Flow]], [[Yagni And Deleting]], [[Decision Math And Yagni]], [[Future Discounting]]",
            "id": "30d92f05cc43975bf75d58efdd6a0ac9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "48ebd7edabffc7d836f9bd45b5f63fb5"
          },
          {
            "type": "html",
            "text": "[[Category Extreme Programming]], [[Category Decision Making]], [[Category Jargon]]",
            "id": "8aaef6615679fe708d6dc920c7b015c4"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?YouArentGonnaNeedIt c2.com]",
            "id": "9c70e327250044baecb9607912831eb5"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1627419239830
    }
  ]
}