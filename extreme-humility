{
  "title": "Extreme Humility",
  "story": [
    {
      "type": "paragraph",
      "text": "Extreme Humility\nI think ExtremeProgramming and several other similar approaches are based on humility about our abilities:",
      "wiki": "ExtremeHumility",
      "id": "5f69df4c8757e27ew"
    },
    {
      "type": "markdown",
      "text": "* we won't be able to work out all the requirements up front (so allow mid-course corrections).\n* we won't get the design right first time. So don't try! Just DoTheSimplestThingThatCouldPossiblyWork and then RefactorMercilessly.\n* we don't know how implementable this design is. So implement it and see.\n* we'll make mistakes in coding and interpreting designs. So test everything, run the tests every time you make a change.\n* we don't understand the problem well enough to predict what we'll need later. So YouArentGonnaNeedIt.\n* we can't reliably write simple, understandable code on our own, so we work in pairs for constant feedback.",
      "wiki": "ExtremeHumility",
      "id": "10822d0b9a93a3f8w"
    },
    {
      "type": "markdown",
      "id": "e1645e310e01db41",
      "text": "*from [https://wiki.c2.com/?ExtremeHumility wiki.c2.com]*"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Extreme Humility",
        "story": []
      },
      "date": 1639845010724
    },
    {
      "id": "81b8984d0a8df0aw",
      "type": "add",
      "item": {
        "type": "paragraph",
        "text": "Extreme Humility\nI think ExtremeProgramming and several other similar approaches are based on humility about our abilities:",
        "id": "81b8984d0a8df0aw"
      },
      "date": 1639845020198
    },
    {
      "id": "57a22ea059cdecfw",
      "type": "add",
      "item": {
        "type": "paragraph",
        "text": "we won't be able to work out all the requirements up front (so allow mid-course corrections).\nwe won't get the design right first time. So don't try! Just DoTheSimplestThingThatCouldPossiblyWork and then RefactorMercilessly.\nwe don't know how implementable this design is. So implement it and see.\nwe'll make mistakes in coding and interpreting designs. So test everything, run the tests every time you make a change.\nwe don't understand the problem well enough to predict what we'll need later. So YouArentGonnaNeedIt.\nwe can't reliably write simple, understandable code on our own, so we work in pairs for constant feedback.",
        "id": "57a22ea059cdecfw"
      },
      "after": "81b8984d0a8df0aw",
      "date": 1639845025158
    },
    {
      "type": "edit",
      "id": "57a22ea059cdecfw",
      "item": {
        "type": "markdown",
        "text": "* we won't be able to work out all the requirements up front (so allow mid-course corrections).\n* we won't get the design right first time. So don't try! Just DoTheSimplestThingThatCouldPossiblyWork and then RefactorMercilessly.\n* we don't know how implementable this design is. So implement it and see.\n* we'll make mistakes in coding and interpreting designs. So test everything, run the tests every time you make a change.\n* we don't understand the problem well enough to predict what we'll need later. So YouArentGonnaNeedIt.\n* we can't reliably write simple, understandable code on our own, so we work in pairs for constant feedback.",
        "id": "57a22ea059cdecfw"
      },
      "date": 1639845075569
    },
    {
      "type": "edit",
      "id": "57a22ea059cdecfw",
      "item": {
        "type": "markdown",
        "text": "* we won't be able to work out all the requirements up front (so allow mid-course corrections).\n* we won't get the design right first time. So don't try! Just [https://wiki.c2.com/?DoTheSimplestThingThatCouldPossiblyWork Do The Simplest Thing That Could Possibly Work] and then RefactorMercilessly.\n* we don't know how implementable this design is. So implement it and see.\n* we'll make mistakes in coding and interpreting designs. So test everything, run the tests every time you make a change.\n* we don't understand the problem well enough to predict what we'll need later. So YouArentGonnaNeedIt.\n* we can't reliably write simple, understandable code on our own, so we work in pairs for constant feedback.",
        "id": "57a22ea059cdecfw"
      },
      "date": 1639845330842
    },
    {
      "type": "edit",
      "id": "57a22ea059cdecfw",
      "item": {
        "type": "markdown",
        "text": "* we won't be able to work out all the requirements up front (so allow mid-course corrections).\n* we won't get the design right first time. So don't try! Just [https://wiki.c2.com/?DoTheSimplestThingThatCouldPossiblyWork Do The Simplest Thing That Could Possibly Work] and then https://wiki.c2.com/?RefactorMercilessly Refactor Mercilessly].\n* we don't know how implementable this design is. So implement it and see.\n* we'll make mistakes in coding and interpreting designs. So test everything, run the tests every time you make a change.\n* we don't understand the problem well enough to predict what we'll need later. So YouArentGonnaNeedIt.\n* we can't reliably write simple, understandable code on our own, so we work in pairs for constant feedback.",
        "id": "57a22ea059cdecfw"
      },
      "date": 1639845361774
    },
    {
      "type": "edit",
      "id": "57a22ea059cdecfw",
      "item": {
        "type": "markdown",
        "text": "* we won't be able to work out all the requirements up front (so allow mid-course corrections).\n* we won't get the design right first time. So don't try! Just [https://wiki.c2.com/?DoTheSimplestThingThatCouldPossiblyWork Do The Simplest Thing That Could Possibly Work] and then https://wiki.c2.com/?RefactorMercilessly Refactor Mercilessly].\n* we don't know how implementable this design is. So implement it and see.\n* we'll make mistakes in coding and interpreting designs. So test everything, run the tests every time you make a change.\n* we don't understand the problem well enough to predict what we'll need later. So [https://wiki.c2.com/?YouArentGonnaNeedIt You Aren't Gonna Need It].\n* we can't reliably write simple, understandable code on our own, so we work in pairs for constant feedback.",
        "id": "57a22ea059cdecfw"
      },
      "date": 1639845425196
    },
    {
      "item": {
        "type": "factory",
        "id": "e1645e310e01db41"
      },
      "id": "e1645e310e01db41",
      "type": "add",
      "after": "57a22ea059cdecfw",
      "date": 1639847647771
    },
    {
      "type": "edit",
      "id": "e1645e310e01db41",
      "item": {
        "type": "markdown",
        "id": "e1645e310e01db41",
        "text": "from [wiki.c2.com]"
      },
      "date": 1639847688445
    },
    {
      "type": "edit",
      "id": "e1645e310e01db41",
      "item": {
        "type": "markdown",
        "id": "e1645e310e01db41",
        "text": "from [https://wiki.c2.com/?ExtremeHumility wiki.c2.com]"
      },
      "date": 1639847718742
    },
    {
      "type": "edit",
      "id": "e1645e310e01db41",
      "item": {
        "type": "markdown",
        "id": "e1645e310e01db41",
        "text": "*from [https://wiki.c2.com/?ExtremeHumility wiki.c2.com]*"
      },
      "date": 1639847741311
    },
    {
      "id": "5f69df4c8757e27ew",
      "type": "add",
      "item": {
        "type": "paragraph",
        "text": "Extreme Humility\nI think ExtremeProgramming and several other similar approaches are based on humility about our abilities:",
        "wiki": "ExtremeHumility",
        "id": "5f69df4c8757e27ew"
      },
      "after": "81b8984d0a8df0aw",
      "date": 1641406013216
    },
    {
      "type": "remove",
      "id": "81b8984d0a8df0aw",
      "date": 1641406018332
    },
    {
      "id": "10822d0b9a93a3f8w",
      "type": "add",
      "item": {
        "type": "paragraph",
        "text": "we won't be able to work out all the requirements up front (so allow mid-course corrections).\nwe won't get the design right first time. So don't try! Just DoTheSimplestThingThatCouldPossiblyWork and then RefactorMercilessly.\nwe don't know how implementable this design is. So implement it and see.\nwe'll make mistakes in coding and interpreting designs. So test everything, run the tests every time you make a change.\nwe don't understand the problem well enough to predict what we'll need later. So YouArentGonnaNeedIt.\nwe can't reliably write simple, understandable code on our own, so we work in pairs for constant feedback.",
        "wiki": "ExtremeHumility",
        "id": "10822d0b9a93a3f8w"
      },
      "after": "57a22ea059cdecfw",
      "date": 1641406024294
    },
    {
      "type": "edit",
      "id": "10822d0b9a93a3f8w",
      "item": {
        "type": "markdown",
        "text": "* we won't be able to work out all the requirements up front (so allow mid-course corrections).\n* we won't get the design right first time. So don't try! Just DoTheSimplestThingThatCouldPossiblyWork and then RefactorMercilessly.\n* we don't know how implementable this design is. So implement it and see.\n* we'll make mistakes in coding and interpreting designs. So test everything, run the tests every time you make a change.\n* we don't understand the problem well enough to predict what we'll need later. So YouArentGonnaNeedIt.\n* we can't reliably write simple, understandable code on our own, so we work in pairs for constant feedback.",
        "wiki": "ExtremeHumility",
        "id": "10822d0b9a93a3f8w"
      },
      "date": 1641406087991
    },
    {
      "type": "remove",
      "id": "57a22ea059cdecfw",
      "date": 1641406113727
    },
    {
      "type": "fork",
      "site": "forage.rodwell.me",
      "date": 1671551389498
    }
  ]
}