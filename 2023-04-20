{
  "title": "2023-04-20",
  "story": [
    {
      "type": "paragraph",
      "id": "90fee3aed19f796c",
      "text": "⇒ [[Elm and AI]] ⇒ [[Prompt Engineering]] ⇒ [[Role-Playing]]"
    },
    {
      "type": "graphviz",
      "id": "75f7ba37c413e05b",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "paragraph",
      "id": "4011bd66ac081caf",
      "text": "⇒ [[Dillon Kearns]]"
    },
    {
      "type": "paragraph",
      "id": "a88b494034142681",
      "text": "⇒ [[Elm Camp]]"
    },
    {
      "type": "video",
      "id": "fb64909280c7ebdb",
      "text": "VIMEO 693182602"
    },
    {
      "type": "reference",
      "id": "349d3cd1a6def2cc",
      "site": "maxine.fed.wiki",
      "slug": "listing-of-maxines-pages",
      "title": "Listing of Maxine's pages",
      "text": "⇒ [[Doing with Strangers]]"
    },
    {
      "type": "paragraph",
      "id": "9833efa7bbdab50a",
      "text": "Gelesen in der WOZ → [[CS-Debakel]]: Autoritäre Anwandlungen [https://www.woz.ch/!QD9ZP4CRFAT4 woz.ch] (de)"
    },
    {
      "type": "pagefold",
      "id": "687e1c56c7d17226",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "89456859bdb5e3ae",
      "text": "⇒ [[Formulare gestalten]] ⇒ [[Elm-Form Demo]]"
    },
    {
      "type": "paragraph",
      "id": "f6ea2e1d0bb16734",
      "text": "dillonkearns/elm-form [https://www.elmweekly.nl/p/elm-weekly-issue-261 elmweekly], [https://ellie-app.com/myVVqSVC2QZa1 ellie], [https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/ package]"
    },
    {
      "type": "paragraph",
      "id": "c6df5fe08b570c2b",
      "text": "configuration.nix:"
    },
    {
      "type": "code",
      "id": "d0f977154172c8bd",
      "text": "  environment.systemPackages = with pkgs; [\n    bind\n    certbot\n    dig\n    elmPackages.elm\n    fossil\n    git\n    # nodejs\n    nodejs-18_x\n  ];\n"
    },
    {
      "type": "paragraph",
      "id": "2a040b21d6cf4794",
      "text": "[rgb@dreyeck:~/.wiki/form.dreyeck.ch/assets/home]$ elm --version\n0.19.1"
    },
    {
      "type": "code",
      "id": "b39d326f9591cd25",
      "text": "elm install dillonkearns/elm-form"
    },
    {
      "type": "code",
      "id": "b837ebde80cc8741",
      "text": "elm install justinmimbs/date"
    },
    {
      "type": "code",
      "id": "2f69a139753858f8",
      "text": "[rgb@dreyeck:~/.wiki/form.dreyeck.ch/assets/home]$ elm install justinmimbs/date\nI found it in your elm.json file, but in the \"indirect\" dependencies.\nShould I move it into \"direct\" dependencies for more general use? [Y/n]:\nSuccess!\n\n[rgb@dreyeck:~/.wiki/form.dreyeck.ch/assets/home]$ elm make src/Main.elm\nSuccess! Compiled 1 module.\n\n    Main ───> index.htm"
    },
    {
      "type": "markdown",
      "id": "af161618e3c8ac0c",
      "text": "───> http://form.dreyeck.ch/assets/home/index.html"
    },
    {
      "type": "paragraph",
      "id": "2cc47f18c3070647",
      "text": "Example for an Elm App which is integrating the Federated Wiki javascript code:"
    },
    {
      "type": "pagefold",
      "id": "2430053482fdbdbb",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "2da38b8c564af904",
      "text": "Here is an example of how to integrate Federated Wiki JavaScript code into an Elm app:\n\n"
    },
    {
      "type": "paragraph",
      "id": "28e5727e6cf8ed49",
      "text": "1. First, add the Federated Wiki JavaScript code to your Elm project. You can either include the JavaScript file in your HTML, or you can load it dynamically using Elm's ports. For example, if you want to load the JavaScript file dynamically, you can add the following port to your Elm code:"
    },
    {
      "type": "code",
      "id": "0031a50ec7603541",
      "text": "port loadFederatedWiki : String -> Cmd msg\n"
    },
    {
      "type": "paragraph",
      "id": "5f69bef36e1c727f",
      "text": "Then, in your JavaScript file, you can use the following code to send a message to Elm to load the Federated Wiki code:"
    },
    {
      "type": "code",
      "id": "06d92d96ca7a6b83",
      "text": "var app = Elm.Main.init({\n  node: document.getElementById('app')\n});\n\napp.ports.loadFederatedWiki.subscribe(function(url) {\n  var script = document.createElement('script');\n  script.src = url;\n  document.head.appendChild(script);\n});\n"
    },
    {
      "type": "paragraph",
      "id": "fb80f28e09d8b34e",
      "text": "This code listens to messages from Elm on the loadFederatedWiki port, and when it receives a message, it creates a new script element with the specified URL and appends it to the head of the document."
    },
    {
      "type": "paragraph",
      "id": "488c656f4a30b343",
      "text": "2. Once the Federated Wiki code is loaded, you can call its functions from Elm using Elm's JavaScript interop features. For example, if you want to call a function federatedWikiInit from the Federated Wiki code, you can add the following port to your Elm code:"
    },
    {
      "type": "code",
      "id": "1eea55f7037c48f6",
      "text": "port federatedWikiInit : Cmd msg"
    },
    {
      "type": "paragraph",
      "id": "6040d5924ca4d5fd",
      "text": "Then, in your JavaScript file, you can use the following code to send a message to Elm to initialize the Federated Wiki code:"
    },
    {
      "type": "code",
      "id": "b8f4761462d30495",
      "text": "app.ports.federatedWikiInit.send(function() {\n  federatedWikiInit();\n});\n"
    },
    {
      "type": "paragraph",
      "id": "b7706a90b656c45c",
      "text": "This code listens to messages from Elm on the federatedWikiInit port, and when it receives a message, it calls the federatedWikiInit function from the Federated Wiki code."
    },
    {
      "type": "paragraph",
      "id": "262be4a5c20f946f",
      "text": "3. Finally, you can use the functions from the Federated Wiki code in your Elm code. For example, if you want to use the wiki.page function to retrieve a page from the Federated Wiki, you can define a new command in your Elm code that sends a message to JavaScript to call the wiki.page function:"
    },
    {
      "type": "code",
      "id": "13794b5c49702c74",
      "text": "getPage : String -> Cmd msg\ngetPage title =\n  let\n    url = \"http://localhost:3000/\" ++ title ++ \".json\"\n  in\n    Task.perform identity (Http.get decodePage url) |> Task.attempt\n      << map PageFetched\n"
    },
    {
      "type": "paragraph",
      "id": "6a39d29e61b60229",
      "text": "This command uses Elm's Http library to retrieve the JSON for a page from the Federated Wiki, and then decodes the JSON using the decodePage function. Finally, it sends a message to Elm to update the model with the fetched page. You can then add a message handler in your update function to handle the PageFetched message:"
    },
    {
      "type": "code",
      "id": "b3823b7d62287e2d",
      "text": "update : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n  case msg of\n    PageFetched (Ok page) ->\n      ( { model | page = page }, Cmd.none )\n\n    PageFetched (Err error) ->\n      ( model, Cmd.none )\n\n    -- ...\n"
    },
    {
      "type": "paragraph",
      "id": "8472391aca11ef11",
      "text": "This message handler updates the model with the fetched page if the fetch was successful, or does nothing if the fetch failed.\n\n"
    },
    {
      "type": "paragraph",
      "id": "95ca9454f30ae11f",
      "text": "This is just a simple example of how to integrate Federated Wiki JavaScript code into an Elm app. Depending on your specific use case, you may need to modify this code to fit your needs."
    },
    {
      "type": "pagefold",
      "id": "aa5f194264c55bb4",
      "text": ". chat.openai ."
    },
    {
      "type": "paragraph",
      "id": "7e5541521d96683d",
      "text": "Source code of the wiki.page function?"
    },
    {
      "type": "pagefold",
      "id": "754a0b7bb13d7016",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "05ac532931968703",
      "text": "wiki.page is not an Elm function, but rather a JavaScript function used in the Federated Wiki project. The source code can be found in the Federated Wiki repository on [https://github.com/fedwiki/wiki/blob/master/client/wiki.js github]. [Note from [[Ralf Barkow]]: The chat thing gives the wrong URL: \"The 'fedwiki/wiki' repository doesn't contain the 'client/wiki.js' path in 'master'.\"]"
    },
    {
      "type": "paragraph",
      "id": "f9638ec0887d14f6",
      "text": "Here's the source code for wiki.page from the client.js file in the Federated Wiki codebase:",
      "alias": "e61c411b1388cac4"
    },
    {
      "type": "code",
      "id": "53e82dcbae39700c",
      "text": "wiki.page = function (path, data) {\n  data || (data = {});\n  var d = q.defer();\n  var page = {\n    type: \"page\",\n    path: path,\n    title: data.title || \"Untitled\",\n    \"private\": data.private || \"no\",\n    tags: data.tags || \"\",\n    created: data.created || new Date(),\n    updated: data.updated || new Date(),\n    author: data.author || \"\",\n    license: data.license || \"\",\n    journal: []\n  };\n  var pos = 0;\n  var sections = (data.body || \"\").split(\"\\n\\n\");\n  var section = sections[pos++] || \"\";\n  var lines = section.split(\"\\n\");\n  if (lines[0] === \"--JSON--\") {\n    var json = lines.slice(1).join(\"\\n\");\n    try {\n      json = JSON.parse(json);\n      for (var prop in json) {\n        if (prop === \"type\" || prop === \"path\" || prop === \"journal\") {\n          continue;\n        }\n        page[prop] = json[prop];\n      }\n    } catch (e) {}\n    section = sections[pos++] || \"\";\n    lines = section.split(\"\\n\");\n  }\n  if (lines[0] === \"--HTML--\") {\n    page.html = lines.slice(1).join(\"\\n\");\n    section = sections[pos++] || \"\";\n    lines = section.split(\"\\n\");\n  }\n  var markup = [];\n  if (data.story) {\n    markup = markup.concat(data.story);\n  }\n  var pluglist = [];\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    if (line.substr(0, 2) === \"--\") {\n      var args = line.substr(2).split(\":\");\n      var plugin = {\n        plugin: args[0],\n        options: args.slice(1).join(\":\").trim(),\n        source: line,\n        start: markup.length,\n        end: -1\n      };\n      pluglist.push(plugin);\n    } else {\n      markup.push(line);\n    }\n  }\n  var promises = [];\n  for (var i = 0; i < pluglist.length; i++) {\n    (function (plugin) {\n      var d = q.defer();\n      var i = markup.length;\n      markup.push(\"\");\n      wiki.plugin(plugin.plugin).markup(page, plugin.options, markup, plugin.start, function () {\n        plugin.end = markup.length - 1;\n        markup[i] = plugin.source;\n        d.resolve();\n      });\n      promises.push(d.promise);\n    })(pluglist[i]);\n  }\n  q.all(promises).then(function () {\n    var index = 0;\n    for (var i = 0; i < pluglist.length; i++) {\n      var plugin = pluglist[i];\n      var args = plugin.source.substr(2).split(\":\");\n      args[0] = \"plugin \" + args[0];\n      args.splice(1, 0, i, plugin.start, plugin.end);\n      var html = '<a href=\"#\" class=\"wiki-plugin-link\" data-args=\"' + JSON.stringify(args) + '\">' + args.join(\":\") + '</a>';\n      markup.splice(plugin.start + index, plugin.end - plugin.start + 1, html);\n      index++;\n    }\n    page.story = markup;\n    d.resolve(page);\n  });\n  return d.promise;\n};\n"
    },
    {
      "type": "paragraph",
      "id": "3784ea31bd1e2ea7",
      "text": "[…]"
    },
    {
      "type": "pagefold",
      "id": "06ffd193ec454c0d",
      "text": ". chat.openai ."
    },
    {
      "type": "paragraph",
      "id": "7208e35b86d980ce",
      "text": "⇒ [[Exploring a Form API Design]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-04-20",
        "story": []
      },
      "date": 1681967361934
    },
    {
      "id": "90fee3aed19f796c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "90fee3aed19f796c",
        "text": "⇒ [[Elm and AI]] ⇒ [[Prompt Engineering]] ⇒ [[Role-Playing]]"
      },
      "attribution": {
        "page": "2023-04-19"
      },
      "date": 1681967379347
    },
    {
      "item": {
        "type": "factory",
        "id": "75f7ba37c413e05b"
      },
      "id": "75f7ba37c413e05b",
      "type": "add",
      "after": "90fee3aed19f796c",
      "date": 1681967382370
    },
    {
      "type": "edit",
      "id": "75f7ba37c413e05b",
      "item": {
        "type": "graphviz",
        "id": "75f7ba37c413e05b",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1681967391774
    },
    {
      "item": {
        "type": "factory",
        "id": "349d3cd1a6def2cc"
      },
      "id": "349d3cd1a6def2cc",
      "type": "add",
      "after": "75f7ba37c413e05b",
      "date": 1681973682187
    },
    {
      "type": "edit",
      "id": "349d3cd1a6def2cc",
      "item": {
        "type": "reference",
        "id": "349d3cd1a6def2cc",
        "site": "maxine.fed.wiki",
        "slug": "listing-of-maxines-pages",
        "title": "Listing of Maxine's pages",
        "text": "**Key:**"
      },
      "date": 1681973685573
    },
    {
      "item": {
        "type": "factory",
        "id": "fb64909280c7ebdb"
      },
      "id": "fb64909280c7ebdb",
      "type": "add",
      "after": "349d3cd1a6def2cc",
      "date": 1681980233480
    },
    {
      "type": "edit",
      "id": "fb64909280c7ebdb",
      "item": {
        "type": "video",
        "id": "fb64909280c7ebdb",
        "text": "VIMEO 693182602"
      },
      "date": 1681980239988
    },
    {
      "item": {
        "type": "factory",
        "id": "a88b494034142681"
      },
      "id": "a88b494034142681",
      "type": "add",
      "after": "fb64909280c7ebdb",
      "date": 1681980361785
    },
    {
      "type": "edit",
      "id": "a88b494034142681",
      "item": {
        "type": "paragraph",
        "id": "a88b494034142681",
        "text": "⇒ [[Elm Camp]]"
      },
      "date": 1681980373187
    },
    {
      "id": "a88b494034142681",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "349d3cd1a6def2cc",
        "a88b494034142681",
        "fb64909280c7ebdb"
      ],
      "date": 1681980377889
    },
    {
      "id": "349d3cd1a6def2cc",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc"
      ],
      "date": 1681980379815
    },
    {
      "item": {
        "type": "factory",
        "id": "4011bd66ac081caf"
      },
      "id": "4011bd66ac081caf",
      "type": "add",
      "after": "349d3cd1a6def2cc",
      "date": 1681980420967
    },
    {
      "id": "4011bd66ac081caf",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc"
      ],
      "date": 1681980423016
    },
    {
      "type": "edit",
      "id": "4011bd66ac081caf",
      "item": {
        "type": "paragraph",
        "id": "4011bd66ac081caf",
        "text": "[[Dillon Kearns]]"
      },
      "date": 1681980430173
    },
    {
      "type": "edit",
      "id": "4011bd66ac081caf",
      "item": {
        "type": "paragraph",
        "id": "4011bd66ac081caf",
        "text": "⇒ [[Dillon Kearns]]"
      },
      "date": 1681980436719
    },
    {
      "type": "edit",
      "id": "349d3cd1a6def2cc",
      "item": {
        "type": "reference",
        "id": "349d3cd1a6def2cc",
        "site": "maxine.fed.wiki",
        "slug": "listing-of-maxines-pages",
        "title": "Listing of Maxine's pages",
        "text": "⇒ [[Doing with Strangers]]"
      },
      "date": 1681982217914
    },
    {
      "item": {
        "type": "factory",
        "id": "9833efa7bbdab50a"
      },
      "id": "9833efa7bbdab50a",
      "type": "add",
      "after": "349d3cd1a6def2cc",
      "date": 1681982369472
    },
    {
      "type": "edit",
      "id": "9833efa7bbdab50a",
      "item": {
        "type": "paragraph",
        "id": "9833efa7bbdab50a",
        "text": "Gelesen in der WOZ → CS-Debakel: Autoritäre Anwandlungen https://www.woz.ch/!QD9ZP4CRFAT4"
      },
      "date": 1681982371011
    },
    {
      "type": "edit",
      "id": "9833efa7bbdab50a",
      "item": {
        "type": "paragraph",
        "id": "9833efa7bbdab50a",
        "text": "Gelesen in der WOZ → CS-Debakel: Autoritäre Anwandlungen [ https://www.woz.ch/!QD9ZP4CRFAT4 woz.ch] (de)"
      },
      "date": 1681982391913
    },
    {
      "type": "edit",
      "id": "9833efa7bbdab50a",
      "item": {
        "type": "paragraph",
        "id": "9833efa7bbdab50a",
        "text": "Gelesen in der WOZ → CS-Debakel: Autoritäre Anwandlungen [https://www.woz.ch/!QD9ZP4CRFAT4 woz.ch] (de)"
      },
      "date": 1681982396046
    },
    {
      "type": "edit",
      "id": "9833efa7bbdab50a",
      "item": {
        "type": "paragraph",
        "id": "9833efa7bbdab50a",
        "text": "Gelesen in der WOZ → [[CS-Debakel]]: Autoritäre Anwandlungen [https://www.woz.ch/!QD9ZP4CRFAT4 woz.ch] (de)"
      },
      "date": 1681982875035
    },
    {
      "item": {
        "type": "factory",
        "id": "5a9107bfb38cc49c"
      },
      "id": "5a9107bfb38cc49c",
      "type": "add",
      "after": "9833efa7bbdab50a",
      "date": 1681983348903
    },
    {
      "type": "edit",
      "id": "5a9107bfb38cc49c",
      "item": {
        "type": "paragraph",
        "id": "5a9107bfb38cc49c",
        "text": "https://ellie-app.com/myVVqSVC2QZa1"
      },
      "date": 1681983351466
    },
    {
      "item": {
        "type": "factory",
        "id": "89456859bdb5e3ae"
      },
      "id": "89456859bdb5e3ae",
      "type": "add",
      "after": "5a9107bfb38cc49c",
      "date": 1681983352546
    },
    {
      "id": "89456859bdb5e3ae",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "89456859bdb5e3ae",
        "5a9107bfb38cc49c"
      ],
      "date": 1681983354424
    },
    {
      "type": "edit",
      "id": "89456859bdb5e3ae",
      "item": {
        "type": "paragraph",
        "id": "89456859bdb5e3ae",
        "text": "⇒ [[Formulare gestalten]]"
      },
      "date": 1681983371806
    },
    {
      "item": {
        "type": "factory",
        "id": "f6ea2e1d0bb16734"
      },
      "id": "f6ea2e1d0bb16734",
      "type": "add",
      "after": "5a9107bfb38cc49c",
      "date": 1681983743658
    },
    {
      "id": "f6ea2e1d0bb16734",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "89456859bdb5e3ae",
        "f6ea2e1d0bb16734",
        "5a9107bfb38cc49c"
      ],
      "date": 1681983745559
    },
    {
      "type": "edit",
      "id": "f6ea2e1d0bb16734",
      "item": {
        "type": "paragraph",
        "id": "f6ea2e1d0bb16734",
        "text": "dillonkearns/elm-form"
      },
      "date": 1681983749889
    },
    {
      "type": "edit",
      "id": "f6ea2e1d0bb16734",
      "item": {
        "type": "paragraph",
        "id": "f6ea2e1d0bb16734",
        "text": "dillonkearns/elm-form [https://www.elmweekly.nl/p/elm-weekly-issue-261 elmweekly]"
      },
      "date": 1681983763122
    },
    {
      "type": "remove",
      "id": "5a9107bfb38cc49c",
      "date": 1681983766409
    },
    {
      "type": "edit",
      "id": "f6ea2e1d0bb16734",
      "item": {
        "type": "paragraph",
        "id": "f6ea2e1d0bb16734",
        "text": "dillonkearns/elm-form [https://www.elmweekly.nl/p/elm-weekly-issue-261 elmweekly], "
      },
      "date": 1681983769733
    },
    {
      "type": "edit",
      "id": "f6ea2e1d0bb16734",
      "item": {
        "type": "paragraph",
        "id": "f6ea2e1d0bb16734",
        "text": "dillonkearns/elm-form [https://www.elmweekly.nl/p/elm-weekly-issue-261 elmweekly], [https://ellie-app.com/myVVqSVC2QZa1 ellie]"
      },
      "date": 1681983785982
    },
    {
      "item": {
        "type": "factory",
        "id": "d0f977154172c8bd"
      },
      "id": "d0f977154172c8bd",
      "type": "add",
      "after": "f6ea2e1d0bb16734",
      "date": 1681984786718
    },
    {
      "type": "edit",
      "id": "d0f977154172c8bd",
      "item": {
        "type": "code",
        "id": "d0f977154172c8bd",
        "text": "  environment.systemPackages = with pkgs; [\n    bind\n    certbot\n    dig\n    elmPackages.elm\n    fossil\n    git\n    # nodejs\n    nodejs-18_x\n  ];\n"
      },
      "date": 1681984810403
    },
    {
      "type": "add",
      "id": "c6df5fe08b570c2b",
      "item": {
        "type": "paragraph",
        "id": "c6df5fe08b570c2b",
        "text": "configuration.nix:"
      },
      "after": "f6ea2e1d0bb16734",
      "date": 1681984817073
    },
    {
      "item": {
        "type": "factory",
        "id": "2a040b21d6cf4794"
      },
      "id": "2a040b21d6cf4794",
      "type": "add",
      "after": "d0f977154172c8bd",
      "date": 1681984842975
    },
    {
      "type": "edit",
      "id": "2a040b21d6cf4794",
      "item": {
        "type": "paragraph",
        "id": "2a040b21d6cf4794",
        "text": "[rgb@dreyeck:~/.wiki/form.dreyeck.ch/assets/home]$ elm --version\n0.19.1"
      },
      "date": 1681984844640
    },
    {
      "type": "edit",
      "id": "f6ea2e1d0bb16734",
      "item": {
        "type": "paragraph",
        "id": "f6ea2e1d0bb16734",
        "text": "dillonkearns/elm-form [https://www.elmweekly.nl/p/elm-weekly-issue-261 elmweekly], [https://ellie-app.com/myVVqSVC2QZa1 ellie], [https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/ package]"
      },
      "date": 1681985280018
    },
    {
      "item": {
        "type": "factory",
        "id": "b39d326f9591cd25"
      },
      "id": "b39d326f9591cd25",
      "type": "add",
      "after": "2a040b21d6cf4794",
      "date": 1681985296290
    },
    {
      "type": "edit",
      "id": "b39d326f9591cd25",
      "item": {
        "type": "code",
        "id": "b39d326f9591cd25",
        "text": "elm install dillonkearns/elm-form"
      },
      "date": 1681985300172
    },
    {
      "item": {
        "type": "factory",
        "id": "c552fb75ab3a5ca6"
      },
      "id": "c552fb75ab3a5ca6",
      "type": "add",
      "after": "b39d326f9591cd25",
      "date": 1681985368371
    },
    {
      "type": "edit",
      "id": "c552fb75ab3a5ca6",
      "item": {
        "type": "paragraph",
        "id": "c552fb75ab3a5ca6",
        "text": "elm install elm/time"
      },
      "date": 1681985371955
    },
    {
      "item": {
        "type": "factory",
        "id": "b837ebde80cc8741"
      },
      "id": "b837ebde80cc8741",
      "type": "add",
      "after": "b39d326f9591cd25",
      "date": 1681985658114
    },
    {
      "type": "edit",
      "id": "b837ebde80cc8741",
      "item": {
        "type": "code",
        "id": "b837ebde80cc8741",
        "text": "elm install justinmimbs/date"
      },
      "date": 1681985661039
    },
    {
      "item": {
        "type": "factory",
        "id": "2f69a139753858f8"
      },
      "id": "2f69a139753858f8",
      "type": "add",
      "after": "b837ebde80cc8741",
      "date": 1681985763164
    },
    {
      "type": "edit",
      "id": "2f69a139753858f8",
      "item": {
        "type": "code",
        "id": "2f69a139753858f8",
        "text": "[rgb@dreyeck:~/.wiki/form.dreyeck.ch/assets/home]$ elm install justinmimbs/date\nI found it in your elm.json file, but in the \"indirect\" dependencies.\nShould I move it into \"direct\" dependencies for more general use? [Y/n]:\nSuccess!\n\n[rgb@dreyeck:~/.wiki/form.dreyeck.ch/assets/home]$ elm make src/Main.elm\nSuccess! Compiled 1 module.\n\n    Main ───> index.htm"
      },
      "date": 1681985765073
    },
    {
      "item": {
        "type": "factory",
        "id": "af161618e3c8ac0c"
      },
      "id": "af161618e3c8ac0c",
      "type": "add",
      "after": "2f69a139753858f8",
      "date": 1681985794862
    },
    {
      "type": "edit",
      "id": "af161618e3c8ac0c",
      "item": {
        "type": "markdown",
        "id": "af161618e3c8ac0c",
        "text": "http://form.dreyeck.ch/assets/home/index.html"
      },
      "date": 1681985797343
    },
    {
      "type": "edit",
      "id": "af161618e3c8ac0c",
      "item": {
        "type": "markdown",
        "id": "af161618e3c8ac0c",
        "text": "⇒ http://form.dreyeck.ch/assets/home/index.html"
      },
      "date": 1681985847122
    },
    {
      "type": "edit",
      "id": "af161618e3c8ac0c",
      "item": {
        "type": "markdown",
        "id": "af161618e3c8ac0c",
        "text": "───> http://form.dreyeck.ch/assets/home/index.html"
      },
      "date": 1681985859542
    },
    {
      "item": {
        "type": "factory",
        "id": "2cc47f18c3070647"
      },
      "id": "2cc47f18c3070647",
      "type": "add",
      "after": "af161618e3c8ac0c",
      "date": 1681986526610
    },
    {
      "type": "edit",
      "id": "2cc47f18c3070647",
      "item": {
        "type": "paragraph",
        "id": "2cc47f18c3070647",
        "text": "Example for an Elm App which is integrating the Federated Wiki javascript code"
      },
      "date": 1681986528633
    },
    {
      "item": {
        "type": "factory",
        "id": "2430053482fdbdbb"
      },
      "id": "2430053482fdbdbb",
      "type": "add",
      "after": "2cc47f18c3070647",
      "date": 1681986549318
    },
    {
      "item": {
        "type": "factory",
        "id": "2da38b8c564af904"
      },
      "id": "2da38b8c564af904",
      "type": "add",
      "after": "2430053482fdbdbb",
      "date": 1681986552050
    },
    {
      "type": "edit",
      "id": "2da38b8c564af904",
      "item": {
        "type": "paragraph",
        "id": "2da38b8c564af904",
        "text": "Here is an example of how to integrate Federated Wiki JavaScript code into an Elm app:\n\nFirst, add the Federated Wiki JavaScript code to your Elm project. You can either include the JavaScript file in your HTML, or you can load it dynamically using Elm's ports. For example, if you want to load the JavaScript file dynamically, you can add the following port to your Elm code:"
      },
      "date": 1681986553770
    },
    {
      "type": "edit",
      "id": "2430053482fdbdbb",
      "item": {
        "type": "pagefold",
        "id": "2430053482fdbdbb",
        "text": "chat.openai"
      },
      "date": 1681986582410
    },
    {
      "item": {
        "type": "factory",
        "id": "0031a50ec7603541"
      },
      "id": "0031a50ec7603541",
      "type": "add",
      "after": "2da38b8c564af904",
      "date": 1681986594531
    },
    {
      "type": "edit",
      "id": "0031a50ec7603541",
      "item": {
        "type": "code",
        "id": "0031a50ec7603541",
        "text": "port loadFederatedWiki : String -> Cmd msg\n"
      },
      "date": 1681986596283
    },
    {
      "item": {
        "type": "factory",
        "id": "5f69bef36e1c727f"
      },
      "id": "5f69bef36e1c727f",
      "type": "add",
      "after": "0031a50ec7603541",
      "date": 1681986605778
    },
    {
      "type": "edit",
      "id": "5f69bef36e1c727f",
      "item": {
        "type": "paragraph",
        "id": "5f69bef36e1c727f",
        "text": "Then, in your JavaScript file, you can use the following code to send a message to Elm to load the Federated Wiki code:"
      },
      "date": 1681986607792
    },
    {
      "item": {
        "type": "factory",
        "id": "06d92d96ca7a6b83"
      },
      "id": "06d92d96ca7a6b83",
      "type": "add",
      "after": "5f69bef36e1c727f",
      "date": 1681986613630
    },
    {
      "type": "edit",
      "id": "06d92d96ca7a6b83",
      "item": {
        "type": "code",
        "id": "06d92d96ca7a6b83",
        "text": "Then, in your JavaScript file, you can use the following code to send a message to Elm to load the Federated Wiki code:"
      },
      "date": 1681986615404
    },
    {
      "item": {
        "type": "factory",
        "id": "0a6a48250ef4d9f3"
      },
      "id": "0a6a48250ef4d9f3",
      "type": "add",
      "after": "06d92d96ca7a6b83",
      "date": 1681986619852
    },
    {
      "id": "0a6a48250ef4d9f3",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "89456859bdb5e3ae",
        "f6ea2e1d0bb16734",
        "c6df5fe08b570c2b",
        "d0f977154172c8bd",
        "2a040b21d6cf4794",
        "b39d326f9591cd25",
        "b837ebde80cc8741",
        "2f69a139753858f8",
        "af161618e3c8ac0c",
        "2cc47f18c3070647",
        "2430053482fdbdbb",
        "2da38b8c564af904",
        "0031a50ec7603541",
        "5f69bef36e1c727f",
        "0a6a48250ef4d9f3",
        "06d92d96ca7a6b83"
      ],
      "date": 1681986621802
    },
    {
      "type": "edit",
      "id": "0a6a48250ef4d9f3",
      "item": {
        "type": "paragraph",
        "id": "0a6a48250ef4d9f3",
        "text": "Then, in your JavaScript file, you can use the following code to send a message to Elm to load the Federated Wiki code:"
      },
      "date": 1681986623402
    },
    {
      "type": "edit",
      "id": "06d92d96ca7a6b83",
      "item": {
        "type": "code",
        "id": "06d92d96ca7a6b83",
        "text": "var app = Elm.Main.init({\n  node: document.getElementById('app')\n});\n\napp.ports.loadFederatedWiki.subscribe(function(url) {\n  var script = document.createElement('script');\n  script.src = url;\n  document.head.appendChild(script);\n});\n"
      },
      "date": 1681986629494
    },
    {
      "type": "edit",
      "id": "2cc47f18c3070647",
      "item": {
        "type": "paragraph",
        "id": "2cc47f18c3070647",
        "text": "Example for an Elm App which is integrating the Federated Wiki javascript code:"
      },
      "date": 1681986655990
    },
    {
      "type": "remove",
      "id": "0a6a48250ef4d9f3",
      "date": 1681986691246
    },
    {
      "item": {
        "type": "factory",
        "id": "fb80f28e09d8b34e"
      },
      "id": "fb80f28e09d8b34e",
      "type": "add",
      "after": "06d92d96ca7a6b83",
      "date": 1681986706893
    },
    {
      "type": "edit",
      "id": "fb80f28e09d8b34e",
      "item": {
        "type": "paragraph",
        "id": "fb80f28e09d8b34e",
        "text": "This code listens to messages from Elm on the loadFederatedWiki port, and when it receives a message, it creates a new script element with the specified URL and appends it to the head of the document."
      },
      "date": 1681986708512
    },
    {
      "item": {
        "type": "factory",
        "id": "488c656f4a30b343"
      },
      "id": "488c656f4a30b343",
      "type": "add",
      "after": "fb80f28e09d8b34e",
      "date": 1681986729843
    },
    {
      "type": "edit",
      "id": "488c656f4a30b343",
      "item": {
        "type": "paragraph",
        "id": "488c656f4a30b343",
        "text": "2. Once the Federated Wiki code is loaded, you can call its functions from Elm using Elm's JavaScript interop features. For example, if you want to call a function federatedWikiInit from the Federated Wiki code, you can add the following port to your Elm code:"
      },
      "date": 1681986735538
    },
    {
      "type": "edit",
      "id": "2da38b8c564af904",
      "item": {
        "type": "paragraph",
        "id": "2da38b8c564af904",
        "text": "Here is an example of how to integrate Federated Wiki JavaScript code into an Elm app:\n\n"
      },
      "date": 1681986740074
    },
    {
      "type": "add",
      "id": "28e5727e6cf8ed49",
      "item": {
        "type": "paragraph",
        "id": "28e5727e6cf8ed49",
        "text": "1. First, add the Federated Wiki JavaScript code to your Elm project. You can either include the JavaScript file in your HTML, or you can load it dynamically using Elm's ports. For example, if you want to load the JavaScript file dynamically, you can add the following port to your Elm code:"
      },
      "after": "2da38b8c564af904",
      "date": 1681986740679
    },
    {
      "item": {
        "type": "factory",
        "id": "79c3665f525d76f7"
      },
      "id": "79c3665f525d76f7",
      "type": "add",
      "after": "488c656f4a30b343",
      "date": 1681986757569
    },
    {
      "type": "edit",
      "id": "79c3665f525d76f7",
      "item": {
        "type": "paragraph",
        "id": "79c3665f525d76f7",
        "text": "port federatedWikiInit : Cmd msg\n"
      },
      "date": 1681986759580
    },
    {
      "type": "edit",
      "id": "79c3665f525d76f7",
      "item": {
        "type": "paragraph",
        "id": "79c3665f525d76f7",
        "text": "port federatedWikiInit : Cmd msg"
      },
      "date": 1681986762462
    },
    {
      "type": "remove",
      "id": "79c3665f525d76f7",
      "date": 1681986766084
    },
    {
      "item": {
        "type": "factory",
        "id": "1eea55f7037c48f6"
      },
      "id": "1eea55f7037c48f6",
      "type": "add",
      "after": "488c656f4a30b343",
      "date": 1681986767147
    },
    {
      "type": "edit",
      "id": "1eea55f7037c48f6",
      "item": {
        "type": "code",
        "id": "1eea55f7037c48f6",
        "text": "port federatedWikiInit : Cmd msg"
      },
      "date": 1681986769041
    },
    {
      "item": {
        "type": "factory",
        "id": "6040d5924ca4d5fd"
      },
      "id": "6040d5924ca4d5fd",
      "type": "add",
      "after": "1eea55f7037c48f6",
      "date": 1681986807051
    },
    {
      "type": "edit",
      "id": "6040d5924ca4d5fd",
      "item": {
        "type": "paragraph",
        "id": "6040d5924ca4d5fd",
        "text": "Then, in your JavaScript file, you can use the following code to send a message to Elm to initialize the Federated Wiki code:"
      },
      "date": 1681986810041
    },
    {
      "item": {
        "type": "factory",
        "id": "b8f4761462d30495"
      },
      "id": "b8f4761462d30495",
      "type": "add",
      "after": "6040d5924ca4d5fd",
      "date": 1681986814859
    },
    {
      "type": "edit",
      "id": "b8f4761462d30495",
      "item": {
        "type": "code",
        "id": "b8f4761462d30495",
        "text": "app.ports.federatedWikiInit.send(function() {\n  federatedWikiInit();\n});\n"
      },
      "date": 1681986817730
    },
    {
      "item": {
        "type": "factory",
        "id": "b7706a90b656c45c"
      },
      "id": "b7706a90b656c45c",
      "type": "add",
      "after": "b8f4761462d30495",
      "date": 1681986835603
    },
    {
      "type": "edit",
      "id": "b7706a90b656c45c",
      "item": {
        "type": "paragraph",
        "id": "b7706a90b656c45c",
        "text": "This code listens to messages from Elm on the federatedWikiInit port, and when it receives a message, it calls the federatedWikiInit function from the Federated Wiki code."
      },
      "date": 1681986837253
    },
    {
      "item": {
        "type": "factory",
        "id": "262be4a5c20f946f"
      },
      "id": "262be4a5c20f946f",
      "type": "add",
      "after": "b7706a90b656c45c",
      "date": 1681986853807
    },
    {
      "type": "edit",
      "id": "262be4a5c20f946f",
      "item": {
        "type": "paragraph",
        "id": "262be4a5c20f946f",
        "text": "3. Finally, you can use the functions from the Federated Wiki code in your Elm code. For example, if you want to use the wiki.page function to retrieve a page from the Federated Wiki, you can define a new command in your Elm code that sends a message to JavaScript to call the wiki.page function:"
      },
      "date": 1681986856865
    },
    {
      "item": {
        "type": "factory",
        "id": "13794b5c49702c74"
      },
      "id": "13794b5c49702c74",
      "type": "add",
      "after": "262be4a5c20f946f",
      "date": 1681986863124
    },
    {
      "type": "edit",
      "id": "13794b5c49702c74",
      "item": {
        "type": "code",
        "id": "13794b5c49702c74",
        "text": "getPage : String -> Cmd msg\ngetPage title =\n  let\n    url = \"http://localhost:3000/\" ++ title ++ \".json\"\n  in\n    Task.perform identity (Http.get decodePage url) |> Task.attempt\n      << map PageFetched\n"
      },
      "date": 1681986867831
    },
    {
      "item": {
        "type": "factory",
        "id": "6a39d29e61b60229"
      },
      "id": "6a39d29e61b60229",
      "type": "add",
      "after": "13794b5c49702c74",
      "date": 1681986898695
    },
    {
      "type": "edit",
      "id": "6a39d29e61b60229",
      "item": {
        "type": "paragraph",
        "id": "6a39d29e61b60229",
        "text": "This command uses Elm's Http library to retrieve the JSON for a page from the Federated Wiki, and then decodes the JSON using the decodePage function. Finally, it sends a message to Elm to update the model with the fetched page. You can then add a message handler in your update function to handle the PageFetched message:"
      },
      "date": 1681986900386
    },
    {
      "item": {
        "type": "factory",
        "id": "b3823b7d62287e2d"
      },
      "id": "b3823b7d62287e2d",
      "type": "add",
      "after": "6a39d29e61b60229",
      "date": 1681986906188
    },
    {
      "type": "edit",
      "id": "b3823b7d62287e2d",
      "item": {
        "type": "code",
        "id": "b3823b7d62287e2d",
        "text": "update : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n  case msg of\n    PageFetched (Ok page) ->\n      ( { model | page = page }, Cmd.none )\n\n    PageFetched (Err error) ->\n      ( model, Cmd.none )\n\n    -- ...\n"
      },
      "date": 1681986908720
    },
    {
      "item": {
        "type": "factory",
        "id": "8472391aca11ef11"
      },
      "id": "8472391aca11ef11",
      "type": "add",
      "after": "b3823b7d62287e2d",
      "date": 1681986920285
    },
    {
      "type": "edit",
      "id": "8472391aca11ef11",
      "item": {
        "type": "paragraph",
        "id": "8472391aca11ef11",
        "text": "This message handler updates the model with the fetched page if the fetch was successful, or does nothing if the fetch failed.\n\n"
      },
      "date": 1681986921951
    },
    {
      "item": {
        "type": "factory",
        "id": "95ca9454f30ae11f"
      },
      "id": "95ca9454f30ae11f",
      "type": "add",
      "after": "8472391aca11ef11",
      "date": 1681986930316
    },
    {
      "type": "edit",
      "id": "95ca9454f30ae11f",
      "item": {
        "type": "paragraph",
        "id": "95ca9454f30ae11f",
        "text": "This is just a simple example of how to integrate Federated Wiki JavaScript code into an Elm app. Depending on your specific use case, you may need to modify this code to fit your needs."
      },
      "date": 1681986931726
    },
    {
      "item": {
        "type": "factory",
        "id": "aa5f194264c55bb4"
      },
      "id": "aa5f194264c55bb4",
      "type": "add",
      "after": "95ca9454f30ae11f",
      "date": 1681986938587
    },
    {
      "type": "edit",
      "id": "aa5f194264c55bb4",
      "item": {
        "type": "pagefold",
        "id": "aa5f194264c55bb4",
        "text": ". "
      },
      "date": 1681986946261
    },
    {
      "type": "edit",
      "id": "aa5f194264c55bb4",
      "item": {
        "type": "pagefold",
        "id": "aa5f194264c55bb4",
        "text": ". chat.openai ."
      },
      "date": 1681986958262
    },
    {
      "item": {
        "type": "factory",
        "id": "7e5541521d96683d"
      },
      "id": "7e5541521d96683d",
      "type": "add",
      "after": "aa5f194264c55bb4",
      "date": 1681987080557
    },
    {
      "type": "edit",
      "id": "7e5541521d96683d",
      "item": {
        "type": "paragraph",
        "id": "7e5541521d96683d",
        "text": "Source code of the wiki.page function?"
      },
      "date": 1681987082552
    },
    {
      "item": {
        "type": "factory",
        "id": "05ac532931968703"
      },
      "id": "05ac532931968703",
      "type": "add",
      "after": "7e5541521d96683d",
      "date": 1681987088625
    },
    {
      "item": {
        "type": "factory",
        "id": "754a0b7bb13d7016"
      },
      "id": "754a0b7bb13d7016",
      "type": "add",
      "after": "05ac532931968703",
      "date": 1681987093284
    },
    {
      "id": "754a0b7bb13d7016",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "89456859bdb5e3ae",
        "f6ea2e1d0bb16734",
        "c6df5fe08b570c2b",
        "d0f977154172c8bd",
        "2a040b21d6cf4794",
        "b39d326f9591cd25",
        "b837ebde80cc8741",
        "2f69a139753858f8",
        "af161618e3c8ac0c",
        "2cc47f18c3070647",
        "2430053482fdbdbb",
        "2da38b8c564af904",
        "28e5727e6cf8ed49",
        "0031a50ec7603541",
        "5f69bef36e1c727f",
        "06d92d96ca7a6b83",
        "fb80f28e09d8b34e",
        "488c656f4a30b343",
        "1eea55f7037c48f6",
        "6040d5924ca4d5fd",
        "b8f4761462d30495",
        "b7706a90b656c45c",
        "262be4a5c20f946f",
        "13794b5c49702c74",
        "6a39d29e61b60229",
        "b3823b7d62287e2d",
        "8472391aca11ef11",
        "95ca9454f30ae11f",
        "aa5f194264c55bb4",
        "7e5541521d96683d",
        "754a0b7bb13d7016",
        "05ac532931968703"
      ],
      "date": 1681987095468
    },
    {
      "type": "edit",
      "id": "05ac532931968703",
      "item": {
        "type": "paragraph",
        "id": "05ac532931968703",
        "text": "wiki.page is a JavaScript function from the Federated Wiki project. It is responsible for rendering a single page of the wiki.\n\n"
      },
      "date": 1681987096812
    },
    {
      "type": "edit",
      "id": "754a0b7bb13d7016",
      "item": {
        "type": "pagefold",
        "id": "754a0b7bb13d7016",
        "text": "chat.openai"
      },
      "date": 1681987104390
    },
    {
      "item": {
        "type": "factory",
        "id": "e61c411b1388cac4"
      },
      "id": "e61c411b1388cac4",
      "type": "add",
      "after": "05ac532931968703",
      "date": 1681987121103
    },
    {
      "type": "edit",
      "id": "e61c411b1388cac4",
      "item": {
        "type": "paragraph",
        "id": "e61c411b1388cac4",
        "text": "Here's the source code for wiki.page from the client.js file in the Federated Wiki codebase:"
      },
      "date": 1681987122828
    },
    {
      "item": {
        "type": "factory",
        "id": "53e82dcbae39700c"
      },
      "id": "53e82dcbae39700c",
      "type": "add",
      "after": "e61c411b1388cac4",
      "date": 1681987127908
    },
    {
      "type": "edit",
      "id": "53e82dcbae39700c",
      "item": {
        "type": "code",
        "id": "53e82dcbae39700c",
        "text": "wiki.page = function (path, data) {\n  data || (data = {});\n  var d = q.defer();\n  var page = {\n    type: \"page\",\n    path: path,\n    title: data.title || \"Untitled\",\n    \"private\": data.private || \"no\",\n    tags: data.tags || \"\",\n    created: data.created || new Date(),\n    updated: data.updated || new Date(),\n    author: data.author || \"\",\n    license: data.license || \"\",\n    journal: []\n  };\n  var pos = 0;\n  var sections = (data.body || \"\").split(\"\\n\\n\");\n  var section = sections[pos++] || \"\";\n  var lines = section.split(\"\\n\");\n  if (lines[0] === \"--JSON--\") {\n    var json = lines.slice(1).join(\"\\n\");\n    try {\n      json = JSON.parse(json);\n      for (var prop in json) {\n        if (prop === \"type\" || prop === \"path\" || prop === \"journal\") {\n          continue;\n        }\n        page[prop] = json[prop];\n      }\n    } catch (e) {}\n    section = sections[pos++] || \"\";\n    lines = section.split(\"\\n\");\n  }\n  if (lines[0] === \"--HTML--\") {\n    page.html = lines.slice(1).join(\"\\n\");\n    section = sections[pos++] || \"\";\n    lines = section.split(\"\\n\");\n  }\n  var markup = [];\n  if (data.story) {\n    markup = markup.concat(data.story);\n  }\n  var pluglist = [];\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    if (line.substr(0, 2) === \"--\") {\n      var args = line.substr(2).split(\":\");\n      var plugin = {\n        plugin: args[0],\n        options: args.slice(1).join(\":\").trim(),\n        source: line,\n        start: markup.length,\n        end: -1\n      };\n      pluglist.push(plugin);\n    } else {\n      markup.push(line);\n    }\n  }\n  var promises = [];\n  for (var i = 0; i < pluglist.length; i++) {\n    (function (plugin) {\n      var d = q.defer();\n      var i = markup.length;\n      markup.push(\"\");\n      wiki.plugin(plugin.plugin).markup(page, plugin.options, markup, plugin.start, function () {\n        plugin.end = markup.length - 1;\n        markup[i] = plugin.source;\n        d.resolve();\n      });\n      promises.push(d.promise);\n    })(pluglist[i]);\n  }\n  q.all(promises).then(function () {\n    var index = 0;\n    for (var i = 0; i < pluglist.length; i++) {\n      var plugin = pluglist[i];\n      var args = plugin.source.substr(2).split(\":\");\n      args[0] = \"plugin \" + args[0];\n      args.splice(1, 0, i, plugin.start, plugin.end);\n      var html = '<a href=\"#\" class=\"wiki-plugin-link\" data-args=\"' + JSON.stringify(args) + '\">' + args.join(\":\") + '</a>';\n      markup.splice(plugin.start + index, plugin.end - plugin.start + 1, html);\n      index++;\n    }\n    page.story = markup;\n    d.resolve(page);\n  });\n  return d.promise;\n};\n"
      },
      "date": 1681987129840
    },
    {
      "type": "edit",
      "id": "05ac532931968703",
      "item": {
        "type": "paragraph",
        "id": "05ac532931968703",
        "text": "wiki.page is not an Elm function, but rather a JavaScript function used in the Federated Wiki project. The source code can be found in the Federated Wiki repository on [https://github.com/fedwiki/wiki/blob/master/client/wiki.js github]."
      },
      "date": 1681987206892
    },
    {
      "type": "edit",
      "id": "53e82dcbae39700c",
      "item": {
        "type": "code",
        "id": "53e82dcbae39700c",
        "text": "Here's a simplified version of the wiki.page function:"
      },
      "date": 1681987248638
    },
    {
      "type": "edit",
      "id": "53e82dcbae39700c",
      "item": {
        "type": "code",
        "id": "53e82dcbae39700c",
        "text": "function page(site, page) {\n  var parts = page.split('/');\n  var pageName = parts.pop();\n  var path = parts.join('/');\n  var url = site + '/api/pages/' + encodeURIComponent(path) + '?page=' + encodeURIComponent(pageName);\n\n  return fetch(url)\n    .then(function(response) {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .then(function(page) {\n      return page.body;\n    })\n    .catch(function(error) {\n      console.error('Error fetching page:', error);\n    });\n}\n"
      },
      "date": 1681987257571
    },
    {
      "type": "edit",
      "id": "e61c411b1388cac4",
      "item": {
        "type": "paragraph",
        "id": "e61c411b1388cac4",
        "text": "Here's a simplified version of the wiki.page function:"
      },
      "date": 1681987264062
    },
    {
      "type": "edit",
      "id": "05ac532931968703",
      "item": {
        "type": "paragraph",
        "id": "05ac532931968703",
        "text": "wiki.page is not an Elm function, but rather a JavaScript function used in the Federated Wiki project. The source code can be found in the Federated Wiki repository on [https://github.com/fedwiki/wiki/blob/master/client/wiki.js github]. Note: The chat thing gives the wrong url: \"The 'fedwiki/wiki' repository doesn't contain the 'client/wiki.js' path in 'master'.\""
      },
      "date": 1681987304435
    },
    {
      "type": "edit",
      "id": "05ac532931968703",
      "item": {
        "type": "paragraph",
        "id": "05ac532931968703",
        "text": "wiki.page is not an Elm function, but rather a JavaScript function used in the Federated Wiki project. The source code can be found in the Federated Wiki repository on [https://github.com/fedwiki/wiki/blob/master/client/wiki.js github]. Note: The chat thing gives the wrong URL: \"The 'fedwiki/wiki' repository doesn't contain the 'client/wiki.js' path in 'master'.\""
      },
      "date": 1681987335904
    },
    {
      "id": "f9638ec0887d14f6",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f9638ec0887d14f6",
        "text": "Here's the source code for wiki.page from the client.js file in the Federated Wiki codebase:",
        "alias": "e61c411b1388cac4"
      },
      "after": "05ac532931968703",
      "date": 1681987591711
    },
    {
      "type": "remove",
      "id": "e61c411b1388cac4",
      "date": 1681987596005
    },
    {
      "type": "remove",
      "id": "53e82dcbae39700c",
      "date": 1681987598284
    },
    {
      "id": "53e82dcbae39700c",
      "type": "add",
      "item": {
        "type": "code",
        "id": "53e82dcbae39700c",
        "text": "wiki.page = function (path, data) {\n  data || (data = {});\n  var d = q.defer();\n  var page = {\n    type: \"page\",\n    path: path,\n    title: data.title || \"Untitled\",\n    \"private\": data.private || \"no\",\n    tags: data.tags || \"\",\n    created: data.created || new Date(),\n    updated: data.updated || new Date(),\n    author: data.author || \"\",\n    license: data.license || \"\",\n    journal: []\n  };\n  var pos = 0;\n  var sections = (data.body || \"\").split(\"\\n\\n\");\n  var section = sections[pos++] || \"\";\n  var lines = section.split(\"\\n\");\n  if (lines[0] === \"--JSON--\") {\n    var json = lines.slice(1).join(\"\\n\");\n    try {\n      json = JSON.parse(json);\n      for (var prop in json) {\n        if (prop === \"type\" || prop === \"path\" || prop === \"journal\") {\n          continue;\n        }\n        page[prop] = json[prop];\n      }\n    } catch (e) {}\n    section = sections[pos++] || \"\";\n    lines = section.split(\"\\n\");\n  }\n  if (lines[0] === \"--HTML--\") {\n    page.html = lines.slice(1).join(\"\\n\");\n    section = sections[pos++] || \"\";\n    lines = section.split(\"\\n\");\n  }\n  var markup = [];\n  if (data.story) {\n    markup = markup.concat(data.story);\n  }\n  var pluglist = [];\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    if (line.substr(0, 2) === \"--\") {\n      var args = line.substr(2).split(\":\");\n      var plugin = {\n        plugin: args[0],\n        options: args.slice(1).join(\":\").trim(),\n        source: line,\n        start: markup.length,\n        end: -1\n      };\n      pluglist.push(plugin);\n    } else {\n      markup.push(line);\n    }\n  }\n  var promises = [];\n  for (var i = 0; i < pluglist.length; i++) {\n    (function (plugin) {\n      var d = q.defer();\n      var i = markup.length;\n      markup.push(\"\");\n      wiki.plugin(plugin.plugin).markup(page, plugin.options, markup, plugin.start, function () {\n        plugin.end = markup.length - 1;\n        markup[i] = plugin.source;\n        d.resolve();\n      });\n      promises.push(d.promise);\n    })(pluglist[i]);\n  }\n  q.all(promises).then(function () {\n    var index = 0;\n    for (var i = 0; i < pluglist.length; i++) {\n      var plugin = pluglist[i];\n      var args = plugin.source.substr(2).split(\":\");\n      args[0] = \"plugin \" + args[0];\n      args.splice(1, 0, i, plugin.start, plugin.end);\n      var html = '<a href=\"#\" class=\"wiki-plugin-link\" data-args=\"' + JSON.stringify(args) + '\">' + args.join(\":\") + '</a>';\n      markup.splice(plugin.start + index, plugin.end - plugin.start + 1, html);\n      index++;\n    }\n    page.story = markup;\n    d.resolve(page);\n  });\n  return d.promise;\n};\n"
      },
      "after": "aa5f194264c55bb4",
      "attribution": {
        "page": "Welcome Visitors"
      },
      "date": 1681987655512
    },
    {
      "id": "53e82dcbae39700c",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "89456859bdb5e3ae",
        "f6ea2e1d0bb16734",
        "c6df5fe08b570c2b",
        "d0f977154172c8bd",
        "2a040b21d6cf4794",
        "b39d326f9591cd25",
        "b837ebde80cc8741",
        "2f69a139753858f8",
        "af161618e3c8ac0c",
        "2cc47f18c3070647",
        "2430053482fdbdbb",
        "2da38b8c564af904",
        "28e5727e6cf8ed49",
        "0031a50ec7603541",
        "5f69bef36e1c727f",
        "06d92d96ca7a6b83",
        "fb80f28e09d8b34e",
        "488c656f4a30b343",
        "1eea55f7037c48f6",
        "6040d5924ca4d5fd",
        "b8f4761462d30495",
        "b7706a90b656c45c",
        "262be4a5c20f946f",
        "13794b5c49702c74",
        "6a39d29e61b60229",
        "b3823b7d62287e2d",
        "8472391aca11ef11",
        "95ca9454f30ae11f",
        "aa5f194264c55bb4",
        "7e5541521d96683d",
        "53e82dcbae39700c",
        "754a0b7bb13d7016",
        "05ac532931968703",
        "f9638ec0887d14f6"
      ],
      "date": 1681987662162
    },
    {
      "id": "754a0b7bb13d7016",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "89456859bdb5e3ae",
        "f6ea2e1d0bb16734",
        "c6df5fe08b570c2b",
        "d0f977154172c8bd",
        "2a040b21d6cf4794",
        "b39d326f9591cd25",
        "b837ebde80cc8741",
        "2f69a139753858f8",
        "af161618e3c8ac0c",
        "2cc47f18c3070647",
        "2430053482fdbdbb",
        "2da38b8c564af904",
        "28e5727e6cf8ed49",
        "0031a50ec7603541",
        "5f69bef36e1c727f",
        "06d92d96ca7a6b83",
        "fb80f28e09d8b34e",
        "488c656f4a30b343",
        "1eea55f7037c48f6",
        "6040d5924ca4d5fd",
        "b8f4761462d30495",
        "b7706a90b656c45c",
        "262be4a5c20f946f",
        "13794b5c49702c74",
        "6a39d29e61b60229",
        "b3823b7d62287e2d",
        "8472391aca11ef11",
        "95ca9454f30ae11f",
        "aa5f194264c55bb4",
        "7e5541521d96683d",
        "754a0b7bb13d7016",
        "53e82dcbae39700c",
        "05ac532931968703",
        "f9638ec0887d14f6"
      ],
      "date": 1681987674614
    },
    {
      "id": "05ac532931968703",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "89456859bdb5e3ae",
        "f6ea2e1d0bb16734",
        "c6df5fe08b570c2b",
        "d0f977154172c8bd",
        "2a040b21d6cf4794",
        "b39d326f9591cd25",
        "b837ebde80cc8741",
        "2f69a139753858f8",
        "af161618e3c8ac0c",
        "2cc47f18c3070647",
        "2430053482fdbdbb",
        "2da38b8c564af904",
        "28e5727e6cf8ed49",
        "0031a50ec7603541",
        "5f69bef36e1c727f",
        "06d92d96ca7a6b83",
        "fb80f28e09d8b34e",
        "488c656f4a30b343",
        "1eea55f7037c48f6",
        "6040d5924ca4d5fd",
        "b8f4761462d30495",
        "b7706a90b656c45c",
        "262be4a5c20f946f",
        "13794b5c49702c74",
        "6a39d29e61b60229",
        "b3823b7d62287e2d",
        "8472391aca11ef11",
        "95ca9454f30ae11f",
        "aa5f194264c55bb4",
        "7e5541521d96683d",
        "754a0b7bb13d7016",
        "05ac532931968703",
        "53e82dcbae39700c",
        "f9638ec0887d14f6"
      ],
      "date": 1681987681800
    },
    {
      "id": "f9638ec0887d14f6",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "89456859bdb5e3ae",
        "f6ea2e1d0bb16734",
        "c6df5fe08b570c2b",
        "d0f977154172c8bd",
        "2a040b21d6cf4794",
        "b39d326f9591cd25",
        "b837ebde80cc8741",
        "2f69a139753858f8",
        "af161618e3c8ac0c",
        "2cc47f18c3070647",
        "2430053482fdbdbb",
        "2da38b8c564af904",
        "28e5727e6cf8ed49",
        "0031a50ec7603541",
        "5f69bef36e1c727f",
        "06d92d96ca7a6b83",
        "fb80f28e09d8b34e",
        "488c656f4a30b343",
        "1eea55f7037c48f6",
        "6040d5924ca4d5fd",
        "b8f4761462d30495",
        "b7706a90b656c45c",
        "262be4a5c20f946f",
        "13794b5c49702c74",
        "6a39d29e61b60229",
        "b3823b7d62287e2d",
        "8472391aca11ef11",
        "95ca9454f30ae11f",
        "aa5f194264c55bb4",
        "7e5541521d96683d",
        "754a0b7bb13d7016",
        "05ac532931968703",
        "f9638ec0887d14f6",
        "53e82dcbae39700c"
      ],
      "date": 1681987689823
    },
    {
      "item": {
        "type": "factory",
        "id": "3784ea31bd1e2ea7"
      },
      "id": "3784ea31bd1e2ea7",
      "type": "add",
      "after": "53e82dcbae39700c",
      "date": 1681987853754
    },
    {
      "type": "edit",
      "id": "3784ea31bd1e2ea7",
      "item": {
        "type": "paragraph",
        "id": "3784ea31bd1e2ea7",
        "text": "[…]"
      },
      "date": 1681987859013
    },
    {
      "item": {
        "type": "factory",
        "id": "06ffd193ec454c0d"
      },
      "id": "06ffd193ec454c0d",
      "type": "add",
      "after": "3784ea31bd1e2ea7",
      "date": 1681987860535
    },
    {
      "type": "edit",
      "id": "06ffd193ec454c0d",
      "item": {
        "type": "pagefold",
        "id": "06ffd193ec454c0d",
        "text": ". chat.openai ."
      },
      "date": 1681987862190
    },
    {
      "type": "edit",
      "id": "05ac532931968703",
      "item": {
        "type": "paragraph",
        "id": "05ac532931968703",
        "text": "wiki.page is not an Elm function, but rather a JavaScript function used in the Federated Wiki project. The source code can be found in the Federated Wiki repository on [https://github.com/fedwiki/wiki/blob/master/client/wiki.js github]. Note from [[Ralf Barkow]]: The chat thing gives the wrong URL: \"The 'fedwiki/wiki' repository doesn't contain the 'client/wiki.js' path in 'master'.\""
      },
      "date": 1681987889441
    },
    {
      "type": "edit",
      "id": "05ac532931968703",
      "item": {
        "type": "paragraph",
        "id": "05ac532931968703",
        "text": "wiki.page is not an Elm function, but rather a JavaScript function used in the Federated Wiki project. The source code can be found in the Federated Wiki repository on [https://github.com/fedwiki/wiki/blob/master/client/wiki.js github]. [Note from [[Ralf Barkow]]: The chat thing gives the wrong URL: \"The 'fedwiki/wiki' repository doesn't contain the 'client/wiki.js' path in 'master'.\"]"
      },
      "date": 1681987895819
    },
    {
      "item": {
        "type": "factory",
        "id": "687e1c56c7d17226"
      },
      "id": "687e1c56c7d17226",
      "type": "add",
      "after": "06ffd193ec454c0d",
      "date": 1681987940934
    },
    {
      "id": "687e1c56c7d17226",
      "type": "move",
      "order": [
        "90fee3aed19f796c",
        "75f7ba37c413e05b",
        "4011bd66ac081caf",
        "a88b494034142681",
        "fb64909280c7ebdb",
        "349d3cd1a6def2cc",
        "9833efa7bbdab50a",
        "687e1c56c7d17226",
        "89456859bdb5e3ae",
        "f6ea2e1d0bb16734",
        "c6df5fe08b570c2b",
        "d0f977154172c8bd",
        "2a040b21d6cf4794",
        "b39d326f9591cd25",
        "b837ebde80cc8741",
        "2f69a139753858f8",
        "af161618e3c8ac0c",
        "2cc47f18c3070647",
        "2430053482fdbdbb",
        "2da38b8c564af904",
        "28e5727e6cf8ed49",
        "0031a50ec7603541",
        "5f69bef36e1c727f",
        "06d92d96ca7a6b83",
        "fb80f28e09d8b34e",
        "488c656f4a30b343",
        "1eea55f7037c48f6",
        "6040d5924ca4d5fd",
        "b8f4761462d30495",
        "b7706a90b656c45c",
        "262be4a5c20f946f",
        "13794b5c49702c74",
        "6a39d29e61b60229",
        "b3823b7d62287e2d",
        "8472391aca11ef11",
        "95ca9454f30ae11f",
        "aa5f194264c55bb4",
        "7e5541521d96683d",
        "754a0b7bb13d7016",
        "05ac532931968703",
        "f9638ec0887d14f6",
        "53e82dcbae39700c",
        "3784ea31bd1e2ea7",
        "06ffd193ec454c0d"
      ],
      "date": 1681987955271
    },
    {
      "type": "edit",
      "id": "687e1c56c7d17226",
      "item": {
        "type": "pagefold",
        "id": "687e1c56c7d17226",
        "text": "~"
      },
      "date": 1681987959254
    },
    {
      "item": {
        "type": "factory",
        "id": "7208e35b86d980ce"
      },
      "id": "7208e35b86d980ce",
      "type": "add",
      "after": "06ffd193ec454c0d",
      "date": 1681988041845
    },
    {
      "type": "edit",
      "id": "7208e35b86d980ce",
      "item": {
        "type": "paragraph",
        "id": "7208e35b86d980ce",
        "text": "[[Exploring a New Form API Design]]"
      },
      "date": 1681988052199
    },
    {
      "type": "edit",
      "id": "7208e35b86d980ce",
      "item": {
        "type": "paragraph",
        "id": "7208e35b86d980ce",
        "text": "[[Exploring a Form API Design]]"
      },
      "date": 1681988172904
    },
    {
      "item": {
        "type": "factory",
        "id": "8b0a8ee4a020aa77"
      },
      "id": "8b0a8ee4a020aa77",
      "type": "add",
      "after": "7208e35b86d980ce",
      "date": 1681989152626
    },
    {
      "type": "edit",
      "id": "8b0a8ee4a020aa77",
      "item": {
        "type": "paragraph",
        "id": "8b0a8ee4a020aa77",
        "text": "chat.openai: There are some existing projects that deal with Elm code as legacy code and visualize its structure with the help of Pharo and/or Glamorous Toolkit. For example, there is a project called \"ELMo\" (Elm Modeling) that provides a modeling language and tools for analyzing and visualizing Elm applications. ELMo is built on top of Glamorous Toolkit and provides a set of abstractions for modeling the structure and behavior of Elm programs. There are also some other research projects that explore the use of Pharo and Glamorous Toolkit for analyzing and visualizing Elm code, such as \"ElmProbe\" and \"Glamorous Elm\"."
      },
      "date": 1681989161798
    },
    {
      "type": "edit",
      "id": "7208e35b86d980ce",
      "item": {
        "type": "paragraph",
        "id": "7208e35b86d980ce",
        "text": "⇒ [[Exploring a Form API Design]]"
      },
      "date": 1681989171555
    },
    {
      "type": "remove",
      "id": "8b0a8ee4a020aa77",
      "date": 1681989326912
    },
    {
      "type": "edit",
      "id": "89456859bdb5e3ae",
      "item": {
        "type": "paragraph",
        "id": "89456859bdb5e3ae",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Elm-Form Demo]]"
      },
      "date": 1681991547204
    }
  ]
}