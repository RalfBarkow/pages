{
  "title": "CYCLOS4 Pro",
  "story": [
    {
      "type": "markdown",
      "id": "7a66d27882e0305b",
      "text": "[https://www.cyclos.org/about-stro/ About Cyclos4Pro]\n"
    },
    {
      "type": "markdown",
      "id": "199fde30b5181b52",
      "text": "[[Cyclos4 Features]]\n"
    },
    {
      "type": "markdown",
      "id": "0d49dddbc9650d30",
      "text": "See [[Pay it Forward]]\n"
    },
    {
      "type": "markdown",
      "id": "2ecdfd38a0ffcdc8",
      "text": "See [[SODOTO]]"
    },
    {
      "type": "markdown",
      "id": "0b70a121fbdf06ba",
      "text": "Version: Cyclos 4.15.9 (for the documentation about another version please click here)\n\nCopyright Â© 2004-2022 Social Trade Organization\n\n"
    },
    {
      "type": "markdown",
      "id": "fb686bba1ecc83fe",
      "text": "# Cyclos 4 PRO Documentation\n\nWelcome to the Cyclos 4 PRO Documentation. First, this manual contains the Installation and Maintenance guide. Second, this manual will give a detailed description and some examples of how to connect to Cyclos using the web services. Subsequently, this manual explains the Cyclos scripts, these scripts can be executed by clicking on a menu link, by a scheduled task or by an extension point on a certain function. These scripts make it possible to add new functions to Cyclos and customize Cyclos exactly to the needs of your payment system. Finally, this manual will give an explanation of how to login to Cyclos from an external website. This can be useful if you have a large CMS as a website and you want to have an integrated login to Cyclos in this website.\n\nThere are some important documentation resources that are not part of this manual, these can be found here:\n\nThere are two (end user) Cyclos 4 manuals (make sure you are not logged into communities.cyclos.org):\n**Administrator manual**\n**User manual**\n"
    },
    {
      "type": "markdown",
      "id": "e1ed64809008f004",
      "text": "Next to the manuals some functions are described with much more technical details in our wiki:\n\nConfigurations\nGroups\nNetworks\nAdvertisements\nUsers records\nTransfer_authorization\nSMS\nImports\nCyclos instruction videos:\nCyclos 4 communities\nCyclos 4 PRO"
    },
    {
      "type": "markdown",
      "id": "7187a36c9a8c3abf",
      "text": "# Table of Contents\n\n# 1-- Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n"
    },
    {
      "type": "markdown",
      "id": "cff1289848e8564c",
      "text": "# 2-- Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n"
    },
    {
      "type": "markdown",
      "id": "879e5331e7500227",
      "text": "# 3-- Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n\n\n"
    },
    {
      "type": "markdown",
      "id": "1d24de9d99b7879e",
      "text": "# 4-- Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n"
    },
    {
      "type": "markdown",
      "id": "97ddad5d0e99967a",
      "text": "# 5-- Custom alerts\n\n# 6-- External login\n\n# Next\nInstallation & maintenance\n\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "CYCLOS4 Pro",
        "story": []
      },
      "date": 1666721784901
    },
    {
      "item": {
        "type": "factory",
        "id": "7a66d27882e0305b"
      },
      "id": "7a66d27882e0305b",
      "type": "add",
      "date": 1666721786590
    },
    {
      "type": "edit",
      "id": "7a66d27882e0305b",
      "item": {
        "type": "markdown",
        "id": "7a66d27882e0305b",
        "text": "[https://www.cyclos.org/about-stro/ About Cyclos4Pro]"
      },
      "date": 1666721812514
    },
    {
      "item": {
        "type": "factory",
        "id": "55f9208e05e169f3"
      },
      "id": "55f9208e05e169f3",
      "type": "add",
      "after": "7a66d27882e0305b",
      "date": 1666722142155
    },
    {
      "type": "edit",
      "id": "55f9208e05e169f3",
      "item": {
        "type": "html",
        "id": "55f9208e05e169f3",
        "text": " \t \t Next\nVersion: Cyclos 4.15.9 (for the documentation about another version please click here)\n\nCopyright Â© 2004-2022 Social Trade Organization\n\nCyclos 4 PRO Documentation\n\nWelcome to the Cyclos 4 PRO Documentation. First, this manual contains the Installation and Maintenance guide. Second, this manual will give a detailed description and some examples of how to connect to Cyclos using the webservices. Subsequently, this manual explains the Cyclos scripts, these scripts can be executed by clicking on a menu link, by a scheduled task or by an extension point on a certain function. These scripts make it possible to add new functions to Cyclos and customize Cyclos exactly to the needs of your payment system. Finally, this manual will give an explanation of how to login to Cyclos from an external website. This can be useful if you have a large CMS as a website and you want to have an integrated login to Cyclos in this website.\n\nThere are some important documentation resources that are not part of this manual, these can be found here:\n\nThere are two (end user) Cyclos 4 manuals (make sure you are not logged into communities.cyclos.org):\nAdministrator manual\nUser manual\nNext to the manuals some functions are described with much more technical details in our wiki:\nConfigurations\nGroups\nNetworks\nAdvertisements\nUsers records\nTransfer_authorization\nSMS\nImports\nCyclos instruction videos:\nCyclos 4 communities\nCyclos 4 PRO\nTable of Contents\n\n1. Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n2. Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n3. Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n4. Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n5. Custom alerts\n6. External login\n \t \t Next\n \t \t 1. Installation & maintenance\n"
      },
      "date": 1666722145680
    },
    {
      "type": "edit",
      "id": "55f9208e05e169f3",
      "item": {
        "type": "markdown",
        "id": "55f9208e05e169f3",
        "text": " \t \t Next\nVersion: Cyclos 4.15.9 (for the documentation about another version please click here)\n\nCopyright Â© 2004-2022 Social Trade Organization\n\nCyclos 4 PRO Documentation\n\nWelcome to the Cyclos 4 PRO Documentation. First, this manual contains the Installation and Maintenance guide. Second, this manual will give a detailed description and some examples of how to connect to Cyclos using the webservices. Subsequently, this manual explains the Cyclos scripts, these scripts can be executed by clicking on a menu link, by a scheduled task or by an extension point on a certain function. These scripts make it possible to add new functions to Cyclos and customize Cyclos exactly to the needs of your payment system. Finally, this manual will give an explanation of how to login to Cyclos from an external website. This can be useful if you have a large CMS as a website and you want to have an integrated login to Cyclos in this website.\n\nThere are some important documentation resources that are not part of this manual, these can be found here:\n\nThere are two (end user) Cyclos 4 manuals (make sure you are not logged into communities.cyclos.org):\nAdministrator manual\nUser manual\nNext to the manuals some functions are described with much more technical details in our wiki:\nConfigurations\nGroups\nNetworks\nAdvertisements\nUsers records\nTransfer_authorization\nSMS\nImports\nCyclos instruction videos:\nCyclos 4 communities\nCyclos 4 PRO\nTable of Contents\n\n1. Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n2. Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n3. Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n4. Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n5. Custom alerts\n6. External login\n \t \t Next\n \t \t 1. Installation & maintenance\n..\n"
      },
      "date": 1666722185775
    },
    {
      "type": "remove",
      "id": "55f9208e05e169f3",
      "date": 1666722213109
    },
    {
      "type": "edit",
      "id": "7a66d27882e0305b",
      "item": {
        "type": "markdown",
        "id": "7a66d27882e0305b",
        "text": "[https://www.cyclos.org/about-stro/ About Cyclos4Pro]\nNext\nVersion: Cyclos 4.15.9 (for the documentation about another version please click here)\n\nCopyright Â© 2004-2022 Social Trade Organization\n\nCyclos 4 PRO Documentation\n\nWelcome to the Cyclos 4 PRO Documentation. First, this manual contains the Installation and Maintenance guide. Second, this manual will give a detailed description and some examples of how to connect to Cyclos using the webservices. Subsequently, this manual explains the Cyclos scripts, these scripts can be executed by clicking on a menu link, by a scheduled task or by an extension point on a certain function. These scripts make it possible to add new functions to Cyclos and customize Cyclos exactly to the needs of your payment system. Finally, this manual will give an explanation of how to login to Cyclos from an external website. This can be useful if you have a large CMS as a website and you want to have an integrated login to Cyclos in this website.\n\nThere are some important documentation resources that are not part of this manual, these can be found here:\n\nThere are two (end user) Cyclos 4 manuals (make sure you are not logged into communities.cyclos.org):\nAdministrator manual\nUser manual\nNext to the manuals some functions are described with much more technical details in our wiki:\nConfigurations\nGroups\nNetworks\nAdvertisements\nUsers records\nTransfer_authorization\nSMS\nImports\nCyclos instruction videos:\nCyclos 4 communities\nCyclos 4 PRO\nTable of Contents\n\n1. Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n2. Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n3. Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n4. Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n5. Custom alerts\n6. External login\n \t \t Next\n \t \t 1. Installation & maintenance\n..\n"
      },
      "date": 1666722215713
    },
    {
      "type": "edit",
      "id": "7a66d27882e0305b",
      "item": {
        "type": "markdown",
        "id": "7a66d27882e0305b",
        "text": "[https://www.cyclos.org/about-stro/ About Cyclos4Pro]\n"
      },
      "date": 1666722224107
    },
    {
      "type": "add",
      "id": "3d0db94d47314693",
      "item": {
        "type": "markdown",
        "id": "3d0db94d47314693",
        "text": "Next\nVersion: Cyclos 4.15.9 (for the documentation about another version please click here)\n\nCopyright Â© 2004-2022 Social Trade Organization\n\nCyclos 4 PRO Documentation\n\nWelcome to the Cyclos 4 PRO Documentation. First, this manual contains the Installation and Maintenance guide. Second, this manual will give a detailed description and some examples of how to connect to Cyclos using the webservices. Subsequently, this manual explains the Cyclos scripts, these scripts can be executed by clicking on a menu link, by a scheduled task or by an extension point on a certain function. These scripts make it possible to add new functions to Cyclos and customize Cyclos exactly to the needs of your payment system. Finally, this manual will give an explanation of how to login to Cyclos from an external website. This can be useful if you have a large CMS as a website and you want to have an integrated login to Cyclos in this website.\n\nThere are some important documentation resources that are not part of this manual, these can be found here:\n\nThere are two (end user) Cyclos 4 manuals (make sure you are not logged into communities.cyclos.org):\nAdministrator manual\nUser manual\nNext to the manuals some functions are described with much more technical details in our wiki:\nConfigurations\nGroups\nNetworks\nAdvertisements\nUsers records\nTransfer_authorization\nSMS\nImports\nCyclos instruction videos:\nCyclos 4 communities\nCyclos 4 PRO\nTable of Contents\n\n1. Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n2. Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n3. Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n4. Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n5. Custom alerts\n6. External login\n \t \t Next\n \t \t 1. Installation & maintenance\n..\n"
      },
      "after": "7a66d27882e0305b",
      "date": 1666722225688
    },
    {
      "type": "add",
      "id": "199fde30b5181b52",
      "item": {
        "type": "markdown",
        "id": "199fde30b5181b52",
        "text": "[[Cyclos4 Features]]"
      },
      "after": "7a66d27882e0305b",
      "date": 1666724166326
    },
    {
      "type": "fork",
      "site": "ipbsm.edu.tries.fed.wiki",
      "date": 1666734672004
    },
    {
      "type": "edit",
      "id": "3d0db94d47314693",
      "item": {
        "type": "markdown",
        "id": "3d0db94d47314693",
        "text": "Next\nVersion: Cyclos 4.15.9 (for the documentation about another version please click here)\n\nCopyright Â© 2004-2022 Social Trade Organization\n\nCyclos 4 PRO Documentation\n\nWelcome to the Cyclos 4 PRO Documentation. First, this manual contains the Installation and Maintenance guide. Second, this manual will give a detailed description and some examples of how to connect to Cyclos using the webservices. Subsequently, this manual explains the Cyclos scripts, these scripts can be executed by clicking on a menu link, by a scheduled task or by an extension point on a certain function. These scripts make it possible to add new functions to Cyclos and customize Cyclos exactly to the needs of your payment system. Finally, this manual will give an explanation of how to login to Cyclos from an external website. This can be useful if you have a large CMS as a website and you want to have an integrated login to Cyclos in this website.\n\nThere are some important documentation resources that are not part of this manual, these can be found here:\n\nThere are two (end user) Cyclos 4 manuals (make sure you are not logged into communities.cyclos.org):\nAdministrator manual\nUser manual\nNext to the manuals some functions are described with much more technical details in our wiki:\nConfigurations\nGroups\nNetworks\nAdvertisements\nUsers records\nTransfer_authorization\nSMS\nImports\nCyclos instruction videos:\nCyclos 4 communities\nCyclos 4 PRO\nTable of Contents\n\n1. Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n2. Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n3. Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n4. Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n5. Custom alerts\n6. External login\n\nNext\n1. Installation & maintenance\n..\n"
      },
      "date": 1666734710112
    },
    {
      "type": "edit",
      "id": "3d0db94d47314693",
      "item": {
        "type": "markdown",
        "id": "3d0db94d47314693",
        "text": "Next\nVersion: Cyclos 4.15.9 (for the documentation about another version please click here)\n\nCopyright Â© 2004-2022 Social Trade Organization\n\n"
      },
      "date": 1666891150120
    },
    {
      "type": "add",
      "id": "fb686bba1ecc83fe",
      "item": {
        "type": "markdown",
        "id": "fb686bba1ecc83fe",
        "text": "# Cyclos 4 PRO Documentation\n\nWelcome to the Cyclos 4 PRO Documentation. First, this manual contains the Installation and Maintenance guide. Second, this manual will give a detailed description and some examples of how to connect to Cyclos using the web services. Subsequently, this manual explains the Cyclos scripts, these scripts can be executed by clicking on a menu link, by a scheduled task or by an extension point on a certain function. These scripts make it possible to add new functions to Cyclos and customize Cyclos exactly to the needs of your payment system. Finally, this manual will give an explanation of how to login to Cyclos from an external website. This can be useful if you have a large CMS as a website and you want to have an integrated login to Cyclos in this website.\n\nThere are some important documentation resources that are not part of this manual, these can be found here:\n\nThere are two (end user) Cyclos 4 manuals (make sure you are not logged into communities.cyclos.org):\nAdministrator manual\nUser manual\n"
      },
      "after": "3d0db94d47314693",
      "date": 1666891184533
    },
    {
      "type": "add",
      "id": "e1ed64809008f004",
      "item": {
        "type": "markdown",
        "id": "e1ed64809008f004",
        "text": "Next to the manuals some functions are described with much more technical details in our wiki:\nConfigurations\nGroups\nNetworks\nAdvertisements\nUsers records\nTransfer_authorization\nSMS\nImports\nCyclos instruction videos:\nCyclos 4 communities\nCyclos 4 PRO\nTable of Contents\n\n1. Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n2. Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n3. Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n4. Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n5. Custom alerts\n6. External login\n\nNext\n1. Installation & maintenance\n..\n"
      },
      "after": "fb686bba1ecc83fe",
      "date": 1666891200480
    },
    {
      "type": "edit",
      "id": "fb686bba1ecc83fe",
      "item": {
        "type": "markdown",
        "id": "fb686bba1ecc83fe",
        "text": "# Cyclos 4 PRO Documentation\n\nWelcome to the Cyclos 4 PRO Documentation. First, this manual contains the Installation and Maintenance guide. Second, this manual will give a detailed description and some examples of how to connect to Cyclos using the web services. Subsequently, this manual explains the Cyclos scripts, these scripts can be executed by clicking on a menu link, by a scheduled task or by an extension point on a certain function. These scripts make it possible to add new functions to Cyclos and customize Cyclos exactly to the needs of your payment system. Finally, this manual will give an explanation of how to login to Cyclos from an external website. This can be useful if you have a large CMS as a website and you want to have an integrated login to Cyclos in this website.\n\nThere are some important documentation resources that are not part of this manual, these can be found here:\n\nThere are two (end user) Cyclos 4 manuals (make sure you are not logged into communities.cyclos.org):\n**Administrator manual**\n**User manual**\n"
      },
      "date": 1666891239180
    },
    {
      "type": "edit",
      "id": "e1ed64809008f004",
      "item": {
        "type": "markdown",
        "id": "e1ed64809008f004",
        "text": "Next to the manuals some functions are described with much more technical details in our wiki:\n\nConfigurations\nGroups\nNetworks\nAdvertisements\nUsers records\nTransfer_authorization\nSMS\nImports\nCyclos instruction videos:\nCyclos 4 communities\nCyclos 4 PRO"
      },
      "date": 1666891249445
    },
    {
      "type": "add",
      "id": "7187a36c9a8c3abf",
      "item": {
        "type": "markdown",
        "id": "7187a36c9a8c3abf",
        "text": "# Table of Contents\n\n1. Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n"
      },
      "after": "e1ed64809008f004",
      "date": 1666891266387
    },
    {
      "type": "add",
      "id": "cff1289848e8564c",
      "item": {
        "type": "markdown",
        "id": "cff1289848e8564c",
        "text": "2. Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n"
      },
      "after": "7187a36c9a8c3abf",
      "date": 1666891282742
    },
    {
      "type": "add",
      "id": "879e5331e7500227",
      "item": {
        "type": "markdown",
        "id": "879e5331e7500227",
        "text": "3. Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n4. Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n5. Custom alerts\n6. External login\n\nNext\n1. Installation & maintenance\n..\n"
      },
      "after": "cff1289848e8564c",
      "date": 1666891288971
    },
    {
      "type": "edit",
      "id": "cff1289848e8564c",
      "item": {
        "type": "markdown",
        "id": "cff1289848e8564c",
        "text": "2 Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n"
      },
      "date": 1666891293142
    },
    {
      "type": "edit",
      "id": "cff1289848e8564c",
      "item": {
        "type": "markdown",
        "id": "cff1289848e8564c",
        "text": "2- Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n"
      },
      "date": 1666891299287
    },
    {
      "type": "edit",
      "id": "cff1289848e8564c",
      "item": {
        "type": "markdown",
        "id": "cff1289848e8564c",
        "text": "2-- Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n"
      },
      "date": 1666891306773
    },
    {
      "type": "edit",
      "id": "879e5331e7500227",
      "item": {
        "type": "markdown",
        "id": "879e5331e7500227",
        "text": "3-- Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n4. Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n5. Custom alerts\n6. External login\n\nNext\n1. Installation & maintenance\n..\n"
      },
      "date": 1666891317464
    },
    {
      "type": "edit",
      "id": "879e5331e7500227",
      "item": {
        "type": "markdown",
        "id": "879e5331e7500227",
        "text": "3-- Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n\n4-- Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n"
      },
      "date": 1666891354221
    },
    {
      "type": "add",
      "id": "97ddad5d0e99967a",
      "item": {
        "type": "markdown",
        "id": "97ddad5d0e99967a",
        "text": "5-- Custom alerts\n\n6-- External login\n\nNext\n1. Installation & maintenance\n..\n"
      },
      "after": "879e5331e7500227",
      "date": 1666891374346
    },
    {
      "type": "edit",
      "id": "cff1289848e8564c",
      "item": {
        "type": "markdown",
        "id": "cff1289848e8564c",
        "text": "# 2-- Full text searches\n2.1. Using Elasticsearch\n2.1.1. Language processing\n2.1.2. Reindexing\n"
      },
      "date": 1666891404163
    },
    {
      "type": "edit",
      "id": "7187a36c9a8c3abf",
      "item": {
        "type": "markdown",
        "id": "7187a36c9a8c3abf",
        "text": "# Table of Contents\n\n#1-- Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n"
      },
      "date": 1666891411905
    },
    {
      "type": "edit",
      "id": "7187a36c9a8c3abf",
      "item": {
        "type": "markdown",
        "id": "7187a36c9a8c3abf",
        "text": "# Table of Contents\n\n# 1-- Installation & maintenance\n1.1. Install Cyclos using Tomcat\n1.1.1. System requirements\n1.1.2. Install Java\n1.1.3. Install PostgreSQL (database)\n1.1.4. Install Tomcat (web server)\n1.1.5. Install Cyclos\n1.1.6. Startup Cyclos\n1.1.7. Upgrading Cyclos\n1.1.8. Problem solving\n1.2. Install Cyclos as a Docker image\n1.3. Adjustments (optional)\n1.3.1. Adjust Tomcat/Java memory\n1.3.2. Enable SSL/HTTPS\n1.3.3. Clustering\n1.3.4. Use Apache as frontend for Tomcat\n1.3.5. Enable SSL on apache\n1.3.6. Configuring Cyclos to work behind a proxy / load balancer\n1.3.7. Reserved names that cannot be used in proxy paths\n1.3.8. Enabling Google Maps\n1.3.9. reCAPTCHA\n1.3.10. External content storage\n1.3.10.1. Storage types\n1.3.10.2. Storage migrator utility class\n1.3.11. Using Elasticsearch\n1.3.12. Logging\n1.4. Maintenance\n1.4.1. Backup\n1.4.2. Restore\n1.4.3. Backup / restore of very large databases\n1.4.4. Reset admin password directly on database\n1.4.5. Sending database to third parties\n1.4.6. Removing all data from a network\n"
      },
      "date": 1666891417525
    },
    {
      "type": "edit",
      "id": "879e5331e7500227",
      "item": {
        "type": "markdown",
        "id": "879e5331e7500227",
        "text": "# 3-- Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n\n4-- Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n"
      },
      "date": 1666891433198
    },
    {
      "type": "edit",
      "id": "879e5331e7500227",
      "item": {
        "type": "markdown",
        "id": "879e5331e7500227",
        "text": "# 3-- Web services\n3.1. Introduction\n3.1.1. REST API\n3.1.2. WEB-RPC\n3.1.3. Authentication in web services\n3.1.3.1. User and password\n3.1.3.2. Login with a session\n3.1.3.3. Access clients\n3.1.4. Channels\n3.2. Java clients\n3.2.1. Dependencies\n3.2.2. Using services from a 3rd party Java application\n3.2.3. Examples\n3.2.3.1. Configure Cyclos\n3.2.3.2. Search users\n3.2.3.3. Search advertisements\n3.2.3.4. Register user\n3.2.3.5. Edit user profile\n3.2.3.6. Login user\n3.2.3.7. Get account information\n3.2.3.8. Perform payment\n3.3. PHP clients\n3.3.1. Dependencies\n3.3.2. Using services from a 3rd party PHP application\n3.3.3. Examples\n3.3.3.1. Configuration\n3.3.3.2. Search users\n3.3.3.3. Search advertisements\n3.3.3.4. Login user\n3.3.3.5. Perform payment from system to user\n3.3.3.6. Perform payment from user to user\n3.3.4. Error handling\n3.4. Other clients\n3.4.1. Examples\n3.5. Server side configuration to enable web services\n3.6. Available services and API Changes\n\n\n"
      },
      "date": 1666891442682
    },
    {
      "type": "add",
      "id": "1d24de9d99b7879e",
      "item": {
        "type": "markdown",
        "id": "1d24de9d99b7879e",
        "text": "# 4-- Scripting\n4.1. Scripting engine\n4.1.1. Variables bound to all scripts\n4.1.2. Script storage\n4.2. Debugging scripts\n4.3. Script types\n4.3.1. Library\n4.3.2. Custom field validation\n4.3.2.1. Examples\n4.3.3. Load custom field values\n4.3.3.1. Examples\n4.3.4. Account number generation\n4.3.4.1. Examples\n4.3.5. Account fee calculation\n4.3.5.1. Examples\n4.3.6. Transfer fee calculation\n4.3.6.1. Examples\n4.3.7. Transfer status handling\n4.3.7.1. Examples\n4.3.8. Session handling\n4.3.8.1. Examples\n4.3.9. Password handling\n4.3.9.1. Examples\n4.3.10. Extension points\n4.3.10.1. User extension point\n4.3.10.2. Operator extension point\n4.3.10.3. Address extension point\n4.3.10.4. Phone extension point\n4.3.10.5. Record extension point\n4.3.10.6. Advertisement extension point\n4.3.10.7. Transaction extension point\n4.3.10.8. Transaction authorization extension point\n4.3.10.9. Transfer extension point\n4.3.10.10. Voucher extension point\n4.3.10.11. Agreement extension point\n4.3.10.12. Import extension points\n4.3.10.13. Examples\n4.3.11. Custom operations\n4.3.11.1. Actions\n4.3.11.2. Receipt\n4.3.11.3. Examples\n4.3.11.4. Possibilities for custom operations that return a result page\n4.3.11.5. Running custom operations on bulk actions\n4.3.12. Custom wizards\n4.3.12.1. Examples\n4.3.13. Custom web services\n4.3.13.1. Examples\n4.3.14. Service interceptors\n4.3.14.1. Recovering from errors in crucial services\n4.3.14.2. Examples\n4.3.15. Custom recurring tasks\n4.3.15.1. Examples\n4.3.16. Custom background tasks\n4.3.16.1. Scheduling a custom background task\n4.3.16.2. Examples\n4.3.17. Custom SMS operations\n4.3.17.1. Examples\n4.3.18. Inbound SMS handling\n4.3.18.1. Examples\n4.3.19. Outbound SMS handling\n4.3.19.1. Examples\n4.3.20. Link generation\n4.3.20.1. Examples\n4.3.21. Export formats\n4.3.21.1. Examples\n4.3.22. Notifications\n4.3.22.1. Examples\n4.4. Solutions using scripts\n4.4.1. PayPal Integration\n4.4.1.1. Check the root URL\n4.4.1.2. Enable transaction number in currency\n4.4.1.3. Create a system record type to store the client id and secret\n4.4.1.4. Create a user record type to store each payment information\n4.4.1.5. Create the library script\n4.4.1.6. Create the custom operation script\n4.4.1.7. Create the custom operation\n4.4.1.8. Configure the system account from which payments will be performed to users\n4.4.1.9. Configure the payment type which will be used on payments\n4.4.1.10. Grant the administrator permissions\n4.4.1.11. Setup the PayPal credentials\n4.4.1.12. Grant the user permissions / enable the operation\n4.4.1.13. Configuring the script parameters\n4.4.1.14. Other considerations\n4.4.2. Loan module\n4.4.2.1. Enable transaction number in currency\n4.4.2.2. Create the transfer status flow\n4.4.2.3. Create the payment custom fields\n4.4.2.4. Configure the system account from which payments will be performed to users\n4.4.2.5. Create the payment type which will be used to grant the loan\n4.4.2.6. Configure the user account which will receive loans\n4.4.2.7. Create the payment type which will be used to repay the loan\n4.4.2.8. Create the library script\n4.4.2.9. Create the custom operation script\n4.4.2.10. Create two extension point scripts\n4.4.2.11. Create the custom operation\n4.4.2.12. Create the extension points\n4.4.2.13. Grant the administrator permissions\n4.4.2.14. Enable the custom operation for users which will be able to receive loans\n4.4.3. Integrating with Global USSD\n4.4.3.1. Create the USSD channel\n4.4.3.2. Enable the USSD channel for users\n4.4.3.3. Create a payment type for USSD\n4.4.3.4. Grant permissions for users to perform this payment type\n4.4.3.5. Create the library script\n4.4.3.6. Create the custom web service script\n4.4.3.7. Create the custom web service\n4.4.3.8. Enable a Global USSD account\n4.4.3.9. Start an USSD session\n4.4.4. Record edition\n4.4.4.1. Create the user record type to work with and give permissions\n4.4.4.2. Create the library script\n4.4.4.3. Create the custom operation script to send the record email\n4.4.4.4. Create the custom operation script to search records\n4.4.4.5. Create the custom operation script to create records\n4.4.4.6. Create the custom operation script to view records\n4.4.4.7. Create the custom operation script to update records\n4.4.4.8. Create the custom operation script to remove records\n4.4.4.9. Create the custom operation to remove records\n4.4.4.10. Create the custom operation to update records\n4.4.4.11. Create the custom operation to send the record email\n4.4.4.12. Create the custom operation to view records details\n4.4.4.13. Create the custom operation to create records\n4.4.4.14. Create the custom operation to search records\n4.4.4.15. Enable the custom operation for users\n4.4.5. User balances\n4.4.5.1. Create the script to load user account types\n4.4.5.2. Create the script to load user groups\n4.4.5.3. Create the custom operation script to search users balances\n4.4.5.4. Create the custom operation to search users balances\n4.4.5.5. Enable the custom operation\n4.5. Running scripts directly\n4.5.1. Examples\n4.5.1.1. Remove all users, transactions and related data\n4.5.1.2. Export advertisements with images\n4.5.1.3. Generating an account number for all accounts which doesn't have a number yet\n4.5.1.4. Generating a custom PDF file\n"
      },
      "after": "879e5331e7500227",
      "date": 1666891447599
    },
    {
      "type": "edit",
      "id": "97ddad5d0e99967a",
      "item": {
        "type": "markdown",
        "id": "97ddad5d0e99967a",
        "text": "# 5-- Custom alerts\n\n# 6-- External login\n\n# Next\nInstallation & maintenance\n\n"
      },
      "date": 1666891472930
    },
    {
      "type": "remove",
      "id": "3d0db94d47314693",
      "date": 1666891576246
    },
    {
      "type": "edit",
      "id": "199fde30b5181b52",
      "item": {
        "type": "markdown",
        "id": "199fde30b5181b52",
        "text": "[[Cyclos4 Features]]\n"
      },
      "date": 1666891585179
    },
    {
      "type": "add",
      "id": "0b70a121fbdf06ba",
      "item": {
        "type": "markdown",
        "id": "0b70a121fbdf06ba",
        "text": "Version: Cyclos 4.15.9 (for the documentation about another version please click here)\n\nCopyright Â© 2004-2022 Social Trade Organization\n\n"
      },
      "after": "199fde30b5181b52",
      "date": 1666891586162
    },
    {
      "type": "fork",
      "site": "finance.relocalizecreativity.net",
      "date": 1667327117785
    },
    {
      "type": "fork",
      "site": "relocalizecreativity.net",
      "date": 1671051148424
    },
    {
      "type": "add",
      "id": "0d49dddbc9650d30",
      "item": {
        "type": "markdown",
        "id": "0d49dddbc9650d30",
        "text": "See [[Pay it Forward]]"
      },
      "after": "199fde30b5181b52",
      "date": 1671051956564
    },
    {
      "type": "edit",
      "id": "0d49dddbc9650d30",
      "item": {
        "type": "markdown",
        "id": "0d49dddbc9650d30",
        "text": "See [[Pay it Forward]]\n"
      },
      "date": 1671051960585
    },
    {
      "type": "add",
      "id": "2ecdfd38a0ffcdc8",
      "item": {
        "type": "markdown",
        "id": "2ecdfd38a0ffcdc8",
        "text": "See [[SODOTO]]"
      },
      "after": "0d49dddbc9650d30",
      "date": 1671051979200
    },
    {
      "type": "fork",
      "site": "marc.relocalizecreativity.net",
      "date": 1675246707293
    }
  ]
}