{
  "title": "Big Objects as Properties",
  "story": [
    {
      "type": "paragraph",
      "id": "1b252f65f8ee1e42",
      "text": "The properties we attach to nodes and relationships can be any JSON serializable object. We use \"name\" when we print so it probably works better as a string."
    },
    {
      "type": "paragraph",
      "id": "091688b777da8a6f",
      "text": "It is true that the injector only creates string properties and makes a few other simplifications as to what it will construct. With code we can go further and HSC will accommodate."
    },
    {
      "type": "paragraph",
      "id": "69f64e484eed745a",
      "text": "I've tested this by making a small graph around Action Coding and then inserting a wiki page of coding todos into that object with javascript. [https://github.com/WardCunningham/assets/blob/master/pages/super-collaborator/scripts/complex-property.js github]"
    },
    {
      "type": "assets",
      "id": "a8831d6b3f56be13",
      "text": "pages/big-objects-as-properties"
    },
    {
      "type": "paragraph",
      "id": "aec7531dc1e5694f",
      "text": "The essential statement is where I locate the Action in the graph code and assign to the property target the page I have fetched from wiki."
    },
    {
      "type": "code",
      "id": "47da085033cbfe34",
      "text": "code.search('match (a:Action)')[0].a.props.target = page"
    },
    {
      "type": "paragraph",
      "id": "75064466bea91a3c",
      "text": "The graph, with and without the wiki page as property work fine in an out of the super collaborator."
    },
    {
      "type": "frame",
      "id": "35d84ca62595a245",
      "text": "//wiki.ralfbarkow.ch/assets/pages/reporting-and-analysis-tools/beam-select.html"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Big Objects as Properties",
        "story": []
      },
      "date": 1663865331759
    },
    {
      "item": {
        "type": "factory",
        "id": "1b252f65f8ee1e42"
      },
      "id": "1b252f65f8ee1e42",
      "type": "add",
      "date": 1663865333545
    },
    {
      "type": "edit",
      "id": "1b252f65f8ee1e42",
      "item": {
        "type": "paragraph",
        "id": "1b252f65f8ee1e42",
        "text": "The properties we attach to nodes and relationships can be any JSON serializable object. We use the \"name\" property when we print so it probably works better as a string."
      },
      "date": 1663865337479
    },
    {
      "type": "edit",
      "id": "1b252f65f8ee1e42",
      "item": {
        "type": "paragraph",
        "id": "1b252f65f8ee1e42",
        "text": "The properties we attach to nodes and relationships can be any JSON serializable object. We use the \"name\" property when we print so it probably works better as a string. It is true that the injector only creates string properties and makes a few other simplifications as to what it will construct. With code we can go further and HSC will accomodate."
      },
      "date": 1663865411381
    },
    {
      "type": "edit",
      "id": "1b252f65f8ee1e42",
      "item": {
        "type": "paragraph",
        "id": "1b252f65f8ee1e42",
        "text": "The properties we attach to nodes and relationships can be any JSON serializable object. We use the \"name\" property when we print so it probably works better as a string. It is true that the injector only creates string properties and makes a few other simplifications as to what it will construct. With code we can go further and HSC will acomodate."
      },
      "date": 1663865431975
    },
    {
      "type": "edit",
      "id": "1b252f65f8ee1e42",
      "item": {
        "type": "paragraph",
        "id": "1b252f65f8ee1e42",
        "text": "The properties we attach to nodes and relationships can be any JSON serializable object. We use the \"name\" property when we print so it probably works better as a string. It is true that the injector only creates string properties and makes a few other simplifications as to what it will construct. With code we can go further and HSC will accommodate."
      },
      "date": 1663865456215
    },
    {
      "type": "edit",
      "id": "1b252f65f8ee1e42",
      "item": {
        "type": "paragraph",
        "id": "1b252f65f8ee1e42",
        "text": "The properties we attach to nodes and relationships can be any JSON serializable object. We use the \"name\" property when we print so it probably works better as a string."
      },
      "date": 1663865467964
    },
    {
      "type": "add",
      "id": "091688b777da8a6f",
      "item": {
        "type": "paragraph",
        "id": "091688b777da8a6f",
        "text": "It is true that the injector only creates string properties and makes a few other simplifications as to what it will construct. With code we can go further and HSC will accommodate."
      },
      "after": "1b252f65f8ee1e42",
      "date": 1663865469425
    },
    {
      "type": "edit",
      "id": "1b252f65f8ee1e42",
      "item": {
        "type": "paragraph",
        "id": "1b252f65f8ee1e42",
        "text": "The properties we attach to nodes and relationships can be any JSON serializable object. We use \"name\" when we print so it probably works better as a string."
      },
      "date": 1663865517249
    },
    {
      "type": "add",
      "id": "69f64e484eed745a",
      "item": {
        "type": "paragraph",
        "id": "69f64e484eed745a",
        "text": "I've tested this by making a small graph around Action Coding and then inserting a wiki page of todos into that object."
      },
      "after": "091688b777da8a6f",
      "date": 1663865666957
    },
    {
      "type": "edit",
      "id": "69f64e484eed745a",
      "item": {
        "type": "paragraph",
        "id": "69f64e484eed745a",
        "text": "I've tested this by making a small graph around Action Coding and then inserting a wiki page of coding todos into that object with javascript."
      },
      "date": 1663865698986
    },
    {
      "type": "edit",
      "id": "69f64e484eed745a",
      "item": {
        "type": "paragraph",
        "id": "69f64e484eed745a",
        "text": "I've tested this by making a small graph around Action Coding and then inserting a wiki page of coding todos into that object with javascript. [https://github.com/WardCunningham/assets/blob/master/pages/super-collaborator/scripts/complex-property.js github]"
      },
      "date": 1663865768607
    },
    {
      "item": {
        "type": "factory",
        "id": "a8831d6b3f56be13"
      },
      "id": "a8831d6b3f56be13",
      "type": "add",
      "after": "69f64e484eed745a",
      "date": 1663865777923
    },
    {
      "type": "edit",
      "id": "a8831d6b3f56be13",
      "item": {
        "type": "assets",
        "id": "a8831d6b3f56be13",
        "text": "pages/big-objects-as-properties"
      },
      "date": 1663865792907
    },
    {
      "item": {
        "type": "factory",
        "id": "aec7531dc1e5694f"
      },
      "id": "aec7531dc1e5694f",
      "type": "add",
      "after": "a8831d6b3f56be13",
      "date": 1663865874096
    },
    {
      "type": "edit",
      "id": "aec7531dc1e5694f",
      "item": {
        "type": "paragraph",
        "id": "aec7531dc1e5694f",
        "text": "The essential statement is where I locate the Action in the graph code and assign to the property target the page I have fetched from wiki."
      },
      "date": 1663865954989
    },
    {
      "item": {
        "type": "factory",
        "id": "47da085033cbfe34"
      },
      "id": "47da085033cbfe34",
      "type": "add",
      "after": "aec7531dc1e5694f",
      "date": 1663865958029
    },
    {
      "type": "edit",
      "id": "47da085033cbfe34",
      "item": {
        "type": "code",
        "id": "47da085033cbfe34",
        "text": "code.search('match (a:Action)')[0].a.props.target = page"
      },
      "date": 1663865962232
    },
    {
      "item": {
        "type": "factory",
        "id": "75064466bea91a3c"
      },
      "id": "75064466bea91a3c",
      "type": "add",
      "after": "47da085033cbfe34",
      "date": 1663866017898
    },
    {
      "type": "edit",
      "id": "75064466bea91a3c",
      "item": {
        "type": "paragraph",
        "id": "75064466bea91a3c",
        "text": "The graph, with and without the wiki page as property work fine in an out of the super collaborator."
      },
      "date": 1663866059571
    },
    {
      "id": "35d84ca62595a245",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "35d84ca62595a245",
        "text": "http://ward.hsc.fed.wiki/assets/pages/reporting-and-analysis-tools/beam-select.html"
      },
      "after": "75064466bea91a3c",
      "attribution": {
        "page": "Classmate Influence Recognized"
      },
      "date": 1663866077202
    },
    {
      "type": "fork",
      "site": "ward.hsc.fed.wiki",
      "date": 1663869557456
    },
    {
      "type": "edit",
      "id": "35d84ca62595a245",
      "item": {
        "type": "frame",
        "id": "35d84ca62595a245",
        "text": "//wik.ralfbarkow.chi/assets/pages/reporting-and-analysis-tools/beam-select.html"
      },
      "date": 1663869582320
    },
    {
      "type": "edit",
      "id": "35d84ca62595a245",
      "item": {
        "type": "frame",
        "id": "35d84ca62595a245",
        "text": "//wiki.ralfbarkow.chi/assets/pages/reporting-and-analysis-tools/beam-select.html"
      },
      "date": 1663869589994
    },
    {
      "type": "edit",
      "id": "35d84ca62595a245",
      "item": {
        "type": "frame",
        "id": "35d84ca62595a245",
        "text": "//wiki.ralfbarkow.ch/assets/pages/reporting-and-analysis-tools/beam-select.html"
      },
      "date": 1663869604432
    }
  ]
}