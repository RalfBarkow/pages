{
  "title": "How We Connect Data",
  "story": [
    {
      "type": "paragraph",
      "id": "38da2283ce181913",
      "text": "We've adopted a laissez-faire attitude about communication between plugins. But could the node stream protocol be our unix pipe equivalent?"
    },
    {
      "type": "paragraph",
      "id": "b2f5f16752624a88",
      "text": "See [[How We Find Data]]"
    },
    {
      "type": "paragraph",
      "id": "4ea9ca8853dcbc20",
      "text": "Dominic Tarr recalls, In node.js’s early days the website featured an example of a tcp echo server.\nThis is the birth of node’s most important api, the Stream. But things were just beginning to take form.\n[http://dominictarr.com/post/145135293917/history-of-streams post]"
    },
    {
      "type": "paragraph",
      "id": "a1058ec5e8454a8f",
      "text": "When Tarr discovered streams and realized they would be useful, he wrote event-stream which applied streams to a use similar to Functional Reactive Programming. He convinced substack and Max Ogden how useful streams were, and then they convinced everyone else."
    },
    {
      "type": "paragraph",
      "id": "7f9eb27844a73611",
      "text": "Streams had been created by the core node developers, but they were then adopted by people who contributed greatly to node’s ecosystem. These two groups had slightly different interpretations of what a stream was."
    },
    {
      "type": "paragraph",
      "id": "7efd9e266ed2b735",
      "text": "If node streams teach us anything, it’s that it’s very difficult to develop something as fundamental as streams inside a “core”. You can’t change core without breaking things because things assume core and never declare dependencies."
    },
    {
      "type": "pagefold",
      "id": "3c90ef01d71abb05",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "704bfe3d8d4efd2e",
      "text": "Part I of Tarr's story suggests we haven't done anything wrong by not incorporating streams into wiki's core yet. Maybe part II will hint when the abstraction will be done enough to do so."
    },
    {
      "type": "paragraph",
      "id": "682bf5b77e4c443c",
      "text": "Calvin French-Owen reviews javascript's history and predicts we’ll continue to see the cycle of rapid iteration for the next few years at least. Companies will be forced to update their codebase, or be happy with whatever horse they have. [https://segment.com/blog/the-deep-roots-of-js-fatigue/ post]"
    },
    {
      "type": "paragraph",
      "id": "b02e45bde6a528e3",
      "text": "The npm async module solves many problems we ignored or dealt with by hand. Caolan McMahon's occasional posts offer direct and related advice."
    },
    {
      "type": "paragraph",
      "id": "bc57430f26e91212",
      "text": "Node Style and Structure ready for async. [http://caolan.org/posts/nodejs_style_and_structure/ post]"
    },
    {
      "type": "paragraph",
      "id": "2886940f2c628d8e",
      "text": "Tiny Immutables ready for async. [http://caolan.org/posts/tiny_immutables/ post]"
    },
    {
      "type": "paragraph",
      "id": "bbb7cfa175291c6c",
      "text": "Stream all the things, with backpressure. [http://caolan.org/posts/how_i_want_to_write_node_stream_all_the_things_new/ post]"
    },
    {
      "type": "paragraph",
      "id": "2351428e4c1f1f0d",
      "text": "Doug McIlroy envisioned software development by component assembly and had largely defined what became pipes before asking unix developers to consider adding components to their work."
    },
    {
      "type": "paragraph",
      "id": "ecd8ec3f3402ce9b",
      "text": "Typewritten summary of requirements as of 1964. [http://doc.cat-v.org/unix/pipes/ post]"
    },
    {
      "type": "paragraph",
      "id": "5e5b5dc6ce551117",
      "text": "McIlroy's retrospective on early years of unix. [http://www.cs.dartmouth.edu/~doug/reader.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "e1e88eb77c49923b",
      "text": "[[Nonuniform Signal Resampled]] anticipates signal computation in wiki without being wiki."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "How We Connect Data",
        "story": []
      },
      "date": 1464703511060
    },
    {
      "item": {
        "type": "factory",
        "id": "38da2283ce181913"
      },
      "id": "38da2283ce181913",
      "type": "add",
      "date": 1464703513365
    },
    {
      "type": "edit",
      "id": "38da2283ce181913",
      "item": {
        "type": "paragraph",
        "id": "38da2283ce181913",
        "text": "We've adopted a lasse-fare attitude about communication between plugins. But could the node stream protocol be our unix pipe equivalent?"
      },
      "date": 1464703617538
    },
    {
      "type": "edit",
      "id": "38da2283ce181913",
      "item": {
        "type": "paragraph",
        "id": "38da2283ce181913",
        "text": "We've adopted a laissez-faire attitude about communication between plugins. But could the node stream protocol be our unix pipe equivalent?"
      },
      "date": 1464703644802
    },
    {
      "type": "add",
      "id": "b2f5f16752624a88",
      "item": {
        "type": "paragraph",
        "id": "b2f5f16752624a88",
        "text": "See [[How We Find Data]]"
      },
      "after": "38da2283ce181913",
      "date": 1464703671172
    },
    {
      "type": "add",
      "id": "4ea9ca8853dcbc20",
      "item": {
        "type": "paragraph",
        "id": "4ea9ca8853dcbc20",
        "text": "In node.js’s early days back in 2010, the node.js website featured an example of a tcp echo server.\nThis is the birth of node’s most important api, the Stream. But things were just beginning to take form.\n"
      },
      "after": "b2f5f16752624a88",
      "date": 1464703768877
    },
    {
      "type": "add",
      "id": "a1058ec5e8454a8f",
      "item": {
        "type": "paragraph",
        "id": "a1058ec5e8454a8f",
        "text": "When I discovered streams and realized they would be useful, I wrote event-stream which applied streams to a use similar to Functional Reactive Programming. I convinced substack and Max Ogden how useful streams were, and then they convinced everyone else."
      },
      "after": "4ea9ca8853dcbc20",
      "date": 1464703855872
    },
    {
      "type": "edit",
      "id": "4ea9ca8853dcbc20",
      "item": {
        "type": "paragraph",
        "id": "4ea9ca8853dcbc20",
        "text": "Dominic Tarr recalls, In node.js’s early days back in 2010, the node.js website featured an example of a tcp echo server.\nThis is the birth of node’s most important api, the Stream. But things were just beginning to take form.\n"
      },
      "date": 1464703923472
    },
    {
      "type": "edit",
      "id": "4ea9ca8853dcbc20",
      "item": {
        "type": "paragraph",
        "id": "4ea9ca8853dcbc20",
        "text": "Dominic Tarr recalls, In node.js’s early days back in 2010, the node.js website featured an example of a tcp echo server.\nThis is the birth of node’s most important api, the Stream. But things were just beginning to take form.\n[http://dominictarr.com/post/145135293917/history-of-streams post]"
      },
      "date": 1464703955259
    },
    {
      "type": "edit",
      "id": "4ea9ca8853dcbc20",
      "item": {
        "type": "paragraph",
        "id": "4ea9ca8853dcbc20",
        "text": "Dominic Tarr recalls, In node.js’s early days the website featured an example of a tcp echo server.\nThis is the birth of node’s most important api, the Stream. But things were just beginning to take form.\n[http://dominictarr.com/post/145135293917/history-of-streams post]"
      },
      "date": 1464704004116
    },
    {
      "type": "add",
      "id": "7f9eb27844a73611",
      "item": {
        "type": "paragraph",
        "id": "7f9eb27844a73611",
        "text": "Streams had been created by the core node developers, but they were then adopted by people who contributed greatly to node’s ecosystem. These two groups had slightly different interpretations of what a stream was."
      },
      "after": "a1058ec5e8454a8f",
      "date": 1464704152386
    },
    {
      "type": "add",
      "id": "7efd9e266ed2b735",
      "item": {
        "type": "paragraph",
        "id": "7efd9e266ed2b735",
        "text": "If node streams teach us anything, it’s that it’s very difficult to develop something as fundamental as streams inside a “core”. You can’t change core without breaking things because things assume core and never declare dependencies."
      },
      "after": "7f9eb27844a73611",
      "date": 1464704262503
    },
    {
      "item": {
        "type": "factory",
        "id": "3c90ef01d71abb05"
      },
      "id": "3c90ef01d71abb05",
      "type": "add",
      "after": "7efd9e266ed2b735",
      "date": 1464704314727
    },
    {
      "type": "edit",
      "id": "3c90ef01d71abb05",
      "item": {
        "type": "pagefold",
        "id": "3c90ef01d71abb05",
        "text": "."
      },
      "date": 1464704320138
    },
    {
      "type": "add",
      "id": "2a0da30d6a61e3b7",
      "item": {
        "type": "paragraph",
        "id": "2a0da30d6a61e3b7",
        "text": "# Streams"
      },
      "after": "b2f5f16752624a88",
      "date": 1464704375907
    },
    {
      "type": "edit",
      "id": "2a0da30d6a61e3b7",
      "item": {
        "type": "markdown",
        "id": "2a0da30d6a61e3b7",
        "text": "# Streams"
      },
      "date": 1464704378089
    },
    {
      "type": "edit",
      "id": "a1058ec5e8454a8f",
      "item": {
        "type": "paragraph",
        "id": "a1058ec5e8454a8f",
        "text": "When he discovered streams and realized they would be useful, he wrote event-stream which applied streams to a use similar to Functional Reactive Programming. He convinced substack and Max Ogden how useful streams were, and then they convinced everyone else."
      },
      "date": 1464704415271
    },
    {
      "type": "edit",
      "id": "a1058ec5e8454a8f",
      "item": {
        "type": "paragraph",
        "id": "a1058ec5e8454a8f",
        "text": "When Tarr discovered streams and realized they would be useful, he wrote event-stream which applied streams to a use similar to Functional Reactive Programming. He convinced substack and Max Ogden how useful streams were, and then they convinced everyone else."
      },
      "date": 1464704440962
    },
    {
      "type": "remove",
      "id": "2a0da30d6a61e3b7",
      "date": 1464704464108
    },
    {
      "item": {
        "type": "factory",
        "id": "704bfe3d8d4efd2e"
      },
      "id": "704bfe3d8d4efd2e",
      "type": "add",
      "after": "3c90ef01d71abb05",
      "date": 1464704500868
    },
    {
      "type": "edit",
      "id": "704bfe3d8d4efd2e",
      "item": {
        "type": "paragraph",
        "id": "704bfe3d8d4efd2e",
        "text": "Part I of Tarr's story suggests we haven't done anything wrong by not incorporating streams into wiki's core yet. Maybe part II will hint when it will be done enough to do so."
      },
      "date": 1464704586559
    },
    {
      "type": "edit",
      "id": "704bfe3d8d4efd2e",
      "item": {
        "type": "paragraph",
        "id": "704bfe3d8d4efd2e",
        "text": "Part I of Tarr's story suggests we haven't done anything wrong by not incorporating streams into wiki's core yet. Maybe part II will hint when the abstraction will be done enough to do so."
      },
      "date": 1464704614129
    },
    {
      "type": "add",
      "id": "bc57430f26e91212",
      "item": {
        "type": "paragraph",
        "id": "bc57430f26e91212",
        "text": "Node Style and Structure, tips from the author of async. [http://caolan.org/posts/nodejs_style_and_structure/ post]"
      },
      "after": "704bfe3d8d4efd2e",
      "date": 1465140634703
    },
    {
      "type": "edit",
      "id": "bc57430f26e91212",
      "item": {
        "type": "paragraph",
        "id": "bc57430f26e91212",
        "text": "Node Style and Structure ready for async. [http://caolan.org/posts/nodejs_style_and_structure/ post]"
      },
      "date": 1465140677107
    },
    {
      "type": "add",
      "id": "2886940f2c628d8e",
      "item": {
        "type": "paragraph",
        "id": "2886940f2c628d8e",
        "text": "Tiny Immutables. [http://caolan.org/posts/tiny_immutables/ post]"
      },
      "after": "bc57430f26e91212",
      "date": 1465140750174
    },
    {
      "type": "edit",
      "id": "2886940f2c628d8e",
      "item": {
        "type": "paragraph",
        "id": "2886940f2c628d8e",
        "text": "Tiny Immutables ready for async. [http://caolan.org/posts/tiny_immutables/ post]"
      },
      "date": 1465140772802
    },
    {
      "type": "add",
      "id": "bbb7cfa175291c6c",
      "item": {
        "type": "paragraph",
        "id": "bbb7cfa175291c6c",
        "text": "Stream all the things. [http://caolan.org/posts/how_i_want_to_write_node_stream_all_the_things_new/ post]"
      },
      "after": "2886940f2c628d8e",
      "date": 1465140849912
    },
    {
      "type": "add",
      "id": "b02e45bde6a528e3",
      "item": {
        "type": "paragraph",
        "id": "b02e45bde6a528e3",
        "text": "The npm async module solves many problems we ignored or dealt with by hand. "
      },
      "after": "704bfe3d8d4efd2e",
      "date": 1465140965114
    },
    {
      "type": "edit",
      "id": "b02e45bde6a528e3",
      "item": {
        "type": "paragraph",
        "id": "b02e45bde6a528e3",
        "text": "The npm async module solves many problems we ignored or dealt with by hand. Caolan McMahon's occasional posts offer direct and related advice."
      },
      "date": 1465141053435
    },
    {
      "type": "edit",
      "id": "bbb7cfa175291c6c",
      "item": {
        "type": "paragraph",
        "id": "bbb7cfa175291c6c",
        "text": "Stream all the things, with backpressure. [http://caolan.org/posts/how_i_want_to_write_node_stream_all_the_things_new/ post]"
      },
      "date": 1465141089435
    },
    {
      "type": "add",
      "id": "2351428e4c1f1f0d",
      "item": {
        "type": "paragraph",
        "id": "2351428e4c1f1f0d",
        "text": "Doug "
      },
      "after": "bbb7cfa175291c6c",
      "date": 1465141297484
    },
    {
      "type": "edit",
      "id": "2351428e4c1f1f0d",
      "item": {
        "type": "paragraph",
        "id": "2351428e4c1f1f0d",
        "text": "Doug McIlroy envisioned software development by component assembly and had largely defined what became pipes before asking unix developers to consider adding components to their work."
      },
      "date": 1465141483689
    },
    {
      "type": "add",
      "id": "ecd8ec3f3402ce9b",
      "item": {
        "type": "paragraph",
        "id": "ecd8ec3f3402ce9b",
        "text": "[http://doc.cat-v.org/unix/pipes/ post]"
      },
      "after": "2351428e4c1f1f0d",
      "date": 1465141499452
    },
    {
      "type": "edit",
      "id": "ecd8ec3f3402ce9b",
      "item": {
        "type": "paragraph",
        "id": "ecd8ec3f3402ce9b",
        "text": "Typewritten summary of requirements as of 1964. [http://doc.cat-v.org/unix/pipes/ post]"
      },
      "date": 1465141603580
    },
    {
      "type": "add",
      "id": "5e5b5dc6ce551117",
      "item": {
        "type": "paragraph",
        "id": "5e5b5dc6ce551117",
        "text": "McIlroy's retrospective on early years of unix. [http://www.cs.dartmouth.edu/~doug/reader.pdf pdf]"
      },
      "after": "ecd8ec3f3402ce9b",
      "date": 1465141880266
    },
    {
      "type": "add",
      "id": "682bf5b77e4c443c",
      "item": {
        "type": "paragraph",
        "id": "682bf5b77e4c443c",
        "text": "I predict we’ll continue to see the cycle of rapid iteration for the next few years at least. Companies will be forced to update their codebase, or be happy with the horse they have."
      },
      "after": "5e5b5dc6ce551117",
      "date": 1465142097329
    },
    {
      "type": "edit",
      "id": "682bf5b77e4c443c",
      "item": {
        "type": "paragraph",
        "id": "682bf5b77e4c443c",
        "text": "I predict we’ll continue to see the cycle of rapid iteration for the next few years at least. Companies will be forced to update their codebase, or be happy with the horse they have. [https://segment.com/blog/the-deep-roots-of-js-fatigue/ post]"
      },
      "date": 1465142110449
    },
    {
      "type": "edit",
      "id": "682bf5b77e4c443c",
      "item": {
        "type": "paragraph",
        "id": "682bf5b77e4c443c",
        "text": "Calvin French-Owen reviews javascript's history and predicts we’ll continue to see the cycle of rapid iteration for the next few years at least. Companies will be forced to update their codebase, or be happy with whatever horse they have. [https://segment.com/blog/the-deep-roots-of-js-fatigue/ post]"
      },
      "date": 1465142175680
    },
    {
      "type": "move",
      "order": [
        "38da2283ce181913",
        "b2f5f16752624a88",
        "4ea9ca8853dcbc20",
        "a1058ec5e8454a8f",
        "7f9eb27844a73611",
        "7efd9e266ed2b735",
        "3c90ef01d71abb05",
        "704bfe3d8d4efd2e",
        "682bf5b77e4c443c",
        "b02e45bde6a528e3",
        "bc57430f26e91212",
        "2886940f2c628d8e",
        "bbb7cfa175291c6c",
        "2351428e4c1f1f0d",
        "ecd8ec3f3402ce9b",
        "5e5b5dc6ce551117"
      ],
      "id": "682bf5b77e4c443c",
      "date": 1465142223870
    },
    {
      "type": "add",
      "id": "e1e88eb77c49923b",
      "item": {
        "type": "paragraph",
        "id": "e1e88eb77c49923b",
        "text": "[[Nonuniform Signal Resampled]] anticipates signal computation in wiki without being wiki."
      },
      "after": "5e5b5dc6ce551117",
      "date": 1473686033332
    },
    {
      "type": "fork",
      "site": "ward.asia.wiki.org",
      "date": 1626413308243
    }
  ]
}