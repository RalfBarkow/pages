{
  "title": "Map2D",
  "story": [
    {
      "type": "paragraph",
      "id": "3c9c204feae04995",
      "text": " Representation of 2D maps with float data"
    },
    {
      "type": "code",
      "id": "1be9fa8fc8fa495b",
      "text": "// From http://www.redblobgames.com/\n// Copyright 2015 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n\n/** Representation of 2D maps with float data\n *\n * Fields:\n *   w:int, h:int, size:int -- read-only\n *   data:array[size]:float -- read/write\n * Methods:\n *   id(x:int, y:int):int -- tells you where in data[] (x,y) goes\n *   x(id:int):int -- tells you the x for a given id\n *   y(id:int):int -- tells you the y for a given id\n *   get(x:int, y:int):float -- getter\n *   set(x:int, y:int, value:float) -- setter\n *\n * It is fine to directly read/write from the data array.\n */\n\nexport default class Map2D {\n    constructor(w, h) {\n        this.w = w;\n        this.h = h;\n        this.size = w * h;\n        this.data = new Float32Array(this.size);\n    }\n    id(x, y)         { return x + this.w * y; }\n    x(id)            { return id % this.w; }\n    y(id)            { return (id / this.w) | 0; }\n    get(x, y)        { return this.data[this.id(x, y)]; }\n    set(x, y, value) { this.data[this.id(x, y)] = value; }\n}\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Map2D",
        "story": []
      },
      "date": 1651991876738
    },
    {
      "item": {
        "type": "factory",
        "id": "1be9fa8fc8fa495b"
      },
      "id": "1be9fa8fc8fa495b",
      "type": "add",
      "date": 1651991886252
    },
    {
      "type": "edit",
      "id": "1be9fa8fc8fa495b",
      "item": {
        "type": "code",
        "id": "1be9fa8fc8fa495b",
        "text": "export default class Map2D {\n    constructor(w, h) {\n        this.w = w;\n        this.h = h;\n        this.size = w * h;\n        this.data = new Float32Array(this.size);\n    }\n    id(x, y)         { return x + this.w * y; }\n    x(id)            { return id % this.w; }\n    y(id)            { return (id / this.w) | 0; }\n    get(x, y)        { return this.data[this.id(x, y)]; }\n    set(x, y, value) { this.data[this.id(x, y)] = value; }\n}"
      },
      "date": 1651991888286
    },
    {
      "type": "edit",
      "id": "1be9fa8fc8fa495b",
      "item": {
        "type": "code",
        "id": "1be9fa8fc8fa495b",
        "text": "// From http://www.redblobgames.com/\n// Copyright 2015 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n\n/** Representation of 2D maps with float data\n *\n * Fields:\n *   w:int, h:int, size:int -- read-only\n *   data:array[size]:float -- read/write\n * Methods:\n *   id(x:int, y:int):int -- tells you where in data[] (x,y) goes\n *   x(id:int):int -- tells you the x for a given id\n *   y(id:int):int -- tells you the y for a given id\n *   get(x:int, y:int):float -- getter\n *   set(x:int, y:int, value:float) -- setter\n *\n * It is fine to directly read/write from the data array.\n */\n\nexport default class Map2D {\n    constructor(w, h) {\n        this.w = w;\n        this.h = h;\n        this.size = w * h;\n        this.data = new Float32Array(this.size);\n    }\n    id(x, y)         { return x + this.w * y; }\n    x(id)            { return id % this.w; }\n    y(id)            { return (id / this.w) | 0; }\n    get(x, y)        { return this.data[this.id(x, y)]; }\n    set(x, y, value) { this.data[this.id(x, y)] = value; }\n}\n"
      },
      "date": 1651991910294
    },
    {
      "item": {
        "type": "factory",
        "id": "3c9c204feae04995"
      },
      "id": "3c9c204feae04995",
      "type": "add",
      "after": "1be9fa8fc8fa495b",
      "date": 1651991958498
    },
    {
      "type": "edit",
      "id": "3c9c204feae04995",
      "item": {
        "type": "paragraph",
        "id": "3c9c204feae04995",
        "text": " Representation of 2D maps with float data"
      },
      "date": 1651991962361
    },
    {
      "id": "3c9c204feae04995",
      "type": "move",
      "order": [
        "3c9c204feae04995",
        "1be9fa8fc8fa495b"
      ],
      "date": 1651991964364
    }
  ]
}