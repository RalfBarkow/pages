{
  "title": "Messages",
  "story": [
    {
      "type": "paragraph",
      "id": "015ab4186c4c391f",
      "text": "It does not make a whole lot of sense to think of a traversal without a traveller. In [[Smalltalk]], travellers move around by means of messages. Let’s explore this further."
    },
    {
      "type": "paragraph",
      "id": "98abf3d07dd7e928",
      "text": "What is the meaning of requiring that every message has an answer? If we see the process triggered by sending a message as a traversal through a circuit, then sending a message is some sort of evaluation of the circuit. Asking that every message has an answer is equivalent to requiring that every circuit can be evaluated. This, already, has far reaching consequences."
    },
    {
      "type": "paragraph",
      "id": "0b9e287952fe7c89",
      "text": "[…]"
    },
    {
      "type": "pagefold",
      "id": "36720fed1b8ce43c",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "30e57f6d131c7eee",
      "site": "wiki.ralfbarkow.ch",
      "slug": "exception-handling",
      "title": "Exception Handling",
      "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, […]"
    },
    {
      "type": "markdown",
      "id": "65e2046ed8a9e327",
      "text": "> […] the consequence of adding exceptions into a language: *we can no longer be sure that a message send will give us an answer*. In other words, once we have exceptions, any message send has the potential not to return to the sender: it may fail."
    },
    {
      "type": "pagefold",
      "id": "eb2204bf7650ab21",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "fd868cc6daa0e37d",
      "text": "To begin with, a process can be seen as a series of nested circuit evaluations, because each message send represents the local intent to evaluate."
    },
    {
      "type": "paragraph",
      "id": "7d7673beac6008f6",
      "text": "Processes end when they are completely evaluated. Essentially all of the Smalltalk processes that run are spawned in response to the virtual machine receiving a signal. But this is not all that can occur. It is entirely possible for these externally triggered processes to spawn internal processes that, unlike them, never produce a value. Here is an example."
    },
    {
      "type": "paragraph",
      "id": "eaaf53eb5d7f3d4c",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "b6695a50a6df154a",
      "text": "⇒ The [[Process of Garbage Collection]]"
    },
    {
      "type": "paragraph",
      "id": "a89bab95867b58c8",
      "text": "[…]"
    },
    {
      "type": "pagefold",
      "id": "d46acad930a19301",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "48857801363fdb63",
      "text": "[[Alan Kay Turing Award Lecture]] (2004) [https://tinlizzie.org/IA/index.php/Alan_Kay_Turing_Award_Lecture_(2004) page]\n> […] \"wow, it's all about messages.\" The reason it's about messages and not about objects so much is that the messages are the abstractions. We spend far too much time in our field worrying about what the objects are."
    },
    {
      "type": "markdown",
      "id": "5dfbbc70e05c9b6b",
      "text": "* Messages are the [[abstraction]]s – 45:25\n  [[Message Passing]], [[Smalltalk Blocks Are Thunks In Disguise]]. [[Lazy Evaluation]] or [[Normal Order Evaluation]] semantics\n"
    },
    {
      "type": "reference",
      "id": "8f98c7bcd3133c0c",
      "site": "wiki.ralfbarkow.ch",
      "slug": "messaging",
      "title": "Messaging",
      "text": "Communication and collaboration is based upon exchange of polymorphic [[messages]] rather than exchange of \"executable\" code (DNA/RNA in the case of biological cells, machine code in the case of computing. Only the specialized cell can know what behavior to invoke given a certain message. [https://c2.com/w4/cyberyota/wiki.cgi?FourPrinciples page]"
    },
    {
      "type": "reference",
      "id": "6b3b612a42b6ec96",
      "site": "wiki.ralfbarkow.ch",
      "slug": "message-passing",
      "title": "Message Passing",
      "text": "What is message passing?"
    },
    {
      "type": "reference",
      "id": "d903538573024855",
      "site": "wiki.ralfbarkow.ch",
      "slug": "fence-after-fence",
      "title": "Fence after Fence",
      "text": "Alan Kay's Turing Award Lecture ends with a demo that shows the [https://www.youtube.com/watch?v=aXC19T5sJ1U&t=52m50s drive-a-car thing] – a fascinating exploration of object oriented programming, a fulfillment of his expression that \"everything is an object.\""
    },
    {
      "type": "markdown",
      "id": "71999921b844a2fb",
      "text": "* See also [[Computer Science and Its Relation to Mathematics]]\n* You have to understand what the actual scope of computing is going to be and you have to help us invent it. (Replace \"computing\" by \"digital humanities\".)\n* [[Two Dimensions of \"Primary Motivations\"]] – 13:36 / 1:07:51: Reasoning & Change – 95% Instrumental reasoners and 5% interested in Ideas.\n* [[Literacy]] – 30:15\n* [[Advance Organizer]], big picture\n"
    },
    {
      "type": "paragraph",
      "id": "730c5436eb553919",
      "text": "See [[Message Passing]], [[Transparent Proxies]], [[Abstract Constructor]], [[Dr. SES]]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Messages",
        "story": []
      },
      "date": 1638220112431
    },
    {
      "item": {
        "type": "factory",
        "id": "6b3b612a42b6ec96"
      },
      "id": "6b3b612a42b6ec96",
      "type": "add",
      "date": 1638220165221
    },
    {
      "type": "edit",
      "id": "6b3b612a42b6ec96",
      "item": {
        "type": "reference",
        "id": "6b3b612a42b6ec96",
        "site": "wiki.ralfbarkow.ch",
        "slug": "message-passing",
        "title": "Message Passing",
        "text": "What is message passing?"
      },
      "date": 1638220168137
    },
    {
      "id": "d903538573024855",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "d903538573024855",
        "site": "wiki.ralfbarkow.ch",
        "slug": "fence-after-fence",
        "title": "Fence after Fence",
        "text": "Alan Kay's Turing Award Lecture ends with a demo that shows the [https://www.youtube.com/watch?v=aXC19T5sJ1U&t=52m50s drive-a-car thing] – a fascinating exploration of object oriented programming, a fulfillment of his expression that \"everything is an object.\""
      },
      "after": "6b3b612a42b6ec96",
      "date": 1638220237596
    },
    {
      "id": "71999921b844a2fb",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "71999921b844a2fb",
        "text": "* See also [[Computer Science and Its Relation to Mathematics]]\n* You have to understand what the actual scope of computing is going to be and you have to help us invent it. (Replace \"computing\" by \"digital humanities\".)\n* [[Two Dimensions of \"Primary Motivations\"]] – 13:36 / 1:07:51: Reasoning & Change – 95% Instrumental reasoners and 5% interested in Ideas.\n* [[Literacy]] – 30:15\n* [[Advance Organizer]], big picture\n* [[Messages]] are the abstractions – 45:25\n  [[Message Passing]]\n"
      },
      "after": "d903538573024855",
      "date": 1638220249351
    },
    {
      "item": {
        "type": "factory",
        "id": "8f98c7bcd3133c0c"
      },
      "id": "8f98c7bcd3133c0c",
      "type": "add",
      "after": "71999921b844a2fb",
      "date": 1638220494812
    },
    {
      "type": "edit",
      "id": "8f98c7bcd3133c0c",
      "item": {
        "type": "reference",
        "id": "8f98c7bcd3133c0c",
        "site": "wiki.ralfbarkow.ch",
        "slug": "messaging",
        "title": "Messaging",
        "text": "Communication and collaboration is based upon exchange of polymorphic [[messages]] rather than exchange of \"executable\" code (DNA/RNA in the case of biological cells, machine code in the case of computing. Only the specialized cell can know what behavior to invoke given a certain message. [https://c2.com/w4/cyberyota/wiki.cgi?FourPrinciples page]"
      },
      "date": 1638220498330
    },
    {
      "id": "8f98c7bcd3133c0c",
      "type": "move",
      "order": [
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb"
      ],
      "date": 1638220502819
    },
    {
      "item": {
        "type": "factory",
        "id": "730c5436eb553919"
      },
      "id": "730c5436eb553919",
      "type": "add",
      "after": "71999921b844a2fb",
      "date": 1645016415920
    },
    {
      "type": "edit",
      "id": "730c5436eb553919",
      "item": {
        "type": "paragraph",
        "id": "730c5436eb553919",
        "text": "See "
      },
      "date": 1645016424001
    },
    {
      "type": "edit",
      "id": "730c5436eb553919",
      "item": {
        "type": "paragraph",
        "id": "730c5436eb553919",
        "text": "See [[Transparent Proxies]]"
      },
      "date": 1645016437618
    },
    {
      "item": {
        "type": "factory",
        "id": "48857801363fdb63"
      },
      "id": "48857801363fdb63",
      "type": "add",
      "after": "730c5436eb553919",
      "date": 1645017134757
    },
    {
      "type": "edit",
      "id": "48857801363fdb63",
      "item": {
        "type": "paragraph",
        "id": "48857801363fdb63",
        "text": "https://tinlizzie.org/IA/index.php/Alan_Kay_Turing_Award_Lecture_(2004)"
      },
      "date": 1645017138028
    },
    {
      "id": "48857801363fdb63",
      "type": "move",
      "order": [
        "48857801363fdb63",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1645017140921
    },
    {
      "type": "edit",
      "id": "48857801363fdb63",
      "item": {
        "type": "markdown",
        "id": "48857801363fdb63",
        "text": "https://tinlizzie.org/IA/index.php/Alan_Kay_Turing_Award_Lecture_(2004)"
      },
      "date": 1645017142392
    },
    {
      "type": "edit",
      "id": "48857801363fdb63",
      "item": {
        "type": "markdown",
        "id": "48857801363fdb63",
        "text": "Alan Kay Turing Award Lecture (2004) [https://tinlizzie.org/IA/index.php/Alan_Kay_Turing_Award_Lecture_(2004) page]"
      },
      "date": 1645017172869
    },
    {
      "type": "edit",
      "id": "730c5436eb553919",
      "item": {
        "type": "paragraph",
        "id": "730c5436eb553919",
        "text": "See  [[Message Passing]], [[Transparent Proxies]]"
      },
      "date": 1645017201993
    },
    {
      "type": "edit",
      "id": "730c5436eb553919",
      "item": {
        "type": "paragraph",
        "id": "730c5436eb553919",
        "text": "See [[Message Passing]], [[Transparent Proxies]]"
      },
      "date": 1645017206681
    },
    {
      "type": "edit",
      "id": "48857801363fdb63",
      "item": {
        "type": "markdown",
        "id": "48857801363fdb63",
        "text": "Alan Kay Turing Award Lecture (2004) [https://tinlizzie.org/IA/index.php/Alan_Kay_Turing_Award_Lecture_(2004) page]\n> So, the image here was, \"wow it's all about messages.\""
      },
      "date": 1645017378022
    },
    {
      "type": "edit",
      "id": "71999921b844a2fb",
      "item": {
        "type": "markdown",
        "id": "71999921b844a2fb",
        "text": "* See also [[Computer Science and Its Relation to Mathematics]]\n* You have to understand what the actual scope of computing is going to be and you have to help us invent it. (Replace \"computing\" by \"digital humanities\".)\n* [[Two Dimensions of \"Primary Motivations\"]] – 13:36 / 1:07:51: Reasoning & Change – 95% Instrumental reasoners and 5% interested in Ideas.\n* [[Literacy]] – 30:15\n* [[Advance Organizer]], big picture\n"
      },
      "date": 1645017398229
    },
    {
      "type": "add",
      "id": "5dfbbc70e05c9b6b",
      "item": {
        "type": "markdown",
        "id": "5dfbbc70e05c9b6b",
        "text": "* [[Messages]] are the abstractions – 45:25\n  [[Message Passing]]\n"
      },
      "after": "71999921b844a2fb",
      "date": 1645017399755
    },
    {
      "id": "5dfbbc70e05c9b6b",
      "type": "move",
      "order": [
        "48857801363fdb63",
        "5dfbbc70e05c9b6b",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1645017403241
    },
    {
      "type": "edit",
      "id": "48857801363fdb63",
      "item": {
        "type": "markdown",
        "id": "48857801363fdb63",
        "text": "[[Alan Kay Turing Award Lecture]] (2004) [https://tinlizzie.org/IA/index.php/Alan_Kay_Turing_Award_Lecture_(2004) page]\n> So, the image here was, \"wow it's all about messages.\""
      },
      "date": 1645017615663
    },
    {
      "type": "edit",
      "id": "48857801363fdb63",
      "item": {
        "type": "markdown",
        "id": "48857801363fdb63",
        "text": "[[Alan Kay Turing Award Lecture]] (2004) [https://tinlizzie.org/IA/index.php/Alan_Kay_Turing_Award_Lecture_(2004) page]\n> […] \"wow, it's all about messages.\" The reason it's about messages and not about objects so much is that the messages are the abstractions. We spend far too much time in our field worrying about what the objects are."
      },
      "date": 1645017710929
    },
    {
      "type": "fork",
      "date": 1645018147977
    },
    {
      "type": "fork",
      "date": 1645020927245
    },
    {
      "type": "edit",
      "id": "730c5436eb553919",
      "item": {
        "type": "paragraph",
        "id": "730c5436eb553919",
        "text": "See [[Message Passing]], [[Transparent Proxies]], [[Abstract Constructor]]."
      },
      "date": 1645022202445
    },
    {
      "type": "edit",
      "id": "730c5436eb553919",
      "item": {
        "type": "paragraph",
        "id": "730c5436eb553919",
        "text": "See [[Message Passing]], [[Transparent Proxies]], [[Abstract Constructor]], [[Dr. SES]]."
      },
      "date": 1645022314395
    },
    {
      "type": "edit",
      "id": "5dfbbc70e05c9b6b",
      "item": {
        "type": "markdown",
        "id": "5dfbbc70e05c9b6b",
        "text": "* [[Messages]] are the [[abstraction]]s – 45:25\n  [[Message Passing]], [[Smalltalk Blocks Are Thunks In Disguise]]\n"
      },
      "date": 1645024195230
    },
    {
      "type": "edit",
      "id": "5dfbbc70e05c9b6b",
      "item": {
        "type": "markdown",
        "id": "5dfbbc70e05c9b6b",
        "text": "* [[Messages]] are the [[abstraction]]s – 45:25\n  [[Message Passing]], [[Smalltalk Blocks Are Thunks In Disguise]]\n"
      },
      "date": 1645024237074
    },
    {
      "type": "fork",
      "date": 1645024240402
    },
    {
      "type": "edit",
      "id": "5dfbbc70e05c9b6b",
      "item": {
        "type": "markdown",
        "id": "5dfbbc70e05c9b6b",
        "text": "* [[Messages]] are the [[abstraction]]s – 45:25\n  [[Message Passing]], [[Smalltalk Blocks Are Thunks In Disguise]]. [[Lazy Evaluation]], \n"
      },
      "date": 1645024289590
    },
    {
      "type": "edit",
      "id": "5dfbbc70e05c9b6b",
      "item": {
        "type": "markdown",
        "id": "5dfbbc70e05c9b6b",
        "text": "* [[Messages]] are the [[abstraction]]s – 45:25\n  [[Message Passing]], [[Smalltalk Blocks Are Thunks In Disguise]]. [[Lazy Evaluation]] or [[Normal Order Evaluation]] semantics\n"
      },
      "date": 1645024304358
    },
    {
      "item": {
        "type": "factory",
        "id": "015ab4186c4c391f"
      },
      "id": "015ab4186c4c391f",
      "type": "add",
      "after": "730c5436eb553919",
      "date": 1660290723063
    },
    {
      "id": "015ab4186c4c391f",
      "type": "move",
      "order": [
        "48857801363fdb63",
        "015ab4186c4c391f",
        "5dfbbc70e05c9b6b",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1660290726990
    },
    {
      "id": "015ab4186c4c391f",
      "type": "move",
      "order": [
        "015ab4186c4c391f",
        "48857801363fdb63",
        "5dfbbc70e05c9b6b",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1660290729457
    },
    {
      "type": "edit",
      "id": "015ab4186c4c391f",
      "item": {
        "type": "paragraph",
        "id": "015ab4186c4c391f",
        "text": "It does not make a whole lot of sense to think of a traversal without a traveller. In Smalltalk, travellers move around by means of messages. Let’s explore this further."
      },
      "date": 1660290735560
    },
    {
      "item": {
        "type": "factory",
        "id": "eb2204bf7650ab21"
      },
      "id": "eb2204bf7650ab21",
      "type": "add",
      "after": "730c5436eb553919",
      "date": 1660290737967
    },
    {
      "id": "eb2204bf7650ab21",
      "type": "move",
      "order": [
        "015ab4186c4c391f",
        "eb2204bf7650ab21",
        "48857801363fdb63",
        "5dfbbc70e05c9b6b",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1660290741187
    },
    {
      "type": "edit",
      "id": "eb2204bf7650ab21",
      "item": {
        "type": "pagefold",
        "id": "eb2204bf7650ab21",
        "text": "~"
      },
      "date": 1660290744398
    },
    {
      "type": "edit",
      "id": "015ab4186c4c391f",
      "item": {
        "type": "paragraph",
        "id": "015ab4186c4c391f",
        "text": "It does not make a whole lot of sense to think of a traversal without a traveller. In [[Smalltalk]], travellers move around by means of messages. Let’s explore this further."
      },
      "date": 1660290759121
    },
    {
      "type": "add",
      "id": "0b9e287952fe7c89",
      "item": {
        "type": "paragraph",
        "id": "0b9e287952fe7c89",
        "text": "[…]"
      },
      "after": "015ab4186c4c391f",
      "date": 1660290768745
    },
    {
      "type": "add",
      "id": "98abf3d07dd7e928",
      "item": {
        "type": "paragraph",
        "id": "98abf3d07dd7e928",
        "text": "What is the meaning of requiring that every message has an answer? If we see the process triggered by sending a message as a traversal through a circuit, then sending a message is some sort of evaluation of the circuit. Asking that every message has an answer is equivalent to requiring that every circuit can be evaluated. This, already, has far reaching consequences"
      },
      "after": "015ab4186c4c391f",
      "date": 1660290784243
    },
    {
      "type": "add",
      "id": "65e2046ed8a9e327",
      "item": {
        "type": "paragraph",
        "id": "65e2046ed8a9e327",
        "text": "> […] the consequence of adding exceptions into a language: we can no longer be sure that a message send will give us an answer. In other words, once we have exceptions, any message send has the potential not to return to the sender: it may fail."
      },
      "after": "0b9e287952fe7c89",
      "date": 1660290919937
    },
    {
      "type": "edit",
      "id": "65e2046ed8a9e327",
      "item": {
        "type": "markdown",
        "id": "65e2046ed8a9e327",
        "text": "> […] the consequence of adding exceptions into a language: we can no longer be sure that a message send will give us an answer. In other words, once we have exceptions, any message send has the potential not to return to the sender: it may fail."
      },
      "date": 1660290923593
    },
    {
      "item": {
        "type": "factory",
        "id": "30e57f6d131c7eee"
      },
      "id": "30e57f6d131c7eee",
      "type": "add",
      "after": "730c5436eb553919",
      "date": 1660290928317
    },
    {
      "id": "30e57f6d131c7eee",
      "type": "move",
      "order": [
        "015ab4186c4c391f",
        "98abf3d07dd7e928",
        "0b9e287952fe7c89",
        "30e57f6d131c7eee",
        "65e2046ed8a9e327",
        "eb2204bf7650ab21",
        "48857801363fdb63",
        "5dfbbc70e05c9b6b",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1660290931419
    },
    {
      "type": "edit",
      "id": "30e57f6d131c7eee",
      "item": {
        "type": "reference",
        "id": "30e57f6d131c7eee",
        "site": "wiki.ralfbarkow.ch",
        "slug": "exception-handling",
        "title": "Exception Handling",
        "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, but specifies instead an *[[exception handler]]* to “catch” exceptions. When something goes wrong, instead of returning an error code, the method that detects the exceptional situation interrupts the main flow of execution by *signaling* an exception. This does two things: it captures essential information about the context in which the exception occurred, and transfers control to the exception handler, written by the client, whi"
      },
      "date": 1660290933658
    },
    {
      "type": "edit",
      "id": "65e2046ed8a9e327",
      "item": {
        "type": "markdown",
        "id": "65e2046ed8a9e327",
        "text": "> […] the consequence of adding exceptions into a language: *we can no longer be sure that a message send will give us an answer*. In other words, once we have exceptions, any message send has the potential not to return to the sender: it may fail."
      },
      "date": 1660290971387
    },
    {
      "type": "edit",
      "id": "98abf3d07dd7e928",
      "item": {
        "type": "paragraph",
        "id": "98abf3d07dd7e928",
        "text": "What is the meaning of requiring that every message has an answer? If we see the process triggered by sending a message as a traversal through a circuit, then sending a message is some sort of evaluation of the circuit. Asking that every message has an answer is equivalent to requiring that every circuit can be evaluated. This, already, has far reaching consequences."
      },
      "date": 1660290988923
    },
    {
      "item": {
        "type": "pagefold",
        "id": "36720fed1b8ce43c",
        "text": "~"
      },
      "id": "36720fed1b8ce43c",
      "type": "add",
      "after": "730c5436eb553919",
      "date": 1660291000648
    },
    {
      "id": "36720fed1b8ce43c",
      "type": "move",
      "order": [
        "015ab4186c4c391f",
        "98abf3d07dd7e928",
        "0b9e287952fe7c89",
        "36720fed1b8ce43c",
        "30e57f6d131c7eee",
        "65e2046ed8a9e327",
        "eb2204bf7650ab21",
        "48857801363fdb63",
        "5dfbbc70e05c9b6b",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1660291005423
    },
    {
      "type": "edit",
      "id": "36720fed1b8ce43c",
      "item": {
        "type": "pagefold",
        "id": "36720fed1b8ce43c",
        "text": "~"
      },
      "date": 1660291009097
    },
    {
      "type": "add",
      "id": "fd868cc6daa0e37d",
      "item": {
        "type": "paragraph",
        "id": "fd868cc6daa0e37d",
        "text": "To begin with, a process can be seen as a series of nested circuit evaluations, because each message send represents the local intent to evaluate."
      },
      "after": "0b9e287952fe7c89",
      "date": 1660291065496
    },
    {
      "id": "fd868cc6daa0e37d",
      "type": "move",
      "order": [
        "015ab4186c4c391f",
        "98abf3d07dd7e928",
        "0b9e287952fe7c89",
        "9b8b91bab140953d",
        "36720fed1b8ce43c",
        "30e57f6d131c7eee",
        "65e2046ed8a9e327",
        "eb2204bf7650ab21",
        "fd868cc6daa0e37d",
        "48857801363fdb63",
        "5dfbbc70e05c9b6b",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1660291071969,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "item": {
        "type": "pagefold",
        "id": "d46acad930a19301",
        "text": "~"
      },
      "id": "d46acad930a19301",
      "type": "add",
      "after": "730c5436eb553919",
      "date": 1660291078694
    },
    {
      "type": "edit",
      "id": "d46acad930a19301",
      "item": {
        "type": "pagefold",
        "id": "d46acad930a19301",
        "text": "~"
      },
      "date": 1660291086814
    },
    {
      "type": "edit",
      "id": "fd868cc6daa0e37d",
      "item": {
        "type": "paragraph",
        "id": "fd868cc6daa0e37d",
        "text": "To begin with, a process can be seen as a series of nested circuit evaluations, because each message send represents the local intent to evaluate."
      },
      "date": 1660291095146
    },
    {
      "type": "add",
      "id": "eaaf53eb5d7f3d4c",
      "item": {
        "type": "paragraph",
        "id": "eaaf53eb5d7f3d4c",
        "text": "[…]"
      },
      "after": "fd868cc6daa0e37d",
      "date": 1660291097131
    },
    {
      "type": "fork",
      "date": 1660291099495
    },
    {
      "type": "add",
      "id": "7d7673beac6008f6",
      "item": {
        "type": "paragraph",
        "id": "7d7673beac6008f6",
        "text": "Processes end when they are completely evaluated. Essentially all of the Smalltalk processes that run are spawned in response to the virtual machine receiving a signal. But this is not all that can occur. It is entirely possible for these externally triggered processes to spawn internal processes that, unlike them, never produce a value. Here is an example."
      },
      "after": "fd868cc6daa0e37d",
      "date": 1660291131219
    },
    {
      "type": "add",
      "id": "b6695a50a6df154a",
      "item": {
        "type": "paragraph",
        "id": "b6695a50a6df154a",
        "text": "[[The Process of Garbage Collection]]"
      },
      "after": "eaaf53eb5d7f3d4c",
      "date": 1660291173528
    },
    {
      "type": "add",
      "id": "a89bab95867b58c8",
      "item": {
        "type": "paragraph",
        "id": "a89bab95867b58c8",
        "text": "[…]"
      },
      "after": "b6695a50a6df154a",
      "date": 1660291180809
    },
    {
      "type": "edit",
      "id": "b6695a50a6df154a",
      "item": {
        "type": "paragraph",
        "id": "b6695a50a6df154a",
        "text": "⇒ [[The Process of Garbage Collection]]"
      },
      "date": 1660291206080
    },
    {
      "id": "d46acad930a19301",
      "type": "move",
      "order": [
        "015ab4186c4c391f",
        "98abf3d07dd7e928",
        "0b9e287952fe7c89",
        "36720fed1b8ce43c",
        "30e57f6d131c7eee",
        "65e2046ed8a9e327",
        "eb2204bf7650ab21",
        "fd868cc6daa0e37d",
        "7d7673beac6008f6",
        "eaaf53eb5d7f3d4c",
        "b6695a50a6df154a",
        "a89bab95867b58c8",
        "d46acad930a19301",
        "48857801363fdb63",
        "5dfbbc70e05c9b6b",
        "8f98c7bcd3133c0c",
        "6b3b612a42b6ec96",
        "d903538573024855",
        "71999921b844a2fb",
        "730c5436eb553919"
      ],
      "date": 1660291217237
    },
    {
      "type": "edit",
      "id": "30e57f6d131c7eee",
      "item": {
        "type": "reference",
        "id": "30e57f6d131c7eee",
        "site": "wiki.ralfbarkow.ch",
        "slug": "exception-handling",
        "title": "Exception Handling",
        "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, […]"
      },
      "date": 1660291281623
    },
    {
      "type": "edit",
      "id": "7d7673beac6008f6",
      "item": {
        "type": "paragraph",
        "id": "7d7673beac6008f6",
        "text": "Processes end when they are completely evaluated. Essentially all of the Smalltalk processes that run are spawned in response to the [[virtual machine]] receiving a signal. But this is not all that can occur. It is entirely possible for these externally triggered processes to spawn internal processes that, unlike them, never produce a value. Here is an example."
      },
      "date": 1660291345899
    },
    {
      "type": "edit",
      "id": "b6695a50a6df154a",
      "item": {
        "type": "paragraph",
        "id": "b6695a50a6df154a",
        "text": "⇒ The [[Process of Garbage Collection]]"
      },
      "date": 1660291447959
    },
    {
      "type": "edit",
      "id": "5dfbbc70e05c9b6b",
      "item": {
        "type": "markdown",
        "id": "5dfbbc70e05c9b6b",
        "text": "* Messages are the [[abstraction]]s – 45:25\n  [[Message Passing]], [[Smalltalk Blocks Are Thunks In Disguise]]. [[Lazy Evaluation]] or [[Normal Order Evaluation]] semantics\n"
      },
      "date": 1673247353765
    },
    {
      "type": "edit",
      "id": "7d7673beac6008f6",
      "item": {
        "type": "paragraph",
        "id": "7d7673beac6008f6",
        "text": "Processes end when they are completely evaluated. Essentially all of the Smalltalk processes that run are spawned in response to the virtual machine receiving a signal. But this is not all that can occur. It is entirely possible for these externally triggered processes to spawn internal processes that, unlike them, never produce a value. Here is an example."
      },
      "date": 1702405018091
    }
  ]
}