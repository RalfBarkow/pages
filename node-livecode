{
  "title": "node-livecode",
  "story": [
    {
      "type": "paragraph",
      "id": "35c8361e73d89a75",
      "text": "This is a node.js module that provides livecoding support. [https://github.com/ccrraaiigg/node-livecode github]"
    },
    {
      "type": "paragraph",
      "id": "7a1d16472d68c2c9",
      "text": "In response to [[websocket]] commands, it loads additional npm modules at runtime, evaluates free-standing JavaScript code, and adds new protocol instructions for other clients to use. This is part of the [[Caffeine]] project.\n\nThanks to [[Chris Tomich]] for his help!"
    },
    {
      "type": "pagefold",
      "id": "9cf7392bbab5b16c",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "5f1d58f404547add",
      "text": "Se *Backend Caffeine with Node.js and Tweetcoding* [https://thiscontext.com/2017/06/27/backend-caffeine-with-node-js-and-tweetcoding/ post]"
    },
    {
      "type": "markdown",
      "id": "4e77a9f799cb7644",
      "text": "> Once we have node-livecode on a server listening for commands, we can inject code into it from Caffeine. First we’ll inject code to listen to #tweetcoding tweets from Twitter:"
    },
    {
      "type": "code",
      "id": "6f13c4f8218fc9f5",
      "text": "| websocket |\n\nwebsocket := JS WebSocket newWithParameters: {'wss://yourserver:port'}.\nJS top at: #websocket put:websocket.\n\nwebsocket\n  at: #onmessage\n  put: [:message |\n    Transcript\n      cr;\n      nextPutAll: message data asString;\n      endEntry];\n  at: #onopen\n  put: (\n    (JS Function) new: '\n      window.top.ws.send(JSON.stringify({\n        credential: ''shared secret'',\n        verb: ''require'',\n        parameters: {\n          package: ''node-tweet-stream'',\n          then: ''\n            var Twitter = require(''node-tweet-stream'')\n              , twitter = new Twitter({\n                  consumer_key: '''',\n                  consumer_secret: '''',\n                  token: '''',\n                  token_secret: ''''})\n\n            twitter.on(\n              ''tweet'',\n              function (tweet) {\n                if (instructions[''broadcast'']) {\n                  instructions[''broadcast''](tweet)}}\n\n            twitter.on(\n              ''error'',\n              function (err) {\n                console.log(''error in uploaded code'')})\n\n            twitter.track(''#tweetcoding #turtlegraphics '')''}})))"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "node-livecode",
        "story": []
      },
      "date": 1651588122031
    },
    {
      "item": {
        "type": "factory",
        "id": "92aaf8df3ce3c7ab"
      },
      "id": "92aaf8df3ce3c7ab",
      "type": "add",
      "date": 1651588133371
    },
    {
      "type": "edit",
      "id": "92aaf8df3ce3c7ab",
      "item": {
        "type": "paragraph",
        "id": "92aaf8df3ce3c7ab",
        "text": "https://github.com/ccrraaiigg/node-livecode"
      },
      "date": 1651588138112
    },
    {
      "item": {
        "type": "factory",
        "id": "35c8361e73d89a75"
      },
      "id": "35c8361e73d89a75",
      "type": "add",
      "after": "92aaf8df3ce3c7ab",
      "date": 1651588143015
    },
    {
      "type": "edit",
      "id": "35c8361e73d89a75",
      "item": {
        "type": "paragraph",
        "id": "35c8361e73d89a75",
        "text": "This is a node.js module that provides livecoding support. In response to websocket commands, it loads additional npm modules at runtime, evaluates free-standing JavaScript code, and adds new protocol instructions for other clients to use. This is part of the Caffeine project.\n\nThanks to [[Chris Tomich]] for his help!"
      },
      "date": 1651588150920
    },
    {
      "type": "remove",
      "id": "92aaf8df3ce3c7ab",
      "date": 1651588170856
    },
    {
      "type": "edit",
      "id": "35c8361e73d89a75",
      "item": {
        "type": "paragraph",
        "id": "35c8361e73d89a75",
        "text": "This is a node.js module that provides livecoding support. [https://github.com/ccrraaiigg/node-livecode github]"
      },
      "date": 1651588176386
    },
    {
      "type": "add",
      "id": "7a1d16472d68c2c9",
      "item": {
        "type": "paragraph",
        "id": "7a1d16472d68c2c9",
        "text": "In response to websocket commands, it loads additional npm modules at runtime, evaluates free-standing JavaScript code, and adds new protocol instructions for other clients to use. This is part of the [[Caffeine]] project.\n\nThanks to [[Chris Tomich]] for his help!"
      },
      "after": "35c8361e73d89a75",
      "date": 1651588192508
    },
    {
      "type": "edit",
      "id": "7a1d16472d68c2c9",
      "item": {
        "type": "paragraph",
        "id": "7a1d16472d68c2c9",
        "text": "In response to [[websocket]] commands, it loads additional npm modules at runtime, evaluates free-standing JavaScript code, and adds new protocol instructions for other clients to use. This is part of the [[Caffeine]] project.\n\nThanks to [[Chris Tomich]] for his help!"
      },
      "date": 1651588595508
    },
    {
      "item": {
        "type": "factory",
        "id": "9ac8a11658c3c5f3"
      },
      "id": "9ac8a11658c3c5f3",
      "type": "add",
      "after": "7a1d16472d68c2c9",
      "date": 1651588874520
    },
    {
      "item": {
        "type": "factory",
        "id": "9cf7392bbab5b16c"
      },
      "id": "9cf7392bbab5b16c",
      "type": "add",
      "after": "9ac8a11658c3c5f3",
      "date": 1651588878761
    },
    {
      "type": "remove",
      "id": "9ac8a11658c3c5f3",
      "date": 1651588880213
    },
    {
      "type": "edit",
      "id": "9cf7392bbab5b16c",
      "item": {
        "type": "pagefold",
        "id": "9cf7392bbab5b16c",
        "text": "~"
      },
      "date": 1651588881703
    },
    {
      "item": {
        "type": "factory",
        "id": "5f1d58f404547add"
      },
      "id": "5f1d58f404547add",
      "type": "add",
      "after": "9cf7392bbab5b16c",
      "date": 1651588884074
    },
    {
      "type": "edit",
      "id": "5f1d58f404547add",
      "item": {
        "type": "paragraph",
        "id": "5f1d58f404547add",
        "text": "Se *Backend Caffeine with Node.js and Tweetcoding* "
      },
      "date": 1651588890572
    },
    {
      "type": "edit",
      "id": "5f1d58f404547add",
      "item": {
        "type": "paragraph",
        "id": "5f1d58f404547add",
        "text": "Se *Backend Caffeine with Node.js and Tweetcoding* [https://thiscontext.com/2017/06/27/backend-caffeine-with-node-js-and-tweetcoding/ post]"
      },
      "date": 1651588900818
    },
    {
      "type": "edit",
      "id": "5f1d58f404547add",
      "item": {
        "type": "markdown",
        "id": "5f1d58f404547add",
        "text": "Se *Backend Caffeine with Node.js and Tweetcoding* [https://thiscontext.com/2017/06/27/backend-caffeine-with-node-js-and-tweetcoding/ post]"
      },
      "date": 1651588902096
    },
    {
      "item": {
        "type": "factory",
        "id": "4e77a9f799cb7644"
      },
      "id": "4e77a9f799cb7644",
      "type": "add",
      "after": "5f1d58f404547add",
      "date": 1651588916898
    },
    {
      "type": "edit",
      "id": "4e77a9f799cb7644",
      "item": {
        "type": "paragraph",
        "id": "4e77a9f799cb7644",
        "text": "Once we have node-livecode on a server listening for commands, we can inject code into it from Caffeine. First we’ll inject code to listen to #tweetcoding tweets from Twitter:"
      },
      "date": 1651588920691
    },
    {
      "item": {
        "type": "factory",
        "id": "6f13c4f8218fc9f5"
      },
      "id": "6f13c4f8218fc9f5",
      "type": "add",
      "after": "4e77a9f799cb7644",
      "date": 1651588947342
    },
    {
      "type": "edit",
      "id": "6f13c4f8218fc9f5",
      "item": {
        "type": "code",
        "id": "6f13c4f8218fc9f5",
        "text": "| websocket |\n\nwebsocket := JS WebSocket newWithParameters: {'wss://yourserver:port'}.\nJS top at: #websocket put:websocket.\n\nwebsocket\n  at: #onmessage\n  put: [:message |\n    Transcript\n      cr;\n      nextPutAll: message data asString;\n      endEntry];\n  at: #onopen\n  put: (\n    (JS Function) new: '\n      window.top.ws.send(JSON.stringify({\n        credential: ''shared secret'',\n        verb: ''require'',\n        parameters: {\n          package: ''node-tweet-stream'',\n          then: ''\n            var Twitter = require(''node-tweet-stream'')\n              , twitter = new Twitter({\n                  consumer_key: '''',\n                  consumer_secret: '''',\n                  token: '''',\n                  token_secret: ''''})\n\n            twitter.on(\n              ''tweet'',\n              function (tweet) {\n                if (instructions[''broadcast'']) {\n                  instructions[''broadcast''](tweet)}}\n\n            twitter.on(\n              ''error'',\n              function (err) {\n                console.log(''error in uploaded code'')})\n\n            twitter.track(''#tweetcoding #turtlegraphics '')''}})))"
      },
      "date": 1651588949681
    },
    {
      "type": "edit",
      "id": "4e77a9f799cb7644",
      "item": {
        "type": "paragraph",
        "id": "4e77a9f799cb7644",
        "text": "> Once we have node-livecode on a server listening for commands, we can inject code into it from Caffeine. First we’ll inject code to listen to #tweetcoding tweets from Twitter:"
      },
      "date": 1651588954420
    },
    {
      "type": "edit",
      "id": "4e77a9f799cb7644",
      "item": {
        "type": "markdown",
        "id": "4e77a9f799cb7644",
        "text": "> Once we have node-livecode on a server listening for commands, we can inject code into it from Caffeine. First we’ll inject code to listen to #tweetcoding tweets from Twitter:"
      },
      "date": 1651588955684
    }
  ]
}