{
  "title": "Separating Logic From GUI",
  "story": [
    {
      "type": "paragraph",
      "id": "b228c957d3c15689",
      "text": "Separating business logic from visual components is probably the most popular way of improving testability of an application. The goal is to make the view as “thin” as possible by putting all the associated logic in controllers and models. This typically should include logic related to the visual aspects of the interface such as colors, visibility or layout properties.\n"
    },
    {
      "type": "paragraph",
      "id": "2fdd97ee86ca6d76",
      "text": "All the techniques discussed in [[GUI Patterns]] paragraph can be applied in a JavaFX application to make a separation between the view and controller. However, some of the JavaFX built-in features favour usage of some patterns over others. In particular, the presenter of the Passive View [7] pattern holds a complete responsibility of updating the view. This enables a high level of testability but severely limits usage of property bindings, a mechanism that does not only save a lot of code but also makes the application cleaner and easier to maintain."
    },
    {
      "type": "paragraph",
      "id": "6f8268954216ddc5",
      "text": "Therefore for JavaFX it is typically much more advantageous to employ the Presentation Model [3] or Model-View-ViewModel [8] patterns. For the price of slightly lower test coverage, the developer can fully profit from the property bindings."
    },
    {
      "type": "markdown",
      "id": "a13cdad71e998e07",
      "text": "# See Also"
    },
    {
      "type": "reference",
      "id": "2b6839f7e8ee37d1",
      "site": "wiki.ralfbarkow.ch",
      "slug": "model-view-presenter",
      "title": "Model-View-Presenter",
      "text": "I am evaluating [[Wiki Engines]] and [[Wiki Farms]] prior to choosing one for my own personal use and for various public uses.  To get additional input from experienced wiki users, and help others, I am putting the review on this wiki."
    },
    {
      "type": "reference",
      "id": "d7d0581b33ffafa4",
      "site": "wiki.ralfbarkow.ch",
      "slug": "supervising-controller",
      "title": "Supervising Controller",
      "text": "The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Separating Logic From GUI",
        "story": []
      },
      "date": 1640731667122
    },
    {
      "item": {
        "type": "factory",
        "id": "b228c957d3c15689"
      },
      "id": "b228c957d3c15689",
      "type": "add",
      "date": 1640731676856
    },
    {
      "type": "edit",
      "id": "b228c957d3c15689",
      "item": {
        "type": "paragraph",
        "id": "b228c957d3c15689",
        "text": "Separating business logic from visual components is probably the most popular way of improving testability of an application. The goal is to make the view as “thin” as possible by putting all the associated logic in controllers and models. This typically should include logic related to the visual aspects of the interface such as colors, visibility or layout properties.\n"
      },
      "date": 1640731701349
    },
    {
      "type": "add",
      "id": "2fdd97ee86ca6d76",
      "item": {
        "type": "paragraph",
        "id": "2fdd97ee86ca6d76",
        "text": "All the techniques discussed in *GUI Patterns* paragraph can be applied in a JavaFX application to make a separation between the view and controller. However, some of the JavaFX built-in features favour usage of some patterns over others. In particular, the presenter of the Passive View [7] pattern holds a complete responsibility of updating the view. This enables a high level of testability but severely limits usage of property bindings, a mechanism that does not only save a lot of code but also makes the application cleaner and easier to maintain."
      },
      "after": "b228c957d3c15689",
      "date": 1640731759515
    },
    {
      "type": "add",
      "id": "6f8268954216ddc5",
      "item": {
        "type": "paragraph",
        "id": "6f8268954216ddc5",
        "text": "Therefore for JavaFX it is typically much more advantageous to employ the Presentation Model [3] or Model-View-ViewModel [8] patterns. For the price of slightly lower test coverage, the developer can fully profit from the property bindings."
      },
      "after": "2fdd97ee86ca6d76",
      "date": 1640731787356
    },
    {
      "type": "edit",
      "id": "2fdd97ee86ca6d76",
      "item": {
        "type": "paragraph",
        "id": "2fdd97ee86ca6d76",
        "text": "All the techniques discussed in [[GUI Patterns]] paragraph can be applied in a JavaFX application to make a separation between the view and controller. However, some of the JavaFX built-in features favour usage of some patterns over others. In particular, the presenter of the Passive View [7] pattern holds a complete responsibility of updating the view. This enables a high level of testability but severely limits usage of property bindings, a mechanism that does not only save a lot of code but also makes the application cleaner and easier to maintain."
      },
      "date": 1640731811200
    },
    {
      "id": "a13cdad71e998e07",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "a13cdad71e998e07",
        "text": "# See Also"
      },
      "after": "6f8268954216ddc5",
      "date": 1640732264811
    },
    {
      "id": "2b6839f7e8ee37d1",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "2b6839f7e8ee37d1",
        "site": "wiki.ralfbarkow.ch",
        "slug": "model-view-presenter",
        "title": "Model-View-Presenter",
        "text": "I am evaluating [[Wiki Engines]] and [[Wiki Farms]] prior to choosing one for my own personal use and for various public uses.  To get additional input from experienced wiki users, and help others, I am putting the review on this wiki."
      },
      "after": "a13cdad71e998e07",
      "date": 1640732267824
    },
    {
      "id": "c04116ca99ecfe88",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c04116ca99ecfe88",
        "text": "**Supervising Controller**: The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.\n\n* Pro: by leveraging data binding the amount of code is reduced.\n* Con: there's a less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.\n"
      },
      "after": "2b6839f7e8ee37d1",
      "date": 1640732270059
    },
    {
      "type": "edit",
      "id": "c04116ca99ecfe88",
      "item": {
        "type": "markdown",
        "id": "c04116ca99ecfe88",
        "text": "[[Supervising Controller]]: The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.\n\n* Pro: by leveraging data binding the amount of code is reduced.\n* Con: there's a less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.\n"
      },
      "date": 1640732338072
    },
    {
      "id": "c04116ca99ecfe88",
      "type": "remove",
      "date": 1640732347103
    },
    {
      "item": {
        "type": "factory",
        "id": "d7d0581b33ffafa4"
      },
      "id": "d7d0581b33ffafa4",
      "type": "add",
      "after": "2b6839f7e8ee37d1",
      "date": 1640732349202
    },
    {
      "type": "edit",
      "id": "d7d0581b33ffafa4",
      "item": {
        "type": "reference",
        "id": "d7d0581b33ffafa4",
        "site": "wiki.ralfbarkow.ch",
        "slug": "supervising-controller",
        "title": "Supervising Controller",
        "text": "[[Supervising Controller]]: The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc."
      },
      "date": 1640732351490
    },
    {
      "type": "edit",
      "id": "d7d0581b33ffafa4",
      "item": {
        "type": "reference",
        "id": "d7d0581b33ffafa4",
        "site": "wiki.ralfbarkow.ch",
        "slug": "supervising-controller",
        "title": "Supervising Controller",
        "text": "The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc."
      },
      "date": 1640732359738
    }
  ]
}