{
  "title": "Magnetic Morphs",
  "story": [
    {
      "type": "paragraph",
      "id": "58921f06e453e52c",
      "text": "Four years pass since coding [[Magnetic Ribbon]]. All of a sudden I am wondering if my ribbon code will work in Squeak. [http://c2.com/~ward/ribbon/ page]"
    },
    {
      "type": "paragraph",
      "id": "39053ba498f71ed9",
      "text": "The numerical stuff does except for transpose which is now spelt more consistently transposed. The graphics is another story. I start looking for a polygon fill and find it in class Canvas. "
    },
    {
      "type": "paragraph",
      "id": "d19b5005e9cf839f",
      "text": "Actually it is in the refinement BallonCanvas. Balloon is Squeak's advanced graphics package. This problem isn't worth an advanced solution so I start looking for Plan B.\nPlan B is Morphic. "
    },
    {
      "type": "paragraph",
      "id": "8a5436f260b1d556",
      "text": "Morphs are shapes that are easily manipulated with assorted mouse clicks. Once I learned these, especially Alt-Left-Click, the Morphic secret weapon, I could play with and learn a few dozen of the hundred morphs already present. I used AtomMorph as a guiding example. "
    },
    {
      "type": "paragraph",
      "id": "5067dec589c9a983",
      "text": "Like it, my new morph would refine ElipseMorph so that rendering would be taken care of. I used plain old ellipses as the magnets that my new morph would respond to each time Morphic asked it to step. Here is the step code.\n\n"
    },
    {
      "type": "code",
      "id": "f169034c365e171e",
      "text": "step\n  | magnets acceleration delta |\n  super step.\n  mags := owner submorphs select:\n    [:each | each class == EllipseMorph].\n    acceleration := magnets inject: 0@0 into:\n      [:sum :each |\n      delta := each position - position.\n      sum + (delta / (delta r squared + 2))].\n    acceleration :=\n      velocity * -0.0001 + acceleration.\n    velocity := velocity + (acceleration * 10) .\n    position := position + velocity.\n    self position: position rounded\n"
    },
    {
      "type": "paragraph",
      "id": "0ea1a540a0ef30a8",
      "text": "I added a few ellipses to my desktop and then one of my new active variation. (I called it a SwingMorph because that's what the dangling arm of the toy did.) It moved. In fact it moved too much. If it swung directly over a magnet it would pick up a kick from delta r approaching zero and go flying off the screen."
    },
    {
      "type": "paragraph",
      "id": "cd57c506fef4ff88",
      "text": "I added a few pixels of ever-present spacing, much like that in the toy itself. (The magnets never touched.) The morph still accumulated energy. I added a little bit of velocity dependent resistance (like air resistance) to make it stable, though still chaotic, in the long term.\n\n"
    },
    {
      "type": "paragraph",
      "id": "bc169ccc7e552be9",
      "text": "I used floating point for all my numbers. These feed deep into the Morphic system which is used to working with integers. All worked fine except for one thing: the refresh region bounding box calculation was sometimes off by one. This meant that my morph would leave little trails of incorrectly refreshed pixel debris. Yuck.\n\nI decided to keep my own precision position and send a rounded copy of that into Morphic. This cleaned up the display but interfered with manual placement of the morph. Hmmm. I'd better back this last change out and fix Morphic.\n\n"
    },
    {
      "type": "paragraph",
      "id": "bc59cde3d3eb58d4",
      "text": "I kind of missed the debris trail's arcs and swoops. Looking a little further into Morphic I discovered that every morph could draw. See [https://wiki.c2.com?TurtleGraphics Turtle Graphics]."
    },
    {
      "type": "paragraph",
      "id": "105851456b474b55",
      "text": "I told my morph to lower its pen. Bingo. A beautiful drawing of the trajectory. I let it run all night and wrote it up in the morning. [http://code.fed.wiki.org/assets/pages/magnetic-morphs/ScreenShot.gif expand]"
    },
    {
      "type": "html",
      "id": "3981da24db148609",
      "text": "<img width=100% src=http://code.fed.wiki.org/assets/pages/magnetic-morphs/ScreenShot.gif>"
    },
    {
      "type": "paragraph",
      "id": "5915412b11a94966",
      "text": "Here is the source for the whole morph."
    },
    {
      "type": "assets",
      "id": "d0441aae89467f0d",
      "text": "pages/magnetic-morphs"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Magnetic Morphs",
        "story": []
      },
      "date": 1578281441473
    },
    {
      "item": {
        "type": "factory",
        "id": "58921f06e453e52c"
      },
      "id": "58921f06e453e52c",
      "type": "add",
      "date": 1578281468261
    },
    {
      "type": "edit",
      "id": "58921f06e453e52c",
      "item": {
        "type": "paragraph",
        "id": "58921f06e453e52c",
        "text": "All of a sudden I am wondering if my ribbon code will work in Squeak. "
      },
      "date": 1578281483840
    },
    {
      "type": "add",
      "id": "39053ba498f71ed9",
      "item": {
        "type": "paragraph",
        "id": "39053ba498f71ed9",
        "text": "The numerical stuff does except for transpose which is now spelt more consistently transposed. The graphics is another story. I start looking for a polygon fill and find it in class Canvas. "
      },
      "after": "58921f06e453e52c",
      "date": 1578281505462
    },
    {
      "type": "add",
      "id": "d19b5005e9cf839f",
      "item": {
        "type": "paragraph",
        "id": "d19b5005e9cf839f",
        "text": "Actually it is in the refinement BallonCanvas. Balloon is Squeak's advanced graphics package. This problem isn't worth an advanced solution so I start looking for Plan B.\nPlan B is Morphic. "
      },
      "after": "39053ba498f71ed9",
      "date": 1578281523408
    },
    {
      "type": "add",
      "id": "8a5436f260b1d556",
      "item": {
        "type": "paragraph",
        "id": "8a5436f260b1d556",
        "text": "Morphs are shapes that are easily manipulated with assorted mouse clicks. Once I learned these, especially Alt-Left-Click, the Morphic secret weapon, I could play with and learn a few dozen of the hundred morphs already present. I used AtomMorph as a guiding example. "
      },
      "after": "d19b5005e9cf839f",
      "date": 1578281560048
    },
    {
      "type": "add",
      "id": "5067dec589c9a983",
      "item": {
        "type": "paragraph",
        "id": "5067dec589c9a983",
        "text": "Like it, my new morph would refine ElipseMorph so that rendering would be taken care of. I used plain old ellipses as the magnets that my new morph would respond to each time Morphic asked it to step. Here is the step code.\n\n"
      },
      "after": "8a5436f260b1d556",
      "date": 1578281580011
    },
    {
      "type": "add",
      "id": "f169034c365e171e",
      "item": {
        "type": "factory",
        "id": "f169034c365e171e",
        "text": "    step\n\t| magnets acceleration delta |\n\tsuper step.\n\tmags := owner submorphs select:\n\t\t[:each | each class == EllipseMorph].\n\tacceleration := magnets inject: 0@0 into:\n\t\t[:sum :each |\n\t\tdelta := each position - position.\n\t\tsum + (delta / (delta r squared + 2))].\n\tacceleration := velocity * -0.0001 + acceleration.\n\tvelocity := velocity + (acceleration * 10) .\n\tposition := position + velocity.\n\tself position: position rounded\n\nI added a few ellipses to my desktop and then one of my new active variation. (I called it a SwingMorph because that's what the dangling arm of the toy did.) It moved. In fact it moved too much. If it swung directly over a magnet it would pick up a kick from delta r approaching zero and go flying off the screen. I added a few pixels of ever-present spacing, much like that in the toy itself. (The magnets never touched.) The morph still accumulated energy. I added a little bit of velocity dependent resistance (like air resistance) to make it stable, though still chaotic, in the long term.\n\nI used floating point for all my numbers. These feed deep into the Morphic system which is used to working with integers. All worked fine except for one thing: the refresh region bounding box calculation was sometimes off by one. This meant that my morph would leave little trails of incorrectly refreshed pixel debris. Yuck.\n\nI decided to keep my own precision position and send a rounded copy of that into Morphic. This cleaned up the display but interfered with manual placement of the morph. Hmmm. I'd better back this last change out and fix Morphic.\n\nI kind of missed the debris trail's arcs and swoops. Looking a little further into Morphic I discovered that every morph could draw. (See TurtleGraphics). I told my morph to lower its pen. Bingo. A beautiful drawing of the trajectory. I let it run all night and wrote it up in the morning. Here is the source for the whole morph."
      },
      "after": "5067dec589c9a983",
      "date": 1578281585690
    },
    {
      "type": "edit",
      "id": "f169034c365e171e",
      "item": {
        "type": "code",
        "id": "f169034c365e171e",
        "text": "step\n  | magnets acceleration delta |\n  super step.\n  mags := owner submorphs select:\n    [:each | each class == EllipseMorph].\n    acceleration := magnets inject: 0@0 into:\n      [:sum :each |\n      delta := each position - position.\n      sum + (delta / (delta r squared + 2))].\n    acceleration := velocity * -0.0001 + acceleration.\n    velocity := velocity + (acceleration * 10) .\n    position := position + velocity.\n    self position: position rounded\n"
      },
      "date": 1578281729475
    },
    {
      "item": {
        "type": "factory",
        "id": "0ea1a540a0ef30a8"
      },
      "id": "0ea1a540a0ef30a8",
      "type": "add",
      "after": "f169034c365e171e",
      "date": 1578281743439
    },
    {
      "type": "edit",
      "id": "0ea1a540a0ef30a8",
      "item": {
        "type": "paragraph",
        "id": "0ea1a540a0ef30a8",
        "text": "I added a few ellipses to my desktop and then one of my new active variation. (I called it a SwingMorph because that's what the dangling arm of the toy did.) It moved. In fact it moved too much. If it swung directly over a magnet it would pick up a kick from delta r approaching zero and go flying off the screen. I added a few pixels of ever-present spacing, much like that in the toy itself. (The magnets never touched.) The morph still accumulated energy. I added a little bit of velocity dependent resistance (like air resistance) to make it stable, though still chaotic, in the long term.\n\n"
      },
      "date": 1578281756105
    },
    {
      "type": "add",
      "id": "bc169ccc7e552be9",
      "item": {
        "type": "paragraph",
        "id": "bc169ccc7e552be9",
        "text": "I used floating point for all my numbers. These feed deep into the Morphic system which is used to working with integers. All worked fine except for one thing: the refresh region bounding box calculation was sometimes off by one. This meant that my morph would leave little trails of incorrectly refreshed pixel debris. Yuck.\n\nI decided to keep my own precision position and send a rounded copy of that into Morphic. This cleaned up the display but interfered with manual placement of the morph. Hmmm. I'd better back this last change out and fix Morphic.\n\nI kind of missed the debris trail's arcs and swoops. Looking a little further into Morphic I discovered that every morph could draw. (See TurtleGraphics). I told my morph to lower its pen. Bingo. A beautiful drawing of the trajectory. I let it run all night and wrote it up in the morning. Here is the source for the whole morph."
      },
      "after": "0ea1a540a0ef30a8",
      "date": 1578281758623
    },
    {
      "type": "edit",
      "id": "bc169ccc7e552be9",
      "item": {
        "type": "paragraph",
        "id": "bc169ccc7e552be9",
        "text": "I used floating point for all my numbers. These feed deep into the Morphic system which is used to working with integers. All worked fine except for one thing: the refresh region bounding box calculation was sometimes off by one. This meant that my morph would leave little trails of incorrectly refreshed pixel debris. Yuck.\n\nI decided to keep my own precision position and send a rounded copy of that into Morphic. This cleaned up the display but interfered with manual placement of the morph. Hmmm. I'd better back this last change out and fix Morphic.\n\n"
      },
      "date": 1578281764542
    },
    {
      "type": "add",
      "id": "bc59cde3d3eb58d4",
      "item": {
        "type": "paragraph",
        "id": "bc59cde3d3eb58d4",
        "text": "I kind of missed the debris trail's arcs and swoops. Looking a little further into Morphic I discovered that every morph could draw. (See [https://wiki.c2.com?TurtleGraphics Turtle Graphics]). I told my morph to lower its pen. Bingo. A beautiful drawing of the trajectory. I let it run all night and wrote it up in the morning. Here is the source for the whole morph."
      },
      "after": "bc169ccc7e552be9",
      "date": 1578281862496
    },
    {
      "type": "edit",
      "id": "bc59cde3d3eb58d4",
      "item": {
        "type": "paragraph",
        "id": "bc59cde3d3eb58d4",
        "text": "I kind of missed the debris trail's arcs and swoops. Looking a little further into Morphic I discovered that every morph could draw. See [https://wiki.c2.com?TurtleGraphics Turtle Graphics]. I told my morph to lower its pen. Bingo. A beautiful drawing of the trajectory. I let it run all night and wrote it up in the morning. Here is the source for the whole morph."
      },
      "date": 1578281884544
    },
    {
      "type": "edit",
      "id": "bc59cde3d3eb58d4",
      "item": {
        "type": "paragraph",
        "id": "bc59cde3d3eb58d4",
        "text": "I kind of missed the debris trail's arcs and swoops. Looking a little further into Morphic I discovered that every morph could draw. See [https://wiki.c2.com?TurtleGraphics Turtle Graphics]."
      },
      "date": 1578281894159
    },
    {
      "type": "add",
      "id": "105851456b474b55",
      "item": {
        "type": "paragraph",
        "id": "105851456b474b55",
        "text": "I told my morph to lower its pen. Bingo. A beautiful drawing of the trajectory. I let it run all night and wrote it up in the morning. Here is the source for the whole morph."
      },
      "after": "bc59cde3d3eb58d4",
      "date": 1578281896676
    },
    {
      "type": "edit",
      "id": "0ea1a540a0ef30a8",
      "item": {
        "type": "paragraph",
        "id": "0ea1a540a0ef30a8",
        "text": "I added a few ellipses to my desktop and then one of my new active variation. (I called it a SwingMorph because that's what the dangling arm of the toy did.) It moved. In fact it moved too much. If it swung directly over a magnet it would pick up a kick from delta r approaching zero and go flying off the screen."
      },
      "date": 1578281934250
    },
    {
      "type": "add",
      "id": "cd57c506fef4ff88",
      "item": {
        "type": "paragraph",
        "id": "cd57c506fef4ff88",
        "text": "I added a few pixels of ever-present spacing, much like that in the toy itself. (The magnets never touched.) The morph still accumulated energy. I added a little bit of velocity dependent resistance (like air resistance) to make it stable, though still chaotic, in the long term.\n\n"
      },
      "after": "0ea1a540a0ef30a8",
      "date": 1578281935865
    },
    {
      "type": "edit",
      "id": "f169034c365e171e",
      "item": {
        "type": "code",
        "id": "f169034c365e171e",
        "text": "step\n  | magnets acceleration delta |\n  super step.\n  mags := owner submorphs select:\n    [:each | each class == EllipseMorph].\n    acceleration := magnets inject: 0@0 into:\n      [:sum :each |\n      delta := each position - position.\n      sum + (delta / (delta r squared + 2))].\n    acceleration :=\n      velocity * -0.0001 + acceleration.\n    velocity := velocity + (acceleration * 10) .\n    position := position + velocity.\n    self position: position rounded\n"
      },
      "date": 1578281953468
    },
    {
      "type": "edit",
      "id": "58921f06e453e52c",
      "item": {
        "type": "paragraph",
        "id": "58921f06e453e52c",
        "text": "Four years pass since coding [[Magnetic Ribbon]]. All of a sudden I am wondering if my ribbon code will work in Squeak. "
      },
      "date": 1578282042231
    },
    {
      "item": {
        "type": "factory",
        "id": "d0441aae89467f0d"
      },
      "id": "d0441aae89467f0d",
      "type": "add",
      "after": "105851456b474b55",
      "date": 1578282448433
    },
    {
      "type": "edit",
      "id": "d0441aae89467f0d",
      "item": {
        "type": "assets",
        "id": "d0441aae89467f0d",
        "text": "pages/magnetic-morphs"
      },
      "date": 1578282457223
    },
    {
      "type": "edit",
      "id": "105851456b474b55",
      "item": {
        "type": "paragraph",
        "id": "105851456b474b55",
        "text": "I told my morph to lower its pen. Bingo. A beautiful drawing of the trajectory. I let it run all night and wrote it up in the morning."
      },
      "date": 1578282512741
    },
    {
      "type": "add",
      "id": "5915412b11a94966",
      "item": {
        "type": "paragraph",
        "id": "5915412b11a94966",
        "text": "Here is the source for the whole morph."
      },
      "after": "105851456b474b55",
      "date": 1578282514568
    },
    {
      "item": {
        "type": "factory",
        "id": "3981da24db148609"
      },
      "id": "3981da24db148609",
      "type": "add",
      "after": "d0441aae89467f0d",
      "date": 1578282518968
    },
    {
      "type": "edit",
      "id": "3981da24db148609",
      "item": {
        "type": "html",
        "id": "3981da24db148609",
        "text": "<img width=100% src=http://code.fed.wiki.org/assets/pages/magnetic-morphs/ScreenShot.gif>"
      },
      "date": 1578282545004
    },
    {
      "id": "3981da24db148609",
      "type": "move",
      "order": [
        "58921f06e453e52c",
        "39053ba498f71ed9",
        "d19b5005e9cf839f",
        "8a5436f260b1d556",
        "5067dec589c9a983",
        "f169034c365e171e",
        "0ea1a540a0ef30a8",
        "cd57c506fef4ff88",
        "bc169ccc7e552be9",
        "bc59cde3d3eb58d4",
        "105851456b474b55",
        "3981da24db148609",
        "5915412b11a94966",
        "d0441aae89467f0d"
      ],
      "date": 1578282553230
    },
    {
      "type": "edit",
      "id": "105851456b474b55",
      "item": {
        "type": "paragraph",
        "id": "105851456b474b55",
        "text": "I told my morph to lower its pen. Bingo. A beautiful drawing of the trajectory. I let it run all night and wrote it up in the morning. [http://code.fed.wiki.org/assets/pages/magnetic-morphs/ScreenShot.gif expand]"
      },
      "date": 1578282587193
    },
    {
      "type": "edit",
      "id": "58921f06e453e52c",
      "item": {
        "type": "paragraph",
        "id": "58921f06e453e52c",
        "text": "Four years pass since coding [[Magnetic Ribbon]]. All of a sudden I am wondering if my ribbon code will work in Squeak. [http://c2.com/~ward/ribbon/ page]"
      },
      "date": 1578282836405
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1677070553571
    }
  ]
}