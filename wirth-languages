{
  "title": "Wirth Languages",
  "story": [
    {
      "type": "html",
      "text": "Languages developed by [[Niklaus Wirth]], an internationally famous specialist in programming-language design and implementation, most closely associated with ETH Zurich in Switzerland",
      "id": "958913be6492e7e0f066e1e0a72fb4bf"
    },
    {
      "type": "html",
      "text": ".",
      "id": "02d8e56256f5953d9bca02b35bd9b193"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "One commentator suggested, in a manner that suggested sarcasm, that the list be broadened: \"Or: languages that look as if they were developed by [[Niklaus Wirth]]\". However, all of the languages listed were indeed developed by Wirth.",
      "id": "377e8e0b798ee4b8390368ad73d375ab"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "\nWirth's language designs:",
      "id": "4ff2aef3c825d8edd1c5bd04830e51d8"
    },
    {
      "type": "html",
      "text": " Euler: Developed 1962-65 as part of his dissertation work. Intended as a generalization of the [[Algol Language]] with the addition of dynamic lists and symbols (a la [[Lisp Language]]). Probably the first use of a [[Precedence Grammar]].",
      "id": "25f1b7428a6187ea15c5ab364d5a77c5"
    },
    {
      "type": "html",
      "text": " PL360: (1965) A programming language for the IBM System/360 ([[Ibm System Three Sixty]]). PL360 really was a high-level assembler for the 360 architecture. Subroutine linkage and control structures were provided by the Algol-like parts of the language, while the instructions that actually did anything were in assembler format. It might be well argued that PL360 was the predecessor of IBM's PL/S ([[Pls Language]]). See Niklaus Wirth: \"PL360, a Programming Language for the 360 Computers\". <i>JACM</i> 15(1): 37-74 (1968) [[http://portal.acm.org/citation.cfm?id=321442&dl=ACM&coll=portal portal.acm.org]]. ",
      "id": "a25c7dfccf8da6cd4f2094b0345a8f36"
    },
    {
      "type": "html",
      "text": " Algol-W: Proposed as an alternative to Algol 68, a language designed as an successor to Algol-60, but resembled already Pascal. Joint work with [[Car Hoare]]. First language to support passing parameters by value-result. First language to support case (\"switch\") statement (invented by [[Car Hoare]]).",
      "id": "6f6b1af469cc004d20237777c6afacae"
    },
    {
      "type": "html",
      "text": " Pascal ([[Pascal Language]]): (1968-) Among programming-language specialists, or computer-science students of the 1980s, \"no introduction is needed\", but it is worth noting that Pascal was intended for systems programming and not just for education.",
      "id": "3f174947cd3cb2206f483b61cac5eae7"
    },
    {
      "type": "html",
      "text": " And it was, somehow, used for systems programming here and there, but it is worth pointing out that, on platforms where C was also available, Pascal was <b>not</b> used for systems programming. Pascal forced a great deal more use of assembly language to get around language restrictions.",
      "id": "49a9ae5e74d8805db55456f5d8666bca"
    },
    {
      "type": "html",
      "text": " Modula ([[Modula One]], [[Modula Two]], [[Modula Three]]): Introduced language-level support for concurrency, multi-programming, modular programming. Modula-2 included encapsulation of machine primitive operations. [[Modula Three]] was not designed by Wirth, though he did give it his approval. Technically it's not one of the [[Wirth Languages]].",
      "id": "14384cfc2eea51f62749bf17d2778583"
    },
    {
      "type": "html",
      "text": " Oberon ([[Oberon Language]]): Oberon left off some parts of Modula-2 and introduced the concept of record type-extensions, used to implement objects.  Statically dispatched \"methods\" were invoked using normal procedure syntax (e.g., <b>M.P(o, ...);</b>).  Oberon-2 added type bound procedures, which are dynamically dispatched methods using a [[Vee Table]] structure (e.g., <b>o.P(...);</b>).  Type-bound procedures <i>always</i> were dynamically dispatched; thus, one used normal M.P calling convention for statically resolved methods.  Oberon also introduced garbage collection to the world of statically-compiled, imperative programming languages, influencing languages and environments such as Java, .NET, and [[Dee Language]].",
      "id": "b0ebdedf068473c9b8040e24c360cd5e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "More information is available at [http://www.inf.ethz.ch/~wirth/projects.html www.inf.ethz.ch].",
      "id": "befd66373fdfad51bd03966b150a64bb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "<i>Is PL360 different from PL/1?</i>",
      "id": "c49f7b270e022a22100acb9396391b10"
    },
    {
      "type": "html",
      "text": "\nA respondent answered the question of PL360 vs. PL/I with a simple \"<i>Yes</i>\". Actually, the question deserves an energetic \"<b>Hell, yes!</b>\" in reply. PL360 is a very simple and straightforward language, consistent with its very modest goals. PL/I is a notoriously complicated language, whose best rivals for complexity may be Ada, Algol 68, or C++.",
      "id": "acbfc18d47de67787bd6993cc5ccefee"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "\nWirth also consulted during the development of the [[Cedar Language]] at [[Xerox Parc]] (which was the basis for the Oberon system), and [[Modula Two]] + and [[Modula Three]] at Digital.",
      "id": "34a3edab4a6008372838ee8e571c66a6"
    },
    {
      "type": "html",
      "text": "<i>And, I am told, on Apple's [[Object Pascal]], first on the Lisa and later for the Mac.</i>",
      "id": "5141570e0674a625dbaa9b4f6cabddbc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "\nI was told by someone who attended Wirth classes in Switzerland that Wirth complained about modern languages like [[Cee Plus Plus]] and [[Java Language]], because those languages <b>didn't get it</b>. He said that [[Niklaus Wirth]] made funny remarks about modern languages and that students laughed, but not at his jokes, but at him, because how could all those modern languages be all wrong? I think there is still something we didn't get about Wirth ideas an specially about [[Pascal Language]]. Only in [[Smalltalk Language]] you get the same feeling that the program doesn't take too long to compile. In Java the time it takes is not so bad, but in Pascal it was even better. About C++, I can say that I agree wholeheartedly because it is not [[Object Oriented]], and it is easier to produce buggy code than correct code. I have the feeling that in Pascal I never got so much buggy code as in C++. Even Smalltalk is much better at producing less buggy code. -- [[One Unhappy Cpp Language Programmer]]",
      "id": "29d42539f37be9482bbaadf76097bdbb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "Maybe <b>your</b> Pascal code was relatively bug free, but everyone else in the world sure cranked out buggy Pascal. Also I notice one strong similarity between Pascal and C++: in both cases, a lot of programming consists of fighting the language, rather than on focusing on the algorithm.",
      "id": "f7623dca485593c0434aa61cba7df982"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "<i>C++ and Java don't get \"what\", exactly? Comparing Smalltalk with Pascal is interesting - if not humorous - given that the two languages are opposites of each other in so many ways. [[Static Typing]] vs [[Dynamic Typing]]. [[Bondage And Discipline]] vs limitless flexibility. Block-structured procedural with full [[Lexical Scoping]] vs OO without (other than [[Smalltalk Blocks]]). A traditional [[Edit Compile Link Run]] language vs an [[Image Based Language]].</i>",
      "id": "25a053f80aeb2a93f2c8fe1182569a39"
    },
    {
      "type": "html",
      "text": "\nOn the other hand, pascal and smalltalk both have small grammars that are easily implemented with recursive descent parsers. Both designs sought to capturing the essense of computation so that it could be more easily experienced by others. Interestingly, pascal allowed one to program in the context of a (possibly dynamic) structure using the \"with\" statement and thus anticipated object-oriented programming. -- [[Ward Cunningham]]",
      "id": "816dba5852d39bd98289ec7c7ed428b0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "<i>C++ not [[Object Oriented]]? While it certainly isn't a pure OO language; it does support the OO paradigm. See [[Definitions For Oo]] and [[Is Cee Plus Plus Object Oriented]] for this particular [[Holy War]]. -- [[Scott Johnson]]</i>",
      "id": "abcdf42ef7b37118149d9e8a574de179"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Category Algol]] [[Category Pascal]]",
      "id": "32e480cf3af368aede70492d10007a70"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "Note that \"[[Bondage And Discipline]]\" is an exonym by non Wirthian programmers (and many that lack even proper experience to judge it). The same with the remark about Pascal not being used as system language C systems.  At least in Europe Pascal had supplanted Algol as system language long before C escaped its Unix beginnings. Yes, C took over, but that is something else as never being used as such.",
      "id": "70abe2c2640c40b81140558234ba5f67"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a418162c2a32fc9b64e6a1dc8bf21093"
    },
    {
      "type": "html",
      "text": "Contrast with \"wirthless languages\" ;-)",
      "id": "ee638d99eccec1b30b1db890fcd41a81"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?WirthLanguages c2.com]",
      "id": "171777651340bd91ef7fcabc7fb0d87a"
    }
  ],
  "journal": [
    {
      "date": 1348690345000,
      "id": "bda568d0537f5b2d2ee97315e16795d0",
      "type": "create",
      "item": {
        "title": "Wirth Languages",
        "story": [
          {
            "type": "html",
            "text": "Languages developed by [[Niklaus Wirth]], an internationally famous specialist in programming-language design and implementation, most closely associated with ETH Zurich in Switzerland",
            "id": "958913be6492e7e0f066e1e0a72fb4bf"
          },
          {
            "type": "html",
            "text": ".",
            "id": "02d8e56256f5953d9bca02b35bd9b193"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "One commentator suggested, in a manner that suggested sarcasm, that the list be broadened: \"Or: languages that look as if they were developed by [[Niklaus Wirth]]\". However, all of the languages listed were indeed developed by Wirth.",
            "id": "377e8e0b798ee4b8390368ad73d375ab"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "\nWirth's language designs:",
            "id": "4ff2aef3c825d8edd1c5bd04830e51d8"
          },
          {
            "type": "html",
            "text": " Euler: Developed 1962-65 as part of his dissertation work. Intended as a generalization of the [[Algol Language]] with the addition of dynamic lists and symbols (a la [[Lisp Language]]). Probably the first use of a [[Precedence Grammar]].",
            "id": "25f1b7428a6187ea15c5ab364d5a77c5"
          },
          {
            "type": "html",
            "text": " PL360: (1965) A programming language for the IBM System/360 ([[Ibm System Three Sixty]]). PL360 really was a high-level assembler for the 360 architecture. Subroutine linkage and control structures were provided by the Algol-like parts of the language, while the instructions that actually did anything were in assembler format. It might be well argued that PL360 was the predecessor of IBM's PL/S ([[Pls Language]]). See Niklaus Wirth: \"PL360, a Programming Language for the 360 Computers\". <i>JACM</i> 15(1): 37-74 (1968) [[http://portal.acm.org/citation.cfm?id=321442&dl=ACM&coll=portal portal.acm.org]]. ",
            "id": "a25c7dfccf8da6cd4f2094b0345a8f36"
          },
          {
            "type": "html",
            "text": " Algol-W: Proposed as an alternative to Algol 68, a language designed as an successor to Algol-60, but resembled already Pascal. Joint work with [[Car Hoare]]. First language to support passing parameters by value-result. First language to support case (\"switch\") statement (invented by [[Car Hoare]]).",
            "id": "6f6b1af469cc004d20237777c6afacae"
          },
          {
            "type": "html",
            "text": " Pascal ([[Pascal Language]]): (1968-) Among programming-language specialists, or computer-science students of the 1980s, \"no introduction is needed\", but it is worth noting that Pascal was intended for systems programming and not just for education.",
            "id": "3f174947cd3cb2206f483b61cac5eae7"
          },
          {
            "type": "html",
            "text": " And it was, somehow, used for systems programming here and there, but it is worth pointing out that, on platforms where C was also available, Pascal was <b>not</b> used for systems programming. Pascal forced a great deal more use of assembly language to get around language restrictions.",
            "id": "49a9ae5e74d8805db55456f5d8666bca"
          },
          {
            "type": "html",
            "text": " Modula ([[Modula One]], [[Modula Two]], [[Modula Three]]): Introduced language-level support for concurrency, multi-programming, modular programming. Modula-2 included encapsulation of machine primitive operations. [[Modula Three]] was not designed by Wirth, though he did give it his approval. Technically it's not one of the [[Wirth Languages]].",
            "id": "14384cfc2eea51f62749bf17d2778583"
          },
          {
            "type": "html",
            "text": " Oberon ([[Oberon Language]]): Oberon left off some parts of Modula-2 and introduced the concept of record type-extensions, used to implement objects.  Statically dispatched \"methods\" were invoked using normal procedure syntax (e.g., <b>M.P(o, ...);</b>).  Oberon-2 added type bound procedures, which are dynamically dispatched methods using a [[Vee Table]] structure (e.g., <b>o.P(...);</b>).  Type-bound procedures <i>always</i> were dynamically dispatched; thus, one used normal M.P calling convention for statically resolved methods.  Oberon also introduced garbage collection to the world of statically-compiled, imperative programming languages, influencing languages and environments such as Java, .NET, and [[Dee Language]].",
            "id": "b0ebdedf068473c9b8040e24c360cd5e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "More information is available at [http://www.inf.ethz.ch/~wirth/projects.html www.inf.ethz.ch].",
            "id": "befd66373fdfad51bd03966b150a64bb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "<i>Is PL360 different from PL/1?</i>",
            "id": "c49f7b270e022a22100acb9396391b10"
          },
          {
            "type": "html",
            "text": "\nA respondent answered the question of PL360 vs. PL/I with a simple \"<i>Yes</i>\". Actually, the question deserves an energetic \"<b>Hell, yes!</b>\" in reply. PL360 is a very simple and straightforward language, consistent with its very modest goals. PL/I is a notoriously complicated language, whose best rivals for complexity may be Ada, Algol 68, or C++.",
            "id": "acbfc18d47de67787bd6993cc5ccefee"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "\nWirth also consulted during the development of the [[Cedar Language]] at [[Xerox Parc]] (which was the basis for the Oberon system), and [[Modula Two]] + and [[Modula Three]] at Digital.",
            "id": "34a3edab4a6008372838ee8e571c66a6"
          },
          {
            "type": "html",
            "text": "<i>And, I am told, on Apple's [[Object Pascal]], first on the Lisa and later for the Mac.</i>",
            "id": "5141570e0674a625dbaa9b4f6cabddbc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "\nI was told by someone who attended Wirth classes in Switzerland that Wirth complained about modern languages like [[Cee Plus Plus]] and [[Java Language]], because those languages <b>didn't get it</b>. He said that [[Niklaus Wirth]] made funny remarks about modern languages and that students laughed, but not at his jokes, but at him, because how could all those modern languages be all wrong? I think there is still something we didn't get about Wirth ideas an specially about [[Pascal Language]]. Only in [[Smalltalk Language]] you get the same feeling that the program doesn't take too long to compile. In Java the time it takes is not so bad, but in Pascal it was even better. About C++, I can say that I agree wholeheartedly because it is not [[Object Oriented]], and it is easier to produce buggy code than correct code. I have the feeling that in Pascal I never got so much buggy code as in C++. Even Smalltalk is much better at producing less buggy code. -- [[One Unhappy Cpp Language Programmer]]",
            "id": "29d42539f37be9482bbaadf76097bdbb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "Maybe <b>your</b> Pascal code was relatively bug free, but everyone else in the world sure cranked out buggy Pascal. Also I notice one strong similarity between Pascal and C++: in both cases, a lot of programming consists of fighting the language, rather than on focusing on the algorithm.",
            "id": "f7623dca485593c0434aa61cba7df982"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "<i>C++ and Java don't get \"what\", exactly? Comparing Smalltalk with Pascal is interesting - if not humorous - given that the two languages are opposites of each other in so many ways. [[Static Typing]] vs [[Dynamic Typing]]. [[Bondage And Discipline]] vs limitless flexibility. Block-structured procedural with full [[Lexical Scoping]] vs OO without (other than [[Smalltalk Blocks]]). A traditional [[Edit Compile Link Run]] language vs an [[Image Based Language]].</i>",
            "id": "25a053f80aeb2a93f2c8fe1182569a39"
          },
          {
            "type": "html",
            "text": "\nOn the other hand, pascal and smalltalk both have small grammars that are easily implemented with recursive descent parsers. Both designs sought to capturing the essense of computation so that it could be more easily experienced by others. Interestingly, pascal allowed one to program in the context of a (possibly dynamic) structure using the \"with\" statement and thus anticipated object-oriented programming. -- [[Ward Cunningham]]",
            "id": "816dba5852d39bd98289ec7c7ed428b0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "<i>C++ not [[Object Oriented]]? While it certainly isn't a pure OO language; it does support the OO paradigm. See [[Definitions For Oo]] and [[Is Cee Plus Plus Object Oriented]] for this particular [[Holy War]]. -- [[Scott Johnson]]</i>",
            "id": "abcdf42ef7b37118149d9e8a574de179"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Category Algol]] [[Category Pascal]]",
            "id": "32e480cf3af368aede70492d10007a70"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "Note that \"[[Bondage And Discipline]]\" is an exonym by non Wirthian programmers (and many that lack even proper experience to judge it). The same with the remark about Pascal not being used as system language C systems.  At least in Europe Pascal had supplanted Algol as system language long before C escaped its Unix beginnings. Yes, C took over, but that is something else as never being used as such.",
            "id": "70abe2c2640c40b81140558234ba5f67"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a418162c2a32fc9b64e6a1dc8bf21093"
          },
          {
            "type": "html",
            "text": "Contrast with \"wirthless languages\" ;-)",
            "id": "ee638d99eccec1b30b1db890fcd41a81"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?WirthLanguages c2.com]",
            "id": "171777651340bd91ef7fcabc7fb0d87a"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1708024264532
    }
  ]
}