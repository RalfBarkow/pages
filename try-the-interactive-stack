{
  "title": "Try the Interactive Stack",
  "story": [
    {
      "type": "reference",
      "id": "b658569c8cb74733",
      "site": "wiki.ralfbarkow.ch",
      "slug": "elm-stack",
      "title": "Elm Stack",
      "text": "is an implementation of the stack data structure for the [[Elm]] language. [https://github.com/mhoare/elm-stack/tree/3.1.2 github], [https://package.elm-lang.org/packages/mhoare/elm-stack/latest package]"
    },
    {
      "type": "paragraph",
      "id": "bec19bb8091ce2f0",
      "text": "Try the interactive Stack [https://elm-stack.surge.sh/#interactivestack page], [https://package.elm-lang.org/packages/mhoare/elm-stack/latest package], [https://github.com/mhoare/elm-stack/tree/3.1.2 github]"
    },
    {
      "type": "markdown",
      "id": "e37ba173abe4f642",
      "text": "# Stacks... Why?"
    },
    {
      "type": "paragraph",
      "id": "b472097a606514d9",
      "text": "You may be thinking – why would we want only want to access the last item we added?"
    },
    {
      "type": "paragraph",
      "id": "712fae282fe56792",
      "text": "Well, think about what happens when you use brackets in this calculation:\n\n( ( ( 1 + 2 ) + 3 ) + 4 )"
    },
    {
      "type": "paragraph",
      "id": "98c44ff53c0dc250",
      "text": "You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation."
    },
    {
      "type": "paragraph",
      "id": "4be49c99b4af4f47",
      "text": "This is exactly where a stack would be used in computing. Each operation would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off."
    },
    {
      "type": "paragraph",
      "id": "c2108eed36cd02fb",
      "text": "Stacks are also used when calling procedures in programs and when reversing array items."
    },
    {
      "type": "markdown",
      "id": "9e0ec9dfad4fec78",
      "text": "# Stack operations"
    },
    {
      "type": "paragraph",
      "id": "e6a656e1b8abd713",
      "text": "There are only two legal operations which can be carried out on a stack."
    },
    {
      "type": "markdown",
      "id": "b04b75313321ab31",
      "text": "1. Push\n2. Pop"
    },
    {
      "type": "paragraph",
      "id": "94a6f034b09cad24",
      "text": "What does it mean to push and pop? Well, keep reading and you'll find out."
    },
    {
      "type": "markdown",
      "id": "0969393a9abee6be",
      "text": "## Push"
    },
    {
      "type": "paragraph",
      "id": "bec187a2f093e12c",
      "text": "When we talk about pushing onto the stack, what we really mean is adding a new item onto the top of the stack. Once we have pushed items onto the stack we can access the top element. Use the interactive stack at the top of the [https://elm-stack.surge.sh/#interactivestack page] to see what I mean."
    },
    {
      "type": "markdown",
      "id": "a7d4ba3215d88c60",
      "text": "## Pop"
    },
    {
      "type": "paragraph",
      "id": "5d096818664a262d",
      "text": "Okay, so we have worked out how to add items to the stack, but what happens when we want to access them?\n\nWhen we want to access items on the stack, we can only access and remove the top element. This is called popping, you will pop the top element off of the stack.\n\nYou don't understand? Don't worry, lets give and example.\n\nYou have pushed the calculation shown above onto the stack. The stack now looks like this:\n\nSee, the top element is 1 + 2 and the second is + 3 and so on."
    },
    {
      "type": "paragraph",
      "id": "fa2a6ac2624c6fd8",
      "text": "Now we are going to pop 1 + 2 off of the stack and evaluate it. Now the stack looks like this:"
    },
    {
      "type": "paragraph",
      "id": "65bac5c01c9747cf",
      "text": "Did you notice that 1 + 2 is no longer on the top of the stack? It is now + 3. So we pop that from the stack as well and evaluate that operation applied to our previous value. Our total is now 6.\n\nWe will continue this process until the stack is empty.\n\nYou may be thinking, \"Why do you remove the item when popping it off?\" The reason we do that is so that we can access the next item. Remember we can only access the top item in the stack."
    },
    {
      "type": "pagefold",
      "id": "978bf74a9ed3f6d4",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "fecee087f8a73b6d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "square-brackets",
      "title": "Square-Brackets",
      "text": "Algebraic operations condense into a few patterns"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Try the Interactive Stack",
        "story": []
      },
      "date": 1695464254345
    },
    {
      "id": "b658569c8cb74733",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "b658569c8cb74733",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-stack",
        "title": "Elm Stack",
        "text": "is an implementation of the stack data structure for the elm language. [https://github.com/mhoare/elm-stack/tree/3.1.2 github], [https://elm-stack.surge.sh/ site]"
      },
      "attribution": {
        "page": "2023-09-23"
      },
      "date": 1695464259126
    },
    {
      "id": "bec19bb8091ce2f0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "bec19bb8091ce2f0",
        "text": "Try the interactive Stack [https://elm-stack.surge.sh/#interactivestack page], [https://package.elm-lang.org/packages/mhoare/elm-stack/latest package], [https://github.com/mhoare/elm-stack/tree/3.1.2 github]"
      },
      "after": "b658569c8cb74733",
      "attribution": {
        "page": "2023-09-23"
      },
      "date": 1695464263103
    },
    {
      "type": "edit",
      "id": "b658569c8cb74733",
      "item": {
        "type": "reference",
        "id": "b658569c8cb74733",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-stack",
        "title": "Elm Stack",
        "text": "is an implementation of the stack data structure for the elm language. [https://github.com/mhoare/elm-stack/tree/3.1.2 github], [https://package.elm-lang.org/packages/mhoare/elm-stack/latest package] , [https://elm-stack.surge.sh/ site]"
      },
      "date": 1695464936341
    },
    {
      "type": "edit",
      "id": "b658569c8cb74733",
      "item": {
        "type": "reference",
        "id": "b658569c8cb74733",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-stack",
        "title": "Elm Stack",
        "text": "is an implementation of the stack data structure for the elm language. [https://github.com/mhoare/elm-stack/tree/3.1.2 github], [https://package.elm-lang.org/packages/mhoare/elm-stack/latest package]"
      },
      "date": 1695464943134
    },
    {
      "type": "edit",
      "id": "b658569c8cb74733",
      "item": {
        "type": "reference",
        "id": "b658569c8cb74733",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-stack",
        "title": "Elm Stack",
        "text": "is an implementation of the stack data structure for the [[Elm]] language. [https://github.com/mhoare/elm-stack/tree/3.1.2 github], [https://package.elm-lang.org/packages/mhoare/elm-stack/latest package]"
      },
      "date": 1695464991203
    },
    {
      "item": {
        "type": "factory",
        "id": "e37ba173abe4f642"
      },
      "id": "e37ba173abe4f642",
      "type": "add",
      "after": "bec19bb8091ce2f0",
      "date": 1695465204049
    },
    {
      "type": "edit",
      "id": "e37ba173abe4f642",
      "item": {
        "type": "paragraph",
        "id": "e37ba173abe4f642",
        "text": "Stacks... Why?\n\nYou may be thinking - why would we want only want to access the last item we added?\n\nWell, think about what happens when you use brackets in this calculation:\n\n( ( ( 1 + 2 ) + 3 ) + 4 )\n\nYou first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation.\n\nThis is exactly where a stack would be used in computing. Each operation would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off.\n\nStacks are also used when calling procedures in programs and when reversing array items.\n"
      },
      "date": 1695465205583
    },
    {
      "type": "edit",
      "id": "e37ba173abe4f642",
      "item": {
        "type": "paragraph",
        "id": "e37ba173abe4f642",
        "text": "Stacks... Why?"
      },
      "date": 1695466294588
    },
    {
      "type": "add",
      "id": "b472097a606514d9",
      "item": {
        "type": "paragraph",
        "id": "b472097a606514d9",
        "text": "You may be thinking – why would we want only want to access the last item we added?"
      },
      "after": "e37ba173abe4f642",
      "date": 1695466297553
    },
    {
      "type": "add",
      "id": "712fae282fe56792",
      "item": {
        "type": "paragraph",
        "id": "712fae282fe56792",
        "text": "Well, think about what happens when you use brackets in this calculation:\n\n( ( ( 1 + 2 ) + 3 ) + 4 )"
      },
      "after": "b472097a606514d9",
      "date": 1695466301045
    },
    {
      "type": "add",
      "id": "98c44ff53c0dc250",
      "item": {
        "type": "paragraph",
        "id": "98c44ff53c0dc250",
        "text": "You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation."
      },
      "after": "712fae282fe56792",
      "date": 1695466302715
    },
    {
      "type": "add",
      "id": "4be49c99b4af4f47",
      "item": {
        "type": "paragraph",
        "id": "4be49c99b4af4f47",
        "text": "This is exactly where a stack would be used in computing. Each operation would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off."
      },
      "after": "98c44ff53c0dc250",
      "date": 1695466304318
    },
    {
      "type": "add",
      "id": "c2108eed36cd02fb",
      "item": {
        "type": "paragraph",
        "id": "c2108eed36cd02fb",
        "text": "Stacks are also used when calling procedures in programs and when reversing array items."
      },
      "after": "4be49c99b4af4f47",
      "date": 1695466305113
    },
    {
      "item": {
        "type": "factory",
        "id": "978bf74a9ed3f6d4"
      },
      "id": "978bf74a9ed3f6d4",
      "type": "add",
      "after": "c2108eed36cd02fb",
      "date": 1695466493190
    },
    {
      "type": "edit",
      "id": "978bf74a9ed3f6d4",
      "item": {
        "type": "pagefold",
        "id": "978bf74a9ed3f6d4",
        "text": "~"
      },
      "date": 1695466496122
    },
    {
      "item": {
        "type": "factory",
        "id": "fecee087f8a73b6d"
      },
      "id": "fecee087f8a73b6d",
      "type": "add",
      "after": "978bf74a9ed3f6d4",
      "date": 1695466497967
    },
    {
      "type": "edit",
      "id": "fecee087f8a73b6d",
      "item": {
        "type": "reference",
        "id": "fecee087f8a73b6d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "square-brackets",
        "title": "Square-Brackets",
        "text": "Algebraic operations condense into a few patterns"
      },
      "date": 1695466501325
    },
    {
      "id": "dc7a206fa8fc342d",
      "type": "add",
      "item": {
        "type": "code",
        "id": "dc7a206fa8fc342d",
        "text": "view : Model -> Html Types.Msg\nview model =\n    div []\n        [ introView\n        , div [ id \"interactivestack\", class \"row\" ]\n            [ div [ class \"container\" ]\n                [ div [ class \"col-sm-12\" ]\n                    [ h2 [ class \"center\" ]\n                        [ text \"Try the interactive Stack\" ]\n                    , div\n                        [ id \"content\" ]\n                        [ stackView (Stack.toList model.stack)\n                        , br [] []\n                        ]\n                    , div [ class \"row col-md-6 col-sm-12 col-md-offset-3\" ]\n                        [ div [ attribute \"role\" \"form\" ]\n                            [ input [ id \"input\", type_ \"text\", value model.temp, onEnter Types.Push, onInput (\\str -> Types.Temp str) ] []\n                            , button [ buttonEnabled model.temp, class \"push btn btn-default\", onClick Types.Push ] [ text \"Push\" ]\n                            ]\n                        ]\n                    , div [ style [ ( \"margin-top\", \"7%\" ) ], class \"row\" ]\n                        [ div [ style [ ( \"text-align\", \"center\" ) ], class \"col-md-6 col-md-offset-3 col-sm-12\" ]\n                            [ span [ class \"h3\", style [ ( \"padding\", \"0.5em\" ) ] ] [ text (\"Popped: \" ++ (Maybe.withDefault \"\" model.popped)) ]\n                            , br [] []\n                            , button\n                                [ class \"btn btn-default\", onClick Types.Pop ]\n                                [ text \"Pop\" ]\n                            ]\n                        ]\n                    , div [ style [ ( \"text-align\", \"center\" ), ( \"margin-bottom\", \"2%\" ) ] ] [ a [ href \"http://package.elm-lang.org/packages/mhoare/elm-stack/latest\" ] [ text \"View the elm-stack package\" ] ]\n                    ]\n                ]\n            ]\n        , div [ class \"container\" ] [ div [ class \"row\" ] [ Markdown.toHtml [ class \"col-sm-12\" ] ViewHelpers.secondPara ] ]\n        , div [ class \"container\" ] [ div [ class \"row\" ] [ Markdown.toHtml [ class \"col-sm-12\" ] ViewHelpers.stackOperationsPara ] ]\n        , ViewHelpers.footer\n        ]\n\n"
      },
      "after": "c2108eed36cd02fb",
      "attribution": {
        "page": "2023-09-23"
      },
      "date": 1695466902820
    },
    {
      "id": "dc7a206fa8fc342d",
      "type": "move",
      "order": [
        "b658569c8cb74733",
        "bec19bb8091ce2f0",
        "e37ba173abe4f642",
        "b472097a606514d9",
        "712fae282fe56792",
        "98c44ff53c0dc250",
        "4be49c99b4af4f47",
        "c2108eed36cd02fb",
        "978bf74a9ed3f6d4",
        "fecee087f8a73b6d",
        "dc7a206fa8fc342d"
      ],
      "date": 1695466908336
    },
    {
      "type": "edit",
      "id": "e37ba173abe4f642",
      "item": {
        "type": "paragraph",
        "id": "e37ba173abe4f642",
        "text": "# Stacks... Why?"
      },
      "date": 1695467700043
    },
    {
      "type": "edit",
      "id": "e37ba173abe4f642",
      "item": {
        "type": "markdown",
        "id": "e37ba173abe4f642",
        "text": "# Stacks... Why?"
      },
      "date": 1695467701228
    },
    {
      "type": "add",
      "id": "9e0ec9dfad4fec78",
      "item": {
        "type": "paragraph",
        "id": "9e0ec9dfad4fec78",
        "text": "Stack operations\n\nThere are only two legal operations which can be carried out on a stack.\n\n    Push\n    Pop\n\nWhat does it mean to push and pop? Well, keep reading and you'll find out.\nPush\n\nWhen we talk about pushing onto the stack, what we really mean is adding a new item onto the top of the stack. Once we have pushed items onto the stack we can access the top element. Use the interactive stack at the top of the page to see what I mean.\nPop\n\nOkay, so we have worked out how to add items to the stack, but what happens when we want to access them?\n\nWhen we want to access items on the stack, we can only access and remove the top element. This is called popping, you will pop the top element off of the stack.\n\nYou don't understand? Don't worry, lets give and example.\n\nYou have pushed the calculation shown above onto the stack. The stack now looks like this:\n\nSee, the top element is 1 + 2 and the second is + 3 and so on.\n\nNow we are going to pop 1 + 2 off of the stack and evaluate it. Now the stack looks like this:\n\nDid you notice that 1 + 2 is no longer on the top of the stack? It is now + 3. So we pop that from the stack as well and evaluate that operation applied to our previous value. Our total is now 6.\n\nWe will continue this process until the stack is empty.\n\nYou may be thinking, \"Why do you remove the item when popping it off?\" The reason we do that is so that we can access the next item. Remember we can only access the top item in the stack.\n"
      },
      "after": "c2108eed36cd02fb",
      "date": 1695467712135
    },
    {
      "type": "edit",
      "id": "9e0ec9dfad4fec78",
      "item": {
        "type": "paragraph",
        "id": "9e0ec9dfad4fec78",
        "text": "# Stack operations"
      },
      "date": 1695467733270
    },
    {
      "type": "add",
      "id": "e6a656e1b8abd713",
      "item": {
        "type": "paragraph",
        "id": "e6a656e1b8abd713",
        "text": "There are only two legal operations which can be carried out on a stack."
      },
      "after": "9e0ec9dfad4fec78",
      "date": 1695467735566
    },
    {
      "type": "add",
      "id": "b04b75313321ab31",
      "item": {
        "type": "paragraph",
        "id": "b04b75313321ab31",
        "text": "1. Push\n2. Pop"
      },
      "after": "e6a656e1b8abd713",
      "date": 1695467744504
    },
    {
      "type": "add",
      "id": "94a6f034b09cad24",
      "item": {
        "type": "paragraph",
        "id": "94a6f034b09cad24",
        "text": "What does it mean to push and pop? Well, keep reading and you'll find out.\nPush\n\nWhen we talk about pushing onto the stack, what we really mean is adding a new item onto the top of the stack. Once we have pushed items onto the stack we can access the top element. Use the interactive stack at the top of the page to see what I mean.\nPop\n\nOkay, so we have worked out how to add items to the stack, but what happens when we want to access them?\n\nWhen we want to access items on the stack, we can only access and remove the top element. This is called popping, you will pop the top element off of the stack.\n\nYou don't understand? Don't worry, lets give and example.\n\nYou have pushed the calculation shown above onto the stack. The stack now looks like this:\n\nSee, the top element is 1 + 2 and the second is + 3 and so on.\n\nNow we are going to pop 1 + 2 off of the stack and evaluate it. Now the stack looks like this:\n\nDid you notice that 1 + 2 is no longer on the top of the stack? It is now + 3. So we pop that from the stack as well and evaluate that operation applied to our previous value. Our total is now 6.\n\nWe will continue this process until the stack is empty.\n\nYou may be thinking, \"Why do you remove the item when popping it off?\" The reason we do that is so that we can access the next item. Remember we can only access the top item in the stack."
      },
      "after": "b04b75313321ab31",
      "date": 1695467745671
    },
    {
      "type": "edit",
      "id": "b04b75313321ab31",
      "item": {
        "type": "markdown",
        "id": "b04b75313321ab31",
        "text": "1. Push\n2. Pop"
      },
      "date": 1695467747136
    },
    {
      "type": "edit",
      "id": "9e0ec9dfad4fec78",
      "item": {
        "type": "markdown",
        "id": "9e0ec9dfad4fec78",
        "text": "# Stack operations"
      },
      "date": 1695467747950
    },
    {
      "type": "edit",
      "id": "94a6f034b09cad24",
      "item": {
        "type": "paragraph",
        "id": "94a6f034b09cad24",
        "text": "What does it mean to push and pop? Well, keep reading and you'll find out."
      },
      "date": 1695467774138
    },
    {
      "type": "add",
      "id": "0969393a9abee6be",
      "item": {
        "type": "paragraph",
        "id": "0969393a9abee6be",
        "text": "## Push"
      },
      "after": "94a6f034b09cad24",
      "date": 1695467777046
    },
    {
      "type": "add",
      "id": "bec187a2f093e12c",
      "item": {
        "type": "paragraph",
        "id": "bec187a2f093e12c",
        "text": "When we talk about pushing onto the stack, what we really mean is adding a new item onto the top of the stack. Once we have pushed items onto the stack we can access the top element. Use the interactive stack at the top of the page to see what I mean."
      },
      "after": "0969393a9abee6be",
      "date": 1695467782375
    },
    {
      "type": "add",
      "id": "a7d4ba3215d88c60",
      "item": {
        "type": "paragraph",
        "id": "a7d4ba3215d88c60",
        "text": "## Pop"
      },
      "after": "bec187a2f093e12c",
      "date": 1695467783793
    },
    {
      "type": "edit",
      "id": "0969393a9abee6be",
      "item": {
        "type": "markdown",
        "id": "0969393a9abee6be",
        "text": "## Push"
      },
      "date": 1695467785855
    },
    {
      "type": "edit",
      "id": "a7d4ba3215d88c60",
      "item": {
        "type": "markdown",
        "id": "a7d4ba3215d88c60",
        "text": "## Pop"
      },
      "date": 1695467787141
    },
    {
      "type": "add",
      "id": "5d096818664a262d",
      "item": {
        "type": "paragraph",
        "id": "5d096818664a262d",
        "text": "Okay, so we have worked out how to add items to the stack, but what happens when we want to access them?\n\nWhen we want to access items on the stack, we can only access and remove the top element. This is called popping, you will pop the top element off of the stack.\n\nYou don't understand? Don't worry, lets give and example.\n\nYou have pushed the calculation shown above onto the stack. The stack now looks like this:\n\nSee, the top element is 1 + 2 and the second is + 3 and so on.\n\nNow we are going to pop 1 + 2 off of the stack and evaluate it. Now the stack looks like this:\n\nDid you notice that 1 + 2 is no longer on the top of the stack? It is now + 3. So we pop that from the stack as well and evaluate that operation applied to our previous value. Our total is now 6.\n\nWe will continue this process until the stack is empty.\n\nYou may be thinking, \"Why do you remove the item when popping it off?\" The reason we do that is so that we can access the next item. Remember we can only access the top item in the stack."
      },
      "after": "a7d4ba3215d88c60",
      "date": 1695467813852
    },
    {
      "type": "edit",
      "id": "bec187a2f093e12c",
      "item": {
        "type": "paragraph",
        "id": "bec187a2f093e12c",
        "text": "When we talk about pushing onto the stack, what we really mean is adding a new item onto the top of the stack. Once we have pushed items onto the stack we can access the top element. Use the interactive stack at the top of the [https://elm-stack.surge.sh/#interactivestack page] to see what I mean."
      },
      "date": 1695467847734
    },
    {
      "type": "edit",
      "id": "5d096818664a262d",
      "item": {
        "type": "paragraph",
        "id": "5d096818664a262d",
        "text": "Okay, so we have worked out how to add items to the stack, but what happens when we want to access them?\n\nWhen we want to access items on the stack, we can only access and remove the top element. This is called popping, you will pop the top element off of the stack.\n\nYou don't understand? Don't worry, lets give and example.\n\nYou have pushed the calculation shown above onto the stack. The stack now looks like this:\n\nSee, the top element is 1 + 2 and the second is + 3 and so on."
      },
      "date": 1695468387877
    },
    {
      "type": "add",
      "id": "fa2a6ac2624c6fd8",
      "item": {
        "type": "paragraph",
        "id": "fa2a6ac2624c6fd8",
        "text": "Now we are going to pop 1 + 2 off of the stack and evaluate it. Now the stack looks like this:"
      },
      "after": "5d096818664a262d",
      "date": 1695468389260
    },
    {
      "type": "add",
      "id": "65bac5c01c9747cf",
      "item": {
        "type": "paragraph",
        "id": "65bac5c01c9747cf",
        "text": "Did you notice that 1 + 2 is no longer on the top of the stack? It is now + 3. So we pop that from the stack as well and evaluate that operation applied to our previous value. Our total is now 6.\n\nWe will continue this process until the stack is empty.\n\nYou may be thinking, \"Why do you remove the item when popping it off?\" The reason we do that is so that we can access the next item. Remember we can only access the top item in the stack."
      },
      "after": "fa2a6ac2624c6fd8",
      "date": 1695468392110
    },
    {
      "id": "dc7a206fa8fc342d",
      "type": "remove",
      "removedTo": {
        "page": "2023-09-23"
      },
      "date": 1695469514336
    }
  ]
}