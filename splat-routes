{
  "title": "Splat Routes",
  "story": [
    {
      "type": "paragraph",
      "id": "91a054ca15e5650f",
      "text": "Splat routes allow you to do a catch all to catch 1 or more segments at the end of the route. If you want to have all of your routes defined from a CMS, then you can use app/Route.SPLAT_.elm. That will match any URL except for the root route (/). [https://elm-pages.com/docs/file-based-routing/#splat-routes page]"
    },
    {
      "type": "paragraph",
      "id": "413b26eb8e772b57",
      "text": "You can have any number of static segments and dynamic segments before the SPLAT_ and it will match as usual. For example, app/Route/City/SPLAT_.elm could be used to match the following:"
    },
    {
      "type": "html",
      "id": "62c7728ef7d6d69f",
      "text": "<table class=\"_9ebfe20c\"><thead><tr><th>URL</th><th>RouteParams</th></tr></thead><tbody><tr><td><code class=\"_19659af6\">/city/paris</code></td><td><code class=\"_19659af6\">{ splat = ( \"paris\", [] ) }</code></td></tr><tr><td><code class=\"_19659af6\">/city/france/paris</code></td><td><code class=\"_19659af6\">{ splat = ( \"france\", [ \"paris\" ] ) }</code></td></tr><tr><td><code class=\"_19659af6\">/city/us/california/los-angeles</code></td><td><code class=\"_19659af6\">{ splat = ( \"us\", [ \"california\", \"los-angeles\" ] ) }</code></td></tr></tbody></table>"
    },
    {
      "type": "paragraph",
      "id": "7ecc4d6e0355bab6",
      "text": "⇒ [[Optional Splat Routes]] ⇐ [[File-Based Routing]] ⇒ [[RouteParams]]"
    },
    {
      "type": "paragraph",
      "id": "dadcbdc4d2dc7c7d",
      "text": "The *splat route convention enables you to define a route that can get anything written after the * sign as an action parameter. For example, the route “car/*imagePath” will match the http://mywebsite/#car/images/bmw. jpg URL. The action in the previous example should include an imagePath parameter. Listing 5-27 shows how to configure a route using *splat."
    },
    {
      "type": "paragraph",
      "id": "00a78127402a3b7a",
      "text": "FINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0, p. 87."
    },
    {
      "type": "pagefold",
      "id": "12eabcc4a78026f1",
      "text": "~"
    },
    {
      "type": "graphviz",
      "id": "cce73eb4ca35af60",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Splat Routes",
        "story": []
      },
      "date": 1692880446329
    },
    {
      "item": {
        "type": "factory",
        "id": "91a054ca15e5650f"
      },
      "id": "91a054ca15e5650f",
      "type": "add",
      "date": 1692880447498
    },
    {
      "type": "edit",
      "id": "91a054ca15e5650f",
      "item": {
        "type": "paragraph",
        "id": "91a054ca15e5650f",
        "text": "Splat routes allow you to do a catch all to catch 1 or more segments at the end of the route. If you want to have all of your routes defined from a CMS, then you can use app/Route.SPLAT_.elm. That will match any URL except for the root route (/)."
      },
      "date": 1692880449042
    },
    {
      "type": "edit",
      "id": "91a054ca15e5650f",
      "item": {
        "type": "paragraph",
        "id": "91a054ca15e5650f",
        "text": "Splat routes allow you to do a catch all to catch 1 or more segments at the end of the route. If you want to have all of your routes defined from a CMS, then you can use app/Route.SPLAT_.elm. That will match any URL except for the root route (/). [https://elm-pages.com/docs/file-based-routing/#splat-routes page]"
      },
      "date": 1692880477605
    },
    {
      "item": {
        "type": "factory",
        "id": "413b26eb8e772b57"
      },
      "id": "413b26eb8e772b57",
      "type": "add",
      "after": "91a054ca15e5650f",
      "date": 1692880583980
    },
    {
      "type": "edit",
      "id": "413b26eb8e772b57",
      "item": {
        "type": "paragraph",
        "id": "413b26eb8e772b57",
        "text": "You can have any number of static segments and dynamic segments before the SPLAT_ and it will match as usual. For"
      },
      "date": 1692880585528
    },
    {
      "type": "edit",
      "id": "413b26eb8e772b57",
      "item": {
        "type": "paragraph",
        "id": "413b26eb8e772b57",
        "text": "You can have any number of static segments and dynamic segments before the SPLAT_ and it will match as usual. "
      },
      "date": 1692880594684
    },
    {
      "item": {
        "type": "factory",
        "id": "62c7728ef7d6d69f"
      },
      "id": "62c7728ef7d6d69f",
      "type": "add",
      "after": "413b26eb8e772b57",
      "date": 1692880649635
    },
    {
      "type": "edit",
      "id": "62c7728ef7d6d69f",
      "item": {
        "type": "html",
        "id": "62c7728ef7d6d69f",
        "text": "<table class=\"_9ebfe20c\"><thead><tr><th>URL</th><th>RouteParams</th></tr></thead><tbody><tr><td><code class=\"_19659af6\">/city/paris</code></td><td><code class=\"_19659af6\">{ splat = ( \"paris\", [] ) }</code></td></tr><tr><td><code class=\"_19659af6\">/city/france/paris</code></td><td><code class=\"_19659af6\">{ splat = ( \"france\", [ \"paris\" ] ) }</code></td></tr><tr><td><code class=\"_19659af6\">/city/us/california/los-angeles</code></td><td><code class=\"_19659af6\">{ splat = ( \"us\", [ \"california\", \"los-angeles\" ] ) }</code></td></tr></tbody></table>"
      },
      "date": 1692880652051
    },
    {
      "type": "edit",
      "id": "413b26eb8e772b57",
      "item": {
        "type": "paragraph",
        "id": "413b26eb8e772b57",
        "text": "You can have any number of static segments and dynamic segments before the SPLAT_ and it will match as usual. For example, app/Route/City/SPLAT_.elm could be used to match the following:"
      },
      "date": 1692880675875
    },
    {
      "item": {
        "type": "factory",
        "id": "7ecc4d6e0355bab6"
      },
      "id": "7ecc4d6e0355bab6",
      "type": "add",
      "after": "62c7728ef7d6d69f",
      "date": 1692880727889
    },
    {
      "type": "edit",
      "id": "7ecc4d6e0355bab6",
      "item": {
        "type": "paragraph",
        "id": "7ecc4d6e0355bab6",
        "text": "⇒ [[Optional Splat Routes]]"
      },
      "date": 1692880739198
    },
    {
      "type": "edit",
      "id": "7ecc4d6e0355bab6",
      "item": {
        "type": "paragraph",
        "id": "7ecc4d6e0355bab6",
        "text": "⇒ [[Optional Splat Routes]] ⇐ [[File-Based Routing]]"
      },
      "date": 1692880759556
    },
    {
      "item": {
        "type": "factory",
        "id": "87861093e8b2f6ac"
      },
      "id": "87861093e8b2f6ac",
      "type": "add",
      "after": "7ecc4d6e0355bab6",
      "date": 1692883676151
    },
    {
      "type": "remove",
      "id": "87861093e8b2f6ac",
      "date": 1692883761381
    },
    {
      "item": {
        "type": "factory",
        "id": "12eabcc4a78026f1"
      },
      "id": "12eabcc4a78026f1",
      "type": "add",
      "after": "7ecc4d6e0355bab6",
      "date": 1692883824659
    },
    {
      "type": "edit",
      "id": "12eabcc4a78026f1",
      "item": {
        "type": "pagefold",
        "id": "12eabcc4a78026f1",
        "text": "~"
      },
      "date": 1692883827528
    },
    {
      "item": {
        "type": "factory",
        "id": "dadcbdc4d2dc7c7d"
      },
      "id": "dadcbdc4d2dc7c7d",
      "type": "add",
      "after": "12eabcc4a78026f1",
      "date": 1692883829392
    },
    {
      "type": "edit",
      "id": "dadcbdc4d2dc7c7d",
      "item": {
        "type": "paragraph",
        "id": "dadcbdc4d2dc7c7d",
        "text": "The *splat route convention enables you to define a route that can get anything written after the * sign as an action parameter. For example, the route “car/*imagePath” will match the http://mywebsite/#car/images/bmw. jpg URL. The action in the previous example should include an imagePath parameter. Listing 5-27 shows how to configure a route using *splat."
      },
      "date": 1692883831143
    },
    {
      "item": {
        "type": "factory",
        "id": "00a78127402a3b7a"
      },
      "id": "00a78127402a3b7a",
      "type": "add",
      "after": "dadcbdc4d2dc7c7d",
      "date": 1692883844743
    },
    {
      "type": "edit",
      "id": "00a78127402a3b7a",
      "item": {
        "type": "paragraph",
        "id": "00a78127402a3b7a",
        "text": "\nFINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. . New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0. TK5105.888 .F545 2014\n"
      },
      "date": 1692883846211
    },
    {
      "type": "edit",
      "id": "00a78127402a3b7a",
      "item": {
        "type": "paragraph",
        "id": "00a78127402a3b7a",
        "text": "FINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. . New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0, p. "
      },
      "date": 1692883856689
    },
    {
      "type": "edit",
      "id": "00a78127402a3b7a",
      "item": {
        "type": "paragraph",
        "id": "00a78127402a3b7a",
        "text": "FINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. . New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0, p. 87."
      },
      "date": 1692883872354
    },
    {
      "type": "edit",
      "id": "00a78127402a3b7a",
      "item": {
        "type": "paragraph",
        "id": "00a78127402a3b7a",
        "text": "FINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0, p. 87."
      },
      "date": 1692883880974
    },
    {
      "item": {
        "type": "factory",
        "id": "cce73eb4ca35af60"
      },
      "id": "cce73eb4ca35af60",
      "type": "add",
      "after": "00a78127402a3b7a",
      "date": 1692884069861
    },
    {
      "type": "edit",
      "id": "cce73eb4ca35af60",
      "item": {
        "type": "graphviz",
        "id": "cce73eb4ca35af60",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1692884077073
    },
    {
      "id": "cce73eb4ca35af60",
      "type": "move",
      "order": [
        "91a054ca15e5650f",
        "413b26eb8e772b57",
        "62c7728ef7d6d69f",
        "7ecc4d6e0355bab6",
        "12eabcc4a78026f1",
        "cce73eb4ca35af60",
        "dadcbdc4d2dc7c7d",
        "00a78127402a3b7a"
      ],
      "date": 1692884112174
    },
    {
      "type": "edit",
      "id": "7ecc4d6e0355bab6",
      "item": {
        "type": "paragraph",
        "id": "7ecc4d6e0355bab6",
        "text": "⇒ [[Optional Splat Routes]] ⇐ [[File-Based Routing]] ⇒ [[RouteParams]]"
      },
      "date": 1692884337331
    },
    {
      "id": "dadcbdc4d2dc7c7d",
      "type": "move",
      "order": [
        "91a054ca15e5650f",
        "413b26eb8e772b57",
        "62c7728ef7d6d69f",
        "7ecc4d6e0355bab6",
        "dadcbdc4d2dc7c7d",
        "12eabcc4a78026f1",
        "cce73eb4ca35af60",
        "00a78127402a3b7a"
      ],
      "date": 1693032867077
    },
    {
      "id": "00a78127402a3b7a",
      "type": "move",
      "order": [
        "91a054ca15e5650f",
        "413b26eb8e772b57",
        "62c7728ef7d6d69f",
        "7ecc4d6e0355bab6",
        "dadcbdc4d2dc7c7d",
        "00a78127402a3b7a",
        "12eabcc4a78026f1",
        "cce73eb4ca35af60"
      ],
      "date": 1693032869510
    }
  ]
}