{
  "title": "Graphical User Interface",
  "story": [
    {
      "type": "html",
      "text": "A form of [[User Interface]] in which information is presented in the form of pictures, usually on a bitmapped display, and often controlled by a pointing device (mouse, touch screen, etc.).  Known also by the acronym GUI (pronounced \"gooey\").",
      "id": "607ccd64e10fd16c54291b944c7085d9"
    },
    {
      "type": "html",
      "text": "\nInvented over many years by a bunch of researchers, prominent among them [[Doug Engelbart]].",
      "id": "9fb65d96292200426eb6fb4489c74e6a"
    },
    {
      "type": "html",
      "text": "\nGiven a good strong push by Xerox at [[Xerox Parc]] in the 1970s.",
      "id": "eae64aa89a06ed4ea1dea7aa5e97bcb8"
    },
    {
      "type": "html",
      "text": "\nImproved and popularized by [[Apple Computer]] with their 1983 Lisa and 1984 Macintosh lines of computers.",
      "id": "cc52d2c7ffa476bc8e4865186aeaa779"
    },
    {
      "type": "html",
      "text": "\nMated with Unix (as all technologies eventually are) in the form of the X windowing system (a.k.a. \"X Windows\") in the late 1980s.",
      "id": "5132f9b1e9dc35c8c9761c7c29786afd"
    },
    {
      "type": "html",
      "text": "\nFurther changed by Microsoft, who probably have the most GUI instances in the field at the \nmoment.",
      "id": "52dba7aafb46a6aa68673f88ce48b2fd"
    },
    {
      "type": "html",
      "text": "\nSee [[Wimp Interface]], [[Common User Access]]. Contrast with: [[Command Line Interface]]",
      "id": "16272f8341abfdcef8135ba0f84ef995"
    },
    {
      "type": "html",
      "text": "\nWhat about a [[Command Line Gui Combo]]?",
      "id": "755260a78810a997e09e3c64b94518dd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "924e05073a9aaf8864e27bba4ff7d27b"
    },
    {
      "type": "html",
      "text": "\nGUIs are generally recognized as being very good for visual tasks, especially document editing and some common kinds of file management, and helping the user perform uncommon or unfamiliar tasks.",
      "id": "988f6b482d9377da78bbcd25a2de3563"
    },
    {
      "type": "html",
      "text": "\nMany more-complicated tasks can be more easily accomplished with a character-based language, which is why the [[Command Line Interface]] is still around.",
      "id": "9558110633957663cb776f850a9bd29f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "924e05073a9aaf8864e27bba4ff7d27b"
    },
    {
      "type": "html",
      "text": "\nGUIs should really be implemented using some variation on [[Model View Controller]] because the rate of change of the presentation is different from the rate of change of the underlying logic. [[The Humble Dialog Box]] explains how to do this, under the assumption your controls are simple and ready-made. In practice, many GUIs are implemented in a hairball of mixed model/presentation code that makes everything, beginning with testing, difficult.",
      "id": "98449f4779b1279758df718126c38ca5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "924e05073a9aaf8864e27bba4ff7d27b"
    },
    {
      "type": "html",
      "text": "<i>Many more-complicated tasks can be more easily accomplished with a character-based language, which is why the [[Command Line Interface]] is still around.</i>",
      "id": "1e7f59107b17cc1cc9187023ee701bce"
    },
    {
      "type": "html",
      "text": "\nThis is a widely held and unsupported myth. First, the specification of what \"more-complicated\" means is unspoken. Next, this undefined \"complexity\" is cited as <i>the</i> reason why the [[Command Line Interface]] is still around -- when in fact, another undefined term is what we mean by \"still around\", another is \"[[Command Line Interface]]\", and so on and so forth. Further, the essential characteristic of the [[Graphical User Interface]] is NOT that its information is in the form of pictures, but is instead that the interface is constructed using a noun-verb paradigm. A [[Graphical User Interface]] can be and has been constructed using a character-based language.",
      "id": "c211ed7e08e09066be0f116acb56d10d"
    },
    {
      "type": "html",
      "text": "\nThe \"selection\" of the object to which a command is to be applied is commonly (in a [[Graphical User Interface]]) made using a mouse or similar pointing device, but does not have to be. Once a selection has been made, in fashion, the set of \"commands\" appropriate for that object can be narrowed and presented to the user, and then interpreted in the context of the selected object. This is what allows \"open\" to be a meaningful user operation for a file, a folder, an email, and so on. While its true that select-and-click using a mouse is well-supported, its also true that a command line could be constructed that says \"/usr/foo/bar/somefile.c open\".",
      "id": "9f4429326aabc60e3883dc980b254a82"
    },
    {
      "type": "html",
      "text": "\nThe key attribute of an icon-oriented user interface is that it presents a limited number of objects. Various human factor studies have demonstrated that for a limited number of items, we recognize spatial position more effectively than other choices. Interestingly enough, this recognition is <b>hurt</b>, not helped, when those objects are gridded in a uniform array. Our senses recognize and remember <b>disordered</b> collections of a limited number of shapes (estimates of the number vary from something like 7 to something like 20). Most of us, with only a little practice, \"see\" groups of up to five things without having to count them individually. When a choice has to be made from more than whatever that number of objects is, then textual labels are much more effective than anything else, especially when they are sorted in some order. This does not, however, mean that a [[Command Line Interface]] is more suited for \"complex\" tasks. It means only that navigational selection is not as effective with a large number of choices.",
      "id": "71c731510fb705f1e0f27662ace154d8"
    },
    {
      "type": "html",
      "text": "\nThere are a host of reasons why the [[Command Line Interface]] (whatever that means) is still around (whatever THAT means). Some reasons are:",
      "id": "ed8a0436a5b2be546430b83478fdabbc"
    },
    {
      "type": "html",
      "text": " Old software and systems that are still in use",
      "id": "c599d0ed4c25ce8e0827c9d6d764957e"
    },
    {
      "type": "html",
      "text": " Groups and individuals that view [[Command Line Interface]] as \"strong\" and [[Graphical User Interface]] as \"weak\".",
      "id": "82e589f5a6b41ebe0f9e190baaee808f"
    },
    {
      "type": "html",
      "text": " Job security",
      "id": "78d6d1329af7a2754556c6870f0cd1e2"
    },
    {
      "type": "html",
      "text": " Elitism",
      "id": "2bc98f41c96c820f41ee818580b9cc4f"
    },
    {
      "type": "html",
      "text": " Some people dislike using a mouse",
      "id": "eb5bd1fca668b9fc18b688ab8ebd92ea"
    },
    {
      "type": "html",
      "text": "\nThe factors that drive this perception strike me as related to factors that drive the use of \"terse\" languages like Perl. This is not to be necessarily judgemental for or against Perl or [[Command Line Interface]]s -- it is to say that whatever the factors are, there are many of them, and most of them have little or nothing to do with things like complexity or ease of use.",
      "id": "22dc40a9a4988bfc91c7554b6c1eb329"
    },
    {
      "type": "html",
      "text": "<i>It is unclear to me exactly what the above is arguing. I would ask the writer, or anyone else supporting GUIs as the best way to interact with a computer, how can I, using a GUI, accomplish the following:</i>",
      "id": "2d9da62b1b2d6b59751f6079c663b5ee"
    },
    {
      "type": "html",
      "text": "<b>find . -type f -exec md5sum '{}' ';' | \\</b>",
      "id": "3576dd1cd0ce3f770f3857827ac647c1"
    },
    {
      "type": "html",
      "text": "<b>gawk '{m[$1]=m[$1] \" \" $2;c[$1]++}END{for (i in m) print c[i],m[i]}' | \\</b>",
      "id": "be623f2071d879a9227008695f03b16a"
    },
    {
      "type": "html",
      "text": "<b>sort -rn | less</b>",
      "id": "1d74b588a4cf8f66b4a78ab5aa0f8a08"
    },
    {
      "type": "html",
      "text": "<i>which finds all multiple occurrences of files starting in the current directory. Forcing one interface or the other loses the opportunity to combine the strengths of both, and denies the existence of different ways of thinking.</i>",
      "id": "4e665b0ca8dcbef2c3a6316fd78540c6"
    },
    {
      "type": "html",
      "text": "[Indeed. A [[Command Line Interface]] is essentially a textual programming language with an extremely low overhead to do useful things (zero lines of [[Boiler Plate Code]]: no 'void main', no 'import Filesystem', etc.). If our [[Operating System]]s' GUIs were based on [[Graphical Programming Language]]s, perhaps we would achieve a similar level of facility. As it is, most GUI content is programmed in textual languages, and the overhead is significant enough to stop most people before they bother starting (a huge [[Opportunity Cost]]!).]",
      "id": "1ed3d12b1b587c340ca1d046c5c79da5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "924e05073a9aaf8864e27bba4ff7d27b"
    },
    {
      "type": "html",
      "text": "\nI like express the \"GUI problem\" with simpler examples. Take a typical \"use cases\":",
      "id": "d7a5de81df598d36c915c4eadab9fd91"
    },
    {
      "type": "html",
      "text": " update files from cvs and compile",
      "id": "1b110b7188138396c5b33c8a6a097619"
    },
    {
      "type": "html",
      "text": "(Any similar \"do X then Y' use case would suffice. For example, a few days ago I wanted to \"defrag hard-disk (overnight) and shutdown when done\".).",
      "id": "be07598573252e1e7898d44ad273864d"
    },
    {
      "type": "html",
      "text": "\nThe GUI mindset approaches this use case by says \"lets create menu item (or button, whatever) that expresses this use case. This is natural, because GUIs are gramatically weak: they (in general) have no way to express this type of relationship. Some will let you create a user-defined macro for the conjunction (and then associate it with a menu/button/keypress/whatever).",
      "id": "aff68d79bdb0c9c90294dc9b081c8dc5"
    },
    {
      "type": "html",
      "text": "\nThe CLI appraoch doesn't need any of this, because the underlying grammar of the CLI has this built in. Even if you had such a weak shell that you couldn't do",
      "id": "724540beb1a0c0dc2f72e74c55d3c933"
    },
    {
      "type": "code",
      "text": "  cvs update && make",
      "id": "53277c782d8ebb00f2dc2dd0ec7a392c"
    },
    {
      "type": "html",
      "text": "\nYou could still use type-ahead to do:",
      "id": "cff075087c27b1bfc429acc650e78bd9"
    },
    {
      "type": "code",
      "text": "  cvs update\n  make",
      "id": "f107c1a05cbb63ebb4ee91cf9bbcf12c"
    },
    {
      "type": "html",
      "text": "\nWhen the first command is complete, the second will run. This would be a fundamentally undesirable behavior in a GUI, because when something doesn't happen immediately, there's a natural tendency to hit the menu/button/keypress again.",
      "id": "808a68a5a8975092c13398c45f04f619"
    },
    {
      "type": "html",
      "text": "<i>This problem is trivially solved, through the use of command objects and a scripting interface. For example, Macintosh users did things like this with [[Apple Script]] or Hypercard. The scripting tool allows the user to create a command object, which understands verbs like \"Do It\" and \"Undo It\". One command object is created for \"CVS Update\", another for \"make\". The two command objects are chained into another command object (yes, they compose). Click \"do it\" and it's done. The CLI interface is \"easier\" only if you have already memorized the shell language.</i>",
      "id": "aeb2bab9b69a081b3e832f80d1c0348c"
    },
    {
      "type": "html",
      "text": "\nI think that reply proves my point. The GUI approach to the use-case \"do foo and then bar\" is to create a new \"command object\" that implements the composition (A lot of newbie OO programmers suffer the same affliction). The CLI approach doesn't need such a \"command object\" to be created via a \"scripting language\" because the interface metaphore is already a script. It doesn't require the composition to be expressed (encapsulated) as a tangible thing because the metaphore is already based on serialization (and there's no additional shell language to learn: you just type the commands and hit the 'return' key at the end of each one). If one wants to reuse the specific sequence multiple times then, of course, in either interface you would create a separate object, script or alias to represent it.",
      "id": "c0483195a04abbc12a7696ef9eefc092"
    },
    {
      "type": "html",
      "text": "<i>\"You just type the commands...\" -- conveniently skipping over the part where you memorize all of them. Then memorize the switches and arguments of each one. Then remember the ones where the arguments go in a different order. Then remember the ones that pipe and the ones that do not. The \"scripting language\" in a decent GUI doesn't need to be memorized or learned, the system just remembers it. Go back and look at [[Apple Script]], in the Macintosh ca 1988.</i>",
      "id": "b7e74761c44c0b63a70f3e547f3fb9de"
    },
    {
      "type": "html",
      "text": "\nYou keep trying to avoid the issue. My initial postulate was that you knew the two commands that you wanted to run, so the question of knowing options, etc. is moot. Whichever interface one is using, creating a script is trivial -- but what if you just want to do \"a then b\" without creating a \"script\"?. My point was that the CLI metaphor is more closely aligned with that concept than is the GUI. That isn't even really a value-judgement: if ad-hoc composition is not a primary value, then it doesn't matter that such scripting is not the defining characteristic of the GUI metaphor.",
      "id": "57d76260efc4dd24e0245b28eb03d5c5"
    },
    {
      "type": "html",
      "text": "<i>Your \"initial postulate\" assumes away the issue. \"Assuming pigs could fly, then ...\" I think you're assuming the outcome of the argument you're trying to make. I don't see this exchange getting anywhere. I made the mistake of thinking you were interested in learning how a GUI addresses a certain class of problems. I'm not interested in perpetuating the GUI vs CLI religious war that has been going on for two decades now.</i>",
      "id": "1134841ae60a0313ecedb434245d1f26"
    },
    {
      "type": "html",
      "text": "\nI think you're right: no light was shed. These wars are of no interest to me either. I tried hard to avoid making any value-statements that might perpetuate such wars but I was obviously unsuccessful, for which I am sorry. Your belief in my aim in my original statement does indeed appear mistaken. I did indeed \"assume away\" the issue you wanted to address (syntax/vocabulary), because that is not the issue that I was trying to explore (grammar). I appologise for my inability to clearly express the thoughts that I was attempting to express.",
      "id": "f39a5d5fed6ff14c77ba883c06b87192"
    },
    {
      "type": "html",
      "text": "<i>\"The GUI mindset\"? \"Grammatically weak\"? I accept your apology, it does appear that you failed to avoid making value statements. If it is \"grammar\" that interests you, then perhaps it might be more constructive for us to explore the question of visual versus lexical grammars -- perhaps a contrast-and-compare or something similar.</i>",
      "id": "900bea112defcb1f6bb5871360d0275a"
    },
    {
      "type": "html",
      "text": "[Regardless of whether <b>he</b> was making value statements, it is possible to <b>objectively</b> say that it is rare for GUIs to support a syntax more complicated than \"ACTION <noun_list>\" or \"NOUN <action_list>\", whereas it is common for CLIs to support more complex syntax. That's not a value judgement, that's a linguistic description...is it ok with you so far? If so, then I, for one, would be interested to hear more about what more complex kinds of visual grammars you are aware of, beyond those common ones.]",
      "id": "c3a825d67f7f5f09ee0ac845858f39df"
    },
    {
      "type": "html",
      "text": " [[Drag And Drop]]:  ACTION <object> <subject>",
      "id": "2eaf9ae87f988d07da7c36932776b524"
    },
    {
      "type": "html",
      "text": " In the [[Mac Osx]] [[Interface Builder]], I've also seen this used to define relations.",
      "id": "361d360ce05c4ff94f4374698fed2f8b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "924e05073a9aaf8864e27bba4ff7d27b"
    },
    {
      "type": "html",
      "text": "\nThe best of GUIs complement and support the best of CLIs, and vice versa. I prefer KDE Konsole because it leaves several shells open in one window, for example, with copy-n-paste between them.",
      "id": "1bed4f79d0c60d00098afc7b886bf6ed"
    },
    {
      "type": "html",
      "text": "\nIn a CLI, you can arrow up and edit your command. You can write long complex commands; writing commands is separate from initiating them. This is a good thing <i>when you decide to use it</i>. In theory, the decision to use one or the other kind should not be imposed upon you. In normal practice, lazy programmers only implement one side of this equation. --[[Phl Ip]]",
      "id": "40a4cfc9982eb5ee75033eb7f1fbe41e"
    },
    {
      "type": "html",
      "text": "\nAbsolutely. And with new utilities like [[Quick Silver]], the lines between GUI and CLI can be blurred, to the benefit of both. -- [[Robert Daeley]]",
      "id": "6bf62782a93640a66410e883bfb4206b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "924e05073a9aaf8864e27bba4ff7d27b"
    },
    {
      "type": "html",
      "text": "<b>Touch-screen versus Mouse - Merger Prediction</b>",
      "id": "8b44a63e8632d59d548afd13d5714f23"
    },
    {
      "type": "html",
      "text": "\nTablets and smartphones are making touch interfaces more common and popular. It's often presented as an either/or run-off between the mouse and the finger (touch-based). But I predict in the future that an office interface will have both kinds of interfaces and that a tablet will replace the mouse. One will sometimes use (look at) the tablet directly, and other times use it like a mouse, controlling the cursor for the upright screen, similar to the touch-pad on some laptops, but with greater size and movement room because a tablet is a larger surface. The upright screen will sometimes mirror the tablet screen, and sometimes be a 2nd screen which has different content than the tablet. One will switch the method or mode as needed.  In some cases, the \"tool bar\" may only appear on the tablet, but larger, such that the main screen is freed up to show the document or content.",
      "id": "77493f7751706a47f377a553158a286e"
    },
    {
      "type": "html",
      "text": "\nThe tablet may have to better recognize multiple fingers and identify the pointing finger (or user-chosen finger choice), otherwise, holding all but one finger up all day is taxing on the hand. One will also typically grab the \"ex-mouse\" tablet for meetings so that they have their full (or virtual) desktop with them for reference or quick demos.  ",
      "id": "4b2a8eee87d56dc6a93efdfa6e458c0d"
    },
    {
      "type": "html",
      "text": "--top, Jan. 2013",
      "id": "9ec91891d273a811dfc4849348085ee9"
    },
    {
      "type": "html",
      "text": "<i>and you will take the tablet home and use it as a remote control for your television set, and your boss will pop up on the television set and tweet to you on the tablet that you are watching the same tv show</i>",
      "id": "0cb7be992325f08dc37a6ba3f2f67239"
    },
    {
      "type": "html",
      "text": " This is already sort of the case with Apple's Magic [[Track Pad]].",
      "id": "2834cf803711034006fc448d8e9996a0"
    },
    {
      "type": "html",
      "text": " <i>[[Track Pad]] has no screen. A tablet is basically a [[Track Pad]] with a screen. But it helps illustrate the general idea, so thanks for the tip.</i>",
      "id": "09fee898dba7f9384f94bc9b9b08aad8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "924e05073a9aaf8864e27bba4ff7d27b"
    },
    {
      "type": "html",
      "text": "\nGripe: Don't include default screen-savers or wall-paper with pretty flowers or birds or whatnot. Most guys hate that, especially if it takes a while to figure out where to change it. Find something more generic that is less likely to offend somebody.",
      "id": "fa620a946abaf32b54a132d3965aaa89"
    },
    {
      "type": "html",
      "text": "<i>You're offended by flowers and birds??? And you think \"most guys\" are offended too? *boggle*  Speaking as a guy, I've never noticed.  What <b>aren't</b> you offended by?</i>",
      "id": "e6a82e19f5e581b80403991ba1d134a1"
    },
    {
      "type": "html",
      "text": "\nHere is your new screen-saver. Call it \"God handing out your report card\".",
      "id": "9a55a4de35f11d2d234d640231b83b3c"
    },
    {
      "type": "image",
      "url": "http://apod.nasa.gov/apod/image/0306/carina_hst.jpg",
      "text": "apod.nasa.gov",
      "id": "0c172536a8b94ce8dc21bc91fafe9827"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "a798b0773526bc9bb98f96ded86be9b6"
    },
    {
      "type": "html",
      "text": "<i>That's brilliant.  For the next twenty minutes, I'm going to respect you a little.</i>",
      "id": "7d52b9290b263c8542d23feeade3d56e"
    },
    {
      "type": "html",
      "text": "[Awesome pic. But I'm a bit lost on how it's on-topic.]",
      "id": "b75dd838b367a4616c16290820ef1700"
    },
    {
      "type": "html",
      "text": "\nIt's evidence that God's UI is gesture-based.",
      "id": "5a0e54fe25debecd97067bccd3de6356"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "924e05073a9aaf8864e27bba4ff7d27b"
    },
    {
      "type": "html",
      "text": "[[Category User Interface]]",
      "id": "525d8093840c4b866054fb83aa9b73c8"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?GraphicalUserInterface c2.com]",
      "id": "0d277c2d80d256a6f2ed58f544976a4c"
    }
  ],
  "journal": [
    {
      "date": 1363906746000,
      "id": "ad8eb6e2f6eece0797cd288a89c9d519",
      "type": "create",
      "item": {
        "title": "Graphical User Interface",
        "story": [
          {
            "type": "html",
            "text": "A form of [[User Interface]] in which information is presented in the form of pictures, usually on a bitmapped display, and often controlled by a pointing device (mouse, touch screen, etc.).  Known also by the acronym GUI (pronounced \"gooey\").",
            "id": "607ccd64e10fd16c54291b944c7085d9"
          },
          {
            "type": "html",
            "text": "\nInvented over many years by a bunch of researchers, prominent among them [[Doug Engelbart]].",
            "id": "9fb65d96292200426eb6fb4489c74e6a"
          },
          {
            "type": "html",
            "text": "\nGiven a good strong push by Xerox at [[Xerox Parc]] in the 1970s.",
            "id": "eae64aa89a06ed4ea1dea7aa5e97bcb8"
          },
          {
            "type": "html",
            "text": "\nImproved and popularized by [[Apple Computer]] with their 1983 Lisa and 1984 Macintosh lines of computers.",
            "id": "cc52d2c7ffa476bc8e4865186aeaa779"
          },
          {
            "type": "html",
            "text": "\nMated with Unix (as all technologies eventually are) in the form of the X windowing system (a.k.a. \"X Windows\") in the late 1980s.",
            "id": "5132f9b1e9dc35c8c9761c7c29786afd"
          },
          {
            "type": "html",
            "text": "\nFurther changed by Microsoft, who probably have the most GUI instances in the field at the \nmoment.",
            "id": "52dba7aafb46a6aa68673f88ce48b2fd"
          },
          {
            "type": "html",
            "text": "\nSee [[Wimp Interface]], [[Common User Access]]. Contrast with: [[Command Line Interface]]",
            "id": "16272f8341abfdcef8135ba0f84ef995"
          },
          {
            "type": "html",
            "text": "\nWhat about a [[Command Line Gui Combo]]?",
            "id": "755260a78810a997e09e3c64b94518dd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "924e05073a9aaf8864e27bba4ff7d27b"
          },
          {
            "type": "html",
            "text": "\nGUIs are generally recognized as being very good for visual tasks, especially document editing and some common kinds of file management, and helping the user perform uncommon or unfamiliar tasks.",
            "id": "988f6b482d9377da78bbcd25a2de3563"
          },
          {
            "type": "html",
            "text": "\nMany more-complicated tasks can be more easily accomplished with a character-based language, which is why the [[Command Line Interface]] is still around.",
            "id": "9558110633957663cb776f850a9bd29f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "924e05073a9aaf8864e27bba4ff7d27b"
          },
          {
            "type": "html",
            "text": "\nGUIs should really be implemented using some variation on [[Model View Controller]] because the rate of change of the presentation is different from the rate of change of the underlying logic. [[The Humble Dialog Box]] explains how to do this, under the assumption your controls are simple and ready-made. In practice, many GUIs are implemented in a hairball of mixed model/presentation code that makes everything, beginning with testing, difficult.",
            "id": "98449f4779b1279758df718126c38ca5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "924e05073a9aaf8864e27bba4ff7d27b"
          },
          {
            "type": "html",
            "text": "<i>Many more-complicated tasks can be more easily accomplished with a character-based language, which is why the [[Command Line Interface]] is still around.</i>",
            "id": "1e7f59107b17cc1cc9187023ee701bce"
          },
          {
            "type": "html",
            "text": "\nThis is a widely held and unsupported myth. First, the specification of what \"more-complicated\" means is unspoken. Next, this undefined \"complexity\" is cited as <i>the</i> reason why the [[Command Line Interface]] is still around -- when in fact, another undefined term is what we mean by \"still around\", another is \"[[Command Line Interface]]\", and so on and so forth. Further, the essential characteristic of the [[Graphical User Interface]] is NOT that its information is in the form of pictures, but is instead that the interface is constructed using a noun-verb paradigm. A [[Graphical User Interface]] can be and has been constructed using a character-based language.",
            "id": "c211ed7e08e09066be0f116acb56d10d"
          },
          {
            "type": "html",
            "text": "\nThe \"selection\" of the object to which a command is to be applied is commonly (in a [[Graphical User Interface]]) made using a mouse or similar pointing device, but does not have to be. Once a selection has been made, in fashion, the set of \"commands\" appropriate for that object can be narrowed and presented to the user, and then interpreted in the context of the selected object. This is what allows \"open\" to be a meaningful user operation for a file, a folder, an email, and so on. While its true that select-and-click using a mouse is well-supported, its also true that a command line could be constructed that says \"/usr/foo/bar/somefile.c open\".",
            "id": "9f4429326aabc60e3883dc980b254a82"
          },
          {
            "type": "html",
            "text": "\nThe key attribute of an icon-oriented user interface is that it presents a limited number of objects. Various human factor studies have demonstrated that for a limited number of items, we recognize spatial position more effectively than other choices. Interestingly enough, this recognition is <b>hurt</b>, not helped, when those objects are gridded in a uniform array. Our senses recognize and remember <b>disordered</b> collections of a limited number of shapes (estimates of the number vary from something like 7 to something like 20). Most of us, with only a little practice, \"see\" groups of up to five things without having to count them individually. When a choice has to be made from more than whatever that number of objects is, then textual labels are much more effective than anything else, especially when they are sorted in some order. This does not, however, mean that a [[Command Line Interface]] is more suited for \"complex\" tasks. It means only that navigational selection is not as effective with a large number of choices.",
            "id": "71c731510fb705f1e0f27662ace154d8"
          },
          {
            "type": "html",
            "text": "\nThere are a host of reasons why the [[Command Line Interface]] (whatever that means) is still around (whatever THAT means). Some reasons are:",
            "id": "ed8a0436a5b2be546430b83478fdabbc"
          },
          {
            "type": "html",
            "text": " Old software and systems that are still in use",
            "id": "c599d0ed4c25ce8e0827c9d6d764957e"
          },
          {
            "type": "html",
            "text": " Groups and individuals that view [[Command Line Interface]] as \"strong\" and [[Graphical User Interface]] as \"weak\".",
            "id": "82e589f5a6b41ebe0f9e190baaee808f"
          },
          {
            "type": "html",
            "text": " Job security",
            "id": "78d6d1329af7a2754556c6870f0cd1e2"
          },
          {
            "type": "html",
            "text": " Elitism",
            "id": "2bc98f41c96c820f41ee818580b9cc4f"
          },
          {
            "type": "html",
            "text": " Some people dislike using a mouse",
            "id": "eb5bd1fca668b9fc18b688ab8ebd92ea"
          },
          {
            "type": "html",
            "text": "\nThe factors that drive this perception strike me as related to factors that drive the use of \"terse\" languages like Perl. This is not to be necessarily judgemental for or against Perl or [[Command Line Interface]]s -- it is to say that whatever the factors are, there are many of them, and most of them have little or nothing to do with things like complexity or ease of use.",
            "id": "22dc40a9a4988bfc91c7554b6c1eb329"
          },
          {
            "type": "html",
            "text": "<i>It is unclear to me exactly what the above is arguing. I would ask the writer, or anyone else supporting GUIs as the best way to interact with a computer, how can I, using a GUI, accomplish the following:</i>",
            "id": "2d9da62b1b2d6b59751f6079c663b5ee"
          },
          {
            "type": "html",
            "text": "<b>find . -type f -exec md5sum '{}' ';' | \\</b>",
            "id": "3576dd1cd0ce3f770f3857827ac647c1"
          },
          {
            "type": "html",
            "text": "<b>gawk '{m[$1]=m[$1] \" \" $2;c[$1]++}END{for (i in m) print c[i],m[i]}' | \\</b>",
            "id": "be623f2071d879a9227008695f03b16a"
          },
          {
            "type": "html",
            "text": "<b>sort -rn | less</b>",
            "id": "1d74b588a4cf8f66b4a78ab5aa0f8a08"
          },
          {
            "type": "html",
            "text": "<i>which finds all multiple occurrences of files starting in the current directory. Forcing one interface or the other loses the opportunity to combine the strengths of both, and denies the existence of different ways of thinking.</i>",
            "id": "4e665b0ca8dcbef2c3a6316fd78540c6"
          },
          {
            "type": "html",
            "text": "[Indeed. A [[Command Line Interface]] is essentially a textual programming language with an extremely low overhead to do useful things (zero lines of [[Boiler Plate Code]]: no 'void main', no 'import Filesystem', etc.). If our [[Operating System]]s' GUIs were based on [[Graphical Programming Language]]s, perhaps we would achieve a similar level of facility. As it is, most GUI content is programmed in textual languages, and the overhead is significant enough to stop most people before they bother starting (a huge [[Opportunity Cost]]!).]",
            "id": "1ed3d12b1b587c340ca1d046c5c79da5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "924e05073a9aaf8864e27bba4ff7d27b"
          },
          {
            "type": "html",
            "text": "\nI like express the \"GUI problem\" with simpler examples. Take a typical \"use cases\":",
            "id": "d7a5de81df598d36c915c4eadab9fd91"
          },
          {
            "type": "html",
            "text": " update files from cvs and compile",
            "id": "1b110b7188138396c5b33c8a6a097619"
          },
          {
            "type": "html",
            "text": "(Any similar \"do X then Y' use case would suffice. For example, a few days ago I wanted to \"defrag hard-disk (overnight) and shutdown when done\".).",
            "id": "be07598573252e1e7898d44ad273864d"
          },
          {
            "type": "html",
            "text": "\nThe GUI mindset approaches this use case by says \"lets create menu item (or button, whatever) that expresses this use case. This is natural, because GUIs are gramatically weak: they (in general) have no way to express this type of relationship. Some will let you create a user-defined macro for the conjunction (and then associate it with a menu/button/keypress/whatever).",
            "id": "aff68d79bdb0c9c90294dc9b081c8dc5"
          },
          {
            "type": "html",
            "text": "\nThe CLI appraoch doesn't need any of this, because the underlying grammar of the CLI has this built in. Even if you had such a weak shell that you couldn't do",
            "id": "724540beb1a0c0dc2f72e74c55d3c933"
          },
          {
            "type": "code",
            "text": "  cvs update && make",
            "id": "53277c782d8ebb00f2dc2dd0ec7a392c"
          },
          {
            "type": "html",
            "text": "\nYou could still use type-ahead to do:",
            "id": "cff075087c27b1bfc429acc650e78bd9"
          },
          {
            "type": "code",
            "text": "  cvs update\n  make",
            "id": "f107c1a05cbb63ebb4ee91cf9bbcf12c"
          },
          {
            "type": "html",
            "text": "\nWhen the first command is complete, the second will run. This would be a fundamentally undesirable behavior in a GUI, because when something doesn't happen immediately, there's a natural tendency to hit the menu/button/keypress again.",
            "id": "808a68a5a8975092c13398c45f04f619"
          },
          {
            "type": "html",
            "text": "<i>This problem is trivially solved, through the use of command objects and a scripting interface. For example, Macintosh users did things like this with [[Apple Script]] or Hypercard. The scripting tool allows the user to create a command object, which understands verbs like \"Do It\" and \"Undo It\". One command object is created for \"CVS Update\", another for \"make\". The two command objects are chained into another command object (yes, they compose). Click \"do it\" and it's done. The CLI interface is \"easier\" only if you have already memorized the shell language.</i>",
            "id": "aeb2bab9b69a081b3e832f80d1c0348c"
          },
          {
            "type": "html",
            "text": "\nI think that reply proves my point. The GUI approach to the use-case \"do foo and then bar\" is to create a new \"command object\" that implements the composition (A lot of newbie OO programmers suffer the same affliction). The CLI approach doesn't need such a \"command object\" to be created via a \"scripting language\" because the interface metaphore is already a script. It doesn't require the composition to be expressed (encapsulated) as a tangible thing because the metaphore is already based on serialization (and there's no additional shell language to learn: you just type the commands and hit the 'return' key at the end of each one). If one wants to reuse the specific sequence multiple times then, of course, in either interface you would create a separate object, script or alias to represent it.",
            "id": "c0483195a04abbc12a7696ef9eefc092"
          },
          {
            "type": "html",
            "text": "<i>\"You just type the commands...\" -- conveniently skipping over the part where you memorize all of them. Then memorize the switches and arguments of each one. Then remember the ones where the arguments go in a different order. Then remember the ones that pipe and the ones that do not. The \"scripting language\" in a decent GUI doesn't need to be memorized or learned, the system just remembers it. Go back and look at [[Apple Script]], in the Macintosh ca 1988.</i>",
            "id": "b7e74761c44c0b63a70f3e547f3fb9de"
          },
          {
            "type": "html",
            "text": "\nYou keep trying to avoid the issue. My initial postulate was that you knew the two commands that you wanted to run, so the question of knowing options, etc. is moot. Whichever interface one is using, creating a script is trivial -- but what if you just want to do \"a then b\" without creating a \"script\"?. My point was that the CLI metaphor is more closely aligned with that concept than is the GUI. That isn't even really a value-judgement: if ad-hoc composition is not a primary value, then it doesn't matter that such scripting is not the defining characteristic of the GUI metaphor.",
            "id": "57d76260efc4dd24e0245b28eb03d5c5"
          },
          {
            "type": "html",
            "text": "<i>Your \"initial postulate\" assumes away the issue. \"Assuming pigs could fly, then ...\" I think you're assuming the outcome of the argument you're trying to make. I don't see this exchange getting anywhere. I made the mistake of thinking you were interested in learning how a GUI addresses a certain class of problems. I'm not interested in perpetuating the GUI vs CLI religious war that has been going on for two decades now.</i>",
            "id": "1134841ae60a0313ecedb434245d1f26"
          },
          {
            "type": "html",
            "text": "\nI think you're right: no light was shed. These wars are of no interest to me either. I tried hard to avoid making any value-statements that might perpetuate such wars but I was obviously unsuccessful, for which I am sorry. Your belief in my aim in my original statement does indeed appear mistaken. I did indeed \"assume away\" the issue you wanted to address (syntax/vocabulary), because that is not the issue that I was trying to explore (grammar). I appologise for my inability to clearly express the thoughts that I was attempting to express.",
            "id": "f39a5d5fed6ff14c77ba883c06b87192"
          },
          {
            "type": "html",
            "text": "<i>\"The GUI mindset\"? \"Grammatically weak\"? I accept your apology, it does appear that you failed to avoid making value statements. If it is \"grammar\" that interests you, then perhaps it might be more constructive for us to explore the question of visual versus lexical grammars -- perhaps a contrast-and-compare or something similar.</i>",
            "id": "900bea112defcb1f6bb5871360d0275a"
          },
          {
            "type": "html",
            "text": "[Regardless of whether <b>he</b> was making value statements, it is possible to <b>objectively</b> say that it is rare for GUIs to support a syntax more complicated than \"ACTION <noun_list>\" or \"NOUN <action_list>\", whereas it is common for CLIs to support more complex syntax. That's not a value judgement, that's a linguistic description...is it ok with you so far? If so, then I, for one, would be interested to hear more about what more complex kinds of visual grammars you are aware of, beyond those common ones.]",
            "id": "c3a825d67f7f5f09ee0ac845858f39df"
          },
          {
            "type": "html",
            "text": " [[Drag And Drop]]:  ACTION <object> <subject>",
            "id": "2eaf9ae87f988d07da7c36932776b524"
          },
          {
            "type": "html",
            "text": " In the [[Mac Osx]] [[Interface Builder]], I've also seen this used to define relations.",
            "id": "361d360ce05c4ff94f4374698fed2f8b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "924e05073a9aaf8864e27bba4ff7d27b"
          },
          {
            "type": "html",
            "text": "\nThe best of GUIs complement and support the best of CLIs, and vice versa. I prefer KDE Konsole because it leaves several shells open in one window, for example, with copy-n-paste between them.",
            "id": "1bed4f79d0c60d00098afc7b886bf6ed"
          },
          {
            "type": "html",
            "text": "\nIn a CLI, you can arrow up and edit your command. You can write long complex commands; writing commands is separate from initiating them. This is a good thing <i>when you decide to use it</i>. In theory, the decision to use one or the other kind should not be imposed upon you. In normal practice, lazy programmers only implement one side of this equation. --[[Phl Ip]]",
            "id": "40a4cfc9982eb5ee75033eb7f1fbe41e"
          },
          {
            "type": "html",
            "text": "\nAbsolutely. And with new utilities like [[Quick Silver]], the lines between GUI and CLI can be blurred, to the benefit of both. -- [[Robert Daeley]]",
            "id": "6bf62782a93640a66410e883bfb4206b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "924e05073a9aaf8864e27bba4ff7d27b"
          },
          {
            "type": "html",
            "text": "<b>Touch-screen versus Mouse - Merger Prediction</b>",
            "id": "8b44a63e8632d59d548afd13d5714f23"
          },
          {
            "type": "html",
            "text": "\nTablets and smartphones are making touch interfaces more common and popular. It's often presented as an either/or run-off between the mouse and the finger (touch-based). But I predict in the future that an office interface will have both kinds of interfaces and that a tablet will replace the mouse. One will sometimes use (look at) the tablet directly, and other times use it like a mouse, controlling the cursor for the upright screen, similar to the touch-pad on some laptops, but with greater size and movement room because a tablet is a larger surface. The upright screen will sometimes mirror the tablet screen, and sometimes be a 2nd screen which has different content than the tablet. One will switch the method or mode as needed.  In some cases, the \"tool bar\" may only appear on the tablet, but larger, such that the main screen is freed up to show the document or content.",
            "id": "77493f7751706a47f377a553158a286e"
          },
          {
            "type": "html",
            "text": "\nThe tablet may have to better recognize multiple fingers and identify the pointing finger (or user-chosen finger choice), otherwise, holding all but one finger up all day is taxing on the hand. One will also typically grab the \"ex-mouse\" tablet for meetings so that they have their full (or virtual) desktop with them for reference or quick demos.  ",
            "id": "4b2a8eee87d56dc6a93efdfa6e458c0d"
          },
          {
            "type": "html",
            "text": "--top, Jan. 2013",
            "id": "9ec91891d273a811dfc4849348085ee9"
          },
          {
            "type": "html",
            "text": "<i>and you will take the tablet home and use it as a remote control for your television set, and your boss will pop up on the television set and tweet to you on the tablet that you are watching the same tv show</i>",
            "id": "0cb7be992325f08dc37a6ba3f2f67239"
          },
          {
            "type": "html",
            "text": " This is already sort of the case with Apple's Magic [[Track Pad]].",
            "id": "2834cf803711034006fc448d8e9996a0"
          },
          {
            "type": "html",
            "text": " <i>[[Track Pad]] has no screen. A tablet is basically a [[Track Pad]] with a screen. But it helps illustrate the general idea, so thanks for the tip.</i>",
            "id": "09fee898dba7f9384f94bc9b9b08aad8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "924e05073a9aaf8864e27bba4ff7d27b"
          },
          {
            "type": "html",
            "text": "\nGripe: Don't include default screen-savers or wall-paper with pretty flowers or birds or whatnot. Most guys hate that, especially if it takes a while to figure out where to change it. Find something more generic that is less likely to offend somebody.",
            "id": "fa620a946abaf32b54a132d3965aaa89"
          },
          {
            "type": "html",
            "text": "<i>You're offended by flowers and birds??? And you think \"most guys\" are offended too? *boggle*  Speaking as a guy, I've never noticed.  What <b>aren't</b> you offended by?</i>",
            "id": "e6a82e19f5e581b80403991ba1d134a1"
          },
          {
            "type": "html",
            "text": "\nHere is your new screen-saver. Call it \"God handing out your report card\".",
            "id": "9a55a4de35f11d2d234d640231b83b3c"
          },
          {
            "type": "image",
            "url": "http://apod.nasa.gov/apod/image/0306/carina_hst.jpg",
            "text": "apod.nasa.gov",
            "id": "0c172536a8b94ce8dc21bc91fafe9827"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "a798b0773526bc9bb98f96ded86be9b6"
          },
          {
            "type": "html",
            "text": "<i>That's brilliant.  For the next twenty minutes, I'm going to respect you a little.</i>",
            "id": "7d52b9290b263c8542d23feeade3d56e"
          },
          {
            "type": "html",
            "text": "[Awesome pic. But I'm a bit lost on how it's on-topic.]",
            "id": "b75dd838b367a4616c16290820ef1700"
          },
          {
            "type": "html",
            "text": "\nIt's evidence that God's UI is gesture-based.",
            "id": "5a0e54fe25debecd97067bccd3de6356"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "924e05073a9aaf8864e27bba4ff7d27b"
          },
          {
            "type": "html",
            "text": "[[Category User Interface]]",
            "id": "525d8093840c4b866054fb83aa9b73c8"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?GraphicalUserInterface c2.com]",
            "id": "0d277c2d80d256a6f2ed58f544976a4c"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626126799785
    },
    {
      "type": "fork",
      "date": 1626161134295
    }
  ]
}