{
  "title": "Language Constructs for Context-Oriented Programming",
  "story": [
    {
      "type": "markdown",
      "id": "c78bd9a64bc7aa75",
      "text": "“Language constructs for context-oriented programming | Proceedings of the 2005 symposium on Dynamic languages.” https://dl.acm.org/doi/abs/10.1145/1146841.1146842 (accessed Oct. 08, 2021).\n\n\n"
    },
    {
      "type": "markdown",
      "id": "bcf4afed21b49018",
      "text": "> **Abstract**. ContextL is an extension to the Common Lisp Object System that allows for Context-oriented Programming. It provides means to associate partial class and method definitions with layers and to activate and deactivate such layers in the control flow of a running program. When a layer is activated, the partial definitions become part of the program until this layer is deactivated. This has the effect that the behavior of a program can be modified according to the context of its use without the need to mention such context dependencies in the affected base program. We illustrate these ideas by providing different UI views on the same object while, at the same time, keeping the conceptual simplicity of object-oriented programming that objects know by themselves how to behave, in our case how to display themselves. These seemingly contradictory goals can be achieved by separating class definitions into distinct layers instead of factoring out the display code into different classes.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Language Constructs for Context-Oriented Programming",
        "story": []
      },
      "date": 1633670968381
    },
    {
      "item": {
        "type": "factory",
        "id": "c78bd9a64bc7aa75"
      },
      "id": "c78bd9a64bc7aa75",
      "type": "add",
      "date": 1633670985578
    },
    {
      "type": "edit",
      "id": "c78bd9a64bc7aa75",
      "item": {
        "type": "markdown",
        "id": "c78bd9a64bc7aa75",
        "text": "[1]“Language constructs for context-oriented programming | Proceedings of the 2005 symposium on Dynamic languages.” https://dl.acm.org/doi/abs/10.1145/1146841.1146842 (accessed Oct. 08, 2021).\n\n> "
      },
      "date": 1633670991956
    },
    {
      "type": "edit",
      "id": "c78bd9a64bc7aa75",
      "item": {
        "type": "markdown",
        "id": "c78bd9a64bc7aa75",
        "text": "[1]“Language constructs for context-oriented programming | Proceedings of the 2005 symposium on Dynamic languages.” https://dl.acm.org/doi/abs/10.1145/1146841.1146842 (accessed Oct. 08, 2021).\n\n\n"
      },
      "date": 1633671008799
    },
    {
      "type": "add",
      "id": "bcf4afed21b49018",
      "item": {
        "type": "markdown",
        "id": "bcf4afed21b49018",
        "text": "> **Abstract**. ContextL is an extension to the Common Lisp Object System that allows for Context-oriented Programming. It provides means to associate partial class and method definitions with layers and to activate and deactivate such layers in the control flow of a running program. When a layer is activated, the partial definitions become part of the program until this layer is deactivated. This has the effect that the behavior of a program can be modified according to the context of its use without the need to mention such context dependencies in the affected base program. We illustrate these ideas by providing different UI views on the same object while, at the same time, keeping the conceptual simplicity of object-oriented programming that objects know by themselves how to behave, in our case how to display themselves. These seemingly contradictory goals can be achieved by separating class definitions into distinct layers instead of factoring out the display code into different classes.\n"
      },
      "after": "c78bd9a64bc7aa75",
      "date": 1633671020477
    },
    {
      "type": "edit",
      "id": "c78bd9a64bc7aa75",
      "item": {
        "type": "markdown",
        "id": "c78bd9a64bc7aa75",
        "text": "“Language constructs for context-oriented programming | Proceedings of the 2005 symposium on Dynamic languages.” https://dl.acm.org/doi/abs/10.1145/1146841.1146842 (accessed Oct. 08, 2021).\n\n\n"
      },
      "date": 1633671062619
    }
  ]
}