{
  "title": "Rewriting",
  "story": [
    {
      "type": "markdown",
      "id": "4c1f2e505527529e",
      "text": "- [[Journal Rewriting]]\n- [[Forking is a Citation]]\n\nSee also\n- [[Functional Decomposition]]\n- [[Rubific]]\n> See [[Pegasm]] where I used bytecode rewriting to insert similar trace logic."
    },
    {
      "type": "pagefold",
      "id": "86e77de9b63ec6ec",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "6689af7fd8426667",
      "text": "In mathematics, computer science, and logic, rewriting covers a wide range of methods of replacing subterms of a formula with other terms. Such methods may be achieved by rewriting systems (also known as rewrite systems, rewrite engines, or reduction systems). In their most basic form, they consist of a set of objects, plus relations on how to transform those objects. [https://en.wikipedia.org/wiki/Rewriting wikipedia]\n\nRewriting can be non-deterministic. One rule to rewrite a term could be applied in many different ways to that term, or more than one rule could be applicable. Rewriting systems then do not provide an algorithm for changing one term to another, but a set of possible rule applications. When combined with an appropriate algorithm, however, rewrite systems can be viewed as computer programs, and several theorem provers and declarative programming languages are based on term rewriting. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Rewriting",
        "story": []
      },
      "date": 1627976020476
    },
    {
      "item": {
        "type": "factory",
        "id": "4c1f2e505527529e"
      },
      "id": "4c1f2e505527529e",
      "type": "add",
      "date": 1627976022214
    },
    {
      "type": "edit",
      "id": "4c1f2e505527529e",
      "item": {
        "type": "markdown",
        "id": "4c1f2e505527529e",
        "text": "- [[Journal Rewriting]]"
      },
      "date": 1627976029399
    },
    {
      "type": "edit",
      "id": "4c1f2e505527529e",
      "item": {
        "type": "markdown",
        "id": "4c1f2e505527529e",
        "text": "- [[Journal Rewriting]]\n\nSee also\n- [[Functional Decomposition]]"
      },
      "date": 1627976075699
    },
    {
      "type": "edit",
      "id": "4c1f2e505527529e",
      "item": {
        "type": "markdown",
        "id": "4c1f2e505527529e",
        "text": "- [[Journal Rewriting]]\n\nSee also\n- [[Functional Decomposition]]\n- [[Rubific]]"
      },
      "date": 1627976120636
    },
    {
      "type": "edit",
      "id": "4c1f2e505527529e",
      "item": {
        "type": "markdown",
        "id": "4c1f2e505527529e",
        "text": "- [[Journal Rewriting]]\n\nSee also\n- [[Functional Decomposition]]\n- [[Rubific]]\n> See [[Pegasm]] where I used bytecode rewriting to insert similar trace logic."
      },
      "date": 1627976130825
    },
    {
      "type": "edit",
      "id": "4c1f2e505527529e",
      "item": {
        "type": "markdown",
        "id": "4c1f2e505527529e",
        "text": "- [[Journal Rewriting]]\n- [[Forking is a Citation]]\n\nSee also\n- [[Functional Decomposition]]\n- [[Rubific]]\n> See [[Pegasm]] where I used bytecode rewriting to insert similar trace logic."
      },
      "date": 1627976189934
    },
    {
      "item": {
        "type": "factory",
        "id": "86e77de9b63ec6ec"
      },
      "id": "86e77de9b63ec6ec",
      "type": "add",
      "after": "4c1f2e505527529e",
      "date": 1661331128716
    },
    {
      "type": "edit",
      "id": "86e77de9b63ec6ec",
      "item": {
        "type": "pagefold",
        "id": "86e77de9b63ec6ec",
        "text": "~"
      },
      "date": 1661331133456
    },
    {
      "item": {
        "type": "factory",
        "id": "6689af7fd8426667"
      },
      "id": "6689af7fd8426667",
      "type": "add",
      "after": "86e77de9b63ec6ec",
      "date": 1661331135059
    },
    {
      "type": "edit",
      "id": "6689af7fd8426667",
      "item": {
        "type": "paragraph",
        "id": "6689af7fd8426667",
        "text": "In mathematics, computer science, and logic, rewriting covers a wide range of methods of replacing subterms of a formula with other terms. Such methods may be achieved by rewriting systems (also known as rewrite systems, rewrite engines,[1][2] or reduction systems). In their most basic form, they consist of a set of objects, plus relations on how to transform those objects.\n\nRewriting can be non-deterministic. One rule to rewrite a term could be applied in many different ways to that term, or more than one rule could be applicable. Rewriting systems then do not provide an algorithm for changing one term to another, but a set of possible rule applications. When combined with an appropriate algorithm, however, rewrite systems can be viewed as computer programs, and several theorem provers[3] and declarative programming languages are based on term rewriting.[4][5] "
      },
      "date": 1661331136935
    },
    {
      "type": "edit",
      "id": "6689af7fd8426667",
      "item": {
        "type": "paragraph",
        "id": "6689af7fd8426667",
        "text": "In mathematics, computer science, and logic, rewriting covers a wide range of methods of replacing subterms of a formula with other terms. Such methods may be achieved by rewriting systems (also known as rewrite systems, rewrite engines, or reduction systems). In their most basic form, they consist of a set of objects, plus relations on how to transform those objects.\n\nRewriting can be non-deterministic. One rule to rewrite a term could be applied in many different ways to that term, or more than one rule could be applicable. Rewriting systems then do not provide an algorithm for changing one term to another, but a set of possible rule applications. When combined with an appropriate algorithm, however, rewrite systems can be viewed as computer programs, and several theorem provers[3] and declarative programming languages are based on term rewriting. ["
      },
      "date": 1661331167342
    },
    {
      "type": "edit",
      "id": "6689af7fd8426667",
      "item": {
        "type": "paragraph",
        "id": "6689af7fd8426667",
        "text": "In mathematics, computer science, and logic, rewriting covers a wide range of methods of replacing subterms of a formula with other terms. Such methods may be achieved by rewriting systems (also known as rewrite systems, rewrite engines, or reduction systems). In their most basic form, they consist of a set of objects, plus relations on how to transform those objects.\n\nRewriting can be non-deterministic. One rule to rewrite a term could be applied in many different ways to that term, or more than one rule could be applicable. Rewriting systems then do not provide an algorithm for changing one term to another, but a set of possible rule applications. When combined with an appropriate algorithm, however, rewrite systems can be viewed as computer programs, and several theorem provers[3] and declarative programming languages are based on term rewriting. [https://en.wikipedia.org/wiki/Rewriting wikipedia]"
      },
      "date": 1661331181827
    },
    {
      "type": "edit",
      "id": "6689af7fd8426667",
      "item": {
        "type": "paragraph",
        "id": "6689af7fd8426667",
        "text": "In mathematics, computer science, and logic, rewriting covers a wide range of methods of replacing subterms of a formula with other terms. Such methods may be achieved by rewriting systems (also known as rewrite systems, rewrite engines, or reduction systems). In their most basic form, they consist of a set of objects, plus relations on how to transform those objects. [https://en.wikipedia.org/wiki/Rewriting wikipedia]\n\nRewriting can be non-deterministic. One rule to rewrite a term could be applied in many different ways to that term, or more than one rule could be applicable. Rewriting systems then do not provide an algorithm for changing one term to another, but a set of possible rule applications. When combined with an appropriate algorithm, however, rewrite systems can be viewed as computer programs, and several theorem provers[3] and declarative programming languages are based on term rewriting. "
      },
      "date": 1661331192346
    },
    {
      "type": "edit",
      "id": "6689af7fd8426667",
      "item": {
        "type": "paragraph",
        "id": "6689af7fd8426667",
        "text": "In mathematics, computer science, and logic, rewriting covers a wide range of methods of replacing subterms of a formula with other terms. Such methods may be achieved by rewriting systems (also known as rewrite systems, rewrite engines, or reduction systems). In their most basic form, they consist of a set of objects, plus relations on how to transform those objects. [https://en.wikipedia.org/wiki/Rewriting wikipedia]\n\nRewriting can be non-deterministic. One rule to rewrite a term could be applied in many different ways to that term, or more than one rule could be applicable. Rewriting systems then do not provide an algorithm for changing one term to another, but a set of possible rule applications. When combined with an appropriate algorithm, however, rewrite systems can be viewed as computer programs, and several theorem provers and declarative programming languages are based on term rewriting. "
      },
      "date": 1661331220067
    }
  ]
}