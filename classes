{
  "title": "Classes",
  "story": [
    {
      "type": "paragraph",
      "id": "d45a7d0fab561161",
      "text": "How do you create objects? In some languages you have to build them one at a time, but it's more convenient to have a mechanism that produces them for you. This mechanism is called a class. "
    },
    {
      "type": "paragraph",
      "id": "405ccabef37bae7c",
      "text": "You can think of a class as a factory that can produce programming objects. Each factory makes just one kind of object, or product. For example, we could have a BankAccount class, from which we produce bank accounts, a Menu class, from which we produce menus for a user interface, or a Dictionary class, from which we produce objects that behave like real dictionaries. In Smalltalk, heres how you might use a Dictionary dass: "
    },
    {
      "type": "code",
      "id": "4b4a4824597891e1",
      "text": "Dictionary new "
    },
    {
      "type": "paragraph",
      "id": "e75c264c5a059d7c",
      "text": "Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind of dictionary you liked. "
    },
    {
      "type": "paragraph",
      "id": "45faa9c127a74069",
      "text": "Realistically, if we want to continue to use this dictionary object, â€¦"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Classes",
        "story": []
      },
      "date": 1654631047891
    },
    {
      "item": {
        "type": "factory",
        "id": "d45a7d0fab561161"
      },
      "id": "d45a7d0fab561161",
      "type": "add",
      "date": 1654631100487
    },
    {
      "type": "edit",
      "id": "d45a7d0fab561161",
      "item": {
        "type": "paragraph",
        "id": "d45a7d0fab561161",
        "text": "How do you create objects? In some languages you have to build them one ar a time, but it s more convenient to have a mechanism that produces them for you. This mechanism is called a class. You can think of a class as a factory that can produce programming objects. Each factory makes just one kind of object, or product. For example, we could have a BankAccount class, from which we produce bank accounts, a Menu class, from which we produce menus for a user interface, or a Dictionary class, from which we produce objects that behave like real dictionaries. In Smalltalk, heres how you might use a Dictionary dass: Dictionary new Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind ofdictionary you liked. Realistically, ifwe want to continue to use this dictionary obje"
      },
      "date": 1654631108990
    },
    {
      "type": "edit",
      "id": "d45a7d0fab561161",
      "item": {
        "type": "paragraph",
        "id": "d45a7d0fab561161",
        "text": "How do you create objects? In some languages you have to build them one at a time, but it s more convenient to have a mechanism that produces them for you. This mechanism is called a class. You can think of a class as a factory that can produce programming objects. Each factory makes just one kind of object, or product. For example, we could have a BankAccount class, from which we produce bank accounts, a Menu class, from which we produce menus for a user interface, or a Dictionary class, from which we produce objects that behave like real dictionaries. In Smalltalk, heres how you might use a Dictionary dass: Dictionary new Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind ofdictionary you liked. Realistically, ifwe want to continue to use this dictionary obje"
      },
      "date": 1654631129331
    },
    {
      "type": "edit",
      "id": "d45a7d0fab561161",
      "item": {
        "type": "paragraph",
        "id": "d45a7d0fab561161",
        "text": "How do you create objects? In some languages you have to build them one at a time, but it's more convenient to have a mechanism that produces them for you. This mechanism is called a class. You can think of a class as a factory that can produce programming objects. Each factory makes just one kind of object, or product. For example, we could have a BankAccount class, from which we produce bank accounts, a Menu class, from which we produce menus for a user interface, or a Dictionary class, from which we produce objects that behave like real dictionaries. In Smalltalk, heres how you might use a Dictionary dass: Dictionary new Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind ofdictionary you liked. Realistically, ifwe want to continue to use this dictionary obje"
      },
      "date": 1654631150221
    },
    {
      "type": "edit",
      "id": "d45a7d0fab561161",
      "item": {
        "type": "paragraph",
        "id": "d45a7d0fab561161",
        "text": "How do you create objects? In some languages you have to build them one at a time, but it's more convenient to have a mechanism that produces them for you. This mechanism is called a class. "
      },
      "date": 1654631162587
    },
    {
      "type": "add",
      "id": "405ccabef37bae7c",
      "item": {
        "type": "paragraph",
        "id": "405ccabef37bae7c",
        "text": "You can think of a class as a factory that can produce programming objects. Each factory makes just one kind of object, or product. For example, we could have a BankAccount class, from which we produce bank accounts, a Menu class, from which we produce menus for a user interface, or a Dictionary class, from which we produce objects that behave like real dictionaries. In Smalltalk, heres how you might use a Dictionary dass: "
      },
      "after": "d45a7d0fab561161",
      "date": 1654631167997
    },
    {
      "type": "add",
      "id": "972ef1cc37593183",
      "item": {
        "type": "paragraph",
        "id": "972ef1cc37593183",
        "text": "Dictionary new "
      },
      "after": "405ccabef37bae7c",
      "date": 1654631171198
    },
    {
      "type": "add",
      "id": "e75c264c5a059d7c",
      "item": {
        "type": "paragraph",
        "id": "e75c264c5a059d7c",
        "text": "Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind ofdictionary you liked. Realistically, ifwe want to continue to use this dictionary obje"
      },
      "after": "972ef1cc37593183",
      "date": 1654631173381
    },
    {
      "item": {
        "type": "factory",
        "id": "4b4a4824597891e1"
      },
      "id": "4b4a4824597891e1",
      "type": "add",
      "after": "e75c264c5a059d7c",
      "date": 1654631178616
    },
    {
      "id": "4b4a4824597891e1",
      "type": "move",
      "order": [
        "d45a7d0fab561161",
        "405ccabef37bae7c",
        "972ef1cc37593183",
        "4b4a4824597891e1",
        "e75c264c5a059d7c"
      ],
      "date": 1654631180807
    },
    {
      "type": "remove",
      "id": "972ef1cc37593183",
      "date": 1654631184952
    },
    {
      "type": "edit",
      "id": "4b4a4824597891e1",
      "item": {
        "type": "code",
        "id": "4b4a4824597891e1",
        "text": "Dictionary new "
      },
      "date": 1654631186663
    },
    {
      "type": "edit",
      "id": "e75c264c5a059d7c",
      "item": {
        "type": "paragraph",
        "id": "e75c264c5a059d7c",
        "text": "Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind of dictionary you liked. Realistically, ifwe want to continue to use this dictionary obje"
      },
      "date": 1654631212463
    },
    {
      "type": "edit",
      "id": "e75c264c5a059d7c",
      "item": {
        "type": "paragraph",
        "id": "e75c264c5a059d7c",
        "text": "Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind of dictionary you liked. Realistically, if we want to continue to use this dictionary obje"
      },
      "date": 1654631238677
    },
    {
      "type": "edit",
      "id": "e75c264c5a059d7c",
      "item": {
        "type": "paragraph",
        "id": "e75c264c5a059d7c",
        "text": "Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind of dictionary you liked. Realistically, if we want to continue to use this dictionary object"
      },
      "date": 1654631249860
    },
    {
      "type": "edit",
      "id": "e75c264c5a059d7c",
      "item": {
        "type": "paragraph",
        "id": "e75c264c5a059d7c",
        "text": "Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind of dictionary you liked. Realistically, if we want to continue to use this dictionary object, â€¦"
      },
      "date": 1654631265049
    },
    {
      "type": "edit",
      "id": "e75c264c5a059d7c",
      "item": {
        "type": "paragraph",
        "id": "e75c264c5a059d7c",
        "text": "Left to right. Dictionary receives the message named new. Because Dictionary is a class or factory, it responds to new by creating a brand-new dictionary object. 'What happens to this object from now on is up to you. Being a dictionary, it may have operations like add: that would permit you to add a new entry to it. You could gradually add to it and make it into any kind of dictionary you liked. "
      },
      "date": 1654631345832
    },
    {
      "type": "add",
      "id": "45faa9c127a74069",
      "item": {
        "type": "paragraph",
        "id": "45faa9c127a74069",
        "text": "Realistically, if we want to continue to use this dictionary object, â€¦"
      },
      "after": "e75c264c5a059d7c",
      "date": 1654631346527
    }
  ]
}