{
  "title": "Tree Arranged on Pages",
  "story": [
    {
      "type": "paragraph",
      "id": "d1867df4931a57d0",
      "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. (TAOCP, v. 3, p. 499; 6.2.4 [[Multiway Trees]], p. 481 ff.)"
    },
    {
      "type": "paragraph",
      "id": "ffa883e1d08deabf",
      "text": "It consists of a header and N ‚àí1 nodes [‚áê [[GetChild]], Figure 3, the search result is a value ranging from 0 to n-1], where the nodes contain several fields:"
    },
    {
      "type": "paragraph",
      "id": "36a9b6917261a24a",
      "text": "KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of ‚Äú(JACK)‚Äù the node would contain the number 24 (which indicates the starting place of ‚ÄúJACK BUILT?‚Äù in the text string)."
    },
    {
      "type": "paragraph",
      "id": "26afba64ec0ae49e",
      "text": "LLINK and RLINK, pointers within the tree. These fields must be at least lg N bits long."
    },
    {
      "type": "paragraph",
      "id": "b4d1d9260a0732f5",
      "text": "LTAG and RTAG, one-bit fields that tell whether or not LLINK and RLINK, respectively, are pointers to children or to ancestors of the node. The dotted lines in Fig. 33 correspond to pointers whose TAG bit is 1."
    },
    {
      "type": "paragraph",
      "id": "c2587b0bf89bda78",
      "text": "SKIP, a number that tells how many bits to skip when searching, as explained below. This field should be large enough to hold the largest number k such that all keys with prefix œÉ agree in the next k bits following œÉ, for some string œÉ that is a prefix of at least two different keys; in practice, we may usually assume that k isn‚Äôt too large, and an error indication can be given if the size of the SKIP field is exceeded. The SKIP fields are shown as numbers within each non-header node of Fig. 33."
    },
    {
      "type": "paragraph",
      "id": "32e859c2f38cd4c1",
      "text": "The header contains only KEY, LLINK, and LTAG fields."
    },
    {
      "type": "pagefold",
      "id": "3fc0cd2ccae08029",
      "text": "üî∫"
    },
    {
      "type": "reference",
      "id": "c60d5902fbe50c6d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "patricia",
      "title": "Patricia",
      "text": "Practical Algorithm To Retrieve Information Coded In Alphanumeric‚Äôs basic idea is to build a binary [[Trie]], but to avoid one-way branching by including in each node the number of bits to skip over before making the next test. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Tree Arranged on Pages",
        "story": []
      },
      "date": 1695051664562
    },
    {
      "id": "d1867df4931a57d0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. It consists of a header and N ‚àí1 nodes, where the nodes contain several fields:"
      },
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695051678066
    },
    {
      "id": "36a9b6917261a24a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "36a9b6917261a24a",
        "text": "KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of ‚Äú(JACK)‚Äù the node would contain the number 24 (which indicates the starting place of ‚ÄúJACK BUILT?‚Äù in the text string)."
      },
      "after": "d1867df4931a57d0",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695051695334
    },
    {
      "id": "26afba64ec0ae49e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "26afba64ec0ae49e",
        "text": "LLINK and RLINK, pointers within the tree. These fields must be at least lg N bits long."
      },
      "after": "36a9b6917261a24a",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695051700331
    },
    {
      "id": "b4d1d9260a0732f5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b4d1d9260a0732f5",
        "text": "LTAG and RTAG, one-bit fields that tell whether or not LLINK and RLINK, respectively, are pointers to children or to ancestors of the node. The dotted lines in Fig. 33 correspond to pointers whose TAG bit is 1."
      },
      "after": "26afba64ec0ae49e",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695051703665
    },
    {
      "id": "c2587b0bf89bda78",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c2587b0bf89bda78",
        "text": "SKIP, a number that tells how many bits to skip when searching, as explained below. This field should be large enough to hold the largest number k such that all keys with prefix œÉ agree in the next k bits following œÉ, for some string œÉ that is a prefix of at least two different keys; in practice, we may usually assume that k isn‚Äôt too large, and an error indication can be given if the size of the SKIP field is exceeded. The SKIP fields are shown as numbers within each non-header node of Fig. 33."
      },
      "after": "b4d1d9260a0732f5",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695051709948
    },
    {
      "id": "32e859c2f38cd4c1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "32e859c2f38cd4c1",
        "text": "The header contains only KEY, LLINK, and LTAG fields."
      },
      "after": "c2587b0bf89bda78",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695051714114
    },
    {
      "item": {
        "type": "factory",
        "id": "d39b8ea595dd8073"
      },
      "id": "d39b8ea595dd8073",
      "type": "add",
      "after": "32e859c2f38cd4c1",
      "date": 1695051737697
    },
    {
      "id": "c60d5902fbe50c6d",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "c60d5902fbe50c6d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "patricia",
        "title": "Patricia",
        "text": "Practical Algorithm To Retrieve Information Coded In Alphanumeric‚Äôs basic idea is to build a binary [[Trie]], but to avoid one-way branching by including in each node the number of bits to skip over before making the next test. "
      },
      "after": "d39b8ea595dd8073",
      "attribution": {
        "page": "GetChild"
      },
      "date": 1695051745124
    },
    {
      "id": "c2587b0bf89bda78",
      "type": "move",
      "order": [
        "d1867df4931a57d0",
        "36a9b6917261a24a",
        "26afba64ec0ae49e",
        "b4d1d9260a0732f5",
        "32e859c2f38cd4c1",
        "d39b8ea595dd8073",
        "c60d5902fbe50c6d",
        "c2587b0bf89bda78"
      ],
      "date": 1695051750706
    },
    {
      "id": "c2587b0bf89bda78",
      "type": "move",
      "order": [
        "d1867df4931a57d0",
        "36a9b6917261a24a",
        "26afba64ec0ae49e",
        "b4d1d9260a0732f5",
        "c2587b0bf89bda78",
        "32e859c2f38cd4c1",
        "d39b8ea595dd8073",
        "c60d5902fbe50c6d"
      ],
      "date": 1695051783871
    },
    {
      "type": "edit",
      "id": "d1867df4931a57d0",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. (TAOCP, v. 3, p. 499)"
      },
      "date": 1695051844590
    },
    {
      "type": "add",
      "id": "ffa883e1d08deabf",
      "item": {
        "type": "paragraph",
        "id": "ffa883e1d08deabf",
        "text": "It consists of a header and N ‚àí1 nodes, where the nodes contain several fields:"
      },
      "after": "d1867df4931a57d0",
      "date": 1695051845283
    },
    {
      "id": "3fc0cd2ccae08029",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "3fc0cd2ccae08029",
        "text": "üî∫"
      },
      "after": "32e859c2f38cd4c1",
      "attribution": {
        "page": "GetChild"
      },
      "date": 1695051860834
    },
    {
      "type": "remove",
      "id": "d39b8ea595dd8073",
      "date": 1695051863299
    },
    {
      "type": "edit",
      "id": "d1867df4931a57d0",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. (TAOCP, v. 3, p. 499 and 6.2.4 Multiway Trees, p. 481 ff.)"
      },
      "date": 1695051998466
    },
    {
      "type": "edit",
      "id": "d1867df4931a57d0",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. (TAOCP, v. 3, p. 499 and 6.2.4 [[Multiway Trees]], p. 481 ff.)"
      },
      "date": 1695052036817
    },
    {
      "type": "edit",
      "id": "ffa883e1d08deabf",
      "item": {
        "type": "paragraph",
        "id": "ffa883e1d08deabf",
        "text": "It consists of a header and N ‚àí1 nodes, where the nodes contain several fields: [‚áê [[GetChild]]"
      },
      "date": 1695052086617
    },
    {
      "type": "edit",
      "id": "ffa883e1d08deabf",
      "item": {
        "type": "paragraph",
        "id": "ffa883e1d08deabf",
        "text": "It consists of a header and N ‚àí1 nodes, where the nodes contain several fields: [‚áê [[GetChild]], Figure 3]"
      },
      "date": 1695052112733
    },
    {
      "type": "edit",
      "id": "ffa883e1d08deabf",
      "item": {
        "type": "paragraph",
        "id": "ffa883e1d08deabf",
        "text": "It consists of a header and N ‚àí1 nodes, where the nodes contain several fields: [‚áê [[GetChild]], Figure 3, the search result is a value ranging from 0 to n-1 ‚Ä¶]"
      },
      "date": 1695052142663
    },
    {
      "type": "edit",
      "id": "ffa883e1d08deabf",
      "item": {
        "type": "paragraph",
        "id": "ffa883e1d08deabf",
        "text": "It consists of a header and N ‚àí1 nodes, where the nodes contain several fields: [‚áê [[GetChild]], Figure 3, the search result is a value ranging from 0 to n-1]"
      },
      "date": 1695052150569
    },
    {
      "type": "edit",
      "id": "ffa883e1d08deabf",
      "item": {
        "type": "paragraph",
        "id": "ffa883e1d08deabf",
        "text": "It consists of a header and N ‚àí1 nodes [‚áê [[GetChild]], Figure 3, the search result is a value ranging from 0 to n-1], where the nodes contain several fields:"
      },
      "date": 1695052229614
    },
    {
      "type": "edit",
      "id": "d1867df4931a57d0",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. (TAOCP, v. 3, p. 499; and 6.2.4 [[Multiway Trees]], p. 481 ff.)"
      },
      "date": 1695052651036
    },
    {
      "type": "edit",
      "id": "d1867df4931a57d0",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. (TAOCP, v. 3, p. 499; 6.2.4 [[Multiway Trees]], p. 481 ff.)"
      },
      "date": 1695052666331
    }
  ]
}