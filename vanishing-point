{
  "title": "Vanishing Point",
  "story": [
    {
      "type": "paragraph",
      "id": "f750ed993a1de44e",
      "text": "In 2003 I re-created an animation of a vanishing point in javascript and SVG.  The original animation was built with AutoCAD 10 and custom AUTOLISP scripts I created in the fall of 1990.  Happily amazed that 15 years later this code runs unchanged in modern browsers. [http://dobbse.net/thinair/2003/12/vanishing-point.html blog]"
    },
    {
      "type": "html",
      "id": "3fefb1660af22449",
      "text": "<embed src=\"https://dobbse.net/reflection/perspective/vp.svg\" />"
    },
    {
      "type": "frame",
      "id": "d67f99c6a5a47458",
      "text": "//wiki.ralfbarkow.ch/assets/pages/changing-frames/vp.svg\nHEIGHT 400\nClick the Go and Stop buttons"
    },
    {
      "type": "markdown",
      "id": "c99d55a8906e6d20",
      "text": "- [ ] TODO: transport the full 2003 blog entry into this page"
    },
    {
      "type": "paragraph",
      "id": "4d08d8228e2c25a1",
      "text": "As it turns out AutoCAD and AutoLISP made a perfectly capable wire-frame animation tool, at least for a motivated programmer.  Really, AutoLISP chose me, as AutoCAD was the only illustration software available to me at the time and I really wanted to do animation.  Even in 1990, AutoCAD 10 was one generation old.  It was my first painful experience with bit rot."
    },
    {
      "type": "paragraph",
      "id": "f2959467f61508e6",
      "text": "See [[Bit-rot and Red Queen Effect]]"
    },
    {
      "type": "paragraph",
      "id": "6cf94d79f06e467b",
      "text": "When I created the javascript variation, I was reading Paul Graham's book On Lisp and worked up my own examples to gradually grow this animation language from the ground up. What follows is almost like a little javascript varient on scheme. The createAnimation function interprets the arrays applying the function at index 0 to the remaining arguments in the array. I still enjoy reading this block of code, though perhaps because the mental model of how all this works remains well preserved in memory somehow."
    },
    {
      "type": "code",
      "id": "54aac45b4f053b97",
      "text": "anim = createAnimation(\n  [runEach,\n    [zeroEach,\n      groundlineR,\n      groundlineL,\n      projectedLineR,\n      projectedLineL],\n    [function(point){\n      point.hide();\n      refreshEach(point);\n     }, vanishingPoint],\n    [function(line){\n      line.moveEnd(groundlineR.start)\n     },projectorR],\n    [function(line){\n      line.moveEnd(groundlineL.start)\n     },projectorL],\n    [showAndRefreshEach,\n      projectorR,\n      groundlineR,\n      projectorL,\n      groundlineL,\n      projectedLineR,\n      projectedLineL],\n  1],\n\n  [runEach,\n    [createTranslator(\n      groundlineR.start,\n      groundlineR.end,\n      frameCount\n     ),\n      projectorR.end,\n      projectorL.end,\n      groundlineR.end,\n      groundlineL.end],\n    [createIntersector(\n      projectorR,\n      new Line(projectedLineR.id)\n     ),\n      projectedLineR.end],\n    [createIntersector(\n      projectorL,\n      new Line(projectedLineL.id)\n     ),\n      projectedLineL.end],\n    [refreshEach].concat(refreshLines),\n  frameCount],\n\n  [runEach,\n    [createIntersector(\n      projectedLineR,\n      projectedLineL\n     ),\n      projectedLineR.end,projectedLineL.end],\n    [function(line){\n      line.moveEnd([1193.374,-93.990])\n     },\n      projectorR,projectorL],\n    [function(line){line.hide()},projectorL],\n    [refreshEach].concat(refreshLines),\n    [function(p){\n      p.radius = 3;\n      showAndRefreshEach(p)\n     },vanishingPoint],\n  1]\n\n);"
    },
    {
      "type": "pagefold",
      "id": "b8ff9b7651f6ff6d",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "a8dc367ae8afbaaf",
      "text": "This is a reconstruction of the animation that led to five months of working with Dr. Kim Veltman in Italy and some of the richest learning experiences of my life."
    },
    {
      "type": "paragraph",
      "id": "a3307510b78abba6",
      "text": "In linear perspective, when parallel lines are projected onto a picture plane [1], the resulting projections [2] will intersect at a vanishing point. For lines parallel to the ground, the vanishing points will appear on the horizon line [3]. When drawing objects in perspective, the artist usually begins by drawing the horizon line and a couple vanishing points. Construction lines are drawn from those vanishing points to help the artist correctly locate the edges of buildings or other objects. Perspective drawings and paintings are sometimes classified by the number of vanishing points used in the construction."
    },
    {
      "type": "paragraph",
      "id": "3e6e9a2d19e4a39c",
      "text": "I don't remember the exact definition of a vanishing point from Dr. Veltman's collection. It would have been similar to what I've written above: accurate and descriptive with a certain amount of precision in the use of language and inherently relative to other terms of perspective. But words don't suffice. A vanishing point demands illustration. I found my original diagram of a vanishing point painfully lacking. It looked basically like a stick figure and a pile of triangles. At the time I was very interested in animation and thought I could visualize a vanishing point more clearly with a little motion. I ended up with a stick figure and a moving pile of triangles which was much better. ;-)"
    },
    {
      "type": "paragraph",
      "id": "d7b18808bf7adcb0",
      "text": "Without further adieu (with the caveat that an SVG plugin is required) . . . drumroll . . . (click Go):"
    },
    {
      "type": "paragraph",
      "id": "e5d7af38baf77834",
      "text": "It is probably not self evident as to why Kim was so impressed by such a simple animation. Computers as an Historical Tool for Mathematics, Science and Art will help clarify why this is an interesting contribution to the history of perspective. There are some other hints in another article which I quote below."
    },
    {
      "type": "paragraph",
      "id": "72aa21e9df2affee",
      "text": "Back to the pictures of infinity. Notice how as the projected lines grow ever more slowly towards the vanishing point before leaping at the very end. This is a direct consequence of geometry and infinity. The ground lines are growing at a constant rate whereas their projections are growing in a ratio relative to the point of view and position of the picture plane. If I let it keep going it does eventually get fairly close to the end, but it's really not worth the wait. Someday I'll rearrange the animation so the projected lines grow at a constant rate. I'll still have to do some fudging towards the end as the ground lines approach the limits of the SVG coordinate system."
    },
    {
      "type": "paragraph",
      "id": "6f7f6cd72bf611c7",
      "text": "Speaking of coordinate systems there's another detail worth mentioning if you're inclined to look at the code behind the animation. SVG uses a two-dimensional coordinate system whereas the scene I'm depicting is three-dimensional. For this animation I'm just using the 2D coordinates to calculate intersections. In the AutoCAD version I had the advantage of a three dimensional coordinate system for my code. That arrangement more accurately reflects the actual geometry at work when light reflects off of objects and into our eyes. For simplicity my stick figure is a cyclops. In both of these ways I'm actually continuing a very long tradition in the history of perspective and geometry in general. :-)"
    },
    {
      "type": "paragraph",
      "id": "b5b4fa462caa716e",
      "text": "Here's how Kim described it in the introduction to Computers and Renaissance Perspective"
    },
    {
      "type": "markdown",
      "id": "c6a0daab1b628e9b",
      "text": "> A long tradition of Euclidean geometry developed two-dimensional conventions of representation to the extent that they were part of the legitimation process in mathematics. As a result, Renaissance treatises on perspective evidence a basic paradox: they use abstract two-dimensional conventions to display the principles of a new three-dimensional method of representing space. This is achieved by folding different planes (usually a lateral view and or a ground view) into a single plane (usually a frontal view). This procedure of folding back (technically termed ribaltimento in Italian and rabattement in French), makes most of the diagrams in the early treatises virtually incomprehensible to the untrained eye, all the more so because the reader is confronted with a completed construction which usually gives no visual clues concerning the steps taken to get there. One can identify the steps taken in arriving at an end product in any of these constructions; one can reconstruct these steps and theoretically it would be possible to print these, except that the cost of including so many diagrams makes this alternative prohibitively expensive. All of which helps explain why these treatises have never been studied systematically.\n"
    },
    {
      "type": "paragraph",
      "id": "c4577c7e8628fdd5",
      "text": "Many of the animations I created in Siena were folding the two-dimensional images into their three-dimensional origins. In one, I animated the steps Piero della Francesca described to construct a perspective image of a pentagon. No small task to understand a centuries old Italian text on a geometric construction. When I was done animating his instructions I re-did the animation in a way that I thought made the technique he was describing more clear. If I remember correctly, I then folded the resulting drawing into its three-dimensional arrangement and animated something of a proof of the technique by projecting lines from the point of view to the pentagon on the ground and showing that constructed image aligns correctly. When I get more tuits I'll see if I can repeat that stunt. :-)"
    },
    {
      "type": "paragraph",
      "id": "5ae6da5487fbcd95",
      "text": "[1,2] See my [http://dobbse.net/thinair/2002/12/perspective-terms.html illustration of perspective basics]"
    },
    {
      "type": "paragraph",
      "id": "30885ce165745a88",
      "text": "[3] I still haven't illustrated a horizon line anywhere."
    },
    {
      "type": "assets",
      "id": "bc546360581a2c03",
      "text": "vanishing-point"
    },
    {
      "type": "pagefold",
      "id": "a6e1a41444d2880d",
      "text": "."
    },
    {
      "type": "video",
      "id": "d247bc91722b8ef7",
      "text": "YOUTUBE 6_x5MgXpPi4\nScreencast about Linear Perspective, Horizon Line, Vanishing Point with help from Sketchup"
    },
    {
      "type": "paragraph",
      "id": "3fa59d1947bd4749",
      "text": "I used the desktop version of Sketchup to create the unconventional intro to linear perspective. In the nine years since that was created the free edition of sketchup has moved to the web:  [https://app.sketchup.com/app app]. Perhaps I can re-record this video with more attention to the audio quality."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Vanishing Point",
        "story": []
      },
      "date": 1523493857848
    },
    {
      "item": {
        "type": "factory",
        "id": "f750ed993a1de44e"
      },
      "id": "f750ed993a1de44e",
      "type": "add",
      "date": 1523493859516
    },
    {
      "type": "edit",
      "id": "f750ed993a1de44e",
      "item": {
        "type": "paragraph",
        "id": "f750ed993a1de44e",
        "text": "In 2003 I re-created an animation of a vanishing point in javascript and SVG.  The original animation was built with AutoCAD 9 and custom AUTOLISP scripts I created in the early 1990s."
      },
      "date": 1523493996334
    },
    {
      "item": {
        "type": "factory",
        "id": "3fefb1660af22449"
      },
      "id": "3fefb1660af22449",
      "type": "add",
      "after": "f750ed993a1de44e",
      "date": 1523494000162
    },
    {
      "type": "edit",
      "id": "3fefb1660af22449",
      "item": {
        "type": "html",
        "id": "3fefb1660af22449",
        "text": "<img src=\"https://dobbse.net/reflection/perspective/vp.svg\" />"
      },
      "date": 1523494103388
    },
    {
      "type": "edit",
      "id": "3fefb1660af22449",
      "item": {
        "type": "html",
        "id": "3fefb1660af22449",
        "text": "<embed src=\"https://dobbse.net/reflection/perspective/vp.svg\" />"
      },
      "date": 1523494140688
    },
    {
      "item": {
        "type": "factory",
        "id": "d67f99c6a5a47458"
      },
      "id": "d67f99c6a5a47458",
      "type": "add",
      "after": "3fefb1660af22449",
      "date": 1523494151768
    },
    {
      "type": "edit",
      "id": "d67f99c6a5a47458",
      "item": {
        "type": "frame",
        "id": "d67f99c6a5a47458",
        "text": "https://dobbse.net/reflection/perspective/vp.svg"
      },
      "date": 1523494166292
    },
    {
      "type": "edit",
      "id": "f750ed993a1de44e",
      "item": {
        "type": "paragraph",
        "id": "f750ed993a1de44e",
        "text": "In 2003 I re-created an animation of a vanishing point in javascript and SVG.  The original animation was built with AutoCAD 9 and custom AUTOLISP scripts I created in the early 1990s.  Happily amazed that 15 years later this code runs unchanged in modern browsers."
      },
      "date": 1523494295974
    },
    {
      "item": {
        "type": "factory",
        "id": "2704758863449c2f"
      },
      "id": "2704758863449c2f",
      "type": "add",
      "after": "d67f99c6a5a47458",
      "date": 1523494299912
    },
    {
      "type": "remove",
      "id": "2704758863449c2f",
      "date": 1523494340448
    },
    {
      "type": "edit",
      "id": "f750ed993a1de44e",
      "item": {
        "type": "paragraph",
        "id": "f750ed993a1de44e",
        "text": "In 2003 I re-created an animation of a vanishing point in javascript and SVG.  The original animation was built with AutoCAD 9 and custom AUTOLISP scripts I created in the early 1990s.  Happily amazed that 15 years later this code runs unchanged in modern browsers. [https://dobbse.net/thinair/2003/12/vanishing-point.html blog]"
      },
      "date": 1523494368424
    },
    {
      "item": {
        "type": "factory",
        "id": "c99d55a8906e6d20"
      },
      "id": "c99d55a8906e6d20",
      "type": "add",
      "after": "d67f99c6a5a47458",
      "date": 1523494404746
    },
    {
      "type": "edit",
      "id": "c99d55a8906e6d20",
      "item": {
        "type": "markdown",
        "id": "c99d55a8906e6d20",
        "text": "- [ ] transport the full 2003 blog entry into this page"
      },
      "date": 1523494439642
    },
    {
      "type": "edit",
      "id": "c99d55a8906e6d20",
      "item": {
        "type": "markdown",
        "id": "c99d55a8906e6d20",
        "text": "- [ ] TODO: transport the full 2003 blog entry into this page"
      },
      "date": 1523494451040
    },
    {
      "item": {
        "type": "factory",
        "id": "ab3aaa9599576de2"
      },
      "id": "ab3aaa9599576de2",
      "type": "add",
      "after": "c99d55a8906e6d20",
      "date": 1523494699954
    },
    {
      "type": "remove",
      "id": "ab3aaa9599576de2",
      "date": 1523494708438
    },
    {
      "type": "edit",
      "id": "f750ed993a1de44e",
      "item": {
        "type": "paragraph",
        "id": "f750ed993a1de44e",
        "text": "In 2003 I re-created an animation of a vanishing point in javascript and SVG.  The original animation was built with AutoCAD 9 and custom AUTOLISP scripts I created in the fall of 1990.  Happily amazed that 15 years later this code runs unchanged in modern browsers. [https://dobbse.net/thinair/2003/12/vanishing-point.html blog]"
      },
      "date": 1523494738112
    },
    {
      "item": {
        "type": "factory",
        "id": "4d08d8228e2c25a1"
      },
      "id": "4d08d8228e2c25a1",
      "type": "add",
      "after": "c99d55a8906e6d20",
      "date": 1523494739854
    },
    {
      "type": "edit",
      "id": "4d08d8228e2c25a1",
      "item": {
        "type": "paragraph",
        "id": "4d08d8228e2c25a1",
        "text": "As it turns out AutoCAD and AutoLISP made a perfectly capable wire-frame animation tool, at least for a motivated programmer.  Really, AutoLISP chose me, as AutoCAD was the only illustration software available to me at the time and I really wanted to do animation.  Even in 1990, AutoCAD 9 was two generations old.  It was my first painful experience with bit rot."
      },
      "date": 1523495122654
    },
    {
      "type": "add",
      "id": "f2959467f61508e6",
      "item": {
        "type": "paragraph",
        "id": "f2959467f61508e6",
        "text": "See [[Bit Rot and the Red Queen Effect]]"
      },
      "after": "4d08d8228e2c25a1",
      "date": 1523495141844
    },
    {
      "type": "edit",
      "id": "f2959467f61508e6",
      "item": {
        "type": "paragraph",
        "id": "f2959467f61508e6",
        "text": "See [[Bit-rot and Red Queen Effect]]"
      },
      "date": 1523495185328
    },
    {
      "type": "edit",
      "id": "d67f99c6a5a47458",
      "item": {
        "type": "frame",
        "id": "d67f99c6a5a47458",
        "text": "https://dobbse.net/reflection/perspective/vp.svg\n\nClick the Go and Stop buttons"
      },
      "date": 1523495259350
    },
    {
      "type": "edit",
      "id": "d67f99c6a5a47458",
      "item": {
        "type": "frame",
        "id": "d67f99c6a5a47458",
        "text": "https://dobbse.net/reflection/perspective/vp.svg\nHEIGHT 400\nClick the Go and Stop buttons"
      },
      "date": 1565663522886
    },
    {
      "item": {
        "type": "factory",
        "id": "54aac45b4f053b97"
      },
      "id": "54aac45b4f053b97",
      "type": "add",
      "after": "f2959467f61508e6",
      "date": 1565663563710
    },
    {
      "type": "edit",
      "id": "54aac45b4f053b97",
      "item": {
        "type": "code",
        "id": "54aac45b4f053b97",
        "text": "      anim = createAnimation(\n        [runEach,\n          [zeroEach,groundlineR,groundlineL,projectedLineR,projectedLineL],\n          [function(point){point.hide();refreshEach(point);},vanishingPoint],\n          [function(line){line.moveEnd(groundlineR.start)},projectorR],\n          [function(line){line.moveEnd(groundlineL.start)},projectorL],\n          [showAndRefreshEach,projectorR,groundlineR,projectorL,groundlineL,projectedLineR,projectedLineL],\n        1],\n\n        [runEach,\n          [createTranslator(groundlineR.start,groundlineR.end,frameCount),\n            projectorR.end,projectorL.end,groundlineR.end,groundlineL.end],\n          [createIntersector(projectorR,new Line(projectedLineR.id)),\n            projectedLineR.end],\n          [createIntersector(projectorL,new Line(projectedLineL.id)),\n            projectedLineL.end],\n          [refreshEach].concat(refreshLines),\n        frameCount],\n\n        [runEach,\n          [createIntersector(projectedLineR,projectedLineL),\n            projectedLineR.end,projectedLineL.end],\n          [function(line){line.moveEnd([1193.374,-93.990])},\n            projectorR,projectorL],\n          [function(line){line.hide()},projectorL],\n          [refreshEach].concat(refreshLines),\n          [function(p){p.radius = 3;showAndRefreshEach(p)},vanishingPoint],\n        1]\n\n      );"
      },
      "date": 1565663584694
    },
    {
      "type": "edit",
      "id": "54aac45b4f053b97",
      "item": {
        "type": "code",
        "id": "54aac45b4f053b97",
        "text": "anim = createAnimation(\n  [runEach,\n    [zeroEach,groundlineR,groundlineL,projectedLineR,projectedLineL],\n    [function(point){point.hide();refreshEach(point);},vanishingPoint],\n    [function(line){line.moveEnd(groundlineR.start)},projectorR],\n    [function(line){line.moveEnd(groundlineL.start)},projectorL],\n    [showAndRefreshEach,projectorR,groundlineR,projectorL,groundlineL,projectedLineR,projectedLineL],\n  1],\n\n  [runEach,\n    [createTranslator(groundlineR.start,groundlineR.end,frameCount),\n      projectorR.end,projectorL.end,groundlineR.end,groundlineL.end],\n    [createIntersector(projectorR,new Line(projectedLineR.id)),\n      projectedLineR.end],\n    [createIntersector(projectorL,new Line(projectedLineL.id)),\n      projectedLineL.end],\n    [refreshEach].concat(refreshLines),\n  frameCount],\n\n  [runEach,\n    [createIntersector(projectedLineR,projectedLineL),\n      projectedLineR.end,projectedLineL.end],\n    [function(line){line.moveEnd([1193.374,-93.990])},\n      projectorR,projectorL],\n    [function(line){line.hide()},projectorL],\n    [refreshEach].concat(refreshLines),\n    [function(p){p.radius = 3;showAndRefreshEach(p)},vanishingPoint],\n  1]\n\n);"
      },
      "date": 1565663615192
    },
    {
      "type": "edit",
      "id": "54aac45b4f053b97",
      "item": {
        "type": "code",
        "id": "54aac45b4f053b97",
        "text": "anim = createAnimation(\n  [runEach,\n    [zeroEach,\n      groundlineR,\n      groundlineL,\n      projectedLineR,\n      projectedLineL],\n    [function(point){\n      point.hide();\n      refreshEach(point);\n     }, vanishingPoint],\n    [function(line){\n      line.moveEnd(groundlineR.start)\n     },projectorR],\n    [function(line){\n      line.moveEnd(groundlineL.start)\n     },projectorL],\n    [showAndRefreshEach,\n      projectorR,\n      groundlineR,\n      projectorL,\n      groundlineL,\n      projectedLineR,\n      projectedLineL],\n  1],\n\n  [runEach,\n    [createTranslator(\n      groundlineR.start,\n      groundlineR.end,\n      frameCount\n     ),\n      projectorR.end,\n      projectorL.end,\n      groundlineR.end,\n      groundlineL.end],\n    [createIntersector(\n      projectorR,\n      new Line(projectedLineR.id)\n     ),\n      projectedLineR.end],\n    [createIntersector(\n      projectorL,\n      new Line(projectedLineL.id)\n     ),\n      projectedLineL.end],\n    [refreshEach].concat(refreshLines),\n  frameCount],\n\n  [runEach,\n    [createIntersector(\n      projectedLineR,\n      projectedLineL\n     ),\n      projectedLineR.end,projectedLineL.end],\n    [function(line){\n      line.moveEnd([1193.374,-93.990])\n     },\n      projectorR,projectorL],\n    [function(line){line.hide()},projectorL],\n    [refreshEach].concat(refreshLines),\n    [function(p){\n      p.radius = 3;\n      showAndRefreshEach(p)\n     },vanishingPoint],\n  1]\n\n);"
      },
      "date": 1565664036384
    },
    {
      "type": "add",
      "id": "6cf94d79f06e467b",
      "item": {
        "type": "paragraph",
        "id": "6cf94d79f06e467b",
        "text": "When I created the javascript variation, I was reading Paul Graham's book On Lisp and followed the examples to gradually grow this animation language from the ground up. What follows is almost like a little javascript varient on scheme. The createAnimation function interprets the arrays applying the function at index 0 to the remaining arguments in the array. I still enjoy reading this block of code, though perhaps because the mental model of how all this works remains well preserved in memory somehow."
      },
      "after": "f2959467f61508e6",
      "date": 1565664250246
    },
    {
      "item": {
        "type": "factory",
        "id": "b8ff9b7651f6ff6d"
      },
      "id": "b8ff9b7651f6ff6d",
      "type": "add",
      "after": "54aac45b4f053b97",
      "date": 1565666468747
    },
    {
      "type": "edit",
      "id": "b8ff9b7651f6ff6d",
      "item": {
        "type": "pagefold",
        "id": "b8ff9b7651f6ff6d",
        "text": "."
      },
      "date": 1565666477404
    },
    {
      "item": {
        "type": "factory",
        "id": "a8dc367ae8afbaaf"
      },
      "id": "a8dc367ae8afbaaf",
      "type": "add",
      "after": "b8ff9b7651f6ff6d",
      "date": 1565666479023
    },
    {
      "type": "edit",
      "id": "a8dc367ae8afbaaf",
      "item": {
        "type": "paragraph",
        "id": "a8dc367ae8afbaaf",
        "text": "This is a reconstruction of the animation that led to five months of working with Dr. Kim Veltman in Italy and some of the richest learning experiences of my life.\n\nIn linear perspective, when parallel lines are projected onto a picture plane [1], the resulting projections [2] will intersect at a vanishing point. For lines parallel to the ground, the vanishing points will appear on the horizon line [3]. When drawing objects in perspective, the artist usually begins by drawing the horizon line and a couple vanishing points. Construction lines are drawn from those vanishing points to help the artist correctly locate the edges of buildings or other objects. Perspective drawings and paintings are sometimes classified by the number of vanishing points used in the construction.\n\nI don't remember the exact definition of a vanishing point from Dr. Veltman's collection. It would have been similar to what I've written above: accurate and descriptive with a certain amount of precision in the use of language and inherently relative to other terms of perspective. But words don't suffice. A vanishing point demands illustration. I found my original diagram of a vanishing point painfully lacking. It looked basically like a stick figure and a pile of triangles. At the time I was very interested in animation and thought I could visualize a vanishing point more clearly with a little motion. I ended up with a stick figure and a moving pile of triangles which was much better. ;-)\n\nWithout further adieu (with the caveat that an SVG plugin is required) . . . drumroll . . . (click Go):\n\nIt is probably not self evident as to why Kim was so impressed by such a simple animation. Computers as an Historical Tool for Mathematics, Science and Art will help clarify why this is an interesting contribution to the history of perspective. There are some other hints in another article which I quote below.\n\nBack to the pictures of infinity. Notice how as the projected lines grow ever more slowly towards the vanishing point before leaping at the very end. This is a direct consequence of geometry and infinity. The ground lines are growing at a constant rate whereas their projections are growing in a ratio relative to the point of view and position of the picture plane. If I let it keep going it does eventually get fairly close to the end, but it's really not worth the wait. Someday I'll rearrange the animation so the projected lines grow at a constant rate. I'll still have to do some fudging towards the end as the ground lines approach the limits of the SVG coordinate system.\n\nSpeaking of coordinate systems there's another detail worth mentioning if you're inclined to look at the code behind the animation. SVG uses a two-dimensional coordinate system whereas the scene I'm depicting is three-dimensional. For this animation I'm just using the 2D coordinates to calculate intersections. In the AutoCAD version I had the advantage of a three dimensional coordinate system for my code. That arrangement more accurately reflects the actual geometry at work when light reflects off of objects and into our eyes. For simplicity my stick figure is a cyclops. In both of these ways I'm actually continuing a very long tradition in the history of perspective and geometry in general. :-)\n\nHere's how Kim described it in the introduction to Computers and Renaissance Perspective"
      },
      "date": 1565666541601
    },
    {
      "type": "add",
      "id": "c4577c7e8628fdd5",
      "item": {
        "type": "paragraph",
        "id": "c4577c7e8628fdd5",
        "text": "Many of the animations I created in Siena were folding the two-dimensional images into their three-dimensional origins. In one, I animated the steps Piero della Francesca described to construct a perspective image of a pentagon. No small task to understand a centuries old Italian text on a geometric construction. When I was done animating his instructions I re-did the animation in a way that I thought made the technique he was describing more clear. If I remember correctly, I then folded the resulting drawing into its three-dimensional arrangement and animated something of a proof of the technique by projecting lines from the point of view to the pentagon on the ground and showing that constructed image aligns correctly. When I get more tuits I'll see if I can repeat that stunt. :-)\n\n[1,2] See my illustration of perspective basics\n[3] I still haven't illustrated a horizon line anywhere."
      },
      "after": "a8dc367ae8afbaaf",
      "date": 1565666551000
    },
    {
      "type": "add",
      "id": "c6a0daab1b628e9b",
      "item": {
        "type": "factory",
        "id": "c6a0daab1b628e9b",
        "text": "asdlfk"
      },
      "after": "a8dc367ae8afbaaf",
      "date": 1565666554234
    },
    {
      "type": "edit",
      "id": "c6a0daab1b628e9b",
      "item": {
        "type": "markdown",
        "id": "c6a0daab1b628e9b",
        "text": "> A long tradition of Euclidean geometry developed two-dimensional conventions of representation to the extent that they were part of the legitimation process in mathematics. As a result, Renaissance treatises on perspective evidence a basic paradox: they use abstract two-dimensional conventions to display the principles of a new three-dimensional method of representing space. This is achieved by folding different planes (usually a lateral view and or a ground view) into a single plane (usually a frontal view). This procedure of folding back (technically termed ribaltimento in Italian and rabattement in French), makes most of the diagrams in the early treatises virtually incomprehensible to the untrained eye, all the more so because the reader is confronted with a completed construction which usually gives no visual clues concerning the steps taken to get there. One can identify the steps taken in arriving at an end product in any of these constructions; one can reconstruct these steps and theoretically it would be possible to print these, except that the cost of including so many diagrams makes this alternative prohibitively expensive. All of which helps explain why these treatises have never been studied systematically.\n"
      },
      "date": 1565666568926
    },
    {
      "item": {
        "type": "factory",
        "id": "bc546360581a2c03"
      },
      "id": "bc546360581a2c03",
      "type": "add",
      "after": "c4577c7e8628fdd5",
      "date": 1565666639409
    },
    {
      "type": "edit",
      "id": "bc546360581a2c03",
      "item": {
        "type": "assets",
        "id": "bc546360581a2c03",
        "text": "vanishing-point"
      },
      "date": 1565666646163
    },
    {
      "type": "edit",
      "id": "f750ed993a1de44e",
      "item": {
        "type": "paragraph",
        "id": "f750ed993a1de44e",
        "text": "In 2003 I re-created an animation of a vanishing point in javascript and SVG.  The original animation was built with AutoCAD 9 and custom AUTOLISP scripts I created in the fall of 1990.  Happily amazed that 15 years later this code runs unchanged in modern browsers. [http://dobbse.net/thinair/2003/12/vanishing-point.html blog]"
      },
      "date": 1565666747747
    },
    {
      "type": "edit",
      "id": "c4577c7e8628fdd5",
      "item": {
        "type": "paragraph",
        "id": "c4577c7e8628fdd5",
        "text": "Many of the animations I created in Siena were folding the two-dimensional images into their three-dimensional origins. In one, I animated the steps Piero della Francesca described to construct a perspective image of a pentagon. No small task to understand a centuries old Italian text on a geometric construction. When I was done animating his instructions I re-did the animation in a way that I thought made the technique he was describing more clear. If I remember correctly, I then folded the resulting drawing into its three-dimensional arrangement and animated something of a proof of the technique by projecting lines from the point of view to the pentagon on the ground and showing that constructed image aligns correctly. When I get more tuits I'll see if I can repeat that stunt. :-)\n\n[1,2] See my [http://dobbse.net/thinair/2002/12/perspective-terms.html illustration of perspective basics]"
      },
      "date": 1565666779810
    },
    {
      "type": "add",
      "id": "30885ce165745a88",
      "item": {
        "type": "paragraph",
        "id": "30885ce165745a88",
        "text": "[3] I still haven't illustrated a horizon line anywhere."
      },
      "after": "c4577c7e8628fdd5",
      "date": 1565666781906
    },
    {
      "type": "edit",
      "id": "c4577c7e8628fdd5",
      "item": {
        "type": "paragraph",
        "id": "c4577c7e8628fdd5",
        "text": "Many of the animations I created in Siena were folding the two-dimensional images into their three-dimensional origins. In one, I animated the steps Piero della Francesca described to construct a perspective image of a pentagon. No small task to understand a centuries old Italian text on a geometric construction. When I was done animating his instructions I re-did the animation in a way that I thought made the technique he was describing more clear. If I remember correctly, I then folded the resulting drawing into its three-dimensional arrangement and animated something of a proof of the technique by projecting lines from the point of view to the pentagon on the ground and showing that constructed image aligns correctly. When I get more tuits I'll see if I can repeat that stunt. :-)"
      },
      "date": 1565666788502
    },
    {
      "type": "add",
      "id": "5ae6da5487fbcd95",
      "item": {
        "type": "paragraph",
        "id": "5ae6da5487fbcd95",
        "text": "[1,2] See my [http://dobbse.net/thinair/2002/12/perspective-terms.html illustration of perspective basics]"
      },
      "after": "c4577c7e8628fdd5",
      "date": 1565666790743
    },
    {
      "type": "edit",
      "id": "f750ed993a1de44e",
      "item": {
        "type": "paragraph",
        "id": "f750ed993a1de44e",
        "text": "In 2003 I re-created an animation of a vanishing point in javascript and SVG.  The original animation was built with AutoCAD 10 and custom AUTOLISP scripts I created in the fall of 1990.  Happily amazed that 15 years later this code runs unchanged in modern browsers. [http://dobbse.net/thinair/2003/12/vanishing-point.html blog]"
      },
      "date": 1565666829015
    },
    {
      "type": "edit",
      "id": "4d08d8228e2c25a1",
      "item": {
        "type": "paragraph",
        "id": "4d08d8228e2c25a1",
        "text": "As it turns out AutoCAD and AutoLISP made a perfectly capable wire-frame animation tool, at least for a motivated programmer.  Really, AutoLISP chose me, as AutoCAD was the only illustration software available to me at the time and I really wanted to do animation.  Even in 1990, AutoCAD 10 was two generations old.  It was my first painful experience with bit rot."
      },
      "date": 1565666844616
    },
    {
      "type": "edit",
      "id": "4d08d8228e2c25a1",
      "item": {
        "type": "paragraph",
        "id": "4d08d8228e2c25a1",
        "text": "As it turns out AutoCAD and AutoLISP made a perfectly capable wire-frame animation tool, at least for a motivated programmer.  Really, AutoLISP chose me, as AutoCAD was the only illustration software available to me at the time and I really wanted to do animation.  Even in 1990, AutoCAD 10 was one generation old.  It was my first painful experience with bit rot."
      },
      "date": 1565666856112
    },
    {
      "type": "edit",
      "id": "6cf94d79f06e467b",
      "item": {
        "type": "paragraph",
        "id": "6cf94d79f06e467b",
        "text": "When I created the javascript variation, I was reading Paul Graham's book On Lisp and worked up my own examples to gradually grow this animation language from the ground up. What follows is almost like a little javascript varient on scheme. The createAnimation function interprets the arrays applying the function at index 0 to the remaining arguments in the array. I still enjoy reading this block of code, though perhaps because the mental model of how all this works remains well preserved in memory somehow."
      },
      "date": 1565666983394
    },
    {
      "type": "edit",
      "id": "a8dc367ae8afbaaf",
      "item": {
        "type": "paragraph",
        "id": "a8dc367ae8afbaaf",
        "text": "This is a reconstruction of the animation that led to five months of working with Dr. Kim Veltman in Italy and some of the richest learning experiences of my life."
      },
      "date": 1565667022822
    },
    {
      "type": "add",
      "id": "a3307510b78abba6",
      "item": {
        "type": "paragraph",
        "id": "a3307510b78abba6",
        "text": "In linear perspective, when parallel lines are projected onto a picture plane [1], the resulting projections [2] will intersect at a vanishing point. For lines parallel to the ground, the vanishing points will appear on the horizon line [3]. When drawing objects in perspective, the artist usually begins by drawing the horizon line and a couple vanishing points. Construction lines are drawn from those vanishing points to help the artist correctly locate the edges of buildings or other objects. Perspective drawings and paintings are sometimes classified by the number of vanishing points used in the construction."
      },
      "after": "a8dc367ae8afbaaf",
      "date": 1565667027599
    },
    {
      "type": "add",
      "id": "3e6e9a2d19e4a39c",
      "item": {
        "type": "paragraph",
        "id": "3e6e9a2d19e4a39c",
        "text": "I don't remember the exact definition of a vanishing point from Dr. Veltman's collection. It would have been similar to what I've written above: accurate and descriptive with a certain amount of precision in the use of language and inherently relative to other terms of perspective. But words don't suffice. A vanishing point demands illustration. I found my original diagram of a vanishing point painfully lacking. It looked basically like a stick figure and a pile of triangles. At the time I was very interested in animation and thought I could visualize a vanishing point more clearly with a little motion. I ended up with a stick figure and a moving pile of triangles which was much better. ;-)"
      },
      "after": "a3307510b78abba6",
      "date": 1565667034156
    },
    {
      "type": "add",
      "id": "d7b18808bf7adcb0",
      "item": {
        "type": "paragraph",
        "id": "d7b18808bf7adcb0",
        "text": "Without further adieu (with the caveat that an SVG plugin is required) . . . drumroll . . . (click Go):"
      },
      "after": "3e6e9a2d19e4a39c",
      "date": 1565667040622
    },
    {
      "type": "add",
      "id": "e5d7af38baf77834",
      "item": {
        "type": "paragraph",
        "id": "e5d7af38baf77834",
        "text": "It is probably not self evident as to why Kim was so impressed by such a simple animation. Computers as an Historical Tool for Mathematics, Science and Art will help clarify why this is an interesting contribution to the history of perspective. There are some other hints in another article which I quote below."
      },
      "after": "d7b18808bf7adcb0",
      "date": 1565667055249
    },
    {
      "type": "add",
      "id": "72aa21e9df2affee",
      "item": {
        "type": "paragraph",
        "id": "72aa21e9df2affee",
        "text": "Back to the pictures of infinity. Notice how as the projected lines grow ever more slowly towards the vanishing point before leaping at the very end. This is a direct consequence of geometry and infinity. The ground lines are growing at a constant rate whereas their projections are growing in a ratio relative to the point of view and position of the picture plane. If I let it keep going it does eventually get fairly close to the end, but it's really not worth the wait. Someday I'll rearrange the animation so the projected lines grow at a constant rate. I'll still have to do some fudging towards the end as the ground lines approach the limits of the SVG coordinate system."
      },
      "after": "e5d7af38baf77834",
      "date": 1565667061215
    },
    {
      "type": "add",
      "id": "6f7f6cd72bf611c7",
      "item": {
        "type": "paragraph",
        "id": "6f7f6cd72bf611c7",
        "text": "Speaking of coordinate systems there's another detail worth mentioning if you're inclined to look at the code behind the animation. SVG uses a two-dimensional coordinate system whereas the scene I'm depicting is three-dimensional. For this animation I'm just using the 2D coordinates to calculate intersections. In the AutoCAD version I had the advantage of a three dimensional coordinate system for my code. That arrangement more accurately reflects the actual geometry at work when light reflects off of objects and into our eyes. For simplicity my stick figure is a cyclops. In both of these ways I'm actually continuing a very long tradition in the history of perspective and geometry in general. :-)"
      },
      "after": "72aa21e9df2affee",
      "date": 1565667066131
    },
    {
      "type": "add",
      "id": "b5b4fa462caa716e",
      "item": {
        "type": "paragraph",
        "id": "b5b4fa462caa716e",
        "text": "Here's how Kim described it in the introduction to Computers and Renaissance Perspective"
      },
      "after": "6f7f6cd72bf611c7",
      "date": 1565667069701
    },
    {
      "item": {
        "type": "factory",
        "id": "a6e1a41444d2880d"
      },
      "id": "a6e1a41444d2880d",
      "type": "add",
      "after": "bc546360581a2c03",
      "date": 1589859713133
    },
    {
      "type": "edit",
      "id": "a6e1a41444d2880d",
      "item": {
        "type": "pagefold",
        "id": "a6e1a41444d2880d",
        "text": "."
      },
      "date": 1589859717574
    },
    {
      "item": {
        "type": "factory",
        "id": "d247bc91722b8ef7"
      },
      "id": "d247bc91722b8ef7",
      "type": "add",
      "after": "a6e1a41444d2880d",
      "date": 1589859725039
    },
    {
      "type": "edit",
      "id": "d247bc91722b8ef7",
      "item": {
        "type": "video",
        "id": "d247bc91722b8ef7",
        "text": "YOUTUBE 6_x5MgXpPi4\nScreencast about Linear Perspective, Horizon Line, Vanishing Point with help from Sketchup"
      },
      "date": 1589860470098
    },
    {
      "item": {
        "type": "factory",
        "id": "3fa59d1947bd4749"
      },
      "id": "3fa59d1947bd4749",
      "type": "add",
      "after": "d247bc91722b8ef7",
      "date": 1589898418570
    },
    {
      "type": "edit",
      "id": "3fa59d1947bd4749",
      "item": {
        "type": "paragraph",
        "id": "3fa59d1947bd4749",
        "text": "I used the desktop version of Sketchup to create the unconventional intro to linear perspective. In the nine years since that was created the free edition of sketchup has moved to the web:  [https://app.sketchup.com/app app]"
      },
      "date": 1589898473523
    },
    {
      "type": "edit",
      "id": "3fa59d1947bd4749",
      "item": {
        "type": "paragraph",
        "id": "3fa59d1947bd4749",
        "text": "I used the desktop version of Sketchup to create the unconventional intro to linear perspective. In the nine years since that was created the free edition of sketchup has moved to the web:  [https://app.sketchup.com/app app]. Perhaps I can re-record this video with more attention to the audio quality."
      },
      "date": 1589898605052
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1635588383981
    },
    {
      "type": "fork",
      "date": 1637751940382
    },
    {
      "type": "edit",
      "id": "d67f99c6a5a47458",
      "item": {
        "type": "frame",
        "id": "d67f99c6a5a47458",
        "text": "//wiki.ralfbarkow.ch/assets/pages/changing-frames/vp.svg\nHEIGHT 400\nClick the Go and Stop buttons"
      },
      "date": 1664043551868
    }
  ]
}