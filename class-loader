{
  "title": "Class Loader",
  "story": [
    {
      "type": "html",
      "text": "The Java class [[Class Loader]] is an abstract class. Applications implement subclasses of [[Class Loader]] in order to extend the manner in which the [[Java Virtual Machine]] dynamically loads classes. \nThe [[Class Loader]] class uses a delegation model to search for classes and resources. Each instance of [[Class Loader]] has an associated parent class loader. When called upon to find a class or resource, a [[Class Loader]] instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the bootstrap class loader, does not itself have a parent but may serve as the parent of a [[Class Loader]] instance. ",
      "id": "19627fc85bd07973ceaba471f38779fe"
    },
    {
      "type": "html",
      "text": "\nNormally, the Java Virtual Machine loads classes from the local file system in a platform-dependent manner. For example, on UNIX systems, the Virtual Machine loads classes from the directory defined by the CLASSPATH environment variable. ",
      "id": "97b48caa6cf3df57f2fc49178815150c"
    },
    {
      "type": "html",
      "text": "\nHowever, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method defineClass converts an array of bytes into an instance of class Class. Instances of this newly defined class can be created using the newInstance method in class Class. ",
      "id": "02c8c8cf1c041c6db397d4b0cd0f8a7e"
    },
    {
      "type": "html",
      "text": "\nThe methods and constructors of objects created by a class loader may reference other classes. To determine the class(es) referred to, the Java Virtual Machine calls the loadClass method of the class loader that originally created the class. ",
      "id": "47340b62f308e12d3f3ca4b1879b7013"
    },
    {
      "type": "html",
      "text": "\nFor example, an application could create a network class loader to download class files from a server. Sample code might look like: ",
      "id": "fcad758972503539563c1e465550c4b7"
    },
    {
      "type": "code",
      "text": "   ClassLoader loader = new NetworkClassLoader(host, port);\n   Object main = loader.loadClass(\"Main\", true).newInstance();\n    . . .",
      "id": "95d9f49c253ac3e4c6bd30ed21adb67a"
    },
    {
      "type": "html",
      "text": "The network class loader subclass must define the methods findClass and loadClassData to load a class from the network. Once it has downloaded the bytes that make up the class, it should use the method defineClass to create a class instance. A sample implementation is: ",
      "id": "266481c67a6316a978b6df1e4b712ddc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3aeb3661a89592aaa4d2738dc90436ee"
    },
    {
      "type": "code",
      "text": "     class NetworkClassLoader extends ClassLoader {\n         String host;\n         int port;",
      "id": "cbbd77c2cfebbe6f5e97c0d12c01300d"
    },
    {
      "type": "code",
      "text": "         public Class findClass(String name) {\n             byte[] b = loadClassData(name);\n             return defineClass(name, b, 0, b.length);\n         }",
      "id": "959a9106f545b36c966803c4bfb6ebe4"
    },
    {
      "type": "code",
      "text": "         private byte[] loadClassData(String name) {\n             // load the class data from the connection\n              . . .\n         }\n     }",
      "id": "fe44e54fa1b8e045c2d42a4fcd4a8755"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ClassLoader c2.com]",
      "id": "5c6e95c617969efafab224d6f343e897"
    }
  ],
  "journal": [
    {
      "date": 1415875859000,
      "id": "743c57ddd2af8502d61aaac86563fdf3",
      "type": "create",
      "item": {
        "title": "Class Loader",
        "story": [
          {
            "type": "html",
            "text": "The Java class [[Class Loader]] is an abstract class. Applications implement subclasses of [[Class Loader]] in order to extend the manner in which the [[Java Virtual Machine]] dynamically loads classes. \nThe [[Class Loader]] class uses a delegation model to search for classes and resources. Each instance of [[Class Loader]] has an associated parent class loader. When called upon to find a class or resource, a [[Class Loader]] instance will delegate the search for the class or resource to its parent class loader before attempting to find the class or resource itself. The virtual machine's built-in class loader, called the bootstrap class loader, does not itself have a parent but may serve as the parent of a [[Class Loader]] instance. ",
            "id": "19627fc85bd07973ceaba471f38779fe"
          },
          {
            "type": "html",
            "text": "\nNormally, the Java Virtual Machine loads classes from the local file system in a platform-dependent manner. For example, on UNIX systems, the Virtual Machine loads classes from the directory defined by the CLASSPATH environment variable. ",
            "id": "97b48caa6cf3df57f2fc49178815150c"
          },
          {
            "type": "html",
            "text": "\nHowever, some classes may not originate from a file; they may originate from other sources, such as the network, or they could be constructed by an application. The method defineClass converts an array of bytes into an instance of class Class. Instances of this newly defined class can be created using the newInstance method in class Class. ",
            "id": "02c8c8cf1c041c6db397d4b0cd0f8a7e"
          },
          {
            "type": "html",
            "text": "\nThe methods and constructors of objects created by a class loader may reference other classes. To determine the class(es) referred to, the Java Virtual Machine calls the loadClass method of the class loader that originally created the class. ",
            "id": "47340b62f308e12d3f3ca4b1879b7013"
          },
          {
            "type": "html",
            "text": "\nFor example, an application could create a network class loader to download class files from a server. Sample code might look like: ",
            "id": "fcad758972503539563c1e465550c4b7"
          },
          {
            "type": "code",
            "text": "   ClassLoader loader = new NetworkClassLoader(host, port);\n   Object main = loader.loadClass(\"Main\", true).newInstance();\n    . . .",
            "id": "95d9f49c253ac3e4c6bd30ed21adb67a"
          },
          {
            "type": "html",
            "text": "The network class loader subclass must define the methods findClass and loadClassData to load a class from the network. Once it has downloaded the bytes that make up the class, it should use the method defineClass to create a class instance. A sample implementation is: ",
            "id": "266481c67a6316a978b6df1e4b712ddc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3aeb3661a89592aaa4d2738dc90436ee"
          },
          {
            "type": "code",
            "text": "     class NetworkClassLoader extends ClassLoader {\n         String host;\n         int port;",
            "id": "cbbd77c2cfebbe6f5e97c0d12c01300d"
          },
          {
            "type": "code",
            "text": "         public Class findClass(String name) {\n             byte[] b = loadClassData(name);\n             return defineClass(name, b, 0, b.length);\n         }",
            "id": "959a9106f545b36c966803c4bfb6ebe4"
          },
          {
            "type": "code",
            "text": "         private byte[] loadClassData(String name) {\n             // load the class data from the connection\n              . . .\n         }\n     }",
            "id": "fe44e54fa1b8e045c2d42a4fcd4a8755"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ClassLoader c2.com]",
            "id": "5c6e95c617969efafab224d6f343e897"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1644485816366
    }
  ]
}