{
  "title": "Eliot Miranda",
  "story": [
    {
      "type": "paragraph",
      "id": "77ea2179dcb4c898",
      "text": "Arriving at the startup that first funded the OpenSmalltalk-VM, the first author had considerable experience maintaining the 2nd generation Deutsch Schiffmann VM written in C, and was sceptical that the Squeak Simulator would be viable for implementing a JIT. The startup wanted incremental development so as to reap value early and reduce risk, so it asked first for an interpreter using context-to-stack mapping. Writing this initial deliverable within the simulator was so much more productive and pleasurable than his previous work in C that he happily decided to stay with the simulator and invest in the necessary machine code simulation infrastructure. -- Two Decades of [[Smalltalk VM Development]] [https://hal.archives-ouvertes.fr/hal-01883380/file/hal.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "1aace12d06d0fd9d",
      "text": "> **Abstract**. OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler.\n>\n> In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
    },
    {
      "type": "paragraph",
      "id": "163c0141588b97ad",
      "text": "See also [[Feenk]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Eliot Miranda",
        "story": []
      },
      "date": 1641310984466
    },
    {
      "item": {
        "type": "factory",
        "id": "77ea2179dcb4c898"
      },
      "id": "77ea2179dcb4c898",
      "type": "add",
      "date": 1641311012464
    },
    {
      "type": "edit",
      "id": "77ea2179dcb4c898",
      "item": {
        "type": "paragraph",
        "id": "77ea2179dcb4c898",
        "text": "Arriving at the startup that first funded the OpenSmalltalk-VM, the first\nauthor had considerable experience maintaining the 2nd generation Deutsch\nSchiffmann VM written in C, and was sceptical that the Squeak Simulator\nwould be viable for implementing a JIT. The startup wanted incremental\ndevelopment so as to reap value early and reduce risk, so it asked first for an\ninterpreter using context-to-stack mapping. Writing this initial deliverable\nwithin the simulator was so much more productive and pleasurable than\nhis previous work in C that he happily decided to stay with the simulator\nand invest in the necessary machine code simulation infrastructure"
      },
      "date": 1641311016501
    },
    {
      "type": "edit",
      "id": "77ea2179dcb4c898",
      "item": {
        "type": "paragraph",
        "id": "77ea2179dcb4c898",
        "text": "Arriving at the startup that first funded the OpenSmalltalk-VM, the first\nauthor had considerable experience maintaining the 2nd generation Deutsch\nSchiffmann VM written in C, and was sceptical that the Squeak Simulator\nwould be viable for implementing a JIT. The startup wanted incremental\ndevelopment so as to reap value early and reduce risk, so it asked first for an\ninterpreter using context-to-stack mapping. Writing this initial deliverable\nwithin the simulator was so much more productive and pleasurable than\nhis previous work in C that he happily decided to stay with the simulator\nand invest in the necessary machine code simulation infrastructure. -- Two Decades of Smalltalk VM Development [https://hal.archives-ouvertes.fr/hal-01883380/file/hal.pdf pdf]"
      },
      "date": 1641311060461
    },
    {
      "type": "edit",
      "id": "77ea2179dcb4c898",
      "item": {
        "type": "paragraph",
        "id": "77ea2179dcb4c898",
        "text": "Arriving at the startup that first funded the OpenSmalltalk-VM, the first author had considerable experience maintaining the 2nd generation Deutsch Schiffmann VM written in C, and was sceptical that the Squeak Simulator would be viable for implementing a JIT. The startup wanted incremental development so as to reap value early and reduce risk, so it asked first for an interpreter using context-to-stack mapping. Writing this initial deliverable within the simulator was so much more productive and pleasurable than his previous work in C that he happily decided to stay with the simulator and invest in the necessary machine code simulation infrastructure. -- Two Decades of Smalltalk VM Development [https://hal.archives-ouvertes.fr/hal-01883380/file/hal.pdf pdf]"
      },
      "date": 1641311096012
    },
    {
      "type": "edit",
      "id": "77ea2179dcb4c898",
      "item": {
        "type": "paragraph",
        "id": "77ea2179dcb4c898",
        "text": "Arriving at the startup that first funded the OpenSmalltalk-VM, the first author had considerable experience maintaining the 2nd generation Deutsch Schiffmann VM written in C, and was sceptical that the Squeak Simulator would be viable for implementing a JIT. The startup wanted incremental development so as to reap value early and reduce risk, so it asked first for an interpreter using context-to-stack mapping. Writing this initial deliverable within the simulator was so much more productive and pleasurable than his previous work in C that he happily decided to stay with the simulator and invest in the necessary machine code simulation infrastructure. -- Two Decades of [[Smalltalk VM Development]] [https://hal.archives-ouvertes.fr/hal-01883380/file/hal.pdf pdf]"
      },
      "date": 1641311137601
    },
    {
      "id": "1aace12d06d0fd9d",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1aace12d06d0fd9d",
        "text": "> **Abstract**. OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler.\n>\n> In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
      },
      "after": "77ea2179dcb4c898",
      "date": 1641311145862
    },
    {
      "item": {
        "type": "factory",
        "id": "163c0141588b97ad"
      },
      "id": "163c0141588b97ad",
      "type": "add",
      "after": "1aace12d06d0fd9d",
      "date": 1641311242610
    },
    {
      "type": "edit",
      "id": "163c0141588b97ad",
      "item": {
        "type": "paragraph",
        "id": "163c0141588b97ad",
        "text": "See also [[Feenk]]"
      },
      "date": 1641311250565
    }
  ]
}