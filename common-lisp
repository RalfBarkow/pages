{
  "title": "Common Lisp",
  "story": [
    {
      "type": "html",
      "text": "<i>[[Common Lisp]], the mud ball of strength, [is] the acting patriarch of the Lisp family. CL was shaped by engineering concerns more than by the quest for conceptual clarity. But despite its practical applicability, CL offers DEFUN sadly absent from mainstream hacking.</i> -- the [[Tao Of Recursion]]",
      "id": "f0b5b05dc225a76bdeb460808946a494"
    },
    {
      "type": "html",
      "text": "\nDescended from one of the oldest surviving programming languages (only Fortran is older), [[Common Lisp]] is the first language with integrated support for [[Object Oriented Programming]] to get ANSI standardized.",
      "id": "f376b6fbb137bb801a6a8a1ba1c400f0"
    },
    {
      "type": "html",
      "text": "<i>I thought Ada 95 was... Actually it was maybe the first ISO standardized one.</i>",
      "id": "b00ac93aeb2709da3056c1e99f4d38e6"
    },
    {
      "type": "html",
      "text": "\nIt is a rich language with clear semantics which allows programming in procedural, functional, object oriented and logical (rule based) style all in the same program.",
      "id": "cb54c262f2956d848c2506a4b5442a7c"
    },
    {
      "type": "html",
      "text": "\nIt's big, making it somewhat of a [[Career Language]]. Depending on your viewpoint, [[Common Lisp]] is either a very large language, or a very small language with a single big library.  Opinions about it are often polarised: what one man calls \"the sum of years of wisdom as to what actually works and is needed in production systems\", another may characterise as \"decades worth of ad-hoc fudges\" and reminiscent of Fortran.",
      "id": "87e2c45afe4305b4f9ab10c16702b237"
    },
    {
      "type": "html",
      "text": "\n[[Common Lisp]] has, at least (standardized) ",
      "id": "e395b1c9eb0b071a25a7487100da35b4"
    },
    {
      "type": "html",
      "text": " A well designed, well integrated object system ([[Common Lisp Object System]], short CLOS)",
      "id": "be7440a602fd7193a4e866a451d01a56"
    },
    {
      "type": "html",
      "text": " A well designed exception/condition handling mechanism ",
      "id": "06063e1cbaeb116d3a3e5abaf5ad81ea"
    },
    {
      "type": "html",
      "text": " A not so easy to use/understand, but working, Package system ",
      "id": "5827da4f1057a9fe85ff1189ab58367e"
    },
    {
      "type": "html",
      "text": " Support for [[Runtime Compilation]]",
      "id": "974fcba0c763a1e94fb72d7b41b606be"
    },
    {
      "type": "html",
      "text": "\nand often",
      "id": "8be82f1ee3b12bcbce2696a3a4867929"
    },
    {
      "type": "html",
      "text": " Multi-threading (every commercial vendor)",
      "id": "09fea10d5e8fb90421be44c9662e4c39"
    },
    {
      "type": "html",
      "text": " A [[Meta Object Protocol]] (the MOP is supplied in most implementations)",
      "id": "ea91514bf450d093bdd3d066c6fb916b"
    },
    {
      "type": "html",
      "text": "\nFor further information:",
      "id": "27d3265d9041c26100c7004ab58201a0"
    },
    {
      "type": "html",
      "text": " The [[Association Of Lisp Users]] maintains the [[Alu Wiki]].",
      "id": "396b4ad3d736f59b95970e77352927a1"
    },
    {
      "type": "html",
      "text": " The [[Common Lisp Hyper Spec]] - the ANSI language standard marked up in HTML",
      "id": "a5cb8082f12d90e026495fd2eedc08d6"
    },
    {
      "type": "html",
      "text": " The [[Common Lisp Object System]] [[Meta Object Protocol]] is described in the book [[The Art Of The Meta Object Protocol]] and at [http://www.lisp.org/mop/index.html www.lisp.org].",
      "id": "ee30fcfe9139d053051ffcf14d11bb0a"
    },
    {
      "type": "html",
      "text": " A list of [[Definitive Common Lisp Books]]",
      "id": "002ffd49b64a58f9c57a8ca9988c15fd"
    },
    {
      "type": "html",
      "text": " [[Commercial Lisp Applications]]",
      "id": "4d7c17326cbbfa52417552c15605fac5"
    },
    {
      "type": "html",
      "text": " For free stuff (free as in [[Free Software]]),  [http://www.cliki.net/ www.cliki.net]",
      "id": "ffa3c0a4c6629ccb06c41590c23090fb"
    },
    {
      "type": "html",
      "text": " For searchable documentation, [http://lispdoc.com/ lispdoc.com]",
      "id": "f4d14f5a13f026da8b8004cebcc18cf1"
    },
    {
      "type": "html",
      "text": "\nFor a much smaller and arguably more elegant language, also see [[Scheme Language]]. There is an interesting comparison between the [[Common Lisp]] and Scheme communities in the [[Worse Is Better]] paper. Fans of both languages often fail to communicate because they've got different standards and goals. ",
      "id": "28f8f367b2a3d4cb039b20c5cfffa0db"
    },
    {
      "type": "html",
      "text": "\nBased on contributions by [[Keith Braithwaite]], [[Alain Picard]], Lieven and others.  ",
      "id": "c0a31f529b7ab218be8fb24fca5ab5c4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "[[Common Lisp]] has <i>first class</i> functions, i.e. functions are objects which can be created at runtime, and passed as arguments to other functions. --[[Alain Picard]]",
      "id": "af3dd7fb0788beeadda0846683cc68b6"
    },
    {
      "type": "html",
      "text": "\nThese first-class functions also have their own state, so they are functors. All Lisp functions are functors; there is no separation between functions that are \"just code\" and \"function objects\".",
      "id": "bfba5dd6ba74d5f71b5b7385fb0c752b"
    },
    {
      "type": "html",
      "text": "\nThe state takes the form of captured lexical variable bindings. You don't need to use LAMBDA to capture bindings; a top-level DEFUN can do it too:",
      "id": "7f4151d8ec7a6bde9281b71f1bba6d65"
    },
    {
      "type": "code",
      "text": "  (let ((private-variable 42))\n    (defun foo ()\n      ...))",
      "id": "4e62f1fea9b8665fb832da04e995713d"
    },
    {
      "type": "html",
      "text": "\nThe code in the place of ... sees private-variable in its lexical scope. There is one instance of this variable associated with the one and only function object that is globally tied to the symbol FOO; the variable is captured at the time the DEFUN expression is evaluated. This variable then acts something like a static variable in C. Or, alternately, you can think of FOO as a \"singleton\" object with an \"instance variable\".",
      "id": "ac4302f9526e1fd40eb54e01075269c5"
    },
    {
      "type": "html",
      "text": "--[[Kaz Kylheku]]",
      "id": "e9a5c19600c76ea79d9782407a371950"
    },
    {
      "type": "html",
      "text": "\n[[Common Lisp]] functions are closures (see [[Lexical Closure]]).",
      "id": "493c8af73a2a3fbfa77eafe72a449824"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "[[Common Lisp]] [[Generic Function]]s are first-class functions also. This means you can indirect upon generic functions. This is what the [[Visitor Pattern]] is all about; but it's built into the Lisp language so you can do it in one line. (walk-my-object #'with-this-gf my-object)",
      "id": "10b68e0ef7691392baf401a67f149192"
    },
    {
      "type": "html",
      "text": "\nIn fact, with plain old MAPCAR you can do the visitor pattern:",
      "id": "8d1674b66dc09725b3335b2b5f4f321a"
    },
    {
      "type": "code",
      "text": "  ;; ``visit'' every element of the list, which can be heterogeneous collection of CLOS\n  ;; objects or built-in types.",
      "id": "d37768ce9e34133993c93c6ec1ec1901"
    },
    {
      "type": "code",
      "text": "  (mapcar #'foo-generic-function object-list)",
      "id": "5db936a72633462efac7edfab43cf102"
    },
    {
      "type": "html",
      "text": "\nNow foo-generic-function can be specialized for different types. A good example of this is the standard PRINT-OBJECT, which is what you specialize with a method to allow an object to be printable to a stream.",
      "id": "b5761b02f851b1359f333ab0c4b0a98c"
    },
    {
      "type": "code",
      "text": "  (mapcar #'print-object object-list) ;; visit each object and print it.",
      "id": "cb68d76d019b4c5b41ec65b7ce402980"
    },
    {
      "type": "html",
      "text": "--[[Kaz Kylheku]]",
      "id": "e9a5c19600c76ea79d9782407a371950"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "<i>This practice is not only common, but institutionalized. For example, in the OO world you hear a good deal about \"patterns\". I wonder if these patterns are not sometimes evidence of case (c), the human compiler, at work. When I see patterns in my programs, I consider it a sign of trouble. The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I'm using abstractions that aren't powerful enough-- often that I'm generating by hand the expansions of some macro that I need to write.</i> -- [http://www.paulgraham.com/icad.html www.paulgraham.com]",
      "id": "9afbfa755fe82e814b5f8cca8ecf24c9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "The first time I used [[Common Lisp]], I was surprised to see people using symbols where I would have used strings. Sometimes these symbols don't have values at all (or their values are themselves). It reminds me of [[Wiki Tag]]s.",
      "id": "71294ba45d8022b5359ff10608d1c4a9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "Lisp is an interesting and fairly controversial language. Perhaps some of the [[Smug Lisp Weenie]]s could have a crack at [[Lisp Questions]] to elucidate us all.",
      "id": "d4236f41b0d135c4f7e28b0f8e639686"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "<i>the mudball of strength</i>: see [[Joel Moses On Apl And Lisp]].",
      "id": "1a315d057746a83abb650b260908251e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "I'd dispute the hard-to-understandness of the package system: Most often it seems to be simply misunderstood due to\nbooks on CL leaving it too late, so that by the time it is explained the reader has already developed mental models about\nit that are both wrong and hard to break. The package system is essential enough that it should be dealt with right\nafter explaining REPL interaction, sexps, defun, and other basics -- probably before getting to lambda and defmacro, I'd say.",
      "id": "ab184ee6398cad5b9a0a90284c32e5e7"
    },
    {
      "type": "html",
      "text": "--[[Nikodemus Siivola]]",
      "id": "263802ffa2626160949297403d0e9e82"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "[[Simplified Wrapper And Interface Generator]] (SWIG) can be used to make calls to [[Cee Language]] or [[Cee Plus Plus]] code.",
      "id": "f67cf8006e4c8f66631be2eaa702409c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "See also: [[Lisp Language]], [[Why We Love Lisp]], [[Common Lisp Macro Examples]], [[Quick Lisp]], [[Another System Definition Facility]]",
      "id": "4eadf50beab98272825bfb673478e5b0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
    },
    {
      "type": "html",
      "text": "[[Category Common Lisp]] [[Category Programming Language]]",
      "id": "d392d6478fee46984d4cfec416263549"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CommonLisp c2.com]",
      "id": "4fb82247b9360f7b3b574729c33b563f"
    }
  ],
  "journal": [
    {
      "date": 1400000112000,
      "id": "c99ca4da3245d4e5a7d586f5cb066cf0",
      "type": "create",
      "item": {
        "title": "Common Lisp",
        "story": [
          {
            "type": "html",
            "text": "<i>[[Common Lisp]], the mud ball of strength, [is] the acting patriarch of the Lisp family. CL was shaped by engineering concerns more than by the quest for conceptual clarity. But despite its practical applicability, CL offers DEFUN sadly absent from mainstream hacking.</i> -- the [[Tao Of Recursion]]",
            "id": "f0b5b05dc225a76bdeb460808946a494"
          },
          {
            "type": "html",
            "text": "\nDescended from one of the oldest surviving programming languages (only Fortran is older), [[Common Lisp]] is the first language with integrated support for [[Object Oriented Programming]] to get ANSI standardized.",
            "id": "f376b6fbb137bb801a6a8a1ba1c400f0"
          },
          {
            "type": "html",
            "text": "<i>I thought Ada 95 was... Actually it was maybe the first ISO standardized one.</i>",
            "id": "b00ac93aeb2709da3056c1e99f4d38e6"
          },
          {
            "type": "html",
            "text": "\nIt is a rich language with clear semantics which allows programming in procedural, functional, object oriented and logical (rule based) style all in the same program.",
            "id": "cb54c262f2956d848c2506a4b5442a7c"
          },
          {
            "type": "html",
            "text": "\nIt's big, making it somewhat of a [[Career Language]]. Depending on your viewpoint, [[Common Lisp]] is either a very large language, or a very small language with a single big library.  Opinions about it are often polarised: what one man calls \"the sum of years of wisdom as to what actually works and is needed in production systems\", another may characterise as \"decades worth of ad-hoc fudges\" and reminiscent of Fortran.",
            "id": "87e2c45afe4305b4f9ab10c16702b237"
          },
          {
            "type": "html",
            "text": "\n[[Common Lisp]] has, at least (standardized) ",
            "id": "e395b1c9eb0b071a25a7487100da35b4"
          },
          {
            "type": "html",
            "text": " A well designed, well integrated object system ([[Common Lisp Object System]], short CLOS)",
            "id": "be7440a602fd7193a4e866a451d01a56"
          },
          {
            "type": "html",
            "text": " A well designed exception/condition handling mechanism ",
            "id": "06063e1cbaeb116d3a3e5abaf5ad81ea"
          },
          {
            "type": "html",
            "text": " A not so easy to use/understand, but working, Package system ",
            "id": "5827da4f1057a9fe85ff1189ab58367e"
          },
          {
            "type": "html",
            "text": " Support for [[Runtime Compilation]]",
            "id": "974fcba0c763a1e94fb72d7b41b606be"
          },
          {
            "type": "html",
            "text": "\nand often",
            "id": "8be82f1ee3b12bcbce2696a3a4867929"
          },
          {
            "type": "html",
            "text": " Multi-threading (every commercial vendor)",
            "id": "09fea10d5e8fb90421be44c9662e4c39"
          },
          {
            "type": "html",
            "text": " A [[Meta Object Protocol]] (the MOP is supplied in most implementations)",
            "id": "ea91514bf450d093bdd3d066c6fb916b"
          },
          {
            "type": "html",
            "text": "\nFor further information:",
            "id": "27d3265d9041c26100c7004ab58201a0"
          },
          {
            "type": "html",
            "text": " The [[Association Of Lisp Users]] maintains the [[Alu Wiki]].",
            "id": "396b4ad3d736f59b95970e77352927a1"
          },
          {
            "type": "html",
            "text": " The [[Common Lisp Hyper Spec]] - the ANSI language standard marked up in HTML",
            "id": "a5cb8082f12d90e026495fd2eedc08d6"
          },
          {
            "type": "html",
            "text": " The [[Common Lisp Object System]] [[Meta Object Protocol]] is described in the book [[The Art Of The Meta Object Protocol]] and at [http://www.lisp.org/mop/index.html www.lisp.org].",
            "id": "ee30fcfe9139d053051ffcf14d11bb0a"
          },
          {
            "type": "html",
            "text": " A list of [[Definitive Common Lisp Books]]",
            "id": "002ffd49b64a58f9c57a8ca9988c15fd"
          },
          {
            "type": "html",
            "text": " [[Commercial Lisp Applications]]",
            "id": "4d7c17326cbbfa52417552c15605fac5"
          },
          {
            "type": "html",
            "text": " For free stuff (free as in [[Free Software]]),  [http://www.cliki.net/ www.cliki.net]",
            "id": "ffa3c0a4c6629ccb06c41590c23090fb"
          },
          {
            "type": "html",
            "text": " For searchable documentation, [http://lispdoc.com/ lispdoc.com]",
            "id": "f4d14f5a13f026da8b8004cebcc18cf1"
          },
          {
            "type": "html",
            "text": "\nFor a much smaller and arguably more elegant language, also see [[Scheme Language]]. There is an interesting comparison between the [[Common Lisp]] and Scheme communities in the [[Worse Is Better]] paper. Fans of both languages often fail to communicate because they've got different standards and goals. ",
            "id": "28f8f367b2a3d4cb039b20c5cfffa0db"
          },
          {
            "type": "html",
            "text": "\nBased on contributions by [[Keith Braithwaite]], [[Alain Picard]], Lieven and others.  ",
            "id": "c0a31f529b7ab218be8fb24fca5ab5c4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "[[Common Lisp]] has <i>first class</i> functions, i.e. functions are objects which can be created at runtime, and passed as arguments to other functions. --[[Alain Picard]]",
            "id": "af3dd7fb0788beeadda0846683cc68b6"
          },
          {
            "type": "html",
            "text": "\nThese first-class functions also have their own state, so they are functors. All Lisp functions are functors; there is no separation between functions that are \"just code\" and \"function objects\".",
            "id": "bfba5dd6ba74d5f71b5b7385fb0c752b"
          },
          {
            "type": "html",
            "text": "\nThe state takes the form of captured lexical variable bindings. You don't need to use LAMBDA to capture bindings; a top-level DEFUN can do it too:",
            "id": "7f4151d8ec7a6bde9281b71f1bba6d65"
          },
          {
            "type": "code",
            "text": "  (let ((private-variable 42))\n    (defun foo ()\n      ...))",
            "id": "4e62f1fea9b8665fb832da04e995713d"
          },
          {
            "type": "html",
            "text": "\nThe code in the place of ... sees private-variable in its lexical scope. There is one instance of this variable associated with the one and only function object that is globally tied to the symbol FOO; the variable is captured at the time the DEFUN expression is evaluated. This variable then acts something like a static variable in C. Or, alternately, you can think of FOO as a \"singleton\" object with an \"instance variable\".",
            "id": "ac4302f9526e1fd40eb54e01075269c5"
          },
          {
            "type": "html",
            "text": "--[[Kaz Kylheku]]",
            "id": "e9a5c19600c76ea79d9782407a371950"
          },
          {
            "type": "html",
            "text": "\n[[Common Lisp]] functions are closures (see [[Lexical Closure]]).",
            "id": "493c8af73a2a3fbfa77eafe72a449824"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "[[Common Lisp]] [[Generic Function]]s are first-class functions also. This means you can indirect upon generic functions. This is what the [[Visitor Pattern]] is all about; but it's built into the Lisp language so you can do it in one line. (walk-my-object #'with-this-gf my-object)",
            "id": "10b68e0ef7691392baf401a67f149192"
          },
          {
            "type": "html",
            "text": "\nIn fact, with plain old MAPCAR you can do the visitor pattern:",
            "id": "8d1674b66dc09725b3335b2b5f4f321a"
          },
          {
            "type": "code",
            "text": "  ;; ``visit'' every element of the list, which can be heterogeneous collection of CLOS\n  ;; objects or built-in types.",
            "id": "d37768ce9e34133993c93c6ec1ec1901"
          },
          {
            "type": "code",
            "text": "  (mapcar #'foo-generic-function object-list)",
            "id": "5db936a72633462efac7edfab43cf102"
          },
          {
            "type": "html",
            "text": "\nNow foo-generic-function can be specialized for different types. A good example of this is the standard PRINT-OBJECT, which is what you specialize with a method to allow an object to be printable to a stream.",
            "id": "b5761b02f851b1359f333ab0c4b0a98c"
          },
          {
            "type": "code",
            "text": "  (mapcar #'print-object object-list) ;; visit each object and print it.",
            "id": "cb68d76d019b4c5b41ec65b7ce402980"
          },
          {
            "type": "html",
            "text": "--[[Kaz Kylheku]]",
            "id": "e9a5c19600c76ea79d9782407a371950"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "<i>This practice is not only common, but institutionalized. For example, in the OO world you hear a good deal about \"patterns\". I wonder if these patterns are not sometimes evidence of case (c), the human compiler, at work. When I see patterns in my programs, I consider it a sign of trouble. The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I'm using abstractions that aren't powerful enough-- often that I'm generating by hand the expansions of some macro that I need to write.</i> -- [http://www.paulgraham.com/icad.html www.paulgraham.com]",
            "id": "9afbfa755fe82e814b5f8cca8ecf24c9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "The first time I used [[Common Lisp]], I was surprised to see people using symbols where I would have used strings. Sometimes these symbols don't have values at all (or their values are themselves). It reminds me of [[Wiki Tag]]s.",
            "id": "71294ba45d8022b5359ff10608d1c4a9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "Lisp is an interesting and fairly controversial language. Perhaps some of the [[Smug Lisp Weenie]]s could have a crack at [[Lisp Questions]] to elucidate us all.",
            "id": "d4236f41b0d135c4f7e28b0f8e639686"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "<i>the mudball of strength</i>: see [[Joel Moses On Apl And Lisp]].",
            "id": "1a315d057746a83abb650b260908251e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "I'd dispute the hard-to-understandness of the package system: Most often it seems to be simply misunderstood due to\nbooks on CL leaving it too late, so that by the time it is explained the reader has already developed mental models about\nit that are both wrong and hard to break. The package system is essential enough that it should be dealt with right\nafter explaining REPL interaction, sexps, defun, and other basics -- probably before getting to lambda and defmacro, I'd say.",
            "id": "ab184ee6398cad5b9a0a90284c32e5e7"
          },
          {
            "type": "html",
            "text": "--[[Nikodemus Siivola]]",
            "id": "263802ffa2626160949297403d0e9e82"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "[[Simplified Wrapper And Interface Generator]] (SWIG) can be used to make calls to [[Cee Language]] or [[Cee Plus Plus]] code.",
            "id": "f67cf8006e4c8f66631be2eaa702409c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "See also: [[Lisp Language]], [[Why We Love Lisp]], [[Common Lisp Macro Examples]], [[Quick Lisp]], [[Another System Definition Facility]]",
            "id": "4eadf50beab98272825bfb673478e5b0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0ea3d1893deff3d4dd5f9b2f7eef7aad"
          },
          {
            "type": "html",
            "text": "[[Category Common Lisp]] [[Category Programming Language]]",
            "id": "d392d6478fee46984d4cfec416263549"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CommonLisp c2.com]",
            "id": "4fb82247b9360f7b3b574729c33b563f"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626161267195
    }
  ]
}