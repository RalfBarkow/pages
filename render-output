{
  "title": "Render Output",
  "story": [
    {
      "type": "markdown",
      "id": "aef5e4a95da574cf",
      "text": "– [https://www.notion.so/Eval-pane-settings-0795337b01b9404cbd8ff7cdf4b3583d#1d246a33ecc14eec97c830821379228b Eval-pane-settings]"
    },
    {
      "type": "paragraph",
      "id": "23d949b49a911383",
      "text": "Visit this [https://natto.dev/example/dc256ca2a66a4f05b176cacd75667550 canvas] for an interactive demo of render outputs."
    },
    {
      "type": "markdown",
      "id": "2ec4b6a0fc86f6e2",
      "text": "> The canvas demonstrates ways eval panes can render their expression values. Click the settings icon in an eval pane's header to change an its render mode.\n\nDocumentation: https://www.notion.so/Eval-pane-settings-0795337b01b9404cbd8ff7cdf4b3583d"
    },
    {
      "type": "markdown",
      "id": "4a445990767af7c4",
      "text": "This example demonstrates creating a canvas element for Pts.js to use. The render output is set to DOM.\n\nfrom https://ptsjs.org/demo/edit/?name=pts.quickStart\n\nnote: if mouse position is off, click run again"
    },
    {
      "type": "code",
      "id": "3ff67358a3595706",
      "text": "// Source code licensed under Apache License 2.0. \n// Copyright © 2017 William Ngan. (https://github.com/williamngan/pts)\n\nwindow.demoDescription = \"An example of using quickStart function to create this in 5 lines of code\";\n\n//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  // Pts.quickStart instantiates a CanvasSapce and CanvasForm and put the respective \"space\" and \"form\" variables into global scope and bind mouse and touch events.\n  // It returns a function where you can init with callback functions ( animateFn, startFn, actionFn, resizeFn )\n  // See guides for more details: https://ptsjs.org/guide/Get-started-0100.html\n  var run = Pts.quickStart( \"pt\", \"#f03\" ); \n\n  // Pass an animate callback function to run\n  run( ( time, ftime ) => { \n    let subs = space.innerBound.map( (p) => Line.subpoints( [p, space.pointer], 30 ) );\n    let rects = Util.zip( subs ).map( (r,i) => Rectangle.corners( r ).rotate2D( i*Math.PI/60, space.pointer ) );\n    form.strokeOnly(\"#FDC\", 2).polygons( rects );\n  });\n\n})();\n\n"
    },
    {
      "type": "markdown",
      "id": "cef5ca8aeb132c3c",
      "text": "See guides for more details: https://ptsjs.org/guide/Get-started-0100.html"
    },
    {
      "type": "markdown",
      "id": "9842765858ad4157",
      "text": "# Space, Form, and Point\n\nPts is built upon the abstractions of Space, Form, and Point. If that's too abstract, you can think of it like drawing: Space represents a piece of paper, Form represents a pencil, and Points represent an idea — and you connect the dots."
    },
    {
      "type": "paragraph",
      "id": "a38e87ef1676f789",
      "text": "Given an idea, you may express it in different forms in different spaces. Would it be expressed in pixels or LEDs? Is it visible or audible? Does it look like abstract art or ASCII art? As Pts develops, it will offer more Spaces and Forms that enable you to experiment with different ideas and their different expressions.\n\nBut enough of abstractions for now. Let's see how it works in a concrete example. In the following sections, we will create a quick sketch step-by-step and discuss the main features of Pts."
    },
    {
      "type": "paragraph",
      "id": "a7c636843a968cb8",
      "text": "You may also be interested in [https://medium.com/@williamngan/pt-93382bf5943e this article] which discusses the concepts of Space, Form, and Point."
    },
    {
      "type": "markdown",
      "id": "ddc003be3b6e69df",
      "text": "What is a simple concept that can be modeled, extended, and visualized in code?\nA point.\n\nWhat is a point?\nA position in a space.\n\nWhat is this space?\nA compartment of an outer space that extends infinitely. A room. A cave. A pair of brackets.\n\nWhat are these rooms or caves or brackets?\nA context. ( . ) { . } | . | [ . ]\n\nWhat is a context?\nA limited set of possibilities, comprehensible to a human mind."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Render Output",
        "story": []
      },
      "date": 1652462856246
    },
    {
      "item": {
        "type": "factory",
        "id": "aef5e4a95da574cf"
      },
      "id": "aef5e4a95da574cf",
      "type": "add",
      "date": 1652462863660
    },
    {
      "type": "edit",
      "id": "aef5e4a95da574cf",
      "item": {
        "type": "paragraph",
        "id": "aef5e4a95da574cf",
        "text": "– https://www.notion.so/Eval-pane-settings-0795337b01b9404cbd8ff7cdf4b3583d#1d246a33ecc14eec97c830821379228b"
      },
      "date": 1652462868474
    },
    {
      "type": "edit",
      "id": "aef5e4a95da574cf",
      "item": {
        "type": "markdown",
        "id": "aef5e4a95da574cf",
        "text": "– https://www.notion.so/Eval-pane-settings-0795337b01b9404cbd8ff7cdf4b3583d#1d246a33ecc14eec97c830821379228b"
      },
      "date": 1652462869851
    },
    {
      "type": "edit",
      "id": "aef5e4a95da574cf",
      "item": {
        "type": "markdown",
        "id": "aef5e4a95da574cf",
        "text": "– [https://www.notion.so/Eval-pane-settings-0795337b01b9404cbd8ff7cdf4b3583d#1d246a33ecc14eec97c830821379228b Eval-pane-settings]"
      },
      "date": 1652462892737
    },
    {
      "item": {
        "type": "factory",
        "id": "23d949b49a911383"
      },
      "id": "23d949b49a911383",
      "type": "add",
      "after": "aef5e4a95da574cf",
      "date": 1652462908561
    },
    {
      "type": "edit",
      "id": "23d949b49a911383",
      "item": {
        "type": "paragraph",
        "id": "23d949b49a911383",
        "text": "Visit this canvas for an interactive demo of render outputs."
      },
      "date": 1652462910750
    },
    {
      "type": "edit",
      "id": "23d949b49a911383",
      "item": {
        "type": "paragraph",
        "id": "23d949b49a911383",
        "text": "Visit this [https://natto.dev/example/dc256ca2a66a4f05b176cacd75667550 canvas] for an interactive demo of render outputs."
      },
      "date": 1652462926224
    },
    {
      "item": {
        "type": "factory",
        "id": "2ec4b6a0fc86f6e2"
      },
      "id": "2ec4b6a0fc86f6e2",
      "type": "add",
      "after": "23d949b49a911383",
      "date": 1652462941482
    },
    {
      "type": "edit",
      "id": "2ec4b6a0fc86f6e2",
      "item": {
        "type": "markdown",
        "id": "2ec4b6a0fc86f6e2",
        "text": "> The canvas demonstrates ways eval panes can render their expression values. Click the settings icon in an eval pane's header to change an its render mode.\n\nDocumentation: https://www.notion.so/Eval-pane-settings-0795337b01b9404cbd8ff7cdf4b3583d"
      },
      "date": 1652462944537
    },
    {
      "item": {
        "type": "factory",
        "id": "4a445990767af7c4"
      },
      "id": "4a445990767af7c4",
      "type": "add",
      "after": "2ec4b6a0fc86f6e2",
      "date": 1652462961712
    },
    {
      "type": "edit",
      "id": "4a445990767af7c4",
      "item": {
        "type": "paragraph",
        "id": "4a445990767af7c4",
        "text": "This example demonstrates creating a canvas element for Pts.js to use. The render output is set to DOM.\n\nfrom https://ptsjs.org/demo/edit/?name=pts.quickStart\n\nnote: if mouse position is off, click run again"
      },
      "date": 1652462962861
    },
    {
      "type": "edit",
      "id": "4a445990767af7c4",
      "item": {
        "type": "markdown",
        "id": "4a445990767af7c4",
        "text": "This example demonstrates creating a canvas element for Pts.js to use. The render output is set to DOM.\n\nfrom https://ptsjs.org/demo/edit/?name=pts.quickStart\n\nnote: if mouse position is off, click run again"
      },
      "date": 1652462964688
    },
    {
      "item": {
        "type": "factory",
        "id": "3ff67358a3595706"
      },
      "id": "3ff67358a3595706",
      "type": "add",
      "after": "4a445990767af7c4",
      "date": 1652463006362
    },
    {
      "type": "edit",
      "id": "3ff67358a3595706",
      "item": {
        "type": "code",
        "id": "3ff67358a3595706",
        "text": "// Source code licensed under Apache License 2.0. \n// Copyright © 2017 William Ngan. (https://github.com/williamngan/pts)\n\nwindow.demoDescription = \"An example of using quickStart function to create this in 5 lines of code\";\n\n//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  // Pts.quickStart instantiates a CanvasSapce and CanvasForm and put the respective \"space\" and \"form\" variables into global scope and bind mouse and touch events.\n  // It returns a function where you can init with callback functions ( animateFn, startFn, actionFn, resizeFn )\n  // See guides for more details: https://ptsjs.org/guide/Get-started-0100.html\n  var run = Pts.quickStart( \"pt\", \"#f03\" ); \n\n  // Pass an animate callback function to run\n  run( ( time, ftime ) => { \n    let subs = space.innerBound.map( (p) => Line.subpoints( [p, space.pointer], 30 ) );\n    let rects = Util.zip( subs ).map( (r,i) => Rectangle.corners( r ).rotate2D( i*Math.PI/60, space.pointer ) );\n    form.strokeOnly(\"#FDC\", 2).polygons( rects );\n  });\n\n})();\n\n"
      },
      "date": 1652463008317
    },
    {
      "item": {
        "type": "factory",
        "id": "cef5ca8aeb132c3c"
      },
      "id": "cef5ca8aeb132c3c",
      "type": "add",
      "after": "3ff67358a3595706",
      "date": 1652463043327
    },
    {
      "type": "edit",
      "id": "cef5ca8aeb132c3c",
      "item": {
        "type": "paragraph",
        "id": "cef5ca8aeb132c3c",
        "text": "See guides for more details: https://ptsjs.org/guide/Get-started-0100.html"
      },
      "date": 1652463045685
    },
    {
      "type": "edit",
      "id": "cef5ca8aeb132c3c",
      "item": {
        "type": "markdown",
        "id": "cef5ca8aeb132c3c",
        "text": "See guides for more details: https://ptsjs.org/guide/Get-started-0100.html"
      },
      "date": 1652463047515
    },
    {
      "item": {
        "type": "factory",
        "id": "9842765858ad4157"
      },
      "id": "9842765858ad4157",
      "type": "add",
      "after": "cef5ca8aeb132c3c",
      "date": 1652463081661
    },
    {
      "type": "edit",
      "id": "9842765858ad4157",
      "item": {
        "type": "paragraph",
        "id": "9842765858ad4157",
        "text": "Space, Form, and Point\n\nPts is built upon the abstractions of Space, Form, and Point. If that's too abstract, you can think of it like drawing: Space represents a piece of paper, Form represents a pencil, and Points represent an idea — and you connect the dots."
      },
      "date": 1652463082977
    },
    {
      "type": "edit",
      "id": "9842765858ad4157",
      "item": {
        "type": "paragraph",
        "id": "9842765858ad4157",
        "text": "# Space, Form, and Point\n\nPts is built upon the abstractions of Space, Form, and Point. If that's too abstract, you can think of it like drawing: Space represents a piece of paper, Form represents a pencil, and Points represent an idea — and you connect the dots."
      },
      "date": 1652463087317
    },
    {
      "type": "edit",
      "id": "9842765858ad4157",
      "item": {
        "type": "markdown",
        "id": "9842765858ad4157",
        "text": "# Space, Form, and Point\n\nPts is built upon the abstractions of Space, Form, and Point. If that's too abstract, you can think of it like drawing: Space represents a piece of paper, Form represents a pencil, and Points represent an idea — and you connect the dots."
      },
      "date": 1652463088629
    },
    {
      "item": {
        "type": "factory",
        "id": "a38e87ef1676f789"
      },
      "id": "a38e87ef1676f789",
      "type": "add",
      "after": "9842765858ad4157",
      "date": 1652463127310
    },
    {
      "type": "edit",
      "id": "a38e87ef1676f789",
      "item": {
        "type": "paragraph",
        "id": "a38e87ef1676f789",
        "text": "Given an idea, you may express it in different forms in different spaces. Would it be expressed in pixels or LEDs? Is it visible or audible? Does it look like abstract art or ASCII art? As Pts develops, it will offer more Spaces and Forms that enable you to experiment with different ideas and their different expressions.\n\nBut enough of abstractions for now. Let's see how it works in a concrete example. In the following sections, we will create a quick sketch step-by-step and discuss the main features of Pts.\nYou may also be interested in this article which discusses the concepts of Space, Form, and Point."
      },
      "date": 1652463129795
    },
    {
      "type": "edit",
      "id": "a38e87ef1676f789",
      "item": {
        "type": "paragraph",
        "id": "a38e87ef1676f789",
        "text": "Given an idea, you may express it in different forms in different spaces. Would it be expressed in pixels or LEDs? Is it visible or audible? Does it look like abstract art or ASCII art? As Pts develops, it will offer more Spaces and Forms that enable you to experiment with different ideas and their different expressions.\n\nBut enough of abstractions for now. Let's see how it works in a concrete example. In the following sections, we will create a quick sketch step-by-step and discuss the main features of Pts."
      },
      "date": 1652463153711
    },
    {
      "type": "add",
      "id": "a7c636843a968cb8",
      "item": {
        "type": "paragraph",
        "id": "a7c636843a968cb8",
        "text": "You may also be interested in this article which discusses the concepts of Space, Form, and Point."
      },
      "after": "a38e87ef1676f789",
      "date": 1652463155047
    },
    {
      "type": "edit",
      "id": "a7c636843a968cb8",
      "item": {
        "type": "paragraph",
        "id": "a7c636843a968cb8",
        "text": "You may also be interested in [https://medium.com/@williamngan/pt-93382bf5943e this article] which discusses the concepts of Space, Form, and Point."
      },
      "date": 1652463215113
    },
    {
      "item": {
        "type": "factory",
        "id": "ddc003be3b6e69df"
      },
      "id": "ddc003be3b6e69df",
      "type": "add",
      "after": "a7c636843a968cb8",
      "date": 1652463262680
    },
    {
      "type": "edit",
      "id": "ddc003be3b6e69df",
      "item": {
        "type": "markdown",
        "id": "ddc003be3b6e69df",
        "text": "What is a simple concept that can be modeled, extended, and visualized in code?\nA point.\n\nWhat is a point?\nA position in a space.\n\nWhat is this space?\nA compartment of an outer space that extends infinitely. A room. A cave. A pair of brackets.\n\nWhat are these rooms or caves or brackets?\nA context. ( . ) { . } | . | [ . ]\n\nWhat is a context?\nA limited set of possibilities, comprehensible to a human mind."
      },
      "date": 1652463265412
    }
  ]
}