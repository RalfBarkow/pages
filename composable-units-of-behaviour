{
  "title": "Composable Units of Behaviour",
  "story": [
    {
      "type": "paragraph",
      "id": "72eb71a60742ba16",
      "text": "Despite the undisputed prominence of [[Inheritance]] as the fundamental reuse mechanism in object-oriented programming languages, the main variants – single inheritance, multiple inheritance, and mixin inheritance – all suffer from conceptual and practical problems. "
    },
    {
      "type": "paragraph",
      "id": "1528bd74ecbcea35",
      "text": "In the first part of this paper, we identify and illustrate these problems. We then present [[Traits]], a simple compositional model for structuring object-oriented programs. A [[Trait]] is essentially a group of pure methods that serves as a building block for classes and is a primitive unit of code reuse. In this model, classes are composed from a set of traits by specifying glue code that connects the traits together and accesses the necessary state. We demonstrate how traits overcome the problems arising from the different variants of inheritance, we discuss how traits can be implemented effectively, and we summarize our experience applying traits to refactor an existing class hierarchy.\n"
    },
    {
      "type": "pagefold",
      "id": "462245a96f157b5f",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c3a14580883e9b58",
      "text": "SCHÄRLI, Nathanael, DUCASSE, Stéphane, NIERSTRASZ, Oscar and BLACK, Andrew P., 2003. [[Traits]]: Composable Units of Behaviour. In: CARDELLI, Luca (ed.), ECOOP 2003 – Object-Oriented Programming. Berlin, Heidelberg: Springer. 2003. p. 248–274. Lecture Notes in Computer Science. ISBN 978-3-540-45070-2. DOI 10.1007/978-3-540-45070-2_12. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Composable Units of Behaviour",
        "story": []
      },
      "date": 1671458701929
    },
    {
      "item": {
        "type": "factory",
        "id": "c3a14580883e9b58"
      },
      "id": "c3a14580883e9b58",
      "type": "add",
      "date": 1671458703810
    },
    {
      "type": "edit",
      "id": "c3a14580883e9b58",
      "item": {
        "type": "paragraph",
        "id": "c3a14580883e9b58",
        "text": "\nSCHÄRLI, Nathanael, DUCASSE, Stéphane, NIERSTRASZ, Oscar and BLACK, Andrew P., 2003. Traits: Composable Units of Behaviour. In: CARDELLI, Luca (ed.), ECOOP 2003 – Object-Oriented Programming. Berlin, Heidelberg: Springer. 2003. p. 248–274. Lecture Notes in Computer Science. ISBN 978-3-540-45070-2. DOI 10.1007/978-3-540-45070-2_12. Despite the undisputed prominence of inheritance as the fundamental reuse mechanism in object-oriented programming languages, the main variants—single inheritance, multiple inheritance, and mixin inheritance—all suffer from conceptual and practical problems. In the first part of this paper, we identify and illustrate these problems. We then present traits, a simple compositional model for structuring object-oriented programs. A trait is essentially a group of pure methods that serves as a building block for classes and is a primitive unit of code reuse. In this model, classes are composed from a set of traits by specifying glue code that connects the traits together and accesses the necessary state. We demonstrate how traits overcome the problems arising from the different variants of inheritance, we discuss how traits can be implemented effectively, and we summarize our experience applying traits to refactor an existing class hierarchy.\n"
      },
      "date": 1671458705466
    },
    {
      "type": "edit",
      "id": "c3a14580883e9b58",
      "item": {
        "type": "paragraph",
        "id": "c3a14580883e9b58",
        "text": "SCHÄRLI, Nathanael, DUCASSE, Stéphane, NIERSTRASZ, Oscar and BLACK, Andrew P., 2003. Traits: Composable Units of Behaviour. In: CARDELLI, Luca (ed.), ECOOP 2003 – Object-Oriented Programming. Berlin, Heidelberg: Springer. 2003. p. 248–274. Lecture Notes in Computer Science. ISBN 978-3-540-45070-2. DOI 10.1007/978-3-540-45070-2_12. "
      },
      "date": 1671458712386
    },
    {
      "type": "add",
      "id": "72eb71a60742ba16",
      "item": {
        "type": "paragraph",
        "id": "72eb71a60742ba16",
        "text": "Despite the undisputed prominence of inheritance as the fundamental reuse mechanism in object-oriented programming languages, the main variants—single inheritance, multiple inheritance, and mixin inheritance—all suffer from conceptual and practical problems. In the first part of this paper, we identify and illustrate these problems. We then present traits, a simple compositional model for structuring object-oriented programs. A trait is essentially a group of pure methods that serves as a building block for classes and is a primitive unit of code reuse. In this model, classes are composed from a set of traits by specifying glue code that connects the traits together and accesses the necessary state. We demonstrate how traits overcome the problems arising from the different variants of inheritance, we discuss how traits can be implemented effectively, and we summarize our experience applying traits to refactor an existing class hierarchy.\n"
      },
      "after": "c3a14580883e9b58",
      "date": 1671458713843
    },
    {
      "id": "72eb71a60742ba16",
      "type": "move",
      "order": [
        "72eb71a60742ba16",
        "c3a14580883e9b58"
      ],
      "date": 1671458717071
    },
    {
      "type": "edit",
      "id": "72eb71a60742ba16",
      "item": {
        "type": "paragraph",
        "id": "72eb71a60742ba16",
        "text": "Despite the undisputed prominence of inheritance as the fundamental reuse mechanism in object-oriented programming languages, the main variants – single inheritance, multiple inheritance, and mixin inheritance – all suffer from conceptual and practical problems. In the first part of this paper, we identify and illustrate these problems. We then present traits, a simple compositional model for structuring object-oriented programs. A trait is essentially a group of pure methods that serves as a building block for classes and is a primitive unit of code reuse. In this model, classes are composed from a set of traits by specifying glue code that connects the traits together and accesses the necessary state. We demonstrate how traits overcome the problems arising from the different variants of inheritance, we discuss how traits can be implemented effectively, and we summarize our experience applying traits to refactor an existing class hierarchy.\n"
      },
      "date": 1671458736809
    },
    {
      "type": "edit",
      "id": "72eb71a60742ba16",
      "item": {
        "type": "paragraph",
        "id": "72eb71a60742ba16",
        "text": "Despite the undisputed prominence of inheritance as the fundamental reuse mechanism in object-oriented programming languages, the main variants – single inheritance, multiple inheritance, and mixin inheritance – all suffer from conceptual and practical problems. "
      },
      "date": 1671458745802
    },
    {
      "type": "add",
      "id": "1528bd74ecbcea35",
      "item": {
        "type": "paragraph",
        "id": "1528bd74ecbcea35",
        "text": "In the first part of this paper, we identify and illustrate these problems. We then present traits, a simple compositional model for structuring object-oriented programs. A trait is essentially a group of pure methods that serves as a building block for classes and is a primitive unit of code reuse. In this model, classes are composed from a set of traits by specifying glue code that connects the traits together and accesses the necessary state. We demonstrate how traits overcome the problems arising from the different variants of inheritance, we discuss how traits can be implemented effectively, and we summarize our experience applying traits to refactor an existing class hierarchy.\n"
      },
      "after": "72eb71a60742ba16",
      "date": 1671458780135
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1705680741484
    },
    {
      "type": "edit",
      "id": "1528bd74ecbcea35",
      "item": {
        "type": "paragraph",
        "id": "1528bd74ecbcea35",
        "text": "In the first part of this paper, we identify and illustrate these problems. We then present [[Traits]], a simple compositional model for structuring object-oriented programs. A [[Trait]] is essentially a group of pure methods that serves as a building block for classes and is a primitive unit of code reuse. In this model, classes are composed from a set of traits by specifying glue code that connects the traits together and accesses the necessary state. We demonstrate how traits overcome the problems arising from the different variants of inheritance, we discuss how traits can be implemented effectively, and we summarize our experience applying traits to refactor an existing class hierarchy.\n"
      },
      "date": 1705680781514
    },
    {
      "item": {
        "type": "factory",
        "id": "462245a96f157b5f"
      },
      "id": "462245a96f157b5f",
      "type": "add",
      "after": "c3a14580883e9b58",
      "date": 1705680820681
    },
    {
      "id": "462245a96f157b5f",
      "type": "move",
      "order": [
        "72eb71a60742ba16",
        "1528bd74ecbcea35",
        "462245a96f157b5f",
        "c3a14580883e9b58"
      ],
      "date": 1705680823122
    },
    {
      "type": "edit",
      "id": "462245a96f157b5f",
      "item": {
        "type": "pagefold",
        "id": "462245a96f157b5f",
        "text": "~"
      },
      "date": 1705680825691
    },
    {
      "type": "edit",
      "id": "c3a14580883e9b58",
      "item": {
        "type": "paragraph",
        "id": "c3a14580883e9b58",
        "text": "SCHÄRLI, Nathanael, DUCASSE, Stéphane, NIERSTRASZ, Oscar and BLACK, Andrew P., 2003. [[Traits]]: Composable Units of Behaviour. In: CARDELLI, Luca (ed.), ECOOP 2003 – Object-Oriented Programming. Berlin, Heidelberg: Springer. 2003. p. 248–274. Lecture Notes in Computer Science. ISBN 978-3-540-45070-2. DOI 10.1007/978-3-540-45070-2_12. "
      },
      "date": 1705680839490
    },
    {
      "type": "edit",
      "id": "72eb71a60742ba16",
      "item": {
        "type": "paragraph",
        "id": "72eb71a60742ba16",
        "text": "Despite the undisputed prominence of [[Inheritance]] as the fundamental reuse mechanism in object-oriented programming languages, the main variants – single inheritance, multiple inheritance, and mixin inheritance – all suffer from conceptual and practical problems. "
      },
      "date": 1706116425544
    },
    {
      "type": "fork",
      "site": "mold.dreyeck.ch",
      "date": 1706246188036
    }
  ]
}