{
  "title": "λ-2D",
  "story": [
    {
      "type": "paragraph",
      "id": "3737e8bb68ac6e43",
      "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from [[Lambda Calculus]]. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post] by [[Lingdong Huang]], [https://twitter.com/rsms/status/1512180025142902786?s=20&t=QzaIuX4jbb6MEKnFgKviyQ tweet] by [[Rasmus Andersson]]"
    },
    {
      "type": "paragraph",
      "id": "10d7efd4534fe18d",
      "text": "Lambda calculus is such a concise language that it only has two instructions: that of function application and that of function definition. I ([[Lingdong Huang]]) quickly came up with working symbols for each: a \"cup\" shape for the former (for the silly intuition that applying the function is like [[put]]ting the argument into the \"cup\"), and the eponymous greek letter for the latter (which is a bit unimaginative and arguably overused, but at least it's clear). Just like vanilla lambda calculus, functions always take one argument and produce one output; to get more, you can chain multiple functions together, known as \"currying\". "
    },
    {
      "type": "paragraph",
      "id": "fbf1a9b7c30f1254",
      "text": "λ-2D started as a part of a larger research to design a system where the user draw programs with pen and paper, and receive interactive feedback through augmented reality. However, it grew increasingly interesting that it became a full project on its own. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "λ-2D",
        "story": []
      },
      "date": 1649367225332
    },
    {
      "item": {
        "type": "factory",
        "id": "864ee994b4f0fe0c"
      },
      "id": "864ee994b4f0fe0c",
      "type": "add",
      "date": 1649367235920
    },
    {
      "type": "edit",
      "id": "864ee994b4f0fe0c",
      "item": {
        "type": "paragraph",
        "id": "864ee994b4f0fe0c",
        "text": "https://twitter.com/rsms/status/1512180025142902786?s=20&t=QzaIuX4jbb6MEKnFgKviyQ"
      },
      "date": 1649367237488
    },
    {
      "type": "edit",
      "id": "864ee994b4f0fe0c",
      "item": {
        "type": "markdown",
        "id": "864ee994b4f0fe0c",
        "text": "https://twitter.com/rsms/status/1512180025142902786?s=20&t=QzaIuX4jbb6MEKnFgKviyQ"
      },
      "date": 1649367240607
    },
    {
      "item": {
        "type": "factory",
        "id": "3737e8bb68ac6e43"
      },
      "id": "3737e8bb68ac6e43",
      "type": "add",
      "after": "864ee994b4f0fe0c",
      "date": 1649367264685
    },
    {
      "type": "edit",
      "id": "3737e8bb68ac6e43",
      "item": {
        "type": "paragraph",
        "id": "3737e8bb68ac6e43",
        "text": "https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/"
      },
      "date": 1649367270502
    },
    {
      "type": "edit",
      "id": "3737e8bb68ac6e43",
      "item": {
        "type": "paragraph",
        "id": "3737e8bb68ac6e43",
        "text": "λ-2D: An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post]"
      },
      "date": 1649367304610
    },
    {
      "item": {
        "type": "factory",
        "id": "fbf1a9b7c30f1254"
      },
      "id": "fbf1a9b7c30f1254",
      "type": "add",
      "after": "3737e8bb68ac6e43",
      "date": 1649367586167
    },
    {
      "type": "edit",
      "id": "fbf1a9b7c30f1254",
      "item": {
        "type": "paragraph",
        "id": "fbf1a9b7c30f1254",
        "text": "λ-2D started as a part of a larger research to design a system where the user draw programs with pen and paper, and receive interactive feedback through augmented reality. However, it grew increasingly interesting that it became a full project on its own. "
      },
      "date": 1649367609316
    },
    {
      "item": {
        "type": "factory",
        "id": "977f6a632364c515"
      },
      "id": "977f6a632364c515",
      "type": "add",
      "after": "fbf1a9b7c30f1254",
      "date": 1649368067496
    },
    {
      "type": "edit",
      "id": "977f6a632364c515",
      "item": {
        "type": "paragraph",
        "id": "977f6a632364c515",
        "text": "[[Lingdong Huang]]"
      },
      "date": 1649368073408
    },
    {
      "type": "edit",
      "id": "864ee994b4f0fe0c",
      "item": {
        "type": "markdown",
        "id": "864ee994b4f0fe0c",
        "text": "[https://twitter.com/rsms/status/1512180025142902786?s=20&t=QzaIuX4jbb6MEKnFgKviyQ tweet] by [[Rasmus Andersson]]"
      },
      "date": 1696354234289
    },
    {
      "id": "3737e8bb68ac6e43",
      "type": "move",
      "order": [
        "3737e8bb68ac6e43",
        "864ee994b4f0fe0c",
        "fbf1a9b7c30f1254",
        "977f6a632364c515"
      ],
      "date": 1696354314094
    },
    {
      "type": "edit",
      "id": "3737e8bb68ac6e43",
      "item": {
        "type": "paragraph",
        "id": "3737e8bb68ac6e43",
        "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post]"
      },
      "date": 1696354318835
    },
    {
      "type": "edit",
      "id": "3737e8bb68ac6e43",
      "item": {
        "type": "paragraph",
        "id": "3737e8bb68ac6e43",
        "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post],"
      },
      "date": 1696354324183
    },
    {
      "type": "remove",
      "id": "864ee994b4f0fe0c",
      "date": 1696354338053
    },
    {
      "type": "edit",
      "id": "3737e8bb68ac6e43",
      "item": {
        "type": "paragraph",
        "id": "3737e8bb68ac6e43",
        "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post], [https://twitter.com/rsms/status/1512180025142902786?s=20&t=QzaIuX4jbb6MEKnFgKviyQ tweet] by [[Rasmus Andersson]]"
      },
      "date": 1696354341455
    },
    {
      "type": "remove",
      "id": "977f6a632364c515",
      "date": 1696354369055
    },
    {
      "type": "edit",
      "id": "3737e8bb68ac6e43",
      "item": {
        "type": "paragraph",
        "id": "3737e8bb68ac6e43",
        "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from Lambda Calculus. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post] by [[Lingdong Huang]], [https://twitter.com/rsms/status/1512180025142902786?s=20&t=QzaIuX4jbb6MEKnFgKviyQ tweet] by [[Rasmus Andersson]]"
      },
      "date": 1696354375784
    },
    {
      "item": {
        "type": "factory",
        "id": "10d7efd4534fe18d"
      },
      "id": "10d7efd4534fe18d",
      "type": "add",
      "after": "fbf1a9b7c30f1254",
      "date": 1696354596350
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "paragraph",
        "id": "10d7efd4534fe18d",
        "text": "Lambda calculus is such a concise language that it only has two instructions: that of function application and that of function definition. I quickly came up with working symbols for each: a \"cup\" shape for the former (for the silly intuition that applying the function is like putting the argument into the \"cup\"), and the eponymous greek letter for the latter (which is a bit unimaginative and arguably overused, but at least it's clear). Just like vanilla lambda calculus, functions always take one argument and produce one output; to get more, you can chain multiple functions together, known as \"currying\". "
      },
      "date": 1696354597950
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "paragraph",
        "id": "10d7efd4534fe18d",
        "text": "Lambda calculus is such a concise language that it only has two instructions: that of function application and that of function definition. I ([[Lingdong Huang]]) quickly came up with working symbols for each: a \"cup\" shape for the former (for the silly intuition that applying the function is like putting the argument into the \"cup\"), and the eponymous greek letter for the latter (which is a bit unimaginative and arguably overused, but at least it's clear). Just like vanilla lambda calculus, functions always take one argument and produce one output; to get more, you can chain multiple functions together, known as \"currying\". "
      },
      "date": 1696354663153
    },
    {
      "type": "edit",
      "id": "3737e8bb68ac6e43",
      "item": {
        "type": "paragraph",
        "id": "3737e8bb68ac6e43",
        "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from [[Lambda Calculus]]. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post] by [[Lingdong Huang]], [https://twitter.com/rsms/status/1512180025142902786?s=20&t=QzaIuX4jbb6MEKnFgKviyQ tweet] by [[Rasmus Andersson]]"
      },
      "date": 1696354838258
    },
    {
      "id": "fbf1a9b7c30f1254",
      "type": "move",
      "order": [
        "3737e8bb68ac6e43",
        "10d7efd4534fe18d",
        "fbf1a9b7c30f1254"
      ],
      "date": 1696355370671
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "paragraph",
        "id": "10d7efd4534fe18d",
        "text": "Lambda calculus is such a concise language that it only has two instructions: that of function application and that of function definition. I ([[Lingdong Huang]]) quickly came up with working symbols for each: a \"cup\" shape for the former (for the silly intuition that applying the function is like [[put]]ting the argument into the \"cup\"), and the eponymous greek letter for the latter (which is a bit unimaginative and arguably overused, but at least it's clear). Just like vanilla lambda calculus, functions always take one argument and produce one output; to get more, you can chain multiple functions together, known as \"currying\". "
      },
      "date": 1696355889839
    }
  ]
}