{
  "title": "Infinite Pane-Ing",
  "story": [
    {
      "type": "paragraph",
      "id": "bff5e4b9d60f0da0",
      "text": "One key trait of “infinite pane-ing” and other parts of GT demonstrating IDE-as-language is that it’s the same every time, everywhere, in every project. Once I know about the JSON view or a file system view, or the one liner to spawn an inspector, or a Coder, or Documenter, I can plug it in wherever I need it. Compare that to stovepiped applications where I have to understand the design of each one, which I’ve forgotten by the next time I need it because I don’t use it often enough to remember! -- [[SeanDeNigris]] via [https://discord.com/channels/729445214812504107/729445215341117522/847809881247186944 discord] (2021-05-28)"
    },
    {
      "type": "paragraph",
      "id": "bc508c8430fc1617",
      "text": "Cf. [[jq]] – [[JSON]] processor"
    },
    {
      "type": "pagefold",
      "id": "528160e099e02e76",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "b5a78e8daa2a4be4",
      "text": "Nothing big, sometimes it's the small things. I wrote a script (not in Smalltalk) that output a lot of JSON, it wasn't clear which error message belonged to which entity in a list of objects.\n\nIn another IDE I searched for the error but it didn't help because I didn't know if it belonged to the entity 'above' or 'below' when looking at a wall (a skyscraper) of text.\n"
    },
    {
      "type": "markdown",
      "id": "7fabe87a574527be",
      "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc [[Exploration]] is just not fostered. \n-- [[botwhytho]] via [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] (2021-05-28)\n"
    },
    {
      "type": "markdown",
      "id": "21b60daec9c5a006",
      "text": "Cf. [[Miller Columns]] (also known as cascading lists)"
    },
    {
      "type": "pagefold",
      "id": "40d82c5cceef3e40",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "6fe11d9421b3e3f6",
      "text": "That's a very typical use case for me as well. To the point that I am slowly adopting JSON for diagnostic output from my code, just because it's so well supported in GT. In particular for zooming in on details, as you describe.\n\nIdea: make a \"JSON explorer\" app, nothing but a stripped-down and focussed GT, but marketed for this specific purpose. It could become a gateway drug for GT and Pharo. -- [[Konrad Hinsen]]\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Infinite Pane-Ing",
        "story": []
      },
      "date": 1661392674017
    },
    {
      "item": {
        "type": "factory",
        "id": "bff5e4b9d60f0da0"
      },
      "id": "bff5e4b9d60f0da0",
      "type": "add",
      "date": 1661392686084
    },
    {
      "type": "edit",
      "id": "bff5e4b9d60f0da0",
      "item": {
        "type": "paragraph",
        "id": "bff5e4b9d60f0da0",
        "text": "One key trait of “infinite pane-ing” and other parts of GT demonstrating IDE-as-language is that it’s the same every time, everywhere, in every project. Once I know about the JSON view or a file system view, or the one liner to spawn an inspector, or a Coder, or Documenter, I can plug it in wherever I need it. Compare that to stovepiped applications where I have to understand the design of each one, which I’ve forgotten by the next time I need it because I don’t use it often enough to remember! @tudor girba @Konrad Hinsen @botwhytho -- [[SeanDeNigris]] via discord — 28.05.2021"
      },
      "date": 1661392724932
    },
    {
      "type": "edit",
      "id": "bff5e4b9d60f0da0",
      "item": {
        "type": "paragraph",
        "id": "bff5e4b9d60f0da0",
        "text": "One key trait of “infinite pane-ing” and other parts of GT demonstrating IDE-as-language is that it’s the same every time, everywhere, in every project. Once I know about the JSON view or a file system view, or the one liner to spawn an inspector, or a Coder, or Documenter, I can plug it in wherever I need it. Compare that to stovepiped applications where I have to understand the design of each one, which I’ve forgotten by the next time I need it because I don’t use it often enough to remember! @tudor girba @Konrad Hinsen @botwhytho -- [[SeanDeNigris]] via [https://discord.com/channels/729445214812504107/729445215341117522/847809881247186944 discord] (2021-05-28)"
      },
      "date": 1661392774846
    },
    {
      "type": "edit",
      "id": "bff5e4b9d60f0da0",
      "item": {
        "type": "paragraph",
        "id": "bff5e4b9d60f0da0",
        "text": "One key trait of “infinite pane-ing” and other parts of GT demonstrating IDE-as-language is that it’s the same every time, everywhere, in every project. Once I know about the JSON view or a file system view, or the one liner to spawn an inspector, or a Coder, or Documenter, I can plug it in wherever I need it. Compare that to stovepiped applications where I have to understand the design of each one, which I’ve forgotten by the next time I need it because I don’t use it often enough to remember! -- [[SeanDeNigris]] via [https://discord.com/channels/729445214812504107/729445215341117522/847809881247186944 discord] (2021-05-28)"
      },
      "date": 1661392880728
    },
    {
      "item": {
        "type": "factory",
        "id": "bc508c8430fc1617"
      },
      "id": "bc508c8430fc1617",
      "type": "add",
      "after": "bff5e4b9d60f0da0",
      "date": 1661392916923
    },
    {
      "type": "edit",
      "id": "bc508c8430fc1617",
      "item": {
        "type": "paragraph",
        "id": "bc508c8430fc1617",
        "text": "Cf. [[jq]]"
      },
      "date": 1661392936253
    },
    {
      "type": "edit",
      "id": "bc508c8430fc1617",
      "item": {
        "type": "paragraph",
        "id": "bc508c8430fc1617",
        "text": "Cf. [[jq]] – [[JSON]] processor"
      },
      "date": 1661392966455
    },
    {
      "item": {
        "type": "factory",
        "id": "b5a78e8daa2a4be4"
      },
      "id": "b5a78e8daa2a4be4",
      "type": "add",
      "after": "bc508c8430fc1617",
      "date": 1661393047004
    },
    {
      "type": "edit",
      "id": "b5a78e8daa2a4be4",
      "item": {
        "type": "paragraph",
        "id": "b5a78e8daa2a4be4",
        "text": "botwhytho — 28.05.2021\nNothing big, sometimes it's the small things. I wrote a script (not in Smalltalk) that output a lot of JSON, it wasn't clear which error message belonged to which entity in a list of objects.\n\nIn another IDE I searched for the error but it didn't help because I didn't know if it belonged to the entity 'above' or 'below' when looking at a wall (a skyscraper) of text.\n\nIn Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick collect: with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use jq to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc exploration is just not fostered \ns"
      },
      "date": 1661393051601
    },
    {
      "type": "edit",
      "id": "b5a78e8daa2a4be4",
      "item": {
        "type": "paragraph",
        "id": "b5a78e8daa2a4be4",
        "text": "botwhytho — 2021-05-28 [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] \nNothing big, sometimes it's the small things. I wrote a script (not in Smalltalk) that output a lot of JSON, it wasn't clear which error message belonged to which entity in a list of objects.\n\nIn another IDE I searched for the error but it didn't help because I didn't know if it belonged to the entity 'above' or 'below' when looking at a wall (a skyscraper) of text.\n\nIn Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick collect: with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use jq to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc exploration is just not fostered \ns"
      },
      "date": 1661393096537
    },
    {
      "type": "edit",
      "id": "b5a78e8daa2a4be4",
      "item": {
        "type": "paragraph",
        "id": "b5a78e8daa2a4be4",
        "text": "botwhytho — 2021-05-28 [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] \nNothing big, sometimes it's the small things. I wrote a script (not in Smalltalk) that output a lot of JSON, it wasn't clear which error message belonged to which entity in a list of objects.\n\nIn another IDE I searched for the error but it didn't help because I didn't know if it belonged to the entity 'above' or 'below' when looking at a wall (a skyscraper) of text.\n"
      },
      "date": 1661393163959
    },
    {
      "type": "add",
      "id": "7fabe87a574527be",
      "item": {
        "type": "paragraph",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use jq to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc exploration is just not fostered \ns"
      },
      "after": "b5a78e8daa2a4be4",
      "date": 1661393166032
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use jq to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc exploration is just not fostered \ns"
      },
      "date": 1661393168799
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc exploration is just not fostered \ns"
      },
      "date": 1661393212196
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc exploration is just not fostered."
      },
      "date": 1661393755703
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc [[exploration]] is just not fostered."
      },
      "date": 1661393786953
    },
    {
      "item": {
        "type": "factory",
        "id": "40d82c5cceef3e40"
      },
      "id": "40d82c5cceef3e40",
      "type": "add",
      "after": "7fabe87a574527be",
      "date": 1661394079531
    },
    {
      "type": "edit",
      "id": "40d82c5cceef3e40",
      "item": {
        "type": "pagefold",
        "id": "40d82c5cceef3e40",
        "text": "~"
      },
      "date": 1661394084761
    },
    {
      "item": {
        "type": "factory",
        "id": "6fe11d9421b3e3f6"
      },
      "id": "6fe11d9421b3e3f6",
      "type": "add",
      "after": "40d82c5cceef3e40",
      "date": 1661394086912
    },
    {
      "type": "edit",
      "id": "6fe11d9421b3e3f6",
      "item": {
        "type": "paragraph",
        "id": "6fe11d9421b3e3f6",
        "text": "Konrad Hinsen — 28.05.2021\nThat's a very typical use case for me as well. To the point that I am slowly adopting JSON for diagnostic output from my code, just because it's so well supported in GT. In particular for zooming in on details, as you describe.\n\nIdea: make a \"JSON explorer\" app, nothing but a stripped-down and focussed GT, but marketed for this specific purpose. It could become a gateway drug for GT and Pharo.\n"
      },
      "date": 1661394089692
    },
    {
      "item": {
        "type": "factory",
        "id": "528160e099e02e76"
      },
      "id": "528160e099e02e76",
      "type": "add",
      "after": "6fe11d9421b3e3f6",
      "date": 1661394092226
    },
    {
      "type": "edit",
      "id": "528160e099e02e76",
      "item": {
        "type": "pagefold",
        "id": "528160e099e02e76",
        "text": "~"
      },
      "date": 1661394097501
    },
    {
      "id": "528160e099e02e76",
      "type": "move",
      "order": [
        "bff5e4b9d60f0da0",
        "bc508c8430fc1617",
        "528160e099e02e76",
        "b5a78e8daa2a4be4",
        "7fabe87a574527be",
        "40d82c5cceef3e40",
        "6fe11d9421b3e3f6"
      ],
      "date": 1661394103499
    },
    {
      "type": "edit",
      "id": "b5a78e8daa2a4be4",
      "item": {
        "type": "paragraph",
        "id": "b5a78e8daa2a4be4",
        "text": "Nothing big, sometimes it's the small things. I wrote a script (not in Smalltalk) that output a lot of JSON, it wasn't clear which error message belonged to which entity in a list of objects.\n\nIn another IDE I searched for the error but it didn't help because I didn't know if it belonged to the entity 'above' or 'below' when looking at a wall (a skyscraper) of text.\n"
      },
      "date": 1661394120338
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc [[exploration]] is just not fostered. -- botwhytho — 2021-05-28 [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] "
      },
      "date": 1661394128888
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc [[exploration]] is just not fostered. \n-- botwhytho — 2021-05-28 [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] "
      },
      "date": 1661394137702
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc [[exploration]] is just not fostered. \n-- botwhytho via [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] (2021-05-28)"
      },
      "date": 1661394173710
    },
    {
      "type": "edit",
      "id": "6fe11d9421b3e3f6",
      "item": {
        "type": "paragraph",
        "id": "6fe11d9421b3e3f6",
        "text": "That's a very typical use case for me as well. To the point that I am slowly adopting JSON for diagnostic output from my code, just because it's so well supported in GT. In particular for zooming in on details, as you describe.\n\nIdea: make a \"JSON explorer\" app, nothing but a stripped-down and focussed GT, but marketed for this specific purpose. It could become a gateway drug for GT and Pharo. -- Konrad Hinsen — 28.05.2021\n"
      },
      "date": 1661394231788
    },
    {
      "type": "edit",
      "id": "6fe11d9421b3e3f6",
      "item": {
        "type": "paragraph",
        "id": "6fe11d9421b3e3f6",
        "text": "That's a very typical use case for me as well. To the point that I am slowly adopting JSON for diagnostic output from my code, just because it's so well supported in GT. In particular for zooming in on details, as you describe.\n\nIdea: make a \"JSON explorer\" app, nothing but a stripped-down and focussed GT, but marketed for this specific purpose. It could become a gateway drug for GT and Pharo. -- Konrad Hinsen\n"
      },
      "date": 1661394242806
    },
    {
      "type": "edit",
      "id": "6fe11d9421b3e3f6",
      "item": {
        "type": "paragraph",
        "id": "6fe11d9421b3e3f6",
        "text": "That's a very typical use case for me as well. To the point that I am slowly adopting JSON for diagnostic output from my code, just because it's so well supported in GT. In particular for zooming in on details, as you describe.\n\nIdea: make a \"JSON explorer\" app, nothing but a stripped-down and focussed GT, but marketed for this specific purpose. It could become a gateway drug for GT and Pharo. -- [[Konrad Hinsen]]\n"
      },
      "date": 1661394252598
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc [[exploration]] is just not fostered. \n-- [[botwhytho]] via [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] (2021-05-28)"
      },
      "date": 1661394266231
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc [[exploration]] is just not fostered. \n-- [[botwhytho]] via [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] (2021-05-28)\n"
      },
      "date": 1661394811424
    },
    {
      "type": "add",
      "id": "21b60daec9c5a006",
      "item": {
        "type": "markdown",
        "id": "21b60daec9c5a006",
        "text": "Cf. [[Miller Columns]]"
      },
      "after": "7fabe87a574527be",
      "date": 1661394828562
    },
    {
      "type": "edit",
      "id": "21b60daec9c5a006",
      "item": {
        "type": "markdown",
        "id": "21b60daec9c5a006",
        "text": "Cf. [[Miller Columns]] (also known as cascading lists)"
      },
      "date": 1661394866916
    },
    {
      "type": "edit",
      "id": "7fabe87a574527be",
      "item": {
        "type": "markdown",
        "id": "7fabe87a574527be",
        "text": "In Gt: Open Folder -> JSON file view, click button to parse -> Nested Dictionary view -> write a quick `collect:` with just the two fields I need, ID & error, DONE.\n\nAfter the fact thought of the other ways to do this and it just seemed like a huge pain, write a python script, maybe staying in the REPL, which is interactive, but minimally. I could be a 'proper' UNIX user and use [[jq]] to parse the JSON output. Although powerful tool, have to look up it's specific syntax every time I use it again. Without live objects and the page/pane workflow (left to right train of playgrounds and inspectors, does this have a proper name?) simple tasks become hard and ad-hoc [[Exploration]] is just not fostered. \n-- [[botwhytho]] via [https://discord.com/channels/729445214812504107/729445215341117522/847696869420957716 discord] (2021-05-28)\n"
      },
      "date": 1661418232069
    }
  ]
}