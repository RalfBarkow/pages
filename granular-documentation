{
  "title": "Granular documentation",
  "story": [
    {
      "type": "markdown",
      "id": "cd1eede3168746bf",
      "text": "What is the right granularity for documenting performative texts? Our base assumption is that we need to document individual functions, but that a function might be broken up into a number of pieces.\n"
    },
    {
      "type": "markdown",
      "id": "f441bafd5db6b42f",
      "text": "# Example\n"
    },
    {
      "type": "markdown",
      "id": "7e181e6a26897888",
      "text": "In [[LCW]] we use the term [[handler]] to refer to several types of [[function]] - typically a function that handles an event. We store these functions in text files, and associate them with objects (or controls) int eh development environment.\n"
    },
    {
      "type": "markdown",
      "id": "2fdb21bcd68be8db",
      "text": "All the code that we find of general use to the LCW environment we make available in a global name-space or repository that can be found at:\n\n- https;//livecode.world\n"
    },
    {
      "type": "markdown",
      "id": "ae7959afc5a963ad",
      "text": "In particular individual handlers are documented here:\n\n- http://handler.livecode.world\n"
    },
    {
      "type": "markdown",
      "id": "3b21172d9b650d32",
      "text": "A handler can call [[private handler]]s, so we only need to document the public’s handler."
    },
    {
      "type": "markdown",
      "id": "89410b70ff794857",
      "text": "# Thoughts\n"
    },
    {
      "type": "markdown",
      "id": "570122f9118e828a",
      "text": "It is this level of granularity that we feel is appropriate for documentation. So a single text file containing no more than one public handler. This corresponds to a micro service or [[function-as-aservice]] definition.\n"
    },
    {
      "type": "markdown",
      "id": "348fc3fae9c7cf64",
      "text": "Often we may start with a small number of such functions or microservices bundled together in a single file. This is what we do with [[transporters]] or [[LCW menu controller]]s.\n"
    },
    {
      "type": "markdown",
      "id": "0e10f086ddc9e554",
      "text": "During the documentation process we often spilt these files up into individual handlers and files as part of the refactoring. This workflow seems natural and productive."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Granular documentation",
        "story": []
      },
      "date": 1629294295114
    },
    {
      "item": {
        "type": "factory",
        "id": "cd1eede3168746bf"
      },
      "id": "cd1eede3168746bf",
      "type": "add",
      "date": 1629294296761
    },
    {
      "type": "edit",
      "id": "cd1eede3168746bf",
      "item": {
        "type": "markdown",
        "id": "cd1eede3168746bf",
        "text": "What is the right granularity for documenting performative texts? Our base assumption is that we need to document individual functions, but that a function might be broken up into a number of pieces.\n"
      },
      "date": 1629294397891
    },
    {
      "type": "add",
      "id": "f441bafd5db6b42f",
      "item": {
        "type": "markdown",
        "id": "f441bafd5db6b42f",
        "text": "# LCW\nIn [[LCW]] we use the term [[handler]] to refer to several types of [[function]] - typically a function that handles an event. We store these functions in text files, and associate them with objects (or controls) int eh development environment.\n"
      },
      "after": "cd1eede3168746bf",
      "date": 1629294520654
    },
    {
      "type": "add",
      "id": "2fdb21bcd68be8db",
      "item": {
        "type": "markdown",
        "id": "2fdb21bcd68be8db",
        "text": "All the code that we find of general use to the LCW environment we make available in a global name-space or repository that can be found at:\n\n- https;//livecode.world\n"
      },
      "after": "f441bafd5db6b42f",
      "date": 1629294601368
    },
    {
      "type": "add",
      "id": "ae7959afc5a963ad",
      "item": {
        "type": "markdown",
        "id": "ae7959afc5a963ad",
        "text": "In particular individual handlers are documented here:\n\n- http://handler.livecode.world\n"
      },
      "after": "2fdb21bcd68be8db",
      "date": 1629294645372
    },
    {
      "type": "add",
      "id": "3b21172d9b650d32",
      "item": {
        "type": "markdown",
        "id": "3b21172d9b650d32",
        "text": "A handler can call [[private handler]]s, so we only need to document the public’s handler."
      },
      "after": "ae7959afc5a963ad",
      "date": 1629294680408
    },
    {
      "item": {
        "type": "factory",
        "id": "bc958ab144bf9a2d"
      },
      "id": "bc958ab144bf9a2d",
      "type": "add",
      "after": "3b21172d9b650d32",
      "date": 1629294690297
    },
    {
      "id": "bc958ab144bf9a2d",
      "type": "move",
      "order": [
        "cd1eede3168746bf",
        "f441bafd5db6b42f",
        "bc958ab144bf9a2d",
        "2fdb21bcd68be8db",
        "ae7959afc5a963ad",
        "3b21172d9b650d32"
      ],
      "date": 1629294694609
    },
    {
      "type": "remove",
      "id": "bc958ab144bf9a2d",
      "date": 1629294696753
    },
    {
      "type": "edit",
      "id": "f441bafd5db6b42f",
      "item": {
        "type": "markdown",
        "id": "f441bafd5db6b42f",
        "text": "# Example\n"
      },
      "date": 1629294712286
    },
    {
      "type": "add",
      "id": "7e181e6a26897888",
      "item": {
        "type": "markdown",
        "id": "7e181e6a26897888",
        "text": "In [[LCW]] we use the term [[handler]] to refer to several types of [[function]] - typically a function that handles an event. We store these functions in text files, and associate them with objects (or controls) int eh development environment.\n"
      },
      "after": "f441bafd5db6b42f",
      "date": 1629294713102
    },
    {
      "item": {
        "type": "factory",
        "id": "89410b70ff794857"
      },
      "id": "89410b70ff794857",
      "type": "add",
      "after": "3b21172d9b650d32",
      "date": 1629294717647
    },
    {
      "type": "edit",
      "id": "89410b70ff794857",
      "item": {
        "type": "markdown",
        "id": "89410b70ff794857",
        "text": "# Thoughts\n"
      },
      "date": 1629294734033
    },
    {
      "type": "add",
      "id": "570122f9118e828a",
      "item": {
        "type": "markdown",
        "id": "570122f9118e828a",
        "text": "It is this level of granularity that we feel is appropriate for documentation. So a single text file containing no more than one public handler. This corresponds to a micro service or [[function-as-aservice]] definition.\n"
      },
      "after": "89410b70ff794857",
      "date": 1629294803046
    },
    {
      "type": "add",
      "id": "348fc3fae9c7cf64",
      "item": {
        "type": "markdown",
        "id": "348fc3fae9c7cf64",
        "text": "Often we may start with a small number of such functions or microservices bundled together in a single file. This is what we do with [[transporters]] or [[LCW menu controller]]s.\n"
      },
      "after": "570122f9118e828a",
      "date": 1629294880435
    },
    {
      "type": "add",
      "id": "0e10f086ddc9e554",
      "item": {
        "type": "markdown",
        "id": "0e10f086ddc9e554",
        "text": "During the documentation process we often spilt these files up into individual handlers and files as part of the refactoring. This workflow seems natural and productive."
      },
      "after": "348fc3fae9c7cf64",
      "date": 1629294934997
    },
    {
      "type": "fork",
      "site": "literate.wiki",
      "date": 1630101291757
    }
  ]
}