{
  "title": "Collecting Parameter",
  "story": [
    {
      "type": "html",
      "text": "In the [[Collecting Parameter]] idiom a collection (list, map, etc.) is passed repeatedly as a parameter to a method which adds items to the collection. ",
      "id": "02bb89de0d6c15284ca38685ed86dd3f"
    },
    {
      "type": "html",
      "text": "\nExample:",
      "id": "d55ab85f010bb20c6ea42f82799f6b4c"
    },
    {
      "type": "code",
      "text": " String[] userFiles = ...\n List userList = new ArrayList();\n for (int i=0; i < userFiles.length; i++) {\n   addUsersTo(userFiles[i], userList);\n }",
      "id": "c317305e8bf5cc0e88d9625c17bb20ac"
    },
    {
      "type": "code",
      "text": " public void addUsersTo(String userFileName, List userList) {\n ...\n }",
      "id": "81b96f2b7cd5cee7d4112b54e47fa796"
    },
    {
      "type": "html",
      "text": "\nAnother example is the [[Test Result]] in JUnit.",
      "id": "566ad643efe35a0c96e7c3b63c65dcdc"
    },
    {
      "type": "html",
      "text": "\nSee also [http://www.industriallogic.com/xp/refactoring/accumulationToCollection.html www.industriallogic.com]",
      "id": "d2a4ff47b5f94d0ce34a668f375c8da1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3c0631a780a6d5a678c26ce3be411f40"
    },
    {
      "type": "html",
      "text": "A variation on this pattern occurs when the [[Collecting Parameter]] is not a collection, but is an object with various properties.  As the object is passed around, various actors get and set properties on the [[Parameter Object]].  I think this version of the pattern is generally an [[Anti Pattern]], but may be useful when refactoring from the use of globals.  This usage is also related to the old [[Bidirectional Parameter Pattern]] often used in the [[Cee Language]].",
      "id": "4e635a2e8c8485fa3dbfe251ed4c7d17"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3c0631a780a6d5a678c26ce3be411f40"
    },
    {
      "type": "html",
      "text": "The practice of passing around a collecting parameter can be generalized to using a static closure, instantiating the functions that add to the collection so that they get the collector implicitly, along with a method to return the collection.  In other words, an object.  Although it can be used beneficially to decouple the state from the method invocation, this idiom is often an [[Anti Pattern]], creating stateful dependencies across methods that should have been grouped into the same object if they truly need such stateful information, and otherwise receiving and acting on state they shouldn't access.",
      "id": "b73c356cb443e552144c766fcbdf5b8d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3c0631a780a6d5a678c26ce3be411f40"
    },
    {
      "type": "html",
      "text": "Isn't this pretty much the same as an ouput iterator (e.g. [http://www.sgi.com/tech/stl/OutputIterator.html www.sgi.com])? Like java.lang.Appendable for example. -- [[Niklas Matthies]]",
      "id": "b555a14e1cba4736cb447686d3ea2c99"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3c0631a780a6d5a678c26ce3be411f40"
    },
    {
      "type": "html",
      "text": "[[Category Collections]]",
      "id": "70d2aa59fcbd5fe6fa6c0e024d6a5e55"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CollectingParameter c2.com]",
      "id": "18f961cfef1e08ac113e7ac31b928a9f"
    }
  ],
  "journal": [
    {
      "date": 1417574929000,
      "id": "4dc7518ac3479d3cd85eaa73240d08de",
      "type": "create",
      "item": {
        "title": "Collecting Parameter",
        "story": [
          {
            "type": "html",
            "text": "In the [[Collecting Parameter]] idiom a collection (list, map, etc.) is passed repeatedly as a parameter to a method which adds items to the collection. ",
            "id": "02bb89de0d6c15284ca38685ed86dd3f"
          },
          {
            "type": "html",
            "text": "\nExample:",
            "id": "d55ab85f010bb20c6ea42f82799f6b4c"
          },
          {
            "type": "code",
            "text": " String[] userFiles = ...\n List userList = new ArrayList();\n for (int i=0; i < userFiles.length; i++) {\n   addUsersTo(userFiles[i], userList);\n }",
            "id": "c317305e8bf5cc0e88d9625c17bb20ac"
          },
          {
            "type": "code",
            "text": " public void addUsersTo(String userFileName, List userList) {\n ...\n }",
            "id": "81b96f2b7cd5cee7d4112b54e47fa796"
          },
          {
            "type": "html",
            "text": "\nAnother example is the [[Test Result]] in JUnit.",
            "id": "566ad643efe35a0c96e7c3b63c65dcdc"
          },
          {
            "type": "html",
            "text": "\nSee also [http://www.industriallogic.com/xp/refactoring/accumulationToCollection.html www.industriallogic.com]",
            "id": "d2a4ff47b5f94d0ce34a668f375c8da1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3c0631a780a6d5a678c26ce3be411f40"
          },
          {
            "type": "html",
            "text": "A variation on this pattern occurs when the [[Collecting Parameter]] is not a collection, but is an object with various properties.  As the object is passed around, various actors get and set properties on the [[Parameter Object]].  I think this version of the pattern is generally an [[Anti Pattern]], but may be useful when refactoring from the use of globals.  This usage is also related to the old [[Bidirectional Parameter Pattern]] often used in the [[Cee Language]].",
            "id": "4e635a2e8c8485fa3dbfe251ed4c7d17"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3c0631a780a6d5a678c26ce3be411f40"
          },
          {
            "type": "html",
            "text": "The practice of passing around a collecting parameter can be generalized to using a static closure, instantiating the functions that add to the collection so that they get the collector implicitly, along with a method to return the collection.  In other words, an object.  Although it can be used beneficially to decouple the state from the method invocation, this idiom is often an [[Anti Pattern]], creating stateful dependencies across methods that should have been grouped into the same object if they truly need such stateful information, and otherwise receiving and acting on state they shouldn't access.",
            "id": "b73c356cb443e552144c766fcbdf5b8d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3c0631a780a6d5a678c26ce3be411f40"
          },
          {
            "type": "html",
            "text": "Isn't this pretty much the same as an ouput iterator (e.g. [http://www.sgi.com/tech/stl/OutputIterator.html www.sgi.com])? Like java.lang.Appendable for example. -- [[Niklas Matthies]]",
            "id": "b555a14e1cba4736cb447686d3ea2c99"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3c0631a780a6d5a678c26ce3be411f40"
          },
          {
            "type": "html",
            "text": "[[Category Collections]]",
            "id": "70d2aa59fcbd5fe6fa6c0e024d6a5e55"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CollectingParameter c2.com]",
            "id": "18f961cfef1e08ac113e7ac31b928a9f"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628111695569
    }
  ]
}