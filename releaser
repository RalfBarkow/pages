{
  "title": "Releaser",
  "story": [
    {
      "type": "paragraph",
      "id": "e05165f7581faa03",
      "text": "GT releaser. [https://github.com/feenkcom/gtoolkit-releaser github]"
    },
    {
      "type": "code",
      "id": "c92b3564e7a959de",
      "text": "EpMonitor current disable.\nMetacello new\n   baseline: 'GToolkitReleaser';\n   repository: 'github://feenkcom/gtoolkit-releaser/src';\n   load.\nEpMonitor current enable."
    },
    {
      "type": "markdown",
      "id": "f8d34a679cff17e3",
      "text": "[[tudor girba]]\n — \n2022-04-29 at 10:47 via [https://discord.com/channels/729445214812504107/737255889517543545/969520320346222622 discord]\nI think there are several issues. So, let's take them one by one.\n\nThat some projects get improved upstream and not adopted downstream, has always been an issue that depended on the policy of the downstream project. [[Releaser]] will release anything that is in the image as long as you have the right to release in the respective repo. If you don't, a solution is to fork for the purpose of releasing. It works really well.\n\nThis leads us to projects managed differently. It is because they are managed differently that forking a solution. Today, the projects we depend on are not reproducible in a consistent fashion, yet our code is. This shows that our solution is flexible enough to reach the stated **goal of creating reproducible releases** regardless of how the upstream project is organized.\n\nAs for the community adopting it, we would only be happy if people want to adopt it."
    },
    {
      "type": "pagefold",
      "id": "416d6b8ecd4317a8",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "706bbd37020bdded",
      "text": "stephan\n — \n[…] There is currently no way to map this with releaser, and if a lot of projects start using it I get into an update storm"
    },
    {
      "type": "paragraph",
      "id": "0f9d45da6b8b0362",
      "text": "[[tudor girba]] via [https://discord.com/channels/729445214812504107/737255889517543545/970995897934708756 discord]\n — I really do not understand what you mean. There is nothing that happens in typical projects that is not supported in a scenario in which [[Releaser]] is used. The only difference to others is that other projects update manually and ad-hoc. The only consistently released Pharo project I know is Pharo itself (excluding GT, of course) as it's released automatically. Releaser adds to that, and it knows how to affect a separate branch, too, so that the main branch is not affected in any way. This means that current projects can continue working the way they want. I do not see the drawbacks."
    },
    {
      "type": "paragraph",
      "id": "68eab860090a867f",
      "text": "stephan via [https://discord.com/channels/729445214812504107/737255889517543545/970996646634737755 discord]\n — [[Pharo]] has exactly the same problems. This does not work at all for intermediate products. And that blocks growth\nI do not  have a solution yet, but I can observe what I see happening\nThe difficult problems are not in reproduction, they are in dealing with different update speeds.\nAnd one of the problems is that we describe dependencies only in one direction. That results in broken feedback loops"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Releaser",
        "story": []
      },
      "date": 1651232850797
    },
    {
      "item": {
        "type": "factory",
        "id": "f8d34a679cff17e3"
      },
      "id": "f8d34a679cff17e3",
      "type": "add",
      "date": 1651232867372
    },
    {
      "type": "edit",
      "id": "f8d34a679cff17e3",
      "item": {
        "type": "paragraph",
        "id": "f8d34a679cff17e3",
        "text": "tudor girba\n — \nheute um 10:47 Uhr\nI think there are several issues. So, let's take them one by one.\n\nThat some projects get improved upstream and not adopted downstream, has always been an issue that depended on the policy of the downstream project. Releaser will release anything that is in the image as long as you have the right to release in the respective repo. If you don't, a solution is to fork for the purpose of releasing. It works really well.\n\nThis leads us to projects managed differently. It is because they are managed differently that forking a solution. Today, the projects we depend on are not reproducible in a consistent fashion, yet our code is. This shows that our solution is flexible enough to reach the stated goal of creating reproducible releases regardless of how the upstream project is organized.\n\nAs for the community adopting it, we would only be happy if people want to adopt it."
      },
      "date": 1651232876711
    },
    {
      "type": "edit",
      "id": "f8d34a679cff17e3",
      "item": {
        "type": "paragraph",
        "id": "f8d34a679cff17e3",
        "text": "tudor girba\n — \n2022-04-29 at 10:47\nI think there are several issues. So, let's take them one by one.\n\nThat some projects get improved upstream and not adopted downstream, has always been an issue that depended on the policy of the downstream project. Releaser will release anything that is in the image as long as you have the right to release in the respective repo. If you don't, a solution is to fork for the purpose of releasing. It works really well.\n\nThis leads us to projects managed differently. It is because they are managed differently that forking a solution. Today, the projects we depend on are not reproducible in a consistent fashion, yet our code is. This shows that our solution is flexible enough to reach the stated goal of creating reproducible releases regardless of how the upstream project is organized.\n\nAs for the community adopting it, we would only be happy if people want to adopt it."
      },
      "date": 1651232892973
    },
    {
      "type": "edit",
      "id": "f8d34a679cff17e3",
      "item": {
        "type": "paragraph",
        "id": "f8d34a679cff17e3",
        "text": "tudor girba\n — \n2022-04-29 at 10:47 via [https://discord.com/channels/729445214812504107/737255889517543545/969520320346222622 discord]\nI think there are several issues. So, let's take them one by one.\n\nThat some projects get improved upstream and not adopted downstream, has always been an issue that depended on the policy of the downstream project. Releaser will release anything that is in the image as long as you have the right to release in the respective repo. If you don't, a solution is to fork for the purpose of releasing. It works really well.\n\nThis leads us to projects managed differently. It is because they are managed differently that forking a solution. Today, the projects we depend on are not reproducible in a consistent fashion, yet our code is. This shows that our solution is flexible enough to reach the stated goal of creating reproducible releases regardless of how the upstream project is organized.\n\nAs for the community adopting it, we would only be happy if people want to adopt it."
      },
      "date": 1651232910405
    },
    {
      "type": "edit",
      "id": "f8d34a679cff17e3",
      "item": {
        "type": "paragraph",
        "id": "f8d34a679cff17e3",
        "text": "[[tudor girba]]\n — \n2022-04-29 at 10:47 via [https://discord.com/channels/729445214812504107/737255889517543545/969520320346222622 discord]\nI think there are several issues. So, let's take them one by one.\n\nThat some projects get improved upstream and not adopted downstream, has always been an issue that depended on the policy of the downstream project. Releaser will release anything that is in the image as long as you have the right to release in the respective repo. If you don't, a solution is to fork for the purpose of releasing. It works really well.\n\nThis leads us to projects managed differently. It is because they are managed differently that forking a solution. Today, the projects we depend on are not reproducible in a consistent fashion, yet our code is. This shows that our solution is flexible enough to reach the stated goal of creating reproducible releases regardless of how the upstream project is organized.\n\nAs for the community adopting it, we would only be happy if people want to adopt it."
      },
      "date": 1651232918534
    },
    {
      "type": "edit",
      "id": "f8d34a679cff17e3",
      "item": {
        "type": "paragraph",
        "id": "f8d34a679cff17e3",
        "text": "[[tudor girba]]\n — \n2022-04-29 at 10:47 via [https://discord.com/channels/729445214812504107/737255889517543545/969520320346222622 discord]\nI think there are several issues. So, let's take them one by one.\n\nThat some projects get improved upstream and not adopted downstream, has always been an issue that depended on the policy of the downstream project. [[Releaser]] will release anything that is in the image as long as you have the right to release in the respective repo. If you don't, a solution is to fork for the purpose of releasing. It works really well.\n\nThis leads us to projects managed differently. It is because they are managed differently that forking a solution. Today, the projects we depend on are not reproducible in a consistent fashion, yet our code is. This shows that our solution is flexible enough to reach the stated goal of creating reproducible releases regardless of how the upstream project is organized.\n\nAs for the community adopting it, we would only be happy if people want to adopt it."
      },
      "date": 1651232944332
    },
    {
      "type": "edit",
      "id": "f8d34a679cff17e3",
      "item": {
        "type": "paragraph",
        "id": "f8d34a679cff17e3",
        "text": "[[tudor girba]]\n — \n2022-04-29 at 10:47 via [https://discord.com/channels/729445214812504107/737255889517543545/969520320346222622 discord]\nI think there are several issues. So, let's take them one by one.\n\nThat some projects get improved upstream and not adopted downstream, has always been an issue that depended on the policy of the downstream project. [[Releaser]] will release anything that is in the image as long as you have the right to release in the respective repo. If you don't, a solution is to fork for the purpose of releasing. It works really well.\n\nThis leads us to projects managed differently. It is because they are managed differently that forking a solution. Today, the projects we depend on are not reproducible in a consistent fashion, yet our code is. This shows that our solution is flexible enough to reach the stated **goal of creating reproducible releases** regardless of how the upstream project is organized.\n\nAs for the community adopting it, we would only be happy if people want to adopt it."
      },
      "date": 1651233000343
    },
    {
      "type": "edit",
      "id": "f8d34a679cff17e3",
      "item": {
        "type": "markdown",
        "id": "f8d34a679cff17e3",
        "text": "[[tudor girba]]\n — \n2022-04-29 at 10:47 via [https://discord.com/channels/729445214812504107/737255889517543545/969520320346222622 discord]\nI think there are several issues. So, let's take them one by one.\n\nThat some projects get improved upstream and not adopted downstream, has always been an issue that depended on the policy of the downstream project. [[Releaser]] will release anything that is in the image as long as you have the right to release in the respective repo. If you don't, a solution is to fork for the purpose of releasing. It works really well.\n\nThis leads us to projects managed differently. It is because they are managed differently that forking a solution. Today, the projects we depend on are not reproducible in a consistent fashion, yet our code is. This shows that our solution is flexible enough to reach the stated **goal of creating reproducible releases** regardless of how the upstream project is organized.\n\nAs for the community adopting it, we would only be happy if people want to adopt it."
      },
      "date": 1651233002656
    },
    {
      "item": {
        "type": "factory",
        "id": "e05165f7581faa03"
      },
      "id": "e05165f7581faa03",
      "type": "add",
      "after": "f8d34a679cff17e3",
      "date": 1651233077062
    },
    {
      "type": "edit",
      "id": "e05165f7581faa03",
      "item": {
        "type": "paragraph",
        "id": "e05165f7581faa03",
        "text": "[https://github.com/feenkcom/gtoolkit-releaser github]"
      },
      "date": 1651233085192
    },
    {
      "id": "e05165f7581faa03",
      "type": "move",
      "order": [
        "e05165f7581faa03",
        "f8d34a679cff17e3"
      ],
      "date": 1651233086986
    },
    {
      "type": "edit",
      "id": "e05165f7581faa03",
      "item": {
        "type": "paragraph",
        "id": "e05165f7581faa03",
        "text": "GT releaser. [https://github.com/feenkcom/gtoolkit-releaser github]"
      },
      "date": 1651233095824
    },
    {
      "item": {
        "type": "factory",
        "id": "c92b3564e7a959de"
      },
      "id": "c92b3564e7a959de",
      "type": "add",
      "after": "f8d34a679cff17e3",
      "date": 1651233115831
    },
    {
      "type": "edit",
      "id": "c92b3564e7a959de",
      "item": {
        "type": "code",
        "id": "c92b3564e7a959de",
        "text": "EpMonitor current disable.\nMetacello new\n   baseline: 'GToolkitReleaser';\n   repository: 'github://feenkcom/gtoolkit-releaser/src';\n   load.\nEpMonitor current enable."
      },
      "date": 1651233117918
    },
    {
      "id": "c92b3564e7a959de",
      "type": "move",
      "order": [
        "e05165f7581faa03",
        "c92b3564e7a959de",
        "f8d34a679cff17e3"
      ],
      "date": 1651233119409
    },
    {
      "item": {
        "type": "factory",
        "id": "416d6b8ecd4317a8"
      },
      "id": "416d6b8ecd4317a8",
      "type": "add",
      "after": "f8d34a679cff17e3",
      "date": 1651575440373
    },
    {
      "type": "edit",
      "id": "416d6b8ecd4317a8",
      "item": {
        "type": "pagefold",
        "id": "416d6b8ecd4317a8",
        "text": "~"
      },
      "date": 1651575443303
    },
    {
      "item": {
        "type": "factory",
        "id": "0f9d45da6b8b0362"
      },
      "id": "0f9d45da6b8b0362",
      "type": "add",
      "after": "416d6b8ecd4317a8",
      "date": 1651575444761
    },
    {
      "type": "edit",
      "id": "0f9d45da6b8b0362",
      "item": {
        "type": "paragraph",
        "id": "0f9d45da6b8b0362",
        "text": "tudor girba\n — \nheute um 12:31 Uhr\nI really do not understand what you mean. There is nothing that happens in typical projects that is not supported in a scenario in which Releaser is used. The only difference to others is that other projects update manually and ad-hoc. The only consistently released Pharo project I know is Pharo itself (excluding GT, of course) as it's released automatically. Releaser adds to that, and it knows how to affect a separate branch, too, so that the main branch is not affected in any way. This means that current projects can continue working the way they want. I do not see the drawbacks.\nstephan\n — \nheute um 12:34 Uhr\nPharo has exactly the same problems. This does not work at all for intermediate products. And that blocks growth\nI do not  have a solution yet, but I can observe what I see happening\nThe difficult problems are not in reproduction, they are in dealing with different update speeds.\nAnd one of the problems is that we describe dependencies only in one direction. That results in broken feedback loops"
      },
      "date": 1651575446185
    },
    {
      "type": "edit",
      "id": "0f9d45da6b8b0362",
      "item": {
        "type": "paragraph",
        "id": "0f9d45da6b8b0362",
        "text": "[[tudor girba]] via [https://discord.com/channels/729445214812504107/737255889517543545/970995897934708756 discord]\n — I really do not understand what you mean. There is nothing that happens in typical projects that is not supported in a scenario in which Releaser is used. The only difference to others is that other projects update manually and ad-hoc. The only consistently released Pharo project I know is Pharo itself (excluding GT, of course) as it's released automatically. Releaser adds to that, and it knows how to affect a separate branch, too, so that the main branch is not affected in any way. This means that current projects can continue working the way they want. I do not see the drawbacks.\nstephan\n — \nheute um 12:34 Uhr\nPharo has exactly the same problems. This does not work at all for intermediate products. And that blocks growth\nI do not  have a solution yet, but I can observe what I see happening\nThe difficult problems are not in reproduction, they are in dealing with different update speeds.\nAnd one of the problems is that we describe dependencies only in one direction. That results in broken feedback loops"
      },
      "date": 1651575553983
    },
    {
      "type": "edit",
      "id": "0f9d45da6b8b0362",
      "item": {
        "type": "paragraph",
        "id": "0f9d45da6b8b0362",
        "text": "[[tudor girba]] via [https://discord.com/channels/729445214812504107/737255889517543545/970995897934708756 discord]\n — I really do not understand what you mean. There is nothing that happens in typical projects that is not supported in a scenario in which Releaser is used. The only difference to others is that other projects update manually and ad-hoc. The only consistently released Pharo project I know is Pharo itself (excluding GT, of course) as it's released automatically. Releaser adds to that, and it knows how to affect a separate branch, too, so that the main branch is not affected in any way. This means that current projects can continue working the way they want. I do not see the drawbacks."
      },
      "date": 1651575569671
    },
    {
      "type": "add",
      "id": "68eab860090a867f",
      "item": {
        "type": "paragraph",
        "id": "68eab860090a867f",
        "text": "stephan\n — \nheute um 12:34 Uhr\nPharo has exactly the same problems. This does not work at all for intermediate products. And that blocks growth\nI do not  have a solution yet, but I can observe what I see happening\nThe difficult problems are not in reproduction, they are in dealing with different update speeds.\nAnd one of the problems is that we describe dependencies only in one direction. That results in broken feedback loops"
      },
      "after": "0f9d45da6b8b0362",
      "date": 1651575571946
    },
    {
      "type": "edit",
      "id": "68eab860090a867f",
      "item": {
        "type": "paragraph",
        "id": "68eab860090a867f",
        "text": "stephan via [https://discord.com/channels/729445214812504107/737255889517543545/970996646634737755 discord]\n — \n\nPharo has exactly the same problems. This does not work at all for intermediate products. And that blocks growth\nI do not  have a solution yet, but I can observe what I see happening\nThe difficult problems are not in reproduction, they are in dealing with different update speeds.\nAnd one of the problems is that we describe dependencies only in one direction. That results in broken feedback loops"
      },
      "date": 1651575590373
    },
    {
      "type": "edit",
      "id": "68eab860090a867f",
      "item": {
        "type": "paragraph",
        "id": "68eab860090a867f",
        "text": "stephan via [https://discord.com/channels/729445214812504107/737255889517543545/970996646634737755 discord]\n — \n\n[[Pharo]] has exactly the same problems. This does not work at all for intermediate products. And that blocks growth\nI do not  have a solution yet, but I can observe what I see happening\nThe difficult problems are not in reproduction, they are in dealing with different update speeds.\nAnd one of the problems is that we describe dependencies only in one direction. That results in broken feedback loops"
      },
      "date": 1651575598796
    },
    {
      "type": "edit",
      "id": "0f9d45da6b8b0362",
      "item": {
        "type": "paragraph",
        "id": "0f9d45da6b8b0362",
        "text": "[[tudor girba]] via [https://discord.com/channels/729445214812504107/737255889517543545/970995897934708756 discord]\n — I really do not understand what you mean. There is nothing that happens in typical projects that is not supported in a scenario in which [[Releaser]] is used. The only difference to others is that other projects update manually and ad-hoc. The only consistently released Pharo project I know is Pharo itself (excluding GT, of course) as it's released automatically. Releaser adds to that, and it knows how to affect a separate branch, too, so that the main branch is not affected in any way. This means that current projects can continue working the way they want. I do not see the drawbacks."
      },
      "date": 1651575608148
    },
    {
      "type": "add",
      "id": "706bbd37020bdded",
      "item": {
        "type": "paragraph",
        "id": "706bbd37020bdded",
        "text": "stephan\n — \n[…] There is currently no way to map this with releaser, and if a lot of projects start using it I get into an update storm"
      },
      "after": "416d6b8ecd4317a8",
      "date": 1651575652747
    },
    {
      "type": "edit",
      "id": "68eab860090a867f",
      "item": {
        "type": "paragraph",
        "id": "68eab860090a867f",
        "text": "stephan via [https://discord.com/channels/729445214812504107/737255889517543545/970996646634737755 discord]\n — [[Pharo]] has exactly the same problems. This does not work at all for intermediate products. And that blocks growth\nI do not  have a solution yet, but I can observe what I see happening\nThe difficult problems are not in reproduction, they are in dealing with different update speeds.\nAnd one of the problems is that we describe dependencies only in one direction. That results in broken feedback loops"
      },
      "date": 1651575706526
    }
  ]
}