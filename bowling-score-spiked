{
  "title": "Bowling Score Spiked",
  "story": [
    {
      "type": "paragraph",
      "id": "cfd8affc9acaad27",
      "text": "Bob Martin told a story about pair-programming the code to compute bowling scores. I wrote this alternate implementation mostly to see if I could and then wrote it up as an example of spike-programming.  [http://c2.com/doc/bowl/ website]"
    },
    {
      "type": "paragraph",
      "id": "25c211d677a52e94",
      "text": "The input is the sequence of throws recorded along the top of each frame. The output is the running total reported in the bottom. I chose to represent the input as a string of digits with commas at frame boundaries. Strikes and spares are denoted by x and / as is the custom with hand scoring. My program translates the input to output in place with a series of substitution commands."
    },
    {
      "type": "code",
      "id": "2fa06b36fea3ac6d",
      "text": "s/\\/, (\\d)/\\/ $1, $1/g;\t\ns/\\/, (x)/\\/ 10, x/g;\t\ns/(\\d )\\//$1.(10-$1)/ge;\ns/x, (\\d \\d)/x $1, $1/g;\ns/x/10/g;\t\t\ns/(((,?)( \\d+)+){10}).*/$1/;\ns/(\\d+) (\\d+)/$1+$2/ge;\t\ns/(\\d+) (\\d+)/$1+$2/ge;\t\ns/(\\d+)/$total+=$1/ge;\t"
    },
    {
      "type": "paragraph",
      "id": "49d0ccc9bcf30471",
      "text": "This program was innovative in that it propagated the bonus for strikes and spares by duplicating digits without adding them up until the end."
    },
    {
      "type": "markdown",
      "text": "> That one is really pretty amazing. Amazingly unreadable is what I think when I see this solution. Yuck. That's perl for ya.",
      "wiki": "BowlingGameSpikes",
      "id": "16d1089a1e5c4d1dw"
    },
    {
      "type": "paragraph",
      "id": "91cd249b43a2e732",
      "text": "I can't go bowling without recalling my discovery years earlier when I coded a scoring algorithm with a simple loop by looking ahead at the next frame rather than carrying incomplete bonuses forward and then back-patching results as is done when scoring in realtime. "
    },
    {
      "type": "paragraph",
      "id": "f4b80426c8bed922",
      "text": "See [[Bowling Score]]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Bowling Score Spiked"
      },
      "date": 1353779561308
    },
    {
      "item": {
        "type": "factory",
        "id": "cfd8affc9acaad27"
      },
      "id": "cfd8affc9acaad27",
      "type": "add",
      "date": 1353779583229
    },
    {
      "type": "edit",
      "id": "cfd8affc9acaad27",
      "item": {
        "type": "paragraph",
        "id": "cfd8affc9acaad27",
        "text": "Bob Martin told a story about pair-programming the code to compute bowling scores. I wrote this alternate implementation mostly to see if I could and then wrote it up as an example of spike-programming. "
      },
      "date": 1353779851505
    },
    {
      "type": "edit",
      "id": "cfd8affc9acaad27",
      "item": {
        "type": "paragraph",
        "id": "cfd8affc9acaad27",
        "text": "Bob Martin told a story about pair-programming the code to compute bowling scores. I wrote this alternate implementation mostly to see if I could and then wrote it up as an example of spike-programming.  [http://c2.com/doc/bowl/ website]"
      },
      "date": 1353779899121
    },
    {
      "item": {
        "type": "factory",
        "id": "2fa06b36fea3ac6d"
      },
      "id": "2fa06b36fea3ac6d",
      "type": "add",
      "after": "cfd8affc9acaad27",
      "date": 1353780060001
    },
    {
      "type": "edit",
      "id": "2fa06b36fea3ac6d",
      "item": {
        "type": "code",
        "id": "2fa06b36fea3ac6d",
        "text": "s/\\/, (\\d)/\\/ $1, $1/g;\t\ns/\\/, (x)/\\/ 10, x/g;\t\ns/(\\d )\\//$1.(10-$1)/ge;\ns/x, (\\d \\d)/x $1, $1/g;\ns/x/10/g;\t\t\ns/(((,?)( \\d+)+){10}).*/$1/;\ns/(\\d+) (\\d+)/$1+$2/ge;\t\ns/(\\d+) (\\d+)/$1+$2/ge;\t\ns/(\\d+)/$total+=$1/ge;\t"
      },
      "date": 1353780066090
    },
    {
      "item": {
        "type": "paragraph",
        "id": "25c211d677a52e94",
        "text": ""
      },
      "id": "25c211d677a52e94",
      "type": "add",
      "after": "cfd8affc9acaad27",
      "date": 1353780167929
    },
    {
      "type": "edit",
      "id": "25c211d677a52e94",
      "item": {
        "type": "paragraph",
        "id": "25c211d677a52e94",
        "text": "The input is the sequence of throws recorded along the top of each frame. The output is the running total reported in the bottom. I chose to represent the input as a string of digits with commas at frame boundaries. Strikes and spares are denoted by x and / as is the custom with hand scoring. My program translates the input to output in place with a series of substitution commands."
      },
      "date": 1353780192086
    },
    {
      "item": {
        "type": "factory",
        "id": "49d0ccc9bcf30471"
      },
      "id": "49d0ccc9bcf30471",
      "type": "add",
      "after": "2fa06b36fea3ac6d",
      "date": 1353780341934
    },
    {
      "type": "edit",
      "id": "49d0ccc9bcf30471",
      "item": {
        "type": "paragraph",
        "id": "49d0ccc9bcf30471",
        "text": "This program was innovative in that it propagated the bonus for strikes and spares by duplicating digits without adding them up until the end."
      },
      "date": 1353780481213
    },
    {
      "item": {
        "type": "paragraph",
        "id": "91cd249b43a2e732",
        "text": ""
      },
      "id": "91cd249b43a2e732",
      "type": "add",
      "after": "49d0ccc9bcf30471",
      "date": 1353780481718
    },
    {
      "type": "edit",
      "id": "91cd249b43a2e732",
      "item": {
        "type": "paragraph",
        "id": "91cd249b43a2e732",
        "text": "I can't go bowling without recalling my discovery years earlier when I coded a scoring algorithm with a simple loop by looking ahead at the next frame rather than carrying incomplete bonuses forward and then back-patching results as is done when scoring realtime."
      },
      "date": 1353780693162
    },
    {
      "type": "edit",
      "id": "91cd249b43a2e732",
      "item": {
        "type": "paragraph",
        "id": "91cd249b43a2e732",
        "text": "I can't go bowling without recalling my discovery years earlier when I coded a scoring algorithm with a simple loop by looking ahead at the next frame rather than carrying incomplete bonuses forward and then back-patching results as is done when scoring in realtime. See [[Bowling Score]]."
      },
      "date": 1353780791001
    },
    {
      "type": "edit",
      "id": "91cd249b43a2e732",
      "item": {
        "type": "paragraph",
        "id": "91cd249b43a2e732",
        "text": "I can't go bowling without recalling my discovery years earlier when I coded a scoring algorithm with a simple loop by looking ahead at the next frame rather than carrying incomplete bonuses forward and then back-patching results as is done when scoring in realtime. "
      },
      "date": 1353807412071
    },
    {
      "item": {
        "type": "paragraph",
        "id": "f4b80426c8bed922",
        "text": "See [[Bowling Score]]."
      },
      "id": "f4b80426c8bed922",
      "type": "add",
      "after": "91cd249b43a2e732",
      "date": 1353807412581
    },
    {
      "id": "16d1089a1e5c4d1dw",
      "type": "add",
      "item": {
        "type": "paragraph",
        "text": "That one is really pretty amazing. Amazingly unreadable is what I think when I see this solution. Yuck. (That's perl for ya :)",
        "wiki": "BowlingGameSpikes",
        "id": "16d1089a1e5c4d1dw"
      },
      "after": "49d0ccc9bcf30471",
      "date": 1641063159570
    },
    {
      "type": "edit",
      "id": "16d1089a1e5c4d1dw",
      "item": {
        "type": "factory",
        "text": "That one is really pretty amazing. Amazingly unreadable is what I think when I see this solution. Yuck. That's perl for ya.",
        "wiki": "BowlingGameSpikes",
        "id": "16d1089a1e5c4d1dw"
      },
      "date": 1641063182232
    },
    {
      "type": "edit",
      "id": "16d1089a1e5c4d1dw",
      "item": {
        "type": "markdown",
        "text": "> That one is really pretty amazing. Amazingly unreadable is what I think when I see this solution. Yuck. That's perl for ya.",
        "wiki": "BowlingGameSpikes",
        "id": "16d1089a1e5c4d1dw"
      },
      "date": 1641063195889
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1641133110877
    }
  ]
}