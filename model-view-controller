{
  "title": "Model View Controller",
  "story": [
    {
      "text": "__Model–view–controller__ (usually known as __[[MVC]]__) is a [[software design pattern]] commonly used for developing [[user interface]]s that divide the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user- [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller wikipedia]",
      "type": "markdown",
      "id": "3a3a472f-ceb2-4ab9-9939-4dc4b1237bb5"
    },
    {
      "type": "html",
      "text": "An easy way to understand MVC: the model is the data, the view is the window on the screen, and the controller is the glue between the two. -- [[Connelly Barnes]]",
      "id": "e96c9e8bc242eb5b20c2872aa00940f9"
    },
    {
      "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;'>\n<a href='https://commons.wikimedia.org/wiki/File:MVC-Process.svg' target='_blank'><img data-imagestyle='fullwiki'; style='display:block; margin:auto; width:100%;' src='https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/420px-MVC-Process.svg.png'>\n</a>\n<p class=caption>\n\nDiagram of interactions within the MVC pattern - [https://commons.wikimedia.org/wiki/File:MVC-Process.svg wikimedia]\n\n</p></div>",
      "type": "html",
      "id": "b3bf4907-ec97-4230-ab92-3881af854afc"
    },
    {
      "type": "html",
      "text": "\nThe best rubric ever: \"<b>We need SMART Models, THIN Controllers, and DUMB Views</b>\"",
      "id": "1e202d88690fce8c3e57fb51a7096ecd"
    },
    {
      "type": "html",
      "text": "\nThe Controller does not oversee the operation of the Views and Models - it's not a [[God Class]]. The controller mediates communication and unifies validation, using either direct calls or the [[Observer Pattern]].",
      "id": "be7ec2917a000ebc1f322dae8bbc1dbd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Model-View-Controller is the concept introduced by Smalltalk's inventors ([[Trygve Reenskaug]] and others) of encapsulating some data together with its processing (the model) and isolate it from the manipulation (the controller) and presentation (the view) part that has to be done on a [[User Interface]].",
      "id": "fad2b7c4ab7a5e693dc6bcf29721357f"
    },
    {
      "type": "html",
      "text": " A <b>model</b> is an object representing data or even activity, e.g. a database table or even some plant-floor production-machine process.",
      "id": "b08bff65cdbd1dd0fde56bf1b18dfc33"
    },
    {
      "type": "html",
      "text": " A <b>view</b> is some form of visualization of the state of the model.",
      "id": "fde501cd964c65187b4d41f43f336b8f"
    },
    {
      "type": "html",
      "text": " A <b>controller</b> offers facilities to change the state of the model.\nSmalltalk provides mechanisms to link models, views and controllers in some standard way in order for a model to communicate state changes to every attached view (there can be several, as you can see). Model state changes happen either because a controller issued some command or for some internal reason.",
      "id": "528d8e76df26694cf85de69b820f7c24"
    },
    {
      "type": "image",
      "url": "http://www.zeroplayer.com/images/stuff/model_view_controller.png",
      "text": "www.zeroplayer.com",
      "id": "f9672af7b6fe27c15dc8654c2da9cd23"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "806d00413e8cde35da86e501528da274"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Note that the term Controller has adopted two radically different meanings - see [[Whatsa Controller Anyway]]. Also see [[Martin Fowler]]'s [[Patterns Of Enterprise Applications]], who bemoans this greatly.",
      "id": "d504ccf15c774524d265965a8ddc6a48"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "A triad of three modules linked by the [[Observer Pattern]], all residing within a [[Representation Layer]]. The View drives a presentation within a [[Gui Layer]], and elements within the View observe the Model. Elements within the Controller observe the View and Model, and elements within the Model observe the Controller. The Model fronts data objects within the [[Logic Layer]].",
      "id": "9d3b334847a9e2a20461834ed1cdd045"
    },
    {
      "type": "html",
      "text": "\nThis pattern decouples changes to how data are manipulated from how they are displayed or stored, while unifying the code in each component.",
      "id": "82cacd666c362d10ddfaf2e9fe1644fb"
    },
    {
      "type": "html",
      "text": "\nAlternative versions of this pattern appear in many architectures, and with various layer affiliations. Simplifications include Observing an entire component instead of elements within it, and using direct method invocations instead of Observation messages. Complications include substituting any element of the three components with another one.",
      "id": "ca3cf16d19140fcbac26e384a3d1bb46"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "I've started writing a history of MVC at [[Model View Controller History]]. -- [[Mitchell Model]]",
      "id": "902d854e6935448a4b7b08c9cd4c1497"
    },
    {
      "type": "html",
      "text": "\nOn [[Model Model View Controller]] I've highlighted that since the early days of Smalltalk MVC there have usually been <i>two</i> models involved. -- [[Randy Stafford]]",
      "id": "224cf1a8f9644c809fc12c5d7ea7db43"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "<b>Derivations & extensions to MVC</b>",
      "id": "fdee6d77a5bd8d0853c223f4b7f245d6"
    },
    {
      "type": "html",
      "text": " [[Model View Presenter]]",
      "id": "3be84bed8813da61b6467b2d24ed4d92"
    },
    {
      "type": "html",
      "text": " [[Model Delegate]]",
      "id": "0a172a7419874947d3bb329ade175306"
    },
    {
      "type": "html",
      "text": " [[Morphic Interface]]",
      "id": "40ed3d41a120ee7e466d1a3524b61b09"
    },
    {
      "type": "html",
      "text": " [[Hierarchical Model View Controller]]",
      "id": "7b4e1304ec8972438bbbabc7938953b8"
    },
    {
      "type": "html",
      "text": " [[Presentation Abstraction Control]]",
      "id": "91851eb0579decfc35b84dba6779b6e4"
    },
    {
      "type": "html",
      "text": " [[Model Pipe View Controller]]",
      "id": "f46bd1652994a92c43b750463e91c396"
    },
    {
      "type": "html",
      "text": " [[Four Layer Architecture]]",
      "id": "ad044611da70d9c27105a165ff394e45"
    },
    {
      "type": "html",
      "text": " [[Templating In Php]]",
      "id": "02e3ad9ada2b497348d51eb9f684abb3"
    },
    {
      "type": "html",
      "text": " [http://www.codeproject.com/dotnet/mvcderived.asp www.codeproject.com]",
      "id": "0775a44a3f5592eb6477f5064d1ecb45"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "When a system obeys the principle [[Do The Most Complex Thing That Could Possibly Work]], marketects often respond by clumping its rambling notions together into 3 groups. The sub-[[Spaghetti Code]] group nearest the User becomes the \"view\", that nearest the database becomes the \"model\", and the stuff in between becomes the \"controller\".",
      "id": "87b3f8764c4a3b4004488e3b54f8df84"
    },
    {
      "type": "html",
      "text": "\nMarketects then refer to their project's architecture as \"MVC\", borrowing that acronym's impressive lineage.",
      "id": "7d5c58631c8c46d0d3ef302d0b74b9bc"
    },
    {
      "type": "html",
      "text": "<i>Sounds like [[Sun Microsystems]]'s [[Java Language]] [[Pet Store]]</i>",
      "id": "99be4381960acaf0411d1c04874e60d5"
    },
    {
      "type": "html",
      "text": "- True, but the remarks concerning 'marketects' actually goes for the whole branding of MVC, which we refer to in our shop as [[Model View Crapola]]. There are usable concepts in the MVC idea, but we find it is an ossified model too often imposed, especially in web based apps. -- [[Llewelyn Thomas]] ",
      "id": "557444e83439dbbb9021dbac7f16630f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Is MVC a pattern? Several patterns? I propose an MVC pattern contest (either here or for PLoP). Ideas on how to proceed? This could be fun. -- [[Jim Coplien]]",
      "id": "897ba1e123c40eb6e522342bbc0173af"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "How does the more recent [[Document View]] architecture (presented in some windowing platforms) differ or resemble the older MVC? -- [[Skip Sailors]]",
      "id": "81d1daaf980f788015b22f345bc2eea3"
    },
    {
      "type": "html",
      "text": "\nThey are similar in a way such that:",
      "id": "ef683f4fff53317b131ae529e6843d30"
    },
    {
      "type": "html",
      "text": " Document = Model: Stores the domain data and logic",
      "id": "c69736798e765715a9321b67d3ece838"
    },
    {
      "type": "html",
      "text": " View = View",
      "id": "4b91d2eb116e5246b3ea7c73805e870c"
    },
    {
      "type": "html",
      "text": " CFrameWnd = Controller: CFrameWnd dispatches window messages and you implement methods here to alter Model and View based on the message received such as a keyboard or mouse message.",
      "id": "5e623824e297ca10f8ba8cad05b7eaea"
    },
    {
      "type": "html",
      "text": "-- [[Chao Kuo Lin]]",
      "id": "030f4e3cbc7160cbb99d6106b7b59e18"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "MVC means many things to many people. That's why there will be many patterns with at least a connection to MVC. One of the last things we did in [[Monday School]] was to have a go at browser patterns (st-80 style browsers). I think they would count as MVC patterns too. Anyway, with that much latitude allowed, here is the list...",
      "id": "8845a62665b661c8732366b821b710ec"
    },
    {
      "type": "html",
      "text": " [[Browse One Hierarchy]]",
      "id": "cc7fbedf6e654219fc56875d77252388"
    },
    {
      "type": "html",
      "text": " [[Left Selects Right]]",
      "id": "e469b5e88a6a5b951a55d7ca019055db"
    },
    {
      "type": "html",
      "text": " ... add yours here ...\nOn the other hand, [[Adele Goldberg]] maintains that MVC is the solution to one specific problem and therefore just one pattern (though I doubt she would use the term.) She would say:",
      "id": "a2b83efd96051df665e502fee6f47577"
    },
    {
      "type": "html",
      "text": "Not all people can or prefer to operate a computer in the same way.",
      "id": "6435f835ccb902df2e90a729e3f24113"
    },
    {
      "type": "html",
      "text": "Therefore, separate the controls of the computer from the views it presents so that appropriate controls can be selected by the user. A handicapped individual would be an example of a user needing a different kind of control.",
      "id": "e8a020e9ab70b7c9934eac230b7484ac"
    },
    {
      "type": "html",
      "text": "\nI don't know of specific examples where this MVC capability has been exploited. Do you? -- [[Ward Cunningham]]",
      "id": "7f41ad905d91c79b13530d2d4dba0498"
    },
    {
      "type": "html",
      "text": " <i>Windows accessibility features, localization, themes, \"Classic\" vs XP, mouse vs pad vs stick vs trackball vs cursor keys, voice control.</i>",
      "id": "c9a680172692fc853911a133e36cc184"
    },
    {
      "type": "html",
      "text": " <i>Media controls (play, reverse, mute, etc) on screen and on keyboard.</i>",
      "id": "c680329349c188fd5f076b21a7b44a17"
    },
    {
      "type": "html",
      "text": " <i>Cell phone: speak number, key it in, select from list. -- mt</i>",
      "id": "67e9136df1dab334e5d0e07d99e60dde"
    },
    {
      "type": "html",
      "text": "\nPerhaps web pages are an example of this - with the 'view' being css, 'model' being html, 'control' being, in part, the browser.\nI agree on this. I think javascript could be seen as the controller-part of the web-page. This becomes very apparent with Microsoft's lesser-known extension called behaviours. Behaviours are basically a declarative way of linking javascript code to styles (the view).\nDoes anybody have any links on this perspective?",
      "id": "52ac006391b707bbe68c020785711a19"
    },
    {
      "type": "html",
      "text": "\nI'm not sure if it would be applicable, but Amiga programs used to widely support an AREXX \"port\" which allowed programs to be controlled through the REXX scripting language, basically by another process. Thus the user interface presented one view, and events therefrom constitute one \"controller\" while events from the AREXX port would seem to be a different \"controller\" (and return values from control events would presumably represent another view as well).",
      "id": "399a65f9bc3b1e33aa3116d62d3bb89a"
    },
    {
      "type": "html",
      "text": "\nIn this way, I'm a little unclear about why MVC separates <i>V</i> and <i>C.</i> If we think of VC (taken together) as \"interface\" then the whole MVC approach seems to simplify to [[Model Delegate]] or <b>client/server</b> (or more formally, <i>client</i> - <b>protocol</b> - <i>server</i>). Does abstracting the controller somehow facilitate inter-object interactions? Does it make sense that some controls don't have a corresponding view, or is it that some controls may have to affect several views <b>some</b> of which don't offer any user interaction (and thus don't implement the control aspect of an \"interface\")?",
      "id": "63287c3848c3a6c4a5d73c873c9d0819"
    },
    {
      "type": "html",
      "text": "<i>What about [[Squeak Smalltalk]]'s alleged handwriting recognition? I have not actually used it, but... -- [[Bill Trost]]</i>",
      "id": "4bb7b264cd3e2a3bdedc6256441dc7b7"
    },
    {
      "type": "html",
      "text": "\nReal-time audio apps do this. (Ardour for example). The controls are not the primary view, the audio output is, and we do not control the app with audio, but we may control it with two separated input controllers, a gui and perhaps a hardware interface over midi. Also, in well-designed ones, the controllers are never allowed to jam the output, so they must be properly separated with some kind of queue to the model. So we wind up with an engine (model) that receives input from more than one control interface, but outputs a 'view' that is never tied in with controls. The view is notified whenever a model state changes. In the case of a gui, that too needs to get updated as a secondary 'view' but the hardware controllers do not. -- Iain Duncan",
      "id": "2362e5c5147d1278380dae0464ce0483"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "I can think of one instance I've seen. Back around 1992 [[Eric Smith]] was asked by one of our clients to build a VT-100 interface to some Smalltalk ([[Object Works]] 4.0) code. He did it by defining a VT-100 [[Graphics Tool]] and a set of special-purpose Controllers for VT-100s ([[List Controller]], [[Paragraph Editor]], etc.) that would translate keystroke combinations into the equivalent of mouse-moves. In this way his browsers would work the same on the workstation AND on the VT-100. -- [[Kyle Brown]]",
      "id": "0bd66fdee15053dfb754dae93c8a2c89"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Like the original MVC article's title - \"A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk -80\" (Glenn Krasner and Stephen Pope, [[Journal Of Object Oriented Programming]], August/September 1988, [http://www.ics.uci.edu/~redmiles/ics227-SQ04/papers/KrasnerPope88.pdf www.ics.uci.edu]) - says, it's a <i>paradigm</i>. It's a conceptual framework for designing and implementing graphical user interfaces. A class library, such as Smalltalk-80's, would typically implement MVC based on abstract classes and default method definitions for models, views, and controllers - a Framework! -- [[Mitchell Model]]",
      "id": "73e89e35b8f3ff7ebb1408d16abbdd58"
    },
    {
      "type": "html",
      "text": "\"A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk -80\" is <i>not</i> the title of the original MVC article. A publication from 1979 by Trygve Reenskaug shows that the idea of MVC is much older: [http://heim.ifi.uio.no/~trygver/1979/mvc-2/1979-12-MVC.pdf heim.ifi.uio.no]. -- [[Timo Stamm]]",
      "id": "c2c3dd77c31ad7f6892b37cbde7ef9be"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "A link to a decent explanation of MVC would be welcomed here. After spending a few hours searching today, I come home empty handed...Let me know if you have something please.",
      "id": "14351119d4376be345cc377c17ea7da9"
    },
    {
      "type": "html",
      "text": "\nI found [http://ootips.org/mvc-pattern.html ootips.org] to be useful. -- [[John Clonts]]",
      "id": "d98dcd56e0e4313f1646272c86ea7d37"
    },
    {
      "type": "html",
      "text": "\nWard's collection of [[Hot Draw]] CRC cards ([http://c2.com/doc/crc/draw.html c2.com]) helped me wrap my mind a little further around the concept.",
      "id": "53937a0d7622c8d444703b27d5d6cb19"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "I think that Model-View-Controller is good as far as it goes, but that some expansion of the concepts are needed. The development of [[Java Swing]] provides some clues, I think.",
      "id": "b08d075611acbdbd5764b157f9b0fc3a"
    },
    {
      "type": "html",
      "text": "\nI'm offering [[Model Pipe View Controller]] for consideration, and would appreciate some feedback.",
      "id": "f7f7fc9bf53a8b7206e52ed6ce45b608"
    },
    {
      "type": "html",
      "text": "-- [[Bruce Atherton]]",
      "id": "ec1eba51e59e86b7fcfe83869e236901"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Apple's tutorial for Rhapsody - Discovering [[Open Step]] - provides detailed examples of the MVC model, and a description of it.",
      "id": "fc5fdb84532dadc709b5cfd440584f98"
    },
    {
      "type": "html",
      "text": "\nChapter 2: A Simple Application provides a description, and Chapter 4: A Multi-Document Application probably provides the best example of the benefits. -- [[Ronald Hayden]]",
      "id": "f27c2ea820756076c935c484d4ab4963"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "[[Model View Presenter]] tries to solve some of the drawbacks of mvc. What do the experts say? -- [[Thomas Mahler]]",
      "id": "5c3c838fde7574aec5de9e42edb55b61"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "-- [[Ian Chai]]",
      "id": "1680bae6fa11aa87e00816380c0f7e0f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "[[Web Macro]] implements a [[Servlet Design]] based on Model/View/Controller. The argument is that, because the web works by returning HTML views to clients, an MVC design is inherent in server-side web programming. Java servlets, unlike CGI, make it more of a reality because they persist between connections and are most likely to have a middle-tier model underneath them. [[Web Macro]] is a free servlet framework that implements this [[Servlet Design]]. -- [[Justin Wells]]",
      "id": "e854b55e21d0ffc1e2ddf70e544b9a0d"
    },
    {
      "type": "html",
      "text": "\nBy the way, what is MVC2 in the servlet context? Why MVC1 was not enough and how does it differ from the original MVC? -- [[Guillermo Schwarz]]",
      "id": "6561d223fcb2750dcee363b0d9fad3c3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "I had an interesting chat with [[Trygve Reenskaug]] this week. He notes that the original MVC had four objects: not only the model, view, and controller, but the user as well. He regrets that the fourth object has become lost in the popularization of the idiom.",
      "id": "b4efcb6bb3f1da7287d91f148775b43f"
    },
    {
      "type": "html",
      "text": "\nHe notes that MVC was an outgrowth of the original direct-manipulation metaphor popularized in early OO practice (see [[Brenda Laurel]]'s [[Computers As Theatre]]), where you want the objects on the screen to <i>be</i> the objects in the program. MVC actually works against that metaphor but evolved as a necessary evil. Why? Because the user object maintains multiple simultaneous views of the model at once; the factoring into user, model, view, and controller allows one to support that. So while the speculation is that Adele would approach MVC from the input side, Trygve approaches it from the output side.",
      "id": "b1635742dfced5c1bcc0ac0272ca18a1"
    },
    {
      "type": "html",
      "text": "<i>...which discussion of direct manipulation segues nicely into: [[Morphic Interface]]. In [[Squeak Smalltalk]] this is (apparently) replacing the MVC framework (not paradigm!). As someone else comments on the [[Morphic Interface]] page, there is very little information around on it. Despite having read Mark Guzdial's book on Squeak and the original papers on Morphic in the [[Self Language]] I am none the wiser if there is really anything useful to be learned here (is it really an alternative way to structure programs than MVC?). Help me Obi wan, you're my only hope...</i>",
      "id": "8e6aed8716dcf564cfabb8c70a19f9aa"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "I've been trying to apply some of the ideas behind XP and the refactoring thing in VB, but am at a bit of a loss with MVC. Can anyone provide some simple examples?",
      "id": "77a8137f27e36e7539e27d7c8df7c524"
    },
    {
      "type": "html",
      "text": "<i>See [[Model View Controller In Vb Classic Active Server Pages]].</i>",
      "id": "b0538475c545a90faeb095ae8e037ac2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "The comment by [[Trygve Reenskaug]] quoted above fits nicely with the way I like to think about MVC:",
      "id": "a26bc218ce9f128c984cb433609eddac"
    },
    {
      "type": "html",
      "text": " The View is connected to the user's eyes;",
      "id": "a06827db72bab714fa1d26a896782b8b"
    },
    {
      "type": "html",
      "text": " the Controller is connected to the user's hands;",
      "id": "9d4002d52ea18d156279c67396fe3e9f"
    },
    {
      "type": "html",
      "text": " and the Model is connected to the user's mind.\nI wouldn't push that too far, but it sometimes help me sort out design issues.",
      "id": "c94dd7998b611e40fbb276db360001a1"
    },
    {
      "type": "html",
      "text": "-- Don Dwiggins",
      "id": "47a3bd0eee3a1a56819ce3cb960853a5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "One could make the case that MVC is more general than a user interface pattern. The user might be another piece of software (class). It would therefore include [[Facade Pattern]], [[Visitor Pattern]] et al. -- [[Tom Rossen]]",
      "id": "39a7b0c44eea615f7b4916a130635581"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Has anyone had much success with [[Model View Controller]] and the [[Palm Os]]? -- [[Scott Elliott]]",
      "id": "61ecd954369014c00a94ee50bb9f4cea"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "MVC is exactly the same as BASIC. Let me explain! In BASIC you had INPUT, PRINT and LET and most of the code was just assembling them together, but your code written this way could not be assembled together. - This is completely incorrect. MVC is quite the contrary! If we apply that logic to any language able to accept input, process it, and generate output (that is, ANY computer language), any computer language would be the same as MVC. A computer language is used to implement the MVC pattern, but that doesn't make it a pattern language. Is like saying that brick and mortar is a house: in fact, a house is a pattern that can be built with brick and mortar, but that doesn't mean that a house is brick and mortar... it is the way brick and mortar are assembled what builds a house. -- [[Luis Colorado]]",
      "id": "2d53ce4378396e3b57da28a8c9ce002d"
    },
    {
      "type": "html",
      "text": "\nThen somebody realized that code should be organized the same way: Input, Output and internal processing. I/O was called the View/Controller and the internal processing was called the Model. Incorrect: in fact, the Model, the View, and the Controller are objects able to receive input and to provide output to the other components. -- [[Luis Colorado]]",
      "id": "4abe7fef1391128adee0d01916999e6f"
    },
    {
      "type": "html",
      "text": "\nThat is why Servlets are not MVC, nor Struts is MVC, nor J2EE is MVC. How do you know there are not? Because in MVC when you change the model, you don't need to change the view, since it is updated automagically. MVC is about direct manipulation of objects, they know how to display themselves, and because of that, the smaller objects must know how to display themselves. Big objects are made of smaller object that know how to display themselves, so big objects magically know how to display themselves. This is partially correct. I don't know of any language or technology that per se enforces MVC, and that includes J2EE, Servlets, etc. Another correction: in MVC, the Model objects don't know how to display themselves, neither have object that know how to do so. You are referring to the View objects. -- [[Luis Colorado]]",
      "id": "ac006fa0265a368a84be92eff6e9f1fa"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "The essential ingredient in MVC is the Observer pattern. Take that out and all you have left is IPO (Input-Process-Output). The Observer is what maintains encapsulation and keeps MVC strongly object-oriented. Without the Observer, you need setters and \"this object here fiddling inside that object there\" - decidedly non-OO.",
      "id": "ee03bacb32e8223a2f077f631fbfd6d9"
    },
    {
      "type": "html",
      "text": "\nAny software architecture that features three components or layers will eventually be described as an instance of MVC. Then it will be criticized for doing it wrong.",
      "id": "b134ae9ea53185bcc60c7d1cf128c9fd"
    },
    {
      "type": "html",
      "text": "-- [[Marc Thibault]]",
      "id": "5d9b98abd5a5b2bb90a0bcfe8398a542"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "[[Model View Controller]] is one of the few design patterns to have been turned into a song: [http://home.in.tum.de/pittenau/ModelViewController.mp3 home.in.tum.de] (lyrics at [http://www.oreillynet.com/pub/wlg/3533 www.oreillynet.com]).\nThat fourofoured for me. Alt location: [http://vst.ensm-douai.fr/noury/20 vst.ensm-douai.fr]",
      "id": "fc117343151c3eb02910e56e33b75100"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Historically MVC patterns could have been promote as to allow magical switch of views around the same model or models around same view. Also many implementation library/tools had a design to facilitate composite of different MVC.",
      "id": "54eef83162615f69430fdbd7668990c3"
    },
    {
      "type": "html",
      "text": "\nIn fact for the MVC pattern the idea of model and view switching requires that the substitute view or model have the exact same interface with the controller than the original view or model otherwise the magical switch is broken. Change just one thing as a little different view dynamic behavior or one missing model method and the magical switch is broken.",
      "id": "facc856336e97119c1dd49e1ed3602f3"
    },
    {
      "type": "html",
      "text": "\nAlso in the MVC pattern there's absolutely no design to have composite MVC.",
      "id": "0e49a7d22fa53baf37d951e0b17d0344"
    },
    {
      "type": "html",
      "text": "\nFrom this point of view you can design view as jsp with [[Java Bean]] views, Action as controller and models as [[Java Bean]] models to have a MVC pattern. That's enough to support the weak and too simple MVC pattern.",
      "id": "aa7ebde23a14c970fcd4141223ef26a5"
    },
    {
      "type": "html",
      "text": "-- [[Bernard Devaux]]",
      "id": "0a92a7a46c07096c2108b05d339564a6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "I've occasionally found MVC-ish patterns cropping up in my code more or less spontaneously; most recently in a small computer game. The model knows something's stats and location, the view knows how to draw on the screen, and the controller is particularly flexible, being the interface between a game object and the user... or the AI... or a network connection... or a limited-purpose AI like an autopilot...",
      "id": "44b7ad3ebb44be5155578397738777ae"
    },
    {
      "type": "html",
      "text": "\nNeat stuff.",
      "id": "4b421b89b0b40bd06d1d89c2ff7ce696"
    },
    {
      "type": "html",
      "text": "-- [[Simon Heath]]",
      "id": "0716ddc4fa3d8d7d004f23962d5e87ba"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Computer Graphics Principles and Practice by Foley, van Dam, Feiner, Hughes (ISBN: 020184840-6) presents an interesting description of the [[Model View Controller]] concept on pages 17 to 22. -- [[Chris Eineke]]",
      "id": "2f68c666435c0d2db77b130e5e6e9c1e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Links:",
      "id": "8e414ac401809cef7be7beebee4daa02"
    },
    {
      "type": "html",
      "text": " [http://ootips.org/mvc-pattern.html ootips.org]",
      "id": "5a5c4a3f1e889b749c6fa22fd76f4fa9"
    },
    {
      "type": "html",
      "text": " [http://www.object-arts.com/EducationCentre/Overviews/MVC.htm www.object-arts.com]",
      "id": "cef6ba22c544d765a3e4f488d79c4e9f"
    },
    {
      "type": "html",
      "text": " [http://www.zope.org/Resources/Mozilla/ZWiki/ModelViewController www.zope.org]",
      "id": "7eb5f1b14dee0cba47e9778c7cfcf934"
    },
    {
      "type": "html",
      "text": " [http://www.webmacro.org/ModelViewController www.webmacro.org]",
      "id": "1d1492f8196b490f6d2e38a26ee0b1a3"
    },
    {
      "type": "html",
      "text": " [http://fox.wikis.com/wc.dll?Wiki~ModelViewController fox.wikis.com]",
      "id": "5c9e2c2533a6c9d692b391f4e738b981"
    },
    {
      "type": "html",
      "text": " [http://wact.sourceforge.net/index.php/ModelViewController wact.sourceforge.net]",
      "id": "1923362c5f1f3ff3f61737fc87a87d2c"
    },
    {
      "type": "html",
      "text": " [http://en.wikipedia.org/wiki/Model-view-controller en.wikipedia.org]",
      "id": "998d7d8ec6c017393bddb3c301c970b6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "<b>[[Test Driven Development]]</b> gripe: Testing is about isolation and decoupling. But most out-of-the-box MVC platforms force you to test the Controller by drilling down from the View, thru the whole stack. WTF? -- [[Phl Ip]]",
      "id": "ddda9c4f6689525f98c51f28510d3f67"
    },
    {
      "type": "html",
      "text": "\nThat is why I generally like to keep listeners (in Java) as external classes. They can then be instantiated along with the other objects necessary for testing. While you don't test the View, you can then fire events and ensure you are getting the right behavior.",
      "id": "c6f78d41eb172c3f7021d0dbc214fdca"
    },
    {
      "type": "html",
      "text": "-- Brad",
      "id": "be96ab9fdd191fb046330cc51cf09f0b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "I think the problem is that the semantics were wrong from the get-go. We commonly talk about data models and that clearly isn't what is meant here. To have application logic running in a model conflates the two definitions of model. In reality we want something similar to View-Listener-Logic-Data Model. In Java data models are termed 'beans' (I hate the cutesy term). Using them helps with serialization and testing. It is easy to mock one and stuff data into it. Using just Logic-Data Model-Listener one can do full development of the data models and application logic. Those can then be run as part of the daily build. It also ensures that the application logic and data model are not coupled to a specific View-Listener type.",
      "id": "c0b2ab1f204da458612352e0602a8792"
    },
    {
      "type": "html",
      "text": "-- Brad",
      "id": "be96ab9fdd191fb046330cc51cf09f0b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "<i>This phrase seems stuck in [[Fuzz Ville]] because everybody is using a different head-model for stuff. Could somebody propose an algorithm or unambiguous <b>list of rules</b> for categorizing or \"slotting\" a given piece of code or algorithm into one of the three categories (model, view, controller). Something along the lines of, \"if it has X or does Y, then it's a controller. If it lacks A, B, or C; and Q, then it's a model\", etc.</i>",
      "id": "c67f9087cd2e49508a63139f4c60a7ab"
    },
    {
      "type": "html",
      "text": " The <b>model</b> represents the underlying data. It's a wrapper around an in-memory data structure, collection of tables in a database, a set of files on a disk or a stream of data, etc.",
      "id": "71ff4ae6ce5286a9be5d678750b34509"
    },
    {
      "type": "html",
      "text": " A <b>view</b> provides a visualisation or presentation of the model. It gives us a way to see what the model represents.",
      "id": "56bd9ca1a90ec554e611dcf77a6e64b3"
    },
    {
      "type": "html",
      "text": " A <b>controller</b> provides facilities to update the data in the model. It gives us a way to modify what the model represents.",
      "id": "b8ff4d5c313d88721ad4a7111d76d748"
    },
    {
      "type": "html",
      "text": "\nMore specific rules are not needed, as it's a general pattern.",
      "id": "5b3f0742850b4bdca71f3463da371016"
    },
    {
      "type": "html",
      "text": "<i>\"Data\" is a vague term. I want to avoid [[Iknow It When Isee It]]. And by \"visualization\", do you mean UI? If so, MVC is trivially common and there are no real alternatives other than raw RAM data or RAM dumps. Perhaps what is needed is a contrasting model(s) to see what MVC is not.</i>",
      "id": "27de50b8111ce7a556b7eb49ad955f2d"
    },
    {
      "type": "html",
      "text": "\nSomething less vague than \"data\" is unnecessary. By \"visualisation\", I typically (but not exclusively) mean UI, and MVC can be found frequently enough to be considered common. However, explicit awareness of it allows us to construct classes, frameworks, etc., that facilitate it. As for seeing what MVC is not, that's somewhat difficult -- it's a bit like trying to define \"musical instrument\" by seeing what a \"musical instrument\" is not.",
      "id": "fd55048283885420e08633265d1d349a"
    },
    {
      "type": "html",
      "text": "<i>Present a truck; it's a start, and better than what we have so far for MVC. (Granted, a truck can make [poor] music, but is a rare demand of it.) Most non-electric musical instruments fit into known categories, such as wind, string, percussion, etc. We can have check-lists of features for them and add up scores/weights to come up with a \"fitness\" score.</i>",
      "id": "685bb9019dc354b856088e93088b1c6b"
    },
    {
      "type": "html",
      "text": "\nThere are numerous examples of MVC on the Web. See, for example, [http://www.codeproject.com/Articles/25057/Simple-Example-of-MVC-Model-View-Controller-Design www.codeproject.com]",
      "id": "79aed212e3c485909db3c0f3b3cd473b"
    },
    {
      "type": "html",
      "text": "<i>Okay, but where are the examples of non-MVC for contrast? One cannot tell from such examples alone whether the elements of the example are required for MVC, or just a byproduct of the example.</i>",
      "id": "dc51c85ce8899a0592bae6e127600c78"
    },
    {
      "type": "html",
      "text": "\nHere's a Tiny C compiler: [http://bellard.org/tcc/ bellard.org] There's no model, no view, and no controller. It's not MVC.",
      "id": "9d83d19a0c8b1767c6270fe73932779a"
    },
    {
      "type": "html",
      "text": "<i>Okay, but what's missing that makes it non-MVC? It has working variables and data structures that could perhaps be called a \"model\", and the output (machine language) the \"view\" without some clear rule to disqualify them.</i>",
      "id": "024ecbee6ec79ecf4bffcb424fa70662"
    },
    {
      "type": "html",
      "text": "\nFor one thing, it's not interactive. MVC is typically used to manage interactive manipulation of data. The compiler's \"model\", once created, does not change and is not intended to change so there is no interface to the model to support interactive change. MVC supports at least the potential for multiple views but the compiler has -- at best, and stretching the usual definition of \"view\" -- just one. There is nothing in the compiler that could be considered a controller. On the other hand, an interactive programming environment (e.g., Logo, [[Tomato Ide]], etc.) likely uses MVC if the internal representation of the program (i.e., model) is intended to change.",
      "id": "17dd3e50edc86c7869210c53962c00f3"
    },
    {
      "type": "html",
      "text": "<i>We can make it interactive, such as, \"A loop of pattern X was found at line 123. Do you want to optimize it for a single core or multi-core?\". And what do you mean by \"multiple views\" in the compiler example?</i>",
      "id": "57fae9ab5da1a5369608c6a7b56c8c3a"
    },
    {
      "type": "html",
      "text": "\nIf we make it interactive, then MVC might be an appropriate way to handle the interactivity. By \"multiple views\", I mean that there aren't various ways of viewing the object code built into the compiler.",
      "id": "4bb2e37eceeb0f929c61cabac25333a7"
    },
    {
      "type": "html",
      "text": " <i>I will agree that the computer \"views\" the output and not a human, but I'm not sure this changes anything or should change anything. And there may be multiple ways to pack or \"format\" machine code.</i>",
      "id": "4d9b62d51cfcb03ebf840a36bb76680f"
    },
    {
      "type": "html",
      "text": " The \"view\" in the Tiny C compiler is, at best, a single emitted file format. There is no interactive presentation.",
      "id": "1dc720b29f576b3488fb2b6da12130f7"
    },
    {
      "type": "html",
      "text": "<i>But how about we try to stick to GUI's for analysis. Is there a common (or once-common) GUI model that is clearly not MVC?</i>",
      "id": "f68e75febfb69de7521a7b834afcfa69"
    },
    {
      "type": "html",
      "text": "\nSure. A trivial input-process-output loop is not MVC. There is no \"model\" to abstract a collection of discrete variables, though you might glancingly consider a data-entry form to be both view and controller -- which it is, to the same degree that a truck can be considered a musical instrument.",
      "id": "a345fb5340d1e81ae7fb675b456b25e1"
    },
    {
      "type": "html",
      "text": "<i>I'm still not clear on this. Please elaborate on \"to abstract a collection of discrete variables\". Variables and collections are already abstractions.</i>",
      "id": "e273a909c120affd0fa3fa3eea9e5957"
    },
    {
      "type": "html",
      "text": "\nBy \"collection\", I meant \"a bunch\", not an explicit Collection mechanism.",
      "id": "e5a576d6f2d342d01f1a3486492a8095"
    },
    {
      "type": "html",
      "text": "\nWith sufficient effort, I'm sure you can argue that everything is MVC and nothing is MVC, but that would be as pointless as arguing that there are no distinctions between things and everything's just stuff. If you are genuinely having difficulty identifying or grasping MVC and are sincerely interested, I'll point you to some resources. Otherwise, I have better things to do than teach you intermediate-level OO programming.",
      "id": "1808f81ae4ccd3f86e1db3b2d3a26372"
    },
    {
      "type": "html",
      "text": "<i>The pattern(s) is ill-defined and the term is overloaded, that's my main point. Perhaps one can say, \"This is the Fred GUI Model or framework 2.0\", and eliminate mention of models, views, controllers, etc. It would eliminate a lot of industry confusion.</i>",
      "id": "76d9d44362046231e38313a0121e36e2"
    },
    {
      "type": "html",
      "text": "\nIt's ill-defined or overloaded only if you're expecting MVC to be represented in a definitive fashion, such as by a specific [[Design Pattern]]. MVC is best regarded as a general architectural <i>approach</i>, implementable in numerous ways. As terminology, \"MVC\" is on par with notions like \"musical instrument\" or \"swimming\", which are general concepts having innumerable manifestations. There's only \"industry confusion\" (perhaps) when <i>talking</i> about MVC, as some folks naively get hung up believing there is a \"true MVC\" and others that are not, but there's no real confusion when implementing or using it -- in the end, it just turns into code.",
      "id": "df6624f6f79c47228f553537a9d23a76"
    },
    {
      "type": "html",
      "text": "\nIt may be helpful to regard MVC as the interactive analogue to the classic batch-oriented input-processing-output model of non-interactive programs. The model contains the program state, the view displays the model to the user, and the controller receives input from the user to change the model.",
      "id": "2b84d88c18c3b2b63b762a06378343cb"
    },
    {
      "type": "html",
      "text": "<i>As rough labels for very general notions, perhaps. And musical instruments have pretty good sub-classifications associated with them. Nothing comparable exists for MVC.</i>",
      "id": "f8a72ec7e18b0f6082755956254a11ce"
    },
    {
      "type": "html",
      "text": "\nNothing comparable needs to exist for MVC. It's clear enough for the purpose.",
      "id": "aad8a164afc5c196ad766f9931fa1b82"
    },
    {
      "type": "html",
      "text": "<i>It needs work.</i>",
      "id": "692ec52507c3bfd0be8bcdd5f4cc596c"
    },
    {
      "type": "html",
      "text": "\nWhat needs work? Developers are effectively using and implementing MVC on a daily basis. Definitions -- largely in agreement -- can be found in numerous places. This seems to be a non-problem for everyone but you.",
      "id": "427ad4d3d3099f92a4fc16bf67d11d2e"
    },
    {
      "type": "html",
      "text": "<i>Of course they are, there is no real alternative. One would have to go out of their way to NOT use it, based on the way it's described here. It's a [[Useless Truth]]. Stop trying to defend rubbish.</i>",
      "id": "828a0eb215eef43aa46e6c90023ace77"
    },
    {
      "type": "html",
      "text": "\nClearly, you have not read any of the above. Again, this seems to be a non-problem for everyone but you.",
      "id": "d94417ebf3c371e8167b5dd9f8024be5"
    },
    {
      "type": "html",
      "text": "<i>I tried, but it's nebulous. And other developers </i>do<i> confuse the term. The other wiki topics debating the term and its application are a testament to this. I didn't create those topics.</i>",
      "id": "9a0c261d16a9c00dbb0e1c99bbb0d451"
    },
    {
      "type": "html",
      "text": "\nDebate does not imply confusion or misunderstanding; it only implies disagreement.",
      "id": "0ed3f911c9955e09dd0d108bd014b3f2"
    },
    {
      "type": "html",
      "text": "<i>Yes, disagreement over the meaning of the term and/or terms of its parts.</i>",
      "id": "0cdba529e5dc5195bac586fa1e7da1c5"
    },
    {
      "type": "html",
      "text": "\nThey're quibbles amongst the knowledgeable, like arguing whether a V4 engine is better for racing than an I4 (or vice versa) amongst engineers. It's not the \"I don't get it, so the explanation must be wrong or it doesn't exist\" that you consistently maintain.",
      "id": "f6d5624072b4f25b4ac21c2ae5039374"
    },
    {
      "type": "html",
      "text": "<i>I'm asking for a clear and concise definition (or at least a reasonable attempt at one), not resume evaluations. Different issues. The topics of the \"experts\" on this wiki are also struggling with the term.</i>",
      "id": "af41628ac2707263b1a24ad9e605cd54"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "Almost all computer games exhibit a very clear MVC, with a literal controller which is physically separate both from the view (ie, TV or monitor) and the modelling unit (the CPU/box, with its internal representations of the game components).",
      "id": "ab58366c2ae82faeb7212ecfa0d2d23e"
    },
    {
      "type": "html",
      "text": "\nIt's mainly in the realm of touch-devices like phone UIs that the view and controller become blurred. Even on desktop computers, the reality is that the keyboard and mouse are the controllers and the \"controls\" on the screen are actually views, so that often there are two views showing different aspects of the model. For example, a slider \"control\" might be a view onto a movie file, while the display of an individual frame on the same screen is really also a depiction of the current point in the playback. But, in reality, the controller is the mouse that clicks \"pause\" or the keyboard that transmits the shortcut for \"rewind\".",
      "id": "03e79da7ea3f197f8817a4c8c3dba7e3"
    },
    {
      "type": "html",
      "text": "\nTWW",
      "id": "5bccbf28f8430930e2cd71159ff2ef01"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "<i>Top's Working Definition</i>",
      "id": "272452d22c6edc5ef871098d022c335d"
    },
    {
      "type": "html",
      "text": " Model - The domain model, including data and procedures.",
      "id": "0f7015dc97569afa04c58cc14bb0d861"
    },
    {
      "type": "html",
      "text": " View - What the user sees and controls; the final UI.",
      "id": "48e0eb3b1715f42d016a8692d00c602c"
    },
    {
      "type": "html",
      "text": " Controller - The middle-ware and/or GUI framework that translates the Model to the View and vice verse. (A better name for this part may be \"User I/O Manager\".)",
      "id": "bfd428bd7c724240b0b4c94c1bc489bf"
    },
    {
      "type": "html",
      "text": "\nI've selected this definition set in part because the \"parts\" are relatively unambiguous and not tied to any particular language or paradigm. Perfect non-ambiguity is probably not possible. ",
      "id": "17886494a15a728b4fd107d27e18982a"
    },
    {
      "type": "html",
      "text": "\nNote that it is possible to combine Model and Controller, such as a UI manager that is integrated or closely tuned around a specific domain. An example would be a gaming rendering engine that has a texture library manager built-in (so that a gaming shop doesn't have to invent their own). For the most part, shops will use an existing GUI manager that was designed independent of their particular domain, and one can potentially examine the history of the Model and Controller to see if there is any cross influence.",
      "id": "94c1708df226fba75f95698394c90ea8"
    },
    {
      "type": "html",
      "text": "\nUnder this definition, there is no such thing as a \"non-MVC\" framework. MVC is just way to describe the parts of systems that have significant UI's.",
      "id": "464cdb264dc7df302fde24f98137e573"
    },
    {
      "type": "html",
      "text": "-- top",
      "id": "963163aa27657d8b9e032e7a701e73ec"
    },
    {
      "type": "html",
      "text": "<i>That's an entirely reasonable definition and assessment. I'd only change \"... that have significant UI's\" to \"... that have significant interactive UI's\".</i>",
      "id": "50a087395977068eb09e3d0c2779e576"
    },
    {
      "type": "html",
      "text": "\nIf you call <i>anything</i> that Toppie presents as \"reasonable\", you'll get flogged around here :-) As far as \"interactive\", a non-interactive app or system may also have the 3 parts and it may also be useful to make a distinction between the 3 parts. For example, [[Crystal Reports]] (CR) often functions as the \"Controller\" portion of a batch reporting system/app. The Model is the data tables and the CR user's (report programmer's) report configuration that set up the definition of the report in CR. The View is the printed output or output document file. [Reworked wording.] -t",
      "id": "fae7937863b1c7025651fd2d907a650d"
    },
    {
      "type": "html",
      "text": " <i>\"Interactive\" is usually included in MVC definitions to address the fact that changes to the model are reflected in the view in real-time and the controller provides the means to change the model. So, in the above, the report configuration would not typically be considered a controller. Maybe it could be considered (inventing terminology here) Model-View-Retriever.</i>",
      "id": "3a5560fd423b2b78b33ad9ab0f972898"
    },
    {
      "type": "html",
      "text": "<i>I'm not clear how [[Crystal Reports]] is MVC. Could you explain? By the way, your usage of Controller is acceptable, but not quite conventional. By convention, the Controller provides an interface to update the model and (indirectly, but sometimes directly) the view.</i>",
      "id": "221251535bc7247311601af88717a786"
    },
    {
      "type": "html",
      "text": "\nWe could say it only applies to interactive systems because that's where the term was born. But I'm not sure it's useful to so narrow it nor problematic to keep the wider version (where input or interaction is optional).",
      "id": "a2bfdef81f1df71bab3ace1b1c942fb6"
    },
    {
      "type": "html",
      "text": "<i>I don't see how that answers my question, or how it addresses my comment about your definition of Controller.</i>",
      "id": "beb9666cc16e74564e3d5cafe6ec0a03"
    },
    {
      "type": "html",
      "text": "\nI didn't say CR \"is\" MVC, only that it often acts as a controller in a batch process in organizations because it \"translates the Model to the View\". As far as your comment, I thought I addressed it adequately. I don't understand the complaint.",
      "id": "5b58cd9d556808cf504188845b0c48c8"
    },
    {
      "type": "html",
      "text": "<i>I see. When you wrote, \"a non-interactive app or system may also have the 3 parts [...] For example, [[Crystal Reports]] is the 'Controller'\", I thought you meant that [[Crystal Reports]] has all three parts and you used Controller as an example of one of them, and that it is, therefore, MVC.</i>",
      "id": "8ddda60f64f302e518c8d74f79a487c9"
    },
    {
      "type": "html",
      "text": "\nI shall rework it to avoid that interpretation path.",
      "id": "f516102a7839eaca3618281408eb799c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "\nTo <b>Define</b> this alleged [[Model View Controller]], one needn't look further than Qt's QTreeView & model system, or [[Ruby On Rails]]' lexical first approximation which can do no wrong. ~~Him that thou knowest thine",
      "id": "f9bbabbb1fe54bb7efe3fccf899b8668"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "31e5fc23c2ef8048709099d1e738ae6b"
    },
    {
      "type": "html",
      "text": "\nSee: [[Whatsa Controller Anyway]], [[Design Principles Behind Smalltalk]], [[Model Model View Controller]], [[Application Controller]], [[Model View Controller As An Aggregate Design Pattern]], [[Model Targeter Surface]], [[Mvc Versus Event Driven]], [[Mongrel Ee Ruby]], [[Mirror Model]]",
      "id": "7095fe995a5f8369880f5304a7a0bfc2"
    },
    {
      "type": "html",
      "text": "\nContrast: [[Mvc Is Not Object Oriented]], [[Mvc Is Not Implementable]], [[Test Fixture]], [[Commit Rollback Database Auto Tests]]",
      "id": "9cafdd7267a422b50c5042c47945278c"
    },
    {
      "type": "html",
      "text": "\n[[Category Pattern]], [[Category User Interface]]",
      "id": "d037e5d8a0bf41879e7972766d8d1666"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ModelViewController c2.com]",
      "id": "a78872085680fc188bf90a73bc7d0a3b"
    }
  ],
  "journal": [
    {
      "date": 1416486435000,
      "id": "250c16f934af8495b26726b1a9cfe404",
      "type": "create",
      "item": {
        "title": "Model View Controller",
        "story": [
          {
            "type": "html",
            "text": "An easy way to understand MVC: the model is the data, the view is the window on the screen, and the controller is the glue between the two. -- [[Connelly Barnes]]",
            "id": "e96c9e8bc242eb5b20c2872aa00940f9"
          },
          {
            "type": "html",
            "text": "\nThe best rubric ever: \"<b>We need SMART Models, THIN Controllers, and DUMB Views</b>\"",
            "id": "1e202d88690fce8c3e57fb51a7096ecd"
          },
          {
            "type": "html",
            "text": "\nThe Controller does not oversee the operation of the Views and Models - it's not a [[God Class]]. The controller mediates communication and unifies validation, using either direct calls or the [[Observer Pattern]].",
            "id": "be7ec2917a000ebc1f322dae8bbc1dbd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Model-View-Controller is the concept introduced by Smalltalk's inventors ([[Trygve Reenskaug]] and others) of encapsulating some data together with its processing (the model) and isolate it from the manipulation (the controller) and presentation (the view) part that has to be done on a [[User Interface]].",
            "id": "fad2b7c4ab7a5e693dc6bcf29721357f"
          },
          {
            "type": "html",
            "text": " A <b>model</b> is an object representing data or even activity, e.g. a database table or even some plant-floor production-machine process.",
            "id": "b08bff65cdbd1dd0fde56bf1b18dfc33"
          },
          {
            "type": "html",
            "text": " A <b>view</b> is some form of visualization of the state of the model.",
            "id": "fde501cd964c65187b4d41f43f336b8f"
          },
          {
            "type": "html",
            "text": " A <b>controller</b> offers facilities to change the state of the model.\nSmalltalk provides mechanisms to link models, views and controllers in some standard way in order for a model to communicate state changes to every attached view (there can be several, as you can see). Model state changes happen either because a controller issued some command or for some internal reason.",
            "id": "528d8e76df26694cf85de69b820f7c24"
          },
          {
            "type": "image",
            "url": "http://www.zeroplayer.com/images/stuff/model_view_controller.png",
            "text": "www.zeroplayer.com",
            "id": "f9672af7b6fe27c15dc8654c2da9cd23"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "806d00413e8cde35da86e501528da274"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Note that the term Controller has adopted two radically different meanings - see [[Whatsa Controller Anyway]]. Also see [[Martin Fowler]]'s [[Patterns Of Enterprise Applications]], who bemoans this greatly.",
            "id": "d504ccf15c774524d265965a8ddc6a48"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "A triad of three modules linked by the [[Observer Pattern]], all residing within a [[Representation Layer]]. The View drives a presentation within a [[Gui Layer]], and elements within the View observe the Model. Elements within the Controller observe the View and Model, and elements within the Model observe the Controller. The Model fronts data objects within the [[Logic Layer]].",
            "id": "9d3b334847a9e2a20461834ed1cdd045"
          },
          {
            "type": "html",
            "text": "\nThis pattern decouples changes to how data are manipulated from how they are displayed or stored, while unifying the code in each component.",
            "id": "82cacd666c362d10ddfaf2e9fe1644fb"
          },
          {
            "type": "html",
            "text": "\nAlternative versions of this pattern appear in many architectures, and with various layer affiliations. Simplifications include Observing an entire component instead of elements within it, and using direct method invocations instead of Observation messages. Complications include substituting any element of the three components with another one.",
            "id": "ca3cf16d19140fcbac26e384a3d1bb46"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "I've started writing a history of MVC at [[Model View Controller History]]. -- [[Mitchell Model]]",
            "id": "902d854e6935448a4b7b08c9cd4c1497"
          },
          {
            "type": "html",
            "text": "\nOn [[Model Model View Controller]] I've highlighted that since the early days of Smalltalk MVC there have usually been <i>two</i> models involved. -- [[Randy Stafford]]",
            "id": "224cf1a8f9644c809fc12c5d7ea7db43"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "<b>Derivations & extensions to MVC</b>",
            "id": "fdee6d77a5bd8d0853c223f4b7f245d6"
          },
          {
            "type": "html",
            "text": " [[Model View Presenter]]",
            "id": "3be84bed8813da61b6467b2d24ed4d92"
          },
          {
            "type": "html",
            "text": " [[Model Delegate]]",
            "id": "0a172a7419874947d3bb329ade175306"
          },
          {
            "type": "html",
            "text": " [[Morphic Interface]]",
            "id": "40ed3d41a120ee7e466d1a3524b61b09"
          },
          {
            "type": "html",
            "text": " [[Hierarchical Model View Controller]]",
            "id": "7b4e1304ec8972438bbbabc7938953b8"
          },
          {
            "type": "html",
            "text": " [[Presentation Abstraction Control]]",
            "id": "91851eb0579decfc35b84dba6779b6e4"
          },
          {
            "type": "html",
            "text": " [[Model Pipe View Controller]]",
            "id": "f46bd1652994a92c43b750463e91c396"
          },
          {
            "type": "html",
            "text": " [[Four Layer Architecture]]",
            "id": "ad044611da70d9c27105a165ff394e45"
          },
          {
            "type": "html",
            "text": " [[Templating In Php]]",
            "id": "02e3ad9ada2b497348d51eb9f684abb3"
          },
          {
            "type": "html",
            "text": " [http://www.codeproject.com/dotnet/mvcderived.asp www.codeproject.com]",
            "id": "0775a44a3f5592eb6477f5064d1ecb45"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "When a system obeys the principle [[Do The Most Complex Thing That Could Possibly Work]], marketects often respond by clumping its rambling notions together into 3 groups. The sub-[[Spaghetti Code]] group nearest the User becomes the \"view\", that nearest the database becomes the \"model\", and the stuff in between becomes the \"controller\".",
            "id": "87b3f8764c4a3b4004488e3b54f8df84"
          },
          {
            "type": "html",
            "text": "\nMarketects then refer to their project's architecture as \"MVC\", borrowing that acronym's impressive lineage.",
            "id": "7d5c58631c8c46d0d3ef302d0b74b9bc"
          },
          {
            "type": "html",
            "text": "<i>Sounds like [[Sun Microsystems]]'s [[Java Language]] [[Pet Store]]</i>",
            "id": "99be4381960acaf0411d1c04874e60d5"
          },
          {
            "type": "html",
            "text": "- True, but the remarks concerning 'marketects' actually goes for the whole branding of MVC, which we refer to in our shop as [[Model View Crapola]]. There are usable concepts in the MVC idea, but we find it is an ossified model too often imposed, especially in web based apps. -- [[Llewelyn Thomas]] ",
            "id": "557444e83439dbbb9021dbac7f16630f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Is MVC a pattern? Several patterns? I propose an MVC pattern contest (either here or for PLoP). Ideas on how to proceed? This could be fun. -- [[Jim Coplien]]",
            "id": "897ba1e123c40eb6e522342bbc0173af"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "How does the more recent [[Document View]] architecture (presented in some windowing platforms) differ or resemble the older MVC? -- [[Skip Sailors]]",
            "id": "81d1daaf980f788015b22f345bc2eea3"
          },
          {
            "type": "html",
            "text": "\nThey are similar in a way such that:",
            "id": "ef683f4fff53317b131ae529e6843d30"
          },
          {
            "type": "html",
            "text": " Document = Model: Stores the domain data and logic",
            "id": "c69736798e765715a9321b67d3ece838"
          },
          {
            "type": "html",
            "text": " View = View",
            "id": "4b91d2eb116e5246b3ea7c73805e870c"
          },
          {
            "type": "html",
            "text": " CFrameWnd = Controller: CFrameWnd dispatches window messages and you implement methods here to alter Model and View based on the message received such as a keyboard or mouse message.",
            "id": "5e623824e297ca10f8ba8cad05b7eaea"
          },
          {
            "type": "html",
            "text": "-- [[Chao Kuo Lin]]",
            "id": "030f4e3cbc7160cbb99d6106b7b59e18"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "MVC means many things to many people. That's why there will be many patterns with at least a connection to MVC. One of the last things we did in [[Monday School]] was to have a go at browser patterns (st-80 style browsers). I think they would count as MVC patterns too. Anyway, with that much latitude allowed, here is the list...",
            "id": "8845a62665b661c8732366b821b710ec"
          },
          {
            "type": "html",
            "text": " [[Browse One Hierarchy]]",
            "id": "cc7fbedf6e654219fc56875d77252388"
          },
          {
            "type": "html",
            "text": " [[Left Selects Right]]",
            "id": "e469b5e88a6a5b951a55d7ca019055db"
          },
          {
            "type": "html",
            "text": " ... add yours here ...\nOn the other hand, [[Adele Goldberg]] maintains that MVC is the solution to one specific problem and therefore just one pattern (though I doubt she would use the term.) She would say:",
            "id": "a2b83efd96051df665e502fee6f47577"
          },
          {
            "type": "html",
            "text": "Not all people can or prefer to operate a computer in the same way.",
            "id": "6435f835ccb902df2e90a729e3f24113"
          },
          {
            "type": "html",
            "text": "Therefore, separate the controls of the computer from the views it presents so that appropriate controls can be selected by the user. A handicapped individual would be an example of a user needing a different kind of control.",
            "id": "e8a020e9ab70b7c9934eac230b7484ac"
          },
          {
            "type": "html",
            "text": "\nI don't know of specific examples where this MVC capability has been exploited. Do you? -- [[Ward Cunningham]]",
            "id": "7f41ad905d91c79b13530d2d4dba0498"
          },
          {
            "type": "html",
            "text": " <i>Windows accessibility features, localization, themes, \"Classic\" vs XP, mouse vs pad vs stick vs trackball vs cursor keys, voice control.</i>",
            "id": "c9a680172692fc853911a133e36cc184"
          },
          {
            "type": "html",
            "text": " <i>Media controls (play, reverse, mute, etc) on screen and on keyboard.</i>",
            "id": "c680329349c188fd5f076b21a7b44a17"
          },
          {
            "type": "html",
            "text": " <i>Cell phone: speak number, key it in, select from list. -- mt</i>",
            "id": "67e9136df1dab334e5d0e07d99e60dde"
          },
          {
            "type": "html",
            "text": "\nPerhaps web pages are an example of this - with the 'view' being css, 'model' being html, 'control' being, in part, the browser.\nI agree on this. I think javascript could be seen as the controller-part of the web-page. This becomes very apparent with Microsoft's lesser-known extension called behaviours. Behaviours are basically a declarative way of linking javascript code to styles (the view).\nDoes anybody have any links on this perspective?",
            "id": "52ac006391b707bbe68c020785711a19"
          },
          {
            "type": "html",
            "text": "\nI'm not sure if it would be applicable, but Amiga programs used to widely support an AREXX \"port\" which allowed programs to be controlled through the REXX scripting language, basically by another process. Thus the user interface presented one view, and events therefrom constitute one \"controller\" while events from the AREXX port would seem to be a different \"controller\" (and return values from control events would presumably represent another view as well).",
            "id": "399a65f9bc3b1e33aa3116d62d3bb89a"
          },
          {
            "type": "html",
            "text": "\nIn this way, I'm a little unclear about why MVC separates <i>V</i> and <i>C.</i> If we think of VC (taken together) as \"interface\" then the whole MVC approach seems to simplify to [[Model Delegate]] or <b>client/server</b> (or more formally, <i>client</i> - <b>protocol</b> - <i>server</i>). Does abstracting the controller somehow facilitate inter-object interactions? Does it make sense that some controls don't have a corresponding view, or is it that some controls may have to affect several views <b>some</b> of which don't offer any user interaction (and thus don't implement the control aspect of an \"interface\")?",
            "id": "63287c3848c3a6c4a5d73c873c9d0819"
          },
          {
            "type": "html",
            "text": "<i>What about [[Squeak Smalltalk]]'s alleged handwriting recognition? I have not actually used it, but... -- [[Bill Trost]]</i>",
            "id": "4bb7b264cd3e2a3bdedc6256441dc7b7"
          },
          {
            "type": "html",
            "text": "\nReal-time audio apps do this. (Ardour for example). The controls are not the primary view, the audio output is, and we do not control the app with audio, but we may control it with two separated input controllers, a gui and perhaps a hardware interface over midi. Also, in well-designed ones, the controllers are never allowed to jam the output, so they must be properly separated with some kind of queue to the model. So we wind up with an engine (model) that receives input from more than one control interface, but outputs a 'view' that is never tied in with controls. The view is notified whenever a model state changes. In the case of a gui, that too needs to get updated as a secondary 'view' but the hardware controllers do not. -- Iain Duncan",
            "id": "2362e5c5147d1278380dae0464ce0483"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "I can think of one instance I've seen. Back around 1992 [[Eric Smith]] was asked by one of our clients to build a VT-100 interface to some Smalltalk ([[Object Works]] 4.0) code. He did it by defining a VT-100 [[Graphics Tool]] and a set of special-purpose Controllers for VT-100s ([[List Controller]], [[Paragraph Editor]], etc.) that would translate keystroke combinations into the equivalent of mouse-moves. In this way his browsers would work the same on the workstation AND on the VT-100. -- [[Kyle Brown]]",
            "id": "0bd66fdee15053dfb754dae93c8a2c89"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Like the original MVC article's title - \"A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk -80\" (Glenn Krasner and Stephen Pope, [[Journal Of Object Oriented Programming]], August/September 1988, [http://www.ics.uci.edu/~redmiles/ics227-SQ04/papers/KrasnerPope88.pdf www.ics.uci.edu]) - says, it's a <i>paradigm</i>. It's a conceptual framework for designing and implementing graphical user interfaces. A class library, such as Smalltalk-80's, would typically implement MVC based on abstract classes and default method definitions for models, views, and controllers - a Framework! -- [[Mitchell Model]]",
            "id": "73e89e35b8f3ff7ebb1408d16abbdd58"
          },
          {
            "type": "html",
            "text": "\"A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk -80\" is <i>not</i> the title of the original MVC article. A publication from 1979 by Trygve Reenskaug shows that the idea of MVC is much older: [http://heim.ifi.uio.no/~trygver/1979/mvc-2/1979-12-MVC.pdf heim.ifi.uio.no]. -- [[Timo Stamm]]",
            "id": "c2c3dd77c31ad7f6892b37cbde7ef9be"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "A link to a decent explanation of MVC would be welcomed here. After spending a few hours searching today, I come home empty handed...Let me know if you have something please.",
            "id": "14351119d4376be345cc377c17ea7da9"
          },
          {
            "type": "html",
            "text": "\nI found [http://ootips.org/mvc-pattern.html ootips.org] to be useful. -- [[John Clonts]]",
            "id": "d98dcd56e0e4313f1646272c86ea7d37"
          },
          {
            "type": "html",
            "text": "\nWard's collection of [[Hot Draw]] CRC cards ([http://c2.com/doc/crc/draw.html c2.com]) helped me wrap my mind a little further around the concept.",
            "id": "53937a0d7622c8d444703b27d5d6cb19"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "I think that Model-View-Controller is good as far as it goes, but that some expansion of the concepts are needed. The development of [[Java Swing]] provides some clues, I think.",
            "id": "b08d075611acbdbd5764b157f9b0fc3a"
          },
          {
            "type": "html",
            "text": "\nI'm offering [[Model Pipe View Controller]] for consideration, and would appreciate some feedback.",
            "id": "f7f7fc9bf53a8b7206e52ed6ce45b608"
          },
          {
            "type": "html",
            "text": "-- [[Bruce Atherton]]",
            "id": "ec1eba51e59e86b7fcfe83869e236901"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Apple's tutorial for Rhapsody - Discovering [[Open Step]] - provides detailed examples of the MVC model, and a description of it.",
            "id": "fc5fdb84532dadc709b5cfd440584f98"
          },
          {
            "type": "html",
            "text": "\nChapter 2: A Simple Application provides a description, and Chapter 4: A Multi-Document Application probably provides the best example of the benefits. -- [[Ronald Hayden]]",
            "id": "f27c2ea820756076c935c484d4ab4963"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "[[Model View Presenter]] tries to solve some of the drawbacks of mvc. What do the experts say? -- [[Thomas Mahler]]",
            "id": "5c3c838fde7574aec5de9e42edb55b61"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "-- [[Ian Chai]]",
            "id": "1680bae6fa11aa87e00816380c0f7e0f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "[[Web Macro]] implements a [[Servlet Design]] based on Model/View/Controller. The argument is that, because the web works by returning HTML views to clients, an MVC design is inherent in server-side web programming. Java servlets, unlike CGI, make it more of a reality because they persist between connections and are most likely to have a middle-tier model underneath them. [[Web Macro]] is a free servlet framework that implements this [[Servlet Design]]. -- [[Justin Wells]]",
            "id": "e854b55e21d0ffc1e2ddf70e544b9a0d"
          },
          {
            "type": "html",
            "text": "\nBy the way, what is MVC2 in the servlet context? Why MVC1 was not enough and how does it differ from the original MVC? -- [[Guillermo Schwarz]]",
            "id": "6561d223fcb2750dcee363b0d9fad3c3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "I had an interesting chat with [[Trygve Reenskaug]] this week. He notes that the original MVC had four objects: not only the model, view, and controller, but the user as well. He regrets that the fourth object has become lost in the popularization of the idiom.",
            "id": "b4efcb6bb3f1da7287d91f148775b43f"
          },
          {
            "type": "html",
            "text": "\nHe notes that MVC was an outgrowth of the original direct-manipulation metaphor popularized in early OO practice (see [[Brenda Laurel]]'s [[Computers As Theatre]]), where you want the objects on the screen to <i>be</i> the objects in the program. MVC actually works against that metaphor but evolved as a necessary evil. Why? Because the user object maintains multiple simultaneous views of the model at once; the factoring into user, model, view, and controller allows one to support that. So while the speculation is that Adele would approach MVC from the input side, Trygve approaches it from the output side.",
            "id": "b1635742dfced5c1bcc0ac0272ca18a1"
          },
          {
            "type": "html",
            "text": "<i>...which discussion of direct manipulation segues nicely into: [[Morphic Interface]]. In [[Squeak Smalltalk]] this is (apparently) replacing the MVC framework (not paradigm!). As someone else comments on the [[Morphic Interface]] page, there is very little information around on it. Despite having read Mark Guzdial's book on Squeak and the original papers on Morphic in the [[Self Language]] I am none the wiser if there is really anything useful to be learned here (is it really an alternative way to structure programs than MVC?). Help me Obi wan, you're my only hope...</i>",
            "id": "8e6aed8716dcf564cfabb8c70a19f9aa"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "I've been trying to apply some of the ideas behind XP and the refactoring thing in VB, but am at a bit of a loss with MVC. Can anyone provide some simple examples?",
            "id": "77a8137f27e36e7539e27d7c8df7c524"
          },
          {
            "type": "html",
            "text": "<i>See [[Model View Controller In Vb Classic Active Server Pages]].</i>",
            "id": "b0538475c545a90faeb095ae8e037ac2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "The comment by [[Trygve Reenskaug]] quoted above fits nicely with the way I like to think about MVC:",
            "id": "a26bc218ce9f128c984cb433609eddac"
          },
          {
            "type": "html",
            "text": " The View is connected to the user's eyes;",
            "id": "a06827db72bab714fa1d26a896782b8b"
          },
          {
            "type": "html",
            "text": " the Controller is connected to the user's hands;",
            "id": "9d4002d52ea18d156279c67396fe3e9f"
          },
          {
            "type": "html",
            "text": " and the Model is connected to the user's mind.\nI wouldn't push that too far, but it sometimes help me sort out design issues.",
            "id": "c94dd7998b611e40fbb276db360001a1"
          },
          {
            "type": "html",
            "text": "-- Don Dwiggins",
            "id": "47a3bd0eee3a1a56819ce3cb960853a5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "One could make the case that MVC is more general than a user interface pattern. The user might be another piece of software (class). It would therefore include [[Facade Pattern]], [[Visitor Pattern]] et al. -- [[Tom Rossen]]",
            "id": "39a7b0c44eea615f7b4916a130635581"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Has anyone had much success with [[Model View Controller]] and the [[Palm Os]]? -- [[Scott Elliott]]",
            "id": "61ecd954369014c00a94ee50bb9f4cea"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "MVC is exactly the same as BASIC. Let me explain! In BASIC you had INPUT, PRINT and LET and most of the code was just assembling them together, but your code written this way could not be assembled together. - This is completely incorrect. MVC is quite the contrary! If we apply that logic to any language able to accept input, process it, and generate output (that is, ANY computer language), any computer language would be the same as MVC. A computer language is used to implement the MVC pattern, but that doesn't make it a pattern language. Is like saying that brick and mortar is a house: in fact, a house is a pattern that can be built with brick and mortar, but that doesn't mean that a house is brick and mortar... it is the way brick and mortar are assembled what builds a house. -- [[Luis Colorado]]",
            "id": "2d53ce4378396e3b57da28a8c9ce002d"
          },
          {
            "type": "html",
            "text": "\nThen somebody realized that code should be organized the same way: Input, Output and internal processing. I/O was called the View/Controller and the internal processing was called the Model. Incorrect: in fact, the Model, the View, and the Controller are objects able to receive input and to provide output to the other components. -- [[Luis Colorado]]",
            "id": "4abe7fef1391128adee0d01916999e6f"
          },
          {
            "type": "html",
            "text": "\nThat is why Servlets are not MVC, nor Struts is MVC, nor J2EE is MVC. How do you know there are not? Because in MVC when you change the model, you don't need to change the view, since it is updated automagically. MVC is about direct manipulation of objects, they know how to display themselves, and because of that, the smaller objects must know how to display themselves. Big objects are made of smaller object that know how to display themselves, so big objects magically know how to display themselves. This is partially correct. I don't know of any language or technology that per se enforces MVC, and that includes J2EE, Servlets, etc. Another correction: in MVC, the Model objects don't know how to display themselves, neither have object that know how to do so. You are referring to the View objects. -- [[Luis Colorado]]",
            "id": "ac006fa0265a368a84be92eff6e9f1fa"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "The essential ingredient in MVC is the Observer pattern. Take that out and all you have left is IPO (Input-Process-Output). The Observer is what maintains encapsulation and keeps MVC strongly object-oriented. Without the Observer, you need setters and \"this object here fiddling inside that object there\" - decidedly non-OO.",
            "id": "ee03bacb32e8223a2f077f631fbfd6d9"
          },
          {
            "type": "html",
            "text": "\nAny software architecture that features three components or layers will eventually be described as an instance of MVC. Then it will be criticized for doing it wrong.",
            "id": "b134ae9ea53185bcc60c7d1cf128c9fd"
          },
          {
            "type": "html",
            "text": "-- [[Marc Thibault]]",
            "id": "5d9b98abd5a5b2bb90a0bcfe8398a542"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "[[Model View Controller]] is one of the few design patterns to have been turned into a song: [http://home.in.tum.de/pittenau/ModelViewController.mp3 home.in.tum.de] (lyrics at [http://www.oreillynet.com/pub/wlg/3533 www.oreillynet.com]).\nThat fourofoured for me. Alt location: [http://vst.ensm-douai.fr/noury/20 vst.ensm-douai.fr]",
            "id": "fc117343151c3eb02910e56e33b75100"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Historically MVC patterns could have been promote as to allow magical switch of views around the same model or models around same view. Also many implementation library/tools had a design to facilitate composite of different MVC.",
            "id": "54eef83162615f69430fdbd7668990c3"
          },
          {
            "type": "html",
            "text": "\nIn fact for the MVC pattern the idea of model and view switching requires that the substitute view or model have the exact same interface with the controller than the original view or model otherwise the magical switch is broken. Change just one thing as a little different view dynamic behavior or one missing model method and the magical switch is broken.",
            "id": "facc856336e97119c1dd49e1ed3602f3"
          },
          {
            "type": "html",
            "text": "\nAlso in the MVC pattern there's absolutely no design to have composite MVC.",
            "id": "0e49a7d22fa53baf37d951e0b17d0344"
          },
          {
            "type": "html",
            "text": "\nFrom this point of view you can design view as jsp with [[Java Bean]] views, Action as controller and models as [[Java Bean]] models to have a MVC pattern. That's enough to support the weak and too simple MVC pattern.",
            "id": "aa7ebde23a14c970fcd4141223ef26a5"
          },
          {
            "type": "html",
            "text": "-- [[Bernard Devaux]]",
            "id": "0a92a7a46c07096c2108b05d339564a6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "I've occasionally found MVC-ish patterns cropping up in my code more or less spontaneously; most recently in a small computer game. The model knows something's stats and location, the view knows how to draw on the screen, and the controller is particularly flexible, being the interface between a game object and the user... or the AI... or a network connection... or a limited-purpose AI like an autopilot...",
            "id": "44b7ad3ebb44be5155578397738777ae"
          },
          {
            "type": "html",
            "text": "\nNeat stuff.",
            "id": "4b421b89b0b40bd06d1d89c2ff7ce696"
          },
          {
            "type": "html",
            "text": "-- [[Simon Heath]]",
            "id": "0716ddc4fa3d8d7d004f23962d5e87ba"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Computer Graphics Principles and Practice by Foley, van Dam, Feiner, Hughes (ISBN: 020184840-6) presents an interesting description of the [[Model View Controller]] concept on pages 17 to 22. -- [[Chris Eineke]]",
            "id": "2f68c666435c0d2db77b130e5e6e9c1e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Links:",
            "id": "8e414ac401809cef7be7beebee4daa02"
          },
          {
            "type": "html",
            "text": " [http://ootips.org/mvc-pattern.html ootips.org]",
            "id": "5a5c4a3f1e889b749c6fa22fd76f4fa9"
          },
          {
            "type": "html",
            "text": " [http://www.object-arts.com/EducationCentre/Overviews/MVC.htm www.object-arts.com]",
            "id": "cef6ba22c544d765a3e4f488d79c4e9f"
          },
          {
            "type": "html",
            "text": " [http://www.zope.org/Resources/Mozilla/ZWiki/ModelViewController www.zope.org]",
            "id": "7eb5f1b14dee0cba47e9778c7cfcf934"
          },
          {
            "type": "html",
            "text": " [http://www.webmacro.org/ModelViewController www.webmacro.org]",
            "id": "1d1492f8196b490f6d2e38a26ee0b1a3"
          },
          {
            "type": "html",
            "text": " [http://fox.wikis.com/wc.dll?Wiki~ModelViewController fox.wikis.com]",
            "id": "5c9e2c2533a6c9d692b391f4e738b981"
          },
          {
            "type": "html",
            "text": " [http://wact.sourceforge.net/index.php/ModelViewController wact.sourceforge.net]",
            "id": "1923362c5f1f3ff3f61737fc87a87d2c"
          },
          {
            "type": "html",
            "text": " [http://en.wikipedia.org/wiki/Model-view-controller en.wikipedia.org]",
            "id": "998d7d8ec6c017393bddb3c301c970b6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "<b>[[Test Driven Development]]</b> gripe: Testing is about isolation and decoupling. But most out-of-the-box MVC platforms force you to test the Controller by drilling down from the View, thru the whole stack. WTF? -- [[Phl Ip]]",
            "id": "ddda9c4f6689525f98c51f28510d3f67"
          },
          {
            "type": "html",
            "text": "\nThat is why I generally like to keep listeners (in Java) as external classes. They can then be instantiated along with the other objects necessary for testing. While you don't test the View, you can then fire events and ensure you are getting the right behavior.",
            "id": "c6f78d41eb172c3f7021d0dbc214fdca"
          },
          {
            "type": "html",
            "text": "-- Brad",
            "id": "be96ab9fdd191fb046330cc51cf09f0b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "I think the problem is that the semantics were wrong from the get-go. We commonly talk about data models and that clearly isn't what is meant here. To have application logic running in a model conflates the two definitions of model. In reality we want something similar to View-Listener-Logic-Data Model. In Java data models are termed 'beans' (I hate the cutesy term). Using them helps with serialization and testing. It is easy to mock one and stuff data into it. Using just Logic-Data Model-Listener one can do full development of the data models and application logic. Those can then be run as part of the daily build. It also ensures that the application logic and data model are not coupled to a specific View-Listener type.",
            "id": "c0b2ab1f204da458612352e0602a8792"
          },
          {
            "type": "html",
            "text": "-- Brad",
            "id": "be96ab9fdd191fb046330cc51cf09f0b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "<i>This phrase seems stuck in [[Fuzz Ville]] because everybody is using a different head-model for stuff. Could somebody propose an algorithm or unambiguous <b>list of rules</b> for categorizing or \"slotting\" a given piece of code or algorithm into one of the three categories (model, view, controller). Something along the lines of, \"if it has X or does Y, then it's a controller. If it lacks A, B, or C; and Q, then it's a model\", etc.</i>",
            "id": "c67f9087cd2e49508a63139f4c60a7ab"
          },
          {
            "type": "html",
            "text": " The <b>model</b> represents the underlying data. It's a wrapper around an in-memory data structure, collection of tables in a database, a set of files on a disk or a stream of data, etc.",
            "id": "71ff4ae6ce5286a9be5d678750b34509"
          },
          {
            "type": "html",
            "text": " A <b>view</b> provides a visualisation or presentation of the model. It gives us a way to see what the model represents.",
            "id": "56bd9ca1a90ec554e611dcf77a6e64b3"
          },
          {
            "type": "html",
            "text": " A <b>controller</b> provides facilities to update the data in the model. It gives us a way to modify what the model represents.",
            "id": "b8ff4d5c313d88721ad4a7111d76d748"
          },
          {
            "type": "html",
            "text": "\nMore specific rules are not needed, as it's a general pattern.",
            "id": "5b3f0742850b4bdca71f3463da371016"
          },
          {
            "type": "html",
            "text": "<i>\"Data\" is a vague term. I want to avoid [[Iknow It When Isee It]]. And by \"visualization\", do you mean UI? If so, MVC is trivially common and there are no real alternatives other than raw RAM data or RAM dumps. Perhaps what is needed is a contrasting model(s) to see what MVC is not.</i>",
            "id": "27de50b8111ce7a556b7eb49ad955f2d"
          },
          {
            "type": "html",
            "text": "\nSomething less vague than \"data\" is unnecessary. By \"visualisation\", I typically (but not exclusively) mean UI, and MVC can be found frequently enough to be considered common. However, explicit awareness of it allows us to construct classes, frameworks, etc., that facilitate it. As for seeing what MVC is not, that's somewhat difficult -- it's a bit like trying to define \"musical instrument\" by seeing what a \"musical instrument\" is not.",
            "id": "fd55048283885420e08633265d1d349a"
          },
          {
            "type": "html",
            "text": "<i>Present a truck; it's a start, and better than what we have so far for MVC. (Granted, a truck can make [poor] music, but is a rare demand of it.) Most non-electric musical instruments fit into known categories, such as wind, string, percussion, etc. We can have check-lists of features for them and add up scores/weights to come up with a \"fitness\" score.</i>",
            "id": "685bb9019dc354b856088e93088b1c6b"
          },
          {
            "type": "html",
            "text": "\nThere are numerous examples of MVC on the Web. See, for example, [http://www.codeproject.com/Articles/25057/Simple-Example-of-MVC-Model-View-Controller-Design www.codeproject.com]",
            "id": "79aed212e3c485909db3c0f3b3cd473b"
          },
          {
            "type": "html",
            "text": "<i>Okay, but where are the examples of non-MVC for contrast? One cannot tell from such examples alone whether the elements of the example are required for MVC, or just a byproduct of the example.</i>",
            "id": "dc51c85ce8899a0592bae6e127600c78"
          },
          {
            "type": "html",
            "text": "\nHere's a Tiny C compiler: [http://bellard.org/tcc/ bellard.org] There's no model, no view, and no controller. It's not MVC.",
            "id": "9d83d19a0c8b1767c6270fe73932779a"
          },
          {
            "type": "html",
            "text": "<i>Okay, but what's missing that makes it non-MVC? It has working variables and data structures that could perhaps be called a \"model\", and the output (machine language) the \"view\" without some clear rule to disqualify them.</i>",
            "id": "024ecbee6ec79ecf4bffcb424fa70662"
          },
          {
            "type": "html",
            "text": "\nFor one thing, it's not interactive. MVC is typically used to manage interactive manipulation of data. The compiler's \"model\", once created, does not change and is not intended to change so there is no interface to the model to support interactive change. MVC supports at least the potential for multiple views but the compiler has -- at best, and stretching the usual definition of \"view\" -- just one. There is nothing in the compiler that could be considered a controller. On the other hand, an interactive programming environment (e.g., Logo, [[Tomato Ide]], etc.) likely uses MVC if the internal representation of the program (i.e., model) is intended to change.",
            "id": "17dd3e50edc86c7869210c53962c00f3"
          },
          {
            "type": "html",
            "text": "<i>We can make it interactive, such as, \"A loop of pattern X was found at line 123. Do you want to optimize it for a single core or multi-core?\". And what do you mean by \"multiple views\" in the compiler example?</i>",
            "id": "57fae9ab5da1a5369608c6a7b56c8c3a"
          },
          {
            "type": "html",
            "text": "\nIf we make it interactive, then MVC might be an appropriate way to handle the interactivity. By \"multiple views\", I mean that there aren't various ways of viewing the object code built into the compiler.",
            "id": "4bb2e37eceeb0f929c61cabac25333a7"
          },
          {
            "type": "html",
            "text": " <i>I will agree that the computer \"views\" the output and not a human, but I'm not sure this changes anything or should change anything. And there may be multiple ways to pack or \"format\" machine code.</i>",
            "id": "4d9b62d51cfcb03ebf840a36bb76680f"
          },
          {
            "type": "html",
            "text": " The \"view\" in the Tiny C compiler is, at best, a single emitted file format. There is no interactive presentation.",
            "id": "1dc720b29f576b3488fb2b6da12130f7"
          },
          {
            "type": "html",
            "text": "<i>But how about we try to stick to GUI's for analysis. Is there a common (or once-common) GUI model that is clearly not MVC?</i>",
            "id": "f68e75febfb69de7521a7b834afcfa69"
          },
          {
            "type": "html",
            "text": "\nSure. A trivial input-process-output loop is not MVC. There is no \"model\" to abstract a collection of discrete variables, though you might glancingly consider a data-entry form to be both view and controller -- which it is, to the same degree that a truck can be considered a musical instrument.",
            "id": "a345fb5340d1e81ae7fb675b456b25e1"
          },
          {
            "type": "html",
            "text": "<i>I'm still not clear on this. Please elaborate on \"to abstract a collection of discrete variables\". Variables and collections are already abstractions.</i>",
            "id": "e273a909c120affd0fa3fa3eea9e5957"
          },
          {
            "type": "html",
            "text": "\nBy \"collection\", I meant \"a bunch\", not an explicit Collection mechanism.",
            "id": "e5a576d6f2d342d01f1a3486492a8095"
          },
          {
            "type": "html",
            "text": "\nWith sufficient effort, I'm sure you can argue that everything is MVC and nothing is MVC, but that would be as pointless as arguing that there are no distinctions between things and everything's just stuff. If you are genuinely having difficulty identifying or grasping MVC and are sincerely interested, I'll point you to some resources. Otherwise, I have better things to do than teach you intermediate-level OO programming.",
            "id": "1808f81ae4ccd3f86e1db3b2d3a26372"
          },
          {
            "type": "html",
            "text": "<i>The pattern(s) is ill-defined and the term is overloaded, that's my main point. Perhaps one can say, \"This is the Fred GUI Model or framework 2.0\", and eliminate mention of models, views, controllers, etc. It would eliminate a lot of industry confusion.</i>",
            "id": "76d9d44362046231e38313a0121e36e2"
          },
          {
            "type": "html",
            "text": "\nIt's ill-defined or overloaded only if you're expecting MVC to be represented in a definitive fashion, such as by a specific [[Design Pattern]]. MVC is best regarded as a general architectural <i>approach</i>, implementable in numerous ways. As terminology, \"MVC\" is on par with notions like \"musical instrument\" or \"swimming\", which are general concepts having innumerable manifestations. There's only \"industry confusion\" (perhaps) when <i>talking</i> about MVC, as some folks naively get hung up believing there is a \"true MVC\" and others that are not, but there's no real confusion when implementing or using it -- in the end, it just turns into code.",
            "id": "df6624f6f79c47228f553537a9d23a76"
          },
          {
            "type": "html",
            "text": "\nIt may be helpful to regard MVC as the interactive analogue to the classic batch-oriented input-processing-output model of non-interactive programs. The model contains the program state, the view displays the model to the user, and the controller receives input from the user to change the model.",
            "id": "2b84d88c18c3b2b63b762a06378343cb"
          },
          {
            "type": "html",
            "text": "<i>As rough labels for very general notions, perhaps. And musical instruments have pretty good sub-classifications associated with them. Nothing comparable exists for MVC.</i>",
            "id": "f8a72ec7e18b0f6082755956254a11ce"
          },
          {
            "type": "html",
            "text": "\nNothing comparable needs to exist for MVC. It's clear enough for the purpose.",
            "id": "aad8a164afc5c196ad766f9931fa1b82"
          },
          {
            "type": "html",
            "text": "<i>It needs work.</i>",
            "id": "692ec52507c3bfd0be8bcdd5f4cc596c"
          },
          {
            "type": "html",
            "text": "\nWhat needs work? Developers are effectively using and implementing MVC on a daily basis. Definitions -- largely in agreement -- can be found in numerous places. This seems to be a non-problem for everyone but you.",
            "id": "427ad4d3d3099f92a4fc16bf67d11d2e"
          },
          {
            "type": "html",
            "text": "<i>Of course they are, there is no real alternative. One would have to go out of their way to NOT use it, based on the way it's described here. It's a [[Useless Truth]]. Stop trying to defend rubbish.</i>",
            "id": "828a0eb215eef43aa46e6c90023ace77"
          },
          {
            "type": "html",
            "text": "\nClearly, you have not read any of the above. Again, this seems to be a non-problem for everyone but you.",
            "id": "d94417ebf3c371e8167b5dd9f8024be5"
          },
          {
            "type": "html",
            "text": "<i>I tried, but it's nebulous. And other developers </i>do<i> confuse the term. The other wiki topics debating the term and its application are a testament to this. I didn't create those topics.</i>",
            "id": "9a0c261d16a9c00dbb0e1c99bbb0d451"
          },
          {
            "type": "html",
            "text": "\nDebate does not imply confusion or misunderstanding; it only implies disagreement.",
            "id": "0ed3f911c9955e09dd0d108bd014b3f2"
          },
          {
            "type": "html",
            "text": "<i>Yes, disagreement over the meaning of the term and/or terms of its parts.</i>",
            "id": "0cdba529e5dc5195bac586fa1e7da1c5"
          },
          {
            "type": "html",
            "text": "\nThey're quibbles amongst the knowledgeable, like arguing whether a V4 engine is better for racing than an I4 (or vice versa) amongst engineers. It's not the \"I don't get it, so the explanation must be wrong or it doesn't exist\" that you consistently maintain.",
            "id": "f6d5624072b4f25b4ac21c2ae5039374"
          },
          {
            "type": "html",
            "text": "<i>I'm asking for a clear and concise definition (or at least a reasonable attempt at one), not resume evaluations. Different issues. The topics of the \"experts\" on this wiki are also struggling with the term.</i>",
            "id": "af41628ac2707263b1a24ad9e605cd54"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "Almost all computer games exhibit a very clear MVC, with a literal controller which is physically separate both from the view (ie, TV or monitor) and the modelling unit (the CPU/box, with its internal representations of the game components).",
            "id": "ab58366c2ae82faeb7212ecfa0d2d23e"
          },
          {
            "type": "html",
            "text": "\nIt's mainly in the realm of touch-devices like phone UIs that the view and controller become blurred. Even on desktop computers, the reality is that the keyboard and mouse are the controllers and the \"controls\" on the screen are actually views, so that often there are two views showing different aspects of the model. For example, a slider \"control\" might be a view onto a movie file, while the display of an individual frame on the same screen is really also a depiction of the current point in the playback. But, in reality, the controller is the mouse that clicks \"pause\" or the keyboard that transmits the shortcut for \"rewind\".",
            "id": "03e79da7ea3f197f8817a4c8c3dba7e3"
          },
          {
            "type": "html",
            "text": "\nTWW",
            "id": "5bccbf28f8430930e2cd71159ff2ef01"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "<i>Top's Working Definition</i>",
            "id": "272452d22c6edc5ef871098d022c335d"
          },
          {
            "type": "html",
            "text": " Model - The domain model, including data and procedures.",
            "id": "0f7015dc97569afa04c58cc14bb0d861"
          },
          {
            "type": "html",
            "text": " View - What the user sees and controls; the final UI.",
            "id": "48e0eb3b1715f42d016a8692d00c602c"
          },
          {
            "type": "html",
            "text": " Controller - The middle-ware and/or GUI framework that translates the Model to the View and vice verse. (A better name for this part may be \"User I/O Manager\".)",
            "id": "bfd428bd7c724240b0b4c94c1bc489bf"
          },
          {
            "type": "html",
            "text": "\nI've selected this definition set in part because the \"parts\" are relatively unambiguous and not tied to any particular language or paradigm. Perfect non-ambiguity is probably not possible. ",
            "id": "17886494a15a728b4fd107d27e18982a"
          },
          {
            "type": "html",
            "text": "\nNote that it is possible to combine Model and Controller, such as a UI manager that is integrated or closely tuned around a specific domain. An example would be a gaming rendering engine that has a texture library manager built-in (so that a gaming shop doesn't have to invent their own). For the most part, shops will use an existing GUI manager that was designed independent of their particular domain, and one can potentially examine the history of the Model and Controller to see if there is any cross influence.",
            "id": "94c1708df226fba75f95698394c90ea8"
          },
          {
            "type": "html",
            "text": "\nUnder this definition, there is no such thing as a \"non-MVC\" framework. MVC is just way to describe the parts of systems that have significant UI's.",
            "id": "464cdb264dc7df302fde24f98137e573"
          },
          {
            "type": "html",
            "text": "-- top",
            "id": "963163aa27657d8b9e032e7a701e73ec"
          },
          {
            "type": "html",
            "text": "<i>That's an entirely reasonable definition and assessment. I'd only change \"... that have significant UI's\" to \"... that have significant interactive UI's\".</i>",
            "id": "50a087395977068eb09e3d0c2779e576"
          },
          {
            "type": "html",
            "text": "\nIf you call <i>anything</i> that Toppie presents as \"reasonable\", you'll get flogged around here :-) As far as \"interactive\", a non-interactive app or system may also have the 3 parts and it may also be useful to make a distinction between the 3 parts. For example, [[Crystal Reports]] (CR) often functions as the \"Controller\" portion of a batch reporting system/app. The Model is the data tables and the CR user's (report programmer's) report configuration that set up the definition of the report in CR. The View is the printed output or output document file. [Reworked wording.] -t",
            "id": "fae7937863b1c7025651fd2d907a650d"
          },
          {
            "type": "html",
            "text": " <i>\"Interactive\" is usually included in MVC definitions to address the fact that changes to the model are reflected in the view in real-time and the controller provides the means to change the model. So, in the above, the report configuration would not typically be considered a controller. Maybe it could be considered (inventing terminology here) Model-View-Retriever.</i>",
            "id": "3a5560fd423b2b78b33ad9ab0f972898"
          },
          {
            "type": "html",
            "text": "<i>I'm not clear how [[Crystal Reports]] is MVC. Could you explain? By the way, your usage of Controller is acceptable, but not quite conventional. By convention, the Controller provides an interface to update the model and (indirectly, but sometimes directly) the view.</i>",
            "id": "221251535bc7247311601af88717a786"
          },
          {
            "type": "html",
            "text": "\nWe could say it only applies to interactive systems because that's where the term was born. But I'm not sure it's useful to so narrow it nor problematic to keep the wider version (where input or interaction is optional).",
            "id": "a2bfdef81f1df71bab3ace1b1c942fb6"
          },
          {
            "type": "html",
            "text": "<i>I don't see how that answers my question, or how it addresses my comment about your definition of Controller.</i>",
            "id": "beb9666cc16e74564e3d5cafe6ec0a03"
          },
          {
            "type": "html",
            "text": "\nI didn't say CR \"is\" MVC, only that it often acts as a controller in a batch process in organizations because it \"translates the Model to the View\". As far as your comment, I thought I addressed it adequately. I don't understand the complaint.",
            "id": "5b58cd9d556808cf504188845b0c48c8"
          },
          {
            "type": "html",
            "text": "<i>I see. When you wrote, \"a non-interactive app or system may also have the 3 parts [...] For example, [[Crystal Reports]] is the 'Controller'\", I thought you meant that [[Crystal Reports]] has all three parts and you used Controller as an example of one of them, and that it is, therefore, MVC.</i>",
            "id": "8ddda60f64f302e518c8d74f79a487c9"
          },
          {
            "type": "html",
            "text": "\nI shall rework it to avoid that interpretation path.",
            "id": "f516102a7839eaca3618281408eb799c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "\nTo <b>Define</b> this alleged [[Model View Controller]], one needn't look further than Qt's QTreeView & model system, or [[Ruby On Rails]]' lexical first approximation which can do no wrong. ~~Him that thou knowest thine",
            "id": "f9bbabbb1fe54bb7efe3fccf899b8668"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "31e5fc23c2ef8048709099d1e738ae6b"
          },
          {
            "type": "html",
            "text": "\nSee: [[Whatsa Controller Anyway]], [[Design Principles Behind Smalltalk]], [[Model Model View Controller]], [[Application Controller]], [[Model View Controller As An Aggregate Design Pattern]], [[Model Targeter Surface]], [[Mvc Versus Event Driven]], [[Mongrel Ee Ruby]], [[Mirror Model]]",
            "id": "7095fe995a5f8369880f5304a7a0bfc2"
          },
          {
            "type": "html",
            "text": "\nContrast: [[Mvc Is Not Object Oriented]], [[Mvc Is Not Implementable]], [[Test Fixture]], [[Commit Rollback Database Auto Tests]]",
            "id": "9cafdd7267a422b50c5042c47945278c"
          },
          {
            "type": "html",
            "text": "\n[[Category Pattern]], [[Category User Interface]]",
            "id": "d037e5d8a0bf41879e7972766d8d1666"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ModelViewController c2.com]",
            "id": "a78872085680fc188bf90a73bc7d0a3b"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626125755778
    },
    {
      "id": "3a3a472f-ceb2-4ab9-9939-4dc4b1237bb5",
      "type": "add",
      "item": {
        "text": "__Model–view–controller__ (usually known as __MVC__) is a [[software design pattern]] commonly used for developing [[user interface]]s that divide the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user- [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller wikipedia]",
        "type": "markdown",
        "id": "3a3a472f-ceb2-4ab9-9939-4dc4b1237bb5"
      },
      "date": 1636017369069
    },
    {
      "id": "b3bf4907-ec97-4230-ab92-3881af854afc",
      "type": "add",
      "item": {
        "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;'>\n<a href='https://commons.wikimedia.org/wiki/File:MVC-Process.svg' target='_blank'><img data-imagestyle='fullwiki'; style='display:block; margin:auto; width:100%;' src='https://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/MVC-Process.svg/420px-MVC-Process.svg.png'>\n</a>\n<p class=caption>\n\nDiagram of interactions within the MVC pattern - [https://commons.wikimedia.org/wiki/File:MVC-Process.svg wikimedia]\n\n</p></div>",
        "type": "html",
        "id": "b3bf4907-ec97-4230-ab92-3881af854afc"
      },
      "after": "3a3a472f-ceb2-4ab9-9939-4dc4b1237bb5",
      "date": 1636017416178
    },
    {
      "id": "e96c9e8bc242eb5b20c2872aa00940f9",
      "type": "move",
      "order": [
        "3a3a472f-ceb2-4ab9-9939-4dc4b1237bb5",
        "e96c9e8bc242eb5b20c2872aa00940f9",
        "b3bf4907-ec97-4230-ab92-3881af854afc",
        "1e202d88690fce8c3e57fb51a7096ecd",
        "be7ec2917a000ebc1f322dae8bbc1dbd",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "fad2b7c4ab7a5e693dc6bcf29721357f",
        "b08bff65cdbd1dd0fde56bf1b18dfc33",
        "fde501cd964c65187b4d41f43f336b8f",
        "528d8e76df26694cf85de69b820f7c24",
        "f9672af7b6fe27c15dc8654c2da9cd23",
        "806d00413e8cde35da86e501528da274",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "d504ccf15c774524d265965a8ddc6a48",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "9d3b334847a9e2a20461834ed1cdd045",
        "82cacd666c362d10ddfaf2e9fe1644fb",
        "ca3cf16d19140fcbac26e384a3d1bb46",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "902d854e6935448a4b7b08c9cd4c1497",
        "224cf1a8f9644c809fc12c5d7ea7db43",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "fdee6d77a5bd8d0853c223f4b7f245d6",
        "3be84bed8813da61b6467b2d24ed4d92",
        "0a172a7419874947d3bb329ade175306",
        "40ed3d41a120ee7e466d1a3524b61b09",
        "7b4e1304ec8972438bbbabc7938953b8",
        "91851eb0579decfc35b84dba6779b6e4",
        "f46bd1652994a92c43b750463e91c396",
        "ad044611da70d9c27105a165ff394e45",
        "02e3ad9ada2b497348d51eb9f684abb3",
        "0775a44a3f5592eb6477f5064d1ecb45",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "87b3f8764c4a3b4004488e3b54f8df84",
        "7d5c58631c8c46d0d3ef302d0b74b9bc",
        "99be4381960acaf0411d1c04874e60d5",
        "557444e83439dbbb9021dbac7f16630f",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "897ba1e123c40eb6e522342bbc0173af",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "81d1daaf980f788015b22f345bc2eea3",
        "ef683f4fff53317b131ae529e6843d30",
        "c69736798e765715a9321b67d3ece838",
        "4b91d2eb116e5246b3ea7c73805e870c",
        "5e623824e297ca10f8ba8cad05b7eaea",
        "030f4e3cbc7160cbb99d6106b7b59e18",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "8845a62665b661c8732366b821b710ec",
        "cc7fbedf6e654219fc56875d77252388",
        "e469b5e88a6a5b951a55d7ca019055db",
        "a2b83efd96051df665e502fee6f47577",
        "6435f835ccb902df2e90a729e3f24113",
        "e8a020e9ab70b7c9934eac230b7484ac",
        "7f41ad905d91c79b13530d2d4dba0498",
        "c9a680172692fc853911a133e36cc184",
        "c680329349c188fd5f076b21a7b44a17",
        "67e9136df1dab334e5d0e07d99e60dde",
        "52ac006391b707bbe68c020785711a19",
        "399a65f9bc3b1e33aa3116d62d3bb89a",
        "63287c3848c3a6c4a5d73c873c9d0819",
        "4bb7b264cd3e2a3bdedc6256441dc7b7",
        "2362e5c5147d1278380dae0464ce0483",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "0bd66fdee15053dfb754dae93c8a2c89",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "73e89e35b8f3ff7ebb1408d16abbdd58",
        "c2c3dd77c31ad7f6892b37cbde7ef9be",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "14351119d4376be345cc377c17ea7da9",
        "d98dcd56e0e4313f1646272c86ea7d37",
        "53937a0d7622c8d444703b27d5d6cb19",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "b08d075611acbdbd5764b157f9b0fc3a",
        "f7f7fc9bf53a8b7206e52ed6ce45b608",
        "ec1eba51e59e86b7fcfe83869e236901",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "fc5fdb84532dadc709b5cfd440584f98",
        "f27c2ea820756076c935c484d4ab4963",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "5c3c838fde7574aec5de9e42edb55b61",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "1680bae6fa11aa87e00816380c0f7e0f",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "e854b55e21d0ffc1e2ddf70e544b9a0d",
        "6561d223fcb2750dcee363b0d9fad3c3",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "b4efcb6bb3f1da7287d91f148775b43f",
        "b1635742dfced5c1bcc0ac0272ca18a1",
        "8e6aed8716dcf564cfabb8c70a19f9aa",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "77a8137f27e36e7539e27d7c8df7c524",
        "b0538475c545a90faeb095ae8e037ac2",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "a26bc218ce9f128c984cb433609eddac",
        "a06827db72bab714fa1d26a896782b8b",
        "9d4002d52ea18d156279c67396fe3e9f",
        "c94dd7998b611e40fbb276db360001a1",
        "47a3bd0eee3a1a56819ce3cb960853a5",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "39a7b0c44eea615f7b4916a130635581",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "61ecd954369014c00a94ee50bb9f4cea",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "2d53ce4378396e3b57da28a8c9ce002d",
        "4abe7fef1391128adee0d01916999e6f",
        "ac006fa0265a368a84be92eff6e9f1fa",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "ee03bacb32e8223a2f077f631fbfd6d9",
        "b134ae9ea53185bcc60c7d1cf128c9fd",
        "5d9b98abd5a5b2bb90a0bcfe8398a542",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "fc117343151c3eb02910e56e33b75100",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "54eef83162615f69430fdbd7668990c3",
        "facc856336e97119c1dd49e1ed3602f3",
        "0e49a7d22fa53baf37d951e0b17d0344",
        "aa7ebde23a14c970fcd4141223ef26a5",
        "0a92a7a46c07096c2108b05d339564a6",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "44b7ad3ebb44be5155578397738777ae",
        "4b421b89b0b40bd06d1d89c2ff7ce696",
        "0716ddc4fa3d8d7d004f23962d5e87ba",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "2f68c666435c0d2db77b130e5e6e9c1e",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "8e414ac401809cef7be7beebee4daa02",
        "5a5c4a3f1e889b749c6fa22fd76f4fa9",
        "cef6ba22c544d765a3e4f488d79c4e9f",
        "7eb5f1b14dee0cba47e9778c7cfcf934",
        "1d1492f8196b490f6d2e38a26ee0b1a3",
        "5c9e2c2533a6c9d692b391f4e738b981",
        "1923362c5f1f3ff3f61737fc87a87d2c",
        "998d7d8ec6c017393bddb3c301c970b6",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "ddda9c4f6689525f98c51f28510d3f67",
        "c6f78d41eb172c3f7021d0dbc214fdca",
        "be96ab9fdd191fb046330cc51cf09f0b",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "c0b2ab1f204da458612352e0602a8792",
        "be96ab9fdd191fb046330cc51cf09f0b",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "c67f9087cd2e49508a63139f4c60a7ab",
        "71ff4ae6ce5286a9be5d678750b34509",
        "56bd9ca1a90ec554e611dcf77a6e64b3",
        "b8ff4d5c313d88721ad4a7111d76d748",
        "5b3f0742850b4bdca71f3463da371016",
        "27de50b8111ce7a556b7eb49ad955f2d",
        "fd55048283885420e08633265d1d349a",
        "685bb9019dc354b856088e93088b1c6b",
        "79aed212e3c485909db3c0f3b3cd473b",
        "dc51c85ce8899a0592bae6e127600c78",
        "9d83d19a0c8b1767c6270fe73932779a",
        "024ecbee6ec79ecf4bffcb424fa70662",
        "17dd3e50edc86c7869210c53962c00f3",
        "57fae9ab5da1a5369608c6a7b56c8c3a",
        "4bb2e37eceeb0f929c61cabac25333a7",
        "4d9b62d51cfcb03ebf840a36bb76680f",
        "1dc720b29f576b3488fb2b6da12130f7",
        "f68e75febfb69de7521a7b834afcfa69",
        "a345fb5340d1e81ae7fb675b456b25e1",
        "e273a909c120affd0fa3fa3eea9e5957",
        "e5a576d6f2d342d01f1a3486492a8095",
        "1808f81ae4ccd3f86e1db3b2d3a26372",
        "76d9d44362046231e38313a0121e36e2",
        "df6624f6f79c47228f553537a9d23a76",
        "2b84d88c18c3b2b63b762a06378343cb",
        "f8a72ec7e18b0f6082755956254a11ce",
        "aad8a164afc5c196ad766f9931fa1b82",
        "692ec52507c3bfd0be8bcdd5f4cc596c",
        "427ad4d3d3099f92a4fc16bf67d11d2e",
        "828a0eb215eef43aa46e6c90023ace77",
        "d94417ebf3c371e8167b5dd9f8024be5",
        "9a0c261d16a9c00dbb0e1c99bbb0d451",
        "0ed3f911c9955e09dd0d108bd014b3f2",
        "0cdba529e5dc5195bac586fa1e7da1c5",
        "f6d5624072b4f25b4ac21c2ae5039374",
        "af41628ac2707263b1a24ad9e605cd54",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "ab58366c2ae82faeb7212ecfa0d2d23e",
        "03e79da7ea3f197f8817a4c8c3dba7e3",
        "5bccbf28f8430930e2cd71159ff2ef01",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "272452d22c6edc5ef871098d022c335d",
        "0f7015dc97569afa04c58cc14bb0d861",
        "48e0eb3b1715f42d016a8692d00c602c",
        "bfd428bd7c724240b0b4c94c1bc489bf",
        "17886494a15a728b4fd107d27e18982a",
        "94c1708df226fba75f95698394c90ea8",
        "464cdb264dc7df302fde24f98137e573",
        "963163aa27657d8b9e032e7a701e73ec",
        "50a087395977068eb09e3d0c2779e576",
        "fae7937863b1c7025651fd2d907a650d",
        "3a5560fd423b2b78b33ad9ab0f972898",
        "221251535bc7247311601af88717a786",
        "a2bfdef81f1df71bab3ace1b1c942fb6",
        "beb9666cc16e74564e3d5cafe6ec0a03",
        "5b58cd9d556808cf504188845b0c48c8",
        "8ddda60f64f302e518c8d74f79a487c9",
        "f516102a7839eaca3618281408eb799c",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "f9bbabbb1fe54bb7efe3fccf899b8668",
        "31e5fc23c2ef8048709099d1e738ae6b",
        "7095fe995a5f8369880f5304a7a0bfc2",
        "9cafdd7267a422b50c5042c47945278c",
        "d037e5d8a0bf41879e7972766d8d1666",
        "a78872085680fc188bf90a73bc7d0a3b"
      ],
      "date": 1636017442979
    },
    {
      "type": "edit",
      "id": "3a3a472f-ceb2-4ab9-9939-4dc4b1237bb5",
      "item": {
        "text": "__Model–view–controller__ (usually known as __[[MVC]]__) is a [[software design pattern]] commonly used for developing [[user interface]]s that divide the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user- [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller wikipedia]",
        "type": "markdown",
        "id": "3a3a472f-ceb2-4ab9-9939-4dc4b1237bb5"
      },
      "date": 1655356260863
    }
  ]
}