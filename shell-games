{
  "title": "Shell Games",
  "story": [
    {
      "type": "markdown",
      "id": "0e25e6fbd573607f",
      "text": "Sometimes Unix pipe operator and streams and filters are the right tool for the job. This page may grow into a collection of interesting combinations.\n"
    },
    {
      "type": "markdown",
      "id": "eaadea66dd8ef9c4",
      "text": "Some dev environments make use of `.env` files for holding environment variables.  I needed to get those variables into my shell.  Here I use a perl command to reformat them to be `export`ed and use the `<()` incantation so `source` can treat the results like a file."
    },
    {
      "type": "code",
      "id": "580c11d9b7f2775c",
      "text": "source <(perl -ne '!/^#/ && /=/ && s/^/export / && print' .env)"
    },
    {
      "type": "markdown",
      "id": "0517fd828a41cb7c",
      "text": "Kent Beck demonstrates that distribution of if statements in a code base follows a power law. [https://medium.com/@kentbeck_7670/conditions-are-power-law-distributed-an-example-61fa4e0d3500 article]"
    },
    {
      "type": "code",
      "id": "6967565a1f2a9166",
      "text": "# using a python code base...\ngrep -R --include='*.py' 'if ' \\\n | perl -nle 'print $1 if /.*if (.*):/' \\\n | sort | uniq -c \\\n | sort -n -r | cut -c 1–5 \\\n | sort -n | uniq -c"
    },
    {
      "type": "markdown",
      "id": "f40984e73e011ab8",
      "text": "Today I needed to remove some markup from the end of many, many files. I learned a new-to-me enhancement for a perl idiom I particularly like. `perl -pi -e 's{}{}' *.txt` allows a hacker to edit lines in many files in place. What I learned today is how to get the substitution to span multiple lines while processing many files. Specifically `-0777` is a perl convention which tells perl to slurp in whole files, instead of operating one line at-a-time."
    },
    {
      "type": "code",
      "id": "e3409c16b5d174e4",
      "text": "perl -0777pi -e 's{\\s<div class=\"section comments\"><a name=\"comments\"></a>\\s+</div>\\s+\\z}{}' *.html\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Shell Games",
        "story": []
      },
      "date": 1551796497942
    },
    {
      "item": {
        "type": "factory",
        "id": "0e25e6fbd573607f"
      },
      "id": "0e25e6fbd573607f",
      "type": "add",
      "date": 1551796499851
    },
    {
      "type": "edit",
      "id": "0e25e6fbd573607f",
      "item": {
        "type": "markdown",
        "id": "0e25e6fbd573607f",
        "text": "Sometimes Unix pipe operator and streams and filters are the right tool for the job."
      },
      "date": 1551796578567
    },
    {
      "item": {
        "type": "factory",
        "id": "580c11d9b7f2775c"
      },
      "id": "580c11d9b7f2775c",
      "type": "add",
      "after": "0e25e6fbd573607f",
      "date": 1551796594837
    },
    {
      "type": "edit",
      "id": "580c11d9b7f2775c",
      "item": {
        "type": "code",
        "id": "580c11d9b7f2775c",
        "text": "source <(perl -ne '!/^#/ && /=/ && s/^/export / && print' .env)"
      },
      "date": 1551796603695
    },
    {
      "type": "edit",
      "id": "0e25e6fbd573607f",
      "item": {
        "type": "markdown",
        "id": "0e25e6fbd573607f",
        "text": "Sometimes Unix pipe operator and streams and filters are the right tool for the job.\n"
      },
      "date": 1551796625994
    },
    {
      "type": "add",
      "id": "eaadea66dd8ef9c4",
      "item": {
        "type": "markdown",
        "id": "eaadea66dd8ef9c4",
        "text": "Some dev environments make use of `.env` files for holding environment variables.  I needed to get those variables into my shell.  Here I use a perl command to reformat them to be `export`ed and use the `<()` incantation so `source` can treat the results like a file."
      },
      "after": "0e25e6fbd573607f",
      "date": 1551796789104
    },
    {
      "type": "edit",
      "id": "0e25e6fbd573607f",
      "item": {
        "type": "markdown",
        "id": "0e25e6fbd573607f",
        "text": "Sometimes Unix pipe operator and streams and filters are the right tool for the job. This page may grow into a collection of interesting combinations.\n"
      },
      "date": 1551796915656
    },
    {
      "item": {
        "type": "factory",
        "id": "0517fd828a41cb7c"
      },
      "id": "0517fd828a41cb7c",
      "type": "add",
      "after": "580c11d9b7f2775c",
      "date": 1551797692306
    },
    {
      "type": "edit",
      "id": "0517fd828a41cb7c",
      "item": {
        "type": "markdown",
        "id": "0517fd828a41cb7c",
        "text": "Kent Beck demonstrates that distribution of if statements in a code base follows a power law. [https://medium.com/@kentbeck_7670/conditions-are-power-law-distributed-an-example-61fa4e0d3500 article]"
      },
      "date": 1551797735673
    },
    {
      "item": {
        "type": "factory",
        "id": "6967565a1f2a9166"
      },
      "id": "6967565a1f2a9166",
      "type": "add",
      "after": "0517fd828a41cb7c",
      "date": 1551797758648
    },
    {
      "type": "edit",
      "id": "6967565a1f2a9166",
      "item": {
        "type": "code",
        "id": "6967565a1f2a9166",
        "text": "grep -R --include=’*.py’ ‘if ‘ \\\n | "
      },
      "date": 1551797768551
    },
    {
      "type": "edit",
      "id": "6967565a1f2a9166",
      "item": {
        "type": "code",
        "id": "6967565a1f2a9166",
        "text": "# using a python code base...\ngrep -R --include='*.py' 'if ' \\\n | perl -nle 'print $1 if /.*if (.*):/' \\\n | "
      },
      "date": 1551797859409
    },
    {
      "type": "edit",
      "id": "6967565a1f2a9166",
      "item": {
        "type": "code",
        "id": "6967565a1f2a9166",
        "text": "# using a python code base...\ngrep -R --include='*.py' 'if ' \\\n | perl -nle 'print $1 if /.*if (.*):/' \\\n | sort | uniq -c \\\n"
      },
      "date": 1551798021999
    },
    {
      "type": "edit",
      "id": "6967565a1f2a9166",
      "item": {
        "type": "code",
        "id": "6967565a1f2a9166",
        "text": "# using a python code base...\ngrep -R --include='*.py' 'if ' \\\n | perl -nle 'print $1 if /.*if (.*):/' \\\n | sort | uniq -c \\\n | sort -n -r | cut -c 1–5 \\\n | sort -n | uniq -c"
      },
      "date": 1551798114718
    },
    {
      "item": {
        "type": "factory",
        "id": "f40984e73e011ab8"
      },
      "id": "f40984e73e011ab8",
      "type": "add",
      "after": "6967565a1f2a9166",
      "date": 1656081490275
    },
    {
      "type": "edit",
      "id": "f40984e73e011ab8",
      "item": {
        "type": "paragraph",
        "id": "f40984e73e011ab8",
        "text": "Today I needed to remove some markup from many, many files. I learned a new-to-me perl idiom."
      },
      "date": 1656081536133
    },
    {
      "type": "add",
      "id": "e3409c16b5d174e4",
      "item": {
        "type": "factory",
        "id": "e3409c16b5d174e4",
        "text": "//code"
      },
      "after": "f40984e73e011ab8",
      "date": 1656081542618
    },
    {
      "type": "edit",
      "id": "e3409c16b5d174e4",
      "item": {
        "type": "code",
        "id": "e3409c16b5d174e4",
        "text": "perl -0777pi -e 's{\\s<div class=\"section comments\"><a name=\"comments\"></a>\\s+</div>\\s+\\z}{}' *.html\n"
      },
      "date": 1656081647495
    },
    {
      "type": "edit",
      "id": "f40984e73e011ab8",
      "item": {
        "type": "factory",
        "id": "f40984e73e011ab8",
        "text": "Today I needed to remove some markup from many, many files. I learned a new-to-me perl idiom. "
      },
      "date": 1656081653544
    },
    {
      "type": "edit",
      "id": "f40984e73e011ab8",
      "item": {
        "type": "markdown",
        "id": "f40984e73e011ab8",
        "text": "Today I needed to remove some markup from the end of many, many files. I learned a new-to-me enhancement for a perl idiom I particularly like. `perl -pi -e 's{}{}' *.txt` allows a hacker to edit lines in many files in place. What I learned today is how to get the substitution to span multiple lines while processing many files. Specifically `-0777` is a perl convention which tells perl to slurp in whole files, instead of operating one line at-a-time."
      },
      "date": 1656082089448
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1656136589754
    }
  ]
}