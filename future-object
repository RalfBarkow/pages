{
  "title": "Future Object",
  "story": [
    {
      "type": "paragraph",
      "id": "d26cf678c2ce51ac",
      "text": "[…], there are a few kinds of objects that are difficult to implement in conventional object-oriented programming languages such as Smalltalk-80 [Goldberg 1983] and C++ [Stroustrup 1986]. For example, a future object [Halstead 1985] acts as a surrogate for a result that is in the process of being computed. Messages to the future cause the sender to wait until the result is computed, at which time the message is relayed to the result. Object-oriented languages make it easy to redefine simple methods, but futures must intercept any message sent them."
    },
    {
      "type": "pagefold",
      "id": "d0dd526ebe8cffd2",
      "text": "~"
    },
    {
      "type": "reference",
      "site": "localhost:3000",
      "slug": "a-reflective-language",
      "title": "A Reflective Language",
      "text": "RIVARD, Fred. Smalltalk: [[A Reflective Language]]. In: Proceedings of REFLECTION. 1996. S. 21-38. [http://ftp.linux62.org/~glibersat/publis/Riva96.pdf pdf]",
      "id": "0672f4821458fa2d"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Future Object",
        "story": []
      },
      "date": 1701900132920
    },
    {
      "item": {
        "type": "factory",
        "id": "d26cf678c2ce51ac"
      },
      "id": "d26cf678c2ce51ac",
      "type": "add",
      "date": 1701900134311
    },
    {
      "type": "edit",
      "id": "d26cf678c2ce51ac",
      "item": {
        "type": "paragraph",
        "id": "d26cf678c2ce51ac",
        "text": "[…], there are a few kinds of objects that are difficult to implement in conventional object-oriented programming languages such as Smalltalk- [Goldberg 19831and C++ [Stroustrup 19861. For example, a future object [Halstead 19851acts asa surrogate for a result that is in the process of being computed. Messagesto the future causethe sender to wait until the result is computed, at which time the messageis relayed to the result. Object-oriented languages make it easy to redefine simple methods, but futures must intercept any messagesent them."
      },
      "date": 1701900140329
    },
    {
      "item": {
        "type": "factory",
        "id": "d0dd526ebe8cffd2"
      },
      "id": "d0dd526ebe8cffd2",
      "type": "add",
      "after": "d26cf678c2ce51ac",
      "date": 1701900161567
    },
    {
      "type": "edit",
      "id": "d0dd526ebe8cffd2",
      "item": {
        "type": "pagefold",
        "id": "d0dd526ebe8cffd2",
        "text": "~"
      },
      "date": 1701900164749
    },
    {
      "id": "0672f4821458fa2d",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "localhost:3000",
        "slug": "a-reflective-language",
        "title": "A Reflective Language",
        "text": "RIVARD, Fred. Smalltalk: [[A Reflective Language]]. In: Proceedings of REFLECTION. 1996. S. 21-38. [http://ftp.linux62.org/~glibersat/publis/Riva96.pdf pdf]",
        "id": "0672f4821458fa2d"
      },
      "after": "d0dd526ebe8cffd2",
      "attribution": {
        "page": "Redefine the World"
      },
      "date": 1701900168955
    },
    {
      "type": "edit",
      "id": "d26cf678c2ce51ac",
      "item": {
        "type": "paragraph",
        "id": "d26cf678c2ce51ac",
        "text": "[…], there are a few kinds of objects that are difficult to implement in conventional object-oriented programming languages such as Smalltalk-80 [Goldberg 19831and C++ [Stroustrup 19861. For example, a future object [Halstead 19851acts asa surrogate for a result that is in the process of being computed. Messagesto the future causethe sender to wait until the result is computed, at which time the messageis relayed to the result. Object-oriented languages make it easy to redefine simple methods, but futures must intercept any messagesent them."
      },
      "date": 1701900191107
    },
    {
      "type": "edit",
      "id": "d26cf678c2ce51ac",
      "item": {
        "type": "paragraph",
        "id": "d26cf678c2ce51ac",
        "text": "[…], there are a few kinds of objects that are difficult to implement in conventional object-oriented programming languages such as Smalltalk-80 [Goldberg 19831and C++ [Stroustrup 1986]. For example, a future object [Halstead 1985]acts asa surrogate for a result that is in the process of being computed. Messagesto the future causethe sender to wait until the result is computed, at which time the messageis relayed to the result. Object-oriented languages make it easy to redefine simple methods, but futures must intercept any messagesent them."
      },
      "date": 1701900232916
    },
    {
      "type": "edit",
      "id": "d26cf678c2ce51ac",
      "item": {
        "type": "paragraph",
        "id": "d26cf678c2ce51ac",
        "text": "[…], there are a few kinds of objects that are difficult to implement in conventional object-oriented programming languages such as Smalltalk-80 [Goldberg 1983] and C++ [Stroustrup 1986]. For example, a future object [Halstead 1985] acts asa surrogate for a result that is in the process of being computed. Messagesto the future causethe sender to wait until the result is computed, at which time the messageis relayed to the result. Object-oriented languages make it easy to redefine simple methods, but futures must intercept any messagesent them."
      },
      "date": 1701900256865
    },
    {
      "type": "edit",
      "id": "d26cf678c2ce51ac",
      "item": {
        "type": "paragraph",
        "id": "d26cf678c2ce51ac",
        "text": "[…], there are a few kinds of objects that are difficult to implement in conventional object-oriented programming languages such as Smalltalk-80 [Goldberg 1983] and C++ [Stroustrup 1986]. For example, a future object [Halstead 1985] acts as a surrogate for a result that is in the process of being computed. Messages to the future cause the sender to wait until the result is computed, at which time the message is relayed to the result. Object-oriented languages make it easy to redefine simple methods, but futures must intercept any message sent them."
      },
      "date": 1701900273677
    }
  ]
}