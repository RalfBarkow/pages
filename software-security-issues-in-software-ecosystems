{
  "title": "Software security issues in software ecosystems",
  "story": [
    {
      "type": "markdown",
      "id": "6778694a595f92a5",
      "text": "Ruohonen, Jukka, Kalle Hjerppe, and Kalle Rindell. ‘A Large-Scale Security-Oriented Static Analysis of Python Packages in PyPI’. ArXiv:2107.12699 [Cs], 27 July 2021. http://arxiv.org/abs/2107.12699.\n> **Abstract**. Different security issues are a common problem for open source packages archived to and delivered through software ecosystems. These often manifest themselves as software weaknesses that may lead to concrete software vulnerabilities. This paper examines various security issues in Python packages with static analysis. The dataset is based on a snapshot of all packages stored to the Python Package Index (PyPI). In total, over 197 thousand packages and over 749 thousand security issues are covered. Even under the constraints imposed by static analysis, (a) the results indicate prevalence of security issues; at least one issue is present for about 46% of the Python packages. In terms of the issue types, (b) exception handling and different code injections have been the most common issues. The subprocess module stands out in this regard. Reflecting the generally small size of the packages, (c) software size metrics do not predict well the amount of issues revealed through static analysis. With these results and the accompanying discussion, the paper contributes to the field of large-scale empirical studies for better understanding security problems in software ecosystems. "
    },
    {
      "type": "markdown",
      "id": "f552fdfe77b384ec",
      "text": "the paper continues the recent large-scale empirical analyses on software security issues in software ecosystems [22], [25], [82]. "
    },
    {
      "type": "paragraph",
      "id": "a49f71c284a334a2",
      "text": "[22] G. Korkmaz, C. Kelling, C. Robbins, and S. Keller. Modeling the Impact of Python and R Packages Using Dependency and Contributor Networks. Social Network Analysis and Mining, 10(7), 2020. "
    },
    {
      "type": "markdown",
      "id": "e1db23a6c0383437",
      "text": "> **Abstract**. This paper develops methods to estimate the factors that affect the impact of open-source software (OSS), measured by number of downloads, with a study of Python and R packages. The OSS community is characterized by a high level of collaboration and sharing which results in interactions between contributors as well as packages due to reuses. We use data collected from Depsy.org about the development activities of Python and R packages, and generate the dependency and contributor networks. We develop three Quasi-Poisson models for each of the Python and R communities using network characteristics, as well as author and package attributes. We find that the more derivative a package is (the more dependencies it has), the less likely it is to have a high impact. We also show that the centrality of a package in the dependency network measured by the out-degree, closeness centrality, and pagerank has a significant effect on its impact. Moreover, the closeness and weighted degree centralities of the developers in the Python and R contributor networks play an important role. We also find that introducing network features to a baseline model using only package features (e.g., number of authors, number of commits) improves the performance of the models."
    },
    {
      "type": "markdown",
      "id": "5ecb03cb8d50bc6b",
      "text": "[25] B. Liu, G. Meng, W. Zou, Q. Gong, F. Li, M. Lin, D. Sun, W. Huo, and C. Zhang. A Large-Scale Empirical Study on Vulnerability Distribution within Projects and the Lessons Learned. In Proceedings of the 42nd International Conference on Software Engineering (ICSE 2020), Seoul, 2020. ACM.\n> **Abstract**. The number of vulnerabilities increases rapidly in recent years, due to advances in vulnerability discovery solutions. It enables a thorough analysis on the vulnerability distribution and provides support for correlation analysis and prediction of vulnerabilities. Previous research either focuses on analyzing bugs rather than vulnerabilities, or only studies general vulnerability distribution among projects rather than the distribution within each project. In this paper, we collected a large vulnerability dataset, consisting of all known vulnerabilities associated with five representative open source projects, by utilizing automated crawlers and spending months of manual efforts. We then analyzed the vulnerability distribution within each project over four dimensions, including files, functions, vulnerability types and responsible developers. Based on the results analysis, we presented 12 practical insights on the distribution of vulnerabilities. Finally, we applied such insights on several vulnerability discovery solutions (including static analysis and dynamic fuzzing), and helped them find 10 zero-day vulnerabilities in target projects, showing that our insights are useful.\n"
    },
    {
      "type": "markdown",
      "id": "c241944934209884",
      "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> **Abstract**. The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software package registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported security issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer accounts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to depend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained packages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Software security issues in software ecosystems",
        "story": []
      },
      "date": 1627921184000
    },
    {
      "item": {
        "type": "factory",
        "id": "6778694a595f92a5"
      },
      "id": "6778694a595f92a5",
      "type": "add",
      "date": 1627921185198
    },
    {
      "type": "edit",
      "id": "6778694a595f92a5",
      "item": {
        "type": "markdown",
        "id": "6778694a595f92a5",
        "text": "Ruohonen, Jukka, Kalle Hjerppe, and Kalle Rindell. ‘A Large-Scale Security-Oriented Static Analysis of Python Packages in PyPI’. ArXiv:2107.12699 [Cs], 27 July 2021. http://arxiv.org/abs/2107.12699.\n> "
      },
      "date": 1627921191552
    },
    {
      "type": "edit",
      "id": "6778694a595f92a5",
      "item": {
        "type": "markdown",
        "id": "6778694a595f92a5",
        "text": "Ruohonen, Jukka, Kalle Hjerppe, and Kalle Rindell. ‘A Large-Scale Security-Oriented Static Analysis of Python Packages in PyPI’. ArXiv:2107.12699 [Cs], 27 July 2021. http://arxiv.org/abs/2107.12699.\n> **Abstract** – Different security issues are a common problem for open source packages archived to and delivered through software ecosystems. These often manifest themselves as software weaknesses that may lead to concrete software vulnerabilities. This paper examines various security issues in Python packages with static analysis. The dataset is based on a snapshot of all packages stored to the Python Package Index (PyPI). In total, over 197 thousand packages and over 749 thousand security issues are covered. Even under the constraints imposed by static analysis, (a) the results indicate prevalence of security issues; at least one issue is present for about 46% of the Python packages. In terms of the issue types, (b) exception handling and different code injections have been the most common issues. The subprocess module stands out in this regard. Reflecting the generally small size of the packages, (c) software size metrics do not predict well the amount of issues revealed through static analysis. With these results and the accompanying discussion, the paper contributes to the field of large-scale empirical studies for better understanding security problems in software ecosystems. "
      },
      "date": 1627921216588
    },
    {
      "item": {
        "type": "factory",
        "id": "f552fdfe77b384ec"
      },
      "id": "f552fdfe77b384ec",
      "type": "add",
      "after": "6778694a595f92a5",
      "date": 1627921274029
    },
    {
      "type": "edit",
      "id": "f552fdfe77b384ec",
      "item": {
        "type": "markdown",
        "id": "f552fdfe77b384ec",
        "text": "the paper continues the recent large-scale empirical analyses on software security issues in software ecosystems [22], [25], [82]. "
      },
      "date": 1627921278230
    },
    {
      "item": {
        "type": "factory",
        "id": "a49f71c284a334a2"
      },
      "id": "a49f71c284a334a2",
      "type": "add",
      "after": "f552fdfe77b384ec",
      "date": 1627921285478
    },
    {
      "type": "edit",
      "id": "a49f71c284a334a2",
      "item": {
        "type": "paragraph",
        "id": "a49f71c284a334a2",
        "text": "[22] G. Korkmaz, C. Kelling, C. Robbins, and S. Keller. Modeling the Impact of Python and R Packages Using Dependency and Contributor Networks. Social Network Analysis and Mining, 10(7), 2020."
      },
      "date": 1627921287397
    },
    {
      "item": {
        "type": "factory",
        "id": "5ecb03cb8d50bc6b"
      },
      "id": "5ecb03cb8d50bc6b",
      "type": "add",
      "after": "a49f71c284a334a2",
      "date": 1627921296041
    },
    {
      "type": "edit",
      "id": "5ecb03cb8d50bc6b",
      "item": {
        "type": "markdown",
        "id": "5ecb03cb8d50bc6b",
        "text": "[25] B. Liu, G. Meng, W. Zou, Q. Gong, F. Li, M. Lin, D. Sun, W. Huo, and C. Zhang. A Large-Scale Empirical Study on Vulnerability Distribution within Projects and the Lessons Learned. In Proceedings of the 42nd International Conference on Software Engineering (ICSE 2020), Seoul, 2020. ACM."
      },
      "date": 1627921298636
    },
    {
      "type": "edit",
      "id": "5ecb03cb8d50bc6b",
      "item": {
        "type": "markdown",
        "id": "5ecb03cb8d50bc6b",
        "text": "[25] B. Liu, G. Meng, W. Zou, Q. Gong, F. Li, M. Lin, D. Sun, W. Huo, and C. Zhang. A Large-Scale Empirical Study on Vulnerability Distribution within Projects and the Lessons Learned. In Proceedings of the 42nd International Conference on Software Engineering (ICSE 2020), Seoul, 2020. ACM.\n"
      },
      "date": 1627921310801
    },
    {
      "type": "add",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX."
      },
      "after": "5ecb03cb8d50bc6b",
      "date": 1627921311902
    },
    {
      "type": "edit",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software pack- age registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported secu- rity issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer ac- counts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to de- pend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained pack- ages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
      },
      "date": 1627921394849
    },
    {
      "type": "edit",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> **Abstract** The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software pack- age registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported secu- rity issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer ac- counts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to de- pend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained pack- ages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
      },
      "date": 1627921408863
    },
    {
      "type": "edit",
      "id": "6778694a595f92a5",
      "item": {
        "type": "markdown",
        "id": "6778694a595f92a5",
        "text": "Ruohonen, Jukka, Kalle Hjerppe, and Kalle Rindell. ‘A Large-Scale Security-Oriented Static Analysis of Python Packages in PyPI’. ArXiv:2107.12699 [Cs], 27 July 2021. http://arxiv.org/abs/2107.12699.\n> **Abstract**. Different security issues are a common problem for open source packages archived to and delivered through software ecosystems. These often manifest themselves as software weaknesses that may lead to concrete software vulnerabilities. This paper examines various security issues in Python packages with static analysis. The dataset is based on a snapshot of all packages stored to the Python Package Index (PyPI). In total, over 197 thousand packages and over 749 thousand security issues are covered. Even under the constraints imposed by static analysis, (a) the results indicate prevalence of security issues; at least one issue is present for about 46% of the Python packages. In terms of the issue types, (b) exception handling and different code injections have been the most common issues. The subprocess module stands out in this regard. Reflecting the generally small size of the packages, (c) software size metrics do not predict well the amount of issues revealed through static analysis. With these results and the accompanying discussion, the paper contributes to the field of large-scale empirical studies for better understanding security problems in software ecosystems. "
      },
      "date": 1627921427030
    },
    {
      "type": "edit",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> **Abstract**. The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software pack- age registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported secu- rity issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer ac- counts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to de- pend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained pack- ages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
      },
      "date": 1627921436052
    },
    {
      "type": "edit",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> **Abstract**. The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software package registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported secu- rity issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer ac- counts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to de- pend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained pack- ages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
      },
      "date": 1627921449518
    },
    {
      "type": "edit",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> **Abstract**. The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software package registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported security issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer ac- counts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to de- pend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained pack- ages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
      },
      "date": 1627921481212
    },
    {
      "type": "edit",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> **Abstract**. The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software package registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported security issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer accounts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to de- pend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained pack- ages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
      },
      "date": 1627921497219
    },
    {
      "type": "edit",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> **Abstract**. The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software package registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported security issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer accounts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to depend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained pack- ages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
      },
      "date": 1627921519721
    },
    {
      "type": "edit",
      "id": "c241944934209884",
      "item": {
        "type": "markdown",
        "id": "c241944934209884",
        "text": "[82] M. Zimmermann, C. Staicu, C. Tenny, and M. Pradel. Small World with High Risks: A Study of Security Threats in the npm Ecosystem. In Proceedings of the 28th USENIX Security Symposium, pages 995– 1010, Santa Clara, 2019. USENIX.\n> **Abstract**. The popularity of JavaScript has lead to a large ecosystem of third-party packages available via the npm software package registry. The open nature of npm has boosted its growth, providing over 800,000 free and reusable software packages. Unfortunately, this open nature also causes security risks, as evidenced by recent incidents of single packages that broke or attacked software running on millions of computers. This paper studies security risks for users of npm by systematically analyzing dependencies between packages, the maintainers responsible for these packages, and publicly reported security issues. Studying the potential for running vulnerable or malicious code due to third-party dependencies, we find that individual packages could impact large parts of the entire ecosystem. Moreover, a very small number of maintainer accounts could be used to inject malicious code into the majority of all packages, a problem that has been increasing over time. Studying the potential for accidentally using vulnerable code, we find that lack of maintenance causes many packages to depend on vulnerable code, even years after a vulnerability has become public. Our results provide evidence that npm suffers from single points of failure and that unmaintained packages threaten large code bases. We discuss several mitigation techniques, such as trusted maintainers and total first-party security, and analyze their potential effectiveness."
      },
      "date": 1627921543865
    },
    {
      "type": "edit",
      "id": "5ecb03cb8d50bc6b",
      "item": {
        "type": "markdown",
        "id": "5ecb03cb8d50bc6b",
        "text": "[25] B. Liu, G. Meng, W. Zou, Q. Gong, F. Li, M. Lin, D. Sun, W. Huo, and C. Zhang. A Large-Scale Empirical Study on Vulnerability Distribution within Projects and the Lessons Learned. In Proceedings of the 42nd International Conference on Software Engineering (ICSE 2020), Seoul, 2020. ACM.\n> **Abstract**. The number of vulnerabilities increases rapidly in recent years, due to advances in vulnerability discovery solutions. It enables a thorough analysis on the vulnerability distribution and provides support for correlation analysis and prediction of vulnerabilities. Previous research either focuses on analyzing bugs rather than vulnerabilities, or only studies general vulnerability distribution among projects rather than the distribution within each project. In this paper, we collected a large vulnerability dataset, consist- ing of all known vulnerabilities associated with five representative open source projects, by utilizing automated crawlers and spending months of manual efforts. We then analyzed the vulnerability dis- tribution within each project over four dimensions, including files, functions, vulnerability types and responsible developers. Based on the results analysis, we presented 12 practical insights on the distribution of vulnerabilities. Finally, we applied such insights on several vulnerability discovery solutions (including static analysis and dynamic fuzzing), and helped them find 10 zero-day vulnera- bilities in target projects, showing that our insights are useful.\n"
      },
      "date": 1627921738046
    },
    {
      "type": "edit",
      "id": "5ecb03cb8d50bc6b",
      "item": {
        "type": "markdown",
        "id": "5ecb03cb8d50bc6b",
        "text": "[25] B. Liu, G. Meng, W. Zou, Q. Gong, F. Li, M. Lin, D. Sun, W. Huo, and C. Zhang. A Large-Scale Empirical Study on Vulnerability Distribution within Projects and the Lessons Learned. In Proceedings of the 42nd International Conference on Software Engineering (ICSE 2020), Seoul, 2020. ACM.\n> **Abstract**. The number of vulnerabilities increases rapidly in recent years, due to advances in vulnerability discovery solutions. It enables a thorough analysis on the vulnerability distribution and provides support for correlation analysis and prediction of vulnerabilities. Previous research either focuses on analyzing bugs rather than vulnerabilities, or only studies general vulnerability distribution among projects rather than the distribution within each project. In this paper, we collected a large vulnerability dataset, consisting of all known vulnerabilities associated with five representative open source projects, by utilizing automated crawlers and spending months of manual efforts. We then analyzed the vulnerability distribution within each project over four dimensions, including files, functions, vulnerability types and responsible developers. Based on the results analysis, we presented 12 practical insights on the distribution of vulnerabilities. Finally, we applied such insights on several vulnerability discovery solutions (including static analysis and dynamic fuzzing), and helped them find 10 zero-day vulnerabilities in target projects, showing that our insights are useful.\n"
      },
      "date": 1627921795335
    },
    {
      "type": "add",
      "id": "c17476b3af6e91d6",
      "item": {
        "type": "paragraph",
        "id": "c17476b3af6e91d6",
        "text": "> **Abstract**. This paper develops methods to estimate the factors that affect the impact of open-source software (OSS), measured by number of downloads, with a study of Python and R packages. The OSS community is characterized by a high level of col- laboration and sharing which results in interactions between contributors as well as packages due to reuses. We use data collected from Depsy.org about the development activities of Python and R packages, and generate the dependency and contributor networks. We develop three Quasi-Poisson models for each of the Python and R communities using network characteristics, as well as author and package attributes. We find that the more derivative a package is (the more dependencies it has), the less likely it is to have a high impact. We also show that the centrality of a package in the dependency network measured by the out-degree, closeness centrality, and pagerank has a significant effect on its impact. Moreover, the closeness and weighted degree centralities of the developers in the Python and R contributor networks play an important role. We also find that introducing network features to a baseline model using only package features (e.g., number of authors, number of commits) improves the performance of the models."
      },
      "after": "a49f71c284a334a2",
      "date": 1627921948599
    },
    {
      "type": "edit",
      "id": "c17476b3af6e91d6",
      "item": {
        "type": "paragraph",
        "id": "c17476b3af6e91d6",
        "text": "> **Abstract**. This paper develops methods to estimate the factors that affect the impact of open-source software (OSS), measured by number of downloads, with a study of Python and R packages. The OSS community is characterized by a high level of collaboration and sharing which results in interactions between contributors as well as packages due to reuses. We use data collected from Depsy.org about the development activities of Python and R packages, and generate the dependency and contributor networks. We develop three Quasi-Poisson models for each of the Python and R communities using network characteristics, as well as author and package attributes. We find that the more derivative a package is (the more dependencies it has), the less likely it is to have a high impact. We also show that the centrality of a package in the dependency network measured by the out-degree, closeness centrality, and pagerank has a significant effect on its impact. Moreover, the closeness and weighted degree centralities of the developers in the Python and R contributor networks play an important role. We also find that introducing network features to a baseline model using only package features (e.g., number of authors, number of commits) improves the performance of the models."
      },
      "date": 1627921995738
    },
    {
      "type": "remove",
      "id": "c17476b3af6e91d6",
      "date": 1627922004426
    },
    {
      "type": "edit",
      "id": "a49f71c284a334a2",
      "item": {
        "type": "paragraph",
        "id": "a49f71c284a334a2",
        "text": "[22] G. Korkmaz, C. Kelling, C. Robbins, and S. Keller. Modeling the Impact of Python and R Packages Using Dependency and Contributor Networks. Social Network Analysis and Mining, 10(7), 2020. > **Abstract**. This paper develops methods to estimate the factors that affect the impact of open-source software (OSS), measured by number of downloads, with a study of Python and R packages. The OSS community is characterized by a high level of collaboration and sharing which results in interactions between contributors as well as packages due to reuses. We use data collected from Depsy.org about the development activities of Python and R packages, and generate the dependency and contributor networks. We develop three Quasi-Poisson models for each of the Python and R communities using network characteristics, as well as author and package attributes. We find that the more derivative a package is (the more dependencies it has), the less likely it is to have a high impact. We also show that the centrality of a package in the dependency network measured by the out-degree, closeness centrality, and pagerank has a significant effect on its impact. Moreover, the closeness and weighted degree centralities of the developers in the Python and R contributor networks play an important role. We also find that introducing network features to a baseline model using only package features (e.g., number of authors, number of commits) improves the performance of the models."
      },
      "date": 1627922009159
    },
    {
      "type": "edit",
      "id": "a49f71c284a334a2",
      "item": {
        "type": "paragraph",
        "id": "a49f71c284a334a2",
        "text": "[22] G. Korkmaz, C. Kelling, C. Robbins, and S. Keller. Modeling the Impact of Python and R Packages Using Dependency and Contributor Networks. Social Network Analysis and Mining, 10(7), 2020. "
      },
      "date": 1627922014079
    },
    {
      "type": "add",
      "id": "ed07a79a7e8f76a2",
      "item": {
        "type": "paragraph",
        "id": "ed07a79a7e8f76a2",
        "text": "> **Abstract**. This paper develops methods to estimate the factors that affect the impact of open-source software (OSS), measured by number of downloads, with a study of Python and R packages. The OSS community is characterized by a high level of collaboration and sharing which results in interactions between contributors as well as packages due to reuses. We use data collected from Depsy.org about the development activities of Python and R packages, and generate the dependency and contributor networks. We develop three Quasi-Poisson models for each of the Python and R communities using network characteristics, as well as author and package attributes. We find that the more derivative a package is (the more dependencies it has), the less likely it is to have a high impact. We also show that the centrality of a package in the dependency network measured by the out-degree, closeness centrality, and pagerank has a significant effect on its impact. Moreover, the closeness and weighted degree centralities of the developers in the Python and R contributor networks play an important role. We also find that introducing network features to a baseline model using only package features (e.g., number of authors, number of commits) improves the performance of the models."
      },
      "after": "a49f71c284a334a2",
      "date": 1627922014874
    },
    {
      "item": {
        "type": "factory",
        "id": "e1db23a6c0383437"
      },
      "id": "e1db23a6c0383437",
      "type": "add",
      "after": "c241944934209884",
      "date": 1627922023123
    },
    {
      "type": "remove",
      "id": "ed07a79a7e8f76a2",
      "date": 1627922024422
    },
    {
      "type": "edit",
      "id": "e1db23a6c0383437",
      "item": {
        "type": "markdown",
        "id": "e1db23a6c0383437",
        "text": "> **Abstract**. This paper develops methods to estimate the factors that affect the impact of open-source software (OSS), measured by number of downloads, with a study of Python and R packages. The OSS community is characterized by a high level of collaboration and sharing which results in interactions between contributors as well as packages due to reuses. We use data collected from Depsy.org about the development activities of Python and R packages, and generate the dependency and contributor networks. We develop three Quasi-Poisson models for each of the Python and R communities using network characteristics, as well as author and package attributes. We find that the more derivative a package is (the more dependencies it has), the less likely it is to have a high impact. We also show that the centrality of a package in the dependency network measured by the out-degree, closeness centrality, and pagerank has a significant effect on its impact. Moreover, the closeness and weighted degree centralities of the developers in the Python and R contributor networks play an important role. We also find that introducing network features to a baseline model using only package features (e.g., number of authors, number of commits) improves the performance of the models."
      },
      "date": 1627922025792
    },
    {
      "id": "e1db23a6c0383437",
      "type": "move",
      "order": [
        "6778694a595f92a5",
        "f552fdfe77b384ec",
        "a49f71c284a334a2",
        "e1db23a6c0383437",
        "5ecb03cb8d50bc6b",
        "c241944934209884"
      ],
      "date": 1627922039414
    }
  ]
}