{
  "title": "Measure of the Size of a Program",
  "story": [
    {
      "type": "markdown",
      "id": "b01c1671f54582ca",
      "text": "# Metrics\n\n[https://www.paulgraham.com/power.html \"Succinctness in Power\" page] – Small in what sense though? The most common measure of code size is lines of code. But [[Paul Graham]] thinks that this metric is the most common because it is the easiest to measure. \n> I don't think anyone really believes it is the true test of the length of a program. Different languages have different conventions for how much you should put on a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a program, but this is not very good either; some languages (Perl, for example) just use shorter identifiers than others.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "38817405e86316d3",
      "text": "We think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. The name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. There are borderline cases (is -5 two elements or one?) but we think most of them are the same for every language, so they don't affect comparisons much.\n"
    },
    {
      "type": "markdown",
      "id": "7bbe0db71f7826e1",
      "text": "This metric needs fleshing out, and it could require interpretation in the case of specific languages, but we think it tries to measure the right thing, which is the number of parts a program has. We think the tree you'd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Measure of the Size of a Program",
        "story": []
      },
      "date": 1633455048485
    },
    {
      "item": {
        "type": "factory",
        "id": "b01c1671f54582ca"
      },
      "id": "b01c1671f54582ca",
      "type": "add",
      "date": 1633455059332
    },
    {
      "type": "edit",
      "id": "b01c1671f54582ca",
      "item": {
        "type": "markdown",
        "id": "b01c1671f54582ca",
        "text": "Measure of the Size of a Program"
      },
      "date": 1633455065706
    },
    {
      "type": "edit",
      "id": "b01c1671f54582ca",
      "item": {
        "type": "markdown",
        "id": "b01c1671f54582ca",
        "text": "# Metrics\n\nSmall in what sense though? The most common measure of code size is lines of code. But I think that this metric is the most common because it is the easiest to measure. I don't think anyone really believes it is the true test of the length of a program. Different languages have different conventions for how much you should put on a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a program, but this is not very good either; some languages (Perl, for example) just use shorter identifiers than others.\n\nI think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. The name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. There are borderline cases (is -5 two elements or one?) but I think most of them are the same for every language, so they don't affect comparisons much.\n\nThis metric needs fleshing out, and it could require interpretation in the case of specific languages, but I think it tries to measure the right thing, which is the number of parts a program has. I think the tree you'd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it."
      },
      "date": 1633455078529
    },
    {
      "type": "edit",
      "id": "b01c1671f54582ca",
      "item": {
        "type": "markdown",
        "id": "b01c1671f54582ca",
        "text": "# Metrics\n\n[https://www.paulgraham.com/power.html page] – Small in what sense though? The most common measure of code size is lines of code. But I think that this metric is the most common because it is the easiest to measure. I don't think anyone really believes it is the true test of the length of a program. Different languages have different conventions for how much you should put on a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a program, but this is not very good either; some languages (Perl, for example) just use shorter identifiers than others.\n\nI think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. The name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. There are borderline cases (is -5 two elements or one?) but I think most of them are the same for every language, so they don't affect comparisons much.\n\nThis metric needs fleshing out, and it could require interpretation in the case of specific languages, but I think it tries to measure the right thing, which is the number of parts a program has. I think the tree you'd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it."
      },
      "date": 1633455099296
    },
    {
      "type": "edit",
      "id": "b01c1671f54582ca",
      "item": {
        "type": "markdown",
        "id": "b01c1671f54582ca",
        "text": "# Metrics\n\n[https://www.paulgraham.com/power.html page] – Small in what sense though? The most common measure of code size is lines of code. But [[Paul Graham]] thinks that this metric is the most common because it is the easiest to measure. I don't think anyone really believes it is the true test of the length of a program. Different languages have different conventions for how much you should put on a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a program, but this is not very good either; some languages (Perl, for example) just use shorter identifiers than others.\n\nI think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. The name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. There are borderline cases (is -5 two elements or one?) but I think most of them are the same for every language, so they don't affect comparisons much.\n\nThis metric needs fleshing out, and it could require interpretation in the case of specific languages, but I think it tries to measure the right thing, which is the number of parts a program has. I think the tree you'd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it."
      },
      "date": 1633455165881
    },
    {
      "type": "edit",
      "id": "b01c1671f54582ca",
      "item": {
        "type": "markdown",
        "id": "b01c1671f54582ca",
        "text": "# Metrics\n\n[https://www.paulgraham.com/power.html page] – Small in what sense though? The most common measure of code size is lines of code. But [[Paul Graham]] thinks that this metric is the most common because it is the easiest to measure. \n> I don't think anyone really believes it is the true test of the length of a program. Different languages have different conventions for how much you should put on a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a program, but this is not very good either; some languages (Perl, for example) just use shorter identifiers than others.\n\nI think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. The name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. There are borderline cases (is -5 two elements or one?) but I think most of them are the same for every language, so they don't affect comparisons much.\n\nThis metric needs fleshing out, and it could require interpretation in the case of specific languages, but I think it tries to measure the right thing, which is the number of parts a program has. I think the tree you'd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it."
      },
      "date": 1633455182359
    },
    {
      "type": "edit",
      "id": "b01c1671f54582ca",
      "item": {
        "type": "markdown",
        "id": "b01c1671f54582ca",
        "text": "# Metrics\n\n[https://www.paulgraham.com/power.html page] – Small in what sense though? The most common measure of code size is lines of code. But [[Paul Graham]] thinks that this metric is the most common because it is the easiest to measure. \n> I don't think anyone really believes it is the true test of the length of a program. Different languages have different conventions for how much you should put on a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a program, but this is not very good either; some languages (Perl, for example) just use shorter identifiers than others.\n\n\n"
      },
      "date": 1633455205992
    },
    {
      "type": "add",
      "id": "38817405e86316d3",
      "item": {
        "type": "markdown",
        "id": "38817405e86316d3",
        "text": "We think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. The name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. There are borderline cases (is -5 two elements or one?) but I think most of them are the same for every language, so they don't affect comparisons much.\n\nThis metric needs fleshing out, and it could require interpretation in the case of specific languages, but I think it tries to measure the right thing, which is the number of parts a program has. I think the tree you'd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it."
      },
      "after": "b01c1671f54582ca",
      "date": 1633455208898
    },
    {
      "type": "edit",
      "id": "38817405e86316d3",
      "item": {
        "type": "markdown",
        "id": "38817405e86316d3",
        "text": "We think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. The name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. There are borderline cases (is -5 two elements or one?) but we think most of them are the same for every language, so they don't affect comparisons much.\n\nThis metric needs fleshing out, and it could require interpretation in the case of specific languages, but I think it tries to measure the right thing, which is the number of parts a program has. I think the tree you'd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it."
      },
      "date": 1633455235820
    },
    {
      "type": "edit",
      "id": "38817405e86316d3",
      "item": {
        "type": "markdown",
        "id": "38817405e86316d3",
        "text": "We think a better measure of the size of a program would be the number of elements, where an element is anything that would be a distinct node if you drew a tree representing the source code. The name of a variable or function is an element; an integer or a floating-point number is an element; a segment of literal text is an element; an element of a pattern, or a format directive, is an element; a new block is an element. There are borderline cases (is -5 two elements or one?) but we think most of them are the same for every language, so they don't affect comparisons much.\n"
      },
      "date": 1633455254064
    },
    {
      "type": "add",
      "id": "7bbe0db71f7826e1",
      "item": {
        "type": "markdown",
        "id": "7bbe0db71f7826e1",
        "text": "This metric needs fleshing out, and it could require interpretation in the case of specific languages, but we think it tries to measure the right thing, which is the number of parts a program has. We think the tree you'd draw in this exercise is what you have to make in your head in order to conceive of the program, and so its size is proportionate to the amount of work you have to do to write or read it."
      },
      "after": "38817405e86316d3",
      "date": 1633455278671
    },
    {
      "type": "edit",
      "id": "b01c1671f54582ca",
      "item": {
        "type": "markdown",
        "id": "b01c1671f54582ca",
        "text": "# Metrics\n\n[https://www.paulgraham.com/power.html Succinctness in Power page] – Small in what sense though? The most common measure of code size is lines of code. But [[Paul Graham]] thinks that this metric is the most common because it is the easiest to measure. \n> I don't think anyone really believes it is the true test of the length of a program. Different languages have different conventions for how much you should put on a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a program, but this is not very good either; some languages (Perl, for example) just use shorter identifiers than others.\n\n\n"
      },
      "date": 1633455350429
    },
    {
      "type": "edit",
      "id": "b01c1671f54582ca",
      "item": {
        "type": "markdown",
        "id": "b01c1671f54582ca",
        "text": "# Metrics\n\n[https://www.paulgraham.com/power.html \"Succinctness in Power\" page] – Small in what sense though? The most common measure of code size is lines of code. But [[Paul Graham]] thinks that this metric is the most common because it is the easiest to measure. \n> I don't think anyone really believes it is the true test of the length of a program. Different languages have different conventions for how much you should put on a line; in C a lot of lines have nothing on them but a delimiter or two.\n\nAnother easy test is the number of characters in a program, but this is not very good either; some languages (Perl, for example) just use shorter identifiers than others.\n\n\n"
      },
      "date": 1633455364966
    }
  ]
}