{
  "title": "Handle Body Pattern",
  "story": [
    {
      "type": "html",
      "text": "A group of [[Design Pattern]]s, in which the implementation of something (the \"body\") is separated from its interface by means of a level of indirection (the \"handle\").\tClient code operates on the handle, which then operates on the body; either by simply forwarding/delegating requests or by adapting a protocol. We can say that the handle <i>wraps</i> the body (hence the alternative name [[Wrapper Pattern]]). It may modify or suppress some messages, depending on the purpose of the wrapping. The object that is being wrapped may cooperate, but more commonly it has no knowledge that it is being wrapped.",
      "id": "56720c9ec96e8a22d9b5089ad887b12b"
    },
    {
      "type": "html",
      "text": "\nExamples of the [[Handle Body Pattern]] include:",
      "id": "c604239c5ee80ec2564f64cedd47161a"
    },
    {
      "type": "html",
      "text": " [[Adapter Pattern]]",
      "id": "2b82635be1c5ada0ad8805aff4b0d953"
    },
    {
      "type": "html",
      "text": " [[Facet Pattern]]",
      "id": "1225a09167649752a8fdec7b7d750fb1"
    },
    {
      "type": "html",
      "text": " [[Caretaker Pattern]]",
      "id": "e150ab718f48429e0eab9e67f9e1369c"
    },
    {
      "type": "html",
      "text": " [[Decorator Pattern]]",
      "id": "aa511dc2ede693b226d417f930c3ffda"
    },
    {
      "type": "html",
      "text": " [[Bridge Pattern]]",
      "id": "d15810fd14e36bc33fbc0ddadaafbe26"
    },
    {
      "type": "html",
      "text": " [[Remote Proxy]] (or [[Half Object Plus Protocol]] ?)",
      "id": "9953d7bf2dde2ec27c830ca60e48709e"
    },
    {
      "type": "html",
      "text": " [[Lazy Instantiation Pattern]]",
      "id": "5d051279a594cf6c6cfc33ce30f07859"
    },
    {
      "type": "html",
      "text": " [[Tomb Stone]]",
      "id": "7df2d8c9b2e274191bcf74c37a8a2505"
    },
    {
      "type": "html",
      "text": " [[Envelope Letter]]",
      "id": "3d847889d6ad21ca4d03ed16b0d4b4f9"
    },
    {
      "type": "html",
      "text": " [[Role Object]]",
      "id": "a74d0ed280f6e6c739c8b5a80feaee03"
    },
    {
      "type": "html",
      "text": " [[Pimpl Idiom]]",
      "id": "acba8a52a4b733575ffb6f77b1fdc6cb"
    },
    {
      "type": "html",
      "text": "\nIn some cases, the handle and body have a fixed one-to-one relationship; in others the body associated with the handle might change.",
      "id": "b29baf9e21d3cedff4a3094297be9640"
    },
    {
      "type": "html",
      "text": "\nA [[Handle Body Pattern]] can be treated as a function that maps from the body to the handle. These functions can be composed. In general, the order of composition matters. This is obvious when the handle presents a different interface to the body (for example in [[Adapter Pattern]]), but it is also true when the interfaces are the same or very similar.",
      "id": "5175c30a706ecfda034f64344fa712b5"
    },
    {
      "type": "html",
      "text": "\nFor example, consider [[Facet Pattern]] composed with [[Remote Proxy]] -- if [[Facet Pattern]] is applied first, then it is the remote machine that is responsible for enforcing the facet. If [[Remote Proxy]] is applied first, then the client machine is responsible for enforcing the facet. The latter option is more likely to allow the facet restriction to be bypassed.",
      "id": "3877f1984dbb8ca98a8538e6bb04f2ee"
    },
    {
      "type": "html",
      "text": "\nConstruction of the various forms of [[Handle Body Pattern]] is greatly enhanced by a good macro processor or a language with meta-capabilities (which can automate much of the typing).  However, even a language such as [[Cee Plus Plus]] can implement these (many [[Design Patterns]] are designed to get around C++ limitations), you just have to do more typing.  :)",
      "id": "07fb31a8fa863ac8572fba3ffeb40f7b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d4daa4ba9bbba84694961d2b30c5c78"
    },
    {
      "type": "html",
      "text": "See [[Handle Body Pattern Problem]] for discussion of problems with this pattern.",
      "id": "137bd8536506c477a276874d6a691400"
    },
    {
      "type": "html",
      "text": "\nAlso known as [[Wrapper Object]]",
      "id": "8197c620dbe15d012cb5a59b404e80f2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d4daa4ba9bbba84694961d2b30c5c78"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]]",
      "id": "5a5e46d3c7ba06e67722eafd39adc13d"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?HandleBodyPattern c2.com]",
      "id": "444c0ed2c0f02b4ab094ad84f86fba9d"
    }
  ],
  "journal": [
    {
      "date": 1262268634000,
      "id": "7c3071af72e5365bdb872ac235c7d654",
      "type": "create",
      "item": {
        "title": "Handle Body Pattern",
        "story": [
          {
            "type": "html",
            "text": "A group of [[Design Pattern]]s, in which the implementation of something (the \"body\") is separated from its interface by means of a level of indirection (the \"handle\").\tClient code operates on the handle, which then operates on the body; either by simply forwarding/delegating requests or by adapting a protocol. We can say that the handle <i>wraps</i> the body (hence the alternative name [[Wrapper Pattern]]). It may modify or suppress some messages, depending on the purpose of the wrapping. The object that is being wrapped may cooperate, but more commonly it has no knowledge that it is being wrapped.",
            "id": "56720c9ec96e8a22d9b5089ad887b12b"
          },
          {
            "type": "html",
            "text": "\nExamples of the [[Handle Body Pattern]] include:",
            "id": "c604239c5ee80ec2564f64cedd47161a"
          },
          {
            "type": "html",
            "text": " [[Adapter Pattern]]",
            "id": "2b82635be1c5ada0ad8805aff4b0d953"
          },
          {
            "type": "html",
            "text": " [[Facet Pattern]]",
            "id": "1225a09167649752a8fdec7b7d750fb1"
          },
          {
            "type": "html",
            "text": " [[Caretaker Pattern]]",
            "id": "e150ab718f48429e0eab9e67f9e1369c"
          },
          {
            "type": "html",
            "text": " [[Decorator Pattern]]",
            "id": "aa511dc2ede693b226d417f930c3ffda"
          },
          {
            "type": "html",
            "text": " [[Bridge Pattern]]",
            "id": "d15810fd14e36bc33fbc0ddadaafbe26"
          },
          {
            "type": "html",
            "text": " [[Remote Proxy]] (or [[Half Object Plus Protocol]] ?)",
            "id": "9953d7bf2dde2ec27c830ca60e48709e"
          },
          {
            "type": "html",
            "text": " [[Lazy Instantiation Pattern]]",
            "id": "5d051279a594cf6c6cfc33ce30f07859"
          },
          {
            "type": "html",
            "text": " [[Tomb Stone]]",
            "id": "7df2d8c9b2e274191bcf74c37a8a2505"
          },
          {
            "type": "html",
            "text": " [[Envelope Letter]]",
            "id": "3d847889d6ad21ca4d03ed16b0d4b4f9"
          },
          {
            "type": "html",
            "text": " [[Role Object]]",
            "id": "a74d0ed280f6e6c739c8b5a80feaee03"
          },
          {
            "type": "html",
            "text": " [[Pimpl Idiom]]",
            "id": "acba8a52a4b733575ffb6f77b1fdc6cb"
          },
          {
            "type": "html",
            "text": "\nIn some cases, the handle and body have a fixed one-to-one relationship; in others the body associated with the handle might change.",
            "id": "b29baf9e21d3cedff4a3094297be9640"
          },
          {
            "type": "html",
            "text": "\nA [[Handle Body Pattern]] can be treated as a function that maps from the body to the handle. These functions can be composed. In general, the order of composition matters. This is obvious when the handle presents a different interface to the body (for example in [[Adapter Pattern]]), but it is also true when the interfaces are the same or very similar.",
            "id": "5175c30a706ecfda034f64344fa712b5"
          },
          {
            "type": "html",
            "text": "\nFor example, consider [[Facet Pattern]] composed with [[Remote Proxy]] -- if [[Facet Pattern]] is applied first, then it is the remote machine that is responsible for enforcing the facet. If [[Remote Proxy]] is applied first, then the client machine is responsible for enforcing the facet. The latter option is more likely to allow the facet restriction to be bypassed.",
            "id": "3877f1984dbb8ca98a8538e6bb04f2ee"
          },
          {
            "type": "html",
            "text": "\nConstruction of the various forms of [[Handle Body Pattern]] is greatly enhanced by a good macro processor or a language with meta-capabilities (which can automate much of the typing).  However, even a language such as [[Cee Plus Plus]] can implement these (many [[Design Patterns]] are designed to get around C++ limitations), you just have to do more typing.  :)",
            "id": "07fb31a8fa863ac8572fba3ffeb40f7b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d4daa4ba9bbba84694961d2b30c5c78"
          },
          {
            "type": "html",
            "text": "See [[Handle Body Pattern Problem]] for discussion of problems with this pattern.",
            "id": "137bd8536506c477a276874d6a691400"
          },
          {
            "type": "html",
            "text": "\nAlso known as [[Wrapper Object]]",
            "id": "8197c620dbe15d012cb5a59b404e80f2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d4daa4ba9bbba84694961d2b30c5c78"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]]",
            "id": "5a5e46d3c7ba06e67722eafd39adc13d"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?HandleBodyPattern c2.com]",
            "id": "444c0ed2c0f02b4ab094ad84f86fba9d"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "pattern.sfw.c2.com",
      "date": 1709986943450
    }
  ]
}