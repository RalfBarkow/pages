{
  "title": "String Template Programs",
  "story": [
    {
      "type": "paragraph",
      "id": "fbb2338e1f34e33e",
      "text": "The final level of the document calculus in the string domain is the string template program calculus DString TProg . String template literals reduce the [[Notation]] required to concatenate strings and expressions. However, complex templates often involve interpolating expressions which contain nested templates, requiring additional content delimiters. For example, compare the string template literal in Javascript […] with the string template program in Jinja […]:"
    },
    {
      "type": "code",
      "id": "1c2b5032dc667ad1",
      "text": "// Javascript \nvar l = [1, 2, 3]\n\n\nexport default l.map(n => `* ${n} + 1 = ${n + 1}`) \n     .join(\"\\n\")\n"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "1af2f4f212123a1b",
      "text": "//localhost:3000/assets/pages/js-snippet-template/importjs.html\n"
    },
    {
      "type": "pagefold",
      "id": "fcf748bae0bcd2de",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "4367c0bf2fb48dbf",
      "text": "CRICHTON, Will and KRISHNAMURTHI, Shriram, 2024. A Core Calculus for Documents: Or, Lambda: The Ultimate Document. Proceedings of the ACM on Programming Languages. 5 January 2024. Vol. 8, no. POPL, p. 23:667-23:694. DOI 10.1145/3632865, p. 23:9."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "String Template Programs",
        "story": []
      },
      "date": 1711446512091
    },
    {
      "item": {
        "type": "factory",
        "id": "1c2b5032dc667ad1"
      },
      "id": "1c2b5032dc667ad1",
      "type": "add",
      "date": 1711446513391
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "String Template Programs"
      },
      "date": 1711446518623
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n 3 ￿￿￿ 4 Examples of addition include: 5 ${ 6 l.map(n => ￿* ${n} +1=${n + 1}￿) 7 .join( \\n ) 8} 9 ￿￿￿"
      },
      "date": 1711446539549
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n${ \n6 l.map(n => ￿* ${n} +1=${n + 1}￿) 7 .join( \\n ) 8} 9 ￿￿￿"
      },
      "date": 1711446560186
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n${ \n    l.map(n => ￿* ${n} +1=${n + 1}￿) 7 .join( \\n ) 8} 9 ￿￿￿"
      },
      "date": 1711446571625
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n${ \n    l.map(n => `* ${n} +1=${n + 1}`) \n    .join( \\n ) 8} 9 ￿￿￿"
      },
      "date": 1711446590845
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n${ \n    l.map(n => `* ${n} +1=${n + 1}`) \n     .join( \\n )\n  } 9 ￿￿￿"
      },
      "date": 1711446612054
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n${ \n    l.map(n => `* ${n} +1=${n + 1}`) \n     .join( \\n )\n}"
      },
      "date": 1711446624467
    },
    {
      "id": "caa626ac93aa7d4c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "caa626ac93aa7d4c",
        "text": "In the frame below we can view the results."
      },
      "after": "1c2b5032dc667ad1",
      "attribution": {
        "page": "String Template Literals"
      },
      "date": 1711446635151
    },
    {
      "id": "1af2f4f212123a1b",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "1af2f4f212123a1b",
        "text": "//localhost:3000/assets/pages/js-snippet-template/importjs.html\n"
      },
      "after": "caa626ac93aa7d4c",
      "attribution": {
        "page": "String Template Literals"
      },
      "date": 1711446637266
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n${ \n    l.map(n => `* ${n} + 1 = ${n + 1}`) \n     .join( \\n )\n}"
      },
      "date": 1711446672832
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n${ \n    l.map(n => `* ${n} + 1 = ${n + 1}`) \n     .join(\"\\n\")\n}"
      },
      "date": 1711446703533
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n\n    l.map(n => `* ${n} + 1 = ${n + 1}`) \n     .join(\"\\n\")\n"
      },
      "date": 1711446754877
    },
    {
      "type": "edit",
      "id": "1c2b5032dc667ad1",
      "item": {
        "type": "code",
        "id": "1c2b5032dc667ad1",
        "text": "// Javascript \nvar l = [1, 2, 3]\n\n\nexport default l.map(n => `* ${n} + 1 = ${n + 1}`) \n     .join(\"\\n\")\n"
      },
      "date": 1711446774851
    },
    {
      "id": "fcf748bae0bcd2de",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "fcf748bae0bcd2de",
        "text": "~"
      },
      "after": "1af2f4f212123a1b",
      "attribution": {
        "page": "String Template Literals"
      },
      "date": 1711446850418
    },
    {
      "id": "4367c0bf2fb48dbf",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4367c0bf2fb48dbf",
        "text": "CRICHTON, Will and KRISHNAMURTHI, Shriram, 2024. A Core Calculus for Documents: Or, Lambda: The Ultimate Document. Proceedings of the ACM on Programming Languages. 5 January 2024. Vol. 8, no. POPL, p. 23:667-23:694. DOI 10.1145/3632865. \nPassive documents and active programs now widely comingle. Document languages include Turing-complete programming elements, and programming languages include sophisticated document notations. However, there are no formal foundations that model these languages. This matters because the [[Interaction Between Document and Program]] can be subtle and error-prone. In this paper we describe several such problems, then taxonomize and formalize document languages as levels of a document calculus. We employ the calculus as a foundation for implementing complex features such as reactivity, as well as for proving theorems about the boundary of content and computation. We intend for the document calculus to provide a theoretical basis for new document languages, and to assist designers in cleaning up the unsavory corners of existing languages.\n"
      },
      "after": "1af2f4f212123a1b",
      "attribution": {
        "page": "String Template Literals"
      },
      "date": 1711446856043
    },
    {
      "type": "edit",
      "id": "4367c0bf2fb48dbf",
      "item": {
        "type": "paragraph",
        "id": "4367c0bf2fb48dbf",
        "text": "CRICHTON, Will and KRISHNAMURTHI, Shriram, 2024. A Core Calculus for Documents: Or, Lambda: The Ultimate Document. Proceedings of the ACM on Programming Languages. 5 January 2024. Vol. 8, no. POPL, p. 23:667-23:694. DOI 10.1145/3632865, p. 23:9."
      },
      "date": 1711446870285
    },
    {
      "id": "fcf748bae0bcd2de",
      "type": "move",
      "order": [
        "1c2b5032dc667ad1",
        "caa626ac93aa7d4c",
        "1af2f4f212123a1b",
        "fcf748bae0bcd2de",
        "4367c0bf2fb48dbf"
      ],
      "date": 1711446883990
    },
    {
      "item": {
        "type": "factory",
        "id": "fbb2338e1f34e33e"
      },
      "id": "fbb2338e1f34e33e",
      "type": "add",
      "after": "4367c0bf2fb48dbf",
      "date": 1711446900024
    },
    {
      "id": "fbb2338e1f34e33e",
      "type": "move",
      "order": [
        "fbb2338e1f34e33e",
        "1c2b5032dc667ad1",
        "caa626ac93aa7d4c",
        "1af2f4f212123a1b",
        "fcf748bae0bcd2de",
        "4367c0bf2fb48dbf"
      ],
      "date": 1711446903225
    },
    {
      "type": "edit",
      "id": "fbb2338e1f34e33e",
      "item": {
        "type": "paragraph",
        "id": "fbb2338e1f34e33e",
        "text": "The final level of the document calculus in the string domain is the string template program calculus DString TProg . String template literals reduce the notation required to concatenate strings and expressions. However, complex templates often involve interpolating expressions which contain nested templates, requiring additional content delimiters. For example, compare the string template literal in Javascript (left) with the string template program in Jinja (right):"
      },
      "date": 1711446920904
    },
    {
      "type": "edit",
      "id": "fbb2338e1f34e33e",
      "item": {
        "type": "paragraph",
        "id": "fbb2338e1f34e33e",
        "text": "The final level of the document calculus in the string domain is the string template program calculus DString TProg . String template literals reduce the notation required to concatenate strings and expressions. However, complex templates often involve interpolating expressions which contain nested templates, requiring additional content delimiters. For example, compare the string template literal in Javascript […] with the string template program in Jinja […]:"
      },
      "date": 1711446981726
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711468510207
    },
    {
      "type": "edit",
      "id": "fbb2338e1f34e33e",
      "item": {
        "type": "paragraph",
        "id": "fbb2338e1f34e33e",
        "text": "The final level of the document calculus in the string domain is the string template program calculus DString TProg . String template literals reduce the [[Notation]] required to concatenate strings and expressions. However, complex templates often involve interpolating expressions which contain nested templates, requiring additional content delimiters. For example, compare the string template literal in Javascript […] with the string template program in Jinja […]:"
      },
      "date": 1711468570337
    }
  ]
}