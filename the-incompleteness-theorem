{
  "title": "The Incompleteness Theorem",
  "story": [
    {
      "type": "paragraph",
      "id": "6b0570baf1978698",
      "text": "Gödel’s theorem had made it clear that no single formal system could be devised that would en- able all mathematical truths, even those expressible in terms of basic operations on the natural numbers, to be provided with a formal proof."
    },
    {
      "type": "paragraph",
      "id": "ba69b2110ef7153b",
      "text": "Gödel’s Proof"
    },
    {
      "type": "paragraph",
      "id": "37548849da82d623",
      "text": "Gödel proceeded to define a code by means of which each expression of a formal system would have its own natural number, what has come to be called its Gödel number, associated with it."
    },
    {
      "type": "paragraph",
      "id": "465521e3a8ba29ea",
      "text": "Working with a particular formal system loosely based on that of Whitehead and Russell and exploiting [the idea that expressions of the system that represent propositions about the natural numbers might be seen by someone privy to the code as also making assertions, incidentally as it were, about the system itself.]"
    },
    {
      "type": "paragraph",
      "id": "b3af37a215840145",
      "text": "Gödel showed how to con- struct a remarkable expression of the system we may designate as U."
    },
    {
      "type": "paragraph",
      "id": "1b9cce86e526517a",
      "text": "There are true statements unprovable in the given system."
    },
    {
      "type": "paragraph",
      "id": "759994ab0bb2bc40",
      "text": "We write N = {0,1,2,...} for the set of natural numbers. A function f : N → N is called computable if there is an algorithm that given an x ∈ N will compute f (x). "
    },
    {
      "type": "paragraph",
      "id": "bf41409a1d90690b",
      "text": "Here the notion of algorithm is assumed to involve no restriction as to the amount of time or space required to complete a computation. "
    },
    {
      "type": "paragraph",
      "id": "9bcd90bb3c95c155",
      "text": "Finally a set S ⊆ N is called computable if its characteristic function\nCS (x) = {1 if x [something] S... is computable."
    },
    {
      "type": "paragraph",
      "id": "73582d19b0446845",
      "text": "Computability theory provides a perspective from which it can be seen that incompleteness is a pervasive fundamental property not dependent on a trifling trick."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "The Incompleteness Theorem",
        "story": []
      },
      "date": 1656174503068
    },
    {
      "item": {
        "type": "paragraph",
        "id": "6b0570baf1978698",
        "text": "Gödel’s theorem had made it clear that no single formal system could be devised that would en- able all mathematical truths, even those expressible in terms of basic operations on the natural numbers, to be provided with a formal proof."
      },
      "id": "6b0570baf1978698",
      "type": "add",
      "date": 1656174652525
    },
    {
      "type": "edit",
      "id": "6b0570baf1978698",
      "item": {
        "type": "paragraph",
        "id": "6b0570baf1978698",
        "text": "Gödel’s theorem had made it clear that no single formal system could be devised that would en- able all mathematical truths, even those expressible in terms of basic operations on the natural numbers, to be provided with a formal proof."
      },
      "date": 1656174654637
    },
    {
      "type": "edit",
      "id": "6b0570baf1978698",
      "item": {
        "type": "paragraph",
        "id": "6b0570baf1978698",
        "text": "Gödel’s theorem had made it clear that no single formal system could be devised that would en- able all mathematical truths, even those expressible in terms of basic operations on the natural numbers, to be provided with a formal proof."
      },
      "date": 1656174666594
    },
    {
      "type": "add",
      "id": "ba69b2110ef7153b",
      "item": {
        "type": "paragraph",
        "id": "ba69b2110ef7153b",
        "text": "Gödel’s Proof"
      },
      "after": "6b0570baf1978698",
      "date": 1656175342642
    },
    {
      "type": "add",
      "id": "37548849da82d623",
      "item": {
        "type": "paragraph",
        "id": "37548849da82d623",
        "text": "Gödel proceeded to define a code by means of which each expression of a formal system would have its own natural number, what has come to be called its Gödel number, associated with it."
      },
      "after": "ba69b2110ef7153b",
      "date": 1656175437869
    },
    {
      "type": "fork",
      "date": 1656175475871
    },
    {
      "item": {
        "type": "factory",
        "id": "465521e3a8ba29ea"
      },
      "id": "465521e3a8ba29ea",
      "type": "add",
      "after": "37548849da82d623",
      "date": 1656175477141
    },
    {
      "type": "edit",
      "id": "465521e3a8ba29ea",
      "item": {
        "type": "paragraph",
        "id": "465521e3a8ba29ea",
        "text": "Working with a particular formal system loosely based on that of Whitehead and Russell and exploiting [the idea that"
      },
      "date": 1656175498848
    },
    {
      "type": "edit",
      "id": "465521e3a8ba29ea",
      "item": {
        "type": "paragraph",
        "id": "465521e3a8ba29ea",
        "text": "Working with a particular formal system loosely based on that of Whitehead and Russell and exploiting [the idea that expressions of the system that represent propositions about the natural numbers might be seen by someone privy to the code as also making assertions, incidentally as it were, about the system it- self.]"
      },
      "date": 1656175536193
    },
    {
      "type": "edit",
      "id": "465521e3a8ba29ea",
      "item": {
        "type": "paragraph",
        "id": "465521e3a8ba29ea",
        "text": "Working with a particular formal system loosely based on that of Whitehead and Russell and exploiting [the idea that expressions of the system that represent propositions about the natural numbers might be seen by someone privy to the code as also making assertions, incidentally as it were, about the system itself.]"
      },
      "date": 1656175543147
    },
    {
      "item": {
        "type": "factory",
        "id": "b3af37a215840145"
      },
      "id": "b3af37a215840145",
      "type": "add",
      "after": "465521e3a8ba29ea",
      "date": 1656175780805
    },
    {
      "type": "edit",
      "id": "b3af37a215840145",
      "item": {
        "type": "paragraph",
        "id": "b3af37a215840145",
        "text": "Gödel showed how to con- struct a remarkable expression of the system we"
      },
      "date": 1656175783917
    },
    {
      "type": "edit",
      "id": "b3af37a215840145",
      "item": {
        "type": "paragraph",
        "id": "b3af37a215840145",
        "text": "Gödel showed how to con- struct a remarkable expression of the system we may designate as U."
      },
      "date": 1656175792349
    },
    {
      "item": {
        "type": "factory",
        "id": "1b9cce86e526517a"
      },
      "id": "1b9cce86e526517a",
      "type": "add",
      "after": "b3af37a215840145",
      "date": 1656175844128
    },
    {
      "type": "edit",
      "id": "1b9cce86e526517a",
      "item": {
        "type": "paragraph",
        "id": "1b9cce86e526517a",
        "text": "There are true statements unprovable in the given system."
      },
      "date": 1656175848038
    },
    {
      "item": {
        "type": "factory",
        "id": "759994ab0bb2bc40"
      },
      "id": "759994ab0bb2bc40",
      "type": "add",
      "after": "1b9cce86e526517a",
      "date": 1656175926866
    },
    {
      "type": "edit",
      "id": "759994ab0bb2bc40",
      "item": {
        "type": "paragraph",
        "id": "759994ab0bb2bc40",
        "text": "We write N = {0,1,2,...} for the set of natural numbers. A function f : N → N is called computable if there is an algorithm that given an x ∈ N will com- pute f (x). Here the notion of algorithm is assumed to involve no restriction as to the amount of time\n2\nTheorem. There is a computable function f whose range\nK = {f(0),f(1),f(2),...}\n3\n1Detailed proofs can be found in a number of textbooks, for example [3]. In addition Gödel’s clear and meticulous original exposition [8] still repays study.\n2 Computability theory has provided a number of precise characterizations to replace this heuristic explanation, and they have all been proved equivalent to one another.\n3 See for example [1]. Computability theory is also known as recursion theory and used to also be called recursive function theory. Computable functions are also called re- cursive. Sets that are the range of a computable function as well as the empty set are called recursively enumerable, or more recently, computably enumerable, or listable.\nComputability theory provides a perspective from which it can be seen that incompleteness is a pervasive fundamental property not dependent on a trifling trick. From this point of view the for- mal systems studied by logicians are simply com- putable functions that spew out theorems (more precisely, Gödel numbers of theorems). Such sys- tems are usually given in terms of a set of axioms and rules of inference. One can then imagine an al- gorithm that begins with the axioms and proceeds by iteratively applying the rules of inference.\nTo obtain a form of the incompleteness theorem\nlet us begin with the set K whose existence is given\nby the theorem above, and consider propositions\nof the form n ̸∈ K where n is a fixed natural num-\nber. We can suppose that, in a particular formal sys-\ntem these propositions are each represented by a\ncorresponding string of symbols we may write as\nPn. We need only assume that there is an algo-\n4\nWhenever ⊢F Pn for a particular n, it will also be the case that n ̸∈ K.\nSince Pn is intended to stand for the proposition n ̸∈ K, soundness simply means that the provable statements are true.\nIncompleteness Theorem. Let F be a sound formal system. Then there is a number n0 such that n0 ̸∈ K, but it is not the case that ⊢F Pn0.\nAgain, we have a true sentence that is not prov- able. Note that we only succeed in changing the value of the particular number n0 as we attempt to create stronger and stronger formal systems that can prove more and more.\nProof of the Incompleteness Theorem. Sup- pose that there is no such n0 . Then we would have:\n⊢F Pn for a particular n, if and only if n ̸∈ K.\nRecall that K is the range of the computable func- tion f. Then the following would be an algorithm for computing CK(n) for a given value of n, con- tradicting the fact that K is not computable: Begin generating the theorems of F and at the same time begin computing the successive values f(0),f(1),f(2),.... If n ∈ K, then n will eventually show up in the list of values of f so CK(n) = 1. Oth- erwise, Pn will eventually show up in the theorem listofFsothatCK(n)=0. 􏰂\n4 In a traditional formal system, for a given number n , Pn will be obtained by replacing, in a certain specific formula, a symbol for a variable by a “numeral” representing the number n .\nrectness of his conclusions.\nof paradox hung over the matter; it seemed hard to believe that a trick so close to puzzles usually offered for amusement could really be used to demonstrate something profound about mathe- matics.\nor space required to complete a computation. nally a set S ⊆ N is called computable if its char- acteristic function\nCS (x) = {1"
      },
      "date": 1656175943781
    },
    {
      "type": "add",
      "id": "b79b81fba813086e",
      "item": {
        "type": "paragraph",
        "id": "b79b81fba813086e",
        "text": "is computable."
      },
      "after": "759994ab0bb2bc40",
      "date": 1656175960450
    },
    {
      "type": "edit",
      "id": "759994ab0bb2bc40",
      "item": {
        "type": "paragraph",
        "id": "759994ab0bb2bc40",
        "text": "We write N = {0,1,2,...} for the set of natural numbers. A function f : N → N is called computable if there is an algorithm that given an x ∈ N will compute f (x). Here the notion of algorithm is assumed to involve no restriction as to the amount of time or space required to complete a computation. Finally a set S ⊆ N is called computable if its characteristic function\nCS (x) = {1 if x [something] S"
      },
      "date": 1656176036221
    },
    {
      "type": "edit",
      "id": "759994ab0bb2bc40",
      "item": {
        "type": "paragraph",
        "id": "759994ab0bb2bc40",
        "text": "We write N = {0,1,2,...} for the set of natural numbers. A function f : N → N is called computable if there is an algorithm that given an x ∈ N will compute f (x). Here the notion of algorithm is assumed to involve no restriction as to the amount of time or space required to complete a computation. Finally a set S ⊆ N is called computable if its characteristic function\nCS (x) = {1 if x [something] S..."
      },
      "date": 1656176049104
    },
    {
      "type": "edit",
      "id": "759994ab0bb2bc40",
      "item": {
        "type": "paragraph",
        "id": "759994ab0bb2bc40",
        "text": "We write N = {0,1,2,...} for the set of natural numbers. A function f : N → N is called computable if there is an algorithm that given an x ∈ N will compute f (x). Here the notion of algorithm is assumed to involve no restriction as to the amount of time or space required to complete a computation. Finally a set S ⊆ N is called computable if its characteristic function\nCS (x) = {1 if x [something] S... is computable"
      },
      "date": 1656176055706
    },
    {
      "type": "edit",
      "id": "759994ab0bb2bc40",
      "item": {
        "type": "paragraph",
        "id": "759994ab0bb2bc40",
        "text": "We write N = {0,1,2,...} for the set of natural numbers. A function f : N → N is called computable if there is an algorithm that given an x ∈ N will compute f (x). "
      },
      "date": 1656176088007
    },
    {
      "type": "add",
      "id": "bf41409a1d90690b",
      "item": {
        "type": "paragraph",
        "id": "bf41409a1d90690b",
        "text": "Here the notion of algorithm is assumed to involve no restriction as to the amount of time or space required to complete a computation. "
      },
      "after": "759994ab0bb2bc40",
      "date": 1656176092390
    },
    {
      "type": "add",
      "id": "9bcd90bb3c95c155",
      "item": {
        "type": "paragraph",
        "id": "9bcd90bb3c95c155",
        "text": "Finally a set S ⊆ N is called computable if its characteristic function\nCS (x) = {1 if x [something] S... is computable"
      },
      "after": "bf41409a1d90690b",
      "date": 1656176093908
    },
    {
      "type": "remove",
      "id": "b79b81fba813086e",
      "date": 1656176130344
    },
    {
      "type": "edit",
      "id": "9bcd90bb3c95c155",
      "item": {
        "type": "paragraph",
        "id": "9bcd90bb3c95c155",
        "text": "Finally a set S ⊆ N is called computable if its characteristic function\nCS (x) = {1 if x [something] S... is computable."
      },
      "date": 1656176158094
    },
    {
      "type": "add",
      "id": "73582d19b0446845",
      "item": {
        "type": "paragraph",
        "id": "73582d19b0446845",
        "text": "Computability theory provides a perspective from which it can be seen that incompleteness is a pervasive fundamental property not dependent on a trifling trick."
      },
      "after": "9bcd90bb3c95c155",
      "date": 1656176159454
    },
    {
      "type": "fork",
      "site": "kavita.becoming.ustawi.wiki",
      "date": 1656176437340
    }
  ]
}