{
  "journal": [
    {
      "item": {
        "title": "Offline-First Architecture",
        "story": ""
      },
      "type": "create",
      "date": 1705254073619
    },
    {
      "type": "add",
      "item": {
        "id": "4473cfb53b01861d",
        "type": "factory"
      },
      "date": 1705254083142,
      "id": "4473cfb53b01861d"
    },
    {
      "type": "edit",
      "item": {
        "type": "markdown",
        "id": "4473cfb53b01861d",
        "text": "\"Offline First\" is a design approach in software development where applications are designed to function effectively even without an Internet connection. In this architecture, the primary consideration is how the application will work offline; online capabilities are treated as an enhancement. This approach is particularly relevant in mobile application development but can also apply to web applications and other software systems.\n\n### Key Characteristics and Principles of Offline First Architecture:\n\n1. **Local Data Storage**: The application stores data locally on the device so that users can access and interact with their data even when they are offline. When an Internet connection is available, the local data can be synchronized with a remote server.\n\n2. **Data Synchronization**: Mechanisms are put in place for syncing local data with a remote server. This synchronization should handle conflicts (e.g., when the same data has been changed both locally and remotely) and might involve strategies like \"last writer wins\" or more complex conflict resolution.\n\n3. **User Experience**: Offline First design prioritizes a seamless user experience, ensuring that users can perform critical actions without an internet connection. The application should behave consistently regardless of network availability.\n\n4. **Network State Awareness**: The application is aware of its online or offline state and can respond accordingly. It might adjust its functionality or provide feedback to the user based on the current network state.\n\n5. **Efficient Data Transfer**: When the application does synchronize or communicate with a server, it should do so efficiently, understanding that network bandwidth might be limited or costly.\n\n6. **Progressive Enhancement**: The application should function at its core offline, with additional features and enhancements available when online.\n\n### Advantages:\n\n- **Improved User Experience**: Users are not hindered by poor or absent network connections.\n- **Reliability**: The application is more reliable since it doesn't depend solely on network availability.\n- **Performance**: Local data access is generally faster than remote server access.\n\n### Challenges:\n\n- **Data Synchronization**: Managing data synchronization, especially resolving conflicts, can be complex.\n- **Storage Limitations**: Local storage might be limited, especially on mobile devices.\n- **Development Complexity**: Designing for both offline and online states adds complexity to the development process.\n\n### Use Cases:\n\n- **Mobile Applications**: Especially useful in areas with poor or expensive Internet connectivity.\n- **Travel Apps**: For travelers who might not always have access to a network.\n- **Field Work**: For workers in remote or network-unreliable areas (e.g., disaster response, remote surveys).\n\n### Technologies:\n\nVarious technologies can support Offline First architecture, including:\n\n- **Local Databases**: Like SQLite, IndexedDB, or Realm for local data storage.\n- **Service Workers**: In web applications, for caching and managing network requests.\n- **Synchronization Libraries**: To assist with data syncing between local storage and the server.\n\nIn summary, Offline First is an approach that ensures applications are functional and useful even without an Internet connection, enhancing user experience and reliability. It requires careful planning and design, particularly around data management and synchronization."
      },
      "date": 1705254606666,
      "id": "4473cfb53b01861d"
    },
    {
      "type": "edit",
      "item": {
        "text": "**Offline First** is a design approach in software development where applications are designed to function effectively even without an Internet connection. In this architecture, the primary consideration is how the application will work offline; online capabilities are treated as an enhancement. This approach is particularly relevant in mobile application development but can also apply to web applications and other software systems.",
        "id": "4473cfb53b01861d",
        "type": "markdown"
      },
      "date": 1705254623532,
      "id": "4473cfb53b01861d"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1eda5270a388af2a",
        "text": "### Key Characteristics and Principles of Offline First Architecture:\n\n1. **Local Data Storage**: The application stores data locally on the device so that users can access and interact with their data even when they are offline. When an Internet connection is available, the local data can be synchronized with a remote server.\n\n2. **Data Synchronization**: Mechanisms are put in place for syncing local data with a remote server. This synchronization should handle conflicts (e.g., when the same data has been changed both locally and remotely) and might involve strategies like \"last writer wins\" or more complex conflict resolution.\n\n3. **User Experience**: Offline First design prioritizes a seamless user experience, ensuring that users can perform critical actions without an internet connection. The application should behave consistently regardless of network availability.\n\n4. **Network State Awareness**: The application is aware of its online or offline state and can respond accordingly. It might adjust its functionality or provide feedback to the user based on the current network state.\n\n5. **Efficient Data Transfer**: When the application does synchronize or communicate with a server, it should do so efficiently, understanding that network bandwidth might be limited or costly.\n\n6. **Progressive Enhancement**: The application should function at its core offline, with additional features and enhancements available when online.\n\n### Advantages:\n\n- **Improved User Experience**: Users are not hindered by poor or absent network connections.\n- **Reliability**: The application is more reliable since it doesn't depend solely on network availability.\n- **Performance**: Local data access is generally faster than remote server access.\n\n### Challenges:\n\n- **Data Synchronization**: Managing data synchronization, especially resolving conflicts, can be complex.\n- **Storage Limitations**: Local storage might be limited, especially on mobile devices.\n- **Development Complexity**: Designing for both offline and online states adds complexity to the development process.\n\n### Use Cases:\n\n- **Mobile Applications**: Especially useful in areas with poor or expensive Internet connectivity.\n- **Travel Apps**: For travelers who might not always have access to a network.\n- **Field Work**: For workers in remote or network-unreliable areas (e.g., disaster response, remote surveys).\n\n### Technologies:\n\nVarious technologies can support Offline First architecture, including:\n\n- **Local Databases**: Like SQLite, IndexedDB, or Realm for local data storage.\n- **Service Workers**: In web applications, for caching and managing network requests.\n- **Synchronization Libraries**: To assist with data syncing between local storage and the server.\n\nIn summary, Offline First is an approach that ensures applications are functional and useful even without an Internet connection, enhancing user experience and reliability. It requires careful planning and design, particularly around data management and synchronization."
      },
      "date": 1705254624072,
      "id": "1eda5270a388af2a"
    },
    {
      "type": "edit",
      "item": {
        "text": "### Key Characteristics",
        "id": "1eda5270a388af2a",
        "type": "markdown"
      },
      "date": 1705254641714,
      "id": "1eda5270a388af2a"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "a5b3167d842d5880",
        "text": "- **Local Data Storage**: The application stores data locally on the device so that users can access and interact with their data even when they are offline. When an Internet connection is available, the local data can be synchronized with a remote server."
      },
      "date": 1705254655057,
      "id": "a5b3167d842d5880"
    },
    {
      "type": "add",
      "item": {
        "text": "- **Data Synchronization**: Mechanisms are put in place for syncing local data with a remote server. This synchronization should handle conflicts (e.g., when the same data has been changed both locally and remotely) and might involve strategies like \"last writer wins\" or more complex conflict resolution.",
        "id": "dd3b4bf44c7edfea",
        "type": "markdown"
      },
      "date": 1705254662648,
      "id": "dd3b4bf44c7edfea"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "44e8e08f4f3a2906",
        "text": "- **User Experience**: Offline First design prioritizes a seamless user experience, ensuring that users can perform critical actions without an internet connection. The application should behave consistently regardless of network availability."
      },
      "date": 1705254671886,
      "id": "44e8e08f4f3a2906"
    },
    {
      "type": "add",
      "item": {
        "text": "- **Network State Awareness**: The application is aware of its online or offline state and can respond accordingly. It might adjust its functionality or provide feedback to the user based on the current network state.",
        "id": "47a8ac785ab0dd9c",
        "type": "markdown"
      },
      "date": 1705254677936,
      "id": "47a8ac785ab0dd9c"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1b6e7cc26621e796",
        "text": "- **Efficient Data Transfer**: When the application does synchronize or communicate with a server, it should do so efficiently, understanding that network bandwidth might be limited or costly."
      },
      "date": 1705254682360,
      "id": "1b6e7cc26621e796"
    },
    {
      "type": "add",
      "item": {
        "text": "- **Progressive Enhancement**: The application should function at its core offline, with additional features and enhancements available when online.",
        "id": "226c089c6c77d11d",
        "type": "markdown"
      },
      "date": 1705254687734,
      "id": "226c089c6c77d11d"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c802572f323c11a9",
        "text": "### Advantages:\n\n- **Improved User Experience**: Users are not hindered by poor or absent network connections.\n- **Reliability**: The application is more reliable since it doesn't depend solely on network availability.\n- **Performance**: Local data access is generally faster than remote server access.\n\n### Challenges:\n\n- **Data Synchronization**: Managing data synchronization, especially resolving conflicts, can be complex.\n- **Storage Limitations**: Local storage might be limited, especially on mobile devices.\n- **Development Complexity**: Designing for both offline and online states adds complexity to the development process.\n\n### Use Cases:\n\n- **Mobile Applications**: Especially useful in areas with poor or expensive Internet connectivity.\n- **Travel Apps**: For travelers who might not always have access to a network.\n- **Field Work**: For workers in remote or network-unreliable areas (e.g., disaster response, remote surveys).\n\n### Technologies:\n\nVarious technologies can support Offline First architecture, including:\n\n- **Local Databases**: Like SQLite, IndexedDB, or Realm for local data storage.\n- **Service Workers**: In web applications, for caching and managing network requests.\n- **Synchronization Libraries**: To assist with data syncing between local storage and the server.\n\nIn summary, Offline First is an approach that ensures applications are functional and useful even without an Internet connection, enhancing user experience and reliability. It requires careful planning and design, particularly around data management and synchronization."
      },
      "date": 1705254688613,
      "id": "c802572f323c11a9"
    },
    {
      "type": "edit",
      "item": {
        "text": "### Advantages:\n\n- **Improved User Experience**: Users are not hindered by poor or absent network connections.\n- **Reliability**: The application is more reliable since it doesn't depend solely on network availability.\n- **Performance**: Local data access is generally faster than remote server access.",
        "id": "c802572f323c11a9",
        "type": "markdown"
      },
      "date": 1705254698900,
      "id": "c802572f323c11a9"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "05a70bdc0975ca1b",
        "text": "### Challenges:\n\n- **Data Synchronization**: Managing data synchronization, especially resolving conflicts, can be complex.\n- **Storage Limitations**: Local storage might be limited, especially on mobile devices.\n- **Development Complexity**: Designing for both offline and online states adds complexity to the development process."
      },
      "date": 1705254705534,
      "id": "05a70bdc0975ca1b"
    },
    {
      "type": "add",
      "item": {
        "text": "### Use Cases:\n\n- **Mobile Applications**: Especially useful in areas with poor or expensive Internet connectivity.\n- **Travel Apps**: For travelers who might not always have access to a network.\n- **Field Work**: For workers in remote or network-unreliable areas (e.g., disaster response, remote surveys).",
        "id": "7d38443c9881379b",
        "type": "markdown"
      },
      "date": 1705254712306,
      "id": "7d38443c9881379b"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c5abe130da80a561",
        "text": "### Technologies:\n\nVarious technologies can support Offline First architecture, including:\n\n- **Local Databases**: Like SQLite, IndexedDB, or Realm for local data storage.\n- **Service Workers**: In web applications, for caching and managing network requests.\n- **Synchronization Libraries**: To assist with data syncing between local storage and the server.\n\nIn summary, Offline First is an approach that ensures applications are functional and useful even without an Internet connection, enhancing user experience and reliability. It requires careful planning and design, particularly around data management and synchronization."
      },
      "date": 1705254712853,
      "id": "c5abe130da80a561"
    },
    {
      "type": "edit",
      "item": {
        "text": "**Offline First** is a design approach in software development where applications are designed to function effectively even without an Internet connection.",
        "id": "4473cfb53b01861d",
        "type": "markdown"
      },
      "date": 1705315079016,
      "id": "4473cfb53b01861d"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "027b6353e6e0d294",
        "text": "In this architecture, the primary consideration is how the application will work offline; online capabilities are treated as an enhancement. This approach is particularly relevant in mobile application development but can also apply to web applications and other software systems."
      },
      "date": 1705315080811,
      "id": "027b6353e6e0d294"
    },
    {
      "type": "add",
      "item": {
        "text": "We are exploring this architecture with regard to the experience of [[writing in wiki]]. Rather than prioriting the experience of writing directly onto a publically available web-site, we expect the majority of authoring to take place offline - on a mobile phone, or at locations with poor or non-existant internet connection. Wiki content would then be shared through forking that locally authored content to a public location.",
        "id": "526f8b80a043b973",
        "type": "markdown"
      },
      "date": 1705315231147,
      "id": "526f8b80a043b973"
    },
    {
      "type": "edit",
      "item": {
        "type": "markdown",
        "id": "526f8b80a043b973",
        "text": "We are exploring this architecture with regard to the experience of [[writing in wiki]]. Rather than prioriting the experience of writing directly onto a publically available web-site, we expect the majority of authoring to take place offline."
      },
      "date": 1705315250744,
      "id": "526f8b80a043b973"
    },
    {
      "type": "add",
      "item": {
        "text": "We expect the majority of content to be authored on a mobile phone (or on a laptop or tablet), at locations with poor or non-existant internet connection. Wiki content would then be shared through forking that locally authored content to a public location.",
        "id": "0ef4675b5c2e57ef",
        "type": "markdown"
      },
      "date": 1705315311245,
      "id": "0ef4675b5c2e57ef"
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "940e0da84c1dea73",
        "text": "# Forking to Publish"
      },
      "date": 1705315324980,
      "id": "940e0da84c1dea73"
    },
    {
      "type": "add",
      "item": {
        "text": "This gives a new dimension to the action and concept of \"forking\". [[Forking]] in this context is an act of publishing. When content is of sufficient quality - when it is ready - you fork it - either to a new site in order to continue work - or to a public domain for others to read. The act of forking is therefore an act of publishing - either to yourself - or to another public.",
        "id": "6d6150374f75fff6",
        "type": "markdown"
      },
      "date": 1705315484799,
      "id": "6d6150374f75fff6"
    },
    {
      "type": "add",
      "item": {
        "id": "d2961ab6b420bbfd",
        "type": "factory"
      },
      "date": 1705316294029,
      "id": "d2961ab6b420bbfd"
    },
    {
      "type": "edit",
      "item": {
        "text": "Certainly! Here's a \"References\" section with links to relevant Wikipedia pages in the requested format:\n\n---\n\n# References\n\n- Offline First Architecture - [https://en.wikipedia.org/wiki/Offline_First wikipedia]\n- Internet - [https://en.wikipedia.org/wiki/Internet wikipedia]\n- Mobile Application Development - [https://en.wikipedia.org/wiki/Mobile_app_development wikipedia]\n- Web Applications - [https://en.wikipedia.org/wiki/Web_application wikipedia]\n- Local Data Storage - [https://en.wikipedia.org/wiki/Data_storage_device wikipedia]\n- Data Synchronization - [https://en.wikipedia.org/wiki/Data_synchronization wikipedia]\n- User Experience - [https://en.wikipedia.org/wiki/User_experience wikipedia]\n- Network State Awareness - [https://en.wikipedia.org/wiki/Computer_network wikipedia]\n- Efficient Data Transfer - [https://en.wikipedia.org/wiki/Data_transfer wikipedia]\n- Progressive Enhancement - [https://en.wikipedia.org/wiki/Progressive_enhancement wikipedia]\n- Improved User Experience - [https://en.wikipedia.org/wiki/User_experience wikipedia]\n- Reliability - [https://en.wikipedia.org/wiki/Reliability_engineering wikipedia]\n- Performance - [https://en.wikipedia.org/wiki/Computer_performance wikipedia]\n- Storage Limitations - [https://en.wikipedia.org/wiki/Computer_data_storage wikipedia]\n- Development Complexity - [https://en.wikipedia.org/wiki/Software_development_process wikipedia]\n- Travel Apps - [https://en.wikipedia.org/wiki/Travel_technology wikipedia]\n- Field Work - [https://en.wikipedia.org/wiki/Field_research wikipedia]\n\nThese references provide additional information on each of the topics and concepts discussed in the context of \"Offline First Architecture.\"",
        "id": "d2961ab6b420bbfd",
        "type": "markdown"
      },
      "date": 1705316296771,
      "id": "d2961ab6b420bbfd"
    },
    {
      "type": "edit",
      "item": {
        "type": "markdown",
        "id": "d2961ab6b420bbfd",
        "text": "# References\n\n- Offline First Architecture - [https://en.wikipedia.org/wiki/Offline_First wikipedia]\n- Internet - [https://en.wikipedia.org/wiki/Internet wikipedia]\n- Mobile Application Development - [https://en.wikipedia.org/wiki/Mobile_app_development wikipedia]\n- Web Applications - [https://en.wikipedia.org/wiki/Web_application wikipedia]\n- Local Data Storage - [https://en.wikipedia.org/wiki/Data_storage_device wikipedia]\n- Data Synchronization - [https://en.wikipedia.org/wiki/Data_synchronization wikipedia]\n- User Experience - [https://en.wikipedia.org/wiki/User_experience wikipedia]\n- Network State Awareness - [https://en.wikipedia.org/wiki/Computer_network wikipedia]\n- Efficient Data Transfer - [https://en.wikipedia.org/wiki/Data_transfer wikipedia]\n- Progressive Enhancement - [https://en.wikipedia.org/wiki/Progressive_enhancement wikipedia]\n- Improved User Experience - [https://en.wikipedia.org/wiki/User_experience wikipedia]\n- Reliability - [https://en.wikipedia.org/wiki/Reliability_engineering wikipedia]\n- Performance - [https://en.wikipedia.org/wiki/Computer_performance wikipedia]\n- Storage Limitations - [https://en.wikipedia.org/wiki/Computer_data_storage wikipedia]\n- Development Complexity - [https://en.wikipedia.org/wiki/Software_development_process wikipedia]\n- Travel Apps - [https://en.wikipedia.org/wiki/Travel_technology wikipedia]\n- Field Work - [https://en.wikipedia.org/wiki/Field_research wikipedia]"
      },
      "date": 1705316310814,
      "id": "d2961ab6b420bbfd"
    },
    {
      "type": "edit",
      "item": {
        "text": "# References\n\n- Offline First Architecture - [https://en.wikipedia.org/wiki/Offline_First wikipedia]\n- Mobile Application Development - [https://en.wikipedia.org/wiki/Mobile_app_development wikipedia]\n- Web Applications - [https://en.wikipedia.org/wiki/Web_application wikipedia]\n- Local Data Storage - [https://en.wikipedia.org/wiki/Data_storage_device wikipedia]\n- Data Synchronization - [https://en.wikipedia.org/wiki/Data_synchronization wikipedia]\n- User Experience - [https://en.wikipedia.org/wiki/User_experience wikipedia]\n- Network State Awareness - [https://en.wikipedia.org/wiki/Computer_network wikipedia]\n- Efficient Data Transfer - [https://en.wikipedia.org/wiki/Data_transfer wikipedia]\n- Progressive Enhancement - [https://en.wikipedia.org/wiki/Progressive_enhancement wikipedia]\n- Improved User Experience - [https://en.wikipedia.org/wiki/User_experience wikipedia]\n- Reliability - [https://en.wikipedia.org/wiki/Reliability_engineering wikipedia]\n- Performance - [https://en.wikipedia.org/wiki/Computer_performance wikipedia]\n- Storage Limitations - [https://en.wikipedia.org/wiki/Computer_data_storage wikipedia]\n- Development Complexity - [https://en.wikipedia.org/wiki/Software_development_process wikipedia]\n- Travel Apps - [https://en.wikipedia.org/wiki/Travel_technology wikipedia]\n- Field Work - [https://en.wikipedia.org/wiki/Field_research wikipedia]",
        "id": "d2961ab6b420bbfd",
        "type": "markdown"
      },
      "date": 1705316351414,
      "id": "d2961ab6b420bbfd"
    },
    {
      "type": "edit",
      "item": {
        "type": "markdown",
        "id": "d2961ab6b420bbfd",
        "text": "# References\n\n- Mobile Application Development - [https://en.wikipedia.org/wiki/Mobile_app_development wikipedia]\n- Web Applications - [https://en.wikipedia.org/wiki/Web_application wikipedia]\n- Data Synchronization - [https://en.wikipedia.org/wiki/Data_synchronization wikipedia]\n- User Experience - [https://en.wikipedia.org/wiki/User_experience wikipedia]\n- Computer Network (for Network State Awareness) - [https://en.wikipedia.org/wiki/Computer_network wikipedia]\n- Data Transfer (for Efficient Data Transfer) - [https://en.wikipedia.org/wiki/Data_transfer wikipedia]\n- Progressive Enhancement - [https://en.wikipedia.org/wiki/Progressive_enhancement wikipedia]\n- Reliability Engineering (for Reliability) - [https://en.wikipedia.org/wiki/Reliability_engineering wikipedia]\n- Computer Performance - [https://en.wikipedia.org/wiki/Computer_performance wikipedia]\n- Computer Data Storage (for Storage Limitations) - [https://en.wikipedia.org/wiki/Computer_data_storage wikipedia]\n- Software Development Process (for Development Complexity) - [https://en.wikipedia.org/wiki/Software_development_process wikipedia]\n- Travel Technology (for Travel Apps) - [https://en.wikipedia.org/wiki/Travel_technology wikipedia]\n- Field Research (for Field Work) - [https://en.wikipedia.org/wiki/Field_research wikipedia]"
      },
      "date": 1705316553559,
      "id": "d2961ab6b420bbfd"
    },
    {
      "type": "fork",
      "site": "code.platform.earth",
      "date": 1705317063317,
      "id": "87db7d39-f909-4a31-83fa-c4d76392c5df"
    },
    {
      "type": "fork",
      "site": "platform.earth",
      "date": 1705317093795
    },
    {
      "type": "edit",
      "id": "a5b3167d842d5880",
      "item": {
        "type": "markdown",
        "id": "a5b3167d842d5880",
        "text": "- [[Local Data Storage]]"
      },
      "date": 1705480585111,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "fork",
      "date": 1705480598862
    },
    {
      "type": "edit",
      "id": "dd3b4bf44c7edfea",
      "item": {
        "text": "- [[Data Synchronization]]",
        "id": "dd3b4bf44c7edfea",
        "type": "markdown"
      },
      "date": 1705480677536
    },
    {
      "type": "remove",
      "id": "dd3b4bf44c7edfea",
      "date": 1705480681269
    },
    {
      "type": "edit",
      "id": "a5b3167d842d5880",
      "item": {
        "type": "markdown",
        "id": "a5b3167d842d5880",
        "text": "- [[Local Data Storage]]\n- [[Data Synchronization]]"
      },
      "date": 1705480682829
    },
    {
      "type": "edit",
      "id": "1eda5270a388af2a",
      "item": {
        "text": "### Key Characteristics\nHere we summarise some of the key characteristics of an offline-first architecture.",
        "id": "1eda5270a388af2a",
        "type": "markdown"
      },
      "date": 1705480746511
    },
    {
      "type": "edit",
      "id": "4473cfb53b01861d",
      "item": {
        "text": "[[Offline First]] is a design approach in software development where applications are designed to function effectively even without an Internet connection.",
        "id": "4473cfb53b01861d",
        "type": "markdown"
      },
      "date": 1705568198033
    },
    {
      "type": "fork",
      "site": "david.ward.dojo.fed.wiki",
      "date": 1706287006823
    }
  ],
  "title": "Offline-First Architecture",
  "story": [
    {
      "text": "[[Offline First]] is a design approach in software development where applications are designed to function effectively even without an Internet connection.",
      "id": "4473cfb53b01861d",
      "type": "markdown"
    },
    {
      "type": "markdown",
      "id": "526f8b80a043b973",
      "text": "We are exploring this architecture with regard to the experience of [[writing in wiki]]. Rather than prioriting the experience of writing directly onto a publically available web-site, we expect the majority of authoring to take place offline."
    },
    {
      "text": "We expect the majority of content to be authored on a mobile phone (or on a laptop or tablet), at locations with poor or non-existant internet connection. Wiki content would then be shared through forking that locally authored content to a public location.",
      "id": "0ef4675b5c2e57ef",
      "type": "markdown"
    },
    {
      "type": "markdown",
      "id": "940e0da84c1dea73",
      "text": "# Forking to Publish"
    },
    {
      "text": "This gives a new dimension to the action and concept of \"forking\". [[Forking]] in this context is an act of publishing. When content is of sufficient quality - when it is ready - you fork it - either to a new site in order to continue work - or to a public domain for others to read. The act of forking is therefore an act of publishing - either to yourself - or to another public.",
      "id": "6d6150374f75fff6",
      "type": "markdown"
    },
    {
      "type": "markdown",
      "id": "027b6353e6e0d294",
      "text": "In this architecture, the primary consideration is how the application will work offline; online capabilities are treated as an enhancement. This approach is particularly relevant in mobile application development but can also apply to web applications and other software systems."
    },
    {
      "text": "### Key Characteristics\nHere we summarise some of the key characteristics of an offline-first architecture.",
      "id": "1eda5270a388af2a",
      "type": "markdown"
    },
    {
      "type": "markdown",
      "id": "a5b3167d842d5880",
      "text": "- [[Local Data Storage]]\n- [[Data Synchronization]]"
    },
    {
      "type": "markdown",
      "id": "44e8e08f4f3a2906",
      "text": "- **User Experience**: Offline First design prioritizes a seamless user experience, ensuring that users can perform critical actions without an internet connection. The application should behave consistently regardless of network availability."
    },
    {
      "text": "- **Network State Awareness**: The application is aware of its online or offline state and can respond accordingly. It might adjust its functionality or provide feedback to the user based on the current network state.",
      "id": "47a8ac785ab0dd9c",
      "type": "markdown"
    },
    {
      "type": "markdown",
      "id": "1b6e7cc26621e796",
      "text": "- **Efficient Data Transfer**: When the application does synchronize or communicate with a server, it should do so efficiently, understanding that network bandwidth might be limited or costly."
    },
    {
      "text": "- **Progressive Enhancement**: The application should function at its core offline, with additional features and enhancements available when online.",
      "id": "226c089c6c77d11d",
      "type": "markdown"
    },
    {
      "text": "### Advantages:\n\n- **Improved User Experience**: Users are not hindered by poor or absent network connections.\n- **Reliability**: The application is more reliable since it doesn't depend solely on network availability.\n- **Performance**: Local data access is generally faster than remote server access.",
      "id": "c802572f323c11a9",
      "type": "markdown"
    },
    {
      "type": "markdown",
      "id": "05a70bdc0975ca1b",
      "text": "### Challenges:\n\n- **Data Synchronization**: Managing data synchronization, especially resolving conflicts, can be complex.\n- **Storage Limitations**: Local storage might be limited, especially on mobile devices.\n- **Development Complexity**: Designing for both offline and online states adds complexity to the development process."
    },
    {
      "text": "### Use Cases:\n\n- **Mobile Applications**: Especially useful in areas with poor or expensive Internet connectivity.\n- **Travel Apps**: For travelers who might not always have access to a network.\n- **Field Work**: For workers in remote or network-unreliable areas (e.g., disaster response, remote surveys).",
      "id": "7d38443c9881379b",
      "type": "markdown"
    },
    {
      "type": "markdown",
      "id": "c5abe130da80a561",
      "text": "### Technologies:\n\nVarious technologies can support Offline First architecture, including:\n\n- **Local Databases**: Like SQLite, IndexedDB, or Realm for local data storage.\n- **Service Workers**: In web applications, for caching and managing network requests.\n- **Synchronization Libraries**: To assist with data syncing between local storage and the server.\n\nIn summary, Offline First is an approach that ensures applications are functional and useful even without an Internet connection, enhancing user experience and reliability. It requires careful planning and design, particularly around data management and synchronization."
    },
    {
      "type": "markdown",
      "id": "d2961ab6b420bbfd",
      "text": "# References\n\n- Mobile Application Development - [https://en.wikipedia.org/wiki/Mobile_app_development wikipedia]\n- Web Applications - [https://en.wikipedia.org/wiki/Web_application wikipedia]\n- Data Synchronization - [https://en.wikipedia.org/wiki/Data_synchronization wikipedia]\n- User Experience - [https://en.wikipedia.org/wiki/User_experience wikipedia]\n- Computer Network (for Network State Awareness) - [https://en.wikipedia.org/wiki/Computer_network wikipedia]\n- Data Transfer (for Efficient Data Transfer) - [https://en.wikipedia.org/wiki/Data_transfer wikipedia]\n- Progressive Enhancement - [https://en.wikipedia.org/wiki/Progressive_enhancement wikipedia]\n- Reliability Engineering (for Reliability) - [https://en.wikipedia.org/wiki/Reliability_engineering wikipedia]\n- Computer Performance - [https://en.wikipedia.org/wiki/Computer_performance wikipedia]\n- Computer Data Storage (for Storage Limitations) - [https://en.wikipedia.org/wiki/Computer_data_storage wikipedia]\n- Software Development Process (for Development Complexity) - [https://en.wikipedia.org/wiki/Software_development_process wikipedia]\n- Travel Technology (for Travel Apps) - [https://en.wikipedia.org/wiki/Travel_technology wikipedia]\n- Field Research (for Field Work) - [https://en.wikipedia.org/wiki/Field_research wikipedia]"
    }
  ]
}