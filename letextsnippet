{
  "title": "LeTextSnippet",
  "story": [
    {
      "type": "markdown",
      "id": "0f2de9e3babb691f",
      "text": "## Updates\nA number of methods for **updating** text are provided (mirroring the protocol for {{gtClass:BlText}}:\n- {{gtMethod:LeTextSnippet>>#updateText:source:|label=#selector}}\n- {{gtMethod:LeTextualSnippet>>#updateString:|label=#selector}}\n- {{gtMethod:LeTextSnippet>>#appendText:source:|label=#selector}}\n- {{gtMethod:name=LeTextSnippet>>#insertText:at:|label=#selector}}\n\n {{gtExample:LeDatabaseSnippetUpdaterExamples>>#updateSnippetOneToTwo_Simplified_Text}} {{gtExample:LeDatabaseSnippetUpdaterExamples>>#updateSnippetOneToTwo_Simplified_String}} \n \n\nText editors are responsible for using a copy of {{gtMethod:LeTextSnippet>>#text|label=#selector}} since sharing {{gtClass:BlTextAttribute|label=text attributes}}  may produces undesired (and undefinied) behavior. {{gtClass:BlText}} is not thread safe, it therefore cannot be edited simultaneously in several editors.\nThe text is stored as a {{gtClass:BlText}} (rather than a {{gtClass:String}}) since converting text to strings is expensive, and this would be done on every keystroke while editing in the UI."
    },
    {
      "type": "markdown",
      "id": "c1a786b51d74a3db",
      "text": "## Navigation\nA number of methods for navigating between blocks are provided, including:\n\n- {{gtMethod:name=LeSnippet>>#previousSibling}}\n- {{gtMethod:name=LeSnippet>>#nextSibling}}\n- {{gtMethod:name=LeSnippet>>#previousBlockDo:ifNone:}}\n- {{gtMethod:name=LeSnippet>>#nextBlockDo:ifNone:}}\n\nnext and previousBlockDo... are based on the user expectations of editing paragraphs in a text editor, i.e. the previous block is the deepest last child of the block's previous subling."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "LeTextSnippet",
        "story": []
      },
      "date": 1704545726985
    },
    {
      "type": "edit",
      "id": "5bc1427fb398d1e4",
      "item": {
        "type": "markdown",
        "id": "5bc1427fb398d1e4",
        "text": "I am the model for a single text snippet. \nThe following example display one {{gtClass:LePage|label=page}} with three blocks in a tree structure: {{gtExample:LeContentExamples>>#pageOneWithTwoSnippetsAndWithSnippetChild|noCode}} \n## Properties\nCommon properties that can be accessed from a LeSnippet include:\n- {{gtMethod:LeTextSnippet>>#text|label=#selector}} is a  [Markdown](https://en.wikipedia.org/wiki/Markdown) text as a {{gtClass:BlText}} instance,\n- {{gtMethod:LeSnippet>>#parent|label=#selector}} that can be either another {{gtClass:LeSnippet}} or {{gtClass:LePage}},\n- {{gtMethod:LeSnippet>>#page|label=#selector}}  is a {{gtClass:LePage}} or nil,\n- {{gtMethod:LeSnippet>>#topBlock|label=#selector}} is a {{gtClass:LeSnippet}} or nil,\n- {{gtMethod:LeContent>>#children|label=#selector}} is a collection of other {{gtClass:LeSnippet}} instances.\nAdditional properties can be found in `api - accessing`.\n## Initialization\nThe {{gtMethod:LeTextSnippet>>#text|label=#selector}} is **initialized** either using {{gtMethod:LeTextSnippet>>#text:|label=#selector}} or {{gtMethod:LeTextSnippet>>#string:|label=#selector}}.  The former one is useful particularly for the json reader and writer.\nFrom a UI, new {{gtClass:LeSnippet}} can be created (added as my children) using {{gtMethod:LeContent>>#blockBuilder|label=#selector}}: {{gtExample:LeContentExamples>>#textSnippetInPageAndDatabase}} \n## Updates\nA number of methods for **updating** text are provided (mirroring the protocol for {{gtClass:BlText}}:\n- {{gtMethod:LeTextSnippet>>#updateText:source:|label=#selector}}\n- {{gtMethod:LeTextualSnippet>>#updateString:|label=#selector}}\n- {{gtMethod:LeTextSnippet>>#appendText:source:|label=#selector}}\n- {{gtMethod:name=LeTextSnippet>>#insertText:at:|label=#selector}}\n\n {{gtExample:LeDatabaseSnippetUpdaterExamples>>#updateSnippetOneToTwo_Simplified_Text}} {{gtExample:LeDatabaseSnippetUpdaterExamples>>#updateSnippetOneToTwo_Simplified_String}} \n \n\nText editors are responsible for using a copy of {{gtMethod:LeTextSnippet>>#text|label=#selector}} since sharing {{gtClass:BlTextAttribute|label=text attributes}}  may produces undesired (and undefinied) behavior. {{gtClass:BlText}} is not thread safe, it therefore cannot be edited simultaneously in several editors.\nThe text is stored as a {{gtClass:BlText}} (rather than a {{gtClass:String}}) since converting text to strings is expensive, and this would be done on every keystroke while editing in the UI.\n## Navigation\nA number of methods for navigating betwee blocks are provided, including:\n\n- {{gtMethod:name=LeSnippet>>#previousSibling}}\n- {{gtMethod:name=LeSnippet>>#nextSibling}}\n- {{gtMethod:name=LeSnippet>>#previousBlockDo:ifNone:}}\n- {{gtMethod:name=LeSnippet>>#nextBlockDo:ifNone:}}\n\nnext and previousBlockDo... are based on the user expectations of editing paragraphs in a text editor, i.e. the previous block is the deepest last child of the block's previous subling.\n\n"
      },
      "date": 1704545730842
    },
    {
      "type": "edit",
      "id": "5bc1427fb398d1e4",
      "item": {
        "type": "markdown",
        "id": "5bc1427fb398d1e4",
        "text": "I am the model for a single text snippet. \nThe following example display one {{gtClass:LePage|label=page}} with three blocks in a tree structure: {{gtExample:LeContentExamples>>#pageOneWithTwoSnippetsAndWithSnippetChild|noCode}} \n## Properties\nCommon properties that can be accessed from a LeSnippet include:\n- {{gtMethod:LeTextSnippet>>#text|label=#selector}} is a  [Markdown](https://en.wikipedia.org/wiki/Markdown) text as a {{gtClass:BlText}} instance,\n- {{gtMethod:LeSnippet>>#parent|label=#selector}} that can be either another {{gtClass:LeSnippet}} or {{gtClass:LePage}},\n- {{gtMethod:LeSnippet>>#page|label=#selector}}  is a {{gtClass:LePage}} or nil,\n- {{gtMethod:LeSnippet>>#topBlock|label=#selector}} is a {{gtClass:LeSnippet}} or nil,\n- {{gtMethod:LeContent>>#children|label=#selector}} is a collection of other {{gtClass:LeSnippet}} instances.\nAdditional properties can be found in `api - accessing`.\n## Initialization\nThe {{gtMethod:LeTextSnippet>>#text|label=#selector}} is **initialized** either using {{gtMethod:LeTextSnippet>>#text:|label=#selector}} or {{gtMethod:LeTextSnippet>>#string:|label=#selector}}.  The former one is useful particularly for the json reader and writer.\nFrom a UI, new {{gtClass:LeSnippet}} can be created (added as my children) using {{gtMethod:LeContent>>#blockBuilder|label=#selector}}: {{gtExample:LeContentExamples>>#textSnippetInPageAndDatabase}}"
      },
      "date": 1704545786996
    },
    {
      "type": "add",
      "id": "0f2de9e3babb691f",
      "item": {
        "type": "markdown",
        "id": "0f2de9e3babb691f",
        "text": "## Updates\nA number of methods for **updating** text are provided (mirroring the protocol for {{gtClass:BlText}}:\n- {{gtMethod:LeTextSnippet>>#updateText:source:|label=#selector}}\n- {{gtMethod:LeTextualSnippet>>#updateString:|label=#selector}}\n- {{gtMethod:LeTextSnippet>>#appendText:source:|label=#selector}}\n- {{gtMethod:name=LeTextSnippet>>#insertText:at:|label=#selector}}\n\n {{gtExample:LeDatabaseSnippetUpdaterExamples>>#updateSnippetOneToTwo_Simplified_Text}} {{gtExample:LeDatabaseSnippetUpdaterExamples>>#updateSnippetOneToTwo_Simplified_String}} \n \n\nText editors are responsible for using a copy of {{gtMethod:LeTextSnippet>>#text|label=#selector}} since sharing {{gtClass:BlTextAttribute|label=text attributes}}  may produces undesired (and undefinied) behavior. {{gtClass:BlText}} is not thread safe, it therefore cannot be edited simultaneously in several editors.\nThe text is stored as a {{gtClass:BlText}} (rather than a {{gtClass:String}}) since converting text to strings is expensive, and this would be done on every keystroke while editing in the UI."
      },
      "after": "5bc1427fb398d1e4",
      "date": 1704545797809
    },
    {
      "type": "add",
      "id": "c1a786b51d74a3db",
      "item": {
        "type": "markdown",
        "id": "c1a786b51d74a3db",
        "text": "## Navigation\nA number of methods for navigating between blocks are provided, including:\n\n- {{gtMethod:name=LeSnippet>>#previousSibling}}\n- {{gtMethod:name=LeSnippet>>#nextSibling}}\n- {{gtMethod:name=LeSnippet>>#previousBlockDo:ifNone:}}\n- {{gtMethod:name=LeSnippet>>#nextBlockDo:ifNone:}}\n\nnext and previousBlockDo... are based on the user expectations of editing paragraphs in a text editor, i.e. the previous block is the deepest last child of the block's previous subling."
      },
      "after": "0f2de9e3babb691f",
      "date": 1704545802867
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1704546404708
    }
  ]
}