{
  "title": "Parse, Don’t Validate",
  "story": [
    {
      "type": "paragraph",
      "id": "917f7de3328c1096",
      "text": "Because [[elm-pages]] has a build step, you know that your BackendTask.Http requests succeeded, your decoders succeeded, your custom BackendTask validations succeeded, and everything went smoothly. If something went wrong, you get a build failure and can deal with the issues before the site goes live. That means your users won't see those errors, and as a developer you don't need to handle those error cases in your code! Think of it as \"parse, don't validate\", but for your entire build. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1/BackendTask page]"
    },
    {
      "type": "paragraph",
      "id": "46d2f75cddd0f723",
      "text": "In the case of server-rendered routes, a [[BackendTask]] failure will render a 500 page, so more care needs to be taken to make sure all common errors are handled properly, but the tradeoff is that you can use BackendTask's to pull in highly dynamic data and even render user-specific pages."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Parse, Don’t Validate",
        "story": []
      },
      "date": 1692962517161
    },
    {
      "item": {
        "type": "factory",
        "id": "917f7de3328c1096"
      },
      "id": "917f7de3328c1096",
      "type": "add",
      "date": 1692962518759
    },
    {
      "type": "edit",
      "id": "917f7de3328c1096",
      "item": {
        "type": "paragraph",
        "id": "917f7de3328c1096",
        "text": "Because elm-pages has a build step, you know that your BackendTask.Http requests succeeded, your decoders succeeded, your custom BackendTask validations succeeded, and everything went smoothly. If something went wrong, you get a build failure and can deal with the issues before the site goes live. That means your users won't see those errors, and as a developer you don't need to handle those error cases in your code! Think of it as \"parse, don't validate\", but for your entire build. In the case of server-rendered routes, a BackendTask failure will render a 500 page, so more care needs to be taken to make sure all common errors are handled properly, but the tradeoff is that you can use BackendTask's to pull in highly dynamic data and even render user-specific pages."
      },
      "date": 1692962520098
    },
    {
      "type": "edit",
      "id": "917f7de3328c1096",
      "item": {
        "type": "paragraph",
        "id": "917f7de3328c1096",
        "text": "Because elm-pages has a build step, you know that your BackendTask.Http requests succeeded, your decoders succeeded, your custom BackendTask validations succeeded, and everything went smoothly. If something went wrong, you get a build failure and can deal with the issues before the site goes live. That means your users won't see those errors, and as a developer you don't need to handle those error cases in your code! Think of it as \"parse, don't validate\", but for your entire build. In the case of server-rendered routes, a BackendTask failure will render a 500 page, so more care needs to be taken to make sure all common errors are handled properly, but the tradeoff is that you can use BackendTask's to pull in highly dynamic data and even render user-specific pages. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1/BackendTask page]"
      },
      "date": 1692962528498
    },
    {
      "type": "edit",
      "id": "917f7de3328c1096",
      "item": {
        "type": "paragraph",
        "id": "917f7de3328c1096",
        "text": "Because [[elm-pages]] has a build step, you know that your BackendTask.Http requests succeeded, your decoders succeeded, your custom BackendTask validations succeeded, and everything went smoothly. If something went wrong, you get a build failure and can deal with the issues before the site goes live. That means your users won't see those errors, and as a developer you don't need to handle those error cases in your code! Think of it as \"parse, don't validate\", but for your entire build. In the case of server-rendered routes, a BackendTask failure will render a 500 page, so more care needs to be taken to make sure all common errors are handled properly, but the tradeoff is that you can use BackendTask's to pull in highly dynamic data and even render user-specific pages. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1/BackendTask page]"
      },
      "date": 1692962537457
    },
    {
      "type": "edit",
      "id": "917f7de3328c1096",
      "item": {
        "type": "paragraph",
        "id": "917f7de3328c1096",
        "text": "Because [[elm-pages]] has a build step, you know that your BackendTask.Http requests succeeded, your decoders succeeded, your custom BackendTask validations succeeded, and everything went smoothly. If something went wrong, you get a build failure and can deal with the issues before the site goes live. That means your users won't see those errors, and as a developer you don't need to handle those error cases in your code! Think of it as \"parse, don't validate\", but for your entire build."
      },
      "date": 1692962566226
    },
    {
      "type": "add",
      "id": "46d2f75cddd0f723",
      "item": {
        "type": "paragraph",
        "id": "46d2f75cddd0f723",
        "text": "In the case of server-rendered routes, a BackendTask failure will render a 500 page, so more care needs to be taken to make sure all common errors are handled properly, but the tradeoff is that you can use BackendTask's to pull in highly dynamic data and even render user-specific pages. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1/BackendTask page]"
      },
      "after": "917f7de3328c1096",
      "date": 1692962566723
    },
    {
      "type": "edit",
      "id": "46d2f75cddd0f723",
      "item": {
        "type": "paragraph",
        "id": "46d2f75cddd0f723",
        "text": "In the case of server-rendered routes, a [[BackendTask]] failure will render a 500 page, so more care needs to be taken to make sure all common errors are handled properly, but the tradeoff is that you can use BackendTask's to pull in highly dynamic data and even render user-specific pages. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1/BackendTask page]"
      },
      "date": 1692962579766
    },
    {
      "type": "edit",
      "id": "46d2f75cddd0f723",
      "item": {
        "type": "paragraph",
        "id": "46d2f75cddd0f723",
        "text": "In the case of server-rendered routes, a [[BackendTask]] failure will render a 500 page, so more care needs to be taken to make sure all common errors are handled properly, but the tradeoff is that you can use BackendTask's to pull in highly dynamic data and even render user-specific pages."
      },
      "date": 1692963163797
    },
    {
      "type": "edit",
      "id": "917f7de3328c1096",
      "item": {
        "type": "paragraph",
        "id": "917f7de3328c1096",
        "text": "Because [[elm-pages]] has a build step, you know that your BackendTask.Http requests succeeded, your decoders succeeded, your custom BackendTask validations succeeded, and everything went smoothly. If something went wrong, you get a build failure and can deal with the issues before the site goes live. That means your users won't see those errors, and as a developer you don't need to handle those error cases in your code! Think of it as \"parse, don't validate\", but for your entire build. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1/BackendTask page]"
      },
      "date": 1692963165825
    }
  ]
}