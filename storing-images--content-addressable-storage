{
  "journal": [
    {
      "date": 1338405617000,
      "type": "create",
      "id": "dbb31d3b14b4f5ab",
      "item": {
        "title": "Storing Images && Content Addressable Storage"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "dfdbfec9b269a63e",
      "item": {
        "text": "open issue #236 by harlantwood",
        "type": "pagefold",
        "id": "dfdbfec9b269a63e"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "35fb780a38748db1",
      "item": {
        "text": "Nicholas and I were chatting a bit about image storage in SFW today.  Here's an initial stab at an image storage system:",
        "type": "paragraph",
        "id": "35fb780a38748db1"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "713c4b234655ef53",
      "item": {
        "text": "In the filesystem (or other \"stores\" such as CouchDB), we add an <b>images</b> dir as a sibling of the <b>pages</b> dir -- note that this could be within a farm or non-farm instance --",
        "type": "paragraph",
        "id": "713c4b234655ef53"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "dd64a593d41e2b1a",
      "item": {
        "text": "    |____pages",
        "type": "paragraph",
        "id": "dd64a593d41e2b1a"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "4c67b038cea7d423",
      "item": {
        "text": "    | |____welcome-visitors",
        "type": "paragraph",
        "id": "4c67b038cea7d423"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "d136d384b729c6fd",
      "item": {
        "text": "    | |____smallest-federated-wiki",
        "type": "paragraph",
        "id": "d136d384b729c6fd"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "48e96dbf2e541c84",
      "item": {
        "text": "    |____images",
        "type": "paragraph",
        "id": "48e96dbf2e541c84"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "2f02527453d6a448",
      "item": {
        "text": "    | |____bike-shed.png",
        "type": "paragraph",
        "id": "2f02527453d6a448"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "ec69b3e4f75b3500",
      "item": {
        "text": "    | |____logo.jpg",
        "type": "paragraph",
        "id": "ec69b3e4f75b3500"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "31f063f80f80e2d2",
      "item": {
        "text": "    | |____logo-5.jpg",
        "type": "paragraph",
        "id": "31f063f80f80e2d2"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "a61bb696e03f6f31",
      "item": {
        "text": "    | |____logo-58.jpg",
        "type": "paragraph",
        "id": "a61bb696e03f6f31"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "807e0b5ceb608d8b",
      "item": {
        "text": "    |____status",
        "type": "paragraph",
        "id": "807e0b5ceb608d8b"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "4b123938f50732c8",
      "item": {
        "text": "    | |____favicon.png",
        "type": "paragraph",
        "id": "4b123938f50732c8"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "fd2aaa786c5baefe",
      "item": {
        "text": "    | |____open_id.identity",
        "type": "paragraph",
        "id": "fd2aaa786c5baefe"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "76b10568beb89f79",
      "item": {
        "text": "    | |____local-identity",
        "type": "paragraph",
        "id": "76b10568beb89f79"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "e77351fd10cd5c5b",
      "item": {
        "text": "We try to name images the same as the original image file, or some other meaningful name.  If there is a name conflict (as there was with the 3 <b>logo.jpg</b> originals we tried to upload in the example above), we append a dash, then _n_ random integers, until we get a unique file name.",
        "type": "paragraph",
        "id": "e77351fd10cd5c5b"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "7a510d63209e78a2",
      "item": {
        "text": "The client renders image tags:",
        "type": "paragraph",
        "id": "7a510d63209e78a2"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "0f33c0df4da931e7",
      "item": {
        "text": "    <img src=\"/images/bike-shed.png\" />",
        "type": "paragraph",
        "id": "0f33c0df4da931e7"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "72060734abe33258",
      "item": {
        "text": "The servers recognize this path pattern and serve up the given image for the current instance (farm or otherwise).",
        "type": "paragraph",
        "id": "72060734abe33258"
      }
    },
    {
      "date": 1338405617000,
      "type": "add",
      "id": "e2ace0e4063d8bea",
      "item": {
        "text": "See issue in [https://github.com/WardCunningham/Smallest-Federated-Wiki/issues/236 github]",
        "type": "paragraph",
        "id": "e2ace0e4063d8bea"
      }
    },
    {
      "date": 1338407827000,
      "type": "add",
      "id": "6019671",
      "item": {
        "text": "harlantwood",
        "type": "pagefold",
        "id": "6019671"
      }
    },
    {
      "date": 1338407827000,
      "type": "add",
      "id": "38eb805aa16adb32",
      "item": {
        "text": "I was originally thinking of storing the images all in one dir, with the image filename being the MD5 of the image data.  This would make the images content addressable, such that if there are 100 forks of the same page with an image, we only store the image once.  ",
        "type": "paragraph",
        "id": "38eb805aa16adb32"
      }
    },
    {
      "date": 1338407827000,
      "type": "add",
      "id": "593a63d276d83525",
      "item": {
        "text": "My latest thought is that content addressability should be a separate layer -- eg I would love to see us add a GitStore (or GithubStore) as well as the current FileStore and CouchStore.  If you chose the git backend, you would get this content addressable deduplication for free.",
        "type": "paragraph",
        "id": "593a63d276d83525"
      }
    },
    {
      "date": 1338414986000,
      "type": "add",
      "id": "6022704",
      "item": {
        "text": "hallahan",
        "type": "pagefold",
        "id": "6022704"
      }
    },
    {
      "date": 1338414986000,
      "type": "add",
      "id": "7d7c2fef3f621622",
      "item": {
        "text": "This looks really good. How would it work with git as a backend? Would we have a bare repository and then check things out upon request? It is a beautiful system, and exploring using it in this way sounds compelling. Does it perform well enough to be treated like a database?",
        "type": "paragraph",
        "id": "7d7c2fef3f621622"
      }
    },
    {
      "date": 1338425001000,
      "type": "add",
      "id": "6025314",
      "item": {
        "text": "harlantwood",
        "type": "pagefold",
        "id": "6025314"
      }
    },
    {
      "date": 1338425001000,
      "type": "add",
      "id": "48c03a1736ed9e9b",
      "item": {
        "text": "We could have a git repo on the local file system.  Even more compelling from my point of view (largely because it would work with cloud-based hosts like Heroku) is just using the Github API.  So you would push to the github repo backing the given site, using their HTTP API, from your SFW server.  ",
        "type": "paragraph",
        "id": "48c03a1736ed9e9b"
      }
    },
    {
      "date": 1338425001000,
      "type": "add",
      "id": "82368877bc5d648d",
      "item": {
        "text": "Then the cool part: when you want to access the images, you can just link to the \"raw\" version of the image on github, eg: ",
        "type": "paragraph",
        "id": "82368877bc5d648d"
      }
    },
    {
      "date": 1338425001000,
      "type": "add",
      "id": "228b17e66e2fc7f7",
      "item": {
        "text": "    <img src=\"[https://github.com/harlantwood/open_your_project/raw/master/doc/images/collections-of-pages-circle-pack-viz.png\" https://github.com/harlantwood/open_your_project/raw/master/doc/images/collections-of-pages-circle-pack-viz.png\"] />",
        "type": "paragraph",
        "id": "228b17e66e2fc7f7"
      }
    },
    {
      "date": 1338425001000,
      "type": "add",
      "id": "767a143a5a59892f",
      "item": {
        "text": "Note that we could do the same for JSON, eg:",
        "type": "paragraph",
        "id": "767a143a5a59892f"
      }
    },
    {
      "date": 1338425001000,
      "type": "add",
      "id": "0b28d625c95943d9",
      "item": {
        "text": "[https://raw.github.com/WardCunningham/Smallest-Federated-Wiki/master/default-data/pages/welcome-visitors https://raw.github.com/WardCunningham/Smallest-Federated-Wiki/master/default-data/pages/welcome-visitors]",
        "type": "paragraph",
        "id": "0b28d625c95943d9"
      }
    },
    {
      "date": 1338425001000,
      "type": "add",
      "id": "71c03d20c8ff7ff1",
      "item": {
        "text": "So github could serve a lot of our dynamic content over it's highly optimized pipeline.  We might want to check their TOS, and even check in with them directly before doing this, to make sure they're cool with it.  If so, it could be awesome.",
        "type": "paragraph",
        "id": "71c03d20c8ff7ff1"
      }
    },
    {
      "date": 1338439503000,
      "type": "add",
      "id": "6027884",
      "item": {
        "text": "hallahan",
        "type": "pagefold",
        "id": "6027884"
      }
    },
    {
      "date": 1338439503000,
      "type": "add",
      "id": "f7c6cbc30e0fd3fc",
      "item": {
        "text": "I just assumed that git has whatever http server it uses on top of a file system where the git repos live. If that is the case, does git really provide any functionality with serving content? Do you have any info on how this actually works? Git may be a useful tool for deployment, and github may be a useful service to use to serve content, but I am wondering if there is anything special we actually get from git in this usage model.",
        "type": "paragraph",
        "id": "f7c6cbc30e0fd3fc"
      }
    },
    {
      "date": 1338465979000,
      "type": "add",
      "id": "6034079",
      "item": {
        "text": "harlantwood",
        "type": "pagefold",
        "id": "6034079"
      }
    },
    {
      "date": 1338465979000,
      "type": "add",
      "id": "f5d30dd8549c4a9d",
      "item": {
        "text": "Again, if there are 100 forks of the same page with an image, in 100 different farm instances, even though we will make 100 \"copies\" of the image in the SFW backend, the git repo (or any other content addressable storage layer) will only make one copy of the image.  ",
        "type": "paragraph",
        "id": "f5d30dd8549c4a9d"
      }
    },
    {
      "date": 1340172337000,
      "type": "add",
      "id": "6445722",
      "item": {
        "text": "harlantwood",
        "type": "pagefold",
        "id": "6445722"
      }
    },
    {
      "date": 1340172337000,
      "type": "add",
      "id": "9d322fb30072263f",
      "item": {
        "text": "I have begun work on a GithubStore in another project --",
        "type": "paragraph",
        "id": "9d322fb30072263f"
      }
    },
    {
      "date": 1340172337000,
      "type": "add",
      "id": "cdd6ba7c30d1fe06",
      "item": {
        "text": "[https://github.com/harlantwood/software_zero/blob/[https://github.com/wardcunningham/wiki/commit/3137bf56106393627c20008417e9724ab86c677b 3137bf5]/lib/stores/github_store.rb https://github.com/harlantwood/software_zero/blob/[https://github.com/wardcunningham/wiki/commit/3137bf56106393627c20008417e9724ab86c677b 3137bf5]/lib/stores/github_store.rb]",
        "type": "paragraph",
        "id": "cdd6ba7c30d1fe06"
      }
    },
    {
      "date": 1340172337000,
      "type": "add",
      "id": "af5af1b630d1035c",
      "item": {
        "text": "-- so far the <b>#get_text</b> & <b>#put_text</b> methods are implemented.  ",
        "type": "paragraph",
        "id": "af5af1b630d1035c"
      }
    },
    {
      "date": 1340172337000,
      "type": "add",
      "id": "1d7841cfcc08cabf",
      "item": {
        "text": "This uses the excellent [github_api gem]([https://github.com/peter-murach/github), https://github.com/peter-murach/github),] which closely mirrors the [Github HTTP API]([http://developer.github.com/v3/git/). http://developer.github.com/v3/git/).]",
        "type": "paragraph",
        "id": "1d7841cfcc08cabf"
      }
    },
    {
      "date": 1340172337000,
      "type": "add",
      "id": "e01e95be52e6ec34",
      "item": {
        "text": "Because the Github API is very low level, we need to create repos, branches, trees, etc.",
        "type": "paragraph",
        "id": "e01e95be52e6ec34"
      }
    },
    {
      "type": "fork",
      "site": "smallest-federated-wiki.issues.fed.wiki.org",
      "date": 1591661388438
    },
    {
      "type": "fork",
      "site": "don.noyes.asia.wiki.org",
      "date": 1651831679403
    }
  ],
  "title": "Storing Images && Content Addressable Storage",
  "story": [
    {
      "text": "open issue #236 by harlantwood",
      "type": "pagefold",
      "id": "dfdbfec9b269a63e"
    },
    {
      "text": "Nicholas and I were chatting a bit about image storage in SFW today.  Here's an initial stab at an image storage system:",
      "type": "paragraph",
      "id": "35fb780a38748db1"
    },
    {
      "text": "In the filesystem (or other \"stores\" such as CouchDB), we add an <b>images</b> dir as a sibling of the <b>pages</b> dir -- note that this could be within a farm or non-farm instance --",
      "type": "paragraph",
      "id": "713c4b234655ef53"
    },
    {
      "text": "    |____pages",
      "type": "paragraph",
      "id": "dd64a593d41e2b1a"
    },
    {
      "text": "    | |____welcome-visitors",
      "type": "paragraph",
      "id": "4c67b038cea7d423"
    },
    {
      "text": "    | |____smallest-federated-wiki",
      "type": "paragraph",
      "id": "d136d384b729c6fd"
    },
    {
      "text": "    |____images",
      "type": "paragraph",
      "id": "48e96dbf2e541c84"
    },
    {
      "text": "    | |____bike-shed.png",
      "type": "paragraph",
      "id": "2f02527453d6a448"
    },
    {
      "text": "    | |____logo.jpg",
      "type": "paragraph",
      "id": "ec69b3e4f75b3500"
    },
    {
      "text": "    | |____logo-5.jpg",
      "type": "paragraph",
      "id": "31f063f80f80e2d2"
    },
    {
      "text": "    | |____logo-58.jpg",
      "type": "paragraph",
      "id": "a61bb696e03f6f31"
    },
    {
      "text": "    |____status",
      "type": "paragraph",
      "id": "807e0b5ceb608d8b"
    },
    {
      "text": "    | |____favicon.png",
      "type": "paragraph",
      "id": "4b123938f50732c8"
    },
    {
      "text": "    | |____open_id.identity",
      "type": "paragraph",
      "id": "fd2aaa786c5baefe"
    },
    {
      "text": "    | |____local-identity",
      "type": "paragraph",
      "id": "76b10568beb89f79"
    },
    {
      "text": "We try to name images the same as the original image file, or some other meaningful name.  If there is a name conflict (as there was with the 3 <b>logo.jpg</b> originals we tried to upload in the example above), we append a dash, then _n_ random integers, until we get a unique file name.",
      "type": "paragraph",
      "id": "e77351fd10cd5c5b"
    },
    {
      "text": "The client renders image tags:",
      "type": "paragraph",
      "id": "7a510d63209e78a2"
    },
    {
      "text": "    <img src=\"/images/bike-shed.png\" />",
      "type": "paragraph",
      "id": "0f33c0df4da931e7"
    },
    {
      "text": "The servers recognize this path pattern and serve up the given image for the current instance (farm or otherwise).",
      "type": "paragraph",
      "id": "72060734abe33258"
    },
    {
      "text": "See issue in [https://github.com/WardCunningham/Smallest-Federated-Wiki/issues/236 github]",
      "type": "paragraph",
      "id": "e2ace0e4063d8bea"
    },
    {
      "text": "harlantwood",
      "type": "pagefold",
      "id": "6019671"
    },
    {
      "text": "I was originally thinking of storing the images all in one dir, with the image filename being the MD5 of the image data.  This would make the images content addressable, such that if there are 100 forks of the same page with an image, we only store the image once.  ",
      "type": "paragraph",
      "id": "38eb805aa16adb32"
    },
    {
      "text": "My latest thought is that content addressability should be a separate layer -- eg I would love to see us add a GitStore (or GithubStore) as well as the current FileStore and CouchStore.  If you chose the git backend, you would get this content addressable deduplication for free.",
      "type": "paragraph",
      "id": "593a63d276d83525"
    },
    {
      "text": "hallahan",
      "type": "pagefold",
      "id": "6022704"
    },
    {
      "text": "This looks really good. How would it work with git as a backend? Would we have a bare repository and then check things out upon request? It is a beautiful system, and exploring using it in this way sounds compelling. Does it perform well enough to be treated like a database?",
      "type": "paragraph",
      "id": "7d7c2fef3f621622"
    },
    {
      "text": "harlantwood",
      "type": "pagefold",
      "id": "6025314"
    },
    {
      "text": "We could have a git repo on the local file system.  Even more compelling from my point of view (largely because it would work with cloud-based hosts like Heroku) is just using the Github API.  So you would push to the github repo backing the given site, using their HTTP API, from your SFW server.  ",
      "type": "paragraph",
      "id": "48c03a1736ed9e9b"
    },
    {
      "text": "Then the cool part: when you want to access the images, you can just link to the \"raw\" version of the image on github, eg: ",
      "type": "paragraph",
      "id": "82368877bc5d648d"
    },
    {
      "text": "    <img src=\"[https://github.com/harlantwood/open_your_project/raw/master/doc/images/collections-of-pages-circle-pack-viz.png\" https://github.com/harlantwood/open_your_project/raw/master/doc/images/collections-of-pages-circle-pack-viz.png\"] />",
      "type": "paragraph",
      "id": "228b17e66e2fc7f7"
    },
    {
      "text": "Note that we could do the same for JSON, eg:",
      "type": "paragraph",
      "id": "767a143a5a59892f"
    },
    {
      "text": "[https://raw.github.com/WardCunningham/Smallest-Federated-Wiki/master/default-data/pages/welcome-visitors https://raw.github.com/WardCunningham/Smallest-Federated-Wiki/master/default-data/pages/welcome-visitors]",
      "type": "paragraph",
      "id": "0b28d625c95943d9"
    },
    {
      "text": "So github could serve a lot of our dynamic content over it's highly optimized pipeline.  We might want to check their TOS, and even check in with them directly before doing this, to make sure they're cool with it.  If so, it could be awesome.",
      "type": "paragraph",
      "id": "71c03d20c8ff7ff1"
    },
    {
      "text": "hallahan",
      "type": "pagefold",
      "id": "6027884"
    },
    {
      "text": "I just assumed that git has whatever http server it uses on top of a file system where the git repos live. If that is the case, does git really provide any functionality with serving content? Do you have any info on how this actually works? Git may be a useful tool for deployment, and github may be a useful service to use to serve content, but I am wondering if there is anything special we actually get from git in this usage model.",
      "type": "paragraph",
      "id": "f7c6cbc30e0fd3fc"
    },
    {
      "text": "harlantwood",
      "type": "pagefold",
      "id": "6034079"
    },
    {
      "text": "Again, if there are 100 forks of the same page with an image, in 100 different farm instances, even though we will make 100 \"copies\" of the image in the SFW backend, the git repo (or any other content addressable storage layer) will only make one copy of the image.  ",
      "type": "paragraph",
      "id": "f5d30dd8549c4a9d"
    },
    {
      "text": "harlantwood",
      "type": "pagefold",
      "id": "6445722"
    },
    {
      "text": "I have begun work on a GithubStore in another project --",
      "type": "paragraph",
      "id": "9d322fb30072263f"
    },
    {
      "text": "[https://github.com/harlantwood/software_zero/blob/[https://github.com/wardcunningham/wiki/commit/3137bf56106393627c20008417e9724ab86c677b 3137bf5]/lib/stores/github_store.rb https://github.com/harlantwood/software_zero/blob/[https://github.com/wardcunningham/wiki/commit/3137bf56106393627c20008417e9724ab86c677b 3137bf5]/lib/stores/github_store.rb]",
      "type": "paragraph",
      "id": "cdd6ba7c30d1fe06"
    },
    {
      "text": "-- so far the <b>#get_text</b> & <b>#put_text</b> methods are implemented.  ",
      "type": "paragraph",
      "id": "af5af1b630d1035c"
    },
    {
      "text": "This uses the excellent [github_api gem]([https://github.com/peter-murach/github), https://github.com/peter-murach/github),] which closely mirrors the [Github HTTP API]([http://developer.github.com/v3/git/). http://developer.github.com/v3/git/).]",
      "type": "paragraph",
      "id": "1d7841cfcc08cabf"
    },
    {
      "text": "Because the Github API is very low level, we need to create repos, branches, trees, etc.",
      "type": "paragraph",
      "id": "e01e95be52e6ec34"
    }
  ]
}