{
  "title": "rstream-graph",
  "story": [
    {
      "type": "paragraph",
      "id": "8651907bb33345b0",
      "text": "Declarative, reactive dataflow graph construction using [[@thi.ng/rstream]], @thi.ng/atom and @thi.ng/transducers primitives. [https://docs.thi.ng/umbrella/rstream-graph/ docs]"
    },
    {
      "type": "html",
      "id": "ddff0ecd47e9662d",
      "text": "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"334.758\" height=\"61.313\" viewBox=\"0 3.715312500000003 334.7578125 61.31250000000001\" stroke=\"none\"><style>path { fill: #333; } @media (prefers-color-scheme: dark) { path { fill: #ccc; } }</style><path d=\"M0 47.520L7.031 47.520C10.469 35.817 13.986 24.193 17.367 12.434L19.969 3.715L12.938 3.715L10.336 12.434L4.711 12.434L3.445 16.864L9.070 16.864Z\"/><path d=\"M18.281 47.520L25.313 47.520C27.919 38.759 30.449 29.922 33.117 21.223L23.977 21.223L29.109 3.715L22.078 3.715C19.919 11.002 17.838 18.366 15.609 25.583L9.141 47.520L16.172 47.520L22.641 25.583L24.750 25.583Z\"/><path d=\"M44.508 13.454C44.489 11.502 42.949 9.973 40.992 9.973C39.023 9.973 37.477 11.520 37.477 13.489C37.477 15.387 39.023 16.934 40.992 16.934C42.949 16.934 44.489 15.406 44.508 13.454C44.508 13.442 44.508 13.430 44.508 13.418ZM27.422 47.520L34.453 47.520L42.258 21.223L35.227 21.223Z\"/><path d=\"M44.578 44.145C44.578 42.176 43.031 40.629 41.063 40.629C39.164 40.629 37.617 42.176 37.617 44.145C37.617 46.114 39.164 47.661 41.133 47.661C43.102 47.661 44.648 46.114 44.648 44.145Z\"/><path d=\"M54.844 47.520L61.875 47.520C64.481 38.759 67.012 29.922 69.680 21.223L53.508 21.223C50.839 29.922 48.310 38.760 45.703 47.520L52.734 47.520L59.203 25.583L61.313 25.583Z\"/><path d=\"M58.781 65.028L74.953 65.028C78.918 51.954 82.725 38.721 86.625 25.583L87.961 21.223L71.789 21.223C69.121 29.922 66.591 38.760 63.984 47.520L71.016 47.520L77.484 25.583L79.594 25.583L69.258 60.668L67.148 60.668L68.414 56.309L61.383 56.309C60.544 59.244 59.677 62.150 58.781 65.028Z\"/><path d=\"M77.063 65.028L84.094 65.028L102.234 3.715L95.203 3.715Z\"/><path d=\"M105.750 30.012L112.781 30.012C113.612 27.046 114.479 24.116 115.383 21.223L99.211 21.223C96.543 29.922 94.013 38.760 91.406 47.520L98.438 47.520L104.906 25.583L107.016 25.583Z\"/><path d=\"M124.031 30.012L131.063 30.012C131.893 27.046 132.760 24.116 133.664 21.223L117.492 21.223C116.589 24.116 115.721 27.046 114.891 30.012L121.430 38.731L120.094 43.161L117.984 43.161L119.320 38.731L112.289 38.731C111.402 41.641 110.534 44.570 109.688 47.520L125.859 47.520C126.706 44.570 127.574 41.641 128.461 38.731L121.922 30.012L123.188 25.583L125.297 25.583Z\"/><path d=\"M127.969 47.520L135 47.520C138.438 35.817 141.955 24.193 145.336 12.434L147.938 3.715L140.906 3.715L138.305 12.434L132.680 12.434L131.414 16.864L137.039 16.864Z\"/><path d=\"M151.453 30.012L158.484 30.012C159.315 27.046 160.182 24.116 161.086 21.223L144.914 21.223C142.246 29.922 139.716 38.760 137.109 47.520L144.141 47.520L150.609 25.583L152.719 25.583Z\"/><path d=\"M167.133 38.731L174.164 38.731C175.896 32.893 177.573 26.999 179.367 21.223L163.195 21.223L161.859 25.583L161.896 25.583C159.729 32.897 157.517 40.165 155.391 47.520L171.563 47.520L172.828 43.161L163.688 43.161L168.927 25.583L171 25.583Z\"/><path d=\"M173.672 47.520L189.844 47.520C191.969 40.176 194.158 32.896 196.313 25.583L197.648 21.223L181.477 21.223L180.141 25.583L189.281 25.583L184.078 43.161L181.969 43.161L185.906 30.012L178.875 30.012C177.139 35.847 175.362 41.640 173.672 47.520Z\"/><path d=\"M210.234 47.520L217.266 47.520C219.872 38.759 222.402 29.922 225.070 21.223L199.758 21.223C197.089 29.922 194.560 38.760 191.953 47.520L198.984 47.520L205.453 25.583L207.563 25.583L201.094 47.520L208.125 47.520L214.594 25.583L216.703 25.583Z\"/><path d=\"M223.242 34.372L239.414 34.372L240.750 30.012L224.578 30.012Z\"/><path d=\"M232.453 65.028L248.625 65.028C252.590 51.954 256.396 38.721 260.297 25.583L261.633 21.223L245.461 21.223C242.793 29.922 240.263 38.760 237.656 47.520L244.688 47.520L251.156 25.583L253.266 25.583L242.930 60.668L240.820 60.668L242.086 56.309L235.055 56.309C234.216 59.244 233.349 62.150 232.453 65.028Z\"/><path d=\"M270.281 30.012L277.313 30.012C278.143 27.046 279.010 24.116 279.914 21.223L263.742 21.223C261.074 29.922 258.544 38.760 255.938 47.520L262.969 47.520L269.438 25.583L271.547 25.583Z\"/><path d=\"M274.219 47.520L290.391 47.520C292.516 40.176 294.705 32.896 296.859 25.583L298.195 21.223L282.023 21.223L280.688 25.583L289.828 25.583L284.625 43.161L282.516 43.161L286.453 30.012L279.422 30.012C277.686 35.847 275.909 41.640 274.219 47.520Z\"/><path d=\"M301.641 47.520L308.672 47.520C311.278 38.759 313.809 29.922 316.477 21.223L300.305 21.223C295.901 35.757 291.642 50.436 287.297 65.028L294.328 65.028L306 25.583L308.109 25.583Z\"/><path d=\"M319.922 47.520L326.953 47.520C329.559 38.759 332.090 29.922 334.758 21.223L325.617 21.223L330.750 3.715L323.719 3.715C321.560 11.002 319.478 18.366 317.250 25.583L310.781 47.520L317.813 47.520L324.281 25.583L326.391 25.583Z\"/></svg>"
    },
    {
      "type": "paragraph",
      "id": "633fac6ecc690078",
      "text": "Stream subscription types act as graph nodes and attached transducers as graph edges, transforming data for downstream consumers / nodes. Theoretically, allows cycles and is not restricted to DAG topologies, but care must be taken to avoid CPU hogging if those cycles are causing synchronous computation loops (it the user's responsibility to avoid these and keep any cycles async)."
    },
    {
      "type": "code",
      "id": "598f68970a96f204",
      "text": "import { Atom } from 'https://esm.run/@thi.ng/atom';\nimport * as rs from 'https://esm.run/@thi.ng/rstream';\nimport * as rsg from 'https://esm.run/@thi.ng/rstream-graph';"
    },
    {
      "type": "code",
      "id": "bba425511b59b596",
      "text": "// (optional) state atom to source value change streams from\nconst state = new Atom({a: 1, b: 2});\n\n// graph declaration / definition\nconst graph = rsg.initGraph(state, {\n    // this node sources both of its inputs\n    // from values in the state atom\n    add: {\n        fn: rsg.add,\n        ins: {\n            a: { path: \"a\" },\n            b: { path: \"b\" }\n        },\n    },\n    // this node receives values from the `add` node\n    // and the given iterable\n    mul: {\n        fn: rsg.mul,\n        ins: {\n            a: { stream: \"/add/node\" },\n            b: { stream: () => rs.fromIterable([10, 20, 30]) }\n        },\n    }\n});\n\n// (optional) subscribe to individual nodes\n//graph.mul.subscribe({\n//    next: (x) => console.log(\"result:\", x)\n//});\n\n// result: 30\n// result: 60\n// result: 90\n\n// changes in subscribed atom values flow through the graph\nsetTimeout(() => state.resetIn(\"a\", 10), 1000);\n// result: 360"
    },
    {
      "type": "markdown",
      "id": "00f76ff348892888",
      "text": "# Application Frame"
    },
    {
      "type": "frame",
      "id": "ddb9f8e3172ed2a3",
      "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html"
    },
    {
      "type": "paragraph",
      "id": "23898ef57d2b68dd",
      "text": "See \"Minimal rstream dataflow graph\" [https://github.com/thi-ng/umbrella/tree/develop/examples/rstream-dataflow github] [https://demo.thi.ng/umbrella/rstream-dataflow/ demo]"
    },
    {
      "type": "image",
      "id": "345884656e60423c",
      "text": "Dataflow graph",
      "size": "wide",
      "width": 418,
      "height": 96,
      "url": "/assets/plugins/image/6c9d45bd52483b64cdda9f2372e75874.jpg"
    },
    {
      "type": "paragraph",
      "id": "bf8f2bb884c71335",
      "text": "[https://docs.thi.ng/umbrella/rstream-graph/#md:related-packages Related packages]"
    },
    {
      "type": "markdown",
      "id": "5d0a7f5e00f7a3bb",
      "text": "* @thi.ng/dot - Graphviz document abstraction & serialization to DOT format\n* @thi.ng/resolve-map - DAG resolution of vanilla objects & arrays with internally linked values\n* @thi.ng/rstream-dot - Graphviz DOT conversion of @thi.ng/rstream dataflow graph topologies"
    },
    {
      "type": "paragraph",
      "id": "c661c7d69b831490",
      "text": "â‡’ [[rstream-dataflow]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "rstream-graph",
        "story": []
      },
      "date": 1713361055038
    },
    {
      "item": {
        "type": "factory",
        "id": "8ebde6a2e275b38a"
      },
      "id": "8ebde6a2e275b38a",
      "type": "add",
      "date": 1713361056210
    },
    {
      "type": "edit",
      "id": "8ebde6a2e275b38a",
      "item": {
        "type": "code",
        "id": "8ebde6a2e275b38a",
        "text": "import * as rsg from \"@thi.ng/rstream-graph\";"
      },
      "date": 1713361060171
    },
    {
      "item": {
        "type": "factory",
        "id": "c7da7660c61d146a"
      },
      "id": "c7da7660c61d146a",
      "type": "add",
      "after": "8ebde6a2e275b38a",
      "date": 1713361097765
    },
    {
      "item": {
        "type": "factory",
        "id": "bba425511b59b596"
      },
      "id": "bba425511b59b596",
      "type": "add",
      "after": "c7da7660c61d146a",
      "date": 1713361098961
    },
    {
      "type": "edit",
      "id": "bba425511b59b596",
      "item": {
        "type": "code",
        "id": "bba425511b59b596",
        "text": "import { Atom } from \"@thi.ng/atom\";\nimport * as rs from \"@thi.ng/rstream\";\nimport * as rsg from \"@thi.ng/rstream-graph\";\n\n// (optional) state atom to source value change streams from\nconst state = new Atom({a: 1, b: 2});\n\n// graph declaration / definition\nconst graph = rsg.initGraph(state, {\n    // this node sources both of its inputs\n    // from values in the state atom\n    add: {\n        fn: rsg.add,\n        ins: {\n            a: { path: \"a\" },\n            b: { path: \"b\" }\n        },\n    },\n    // this node receives values from the `add` node\n    // and the given iterable\n    mul: {\n        fn: rsg.mul,\n        ins: {\n            a: { stream: \"/add/node\" },\n            b: { stream: () => rs.fromIterable([10, 20, 30]) }\n        },\n    }\n});\n\n// (optional) subscribe to individual nodes\ngraph.mul.subscribe({\n    next: (x) => console.log(\"result:\", x)\n});\n\n// result: 30\n// result: 60\n// result: 90\n\n// changes in subscribed atom values flow through the graph\nsetTimeout(() => state.resetIn(\"a\", 10), 1000);\n// result: 360"
      },
      "date": 1713361101914
    },
    {
      "type": "edit",
      "id": "c7da7660c61d146a",
      "item": {
        "type": "paragraph",
        "id": "c7da7660c61d146a",
        "text": "<script type=\"module\" src=\"https://cdn.skypack.dev/@thi.ng/rstream-graph\"></script>"
      },
      "date": 1713361125142
    },
    {
      "type": "edit",
      "id": "c7da7660c61d146a",
      "item": {
        "type": "paragraph",
        "id": "c7da7660c61d146a",
        "text": "<script type=\"module\" src=\"\"></script>"
      },
      "date": 1713361153540
    },
    {
      "type": "edit",
      "id": "8ebde6a2e275b38a",
      "item": {
        "type": "code",
        "id": "8ebde6a2e275b38a",
        "text": "import * as rsg from \"https://cdn.skypack.dev/@thi.ng/rstream-graph\";"
      },
      "date": 1713361222057
    },
    {
      "type": "remove",
      "id": "c7da7660c61d146a",
      "date": 1713361224630
    },
    {
      "id": "00f76ff348892888",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "00f76ff348892888",
        "text": "# Application Frame"
      },
      "after": "bba425511b59b596",
      "attribution": {
        "page": "Calculate Honeycomb Points",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1713361291316
    },
    {
      "id": "ddb9f8e3172ed2a3",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "ddb9f8e3172ed2a3",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html"
      },
      "after": "00f76ff348892888",
      "attribution": {
        "page": "Calculate Honeycomb Points",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1713361296722
    },
    {
      "type": "edit",
      "id": "bba425511b59b596",
      "item": {
        "type": "code",
        "id": "bba425511b59b596",
        "text": "import { Atom } from \"https://cdn.skypack.dev/@thi.ng/atom\";\nimport * as rs from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport * as rsg from \"https://cdn.skypack.dev/@thi.ng/rstream-graph\";\n\n// (optional) state atom to source value change streams from\nconst state = new Atom({a: 1, b: 2});\n\n// graph declaration / definition\nconst graph = rsg.initGraph(state, {\n    // this node sources both of its inputs\n    // from values in the state atom\n    add: {\n        fn: rsg.add,\n        ins: {\n            a: { path: \"a\" },\n            b: { path: \"b\" }\n        },\n    },\n    // this node receives values from the `add` node\n    // and the given iterable\n    mul: {\n        fn: rsg.mul,\n        ins: {\n            a: { stream: \"/add/node\" },\n            b: { stream: () => rs.fromIterable([10, 20, 30]) }\n        },\n    }\n});\n\n// (optional) subscribe to individual nodes\ngraph.mul.subscribe({\n    next: (x) => console.log(\"result:\", x)\n});\n\n// result: 30\n// result: 60\n// result: 90\n\n// changes in subscribed atom values flow through the graph\nsetTimeout(() => state.resetIn(\"a\", 10), 1000);\n// result: 360"
      },
      "date": 1713361380916
    },
    {
      "type": "remove",
      "id": "8ebde6a2e275b38a",
      "date": 1713361382161
    },
    {
      "item": {
        "type": "factory",
        "id": "23898ef57d2b68dd"
      },
      "id": "23898ef57d2b68dd",
      "type": "add",
      "after": "ddb9f8e3172ed2a3",
      "date": 1713364063489
    },
    {
      "type": "edit",
      "id": "23898ef57d2b68dd",
      "item": {
        "type": "paragraph",
        "id": "23898ef57d2b68dd",
        "text": "See \"Minimal rstream dataflow graph\""
      },
      "date": 1713364070532
    },
    {
      "type": "edit",
      "id": "23898ef57d2b68dd",
      "item": {
        "type": "paragraph",
        "id": "23898ef57d2b68dd",
        "text": "See \"Minimal rstream dataflow graph\" [https://github.com/thi-ng/umbrella/tree/develop/examples/rstream-dataflow github]"
      },
      "date": 1713364093053
    },
    {
      "type": "edit",
      "id": "23898ef57d2b68dd",
      "item": {
        "type": "paragraph",
        "id": "23898ef57d2b68dd",
        "text": "See \"Minimal rstream dataflow graph\" [https://github.com/thi-ng/umbrella/tree/develop/examples/rstream-dataflow github] [https://demo.thi.ng/umbrella/rstream-dataflow/ demo]"
      },
      "date": 1713364121739
    },
    {
      "item": {
        "type": "factory",
        "id": "345884656e60423c"
      },
      "id": "345884656e60423c",
      "type": "add",
      "after": "23898ef57d2b68dd",
      "date": 1713365000423
    },
    {
      "type": "edit",
      "id": "345884656e60423c",
      "item": {
        "type": "image",
        "id": "345884656e60423c",
        "text": "Uploaded image",
        "size": "wide",
        "width": 418,
        "height": 96,
        "url": "/assets/plugins/image/6c9d45bd52483b64cdda9f2372e75874.jpg"
      },
      "date": 1713365023473
    },
    {
      "type": "edit",
      "id": "345884656e60423c",
      "item": {
        "type": "image",
        "id": "345884656e60423c",
        "text": "ataflow graph",
        "size": "wide",
        "width": 418,
        "height": 96,
        "url": "/assets/plugins/image/6c9d45bd52483b64cdda9f2372e75874.jpg"
      },
      "date": 1713365032510
    },
    {
      "type": "edit",
      "id": "345884656e60423c",
      "item": {
        "type": "image",
        "id": "345884656e60423c",
        "text": "Dataflow graph",
        "size": "wide",
        "width": 418,
        "height": 96,
        "url": "/assets/plugins/image/6c9d45bd52483b64cdda9f2372e75874.jpg"
      },
      "date": 1713365035505
    },
    {
      "item": {
        "type": "factory",
        "id": "c661c7d69b831490"
      },
      "id": "c661c7d69b831490",
      "type": "add",
      "after": "345884656e60423c",
      "date": 1713365753382
    },
    {
      "type": "edit",
      "id": "c661c7d69b831490",
      "item": {
        "type": "paragraph",
        "id": "c661c7d69b831490",
        "text": "â‡’ [[rstream-dataflow]]"
      },
      "date": 1713365762711
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713381750709
    },
    {
      "type": "edit",
      "id": "bba425511b59b596",
      "item": {
        "type": "code",
        "id": "bba425511b59b596",
        "text": "// (optional) state atom to source value change streams from\nconst state = new Atom({a: 1, b: 2});\n\n// graph declaration / definition\nconst graph = rsg.initGraph(state, {\n    // this node sources both of its inputs\n    // from values in the state atom\n    add: {\n        fn: rsg.add,\n        ins: {\n            a: { path: \"a\" },\n            b: { path: \"b\" }\n        },\n    },\n    // this node receives values from the `add` node\n    // and the given iterable\n    mul: {\n        fn: rsg.mul,\n        ins: {\n            a: { stream: \"/add/node\" },\n            b: { stream: () => rs.fromIterable([10, 20, 30]) }\n        },\n    }\n});\n\n// (optional) subscribe to individual nodes\ngraph.mul.subscribe({\n    next: (x) => console.log(\"result:\", x)\n});\n\n// result: 30\n// result: 60\n// result: 90\n\n// changes in subscribed atom values flow through the graph\nsetTimeout(() => state.resetIn(\"a\", 10), 1000);\n// result: 360"
      },
      "date": 1713521159994
    },
    {
      "id": "598f68970a96f204",
      "type": "add",
      "item": {
        "type": "code",
        "id": "598f68970a96f204",
        "text": "import { Atom } from 'https://esm.run/@thi.ng/atom';\nimport * as rs from 'https://esm.run/@thi.ng/rstream';\nimport * as rsg from 'https://esm.run/@thi.ng/rstream-graph';"
      },
      "attribution": {
        "page": "rstream"
      },
      "date": 1713521227227
    },
    {
      "id": "8651907bb33345b0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8651907bb33345b0",
        "text": "Declarative, reactive dataflow graph construction using @thi.ng/rstream, @thi.ng/atom and @thi.ng/transducers primitives."
      },
      "attribution": {
        "page": "rstream"
      },
      "date": 1713521333317
    },
    {
      "type": "edit",
      "id": "8651907bb33345b0",
      "item": {
        "type": "paragraph",
        "id": "8651907bb33345b0",
        "text": "Declarative, reactive dataflow graph construction using @thi.ng/rstream, @thi.ng/atom and @thi.ng/transducers primitives. [https://docs.thi.ng/umbrella/rstream-graph/ docs]"
      },
      "date": 1713521349937
    },
    {
      "id": "ddff0ecd47e9662d",
      "type": "add",
      "item": {
        "type": "html",
        "id": "ddff0ecd47e9662d",
        "text": "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"334.758\" height=\"61.313\" viewBox=\"0 3.715312500000003 334.7578125 61.31250000000001\" stroke=\"none\"><style>path { fill: #333; } @media (prefers-color-scheme: dark) { path { fill: #ccc; } }</style><path d=\"M0 47.520L7.031 47.520C10.469 35.817 13.986 24.193 17.367 12.434L19.969 3.715L12.938 3.715L10.336 12.434L4.711 12.434L3.445 16.864L9.070 16.864Z\"/><path d=\"M18.281 47.520L25.313 47.520C27.919 38.759 30.449 29.922 33.117 21.223L23.977 21.223L29.109 3.715L22.078 3.715C19.919 11.002 17.838 18.366 15.609 25.583L9.141 47.520L16.172 47.520L22.641 25.583L24.750 25.583Z\"/><path d=\"M44.508 13.454C44.489 11.502 42.949 9.973 40.992 9.973C39.023 9.973 37.477 11.520 37.477 13.489C37.477 15.387 39.023 16.934 40.992 16.934C42.949 16.934 44.489 15.406 44.508 13.454C44.508 13.442 44.508 13.430 44.508 13.418ZM27.422 47.520L34.453 47.520L42.258 21.223L35.227 21.223Z\"/><path d=\"M44.578 44.145C44.578 42.176 43.031 40.629 41.063 40.629C39.164 40.629 37.617 42.176 37.617 44.145C37.617 46.114 39.164 47.661 41.133 47.661C43.102 47.661 44.648 46.114 44.648 44.145Z\"/><path d=\"M54.844 47.520L61.875 47.520C64.481 38.759 67.012 29.922 69.680 21.223L53.508 21.223C50.839 29.922 48.310 38.760 45.703 47.520L52.734 47.520L59.203 25.583L61.313 25.583Z\"/><path d=\"M58.781 65.028L74.953 65.028C78.918 51.954 82.725 38.721 86.625 25.583L87.961 21.223L71.789 21.223C69.121 29.922 66.591 38.760 63.984 47.520L71.016 47.520L77.484 25.583L79.594 25.583L69.258 60.668L67.148 60.668L68.414 56.309L61.383 56.309C60.544 59.244 59.677 62.150 58.781 65.028Z\"/><path d=\"M77.063 65.028L84.094 65.028L102.234 3.715L95.203 3.715Z\"/><path d=\"M105.750 30.012L112.781 30.012C113.612 27.046 114.479 24.116 115.383 21.223L99.211 21.223C96.543 29.922 94.013 38.760 91.406 47.520L98.438 47.520L104.906 25.583L107.016 25.583Z\"/><path d=\"M124.031 30.012L131.063 30.012C131.893 27.046 132.760 24.116 133.664 21.223L117.492 21.223C116.589 24.116 115.721 27.046 114.891 30.012L121.430 38.731L120.094 43.161L117.984 43.161L119.320 38.731L112.289 38.731C111.402 41.641 110.534 44.570 109.688 47.520L125.859 47.520C126.706 44.570 127.574 41.641 128.461 38.731L121.922 30.012L123.188 25.583L125.297 25.583Z\"/><path d=\"M127.969 47.520L135 47.520C138.438 35.817 141.955 24.193 145.336 12.434L147.938 3.715L140.906 3.715L138.305 12.434L132.680 12.434L131.414 16.864L137.039 16.864Z\"/><path d=\"M151.453 30.012L158.484 30.012C159.315 27.046 160.182 24.116 161.086 21.223L144.914 21.223C142.246 29.922 139.716 38.760 137.109 47.520L144.141 47.520L150.609 25.583L152.719 25.583Z\"/><path d=\"M167.133 38.731L174.164 38.731C175.896 32.893 177.573 26.999 179.367 21.223L163.195 21.223L161.859 25.583L161.896 25.583C159.729 32.897 157.517 40.165 155.391 47.520L171.563 47.520L172.828 43.161L163.688 43.161L168.927 25.583L171 25.583Z\"/><path d=\"M173.672 47.520L189.844 47.520C191.969 40.176 194.158 32.896 196.313 25.583L197.648 21.223L181.477 21.223L180.141 25.583L189.281 25.583L184.078 43.161L181.969 43.161L185.906 30.012L178.875 30.012C177.139 35.847 175.362 41.640 173.672 47.520Z\"/><path d=\"M210.234 47.520L217.266 47.520C219.872 38.759 222.402 29.922 225.070 21.223L199.758 21.223C197.089 29.922 194.560 38.760 191.953 47.520L198.984 47.520L205.453 25.583L207.563 25.583L201.094 47.520L208.125 47.520L214.594 25.583L216.703 25.583Z\"/><path d=\"M223.242 34.372L239.414 34.372L240.750 30.012L224.578 30.012Z\"/><path d=\"M232.453 65.028L248.625 65.028C252.590 51.954 256.396 38.721 260.297 25.583L261.633 21.223L245.461 21.223C242.793 29.922 240.263 38.760 237.656 47.520L244.688 47.520L251.156 25.583L253.266 25.583L242.930 60.668L240.820 60.668L242.086 56.309L235.055 56.309C234.216 59.244 233.349 62.150 232.453 65.028Z\"/><path d=\"M270.281 30.012L277.313 30.012C278.143 27.046 279.010 24.116 279.914 21.223L263.742 21.223C261.074 29.922 258.544 38.760 255.938 47.520L262.969 47.520L269.438 25.583L271.547 25.583Z\"/><path d=\"M274.219 47.520L290.391 47.520C292.516 40.176 294.705 32.896 296.859 25.583L298.195 21.223L282.023 21.223L280.688 25.583L289.828 25.583L284.625 43.161L282.516 43.161L286.453 30.012L279.422 30.012C277.686 35.847 275.909 41.640 274.219 47.520Z\"/><path d=\"M301.641 47.520L308.672 47.520C311.278 38.759 313.809 29.922 316.477 21.223L300.305 21.223C295.901 35.757 291.642 50.436 287.297 65.028L294.328 65.028L306 25.583L308.109 25.583Z\"/><path d=\"M319.922 47.520L326.953 47.520C329.559 38.759 332.090 29.922 334.758 21.223L325.617 21.223L330.750 3.715L323.719 3.715C321.560 11.002 319.478 18.366 317.250 25.583L310.781 47.520L317.813 47.520L324.281 25.583L326.391 25.583Z\"/></svg>"
      },
      "after": "8651907bb33345b0",
      "attribution": {
        "page": "rstream"
      },
      "date": 1713521383365
    },
    {
      "type": "add",
      "id": "633fac6ecc690078",
      "item": {
        "type": "paragraph",
        "id": "633fac6ecc690078",
        "text": "Stream subscription types act as graph nodes and attached transducers as graph edges, transforming data for downstream consumers / nodes. Theoretically, allows cycles and is not restricted to DAG topologies, but care must be taken to avoid CPU hogging if those cycles are causing synchronous computation loops (it the user's responsibility to avoid these and keep any cycles async)."
      },
      "after": "8651907bb33345b0",
      "date": 1713521404147
    },
    {
      "id": "633fac6ecc690078",
      "type": "move",
      "order": [
        "8651907bb33345b0",
        "ddff0ecd47e9662d",
        "633fac6ecc690078",
        "598f68970a96f204",
        "bba425511b59b596",
        "00f76ff348892888",
        "ddb9f8e3172ed2a3",
        "23898ef57d2b68dd",
        "345884656e60423c",
        "c661c7d69b831490"
      ],
      "date": 1713521406562
    },
    {
      "type": "edit",
      "id": "8651907bb33345b0",
      "item": {
        "type": "paragraph",
        "id": "8651907bb33345b0",
        "text": "Declarative, reactive dataflow graph construction using [[@thi.ng/rstream]], @thi.ng/atom and @thi.ng/transducers primitives. [https://docs.thi.ng/umbrella/rstream-graph/ docs]"
      },
      "date": 1713521459351
    },
    {
      "type": "edit",
      "id": "bba425511b59b596",
      "item": {
        "type": "code",
        "id": "bba425511b59b596",
        "text": "// (optional) state atom to source value change streams from\nconst state = new Atom({a: 1, b: 2});\n\n// graph declaration / definition\nconst graph = rsg.initGraph(state, {\n    // this node sources both of its inputs\n    // from values in the state atom\n    add: {\n        fn: rsg.add,\n        ins: {\n            a: { path: \"a\" },\n            b: { path: \"b\" }\n        },\n    },\n    // this node receives values from the `add` node\n    // and the given iterable\n    mul: {\n        fn: rsg.mul,\n        ins: {\n            a: { stream: \"/add/node\" },\n            b: { stream: () => rs.fromIterable([10, 20, 30]) }\n        },\n    }\n});\n\n// (optional) subscribe to individual nodes\n//graph.mul.subscribe({\n//    next: (x) => console.log(\"result:\", x)\n//});\n\n// result: 30\n// result: 60\n// result: 90\n\n// changes in subscribed atom values flow through the graph\nsetTimeout(() => state.resetIn(\"a\", 10), 1000);\n// result: 360"
      },
      "date": 1713521693217
    },
    {
      "item": {
        "type": "factory",
        "id": "bf8f2bb884c71335"
      },
      "id": "bf8f2bb884c71335",
      "type": "add",
      "after": "c661c7d69b831490",
      "date": 1713527732766
    },
    {
      "type": "edit",
      "id": "bf8f2bb884c71335",
      "item": {
        "type": "paragraph",
        "id": "bf8f2bb884c71335",
        "text": "Related"
      },
      "date": 1713527739116
    },
    {
      "type": "add",
      "id": "5d0a7f5e00f7a3bb",
      "item": {
        "type": "paragraph",
        "id": "5d0a7f5e00f7a3bb",
        "text": "    @thi.ng/dot - Graphviz document abstraction & serialization to DOT format\n    @thi.ng/resolve-map - DAG resolution of vanilla objects & arrays with internally linked values\n    @thi.ng/rstream-dot - Graphviz DOT conversion of @thi.ng/rstream dataflow graph topologies"
      },
      "after": "bf8f2bb884c71335",
      "date": 1713527740976
    },
    {
      "type": "edit",
      "id": "bf8f2bb884c71335",
      "item": {
        "type": "paragraph",
        "id": "bf8f2bb884c71335",
        "text": "Related packages"
      },
      "date": 1713527763161
    },
    {
      "type": "edit",
      "id": "bf8f2bb884c71335",
      "item": {
        "type": "paragraph",
        "id": "bf8f2bb884c71335",
        "text": "[https://docs.thi.ng/umbrella/rstream-graph/#md:related-packages Related packages]"
      },
      "date": 1713527780118
    },
    {
      "type": "edit",
      "id": "5d0a7f5e00f7a3bb",
      "item": {
        "type": "paragraph",
        "id": "5d0a7f5e00f7a3bb",
        "text": "* @thi.ng/dot - Graphviz document abstraction & serialization to DOT format\n* @thi.ng/resolve-map - DAG resolution of vanilla objects & arrays with internally linked values\n* @thi.ng/rstream-dot - Graphviz DOT conversion of @thi.ng/rstream dataflow graph topologies"
      },
      "date": 1713527796414
    },
    {
      "type": "edit",
      "id": "5d0a7f5e00f7a3bb",
      "item": {
        "type": "markdown",
        "id": "5d0a7f5e00f7a3bb",
        "text": "* @thi.ng/dot - Graphviz document abstraction & serialization to DOT format\n* @thi.ng/resolve-map - DAG resolution of vanilla objects & arrays with internally linked values\n* @thi.ng/rstream-dot - Graphviz DOT conversion of @thi.ng/rstream dataflow graph topologies"
      },
      "date": 1713527797563
    },
    {
      "id": "c661c7d69b831490",
      "type": "move",
      "order": [
        "8651907bb33345b0",
        "ddff0ecd47e9662d",
        "633fac6ecc690078",
        "598f68970a96f204",
        "bba425511b59b596",
        "00f76ff348892888",
        "ddb9f8e3172ed2a3",
        "23898ef57d2b68dd",
        "345884656e60423c",
        "bf8f2bb884c71335",
        "5d0a7f5e00f7a3bb",
        "c661c7d69b831490"
      ],
      "date": 1713527832668
    }
  ]
}