{
  "title": "Setting Values into Streams",
  "story": [
    {
      "type": "paragraph",
      "id": "b14297d6355815fa",
      "text": "To leave room for exploration and tools such as inspectors, the notion of “setting” or “assigning” a value into a stream exists in the KSWorld. For example, as shown in the examples of section 4.1, the stream of values that represents the position of a [[Box]] cannot be purely defined by a function of other streams, as one may want to move the Box via a halo, an inspector or other external means. (In a self-sustaining system that KSWorld is aspiring to, different kinds of inspectors may be created after the Box was created.)"
    },
    {
      "type": "paragraph",
      "id": "6037598c32e0b1df",
      "text": "To support such actions, a stream supports an operation called set.The set operation simply takes an argument and stores it into the stream. The dependents of the stream will be evaluated in the next time step."
    },
    {
      "type": "paragraph",
      "id": "80b9a2dc3dd38e70",
      "text": "This concept meshes nicely with the “constant stream”, which has no dependency and just represents a constant value. However, nothing would be totally constant in a self-sustaining system. Again, for the example of the stream that represents the position of a Box, such a Box is typically born as “vanilla”, meaing with no behavior attached, thus its position would be considered constant. However, such a Box’s position sometimes has to be changed to support the notion of direct manipulation and editing from a meta tool. Such manipulation can be easily supported by setting new values into the “constant” stream, and the dependents of the position can be naturally resolved by the same dependency evaluation mechanism."
    },
    {
      "type": "paragraph",
      "id": "ae26652d7e07e345",
      "text": "We call such a constant stream (but that still supports set) a “value stream”. To create such a stream, there is a method called streamOf() for EventStream. It takes one argument and creates a constant stream with the argument or, in other words, creates a value stream with the argument as the initial value."
    },
    {
      "type": "paragraph",
      "id": "713c87ae37d5b6e0",
      "text": "[…]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Setting Values into Streams",
        "story": []
      },
      "date": 1665402258779
    },
    {
      "item": {
        "type": "factory",
        "id": "b14297d6355815fa"
      },
      "id": "b14297d6355815fa",
      "type": "add",
      "date": 1665402270150
    },
    {
      "type": "edit",
      "id": "b14297d6355815fa",
      "item": {
        "type": "paragraph",
        "id": "b14297d6355815fa",
        "text": "To leave room for exploration and tools such as inspectors, the notion of “setting” or “assigning” a value into a stream exists in the KSWorld. For example, as shown in the examples of section 4.1, the stream of values that represents the position of a Box cannot be purely defined by a function of other streams, as one may want to move the Box via a halo, an inspector or other external means. (In a self-sustaining system that KSWorld is aspiring to, different kinds of inspectors may be created after the Box was created.)"
      },
      "date": 1665402274670
    },
    {
      "type": "edit",
      "id": "b14297d6355815fa",
      "item": {
        "type": "paragraph",
        "id": "b14297d6355815fa",
        "text": "To leave room for exploration and tools such as inspectors, the notion of “setting” or “assigning” a value into a stream exists in the KSWorld. For example, as shown in the examples of section 4.1, the stream of values that represents the position of a [[Box]] cannot be purely defined by a function of other streams, as one may want to move the Box via a halo, an inspector or other external means. (In a self-sustaining system that KSWorld is aspiring to, different kinds of inspectors may be created after the Box was created.)"
      },
      "date": 1665402300798
    },
    {
      "type": "add",
      "id": "6037598c32e0b1df",
      "item": {
        "type": "paragraph",
        "id": "6037598c32e0b1df",
        "text": "To support such actions, a stream supports an operation called set.The set operation simply takes an argument and stores it into the stream. The dependents of the stream will be evaluated in the next time step."
      },
      "after": "b14297d6355815fa",
      "date": 1665402322286
    },
    {
      "item": {
        "type": "factory",
        "id": "80b9a2dc3dd38e70"
      },
      "id": "80b9a2dc3dd38e70",
      "type": "add",
      "after": "6037598c32e0b1df",
      "date": 1665402341119
    },
    {
      "type": "edit",
      "id": "80b9a2dc3dd38e70",
      "item": {
        "type": "paragraph",
        "id": "80b9a2dc3dd38e70",
        "text": "This concept meshes nicely with the “constant stream”, which has no dependency and just represents a constant value. However, nothing would be totally constant in a self-sustaining system. Again, for the example of the stream that represents the position of a Box,suchaBox is typically born as “vanilla”, meaing with no behavior attached, thus its position would be considered constant. However, such a Box’s position sometimes has to be changed to support the notion of direct manipulation and editing from a meta tool. Such manipulation can be easily supported by setting new values into the “constant” stream, and the dependents of the position can be naturally resolved by the same dependency evaluation mechanism."
      },
      "date": 1665402346166
    },
    {
      "type": "edit",
      "id": "80b9a2dc3dd38e70",
      "item": {
        "type": "paragraph",
        "id": "80b9a2dc3dd38e70",
        "text": "This concept meshes nicely with the “constant stream”, which has no dependency and just represents a constant value. However, nothing would be totally constant in a self-sustaining system. Again, for the example of the stream that represents the position of a Box, such a Box is typically born as “vanilla”, meaing with no behavior attached, thus its position would be considered constant. However, such a Box’s position sometimes has to be changed to support the notion of direct manipulation and editing from a meta tool. Such manipulation can be easily supported by setting new values into the “constant” stream, and the dependents of the position can be naturally resolved by the same dependency evaluation mechanism."
      },
      "date": 1665402387698
    },
    {
      "type": "add",
      "id": "ae26652d7e07e345",
      "item": {
        "type": "paragraph",
        "id": "ae26652d7e07e345",
        "text": "We call such a constant stream (but that still supports set) a “value stream”. To create such a stream, there is a method called streamOf() for EventStream. It takes one argument and creates a constant stream with the argument or, in other words, creates a value stream with the argument as the initial value."
      },
      "after": "80b9a2dc3dd38e70",
      "date": 1665402420793
    },
    {
      "type": "add",
      "id": "713c87ae37d5b6e0",
      "item": {
        "type": "paragraph",
        "id": "713c87ae37d5b6e0",
        "text": "[…]"
      },
      "after": "ae26652d7e07e345",
      "date": 1665402460980
    }
  ]
}