{
  "title": "Import Miro Graphs",
  "story": [
    {
      "type": "paragraph",
      "id": "1bf9df088115201f",
      "text": "Export Miro as described by Robert Best."
    },
    {
      "type": "html",
      "id": "de5bbdcc99ad13c3",
      "text": "Try this\n<a style=\"color:blue\" href=\"javascript:void function(){miro.board.getSelection().then(a=>navigator.clipboard.writeText(JSON.stringify(a,null,2)))}();\">bookmarklet</a>.\n<p>\n"
    },
    {
      "type": "frame",
      "id": "d28867297e3b4f1f",
      "text": "//wiki.ralfbarkow.ch/assets/scripts/import-foreign-json.html\nHEIGHT 230"
    },
    {
      "type": "paragraph",
      "id": "051bee4c57ddfc7c",
      "text": "See also [[Convert from Miro Board]]"
    },
    {
      "type": "code",
      "id": "c552922cec666ac0",
      "text": "const card = e =>\n  ['card','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .replaceAll(/[^\\w ]/g,'')\n  .slice(0,26) : 'empty'"
    },
    {
      "type": "code",
      "id": "a4c23f21f247789d",
      "text": "json.filter(card).forEach(e => {\n  const name = text(e.title || e.content)\n  nids[e.id] = graph.addNode(e.type,{name})\n})"
    },
    {
      "type": "code",
      "id": "223a349e9f9011c9",
      "text": "json.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Import Miro Graphs",
        "story": []
      },
      "date": 1667434384827
    },
    {
      "item": {
        "type": "factory",
        "id": "1bf9df088115201f"
      },
      "id": "1bf9df088115201f",
      "type": "add",
      "date": 1667434477299
    },
    {
      "type": "edit",
      "id": "1bf9df088115201f",
      "item": {
        "type": "paragraph",
        "id": "1bf9df088115201f",
        "text": "Export Miro as described by Robert Best."
      },
      "date": 1667434516462
    },
    {
      "item": {
        "type": "factory",
        "id": "d28867297e3b4f1f"
      },
      "id": "d28867297e3b4f1f",
      "type": "add",
      "after": "1bf9df088115201f",
      "date": 1667435132232
    },
    {
      "type": "edit",
      "id": "d28867297e3b4f1f",
      "item": {
        "type": "frame",
        "id": "d28867297e3b4f1f",
        "text": "http://hsc.fed.wiki/assets/scripts/import-foreign-json.html"
      },
      "date": 1667435138550
    },
    {
      "type": "edit",
      "id": "d28867297e3b4f1f",
      "item": {
        "type": "frame",
        "id": "d28867297e3b4f1f",
        "text": "http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\nHEIGHT 230"
      },
      "date": 1667435154963
    },
    {
      "item": {
        "type": "factory",
        "id": "c552922cec666ac0"
      },
      "id": "c552922cec666ac0",
      "type": "add",
      "after": "d28867297e3b4f1f",
      "date": 1667436647245
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(json,graph) {\n  graph.addNode('Test')\n}"
      },
      "date": 1667436762795
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(json,graph) {\n  console.log({json})\n  graph.addNode('Test')\n}"
      },
      "date": 1667436786431
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(data,g) {\nconst nids = {}\ndata.filter(card).forEach(e => {\n  nids[e.id] = g.addNode(e.type,{name:text(e.title)})\n})\ndata.filter(connector).forEach(c => {\n  if(nids[c.start?.item]&&nids[c.end?.item])\n    g.addRel(' ',nids[c.start.item],nids[c.end.item])\n})\n}"
      },
      "date": 1667438063658
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(data,g) {\nconst card = e => ['card','preview','sticky_note','table','text','document'].includes(e.type)\nconst connector = e => e.type == 'connector'\nconst text = t => t ? t.replaceAll(/<.*?>/g,'').slice(0,26) : 'empty'\nconst link = t => t.split('\"')[1]\n\nconst nids = {}\ndata.filter(card).forEach(e => {\n  nids[e.id] = g.addNode(e.type,{name:text(e.title)})\n})\ndata.filter(connector).forEach(c => {\n  if(nids[c.start?.item]&&nids[c.end?.item])\n    g.addRel(' ',nids[c.start.item],nids[c.end.item])\n})\n}"
      },
      "date": 1667438105230
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(data,g) {\nconst card = e =>\n['card','preview','sticky_note',\n'table','text','document'].includes(e.type)\nconst connector = e => e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => t.split('\"')[1]\n\nconst nids = {}\ndata.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = g.addNode(e.type,{name})\n})\n\ndata.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    g.addRel(' ',nids[start],nids[end])\n})\n}"
      },
      "date": 1667438525828
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(data,g) {\nconst card = e =>\n['card','preview','sticky_note',\n'table','text','document'].includes(e.type)\nconst connector = e => e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => t.split('\"')[1]\nconst nids = {}\n\ndata.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = g.addNode(e.type,{name})\n})\n\ndata.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    g.addRel(' ',nids[start],nids[end])\n})\n\njson.splice(0,-1)\n}"
      },
      "date": 1667438810001
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(data,g) {\nconst card = e =>\n['card','preview','sticky_note',\n'table','text','document'].includes(e.type)\nconst connector = e => e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => t.split('\"')[1]\nconst nids = {}\n\ndata.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = g.addNode(e.type,{name})\n})\n\ndata.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    g.addRel(' ',nids[start],nids[end])\n})\n\njson.splice(0,json.length)\n}"
      },
      "date": 1667438845313
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(data,g) {\nconst card = e =>\n['card','preview','sticky_note',\n'table','text','document'].includes(e.type)\nconst connector = e => e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => t.split('\"')[1]\nconst nids = {}\n\ndata.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = g.addNode(e.type,{name})\n})\n\ndata.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    g.addRel(' ',nids[start],nids[end])\n})\n}"
      },
      "date": 1667438879684
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(data,g) {\n\nconst card = e =>\n['card','preview','sticky_note',\n'table','text','document'].includes(e.type)\nconst connector = e => e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => t.split('\"')[1]\nconst nids = {}\n\ndata.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = g.addNode(e.type,{name})\n})\n\ndata.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    g.addRel(' ',nids[start],nids[end])\n})\n}"
      },
      "date": 1667438887232
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(data,g) {\n\nconst card = e =>\n['card','preview','sticky_note',\n'table','text','document'].includes(e.type)\nconst connector = e => e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => t.split('\"')[1]\nconst nids = {}\n\ndata.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = g.addNode(e.type,{name})\n})\n\ndata.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    g.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667438896071
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(json,graph) {\n\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/graph,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667439070561
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(json,graph) {\nconsole.log({json})\n\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/graph,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667441871965
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(json,graph) {\nconsole.log('hello')\n\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/graph,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667444716033
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export function convert(json,graph) {\ngraph.addNode('foo')\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/graph,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667444800821
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\ngraph.addNode('foo')\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/graph,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667444836585
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\ngraph.addNode('foo'\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/graph,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667444845894
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\ngraph.addNode('foo')\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/graph,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667445127145
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\ngraph.addNode('foo')\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667445197106
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\n\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667445362525
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\n\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667445693675
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\n\nconst card = e =>\n  ['card','preview','sticky_note','table',\n  'text','document'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667445708948
    },
    {
      "type": "edit",
      "id": "1bf9df088115201f",
      "item": {
        "type": "paragraph",
        "id": "1bf9df088115201f",
        "text": "Export Miro as described by Robert Best. See [[Convert from Miro Board]]"
      },
      "date": 1667447249648
    },
    {
      "type": "edit",
      "id": "1bf9df088115201f",
      "item": {
        "type": "paragraph",
        "id": "1bf9df088115201f",
        "text": "Export Miro as described by Robert Best."
      },
      "date": 1667447270297
    },
    {
      "type": "add",
      "id": "051bee4c57ddfc7c",
      "item": {
        "type": "paragraph",
        "id": "051bee4c57ddfc7c",
        "text": "See [[Convert from Miro Board]]"
      },
      "after": "1bf9df088115201f",
      "date": 1667447271576
    },
    {
      "type": "edit",
      "id": "051bee4c57ddfc7c",
      "item": {
        "type": "paragraph",
        "id": "051bee4c57ddfc7c",
        "text": "See also [[Convert from Miro Board]]"
      },
      "date": 1667447280437
    },
    {
      "id": "051bee4c57ddfc7c",
      "type": "move",
      "order": [
        "1bf9df088115201f",
        "d28867297e3b4f1f",
        "051bee4c57ddfc7c",
        "c552922cec666ac0"
      ],
      "date": 1667447284089
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\n\nconst card = e =>\n  ['card','preview','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\nconst link = t => \n  t.split('\"')[1]\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667447937058
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\n\nconst card = e =>\n  ['card','preview','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title || e.contents)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667448234643
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\n\nconst card = e =>\n  ['card','preview','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .slice(0,26) : 'empty'\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title || e.content)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667448317817
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\n\nconst card = e =>\n  ['card','preview','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .replaceAll(/[^\\w ]/g,'')\n  .slice(0,26) : 'empty'\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title || e.content)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667448445240
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "export async function convert(json,graph) {\n\nconst card = e =>\n  ['card','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .replaceAll(/[^\\w ]/g,'')\n  .slice(0,26) : 'empty'\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title || e.content)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})\n\n}"
      },
      "date": 1667448588659
    },
    {
      "type": "add",
      "id": "de5bbdcc99ad13c3",
      "item": {
        "type": "factory",
        "id": "de5bbdcc99ad13c3",
        "text": "vv"
      },
      "after": "1bf9df088115201f",
      "date": 1667450696039
    },
    {
      "type": "edit",
      "id": "de5bbdcc99ad13c3",
      "item": {
        "type": "html",
        "id": "de5bbdcc99ad13c3",
        "text": "<center>\n<a href=\"javascript:void function(){miro.board.getSelection().then(a=>navigator.clipboard.writeText(JSON.stringify(a)))}();\">bookmarklet</a>"
      },
      "date": 1667450746983
    },
    {
      "type": "edit",
      "id": "de5bbdcc99ad13c3",
      "item": {
        "type": "html",
        "id": "de5bbdcc99ad13c3",
        "text": "<center>\n<p>\n<a href=\"javascript:void function(){miro.board.getSelection().then(a=>navigator.clipboard.writeText(JSON.stringify(a,null,2)))}();\">bookmarklet</a>\n</p>\n</center>"
      },
      "date": 1667450811061
    },
    {
      "type": "edit",
      "id": "de5bbdcc99ad13c3",
      "item": {
        "type": "html",
        "id": "de5bbdcc99ad13c3",
        "text": "Try this\n<a href=\"javascript:void function(){miro.board.getSelection().then(a=>navigator.clipboard.writeText(JSON.stringify(a,null,2)))}();\">bookmarklet</a>\n"
      },
      "date": 1667450854186
    },
    {
      "type": "edit",
      "id": "de5bbdcc99ad13c3",
      "item": {
        "type": "html",
        "id": "de5bbdcc99ad13c3",
        "text": "<p>Try this\n<a href=\"javascript:void function(){miro.board.getSelection().then(a=>navigator.clipboard.writeText(JSON.stringify(a,null,2)))}();\">bookmarklet</a></p>\n"
      },
      "date": 1667450869042
    },
    {
      "type": "edit",
      "id": "de5bbdcc99ad13c3",
      "item": {
        "type": "html",
        "id": "de5bbdcc99ad13c3",
        "text": "<p>Try this\n<a style=\"color:blue\" href=\"javascript:void function(){miro.board.getSelection().then(a=>navigator.clipboard.writeText(JSON.stringify(a,null,2)))}();\">bookmarklet</a></p>\n"
      },
      "date": 1667450906481
    },
    {
      "type": "edit",
      "id": "de5bbdcc99ad13c3",
      "item": {
        "type": "html",
        "id": "de5bbdcc99ad13c3",
        "text": "Try this\n<a style=\"color:blue\" href=\"javascript:void function(){miro.board.getSelection().then(a=>navigator.clipboard.writeText(JSON.stringify(a,null,2)))}();\">bookmarklet</a>.\n<p>\n"
      },
      "date": 1667450933407
    },
    {
      "type": "fork",
      "date": 1667508168971
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "const card = e =>\n  ['card','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .replaceAll(/[^\\w ]/g,'')\n  .slice(0,26) : 'empty'\n\nconst nids = {}\n\njson.filter(card).forEach(e => {\n  const name = text(e.title || e.content)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})"
      },
      "date": 1667509248533
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "const card = e =>\n  ['card','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .replaceAll(/[^\\w ]/g,'')\n  .slice(0,26) : 'empty'\n\njson.filter(card).forEach(e => {\n  const name = text(e.title || e.content)\n  nids[e.id] = graph.addNode(e.type,{name})\n})\n\njson.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})"
      },
      "date": 1667509281545
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "const card = e =>\n  ['card','sticky_note'].includes(e.type)\nconst connector = e => \n  e.type == 'connector'\nconst text = t => t ? t\n  .replaceAll(/<.*?>/g,'')\n  .replaceAll(/[^\\w ]/g,'')\n  .slice(0,26) : 'empty'"
      },
      "date": 1667509983980
    },
    {
      "item": {
        "type": "factory",
        "id": "a4c23f21f247789d"
      },
      "id": "a4c23f21f247789d",
      "type": "add",
      "after": "c552922cec666ac0",
      "date": 1667509985718
    },
    {
      "type": "edit",
      "id": "a4c23f21f247789d",
      "item": {
        "type": "code",
        "id": "a4c23f21f247789d",
        "text": "json.filter(card).forEach(e => {\n  const name = text(e.title || e.content)\n  nids[e.id] = graph.addNode(e.type,{name})\n})"
      },
      "date": 1667510001879
    },
    {
      "item": {
        "type": "factory",
        "id": "223a349e9f9011c9"
      },
      "id": "223a349e9f9011c9",
      "type": "add",
      "after": "a4c23f21f247789d",
      "date": 1667510005609
    },
    {
      "type": "edit",
      "id": "223a349e9f9011c9",
      "item": {
        "type": "code",
        "id": "223a349e9f9011c9",
        "text": "json.filter(connector).forEach(c => {\n  const start = c.start?.item\n  const end = c.end?.item\n  if(nids[start]&&nids[end])\n    graph.addRel(' ',nids[start],nids[end])\n})"
      },
      "date": 1667510016974
    },
    {
      "type": "fork",
      "site": "hsc.fed.wiki",
      "date": 1667513819061
    },
    {
      "type": "edit",
      "id": "d28867297e3b4f1f",
      "item": {
        "type": "frame",
        "id": "d28867297e3b4f1f",
        "text": "//wiki.ralfbarkow.ch/assets/scripts/import-foreign-json.html\nHEIGHT 230"
      },
      "date": 1667513837405
    }
  ]
}