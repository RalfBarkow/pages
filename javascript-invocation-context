{
  "title": "JavaScript Invocation Context",
  "story": [
    {
      "type": "paragraph",
      "id": "cd01df9bf93293fb",
      "text": "Invocation context is the key to managing the value of `this` within a function. `this` is one way to facilitate code reuse, by making our functions more general. Instead of operating on one specific object in the scope in which they are declared, they can instead operate on the object that is their invocation context."
    },
    {
      "type": "paragraph",
      "id": "947f0d1400aead87",
      "text": "Functions can be invoked in several ways, which leads to different values of `this` within the function."
    },
    {
      "type": "paragraph",
      "id": "78153e795891985b",
      "text": "A function expression can be called immediately by placing a set of () after the function body. Functions can also be invoked in the normal way by placing a set of () with arguments to be passed in after the variable a function is assigned to. In both of these cases the context of a function is the global object. So a function modifying this.test in that manner would really be modifying the global test variable. Improper use of `this` thus becomes one of the major sources of global leakage."
    },
    {
      "type": "paragraph",
      "id": "767a46cfcc510bf9",
      "text": "Functions can also be assigned as properties of objects, where we refer to them as methods. When a function is invoked as a method the value of `this` is the object the method is a property of. This is the common way to set invocation contest, and how `this` is mostly used. Even if a method is inherited it's invocation contest is the object it is directly accessed from."
    },
    {
      "type": "paragraph",
      "id": "08f9d8bfbac53ca9",
      "text": "There are also two methods to manually invoke a function in the context of an object it is not a property of. `function.call()` and `function.apply()` both take an object as the first argument, which gets used as the function's context. Where they differ is that call takes arguments to be passed to the function as a comma separated list of arguments passed to it. Apply on the other hand takes an array of arguments to be passed to the function as it's second argument."
    },
    {
      "type": "paragraph",
      "id": "ba4e2f3f0cb6706d",
      "text": "There is also `function.bind()` which works slightly differently. Like the other two it takes an object to bind the context to as it's first argument, however it doesn't invoke the function immediately. It instead returns a new function that no matter how it is invoked, in any manner above, always uses the value it was bound to as `this`. Any other values passed to bind are bound as arguments, creating a native way to do partial functional application in JavaScript, albeit restricted to starting with the left hand arguments."
    },
    {
      "type": "paragraph",
      "id": "94b2721806c37694",
      "text": "The three methods used to invoke a function in a specific context can use null as that context, which is most useful when you do not intend to do anything with the `this` value. In strict mode `this` will be null, but in non-strict it will still be a direct reference to the global object."
    },
    {
      "type": "paragraph",
      "id": "ad0d410e4dd45841",
      "text": "Don't forget that nested functions have their own value of `this`, shadowing the `this` you are using in the outer scope. That can be worked around with the methods above, or by assigning outer `this` to a variable, traditionally `self`. This is the kind of bug that is very hard to visually parse, and even harder to detect w/ linting or analysis, so be careful with `this`."
    },
    {
      "type": "paragraph",
      "id": "1aee54c7c0fa1fea",
      "text": "The `new` keyword is the most confusing way to invoke a function. You do not need to put parenthesis after the function you are invoking, unless you are passing in arguments, and even if you do, it isn't invoked in the global context. Instead an object is created, that inherits from that functions prototype method, and is then used as the invocation context of the function. If the return value of the function isn't an object, then the function returns `this`(the new object). We'll talk more about this in [[JavaScript Inheritance]]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "id": "83294fef5478ee9f",
      "item": {
        "title": "JavaScript Invocation Context"
      },
      "date": 1346223875589
    },
    {
      "item": {
        "type": "factory",
        "id": "cd01df9bf93293fb"
      },
      "id": "cd01df9bf93293fb",
      "type": "add",
      "date": 1346225709436
    },
    {
      "type": "edit",
      "id": "cd01df9bf93293fb",
      "item": {
        "type": "paragraph",
        "id": "cd01df9bf93293fb",
        "text": "Invocation context is the key to managing the value of `this` within a function. `this` is one way to facilitate code reuse, by making our functions more general. Instead of operating on one specific object in the scope in which they are declared, they can instead operate on the object that is their invocation context."
      },
      "date": 1346225859085
    },
    {
      "item": {
        "type": "paragraph",
        "id": "947f0d1400aead87",
        "text": ""
      },
      "id": "947f0d1400aead87",
      "type": "add",
      "after": "cd01df9bf93293fb",
      "date": 1346225859595
    },
    {
      "type": "edit",
      "id": "947f0d1400aead87",
      "item": {
        "type": "paragraph",
        "id": "947f0d1400aead87",
        "text": "Functions can be invoked in several ways, which leads to different values of `this` within the function."
      },
      "date": 1346225917750
    },
    {
      "item": {
        "type": "paragraph",
        "id": "78153e795891985b",
        "text": ""
      },
      "id": "78153e795891985b",
      "type": "add",
      "after": "947f0d1400aead87",
      "date": 1346225918261
    },
    {
      "type": "edit",
      "id": "78153e795891985b",
      "item": {
        "type": "paragraph",
        "id": "78153e795891985b",
        "text": "A function expression can be called immediately by placing a set of () after the function body. Functions can also be invoked in the normal way by placing a set of () with arguments to be passed in after the variable a function is assigned to. In both of these cases the context of a function is the global object. So a function modifying this.test in that manner would really be modifying the global test variable. Improper use of `this` thus becomes one of the major sources of global leakage."
      },
      "date": 1346226171295
    },
    {
      "item": {
        "type": "paragraph",
        "id": "767a46cfcc510bf9",
        "text": ""
      },
      "id": "767a46cfcc510bf9",
      "type": "add",
      "after": "78153e795891985b",
      "date": 1346226171809
    },
    {
      "type": "edit",
      "id": "767a46cfcc510bf9",
      "item": {
        "type": "paragraph",
        "id": "767a46cfcc510bf9",
        "text": "Functions can also be assigned as properties of objects, where we refer to them as methods. When a function is invoked as a method the value of `this` is the object the method is a property of. This is the common way to set invocation contest, and how `this` is mostly used. Even if a method is inherited it's invocation contest is the object it is directly accessed from."
      },
      "date": 1346226369410
    },
    {
      "item": {
        "type": "paragraph",
        "id": "08f9d8bfbac53ca9",
        "text": ""
      },
      "id": "08f9d8bfbac53ca9",
      "type": "add",
      "after": "767a46cfcc510bf9",
      "date": 1346226369917
    },
    {
      "type": "edit",
      "id": "08f9d8bfbac53ca9",
      "item": {
        "type": "paragraph",
        "id": "08f9d8bfbac53ca9",
        "text": "There are also two methods to manually invoke a function in the context of an object it is not a property of. `function.call()` and `function.apply()` both take an object as the first argument, which gets used as the function's context. Where they differ is that call takes arguments to be passed to the function as a comma separated list of arguments passed to it. Apply on the other hand takes an array of arguments to be passed to the function as it's second argument."
      },
      "date": 1346226564074
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ba4e2f3f0cb6706d",
        "text": ""
      },
      "id": "ba4e2f3f0cb6706d",
      "type": "add",
      "after": "08f9d8bfbac53ca9",
      "date": 1346226564580
    },
    {
      "type": "edit",
      "id": "ba4e2f3f0cb6706d",
      "item": {
        "type": "paragraph",
        "id": "ba4e2f3f0cb6706d",
        "text": "There is also `function.bind()` which works slightly differently. Like the other two it takes an object to bind the context to as it's first argument, however it doesn't invoke the function immediately. It instead returns a new function that no matter how it is invoked, in any manner above, always uses the value it was bound to as `this`. Any other values passed to bind are bound as arguments, creating a native way to do partial functional application in JavaScript, albeit restricted to starting with the left hand arguments."
      },
      "date": 1346226797778
    },
    {
      "item": {
        "type": "paragraph",
        "id": "94b2721806c37694",
        "text": ""
      },
      "id": "94b2721806c37694",
      "type": "add",
      "after": "ba4e2f3f0cb6706d",
      "date": 1346226798285
    },
    {
      "type": "edit",
      "id": "94b2721806c37694",
      "item": {
        "type": "paragraph",
        "id": "94b2721806c37694",
        "text": "The three methods used to invoke a function in a specific context can use null as that context, which is most useful when you do not intend to do anything with the `this` value, and don't want it to be a direct reference to the global object."
      },
      "date": 1346226969757
    },
    {
      "item": {
        "type": "factory",
        "id": "1aee54c7c0fa1fea"
      },
      "id": "1aee54c7c0fa1fea",
      "type": "add",
      "after": "94b2721806c37694",
      "date": 1346227017859
    },
    {
      "type": "edit",
      "id": "1aee54c7c0fa1fea",
      "item": {
        "type": "paragraph",
        "id": "1aee54c7c0fa1fea",
        "text": "The new keyword is most confusing way to invoke a function. You do not need to put parithesies after the function you are invoking, unless you are passing in arguments, and even if you do, it isn't invoked in the global contest. Instead an object is created, that inherits from that functions prototype method, and is then used as the invocation context of the function. If the return value of the function isn't an object, then the function returns `this`(the new object). We'll talk more about this in [[JavaScript Inheritance]]."
      },
      "date": 1346227303214
    },
    {
      "type": "edit",
      "id": "1aee54c7c0fa1fea",
      "item": {
        "type": "paragraph",
        "id": "1aee54c7c0fa1fea",
        "text": "The `new` keyword is the most confusing way to invoke a function. You do not need to put parenthesis after the function you are invoking, unless you are passing in arguments, and even if you do, it isn't invoked in the global context. Instead an object is created, that inherits from that functions prototype method, and is then used as the invocation context of the function. If the return value of the function isn't an object, then the function returns `this`(the new object). We'll talk more about this in [[JavaScript Inheritance]]."
      },
      "date": 1346285359355
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ad0d410e4dd45841",
        "text": ""
      },
      "id": "ad0d410e4dd45841",
      "type": "add",
      "after": "94b2721806c37694",
      "date": 1362639246453
    },
    {
      "type": "edit",
      "id": "ad0d410e4dd45841",
      "item": {
        "type": "paragraph",
        "id": "ad0d410e4dd45841",
        "text": "Don't forget that nested functions have their own valu e of `this`, shadowing the `this` you are using in the outer scope. That can be worked around with the methods above, or by assigning outer `this` to a variable, traditionally `self`. This is the kind of bug that is very hard to visually parse, and even harder to detect w/ linting or analysis, so be careful with `this`."
      },
      "date": 1362639484992
    },
    {
      "type": "edit",
      "id": "94b2721806c37694",
      "item": {
        "type": "paragraph",
        "id": "94b2721806c37694",
        "text": "The three methods used to invoke a function in a specific context can use null as that context, which is most useful when you do not intend to do anything with the `this` value. In strict mode `this` will be null, but in non-strict it will still be a direct reference to the global object."
      },
      "date": 1368726282726
    },
    {
      "type": "edit",
      "id": "ad0d410e4dd45841",
      "item": {
        "type": "paragraph",
        "id": "ad0d410e4dd45841",
        "text": "Don't forget that nested functions have their own value of `this`, shadowing the `this` you are using in the outer scope. That can be worked around with the methods above, or by assigning outer `this` to a variable, traditionally `self`. This is the kind of bug that is very hard to visually parse, and even harder to detect w/ linting or analysis, so be careful with `this`."
      },
      "date": 1368726291441
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1678777275417
    }
  ]
}