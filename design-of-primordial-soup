{
  "title": "Design of Primordial Soup",
  "story": [
    {
      "type": "markdown",
      "id": "98d93865ca764330",
      "text": "Primordial [[Soup]] (or psoup) is an implementation of the [[Newspeak]] programming language. It consists of a virtual machine and platform modules written against the primitives the VM provides.\n\n"
    },
    {
      "type": "markdown",
      "id": "0e36636f5f5a0205",
      "text": "\nA Newspeak program defines a graph of objects that evolves over time as a result of message sends. The virtual machine runs snapshots, which are the serialized form of the platform object and an application object. The VM starts by deserializing a snapshot into a heap, then interprets bytecode from an initial message until it encounters an exit primitive. [https://github.com/newspeaklanguage/primordialsoup This repository] includes a snapshot for a compiler that takes Newspeak source code and produces application snapshots that can be run by the VM.\n\nThe major components of the virtual machine are an object memory, an interpreter and a set of primitives. The object memory defines the representation of objects in memory, and manages their allocation and garbage collection. The interpreter executes bytecode methods produced by the compiler. It implements operations on the expression stack, message sends and returns. Some methods have a corresponding primitive, which runs in place of the method body. Primitives implement operations that cannot be expressed by the language as a regular method body, such as arithmetic, array access, string operations, become, allInstances, isolate messaging, etc. Together, these components direct the evolution of a program's objects over time.\n\n(It is essential for the object-capability model that code outside of the platform implementation cannot mark its methods as primitive, otherwise the set of primitives would constitute ambient authority. Currently the compiler marks methods as primitive based metadata in their bodies, providing an ambient authority.)"
    },
    {
      "type": "markdown",
      "id": "2a743ff7bec0188d",
      "text": "## Object Representation\n\nThe object representation is based on that of the [https://github.com/dart-lang/sdk/blob/master/runtime/vm/raw_object.h Dart VM].\n\nObject pointers refer either to immediate objects or heap objects, as distinguished by a tag in the low bits of the pointer. Primordial Soup has only one kind of immediate object, SmallIntegers, whose pointers have a tag of 0. Heap objects have a pointer tag of 1. The upper bits of a SmallInteger pointer are its value, and the upper bits of a heap object pointer are the most signficant bits of its address (the least significant bit is always 0 because heap objects always have greater than 2-byte alignment).\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Design of Primordial Soup",
        "story": []
      },
      "date": 1631340925547
    },
    {
      "item": {
        "type": "factory",
        "id": "98d93865ca764330"
      },
      "id": "98d93865ca764330",
      "type": "add",
      "date": 1631340933288
    },
    {
      "type": "edit",
      "id": "98d93865ca764330",
      "item": {
        "type": "markdown",
        "id": "98d93865ca764330",
        "text": "\n\nPrimordial Soup (or psoup) is an implementation of the Newspeak programming language. It consists of a virtual machine and platform modules written against the primitives the VM provides.\n\nA Newspeak program defines a graph of objects that evolves over time as a result of message sends. The virtual machine runs snapshots, which are the serialized form of the platform object and an application object. The VM starts by deserializing a snapshot into a heap, then interprets bytecode from an initial message until it encounters an exit primitive. This repository includes a snapshot for a compiler that takes Newspeak source code and produces application snapshots that can be run by the VM.\n\nThe major components of the virtual machine are an object memory, an interpreter and a set of primitives. The object memory defines the representation of objects in memory, and manages their allocation and garbage collection. The interpreter executes bytecode methods produced by the compiler. It implements operations on the expression stack, message sends and returns. Some methods have a corresponding primitive, which runs in place of the method body. Primitives implement operations that cannot be expressed by the language as a regular method body, such as arithmetic, array access, string operations, become, allInstances, isolate messaging, etc. Together, these components direct the evolution of a program's objects over time.\n\n(It is essential for the object-capability model that code outside of the platform implementation cannot mark its methods as primitive, otherwise the set of primitives would constitute ambient authority. Currently the compiler marks methods as primitive based metadata in their bodies, providing an ambient authority.)"
      },
      "date": 1631340936019
    },
    {
      "type": "edit",
      "id": "98d93865ca764330",
      "item": {
        "type": "markdown",
        "id": "98d93865ca764330",
        "text": "\nPrimordial Soup (or psoup) is an implementation of the [[Newspeak]] programming language. It consists of a virtual machine and platform modules written against the primitives the VM provides.\n\nA Newspeak program defines a graph of objects that evolves over time as a result of message sends. The virtual machine runs snapshots, which are the serialized form of the platform object and an application object. The VM starts by deserializing a snapshot into a heap, then interprets bytecode from an initial message until it encounters an exit primitive. This repository includes a snapshot for a compiler that takes Newspeak source code and produces application snapshots that can be run by the VM.\n\nThe major components of the virtual machine are an object memory, an interpreter and a set of primitives. The object memory defines the representation of objects in memory, and manages their allocation and garbage collection. The interpreter executes bytecode methods produced by the compiler. It implements operations on the expression stack, message sends and returns. Some methods have a corresponding primitive, which runs in place of the method body. Primitives implement operations that cannot be expressed by the language as a regular method body, such as arithmetic, array access, string operations, become, allInstances, isolate messaging, etc. Together, these components direct the evolution of a program's objects over time.\n\n(It is essential for the object-capability model that code outside of the platform implementation cannot mark its methods as primitive, otherwise the set of primitives would constitute ambient authority. Currently the compiler marks methods as primitive based metadata in their bodies, providing an ambient authority.)"
      },
      "date": 1631340947698
    },
    {
      "type": "edit",
      "id": "98d93865ca764330",
      "item": {
        "type": "markdown",
        "id": "98d93865ca764330",
        "text": "Primordial Soup (or psoup) is an implementation of the [[Newspeak]] programming language. It consists of a virtual machine and platform modules written against the primitives the VM provides.\n\n\nA Newspeak program defines a graph of objects that evolves over time as a result of message sends. The virtual machine runs snapshots, which are the serialized form of the platform object and an application object. The VM starts by deserializing a snapshot into a heap, then interprets bytecode from an initial message until it encounters an exit primitive. [This repository https://github.com/newspeaklanguage/primordialsoup] includes a snapshot for a compiler that takes Newspeak source code and produces application snapshots that can be run by the VM.\n\nThe major components of the virtual machine are an object memory, an interpreter and a set of primitives. The object memory defines the representation of objects in memory, and manages their allocation and garbage collection. The interpreter executes bytecode methods produced by the compiler. It implements operations on the expression stack, message sends and returns. Some methods have a corresponding primitive, which runs in place of the method body. Primitives implement operations that cannot be expressed by the language as a regular method body, such as arithmetic, array access, string operations, become, allInstances, isolate messaging, etc. Together, these components direct the evolution of a program's objects over time.\n\n(It is essential for the object-capability model that code outside of the platform implementation cannot mark its methods as primitive, otherwise the set of primitives would constitute ambient authority. Currently the compiler marks methods as primitive based metadata in their bodies, providing an ambient authority.)"
      },
      "date": 1631341744275
    },
    {
      "type": "edit",
      "id": "98d93865ca764330",
      "item": {
        "type": "markdown",
        "id": "98d93865ca764330",
        "text": "Primordial Soup (or psoup) is an implementation of the [[Newspeak]] programming language. It consists of a virtual machine and platform modules written against the primitives the VM provides.\n\n"
      },
      "date": 1631341752647
    },
    {
      "type": "add",
      "id": "0e36636f5f5a0205",
      "item": {
        "type": "markdown",
        "id": "0e36636f5f5a0205",
        "text": "\nA Newspeak program defines a graph of objects that evolves over time as a result of message sends. The virtual machine runs snapshots, which are the serialized form of the platform object and an application object. The VM starts by deserializing a snapshot into a heap, then interprets bytecode from an initial message until it encounters an exit primitive. [https://github.com/newspeaklanguage/primordialsoup This repository] includes a snapshot for a compiler that takes Newspeak source code and produces application snapshots that can be run by the VM.\n\nThe major components of the virtual machine are an object memory, an interpreter and a set of primitives. The object memory defines the representation of objects in memory, and manages their allocation and garbage collection. The interpreter executes bytecode methods produced by the compiler. It implements operations on the expression stack, message sends and returns. Some methods have a corresponding primitive, which runs in place of the method body. Primitives implement operations that cannot be expressed by the language as a regular method body, such as arithmetic, array access, string operations, become, allInstances, isolate messaging, etc. Together, these components direct the evolution of a program's objects over time.\n\n(It is essential for the object-capability model that code outside of the platform implementation cannot mark its methods as primitive, otherwise the set of primitives would constitute ambient authority. Currently the compiler marks methods as primitive based metadata in their bodies, providing an ambient authority.)"
      },
      "after": "98d93865ca764330",
      "date": 1631341764173
    },
    {
      "item": {
        "type": "factory",
        "id": "2a743ff7bec0188d"
      },
      "id": "2a743ff7bec0188d",
      "type": "add",
      "after": "0e36636f5f5a0205",
      "date": 1631522364478
    },
    {
      "type": "edit",
      "id": "2a743ff7bec0188d",
      "item": {
        "type": "markdown",
        "id": "2a743ff7bec0188d",
        "text": "## Object Representation\n\nThe object representation is based on that of the [Dart VM](https://github.com/dart-lang/sdk/blob/master/runtime/vm/raw_object.h).\n\nObject pointers refer either to immediate objects or heap objects, as distinguished by a tag in the low bits of the pointer. Primordial Soup has only one kind of immediate object, SmallIntegers, whose pointers have a tag of 0. Heap objects have a pointer tag of 1. The upper bits of a SmallInteger pointer are its value, and the upper bits of a heap object pointer are the most signficant bits of its address (the least significant bit is always 0 because heap objects always have greater than 2-byte alignment).\n"
      },
      "date": 1631522367723
    },
    {
      "type": "edit",
      "id": "2a743ff7bec0188d",
      "item": {
        "type": "markdown",
        "id": "2a743ff7bec0188d",
        "text": "## Object Representation\n\nThe object representation is based on that of the (https://github.com/dart-lang/sdk/blob/master/runtime/vm/raw_object.h Dart VM).\n\nObject pointers refer either to immediate objects or heap objects, as distinguished by a tag in the low bits of the pointer. Primordial Soup has only one kind of immediate object, SmallIntegers, whose pointers have a tag of 0. Heap objects have a pointer tag of 1. The upper bits of a SmallInteger pointer are its value, and the upper bits of a heap object pointer are the most signficant bits of its address (the least significant bit is always 0 because heap objects always have greater than 2-byte alignment).\n"
      },
      "date": 1631522528409
    },
    {
      "type": "edit",
      "id": "2a743ff7bec0188d",
      "item": {
        "type": "markdown",
        "id": "2a743ff7bec0188d",
        "text": "## Object Representation\n\nThe object representation is based on that of the [https://github.com/dart-lang/sdk/blob/master/runtime/vm/raw_object.h Dart VM].\n\nObject pointers refer either to immediate objects or heap objects, as distinguished by a tag in the low bits of the pointer. Primordial Soup has only one kind of immediate object, SmallIntegers, whose pointers have a tag of 0. Heap objects have a pointer tag of 1. The upper bits of a SmallInteger pointer are its value, and the upper bits of a heap object pointer are the most signficant bits of its address (the least significant bit is always 0 because heap objects always have greater than 2-byte alignment).\n"
      },
      "date": 1631522538683
    },
    {
      "type": "edit",
      "id": "98d93865ca764330",
      "item": {
        "type": "markdown",
        "id": "98d93865ca764330",
        "text": "Primordial [[Soup]] (or psoup) is an implementation of the [[Newspeak]] programming language. It consists of a virtual machine and platform modules written against the primitives the VM provides.\n\n"
      },
      "date": 1652953538717
    }
  ]
}