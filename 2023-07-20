{
  "title": "2023-07-20",
  "story": [
    {
      "type": "paragraph",
      "id": "cdfb1db6d109ff31",
      "text": "⇒ [[elm-pages]]"
    },
    {
      "type": "image",
      "id": "9c99b90cc23262ed",
      "text": "Visualizing the v3 architecture - feedback wanted #376 [https://github.com/dillonkearns/elm-pages/discussions/376 github]",
      "size": "wide",
      "width": 419,
      "height": 297,
      "url": "/assets/plugins/image/541da94dbfed966ecab027ea8be6259a.jpg"
    },
    {
      "type": "markdown",
      "id": "4500c0aca22b1fa0",
      "text": "This shows the flow through 3 user interactions:\n\n1. Open Page (go to initial URL in browser)\n1. Submit Form (click favorite button)\n1. Click Button (click on a non-form button with an onClick)\n"
    },
    {
      "type": "paragraph",
      "id": "c37506e429062a8f",
      "text": "In (1), we hit the database using our definitions in our custom-backend-task.ts."
    },
    {
      "type": "paragraph",
      "id": "05f8bf7f4989a736",
      "text": "In (2), the form makes a POST request to our Backend App. After running the BackendTask in action with the incoming HTTP request, our data is re-fetched from the Frontend App in order to get fresh data from any changes (like a new favorite count)."
    },
    {
      "type": "paragraph",
      "id": "84a57d6f4945d17e",
      "text": "(3) is a vanilla Elm Msg. It doesn't communicate with the server at all. It directly sends a ToggleMenu Msg, which updates the Model to show the menu."
    },
    {
      "type": "pagefold",
      "id": "3449e27841b6b591",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "eadb29a6ee00eb3c",
      "site": "scad.fed.wiki",
      "slug": "photo-rotator",
      "title": "Photo Rotator",
      "text": "We're liking the most recent version of the Photo Rotator because it has a hover that will show images selected from the same page. We've extended it with parameters for rotating through any site with an [[Image Caption Survey]]."
    },
    {
      "type": "pagefold",
      "id": "987ed054152afc3c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "d5ce0e889a27c1aa",
      "text": "Building a blog with elm-pages has been way easier than with next.js imho\nIm pulling in a list of markdown files' names with node in a custom backend task, but then i transform and combine them into a List of backendtasks to load all those markdown files' data to turn into a list of blog posts. (idk if thats the right way, but it works great) [https://elmlang.slack.com/archives/CNSNETV37/p1689787826223299 post]"
    },
    {
      "type": "paragraph",
      "id": "c8982faeaccf7ce7",
      "text": "Adapters [https://elm-pages.com/docs/adapters/ page]"
    },
    {
      "type": "paragraph",
      "id": "64ac1cc9017baebb",
      "text": "If you only use pre-rendered routes in your elm-pages app, then elm-pages build will generate its output in a dist/ folder and you can use that output with your static hosting method of choice."
    },
    {
      "type": "paragraph",
      "id": "fd50c350f3c1a7e2",
      "text": "However, if you are using server-rendered routes, you will need a way to take the server-side code for your elm-pages app, and glue that together to run in the context of your server. The core code for rendering the HTML for your elm-pages app given an incoming request (URL, method, headers, etc.) is the same for any app. What differs is:"
    },
    {
      "type": "markdown",
      "id": "c4966e0da383a3bf",
      "text": "* **Request** – What is the format of the raw request data?\n\n* **Response** – How do you take the response from the elm-pages app and turn it into the response type that your server or hosting provider needs? For example, a Netlify Serverless function has a different contract for sending responses than an Express server.\n\n* **Wiring** – Where do you put files and code in order to run this code in the context of your server or hosting provider? Your server or hosting provider may have different conventions for where to put your code and how to run it, and you will likely need to move some files and generate some glue code to wire things up."
    },
    {
      "type": "pagefold",
      "id": "5a5102811bbb0bed",
      "text": "pre-rendered"
    },
    {
      "type": "paragraph",
      "id": "591fb75899f8a94d",
      "text": "Introducing elm-pages v3 - full-stack Elm and scripts! [https://discourse.elm-lang.org/t/introducing-elm-pages-v3-full-stack-elm-and-scripts/9185 page]"
    },
    {
      "type": "markdown",
      "id": "df7d800660849c32",
      "text": "* The elm-pages Architecture [https://elm-pages.com/docs/architecture/ page]"
    },
    {
      "type": "paragraph",
      "id": "4781e167d5d0d7ed",
      "text": "It’s a wrapper around a regular Elm app, so the init/update/Model all works the same way. The Model is not serialized, so you can have any data types in there. Only Data and ActionData are serialized (the additions on top of the standard Elm Architecture). [https://discourse.elm-lang.org/t/introducing-elm-pages-v3-full-stack-elm-and-scripts/9185/8 page], [https://discourse.elm-lang.org/t/introducing-elm-pages-v3-full-stack-elm-and-scripts/9185/13 page]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-07-20",
        "story": []
      },
      "date": 1689843635467
    },
    {
      "item": {
        "type": "factory",
        "id": "cdfb1db6d109ff31"
      },
      "id": "cdfb1db6d109ff31",
      "type": "add",
      "date": 1689843636816
    },
    {
      "type": "edit",
      "id": "cdfb1db6d109ff31",
      "item": {
        "type": "paragraph",
        "id": "cdfb1db6d109ff31",
        "text": "⇒ [[elm-pages]]"
      },
      "date": 1689843640637
    },
    {
      "item": {
        "type": "factory",
        "id": "9c99b90cc23262ed"
      },
      "id": "9c99b90cc23262ed",
      "type": "add",
      "after": "cdfb1db6d109ff31",
      "date": 1689843655097
    },
    {
      "type": "edit",
      "id": "9c99b90cc23262ed",
      "item": {
        "type": "image",
        "id": "9c99b90cc23262ed",
        "text": "Uploaded image",
        "size": "wide",
        "width": 419,
        "height": 297,
        "url": "/assets/plugins/image/541da94dbfed966ecab027ea8be6259a.jpg"
      },
      "date": 1689843676452
    },
    {
      "type": "edit",
      "id": "9c99b90cc23262ed",
      "item": {
        "type": "image",
        "id": "9c99b90cc23262ed",
        "text": "Visualizing the v3 architecture - feedback wanted #376",
        "size": "wide",
        "width": 419,
        "height": 297,
        "url": "/assets/plugins/image/541da94dbfed966ecab027ea8be6259a.jpg"
      },
      "date": 1689843688067
    },
    {
      "type": "edit",
      "id": "9c99b90cc23262ed",
      "item": {
        "type": "image",
        "id": "9c99b90cc23262ed",
        "text": "Visualizing the v3 architecture - feedback wanted #376 [https://github.com/dillonkearns/elm-pages/discussions/376 github]",
        "size": "wide",
        "width": 419,
        "height": 297,
        "url": "/assets/plugins/image/541da94dbfed966ecab027ea8be6259a.jpg"
      },
      "date": 1689843697512
    },
    {
      "item": {
        "type": "factory",
        "id": "4500c0aca22b1fa0"
      },
      "id": "4500c0aca22b1fa0",
      "type": "add",
      "after": "9c99b90cc23262ed",
      "date": 1689843765669
    },
    {
      "type": "edit",
      "id": "4500c0aca22b1fa0",
      "item": {
        "type": "paragraph",
        "id": "4500c0aca22b1fa0",
        "text": "This shows the flow through 3 user interactions:\n\n1. Open Page (go to initial URL in browser)\n1. Submit Form (click favorite button)\n1. Click Button (click on a non-form button with an onClick)\n"
      },
      "date": 1689843783899
    },
    {
      "type": "edit",
      "id": "4500c0aca22b1fa0",
      "item": {
        "type": "markdown",
        "id": "4500c0aca22b1fa0",
        "text": "This shows the flow through 3 user interactions:\n\n1. Open Page (go to initial URL in browser)\n1. Submit Form (click favorite button)\n1. Click Button (click on a non-form button with an onClick)\n"
      },
      "date": 1689843785195
    },
    {
      "item": {
        "type": "factory",
        "id": "c37506e429062a8f"
      },
      "id": "c37506e429062a8f",
      "type": "add",
      "after": "4500c0aca22b1fa0",
      "date": 1689843799830
    },
    {
      "type": "edit",
      "id": "c37506e429062a8f",
      "item": {
        "type": "paragraph",
        "id": "c37506e429062a8f",
        "text": "In (1), we hit the database using our definitions in our custom-backend-task.ts."
      },
      "date": 1689843809922
    },
    {
      "item": {
        "type": "factory",
        "id": "eadb29a6ee00eb3c"
      },
      "id": "eadb29a6ee00eb3c",
      "type": "add",
      "after": "c37506e429062a8f",
      "date": 1689843834288
    },
    {
      "type": "edit",
      "id": "eadb29a6ee00eb3c",
      "item": {
        "type": "reference",
        "id": "eadb29a6ee00eb3c",
        "site": "scad.fed.wiki",
        "slug": "photo-rotator",
        "title": "Photo Rotator",
        "text": "We're liking the most recent version of the Photo Rotator because it has a hover that will show images selected from the same page. We've extended it with parameters for rotating through any site with an [[Image Caption Survey]]."
      },
      "date": 1689843842433
    },
    {
      "item": {
        "type": "factory",
        "id": "3449e27841b6b591"
      },
      "id": "3449e27841b6b591",
      "type": "add",
      "after": "eadb29a6ee00eb3c",
      "date": 1689843867074
    },
    {
      "type": "edit",
      "id": "3449e27841b6b591",
      "item": {
        "type": "pagefold",
        "id": "3449e27841b6b591",
        "text": "~"
      },
      "date": 1689843871258
    },
    {
      "id": "3449e27841b6b591",
      "type": "move",
      "order": [
        "cdfb1db6d109ff31",
        "9c99b90cc23262ed",
        "4500c0aca22b1fa0",
        "c37506e429062a8f",
        "3449e27841b6b591",
        "eadb29a6ee00eb3c"
      ],
      "date": 1689843872923
    },
    {
      "type": "add",
      "id": "05f8bf7f4989a736",
      "item": {
        "type": "paragraph",
        "id": "05f8bf7f4989a736",
        "text": "In (2), the form makes a POST request to our Backend App. After running the BackendTask in action with the incoming HTTP request, our data is re-fetched from the Frontend App in order to get fresh data from any changes (like a new favorite count)."
      },
      "after": "c37506e429062a8f",
      "date": 1689843893802
    },
    {
      "type": "add",
      "id": "84a57d6f4945d17e",
      "item": {
        "type": "paragraph",
        "id": "84a57d6f4945d17e",
        "text": "(3) is a vanilla Elm Msg. It doesn't communicate with the server at all. It directly sends a ToggleMenu Msg, which updates the Model to show the menu."
      },
      "after": "05f8bf7f4989a736",
      "date": 1689843913152
    },
    {
      "item": {
        "type": "factory",
        "id": "987ed054152afc3c"
      },
      "id": "987ed054152afc3c",
      "type": "add",
      "after": "eadb29a6ee00eb3c",
      "date": 1689845210187
    },
    {
      "type": "edit",
      "id": "987ed054152afc3c",
      "item": {
        "type": "pagefold",
        "id": "987ed054152afc3c",
        "text": "~"
      },
      "date": 1689845212909
    },
    {
      "item": {
        "type": "factory",
        "id": "d5ce0e889a27c1aa"
      },
      "id": "d5ce0e889a27c1aa",
      "type": "add",
      "after": "987ed054152afc3c",
      "date": 1689845214291
    },
    {
      "type": "edit",
      "id": "d5ce0e889a27c1aa",
      "item": {
        "type": "paragraph",
        "id": "d5ce0e889a27c1aa",
        "text": "Building a blog with elm-pages has been way easier than with next.js imho\nIm pulling in a list of markdown files' names with node in a custom backend task, but then i transform and combine them into a List of backendtasks to load all those markdown files' data to turn into a list of blog posts. (idk if thats the right way, but it works great)"
      },
      "date": 1689845215670
    },
    {
      "type": "edit",
      "id": "d5ce0e889a27c1aa",
      "item": {
        "type": "paragraph",
        "id": "d5ce0e889a27c1aa",
        "text": "Building a blog with elm-pages has been way easier than with next.js imho\nIm pulling in a list of markdown files' names with node in a custom backend task, but then i transform and combine them into a List of backendtasks to load all those markdown files' data to turn into a list of blog posts. (idk if thats the right way, but it works great) [https://elmlang.slack.com/archives/CNSNETV37/p1689787826223299 post]"
      },
      "date": 1689845258568
    },
    {
      "item": {
        "type": "factory",
        "id": "c8982faeaccf7ce7"
      },
      "id": "c8982faeaccf7ce7",
      "type": "add",
      "after": "d5ce0e889a27c1aa",
      "date": 1689845414009
    },
    {
      "type": "edit",
      "id": "c8982faeaccf7ce7",
      "item": {
        "type": "paragraph",
        "id": "c8982faeaccf7ce7",
        "text": "Adapters"
      },
      "date": 1689845416690
    },
    {
      "type": "edit",
      "id": "c8982faeaccf7ce7",
      "item": {
        "type": "paragraph",
        "id": "c8982faeaccf7ce7",
        "text": "Adapters [https://elm-pages.com/docs/adapters/ page]"
      },
      "date": 1689845441125
    },
    {
      "item": {
        "type": "factory",
        "id": "64ac1cc9017baebb"
      },
      "id": "64ac1cc9017baebb",
      "type": "add",
      "after": "c8982faeaccf7ce7",
      "date": 1689845448748
    },
    {
      "type": "edit",
      "id": "64ac1cc9017baebb",
      "item": {
        "type": "paragraph",
        "id": "64ac1cc9017baebb",
        "text": "If you only use pre-rendered routes in your elm-pages app, then elm-pages build will generate its output in a dist/ folder and you can use that output with your static hosting method of choice."
      },
      "date": 1689845450257
    },
    {
      "item": {
        "type": "factory",
        "id": "fd50c350f3c1a7e2"
      },
      "id": "fd50c350f3c1a7e2",
      "type": "add",
      "after": "64ac1cc9017baebb",
      "date": 1689845462577
    },
    {
      "type": "edit",
      "id": "fd50c350f3c1a7e2",
      "item": {
        "type": "paragraph",
        "id": "fd50c350f3c1a7e2",
        "text": "However, if you are using server-rendered routes, you will need a way to take the server-side code for your elm-pages app, and glue that together to run in the context of your server. The core code for rendering the HTML for your elm-pages app given an incoming request (URL, method, headers, etc.) is the same for any app. What differs is:"
      },
      "date": 1689845465465
    },
    {
      "type": "add",
      "id": "591fb75899f8a94d",
      "item": {
        "type": "paragraph",
        "id": "591fb75899f8a94d",
        "text": "[…]"
      },
      "after": "fd50c350f3c1a7e2",
      "date": 1689845466766
    },
    {
      "type": "edit",
      "id": "fd50c350f3c1a7e2",
      "item": {
        "type": "paragraph",
        "id": "fd50c350f3c1a7e2",
        "text": "However, if you are using server-rendered routes, you will need a way to take the server-side code for your elm-pages app, and glue that together to run in the context of your server. The core code for rendering the HTML for your elm-pages app given an incoming request (URL, method, headers, etc."
      },
      "date": 1689845497860
    },
    {
      "type": "edit",
      "id": "fd50c350f3c1a7e2",
      "item": {
        "type": "paragraph",
        "id": "fd50c350f3c1a7e2",
        "text": "However, if you are using server-rendered routes, you will need a way to take the server-side code for your elm-pages app, and glue that together to run in the context of your server. The core code for rendering the HTML for your elm-pages app given an incoming request (URL, method, headers, etc.) is the same for any app. What differs is:"
      },
      "date": 1689845502738
    },
    {
      "type": "add",
      "id": "c4966e0da383a3bf",
      "item": {
        "type": "paragraph",
        "id": "c4966e0da383a3bf",
        "text": "* Request - What is the format of the raw request data?"
      },
      "after": "fd50c350f3c1a7e2",
      "date": 1689845505467
    },
    {
      "type": "edit",
      "id": "c4966e0da383a3bf",
      "item": {
        "type": "markdown",
        "id": "c4966e0da383a3bf",
        "text": "* Request - What is the format of the raw request data?"
      },
      "date": 1689845506867
    },
    {
      "type": "edit",
      "id": "c4966e0da383a3bf",
      "item": {
        "type": "markdown",
        "id": "c4966e0da383a3bf",
        "text": "* **Request** – What is the format of the raw request data?"
      },
      "date": 1689845585357
    },
    {
      "type": "edit",
      "id": "c4966e0da383a3bf",
      "item": {
        "type": "markdown",
        "id": "c4966e0da383a3bf",
        "text": "* **Request** – What is the format of the raw request data?\n* **Response** – How do you take the response from the elm-pages app and turn it into the response type that your server or hosting provider needs? For example, a Netlify Serverless function has a different contract for sending responses than an Express server."
      },
      "date": 1689845636584
    },
    {
      "type": "edit",
      "id": "c4966e0da383a3bf",
      "item": {
        "type": "markdown",
        "id": "c4966e0da383a3bf",
        "text": "* **Request** – What is the format of the raw request data?\n\n* **Response** – How do you take the response from the elm-pages app and turn it into the response type that your server or hosting provider needs? For example, a Netlify Serverless function has a different contract for sending responses than an Express server."
      },
      "date": 1689845639975
    },
    {
      "type": "edit",
      "id": "c4966e0da383a3bf",
      "item": {
        "type": "markdown",
        "id": "c4966e0da383a3bf",
        "text": "* **Request** – What is the format of the raw request data?\n\n* **Response** – How do you take the response from the elm-pages app and turn it into the response type that your server or hosting provider needs? For example, a Netlify Serverless function has a different contract for sending responses than an Express server.\n\n* **Wiring** – Where do you put files and code in order to run this code in the context of your server or hosting provider? Your server or hosting provider may have different conventions for where to put your code and how to run it, and you will likely need to move some files and generate some glue code to wire things up."
      },
      "date": 1689845689080
    },
    {
      "type": "edit",
      "id": "591fb75899f8a94d",
      "item": {
        "type": "paragraph",
        "id": "591fb75899f8a94d",
        "text": "Introducing elm-pages v3 - full-stack Elm and scripts!"
      },
      "date": 1689845839479
    },
    {
      "item": {
        "type": "factory",
        "id": "5a5102811bbb0bed"
      },
      "id": "5a5102811bbb0bed",
      "type": "add",
      "after": "591fb75899f8a94d",
      "date": 1689845846811
    },
    {
      "type": "edit",
      "id": "5a5102811bbb0bed",
      "item": {
        "type": "pagefold",
        "id": "5a5102811bbb0bed",
        "text": "pre-rendered"
      },
      "date": 1689845848339
    },
    {
      "id": "5a5102811bbb0bed",
      "type": "move",
      "order": [
        "cdfb1db6d109ff31",
        "9c99b90cc23262ed",
        "4500c0aca22b1fa0",
        "c37506e429062a8f",
        "05f8bf7f4989a736",
        "84a57d6f4945d17e",
        "3449e27841b6b591",
        "eadb29a6ee00eb3c",
        "987ed054152afc3c",
        "d5ce0e889a27c1aa",
        "c8982faeaccf7ce7",
        "64ac1cc9017baebb",
        "fd50c350f3c1a7e2",
        "c4966e0da383a3bf",
        "5a5102811bbb0bed",
        "591fb75899f8a94d"
      ],
      "date": 1689845849758
    },
    {
      "type": "edit",
      "id": "591fb75899f8a94d",
      "item": {
        "type": "paragraph",
        "id": "591fb75899f8a94d",
        "text": "Introducing elm-pages v3 - full-stack Elm and scripts! [https://discourse.elm-lang.org/t/introducing-elm-pages-v3-full-stack-elm-and-scripts/9185 page]"
      },
      "date": 1689845869867
    },
    {
      "item": {
        "type": "factory",
        "id": "df7d800660849c32"
      },
      "id": "df7d800660849c32",
      "type": "add",
      "after": "591fb75899f8a94d",
      "date": 1689846286758
    },
    {
      "type": "edit",
      "id": "df7d800660849c32",
      "item": {
        "type": "paragraph",
        "id": "df7d800660849c32",
        "text": "* The elm-pages Architecture"
      },
      "date": 1689846289966
    },
    {
      "type": "edit",
      "id": "df7d800660849c32",
      "item": {
        "type": "markdown",
        "id": "df7d800660849c32",
        "text": "* The elm-pages Architecture"
      },
      "date": 1689846291120
    },
    {
      "type": "edit",
      "id": "df7d800660849c32",
      "item": {
        "type": "markdown",
        "id": "df7d800660849c32",
        "text": "* The elm-pages Architecture [https://elm-pages.com/docs/architecture/ page]"
      },
      "date": 1689846306537
    },
    {
      "item": {
        "type": "factory",
        "id": "4781e167d5d0d7ed"
      },
      "id": "4781e167d5d0d7ed",
      "type": "add",
      "after": "df7d800660849c32",
      "date": 1689847199084
    },
    {
      "type": "edit",
      "id": "4781e167d5d0d7ed",
      "item": {
        "type": "paragraph",
        "id": "4781e167d5d0d7ed",
        "text": "It’s a wrapper around a regular Elm app, so the init/update/Model all works the same way. The Model is not serialized, so you can have any data types in there. Only Data and ActionData are serialized (the additions on top of the standard Elm Architecture)."
      },
      "date": 1689847200776
    },
    {
      "type": "edit",
      "id": "4781e167d5d0d7ed",
      "item": {
        "type": "paragraph",
        "id": "4781e167d5d0d7ed",
        "text": "It’s a wrapper around a regular Elm app, so the init/update/Model all works the same way. The Model is not serialized, so you can have any data types in there. Only Data and ActionData are serialized (the additions on top of the standard Elm Architecture). [https://discourse.elm-lang.org/t/introducing-elm-pages-v3-full-stack-elm-and-scripts/9185/8 page]"
      },
      "date": 1689847241200
    },
    {
      "type": "edit",
      "id": "4781e167d5d0d7ed",
      "item": {
        "type": "paragraph",
        "id": "4781e167d5d0d7ed",
        "text": "It’s a wrapper around a regular Elm app, so the init/update/Model all works the same way. The Model is not serialized, so you can have any data types in there. Only Data and ActionData are serialized (the additions on top of the standard Elm Architecture). [https://discourse.elm-lang.org/t/introducing-elm-pages-v3-full-stack-elm-and-scripts/9185/8 page], "
      },
      "date": 1689847893919
    },
    {
      "type": "edit",
      "id": "4781e167d5d0d7ed",
      "item": {
        "type": "paragraph",
        "id": "4781e167d5d0d7ed",
        "text": "It’s a wrapper around a regular Elm app, so the init/update/Model all works the same way. The Model is not serialized, so you can have any data types in there. Only Data and ActionData are serialized (the additions on top of the standard Elm Architecture). [https://discourse.elm-lang.org/t/introducing-elm-pages-v3-full-stack-elm-and-scripts/9185/8 page], [https://discourse.elm-lang.org/t/introducing-elm-pages-v3-full-stack-elm-and-scripts/9185/13 page]"
      },
      "date": 1689847903831
    }
  ]
}