{
  "title": "More About the Server",
  "story": [
    {
      "type": "paragraph",
      "id": "601eff85b1e749c7",
      "text": "You may have moved quickly into the steam tunnels of federated wiki. A colleague did and wrote asking some detailed questions without much context as to how the server got to where it is. Here is the story.\n\n"
    },
    {
      "type": "paragraph",
      "id": "1c985745d53a1a55",
      "text": "I think of wiki-server as a page store with incremental update. Little more."
    },
    {
      "type": "paragraph",
      "id": "3fb3fe021b418b83",
      "text": "[[Sites and Servers]]"
    },
    {
      "type": "paragraph",
      "id": "0bc6cbeb54934301",
      "text": "Well, I sure glossed over a lot of ground there. Let me start with a series of facts, not making excuses, but to provide insight into the code.\n\n"
    },
    {
      "type": "markdown",
      "id": "80bef7ef9948c68d",
      "text": "* The wiki-server was originally written in ruby, with Selenium tests, but this proved hard to install because of ruby version hell.\n"
    },
    {
      "type": "markdown",
      "id": "020bc6967e5a0052",
      "text": "* The node version is an Express app, a swiss army knife of web servers, using async idioms everywhere, and written to pass the tests.\n\n"
    },
    {
      "type": "markdown",
      "id": "5b83d7e36d586a96",
      "text": "* The farm machinery in the node version doesn’t just carry a subdirectory name to the disk driver, it spawns a clone of itself in the same memory space.\n\n"
    },
    {
      "type": "paragraph",
      "id": "9c99fba7b32d5eba",
      "text": "The node version turned out to be much easier to install, mostly because node was young then and hadn’t evolved into version hell. We chose node as our preferred implementation."
    },
    {
      "type": "paragraph",
      "id": "e9826bdb66f3f8f2",
      "text": "(I still run the ruby version for a few sites.) "
    },
    {
      "type": "paragraph",
      "id": "7c752be22bcebe0e",
      "text": "At the same time we embraced npm packages as our module architecture on the client side too. Much of year two was spent pushing these choices to completion.\n"
    },
    {
      "type": "markdown",
      "id": "c8b2fe9fb68b0f92",
      "text": "* Both the client and server code bases have been the work of many hands.\n"
    },
    {
      "type": "markdown",
      "id": "419c712e3374aad8",
      "text": "* The server was done by one volunteer, not yet a professional programmer, with the help of his brother, a lisp hacker. (expect indirection)\n\n"
    },
    {
      "type": "markdown",
      "id": "313010601b4f5288",
      "text": "* The argument processing has grown with no central definition even though it may seem to have one.\n\n"
    },
    {
      "type": "markdown",
      "id": "3cd2d5dff09d1129",
      "text": "* Dynamically loaded plugins can interpret newly introduced parameters which can be set multiple ways.\n\n"
    },
    {
      "type": "markdown",
      "id": "33cdbb8c9f48a548",
      "text": "* The server fits into the category of an application-server, but those are expected to be stateless. (Our server is really just a db with incremental update)\n\n"
    },
    {
      "type": "markdown",
      "id": "16c8b1eed0217cfa",
      "text": "* Wiki scales over the top (via CORS HTTP), not underneath as is expected of an application server talking to a db\n\n"
    },
    {
      "type": "markdown",
      "id": "237903c82dfd3b5c",
      "text": "* We have accumulated logic to conform to expectations of hosting companies though that has mostly atrophied.\n\n"
    },
    {
      "type": "markdown",
      "id": "a9fd30aaf1dc75a3",
      "text": "* We have accumulated logic to conform to multiple user-identity mechanisms, though that has been recently abstracted.\n\n"
    },
    {
      "type": "markdown",
      "id": "0252f4f29603da9f",
      "text": "* We have accumulated logic to accommodate HTTP and HTTPS in a browser environment that sets them against each other.\n\n"
    },
    {
      "type": "paragraph",
      "id": "9717730e7fb02beb",
      "text": "You might be thinking that this codebase is a real mess. I think otherwise. It has responded well to everything we have asked of it. I am especially proud of how a server-side plugin integrates into this machinery. "
    },
    {
      "type": "paragraph",
      "id": "c18322a385c8af19",
      "text": "Keep in mind that a plugin author needs no permission from anyone to create a plugin, write content in terms of that plugin, and suggest that other sites install that plugin so others can benefit from the writing.\n\n"
    },
    {
      "type": "paragraph",
      "id": "1588454f61dd2ac1",
      "text": "I offer as an example adding RSS to wiki."
    },
    {
      "type": "paragraph",
      "id": "097a811a29ad23ac",
      "text": "[[Syndicating Pages with RSS]] \n\n"
    },
    {
      "type": "paragraph",
      "id": "1a833535fcf1ca47",
      "text": "Allen Wirfs-Brock invited Dave Winer and myself to join him once exploring our similar sounding use of light-weight servers. It was fun to get to know Dave but it was clear that he wasn’t going to read anything I wrote unless I could ship it over RSS."
    },
    {
      "type": "paragraph",
      "id": "c41388c40568f4e2",
      "text": "As an experiment I adopted a blogging style for some of my writing and added a plugin that publishes it in RSS. The plugin appears as a little counter on the top of a table of contents.\n"
    },
    {
      "type": "rss",
      "id": "6b08eb3d7f6c533c",
      "text": " "
    },
    {
      "type": "paragraph",
      "id": "e09a64fb640de559",
      "text": "This is the client-side of the plugin doing its job of counting things and offering the RSS icon which can be added to readers. Here is the server-side code that supports the client by actually counting pages and supports the RSS protocol by assembling up payloads to their spec and shipping them out on demand.\n"
    },
    {
      "type": "paragraph",
      "id": "a12981be3ac55d55",
      "text": "[https://github.com/WardCunningham/wiki-plugin-rss/blob/master/server/server.coffee github]\n\n"
    },
    {
      "type": "paragraph",
      "id": "d258dd6a9bf316bd",
      "text": "Contrast the 18 lines of that code that constructs the payload with the sprawling document that defines it.\n"
    },
    {
      "type": "paragraph",
      "id": "587a888ba4630aea",
      "text": "[http://cyber.harvard.edu/rss/rss.html spec]\n\n"
    },
    {
      "type": "paragraph",
      "id": "550f2745c6fc1ff5",
      "text": "I don’t actually think Dave reads what I write by RSS or any other means. But I don’t regret the time I spent writing it. I pushed on some boundaries regarding what is expected of a plugin and found that they respond well to unanticipated change."
    },
    {
      "type": "paragraph",
      "id": "84e3bf8d1c52070f",
      "text": "I’ve reused this server-side approach several more times and always found it productive. Especially note that this productivity comes with no coordination with the wiki project leadership other than my familiarity with the server-side environment from being part of that leadership too."
    },
    {
      "type": "paragraph",
      "id": "87fc0b70e3640fbc",
      "text": "See [[How Wiki Starts]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "More About the Server",
        "story": []
      },
      "date": 1514042972677
    },
    {
      "item": {
        "type": "factory",
        "id": "601eff85b1e749c7"
      },
      "id": "601eff85b1e749c7",
      "type": "add",
      "date": 1514043010570
    },
    {
      "type": "edit",
      "id": "601eff85b1e749c7",
      "item": {
        "type": "paragraph",
        "id": "601eff85b1e749c7",
        "text": "Well you have moved quickly into the steam tunnels of federated wiki.\n\n"
      },
      "date": 1514043035936
    },
    {
      "type": "add",
      "id": "1c985745d53a1a55",
      "item": {
        "type": "paragraph",
        "id": "1c985745d53a1a55",
        "text": "I think of wiki-server as a page store with incremental update. Little more. Let me refresh my memory as to what I said about it recently. \n"
      },
      "after": "601eff85b1e749c7",
      "date": 1514043052463
    },
    {
      "type": "add",
      "id": "3fb3fe021b418b83",
      "item": {
        "type": "paragraph",
        "id": "3fb3fe021b418b83",
        "text": "[[Sites and Servers]]"
      },
      "after": "1c985745d53a1a55",
      "date": 1514043061911
    },
    {
      "type": "add",
      "id": "0bc6cbeb54934301",
      "item": {
        "type": "paragraph",
        "id": "0bc6cbeb54934301",
        "text": "Well, I sure glossed over a lot of ground there. Let me start with a series of facts, not making excuses, but to provide insight into the code.\n\n"
      },
      "after": "3fb3fe021b418b83",
      "date": 1514043072711
    },
    {
      "type": "add",
      "id": "80bef7ef9948c68d",
      "item": {
        "type": "factory",
        "id": "80bef7ef9948c68d",
        "text": "* The wiki-server was originally written in ruby, with tests, but this proved hard to install because of ruby version hell.\n* The node version is an Express app, a swiss army knife of web servers using async idioms everywhere, and it passed the tests.\n* The farm machinery in node doesn’t just carry a subdirectory name to the disk driver, it spawns a clone of itself in the same memory space.\n\nThe node version turned out to be much easier to install, mostly because node was young then and hadn’t evolved into version hell. We chose node as our preferred implementation (though I still run the ruby version for a few sites.) At the same time we embraced npm packages as our module architecture on the client side too. Much of year two was spent pushing these choices to completion.\n\n* Both the client and server code bases have been the work of many hands.\n* The server was done by one volunteer, not yet a professional programmer, with the help of his brother, a lisp hacker. (expect indirection)\n* The argument processing has grown wildly with no central definition even though it may seem to have one.\n* Dynamically loaded plugins can interpret newly introduced parameters which can be set multiple ways.\n* The server fits into the category of an application-server, but those are expected to be stateless. (it is really a db with incremental update)\n* Wiki scales over the top (via CORS HTTP), not underneath as is expected of an application server talking to a db\n* We have accumulated logic to conform to expectations of hosting companies though that has mostly atrophied.\n* We have accumulated logic to conform to multiple user-identity mechanisms, though that has been recently abstracted.\n* We have accumulated logic to accommodate HTTP and HTTPS in a browser environment that sets them against each other.\n\nYou might be thinking that this codebase is a real mess. I think otherwise. It has responded well to everything we have asked of it. I am especially proud of how a server-side plugin integrates into this machinery. Keep in mind that a plugin author needs no permission from anyone to create a plugin, write content in terms of that plugin, and suggest that other sites install that plugin so others can benefit from the writing.\n\nI offer as an example of this the addition of RSS protocols to federated wiki.\n\nhttp://stack.fed.wiki/syndicating-pages-with-rss.html\n\nAllen Wirfs-Brock invited Dave Winer and myself to join him once exploring our similar sounding use of light-weight servers. It was fun to get to know Dave but it was clear that he wasn’t going to read anything I wrote unless I could ship it over RSS. As an experiment I have adopted a blogging style for some of my writing and added a plugin that publishes it in RSS. The plugin appears as a little counter on the top of a table of contents.\n\n\n\nThis is the client-side of the plugin doing its job of counting things and offering the RSS icon which can be added to readers. Here is the server-side code that supports the client by actually counting pages and supports the RSS protocol by assembling up payloads to their spec and shipping them out on demand.\n\nhttps://github.com/WardCunningham/wiki-plugin-rss/blob/master/server/server.coffee\n\nContrast the 18 lines of that code that constructs the payload with the sprawling document that defines it.\n\nhttp://cyber.harvard.edu/rss/rss.html\n\nI don’t actually think Dave reads what I write by RSS or any other means. But I don’t regret the time I spent writing it. I pushed on some boundaries regarding what is expected of a plugin and found that they respond well to unanticipated change. I’ve reused this approach several more times and always found it productive. And, note especially, this productivity comes with no coordination with the wiki project leadership other than my familiarity with the server-side environment from being part of that leadership too."
      },
      "after": "0bc6cbeb54934301",
      "date": 1514043081284
    },
    {
      "type": "edit",
      "id": "80bef7ef9948c68d",
      "item": {
        "type": "markdown",
        "id": "80bef7ef9948c68d",
        "text": "* The wiki-server was originally written in ruby, with tests, but this proved hard to install because of ruby version hell.\n* The node version is an Express app, a swiss army knife of web servers using async idioms everywhere, and it passed the tests.\n* The farm machinery in node doesn’t just carry a subdirectory name to the disk driver, it spawns a clone of itself in the same memory space.\n\n"
      },
      "date": 1514043096168
    },
    {
      "type": "add",
      "id": "9c99fba7b32d5eba",
      "item": {
        "type": "factory",
        "id": "9c99fba7b32d5eba",
        "text": "The node version turned out to be much easier to install, mostly because node was young then and hadn’t evolved into version hell. We chose node as our preferred implementation (though I still run the ruby version for a few sites.) At the same time we embraced npm packages as our module architecture on the client side too. Much of year two was spent pushing these choices to completion.\n\n* Both the client and server code bases have been the work of many hands.\n* The server was done by one volunteer, not yet a professional programmer, with the help of his brother, a lisp hacker. (expect indirection)\n* The argument processing has grown wildly with no central definition even though it may seem to have one.\n* Dynamically loaded plugins can interpret newly introduced parameters which can be set multiple ways.\n* The server fits into the category of an application-server, but those are expected to be stateless. (it is really a db with incremental update)\n* Wiki scales over the top (via CORS HTTP), not underneath as is expected of an application server talking to a db\n* We have accumulated logic to conform to expectations of hosting companies though that has mostly atrophied.\n* We have accumulated logic to conform to multiple user-identity mechanisms, though that has been recently abstracted.\n* We have accumulated logic to accommodate HTTP and HTTPS in a browser environment that sets them against each other.\n\nYou might be thinking that this codebase is a real mess. I think otherwise. It has responded well to everything we have asked of it. I am especially proud of how a server-side plugin integrates into this machinery. Keep in mind that a plugin author needs no permission from anyone to create a plugin, write content in terms of that plugin, and suggest that other sites install that plugin so others can benefit from the writing.\n\nI offer as an example of this the addition of RSS protocols to federated wiki.\n\nhttp://stack.fed.wiki/syndicating-pages-with-rss.html\n\nAllen Wirfs-Brock invited Dave Winer and myself to join him once exploring our similar sounding use of light-weight servers. It was fun to get to know Dave but it was clear that he wasn’t going to read anything I wrote unless I could ship it over RSS. As an experiment I have adopted a blogging style for some of my writing and added a plugin that publishes it in RSS. The plugin appears as a little counter on the top of a table of contents.\n\n\n\nThis is the client-side of the plugin doing its job of counting things and offering the RSS icon which can be added to readers. Here is the server-side code that supports the client by actually counting pages and supports the RSS protocol by assembling up payloads to their spec and shipping them out on demand.\n\nhttps://github.com/WardCunningham/wiki-plugin-rss/blob/master/server/server.coffee\n\nContrast the 18 lines of that code that constructs the payload with the sprawling document that defines it.\n\nhttp://cyber.harvard.edu/rss/rss.html\n\nI don’t actually think Dave reads what I write by RSS or any other means. But I don’t regret the time I spent writing it. I pushed on some boundaries regarding what is expected of a plugin and found that they respond well to unanticipated change. I’ve reused this approach several more times and always found it productive. And, note especially, this productivity comes with no coordination with the wiki project leadership other than my familiarity with the server-side environment from being part of that leadership too."
      },
      "after": "80bef7ef9948c68d",
      "date": 1514043105605
    },
    {
      "type": "edit",
      "id": "9c99fba7b32d5eba",
      "item": {
        "type": "paragraph",
        "id": "9c99fba7b32d5eba",
        "text": "The node version turned out to be much easier to install, mostly because node was young then and hadn’t evolved into version hell. We chose node as our preferred implementation (though I still run the ruby version for a few sites.) At the same time we embraced npm packages as our module architecture on the client side too. Much of year two was spent pushing these choices to completion.\n"
      },
      "date": 1514043119494
    },
    {
      "type": "add",
      "id": "c8b2fe9fb68b0f92",
      "item": {
        "type": "factory",
        "id": "c8b2fe9fb68b0f92",
        "text": "* Both the client and server code bases have been the work of many hands.\n* The server was done by one volunteer, not yet a professional programmer, with the help of his brother, a lisp hacker. (expect indirection)\n* The argument processing has grown wildly with no central definition even though it may seem to have one.\n* Dynamically loaded plugins can interpret newly introduced parameters which can be set multiple ways.\n* The server fits into the category of an application-server, but those are expected to be stateless. (it is really a db with incremental update)\n* Wiki scales over the top (via CORS HTTP), not underneath as is expected of an application server talking to a db\n* We have accumulated logic to conform to expectations of hosting companies though that has mostly atrophied.\n* We have accumulated logic to conform to multiple user-identity mechanisms, though that has been recently abstracted.\n* We have accumulated logic to accommodate HTTP and HTTPS in a browser environment that sets them against each other.\n\nYou might be thinking that this codebase is a real mess. I think otherwise. It has responded well to everything we have asked of it. I am especially proud of how a server-side plugin integrates into this machinery. Keep in mind that a plugin author needs no permission from anyone to create a plugin, write content in terms of that plugin, and suggest that other sites install that plugin so others can benefit from the writing.\n\nI offer as an example of this the addition of RSS protocols to federated wiki.\n\nhttp://stack.fed.wiki/syndicating-pages-with-rss.html\n\nAllen Wirfs-Brock invited Dave Winer and myself to join him once exploring our similar sounding use of light-weight servers. It was fun to get to know Dave but it was clear that he wasn’t going to read anything I wrote unless I could ship it over RSS. As an experiment I have adopted a blogging style for some of my writing and added a plugin that publishes it in RSS. The plugin appears as a little counter on the top of a table of contents.\n\n\n\nThis is the client-side of the plugin doing its job of counting things and offering the RSS icon which can be added to readers. Here is the server-side code that supports the client by actually counting pages and supports the RSS protocol by assembling up payloads to their spec and shipping them out on demand.\n\nhttps://github.com/WardCunningham/wiki-plugin-rss/blob/master/server/server.coffee\n\nContrast the 18 lines of that code that constructs the payload with the sprawling document that defines it.\n\nhttp://cyber.harvard.edu/rss/rss.html\n\nI don’t actually think Dave reads what I write by RSS or any other means. But I don’t regret the time I spent writing it. I pushed on some boundaries regarding what is expected of a plugin and found that they respond well to unanticipated change. I’ve reused this approach several more times and always found it productive. And, note especially, this productivity comes with no coordination with the wiki project leadership other than my familiarity with the server-side environment from being part of that leadership too."
      },
      "after": "9c99fba7b32d5eba",
      "date": 1514043121595
    },
    {
      "type": "edit",
      "id": "c8b2fe9fb68b0f92",
      "item": {
        "type": "markdown",
        "id": "c8b2fe9fb68b0f92",
        "text": "* Both the client and server code bases have been the work of many hands.\n* The server was done by one volunteer, not yet a professional programmer, with the help of his brother, a lisp hacker. (expect indirection)\n* The argument processing has grown wildly with no central definition even though it may seem to have one.\n* Dynamically loaded plugins can interpret newly introduced parameters which can be set multiple ways.\n* The server fits into the category of an application-server, but those are expected to be stateless. (it is really a db with incremental update)\n* Wiki scales over the top (via CORS HTTP), not underneath as is expected of an application server talking to a db\n* We have accumulated logic to conform to expectations of hosting companies though that has mostly atrophied.\n* We have accumulated logic to conform to multiple user-identity mechanisms, though that has been recently abstracted.\n* We have accumulated logic to accommodate HTTP and HTTPS in a browser environment that sets them against each other.\n\n"
      },
      "date": 1514043140104
    },
    {
      "type": "add",
      "id": "9717730e7fb02beb",
      "item": {
        "type": "factory",
        "id": "9717730e7fb02beb",
        "text": "You might be thinking that this codebase is a real mess. I think otherwise. It has responded well to everything we have asked of it. I am especially proud of how a server-side plugin integrates into this machinery. Keep in mind that a plugin author needs no permission from anyone to create a plugin, write content in terms of that plugin, and suggest that other sites install that plugin so others can benefit from the writing.\n\nI offer as an example of this the addition of RSS protocols to federated wiki.\n\nhttp://stack.fed.wiki/syndicating-pages-with-rss.html\n\nAllen Wirfs-Brock invited Dave Winer and myself to join him once exploring our similar sounding use of light-weight servers. It was fun to get to know Dave but it was clear that he wasn’t going to read anything I wrote unless I could ship it over RSS. As an experiment I have adopted a blogging style for some of my writing and added a plugin that publishes it in RSS. The plugin appears as a little counter on the top of a table of contents.\n\n\n\nThis is the client-side of the plugin doing its job of counting things and offering the RSS icon which can be added to readers. Here is the server-side code that supports the client by actually counting pages and supports the RSS protocol by assembling up payloads to their spec and shipping them out on demand.\n\nhttps://github.com/WardCunningham/wiki-plugin-rss/blob/master/server/server.coffee\n\nContrast the 18 lines of that code that constructs the payload with the sprawling document that defines it.\n\nhttp://cyber.harvard.edu/rss/rss.html\n\nI don’t actually think Dave reads what I write by RSS or any other means. But I don’t regret the time I spent writing it. I pushed on some boundaries regarding what is expected of a plugin and found that they respond well to unanticipated change. I’ve reused this approach several more times and always found it productive. And, note especially, this productivity comes with no coordination with the wiki project leadership other than my familiarity with the server-side environment from being part of that leadership too."
      },
      "after": "c8b2fe9fb68b0f92",
      "date": 1514043145562
    },
    {
      "type": "edit",
      "id": "9717730e7fb02beb",
      "item": {
        "type": "paragraph",
        "id": "9717730e7fb02beb",
        "text": "You might be thinking that this codebase is a real mess. I think otherwise. It has responded well to everything we have asked of it. I am especially proud of how a server-side plugin integrates into this machinery. Keep in mind that a plugin author needs no permission from anyone to create a plugin, write content in terms of that plugin, and suggest that other sites install that plugin so others can benefit from the writing.\n\n"
      },
      "date": 1514043158397
    },
    {
      "type": "add",
      "id": "1588454f61dd2ac1",
      "item": {
        "type": "paragraph",
        "id": "1588454f61dd2ac1",
        "text": "I offer as an example of this the addition of RSS protocols to federated wiki."
      },
      "after": "9717730e7fb02beb",
      "date": 1514043230418
    },
    {
      "type": "add",
      "id": "097a811a29ad23ac",
      "item": {
        "type": "paragraph",
        "id": "097a811a29ad23ac",
        "text": "[[Syndicating Pages with RSS]] \n\n"
      },
      "after": "1588454f61dd2ac1",
      "date": 1514043261818
    },
    {
      "type": "add",
      "id": "1a833535fcf1ca47",
      "item": {
        "type": "paragraph",
        "id": "1a833535fcf1ca47",
        "text": "Allen Wirfs-Brock invited Dave Winer and myself to join him once exploring our similar sounding use of light-weight servers. It was fun to get to know Dave but it was clear that he wasn’t going to read anything I wrote unless I could ship it over RSS. As an experiment I have adopted a blogging style for some of my writing and added a plugin that publishes it in RSS. The plugin appears as a little counter on the top of a table of contents.\n"
      },
      "after": "097a811a29ad23ac",
      "date": 1514043277034
    },
    {
      "type": "add",
      "id": "6b08eb3d7f6c533c",
      "item": {
        "type": "paragraph",
        "id": "6b08eb3d7f6c533c",
        "text": "image"
      },
      "after": "1a833535fcf1ca47",
      "date": 1514043296105
    },
    {
      "type": "add",
      "id": "e09a64fb640de559",
      "item": {
        "type": "paragraph",
        "id": "e09a64fb640de559",
        "text": "This is the client-side of the plugin doing its job of counting things and offering the RSS icon which can be added to readers. Here is the server-side code that supports the client by actually counting pages and supports the RSS protocol by assembling up payloads to their spec and shipping them out on demand.\n[https://github.com/WardCunningham/wiki-plugin-rss/blob/master/server/server.coffee github]\n\n"
      },
      "after": "6b08eb3d7f6c533c",
      "date": 1514043325640
    },
    {
      "type": "add",
      "id": "d258dd6a9bf316bd",
      "item": {
        "type": "paragraph",
        "id": "d258dd6a9bf316bd",
        "text": "Contrast the 18 lines of that code that constructs the payload with the sprawling document that defines it.\n[http://cyber.harvard.edu/rss/rss.html spec]\n\n"
      },
      "after": "e09a64fb640de559",
      "date": 1514043344920
    },
    {
      "type": "add",
      "id": "550f2745c6fc1ff5",
      "item": {
        "type": "paragraph",
        "id": "550f2745c6fc1ff5",
        "text": "I don’t actually think Dave reads what I write by RSS or any other means. But I don’t regret the time I spent writing it. I pushed on some boundaries regarding what is expected of a plugin and found that they respond well to unanticipated change. I’ve reused this approach several more times and always found it productive. And, note especially, this productivity comes with no coordination with the wiki project leadership other than my familiarity with the server-side environment from being part of that leadership too."
      },
      "after": "d258dd6a9bf316bd",
      "date": 1514043349975
    },
    {
      "type": "edit",
      "id": "6b08eb3d7f6c533c",
      "item": {
        "type": "rss",
        "id": "6b08eb3d7f6c533c",
        "text": " "
      },
      "date": 1514043367326
    },
    {
      "type": "fork",
      "date": 1514043514468
    },
    {
      "type": "edit",
      "id": "80bef7ef9948c68d",
      "item": {
        "type": "markdown",
        "id": "80bef7ef9948c68d",
        "text": "* The wiki-server was originally written in ruby, with tests, but this proved hard to install because of ruby version hell.\n"
      },
      "date": 1514043606476
    },
    {
      "type": "add",
      "id": "020bc6967e5a0052",
      "item": {
        "type": "markdown",
        "id": "020bc6967e5a0052",
        "text": "* The node version is an Express app, a swiss army knife of web servers using async idioms everywhere, and it passed the tests.\n\n"
      },
      "after": "80bef7ef9948c68d",
      "date": 1514043610769
    },
    {
      "type": "add",
      "id": "5b83d7e36d586a96",
      "item": {
        "type": "markdown",
        "id": "5b83d7e36d586a96",
        "text": "* The farm machinery in node doesn’t just carry a subdirectory name to the disk driver, it spawns a clone of itself in the same memory space.\n\n"
      },
      "after": "020bc6967e5a0052",
      "date": 1514043612480
    },
    {
      "type": "edit",
      "id": "c8b2fe9fb68b0f92",
      "item": {
        "type": "markdown",
        "id": "c8b2fe9fb68b0f92",
        "text": "* Both the client and server code bases have been the work of many hands.\n"
      },
      "date": 1514043621513
    },
    {
      "type": "add",
      "id": "419c712e3374aad8",
      "item": {
        "type": "markdown",
        "id": "419c712e3374aad8",
        "text": "* The server was done by one volunteer, not yet a professional programmer, with the help of his brother, a lisp hacker. (expect indirection)\n\n"
      },
      "after": "c8b2fe9fb68b0f92",
      "date": 1514043624856
    },
    {
      "type": "add",
      "id": "313010601b4f5288",
      "item": {
        "type": "markdown",
        "id": "313010601b4f5288",
        "text": "* The argument processing has grown wildly with no central definition even though it may seem to have one.\n\n"
      },
      "after": "419c712e3374aad8",
      "date": 1514043628304
    },
    {
      "type": "add",
      "id": "3cd2d5dff09d1129",
      "item": {
        "type": "markdown",
        "id": "3cd2d5dff09d1129",
        "text": "* Dynamically loaded plugins can interpret newly introduced parameters which can be set multiple ways.\n\n"
      },
      "after": "313010601b4f5288",
      "date": 1514043630217
    },
    {
      "type": "add",
      "id": "33cdbb8c9f48a548",
      "item": {
        "type": "markdown",
        "id": "33cdbb8c9f48a548",
        "text": "* The server fits into the category of an application-server, but those are expected to be stateless. (it is really a db with incremental update)\n\n"
      },
      "after": "3cd2d5dff09d1129",
      "date": 1514043632321
    },
    {
      "type": "add",
      "id": "16c8b1eed0217cfa",
      "item": {
        "type": "markdown",
        "id": "16c8b1eed0217cfa",
        "text": "* Wiki scales over the top (via CORS HTTP), not underneath as is expected of an application server talking to a db\n\n"
      },
      "after": "33cdbb8c9f48a548",
      "date": 1514043634785
    },
    {
      "type": "add",
      "id": "237903c82dfd3b5c",
      "item": {
        "type": "markdown",
        "id": "237903c82dfd3b5c",
        "text": "* We have accumulated logic to conform to expectations of hosting companies though that has mostly atrophied.\n\n"
      },
      "after": "16c8b1eed0217cfa",
      "date": 1514043640337
    },
    {
      "type": "add",
      "id": "a9fd30aaf1dc75a3",
      "item": {
        "type": "markdown",
        "id": "a9fd30aaf1dc75a3",
        "text": "* We have accumulated logic to conform to multiple user-identity mechanisms, though that has been recently abstracted.\n\n"
      },
      "after": "237903c82dfd3b5c",
      "date": 1514043642441
    },
    {
      "type": "add",
      "id": "0252f4f29603da9f",
      "item": {
        "type": "markdown",
        "id": "0252f4f29603da9f",
        "text": "* We have accumulated logic to accommodate HTTP and HTTPS in a browser environment that sets them against each other.\n\n"
      },
      "after": "a9fd30aaf1dc75a3",
      "date": 1514043643879
    },
    {
      "type": "edit",
      "id": "e09a64fb640de559",
      "item": {
        "type": "paragraph",
        "id": "e09a64fb640de559",
        "text": "This is the client-side of the plugin doing its job of counting things and offering the RSS icon which can be added to readers. Here is the server-side code that supports the client by actually counting pages and supports the RSS protocol by assembling up payloads to their spec and shipping them out on demand.\n"
      },
      "date": 1514043683343
    },
    {
      "type": "add",
      "id": "a12981be3ac55d55",
      "item": {
        "type": "paragraph",
        "id": "a12981be3ac55d55",
        "text": "[https://github.com/WardCunningham/wiki-plugin-rss/blob/master/server/server.coffee github]\n\n"
      },
      "after": "e09a64fb640de559",
      "date": 1514043685022
    },
    {
      "type": "edit",
      "id": "d258dd6a9bf316bd",
      "item": {
        "type": "paragraph",
        "id": "d258dd6a9bf316bd",
        "text": "Contrast the 18 lines of that code that constructs the payload with the sprawling document that defines it.\n"
      },
      "date": 1514043691606
    },
    {
      "type": "add",
      "id": "587a888ba4630aea",
      "item": {
        "type": "paragraph",
        "id": "587a888ba4630aea",
        "text": "[http://cyber.harvard.edu/rss/rss.html spec]\n\n"
      },
      "after": "d258dd6a9bf316bd",
      "date": 1514043692197
    },
    {
      "type": "edit",
      "id": "601eff85b1e749c7",
      "item": {
        "type": "paragraph",
        "id": "601eff85b1e749c7",
        "text": "You may have moved quickly into the steam tunnels of federated wiki. A colleague did and wrote asking some detailed questions without much context as to how the server got to where it is.\n\n"
      },
      "date": 1514043800939
    },
    {
      "type": "edit",
      "id": "601eff85b1e749c7",
      "item": {
        "type": "paragraph",
        "id": "601eff85b1e749c7",
        "text": "You may have moved quickly into the steam tunnels of federated wiki. A colleague did and wrote asking some detailed questions without much context as to how the server got to where it is. Here is the story.\n\n"
      },
      "date": 1514043827739
    },
    {
      "type": "edit",
      "id": "1c985745d53a1a55",
      "item": {
        "type": "paragraph",
        "id": "1c985745d53a1a55",
        "text": "I think of wiki-server as a page store with incremental update. Little more."
      },
      "date": 1514043840849
    },
    {
      "type": "add",
      "id": "87fc0b70e3640fbc",
      "item": {
        "type": "paragraph",
        "id": "87fc0b70e3640fbc",
        "text": "See [[How Wiki Starts]]"
      },
      "after": "550f2745c6fc1ff5",
      "date": 1514043931280
    },
    {
      "type": "edit",
      "id": "020bc6967e5a0052",
      "item": {
        "type": "markdown",
        "id": "020bc6967e5a0052",
        "text": "* The node version is an Express app, a swiss army knife of web servers, using async idioms everywhere, and written to pass the tests.\n\n"
      },
      "date": 1514045086937
    },
    {
      "type": "edit",
      "id": "80bef7ef9948c68d",
      "item": {
        "type": "markdown",
        "id": "80bef7ef9948c68d",
        "text": "* The wiki-server was originally written in ruby, with Selenium tests, but this proved hard to install because of ruby version hell.\n"
      },
      "date": 1514045115552
    },
    {
      "type": "edit",
      "id": "5b83d7e36d586a96",
      "item": {
        "type": "markdown",
        "id": "5b83d7e36d586a96",
        "text": "* The farm machinery in the node version doesn’t just carry a subdirectory name to the disk driver, it spawns a clone of itself in the same memory space.\n\n"
      },
      "date": 1514045159095
    },
    {
      "type": "edit",
      "id": "9c99fba7b32d5eba",
      "item": {
        "type": "paragraph",
        "id": "9c99fba7b32d5eba",
        "text": "The node version turned out to be much easier to install, mostly because node was young then and hadn’t evolved into version hell. We chose node as our preferred implementation (though I still run the ruby version for a few sites.) "
      },
      "date": 1514045179710
    },
    {
      "type": "add",
      "id": "7c752be22bcebe0e",
      "item": {
        "type": "paragraph",
        "id": "7c752be22bcebe0e",
        "text": "At the same time we embraced npm packages as our module architecture on the client side too. Much of year two was spent pushing these choices to completion.\n"
      },
      "after": "9c99fba7b32d5eba",
      "date": 1514045183806
    },
    {
      "type": "edit",
      "id": "313010601b4f5288",
      "item": {
        "type": "markdown",
        "id": "313010601b4f5288",
        "text": "* The argument processing has grown with no central definition even though it may seem to have one.\n\n"
      },
      "date": 1514045206133
    },
    {
      "type": "edit",
      "id": "33cdbb8c9f48a548",
      "item": {
        "type": "markdown",
        "id": "33cdbb8c9f48a548",
        "text": "* The server fits into the category of an application-server, but those are expected to be stateless. (Our server is really just a db with incremental update)\n\n"
      },
      "date": 1514045248988
    },
    {
      "type": "edit",
      "id": "1588454f61dd2ac1",
      "item": {
        "type": "paragraph",
        "id": "1588454f61dd2ac1",
        "text": "I offer as an example adding RSS to wiki."
      },
      "date": 1514045320596
    },
    {
      "type": "edit",
      "id": "1a833535fcf1ca47",
      "item": {
        "type": "paragraph",
        "id": "1a833535fcf1ca47",
        "text": "Allen Wirfs-Brock invited Dave Winer and myself to join him once exploring our similar sounding use of light-weight servers. It was fun to get to know Dave but it was clear that he wasn’t going to read anything I wrote unless I could ship it over RSS."
      },
      "date": 1514045354465
    },
    {
      "type": "add",
      "id": "c41388c40568f4e2",
      "item": {
        "type": "paragraph",
        "id": "c41388c40568f4e2",
        "text": "As an experiment I adopted a blogging style for some of my writing and added a plugin that publishes it in RSS. The plugin appears as a little counter on the top of a table of contents.\n"
      },
      "after": "1a833535fcf1ca47",
      "date": 1514045378495
    },
    {
      "type": "edit",
      "id": "550f2745c6fc1ff5",
      "item": {
        "type": "paragraph",
        "id": "550f2745c6fc1ff5",
        "text": "I don’t actually think Dave reads what I write by RSS or any other means. But I don’t regret the time I spent writing it. I pushed on some boundaries regarding what is expected of a plugin and found that they respond well to unanticipated change."
      },
      "date": 1514045432960
    },
    {
      "type": "add",
      "id": "84e3bf8d1c52070f",
      "item": {
        "type": "paragraph",
        "id": "84e3bf8d1c52070f",
        "text": "I’ve reused this server-side approach several more times and always found it productive. And, note especially, this productivity comes with no coordination with the wiki project leadership other than my familiarity with the server-side environment from being part of that leadership too."
      },
      "after": "550f2745c6fc1ff5",
      "date": 1514045447110
    },
    {
      "type": "edit",
      "id": "84e3bf8d1c52070f",
      "item": {
        "type": "paragraph",
        "id": "84e3bf8d1c52070f",
        "text": "I’ve reused this server-side approach several more times and always found it productive. Especially note that this productivity comes with no coordination with the wiki project leadership other than my familiarity with the server-side environment from being part of that leadership too."
      },
      "date": 1514045476949
    },
    {
      "type": "edit",
      "id": "9c99fba7b32d5eba",
      "item": {
        "type": "paragraph",
        "id": "9c99fba7b32d5eba",
        "text": "The node version turned out to be much easier to install, mostly because node was young then and hadn’t evolved into version hell. We chose node as our preferred implementation."
      },
      "date": 1514047277568
    },
    {
      "type": "add",
      "id": "e9826bdb66f3f8f2",
      "item": {
        "type": "paragraph",
        "id": "e9826bdb66f3f8f2",
        "text": "(I still run the ruby version for a few sites.) "
      },
      "after": "9c99fba7b32d5eba",
      "date": 1514047291262
    },
    {
      "type": "edit",
      "id": "9717730e7fb02beb",
      "item": {
        "type": "paragraph",
        "id": "9717730e7fb02beb",
        "text": "You might be thinking that this codebase is a real mess. I think otherwise. It has responded well to everything we have asked of it. I am especially proud of how a server-side plugin integrates into this machinery. "
      },
      "date": 1514047341878
    },
    {
      "type": "add",
      "id": "c18322a385c8af19",
      "item": {
        "type": "paragraph",
        "id": "c18322a385c8af19",
        "text": "Keep in mind that a plugin author needs no permission from anyone to create a plugin, write content in terms of that plugin, and suggest that other sites install that plugin so others can benefit from the writing.\n\n"
      },
      "after": "9717730e7fb02beb",
      "date": 1514047348723
    },
    {
      "type": "fork",
      "site": "stack.fed.wiki",
      "date": 1627388672674
    }
  ]
}