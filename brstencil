{
  "title": "BrStencil",
  "story": [
    {
      "type": "markdown",
      "id": "9ad148e86e5a3f6e",
      "text": "From the Oxford Dictionary:\n[[Stencil]] - a thin sheet of [[card]], plastic, or metal with a pattern or letters cut out of it, used to produce the cut design on the surface below by the application of ink or paint through the holes.\n\nIn Bloc I play a role of an abstract factory to create predefined visual elements. The two scenarios where stencils should be used are:\n\n1. When lazy element creation is needed, e.g. a variable number of tabs in a view.\n2. When the element being created depends on run time information, e.g. the structure or content of the data to be displayed.\n\nThe idea behind a stencil as concept is to help developers reduce the use of block closures used with scripting API. The reason for that is the fact that block closures can not be recompiled while in a debugger, which makes system less debuggable and live programmable.\n\nThe only essential Stencil API is `=#create`= method, developers should implement it in their stencil subclasses. Note, that `=#create`= has zero arguments which by default makes Stencil stateless. It is also possible to implement a statefull Stencil. Let us formalise the both types:\n\n Stateless Stencil - A stencil that does not have any parameters and the result of #create method is always identical. Two stateless stencils are equal then and only then when their type is the same.\n\n Stateful Stencil - A parametrizable stencil whose result of a #create method depends on configuration. Two stencils of the same type configured differently are not considered to be equal.\n\nWhile subclassing is being the preferable way of creating Stencils we still want to provide the support of block closures that play a role of a stencil. Any Valuable object can be converted to so the ValuableStencil by sending `=#asStencil`= convertion method to the object that implements it.\n\nFor example the following code creates a Stateless stencil that creates a simple visual element out of BlockClosure:\n"
    },
    {
      "type": "code",
      "id": "34557425183a6404",
      "text": "| aStencil anElement |\naStencil := [ BlElement new background: Color gray ] asStencil.\nanElement := aStencil create.\n\n"
    },
    {
      "type": "markdown",
      "id": "157a2b2fe8359adf",
      "text": "\nUsers can additionally provide Stencil arguments to achive a Stateful Stencil:\n"
    },
    {
      "type": "code",
      "id": "dba1f0ab4d263a84",
      "text": "| aStencil anElement |\naStencil := [ :aColor | BlElement new background: aColor ] asStencil.\naStencil arguments: { Color gray }.\nanElement := aStencil create.\n\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "BrStencil",
        "story": []
      },
      "date": 1654866916363
    },
    {
      "item": {
        "type": "factory",
        "id": "9ad148e86e5a3f6e"
      },
      "id": "9ad148e86e5a3f6e",
      "type": "add",
      "date": 1654867041771
    },
    {
      "type": "edit",
      "id": "9ad148e86e5a3f6e",
      "item": {
        "type": "markdown",
        "id": "9ad148e86e5a3f6e",
        "text": "From the Oxford Dictionary:\nStencil - a thin sheet of card, plastic, or metal with a pattern or letters cut out of it, used to produce the cut design on the surface below by the application of ink or paint through the holes.\n\nIn Bloc I play a role of an abstract factory to create predefined visual elements. The two scenarios where stencils should be used are:\n\n1. When lazy element creation is needed, e.g. a variable number of tabs in a view.\n2. When the element being created depends on run time information, e.g. the structure or content of the data to be displayed.\n\nThe idea behind a stencil as concept is to help developers reduce the use of block closures used with scripting API. The reason for that is the fact that block closures can not be recompiled while in a debugger, which makes system less debuggable and live programmable.\n\nThe only essential Stencil API is `=#create`= method, developers should implement it in their stencil subclasses. Note, that `=#create`= has zero arguments which by default makes Stencil stateless. It is also possible to implement a statefull Stencil. Let us formalise the both types:\n\n Stateless Stencil - A stencil that does not have any parameters and the result of #create method is always identical. Two stateless stencils are equal then and only then when their type is the same.\n\n Stateful Stencil - A parametrizable stencil whose result of a #create method depends on configuration. Two stencils of the same type configured differently are not considered to be equal.\n\nWhile subclassing is being the preferable way of creating Stencils we still want to provide the support of block closures that play a role of a stencil. Any Valuable object can be converted to so the ValuableStencil by sending `=#asStencil`= convertion method to the object that implements it.\n\nFor example the following code creates a Stateless stencil that creates a simple visual element out of BlockClosure:\n```\n| aStencil anElement |\naStencil := [ BlElement new background: Color gray ] asStencil.\nanElement := aStencil create.\n```\n\nUsers can additionally provide Stencil arguments to achive a Stateful Stencil:\n\n```\n| aStencil anElement |\naStencil := [ :aColor | BlElement new background: aColor ] asStencil.\naStencil arguments: { Color gray }.\nanElement := aStencil create.\n```\n"
      },
      "date": 1654867044650
    },
    {
      "type": "edit",
      "id": "9ad148e86e5a3f6e",
      "item": {
        "type": "markdown",
        "id": "9ad148e86e5a3f6e",
        "text": "From the Oxford Dictionary:\nStencil - a thin sheet of [[card]], plastic, or metal with a pattern or letters cut out of it, used to produce the cut design on the surface below by the application of ink or paint through the holes.\n\nIn Bloc I play a role of an abstract factory to create predefined visual elements. The two scenarios where stencils should be used are:\n\n1. When lazy element creation is needed, e.g. a variable number of tabs in a view.\n2. When the element being created depends on run time information, e.g. the structure or content of the data to be displayed.\n\nThe idea behind a stencil as concept is to help developers reduce the use of block closures used with scripting API. The reason for that is the fact that block closures can not be recompiled while in a debugger, which makes system less debuggable and live programmable.\n\nThe only essential Stencil API is `=#create`= method, developers should implement it in their stencil subclasses. Note, that `=#create`= has zero arguments which by default makes Stencil stateless. It is also possible to implement a statefull Stencil. Let us formalise the both types:\n\n Stateless Stencil - A stencil that does not have any parameters and the result of #create method is always identical. Two stateless stencils are equal then and only then when their type is the same.\n\n Stateful Stencil - A parametrizable stencil whose result of a #create method depends on configuration. Two stencils of the same type configured differently are not considered to be equal.\n\nWhile subclassing is being the preferable way of creating Stencils we still want to provide the support of block closures that play a role of a stencil. Any Valuable object can be converted to so the ValuableStencil by sending `=#asStencil`= convertion method to the object that implements it.\n\nFor example the following code creates a Stateless stencil that creates a simple visual element out of BlockClosure:\n```\n| aStencil anElement |\naStencil := [ BlElement new background: Color gray ] asStencil.\nanElement := aStencil create.\n```\n\nUsers can additionally provide Stencil arguments to achive a Stateful Stencil:\n\n```\n| aStencil anElement |\naStencil := [ :aColor | BlElement new background: aColor ] asStencil.\naStencil arguments: { Color gray }.\nanElement := aStencil create.\n```\n"
      },
      "date": 1654867058866
    },
    {
      "item": {
        "type": "factory",
        "id": "dba1f0ab4d263a84"
      },
      "id": "dba1f0ab4d263a84",
      "type": "add",
      "after": "9ad148e86e5a3f6e",
      "date": 1654867313999
    },
    {
      "type": "edit",
      "id": "9ad148e86e5a3f6e",
      "item": {
        "type": "markdown",
        "id": "9ad148e86e5a3f6e",
        "text": "From the Oxford Dictionary:\nStencil - a thin sheet of [[card]], plastic, or metal with a pattern or letters cut out of it, used to produce the cut design on the surface below by the application of ink or paint through the holes.\n\nIn Bloc I play a role of an abstract factory to create predefined visual elements. The two scenarios where stencils should be used are:\n\n1. When lazy element creation is needed, e.g. a variable number of tabs in a view.\n2. When the element being created depends on run time information, e.g. the structure or content of the data to be displayed.\n\nThe idea behind a stencil as concept is to help developers reduce the use of block closures used with scripting API. The reason for that is the fact that block closures can not be recompiled while in a debugger, which makes system less debuggable and live programmable.\n\nThe only essential Stencil API is `=#create`= method, developers should implement it in their stencil subclasses. Note, that `=#create`= has zero arguments which by default makes Stencil stateless. It is also possible to implement a statefull Stencil. Let us formalise the both types:\n\n Stateless Stencil - A stencil that does not have any parameters and the result of #create method is always identical. Two stateless stencils are equal then and only then when their type is the same.\n\n Stateful Stencil - A parametrizable stencil whose result of a #create method depends on configuration. Two stencils of the same type configured differently are not considered to be equal.\n\nWhile subclassing is being the preferable way of creating Stencils we still want to provide the support of block closures that play a role of a stencil. Any Valuable object can be converted to so the ValuableStencil by sending `=#asStencil`= convertion method to the object that implements it.\n\nFor example the following code creates a Stateless stencil that creates a simple visual element out of BlockClosure:\n"
      },
      "date": 1654867329952
    },
    {
      "type": "add",
      "id": "ccebc5f064ecf4b9",
      "item": {
        "type": "markdown",
        "id": "ccebc5f064ecf4b9",
        "text": "```\n| aStencil anElement |\naStencil := [ BlElement new background: Color gray ] asStencil.\nanElement := aStencil create.\n```\n"
      },
      "after": "9ad148e86e5a3f6e",
      "date": 1654867336174
    },
    {
      "type": "add",
      "id": "157a2b2fe8359adf",
      "item": {
        "type": "markdown",
        "id": "157a2b2fe8359adf",
        "text": "\nUsers can additionally provide Stencil arguments to achive a Stateful Stencil:\n"
      },
      "after": "ccebc5f064ecf4b9",
      "date": 1654867340308
    },
    {
      "type": "edit",
      "id": "dba1f0ab4d263a84",
      "item": {
        "type": "code",
        "id": "dba1f0ab4d263a84",
        "text": "\n```\n| aStencil anElement |\naStencil := [ :aColor | BlElement new background: aColor ] asStencil.\naStencil arguments: { Color gray }.\nanElement := aStencil create.\n```\n"
      },
      "date": 1654867348787
    },
    {
      "item": {
        "type": "factory",
        "id": "34557425183a6404"
      },
      "id": "34557425183a6404",
      "type": "add",
      "after": "dba1f0ab4d263a84",
      "date": 1654867373909
    },
    {
      "id": "34557425183a6404",
      "type": "move",
      "order": [
        "9ad148e86e5a3f6e",
        "ccebc5f064ecf4b9",
        "34557425183a6404",
        "157a2b2fe8359adf",
        "dba1f0ab4d263a84"
      ],
      "date": 1654867377240
    },
    {
      "type": "edit",
      "id": "dba1f0ab4d263a84",
      "item": {
        "type": "code",
        "id": "dba1f0ab4d263a84",
        "text": "| aStencil anElement |\naStencil := [ :aColor | BlElement new background: aColor ] asStencil.\naStencil arguments: { Color gray }.\nanElement := aStencil create.\n\n"
      },
      "date": 1654867379221
    },
    {
      "type": "remove",
      "id": "ccebc5f064ecf4b9",
      "date": 1654867392087
    },
    {
      "type": "edit",
      "id": "34557425183a6404",
      "item": {
        "type": "code",
        "id": "34557425183a6404",
        "text": "```\n| aStencil anElement |\naStencil := [ BlElement new background: Color gray ] asStencil.\nanElement := aStencil create.\n```\n"
      },
      "date": 1654867393661
    },
    {
      "type": "edit",
      "id": "34557425183a6404",
      "item": {
        "type": "code",
        "id": "34557425183a6404",
        "text": "| aStencil anElement |\naStencil := [ BlElement new background: Color gray ] asStencil.\nanElement := aStencil create.\n\n"
      },
      "date": 1654867405569
    },
    {
      "type": "edit",
      "id": "9ad148e86e5a3f6e",
      "item": {
        "type": "markdown",
        "id": "9ad148e86e5a3f6e",
        "text": "From the Oxford Dictionary:\n[[Stencil]] - a thin sheet of [[card]], plastic, or metal with a pattern or letters cut out of it, used to produce the cut design on the surface below by the application of ink or paint through the holes.\n\nIn Bloc I play a role of an abstract factory to create predefined visual elements. The two scenarios where stencils should be used are:\n\n1. When lazy element creation is needed, e.g. a variable number of tabs in a view.\n2. When the element being created depends on run time information, e.g. the structure or content of the data to be displayed.\n\nThe idea behind a stencil as concept is to help developers reduce the use of block closures used with scripting API. The reason for that is the fact that block closures can not be recompiled while in a debugger, which makes system less debuggable and live programmable.\n\nThe only essential Stencil API is `=#create`= method, developers should implement it in their stencil subclasses. Note, that `=#create`= has zero arguments which by default makes Stencil stateless. It is also possible to implement a statefull Stencil. Let us formalise the both types:\n\n Stateless Stencil - A stencil that does not have any parameters and the result of #create method is always identical. Two stateless stencils are equal then and only then when their type is the same.\n\n Stateful Stencil - A parametrizable stencil whose result of a #create method depends on configuration. Two stencils of the same type configured differently are not considered to be equal.\n\nWhile subclassing is being the preferable way of creating Stencils we still want to provide the support of block closures that play a role of a stencil. Any Valuable object can be converted to so the ValuableStencil by sending `=#asStencil`= convertion method to the object that implements it.\n\nFor example the following code creates a Stateless stencil that creates a simple visual element out of BlockClosure:\n"
      },
      "date": 1654867445461
    }
  ]
}