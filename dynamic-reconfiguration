{
  "title": "Dynamic Reconfiguration",
  "story": [
    {
      "type": "paragraph",
      "id": "96da3ec360615206",
      "text": "Dynamic reconfiguration is the key to achieve interoperability and flexibility in distributed automation systems. The [[IEC 61499]] standard defines a management model with a set of commands, which have capabilities to create and delete FBIs as well as connections between FBs. FBs can also be started, reset, or stopped using these commands. Benefits and applicable scenarios of dynamic reconfiguration of IEC 61499-compliant systems have been researched in a number of works, e.g., [16], [17], and [31]. These approaches improve flexibility of distributed automation systems. By introducing industrial software agents, intelligent features such as automatic deployment, automatic load sharing, automatic fault detection, and recovery can be achieved [5], [13]."
    },
    {
      "type": "pagefold",
      "id": "84672dc5a8d8dfce",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "837b24420b4ceb02",
      "text": "DAI, Wenbin, VYATKIN, Valeriy, CHRISTENSEN, James H. and DUBININ, Victor N., 2015. Bridging Service-Oriented Architecture and IEC 61499 for Flexibility and Interoperability. IEEE Transactions on Industrial Informatics. June 2015. Vol. 11, no. 3, p. 771–781. DOI 10.1109/TII.2015.2423495. "
    },
    {
      "type": "markdown",
      "id": "2e2ecf3572115c31",
      "text": "> In recent years, requirements for interoperability, flexibility, and reconfigurability of complex automation industry applications have increased dramatically. The adoption of service-oriented architectures (SOAs) could be a feasible solution to meet these challenges. The IEC 61499 standard defines a set of management commands, which provides the capability of dynamic reconfiguration without affecting normal operation. In this paper, a formal model is proposed for the application of SOAs in the distributed automation domain in order to achieve flexible automation systems. Practical scenarios of applying SOA in industrial automation are discussed. In order to support the SOA IEC 61499 model, a service-based execution environment architecture is proposed. One main characteristic of flexibility – dynamic reconfiguration – is also demonstrated using a case study example.\n"
    },
    {
      "type": "paragraph",
      "id": "7b28c24f17579670",
      "text": "THE INDUSTRIAL automation landscape is dominated by the hardware and software paradigm of programmable logic controllers (PLCs). PLCs are widely deployed in almost every branch of industry: manufacturing and assembly lines, building automation, process control, material handling systems, etc. PLC software is commonly developed in accordance with the IEC 61131-3 standard [1], which defines a set of textual and graphical programming languages. However, to the disappointment of system integrators, code portability between various PLC platforms is not fully achievable, due to PLC vendors’ own interpretation of the standard and the need for backward compatibility with their legacy systems. An additional drawback is that the design of distributed automation systems is essentially beyond the scope of the [[IEC 61131-3]] standard: the “configuration,” considered as the highest level of its software model, is limited to a single PLC device [1], [2]. Therefore, substantial overhead is incurred in a distributed system design using PLCs under the IEC 61131-3 paradigm [3]."
    },
    {
      "type": "paragraph",
      "id": "9fb0377fb2513cba",
      "text": "A distributed automation system can be designed using the IEC 61499 standard [4] in an abstract, platform-independent way. The initial ambiguities of execution semantics have been resolved in the 2nd edition of IEC 61499, of which Part 1 and Part 2 were published in 2012 and Part 4 was published in 2013. Targeted as solving existing issues of the IEC 61131-3 standard for distributed automation systems, the IEC 61499 standard has its own unique characteristics. First, all algorithms and data must be encapsulated in a software component called a “function block.” In the IEC 61131-3 standard, program organization units (POU) including programs, functions, and function blocks are defined for encapsulation. Second, the concept of global variables makes IEC 61131-3 POUs extremely difficult to be distributed. In contrast, the absence of global variables in IEC 61499 simplifies reallocation of IEC 61499 function blocks to other devices in distributed automation systems, while the mapping of function block instances (FBIs) to devices is required only at the last stage prior to deployment. Finally, a management model is introduced in the standard to facilitate reconfigurability at runtime [5]. The management model consists of a distribution model, communication interfaces between devices, a set of commands, and suggested protocols."
    },
    {
      "type": "paragraph",
      "id": "e7aa3ab8d4067b1a",
      "text": "There are several IEC 61499 implementations, usually including a development environment and runtime execution environment, some of which are developed in research and academia (FBDK/FBRT [6] and 4DIAC-IDE/FORTE [7]), and others being commercial products (nxtStudio/nxtRT61499F [8] and ISaGRAF Workbench/ISaGRAF runtime [9]). Interoperability, portability, and reconfigurability are partially achieved among those IEC 61499 vendors [10]. For example, function block library elements are portable between FBDK, 4DIAC-IDE, and nxtStudio thanks to XML-based representation. As demonstrated in [11], a basic level of interoperability, based on a PUBLISH/SUBSCRIBE communication model implemented via service interface function blocks (SIFBs), can be achieved between all major IEC 61499 platforms, such as FBRT, FORTE, nxtRT61499F, ISaGRAF, and BlokIDE [12]. Since SIFBs are commonly used to access hardware/firmwareprovided services, SIFBs developed for one runtime are not usually portable to another platform. However, with the use of proper interface abstractions, SIFB-type definitions may be portable among development environments."
    },
    {
      "type": "paragraph",
      "id": "de23a80bc253cdb3",
      "text": "The runtime environments support some reconfiguration actions through device management interfaces, which implement, for instance, such commands as creation and deletion of FBIs during execution. Approaches to more intelligent actions, such as automatic deployment [13] and automatic fault recovery [5], have been proposed and demonstrated, but are not yet standardized, while other advanced capabilities such as automatic load sharing between controllers are yet to be implemented."
    },
    {
      "type": "paragraph",
      "id": "2edd3b5187f579ed",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "2a98a3de6ec67062",
      "text": "Candido et al. [22] investigated a common architecture to support different phases of the device lifecycle by combining evolvable production systems and SOA. As a result, a modular, adaptive, and open infrastructure is formed, in which components can interact and be combined to meet legacy system specifications. The authors also illustrate a dynamic deployment process, which uses a PLCopen device configuration XML file [23] to fill in a predefined service class template and convert to XML deployment file using WS management (WSmanagement) [24]. This process focuses on providing dynamic deployment to IEC 61131-3 PLCs from a model-driven engineering perspective. No improvement is made on the execution environment, whereas this paper aims for enabling flexibility on the runtime level."
    },
    {
      "type": "paragraph",
      "id": "a9968f590cd33c80",
      "text": "Stoidner et al. [25] propose a SOAP4PLC engine to invoke a manufacturing task running on a PLC via WSs. In their approach, which aims at IEC 61131-3 PLCs, adding SOA FBs to process SOAP messages does not seem to improve flexibility and reconfigurability; however, the fundamental concepts of mapping FB to services and using SOAP messages are also applicable for IEC 61499."
    },
    {
      "type": "paragraph",
      "id": "8806bc8acd340bc6",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "abe7a61ae93c3c1a",
      "text": "Existing IEC 61131-3 PLC POUs are tightly coupled. Dynamic reconfiguration of IEC 61131-3 systems is achieved by switching between multiple instances of resource configurations created on PLCs. Online editing is also available in most IEC 61131-3 implementations. However, these implementations are all proprietary and there is no mechanism of managing POUs defined in the IEC 61131-3 standard. Therefore, in this paper, the IEC 61499 architecture will be used as the target platform."
    },
    {
      "type": "paragraph",
      "id": "a599ea643456bb5c",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "a8e571950497850c",
      "text": "Flexibility requirements are tightly intertwined with the implementation of functional and nonfunctional requirements. For example, even a standalone part of an automation system, such as a safety subsystem that is handling emergency situations, may require the reconfiguration of hardware or software. It is often the case that the safety subsystem needs updates to cover hazards discovered during system operation, which is done by the deployment of new software components to [[PLC]]s. Similarly, in airport baggage handling systems (BHSs), baggage screening policies are continuously improving to ensure safety and security. These new functionalities in the baggage screening process must be introduced without stopping systems in airports operating 24 h a day."
    },
    {
      "type": "paragraph",
      "id": "5b23aad31381cdde",
      "text": "[…]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Dynamic Reconfiguration",
        "story": []
      },
      "date": 1660376248937
    },
    {
      "id": "96da3ec360615206",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "96da3ec360615206",
        "text": "\nDAI, Wenbin, VYATKIN, Valeriy, CHRISTENSEN, James H. and DUBININ, Victor N., 2015. Bridging Service-Oriented Architecture and IEC 61499 for Flexibility and Interoperability. IEEE Transactions on Industrial Informatics. June 2015. Vol. 11, no. 3, p. 771–781. DOI 10.1109/TII.2015.2423495. "
      },
      "date": 1660376266540
    },
    {
      "id": "2e2ecf3572115c31",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "2e2ecf3572115c31",
        "text": "> In recent years, requirements for interoperability, flexibility, and reconfigurability of complex automation industry applications have increased dramatically. The adoption of service-oriented architectures (SOAs) could be a feasible solution to meet these challenges. The IEC 61499 standard defines a set of management commands, which provides the capability of dynamic reconfiguration without affecting normal operation. In this paper, a formal model is proposed for the application of SOAs in the distributed automation domain in order to achieve flexible automation systems. Practical scenarios of applying SOA in industrial automation are discussed. In order to support the SOA IEC 61499 model, a service-based execution environment architecture is proposed. One main characteristic of flexibility – dynamic reconfiguration – is also demonstrated using a case study example.\n"
      },
      "after": "96da3ec360615206",
      "date": 1660376269280
    },
    {
      "item": {
        "type": "factory",
        "id": "7b28c24f17579670"
      },
      "id": "7b28c24f17579670",
      "type": "add",
      "after": "2e2ecf3572115c31",
      "date": 1660376315502
    },
    {
      "type": "edit",
      "id": "7b28c24f17579670",
      "item": {
        "type": "paragraph",
        "id": "7b28c24f17579670",
        "text": "THE INDUSTRIAL automation landscape is dominated by the hardware and software paradigm of programmable logic controllers (PLCs). PLCs are widely deployed in almost every branch of industry: manufacturing and assembly lines, building automation, process control, material handling systems, etc. PLC software is commonly developed in accordance with the IEC 61131-3 standard [1], which defines a set of textual and graphical programming languages. However, to the disappointment of system integrators, code portability between various PLC platforms is not fully achievable, due to PLC vendors’ own interpretation of the standard and the need for backward compatibility with their legacy systems. An additional drawback is that the design of distributed automation systems is essentially beyond the scope of the IEC 61131-3 standard: the “configuration,” considered as the highest level of its software model, is limited to a single PLC device [1],"
      },
      "date": 1660376323227
    },
    {
      "type": "edit",
      "id": "7b28c24f17579670",
      "item": {
        "type": "paragraph",
        "id": "7b28c24f17579670",
        "text": "THE INDUSTRIAL automation landscape is dominated by the hardware and software paradigm of programmable logic controllers (PLCs). PLCs are widely deployed in almost every branch of industry: manufacturing and assembly lines, building automation, process control, material handling systems, etc. PLC software is commonly developed in accordance with the IEC 61131-3 standard [1], which defines a set of textual and graphical programming languages. However, to the disappointment of system integrators, code portability between various PLC platforms is not fully achievable, due to PLC vendors’ own interpretation of the standard and the need for backward compatibility with their legacy systems. An additional drawback is that the design of distributed automation systems is essentially beyond the scope of the [[IEC 61131-3]] standard: the “configuration,” considered as the highest level of its software model, is limited to a single PLC device [1],"
      },
      "date": 1660376344819
    },
    {
      "type": "edit",
      "id": "7b28c24f17579670",
      "item": {
        "type": "paragraph",
        "id": "7b28c24f17579670",
        "text": "THE INDUSTRIAL automation landscape is dominated by the hardware and software paradigm of programmable logic controllers (PLCs). PLCs are widely deployed in almost every branch of industry: manufacturing and assembly lines, building automation, process control, material handling systems, etc. PLC software is commonly developed in accordance with the IEC 61131-3 standard [1], which defines a set of textual and graphical programming languages. However, to the disappointment of system integrators, code portability between various PLC platforms is not fully achievable, due to PLC vendors’ own interpretation of the standard and the need for backward compatibility with their legacy systems. An additional drawback is that the design of distributed automation systems is essentially beyond the scope of the [[IEC 61131-3]] standard: the “configuration,” considered as the highest level of its software model, is limited to a single PLC device [1],[2]. Therefore, substantial overhead is incurred in a distributed system design using PLCs under the IEC 61131-3 paradigm [3]."
      },
      "date": 1660376366076
    },
    {
      "type": "edit",
      "id": "7b28c24f17579670",
      "item": {
        "type": "paragraph",
        "id": "7b28c24f17579670",
        "text": "THE INDUSTRIAL automation landscape is dominated by the hardware and software paradigm of programmable logic controllers (PLCs). PLCs are widely deployed in almost every branch of industry: manufacturing and assembly lines, building automation, process control, material handling systems, etc. PLC software is commonly developed in accordance with the IEC 61131-3 standard [1], which defines a set of textual and graphical programming languages. However, to the disappointment of system integrators, code portability between various PLC platforms is not fully achievable, due to PLC vendors’ own interpretation of the standard and the need for backward compatibility with their legacy systems. An additional drawback is that the design of distributed automation systems is essentially beyond the scope of the [[IEC 61131-3]] standard: the “configuration,” considered as the highest level of its software model, is limited to a single PLC device [1], [2]. Therefore, substantial overhead is incurred in a distributed system design using PLCs under the IEC 61131-3 paradigm [3]."
      },
      "date": 1660376378108
    },
    {
      "item": {
        "type": "factory",
        "id": "9fb0377fb2513cba"
      },
      "id": "9fb0377fb2513cba",
      "type": "add",
      "after": "7b28c24f17579670",
      "date": 1660376394994
    },
    {
      "type": "edit",
      "id": "9fb0377fb2513cba",
      "item": {
        "type": "paragraph",
        "id": "9fb0377fb2513cba",
        "text": "A distributed automation system can be designed using the IEC 61499 standard [4] in an abstract, platform-independent way. The initial ambiguities of execution semantics have been resolved in the 2nd edition of IEC 61499, of which Part 1 and Part 2 were published in 2012 and Part 4 was published in 2013. Targeted as solving existing issues of the IEC 61131-3 standard for distributed automation systems, the IEC 61499 standard has its own unique characteristics. First, all algorithms and data must be encapsulated in a software component called a “function block.” In the IEC 61131-3 standard, program organization units (POU) including programs, functions, and function blocks are defined for encapsulation. Second, the concept of global variables makes IEC 61131-3 POUs extremely difficult to be distributed. In contrast, the absence of global variables in IEC 61499 simplifies reallocation of IEC 61499 function blocks to other devices in distributed automation systems, while the mapping of function block instances (FBIs) to devices is required only at the last stage prior to deployment. Finally, a management model is introduced in the standard to facilitate reconfigurability at runtime [5]. The management model consists of a distribution model, communication interfaces between devices, a set of commands, and suggested protocols."
      },
      "date": 1660376398260
    },
    {
      "item": {
        "type": "factory",
        "id": "e7aa3ab8d4067b1a"
      },
      "id": "e7aa3ab8d4067b1a",
      "type": "add",
      "after": "9fb0377fb2513cba",
      "date": 1660376467085
    },
    {
      "type": "edit",
      "id": "e7aa3ab8d4067b1a",
      "item": {
        "type": "paragraph",
        "id": "e7aa3ab8d4067b1a",
        "text": "There are several IEC 61499 implementations, usually including a development environment and runtime execution environment, some of which are developed in research and academia (FBDK/FBRT [6] and 4DIAC-IDE/FORTE [7]), and others being commercial products (nxtStudio/nxtRT61499F [8] and ISaGRAF Workbench/ISaGRAF runtime [9]). Interoperability, portability, and reconfigurability are partially achieved among those IEC 61499 vendors [10]. For example, function block library elements are portable between FBDK, 4DIAC-IDE, and nxtStudio thanks to XML-based representation. As demonstrated in [11], a basic level of interoperability, based on a PUBLISH/SUBSCRIBE communication model implemented via service interface function blocks (SIFBs), can be achieved between all major IEC 61499 platforms, such as FBRT, FORTE, nxtRT61499F, ISaGRAF, and BlokIDE [12]. Since SIFBs are commonly used to access hardware/firmwareprovided services, SIFBs developed for one runtime are not usually portable to another platform. However, with the use of proper interface abstractions, SIFB-type definitions may be portable among development environments."
      },
      "date": 1660376468918
    },
    {
      "item": {
        "type": "factory",
        "id": "de23a80bc253cdb3"
      },
      "id": "de23a80bc253cdb3",
      "type": "add",
      "after": "e7aa3ab8d4067b1a",
      "date": 1660376524204
    },
    {
      "type": "edit",
      "id": "de23a80bc253cdb3",
      "item": {
        "type": "paragraph",
        "id": "de23a80bc253cdb3",
        "text": "The runtime environments support some reconfiguration actions through device management interfaces, which implement, for instance, such commands as creation and deletion of FBIs during execution. Approaches to more intelligent"
      },
      "date": 1660376532623
    },
    {
      "type": "edit",
      "id": "de23a80bc253cdb3",
      "item": {
        "type": "paragraph",
        "id": "de23a80bc253cdb3",
        "text": "The runtime environments support some reconfiguration actions through device management interfaces, which implement, for instance, such commands as creation and deletion of FBIs during execution. Approaches to more intelligent actions, such as automatic deployment [13] and automatic fault recovery [5], have been proposed and demonstrated, but are not yet standardized, while other advanced capabilities such as automatic load sharing between controllers are yet to be implemented."
      },
      "date": 1660376545835
    },
    {
      "type": "add",
      "id": "2edd3b5187f579ed",
      "item": {
        "type": "paragraph",
        "id": "2edd3b5187f579ed",
        "text": "[…]"
      },
      "after": "de23a80bc253cdb3",
      "date": 1660376561443
    },
    {
      "item": {
        "type": "factory",
        "id": "2a98a3de6ec67062"
      },
      "id": "2a98a3de6ec67062",
      "type": "add",
      "after": "2edd3b5187f579ed",
      "date": 1660377639998
    },
    {
      "type": "edit",
      "id": "2a98a3de6ec67062",
      "item": {
        "type": "paragraph",
        "id": "2a98a3de6ec67062",
        "text": "Candido et al. [22] investigated a common architecture to support different phases of the device lifecycle by combining evolvable production systems and SOA. As a result, a modular, adaptive, and open infrastructure is formed, in which components can interact and be combined to meet legacy system specifications. The authors also illustrate a dynamic deployment process, which uses a PLCopen device configuration XML file [23] to fill in a predefined service class template and convert to XML deployment file using WS management (WSmanagement) [24]. This process focuses on providing dynamic deployment to IEC 61131-3 PLCs from a model-driven engineering perspective. No improvement is made on the execution environment, whereas this paper aims for enabling flexibility on the runtime level."
      },
      "date": 1660377642556
    },
    {
      "type": "add",
      "id": "8806bc8acd340bc6",
      "item": {
        "type": "paragraph",
        "id": "8806bc8acd340bc6",
        "text": "[…]"
      },
      "after": "2a98a3de6ec67062",
      "date": 1660377644708
    },
    {
      "id": "a8e571950497850c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a8e571950497850c",
        "text": "Flexibility requirements are tightly intertwined with the implementation of functional and nonfunctional requirements. For example, even a standalone part of an automation system, such as a safety subsystem that is handling emergency situations, may require the reconfiguration of hardware or software. It is often the case that the safety subsystem needs updates to cover hazards discovered during system operation, which is done by the deployment of new software components to [[PLC]]s. Similarly, in airport baggage handling systems (BHSs), baggage screening policies are continuously improving to ensure safety and security. These new functionalities in the baggage screening process must be introduced without stopping systems in airports operating 24 h a day."
      },
      "after": "8806bc8acd340bc6",
      "date": 1660468322887
    },
    {
      "type": "add",
      "id": "5b23aad31381cdde",
      "item": {
        "type": "paragraph",
        "id": "5b23aad31381cdde",
        "text": "[…]"
      },
      "after": "a8e571950497850c",
      "date": 1660468329929
    },
    {
      "type": "add",
      "id": "a9968f590cd33c80",
      "item": {
        "type": "paragraph",
        "id": "a9968f590cd33c80",
        "text": "Stoidner et al. [25] propose a SOAP4PLC engine to invoke a manufacturing task running on a PLC via WSs. In their approach, which aims at IEC 61131-3 PLCs, adding SOA FBs to process SOAP messages does not seem to improve flexibility and reconfigurability; however, the fundamental concepts of mapping FB to services and using SOAP messages are also applicable for IEC 61499."
      },
      "after": "2a98a3de6ec67062",
      "date": 1660468390734
    },
    {
      "type": "add",
      "id": "abe7a61ae93c3c1a",
      "item": {
        "type": "paragraph",
        "id": "abe7a61ae93c3c1a",
        "text": "Existing IEC 61131-3 PLC POUs are tightly coupled. Dynamic reconfiguration of IEC 61131-3 systems is achieved by switching between multiple instances of resource configurations created on PLCs. Online editing is also available in most IEC 61131-3 implementations. However, these implementations are all proprietary and there is no mechanism of managing POUs defined in the IEC 61131-3 standard. Therefore, in this paper, the IEC 61499 architecture will be used as the target platform."
      },
      "after": "8806bc8acd340bc6",
      "date": 1660468427220
    },
    {
      "type": "add",
      "id": "a599ea643456bb5c",
      "item": {
        "type": "paragraph",
        "id": "a599ea643456bb5c",
        "text": "[…]"
      },
      "after": "abe7a61ae93c3c1a",
      "date": 1660468434347
    },
    {
      "type": "edit",
      "id": "96da3ec360615206",
      "item": {
        "type": "paragraph",
        "id": "96da3ec360615206",
        "text": "Dynamic reconfiguration is the key to achieve interoperability and flexibility in distributed automation systems. The IEC 61499 standard defines a management model with a set of commands, which have capabilities to create and delete FBIs as well as connections between FBs. FBs can also be started, reset, or stopped using these commands. Benefits and applicable scenarios of dynamic reconfiguration of IEC 61499-compliant systems have been researched in a number of works, e.g., [16], [17], and [31]. These approaches improve flexibility of distributed automation systems. By introducing industrial software agents, intelligent features such as automatic deployment, automatic load sharing, automatic fault detection, and recovery can be achieved [5], [13]."
      },
      "date": 1660468506229
    },
    {
      "type": "add",
      "id": "837b24420b4ceb02",
      "item": {
        "type": "paragraph",
        "id": "837b24420b4ceb02",
        "text": "DAI, Wenbin, VYATKIN, Valeriy, CHRISTENSEN, James H. and DUBININ, Victor N., 2015. Bridging Service-Oriented Architecture and IEC 61499 for Flexibility and Interoperability. IEEE Transactions on Industrial Informatics. June 2015. Vol. 11, no. 3, p. 771–781. DOI 10.1109/TII.2015.2423495. "
      },
      "after": "96da3ec360615206",
      "date": 1660468507233
    },
    {
      "item": {
        "type": "factory",
        "id": "84672dc5a8d8dfce"
      },
      "id": "84672dc5a8d8dfce",
      "type": "add",
      "after": "5b23aad31381cdde",
      "date": 1660468515055
    },
    {
      "type": "edit",
      "id": "84672dc5a8d8dfce",
      "item": {
        "type": "pagefold",
        "id": "84672dc5a8d8dfce",
        "text": "~"
      },
      "date": 1660468519436
    },
    {
      "id": "84672dc5a8d8dfce",
      "type": "move",
      "order": [
        "96da3ec360615206",
        "84672dc5a8d8dfce",
        "837b24420b4ceb02",
        "2e2ecf3572115c31",
        "7b28c24f17579670",
        "9fb0377fb2513cba",
        "e7aa3ab8d4067b1a",
        "de23a80bc253cdb3",
        "2edd3b5187f579ed",
        "2a98a3de6ec67062",
        "a9968f590cd33c80",
        "8806bc8acd340bc6",
        "abe7a61ae93c3c1a",
        "a599ea643456bb5c",
        "a8e571950497850c",
        "5b23aad31381cdde"
      ],
      "date": 1660468527491
    },
    {
      "type": "edit",
      "id": "96da3ec360615206",
      "item": {
        "type": "paragraph",
        "id": "96da3ec360615206",
        "text": "Dynamic reconfiguration is the key to achieve interoperability and flexibility in distributed automation systems. The [[IEC 61499[[ standard defines a management model with a set of commands, which have capabilities to create and delete FBIs as well as connections between FBs. FBs can also be started, reset, or stopped using these commands. Benefits and applicable scenarios of dynamic reconfiguration of IEC 61499-compliant systems have been researched in a number of works, e.g., [16], [17], and [31]. These approaches improve flexibility of distributed automation systems. By introducing industrial software agents, intelligent features such as automatic deployment, automatic load sharing, automatic fault detection, and recovery can be achieved [5], [13]."
      },
      "date": 1660468576015
    },
    {
      "type": "edit",
      "id": "96da3ec360615206",
      "item": {
        "type": "paragraph",
        "id": "96da3ec360615206",
        "text": "Dynamic reconfiguration is the key to achieve interoperability and flexibility in distributed automation systems. The [[IEC 61499]] standard defines a management model with a set of commands, which have capabilities to create and delete FBIs as well as connections between FBs. FBs can also be started, reset, or stopped using these commands. Benefits and applicable scenarios of dynamic reconfiguration of IEC 61499-compliant systems have been researched in a number of works, e.g., [16], [17], and [31]. These approaches improve flexibility of distributed automation systems. By introducing industrial software agents, intelligent features such as automatic deployment, automatic load sharing, automatic fault detection, and recovery can be achieved [5], [13]."
      },
      "date": 1660468584834
    }
  ]
}