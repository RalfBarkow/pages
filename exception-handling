{
  "title": "Exception Handling",
  "story": [
    {
      "type": "markdown",
      "id": "5fe8f408d1c2e0d9",
      "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, but specifies instead an *[[exception handler]]* to “catch” exceptions. When something goes wrong, instead of returning an error code, the method that detects the exceptional situation interrupts the main flow of execution by *signaling* an exception. This does two things: it captures essential information about the context in which the exception occurred, and transfers control to the exception handler, written by the client, which decides what to do about it. The “essential information about the context” is saved in an `Exception` object; various classes of `Exception` are specified to cover the varied exceptional situations that may arise. [https://www.academia.edu/34210996/Handling_exceptions pdf] (via [[Juan Mnaul]]'s Academia account)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Exception Handling",
        "story": []
      },
      "date": 1651574105249
    },
    {
      "item": {
        "type": "factory",
        "id": "5fe8f408d1c2e0d9"
      },
      "id": "5fe8f408d1c2e0d9",
      "type": "add",
      "date": 1651574112647
    },
    {
      "type": "edit",
      "id": "5fe8f408d1c2e0d9",
      "item": {
        "type": "paragraph",
        "id": "5fe8f408d1c2e0d9",
        "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, but specifies instead an exception handler to “catch” exceptions. When something goes wrong, instead of returning an error code, the method that detects the exceptional situation interrupts the main flow of execution by signaling an exception. This does two things: it captures essential information about the context in which the exception occurred, and transfers control to the exception handler, written by the client, which decides what to do about it. The “essential information about the context” is saved in an Exception object; various classes of Exception are specified to cover the varied exceptional situations that may arise."
      },
      "date": 1651574113989
    },
    {
      "type": "edit",
      "id": "5fe8f408d1c2e0d9",
      "item": {
        "type": "paragraph",
        "id": "5fe8f408d1c2e0d9",
        "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, but specifies instead an *[[exception handler]]* to “catch” exceptions. When something goes wrong, instead of returning an error code, the method that detects the exceptional situation interrupts the main flow of execution by signaling an exception. This does two things: it captures essential information about the context in which the exception occurred, and transfers control to the exception handler, written by the client, which decides what to do about it. The “essential information about the context” is saved in an Exception object; various classes of Exception are specified to cover the varied exceptional situations that may arise."
      },
      "date": 1651574139643
    },
    {
      "type": "edit",
      "id": "5fe8f408d1c2e0d9",
      "item": {
        "type": "paragraph",
        "id": "5fe8f408d1c2e0d9",
        "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, but specifies instead an *[[exception handler]]* to “catch” exceptions. When something goes wrong, instead of returning an error code, the method that detects the exceptional situation interrupts the main flow of execution by *signaling* an exception. This does two things: it captures essential information about the context in which the exception occurred, and transfers control to the exception handler, written by the client, which decides what to do about it. The “essential information about the context” is saved in an `Exception` object; various classes of `Exception` are specified to cover the varied exceptional situations that may arise."
      },
      "date": 1651574540229
    },
    {
      "type": "edit",
      "id": "5fe8f408d1c2e0d9",
      "item": {
        "type": "markdown",
        "id": "5fe8f408d1c2e0d9",
        "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, but specifies instead an *[[exception handler]]* to “catch” exceptions. When something goes wrong, instead of returning an error code, the method that detects the exceptional situation interrupts the main flow of execution by *signaling* an exception. This does two things: it captures essential information about the context in which the exception occurred, and transfers control to the exception handler, written by the client, which decides what to do about it. The “essential information about the context” is saved in an `Exception` object; various classes of `Exception` are specified to cover the varied exceptional situations that may arise."
      },
      "date": 1651574542218
    },
    {
      "type": "edit",
      "id": "5fe8f408d1c2e0d9",
      "item": {
        "type": "markdown",
        "id": "5fe8f408d1c2e0d9",
        "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, but specifies instead an *[[exception handler]]* to “catch” exceptions. When something goes wrong, instead of returning an error code, the method that detects the exceptional situation interrupts the main flow of execution by *signaling* an exception. This does two things: it captures essential information about the context in which the exception occurred, and transfers control to the exception handler, written by the client, which decides what to do about it. The “essential information about the context” is saved in an `Exception` object; various classes of `Exception` are specified to cover the varied exceptional situations that may arise. [https://www.academia.edu/34210996/Handling_exceptions pdf] via [[Juan Mnaul]]'s Academia account"
      },
      "date": 1651574701269
    },
    {
      "type": "edit",
      "id": "5fe8f408d1c2e0d9",
      "item": {
        "type": "markdown",
        "id": "5fe8f408d1c2e0d9",
        "text": "The basic idea behind exception handling is that client code does not clutter the main logic flow with checks for error codes, but specifies instead an *[[exception handler]]* to “catch” exceptions. When something goes wrong, instead of returning an error code, the method that detects the exceptional situation interrupts the main flow of execution by *signaling* an exception. This does two things: it captures essential information about the context in which the exception occurred, and transfers control to the exception handler, written by the client, which decides what to do about it. The “essential information about the context” is saved in an `Exception` object; various classes of `Exception` are specified to cover the varied exceptional situations that may arise. [https://www.academia.edu/34210996/Handling_exceptions pdf] (via [[Juan Mnaul]]'s Academia account)"
      },
      "date": 1651574721260
    }
  ]
}