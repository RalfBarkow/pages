{
  "title": "Pair Programming",
  "story": [
    {
      "type": "html",
      "text": "<i>My mind to your mind. My thoughts to your thoughts...</i> -- [[Mr Spock]]",
      "id": "b3e95c2c55180c6ec985eaddb2c09056"
    },
    {
      "type": "image",
      "url": "http://web.archive.org/web/20051216201720/http://lemonodor.com/archives/images/ant-heads.jpg",
      "text": "web.archive.org",
      "id": "f1d5badb4253c7921885dc5f99a16e27"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "7a266391a618cda436432ad6340273a2"
    },
    {
      "type": "html",
      "text": "<b>Pair Programming</b>:<br>An [[Extreme Programming Practice]] in which two engineers participate in one development effort at one workstation. Each member performs the action the other is not currently doing: While one types in [[Unit Test]]s the other thinks about the class that will satisfy the test, for example. A single, unsubstantiated, unscientific, undergraduate's survey has shown that, after training for the \"[[People Skills]]\" involved, two programmers are more than twice as productive as one for a given task.",
      "id": "b93163b978b1d890d3d86d5598a83891"
    },
    {
      "type": "code",
      "text": " ''Once upon a time there was an engineer''\n ''Drove a locomotive both far and near''\n ''Accompanied by a monkey who would sit on a stool''\n ''Watchin' everything the engineer would move''\n    - Jesse Fuller, \"The Monkey and the Engineer\"",
      "id": "0fd0a2effb2169d61ad061e3c34ff122"
    },
    {
      "type": "html",
      "text": "\"[[Laurie Williams]] of the University of Utah in Salt Lake City has shown that paired programmers are only 15% slower than two independent individual programmers, but produce 15% fewer bugs. Since testing and debugging are often many times more costly than initial programming, this is an impressive result.\" <i>([http://www.economist.com/displayStory.cfm?Story_ID=779429 www.economist.com]), September 20th 2001</i> For more on this, see [[Pair Programming Benefits]] and [[Laurie Williams]].",
      "id": "75d02d7754c915c2fabf170b8da95f3f"
    },
    {
      "type": "html",
      "text": "<i>I see ... so if you reduce the rate of progress, and if you measure the number of \"bugs\", they seem to be less!! hmmm I guess at slower speed, we get somewhere \"clean\".</i>",
      "id": "477f3c2ee05d264b29d6946925aa0c2c"
    },
    {
      "type": "html",
      "text": "\nDone right, pairing should produce some lines of code which neither pair can remember who wrote them.",
      "id": "2ea1671e307cda7b3e71063f51c3207e"
    },
    {
      "type": "html",
      "text": "<i>How do we know that this is an improvement over a lone programmer spending 15% more time to get the code right the first time?</i>",
      "id": "9b78b78c02d7cd2d93be22efc86db801"
    },
    {
      "type": "html",
      "text": "\nIf you look more carefully at the numbers, there is actually a 50% reduction in the number of bugs. (The passed tests went from 70% with solo programming to 85% with pair programming. This is 30% failed tests compared to 15% failed tests, or 1/2 the number of failed tests). It's also conjectured, but not proven, that this reduction in bugs will later gain you back the 15% in \"lost\" productivity.",
      "id": "abbe02230bda186c0168d0057a5d5a98"
    },
    {
      "type": "html",
      "text": "<i>(warning about comparing percents: you need a 100% gain in your stock portfolio to break even after a 50% loss)</i>",
      "id": "341736209d7b5002f44b38d86ef47a0c"
    },
    {
      "type": "html",
      "text": "Next, because a small bug introduced in development, and not cleaned up, can often cause an order of magnitude more trouble in the field. So a gain of 15% in rote development stands to save 150% later on. To put it another way, a colleague once humble-bragged he was a good enough gambler he was net-positive on his junkets to Las Vegas. I requested he subtract the costs of hotel rooms & meals. This is the [[Framing Problem]]; when you frame some data and analyze it, then switch to a larger frame and reanalyze, the answer might be very different. Pair Programming has immeasurable benefits beyond the low bug rate & clean code.",
      "id": "c9f50f55b528be96e6604d81fbe4fcdc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<i>Where are the other studies to back this up? The only one quoted by the Economist (or indeed anyone) is [[Laurie Williams]]' now famous \"15%\" study.</i>",
      "id": "1bfe32d7b416ca19860f469074e7b186"
    },
    {
      "type": "html",
      "text": "\nMedical quality studies cost millions. Just look at the companies that mandate pairing. How are they doing in their markets these days?",
      "id": "4874031c0731d552086ef6869d3b0df2"
    },
    {
      "type": "html",
      "text": "<i>(And note: From a scientific perspective, the \"15% more time\" figure is <b>not statistically significant.</b> That is, given the small sample size, there could be no additional cost. Or it could be over 15%. You just don't know.)</i>",
      "id": "3954c42cff7e7c16481c6d375bf3c9f2"
    },
    {
      "type": "html",
      "text": "\nIt is also a pattern; see [[Pair Programming Pattern]].",
      "id": "028b7d80971e9199e2c5a47f2087c79c"
    },
    {
      "type": "html",
      "text": "<i>Before contributing to this page, please consider if your comments might be better suited to one of the following:</i>",
      "id": "d0deae054ab7d0bcfff0dc542630950f"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Questions]]</b>",
      "id": "31cec8e4a5a98e6d184d601a33022d06"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Statistics]]</b>",
      "id": "db154254ca8f3cb6ebf0f0ae172e6904"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Doubts]]</b>",
      "id": "6a83efee67c21ac434b41f8dd0639a77"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Objections]]</b>",
      "id": "a5942991d3b812cb2c1fc373d70358f6"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Limitations]]</b>",
      "id": "d7b3e80a1ea54182d9f430b6d46fd058"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Gone Bad]]</b>",
      "id": "65f4bfccfc1d1ab7c3a256455be6e68c"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Misconceptions]]</b>",
      "id": "d4400b1ad29f2a73cf4089a1a82cd51f"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Variations And Alternatives]]</b>",
      "id": "e162890b1b210174df23b8a83acc4ee0"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Not Doing It Pain]]</b>",
      "id": "2a156abeb37e1ba9f153679ef1ffbfd8"
    },
    {
      "type": "html",
      "text": " <b>[[Pair Programming Not Doing It Pleasure]]</b>",
      "id": "bf0c6d361ff4532c584000ca31c646fa"
    },
    {
      "type": "html",
      "text": "<i>On many of the above pages, communication seems to have broken down between proponents and detractors of pair programming. The debate seems to have two sides: \"pair programming always works\" and \"pair programming never works\". It's pretty clear, after hearing all the testimonials from both sides, that it works sometimes and doesn't work other times. Please consider contributing to the discussion in the mode that there are features of a problem, project, and person that make pair programming more or less effective. Try to assume that there are valid reasons for these differences and they are not simply the result of deficiencies.</i>",
      "id": "c11d03b49c5183be4828f33fe119c719"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "\"\"Purr Programming\"\"",
      "id": "87c4049ca3eb976745a19a6e39766c63"
    },
    {
      "type": "html",
      "text": "\nA evolution of pair programming where a human dev pair is substituted for a feline dev pair.\n[http://www.purrprogramming.com www.purrprogramming.com]",
      "id": "a9239a071efb3f52fb975284031c78cc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<b>[[Pair Programming Markers]]</b>",
      "id": "8fe8198870b1a7013bc2926aaaf099b8"
    },
    {
      "type": "html",
      "text": "\n[[Ward And Kent]] lead a BOF at OOPSLA'97 that included looking for patterns in the code and in the recorded dialog between programmers as they work together. These are the patterns they found ...",
      "id": "0be9333e85a4ccd5a306eaf4ff43f024"
    },
    {
      "type": "html",
      "text": " <b>Let me drive.</b> (One of the idioms of pair programming)",
      "id": "86b2c1461acf953aa7fa3ccb3829227a"
    },
    {
      "type": "html",
      "text": " <b>x - 1 // n + 1</b> ([[Fence Post Error]]s?)",
      "id": "51cbde6cfb05f2336932527a6e1fb142"
    },
    {
      "type": "html",
      "text": " <b>inject:into:</b>",
      "id": "469ac7ed897a16d8fd5cfccf1ce562bf"
    },
    {
      "type": "html",
      "text": " <b>role suggesting variable name.</b>",
      "id": "4c550d4ccceaca100a10aadc1cb2e892"
    },
    {
      "type": "html",
      "text": " <b>trust me.</b> (Sometimes you have an idea for how to do something, but not the words to explain it. \"Trust me\" gives you a couple of minutes to type it in without your partner stopping you.)",
      "id": "40e634a1b5e29a17e1c2dc4a5ed6374a"
    },
    {
      "type": "html",
      "text": " <b>look where you would write it.</b> (When looking to see whether a method you need already exists, look in the place you would put it if you had to write it.)",
      "id": "934aae2259cfcf3896c628602f2153b3"
    },
    {
      "type": "html",
      "text": " <b>[[Ask The Computer]].</b> (Don't reason about what will happen if you do X. Do X and see what happens. Send the message and see what it does.)",
      "id": "b65647b1f5c4bafff0e2864412910eec"
    },
    {
      "type": "html",
      "text": " <b>multiple pens.</b>",
      "id": "8f3b95a906397480baa570353b94a291"
    },
    {
      "type": "html",
      "text": " <b>[[Blame Yourself First]].</b>",
      "id": "72d358db1ab33c92842ed6b7ac23f541"
    },
    {
      "type": "html",
      "text": "\nContributors: [[Michael Feathers]] [[Katy Mulvey]] and others.",
      "id": "d488b2001c1596dab816797ba0fe9cc5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<b>Pair Programming History</b>",
      "id": "578017693768512d5255679b56d966f4"
    },
    {
      "type": "html",
      "text": "\nJust saw that I had marked (and forgotten) a section in \"Constantine on Peopleware\" in which he described a visit to Plauger's group, where they were programming in pairs, with the same descriptions as [[Ward And Kent]] use. Constantine called it \"Dynamic Duo\" development.",
      "id": "ec66fb777777ead91c226e79b30d1713"
    },
    {
      "type": "html",
      "text": "\nThat makes, so far, 3 or 4 separate inventions of this technique that I have encountered, each finding it advantageous. -- [[Alistair Cockburn]]",
      "id": "ac71ae12c40bab4a2328152cdede1d79"
    },
    {
      "type": "html",
      "text": "\nAnd a 5th time ... I was leading a team of 4 programmers working on a flight simulator in 1996. Each programmer was assigned a separate aircraft system. The programmers came to me and told me that, as they were always helping each other (this was FORTRAN on a weird system...), they wanted to work in pairs on each system. This seemed inefficient to me at the beginning, but the big improvement came when the weaker programmers improved within a short time and there were fewer bugs in the fixed time we had for the project. -- [[Nissim Hadar]]",
      "id": "2f40dde142d2eef6d1fa07a0a6c79589"
    },
    {
      "type": "html",
      "text": "\nSee also [[Dijkstra Pair Programming]]",
      "id": "dd165877edcb0633c2673a96a1ba64f9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<b>Pair Programming Tidbits</b>",
      "id": "c0f247ce15ad604e5286d0a9be80ab8e"
    },
    {
      "type": "html",
      "text": " Anyone else tend to type \"[[Programmingin Paris]]\"? (Must be wishful thinking.)",
      "id": "e0d3ccfa334bee7158027c4450df18d3"
    },
    {
      "type": "html",
      "text": " It is sometimes useful to have [[Divergent Pair]]s work together, to spark \"creative abrasion\". -- [[Yonat Sharon]]",
      "id": "a1ee8be064a8f29f7b019d2d16b012fc"
    },
    {
      "type": "html",
      "text": " When people say that pair programming reduces productivity, I answer \"that would be true if the most time consuming part of programming was typing\" -- [[Martin Fowler]]",
      "id": "4241e934b9a4d778d0218ecc9857b386"
    },
    {
      "type": "html",
      "text": "One more pattern in pair programming that I found very useful is [[Record Your Communication In The Code]]. -- [[June Kim]]",
      "id": "242efa814f27d942be41e4a666da6e05"
    },
    {
      "type": "html",
      "text": " Those of us who spent time training others know that this is virtually the only way to really teach someone something that involves hands-on work, which programming definitely is. -- James Clover",
      "id": "1d52e0fdd729300363437bc78037e7b7"
    },
    {
      "type": "html",
      "text": " [[King Crimson On Pair Programming]]",
      "id": "dca2810d1ff940bf87e4324864791269"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<b>Pair Programming Case Study?</b>",
      "id": "485b1554ce8841ff2d1388b6f25826ad"
    },
    {
      "type": "image",
      "url": "http://zeekland.zeroplayer.com/stories/009_Uncle_Wiggilys_Travels/ZeekLand0550.png",
      "text": "zeekland.zeroplayer.com",
      "id": "035c9b6abb15d3c61b7e955dde201756"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "7a266391a618cda436432ad6340273a2"
    },
    {
      "type": "html",
      "text": "\nFull write-up at: [http://zeekland.zeroplayer.com/Uncle_Wiggilys_Travels/43 zeekland.zeroplayer.com]",
      "id": "da4dbe82677bcd175e0c4883bdaf273a"
    },
    {
      "type": "html",
      "text": "\nWhat programming, especially in pairs, feels like, at least in one case:",
      "id": "3eeeb7a80695d693ab0b30c786b43a9e"
    },
    {
      "type": "html",
      "text": "\n[http://www.salonmagazine.com/21st/feature/1997/10/cov_09ullman.html www.salonmagazine.com]",
      "id": "13e434961bcb331898a267e36c39c032"
    },
    {
      "type": "html",
      "text": "<i>Yuck. I read the article with growing horror. Just another example of pseudo-heroic sloppy cowboy debugging. pair programming appears to give back more than it takes - the opposite of what the article illustrates. Having not done pair programming (yet!) I can't speak from experience, but I know someone could...</i> -- [[Rodney Ryan]]",
      "id": "124aec6bc8f006ac490ba8d2312a9e9c"
    },
    {
      "type": "html",
      "text": "\nIt's a weird book ([[Close To The Machine]]). She has a very strange, dark outlook. But much of what she writes expresses a truth that many have lived. -- [[Ron Jeffries]]",
      "id": "15463e1073b2b5a1a27175685615f481"
    },
    {
      "type": "html",
      "text": "<i>I agree. However, I'm asking if people who have practiced pair programming view the article as a good example of pair programming. Is it a situation that indicates movement in the most effective direction?</i> -- [[Rodney Ryan]]",
      "id": "cc654f790e6a8fffacf9a40cb359b881"
    },
    {
      "type": "html",
      "text": "This would require me to read the article which I shall shortly, but I have informally used pair programming many times throughout school, graduated in 2010, and found it to be very good at reducing later bugs.  Anyone who has ever programed a non-trivial program should agree that the issue isn't the time it takes to write the first iteration of the code but really the very very long tail of removing the bugs in the program. Pair programming takes a bit longer to write the first time but it produces much cleaner code.  I for one would think that monoganamous pairs are a good idea, or atleast in a relatively small group as learning each other's quirks is one of the personality issues with forming a [[Good Pair]], -- [[Andrew Ricketts]]",
      "id": "a7224e26d0235217fe253f8b65294dbe"
    },
    {
      "type": "html",
      "text": "\nUllman got the mind-meld part right. And she understood that pairs didn't have to be equals to be effective. But she couldn't keep the meld up through completion with the first developer and couldn't even start to meld with the second. Amateurs. -- [[Ward Cunningham]]",
      "id": "25e1ec84ffdf59b74633c4deb8891811"
    },
    {
      "type": "html",
      "text": "\nIf you took out all the macho midnight brainburn stuff, the experience isn't atypical. Done calmly and peacefully, however, it's more a gentle flow than this orgasmochistic explosion of sensation.",
      "id": "74e1d71ecaab0a43600fff7efcf4fb40"
    },
    {
      "type": "html",
      "text": "If both of you have a beer before doing pair programming in my experience sometimes seems to help the process! -- [[Daniel Poon]]",
      "id": "a360be5a924596ef587f0cf504f03c8d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<b>Pair Bug-Finding</b>",
      "id": "f2bc85ff141977162cc21c711115f433"
    },
    {
      "type": "html",
      "text": "\nAlthough we don't practice Pair Programming, we've been using it then trying to find bugs. In this case it seems to be a [[Good Thing]]. ",
      "id": "5a4c8c7ddb047d2a6879ea3bb47a0c0c"
    },
    {
      "type": "html",
      "text": "\nHowever, our team is too small to use it all the time.",
      "id": "6cd6faf2cc32d5ce3c94697c1201dfcd"
    },
    {
      "type": "html",
      "text": "-- [[Geraldo Xexeo]]",
      "id": "837c60a51952a51059fc5ef8aeaf10fb"
    },
    {
      "type": "html",
      "text": "\nI'd argue that small teams will naturally start some pair programming (and pair everything else: planning, design, debugging, etc.) naturally because of the low communication costs. Oh wait, I did argue that: [http://blog.markturansky.com/archives/69 blog.markturansky.com].",
      "id": "a59fe32695a40d53a92e9fc31ee51807"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Maybe pair programming should be renamed [[Continuous Review]]?",
      "id": "308f68092379333c30c0b61ca3642c27"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "A couple more thoughts on why I think XP is not, as Steven asserted, \"just a codification of bad programming practices in bad environments.\" One key point I haven't seen in the arguments here are the constraining (read improving) effects that pair programming places on rogue programmers with a [[Jang It]] mentality. Even if you tend to have cowboy coders in your group, pairing them up with an experienced XP'er virtually guarantees the code will be written properly and the necessary testing will also be put in place. Even if two JANGmeisters are paired together (and the rest of the team will know when they are) the resulting code will still be better than if either went off on their own. While not the most desirable scenario, as discussed in other pages ([[Vcaps Project]], pair programming), it still provides a certain set of checks and balances between the two since no two people think alike. Since the rest of the team knows about the volatile pair, any offending code will be corrected during [[Extreme Programming Code Reviews]]. In other words, the team knows what code is going to have to be reviewed more thoroughly when certain pairs are put together (it's just a reality of working in groups). When combined with the other factors of XP what results is the <b>elimination</b> of bad programming practices and bad environments.",
      "id": "f68e1d525d89fd47b18a5626f7599317"
    },
    {
      "type": "html",
      "text": "\nPairing also gets rid of any problems resulting from <i>mediocre</i> programmers writing poor code and documentation, as mentioned above. It seems the dissenting opinions keep forgetting that arguing against one particular aspect of XP won't work because it is the other aspects that balance out most of the possible negative side effects when taken individually.",
      "id": "77f89d336644b86379a7804522b4a255"
    },
    {
      "type": "html",
      "text": "FYI, I'm speaking from the point of personal experience in that I didn't think pair programming was going to help me improve my code and make me faster. So I went in quite skeptical. As you can tell, my views have changed just a bit. -- [[Tom Kubit]]",
      "id": "56627d593a78ea78fa9ceb354cdb1103"
    },
    {
      "type": "html",
      "text": "<i>So what, pair programming is a [[Band Aid]] on bad hiring decisions?</i>",
      "id": "cc664303b88e091b6d767f053b4b1e60"
    },
    {
      "type": "html",
      "text": "<i>How about, I dunno, <b>[[Replace Mediocre Programmers]]</b>. Might be just crazy enough to work.</i>",
      "id": "e238bfdf6346a92d3ca4198ba6f928cb"
    },
    {
      "type": "html",
      "text": "<i>Arguing against particular negative aspects of XP is good for discerning which parts of XP might hold some value for you, when you're reluctant to just swallow the [[Xp Religion]] whole. Take what's useful. Leave the rest.</i>",
      "id": "11f1c28a957544486095186a179146b9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "XP is not a 'pseudo-methodology' as Steven asserts above that is allowing 'proponents of this technique have simply given a name to poor programming practices'. The XP methodology does, however, require a mental attitude that embraces change, and a willingness to learn, not only from ourselves but from others.\tOne of the strongest strengths in XP is pair programming. We have found that the interactions that happen within a pair team is vastly more than the sum of the parts would produce. Even the most experienced coder finds that they are producing a design/code that is at a much higher level than they could do alone. We have found on the [[Vcaps Project]] that there is typically less indecision in a pair team, ideas are thrown back and forth, and the solution space is quickly narrowed as advantages and disadvantages are discussed within a pair team. XP is a philosophy, a methodology that I strongly believe in. -- [[Kevin Bradtke]]",
      "id": "53c6a9118fb414a2c5d7fb55a1730128"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Is it just me, or is pair programming one of the most difficult XP practices to implement (if not the most)?",
      "id": "22bdb4f89aba033b152c54cc27958b16"
    },
    {
      "type": "html",
      "text": "<i>For some people, it is. For some people, it's perfectly natural.</i>",
      "id": "0ba3fe29c8d7baa281c468d599a19d7a"
    },
    {
      "type": "html",
      "text": "Granted. I meant that, in testimonials about attempts to implement XP, I read of more resistance to pair programming than any other practice. I think.",
      "id": "b54336422dd6d53eaac68fbcf576ea16"
    },
    {
      "type": "html",
      "text": "<i>[[Unit Test]]s are my reviewer. If the code works according to the [[Unit Test]]s then why is continuous review necessary?</i>",
      "id": "43fd249b1fa4c9c64dfad616c6a5416c"
    },
    {
      "type": "html",
      "text": "\nWho wrote those [[Unit Test]]s? If it was you, how can you be sure that the [[Unit Test]]s cover all bases? A continuous human reviewer can catch issues like that, and can also make the development process much faster by suggesting improvements that cut down on development time or potential bug count. -- [[Brent Newhall]]",
      "id": "3719b9d6e69ccc4fbffa3f841b378ff4"
    },
    {
      "type": "html",
      "text": "\nThere is also the argument that adding a reviewer reduces quality. Each person tends to rely on the other to find the problems, and neither becomes responsible for discovering problems.",
      "id": "3c1a71ece2de9a2f45c57cb489787f50"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Well I hope I'm not intruding as I'm quite new to this wiki and the general [[Wiki World]]. But I have a curiosity about pair programming. Now I've seen the doubt raised before, but the response was not very clear. Doesn't pair programming interrupt the [[Programming Flow]]? I find that when I work with other people I always have to 'snap out of it' when they ask me something? Most of my projects I did at the university were with the same person. Now this person didn't have as many programming skills as I did. But every time he'd ask me a question it would interrupt my [[Programming Flow]] and I'd have to say 'wait up' and try to get back into it. Now this was mutually frustrating. First of all, I couldn't continue the part I was working on, and secondly it made my partner feel like he was incompetent. Pair programming can be good (though I've never tried it) if you divide the tasks, one does testing the other does implementing. But sitting with two people at the same screen seems a bit overdone. Also in the projects I've worked with I've always found that time for writing tests is never available. That doesn't mean manually debugging of problems aren't done (like when something won't work the way you want it). -- [[Anonymous Donor]]",
      "id": "88d5bb41a402b1843103ab7bc07a9162"
    },
    {
      "type": "html",
      "text": "For one, in pair programming, you're operating according to a different [[Mental State Called Flow]] than you are when [[Solo Programming]]. Note that generally [[Pair Programming Is Done By Peers]], which goes against the example of programming with someone who doesn't have the same skill. There should be fewer explanations and more collaboration. Also note that pair programming is somewhat [[Counter Intuitive]]. It works, even though it doesn't necessarily seem like it would work. -- [[Brent Newhall]]",
      "id": "9ee1aa120ff9bd80f21ffda3a4723d6a"
    },
    {
      "type": "html",
      "text": "\nI would also like to comment on the above. If you were programming together with somebody else and this was at the university shouldn't you have tried to find another lab partner then? It feels like you just destroyed your friends possibilities to actually learn anything. He doesn't want to ask questions and you just do all the difficult things that he should learn. What's the point with having a partner that isn't as good as you? And about spending time on tests. For really small projects I can agree, but on any medium to large university projects (that means mostly everything after the first year or so) you will actually gain time if you write tests. I have spent many long nights looking for bugs that would have been found immediately if I had written tests in advance. -- [[Daniel Luna]]",
      "id": "3d4a4f3e51b97f7ed810b0f4485c5a9b"
    },
    {
      "type": "html",
      "text": "\nMy answer to this would be to have the less experienced developer drive. The observer should talk him/her through it, incorporating ideas from both. A craving for one's own gratifying [[Mental State Called Flow]] has to take a back seat to maintaining a common understanding and a productive dialog. It may take a while before the more experienced developer can drive in this situation. If it takes too long, either the more experienced developer isn't doing it right, or the less experienced person is in over their heads. -- [[Chris Dailey]]",
      "id": "a0b2c3c6185312befc48b875a5731dd4"
    },
    {
      "type": "html",
      "text": "\nSeveral of [[Anonymous Donor]]'s problems seem to arise from failing to follow the rules - rules that I tell my students every semester: ",
      "id": "9dec7d93eef59bf0f1db5022ab651a2b"
    },
    {
      "type": "html",
      "text": "\n1) As [[Chris Dailey]] and [[Laurie Williams]] both say, let the less experienced person do the typing. That way neither person can zone out, the weak partner will learn from time-on-task, and the strong partner will learn from having to explain things. At first, it'll be slower than the strong partner doing it directly, but the weak partner will quickly become a useful member of the team. ",
      "id": "f12f5c1aa9ee164649b49ec59a77e742"
    },
    {
      "type": "html",
      "text": "2) Pair programming is not about divide the tasks, one does testing the other does implementing; it's about both partners being involved in everything. ",
      "id": "07b441f8ffc91c767d8d2f2981a64f86"
    },
    {
      "type": "html",
      "text": "\n3) time for writing tests is never available. You can't possibly be in that situation if you write the tests before writing the code they are to test, as recommended in [[Test Driven Development]]. -- SBloch",
      "id": "b4eb4502f6fdbd93feb1cb521b055c9d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<b>Random Thoughts on Pair Programming: Knowledge transfer</b>",
      "id": "f3f118ed2fe1697cabdc77ed3206c708"
    },
    {
      "type": "html",
      "text": "\nI read through all of the above. I feel there are important points missing from this discussion. (Arrogant Bastard that I am).",
      "id": "c1129e66031abe0f17ffde1588a32fc2"
    },
    {
      "type": "html",
      "text": "My Experience with Pair Programming can be summed up as follows. One group I worked with I was the J2EE guru (I was hired for my knowledge of J2EE). We adopted pair programming. I found that not only was I teaching and mentoring the novice J2EE developers, but after a few weeks (even more so after a few months) I was learning a lot from them. J2EE is big (EJB, Custom Tags, JSP, JMS and more). The knowledge of the team increased exponentially. This could not have been accomplished without Pair programming. I have never increased my skill level so much in such a short amount of time. ",
      "id": "bc3878b8b3268305eb3641fb8bc3bc0d"
    },
    {
      "type": "html",
      "text": "\nThe amount of experience and knowledge gained by pair programming with ten people for a year is equivalent to working for five years in a shop that does not use pair programming. (This includes domain knowledge transfer.)",
      "id": "c4b0d3e04d5e2ce5c1c7f4559b88f9ba"
    },
    {
      "type": "html",
      "text": "\nAlso, we started building a reusable framework. I don't think we could have made so much progress without pair programming. Code cannot be reusable if no-one knows how to use it. Pair programming grows in value the longer you do it. Not reinventing the wheel means less code in the code base to do the equivalent functionality. Less code is less code to maintain (and learn). The benefit of pair programming is not linear. It grows the more you use it.",
      "id": "8cd3ecacfaf7cb5e53dcd9b870eae8e1"
    },
    {
      "type": "html",
      "text": "\nWhat do you do with people who will not try pair programming? Fire them. Just kidding (sort of). I found through experience that the people who have the hardest time with pair programming usually become the biggest pair programming advocates. Here is the recipe. Set a metric that every team member do at least 10% pair programming (4 hours a week in the U.S. .... 3.2 hours in France). Slowly raise this to 50%. I have not had one person who has tried pair programming not prefer it. Believe the 96% people prefer it figure cited earlier. (Our team could only achieve 80% pair programming or so per week as in 32 hours a week. The rest of the time spent in meeting with customer (5%), planning(5%), designing in groups(5%) and working alone (5%).)",
      "id": "13d037ded7c9126441291d2f5bf5716e"
    },
    {
      "type": "html",
      "text": "\nHere is a suggestion that is not going to go well with some. A tree grows best if you trim some branches from time to time. Not everyone on the team is going to work out. This gets amplified with pair programming. Unlike environments that do not use pair programming, environments that use pair programming are very sensitive to stinkers and slow pokes. Notice I am not saying novices. There are fast smart novices, and there are hard to work with experienced folk. We have had experience with getting rid of a few people and our project velocity increasing (the people were causing more harm than good). With pair programming, it is easier to identify these issues because everyone works with everyone else (switch partners often facilitates knowledge transfer), and the team knows who is not pulling their weight. In fact when we made adjustments to the team, no-one complained. ",
      "id": "bfbec86a40e1320f86b11f0e3e63eb7f"
    },
    {
      "type": "html",
      "text": "\nPair programming works best with talented, professional folks. Unless you prefer working with talentless, unprofessional folks, pair programming will work like a charm.",
      "id": "1d1c7c7ff8c9e811b80c4a0b942a6274"
    },
    {
      "type": "html",
      "text": "\nSee [[How To Piss Off Your Pair]]",
      "id": "e756110feb5b7dc40113a45ba693af77"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Question - if you have a set of [[Pair Programmer]]s say P1,P2,... say up to P5 , how best to cross-train so if one or more members of each pair (randomly say P11 and P32) is off sick, on vacation, or leaves permanently the group can be re-arranged to continue efficiently pair programming? Ie should Pi1 cross train with p(i+1)2, P51 train with P12 by switching places once a week, month or whatever so there is a high probability of someone who knows each project to change pairs if needed? Even though there may be documentation, version control and the remaining pair member can explain to the new one etc wouldn't scheduled cross training reduce learning time and make transitions easier when pairs get shuffled?",
      "id": "0bb10cb2826cfe981134dd4241c3eb2d"
    },
    {
      "type": "html",
      "text": "<i>Huh? [[Pair Promiscuously]].</i>",
      "id": "689f2171e7318a34277d3efb979d473f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Pair Programming can be considered as a shield from the negative environment impact: [http://www.jroller.com/comments/deep/Weblog/shield_from_real_world_impact www.jroller.com] . -- [[Roman Porotnikov]]",
      "id": "77e937b755bb379a47fe95761e8978a7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Any one got examples of pair programming concept working well for [[Cobol Language]] projects? Any site names and any special considerations to make it work? -- dl",
      "id": "a5907cd73c23acf8eb817d0624ba1396"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<b>A Personal Experience with Pair Programming</b>",
      "id": "327f92000ce0490e9086bcde48c03165"
    },
    {
      "type": "html",
      "text": "The most successful use of pair programming that I have personally experienced is on my current contract. We are dealing with a legacy database that is \"unnormalized to the extreme\" and cannot be changed for a variety of reasons. The programmer I am working with has little [[Object Oriented]] experience, and is new to using an OO language, but he is a fast learner and an expert with respect to the data and domain.",
      "id": "91d23f24735958b8e929ab1d7a48d22d"
    },
    {
      "type": "html",
      "text": "\nHe is learning OO techniques, Patterns, divide and conquer and the language issues etc while we are speeding ahead much faster than if I had to take more time to pre-learn everything about the data in the database, much of which is irrelevant to this project. We are experiencing a magnitude increase in productivity over working independently. In addition, our combined understanding of the system is leading to improvements in the design and the maintenance of this system will be greatly simplified as a result.",
      "id": "e214e688bb5b455d88972127e925c8dd"
    },
    {
      "type": "html",
      "text": "We got a good laugh over the \"mind meld\" comment and photo above, as this mirrors how we feel about this experience. I also believe that the personalities of the individuals involved can make or break the pair programming experience. So ... it is not for everyone, but when it works it really works well!",
      "id": "4b6eca89849217b32e72bccc9a3ffec8"
    },
    {
      "type": "html",
      "text": "-- [[Judy Green]] (Judy N. Green)",
      "id": "510473b9694401e37b6dd438aacbabba"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "When done with the right person, pair programming feels like a turbo booster to your mind.",
      "id": "4649603704e7a342288a53bb68d67ff7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "I first experienced Pair Programming many years ago, my partner and I were both Pair Programming virgins and were so blown away by the experience we got married the same year. We've Spouse Programmed for over a decade now and would strongly recommend it.",
      "id": "733958483779a5c60a14f19e8cbd45ba"
    },
    {
      "type": "html",
      "text": "\nIf there isn't a Pair Programmers Dating site already there should be.",
      "id": "6882bcdc333e9f0b05a9d9f04ddfb128"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Has anyone tried pair programming over VNC or something with a faster protocol (text or IDE based rather than graphical). I'm thinking about developing a network system in a text editor project so that programmers can pair up. Currently I think VNC is a bit slow so obviously a custom in-text-editor design would assist the speed. ",
      "id": "4ed55b7322a47d0ab5ec3696c7370dfe"
    },
    {
      "type": "html",
      "text": "\nSee [[Virtual Pair Programming]] and [[Collaborative Editing]].",
      "id": "6b172cbf73a3ba5ac185a26d2ce1fff5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "I'm getting the feeling that pair programming is holding back the adoption of eXtreme Programming. There's a general fear of pair programming. Developers often prefer to work alone, as I do. This makes it harder for me to implement test driven development, which I like and most agree. -- [[Randy Charles Morin]]",
      "id": "09c0a3c36478da286cfdfc72ce1555b1"
    },
    {
      "type": "html",
      "text": "<i>Have you tried pair programming?</i>",
      "id": "9cbb461c5886e1eccb2f7a0f86393bd9"
    },
    {
      "type": "html",
      "text": "\nYes and I wasn't thrilled with the results. But that's not my problem. It's an adoption problem. -- [[Randy Charles Morin]]",
      "id": "abb0553d0fa6e8266ae41ca26909b061"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Things like the [[Pair On]] would help the adoption of pair programming in many organizations.",
      "id": "8df275a4f4a49fddf042e70d6b5ab48e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "At my school we tried implementing pair programming in a couple first year classes. For a bunch of possible reasons it didn't work out. The way we did it was to pair people up at the beginning of the semester and they would work together on all assignments. Well, by midterms we realized that about half the class knew what they were doing and the other half did not. Perhaps it was too early to start pair programming, perhaps it wasn't appropriate for course work. It does seem to work for real programmers though.",
      "id": "27685c2fa1e96af0a0f470fa7f1828b7"
    },
    {
      "type": "html",
      "text": "<i>I'd think that the grade issues would make pairing difficult in an academic course - if your partner is truly behind the curve, your desire to pass the course would be pressure to take over the development. In a work environment, there is no stigma about heavily coaching your partner, so you can make a difference in how they are. Also, IIRC pair programming calls for switching partners fairly often.</i>",
      "id": "e5e24ecc8a45049e8457c755b11426e2"
    },
    {
      "type": "html",
      "text": "\nYou could have made basic notes on ability and personality as part of the assignment marking procedure, then re-paired the students for the next assignment matching like with like. Then you get to focus more resource on helping the slow kids to learn slowly, while the fast ones go ahead with teaching themselves.",
      "id": "05f5f67cb9e4fad8119243f8826a8508"
    },
    {
      "type": "html",
      "text": "\nAnother data point: for several years, I've assigned my freshman programming students to use pair programming, generally telling them to switch partners for each assignment (with 6-10 assignments in a semester, I figure the [[Law Of Averages]] allows me to assign reasonable grades). Many of them are reluctant to switch, often claiming that they've found the only student in the class whose weekly schedule is compatible. A previously-unmentioned benefit of pair programming in this environment is that I have half as many assignments to grade, so I can give more and/or quicker feedback. -- SBloch",
      "id": "9de198dca7b3d9611c0675217cca0d32"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "It would probably be easier to sell if it were de-mystified. We used to call it [[Working Together]]. Walk into any engineering shop and you'll find people gathered around white boards and workstations, collaborating on (not reviewing) design decisions. Before screens, it was common practice to desk-check each other's coding sheets. Even after screens, programming where it mattered (ISVs and OEMs) was still collaborative for two reasons: it produces better code and it eliminates the risk of losing the only person who knows how a bunch of the code works. As a manager, I want every line of code to be clearly understood by at least two people - preferably more. This is in and of itself such an important requirement that it renders all other arguments for or against collaboration irrelevant.",
      "id": "18534a850b3ca56796c5a0817116b64e"
    },
    {
      "type": "html",
      "text": "[Anecdote: When I was field systems analyst at SDS, anytime a significant piece of software was ready for release a bunch of us would be brought into HQ for \"familiarization\". That involved the programmers walking us through every line of code and key path diagrams, so that we not only knew what every line of code did, we also got to propose lots of improvements. We all went back to our offices with copies of the source code on mag tape (like a CD but bigger and lower capacity).",
      "id": "3b1d6ceafe9e38ba8eaf98eac1791702"
    },
    {
      "type": "html",
      "text": "\nSomeone could have nuked HQ and SDS could still have gathered a gang from the field to continue work on the product. Oh yeah - the code was in assembler. A lot of lines.]",
      "id": "bb56d44f7ec22adc2774f9c30b39498c"
    },
    {
      "type": "html",
      "text": "\nPair programming seems novel because for the past decade or two we've been tucking programmers away in cubicles and allowing them to avoid [[Working Together]]. Big mistake.",
      "id": "cedf10341d256c1deb572e1ccb1a280f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "There are various setups and configurations that can be used for pair programming. My current experiences are summarized here: [http://weblogs.asp.net/jcogley/archive/2004/10/13/242117.aspx weblogs.asp.net]. -- [[Jonathan Cogley]]",
      "id": "285dff2cc8f7be34a0048ffa1ab67451"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "<i>Q</i>: I don't like pair programming",
      "id": "d50c951448a9188961863bb07c8ae5ba"
    },
    {
      "type": "html",
      "text": "<i>A</i>: There is no <i>I</i> in <i>PAIR</i>!!!",
      "id": "3115ea096ba45e255ce237a2efd41e48"
    },
    {
      "type": "html",
      "text": "<i>Q</i>: ...there is, 3rd letter in..!",
      "id": "d52656448bc16bd7a84fe523da718f5b"
    },
    {
      "type": "html",
      "text": "<i>A</i>: EVERYBODY ROTATE!",
      "id": "1f1df05c74ab740a988b05ed786c311e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "[[Ward Cunningham]] has eloquently described the joy of sharing a [[Cocoa World]] programming session with a child:",
      "id": "bd785b9ba171e040c2bef3219f1b3358"
    },
    {
      "type": "html",
      "text": " [http://c2.com/~ward/cocoa/notes/pairs.html c2.com]",
      "id": "8f5e49eb2c8e595e5421790a8e9df57b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "Anonymous:\nsaves on the cost of computers and desks (but not chairs)",
      "id": "b9f6513a92aee0d2f03c884993878ca3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "How do you handle a situation in pair programming where the two programmers have opposite philosophies? For example if one is data oriented and the other is information oriented? They will generally make the opposite decisions at every turn.",
      "id": "bca4779b5fea2321a2e8fb3cc33a044c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "See also [[Basketball Metaphor]], [[Pair Lust]], [[Heard Of Dyads]], [[Flow Number]], [[Pair Vine]], [[Mark Your Territory]], [[Is Pair Programming Mandatory]], [[Xp Without Pair Programming]], [[Pair Programming Power Lunch]], [[Men Downa Hole]], [[Pair Managing]]",
      "id": "8518a038482f2a1a7cd5acd0df31175b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8ce4a5c4791ba8e456aa84be6de6186f"
    },
    {
      "type": "html",
      "text": "[[Category Pair Programming]] [[Category Collaboration]]",
      "id": "227302c5bb2cea9fe3bf03799fdcb604"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?PairProgramming c2.com]",
      "id": "5c40236d93d6de7ddc233afacd7828dc"
    }
  ],
  "journal": [
    {
      "date": 1403935150000,
      "id": "70f0e0c7453c351124c8ee7a88b532f1",
      "type": "create",
      "item": {
        "title": "Pair Programming",
        "story": [
          {
            "type": "html",
            "text": "<i>My mind to your mind. My thoughts to your thoughts...</i> -- [[Mr Spock]]",
            "id": "b3e95c2c55180c6ec985eaddb2c09056"
          },
          {
            "type": "image",
            "url": "http://web.archive.org/web/20051216201720/http://lemonodor.com/archives/images/ant-heads.jpg",
            "text": "web.archive.org",
            "id": "f1d5badb4253c7921885dc5f99a16e27"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "7a266391a618cda436432ad6340273a2"
          },
          {
            "type": "html",
            "text": "<b>Pair Programming</b>:<br>An [[Extreme Programming Practice]] in which two engineers participate in one development effort at one workstation. Each member performs the action the other is not currently doing: While one types in [[Unit Test]]s the other thinks about the class that will satisfy the test, for example. A single, unsubstantiated, unscientific, undergraduate's survey has shown that, after training for the \"[[People Skills]]\" involved, two programmers are more than twice as productive as one for a given task.",
            "id": "b93163b978b1d890d3d86d5598a83891"
          },
          {
            "type": "code",
            "text": " ''Once upon a time there was an engineer''\n ''Drove a locomotive both far and near''\n ''Accompanied by a monkey who would sit on a stool''\n ''Watchin' everything the engineer would move''\n    - Jesse Fuller, \"The Monkey and the Engineer\"",
            "id": "0fd0a2effb2169d61ad061e3c34ff122"
          },
          {
            "type": "html",
            "text": "\"[[Laurie Williams]] of the University of Utah in Salt Lake City has shown that paired programmers are only 15% slower than two independent individual programmers, but produce 15% fewer bugs. Since testing and debugging are often many times more costly than initial programming, this is an impressive result.\" <i>([http://www.economist.com/displayStory.cfm?Story_ID=779429 www.economist.com]), September 20th 2001</i> For more on this, see [[Pair Programming Benefits]] and [[Laurie Williams]].",
            "id": "75d02d7754c915c2fabf170b8da95f3f"
          },
          {
            "type": "html",
            "text": "<i>I see ... so if you reduce the rate of progress, and if you measure the number of \"bugs\", they seem to be less!! hmmm I guess at slower speed, we get somewhere \"clean\".</i>",
            "id": "477f3c2ee05d264b29d6946925aa0c2c"
          },
          {
            "type": "html",
            "text": "\nDone right, pairing should produce some lines of code which neither pair can remember who wrote them.",
            "id": "2ea1671e307cda7b3e71063f51c3207e"
          },
          {
            "type": "html",
            "text": "<i>How do we know that this is an improvement over a lone programmer spending 15% more time to get the code right the first time?</i>",
            "id": "9b78b78c02d7cd2d93be22efc86db801"
          },
          {
            "type": "html",
            "text": "\nIf you look more carefully at the numbers, there is actually a 50% reduction in the number of bugs. (The passed tests went from 70% with solo programming to 85% with pair programming. This is 30% failed tests compared to 15% failed tests, or 1/2 the number of failed tests). It's also conjectured, but not proven, that this reduction in bugs will later gain you back the 15% in \"lost\" productivity.",
            "id": "abbe02230bda186c0168d0057a5d5a98"
          },
          {
            "type": "html",
            "text": "<i>(warning about comparing percents: you need a 100% gain in your stock portfolio to break even after a 50% loss)</i>",
            "id": "341736209d7b5002f44b38d86ef47a0c"
          },
          {
            "type": "html",
            "text": "\nNext, because a small bug introduced in development, and not cleaned up, can often cause an order of magnitude more trouble in the field. So a gain of 15% in rote development stands to save 150% later on. To put it another way, a colleague once humble-bragged he was a good enough gambler he was net-positive on his junkets to Las Vegas. I requested he subtract the costs of hotel rooms & meals. This is the [[Framing Problem]]; when you frame some data and analyze it, then switch to a larger frame and reanalyze, the answer might be very different. [[Pair Programming]] has immeasurable benefits beyond the low bug rate & clean code.",
            "id": "c9f50f55b528be96e6604d81fbe4fcdc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<i>Where are the other studies to back this up? The only one quoted by the Economist (or indeed anyone) is [[Laurie Williams]]' now famous \"15%\" study.</i>",
            "id": "1bfe32d7b416ca19860f469074e7b186"
          },
          {
            "type": "html",
            "text": "\nMedical quality studies cost millions. Just look at the companies that mandate pairing. How are they doing in their markets these days?",
            "id": "4874031c0731d552086ef6869d3b0df2"
          },
          {
            "type": "html",
            "text": "<i>(And note: From a scientific perspective, the \"15% more time\" figure is <b>not statistically significant.</b> That is, given the small sample size, there could be no additional cost. Or it could be over 15%. You just don't know.)</i>",
            "id": "3954c42cff7e7c16481c6d375bf3c9f2"
          },
          {
            "type": "html",
            "text": "\nIt is also a pattern; see [[Pair Programming Pattern]].",
            "id": "028b7d80971e9199e2c5a47f2087c79c"
          },
          {
            "type": "html",
            "text": "<i>Before contributing to this page, please consider if your comments might be better suited to one of the following:</i>",
            "id": "d0deae054ab7d0bcfff0dc542630950f"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Questions]]</b>",
            "id": "31cec8e4a5a98e6d184d601a33022d06"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Statistics]]</b>",
            "id": "db154254ca8f3cb6ebf0f0ae172e6904"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Doubts]]</b>",
            "id": "6a83efee67c21ac434b41f8dd0639a77"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Objections]]</b>",
            "id": "a5942991d3b812cb2c1fc373d70358f6"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Limitations]]</b>",
            "id": "d7b3e80a1ea54182d9f430b6d46fd058"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Gone Bad]]</b>",
            "id": "65f4bfccfc1d1ab7c3a256455be6e68c"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Misconceptions]]</b>",
            "id": "d4400b1ad29f2a73cf4089a1a82cd51f"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Variations And Alternatives]]</b>",
            "id": "e162890b1b210174df23b8a83acc4ee0"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Not Doing It Pain]]</b>",
            "id": "2a156abeb37e1ba9f153679ef1ffbfd8"
          },
          {
            "type": "html",
            "text": " <b>[[Pair Programming Not Doing It Pleasure]]</b>",
            "id": "bf0c6d361ff4532c584000ca31c646fa"
          },
          {
            "type": "html",
            "text": "<i>On many of the above pages, communication seems to have broken down between proponents and detractors of pair programming. The debate seems to have two sides: \"pair programming always works\" and \"pair programming never works\". It's pretty clear, after hearing all the testimonials from both sides, that it works sometimes and doesn't work other times. Please consider contributing to the discussion in the mode that there are features of a problem, project, and person that make pair programming more or less effective. Try to assume that there are valid reasons for these differences and they are not simply the result of deficiencies.</i>",
            "id": "c11d03b49c5183be4828f33fe119c719"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "\"\"Purr Programming\"\"",
            "id": "87c4049ca3eb976745a19a6e39766c63"
          },
          {
            "type": "html",
            "text": "\nA evolution of pair programming where a human dev pair is substituted for a feline dev pair.\n[http://www.purrprogramming.com www.purrprogramming.com]",
            "id": "a9239a071efb3f52fb975284031c78cc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<b>[[Pair Programming]] Markers</b>",
            "id": "8fe8198870b1a7013bc2926aaaf099b8"
          },
          {
            "type": "html",
            "text": "\n[[Ward And Kent]] lead a BOF at OOPSLA'97 that included looking for patterns in the code and in the recorded dialog between programmers as they work together. These are the patterns they found ...",
            "id": "0be9333e85a4ccd5a306eaf4ff43f024"
          },
          {
            "type": "html",
            "text": " <b>Let me drive.</b> (One of the idioms of [[Pair Programming]])",
            "id": "86b2c1461acf953aa7fa3ccb3829227a"
          },
          {
            "type": "html",
            "text": " <b>x - 1 // n + 1</b> ([[Fence Post Error]]s?)",
            "id": "51cbde6cfb05f2336932527a6e1fb142"
          },
          {
            "type": "html",
            "text": " <b>inject:into:</b>",
            "id": "469ac7ed897a16d8fd5cfccf1ce562bf"
          },
          {
            "type": "html",
            "text": " <b>role suggesting variable name.</b>",
            "id": "4c550d4ccceaca100a10aadc1cb2e892"
          },
          {
            "type": "html",
            "text": " <b>trust me.</b> (Sometimes you have an idea for how to do something, but not the words to explain it. \"Trust me\" gives you a couple of minutes to type it in without your partner stopping you.)",
            "id": "40e634a1b5e29a17e1c2dc4a5ed6374a"
          },
          {
            "type": "html",
            "text": " <b>look where you would write it.</b> (When looking to see whether a method you need already exists, look in the place you would put it if you had to write it.)",
            "id": "934aae2259cfcf3896c628602f2153b3"
          },
          {
            "type": "html",
            "text": " <b>[[Ask The Computer]].</b> (Don't reason about what will happen if you do X. Do X and see what happens. Send the message and see what it does.)",
            "id": "b65647b1f5c4bafff0e2864412910eec"
          },
          {
            "type": "html",
            "text": " <b>multiple pens.</b>",
            "id": "8f3b95a906397480baa570353b94a291"
          },
          {
            "type": "html",
            "text": " <b>[[Blame Yourself First]].</b>",
            "id": "72d358db1ab33c92842ed6b7ac23f541"
          },
          {
            "type": "html",
            "text": "\nContributors: [[Michael Feathers]] [[Katy Mulvey]] and others.",
            "id": "d488b2001c1596dab816797ba0fe9cc5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<b>[[Pair Programming]] History</b>",
            "id": "578017693768512d5255679b56d966f4"
          },
          {
            "type": "html",
            "text": "\nJust saw that I had marked (and forgotten) a section in \"Constantine on Peopleware\" in which he described a visit to Plauger's group, where they were programming in pairs, with the same descriptions as [[Ward And Kent]] use. Constantine called it \"Dynamic Duo\" development.",
            "id": "ec66fb777777ead91c226e79b30d1713"
          },
          {
            "type": "html",
            "text": "\nThat makes, so far, 3 or 4 separate inventions of this technique that I have encountered, each finding it advantageous. -- [[Alistair Cockburn]]",
            "id": "ac71ae12c40bab4a2328152cdede1d79"
          },
          {
            "type": "html",
            "text": "\nAnd a 5th time ... I was leading a team of 4 programmers working on a flight simulator in 1996. Each programmer was assigned a separate aircraft system. The programmers came to me and told me that, as they were always helping each other (this was FORTRAN on a weird system...), they wanted to work in pairs on each system. This seemed inefficient to me at the beginning, but the big improvement came when the weaker programmers improved within a short time and there were fewer bugs in the fixed time we had for the project. -- [[Nissim Hadar]]",
            "id": "2f40dde142d2eef6d1fa07a0a6c79589"
          },
          {
            "type": "html",
            "text": "\nSee also [[Dijkstra Pair Programming]]",
            "id": "dd165877edcb0633c2673a96a1ba64f9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<b>[[Pair Programming]] Tidbits</b>",
            "id": "c0f247ce15ad604e5286d0a9be80ab8e"
          },
          {
            "type": "html",
            "text": " Anyone else tend to type \"[[Programmingin Paris]]\"? (Must be wishful thinking.)",
            "id": "e0d3ccfa334bee7158027c4450df18d3"
          },
          {
            "type": "html",
            "text": " It is sometimes useful to have [[Divergent Pair]]s work together, to spark \"creative abrasion\". -- [[Yonat Sharon]]",
            "id": "a1ee8be064a8f29f7b019d2d16b012fc"
          },
          {
            "type": "html",
            "text": " When people say that [[Pair Programming]] reduces productivity, I answer \"that would be true if the most time consuming part of programming was typing\" -- [[Martin Fowler]]",
            "id": "4241e934b9a4d778d0218ecc9857b386"
          },
          {
            "type": "html",
            "text": " One more pattern in [[Pair Programming]] that I found very useful is [[Record Your Communication In The Code]]. -- [[June Kim]]",
            "id": "242efa814f27d942be41e4a666da6e05"
          },
          {
            "type": "html",
            "text": " Those of us who spent time training others know that this is virtually the only way to really teach someone something that involves hands-on work, which programming definitely is. -- James Clover",
            "id": "1d52e0fdd729300363437bc78037e7b7"
          },
          {
            "type": "html",
            "text": " [[King Crimson On Pair Programming]]",
            "id": "dca2810d1ff940bf87e4324864791269"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<b>[[Pair Programming]] Case Study?</b>",
            "id": "485b1554ce8841ff2d1388b6f25826ad"
          },
          {
            "type": "image",
            "url": "http://zeekland.zeroplayer.com/stories/009_Uncle_Wiggilys_Travels/ZeekLand0550.png",
            "text": "zeekland.zeroplayer.com",
            "id": "035c9b6abb15d3c61b7e955dde201756"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "7a266391a618cda436432ad6340273a2"
          },
          {
            "type": "html",
            "text": "\nFull write-up at: [http://zeekland.zeroplayer.com/Uncle_Wiggilys_Travels/43 zeekland.zeroplayer.com]",
            "id": "da4dbe82677bcd175e0c4883bdaf273a"
          },
          {
            "type": "html",
            "text": "\nWhat programming, especially in pairs, feels like, at least in one case:",
            "id": "3eeeb7a80695d693ab0b30c786b43a9e"
          },
          {
            "type": "html",
            "text": "\n[http://www.salonmagazine.com/21st/feature/1997/10/cov_09ullman.html www.salonmagazine.com]",
            "id": "13e434961bcb331898a267e36c39c032"
          },
          {
            "type": "html",
            "text": "<i>Yuck. I read the article with growing horror. Just another example of pseudo-heroic sloppy cowboy debugging. [[Pair Programming]] appears to give back more than it takes - the opposite of what the article illustrates. Having not done [[Pair Programming]] (yet!) I can't speak from experience, but I know someone could...</i> -- [[Rodney Ryan]]",
            "id": "124aec6bc8f006ac490ba8d2312a9e9c"
          },
          {
            "type": "html",
            "text": "\nIt's a weird book ([[Close To The Machine]]). She has a very strange, dark outlook. But much of what she writes expresses a truth that many have lived. -- [[Ron Jeffries]]",
            "id": "15463e1073b2b5a1a27175685615f481"
          },
          {
            "type": "html",
            "text": "<i>I agree. However, I'm asking if people who have practiced [[Pair Programming]] view the article as a good example of [[Pair Programming]]. Is it a situation that indicates movement in the most effective direction?</i> -- [[Rodney Ryan]]",
            "id": "cc654f790e6a8fffacf9a40cb359b881"
          },
          {
            "type": "html",
            "text": "\nThis would require me to read the article which I shall shortly, but I have informally used pair programming many times throughout school, graduated in 2010, and found it to be very good at reducing later bugs.  Anyone who has ever programed a non-trivial program should agree that the issue isn't the time it takes to write the first iteration of the code but really the very very long tail of removing the bugs in the program.  [[Pair Programming]] takes a bit longer to write the first time but it produces much cleaner code.  I for one would think that monoganamous pairs are a good idea, or atleast in a relatively small group as learning each other's quirks is one of the personality issues with forming a [[Good Pair]], -- [[Andrew Ricketts]]",
            "id": "a7224e26d0235217fe253f8b65294dbe"
          },
          {
            "type": "html",
            "text": "\nUllman got the mind-meld part right. And she understood that pairs didn't have to be equals to be effective. But she couldn't keep the meld up through completion with the first developer and couldn't even start to meld with the second. Amateurs. -- [[Ward Cunningham]]",
            "id": "25e1ec84ffdf59b74633c4deb8891811"
          },
          {
            "type": "html",
            "text": "\nIf you took out all the macho midnight brainburn stuff, the experience isn't atypical. Done calmly and peacefully, however, it's more a gentle flow than this orgasmochistic explosion of sensation.",
            "id": "74e1d71ecaab0a43600fff7efcf4fb40"
          },
          {
            "type": "html",
            "text": "\nIf both of you have a beer before doing [[Pair Programming]] in my experience sometimes seems to help the process! -- [[Daniel Poon]]",
            "id": "a360be5a924596ef587f0cf504f03c8d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<b>Pair Bug-Finding</b>",
            "id": "f2bc85ff141977162cc21c711115f433"
          },
          {
            "type": "html",
            "text": "\nAlthough we don't practice Pair Programming, we've been using it then trying to find bugs. In this case it seems to be a [[Good Thing]]. ",
            "id": "5a4c8c7ddb047d2a6879ea3bb47a0c0c"
          },
          {
            "type": "html",
            "text": "\nHowever, our team is too small to use it all the time.",
            "id": "6cd6faf2cc32d5ce3c94697c1201dfcd"
          },
          {
            "type": "html",
            "text": "-- [[Geraldo Xexeo]]",
            "id": "837c60a51952a51059fc5ef8aeaf10fb"
          },
          {
            "type": "html",
            "text": "\nI'd argue that small teams will naturally start some pair programming (and pair everything else: planning, design, debugging, etc.) naturally because of the low communication costs. Oh wait, I did argue that: [http://blog.markturansky.com/archives/69 blog.markturansky.com].",
            "id": "a59fe32695a40d53a92e9fc31ee51807"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Maybe [[Pair Programming]] should be renamed [[Continuous Review]]?",
            "id": "308f68092379333c30c0b61ca3642c27"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "A couple more thoughts on why I think XP is not, as Steven asserted, \"just a codification of bad programming practices in bad environments.\" One key point I haven't seen in the arguments here are the constraining (read improving) effects that [[Pair Programming]] places on rogue programmers with a [[Jang It]] mentality. Even if you tend to have cowboy coders in your group, pairing them up with an experienced XP'er virtually guarantees the code will be written properly and the necessary testing will also be put in place. Even if two JANGmeisters are paired together (and the rest of the team will know when they are) the resulting code will still be better than if either went off on their own. While not the most desirable scenario, as discussed in other pages ([[Vcaps Project]], [[Pair Programming]]), it still provides a certain set of checks and balances between the two since no two people think alike. Since the rest of the team knows about the volatile pair, any offending code will be corrected during [[Extreme Programming Code Reviews]]. In other words, the team knows what code is going to have to be reviewed more thoroughly when certain pairs are put together (it's just a reality of working in groups). When combined with the other factors of XP what results is the <b>elimination</b> of bad programming practices and bad environments.",
            "id": "f68e1d525d89fd47b18a5626f7599317"
          },
          {
            "type": "html",
            "text": "\nPairing also gets rid of any problems resulting from <i>mediocre</i> programmers writing poor code and documentation, as mentioned above. It seems the dissenting opinions keep forgetting that arguing against one particular aspect of XP won't work because it is the other aspects that balance out most of the possible negative side effects when taken individually.",
            "id": "77f89d336644b86379a7804522b4a255"
          },
          {
            "type": "html",
            "text": "\nFYI, I'm speaking from the point of personal experience in that I didn't think [[Pair Programming]] was going to help me improve my code and make me faster. So I went in quite skeptical. As you can tell, my views have changed just a bit. -- [[Tom Kubit]]",
            "id": "56627d593a78ea78fa9ceb354cdb1103"
          },
          {
            "type": "html",
            "text": "<i>So what, [[Pair Programming]] is a [[Band Aid]] on bad hiring decisions?</i>",
            "id": "cc664303b88e091b6d767f053b4b1e60"
          },
          {
            "type": "html",
            "text": "<i>How about, I dunno, <b>[[Replace Mediocre Programmers]]</b>. Might be just crazy enough to work.</i>",
            "id": "e238bfdf6346a92d3ca4198ba6f928cb"
          },
          {
            "type": "html",
            "text": "<i>Arguing against particular negative aspects of XP is good for discerning which parts of XP might hold some value for you, when you're reluctant to just swallow the [[Xp Religion]] whole. Take what's useful. Leave the rest.</i>",
            "id": "11f1c28a957544486095186a179146b9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "XP is not a 'pseudo-methodology' as Steven asserts above that is allowing 'proponents of this technique have simply given a name to poor programming practices'. The XP methodology does, however, require a mental attitude that embraces change, and a willingness to learn, not only from ourselves but from others.\tOne of the strongest strengths in XP is [[Pair Programming]]. We have found that the interactions that happen within a pair team is vastly more than the sum of the parts would produce. Even the most experienced coder finds that they are producing a design/code that is at a much higher level than they could do alone. We have found on the [[Vcaps Project]] that there is typically less indecision in a pair team, ideas are thrown back and forth, and the solution space is quickly narrowed as advantages and disadvantages are discussed within a pair team. XP is a philosophy, a methodology that I strongly believe in. -- [[Kevin Bradtke]]",
            "id": "53c6a9118fb414a2c5d7fb55a1730128"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Is it just me, or is [[Pair Programming]] one of the most difficult XP practices to implement (if not the most)?",
            "id": "22bdb4f89aba033b152c54cc27958b16"
          },
          {
            "type": "html",
            "text": "<i>For some people, it is. For some people, it's perfectly natural.</i>",
            "id": "0ba3fe29c8d7baa281c468d599a19d7a"
          },
          {
            "type": "html",
            "text": "\nGranted. I meant that, in testimonials about attempts to implement XP, I read of more resistance to [[Pair Programming]] than any other practice. I think.",
            "id": "b54336422dd6d53eaac68fbcf576ea16"
          },
          {
            "type": "html",
            "text": "<i>[[Unit Test]]s are my reviewer. If the code works according to the [[Unit Test]]s then why is continuous review necessary?</i>",
            "id": "43fd249b1fa4c9c64dfad616c6a5416c"
          },
          {
            "type": "html",
            "text": "\nWho wrote those [[Unit Test]]s? If it was you, how can you be sure that the [[Unit Test]]s cover all bases? A continuous human reviewer can catch issues like that, and can also make the development process much faster by suggesting improvements that cut down on development time or potential bug count. -- [[Brent Newhall]]",
            "id": "3719b9d6e69ccc4fbffa3f841b378ff4"
          },
          {
            "type": "html",
            "text": "\nThere is also the argument that adding a reviewer reduces quality. Each person tends to rely on the other to find the problems, and neither becomes responsible for discovering problems.",
            "id": "3c1a71ece2de9a2f45c57cb489787f50"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Well I hope I'm not intruding as I'm quite new to this wiki and the general [[Wiki World]]. But I have a curiosity about [[Pair Programming]]. Now I've seen the doubt raised before, but the response was not very clear. Doesn't [[Pair Programming]] interrupt the [[Programming Flow]]? I find that when I work with other people I always have to 'snap out of it' when they ask me something? Most of my projects I did at the university were with the same person. Now this person didn't have as many programming skills as I did. But every time he'd ask me a question it would interrupt my [[Programming Flow]] and I'd have to say 'wait up' and try to get back into it. Now this was mutually frustrating. First of all, I couldn't continue the part I was working on, and secondly it made my partner feel like he was incompetent. [[Pair Programming]] can be good (though I've never tried it) if you divide the tasks, one does testing the other does implementing. But sitting with two people at the same screen seems a bit overdone. Also in the projects I've worked with I've always found that time for writing tests is never available. That doesn't mean manually debugging of problems aren't done (like when something won't work the way you want it). -- [[Anonymous Donor]]",
            "id": "88d5bb41a402b1843103ab7bc07a9162"
          },
          {
            "type": "html",
            "text": "\nFor one, in [[Pair Programming]], you're operating according to a different [[Mental State Called Flow]] than you are when [[Solo Programming]]. Note that generally [[Pair Programming Is Done By Peers]], which goes against the example of programming with someone who doesn't have the same skill. There should be fewer explanations and more collaboration. Also note that [[Pair Programming]] is somewhat [[Counter Intuitive]]. It works, even though it doesn't necessarily seem like it would work. -- [[Brent Newhall]]",
            "id": "9ee1aa120ff9bd80f21ffda3a4723d6a"
          },
          {
            "type": "html",
            "text": "\nI would also like to comment on the above. If you were programming together with somebody else and this was at the university shouldn't you have tried to find another lab partner then? It feels like you just destroyed your friends possibilities to actually learn anything. He doesn't want to ask questions and you just do all the difficult things that he should learn. What's the point with having a partner that isn't as good as you? And about spending time on tests. For really small projects I can agree, but on any medium to large university projects (that means mostly everything after the first year or so) you will actually gain time if you write tests. I have spent many long nights looking for bugs that would have been found immediately if I had written tests in advance. -- [[Daniel Luna]]",
            "id": "3d4a4f3e51b97f7ed810b0f4485c5a9b"
          },
          {
            "type": "html",
            "text": "\nMy answer to this would be to have the less experienced developer drive. The observer should talk him/her through it, incorporating ideas from both. A craving for one's own gratifying [[Mental State Called Flow]] has to take a back seat to maintaining a common understanding and a productive dialog. It may take a while before the more experienced developer can drive in this situation. If it takes too long, either the more experienced developer isn't doing it right, or the less experienced person is in over their heads. -- [[Chris Dailey]]",
            "id": "a0b2c3c6185312befc48b875a5731dd4"
          },
          {
            "type": "html",
            "text": "\nSeveral of [[Anonymous Donor]]'s problems seem to arise from failing to follow the rules - rules that I tell my students every semester: ",
            "id": "9dec7d93eef59bf0f1db5022ab651a2b"
          },
          {
            "type": "html",
            "text": "\n1) As [[Chris Dailey]] and [[Laurie Williams]] both say, let the less experienced person do the typing. That way neither person can zone out, the weak partner will learn from time-on-task, and the strong partner will learn from having to explain things. At first, it'll be slower than the strong partner doing it directly, but the weak partner will quickly become a useful member of the team. ",
            "id": "f12f5c1aa9ee164649b49ec59a77e742"
          },
          {
            "type": "html",
            "text": "\n2) [[Pair Programming]] is not about divide the tasks, one does testing the other does implementing; it's about both partners being involved in everything. ",
            "id": "07b441f8ffc91c767d8d2f2981a64f86"
          },
          {
            "type": "html",
            "text": "\n3) time for writing tests is never available. You can't possibly be in that situation if you write the tests before writing the code they are to test, as recommended in [[Test Driven Development]]. -- SBloch",
            "id": "b4eb4502f6fdbd93feb1cb521b055c9d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<b>Random Thoughts on Pair Programming: Knowledge transfer</b>",
            "id": "f3f118ed2fe1697cabdc77ed3206c708"
          },
          {
            "type": "html",
            "text": "\nI read through all of the above. I feel there are important points missing from this discussion. (Arrogant Bastard that I am).",
            "id": "c1129e66031abe0f17ffde1588a32fc2"
          },
          {
            "type": "html",
            "text": "\nMy Experience with Pair Programming can be summed up as follows. One group I worked with I was the J2EE guru (I was hired for my knowledge of J2EE). We adopted pair programming. I found that not only was I teaching and mentoring the novice J2EE developers, but after a few weeks (even more so after a few months) I was learning a lot from them. J2EE is big (EJB, Custom Tags, JSP, JMS and more). The knowledge of the team increased exponentially. This could not have been accomplished without Pair programming. I have never increased my skill level so much in such a short amount of time. ",
            "id": "bc3878b8b3268305eb3641fb8bc3bc0d"
          },
          {
            "type": "html",
            "text": "\nThe amount of experience and knowledge gained by pair programming with ten people for a year is equivalent to working for five years in a shop that does not use pair programming. (This includes domain knowledge transfer.)",
            "id": "c4b0d3e04d5e2ce5c1c7f4559b88f9ba"
          },
          {
            "type": "html",
            "text": "\nAlso, we started building a reusable framework. I don't think we could have made so much progress without pair programming. Code cannot be reusable if no-one knows how to use it. Pair programming grows in value the longer you do it. Not reinventing the wheel means less code in the code base to do the equivalent functionality. Less code is less code to maintain (and learn). The benefit of pair programming is not linear. It grows the more you use it.",
            "id": "8cd3ecacfaf7cb5e53dcd9b870eae8e1"
          },
          {
            "type": "html",
            "text": "\nWhat do you do with people who will not try pair programming? Fire them. Just kidding (sort of). I found through experience that the people who have the hardest time with pair programming usually become the biggest pair programming advocates. Here is the recipe. Set a metric that every team member do at least 10% pair programming (4 hours a week in the U.S. .... 3.2 hours in France). Slowly raise this to 50%. I have not had one person who has tried pair programming not prefer it. Believe the 96% people prefer it figure cited earlier. (Our team could only achieve 80% pair programming or so per week as in 32 hours a week. The rest of the time spent in meeting with customer (5%), planning(5%), designing in groups(5%) and working alone (5%).)",
            "id": "13d037ded7c9126441291d2f5bf5716e"
          },
          {
            "type": "html",
            "text": "\nHere is a suggestion that is not going to go well with some. A tree grows best if you trim some branches from time to time. Not everyone on the team is going to work out. This gets amplified with pair programming. Unlike environments that do not use pair programming, environments that use pair programming are very sensitive to stinkers and slow pokes. Notice I am not saying novices. There are fast smart novices, and there are hard to work with experienced folk. We have had experience with getting rid of a few people and our project velocity increasing (the people were causing more harm than good). With pair programming, it is easier to identify these issues because everyone works with everyone else (switch partners often facilitates knowledge transfer), and the team knows who is not pulling their weight. In fact when we made adjustments to the team, no-one complained. ",
            "id": "bfbec86a40e1320f86b11f0e3e63eb7f"
          },
          {
            "type": "html",
            "text": "\nPair programming works best with talented, professional folks. Unless you prefer working with talentless, unprofessional folks, pair programming will work like a charm.",
            "id": "1d1c7c7ff8c9e811b80c4a0b942a6274"
          },
          {
            "type": "html",
            "text": "\nSee [[How To Piss Off Your Pair]]",
            "id": "e756110feb5b7dc40113a45ba693af77"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Question - if you have a set of [[Pair Programmer]]s say P1,P2,... say up to P5 , how best to cross-train so if one or more members of each pair (randomly say P11 and P32) is off sick, on vacation, or leaves permanently the group can be re-arranged to continue efficiently [[Pair Programming]]? Ie should Pi1 cross train with p(i+1)2, P51 train with P12 by switching places once a week, month or whatever so there is a high probability of someone who knows each project to change pairs if needed? Even though there may be documentation, version control and the remaining pair member can explain to the new one etc wouldn't scheduled cross training reduce learning time and make transitions easier when pairs get shuffled?",
            "id": "0bb10cb2826cfe981134dd4241c3eb2d"
          },
          {
            "type": "html",
            "text": "<i>Huh? [[Pair Promiscuously]].</i>",
            "id": "689f2171e7318a34277d3efb979d473f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Pair Programming can be considered as a shield from the negative environment impact: [http://www.jroller.com/comments/deep/Weblog/shield_from_real_world_impact www.jroller.com] . -- [[Roman Porotnikov]]",
            "id": "77e937b755bb379a47fe95761e8978a7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Any one got examples of [[Pair Programming]] concept working well for [[Cobol Language]] projects? Any site names and any special considerations to make it work? -- dl",
            "id": "a5907cd73c23acf8eb817d0624ba1396"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<b>A Personal Experience with Pair Programming</b>",
            "id": "327f92000ce0490e9086bcde48c03165"
          },
          {
            "type": "html",
            "text": "\nThe most successful use of [[Pair Programming]] that I have personally experienced is on my current contract. We are dealing with a legacy database that is \"unnormalized to the extreme\" and cannot be changed for a variety of reasons. The programmer I am working with has little [[Object Oriented]] experience, and is new to using an OO language, but he is a fast learner and an expert with respect to the data and domain.",
            "id": "91d23f24735958b8e929ab1d7a48d22d"
          },
          {
            "type": "html",
            "text": "\nHe is learning OO techniques, Patterns, divide and conquer and the language issues etc while we are speeding ahead much faster than if I had to take more time to pre-learn everything about the data in the database, much of which is irrelevant to this project. We are experiencing a magnitude increase in productivity over working independently. In addition, our combined understanding of the system is leading to improvements in the design and the maintenance of this system will be greatly simplified as a result.",
            "id": "e214e688bb5b455d88972127e925c8dd"
          },
          {
            "type": "html",
            "text": "\nWe got a good laugh over the \"mind meld\" comment and photo above, as this mirrors how we feel about this experience. I also believe that the personalities of the individuals involved can make or break the [[Pair Programming]] experience. So ... it is not for everyone, but when it works it really works well!",
            "id": "4b6eca89849217b32e72bccc9a3ffec8"
          },
          {
            "type": "html",
            "text": "-- [[Judy Green]] (Judy N. Green)",
            "id": "510473b9694401e37b6dd438aacbabba"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "When done with the right person, [[Pair Programming]] feels like a turbo booster to your mind.",
            "id": "4649603704e7a342288a53bb68d67ff7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "I first experienced Pair Programming many years ago, my partner and I were both Pair Programming virgins and were so blown away by the experience we got married the same year. We've Spouse Programmed for over a decade now and would strongly recommend it.",
            "id": "733958483779a5c60a14f19e8cbd45ba"
          },
          {
            "type": "html",
            "text": "\nIf there isn't a Pair Programmers Dating site already there should be.",
            "id": "6882bcdc333e9f0b05a9d9f04ddfb128"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Has anyone tried pair programming over VNC or something with a faster protocol (text or IDE based rather than graphical). I'm thinking about developing a network system in a text editor project so that programmers can pair up. Currently I think VNC is a bit slow so obviously a custom in-text-editor design would assist the speed. ",
            "id": "4ed55b7322a47d0ab5ec3696c7370dfe"
          },
          {
            "type": "html",
            "text": "\nSee [[Virtual Pair Programming]] and [[Collaborative Editing]].",
            "id": "6b172cbf73a3ba5ac185a26d2ce1fff5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "I'm getting the feeling that pair programming is holding back the adoption of eXtreme Programming. There's a general fear of pair programming. Developers often prefer to work alone, as I do. This makes it harder for me to implement test driven development, which I like and most agree. -- [[Randy Charles Morin]]",
            "id": "09c0a3c36478da286cfdfc72ce1555b1"
          },
          {
            "type": "html",
            "text": "<i>Have you tried pair programming?</i>",
            "id": "9cbb461c5886e1eccb2f7a0f86393bd9"
          },
          {
            "type": "html",
            "text": "\nYes and I wasn't thrilled with the results. But that's not my problem. It's an adoption problem. -- [[Randy Charles Morin]]",
            "id": "abb0553d0fa6e8266ae41ca26909b061"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Things like the [[Pair On]] would help the adoption of [[Pair Programming]] in many organizations.",
            "id": "8df275a4f4a49fddf042e70d6b5ab48e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "At my school we tried implementing pair programming in a couple first year classes. For a bunch of possible reasons it didn't work out. The way we did it was to pair people up at the beginning of the semester and they would work together on all assignments. Well, by midterms we realized that about half the class knew what they were doing and the other half did not. Perhaps it was too early to start pair programming, perhaps it wasn't appropriate for course work. It does seem to work for real programmers though.",
            "id": "27685c2fa1e96af0a0f470fa7f1828b7"
          },
          {
            "type": "html",
            "text": "<i>I'd think that the grade issues would make pairing difficult in an academic course - if your partner is truly behind the curve, your desire to pass the course would be pressure to take over the development. In a work environment, there is no stigma about heavily coaching your partner, so you can make a difference in how they are. Also, IIRC [[Pair Programming]] calls for switching partners fairly often.</i>",
            "id": "e5e24ecc8a45049e8457c755b11426e2"
          },
          {
            "type": "html",
            "text": "\nYou could have made basic notes on ability and personality as part of the assignment marking procedure, then re-paired the students for the next assignment matching like with like. Then you get to focus more resource on helping the slow kids to learn slowly, while the fast ones go ahead with teaching themselves.",
            "id": "05f5f67cb9e4fad8119243f8826a8508"
          },
          {
            "type": "html",
            "text": "\nAnother data point: for several years, I've assigned my freshman programming students to use pair programming, generally telling them to switch partners for each assignment (with 6-10 assignments in a semester, I figure the [[Law Of Averages]] allows me to assign reasonable grades). Many of them are reluctant to switch, often claiming that they've found the only student in the class whose weekly schedule is compatible. A previously-unmentioned benefit of pair programming in this environment is that I have half as many assignments to grade, so I can give more and/or quicker feedback. -- SBloch",
            "id": "9de198dca7b3d9611c0675217cca0d32"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "It would probably be easier to sell if it were de-mystified. We used to call it [[Working Together]]. Walk into any engineering shop and you'll find people gathered around white boards and workstations, collaborating on (not reviewing) design decisions. Before screens, it was common practice to desk-check each other's coding sheets. Even after screens, programming where it mattered (ISVs and OEMs) was still collaborative for two reasons: it produces better code and it eliminates the risk of losing the only person who knows how a bunch of the code works. As a manager, I want every line of code to be clearly understood by at least two people - preferably more. This is in and of itself such an important requirement that it renders all other arguments for or against collaboration irrelevant.",
            "id": "18534a850b3ca56796c5a0817116b64e"
          },
          {
            "type": "html",
            "text": "[Anecdote: When I was field systems analyst at SDS, anytime a significant piece of software was ready for release a bunch of us would be brought into HQ for \"familiarization\". That involved the programmers walking us through every line of code and key path diagrams, so that we not only knew what every line of code did, we also got to propose lots of improvements. We all went back to our offices with copies of the source code on mag tape (like a CD but bigger and lower capacity).",
            "id": "3b1d6ceafe9e38ba8eaf98eac1791702"
          },
          {
            "type": "html",
            "text": "\nSomeone could have nuked HQ and SDS could still have gathered a gang from the field to continue work on the product. Oh yeah - the code was in assembler. A lot of lines.]",
            "id": "bb56d44f7ec22adc2774f9c30b39498c"
          },
          {
            "type": "html",
            "text": "\nPair programming seems novel because for the past decade or two we've been tucking programmers away in cubicles and allowing them to avoid [[Working Together]]. Big mistake.",
            "id": "cedf10341d256c1deb572e1ccb1a280f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "There are various setups and configurations that can be used for [[Pair Programming]]. My current experiences are summarized here: [http://weblogs.asp.net/jcogley/archive/2004/10/13/242117.aspx weblogs.asp.net]. -- [[Jonathan Cogley]]",
            "id": "285dff2cc8f7be34a0048ffa1ab67451"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "<i>Q</i>: I don't like [[Pair Programming]]",
            "id": "d50c951448a9188961863bb07c8ae5ba"
          },
          {
            "type": "html",
            "text": "<i>A</i>: There is no <i>I</i> in <i>PAIR</i>!!!",
            "id": "3115ea096ba45e255ce237a2efd41e48"
          },
          {
            "type": "html",
            "text": "<i>Q</i>: ...there is, 3rd letter in..!",
            "id": "d52656448bc16bd7a84fe523da718f5b"
          },
          {
            "type": "html",
            "text": "<i>A</i>: EVERYBODY ROTATE!",
            "id": "1f1df05c74ab740a988b05ed786c311e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "[[Ward Cunningham]] has eloquently described the joy of sharing a [[Cocoa World]] programming session with a child:",
            "id": "bd785b9ba171e040c2bef3219f1b3358"
          },
          {
            "type": "html",
            "text": " [http://c2.com/~ward/cocoa/notes/pairs.html c2.com]",
            "id": "8f5e49eb2c8e595e5421790a8e9df57b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "Anonymous:\nsaves on the cost of computers and desks (but not chairs)",
            "id": "b9f6513a92aee0d2f03c884993878ca3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "How do you handle a situation in pair programming where the two programmers have opposite philosophies? For example if one is data oriented and the other is information oriented? They will generally make the opposite decisions at every turn.",
            "id": "bca4779b5fea2321a2e8fb3cc33a044c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "See also [[Basketball Metaphor]], [[Pair Lust]], [[Pair Programming In Cpp]], [[Heard Of Dyads]], [[Flow Number]], [[Pair Vine]], [[Mark Your Territory]], [[Is Pair Programming Mandatory]], [[Xp Without Pair Programming]], [[Pair Programming Power Lunch]], [[Men Downa Hole]], [[Pair Managing]]",
            "id": "8518a038482f2a1a7cd5acd0df31175b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8ce4a5c4791ba8e456aa84be6de6186f"
          },
          {
            "type": "html",
            "text": "[[Category Pair Programming]] [[Category Collaboration]]",
            "id": "227302c5bb2cea9fe3bf03799fdcb604"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?PairProgramming c2.com]",
            "id": "5c40236d93d6de7ddc233afacd7828dc"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1641332361220
    },
    {
      "type": "edit",
      "id": "c9f50f55b528be96e6604d81fbe4fcdc",
      "item": {
        "type": "html",
        "text": "Next, because a small bug introduced in development, and not cleaned up, can often cause an order of magnitude more trouble in the field. So a gain of 15% in rote development stands to save 150% later on. To put it another way, a colleague once humble-bragged he was a good enough gambler he was net-positive on his junkets to Las Vegas. I requested he subtract the costs of hotel rooms & meals. This is the [[Framing Problem]]; when you frame some data and analyze it, then switch to a larger frame and reanalyze, the answer might be very different. [[Pair Programming]] has immeasurable benefits beyond the low bug rate & clean code.",
        "id": "c9f50f55b528be96e6604d81fbe4fcdc"
      },
      "date": 1692162529300
    },
    {
      "type": "edit",
      "id": "c9f50f55b528be96e6604d81fbe4fcdc",
      "item": {
        "type": "html",
        "text": "Next, because a small bug introduced in development, and not cleaned up, can often cause an order of magnitude more trouble in the field. So a gain of 15% in rote development stands to save 150% later on. To put it another way, a colleague once humble-bragged he was a good enough gambler he was net-positive on his junkets to Las Vegas. I requested he subtract the costs of hotel rooms & meals. This is the [[Framing Problem]]; when you frame some data and analyze it, then switch to a larger frame and reanalyze, the answer might be very different. Pair Programming has immeasurable benefits beyond the low bug rate & clean code.",
        "id": "c9f50f55b528be96e6604d81fbe4fcdc"
      },
      "date": 1692162554577
    },
    {
      "type": "edit",
      "id": "86b2c1461acf953aa7fa3ccb3829227a",
      "item": {
        "type": "html",
        "text": " <b>Let me drive.</b> (One of the idioms of pair programming)",
        "id": "86b2c1461acf953aa7fa3ccb3829227a"
      },
      "date": 1692162913547
    },
    {
      "type": "edit",
      "id": "8fe8198870b1a7013bc2926aaaf099b8",
      "item": {
        "type": "html",
        "text": "<b>[[Pair Programming Markers]] </b>",
        "id": "8fe8198870b1a7013bc2926aaaf099b8"
      },
      "date": 1692163019177
    },
    {
      "type": "edit",
      "id": "8fe8198870b1a7013bc2926aaaf099b8",
      "item": {
        "type": "html",
        "text": "<b>[[Pair Programming Markers]]</b>",
        "id": "8fe8198870b1a7013bc2926aaaf099b8"
      },
      "date": 1692163027148
    },
    {
      "type": "edit",
      "id": "4241e934b9a4d778d0218ecc9857b386",
      "item": {
        "type": "html",
        "text": " When people say that pair programming reduces productivity, I answer \"that would be true if the most time consuming part of programming was typing\" -- [[Martin Fowler]]",
        "id": "4241e934b9a4d778d0218ecc9857b386"
      },
      "date": 1692165584593
    },
    {
      "type": "edit",
      "id": "242efa814f27d942be41e4a666da6e05",
      "item": {
        "type": "html",
        "text": "One more pattern in pair programming that I found very useful is [[Record Your Communication In The Code]]. -- [[June Kim]]",
        "id": "242efa814f27d942be41e4a666da6e05"
      },
      "date": 1692165603651
    },
    {
      "type": "edit",
      "id": "124aec6bc8f006ac490ba8d2312a9e9c",
      "item": {
        "type": "html",
        "text": "<i>Yuck. I read the article with growing horror. Just another example of pseudo-heroic sloppy cowboy debugging. pair programming appears to give back more than it takes - the opposite of what the article illustrates. Having not done pair programming (yet!) I can't speak from experience, but I know someone could...</i> -- [[Rodney Ryan]]",
        "id": "124aec6bc8f006ac490ba8d2312a9e9c"
      },
      "date": 1692165780443
    },
    {
      "type": "edit",
      "id": "cc654f790e6a8fffacf9a40cb359b881",
      "item": {
        "type": "html",
        "text": "<i>I agree. However, I'm asking if people who have practiced pair programming view the article as a good example of pair programming. Is it a situation that indicates movement in the most effective direction?</i> -- [[Rodney Ryan]]",
        "id": "cc654f790e6a8fffacf9a40cb359b881"
      },
      "date": 1692165819963
    },
    {
      "type": "edit",
      "id": "a7224e26d0235217fe253f8b65294dbe",
      "item": {
        "type": "html",
        "text": "This would require me to read the article which I shall shortly, but I have informally used pair programming many times throughout school, graduated in 2010, and found it to be very good at reducing later bugs.  Anyone who has ever programed a non-trivial program should agree that the issue isn't the time it takes to write the first iteration of the code but really the very very long tail of removing the bugs in the program. Pair programming takes a bit longer to write the first time but it produces much cleaner code.  I for one would think that monoganamous pairs are a good idea, or atleast in a relatively small group as learning each other's quirks is one of the personality issues with forming a [[Good Pair]], -- [[Andrew Ricketts]]",
        "id": "a7224e26d0235217fe253f8b65294dbe"
      },
      "date": 1692165877641
    },
    {
      "type": "edit",
      "id": "a360be5a924596ef587f0cf504f03c8d",
      "item": {
        "type": "html",
        "text": "If both of you have a beer before doing pair programming in my experience sometimes seems to help the process! -- [[Daniel Poon]]",
        "id": "a360be5a924596ef587f0cf504f03c8d"
      },
      "date": 1692165930835
    },
    {
      "type": "edit",
      "id": "308f68092379333c30c0b61ca3642c27",
      "item": {
        "type": "html",
        "text": "Maybe pair programming should be renamed [[Continuous Review]]?",
        "id": "308f68092379333c30c0b61ca3642c27"
      },
      "date": 1692165948662
    },
    {
      "type": "edit",
      "id": "f68e1d525d89fd47b18a5626f7599317",
      "item": {
        "type": "html",
        "text": "A couple more thoughts on why I think XP is not, as Steven asserted, \"just a codification of bad programming practices in bad environments.\" One key point I haven't seen in the arguments here are the constraining (read improving) effects that pair programming places on rogue programmers with a [[Jang It]] mentality. Even if you tend to have cowboy coders in your group, pairing them up with an experienced XP'er virtually guarantees the code will be written properly and the necessary testing will also be put in place. Even if two JANGmeisters are paired together (and the rest of the team will know when they are) the resulting code will still be better than if either went off on their own. While not the most desirable scenario, as discussed in other pages ([[Vcaps Project]], [[Pair Programming]]), it still provides a certain set of checks and balances between the two since no two people think alike. Since the rest of the team knows about the volatile pair, any offending code will be corrected during [[Extreme Programming Code Reviews]]. In other words, the team knows what code is going to have to be reviewed more thoroughly when certain pairs are put together (it's just a reality of working in groups). When combined with the other factors of XP what results is the <b>elimination</b> of bad programming practices and bad environments.",
        "id": "f68e1d525d89fd47b18a5626f7599317"
      },
      "date": 1692166002120
    },
    {
      "type": "edit",
      "id": "f68e1d525d89fd47b18a5626f7599317",
      "item": {
        "type": "html",
        "text": "A couple more thoughts on why I think XP is not, as Steven asserted, \"just a codification of bad programming practices in bad environments.\" One key point I haven't seen in the arguments here are the constraining (read improving) effects that pair programming places on rogue programmers with a [[Jang It]] mentality. Even if you tend to have cowboy coders in your group, pairing them up with an experienced XP'er virtually guarantees the code will be written properly and the necessary testing will also be put in place. Even if two JANGmeisters are paired together (and the rest of the team will know when they are) the resulting code will still be better than if either went off on their own. While not the most desirable scenario, as discussed in other pages ([[Vcaps Project]], pair programming), it still provides a certain set of checks and balances between the two since no two people think alike. Since the rest of the team knows about the volatile pair, any offending code will be corrected during [[Extreme Programming Code Reviews]]. In other words, the team knows what code is going to have to be reviewed more thoroughly when certain pairs are put together (it's just a reality of working in groups). When combined with the other factors of XP what results is the <b>elimination</b> of bad programming practices and bad environments.",
        "id": "f68e1d525d89fd47b18a5626f7599317"
      },
      "date": 1692166069035
    },
    {
      "type": "edit",
      "id": "cc664303b88e091b6d767f053b4b1e60",
      "item": {
        "type": "html",
        "text": "<i>So what, pair programming is a [[Band Aid]] on bad hiring decisions?</i>",
        "id": "cc664303b88e091b6d767f053b4b1e60"
      },
      "date": 1692166084643
    },
    {
      "type": "edit",
      "id": "53c6a9118fb414a2c5d7fb55a1730128",
      "item": {
        "type": "html",
        "text": "XP is not a 'pseudo-methodology' as Steven asserts above that is allowing 'proponents of this technique have simply given a name to poor programming practices'. The XP methodology does, however, require a mental attitude that embraces change, and a willingness to learn, not only from ourselves but from others.\tOne of the strongest strengths in XP is pair programming. We have found that the interactions that happen within a pair team is vastly more than the sum of the parts would produce. Even the most experienced coder finds that they are producing a design/code that is at a much higher level than they could do alone. We have found on the [[Vcaps Project]] that there is typically less indecision in a pair team, ideas are thrown back and forth, and the solution space is quickly narrowed as advantages and disadvantages are discussed within a pair team. XP is a philosophy, a methodology that I strongly believe in. -- [[Kevin Bradtke]]",
        "id": "53c6a9118fb414a2c5d7fb55a1730128"
      },
      "date": 1692166097268
    },
    {
      "type": "edit",
      "id": "22bdb4f89aba033b152c54cc27958b16",
      "item": {
        "type": "html",
        "text": "Is it just me, or is pair programming one of the most difficult XP practices to implement (if not the most)?",
        "id": "22bdb4f89aba033b152c54cc27958b16"
      },
      "date": 1692166118060
    },
    {
      "type": "edit",
      "id": "b54336422dd6d53eaac68fbcf576ea16",
      "item": {
        "type": "html",
        "text": "Granted. I meant that, in testimonials about attempts to implement XP, I read of more resistance to pair programming than any other practice. I think.",
        "id": "b54336422dd6d53eaac68fbcf576ea16"
      },
      "date": 1692166134643
    },
    {
      "type": "edit",
      "id": "88d5bb41a402b1843103ab7bc07a9162",
      "item": {
        "type": "html",
        "text": "Well I hope I'm not intruding as I'm quite new to this wiki and the general [[Wiki World]]. But I have a curiosity about pair programming. Now I've seen the doubt raised before, but the response was not very clear. Doesn't pair programming interrupt the [[Programming Flow]]? I find that when I work with other people I always have to 'snap out of it' when they ask me something? Most of my projects I did at the university were with the same person. Now this person didn't have as many programming skills as I did. But every time he'd ask me a question it would interrupt my [[Programming Flow]] and I'd have to say 'wait up' and try to get back into it. Now this was mutually frustrating. First of all, I couldn't continue the part I was working on, and secondly it made my partner feel like he was incompetent. Pair programming can be good (though I've never tried it) if you divide the tasks, one does testing the other does implementing. But sitting with two people at the same screen seems a bit overdone. Also in the projects I've worked with I've always found that time for writing tests is never available. That doesn't mean manually debugging of problems aren't done (like when something won't work the way you want it). -- [[Anonymous Donor]]",
        "id": "88d5bb41a402b1843103ab7bc07a9162"
      },
      "date": 1692166295672
    },
    {
      "type": "edit",
      "id": "9ee1aa120ff9bd80f21ffda3a4723d6a",
      "item": {
        "type": "html",
        "text": "For one, in pair programming, you're operating according to a different [[Mental State Called Flow]] than you are when [[Solo Programming]]. Note that generally [[Pair Programming Is Done By Peers]], which goes against the example of programming with someone who doesn't have the same skill. There should be fewer explanations and more collaboration. Also note that [[Pair Programming]] is somewhat [[Counter Intuitive]]. It works, even though it doesn't necessarily seem like it would work. -- [[Brent Newhall]]",
        "id": "9ee1aa120ff9bd80f21ffda3a4723d6a"
      },
      "date": 1692166318925
    },
    {
      "type": "edit",
      "id": "9ee1aa120ff9bd80f21ffda3a4723d6a",
      "item": {
        "type": "html",
        "text": "For one, in pair programming, you're operating according to a different [[Mental State Called Flow]] than you are when [[Solo Programming]]. Note that generally [[Pair Programming Is Done By Peers]], which goes against the example of programming with someone who doesn't have the same skill. There should be fewer explanations and more collaboration. Also note that pair programming is somewhat [[Counter Intuitive]]. It works, even though it doesn't necessarily seem like it would work. -- [[Brent Newhall]]",
        "id": "9ee1aa120ff9bd80f21ffda3a4723d6a"
      },
      "date": 1692166346474
    },
    {
      "type": "edit",
      "id": "0bb10cb2826cfe981134dd4241c3eb2d",
      "item": {
        "type": "html",
        "text": "Question - if you have a set of [[Pair Programmer]]s say P1,P2,... say up to P5 , how best to cross-train so if one or more members of each pair (randomly say P11 and P32) is off sick, on vacation, or leaves permanently the group can be re-arranged to continue efficiently pair programming? Ie should Pi1 cross train with p(i+1)2, P51 train with P12 by switching places once a week, month or whatever so there is a high probability of someone who knows each project to change pairs if needed? Even though there may be documentation, version control and the remaining pair member can explain to the new one etc wouldn't scheduled cross training reduce learning time and make transitions easier when pairs get shuffled?",
        "id": "0bb10cb2826cfe981134dd4241c3eb2d"
      },
      "date": 1692166397236
    },
    {
      "type": "edit",
      "id": "91d23f24735958b8e929ab1d7a48d22d",
      "item": {
        "type": "html",
        "text": "The most successful use of pair programming that I have personally experienced is on my current contract. We are dealing with a legacy database that is \"unnormalized to the extreme\" and cannot be changed for a variety of reasons. The programmer I am working with has little [[Object Oriented]] experience, and is new to using an OO language, but he is a fast learner and an expert with respect to the data and domain.",
        "id": "91d23f24735958b8e929ab1d7a48d22d"
      },
      "date": 1692166425158
    },
    {
      "type": "edit",
      "id": "4b6eca89849217b32e72bccc9a3ffec8",
      "item": {
        "type": "html",
        "text": "We got a good laugh over the \"mind meld\" comment and photo above, as this mirrors how we feel about this experience. I also believe that the personalities of the individuals involved can make or break the pair programming experience. So ... it is not for everyone, but when it works it really works well!",
        "id": "4b6eca89849217b32e72bccc9a3ffec8"
      },
      "date": 1692166466455
    },
    {
      "type": "edit",
      "id": "4649603704e7a342288a53bb68d67ff7",
      "item": {
        "type": "html",
        "text": "When done with the right person, pair programming feels like a turbo booster to your mind.",
        "id": "4649603704e7a342288a53bb68d67ff7"
      },
      "date": 1692166487336
    },
    {
      "type": "edit",
      "id": "8df275a4f4a49fddf042e70d6b5ab48e",
      "item": {
        "type": "html",
        "text": "Things like the [[Pair On]] would help the adoption of pair programming in many organizations.",
        "id": "8df275a4f4a49fddf042e70d6b5ab48e"
      },
      "date": 1692166613605
    },
    {
      "type": "edit",
      "id": "e5e24ecc8a45049e8457c755b11426e2",
      "item": {
        "type": "html",
        "text": "<i>I'd think that the grade issues would make pairing difficult in an academic course - if your partner is truly behind the curve, your desire to pass the course would be pressure to take over the development. In a work environment, there is no stigma about heavily coaching your partner, so you can make a difference in how they are. Also, IIRC pair programming calls for switching partners fairly often.</i>",
        "id": "e5e24ecc8a45049e8457c755b11426e2"
      },
      "date": 1692166627193
    },
    {
      "type": "edit",
      "id": "285dff2cc8f7be34a0048ffa1ab67451",
      "item": {
        "type": "html",
        "text": "There are various setups and configurations that can be used for pair programming. My current experiences are summarized here: [http://weblogs.asp.net/jcogley/archive/2004/10/13/242117.aspx weblogs.asp.net]. -- [[Jonathan Cogley]]",
        "id": "285dff2cc8f7be34a0048ffa1ab67451"
      },
      "date": 1692166640503
    },
    {
      "type": "edit",
      "id": "d50c951448a9188961863bb07c8ae5ba",
      "item": {
        "type": "html",
        "text": "<i>Q</i>: I don't like pair programming",
        "id": "d50c951448a9188961863bb07c8ae5ba"
      },
      "date": 1692166653179
    },
    {
      "type": "edit",
      "id": "56627d593a78ea78fa9ceb354cdb1103",
      "item": {
        "type": "html",
        "text": "FYI, I'm speaking from the point of personal experience in that I didn't think pair programming was going to help me improve my code and make me faster. So I went in quite skeptical. As you can tell, my views have changed just a bit. -- [[Tom Kubit]]",
        "id": "56627d593a78ea78fa9ceb354cdb1103"
      },
      "date": 1692166731950
    },
    {
      "type": "edit",
      "id": "07b441f8ffc91c767d8d2f2981a64f86",
      "item": {
        "type": "html",
        "text": "2) Pair programming is not about divide the tasks, one does testing the other does implementing; it's about both partners being involved in everything. ",
        "id": "07b441f8ffc91c767d8d2f2981a64f86"
      },
      "date": 1692166755822
    },
    {
      "type": "edit",
      "id": "a5907cd73c23acf8eb817d0624ba1396",
      "item": {
        "type": "html",
        "text": "Any one got examples of pair programming concept working well for [[Cobol Language]] projects? Any site names and any special considerations to make it work? -- dl",
        "id": "a5907cd73c23acf8eb817d0624ba1396"
      },
      "date": 1692166794229
    },
    {
      "type": "edit",
      "id": "485b1554ce8841ff2d1388b6f25826ad",
      "item": {
        "type": "html",
        "text": "<b>Pair Programming Case Study?</b>",
        "id": "485b1554ce8841ff2d1388b6f25826ad"
      },
      "date": 1692166992242
    },
    {
      "type": "edit",
      "id": "c0f247ce15ad604e5286d0a9be80ab8e",
      "item": {
        "type": "html",
        "text": "<b>Pair Programming Tidbits</b>",
        "id": "c0f247ce15ad604e5286d0a9be80ab8e"
      },
      "date": 1692167019580
    },
    {
      "type": "edit",
      "id": "578017693768512d5255679b56d966f4",
      "item": {
        "type": "html",
        "text": "<b>Pair Programming History</b>",
        "id": "578017693768512d5255679b56d966f4"
      },
      "date": 1692167072835
    },
    {
      "type": "edit",
      "id": "bc3878b8b3268305eb3641fb8bc3bc0d",
      "item": {
        "type": "html",
        "text": "My Experience with Pair Programming can be summed up as follows. One group I worked with I was the J2EE guru (I was hired for my knowledge of J2EE). We adopted pair programming. I found that not only was I teaching and mentoring the novice J2EE developers, but after a few weeks (even more so after a few months) I was learning a lot from them. J2EE is big (EJB, Custom Tags, JSP, JMS and more). The knowledge of the team increased exponentially. This could not have been accomplished without Pair programming. I have never increased my skill level so much in such a short amount of time. ",
        "id": "bc3878b8b3268305eb3641fb8bc3bc0d"
      },
      "date": 1692167124203
    },
    {
      "type": "edit",
      "id": "8518a038482f2a1a7cd5acd0df31175b",
      "item": {
        "type": "html",
        "text": "See also [[Basketball Metaphor]], [[Pair Lust]], [[Heard Of Dyads]], [[Flow Number]], [[Pair Vine]], [[Mark Your Territory]], [[Is Pair Programming Mandatory]], [[Xp Without Pair Programming]], [[Pair Programming Power Lunch]], [[Men Downa Hole]], [[Pair Managing]]",
        "id": "8518a038482f2a1a7cd5acd0df31175b"
      },
      "date": 1692167304045
    }
  ]
}