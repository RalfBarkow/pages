{
  "title": "Modula Three",
  "story": [
    {
      "type": "html",
      "text": "<b>Modula-3</b>",
      "id": "773e539a804d650d4511ac033e8eb4e8"
    },
    {
      "type": "html",
      "text": "\nA fine programming language, descended (of course) from [[Modula Two]] (1985ish) ",
      "id": "3615b7735c189c18e599ec7003dbc309"
    },
    {
      "type": "html",
      "text": "<i>Strictly speaking, it is descended from Modula-2+.  Modula-3 has some additional features: Exceptions, Objects, Garbage collection, Template modules, Partial hiding of type information, Lightweight threads.</i>",
      "id": "270531dd63b22c5fcc4c3f081beca5d5"
    },
    {
      "type": "html",
      "text": "<i>Modula-3 makes something different: It uses structural equivalence, that is, if two records contain the same fields with the same names they are equivalent. Thus you can't define two indistinguishable record types simply by defining one twice.</i>",
      "id": "868133d4ea361d4ec656b2fef38322bf"
    },
    {
      "type": "html",
      "text": "<i>A design goal was to keep the language specification under 50 pages. They overran their page budget by six lines.</i>",
      "id": "84ca59e98a747db9017e639a4f610336"
    },
    {
      "type": "html",
      "text": "\nModula 3 is technically not one of the [[Wirth Languages]], because it was not developed by [[Niklaus Wirth]], although it was given his blessing.",
      "id": "a05714f6a711c0e306a143b12e30ace3"
    },
    {
      "type": "html",
      "text": "\nThere's a Modula-3 resource page at \"[http://www.m3.org/ www.m3.org]\". This has moved since 2007 to \"[http://modula3.org/ modula3.org]\". The language definition is at \"[http://www.research.compaq.com/SRC/m3defn/html/m3.html www.research.compaq.com]\".",
      "id": "2ae9e93d63d56926fe0753939bf39bdd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
    },
    {
      "type": "html",
      "text": "[[Simplified Wrapper And Interface Generator]] (SWIG) can be used to make calls to [[Cee Language]] or [[Cee Plus Plus]] code.",
      "id": "fb283b79b436d5cd896c47657363a747"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
    },
    {
      "type": "html",
      "text": "\nShamefully, Java didn't steal nearly enough from it.",
      "id": "f50eb55f265dd380e1fc4e166639d98a"
    },
    {
      "type": "html",
      "text": "[<i>That's right - it stole all everything from Oberon-2 and the Oberon system (another [[Wirth Languages]], but plus an extensible OS) - including the portable object-code idea. (See [[Oberon Language]])</i>] -- [[Arnold Layne]]",
      "id": "ead4fb78ed50b19bc4943d4de17bdc59"
    },
    {
      "type": "html",
      "text": "\nI can't quite remember the history of the languages, but I do remember seeing [[Niklaus Wirth]] at Digital's [[Systems Research Center]] quite often. ",
      "id": "77337efd01a034a3df57ed888ea74f6f"
    },
    {
      "type": "html",
      "text": "\nSee:",
      "id": "4dc7444a9de7f4c9db29ee904b0716b6"
    },
    {
      "type": "html",
      "text": "\n[http://www.research.digital.com/SRC/modula-3/html/home.html www.research.digital.com]",
      "id": "d8cad19867a78395ccbc6557adfd9779"
    },
    {
      "type": "html",
      "text": "-- [[Steve Freeman]] (who can be very boring on this topic)",
      "id": "b5edb182c133926d59662d83cb424a3f"
    },
    {
      "type": "html",
      "text": "<i>Which parts of Modula 3 would you like to see in Java?</i>",
      "id": "62183ededf3d3e87710c4888bcf585dc"
    },
    {
      "type": "html",
      "text": "\nPrincipally the libraries",
      "id": "b2acec69b0b6761dfd5b0e7fae528125"
    },
    {
      "type": "html",
      "text": "(the sources [http://www.research.compaq.com/SRC/m3sources/html/INDEX.html www.research.compaq.com] are a gold mine of software engineering theory and practice)\nwhich were very mature and written by some of the smartest people on the planet. It also has very nice constructs for mixing safe and \"native\" code, it doesn't just drop you into raw C++ like Java does. Do I need to say anything more about AWT and Swing?... And a bunch of smaller things like its threads interface and decent ordinal types.",
      "id": "67c1d050a036c9a9437c1c9833ca17fb"
    },
    {
      "type": "html",
      "text": "<i>That sounds great. Hey, you'd be just the person to ask. One thing that always bugged me in Pascal was the inability to define an ordinal as the union of two other ordinals. There were many times when I needed to say, \"This range is exactly the same as that range, except its higher limit is one greater.\" Or, \"this is the same as the set of Primary<b></b>Colors, but with the addition of these Secondary<b></b>Colors. Not being able to do that was a bit of an annoyance in Pascal's type system. Can you do anything like that in Modula 3?</i>",
      "id": "e7b7d31b0ea477f22fab693d617fde74"
    },
    {
      "type": "html",
      "text": "\nIt's been a while, so I'm not sure. I think you can do:",
      "id": "bd75dbb41037e4a4b99be81fbc306605"
    },
    {
      "type": "code",
      "text": "   TYPE T = [First .. Last];\n   TYPE U = [T.First .. T.Last, Extra];",
      "id": "69b85c587be0829656346abc4ac49844"
    },
    {
      "type": "html",
      "text": "\nIt's so depressing that [[Csharp Language]] missed proper ordinals, so you still have to check for bad values in case statements, etc. Sigh.",
      "id": "95c152e8dc89247f3365498f6304e7bf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
    },
    {
      "type": "html",
      "text": "\nIn [[Csharp Language Discussion]], somebody wrote <i>Hopefully C# uses Modula's model of pointers and addresses, instead of C's confused and confusing model.</i> What model is that?",
      "id": "cefea21da550a16b60835e4b0892bd92"
    },
    {
      "type": "html",
      "text": "\nThe Modula language family makes a clear separation between <i>pointers</i>, as a strongly typed, language-level, indirect reference to dynamically allocated objects, and <i>addresses</i>, machine-level indices into the virtual memory of a process. You cannot get a pointer to an object on the stack or in an array or record through the base language. To use addresses, one must import the appropriate standard module that defines the ADDRESS type and functions for taking the address of variables and converting between pointers and addresses or cardinals and addresses. In Modula-3, a module that uses addresses is marked as \"unsafe\".",
      "id": "db178afa6f31ac3464b6a2aa18b987d4"
    },
    {
      "type": "html",
      "text": "\nC on the other hand doesn't have pass-by-reference parameters, and uses pointers instead. Therefore programs have to get pointers to objects in global memory or on the stack. There is no difference between this kind of pointer and pointers to objects on the heap, which causes extra complication when managing memory. C also allows silent conversions between pointers and addresses, and from arrays to pointers to their first element.",
      "id": "1a9c58b91bec7e46173e5b6bd68bc00a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
    },
    {
      "type": "html",
      "text": "\nModula 3 is undoubtedly thought a fine language by most people who choose to use it. To those of us who have had to use it because others chose it, it proved horrendously painful - especially the pointer system. I can remember asking around if people had any ideas on how to make the language worse, and the only suggestions were line numbers and concepts ported from Intercal. Just to let you know that whatever standards are being used here, they aren't universal.",
      "id": "fba00f2f4bb8d23258af2e1ac8699bfd"
    },
    {
      "type": "html",
      "text": "<i>Not having used it, I'm curious: what made it horrendously painful?</i>",
      "id": "1828f99f4991776bbe0bd2b4952cfb3c"
    },
    {
      "type": "html",
      "text": "\nIn my (brief and unprofessional) experience with Modula-3, it was painful mainly because of brief documentation on the more sophisticated/fun parts (try figuring out exactly how pointers are supposed to work, try figuring out what the limits are on arrays, and how both relate to type declarations, try figuring out how to make dynamic arrays, I didn't even dare touch the OO-ish features) and the amazingly annoying syntax. Some of it is just unfamiliarity; having to declare a separate block to put your variable declarations in isn't something a C/C++ (or OCaml, in my case) programmer is used to. Types and structure constructors can't be imported into modules like functions can (or if they can be, it's undocumented), the formatting functions aren't bad but could be better if there were a few more gaps in the type system, and worst of all is the constant nagging feeling that there actually IS a bloody good language there, lurking beneath all the annoying type constraints and over-verbose ALL IN CAPS syntax.",
      "id": "47eec73a433e2991e1835481a6c15395"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
    },
    {
      "type": "html",
      "text": "> horrendously painful - especially the pointer system",
      "id": "2cfc6a6e8d4f50461ba7cf1df01f2305"
    },
    {
      "type": "html",
      "text": "\nPointers *should* be difficult to use because they're a major source of bugs.  You can do everything M3, including function references, except interfacing to external libraries without using pointers.",
      "id": "20a1a4be6a8bb3bff351ce62861f3ed6"
    },
    {
      "type": "html",
      "text": "> try figuring out exactly how pointers are supposed to work",
      "id": "b9878adba159f23b28ae950eb17bdf90"
    },
    {
      "type": "html",
      "text": "\nOk, so they're not so difficult after all.",
      "id": "f51e0064670a668c386e6a0a6da84aee"
    },
    {
      "type": "html",
      "text": "VAR x:<br>INTEGER := 100;",
      "id": "6115c54b7ca64319d82dbbc2df889873"
    },
    {
      "type": "html",
      "text": "address:<br>ADDRESS := ADR( x );",
      "id": "278a435b309fd949539369b6fb48c564"
    },
    {
      "type": "html",
      "text": "> try figuring out how to make dynamic arrays",
      "id": "a7e397761f3ec76e6ac0022061b21f1f"
    },
    {
      "type": "code",
      "text": " VAR array := NEW( REF ARRAY OF INTEGER, 10 );",
      "id": "c8d2a341bd7d8b2010220af05c4e16ed"
    },
    {
      "type": "html",
      "text": "> try figuring out what the limits are on arrays",
      "id": "af2e6713069bf1d79efa13051746d6a5"
    },
    {
      "type": "code",
      "text": " VAR last := LAST( array );",
      "id": "2c85d0cf7ab8383ef3aad2b981a58a99"
    },
    {
      "type": "html",
      "text": "How do you do it in C?",
      "id": "f687d2d97aa9fa489ca3105bef61951c"
    },
    {
      "type": "html",
      "text": "> I didn't even dare touch the OO-ish features",
      "id": "7f6c997fea4f40e4cee47f5d51124079"
    },
    {
      "type": "code",
      "text": " TYPE Class1 = OBJECT (* member vars *) METHODS (* methods *) END;\n VAR object := NEW( Class1 );",
      "id": "a0d3d8b5f4fff108061d103e058d0f27"
    },
    {
      "type": "html",
      "text": "> having to declare a separate block to put your variable declarations in isn't something a C/C++ (or OCaml, in my case) programmer is used to",
      "id": "e59b1b4d155795c461014b374ff8aab5"
    },
    {
      "type": "html",
      "text": "\nI don't see the difference between this (Modula-3):",
      "id": "94828b74b5bd04a2462fbe33b081cd9f"
    },
    {
      "type": "code",
      "text": "  VAR x := 100; BEGIN\n    VAR y := 200; BEGIN\n      (* use x and y here *)\n    END;\n  END;",
      "id": "2bd1c5d33a8a25d8502012f99404ff6c"
    },
    {
      "type": "html",
      "text": "and this (OCaml):",
      "id": "4a576be6b79fdaec78d05e98ee824598"
    },
    {
      "type": "code",
      "text": "  let x = 100 in\n    let y = 200 in\n      (* use x and y here *)\n  ;;",
      "id": "70839c6a2763e8f3f0afc94bff8f0b46"
    },
    {
      "type": "html",
      "text": "and even this (C):",
      "id": "e47a184328ad1a04bbb6603851960054"
    },
    {
      "type": "code",
      "text": "  int x = 100;\n  int y = 200;\n  /* use x and y here */",
      "id": "5a19ff3cc79402267caa07874a7dca2e"
    },
    {
      "type": "html",
      "text": "which is the same as this (C):",
      "id": "2fcd56e1d9d695a1133f5dadfccfab4d"
    },
    {
      "type": "code",
      "text": " {\n   int x = 100;\n   {\n     int y = 200;\n     /* use x and y here */\n   }\n }",
      "id": "12f00f4e942cf063e38a210308d2ff07"
    },
    {
      "type": "html",
      "text": "although M3 programmers would more commonly write this:",
      "id": "96be338e0989f476980ad955da498319"
    },
    {
      "type": "html",
      "text": "VAR x:<br>INTEGER := 100;",
      "id": "6115c54b7ca64319d82dbbc2df889873"
    },
    {
      "type": "html",
      "text": "y:<br>INTEGER := 200;",
      "id": "35fcd054d7d4fd31606277a737594e04"
    },
    {
      "type": "code",
      "text": "  BEGIN\n    (* use x and y here *)\n  END;",
      "id": "e32b393ddad40daae035e3423fe3459d"
    },
    {
      "type": "html",
      "text": "> Types and structure constructors can't be imported into modules like functions can (or if they can be, it's undocumented)",
      "id": "6115bca9d817b41eeb57bc7dc6d2048c"
    },
    {
      "type": "html",
      "text": "\nIn fact 'importing' is one of M3's most documented features.  See 'IMPORT' in any M3 reference.  For example, create a module that defines a record type:",
      "id": "6164035ad8b9e522b5606d2925b25990"
    },
    {
      "type": "html",
      "text": "MODULE Foo; TYPE R1 = RECORD x:<br>INTEGER; END; END;",
      "id": "ea4950c73de3cc8da0a9a44c8ca4a7f1"
    },
    {
      "type": "html",
      "text": "Import the module in order to use the type:",
      "id": "5b8c9b3283a0834d2ea79100e0c8fd27"
    },
    {
      "type": "html",
      "text": "MODULE Bar; IMPORT Foo; VAR r1:<br>Foo.R1; END;",
      "id": "7f27c40ee89bf2c7d42fde9ca25ebe08"
    },
    {
      "type": "html",
      "text": "> all the annoying type constraints",
      "id": "63965cd9fa271f4663db02cd0cc24cb8"
    },
    {
      "type": "html",
      "text": "\nYou mean like having to declare a variable's type?  Function parameter types?  Return types?  Record and object member types?  I'm not sure how this is worse than C/C++.",
      "id": "eaf99a482eea15a2189b77bdb75bc13a"
    },
    {
      "type": "html",
      "text": "\nOr do you mean you'd prefer to have weak typing, like this?",
      "id": "282b0d0c8fab8a7a462816199a480b2b"
    },
    {
      "type": "code",
      "text": " float x = 100.0;\n char* y = (char*)&x;",
      "id": "eb752d0718b6c11797823807c0247ea5"
    },
    {
      "type": "html",
      "text": "But is that really good programming practice?  A weak type system is not necessarily a Good Thing.",
      "id": "3c012fe0f9ab22d99f7bc379c1ab27f5"
    },
    {
      "type": "html",
      "text": "\nOr do you not like manifest typing?  Again, you can't escape it in C/C++, so I'm not sure what you mean.  Implicit typing like you have in OCaml makes typing code easier, but I haven't found that it makes debugging any easier.",
      "id": "d7ca2d786800dce69c63cb862979e6d9"
    },
    {
      "type": "html",
      "text": "\nIf you like implicit typing, you can use it.",
      "id": "3a7b210dfc6e42add08507406bd1621b"
    },
    {
      "type": "code",
      "text": " VAR x := 100; BEGIN (* use x *) END;\n WITH x = 100 DO (* use x *) END;",
      "id": "5584cfa077a51d89f03135730a08e7fa"
    },
    {
      "type": "html",
      "text": "> over-verbose ALL IN CAPS syntax",
      "id": "c546ecf0dec773cfb76c330ad672e54a"
    },
    {
      "type": "html",
      "text": "\nNo, not ALL IN CAPS, but just KEYWORDS in caps.  I hated it at first, too, but now I don't even notice it.  You can any name you want to declare functions and variables, including 'object', 'array', 'procedure', 'main', 'int', etc.  Also, emacs makes the code look reeeeeally pretty.",
      "id": "bc19f7fe264b2d37c22e5a21e1df19d4"
    },
    {
      "type": "html",
      "text": "<i>Heh, I've been trying to say the same thing about Oberon source code too, but they just don't listen. --Samuel A. Falvo II</i>",
      "id": "a9ba716ea64212cac9c478de0e00179d"
    },
    {
      "type": "html",
      "text": "\n[[Jeffrey Meunier]] [http://jeffmeunier.wikispaces.com/ jeffmeunier.wikispaces.com]",
      "id": "cc5d54274c5794f64001a684afb50f98"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
    },
    {
      "type": "html",
      "text": "<i>(by Dejan Lekic, [http://dejan.lekic.org dejan.lekic.org]): Modula-3, like all languages which utilize garbage collector, doesn't expect from developer too much pointer-arithmetic. Also, those developers who know Modula-3 (I am C++ developer myself), know how amazingly Modula-3 is safe. I just want to remind you - all modules who work with pointers are considered unsafe by default.</i>",
      "id": "935663e8f2f2c1eab2e3c16f32c9b084"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Category Pascal]] [[Modula Language]]",
      "id": "e135e1da90172c7be9f0241cb7a11d26"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ModulaThree c2.com]",
      "id": "5d2df2d30541e69b6b33de6bc4fc333e"
    }
  ],
  "journal": [
    {
      "date": 1287338135000,
      "id": "77a1e15d239544dc4d2022c004686e82",
      "type": "create",
      "item": {
        "title": "Modula Three",
        "story": [
          {
            "type": "html",
            "text": "<b>Modula-3</b>",
            "id": "773e539a804d650d4511ac033e8eb4e8"
          },
          {
            "type": "html",
            "text": "\nA fine programming language, descended (of course) from [[Modula Two]] (1985ish) ",
            "id": "3615b7735c189c18e599ec7003dbc309"
          },
          {
            "type": "html",
            "text": "<i>Strictly speaking, it is descended from Modula-2+.  Modula-3 has some additional features: Exceptions, Objects, Garbage collection, Template modules, Partial hiding of type information, Lightweight threads.</i>",
            "id": "270531dd63b22c5fcc4c3f081beca5d5"
          },
          {
            "type": "html",
            "text": "<i>Modula-3 makes something different: It uses structural equivalence, that is, if two records contain the same fields with the same names they are equivalent. Thus you can't define two indistinguishable record types simply by defining one twice.</i>",
            "id": "868133d4ea361d4ec656b2fef38322bf"
          },
          {
            "type": "html",
            "text": "<i>A design goal was to keep the language specification under 50 pages. They overran their page budget by six lines.</i>",
            "id": "84ca59e98a747db9017e639a4f610336"
          },
          {
            "type": "html",
            "text": "\nModula 3 is technically not one of the [[Wirth Languages]], because it was not developed by [[Niklaus Wirth]], although it was given his blessing.",
            "id": "a05714f6a711c0e306a143b12e30ace3"
          },
          {
            "type": "html",
            "text": "\nThere's a Modula-3 resource page at \"[http://www.m3.org/ www.m3.org]\". This has moved since 2007 to \"[http://modula3.org/ modula3.org]\". The language definition is at \"[http://www.research.compaq.com/SRC/m3defn/html/m3.html www.research.compaq.com]\".",
            "id": "2ae9e93d63d56926fe0753939bf39bdd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
          },
          {
            "type": "html",
            "text": "[[Simplified Wrapper And Interface Generator]] (SWIG) can be used to make calls to [[Cee Language]] or [[Cee Plus Plus]] code.",
            "id": "fb283b79b436d5cd896c47657363a747"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
          },
          {
            "type": "html",
            "text": "\nShamefully, Java didn't steal nearly enough from it.",
            "id": "f50eb55f265dd380e1fc4e166639d98a"
          },
          {
            "type": "html",
            "text": "[<i>That's right - it stole all everything from Oberon-2 and the Oberon system (another [[Wirth Languages]], but plus an extensible OS) - including the portable object-code idea. (See [[Oberon Language]])</i>] -- [[Arnold Layne]]",
            "id": "ead4fb78ed50b19bc4943d4de17bdc59"
          },
          {
            "type": "html",
            "text": "\nI can't quite remember the history of the languages, but I do remember seeing [[Niklaus Wirth]] at Digital's [[Systems Research Center]] quite often. ",
            "id": "77337efd01a034a3df57ed888ea74f6f"
          },
          {
            "type": "html",
            "text": "\nSee:",
            "id": "4dc7444a9de7f4c9db29ee904b0716b6"
          },
          {
            "type": "html",
            "text": "\n[http://www.research.digital.com/SRC/modula-3/html/home.html www.research.digital.com]",
            "id": "d8cad19867a78395ccbc6557adfd9779"
          },
          {
            "type": "html",
            "text": "-- [[Steve Freeman]] (who can be very boring on this topic)",
            "id": "b5edb182c133926d59662d83cb424a3f"
          },
          {
            "type": "html",
            "text": "<i>Which parts of Modula 3 would you like to see in Java?</i>",
            "id": "62183ededf3d3e87710c4888bcf585dc"
          },
          {
            "type": "html",
            "text": "\nPrincipally the libraries",
            "id": "b2acec69b0b6761dfd5b0e7fae528125"
          },
          {
            "type": "html",
            "text": "(the sources [http://www.research.compaq.com/SRC/m3sources/html/INDEX.html www.research.compaq.com] are a gold mine of software engineering theory and practice)\nwhich were very mature and written by some of the smartest people on the planet. It also has very nice constructs for mixing safe and \"native\" code, it doesn't just drop you into raw C++ like Java does. Do I need to say anything more about AWT and Swing?... And a bunch of smaller things like its threads interface and decent ordinal types.",
            "id": "67c1d050a036c9a9437c1c9833ca17fb"
          },
          {
            "type": "html",
            "text": "<i>That sounds great. Hey, you'd be just the person to ask. One thing that always bugged me in Pascal was the inability to define an ordinal as the union of two other ordinals. There were many times when I needed to say, \"This range is exactly the same as that range, except its higher limit is one greater.\" Or, \"this is the same as the set of Primary<b></b>Colors, but with the addition of these Secondary<b></b>Colors. Not being able to do that was a bit of an annoyance in Pascal's type system. Can you do anything like that in Modula 3?</i>",
            "id": "e7b7d31b0ea477f22fab693d617fde74"
          },
          {
            "type": "html",
            "text": "\nIt's been a while, so I'm not sure. I think you can do:",
            "id": "bd75dbb41037e4a4b99be81fbc306605"
          },
          {
            "type": "code",
            "text": "   TYPE T = [First .. Last];\n   TYPE U = [T.First .. T.Last, Extra];",
            "id": "69b85c587be0829656346abc4ac49844"
          },
          {
            "type": "html",
            "text": "\nIt's so depressing that [[Csharp Language]] missed proper ordinals, so you still have to check for bad values in case statements, etc. Sigh.",
            "id": "95c152e8dc89247f3365498f6304e7bf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
          },
          {
            "type": "html",
            "text": "\nIn [[Csharp Language Discussion]], somebody wrote <i>Hopefully C# uses Modula's model of pointers and addresses, instead of C's confused and confusing model.</i> What model is that?",
            "id": "cefea21da550a16b60835e4b0892bd92"
          },
          {
            "type": "html",
            "text": "\nThe Modula language family makes a clear separation between <i>pointers</i>, as a strongly typed, language-level, indirect reference to dynamically allocated objects, and <i>addresses</i>, machine-level indices into the virtual memory of a process. You cannot get a pointer to an object on the stack or in an array or record through the base language. To use addresses, one must import the appropriate standard module that defines the ADDRESS type and functions for taking the address of variables and converting between pointers and addresses or cardinals and addresses. In Modula-3, a module that uses addresses is marked as \"unsafe\".",
            "id": "db178afa6f31ac3464b6a2aa18b987d4"
          },
          {
            "type": "html",
            "text": "\nC on the other hand doesn't have pass-by-reference parameters, and uses pointers instead. Therefore programs have to get pointers to objects in global memory or on the stack. There is no difference between this kind of pointer and pointers to objects on the heap, which causes extra complication when managing memory. C also allows silent conversions between pointers and addresses, and from arrays to pointers to their first element.",
            "id": "1a9c58b91bec7e46173e5b6bd68bc00a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
          },
          {
            "type": "html",
            "text": "\nModula 3 is undoubtedly thought a fine language by most people who choose to use it. To those of us who have had to use it because others chose it, it proved horrendously painful - especially the pointer system. I can remember asking around if people had any ideas on how to make the language worse, and the only suggestions were line numbers and concepts ported from Intercal. Just to let you know that whatever standards are being used here, they aren't universal.",
            "id": "fba00f2f4bb8d23258af2e1ac8699bfd"
          },
          {
            "type": "html",
            "text": "<i>Not having used it, I'm curious: what made it horrendously painful?</i>",
            "id": "1828f99f4991776bbe0bd2b4952cfb3c"
          },
          {
            "type": "html",
            "text": "\nIn my (brief and unprofessional) experience with Modula-3, it was painful mainly because of brief documentation on the more sophisticated/fun parts (try figuring out exactly how pointers are supposed to work, try figuring out what the limits are on arrays, and how both relate to type declarations, try figuring out how to make dynamic arrays, I didn't even dare touch the OO-ish features) and the amazingly annoying syntax. Some of it is just unfamiliarity; having to declare a separate block to put your variable declarations in isn't something a C/C++ (or OCaml, in my case) programmer is used to. Types and structure constructors can't be imported into modules like functions can (or if they can be, it's undocumented), the formatting functions aren't bad but could be better if there were a few more gaps in the type system, and worst of all is the constant nagging feeling that there actually IS a bloody good language there, lurking beneath all the annoying type constraints and over-verbose ALL IN CAPS syntax.",
            "id": "47eec73a433e2991e1835481a6c15395"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
          },
          {
            "type": "html",
            "text": "> horrendously painful - especially the pointer system",
            "id": "2cfc6a6e8d4f50461ba7cf1df01f2305"
          },
          {
            "type": "html",
            "text": "\nPointers *should* be difficult to use because they're a major source of bugs.  You can do everything M3, including function references, except interfacing to external libraries without using pointers.",
            "id": "20a1a4be6a8bb3bff351ce62861f3ed6"
          },
          {
            "type": "html",
            "text": "> try figuring out exactly how pointers are supposed to work",
            "id": "b9878adba159f23b28ae950eb17bdf90"
          },
          {
            "type": "html",
            "text": "\nOk, so they're not so difficult after all.",
            "id": "f51e0064670a668c386e6a0a6da84aee"
          },
          {
            "type": "html",
            "text": "VAR x:<br>INTEGER := 100;",
            "id": "6115c54b7ca64319d82dbbc2df889873"
          },
          {
            "type": "html",
            "text": "address:<br>ADDRESS := ADR( x );",
            "id": "278a435b309fd949539369b6fb48c564"
          },
          {
            "type": "html",
            "text": "> try figuring out how to make dynamic arrays",
            "id": "a7e397761f3ec76e6ac0022061b21f1f"
          },
          {
            "type": "code",
            "text": " VAR array := NEW( REF ARRAY OF INTEGER, 10 );",
            "id": "c8d2a341bd7d8b2010220af05c4e16ed"
          },
          {
            "type": "html",
            "text": "> try figuring out what the limits are on arrays",
            "id": "af2e6713069bf1d79efa13051746d6a5"
          },
          {
            "type": "code",
            "text": " VAR last := LAST( array );",
            "id": "2c85d0cf7ab8383ef3aad2b981a58a99"
          },
          {
            "type": "html",
            "text": "How do you do it in C?",
            "id": "f687d2d97aa9fa489ca3105bef61951c"
          },
          {
            "type": "html",
            "text": "> I didn't even dare touch the OO-ish features",
            "id": "7f6c997fea4f40e4cee47f5d51124079"
          },
          {
            "type": "code",
            "text": " TYPE Class1 = OBJECT (* member vars *) METHODS (* methods *) END;\n VAR object := NEW( Class1 );",
            "id": "a0d3d8b5f4fff108061d103e058d0f27"
          },
          {
            "type": "html",
            "text": "> having to declare a separate block to put your variable declarations in isn't something a C/C++ (or OCaml, in my case) programmer is used to",
            "id": "e59b1b4d155795c461014b374ff8aab5"
          },
          {
            "type": "html",
            "text": "\nI don't see the difference between this (Modula-3):",
            "id": "94828b74b5bd04a2462fbe33b081cd9f"
          },
          {
            "type": "code",
            "text": "  VAR x := 100; BEGIN\n    VAR y := 200; BEGIN\n      (* use x and y here *)\n    END;\n  END;",
            "id": "2bd1c5d33a8a25d8502012f99404ff6c"
          },
          {
            "type": "html",
            "text": "and this (OCaml):",
            "id": "4a576be6b79fdaec78d05e98ee824598"
          },
          {
            "type": "code",
            "text": "  let x = 100 in\n    let y = 200 in\n      (* use x and y here *)\n  ;;",
            "id": "70839c6a2763e8f3f0afc94bff8f0b46"
          },
          {
            "type": "html",
            "text": "and even this (C):",
            "id": "e47a184328ad1a04bbb6603851960054"
          },
          {
            "type": "code",
            "text": "  int x = 100;\n  int y = 200;\n  /* use x and y here */",
            "id": "5a19ff3cc79402267caa07874a7dca2e"
          },
          {
            "type": "html",
            "text": "which is the same as this (C):",
            "id": "2fcd56e1d9d695a1133f5dadfccfab4d"
          },
          {
            "type": "code",
            "text": " {\n   int x = 100;\n   {\n     int y = 200;\n     /* use x and y here */\n   }\n }",
            "id": "12f00f4e942cf063e38a210308d2ff07"
          },
          {
            "type": "html",
            "text": "although M3 programmers would more commonly write this:",
            "id": "96be338e0989f476980ad955da498319"
          },
          {
            "type": "html",
            "text": "VAR x:<br>INTEGER := 100;",
            "id": "6115c54b7ca64319d82dbbc2df889873"
          },
          {
            "type": "html",
            "text": "y:<br>INTEGER := 200;",
            "id": "35fcd054d7d4fd31606277a737594e04"
          },
          {
            "type": "code",
            "text": "  BEGIN\n    (* use x and y here *)\n  END;",
            "id": "e32b393ddad40daae035e3423fe3459d"
          },
          {
            "type": "html",
            "text": "> Types and structure constructors can't be imported into modules like functions can (or if they can be, it's undocumented)",
            "id": "6115bca9d817b41eeb57bc7dc6d2048c"
          },
          {
            "type": "html",
            "text": "\nIn fact 'importing' is one of M3's most documented features.  See 'IMPORT' in any M3 reference.  For example, create a module that defines a record type:",
            "id": "6164035ad8b9e522b5606d2925b25990"
          },
          {
            "type": "html",
            "text": "MODULE Foo; TYPE R1 = RECORD x:<br>INTEGER; END; END;",
            "id": "ea4950c73de3cc8da0a9a44c8ca4a7f1"
          },
          {
            "type": "html",
            "text": "Import the module in order to use the type:",
            "id": "5b8c9b3283a0834d2ea79100e0c8fd27"
          },
          {
            "type": "html",
            "text": "MODULE Bar; IMPORT Foo; VAR r1:<br>Foo.R1; END;",
            "id": "7f27c40ee89bf2c7d42fde9ca25ebe08"
          },
          {
            "type": "html",
            "text": "> all the annoying type constraints",
            "id": "63965cd9fa271f4663db02cd0cc24cb8"
          },
          {
            "type": "html",
            "text": "\nYou mean like having to declare a variable's type?  Function parameter types?  Return types?  Record and object member types?  I'm not sure how this is worse than C/C++.",
            "id": "eaf99a482eea15a2189b77bdb75bc13a"
          },
          {
            "type": "html",
            "text": "\nOr do you mean you'd prefer to have weak typing, like this?",
            "id": "282b0d0c8fab8a7a462816199a480b2b"
          },
          {
            "type": "code",
            "text": " float x = 100.0;\n char* y = (char*)&x;",
            "id": "eb752d0718b6c11797823807c0247ea5"
          },
          {
            "type": "html",
            "text": "But is that really good programming practice?  A weak type system is not necessarily a Good Thing.",
            "id": "3c012fe0f9ab22d99f7bc379c1ab27f5"
          },
          {
            "type": "html",
            "text": "\nOr do you not like manifest typing?  Again, you can't escape it in C/C++, so I'm not sure what you mean.  Implicit typing like you have in OCaml makes typing code easier, but I haven't found that it makes debugging any easier.",
            "id": "d7ca2d786800dce69c63cb862979e6d9"
          },
          {
            "type": "html",
            "text": "\nIf you like implicit typing, you can use it.",
            "id": "3a7b210dfc6e42add08507406bd1621b"
          },
          {
            "type": "code",
            "text": " VAR x := 100; BEGIN (* use x *) END;\n WITH x = 100 DO (* use x *) END;",
            "id": "5584cfa077a51d89f03135730a08e7fa"
          },
          {
            "type": "html",
            "text": "> over-verbose ALL IN CAPS syntax",
            "id": "c546ecf0dec773cfb76c330ad672e54a"
          },
          {
            "type": "html",
            "text": "\nNo, not ALL IN CAPS, but just KEYWORDS in caps.  I hated it at first, too, but now I don't even notice it.  You can any name you want to declare functions and variables, including 'object', 'array', 'procedure', 'main', 'int', etc.  Also, emacs makes the code look reeeeeally pretty.",
            "id": "bc19f7fe264b2d37c22e5a21e1df19d4"
          },
          {
            "type": "html",
            "text": "<i>Heh, I've been trying to say the same thing about Oberon source code too, but they just don't listen. --Samuel A. Falvo II</i>",
            "id": "a9ba716ea64212cac9c478de0e00179d"
          },
          {
            "type": "html",
            "text": "\n[[Jeffrey Meunier]] [http://jeffmeunier.wikispaces.com/ jeffmeunier.wikispaces.com]",
            "id": "cc5d54274c5794f64001a684afb50f98"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
          },
          {
            "type": "html",
            "text": "<i>(by Dejan Lekic, [http://dejan.lekic.org dejan.lekic.org]): Modula-3, like all languages which utilize garbage collector, doesn't expect from developer too much pointer-arithmetic. Also, those developers who know Modula-3 (I am C++ developer myself), know how amazingly Modula-3 is safe. I just want to remind you - all modules who work with pointers are considered unsafe by default.</i>",
            "id": "935663e8f2f2c1eab2e3c16f32c9b084"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3cbd1b6fa82e6573c856dfdcdc4cfd0d"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Category Pascal]] [[Modula Language]]",
            "id": "e135e1da90172c7be9f0241cb7a11d26"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ModulaThree c2.com]",
            "id": "5d2df2d30541e69b6b33de6bc4fc333e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628112097194
    },
    {
      "type": "fork",
      "date": 1628112721847
    }
  ]
}