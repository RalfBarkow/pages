{
  "title": "Properties on window are global variables",
  "story": [
    {
      "type": "paragraph",
      "id": "c19cf04ed835ef5f",
      "text": "Properties on window are global variables. Global variables are properties on window. The global object, (we're talking about it as window, but `global` in node is the same) is where scope, invocation context, inheritance, and property access all come crashing together."
    },
    {
      "type": "code",
      "id": "d7c2481a56f85b0a",
      "text": "function wow () {\n  this.really = '???'\n}\n\nwow()\n\nconsole.log(really) // '???'"
    },
    {
      "type": "paragraph",
      "id": "de0f0fcfc981b356",
      "text": "It doesn't matter how you get the reference to the global object, writing a property to it still makes a global variable. It works the other way too, if you forget a var statement that will show up as a property off of window."
    },
    {
      "type": "paragraph",
      "id": "c3762ee5ac1ac294",
      "text": "One of the easiest ways to accidentally write to the global object is to use `this` in a function that gets invoked in the global context. In our case above, we could expect wow to get added as a method of an object, and always called like that. Or we could expect it to always be called with new, so we'd be adding ready to a newly created object. However, we call it in the global context (not as a method, not with new, not explicitly setting the context), so we create a global variable by writing to `this` which is the same as window/global."
    },
    {
      "type": "paragraph",
      "id": "0677612d9143858f",
      "text": "Just be aware that you don't want to go stashing things on the window object using common names, because those properties become global variables in your entire app. If you are getting weird behavior with state sticking around where you thought it was impossible, make sure that your 'this' doesn't actually turn out to be the global object when you don't mean it to be."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Properties on window are global variables",
        "story": []
      },
      "date": 1432016020357
    },
    {
      "item": {
        "type": "factory",
        "id": "c19cf04ed835ef5f"
      },
      "id": "c19cf04ed835ef5f",
      "type": "add",
      "date": 1432016023896
    },
    {
      "type": "edit",
      "id": "c19cf04ed835ef5f",
      "item": {
        "type": "paragraph",
        "id": "c19cf04ed835ef5f",
        "text": "Properties on window are global variables. Global variables are properties on window. The global object, (we're talking about it as window, but "
      },
      "date": 1432016113635
    },
    {
      "type": "edit",
      "id": "c19cf04ed835ef5f",
      "item": {
        "type": "paragraph",
        "id": "c19cf04ed835ef5f",
        "text": "Properties on window are global variables. Global variables are properties on window. The global object, (we're talking about it as window, but `global` in node is the same) is where scope, invocation context, inheritance, and property access all come crashing together."
      },
      "date": 1432016194113
    },
    {
      "item": {
        "type": "factory",
        "id": "c6742738ca726ba6"
      },
      "id": "c6742738ca726ba6",
      "type": "add",
      "after": "c19cf04ed835ef5f",
      "date": 1432016339114
    },
    {
      "type": "remove",
      "id": "c6742738ca726ba6",
      "date": 1432016341816
    },
    {
      "item": {
        "type": "factory",
        "id": "d7c2481a56f85b0a"
      },
      "id": "d7c2481a56f85b0a",
      "type": "add",
      "after": "c19cf04ed835ef5f",
      "date": 1432016343194
    },
    {
      "type": "edit",
      "id": "d7c2481a56f85b0a",
      "item": {
        "type": "code",
        "id": "d7c2481a56f85b0a",
        "text": "function wow () {\n  this.really = '???'\n}\n\nwow()\n\nconsole.log(really)"
      },
      "date": 1432016352113
    },
    {
      "item": {
        "type": "factory",
        "id": "de0f0fcfc981b356"
      },
      "id": "de0f0fcfc981b356",
      "type": "add",
      "after": "d7c2481a56f85b0a",
      "date": 1432016368340
    },
    {
      "type": "edit",
      "id": "d7c2481a56f85b0a",
      "item": {
        "type": "code",
        "id": "d7c2481a56f85b0a",
        "text": "function wow () {\n  this.really = '???'\n}\n\nwow()\n\nconsole.log(really) // '???'"
      },
      "date": 1432016377794
    },
    {
      "type": "edit",
      "id": "de0f0fcfc981b356",
      "item": {
        "type": "paragraph",
        "id": "de0f0fcfc981b356",
        "text": "It doesn't matter how you get the reference to the global object, writing a property to it still makes a global variable. It works the other way too, if you forget a var statement that will show up as a property off of window."
      },
      "date": 1432016456664
    },
    {
      "type": "add",
      "id": "c3762ee5ac1ac294",
      "item": {
        "type": "paragraph",
        "id": "c3762ee5ac1ac294",
        "text": "One of the easiest ways to accidentally write to the global object is to use `this` in a function that gets invoked in the global context. In our case above, we could expect wow to get added as a method of an object, and always called like that. Or we could expect it to always be called with new, so we'd be adding ready to a newly created object. However, we call it in the global context (not as a method, not with new, not explicitly setting the context), so we create a global variable by writing to `this` which is the same as window/global."
      },
      "after": "de0f0fcfc981b356",
      "date": 1432016622793
    },
    {
      "item": {
        "type": "factory",
        "id": "0677612d9143858f"
      },
      "id": "0677612d9143858f",
      "type": "add",
      "after": "c3762ee5ac1ac294",
      "date": 1432016943775
    },
    {
      "type": "edit",
      "id": "0677612d9143858f",
      "item": {
        "type": "paragraph",
        "id": "0677612d9143858f",
        "text": "Just be aware that you don't want to go stashing things on the window object using common names, because those properties become global variables in your entire app. If you are getting weird behavior with state sticking around where you thought it was impossible, make sure that your 'this' doesn't actually turn out to be the global object when you don't mean it to be."
      },
      "date": 1432017067122
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1652868529083
    }
  ]
}