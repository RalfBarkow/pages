{
  "title": "2023-03-20",
  "story": [
    {
      "type": "paragraph",
      "id": "d3c882ca257e73f8",
      "text": "⇒ [[Journal to Graph]] ⇒  [[rdom-svg-nodes]]"
    },
    {
      "type": "markdown",
      "id": "7e0bef198ef7a9b7",
      "text": "> transform atom view into consecutive pairs:\ne.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]"
    },
    {
      "type": "paragraph",
      "id": "c75b5197bfeee65f",
      "text": "⇒ [[Diffusion of Innovations]] ⇒ [[Everett M. Rogers]] ⇒ [[So What If ChatGPT Wrote It?]]"
    },
    {
      "type": "paragraph",
      "id": "c60da717df508194",
      "text": "⇒ [[Monica Anderson]] ⇒ [[Experimental Epistemology]]"
    },
    {
      "type": "paragraph",
      "id": "8904e2753a6e19a7",
      "text": "⇒ [[Journal]] – We change the show function to see actions as [[Object]]s. An action, i.e. a page.journal.item, has an ID, a text and a type. >> container object outside process inside"
    },
    {
      "type": "reference",
      "id": "6e7adca8a4947ee9",
      "site": "wiki.ralfbarkow.ch",
      "slug": "read-context-of-frame",
      "title": "Read Context of Frame",
      "text": "We send a message to the Frame asking it to send us info about the page surrounding it. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]"
    },
    {
      "type": "code",
      "id": "c8963fb39e7da82f",
      "text": "window.addEventListener(\"message\", handler)\nlet message = { action:\"sendFrameContext\" }\nwindow.parent.postMessage(message, \"*\")"
    },
    {
      "type": "paragraph",
      "id": "433e0069aa2ef6ee",
      "text": "We stop listening then process the data we got."
    },
    {
      "type": "code",
      "id": "00e55c113558b626",
      "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    show(page)\n  }\n}"
    },
    {
      "type": "paragraph",
      "id": "ca075d681c953999",
      "text": "The page we show is the page on the screen which might be a ghost, maybe retrieved from history."
    },
    {
      "type": "code",
      "id": "d4ee6431abc012ac",
      "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
    },
    {
      "type": "paragraph",
      "id": "fe1ab36ecb268415",
      "text": "Note: page.journal.[…] – the information stored must support path playback and path visualization."
    },
    {
      "type": "paragraph",
      "id": "174138ed693bdfc5",
      "text": "We change the show function to see actions as objects. An action, i.e. a page.journal.item, has an ID, a text and a type."
    },
    {
      "type": "paragraph",
      "id": "e747c2f0cbd1f135",
      "text": "Note: item.text seems to be something special."
    },
    {
      "type": "paragraph",
      "id": "4cf8bae39d8dbc68",
      "text": "Actions: [⇒ Updating [[Events and Causal Dependence]]]"
    },
    {
      "type": "frame",
      "id": "777ff878d8f1cc7e",
      "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 200"
    },
    {
      "type": "paragraph",
      "id": "95bed4996f17969c",
      "text": "[[create]] ⇒ [[Create Items and Pages]]"
    },
    {
      "type": "markdown",
      "id": "520191bdcb56afaf",
      "text": "> Many pages start with an empty create action but for bulk generated pages we include most of the page as the item being created, once carefully copied."
    },
    {
      "type": "paragraph",
      "id": "20427e17c844c899",
      "text": "[[edit]]"
    },
    {
      "type": "paragraph",
      "id": "462cdc3adc273535",
      "text": "[[add]]"
    },
    {
      "type": "paragraph",
      "id": "3205ef2558266210",
      "text": "[[remove]]"
    },
    {
      "type": "paragraph",
      "id": "f2eeba8b3454b796",
      "text": "[[fork]]"
    },
    {
      "type": "paragraph",
      "id": "1104a866463aca4f",
      "text": "⇒ [[Journal to Graph]] ⇒  [[rdom-svg-nodes]]"
    },
    {
      "type": "paragraph",
      "id": "7334c7ab828918e3",
      "text": "In the function handler() you already have created a const for page. In that javascript object you will find a title, story, and journal. You'll have to write some code to transform the contents of journal into a graph. ([[Eric Dobbs]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1679331121243146VriNl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix])"
    },
    {
      "type": "paragraph",
      "id": "20cfe9c82b2e7926",
      "text": "⇒ [[Lateral Tags]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-03-20",
        "story": []
      },
      "date": 1679292520218
    },
    {
      "item": {
        "type": "factory",
        "id": "c75b5197bfeee65f"
      },
      "id": "c75b5197bfeee65f",
      "type": "add",
      "date": 1679292628817
    },
    {
      "type": "edit",
      "id": "c75b5197bfeee65f",
      "item": {
        "type": "paragraph",
        "id": "c75b5197bfeee65f",
        "text": "⇒ [[Diffusion of Innovations]]"
      },
      "date": 1679292637948
    },
    {
      "type": "edit",
      "id": "c75b5197bfeee65f",
      "item": {
        "type": "paragraph",
        "id": "c75b5197bfeee65f",
        "text": "⇒ [[Diffusion of Innovations]] ⇒ [[Everett M. Rogers]]"
      },
      "date": 1679293321134
    },
    {
      "item": {
        "type": "factory",
        "id": "a86629ca873a3109"
      },
      "id": "a86629ca873a3109",
      "type": "add",
      "after": "c75b5197bfeee65f",
      "date": 1679293758596
    },
    {
      "type": "edit",
      "id": "a86629ca873a3109",
      "item": {
        "type": "paragraph",
        "id": "a86629ca873a3109",
        "text": "The “Nestor” in diffusion and adoption Everett M. Rogers (2010) identified five categories (groups) of adopters called innovators, early adopters, early and late majority, and laggards. The early majority expects and waitsfor certain members of the groupof early adopterscalled “opinion leaders” to demonstrate and communicate the advantages. Furthermore, the late majority not only wants the advantages demonstrated; they are also waiting for the right opportunity. Hence, the late majority group can be seen as havingresistance to change but are in fact just waiting for the right opportunity."
      },
      "date": 1679293759937
    },
    {
      "item": {
        "type": "factory",
        "id": "e033cb2f02898386"
      },
      "id": "e033cb2f02898386",
      "type": "add",
      "after": "a86629ca873a3109",
      "date": 1679293771161
    },
    {
      "type": "edit",
      "id": "e033cb2f02898386",
      "item": {
        "type": "paragraph",
        "id": "e033cb2f02898386",
        "text": "\nDWIVEDI, Yogesh K., KSHETRI, Nir, HUGHES, Laurie, SLADE, Emma Louise, JEYARAJ, Anand, KAR, Arpan Kumar, BAABDULLAH, Abdullah M., KOOHANG, Alex, RAGHAVAN, Vishnupriya, AHUJA, Manju, ALBANNA, Hanaa, ALBASHRAWI, Mousa Ahmad, AL-BUSAIDI, Adil S., BALAKRISHNAN, Janarthanan, BARLETTE, Yves, BASU, Sriparna, BOSE, Indranil, BROOKS, Laurence, BUHALIS, Dimitrios, CARTER, Lemuria, CHOWDHURY, Soumyadeb, CRICK, Tom, CUNNINGHAM, Scott W., DAVIES, Gareth H., DAVISON, Robert M., DÉ, Rahul, DENNEHY, Denis, DUAN, Yanqing, DUBEY, Rameshwar, DWIVEDI, Rohita, EDWARDS, John S., FLAVIÁN, Carlos, GAULD, Robin, GROVER, Varun, HU, Mei-Chih, JANSSEN, Marijn, JONES, Paul, JUNGLAS, Iris, KHORANA, Sangeeta, KRAUS, Sascha, LARSEN, Kai R., LATREILLE, Paul, LAUMER, Sven, MALIK, F. Tegwen, MARDANI, Abbas, MARIANI, Marcello, MITHAS, Sunil, MOGAJI, Emmanuel, NORD, Jeretta Horn, O’CONNOR, Siobhan, OKUMUS, Fevzi, PAGANI, Margherita, PANDEY, Neeraj, PAPAGIANNIDIS, Savvas, PAPPAS, Ilias O., PATHAK, Nishith, PRIES-HEJE, Jan, RAMAN, Ramakrishnan, RANA, Nripendra P., REHM, Sven-Volker, RIBEIRO-NAVARRETE, Samuel, RICHTER, Alexander, ROWE, Frantz, SARKER, Suprateek, STAHL, Bernd Carsten, TIWARI, Manoj Kumar, VAN DER AALST, Wil, VENKATESH, Viswanath, VIGLIA, Giampaolo, WADE, Michael, WALTON, Paul, WIRTZ, Jochen and WRIGHT, Ryan, 2023. “So what if ChatGPT wrote it?” Multidisciplinary perspectives on opportunities, challenges and implications of generative conversational AI for research, practice and policy. International Journal of Information Management. 1 August 2023. Vol. 71, p. 102642. DOI 10.1016/j.ijinfomgt.2023.102642. Transformative artificially intelligent tools, such as ChatGPT, designed to generate sophisticated text indistinguishable from that produced by a human, are applicable across a wide range of contexts. The technology presents opportunities as well as, often ethical and legal, challenges, and has the potential for both positive and negative impacts for organisations, society, and individuals. Offering multi-disciplinary insight into some of these, this article brings together 43 contributions from experts in fields such as computer science, marketing, information systems, education, policy, hospitality and tourism, management, publishing, and nursing. The contributors acknowledge ChatGPT’s capabilities to enhance productivity and suggest that it is likely to offer significant gains in the banking, hospitality and tourism, and information technology industries, and enhance business activities, such as management and marketing. Nevertheless, they also consider its limitations, disruptions to practices, threats to privacy and security, and consequences of biases, misuse, and misinformation. However, opinion is split on whether ChatGPT’s use should be restricted or legislated. Drawing on these contributions, the article identifies questions requiring further research across three thematic areas: knowledge, transparency, and ethics; digital transformation of organisations and societies; and teaching, learning, and scholarly research. The avenues for further research include: identifying skills, resources, and capabilities needed to handle generative AI; examining biases of generative AI attributable to training datasets and processes; exploring business and societal contexts best suited for generative AI implementation; determining optimal combinations of human and generative AI for various tasks; identifying ways to assess accuracy of text produced by generative AI; and uncovering the ethical and legal issues in using generative AI across different contexts.\n"
      },
      "date": 1679293772790
    },
    {
      "type": "edit",
      "id": "a86629ca873a3109",
      "item": {
        "type": "paragraph",
        "id": "a86629ca873a3109",
        "text": "The “Nestor” in diffusion and adoption Everett M. Rogers (2010) identified five categories (groups) of adopters called innovators, early adopters, early and late majority, and laggards. The early majority expects and waits for certain members of the group of early adopters called “opinion leaders” to demonstrate and communicate the advantages. Furthermore, the late majority not only wants the advantages demonstrated; they are also waiting for the right opportunity. Hence, the late majority group can be seen as having resistance to change but are in fact just waiting for the right opportunity."
      },
      "date": 1679293820568
    },
    {
      "type": "edit",
      "id": "e033cb2f02898386",
      "item": {
        "type": "paragraph",
        "id": "e033cb2f02898386",
        "text": "DWIVEDI, Yogesh K., KSHETRI, Nir, HUGHES, Laurie, SLADE, Emma Louise, JEYARAJ, Anand, KAR, Arpan Kumar, BAABDULLAH, Abdullah M., KOOHANG, Alex, RAGHAVAN, Vishnupriya, AHUJA, Manju, ALBANNA, Hanaa, ALBASHRAWI, Mousa Ahmad, AL-BUSAIDI, Adil S., BALAKRISHNAN, Janarthanan, BARLETTE, Yves, BASU, Sriparna, BOSE, Indranil, BROOKS, Laurence, BUHALIS, Dimitrios, CARTER, Lemuria, CHOWDHURY, Soumyadeb, CRICK, Tom, CUNNINGHAM, Scott W., DAVIES, Gareth H., DAVISON, Robert M., DÉ, Rahul, DENNEHY, Denis, DUAN, Yanqing, DUBEY, Rameshwar, DWIVEDI, Rohita, EDWARDS, John S., FLAVIÁN, Carlos, GAULD, Robin, GROVER, Varun, HU, Mei-Chih, JANSSEN, Marijn, JONES, Paul, JUNGLAS, Iris, KHORANA, Sangeeta, KRAUS, Sascha, LARSEN, Kai R., LATREILLE, Paul, LAUMER, Sven, MALIK, F. Tegwen, MARDANI, Abbas, MARIANI, Marcello, MITHAS, Sunil, MOGAJI, Emmanuel, NORD, Jeretta Horn, O’CONNOR, Siobhan, OKUMUS, Fevzi, PAGANI, Margherita, PANDEY, Neeraj, PAPAGIANNIDIS, Savvas, PAPPAS, Ilias O., PATHAK, Nishith, PRIES-HEJE, Jan, RAMAN, Ramakrishnan, RANA, Nripendra P., REHM, Sven-Volker, RIBEIRO-NAVARRETE, Samuel, RICHTER, Alexander, ROWE, Frantz, SARKER, Suprateek, STAHL, Bernd Carsten, TIWARI, Manoj Kumar, VAN DER AALST, Wil, VENKATESH, Viswanath, VIGLIA, Giampaolo, WADE, Michael, WALTON, Paul, WIRTZ, Jochen and WRIGHT, Ryan, 2023. “So what if ChatGPT wrote it?” Multidisciplinary perspectives on opportunities, challenges and implications of generative conversational AI for research, practice and policy. International Journal of Information Management. 1 August 2023. Vol. 71, p. 102642. DOI 10.1016/j.ijinfomgt.2023.102642. Transformative artificially intelligent tools, such as ChatGPT, designed to generate sophisticated text indistinguishable from that produced by a human, are applicable across a wide range of contexts. The technology presents opportunities as well as, often ethical and legal, challenges, and has the potential for both positive and negative impacts for organisations, society, and individuals. Offering multi-disciplinary insight into some of these, this article brings together 43 contributions from experts in fields such as computer science, marketing, information systems, education, policy, hospitality and tourism, management, publishing, and nursing. The contributors acknowledge ChatGPT’s capabilities to enhance productivity and suggest that it is likely to offer significant gains in the banking, hospitality and tourism, and information technology industries, and enhance business activities, such as management and marketing. Nevertheless, they also consider its limitations, disruptions to practices, threats to privacy and security, and consequences of biases, misuse, and misinformation. However, opinion is split on whether ChatGPT’s use should be restricted or legislated. Drawing on these contributions, the article identifies questions requiring further research across three thematic areas: knowledge, transparency, and ethics; digital transformation of organisations and societies; and teaching, learning, and scholarly research. The avenues for further research include: identifying skills, resources, and capabilities needed to handle generative AI; examining biases of generative AI attributable to training datasets and processes; exploring business and societal contexts best suited for generative AI implementation; determining optimal combinations of human and generative AI for various tasks; identifying ways to assess accuracy of text produced by generative AI; and uncovering the ethical and legal issues in using generative AI across different contexts.\n"
      },
      "date": 1679293874750
    },
    {
      "type": "add",
      "id": "597075674e14470e",
      "item": {
        "type": "paragraph",
        "id": "597075674e14470e",
        "text": "So What If Chatgpt Wrote It?"
      },
      "after": "a86629ca873a3109",
      "date": 1679293903064
    },
    {
      "type": "edit",
      "id": "597075674e14470e",
      "item": {
        "type": "paragraph",
        "id": "597075674e14470e",
        "text": "So What If ChatGPT Wrote It?"
      },
      "date": 1679293919275
    },
    {
      "type": "edit",
      "id": "597075674e14470e",
      "item": {
        "type": "paragraph",
        "id": "597075674e14470e",
        "text": "[[So What If ChatGPT Wrote It?]]"
      },
      "date": 1679293925992
    },
    {
      "id": "e033cb2f02898386",
      "type": "remove",
      "removedTo": {
        "page": "So What If ChatGPT Wrote It?"
      },
      "date": 1679293936451
    },
    {
      "id": "a86629ca873a3109",
      "type": "remove",
      "removedTo": {
        "page": "Everett M. Rogers"
      },
      "date": 1679294081216
    },
    {
      "type": "remove",
      "id": "597075674e14470e",
      "date": 1679294140584
    },
    {
      "type": "edit",
      "id": "c75b5197bfeee65f",
      "item": {
        "type": "paragraph",
        "id": "c75b5197bfeee65f",
        "text": "⇒ [[Diffusion of Innovations]] ⇒ [[Everett M. Rogers]] ⇒ [[So What If ChatGPT Wrote It?]]"
      },
      "date": 1679294142445
    },
    {
      "item": {
        "type": "factory",
        "id": "c60da717df508194"
      },
      "id": "c60da717df508194",
      "type": "add",
      "after": "c75b5197bfeee65f",
      "date": 1679295442363
    },
    {
      "type": "edit",
      "id": "c60da717df508194",
      "item": {
        "type": "paragraph",
        "id": "c60da717df508194",
        "text": "⇒ [[Monica Anderson]]"
      },
      "date": 1679295454547
    },
    {
      "type": "edit",
      "id": "c60da717df508194",
      "item": {
        "type": "paragraph",
        "id": "c60da717df508194",
        "text": "⇒ [[Monica Anderson]] ⇒ [[Experimental Epistemology]]"
      },
      "date": 1679295476766
    },
    {
      "item": {
        "type": "factory",
        "id": "8904e2753a6e19a7"
      },
      "id": "8904e2753a6e19a7",
      "type": "add",
      "after": "c60da717df508194",
      "date": 1679295481914
    },
    {
      "type": "edit",
      "id": "8904e2753a6e19a7",
      "item": {
        "type": "paragraph",
        "id": "8904e2753a6e19a7",
        "text": "⇒ [[Journal]]"
      },
      "date": 1679295491163
    },
    {
      "type": "edit",
      "id": "8904e2753a6e19a7",
      "item": {
        "type": "paragraph",
        "id": "8904e2753a6e19a7",
        "text": "⇒ [[Journal]] – We modify the show function to see updates as objects. A page.journal.item has an id, a text and a type."
      },
      "date": 1679299610835
    },
    {
      "id": "6e7adca8a4947ee9",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "6e7adca8a4947ee9",
        "site": "wiki.ralfbarkow.ch",
        "slug": "read-context-of-frame",
        "title": "Read Context of Frame",
        "text": "We send a message to the Frame asking it to send us info about the page surrounding it. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]"
      },
      "after": "8904e2753a6e19a7",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299835820
    },
    {
      "id": "c8963fb39e7da82f",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "window.addEventListener(\"message\", handler)\nlet message = { action:\"sendFrameContext\" }\nwindow.parent.postMessage(message, \"*\")"
      },
      "after": "6e7adca8a4947ee9",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299847889
    },
    {
      "id": "433e0069aa2ef6ee",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "433e0069aa2ef6ee",
        "text": "We stop listening then process the data we got."
      },
      "after": "c8963fb39e7da82f",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299853769
    },
    {
      "id": "00e55c113558b626",
      "type": "add",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    show(page)\n  }\n}"
      },
      "after": "433e0069aa2ef6ee",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299856569
    },
    {
      "id": "ca075d681c953999",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ca075d681c953999",
        "text": "The page we show is the page on the screen which might be a ghost, maybe retrieved from history."
      },
      "after": "00e55c113558b626",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299865191
    },
    {
      "id": "d4ee6431abc012ac",
      "type": "add",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let updates = page.journal.map(item => [item.type, item.id])\n  let html = `<pre>${updates.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "after": "ca075d681c953999",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299869769
    },
    {
      "id": "fe1ab36ecb268415",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "fe1ab36ecb268415",
        "text": "Note: page.journal.[…] – the information stored must support path playback and path visualization."
      },
      "after": "d4ee6431abc012ac",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299875621
    },
    {
      "id": "174138ed693bdfc5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "174138ed693bdfc5",
        "text": "We modify the show function to see updates as objects. A page.journal.item has an id, a text and a type."
      },
      "after": "fe1ab36ecb268415",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299880019
    },
    {
      "id": "e747c2f0cbd1f135",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e747c2f0cbd1f135",
        "text": "Note: item.text seems to be special."
      },
      "after": "174138ed693bdfc5",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299884269
    },
    {
      "id": "4cf8bae39d8dbc68",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4cf8bae39d8dbc68",
        "text": "Updating events: [⇒ Updating [[Events and Causal Dependence]]]"
      },
      "after": "e747c2f0cbd1f135",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299887706
    },
    {
      "id": "777ff878d8f1cc7e",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 200"
      },
      "after": "4cf8bae39d8dbc68",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679299911772
    },
    {
      "type": "fork",
      "date": 1679300146056
    },
    {
      "type": "edit",
      "id": "e747c2f0cbd1f135",
      "item": {
        "type": "paragraph",
        "id": "e747c2f0cbd1f135",
        "text": "Note: item.text seems to be something special."
      },
      "date": 1679300195977
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [item.type, item.id])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679300288869
    },
    {
      "type": "edit",
      "id": "8904e2753a6e19a7",
      "item": {
        "type": "paragraph",
        "id": "8904e2753a6e19a7",
        "text": "⇒ [[Journal]] – We modify the show function to see actions as objects. A page.journal.item has an id, a text and a type."
      },
      "date": 1679300321015
    },
    {
      "type": "edit",
      "id": "4cf8bae39d8dbc68",
      "item": {
        "type": "paragraph",
        "id": "4cf8bae39d8dbc68",
        "text": "Actions/Updating events: [⇒ Updating [[Events and Causal Dependence]]]"
      },
      "date": 1679300360462
    },
    {
      "type": "edit",
      "id": "4cf8bae39d8dbc68",
      "item": {
        "type": "paragraph",
        "id": "4cf8bae39d8dbc68",
        "text": "Actions: [⇒ Updating [[Events and Causal Dependence]]]"
      },
      "date": 1679300389454
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679300455102
    },
    {
      "type": "edit",
      "id": "174138ed693bdfc5",
      "item": {
        "type": "paragraph",
        "id": "174138ed693bdfc5",
        "text": "We modify the show function to see updates as objects. An action, i.e., a page.journal.item has an id, a text and a type."
      },
      "date": 1679300510648
    },
    {
      "type": "edit",
      "id": "174138ed693bdfc5",
      "item": {
        "type": "paragraph",
        "id": "174138ed693bdfc5",
        "text": "We change the show function to see actions as objects. An action, i.e. a page.journal.item, has an ID, a text and a type."
      },
      "date": 1679300541868
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id, item.text ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679300591105
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679300622550
    },
    {
      "type": "edit",
      "id": "8904e2753a6e19a7",
      "item": {
        "type": "paragraph",
        "id": "8904e2753a6e19a7",
        "text": "⇒ [[Journal]] – We change the show function to see actions as objects. An action, i.e. a page.journal.item, has an ID, a text and a type."
      },
      "date": 1679300850980
    },
    {
      "item": {
        "type": "factory",
        "id": "95bed4996f17969c"
      },
      "id": "95bed4996f17969c",
      "type": "add",
      "after": "777ff878d8f1cc7e",
      "date": 1679301074213
    },
    {
      "type": "edit",
      "id": "95bed4996f17969c",
      "item": {
        "type": "paragraph",
        "id": "95bed4996f17969c",
        "text": "[[create]]"
      },
      "date": 1679301079966
    },
    {
      "type": "add",
      "id": "20427e17c844c899",
      "item": {
        "type": "paragraph",
        "id": "20427e17c844c899",
        "text": "[[edit]]"
      },
      "after": "95bed4996f17969c",
      "date": 1679301185554
    },
    {
      "type": "add",
      "id": "462cdc3adc273535",
      "item": {
        "type": "paragraph",
        "id": "462cdc3adc273535",
        "text": "[[add]]"
      },
      "after": "20427e17c844c899",
      "date": 1679301195766
    },
    {
      "type": "add",
      "id": "3205ef2558266210",
      "item": {
        "type": "paragraph",
        "id": "3205ef2558266210",
        "text": "[[remove]]"
      },
      "after": "462cdc3adc273535",
      "date": 1679301247582
    },
    {
      "type": "add",
      "id": "f2eeba8b3454b796",
      "item": {
        "type": "paragraph",
        "id": "f2eeba8b3454b796",
        "text": "[[fork]]"
      },
      "after": "3205ef2558266210",
      "date": 1679301282782
    },
    {
      "type": "edit",
      "id": "95bed4996f17969c",
      "item": {
        "type": "paragraph",
        "id": "95bed4996f17969c",
        "text": "[[create]] ⇒ [[Create Items and Pages]]"
      },
      "date": 1679301394478
    },
    {
      "id": "520191bdcb56afaf",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "520191bdcb56afaf",
        "text": "Many pages start with an empty create action but for bulk generated pages we include most of the page as the item being created, once carefully copied."
      },
      "after": "95bed4996f17969c",
      "attribution": {
        "page": "Create Items and Pages"
      },
      "date": 1679301633360
    },
    {
      "type": "edit",
      "id": "520191bdcb56afaf",
      "item": {
        "type": "paragraph",
        "id": "520191bdcb56afaf",
        "text": "> Many pages start with an empty create action but for bulk generated pages we include most of the page as the item being created, once carefully copied."
      },
      "date": 1679301637820
    },
    {
      "type": "edit",
      "id": "520191bdcb56afaf",
      "item": {
        "type": "markdown",
        "id": "520191bdcb56afaf",
        "text": "> Many pages start with an empty create action but for bulk generated pages we include most of the page as the item being created, once carefully copied."
      },
      "date": 1679301638708
    },
    {
      "type": "edit",
      "id": "8904e2753a6e19a7",
      "item": {
        "type": "paragraph",
        "id": "8904e2753a6e19a7",
        "text": "⇒ [[Journal]] – We change the show function to see actions as [[Object]]s. An action, i.e. a page.journal.item, has an ID, a text and a type."
      },
      "date": 1679301797478
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id, [ item.text ] ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679302028940
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id, [ JSON.stringify(item.text) ] ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679302061182
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id, JSON.stringify(item.text) ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679302077163
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679302086788
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id, JSON.parse(JSON.stringify(item.text)) ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679302128844
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679302224824
    },
    {
      "type": "edit",
      "id": "8904e2753a6e19a7",
      "item": {
        "type": "paragraph",
        "id": "8904e2753a6e19a7",
        "text": "⇒ [[Journal]] – We change the show function to see actions as [[Object]]s. An action, i.e. a page.journal.item, has an ID, a text and a type. >> object outside process inside"
      },
      "date": 1679302349000
    },
    {
      "type": "edit",
      "id": "8904e2753a6e19a7",
      "item": {
        "type": "paragraph",
        "id": "8904e2753a6e19a7",
        "text": "⇒ [[Journal]] – We change the show function to see actions as [[Object]]s. An action, i.e. a page.journal.item, has an ID, a text and a type. >> container object outside process inside"
      },
      "date": 1679302372850
    },
    {
      "item": {
        "type": "factory",
        "id": "1104a866463aca4f"
      },
      "id": "1104a866463aca4f",
      "type": "add",
      "after": "f2eeba8b3454b796",
      "date": 1679318131266
    },
    {
      "type": "edit",
      "id": "1104a866463aca4f",
      "item": {
        "type": "paragraph",
        "id": "1104a866463aca4f",
        "text": "⇒ [[rdom-svg-nodes]]"
      },
      "date": 1679318141046
    },
    {
      "item": {
        "type": "factory",
        "id": "ec7cfe29cb68b0fb"
      },
      "id": "ec7cfe29cb68b0fb",
      "type": "add",
      "after": "1104a866463aca4f",
      "date": 1679318925463
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to I transfer a list into a graph with nodes (the nodes are the list items) and visualize the nodes as a svg path timeline in JavaScript?"
      },
      "date": 1679318927727
    },
    {
      "type": "add",
      "id": "f1e7d3a9f58afddd",
      "item": {
        "type": "paragraph",
        "id": "f1e7d3a9f58afddd",
        "text": "chat.openai: To transfer a list into a graph with nodes and visualize the nodes as an SVG path timeline in JavaScript, you can follow these steps:\n\nConvert the list into a graph structure: First, you need to convert the list into a graph data structure. You can use a library like D3.js or Vis.js to create a graph object and add nodes and edges to it.\nCreate an SVG container: Once you have the graph object, you need to create an SVG container to display the nodes as an SVG path timeline. You can create an SVG container using the SVG element in HTML.\nPosition the nodes: You need to position the nodes in the SVG container based on their order in the list. You can use the position of each node to draw a path connecting them in a timeline.\nDraw the timeline path: Using the position of each node, you can draw a path connecting them in a timeline. You can use the path element in SVG to draw the timeline path.\nHere is an example code snippet that demonstrates how to transfer a list into a graph with nodes and visualize the nodes as an SVG path timeline using D3.js library:"
      },
      "after": "ec7cfe29cb68b0fb",
      "date": 1679318953572
    },
    {
      "item": {
        "type": "factory",
        "id": "74b5de549dd8b0b6"
      },
      "id": "74b5de549dd8b0b6",
      "type": "add",
      "after": "f1e7d3a9f58afddd",
      "date": 1679318988381
    },
    {
      "type": "edit",
      "id": "74b5de549dd8b0b6",
      "item": {
        "type": "code",
        "id": "74b5de549dd8b0b6",
        "text": "// Define the list\nlet list = ['A', 'B', 'C', 'D'];\n\n// Create the graph object\nlet graph = new Graph();\nlist.forEach((item) => {\n  graph.addNode(item);\n});\n\n// Define the SVG container dimensions\nlet width = 800;\nlet height = 400;\n\n// Create the SVG container\nlet svg = d3.select('body')\n  .append('svg')\n  .attr('width', width)\n  .attr('height', height);\n\n// Define the node positions\nlet x = d3.scaleLinear()\n  .domain([0, list.length - 1])\n  .range([50, width - 50]);\n\n// Draw the nodes\nsvg.selectAll\n"
      },
      "date": 1679318990659
    },
    {
      "item": {
        "type": "factory",
        "id": "a0da5fd8f3d0d960"
      },
      "id": "a0da5fd8f3d0d960",
      "type": "add",
      "after": "74b5de549dd8b0b6",
      "date": 1679319158192
    },
    {
      "type": "edit",
      "id": "a0da5fd8f3d0d960",
      "item": {
        "type": "code",
        "id": "a0da5fd8f3d0d960",
        "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>List to Graph with SVG Path Timeline</title>\n    <script src=\"https://d3js.org/d3.v3.min.js\"></script>\n  </head>\n  <body>\n    <svg id=\"graph\" width=\"500\" height=\"200\"></svg>\n    <script>\n      // Sample list data\n      var data = [1, 2, 4, 3, 5];\n\n      // Create a function to convert list data into graph data\n      function createGraph(data) {\n        var nodes = data.map(function(d, i) {\n          return { x: i * 100, y: d * 10 };\n        });\n\n        var links = d3.range(data.length - 1).map(function(i) {\n          return { source: i, target: i + 1 };\n        });\n\n        return { nodes: nodes, links: links };\n      }\n\n      // Convert the list data into graph data\n      var graphData = createGraph(data);\n\n      // Create a line generator function\n      var line = d3.svg.line()\n        .x(function(d) { return d.x; })\n        .y(function(d) { return d.y; })\n        .interpolate(\"basis\");\n\n      // Select the SVG element and append a path element\n      var svg = d3.select(\"#graph\");\n      var path = svg.append(\"path\");\n\n      // Set the \"d\" attribute of the path element to the result of the line generator function\n      path.attr(\"d\", line(graphData.nodes));\n\n      // Style the path element\n      path.style(\"stroke\", \"steelblue\")\n        .style(\"stroke-width\", \"2\")\n        .style(\"fill\", \"none\");\n    </script>\n  </body>\n</html>\n"
      },
      "date": 1679319159996
    },
    {
      "item": {
        "type": "factory",
        "id": "96cfa01e94f27bfa"
      },
      "id": "96cfa01e94f27bfa",
      "type": "add",
      "after": "a0da5fd8f3d0d960",
      "date": 1679319198051
    },
    {
      "id": "96cfa01e94f27bfa",
      "type": "move",
      "order": [
        "c75b5197bfeee65f",
        "c60da717df508194",
        "8904e2753a6e19a7",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "ca075d681c953999",
        "d4ee6431abc012ac",
        "fe1ab36ecb268415",
        "174138ed693bdfc5",
        "e747c2f0cbd1f135",
        "4cf8bae39d8dbc68",
        "777ff878d8f1cc7e",
        "95bed4996f17969c",
        "520191bdcb56afaf",
        "20427e17c844c899",
        "462cdc3adc273535",
        "3205ef2558266210",
        "f2eeba8b3454b796",
        "1104a866463aca4f",
        "ec7cfe29cb68b0fb",
        "f1e7d3a9f58afddd",
        "74b5de549dd8b0b6",
        "96cfa01e94f27bfa",
        "a0da5fd8f3d0d960"
      ],
      "date": 1679319202888
    },
    {
      "type": "edit",
      "id": "96cfa01e94f27bfa",
      "item": {
        "type": "paragraph",
        "id": "96cfa01e94f27bfa",
        "text": "chat.openai:"
      },
      "date": 1679319209107
    },
    {
      "type": "add",
      "id": "d1a03126884faedc",
      "item": {
        "type": "paragraph",
        "id": "d1a03126884faedc",
        "text": "To transfer a list into a graph with nodes and visualize them as an SVG path timeline in JavaScript, you can follow these general steps:\n\nCreate an empty SVG element in your HTML document. This can be done with the <svg> tag.\nDefine the dimensions of the SVG element using the width and height attributes.\nCreate a function that takes your list as input and converts it into a graph with nodes. You can use a JavaScript library such as D3.js to help you create the graph.\nUse the d3.svg.line method to create a line generator function that will convert the graph data into an SVG path. This will create a continuous line connecting the nodes in the graph.\nUse the d3.select method to select the SVG element you created earlier.\nUse the d3.append method to add a path element to the SVG element.\nSet the d attribute of the path element to the result of the line generator function from step 4.\nStyle the path element using CSS or inline SVG styles to create the desired visual effect.\nHere is some sample code to get you started:"
      },
      "after": "96cfa01e94f27bfa",
      "date": 1679319210680
    },
    {
      "type": "edit",
      "id": "96cfa01e94f27bfa",
      "item": {
        "type": "paragraph",
        "id": "96cfa01e94f27bfa",
        "text": "List to Graph with SVG Path Timeline"
      },
      "date": 1679319300758
    },
    {
      "type": "add",
      "id": "5b2915e8deb0bab6",
      "item": {
        "type": "paragraph",
        "id": "5b2915e8deb0bab6",
        "text": "chat.openai:"
      },
      "after": "96cfa01e94f27bfa",
      "date": 1679319302194
    },
    {
      "type": "edit",
      "id": "96cfa01e94f27bfa",
      "item": {
        "type": "paragraph",
        "id": "96cfa01e94f27bfa",
        "text": "[[List to Graph with SVG Path Timeline]]"
      },
      "date": 1679319311242
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to I transfer a list into a [[Graph]] with nodes (the nodes are the list items) and visualize the nodes as a svg path timeline in JavaScript?"
      },
      "date": 1679319411445
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to I transfer the journal into a [[Graph]] with nodes (the nodes are the list items) and visualize the nodes as a svg path timeline in JavaScript?"
      },
      "date": 1679319534077
    },
    {
      "type": "edit",
      "id": "96cfa01e94f27bfa",
      "item": {
        "type": "paragraph",
        "id": "96cfa01e94f27bfa",
        "text": "[[Journal to Graph]]"
      },
      "date": 1679319555173
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to I transfer the [[Journal]] into a [[Graph]] with nodes (the nodes are the list items) and visualize the nodes as a svg path timeline in JavaScript?"
      },
      "date": 1679319576415
    },
    {
      "id": "ec7cfe29cb68b0fb",
      "type": "remove",
      "removedTo": {
        "page": "Journal to Graph"
      },
      "date": 1679319579624
    },
    {
      "id": "777ff878d8f1cc7e",
      "type": "remove",
      "removedTo": {
        "page": "Journal to Graph"
      },
      "date": 1679320271980
    },
    {
      "type": "remove",
      "id": "f1e7d3a9f58afddd",
      "date": 1679320372557
    },
    {
      "type": "remove",
      "id": "74b5de549dd8b0b6",
      "date": 1679320374510
    },
    {
      "type": "remove",
      "id": "5b2915e8deb0bab6",
      "date": 1679320377740
    },
    {
      "type": "remove",
      "id": "d1a03126884faedc",
      "date": 1679320379732
    },
    {
      "type": "remove",
      "id": "a0da5fd8f3d0d960",
      "date": 1679320389990
    },
    {
      "type": "remove",
      "id": "96cfa01e94f27bfa",
      "date": 1679320399385
    },
    {
      "type": "edit",
      "id": "1104a866463aca4f",
      "item": {
        "type": "paragraph",
        "id": "1104a866463aca4f",
        "text": "⇒ [[Journal to Graph]] ⇒  [[rdom-svg-nodes]]"
      },
      "date": 1679320405412
    },
    {
      "id": "777ff878d8f1cc7e",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 200"
      },
      "after": "4cf8bae39d8dbc68",
      "attribution": {
        "page": "Read Context of Frame"
      },
      "date": 1679320451917
    },
    {
      "item": {
        "type": "factory",
        "id": "20cfe9c82b2e7926"
      },
      "id": "20cfe9c82b2e7926",
      "type": "add",
      "after": "1104a866463aca4f",
      "date": 1679330783748
    },
    {
      "type": "edit",
      "id": "20cfe9c82b2e7926",
      "item": {
        "type": "paragraph",
        "id": "20cfe9c82b2e7926",
        "text": "[[Lateral Tags]]"
      },
      "date": 1679330798523
    },
    {
      "type": "add",
      "id": "7334c7ab828918e3",
      "item": {
        "type": "paragraph",
        "id": "7334c7ab828918e3",
        "text": "In the function handler() you already have created a const for page. In that javascript object you will find a title, story, and journal. You'll have to write some code to transform the contents of journal into a graph."
      },
      "after": "1104a866463aca4f",
      "date": 1679332186099
    },
    {
      "type": "edit",
      "id": "20cfe9c82b2e7926",
      "item": {
        "type": "paragraph",
        "id": "20cfe9c82b2e7926",
        "text": "⇒ [[Lateral Tags]]"
      },
      "date": 1679332192917
    },
    {
      "type": "edit",
      "id": "7334c7ab828918e3",
      "item": {
        "type": "paragraph",
        "id": "7334c7ab828918e3",
        "text": "In the function handler() you already have created a const for page. In that javascript object you will find a title, story, and journal. You'll have to write some code to transform the contents of journal into a graph. ([[Eric Dobbs]] via [matrix])"
      },
      "date": 1679332274222
    },
    {
      "type": "edit",
      "id": "7334c7ab828918e3",
      "item": {
        "type": "paragraph",
        "id": "7334c7ab828918e3",
        "text": "In the function handler() you already have created a const for page. In that javascript object you will find a title, story, and journal. You'll have to write some code to transform the contents of journal into a graph. ([[Eric Dobbs]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1679331121243146VriNl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix])"
      },
      "date": 1679332279507
    },
    {
      "type": "add",
      "id": "d3c882ca257e73f8",
      "item": {
        "type": "paragraph",
        "id": "d3c882ca257e73f8",
        "text": "⇒ [[Journal to Graph]] ⇒  [[rdom-svg-nodes]]"
      },
      "after": "c60da717df508194",
      "date": 1679378073151
    },
    {
      "id": "d3c882ca257e73f8",
      "type": "move",
      "order": [
        "d3c882ca257e73f8",
        "c75b5197bfeee65f",
        "c60da717df508194",
        "8904e2753a6e19a7",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "ca075d681c953999",
        "d4ee6431abc012ac",
        "fe1ab36ecb268415",
        "174138ed693bdfc5",
        "e747c2f0cbd1f135",
        "4cf8bae39d8dbc68",
        "777ff878d8f1cc7e",
        "95bed4996f17969c",
        "520191bdcb56afaf",
        "20427e17c844c899",
        "462cdc3adc273535",
        "3205ef2558266210",
        "f2eeba8b3454b796",
        "1104a866463aca4f",
        "7334c7ab828918e3",
        "20cfe9c82b2e7926"
      ],
      "date": 1679378075416
    },
    {
      "type": "add",
      "id": "7e0bef198ef7a9b7",
      "item": {
        "type": "paragraph",
        "id": "7e0bef198ef7a9b7",
        "text": "> transform atom view into consecutive pairs:\ne.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]"
      },
      "after": "d3c882ca257e73f8",
      "date": 1679378179935
    },
    {
      "type": "edit",
      "id": "7e0bef198ef7a9b7",
      "item": {
        "type": "markdown",
        "id": "7e0bef198ef7a9b7",
        "text": "> transform atom view into consecutive pairs:\ne.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]"
      },
      "date": 1679378181784
    }
  ]
}