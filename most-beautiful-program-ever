{
  "title": "Most Beautiful Program Ever",
  "story": [
    {
      "type": "markdown",
      "id": "626bfa3e345997f3",
      "text": "William E. Byrd explores what he considers to be the most beautiful program ever written – a Lisp interpreter written in Lisp – and a few of the many amazing ideas related to this metacircular interpreter."
    },
    {
      "type": "video",
      "id": "4902d2b823544371",
      "text": "YOUTUBE OyfBQmvr2Hc\n\nThe Most Beautiful Program Ever Written, William Byrd"
    },
    {
      "type": "code",
      "id": "fdef10fff93ae20c",
      "text": "# install chez scheme interpreter (on macos)\nbrew install chezscheme\n\n# working directory\nmkdir most-beautiful\ncd most-beautiful\n\n# download the pmatch library\ncurl -O https://raw.githubusercontent.com/webyrd/quines/master/pmatch.scm\n\n# launch scheme\nchez"
    },
    {
      "type": "code",
      "id": "5830007c1599c66d",
      "text": "# lisp interpreter written in scheme\n# several functions defined to support factorial:\n#   numbers\n#   zero?\n#   sub1\n#   *\n#   if\n#   symbols (variable lookup)\n# \"the beautiful part\" starts with symbol lookup\n\n(load \"pmatch.scm\")\n\n(define eval-expr\n  (lambda (expr env)\n    (pmatch expr\n      [,n (guard (number? n))\n          n]\n      [(zero? ,e)\n       (zero? (eval-expr e env))]\n      [(sub1 ,e)\n       (sub1 (eval-expr e env))]\n      [(* ,x ,y)\n       (* (eval-expr x env)\n          (eval-expr y env))]\n      [(if ,t ,c ,a)\n       (if (eval-expr t env)\n           (eval-expr c env)\n           (eval-expr a env))]\n      [,x (guard (symbol? x))\n          (env x)]\n      [(lambda (,x) ,body)\n       (lambda (arg)\n         (eval-expr body (lambda (y)\n                                (if (eq? x y)\n                                    arg\n                                    (env y)))))]\n      [(,rator ,rand)\n       ((eval-expr rator env)\n        (eval-expr rand env))\n       ]\n      )))\n"
    },
    {
      "type": "markdown",
      "id": "11226e8aa1ab728c",
      "text": "See `pmatch` library [https://github.com/webyrd/quines/blob/master/pmatch.scm github] [https://raw.githubusercontent.com/webyrd/quines/master/pmatch.scm raw]"
    },
    {
      "type": "code",
      "id": "18ed3b5fc9ec954e",
      "text": "# initial environment function returns a lookup error\n\n(lambda (_) (error 'lookup \"unbound\"))\n\n# for example:\n\n(eval-expr 'x (lambda (_) (error 'lookup \"unbound\")))\nException in lookup: unbound"
    },
    {
      "type": "code",
      "id": "9d247d590972d178",
      "text": "# (eval-expr ...) simple examples\n\n# (*)\n(eval-expr\n '(* 3 4)\n (lambda (_) (error 'lookup \"unbound\")))\n12\n\n# (sub1)\n(eval-expr\n '(sub1 16)\n (lambda (_) (error 'lookup \"unbound\")))\n15\n\n# (lambda) application\n(eval-expr\n '((lambda (x) (* x x)) 4)\n (lambda (_) (error 'lookup \"unbound\")))\n16"
    },
    {
      "type": "code",
      "id": "d63c32c0c54c5d49",
      "text": "# factorial of 5 implemented in scheme\n# using \"the poor man's y-combinator\"\n\n(((lambda (!)\n    (lambda (n)\n      ((! !) n)))\n  (lambda (!)\n    (lambda (n)\n      (if (zero? n)\n          1\n          (* n ((! !) (sub1 n)))))))\n 5))\n"
    },
    {
      "type": "code",
      "id": "57ba0de6a7416fba",
      "text": "# the big finish:\n# evaluating 5! in our interpreter\n\n(eval-expr\n '(((lambda (!)\n      (lambda (n)\n        ((! !) n)))\n    (lambda (!)\n      (lambda (n)\n        (if (zero? n)\n            1\n            (* n ((! !) (sub1 n)))))))\n   5)\n (lambda (_) (error 'lookup \"unbound\")))\n"
    },
    {
      "type": "pagefold",
      "id": "7ddfa3680ba8b592",
      "text": "."
    },
    {
      "type": "markdown",
      "id": "f3647e9c143e4b99",
      "text": "Alan Kay was also inspired by Church's original lisp interpreter in lisp."
    },
    {
      "type": "markdown",
      "id": "c93f6c3c02ff739e",
      "text": "At about 1hr, Byrd \"takes the equal sign seriously\" to show how a few more abstractions turn the interpreter into a solver – pretty amazing incantations.\n"
    },
    {
      "type": "markdown",
      "id": "9f8f4e2c96faebfb",
      "text": "TODO:\n"
    },
    {
      "type": "markdown",
      "id": "62cb905bd30bbfb3",
      "text": "- [ ] Explore [[Lambda Way]] and [[Lambdatalk]]\n"
    },
    {
      "type": "markdown",
      "id": "a0872d91156ebd37",
      "text": "- [ ] revisit and transcribe some solvers\n"
    },
    {
      "type": "markdown",
      "id": "05bedec760f5713c",
      "text": "- [ ] copy `pmatch.scm` & above examples to assets\n- [ ] change the runbook part to curl assets & run\n"
    },
    {
      "type": "markdown",
      "id": "31ad22c428567d5b",
      "text": "- [ ] find (again) the lisp-like plugin in the federation\n- [ ] maybe recreate Byrd's scheme example to that lisp-like dialect so we can run these in the browser?"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Most Beautiful Program Ever",
        "story": []
      },
      "date": 1529526654920
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "626bfa3e345997f3",
        "text": "William E. Byrd explores what he considers to be the most beautiful program ever written – a Lisp interpreter written in Lisp – and a few of the many amazing ideas related to this metacircular interpreter."
      },
      "id": "626bfa3e345997f3",
      "date": 1529526686920
    },
    {
      "type": "add",
      "item": {
        "type": "video",
        "id": "4902d2b823544371",
        "text": "YOUTUBE OyfBQmvr2Hc\n\nThe Most Beautiful Program Ever Written, William Byrd"
      },
      "after": "626bfa3e345997f3",
      "id": "4902d2b823544371",
      "date": 1529526692740
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "fdef10fff93ae20c",
        "text": "# install chez scheme interpreter (on macos)\nbrew install chezscheme\n\n# working directory\nmkdir most-beautiful\ncd most-beautiful\n\n# download the pmatch library\ncurl -O https://raw.githubusercontent.com/webyrd/quines/master/pmatch.scm\n\n# launch scheme\nchez"
      },
      "after": "4902d2b823544371",
      "id": "fdef10fff93ae20c",
      "date": 1529526701237
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "5830007c1599c66d",
        "text": "# lisp interpreter written in scheme\n# several functions defined to support factorial:\n#   numbers\n#   zero?\n#   sub1\n#   *\n#   if\n#   symbols (variable lookup)\n# \"the beautiful part\" starts with symbol lookup\n\n(load \"pmatch.scm\")\n\n(define eval-expr\n  (lambda (expr env)\n    (pmatch expr\n      [,n (guard (number? n))\n          n]\n      [(zero? ,e)\n       (zero? (eval-expr e env))]\n      [(sub1 ,e)\n       (sub1 (eval-expr e env))]\n      [(* ,x ,y)\n       (* (eval-expr x env)\n          (eval-expr y env))]\n      [(if ,t ,c ,a)\n       (if (eval-expr t env)\n           (eval-expr c env)\n           (eval-expr a env))]\n      [,x (guard (symbol? x))\n          (env x)]\n      [(lambda (,x) ,body)\n       (lambda (arg)\n         (eval-expr body (lambda (y)\n                                (if (eq? x y)\n                                    arg\n                                    (env y)))))]\n      [(,rator ,rand)\n       ((eval-expr rator env)\n        (eval-expr rand env))\n       ]\n      )))\n"
      },
      "after": "fdef10fff93ae20c",
      "id": "5830007c1599c66d",
      "date": 1529526706189
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "11226e8aa1ab728c",
        "text": "See `pmatch` library [https://github.com/webyrd/quines/blob/master/pmatch.scm github] [https://raw.githubusercontent.com/webyrd/quines/master/pmatch.scm raw]"
      },
      "after": "5830007c1599c66d",
      "id": "11226e8aa1ab728c",
      "date": 1529526713966
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "18ed3b5fc9ec954e",
        "text": "# initial environment function returns a lookup error\n\n(lambda (_) (error 'lookup \"unbound\"))\n\n# for example:\n\n(eval-expr 'x (lambda (_) (error 'lookup \"unbound\")))\nException in lookup: unbound"
      },
      "after": "11226e8aa1ab728c",
      "id": "18ed3b5fc9ec954e",
      "date": 1529526717254
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "9d247d590972d178",
        "text": "# (eval-expr ...) simple examples\n\n# (*)\n(eval-expr\n '(* 3 4)\n (lambda (_) (error 'lookup \"unbound\")))\n12\n\n# (sub1)\n(eval-expr\n '(sub1 16)\n (lambda (_) (error 'lookup \"unbound\")))\n15\n\n# (lambda) application\n(eval-expr\n '((lambda (x) (* x x)) 4)\n (lambda (_) (error 'lookup \"unbound\")))\n16"
      },
      "after": "18ed3b5fc9ec954e",
      "id": "9d247d590972d178",
      "date": 1529526723042
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "d63c32c0c54c5d49",
        "text": "# factorial of 5 implemented in scheme\n# using \"the poor man's y-combinator\"\n\n(((lambda (!)\n    (lambda (n)\n      ((! !) n)))\n  (lambda (!)\n    (lambda (n)\n      (if (zero? n)\n          1\n          (* n ((! !) (sub1 n)))))))\n 5))\n"
      },
      "after": "9d247d590972d178",
      "id": "d63c32c0c54c5d49",
      "date": 1529526726748
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "57ba0de6a7416fba",
        "text": "# the big finish:\n# evaluating 5! in our interpreter\n\n(eval-expr\n '(((lambda (!)\n      (lambda (n)\n        ((! !) n)))\n    (lambda (!)\n      (lambda (n)\n        (if (zero? n)\n            1\n            (* n ((! !) (sub1 n)))))))\n   5)\n (lambda (_) (error 'lookup \"unbound\")))\n"
      },
      "after": "d63c32c0c54c5d49",
      "id": "57ba0de6a7416fba",
      "date": 1529526731946
    },
    {
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "7ddfa3680ba8b592",
        "text": "."
      },
      "after": "57ba0de6a7416fba",
      "id": "7ddfa3680ba8b592",
      "date": 1529526742672
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c93f6c3c02ff739e",
        "text": "At about 1hr, Byrd \"takes the equal sign seriously\" to show how a few more abstractions turn the interpreter into a solver – pretty amazing incantations.\n"
      },
      "after": "7ddfa3680ba8b592",
      "id": "c93f6c3c02ff739e",
      "date": 1529526746962
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "9f8f4e2c96faebfb",
        "text": "TODO:\n- [ ] revisit and transcribe some solvers\n"
      },
      "after": "c93f6c3c02ff739e",
      "id": "9f8f4e2c96faebfb",
      "date": 1529526753418
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "05bedec760f5713c",
        "text": "- [ ] copy `pmatch.scm` & above examples to assets\n- [ ] change the runbook part to curl assets & run\n"
      },
      "after": "9f8f4e2c96faebfb",
      "id": "05bedec760f5713c",
      "date": 1529526756851
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "31ad22c428567d5b",
        "text": "- [ ] find (again) the lisp-like plugin in the federation\n- [ ] maybe recreate Byrd's scheme example to that lisp-like dialect so we can run these in the browser?"
      },
      "after": "05bedec760f5713c",
      "id": "31ad22c428567d5b",
      "date": 1529526759894
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "f3647e9c143e4b99",
        "text": "Alan Kay was also inspired by Church's original lisp interpreter in lisp."
      },
      "after": "7ddfa3680ba8b592",
      "id": "f3647e9c143e4b99",
      "date": 1529526764906
    },
    {
      "type": "edit",
      "id": "9f8f4e2c96faebfb",
      "item": {
        "type": "markdown",
        "id": "9f8f4e2c96faebfb",
        "text": "TODO:\n"
      },
      "date": 1529526772104
    },
    {
      "type": "add",
      "id": "62cb905bd30bbfb3",
      "item": {
        "type": "markdown",
        "id": "62cb905bd30bbfb3",
        "text": "- [ ] revisit and transcribe some solvers\n"
      },
      "after": "9f8f4e2c96faebfb",
      "date": 1529526773220
    },
    {
      "type": "edit",
      "id": "62cb905bd30bbfb3",
      "item": {
        "type": "markdown",
        "id": "62cb905bd30bbfb3",
        "text": "- [ ] Explore [[Lambda Way]] and [[Lambdatalk]]\n"
      },
      "date": 1641167342547
    },
    {
      "type": "add",
      "id": "a0872d91156ebd37",
      "item": {
        "type": "markdown",
        "id": "a0872d91156ebd37",
        "text": "- [ ] revisit and transcribe some solvers\n"
      },
      "after": "62cb905bd30bbfb3",
      "date": 1641167343540
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1641653806751
    }
  ]
}