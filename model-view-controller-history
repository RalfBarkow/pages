{
  "title": "Model View Controller History",
  "story": [
    {
      "type": "html",
      "text": "See also [[Model View Controller]], [[Model Model View Controller]], and [[Whatsa Controller Anyway]].",
      "id": "f3ddc61fb21ddc1a8a1f0e8ce04ecc04"
    },
    {
      "type": "html",
      "text": "\nFor such an influential idea the history of MVC architecture is shrouded in obscurity. Although I didn't contribute anything to MVC (other than talking about it in an OOPSLA-88 tutorial), I've been using, studying, teaching, and discussing MVC pretty much since it was invented, and I happen to have encountered several of its important evolutionary steps shortly after their appearance.  I've often thought of writing a paper on the history of MVC, but haven't done that yet.  There's enough Wiki discussion of MVC and uncertainty about its concepts and history that I finally [1/16/01] feel compelled to start capturing here what might go into such a paper.  For now, these are just notes; I plan on elaborating them into something more coherent and useful over the next few weeks.",
      "id": "871364ee8a796a9fca8f9002169ddb54"
    },
    {
      "type": "html",
      "text": "\n[[Mitchell Model]]",
      "id": "05cb185914e0f9f5bd2cb1c3f5772a67"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9d058d951bf3d3915f76075f36fbb2d2"
    },
    {
      "type": "html",
      "text": "<b>MVC in Smalltalk</b>",
      "id": "09ba7d61aeeac2f833188dacb889bdd7"
    },
    {
      "type": "html",
      "text": "\nMVC was invented at Xerox Parc in the 70's, apparently by [[Trygve Reenskaug]]. I believe its first public appearance was in Smalltalk-80. For a long time there was virtually no public information about MVC, even in Smalltalk-80 documentation.  The first significant paper published on MVC was \"A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk -80\", by Glenn Krasner and Stephen Pope, published in the August/September 1988 issue of the <i>[[Journal Of Object Oriented Programming]]</i> (JOOP).",
      "id": "9ce8451e6c1625102e1845a27d0ed028"
    },
    {
      "type": "html",
      "text": "<i>I(?) worked with Glenn at [[Parc Place]]. He, along with others who made the move from PARC to [[Parc Place]], credited [[Trygve Reenskaug]] with MVC. --[[Dave Smith]]</i>",
      "id": "6f616c69583c8633923f80f2ea345627"
    },
    {
      "type": "html",
      "text": "\nMVC is the seminal insight of the whole field of graphical user interfaces.  I believe the MVC work was the first to describe and implement software constructs in terms of their responsibilities.  I also believe that MVC was the first significant use of protocols to define components instead of using concrete implementations -- each controller class had a certain set of messages it had to respond to, as did each view class, but otherwise there were no constraints on what they did and how they did it.",
      "id": "cf81d0e4c798be32552153ef511c3a59"
    },
    {
      "type": "html",
      "text": "\nThe dependency (<b>addDependent:</b>, <b>removeDependent:</b>, etc.) and change broadcast mechanisms (<b>self changed</b> and variations) made their first appearance in support of MVC (and in fact were rarely used outside of MVC).  View classes were expected to register themselves as dependents of their models and respond to change messages, either by entirely redisplaying the model or perhaps by doing a more intelligent selective redisplay.",
      "id": "c0b31881cd72fd9bd25070dd06eba049"
    },
    {
      "type": "html",
      "text": "\nIn the original formulation each view displayed a representation of all or part of one domain object, which could be a composite (and which typically had Model as a superclass, in order to obtain the requisite change notification capabilities).  Although the intent was to support graphical interfaces for applications developed in Smalltalk, the tools of the Smalltalk environment -- browsers, in particular -- were also implemented using the MVC paradigm.  Browsers were a little weird because a model's browser was a Browser object that in essence stood in for the image's classes, methods, class categories, and method protocols presented in the various browser panes.  (Multi-pane browsers were present at least as early as Smalltalk-76, and I think even Smalltalk-72, though they weren't implemented using MVC then.  The multi-pane browser paradigm was itself a powerful contribution, and over the years I have often found it convenient and easy to use it as a quick-and-dirty interface prototype for a wide variety of conceptual domains.)",
      "id": "0f5fbc34461f12941aac510f003f31f9"
    },
    {
      "type": "html",
      "text": "[Need to add description of the Digitalk MVC architecture.]",
      "id": "83ec1c99048dd09facfc7e002b8ffd51"
    },
    {
      "type": "html",
      "text": "\nReflecting on the Smalltalk-80's experience with browsers and other MVC interfaces, developers at [[Parc Place]] Systems (formed by members of PARC's Learning Research Group involved in the original development of Smalltalk, led by Adele Goldberg) redesigned the system tools for their [[Object Works]] generation of Smalltalk products [around 1987 -- find actual date].  The realized that tool and application developers found themselves writing large numbers of text and list view classes, whereas the implementations differed not so much in how they displayed text and lists but rather in the specific details of common themes such as:",
      "id": "418a70e078fa5aeb65a0d764f0d9d5b4"
    },
    {
      "type": "html",
      "text": " what commands appeared on the middle-button (\"yellow\" in Smalltalk-80 and earlier, \"<operate>\" in [[Visual Works]]) menu and the methods implementing them",
      "id": "92d766216b588c9f9954213a5963d735"
    },
    {
      "type": "html",
      "text": " what message to send to the model to get the data they displayed or store a new value (anticipating the [[Aspect Adapters]] of [[Visual Works]])",
      "id": "d3fe7003123ce26923f94b69651885b3"
    },
    {
      "type": "html",
      "text": " ...",
      "id": "e4f4a4b9db6ed67cc6fa7a968d5fe309"
    },
    {
      "type": "html",
      "text": "\nThey developed <i>pluggable views</i> -- generic text and list views whose details were specified in many-argument methods used to create them.  Pluggable views greatly reduced the number of individual view and controller classes needed in the system and in typical applications, because so many interfaces were composed largely or entirely of text and list panes.",
      "id": "ee03aee17adb1f5437ac85f88661b4b4"
    },
    {
      "type": "html",
      "text": "\nIn replacing [[Object Works]] with [[Visual Works]] (circa 1991 -- need exact date) [[Parc Place]] once again redesigned the system tools and underlying MVC classes. Pluggable views disappeared.  In their place were a set of small-grained GUI components familiar to users of contemporary toolkits: checkbox, button, text, field, list, combo box, etc.  Each component was implemented as a tiny MVC interface, with its own view and controller classes.  In a radical break from MVC tradition, the models of these components were implemented as small variable-like \"value models\" each holding the value displayed by a component. [[Value Model]] subclasses included the basic [[Value Holder]] along with variations such as [[Aspect Adaptor]] (which instead of a value held an object and the get and send selectors to send to that object to get or set the value) and [[Buffered Value Holder]] (which would wrap something like an [[Aspect Adaptor]] and hold a temporary value for editing that would get stored through the wrapped object only when a trigger was tripped, for use in coordinating updates through multiple components when the user presses something like an OK or Save button).  The text and list classes were a lot simpler and easier to use than the pluggable ones found in [[Object Works]], while the idea of using flexible generic components to construct interfaces was extended to cover the other kinds of components that had become standard in GUI toolkits.",
      "id": "f0f8e24caa3b535579a5e7cad507e042"
    },
    {
      "type": "html",
      "text": "\nIn [[Visual Works]] the MVC framework is much less apparent to the programmer, who can easily construct interfaces using the system's GUI building tools without thinking about MVC at all.  Even someone proficient in [[Visual Works]] GUI library can take advantage of its more sophisticated component and model classes without thinking much about MVC.  Moreover, since the component models are not domain objects, it isn't necessary -- though it is still possible and occasionally useful -- to manage dependencies on domain objects or include change broadcasts in domain methods.  The GUI architecture pretty much assumes that all changes  are made through the component models, either by user action or by interface code that changes those models directly, which means that the interface implementation (embodied in a subclass of the oddly named [[Application Model]]) can monitor the state of the component models instead of the underlying domain objects.  A classic MVC dependency/change mechanism is used for this, but through a new set of messages that sound higher level and don't reflect the underlying MVC design, such as <b>onChange:send:to:</b> sent to a component model.  Consequently, programmers first encountering MVC in the [[Visual Works]] environment often wonder what the all the fuss is about, if they even notice the MVC at all.",
      "id": "fc5fb73585127988b971bf28990bfba8"
    },
    {
      "type": "html",
      "text": "<b>MVC Variations</b>",
      "id": "e3dc79b71c8629a56b3dd7cd213b15c9"
    },
    {
      "type": "html",
      "text": "<i>Objective-C</i>",
      "id": "10937c3b844ac1a19127ead2c9c21d9b"
    },
    {
      "type": "html",
      "text": "\nThe GUI library Stepstone provided with its [[Objective Cee]] development environment [at least as early as 1987 -- need exact date] modified MVC by combining each view-controller pair in a single class....",
      "id": "5a73c112b25b6abc6bd3c3594dad7678"
    },
    {
      "type": "html",
      "text": "\n[[Object Oriented Programming An Evolutionary Approach]] by [[Brad Cox]] makes extensive use of MVC",
      "id": "add3a4d2857db6081d607a517f853484"
    },
    {
      "type": "html",
      "text": "<i>X Widget Sets</i>",
      "id": "b9a53e436c373c636d9b917fb03f2b8f"
    },
    {
      "type": "html",
      "text": "...",
      "id": "de329cc9de5bebd65bf1f46a949090f3"
    },
    {
      "type": "html",
      "text": "<i>Java</i>",
      "id": "f629020d73bca80fdc5846c370539deb"
    },
    {
      "type": "html",
      "text": "...",
      "id": "de329cc9de5bebd65bf1f46a949090f3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9d058d951bf3d3915f76075f36fbb2d2"
    },
    {
      "type": "html",
      "text": "<i>My understanding is that [[Trygve Reenskaug]] developed MVC collaboratively with PARC in 78/79. You might want to include some text on the [[Seeheim Model]] or PAC ([[Presentation Abstraction Control]]). While slightly after MVC (I think 1983) they seem important</i>",
      "id": "0a548fb4a1a45a8f4c578654340405fe"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9d058d951bf3d3915f76075f36fbb2d2"
    },
    {
      "type": "html",
      "text": "Pluggable views were part of Smalltalk-80 R2.0, which was in 1983 or 1984, long before [[Parc Place]] was formed.  So, pluggable views predate [[Object Works]] by several years. -[[Ralph Johnson]]",
      "id": "8a4a478462cb18be400ddae76b459ac3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9d058d951bf3d3915f76075f36fbb2d2"
    },
    {
      "type": "html",
      "text": "<i>(embodied in a subclass of the oddly named [[Application Model]]?)</i>",
      "id": "4ec30799413b50134bb151876510bdb3"
    },
    {
      "type": "html",
      "text": "\nActually, that is not such an odd name at all - it is merely a recognition, via reification, of an abstraction that had been present in MVC applications since the beginning - and there is a quite a bit of documentation around its reason for existence.  See [[Model Model View Controller]].  --[[Randy Stafford]]",
      "id": "5c0a6e2caf922679df2602c695ac3628"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ModelViewControllerHistory c2.com]",
      "id": "155128ed7cd85a3efccf8236dd683816"
    }
  ],
  "journal": [
    {
      "date": 1419597743000,
      "id": "84aa5d38106d2051fb9b8dcae3261bea",
      "type": "create",
      "item": {
        "title": "Model View Controller History",
        "story": [
          {
            "type": "html",
            "text": "See also [[Model View Controller]], [[Model Model View Controller]], and [[Whatsa Controller Anyway]].",
            "id": "f3ddc61fb21ddc1a8a1f0e8ce04ecc04"
          },
          {
            "type": "html",
            "text": "\nFor such an influential idea the history of MVC architecture is shrouded in obscurity. Although I didn't contribute anything to MVC (other than talking about it in an OOPSLA-88 tutorial), I've been using, studying, teaching, and discussing MVC pretty much since it was invented, and I happen to have encountered several of its important evolutionary steps shortly after their appearance.  I've often thought of writing a paper on the history of MVC, but haven't done that yet.  There's enough Wiki discussion of MVC and uncertainty about its concepts and history that I finally [1/16/01] feel compelled to start capturing here what might go into such a paper.  For now, these are just notes; I plan on elaborating them into something more coherent and useful over the next few weeks.",
            "id": "871364ee8a796a9fca8f9002169ddb54"
          },
          {
            "type": "html",
            "text": "\n[[Mitchell Model]]",
            "id": "05cb185914e0f9f5bd2cb1c3f5772a67"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9d058d951bf3d3915f76075f36fbb2d2"
          },
          {
            "type": "html",
            "text": "<b>MVC in Smalltalk</b>",
            "id": "09ba7d61aeeac2f833188dacb889bdd7"
          },
          {
            "type": "html",
            "text": "\nMVC was invented at Xerox Parc in the 70's, apparently by [[Trygve Reenskaug]]. I believe its first public appearance was in Smalltalk-80. For a long time there was virtually no public information about MVC, even in Smalltalk-80 documentation.  The first significant paper published on MVC was \"A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk -80\", by Glenn Krasner and Stephen Pope, published in the August/September 1988 issue of the <i>[[Journal Of Object Oriented Programming]]</i> (JOOP).",
            "id": "9ce8451e6c1625102e1845a27d0ed028"
          },
          {
            "type": "html",
            "text": "<i>I(?) worked with Glenn at [[Parc Place]]. He, along with others who made the move from PARC to [[Parc Place]], credited [[Trygve Reenskaug]] with MVC. --[[Dave Smith]]</i>",
            "id": "6f616c69583c8633923f80f2ea345627"
          },
          {
            "type": "html",
            "text": "\nMVC is the seminal insight of the whole field of graphical user interfaces.  I believe the MVC work was the first to describe and implement software constructs in terms of their responsibilities.  I also believe that MVC was the first significant use of protocols to define components instead of using concrete implementations -- each controller class had a certain set of messages it had to respond to, as did each view class, but otherwise there were no constraints on what they did and how they did it.",
            "id": "cf81d0e4c798be32552153ef511c3a59"
          },
          {
            "type": "html",
            "text": "\nThe dependency (<b>addDependent:</b>, <b>removeDependent:</b>, etc.) and change broadcast mechanisms (<b>self changed</b> and variations) made their first appearance in support of MVC (and in fact were rarely used outside of MVC).  View classes were expected to register themselves as dependents of their models and respond to change messages, either by entirely redisplaying the model or perhaps by doing a more intelligent selective redisplay.",
            "id": "c0b31881cd72fd9bd25070dd06eba049"
          },
          {
            "type": "html",
            "text": "\nIn the original formulation each view displayed a representation of all or part of one domain object, which could be a composite (and which typically had Model as a superclass, in order to obtain the requisite change notification capabilities).  Although the intent was to support graphical interfaces for applications developed in Smalltalk, the tools of the Smalltalk environment -- browsers, in particular -- were also implemented using the MVC paradigm.  Browsers were a little weird because a model's browser was a Browser object that in essence stood in for the image's classes, methods, class categories, and method protocols presented in the various browser panes.  (Multi-pane browsers were present at least as early as Smalltalk-76, and I think even Smalltalk-72, though they weren't implemented using MVC then.  The multi-pane browser paradigm was itself a powerful contribution, and over the years I have often found it convenient and easy to use it as a quick-and-dirty interface prototype for a wide variety of conceptual domains.)",
            "id": "0f5fbc34461f12941aac510f003f31f9"
          },
          {
            "type": "html",
            "text": "[Need to add description of the Digitalk MVC architecture.]",
            "id": "83ec1c99048dd09facfc7e002b8ffd51"
          },
          {
            "type": "html",
            "text": "\nReflecting on the Smalltalk-80's experience with browsers and other MVC interfaces, developers at [[Parc Place]] Systems (formed by members of PARC's Learning Research Group involved in the original development of Smalltalk, led by Adele Goldberg) redesigned the system tools for their [[Object Works]] generation of Smalltalk products [around 1987 -- find actual date].  The realized that tool and application developers found themselves writing large numbers of text and list view classes, whereas the implementations differed not so much in how they displayed text and lists but rather in the specific details of common themes such as:",
            "id": "418a70e078fa5aeb65a0d764f0d9d5b4"
          },
          {
            "type": "html",
            "text": " what commands appeared on the middle-button (\"yellow\" in Smalltalk-80 and earlier, \"<operate>\" in [[Visual Works]]) menu and the methods implementing them",
            "id": "92d766216b588c9f9954213a5963d735"
          },
          {
            "type": "html",
            "text": " what message to send to the model to get the data they displayed or store a new value (anticipating the [[Aspect Adapters]] of [[Visual Works]])",
            "id": "d3fe7003123ce26923f94b69651885b3"
          },
          {
            "type": "html",
            "text": " ...",
            "id": "e4f4a4b9db6ed67cc6fa7a968d5fe309"
          },
          {
            "type": "html",
            "text": "\nThey developed <i>pluggable views</i> -- generic text and list views whose details were specified in many-argument methods used to create them.  Pluggable views greatly reduced the number of individual view and controller classes needed in the system and in typical applications, because so many interfaces were composed largely or entirely of text and list panes.",
            "id": "ee03aee17adb1f5437ac85f88661b4b4"
          },
          {
            "type": "html",
            "text": "\nIn replacing [[Object Works]] with [[Visual Works]] (circa 1991 -- need exact date) [[Parc Place]] once again redesigned the system tools and underlying MVC classes. Pluggable views disappeared.  In their place were a set of small-grained GUI components familiar to users of contemporary toolkits: checkbox, button, text, field, list, combo box, etc.  Each component was implemented as a tiny MVC interface, with its own view and controller classes.  In a radical break from MVC tradition, the models of these components were implemented as small variable-like \"value models\" each holding the value displayed by a component. [[Value Model]] subclasses included the basic [[Value Holder]] along with variations such as [[Aspect Adaptor]] (which instead of a value held an object and the get and send selectors to send to that object to get or set the value) and [[Buffered Value Holder]] (which would wrap something like an [[Aspect Adaptor]] and hold a temporary value for editing that would get stored through the wrapped object only when a trigger was tripped, for use in coordinating updates through multiple components when the user presses something like an OK or Save button).  The text and list classes were a lot simpler and easier to use than the pluggable ones found in [[Object Works]], while the idea of using flexible generic components to construct interfaces was extended to cover the other kinds of components that had become standard in GUI toolkits.",
            "id": "f0f8e24caa3b535579a5e7cad507e042"
          },
          {
            "type": "html",
            "text": "\nIn [[Visual Works]] the MVC framework is much less apparent to the programmer, who can easily construct interfaces using the system's GUI building tools without thinking about MVC at all.  Even someone proficient in [[Visual Works]] GUI library can take advantage of its more sophisticated component and model classes without thinking much about MVC.  Moreover, since the component models are not domain objects, it isn't necessary -- though it is still possible and occasionally useful -- to manage dependencies on domain objects or include change broadcasts in domain methods.  The GUI architecture pretty much assumes that all changes  are made through the component models, either by user action or by interface code that changes those models directly, which means that the interface implementation (embodied in a subclass of the oddly named [[Application Model]]) can monitor the state of the component models instead of the underlying domain objects.  A classic MVC dependency/change mechanism is used for this, but through a new set of messages that sound higher level and don't reflect the underlying MVC design, such as <b>onChange:send:to:</b> sent to a component model.  Consequently, programmers first encountering MVC in the [[Visual Works]] environment often wonder what the all the fuss is about, if they even notice the MVC at all.",
            "id": "fc5fb73585127988b971bf28990bfba8"
          },
          {
            "type": "html",
            "text": "<b>MVC Variations</b>",
            "id": "e3dc79b71c8629a56b3dd7cd213b15c9"
          },
          {
            "type": "html",
            "text": "<i>Objective-C</i>",
            "id": "10937c3b844ac1a19127ead2c9c21d9b"
          },
          {
            "type": "html",
            "text": "\nThe GUI library Stepstone provided with its [[Objective Cee]] development environment [at least as early as 1987 -- need exact date] modified MVC by combining each view-controller pair in a single class....",
            "id": "5a73c112b25b6abc6bd3c3594dad7678"
          },
          {
            "type": "html",
            "text": "\n[[Object Oriented Programming An Evolutionary Approach]] by [[Brad Cox]] makes extensive use of MVC",
            "id": "add3a4d2857db6081d607a517f853484"
          },
          {
            "type": "html",
            "text": "<i>X Widget Sets</i>",
            "id": "b9a53e436c373c636d9b917fb03f2b8f"
          },
          {
            "type": "html",
            "text": "...",
            "id": "de329cc9de5bebd65bf1f46a949090f3"
          },
          {
            "type": "html",
            "text": "<i>Java</i>",
            "id": "f629020d73bca80fdc5846c370539deb"
          },
          {
            "type": "html",
            "text": "...",
            "id": "de329cc9de5bebd65bf1f46a949090f3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9d058d951bf3d3915f76075f36fbb2d2"
          },
          {
            "type": "html",
            "text": "<i>My understanding is that [[Trygve Reenskaug]] developed MVC collaboratively with PARC in 78/79. You might want to include some text on the [[Seeheim Model]] or PAC ([[Presentation Abstraction Control]]). While slightly after MVC (I think 1983) they seem important</i>",
            "id": "0a548fb4a1a45a8f4c578654340405fe"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9d058d951bf3d3915f76075f36fbb2d2"
          },
          {
            "type": "html",
            "text": "Pluggable views were part of Smalltalk-80 R2.0, which was in 1983 or 1984, long before [[Parc Place]] was formed.  So, pluggable views predate [[Object Works]] by several years. -[[Ralph Johnson]]",
            "id": "8a4a478462cb18be400ddae76b459ac3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9d058d951bf3d3915f76075f36fbb2d2"
          },
          {
            "type": "html",
            "text": "<i>(embodied in a subclass of the oddly named [[Application Model]]?)</i>",
            "id": "4ec30799413b50134bb151876510bdb3"
          },
          {
            "type": "html",
            "text": "\nActually, that is not such an odd name at all - it is merely a recognition, via reification, of an abstraction that had been present in MVC applications since the beginning - and there is a quite a bit of documentation around its reason for existence.  See [[Model Model View Controller]].  --[[Randy Stafford]]",
            "id": "5c0a6e2caf922679df2602c695ac3628"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ModelViewControllerHistory c2.com]",
            "id": "155128ed7cd85a3efccf8236dd683816"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1655985454527
    }
  ]
}