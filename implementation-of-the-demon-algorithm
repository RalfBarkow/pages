{
  "title": "Implementation of the DEMON Algorithm",
  "story": [
    {
      "type": "reference",
      "id": "d9f49f2a03779e85",
      "site": "wiki.ralfbarkow.ch",
      "slug": "ego-minus-ego-network",
      "title": "Ego minus Ego Network",
      "text": "The ego network in which the ego node has been removed, together with all its attached edges."
    },
    {
      "type": "code",
      "id": "949fa042788fdbe2",
      "text": "// Function to extract ego network minus ego node\nfunction egoMinusEgo(node, graph) {\n    const egoNetwork = graph.neighbors(node);\n    egoNetwork.delete(node); // Remove ego node\n    return egoNetwork;\n}"
    },
    {
      "type": "paragraph",
      "id": "da4f8b5eccfefdcf",
      "text": "This implementation defines functions to extract the ego network minus the ego node, apply the Label Propagation algorithm for community detection, and then implements the DEMON algorithm according to the provided pseudo code. We may need to adjust the implementation based on our specific graph data structure and the community detection algorithm we want to use."
    },
    {
      "type": "code",
      "id": "7db11def5cb60b2b",
      "text": "// Function to apply Label Propagation algorithm for community detection\nfunction labelPropagation(graph) {\n    // Implementation of Label Propagation algorithm\n    // This function returns a mapping of nodes to their community labels\n    // You can replace this with your own implementation of Label Propagation\n\n    // Placeholder implementation\n    const communityLabels = new Map();\n    graph.nodes.forEach(node => {\n        communityLabels.set(node, Math.floor(Math.random() * 10)); // Assign random community label\n    });\n    return communityLabels;\n}"
    },
    {
      "type": "code",
      "id": "d838fb6fd8a43e75",
      "text": "// Function to discover communities using DEMON algorithm\nfunction DEMON(graph) {\n    const communities = new Set();\n\n    // External loop: cycle over each individual node\n    graph.nodes.forEach(node => {\n        // Step 1: Compute ego network minus ego node\n        const egoNetwork = egoMinusEgo(node, graph);\n\n        // Step 2: Compute communities in ego network using Label Propagation\n        const communityLabels = labelPropagation(egoNetwork);\n\n        // Add discovered communities to the set\n        communityLabels.forEach(label => communities.add(label));\n    });\n\n    return communities;\n}"
    },
    {
      "type": "code",
      "id": "390ea6faba3d15e3",
      "text": "// Example usage:\n// Assuming you have a graph object called 'graph' with nodes and edges\nconst discoveredCommunities = DEMON(graph);\nconsole.log(\"Discovered Communities:\", discoveredCommunities);"
    },
    {
      "type": "pagefold",
      "id": "46c47ba73c9feace",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "7eb52230692290b1",
      "text": "COSCIA, Michele, ROSSETTI, Giulio, GIANNOTTI, Fosca and PEDRESCHI, Dino, 2012. DEMON: a local-first discovery method for overlapping communities. In: Proceedings of the 18th ACM SIGKDD international conference on Knowledge discovery and data mining. Beijing China: ACM. 12 August 2012. p. 615–623. ISBN 978-1-4503-1462-6. DOI 10.1145/2339530.2339630. [https://arxiv.org/pdf/1206.0629.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "e0270b871803961a",
      "text": "⇒ [[Implementation of the Label Propagation (LP) algorithm]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Implementation of the DEMON Algorithm",
        "story": []
      },
      "date": 1711036291067
    },
    {
      "item": {
        "type": "reference",
        "id": "d9f49f2a03779e85",
        "site": "wiki.ralfbarkow.ch",
        "slug": "ego-minus-ego-network",
        "title": "Ego minus Ego Network",
        "text": "The ego network in which the ego node has been removed, together with all its attached edges."
      },
      "id": "d9f49f2a03779e85",
      "type": "add",
      "date": 1711036297912
    },
    {
      "item": {
        "type": "code",
        "id": "949fa042788fdbe2",
        "text": "// Function to extract ego network minus ego node\nfunction egoMinusEgo(node, graph) {\n    const egoNetwork = graph.neighbors(node);\n    egoNetwork.delete(node); // Remove ego node\n    return egoNetwork;\n}"
      },
      "id": "949fa042788fdbe2",
      "type": "add",
      "after": "d9f49f2a03779e85",
      "date": 1711036301390
    },
    {
      "type": "edit",
      "id": "949fa042788fdbe2",
      "item": {
        "type": "code",
        "id": "949fa042788fdbe2",
        "text": "// Function to extract ego network minus ego node\nfunction egoMinusEgo(node, graph) {\n    const egoNetwork = graph.neighbors(node);\n    egoNetwork.delete(node); // Remove ego node\n    return egoNetwork;\n}"
      },
      "date": 1711036303497
    },
    {
      "item": {
        "type": "factory",
        "id": "da4f8b5eccfefdcf"
      },
      "id": "da4f8b5eccfefdcf",
      "type": "add",
      "after": "949fa042788fdbe2",
      "date": 1711036305949
    },
    {
      "item": {
        "type": "code",
        "id": "7db11def5cb60b2b",
        "text": "// Function to apply Label Propagation algorithm for community detection\nfunction labelPropagation(graph) {\n    // Implementation of Label Propagation algorithm\n    // This function returns a mapping of nodes to their community labels\n    // You can replace this with your own implementation of Label Propagation\n\n    // Placeholder implementation\n    const communityLabels = new Map();\n    graph.nodes.forEach(node => {\n        communityLabels.set(node, Math.floor(Math.random() * 10)); // Assign random community label\n    });\n    return communityLabels;\n}"
      },
      "id": "7db11def5cb60b2b",
      "type": "add",
      "after": "da4f8b5eccfefdcf",
      "date": 1711036313642
    },
    {
      "type": "edit",
      "id": "7db11def5cb60b2b",
      "item": {
        "type": "code",
        "id": "7db11def5cb60b2b",
        "text": "// Function to apply Label Propagation algorithm for community detection\nfunction labelPropagation(graph) {\n    // Implementation of Label Propagation algorithm\n    // This function returns a mapping of nodes to their community labels\n    // You can replace this with your own implementation of Label Propagation\n\n    // Placeholder implementation\n    const communityLabels = new Map();\n    graph.nodes.forEach(node => {\n        communityLabels.set(node, Math.floor(Math.random() * 10)); // Assign random community label\n    });\n    return communityLabels;\n}"
      },
      "date": 1711036315807
    },
    {
      "item": {
        "type": "code",
        "id": "d838fb6fd8a43e75",
        "text": "// Function to discover communities using DEMON algorithm\nfunction DEMON(graph) {\n    const communities = new Set();\n\n    // External loop: cycle over each individual node\n    graph.nodes.forEach(node => {\n        // Step 1: Compute ego network minus ego node\n        const egoNetwork = egoMinusEgo(node, graph);\n\n        // Step 2: Compute communities in ego network using Label Propagation\n        const communityLabels = labelPropagation(egoNetwork);\n\n        // Add discovered communities to the set\n        communityLabels.forEach(label => communities.add(label));\n    });\n\n    return communities;\n}"
      },
      "id": "d838fb6fd8a43e75",
      "type": "add",
      "after": "7db11def5cb60b2b",
      "date": 1711036318160
    },
    {
      "type": "edit",
      "id": "d838fb6fd8a43e75",
      "item": {
        "type": "code",
        "id": "d838fb6fd8a43e75",
        "text": "// Function to discover communities using DEMON algorithm\nfunction DEMON(graph) {\n    const communities = new Set();\n\n    // External loop: cycle over each individual node\n    graph.nodes.forEach(node => {\n        // Step 1: Compute ego network minus ego node\n        const egoNetwork = egoMinusEgo(node, graph);\n\n        // Step 2: Compute communities in ego network using Label Propagation\n        const communityLabels = labelPropagation(egoNetwork);\n\n        // Add discovered communities to the set\n        communityLabels.forEach(label => communities.add(label));\n    });\n\n    return communities;\n}"
      },
      "date": 1711036329835
    },
    {
      "id": "6f59ae588197fb05",
      "type": "move",
      "order": [
        "d9f49f2a03779e85",
        "949fa042788fdbe2",
        "da4f8b5eccfefdcf",
        "7db11def5cb60b2b",
        "6f59ae588197fb05",
        "d838fb6fd8a43e75"
      ],
      "date": 1711036333654,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "item": {
        "type": "factory",
        "id": "6f59ae588197fb05"
      },
      "id": "6f59ae588197fb05",
      "type": "add",
      "after": "d838fb6fd8a43e75",
      "date": 1711036331869
    },
    {
      "type": "fork",
      "date": 1711036349652
    },
    {
      "type": "fork",
      "date": 1711036383484
    },
    {
      "type": "remove",
      "date": 1711036465134
    },
    {
      "id": "6f59ae588197fb05",
      "type": "move",
      "order": [
        "d9f49f2a03779e85",
        "949fa042788fdbe2",
        "da4f8b5eccfefdcf",
        "7db11def5cb60b2b",
        "6f59ae588197fb05",
        "d838fb6fd8a43e75"
      ],
      "date": 1711036471371
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1711036563051
    },
    {
      "item": {
        "type": "factory",
        "id": "390ea6faba3d15e3"
      },
      "id": "390ea6faba3d15e3",
      "type": "add",
      "after": "d838fb6fd8a43e75",
      "date": 1711036645216
    },
    {
      "type": "edit",
      "id": "390ea6faba3d15e3",
      "item": {
        "type": "code",
        "id": "390ea6faba3d15e3",
        "text": "// Example usage:\n// Assuming you have a graph object called 'graph' with nodes and edges\nconst discoveredCommunities = DEMON(graph);\nconsole.log(\"Discovered Communities:\", discoveredCommunities);"
      },
      "date": 1711036647557
    },
    {
      "type": "edit",
      "id": "da4f8b5eccfefdcf",
      "item": {
        "type": "paragraph",
        "id": "da4f8b5eccfefdcf",
        "text": "This implementation defines functions to extract the ego network minus the ego node, apply the Label Propagation algorithm for community detection, and then implements the DEMON algorithm according to the provided pseudo code. You may need to adjust the implementation based on your specific graph data structure and the community detection algorithm you want to use."
      },
      "date": 1711036685613
    },
    {
      "type": "edit",
      "id": "da4f8b5eccfefdcf",
      "item": {
        "type": "paragraph",
        "id": "da4f8b5eccfefdcf",
        "text": "This implementation defines functions to extract the ego network minus the ego node, apply the Label Propagation algorithm for community detection, and then implements the DEMON algorithm according to the provided pseudo code. We may need to adjust the implementation based on your specific graph data structure and the community detection algorithm you want to use."
      },
      "date": 1711036708712
    },
    {
      "type": "edit",
      "id": "da4f8b5eccfefdcf",
      "item": {
        "type": "paragraph",
        "id": "da4f8b5eccfefdcf",
        "text": "This implementation defines functions to extract the ego network minus the ego node, apply the Label Propagation algorithm for community detection, and then implements the DEMON algorithm according to the provided pseudo code. We may need to adjust the implementation based on our specific graph data structure and the community detection algorithm you want to use."
      },
      "date": 1711036730856
    },
    {
      "type": "edit",
      "id": "da4f8b5eccfefdcf",
      "item": {
        "type": "paragraph",
        "id": "da4f8b5eccfefdcf",
        "text": "This implementation defines functions to extract the ego network minus the ego node, apply the Label Propagation algorithm for community detection, and then implements the DEMON algorithm according to the provided pseudo code. We may need to adjust the implementation based on our specific graph data structure and the community detection algorithm we want to use."
      },
      "date": 1711036738230
    },
    {
      "id": "46c47ba73c9feace",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "46c47ba73c9feace",
        "text": "~"
      },
      "after": "390ea6faba3d15e3",
      "attribution": {
        "page": "Ego minus Ego Network"
      },
      "date": 1711036752174
    },
    {
      "id": "7eb52230692290b1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7eb52230692290b1",
        "text": "COSCIA, Michele, ROSSETTI, Giulio, GIANNOTTI, Fosca and PEDRESCHI, Dino, 2012. DEMON: a local-first discovery method for overlapping communities. In: Proceedings of the 18th ACM SIGKDD international conference on Knowledge discovery and data mining. Beijing China: ACM. 12 August 2012. p. 615–623. ISBN 978-1-4503-1462-6. DOI 10.1145/2339530.2339630. [https://arxiv.org/pdf/1206.0629.pdf pdf]"
      },
      "after": "46c47ba73c9feace",
      "attribution": {
        "page": "Ego minus Ego Network"
      },
      "date": 1711036761822
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711036811061
    },
    {
      "type": "remove",
      "id": "6f59ae588197fb05",
      "date": 1711036860587
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1711036952489
    },
    {
      "item": {
        "type": "factory",
        "id": "e0270b871803961a"
      },
      "id": "e0270b871803961a",
      "type": "add",
      "after": "7eb52230692290b1",
      "date": 1711038018020
    },
    {
      "type": "edit",
      "id": "e0270b871803961a",
      "item": {
        "type": "paragraph",
        "id": "e0270b871803961a",
        "text": "⇒ [[Implementation of the Label Propagation (LP) algorithm]]"
      },
      "date": 1711038028664
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711038433191
    }
  ]
}