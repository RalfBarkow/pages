{
  "title": "Verification",
  "story": [
    {
      "type": "paragraph",
      "id": "0a078f5526c9954f",
      "text": "CARLSSON, Henrik, SVENSSON, Bo, DANIELSSON, Fredrik and LENNARTSON, Bengt, 2012. Methods for Reliable Simulation-Based PLC Code Verification. IEEE Transactions on Industrial Informatics. May 2012. Vol. 8, no. 2, p. 267–278. DOI 10.1109/TII.2011.2182653. "
    },
    {
      "type": "markdown",
      "id": "a950ae44fe4a6480",
      "text": "> Simulation-based programmable logic controller ([[PLC]]) code verification is a part of [[virtual commissioning]], where the control code is verified against a virtual prototype of an application. With today’s general [[OPC]] interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general [[IEC 61131-3]]-based software solution, and a new OPC standard solution.\n"
    },
    {
      "type": "pagefold",
      "id": "eaa87c4495137c3e",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "eaf1c25a09e97e4e",
      "text": "Formal Verification of Subsets of the Rust Language | SkillsCast, [no date]. Formal Verification of Subsets of the Rust Language | SkillsCast. Online. [Accessed 25 November 2021]. Available from: https://skillsmatter.com/skillscasts/17053-formal-verification-of-subsets-of-the-rust-languageRust London User Group community cast. Bas Spitters: In this presentation, Bas will give a very brief introduction to interactive formal verification of pro...\n\nJEFFREY, Alan, 2012. LTL types FRP: linear-time temporal logic propositions as types, proofs as functional reactive programs. In: Proceedings of the sixth workshop on Programming languages meets program verification - PLPV ’12. Online. Philadelphia, Pennsylvania, USA: ACM Press. 2012. p. 49. [Accessed 21 March 2021]. ISBN 978-1-4503-1125-0. DOI 10.1145/2103776.2103783. \n\nJELTSCH, Wolfgang, 2013. Temporal logic with “Until”, functional reactive programming with processes, and concrete process categories. In: Proceedings of the 7th workshop on Programming languages meets program verification - PLPV ’13. Online. Rome, Italy: ACM Press. 2013. p. 69. [Accessed 21 March 2021]. ISBN 978-1-4503-1860-0. DOI 10.1145/2428116.2428128. \n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Verification",
        "story": []
      },
      "date": 1659516611012
    },
    {
      "item": {
        "type": "factory",
        "id": "0a078f5526c9954f"
      },
      "id": "0a078f5526c9954f",
      "type": "add",
      "date": 1659516612543
    },
    {
      "type": "edit",
      "id": "0a078f5526c9954f",
      "item": {
        "type": "paragraph",
        "id": "0a078f5526c9954f",
        "text": "\nCARLSSON, Henrik, SVENSSON, Bo, DANIELSSON, Fredrik and LENNARTSON, Bengt, 2012. Methods for Reliable Simulation-Based PLC Code Verification. IEEE Transactions on Industrial Informatics. May 2012. Vol. 8, no. 2, p. 267–278. DOI 10.1109/TII.2011.2182653. Simulation-based programmable logic controller (PLC) code verification is a part of virtual commissioning, where the control code is verified against a virtual prototype of an application. With today’s general OPC interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general IEC 61131-3-based software solution, and a new OPC standard solution.\n\nFormal Verification of Subsets of the Rust Language | SkillsCast, [no date]. Formal Verification of Subsets of the Rust Language | SkillsCast. Online. [Accessed 25 November 2021]. Available from: https://skillsmatter.com/skillscasts/17053-formal-verification-of-subsets-of-the-rust-languageRust London User Group community cast. Bas Spitters: In this presentation, Bas will give a very brief introduction to interactive formal verification of pro...\n\nJEFFREY, Alan, 2012. LTL types FRP: linear-time temporal logic propositions as types, proofs as functional reactive programs. In: Proceedings of the sixth workshop on Programming languages meets program verification - PLPV ’12. Online. Philadelphia, Pennsylvania, USA: ACM Press. 2012. p. 49. [Accessed 21 March 2021]. ISBN 978-1-4503-1125-0. DOI 10.1145/2103776.2103783. \n\nJELTSCH, Wolfgang, 2013. Temporal logic with “Until”, functional reactive programming with processes, and concrete process categories. In: Proceedings of the 7th workshop on Programming languages meets program verification - PLPV ’13. Online. Rome, Italy: ACM Press. 2013. p. 69. [Accessed 21 March 2021]. ISBN 978-1-4503-1860-0. DOI 10.1145/2428116.2428128. \n"
      },
      "date": 1659516614261
    },
    {
      "type": "edit",
      "id": "0a078f5526c9954f",
      "item": {
        "type": "paragraph",
        "id": "0a078f5526c9954f",
        "text": "CARLSSON, Henrik, SVENSSON, Bo, DANIELSSON, Fredrik and LENNARTSON, Bengt, 2012. Methods for Reliable Simulation-Based PLC Code Verification. IEEE Transactions on Industrial Informatics. May 2012. Vol. 8, no. 2, p. 267–278. DOI 10.1109/TII.2011.2182653. "
      },
      "date": 1659516626012
    },
    {
      "type": "add",
      "id": "a950ae44fe4a6480",
      "item": {
        "type": "paragraph",
        "id": "a950ae44fe4a6480",
        "text": "> Simulation-based programmable logic controller (PLC) code verification is a part of virtual commissioning, where the control code is verified against a virtual prototype of an application. With today’s general OPC interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general IEC 61131-3-based software solution, and a new OPC standard solution.\n\nFormal Verification of Subsets of the Rust Language | SkillsCast, [no date]. Formal Verification of Subsets of the Rust Language | SkillsCast. Online. [Accessed 25 November 2021]. Available from: https://skillsmatter.com/skillscasts/17053-formal-verification-of-subsets-of-the-rust-languageRust London User Group community cast. Bas Spitters: In this presentation, Bas will give a very brief introduction to interactive formal verification of pro...\n\nJEFFREY, Alan, 2012. LTL types FRP: linear-time temporal logic propositions as types, proofs as functional reactive programs. In: Proceedings of the sixth workshop on Programming languages meets program verification - PLPV ’12. Online. Philadelphia, Pennsylvania, USA: ACM Press. 2012. p. 49. [Accessed 21 March 2021]. ISBN 978-1-4503-1125-0. DOI 10.1145/2103776.2103783. \n\nJELTSCH, Wolfgang, 2013. Temporal logic with “Until”, functional reactive programming with processes, and concrete process categories. In: Proceedings of the 7th workshop on Programming languages meets program verification - PLPV ’13. Online. Rome, Italy: ACM Press. 2013. p. 69. [Accessed 21 March 2021]. ISBN 978-1-4503-1860-0. DOI 10.1145/2428116.2428128. \n"
      },
      "after": "0a078f5526c9954f",
      "date": 1659516627259
    },
    {
      "type": "edit",
      "id": "a950ae44fe4a6480",
      "item": {
        "type": "markdown",
        "id": "a950ae44fe4a6480",
        "text": "> Simulation-based programmable logic controller (PLC) code verification is a part of virtual commissioning, where the control code is verified against a virtual prototype of an application. With today’s general OPC interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general IEC 61131-3-based software solution, and a new OPC standard solution.\n\nFormal Verification of Subsets of the Rust Language | SkillsCast, [no date]. Formal Verification of Subsets of the Rust Language | SkillsCast. Online. [Accessed 25 November 2021]. Available from: https://skillsmatter.com/skillscasts/17053-formal-verification-of-subsets-of-the-rust-languageRust London User Group community cast. Bas Spitters: In this presentation, Bas will give a very brief introduction to interactive formal verification of pro...\n\nJEFFREY, Alan, 2012. LTL types FRP: linear-time temporal logic propositions as types, proofs as functional reactive programs. In: Proceedings of the sixth workshop on Programming languages meets program verification - PLPV ’12. Online. Philadelphia, Pennsylvania, USA: ACM Press. 2012. p. 49. [Accessed 21 March 2021]. ISBN 978-1-4503-1125-0. DOI 10.1145/2103776.2103783. \n\nJELTSCH, Wolfgang, 2013. Temporal logic with “Until”, functional reactive programming with processes, and concrete process categories. In: Proceedings of the 7th workshop on Programming languages meets program verification - PLPV ’13. Online. Rome, Italy: ACM Press. 2013. p. 69. [Accessed 21 March 2021]. ISBN 978-1-4503-1860-0. DOI 10.1145/2428116.2428128. \n"
      },
      "date": 1659516628467
    },
    {
      "type": "edit",
      "id": "a950ae44fe4a6480",
      "item": {
        "type": "markdown",
        "id": "a950ae44fe4a6480",
        "text": "> Simulation-based programmable logic controller ([[PLC]]) code verification is a part of virtual commissioning, where the control code is verified against a virtual prototype of an application. With today’s general OPC interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general IEC 61131-3-based software solution, and a new OPC standard solution.\n\nFormal Verification of Subsets of the Rust Language | SkillsCast, [no date]. Formal Verification of Subsets of the Rust Language | SkillsCast. Online. [Accessed 25 November 2021]. Available from: https://skillsmatter.com/skillscasts/17053-formal-verification-of-subsets-of-the-rust-languageRust London User Group community cast. Bas Spitters: In this presentation, Bas will give a very brief introduction to interactive formal verification of pro...\n\nJEFFREY, Alan, 2012. LTL types FRP: linear-time temporal logic propositions as types, proofs as functional reactive programs. In: Proceedings of the sixth workshop on Programming languages meets program verification - PLPV ’12. Online. Philadelphia, Pennsylvania, USA: ACM Press. 2012. p. 49. [Accessed 21 March 2021]. ISBN 978-1-4503-1125-0. DOI 10.1145/2103776.2103783. \n\nJELTSCH, Wolfgang, 2013. Temporal logic with “Until”, functional reactive programming with processes, and concrete process categories. In: Proceedings of the 7th workshop on Programming languages meets program verification - PLPV ’13. Online. Rome, Italy: ACM Press. 2013. p. 69. [Accessed 21 March 2021]. ISBN 978-1-4503-1860-0. DOI 10.1145/2428116.2428128. \n"
      },
      "date": 1659516755121
    },
    {
      "type": "edit",
      "id": "a950ae44fe4a6480",
      "item": {
        "type": "markdown",
        "id": "a950ae44fe4a6480",
        "text": "> Simulation-based programmable logic controller ([[PLC]]) code verification is a part of [[virtual commissioning]], where the control code is verified against a virtual prototype of an application. With today’s general OPC interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general IEC 61131-3-based software solution, and a new OPC standard solution.\n\nFormal Verification of Subsets of the Rust Language | SkillsCast, [no date]. Formal Verification of Subsets of the Rust Language | SkillsCast. Online. [Accessed 25 November 2021]. Available from: https://skillsmatter.com/skillscasts/17053-formal-verification-of-subsets-of-the-rust-languageRust London User Group community cast. Bas Spitters: In this presentation, Bas will give a very brief introduction to interactive formal verification of pro...\n\nJEFFREY, Alan, 2012. LTL types FRP: linear-time temporal logic propositions as types, proofs as functional reactive programs. In: Proceedings of the sixth workshop on Programming languages meets program verification - PLPV ’12. Online. Philadelphia, Pennsylvania, USA: ACM Press. 2012. p. 49. [Accessed 21 March 2021]. ISBN 978-1-4503-1125-0. DOI 10.1145/2103776.2103783. \n\nJELTSCH, Wolfgang, 2013. Temporal logic with “Until”, functional reactive programming with processes, and concrete process categories. In: Proceedings of the 7th workshop on Programming languages meets program verification - PLPV ’13. Online. Rome, Italy: ACM Press. 2013. p. 69. [Accessed 21 March 2021]. ISBN 978-1-4503-1860-0. DOI 10.1145/2428116.2428128. \n"
      },
      "date": 1659516871971
    },
    {
      "type": "edit",
      "id": "a950ae44fe4a6480",
      "item": {
        "type": "markdown",
        "id": "a950ae44fe4a6480",
        "text": "> Simulation-based programmable logic controller ([[PLC]]) code verification is a part of [[virtual commissioning]], where the control code is verified against a virtual prototype of an application. With today’s general [[OPC]] interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general IEC 61131-3-based software solution, and a new OPC standard solution.\n\nFormal Verification of Subsets of the Rust Language | SkillsCast, [no date]. Formal Verification of Subsets of the Rust Language | SkillsCast. Online. [Accessed 25 November 2021]. Available from: https://skillsmatter.com/skillscasts/17053-formal-verification-of-subsets-of-the-rust-languageRust London User Group community cast. Bas Spitters: In this presentation, Bas will give a very brief introduction to interactive formal verification of pro...\n\nJEFFREY, Alan, 2012. LTL types FRP: linear-time temporal logic propositions as types, proofs as functional reactive programs. In: Proceedings of the sixth workshop on Programming languages meets program verification - PLPV ’12. Online. Philadelphia, Pennsylvania, USA: ACM Press. 2012. p. 49. [Accessed 21 March 2021]. ISBN 978-1-4503-1125-0. DOI 10.1145/2103776.2103783. \n\nJELTSCH, Wolfgang, 2013. Temporal logic with “Until”, functional reactive programming with processes, and concrete process categories. In: Proceedings of the 7th workshop on Programming languages meets program verification - PLPV ’13. Online. Rome, Italy: ACM Press. 2013. p. 69. [Accessed 21 March 2021]. ISBN 978-1-4503-1860-0. DOI 10.1145/2428116.2428128. \n"
      },
      "date": 1659516948657
    },
    {
      "item": {
        "type": "factory",
        "id": "eaa87c4495137c3e"
      },
      "id": "eaa87c4495137c3e",
      "type": "add",
      "after": "a950ae44fe4a6480",
      "date": 1659516998335
    },
    {
      "type": "edit",
      "id": "a950ae44fe4a6480",
      "item": {
        "type": "markdown",
        "id": "a950ae44fe4a6480",
        "text": "> Simulation-based programmable logic controller ([[PLC]]) code verification is a part of [[virtual commissioning]], where the control code is verified against a virtual prototype of an application. With today’s general [[OPC]] interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general IEC 61131-3-based software solution, and a new OPC standard solution.\n"
      },
      "date": 1659517020527
    },
    {
      "type": "add",
      "id": "eaf1c25a09e97e4e",
      "item": {
        "type": "markdown",
        "id": "eaf1c25a09e97e4e",
        "text": "Formal Verification of Subsets of the Rust Language | SkillsCast, [no date]. Formal Verification of Subsets of the Rust Language | SkillsCast. Online. [Accessed 25 November 2021]. Available from: https://skillsmatter.com/skillscasts/17053-formal-verification-of-subsets-of-the-rust-languageRust London User Group community cast. Bas Spitters: In this presentation, Bas will give a very brief introduction to interactive formal verification of pro...\n\nJEFFREY, Alan, 2012. LTL types FRP: linear-time temporal logic propositions as types, proofs as functional reactive programs. In: Proceedings of the sixth workshop on Programming languages meets program verification - PLPV ’12. Online. Philadelphia, Pennsylvania, USA: ACM Press. 2012. p. 49. [Accessed 21 March 2021]. ISBN 978-1-4503-1125-0. DOI 10.1145/2103776.2103783. \n\nJELTSCH, Wolfgang, 2013. Temporal logic with “Until”, functional reactive programming with processes, and concrete process categories. In: Proceedings of the 7th workshop on Programming languages meets program verification - PLPV ’13. Online. Rome, Italy: ACM Press. 2013. p. 69. [Accessed 21 March 2021]. ISBN 978-1-4503-1860-0. DOI 10.1145/2428116.2428128. \n"
      },
      "after": "a950ae44fe4a6480",
      "date": 1659517040165
    },
    {
      "id": "eaa87c4495137c3e",
      "type": "move",
      "order": [
        "0a078f5526c9954f",
        "a950ae44fe4a6480",
        "eaa87c4495137c3e",
        "eaf1c25a09e97e4e"
      ],
      "date": 1659517044591
    },
    {
      "type": "edit",
      "id": "eaa87c4495137c3e",
      "item": {
        "type": "pagefold",
        "id": "eaa87c4495137c3e",
        "text": "~"
      },
      "date": 1659517048410
    },
    {
      "type": "edit",
      "id": "a950ae44fe4a6480",
      "item": {
        "type": "markdown",
        "id": "a950ae44fe4a6480",
        "text": "> Simulation-based programmable logic controller ([[PLC]]) code verification is a part of [[virtual commissioning]], where the control code is verified against a virtual prototype of an application. With today’s general [[OPC]] interface, it is easy to connect a PLC to a simulation tool for, e.g., verification purposes. However, there are some problems with this approach that can lead to an unreliable verification result. In this paper, four major problems with the OPC interface are described, and two possible solutions to the problems are presented: a general [[IEC 61131-3]]-based software solution, and a new OPC standard solution.\n"
      },
      "date": 1659517103492
    }
  ]
}