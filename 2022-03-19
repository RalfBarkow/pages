{
  "title": "2022-03-19",
  "story": [
    {
      "type": "paragraph",
      "id": "07b75135aa548c52",
      "text": "[[Common Wallet]]"
    },
    {
      "type": "paragraph",
      "id": "0ced6c831bf29722",
      "text": "CwEntropy"
    },
    {
      "type": "paragraph",
      "id": "a091dcac32088c79",
      "text": "[[Stern–Brocot Tree]]"
    },
    {
      "type": "paragraph",
      "id": "800fb5f7f4c4b852",
      "text": "Quinn Wilton\n@wilton_quinn via [https://twitter.com/wilton_quinn/status/1504879846047985664?s=20&t=XLrCxQ7AIgzFT2de5zMkdA twitter]\n·\n16 Std.\nThe coolest programming trick I've picked up this week is using the ideas behind the [[Stern-Brocot tree]] to define a sequence that allows you to insert an element between any other two elements, without needing to modify any of the existing elements."
    },
    {
      "type": "paragraph",
      "id": "53ba15fe4d765d31",
      "text": "A commutative replicated data type for cooperative editing [https://hal.inria.fr/inria-00445975/document pdf]"
    },
    {
      "type": "markdown",
      "id": "60e2c9c574c9694f",
      "text": "> A Commutative Replicated Data Type ([[CRDT]]) is one where all concurrent operations commute. The replicas of a CRDT converge automatically, without complex concurrency control. This paper describes Treedoc, a novel CRDT design for cooperative text editing. An essential property is that the identifiers of Treedoc atoms are selected from a densespace. We discuss practical alternatives for implementing the identifier space based on an extended binary tree. We also discuss storage alternatives for data and meta-data, and mechanisms for compacting the tree. In the best case, Treedoc incurs no overhead with respect to a linear text buffer. We validate the results with traces from existing edit histories\n"
    },
    {
      "type": "markdown",
      "id": "150766ea86ce7838",
      "text": "Quinn Wilton: \"It feels really fitting that the results came in as I was finishing '[[Funeral Parade of Roses]]'\""
    },
    {
      "type": "pagefold",
      "id": "d4918fe922c5ed44",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "b07b52707189c1fa",
      "text": "[[Continuous Delivery]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-03-19",
        "story": []
      },
      "date": 1647682023817
    },
    {
      "item": {
        "type": "factory",
        "id": "07b75135aa548c52"
      },
      "id": "07b75135aa548c52",
      "type": "add",
      "date": 1647682025547
    },
    {
      "type": "edit",
      "id": "07b75135aa548c52",
      "item": {
        "type": "paragraph",
        "id": "07b75135aa548c52",
        "text": "[[Common Wallet]]"
      },
      "date": 1647682041011
    },
    {
      "item": {
        "type": "factory",
        "id": "0ced6c831bf29722"
      },
      "id": "0ced6c831bf29722",
      "type": "add",
      "after": "07b75135aa548c52",
      "date": 1647682399783
    },
    {
      "type": "edit",
      "id": "0ced6c831bf29722",
      "item": {
        "type": "paragraph",
        "id": "0ced6c831bf29722",
        "text": "CwEntropy"
      },
      "date": 1647682403006
    },
    {
      "item": {
        "type": "factory",
        "id": "a091dcac32088c79"
      },
      "id": "a091dcac32088c79",
      "type": "add",
      "after": "0ced6c831bf29722",
      "date": 1647686421836
    },
    {
      "type": "edit",
      "id": "a091dcac32088c79",
      "item": {
        "type": "paragraph",
        "id": "a091dcac32088c79",
        "text": "[[Stern–Brocot Tree]]"
      },
      "date": 1647686429905
    },
    {
      "item": {
        "type": "factory",
        "id": "800fb5f7f4c4b852"
      },
      "id": "800fb5f7f4c4b852",
      "type": "add",
      "after": "a091dcac32088c79",
      "date": 1647686645969
    },
    {
      "type": "edit",
      "id": "800fb5f7f4c4b852",
      "item": {
        "type": "paragraph",
        "id": "800fb5f7f4c4b852",
        "text": "Quinn Wilton\n@wilton_quinn via [twitter]\n·\n16 Std.\nThe coolest programming trick I've picked up this week is using the ideas behind the Stern-Brocot tree to define a sequence that allows you to insert an element between any other two elements, without needing to modify any of the existing elements."
      },
      "date": 1647686653633
    },
    {
      "type": "edit",
      "id": "800fb5f7f4c4b852",
      "item": {
        "type": "paragraph",
        "id": "800fb5f7f4c4b852",
        "text": "Quinn Wilton\n@wilton_quinn via [https://twitter.com/wilton_quinn/status/1504879846047985664?s=20&t=XLrCxQ7AIgzFT2de5zMkdA twitter]\n·\n16 Std.\nThe coolest programming trick I've picked up this week is using the ideas behind the Stern-Brocot tree to define a sequence that allows you to insert an element between any other two elements, without needing to modify any of the existing elements."
      },
      "date": 1647686663217
    },
    {
      "type": "edit",
      "id": "800fb5f7f4c4b852",
      "item": {
        "type": "paragraph",
        "id": "800fb5f7f4c4b852",
        "text": "Quinn Wilton\n@wilton_quinn via [https://twitter.com/wilton_quinn/status/1504879846047985664?s=20&t=XLrCxQ7AIgzFT2de5zMkdA twitter]\n·\n16 Std.\nThe coolest programming trick I've picked up this week is using the ideas behind the [[Stern-Brocot tree]] to define a sequence that allows you to insert an element between any other two elements, without needing to modify any of the existing elements."
      },
      "date": 1647686685917
    },
    {
      "item": {
        "type": "factory",
        "id": "53ba15fe4d765d31"
      },
      "id": "53ba15fe4d765d31",
      "type": "add",
      "after": "800fb5f7f4c4b852",
      "date": 1647686697663
    },
    {
      "type": "edit",
      "id": "53ba15fe4d765d31",
      "item": {
        "type": "paragraph",
        "id": "53ba15fe4d765d31",
        "text": "A commutative replicated data type for cooperative editing"
      },
      "date": 1647686698897
    },
    {
      "type": "edit",
      "id": "53ba15fe4d765d31",
      "item": {
        "type": "paragraph",
        "id": "53ba15fe4d765d31",
        "text": "A commutative replicated data type for cooperative editing [https://hal.inria.fr/inria-00445975/document pdf]"
      },
      "date": 1647686709585
    },
    {
      "item": {
        "type": "factory",
        "id": "c7b859073a938127"
      },
      "id": "c7b859073a938127",
      "type": "add",
      "after": "53ba15fe4d765d31",
      "date": 1647686955772
    },
    {
      "type": "edit",
      "id": "c7b859073a938127",
      "item": {
        "type": "paragraph",
        "id": "c7b859073a938127",
        "text": "https://letterboxd.com/film/funeral-parade-of-roses/trailer/"
      },
      "date": 1647686961755
    },
    {
      "type": "edit",
      "id": "c7b859073a938127",
      "item": {
        "type": "markdown",
        "id": "c7b859073a938127",
        "text": "https://letterboxd.com/film/funeral-parade-of-roses/trailer/"
      },
      "date": 1647686962580
    },
    {
      "type": "edit",
      "id": "c7b859073a938127",
      "item": {
        "type": "markdown",
        "id": "c7b859073a938127",
        "text": "Funeral Parade of Roses https://letterboxd.com/film/funeral-parade-of-roses/trailer/"
      },
      "date": 1647686987517
    },
    {
      "type": "edit",
      "id": "c7b859073a938127",
      "item": {
        "type": "markdown",
        "id": "c7b859073a938127",
        "text": "Funeral Parade of Roses (1969) https://letterboxd.com/film/funeral-parade-of-roses/trailer/"
      },
      "date": 1647687009413
    },
    {
      "type": "edit",
      "id": "c7b859073a938127",
      "item": {
        "type": "markdown",
        "id": "c7b859073a938127",
        "text": "Funeral Parade of Roses (1969) https://letterboxd.com/film/funeral-parade-of-roses/trailer/ Directed by Toshio Matsumoto"
      },
      "date": 1647687023507
    },
    {
      "type": "edit",
      "id": "c7b859073a938127",
      "item": {
        "type": "markdown",
        "id": "c7b859073a938127",
        "text": "Funeral Parade of Roses (1969) https://letterboxd.com/film/funeral-parade-of-roses/trailer/ Directed by Toshio Matsumoto\nAn electrifying journey into the nether-regions of the late-’60s Tokyo underworld."
      },
      "date": 1647687031991
    },
    {
      "type": "edit",
      "id": "53ba15fe4d765d31",
      "item": {
        "type": "paragraph",
        "id": "53ba15fe4d765d31",
        "text": "A commutative replicated data type for cooperative editing [https://hal.inria.fr/inria-00445975/document pdf]> A Commutative Replicated Data Type (CRDT) is one where all concurrent operations commute. The replicas of a CRDT converge automatically, without complex concurrency control. This paper describes Treedoc, a novel CRDT design for cooperative text editing. An essential property is that the identifiers of Treedoc atoms are selected from a densespace. We discuss practical alternatives for implementing the identifier space based on an extended binary tree. We also discuss storage alternatives for data and meta-data, and mechanisms for compacting the tree. In the best case, Treedoc incurs no overhead with respect to a linear text buffer. We validate the results with traces from existing edit histories"
      },
      "date": 1647687108915
    },
    {
      "type": "edit",
      "id": "53ba15fe4d765d31",
      "item": {
        "type": "paragraph",
        "id": "53ba15fe4d765d31",
        "text": "A commutative replicated data type for cooperative editing [https://hal.inria.fr/inria-00445975/document pdf]"
      },
      "date": 1647687116081
    },
    {
      "type": "add",
      "id": "60e2c9c574c9694f",
      "item": {
        "type": "paragraph",
        "id": "60e2c9c574c9694f",
        "text": "> A Commutative Replicated Data Type (CRDT) is one where all concurrent operations commute. The replicas of a CRDT converge automatically, without complex concurrency control. This paper describes Treedoc, a novel CRDT design for cooperative text editing. An essential property is that the identifiers of Treedoc atoms are selected from a densespace. We discuss practical alternatives for implementing the identifier space based on an extended binary tree. We also discuss storage alternatives for data and meta-data, and mechanisms for compacting the tree. In the best case, Treedoc incurs no overhead with respect to a linear text buffer. We validate the results with traces from existing edit histories"
      },
      "after": "53ba15fe4d765d31",
      "date": 1647687117870
    },
    {
      "type": "edit",
      "id": "60e2c9c574c9694f",
      "item": {
        "type": "markdown",
        "id": "60e2c9c574c9694f",
        "text": "> A Commutative Replicated Data Type (CRDT) is one where all concurrent operations commute. The replicas of a CRDT converge automatically, without complex concurrency control. This paper describes Treedoc, a novel CRDT design for cooperative text editing. An essential property is that the identifiers of Treedoc atoms are selected from a densespace. We discuss practical alternatives for implementing the identifier space based on an extended binary tree. We also discuss storage alternatives for data and meta-data, and mechanisms for compacting the tree. In the best case, Treedoc incurs no overhead with respect to a linear text buffer. We validate the results with traces from existing edit histories"
      },
      "date": 1647687118920
    },
    {
      "type": "edit",
      "id": "60e2c9c574c9694f",
      "item": {
        "type": "markdown",
        "id": "60e2c9c574c9694f",
        "text": "> A Commutative Replicated Data Type ([[CRDT]]) is one where all concurrent operations commute. The replicas of a CRDT converge automatically, without complex concurrency control. This paper describes Treedoc, a novel CRDT design for cooperative text editing. An essential property is that the identifiers of Treedoc atoms are selected from a densespace. We discuss practical alternatives for implementing the identifier space based on an extended binary tree. We also discuss storage alternatives for data and meta-data, and mechanisms for compacting the tree. In the best case, Treedoc incurs no overhead with respect to a linear text buffer. We validate the results with traces from existing edit histories"
      },
      "date": 1647687128188
    },
    {
      "type": "edit",
      "id": "60e2c9c574c9694f",
      "item": {
        "type": "markdown",
        "id": "60e2c9c574c9694f",
        "text": "> A Commutative Replicated Data Type ([[CRDT]]) is one where all concurrent operations commute. The replicas of a CRDT converge automatically, without complex concurrency control. This paper describes Treedoc, a novel CRDT design for cooperative text editing. An essential property is that the identifiers of Treedoc atoms are selected from a densespace. We discuss practical alternatives for implementing the identifier space based on an extended binary tree. We also discuss storage alternatives for data and meta-data, and mechanisms for compacting the tree. In the best case, Treedoc incurs no overhead with respect to a linear text buffer. We validate the results with traces from existing edit histories\n"
      },
      "date": 1647687173155
    },
    {
      "type": "add",
      "id": "150766ea86ce7838",
      "item": {
        "type": "markdown",
        "id": "150766ea86ce7838",
        "text": "Quinn Wilton\n@wilton_quinn\n·\n17. März\nIt feels really fitting that the results came in as I was finishing \"Funeral Parade of Roses\""
      },
      "after": "60e2c9c574c9694f",
      "date": 1647687177281
    },
    {
      "type": "edit",
      "id": "150766ea86ce7838",
      "item": {
        "type": "markdown",
        "id": "150766ea86ce7838",
        "text": "Quinn Wilton: \"It feels really fitting that the results came in as I was finishing 'Funeral Parade of Roses'\""
      },
      "date": 1647687197099
    },
    {
      "type": "edit",
      "id": "150766ea86ce7838",
      "item": {
        "type": "markdown",
        "id": "150766ea86ce7838",
        "text": "Quinn Wilton: \"It feels really fitting that the results came in as I was finishing '[[Funeral Parade of Roses]]'\""
      },
      "date": 1647687218572
    },
    {
      "id": "c7b859073a938127",
      "type": "remove",
      "date": 1647687224138
    },
    {
      "item": {
        "type": "factory",
        "id": "d4918fe922c5ed44"
      },
      "id": "d4918fe922c5ed44",
      "type": "add",
      "after": "150766ea86ce7838",
      "date": 1647687681744
    },
    {
      "type": "edit",
      "id": "d4918fe922c5ed44",
      "item": {
        "type": "pagefold",
        "id": "d4918fe922c5ed44",
        "text": "~"
      },
      "date": 1647687685509
    },
    {
      "item": {
        "type": "factory",
        "id": "b07b52707189c1fa"
      },
      "id": "b07b52707189c1fa",
      "type": "add",
      "after": "d4918fe922c5ed44",
      "date": 1647687687242
    },
    {
      "type": "edit",
      "id": "b07b52707189c1fa",
      "item": {
        "type": "paragraph",
        "id": "b07b52707189c1fa",
        "text": "[[Continuous Delivery]]"
      },
      "date": 1647687696899
    }
  ]
}