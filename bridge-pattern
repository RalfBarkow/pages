{
  "title": "Bridge Pattern",
  "story": [
    {
      "type": "html",
      "text": "<b>Intent:</b> The [[Bridge Pattern]] decouples an abstraction from its implementation so that the two can vary independently. This is unlike the intent of the [[Adapter Pattern]], which exists only to adapt the interface of one class to another.",
      "id": "3c90a6e98251d9a4f371b3763f25252e"
    },
    {
      "type": "html",
      "text": "\nOne could say that both the [[Adapter Pattern]] and the [[Bridge Pattern]] are specializations of [[Jim Coplien]]'s [[Envelope Letter]] (or Handle<b></b>Body) idiom.",
      "id": "ebfee0c55d8b8d53cfda701f8592ad40"
    },
    {
      "type": "html",
      "text": "\nOn the other hand, some people think that [[Bridge Pattern Is Just Good Factoring]]. Or that it is an example of the [[Shield Pattern]].",
      "id": "ee1353d66d5213011c77ad791d04b5d0"
    },
    {
      "type": "html",
      "text": "\nThe [[Bridge Pattern]] is commonly known as \"Driver\". E.g. Printer driver, graphics driver, sound driver, etc.",
      "id": "51306ed62c5df366a601790c47c1d870"
    },
    {
      "type": "html",
      "text": "<i>Actually, I think that a \"driver\" is an example of the [[Bridge Pattern]].</i>",
      "id": "c288a54f0662543e8b810cc5130d71f5"
    },
    {
      "type": "html",
      "text": " Device drivers? Aaaaaah ([[Over Used Oop Examples]]) -top",
      "id": "deee9f4bc21f2485e6d8dcc1d3d21628"
    },
    {
      "type": "html",
      "text": "<b>See also:</b> [[Adapter Pattern]], [[Design Patterns]]",
      "id": "6b5c2892c45e094db58fb0341173e7c3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f44624c41d0a6e5330bd422efde47c47"
    },
    {
      "type": "html",
      "text": "Adapter is used to adapt two different classes to operate in a unified way. The adapter is the solution for classes that do similar jobs but don't have a unified interface. Adapter provides the uniform interface and can be implemented using either multiple inheritance or delegation through embedding a member of the adaptee. The major difference between adapter and bridge is when they are used. Adapter is used when two incompatible interfaces have to be unified together, ie., adapter is a result of existing incompatibilities. But bridge is something we use when we actually need to separate interface from implementation. Varying types of implementation is one reason. -- Praveen",
      "id": "6ee4a8c26f5f2f5b63ea2634ed2a7d05"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f44624c41d0a6e5330bd422efde47c47"
    },
    {
      "type": "html",
      "text": " [http://home.earthlink.net/~huston2/dp/bridge.html home.earthlink.net]",
      "id": "1085e3e2e6eaca4feaeff5627de610e8"
    },
    {
      "type": "html",
      "text": " [http://wiki.cs.uiuc.edu/patternStories/BridgePattern wiki.cs.uiuc.edu]",
      "id": "f1c10406b69cf748f226a927f132cec6"
    },
    {
      "type": "html",
      "text": " [http://delphipatterns.blog.com/2011/02/22/bridge/ delphipatterns.blog.com]",
      "id": "9eeba6a402db732fabbe488c62b65771"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f44624c41d0a6e5330bd422efde47c47"
    },
    {
      "type": "html",
      "text": "\nMy understanding of a bridge is this:",
      "id": "9cdfb855bd842b06a9a7494e614c5f8e"
    },
    {
      "type": "html",
      "text": "\nYou're writing some code to do something. But, say half the code is dependent on what particular computer or platform you're working on, and half the code is independent of those details.",
      "id": "dfa0c28f2ae9b678fc5851bd64af6826"
    },
    {
      "type": "html",
      "text": "\nSo, you \"bridge\" it. Whenever the code does something system dependent, you call the other side of the bridge. It does the system dependent stuff. And then it gets back, you trust that it did what it was supposed to do. So, you separate the abstract operations from the system-dependent operations, and you have a bridge between them.",
      "id": "66b68be46632787ad9a5e49962178a5c"
    },
    {
      "type": "html",
      "text": "\nNow, how does this differ from an adaptor?",
      "id": "934ea1b4915e4df344a0424be07f36d1"
    },
    {
      "type": "html",
      "text": "\nTotally different. An adaptor is just something for working one interface to fit another interface. The two interfaces \"mean\" the same thing, (or roughly the same thing,) they just do it in a different shape. So you put an adaptor between them.",
      "id": "0051d139129f04024596059450704cb0"
    },
    {
      "type": "html",
      "text": "\nIf you had a stereo system, and some head phones, and the stereo output the sound by a different interface than the head phones, that's an <i>adaptor</i> but <i>not</i> a bridge.",
      "id": "c012594f8143fea8b25c1d202578fe47"
    },
    {
      "type": "html",
      "text": "\nA bridge is <i>by design</i>. An adaptor is <i>not</i>. An adaptor is a <i>patch</i>. A bridge is put in place <i>on purpose</i>.",
      "id": "394ccc2162267192cc3108ec00b46d78"
    },
    {
      "type": "html",
      "text": "\nThere's nobody on Earth who says, \"Ahh,.... Yes, I am the brilliant person who bridged the listening device and the recording playback device.\" There's no such person. It doesn't make sense to say that it's a bridge.",
      "id": "e5709088373ef496e43224464cf4cdcc"
    },
    {
      "type": "html",
      "text": "\nAnd the adaptor is a thing that sits between the two interfaces. In a bridge, there isn't a thing that sits between two interfaces. The interfaces connect <i>directly</i> in a Bridge. It's a tight coupling. No adaptors sitting between the two halves.",
      "id": "080332854b5af0358e3ee5cda6011738"
    },
    {
      "type": "html",
      "text": "\nAnd a bridge exists for <i>a specific purpose</i>. It exists to isolate system-dependent stuff. There are <i>many</i> interfaces between things, for many purposes.",
      "id": "53872af0508f7d335083b5745dece005"
    },
    {
      "type": "html",
      "text": "\nIf you're writing a video game, and you have specific classes for specific execution environments, then that's a bridge. But if you are isolating something else, say message handlers, and part of a [[Component Bus]] architecture, then that's not a bridge any more. The reason a [[Component Bus]] is not a bridge is that the purpose isn't to isolate system-dependent stuff. Sure, it may <i>look</i> like a bridge. There are two elements communicating by an interface, right? But it's <i>not</i> a bridge.",
      "id": "fe60e7f6629be933eb731aae584b16be"
    },
    {
      "type": "html",
      "text": "\nWe have the word \"Bridge\" to say something <i>specific</i>. We mean to say, \"This is a situation where the programmer thought it would be best to isolate the handling of the system-dependent stuff from the handling of the system-independent stuff.\"",
      "id": "6428b4bc8336b52b8f3e4deacf2b5c6f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f44624c41d0a6e5330bd422efde47c47"
    },
    {
      "type": "html",
      "text": "The [[Bridge Pattern]] is very useful when you would otherwise have to deal with a [[Cartesian Product]] of implementations. If half the code is OS-dependent and half the code is CPU-dependent, then you have (#OSes)*(#CPUs) implementations to write. If you use a bridge, you have (#OSes)+(#CPUs) to write. (If you <b>can</b> use a bridge in this particular situation.)",
      "id": "a9b78f59699b3cb8a1811529660524c8"
    },
    {
      "type": "html",
      "text": "\n[[Double Dispatch Example]] provides possible implementations (OO and non-OO) using printer brand versus shapes.",
      "id": "0efea427925c090bdd72ef4bf34de586"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f44624c41d0a6e5330bd422efde47c47"
    },
    {
      "type": "html",
      "text": "\nSee also [[Envelope Letter]], [[Tomb Stone]]",
      "id": "83a923ab4febc15b786fc7918fa94dc6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f44624c41d0a6e5330bd422efde47c47"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]] | [[Category Structural Patterns]]",
      "id": "efaf8e8d08137f74d7eb16f6777e009f"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?BridgePattern c2.com]",
      "id": "89a39677c9ea3c101d4d99aa1feeef10"
    }
  ],
  "journal": [
    {
      "date": 1372113044000,
      "id": "4b5abaf1b6d1229f0c4296b644c11c5e",
      "type": "create",
      "item": {
        "title": "Bridge Pattern",
        "story": [
          {
            "type": "html",
            "text": "<b>Intent:</b> The [[Bridge Pattern]] decouples an abstraction from its implementation so that the two can vary independently. This is unlike the intent of the [[Adapter Pattern]], which exists only to adapt the interface of one class to another.",
            "id": "3c90a6e98251d9a4f371b3763f25252e"
          },
          {
            "type": "html",
            "text": "\nOne could say that both the [[Adapter Pattern]] and the [[Bridge Pattern]] are specializations of [[Jim Coplien]]'s [[Envelope Letter]] (or Handle<b></b>Body) idiom.",
            "id": "ebfee0c55d8b8d53cfda701f8592ad40"
          },
          {
            "type": "html",
            "text": "\nOn the other hand, some people think that [[Bridge Pattern Is Just Good Factoring]]. Or that it is an example of the [[Shield Pattern]].",
            "id": "ee1353d66d5213011c77ad791d04b5d0"
          },
          {
            "type": "html",
            "text": "\nThe [[Bridge Pattern]] is commonly known as \"Driver\". E.g. Printer driver, graphics driver, sound driver, etc.",
            "id": "51306ed62c5df366a601790c47c1d870"
          },
          {
            "type": "html",
            "text": "<i>Actually, I think that a \"driver\" is an example of the [[Bridge Pattern]].</i>",
            "id": "c288a54f0662543e8b810cc5130d71f5"
          },
          {
            "type": "html",
            "text": " Device drivers? Aaaaaah ([[Over Used Oop Examples]]) -top",
            "id": "deee9f4bc21f2485e6d8dcc1d3d21628"
          },
          {
            "type": "html",
            "text": "<b>See also:</b> [[Adapter Pattern]], [[Design Patterns]]",
            "id": "6b5c2892c45e094db58fb0341173e7c3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f44624c41d0a6e5330bd422efde47c47"
          },
          {
            "type": "html",
            "text": "Adapter is used to adapt two different classes to operate in a unified way. The adapter is the solution for classes that do similar jobs but don't have a unified interface. Adapter provides the uniform interface and can be implemented using either multiple inheritance or delegation through embedding a member of the adaptee. The major difference between adapter and bridge is when they are used. Adapter is used when two incompatible interfaces have to be unified together, ie., adapter is a result of existing incompatibilities. But bridge is something we use when we actually need to separate interface from implementation. Varying types of implementation is one reason. -- Praveen",
            "id": "6ee4a8c26f5f2f5b63ea2634ed2a7d05"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f44624c41d0a6e5330bd422efde47c47"
          },
          {
            "type": "html",
            "text": " [http://home.earthlink.net/~huston2/dp/bridge.html home.earthlink.net]",
            "id": "1085e3e2e6eaca4feaeff5627de610e8"
          },
          {
            "type": "html",
            "text": " [http://wiki.cs.uiuc.edu/patternStories/BridgePattern wiki.cs.uiuc.edu]",
            "id": "f1c10406b69cf748f226a927f132cec6"
          },
          {
            "type": "html",
            "text": " [http://delphipatterns.blog.com/2011/02/22/bridge/ delphipatterns.blog.com]",
            "id": "9eeba6a402db732fabbe488c62b65771"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f44624c41d0a6e5330bd422efde47c47"
          },
          {
            "type": "html",
            "text": "\nMy understanding of a bridge is this:",
            "id": "9cdfb855bd842b06a9a7494e614c5f8e"
          },
          {
            "type": "html",
            "text": "\nYou're writing some code to do something. But, say half the code is dependent on what particular computer or platform you're working on, and half the code is independent of those details.",
            "id": "dfa0c28f2ae9b678fc5851bd64af6826"
          },
          {
            "type": "html",
            "text": "\nSo, you \"bridge\" it. Whenever the code does something system dependent, you call the other side of the bridge. It does the system dependent stuff. And then it gets back, you trust that it did what it was supposed to do. So, you separate the abstract operations from the system-dependent operations, and you have a bridge between them.",
            "id": "66b68be46632787ad9a5e49962178a5c"
          },
          {
            "type": "html",
            "text": "\nNow, how does this differ from an adaptor?",
            "id": "934ea1b4915e4df344a0424be07f36d1"
          },
          {
            "type": "html",
            "text": "\nTotally different. An adaptor is just something for working one interface to fit another interface. The two interfaces \"mean\" the same thing, (or roughly the same thing,) they just do it in a different shape. So you put an adaptor between them.",
            "id": "0051d139129f04024596059450704cb0"
          },
          {
            "type": "html",
            "text": "\nIf you had a stereo system, and some head phones, and the stereo output the sound by a different interface than the head phones, that's an <i>adaptor</i> but <i>not</i> a bridge.",
            "id": "c012594f8143fea8b25c1d202578fe47"
          },
          {
            "type": "html",
            "text": "\nA bridge is <i>by design</i>. An adaptor is <i>not</i>. An adaptor is a <i>patch</i>. A bridge is put in place <i>on purpose</i>.",
            "id": "394ccc2162267192cc3108ec00b46d78"
          },
          {
            "type": "html",
            "text": "\nThere's nobody on Earth who says, \"Ahh,.... Yes, I am the brilliant person who bridged the listening device and the recording playback device.\" There's no such person. It doesn't make sense to say that it's a bridge.",
            "id": "e5709088373ef496e43224464cf4cdcc"
          },
          {
            "type": "html",
            "text": "\nAnd the adaptor is a thing that sits between the two interfaces. In a bridge, there isn't a thing that sits between two interfaces. The interfaces connect <i>directly</i> in a Bridge. It's a tight coupling. No adaptors sitting between the two halves.",
            "id": "080332854b5af0358e3ee5cda6011738"
          },
          {
            "type": "html",
            "text": "\nAnd a bridge exists for <i>a specific purpose</i>. It exists to isolate system-dependent stuff. There are <i>many</i> interfaces between things, for many purposes.",
            "id": "53872af0508f7d335083b5745dece005"
          },
          {
            "type": "html",
            "text": "\nIf you're writing a video game, and you have specific classes for specific execution environments, then that's a bridge. But if you are isolating something else, say message handlers, and part of a [[Component Bus]] architecture, then that's not a bridge any more. The reason a [[Component Bus]] is not a bridge is that the purpose isn't to isolate system-dependent stuff. Sure, it may <i>look</i> like a bridge. There are two elements communicating by an interface, right? But it's <i>not</i> a bridge.",
            "id": "fe60e7f6629be933eb731aae584b16be"
          },
          {
            "type": "html",
            "text": "\nWe have the word \"Bridge\" to say something <i>specific</i>. We mean to say, \"This is a situation where the programmer thought it would be best to isolate the handling of the system-dependent stuff from the handling of the system-independent stuff.\"",
            "id": "6428b4bc8336b52b8f3e4deacf2b5c6f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f44624c41d0a6e5330bd422efde47c47"
          },
          {
            "type": "html",
            "text": "The [[Bridge Pattern]] is very useful when you would otherwise have to deal with a [[Cartesian Product]] of implementations. If half the code is OS-dependent and half the code is CPU-dependent, then you have (#OSes)*(#CPUs) implementations to write. If you use a bridge, you have (#OSes)+(#CPUs) to write. (If you <b>can</b> use a bridge in this particular situation.)",
            "id": "a9b78f59699b3cb8a1811529660524c8"
          },
          {
            "type": "html",
            "text": "\n[[Double Dispatch Example]] provides possible implementations (OO and non-OO) using printer brand versus shapes.",
            "id": "0efea427925c090bdd72ef4bf34de586"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f44624c41d0a6e5330bd422efde47c47"
          },
          {
            "type": "html",
            "text": "\nSee also [[Envelope Letter]], [[Tomb Stone]]",
            "id": "83a923ab4febc15b786fc7918fa94dc6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f44624c41d0a6e5330bd422efde47c47"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]] | [[Category Structural Patterns]]",
            "id": "efaf8e8d08137f74d7eb16f6777e009f"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?BridgePattern c2.com]",
            "id": "89a39677c9ea3c101d4d99aa1feeef10"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "pattern.sfw.c2.com",
      "date": 1709986930621
    }
  ]
}