{
  "title": "Implementing Leibniz in Wiki",
  "story": [
    {
      "type": "pagefold",
      "id": "619b7b26efc84c62",
      "text": "Stuff to look at"
    },
    {
      "type": "paragraph",
      "id": "e9361f950d32fad9",
      "text": "Ward on the Matrix chat:"
    },
    {
      "type": "markdown",
      "id": "fce14422d640311c",
      "text": "> I will point to two cases, one where we render text as mathematical expressions but don't evaluate them, the other where we write javascript code and evaluate this in the context of large libraries and visualize the result. Leibnitz would deserve a third approach, but one that would not be out of place among these others.\n\n> Here we implement specialized rendering by adding a new plugin type:\nhttp://plugins.dojo.fed.wiki/view/welcome-visitors/view/about-mathjax-plugin\n\n> Here we use the existing Code plugin which is suitable for rendering javascript but not yet evaluating it. We do that with another plugin that reads the code and evaluates it.\nhttp://three.ward.asia.wiki.org/view/welcome-visitors/view/graveyard-ghost"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Implementing Leibniz in Wiki",
        "story": []
      },
      "date": 1676797122098
    },
    {
      "item": {
        "type": "factory",
        "id": "2506b70bb554fc2e"
      },
      "id": "2506b70bb554fc2e",
      "type": "add",
      "date": 1676797127795
    },
    {
      "type": "remove",
      "id": "2506b70bb554fc2e",
      "date": 1676797152956
    },
    {
      "item": {
        "type": "factory",
        "id": "e9361f950d32fad9"
      },
      "id": "e9361f950d32fad9",
      "type": "add",
      "date": 1676797162260
    },
    {
      "type": "edit",
      "id": "e9361f950d32fad9",
      "item": {
        "type": "paragraph",
        "id": "e9361f950d32fad9",
        "text": "I will point to two cases, one where we render text as mathematical expressions but don't evaluate them, the other where we write javascript code and evaluate this in the context of large libraries and visualize the result. Leibnitz would deserve a third approach, but one that would not be out of place among these others.\n\nHere we implement specialized rendering by adding a new plugin type:\nhttp://plugins.dojo.fed.wiki/view/welcome-visitors/view/about-mathjax-plugin\n\nHere we use the existing Code plugin which is suitable for rendering javascript but not yet evaluating it. We do that with another plugin that reads the code and evaluates it.\nhttp://three.ward.asia.wiki.org/view/welcome-visitors/view/graveyard-ghost"
      },
      "date": 1676797172519
    },
    {
      "type": "edit",
      "id": "e9361f950d32fad9",
      "item": {
        "type": "paragraph",
        "id": "e9361f950d32fad9",
        "text": "Ward on the Matrix chat:"
      },
      "date": 1676797190350
    },
    {
      "type": "add",
      "id": "1d61a38ba478fccc",
      "item": {
        "type": "paragraph",
        "id": "1d61a38ba478fccc",
        "text": "> I will point to two cases, one where we render text as mathematical expressions but don't evaluate them, the other where we write javascript code and evaluate this in the context of large libraries and visualize the result. Leibnitz would deserve a third approach, but one that would not be out of place among these others.\n\n> Here we implement specialized rendering by adding a new plugin type:\nhttp://plugins.dojo.fed.wiki/view/welcome-visitors/view/about-mathjax-plugin\n\n> Here we use the existing Code plugin which is suitable for rendering javascript but not yet evaluating it. We do that with another plugin that reads the code and evaluates it.\nhttp://three.ward.asia.wiki.org/view/welcome-visitors/view/graveyard-ghost"
      },
      "after": "e9361f950d32fad9",
      "date": 1676797205489
    },
    {
      "item": {
        "type": "factory",
        "id": "f701f3d555cc6e4d"
      },
      "id": "f701f3d555cc6e4d",
      "type": "add",
      "after": "1d61a38ba478fccc",
      "date": 1676797537777
    },
    {
      "type": "remove",
      "id": "f701f3d555cc6e4d",
      "date": 1676797539531
    },
    {
      "item": {
        "type": "factory",
        "id": "fce14422d640311c"
      },
      "id": "fce14422d640311c",
      "type": "add",
      "after": "1d61a38ba478fccc",
      "date": 1676797542684
    },
    {
      "type": "edit",
      "id": "fce14422d640311c",
      "item": {
        "type": "markdown",
        "id": "fce14422d640311c",
        "text": "> I will point to two cases, one where we render text as mathematical expressions but don't evaluate them, the other where we write javascript code and evaluate this in the context of large libraries and visualize the result. Leibnitz would deserve a third approach, but one that would not be out of place among these others.\n\n> Here we implement specialized rendering by adding a new plugin type:\nhttp://plugins.dojo.fed.wiki/view/welcome-visitors/view/about-mathjax-plugin\n\n> Here we use the existing Code plugin which is suitable for rendering javascript but not yet evaluating it. We do that with another plugin that reads the code and evaluates it.\nhttp://three.ward.asia.wiki.org/view/welcome-visitors/view/graveyard-ghost"
      },
      "date": 1676797551614
    },
    {
      "type": "remove",
      "id": "1d61a38ba478fccc",
      "date": 1676797556487
    },
    {
      "item": {
        "type": "factory",
        "id": "619b7b26efc84c62"
      },
      "id": "619b7b26efc84c62",
      "type": "add",
      "after": "fce14422d640311c",
      "date": 1676797567875
    },
    {
      "type": "edit",
      "id": "619b7b26efc84c62",
      "item": {
        "type": "pagefold",
        "id": "619b7b26efc84c62",
        "text": "Stuff to look at"
      },
      "date": 1676797577350
    },
    {
      "id": "619b7b26efc84c62",
      "type": "move",
      "order": [
        "619b7b26efc84c62",
        "e9361f950d32fad9",
        "fce14422d640311c"
      ],
      "date": 1676797581317
    },
    {
      "type": "fork",
      "site": "konrad.hinsen.dreyeck.ch",
      "date": 1677070614262
    }
  ]
}