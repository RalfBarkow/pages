{
  "title": "Object Migration",
  "story": [
    {
      "type": "paragraph",
      "id": "963788d482f1461b",
      "text": "[[Smalltalk]] is a well-known object-oriented programming language. In the late 1980s, we developed Smalltalk on a DEC VAX/8600 computer to promote education and research of object-oriented programming in China. Smalltalk can also be used as the language of object-oriented database e.g., Gemstone. However, an object-oriented data model makes it hard to define views and handle role multiplicity as well as object migration. "
    },
    {
      "type": "paragraph",
      "id": "cf9374843bac993f",
      "text": "We extended the object-oriented data model with the new concepts of deputy objects and deputy classes. The new model is called the object deputy model and can provide a unified realization of object views, roles and migration. It can be implemented in Smalltalk. "
    },
    {
      "type": "paragraph",
      "id": "de4b37bc82d896d6",
      "text": "In China, there are other Smalltalk-related research projects such as the Smalltalk program understanding support system and Chinese character information processing in Smalltalk. We introduce these research works."
    },
    {
      "type": "pagefold",
      "id": "69fc6bef0584c96e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "389fedeea7ed9df9",
      "text": "PENG, Zhiyong, HUANG, Kai and YE, Juan, 2003. Development of Smalltalk in China. In: First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings. IEEE. 2003. p. 52–59. \n"
    },
    {
      "type": "paragraph",
      "id": "7fafaaa6fe6d10b2",
      "text": "Design and implementation of Smalltalk lets us know more about object-oriented model. Although object-oriented model can represent complex data types and achieve high-performance, it is hard to handle object views, multiple roles, object migration and etc. We extend object-oriented model[1] with the new concepts of deputy objects and deputy classes[11]. Deputy objects have the following features: "
    },
    {
      "type": "paragraph",
      "id": "1ee35f1c4e2e58a3",
      "text": "(1) The deputy objects are assigned with new identifiers. "
    },
    {
      "type": "paragraph",
      "id": "8f03d455b1b4438c",
      "text": "(2) The deputy objects can partly or totally use attributes and methods of the source objects. In addition, they can be extended with new attributes and methods as well."
    },
    {
      "type": "paragraph",
      "id": "6c98a9cb026ca2ed",
      "text": "(3) The deputy objects inherit the attributes and methods of their source objects, which are tailored by switching operations."
    },
    {
      "type": "paragraph",
      "id": "cf81209ca2e1621c",
      "text": "(4) The deputy objects and the source objects are linked bilaterally so that update propagations are allowed between them. "
    },
    {
      "type": "paragraph",
      "id": "16cdabc627122f25",
      "text": "(5) More than one deputy object can be derived from a single source object. Furthermore, deputy objects of a deputy object can also be derived."
    },
    {
      "type": "paragraph",
      "id": "d623eba20bb9148b",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "c0e2b9260e0bbea0",
      "text": "The object deputy model makes it possible a unified realization of object views, roles and migration. Since deputy objects can be used as customized interfaces of source objects which selectively inherit the attributes and methods of source objects with different names and types, they can be used to realize object views. On the other hand, deputy objects can be extended with additional attributes and methods, and therefore they can play roles instead of their source objects. By means of dynamic classification functions of object views supported by data update propagations, handling object roles in the same ways as object views can easily realize time-varying roles, which are actually regarded as object migration."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Object Migration",
        "story": []
      },
      "date": 1684258512425
    },
    {
      "id": "389fedeea7ed9df9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "389fedeea7ed9df9",
        "text": "PENG, Zhiyong, HUANG, Kai and YE, Juan, 2003. Development of smalltalk in China. In: First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings. IEEE. 2003. p. 52–59. \n"
      },
      "attribution": {
        "page": "2023-05-16"
      },
      "date": 1684258518462
    },
    {
      "item": {
        "type": "factory",
        "id": "69fc6bef0584c96e"
      },
      "id": "69fc6bef0584c96e",
      "type": "add",
      "after": "389fedeea7ed9df9",
      "date": 1684258519663
    },
    {
      "type": "edit",
      "id": "69fc6bef0584c96e",
      "item": {
        "type": "pagefold",
        "id": "69fc6bef0584c96e",
        "text": "~"
      },
      "date": 1684258523333
    },
    {
      "id": "69fc6bef0584c96e",
      "type": "move",
      "order": [
        "69fc6bef0584c96e",
        "389fedeea7ed9df9"
      ],
      "date": 1684258525356
    },
    {
      "id": "963788d482f1461b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "963788d482f1461b",
        "text": "Smalltalk is a well-known object-oriented programming language. In the late 1980s, we developed Smalltalk on a DEC VAX/8600 computer to promote education and research of object-oriented programming in China. Smalltalk can also be used as the language of object-oriented database e.g., Gemstone. However, an object-oriented data model makes it hard to define views and handle role multiplicity as well as [[Object Migration]]. We extended the object-oriented data model with the new concepts of deputy objects and deputy classes. The new model is called the object deputy model and can provide a unified realization of object views, roles and migration. It can be implemented in Smalltalk. In China, there are other Smalltalk-related research projects such as the Smalltalk program understanding support system and Chinese character information processing in Smalltalk. We introduce these research works."
      },
      "attribution": {
        "page": "2023-05-16"
      },
      "date": 1684258529099
    },
    {
      "type": "edit",
      "id": "963788d482f1461b",
      "item": {
        "type": "paragraph",
        "id": "963788d482f1461b",
        "text": "Smalltalk is a well-known object-oriented programming language. In the late 1980s, we developed Smalltalk on a DEC VAX/8600 computer to promote education and research of object-oriented programming in China. Smalltalk can also be used as the language of object-oriented database e.g., Gemstone. However, an object-oriented data model makes it hard to define views and handle role multiplicity as well as Object Migration. "
      },
      "date": 1684258548090
    },
    {
      "type": "add",
      "id": "cf9374843bac993f",
      "item": {
        "type": "paragraph",
        "id": "cf9374843bac993f",
        "text": "We extended the object-oriented data model with the new concepts of deputy objects and deputy classes. The new model is called the object deputy model and can provide a unified realization of object views, roles and migration. It can be implemented in Smalltalk. In China, there are other Smalltalk-related research projects such as the Smalltalk program understanding support system and Chinese character information processing in Smalltalk. We introduce these research works."
      },
      "after": "963788d482f1461b",
      "date": 1684258548741
    },
    {
      "type": "edit",
      "id": "963788d482f1461b",
      "item": {
        "type": "paragraph",
        "id": "963788d482f1461b",
        "text": "[[Smalltalk]] is a well-known object-oriented programming language. In the late 1980s, we developed Smalltalk on a DEC VAX/8600 computer to promote education and research of object-oriented programming in China. Smalltalk can also be used as the language of object-oriented database e.g., Gemstone. However, an object-oriented data model makes it hard to define views and handle role multiplicity as well as Object Migration. "
      },
      "date": 1684258567735
    },
    {
      "type": "edit",
      "id": "963788d482f1461b",
      "item": {
        "type": "paragraph",
        "id": "963788d482f1461b",
        "text": "[[Smalltalk]] is a well-known object-oriented programming language. In the late 1980s, we developed Smalltalk on a DEC VAX/8600 computer to promote education and research of object-oriented programming in China. Smalltalk can also be used as the language of object-oriented database e.g., Gemstone. However, an object-oriented data model makes it hard to define views and handle role multiplicity as well as object migration. "
      },
      "date": 1684258598361
    },
    {
      "type": "edit",
      "id": "cf9374843bac993f",
      "item": {
        "type": "paragraph",
        "id": "cf9374843bac993f",
        "text": "We extended the object-oriented data model with the new concepts of deputy objects and deputy classes. The new model is called the object deputy model and can provide a unified realization of object views, roles and migration. It can be implemented in Smalltalk. "
      },
      "date": 1684258616459
    },
    {
      "type": "add",
      "id": "de4b37bc82d896d6",
      "item": {
        "type": "paragraph",
        "id": "de4b37bc82d896d6",
        "text": "In China, there are other Smalltalk-related research projects such as the Smalltalk program understanding support system and Chinese character information processing in Smalltalk. We introduce these research works."
      },
      "after": "cf9374843bac993f",
      "date": 1684258617212
    },
    {
      "item": {
        "type": "factory",
        "id": "7fafaaa6fe6d10b2"
      },
      "id": "7fafaaa6fe6d10b2",
      "type": "add",
      "after": "389fedeea7ed9df9",
      "date": 1684258639497
    },
    {
      "type": "edit",
      "id": "7fafaaa6fe6d10b2",
      "item": {
        "type": "paragraph",
        "id": "7fafaaa6fe6d10b2",
        "text": "Design and implementation of Smalltalk lets us know more about object-oriented model. Although object-oriented model can represent complex data types and achieve high-performance, it is hard to handle object views, multiple roles, object migration and etc. We extend object-oriented model[1] with the new concepts of deputy objects and deputy classes[11]. Deputy objects have the following features: […]"
      },
      "date": 1684258643666
    },
    {
      "type": "edit",
      "id": "7fafaaa6fe6d10b2",
      "item": {
        "type": "paragraph",
        "id": "7fafaaa6fe6d10b2",
        "text": "Design and implementation of Smalltalk lets us know more about object-oriented model. Although object-oriented model can represent complex data types and achieve high-performance, it is hard to handle object views, multiple roles, object migration and etc. We extend object-oriented model[1] with the new concepts of deputy objects and deputy classes[11]. Deputy objects have the following features: "
      },
      "date": 1684258673166
    },
    {
      "type": "add",
      "id": "1ee35f1c4e2e58a3",
      "item": {
        "type": "paragraph",
        "id": "1ee35f1c4e2e58a3",
        "text": "(1) The deputy objects are assigned with new identifiers. (2) The deputy objects can partly or totally use attributes and methods of the source objects. In addition, they can be extended with new attributes and methods as well. (3) The deputy objects inherit the attributes and methods of their source objects, which are tailored by switching operations. (4) The deputy objects and the source objects are linked bilaterally so that update propagations are allowed between them. (5) More than one deputy object can be derived from a single source object. Furthermore, deputy objects of a deputy object can also be derived."
      },
      "after": "7fafaaa6fe6d10b2",
      "date": 1684258674492
    },
    {
      "type": "add",
      "id": "d623eba20bb9148b",
      "item": {
        "type": "paragraph",
        "id": "d623eba20bb9148b",
        "text": "[…]"
      },
      "after": "1ee35f1c4e2e58a3",
      "date": 1684258676113
    },
    {
      "type": "edit",
      "id": "1ee35f1c4e2e58a3",
      "item": {
        "type": "paragraph",
        "id": "1ee35f1c4e2e58a3",
        "text": "(1) The deputy objects are assigned with new identifiers. (2) The deputy objects can partly or totally use attributes and methods of the source objects. In addition, they can be extended with new attribute"
      },
      "date": 1684258680002
    },
    {
      "type": "edit",
      "id": "1ee35f1c4e2e58a3",
      "item": {
        "type": "paragraph",
        "id": "1ee35f1c4e2e58a3",
        "text": "(1) The deputy objects are assigned with new identifiers. "
      },
      "date": 1684258686008
    },
    {
      "type": "add",
      "id": "8f03d455b1b4438c",
      "item": {
        "type": "paragraph",
        "id": "8f03d455b1b4438c",
        "text": "(2) The deputy objects can partly or totally use attributes and methods of the source objects. In addition, they can be extended with new attribute the attributes and methods of their source objects, which are tailored by switching operations. "
      },
      "after": "1ee35f1c4e2e58a3",
      "date": 1684258694930
    },
    {
      "type": "add",
      "id": "cf81209ca2e1621c",
      "item": {
        "type": "paragraph",
        "id": "cf81209ca2e1621c",
        "text": "(4) The deputy objects and the source objects are linked bilaterally so that update propagations are allowed between them. "
      },
      "after": "8f03d455b1b4438c",
      "date": 1684258699312
    },
    {
      "type": "add",
      "id": "16cdabc627122f25",
      "item": {
        "type": "paragraph",
        "id": "16cdabc627122f25",
        "text": "(5) More than one deputy object can be derived from a single source object. Furthermore, deputy objects of a deputy object can also be derived."
      },
      "after": "cf81209ca2e1621c",
      "date": 1684258700290
    },
    {
      "type": "edit",
      "id": "8f03d455b1b4438c",
      "item": {
        "type": "paragraph",
        "id": "8f03d455b1b4438c",
        "text": "(2) The deputy objects can partly or totally use attributes and methods of the source objects. In addition, they can be extended with new attribute"
      },
      "date": 1684258761044
    },
    {
      "type": "add",
      "id": "6c98a9cb026ca2ed",
      "item": {
        "type": "paragraph",
        "id": "6c98a9cb026ca2ed",
        "text": " the attributes and methods of their source objects, which are tailored by switching operations. "
      },
      "after": "8f03d455b1b4438c",
      "date": 1684258762650
    },
    {
      "type": "edit",
      "id": "8f03d455b1b4438c",
      "item": {
        "type": "paragraph",
        "id": "8f03d455b1b4438c",
        "text": "(2) The deputy objects can partly or totally use attributes and methods of the source objects. In addition, they can be extended with new attributes and methods as well."
      },
      "date": 1684258778445
    },
    {
      "type": "edit",
      "id": "6c98a9cb026ca2ed",
      "item": {
        "type": "paragraph",
        "id": "6c98a9cb026ca2ed",
        "text": "(3) The deputy objects inherit the attributes and methods of their source objects, which are tailored by switching operations."
      },
      "date": 1684258791469
    },
    {
      "type": "add",
      "id": "c0e2b9260e0bbea0",
      "item": {
        "type": "paragraph",
        "id": "c0e2b9260e0bbea0",
        "text": "The object deputy model makes it possible a unified realization of object views, roles and migration. Since deputy objects can be used as customized interfaces of source objects which selectively inherit the attributes and methods of source objects with different names and types, they can be used to realize object views. On the other hand, deputy objects can be extended with additional attributes and methods, and therefore they can play roles instead of their source objects. By means of dynamic classification functions of object views supported by data update propagations, handling object roles in the same ways as object views can easily realize time-varying roles, which are actually regarded as object migration."
      },
      "after": "d623eba20bb9148b",
      "date": 1684258830852
    },
    {
      "type": "edit",
      "id": "389fedeea7ed9df9",
      "item": {
        "type": "paragraph",
        "id": "389fedeea7ed9df9",
        "text": "PENG, Zhiyong, HUANG, Kai and YE, Juan, 2003. Development of Smalltalk in China. In: First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings. IEEE. 2003. p. 52–59. \n"
      },
      "date": 1684258944982
    }
  ]
}