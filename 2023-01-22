{
  "title": "2023-01-22",
  "story": [
    {
      "type": "paragraph",
      "id": "ac6e927e2c4c6860",
      "text": "⇒ [[Intransparency]] ⇒ [[Symphony of Intransparency]] ⇒ [[Education]] ⇒ [[Category Building]]"
    },
    {
      "type": "paragraph",
      "id": "bca9f0686fd15e1a",
      "text": "⇒ [[Cognition]] ⇒ [[Cognition and Action]] ⇒ [[Plant Own Gardens]]"
    },
    {
      "type": "paragraph",
      "id": "4995865dc1814102",
      "text": "⇒ [[Examples of Ordering]] ⇒ [[The Basic SOM]]"
    },
    {
      "type": "graphviz",
      "id": "7e3d3aea8d79b214",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "assets",
      "id": "b4c1fe94f73b6268",
      "text": "pages/2023-01-22"
    },
    {
      "type": "paragraph",
      "id": "b05d671a6a75d843",
      "text": "p. 80 The initial radius of Nc can even be more than half the diameter of the network! ⇒ [[Radio Network Simulator]] ⇒ [[Diameter of the Network]]"
    },
    {
      "type": "paragraph",
      "id": "1f9dc5639f6f3e28",
      "text": "⇒ [[Examples of Ordering]]"
    },
    {
      "type": "html",
      "id": "6ebe8001891e6c31",
      "text": "<img\n  width=\"100%\"\n  src=\"https://wiki.ralfbarkow.ch/assets/pages/2023-01-22/Bildschirmfoto%202023-01-22%20um%2011.51.07.png\"\n>"
    },
    {
      "type": "paragraph",
      "id": "2e01b033a2494f7a",
      "text": "Fig. 3.4. Reference vectors during the ordering process, square array. The numbers at lower right-hand corner indicate learning cycles\n"
    },
    {
      "type": "paragraph",
      "id": "35dffefd6e167aa9",
      "text": "I'd like to add a Frame plugin containing such framed areas and the network of reference vectors …."
    },
    {
      "type": "html",
      "id": "bb053971ccb81dab",
      "text": "<img\n  width=\"100%\"\n  src=\"https://wiki.ralfbarkow.ch/assets/pages/2023-01-22/2023-01-22.jpg\"\n>"
    },
    {
      "type": "paragraph",
      "id": "b479b96cf4f366a5",
      "text": "⇒ [[Vector Quantization]] ⇒ [[Finding Communities]]"
    },
    {
      "type": "paragraph",
      "id": "d4839fc9cb8297a2",
      "text": "Since the SOM belongs to the category of [[Vector Quantization]] (VQ) methods, the starting point must be some kind of quantization error in the vector space. (KOHONEN, Teuvo, 1995. Self-organizing maps, p. 118)"
    },
    {
      "type": "paragraph",
      "id": "4dc2128f18043cbf",
      "text": "Introduction: What is a\n⇒ [[Self-Organizing Map]]? [https://download.e-bookshelf.de/download/0000/5677/01/L-G-0000567701-0015270635.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "5407d9db45903215",
      "text": "⇒ [[Map of a Binary Data Matrix]] ⇒ [[Predator and Prey Dynamics]]"
    },
    {
      "type": "markdown",
      "id": "7220cf7e1b3190ea",
      "text": "**Idea**: Overlay [[Predator and Prey Dynamics]] on the map shown in Fig. 3.22 ⇒ [[Map of a Binary Data Matrix]]."
    },
    {
      "type": "pagefold",
      "id": "bde358d517b4d428",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "779a146c75d1dd13",
      "text": "Jeff Miller via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$167441881277037brQAf:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nitems of work coming out of Sunday Explorers, consider the SVG background for rendering a node with a stacked bar chart based on the SoFi indications"
    },
    {
      "type": "pagefold",
      "id": "8cf66287e7da6527",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "bbe101ac579e0eae",
      "text": "Self-Organizing Map in Pure Javascript [https://chenhunghan.github.io/som.js/ github.io], [https://web.archive.org/web/20150128161500/https://docs.unigrafia.fi/publications/kohonen_teuvo/MATLAB_implementations_and_applications_of_the_self_organizing_map.pdf pdf], [https://github.com/chenhunghan/som.js github]"
    },
    {
      "type": "paragraph",
      "id": "aa39d131b718225e",
      "text": "Node-som [https://deepelement.github.io/node-som/ github.io]"
    },
    {
      "type": "paragraph",
      "id": "50e879a2d8d541bf",
      "text": "Application of Self-Organizing Map to stellar spectral\nclassifications [https://arxiv.org/pdf/1108.0514v1.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "fc3ec4d60981338f",
      "text": "https://www.npmjs.com/search?q=kohonen"
    },
    {
      "type": "pagefold",
      "id": "24c3452a4176a2bc",
      "text": "seracio"
    },
    {
      "type": "paragraph",
      "id": "990dac1a4487c1bf",
      "text": "A basic implementation of a Kohonen map in JavaScript [https://github.com/seracio/kohonen github]"
    },
    {
      "type": "paragraph",
      "id": "cb69197805d48bb8",
      "text": "https://seracio.github.io/kohonen-stars/ "
    },
    {
      "type": "html",
      "id": "4429784b8b7546d7",
      "text": "<img\n  width=\"100%\"\n  src=\"https://camo.githubusercontent.com/ca56e71212130599851e81a5742437ee0538d480e902dcd03f0361023eeeabe9/68747470733a2f2f63646e2e7261776769742e636f6d2f7365726163696f2f6b6f686f6e656e2d73746172732f6d61737465722f696d616765732f636170747572652e737667\"\n>"
    },
    {
      "type": "paragraph",
      "id": "1061d4876036dc7d",
      "text": "⇒ [[Map a Dataset]] "
    },
    {
      "type": "paragraph",
      "id": "2274e3ab04fa8fb6",
      "text": "from a multidimensional space into a 2d hexagonal grid of neurons and a script to draw the hexagonal grid\n"
    },
    {
      "type": "paragraph",
      "id": "19a5996c3c8b4073",
      "text": "⇒ [[Principal Component Analysis]] [https://stats.stackexchange.com/questions/143905/loadings-vs-eigenvectors-in-pca-when-to-use-one-or-another stackexchange]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-01-22",
        "story": []
      },
      "date": 1674381957898
    },
    {
      "item": {
        "type": "factory",
        "id": "ac6e927e2c4c6860"
      },
      "id": "ac6e927e2c4c6860",
      "type": "add",
      "date": 1674381959520
    },
    {
      "type": "edit",
      "id": "ac6e927e2c4c6860",
      "item": {
        "type": "paragraph",
        "id": "ac6e927e2c4c6860",
        "text": "⇒ [[Intransparency]] ⇒ [[Symphony of Intransparency]] ⇒ [[Education]] ⇒ [[Category Building]]"
      },
      "date": 1674381961783
    },
    {
      "item": {
        "type": "factory",
        "id": "7e3d3aea8d79b214"
      },
      "id": "7e3d3aea8d79b214",
      "type": "add",
      "after": "ac6e927e2c4c6860",
      "date": 1674381963459
    },
    {
      "type": "edit",
      "id": "7e3d3aea8d79b214",
      "item": {
        "type": "graphviz",
        "id": "7e3d3aea8d79b214",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1674381973000
    },
    {
      "item": {
        "type": "factory",
        "id": "bca9f0686fd15e1a"
      },
      "id": "bca9f0686fd15e1a",
      "type": "add",
      "after": "7e3d3aea8d79b214",
      "date": 1674382118227
    },
    {
      "type": "edit",
      "id": "bca9f0686fd15e1a",
      "item": {
        "type": "paragraph",
        "id": "bca9f0686fd15e1a",
        "text": "⇒ [[Cognition]] ⇒ [[Cognition and Action]] ⇒ [[Plant Own Gardens]]"
      },
      "date": 1674382120393
    },
    {
      "item": {
        "type": "factory",
        "id": "29809a351113d480"
      },
      "id": "29809a351113d480",
      "type": "add",
      "after": "bca9f0686fd15e1a",
      "date": 1674384255752
    },
    {
      "type": "remove",
      "id": "29809a351113d480",
      "date": 1674384260654
    },
    {
      "id": "bca9f0686fd15e1a",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "7e3d3aea8d79b214"
      ],
      "date": 1674384267526
    },
    {
      "item": {
        "type": "factory",
        "id": "b4c1fe94f73b6268"
      },
      "id": "b4c1fe94f73b6268",
      "type": "add",
      "after": "7e3d3aea8d79b214",
      "date": 1674384271282
    },
    {
      "type": "edit",
      "id": "b4c1fe94f73b6268",
      "item": {
        "type": "assets",
        "id": "b4c1fe94f73b6268",
        "text": "pages/2023-01-22"
      },
      "date": 1674384275465
    },
    {
      "item": {
        "type": "factory",
        "id": "2e01b033a2494f7a"
      },
      "id": "2e01b033a2494f7a",
      "type": "add",
      "after": "b4c1fe94f73b6268",
      "date": 1674384288217
    },
    {
      "type": "edit",
      "id": "2e01b033a2494f7a",
      "item": {
        "type": "paragraph",
        "id": "2e01b033a2494f7a",
        "text": "Fig. 3.4. Reference vectors during the ordering process, square array. The numbers at lower right-hand corner indicate learning cycles\n"
      },
      "date": 1674384290778
    },
    {
      "item": {
        "type": "factory",
        "id": "6ebe8001891e6c31"
      },
      "id": "6ebe8001891e6c31",
      "type": "add",
      "after": "2e01b033a2494f7a",
      "date": 1674384700451
    },
    {
      "type": "edit",
      "id": "6ebe8001891e6c31",
      "item": {
        "type": "html",
        "id": "6ebe8001891e6c31",
        "text": "<img\n  width=\"100%\"\n  src=\"https://wiki.ralfbarkow.ch/assets/pages/2023-01-22/Bildschirmfoto%202023-01-22%20um%2011.51.07.png\"\n>"
      },
      "date": 1674384716502
    },
    {
      "id": "2e01b033a2494f7a",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a"
      ],
      "date": 1674384721753
    },
    {
      "item": {
        "type": "factory",
        "id": "b05d671a6a75d843"
      },
      "id": "b05d671a6a75d843",
      "type": "add",
      "after": "2e01b033a2494f7a",
      "date": 1674384754786
    },
    {
      "type": "edit",
      "id": "b05d671a6a75d843",
      "item": {
        "type": "paragraph",
        "id": "b05d671a6a75d843",
        "text": "⇒ Examples of Ordering"
      },
      "date": 1674384765743
    },
    {
      "type": "edit",
      "id": "b05d671a6a75d843",
      "item": {
        "type": "paragraph",
        "id": "b05d671a6a75d843",
        "text": "⇒ [[Examples of Ordering]]"
      },
      "date": 1674384783057
    },
    {
      "id": "b05d671a6a75d843",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "b05d671a6a75d843",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a"
      ],
      "date": 1674384786020
    },
    {
      "item": {
        "type": "factory",
        "id": "35dffefd6e167aa9"
      },
      "id": "35dffefd6e167aa9",
      "type": "add",
      "after": "2e01b033a2494f7a",
      "date": 1674384947227
    },
    {
      "type": "edit",
      "id": "35dffefd6e167aa9",
      "item": {
        "type": "paragraph",
        "id": "35dffefd6e167aa9",
        "text": "I'd like to add a Frame plugin containing such framed areas and the network of reference vectors …."
      },
      "date": 1674385027014
    },
    {
      "type": "add",
      "id": "4995865dc1814102",
      "item": {
        "type": "paragraph",
        "id": "4995865dc1814102",
        "text": "⇒ [[The Basic SOM]]"
      },
      "after": "bca9f0686fd15e1a",
      "date": 1674385234488
    },
    {
      "type": "edit",
      "id": "4995865dc1814102",
      "item": {
        "type": "paragraph",
        "id": "4995865dc1814102",
        "text": "⇒ [[Examples of Ordering]] ⇒ [[The Basic SOM]]"
      },
      "date": 1674385248115
    },
    {
      "item": {
        "type": "factory",
        "id": "b479b96cf4f366a5"
      },
      "id": "b479b96cf4f366a5",
      "type": "add",
      "after": "35dffefd6e167aa9",
      "date": 1674385398601
    },
    {
      "type": "edit",
      "id": "b479b96cf4f366a5",
      "item": {
        "type": "paragraph",
        "id": "b479b96cf4f366a5",
        "text": "⇒ [[Vector Quantization]] "
      },
      "date": 1674385411505
    },
    {
      "type": "edit",
      "id": "b479b96cf4f366a5",
      "item": {
        "type": "paragraph",
        "id": "b479b96cf4f366a5",
        "text": "⇒ [[Vector Quantization]] ⇒ [[Finding Communities]]"
      },
      "date": 1674385429748
    },
    {
      "type": "edit",
      "id": "b05d671a6a75d843",
      "item": {
        "type": "paragraph",
        "id": "b05d671a6a75d843",
        "text": "p. 80 The initial radius of Nc can even be more than half the diameter of the network!"
      },
      "date": 1674385914262
    },
    {
      "type": "add",
      "id": "1f9dc5639f6f3e28",
      "item": {
        "type": "paragraph",
        "id": "1f9dc5639f6f3e28",
        "text": "⇒ [[Examples of Ordering]]"
      },
      "after": "b05d671a6a75d843",
      "date": 1674385914974
    },
    {
      "type": "edit",
      "id": "b05d671a6a75d843",
      "item": {
        "type": "paragraph",
        "id": "b05d671a6a75d843",
        "text": "p. 80 The initial radius of Nc can even be more than half the diameter of the network! ⇒ [[Radio Network Simulator]]"
      },
      "date": 1674385980598
    },
    {
      "type": "edit",
      "id": "b05d671a6a75d843",
      "item": {
        "type": "paragraph",
        "id": "b05d671a6a75d843",
        "text": "p. 80 The initial radius of Nc can even be more than half the diameter of the network! ⇒ [[Radio Network Simulator]] ⇒ [[Diameter of the Network]]"
      },
      "date": 1674386041028
    },
    {
      "item": {
        "type": "factory",
        "id": "4dc2128f18043cbf"
      },
      "id": "4dc2128f18043cbf",
      "type": "add",
      "after": "b479b96cf4f366a5",
      "date": 1674387969823
    },
    {
      "type": "edit",
      "id": "4dc2128f18043cbf",
      "item": {
        "type": "paragraph",
        "id": "4dc2128f18043cbf",
        "text": "Introduction: What is a\nSelf-Organizing Map?"
      },
      "date": 1674387974331
    },
    {
      "type": "edit",
      "id": "4dc2128f18043cbf",
      "item": {
        "type": "paragraph",
        "id": "4dc2128f18043cbf",
        "text": "Introduction: What is a\n[[Self-Organizing Map]]? [https://download.e-bookshelf.de/download/0000/5677/01/L-G-0000567701-0015270635.pdf pdf]"
      },
      "date": 1674387998580
    },
    {
      "type": "edit",
      "id": "4dc2128f18043cbf",
      "item": {
        "type": "paragraph",
        "id": "4dc2128f18043cbf",
        "text": "Introduction: What is a\n⇒ [[Self-Organizing Map]]? [https://download.e-bookshelf.de/download/0000/5677/01/L-G-0000567701-0015270635.pdf pdf]"
      },
      "date": 1674388008805
    },
    {
      "item": {
        "type": "factory",
        "id": "5407d9db45903215"
      },
      "id": "5407d9db45903215",
      "type": "add",
      "after": "4dc2128f18043cbf",
      "date": 1674394689480
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. Attributen nie usually variables with scalar-valued discrete <>r continuous values, but they may also attain quallta live properties such as “good” or \"bad\" II the property ol being \"good oi\n"
      },
      "date": 1674394699440
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. Attributen are usually variables with scalar-valued discrete <>r continuous values, but they may also attain quallta live properties such as “good” or \"bad\" II the property ol being \"good oi\n"
      },
      "date": 1674394710272
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. Attributen are usually variables with scalar-valued discrete or continuous values, but they may also attain quallta live properties such as “good” or \"bad\" II the property ol being \"good oi\n"
      },
      "date": 1674394725032
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. Attributes are usually variables with scalar-valued discrete or continuous values, but they may also attain quallta live properties such as “good” or \"bad\" II the property ol being \"good oi\n"
      },
      "date": 1674394730112
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. Attributes are usually variables with scalar-valued discrete or continuous values, but they may also attain qualitative properties such as “good” or \"bad\" II the property ol being \"good oi\n"
      },
      "date": 1674394760869
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. Attributes are usually variables with scalar-valued discrete or continuous values, but they may also attain qualitative properties such as “good” or \"bad\". If the property ol being \"good oi\n"
      },
      "date": 1674394774301
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. Attributes are usually variables with scalar-valued discrete or continuous values, but they may also attain qualitative properties such as “good” or \"bad\". If the property ol being \"good\" or …\n"
      },
      "date": 1674394787263
    },
    {
      "item": {
        "type": "factory",
        "id": "8da00e99a28fee18"
      },
      "id": "8da00e99a28fee18",
      "type": "add",
      "after": "5407d9db45903215",
      "date": 1674394819982
    },
    {
      "type": "edit",
      "id": "8da00e99a28fee18",
      "item": {
        "type": "html",
        "id": "8da00e99a28fee18",
        "text": "<img\n  width=\"100%\"\n  src=\"https://wiki.ralfbarkow.ch/assets/pages/2023-01-22/Bildschirmfoto%202023-01-22%20um%2014.37.54.png\"\n>"
      },
      "date": 1674394837252
    },
    {
      "item": {
        "type": "factory",
        "id": "738f870433bb6981"
      },
      "id": "738f870433bb6981",
      "type": "add",
      "after": "8da00e99a28fee18",
      "date": 1674394862752
    },
    {
      "type": "edit",
      "id": "738f870433bb6981",
      "item": {
        "type": "paragraph",
        "id": "738f870433bb6981",
        "text": "“bad”, respectively, should be describable by a numerical attribute, it would be simplest to assume that such an attribute has the binary value, say 1 or 0, depending on the presence vs. absence of that attribute, respectively. Then the (unnormalized) similarity between two (binary) attribute sets may be defined in terms of the number of attributes common to both sets, i.e., as the dot product of the respective attribute vectors. It might seem more effective to use the value +1 to indicate the presence of an attribute, and -1 for its absence, respectively; however, if we normalize the input vectors, in their subsequent comparison using the dot product the attribute values 0 have a qualitatively similar effect as negative components in a comparison on the basis of vectorial differences. Euclidean distances can naturally be used directly for comparison, too.\nTo illustrate the self-organizing result with a concrete model simulation [2.56], consider the data given in Table 3.4. Each column is a schematic description of an animal, based on the presence (= 1) or absence (= 0) of some of the 13 different attributes given on the left. Some attributes, such as “feathers” and “2 legs” are correlated, indicating more significant differences than the other attributes, but we shall not take this correlation into account in learning in any way. In the following, we will take each column for the input vector of the animal indicated at the top. The animal name itself does not belong to the vector but instead specifies the label of the animal in the calibration of the map.\nThe members of the data set were presented iteratively and in a random order to a SOM of 10 x 10 neurons subject to the adaptation process described above. The initial connection strengths between the neurons and their n = 29 input lines were chosen to be small random values, i.e. no prior order was imposed. However, after a total of 2000 presentations, each neuron became more or less responsive to one of the occuring attribute combinations and simultaneously to one of the 16 animal names, too. Thus we obtain the map shown in Fig. 3.22 (the dots indicate neurons with weaker responses). It In very apparent that the spatial order of the responses has captured the essential “family relationships\" among the animals, (lolls responding to, e.g.,\n"
      },
      "date": 1674394869267
    },
    {
      "id": "738f870433bb6981",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "4995865dc1814102",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "b05d671a6a75d843",
        "1f9dc5639f6f3e28",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a",
        "35dffefd6e167aa9",
        "b479b96cf4f366a5",
        "4dc2128f18043cbf",
        "5407d9db45903215",
        "738f870433bb6981",
        "8da00e99a28fee18"
      ],
      "date": 1674394896569
    },
    {
      "type": "remove",
      "id": "738f870433bb6981",
      "date": 1674394901061
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. Attributes are usually variables with scalar-valued discrete or continuous values, but they may also attain qualitative properties such as “good” or \"bad\". If the property ol being \"good\" or “bad”, respectively, should be describable by a numerical attribute, it would be simplest to assume that such an attribute has the binary value, say 1 or 0, depending on the presence vs. absence of that attribute, respectively. Then the (unnormalized) similarity between two (binary) attribute sets may be defined in terms of the number of attributes common to both sets, i.e., as the dot product of the respective attribute vectors. It might seem more effective to use the value +1 to indicate the presence of an attribute, and -1 for its absence, respectively; however, if we normalize the input vectors, in their subsequent comparison using the dot product the attribute values 0 have a qualitatively similar effect as negative components in a comparison on the basis of vectorial differences. Euclidean distances can naturally be used directly for comparison, too.\nTo illustrate the self-organizing result with a concrete model simulation [2.56], consider the data given in Table 3.4. Each column is a schematic description of an animal, based on the presence (= 1) or absence (= 0) of some of the 13 different attributes given on the left. Some attributes, such as “feathers” and “2 legs” are correlated, indicating more significant differences than the other attributes, but we shall not take this correlation into account in learning in any way. In the following, we will take each column for the input vector of the animal indicated at the top. The animal name itself does not belong to the vector but instead specifies the label of the animal in the calibration of the map.\nThe members of the data set were presented iteratively and in a random order to a SOM of 10 x 10 neurons subject to the adaptation process described above. The initial connection strengths between the neurons and their n = 29 input lines were chosen to be small random values, i.e. no prior order was imposed. However, after a total of 2000 presentations, each neuron became more or less responsive to one of the occuring attribute combinations and simultaneously to one of the 16 animal names, too. Thus we obtain the map shown in Fig. 3.22 (the dots indicate neurons with weaker responses). It In very apparent that the spatial order of the responses has captured the essential “family relationships\" among the animals, (lolls responding to, e.g.,\n"
      },
      "date": 1674394906123
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "[[Map of a Binary Data Matrix]]. "
      },
      "date": 1674394917499
    },
    {
      "type": "add",
      "id": "9e92f111721987e1",
      "item": {
        "type": "paragraph",
        "id": "9e92f111721987e1",
        "text": "Attributes are usually variables with scalar-valued discrete or continuous values, but they may also attain qualitative properties such as “good” or \"bad\". If the property ol being \"good\" or “bad”, respectively, should be describable by a numerical attribute, it would be simplest to assume that such an attribute has the binary value, say 1 or 0, depending on the presence vs. absence of that attribute, respectively. Then the (unnormalized) similarity between two (binary) attribute sets may be defined in terms of the number of attributes common to both sets, i.e., as the dot product of the respective attribute vectors. It might seem more effective to use the value +1 to indicate the presence of an attribute, and -1 for its absence, respectively; however, if we normalize the input vectors, in their subsequent comparison using the dot product the attribute values 0 have a qualitatively similar effect as negative components in a comparison on the basis of vectorial differences. Euclidean distances can naturally be used directly for comparison, too.\nTo illustrate the self-organizing result with a concrete model simulation [2.56], consider the data given in Table 3.4. Each column is a schematic description of an animal, based on the presence (= 1) or absence (= 0) of some of the 13 different attributes given on the left. Some attributes, such as “feathers” and “2 legs” are correlated, indicating more significant differences than the other attributes, but we shall not take this correlation into account in learning in any way. In the following, we will take each column for the input vector of the animal indicated at the top. The animal name itself does not belong to the vector but instead specifies the label of the animal in the calibration of the map.\nThe members of the data set were presented iteratively and in a random order to a SOM of 10 x 10 neurons subject to the adaptation process described above. The initial connection strengths between the neurons and their n = 29 input lines were chosen to be small random values, i.e. no prior order was imposed. However, after a total of 2000 presentations, each neuron became more or less responsive to one of the occuring attribute combinations and simultaneously to one of the 16 animal names, too. Thus we obtain the map shown in Fig. 3.22 (the dots indicate neurons with weaker responses). It In very apparent that the spatial order of the responses has captured the essential “family relationships\" among the animals, (lolls responding to, e.g.,\n"
      },
      "after": "5407d9db45903215",
      "date": 1674394919605
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "⇒ [[Map of a Binary Data Matrix]]"
      },
      "date": 1674394929057
    },
    {
      "id": "9e92f111721987e1",
      "type": "remove",
      "date": 1674394932992
    },
    {
      "id": "8da00e99a28fee18",
      "type": "remove",
      "date": 1674394946443
    },
    {
      "id": "7220cf7e1b3190ea",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7220cf7e1b3190ea",
        "text": "Idea: Overlay predator and prey dynamics on the map shown in Fig. 3.22."
      },
      "after": "5407d9db45903215",
      "date": 1674395480960
    },
    {
      "type": "edit",
      "id": "7220cf7e1b3190ea",
      "item": {
        "type": "paragraph",
        "id": "7220cf7e1b3190ea",
        "text": "Idea: Overlay [[predator and prey dynamics]] on the map shown in Fig. 3.22."
      },
      "date": 1674395490027
    },
    {
      "type": "edit",
      "id": "5407d9db45903215",
      "item": {
        "type": "paragraph",
        "id": "5407d9db45903215",
        "text": "⇒ [[Map of a Binary Data Matrix]] ⇒ [[Predator and Prey Dynamics]]"
      },
      "date": 1674395500083
    },
    {
      "type": "edit",
      "id": "7220cf7e1b3190ea",
      "item": {
        "type": "paragraph",
        "id": "7220cf7e1b3190ea",
        "text": "Idea: Overlay [[Predator and Prey Dynamics]] on the map shown in Fig. 3.22."
      },
      "date": 1674395503834
    },
    {
      "type": "edit",
      "id": "7220cf7e1b3190ea",
      "item": {
        "type": "paragraph",
        "id": "7220cf7e1b3190ea",
        "text": "**Idea**: Overlay [[Predator and Prey Dynamics]] on the map shown in Fig. 3.22."
      },
      "date": 1674395514744
    },
    {
      "type": "edit",
      "id": "7220cf7e1b3190ea",
      "item": {
        "type": "markdown",
        "id": "7220cf7e1b3190ea",
        "text": "**Idea**: Overlay [[Predator and Prey Dynamics]] on the map shown in Fig. 3.22."
      },
      "date": 1674395515976
    },
    {
      "type": "edit",
      "id": "7220cf7e1b3190ea",
      "item": {
        "type": "markdown",
        "id": "7220cf7e1b3190ea",
        "text": "**Idea**: Overlay [[Predator and Prey Dynamics]] on the map shown in Fig. 3.22. ⇒ [[Map of a Binary Data Matrix]]"
      },
      "date": 1674395532123
    },
    {
      "item": {
        "type": "factory",
        "id": "e986da649d9befef"
      },
      "id": "e986da649d9befef",
      "type": "add",
      "after": "7220cf7e1b3190ea",
      "date": 1674395985937
    },
    {
      "type": "remove",
      "id": "e986da649d9befef",
      "date": 1674395989882
    },
    {
      "item": {
        "type": "factory",
        "id": "bb053971ccb81dab"
      },
      "id": "bb053971ccb81dab",
      "type": "add",
      "after": "7220cf7e1b3190ea",
      "date": 1674395991701
    },
    {
      "type": "edit",
      "id": "bb053971ccb81dab",
      "item": {
        "type": "html",
        "id": "bb053971ccb81dab",
        "text": "<img\n  width=\"100%\"\n  src=\"https://wiki.ralfbarkow.ch/assets/pages/2023-01-22/2023-01-22.jpg\"\n>"
      },
      "date": 1674396005941
    },
    {
      "id": "bb053971ccb81dab",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "4995865dc1814102",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "b05d671a6a75d843",
        "1f9dc5639f6f3e28",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a",
        "35dffefd6e167aa9",
        "bb053971ccb81dab",
        "b479b96cf4f366a5",
        "4dc2128f18043cbf",
        "5407d9db45903215",
        "7220cf7e1b3190ea"
      ],
      "date": 1674396011204
    },
    {
      "type": "edit",
      "id": "7220cf7e1b3190ea",
      "item": {
        "type": "markdown",
        "id": "7220cf7e1b3190ea",
        "text": "**Idea**: Overlay [[Predator and Prey Dynamics]] on the map shown in Fig. 3.22 ⇒ [[Map of a Binary Data Matrix]]."
      },
      "date": 1674396082881
    },
    {
      "item": {
        "type": "factory",
        "id": "bbe101ac579e0eae"
      },
      "id": "bbe101ac579e0eae",
      "type": "add",
      "after": "7220cf7e1b3190ea",
      "date": 1674406889662
    },
    {
      "type": "edit",
      "id": "bbe101ac579e0eae",
      "item": {
        "type": "paragraph",
        "id": "bbe101ac579e0eae",
        "text": "Self-Organizing Map in Pure Javascript"
      },
      "date": 1674406893082
    },
    {
      "type": "edit",
      "id": "bbe101ac579e0eae",
      "item": {
        "type": "paragraph",
        "id": "bbe101ac579e0eae",
        "text": "Self-Organizing Map in Pure Javascript [https://chenhunghan.github.io/som.js/ github.io]"
      },
      "date": 1674406910821
    },
    {
      "type": "edit",
      "id": "bbe101ac579e0eae",
      "item": {
        "type": "paragraph",
        "id": "bbe101ac579e0eae",
        "text": "Self-Organizing Map in Pure Javascript [https://chenhunghan.github.io/som.js/ github.io], [https://web.archive.org/web/20150128161500/https://docs.unigrafia.fi/publications/kohonen_teuvo/MATLAB_implementations_and_applications_of_the_self_organizing_map.pdf pdf]"
      },
      "date": 1674407561117
    },
    {
      "type": "edit",
      "id": "bbe101ac579e0eae",
      "item": {
        "type": "paragraph",
        "id": "bbe101ac579e0eae",
        "text": "Self-Organizing Map in Pure Javascript [https://chenhunghan.github.io/som.js/ github.io], [https://web.archive.org/web/20150128161500/https://docs.unigrafia.fi/publications/kohonen_teuvo/MATLAB_implementations_and_applications_of_the_self_organizing_map.pdf pdf], [https://github.com/chenhunghan/som.js github]"
      },
      "date": 1674407732239
    },
    {
      "item": {
        "type": "factory",
        "id": "aa39d131b718225e"
      },
      "id": "aa39d131b718225e",
      "type": "add",
      "after": "bbe101ac579e0eae",
      "date": 1674407876276
    },
    {
      "type": "edit",
      "id": "aa39d131b718225e",
      "item": {
        "type": "paragraph",
        "id": "aa39d131b718225e",
        "text": "Node-som"
      },
      "date": 1674407879540
    },
    {
      "type": "edit",
      "id": "aa39d131b718225e",
      "item": {
        "type": "paragraph",
        "id": "aa39d131b718225e",
        "text": "Node-som [https://deepelement.github.io/node-som/ github.io]"
      },
      "date": 1674407896400
    },
    {
      "item": {
        "type": "factory",
        "id": "50e879a2d8d541bf"
      },
      "id": "50e879a2d8d541bf",
      "type": "add",
      "after": "aa39d131b718225e",
      "date": 1674410042042
    },
    {
      "type": "edit",
      "id": "50e879a2d8d541bf",
      "item": {
        "type": "paragraph",
        "id": "50e879a2d8d541bf",
        "text": "Application of Self-Organizing Map to stellar spectral\nclassifications "
      },
      "date": 1674410046294
    },
    {
      "type": "edit",
      "id": "50e879a2d8d541bf",
      "item": {
        "type": "paragraph",
        "id": "50e879a2d8d541bf",
        "text": "Application of Self-Organizing Map to stellar spectral\nclassifications [https://arxiv.org/pdf/1108.0514v1.pdf pdf]"
      },
      "date": 1674410062636
    },
    {
      "item": {
        "type": "factory",
        "id": "cb69197805d48bb8"
      },
      "id": "cb69197805d48bb8",
      "type": "add",
      "after": "50e879a2d8d541bf",
      "date": 1674410368270
    },
    {
      "type": "edit",
      "id": "cb69197805d48bb8",
      "item": {
        "type": "paragraph",
        "id": "cb69197805d48bb8",
        "text": "https://seracio.github.io/kohonen-stars/ "
      },
      "date": 1674410378405
    },
    {
      "item": {
        "type": "factory",
        "id": "1061d4876036dc7d"
      },
      "id": "1061d4876036dc7d",
      "type": "add",
      "after": "cb69197805d48bb8",
      "date": 1674410445940
    },
    {
      "type": "edit",
      "id": "1061d4876036dc7d",
      "item": {
        "type": "paragraph",
        "id": "1061d4876036dc7d",
        "text": " map a dataset from a multidimensional space into a 2d hexagonal grid of neurons \n* and a script to draw the hexagonal grid\n"
      },
      "date": 1674410452092
    },
    {
      "type": "edit",
      "id": "1061d4876036dc7d",
      "item": {
        "type": "paragraph",
        "id": "1061d4876036dc7d",
        "text": "⇒ [[map]] a dataset from a multidimensional space into a 2d hexagonal grid of neurons \n* and a script to draw the hexagonal grid\n"
      },
      "date": 1674410465649
    },
    {
      "type": "edit",
      "id": "1061d4876036dc7d",
      "item": {
        "type": "paragraph",
        "id": "1061d4876036dc7d",
        "text": "⇒ [[[Map a Dataset]] from a multidimensional space into a 2d hexagonal grid of neurons \n* and a script to draw the hexagonal grid\n"
      },
      "date": 1674410524159
    },
    {
      "type": "edit",
      "id": "1061d4876036dc7d",
      "item": {
        "type": "paragraph",
        "id": "1061d4876036dc7d",
        "text": "⇒ [[Map a Dataset]] from a multidimensional space into a 2d hexagonal grid of neurons \n* and a script to draw the hexagonal grid\n"
      },
      "date": 1674410529744
    },
    {
      "type": "edit",
      "id": "1061d4876036dc7d",
      "item": {
        "type": "paragraph",
        "id": "1061d4876036dc7d",
        "text": "⇒ [[Map a Dataset]] "
      },
      "date": 1674410541360
    },
    {
      "type": "add",
      "id": "2274e3ab04fa8fb6",
      "item": {
        "type": "paragraph",
        "id": "2274e3ab04fa8fb6",
        "text": "from a multidimensional space into a 2d hexagonal grid of neurons \n* and a script to draw the hexagonal grid\n"
      },
      "after": "1061d4876036dc7d",
      "date": 1674410541842
    },
    {
      "type": "edit",
      "id": "2274e3ab04fa8fb6",
      "item": {
        "type": "paragraph",
        "id": "2274e3ab04fa8fb6",
        "text": "from a multidimensional space into a 2d hexagonal grid of neurons and a script to draw the hexagonal grid\n"
      },
      "date": 1674410566952
    },
    {
      "type": "add",
      "id": "fc3ec4d60981338f",
      "item": {
        "type": "paragraph",
        "id": "fc3ec4d60981338f",
        "text": "https://www.npmjs.com/search?q=kohonen"
      },
      "after": "50e879a2d8d541bf",
      "date": 1674410640259
    },
    {
      "type": "add",
      "id": "990dac1a4487c1bf",
      "item": {
        "type": "paragraph",
        "id": "990dac1a4487c1bf",
        "text": "A basic implementation of a Kohonen map in JavaScript"
      },
      "after": "fc3ec4d60981338f",
      "date": 1674410678267
    },
    {
      "type": "edit",
      "id": "990dac1a4487c1bf",
      "item": {
        "type": "paragraph",
        "id": "990dac1a4487c1bf",
        "text": "A basic implementation of a Kohonen map in JavaScript [https://github.com/seracio/kohonen github]"
      },
      "date": 1674410705042
    },
    {
      "item": {
        "type": "factory",
        "id": "19a5996c3c8b4073"
      },
      "id": "19a5996c3c8b4073",
      "type": "add",
      "after": "2274e3ab04fa8fb6",
      "date": 1674410829205
    },
    {
      "type": "edit",
      "id": "19a5996c3c8b4073",
      "item": {
        "type": "paragraph",
        "id": "19a5996c3c8b4073",
        "text": "principal component analysis "
      },
      "date": 1674410833141
    },
    {
      "type": "edit",
      "id": "19a5996c3c8b4073",
      "item": {
        "type": "paragraph",
        "id": "19a5996c3c8b4073",
        "text": "principal component analysis [https://stats.stackexchange.com/questions/143905/loadings-vs-eigenvectors-in-pca-when-to-use-one-or-another stackexchange]"
      },
      "date": 1674410896547
    },
    {
      "type": "edit",
      "id": "19a5996c3c8b4073",
      "item": {
        "type": "paragraph",
        "id": "19a5996c3c8b4073",
        "text": "[[Principal Component Analysis]] [https://stats.stackexchange.com/questions/143905/loadings-vs-eigenvectors-in-pca-when-to-use-one-or-another stackexchange]"
      },
      "date": 1674410912991
    },
    {
      "type": "edit",
      "id": "19a5996c3c8b4073",
      "item": {
        "type": "paragraph",
        "id": "19a5996c3c8b4073",
        "text": "⇒ [[Principal Component Analysis]] [https://stats.stackexchange.com/questions/143905/loadings-vs-eigenvectors-in-pca-when-to-use-one-or-another stackexchange]"
      },
      "date": 1674410925900
    },
    {
      "item": {
        "type": "factory",
        "id": "24c3452a4176a2bc"
      },
      "id": "24c3452a4176a2bc",
      "type": "add",
      "after": "19a5996c3c8b4073",
      "date": 1674411474841
    },
    {
      "type": "edit",
      "id": "24c3452a4176a2bc",
      "item": {
        "type": "pagefold",
        "id": "24c3452a4176a2bc",
        "text": " seracio "
      },
      "date": 1674411477146
    },
    {
      "type": "edit",
      "id": "24c3452a4176a2bc",
      "item": {
        "type": "pagefold",
        "id": "24c3452a4176a2bc",
        "text": "seracio"
      },
      "date": 1674411484005
    },
    {
      "id": "24c3452a4176a2bc",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "4995865dc1814102",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "b05d671a6a75d843",
        "1f9dc5639f6f3e28",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a",
        "35dffefd6e167aa9",
        "bb053971ccb81dab",
        "b479b96cf4f366a5",
        "4dc2128f18043cbf",
        "5407d9db45903215",
        "7220cf7e1b3190ea",
        "bbe101ac579e0eae",
        "aa39d131b718225e",
        "50e879a2d8d541bf",
        "fc3ec4d60981338f",
        "24c3452a4176a2bc",
        "990dac1a4487c1bf",
        "cb69197805d48bb8",
        "1061d4876036dc7d",
        "2274e3ab04fa8fb6",
        "19a5996c3c8b4073"
      ],
      "date": 1674411487459
    },
    {
      "item": {
        "type": "factory",
        "id": "4429784b8b7546d7"
      },
      "id": "4429784b8b7546d7",
      "type": "add",
      "after": "19a5996c3c8b4073",
      "date": 1674419184205
    },
    {
      "type": "edit",
      "id": "4429784b8b7546d7",
      "item": {
        "type": "html",
        "id": "4429784b8b7546d7",
        "text": "<img\n  width=\"100%\"\n  src=\"https://camo.githubusercontent.com/ca56e71212130599851e81a5742437ee0538d480e902dcd03f0361023eeeabe9/68747470733a2f2f63646e2e7261776769742e636f6d2f7365726163696f2f6b6f686f6e656e2d73746172732f6d61737465722f696d616765732f636170747572652e737667\"\n>"
      },
      "date": 1674419198776
    },
    {
      "id": "4429784b8b7546d7",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "4995865dc1814102",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "b05d671a6a75d843",
        "1f9dc5639f6f3e28",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a",
        "35dffefd6e167aa9",
        "bb053971ccb81dab",
        "b479b96cf4f366a5",
        "4dc2128f18043cbf",
        "5407d9db45903215",
        "7220cf7e1b3190ea",
        "bbe101ac579e0eae",
        "aa39d131b718225e",
        "50e879a2d8d541bf",
        "fc3ec4d60981338f",
        "24c3452a4176a2bc",
        "990dac1a4487c1bf",
        "cb69197805d48bb8",
        "4429784b8b7546d7",
        "1061d4876036dc7d",
        "2274e3ab04fa8fb6",
        "19a5996c3c8b4073"
      ],
      "date": 1674419202465
    },
    {
      "item": {
        "type": "factory",
        "id": "779a146c75d1dd13"
      },
      "id": "779a146c75d1dd13",
      "type": "add",
      "after": "19a5996c3c8b4073",
      "date": 1674420245955
    },
    {
      "type": "edit",
      "id": "779a146c75d1dd13",
      "item": {
        "type": "paragraph",
        "id": "779a146c75d1dd13",
        "text": "Jeff Miller\nitems of work coming out of Sunday Explorers, consider the SVG background for rendering a node with a stacked bar chart based on the SoFi indications"
      },
      "date": 1674420251302
    },
    {
      "id": "779a146c75d1dd13",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "4995865dc1814102",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "b05d671a6a75d843",
        "1f9dc5639f6f3e28",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a",
        "35dffefd6e167aa9",
        "bb053971ccb81dab",
        "b479b96cf4f366a5",
        "4dc2128f18043cbf",
        "5407d9db45903215",
        "7220cf7e1b3190ea",
        "779a146c75d1dd13",
        "bbe101ac579e0eae",
        "aa39d131b718225e",
        "50e879a2d8d541bf",
        "fc3ec4d60981338f",
        "24c3452a4176a2bc",
        "990dac1a4487c1bf",
        "cb69197805d48bb8",
        "4429784b8b7546d7",
        "1061d4876036dc7d",
        "2274e3ab04fa8fb6",
        "19a5996c3c8b4073"
      ],
      "date": 1674420257096
    },
    {
      "item": {
        "type": "factory",
        "id": "bde358d517b4d428"
      },
      "id": "bde358d517b4d428",
      "type": "add",
      "after": "19a5996c3c8b4073",
      "date": 1674420262694
    },
    {
      "type": "edit",
      "id": "bde358d517b4d428",
      "item": {
        "type": "pagefold",
        "id": "bde358d517b4d428",
        "text": "~"
      },
      "date": 1674420265671
    },
    {
      "id": "bde358d517b4d428",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "4995865dc1814102",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "b05d671a6a75d843",
        "1f9dc5639f6f3e28",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a",
        "35dffefd6e167aa9",
        "bb053971ccb81dab",
        "b479b96cf4f366a5",
        "4dc2128f18043cbf",
        "5407d9db45903215",
        "7220cf7e1b3190ea",
        "bde358d517b4d428",
        "779a146c75d1dd13",
        "bbe101ac579e0eae",
        "aa39d131b718225e",
        "50e879a2d8d541bf",
        "fc3ec4d60981338f",
        "24c3452a4176a2bc",
        "990dac1a4487c1bf",
        "cb69197805d48bb8",
        "4429784b8b7546d7",
        "1061d4876036dc7d",
        "2274e3ab04fa8fb6",
        "19a5996c3c8b4073"
      ],
      "date": 1674420270029
    },
    {
      "item": {
        "type": "factory",
        "id": "8cf66287e7da6527"
      },
      "id": "8cf66287e7da6527",
      "type": "add",
      "after": "19a5996c3c8b4073",
      "date": 1674420272700
    },
    {
      "type": "edit",
      "id": "8cf66287e7da6527",
      "item": {
        "type": "pagefold",
        "id": "8cf66287e7da6527",
        "text": "~"
      },
      "date": 1674420275886
    },
    {
      "id": "8cf66287e7da6527",
      "type": "move",
      "order": [
        "ac6e927e2c4c6860",
        "bca9f0686fd15e1a",
        "4995865dc1814102",
        "7e3d3aea8d79b214",
        "b4c1fe94f73b6268",
        "b05d671a6a75d843",
        "1f9dc5639f6f3e28",
        "6ebe8001891e6c31",
        "2e01b033a2494f7a",
        "35dffefd6e167aa9",
        "bb053971ccb81dab",
        "b479b96cf4f366a5",
        "4dc2128f18043cbf",
        "5407d9db45903215",
        "7220cf7e1b3190ea",
        "bde358d517b4d428",
        "779a146c75d1dd13",
        "8cf66287e7da6527",
        "bbe101ac579e0eae",
        "aa39d131b718225e",
        "50e879a2d8d541bf",
        "fc3ec4d60981338f",
        "24c3452a4176a2bc",
        "990dac1a4487c1bf",
        "cb69197805d48bb8",
        "4429784b8b7546d7",
        "1061d4876036dc7d",
        "2274e3ab04fa8fb6",
        "19a5996c3c8b4073"
      ],
      "date": 1674420282573
    },
    {
      "type": "edit",
      "id": "779a146c75d1dd13",
      "item": {
        "type": "paragraph",
        "id": "779a146c75d1dd13",
        "text": "Jeff Miller via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$167441881277037brQAf:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nitems of work coming out of Sunday Explorers, consider the SVG background for rendering a node with a stacked bar chart based on the SoFi indications"
      },
      "date": 1674420301837
    },
    {
      "type": "add",
      "id": "d4839fc9cb8297a2",
      "item": {
        "type": "paragraph",
        "id": "d4839fc9cb8297a2",
        "text": "Since the SOM belongs to the category of "
      },
      "after": "b479b96cf4f366a5",
      "date": 1674453724401
    },
    {
      "type": "edit",
      "id": "d4839fc9cb8297a2",
      "item": {
        "type": "paragraph",
        "id": "d4839fc9cb8297a2",
        "text": "Since the SOM belongs to the category of [[Vector Quantization]] (VQ) methods, the starting point must be some kind of quantization error in the vector space. (p. 118)"
      },
      "date": 1674453770748
    },
    {
      "type": "edit",
      "id": "d4839fc9cb8297a2",
      "item": {
        "type": "paragraph",
        "id": "d4839fc9cb8297a2",
        "text": "Since the SOM belongs to the category of [[Vector Quantization]] (VQ) methods, the starting point must be some kind of quantization error in the vector space. (KOHONEN, Teuvo, 1995. Self-organizing maps, p. 118)"
      },
      "date": 1674453902804
    }
  ]
}