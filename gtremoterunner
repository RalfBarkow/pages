{
  "title": "GtRemoteRunner",
  "story": [
    {
      "type": "markdown",
      "id": "17efacdaec746bbd",
      "text": "GtRemoteRunner manages the running of tasks, such as tests or examples, in a distributed system across one or more machines.\n\nThe original scenarios used to design the  system were:\n\n- Individual developer: A developer is working in an image and wants to run tasks in one or more worker images on their local machine.\n- Internal team: A team of developers are working, and pool their worker images for common use.\n- CI: An automated system runs all tasks on all supported platforms, e.g. linux, mac, windows, on each commit.\n\nFeatures of the system (mostly not yet implemented) include:\n\n- Handling of the scenarios described above.\n- Support for running tests / examples across multiple platforms.\n- Timeouts on:\n  - Tasks\n  - Workers\n  - Jobs\n  \n### Main Components\n\nThe main components of the system are:\n\n- {{gtClass:GtRemoteRunner}} provides the primary interface to the system and the main control.\n- A {{gtClass:GtRrWorker}} is created for each client image that will run tests or examples.\n- A {{gtClass:GtRrJob}} is submitted by users for each collection or tests or examples to be executed.  The user will be notified of the progress of the job.  A {{gtClass:GtRrJob}} contains one or more {{gtClass:GtRrTask}}s.\n\n### Phases\n\nThe following phases are defined as part of the system.  Each of these phases is pluggable, so can be customised for individual scenarios:\n\n- Manager Startup: this is run once when the manager starts.  It may be used to start worker machines, etc.\n- Job Startup: this may include starting the worker images on the worker machines.\n- Job Execution: the phase where tests / examples are being handed out to the workers.\n- Job Shutdown: this may include stopping the worker images on the worker machines.\n- Manager shutdown: this is run once when the manager is stopped.  It may be used to shut down worker machines, etc.\n\nThe worker images are assumed to be up to date when the Job Execution phase is run.\n\n### Implementation Points\n\n`sharedAccess` is a mutual exclusion semaphore used to control access to: `availableWorkers`, `jobQueue`, `currentlyExecutingJobs`, `taskPromises` and `registeredWorkers`.\n\n### Futures\n\n- Retry tasks if the worker disappears.\n  - The retry is on the assumption that the worker crashed from an external cause, or the network was lost.\n  - Only 1 or 2 retries should be attempted in case it is the test that is causing the crash."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "GtRemoteRunner",
        "story": []
      },
      "date": 1661335682730
    },
    {
      "item": {
        "type": "factory",
        "id": "17efacdaec746bbd"
      },
      "id": "17efacdaec746bbd",
      "type": "add",
      "date": 1661335687112
    },
    {
      "type": "edit",
      "id": "17efacdaec746bbd",
      "item": {
        "type": "markdown",
        "id": "17efacdaec746bbd",
        "text": "GtRemoteRunner manages the running of tasks, such as tests or examples, in a distributed system across one or more machines.\n\nThe original scenarios used to design the  system were:\n\n- Individual developer: A developer is working in an image and wants to run tasks in one or more worker images on their local machine.\n- Internal team: A team of developers are working, and pool their worker images for common use.\n- CI: An automated system runs all tasks on all supported platforms, e.g. linux, mac, windows, on each commit.\n\nFeatures of the system (mostly not yet implemented) include:\n\n- Handling of the scenarios described above.\n- Support for running tests / examples across multiple platforms.\n- Timeouts on:\n  - Tasks\n  - Workers\n  - Jobs\n  \n### Main Components\n\nThe main components of the system are:\n\n- {{gtClass:GtRemoteRunner}} provides the primary interface to the system and the main control.\n- A {{gtClass:GtRrWorker}} is created for each client image that will run tests or examples.\n- A {{gtClass:GtRrJob}} is submitted by users for each collection or tests or examples to be executed.  The user will be notified of the progress of the job.  A {{gtClass:GtRrJob}} contains one or more {{gtClass:GtRrTask}}s.\n\n### Phases\n\nThe following phases are defined as part of the system.  Each of these phases is pluggable, so can be customised for individual scenarios:\n\n- Manager Startup: this is run once when the manager starts.  It may be used to start worker machines, etc.\n- Job Startup: this may include starting the worker images on the worker machines.\n- Job Execution: the phase where tests / examples are being handed out to the workers.\n- Job Shutdown: this may include stopping the worker images on the worker machines.\n- Manager shutdown: this is run once when the manager is stopped.  It may be used to shut down worker machines, etc.\n\nThe worker images are assumed to be up to date when the Job Execution phase is run.\n\n### Implementation Points\n\n`sharedAccess` is a mutual exclusion semaphore used to control access to: `availableWorkers`, `jobQueue`, `currentlyExecutingJobs`, `taskPromises` and `registeredWorkers`.\n\n### Futures\n\n- Retry tasks if the worker disappears.\n  - The retry is on the assumption that the worker crashed from an external cause, or the network was lost.\n  - Only 1 or 2 retries should be attempted in case it is the test that is causing the crash."
      },
      "date": 1661335689201
    }
  ]
}