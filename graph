{
  "title": "Graph",
  "story": [
    {
      "type": "markdown",
      "id": "6cbc0856f1310861",
      "text": "[[Croquet]] requires that the replicated [[Model]] declare what classes will be present in the data that it is replicating.  In our case that list is short: [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/beam.js#L30-L36 github]. \n"
    },
    {
      "type": "code",
      "id": "eb775d62337786e5",
      "text": "  static types() {\n    return {\n      \"Graph\": Graph\n    };\n  }\n"
    },
    {
      "type": "markdown",
      "id": "c24d194d1c10784f",
      "text": "This is what makes [[Hypertext Super Collaborator]] a very simple program. Everything we do is done with that one object. Even our schema are constructed out of this one object. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1664121042189676DnHlh:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n"
    },
    {
      "type": "pagefold",
      "id": "3d85a3dca66852a2",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "85aad1db218e256b",
      "text": "* [[Property Graph]] ⇒ [[Fork Network Graph]] ⇒ [[Network Dialect]]"
    },
    {
      "type": "markdown",
      "id": "e97743ba914a329a",
      "text": "Property Graphs Explained. [http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphDataModeling/page/PropertyGraphs.html page] ⇒ What is a *Graph* anyway?"
    },
    {
      "type": "graphviz",
      "id": "9d8d05ec7de1a199",
      "text": "DOT strict digraph\n  \nrankdir=LR\n\n  node [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n  HERE NODE\n\n    node [style=filled fillcolor=lightblue]\n    WHERE /^⇒/\n      LINKS HERE -> NODE\n          node [style=filled fillcolor=white]\n          HERE NODE\n            WHERE /^⇒/\n              LINKS HERE -> NODE\n\n    node [style=filled fillcolor=white penwidth=3 color=black]\n    LINKS HERE -> NODE\n       node [style=filled fillcolor=white penwidth=1 color=black]\n       HERE NODE\n         LINKS HERE -> NODE\n\n   node [style=\"filled,rounded,dotted\" fillcolor=white]\n   edge [style=dotted]\n   HERE NODE\n      BACKLINKS NODE -> HERE",
      "dot": "strict digraph {rankdir=LR\n\n\n\n\n\nnode [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n\"Graph\"\nnode [style=filled fillcolor=lightblue]\nnode [style=filled fillcolor=white penwidth=3 color=black]\n\"Graph\" -> \"Croquet\"\n\"Graph\" -> \"Hypertext\nSuper\nCollaborator\"\n\"Graph\" -> \"Property\nGraph\"\n\"Graph\" -> \"Fork\nNetwork\nGraph\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Croquet\"\n\"Croquet\" -> \"Vanessa\nFreudenberg\"\n\"Croquet\" -> \"Reflector\"\n\"Croquet\" -> \"Smalltalk\"\n\"Croquet\" -> \"Croquet\nTutorial\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Hypertext\nSuper\nCollaborator\"\n\"Hypertext\nSuper\nCollaborator\" -> \"About\nThis\nIdea\"\n\"Hypertext\nSuper\nCollaborator\" -> \"How\nTo\nGet\nStarted\"\n\"Hypertext\nSuper\nCollaborator\" -> \"Scheduled\nEvents\"\n\"Hypertext\nSuper\nCollaborator\" -> \"Command\nLine\nTools\"\n\"Hypertext\nSuper\nCollaborator\" -> \"Catalog\nof\nUseful\nSchema\"\n\"Hypertext\nSuper\nCollaborator\" -> \"Tips\nfor\nMatching\nwith\nCypher\"\n\"Hypertext\nSuper\nCollaborator\" -> \"Jeff\nMiller\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Property\nGraph\"\n\"Property\nGraph\" -> \"Fact\nModeling\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Fork\nNetwork\nGraph\"\n\"Fork\nNetwork\nGraph\" -> \"Graph\nViewer\"\n\"Fork\nNetwork\nGraph\" -> \"Fork\nNetwork\nRoundabout\"\n\"Fork\nNetwork\nGraph\" -> \"Strongly\nConnected\nComponents\"\nnode [style=\"filled,rounded,dotted\" fillcolor=white]\nedge [style=dotted]\n\"Graph\"\n\"2022-05-07\" -> \"Graph\"\n\"create\" -> \"Graph\"\n\"Graph\" -> \"Graph\"\n\"Journal,\nMay\n2022\" -> \"Graph\"\n\"Power\nof\nExponential\" -> \"Graph\"\n\"Vertex\" -> \"Graph\"\n\"2022-09-26\" -> \"Graph\"\n\"Feature\nComparison\" -> \"Graph\"}",
      "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.44.0 (20200518.1210)\n -->\n<!-- Pages: 1 -->\n<svg width=\"587pt\" height=\"1358pt\"\n viewBox=\"0.00 0.00 587.45 1357.71\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 1353.71)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-1353.71 583.45,-1353.71 583.45,4 -4,4\"/>\n<!-- Graph -->\n<g id=\"node1\" class=\"node\">\n<title>Graph</title>\n<ellipse fill=\"lightyellow\" stroke=\"black\" stroke-width=\"3\" cx=\"203.19\" cy=\"-495.3\" rx=\"37.74\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"203.19\" y=\"-491.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Graph</text>\n</g>\n<!-- Graph&#45;&gt;Graph -->\n<g id=\"edge22\" class=\"edge\">\n<title>Graph&#45;&gt;Graph</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M180.38,-509.71C172.41,-520.46 180.01,-531.3 203.19,-531.3 219.13,-531.3 227.71,-526.17 228.92,-519.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"232.22,-518.3 226.01,-509.71 225.51,-520.29 232.22,-518.3\"/>\n</g>\n<!-- Croquet -->\n<g id=\"node2\" class=\"node\">\n<title>Croquet</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"342.28\" cy=\"-1201.3\" rx=\"45.26\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-1197.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Croquet</text>\n</g>\n<!-- Graph&#45;&gt;Croquet -->\n<g id=\"edge1\" class=\"edge\">\n<title>Graph&#45;&gt;Croquet</title>\n<path fill=\"none\" stroke=\"black\" d=\"M207.72,-513.46C226.33,-609.31 313.15,-1056.45 335.84,-1173.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"332.43,-1174.1 337.77,-1183.25 339.3,-1172.77 332.43,-1174.1\"/>\n</g>\n<!-- Hypertext\nSuper\nCollaborator -->\n<g id=\"node3\" class=\"node\">\n<title>Hypertext\nSuper\nCollaborator</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"342.28\" cy=\"-689.3\" rx=\"65.43\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-701.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Hypertext</text>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-685.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Super</text>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-668.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Collaborator</text>\n</g>\n<!-- Graph&#45;&gt;Hypertext\nSuper\nCollaborator -->\n<g id=\"edge2\" class=\"edge\">\n<title>Graph&#45;&gt;Hypertext\nSuper\nCollaborator</title>\n<path fill=\"none\" stroke=\"black\" d=\"M216.36,-512.51C236.9,-541.57 279.1,-601.3 308.74,-643.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"306.05,-645.51 314.68,-651.66 311.77,-641.47 306.05,-645.51\"/>\n</g>\n<!-- Property\nGraph -->\n<g id=\"node4\" class=\"node\">\n<title>Property\nGraph</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"342.28\" cy=\"-333.3\" rx=\"48.93\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-337.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Property</text>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-320.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Graph</text>\n</g>\n<!-- Graph&#45;&gt;Property\nGraph -->\n<g id=\"edge3\" class=\"edge\">\n<title>Graph&#45;&gt;Property\nGraph</title>\n<path fill=\"none\" stroke=\"black\" d=\"M218.35,-478.57C240.45,-452.45 283.61,-401.44 312.45,-367.36\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"315.3,-369.41 319.09,-359.51 309.96,-364.89 315.3,-369.41\"/>\n</g>\n<!-- Fork\nNetwork\nGraph -->\n<g id=\"node5\" class=\"node\">\n<title>Fork\nNetwork\nGraph</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"342.28\" cy=\"-206.3\" rx=\"47.72\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-218.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Fork</text>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-202.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Network</text>\n<text text-anchor=\"middle\" x=\"342.28\" y=\"-185.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Graph</text>\n</g>\n<!-- Graph&#45;&gt;Fork\nNetwork\nGraph -->\n<g id=\"edge4\" class=\"edge\">\n<title>Graph&#45;&gt;Fork\nNetwork\nGraph</title>\n<path fill=\"none\" stroke=\"black\" d=\"M208.89,-477.49C218.71,-441.68 243.33,-358.97 277.06,-295.3 285.71,-278.97 297.02,-262.24 307.74,-247.76\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"310.73,-249.6 313.95,-239.51 305.14,-245.39 310.73,-249.6\"/>\n</g>\n<!-- Vanessa\nFreudenberg -->\n<g id=\"node6\" class=\"node\">\n<title>Vanessa\nFreudenberg</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-1320.3\" rx=\"67.95\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1324.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Vanessa</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1307.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Freudenberg</text>\n</g>\n<!-- Croquet&#45;&gt;Vanessa\nFreudenberg -->\n<g id=\"edge5\" class=\"edge\">\n<title>Croquet&#45;&gt;Vanessa\nFreudenberg</title>\n<path fill=\"none\" stroke=\"black\" d=\"M361.77,-1217.79C381.36,-1234.88 413.54,-1261.89 443.49,-1282.3 448.45,-1285.67 453.72,-1289.03 459.05,-1292.27\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"457.64,-1295.51 468.03,-1297.61 461.22,-1289.49 457.64,-1295.51\"/>\n</g>\n<!-- Reflector -->\n<g id=\"node7\" class=\"node\">\n<title>Reflector</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-1255.3\" rx=\"49.83\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1251.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Reflector</text>\n</g>\n<!-- Croquet&#45;&gt;Reflector -->\n<g id=\"edge6\" class=\"edge\">\n<title>Croquet&#45;&gt;Reflector</title>\n<path fill=\"none\" stroke=\"black\" d=\"M377.92,-1212.48C402.88,-1220.55 436.83,-1231.51 464.12,-1240.33\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"463.25,-1243.72 473.84,-1243.47 465.4,-1237.06 463.25,-1243.72\"/>\n</g>\n<!-- Smalltalk -->\n<g id=\"node8\" class=\"node\">\n<title>Smalltalk</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-1201.3\" rx=\"50.4\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1197.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Smalltalk</text>\n</g>\n<!-- Croquet&#45;&gt;Smalltalk -->\n<g id=\"edge7\" class=\"edge\">\n<title>Croquet&#45;&gt;Smalltalk</title>\n<path fill=\"none\" stroke=\"black\" d=\"M388.08,-1201.3C407.36,-1201.3 430.18,-1201.3 450.86,-1201.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"451.13,-1204.8 461.13,-1201.3 451.13,-1197.8 451.13,-1204.8\"/>\n</g>\n<!-- Croquet\nTutorial -->\n<g id=\"node9\" class=\"node\">\n<title>Croquet\nTutorial</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-1136.3\" rx=\"46.54\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1140.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Croquet</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1123.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Tutorial</text>\n</g>\n<!-- Croquet&#45;&gt;Croquet\nTutorial -->\n<g id=\"edge8\" class=\"edge\">\n<title>Croquet&#45;&gt;Croquet\nTutorial</title>\n<path fill=\"none\" stroke=\"black\" d=\"M375.51,-1188.76C399.96,-1179.26 433.97,-1166.03 461.74,-1155.24\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"463.22,-1158.42 471.27,-1151.53 460.68,-1151.9 463.22,-1158.42\"/>\n</g>\n<!-- About\nThis\nIdea -->\n<g id=\"node10\" class=\"node\">\n<title>About\nThis\nIdea</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-1047.3\" rx=\"37.35\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1059.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">About</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1043.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">This</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-1026.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Idea</text>\n</g>\n<!-- Hypertext\nSuper\nCollaborator&#45;&gt;About\nThis\nIdea -->\n<g id=\"edge9\" class=\"edge\">\n<title>Hypertext\nSuper\nCollaborator&#45;&gt;About\nThis\nIdea</title>\n<path fill=\"none\" stroke=\"black\" d=\"M348.57,-730.52C358.29,-793.21 383.78,-914.01 443.49,-997.3 450.49,-1007.05 459.96,-1015.73 469.58,-1023\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"467.84,-1026.06 478.01,-1029.02 471.9,-1020.36 467.84,-1026.06\"/>\n</g>\n<!-- How\nTo\nGet\nStarted -->\n<g id=\"node11\" class=\"node\">\n<title>How\nTo\nGet\nStarted</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-935.3\" rx=\"43.45\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-956.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">How</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-939.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">To</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-922.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Get</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-905.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Started</text>\n</g>\n<!-- Hypertext\nSuper\nCollaborator&#45;&gt;How\nTo\nGet\nStarted -->\n<g id=\"edge10\" class=\"edge\">\n<title>Hypertext\nSuper\nCollaborator&#45;&gt;How\nTo\nGet\nStarted</title>\n<path fill=\"none\" stroke=\"black\" d=\"M360.53,-728.95C378.31,-767.56 408.36,-826.89 443.49,-872.3 450.67,-881.57 459.24,-890.71 467.82,-899.03\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"465.65,-901.8 475.33,-906.12 470.46,-896.71 465.65,-901.8\"/>\n</g>\n<!-- Scheduled\nEvents -->\n<g id=\"node12\" class=\"node\">\n<title>Scheduled\nEvents</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-834.3\" rx=\"58.16\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-838.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Scheduled</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-821.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Events</text>\n</g>\n<!-- Hypertext\nSuper\nCollaborator&#45;&gt;Scheduled\nEvents -->\n<g id=\"edge11\" class=\"edge\">\n<title>Hypertext\nSuper\nCollaborator&#45;&gt;Scheduled\nEvents</title>\n<path fill=\"none\" stroke=\"black\" d=\"M373.46,-726.19C392.25,-747.83 417.69,-774.84 443.49,-795.3 449.15,-799.78 455.37,-804.09 461.68,-808.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"459.93,-811.15 470.28,-813.41 463.6,-805.19 459.93,-811.15\"/>\n</g>\n<!-- Command\nLine\nTools -->\n<g id=\"node13\" class=\"node\">\n<title>Command\nLine\nTools</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-745.3\" rx=\"56.93\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-757.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Command</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-741.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Line</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-724.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Tools</text>\n</g>\n<!-- Hypertext\nSuper\nCollaborator&#45;&gt;Command\nLine\nTools -->\n<g id=\"edge12\" class=\"edge\">\n<title>Hypertext\nSuper\nCollaborator&#45;&gt;Command\nLine\nTools</title>\n<path fill=\"none\" stroke=\"black\" d=\"M400.35,-708.41C416.25,-713.74 433.58,-719.54 449.69,-724.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"448.94,-728.38 459.54,-728.24 451.17,-721.74 448.94,-728.38\"/>\n</g>\n<!-- Catalog\nof\nUseful\nSchema -->\n<g id=\"node14\" class=\"node\">\n<title>Catalog\nof\nUseful\nSchema</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-633.3\" rx=\"47.74\" ry=\"53.35\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-654.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Catalog</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-637.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-620.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Useful</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-603.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Schema</text>\n</g>\n<!-- Hypertext\nSuper\nCollaborator&#45;&gt;Catalog\nof\nUseful\nSchema -->\n<g id=\"edge13\" class=\"edge\">\n<title>Hypertext\nSuper\nCollaborator&#45;&gt;Catalog\nof\nUseful\nSchema</title>\n<path fill=\"none\" stroke=\"black\" d=\"M400.35,-670.18C418.31,-664.16 438.09,-657.54 455.87,-651.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"457.15,-654.85 465.52,-648.35 454.93,-648.21 457.15,-654.85\"/>\n</g>\n<!-- Tips\nfor\nMatching\nwith\nCypher -->\n<g id=\"node15\" class=\"node\">\n<title>Tips\nfor\nMatching\nwith\nCypher</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-497.3\" rx=\"51.44\" ry=\"65.11\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-526.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Tips</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-509.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">for</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-493.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Matching</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-476.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">with</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-459.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Cypher</text>\n</g>\n<!-- Hypertext\nSuper\nCollaborator&#45;&gt;Tips\nfor\nMatching\nwith\nCypher -->\n<g id=\"edge14\" class=\"edge\">\n<title>Hypertext\nSuper\nCollaborator&#45;&gt;Tips\nfor\nMatching\nwith\nCypher</title>\n<path fill=\"none\" stroke=\"black\" d=\"M373.69,-652.89C393.4,-629.44 419.75,-598.38 443.49,-571.3 450.35,-563.48 457.67,-555.26 464.86,-547.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"467.89,-549.12 471.99,-539.35 462.69,-544.44 467.89,-549.12\"/>\n</g>\n<!-- Jeff\nMiller -->\n<g id=\"node16\" class=\"node\">\n<title>Jeff\nMiller</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-385.3\" rx=\"34.9\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-389.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Jeff</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-372.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Miller</text>\n</g>\n<!-- Hypertext\nSuper\nCollaborator&#45;&gt;Jeff\nMiller -->\n<g id=\"edge15\" class=\"edge\">\n<title>Hypertext\nSuper\nCollaborator&#45;&gt;Jeff\nMiller</title>\n<path fill=\"none\" stroke=\"black\" d=\"M349.8,-647.9C360.55,-591.43 386.72,-489.68 443.49,-423.3 450.81,-414.74 460.56,-407.7 470.35,-402.1\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"472.09,-405.14 479.29,-397.37 468.81,-398.96 472.09,-405.14\"/>\n</g>\n<!-- Fact\nModeling -->\n<g id=\"node17\" class=\"node\">\n<title>Fact\nModeling</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-308.3\" rx=\"51.44\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-312.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Fact</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-295.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Modeling</text>\n</g>\n<!-- Property\nGraph&#45;&gt;Fact\nModeling -->\n<g id=\"edge16\" class=\"edge\">\n<title>Property\nGraph&#45;&gt;Fact\nModeling</title>\n<path fill=\"none\" stroke=\"black\" d=\"M389.85,-326.33C408.94,-323.48 431.27,-320.14 451.48,-317.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.15,-320.55 461.52,-315.61 451.11,-313.63 452.15,-320.55\"/>\n</g>\n<!-- Graph\nViewer -->\n<g id=\"node18\" class=\"node\">\n<title>Graph\nViewer</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-231.3\" rx=\"41.62\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-235.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Graph</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-218.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Viewer</text>\n</g>\n<!-- Fork\nNetwork\nGraph&#45;&gt;Graph\nViewer -->\n<g id=\"edge17\" class=\"edge\">\n<title>Fork\nNetwork\nGraph&#45;&gt;Graph\nViewer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M389.41,-213.19C411.53,-216.5 438.08,-220.47 460.67,-223.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"460.33,-227.34 470.73,-225.35 461.36,-220.41 460.33,-227.34\"/>\n</g>\n<!-- Fork\nNetwork\nRoundabout -->\n<g id=\"node19\" class=\"node\">\n<title>Fork\nNetwork\nRoundabout</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-142.3\" rx=\"65.47\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-154.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Fork</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-138.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Network</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-121.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Roundabout</text>\n</g>\n<!-- Fork\nNetwork\nGraph&#45;&gt;Fork\nNetwork\nRoundabout -->\n<g id=\"edge18\" class=\"edge\">\n<title>Fork\nNetwork\nGraph&#45;&gt;Fork\nNetwork\nRoundabout</title>\n<path fill=\"none\" stroke=\"black\" d=\"M386.33,-189.81C404.46,-182.88 425.94,-174.65 445.89,-167.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"447.15,-170.28 455.24,-163.44 444.65,-163.74 447.15,-170.28\"/>\n</g>\n<!-- Strongly\nConnected\nComponents -->\n<g id=\"node20\" class=\"node\">\n<title>Strongly\nConnected\nComponents</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"511.47\" cy=\"-41.3\" rx=\"67.35\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-53.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Strongly</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-37.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Connected</text>\n<text text-anchor=\"middle\" x=\"511.47\" y=\"-20.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Components</text>\n</g>\n<!-- Fork\nNetwork\nGraph&#45;&gt;Strongly\nConnected\nComponents -->\n<g id=\"edge19\" class=\"edge\">\n<title>Fork\nNetwork\nGraph&#45;&gt;Strongly\nConnected\nComponents</title>\n<path fill=\"none\" stroke=\"black\" d=\"M369.94,-172.53C389.26,-148.96 416.6,-117.36 443.49,-92.3 448.38,-87.74 453.65,-83.19 459.02,-78.78\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"461.31,-81.43 466.92,-72.45 456.93,-75.97 461.31,-81.43\"/>\n</g>\n<!-- 2022&#45;05&#45;07 -->\n<g id=\"node21\" class=\"node\">\n<title>2022&#45;05&#45;07</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"64.66\" cy=\"-727.3\" rx=\"60.33\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-723.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">2022&#45;05&#45;07</text>\n</g>\n<!-- 2022&#45;05&#45;07&#45;&gt;Graph -->\n<g id=\"edge20\" class=\"edge\">\n<title>2022&#45;05&#45;07&#45;&gt;Graph</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M108.85,-714.77C116.4,-711.07 123.65,-706.32 129.33,-700.3 176.72,-649.99 193.59,-566.85 199.36,-523.53\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"202.86,-523.77 200.6,-513.42 195.91,-522.92 202.86,-523.77\"/>\n</g>\n<!-- create -->\n<g id=\"node22\" class=\"node\">\n<title>create</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"64.66\" cy=\"-673.3\" rx=\"37.74\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-669.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">create</text>\n</g>\n<!-- create&#45;&gt;Graph -->\n<g id=\"edge21\" class=\"edge\">\n<title>create&#45;&gt;Graph</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M98.09,-664.66C109.02,-660.51 120.63,-654.58 129.33,-646.3 165.08,-612.24 185.45,-557.01 195.12,-523.62\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"198.6,-524.18 197.89,-513.61 191.85,-522.31 198.6,-524.18\"/>\n</g>\n<!-- Journal,\nMay\n2022 -->\n<g id=\"node23\" class=\"node\">\n<title>Journal,\nMay\n2022</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"64.66\" cy=\"-596.3\" rx=\"46.54\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-608.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Journal,</text>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-592.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">May</text>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-575.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">2022</text>\n</g>\n<!-- Journal,\nMay\n2022&#45;&gt;Graph -->\n<g id=\"edge23\" class=\"edge\">\n<title>Journal,\nMay\n2022&#45;&gt;Graph</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M100.82,-570.29C123.46,-553.54 152.51,-532.05 173.7,-516.37\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"176.02,-519.01 181.98,-510.25 171.86,-513.38 176.02,-519.01\"/>\n</g>\n<!-- Power\nof\nExponential -->\n<g id=\"node24\" class=\"node\">\n<title>Power\nof\nExponential</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"64.66\" cy=\"-495.3\" rx=\"63.06\" ry=\"41.09\"/>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-507.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Power</text>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-491.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">of</text>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-474.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Exponential</text>\n</g>\n<!-- Power\nof\nExponential&#45;&gt;Graph -->\n<g id=\"edge24\" class=\"edge\">\n<title>Power\nof\nExponential&#45;&gt;Graph</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M127.94,-495.3C136.94,-495.3 146.08,-495.3 154.72,-495.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"154.99,-498.8 164.99,-495.3 154.99,-491.8 154.99,-498.8\"/>\n</g>\n<!-- Vertex -->\n<g id=\"node25\" class=\"node\">\n<title>Vertex</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"64.66\" cy=\"-418.3\" rx=\"38.88\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-414.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Vertex</text>\n</g>\n<!-- Vertex&#45;&gt;Graph -->\n<g id=\"edge25\" class=\"edge\">\n<title>Vertex&#45;&gt;Graph</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M95.4,-429.46C106.3,-433.93 118.59,-439.41 129.33,-445.3 144.78,-453.76 161.03,-464.69 174.26,-474.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"172.33,-477.1 182.47,-480.16 176.45,-471.44 172.33,-477.1\"/>\n</g>\n<!-- 2022&#45;09&#45;26 -->\n<g id=\"node26\" class=\"node\">\n<title>2022&#45;09&#45;26</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"64.66\" cy=\"-364.3\" rx=\"60.33\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-360.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">2022&#45;09&#45;26</text>\n</g>\n<!-- 2022&#45;09&#45;26&#45;&gt;Graph -->\n<g id=\"edge26\" class=\"edge\">\n<title>2022&#45;09&#45;26&#45;&gt;Graph</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M106.3,-377.51C114.41,-381.22 122.51,-385.78 129.33,-391.3 155.53,-412.5 176.43,-445.49 189.02,-468.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"185.97,-470.34 193.73,-477.55 192.16,-467.07 185.97,-470.34\"/>\n</g>\n<!-- Feature\nComparison -->\n<g id=\"node27\" class=\"node\">\n<title>Feature\nComparison</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"64.66\" cy=\"-299.3\" rx=\"64.83\" ry=\"29.33\"/>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-303.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Feature</text>\n<text text-anchor=\"middle\" x=\"64.66\" y=\"-286.7\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Comparison</text>\n</g>\n<!-- Feature\nComparison&#45;&gt;Graph -->\n<g id=\"edge27\" class=\"edge\">\n<title>Feature\nComparison&#45;&gt;Graph</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M109.43,-320.58C116.66,-325.39 123.65,-330.98 129.33,-337.3 163.92,-375.77 184.84,-433.49 194.9,-467.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"191.57,-468.56 197.68,-477.22 198.3,-466.64 191.57,-468.56\"/>\n</g>\n</g>\n</svg>\n"
    },
    {
      "type": "paragraph",
      "id": "94a83d66bf5e53ac",
      "text": "super-collaborator/graph.js [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/graph.js github]:"
    },
    {
      "type": "code",
      "id": "ef04d15a1957b212",
      "text": "'use strict';\n\nimport * as cypher from './cypher.js'\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n\n  search (query, opt={}) {\n    const tree = cypher.parse(query)\n    // console.dir(tree, {depth:15})\n    const code = cypher.gen(0,tree[0][0],{})\n    // console.log(code)\n    cypher.check(this.tally(),code,opt.errors)\n    return cypher.apply(this, code)\n  }\n\n}\n\n\n\n\n\n\n// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n    // console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  // n(type=null, props={}) {\n  //   // console.log('Nodes.n',{type,props})\n  //   let nids = this.nids\n  //   if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n  //   for (let key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n  //   return new Nodes(this.graph, type, nids)\n  // }\n\n  i(type=null, props={}) {\n    // console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    // console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    // console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\nexport class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }\n\n  size(){\n    return this.rids.length\n  }\n\n  filter(f) {\n    const rels = this.graph.rels\n    const rids = this.rids.filter(rid => {\n      const rel = rels[rid]\n      return f(rel.type,rel.props)\n    })\n    return new Rels(this.graph,rids)\n  }\n\n  map(f) {\n    const rels = this.graph.rels\n    const result = this.rids.map(rid => {\n      const rel = rels[rid]\n      return f(rel)\n    })\n    return result\n  }\n}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Graph",
        "story": []
      },
      "date": 1649680253901
    },
    {
      "item": {
        "type": "factory",
        "id": "85aad1db218e256b"
      },
      "id": "85aad1db218e256b",
      "type": "add",
      "date": 1649680268726
    },
    {
      "type": "edit",
      "id": "85aad1db218e256b",
      "item": {
        "type": "markdown",
        "id": "85aad1db218e256b",
        "text": "* [Property Graph]]"
      },
      "date": 1649680278471
    },
    {
      "type": "edit",
      "id": "85aad1db218e256b",
      "item": {
        "type": "markdown",
        "id": "85aad1db218e256b",
        "text": "* [[Property Graph]]"
      },
      "date": 1649680286765
    },
    {
      "type": "edit",
      "id": "85aad1db218e256b",
      "item": {
        "type": "markdown",
        "id": "85aad1db218e256b",
        "text": "* [[Property Graph]] ⇒"
      },
      "date": 1649680321502
    },
    {
      "type": "edit",
      "id": "85aad1db218e256b",
      "item": {
        "type": "markdown",
        "id": "85aad1db218e256b",
        "text": "* [[Property Graph]] ⇒ [[Fork Network Graph]]"
      },
      "date": 1649680340500
    },
    {
      "item": {
        "type": "factory",
        "id": "e97743ba914a329a"
      },
      "id": "e97743ba914a329a",
      "type": "add",
      "after": "85aad1db218e256b",
      "date": 1649680522238
    },
    {
      "type": "edit",
      "id": "e97743ba914a329a",
      "item": {
        "type": "paragraph",
        "id": "e97743ba914a329a",
        "text": "http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphDataModeling/page/PropertyGraphs.html"
      },
      "date": 1649680526899
    },
    {
      "type": "edit",
      "id": "e97743ba914a329a",
      "item": {
        "type": "markdown",
        "id": "e97743ba914a329a",
        "text": "http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphDataModeling/page/PropertyGraphs.html"
      },
      "date": 1649680530806
    },
    {
      "type": "edit",
      "id": "e97743ba914a329a",
      "item": {
        "type": "markdown",
        "id": "e97743ba914a329a",
        "text": "Property Graphs Explained [http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphDataModeling/page/PropertyGraphs.html page]"
      },
      "date": 1649680573393
    },
    {
      "type": "edit",
      "id": "e97743ba914a329a",
      "item": {
        "type": "markdown",
        "id": "e97743ba914a329a",
        "text": "Property Graphs Explained [http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphDataModeling/page/PropertyGraphs.html page] What is a Graph anyway?"
      },
      "date": 1649680588638
    },
    {
      "type": "edit",
      "id": "e97743ba914a329a",
      "item": {
        "type": "markdown",
        "id": "e97743ba914a329a",
        "text": "Property Graphs Explained [http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphDataModeling/page/PropertyGraphs.html page] ⇒ What is a [[Graph]] anyway?"
      },
      "date": 1649680600472
    },
    {
      "type": "edit",
      "id": "e97743ba914a329a",
      "item": {
        "type": "markdown",
        "id": "e97743ba914a329a",
        "text": "Property Graphs Explained. [http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphDataModeling/page/PropertyGraphs.html page] ⇒ What is a [[Graph]] anyway?"
      },
      "date": 1649680615582
    },
    {
      "item": {
        "type": "factory",
        "id": "9d8d05ec7de1a199"
      },
      "id": "9d8d05ec7de1a199",
      "type": "add",
      "after": "e97743ba914a329a",
      "date": 1652157019673
    },
    {
      "type": "edit",
      "id": "9d8d05ec7de1a199",
      "item": {
        "type": "graphviz",
        "id": "9d8d05ec7de1a199",
        "text": "DOT strict digraph\n  \nrankdir=LR\n\n  node [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n  HERE NODE\n\n    node [style=filled fillcolor=lightblue]\n    WHERE /^⇒/\n      LINKS HERE -> NODE\n          node [style=filled fillcolor=white]\n          HERE NODE\n            WHERE /^⇒/\n              LINKS HERE -> NODE\n\n    node [style=filled fillcolor=white penwidth=3 color=black]\n    LINKS HERE -> NODE\n       node [style=filled fillcolor=white penwidth=1 color=black]\n       HERE NODE\n         LINKS HERE -> NODE\n\n   node [style=\"filled,rounded,dotted\" fillcolor=white]\n   edge [style=dotted]\n   HERE NODE\n      BACKLINKS NODE -> HERE"
      },
      "date": 1652157029258
    },
    {
      "id": "6cbc0856f1310861",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "6cbc0856f1310861",
        "text": "[[Croquet]] requires that the replicated model declare what classes will be present in the data that it is replicating. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1664121042189676DnHlh:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix].  In our case that list is short: [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/beam.js#L30-L36 github]. This is what makes [[Hypertext Super Collaborator]] a very simple program. Everything we do is done with that one object. Even our schema are constructed out of this one object. \n\n⇒ [[Graph]]"
      },
      "date": 1664201091921
    },
    {
      "type": "edit",
      "id": "6cbc0856f1310861",
      "item": {
        "type": "markdown",
        "id": "6cbc0856f1310861",
        "text": "[[Croquet]] requires that the replicated model declare what classes will be present in the data that it is replicating. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1664121042189676DnHlh:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix].  In our case that list is short: [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/beam.js#L30-L36 github]. This is what makes [[Hypertext Super Collaborator]] a very simple program. Everything we do is done with that one object. Even our schema are constructed out of this one object. \n"
      },
      "date": 1664201099495
    },
    {
      "type": "add",
      "id": "a825291da972426c",
      "item": {
        "type": "markdown",
        "id": "a825291da972426c",
        "text": "\n⇒ [[Graph]]"
      },
      "after": "6cbc0856f1310861",
      "date": 1664201100540
    },
    {
      "id": "a825291da972426c",
      "type": "remove",
      "date": 1664201102372
    },
    {
      "type": "edit",
      "id": "e97743ba914a329a",
      "item": {
        "type": "markdown",
        "id": "e97743ba914a329a",
        "text": "Property Graphs Explained. [http://graphdatamodeling.com/Graph%20Data%20Modeling/GraphDataModeling/page/PropertyGraphs.html page] ⇒ What is a *Graph* anyway?"
      },
      "date": 1664201118452
    },
    {
      "item": {
        "type": "code",
        "id": "eb775d62337786e5",
        "text": "\n  static types() {\n    return {\n      \"Graph\": Graph\n    };\n  }\n"
      },
      "id": "eb775d62337786e5",
      "type": "add",
      "after": "9d8d05ec7de1a199",
      "date": 1664202713713
    },
    {
      "id": "eb775d62337786e5",
      "type": "move",
      "order": [
        "6cbc0856f1310861",
        "eb775d62337786e5",
        "85aad1db218e256b",
        "e97743ba914a329a",
        "9d8d05ec7de1a199"
      ],
      "date": 1664202718311
    },
    {
      "type": "edit",
      "id": "6cbc0856f1310861",
      "item": {
        "type": "markdown",
        "id": "6cbc0856f1310861",
        "text": "[[Croquet]] requires that the replicated model declare what classes will be present in the data that it is replicating. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1664121042189676DnHlh:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix].  In our case that list is short: [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/beam.js#L30-L36 github]. \n"
      },
      "date": 1664202727614
    },
    {
      "id": "eb775d62337786e5",
      "type": "move",
      "order": [
        "6cbc0856f1310861",
        "eb775d62337786e5",
        "c24d194d1c10784f",
        "85aad1db218e256b",
        "e97743ba914a329a",
        "9d8d05ec7de1a199"
      ],
      "date": 1664202730333,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "c24d194d1c10784f",
      "item": {
        "type": "markdown",
        "id": "c24d194d1c10784f",
        "text": "This is what makes [[Hypertext Super Collaborator]] a very simple program. Everything we do is done with that one object. Even our schema are constructed out of this one object. \n"
      },
      "after": "6cbc0856f1310861",
      "date": 1664202731439
    },
    {
      "type": "edit",
      "id": "eb775d62337786e5",
      "item": {
        "type": "code",
        "id": "eb775d62337786e5",
        "text": "\n  static types() {\n    return {\n      \"Graph\": Graph\n    };\n  }\n"
      },
      "date": 1664202741112
    },
    {
      "type": "fork",
      "date": 1664202746823
    },
    {
      "type": "edit",
      "id": "6cbc0856f1310861",
      "item": {
        "type": "markdown",
        "id": "6cbc0856f1310861",
        "text": "[[Croquet]] requires that the replicated model declare what classes will be present in the data that it is replicating ([https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1664121042189676DnHlh:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]).  In our case that list is short: [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/beam.js#L30-L36 github]. \n"
      },
      "date": 1664202787022
    },
    {
      "type": "edit",
      "id": "6cbc0856f1310861",
      "item": {
        "type": "markdown",
        "id": "6cbc0856f1310861",
        "text": "[[Croquet]] requires that the replicated model declare what classes will be present in the data that it is replicating.  In our case that list is short: [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/beam.js#L30-L36 github]. \n"
      },
      "date": 1664202812081
    },
    {
      "type": "edit",
      "id": "c24d194d1c10784f",
      "item": {
        "type": "markdown",
        "id": "c24d194d1c10784f",
        "text": "This is what makes [[Hypertext Super Collaborator]] a very simple program. Everything we do is done with that one object. Even our schema are constructed out of this one object. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1664121042189676DnHlh:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n"
      },
      "date": 1664202818932
    },
    {
      "item": {
        "type": "factory",
        "id": "3d85a3dca66852a2"
      },
      "id": "3d85a3dca66852a2",
      "type": "add",
      "after": "9d8d05ec7de1a199",
      "date": 1664202830364
    },
    {
      "id": "3d85a3dca66852a2",
      "type": "move",
      "order": [
        "6cbc0856f1310861",
        "eb775d62337786e5",
        "c24d194d1c10784f",
        "3d85a3dca66852a2",
        "85aad1db218e256b",
        "e97743ba914a329a",
        "9d8d05ec7de1a199"
      ],
      "date": 1664202835372
    },
    {
      "type": "edit",
      "id": "3d85a3dca66852a2",
      "item": {
        "type": "pagefold",
        "id": "3d85a3dca66852a2",
        "text": "~"
      },
      "date": 1664202838103
    },
    {
      "type": "edit",
      "id": "eb775d62337786e5",
      "item": {
        "type": "code",
        "id": "eb775d62337786e5",
        "text": "  static types() {\n    return {\n      \"Graph\": Graph\n    };\n  }\n"
      },
      "date": 1664203047958
    },
    {
      "item": {
        "type": "factory",
        "id": "ef04d15a1957b212"
      },
      "id": "ef04d15a1957b212",
      "type": "add",
      "after": "9d8d05ec7de1a199",
      "date": 1674462956016
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\nSkip to content\nPull requests\nIssues\nCodespaces\nMarketplace\nExplore\n@RalfBarkow\nWardCunningham /\nassets\nPublic\n\nFork your own copy of WardCunningham/assets\n\nCode\nIssues\nPull requests 1\nActions\nProjects\nSecurity\n\n    Insights\n\nassets/pages/super-collaborator/graph.js /\n@WardCunningham\nWardCunningham local import of graph/cyper with diagnostics\nLatest commit 98dcda2 Sep 15, 2022\nHistory\n1 contributor\n221 lines (180 sloc) 6.08 KB\n'use strict';\n\nimport * as cypher from './cypher.js'\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n\n  search (query, opt={}) {\n    const tree = cypher.parse(query)\n    // console.dir(tree, {depth:15})\n    const code = cypher.gen(0,tree[0][0],{})\n    // console.log(code)\n    cypher.check(this.tally(),code,opt.errors)\n    return cypher.apply(this, code)\n  }\n\n}\n\n\n\n\n\n\n// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n    // console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  // n(type=null, props={}) {\n  //   // console.log('Nodes.n',{type,props})\n  //   let nids = this.nids\n  //   if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n  //   for (let key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n  //   return new Nodes(this.graph, type, nids)\n  // }\n\n  i(type=null, props={}) {\n    // console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    // console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    // console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\nexport class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }\n\n  size(){\n    return this.rids.length\n  }\n\n  filter(f) {\n    const rels = this.graph.rels\n    const rids = this.rids.filter(rid => {\n      const rel = rels[rid]\n      return f(rel.type,rel.props)\n    })\n    return new Rels(this.graph,rids)\n  }\n\n  map(f) {\n    const rels = this.graph.rels\n    const result = this.rids.map(rid => {\n      const rel = rels[rid]\n      return f(rel)\n    })\n    return result\n  }\n}\nFooter\n© 2023 GitHub, Inc.\nFooter navigation\n\n    Terms\n    Privacy\n    Security\n    Status\n    Docs\n    Contact GitHub\n    Pricing\n    API\n    Training\n    Blog\n    About\n\nassets/graph.js at d5509357d400a42be55588224b5b117d41424b20 · WardCunningham/assets\n"
      },
      "date": 1674462959458
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "'use strict';\n\nimport * as cypher from './cypher.js'\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n\n  search (query, opt={}) {\n    const tree = cypher.parse(query)\n    // console.dir(tree, {depth:15})\n    const code = cypher.gen(0,tree[0][0],{})\n    // console.log(code)\n    cypher.check(this.tally(),code,opt.errors)\n    return cypher.apply(this, code)\n  }\n\n}\n\n\n\n\n\n\n// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n    // console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  // n(type=null, props={}) {\n  //   // console.log('Nodes.n',{type,props})\n  //   let nids = this.nids\n  //   if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n  //   for (let key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n  //   return new Nodes(this.graph, type, nids)\n  // }\n\n  i(type=null, props={}) {\n    // console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    // console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    // console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\nexport class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }\n\n  size(){\n    return this.rids.length\n  }\n\n  filter(f) {\n    const rels = this.graph.rels\n    const rids = this.rids.filter(rid => {\n      const rel = rels[rid]\n      return f(rel.type,rel.props)\n    })\n    return new Rels(this.graph,rids)\n  }\n\n  map(f) {\n    const rels = this.graph.rels\n    const result = this.rids.map(rid => {\n      const rel = rels[rid]\n      return f(rel)\n    })\n    return result\n  }\n}"
      },
      "date": 1674462974284
    },
    {
      "item": {
        "type": "factory",
        "id": "94a83d66bf5e53ac"
      },
      "id": "94a83d66bf5e53ac",
      "type": "add",
      "after": "ef04d15a1957b212",
      "date": 1674463188816
    },
    {
      "type": "edit",
      "id": "94a83d66bf5e53ac",
      "item": {
        "type": "paragraph",
        "id": "94a83d66bf5e53ac",
        "text": "super-collaborator/graph.js :"
      },
      "date": 1674463192953
    },
    {
      "id": "94a83d66bf5e53ac",
      "type": "move",
      "order": [
        "6cbc0856f1310861",
        "eb775d62337786e5",
        "c24d194d1c10784f",
        "3d85a3dca66852a2",
        "85aad1db218e256b",
        "e97743ba914a329a",
        "9d8d05ec7de1a199",
        "94a83d66bf5e53ac",
        "ef04d15a1957b212"
      ],
      "date": 1674463208096
    },
    {
      "type": "edit",
      "id": "94a83d66bf5e53ac",
      "item": {
        "type": "paragraph",
        "id": "94a83d66bf5e53ac",
        "text": "super-collaborator/graph.js [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/graph.js github]:"
      },
      "date": 1674463224629
    },
    {
      "type": "edit",
      "id": "85aad1db218e256b",
      "item": {
        "type": "markdown",
        "id": "85aad1db218e256b",
        "text": "* [[Property Graph]] ⇒ [[Fork Network Graph]] ⇒ [[Network Dialect]]"
      },
      "date": 1675287238391
    },
    {
      "type": "edit",
      "id": "6cbc0856f1310861",
      "item": {
        "type": "markdown",
        "id": "6cbc0856f1310861",
        "text": "[[Croquet]] requires that the replicated [[Model]] declare what classes will be present in the data that it is replicating.  In our case that list is short: [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/beam.js#L30-L36 github]. \n"
      },
      "date": 1691575480456
    }
  ]
}