{
  "title": "2021-12-28",
  "story": [
    {
      "type": "paragraph",
      "id": "7541777aa66bbc80",
      "text": "3 Easy Ways to Get the Current Stage in a JavaFX Controller [https://edencoding.com/stage-controller/ page] "
    },
    {
      "type": "paragraph",
      "id": "0f3902ea9c5cbe41",
      "text": "Keep Components in Background to Reuse Them Later in JavaFX [https://stackoverflow.com/questions/48503165/keep-components-in-background-to-reuse-them-later-in-javafx stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "822987cb82b48570",
      "text": "How to Reference Stage in Controller Class? [Duplicate] [https://stackoverflow.com/questions/40299170/how-to-reference-stage-in-controller-class stackoverflow]"
    },
    {
      "type": "pagefold",
      "id": "4bae8653125d0d1e",
      "text": "JavaFX"
    },
    {
      "type": "paragraph",
      "id": "9ac90acc31360b57",
      "text": "[[GUI Testing]]"
    },
    {
      "type": "paragraph",
      "id": "cf5c6cc1d3dd6b98",
      "text": "User Interface test automation is a tricky practice, posing a unique set of challenges compared with testing of non-graphical components. For instance, certain functionality of components may work only if they are visible on the screen. Also in some cases events are not executed immediately in the current thread but scheduled in an event queue for later execution by the GUI thread."
    },
    {
      "type": "paragraph",
      "id": "0d65e286027b2e46",
      "text": "For this and other reasons it is often believed that automation of GUI testing is complex, requires a lot of additional work and overall it is not worth the effort. While this might be true in some cases, it definitely does not apply to majority of applications. In fact, automated testing of critical paths could be implemented with an effort equivalent to the implementation of server-side unit tests. But even more than on the server-side, the testability of developed applications must be taken into account from the very beginning."
    },
    {
      "type": "paragraph",
      "id": "a7849ff66d87635d",
      "text": "See [[Server-Side Unit Testing]], [[SUnit]]"
    },
    {
      "type": "markdown",
      "id": "d23e1c27c4171605",
      "text": "In general there are three approaches to automated GUI testing:\n• Testing only business logic that has been separated from GUI components\n• Testing that involves interactions with and verification of graphical components\n• Robot-based testing, where a library or tool mimics user actions (mouse and keyboard) and allows verifying the resulting state of the interface.\n"
    },
    {
      "type": "markdown",
      "id": "500ea6242040224c",
      "text": "These three techniques do not exclude each other. On the contrary, they can be used together in a complementary way.\n"
    },
    {
      "type": "markdown",
      "id": "3344f12a22dcd051",
      "text": "[[Separating Logic From GUI]]"
    },
    {
      "type": "paragraph",
      "id": "89bf67234e972e63",
      "text": "G. Kruk, O. Alves, L. Molinari, and E. Roux, “[[Best Practices for Efficient Development of JavaFX Applications]]”, presented at ICALEPCS’17, Barcelona, Spain, paper THAPL02."
    },
    {
      "type": "paragraph",
      "id": "a3d1009d0677c5af",
      "text": "[[Test Double]]"
    },
    {
      "type": "paragraph",
      "id": "cf4aeafb8b75d1bb",
      "text": "[[Ushio Inoue]], GUI Testing for Introductory Object-Oriented Programming Exercises, 2019 in: R. Lee (ed.), Computational Science/Intelligence & Applied Informatics, Studies in Computational Intelligence 787, [https://doi.org/10.1007/978-3-319-96806-3_1 doi]"
    },
    {
      "type": "markdown",
      "id": "71342a7ea0c72360",
      "text": "> **Abstract**. Automated testing is necessary in large classrooms where many students learn a programming language. This paper presents a method to test and score student programs with graphical user interfaces written in JavaFX. The method is based on scripts that analyzes the structure of programs under test and simulates user’s interactions. We implemented several utility methods to write the testing scripts easy. No additional software library is required to run the scripts. Preliminary evaluation results are shown on the developing and executing of scripts for real exercises in our introductory programming classrooms.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "6848f6d2255c8966",
      "text": "Few research papers have been published on automated testing of JavaFX applications. Kruk et al. [11] studied three approaches to automated GUI testing, and implemented a unit test runner extending the standard JUnit runner for JavaFX. Klammer et al. [12] developed a test case generator for unit testing and system testing. Their generator is based on the TestFX framework, which allows writing JUnit scripts for JavaFX GUI controls and applications.\n"
    },
    {
      "type": "markdown",
      "id": "52927316ecdcfcbe",
      "text": "[[JavaFX]], [[Scene Graph]], [[Stage]]"
    },
    {
      "type": "reference",
      "id": "e25a50652801163f",
      "site": "sfw.c2.com",
      "slug": "scene-graph",
      "title": "Scene Graph",
      "text": "Most graphics APIs are state-based.  The program sets up drawing state in the display manager that defines the colour, font, translation, fill texture, etc. used by drawing operations.  This reduces the amount of data that needs to be passed across the kernel boundary or network for each drawing operation."
    },
    {
      "type": "reference",
      "id": "0b41757062fabd8c",
      "site": "sfw.c2.com",
      "slug": "structured-graphics",
      "title": "Structured Graphics",
      "text": "Programming graphical displays is complex."
    },
    {
      "type": "reference",
      "id": "6710242d793c1ac6",
      "site": "sfw.c2.com",
      "slug": "composite-pattern",
      "title": "Composite Pattern",
      "text": "<b>Intent:</b> Compose objects into tree structures that represent whole-part hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. A leaf has the same interface as a node."
    },
    {
      "type": "pagefold",
      "id": "7df2637ce65088b3",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "bb65461fd3d1b8a8",
      "text": "Determination of Parameters of Dispersion Control Charts and Development of Support Software"
    },
    {
      "type": "markdown",
      "id": "2dfcd6b4556945e3",
      "text": "> **Abstract**. The world is currently characterized by globalization and competitive market where customers are increasingly demanding. To meet this demand, it is essential to invest in innovation and continuous improvement of services provided by companies. Statistical Process Control (SPC) is a methodology that contributes to the continuous improvement of processes, and control charts are the most important SPC tools. Control charts, both traditional and special ones, are used to monitor both the mean and dispersion of processes. Two shortcomings are addressed about the implementation of SPC, both in the application of traditional control charts and special control charts. The principles for calculating control limits used in traditional, or Shewhart, control charts are based on the assumption of Normality of the data. However, this principle is violated, when controlling for process dispersion, and control limits are still used, which undermines the validity of the results. One of the objectives of this dissertation is to verify the non-Normality of the variables of the scatter charts and to propose the use of a new chart, ln(S2 ), derived from a natural logarithmic transformation, with new parameters to support its construction, obtained through simulation. Regarding the special control charts, some limitations were verified in obtaining their parameters. The control charts commonly referred to as \"Special Control Charts\", the Cumulative Sums (CUSUM) and the Exponentially Damped Moving Average (EWMA) charts are built based on parameters obtained through abacuses and tables developed by various authors, however, they only present parameters for the most common situations and with little precision. The control chart CUSUM-ln(S2 ) will be analyzed to control the dispersion of the process for sample sizes equal to 4, 5, 6, 7 and 8. Another aspect dealt with in this dissertation is the update and extension of the software created by Nogueira (2018) that contemplates all the parameters calculated until then, as well as the new parameters calculated with this dissertation, both at the level of traditional charts and special charts. The work developed in this dissertation focuses on the Statistical Process Control (SPC) aiming to contribute to the increase of the range of data available for consultation. Translated with www.DeepL.com/Translator (free version)"
    },
    {
      "type": "paragraph",
      "id": "73dc046feec6b6db",
      "text": "Design and Implementation: JavaFX Face Detection with Scene Builder and Netbeans IDE "
    },
    {
      "type": "markdown",
      "id": "29f3bf4b3f27b6f7",
      "text": "> **Abstract**. JavaFX face detection is an application widely used to detect and recognize faces in digital images. One of the challenging problems in the image processing is how to develop and design an automatic face recognition application using JavaFX technology. JavaFX is a library of Java that is used to build rich internet applications (RIA) which can run across several platforms such as Desktops, Mobile Devices, TVs, Tablets, etc. Design and implementation of this application applies the concept of model-view-controller using framework Scene Builder and Netbeans IDE. Scene Builder is used as a tool to add components of GUI in the view that can produce document called FXML. Netbeans IDE is an integrated development environment for FXML document editing and maintaining the connection between view and controller. In this research stages of creating JavaFX Face Detection application are started with requirements identification, followed by design of UI components in Scene Graph, integration of the scene builder panels, and then making controller\n"
    },
    {
      "type": "paragraph",
      "id": "d405990087a39e06",
      "text": "The interface and implementation of JavaFX application are defined separately from its behavior. By using model-view-controller technique, the controllers handle interactions of interface, while the views contain visual attribute/graphical components of interface[3][4]."
    },
    {
      "type": "pagefold",
      "id": "abf698ab9455ed4b",
      "text": "Federated Wiki"
    },
    {
      "type": "markdown",
      "id": "d4aafe39d9fd0f6b",
      "text": "Thompson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1640539927769446rDyJj:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]\n> eric\n> I particularly love that call-to-action.\n"
    },
    {
      "type": "paragraph",
      "id": "7ae5ac193356c468",
      "text": "With Smalltalk, Alan Kay did not commission Dan, Adele, and the rest of their team to develop a \"better old thing\", but to create \"a new Kuhnian paradigm in the same spirit as the invention of the printing press\" in the hope that they could \"bring new ways of thinking to a faltering civilization that desperately needed it.\""
    },
    {
      "type": "paragraph",
      "id": "10c1f2488ad0c270",
      "text": "To do this, they were challenged to create a computing environment that broke from the \"hierarchical thinking\" of mechanical paradigms seeking the morphogenetic potential of organic structures. If they could do this, the audacious aspiration of the [[Dynabook]] might be achieved, not just that of a small tablet computer for children (which we have now realized) but a tool that had \"great thinking patterns and deep beauty 'built-in'\" (which we have clearly not realized).\n\nWe, too, are not being commissioned to create a 'better old thing'. But to be successful, we must be as audacious as Kay, standing on the shoulders of those before us, seeking that which they sought. We are beginning to more clearly sense that which we seek and in the days ahead we must become more bold in claiming it for others.\n\n"
    },
    {
      "type": "reference",
      "id": "a7a82d9387884a5d",
      "site": "wellspring.fed.wiki",
      "slug": "overlapping-pools",
      "title": "Overlapping Pools",
      "text": "Sitting on a park bench, tripping on acid, Bill Atkinson looked to the heavens above."
    },
    {
      "type": "reference",
      "id": "e887c26dd7f083ed",
      "site": "code.fed.wiki.org",
      "slug": "hypercard",
      "title": "HyperCard",
      "text": "HyperCard combines graphics, scripting and persistence into an innovative approach to application programming."
    },
    {
      "type": "reference",
      "id": "8247bec1e2561720",
      "site": "found.ward.bay.wiki.org",
      "slug": "hypertalk-by-dan-winkler",
      "title": "HyperTalk by Dan Winkler",
      "text": "HyperTalk was designed by Bill Atkinson [sic] to encourage 'programming for the rest of us'. It is a deceptively powerful and extensible language that introduced a lot of people to the basics of programming through a simple English-like syntax, making it easy to learn quickly enough to write off the top of your head, then hack around while you're actually using the result."
    },
    {
      "type": "reference",
      "id": "7fc31d79651c9747",
      "site": "wellspring.fed.wiki",
      "slug": "unbounded-consciousness",
      "title": "Unbounded Consciousness",
      "text": "We create order from chaos through our consciousness, order that allows us make sense of our experiences."
    },
    {
      "type": "reference",
      "id": "161c8f206a4f4223",
      "site": "wellspring.fed.wiki",
      "slug": "collective-ontology",
      "title": "Collective Ontology",
      "text": "We all make sense of the world through our consciousness, one that is define by patterns of concepts that are interconnected in our mind – a [[Semantic Network]]."
    },
    {
      "type": "reference",
      "id": "08382e9c9317244c",
      "site": "andrew.shll.wiki",
      "slug": "december-25-2021",
      "title": "December 25, 2021",
      "text": "I have an idea for fed wikis."
    },
    {
      "type": "markdown",
      "id": "6437bd8ae9dc3af5",
      "text": "> Ideally, I should be able to not only reference a page, but I should be able to reference any paragraph on any page."
    },
    {
      "type": "pagefold",
      "id": "65bb5cccd265e843",
      "text": "gt"
    },
    {
      "type": "paragraph",
      "id": "3f0c57acce373353",
      "text": "[[SeanDeNigris]] via [https://discord.com/channels/729445214812504107/729445215341117522/925163945306779718 discord]\nI finally have a working prototype of a \"cited\" snippet, which knows the source of the information, and (coming soon) can trace back to the reference if available. "
    },
    {
      "type": "markdown",
      "id": "d27e9c931c912ef7",
      "text": "> As usually happens when I put theory into practice, I've realized this is not really what I want. What I want is a dynamic bit of behavior that can be plugged into any snippet, like a talent or Bloc aptitude. The reason is that, while my snippet handles sourced text, a Pharo snippet could just as easily be \"sourced\" e.g. come from a book or forum, but I'd have to mirror the whole snippet hierarchy to have citation available everywhere."
    },
    {
      "type": "pagefold",
      "id": "ac6ce2e1d4d1fecc",
      "text": "The Ideal of Cognition"
    },
    {
      "type": "paragraph",
      "id": "0d203d558d1bbaff",
      "text": "There are eras when life peacefully flows along its accustomed channel, slowly broadening and deepening and not needing new paths, since the old ones do\nnot yet constrain them. And there are eras when life violently rushes through rapids and cliffs, clearing a new course in place of the old one that is too narrow and cramped. Heavy moss-covered rocks are rolled along and carried to the sea;\nage-old mountains are undermined and washed away. This is the critical work of life, and it is in such an era that we live. [https://doi.org/10.1163/9789004300323_002 doi]"
    },
    {
      "type": "pagefold",
      "id": "ad659dd81541510a",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "c3f1ca45c63173b0",
      "text": "https://malleable.systems/blog/2021/12/28/collective-digest-2021/ [[Malleable Systems Collective]]"
    },
    {
      "type": "paragraph",
      "id": "b0baecfafeca0902",
      "text": "[[Sandboxing]]"
    },
    {
      "type": "paragraph",
      "id": "a18f24b0cfc75c51",
      "text": "[[Sandbox]]"
    },
    {
      "type": "paragraph",
      "id": "e829ecb5569f0226",
      "text": "[[The Magritte Meta-Model]]"
    },
    {
      "type": "reference",
      "id": "a35050ed812e123c",
      "site": "wiki.ralfbarkow.ch",
      "slug": "learning-object-oriented-programming-design-with-tdd-in-pharo",
      "title": "Learning Object-Oriented Programming, Design with TDD in Pharo",
      "text": "“[[Learning Object-Oriented Programming, Design with TDD in Pharo]].” https://books.pharo.org/learning-oop/ (accessed Jun. 22, 2021)."
    },
    {
      "type": "pagefold",
      "id": "a3b885639500f67c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "22e1e4f3dae3da60",
      "text": "[[Heptabase]]"
    },
    {
      "type": "pagefold",
      "id": "279ac0d676678bc5",
      "text": "~\n"
    },
    {
      "type": "paragraph",
      "id": "1b30338f62cdad6e",
      "text": "[[Cuis Smalltalk]]"
    },
    {
      "type": "paragraph",
      "id": "8d212a2d3ee81095",
      "text": "[[Malleable Software]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2021-12-28",
        "story": []
      },
      "date": 1640602069792
    },
    {
      "item": {
        "type": "factory",
        "id": "37a18c1c95f2f1b3"
      },
      "id": "37a18c1c95f2f1b3",
      "type": "add",
      "date": 1640602071444
    },
    {
      "type": "edit",
      "id": "37a18c1c95f2f1b3",
      "item": {
        "type": "paragraph",
        "id": "37a18c1c95f2f1b3",
        "text": "[[Building Browsers with Glamour]]"
      },
      "date": 1640602075579
    },
    {
      "item": {
        "type": "factory",
        "id": "70fa17182f3096c3"
      },
      "id": "70fa17182f3096c3",
      "type": "add",
      "after": "37a18c1c95f2f1b3",
      "date": 1640603406909
    },
    {
      "type": "edit",
      "id": "70fa17182f3096c3",
      "item": {
        "type": "paragraph",
        "id": "70fa17182f3096c3",
        "text": "[[ExtJFX]]"
      },
      "date": 1640603417511
    },
    {
      "item": {
        "type": "factory",
        "id": "0f3902ea9c5cbe41"
      },
      "id": "0f3902ea9c5cbe41",
      "type": "add",
      "after": "70fa17182f3096c3",
      "date": 1640648139343
    },
    {
      "type": "edit",
      "id": "0f3902ea9c5cbe41",
      "item": {
        "type": "paragraph",
        "id": "0f3902ea9c5cbe41",
        "text": "Keep Components in Background to Reuse Them Later in Javafx"
      },
      "date": 1640648143771
    },
    {
      "id": "37a18c1c95f2f1b3",
      "type": "remove",
      "date": 1640648154600
    },
    {
      "id": "70fa17182f3096c3",
      "type": "remove",
      "date": 1640648157423
    },
    {
      "type": "edit",
      "id": "0f3902ea9c5cbe41",
      "item": {
        "type": "paragraph",
        "id": "0f3902ea9c5cbe41",
        "text": "Keep Components in Background to Reuse Them Later in JavaFX [https://stackoverflow.com/questions/48503165/keep-components-in-background-to-reuse-them-later-in-javafx stackoverflow]"
      },
      "date": 1640648195928
    },
    {
      "item": {
        "type": "factory",
        "id": "822987cb82b48570"
      },
      "id": "822987cb82b48570",
      "type": "add",
      "after": "0f3902ea9c5cbe41",
      "date": 1640648533729
    },
    {
      "type": "edit",
      "id": "822987cb82b48570",
      "item": {
        "type": "paragraph",
        "id": "822987cb82b48570",
        "text": "How to Reference Stage in Controller Class? [Duplicate]"
      },
      "date": 1640648538279
    },
    {
      "type": "edit",
      "id": "822987cb82b48570",
      "item": {
        "type": "paragraph",
        "id": "822987cb82b48570",
        "text": "How to Reference Stage in Controller Class? [Duplicate] [https://stackoverflow.com/questions/40299170/how-to-reference-stage-in-controller-class stackoverflow]"
      },
      "date": 1640648555309
    },
    {
      "item": {
        "type": "factory",
        "id": "7541777aa66bbc80"
      },
      "id": "7541777aa66bbc80",
      "type": "add",
      "after": "822987cb82b48570",
      "date": 1640648663139
    },
    {
      "type": "edit",
      "id": "7541777aa66bbc80",
      "item": {
        "type": "paragraph",
        "id": "7541777aa66bbc80",
        "text": "3 Easy Ways to Get the Current Stage in a Javafx Controller "
      },
      "date": 1640648664824
    },
    {
      "id": "7541777aa66bbc80",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570"
      ],
      "date": 1640648666126
    },
    {
      "type": "edit",
      "id": "7541777aa66bbc80",
      "item": {
        "type": "paragraph",
        "id": "7541777aa66bbc80",
        "text": "3 Easy Ways to Get the Current Stage in a JavaFX Controller [https://edencoding.com/stage-controller/ page] "
      },
      "date": 1640648689750
    },
    {
      "item": {
        "type": "factory",
        "id": "65bb5cccd265e843"
      },
      "id": "65bb5cccd265e843",
      "type": "add",
      "after": "822987cb82b48570",
      "date": 1640648834169
    },
    {
      "item": {
        "type": "factory",
        "id": "3f0c57acce373353"
      },
      "id": "3f0c57acce373353",
      "type": "add",
      "after": "65bb5cccd265e843",
      "date": 1640648838548
    },
    {
      "type": "edit",
      "id": "65bb5cccd265e843",
      "item": {
        "type": "pagefold",
        "id": "65bb5cccd265e843",
        "text": "gt"
      },
      "date": 1640648839697
    },
    {
      "type": "edit",
      "id": "3f0c57acce373353",
      "item": {
        "type": "paragraph",
        "id": "3f0c57acce373353",
        "text": "SeanDeNigris — heute um 00:11 Uhr\nI finally have a working prototype of a \"cited\" snippet, which knows the source of the information, and (coming soon) can trace back to the reference if available. As usually happens when I put theory into practice, I've realized this is not really what I want. What I want is a dynamic bit of behavior that can be plugged into any snippet, like a talent or Bloc aptitude. The reason is that, while my snippet handles sourced text, a Pharo snippet could just as easily be \"sourced\" e.g. come from a book or forum, but I'd have to mirror the whole snippet hierarchy to have citation available everywhere."
      },
      "date": 1640648842973
    },
    {
      "type": "edit",
      "id": "3f0c57acce373353",
      "item": {
        "type": "paragraph",
        "id": "3f0c57acce373353",
        "text": "[[SeanDeNigris]] via [https://discord.com/channels/729445214812504107/729445215341117522/925163945306779718 discord]\nI finally have a working prototype of a \"cited\" snippet, which knows the source of the information, and (coming soon) can trace back to the reference if available. As usually happens when I put theory into practice, I've realized this is not really what I want. What I want is a dynamic bit of behavior that can be plugged into any snippet, like a talent or Bloc aptitude. The reason is that, while my snippet handles sourced text, a Pharo snippet could just as easily be \"sourced\" e.g. come from a book or forum, but I'd have to mirror the whole snippet hierarchy to have citation available everywhere."
      },
      "date": 1640648874413
    },
    {
      "item": {
        "type": "factory",
        "id": "4bae8653125d0d1e"
      },
      "id": "4bae8653125d0d1e",
      "type": "add",
      "after": "3f0c57acce373353",
      "date": 1640679610983
    },
    {
      "type": "edit",
      "id": "4bae8653125d0d1e",
      "item": {
        "type": "pagefold",
        "id": "4bae8653125d0d1e",
        "text": "JavaFX"
      },
      "date": 1640679617766
    },
    {
      "item": {
        "type": "factory",
        "id": "9ac90acc31360b57"
      },
      "id": "9ac90acc31360b57",
      "type": "add",
      "after": "4bae8653125d0d1e",
      "date": 1640679621178
    },
    {
      "type": "edit",
      "id": "9ac90acc31360b57",
      "item": {
        "type": "paragraph",
        "id": "9ac90acc31360b57",
        "text": "Gui Testing"
      },
      "date": 1640679635146
    },
    {
      "type": "edit",
      "id": "9ac90acc31360b57",
      "item": {
        "type": "paragraph",
        "id": "9ac90acc31360b57",
        "text": "[[GUI Testing]]"
      },
      "date": 1640680086101
    },
    {
      "item": {
        "type": "factory",
        "id": "cf5c6cc1d3dd6b98"
      },
      "id": "cf5c6cc1d3dd6b98",
      "type": "add",
      "after": "9ac90acc31360b57",
      "date": 1640680125893
    },
    {
      "type": "edit",
      "id": "cf5c6cc1d3dd6b98",
      "item": {
        "type": "paragraph",
        "id": "cf5c6cc1d3dd6b98",
        "text": "User Interface test automation is a tricky practice, posing a unique set of challenges compared with testing of non-graphical components. For instance, certain functionality of components may work only if they are visible on the screen. Also in some cases events are not executed immediately in the current thread but scheduled in an event queue for later execution by the GUI thread."
      },
      "date": 1640680155792
    },
    {
      "item": {
        "type": "factory",
        "id": "7df2637ce65088b3"
      },
      "id": "7df2637ce65088b3",
      "type": "add",
      "after": "cf5c6cc1d3dd6b98",
      "date": 1640689577763
    },
    {
      "type": "edit",
      "id": "7df2637ce65088b3",
      "item": {
        "type": "pagefold",
        "id": "7df2637ce65088b3",
        "text": "~"
      },
      "date": 1640689581908
    },
    {
      "item": {
        "type": "factory",
        "id": "bb65461fd3d1b8a8"
      },
      "id": "bb65461fd3d1b8a8",
      "type": "add",
      "after": "7df2637ce65088b3",
      "date": 1640689583448
    },
    {
      "type": "edit",
      "id": "bb65461fd3d1b8a8",
      "item": {
        "type": "paragraph",
        "id": "bb65461fd3d1b8a8",
        "text": "Determination of Parameters of Dispersion Control Charts and Development of Support Software"
      },
      "date": 1640689594742
    },
    {
      "item": {
        "type": "factory",
        "id": "2dfcd6b4556945e3"
      },
      "id": "2dfcd6b4556945e3",
      "type": "add",
      "after": "bb65461fd3d1b8a8",
      "date": 1640689693571
    },
    {
      "type": "edit",
      "id": "2dfcd6b4556945e3",
      "item": {
        "type": "paragraph",
        "id": "2dfcd6b4556945e3",
        "text": "\tThe world is currently characterized by globalization and competitive market where customers are increasingly demanding. To meet this demand, it is essential to invest in innovation and continuous improvement of services provided by companies. Statistical Process Control (SPC) is a methodology that contributes to the continuous improvement of processes, and control charts are the most important SPC tools. Control charts, both traditional and special ones, are used to monitor both the mean and dispersion of processes. Two shortcomings are addressed about the implementation of SPC, both in the application of traditional control charts and special control charts. The principles for calculating control limits used in traditional, or Shewhart, control charts are based on the assumption of Normality of the data. However, this principle is violated, when controlling for process dispersion, and control limits are still used, which undermines the validity of the results. One of the objectives of this dissertation is to verify the non-Normality of the variables of the scatter charts and to propose the use of a new chart, ln(S2 ), derived from a natural logarithmic transformation, with new parameters to support its construction, obtained through simulation. Regarding the special control charts, some limitations were verified in obtaining their parameters. The control charts commonly referred to as \"Special Control Charts\", the Cumulative Sums (CUSUM) and the Exponentially Damped Moving Average (EWMA) charts are built based on parameters obtained through abacuses and tables developed by various authors, however, they only present parameters for the most common situations and with little precision. The control chart CUSUM-ln(S2 ) will be analyzed to control the dispersion of the process for sample sizes equal to 4, 5, 6, 7 and 8. Another aspect dealt with in this dissertation is the update and extension of the software created by Nogueira (2018) that contemplates all the parameters calculated until then, as well as the new parameters calculated with this dissertation, both at the level of traditional charts and special charts. The work developed in this dissertation focuses on the Statistical Process Control (SPC) aiming to contribute to the increase of the range of data available for consultation. Translated with www.DeepL.com/Translator (free version)"
      },
      "date": 1640689694848
    },
    {
      "type": "edit",
      "id": "2dfcd6b4556945e3",
      "item": {
        "type": "paragraph",
        "id": "2dfcd6b4556945e3",
        "text": "> **Abstract**. The world is currently characterized by globalization and competitive market where customers are increasingly demanding. To meet this demand, it is essential to invest in innovation and continuous improvement of services provided by companies. Statistical Process Control (SPC) is a methodology that contributes to the continuous improvement of processes, and control charts are the most important SPC tools. Control charts, both traditional and special ones, are used to monitor both the mean and dispersion of processes. Two shortcomings are addressed about the implementation of SPC, both in the application of traditional control charts and special control charts. The principles for calculating control limits used in traditional, or Shewhart, control charts are based on the assumption of Normality of the data. However, this principle is violated, when controlling for process dispersion, and control limits are still used, which undermines the validity of the results. One of the objectives of this dissertation is to verify the non-Normality of the variables of the scatter charts and to propose the use of a new chart, ln(S2 ), derived from a natural logarithmic transformation, with new parameters to support its construction, obtained through simulation. Regarding the special control charts, some limitations were verified in obtaining their parameters. The control charts commonly referred to as \"Special Control Charts\", the Cumulative Sums (CUSUM) and the Exponentially Damped Moving Average (EWMA) charts are built based on parameters obtained through abacuses and tables developed by various authors, however, they only present parameters for the most common situations and with little precision. The control chart CUSUM-ln(S2 ) will be analyzed to control the dispersion of the process for sample sizes equal to 4, 5, 6, 7 and 8. Another aspect dealt with in this dissertation is the update and extension of the software created by Nogueira (2018) that contemplates all the parameters calculated until then, as well as the new parameters calculated with this dissertation, both at the level of traditional charts and special charts. The work developed in this dissertation focuses on the Statistical Process Control (SPC) aiming to contribute to the increase of the range of data available for consultation. Translated with www.DeepL.com/Translator (free version)"
      },
      "date": 1640689715807
    },
    {
      "type": "edit",
      "id": "2dfcd6b4556945e3",
      "item": {
        "type": "markdown",
        "id": "2dfcd6b4556945e3",
        "text": "> **Abstract**. The world is currently characterized by globalization and competitive market where customers are increasingly demanding. To meet this demand, it is essential to invest in innovation and continuous improvement of services provided by companies. Statistical Process Control (SPC) is a methodology that contributes to the continuous improvement of processes, and control charts are the most important SPC tools. Control charts, both traditional and special ones, are used to monitor both the mean and dispersion of processes. Two shortcomings are addressed about the implementation of SPC, both in the application of traditional control charts and special control charts. The principles for calculating control limits used in traditional, or Shewhart, control charts are based on the assumption of Normality of the data. However, this principle is violated, when controlling for process dispersion, and control limits are still used, which undermines the validity of the results. One of the objectives of this dissertation is to verify the non-Normality of the variables of the scatter charts and to propose the use of a new chart, ln(S2 ), derived from a natural logarithmic transformation, with new parameters to support its construction, obtained through simulation. Regarding the special control charts, some limitations were verified in obtaining their parameters. The control charts commonly referred to as \"Special Control Charts\", the Cumulative Sums (CUSUM) and the Exponentially Damped Moving Average (EWMA) charts are built based on parameters obtained through abacuses and tables developed by various authors, however, they only present parameters for the most common situations and with little precision. The control chart CUSUM-ln(S2 ) will be analyzed to control the dispersion of the process for sample sizes equal to 4, 5, 6, 7 and 8. Another aspect dealt with in this dissertation is the update and extension of the software created by Nogueira (2018) that contemplates all the parameters calculated until then, as well as the new parameters calculated with this dissertation, both at the level of traditional charts and special charts. The work developed in this dissertation focuses on the Statistical Process Control (SPC) aiming to contribute to the increase of the range of data available for consultation. Translated with www.DeepL.com/Translator (free version)"
      },
      "date": 1640689717461
    },
    {
      "type": "add",
      "id": "89bf67234e972e63",
      "item": {
        "type": "paragraph",
        "id": "89bf67234e972e63",
        "text": "Kruk, O. Alves, L. Molinari, and E. Roux, “Best Practices for Efficient Development of JavaFX Applications”, presented at ICALEPCS’17, Barcelona, Spain, paper THAPL02."
      },
      "after": "cf5c6cc1d3dd6b98",
      "date": 1640689853422
    },
    {
      "type": "add",
      "id": "cf4aeafb8b75d1bb",
      "item": {
        "type": "paragraph",
        "id": "cf4aeafb8b75d1bb",
        "text": "[[Ushio Inoue]]"
      },
      "after": "89bf67234e972e63",
      "date": 1640689882882
    },
    {
      "type": "edit",
      "id": "cf4aeafb8b75d1bb",
      "item": {
        "type": "paragraph",
        "id": "cf4aeafb8b75d1bb",
        "text": "[[Ushio Inoue]], GUI Testing for Introductory Object-Oriented Programming Exercises"
      },
      "date": 1640689976332
    },
    {
      "type": "add",
      "id": "71342a7ea0c72360",
      "item": {
        "type": "paragraph",
        "id": "71342a7ea0c72360",
        "text": "> **Abstract**. Automated testing is necessary in large classrooms where many students learn a programming language. This paper presents a method to test and score student programs with graphical user interfaces written in JavaFX. The method is based on scripts that analyzes the structure of programs under test and simulates user’s interactions. We implemented several utility methods to write the testing scripts easy. No additional software library is required to run the scripts. Preliminary evaluation results are shown on the developing and executing of scripts for real exercises in our introductory programming classrooms."
      },
      "after": "cf4aeafb8b75d1bb",
      "date": 1640689996986
    },
    {
      "type": "edit",
      "id": "71342a7ea0c72360",
      "item": {
        "type": "markdown",
        "id": "71342a7ea0c72360",
        "text": "> **Abstract**. Automated testing is necessary in large classrooms where many students learn a programming language. This paper presents a method to test and score student programs with graphical user interfaces written in JavaFX. The method is based on scripts that analyzes the structure of programs under test and simulates user’s interactions. We implemented several utility methods to write the testing scripts easy. No additional software library is required to run the scripts. Preliminary evaluation results are shown on the developing and executing of scripts for real exercises in our introductory programming classrooms."
      },
      "date": 1640689998588
    },
    {
      "type": "edit",
      "id": "cf4aeafb8b75d1bb",
      "item": {
        "type": "paragraph",
        "id": "cf4aeafb8b75d1bb",
        "text": "[[Ushio Inoue]], GUI Testing for Introductory Object-Oriented Programming Exercises, 2019 in: R. Lee (ed.), Computational Science/Intelligence & Applied Informatics, Studies in Computational Intelligence 787, https://doi.org/10.1007/978-3-319-96806-3_1"
      },
      "date": 1640690040738
    },
    {
      "type": "edit",
      "id": "cf4aeafb8b75d1bb",
      "item": {
        "type": "paragraph",
        "id": "cf4aeafb8b75d1bb",
        "text": "[[Ushio Inoue]], GUI Testing for Introductory Object-Oriented Programming Exercises, 2019 in: R. Lee (ed.), Computational Science/Intelligence & Applied Informatics, Studies in Computational Intelligence 787, [https://doi.org/10.1007/978-3-319-96806-3_1 doi]"
      },
      "date": 1640690060720
    },
    {
      "type": "edit",
      "id": "71342a7ea0c72360",
      "item": {
        "type": "markdown",
        "id": "71342a7ea0c72360",
        "text": "> **Abstract**. Automated testing is necessary in large classrooms where many students learn a programming language. This paper presents a method to test and score student programs with graphical user interfaces written in JavaFX. The method is based on scripts that analyzes the structure of programs under test and simulates user’s interactions. We implemented several utility methods to write the testing scripts easy. No additional software library is required to run the scripts. Preliminary evaluation results are shown on the developing and executing of scripts for real exercises in our introductory programming classrooms.\n\nFew research papers have been published on automated testing of JavaFX appli- cations. Kruk et al. [11] studied three approaches to automated GUI testing, and implemented a unit test runner extending the standard JUnit runner for JavaFX. Klammer et al. [12] developed a test case generator for unit testing and system test- ing. Their generator is based on the TestFX framework, which allows writing JUnit scripts for JavaFX GUI controls and applications."
      },
      "date": 1640690102156
    },
    {
      "type": "edit",
      "id": "71342a7ea0c72360",
      "item": {
        "type": "markdown",
        "id": "71342a7ea0c72360",
        "text": "> **Abstract**. Automated testing is necessary in large classrooms where many students learn a programming language. This paper presents a method to test and score student programs with graphical user interfaces written in JavaFX. The method is based on scripts that analyzes the structure of programs under test and simulates user’s interactions. We implemented several utility methods to write the testing scripts easy. No additional software library is required to run the scripts. Preliminary evaluation results are shown on the developing and executing of scripts for real exercises in our introductory programming classrooms.\n\n\n"
      },
      "date": 1640690113601
    },
    {
      "type": "add",
      "id": "6848f6d2255c8966",
      "item": {
        "type": "markdown",
        "id": "6848f6d2255c8966",
        "text": "Few research papers have been published on automated testing of JavaFX applications. Kruk et al. [11] studied three approaches to automated GUI testing, and implemented a unit test runner extending the standard JUnit runner for JavaFX. Klammer et al. [12] developed a test case generator for unit testing and system testing. Their generator is based on the TestFX framework, which allows writing JUnit scripts for JavaFX GUI controls and applications."
      },
      "after": "71342a7ea0c72360",
      "date": 1640690134654
    },
    {
      "type": "edit",
      "id": "6848f6d2255c8966",
      "item": {
        "type": "markdown",
        "id": "6848f6d2255c8966",
        "text": "Few research papers have been published on automated testing of JavaFX applications. Kruk et al. [11] studied three approaches to automated GUI testing, and implemented a unit test runner extending the standard JUnit runner for JavaFX. Klammer et al. [12] developed a test case generator for unit testing and system testing. Their generator is based on the TestFX framework, which allows writing JUnit scripts for JavaFX GUI controls and applications.\n"
      },
      "date": 1640690229330
    },
    {
      "type": "add",
      "id": "52927316ecdcfcbe",
      "item": {
        "type": "markdown",
        "id": "52927316ecdcfcbe",
        "text": "[[Scene Graph]]"
      },
      "after": "6848f6d2255c8966",
      "date": 1640690234902
    },
    {
      "item": {
        "type": "factory",
        "id": "e25a50652801163f"
      },
      "id": "e25a50652801163f",
      "type": "add",
      "after": "2dfcd6b4556945e3",
      "date": 1640690243377
    },
    {
      "type": "edit",
      "id": "e25a50652801163f",
      "item": {
        "type": "reference",
        "id": "e25a50652801163f",
        "site": "sfw.c2.com",
        "slug": "scene-graph",
        "title": "Scene Graph",
        "text": "Most graphics APIs are state-based.  The program sets up drawing state in the display manager that defines the colour, font, translation, fill texture, etc. used by drawing operations.  This reduces the amount of data that needs to be passed across the kernel boundary or network for each drawing operation."
      },
      "date": 1640690250749
    },
    {
      "id": "e25a50652801163f",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "65bb5cccd265e843",
        "3f0c57acce373353",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3"
      ],
      "date": 1640690256775
    },
    {
      "item": {
        "type": "factory",
        "id": "0b41757062fabd8c"
      },
      "id": "0b41757062fabd8c",
      "type": "add",
      "after": "2dfcd6b4556945e3",
      "date": 1640690283773
    },
    {
      "type": "edit",
      "id": "0b41757062fabd8c",
      "item": {
        "type": "reference",
        "id": "0b41757062fabd8c",
        "site": "sfw.c2.com",
        "slug": "structured-graphics",
        "title": "Structured Graphics",
        "text": "Programming graphical displays is complex."
      },
      "date": 1640690286737
    },
    {
      "id": "0b41757062fabd8c",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "65bb5cccd265e843",
        "3f0c57acce373353",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "0b41757062fabd8c",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3"
      ],
      "date": 1640690290228
    },
    {
      "item": {
        "type": "factory",
        "id": "6710242d793c1ac6"
      },
      "id": "6710242d793c1ac6",
      "type": "add",
      "after": "2dfcd6b4556945e3",
      "date": 1640690306574
    },
    {
      "type": "edit",
      "id": "6710242d793c1ac6",
      "item": {
        "type": "reference",
        "id": "6710242d793c1ac6",
        "site": "sfw.c2.com",
        "slug": "composite-pattern",
        "title": "Composite Pattern",
        "text": "<b>Intent:</b> Compose objects into tree structures that represent whole-part hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. A leaf has the same interface as a node."
      },
      "date": 1640690310223
    },
    {
      "id": "6710242d793c1ac6",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "65bb5cccd265e843",
        "3f0c57acce373353",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "0b41757062fabd8c",
        "6710242d793c1ac6",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3"
      ],
      "date": 1640690320035
    },
    {
      "type": "edit",
      "id": "52927316ecdcfcbe",
      "item": {
        "type": "markdown",
        "id": "52927316ecdcfcbe",
        "text": "[[JavaFX]], [[Scene Graph]]"
      },
      "date": 1640690382838
    },
    {
      "type": "edit",
      "id": "52927316ecdcfcbe",
      "item": {
        "type": "markdown",
        "id": "52927316ecdcfcbe",
        "text": "[[JavaFX]], [[Scene Graph]], [[Stage]]"
      },
      "date": 1640690478903
    },
    {
      "type": "edit",
      "id": "89bf67234e972e63",
      "item": {
        "type": "paragraph",
        "id": "89bf67234e972e63",
        "text": "Kruk, O. Alves, L. Molinari, and E. Roux, “[[Best Practices for Efficient Development of JavaFX Applications]]”, presented at ICALEPCS’17, Barcelona, Spain, paper THAPL02."
      },
      "date": 1640690786745
    },
    {
      "type": "edit",
      "id": "89bf67234e972e63",
      "item": {
        "type": "paragraph",
        "id": "89bf67234e972e63",
        "text": "G. Kruk, O. Alves, L. Molinari, and E. Roux, “[[Best Practices for Efficient Development of JavaFX Applications]]”, presented at ICALEPCS’17, Barcelona, Spain, paper THAPL02."
      },
      "date": 1640690866994
    },
    {
      "item": {
        "type": "factory",
        "id": "73dc046feec6b6db"
      },
      "id": "73dc046feec6b6db",
      "type": "add",
      "after": "2dfcd6b4556945e3",
      "date": 1640690956060
    },
    {
      "type": "edit",
      "id": "73dc046feec6b6db",
      "item": {
        "type": "paragraph",
        "id": "73dc046feec6b6db",
        "text": "Design and Implementation: JavaFX Face Detection with Scene Builder and Netbeans IDE "
      },
      "date": 1640690964306
    },
    {
      "item": {
        "type": "factory",
        "id": "29f3bf4b3f27b6f7"
      },
      "id": "29f3bf4b3f27b6f7",
      "type": "add",
      "after": "73dc046feec6b6db",
      "date": 1640690970559
    },
    {
      "type": "edit",
      "id": "29f3bf4b3f27b6f7",
      "item": {
        "type": "paragraph",
        "id": "29f3bf4b3f27b6f7",
        "text": "> **Abstract**. JavaFX face detection is an application widely used to detect and recognize faces in digital images. One of the challenging problems in the image processing is how to develop and design an automatic face recognition application using JavaFX technology. JavaFX is a library of Java that is used to build rich internet applications (RIA) which can run across several platforms such as Desktops, Mobile Devices, TVs, Tablets, etc. Design and implementation of this application applies the concept of model-view-controller using framework Scene Builder and Netbeans IDE. Scene Builder is used as a tool to add components of GUI in the view that can produce document called FXML. Netbeans IDE is an integrated development environment for FXML document editing and maintaining the connection between view and controller. In this research stages of creating JavaFX Face Detection application are started with requirements identification, followed by design of UI components in Scene Graph, integration of the scene builder panels, and then making controller\n"
      },
      "date": 1640690985990
    },
    {
      "type": "edit",
      "id": "29f3bf4b3f27b6f7",
      "item": {
        "type": "markdown",
        "id": "29f3bf4b3f27b6f7",
        "text": "> **Abstract**. JavaFX face detection is an application widely used to detect and recognize faces in digital images. One of the challenging problems in the image processing is how to develop and design an automatic face recognition application using JavaFX technology. JavaFX is a library of Java that is used to build rich internet applications (RIA) which can run across several platforms such as Desktops, Mobile Devices, TVs, Tablets, etc. Design and implementation of this application applies the concept of model-view-controller using framework Scene Builder and Netbeans IDE. Scene Builder is used as a tool to add components of GUI in the view that can produce document called FXML. Netbeans IDE is an integrated development environment for FXML document editing and maintaining the connection between view and controller. In this research stages of creating JavaFX Face Detection application are started with requirements identification, followed by design of UI components in Scene Graph, integration of the scene builder panels, and then making controller\n"
      },
      "date": 1640690987488
    },
    {
      "item": {
        "type": "factory",
        "id": "d405990087a39e06"
      },
      "id": "d405990087a39e06",
      "type": "add",
      "after": "29f3bf4b3f27b6f7",
      "date": 1640691095024
    },
    {
      "type": "edit",
      "id": "d405990087a39e06",
      "item": {
        "type": "paragraph",
        "id": "d405990087a39e06",
        "text": "The interface and implementation of JavaFX application are defined separately from its behavior. By using model-view-controller technique, the controllers handle interactions of interface, while the views contain visual attribute/graphical components of interface[3][4]."
      },
      "date": 1640691096636
    },
    {
      "item": {
        "type": "factory",
        "id": "abf698ab9455ed4b"
      },
      "id": "abf698ab9455ed4b",
      "type": "add",
      "after": "d405990087a39e06",
      "date": 1640691126015
    },
    {
      "type": "edit",
      "id": "abf698ab9455ed4b",
      "item": {
        "type": "pagefold",
        "id": "abf698ab9455ed4b",
        "text": "Federated Wiki"
      },
      "date": 1640691132262
    },
    {
      "item": {
        "type": "factory",
        "id": "d4aafe39d9fd0f6b"
      },
      "id": "d4aafe39d9fd0f6b",
      "type": "add",
      "after": "abf698ab9455ed4b",
      "date": 1640691140007
    },
    {
      "type": "edit",
      "id": "d4aafe39d9fd0f6b",
      "item": {
        "type": "paragraph",
        "id": "d4aafe39d9fd0f6b",
        "text": "Thompson via [matrix]\neric\nI particularly love that call-to-action.\nWith Smalltalk, Alan Kay did not commission Dan, Adele, and the rest of their team to develop a \"better old thing\", but to create \"a new Kuhnian paradigm in the same spirit as the invention of the printing press\" in the hope that they could \"bring new ways of thinking to a faltering civilization that desperately needed it.\"\n\nTo do this, they were challenged to create a computing environment that broke from the \"hierarchical thinking\" of mechanical paradigms seeking the morphogenetic potential of organic structures. If they could do this, the audacious aspiration of the Dynabook might be achieved, not just that of a small tablet computer for children (which we have now realized) but a tool that had \"great thinking patterns and deep beauty 'built-in'\" (which we have clearly not realized).\n\nWe, too, are not being commissioned to create a 'better old thing'. But to be successful, we must be as audacious as Kay, standing on the shoulders of those before us, seeking that which they sought. We are beginning to more clearly sense that which we seek and in the days ahead we must become more bold in claiming it for others.\n\n"
      },
      "date": 1640691152714
    },
    {
      "type": "edit",
      "id": "d4aafe39d9fd0f6b",
      "item": {
        "type": "paragraph",
        "id": "d4aafe39d9fd0f6b",
        "text": "Thompson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1640539927769446rDyJj:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]\neric\nI particularly love that call-to-action.\nWith Smalltalk, Alan Kay did not commission Dan, Adele, and the rest of their team to develop a \"better old thing\", but to create \"a new Kuhnian paradigm in the same spirit as the invention of the printing press\" in the hope that they could \"bring new ways of thinking to a faltering civilization that desperately needed it.\"\n\nTo do this, they were challenged to create a computing environment that broke from the \"hierarchical thinking\" of mechanical paradigms seeking the morphogenetic potential of organic structures. If they could do this, the audacious aspiration of the Dynabook might be achieved, not just that of a small tablet computer for children (which we have now realized) but a tool that had \"great thinking patterns and deep beauty 'built-in'\" (which we have clearly not realized).\n\nWe, too, are not being commissioned to create a 'better old thing'. But to be successful, we must be as audacious as Kay, standing on the shoulders of those before us, seeking that which they sought. We are beginning to more clearly sense that which we seek and in the days ahead we must become more bold in claiming it for others.\n\n"
      },
      "date": 1640691178174
    },
    {
      "type": "edit",
      "id": "d4aafe39d9fd0f6b",
      "item": {
        "type": "paragraph",
        "id": "d4aafe39d9fd0f6b",
        "text": "Thompson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1640539927769446rDyJj:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]\n> eric\n> I particularly love that call-to-action.\n"
      },
      "date": 1640691210710
    },
    {
      "type": "add",
      "id": "7ae5ac193356c468",
      "item": {
        "type": "paragraph",
        "id": "7ae5ac193356c468",
        "text": "With Smalltalk, Alan Kay did not commission Dan, Adele, and the rest of their team to develop a \"better old thing\", but to create \"a new Kuhnian paradigm in the same spirit as the invention of the printing press\" in the hope that they could \"bring new ways of thinking to a faltering civilization that desperately needed it.\"\n\nTo do this, they were challenged to create a computing environment that broke from the \"hierarchical thinking\" of mechanical paradigms seeking the morphogenetic potential of organic structures. If they could do this, the audacious aspiration of the Dynabook might be achieved, not just that of a small tablet computer for children (which we have now realized) but a tool that had \"great thinking patterns and deep beauty 'built-in'\" (which we have clearly not realized).\n\nWe, too, are not being commissioned to create a 'better old thing'. But to be successful, we must be as audacious as Kay, standing on the shoulders of those before us, seeking that which they sought. We are beginning to more clearly sense that which we seek and in the days ahead we must become more bold in claiming it for others.\n\n"
      },
      "after": "d4aafe39d9fd0f6b",
      "date": 1640691211482
    },
    {
      "type": "edit",
      "id": "d4aafe39d9fd0f6b",
      "item": {
        "type": "markdown",
        "id": "d4aafe39d9fd0f6b",
        "text": "Thompson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1640539927769446rDyJj:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]\n> eric\n> I particularly love that call-to-action.\n"
      },
      "date": 1640691213112
    },
    {
      "type": "edit",
      "id": "7ae5ac193356c468",
      "item": {
        "type": "paragraph",
        "id": "7ae5ac193356c468",
        "text": "With Smalltalk, Alan Kay did not commission Dan, Adele, and the rest of their team to develop a \"better old thing\", but to create \"a new Kuhnian paradigm in the same spirit as the invention of the printing press\" in the hope that they could \"bring new ways of thinking to a faltering civilization that desperately needed it.\""
      },
      "date": 1640691244482
    },
    {
      "type": "add",
      "id": "10c1f2488ad0c270",
      "item": {
        "type": "paragraph",
        "id": "10c1f2488ad0c270",
        "text": "To do this, they were challenged to create a computing environment that broke from the \"hierarchical thinking\" of mechanical paradigms seeking the morphogenetic potential of organic structures. If they could do this, the audacious aspiration of the [[Dynabook]] might be achieved, not just that of a small tablet computer for children (which we have now realized) but a tool that had \"great thinking patterns and deep beauty 'built-in'\" (which we have clearly not realized).\n\nWe, too, are not being commissioned to create a 'better old thing'. But to be successful, we must be as audacious as Kay, standing on the shoulders of those before us, seeking that which they sought. We are beginning to more clearly sense that which we seek and in the days ahead we must become more bold in claiming it for others.\n\n"
      },
      "after": "7ae5ac193356c468",
      "date": 1640691256466
    },
    {
      "item": {
        "type": "factory",
        "id": "a7a82d9387884a5d"
      },
      "id": "a7a82d9387884a5d",
      "type": "add",
      "after": "10c1f2488ad0c270",
      "date": 1640691695351
    },
    {
      "type": "edit",
      "id": "a7a82d9387884a5d",
      "item": {
        "type": "reference",
        "id": "a7a82d9387884a5d",
        "site": "wellspring.fed.wiki",
        "slug": "overlapping-pools",
        "title": "Overlapping Pools",
        "text": "Sitting on a park bench, tripping on acid, Bill Atkinson looked to the heavens above."
      },
      "date": 1640691702295
    },
    {
      "item": {
        "type": "factory",
        "id": "7fc31d79651c9747"
      },
      "id": "7fc31d79651c9747",
      "type": "add",
      "after": "a7a82d9387884a5d",
      "date": 1640691704370
    },
    {
      "type": "edit",
      "id": "7fc31d79651c9747",
      "item": {
        "type": "reference",
        "id": "7fc31d79651c9747",
        "site": "wellspring.fed.wiki",
        "slug": "unbounded-consciousness",
        "title": "Unbounded Consciousness",
        "text": "We create order from chaos through our consciousness, order that allows us make sense of our experiences."
      },
      "date": 1640691708126
    },
    {
      "item": {
        "type": "factory",
        "id": "161c8f206a4f4223"
      },
      "id": "161c8f206a4f4223",
      "type": "add",
      "after": "7fc31d79651c9747",
      "date": 1640691710528
    },
    {
      "type": "edit",
      "id": "161c8f206a4f4223",
      "item": {
        "type": "reference",
        "id": "161c8f206a4f4223",
        "site": "wellspring.fed.wiki",
        "slug": "collective-ontology",
        "title": "Collective Ontology",
        "text": "We all make sense of the world through our consciousness, one that is define by patterns of concepts that are interconnected in our mind – a [[Semantic Network]]."
      },
      "date": 1640691715252
    },
    {
      "item": {
        "type": "factory",
        "id": "e887c26dd7f083ed"
      },
      "id": "e887c26dd7f083ed",
      "type": "add",
      "after": "161c8f206a4f4223",
      "date": 1640691781693
    },
    {
      "type": "edit",
      "id": "e887c26dd7f083ed",
      "item": {
        "type": "reference",
        "id": "e887c26dd7f083ed",
        "site": "code.fed.wiki.org",
        "slug": "hypercard",
        "title": "HyperCard",
        "text": "HyperCard combines graphics, scripting and persistence into an innovative approach to application programming."
      },
      "date": 1640691784938
    },
    {
      "id": "e887c26dd7f083ed",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "65bb5cccd265e843",
        "3f0c57acce373353",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "0b41757062fabd8c",
        "6710242d793c1ac6",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3",
        "73dc046feec6b6db",
        "29f3bf4b3f27b6f7",
        "d405990087a39e06",
        "abf698ab9455ed4b",
        "d4aafe39d9fd0f6b",
        "7ae5ac193356c468",
        "10c1f2488ad0c270",
        "a7a82d9387884a5d",
        "e887c26dd7f083ed",
        "7fc31d79651c9747",
        "161c8f206a4f4223"
      ],
      "date": 1640691787817
    },
    {
      "item": {
        "type": "factory",
        "id": "1155a77d683f89d0"
      },
      "id": "1155a77d683f89d0",
      "type": "add",
      "after": "161c8f206a4f4223",
      "date": 1640692622032
    },
    {
      "type": "edit",
      "id": "1155a77d683f89d0",
      "item": {
        "type": "mathjax",
        "id": "1155a77d683f89d0",
        "text": "The Ideal of Cognition"
      },
      "date": 1640692633701
    },
    {
      "item": {
        "type": "factory",
        "id": "ac6ce2e1d4d1fecc"
      },
      "id": "ac6ce2e1d4d1fecc",
      "type": "add",
      "after": "1155a77d683f89d0",
      "date": 1640692641217
    },
    {
      "type": "remove",
      "id": "1155a77d683f89d0",
      "date": 1640692642753
    },
    {
      "type": "edit",
      "id": "ac6ce2e1d4d1fecc",
      "item": {
        "type": "pagefold",
        "id": "ac6ce2e1d4d1fecc",
        "text": "The Ideal of Cognition"
      },
      "date": 1640692643633
    },
    {
      "item": {
        "type": "factory",
        "id": "0d203d558d1bbaff"
      },
      "id": "0d203d558d1bbaff",
      "type": "add",
      "after": "ac6ce2e1d4d1fecc",
      "date": 1640692645612
    },
    {
      "type": "edit",
      "id": "0d203d558d1bbaff",
      "item": {
        "type": "paragraph",
        "id": "0d203d558d1bbaff",
        "text": "There are eras when life peacefully flows along its accustomed channel, slowly broadening"
      },
      "date": 1640692680037
    },
    {
      "type": "edit",
      "id": "0d203d558d1bbaff",
      "item": {
        "type": "paragraph",
        "id": "0d203d558d1bbaff",
        "text": "There are eras when life peacefully flows along its accustomed channel, slowly broadening and deepening and not needing new paths, since the old ones do\nnot yet constrain them. And there are eras when life violently rushes through rapids and cliffs, clearing a new course in place of the old one that is too narrow and cramped. Heavy moss-covered rocks are rolled along and carried to the sea;\nage-old mountains are undermined and washed away. This is the critical work of life, and it is in such an era that we live. "
      },
      "date": 1640692745186
    },
    {
      "type": "edit",
      "id": "0d203d558d1bbaff",
      "item": {
        "type": "paragraph",
        "id": "0d203d558d1bbaff",
        "text": "There are eras when life peacefully flows along its accustomed channel, slowly broadening and deepening and not needing new paths, since the old ones do\nnot yet constrain them. And there are eras when life violently rushes through rapids and cliffs, clearing a new course in place of the old one that is too narrow and cramped. Heavy moss-covered rocks are rolled along and carried to the sea;\nage-old mountains are undermined and washed away. This is the critical work of life, and it is in such an era that we live. [https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwims63EuIb1AhUaQ_EDHcUGBukQFnoECAcQAQ&url=https%3A%2F%2Fbrill.com%2Fpreviewpdf%2Fbook%2Fedcoll%2F9789004300323%2FBP000002.xml&usg=AOvVaw1mh4rf1va8I-QwzlPPlYmJ pdf"
      },
      "date": 1640692760305
    },
    {
      "type": "edit",
      "id": "0d203d558d1bbaff",
      "item": {
        "type": "paragraph",
        "id": "0d203d558d1bbaff",
        "text": "There are eras when life peacefully flows along its accustomed channel, slowly broadening and deepening and not needing new paths, since the old ones do\nnot yet constrain them. And there are eras when life violently rushes through rapids and cliffs, clearing a new course in place of the old one that is too narrow and cramped. Heavy moss-covered rocks are rolled along and carried to the sea;\nage-old mountains are undermined and washed away. This is the critical work of life, and it is in such an era that we live. [https://brill.com/view/book/9789004300323/BP000002.xml?language=en pdf]"
      },
      "date": 1640692796816
    },
    {
      "type": "edit",
      "id": "0d203d558d1bbaff",
      "item": {
        "type": "paragraph",
        "id": "0d203d558d1bbaff",
        "text": "There are eras when life peacefully flows along its accustomed channel, slowly broadening and deepening and not needing new paths, since the old ones do\nnot yet constrain them. And there are eras when life violently rushes through rapids and cliffs, clearing a new course in place of the old one that is too narrow and cramped. Heavy moss-covered rocks are rolled along and carried to the sea;\nage-old mountains are undermined and washed away. This is the critical work of life, and it is in such an era that we live. [https://doi.org/10.1163/9789004300323_002 doi]"
      },
      "date": 1640692828643
    },
    {
      "item": {
        "type": "factory",
        "id": "8247bec1e2561720"
      },
      "id": "8247bec1e2561720",
      "type": "add",
      "after": "0d203d558d1bbaff",
      "date": 1640693335097
    },
    {
      "type": "edit",
      "id": "8247bec1e2561720",
      "item": {
        "type": "reference",
        "id": "8247bec1e2561720",
        "site": "found.ward.bay.wiki.org",
        "slug": "hypertalk-by-dan-winkler",
        "title": "HyperTalk by Dan Winkler",
        "text": "HyperTalk was designed by Bill Atkinson [sic] to encourage 'programming for the rest of us'. It is a deceptively powerful and extensible language that introduced a lot of people to the basics of programming through a simple English-like syntax, making it easy to learn quickly enough to write off the top of your head, then hack around while you're actually using the result."
      },
      "date": 1640693343007
    },
    {
      "id": "8247bec1e2561720",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "65bb5cccd265e843",
        "3f0c57acce373353",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "0b41757062fabd8c",
        "6710242d793c1ac6",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3",
        "73dc046feec6b6db",
        "29f3bf4b3f27b6f7",
        "d405990087a39e06",
        "abf698ab9455ed4b",
        "d4aafe39d9fd0f6b",
        "7ae5ac193356c468",
        "10c1f2488ad0c270",
        "a7a82d9387884a5d",
        "e887c26dd7f083ed",
        "8247bec1e2561720",
        "7fc31d79651c9747",
        "161c8f206a4f4223",
        "ac6ce2e1d4d1fecc",
        "0d203d558d1bbaff"
      ],
      "date": 1640693352734
    },
    {
      "item": {
        "type": "factory",
        "id": "ad659dd81541510a"
      },
      "id": "ad659dd81541510a",
      "type": "add",
      "after": "0d203d558d1bbaff",
      "date": 1640694827947
    },
    {
      "item": {
        "type": "factory",
        "id": "0cf523c2da14f299"
      },
      "id": "0cf523c2da14f299",
      "type": "add",
      "after": "ad659dd81541510a",
      "date": 1640694833332
    },
    {
      "type": "edit",
      "id": "ad659dd81541510a",
      "item": {
        "type": "pagefold",
        "id": "ad659dd81541510a",
        "text": "~"
      },
      "date": 1640694834769
    },
    {
      "type": "remove",
      "id": "0cf523c2da14f299",
      "date": 1640694834826
    },
    {
      "item": {
        "type": "factory",
        "id": "c3f1ca45c63173b0"
      },
      "id": "c3f1ca45c63173b0",
      "type": "add",
      "after": "ad659dd81541510a",
      "date": 1640694836238
    },
    {
      "type": "edit",
      "id": "c3f1ca45c63173b0",
      "item": {
        "type": "paragraph",
        "id": "c3f1ca45c63173b0",
        "text": "https://malleable.systems/blog/2021/12/28/collective-digest-2021/"
      },
      "date": 1640694837834
    },
    {
      "type": "edit",
      "id": "c3f1ca45c63173b0",
      "item": {
        "type": "markdown",
        "id": "c3f1ca45c63173b0",
        "text": "https://malleable.systems/blog/2021/12/28/collective-digest-2021/"
      },
      "date": 1640694839126
    },
    {
      "item": {
        "type": "factory",
        "id": "b0baecfafeca0902"
      },
      "id": "b0baecfafeca0902",
      "type": "add",
      "after": "c3f1ca45c63173b0",
      "date": 1640695656137
    },
    {
      "type": "edit",
      "id": "b0baecfafeca0902",
      "item": {
        "type": "paragraph",
        "id": "b0baecfafeca0902",
        "text": "Sandboxing"
      },
      "date": 1640695661078
    },
    {
      "type": "edit",
      "id": "b0baecfafeca0902",
      "item": {
        "type": "paragraph",
        "id": "b0baecfafeca0902",
        "text": "[[Sandboxing]]"
      },
      "date": 1640695672480
    },
    {
      "type": "edit",
      "id": "c3f1ca45c63173b0",
      "item": {
        "type": "markdown",
        "id": "c3f1ca45c63173b0",
        "text": "https://malleable.systems/blog/2021/12/28/collective-digest-2021/ [[Malleable Systems Collective]]"
      },
      "date": 1640695779420
    },
    {
      "item": {
        "type": "factory",
        "id": "a18f24b0cfc75c51"
      },
      "id": "a18f24b0cfc75c51",
      "type": "add",
      "after": "b0baecfafeca0902",
      "date": 1640696152114
    },
    {
      "type": "edit",
      "id": "a18f24b0cfc75c51",
      "item": {
        "type": "paragraph",
        "id": "a18f24b0cfc75c51",
        "text": "[[Sandbox]]"
      },
      "date": 1640696160981
    },
    {
      "item": {
        "type": "factory",
        "id": "e829ecb5569f0226"
      },
      "id": "e829ecb5569f0226",
      "type": "add",
      "after": "a18f24b0cfc75c51",
      "date": 1640697044106
    },
    {
      "type": "edit",
      "id": "e829ecb5569f0226",
      "item": {
        "type": "paragraph",
        "id": "e829ecb5569f0226",
        "text": "[[The Magritte Meta-Model]]"
      },
      "date": 1640697049980
    },
    {
      "item": {
        "type": "factory",
        "id": "d733d4b93ba081c6"
      },
      "id": "d733d4b93ba081c6",
      "type": "add",
      "after": "e829ecb5569f0226",
      "date": 1640697272863
    },
    {
      "type": "edit",
      "id": "d733d4b93ba081c6",
      "item": {
        "type": "paragraph",
        "id": "d733d4b93ba081c6",
        "text": "Learning Object-Oriented Programming, Design with TDD in Pharo"
      },
      "date": 1640697276161
    },
    {
      "item": {
        "type": "factory",
        "id": "a35050ed812e123c"
      },
      "id": "a35050ed812e123c",
      "type": "add",
      "after": "d733d4b93ba081c6",
      "date": 1640697284161
    },
    {
      "type": "edit",
      "id": "a35050ed812e123c",
      "item": {
        "type": "reference",
        "id": "a35050ed812e123c",
        "site": "wiki.ralfbarkow.ch",
        "slug": "learning-object-oriented-programming-design-with-tdd-in-pharo",
        "title": "Learning Object-Oriented Programming, Design with TDD in Pharo",
        "text": "“[[Learning Object-Oriented Programming, Design with TDD in Pharo]].” https://books.pharo.org/learning-oop/ (accessed Jun. 22, 2021)."
      },
      "date": 1640697286291
    },
    {
      "type": "remove",
      "id": "d733d4b93ba081c6",
      "date": 1640697289733
    },
    {
      "item": {
        "type": "factory",
        "id": "08382e9c9317244c"
      },
      "id": "08382e9c9317244c",
      "type": "add",
      "after": "a35050ed812e123c",
      "date": 1640698870896
    },
    {
      "id": "08382e9c9317244c",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "65bb5cccd265e843",
        "3f0c57acce373353",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "0b41757062fabd8c",
        "6710242d793c1ac6",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3",
        "73dc046feec6b6db",
        "29f3bf4b3f27b6f7",
        "d405990087a39e06",
        "abf698ab9455ed4b",
        "d4aafe39d9fd0f6b",
        "7ae5ac193356c468",
        "10c1f2488ad0c270",
        "a7a82d9387884a5d",
        "e887c26dd7f083ed",
        "8247bec1e2561720",
        "7fc31d79651c9747",
        "161c8f206a4f4223",
        "08382e9c9317244c",
        "ac6ce2e1d4d1fecc",
        "0d203d558d1bbaff",
        "ad659dd81541510a",
        "c3f1ca45c63173b0",
        "b0baecfafeca0902",
        "a18f24b0cfc75c51",
        "e829ecb5569f0226",
        "a35050ed812e123c"
      ],
      "date": 1640698878132
    },
    {
      "id": "6437bd8ae9dc3af5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6437bd8ae9dc3af5",
        "text": "Ideally, I should be able to not only reference a page, but I should be able to reference any paragraph on any page."
      },
      "after": "161c8f206a4f4223",
      "date": 1640698882718
    },
    {
      "type": "edit",
      "id": "08382e9c9317244c",
      "item": {
        "type": "reference",
        "id": "08382e9c9317244c",
        "site": "andrew.shll.wiki",
        "slug": "december-25-2021",
        "title": "December 25, 2021",
        "text": "I have an idea for fed wikis."
      },
      "date": 1640698924992
    },
    {
      "id": "08382e9c9317244c",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "65bb5cccd265e843",
        "3f0c57acce373353",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "0b41757062fabd8c",
        "6710242d793c1ac6",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3",
        "73dc046feec6b6db",
        "29f3bf4b3f27b6f7",
        "d405990087a39e06",
        "abf698ab9455ed4b",
        "d4aafe39d9fd0f6b",
        "7ae5ac193356c468",
        "10c1f2488ad0c270",
        "a7a82d9387884a5d",
        "e887c26dd7f083ed",
        "8247bec1e2561720",
        "7fc31d79651c9747",
        "161c8f206a4f4223",
        "08382e9c9317244c",
        "6437bd8ae9dc3af5",
        "ac6ce2e1d4d1fecc",
        "0d203d558d1bbaff",
        "ad659dd81541510a",
        "c3f1ca45c63173b0",
        "b0baecfafeca0902",
        "a18f24b0cfc75c51",
        "e829ecb5569f0226",
        "a35050ed812e123c"
      ],
      "date": 1640698929786
    },
    {
      "type": "edit",
      "id": "6437bd8ae9dc3af5",
      "item": {
        "type": "paragraph",
        "id": "6437bd8ae9dc3af5",
        "text": "> Ideally, I should be able to not only reference a page, but I should be able to reference any paragraph on any page."
      },
      "date": 1640698935104
    },
    {
      "type": "edit",
      "id": "6437bd8ae9dc3af5",
      "item": {
        "type": "markdown",
        "id": "6437bd8ae9dc3af5",
        "text": "> Ideally, I should be able to not only reference a page, but I should be able to reference any paragraph on any page."
      },
      "date": 1640698936724
    },
    {
      "id": "3f0c57acce373353",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "65bb5cccd265e843",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "0b41757062fabd8c",
        "6710242d793c1ac6",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3",
        "73dc046feec6b6db",
        "29f3bf4b3f27b6f7",
        "d405990087a39e06",
        "abf698ab9455ed4b",
        "d4aafe39d9fd0f6b",
        "7ae5ac193356c468",
        "10c1f2488ad0c270",
        "a7a82d9387884a5d",
        "e887c26dd7f083ed",
        "8247bec1e2561720",
        "7fc31d79651c9747",
        "161c8f206a4f4223",
        "08382e9c9317244c",
        "6437bd8ae9dc3af5",
        "3f0c57acce373353",
        "ac6ce2e1d4d1fecc",
        "0d203d558d1bbaff",
        "ad659dd81541510a",
        "c3f1ca45c63173b0",
        "b0baecfafeca0902",
        "a18f24b0cfc75c51",
        "e829ecb5569f0226",
        "a35050ed812e123c"
      ],
      "date": 1640699079369
    },
    {
      "id": "65bb5cccd265e843",
      "type": "move",
      "order": [
        "7541777aa66bbc80",
        "0f3902ea9c5cbe41",
        "822987cb82b48570",
        "4bae8653125d0d1e",
        "9ac90acc31360b57",
        "cf5c6cc1d3dd6b98",
        "89bf67234e972e63",
        "cf4aeafb8b75d1bb",
        "71342a7ea0c72360",
        "6848f6d2255c8966",
        "52927316ecdcfcbe",
        "e25a50652801163f",
        "0b41757062fabd8c",
        "6710242d793c1ac6",
        "7df2637ce65088b3",
        "bb65461fd3d1b8a8",
        "2dfcd6b4556945e3",
        "73dc046feec6b6db",
        "29f3bf4b3f27b6f7",
        "d405990087a39e06",
        "abf698ab9455ed4b",
        "d4aafe39d9fd0f6b",
        "7ae5ac193356c468",
        "10c1f2488ad0c270",
        "a7a82d9387884a5d",
        "e887c26dd7f083ed",
        "8247bec1e2561720",
        "7fc31d79651c9747",
        "161c8f206a4f4223",
        "08382e9c9317244c",
        "6437bd8ae9dc3af5",
        "65bb5cccd265e843",
        "3f0c57acce373353",
        "ac6ce2e1d4d1fecc",
        "0d203d558d1bbaff",
        "ad659dd81541510a",
        "c3f1ca45c63173b0",
        "b0baecfafeca0902",
        "a18f24b0cfc75c51",
        "e829ecb5569f0226",
        "a35050ed812e123c"
      ],
      "date": 1640699096922
    },
    {
      "type": "edit",
      "id": "3f0c57acce373353",
      "item": {
        "type": "paragraph",
        "id": "3f0c57acce373353",
        "text": "[[SeanDeNigris]] via [https://discord.com/channels/729445214812504107/729445215341117522/925163945306779718 discord]\nI finally have a working prototype of a \"cited\" snippet, which knows the source of the information, and (coming soon) can trace back to the reference if available. "
      },
      "date": 1640699135490
    },
    {
      "type": "add",
      "id": "d27e9c931c912ef7",
      "item": {
        "type": "paragraph",
        "id": "d27e9c931c912ef7",
        "text": "> As usually happens when I put theory into practice, I've realized this is not really what I want. What I want is a dynamic bit of behavior that can be plugged into any snippet, like a talent or Bloc aptitude. The reason is that, while my snippet handles sourced text, a Pharo snippet could just as easily be \"sourced\" e.g. come from a book or forum, but I'd have to mirror the whole snippet hierarchy to have citation available everywhere."
      },
      "after": "3f0c57acce373353",
      "date": 1640699137321
    },
    {
      "type": "edit",
      "id": "d27e9c931c912ef7",
      "item": {
        "type": "markdown",
        "id": "d27e9c931c912ef7",
        "text": "> As usually happens when I put theory into practice, I've realized this is not really what I want. What I want is a dynamic bit of behavior that can be plugged into any snippet, like a talent or Bloc aptitude. The reason is that, while my snippet handles sourced text, a Pharo snippet could just as easily be \"sourced\" e.g. come from a book or forum, but I'd have to mirror the whole snippet hierarchy to have citation available everywhere."
      },
      "date": 1640699139213
    },
    {
      "type": "add",
      "id": "0d65e286027b2e46",
      "item": {
        "type": "paragraph",
        "id": "0d65e286027b2e46",
        "text": "For this and other reasons it is often believed that automation of GUI testing is complex, requires a lot of additional work and overall it is not worth the effort. While this might be true in some cases, it definitely does not apply to majority of applications. In fact, automated testing of critical paths could be implemented with an effort equivalent to the implementation of server-side unit tests. But even more than on the server-side, the testability of developed applications must be taken into account from the very beginning."
      },
      "after": "cf5c6cc1d3dd6b98",
      "date": 1640701543031
    },
    {
      "type": "add",
      "id": "a7849ff66d87635d",
      "item": {
        "type": "paragraph",
        "id": "a7849ff66d87635d",
        "text": "See [[Server-Side Unit Testing]]"
      },
      "after": "0d65e286027b2e46",
      "date": 1640701614168
    },
    {
      "type": "edit",
      "id": "a7849ff66d87635d",
      "item": {
        "type": "paragraph",
        "id": "a7849ff66d87635d",
        "text": "See [[Server-Side Unit Testing]], [[SUnit]]"
      },
      "date": 1640701766368
    },
    {
      "item": {
        "type": "factory",
        "id": "a3b885639500f67c"
      },
      "id": "a3b885639500f67c",
      "type": "add",
      "after": "a35050ed812e123c",
      "date": 1640708344489
    },
    {
      "item": {
        "type": "factory",
        "id": "22e1e4f3dae3da60"
      },
      "id": "22e1e4f3dae3da60",
      "type": "add",
      "after": "a3b885639500f67c",
      "date": 1640708353181
    },
    {
      "type": "edit",
      "id": "a3b885639500f67c",
      "item": {
        "type": "pagefold",
        "id": "a3b885639500f67c",
        "text": "~"
      },
      "date": 1640708354350
    },
    {
      "type": "edit",
      "id": "22e1e4f3dae3da60",
      "item": {
        "type": "paragraph",
        "id": "22e1e4f3dae3da60",
        "text": "[[Heptabase]]"
      },
      "date": 1640708361002
    },
    {
      "item": {
        "type": "factory",
        "id": "279ac0d676678bc5"
      },
      "id": "279ac0d676678bc5",
      "type": "add",
      "after": "22e1e4f3dae3da60",
      "date": 1640712471944
    },
    {
      "type": "edit",
      "id": "279ac0d676678bc5",
      "item": {
        "type": "pagefold",
        "id": "279ac0d676678bc5",
        "text": "~\n"
      },
      "date": 1640712478154
    },
    {
      "item": {
        "type": "factory",
        "id": "1b30338f62cdad6e"
      },
      "id": "1b30338f62cdad6e",
      "type": "add",
      "after": "279ac0d676678bc5",
      "date": 1640712479577
    },
    {
      "type": "edit",
      "id": "1b30338f62cdad6e",
      "item": {
        "type": "paragraph",
        "id": "1b30338f62cdad6e",
        "text": "[[Cuis Smalltalk]]"
      },
      "date": 1640712489032
    },
    {
      "item": {
        "type": "factory",
        "id": "8d212a2d3ee81095"
      },
      "id": "8d212a2d3ee81095",
      "type": "add",
      "after": "1b30338f62cdad6e",
      "date": 1640730559325
    },
    {
      "type": "edit",
      "id": "8d212a2d3ee81095",
      "item": {
        "type": "paragraph",
        "id": "8d212a2d3ee81095",
        "text": "[[Malleable Software]]"
      },
      "date": 1640730565411
    },
    {
      "type": "add",
      "id": "d23e1c27c4171605",
      "item": {
        "type": "paragraph",
        "id": "d23e1c27c4171605",
        "text": "In general there are three approaches to automated GUI testing:\n• Testing only business logic that has been sepa- rated from GUI components\n• Testing that involves interactions with and verification of graphical components\n• Robot-based testing, where a library or tool mimics user actions (mouse and keyboard) and allows verifying the resulting state of the inter- face."
      },
      "after": "a7849ff66d87635d",
      "date": 1640731588687
    },
    {
      "type": "edit",
      "id": "d23e1c27c4171605",
      "item": {
        "type": "markdown",
        "id": "d23e1c27c4171605",
        "text": "In general there are three approaches to automated GUI testing:\n• Testing only business logic that has been sepa- rated from GUI components\n• Testing that involves interactions with and verification of graphical components\n• Robot-based testing, where a library or tool mimics user actions (mouse and keyboard) and allows verifying the resulting state of the inter- face."
      },
      "date": 1640731589455
    },
    {
      "type": "edit",
      "id": "d23e1c27c4171605",
      "item": {
        "type": "markdown",
        "id": "d23e1c27c4171605",
        "text": "In general there are three approaches to automated GUI testing:\n• Testing only business logic that has been separated from GUI components\n• Testing that involves interactions with and verification of graphical components\n• Robot-based testing, where a library or tool mimics user actions (mouse and keyboard) and allows verifying the resulting state of the interface."
      },
      "date": 1640731625515
    },
    {
      "type": "edit",
      "id": "d23e1c27c4171605",
      "item": {
        "type": "markdown",
        "id": "d23e1c27c4171605",
        "text": "In general there are three approaches to automated GUI testing:\n• Testing only business logic that has been separated from GUI components\n• Testing that involves interactions with and verification of graphical components\n• Robot-based testing, where a library or tool mimics user actions (mouse and keyboard) and allows verifying the resulting state of the interface.\n"
      },
      "date": 1640731632625
    },
    {
      "type": "add",
      "id": "500ea6242040224c",
      "item": {
        "type": "markdown",
        "id": "500ea6242040224c",
        "text": "These three techniques do not exclude each other. On the contrary, they can be used together in a complementary way."
      },
      "after": "d23e1c27c4171605",
      "date": 1640731639059
    },
    {
      "type": "edit",
      "id": "500ea6242040224c",
      "item": {
        "type": "markdown",
        "id": "500ea6242040224c",
        "text": "These three techniques do not exclude each other. On the contrary, they can be used together in a complementary way.\n"
      },
      "date": 1640731661142
    },
    {
      "type": "add",
      "id": "3344f12a22dcd051",
      "item": {
        "type": "markdown",
        "id": "3344f12a22dcd051",
        "text": "[[Separating Logic From GUI]]"
      },
      "after": "500ea6242040224c",
      "date": 1640731664601
    },
    {
      "type": "edit",
      "id": "89bf67234e972e63",
      "item": {
        "type": "paragraph",
        "id": "89bf67234e972e63",
        "text": "G. Kruk, O. Alves, L. Molinari, and E. Roux, “[[Best Practices for Efficient Development of JavaFX Applications]]”, presented at ICALEPCS’17, Barcelona, Spain, paper THAPL02"
      },
      "date": 1640732853417
    },
    {
      "type": "edit",
      "id": "89bf67234e972e63",
      "item": {
        "type": "paragraph",
        "id": "89bf67234e972e63",
        "text": "G. Kruk, O. Alves, L. Molinari, and E. Roux, “[[Best Practices for Efficient Development of JavaFX Applications]]”, presented at ICALEPCS’17, Barcelona, Spain, paper THAPL02."
      },
      "date": 1640732855561
    },
    {
      "type": "add",
      "id": "a3d1009d0677c5af",
      "item": {
        "type": "paragraph",
        "id": "a3d1009d0677c5af",
        "text": "[[Test Double]]"
      },
      "after": "89bf67234e972e63",
      "date": 1640732861655
    }
  ]
}