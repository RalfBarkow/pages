{
  "title": "Software Is Art",
  "story": [
    {
      "type": "html",
      "text": "Something is terribly wrong with the way that we try to make large pieces of software. For several years now, I have had the nagging suspicion that we are trying to imitate entirely the wrong crowd of people. We keep trying to act like engineers. We, software developers, are simply <i>not</i> engineers at all.",
      "id": "33ad184b7b351c99073a4dc7930269d6"
    },
    {
      "type": "html",
      "text": "\nNo repeatability, see. Building software is not at all like building bridges, thousands of which have been built before, in every conceivable situation, for a huge variety of purposes, using inumerable kinds of materials. For us, every creative act is one which explores a new medium, new materials, new dimensions. Perhaps, a few hundred years from now, software building will become repeatable, predictable, and therefore \"engineerable\".",
      "id": "9e1a741da2b90487f232de86cb744d3b"
    },
    {
      "type": "html",
      "text": "\nNow, I am not trying to deny the creative part of engineering. Nor am I decrying the many good practices we can learn from the engineering disciplines. Nor do I wish to offend old friends, many of whom are fine engineers. But we are not, and cannot be doing, engineering.",
      "id": "7f0604c6eed8a3212e29d0f370edd3c2"
    },
    {
      "type": "html",
      "text": "\nWhat we do is much closer akin to art. This constantly striving to be something we are not lies at the heart of many of the woes and frustrations of the software development process - the failed methodologies, the unused notations and the ignored theories.",
      "id": "e28892652e19e10d004b3f916207e5ae"
    },
    {
      "type": "html",
      "text": "\nSo, apart from noisily proclaiming [[Software Is Art]], is there somewhere more fruitful we can look for analogous modes of working? <i>Yes!</i> Theatre, and especially that part of theatre that makes movies. They, too, work with a highly technical process involving large teams of people and sometimes huge amounts of money, need widely differing sets of skills, and start from a poorly-understood \"specification\" to achieve an end-product that is a marvelous mixture of art and science.",
      "id": "10ffd2129232320bc2c4dd982fcc0c10"
    },
    {
      "type": "html",
      "text": "\nNow think how many movie-productions are late and over-budget. How many are box-office flops, despite all the \"right\" ingredients. How many end up making just another bit of candy-floss.",
      "id": "ca117bf9e8cc114542ba5ab43a6861d5"
    },
    {
      "type": "html",
      "text": "\nWhen I look at and read about software projects that have been very successful, it seems to me that they were almost always organized more like movie-production teams than like an engineering design/production team.",
      "id": "6f11784d21b4562a9d8beb1168d19e4e"
    },
    {
      "type": "html",
      "text": "\nI think it is time to \"come out of the closet\", and confess that we are closer to being artists than we are to being engineers.",
      "id": "a4ebd0af7af833b433a1324f568b7e1c"
    },
    {
      "type": "html",
      "text": "<i>Some of this is not what I started out trying to say. Part of why I think [[Software Is Art]] has to do with starting, as a painter does, before a blank canvas, familiar tools and palette to hand, striving to translate some clean and beautiful conception held clearly in mind's eye, through an imperfect medium, into something lovely desired by others (who hopefully pay you for it!).  Somehow, this seems far different from the path that burst out above...</i>",
      "id": "726283bc130e21b8869d4dfa5043fa3b"
    },
    {
      "type": "html",
      "text": "\nIt also seems to me that [[Extreme Programming]] is a recognition of this same idea - just take a look at [[Extreme Roles]], and try and relate them to analogous roles in movie-making...",
      "id": "97603cb386bcf676ff89e28515a08a72"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "\nYou know, we keep looking for another field that captures what developing software is really like... but I think developing software is really like developing software, and not anything else. It is something new, it is itself.  Decades from now, something else will be likened to writing software. However, I also have tried to find what software is like, and wrote [[Software Development As Community Poetry Writing]]. Which I thought was pretty close, until I more recently thought up [[Software As Rock Climbing]], more generally put as [[Software Development Asa Cooperative Game]], but rock climbing has something special about it. So I agree in large part with this page, saying [[Software Is Art]] more than Software Is Engineering, and mark the difference with those pointers to other pages. -- [[Alistair Cockburn]]",
      "id": "c4162f131658d5d45b8838e84256d53c"
    },
    {
      "type": "html",
      "text": "<i>Yes, Software is really just like Software. But! People (lots of them) in the game keep looking to the engineering disciplines for helpful methods, processes, structures.</i>",
      "id": "65fb1e5cc0e593248c73788474bcf47b"
    },
    {
      "type": "html",
      "text": "\nSee [[Discipline Envy]].",
      "id": "a462cf588b6e78f86478a1e7b33df77b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "Agreed. As one professor countered, when I likened programming to art, \"but then how can we standardize tests of programming, or set up Advance Placement tests?\". And so some group of us try to pull in other similies to highlight the non-engineering aspects of software development, while others keep looking to the most precise activities, to help force it to become more precise.  -- [[Alistair Cockburn]]",
      "id": "42b63c8d6cf3be878ee2af3af03252e3"
    },
    {
      "type": "html",
      "text": "\nSoftware is not art, but craft. Art appeals to the emotions.",
      "id": "bac6f38b1412fa94f6c39c10ed7586ae"
    },
    {
      "type": "html",
      "text": "\nMuch software can be engineered. Most software has been written before.",
      "id": "de6ff7c388c3efd60f72597fae80d69f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "In his book [[Accidental Empires]], [[Bob Cringely]] floated the idea of a software production model along the lines of a Hollywood Film Studio. Developers get together for only one release. If the release is successful and people want it, the group can be reformed for release 2 \"the next generation\"...",
      "id": "6e01acdba1906934735ed445af6299f8"
    },
    {
      "type": "html",
      "text": "\nHe thinks that having  \"one in twenty startups failing\" is scaring too many people away from developing their new ideas.",
      "id": "006dddb43d3d9ca149dbafbe6b669a3e"
    },
    {
      "type": "html",
      "text": "\nMaybe this business model would reduce the urge that some people must have to produce upgrades that customers don't really want (aka <i>Landfill Releases</i>).",
      "id": "ee810b129e118215124caaa8b92cc7f7"
    },
    {
      "type": "html",
      "text": "\nDoes it make sense to have [[Software As Film Making]]?",
      "id": "31679fce9cdee7e8bd640a2ab8e3028b"
    },
    {
      "type": "html",
      "text": "(Maybe this explains some of the \"cute\" Help->About scrolling dialogue boxes around.)",
      "id": "3933a05a0f503e8c3a22a50bf3026fbf"
    },
    {
      "type": "html",
      "text": "--",
      "id": "edb56fc02c8e726821ab518e31600f54"
    },
    {
      "type": "html",
      "text": "<i>[[Ken Auer]] hosted a workshop on software development as a studio discipline at Oopsla98. See [http://www.rolemodelsoft.com/OOPSLA98/studio/index.htm www.rolemodelsoft.com].</i>",
      "id": "046661bdc463e28e7e803a35519e98b4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "I have very strong feelings about this page, but the feelings are muddled. On the one hand, I like being creative and I tend to think that many people get into software development because it is a creative discipline. On the other hand, I am sure that if we do not see the artistic model as a problem, the rest of the world will.  ",
      "id": "94c321392379fb0528507a23bc118a64"
    },
    {
      "type": "html",
      "text": "\nIn the artistic model, the artist has a vision and goes for it. There are two general ways to go... one is to secure sponsorship and place your vision up for negotiation; the other is to go it alone, uncompromised and possibly doomed.  Artists often consider it a victory when they are able to get their vision across, even if it is at the expense of their sponsor's vision. Can developers afford that reputation? I don't think they can in general.  ",
      "id": "66d9fc37b5434fc0b7a9e556d8e70a88"
    },
    {
      "type": "html",
      "text": "\nThere are many cases of strong-willed people who thwart all obstacles to bring their vision to life, using clients as a means to an end and caring little for them. The attitude is \"here is a person with money who will let me fulfil my vision.\"  If the visions are coincident or the <i>artist</i> is persuasive, this approach can work, but it often becomes a loss for the customer. We can appreciate films and paintings, but someone had to live in [[Falling Water]]; likewise, people have to use software.",
      "id": "f42b2198827c62a67fa348ee66bc8f04"
    },
    {
      "type": "html",
      "text": "Some software does have a <i>wow</i> factor. Games are like that, but much other software is deeply utilitarian. Sponsors don't want developers to pursue an idiosyncratic vision, knock their socks off, or compete for the attention of other people. They just want software that is unintrusive and allows them to work better. And, you know, if somehow they found a way to do their work better without software, many of them wouldn't miss a moment's sleep. If [[Software Is Art]], we are our own primary audience. I don't think that is too bad, unless we forget it. I think that engineers must have the same sense of appreciation for their work.",
      "id": "4ad5504146db2893c6250c31896788b5"
    },
    {
      "type": "html",
      "text": "-- [[Michael Feathers]]",
      "id": "a392083e831f7c70787ac7635f4afba5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "\nI think that, before we can judge whether [[Software Is Art]], we have to know what \"art\" is, and I suspect that the modern view of art - something existing for its own sake, lying out of the ordinary world, intelligible only to art scene insiders - is not helpful for mining whatever may be useful from this classification.",
      "id": "247bd6452c1b765f0ac30fdbddc8baca"
    },
    {
      "type": "html",
      "text": "\nThe Scholastic formulation conceives art as an intellectual virtue, an operative (as opposed to speculative) habit of right reasoning about something to be made.\nNow, if you ask me whether creating good software involves right reasoning about something to be made, I will answer yes a lot faster than if you ask me whether good software is a work of art.",
      "id": "866695978217a24234ed725091f07cd9"
    },
    {
      "type": "html",
      "text": "\nWith this more robust notion of art - rather than something like \"an object created to be looked at and reacted to\" - I think I can get something out of thinking about art in relation to creating software.",
      "id": "9bb3c70c0cd3f0f7ea47e1b02ffd572d"
    },
    {
      "type": "html",
      "text": "\nI wonder, too, about the usefulness of distinguishing art from craft, or artist from artisan. I think this is a relatively recent distinction with little value for understanding software. The Scholastic distinction is between the fine arts, whose end is the beautiful (\"that which, being seen, pleases\"), and the other arts, whose end is service to man. Can I say that [[Software Is Art]] but [[Beauty Aint My Business No Sir]]?",
      "id": "71109510e9c5945d262d21de4d1e816f"
    },
    {
      "type": "html",
      "text": "-- [[Tom Kreitzberg]]",
      "id": "de84f9c905042da15eed33020215aa78"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "\nA bridge or a circuit board can be represented with precision in another language: math. But code has only one precise representation, itself. (UML is imprecise, often fuzzy.) I think this is parallel to art: a painting really can't be described, it must be seen as it is.",
      "id": "9bb8eec465a2406752ce01046de51316"
    },
    {
      "type": "html",
      "text": "-- [[Brad Williams]]",
      "id": "2d52cb5d61cdcea83c95e7f59c60f610"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "Software is regarded by many as a science, art, trade, and craft all in one.",
      "id": "b96ebc55e1b68ce702fa2cd4c42a9b0f"
    },
    {
      "type": "html",
      "text": "\nThis quote from [[Charles Simonyi]] provides a good summary:",
      "id": "f10d7dcca0a12ab3c6126effa63d6d60"
    },
    {
      "type": "html",
      "text": "\"The knowledge of the best algorithms is the <b>science</b>, and the imaging of the structure is the <b>art</b>. The details of algorithms, writing efficient lines of code to implement transformations on those structures, is the <b>trade</b> aspect of programming. Technically, this is called maintaining the invariances in the structures. Writing the code to maintain invariances is a relatively simple progression of <b>craftsmanship</b>, but it requires a lot of care and discipline.\"",
      "id": "9f246d1ef094553399f2ad5b00d7e941"
    },
    {
      "type": "html",
      "text": "-- [[Michael Leach]]",
      "id": "b7c3b499311bd307f5bd429aa7e1f6b3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "I just want to say that I think that Engineering Is Art. A good phrase I learned at one job I had (where I worked as a manufacturing engineer) is that if we keep doing things the way we did yesterday, we will only be as good as we were yesterday. This applies for engineering and it applies for software. You shouldn't reinvent the wheel in either software or engineering. You should see how things have been done and learn from it. You should have a toolkit of experience available in either one that you use (\"this worked really well last time when I did this...\") and maybe make carbon copies of tidbits in order to speed up a new project that's similar to an older one. This all applies for both software and engineering.",
      "id": "c7faa9f1becf82026d1535704d77cd8d"
    },
    {
      "type": "html",
      "text": "\nEngineering involves understanding the world around you and manipulating it to accomplish a purpose. You have to know more than just the common sense. You have to know theories and laws and design systems. Software is the same thing but the world you are in is all man made: the computer. You have to know your programming language's traits, strengths, and weaknesses. You have to know your hardware. You have to know mathematical theories, laws, and algorithms. This math came from the real world where math is a universal language.",
      "id": "cecce11db8dab02ee2b358ad692e5143"
    },
    {
      "type": "html",
      "text": "\nI know I'm not a real programmer. I'm not even a full engineer yet (nearly graduated). I'm also a designer. Maybe having all these experiences reduces my abilities and biases me. They are all rooted in the same foundation from my experience. It's problem solving and it is art.",
      "id": "86c24182668ab330ee2f2c5f44585b75"
    },
    {
      "type": "html",
      "text": "-- [[Heather Risedorph]]",
      "id": "cd85376c1f5e07552990605b2384ce59"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "Just like an artist, we can try to visualize the end result in our mind before even touching the paper (or PC). Design is like the the light outlines that are drawn at first to get the basic objects in proper perspective. Lines of code are like strokes of a brush, every drawn with care and precision. Watching things work is like stepping back and having a contented look at the image created.",
      "id": "fa976f71e85c700f90d58459e9383d72"
    },
    {
      "type": "html",
      "text": "-- Sanjay",
      "id": "01846ba6f55f8cc21d0454878ddc6a25"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "\nIt was said earlier, \"Software is not art, but craft. Art appeals to the emotions.\"",
      "id": "66a3bb372d9b6c11fd19bc6417d30684"
    },
    {
      "type": "html",
      "text": "\nI'd say that software appeals to the emotions as well. Surely all of us here can say that they've seen software that makes them want to retch; while, alternatively, on occasion we run across code that is so elegant and beautiful that it causes us inspiration. Code isn't always just about the results it produces; in many respects, it's also about the process, and is very close to writing and drawing. -- [[Jason La Porte]]",
      "id": "7a9a478b67766152ee7a5870650c48f1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7b300e8f3f15b3c3957532df2b41fb12"
    },
    {
      "type": "html",
      "text": "[[Category Subjectivity And Relativism]]",
      "id": "96b0af4028a1f98d6a7b035b702e60b0"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SoftwareIsArt c2.com]",
      "id": "ad394397f868618a737d44a86afa1605"
    }
  ],
  "journal": [
    {
      "date": 1334107553000,
      "id": "836965209cd172aa3a143f28e3516336",
      "type": "create",
      "item": {
        "title": "Software Is Art",
        "story": [
          {
            "type": "html",
            "text": "Something is terribly wrong with the way that we try to make large pieces of software. For several years now, I have had the nagging suspicion that we are trying to imitate entirely the wrong crowd of people. We keep trying to act like engineers. We, software developers, are simply <i>not</i> engineers at all.",
            "id": "33ad184b7b351c99073a4dc7930269d6"
          },
          {
            "type": "html",
            "text": "\nNo repeatability, see. Building software is not at all like building bridges, thousands of which have been built before, in every conceivable situation, for a huge variety of purposes, using inumerable kinds of materials. For us, every creative act is one which explores a new medium, new materials, new dimensions. Perhaps, a few hundred years from now, software building will become repeatable, predictable, and therefore \"engineerable\".",
            "id": "9e1a741da2b90487f232de86cb744d3b"
          },
          {
            "type": "html",
            "text": "\nNow, I am not trying to deny the creative part of engineering. Nor am I decrying the many good practices we can learn from the engineering disciplines. Nor do I wish to offend old friends, many of whom are fine engineers. But we are not, and cannot be doing, engineering.",
            "id": "7f0604c6eed8a3212e29d0f370edd3c2"
          },
          {
            "type": "html",
            "text": "\nWhat we do is much closer akin to art. This constantly striving to be something we are not lies at the heart of many of the woes and frustrations of the software development process - the failed methodologies, the unused notations and the ignored theories.",
            "id": "e28892652e19e10d004b3f916207e5ae"
          },
          {
            "type": "html",
            "text": "\nSo, apart from noisily proclaiming [[Software Is Art]], is there somewhere more fruitful we can look for analogous modes of working? <i>Yes!</i> Theatre, and especially that part of theatre that makes movies. They, too, work with a highly technical process involving large teams of people and sometimes huge amounts of money, need widely differing sets of skills, and start from a poorly-understood \"specification\" to achieve an end-product that is a marvelous mixture of art and science.",
            "id": "10ffd2129232320bc2c4dd982fcc0c10"
          },
          {
            "type": "html",
            "text": "\nNow think how many movie-productions are late and over-budget. How many are box-office flops, despite all the \"right\" ingredients. How many end up making just another bit of candy-floss.",
            "id": "ca117bf9e8cc114542ba5ab43a6861d5"
          },
          {
            "type": "html",
            "text": "\nWhen I look at and read about software projects that have been very successful, it seems to me that they were almost always organized more like movie-production teams than like an engineering design/production team.",
            "id": "6f11784d21b4562a9d8beb1168d19e4e"
          },
          {
            "type": "html",
            "text": "\nI think it is time to \"come out of the closet\", and confess that we are closer to being artists than we are to being engineers.",
            "id": "a4ebd0af7af833b433a1324f568b7e1c"
          },
          {
            "type": "html",
            "text": "<i>Some of this is not what I started out trying to say. Part of why I think [[Software Is Art]] has to do with starting, as a painter does, before a blank canvas, familiar tools and palette to hand, striving to translate some clean and beautiful conception held clearly in mind's eye, through an imperfect medium, into something lovely desired by others (who hopefully pay you for it!).  Somehow, this seems far different from the path that burst out above...</i>",
            "id": "726283bc130e21b8869d4dfa5043fa3b"
          },
          {
            "type": "html",
            "text": "\nIt also seems to me that [[Extreme Programming]] is a recognition of this same idea - just take a look at [[Extreme Roles]], and try and relate them to analogous roles in movie-making...",
            "id": "97603cb386bcf676ff89e28515a08a72"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "\nYou know, we keep looking for another field that captures what developing software is really like... but I think developing software is really like developing software, and not anything else. It is something new, it is itself.  Decades from now, something else will be likened to writing software. However, I also have tried to find what software is like, and wrote [[Software Development As Community Poetry Writing]]. Which I thought was pretty close, until I more recently thought up [[Software As Rock Climbing]], more generally put as [[Software Development Asa Cooperative Game]], but rock climbing has something special about it. So I agree in large part with this page, saying [[Software Is Art]] more than Software Is Engineering, and mark the difference with those pointers to other pages. -- [[Alistair Cockburn]]",
            "id": "c4162f131658d5d45b8838e84256d53c"
          },
          {
            "type": "html",
            "text": "<i>Yes, Software is really just like Software. But! People (lots of them) in the game keep looking to the engineering disciplines for helpful methods, processes, structures.</i>",
            "id": "65fb1e5cc0e593248c73788474bcf47b"
          },
          {
            "type": "html",
            "text": "\nSee [[Discipline Envy]].",
            "id": "a462cf588b6e78f86478a1e7b33df77b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "Agreed. As one professor countered, when I likened programming to art, \"but then how can we standardize tests of programming, or set up Advance Placement tests?\". And so some group of us try to pull in other similies to highlight the non-engineering aspects of software development, while others keep looking to the most precise activities, to help force it to become more precise.  -- [[Alistair Cockburn]]",
            "id": "42b63c8d6cf3be878ee2af3af03252e3"
          },
          {
            "type": "html",
            "text": "\nSoftware is not art, but craft. Art appeals to the emotions.",
            "id": "bac6f38b1412fa94f6c39c10ed7586ae"
          },
          {
            "type": "html",
            "text": "\nMuch software can be engineered. Most software has been written before.",
            "id": "de6ff7c388c3efd60f72597fae80d69f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "In his book [[Accidental Empires]], [[Bob Cringely]] floated the idea of a software production model along the lines of a Hollywood Film Studio. Developers get together for only one release. If the release is successful and people want it, the group can be reformed for release 2 \"the next generation\"...",
            "id": "6e01acdba1906934735ed445af6299f8"
          },
          {
            "type": "html",
            "text": "\nHe thinks that having  \"one in twenty startups failing\" is scaring too many people away from developing their new ideas.",
            "id": "006dddb43d3d9ca149dbafbe6b669a3e"
          },
          {
            "type": "html",
            "text": "\nMaybe this business model would reduce the urge that some people must have to produce upgrades that customers don't really want (aka <i>Landfill Releases</i>).",
            "id": "ee810b129e118215124caaa8b92cc7f7"
          },
          {
            "type": "html",
            "text": "\nDoes it make sense to have [[Software As Film Making]]?",
            "id": "31679fce9cdee7e8bd640a2ab8e3028b"
          },
          {
            "type": "html",
            "text": "(Maybe this explains some of the \"cute\" Help->About scrolling dialogue boxes around.)",
            "id": "3933a05a0f503e8c3a22a50bf3026fbf"
          },
          {
            "type": "html",
            "text": "--",
            "id": "edb56fc02c8e726821ab518e31600f54"
          },
          {
            "type": "html",
            "text": "<i>[[Ken Auer]] hosted a workshop on software development as a studio discipline at Oopsla98. See [http://www.rolemodelsoft.com/OOPSLA98/studio/index.htm www.rolemodelsoft.com].</i>",
            "id": "046661bdc463e28e7e803a35519e98b4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "I have very strong feelings about this page, but the feelings are muddled. On the one hand, I like being creative and I tend to think that many people get into software development because it is a creative discipline. On the other hand, I am sure that if we do not see the artistic model as a problem, the rest of the world will.  ",
            "id": "94c321392379fb0528507a23bc118a64"
          },
          {
            "type": "html",
            "text": "\nIn the artistic model, the artist has a vision and goes for it. There are two general ways to go... one is to secure sponsorship and place your vision up for negotiation; the other is to go it alone, uncompromised and possibly doomed.  Artists often consider it a victory when they are able to get their vision across, even if it is at the expense of their sponsor's vision. Can developers afford that reputation? I don't think they can in general.  ",
            "id": "66d9fc37b5434fc0b7a9e556d8e70a88"
          },
          {
            "type": "html",
            "text": "\nThere are many cases of strong-willed people who thwart all obstacles to bring their vision to life, using clients as a means to an end and caring little for them. The attitude is \"here is a person with money who will let me fulfil my vision.\"  If the visions are coincident or the <i>artist</i> is persuasive, this approach can work, but it often becomes a loss for the customer. We can appreciate films and paintings, but someone had to live in [[Falling Water]]; likewise, people have to use software.",
            "id": "f42b2198827c62a67fa348ee66bc8f04"
          },
          {
            "type": "html",
            "text": "Some software does have a <i>wow</i> factor. Games are like that, but much other software is deeply utilitarian. Sponsors don't want developers to pursue an idiosyncratic vision, knock their socks off, or compete for the attention of other people. They just want software that is unintrusive and allows them to work better. And, you know, if somehow they found a way to do their work better without software, many of them wouldn't miss a moment's sleep. If [[Software Is Art]], we are our own primary audience. I don't think that is too bad, unless we forget it. I think that engineers must have the same sense of appreciation for their work.",
            "id": "4ad5504146db2893c6250c31896788b5"
          },
          {
            "type": "html",
            "text": "-- [[Michael Feathers]]",
            "id": "a392083e831f7c70787ac7635f4afba5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "\nI think that, before we can judge whether [[Software Is Art]], we have to know what \"art\" is, and I suspect that the modern view of art - something existing for its own sake, lying out of the ordinary world, intelligible only to art scene insiders - is not helpful for mining whatever may be useful from this classification.",
            "id": "247bd6452c1b765f0ac30fdbddc8baca"
          },
          {
            "type": "html",
            "text": "\nThe Scholastic formulation conceives art as an intellectual virtue, an operative (as opposed to speculative) habit of right reasoning about something to be made.\nNow, if you ask me whether creating good software involves right reasoning about something to be made, I will answer yes a lot faster than if you ask me whether good software is a work of art.",
            "id": "866695978217a24234ed725091f07cd9"
          },
          {
            "type": "html",
            "text": "\nWith this more robust notion of art - rather than something like \"an object created to be looked at and reacted to\" - I think I can get something out of thinking about art in relation to creating software.",
            "id": "9bb3c70c0cd3f0f7ea47e1b02ffd572d"
          },
          {
            "type": "html",
            "text": "\nI wonder, too, about the usefulness of distinguishing art from craft, or artist from artisan. I think this is a relatively recent distinction with little value for understanding software. The Scholastic distinction is between the fine arts, whose end is the beautiful (\"that which, being seen, pleases\"), and the other arts, whose end is service to man. Can I say that [[Software Is Art]] but [[Beauty Aint My Business No Sir]]?",
            "id": "71109510e9c5945d262d21de4d1e816f"
          },
          {
            "type": "html",
            "text": "-- [[Tom Kreitzberg]]",
            "id": "de84f9c905042da15eed33020215aa78"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "\nA bridge or a circuit board can be represented with precision in another language: math. But code has only one precise representation, itself. (UML is imprecise, often fuzzy.) I think this is parallel to art: a painting really can't be described, it must be seen as it is.",
            "id": "9bb8eec465a2406752ce01046de51316"
          },
          {
            "type": "html",
            "text": "-- [[Brad Williams]]",
            "id": "2d52cb5d61cdcea83c95e7f59c60f610"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "Software is regarded by many as a science, art, trade, and craft all in one.",
            "id": "b96ebc55e1b68ce702fa2cd4c42a9b0f"
          },
          {
            "type": "html",
            "text": "\nThis quote from [[Charles Simonyi]] provides a good summary:",
            "id": "f10d7dcca0a12ab3c6126effa63d6d60"
          },
          {
            "type": "html",
            "text": "\"The knowledge of the best algorithms is the <b>science</b>, and the imaging of the structure is the <b>art</b>. The details of algorithms, writing efficient lines of code to implement transformations on those structures, is the <b>trade</b> aspect of programming. Technically, this is called maintaining the invariances in the structures. Writing the code to maintain invariances is a relatively simple progression of <b>craftsmanship</b>, but it requires a lot of care and discipline.\"",
            "id": "9f246d1ef094553399f2ad5b00d7e941"
          },
          {
            "type": "html",
            "text": "-- [[Michael Leach]]",
            "id": "b7c3b499311bd307f5bd429aa7e1f6b3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "I just want to say that I think that Engineering Is Art. A good phrase I learned at one job I had (where I worked as a manufacturing engineer) is that if we keep doing things the way we did yesterday, we will only be as good as we were yesterday. This applies for engineering and it applies for software. You shouldn't reinvent the wheel in either software or engineering. You should see how things have been done and learn from it. You should have a toolkit of experience available in either one that you use (\"this worked really well last time when I did this...\") and maybe make carbon copies of tidbits in order to speed up a new project that's similar to an older one. This all applies for both software and engineering.",
            "id": "c7faa9f1becf82026d1535704d77cd8d"
          },
          {
            "type": "html",
            "text": "\nEngineering involves understanding the world around you and manipulating it to accomplish a purpose. You have to know more than just the common sense. You have to know theories and laws and design systems. Software is the same thing but the world you are in is all man made: the computer. You have to know your programming language's traits, strengths, and weaknesses. You have to know your hardware. You have to know mathematical theories, laws, and algorithms. This math came from the real world where math is a universal language.",
            "id": "cecce11db8dab02ee2b358ad692e5143"
          },
          {
            "type": "html",
            "text": "\nI know I'm not a real programmer. I'm not even a full engineer yet (nearly graduated). I'm also a designer. Maybe having all these experiences reduces my abilities and biases me. They are all rooted in the same foundation from my experience. It's problem solving and it is art.",
            "id": "86c24182668ab330ee2f2c5f44585b75"
          },
          {
            "type": "html",
            "text": "-- [[Heather Risedorph]]",
            "id": "cd85376c1f5e07552990605b2384ce59"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "Just like an artist, we can try to visualize the end result in our mind before even touching the paper (or PC). Design is like the the light outlines that are drawn at first to get the basic objects in proper perspective. Lines of code are like strokes of a brush, every drawn with care and precision. Watching things work is like stepping back and having a contented look at the image created.",
            "id": "fa976f71e85c700f90d58459e9383d72"
          },
          {
            "type": "html",
            "text": "-- Sanjay",
            "id": "01846ba6f55f8cc21d0454878ddc6a25"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "\nIt was said earlier, \"Software is not art, but craft. Art appeals to the emotions.\"",
            "id": "66a3bb372d9b6c11fd19bc6417d30684"
          },
          {
            "type": "html",
            "text": "\nI'd say that software appeals to the emotions as well. Surely all of us here can say that they've seen software that makes them want to retch; while, alternatively, on occasion we run across code that is so elegant and beautiful that it causes us inspiration. Code isn't always just about the results it produces; in many respects, it's also about the process, and is very close to writing and drawing. -- [[Jason La Porte]]",
            "id": "7a9a478b67766152ee7a5870650c48f1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7b300e8f3f15b3c3957532df2b41fb12"
          },
          {
            "type": "html",
            "text": "[[Category Subjectivity And Relativism]]",
            "id": "96b0af4028a1f98d6a7b035b702e60b0"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SoftwareIsArt c2.com]",
            "id": "ad394397f868618a737d44a86afa1605"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1641408318862
    }
  ]
}