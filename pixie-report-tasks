{
  "title": "Pixie Report Tasks",
  "story": [
    {
      "type": "paragraph",
      "id": "813f897f2f90ac04",
      "text": "Tasks for [[Pixie Report]] project."
    },
    {
      "type": "paragraph",
      "id": "d79427cb16e54bbb",
      "text": "Progress notes to [[Pixie Report Scratchpad]] along with any learnings similar to the Github [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/learnings.md learnings] page. Pics to [[Pixie Report Snapshots]]."
    },
    {
      "type": "paragraph",
      "id": "8493195d282689d8",
      "text": "Harvest any tasks in the Github task list [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/in-browser-composer.md tasks] as appropriate."
    },
    {
      "type": "pagefold",
      "id": "12ad98aa36f87bfa",
      "text": "Summary above Features below"
    },
    {
      "type": "pagefold",
      "id": "d042175bb4a2d42a",
      "text": "Feature Complete Needs"
    },
    {
      "type": "paragraph",
      "id": "fff638c2724a007f",
      "text": "Features delivered:"
    },
    {
      "type": "pagefold",
      "id": "10d528fc12a8ce9a",
      "text": "Feature Task On Deck"
    },
    {
      "type": "pagefold",
      "id": "13885673fa2e100e",
      "text": "To Do By Category",
      "alias": "d042175bb4a2d42a"
    },
    {
      "type": "markdown",
      "id": "ef89e3713b8503c3",
      "text": "MILESTONES\n\n# MS 1: Paths and reading images\n\n- [x] Display a single PNG image resource in the page as an IMG resource.\n- [x] Display a single PNG image resource in the in-browser canvas. See [MDN Canvas Tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images)\n- [x] Composite two images having transparency on the upper layer, you can use a background and a pixie.\n- [x] Refactor to a tail recursive composition of an array of layer files. (_discarded for Promise.then()_).\n- [x] Read a pixie description file or another JSON blob and log it to the Javascript console or set the innerHTML of an element.\n- [x] Read a JSON resource and navigate to a sub value like a pixie text description. Echo like pixie description file."
    },
    {
      "type": "markdown",
      "id": "7f9bb4e8e295b715",
      "text": "## MS 1A: Excursion, parse request info using the DOM API.\n\n- [x] Using the local web server, can we use the [purple.bikeshed.org](http://purple.bikeshed.org) approach via the [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) DOM API? Try a FORM and/or link submit. **YES.**"
    },
    {
      "type": "markdown",
      "id": "a4c9a623ba610693",
      "text": "# MS 2: Demo Ready (for 2023-12-07)\n\n- [x] Parse a textual weather report and output a pixie description object, via imported script from pixifier source, parser.decodedToParamObject(metarText);\n- [x] Take a pixie description and use it to compose an image. We have a compositor working on a static list of image paths, so the composition can proceed from a list of image resource paths to overlay, and then add rendered text. To avoid the entanglement of Node filesystem and canvas logic with the image resource path definitions, layerDefs.js provides a snapshot for the selfie pixie set.\n- [x] Demo. _Done 2023-12-07 at RC._"
    },
    {
      "type": "paragraph",
      "id": "f26d5765f9e1e07f",
      "text": "See [[Pixie Report Demo]] for the results of MS 2."
    },
    {
      "type": "markdown",
      "id": "3de3a5fe4ce0fd13",
      "text": "# MS 3: Post-demo tasks\n- [x] Move to an ES6 module loading style, using a local http server for CORS locality rules for script loading and weather report data loading. If you're on the dev machine, this is [http://localhost:8000/](http://localhost:8000/)\n- [ ] Take a textual report and create alt text for the pixie.\n- [ ] Compose to the canvas, generate a PNG, add the PNG as an IMG element.\n- [ ] Include alt text in the PNG img element's alt= attribute.\n- [ ] Any obvious cleanup or refactoring?\n- [ ] What is the deployment-ready milestone (create MS 4 tasks for prototype hosting). Consider cleanup. Consider architecture."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Pixie Report Tasks",
        "story": []
      },
      "date": 1706118634350
    },
    {
      "item": {
        "type": "factory",
        "id": "813f897f2f90ac04"
      },
      "id": "813f897f2f90ac04",
      "type": "add",
      "date": 1706118643314
    },
    {
      "type": "edit",
      "id": "813f897f2f90ac04",
      "item": {
        "type": "paragraph",
        "id": "813f897f2f90ac04",
        "text": "Tasks for [[Pixie Report]] project, see also the embedded tasks in Github, see [[Pixie Report Scratchpad]] for progress snippets."
      },
      "date": 1706118698895
    },
    {
      "id": "12ad98aa36f87bfa",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "12ad98aa36f87bfa",
        "text": "Summary above Features below"
      },
      "after": "813f897f2f90ac04",
      "attribution": {
        "page": "Memory Card Tasks"
      },
      "date": 1706118714733
    },
    {
      "id": "d042175bb4a2d42a",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "d042175bb4a2d42a",
        "text": "Feature Complete Needs"
      },
      "after": "12ad98aa36f87bfa",
      "attribution": {
        "page": "Memory Card Tasks"
      },
      "date": 1706118732484
    },
    {
      "id": "10d528fc12a8ce9a",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "10d528fc12a8ce9a",
        "text": "Feature Task On Deck"
      },
      "after": "d042175bb4a2d42a",
      "attribution": {
        "page": "Memory Card Tasks"
      },
      "date": 1706118756348
    },
    {
      "id": "13885673fa2e100e",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "13885673fa2e100e",
        "text": "To Do By Category",
        "alias": "d042175bb4a2d42a"
      },
      "after": "10d528fc12a8ce9a",
      "attribution": {
        "page": "Memory Card Tasks"
      },
      "date": 1706118766341
    },
    {
      "id": "fff638c2724a007f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "fff638c2724a007f",
        "text": "Features delivered:"
      },
      "after": "d042175bb4a2d42a",
      "attribution": {
        "page": "Memory Card Tasks"
      },
      "date": 1706118793643
    },
    {
      "type": "add",
      "id": "8493195d282689d8",
      "item": {
        "type": "paragraph",
        "id": "8493195d282689d8",
        "text": "Harvest any tasks in the Github task list [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/in-browser-composer.md tasks] as appropriate."
      },
      "after": "813f897f2f90ac04",
      "date": 1706118899830
    },
    {
      "type": "add",
      "id": "d79427cb16e54bbb",
      "item": {
        "type": "paragraph",
        "id": "d79427cb16e54bbb",
        "text": "Review and update [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/learnings.md learnings] as appropriate."
      },
      "after": "8493195d282689d8",
      "date": 1706118998500
    },
    {
      "id": "d79427cb16e54bbb",
      "type": "move",
      "order": [
        "813f897f2f90ac04",
        "d79427cb16e54bbb",
        "8493195d282689d8",
        "12ad98aa36f87bfa",
        "d042175bb4a2d42a",
        "fff638c2724a007f",
        "10d528fc12a8ce9a",
        "13885673fa2e100e"
      ],
      "date": 1706119001975
    },
    {
      "type": "edit",
      "id": "d79427cb16e54bbb",
      "item": {
        "type": "paragraph",
        "id": "d79427cb16e54bbb",
        "text": "Review and update [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/learnings.md learnings] as appropriate, possibly to [[Pixie Report Scratchpad]]."
      },
      "date": 1706119026389
    },
    {
      "type": "edit",
      "id": "d79427cb16e54bbb",
      "item": {
        "type": "paragraph",
        "id": "d79427cb16e54bbb",
        "text": "Review and update Github [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/learnings.md learnings] as appropriate, possibly to [[Pixie Report Scratchpad]]."
      },
      "date": 1706119058268
    },
    {
      "type": "edit",
      "id": "d79427cb16e54bbb",
      "item": {
        "type": "paragraph",
        "id": "d79427cb16e54bbb",
        "text": "Review and update Github [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/learnings.md learnings] as appropriate, possibly to [[Pixie Report Scratchpad]] along with progress notes."
      },
      "date": 1706119095938
    },
    {
      "type": "edit",
      "id": "813f897f2f90ac04",
      "item": {
        "type": "paragraph",
        "id": "813f897f2f90ac04",
        "text": "Tasks for [[Pixie Report]] project."
      },
      "date": 1706119110707
    },
    {
      "type": "edit",
      "id": "d79427cb16e54bbb",
      "item": {
        "type": "paragraph",
        "id": "d79427cb16e54bbb",
        "text": "Progress notes to [[Pixie Report Scratchpad]] along with any learnings similar to the Github [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/learnings.md learnings] page."
      },
      "date": 1706119187342
    },
    {
      "item": {
        "type": "factory",
        "id": "ef89e3713b8503c3"
      },
      "id": "ef89e3713b8503c3",
      "type": "add",
      "after": "13885673fa2e100e",
      "date": 1706119516349
    },
    {
      "type": "edit",
      "id": "ef89e3713b8503c3",
      "item": {
        "type": "markdown",
        "id": "ef89e3713b8503c3",
        "text": "MILESTONES\n\n# MS 1: Paths and reading images\n\n- [x] 0. Display a single PNG image resource in the page as an IMG resource.\n- [x] 1. Display a single PNG image resource in the in-browser canvas. See [MDN Canvas Tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images)\n- [x] 2. Composite two images having transparency on the upper layer, you can use a background and a pixie.\n- [x] 2a. Refactor to a tail recursive composition of an array of layer files.\n- [x] 3. Read a pixie description file or another JSON blob and log it to the Javascript console or set the innerHTML of an element.\n- [x] 4. Read a JSON resource and navigate to a sub value like a pixie text description. Echo like #3."
      },
      "date": 1706119851577
    },
    {
      "type": "add",
      "id": "7f9bb4e8e295b715",
      "item": {
        "type": "markdown",
        "id": "7f9bb4e8e295b715",
        "text": "MS 1A Excursion: Parsing request info using the DOM API.\n\n- [x] 5. Using the local web server, can we use the [purple.bikeshed.org](http://purple.bikeshed.org) approach via the [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) DOM API? Try a FORM and/or link submit. **YES.**\n\nMS 2: Demo Ready (for 2023-12-07)\n\n- [x] 6. Parse a textual weather report and output a pixie description object, via imported script from pixifier source, parser.decodedToParamObject(metarText);\n- [x] 7. Take a pixie description and use it to compose an image. We have a tailcall compositor working on a static list of image paths (2a above), so the composition can proceed from a list of image resource paths to overlay, and then add rendered text. To avoid the entanglement of Node filesystem and canvas logic with the image resource path definitions, layerDefs.js provides a snapshot for the selfie pixie set.\n- [x] 8. Demo. _Done 2023-12-07 at RC._ Consider cleanup. Consider architecture.\n\n\nMS 3: Post-demo tasks\n- [ ] 9. Take a textual report and create alt text for the pixie.\n- [ ] 10. Compose to the canvas and generate a PNG.\n- [ ] 11. Include alt text in the PNG img element's alt= attribute.\n- [ ] 12. What is the deployment ready milestone (create MS 4 tasks for prototype hosting)."
      },
      "after": "ef89e3713b8503c3",
      "date": 1706119854897
    },
    {
      "type": "edit",
      "id": "7f9bb4e8e295b715",
      "item": {
        "type": "markdown",
        "id": "7f9bb4e8e295b715",
        "text": "MS 1A Excursion: Parsing request info using the DOM API.\n\n- [x] 5. Using the local web server, can we use the [purple.bikeshed.org](http://purple.bikeshed.org) approach via the [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) DOM API? Try a FORM and/or link submit. **YES.**"
      },
      "date": 1706119871369
    },
    {
      "type": "add",
      "id": "a4c9a623ba610693",
      "item": {
        "type": "markdown",
        "id": "a4c9a623ba610693",
        "text": "MS 2: Demo Ready (for 2023-12-07)\n\n- [x] 6. Parse a textual weather report and output a pixie description object, via imported script from pixifier source, parser.decodedToParamObject(metarText);\n- [x] 7. Take a pixie description and use it to compose an image. We have a tailcall compositor working on a static list of image paths (2a above), so the composition can proceed from a list of image resource paths to overlay, and then add rendered text. To avoid the entanglement of Node filesystem and canvas logic with the image resource path definitions, layerDefs.js provides a snapshot for the selfie pixie set.\n- [x] 8. Demo. _Done 2023-12-07 at RC._ Consider cleanup. Consider architecture.\n\n\nMS 3: Post-demo tasks\n- [ ] 9. Take a textual report and create alt text for the pixie.\n- [ ] 10. Compose to the canvas and generate a PNG.\n- [ ] 11. Include alt text in the PNG img element's alt= attribute.\n- [ ] 12. What is the deployment ready milestone (create MS 4 tasks for prototype hosting)."
      },
      "after": "7f9bb4e8e295b715",
      "date": 1706119876826
    },
    {
      "type": "edit",
      "id": "a4c9a623ba610693",
      "item": {
        "type": "markdown",
        "id": "a4c9a623ba610693",
        "text": "MS 2: Demo Ready (for 2023-12-07)\n\n- [x] 6. Parse a textual weather report and output a pixie description object, via imported script from pixifier source, parser.decodedToParamObject(metarText);\n- [x] 7. Take a pixie description and use it to compose an image. We have a tailcall compositor working on a static list of image paths (2a above), so the composition can proceed from a list of image resource paths to overlay, and then add rendered text. To avoid the entanglement of Node filesystem and canvas logic with the image resource path definitions, layerDefs.js provides a snapshot for the selfie pixie set.\n- [x] 8. Demo. _Done 2023-12-07 at RC._"
      },
      "date": 1706119907897
    },
    {
      "type": "add",
      "id": "3de3a5fe4ce0fd13",
      "item": {
        "type": "markdown",
        "id": "3de3a5fe4ce0fd13",
        "text": "MS 3: Post-demo tasks\n- [ ] 9. Take a textual report and create alt text for the pixie.\n- [ ] 10. Compose to the canvas and generate a PNG.\n- [ ] 11. Include alt text in the PNG img element's alt= attribute.\n- [ ] 12. What is the deployment ready milestone (create MS 4 tasks for prototype hosting). Consider cleanup. Consider architecture."
      },
      "after": "a4c9a623ba610693",
      "date": 1706119941746
    },
    {
      "type": "edit",
      "id": "ef89e3713b8503c3",
      "item": {
        "type": "markdown",
        "id": "ef89e3713b8503c3",
        "text": "MILESTONES\n\n# MS 1: Paths and reading images\n\n- [x] Display a single PNG image resource in the page as an IMG resource.\n- [x] Display a single PNG image resource in the in-browser canvas. See [MDN Canvas Tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images)\n- [x] Composite two images having transparency on the upper layer, you can use a background and a pixie.\n- [x] Refactor to a tail recursive composition of an array of layer files. (_discarded for Promise.then()_).\n- [x] Read a pixie description file or another JSON blob and log it to the Javascript console or set the innerHTML of an element.\n- [x] Read a JSON resource and navigate to a sub value like a pixie text description. Echo like pixie description file."
      },
      "date": 1706120042172
    },
    {
      "type": "edit",
      "id": "7f9bb4e8e295b715",
      "item": {
        "type": "markdown",
        "id": "7f9bb4e8e295b715",
        "text": "MS 1A Excursion: Parsing request info using the DOM API.\n\n- [x] Using the local web server, can we use the [purple.bikeshed.org](http://purple.bikeshed.org) approach via the [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) DOM API? Try a FORM and/or link submit. **YES.**"
      },
      "date": 1706120053267
    },
    {
      "type": "edit",
      "id": "7f9bb4e8e295b715",
      "item": {
        "type": "markdown",
        "id": "7f9bb4e8e295b715",
        "text": "## MS 1A Excursion: Parsing request info using the DOM API.\n\n- [x] Using the local web server, can we use the [purple.bikeshed.org](http://purple.bikeshed.org) approach via the [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) DOM API? Try a FORM and/or link submit. **YES.**"
      },
      "date": 1706120067419
    },
    {
      "type": "edit",
      "id": "a4c9a623ba610693",
      "item": {
        "type": "markdown",
        "id": "a4c9a623ba610693",
        "text": "# MS 2: Demo Ready (for 2023-12-07)\n\n- [x] 6. Parse a textual weather report and output a pixie description object, via imported script from pixifier source, parser.decodedToParamObject(metarText);\n- [x] 7. Take a pixie description and use it to compose an image. We have a tailcall compositor working on a static list of image paths (2a above), so the composition can proceed from a list of image resource paths to overlay, and then add rendered text. To avoid the entanglement of Node filesystem and canvas logic with the image resource path definitions, layerDefs.js provides a snapshot for the selfie pixie set.\n- [x] 8. Demo. _Done 2023-12-07 at RC._"
      },
      "date": 1706120087379
    },
    {
      "type": "edit",
      "id": "7f9bb4e8e295b715",
      "item": {
        "type": "markdown",
        "id": "7f9bb4e8e295b715",
        "text": "## MS 1A: Excursion, parse request info using the DOM API.\n\n- [x] Using the local web server, can we use the [purple.bikeshed.org](http://purple.bikeshed.org) approach via the [Location](https://developer.mozilla.org/en-US/docs/Web/API/Location) DOM API? Try a FORM and/or link submit. **YES.**"
      },
      "date": 1706120102348
    },
    {
      "type": "edit",
      "id": "a4c9a623ba610693",
      "item": {
        "type": "markdown",
        "id": "a4c9a623ba610693",
        "text": "# MS 2: Demo Ready (for 2023-12-07)\n\n- [x] Parse a textual weather report and output a pixie description object, via imported script from pixifier source, parser.decodedToParamObject(metarText);\n- [x] Take a pixie description and use it to compose an image. We have a compositor working on a static list of image paths, so the composition can proceed from a list of image resource paths to overlay, and then add rendered text. To avoid the entanglement of Node filesystem and canvas logic with the image resource path definitions, layerDefs.js provides a snapshot for the selfie pixie set.\n- [x] Demo. _Done 2023-12-07 at RC._"
      },
      "date": 1706120169464
    },
    {
      "type": "edit",
      "id": "3de3a5fe4ce0fd13",
      "item": {
        "type": "markdown",
        "id": "3de3a5fe4ce0fd13",
        "text": "MS 3: Post-demo tasks\n- [x] 9. Take a textual report and create alt text for the pixie.\n- [ ] 10. Compose to the canvas and generate a PNG.\n- [ ] 11. Include alt text in the PNG img element's alt= attribute.\n- [ ] 12. What is the deployment ready milestone (create MS 4 tasks for prototype hosting). Consider cleanup. Consider architecture."
      },
      "date": 1706120192371
    },
    {
      "type": "edit",
      "id": "3de3a5fe4ce0fd13",
      "item": {
        "type": "markdown",
        "id": "3de3a5fe4ce0fd13",
        "text": "MS 3: Post-demo tasks\n- [ ] 9. Take a textual report and create alt text for the pixie.\n- [ ] 10. Compose to the canvas and generate a PNG.\n- [ ] 11. Include alt text in the PNG img element's alt= attribute.\n- [ ] 12. What is the deployment ready milestone (create MS 4 tasks for prototype hosting). Consider cleanup. Consider architecture."
      },
      "date": 1706120192571
    },
    {
      "type": "edit",
      "id": "3de3a5fe4ce0fd13",
      "item": {
        "type": "markdown",
        "id": "3de3a5fe4ce0fd13",
        "text": "# MS 3: Post-demo tasks\n- [x] Move to an ES6 module loading style, using a local http server for CORS locality rules for script loading and weather report data loading.\n- [ ] Take a textual report and create alt text for the pixie.\n- [ ] Compose to the canvas and generate a PNG.\n- [ ] Include alt text in the PNG img element's alt= attribute.\n- [ ] Any obvious cleanup or refactoring?\n- [ ] What is the deployment-ready milestone (create MS 4 tasks for prototype hosting). Consider cleanup. Consider architecture."
      },
      "date": 1706120315261
    },
    {
      "type": "edit",
      "id": "3de3a5fe4ce0fd13",
      "item": {
        "type": "markdown",
        "id": "3de3a5fe4ce0fd13",
        "text": "# MS 3: Post-demo tasks\n- [x] Move to an ES6 module loading style, using a local http server for CORS locality rules for script loading and weather report data loading. If you're on the dev machine, this is [http://localhost:8000/](http://localhost:8000/)\n- [ ] Take a textual report and create alt text for the pixie.\n- [ ] Compose to the canvas and generate a PNG.\n- [ ] Include alt text in the PNG img element's alt= attribute.\n- [ ] Any obvious cleanup or refactoring?\n- [ ] What is the deployment-ready milestone (create MS 4 tasks for prototype hosting). Consider cleanup. Consider architecture."
      },
      "date": 1706120609856
    },
    {
      "type": "edit",
      "id": "d79427cb16e54bbb",
      "item": {
        "type": "paragraph",
        "id": "d79427cb16e54bbb",
        "text": "Progress notes to [[Pixie Report Scratchpad]] along with any learnings similar to the Github [https://github.com/jmeowmeow/PixieReport/blob/in-browser-composer/tasks/learnings.md learnings] page. Pics to [[Pixie Report Snapshots]]."
      },
      "date": 1706208470472
    },
    {
      "type": "add",
      "id": "1ebecca66f36e5c9",
      "item": {
        "type": "markdown",
        "id": "1ebecca66f36e5c9",
        "text": "See "
      },
      "after": "a4c9a623ba610693",
      "date": 1706208628363
    },
    {
      "item": {
        "type": "factory",
        "id": "f26d5765f9e1e07f"
      },
      "id": "f26d5765f9e1e07f",
      "type": "add",
      "after": "3de3a5fe4ce0fd13",
      "date": 1706208628497
    },
    {
      "type": "edit",
      "id": "f26d5765f9e1e07f",
      "item": {
        "type": "paragraph",
        "id": "f26d5765f9e1e07f",
        "text": "See [[Pixie Report Demo]] for the results of MS 2."
      },
      "date": 1706208645303
    },
    {
      "id": "f26d5765f9e1e07f",
      "type": "move",
      "order": [
        "813f897f2f90ac04",
        "d79427cb16e54bbb",
        "8493195d282689d8",
        "12ad98aa36f87bfa",
        "d042175bb4a2d42a",
        "fff638c2724a007f",
        "10d528fc12a8ce9a",
        "13885673fa2e100e",
        "ef89e3713b8503c3",
        "7f9bb4e8e295b715",
        "a4c9a623ba610693",
        "1ebecca66f36e5c9",
        "f26d5765f9e1e07f",
        "3de3a5fe4ce0fd13"
      ],
      "date": 1706208652757
    },
    {
      "type": "remove",
      "id": "1ebecca66f36e5c9",
      "date": 1706208658353
    },
    {
      "type": "edit",
      "id": "3de3a5fe4ce0fd13",
      "item": {
        "type": "markdown",
        "id": "3de3a5fe4ce0fd13",
        "text": "# MS 3: Post-demo tasks\n- [x] Move to an ES6 module loading style, using a local http server for CORS locality rules for script loading and weather report data loading. If you're on the dev machine, this is [http://localhost:8000/](http://localhost:8000/)\n- [ ] Take a textual report and create alt text for the pixie.\n- [ ] Compose to the canvas, generate a PNG, add the PNG as an IMG element.\n- [ ] Include alt text in the PNG img element's alt= attribute.\n- [ ] Any obvious cleanup or refactoring?\n- [ ] What is the deployment-ready milestone (create MS 4 tasks for prototype hosting). Consider cleanup. Consider architecture."
      },
      "date": 1710015766743
    },
    {
      "type": "fork",
      "site": "recurse.pixiereport.com",
      "date": 1710052340296
    }
  ]
}