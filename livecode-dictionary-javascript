{
  "title": "Livecode Dictionary Javascript",
  "story": [
    {
      "type": "markdown",
      "id": "ace3662862612d03",
      "text": "What you are seeing is an anonymous function, where dataGet() will return an array or array-like object: \n\n- dictionary_functions.js - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js github]\n- function dataGet() - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js#L31 github]\n- Discussion - [https://forums.livecode.com/viewtopic.php?t=31695 forums.livecode.com]\n"
    },
    {
      "type": "markdown",
      "id": "81591ed695b3e1cf",
      "text": "Here is the core function:"
    },
    {
      "type": "code",
      "id": "41f75edcf5ff07a3",
      "text": "function entryIdToIndex(pId){\n var tIndex = 0;\n\t\n $.each(dataGet(), function(index, value) {\n  if(value.id == pId){\n   tIndex = index;\n   return false;\n   }\t\t\t\n  });\n  return tIndex;\n}"
    },
    {
      "type": "markdown",
      "id": "ddaf8885a20c921c",
      "text": ">  $.each iterates over every element of the array\n\n"
    },
    {
      "type": "markdown",
      "id": "b83eb9a319c2f71a",
      "text": "> function(index, value) creates the function that will be called on each element of the list\n"
    },
    {
      "type": "markdown",
      "id": "8007256b85fb7704",
      "text": "> The parameters to the function are the index and value for each element of the list. \n"
    },
    {
      "type": "markdown",
      "id": "24cbde8c1f44c178",
      "text": "> The code between the { and } is the body of that function. Returning false will break out of the loop. Returning any other value will continue to the next iteration of the loop.\n"
    },
    {
      "type": "markdown",
      "id": "e30d9929b24d4a3c",
      "text": "# Some Javascript basics\nThe logical \"!=\" ( = LCS is not), \"&&\" ( = LCS is not) and \"||\" ( = LCS or).\n\nFor example getData() returns an array.\n\"each\" is an array element and\nindex( = LCS key) and value ( = LCS element) are parameter names.\nThe function is applied to each array element.\n\nIndexing is zero based.\n\nThe last two functions create a html string:\n+ means string concatenation (LCS \"&\"),\nleft += right means append left to right (put left after right),\nsingle quotes are for use within quoted strings and can also surround a string.\nHere lists are used. Then \"each\" is a list element which has a numeric index and a value.\nSimply think of items of a string that you split by comma into an numeric array."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Livecode Dictionary Javascript",
        "story": []
      },
      "date": 1627471882244
    },
    {
      "id": "a0029879d992d00f",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "a0029879d992d00f",
        "text": "- dictionary_functions.js - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js github]\n"
      },
      "date": 1627471886094
    },
    {
      "id": "ace3662862612d03",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ace3662862612d03",
        "text": "What you are seeing is an anonymous function. \n"
      },
      "after": "a0029879d992d00f",
      "date": 1627471889383
    },
    {
      "item": {
        "type": "factory",
        "id": "41f75edcf5ff07a3"
      },
      "id": "41f75edcf5ff07a3",
      "type": "add",
      "after": "ace3662862612d03",
      "date": 1627471891259
    },
    {
      "id": "41f75edcf5ff07a3",
      "type": "move",
      "order": [
        "41f75edcf5ff07a3",
        "a0029879d992d00f",
        "ace3662862612d03"
      ],
      "date": 1627471892914
    },
    {
      "type": "edit",
      "id": "41f75edcf5ff07a3",
      "item": {
        "type": "code",
        "id": "41f75edcf5ff07a3",
        "text": "function entryIdToIndex(pId){\n var tIndex = 0;\n\t\n $.each(dataGet(), function(index, value) {\n  if(value.id == pId){\n   tIndex = index;\n   return false;\n   }\t\t\t\n  });\n  return tIndex;\n}"
      },
      "date": 1627471975848
    },
    {
      "id": "ace3662862612d03",
      "type": "move",
      "order": [
        "ace3662862612d03",
        "41f75edcf5ff07a3",
        "a0029879d992d00f"
      ],
      "date": 1627471981104
    },
    {
      "id": "58d5711395808d8b",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "58d5711395808d8b",
        "text": "dataGet() will return an array or array-like object, \n"
      },
      "after": "ace3662862612d03",
      "date": 1627471989071
    },
    {
      "type": "remove",
      "id": "58d5711395808d8b",
      "date": 1627471991606
    },
    {
      "type": "edit",
      "id": "ace3662862612d03",
      "item": {
        "type": "markdown",
        "id": "ace3662862612d03",
        "text": "What you are seeing is an anonymous function, where dataGet() will return an array or array-like object, \n"
      },
      "date": 1627472000866
    },
    {
      "id": "ddaf8885a20c921c",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ddaf8885a20c921c",
        "text": "$.each will iterate over every element of the array, \n"
      },
      "after": "a0029879d992d00f",
      "date": 1627472006745
    },
    {
      "id": "379c5d5a4246a52b",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "379c5d5a4246a52b",
        "text": "function(index, value) creates the function that will be called on each element of the list. \n"
      },
      "after": "ddaf8885a20c921c",
      "date": 1627472010589
    },
    {
      "type": "edit",
      "id": "ddaf8885a20c921c",
      "item": {
        "type": "markdown",
        "id": "ddaf8885a20c921c",
        "text": "-  $.each iterates over every element of the array"
      },
      "date": 1627472033343
    },
    {
      "type": "remove",
      "id": "379c5d5a4246a52b",
      "date": 1627472036168
    },
    {
      "type": "edit",
      "id": "ddaf8885a20c921c",
      "item": {
        "type": "markdown",
        "id": "ddaf8885a20c921c",
        "text": "-  $.each iterates over every element of the array\n- function(index, value) creates the function that will be called on each element of the list\n"
      },
      "date": 1627472045862
    },
    {
      "type": "edit",
      "id": "ddaf8885a20c921c",
      "item": {
        "type": "markdown",
        "id": "ddaf8885a20c921c",
        "text": ">  $.each iterates over every element of the array\n\n"
      },
      "date": 1627472058997
    },
    {
      "type": "add",
      "id": "b83eb9a319c2f71a",
      "item": {
        "type": "markdown",
        "id": "b83eb9a319c2f71a",
        "text": "> function(index, value) creates the function that will be called on each element of the list\n"
      },
      "after": "ddaf8885a20c921c",
      "date": 1627472060402
    },
    {
      "id": "a0029879d992d00f",
      "type": "move",
      "order": [
        "ace3662862612d03",
        "a0029879d992d00f",
        "41f75edcf5ff07a3",
        "ddaf8885a20c921c",
        "b83eb9a319c2f71a"
      ],
      "date": 1627472068358
    },
    {
      "type": "remove",
      "id": "a0029879d992d00f",
      "date": 1627472070806
    },
    {
      "type": "edit",
      "id": "ace3662862612d03",
      "item": {
        "type": "markdown",
        "id": "ace3662862612d03",
        "text": "What you are seeing is an anonymous function, where dataGet() will return an array or array-like object, \n- dictionary_functions.js - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js github]\n"
      },
      "date": 1627472072561
    },
    {
      "id": "8007256b85fb7704",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "8007256b85fb7704",
        "text": "The parameters to the function are the index and value for each element of the list. \n"
      },
      "after": "b83eb9a319c2f71a",
      "date": 1627472080144
    },
    {
      "type": "edit",
      "id": "8007256b85fb7704",
      "item": {
        "type": "markdown",
        "id": "8007256b85fb7704",
        "text": "> The parameters to the function are the index and value for each element of the list. \n"
      },
      "date": 1627472083143
    },
    {
      "id": "24cbde8c1f44c178",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "24cbde8c1f44c178",
        "text": "The code between the { and } is the body of that function. Returning false will break out of the loop. Returning any other value will continue to the next iteration of the loop.\n"
      },
      "after": "8007256b85fb7704",
      "date": 1627472086767
    },
    {
      "type": "edit",
      "id": "24cbde8c1f44c178",
      "item": {
        "type": "markdown",
        "id": "24cbde8c1f44c178",
        "text": "> The code between the { and } is the body of that function. Returning false will break out of the loop. Returning any other value will continue to the next iteration of the loop.\n"
      },
      "date": 1627472089523
    },
    {
      "id": "620a9e01ac38d302",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "620a9e01ac38d302",
        "text": " - function dataGet() - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js#L31 github]"
      },
      "after": "ace3662862612d03",
      "date": 1627472101923
    },
    {
      "type": "remove",
      "id": "620a9e01ac38d302",
      "date": 1627472105696
    },
    {
      "type": "edit",
      "id": "ace3662862612d03",
      "item": {
        "type": "markdown",
        "id": "ace3662862612d03",
        "text": "What you are seeing is an anonymous function, where dataGet() will return an array or array-like object, \n- dictionary_functions.js - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js github]\n- function dataGet() - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js#L31 github]"
      },
      "date": 1627472108407
    },
    {
      "id": "e30d9929b24d4a3c",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "e30d9929b24d4a3c",
        "text": "The logical \"!=\" ( = LCS is not), \"&&\" ( = LCS is not) and \"||\" ( = LCS or).\n\nFor example getData() returns an array.\n\"each\" is an array element and\nindex( = LCS key) and value ( = LCS element) are parameter names.\nThe function is applied to each array element.\n\nIndexing is zero based.\n\nThe last two functions create a html string:\n+ means string concatenation (LCS \"&\"),\nleft += right means append left to right (put left after right),\nsingle quotes are for use within quoted strings and can also surround a string.\nHere lists are used. Then \"each\" is a list element which has a numeric index and a value.\nSimply think of items of a string that you split by comma into an numeric array."
      },
      "after": "24cbde8c1f44c178",
      "date": 1627472115931
    },
    {
      "type": "edit",
      "id": "e30d9929b24d4a3c",
      "item": {
        "type": "markdown",
        "id": "e30d9929b24d4a3c",
        "text": "# Sommee Javascript basics\nThe logical \"!=\" ( = LCS is not), \"&&\" ( = LCS is not) and \"||\" ( = LCS or).\n\nFor example getData() returns an array.\n\"each\" is an array element and\nindex( = LCS key) and value ( = LCS element) are parameter names.\nThe function is applied to each array element.\n\nIndexing is zero based.\n\nThe last two functions create a html string:\n+ means string concatenation (LCS \"&\"),\nleft += right means append left to right (put left after right),\nsingle quotes are for use within quoted strings and can also surround a string.\nHere lists are used. Then \"each\" is a list element which has a numeric index and a value.\nSimply think of items of a string that you split by comma into an numeric array."
      },
      "date": 1627472136529
    },
    {
      "type": "edit",
      "id": "e30d9929b24d4a3c",
      "item": {
        "type": "markdown",
        "id": "e30d9929b24d4a3c",
        "text": "# Some Javascript basics\nThe logical \"!=\" ( = LCS is not), \"&&\" ( = LCS is not) and \"||\" ( = LCS or).\n\nFor example getData() returns an array.\n\"each\" is an array element and\nindex( = LCS key) and value ( = LCS element) are parameter names.\nThe function is applied to each array element.\n\nIndexing is zero based.\n\nThe last two functions create a html string:\n+ means string concatenation (LCS \"&\"),\nleft += right means append left to right (put left after right),\nsingle quotes are for use within quoted strings and can also surround a string.\nHere lists are used. Then \"each\" is a list element which has a numeric index and a value.\nSimply think of items of a string that you split by comma into an numeric array."
      },
      "date": 1627472142365
    },
    {
      "type": "edit",
      "id": "ace3662862612d03",
      "item": {
        "type": "markdown",
        "id": "ace3662862612d03",
        "text": "What you are seeing is an anonymous function, where dataGet() will return an array or array-like object: \n\n- dictionary_functions.js - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js github]\n- function dataGet() - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js#L31 github]\n"
      },
      "date": 1627472170707
    },
    {
      "type": "add",
      "id": "81591ed695b3e1cf",
      "item": {
        "type": "markdown",
        "id": "81591ed695b3e1cf",
        "text": "Here is the core function:"
      },
      "after": "ace3662862612d03",
      "date": 1627472176886
    },
    {
      "type": "edit",
      "id": "ace3662862612d03",
      "item": {
        "type": "markdown",
        "id": "ace3662862612d03",
        "text": "What you are seeing is an anonymous function, where dataGet() will return an array or array-like object: \n\n- dictionary_functions.js - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js github]\n- function dataGet() - [https://github.com/livecode/livecode-ide/blob/develop/Documentation/html_viewer/js/dictionary_functions.js#L31 github]\n- Discussion - [https://forums.livecode.com/viewtopic.php?t=31695 forums.livecode.com]\n"
      },
      "date": 1627472200170
    },
    {
      "type": "fork",
      "site": "livecode.world",
      "date": 1627506770228
    }
  ]
}