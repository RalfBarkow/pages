{
  "title": "Handling Exceptions",
  "story": [
    {
      "type": "markdown",
      "id": "f7b8215c41f9978e",
      "text": "All applications have to deal with exceptional situations. \n\nSee [[Exceptional Value]]. [[Exception]]"
    },
    {
      "type": "markdown",
      "id": "370e71bcdca8a1ff",
      "text": "Arithmetic errors may occur (such as division by zero), unexpected situations may arise (file not found), or resources may be exhausted (network down, disk full, etc.). The old-fashioned solution is to have operations that fail return a special error code; this means that client code must check the return value of each operation, and take special action to handle errors. This leads to brittle code.\n"
    },
    {
      "type": "markdown",
      "id": "a986817ccac0f61e",
      "text": "[[Pharo]]’s exception handling follows the ANSI standard, with some embellishments; we present it in this chapter from a user perspective. [https://web.archive.org/web/20120722130836/http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf pdf] (wayback)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Handling Exceptions",
        "story": []
      },
      "date": 1629185782476
    },
    {
      "item": {
        "type": "factory",
        "id": "f7b8215c41f9978e"
      },
      "id": "f7b8215c41f9978e",
      "type": "add",
      "date": 1629185784271
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "[http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf page] –"
      },
      "date": 1629185793437
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "[http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf page] – All applications have to deal with exceptional situations. Arithmetic errors may occur (such as division by zero), unexpected situations may arise (file not found), or resources may be exhausted (network down, disk fulletc.). The old-fashioned solution is to have operations that fail return a spe-\ncial error code; this means that client code must check the return value of each\noperation, and take special action to handle errors. This leads to brittle code.\nWith the help of a series of examples, we shall explore all of these possibilities, and take a closer look into the internal mechanics of exceptions and\nexception handlers."
      },
      "date": 1629185840695
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "[http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf page] – All applications have to deal with exceptional situations. Arithmetic errors may occur (such as division by zero), unexpected situations may arise (file not found), or resources may be exhausted (network down, disk full, etc.). The old-fashioned solution is to have operations that fail return a special error code; this means that client code must check the return value of each operation, and take special action to handle errors. This leads to brittle code.\n\nWith the help of a series of examples, we shall explore all of these possibilities, and take a closer look into the internal mechanics of exceptions and\nexception handlers."
      },
      "date": 1629185865551
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "[http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf page] – All applications have to deal with exceptional situations. Arithmetic errors may occur (such as division by zero), unexpected situations may arise (file not found), or resources may be exhausted (network down, disk full, etc.). The old-fashioned solution is to have operations that fail return a special error code; this means that client code must check the return value of each operation, and take special action to handle errors. This leads to brittle code.\n\nWith the help of a series of examples, we shall explore all of these possibilities, and take a closer look into the internal mechanics of exceptions and exception handlers."
      },
      "date": 1629185893023
    },
    {
      "item": {
        "type": "factory",
        "id": "a986817ccac0f61e"
      },
      "id": "a986817ccac0f61e",
      "type": "add",
      "after": "f7b8215c41f9978e",
      "date": 1629185918640
    },
    {
      "type": "edit",
      "id": "a986817ccac0f61e",
      "item": {
        "type": "markdown",
        "id": "a986817ccac0f61e",
        "text": "Pharo’s exception handling follows the ANSI standard, with some embellishments; we present it in this chapter from a user perspective."
      },
      "date": 1629185931847
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "[http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf page] – All applications have to deal with exceptional situations. Arithmetic errors may occur (such as division by zero), unexpected situations may arise (file not found), or resources may be exhausted (network down, disk full, etc.). The old-fashioned solution is to have operations that fail return a special error code; this means that client code must check the return value of each operation, and take special action to handle errors. This leads to brittle code.\n\nWith the help of a series of examples, we shall explore all of these possibilities, and take a closer look into the internal mechanics of exceptions and [[exception]] handlers."
      },
      "date": 1644054048271
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "[http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf page] – All applications have to deal with exceptional situations. [https://web.archive.org/web/20120722130836/http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf pdf] (wayback)\n"
      },
      "date": 1651572814244
    },
    {
      "type": "add",
      "id": "370e71bcdca8a1ff",
      "item": {
        "type": "markdown",
        "id": "370e71bcdca8a1ff",
        "text": "Arithmetic errors may occur (such as division by zero), unexpected situations may arise (file not found), or resources may be exhausted (network down, disk full, etc.). The old-fashioned solution is to have operations that fail return a special error code; this means that client code must check the return value of each operation, and take special action to handle errors. This leads to brittle code.\n\nWith the help of a series of examples, we shall explore all of these possibilities, and take a closer look into the internal mechanics of exceptions and [[exception]] handlers."
      },
      "after": "f7b8215c41f9978e",
      "date": 1651572816507
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "All applications have to deal with exceptional situations. [http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf page] – [https://web.archive.org/web/20120722130836/http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf pdf] (wayback)\n"
      },
      "date": 1651572828983
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "All applications have to deal with exceptional situations. [https://web.archive.org/web/20120722130836/http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf pdf] (wayback)\n"
      },
      "date": 1651572926836
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "All applications have to deal with exceptional situations. \n"
      },
      "date": 1651572976773
    },
    {
      "type": "edit",
      "id": "a986817ccac0f61e",
      "item": {
        "type": "markdown",
        "id": "a986817ccac0f61e",
        "text": "Pharo’s exception handling follows the ANSI standard, with some embellishments; we present it in this chapter from a user perspective. [https://web.archive.org/web/20120722130836/http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf pdf] (wayback)"
      },
      "date": 1651572979405
    },
    {
      "type": "edit",
      "id": "a986817ccac0f61e",
      "item": {
        "type": "markdown",
        "id": "a986817ccac0f61e",
        "text": "[[Pharo]]’s exception handling follows the ANSI standard, with some embellishments; we present it in this chapter from a user perspective. [https://web.archive.org/web/20120722130836/http://pharobooks.gforge.inria.fr/PharoByExampleTwo-Eng/latest/Exceptions.pdf pdf] (wayback)"
      },
      "date": 1651572985221
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "All applications have to deal with exceptional situations. \n\nSee [Exceptional Value]]."
      },
      "date": 1651573011090
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "All applications have to deal with exceptional situations. \n\nSee [[Exceptional Value]]."
      },
      "date": 1651573018052
    },
    {
      "type": "edit",
      "id": "f7b8215c41f9978e",
      "item": {
        "type": "markdown",
        "id": "f7b8215c41f9978e",
        "text": "All applications have to deal with exceptional situations. \n\nSee [[Exceptional Value]]. [[Exception]]"
      },
      "date": 1651573119923
    },
    {
      "type": "edit",
      "id": "370e71bcdca8a1ff",
      "item": {
        "type": "markdown",
        "id": "370e71bcdca8a1ff",
        "text": "Arithmetic errors may occur (such as division by zero), unexpected situations may arise (file not found), or resources may be exhausted (network down, disk full, etc.). The old-fashioned solution is to have operations that fail return a special error code; this means that client code must check the return value of each operation, and take special action to handle errors. This leads to brittle code.\n"
      },
      "date": 1651573126554
    },
    {
      "type": "add",
      "id": "ebcfe73728565ad7",
      "item": {
        "type": "markdown",
        "id": "ebcfe73728565ad7",
        "text": "\nWith the help of a series of examples, we shall explore all of these possibilities, and take a closer look into the internal mechanics of exceptions and [[exception]] handlers."
      },
      "after": "370e71bcdca8a1ff",
      "date": 1651573127839
    },
    {
      "type": "remove",
      "id": "ebcfe73728565ad7",
      "date": 1651573132663
    }
  ]
}