{
  "title": "2023-10-15",
  "story": [
    {
      "type": "paragraph",
      "id": "4f977499e31e2129",
      "text": "⇒ [[BaselineOfRalfsDynabook]], fuelPreLoad ⇐ [[Transcript Subject Not Found]]"
    },
    {
      "type": "paragraph",
      "id": "1d1e202a2e3b82a8",
      "text": "a LlAuthoredWork an UUID"
    },
    {
      "type": "paragraph",
      "id": "503ac00d803850ed",
      "text": "It seems like your properties dictionaries were wiped out. Do any of the properties of these affected objects have meaningful values, i.e. non-nil and non-empty?"
    },
    {
      "type": "paragraph",
      "id": "5810cf84a355fd5c",
      "text": "Error during Lepiter reload: key OlObjectPageType not found in IdentityDictionary. Do a manual reload to reproduce the error."
    },
    {
      "type": "paragraph",
      "id": "136d620981984505",
      "text": "We intend to install the latest Fuel version."
    },
    {
      "type": "paragraph",
      "id": "677012a3ec1f758b",
      "text": "pharo-local/iceberg:\ncredentials.fuel\nissue"
    },
    {
      "type": "paragraph",
      "id": "719ed98071bea1b0",
      "text": "⇒ [[Testing in Pharo]]"
    },
    {
      "type": "paragraph",
      "id": "62e9afaf070b1c7f",
      "text": "fuel-out"
    },
    {
      "type": "paragraph",
      "id": "9789752d37c613fb",
      "text": "Cannot fuel-out a stack trace when \"Welcome to Pharo 11\" window is open [https://github.com/pharo-project/pharo/issues/13788 github]"
    },
    {
      "type": "markdown",
      "id": "6cb36c066938b9e1",
      "text": "In Pharo Smalltalk, using Fuel 5.1.0, you can serialize and deserialize a single object using the Fuel serializer and the materializer."
    },
    {
      "type": "code",
      "id": "bf13e2b0230a3e40",
      "text": " FLSerializer new\n        filePath: aFuel fullName;\n        object: anAuthoredWork;\n        serialize."
    },
    {
      "type": "code",
      "id": "823156e717425409",
      "text": "FLMaterializer materializeFromFileNamed: '/Users/rgb/workspace/fuel/anAuthoredWork.fuel'"
    },
    {
      "type": "markdown",
      "id": "c44387db0a83d2ce",
      "text": "Note that the library of 59 copies of 59 works is also materialized. [https://cdn.discordapp.com/attachments/869566842807652453/1163199308452085790/Bildschirmfoto_2023-10-15_um_21.38.27.png?ex=653eb4c6&is=652c3fc6&hm=0a24590ed1e4ac985fdf6eab21918a66c34b1cf9de8d5d8ea2649e0fc941c0b8& png]"
    },
    {
      "type": "pagefold",
      "id": "4a67b60e6117c4c0",
      "text": "~"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "square-brackets",
      "title": "Square-Brackets",
      "text": "Algebraic [[Operation]]s condense into a few [[Patterns]]"
    },
    {
      "type": "paragraph",
      "id": "26c9d04087a29b05",
      "text": "Notice the use of [[Square-Brackets]] in [[Emacs]] org-mode"
    },
    {
      "type": "paragraph",
      "id": "d19efe943defb15b",
      "text": "How to insert square brackets within org-mode in Emacs [https://stackoverflow.com/questions/20592666/how-to-insert-square-brackets-within-org-mode-in-emacs page]"
    },
    {
      "type": "paragraph",
      "id": "c90302d198d95565",
      "text": "⇒[[Hammock Time]]"
    },
    {
      "type": "paragraph",
      "id": "3506c60310a6694e",
      "text": "Walking though the [[Elm]] woods [https://orasund.gitbook.io/elm-cookbook/frameworks-1/elm-parser page]"
    },
    {
      "type": "paragraph",
      "id": "073e4f67b525ee7e",
      "text": "⇒ [[Spacemacs]] install and configuration for Closure development"
    },
    {
      "type": "video",
      "id": "6e0a3c083772cf9a",
      "text": "YOUTUBE rZNYLGw1qFk\nSpacemacs quick install - the fast way to create an excellent Clojure development environment "
    },
    {
      "type": "paragraph",
      "id": "507f6abe85105568",
      "text": "Spacemacs is a community-driven [[Emacs]] distribution providing all the packages and features that you get from Emacs along with the very efficient vim style editing modes before installing space max you'll need to have good new Emacs installed and the latest version is Emacs 26.3 new versions of Emacs usually work well or there occasionally you may find a few interesting effects a git client is highly recommended either you can also download it via a zip file this guide is going to use the git approach and we're going to use the install from here before cloning Emacs you should make sure that there's no existing Emacs de directory we're going to use the develop branch as it contains all the latest features and bug fixes so we'll just make a quick change to the git clone command we're going to check out the develop branch as we clone the repository if you want to simplify the rest of the install and trust my recommendations and simply clone my space max configuration this place is a complete space max configuration into a dot space max-d folder and this will be used instead of a dot space max configuration file star Emacs from your operating system and take a quick break while the base max downloads all the packages it requires when the installation is done you'll see the space max home buffer with the important message about the next release install the CRJ condo binary to provide life linting as you edit your closure code instructions are on the website simply visit the installation page and choose the appropriate installation for your operating system I have CL J condo installed my local VIN directory and if we start writing some code and we do our simple mistakes then CL J condo will tell us about it you can see there's an underscore at the opening parenthesis and it's giving us a warning saying this is an invalid function body because we haven't actually provided any [[square brackets]] so it doesn't know how many arguments this function is supposed to take and now we've resolved the issue now the the warning is gone and the mark in the margin has also disappeared you should also search a search tool binary such as Rik rep or silver searcher I recommend rip grep because it's the fastest one and also has some nice options you can pass to it to make the output of riprap really useful if you want to search on file names across your operating system then also install the locate binary which will work with Hjelm locates and that's everything now you're ready to go off and create some amazing code using space max foreclosure development thank you"
    },
    {
      "type": "paragraph",
      "id": "fd64ad7f615c600c",
      "text": "Practicalli Spacemacs configuration [https://practical.li/spacemacs/#practicalli-spacemacs-configuration page]"
    },
    {
      "type": "reference",
      "id": "e17bdfd27a1afaed",
      "site": "wiki.ralfbarkow.ch",
      "slug": "repl-driven-development",
      "title": "REPL-Driven Development",
      "text": "When you hear the term [[REPL]]-driven development, you may think of it similarly to other development methodologies, such as test-driven development. REPL-driven development, however, is not so much a strict set of practices and guidelines for development as it is a recognition that the REPL is a useful tool to leverage regardless of your development process. Even if you are already following a methodology like test-driven development, leveraging the REPL to speed your feedback leads to more productivity. This section covers the basics of working with t"
    },
    {
      "type": "reference",
      "id": "d14a21b741ea7bdb",
      "site": "wiki.ralfbarkow.ch",
      "slug": "pharo-browse-menu",
      "title": "Pharo Browse Menu",
      "text": "⌘OB Shortcut ⇒ System Browser"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-10-15",
        "story": []
      },
      "date": 1697339855085
    },
    {
      "id": "4f977499e31e2129",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4f977499e31e2129",
        "text": "⇒ [[BaselineOfRalfsDynabook]]"
      },
      "attribution": {
        "page": "2023-10-14"
      },
      "date": 1697339860211
    },
    {
      "item": {
        "type": "factory",
        "id": "80b33299e0acab68"
      },
      "id": "80b33299e0acab68",
      "type": "add",
      "after": "4f977499e31e2129",
      "date": 1697340051009
    },
    {
      "type": "edit",
      "id": "80b33299e0acab68",
      "item": {
        "type": "paragraph",
        "id": "80b33299e0acab68",
        "text": "[[Transcript Subject Not Found]]"
      },
      "date": 1697340057427
    },
    {
      "id": "1d1e202a2e3b82a8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1d1e202a2e3b82a8",
        "text": "a LlAuthoredWork an UUID"
      },
      "after": "80b33299e0acab68",
      "attribution": {
        "page": "BaselineOfRalfsDynabook"
      },
      "date": 1697340218068
    },
    {
      "item": {
        "type": "factory",
        "id": "4a67b60e6117c4c0"
      },
      "id": "4a67b60e6117c4c0",
      "type": "add",
      "after": "1d1e202a2e3b82a8",
      "date": 1697340820789
    },
    {
      "type": "edit",
      "id": "4a67b60e6117c4c0",
      "item": {
        "type": "pagefold",
        "id": "4a67b60e6117c4c0",
        "text": "~"
      },
      "date": 1697340824737
    },
    {
      "item": {
        "type": "factory",
        "id": "6e0a3c083772cf9a"
      },
      "id": "6e0a3c083772cf9a",
      "type": "add",
      "after": "4a67b60e6117c4c0",
      "date": 1697340826291
    },
    {
      "type": "edit",
      "id": "6e0a3c083772cf9a",
      "item": {
        "type": "video",
        "id": "6e0a3c083772cf9a",
        "text": "YOUTUBE rZNYLGw1qFk"
      },
      "date": 1697340840166
    },
    {
      "item": {
        "type": "factory",
        "id": "073e4f67b525ee7e"
      },
      "id": "073e4f67b525ee7e",
      "type": "add",
      "after": "6e0a3c083772cf9a",
      "date": 1697341175015
    },
    {
      "type": "edit",
      "id": "073e4f67b525ee7e",
      "item": {
        "type": "paragraph",
        "id": "073e4f67b525ee7e",
        "text": "space max install and configuration for closure development space max is a community-driven Emax distribution providing all the packages and features that you get from Emacs along with the very efficient vim style editing modes before installing space max you'll need to have good new Emacs installed and the latest version is Emacs 26.3 new versions of Emacs usually work well or there occasionally you may find a few interesting effects a git client is highly recommended either you can also download it via a zip file this guide is going to use the git approach and we're going to use the install from here before cloning Emacs you should make sure that there's no existing Emacs de directory we're going to use the develop branch as it contains all the latest features and bug fixes so we'll just make a quick change to the git clone command we're going to check out the develop branch as we clone the repository if you want to simplify the rest of the install and trust my recommendations and simply clone my space max configuration this place is a complete space max configuration into a dot space max-d folder and this will be used instead of a dot space max configuration file star Emacs from your operating system and take a quick break while the base max downloads all the packages it requires when the installation is done you'll see the space max home buffer with the important message about the next release install the CRJ condo binary to provide life linting as you edit your closure code instructions are on the website simply visit the installation page and choose the appropriate installation for your operating system I have CL J condo installed my local VIN directory and if we start writing some code and we do our simple mistakes then CL J condo will tell us about it you can see there's an underscore at the opening parenthesis and it's giving us a warning saying this is an invalid function body because we haven't actually provided any square brackets so it doesn't know how many arguments this function is supposed to take and now we've resolved the issue now the the warning is gone and the mark in the margin has also disappeared you should also search a search tool binary such as Rik rep or silver searcher I recommend rip grep because it's the fastest one and also has some nice options you can pass to it to make the output of riprap really useful if you want to search on file names across your operating system then also install the locate binary which will work with Hjelm locates and that's everything now you're ready to go off and create some amazing code using space max foreclosure development thank you"
      },
      "date": 1697341176832
    },
    {
      "type": "edit",
      "id": "073e4f67b525ee7e",
      "item": {
        "type": "paragraph",
        "id": "073e4f67b525ee7e",
        "text": "[[Spacemacs]] install and configuration for closure development space max is a community-driven Emax distribution providing all the packages and features that you get from Emacs along with the very efficient vim style editing modes before installing space max you'll need to have good new Emacs installed and the latest version is Emacs 26.3 new versions of Emacs usually work well or there occasionally you may find a few interesting effects a git client is highly recommended either you can also download it via a zip file this guide is going to use the git approach and we're going to use the install from here before cloning Emacs you should make sure that there's no existing Emacs de directory we're going to use the develop branch as it contains all the latest features and bug fixes so we'll just make a quick change to the git clone command we're going to check out the develop branch as we clone the repository if you want to simplify the rest of the install and trust my recommendations and simply clone my space max configuration this place is a complete space max configuration into a dot space max-d folder and this will be used instead of a dot space max configuration file star Emacs from your operating system and take a quick break while the base max downloads all the packages it requires when the installation is done you'll see the space max home buffer with the important message about the next release install the CRJ condo binary to provide life linting as you edit your closure code instructions are on the website simply visit the installation page and choose the appropriate installation for your operating system I have CL J condo installed my local VIN directory and if we start writing some code and we do our simple mistakes then CL J condo will tell us about it you can see there's an underscore at the opening parenthesis and it's giving us a warning saying this is an invalid function body because we haven't actually provided any square brackets so it doesn't know how many arguments this function is supposed to take and now we've resolved the issue now the the warning is gone and the mark in the margin has also disappeared you should also search a search tool binary such as Rik rep or silver searcher I recommend rip grep because it's the fastest one and also has some nice options you can pass to it to make the output of riprap really useful if you want to search on file names across your operating system then also install the locate binary which will work with Hjelm locates and that's everything now you're ready to go off and create some amazing code using space max foreclosure development thank you"
      },
      "date": 1697341198553
    },
    {
      "type": "edit",
      "id": "073e4f67b525ee7e",
      "item": {
        "type": "paragraph",
        "id": "073e4f67b525ee7e",
        "text": "[[Spacemacs]] install and configuration for closure development"
      },
      "date": 1697341211703
    },
    {
      "type": "add",
      "id": "507f6abe85105568",
      "item": {
        "type": "paragraph",
        "id": "507f6abe85105568",
        "text": "Spacemacs is a community-driven Emax distribution providing all the packages and features that you get from Emacs along with the very efficient vim style editing modes before installing space max you'll need to have good new Emacs installed and the latest version is Emacs 26.3 new versions of Emacs usually work well or there occasionally you may find a few interesting effects a git client is highly recommended either you can also download it via a zip file this guide is going to use the git approach and we're going to use the install from here before cloning Emacs you should make sure that there's no existing Emacs de directory we're going to use the develop branch as it contains all the latest features and bug fixes so we'll just make a quick change to the git clone command we're going to check out the develop branch as we clone the repository if you want to simplify the rest of the install and trust my recommendations and simply clone my space max configuration this place is a complete space max configuration into a dot space max-d folder and this will be used instead of a dot space max configuration file star Emacs from your operating system and take a quick break while the base max downloads all the packages it requires when the installation is done you'll see the space max home buffer with the important message about the next release install the CRJ condo binary to provide life linting as you edit your closure code instructions are on the website simply visit the installation page and choose the appropriate installation for your operating system I have CL J condo installed my local VIN directory and if we start writing some code and we do our simple mistakes then CL J condo will tell us about it you can see there's an underscore at the opening parenthesis and it's giving us a warning saying this is an invalid function body because we haven't actually provided any square brackets so it doesn't know how many arguments this function is supposed to take and now we've resolved the issue now the the warning is gone and the mark in the margin has also disappeared you should also search a search tool binary such as Rik rep or silver searcher I recommend rip grep because it's the fastest one and also has some nice options you can pass to it to make the output of riprap really useful if you want to search on file names across your operating system then also install the locate binary which will work with Hjelm locates and that's everything now you're ready to go off and create some amazing code using space max foreclosure development thank you"
      },
      "after": "073e4f67b525ee7e",
      "date": 1697341218380
    },
    {
      "type": "edit",
      "id": "507f6abe85105568",
      "item": {
        "type": "paragraph",
        "id": "507f6abe85105568",
        "text": "Spacemacs is a community-driven [[Emacs]] distribution providing all the packages and features that you get from Emacs along with the very efficient vim style editing modes before installing space max you'll need to have good new Emacs installed and the latest version is Emacs 26.3 new versions of Emacs usually work well or there occasionally you may find a few interesting effects a git client is highly recommended either you can also download it via a zip file this guide is going to use the git approach and we're going to use the install from here before cloning Emacs you should make sure that there's no existing Emacs de directory we're going to use the develop branch as it contains all the latest features and bug fixes so we'll just make a quick change to the git clone command we're going to check out the develop branch as we clone the repository if you want to simplify the rest of the install and trust my recommendations and simply clone my space max configuration this place is a complete space max configuration into a dot space max-d folder and this will be used instead of a dot space max configuration file star Emacs from your operating system and take a quick break while the base max downloads all the packages it requires when the installation is done you'll see the space max home buffer with the important message about the next release install the CRJ condo binary to provide life linting as you edit your closure code instructions are on the website simply visit the installation page and choose the appropriate installation for your operating system I have CL J condo installed my local VIN directory and if we start writing some code and we do our simple mistakes then CL J condo will tell us about it you can see there's an underscore at the opening parenthesis and it's giving us a warning saying this is an invalid function body because we haven't actually provided any square brackets so it doesn't know how many arguments this function is supposed to take and now we've resolved the issue now the the warning is gone and the mark in the margin has also disappeared you should also search a search tool binary such as Rik rep or silver searcher I recommend rip grep because it's the fastest one and also has some nice options you can pass to it to make the output of riprap really useful if you want to search on file names across your operating system then also install the locate binary which will work with Hjelm locates and that's everything now you're ready to go off and create some amazing code using space max foreclosure development thank you"
      },
      "date": 1697341231786
    },
    {
      "type": "edit",
      "id": "507f6abe85105568",
      "item": {
        "type": "paragraph",
        "id": "507f6abe85105568",
        "text": "Spacemacs is a community-driven [[Emacs]] distribution providing all the packages and features that you get from Emacs along with the very efficient vim style editing modes before installing space max you'll need to have good new Emacs installed and the latest version is Emacs 26.3 new versions of Emacs usually work well or there occasionally you may find a few interesting effects a git client is highly recommended either you can also download it via a zip file this guide is going to use the git approach and we're going to use the install from here before cloning Emacs you should make sure that there's no existing Emacs de directory we're going to use the develop branch as it contains all the latest features and bug fixes so we'll just make a quick change to the git clone command we're going to check out the develop branch as we clone the repository if you want to simplify the rest of the install and trust my recommendations and simply clone my space max configuration this place is a complete space max configuration into a dot space max-d folder and this will be used instead of a dot space max configuration file star Emacs from your operating system and take a quick break while the base max downloads all the packages it requires when the installation is done you'll see the space max home buffer with the important message about the next release install the CRJ condo binary to provide life linting as you edit your closure code instructions are on the website simply visit the installation page and choose the appropriate installation for your operating system I have CL J condo installed my local VIN directory and if we start writing some code and we do our simple mistakes then CL J condo will tell us about it you can see there's an underscore at the opening parenthesis and it's giving us a warning saying this is an invalid function body because we haven't actually provided any [[square brackets]] so it doesn't know how many arguments this function is supposed to take and now we've resolved the issue now the the warning is gone and the mark in the margin has also disappeared you should also search a search tool binary such as Rik rep or silver searcher I recommend rip grep because it's the fastest one and also has some nice options you can pass to it to make the output of riprap really useful if you want to search on file names across your operating system then also install the locate binary which will work with Hjelm locates and that's everything now you're ready to go off and create some amazing code using space max foreclosure development thank you"
      },
      "date": 1697341354554
    },
    {
      "type": "edit",
      "id": "6e0a3c083772cf9a",
      "item": {
        "type": "video",
        "id": "6e0a3c083772cf9a",
        "text": "YOUTUBE rZNYLGw1qFk\nSpacemacs quick install - the fast way to create an excellent Clojure development environment "
      },
      "date": 1697341488105
    },
    {
      "type": "edit",
      "id": "073e4f67b525ee7e",
      "item": {
        "type": "paragraph",
        "id": "073e4f67b525ee7e",
        "text": "[[Spacemacs]] install and configuration for Closure development"
      },
      "date": 1697341509313
    },
    {
      "id": "073e4f67b525ee7e",
      "type": "move",
      "order": [
        "4f977499e31e2129",
        "80b33299e0acab68",
        "1d1e202a2e3b82a8",
        "4a67b60e6117c4c0",
        "073e4f67b525ee7e",
        "6e0a3c083772cf9a",
        "507f6abe85105568"
      ],
      "date": 1697341521560
    },
    {
      "type": "edit",
      "id": "073e4f67b525ee7e",
      "item": {
        "type": "paragraph",
        "id": "073e4f67b525ee7e",
        "text": "⇒ [[Spacemacs]] install and configuration for Closure development"
      },
      "date": 1697341527692
    },
    {
      "item": {
        "type": "factory",
        "id": "fd64ad7f615c600c"
      },
      "id": "fd64ad7f615c600c",
      "type": "add",
      "after": "507f6abe85105568",
      "date": 1697343091885
    },
    {
      "type": "edit",
      "id": "fd64ad7f615c600c",
      "item": {
        "type": "paragraph",
        "id": "fd64ad7f615c600c",
        "text": "Practicalli Spacemacs configuration"
      },
      "date": 1697343094962
    },
    {
      "type": "edit",
      "id": "fd64ad7f615c600c",
      "item": {
        "type": "paragraph",
        "id": "fd64ad7f615c600c",
        "text": "Practicalli Spacemacs configuration [https://practical.li/spacemacs/#practicalli-spacemacs-configuration page]"
      },
      "date": 1697343279900
    },
    {
      "item": {
        "type": "factory",
        "id": "e17bdfd27a1afaed"
      },
      "id": "e17bdfd27a1afaed",
      "type": "add",
      "after": "fd64ad7f615c600c",
      "date": 1697344550079
    },
    {
      "type": "edit",
      "id": "e17bdfd27a1afaed",
      "item": {
        "type": "reference",
        "id": "e17bdfd27a1afaed",
        "site": "wiki.ralfbarkow.ch",
        "slug": "repl-driven-development",
        "title": "REPL-Driven Development",
        "text": "When you hear the term [[REPL]]-driven development, you may think of it similarly to other development methodologies, such as test-driven development. REPL-driven development, however, is not so much a strict set of practices and guidelines for development as it is a recognition that the REPL is a useful tool to leverage regardless of your development process. Even if you are already following a methodology like test-driven development, leveraging the REPL to speed your feedback leads to more productivity. This section covers the basics of working with t"
      },
      "date": 1697344552555
    },
    {
      "type": "add",
      "id": "26c9d04087a29b05",
      "item": {
        "type": "paragraph",
        "id": "26c9d04087a29b05",
        "text": "Notice the use of square brackets in Emacs org.mode"
      },
      "after": "1d1e202a2e3b82a8",
      "date": 1697345454057
    },
    {
      "id": "26c9d04087a29b05",
      "type": "move",
      "order": [
        "4f977499e31e2129",
        "80b33299e0acab68",
        "1d1e202a2e3b82a8",
        "4a67b60e6117c4c0",
        "26c9d04087a29b05",
        "073e4f67b525ee7e",
        "6e0a3c083772cf9a",
        "507f6abe85105568",
        "fd64ad7f615c600c",
        "e17bdfd27a1afaed"
      ],
      "date": 1697345456554
    },
    {
      "type": "edit",
      "id": "26c9d04087a29b05",
      "item": {
        "type": "paragraph",
        "id": "26c9d04087a29b05",
        "text": "Notice the use of square brackets in Emacs org-mode"
      },
      "date": 1697345524289
    },
    {
      "type": "add",
      "id": "d19efe943defb15b",
      "item": {
        "type": "paragraph",
        "id": "d19efe943defb15b",
        "text": "How to insert square brackets within org-mode in Emacs [page]"
      },
      "after": "26c9d04087a29b05",
      "date": 1697345527269
    },
    {
      "type": "edit",
      "id": "d19efe943defb15b",
      "item": {
        "type": "paragraph",
        "id": "d19efe943defb15b",
        "text": "How to insert square brackets within org-mode in Emacs [https://stackoverflow.com/questions/20592666/how-to-insert-square-brackets-within-org-mode-in-emacs page]"
      },
      "date": 1697345538625
    },
    {
      "type": "add",
      "id": "c90302d198d95565",
      "item": {
        "type": "paragraph",
        "id": "c90302d198d95565",
        "text": "[[Hammock Time]]"
      },
      "after": "d19efe943defb15b",
      "date": 1697345783490
    },
    {
      "id": "3506c60310a6694e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3506c60310a6694e",
        "text": "Walking though the [[Elm]] woods [https://orasund.gitbook.io/elm-cookbook/frameworks-1/elm-parser page]"
      },
      "after": "c90302d198d95565",
      "attribution": {
        "page": "Hammock Time"
      },
      "date": 1697347604732
    },
    {
      "type": "edit",
      "id": "c90302d198d95565",
      "item": {
        "type": "paragraph",
        "id": "c90302d198d95565",
        "text": "⇒[[Hammock Time]]: "
      },
      "date": 1697347620528
    },
    {
      "type": "edit",
      "id": "c90302d198d95565",
      "item": {
        "type": "paragraph",
        "id": "c90302d198d95565",
        "text": "⇒[[Hammock Time]]"
      },
      "date": 1697347628726
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "square-brackets",
        "title": "Square-Brackets",
        "text": "Algebraic [[Operation]]s condense into a few [[Patterns]]"
      },
      "after": "4a67b60e6117c4c0",
      "date": 1697347657961
    },
    {
      "type": "edit",
      "id": "26c9d04087a29b05",
      "item": {
        "type": "paragraph",
        "id": "26c9d04087a29b05",
        "text": "Notice the use of [[Square-Brackets]] in [[Emacs]] org-mode"
      },
      "date": 1697347704027
    },
    {
      "item": {
        "type": "factory",
        "id": "d14a21b741ea7bdb"
      },
      "id": "d14a21b741ea7bdb",
      "type": "add",
      "after": "e17bdfd27a1afaed",
      "date": 1697360638495
    },
    {
      "type": "edit",
      "id": "d14a21b741ea7bdb",
      "item": {
        "type": "reference",
        "id": "d14a21b741ea7bdb",
        "site": "wiki.ralfbarkow.ch",
        "slug": "pharo-browse-menu",
        "title": "Pharo Browse Menu",
        "text": "⌘OB Shortcut ⇒ System Browser"
      },
      "date": 1697360641018
    },
    {
      "type": "add",
      "id": "5810cf84a355fd5c",
      "item": {
        "type": "paragraph",
        "id": "5810cf84a355fd5c",
        "text": "Error during Lepiter reload: key OlObjectPageType not found in IdentityDictionary. Do a manual reload to reproduce the error."
      },
      "after": "1d1e202a2e3b82a8",
      "date": 1697363921274
    },
    {
      "id": "503ac00d803850ed",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "503ac00d803850ed",
        "text": "It seems like your properties dictionaries were wiped out. Do any of the properties of these affected objects have meaningful values, i.e. non-nil and non-empty?"
      },
      "after": "1d1e202a2e3b82a8",
      "attribution": {
        "page": "Transcript Subject Not Found"
      },
      "date": 1697363958602
    },
    {
      "type": "add",
      "id": "136d620981984505",
      "item": {
        "type": "paragraph",
        "id": "136d620981984505",
        "text": "We intend to install the latest Fuel version."
      },
      "after": "5810cf84a355fd5c",
      "date": 1697364010792
    },
    {
      "type": "edit",
      "id": "4f977499e31e2129",
      "item": {
        "type": "paragraph",
        "id": "4f977499e31e2129",
        "text": "⇒ [[BaselineOfRalfsDynabook]], fuel"
      },
      "date": 1697364056557
    },
    {
      "type": "edit",
      "id": "4f977499e31e2129",
      "item": {
        "type": "paragraph",
        "id": "4f977499e31e2129",
        "text": "⇒ [[BaselineOfRalfsDynabook]], fuelPreload"
      },
      "date": 1697364061951
    },
    {
      "type": "edit",
      "id": "4f977499e31e2129",
      "item": {
        "type": "paragraph",
        "id": "4f977499e31e2129",
        "text": "⇒ [[BaselineOfRalfsDynabook]], fuelPreLoad"
      },
      "date": 1697364067880
    },
    {
      "type": "add",
      "id": "677012a3ec1f758b",
      "item": {
        "type": "paragraph",
        "id": "677012a3ec1f758b",
        "text": "pharo-local/iceberg:\ncredentials.fuel\nissue"
      },
      "after": "136d620981984505",
      "date": 1697364593028
    },
    {
      "type": "add",
      "id": "719ed98071bea1b0",
      "item": {
        "type": "paragraph",
        "id": "719ed98071bea1b0",
        "text": "[[Testing in Pharo]]"
      },
      "after": "677012a3ec1f758b",
      "date": 1697372458545
    },
    {
      "type": "edit",
      "id": "719ed98071bea1b0",
      "item": {
        "type": "paragraph",
        "id": "719ed98071bea1b0",
        "text": "[[Testing in Pharo]] [https://inria.hal.science/hal-04216172/document pdf]"
      },
      "date": 1697372471857
    },
    {
      "type": "edit",
      "id": "719ed98071bea1b0",
      "item": {
        "type": "paragraph",
        "id": "719ed98071bea1b0",
        "text": "[[Testing in Pharo]] "
      },
      "date": 1697372517997
    },
    {
      "type": "edit",
      "id": "719ed98071bea1b0",
      "item": {
        "type": "paragraph",
        "id": "719ed98071bea1b0",
        "text": "⇒ [[Testing in Pharo]] "
      },
      "date": 1697372838230
    },
    {
      "type": "edit",
      "id": "719ed98071bea1b0",
      "item": {
        "type": "paragraph",
        "id": "719ed98071bea1b0",
        "text": "⇒ [[Testing in Pharo]]"
      },
      "date": 1697386992013
    },
    {
      "type": "add",
      "id": "9789752d37c613fb",
      "item": {
        "type": "paragraph",
        "id": "9789752d37c613fb",
        "text": "Cannot fuel-out a stack trace when \"Welcome to Pharo 11\" window is open [https://github.com/pharo-project/pharo/issues/13788 github]"
      },
      "after": "719ed98071bea1b0",
      "date": 1697386995131
    },
    {
      "type": "edit",
      "id": "9789752d37c613fb",
      "item": {
        "type": "paragraph",
        "id": "9789752d37c613fb",
        "text": "Cannot fuel-out a stack trace when \"Welcome to Pharo 11\" window is open [https://github.com/pharo-project/pharo/issues/13788 github]"
      },
      "date": 1697387014568
    },
    {
      "type": "add",
      "id": "62e9afaf070b1c7f",
      "item": {
        "type": "paragraph",
        "id": "62e9afaf070b1c7f",
        "text": "fuel-out"
      },
      "after": "719ed98071bea1b0",
      "date": 1697387023506
    },
    {
      "item": {
        "type": "factory",
        "id": "6cb36c066938b9e1"
      },
      "id": "6cb36c066938b9e1",
      "type": "add",
      "after": "d14a21b741ea7bdb",
      "date": 1697390174949
    },
    {
      "id": "6cb36c066938b9e1",
      "type": "move",
      "order": [
        "4f977499e31e2129",
        "80b33299e0acab68",
        "1d1e202a2e3b82a8",
        "503ac00d803850ed",
        "5810cf84a355fd5c",
        "136d620981984505",
        "677012a3ec1f758b",
        "719ed98071bea1b0",
        "62e9afaf070b1c7f",
        "9789752d37c613fb",
        "4a67b60e6117c4c0",
        "6cb36c066938b9e1",
        "undefined",
        "26c9d04087a29b05",
        "d19efe943defb15b",
        "c90302d198d95565",
        "3506c60310a6694e",
        "073e4f67b525ee7e",
        "6e0a3c083772cf9a",
        "507f6abe85105568",
        "fd64ad7f615c600c",
        "e17bdfd27a1afaed",
        "d14a21b741ea7bdb"
      ],
      "date": 1697390190720,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1697390198696
    },
    {
      "id": "6cb36c066938b9e1",
      "type": "move",
      "order": [
        "4f977499e31e2129",
        "80b33299e0acab68",
        "1d1e202a2e3b82a8",
        "503ac00d803850ed",
        "5810cf84a355fd5c",
        "136d620981984505",
        "677012a3ec1f758b",
        "719ed98071bea1b0",
        "62e9afaf070b1c7f",
        "9789752d37c613fb",
        "6cb36c066938b9e1",
        "4a67b60e6117c4c0",
        "undefined",
        "26c9d04087a29b05",
        "d19efe943defb15b",
        "c90302d198d95565",
        "3506c60310a6694e",
        "073e4f67b525ee7e",
        "6e0a3c083772cf9a",
        "507f6abe85105568",
        "fd64ad7f615c600c",
        "e17bdfd27a1afaed",
        "d14a21b741ea7bdb"
      ],
      "date": 1697390247965,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1697390266437
    },
    {
      "type": "edit",
      "id": "6cb36c066938b9e1",
      "item": {
        "type": "markdown",
        "id": "6cb36c066938b9e1",
        "text": "In Pharo Smalltalk, using Fuel 5.1.0, you can serialize and deserialize a single object using the Fuel serializer. Here's how you can do it:\n\n1. **Install Fuel:**\n   Make sure you have the Fuel package installed in your Pharo image. You can check this by opening the Monticello Browser and looking for a package named \"Fuel\".\n\n2. **Fuel-out an Object:**\n   To serialize an object, you can use the `FuelSerializer` class. Here's an example:\n\n   ```smalltalk\n   | myObject serializedObject |\n   myObject := YourObject new. \"Replace YourObject with the class of your object\"\n\n   serializedObject := FuelSerializer new serialize: myObject.\n   ```\n\n   In this example, `YourObject` should be replaced with the actual class of the object you want to serialize.\n\n3. **Fuel-in the Object:**\n   To deserialize the object back, you'll use the `FuelDeserializer` class. Here's an example:\n\n   ```smalltalk\n   | deserializedObject |\n   deserializedObject := FuelDeserializer new deserialize: serializedObject.\n   ```\n\n   Now, `deserializedObject` should contain a copy of the original object.\n\nRemember, the class of the object you're serializing must be loaded in the image in order for Fuel to properly deserialize it. If the class isn't available, you'll encounter errors during deserialization.\n\nKeep in mind that Fuel is a powerful serializer, but it may not handle all possible cases, especially if your objects have complex interdependencies or if they rely on external resources.\n\nAlways test your serialization and deserialization process thoroughly to ensure it works as expected for your specific use case."
      },
      "date": 1697390297907
    },
    {
      "type": "edit",
      "id": "6cb36c066938b9e1",
      "item": {
        "type": "markdown",
        "id": "6cb36c066938b9e1",
        "text": "In Pharo Smalltalk, using Fuel 5.1.0, you can serialize and deserialize a single object using the Fuel serializer. Here's how you can do it:\n\n1. **Install Fuel:**\n   Make sure you have the Fuel package installed in your Pharo image. You can check this by opening the Monticello Browser and looking for a package named \"Fuel\".\n\n2. **Fuel-out an Object:**\n   To serialize an object, you can use the `FuelSerializer` class. Here's an example:\n\n   ```smalltalk\n   | myObject serializedObject |\n   myObject := YourObject new. \"Replace YourObject with the class of your object\"\n\n   serializedObject := FuelSerializer new serialize: myObject.\n   ```\n\n   In this example, `YourObject` should be replaced with the actual class of the object you want to serialize.\n\n3. **Fuel-in the Object:**\n   To deserialize the object back, you'll use the `FuelDeserializer` class. Here's an example:\n\n   ```smalltalk\n   | deserializedObject |\n   deserializedObject := FuelDeserializer new deserialize: serializedObject.\n   ```\n\n   Now, `deserializedObject` should contain a copy of the original object.\n\nRemember, the class of the object you're serializing must be loaded in the image in order for Fuel to properly deserialize it. If the class isn't available, you'll encounter errors during deserialization.\n\nKeep in mind that Fuel is a powerful serializer, but it may not handle all possible cases, especially if your objects have complex interdependencies or if they rely on external resources.\n\nAlways test your serialization and deserialization process thoroughly to ensure it works as expected for your specific use case. (ChatGPT September 25 Version)"
      },
      "date": 1697390411155
    },
    {
      "type": "edit",
      "id": "6cb36c066938b9e1",
      "item": {
        "type": "markdown",
        "id": "6cb36c066938b9e1",
        "text": "In Pharo Smalltalk, using Fuel 5.1.0, you can serialize and deserialize a single object using the Fuel serializer. "
      },
      "date": 1697398998091
    },
    {
      "item": {
        "type": "factory",
        "id": "bf13e2b0230a3e40"
      },
      "id": "bf13e2b0230a3e40",
      "type": "add",
      "after": "d14a21b741ea7bdb",
      "date": 1697399017600
    },
    {
      "type": "edit",
      "id": "bf13e2b0230a3e40",
      "item": {
        "type": "code",
        "id": "bf13e2b0230a3e40",
        "text": " FLSerializer new\n        filePath: aFuel fullName;\n        object: anAuthoredWork;\n        serialize."
      },
      "date": 1697399019584
    },
    {
      "id": "bf13e2b0230a3e40",
      "type": "move",
      "order": [
        "4f977499e31e2129",
        "80b33299e0acab68",
        "1d1e202a2e3b82a8",
        "503ac00d803850ed",
        "5810cf84a355fd5c",
        "136d620981984505",
        "677012a3ec1f758b",
        "719ed98071bea1b0",
        "62e9afaf070b1c7f",
        "9789752d37c613fb",
        "6cb36c066938b9e1",
        "bf13e2b0230a3e40",
        "4a67b60e6117c4c0",
        "undefined",
        "26c9d04087a29b05",
        "d19efe943defb15b",
        "c90302d198d95565",
        "3506c60310a6694e",
        "073e4f67b525ee7e",
        "6e0a3c083772cf9a",
        "507f6abe85105568",
        "fd64ad7f615c600c",
        "e17bdfd27a1afaed",
        "d14a21b741ea7bdb"
      ],
      "date": 1697399046296,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1697399051002
    },
    {
      "item": {
        "type": "factory",
        "id": "823156e717425409"
      },
      "id": "823156e717425409",
      "type": "add",
      "after": "d14a21b741ea7bdb",
      "date": 1697399114684
    },
    {
      "type": "edit",
      "id": "823156e717425409",
      "item": {
        "type": "code",
        "id": "823156e717425409",
        "text": "FLMaterializer materializeFromFileNamed: '/Users/rgb/workspace/fuel/anAuthoredWork.fuel'"
      },
      "date": 1697399118049
    },
    {
      "id": "823156e717425409",
      "type": "move",
      "order": [
        "4f977499e31e2129",
        "80b33299e0acab68",
        "1d1e202a2e3b82a8",
        "503ac00d803850ed",
        "5810cf84a355fd5c",
        "136d620981984505",
        "677012a3ec1f758b",
        "719ed98071bea1b0",
        "62e9afaf070b1c7f",
        "9789752d37c613fb",
        "6cb36c066938b9e1",
        "bf13e2b0230a3e40",
        "823156e717425409",
        "4a67b60e6117c4c0",
        "undefined",
        "26c9d04087a29b05",
        "d19efe943defb15b",
        "c90302d198d95565",
        "3506c60310a6694e",
        "073e4f67b525ee7e",
        "6e0a3c083772cf9a",
        "507f6abe85105568",
        "fd64ad7f615c600c",
        "e17bdfd27a1afaed",
        "d14a21b741ea7bdb"
      ],
      "date": 1697399199307,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1697399206056
    },
    {
      "type": "edit",
      "id": "6cb36c066938b9e1",
      "item": {
        "type": "markdown",
        "id": "6cb36c066938b9e1",
        "text": "In Pharo Smalltalk, using Fuel 5.1.0, you can serialize and deserialize a single object using the Fuel serializer and the materializer. "
      },
      "date": 1697399266466
    },
    {
      "type": "edit",
      "id": "6cb36c066938b9e1",
      "item": {
        "type": "markdown",
        "id": "6cb36c066938b9e1",
        "text": "In Pharo Smalltalk, using Fuel 5.1.0, you can serialize and deserialize a single object using the Fuel serializer and the materializer."
      },
      "date": 1697399286702
    },
    {
      "type": "add",
      "id": "c44387db0a83d2ce",
      "item": {
        "type": "markdown",
        "id": "c44387db0a83d2ce",
        "text": "Notice that the library with "
      },
      "after": "6cb36c066938b9e1",
      "date": 1697399294010
    },
    {
      "type": "edit",
      "id": "c44387db0a83d2ce",
      "item": {
        "type": "markdown",
        "id": "c44387db0a83d2ce",
        "text": "Notice that the library with 59 copies of 59 works"
      },
      "date": 1697399317141
    },
    {
      "id": "c44387db0a83d2ce",
      "type": "move",
      "order": [
        "4f977499e31e2129",
        "80b33299e0acab68",
        "1d1e202a2e3b82a8",
        "503ac00d803850ed",
        "5810cf84a355fd5c",
        "136d620981984505",
        "677012a3ec1f758b",
        "719ed98071bea1b0",
        "62e9afaf070b1c7f",
        "9789752d37c613fb",
        "6cb36c066938b9e1",
        "bf13e2b0230a3e40",
        "823156e717425409",
        "c44387db0a83d2ce",
        "4a67b60e6117c4c0",
        "undefined",
        "26c9d04087a29b05",
        "d19efe943defb15b",
        "c90302d198d95565",
        "3506c60310a6694e",
        "073e4f67b525ee7e",
        "6e0a3c083772cf9a",
        "507f6abe85105568",
        "fd64ad7f615c600c",
        "e17bdfd27a1afaed",
        "d14a21b741ea7bdb"
      ],
      "date": 1697399360616,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1697399367256
    },
    {
      "type": "edit",
      "id": "c44387db0a83d2ce",
      "item": {
        "type": "markdown",
        "id": "c44387db0a83d2ce",
        "text": "Note that the library of 59 copies of 59 works is also materialized."
      },
      "date": 1697399426459
    },
    {
      "type": "edit",
      "id": "c44387db0a83d2ce",
      "item": {
        "type": "markdown",
        "id": "c44387db0a83d2ce",
        "text": "Note that the library of 59 copies of 59 works is also materialized. [https://cdn.discordapp.com/attachments/869566842807652453/1163199308452085790/Bildschirmfoto_2023-10-15_um_21.38.27.png?ex=653eb4c6&is=652c3fc6&hm=0a24590ed1e4ac985fdf6eab21918a66c34b1cf9de8d5d8ea2649e0fc941c0b8& png]"
      },
      "date": 1697399546589
    },
    {
      "type": "remove",
      "id": "80b33299e0acab68",
      "date": 1697435086757
    },
    {
      "type": "edit",
      "id": "4f977499e31e2129",
      "item": {
        "type": "paragraph",
        "id": "4f977499e31e2129",
        "text": "⇒ [[BaselineOfRalfsDynabook]], fuelPreLoad ⇐ [[Transcript Subject Not Found]]"
      },
      "date": 1697435087673
    }
  ]
}