{
  "title": "Object Serialization",
  "story": [
    {
      "type": "paragraph",
      "id": "2ceac9d0143e77f2",
      "text": "For objects and primitive type values that are passed by copy, object serialization is needed: The objects are turned into a byte array representation, including all their primitive type instance variables and including the complete graph of objects to which all their non-primitive instance variables refer."
    },
    {
      "type": "paragraph",
      "id": "613b5f1f84519840",
      "text": "This wire format is unpacked at the recipient and turned back into a deep copy of the graph of argument objects. The serialization can copy even cyclic graphs from the caller's JVM to the callee's JVM; the serialization keeps and monitors a hash-table of objects that have already been packed to avoid repetition and infinite loops. For every single remote method invocation, this table has to be reset, since part of the objects' state might have been modified."
    },
    {
      "type": "pagefold",
      "id": "1d5a8ae4f154eb0f",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "2a064a8a0333b949",
      "text": "PHILIPPSEN, Michael and HAUMACHER, Bernhard, 1999. More efficient object serialization. In: ROLIM, José, MUELLER, Frank, ZOMAYA, Albert Y., ERCAL, Fikret, OLARIU, Stephan, RAVINDRAN, Binoy, GUSTAFSSON, Jan, TAKADA, Hiroaki, OLSSON, Ron, KALE, Laxmikant V., BECKMAN, Pete, HAINES, Matthew, ELGINDY, Hossam, CAROMEL, Denis, CHAUMETTE, Serge, FOX, Geoffrey, PAN, Yi, LI, Keqin, YANG, Tao, CHIOLA, G., CONTE, G., MANCINI, L. V., MÉRY, Domenique, SANDERS, Beverly, BHATT, Devesh and PRASANNA, Viktor (eds.), Parallel and Distributed Processing. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 718–732. Lecture Notes in Computer Science. [Accessed 16 October 2023]. ISBN 978-3-540-65831-3. \n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Object Serialization",
        "story": []
      },
      "date": 1697436451333
    },
    {
      "id": "2ceac9d0143e77f2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2ceac9d0143e77f2",
        "text": "For objects and primitive type values that are passed by copy, object serialization is needed: The objects are turned into a byte array representation, including all their primitive type instance variables"
      },
      "attribution": {
        "page": "2023-10-16"
      },
      "date": 1697436454764
    },
    {
      "item": {
        "type": "factory",
        "id": "1d5a8ae4f154eb0f"
      },
      "id": "1d5a8ae4f154eb0f",
      "type": "add",
      "after": "2ceac9d0143e77f2",
      "date": 1697436469628
    },
    {
      "type": "edit",
      "id": "1d5a8ae4f154eb0f",
      "item": {
        "type": "pagefold",
        "id": "1d5a8ae4f154eb0f",
        "text": "~"
      },
      "date": 1697436472150
    },
    {
      "item": {
        "type": "factory",
        "id": "2a064a8a0333b949"
      },
      "id": "2a064a8a0333b949",
      "type": "add",
      "after": "1d5a8ae4f154eb0f",
      "date": 1697436473601
    },
    {
      "type": "edit",
      "id": "2a064a8a0333b949",
      "item": {
        "type": "paragraph",
        "id": "2a064a8a0333b949",
        "text": "\nPHILIPPSEN, Michael and HAUMACHER, Bernhard, 1999. More efficient object serialization. In: ROLIM, José, MUELLER, Frank, ZOMAYA, Albert Y., ERCAL, Fikret, OLARIU, Stephan, RAVINDRAN, Binoy, GUSTAFSSON, Jan, TAKADA, Hiroaki, OLSSON, Ron, KALE, Laxmikant V., BECKMAN, Pete, HAINES, Matthew, ELGINDY, Hossam, CAROMEL, Denis, CHAUMETTE, Serge, FOX, Geoffrey, PAN, Yi, LI, Keqin, YANG, Tao, CHIOLA, G., CONTE, G., MANCINI, L. V., MÉRY, Domenique, SANDERS, Beverly, BHATT, Devesh and PRASANNA, Viktor (eds.), Parallel and Distributed Processing. Online. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 718–732. Lecture Notes in Computer Science. [Accessed 16 October 2023]. ISBN 978-3-540-65831-3. \n"
      },
      "date": 1697436476351
    },
    {
      "type": "edit",
      "id": "2a064a8a0333b949",
      "item": {
        "type": "paragraph",
        "id": "2a064a8a0333b949",
        "text": "PHILIPPSEN, Michael and HAUMACHER, Bernhard, 1999. More efficient object serialization. In: ROLIM, José, MUELLER, Frank, ZOMAYA, Albert Y., ERCAL, Fikret, OLARIU, Stephan, RAVINDRAN, Binoy, GUSTAFSSON, Jan, TAKADA, Hiroaki, OLSSON, Ron, KALE, Laxmikant V., BECKMAN, Pete, HAINES, Matthew, ELGINDY, Hossam, CAROMEL, Denis, CHAUMETTE, Serge, FOX, Geoffrey, PAN, Yi, LI, Keqin, YANG, Tao, CHIOLA, G., CONTE, G., MANCINI, L. V., MÉRY, Domenique, SANDERS, Beverly, BHATT, Devesh and PRASANNA, Viktor (eds.), Parallel and Distributed Processing. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 718–732. Lecture Notes in Computer Science. [Accessed 16 October 2023]. ISBN 978-3-540-65831-3. \n"
      },
      "date": 1697436490554
    },
    {
      "type": "edit",
      "id": "2ceac9d0143e77f2",
      "item": {
        "type": "paragraph",
        "id": "2ceac9d0143e77f2",
        "text": "For objects and primitive type values that are passed by copy, object serialization is needed: The objects are turned into a byte array representation, including all their primitive type instance variables and including the complete graph of objects to which all their non-primitive instance variables refer."
      },
      "date": 1697436516774
    },
    {
      "type": "add",
      "id": "613b5f1f84519840",
      "item": {
        "type": "paragraph",
        "id": "613b5f1f84519840",
        "text": "This wire format is unpacked at the recipient and turned back into a deep copy of the graph of argument objects. The serialization can copy even cyclic graphs from the caller's JVM to the callee's JVM; the serialization keeps and monitors a hash-table of objects that have already been packed to avoid repetition and infinite loops. For every single remote method invocation, this table has to be reset, since part of the objects' state might have been modified."
      },
      "after": "2ceac9d0143e77f2",
      "date": 1697436576412
    }
  ]
}