{
  "title": "Coordination Facilities Must Be Explicit",
  "story": [
    {
      "type": "paragraph",
      "id": "554536c09768fe2e",
      "text": "One of the most difficult parts of implementing an user interface is defining and maintaining the relationships between objects. "
    },
    {
      "type": "paragraph",
      "id": "2c04e352943df34a",
      "text": "Typically it is difficult to specify that when one object changes, some other object should be updated. Facilities for explicitly stating and maintaining these dependencies must be available so that the designer can clearly define what interactions are to take place."
    },
    {
      "type": "markdown",
      "id": "b7ccd64d4b2a7acc",
      "text": "Smalltalk contains a hidden and inflexible coordination scheme. Its *dependents* mechanism hides the relationships between objects by allowing them to interact behind the scene. When models think they have changed significantly, they indirectly send a generic update message to the views open on them. The interface (i.e., view) cannot specify what changes it is interested in nor can it control when it gets notified of these changes. The dependents mechanism is further restricted in that all messages go over a single message path which has a fixed format."
    },
    {
      "type": "paragraph",
      "id": "b0e7525377aaf073",
      "text": "Other systems (e.g., the Macintosh) provide little or no coordination facilities that the user can access. These approaches are reasonable for simple applications which have few interacting objects. However, in a more general system which allows the user to compose arbitrarily complex objects from distinct parts, an explicit coordination scheme is needed."
    },
    {
      "type": "paragraph",
      "id": "47283c040b33ab4a",
      "text": "⇒ [[Distributing The Interface And The Application]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Coordination Facilities Must Be Explicit",
        "story": []
      },
      "date": 1655960206255
    },
    {
      "item": {
        "type": "factory",
        "id": "554536c09768fe2e"
      },
      "id": "554536c09768fe2e",
      "type": "add",
      "date": 1655960224485
    },
    {
      "type": "edit",
      "id": "554536c09768fe2e",
      "item": {
        "type": "paragraph",
        "id": "554536c09768fe2e",
        "text": "One of the most difficult parts of implementing an user interface is defining and maintaining the relationships between objects. Typically it is difficult to specify that when one object changes, some other object should be updated. Facilities for explicitly stating and maintaining these dependencies must be available so that the designer can clearly define what interactions are to take place."
      },
      "date": 1655960225975
    },
    {
      "item": {
        "type": "factory",
        "id": "b7ccd64d4b2a7acc"
      },
      "id": "b7ccd64d4b2a7acc",
      "type": "add",
      "after": "554536c09768fe2e",
      "date": 1655960257584
    },
    {
      "type": "edit",
      "id": "b7ccd64d4b2a7acc",
      "item": {
        "type": "paragraph",
        "id": "b7ccd64d4b2a7acc",
        "text": "Smalltalk contains a hidden and inflexible coordination scheme. Its dependents mechanism hides the relationships between objects by allowing them to interact behind the scene. When models think they have changed significantly, they indirectly send a generic update message to the views open on them. The interface (i.e., view) cannot specify what changes it is interested in nor can it control when it gets notified of these changes. The dependents mechanism is further restricted in that all messages go over a single message path which has a fixed format."
      },
      "date": 1655960260010
    },
    {
      "type": "edit",
      "id": "b7ccd64d4b2a7acc",
      "item": {
        "type": "paragraph",
        "id": "b7ccd64d4b2a7acc",
        "text": "Smalltalk contains a hidden and inflexible coordination scheme. Its *dependents* mechanism hides the relationships between objects by allowing them to interact behind the scene. When models think they have changed significantly, they indirectly send a generic update message to the views open on them. The interface (i.e., view) cannot specify what changes it is interested in nor can it control when it gets notified of these changes. The dependents mechanism is further restricted in that all messages go over a single message path which has a fixed format."
      },
      "date": 1655960287414
    },
    {
      "type": "edit",
      "id": "b7ccd64d4b2a7acc",
      "item": {
        "type": "markdown",
        "id": "b7ccd64d4b2a7acc",
        "text": "Smalltalk contains a hidden and inflexible coordination scheme. Its *dependents* mechanism hides the relationships between objects by allowing them to interact behind the scene. When models think they have changed significantly, they indirectly send a generic update message to the views open on them. The interface (i.e., view) cannot specify what changes it is interested in nor can it control when it gets notified of these changes. The dependents mechanism is further restricted in that all messages go over a single message path which has a fixed format."
      },
      "date": 1655960288342
    },
    {
      "item": {
        "type": "factory",
        "id": "b0e7525377aaf073"
      },
      "id": "b0e7525377aaf073",
      "type": "add",
      "after": "b7ccd64d4b2a7acc",
      "date": 1655960322507
    },
    {
      "type": "edit",
      "id": "b0e7525377aaf073",
      "item": {
        "type": "paragraph",
        "id": "b0e7525377aaf073",
        "text": "Other systems (e.g., the Macintosh) provide little or no coordination facilities that the user can access. These approaches are reasonable for simple applications which have few interacting objects. However, in a more general system which allows the user to compose arbitrarily complex objects from distinct parts, an explicit coordination scheme is needed."
      },
      "date": 1655960323722
    },
    {
      "item": {
        "type": "factory",
        "id": "47283c040b33ab4a"
      },
      "id": "47283c040b33ab4a",
      "type": "add",
      "after": "b0e7525377aaf073",
      "date": 1655960355130
    },
    {
      "type": "edit",
      "id": "47283c040b33ab4a",
      "item": {
        "type": "paragraph",
        "id": "47283c040b33ab4a",
        "text": "⇒ [[Distributing The Interface And The Application]]"
      },
      "date": 1655960364148
    },
    {
      "type": "edit",
      "id": "554536c09768fe2e",
      "item": {
        "type": "paragraph",
        "id": "554536c09768fe2e",
        "text": "One of the most difficult parts of implementing an user interface is defining and maintaining the relationships between objects. "
      },
      "date": 1670572049377
    },
    {
      "type": "add",
      "id": "2c04e352943df34a",
      "item": {
        "type": "paragraph",
        "id": "2c04e352943df34a",
        "text": "Typically it is difficult to specify that when one object changes, some other object should be updated. Facilities for explicitly stating and maintaining these dependencies must be available so that the designer can clearly define what interactions are to take place."
      },
      "after": "554536c09768fe2e",
      "date": 1670572098374
    }
  ]
}