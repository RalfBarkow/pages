{
  "title": "Qomp Language",
  "story": [
    {
      "type": "html",
      "text": "This page describes the Qomp language. ",
      "id": "31dc6decfdd0b0199d8e844089225125"
    },
    {
      "type": "html",
      "text": "\nThe long name for the language is Qompute. In lowercase, qomp is interesting since the \"q\" and the \"p\" in lowercase are mirrors of each other, depending on your font. This odd name for a language was chosen on purpose.",
      "id": "27a2f22ae955ddc36f390473140e4587"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "da5a6beb94948562523e83b1f1b4c482"
    },
    {
      "type": "html",
      "text": "A hello world:",
      "id": "843d776d14d376b919168579404bcb4c"
    },
    {
      "type": "code",
      "text": "  '''prog''' example;\n  '''b'''\n    ln('hello');\n  '''e'''.",
      "id": "dbe46e43437b78b9544233d24af47dea"
    },
    {
      "type": "html",
      "text": " While I really love Qomp, I have trouble with this \"Hello World\" program. When I run it in my [[Qomp Interpreter]], it just returns \"hello\". Is my interpreter at fault? -- [[Qomp User]]",
      "id": "8fab315829d41c9911d13a5528363387"
    },
    {
      "type": "html",
      "text": " Thank you for the bug report, [[Qomp User]]. We shall call it a \"hello\" program in the [[Qomp Manual]]. \"Hi\" would be even more concise... so we may even change it to a \"Hi\" program.",
      "id": "8a6299b6121b5ea65081c634823a230c"
    },
    {
      "type": "html",
      "text": "\nA hi program:",
      "id": "79f0ca6254883ea455e40675ef9f19ed"
    },
    {
      "type": "code",
      "text": "  '''b'''\n    ln('hi');\n  '''e'''.",
      "id": "8cdd895273560d745c722b055cf04ebe"
    },
    {
      "type": "html",
      "text": "\nThe prog directive is optional since it is redundant (standard pascal fanboys will bitch about this). A program file should be named with file extension .QP, while a module (unit) should named with extension .QU (but this isn't mandatory, just recommended file naming scheme).",
      "id": "61693ba0af2780f110180f0fe3788953"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "da5a6beb94948562523e83b1f1b4c482"
    },
    {
      "type": "html",
      "text": "\nSmall program to execute a process and reuse existing modules:",
      "id": "019f32dcf18e0791e96544b79d63188b"
    },
    {
      "type": "code",
      "text": "  '''prog''' execdemo;",
      "id": "2a0b908eabd43d5e21732e6ccd4b7ddb"
    },
    {
      "type": "code",
      "text": "  '''use''' \n    sysutils; // import a PPU module written in another language, fpc\n  \n  '''pro''' err(msg: astr);\n  '''v''' s: astr = 'Error: ';       ''// declare and initialize a string''\n  '''b'''\n    s =. s + msg + ' exiting';  ''// concatenate''\n    ln(s);                      ''// msg written to standard out''\n    halt;                       ''// stops program''\n  '''e''';",
      "id": "455f318b221c45fa6e5ed4f328560905"
    },
    {
      "type": "code",
      "text": "  '''pro''' checkparams;\n  '''b'''\n    '''if''' arg(1) = '' '''do''' err('must specify command line param');\n  '''e''';",
      "id": "943fda4f754a70c09bb3ee4040d704a2"
    },
    {
      "type": "code",
      "text": "  '''b'''\n    checkparams;\n    '''if''' '''not''' executeprocess(arg(1)) '''do''' err('process execute failed');\n  '''e'''.",
      "id": "41f1c5f51252a58690c65e6c58828aef"
    },
    {
      "type": "html",
      "text": "A function looks like:",
      "id": "e9c0525ecf1ce8e885085510e4c6b080"
    },
    {
      "type": "html",
      "text": "<b>fun</b> foo:<br>int;",
      "id": "33a51c8cca5ae152e014f802dc1c3414"
    },
    {
      "type": "code",
      "text": "  '''b'''\n    ln('The result is five');\n    res =. 5;\n  '''e''';",
      "id": "c18ab193fc365cf9aaa42c586e0be303"
    },
    {
      "type": "html",
      "text": "\nOr one can use a <i>return</i> style of programming instead of the result variable.",
      "id": "efeb74a54695388f7da32580f6ffa132"
    },
    {
      "type": "html",
      "text": "<b>fun</b> foo:<br>int;",
      "id": "33a51c8cca5ae152e014f802dc1c3414"
    },
    {
      "type": "code",
      "text": "  '''b'''\n    ln('The result is five');\n    exit(5);\n    ln('This here is not executed! Above is like a return statement in Cee');\n  '''e''';",
      "id": "641d07395f7921f34565945415edb6d9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "da5a6beb94948562523e83b1f1b4c482"
    },
    {
      "type": "html",
      "text": "The most interesting useful (compilable) program is the meaning of life:",
      "id": "e7abcb97ee78dddbc64cc1891675022b"
    },
    {
      "type": "code",
      "text": "  '''prog''' answer;",
      "id": "8eff93798e99b5ef515d3001cb2a462c"
    },
    {
      "type": "html",
      "text": "<b>fun</b> life:<br>cardinal;",
      "id": "be70c53b2815286958b370591908b5a2"
    },
    {
      "type": "code",
      "text": "  '''b''' '''rep''' randomize; life =. random(life) '''til''' life = random\n  '''e''';",
      "id": "d850d20f3689651dd71c6ddc97ecc23e"
    },
    {
      "type": "code",
      "text": "  '''b''' ln(life);\n  '''e'''.",
      "id": "5d7c70a0e30d83e526acfd1bc276bc2e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "da5a6beb94948562523e83b1f1b4c482"
    },
    {
      "type": "html",
      "text": "Information on Qomp will be available at:",
      "id": "a84f79cc128f73bd516509f0547dd1e5"
    },
    {
      "type": "html",
      "text": " [http://z505.com/qomp/index.htm z505.com]",
      "id": "457a8ff50d8d2b9da939d63995cc7c34"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "da5a6beb94948562523e83b1f1b4c482"
    },
    {
      "type": "html",
      "text": "Recent updates: ",
      "id": "fc4ad0f978ce6480a41c40db11e4ba58"
    },
    {
      "type": "html",
      "text": "\nQomp notation/syntax is now revised. After long thinking and [[Big Design Up Front]].. I've decided to keep the round brackets with function(launching) instead of using square brackets. I realized it is better for migrating old Cee and Algol style code (and/or migrating the eyes to read the two codebases). I like the roundness (and so do most people) of function launchers.",
      "id": "5f8162805fe3471e256149dce74ebb26"
    },
    {
      "type": "html",
      "text": "\nThe outln() has been changed to ln() while out() remains. Standard out can be used often, and must remain extremely convenient to use (more convenient and elegant than ugly hacks such as printf(\"\\n\") in Cee. ",
      "id": "86e8a13325180c1d8dfa362066c2bee2"
    },
    {
      "type": "html",
      "text": "\nThe equality sign will be <b>=</b> and will not be <b>==</b>. After reading some more harsh words from well known computing scientists I simply cannot bastardize the language into a Cee like form, confusing equality with assignment. Equality will remain mathematical in qomp, using the <b>=</b> operator. ",
      "id": "4fbf13c38b67f1db6c786e149bd62d90"
    },
    {
      "type": "html",
      "text": "\nAssignment operator is <b>=.</b> (period proceeding equal sign). Slightly different than than Algols <b>:=</b> sign.",
      "id": "a400bf0810d37414c7be141a81d84eec"
    },
    {
      "type": "html",
      "text": " <i>Why have you chosen not to use the (reasonably) familiar <b>:=</b> digraph for assignment?</i> [[Delete When Cooked]]",
      "id": "6d18b32598c2c8ea0bf397dbccc8e00f"
    },
    {
      "type": "html",
      "text": " {I expect he wishes to avoid requirement to tap the 'SHIFT' key as would be required to strike the <b>:</b> character.  Can't say I like his choice for replacement ('a =. 0.0' just looks too strange to me), but this is his language and I'll never need to use it.}",
      "id": "ee3e64778c7280d36b6dab58ccb86489"
    },
    {
      "type": "html",
      "text": " Doesn't look strange to me as we use spaces. In these situations such as s =.'string' it doesn't require a space. On dvorak, qwerty, and some international keyboards the dot is more accessible. The dot is less obtrusive than :=, however I will consider this feedback. ",
      "id": "78f18a9bf89002b7bcd682e7348b142f"
    },
    {
      "type": "html",
      "text": " {Being a little 'obtrusive' is probably a [[Good Thing]] when comes time to visually distinguish assignment from boolean comparison.  If you wanted, you could always take the context-sensitive approach ('=' assignment or test based on whether in procedural statement vs. value-expression) or the [[Color Forth]] approach ('=' red or green based on... ;)}",
      "id": "ffdd31c0d372ef5732848811655889a7"
    },
    {
      "type": "image",
      "url": "http://tbn0.google.com/images?q=tbn:a8TISHxZAwXd0M:http://www.popartuk.com/g/l/lgpp0407%2Bthe-dark-side-of-the-moon-pink-floyd-poster.jpg",
      "text": "tbn0.google.com",
      "id": "9a2a3900146f154b4bd073b5443872a4"
    },
    {
      "type": "html",
      "text": " The context sensitive approach (i.e. without colors or without two signs) makes it confusing I think - as it merges the operator as if it is addressing the same problem. As for [[Color Forth]], it reminds me of a pink floyd album (and maybe some LSD and Acid).  ",
      "id": "8a73196018a991ee5320bc2f80a16488"
    },
    {
      "type": "html",
      "text": " As a point of clarification, the use of color in [[Color Forth]] is precisely to reduce the dependency on context in the language.  Context sensitivity is constrained to the problem's specific wordset only; the language's imposition of context (e.g., are we compiling or interpreting?  What numeric base are we currently in?  Etc.) is removed.  --[[Samuel Falvo]]",
      "id": "87dbb26a139e48ddc8563af061ba7e5a"
    },
    {
      "type": "html",
      "text": " Can I change the color of words in the editor? Or does the compiler pick this up automatically? I.e. the compiler doesn't actually have knowledge of any colors, it is just binary to it.. and can the human control the colors or is it all just passive visual cues (rather than active ones I can adjust)? Can I try [[Color Forth]] to blow my mind, on BSD, Linux, or Windows?",
      "id": "47df3ee8f2512898eb2b62b40d8f277d"
    },
    {
      "type": "html",
      "text": " You control the color of the words in the editor.  The compiler actually takes its cues from your color selection.  More precisely, the compiler is aware of a 4-bit tag on each word, which tells the compiler how to interpret its role in the program.  The editor merely chooses to map tag values to colors.  There are versions of [[Color Forth]] for Linux (not sure about BSD though) and Windows.  I am most familiar with the Linux version, found here: [http://colorforthray.info/XcolorForth.tar.gz colorforthray.info] .  However, I must warn you -- this will be quite foreign.  The default level of abstraction [[Color Forth]] presents to the user will be comparable to programming an Apple II with its built-in ROM monitor, and <i>you</i> don't know its machine language.  If you'd like, I'd be happy to whip up a \"type this program in and run it\" type tutorial, kind of like the computer magazines from the 80s, with some dialog explaining what I'm doing, and why. --[[Samuel Falvo]]",
      "id": "aaf09f7dc50ac52cec9887b3f725af9e"
    },
    {
      "type": "html",
      "text": "\nThe reserved words <b>prc</b> and <b>fnc</b> were changed to <b>pro</b> and <b>fun</b> during these past months. Most often used reserved words in Qomp are usually 1 or 3 characters long so they line up with indentations consistently (as opposed to having some <b>even</b> and some <b>odd</b> length keywords, which screws up indentation.. trust me, [[Been There Done That]] in bulky Pascal with its notation/syntax).",
      "id": "3dbd4196b979f8476ee3ab378e487ac3"
    },
    {
      "type": "html",
      "text": "\nRepeat loops use <b>rep</b> and <b>til</b> as reserved words (repeat until).",
      "id": "2ad423bf5970656931b63ab9e20a0fc3"
    },
    {
      "type": "html",
      "text": "\nDashes in identifiers - I heavily debated with myself about this - dashes make it harder to interface with C libraries (lisp uses a macro to map dashes to underscores, for example). As of 2008, I've decided to release the first compiler without dashes in identifiers to keep the language more math-like and more interface-able with Cee language. This may be permanent.",
      "id": "3f3ecbaa784d218b92ba63d8a3714048"
    },
    {
      "type": "html",
      "text": "\nAccess to command line parameters is via the arg() function, to make it simple.. similar to ARGV or paramStr() in other languages.",
      "id": "925fafd3e9423750c000e727929fa517"
    },
    {
      "type": "html",
      "text": "\nI'll have a release of the first Qomp compiler very soon. I have to make an installer for the compiler still yet.",
      "id": "7b3d0bced1324a6635ebf4da65a53850"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "da5a6beb94948562523e83b1f1b4c482"
    },
    {
      "type": "html",
      "text": "<b>Syntax And Notation Definitions?</b>",
      "id": "dd2146a74a5fd359fa607b34b5a904e9"
    },
    {
      "type": "html",
      "text": "\nWhile designing Qomp, I came across the idea that maybe people (including myself) confuse Syntax with Notation (and with words) - or maybe syntax and notation are so related that we can discuss this in a [[Whatsa Language]] pissing match ;-).  I looked up the word notation and found that it means symbols, but not neccessarily words (since words, are less symbolic - but what about chopped down words?)''",
      "id": "661a3072a54de3a6df8b70bd53e0c7f2"
    },
    {
      "type": "html",
      "text": "\nAnyway, semantics, syntax, notation - all refer and relate to each other indirectly/directly during discussions. Computer languages seen to be <i>more</i> than just languages (they aren't languages?). They are almost like communities/systems/notations/syntaxes/semantics/words/english combined. ",
      "id": "d11c82fbe83fc988a935f46c6aab4337"
    },
    {
      "type": "html",
      "text": "\nMy conclusion is: a computer programming language is not just a language! It's more than that. ",
      "id": "4ee1db59dda065ae45dbbcbcc347a7de"
    },
    {
      "type": "html",
      "text": "\nWhen people refer to syntax - it seems many times they are also referring (maybe mistakenly, including myself) to notation <i>and</i> words too. For example, I now consider chopped down reserved words a <i>notation</i> and some words just words (not notation, as full words aren't notation - maybe). I suppose <b>b</b> and <b>e</b> are notation, whereas a word like <b>while</b> is a word. But really is this notation too? It's a word, not a notation. Hmm. Is not all this really about syntax as a whole? Possibly, however syntax seems more worried about sentence structure and relationships amongst the words,  rather than the actual words and symbols used. Still, people generally seem to group a lot of things into the <i>syntax</i> group, just by habit, including myself. It's a nitpick - and hard to draw the lines - because one could consider <b>b</b> a reserved word, or they could consider it a symbol, letter, or notation. The notation <b>b</b> also happens to semantically mean that this is the beginning of a code block - but one could redefine it in some languages to mean something semantically different (overload it). Then the language may have redefine-able semantics. Syntax, notation, words, letters, symbols, English, sentences, are all related in one big [[Turd Fan Collision]].",
      "id": "bd38e0b98da3bf50df30541851635716"
    },
    {
      "type": "html",
      "text": "<i>Unless the distinction between 'syntax' and 'notation' is somehow relevant to how we produce and process a particular programming language's source code, most discussion on the matter is moot: using the two distinct words won't allow you to learn anything new or impart greater information, and any distinction you attempt to make would likely be arbitrary, informal, and confusing (much as you seem to be experiencing when attempting to make the distinction regarding Qomp).  My own recommendation is to focus on process and product - pick and use the words that allow you to make formal distinctions, such as 'syntax' referring to how structure is grabbed out of source-code by a distinct 'parse' phase (in languages that possess such a phase), and 'semantics' referring to how these structures are then evaluated or interpreted.  Perhaps if a particular language had a formal concept of 'words' being distinct from other symbols, or supported distinct modes of writing for distinct purposes, you'd find good opportunity to distinguish 'syntax' from 'notation'.  At the moment, I'm not seeing much value in it.</i>",
      "id": "0eb4637a7ac2b306f94e08ab7ab82941"
    },
    {
      "type": "html",
      "text": "\nSyntax seems to be more sentence/grammar related - words are used in sentences but do not seem to make up syntax. In programming and music, notations and symbols are used - in addition to words. So add another one to the pot: symbols.",
      "id": "74589de0675c773af364eda38b847d21"
    },
    {
      "type": "html",
      "text": "\nQuote",
      "id": "10c275b00475395104d60d6ff361d306"
    },
    {
      "type": "html",
      "text": " Syntax: <i>\"studies of the rules for forming admissible sentences\"</i> -- wordnet.princeton.edu/perl/webwn",
      "id": "e38b87c12a19de1c83f43bf5ebd7b7c6"
    },
    {
      "type": "html",
      "text": " Syntax: <i>\"the grammatical arrangement of words in sentences\"</i> -- Google Define",
      "id": "153fe604f7109dd26fd022ea7dc97abd"
    },
    {
      "type": "html",
      "text": "<i>Can you find an example of a programming language where 'symbols' are formally and meaningfully distinguished from 'words' at the parser level?  I'm curious as to what value you see in this distinction within the context of existing programming languages.</i>",
      "id": "9b7282d08a958eb95c14acf3fd2a0ea2"
    },
    {
      "type": "html",
      "text": "\nIn the documentation for humans, we many times see languages defined with their reserved words and symbols (== - + *).  Sometimes reserved words can be reused in code as identifiers where symbols cannot. Sometimes a reserved word looks much like a symbol, such as <b>b</b> and <b>e</b>. It's either a reserved letter, or kind of a symbol, or a bit of both. ",
      "id": "63c7eaa61efa581b5c42c889e8c20075"
    },
    {
      "type": "html",
      "text": "\nTo add more confusion: punctuation could be another term to describe parts of the programming language. For example: a comma, dot, or curly brace could be considered <b>programming punctuation</b>, but I can't recall hearing that term coined before (although it may be out there). ",
      "id": "b0f69b727a8a9f1d71df4259d93c85bb"
    },
    {
      "type": "html",
      "text": "\nThe point is - there are not perfectly clear [[Once And Only Once]] style definitions and terminology for the complex topic of language. What we should call this, or what we should call that isn't always crystal clear. Sometimes we have an overlap. Punctuation involves symbols, and/or vice versa. Words can act like symbols. Letters can too. But they don't have to. Sometimes they could, sometimes they might not.",
      "id": "17cc4e0b0e371a3f39a2d236effa930c"
    },
    {
      "type": "html",
      "text": "\nHere is a page about Eiffel symbols vs reserved words:",
      "id": "7621a51c3308cc027dab2039fa6ffa5a"
    },
    {
      "type": "html",
      "text": " [http://www.gobosoft.com/eiffel/syntax/notation.html www.gobosoft.com]",
      "id": "023384ba4648851b965dc01e96347bf8"
    },
    {
      "type": "html",
      "text": "\nA short form word such as <b>MOD</b> or <b>DIV</b> could even be considered a word and a symbol. However, when we parse someFuncMod and someFuncDiv the compiler should not choke up on the Div and Mod in the identifier - because they aren't really symbols - they are just letters that make up a word, which should be allowed in an identifier.  someFunc* and someFunc+ would cause a compile error since a word cannot be composed of symbols (yet it can contain DIV and MOD, and yet an identifier could contain underscore \"characters\" or \"symbols\").",
      "id": "3b2e3325ee33eb8883d0d8087d7005e6"
    },
    {
      "type": "html",
      "text": "\nThe distinctions may rather academic and useless when it comes down to a [[Just Do It]] attitude, or it may have something to do with the growth of the large English languages which is growing even larger with time.",
      "id": "d43f7aa19703bae8344946ca2685b412"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "da5a6beb94948562523e83b1f1b4c482"
    },
    {
      "type": "html",
      "text": "See also [[Qomp Itself]], [[Qomp Itself Reactions]], [[Whatsa Language]]",
      "id": "c51fe5db0c665e9321892ed139dc0bfb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "da5a6beb94948562523e83b1f1b4c482"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]]",
      "id": "570bea3f496f86f31161312d6a65e75e"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?QompLanguage c2.com]",
      "id": "f60ea4abe5a79fe9ff176bbc4d36341b"
    }
  ],
  "journal": [
    {
      "date": 1297645995000,
      "id": "87934252bcf958603e5aaff6d9371479",
      "type": "create",
      "item": {
        "title": "Qomp Language",
        "story": [
          {
            "type": "html",
            "text": "This page describes the Qomp language. ",
            "id": "31dc6decfdd0b0199d8e844089225125"
          },
          {
            "type": "html",
            "text": "\nThe long name for the language is Qompute. In lowercase, qomp is interesting since the \"q\" and the \"p\" in lowercase are mirrors of each other, depending on your font. This odd name for a language was chosen on purpose.",
            "id": "27a2f22ae955ddc36f390473140e4587"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "da5a6beb94948562523e83b1f1b4c482"
          },
          {
            "type": "html",
            "text": "A hello world:",
            "id": "843d776d14d376b919168579404bcb4c"
          },
          {
            "type": "code",
            "text": "  '''prog''' example;\n  '''b'''\n    ln('hello');\n  '''e'''.",
            "id": "dbe46e43437b78b9544233d24af47dea"
          },
          {
            "type": "html",
            "text": " While I really love Qomp, I have trouble with this \"Hello World\" program. When I run it in my [[Qomp Interpreter]], it just returns \"hello\". Is my interpreter at fault? -- [[Qomp User]]",
            "id": "8fab315829d41c9911d13a5528363387"
          },
          {
            "type": "html",
            "text": " Thank you for the bug report, [[Qomp User]]. We shall call it a \"hello\" program in the [[Qomp Manual]]. \"Hi\" would be even more concise... so we may even change it to a \"Hi\" program.",
            "id": "8a6299b6121b5ea65081c634823a230c"
          },
          {
            "type": "html",
            "text": "\nA hi program:",
            "id": "79f0ca6254883ea455e40675ef9f19ed"
          },
          {
            "type": "code",
            "text": "  '''b'''\n    ln('hi');\n  '''e'''.",
            "id": "8cdd895273560d745c722b055cf04ebe"
          },
          {
            "type": "html",
            "text": "\nThe prog directive is optional since it is redundant (standard pascal fanboys will bitch about this). A program file should be named with file extension .QP, while a module (unit) should named with extension .QU (but this isn't mandatory, just recommended file naming scheme).",
            "id": "61693ba0af2780f110180f0fe3788953"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "da5a6beb94948562523e83b1f1b4c482"
          },
          {
            "type": "html",
            "text": "\nSmall program to execute a process and reuse existing modules:",
            "id": "019f32dcf18e0791e96544b79d63188b"
          },
          {
            "type": "code",
            "text": "  '''prog''' execdemo;",
            "id": "2a0b908eabd43d5e21732e6ccd4b7ddb"
          },
          {
            "type": "code",
            "text": "  '''use''' \n    sysutils; // import a PPU module written in another language, fpc\n  \n  '''pro''' err(msg: astr);\n  '''v''' s: astr = 'Error: ';       ''// declare and initialize a string''\n  '''b'''\n    s =. s + msg + ' exiting';  ''// concatenate''\n    ln(s);                      ''// msg written to standard out''\n    halt;                       ''// stops program''\n  '''e''';",
            "id": "455f318b221c45fa6e5ed4f328560905"
          },
          {
            "type": "code",
            "text": "  '''pro''' checkparams;\n  '''b'''\n    '''if''' arg(1) = '' '''do''' err('must specify command line param');\n  '''e''';",
            "id": "943fda4f754a70c09bb3ee4040d704a2"
          },
          {
            "type": "code",
            "text": "  '''b'''\n    checkparams;\n    '''if''' '''not''' executeprocess(arg(1)) '''do''' err('process execute failed');\n  '''e'''.",
            "id": "41f1c5f51252a58690c65e6c58828aef"
          },
          {
            "type": "html",
            "text": "A function looks like:",
            "id": "e9c0525ecf1ce8e885085510e4c6b080"
          },
          {
            "type": "html",
            "text": "<b>fun</b> foo:<br>int;",
            "id": "33a51c8cca5ae152e014f802dc1c3414"
          },
          {
            "type": "code",
            "text": "  '''b'''\n    ln('The result is five');\n    res =. 5;\n  '''e''';",
            "id": "c18ab193fc365cf9aaa42c586e0be303"
          },
          {
            "type": "html",
            "text": "\nOr one can use a <i>return</i> style of programming instead of the result variable.",
            "id": "efeb74a54695388f7da32580f6ffa132"
          },
          {
            "type": "html",
            "text": "<b>fun</b> foo:<br>int;",
            "id": "33a51c8cca5ae152e014f802dc1c3414"
          },
          {
            "type": "code",
            "text": "  '''b'''\n    ln('The result is five');\n    exit(5);\n    ln('This here is not executed! Above is like a return statement in Cee');\n  '''e''';",
            "id": "641d07395f7921f34565945415edb6d9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "da5a6beb94948562523e83b1f1b4c482"
          },
          {
            "type": "html",
            "text": "The most interesting useful (compilable) program is the meaning of life:",
            "id": "e7abcb97ee78dddbc64cc1891675022b"
          },
          {
            "type": "code",
            "text": "  '''prog''' answer;",
            "id": "8eff93798e99b5ef515d3001cb2a462c"
          },
          {
            "type": "html",
            "text": "<b>fun</b> life:<br>cardinal;",
            "id": "be70c53b2815286958b370591908b5a2"
          },
          {
            "type": "code",
            "text": "  '''b''' '''rep''' randomize; life =. random(life) '''til''' life = random\n  '''e''';",
            "id": "d850d20f3689651dd71c6ddc97ecc23e"
          },
          {
            "type": "code",
            "text": "  '''b''' ln(life);\n  '''e'''.",
            "id": "5d7c70a0e30d83e526acfd1bc276bc2e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "da5a6beb94948562523e83b1f1b4c482"
          },
          {
            "type": "html",
            "text": "Information on Qomp will be available at:",
            "id": "a84f79cc128f73bd516509f0547dd1e5"
          },
          {
            "type": "html",
            "text": " [http://z505.com/qomp/index.htm z505.com]",
            "id": "457a8ff50d8d2b9da939d63995cc7c34"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "da5a6beb94948562523e83b1f1b4c482"
          },
          {
            "type": "html",
            "text": "Recent updates: ",
            "id": "fc4ad0f978ce6480a41c40db11e4ba58"
          },
          {
            "type": "html",
            "text": "\nQomp notation/syntax is now revised. After long thinking and [[Big Design Up Front]].. I've decided to keep the round brackets with function(launching) instead of using square brackets. I realized it is better for migrating old Cee and Algol style code (and/or migrating the eyes to read the two codebases). I like the roundness (and so do most people) of function launchers.",
            "id": "5f8162805fe3471e256149dce74ebb26"
          },
          {
            "type": "html",
            "text": "\nThe outln() has been changed to ln() while out() remains. Standard out can be used often, and must remain extremely convenient to use (more convenient and elegant than ugly hacks such as printf(\"\\n\") in Cee. ",
            "id": "86e8a13325180c1d8dfa362066c2bee2"
          },
          {
            "type": "html",
            "text": "\nThe equality sign will be <b>=</b> and will not be <b>==</b>. After reading some more harsh words from well known computing scientists I simply cannot bastardize the language into a Cee like form, confusing equality with assignment. Equality will remain mathematical in qomp, using the <b>=</b> operator. ",
            "id": "4fbf13c38b67f1db6c786e149bd62d90"
          },
          {
            "type": "html",
            "text": "\nAssignment operator is <b>=.</b> (period proceeding equal sign). Slightly different than than Algols <b>:=</b> sign.",
            "id": "a400bf0810d37414c7be141a81d84eec"
          },
          {
            "type": "html",
            "text": " <i>Why have you chosen not to use the (reasonably) familiar <b>:=</b> digraph for assignment?</i> [[Delete When Cooked]]",
            "id": "6d18b32598c2c8ea0bf397dbccc8e00f"
          },
          {
            "type": "html",
            "text": " {I expect he wishes to avoid requirement to tap the 'SHIFT' key as would be required to strike the <b>:</b> character.  Can't say I like his choice for replacement ('a =. 0.0' just looks too strange to me), but this is his language and I'll never need to use it.}",
            "id": "ee3e64778c7280d36b6dab58ccb86489"
          },
          {
            "type": "html",
            "text": " Doesn't look strange to me as we use spaces. In these situations such as s =.'string' it doesn't require a space. On dvorak, qwerty, and some international keyboards the dot is more accessible. The dot is less obtrusive than :=, however I will consider this feedback. ",
            "id": "78f18a9bf89002b7bcd682e7348b142f"
          },
          {
            "type": "html",
            "text": " {Being a little 'obtrusive' is probably a [[Good Thing]] when comes time to visually distinguish assignment from boolean comparison.  If you wanted, you could always take the context-sensitive approach ('=' assignment or test based on whether in procedural statement vs. value-expression) or the [[Color Forth]] approach ('=' red or green based on... ;)}",
            "id": "ffdd31c0d372ef5732848811655889a7"
          },
          {
            "type": "image",
            "url": "http://tbn0.google.com/images?q=tbn:a8TISHxZAwXd0M:http://www.popartuk.com/g/l/lgpp0407%2Bthe-dark-side-of-the-moon-pink-floyd-poster.jpg",
            "text": "tbn0.google.com",
            "id": "9a2a3900146f154b4bd073b5443872a4"
          },
          {
            "type": "html",
            "text": " The context sensitive approach (i.e. without colors or without two signs) makes it confusing I think - as it merges the operator as if it is addressing the same problem. As for [[Color Forth]], it reminds me of a pink floyd album (and maybe some LSD and Acid).  ",
            "id": "8a73196018a991ee5320bc2f80a16488"
          },
          {
            "type": "html",
            "text": " As a point of clarification, the use of color in [[Color Forth]] is precisely to reduce the dependency on context in the language.  Context sensitivity is constrained to the problem's specific wordset only; the language's imposition of context (e.g., are we compiling or interpreting?  What numeric base are we currently in?  Etc.) is removed.  --[[Samuel Falvo]]",
            "id": "87dbb26a139e48ddc8563af061ba7e5a"
          },
          {
            "type": "html",
            "text": " Can I change the color of words in the editor? Or does the compiler pick this up automatically? I.e. the compiler doesn't actually have knowledge of any colors, it is just binary to it.. and can the human control the colors or is it all just passive visual cues (rather than active ones I can adjust)? Can I try [[Color Forth]] to blow my mind, on BSD, Linux, or Windows?",
            "id": "47df3ee8f2512898eb2b62b40d8f277d"
          },
          {
            "type": "html",
            "text": " You control the color of the words in the editor.  The compiler actually takes its cues from your color selection.  More precisely, the compiler is aware of a 4-bit tag on each word, which tells the compiler how to interpret its role in the program.  The editor merely chooses to map tag values to colors.  There are versions of [[Color Forth]] for Linux (not sure about BSD though) and Windows.  I am most familiar with the Linux version, found here: [http://colorforthray.info/XcolorForth.tar.gz colorforthray.info] .  However, I must warn you -- this will be quite foreign.  The default level of abstraction [[Color Forth]] presents to the user will be comparable to programming an Apple II with its built-in ROM monitor, and <i>you</i> don't know its machine language.  If you'd like, I'd be happy to whip up a \"type this program in and run it\" type tutorial, kind of like the computer magazines from the 80s, with some dialog explaining what I'm doing, and why. --[[Samuel Falvo]]",
            "id": "aaf09f7dc50ac52cec9887b3f725af9e"
          },
          {
            "type": "html",
            "text": "\nThe reserved words <b>prc</b> and <b>fnc</b> were changed to <b>pro</b> and <b>fun</b> during these past months. Most often used reserved words in Qomp are usually 1 or 3 characters long so they line up with indentations consistently (as opposed to having some <b>even</b> and some <b>odd</b> length keywords, which screws up indentation.. trust me, [[Been There Done That]] in bulky Pascal with its notation/syntax).",
            "id": "3dbd4196b979f8476ee3ab378e487ac3"
          },
          {
            "type": "html",
            "text": "\nRepeat loops use <b>rep</b> and <b>til</b> as reserved words (repeat until).",
            "id": "2ad423bf5970656931b63ab9e20a0fc3"
          },
          {
            "type": "html",
            "text": "\nDashes in identifiers - I heavily debated with myself about this - dashes make it harder to interface with C libraries (lisp uses a macro to map dashes to underscores, for example). As of 2008, I've decided to release the first compiler without dashes in identifiers to keep the language more math-like and more interface-able with Cee language. This may be permanent.",
            "id": "3f3ecbaa784d218b92ba63d8a3714048"
          },
          {
            "type": "html",
            "text": "\nAccess to command line parameters is via the arg() function, to make it simple.. similar to ARGV or paramStr() in other languages.",
            "id": "925fafd3e9423750c000e727929fa517"
          },
          {
            "type": "html",
            "text": "\nI'll have a release of the first Qomp compiler very soon. I have to make an installer for the compiler still yet.",
            "id": "7b3d0bced1324a6635ebf4da65a53850"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "da5a6beb94948562523e83b1f1b4c482"
          },
          {
            "type": "html",
            "text": "<b>Syntax And Notation Definitions?</b>",
            "id": "dd2146a74a5fd359fa607b34b5a904e9"
          },
          {
            "type": "html",
            "text": "\nWhile designing Qomp, I came across the idea that maybe people (including myself) confuse Syntax with Notation (and with words) - or maybe syntax and notation are so related that we can discuss this in a [[Whatsa Language]] pissing match ;-).  I looked up the word notation and found that it means symbols, but not neccessarily words (since words, are less symbolic - but what about chopped down words?)''",
            "id": "661a3072a54de3a6df8b70bd53e0c7f2"
          },
          {
            "type": "html",
            "text": "\nAnyway, semantics, syntax, notation - all refer and relate to each other indirectly/directly during discussions. Computer languages seen to be <i>more</i> than just languages (they aren't languages?). They are almost like communities/systems/notations/syntaxes/semantics/words/english combined. ",
            "id": "d11c82fbe83fc988a935f46c6aab4337"
          },
          {
            "type": "html",
            "text": "\nMy conclusion is: a computer programming language is not just a language! It's more than that. ",
            "id": "4ee1db59dda065ae45dbbcbcc347a7de"
          },
          {
            "type": "html",
            "text": "\nWhen people refer to syntax - it seems many times they are also referring (maybe mistakenly, including myself) to notation <i>and</i> words too. For example, I now consider chopped down reserved words a <i>notation</i> and some words just words (not notation, as full words aren't notation - maybe). I suppose <b>b</b> and <b>e</b> are notation, whereas a word like <b>while</b> is a word. But really is this notation too? It's a word, not a notation. Hmm. Is not all this really about syntax as a whole? Possibly, however syntax seems more worried about sentence structure and relationships amongst the words,  rather than the actual words and symbols used. Still, people generally seem to group a lot of things into the <i>syntax</i> group, just by habit, including myself. It's a nitpick - and hard to draw the lines - because one could consider <b>b</b> a reserved word, or they could consider it a symbol, letter, or notation. The notation <b>b</b> also happens to semantically mean that this is the beginning of a code block - but one could redefine it in some languages to mean something semantically different (overload it). Then the language may have redefine-able semantics. Syntax, notation, words, letters, symbols, English, sentences, are all related in one big [[Turd Fan Collision]].",
            "id": "bd38e0b98da3bf50df30541851635716"
          },
          {
            "type": "html",
            "text": "<i>Unless the distinction between 'syntax' and 'notation' is somehow relevant to how we produce and process a particular programming language's source code, most discussion on the matter is moot: using the two distinct words won't allow you to learn anything new or impart greater information, and any distinction you attempt to make would likely be arbitrary, informal, and confusing (much as you seem to be experiencing when attempting to make the distinction regarding Qomp).  My own recommendation is to focus on process and product - pick and use the words that allow you to make formal distinctions, such as 'syntax' referring to how structure is grabbed out of source-code by a distinct 'parse' phase (in languages that possess such a phase), and 'semantics' referring to how these structures are then evaluated or interpreted.  Perhaps if a particular language had a formal concept of 'words' being distinct from other symbols, or supported distinct modes of writing for distinct purposes, you'd find good opportunity to distinguish 'syntax' from 'notation'.  At the moment, I'm not seeing much value in it.</i>",
            "id": "0eb4637a7ac2b306f94e08ab7ab82941"
          },
          {
            "type": "html",
            "text": "\nSyntax seems to be more sentence/grammar related - words are used in sentences but do not seem to make up syntax. In programming and music, notations and symbols are used - in addition to words. So add another one to the pot: symbols.",
            "id": "74589de0675c773af364eda38b847d21"
          },
          {
            "type": "html",
            "text": "\nQuote",
            "id": "10c275b00475395104d60d6ff361d306"
          },
          {
            "type": "html",
            "text": " Syntax: <i>\"studies of the rules for forming admissible sentences\"</i> -- wordnet.princeton.edu/perl/webwn",
            "id": "e38b87c12a19de1c83f43bf5ebd7b7c6"
          },
          {
            "type": "html",
            "text": " Syntax: <i>\"the grammatical arrangement of words in sentences\"</i> -- Google Define",
            "id": "153fe604f7109dd26fd022ea7dc97abd"
          },
          {
            "type": "html",
            "text": "<i>Can you find an example of a programming language where 'symbols' are formally and meaningfully distinguished from 'words' at the parser level?  I'm curious as to what value you see in this distinction within the context of existing programming languages.</i>",
            "id": "9b7282d08a958eb95c14acf3fd2a0ea2"
          },
          {
            "type": "html",
            "text": "\nIn the documentation for humans, we many times see languages defined with their reserved words and symbols (== - + *).  Sometimes reserved words can be reused in code as identifiers where symbols cannot. Sometimes a reserved word looks much like a symbol, such as <b>b</b> and <b>e</b>. It's either a reserved letter, or kind of a symbol, or a bit of both. ",
            "id": "63c7eaa61efa581b5c42c889e8c20075"
          },
          {
            "type": "html",
            "text": "\nTo add more confusion: punctuation could be another term to describe parts of the programming language. For example: a comma, dot, or curly brace could be considered <b>programming punctuation</b>, but I can't recall hearing that term coined before (although it may be out there). ",
            "id": "b0f69b727a8a9f1d71df4259d93c85bb"
          },
          {
            "type": "html",
            "text": "\nThe point is - there are not perfectly clear [[Once And Only Once]] style definitions and terminology for the complex topic of language. What we should call this, or what we should call that isn't always crystal clear. Sometimes we have an overlap. Punctuation involves symbols, and/or vice versa. Words can act like symbols. Letters can too. But they don't have to. Sometimes they could, sometimes they might not.",
            "id": "17cc4e0b0e371a3f39a2d236effa930c"
          },
          {
            "type": "html",
            "text": "\nHere is a page about Eiffel symbols vs reserved words:",
            "id": "7621a51c3308cc027dab2039fa6ffa5a"
          },
          {
            "type": "html",
            "text": " [http://www.gobosoft.com/eiffel/syntax/notation.html www.gobosoft.com]",
            "id": "023384ba4648851b965dc01e96347bf8"
          },
          {
            "type": "html",
            "text": "\nA short form word such as <b>MOD</b> or <b>DIV</b> could even be considered a word and a symbol. However, when we parse someFuncMod and someFuncDiv the compiler should not choke up on the Div and Mod in the identifier - because they aren't really symbols - they are just letters that make up a word, which should be allowed in an identifier.  someFunc* and someFunc+ would cause a compile error since a word cannot be composed of symbols (yet it can contain DIV and MOD, and yet an identifier could contain underscore \"characters\" or \"symbols\").",
            "id": "3b2e3325ee33eb8883d0d8087d7005e6"
          },
          {
            "type": "html",
            "text": "\nThe distinctions may rather academic and useless when it comes down to a [[Just Do It]] attitude, or it may have something to do with the growth of the large English languages which is growing even larger with time.",
            "id": "d43f7aa19703bae8344946ca2685b412"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "da5a6beb94948562523e83b1f1b4c482"
          },
          {
            "type": "html",
            "text": "See also [[Qomp Itself]], [[Qomp Itself Reactions]], [[Whatsa Language]]",
            "id": "c51fe5db0c665e9321892ed139dc0bfb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "da5a6beb94948562523e83b1f1b4c482"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]]",
            "id": "570bea3f496f86f31161312d6a65e75e"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?QompLanguage c2.com]",
            "id": "f60ea4abe5a79fe9ff176bbc4d36341b"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707812101729
    }
  ]
}