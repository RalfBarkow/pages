{
  "title": "Emacs Overlay for Nixpkgs",
  "story": [
    {
      "type": "paragraph",
      "id": "e65ae7dc2430396b",
      "text": "I want to update Emacs Version 27.2 (9.0) and use Emacs Overlay for Nixpkgs [https://github.com/nix-community/emacs-overlay github], [https://www.reddit.com/r/NixOS/comments/oub1gm/how_to_get_emacs_28/ reddit], [https://nixos.wiki/wiki/Overlays nixos.wiki], [https://nixos.org/manual/nixpkgs/stable/#chap-overlays manual]"
    },
    {
      "type": "paragraph",
      "id": "84a5a1c7b6e7c9d5",
      "text": "⇒  [[Nix on macOS]] > Upgrading Nix"
    },
    {
      "type": "markdown",
      "id": "1311eeefd6ac7d57",
      "text": "\n"
    },
    {
      "type": "markdown",
      "id": "aeaede8d18bac80e",
      "text": "See *Emacs from Git and latest (including pre-releases)*. [https://github.com/nix-community/emacs-overlay#emacs-from-git-and-latest-including-pre-releases github]\n>  `emacsGit` is built from the latest master branch and `emacsUnstable` is built from the latest tag.\n\nFurthermore we provide emacs compiled with the native compilation backend enabled under the attributes `emacsNativeComp` (built from the latest tag) and `emacsGitNativeComp` (built from the latest master branch).\n"
    },
    {
      "type": "markdown",
      "id": "bd6f4ec2a3ba2c8c",
      "text": "`~/.nixpkgs/darwin-configuration.nix`:"
    },
    {
      "type": "code",
      "id": "a8d5f581440a9101",
      "text": "{\n  # Emacs Overlay\n  services.emacs.package = pkgs.emacsNativeComp;\n\n  nixpkgs.overlays = [\n    (import (builtins.fetchGit {\n      url = \"https://github.com/nix-community/emacs-overlay.git\";\n      ref = \"master\";\n      rev = \"7a5353c3d27749912df89d1083e9b675f70accb4\"; # change the revision\n    }))\n  ];\n\n  environment.systemPackages = with pkgs; [\n    emacsNativeComp\n  ];\n}"
    },
    {
      "type": "paragraph",
      "id": "16e3bcec517ff16b",
      "text": "Which revision?"
    },
    {
      "type": "paragraph",
      "id": "8aa3f59d4f2829e6",
      "text": "https://github.com/nix-community/emacs-overlay/commit/bfc8f6edcb7bcf3cf24e4a7199b3f6fed96aaecf"
    },
    {
      "type": "paragraph",
      "id": "173722cecc9eff88",
      "text": "7a5353c3d27749912df89d1083e9b675f70accb4"
    },
    {
      "type": "paragraph",
      "id": "b27cdd48ab5dbc44",
      "text": "Native compilation and \"pure\" GTK in Emacs. [http://www.cesarolea.com/posts/emacs-native-compile/ post]"
    },
    {
      "type": "markdown",
      "id": "5c2841f0e55d067b",
      "text": "# Native compilation\nWhile the pgtk frontend of Emacs can make Emacs frames feel faster and more responsive, native compilation simply turbocharges elisp code execution. Native compilation, as the name implies, compiles all the elisp into native binaries that Emacs can dynamically load and execute. In benchmarks this is from 2.3x up to 42x faster(!!) with respect to the equivalent byte-code execution.\n\nIn practice, the end result is a faster Emacs experience overall. Everything is snappier, small lags with things like bringing up a buffer list, switching buffers, searching for candidates, autocompletion, using the agenda, all gone."
    },
    {
      "type": "paragraph",
      "id": "528168fabb6b5ee3",
      "text": "Bringing GNU Emacs to Native Code. [https://arxiv.org/pdf/2004.02504.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "c3f5383c214a5983",
      "text": "> **Abstract**. Emacs Lisp (Elisp) is the Lisp dialect used by the Emacs text editor family. GNU Emacs can currently execute Elisp code either interpreted or byte-interpreted after it has been compiled to byte-code. In this work we discuss the implementation of an optimizing compiler approach for Elisp targeting native code. The native compiler employs the byte-compiler’s internal representation as input and exploits libgccjit to achieve code generation using the GNU Compiler Collection (GCC) infrastructure. Generated executables are stored as binary files and can be loaded and unloaded dynamically. Most of the functionality of the compiler is written in Elisp itself, including several optimization passes, paired with a C back-end to interface with the GNU Emacs core and libgccjit. Though still a work in progress, our implementation is able to bootstrap a functional Emacs and compile all lexically scoped Elisp files, including the whole GNU Emacs Lisp Package Archive (ELPA). Native-compiled Elisp shows an increase of performance ranging from 2.3x up to 42x with respect to the equivalent byte-code, a a measured over a set of small benchmarks"
    },
    {
      "type": "video",
      "id": "ff8fe9532a988c4a",
      "text": "YOUTUBE zKHYZOAc_bQ\nTalk, [https://www.european-lisp-symposium.org/static/2020/corallo-nassi-manca-slides.pdf slides], Proceedings [https://www.european-lisp-symposium.org/static/proceedings/2020.pdf pdf]"
    },
    {
      "type": "pagefold",
      "id": "6dfa5b4b2f7f1361",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "cd4b85c054d1eea0",
      "text": "Building GNU Emacs with pure GTK and native compilation [https://deathwish.info/2020/08/01/pgtk-nativecomp/ post]"
    },
    {
      "type": "paragraph",
      "id": "2d1a0420442b52de",
      "text": "Emacs native-comp on CentOS 7 [https://ddavis.io/posts/emacs-native-centos7/ post]"
    },
    {
      "type": "paragraph",
      "id": "23289c9b2248465f",
      "text": "Emacs - Nix,  Functional Programming Zulip Chat Archive [https://funprog.srid.ca/nix/emacs.html page]"
    },
    {
      "type": "paragraph",
      "id": "0a3899ff63e1c622",
      "text": "Home-manager & spacemacs. [https://discourse.nixos.org/t/home-manager-spacemacs/8033 discourse]"
    },
    {
      "type": "markdown",
      "id": "2b5173edfa089278",
      "text": "> I used a link farm to allow spacemacs to clone it’s dependencies (note it was a while ago that I cloned this):"
    },
    {
      "type": "code",
      "id": "567eb1b272d93b05",
      "text": "    home.file.\".emacs.d\" = {\n      # don't make the directory read only so that impure melpa can still happen\n      # for now\n      recursive = true;\n      source = pkgs.fetchFromGitHub {\n        owner = \"syl20bnr\";\n        repo = \"spacemacs\";\n        rev = \"756e204d250507ad7137ecbcd2ab4feaedf68b63\";\n        sha256 = \"sha256-M7i67NVD0DlmABcoBboN8VWwnzWiXXRkK1k44ns6Yw4=\";\n      };\n"
    },
    {
      "type": "markdown",
      "id": "39d197df22bf3da6",
      "text": "`fetchfromgithub` [https://nixos.org/manual/nixpkgs/stable/#fetchfromgithub manual]"
    },
    {
      "type": "markdown",
      "id": "192bc3546c0c4c1b",
      "text": "> fetchFromGitHub expects four arguments. `owner` is a string corresponding to the GitHub user or organization that controls this repository. `repo` corresponds to the name of the software repository. These are located at the top of every GitHub HTML page as owner/repo. `rev` corresponds to the Git commit hash or tag (e.g v1.0) that will be downloaded from Git. Finally, `sha256` corresponds to the hash of the extracted directory. Again, other hash algorithms are also available but sha256 is currently preferred."
    },
    {
      "type": "paragraph",
      "id": "14341822bdac07c2",
      "text": "Get sha256 hash on a directory.  [https://worklifenotes.com/2020/03/05/get-sha256-hash-on-a-directory/ post]"
    },
    {
      "type": "paragraph",
      "id": "83ccd0bda2eef92e",
      "text": "Emacs infrastructure tracking issue #66303 [https://github.com/NixOS/nixpkgs/issues/66303 github]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Emacs Overlay for Nixpkgs",
        "story": []
      },
      "date": 1653632406709
    },
    {
      "item": {
        "type": "factory",
        "id": "e65ae7dc2430396b"
      },
      "id": "e65ae7dc2430396b",
      "type": "add",
      "date": 1653632453372
    },
    {
      "type": "edit",
      "id": "e65ae7dc2430396b",
      "item": {
        "type": "paragraph",
        "id": "e65ae7dc2430396b",
        "text": "We want to update Emacs Overlay for Nixpkgs"
      },
      "date": 1653632467986
    },
    {
      "type": "edit",
      "id": "e65ae7dc2430396b",
      "item": {
        "type": "paragraph",
        "id": "e65ae7dc2430396b",
        "text": "We want to update Emacs Version 27.2 (9.0) and found Emacs Overlay for Nixpkgs"
      },
      "date": 1653632501900
    },
    {
      "type": "edit",
      "id": "e65ae7dc2430396b",
      "item": {
        "type": "paragraph",
        "id": "e65ae7dc2430396b",
        "text": "We want to update Emacs Version 27.2 (9.0) and found Emacs Overlay for Nixpkgs [https://github.com/nix-community/emacs-overlay github]"
      },
      "date": 1653632513316
    },
    {
      "type": "edit",
      "id": "e65ae7dc2430396b",
      "item": {
        "type": "paragraph",
        "id": "e65ae7dc2430396b",
        "text": "We want to update Emacs Version 27.2 (9.0) and found Emacs Overlay for Nixpkgs [https://github.com/nix-community/emacs-overlay github], [https://www.reddit.com/r/NixOS/comments/oub1gm/how_to_get_emacs_28/ reddit]"
      },
      "date": 1653632528810
    },
    {
      "item": {
        "type": "factory",
        "id": "84a5a1c7b6e7c9d5"
      },
      "id": "84a5a1c7b6e7c9d5",
      "type": "add",
      "after": "e65ae7dc2430396b",
      "date": 1653632578921
    },
    {
      "type": "edit",
      "id": "84a5a1c7b6e7c9d5",
      "item": {
        "type": "paragraph",
        "id": "84a5a1c7b6e7c9d5",
        "text": "[[Nix on macOS]]"
      },
      "date": 1653632589695
    },
    {
      "type": "edit",
      "id": "84a5a1c7b6e7c9d5",
      "item": {
        "type": "paragraph",
        "id": "84a5a1c7b6e7c9d5",
        "text": "⇒  [[Nix on macOS]]"
      },
      "date": 1653632595508
    },
    {
      "item": {
        "type": "factory",
        "id": "6eb7d31c3329574e"
      },
      "id": "6eb7d31c3329574e",
      "type": "add",
      "after": "84a5a1c7b6e7c9d5",
      "date": 1653632661399
    },
    {
      "type": "edit",
      "id": "6eb7d31c3329574e",
      "item": {
        "type": "paragraph",
        "id": "6eb7d31c3329574e",
        "text": "what is the difference between emacsGit and emacsGcc?"
      },
      "date": 1653632665717
    },
    {
      "type": "edit",
      "id": "6eb7d31c3329574e",
      "item": {
        "type": "paragraph",
        "id": "6eb7d31c3329574e",
        "text": "What is the difference between emacsGit and emacsGcc?"
      },
      "date": 1653632670337
    },
    {
      "item": {
        "type": "factory",
        "id": "1311eeefd6ac7d57"
      },
      "id": "1311eeefd6ac7d57",
      "type": "add",
      "after": "6eb7d31c3329574e",
      "date": 1653632678616
    },
    {
      "type": "edit",
      "id": "1311eeefd6ac7d57",
      "item": {
        "type": "paragraph",
        "id": "1311eeefd6ac7d57",
        "text": "emacsGit is latest commits from master, but the overlay doesn't has native compilation enabled for it. emacsGcc is emacs 28 with native compilation enabled."
      },
      "date": 1653632680060
    },
    {
      "type": "edit",
      "id": "1311eeefd6ac7d57",
      "item": {
        "type": "markdown",
        "id": "1311eeefd6ac7d57",
        "text": "emacsGit is latest commits from master, but the overlay doesn't has native compilation enabled for it. emacsGcc is emacs 28 with native compilation enabled."
      },
      "date": 1653632681930
    },
    {
      "item": {
        "type": "factory",
        "id": "950d8893ad5706ec"
      },
      "id": "950d8893ad5706ec",
      "type": "add",
      "after": "1311eeefd6ac7d57",
      "date": 1653633124468
    },
    {
      "type": "edit",
      "id": "950d8893ad5706ec",
      "item": {
        "type": "paragraph",
        "id": "950d8893ad5706ec",
        "text": "– Overlays [https://nixos.wiki/wiki/Overlays nixos.wiki]"
      },
      "date": 1653633146457
    },
    {
      "type": "edit",
      "id": "950d8893ad5706ec",
      "item": {
        "type": "paragraph",
        "id": "950d8893ad5706ec",
        "text": "– Overlays [https://nixos.wiki/wiki/Overlays nixos.wiki], [https://nixos.org/manual/nixpkgs/stable/#chap-overlays manual]"
      },
      "date": 1653633190703
    },
    {
      "item": {
        "type": "factory",
        "id": "a8d5f581440a9101"
      },
      "id": "a8d5f581440a9101",
      "type": "add",
      "after": "950d8893ad5706ec",
      "date": 1653633948057
    },
    {
      "type": "edit",
      "id": "a8d5f581440a9101",
      "item": {
        "type": "code",
        "id": "a8d5f581440a9101",
        "text": "{\n  services.emacs.package = pkgs.emacsPgtkGcc;\n\n  nixpkgs.overlays = [\n    (import (builtins.fetchGit {\n      url = \"https://github.com/nix-community/emacs-overlay.git\";\n      ref = \"master\";\n      rev = \"bfc8f6edcb7bcf3cf24e4a7199b3f6fed96aaecf\"; # change the revision\n    }))\n  ];\n\n  environment.systemPackages = with pkgs; [\n    emacsPgtkGcc\n  ];\n}"
      },
      "date": 1653633950033
    },
    {
      "type": "add",
      "id": "bd6f4ec2a3ba2c8c",
      "item": {
        "type": "paragraph",
        "id": "bd6f4ec2a3ba2c8c",
        "text": "`configuration.nix`:"
      },
      "after": "950d8893ad5706ec",
      "date": 1653633970697
    },
    {
      "type": "edit",
      "id": "bd6f4ec2a3ba2c8c",
      "item": {
        "type": "markdown",
        "id": "bd6f4ec2a3ba2c8c",
        "text": "`configuration.nix`:"
      },
      "date": 1653633972591
    },
    {
      "item": {
        "type": "factory",
        "id": "16e3bcec517ff16b"
      },
      "id": "16e3bcec517ff16b",
      "type": "add",
      "after": "a8d5f581440a9101",
      "date": 1653634130147
    },
    {
      "type": "edit",
      "id": "16e3bcec517ff16b",
      "item": {
        "type": "paragraph",
        "id": "16e3bcec517ff16b",
        "text": "Which revision?"
      },
      "date": 1653634137039
    },
    {
      "item": {
        "type": "factory",
        "id": "8aa3f59d4f2829e6"
      },
      "id": "8aa3f59d4f2829e6",
      "type": "add",
      "after": "16e3bcec517ff16b",
      "date": 1653634567792
    },
    {
      "type": "edit",
      "id": "8aa3f59d4f2829e6",
      "item": {
        "type": "paragraph",
        "id": "8aa3f59d4f2829e6",
        "text": "https://github.com/nix-community/emacs-overlay/commit/bfc8f6edcb7bcf3cf24e4a7199b3f6fed96aaecf"
      },
      "date": 1653634569778
    },
    {
      "type": "add",
      "id": "173722cecc9eff88",
      "item": {
        "type": "paragraph",
        "id": "173722cecc9eff88",
        "text": "7a5353c3d27749912df89d1083e9b675f70accb4"
      },
      "after": "8aa3f59d4f2829e6",
      "date": 1653634977473
    },
    {
      "type": "edit",
      "id": "bd6f4ec2a3ba2c8c",
      "item": {
        "type": "markdown",
        "id": "bd6f4ec2a3ba2c8c",
        "text": "`darwin-configuration.nix`:"
      },
      "date": 1653637541907
    },
    {
      "item": {
        "type": "factory",
        "id": "b27cdd48ab5dbc44"
      },
      "id": "b27cdd48ab5dbc44",
      "type": "add",
      "after": "173722cecc9eff88",
      "date": 1653637627209
    },
    {
      "type": "edit",
      "id": "b27cdd48ab5dbc44",
      "item": {
        "type": "paragraph",
        "id": "b27cdd48ab5dbc44",
        "text": "Native compilation and \"pure\" GTK in Emacs"
      },
      "date": 1653637630015
    },
    {
      "type": "edit",
      "id": "b27cdd48ab5dbc44",
      "item": {
        "type": "paragraph",
        "id": "b27cdd48ab5dbc44",
        "text": "Native compilation and \"pure\" GTK in Emacs. [http://www.cesarolea.com/posts/emacs-native-compile/ post]"
      },
      "date": 1653637643668
    },
    {
      "item": {
        "type": "factory",
        "id": "5c2841f0e55d067b"
      },
      "id": "5c2841f0e55d067b",
      "type": "add",
      "after": "b27cdd48ab5dbc44",
      "date": 1653637678549
    },
    {
      "type": "edit",
      "id": "5c2841f0e55d067b",
      "item": {
        "type": "paragraph",
        "id": "5c2841f0e55d067b",
        "text": "Native compilation\nWhile the pgtk frontend of Emacs can make Emacs frames feel faster and more responsive, native compilation simply turbocharges elisp code execution. Native compilation, as the name implies, compiles all the elisp into native binaries that Emacs can dynamically load and execute. In benchmarks this is from 2.3x up to 42x faster(!!) with respect to the equivalent byte-code execution.\n\nIn practice, the end result is a faster Emacs experience overall. Everything is snappier, small lags with things like bringing up a buffer list, switching buffers, searching for candidates, autocompletion, using the agenda, all gone."
      },
      "date": 1653637680421
    },
    {
      "type": "edit",
      "id": "5c2841f0e55d067b",
      "item": {
        "type": "paragraph",
        "id": "5c2841f0e55d067b",
        "text": "# Native compilation\nWhile the pgtk frontend of Emacs can make Emacs frames feel faster and more responsive, native compilation simply turbocharges elisp code execution. Native compilation, as the name implies, compiles all the elisp into native binaries that Emacs can dynamically load and execute. In benchmarks this is from 2.3x up to 42x faster(!!) with respect to the equivalent byte-code execution.\n\nIn practice, the end result is a faster Emacs experience overall. Everything is snappier, small lags with things like bringing up a buffer list, switching buffers, searching for candidates, autocompletion, using the agenda, all gone."
      },
      "date": 1653637696098
    },
    {
      "type": "edit",
      "id": "5c2841f0e55d067b",
      "item": {
        "type": "markdown",
        "id": "5c2841f0e55d067b",
        "text": "# Native compilation\nWhile the pgtk frontend of Emacs can make Emacs frames feel faster and more responsive, native compilation simply turbocharges elisp code execution. Native compilation, as the name implies, compiles all the elisp into native binaries that Emacs can dynamically load and execute. In benchmarks this is from 2.3x up to 42x faster(!!) with respect to the equivalent byte-code execution.\n\nIn practice, the end result is a faster Emacs experience overall. Everything is snappier, small lags with things like bringing up a buffer list, switching buffers, searching for candidates, autocompletion, using the agenda, all gone."
      },
      "date": 1653637697146
    },
    {
      "item": {
        "type": "factory",
        "id": "528168fabb6b5ee3"
      },
      "id": "528168fabb6b5ee3",
      "type": "add",
      "after": "5c2841f0e55d067b",
      "date": 1653637732323
    },
    {
      "type": "edit",
      "id": "528168fabb6b5ee3",
      "item": {
        "type": "paragraph",
        "id": "528168fabb6b5ee3",
        "text": "Bringing GNU Emacs to Native Code"
      },
      "date": 1653637735480
    },
    {
      "type": "edit",
      "id": "528168fabb6b5ee3",
      "item": {
        "type": "paragraph",
        "id": "528168fabb6b5ee3",
        "text": "Bringing GNU Emacs to Native Code. [https://arxiv.org/pdf/2004.02504.pdf pdf]"
      },
      "date": 1653637746938
    },
    {
      "item": {
        "type": "factory",
        "id": "c3f5383c214a5983"
      },
      "id": "c3f5383c214a5983",
      "type": "add",
      "after": "528168fabb6b5ee3",
      "date": 1653637798431
    },
    {
      "type": "edit",
      "id": "c3f5383c214a5983",
      "item": {
        "type": "paragraph",
        "id": "c3f5383c214a5983",
        "text": "> **Abstract**. Emacs Lisp (Elisp) is the Lisp dialect used by the Emacs text editor\nfamily. GNU Emacs can currently execute Elisp code either inter-\npreted or byte-interpreted after it has been compiled to byte-code.\nIn this work we discuss the implementation of an optimizing com-\npiler approach for Elisp targeting native code. The native compiler\nemploys the byte-compiler’s internal representation as input and\nexploits libgccjit to achieve code generation using the GNU Com-\npiler Collection (GCC) infrastructure. Generated executables are\nstored as binary files and can be loaded and unloaded dynamically.\nMost of the functionality of the compiler is written in Elisp itself,\nincluding several optimization passes, paired with a C back-end\nto interface with the GNU Emacs core and libgccjit. Though still a\nwork in progress, our implementation is able to bootstrap a func-\ntional Emacs and compile all lexically scoped Elisp files, including\nthe whole GNU Emacs Lisp Package Archive (ELPA) [6]. Native-\ncompiled Elisp shows an increase of performance ranging from 2.3x\nup to 42x with respect to the equivalent byte-code, measured over\na set of small benchmarks"
      },
      "date": 1653637807886
    },
    {
      "type": "edit",
      "id": "c3f5383c214a5983",
      "item": {
        "type": "markdown",
        "id": "c3f5383c214a5983",
        "text": "> **Abstract**. Emacs Lisp (Elisp) is the Lisp dialect used by the Emacs text editor\nfamily. GNU Emacs can currently execute Elisp code either inter-\npreted or byte-interpreted after it has been compiled to byte-code.\nIn this work we discuss the implementation of an optimizing com-\npiler approach for Elisp targeting native code. The native compiler\nemploys the byte-compiler’s internal representation as input and\nexploits libgccjit to achieve code generation using the GNU Com-\npiler Collection (GCC) infrastructure. Generated executables are\nstored as binary files and can be loaded and unloaded dynamically.\nMost of the functionality of the compiler is written in Elisp itself,\nincluding several optimization passes, paired with a C back-end\nto interface with the GNU Emacs core and libgccjit. Though still a\nwork in progress, our implementation is able to bootstrap a func-\ntional Emacs and compile all lexically scoped Elisp files, including\nthe whole GNU Emacs Lisp Package Archive (ELPA) [6]. Native-\ncompiled Elisp shows an increase of performance ranging from 2.3x\nup to 42x with respect to the equivalent byte-code, measured over\na set of small benchmarks"
      },
      "date": 1653637811050
    },
    {
      "type": "edit",
      "id": "c3f5383c214a5983",
      "item": {
        "type": "markdown",
        "id": "c3f5383c214a5983",
        "text": "> **Abstract**. Emacs Lisp (Elisp) is the Lisp dialect used by the Emacs text editor\nfamily. GNU Emacs can currently execute Elisp code either inter-\npreted or byte-interpreted after it has been compiled to byte-code.\nIn this work we discuss the implementation of an optimizing com-\npiler approach for Elisp targeting native code. The native compiler\nemploys the byte-compiler’s internal representation as input and\nexploits libgccjit to achieve code generation using the GNU Com-\npiler Collection (GCC) infrastructure. Generated executables are\nstored as binary files and can be loaded and unloaded dynamically. Most of the functionality of the compiler is written in Elisp itself, including several optimization passes, paired with a C back-end to interface with the GNU Emacs core and libgccjit. Though still a work in progress, our implementation is able to bootstrap a functional Emacs and compile all lexically scoped Elisp files, including the whole GNU Emacs Lisp Package Archive (ELPA) [6]. Native-compiled Elisp shows an increase of performance ranging from 2.3x up to 42x with respect to the equivalent byte-code, a a measured over a set of small benchmarks"
      },
      "date": 1653637869270
    },
    {
      "type": "edit",
      "id": "c3f5383c214a5983",
      "item": {
        "type": "markdown",
        "id": "c3f5383c214a5983",
        "text": "> **Abstract**. Emacs Lisp (Elisp) is the Lisp dialect used by the Emacs text editor family. GNU Emacs can currently execute Elisp code either interpreted or byte-interpreted after it has been compiled to byte-code. In this work we discuss the implementation of an optimizing compiler approach for Elisp targeting native code. The native compiler employs the byte-compiler’s internal representation as input and exploits libgccjit to achieve code generation using the GNU Compiler Collection (GCC) infrastructure. Generated executables are stored as binary files and can be loaded and unloaded dynamically. Most of the functionality of the compiler is written in Elisp itself, including several optimization passes, paired with a C back-end to interface with the GNU Emacs core and libgccjit. Though still a work in progress, our implementation is able to bootstrap a functional Emacs and compile all lexically scoped Elisp files, including the whole GNU Emacs Lisp Package Archive (ELPA) [6]. Native-compiled Elisp shows an increase of performance ranging from 2.3x up to 42x with respect to the equivalent byte-code, a a measured over a set of small benchmarks"
      },
      "date": 1653637919760
    },
    {
      "type": "edit",
      "id": "c3f5383c214a5983",
      "item": {
        "type": "markdown",
        "id": "c3f5383c214a5983",
        "text": "> **Abstract**. Emacs Lisp (Elisp) is the Lisp dialect used by the Emacs text editor family. GNU Emacs can currently execute Elisp code either interpreted or byte-interpreted after it has been compiled to byte-code. In this work we discuss the implementation of an optimizing compiler approach for Elisp targeting native code. The native compiler employs the byte-compiler’s internal representation as input and exploits libgccjit to achieve code generation using the GNU Compiler Collection (GCC) infrastructure. Generated executables are stored as binary files and can be loaded and unloaded dynamically. Most of the functionality of the compiler is written in Elisp itself, including several optimization passes, paired with a C back-end to interface with the GNU Emacs core and libgccjit. Though still a work in progress, our implementation is able to bootstrap a functional Emacs and compile all lexically scoped Elisp files, including the whole GNU Emacs Lisp Package Archive (ELPA). Native-compiled Elisp shows an increase of performance ranging from 2.3x up to 42x with respect to the equivalent byte-code, a a measured over a set of small benchmarks"
      },
      "date": 1653637997607
    },
    {
      "item": {
        "type": "factory",
        "id": "6dfa5b4b2f7f1361"
      },
      "id": "6dfa5b4b2f7f1361",
      "type": "add",
      "after": "c3f5383c214a5983",
      "date": 1653638708255
    },
    {
      "type": "edit",
      "id": "6dfa5b4b2f7f1361",
      "item": {
        "type": "pagefold",
        "id": "6dfa5b4b2f7f1361",
        "text": "~"
      },
      "date": 1653638713532
    },
    {
      "item": {
        "type": "factory",
        "id": "0a3899ff63e1c622"
      },
      "id": "0a3899ff63e1c622",
      "type": "add",
      "after": "6dfa5b4b2f7f1361",
      "date": 1653638715139
    },
    {
      "type": "edit",
      "id": "0a3899ff63e1c622",
      "item": {
        "type": "paragraph",
        "id": "0a3899ff63e1c622",
        "text": "Home-manager & spacemacs"
      },
      "date": 1653638718340
    },
    {
      "type": "edit",
      "id": "0a3899ff63e1c622",
      "item": {
        "type": "paragraph",
        "id": "0a3899ff63e1c622",
        "text": "Home-manager & spacemacs. [https://discourse.nixos.org/t/home-manager-spacemacs/8033 discourse]"
      },
      "date": 1653638735329
    },
    {
      "item": {
        "type": "factory",
        "id": "23289c9b2248465f"
      },
      "id": "23289c9b2248465f",
      "type": "add",
      "after": "0a3899ff63e1c622",
      "date": 1653647531059
    },
    {
      "type": "edit",
      "id": "23289c9b2248465f",
      "item": {
        "type": "paragraph",
        "id": "23289c9b2248465f",
        "text": "https://funprog.srid.ca/nix/emacs.html"
      },
      "date": 1653647534520
    },
    {
      "type": "edit",
      "id": "23289c9b2248465f",
      "item": {
        "type": "paragraph",
        "id": "23289c9b2248465f",
        "text": " Emacs - Nix https://funprog.srid.ca/nix/emacs.html"
      },
      "date": 1653647544970
    },
    {
      "type": "edit",
      "id": "23289c9b2248465f",
      "item": {
        "type": "paragraph",
        "id": "23289c9b2248465f",
        "text": "Emacs - Nix,  Functional Programming Zulip Chat Archive [https://funprog.srid.ca/nix/emacs.html page]"
      },
      "date": 1653647569448
    },
    {
      "item": {
        "type": "factory",
        "id": "94efafd72b07ce47"
      },
      "id": "94efafd72b07ce47",
      "type": "add",
      "after": "23289c9b2248465f",
      "date": 1653649127940
    },
    {
      "type": "edit",
      "id": "94efafd72b07ce47",
      "item": {
        "type": "paragraph",
        "id": "94efafd72b07ce47",
        "text": "pkgs.emacsPgtkNativeComp;"
      },
      "date": 1653649130647
    },
    {
      "type": "edit",
      "id": "94efafd72b07ce47",
      "item": {
        "type": "paragraph",
        "id": "94efafd72b07ce47",
        "text": "pkgs.emacsPgtkNativeComp"
      },
      "date": 1653649133228
    },
    {
      "id": "94efafd72b07ce47",
      "type": "move",
      "order": [
        "e65ae7dc2430396b",
        "84a5a1c7b6e7c9d5",
        "6eb7d31c3329574e",
        "1311eeefd6ac7d57",
        "950d8893ad5706ec",
        "bd6f4ec2a3ba2c8c",
        "a8d5f581440a9101",
        "16e3bcec517ff16b",
        "8aa3f59d4f2829e6",
        "173722cecc9eff88",
        "94efafd72b07ce47",
        "b27cdd48ab5dbc44",
        "5c2841f0e55d067b",
        "528168fabb6b5ee3",
        "c3f5383c214a5983",
        "6dfa5b4b2f7f1361",
        "0a3899ff63e1c622",
        "23289c9b2248465f"
      ],
      "date": 1653649151977
    },
    {
      "item": {
        "type": "factory",
        "id": "cd4b85c054d1eea0"
      },
      "id": "cd4b85c054d1eea0",
      "type": "add",
      "after": "23289c9b2248465f",
      "date": 1653649248360
    },
    {
      "type": "edit",
      "id": "cd4b85c054d1eea0",
      "item": {
        "type": "paragraph",
        "id": "cd4b85c054d1eea0",
        "text": "Building GNU Emacs with pure GTK and native compilation"
      },
      "date": 1653649251229
    },
    {
      "type": "edit",
      "id": "cd4b85c054d1eea0",
      "item": {
        "type": "paragraph",
        "id": "cd4b85c054d1eea0",
        "text": "Building GNU Emacs with pure GTK and native compilation https://deathwish.info/2020/08/01/pgtk-nativecomp/"
      },
      "date": 1653649257520
    },
    {
      "id": "cd4b85c054d1eea0",
      "type": "move",
      "order": [
        "e65ae7dc2430396b",
        "84a5a1c7b6e7c9d5",
        "6eb7d31c3329574e",
        "1311eeefd6ac7d57",
        "950d8893ad5706ec",
        "bd6f4ec2a3ba2c8c",
        "a8d5f581440a9101",
        "16e3bcec517ff16b",
        "8aa3f59d4f2829e6",
        "173722cecc9eff88",
        "94efafd72b07ce47",
        "b27cdd48ab5dbc44",
        "5c2841f0e55d067b",
        "528168fabb6b5ee3",
        "c3f5383c214a5983",
        "6dfa5b4b2f7f1361",
        "cd4b85c054d1eea0",
        "0a3899ff63e1c622",
        "23289c9b2248465f"
      ],
      "date": 1653649277571
    },
    {
      "id": "23289c9b2248465f",
      "type": "move",
      "order": [
        "e65ae7dc2430396b",
        "84a5a1c7b6e7c9d5",
        "6eb7d31c3329574e",
        "1311eeefd6ac7d57",
        "950d8893ad5706ec",
        "bd6f4ec2a3ba2c8c",
        "a8d5f581440a9101",
        "16e3bcec517ff16b",
        "8aa3f59d4f2829e6",
        "173722cecc9eff88",
        "94efafd72b07ce47",
        "b27cdd48ab5dbc44",
        "5c2841f0e55d067b",
        "528168fabb6b5ee3",
        "c3f5383c214a5983",
        "6dfa5b4b2f7f1361",
        "cd4b85c054d1eea0",
        "23289c9b2248465f",
        "0a3899ff63e1c622"
      ],
      "date": 1653649281773
    },
    {
      "type": "edit",
      "id": "cd4b85c054d1eea0",
      "item": {
        "type": "paragraph",
        "id": "cd4b85c054d1eea0",
        "text": "Building GNU Emacs with pure GTK and native compilation [https://deathwish.info/2020/08/01/pgtk-nativecomp/ post]"
      },
      "date": 1653649298404
    },
    {
      "type": "add",
      "id": "2d1a0420442b52de",
      "item": {
        "type": "paragraph",
        "id": "2d1a0420442b52de",
        "text": "Emacs native-comp on CentOS 7"
      },
      "after": "cd4b85c054d1eea0",
      "date": 1653649375189
    },
    {
      "type": "edit",
      "id": "2d1a0420442b52de",
      "item": {
        "type": "paragraph",
        "id": "2d1a0420442b52de",
        "text": "Emacs native-comp on CentOS 7 [https://ddavis.io/posts/emacs-native-centos7/ post]"
      },
      "date": 1653649384387
    },
    {
      "item": {
        "type": "factory",
        "id": "2b5173edfa089278"
      },
      "id": "2b5173edfa089278",
      "type": "add",
      "after": "0a3899ff63e1c622",
      "date": 1653649773223
    },
    {
      "type": "edit",
      "id": "2b5173edfa089278",
      "item": {
        "type": "paragraph",
        "id": "2b5173edfa089278",
        "text": "> I used a link farm to allow spacemacs to clone it’s dependencies (note it was a while ago that I cloned this):"
      },
      "date": 1653649775958
    },
    {
      "type": "edit",
      "id": "2b5173edfa089278",
      "item": {
        "type": "markdown",
        "id": "2b5173edfa089278",
        "text": "> I used a link farm to allow spacemacs to clone it’s dependencies (note it was a while ago that I cloned this):"
      },
      "date": 1653649777935
    },
    {
      "item": {
        "type": "factory",
        "id": "567eb1b272d93b05"
      },
      "id": "567eb1b272d93b05",
      "type": "add",
      "after": "2b5173edfa089278",
      "date": 1653649790610
    },
    {
      "type": "edit",
      "id": "567eb1b272d93b05",
      "item": {
        "type": "code",
        "id": "567eb1b272d93b05",
        "text": "  home.file.\".emacs.d\" = {\n    # don't make the directory read only so that impure melpa can still happen\n    # for now\n    recursive = true;\n    source = pkgs.fetchFromGitHub {\n      owner = \"syl20bnr\";\n      repo = \"spacemacs\";\n      rev = \"26b8fe0c317915b622825877eb5e5bdae88fb2b2\";\n      sha256 = \"00cfm6caaz85rwlrbs8rm2878wgnph6342i9688w4dji3dgyz3rz\";\n    };\n  };"
      },
      "date": 1653649792877
    },
    {
      "item": {
        "type": "factory",
        "id": "39d197df22bf3da6"
      },
      "id": "39d197df22bf3da6",
      "type": "add",
      "after": "567eb1b272d93b05",
      "date": 1653651217260
    },
    {
      "type": "edit",
      "id": "39d197df22bf3da6",
      "item": {
        "type": "paragraph",
        "id": "39d197df22bf3da6",
        "text": "https://nixos.org/manual/nixpkgs/stable/#fetchfromgithub"
      },
      "date": 1653651219401
    },
    {
      "item": {
        "type": "factory",
        "id": "14341822bdac07c2"
      },
      "id": "14341822bdac07c2",
      "type": "add",
      "after": "39d197df22bf3da6",
      "date": 1653651229870
    },
    {
      "type": "edit",
      "id": "14341822bdac07c2",
      "item": {
        "type": "paragraph",
        "id": "14341822bdac07c2",
        "text": "https://worklifenotes.com/2020/03/05/get-sha256-hash-on-a-directory/"
      },
      "date": 1653651231839
    },
    {
      "type": "edit",
      "id": "567eb1b272d93b05",
      "item": {
        "type": "code",
        "id": "567eb1b272d93b05",
        "text": "    home.file.\".emacs.d\" = {\n      # don't make the directory read only so that impure melpa can still happen\n      # for now\n      recursive = true;\n      source = pkgs.fetchFromGitHub {\n        owner = \"syl20bnr\";\n        repo = \"spacemacs\";\n        rev = \"756e204d250507ad7137ecbcd2ab4feaedf68b63\";\n        sha256 = \"sha256-M7i67NVD0DlmABcoBboN8VWwnzWiXXRkK1k44ns6Yw4=\";\n      };\n"
      },
      "date": 1653652488055
    },
    {
      "type": "edit",
      "id": "39d197df22bf3da6",
      "item": {
        "type": "paragraph",
        "id": "39d197df22bf3da6",
        "text": "fetchfromgithub [https://nixos.org/manual/nixpkgs/stable/#fetchfromgithub manual]"
      },
      "date": 1653652532909
    },
    {
      "type": "edit",
      "id": "39d197df22bf3da6",
      "item": {
        "type": "paragraph",
        "id": "39d197df22bf3da6",
        "text": "`fetchfromgithub` [https://nixos.org/manual/nixpkgs/stable/#fetchfromgithub manual]"
      },
      "date": 1653652546181
    },
    {
      "type": "edit",
      "id": "39d197df22bf3da6",
      "item": {
        "type": "markdown",
        "id": "39d197df22bf3da6",
        "text": "`fetchfromgithub` [https://nixos.org/manual/nixpkgs/stable/#fetchfromgithub manual]"
      },
      "date": 1653652547484
    },
    {
      "item": {
        "type": "factory",
        "id": "192bc3546c0c4c1b"
      },
      "id": "192bc3546c0c4c1b",
      "type": "add",
      "after": "14341822bdac07c2",
      "date": 1653652559611
    },
    {
      "type": "edit",
      "id": "192bc3546c0c4c1b",
      "item": {
        "type": "markdown",
        "id": "192bc3546c0c4c1b",
        "text": "> fetchFromGitHub expects four arguments. owner is a string corresponding to the GitHub user or organization that controls this repository. repo corresponds to the name of the software repository. These are located at the top of every GitHub HTML page as owner/repo. rev corresponds to the Git commit hash or tag (e.g v1.0) that will be downloaded from Git. Finally, sha256 corresponds to the hash of the extracted directory. Again, other hash algorithms are also available but sha256 is currently preferred."
      },
      "date": 1653652562750
    },
    {
      "id": "192bc3546c0c4c1b",
      "type": "move",
      "order": [
        "e65ae7dc2430396b",
        "84a5a1c7b6e7c9d5",
        "6eb7d31c3329574e",
        "1311eeefd6ac7d57",
        "950d8893ad5706ec",
        "bd6f4ec2a3ba2c8c",
        "a8d5f581440a9101",
        "16e3bcec517ff16b",
        "8aa3f59d4f2829e6",
        "173722cecc9eff88",
        "94efafd72b07ce47",
        "b27cdd48ab5dbc44",
        "5c2841f0e55d067b",
        "528168fabb6b5ee3",
        "c3f5383c214a5983",
        "6dfa5b4b2f7f1361",
        "cd4b85c054d1eea0",
        "2d1a0420442b52de",
        "23289c9b2248465f",
        "0a3899ff63e1c622",
        "2b5173edfa089278",
        "567eb1b272d93b05",
        "39d197df22bf3da6",
        "192bc3546c0c4c1b",
        "14341822bdac07c2"
      ],
      "date": 1653652565180
    },
    {
      "type": "edit",
      "id": "192bc3546c0c4c1b",
      "item": {
        "type": "markdown",
        "id": "192bc3546c0c4c1b",
        "text": "> fetchFromGitHub expects four arguments. `owner` is a string corresponding to the GitHub user or organization that controls this repository. repo corresponds to the name of the software repository. These are located at the top of every GitHub HTML page as owner/repo. rev corresponds to the Git commit hash or tag (e.g v1.0) that will be downloaded from Git. Finally, sha256 corresponds to the hash of the extracted directory. Again, other hash algorithms are also available but sha256 is currently preferred."
      },
      "date": 1653652576844
    },
    {
      "type": "edit",
      "id": "192bc3546c0c4c1b",
      "item": {
        "type": "markdown",
        "id": "192bc3546c0c4c1b",
        "text": "> fetchFromGitHub expects four arguments. `owner` is a string corresponding to the GitHub user or organization that controls this repository. `repo` corresponds to the name of the software repository. These are located at the top of every GitHub HTML page as owner/repo. rev corresponds to the Git commit hash or tag (e.g v1.0) that will be downloaded from Git. Finally, sha256 corresponds to the hash of the extracted directory. Again, other hash algorithms are also available but sha256 is currently preferred."
      },
      "date": 1653652595376
    },
    {
      "type": "edit",
      "id": "192bc3546c0c4c1b",
      "item": {
        "type": "markdown",
        "id": "192bc3546c0c4c1b",
        "text": "> fetchFromGitHub expects four arguments. `owner` is a string corresponding to the GitHub user or organization that controls this repository. `repo` corresponds to the name of the software repository. These are located at the top of every GitHub HTML page as owner/repo. `rev` corresponds to the Git commit hash or tag (e.g v1.0) that will be downloaded from Git. Finally, sha256 corresponds to the hash of the extracted directory. Again, other hash algorithms are also available but sha256 is currently preferred."
      },
      "date": 1653652611939
    },
    {
      "type": "edit",
      "id": "192bc3546c0c4c1b",
      "item": {
        "type": "markdown",
        "id": "192bc3546c0c4c1b",
        "text": "> fetchFromGitHub expects four arguments. `owner` is a string corresponding to the GitHub user or organization that controls this repository. `repo` corresponds to the name of the software repository. These are located at the top of every GitHub HTML page as owner/repo. `rev` corresponds to the Git commit hash or tag (e.g v1.0) that will be downloaded from Git. Finally, `sha256` corresponds to the hash of the extracted directory. Again, other hash algorithms are also available but sha256 is currently preferred."
      },
      "date": 1653652636481
    },
    {
      "type": "edit",
      "id": "14341822bdac07c2",
      "item": {
        "type": "paragraph",
        "id": "14341822bdac07c2",
        "text": "Get sha256 hash on a directory. [https://worklifenotes.com/2020/03/05/get-sha256-hash-on-a-directory/ post]"
      },
      "date": 1653652667205
    },
    {
      "type": "edit",
      "id": "14341822bdac07c2",
      "item": {
        "type": "paragraph",
        "id": "14341822bdac07c2",
        "text": "Get sha256 hash on a directory.  [https://worklifenotes.com/2020/03/05/get-sha256-hash-on-a-directory/ post]"
      },
      "date": 1653652670405
    },
    {
      "item": {
        "type": "factory",
        "id": "83ccd0bda2eef92e"
      },
      "id": "83ccd0bda2eef92e",
      "type": "add",
      "after": "14341822bdac07c2",
      "date": 1653654438272
    },
    {
      "type": "edit",
      "id": "83ccd0bda2eef92e",
      "item": {
        "type": "paragraph",
        "id": "83ccd0bda2eef92e",
        "text": "Emacs infrastructure tracking issue #66303"
      },
      "date": 1653654443554
    },
    {
      "type": "edit",
      "id": "83ccd0bda2eef92e",
      "item": {
        "type": "paragraph",
        "id": "83ccd0bda2eef92e",
        "text": "Emacs infrastructure tracking issue #66303 [https://github.com/NixOS/nixpkgs/issues/66303 github]"
      },
      "date": 1653654453332
    },
    {
      "type": "edit",
      "id": "1311eeefd6ac7d57",
      "item": {
        "type": "markdown",
        "id": "1311eeefd6ac7d57",
        "text": "emacsGit is latest commits from master, but the overlay doesn't has native compilation enabled for it. emacsGcc is emacs 28 with native compilation enabled.\n"
      },
      "date": 1653656292129
    },
    {
      "type": "add",
      "id": "aeaede8d18bac80e",
      "item": {
        "type": "markdown",
        "id": "aeaede8d18bac80e",
        "text": "See Emacs from Git and latest (including pre-releases)"
      },
      "after": "1311eeefd6ac7d57",
      "date": 1653656299714
    },
    {
      "type": "edit",
      "id": "aeaede8d18bac80e",
      "item": {
        "type": "markdown",
        "id": "aeaede8d18bac80e",
        "text": "See *Emacs from Git and latest (including pre-releases)*. [https://github.com/nix-community/emacs-overlay#emacs-from-git-and-latest-including-pre-releases github]"
      },
      "date": 1653656320245
    },
    {
      "type": "edit",
      "id": "aeaede8d18bac80e",
      "item": {
        "type": "markdown",
        "id": "aeaede8d18bac80e",
        "text": "See *Emacs from Git and latest (including pre-releases)*. [https://github.com/nix-community/emacs-overlay#emacs-from-git-and-latest-including-pre-releases github]\n>  emacsGit is built from the latest master branch and emacsUnstable is built from the latest tag.\n\n"
      },
      "date": 1653656357944
    },
    {
      "type": "edit",
      "id": "aeaede8d18bac80e",
      "item": {
        "type": "markdown",
        "id": "aeaede8d18bac80e",
        "text": "See *Emacs from Git and latest (including pre-releases)*. [https://github.com/nix-community/emacs-overlay#emacs-from-git-and-latest-including-pre-releases github]\n>  `emacsGit` is built from the latest master branch and `emacsUnstable` is built from the latest tag.\n\n"
      },
      "date": 1653656373770
    },
    {
      "type": "edit",
      "id": "1311eeefd6ac7d57",
      "item": {
        "type": "markdown",
        "id": "1311eeefd6ac7d57",
        "text": "\n"
      },
      "date": 1653656392430
    },
    {
      "type": "remove",
      "id": "6eb7d31c3329574e",
      "date": 1653656396506
    },
    {
      "type": "edit",
      "id": "950d8893ad5706ec",
      "item": {
        "type": "paragraph",
        "id": "950d8893ad5706ec",
        "text": "– Overlays "
      },
      "date": 1653656425296
    },
    {
      "type": "edit",
      "id": "e65ae7dc2430396b",
      "item": {
        "type": "paragraph",
        "id": "e65ae7dc2430396b",
        "text": "We want to update Emacs Version 27.2 (9.0) and found Emacs Overlay for Nixpkgs [https://github.com/nix-community/emacs-overlay github], [https://www.reddit.com/r/NixOS/comments/oub1gm/how_to_get_emacs_28/ reddit], [https://nixos.wiki/wiki/Overlays nixos.wiki], [https://nixos.org/manual/nixpkgs/stable/#chap-overlays manual]"
      },
      "date": 1653656428232
    },
    {
      "type": "remove",
      "id": "950d8893ad5706ec",
      "date": 1653656433582
    },
    {
      "type": "edit",
      "id": "aeaede8d18bac80e",
      "item": {
        "type": "markdown",
        "id": "aeaede8d18bac80e",
        "text": "See *Emacs from Git and latest (including pre-releases)*. [https://github.com/nix-community/emacs-overlay#emacs-from-git-and-latest-including-pre-releases github]\n>  `emacsGit` is built from the latest master branch and `emacsUnstable` is built from the latest tag.\n\nFurthermore we provide emacs compiled with the native compilation backend enabled under the attributes emacsNativeComp (built from the latest tag) and emacsGitNativeComp (built from the latest master branch).\n"
      },
      "date": 1653665639483
    },
    {
      "type": "edit",
      "id": "aeaede8d18bac80e",
      "item": {
        "type": "markdown",
        "id": "aeaede8d18bac80e",
        "text": "See *Emacs from Git and latest (including pre-releases)*. [https://github.com/nix-community/emacs-overlay#emacs-from-git-and-latest-including-pre-releases github]\n>  `emacsGit` is built from the latest master branch and `emacsUnstable` is built from the latest tag.\n\nFurthermore we provide emacs compiled with the native compilation backend enabled under the attributes `emacsNativeComp` (built from the latest tag) and `emacsGitNativeComp` (built from the latest master branch).\n"
      },
      "date": 1653665665633
    },
    {
      "type": "edit",
      "id": "a8d5f581440a9101",
      "item": {
        "type": "code",
        "id": "a8d5f581440a9101",
        "text": "{\n  # Emacs Overlay\n  services.emacs.package = pkgs.emacsNativeComp;\n\n  nixpkgs.overlays = [\n    (import (builtins.fetchGit {\n      url = \"https://github.com/nix-community/emacs-overlay.git\";\n      ref = \"master\";\n      rev = \"7a5353c3d27749912df89d1083e9b675f70accb4\"; # change the revision\n    }))\n  ];\n\n  environment.systemPackages = with pkgs; [\n    emacsPgtkGcc\n  ];\n}"
      },
      "date": 1653665716253
    },
    {
      "type": "edit",
      "id": "a8d5f581440a9101",
      "item": {
        "type": "code",
        "id": "a8d5f581440a9101",
        "text": "{\n  # Emacs Overlay\n  services.emacs.package = pkgs.emacsNativeComp;\n\n  nixpkgs.overlays = [\n    (import (builtins.fetchGit {\n      url = \"https://github.com/nix-community/emacs-overlay.git\";\n      ref = \"master\";\n      rev = \"7a5353c3d27749912df89d1083e9b675f70accb4\"; # change the revision\n    }))\n  ];\n\n  environment.systemPackages = with pkgs; [\n    emacsNativeComp\n\n  ];\n}"
      },
      "date": 1653665725591
    },
    {
      "type": "edit",
      "id": "a8d5f581440a9101",
      "item": {
        "type": "code",
        "id": "a8d5f581440a9101",
        "text": "{\n  # Emacs Overlay\n  services.emacs.package = pkgs.emacsNativeComp;\n\n  nixpkgs.overlays = [\n    (import (builtins.fetchGit {\n      url = \"https://github.com/nix-community/emacs-overlay.git\";\n      ref = \"master\";\n      rev = \"7a5353c3d27749912df89d1083e9b675f70accb4\"; # change the revision\n    }))\n  ];\n\n  environment.systemPackages = with pkgs; [\n    emacsNativeComp\n  ];\n}"
      },
      "date": 1653665734882
    },
    {
      "type": "remove",
      "id": "94efafd72b07ce47",
      "date": 1653665760351
    },
    {
      "type": "edit",
      "id": "bd6f4ec2a3ba2c8c",
      "item": {
        "type": "markdown",
        "id": "bd6f4ec2a3ba2c8c",
        "text": "`~/.nixpkgs/darwin-configuration.nix`:"
      },
      "date": 1653730492349
    },
    {
      "type": "edit",
      "id": "e65ae7dc2430396b",
      "item": {
        "type": "paragraph",
        "id": "e65ae7dc2430396b",
        "text": "I want to update Emacs Version 27.2 (9.0) and found Emacs Overlay for Nixpkgs [https://github.com/nix-community/emacs-overlay github], [https://www.reddit.com/r/NixOS/comments/oub1gm/how_to_get_emacs_28/ reddit], [https://nixos.wiki/wiki/Overlays nixos.wiki], [https://nixos.org/manual/nixpkgs/stable/#chap-overlays manual]"
      },
      "date": 1653730944845
    },
    {
      "type": "edit",
      "id": "e65ae7dc2430396b",
      "item": {
        "type": "paragraph",
        "id": "e65ae7dc2430396b",
        "text": "I want to update Emacs Version 27.2 (9.0) and use Emacs Overlay for Nixpkgs [https://github.com/nix-community/emacs-overlay github], [https://www.reddit.com/r/NixOS/comments/oub1gm/how_to_get_emacs_28/ reddit], [https://nixos.wiki/wiki/Overlays nixos.wiki], [https://nixos.org/manual/nixpkgs/stable/#chap-overlays manual]"
      },
      "date": 1653730954131
    },
    {
      "type": "edit",
      "id": "84a5a1c7b6e7c9d5",
      "item": {
        "type": "paragraph",
        "id": "84a5a1c7b6e7c9d5",
        "text": "⇒  [[Nix on macOS]] > Upgrading Nix"
      },
      "date": 1653731248548
    },
    {
      "type": "edit",
      "id": "528168fabb6b5ee3",
      "item": {
        "type": "paragraph",
        "id": "528168fabb6b5ee3",
        "text": "[[Bringing GNU Emacs to Native Code]]. [https://arxiv.org/pdf/2004.02504.pdf pdf]"
      },
      "date": 1653731425550
    },
    {
      "type": "edit",
      "id": "528168fabb6b5ee3",
      "item": {
        "type": "paragraph",
        "id": "528168fabb6b5ee3",
        "text": "Bringing GNU Emacs to Native Code. [https://arxiv.org/pdf/2004.02504.pdf pdf]"
      },
      "date": 1653731447806
    },
    {
      "item": {
        "type": "factory",
        "id": "ff8fe9532a988c4a"
      },
      "id": "ff8fe9532a988c4a",
      "type": "add",
      "after": "83ccd0bda2eef92e",
      "date": 1653731453355
    },
    {
      "id": "ff8fe9532a988c4a",
      "type": "move",
      "order": [
        "e65ae7dc2430396b",
        "84a5a1c7b6e7c9d5",
        "1311eeefd6ac7d57",
        "aeaede8d18bac80e",
        "bd6f4ec2a3ba2c8c",
        "a8d5f581440a9101",
        "16e3bcec517ff16b",
        "8aa3f59d4f2829e6",
        "173722cecc9eff88",
        "b27cdd48ab5dbc44",
        "5c2841f0e55d067b",
        "528168fabb6b5ee3",
        "c3f5383c214a5983",
        "ff8fe9532a988c4a",
        "6dfa5b4b2f7f1361",
        "cd4b85c054d1eea0",
        "2d1a0420442b52de",
        "23289c9b2248465f",
        "0a3899ff63e1c622",
        "2b5173edfa089278",
        "567eb1b272d93b05",
        "39d197df22bf3da6",
        "192bc3546c0c4c1b",
        "14341822bdac07c2",
        "83ccd0bda2eef92e"
      ],
      "date": 1653731471209
    },
    {
      "type": "edit",
      "id": "ff8fe9532a988c4a",
      "item": {
        "type": "video",
        "id": "ff8fe9532a988c4a",
        "text": "YOUTUBE "
      },
      "date": 1653731477403
    },
    {
      "type": "edit",
      "id": "ff8fe9532a988c4a",
      "item": {
        "type": "video",
        "id": "ff8fe9532a988c4a",
        "text": "YOUTUBE zKHYZOAc_bQ"
      },
      "date": 1653731497140
    },
    {
      "type": "edit",
      "id": "ff8fe9532a988c4a",
      "item": {
        "type": "video",
        "id": "ff8fe9532a988c4a",
        "text": "YOUTUBE zKHYZOAc_bQ\nTalk"
      },
      "date": 1653731656853
    },
    {
      "type": "edit",
      "id": "ff8fe9532a988c4a",
      "item": {
        "type": "video",
        "id": "ff8fe9532a988c4a",
        "text": "YOUTUBE zKHYZOAc_bQ\nTalk, [https://www.european-lisp-symposium.org/static/2020/corallo-nassi-manca-slides.pdf slides]"
      },
      "date": 1653731713311
    },
    {
      "type": "edit",
      "id": "ff8fe9532a988c4a",
      "item": {
        "type": "video",
        "id": "ff8fe9532a988c4a",
        "text": "YOUTUBE zKHYZOAc_bQ\nTalk, [https://www.european-lisp-symposium.org/static/2020/corallo-nassi-manca-slides.pdf slides], Proceedings"
      },
      "date": 1653731886024
    },
    {
      "type": "edit",
      "id": "ff8fe9532a988c4a",
      "item": {
        "type": "video",
        "id": "ff8fe9532a988c4a",
        "text": "YOUTUBE zKHYZOAc_bQ\nTalk, [https://www.european-lisp-symposium.org/static/2020/corallo-nassi-manca-slides.pdf slides], Proceedings [https://www.european-lisp-symposium.org/static/proceedings/2020.pdf pdf]"
      },
      "date": 1653731896719
    }
  ]
}