{
  "title": "MAMemento",
  "story": [
    {
      "type": "markdown",
      "id": "cd391ce88a721b3a",
      "text": "# Responsibilities\nI am an abstract [[Memento]]. I am a stand-in for an object, typically for reading and writing. Subclasses ''may'' save the pre-operation state (e.g. ${class:MACachedMemento}$), or ''may not'' (e.g. ${class:MAStraightMemento}$. Similarly, they ''may'' verify described conditions are met (e.g. ${class:MACheckedMemento}$). NB. My behavior is different than a GoF ==Memento==, which is immutable, saving an object's state before it's modified by an operation.\n"
    },
    {
      "type": "markdown",
      "id": "68048f7355f2cf46",
      "text": "# Collaborators\n- the ==model== I represent/modify\n- the ==description== currently used to describe this ==model=="
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "MAMemento",
        "story": []
      },
      "date": 1671044781642
    },
    {
      "item": {
        "type": "factory",
        "id": "cd391ce88a721b3a"
      },
      "id": "cd391ce88a721b3a",
      "type": "add",
      "date": 1671044787797
    },
    {
      "type": "edit",
      "id": "cd391ce88a721b3a",
      "item": {
        "type": "markdown",
        "id": "cd391ce88a721b3a",
        "text": "!Responsibilities\nI am an abstract memento. I am a stand-in for an object, typically for reading and writing. Subclasses ''may'' save the pre-operation state (e.g. ${class:MACachedMemento}$), or ''may not'' (e.g. ${class:MAStraightMemento}$. Similarly, they ''may'' verify described conditions are met (e.g. ${class:MACheckedMemento}$). NB. My behavior is different than a GoF ==Memento==, which is immutable, saving an object's state before it's modified by an operation.\n!Collaborators\n- the ==model== I represent/modify\n- the ==description== currently used to describe this ==model=="
      },
      "date": 1671044789350
    },
    {
      "type": "fork",
      "date": 1671044818557
    },
    {
      "type": "edit",
      "id": "cd391ce88a721b3a",
      "item": {
        "type": "markdown",
        "id": "cd391ce88a721b3a",
        "text": "# Responsibilities\nI am an abstract [[Memento]]. I am a stand-in for an object, typically for reading and writing. Subclasses ''may'' save the pre-operation state (e.g. ${class:MACachedMemento}$), or ''may not'' (e.g. ${class:MAStraightMemento}$. Similarly, they ''may'' verify described conditions are met (e.g. ${class:MACheckedMemento}$). NB. My behavior is different than a GoF ==Memento==, which is immutable, saving an object's state before it's modified by an operation.\n!Collaborators\n- the ==model== I represent/modify\n- the ==description== currently used to describe this ==model=="
      },
      "date": 1671044839400
    },
    {
      "type": "edit",
      "id": "cd391ce88a721b3a",
      "item": {
        "type": "markdown",
        "id": "cd391ce88a721b3a",
        "text": "# Responsibilities\nI am an abstract [[Memento]]. I am a stand-in for an object, typically for reading and writing. Subclasses ''may'' save the pre-operation state (e.g. ${class:MACachedMemento}$), or ''may not'' (e.g. ${class:MAStraightMemento}$. Similarly, they ''may'' verify described conditions are met (e.g. ${class:MACheckedMemento}$). NB. My behavior is different than a GoF ==Memento==, which is immutable, saving an object's state before it's modified by an operation.\n"
      },
      "date": 1671044874079
    },
    {
      "type": "add",
      "id": "68048f7355f2cf46",
      "item": {
        "type": "markdown",
        "id": "68048f7355f2cf46",
        "text": "# Collaborators\n- the ==model== I represent/modify\n- the ==description== currently used to describe this ==model=="
      },
      "after": "cd391ce88a721b3a",
      "date": 1671044877428
    }
  ]
}