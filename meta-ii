{
  "title": "META-II",
  "story": [
    {
      "type": "paragraph",
      "id": "829a97b1d6c35e3a",
      "text": "[…] the paper META-II by [[Val Schorre]] from 1964. [https://github.com/RalfBarkow/meta github], [https://hopl.info/showlanguage2.prx?exp=202 hopl]"
    },
    {
      "type": "paragraph",
      "id": "ef4946cc335d1044",
      "text": "cf. Dan's Camp Smalltalk Supreme Keynote:"
    },
    {
      "type": "paragraph",
      "id": "4990ccc523797fb3",
      "text": "\" Meta II by Val Schorre\" is what he's mentioning in the beginning."
    },
    {
      "type": "video",
      "id": "f8ce023bd3375e28",
      "text": "YOUTUBE 1vEEH-eJYUM\nCamp Smalltalk Supreme — [[Dan Ingalls]] Keynote (audio enhanced)"
    },
    {
      "type": "paragraph",
      "id": "4bcaaea4b64a2754",
      "text": "\n1:34\n... really late in college because computer science didn't exist as a study and harvard didn't have a computer science course but while i was working on that project i got interested in a system called meta meta who here has read about meta okay um so that's i'm experiencing that percentage um because ..."
    },
    {
      "type": "pagefold",
      "id": "23d5f570bec6ba9e",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "896f6c26dd86a188",
      "text": "# META II\n\nIn the talk [Joe Armstrong Interviews Alan Kay](https://www.youtube.com/watch?v=fhOHn9TClXY), Alan Kay brings up META II as one of the things that influenced the ideas behind Smalltalk. When Kay mentioned META II, Armstrong started laughing and said he had just implemented it. “Dan Ingalls told me not to read it, because it would consume my life for a month”. Kay said “Everybody implements it. It is a test for graduate students.”\n\nThis conversation made me want to be a part of the cool kids club. I thought it would be fun and educational to implement and play around with it.\n\nThere is a fantastic [tutorial by James Neighbors](http://www.bayfronttechnologies.com/mc_tutorial.html) that I highly recommend going through. My code here in this repo was based on the code found in the [workshop page](http://www.bayfronttechnologies.com/mc_workshop.html).\n\nNote, this project here is a WIP. It does currently work (it can compile itself, for example) but there is more to do. I will fill out more info on this readme about how to run it once it is more complete.\n\n----\n## What is META II?\nMeta II is compiler generator that can generate itself.\n\nFor more, see [Wikipedia](https://en.wikipedia.org/wiki/Markdown)\n\n> META II is a domain-specific programming language for writing compilers. It was created in 1963-1964 by Dewey Val Schorre at UCLA. META II uses what Schorre called syntax equations. Each syntax equation is translated into a recursive subroutine which tests the input string for a particular phrase structure, and deletes it if found.\n\n----\n## Implementation Details\nTo implement META II as described in the [1964 paper by Schorre](https://dl.acm.org/citation.cfm?doid=800257.808896), one simply has to implement about 20 opcodes using a basic emulator/VM scheme. I had some previous experience with this when implementing a [Chip-8 emulator](https://github.com/evanhackett/chip8), so this basic technique was familiar to me. Essentially, you have an interpreter loop that pulls in opcodes, parses them, and runs the corresponding function. Some internal state is usually modified with each execution of an opcode.\n\nTo kill two birds with one stone, I chose this to be my project for a class on functional programming. That meant I had to reimplement META II in a functional way. My essential strategy here was to make it so that each opcode no longer mutates a global variable (registers, memory, stack, etc). Instead, each opcode returns a \"state delta\", and then in one place, on every interpreter cycle, I update the state using the state deltas. In this way side effects are isolated, and the core data-structures can be treated as immutable everywhere but in the one update function. This is sort of like how the React framework works, for those who are familiar with the javascript world."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "META-II",
        "story": []
      },
      "date": 1661331379139
    },
    {
      "item": {
        "type": "factory",
        "id": "829a97b1d6c35e3a"
      },
      "id": "829a97b1d6c35e3a",
      "type": "add",
      "date": 1661331383823
    },
    {
      "type": "edit",
      "id": "829a97b1d6c35e3a",
      "item": {
        "type": "paragraph",
        "id": "829a97b1d6c35e3a",
        "text": "[…] the paper META-II by Val Schorre from 1964.\n"
      },
      "date": 1661331398686
    },
    {
      "type": "add",
      "id": "ef4946cc335d1044",
      "item": {
        "type": "paragraph",
        "id": "ef4946cc335d1044",
        "text": "cf. Dan's Ctalk "
      },
      "after": "829a97b1d6c35e3a",
      "date": 1661331410717
    },
    {
      "type": "edit",
      "id": "ef4946cc335d1044",
      "item": {
        "type": "paragraph",
        "id": "ef4946cc335d1044",
        "text": "cf. Dan's Camp Smalltalk talk "
      },
      "date": 1661331422796
    },
    {
      "item": {
        "type": "factory",
        "id": "4990ccc523797fb3"
      },
      "id": "4990ccc523797fb3",
      "type": "add",
      "after": "ef4946cc335d1044",
      "date": 1661331470045
    },
    {
      "type": "edit",
      "id": "4990ccc523797fb3",
      "item": {
        "type": "paragraph",
        "id": "4990ccc523797fb3",
        "text": "\" Meta II by Val Schorre\" is what he's mentioning in the beginning."
      },
      "date": 1661331474541
    },
    {
      "item": {
        "type": "factory",
        "id": "4bcaaea4b64a2754"
      },
      "id": "4bcaaea4b64a2754",
      "type": "add",
      "after": "4990ccc523797fb3",
      "date": 1661331530931
    },
    {
      "type": "edit",
      "id": "4bcaaea4b64a2754",
      "item": {
        "type": "paragraph",
        "id": "4bcaaea4b64a2754",
        "text": "\n1:34\n... really late in college because computer science didn't exist as a study and harvard didn't have a computer science course but while i was working on that project i got interested in a system called meta meta who here has read about meta okay um so that's i'm experiencing that percentage um because ..."
      },
      "date": 1661331533758
    },
    {
      "item": {
        "type": "factory",
        "id": "dda2c9665af1eff1"
      },
      "id": "dda2c9665af1eff1",
      "type": "add",
      "after": "4bcaaea4b64a2754",
      "date": 1661331547446
    },
    {
      "type": "remove",
      "id": "dda2c9665af1eff1",
      "date": 1661331549452
    },
    {
      "item": {
        "type": "factory",
        "id": "f8ce023bd3375e28"
      },
      "id": "f8ce023bd3375e28",
      "type": "add",
      "after": "4bcaaea4b64a2754",
      "date": 1661331551676
    },
    {
      "type": "edit",
      "id": "f8ce023bd3375e28",
      "item": {
        "type": "video",
        "id": "f8ce023bd3375e28",
        "text": "YOUTUBE 1vEEH-eJYUM"
      },
      "date": 1661331569268
    },
    {
      "id": "f8ce023bd3375e28",
      "type": "move",
      "order": [
        "829a97b1d6c35e3a",
        "ef4946cc335d1044",
        "4990ccc523797fb3",
        "f8ce023bd3375e28",
        "4bcaaea4b64a2754"
      ],
      "date": 1661331591616
    },
    {
      "id": "4990ccc523797fb3",
      "type": "move",
      "order": [
        "829a97b1d6c35e3a",
        "ef4946cc335d1044",
        "f8ce023bd3375e28",
        "4bcaaea4b64a2754",
        "4990ccc523797fb3"
      ],
      "date": 1661331610791
    },
    {
      "id": "4990ccc523797fb3",
      "type": "move",
      "order": [
        "829a97b1d6c35e3a",
        "ef4946cc335d1044",
        "4990ccc523797fb3",
        "f8ce023bd3375e28",
        "4bcaaea4b64a2754"
      ],
      "date": 1661331613701
    },
    {
      "type": "edit",
      "id": "f8ce023bd3375e28",
      "item": {
        "type": "video",
        "id": "f8ce023bd3375e28",
        "text": "YOUTUBE 1vEEH-eJYUM\nCamp Smalltalk Supreme — [[Dan Ingalls]] Keynote (audio enhanced)"
      },
      "date": 1661331639855
    },
    {
      "type": "edit",
      "id": "ef4946cc335d1044",
      "item": {
        "type": "paragraph",
        "id": "ef4946cc335d1044",
        "text": "cf. Dan's Camp Smalltalk Keynote "
      },
      "date": 1661331643242
    },
    {
      "type": "edit",
      "id": "ef4946cc335d1044",
      "item": {
        "type": "paragraph",
        "id": "ef4946cc335d1044",
        "text": "cf. Dan's Camp Smalltalk Supreme Keynote "
      },
      "date": 1661331649886
    },
    {
      "type": "edit",
      "id": "ef4946cc335d1044",
      "item": {
        "type": "paragraph",
        "id": "ef4946cc335d1044",
        "text": "cf. Dan's Camp Smalltalk Supreme Keynote:"
      },
      "date": 1661331663883
    },
    {
      "type": "edit",
      "id": "829a97b1d6c35e3a",
      "item": {
        "type": "paragraph",
        "id": "829a97b1d6c35e3a",
        "text": "[…] the paper META-II by [[Val Schorre]] from 1964.\n"
      },
      "date": 1661331674523
    },
    {
      "type": "edit",
      "id": "829a97b1d6c35e3a",
      "item": {
        "type": "paragraph",
        "id": "829a97b1d6c35e3a",
        "text": "[…] the paper META-II by [[Val Schorre]] from 1964. [https://github.com/RalfBarkow/meta github]\n"
      },
      "date": 1661331703404
    },
    {
      "item": {
        "type": "factory",
        "id": "23d5f570bec6ba9e"
      },
      "id": "23d5f570bec6ba9e",
      "type": "add",
      "after": "4bcaaea4b64a2754",
      "date": 1661528844077
    },
    {
      "type": "edit",
      "id": "23d5f570bec6ba9e",
      "item": {
        "type": "pagefold",
        "id": "23d5f570bec6ba9e",
        "text": "~"
      },
      "date": 1661528847364
    },
    {
      "item": {
        "type": "factory",
        "id": "896f6c26dd86a188"
      },
      "id": "896f6c26dd86a188",
      "type": "add",
      "after": "23d5f570bec6ba9e",
      "date": 1661528848674
    },
    {
      "type": "edit",
      "id": "896f6c26dd86a188",
      "item": {
        "type": "markdown",
        "id": "896f6c26dd86a188",
        "text": "# META II\n\nIn the talk [Joe Armstrong Interviews Alan Kay](https://www.youtube.com/watch?v=fhOHn9TClXY), Alan Kay brings up META II as one of the things that influenced the ideas behind Smalltalk. When Kay mentioned META II, Armstrong started laughing and said he had just implemented it. “Dan Ingalls told me not to read it, because it would consume my life for a month”. Kay said “Everybody implements it. It is a test for graduate students.”\n\nThis conversation made me want to be a part of the cool kids club. I thought it would be fun and educational to implement and play around with it.\n\nThere is a fantastic [tutorial by James Neighbors](http://www.bayfronttechnologies.com/mc_tutorial.html) that I highly recommend going through. My code here in this repo was based on the code found in the [workshop page](http://www.bayfronttechnologies.com/mc_workshop.html).\n\nNote, this project here is a WIP. It does currently work (it can compile itself, for example) but there is more to do. I will fill out more info on this readme about how to run it once it is more complete.\n\n----\n## What is META II?\nMeta II is compiler generator that can generate itself.\n\nFor more, see [Wikipedia](https://en.wikipedia.org/wiki/Markdown)\n\n> META II is a domain-specific programming language for writing compilers. It was created in 1963-1964 by Dewey Val Schorre at UCLA. META II uses what Schorre called syntax equations. Each syntax equation is translated into a recursive subroutine which tests the input string for a particular phrase structure, and deletes it if found.\n\n----\n## Implementation Details\nTo implement META II as described in the [1964 paper by Schorre](https://dl.acm.org/citation.cfm?doid=800257.808896), one simply has to implement about 20 opcodes using a basic emulator/VM scheme. I had some previous experience with this when implementing a [Chip-8 emulator](https://github.com/evanhackett/chip8), so this basic technique was familiar to me. Essentially, you have an interpreter loop that pulls in opcodes, parses them, and runs the corresponding function. Some internal state is usually modified with each execution of an opcode.\n\nTo kill two birds with one stone, I chose this to be my project for a class on functional programming. That meant I had to reimplement META II in a functional way. My essential strategy here was to make it so that each opcode no longer mutates a global variable (registers, memory, stack, etc). Instead, each opcode returns a \"state delta\", and then in one place, on every interpreter cycle, I update the state using the state deltas. In this way side effects are isolated, and the core data-structures can be treated as immutable everywhere but in the one update function. This is sort of like how the React framework works, for those who are familiar with the javascript world."
      },
      "date": 1661528852098
    },
    {
      "type": "edit",
      "id": "829a97b1d6c35e3a",
      "item": {
        "type": "paragraph",
        "id": "829a97b1d6c35e3a",
        "text": "[…] the paper META-II by [[Val Schorre]] from 1964. [https://github.com/RalfBarkow/meta github], [https://hopl.info/showlanguage2.prx?exp=202 hopl]\n"
      },
      "date": 1661529101044
    },
    {
      "type": "edit",
      "id": "829a97b1d6c35e3a",
      "item": {
        "type": "paragraph",
        "id": "829a97b1d6c35e3a",
        "text": "[…] the paper META-II by [[Val Schorre]] from 1964. [https://github.com/RalfBarkow/meta github], [https://hopl.info/showlanguage2.prx?exp=202 hopl]"
      },
      "date": 1661529112382
    }
  ]
}