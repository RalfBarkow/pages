{
  "title": "Modeling State",
  "story": [
    {
      "type": "paragraph",
      "id": "bc9b35f2a47bf075",
      "text": "This page is some rough thinking on an ideal solution for modeling state in the browser. There many partial solutions to this problem, but none that I've found cover everything that I would like. This should be a general purpose solution, but it is being thought about with stand alone React components in mind."
    },
    {
      "type": "paragraph",
      "id": "910f6f874429d155",
      "text": "There should be a single, canonical, persisted, representation of the entire state of your application. This representation should be all of the data it takes to render a page. If you can get it on the server, it should be server renderable, if you can get it on the client it should be client renderable, and if you can get it at build time, it should be statically renderable."
    },
    {
      "type": "paragraph",
      "id": "29ec7380aa1af72e",
      "text": "Lets take the URL as an example use case. It is the single most important piece of shared mutable state in your application. It's the part that users can actually access, manually edit, copy, pass around, book mark, etc. Breaking the way it works breaks the web. So, what do we want to be able to do with it:"
    },
    {
      "type": "paragraph",
      "id": "db50ea6df6af4f6f",
      "text": "Derive properties."
    },
    {
      "type": "paragraph",
      "id": "5e83e45a6b2da17e",
      "text": "See former states."
    },
    {
      "type": "paragraph",
      "id": "aa705c9f4fca0b28",
      "text": "Update derived properties to update the whole."
    },
    {
      "type": "paragraph",
      "id": "9e813445fc8ec067",
      "text": "Rerender portions on change."
    },
    {
      "type": "paragraph",
      "id": "da06913accde9312",
      "text": "URL Bar changes -> state changes"
    },
    {
      "type": "paragraph",
      "id": "afcb0a2742dc9098",
      "text": "state changes -> URL Bar changes"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Modeling State",
        "story": []
      },
      "date": 1429221616593
    },
    {
      "item": {
        "type": "factory",
        "id": "bc9b35f2a47bf075"
      },
      "id": "bc9b35f2a47bf075",
      "type": "add",
      "date": 1429221618599
    },
    {
      "type": "edit",
      "id": "bc9b35f2a47bf075",
      "item": {
        "type": "paragraph",
        "id": "bc9b35f2a47bf075",
        "text": "This page is some rough thinking on an ideal solution for modeling state in the browser. There many partial solutions to this problem, but none that I've found cover everything that I would like. This should be a general purpose solution, but it is being thought about with stand alone React components in mind."
      },
      "date": 1429221772182
    },
    {
      "type": "add",
      "id": "910f6f874429d155",
      "item": {
        "type": "paragraph",
        "id": "910f6f874429d155",
        "text": "There should be a single, canonical, persisted, representation of the entire state of your application. This representation should be all of the data it takes to render a page. If you can get it on the server, it should be server renderable, if you can get it on the client it should be client renderable, and if you can get it at build time, it should be statically renderable."
      },
      "after": "bc9b35f2a47bf075",
      "date": 1429221935245
    },
    {
      "item": {
        "type": "factory",
        "id": "e0a9243db29c2cb9"
      },
      "id": "e0a9243db29c2cb9",
      "type": "add",
      "after": "910f6f874429d155",
      "date": 1429222154070
    },
    {
      "type": "edit",
      "id": "e0a9243db29c2cb9",
      "item": {
        "type": "paragraph",
        "id": "e0a9243db29c2cb9",
        "text": "The example use case I have "
      },
      "date": 1429222885318
    },
    {
      "type": "remove",
      "id": "e0a9243db29c2cb9",
      "date": 1429223512703
    },
    {
      "type": "add",
      "id": "29ec7380aa1af72e",
      "item": {
        "type": "paragraph",
        "id": "29ec7380aa1af72e",
        "text": "Lets take the URL as an example use case. It is the single most important piece of shared mutable state in your application. It's the part that users can actually access, manually edit, copy, pass around, book mark, etc. Breaking the way it works breaks the web. So, what do we want to be able to do with it:"
      },
      "after": "910f6f874429d155",
      "date": 1429223609462
    },
    {
      "type": "add",
      "id": "db50ea6df6af4f6f",
      "item": {
        "type": "paragraph",
        "id": "db50ea6df6af4f6f",
        "text": "Derive properties."
      },
      "after": "29ec7380aa1af72e",
      "date": 1429223638498
    },
    {
      "type": "add",
      "id": "5e83e45a6b2da17e",
      "item": {
        "type": "paragraph",
        "id": "5e83e45a6b2da17e",
        "text": "See former states."
      },
      "after": "db50ea6df6af4f6f",
      "date": 1429223641455
    },
    {
      "type": "add",
      "id": "aa705c9f4fca0b28",
      "item": {
        "type": "paragraph",
        "id": "aa705c9f4fca0b28",
        "text": "Update derived properties to update the whole."
      },
      "after": "5e83e45a6b2da17e",
      "date": 1429223718783
    },
    {
      "type": "add",
      "id": "9e813445fc8ec067",
      "item": {
        "type": "paragraph",
        "id": "9e813445fc8ec067",
        "text": "Rerender portions on change."
      },
      "after": "aa705c9f4fca0b28",
      "date": 1429223730536
    },
    {
      "type": "add",
      "id": "da06913accde9312",
      "item": {
        "type": "paragraph",
        "id": "da06913accde9312",
        "text": "URL Bar changes -> state changes"
      },
      "after": "9e813445fc8ec067",
      "date": 1429223772261
    },
    {
      "type": "add",
      "id": "afcb0a2742dc9098",
      "item": {
        "type": "paragraph",
        "id": "afcb0a2742dc9098",
        "text": "state changes -> URL Bar changes"
      },
      "after": "da06913accde9312",
      "date": 1429223782483
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1678777355734
    }
  ]
}