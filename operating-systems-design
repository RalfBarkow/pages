{
  "title": "Operating Systems Design",
  "story": [
    {
      "type": "html",
      "text": "OS design isn't taught in \"OS design\" classes and books like Operating Systems Concepts by [[Andrew Tanenbaum]] are a sick joke. What happens is that you get an instructor or writer who doesn't understand the first thing about OS design, doesn't know the state of the art, probably doesn't even understand what design <i>is</i>. So what do they do? They teach you how to reimplement Unix, a 30 year obsolete architecture! How can they be so stupid? See [[Excerption Not Abstraction]] and [[Cargo Cult]].",
      "id": "5c25c7d52905c18e6608283a99626d6b"
    },
    {
      "type": "html",
      "text": "\nSo what does a fresh eager student do if they want to avoid having their imagination utterly destroyed by an Andy Tanenbaum spouting irrelevancies like global vs local address spaces, synchronous vs asynchronous messages, and the 23 secret ways to resolve deadlocks? Start with a [[Crash Course In Os Design]]. Also learn the [[Operating Systems Design Principles]] and meditate on them a lot.",
      "id": "47d843deb05f56c21a1d745775510fec"
    },
    {
      "type": "html",
      "text": "(The discussion of capability and ACL security models that was here, has been moved to [[Capability Security Discussion]].)",
      "id": "8351ea3e8eff18aa4f56a53307762d82"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "511e853951f53c45eeabfaf511130ef5"
    },
    {
      "type": "html",
      "text": " [[Micro Kernel]]",
      "id": "8e7e39113c013749319ecf0c6f7e2718"
    },
    {
      "type": "html",
      "text": " [[Monolithic Kernel]]",
      "id": "981d0ba43ee10520aef18ae64dea9da8"
    },
    {
      "type": "html",
      "text": " [[Boot Strap]]",
      "id": "285686e7dca7ffb733c12c1cce29d64a"
    },
    {
      "type": "html",
      "text": "\n[[Monolithic Kernel]] and [[Boot Strap]] aren't fundamental OS concepts at all, only implementation details. And [[Micro Kernel]] (or [[Nano Kernel]]) are obsoleted by [[Exo Kernel]] as a fundamental OS concept.",
      "id": "e27daee361d086a4f9345f4dee962cd3"
    },
    {
      "type": "html",
      "text": "<i>People agree with this? Isn't [[Windows Nt Kernel]] [[Micro Kernel]]? --[[Takuya Murata]]</i>",
      "id": "d05d6737558a67666e0f05fdfc0a4046"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "511e853951f53c45eeabfaf511130ef5"
    },
    {
      "type": "html",
      "text": "\n[[Extreme Programmer]]s help us out here -- It seems that a team of 6 could build a better [[Operating System]] in a month, and then could continue to add features as it got smaller and smaller over time.",
      "id": "4497a27e7bd91c1cb688e7f1793c2357"
    },
    {
      "type": "html",
      "text": "\n[[Operating Systems]] used to be small, RAM was expensive.  Now they are big and getting bigger.  What exactly are the requirements (tell some stories) of an OS?",
      "id": "eaa601cc3b10e058ecbaaa35839551fe"
    },
    {
      "type": "html",
      "text": " Scheduler of processes",
      "id": "ec1e044d6e965cb37391b2a88d1cfb65"
    },
    {
      "type": "html",
      "text": " Handler of interprocess communication",
      "id": "a76ada0f7f310519f0b8605ed6b080f9"
    },
    {
      "type": "html",
      "text": " Speaker to low level [[Input Output]] devices",
      "id": "b065b413b3c5ba3fb5a37e54e480bdd1"
    },
    {
      "type": "html",
      "text": " Q:<br>does the OS really have to do this or is a process sufficient? and do you <i>need</i> multiple processes?",
      "id": "0bc62945626b769ba7abeedaf0e238c6"
    },
    {
      "type": "html",
      "text": "\n[[Operating Systems As Religions]] examines the whole topic from a humanist perspective.",
      "id": "3d3cb709cc662d4be2e5fe75a4f76d30"
    },
    {
      "type": "html",
      "text": "\nThe OS should, on a multiuser system, be able to preempt a running process, to keep a user from locking the system with their own malicious (or just poorly written) program. However, all the OSes I have seen are based on the [[Von Neumann Paradigm]] of computers. Perhaps it is time for new thinking, open up alternatives to memory-mapped io or DMA. [[Jacob Cohen]].",
      "id": "21f66ef78e712c54d80c499fb25db169"
    },
    {
      "type": "html",
      "text": "<i>You're focusing on two things you should never talk about when discussing design goals. First, you're talking about implementation details (eg, a \"process\"). Second, you're not even talking about the abstractions and principles which the users will see after you've abstracted away the hardware. Rather, you're talking about the ones that YOU see coming from the damned hardware! So not only are you doing a miserable job of expressing design goals, but you're not even talking about design goals at all.</i>",
      "id": "29ebdee7bc1f67b7ff2e0dad9f8e5828"
    },
    {
      "type": "html",
      "text": "<i>In case it escaped your notice, all programmers talk about OSes the same way you do. Even the ones that build them. This should tell you that they're all incompetent fools. Which they are, with very few exceptions.</i>",
      "id": "0e4f32a7e94dfd3da3144f84932a114a"
    },
    {
      "type": "html",
      "text": "<i>So what's an OS all about? It's something that provides STORAGE, COMMUNICATION, and COMPUTATION. Hence, the storage, network, graphics and process stacks. That's what an OS is all about; several interrelated stacks of ABSTRACTIONS. -- RK</i>",
      "id": "7c46cf1bee7747c507664ff4c175cd50"
    },
    {
      "type": "html",
      "text": "\nI thought #12 of the [[Operating Systems Design Principles]] was \"[[Exo Kernel]]\".  Exokernels have the explicit philosophy that operating systems <b>should not</b> provide abstractions.  That's a task better left to user-space libraries, because [[All Abstractions Lie]].  Instead, the interface that user-space sees mimics the physical hardware to the greatest degree possible.  It's the library designers' job to abstract away the hardware.  -- [[Jonathan Tang]]",
      "id": "8673e61a17d9cc018441f00f0c4c7d2b"
    },
    {
      "type": "html",
      "text": "\nI don't understand the distinctions between user-space and kernel-space, nor between daemons and libraries. I suspect this is because they are artificial low-level bullshit. To the limited extent that I understand these distinctions, I am <i>convinced</i> that they are artificial low-level bullshit.",
      "id": "64eb1734074e2dcb0c376991078928df"
    },
    {
      "type": "html",
      "text": "\nI never did get around to fixing up the [[Exo Kernel]] page the way I wanted to; never got feedback on the subject.",
      "id": "05331687fcd9e6ec33d97e9ccd106cbb"
    },
    {
      "type": "html",
      "text": "\nMy position on the issue can be found at [[New Os Features]]/12 and also at [[Operating Systems Design Principles]]/Exokernel.",
      "id": "458bfd73e877c4d56ab5c4fc89e2341d"
    },
    {
      "type": "html",
      "text": "\nIn other words, I do NOT think of [[Exo Kernel]] as a low-level feature. I don't think of it as a feature at all but rather as a general organising / design principle. Which is what it must be in order to qualify for inclusion in [[Operating Systems Design Principles]].",
      "id": "c878c53b8a1911be2b46e7373e02691d"
    },
    {
      "type": "html",
      "text": "\nAn OS is not an exokernel just because it's limited in its scope to the point where it's useless crap. An OS is not an exokernel just because it's got some insignificant feature buried at a level of abstraction so low that operating systems architects (the smart ones anyways) don't bother thinking about. ",
      "id": "c76c9fda8879111acb05cea6866f397e"
    },
    {
      "type": "html",
      "text": "\nRather, to be an exokernel, an OS has to separate multiplexing from abstraction at EACH AND EVERY layer of abstraction. And there's a boatload more layers of abstraction even in the computation stack than just \"cpu\" and \"processes\". -- [[Richard Kulisz]]",
      "id": "84563f76b4181927908ef0d01b2c325e"
    },
    {
      "type": "html",
      "text": "\nIn most (all?) modern processors, the hardware supports certain instructions that are only available in \"protected mode\".  These do things like access the TLB, set and clear interrupt flags, and handle I/O - all the nitty gritty implementation details that you're rather not worry about.  The operating system is the only program that has access to these instructions.  If an application wants to make use of these services, it has to execute a system call (eg. SYSENTER and SYSEXIT instructions on the Pentium).  These switch the protection level on the CPU, and then transfer control to an address specified in the kernel's trap table.  The kernel then has to perform the specified operation on behalf of the application, because the application doesn't have privileges to perform it itself (and note that this is a <i>hardware</i> restriction, not something brain-dead OS designers cooked up).",
      "id": "3a7180b01ba0f093324799a62d846e88"
    },
    {
      "type": "html",
      "text": "\nThe system call mechanism is the boundary between \"user space\" and \"kernel space\".  Code running in kernel space has access to these protected-mode instructions.  Code running in user space doesn't.",
      "id": "86718b79893b5be175b7aa27a59c09f5"
    },
    {
      "type": "html",
      "text": "\nThe problem the [[Exo Kernel]] developers identified was that the defined system call mechanism presents an interface that application developers cannot get around.  If you want access to the disk, you <i>have</i> to go through the open/close/read/write syscalls (well, there's mmap...), because those're the system calls that the OS exposes.  But that locks you into a particular filesystem: if you're implementing a [[Data Base]] or [[Prevalence Layer]], you've got to simulate blocks on top of files, which are then built on top of blocks.  The result is inefficient and inflexible.",
      "id": "3c8bf58f8cfd93eac2cb6e70706528b6"
    },
    {
      "type": "html",
      "text": "\nAn [[Exo Kernel]] tries to make its syscalls mimic the underlying hardware as much as possible, so you don't get this [[Abstraction Inversion]].  You expose time-slices, disk blocks, TLB contents, etc.  Then user-space libraries are responsible for creating processes, threads, paging policies, filesystems, etc.  An application doesn't *have* to use any particular one of these formerly-OS abstractions: it can link against a different library and get a different abstraction of the underlying system resources.",
      "id": "b6cd7af4cc55b725e17f9f881fc72ff2"
    },
    {
      "type": "html",
      "text": "\nThat's why I don't understand what you mean when you say \"an OS has to separate multiplexing from abstraction at EACH AND EVERY layer of abstraction\".  The exokernel does not provide layers of abstraction at all.  Those are all in user-space libraries.  Instead, it just makes sure that there are no conflicts when the physical resources are accessed.  -- [[Jonathan Tang]]",
      "id": "616f6c7bb2f7e9d3d1527fad3d51d9a5"
    },
    {
      "type": "html",
      "text": "\nThank you for the exposition, I'm certain it will benefit the page.",
      "id": "ee2071b85104fae10801bcbd1408f215"
    },
    {
      "type": "html",
      "text": "\nIn programming languages too there is a distinction between \"the language\" and \"the libraries\". This distinction is BS from the user's point of view. The biggest and most important part of [[Smalltalk Language]] is its libraries. It's only from a language designer's point of view that you think about the importance of minimizing what's inherent and hard-coded into the language. And even then, if you're clever, you put in enough reflexion that the distinction simply doesn't matter.",
      "id": "8f75363cccfd82487cc3642f29673f61"
    },
    {
      "type": "html",
      "text": "\nIt's the same with operating systems. By putting enough reflexion into them, you can allow users to change everything at runtime, assuming sufficient privileges. It should be a design goal of any and every operating system project to be able to replace the entire OS dynamically, at runtime. If you have that level of reflexion, it ceases to matter how big of a \"kernel\" you've got. The distinction between user-space and kernel-space simply ceases to matter.",
      "id": "e27a62ee5ad03b79ce75732e0b52f131"
    },
    {
      "type": "html",
      "text": "\nNote here that we're talking about \"kernels\" and not operating systems. An operating system includes ALL of its libraries and other components. A good OS doesn't merely have extensive abstractions provided by its libraries but rather has LAYERED abstractions. This is obvious in the networking stack. If you've studied the subject area, its necessity is also obvious in the storage stack. If system programmers weren't fools, it would also be obvious in the graphics stack. And finally, layering is also necessary in the computation stack.",
      "id": "6d959750bd1c93c5cc6efa2cdf84bf00"
    },
    {
      "type": "html",
      "text": "\nNow, in a badly designed OS, the abstractions provided in the different layers will have multiplexing mixed in. This is bad because it makes it more difficult to develop, install and test alternate abstractions in the system. For a clean and flexible operating system, abstraction should be separate from secure multiplexing at each and every layer of abstraction.",
      "id": "4c6fbc88326bd13346737db7ece553f9"
    },
    {
      "type": "html",
      "text": "\nAnd now on a completely different topic, there is a subtle issue in exokernels that has long puzzled me. If you multiplex a resource, should its consumers be aware of each other? If they are aware of each other then you must provide abstractions to arbitrate the resource (arbitration is an abstraction). OTOH, if they are not aware of each other then the resource you're providing is a complete fiction, an abstraction.",
      "id": "d95468a167a5e13f80ba59945409c425"
    },
    {
      "type": "html",
      "text": "\nFor example, if you multiplex a CPU then you can choose to expose individual time slices of the CPU. In that case, you must provide a method for users to secure and release particular time slices in the presence of other users doing the same. In contrast, you could expose a virtual CPU devoted to each individual user. But users would no longer be exposed to any particular time slice of the real CPU.",
      "id": "1da2efa5c262e9a145fc2af8eabb2999"
    },
    {
      "type": "html",
      "text": "\nWhen multiplexing RAM, this difference simply doesn't matter. It doesn't matter what particular part of real RAM you're using. The same with storage and graphics in general. In the case of the CPU, now that's an entirely different thing. Same with networking. So the question is, how do you expose time without providing arbitration abstractions? -- [[Richard Kulisz]]",
      "id": "8bda58ba353b1baa096d0ffd6ec15e19"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "511e853951f53c45eeabfaf511130ef5"
    },
    {
      "type": "html",
      "text": "\nIf you are into building your own OS (an increasingly popular sport;-) you should probably take a look at [http://www.cs.utah.edu/flux/oskit/ www.cs.utah.edu] where you will find a library of components that can be used to assemble custom operating systems tuned to your needs.",
      "id": "14953937ca552a0c625e1cc70bcd355c"
    },
    {
      "type": "html",
      "text": "<i>Using the flux toolkit to build your \"own\" custom is akin to \"writing\" a novel by transcribing the storyline off of one of those make-your-own adventure books. And you'll learn as little about operating systems as you would have writing. -- RK</i>",
      "id": "21a5f97fbf85f00ad884bc15f132c646"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "511e853951f53c45eeabfaf511130ef5"
    },
    {
      "type": "html",
      "text": "I, as someone who enjoys the challenge of writing kernels, have spent long hours contemplating the significance of exokernels.  I <i>love</i> the idea; however, I have never been successful in figuring out how to make them work in practice.",
      "id": "0eb34b97b9dabb8f1e0474869a4acb10"
    },
    {
      "type": "html",
      "text": " We all agree that they expose underlying hardware, but what if the hardware changes between runs of a system?  I might have a CD-ROM in one run, but a DVD-ROM in another.  Or, I might have an AMD Athlon in one, and a Pentium IV in the next (e.g., as with moving harddrives from one computer to another).",
      "id": "4f78722b2b1646808faf65d6a9516139"
    },
    {
      "type": "html",
      "text": " Just who is responsible for performing task switching in an exokernel?  If all it did was provide protection, but no multiplexing (as is required by pure-blooded exokernel philosophy), then no task would ever switch pre-emptively.  It'd be equivalent to a cooperatively multitasking environment.  Ouch.",
      "id": "c0c9893919cd98447763dcd161a26c46"
    },
    {
      "type": "html",
      "text": " Assuming the issue of task switching is resolved, how is inter-process communications handled?",
      "id": "8eb59e2e6696449089cb72cdfd37a2aa"
    },
    {
      "type": "html",
      "text": " One solution is to again take advantage of protection-without-multiplexing, which mandates a shared memory buffer of some kind, with each process <i>agreeing</i> to not overwrite the contents of another process' buffer contents.  This sounds dangerous.",
      "id": "4d29e7ca54607dc128b13edf0de29f3d"
    },
    {
      "type": "html",
      "text": " Alternatively, you can use a finite-sized shared buffer which is used to implement a <i>datagram messaging service</i> between processes.  The rule here is that, if your message would exceed the size of the buffer, you must defer the message and try again later.  Or just drop it.  Or just wrap around and overwrite the contents of the buffer starting at the beginning.  Either way, someone, somewhere, is going to have to re-send the message.  This just screams for problems in the runtime performance benchmarks.",
      "id": "4b6fcb5116d534e9dbff7b2c14c4e33b"
    },
    {
      "type": "html",
      "text": " How are multiple processes that share the same library-OS able to become aware of each other?  This is required, for example, if you need to swap out a few pages of another process to free up some RAM for yourself.",
      "id": "fb09f774951d3d6a33f79cdd863b939f"
    },
    {
      "type": "html",
      "text": " For that matter, what is the policy of swapping pages of processes that <i>don't</i> use the same libOS?  How is this situation handled?",
      "id": "b399222cc1620000612754bf6f3a7418"
    },
    {
      "type": "html",
      "text": "\nThis list is <i>not</i> exhaustive.  This is just a quick recollection of the issues that I faced when I was planning on writing an exokernel for myself.",
      "id": "7be2554e7d8511c63e677b80f1383dab"
    },
    {
      "type": "html",
      "text": "\nYou must have, at some level, <i>some</i> multiplexing in order to coordinate processes.  L4 is a microkernel which comes dangerously close to also being an exokernel, but even L4 provides some abstractions which I think you'll agree are necessary to make a working system.",
      "id": "bc643dd91de7c9a938f40bc1ecbe67a7"
    },
    {
      "type": "html",
      "text": "-- [[Samuel Falvo]]",
      "id": "ec4f429fad15794b23ffa4abd7fa5ae5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "511e853951f53c45eeabfaf511130ef5"
    },
    {
      "type": "html",
      "text": "See also [[Operating System Designers]], [[Operating Systems Research]], [[Why Do Operating Systems Suck]], [[Operating Systems Design Principles]]",
      "id": "ec265fc9640162c08b3585d57d77f13c"
    },
    {
      "type": "html",
      "text": "\n[[Category Operating System]]",
      "id": "76c1933b3305703890170440b30bb653"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?OperatingSystemsDesign c2.com]",
      "id": "941950e2f1d60d3281ef99c4317b300e"
    }
  ],
  "journal": [
    {
      "date": 1188580611000,
      "id": "8386cf7177119a654e9e01cd94b10cfd",
      "type": "create",
      "item": {
        "title": "Operating Systems Design",
        "story": [
          {
            "type": "html",
            "text": "OS design isn't taught in \"OS design\" classes and books like Operating Systems Concepts by [[Andrew Tanenbaum]] are a sick joke. What happens is that you get an instructor or writer who doesn't understand the first thing about OS design, doesn't know the state of the art, probably doesn't even understand what design <i>is</i>. So what do they do? They teach you how to reimplement Unix, a 30 year obsolete architecture! How can they be so stupid? See [[Excerption Not Abstraction]] and [[Cargo Cult]].",
            "id": "5c25c7d52905c18e6608283a99626d6b"
          },
          {
            "type": "html",
            "text": "\nSo what does a fresh eager student do if they want to avoid having their imagination utterly destroyed by an Andy Tanenbaum spouting irrelevancies like global vs local address spaces, synchronous vs asynchronous messages, and the 23 secret ways to resolve deadlocks? Start with a [[Crash Course In Os Design]]. Also learn the [[Operating Systems Design Principles]] and meditate on them a lot.",
            "id": "47d843deb05f56c21a1d745775510fec"
          },
          {
            "type": "html",
            "text": "(The discussion of capability and ACL security models that was here, has been moved to [[Capability Security Discussion]].)",
            "id": "8351ea3e8eff18aa4f56a53307762d82"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "511e853951f53c45eeabfaf511130ef5"
          },
          {
            "type": "html",
            "text": " [[Micro Kernel]]",
            "id": "8e7e39113c013749319ecf0c6f7e2718"
          },
          {
            "type": "html",
            "text": " [[Monolithic Kernel]]",
            "id": "981d0ba43ee10520aef18ae64dea9da8"
          },
          {
            "type": "html",
            "text": " [[Boot Strap]]",
            "id": "285686e7dca7ffb733c12c1cce29d64a"
          },
          {
            "type": "html",
            "text": "\n[[Monolithic Kernel]] and [[Boot Strap]] aren't fundamental OS concepts at all, only implementation details. And [[Micro Kernel]] (or [[Nano Kernel]]) are obsoleted by [[Exo Kernel]] as a fundamental OS concept.",
            "id": "e27daee361d086a4f9345f4dee962cd3"
          },
          {
            "type": "html",
            "text": "<i>People agree with this? Isn't [[Windows Nt Kernel]] [[Micro Kernel]]? --[[Takuya Murata]]</i>",
            "id": "d05d6737558a67666e0f05fdfc0a4046"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "511e853951f53c45eeabfaf511130ef5"
          },
          {
            "type": "html",
            "text": "\n[[Extreme Programmer]]s help us out here -- It seems that a team of 6 could build a better [[Operating System]] in a month, and then could continue to add features as it got smaller and smaller over time.",
            "id": "4497a27e7bd91c1cb688e7f1793c2357"
          },
          {
            "type": "html",
            "text": "\n[[Operating Systems]] used to be small, RAM was expensive.  Now they are big and getting bigger.  What exactly are the requirements (tell some stories) of an OS?",
            "id": "eaa601cc3b10e058ecbaaa35839551fe"
          },
          {
            "type": "html",
            "text": " Scheduler of processes",
            "id": "ec1e044d6e965cb37391b2a88d1cfb65"
          },
          {
            "type": "html",
            "text": " Handler of interprocess communication",
            "id": "a76ada0f7f310519f0b8605ed6b080f9"
          },
          {
            "type": "html",
            "text": " Speaker to low level [[Input Output]] devices",
            "id": "b065b413b3c5ba3fb5a37e54e480bdd1"
          },
          {
            "type": "html",
            "text": " Q:<br>does the OS really have to do this or is a process sufficient? and do you <i>need</i> multiple processes?",
            "id": "0bc62945626b769ba7abeedaf0e238c6"
          },
          {
            "type": "html",
            "text": "\n[[Operating Systems As Religions]] examines the whole topic from a humanist perspective.",
            "id": "3d3cb709cc662d4be2e5fe75a4f76d30"
          },
          {
            "type": "html",
            "text": "\nThe OS should, on a multiuser system, be able to preempt a running process, to keep a user from locking the system with their own malicious (or just poorly written) program. However, all the OSes I have seen are based on the [[Von Neumann Paradigm]] of computers. Perhaps it is time for new thinking, open up alternatives to memory-mapped io or DMA. [[Jacob Cohen]].",
            "id": "21f66ef78e712c54d80c499fb25db169"
          },
          {
            "type": "html",
            "text": "<i>You're focusing on two things you should never talk about when discussing design goals. First, you're talking about implementation details (eg, a \"process\"). Second, you're not even talking about the abstractions and principles which the users will see after you've abstracted away the hardware. Rather, you're talking about the ones that YOU see coming from the damned hardware! So not only are you doing a miserable job of expressing design goals, but you're not even talking about design goals at all.</i>",
            "id": "29ebdee7bc1f67b7ff2e0dad9f8e5828"
          },
          {
            "type": "html",
            "text": "<i>In case it escaped your notice, all programmers talk about OSes the same way you do. Even the ones that build them. This should tell you that they're all incompetent fools. Which they are, with very few exceptions.</i>",
            "id": "0e4f32a7e94dfd3da3144f84932a114a"
          },
          {
            "type": "html",
            "text": "<i>So what's an OS all about? It's something that provides STORAGE, COMMUNICATION, and COMPUTATION. Hence, the storage, network, graphics and process stacks. That's what an OS is all about; several interrelated stacks of ABSTRACTIONS. -- RK</i>",
            "id": "7c46cf1bee7747c507664ff4c175cd50"
          },
          {
            "type": "html",
            "text": "\nI thought #12 of the [[Operating Systems Design Principles]] was \"[[Exo Kernel]]\".  Exokernels have the explicit philosophy that operating systems <b>should not</b> provide abstractions.  That's a task better left to user-space libraries, because [[All Abstractions Lie]].  Instead, the interface that user-space sees mimics the physical hardware to the greatest degree possible.  It's the library designers' job to abstract away the hardware.  -- [[Jonathan Tang]]",
            "id": "8673e61a17d9cc018441f00f0c4c7d2b"
          },
          {
            "type": "html",
            "text": "\nI don't understand the distinctions between user-space and kernel-space, nor between daemons and libraries. I suspect this is because they are artificial low-level bullshit. To the limited extent that I understand these distinctions, I am <i>convinced</i> that they are artificial low-level bullshit.",
            "id": "64eb1734074e2dcb0c376991078928df"
          },
          {
            "type": "html",
            "text": "\nI never did get around to fixing up the [[Exo Kernel]] page the way I wanted to; never got feedback on the subject.",
            "id": "05331687fcd9e6ec33d97e9ccd106cbb"
          },
          {
            "type": "html",
            "text": "\nMy position on the issue can be found at [[New Os Features]]/12 and also at [[Operating Systems Design Principles]]/Exokernel.",
            "id": "458bfd73e877c4d56ab5c4fc89e2341d"
          },
          {
            "type": "html",
            "text": "\nIn other words, I do NOT think of [[Exo Kernel]] as a low-level feature. I don't think of it as a feature at all but rather as a general organising / design principle. Which is what it must be in order to qualify for inclusion in [[Operating Systems Design Principles]].",
            "id": "c878c53b8a1911be2b46e7373e02691d"
          },
          {
            "type": "html",
            "text": "\nAn OS is not an exokernel just because it's limited in its scope to the point where it's useless crap. An OS is not an exokernel just because it's got some insignificant feature buried at a level of abstraction so low that operating systems architects (the smart ones anyways) don't bother thinking about. ",
            "id": "c76c9fda8879111acb05cea6866f397e"
          },
          {
            "type": "html",
            "text": "\nRather, to be an exokernel, an OS has to separate multiplexing from abstraction at EACH AND EVERY layer of abstraction. And there's a boatload more layers of abstraction even in the computation stack than just \"cpu\" and \"processes\". -- [[Richard Kulisz]]",
            "id": "84563f76b4181927908ef0d01b2c325e"
          },
          {
            "type": "html",
            "text": "\nIn most (all?) modern processors, the hardware supports certain instructions that are only available in \"protected mode\".  These do things like access the TLB, set and clear interrupt flags, and handle I/O - all the nitty gritty implementation details that you're rather not worry about.  The operating system is the only program that has access to these instructions.  If an application wants to make use of these services, it has to execute a system call (eg. SYSENTER and SYSEXIT instructions on the Pentium).  These switch the protection level on the CPU, and then transfer control to an address specified in the kernel's trap table.  The kernel then has to perform the specified operation on behalf of the application, because the application doesn't have privileges to perform it itself (and note that this is a <i>hardware</i> restriction, not something brain-dead OS designers cooked up).",
            "id": "3a7180b01ba0f093324799a62d846e88"
          },
          {
            "type": "html",
            "text": "\nThe system call mechanism is the boundary between \"user space\" and \"kernel space\".  Code running in kernel space has access to these protected-mode instructions.  Code running in user space doesn't.",
            "id": "86718b79893b5be175b7aa27a59c09f5"
          },
          {
            "type": "html",
            "text": "\nThe problem the [[Exo Kernel]] developers identified was that the defined system call mechanism presents an interface that application developers cannot get around.  If you want access to the disk, you <i>have</i> to go through the open/close/read/write syscalls (well, there's mmap...), because those're the system calls that the OS exposes.  But that locks you into a particular filesystem: if you're implementing a [[Data Base]] or [[Prevalence Layer]], you've got to simulate blocks on top of files, which are then built on top of blocks.  The result is inefficient and inflexible.",
            "id": "3c8bf58f8cfd93eac2cb6e70706528b6"
          },
          {
            "type": "html",
            "text": "\nAn [[Exo Kernel]] tries to make its syscalls mimic the underlying hardware as much as possible, so you don't get this [[Abstraction Inversion]].  You expose time-slices, disk blocks, TLB contents, etc.  Then user-space libraries are responsible for creating processes, threads, paging policies, filesystems, etc.  An application doesn't *have* to use any particular one of these formerly-OS abstractions: it can link against a different library and get a different abstraction of the underlying system resources.",
            "id": "b6cd7af4cc55b725e17f9f881fc72ff2"
          },
          {
            "type": "html",
            "text": "\nThat's why I don't understand what you mean when you say \"an OS has to separate multiplexing from abstraction at EACH AND EVERY layer of abstraction\".  The exokernel does not provide layers of abstraction at all.  Those are all in user-space libraries.  Instead, it just makes sure that there are no conflicts when the physical resources are accessed.  -- [[Jonathan Tang]]",
            "id": "616f6c7bb2f7e9d3d1527fad3d51d9a5"
          },
          {
            "type": "html",
            "text": "\nThank you for the exposition, I'm certain it will benefit the page.",
            "id": "ee2071b85104fae10801bcbd1408f215"
          },
          {
            "type": "html",
            "text": "\nIn programming languages too there is a distinction between \"the language\" and \"the libraries\". This distinction is BS from the user's point of view. The biggest and most important part of [[Smalltalk Language]] is its libraries. It's only from a language designer's point of view that you think about the importance of minimizing what's inherent and hard-coded into the language. And even then, if you're clever, you put in enough reflexion that the distinction simply doesn't matter.",
            "id": "8f75363cccfd82487cc3642f29673f61"
          },
          {
            "type": "html",
            "text": "\nIt's the same with operating systems. By putting enough reflexion into them, you can allow users to change everything at runtime, assuming sufficient privileges. It should be a design goal of any and every operating system project to be able to replace the entire OS dynamically, at runtime. If you have that level of reflexion, it ceases to matter how big of a \"kernel\" you've got. The distinction between user-space and kernel-space simply ceases to matter.",
            "id": "e27a62ee5ad03b79ce75732e0b52f131"
          },
          {
            "type": "html",
            "text": "\nNote here that we're talking about \"kernels\" and not operating systems. An operating system includes ALL of its libraries and other components. A good OS doesn't merely have extensive abstractions provided by its libraries but rather has LAYERED abstractions. This is obvious in the networking stack. If you've studied the subject area, its necessity is also obvious in the storage stack. If system programmers weren't fools, it would also be obvious in the graphics stack. And finally, layering is also necessary in the computation stack.",
            "id": "6d959750bd1c93c5cc6efa2cdf84bf00"
          },
          {
            "type": "html",
            "text": "\nNow, in a badly designed OS, the abstractions provided in the different layers will have multiplexing mixed in. This is bad because it makes it more difficult to develop, install and test alternate abstractions in the system. For a clean and flexible operating system, abstraction should be separate from secure multiplexing at each and every layer of abstraction.",
            "id": "4c6fbc88326bd13346737db7ece553f9"
          },
          {
            "type": "html",
            "text": "\nAnd now on a completely different topic, there is a subtle issue in exokernels that has long puzzled me. If you multiplex a resource, should its consumers be aware of each other? If they are aware of each other then you must provide abstractions to arbitrate the resource (arbitration is an abstraction). OTOH, if they are not aware of each other then the resource you're providing is a complete fiction, an abstraction.",
            "id": "d95468a167a5e13f80ba59945409c425"
          },
          {
            "type": "html",
            "text": "\nFor example, if you multiplex a CPU then you can choose to expose individual time slices of the CPU. In that case, you must provide a method for users to secure and release particular time slices in the presence of other users doing the same. In contrast, you could expose a virtual CPU devoted to each individual user. But users would no longer be exposed to any particular time slice of the real CPU.",
            "id": "1da2efa5c262e9a145fc2af8eabb2999"
          },
          {
            "type": "html",
            "text": "\nWhen multiplexing RAM, this difference simply doesn't matter. It doesn't matter what particular part of real RAM you're using. The same with storage and graphics in general. In the case of the CPU, now that's an entirely different thing. Same with networking. So the question is, how do you expose time without providing arbitration abstractions? -- [[Richard Kulisz]]",
            "id": "8bda58ba353b1baa096d0ffd6ec15e19"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "511e853951f53c45eeabfaf511130ef5"
          },
          {
            "type": "html",
            "text": "\nIf you are into building your own OS (an increasingly popular sport;-) you should probably take a look at [http://www.cs.utah.edu/flux/oskit/ www.cs.utah.edu] where you will find a library of components that can be used to assemble custom operating systems tuned to your needs.",
            "id": "14953937ca552a0c625e1cc70bcd355c"
          },
          {
            "type": "html",
            "text": "<i>Using the flux toolkit to build your \"own\" custom is akin to \"writing\" a novel by transcribing the storyline off of one of those make-your-own adventure books. And you'll learn as little about operating systems as you would have writing. -- RK</i>",
            "id": "21a5f97fbf85f00ad884bc15f132c646"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "511e853951f53c45eeabfaf511130ef5"
          },
          {
            "type": "html",
            "text": "I, as someone who enjoys the challenge of writing kernels, have spent long hours contemplating the significance of exokernels.  I <i>love</i> the idea; however, I have never been successful in figuring out how to make them work in practice.",
            "id": "0eb34b97b9dabb8f1e0474869a4acb10"
          },
          {
            "type": "html",
            "text": " We all agree that they expose underlying hardware, but what if the hardware changes between runs of a system?  I might have a CD-ROM in one run, but a DVD-ROM in another.  Or, I might have an AMD Athlon in one, and a Pentium IV in the next (e.g., as with moving harddrives from one computer to another).",
            "id": "4f78722b2b1646808faf65d6a9516139"
          },
          {
            "type": "html",
            "text": " Just who is responsible for performing task switching in an exokernel?  If all it did was provide protection, but no multiplexing (as is required by pure-blooded exokernel philosophy), then no task would ever switch pre-emptively.  It'd be equivalent to a cooperatively multitasking environment.  Ouch.",
            "id": "c0c9893919cd98447763dcd161a26c46"
          },
          {
            "type": "html",
            "text": " Assuming the issue of task switching is resolved, how is inter-process communications handled?",
            "id": "8eb59e2e6696449089cb72cdfd37a2aa"
          },
          {
            "type": "html",
            "text": " One solution is to again take advantage of protection-without-multiplexing, which mandates a shared memory buffer of some kind, with each process <i>agreeing</i> to not overwrite the contents of another process' buffer contents.  This sounds dangerous.",
            "id": "4d29e7ca54607dc128b13edf0de29f3d"
          },
          {
            "type": "html",
            "text": " Alternatively, you can use a finite-sized shared buffer which is used to implement a <i>datagram messaging service</i> between processes.  The rule here is that, if your message would exceed the size of the buffer, you must defer the message and try again later.  Or just drop it.  Or just wrap around and overwrite the contents of the buffer starting at the beginning.  Either way, someone, somewhere, is going to have to re-send the message.  This just screams for problems in the runtime performance benchmarks.",
            "id": "4b6fcb5116d534e9dbff7b2c14c4e33b"
          },
          {
            "type": "html",
            "text": " How are multiple processes that share the same library-OS able to become aware of each other?  This is required, for example, if you need to swap out a few pages of another process to free up some RAM for yourself.",
            "id": "fb09f774951d3d6a33f79cdd863b939f"
          },
          {
            "type": "html",
            "text": " For that matter, what is the policy of swapping pages of processes that <i>don't</i> use the same libOS?  How is this situation handled?",
            "id": "b399222cc1620000612754bf6f3a7418"
          },
          {
            "type": "html",
            "text": "\nThis list is <i>not</i> exhaustive.  This is just a quick recollection of the issues that I faced when I was planning on writing an exokernel for myself.",
            "id": "7be2554e7d8511c63e677b80f1383dab"
          },
          {
            "type": "html",
            "text": "\nYou must have, at some level, <i>some</i> multiplexing in order to coordinate processes.  L4 is a microkernel which comes dangerously close to also being an exokernel, but even L4 provides some abstractions which I think you'll agree are necessary to make a working system.",
            "id": "bc643dd91de7c9a938f40bc1ecbe67a7"
          },
          {
            "type": "html",
            "text": "-- [[Samuel Falvo]]",
            "id": "ec4f429fad15794b23ffa4abd7fa5ae5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "511e853951f53c45eeabfaf511130ef5"
          },
          {
            "type": "html",
            "text": "See also [[Operating System Designers]], [[Operating Systems Research]], [[Why Do Operating Systems Suck]], [[Operating Systems Design Principles]]",
            "id": "ec265fc9640162c08b3585d57d77f13c"
          },
          {
            "type": "html",
            "text": "\n[[Category Operating System]]",
            "id": "76c1933b3305703890170440b30bb653"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?OperatingSystemsDesign c2.com]",
            "id": "941950e2f1d60d3281ef99c4317b300e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1665179285836
    }
  ]
}