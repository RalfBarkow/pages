{
  "title": "Tether",
  "story": [
    {
      "type": "markdown",
      "id": "0e32e732151e94d5",
      "text": "\n"
    },
    {
      "type": "markdown",
      "id": "7fa41a402aade5dd",
      "text": "Tether, [https://thiscontext.com/2016/10/30/tether-remote-messaging-between-smalltalks-with-websockets/ page] is an integral part of the [https://thiscontext.com/2015/01/16/context-status-2015-01-16/ Context] project from [http://blackpagedigital.com/ Black Page Digital]. A  demo of remote messaging between [[SqueakJS]] and [[Cog]] was available."
    },
    {
      "type": "markdown",
      "id": "0902cc16e96d701f",
      "text": "# Passive Frame-Based Message Exchange With WebSockets"
    },
    {
      "type": "markdown",
      "id": "dc97ed566ad508a2",
      "text": "We begin with a major constraint imposed by running in a web browser: we’re sandboxed, unable to listen for network connections. We must initiate a remote-messaging conversation by connecting to a listening server on a traditional operating system. \n"
    },
    {
      "type": "markdown",
      "id": "b9eceeaf15fe3fd4",
      "text": "Over the last few years, the W3C WebSockets standard has received widespread support in every major web browser. We can rely on the ability to create JavaScript WebSocket objects with the [[SqueakJS]] JavaScript bridge, and we can easily implement the WebSocket API in Smalltalk on non-web platforms using normal TCP sockets.\n"
    },
    {
      "type": "markdown",
      "id": "66022bd3d17fd8b4",
      "text": "WebSockets use callback functions to deliver messages, or *frames* of bytes, between conversants. The Tether protocol imposes a structure on those bytes, which are processed on each side of the connection by instances of class Tether. The first four bytes are a 32-bit *tag* which indicates the Smalltalk class which should interpret the rest of the frame. In the case of a remote message, this is class Tether. Successive bytes indicate the message selector to perform, the receiver of the message, and the message parameters.\n"
    },
    {
      "type": "markdown",
      "id": "bdab6f58a8dd1d7a",
      "text": "The message receiver is expressed as a 32-bit key into a table of exposed objects, maintained by the Tether instance handling the connection. The Tether instances themselves expose their identities to each other at the beginning of the conversation. Objects that aren’t specified by reference to an exposed-object table (such as message selectors) are expressed through serialization."
    },
    {
      "type": "markdown",
      "id": "898909c95fd0a251",
      "text": "⇒ [[Live Serialization]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Tether",
        "story": []
      },
      "date": 1628926791147
    },
    {
      "item": {
        "type": "factory",
        "id": "0e32e732151e94d5"
      },
      "id": "0e32e732151e94d5",
      "type": "add",
      "date": 1628926792710
    },
    {
      "type": "edit",
      "id": "0e32e732151e94d5",
      "item": {
        "type": "markdown",
        "id": "0e32e732151e94d5",
        "text": "#Passive frame-based message exchange with WebSockets"
      },
      "date": 1628926801992
    },
    {
      "type": "edit",
      "id": "0e32e732151e94d5",
      "item": {
        "type": "markdown",
        "id": "0e32e732151e94d5",
        "text": "# Passive frame-based message exchange with WebSockets"
      },
      "date": 1628926808877
    },
    {
      "type": "edit",
      "id": "0e32e732151e94d5",
      "item": {
        "type": "markdown",
        "id": "0e32e732151e94d5",
        "text": "# Passive frame-based message exchange with WebSockets\n"
      },
      "date": 1628926814732
    },
    {
      "type": "add",
      "id": "dc97ed566ad508a2",
      "item": {
        "type": "markdown",
        "id": "dc97ed566ad508a2",
        "text": "We begin with a major constraint imposed by running in a web browser: we’re sandboxed, unable to listen for network connections. We must initiate a remote-messaging conversation by connecting to a listening server on a traditional operating system. Over the last few years, the W3C WebSockets standard has received widespread support in every major web browser. We can rely on the ability to create JavaScript WebSocket objects with the SqueakJS JavaScript bridge, and we can easily implement the WebSocket API in Smalltalk on non-web platforms using normal TCP sockets."
      },
      "after": "0e32e732151e94d5",
      "date": 1628926816930
    },
    {
      "type": "edit",
      "id": "dc97ed566ad508a2",
      "item": {
        "type": "markdown",
        "id": "dc97ed566ad508a2",
        "text": "We begin with a major constraint imposed by running in a web browser: we’re sandboxed, unable to listen for network connections. We must initiate a remote-messaging conversation by connecting to a listening server on a traditional operating system. \n"
      },
      "date": 1628926834714
    },
    {
      "type": "add",
      "id": "b9eceeaf15fe3fd4",
      "item": {
        "type": "markdown",
        "id": "b9eceeaf15fe3fd4",
        "text": "Over the last few years, the W3C WebSockets standard has received widespread support in every major web browser. We can rely on the ability to create JavaScript WebSocket objects with the SqueakJS JavaScript bridge, and we can easily implement the WebSocket API in Smalltalk on non-web platforms using normal TCP sockets."
      },
      "after": "dc97ed566ad508a2",
      "date": 1628926836372
    },
    {
      "type": "edit",
      "id": "b9eceeaf15fe3fd4",
      "item": {
        "type": "markdown",
        "id": "b9eceeaf15fe3fd4",
        "text": "Over the last few years, the W3C WebSockets standard has received widespread support in every major web browser. We can rely on the ability to create JavaScript WebSocket objects with the [[SqueakJS]] JavaScript bridge, and we can easily implement the WebSocket API in Smalltalk on non-web platforms using normal TCP sockets."
      },
      "date": 1628926861729
    },
    {
      "type": "edit",
      "id": "b9eceeaf15fe3fd4",
      "item": {
        "type": "markdown",
        "id": "b9eceeaf15fe3fd4",
        "text": "Over the last few years, the W3C WebSockets standard has received widespread support in every major web browser. We can rely on the ability to create JavaScript WebSocket objects with the [[SqueakJS]] JavaScript bridge, and we can easily implement the WebSocket API in Smalltalk on non-web platforms using normal TCP sockets.\n"
      },
      "date": 1628926878950
    },
    {
      "type": "add",
      "id": "66022bd3d17fd8b4",
      "item": {
        "type": "markdown",
        "id": "66022bd3d17fd8b4",
        "text": "WebSockets use callback functions to deliver messages, or *frames* of bytes, between conversants. The [[Tether]] protocol imposes a structure on those bytes, which are processed on each side of the connection by instances of class Tether. The first four bytes are a 32-bit tag which indicates the Smalltalk class which should interpret the rest of the frame. In the case of a remote message, this is class Tether. Successive bytes indicate the message selector to perform, the receiver of the message, and the message parameters."
      },
      "after": "b9eceeaf15fe3fd4",
      "date": 1628926902127
    },
    {
      "type": "edit",
      "id": "66022bd3d17fd8b4",
      "item": {
        "type": "markdown",
        "id": "66022bd3d17fd8b4",
        "text": "WebSockets use callback functions to deliver messages, or *frames* of bytes, between conversants. The [[Tether]] protocol imposes a structure on those bytes, which are processed on each side of the connection by instances of class Tether. The first four bytes are a 32-bit *tag* which indicates the Smalltalk class which should interpret the rest of the frame. In the case of a remote message, this is class Tether. Successive bytes indicate the message selector to perform, the receiver of the message, and the message parameters."
      },
      "date": 1628926936466
    },
    {
      "type": "edit",
      "id": "66022bd3d17fd8b4",
      "item": {
        "type": "markdown",
        "id": "66022bd3d17fd8b4",
        "text": "WebSockets use callback functions to deliver messages, or *frames* of bytes, between conversants. The [[Tether]] protocol imposes a structure on those bytes, which are processed on each side of the connection by instances of class Tether. The first four bytes are a 32-bit *tag* which indicates the Smalltalk class which should interpret the rest of the frame. In the case of a remote message, this is class Tether. Successive bytes indicate the message selector to perform, the receiver of the message, and the message parameters.\n"
      },
      "date": 1628926975916
    },
    {
      "type": "add",
      "id": "bdab6f58a8dd1d7a",
      "item": {
        "type": "markdown",
        "id": "bdab6f58a8dd1d7a",
        "text": "The message receiver is expressed as a 32-bit key into a table of exposed objects, maintained by the Tether instance handling the connection. The Tether instances themselves expose their identities to each other at the beginning of the conversation. Objects that aren’t specified by reference to an exposed-object table (such as message selectors) are expressed through serialization."
      },
      "after": "66022bd3d17fd8b4",
      "date": 1628926979035
    },
    {
      "item": {
        "type": "factory",
        "id": "898909c95fd0a251"
      },
      "id": "898909c95fd0a251",
      "type": "add",
      "after": "bdab6f58a8dd1d7a",
      "date": 1628927066161
    },
    {
      "type": "edit",
      "id": "898909c95fd0a251",
      "item": {
        "type": "markdown",
        "id": "898909c95fd0a251",
        "text": "Next: [[Live serialization]]"
      },
      "date": 1628927074597
    },
    {
      "type": "edit",
      "id": "0e32e732151e94d5",
      "item": {
        "type": "markdown",
        "id": "0e32e732151e94d5",
        "text": "\n"
      },
      "date": 1628935023968
    },
    {
      "type": "add",
      "id": "7fa41a402aade5dd",
      "item": {
        "type": "markdown",
        "id": "7fa41a402aade5dd",
        "text": "[[Tether]] is an integral part of the [https://thiscontext.com/2015/01/16/context-status-2015-01-16/ Context] project from [http://blackpagedigital.com/ Black Page Digital]. A  demo of remote messaging between SqueakJS and Cog was available. \n\n# Passive frame-based message exchange with WebSockets\n"
      },
      "after": "0e32e732151e94d5",
      "date": 1628935027376
    },
    {
      "type": "edit",
      "id": "7fa41a402aade5dd",
      "item": {
        "type": "markdown",
        "id": "7fa41a402aade5dd",
        "text": "[[Tether]], https://thiscontext.com/2016/10/30/tether-remote-messaging-between-smalltalks-with-websockets/ page] is an integral part of the [https://thiscontext.com/2015/01/16/context-status-2015-01-16/ Context] project from [http://blackpagedigital.com/ Black Page Digital]. A  demo of remote messaging between SqueakJS and Cog was available. \n\n# Passive frame-based message exchange with WebSockets\n"
      },
      "date": 1628935105665
    },
    {
      "type": "edit",
      "id": "7fa41a402aade5dd",
      "item": {
        "type": "markdown",
        "id": "7fa41a402aade5dd",
        "text": "[[Tether]], [https://thiscontext.com/2016/10/30/tether-remote-messaging-between-smalltalks-with-websockets/ page] is an integral part of the [https://thiscontext.com/2015/01/16/context-status-2015-01-16/ Context] project from [http://blackpagedigital.com/ Black Page Digital]. A  demo of remote messaging between SqueakJS and Cog was available. \n\n# Passive frame-based message exchange with WebSockets\n"
      },
      "date": 1628935116079
    },
    {
      "type": "edit",
      "id": "7fa41a402aade5dd",
      "item": {
        "type": "markdown",
        "id": "7fa41a402aade5dd",
        "text": "[[Tether]], [https://thiscontext.com/2016/10/30/tether-remote-messaging-between-smalltalks-with-websockets/ page] is an integral part of the [https://thiscontext.com/2015/01/16/context-status-2015-01-16/ Context] project from [http://blackpagedigital.com/ Black Page Digital]. A  demo of remote messaging between [[SqueakJS]] and [[Cog]] was available. \n\n# Passive frame-based message exchange with WebSockets\n"
      },
      "date": 1628935237823
    },
    {
      "type": "edit",
      "id": "66022bd3d17fd8b4",
      "item": {
        "type": "markdown",
        "id": "66022bd3d17fd8b4",
        "text": "WebSockets use callback functions to deliver messages, or *frames* of bytes, between conversants. The Tether protocol imposes a structure on those bytes, which are processed on each side of the connection by instances of class Tether. The first four bytes are a 32-bit *tag* which indicates the Smalltalk class which should interpret the rest of the frame. In the case of a remote message, this is class Tether. Successive bytes indicate the message selector to perform, the receiver of the message, and the message parameters.\n"
      },
      "date": 1676867623900
    },
    {
      "type": "edit",
      "id": "7fa41a402aade5dd",
      "item": {
        "type": "markdown",
        "id": "7fa41a402aade5dd",
        "text": "Tether, [https://thiscontext.com/2016/10/30/tether-remote-messaging-between-smalltalks-with-websockets/ page] is an integral part of the [https://thiscontext.com/2015/01/16/context-status-2015-01-16/ Context] project from [http://blackpagedigital.com/ Black Page Digital]. A  demo of remote messaging between [[SqueakJS]] and [[Cog]] was available. \n\n# Passive frame-based message exchange with WebSockets\n"
      },
      "date": 1676867651897
    },
    {
      "type": "edit",
      "id": "898909c95fd0a251",
      "item": {
        "type": "markdown",
        "id": "898909c95fd0a251",
        "text": "⇒ [[Live Serialization]]"
      },
      "date": 1676867679833
    },
    {
      "type": "edit",
      "id": "7fa41a402aade5dd",
      "item": {
        "type": "markdown",
        "id": "7fa41a402aade5dd",
        "text": "Tether, [https://thiscontext.com/2016/10/30/tether-remote-messaging-between-smalltalks-with-websockets/ page] is an integral part of the [https://thiscontext.com/2015/01/16/context-status-2015-01-16/ Context] project from [http://blackpagedigital.com/ Black Page Digital]. A  demo of remote messaging between [[SqueakJS]] and [[Cog]] was available."
      },
      "date": 1704621828888
    },
    {
      "type": "add",
      "id": "0902cc16e96d701f",
      "item": {
        "type": "markdown",
        "id": "0902cc16e96d701f",
        "text": "# Passive frame-based message exchange with WebSockets"
      },
      "after": "7fa41a402aade5dd",
      "date": 1704621829899
    },
    {
      "type": "edit",
      "id": "0902cc16e96d701f",
      "item": {
        "type": "markdown",
        "id": "0902cc16e96d701f",
        "text": "# Passive Frame-Based Message Exchange With WebSockets"
      },
      "date": 1704621993225
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1704998556436
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1706204822883
    }
  ]
}