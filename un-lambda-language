{
  "title": "Un Lambda Language",
  "story": [
    {
      "type": "html",
      "text": "[[Scheme Language]] without the fluff. Unlambda enables (read: forces) the developer to write programs using the [[Ess And Kay Combinators]]. As a sop to the lazy, the 'I' combinator is provided as syntactic sugar.",
      "id": "cf8d639b54e857921c42dea0879760e6"
    },
    {
      "type": "html",
      "text": "\nThe 'd' and 'c' special forms provide easy access to promises and continuations.",
      "id": "85c7c6e247852db58d902751a24dfee6"
    },
    {
      "type": "html",
      "text": "\nThe main [[Un Lambda Language]] homepage can be found at [http://www.madore.org/~david/programs/unlambda/ www.madore.org]. [http://www.ofb.net/~jlm/unlambda/unlambda.html www.ofb.net] also has a distribution available.",
      "id": "dc557f44a4652ae421b5bc587ef02e96"
    },
    {
      "type": "html",
      "text": "\n[http://www.eleves.ens.fr:8080/home/madore/programs/unlambda/ www.eleves.ens.fr:8080] gives the follwing example of an Unlambda program:",
      "id": "49e40c8e52f1774bf1f5b15033a5b5e6"
    },
    {
      "type": "html",
      "text": "```s``s``sii``s`kk`ki`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks`",
      "id": "91ea82fa0a789c3a4cbce27f6df94b01"
    },
    {
      "type": "html",
      "text": "`s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`k\ns``s`kk`kk``s`kk`kr``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk",
      "id": "8a388577536e58ce2af39f8e8c096117"
    },
    {
      "type": "html",
      "text": "`ks``s``s`ks``s`kk`kk`ki``s``s`ks``s`kk`kk``s`kk`k.*``s``s`ks``s`kk`kk",
      "id": "830e00caefd43ac496bb133aa3f5f4ba"
    },
    {
      "type": "html",
      "text": "``s`kki``s``s`ks``s`kk`kk``s`kki``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\ns``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`k``s``s`ks``s``s`ks`",
      "id": "b7c236fdd246fb69bec2fed9f560590d"
    },
    {
      "type": "html",
      "text": "`s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`k\ns``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk",
      "id": "aa71a7f98d525092257e03807ebf816d"
    },
    {
      "type": "html",
      "text": "`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s``s`ks``s`\nkk`kk``s`kki``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`\nkk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``\ns`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks",
      "id": "a6546c130af71c2a5b812fa3a4dc7f94"
    },
    {
      "type": "html",
      "text": "``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\nkk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``\ns`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk",
      "id": "1d36cf689da4e157e35eec9af5454d63"
    },
    {
      "type": "html",
      "text": "`ki``s`kk`ki",
      "id": "71400462d33521749f308283a88d6f32"
    },
    {
      "type": "html",
      "text": "\nThis program finds each sucessive term in the [[Fibonacci Sequence]] and prints that many asterisks. Allegedly.",
      "id": "7c325826492bb3a19486e9efcae2d2b5"
    },
    {
      "type": "html",
      "text": "\nThe core constructs are <i>s</i>, <i>k</i>, <i>i</i>, which correspond to the <b>SKI</b> combinators; backquote which is a grouping operator; and <i>.<b>x</b></i>, which prints the character <i>x</i>. ",
      "id": "dcbe22c99cc915373478caf9c1337014"
    },
    {
      "type": "html",
      "text": "<i>I suspect this program was not written by hand. -- [[Stephan Houben]]</i>",
      "id": "4ebd550c0a100f258ca8c558b1ae8336"
    },
    {
      "type": "html",
      "text": "\nThe program is derived by writing the equivalent lambda abstractions, and applying some simple rewriting rules to obtain the corresponding sequence of combinators. The rules to convert a lambda expression to an Unlambda program are simple enough and could probably be coded up over a lunch break. Of course, now that I've said this I'm gonna have to do it. While Unlambda is [[Turing Complete]], writing code in it is akin to building the a bridge atom by atom.",
      "id": "52aa30d919a950f048be96c5de90fe49"
    },
    {
      "type": "html",
      "text": ". -[[David Brantley]]",
      "id": "9f8cdefe5d6b5996df083b90997e201b"
    },
    {
      "type": "html",
      "text": "\nWho needs the I-combinator?  A Turing machine was written using only SK combinators.  [http://slashdot.org/articles/02/03/18/2133207.shtml?tid=156 slashdot.org]",
      "id": "46ef7e8ca8e25fb6eae8211f295788fc"
    },
    {
      "type": "html",
      "text": "\nHere's a couple of Scheme procedures for converting lambda calculus to SKI combinators. It outputs the SKI expressions as a list, not in the [[Un Lambda]] syntax. Nevertheless, it shows how simple this conversion is.",
      "id": "61edc8109f0d34c67a95bd7ef77577ff"
    },
    {
      "type": "code",
      "text": "  ; Check if a variable is free in the lambda calculus expression\n  (define (free-in-lambda? expr var)\n    (cond\n      ((symbol? expr)\n       (eq? expr var))\n      ((eq? (car expr) 'lambda)\n       (if (eq? (cadr expr) var)\n   #f\n   (free-in-lambda? (caddr expr) var)))\n      (else\n  (or (free-in-lambda? (car expr) var)\n      (free-in-lambda? (cadr expr) var)))))",
      "id": "6e267d229ce2c62dfacfe8b5e9f5f966"
    },
    {
      "type": "code",
      "text": "  ; Produce with SKI-combinators an expression that is equivalent\n  ; to (lambda var expr)\n  (define (apply-lambda expr var)\n    (cond\n      ((symbol? expr)\n       (if (eq? expr var)\n   'i\n   `(k ,expr)))\n      ((free-in-lambda? expr var)\n       `((s ,(apply-lambda (car expr) var))\n   ,(apply-lambda (cadr expr) var)))\n      (else\n       `(k ,expr))))\n      \n  ; Convert a lambda calculus expression to a SKI expression\n  (define (lambda->ski expr)\n    (cond\n      ((symbol? expr)\n       expr)\n      ((eq? (car expr) 'lambda)\n       (apply-lambda (lambda->ski (caddr expr)) (cadr expr)))\n      (else\n  (map lambda->ski expr))))",
      "id": "36cc7b58a576d59fcd4b048c160c1bca"
    },
    {
      "type": "code",
      "text": "  ; A few examples\n  (write (lambda->ski '(lambda x x)))\n  (newline)\n  ; ==> i",
      "id": "781901b99bd8171f8bb09c3e1f80bb24"
    },
    {
      "type": "code",
      "text": "  (write (lambda->ski '(lambda x (lambda y y))))\n  (newline)\n  ; ==> (k i) ",
      "id": "23f26914f1989b3a5a173fb2850f277d"
    },
    {
      "type": "code",
      "text": "  (write (lambda->ski '(lambda y (lambda x (x y)))))\n  (newline)\n  ; ==> ((s (k (s i))) ((s (k k)) i))",
      "id": "140f19a1d3f36506f9ef881c81f8a786"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b328fe21d8730b99ade50fc6630b2a72"
    },
    {
      "type": "html",
      "text": "\"This is the assembly language of functional programming\" -- [[Leo Scott]]",
      "id": "b951c0855bd81b8770f75c090b62c2dd"
    },
    {
      "type": "html",
      "text": "\nThat would be [[Combinatory Calculus]], not Unlambda...",
      "id": "6119f3367446f3f99ec777c045626309"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b328fe21d8730b99ade50fc6630b2a72"
    },
    {
      "type": "html",
      "text": "\nWasn't [[Inter Cal]] enough?",
      "id": "f280378ae3af393e42e7fb7bcd780997"
    },
    {
      "type": "html",
      "text": "<i>No.  A web search will uncover a great quantity of 'joke' languages, some carried quite far.  It's not clear whether this should be amusing or annoying...</i> See [[Esoteric Programming Language]].",
      "id": "b805c233ff99c0e823f6628014113cbd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b328fe21d8730b99ade50fc6630b2a72"
    },
    {
      "type": "html",
      "text": "\nThe following, I'm lead to believe, is an [[Un Lambda]] interpreter written in [[Un Lambda]]:",
      "id": "94aae197377d54f232fa5e17cae9f018"
    },
    {
      "type": "code",
      "text": "  ```\n ``s``s`ks``s`k`s`ks\n ``s``s`ks``s`k`s`ks\n ``s`k`s`kk ``s`k`si ``s`kki `k`ki `k``s`kki\n  `  ``sii\n `d```s `k  \n    ``s``s`ks``s``s`ks``s`kk``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk\n   i`k  ``s`d`k ` \n ``s``s`ks``s``s`ks``s``s`ks``s`kk`k ``s`kc``s`k`s`k`k`ki``ss`k`kk \n  ``s`kki``s``s`ks``s``s`ks\n ``s`kk`k \n  ``s`k`s`k ``s`kk``s`k`sik \n  ``s``s`ks``s`kk``s`k ``s``s`ks``s`kk``s`ks``s`k`sik`kk i `ki\n ``s``s`ks``s``s`ks``s`kki`ki`ki``s``s`ks``s``s`ks\n ``s`kki`ki`ki``s``s`ks``s`kk\n     ``s`kc ``s`k`s`k\n     `d`k\n ` ``s``s`ks ``s``s`ks ``s`kk``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk\n    i ``s``s`ks ``s``s`ks kii \n     ``s`kc ``s`k`s`k `d`k\n ` ``s``s`ks ``s``s`ks ``s`kk``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk\n    i ``s``s`ks ``s``s`ks kii \n     ``s`kc ``s`k`s`k `d`k\n `d`  \n      ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik \n  ` ``s`kk``s`k`sik \n  ` ``s`kk``s`k`sik  ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik \n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n   ` ``s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`kk``s`k`sik r\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`d`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`kk``s`k`sik  `@|\n      `k `d`k ` ``s`k`s`kk``s`k`sik ````.:.(rev\n         `d`?. i\n         `d`?r i\n         `d`?| i\n         `d`?@ i\n         `d`?e i\n         `d`?c i\n         `d`?d i\n         `d`?v i\n         `d`?i i\n         `d`?s i\n  `d`?k i\n     ``s``s`ks ``s``s`ks ``s`kki `ki `k`ki\n   `d`?\n i \n     ``s``s`ks ``s``s`ks ``s`kki `ki `k`ki\n `d`? i\n     ``s``s`ks ``s``s`ks ``s`kki `ki `k`ki\n `ki \n ` ?` i i\n  ``s`kc ``s `k`s`k`d ````.:.(rev\n      ``s``s`ks``s``s`ks``s`kki`ki`k`ki\n     `@i i\n ``s``si `k\n   ``s`kkk\n `k \n   ``s``s`ks``s``s`ks`k`ks\n   ``s``s`ks``s``s`ks`k`ks\n   ``s``s`ks``s``s`ks`k`ks\n   ``s``s`ks``s``s`ks`k`ks\n  `k`k`k \n ``s \n   ``s``si `k\n   ``s``si `k \n   ``s``si `k \n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k\n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k \n   ``s``si `k \n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k\n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k \n    ``s``si `k \n     ``s``si `k \n        ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k `k \n `k ``s`kk``s`kk\n     ``s`k ``s`k`s`kk``s`k`sik\n  ``s`k ``s`kk``s`k`sik\n     ``s`k ``s`k`s`kk``s`k`sik\n  ``s`kk``s`k`sik\n `k \n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k \n   ``s``si `k \n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k\n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n i\n   ``s``s`ks``s``s`ks`k`ks\n   ``s``s`ks``s``s`ks`k`ks\n  ``s`kk``s`k`si ``s`kk ``s`k ``si`kk i `k ``s`kki `k` k i\n   ``s`kk ``s`kk ``s`k ``si`k`ki i `kk `k `ki\n `d\n     ``s``s`ks``s`kk``s`ks\n     ``s``s`ks``s`kk`ks\n  ``s``si `k \n      ``s``si `k\n   ``s``si `k \n       ``s``si `k \n    ``s`kk``s`kk i\n       `k \n    `k ``s``s`ks``s`kk``s`ks``s``s`ks``s``s`ks\n     ``s``s`ks``s`kki`ki`k `k` \n         ``s`k ``s`k`s`kk``s`k`sik\n         ``s`k ``s`k`s`kk``s`k`sik\n         ``s`k ``s`kk``s`k`sik ``s`kk``s`k`sik\n          `|i ``s`kki`k ``s`kki\n   `k \n       ``s``si `k \n      `k ``s``s`ks ``s`kk``s`ks ``s``s`ks``s``s`ks i `k`d`k`@\n   ``s``s ``s`kc``s`k`s`k`k`ki``ss`k`kk \n       `k ```s`kk``s`k`sik ```s`k`s`kk``s`k`sik\n    ```s`k`s`kk``s`k`sik ```s`k`s`kk``s`k`sik v\n       `k ```s`k`s`kk``s`k`sik ```s`kk``s`k`sik\n    ```s`kk``s`k`sik\n     ```s`k`s`kk``s`k`sik v\n   k `kk\n       `k \n       ``s`kk``s`kki\n      `k \n   ``s``si `k \n       ``s``si `k \n    `k`k`ke\n       `k \n ``s``s`ks ``s`k`s`ks ``s`k`s``s`ks``s`kk`ks\n ``s``s`ks ``s`k`s`ks ``s`k`s``s`ks``s`kk`ks\n ``s``s`ks ``s`k`s`ks ``s`k`s``s`ks``s`kk`ks\n     ``s `k`s `k`s`kk ``s`k`s``s`ksk\n  ``s``s`ks``s `k`s`ks ``s``s`ks``s `k`s`ks\n  ``s`kk``s`k`si k `kk `k`ki `k`k`ki\n     `k``s`kkk `k`kk\n   `k \n      ``s``si \n   `k \n       `k`k`k`k \n        ```s`k`s`kk``s`k`sik ```s`kk``s`k`sik\n    ```s`kk``s`k`sik\n     ```s`k`s`kk``s`k`sik v\n   `k \n  `k ``s`k`s`k`s`kc \n      ``s``s`ks ``s`k`s`ks ``s`k `s`k`s`ks ``s`kk\n    ``s``s`ks``s`k`s`ks ``s``s`ks``s`k`s`ks\n   ``s``s`ks``s`kk`kki `k`k \n       ``s`k ``s`k`s`kk``s`k`sik\n       ``s`k ``s`k`s`kk``s`k`sik\n       ``s`k ``s`k`s`kk``s`k`sik ``s`k`s`kk``s`k`sik\n   ``s`kk k `k``s`kkk\n  `k \n      ``s``si `k \n   ``s``si `k \n       `k`k`k i\n   `k \n  ``s``si `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s`kk`kk``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`k\n k`ks``s``s`ks``s`kk`kk``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s\n ``s`ks`ki``s``s`ks``s`kk`k ``si`kk\n ``s`kki``s``s`ks``s`kk`kk`ki``s`kk`kk``s``\n s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s``s`ks``s`kk`ks``s``s`ks``s\n ``s`ks``s`kk`ks``s``s`ks`ki``s``s`ks``s`kk`k ``si`k`ki\n ``s`kki``s``s`ks``s`kk`k\n k`ki``s`kk`kk``s``s`ks``s`kk`kk``s``s`ks``s`kk`kk`ki``s`kk`kk\n      `k \n   ``s`kk``s`kk \n          ``s`k`s`k ``s`kk``s`k`sik\n        ``s`k`s`k ``s`k`s`kk``s`k`sik\n          ``s`k`s`k ``s`kk``s`k`sik\n        ``s`k`s`k ``s`k`s`kk``s`k`sik\n        ``s``s`ks``s`kk``s`ks``s`k`sik`kk\n `k \n  ``s``si `k \n      ``s``si `k \n   `k`k`k ``s`k ``s`kk``s`k`sik\n    ``s`k ``s`k`s`kk``s`k`sik\n    ``s`k ``s`kk``s`k`sik ``s`kk``s`k`sik\n      `k \n   ``s`kk ``s`kk ``s`kk i\n  `k \n  `k`k`k ``s`k ``s`kk``s`k`sik\n      ``s`k ``s`kk``s`k`sik\n      ``s`k ``s`k`s`kk``s`k`sik\n      ``s`k ``s`kk``s`k`sik i\n     `k``s`kkk",
      "id": "6b2917a6ddbb83dad33065c524ba647b"
    },
    {
      "type": "html",
      "text": "<i>Is the whitespace intended to enhance readability? :)</i>",
      "id": "a7bb34a5bc5ee9e4eb547cca4d99a179"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b328fe21d8730b99ade50fc6630b2a72"
    },
    {
      "type": "html",
      "text": "An [[Un Lambda]] program containing only the <b>`</b> <b>s</b> <b>k</b> and <b>i</b> operators could be encoded on a strand of DNA, say A for <b>s</b>, G for <b>k</b>, S for <b>i</b> and T for <b>`</b>. What useful [[Un Lambda]] programs are lurking around in <i>your</i> genes?",
      "id": "1216ef13f932db223278835c7e87dfc4"
    },
    {
      "type": "html",
      "text": "<i>None.  Assuming aproximately equal distribution of each gene, there wouldn't be enough backtics to make a syntacticly valid program.  With genes maping to <b>(</b>, <b>s</b>, <b>k</b>, and <b>)</b>, however...</i>",
      "id": "dbdcb0442ec3549568e5d8197a0e0050"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b328fe21d8730b99ade50fc6630b2a72"
    },
    {
      "type": "html",
      "text": "See [[Bloop Floop And Gloop]] for some more language theory.",
      "id": "6956b52b6c2976065c752e121876db96"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b328fe21d8730b99ade50fc6630b2a72"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Functional Programming Language]] [[Esoteric Programming Language]]",
      "id": "8dbe4ab3d11beb9d61a2abc291eced65"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?UnLambdaLanguage c2.com]",
      "id": "8bafe955b0c0f5d996437f1d09dcdcbb"
    }
  ],
  "journal": [
    {
      "date": 1297513227000,
      "id": "19ef4d37780947d9a9eff13146bc9d80",
      "type": "create",
      "item": {
        "title": "Un Lambda Language",
        "story": [
          {
            "type": "html",
            "text": "[[Scheme Language]] without the fluff. Unlambda enables (read: forces) the developer to write programs using the [[Ess And Kay Combinators]]. As a sop to the lazy, the 'I' combinator is provided as syntactic sugar.",
            "id": "cf8d639b54e857921c42dea0879760e6"
          },
          {
            "type": "html",
            "text": "\nThe 'd' and 'c' special forms provide easy access to promises and continuations.",
            "id": "85c7c6e247852db58d902751a24dfee6"
          },
          {
            "type": "html",
            "text": "\nThe main [[Un Lambda Language]] homepage can be found at [http://www.madore.org/~david/programs/unlambda/ www.madore.org]. [http://www.ofb.net/~jlm/unlambda/unlambda.html www.ofb.net] also has a distribution available.",
            "id": "dc557f44a4652ae421b5bc587ef02e96"
          },
          {
            "type": "html",
            "text": "\n[http://www.eleves.ens.fr:8080/home/madore/programs/unlambda/ www.eleves.ens.fr:8080] gives the follwing example of an Unlambda program:",
            "id": "49e40c8e52f1774bf1f5b15033a5b5e6"
          },
          {
            "type": "html",
            "text": "```s``s``sii``s`kk`ki`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks`",
            "id": "91ea82fa0a789c3a4cbce27f6df94b01"
          },
          {
            "type": "html",
            "text": "`s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`k\ns``s`kk`kk``s`kk`kr``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk",
            "id": "8a388577536e58ce2af39f8e8c096117"
          },
          {
            "type": "html",
            "text": "`ks``s``s`ks``s`kk`kk`ki``s``s`ks``s`kk`kk``s`kk`k.*``s``s`ks``s`kk`kk",
            "id": "830e00caefd43ac496bb133aa3f5f4ba"
          },
          {
            "type": "html",
            "text": "``s`kki``s``s`ks``s`kk`kk``s`kki``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\ns``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`k``s``s`ks``s``s`ks`",
            "id": "b7c236fdd246fb69bec2fed9f560590d"
          },
          {
            "type": "html",
            "text": "`s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`k\ns``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk",
            "id": "aa71a7f98d525092257e03807ebf816d"
          },
          {
            "type": "html",
            "text": "`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s``s`ks``s`\nkk`kk``s`kki``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`\nkk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``\ns`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks",
            "id": "a6546c130af71c2a5b812fa3a4dc7f94"
          },
          {
            "type": "html",
            "text": "``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\nkk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``\ns`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk",
            "id": "1d36cf689da4e157e35eec9af5454d63"
          },
          {
            "type": "html",
            "text": "`ki``s`kk`ki",
            "id": "71400462d33521749f308283a88d6f32"
          },
          {
            "type": "html",
            "text": "\nThis program finds each sucessive term in the [[Fibonacci Sequence]] and prints that many asterisks. Allegedly.",
            "id": "7c325826492bb3a19486e9efcae2d2b5"
          },
          {
            "type": "html",
            "text": "\nThe core constructs are <i>s</i>, <i>k</i>, <i>i</i>, which correspond to the <b>SKI</b> combinators; backquote which is a grouping operator; and <i>.<b>x</b></i>, which prints the character <i>x</i>. ",
            "id": "dcbe22c99cc915373478caf9c1337014"
          },
          {
            "type": "html",
            "text": "<i>I suspect this program was not written by hand. -- [[Stephan Houben]]</i>",
            "id": "4ebd550c0a100f258ca8c558b1ae8336"
          },
          {
            "type": "html",
            "text": "\nThe program is derived by writing the equivalent lambda abstractions, and applying some simple rewriting rules to obtain the corresponding sequence of combinators. The rules to convert a lambda expression to an Unlambda program are simple enough and could probably be coded up over a lunch break. Of course, now that I've said this I'm gonna have to do it. While Unlambda is [[Turing Complete]], writing code in it is akin to building the a bridge atom by atom.",
            "id": "52aa30d919a950f048be96c5de90fe49"
          },
          {
            "type": "html",
            "text": ". -[[David Brantley]]",
            "id": "9f8cdefe5d6b5996df083b90997e201b"
          },
          {
            "type": "html",
            "text": "\nWho needs the I-combinator?  A Turing machine was written using only SK combinators.  [http://slashdot.org/articles/02/03/18/2133207.shtml?tid=156 slashdot.org]",
            "id": "46ef7e8ca8e25fb6eae8211f295788fc"
          },
          {
            "type": "html",
            "text": "\nHere's a couple of Scheme procedures for converting lambda calculus to SKI combinators. It outputs the SKI expressions as a list, not in the [[Un Lambda]] syntax. Nevertheless, it shows how simple this conversion is.",
            "id": "61edc8109f0d34c67a95bd7ef77577ff"
          },
          {
            "type": "code",
            "text": "  ; Check if a variable is free in the lambda calculus expression\n  (define (free-in-lambda? expr var)\n    (cond\n      ((symbol? expr)\n       (eq? expr var))\n      ((eq? (car expr) 'lambda)\n       (if (eq? (cadr expr) var)\n   #f\n   (free-in-lambda? (caddr expr) var)))\n      (else\n  (or (free-in-lambda? (car expr) var)\n      (free-in-lambda? (cadr expr) var)))))",
            "id": "6e267d229ce2c62dfacfe8b5e9f5f966"
          },
          {
            "type": "code",
            "text": "  ; Produce with SKI-combinators an expression that is equivalent\n  ; to (lambda var expr)\n  (define (apply-lambda expr var)\n    (cond\n      ((symbol? expr)\n       (if (eq? expr var)\n   'i\n   `(k ,expr)))\n      ((free-in-lambda? expr var)\n       `((s ,(apply-lambda (car expr) var))\n   ,(apply-lambda (cadr expr) var)))\n      (else\n       `(k ,expr))))\n      \n  ; Convert a lambda calculus expression to a SKI expression\n  (define (lambda->ski expr)\n    (cond\n      ((symbol? expr)\n       expr)\n      ((eq? (car expr) 'lambda)\n       (apply-lambda (lambda->ski (caddr expr)) (cadr expr)))\n      (else\n  (map lambda->ski expr))))",
            "id": "36cc7b58a576d59fcd4b048c160c1bca"
          },
          {
            "type": "code",
            "text": "  ; A few examples\n  (write (lambda->ski '(lambda x x)))\n  (newline)\n  ; ==> i",
            "id": "781901b99bd8171f8bb09c3e1f80bb24"
          },
          {
            "type": "code",
            "text": "  (write (lambda->ski '(lambda x (lambda y y))))\n  (newline)\n  ; ==> (k i) ",
            "id": "23f26914f1989b3a5a173fb2850f277d"
          },
          {
            "type": "code",
            "text": "  (write (lambda->ski '(lambda y (lambda x (x y)))))\n  (newline)\n  ; ==> ((s (k (s i))) ((s (k k)) i))",
            "id": "140f19a1d3f36506f9ef881c81f8a786"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b328fe21d8730b99ade50fc6630b2a72"
          },
          {
            "type": "html",
            "text": "\"This is the assembly language of functional programming\" -- [[Leo Scott]]",
            "id": "b951c0855bd81b8770f75c090b62c2dd"
          },
          {
            "type": "html",
            "text": "\nThat would be [[Combinatory Calculus]], not Unlambda...",
            "id": "6119f3367446f3f99ec777c045626309"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b328fe21d8730b99ade50fc6630b2a72"
          },
          {
            "type": "html",
            "text": "\nWasn't [[Inter Cal]] enough?",
            "id": "f280378ae3af393e42e7fb7bcd780997"
          },
          {
            "type": "html",
            "text": "<i>No.  A web search will uncover a great quantity of 'joke' languages, some carried quite far.  It's not clear whether this should be amusing or annoying...</i> See [[Esoteric Programming Language]].",
            "id": "b805c233ff99c0e823f6628014113cbd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b328fe21d8730b99ade50fc6630b2a72"
          },
          {
            "type": "html",
            "text": "\nThe following, I'm lead to believe, is an [[Un Lambda]] interpreter written in [[Un Lambda]]:",
            "id": "94aae197377d54f232fa5e17cae9f018"
          },
          {
            "type": "code",
            "text": "  ```\n ``s``s`ks``s`k`s`ks\n ``s``s`ks``s`k`s`ks\n ``s`k`s`kk ``s`k`si ``s`kki `k`ki `k``s`kki\n  `  ``sii\n `d```s `k  \n    ``s``s`ks``s``s`ks``s`kk``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk\n   i`k  ``s`d`k ` \n ``s``s`ks``s``s`ks``s``s`ks``s`kk`k ``s`kc``s`k`s`k`k`ki``ss`k`kk \n  ``s`kki``s``s`ks``s``s`ks\n ``s`kk`k \n  ``s`k`s`k ``s`kk``s`k`sik \n  ``s``s`ks``s`kk``s`k ``s``s`ks``s`kk``s`ks``s`k`sik`kk i `ki\n ``s``s`ks``s``s`ks``s`kki`ki`ki``s``s`ks``s``s`ks\n ``s`kki`ki`ki``s``s`ks``s`kk\n     ``s`kc ``s`k`s`k\n     `d`k\n ` ``s``s`ks ``s``s`ks ``s`kk``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk\n    i ``s``s`ks ``s``s`ks kii \n     ``s`kc ``s`k`s`k `d`k\n ` ``s``s`ks ``s``s`ks ``s`kk``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk\n    i ``s``s`ks ``s``s`ks kii \n     ``s`kc ``s`k`s`k `d`k\n `d`  \n      ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik \n  ` ``s`kk``s`k`sik \n  ` ``s`kk``s`k`sik  ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik \n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n   ` ``s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`kk``s`k`sik v\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`kk``s`k`sik r\n     `k`d` ``s``s``s`k ``s`kc``s`k`s`k`k`ki``ss`k`kk i\n  `k`d`k ` ``s`k`s`kk``s`k`sik\n  ` ``s`k`s`kk``s`k`sik ` ``s`k`s`kk``s`k`sik\n  ` ``s`kk``s`k`sik ` ``s`kk``s`k`sik  `@|\n      `k `d`k ` ``s`k`s`kk``s`k`sik ````.:.(rev\n         `d`?. i\n         `d`?r i\n         `d`?| i\n         `d`?@ i\n         `d`?e i\n         `d`?c i\n         `d`?d i\n         `d`?v i\n         `d`?i i\n         `d`?s i\n  `d`?k i\n     ``s``s`ks ``s``s`ks ``s`kki `ki `k`ki\n   `d`?\n i \n     ``s``s`ks ``s``s`ks ``s`kki `ki `k`ki\n `d`? i\n     ``s``s`ks ``s``s`ks ``s`kki `ki `k`ki\n `ki \n ` ?` i i\n  ``s`kc ``s `k`s`k`d ````.:.(rev\n      ``s``s`ks``s``s`ks``s`kki`ki`k`ki\n     `@i i\n ``s``si `k\n   ``s`kkk\n `k \n   ``s``s`ks``s``s`ks`k`ks\n   ``s``s`ks``s``s`ks`k`ks\n   ``s``s`ks``s``s`ks`k`ks\n   ``s``s`ks``s``s`ks`k`ks\n  `k`k`k \n ``s \n   ``s``si `k\n   ``s``si `k \n   ``s``si `k \n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k\n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k \n   ``s``si `k \n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k\n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k \n    ``s``si `k \n     ``s``si `k \n        ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k `k \n `k ``s`kk``s`kk\n     ``s`k ``s`k`s`kk``s`k`sik\n  ``s`k ``s`kk``s`k`sik\n     ``s`k ``s`k`s`kk``s`k`sik\n  ``s`kk``s`k`sik\n `k \n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k \n   ``s``si `k \n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n `k\n    ``s``si `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n    `k `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`k\n s``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s\n `ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk``s`kki``s``s`ks``s``s`ks``s`kk\n `ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s`\n `s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ks``\n s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk\n ``s`kk`ks``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks``s``s`ks``s`kk`ks``s``s`\n ks``s`kk`kk``s`kk`kk``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`kk`ks``\n s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`kk``s`kk`ki``s``s`ks\n ``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s`kk`kk``s`kk`ki``s``s`ks``s`kk`\n kk``s`kk`ki\n i\n   ``s``s`ks``s``s`ks`k`ks\n   ``s``s`ks``s``s`ks`k`ks\n  ``s`kk``s`k`si ``s`kk ``s`k ``si`kk i `k ``s`kki `k` k i\n   ``s`kk ``s`kk ``s`k ``si`k`ki i `kk `k `ki\n `d\n     ``s``s`ks``s`kk``s`ks\n     ``s``s`ks``s`kk`ks\n  ``s``si `k \n      ``s``si `k\n   ``s``si `k \n       ``s``si `k \n    ``s`kk``s`kk i\n       `k \n    `k ``s``s`ks``s`kk``s`ks``s``s`ks``s``s`ks\n     ``s``s`ks``s`kki`ki`k `k` \n         ``s`k ``s`k`s`kk``s`k`sik\n         ``s`k ``s`k`s`kk``s`k`sik\n         ``s`k ``s`kk``s`k`sik ``s`kk``s`k`sik\n          `|i ``s`kki`k ``s`kki\n   `k \n       ``s``si `k \n      `k ``s``s`ks ``s`kk``s`ks ``s``s`ks``s``s`ks i `k`d`k`@\n   ``s``s ``s`kc``s`k`s`k`k`ki``ss`k`kk \n       `k ```s`kk``s`k`sik ```s`k`s`kk``s`k`sik\n    ```s`k`s`kk``s`k`sik ```s`k`s`kk``s`k`sik v\n       `k ```s`k`s`kk``s`k`sik ```s`kk``s`k`sik\n    ```s`kk``s`k`sik\n     ```s`k`s`kk``s`k`sik v\n   k `kk\n       `k \n       ``s`kk``s`kki\n      `k \n   ``s``si `k \n       ``s``si `k \n    `k`k`ke\n       `k \n ``s``s`ks ``s`k`s`ks ``s`k`s``s`ks``s`kk`ks\n ``s``s`ks ``s`k`s`ks ``s`k`s``s`ks``s`kk`ks\n ``s``s`ks ``s`k`s`ks ``s`k`s``s`ks``s`kk`ks\n     ``s `k`s `k`s`kk ``s`k`s``s`ksk\n  ``s``s`ks``s `k`s`ks ``s``s`ks``s `k`s`ks\n  ``s`kk``s`k`si k `kk `k`ki `k`k`ki\n     `k``s`kkk `k`kk\n   `k \n      ``s``si \n   `k \n       `k`k`k`k \n        ```s`k`s`kk``s`k`sik ```s`kk``s`k`sik\n    ```s`kk``s`k`sik\n     ```s`k`s`kk``s`k`sik v\n   `k \n  `k ``s`k`s`k`s`kc \n      ``s``s`ks ``s`k`s`ks ``s`k `s`k`s`ks ``s`kk\n    ``s``s`ks``s`k`s`ks ``s``s`ks``s`k`s`ks\n   ``s``s`ks``s`kk`kki `k`k \n       ``s`k ``s`k`s`kk``s`k`sik\n       ``s`k ``s`k`s`kk``s`k`sik\n       ``s`k ``s`k`s`kk``s`k`sik ``s`k`s`kk``s`k`sik\n   ``s`kk k `k``s`kkk\n  `k \n      ``s``si `k \n   ``s``si `k \n       `k`k`k i\n   `k \n  ``s``si `k \n ``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`\n kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``\n s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s\n `kk`ks``s``s`ks``s`kk`kk``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s``s`ks`\n `s`kk`kk``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk`ki``s``s`ks``s``s`ks``s`k\n k`ks``s``s`ks``s`kk`kk``s``s`ks``s`kk`ks``s``s`ks``s``s`ks``s`kk`ks``s\n ``s`ks`ki``s``s`ks``s`kk`k ``si`kk\n ``s`kki``s``s`ks``s`kk`kk`ki``s`kk`kk``s``\n s`ks``s``s`ks``s`kk`ks``s``s`ks``s`kk`kk``s``s`ks``s`kk`ks``s``s`ks``s\n ``s`ks``s`kk`ks``s``s`ks`ki``s``s`ks``s`kk`k ``si`k`ki\n ``s`kki``s``s`ks``s`kk`k\n k`ki``s`kk`kk``s``s`ks``s`kk`kk``s``s`ks``s`kk`kk`ki``s`kk`kk\n      `k \n   ``s`kk``s`kk \n          ``s`k`s`k ``s`kk``s`k`sik\n        ``s`k`s`k ``s`k`s`kk``s`k`sik\n          ``s`k`s`k ``s`kk``s`k`sik\n        ``s`k`s`k ``s`k`s`kk``s`k`sik\n        ``s``s`ks``s`kk``s`ks``s`k`sik`kk\n `k \n  ``s``si `k \n      ``s``si `k \n   `k`k`k ``s`k ``s`kk``s`k`sik\n    ``s`k ``s`k`s`kk``s`k`sik\n    ``s`k ``s`kk``s`k`sik ``s`kk``s`k`sik\n      `k \n   ``s`kk ``s`kk ``s`kk i\n  `k \n  `k`k`k ``s`k ``s`kk``s`k`sik\n      ``s`k ``s`kk``s`k`sik\n      ``s`k ``s`k`s`kk``s`k`sik\n      ``s`k ``s`kk``s`k`sik i\n     `k``s`kkk",
            "id": "6b2917a6ddbb83dad33065c524ba647b"
          },
          {
            "type": "html",
            "text": "<i>Is the whitespace intended to enhance readability? :)</i>",
            "id": "a7bb34a5bc5ee9e4eb547cca4d99a179"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b328fe21d8730b99ade50fc6630b2a72"
          },
          {
            "type": "html",
            "text": "An [[Un Lambda]] program containing only the <b>`</b> <b>s</b> <b>k</b> and <b>i</b> operators could be encoded on a strand of DNA, say A for <b>s</b>, G for <b>k</b>, S for <b>i</b> and T for <b>`</b>. What useful [[Un Lambda]] programs are lurking around in <i>your</i> genes?",
            "id": "1216ef13f932db223278835c7e87dfc4"
          },
          {
            "type": "html",
            "text": "<i>None.  Assuming aproximately equal distribution of each gene, there wouldn't be enough backtics to make a syntacticly valid program.  With genes maping to <b>(</b>, <b>s</b>, <b>k</b>, and <b>)</b>, however...</i>",
            "id": "dbdcb0442ec3549568e5d8197a0e0050"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b328fe21d8730b99ade50fc6630b2a72"
          },
          {
            "type": "html",
            "text": "See [[Bloop Floop And Gloop]] for some more language theory.",
            "id": "6956b52b6c2976065c752e121876db96"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b328fe21d8730b99ade50fc6630b2a72"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Functional Programming Language]] [[Esoteric Programming Language]]",
            "id": "8dbe4ab3d11beb9d61a2abc291eced65"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?UnLambdaLanguage c2.com]",
            "id": "8bafe955b0c0f5d996437f1d09dcdcbb"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1708035441945
    }
  ]
}