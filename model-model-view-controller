{
  "title": "Model Model View Controller",
  "story": [
    {
      "type": "html",
      "text": "As is evident from the discussion of [[Whatsa Controller Anyway]], the connotations of the acronym \"MVC\" and the term \"[[Model View Controller]]\" have lost precision over the years, as their usage has increased outside the Smalltalk community in which the namesake behavior-partitioning paradigm was invented (see [[Model View Controller History]]).",
      "id": "4315cf31eb648b77fe1add48c8772644"
    },
    {
      "type": "html",
      "text": "\nHowever, even within the original precise Smalltalk connotation of MVC, there is an implication not obviously conveyed by the term, and certainly not appreciated by people that use the terminology so freely today (e.g., people in the J2EE community, describing [[Java Server Pages]] \"Model 2\" architectures).",
      "id": "1cf54c9e269af30ebd554c2431254850"
    },
    {
      "type": "html",
      "text": "\nThe implication is that there have always been two kinds of model: [[Domain Model]], and [[Application Model]].  Hence the name of this page.  The evidence is clear, and the documentation plentiful.  Consider the following, from Krasner & Pope's original (August/September 1988) [[Journal Of Object Oriented Programming]] article titled \"A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk-80\".",
      "id": "86ed5530dc3def181e154e16c4a880ee"
    },
    {
      "type": "html",
      "text": "The inspectors in the system are implemented as two views. ... An instance of [[Inspector View]] serves as their common superview ... The model for these views is an instance of Inspector.  Inspectors can be used to view any object.  A separate class, Inspector, serves as the intermediary ... Using intermediary objects between views and \"actual\" models is a common way to further isolate the viewing behavior from the modeling application.",
      "id": "09e2c3819fda97b5ff79d5890c3c1222"
    },
    {
      "type": "html",
      "text": "\nThus the \"actual\" model is the object being inspected, and the Inspector is the application model.  The concept of an application model was finally reified by class [[Application Model]] in the [[Visual Works]] 1.0 release of Smalltalk-80.",
      "id": "2aa6e528dacff06c0df62a48e7c7b84a"
    },
    {
      "type": "html",
      "text": "\nFor further documentation of the implication and distinction, see p.290 of [[Kyle Brown]] and [[Bobby Woolf]]'s [[Design Patterns Smalltalk Companion]], and the literature reference fanout from that page.  See also [[Adele Goldberg]]'s foreword to [[Tim Howard]]'s [[The Smalltalk Developers Guide To Visual Works]], in which she confirms that [[Application Model]]s support linking a [[Domain Model]] to application logic that uses it.",
      "id": "7154540a62bf153c0df8a7284fc63ff7"
    },
    {
      "type": "html",
      "text": "\nSo what, you say.  Well, here's what.  As a point of general principle, people who talk about MVC architecture (such as people in the J2EE and JSP communities) should take it upon themselves to understand the historical meaning and implications of the terms they use, so as to eliminate confusion about [[Whatsa Controller Anyway]], and to be aware that [[Model View Controller]] often means [[Model Model View Controller]] in the original Smalltalk implementation of the paradigm.  In fact, a case could probably be made that many of the responsibilities allocated to the \"controller\" (in the Jacobsonian connotation of the term) were probably allocated to [[Application Model]]s in [[Model Model View Controller]] architecture.",
      "id": "3a5abd2bae5b1d21a38328eb231883c0"
    },
    {
      "type": "html",
      "text": "--[[Randy Stafford]]",
      "id": "e4f0968a4dc67e5e91ff07d9721db538"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0cc17f3647cd960feb5fd708f332e3ad"
    },
    {
      "type": "html",
      "text": "\nHow does this relate to the model interfaces defined for each GUI component in the Java Swing framework?",
      "id": "ea0a785cb1d7c849b389a649c0cb037a"
    },
    {
      "type": "html",
      "text": "<i>The closest Smalltalk analogy to the Swing component \"model interface\" is probably the concept of an Adaptor, whose job it is to adapt the interface of a (domain) model to the interface expected by a view component.  In Smalltalk, Adaptors are typically [[Value Model]]s.  However an Adaptor or \"model interface\" is <b>not</b> an [[Application Model]].  Instead, in Smalltalk, an [[Application Model]] is usually reponsible for instantiating an Adaptor and binding it to the view component and (domain) model.  In a Swing UI, this responsibility typically falls on a Panel (or Frame).  So, in a Swing UI, Panels (and Frames) form [[Application Model]]s.  --[[Randy Stafford]]</i>",
      "id": "db509f41b85ddf5d1465a9e0da4ead8a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0cc17f3647cd960feb5fd708f332e3ad"
    },
    {
      "type": "html",
      "text": "\n[[Richard Mac Donald]] posts on comp.object about MVP: model view presentation, where the presentation sits between the model and view (who don't know about each other).  It sounds similar to application model defined here -- an isolation layer.",
      "id": "36b8595f52c2e7ebe988845da8ebf127"
    },
    {
      "type": "html",
      "text": "<i>Yes, it does sound similar.  Is there any literature on the MVP idea?  There seems to be a lot of different terminology in this area - for example, the [[Party Of Five]] talk about [[Presentation Abstraction Control]], where (roughly) Presentation is View, Abstraction is [[Domain Model]], and Control is [[Application Model]].  --[[Randy Stafford]]</i>",
      "id": "43592dd6e9d81fe25c44ba970cac7d83"
    },
    {
      "type": "html",
      "text": "\nYes, Dolphin Smalltalk (at least the free version) uses this paradigm and explains/discusses it at length in the bundled docs, which are with the download and may be available on the web as they are HTML (try poking around at [http://www.object-arts.com/DolphinSmalltalk.htm www.object-arts.com]). --[[Paul Mitchell Gears]]",
      "id": "016eb95493dd95cdc35b256115966bfe"
    },
    {
      "type": "html",
      "text": "\nHere is a document on Model-View-Presenter: [http://www.object-arts.com/EducationCentre/Overviews/ModelViewPresenter.htm www.object-arts.com]\nMVC vs MVP:\n[http://www.darronschall.com/weblog/archives/000113.cfm www.darronschall.com]\nAnd now, MGM (Model-GUI-Mediator)? I sense some buzz.\n[http://www.atug.com/andypatterns/mgm.htm www.atug.com]",
      "id": "2845818164f0eb550d2ce49820713322"
    },
    {
      "type": "html",
      "text": "--[[Lyndon Tremblay]]",
      "id": "13e2f14a124353283068f8461f4e7ea6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0cc17f3647cd960feb5fd708f332e3ad"
    },
    {
      "type": "html",
      "text": "\"However, even within the original precise Smalltalk connotation of MVC, there is an implication not obviously conveyed by the term, and certainly not appreciated by people that use the terminology so freely today (e.g., people in the J2EE community, describing [[Java Server Pages]] 'Model 2' architectures).\"",
      "id": "b7e1d27fa991142b662abdd6b32904a7"
    },
    {
      "type": "html",
      "text": "<i>Definitely an abuse of the term - there are at least two or three antipatterns in JSP/STRUTS/etc. (including [[Wag The Dog Anti Pattern]]) that violate (what I see as) the spirit of MVC.</i> -- [[Tom Rossen]]",
      "id": "cef0b77eae5a9651e5da6492fac1a13f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0cc17f3647cd960feb5fd708f332e3ad"
    },
    {
      "type": "html",
      "text": "See also: [[Mvc In Jsp Model Two Architecture]]",
      "id": "2a96e3a3d97782c139059f3cc5de7be7"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ModelModelViewController c2.com]",
      "id": "c10aa758e81c91a03133f1362c17167b"
    }
  ],
  "journal": [
    {
      "date": 1370281918000,
      "id": "0c574393910a35d39b2a99a517859791",
      "type": "create",
      "item": {
        "title": "Model Model View Controller",
        "story": [
          {
            "type": "html",
            "text": "As is evident from the discussion of [[Whatsa Controller Anyway]], the connotations of the acronym \"MVC\" and the term \"[[Model View Controller]]\" have lost precision over the years, as their usage has increased outside the Smalltalk community in which the namesake behavior-partitioning paradigm was invented (see [[Model View Controller History]]).",
            "id": "4315cf31eb648b77fe1add48c8772644"
          },
          {
            "type": "html",
            "text": "\nHowever, even within the original precise Smalltalk connotation of MVC, there is an implication not obviously conveyed by the term, and certainly not appreciated by people that use the terminology so freely today (e.g., people in the J2EE community, describing [[Java Server Pages]] \"Model 2\" architectures).",
            "id": "1cf54c9e269af30ebd554c2431254850"
          },
          {
            "type": "html",
            "text": "\nThe implication is that there have always been two kinds of model: [[Domain Model]], and [[Application Model]].  Hence the name of this page.  The evidence is clear, and the documentation plentiful.  Consider the following, from Krasner & Pope's original (August/September 1988) [[Journal Of Object Oriented Programming]] article titled \"A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk-80\".",
            "id": "86ed5530dc3def181e154e16c4a880ee"
          },
          {
            "type": "html",
            "text": "The inspectors in the system are implemented as two views. ... An instance of [[Inspector View]] serves as their common superview ... The model for these views is an instance of Inspector.  Inspectors can be used to view any object.  A separate class, Inspector, serves as the intermediary ... Using intermediary objects between views and \"actual\" models is a common way to further isolate the viewing behavior from the modeling application.",
            "id": "09e2c3819fda97b5ff79d5890c3c1222"
          },
          {
            "type": "html",
            "text": "\nThus the \"actual\" model is the object being inspected, and the Inspector is the application model.  The concept of an application model was finally reified by class [[Application Model]] in the [[Visual Works]] 1.0 release of Smalltalk-80.",
            "id": "2aa6e528dacff06c0df62a48e7c7b84a"
          },
          {
            "type": "html",
            "text": "\nFor further documentation of the implication and distinction, see p.290 of [[Kyle Brown]] and [[Bobby Woolf]]'s [[Design Patterns Smalltalk Companion]], and the literature reference fanout from that page.  See also [[Adele Goldberg]]'s foreword to [[Tim Howard]]'s [[The Smalltalk Developers Guide To Visual Works]], in which she confirms that [[Application Model]]s support linking a [[Domain Model]] to application logic that uses it.",
            "id": "7154540a62bf153c0df8a7284fc63ff7"
          },
          {
            "type": "html",
            "text": "\nSo what, you say.  Well, here's what.  As a point of general principle, people who talk about MVC architecture (such as people in the J2EE and JSP communities) should take it upon themselves to understand the historical meaning and implications of the terms they use, so as to eliminate confusion about [[Whatsa Controller Anyway]], and to be aware that [[Model View Controller]] often means [[Model Model View Controller]] in the original Smalltalk implementation of the paradigm.  In fact, a case could probably be made that many of the responsibilities allocated to the \"controller\" (in the Jacobsonian connotation of the term) were probably allocated to [[Application Model]]s in [[Model Model View Controller]] architecture.",
            "id": "3a5abd2bae5b1d21a38328eb231883c0"
          },
          {
            "type": "html",
            "text": "--[[Randy Stafford]]",
            "id": "e4f0968a4dc67e5e91ff07d9721db538"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0cc17f3647cd960feb5fd708f332e3ad"
          },
          {
            "type": "html",
            "text": "\nHow does this relate to the model interfaces defined for each GUI component in the Java Swing framework?",
            "id": "ea0a785cb1d7c849b389a649c0cb037a"
          },
          {
            "type": "html",
            "text": "<i>The closest Smalltalk analogy to the Swing component \"model interface\" is probably the concept of an Adaptor, whose job it is to adapt the interface of a (domain) model to the interface expected by a view component.  In Smalltalk, Adaptors are typically [[Value Model]]s.  However an Adaptor or \"model interface\" is <b>not</b> an [[Application Model]].  Instead, in Smalltalk, an [[Application Model]] is usually reponsible for instantiating an Adaptor and binding it to the view component and (domain) model.  In a Swing UI, this responsibility typically falls on a Panel (or Frame).  So, in a Swing UI, Panels (and Frames) form [[Application Model]]s.  --[[Randy Stafford]]</i>",
            "id": "db509f41b85ddf5d1465a9e0da4ead8a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0cc17f3647cd960feb5fd708f332e3ad"
          },
          {
            "type": "html",
            "text": "\n[[Richard Mac Donald]] posts on comp.object about MVP: model view presentation, where the presentation sits between the model and view (who don't know about each other).  It sounds similar to application model defined here -- an isolation layer.",
            "id": "36b8595f52c2e7ebe988845da8ebf127"
          },
          {
            "type": "html",
            "text": "<i>Yes, it does sound similar.  Is there any literature on the MVP idea?  There seems to be a lot of different terminology in this area - for example, the [[Party Of Five]] talk about [[Presentation Abstraction Control]], where (roughly) Presentation is View, Abstraction is [[Domain Model]], and Control is [[Application Model]].  --[[Randy Stafford]]</i>",
            "id": "43592dd6e9d81fe25c44ba970cac7d83"
          },
          {
            "type": "html",
            "text": "\nYes, Dolphin Smalltalk (at least the free version) uses this paradigm and explains/discusses it at length in the bundled docs, which are with the download and may be available on the web as they are HTML (try poking around at [http://www.object-arts.com/DolphinSmalltalk.htm www.object-arts.com]). --[[Paul Mitchell Gears]]",
            "id": "016eb95493dd95cdc35b256115966bfe"
          },
          {
            "type": "html",
            "text": "\nHere is a document on Model-View-Presenter: [http://www.object-arts.com/EducationCentre/Overviews/ModelViewPresenter.htm www.object-arts.com]\nMVC vs MVP:\n[http://www.darronschall.com/weblog/archives/000113.cfm www.darronschall.com]\nAnd now, MGM (Model-GUI-Mediator)? I sense some buzz.\n[http://www.atug.com/andypatterns/mgm.htm www.atug.com]",
            "id": "2845818164f0eb550d2ce49820713322"
          },
          {
            "type": "html",
            "text": "--[[Lyndon Tremblay]]",
            "id": "13e2f14a124353283068f8461f4e7ea6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0cc17f3647cd960feb5fd708f332e3ad"
          },
          {
            "type": "html",
            "text": "\"However, even within the original precise Smalltalk connotation of MVC, there is an implication not obviously conveyed by the term, and certainly not appreciated by people that use the terminology so freely today (e.g., people in the J2EE community, describing [[Java Server Pages]] 'Model 2' architectures).\"",
            "id": "b7e1d27fa991142b662abdd6b32904a7"
          },
          {
            "type": "html",
            "text": "<i>Definitely an abuse of the term - there are at least two or three antipatterns in JSP/STRUTS/etc. (including [[Wag The Dog Anti Pattern]]) that violate (what I see as) the spirit of MVC.</i> -- [[Tom Rossen]]",
            "id": "cef0b77eae5a9651e5da6492fac1a13f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0cc17f3647cd960feb5fd708f332e3ad"
          },
          {
            "type": "html",
            "text": "See also: [[Mvc In Jsp Model Two Architecture]]",
            "id": "2a96e3a3d97782c139059f3cc5de7be7"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ModelModelViewController c2.com]",
            "id": "c10aa758e81c91a03133f1362c17167b"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1655985882273
    }
  ]
}