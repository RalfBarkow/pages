{
  "title": "Reduce",
  "story": [
    {
      "type": "paragraph",
      "id": "120bd83a951c4366",
      "text": "Reducing is the most general of the functional array methods. You take an array, and get back any one thing. I can be an array, an object, a number, a string, any damn thing. It can even replicate a filter, returning an array with elements removed, or a map that can even add elements. It's pretty cool. However, there are some eccentricities with the built in `[].reduce` function, making using it improperly one of the [[JavaScript Common Pitfalls]]"
    },
    {
      "type": "paragraph",
      "id": "bdd4b0e1e3c44ae4",
      "text": "First off it's an Array.prototype method. Meaning you have to do a little juggling to use it on [[array like objects]]. Not a huge concern, but something to watch out for."
    },
    {
      "type": "paragraph",
      "id": "4e64f65d110d65b3",
      "text": "Secondly it works left to right. If order matters in your reduce that is important to know. If you need to work right to left, there is a corresponding `[].reduceRight`."
    },
    {
      "type": "code",
      "id": "678cb8dcf07b29f8",
      "text": "//broken\n\nvar arr = [ 2, 4, 8, 64 ]\n\nvar a = arr.reduce(divide)\nconsole.log(a) // 0.0009765625\n\n// order matters\nvar b = arr.reduceRight(divide)\nconsole.log(b) // 1\n\nfunction divide (a, b) {\n  return a/b\n}\n"
    },
    {
      "type": "paragraph",
      "id": "a4701ac72bfa3e64",
      "text": "By default reduce provides the first element of the array as the aggregate, if one isn't provided. This can lead to extremely hard to debug valid, but nonsensical results."
    },
    {
      "type": "code",
      "id": "29ca153ec3e29518",
      "text": "// broken\n\nvar arr = [ 100, 10, 1 ]\n\nvar a = arr.reduce(subtract)\nconsole.log(a) // 89\n\n// or did I want this?\nvar b = arr.reduce(subtract, 0) // initial reducer\nconsole.log(b) // -111\n\nfunction subtract (a, b) {\n  return a - b\n}"
    },
    {
      "type": "paragraph",
      "id": "7c8f1168b1e37e7b",
      "text": "But, the most common error is not returning the up to date result from your function. It's easy to think of the aggregate as always being there and the same if you are mostly using it as a reference to the same object each time, the same one that was initially passed. But some times it's a new value each iteration, not the last one but mutated. And if you ever forget to return it, it's undefined in the next go around."
    },
    {
      "type": "code",
      "id": "eb98951463f84402",
      "text": "//broken\n\nvar arr = [ 'Larry', 'Curly', 'Moe' ]\n\nvar a = arr.reduce(badAdd)\n\nconsole.log(a) // undefined\n\nvar b = arr.reduce(add)\n\nconsole.log(b) // Larry, Curly, Moe\n\nfunction badAdd (a, b) {\n  a + ', ' +  b\n}\n\nfunction add (a, b) {\n  return a + ', ' +  b\n}"
    },
    {
      "type": "paragraph",
      "id": "941a6844b18de556",
      "text": "So, happy reducing, but be careful of the sharp edges!"
    },
    {
      "type": "code",
      "id": "c969ffdfbaa60dea",
      "text": "var arr =\n  [ { name: 'Donatello', color: 'purple'}\n  , { name: 'Michelangelo', color: 'orange'}\n  , { name: 'Raphael', color: 'red'}\n  , { name: 'Leonardo', color: 'blue'}\n  ]\n\nvar a = arr.reduce(colorToName, {})\n\nconsole.log(a)\n//{ purple: 'Donatello',\n//  orange: 'Michelangelo',\n//  red: 'Raphael',\n//  blue: 'Leonardo' }\n\nfunction colorToName (a, b) {\n  a[b.color] = b.name\n  return a\n}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Reduce",
        "story": []
      },
      "date": 1434522094313
    },
    {
      "item": {
        "type": "factory",
        "id": "120bd83a951c4366"
      },
      "id": "120bd83a951c4366",
      "type": "add",
      "date": 1434522095973
    },
    {
      "type": "edit",
      "id": "120bd83a951c4366",
      "item": {
        "type": "paragraph",
        "id": "120bd83a951c4366",
        "text": "Reducing is the most general of the functional array methods. You take an array, and get back any one thing. I can be an array, an object, a number, a string, any damn thing. It can even replicate a filter, returning an array with elements removed, or a map that can even add elements. It's pretty cool. However, there are some eccentricities with the built in `[].map` function, making it one of the [[JavaScript Common Pitfalls]]"
      },
      "date": 1434522371008
    },
    {
      "type": "edit",
      "id": "120bd83a951c4366",
      "item": {
        "type": "paragraph",
        "id": "120bd83a951c4366",
        "text": "Reducing is the most general of the functional array methods. You take an array, and get back any one thing. I can be an array, an object, a number, a string, any damn thing. It can even replicate a filter, returning an array with elements removed, or a map that can even add elements. It's pretty cool. However, there are some eccentricities with the built in `[].reduce` function, making it one of the [[JavaScript Common Pitfalls]]"
      },
      "date": 1434522999759
    },
    {
      "type": "edit",
      "id": "120bd83a951c4366",
      "item": {
        "type": "paragraph",
        "id": "120bd83a951c4366",
        "text": "Reducing is the most general of the functional array methods. You take an array, and get back any one thing. I can be an array, an object, a number, a string, any damn thing. It can even replicate a filter, returning an array with elements removed, or a map that can even add elements. It's pretty cool. However, there are some eccentricities with the built in `[].reduce` function, making using it improperly one of the [[JavaScript Common Pitfalls]]"
      },
      "date": 1434523017593
    },
    {
      "item": {
        "type": "factory",
        "id": "bdd4b0e1e3c44ae4"
      },
      "id": "bdd4b0e1e3c44ae4",
      "type": "add",
      "after": "120bd83a951c4366",
      "date": 1434523055347
    },
    {
      "type": "edit",
      "id": "bdd4b0e1e3c44ae4",
      "item": {
        "type": "paragraph",
        "id": "bdd4b0e1e3c44ae4",
        "text": "First off it's an Array.prototype method. Meaning you have to do a little juggling to use it on [[array like objects]]."
      },
      "date": 1434523163668
    },
    {
      "type": "edit",
      "id": "bdd4b0e1e3c44ae4",
      "item": {
        "type": "paragraph",
        "id": "bdd4b0e1e3c44ae4",
        "text": "First off it's an Array.prototype method. Meaning you have to do a little juggling to use it on [[array like objects]]. Not a huge concern, but something to watch out for."
      },
      "date": 1434523265334
    },
    {
      "item": {
        "type": "factory",
        "id": "4e64f65d110d65b3"
      },
      "id": "4e64f65d110d65b3",
      "type": "add",
      "after": "bdd4b0e1e3c44ae4",
      "date": 1434523468755
    },
    {
      "type": "edit",
      "id": "4e64f65d110d65b3",
      "item": {
        "type": "paragraph",
        "id": "4e64f65d110d65b3",
        "text": "Secondly it works left to right. If order matters in your reduce that is important to know. If you need to work right to left, there is a corresponding `[].reduceRight`."
      },
      "date": 1434523555167
    },
    {
      "type": "add",
      "id": "a4701ac72bfa3e64",
      "item": {
        "type": "paragraph",
        "id": "a4701ac72bfa3e64",
        "text": "By default reduce provides the first element of the array as the aggregate, if one isn't provided. This can lead to extremely hard to debug valid, but nonsensical results."
      },
      "after": "4e64f65d110d65b3",
      "date": 1434523665532
    },
    {
      "item": {
        "type": "factory",
        "id": "29ca153ec3e29518"
      },
      "id": "29ca153ec3e29518",
      "type": "add",
      "after": "a4701ac72bfa3e64",
      "date": 1434523899807
    },
    {
      "type": "edit",
      "id": "29ca153ec3e29518",
      "item": {
        "type": "code",
        "id": "29ca153ec3e29518",
        "text": "// broken\n\nvar a = [ 100, 10, 1 ].reduce(function (total, next) {\n  return total - next\n})\nconsole.log(a) // 89\n\n// or did I want this?\nvar b = [ 100, 10, 1 ].reduce(function (total, next) {\n  return total - next\n}, 0) // initial reducer\nconsole.log(b) // -111"
      },
      "date": 1434523904942
    },
    {
      "type": "edit",
      "id": "29ca153ec3e29518",
      "item": {
        "type": "code",
        "id": "29ca153ec3e29518",
        "text": "// broken\n\nvar arr = [ 100, 10, 1 ]\n\nvar a = arr.reduce(function (total, next) {\n  return total - next\n})\nconsole.log(a) // 89\n\n// or did I want this?\nvar b = arr.reduce(function (total, next) {\n  return total - next\n}, 0) // initial reducer\nconsole.log(b) // -111"
      },
      "date": 1434524342312
    },
    {
      "item": {
        "type": "factory",
        "id": "678cb8dcf07b29f8"
      },
      "id": "678cb8dcf07b29f8",
      "type": "add",
      "after": "29ca153ec3e29518",
      "date": 1434524364169
    },
    {
      "type": "edit",
      "id": "678cb8dcf07b29f8",
      "item": {
        "type": "code",
        "id": "678cb8dcf07b29f8",
        "text": "//broken\n\nvar arr = [ 2, 4, 8, 64 ]\n\nvar a = arr.reduce(function (total, next) {\n  return total/next\n})\nconsole.log(a) // 0.0009765625\n\n// order matters\nvar b = arr.reduceRight(function (total, next) {\n  return total/next\n})\nconsole.log(b) // 1"
      },
      "date": 1434524368082
    },
    {
      "type": "move",
      "order": [
        "120bd83a951c4366",
        "bdd4b0e1e3c44ae4",
        "4e64f65d110d65b3",
        "678cb8dcf07b29f8",
        "a4701ac72bfa3e64",
        "29ca153ec3e29518"
      ],
      "id": "678cb8dcf07b29f8",
      "date": 1434524375609
    },
    {
      "type": "edit",
      "id": "29ca153ec3e29518",
      "item": {
        "type": "code",
        "id": "29ca153ec3e29518",
        "text": "// broken\n\nvar arr = [ 100, 10, 1 ]\n\nvar a = arr.reduce(subtract)\nconsole.log(a) // 89"
      },
      "date": 1434524557893
    },
    {
      "type": "edit",
      "id": "29ca153ec3e29518",
      "item": {
        "type": "code",
        "id": "29ca153ec3e29518",
        "text": "// broken\n\nvar arr = [ 100, 10, 1 ]\n\nvar a = arr.reduce(subtract)\nconsole.log(a) // 89\n\n// or did I want this?\nvar b = arr.reduce(subtract, 0) // initial reducer\nconsole.log(b) // -111\n\nfunction subtract (a, b) {\n  return a - b\n}"
      },
      "date": 1434524573441
    },
    {
      "type": "edit",
      "id": "678cb8dcf07b29f8",
      "item": {
        "type": "code",
        "id": "678cb8dcf07b29f8",
        "text": "//broken\n\nvar arr = [ 2, 4, 8, 64 ]\n\nvar a = arr.reduce(divide)\nconsole.log(a) // 0.0009765625\n\n// order matters\nvar b = arr.reduceRight(divide)\nconsole.log(b) // 1\n\nfunction divide (a, b) {\n  return a/b\n}\n"
      },
      "date": 1434524600673
    },
    {
      "item": {
        "type": "factory",
        "id": "7c8f1168b1e37e7b"
      },
      "id": "7c8f1168b1e37e7b",
      "type": "add",
      "after": "29ca153ec3e29518",
      "date": 1434525117301
    },
    {
      "type": "edit",
      "id": "7c8f1168b1e37e7b",
      "item": {
        "type": "paragraph",
        "id": "7c8f1168b1e37e7b",
        "text": "But, the most common error is not returning the up to date result from your function. It's easy to think of the aggregate as always being there and the same if you are mostly using it as a reference to the same object each time, the same one that was initially passed. But some times it's a new value each iteration, not the last one but mutated. And if you ever forget to return it, it's undefined in the next go around."
      },
      "date": 1434525271731
    },
    {
      "item": {
        "type": "factory",
        "id": "941a6844b18de556"
      },
      "id": "941a6844b18de556",
      "type": "add",
      "after": "7c8f1168b1e37e7b",
      "date": 1434525289347
    },
    {
      "type": "edit",
      "id": "941a6844b18de556",
      "item": {
        "type": "paragraph",
        "id": "941a6844b18de556",
        "text": "So, happy reducing, but be careful of the sharp edges!"
      },
      "date": 1434525305323
    },
    {
      "item": {
        "type": "factory",
        "id": "c969ffdfbaa60dea"
      },
      "id": "c969ffdfbaa60dea",
      "type": "add",
      "after": "941a6844b18de556",
      "date": 1434525308345
    },
    {
      "type": "edit",
      "id": "c969ffdfbaa60dea",
      "item": {
        "type": "code",
        "id": "c969ffdfbaa60dea",
        "text": "var arr =\n  [ { name: 'Donatello', color: 'purple'}\n  , { name: 'Michelangelo', color: 'orange'}\n  , { name: 'Raphael', color: 'red'}\n  , { name: 'Leonardo', color: 'blue'}\n  ]\n\nvar a = arr.reduce(colorToName, {})\n\nconsole.log(a)\n\nfunction colorToName (a, b) {\n  a[b.color] = b.name\n  return a\n}"
      },
      "date": 1434525332559
    },
    {
      "type": "edit",
      "id": "c969ffdfbaa60dea",
      "item": {
        "type": "code",
        "id": "c969ffdfbaa60dea",
        "text": "var arr =\n  [ { name: 'Donatello', color: 'purple'}\n  , { name: 'Michelangelo', color: 'orange'}\n  , { name: 'Raphael', color: 'red'}\n  , { name: 'Leonardo', color: 'blue'}\n  ]\n\nvar a = arr.reduce(colorToName, {})\n\nconsole.log(a)\n\n//{ purple: 'Donatello',\n//  orange: 'Michelangelo',\n//  red: 'Raphael',\n//  blue: 'Leonardo' }\n\nfunction colorToName (a, b) {\n  a[b.color] = b.name\n  return a\n}"
      },
      "date": 1434525363049
    },
    {
      "type": "edit",
      "id": "c969ffdfbaa60dea",
      "item": {
        "type": "code",
        "id": "c969ffdfbaa60dea",
        "text": "var arr =\n  [ { name: 'Donatello', color: 'purple'}\n  , { name: 'Michelangelo', color: 'orange'}\n  , { name: 'Raphael', color: 'red'}\n  , { name: 'Leonardo', color: 'blue'}\n  ]\n\nvar a = arr.reduce(colorToName, {})\n\nconsole.log(a)\n//{ purple: 'Donatello',\n//  orange: 'Michelangelo',\n//  red: 'Raphael',\n//  blue: 'Leonardo' }\n\nfunction colorToName (a, b) {\n  a[b.color] = b.name\n  return a\n}"
      },
      "date": 1434525372793
    },
    {
      "item": {
        "type": "factory",
        "id": "eb98951463f84402"
      },
      "id": "eb98951463f84402",
      "type": "add",
      "after": "c969ffdfbaa60dea",
      "date": 1434525738263
    },
    {
      "type": "move",
      "order": [
        "120bd83a951c4366",
        "bdd4b0e1e3c44ae4",
        "4e64f65d110d65b3",
        "678cb8dcf07b29f8",
        "a4701ac72bfa3e64",
        "29ca153ec3e29518",
        "7c8f1168b1e37e7b",
        "eb98951463f84402",
        "941a6844b18de556",
        "c969ffdfbaa60dea"
      ],
      "id": "eb98951463f84402",
      "date": 1434525743205
    },
    {
      "type": "edit",
      "id": "eb98951463f84402",
      "item": {
        "type": "code",
        "id": "eb98951463f84402",
        "text": "//broken\n\nvar arr = [ 'Larry', 'Curly', 'Moe' ]\n\nvar a = arr.reduce(badAdd)\n\nconsole.log(a) // undefined\n\nvar b = arr.reduce(add)\n\nconsole.log(b) // Larry, Curly, Moe\n\nfunction badAdd (a, b) {\n  a + ', ' +  b\n}\n\nfunction add (a, b) {\n  return a + ', ' +  b\n}"
      },
      "date": 1434525747495
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1652868792632
    }
  ]
}