{
  "title": "Observables Need To Be Consistent",
  "story": [
    {
      "type": "html",
      "text": "[refactored from [[Observers Throw Local Exceptions]]]",
      "id": "d593cf14868a4f5ac8ae99d1039e44f6"
    },
    {
      "type": "html",
      "text": "\nSuppose I have an observer pattern in my code that deals with state. This means the following: I've got an object A, observed by objects B1, ..., BN and, depending on the state of A, B1, ..., BN do stuff. E.g. something like MVC. ",
      "id": "5c2b1140f5a36a824d18a46b0bf72a10"
    },
    {
      "type": "html",
      "text": "\nWhat I don't want is operations on A that throw long-lived exceptions. \nSuppose I call ",
      "id": "c3dee478c1c6154db2d36a4cef725aaa"
    },
    {
      "type": "code",
      "text": "    A.foo()",
      "id": "84218c9935e5fdfe2e6afc50e1852982"
    },
    {
      "type": "html",
      "text": "\nand it partially changes the state of A and then, before notifying the observers, wonks out with an exception that travels through 17 objects ",
      "id": "3bd78b9a03a661929e4c54fd04bab587"
    },
    {
      "type": "html",
      "text": "(because I used [[Throw Dont Catch]] in my design). ",
      "id": "b66b866bc6963e72750a5cb4212cf94f"
    },
    {
      "type": "html",
      "text": "\nAll of a sudden, my views on the model are out of date. I need to deal with\nthis. In advance if possible. The tentative conclusions are: [[Observe Simple Things]] and [[Change Complex Observables Using Transactions]] ",
      "id": "6ae790e23aebdd45c0e272f5a300716f"
    },
    {
      "type": "html",
      "text": "<i> Or perhaps simply [[Tidy Up Before Throwing]]</i> ",
      "id": "6786236ac26bd9f90f647436013e26e1"
    },
    {
      "type": "html",
      "text": "\n[[William Grosso]]",
      "id": "4945c37db4ddcf73c24c6ab5a0cc137e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d72045db08639692c621433899b11d43"
    },
    {
      "type": "html",
      "text": "Leaving an object in an inconsistent state is a problem for any object, not just observers.  Cf the [[Design By Contract]] approach advocated by Eiffel. Meyer says that a routine either fullfills its contract, in which case it returns normally, or else it fails, in which case it cleans up and throws an exception. It doesn't half-complete.",
      "id": "50afa90bc251744d659a764783e4a22b"
    },
    {
      "type": "html",
      "text": "\nThe cleanup is easiest if the exceptional condition can be detected before any changes are actually made, of course - this leads to exceptions being thrown only for what we might consider violations of the pre-condition. Immutable objects plus garbage collection also make cleanup easier. We can just drop the half-formed object on the floor.",
      "id": "cb8cc8729beb30fdb4faf7ad1b4013a3"
    },
    {
      "type": "html",
      "text": "\nAnyway, this doesn't mean Observables can't throw exceptions. It can throw them before it has made any (externally visible) state changes. Or, sometimes, a big change can be broken into atomic parts that stand or fall alone. Thus:",
      "id": "04f4c33b2ae529b0e519671fdf5a5a22"
    },
    {
      "type": "code",
      "text": "    doPart1();\n    try {\n        doPart2();\n        doPart3();\n    }\n    finally {\n        observers.notify(); // At least part 1 got done.\n    }",
      "id": "b7671a8e68f2de86327a6404a91ce0d7"
    },
    {
      "type": "html",
      "text": "(This is an example of [[Use Finally Clause]].)",
      "id": "63371c98ab2909bb38cd1218fa2bfc88"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "fb114391f0c166a7f70e6cd28e100759"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d72045db08639692c621433899b11d43"
    },
    {
      "type": "html",
      "text": "See also [[Observer Pattern]]",
      "id": "9f0543779f1686dbb713f8bd2f151e3d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d72045db08639692c621433899b11d43"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]]",
      "id": "6b301ea34955dcac791f4f2f51a1783a"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ObservablesNeedToBeConsistent c2.com]",
      "id": "eaeca7efdd5b640e99e3e9bd6e193b2e"
    }
  ],
  "journal": [
    {
      "date": 1271155774000,
      "id": "e4513ec3e2d7878e00833061055f97cc",
      "type": "create",
      "item": {
        "title": "Observables Need To Be Consistent",
        "story": [
          {
            "type": "html",
            "text": "[refactored from [[Observers Throw Local Exceptions]]]",
            "id": "d593cf14868a4f5ac8ae99d1039e44f6"
          },
          {
            "type": "html",
            "text": "\nSuppose I have an observer pattern in my code that deals with state. This means the following: I've got an object A, observed by objects B1, ..., BN and, depending on the state of A, B1, ..., BN do stuff. E.g. something like MVC. ",
            "id": "5c2b1140f5a36a824d18a46b0bf72a10"
          },
          {
            "type": "html",
            "text": "\nWhat I don't want is operations on A that throw long-lived exceptions. \nSuppose I call ",
            "id": "c3dee478c1c6154db2d36a4cef725aaa"
          },
          {
            "type": "code",
            "text": "    A.foo()",
            "id": "84218c9935e5fdfe2e6afc50e1852982"
          },
          {
            "type": "html",
            "text": "\nand it partially changes the state of A and then, before notifying the observers, wonks out with an exception that travels through 17 objects ",
            "id": "3bd78b9a03a661929e4c54fd04bab587"
          },
          {
            "type": "html",
            "text": "(because I used [[Throw Dont Catch]] in my design). ",
            "id": "b66b866bc6963e72750a5cb4212cf94f"
          },
          {
            "type": "html",
            "text": "\nAll of a sudden, my views on the model are out of date. I need to deal with\nthis. In advance if possible. The tentative conclusions are: [[Observe Simple Things]] and [[Change Complex Observables Using Transactions]] ",
            "id": "6ae790e23aebdd45c0e272f5a300716f"
          },
          {
            "type": "html",
            "text": "<i> Or perhaps simply [[Tidy Up Before Throwing]]</i> ",
            "id": "6786236ac26bd9f90f647436013e26e1"
          },
          {
            "type": "html",
            "text": "\n[[William Grosso]]",
            "id": "4945c37db4ddcf73c24c6ab5a0cc137e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d72045db08639692c621433899b11d43"
          },
          {
            "type": "html",
            "text": "Leaving an object in an inconsistent state is a problem for any object, not just observers.  Cf the [[Design By Contract]] approach advocated by Eiffel. Meyer says that a routine either fullfills its contract, in which case it returns normally, or else it fails, in which case it cleans up and throws an exception. It doesn't half-complete.",
            "id": "50afa90bc251744d659a764783e4a22b"
          },
          {
            "type": "html",
            "text": "\nThe cleanup is easiest if the exceptional condition can be detected before any changes are actually made, of course - this leads to exceptions being thrown only for what we might consider violations of the pre-condition. Immutable objects plus garbage collection also make cleanup easier. We can just drop the half-formed object on the floor.",
            "id": "cb8cc8729beb30fdb4faf7ad1b4013a3"
          },
          {
            "type": "html",
            "text": "\nAnyway, this doesn't mean Observables can't throw exceptions. It can throw them before it has made any (externally visible) state changes. Or, sometimes, a big change can be broken into atomic parts that stand or fall alone. Thus:",
            "id": "04f4c33b2ae529b0e519671fdf5a5a22"
          },
          {
            "type": "code",
            "text": "    doPart1();\n    try {\n        doPart2();\n        doPart3();\n    }\n    finally {\n        observers.notify(); // At least part 1 got done.\n    }",
            "id": "b7671a8e68f2de86327a6404a91ce0d7"
          },
          {
            "type": "html",
            "text": "(This is an example of [[Use Finally Clause]].)",
            "id": "63371c98ab2909bb38cd1218fa2bfc88"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "fb114391f0c166a7f70e6cd28e100759"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d72045db08639692c621433899b11d43"
          },
          {
            "type": "html",
            "text": "See also [[Observer Pattern]]",
            "id": "9f0543779f1686dbb713f8bd2f151e3d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d72045db08639692c621433899b11d43"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]]",
            "id": "6b301ea34955dcac791f4f2f51a1783a"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ObservablesNeedToBeConsistent c2.com]",
            "id": "eaeca7efdd5b640e99e3e9bd6e193b2e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1651574185944
    }
  ]
}