{
  "title": "Decode.oneOf",
  "story": [
    {
      "type": "paragraph",
      "id": "4a66636a10c8d690",
      "text": "Try a bunch of different decoders. [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOf page]"
    },
    {
      "type": "code",
      "id": "0da9bdc70185f57f",
      "text": "oneOf : List (Decoder a) -> Decoder a"
    },
    {
      "type": "paragraph",
      "id": "dddd37ab14c5651c",
      "text": "This can be useful if the JSON may come in a couple different formats. For example, say you want to read an array of numbers, but some of them are null. "
    },
    {
      "type": "code",
      "id": "3997c4dfe3fd11ee",
      "text": "import String\n\nbadInt : Decoder Int\nbadInt =\n  oneOf [ int, null 0 ]\n\n-- decodeString (list badInt) \"[1,2,null,4]\" == Ok [1,2,0,4]\n"
    },
    {
      "type": "pagefold",
      "id": "0f78fbffcf53c8a2",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "87252bb7af1fa893",
      "site": "wiki.ralfbarkow.ch",
      "slug": "track-successes-and-failures",
      "title": "Track Successes and Failures",
      "text": "To track successes and failures when using Decode.oneOf, you can use Result type to capture the outcome of each decoding attempt. Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Decode.oneOf",
        "story": []
      },
      "date": 1694157629473
    },
    {
      "item": {
        "type": "factory",
        "id": "4a66636a10c8d690"
      },
      "id": "4a66636a10c8d690",
      "type": "add",
      "date": 1694157640358
    },
    {
      "type": "edit",
      "id": "4a66636a10c8d690",
      "item": {
        "type": "paragraph",
        "id": "4a66636a10c8d690",
        "text": "Try a bunch of different decoders. This can be useful if the JSON may come in a couple different formats. For example, say you want to read an array of numbers, but some of them are null."
      },
      "date": 1694157642592
    },
    {
      "type": "edit",
      "id": "4a66636a10c8d690",
      "item": {
        "type": "paragraph",
        "id": "4a66636a10c8d690",
        "text": "Try a bunch of different decoders. This can be useful if the JSON may come in a couple different formats. For example, say you want to read an array of numbers, but some of them are null. [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOf page]"
      },
      "date": 1694157650061
    },
    {
      "item": {
        "type": "factory",
        "id": "0da9bdc70185f57f"
      },
      "id": "0da9bdc70185f57f",
      "type": "add",
      "after": "4a66636a10c8d690",
      "date": 1694157680445
    },
    {
      "type": "edit",
      "id": "0da9bdc70185f57f",
      "item": {
        "type": "code",
        "id": "0da9bdc70185f57f",
        "text": "oneOf : List (Decoder a) -> Decoder a"
      },
      "date": 1694157682096
    },
    {
      "type": "edit",
      "id": "4a66636a10c8d690",
      "item": {
        "type": "paragraph",
        "id": "4a66636a10c8d690",
        "text": "Try a bunch of different decoders."
      },
      "date": 1694157688063
    },
    {
      "type": "add",
      "id": "dddd37ab14c5651c",
      "item": {
        "type": "paragraph",
        "id": "dddd37ab14c5651c",
        "text": "This can be useful if the JSON may come in a couple different formats. For example, say you want to read an array of numbers, but some of them are null. [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOf page]"
      },
      "after": "4a66636a10c8d690",
      "date": 1694157697227
    },
    {
      "type": "edit",
      "id": "dddd37ab14c5651c",
      "item": {
        "type": "paragraph",
        "id": "dddd37ab14c5651c",
        "text": "This can be useful if the JSON may come in a couple different formats. For example, say you want to read an array of numbers, but some of them are null. "
      },
      "date": 1694157726928
    },
    {
      "type": "edit",
      "id": "4a66636a10c8d690",
      "item": {
        "type": "paragraph",
        "id": "4a66636a10c8d690",
        "text": "Try a bunch of different decoders. [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOf page]"
      },
      "date": 1694157728628
    },
    {
      "id": "0da9bdc70185f57f",
      "type": "move",
      "order": [
        "4a66636a10c8d690",
        "0da9bdc70185f57f",
        "dddd37ab14c5651c"
      ],
      "date": 1694157730909
    },
    {
      "item": {
        "type": "factory",
        "id": "3997c4dfe3fd11ee"
      },
      "id": "3997c4dfe3fd11ee",
      "type": "add",
      "after": "dddd37ab14c5651c",
      "date": 1694157767310
    },
    {
      "type": "edit",
      "id": "3997c4dfe3fd11ee",
      "item": {
        "type": "code",
        "id": "3997c4dfe3fd11ee",
        "text": "import String\n\nbadInt : Decoder Int\nbadInt =\n  oneOf [ int, null 0 ]\n\n-- decodeString (list badInt) \"[1,2,null,4]\" == Ok [1,2,0,4]\n"
      },
      "date": 1694157769153
    },
    {
      "item": {
        "type": "factory",
        "id": "0f78fbffcf53c8a2"
      },
      "id": "0f78fbffcf53c8a2",
      "type": "add",
      "after": "3997c4dfe3fd11ee",
      "date": 1694157871197
    },
    {
      "type": "edit",
      "id": "0f78fbffcf53c8a2",
      "item": {
        "type": "pagefold",
        "id": "0f78fbffcf53c8a2",
        "text": "~"
      },
      "date": 1694157875492
    },
    {
      "item": {
        "type": "factory",
        "id": "87252bb7af1fa893"
      },
      "id": "87252bb7af1fa893",
      "type": "add",
      "after": "0f78fbffcf53c8a2",
      "date": 1694157876807
    },
    {
      "type": "edit",
      "id": "87252bb7af1fa893",
      "item": {
        "type": "reference",
        "id": "87252bb7af1fa893",
        "site": "wiki.ralfbarkow.ch",
        "slug": "track-successes-and-failures",
        "title": "Track Successes and Failures",
        "text": "To track successes and failures when using [[Decode.oneOf]], you can use Result type to capture the outcome of each decoding attempt. Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
      },
      "date": 1694157881403
    },
    {
      "type": "edit",
      "id": "87252bb7af1fa893",
      "item": {
        "type": "reference",
        "id": "87252bb7af1fa893",
        "site": "wiki.ralfbarkow.ch",
        "slug": "track-successes-and-failures",
        "title": "Track Successes and Failures",
        "text": "To track successes and failures when using Decode.oneOf, you can use Result type to capture the outcome of each decoding attempt. Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
      },
      "date": 1694157894123
    }
  ]
}