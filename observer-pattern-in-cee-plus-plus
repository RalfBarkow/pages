{
  "title": "Observer Pattern In Cee Plus Plus",
  "story": [
    {
      "type": "html",
      "text": "<b>[[Observer Pattern]] implementation in [[Cee Plus Plus]]</b>",
      "id": "5a3485065a88329430c7f81b6f8bf742"
    },
    {
      "type": "html",
      "text": "\n[[Andrei Alexandrescu]] has written two articles which discuss different ways of implementing the [[Observer Pattern]] in [[Cee Plus Plus]].",
      "id": "be39177a7dfadc5ecb1fab0285dd683a"
    },
    {
      "type": "html",
      "text": " [http://www.erdani.org/publications/cuj-2005-04.pdf www.erdani.org]",
      "id": "7aa49546680acee17215358444d8890c"
    },
    {
      "type": "html",
      "text": " [http://www.erdani.org/publications/cuj-2005-06.pdf www.erdani.org]",
      "id": "620eb6e6c908e181d39a9f4c069dc67a"
    },
    {
      "type": "html",
      "text": "\nIn this model all the observers inherit from an observer class and use this to connect to the subject which needs to be observed.",
      "id": "6192fa511d17b8a80c61d83beb4d4149"
    },
    {
      "type": "html",
      "text": "\nIn the paper [[Functional Tools For Object Oriented Tasks]] Yannis Smaragdakis and Brian Mc<b></b>Namara propose a different way of implementing the [[Observer Pattern]] using [[Functoids In Cpp]]. ",
      "id": "5794aebfc3a58f0e930cea0cd6aaf305"
    },
    {
      "type": "html",
      "text": "\n[[Functional Pattern System For Object Oriented Design]] gives a framework for the same ground and is referred to by Smaragdakis and Mc<b></b>Namara.",
      "id": "843aa6305400f3f17ae1a518e9467d61"
    },
    {
      "type": "html",
      "text": "\nI want to look at the implications of the interesting paper [[Deprecating The Observer Pattern]] where the coding is in [[Scala Language]].",
      "id": "82828ae426b6949b8feaf22d342de59a"
    },
    {
      "type": "html",
      "text": "\nI now have a version of this code which uses [[Functoids In Cpp]] with an extra layer of the [[Pimpl Idiom]] to make it work with CUDA C. See [[Programming Cuda Cee]] for explanation.",
      "id": "b3e6024bd0cd1d8e87cd0943c241a9e5"
    },
    {
      "type": "html",
      "text": "-- [[John Fletcher]]",
      "id": "2291432ca34a20718dc5a1e5f32f9793"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "4b77ffd80231164256d666fcb0a1c9e5"
    },
    {
      "type": "html",
      "text": "<b>Example</b>",
      "id": "05091b379afb23b021871930822dbe17"
    },
    {
      "type": "html",
      "text": "\nSimulating a chemical plant where <b>Feed</b> is a feed of material into a <b>Stream</b>.  The <b>Unit</b> mixer has two streams going into it (using overloaded < ).",
      "id": "2385dd00786cc7fb04222d3f70db8f7e"
    },
    {
      "type": "code",
      "text": "  Feed feed1(1000.);\n  Feed feed2(2000.);\n  Stream stream1(feed1);\n  Stream stream2(feed2);\n  Unit mixer;\n  mixer < stream1;\n  mixer < stream2;",
      "id": "995debcd6b2cf71dfb68c136ff55617e"
    },
    {
      "type": "html",
      "text": "\nA later call to change the mass of the feed causes a cascade of updates to all the other plant items which depend on <b>feed1</b>. This can be generalised to any change of parameter.  ",
      "id": "e3b4ce4f93e0ab065358cb09907034d2"
    },
    {
      "type": "code",
      "text": "  feed1.Set''''''Mass(2000.);",
      "id": "60edcbfa22e21288112f7ef13b737d2b"
    },
    {
      "type": "html",
      "text": "\nSee also [[Object Functional Implementation]]",
      "id": "cd867e8a55a781bd49b4b66a23e60bbf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "4b77ffd80231164256d666fcb0a1c9e5"
    },
    {
      "type": "html",
      "text": "These techniques could be used to implement updates for [[Functional Reactive Programming]]. In fact the way the example is put together appears to fit the definition of [[Reactive Programming]] on that page. ",
      "id": "c3d34c4397a73f1d722e40dff80d3cae"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "4b77ffd80231164256d666fcb0a1c9e5"
    },
    {
      "type": "html",
      "text": "[[Category Cpp]] [[Category Object Functional Patterns]] [[Category Functional Programming]] [[Category Multiparadigm]]",
      "id": "b6909504de281aea9a3c33edd37a214f"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ObserverPatternInCeePlusPlus c2.com]",
      "id": "8214cf073a38bd4313761449f5ad7d9d"
    }
  ],
  "journal": [
    {
      "date": 1331074777000,
      "id": "7d7f7d32d322f3e271a55fbee713e8a2",
      "type": "create",
      "item": {
        "title": "Observer Pattern In Cee Plus Plus",
        "story": [
          {
            "type": "html",
            "text": "<b>[[Observer Pattern]] implementation in [[Cee Plus Plus]]</b>",
            "id": "5a3485065a88329430c7f81b6f8bf742"
          },
          {
            "type": "html",
            "text": "\n[[Andrei Alexandrescu]] has written two articles which discuss different ways of implementing the [[Observer Pattern]] in [[Cee Plus Plus]].",
            "id": "be39177a7dfadc5ecb1fab0285dd683a"
          },
          {
            "type": "html",
            "text": " [http://www.erdani.org/publications/cuj-2005-04.pdf www.erdani.org]",
            "id": "7aa49546680acee17215358444d8890c"
          },
          {
            "type": "html",
            "text": " [http://www.erdani.org/publications/cuj-2005-06.pdf www.erdani.org]",
            "id": "620eb6e6c908e181d39a9f4c069dc67a"
          },
          {
            "type": "html",
            "text": "\nIn this model all the observers inherit from an observer class and use this to connect to the subject which needs to be observed.",
            "id": "6192fa511d17b8a80c61d83beb4d4149"
          },
          {
            "type": "html",
            "text": "\nIn the paper [[Functional Tools For Object Oriented Tasks]] Yannis Smaragdakis and Brian Mc<b></b>Namara propose a different way of implementing the [[Observer Pattern]] using [[Functoids In Cpp]]. ",
            "id": "5794aebfc3a58f0e930cea0cd6aaf305"
          },
          {
            "type": "html",
            "text": "\n[[Functional Pattern System For Object Oriented Design]] gives a framework for the same ground and is referred to by Smaragdakis and Mc<b></b>Namara.",
            "id": "843aa6305400f3f17ae1a518e9467d61"
          },
          {
            "type": "html",
            "text": "\nI want to look at the implications of the interesting paper [[Deprecating The Observer Pattern]] where the coding is in [[Scala Language]].",
            "id": "82828ae426b6949b8feaf22d342de59a"
          },
          {
            "type": "html",
            "text": "\nI now have a version of this code which uses [[Functoids In Cpp]] with an extra layer of the [[Pimpl Idiom]] to make it work with CUDA C. See [[Programming Cuda Cee]] for explanation.",
            "id": "b3e6024bd0cd1d8e87cd0943c241a9e5"
          },
          {
            "type": "html",
            "text": "-- [[John Fletcher]]",
            "id": "2291432ca34a20718dc5a1e5f32f9793"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "4b77ffd80231164256d666fcb0a1c9e5"
          },
          {
            "type": "html",
            "text": "<b>Example</b>",
            "id": "05091b379afb23b021871930822dbe17"
          },
          {
            "type": "html",
            "text": "\nSimulating a chemical plant where <b>Feed</b> is a feed of material into a <b>Stream</b>.  The <b>Unit</b> mixer has two streams going into it (using overloaded < ).",
            "id": "2385dd00786cc7fb04222d3f70db8f7e"
          },
          {
            "type": "code",
            "text": "  Feed feed1(1000.);\n  Feed feed2(2000.);\n  Stream stream1(feed1);\n  Stream stream2(feed2);\n  Unit mixer;\n  mixer < stream1;\n  mixer < stream2;",
            "id": "995debcd6b2cf71dfb68c136ff55617e"
          },
          {
            "type": "html",
            "text": "\nA later call to change the mass of the feed causes a cascade of updates to all the other plant items which depend on <b>feed1</b>. This can be generalised to any change of parameter.  ",
            "id": "e3b4ce4f93e0ab065358cb09907034d2"
          },
          {
            "type": "code",
            "text": "  feed1.Set''''''Mass(2000.);",
            "id": "60edcbfa22e21288112f7ef13b737d2b"
          },
          {
            "type": "html",
            "text": "\nSee also [[Object Functional Implementation]]",
            "id": "cd867e8a55a781bd49b4b66a23e60bbf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "4b77ffd80231164256d666fcb0a1c9e5"
          },
          {
            "type": "html",
            "text": "These techniques could be used to implement updates for [[Functional Reactive Programming]]. In fact the way the example is put together appears to fit the definition of [[Reactive Programming]] on that page. ",
            "id": "c3d34c4397a73f1d722e40dff80d3cae"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "4b77ffd80231164256d666fcb0a1c9e5"
          },
          {
            "type": "html",
            "text": "[[Category Cpp]] [[Category Object Functional Patterns]] [[Category Functional Programming]] [[Category Multiparadigm]]",
            "id": "b6909504de281aea9a3c33edd37a214f"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ObserverPatternInCeePlusPlus c2.com]",
            "id": "8214cf073a38bd4313761449f5ad7d9d"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1651574279797
    }
  ]
}