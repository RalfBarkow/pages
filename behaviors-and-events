{
  "title": "Behaviors and Events",
  "story": [
    {
      "type": "markdown",
      "id": "8e22210a9fa7f048",
      "text": "In FRP, there is a distinction between “[[Behaviors]]”, which represent continuous values over time, and “[[Events]]”, which represent sequence of discrete changes over [[Time]]. \n"
    },
    {
      "type": "markdown",
      "id": "b6cb6114a2842967",
      "text": "A behavior can be easily converted to events and vice versa (a behavior is like a stream of events but the value of the last event is cached and used as the current value of the behavior; an event is like a behavior but the change in the current value is recorded as a change event). Especially because KScript is a dynamically typed language, no the type constraint on them is enforced; one could mix them in the program. \n"
    },
    {
      "type": "markdown",
      "id": "f4a8abef9923c56e",
      "text": "But it still helps to think of the [[Distinction]]. Most notably, behaviors have initial values thus they have always values while events don’t have any value until the first change occurs. The way KScript defines behaviors is to provide the initial value and increment either by using the keyword “fby” (meaning ’followed by’ and borrowed from [[Lucid]]), or to send startsWith() (borrowed from [[Flapjax]]) to a stream to give the initial value."
    },
    {
      "type": "paragraph",
      "id": "6ac37ee051865dcc",
      "text": "⇒ [[Setting Values into Streams]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Behaviors and Events",
        "story": []
      },
      "date": 1665401985441
    },
    {
      "item": {
        "type": "factory",
        "id": "8e22210a9fa7f048"
      },
      "id": "8e22210a9fa7f048",
      "type": "add",
      "date": 1665401993892
    },
    {
      "type": "edit",
      "id": "8e22210a9fa7f048",
      "item": {
        "type": "markdown",
        "id": "8e22210a9fa7f048",
        "text": "In FRP, there is a distinction between “behaviors”, which represent continuous values over time, and “events”, which represent sequence of discrete changes over time. A behavior can be easily converted to events and vice versa (a behavior is like a stream of events but the value of the last event is cached and used as the current value of the behavior; an event is like a behavior but the change in the current value is recorded as a change event). Especially because KScript is a dynamically typed language, no the type constraint on them is enforced; one could mix them in the program. But it still helps to think of the distinction. Most notably, behaviors have initial values thus they have always values while events don’t have any value until the first change occurs. The way KScript defines behaviors is to provide the initial value and increment either by using the keyword “fby” (meaning ’followed by’ and borrowed from Lucid), or to send startsWith() (borrowed from Flapjax) to a stream to give the initial value."
      },
      "date": 1665401999911
    },
    {
      "type": "edit",
      "id": "8e22210a9fa7f048",
      "item": {
        "type": "markdown",
        "id": "8e22210a9fa7f048",
        "text": "In FRP, there is a distinction between “behaviors”, which represent continuous values over time, and “events”, which represent sequence of discrete changes over time. \n"
      },
      "date": 1665402006822
    },
    {
      "type": "add",
      "id": "b6cb6114a2842967",
      "item": {
        "type": "markdown",
        "id": "b6cb6114a2842967",
        "text": "A behavior can be easily converted to events and vice versa (a behavior is like a stream of events but the value of the last event is cached and used as the current value of the behavior; an event is like a behavior but the change in the current value is recorded as a change event). Especially because KScript is a dynamically typed language, no the type constraint on them is enforced; one could mix them in the program. But it still helps to think of the distinction. Most notably, behaviors have initial values thus they have always values while events don’t have any value until the first change occurs. The way KScript defines behaviors is to provide the initial value and increment either by using the keyword “fby” (meaning ’followed by’ and borrowed from Lucid), or to send startsWith() (borrowed from Flapjax) to a stream to give the initial value."
      },
      "after": "8e22210a9fa7f048",
      "date": 1665402009819
    },
    {
      "type": "edit",
      "id": "b6cb6114a2842967",
      "item": {
        "type": "markdown",
        "id": "b6cb6114a2842967",
        "text": "A behavior can be easily converted to events and vice versa (a behavior is like a stream of events but the value of the last event is cached and used as the current value of the behavior; an event is like a behavior but the change in the current value is recorded as a change event). Especially because KScript is a dynamically typed language, no the type constraint on them is enforced; one could mix them in the program. \n"
      },
      "date": 1665402022322
    },
    {
      "type": "add",
      "id": "f4a8abef9923c56e",
      "item": {
        "type": "markdown",
        "id": "f4a8abef9923c56e",
        "text": "But it still helps to think of the [[Distinction]]. Most notably, behaviors have initial values thus they have always values while events don’t have any value until the first change occurs. The way KScript defines behaviors is to provide the initial value and increment either by using the keyword “fby” (meaning ’followed by’ and borrowed from Lucid), or to send startsWith() (borrowed from Flapjax) to a stream to give the initial value."
      },
      "after": "b6cb6114a2842967",
      "date": 1665402034551
    },
    {
      "type": "edit",
      "id": "8e22210a9fa7f048",
      "item": {
        "type": "markdown",
        "id": "8e22210a9fa7f048",
        "text": "In FRP, there is a distinction between “[[behaviors]]”, which represent continuous values over time, and “events”, which represent sequence of discrete changes over time. \n"
      },
      "date": 1665402051128
    },
    {
      "type": "edit",
      "id": "8e22210a9fa7f048",
      "item": {
        "type": "markdown",
        "id": "8e22210a9fa7f048",
        "text": "In FRP, there is a distinction between “[[Behaviors]]”, which represent continuous values over time, and “[[events]]”, which represent sequence of discrete changes over time. \n"
      },
      "date": 1665402067470
    },
    {
      "type": "edit",
      "id": "8e22210a9fa7f048",
      "item": {
        "type": "markdown",
        "id": "8e22210a9fa7f048",
        "text": "In FRP, there is a distinction between “[[Behaviors]]”, which represent continuous values over time, and “[[Events]]”, which represent sequence of discrete changes over time. \n"
      },
      "date": 1665402078709
    },
    {
      "type": "edit",
      "id": "8e22210a9fa7f048",
      "item": {
        "type": "markdown",
        "id": "8e22210a9fa7f048",
        "text": "In FRP, there is a distinction between “[[Behaviors]]”, which represent continuous values over time, and “[[Events]]”, which represent sequence of discrete changes over [[Time]]. \n"
      },
      "date": 1665402095363
    },
    {
      "type": "edit",
      "id": "f4a8abef9923c56e",
      "item": {
        "type": "markdown",
        "id": "f4a8abef9923c56e",
        "text": "But it still helps to think of the [[Distinction]]. Most notably, behaviors have initial values thus they have always values while events don’t have any value until the first change occurs. The way KScript defines behaviors is to provide the initial value and increment either by using the keyword “fby” (meaning ’followed by’ and borrowed from [[Lucid]]), or to send startsWith() (borrowed from [[Flapjax]]) to a stream to give the initial value."
      },
      "date": 1665402196275
    },
    {
      "item": {
        "type": "factory",
        "id": "6ac37ee051865dcc"
      },
      "id": "6ac37ee051865dcc",
      "type": "add",
      "after": "f4a8abef9923c56e",
      "date": 1665402217370
    },
    {
      "type": "edit",
      "id": "6ac37ee051865dcc",
      "item": {
        "type": "paragraph",
        "id": "6ac37ee051865dcc",
        "text": "– [[Setting Values into Streams]]"
      },
      "date": 1665402230823
    },
    {
      "type": "edit",
      "id": "6ac37ee051865dcc",
      "item": {
        "type": "paragraph",
        "id": "6ac37ee051865dcc",
        "text": "⇒  [[Setting Values into Streams]]"
      },
      "date": 1665402248088
    },
    {
      "type": "edit",
      "id": "6ac37ee051865dcc",
      "item": {
        "type": "paragraph",
        "id": "6ac37ee051865dcc",
        "text": "⇒ [[Setting Values into Streams]]"
      },
      "date": 1665402255841
    }
  ]
}