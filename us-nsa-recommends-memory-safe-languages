{
  "title": "U.S. NSA recommends 'memory safe' languages",
  "story": [
    {
      "type": "paragraph",
      "id": "c5a398adc07b63cc",
      "text": "The U.S. NSA finally came out this week to strongly [[endorse]] `memory-safe' languages for most software programming, specifically mentioning C#, Go, Java, Ruby, Rust, and Swift as examples."
    },
    {
      "type": "paragraph",
      "id": "aefb39b956db7446",
      "text": "Apparently orphaned DoD language *Ada* was conspicuously left out of"
    },
    {
      "type": "paragraph",
      "id": "79b4d4516a3d9748",
      "text": "NSA's list, even though versions of Ada that target JVM can utilize Java JVM's GC.  [https://en.wikipedia.org/wiki/Ada_(programming_language https://en.wikipedia.org/wiki/Ada_(programming_language])"
    },
    {
      "type": "paragraph",
      "id": "a3f30bf267af53d9",
      "text": "Ubiquitous web language *Javascript* was also conspicuous by its absence, even though Javascript has a sophisticated GC. [https://javascript.info/garbage-collection https://javascript.info/garbage-collection]"
    },
    {
      "type": "paragraph",
      "id": "170f5857a37a55d9",
      "text": "Also curiously, NSA left out any mention of Arm's *CHERI* (Capability Hardware Enhanced RISC Instructions) architecture which should address NSA's performance concerns:"
    },
    {
      "type": "markdown",
      "id": "8d729701e6b5f28b",
      "text": "  &#8220;Memory safety can be costly in performance ... There is also considerable   performance overhead associated with checking the bounds on every array   access that could potentially be outside of the array.''   [https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/ https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/]"
    },
    {
      "type": "paragraph",
      "id": "0c2b06937ad94f83",
      "text": "    CHERI, can you come out tonight (Come come, come out tonight)     You, ooh better ask your NSA (CHERI baby)     Tell her everything is *all right*."
    },
    {
      "type": "markdown",
      "id": "be9708bee204c2b1",
      "text": "    (Apologies to Frankie Valli &amp;amp; Bob Gaudio)"
    },
    {
      "type": "paragraph",
      "id": "e4ab551948bff15e",
      "text": "With Arm's new 'Morello' processor, can I finally replace my *Raspberry Pi* with a *CHERI Pi*??"
    },
    {
      "type": "paragraph",
      "id": "93cf3631c423fa90",
      "text": "  [Now I know what startup sound will play when CHERI Pi boots...  :-) ]"
    },
    {
      "type": "paragraph",
      "id": "2d1a1e900c83e0cd",
      "text": "While waiting, use CHERI as a QEMU virtual machine? [https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/cheri-llvm.html https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/cheri-llvm.html]"
    },
    {
      "type": "paragraph",
      "id": "765e5dd178f7ba1f",
      "text": "[https://media.defense.gov/2022/Nov/10/2003112742/-1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY.PDF https://media.defense.gov/2022/Nov/10/2003112742/-1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY.PDF]"
    },
    {
      "type": "markdown",
      "id": "6e11f9a39a63b23c",
      "text": "&#8220;Memory issues in software comprise a large portion of the exploitable vulnerabilities in existence. NSA advises organizations to consider making a strategic shift from programming languages that provide little or no inherent memory protection, suchas C/C++, to a memory safe language when possible.  [Examples noted above, with html trademarks omitted here.  PGN] Memory-safe languages provide differing degrees of memory usage protections, so available code hardening defenses, such as compiler options, tool analysis, and operating system configurations, should be used for their protections as well. By using memory-safe languages and available code hardening defenses, many memory vulnerabilities can be prevented, mitigated, or made very difficult for cyber-actors to exploit.''"
    },
    {
      "type": "markdown",
      "id": "2e7c9f2f7f6a2c7a",
      "text": "Source: Media Defense via [https://catless.ncl.ac.uk/Risks/33/53/#subj3.1 The Risks Digest]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "date": 1669179664000,
      "item": {
        "title": "U.S. NSA recommends 'memory safe' languages",
        "story": [
          {
            "type": "paragraph",
            "id": "c5a398adc07b63cc",
            "text": "The U.S. NSA finally came out this week to strongly endorse `memory-safe' languages for most software programming, specifically mentioning C#, Go, Java, Ruby, Rust, and Swift as examples."
          },
          {
            "type": "paragraph",
            "id": "aefb39b956db7446",
            "text": "Apparently orphaned DoD language *Ada* was conspicuously left out of"
          },
          {
            "type": "paragraph",
            "id": "79b4d4516a3d9748",
            "text": "NSA's list, even though versions of Ada that target JVM can utilize Java JVM's GC.  [https://en.wikipedia.org/wiki/Ada_(programming_language https://en.wikipedia.org/wiki/Ada_(programming_language])"
          },
          {
            "type": "paragraph",
            "id": "a3f30bf267af53d9",
            "text": "Ubiquitous web language *Javascript* was also conspicuous by its absence, even though Javascript has a sophisticated GC. [https://javascript.info/garbage-collection https://javascript.info/garbage-collection]"
          },
          {
            "type": "paragraph",
            "id": "170f5857a37a55d9",
            "text": "Also curiously, NSA left out any mention of Arm's *CHERI* (Capability Hardware Enhanced RISC Instructions) architecture which should address NSA's performance concerns:"
          },
          {
            "type": "markdown",
            "id": "8d729701e6b5f28b",
            "text": "  &#8220;Memory safety can be costly in performance ... There is also considerable   performance overhead associated with checking the bounds on every array   access that could potentially be outside of the array.''   [https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/ https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/]"
          },
          {
            "type": "paragraph",
            "id": "0c2b06937ad94f83",
            "text": "    CHERI, can you come out tonight (Come come, come out tonight)     You, ooh better ask your NSA (CHERI baby)     Tell her everything is *all right*."
          },
          {
            "type": "markdown",
            "id": "be9708bee204c2b1",
            "text": "    (Apologies to Frankie Valli &amp;amp; Bob Gaudio)"
          },
          {
            "type": "paragraph",
            "id": "e4ab551948bff15e",
            "text": "With Arm's new 'Morello' processor, can I finally replace my *Raspberry Pi* with a *CHERI Pi*??"
          },
          {
            "type": "paragraph",
            "id": "93cf3631c423fa90",
            "text": "  [Now I know what startup sound will play when CHERI Pi boots...  :-) ]"
          },
          {
            "type": "paragraph",
            "id": "2d1a1e900c83e0cd",
            "text": "While waiting, use CHERI as a QEMU virtual machine? [https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/cheri-llvm.html https://www.cl.cam.ac.uk/research/security/ctsrd/cheri/cheri-llvm.html]"
          },
          {
            "type": "paragraph",
            "id": "765e5dd178f7ba1f",
            "text": "[https://media.defense.gov/2022/Nov/10/2003112742/-1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY.PDF https://media.defense.gov/2022/Nov/10/2003112742/-1/-1/0/CSI_SOFTWARE_MEMORY_SAFETY.PDF]"
          },
          {
            "type": "markdown",
            "id": "6e11f9a39a63b23c",
            "text": "&#8220;Memory issues in software comprise a large portion of the exploitable vulnerabilities in existence. NSA advises organizations to consider making a strategic shift from programming languages that provide little or no inherent memory protection, suchas C/C++, to a memory safe language when possible.  [Examples noted above, with html trademarks omitted here.  PGN] Memory-safe languages provide differing degrees of memory usage protections, so available code hardening defenses, such as compiler options, tool analysis, and operating system configurations, should be used for their protections as well. By using memory-safe languages and available code hardening defenses, many memory vulnerabilities can be prevented, mitigated, or made very difficult for cyber-actors to exploit.''"
          },
          {
            "type": "markdown",
            "id": "2e7c9f2f7f6a2c7a",
            "text": "Source: Media Defense via [https://catless.ncl.ac.uk/Risks/33/53/#subj3.1 The Risks Digest]"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "risks.rodwell.me",
      "date": 1669238346562
    },
    {
      "type": "edit",
      "id": "c5a398adc07b63cc",
      "item": {
        "type": "paragraph",
        "id": "c5a398adc07b63cc",
        "text": "The U.S. NSA finally came out this week to strongly [[endorse]] `memory-safe' languages for most software programming, specifically mentioning C#, Go, Java, Ruby, Rust, and Swift as examples."
      },
      "date": 1669238362964
    }
  ]
}