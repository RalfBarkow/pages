{
  "title": "Concept Oriented",
  "story": [
    {
      "type": "html",
      "text": "The concept-oriented paradigm is a direction in computer science, which follows a set of the following fundamental principles: ",
      "id": "c164cf8a8b4644b15f3ccbe7816e69ba"
    },
    {
      "type": "html",
      "text": " Objects are living in space with complex structure and the space plays a crucial role in defining the system behaviour and functionality. ",
      "id": "a8430fa69a6d26769dbaec24268e2f3b"
    },
    {
      "type": "html",
      "text": " Representation and access are the most important functions of space, which are executed each time access request passes the space border ",
      "id": "4a9b6463239930152ae7cd9e9176a330"
    },
    {
      "type": "html",
      "text": " Objects are represented by means of references created for them by the space to be used outside ",
      "id": "967d9d34ae215d6f4b3e2d993c90a43b"
    },
    {
      "type": "html",
      "text": "\nAn elementary part of space is referred to as a concept, which generalizes such terms as class in programming, table/relation in databases, scope/environment in design. ",
      "id": "5eceffc8e3092b2a525fb1341c754a4e"
    },
    {
      "type": "html",
      "text": "\nThese principles are used to develop more concrete directions such as [[Concept Oriented Programming]], [[Concept Oriented Model]] and [[Concept Oriented Design]].",
      "id": "d33846ef82bc65e53b0900d7c10cf895"
    },
    {
      "type": "html",
      "text": "\nMore information on the concept-oriented paradigm can be found at the concept-oriented portal here [http://conceptoriented.org conceptoriented.org] and specifically in the concept-oriented FAQ here [http://conceptoriented.org/faqs/co-faq.html conceptoriented.org]. ",
      "id": "7741c4c2f5394d61121bfdcc74c703f4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "22c5cce1771cec5723381f0da4eb87dd"
    },
    {
      "type": "html",
      "text": "\nSome related disciplines include [[Object Capability Model]] (which achieves security via interface and [[Proxy Pattern]], esp. applicable to [[Actors Model]]), [[Kell Calculus]] ('kell' is first-class locality atop [[Pi Calculus]], hierarchical, intercepts messages to and from 'child' kells in the same manner as [[Concept Oriented Programming]] with its spaces). Neither of these definitions formalize the system of external names or references to local objects in the same manner as does [[Concept Oriented Programming]].",
      "id": "4dae8f3a3a873558fb17dc61ede99ae2"
    },
    {
      "type": "html",
      "text": "\nImplementation may be a bit difficult... a collection of <b>Button</b> concepts might have an enormous variety of different <b>Identifier</b> types, each of which would have their own semantics associating them with an external space and the button within it.",
      "id": "104b4f36651c0710cc91032a854a6b44"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "22c5cce1771cec5723381f0da4eb87dd"
    },
    {
      "type": "html",
      "text": "\nThis splitting of meaning into objects and concepts sounds interesting, especially that bit about the representation and access of an object being dependent on the concept (I take it to a synonym for <i>context</i>). But I am severely missing examples, anything to see how this is actually used. Everything on that website is just plain self-referential. Without any concrete connections or examples or a comparison of OO with matching CO code) I just cannot get a grasp of what is really meant. -- [[Gunnar Zarncke]]",
      "id": "cb1c7452f2aa97f6916d1d46bc03bc4c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "22c5cce1771cec5723381f0da4eb87dd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "22c5cce1771cec5723381f0da4eb87dd"
    },
    {
      "type": "html",
      "text": "<b>[[[Walled Garden]] Discussion]</b>",
      "id": "4c2b854bf9f4d6900e3bddd35f070498"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "22c5cce1771cec5723381f0da4eb87dd"
    },
    {
      "type": "html",
      "text": "\nLike [[Gunnar Zarncke]] I'm piqued but perplexed by the circular definitions.  I actually ended up here because I was looking for more information about [[Concept Programming]] and a search for Concept lured me into this [[Walled Garden]].  I did also find [[Concept Programming]] so was not completely thwarted.  [[Concept Programming]] is explained in detail at [http://xlr.sourceforge.net/concept/top.html xlr.sourceforge.net].  From [[Alexandr Savinov]] (or someone else that understands [[Concept Oriented Programming]]), I'd like to see comparisons that illustrate the relationship between [[Concept Oriented Programming]] and the following: [[Concept Programming]], [[Object Oriented Programming]], [[Aspect Oriented Programming]], [[Design Patterns]], ... etc -- [[Brandon Cs Sanders]]",
      "id": "ffc54fb0ebb6326f6a86b1021d6340fe"
    },
    {
      "type": "html",
      "text": "<i>From what I've seen, [[Concept Programming]] and [[Concept Oriented Programming]] (the [[Concept Oriented]] [[Walled Garden]]) are <b>not</b> related at all. -- [[Jeff Grigg]]</i>",
      "id": "444e19a382000d64b4b04b06441498d0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "22c5cce1771cec5723381f0da4eb87dd"
    },
    {
      "type": "html",
      "text": "\nIs there a tie in between this work and [[Cpp And Concepts]]?  It might be a question of the implementation. In that case it will cease to be a [[Walled Garden]]. -- [[John Fletcher]]",
      "id": "87ed440b0e165cd10dc7ea90d62f4ae4"
    },
    {
      "type": "html",
      "text": "\nNo, there is no tie between [[Concept Oriented Programming]] (which formalizes some notion of distinct <b>spaces</b> by formalizing address/identity of objects and offering mechanisms to capture messages at space 'borders') and [[Cpp And Concepts]] (which provides advanced features for checking template applications, making error descriptions more tractable, and optimizing the adaptation of template-driven algorithm based on template-provided traits of the underlying structures over which those algorithms operate). The two are using the word <b>Concept</b> in completely disparate ways. ",
      "id": "6c77a0e2e0aee71046e28033b57a0383"
    },
    {
      "type": "html",
      "text": "<i>Thanks</i> -- [[John Fletcher]]",
      "id": "d7d935cbcf008ca360bea6388605c414"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "22c5cce1771cec5723381f0da4eb87dd"
    },
    {
      "type": "html",
      "text": "\nSome related concepts(ideas):",
      "id": "b21cc42a9fbbd3e8e560d6f477631d0b"
    },
    {
      "type": "html",
      "text": " [[Concepts Techniques And Models Of Computer Programming]]",
      "id": "134044417907c40974d62cdfb9010829"
    },
    {
      "type": "html",
      "text": " [[Structure And Interpretation Of Computer Programs]]",
      "id": "a006caf50a7aa2dff21ebc2f22a909bf"
    },
    {
      "type": "html",
      "text": " <b><i>I</b><b>fYouLikeItYouMustUnderstandIt</b></i> (or perhaps) [[If You Dont Like It You Dont Understand It]]",
      "id": "4a0a4f1a15e62e6ee9db1f2e2998edf9"
    },
    {
      "type": "html",
      "text": "<i>How are these related?</i>",
      "id": "6709a1d757759dcca4e325bd10b5fddf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "22c5cce1771cec5723381f0da4eb87dd"
    },
    {
      "type": "html",
      "text": "[[Category Information Engineering]]",
      "id": "ea460422cac73625929917a9e0f8c91b"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ConceptOriented c2.com]",
      "id": "efdd278bc214e48ad9189df97dea76ea"
    }
  ],
  "journal": [
    {
      "date": 1278726137000,
      "id": "b85b53c61af86d46863bd198c92f213d",
      "type": "create",
      "item": {
        "title": "Concept Oriented",
        "story": [
          {
            "type": "html",
            "text": "The concept-oriented paradigm is a direction in computer science, which follows a set of the following fundamental principles: ",
            "id": "c164cf8a8b4644b15f3ccbe7816e69ba"
          },
          {
            "type": "html",
            "text": " Objects are living in space with complex structure and the space plays a crucial role in defining the system behaviour and functionality. ",
            "id": "a8430fa69a6d26769dbaec24268e2f3b"
          },
          {
            "type": "html",
            "text": " Representation and access are the most important functions of space, which are executed each time access request passes the space border ",
            "id": "4a9b6463239930152ae7cd9e9176a330"
          },
          {
            "type": "html",
            "text": " Objects are represented by means of references created for them by the space to be used outside ",
            "id": "967d9d34ae215d6f4b3e2d993c90a43b"
          },
          {
            "type": "html",
            "text": "\nAn elementary part of space is referred to as a concept, which generalizes such terms as class in programming, table/relation in databases, scope/environment in design. ",
            "id": "5eceffc8e3092b2a525fb1341c754a4e"
          },
          {
            "type": "html",
            "text": "\nThese principles are used to develop more concrete directions such as [[Concept Oriented Programming]], [[Concept Oriented Model]] and [[Concept Oriented Design]].",
            "id": "d33846ef82bc65e53b0900d7c10cf895"
          },
          {
            "type": "html",
            "text": "\nMore information on the concept-oriented paradigm can be found at the concept-oriented portal here [http://conceptoriented.org conceptoriented.org] and specifically in the concept-oriented FAQ here [http://conceptoriented.org/faqs/co-faq.html conceptoriented.org]. ",
            "id": "7741c4c2f5394d61121bfdcc74c703f4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "22c5cce1771cec5723381f0da4eb87dd"
          },
          {
            "type": "html",
            "text": "\nSome related disciplines include [[Object Capability Model]] (which achieves security via interface and [[Proxy Pattern]], esp. applicable to [[Actors Model]]), [[Kell Calculus]] ('kell' is first-class locality atop [[Pi Calculus]], hierarchical, intercepts messages to and from 'child' kells in the same manner as [[Concept Oriented Programming]] with its spaces). Neither of these definitions formalize the system of external names or references to local objects in the same manner as does [[Concept Oriented Programming]].",
            "id": "4dae8f3a3a873558fb17dc61ede99ae2"
          },
          {
            "type": "html",
            "text": "\nImplementation may be a bit difficult... a collection of <b>Button</b> concepts might have an enormous variety of different <b>Identifier</b> types, each of which would have their own semantics associating them with an external space and the button within it.",
            "id": "104b4f36651c0710cc91032a854a6b44"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "22c5cce1771cec5723381f0da4eb87dd"
          },
          {
            "type": "html",
            "text": "\nThis splitting of meaning into objects and concepts sounds interesting, especially that bit about the representation and access of an object being dependent on the concept (I take it to a synonym for <i>context</i>). But I am severely missing examples, anything to see how this is actually used. Everything on that website is just plain self-referential. Without any concrete connections or examples or a comparison of OO with matching CO code) I just cannot get a grasp of what is really meant. -- [[Gunnar Zarncke]]",
            "id": "cb1c7452f2aa97f6916d1d46bc03bc4c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "22c5cce1771cec5723381f0da4eb87dd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "22c5cce1771cec5723381f0da4eb87dd"
          },
          {
            "type": "html",
            "text": "<b>[[[Walled Garden]] Discussion]</b>",
            "id": "4c2b854bf9f4d6900e3bddd35f070498"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "22c5cce1771cec5723381f0da4eb87dd"
          },
          {
            "type": "html",
            "text": "\nLike [[Gunnar Zarncke]] I'm piqued but perplexed by the circular definitions.  I actually ended up here because I was looking for more information about [[Concept Programming]] and a search for Concept lured me into this [[Walled Garden]].  I did also find [[Concept Programming]] so was not completely thwarted.  [[Concept Programming]] is explained in detail at [http://xlr.sourceforge.net/concept/top.html xlr.sourceforge.net].  From [[Alexandr Savinov]] (or someone else that understands [[Concept Oriented Programming]]), I'd like to see comparisons that illustrate the relationship between [[Concept Oriented Programming]] and the following: [[Concept Programming]], [[Object Oriented Programming]], [[Aspect Oriented Programming]], [[Design Patterns]], ... etc -- [[Brandon Cs Sanders]]",
            "id": "ffc54fb0ebb6326f6a86b1021d6340fe"
          },
          {
            "type": "html",
            "text": "<i>From what I've seen, [[Concept Programming]] and [[Concept Oriented Programming]] (the [[Concept Oriented]] [[Walled Garden]]) are <b>not</b> related at all. -- [[Jeff Grigg]]</i>",
            "id": "444e19a382000d64b4b04b06441498d0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "22c5cce1771cec5723381f0da4eb87dd"
          },
          {
            "type": "html",
            "text": "\nIs there a tie in between this work and [[Cpp And Concepts]]?  It might be a question of the implementation. In that case it will cease to be a [[Walled Garden]]. -- [[John Fletcher]]",
            "id": "87ed440b0e165cd10dc7ea90d62f4ae4"
          },
          {
            "type": "html",
            "text": "\nNo, there is no tie between [[Concept Oriented Programming]] (which formalizes some notion of distinct <b>spaces</b> by formalizing address/identity of objects and offering mechanisms to capture messages at space 'borders') and [[Cpp And Concepts]] (which provides advanced features for checking template applications, making error descriptions more tractable, and optimizing the adaptation of template-driven algorithm based on template-provided traits of the underlying structures over which those algorithms operate). The two are using the word <b>Concept</b> in completely disparate ways. ",
            "id": "6c77a0e2e0aee71046e28033b57a0383"
          },
          {
            "type": "html",
            "text": "<i>Thanks</i> -- [[John Fletcher]]",
            "id": "d7d935cbcf008ca360bea6388605c414"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "22c5cce1771cec5723381f0da4eb87dd"
          },
          {
            "type": "html",
            "text": "\nSome related concepts(ideas):",
            "id": "b21cc42a9fbbd3e8e560d6f477631d0b"
          },
          {
            "type": "html",
            "text": " [[Concepts Techniques And Models Of Computer Programming]]",
            "id": "134044417907c40974d62cdfb9010829"
          },
          {
            "type": "html",
            "text": " [[Structure And Interpretation Of Computer Programs]]",
            "id": "a006caf50a7aa2dff21ebc2f22a909bf"
          },
          {
            "type": "html",
            "text": " <b><i>I</b><b>fYouLikeItYouMustUnderstandIt</b></i> (or perhaps) [[If You Dont Like It You Dont Understand It]]",
            "id": "4a0a4f1a15e62e6ee9db1f2e2998edf9"
          },
          {
            "type": "html",
            "text": "<i>How are these related?</i>",
            "id": "6709a1d757759dcca4e325bd10b5fddf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "22c5cce1771cec5723381f0da4eb87dd"
          },
          {
            "type": "html",
            "text": "[[Category Information Engineering]]",
            "id": "ea460422cac73625929917a9e0f8c91b"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ConceptOriented c2.com]",
            "id": "efdd278bc214e48ad9189df97dea76ea"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907616895
    }
  ]
}