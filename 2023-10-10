{
  "title": "2023-10-10",
  "story": [
    {
      "type": "paragraph",
      "id": "23455219ca40eb60",
      "text": "⇒ [[Text without Link]] ⇒ [[Elm Markup]]"
    },
    {
      "type": "paragraph",
      "id": "019e48232d8217c6",
      "text": "⇒ [[Haskelite]]: A Step-By-Step Interpreter for Teaching Functional Programming [https://drops.dagstuhl.de/opus/volltexte/2023/18508/ page]"
    },
    {
      "type": "paragraph",
      "id": "dff8b256f11cc11f",
      "text": "Welcome to Haskelite [https://pbv.github.io/haskelite/ page] [https://github.com/pbv/haskelite github]"
    },
    {
      "type": "paragraph",
      "id": "300faa2c441f7fad",
      "text": "[[λ Lessons]] [https://stevekrouse.com/hs.js/ page]"
    },
    {
      "type": "paragraph",
      "id": "b66879c650624dc4",
      "text": "Tricks with case expressions in Elm [https://medium.com/elm-shorts/tricks-with-case-statements-in-elm-80223b85484f post] by [[Wouter In t Velt]]"
    },
    {
      "type": "paragraph",
      "id": "193a50ef44e37b10",
      "text": "⇒ [[elm-spec]] [https://github.com/gdotdesign/elm-spec github] by [[Szikszai Gusztáv]]"
    },
    {
      "type": "paragraph",
      "id": "68bab033b8a1975d",
      "text": "Automated Cross Browser Testing [https://discourse.elm-lang.org/t/automated-cross-browser-testing/8444 discourse]"
    },
    {
      "type": "paragraph",
      "id": "566549c9ecd926b7",
      "text": "[[Cypress]] [https://docs.cypress.io/guides/overview/why-cypress page]"
    },
    {
      "type": "video",
      "id": "a3c62de368f5bfa6",
      "text": "YOUTUBE LcGHiFnBh3Y\nCypress in a Nutshell webcast"
    },
    {
      "type": "paragraph",
      "id": "be7c9055b1e36469",
      "text": "Example Twitter client web app shown in Cypress in a Nutshell webcast. [https://github.com/cypress-io/birdboard github]"
    },
    {
      "type": "pagefold",
      "id": "13e7aab9cd00a10a",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "561dab99a2509fcc",
      "site": "found.ward.fed.wiki",
      "slug": "complexity-made-simple",
      "title": "Complexity Made Simple",
      "text": "Complexity and chaos are being invoked with"
    },
    {
      "type": "reference",
      "id": "8e2586e2e98d5e6d",
      "site": "wellspring.fed.wiki",
      "slug": "esomorphic-regeneration",
      "title": "Esomorphic Regeneration",
      "text": "Sometimes we make up new words for lived experiences that have no name – and so it is here."
    },
    {
      "type": "reference",
      "id": "7979cdf07e492cc2",
      "site": "found.ward.fed.wiki",
      "slug": "weird-number-calculator",
      "title": "Weird Number Calculator",
      "text": "My family plays an online game called count which exists as a bot on discord. We take turns offering formulas that evaluate to the next integer in the sequence 1, 2, 3, etc. Mistakes yield ridicule from the bot running the game and everyone starts over at 1."
    },
    {
      "type": "reference",
      "id": "6a66b33b5448228d",
      "site": "found.ward.fed.wiki",
      "slug": "little-ship-of-science",
      "title": "Little Ship of Science",
      "text": "This is the fundamental problem with most attempts to reform science: everybody’s trying to turn the Big Ship, nobody’s launching Little Ships. I’ve got a design for my own Little Ship, my literal dream boat. [https://www.experimental-history.com/p/lets-build-a-fleet-and-change-the post]"
    },
    {
      "type": "pagefold",
      "id": "156a3f7c46b5b1ad",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "0babb0e898a84fc6",
      "text": "The [[Economics of Programming Languages]], by the creator of Elm language [https://fosstodon.org/@rgb/111209865937829591 post]"
    },
    {
      "type": "paragraph",
      "id": "f4ce49d41b72fc8d",
      "text": "⇒ [[DMX]]: jpn [https://forum.dmx.systems/t/how-can-dmx-be-integrated-with-open-source-large-language-models/172/4 post]"
    },
    {
      "type": "paragraph",
      "id": "d27191cb6c8493d3",
      "text": "Dear Liangbing, I really appreciate your question and thought, since it totally matches similar ideas I have had already. Unfortunately I did not have the time to learn more about LLM recently. A few years ago we were applying for EU funding for a medical project with very similar requirements. It was about the stochastic analyzing of computer tomograph pictures of the brain via self learning inference systems, to identify irregular patterns that might be relevant for the early diagnosis of Alzheimer’s disease. The main argument for using DMX in this context was that the “reasoning” would not be done by the machine, but by a (human) doctor, but that the computer is much better in running picture comparisons. The goal was that the machine would select and suggest candidates to look at for the doctor. Also, it was key, that access to the sources for the selection process were provided via paths of associations within DMX, so that at any point, it was possible to retrace the process. And last but not least the doctors would be able to “feed” the systems, by creating new associations or deleting wrong ones, aka semantic editing."
    },
    {
      "type": "pagefold",
      "id": "03577d8a215f45b1",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "ed12d90df3c6b48c",
      "text": "Closing inactive issues [https://docs.github.com/en/actions/managing-issues-and-pull-requests/closing-inactive-issues github]"
    },
    {
      "type": "video",
      "id": "b9aaa8b9fd22aa0b",
      "text": "YOUTUBE cJMwBwFj5nQ\n[[Bruce Lee]], Be As Water Philosophy"
    },
    {
      "type": "paragraph",
      "id": "88139d820f5d6879",
      "text": "Die Bruce Lee-Story - \"Be Water!\" [https://www.arte.tv/de/videos/110951-000-A/ arte]"
    },
    {
      "type": "paragraph",
      "id": "b1de6e770f40aa40",
      "text": "Assume Responsibility"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "unit",
      "title": "Unit",
      "text": "Empty [[Container]]s can be seen as Units.",
      "id": "aa1bf28ecb78eac0"
    },
    {
      "type": "paragraph",
      "id": "a7af04d36351cce9",
      "text": "The unit type [https://sporto.gitbooks.io/elm-tutorial/content/en-v01/01-foundations/07-unit-type.html page]"
    },
    {
      "type": "paragraph",
      "id": "7cd4fc0152d7d84f",
      "text": "The empty tuple () is called the [[Unit]] type in Elm."
    },
    {
      "type": "paragraph",
      "id": "3c7b33a0835ed7ee",
      "text": "What does () mean? [https://faq.elm-community.org/#what-does--mean faq]: It is the empty tuple or [[Unit Type]]. It serves much like [[void]], null, or None in other languages."
    },
    {
      "type": "paragraph",
      "id": "a64858c490bda4c6",
      "text": "Model-View-Update"
    },
    {
      "type": "paragraph",
      "id": "62928012c4d3da24",
      "text": "FOWLER, Simon, 2020. [[Model-View-Update-Communicate]]: Session Types meet the Elm Architecture. Online. 29 May 2020. arXiv. arXiv:1910.11108. [Accessed 10 October 2023]. Session types are a type discipline for communication channel endpoints which allow conformance to protocols to be checked statically. Safely implementing session types requires linearity, usually in the form of a linear type system. Unfortunately, linear typing is difficult to integrate with graphical user interfaces (GUIs), and to date most programs using session types are command line applications. In this paper, we propose the first principled integration of session typing and GUI development by building upon the Model-View-Update (MVU) architecture, pioneered by the Elm programming language. We introduce $lambda_{textsf{MVU}}$, the first formal model of the MVU architecture, and prove it sound. By extending $lambda_{textsf{MVU}}$ with emph{commands} as found in Elm, along with emph{linearity} and emph{model transitions}, we show the first formal integration of session typing and GUI programming. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.arXiv:1910.11108 [cs]\n"
    },
    {
      "type": "paragraph",
      "id": "5765baccc33ce6d0",
      "text": "\nATKINS, David L., BALL, Thomas, BRUNS, Glenn and COX, Kenneth, 1999. Mawl: A Domain-Specific Language for Form-Based Services. IEEE Transactions on Software Engineering. 1 May 1999. Vol. 25, no. 3, p. 334–346. DOI 10.1109/32.798323. A form-based service is one in which the flow of data between service and user is described by a sequence of query/response interactions, or forms. Mawl is a domain-specific language for programming form-based services in a device-independent manner. We focus on Mawl’s form abstraction, which is the means for separating service logic from user interface description, and show how this simple abstraction addresses seven issues in service creation, analysis, and maintenance: compile-time guarantees, implementation flexibility, rapid prototyping, testing and validation, support for multiple devices, composition of services, and usage analysis.\n"
    },
    {
      "type": "paragraph",
      "id": "b24e73957e585fa6",
      "text": "⇒ [[Over the Wall]]"
    },
    {
      "type": "paragraph",
      "id": "44e989e6430c87d8",
      "text": "Map in Elm. Understanding and using Elm’s many maps [https://medium.com/@andrewMacmurray/the-meaning-of-map-in-elm-6480afc8139d post] by [[Andrew MacMurray]]"
    },
    {
      "type": "paragraph",
      "id": "f986446928668457",
      "text": "[[Parser.map]]"
    },
    {
      "type": "paragraph",
      "id": "95660cd1a47d4b5d",
      "text": "[[Parser.loop]]"
    },
    {
      "type": "paragraph",
      "id": "99f9253ba92aa6ae",
      "text": "⇒ [[Elm Radio]] Episode #6 [[elm/parser]] [https://elm-radio.com/episode/elm-parser/ podcast]"
    },
    {
      "type": "paragraph",
      "id": "e9f63462bf6b0c47",
      "text": "Similarly in Elm, a function fromMaybe :: a -> Maybe b -> Result a b is a natural transformation from a Maybe b into a Result a b such that the given default value a is mapped into Err a if the Maybe b is Nothing, otherwise a Just b is mapped into a Ok b."
    },
    {
      "type": "paragraph",
      "id": "39d3c146e8aa1533",
      "text": "VILJA, Peter, 2018. Applications of Category Theory to Web Programming. Online. 14 May 2018. [https://aaltodoc.aalto.fi:443/handle/123456789/31495 page] Modern Web applications are highly interactive and complex with various challenges, such as maintaining mutable states and making asynchronous operations, which need to be addressed. By addressing these challenges, Web applications can be made easier to develop, maintain and reason about. This thesis presents common category theory concepts and how they can be used to solve these challenges by structuring and easing the development of complex Web applications. \n \n \nThe current state and benefits of applying category theory concepts in Web programming are presented by comparing existing category theory based tools in multiple programming languages against the challenges along with concrete examples. Implementations of categorical concepts in the existing tools are compared against the theory. Furthermore, related research about a specific challenge is presented. \n \n \nMany of the challenges can be addressed with various monads as they can model numerous side effects such as DOM manipulations. Researched tools provide different algebraic data types, which implement abstractions such as functor, applicative functor and monad from category theory. These abstractions, in turn, unify several programming languages and libraries. Additionally, they provide clear semantics and laws to build interactive and complex Web applications, which are easy to develop and reason about. Accepted: 2018-06-01T11:29:18Z\n"
    },
    {
      "type": "reference",
      "id": "a65b2b5f6898a108",
      "site": "wiki.ralfbarkow.ch",
      "slug": "symbol--string---parser-",
      "title": "symbol : String -> Parser ()",
      "text": "[[Parse]] symbols like ( and ,. [https://package.elm-lang.org/packages/elm/parser/latest/Parser#symbol page]"
    },
    {
      "type": "reference",
      "id": "8c57e7827c0345ee",
      "site": "found.ward.fed.wiki",
      "slug": "croquet-tutorial",
      "title": "Croquet Tutorial",
      "text": "This year (2021) the AR/VR Capstone class received a unique tutorial on getting started with the collaboration platform Croquet from founders and members of the Croquet team."
    },
    {
      "type": "markdown",
      "id": "74e2859eef2970d5",
      "text": "> This Tech Overview is near perfect balance in brevity and thoroughness. And the demos have been refined and organized since I last browsed around.  Kudos to David Smith and the many contributors to the demos. [https://discord.com/channels/694586717247635488/968615641248571422 discord]"
    },
    {
      "type": "reference",
      "id": "6729dda4ca716eab",
      "site": "found.ward.fed.wiki",
      "slug": "looking-at-folding-bikes",
      "title": "Looking at Folding Bikes",
      "text": "Karen and I walked into a bike shop in London and saw Brompton bikes featured on the showroom floor. She has been on me to get one ever since. [https://us.brompton.com/ site]"
    },
    {
      "type": "paragraph",
      "id": "afa3a853ed8aa444",
      "text": "⇒ [[Planting the Seed]]"
    },
    {
      "type": "paragraph",
      "id": "7644fcf4a17b7dcb",
      "text": "\nCHAKRAVARTY, Manuel M. T. and KELLER, Gabriele, 2004. The risks and benefits of teaching purely functional programming in first year. Journal of Functional Programming. January 2004. Vol. 14, no. 1, p. 113–123. DOI 10.1017/S0956796803004805. We argue that teaching purely functional programming as such in freshman courses is detrimental to both the curriculum as well as to promoting the paradigm. Instead, we need to focus on the more general aims of teaching elementary techniques of programming and essential concepts of computing. We support this viewpoint with experience gained during several semesters of teaching large first-year classes (up to 600 students) in Haskell. These classes consisted of computer science students as well as students from other disciplines. We have systematically gathered student feedback by conducting surveys after each semester. This article contributes an approach to the use of modern functional languages in first year courses and, based on this, advocates the use of functional languages in this setting.\n"
    },
    {
      "type": "paragraph",
      "id": "5eca20a61566cb98",
      "text": "Introduction to the elm/parser package [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ post]"
    },
    {
      "type": "paragraph",
      "id": "7357c600efddf1e6",
      "text": "Implementing the Pratt parsing algorithm in Elm [https://medium.com/@p.aron.company/writing-a-calculator-with-pratt-parsing-in-elm-78efb313b98f post]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-10-10",
        "story": []
      },
      "date": 1696912277025
    },
    {
      "item": {
        "type": "factory",
        "id": "561dab99a2509fcc"
      },
      "id": "561dab99a2509fcc",
      "type": "add",
      "date": 1696912288637
    },
    {
      "type": "edit",
      "id": "561dab99a2509fcc",
      "item": {
        "type": "reference",
        "id": "561dab99a2509fcc",
        "site": "found.ward.fed.wiki",
        "slug": "complexity-made-simple",
        "title": "Complexity Made Simple",
        "text": "Complexity and chaos are being invoked with"
      },
      "date": 1696912292100
    },
    {
      "item": {
        "type": "factory",
        "id": "8e2586e2e98d5e6d"
      },
      "id": "8e2586e2e98d5e6d",
      "type": "add",
      "after": "561dab99a2509fcc",
      "date": 1696915017926
    },
    {
      "type": "edit",
      "id": "8e2586e2e98d5e6d",
      "item": {
        "type": "reference",
        "id": "8e2586e2e98d5e6d",
        "site": "wellspring.fed.wiki",
        "slug": "esomorphic-regeneration",
        "title": "Esomorphic Regeneration",
        "text": "Sometimes we make up new words for lived experiences that have no name – and so it is here."
      },
      "date": 1696915021599
    },
    {
      "item": {
        "type": "factory",
        "id": "7979cdf07e492cc2"
      },
      "id": "7979cdf07e492cc2",
      "type": "add",
      "after": "8e2586e2e98d5e6d",
      "date": 1696915161414
    },
    {
      "type": "edit",
      "id": "7979cdf07e492cc2",
      "item": {
        "type": "reference",
        "id": "7979cdf07e492cc2",
        "site": "found.ward.fed.wiki",
        "slug": "weird-number-calculator",
        "title": "Weird Number Calculator",
        "text": "My family plays an online game called count which exists as a bot on discord. We take turns offering formulas that evaluate to the next integer in the sequence 1, 2, 3, etc. Mistakes yield ridicule from the bot running the game and everyone starts over at 1."
      },
      "date": 1696915183236
    },
    {
      "item": {
        "type": "factory",
        "id": "23455219ca40eb60"
      },
      "id": "23455219ca40eb60",
      "type": "add",
      "after": "7979cdf07e492cc2",
      "date": 1696917025402
    },
    {
      "id": "23455219ca40eb60",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2"
      ],
      "date": 1696917027513
    },
    {
      "item": {
        "type": "factory",
        "id": "13e7aab9cd00a10a"
      },
      "id": "13e7aab9cd00a10a",
      "type": "add",
      "after": "7979cdf07e492cc2",
      "date": 1696917029928
    },
    {
      "id": "13e7aab9cd00a10a",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2"
      ],
      "date": 1696917032100
    },
    {
      "type": "edit",
      "id": "13e7aab9cd00a10a",
      "item": {
        "type": "pagefold",
        "id": "13e7aab9cd00a10a",
        "text": "~"
      },
      "date": 1696917034612
    },
    {
      "type": "edit",
      "id": "23455219ca40eb60",
      "item": {
        "type": "paragraph",
        "id": "23455219ca40eb60",
        "text": "⇒ [[Elm Markup]]"
      },
      "date": 1696917046261
    },
    {
      "type": "edit",
      "id": "23455219ca40eb60",
      "item": {
        "type": "paragraph",
        "id": "23455219ca40eb60",
        "text": "⇒ [[Text without Link]] ⇒ [[Elm Markup]]"
      },
      "date": 1696918049967
    },
    {
      "type": "add",
      "id": "b66879c650624dc4",
      "item": {
        "type": "paragraph",
        "id": "b66879c650624dc4",
        "text": "Tricks with case expressions in Elm"
      },
      "after": "23455219ca40eb60",
      "date": 1696919674633
    },
    {
      "type": "edit",
      "id": "b66879c650624dc4",
      "item": {
        "type": "paragraph",
        "id": "b66879c650624dc4",
        "text": "Tricks with case expressions in Elm [https://medium.com/elm-shorts/tricks-with-case-statements-in-elm-80223b85484f page]"
      },
      "date": 1696919682252
    },
    {
      "type": "edit",
      "id": "b66879c650624dc4",
      "item": {
        "type": "paragraph",
        "id": "b66879c650624dc4",
        "text": "Tricks with case expressions in Elm [https://medium.com/elm-shorts/tricks-with-case-statements-in-elm-80223b85484f post] by [[Wouter In t Velt]]"
      },
      "date": 1696919750092
    },
    {
      "type": "add",
      "id": "193a50ef44e37b10",
      "item": {
        "type": "paragraph",
        "id": "193a50ef44e37b10",
        "text": "elm-spec by [[Szikszai Gusztáv]]"
      },
      "after": "b66879c650624dc4",
      "date": 1696919956228
    },
    {
      "type": "edit",
      "id": "193a50ef44e37b10",
      "item": {
        "type": "paragraph",
        "id": "193a50ef44e37b10",
        "text": "[[elm-spec]] [https://github.com/gdotdesign/elm-spec github] by [[Szikszai Gusztáv]]"
      },
      "date": 1696919976230
    },
    {
      "id": "193a50ef44e37b10",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "193a50ef44e37b10",
        "b66879c650624dc4",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2"
      ],
      "date": 1696919984079
    },
    {
      "id": "193a50ef44e37b10",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "b66879c650624dc4",
        "193a50ef44e37b10",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2"
      ],
      "date": 1696920107730
    },
    {
      "type": "edit",
      "id": "193a50ef44e37b10",
      "item": {
        "type": "paragraph",
        "id": "193a50ef44e37b10",
        "text": "⇒  [[elm-spec]] [https://github.com/gdotdesign/elm-spec github] by [[Szikszai Gusztáv]]"
      },
      "date": 1696920120009
    },
    {
      "type": "edit",
      "id": "193a50ef44e37b10",
      "item": {
        "type": "paragraph",
        "id": "193a50ef44e37b10",
        "text": "⇒ [[elm-spec]] [https://github.com/gdotdesign/elm-spec github] by [[Szikszai Gusztáv]]"
      },
      "date": 1696920124782
    },
    {
      "type": "add",
      "id": "566549c9ecd926b7",
      "item": {
        "type": "paragraph",
        "id": "566549c9ecd926b7",
        "text": "Cypress"
      },
      "after": "193a50ef44e37b10",
      "date": 1696920427376
    },
    {
      "type": "add",
      "id": "68bab033b8a1975d",
      "item": {
        "type": "paragraph",
        "id": "68bab033b8a1975d",
        "text": "Automated Cross Browser Testing"
      },
      "after": "193a50ef44e37b10",
      "date": 1696920442109
    },
    {
      "type": "edit",
      "id": "68bab033b8a1975d",
      "item": {
        "type": "paragraph",
        "id": "68bab033b8a1975d",
        "text": "Automated Cross Browser Testing [https://discourse.elm-lang.org/t/automated-cross-browser-testing/8444 discourse]"
      },
      "date": 1696920452621
    },
    {
      "type": "edit",
      "id": "566549c9ecd926b7",
      "item": {
        "type": "paragraph",
        "id": "566549c9ecd926b7",
        "text": "Cypress [https://docs.cypress.io/guides/overview/why-cypress page]"
      },
      "date": 1696920464403
    },
    {
      "item": {
        "type": "factory",
        "id": "a3c62de368f5bfa6"
      },
      "id": "a3c62de368f5bfa6",
      "type": "add",
      "after": "7979cdf07e492cc2",
      "date": 1696920476424
    },
    {
      "id": "a3c62de368f5bfa6",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "b66879c650624dc4",
        "193a50ef44e37b10",
        "68bab033b8a1975d",
        "566549c9ecd926b7",
        "a3c62de368f5bfa6",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2"
      ],
      "date": 1696920479243
    },
    {
      "type": "edit",
      "id": "a3c62de368f5bfa6",
      "item": {
        "type": "video",
        "id": "a3c62de368f5bfa6",
        "text": "YOUTUBE LcGHiFnBh3Y"
      },
      "date": 1696920487383
    },
    {
      "type": "add",
      "id": "be7c9055b1e36469",
      "item": {
        "type": "paragraph",
        "id": "be7c9055b1e36469",
        "text": "Example Twitter client web app shown in Cypress in a Nutshell webcast. "
      },
      "after": "566549c9ecd926b7",
      "date": 1696920535553
    },
    {
      "id": "be7c9055b1e36469",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "b66879c650624dc4",
        "193a50ef44e37b10",
        "68bab033b8a1975d",
        "566549c9ecd926b7",
        "a3c62de368f5bfa6",
        "be7c9055b1e36469",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2"
      ],
      "date": 1696920537400
    },
    {
      "type": "edit",
      "id": "be7c9055b1e36469",
      "item": {
        "type": "paragraph",
        "id": "be7c9055b1e36469",
        "text": "Example Twitter client web app shown in Cypress in a Nutshell webcast. [https://github.com/cypress-io/birdboard github]"
      },
      "date": 1696920550463
    },
    {
      "type": "edit",
      "id": "a3c62de368f5bfa6",
      "item": {
        "type": "video",
        "id": "a3c62de368f5bfa6",
        "text": "YOUTUBE LcGHiFnBh3Y\nCypress in a Nutshell webcast"
      },
      "date": 1696920602365
    },
    {
      "type": "edit",
      "id": "566549c9ecd926b7",
      "item": {
        "type": "paragraph",
        "id": "566549c9ecd926b7",
        "text": "[[Cypress]] [https://docs.cypress.io/guides/overview/why-cypress page]"
      },
      "date": 1696920725635
    },
    {
      "type": "add",
      "id": "90853bfa4d650a73",
      "item": {
        "type": "paragraph",
        "id": "90853bfa4d650a73",
        "text": "Presented by Amir Rustamzadeh, Sr. Engineer at Cypress.io"
      },
      "after": "566549c9ecd926b7",
      "date": 1696920772820
    },
    {
      "id": "90853bfa4d650a73",
      "type": "remove",
      "removedTo": {
        "page": "Cypress"
      },
      "date": 1696920775239
    },
    {
      "item": {
        "type": "factory",
        "id": "6a66b33b5448228d"
      },
      "id": "6a66b33b5448228d",
      "type": "add",
      "after": "7979cdf07e492cc2",
      "date": 1696927422014
    },
    {
      "type": "edit",
      "id": "6a66b33b5448228d",
      "item": {
        "type": "reference",
        "id": "6a66b33b5448228d",
        "site": "found.ward.fed.wiki",
        "slug": "little-ship-of-science",
        "title": "Little Ship of Science",
        "text": "This is the fundamental problem with most attempts to reform science: everybody’s trying to turn the Big Ship, nobody’s launching Little Ships. I’ve got a design for my own Little Ship, my literal dream boat. [https://www.experimental-history.com/p/lets-build-a-fleet-and-change-the post]"
      },
      "date": 1696927427612
    },
    {
      "item": {
        "type": "factory",
        "id": "156a3f7c46b5b1ad"
      },
      "id": "156a3f7c46b5b1ad",
      "type": "add",
      "after": "6a66b33b5448228d",
      "date": 1696927949197
    },
    {
      "type": "edit",
      "id": "156a3f7c46b5b1ad",
      "item": {
        "type": "pagefold",
        "id": "156a3f7c46b5b1ad",
        "text": "~"
      },
      "date": 1696927952656
    },
    {
      "item": {
        "type": "factory",
        "id": "0babb0e898a84fc6"
      },
      "id": "0babb0e898a84fc6",
      "type": "add",
      "after": "156a3f7c46b5b1ad",
      "date": 1696927953780
    },
    {
      "type": "edit",
      "id": "0babb0e898a84fc6",
      "item": {
        "type": "paragraph",
        "id": "0babb0e898a84fc6",
        "text": "[https://fosstodon.org/@rgb/111209865937829591 post]"
      },
      "date": 1696927958015
    },
    {
      "type": "edit",
      "id": "0babb0e898a84fc6",
      "item": {
        "type": "paragraph",
        "id": "0babb0e898a84fc6",
        "text": "The [[Economics of Programming Languages]], by the creator of Elm language [https://fosstodon.org/@rgb/111209865937829591 post]"
      },
      "date": 1696927978240
    },
    {
      "type": "add",
      "id": "300faa2c441f7fad",
      "item": {
        "type": "paragraph",
        "id": "300faa2c441f7fad",
        "text": "[[λ Lessons]]"
      },
      "after": "23455219ca40eb60",
      "date": 1696930892885
    },
    {
      "type": "edit",
      "id": "300faa2c441f7fad",
      "item": {
        "type": "paragraph",
        "id": "300faa2c441f7fad",
        "text": "[[λ Lessons]] [https://stevekrouse.com/hs.js/ page]"
      },
      "date": 1696930909230
    },
    {
      "type": "add",
      "id": "019e48232d8217c6",
      "item": {
        "type": "paragraph",
        "id": "019e48232d8217c6",
        "text": "Haskelite: A Step-By-Step Interpreter for Teaching Functional Programming"
      },
      "after": "23455219ca40eb60",
      "date": 1696930982505
    },
    {
      "type": "edit",
      "id": "019e48232d8217c6",
      "item": {
        "type": "paragraph",
        "id": "019e48232d8217c6",
        "text": "Haskelite: A Step-By-Step Interpreter for Teaching Functional Programming [https://drops.dagstuhl.de/opus/volltexte/2023/18508/ page]"
      },
      "date": 1696930989351
    },
    {
      "type": "add",
      "id": "1587b39a2e4ebd15",
      "item": {
        "type": "paragraph",
        "id": "1587b39a2e4ebd15",
        "text": "[[Pedro Baltazar Vasconcelos]]"
      },
      "after": "019e48232d8217c6",
      "date": 1696931025099
    },
    {
      "type": "add",
      "id": "dff8b256f11cc11f",
      "item": {
        "type": "paragraph",
        "id": "dff8b256f11cc11f",
        "text": "Welcome to Haskelite"
      },
      "after": "1587b39a2e4ebd15",
      "date": 1696931059305
    },
    {
      "type": "edit",
      "id": "dff8b256f11cc11f",
      "item": {
        "type": "paragraph",
        "id": "dff8b256f11cc11f",
        "text": "Welcome to Haskelite [https://pbv.github.io/haskelite/ page]"
      },
      "date": 1696931067503
    },
    {
      "type": "edit",
      "id": "dff8b256f11cc11f",
      "item": {
        "type": "paragraph",
        "id": "dff8b256f11cc11f",
        "text": "Welcome to Haskelite [https://pbv.github.io/haskelite/ page] [https://github.com/pbv/haskelite]"
      },
      "date": 1696931707984
    },
    {
      "type": "edit",
      "id": "019e48232d8217c6",
      "item": {
        "type": "paragraph",
        "id": "019e48232d8217c6",
        "text": "[[Haskelite]]: A Step-By-Step Interpreter for Teaching Functional Programming [https://drops.dagstuhl.de/opus/volltexte/2023/18508/ page]"
      },
      "date": 1696931721856
    },
    {
      "type": "edit",
      "id": "019e48232d8217c6",
      "item": {
        "type": "paragraph",
        "id": "019e48232d8217c6",
        "text": "⇒ [[Haskelite]]: A Step-By-Step Interpreter for Teaching Functional Programming [https://drops.dagstuhl.de/opus/volltexte/2023/18508/ page]"
      },
      "date": 1696931727690
    },
    {
      "type": "edit",
      "id": "dff8b256f11cc11f",
      "item": {
        "type": "paragraph",
        "id": "dff8b256f11cc11f",
        "text": "Welcome to Haskelite [https://pbv.github.io/haskelite/ page] [https://github.com/pbv/haskelite github]"
      },
      "date": 1696931748739
    },
    {
      "id": "1587b39a2e4ebd15",
      "type": "remove",
      "removedTo": {
        "page": "Haskelite"
      },
      "date": 1696931794744
    },
    {
      "type": "add",
      "id": "f4ce49d41b72fc8d",
      "item": {
        "type": "paragraph",
        "id": "f4ce49d41b72fc8d",
        "text": "⇒ [[DMX]]"
      },
      "after": "0babb0e898a84fc6",
      "date": 1696932720779
    },
    {
      "type": "edit",
      "id": "f4ce49d41b72fc8d",
      "item": {
        "type": "paragraph",
        "id": "f4ce49d41b72fc8d",
        "text": "⇒ [[DMX]]: [https://forum.dmx.systems/t/how-can-dmx-be-integrated-with-open-source-large-language-models/172/4 post]"
      },
      "date": 1696932733336
    },
    {
      "item": {
        "type": "factory",
        "id": "d27191cb6c8493d3"
      },
      "id": "d27191cb6c8493d3",
      "type": "add",
      "after": "f4ce49d41b72fc8d",
      "date": 1696932746728
    },
    {
      "type": "edit",
      "id": "d27191cb6c8493d3",
      "item": {
        "type": "paragraph",
        "id": "d27191cb6c8493d3",
        "text": "Dear Liangbing, I really appreciate your question and thought, since it totally matches similar ideas I have had already. Unfortunately I did not have the time to learn more about LLM recently. A few years ago we were applying for EU funding for a medical project with very similar requirements. It was about the stochastic analyzing of computer tomograph pictures of the brain via self learning inference systems, to identify irregular patterns that might be relevant for the early diagnosis of Alzheimer’s disease. The main argument for using DMX in this context was that the “reasoning” would not be done by the machine, but by a (human) doctor, but that the computer is much better in running picture comparisons. The goal was that the machine would select and suggest candidates to look at for the doctor. Also, it was key, that access to the sources for the selection process were provided via paths of associations within DMX, so that at any point, it was possible to retrace the process. And last but not least the doctors would be able to “feed” the systems, by creating new associations or deleting wrong ones, aka semantic editing."
      },
      "date": 1696932748198
    },
    {
      "type": "edit",
      "id": "f4ce49d41b72fc8d",
      "item": {
        "type": "paragraph",
        "id": "f4ce49d41b72fc8d",
        "text": "⇒ [[DMX]]: jpn [https://forum.dmx.systems/t/how-can-dmx-be-integrated-with-open-source-large-language-models/172/4 post]"
      },
      "date": 1696932758236
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ed12d90df3c6b48c",
        "text": "Closing inactive issues [https://docs.github.com/en/actions/managing-issues-and-pull-requests/closing-inactive-issues github]"
      },
      "id": "ed12d90df3c6b48c",
      "type": "add",
      "after": "d27191cb6c8493d3",
      "date": 1696938623137
    },
    {
      "type": "edit",
      "id": "ed12d90df3c6b48c",
      "item": {
        "type": "paragraph",
        "id": "ed12d90df3c6b48c",
        "text": "Closing inactive issues [https://docs.github.com/en/actions/managing-issues-and-pull-requests/closing-inactive-issues github]"
      },
      "date": 1696938626539
    },
    {
      "type": "edit",
      "id": "ed12d90df3c6b48c",
      "item": {
        "type": "paragraph",
        "id": "ed12d90df3c6b48c",
        "text": "Closing inactive issues [https://docs.github.com/en/actions/managing-issues-and-pull-requests/closing-inactive-issues github]"
      },
      "date": 1696938636863
    },
    {
      "item": {
        "type": "pagefold",
        "id": "03577d8a215f45b1",
        "text": "~"
      },
      "id": "03577d8a215f45b1",
      "type": "add",
      "after": "ed12d90df3c6b48c",
      "date": 1696939600052
    },
    {
      "id": "03577d8a215f45b1",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "019e48232d8217c6",
        "dff8b256f11cc11f",
        "300faa2c441f7fad",
        "b66879c650624dc4",
        "193a50ef44e37b10",
        "68bab033b8a1975d",
        "566549c9ecd926b7",
        "a3c62de368f5bfa6",
        "be7c9055b1e36469",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2",
        "6a66b33b5448228d",
        "156a3f7c46b5b1ad",
        "0babb0e898a84fc6",
        "f4ce49d41b72fc8d",
        "d27191cb6c8493d3",
        "03577d8a215f45b1",
        "ed12d90df3c6b48c"
      ],
      "date": 1696939603217
    },
    {
      "type": "edit",
      "id": "03577d8a215f45b1",
      "item": {
        "type": "pagefold",
        "id": "03577d8a215f45b1",
        "text": "~"
      },
      "date": 1696939605900
    },
    {
      "item": {
        "type": "paragraph",
        "id": "88139d820f5d6879",
        "text": "Die Bruce Lee-Story - \"Be Water!\" [https://www.arte.tv/de/videos/110951-000-A/ arte]"
      },
      "id": "88139d820f5d6879",
      "type": "add",
      "after": "ed12d90df3c6b48c",
      "date": 1696939607082
    },
    {
      "type": "edit",
      "id": "88139d820f5d6879",
      "item": {
        "type": "paragraph",
        "id": "88139d820f5d6879",
        "text": "Die Bruce Lee-Story - \"Be Water!\" [https://www.arte.tv/de/videos/110951-000-A/ arte]"
      },
      "date": 1696939611053
    },
    {
      "type": "edit",
      "id": "88139d820f5d6879",
      "item": {
        "type": "paragraph",
        "id": "88139d820f5d6879",
        "text": "Die Bruce Lee-Story - \"Be Water!\" [https://www.arte.tv/de/videos/110951-000-A/ arte]"
      },
      "date": 1696939621985
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "taking-responsibility",
        "title": "Taking Responsibility",
        "text": "\"To take responsibility means to think through the consequences of your actions on yourself and others around you, and then choose to take a positive action as a result.\""
      },
      "after": "88139d820f5d6879",
      "date": 1696939638468
    },
    {
      "type": "edit",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "taking-responsibility",
        "title": "Taking Responsibility",
        "text": "\"To take responsibility means to think through the consequences of your actions on yourself and others around you, and then choose to take a positive action as a result.\""
      },
      "date": 1696939648486
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a7af04d36351cce9",
        "text": "The unit type [https://sporto.gitbooks.io/elm-tutorial/content/en-v01/01-foundations/07-unit-type.html page]"
      },
      "id": "a7af04d36351cce9",
      "type": "add",
      "date": 1696940065353
    },
    {
      "type": "edit",
      "id": "a7af04d36351cce9",
      "item": {
        "type": "paragraph",
        "id": "a7af04d36351cce9",
        "text": "The unit type [https://sporto.gitbooks.io/elm-tutorial/content/en-v01/01-foundations/07-unit-type.html page]"
      },
      "date": 1696940068555
    },
    {
      "type": "edit",
      "id": "a7af04d36351cce9",
      "item": {
        "type": "paragraph",
        "id": "a7af04d36351cce9",
        "text": "The unit type [https://sporto.gitbooks.io/elm-tutorial/content/en-v01/01-foundations/07-unit-type.html page]"
      },
      "date": 1696940086971
    },
    {
      "type": "edit",
      "id": "88139d820f5d6879",
      "item": {
        "type": "paragraph",
        "id": "88139d820f5d6879",
        "text": "Die Bruce Lee-Story - \"Be Water!\" [https://www.arte.tv/de/videos/110951-000-A/ arte]"
      },
      "date": 1696940495271
    },
    {
      "type": "add",
      "id": "b1de6e770f40aa40",
      "item": {
        "type": "paragraph",
        "id": "b1de6e770f40aa40",
        "text": "Assume Responsibility"
      },
      "after": "88139d820f5d6879",
      "date": 1696940497446
    },
    {
      "type": "edit",
      "id": "88139d820f5d6879",
      "item": {
        "type": "paragraph",
        "id": "88139d820f5d6879",
        "text": "Die Bruce Lee-Story - \"Be Water!\" [https://www.arte.tv/de/videos/110951-000-A/ arte]"
      },
      "date": 1696940513692
    },
    {
      "item": {
        "type": "factory",
        "id": "b9aaa8b9fd22aa0b"
      },
      "id": "b9aaa8b9fd22aa0b",
      "type": "add",
      "after": "a7af04d36351cce9",
      "date": 1696940576876
    },
    {
      "id": "b9aaa8b9fd22aa0b",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "019e48232d8217c6",
        "dff8b256f11cc11f",
        "300faa2c441f7fad",
        "b66879c650624dc4",
        "193a50ef44e37b10",
        "68bab033b8a1975d",
        "566549c9ecd926b7",
        "a3c62de368f5bfa6",
        "be7c9055b1e36469",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2",
        "6a66b33b5448228d",
        "156a3f7c46b5b1ad",
        "0babb0e898a84fc6",
        "f4ce49d41b72fc8d",
        "d27191cb6c8493d3",
        "03577d8a215f45b1",
        "ed12d90df3c6b48c",
        "b9aaa8b9fd22aa0b",
        "88139d820f5d6879",
        "b1de6e770f40aa40",
        "undefined",
        "a7af04d36351cce9"
      ],
      "date": 1696940580309,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "edit",
      "id": "b9aaa8b9fd22aa0b",
      "item": {
        "type": "video",
        "id": "b9aaa8b9fd22aa0b",
        "text": "YOUTUBE cJMwBwFj5nQ"
      },
      "date": 1696940610617
    },
    {
      "type": "fork",
      "date": 1696940614508
    },
    {
      "type": "edit",
      "id": "b9aaa8b9fd22aa0b",
      "item": {
        "type": "video",
        "id": "b9aaa8b9fd22aa0b",
        "text": "YOUTUBE cJMwBwFj5nQ\n[[Bruce Lee]], Be As Water Philosophy"
      },
      "date": 1696940833738
    },
    {
      "type": "add",
      "id": "7cd4fc0152d7d84f",
      "item": {
        "type": "paragraph",
        "id": "7cd4fc0152d7d84f",
        "text": "The empty tuple () is called the unit type in Elm. "
      },
      "after": "a7af04d36351cce9",
      "date": 1696940858779
    },
    {
      "id": "aa1bf28ecb78eac0",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "unit",
        "title": "Unit",
        "text": "Empty [[Container]]s can be seen as Units.",
        "id": "aa1bf28ecb78eac0"
      },
      "date": 1696940877091
    },
    {
      "type": "edit",
      "id": "7cd4fc0152d7d84f",
      "item": {
        "type": "paragraph",
        "id": "7cd4fc0152d7d84f",
        "text": "The empty tuple () is called the [[Unit]] type in Elm. "
      },
      "date": 1696940941544
    },
    {
      "item": {
        "type": "factory",
        "id": "62928012c4d3da24"
      },
      "id": "62928012c4d3da24",
      "type": "add",
      "after": "7cd4fc0152d7d84f",
      "date": 1696941669672
    },
    {
      "type": "edit",
      "id": "62928012c4d3da24",
      "item": {
        "type": "paragraph",
        "id": "62928012c4d3da24",
        "text": "\nFOWLER, Simon, 2020. Model-View-Update-Communicate: Session Types meet the Elm Architecture. Online. 29 May 2020. arXiv. arXiv:1910.11108. [Accessed 10 October 2023]. Session types are a type discipline for communication channel endpoints which allow conformance to protocols to be checked statically. Safely implementing session types requires linearity, usually in the form of a linear type system. Unfortunately, linear typing is difficult to integrate with graphical user interfaces (GUIs), and to date most programs using session types are command line applications. In this paper, we propose the first principled integration of session typing and GUI development by building upon the Model-View-Update (MVU) architecture, pioneered by the Elm programming language. We introduce $lambda_{textsf{MVU}}$, the first formal model of the MVU architecture, and prove it sound. By extending $lambda_{textsf{MVU}}$ with emph{commands} as found in Elm, along with emph{linearity} and emph{model transitions}, we show the first formal integration of session typing and GUI programming. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.arXiv:1910.11108 [cs]\n"
      },
      "date": 1696941671143
    },
    {
      "type": "edit",
      "id": "62928012c4d3da24",
      "item": {
        "type": "paragraph",
        "id": "62928012c4d3da24",
        "text": "FOWLER, Simon, 2020. Model-View-Update-Communicate: Session Types meet the Elm Architecture. Online. 29 May 2020. arXiv. arXiv:1910.11108. [Accessed 10 October 2023]. Session types are a type discipline for communication channel endpoints which allow conformance to protocols to be checked statically. Safely implementing session types requires linearity, usually in the form of a linear type system. Unfortunately, linear typing is difficult to integrate with graphical user interfaces (GUIs), and to date most programs using session types are command line applications. In this paper, we propose the first principled integration of session typing and GUI development by building upon the Model-View-Update (MVU) architecture, pioneered by the Elm programming language. We introduce $lambda_{textsf{MVU}}$, the first formal model of the MVU architecture, and prove it sound. By extending $lambda_{textsf{MVU}}$ with emph{commands} as found in Elm, along with emph{linearity} and emph{model transitions}, we show the first formal integration of session typing and GUI programming. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.arXiv:1910.11108 [cs]\n"
      },
      "date": 1696941722037
    },
    {
      "type": "edit",
      "id": "7cd4fc0152d7d84f",
      "item": {
        "type": "paragraph",
        "id": "7cd4fc0152d7d84f",
        "text": "The empty tuple () is called the [[Unit]] type in Elm."
      },
      "date": 1696941761286
    },
    {
      "type": "add",
      "id": "a64858c490bda4c6",
      "item": {
        "type": "paragraph",
        "id": "a64858c490bda4c6",
        "text": "Model-View-Update"
      },
      "after": "7cd4fc0152d7d84f",
      "date": 1696941762542
    },
    {
      "item": {
        "type": "factory",
        "id": "5765baccc33ce6d0"
      },
      "id": "5765baccc33ce6d0",
      "type": "add",
      "after": "62928012c4d3da24",
      "date": 1696942266643
    },
    {
      "type": "edit",
      "id": "5765baccc33ce6d0",
      "item": {
        "type": "paragraph",
        "id": "5765baccc33ce6d0",
        "text": "\nATKINS, David L., BALL, Thomas, BRUNS, Glenn and COX, Kenneth, 1999. Mawl: A Domain-Specific Language for Form-Based Services. IEEE Transactions on Software Engineering. 1 May 1999. Vol. 25, no. 3, p. 334–346. DOI 10.1109/32.798323. A form-based service is one in which the flow of data between service and user is described by a sequence of query/response interactions, or forms. Mawl is a domain-specific language for programming form-based services in a device-independent manner. We focus on Mawl’s form abstraction, which is the means for separating service logic from user interface description, and show how this simple abstraction addresses seven issues in service creation, analysis, and maintenance: compile-time guarantees, implementation flexibility, rapid prototyping, testing and validation, support for multiple devices, composition of services, and usage analysis.\n"
      },
      "date": 1696942268425
    },
    {
      "id": "3c7b33a0835ed7ee",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3c7b33a0835ed7ee",
        "text": "What does () mean? [https://faq.elm-community.org/#what-does--mean faq]: It is the empty tuple or [[Unit Type]]. It serves much like [[void]], null, or None in other languages."
      },
      "after": "7cd4fc0152d7d84f",
      "attribution": {
        "page": "2023-06-02"
      },
      "date": 1696942920491
    },
    {
      "item": {
        "type": "factory",
        "id": "b24e73957e585fa6"
      },
      "id": "b24e73957e585fa6",
      "type": "add",
      "after": "5765baccc33ce6d0",
      "date": 1696943921360
    },
    {
      "type": "edit",
      "id": "b24e73957e585fa6",
      "item": {
        "type": "paragraph",
        "id": "b24e73957e585fa6",
        "text": "Over the Wall"
      },
      "date": 1696943922801
    },
    {
      "type": "edit",
      "id": "b24e73957e585fa6",
      "item": {
        "type": "paragraph",
        "id": "b24e73957e585fa6",
        "text": "[[Over the Wall]]"
      },
      "date": 1696943941643
    },
    {
      "type": "edit",
      "id": "b24e73957e585fa6",
      "item": {
        "type": "paragraph",
        "id": "b24e73957e585fa6",
        "text": "⇒ [[Over the Wall]]"
      },
      "date": 1696943946874
    },
    {
      "item": {
        "type": "factory",
        "id": "f986446928668457"
      },
      "id": "f986446928668457",
      "type": "add",
      "after": "b24e73957e585fa6",
      "date": 1696946176232
    },
    {
      "type": "edit",
      "id": "f986446928668457",
      "item": {
        "type": "paragraph",
        "id": "f986446928668457",
        "text": "Parse.map"
      },
      "date": 1696946181665
    },
    {
      "type": "edit",
      "id": "f986446928668457",
      "item": {
        "type": "paragraph",
        "id": "f986446928668457",
        "text": "Parser.map"
      },
      "date": 1696946265399
    },
    {
      "type": "edit",
      "id": "f986446928668457",
      "item": {
        "type": "paragraph",
        "id": "f986446928668457",
        "text": "[[Parser.map]]"
      },
      "date": 1696946283901
    },
    {
      "type": "edit",
      "id": "b24e73957e585fa6",
      "item": {
        "type": "paragraph",
        "id": "b24e73957e585fa6",
        "text": "⇒ [[Over the Wall]] (Understanding and using Elm’s many maps)"
      },
      "date": 1696946330376
    },
    {
      "type": "edit",
      "id": "b24e73957e585fa6",
      "item": {
        "type": "paragraph",
        "id": "b24e73957e585fa6",
        "text": "⇒ [[Over the Wall]], Understanding and using Elm’s many maps"
      },
      "date": 1696946339471
    },
    {
      "type": "edit",
      "id": "b24e73957e585fa6",
      "item": {
        "type": "paragraph",
        "id": "b24e73957e585fa6",
        "text": "⇒ [[Over the Wall]], Understanding and using Elm’s many maps [https://medium.com/@andrewMacmurray/the-meaning-of-map-in-elm-6480afc8139d post]"
      },
      "date": 1696946355134
    },
    {
      "type": "edit",
      "id": "b24e73957e585fa6",
      "item": {
        "type": "paragraph",
        "id": "b24e73957e585fa6",
        "text": "⇒ [[Over the Wall]]"
      },
      "date": 1696946365390
    },
    {
      "type": "add",
      "id": "44e989e6430c87d8",
      "item": {
        "type": "paragraph",
        "id": "44e989e6430c87d8",
        "text": "Map in Elm. Understanding and using Elm’s many maps [https://medium.com/@andrewMacmurray/the-meaning-of-map-in-elm-6480afc8139d post]"
      },
      "after": "b24e73957e585fa6",
      "date": 1696946368635
    },
    {
      "type": "edit",
      "id": "44e989e6430c87d8",
      "item": {
        "type": "paragraph",
        "id": "44e989e6430c87d8",
        "text": "Map in Elm. Understanding and using Elm’s many maps [https://medium.com/@andrewMacmurray/the-meaning-of-map-in-elm-6480afc8139d post] by [[Andrew MacMurray†]]"
      },
      "date": 1696946385220
    },
    {
      "type": "edit",
      "id": "44e989e6430c87d8",
      "item": {
        "type": "paragraph",
        "id": "44e989e6430c87d8",
        "text": "Map in Elm. Understanding and using Elm’s many maps [https://medium.com/@andrewMacmurray/the-meaning-of-map-in-elm-6480afc8139d post] by [[Andrew MacMurray]]"
      },
      "date": 1696946391225
    },
    {
      "type": "edit",
      "id": "62928012c4d3da24",
      "item": {
        "type": "paragraph",
        "id": "62928012c4d3da24",
        "text": "FOWLER, Simon, 2020. [[Model-View-Update-Communicate]]: Session Types meet the Elm Architecture. Online. 29 May 2020. arXiv. arXiv:1910.11108. [Accessed 10 October 2023]. Session types are a type discipline for communication channel endpoints which allow conformance to protocols to be checked statically. Safely implementing session types requires linearity, usually in the form of a linear type system. Unfortunately, linear typing is difficult to integrate with graphical user interfaces (GUIs), and to date most programs using session types are command line applications. In this paper, we propose the first principled integration of session typing and GUI development by building upon the Model-View-Update (MVU) architecture, pioneered by the Elm programming language. We introduce $lambda_{textsf{MVU}}$, the first formal model of the MVU architecture, and prove it sound. By extending $lambda_{textsf{MVU}}$ with emph{commands} as found in Elm, along with emph{linearity} and emph{model transitions}, we show the first formal integration of session typing and GUI programming. We implement our approach in the Links web programming language, and show examples including a two-factor authentication workflow and multi-room chat server.arXiv:1910.11108 [cs]\n"
      },
      "date": 1696946827053
    },
    {
      "type": "add",
      "id": "95660cd1a47d4b5d",
      "item": {
        "type": "paragraph",
        "id": "95660cd1a47d4b5d",
        "text": "[[Parser.loop]]"
      },
      "after": "f986446928668457",
      "date": 1696947226327
    },
    {
      "id": "99f9253ba92aa6ae",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "99f9253ba92aa6ae",
        "text": "[[Elm Radio]] Episode #6 [[elm/parser]] [https://elm-radio.com/episode/elm-parser/ podcast]"
      },
      "after": "95660cd1a47d4b5d",
      "attribution": {
        "page": "2023-10-09"
      },
      "date": 1696947750005
    },
    {
      "type": "edit",
      "id": "99f9253ba92aa6ae",
      "item": {
        "type": "paragraph",
        "id": "99f9253ba92aa6ae",
        "text": "⇒ [[Elm Radio]] Episode #6 [[elm/parser]] [https://elm-radio.com/episode/elm-parser/ podcast]"
      },
      "date": 1696947756790
    },
    {
      "type": "add",
      "id": "9417df2545ad151b",
      "item": {
        "type": "paragraph",
        "id": "9417df2545ad151b",
        "text": "https://elm-radio.com/episode/elm-parser/#00-03-05"
      },
      "after": "99f9253ba92aa6ae",
      "date": 1696947762003
    },
    {
      "type": "add",
      "id": "1f3efc4fac2328ad",
      "item": {
        "type": "paragraph",
        "id": "1f3efc4fac2328ad",
        "text": "I mean, when you're working with Elm and you can parse things and then having parsed into a nice data structure, you can then use that data structure in Elm and do case statements on this well defined data type."
      },
      "after": "9417df2545ad151b",
      "date": 1696947886570
    },
    {
      "type": "remove",
      "id": "9417df2545ad151b",
      "date": 1696947887902
    },
    {
      "type": "edit",
      "id": "1f3efc4fac2328ad",
      "item": {
        "type": "paragraph",
        "id": "1f3efc4fac2328ad",
        "text": "I mean, when you're working with Elm and you can parse things and then having parsed into a nice data structure, you can then use that data structure in Elm and do case statements on this well defined data type. [https://elm-radio.com/episode/elm-parser/#00-03-05 elm-radio]"
      },
      "date": 1696947903854
    },
    {
      "item": {
        "type": "factory",
        "id": "a2063384ea3ea4d8"
      },
      "id": "a2063384ea3ea4d8",
      "type": "add",
      "after": "1f3efc4fac2328ad",
      "date": 1696948154466
    },
    {
      "type": "edit",
      "id": "a2063384ea3ea4d8",
      "item": {
        "type": "paragraph",
        "id": "a2063384ea3ea4d8",
        "text": "https://elm-radio.com/episode/elm-parser/#00-07-26 elm-radio"
      },
      "date": 1696948166966
    },
    {
      "type": "edit",
      "id": "a2063384ea3ea4d8",
      "item": {
        "type": "paragraph",
        "id": "a2063384ea3ea4d8",
        "text": "You expect some kind of order, some kind of syntax. [https://elm-radio.com/episode/elm-parser/#00-07-26 elm-radio]"
      },
      "date": 1696948228060
    },
    {
      "item": {
        "type": "factory",
        "id": "f94911eb4b474632"
      },
      "id": "f94911eb4b474632",
      "type": "add",
      "after": "a2063384ea3ea4d8",
      "date": 1696948337262
    },
    {
      "type": "edit",
      "id": "f94911eb4b474632",
      "item": {
        "type": "paragraph",
        "id": "f94911eb4b474632",
        "text": "And if those expectations are not met, then you have a parsing failure."
      },
      "date": 1696948340187
    },
    {
      "type": "add",
      "id": "86c0a2403b670994",
      "item": {
        "type": "paragraph",
        "id": "86c0a2403b670994",
        "text": " That is a really great point. And that's a great way to frame the distinction."
      },
      "after": "f94911eb4b474632",
      "date": 1696948392796
    },
    {
      "type": "edit",
      "id": "86c0a2403b670994",
      "item": {
        "type": "paragraph",
        "id": "86c0a2403b670994",
        "text": "That is a really great point. And that's a great way to frame the distinction."
      },
      "date": 1696948396395
    },
    {
      "type": "add",
      "id": "1fe271c9b76e6ca5",
      "item": {
        "type": "paragraph",
        "id": "1fe271c9b76e6ca5",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-08-46 00-08-46] – "
      },
      "after": "86c0a2403b670994",
      "date": 1696948521798
    },
    {
      "type": "edit",
      "id": "1fe271c9b76e6ca5",
      "item": {
        "type": "paragraph",
        "id": "1fe271c9b76e6ca5",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-08-46 00-08-46] –  And so parsers are very different because parsers, you're going through one character at a time and eating the symbols to define what the structure of the content is."
      },
      "date": 1696948583399
    },
    {
      "type": "add",
      "id": "82f1f1574e12ef11",
      "item": {
        "type": "paragraph",
        "id": "82f1f1574e12ef11",
        "text": " as soon as you chomp a value, as soon as you eat a character, you've committed down that path."
      },
      "after": "1fe271c9b76e6ca5",
      "date": 1696949312784
    },
    {
      "type": "edit",
      "id": "82f1f1574e12ef11",
      "item": {
        "type": "paragraph",
        "id": "82f1f1574e12ef11",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-20-08 00-20-08] – as soon as you chomp a value, as soon as you eat a character, you've committed down that path."
      },
      "date": 1696949364410
    },
    {
      "type": "add",
      "id": "2c34ac6e1c49d7cc",
      "item": {
        "type": "paragraph",
        "id": "2c34ac6e1c49d7cc",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-25-37 00-25-37] – "
      },
      "after": "82f1f1574e12ef11",
      "date": 1696949731138
    },
    {
      "type": "edit",
      "id": "2c34ac6e1c49d7cc",
      "item": {
        "type": "paragraph",
        "id": "2c34ac6e1c49d7cc",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-25-37 00-25-37] –  And then the whole decoder fails. And that's for performance reasons. So what do you do instead?"
      },
      "date": 1696949756059
    },
    {
      "type": "add",
      "id": "9c004b776741506f",
      "item": {
        "type": "paragraph",
        "id": "9c004b776741506f",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-28-08 00-28-08] – "
      },
      "after": "2c34ac6e1c49d7cc",
      "date": 1696949958460
    },
    {
      "type": "edit",
      "id": "9c004b776741506f",
      "item": {
        "type": "paragraph",
        "id": "9c004b776741506f",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-28-08 00-28-08] –  You know, a one of list that contains each of those parsers. Instead of that, you're going to say try parsing it as an integer or float."
      },
      "date": 1696949990597
    },
    {
      "type": "add",
      "id": "61f06e4cf8dcf39c",
      "item": {
        "type": "paragraph",
        "id": "61f06e4cf8dcf39c",
        "text": "textOrLink"
      },
      "after": "9c004b776741506f",
      "date": 1696950004876
    },
    {
      "type": "add",
      "id": "657ff5f9d26772ef",
      "item": {
        "type": "paragraph",
        "id": "657ff5f9d26772ef",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-36-11 00-36-11] – "
      },
      "after": "61f06e4cf8dcf39c",
      "date": 1696950525203
    },
    {
      "type": "edit",
      "id": "657ff5f9d26772ef",
      "item": {
        "type": "paragraph",
        "id": "657ff5f9d26772ef",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-36-11 00-36-11] – Start with a hard coded success, get your tests passing as fast as possible. I mean, this is the basic sort of TDD concept of, you know, fake it till you make it where you make it dumb, then make it smarter."
      },
      "date": 1696950541837
    },
    {
      "type": "add",
      "id": "5f339c5cd7464d26",
      "item": {
        "type": "paragraph",
        "id": "5f339c5cd7464d26",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-44-43 00-44-43] – "
      },
      "after": "657ff5f9d26772ef",
      "date": 1696951085888
    },
    {
      "type": "edit",
      "id": "5f339c5cd7464d26",
      "item": {
        "type": "paragraph",
        "id": "5f339c5cd7464d26",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-44-43 00-44-43] – 00-44-43"
      },
      "date": 1696951091605
    },
    {
      "type": "edit",
      "id": "5f339c5cd7464d26",
      "item": {
        "type": "paragraph",
        "id": "5f339c5cd7464d26",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-44-43 00-44-43] – So now your data is start set, end set, plus whatever expression data structure you had."
      },
      "date": 1696951103872
    },
    {
      "type": "add",
      "id": "550a61d14b5379e8",
      "item": {
        "type": "paragraph",
        "id": "550a61d14b5379e8",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-45-13 00-45-13] – [[Parser.loop]]"
      },
      "after": "5f339c5cd7464d26",
      "date": 1696951181650
    },
    {
      "type": "add",
      "id": "83f3e444d7af9a68",
      "item": {
        "type": "paragraph",
        "id": "83f3e444d7af9a68",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-46-32 00-46-32] – "
      },
      "after": "550a61d14b5379e8",
      "date": 1696951303986
    },
    {
      "type": "edit",
      "id": "83f3e444d7af9a68",
      "item": {
        "type": "paragraph",
        "id": "83f3e444d7af9a68",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-46-32 00-46-32] – So I think of it kind of like a fold expression in Elm where you can do like list dot fold L where like compared to list dot map list dot map,"
      },
      "date": 1696951316663
    },
    {
      "type": "add",
      "id": "b1598b7af6a9fd80",
      "item": {
        "type": "paragraph",
        "id": "b1598b7af6a9fd80",
        "text": "context from loop"
      },
      "after": "83f3e444d7af9a68",
      "date": 1696951454320
    },
    {
      "type": "add",
      "id": "430590c6305992d0",
      "item": {
        "type": "paragraph",
        "id": "430590c6305992d0",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-51-36 00-51-36] – "
      },
      "after": "b1598b7af6a9fd80",
      "date": 1696951644465
    },
    {
      "type": "edit",
      "id": "430590c6305992d0",
      "item": {
        "type": "paragraph",
        "id": "430590c6305992d0",
        "text": "[https://elm-radio.com/episode/elm-parser/#00-51-36 00-51-36] –  So in Elm parser terminology, that's a dead end."
      },
      "date": 1696951673848
    },
    {
      "type": "add",
      "id": "529bd5d903adba19",
      "item": {
        "type": "paragraph",
        "id": "529bd5d903adba19",
        "text": "[https://elm-radio.com/episode/elm-parser/#01-02-21 01-02-21] – "
      },
      "after": "430590c6305992d0",
      "date": 1696952392951
    },
    {
      "type": "edit",
      "id": "529bd5d903adba19",
      "item": {
        "type": "paragraph",
        "id": "529bd5d903adba19",
        "text": "[https://elm-radio.com/episode/elm-parser/#01-02-21 01-02-21] –  [[Martin Janacek]] has his Elm in Elm compiler, which is not fully completed, still a work in progress, but that's something to check out and you can look at his talk on that at Elm Europe."
      },
      "date": 1696952413321
    },
    {
      "item": {
        "type": "factory",
        "id": "bd0f060ad2a4a4ff"
      },
      "id": "bd0f060ad2a4a4ff",
      "type": "add",
      "after": "529bd5d903adba19",
      "date": 1696953373831
    },
    {
      "type": "edit",
      "id": "bd0f060ad2a4a4ff",
      "item": {
        "type": "pagefold",
        "id": "bd0f060ad2a4a4ff",
        "text": "~"
      },
      "date": 1696953376957
    },
    {
      "item": {
        "type": "factory",
        "id": "e9f63462bf6b0c47"
      },
      "id": "e9f63462bf6b0c47",
      "type": "add",
      "after": "bd0f060ad2a4a4ff",
      "date": 1696953378165
    },
    {
      "type": "edit",
      "id": "e9f63462bf6b0c47",
      "item": {
        "type": "paragraph",
        "id": "e9f63462bf6b0c47",
        "text": "Similarly in Elm, a function fromMaybe :: a -> Maybe b -> Result a b is a natural transformation from a Maybe b into a Result a b such that the given default value a is mapped into Err a if the Maybe b is Nothing, otherwise a Just b is mapped into a Ok b."
      },
      "date": 1696953379965
    },
    {
      "type": "add",
      "id": "39d3c146e8aa1533",
      "item": {
        "type": "paragraph",
        "id": "39d3c146e8aa1533",
        "text": "\nVILJA, Peter, 2018. Applications of Category Theory to Web Programming. Online. 14 May 2018. [Accessed 10 October 2023]. Available from: https://aaltodoc.aalto.fi:443/handle/123456789/31495Modern Web applications are highly interactive and complex with various challenges, such as maintaining mutable states and making asynchronous operations, which need to be addressed. By addressing these challenges, Web applications can be made easier to develop, maintain and reason about. This thesis presents common category theory concepts and how they can be used to solve these challenges by structuring and easing the development of complex Web applications. \n \n \nThe current state and benefits of applying category theory concepts in Web programming are presented by comparing existing category theory based tools in multiple programming languages against the challenges along with concrete examples. Implementations of categorical concepts in the existing tools are compared against the theory. Furthermore, related research about a specific challenge is presented. \n \n \nMany of the challenges can be addressed with various monads as they can model numerous side effects such as DOM manipulations. Researched tools provide different algebraic data types, which implement abstractions such as functor, applicative functor and monad from category theory. These abstractions, in turn, unify several programming languages and libraries. Additionally, they provide clear semantics and laws to build interactive and complex Web applications, which are easy to develop and reason about.Accepted: 2018-06-01T11:29:18Z\n"
      },
      "after": "e9f63462bf6b0c47",
      "date": 1696953391275
    },
    {
      "type": "edit",
      "id": "39d3c146e8aa1533",
      "item": {
        "type": "paragraph",
        "id": "39d3c146e8aa1533",
        "text": "VILJA, Peter, 2018. Applications of Category Theory to Web Programming. Online. 14 May 2018. [https://aaltodoc.aalto.fi:443/handle/123456789/31495 page] Modern Web applications are highly interactive and complex with various challenges, such as maintaining mutable states and making asynchronous operations, which need to be addressed. By addressing these challenges, Web applications can be made easier to develop, maintain and reason about. This thesis presents common category theory concepts and how they can be used to solve these challenges by structuring and easing the development of complex Web applications. \n \n \nThe current state and benefits of applying category theory concepts in Web programming are presented by comparing existing category theory based tools in multiple programming languages against the challenges along with concrete examples. Implementations of categorical concepts in the existing tools are compared against the theory. Furthermore, related research about a specific challenge is presented. \n \n \nMany of the challenges can be addressed with various monads as they can model numerous side effects such as DOM manipulations. Researched tools provide different algebraic data types, which implement abstractions such as functor, applicative functor and monad from category theory. These abstractions, in turn, unify several programming languages and libraries. Additionally, they provide clear semantics and laws to build interactive and complex Web applications, which are easy to develop and reason about.Accepted: 2018-06-01T11:29:18Z\n"
      },
      "date": 1696953415169
    },
    {
      "type": "edit",
      "id": "39d3c146e8aa1533",
      "item": {
        "type": "paragraph",
        "id": "39d3c146e8aa1533",
        "text": "VILJA, Peter, 2018. Applications of Category Theory to Web Programming. Online. 14 May 2018. [https://aaltodoc.aalto.fi:443/handle/123456789/31495 page] Modern Web applications are highly interactive and complex with various challenges, such as maintaining mutable states and making asynchronous operations, which need to be addressed. By addressing these challenges, Web applications can be made easier to develop, maintain and reason about. This thesis presents common category theory concepts and how they can be used to solve these challenges by structuring and easing the development of complex Web applications. \n \n \nThe current state and benefits of applying category theory concepts in Web programming are presented by comparing existing category theory based tools in multiple programming languages against the challenges along with concrete examples. Implementations of categorical concepts in the existing tools are compared against the theory. Furthermore, related research about a specific challenge is presented. \n \n \nMany of the challenges can be addressed with various monads as they can model numerous side effects such as DOM manipulations. Researched tools provide different algebraic data types, which implement abstractions such as functor, applicative functor and monad from category theory. These abstractions, in turn, unify several programming languages and libraries. Additionally, they provide clear semantics and laws to build interactive and complex Web applications, which are easy to develop and reason about. Accepted: 2018-06-01T11:29:18Z\n"
      },
      "date": 1696953469315
    },
    {
      "item": {
        "type": "reference",
        "id": "a65b2b5f6898a108",
        "site": "wiki.ralfbarkow.ch",
        "slug": "symbol--string---parser-",
        "title": "symbol : String -> Parser ()",
        "text": "[[Parse]] symbols like ( and ,. [https://package.elm-lang.org/packages/elm/parser/latest/Parser#symbol page]"
      },
      "id": "a65b2b5f6898a108",
      "type": "add",
      "after": "39d3c146e8aa1533",
      "date": 1696953756022
    },
    {
      "type": "edit",
      "id": "a65b2b5f6898a108",
      "item": {
        "type": "reference",
        "id": "a65b2b5f6898a108",
        "site": "wiki.ralfbarkow.ch",
        "slug": "symbol--string---parser-",
        "title": "symbol : String -> Parser ()",
        "text": "[[Parse]] symbols like ( and ,. [https://package.elm-lang.org/packages/elm/parser/latest/Parser#symbol page]"
      },
      "date": 1696953758918
    },
    {
      "item": {
        "type": "reference",
        "id": "8c57e7827c0345ee",
        "site": "found.ward.fed.wiki",
        "slug": "croquet-tutorial",
        "title": "Croquet Tutorial",
        "text": "This year (2021) the AR/VR Capstone class received a unique tutorial on getting started with the collaboration platform Croquet from founders and members of the Croquet team."
      },
      "id": "8c57e7827c0345ee",
      "type": "add",
      "after": "a65b2b5f6898a108",
      "date": 1696953768072
    },
    {
      "type": "edit",
      "id": "8c57e7827c0345ee",
      "item": {
        "type": "reference",
        "id": "8c57e7827c0345ee",
        "site": "found.ward.fed.wiki",
        "slug": "croquet-tutorial",
        "title": "Croquet Tutorial",
        "text": "This year (2021) the AR/VR Capstone class received a unique tutorial on getting started with the collaboration platform Croquet from founders and members of the Croquet team."
      },
      "date": 1696953772703
    },
    {
      "id": "e40e1be15186bd5b",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "e40e1be15186bd5b",
        "text": "."
      },
      "after": "8c57e7827c0345ee",
      "attribution": {
        "page": "Croquet Tutorial",
        "site": "found.ward.fed.wiki"
      },
      "date": 1696953813172
    },
    {
      "id": "74e2859eef2970d5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "74e2859eef2970d5",
        "text": "This Tech Overview is near perfect balance in brevity and thoroughness. And the demos have been refined and organized since I last browsed around.  Kudos to David Smith and the many contributors to the demos. [https://discord.com/channels/694586717247635488/968615641248571422 discord]"
      },
      "after": "8c57e7827c0345ee",
      "attribution": {
        "page": "Croquet Tutorial",
        "site": "found.ward.fed.wiki"
      },
      "date": 1696953819055
    },
    {
      "id": "e40e1be15186bd5b",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "019e48232d8217c6",
        "dff8b256f11cc11f",
        "300faa2c441f7fad",
        "b66879c650624dc4",
        "193a50ef44e37b10",
        "68bab033b8a1975d",
        "566549c9ecd926b7",
        "a3c62de368f5bfa6",
        "be7c9055b1e36469",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2",
        "6a66b33b5448228d",
        "156a3f7c46b5b1ad",
        "0babb0e898a84fc6",
        "f4ce49d41b72fc8d",
        "d27191cb6c8493d3",
        "03577d8a215f45b1",
        "ed12d90df3c6b48c",
        "b9aaa8b9fd22aa0b",
        "88139d820f5d6879",
        "b1de6e770f40aa40",
        "undefined",
        "aa1bf28ecb78eac0",
        "a7af04d36351cce9",
        "7cd4fc0152d7d84f",
        "3c7b33a0835ed7ee",
        "a64858c490bda4c6",
        "62928012c4d3da24",
        "5765baccc33ce6d0",
        "b24e73957e585fa6",
        "44e989e6430c87d8",
        "f986446928668457",
        "95660cd1a47d4b5d",
        "99f9253ba92aa6ae",
        "1f3efc4fac2328ad",
        "a2063384ea3ea4d8",
        "f94911eb4b474632",
        "86c0a2403b670994",
        "1fe271c9b76e6ca5",
        "82f1f1574e12ef11",
        "2c34ac6e1c49d7cc",
        "9c004b776741506f",
        "61f06e4cf8dcf39c",
        "657ff5f9d26772ef",
        "5f339c5cd7464d26",
        "550a61d14b5379e8",
        "83f3e444d7af9a68",
        "b1598b7af6a9fd80",
        "430590c6305992d0",
        "529bd5d903adba19",
        "bd0f060ad2a4a4ff",
        "e9f63462bf6b0c47",
        "39d3c146e8aa1533",
        "a65b2b5f6898a108",
        "8c57e7827c0345ee",
        "e40e1be15186bd5b",
        "74e2859eef2970d5"
      ],
      "date": 1696953821259,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "id": "c40f4807d942f7d5",
      "type": "move",
      "order": [
        "23455219ca40eb60",
        "019e48232d8217c6",
        "dff8b256f11cc11f",
        "300faa2c441f7fad",
        "b66879c650624dc4",
        "193a50ef44e37b10",
        "68bab033b8a1975d",
        "566549c9ecd926b7",
        "a3c62de368f5bfa6",
        "be7c9055b1e36469",
        "13e7aab9cd00a10a",
        "561dab99a2509fcc",
        "8e2586e2e98d5e6d",
        "7979cdf07e492cc2",
        "6a66b33b5448228d",
        "156a3f7c46b5b1ad",
        "0babb0e898a84fc6",
        "f4ce49d41b72fc8d",
        "d27191cb6c8493d3",
        "03577d8a215f45b1",
        "ed12d90df3c6b48c",
        "b9aaa8b9fd22aa0b",
        "88139d820f5d6879",
        "b1de6e770f40aa40",
        "undefined",
        "aa1bf28ecb78eac0",
        "a7af04d36351cce9",
        "7cd4fc0152d7d84f",
        "3c7b33a0835ed7ee",
        "a64858c490bda4c6",
        "62928012c4d3da24",
        "5765baccc33ce6d0",
        "b24e73957e585fa6",
        "44e989e6430c87d8",
        "f986446928668457",
        "95660cd1a47d4b5d",
        "99f9253ba92aa6ae",
        "1f3efc4fac2328ad",
        "a2063384ea3ea4d8",
        "f94911eb4b474632",
        "86c0a2403b670994",
        "1fe271c9b76e6ca5",
        "82f1f1574e12ef11",
        "2c34ac6e1c49d7cc",
        "9c004b776741506f",
        "61f06e4cf8dcf39c",
        "657ff5f9d26772ef",
        "5f339c5cd7464d26",
        "550a61d14b5379e8",
        "83f3e444d7af9a68",
        "b1598b7af6a9fd80",
        "430590c6305992d0",
        "529bd5d903adba19",
        "bd0f060ad2a4a4ff",
        "e9f63462bf6b0c47",
        "39d3c146e8aa1533",
        "a65b2b5f6898a108",
        "8c57e7827c0345ee",
        "e40e1be15186bd5b",
        "74e2859eef2970d5",
        "c40f4807d942f7d5",
        "a99560b5452735ac"
      ],
      "date": 1696953865102,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "remove",
      "date": 1696953944255
    },
    {
      "type": "fork",
      "date": 1696953949021
    },
    {
      "type": "remove",
      "id": "e40e1be15186bd5b",
      "date": 1696954015729
    },
    {
      "type": "edit",
      "id": "74e2859eef2970d5",
      "item": {
        "type": "markdown",
        "id": "74e2859eef2970d5",
        "text": "> This Tech Overview is near perfect balance in brevity and thoroughness. And the demos have been refined and organized since I last browsed around.  Kudos to David Smith and the many contributors to the demos. [https://discord.com/channels/694586717247635488/968615641248571422 discord]"
      },
      "date": 1696954022030,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server TypeError: Cannot read properties of null (reading 'id')"
      }
    },
    {
      "type": "remove",
      "date": 1696954025644
    },
    {
      "type": "fork",
      "date": 1696954027404
    },
    {
      "item": {
        "type": "factory",
        "id": "6729dda4ca716eab"
      },
      "id": "6729dda4ca716eab",
      "type": "add",
      "after": "74e2859eef2970d5",
      "date": 1696954283429
    },
    {
      "type": "edit",
      "id": "6729dda4ca716eab",
      "item": {
        "type": "reference",
        "id": "6729dda4ca716eab",
        "site": "found.ward.fed.wiki",
        "slug": "looking-at-folding-bikes",
        "title": "Looking at Folding Bikes",
        "text": "Karen and I walked into a bike shop in London and saw Brompton bikes featured on the showroom floor. She has been on me to get one ever since. [https://us.brompton.com/ site]"
      },
      "date": 1696954292295
    },
    {
      "item": {
        "type": "factory",
        "id": "afa3a853ed8aa444"
      },
      "id": "afa3a853ed8aa444",
      "type": "add",
      "after": "6729dda4ca716eab",
      "date": 1696973369851
    },
    {
      "type": "edit",
      "id": "afa3a853ed8aa444",
      "item": {
        "type": "paragraph",
        "id": "afa3a853ed8aa444",
        "text": "\nBLUMBERG, Hannah, 2016. Planting the Seed: An Elm-Based Introductory Computer Science Curriculum for High School Students. Online. 21 June 2016. [Accessed 10 October 2023]. Available from: https://dash.harvard.edu/handle/1/38811428Growing interest in computer science education as a vehicle for improving educational outcomes and career opportunities has led to a surge in policies aimed at expanding computer science education in K-12 schools. This expansion must be met with new educational resources, especially freely and publicly available curricula for introductory courses. This thesis contributes to this effort by presenting a high school-level introductory computer science curriculum that uses the Elm programming language. Since Elm has rarely been used as an introductory language, I justify my choice by identifying desirable features of introductory programming languages and demonstrating that Elm exhibits these features. The curriculum includes twelve hours worth of lesson plans, eight homework assignments, and a new online learning environment. All material and tools will be made publicly and freely available and are designed for teachers with any level of experience with Elm. I discuss my experience teaching a pilot program using my curriculum in a Boston, Massachusetts high school.Accepted: 2019-03-26T10:41:21Z\n"
      },
      "date": 1696973373004
    },
    {
      "type": "edit",
      "id": "afa3a853ed8aa444",
      "item": {
        "type": "paragraph",
        "id": "afa3a853ed8aa444",
        "text": "BLUMBERG, Hannah, 2016. Planting the Seed: An Elm-Based Introductory Computer Science Curriculum for High School Students. Online. 21 June 2016. [Accessed 10 October 2023]. Available from: https://dash.harvard.edu/handle/1/38811428Growing interest in computer science education as a vehicle for improving educational outcomes and career opportunities has led to a surge in policies aimed at expanding computer science education in K-12 schools. This expansion must be met with new educational resources, especially freely and publicly available curricula for introductory courses. This thesis contributes to this effort by presenting a high school-level introductory computer science curriculum that uses the Elm programming language. Since Elm has rarely been used as an introductory language, I justify my choice by identifying desirable features of introductory programming languages and demonstrating that Elm exhibits these features. The curriculum includes twelve hours worth of lesson plans, eight homework assignments, and a new online learning environment. All material and tools will be made publicly and freely available and are designed for teachers with any level of experience with Elm. I discuss my experience teaching a pilot program using my curriculum in a Boston, Massachusetts high school.Accepted: 2019-03-26T10:41:21Z\n"
      },
      "date": 1696973386394
    },
    {
      "type": "edit",
      "id": "afa3a853ed8aa444",
      "item": {
        "type": "paragraph",
        "id": "afa3a853ed8aa444",
        "text": "⇒ [[Planting the Seed]]"
      },
      "date": 1696973407867
    },
    {
      "type": "add",
      "id": "bf2dcdbf488250c2",
      "item": {
        "type": "paragraph",
        "id": "bf2dcdbf488250c2",
        "text": "BLUMBERG, Hannah, 2016. Planting the Seed: An Elm-Based Introductory Computer Science Curriculum for High School Students. Online. 21 June 2016. [Accessed 10 October 2023]. Available from: https://dash.harvard.edu/handle/1/38811428Growing interest in computer science education as a vehicle for improving educational outcomes and career opportunities has led to a surge in policies aimed at expanding computer science education in K-12 schools. This expansion must be met with new educational resources, especially freely and publicly available curricula for introductory courses. This thesis contributes to this effort by presenting a high school-level introductory computer science curriculum that uses the Elm programming language. Since Elm has rarely been used as an introductory language, I justify my choice by identifying desirable features of introductory programming languages and demonstrating that Elm exhibits these features. The curriculum includes twelve hours worth of lesson plans, eight homework assignments, and a new online learning environment. All material and tools will be made publicly and freely available and are designed for teachers with any level of experience with Elm. I discuss my experience teaching a pilot program using my curriculum in a Boston, Massachusetts high school.Accepted: 2019-03-26T10:41:21Z"
      },
      "after": "afa3a853ed8aa444",
      "date": 1696973408420
    },
    {
      "id": "bf2dcdbf488250c2",
      "type": "remove",
      "removedTo": {
        "page": "Planting the Seed"
      },
      "date": 1696973414754
    },
    {
      "item": {
        "type": "factory",
        "id": "7644fcf4a17b7dcb"
      },
      "id": "7644fcf4a17b7dcb",
      "type": "add",
      "after": "afa3a853ed8aa444",
      "date": 1696974019109
    },
    {
      "type": "edit",
      "id": "7644fcf4a17b7dcb",
      "item": {
        "type": "paragraph",
        "id": "7644fcf4a17b7dcb",
        "text": "\nCHAKRAVARTY, Manuel M. T. and KELLER, Gabriele, 2004. The risks and benefits of teaching purely functional programming in first year. Journal of Functional Programming. January 2004. Vol. 14, no. 1, p. 113–123. DOI 10.1017/S0956796803004805. We argue that teaching purely functional programming as such in freshman courses is detrimental to both the curriculum as well as to promoting the paradigm. Instead, we need to focus on the more general aims of teaching elementary techniques of programming and essential concepts of computing. We support this viewpoint with experience gained during several semesters of teaching large first-year classes (up to 600 students) in Haskell. These classes consisted of computer science students as well as students from other disciplines. We have systematically gathered student feedback by conducting surveys after each semester. This article contributes an approach to the use of modern functional languages in first year courses and, based on this, advocates the use of functional languages in this setting.\n"
      },
      "date": 1696974021342
    },
    {
      "item": {
        "type": "factory",
        "id": "5eca20a61566cb98"
      },
      "id": "5eca20a61566cb98",
      "type": "add",
      "after": "7644fcf4a17b7dcb",
      "date": 1696974130673
    },
    {
      "type": "edit",
      "id": "5eca20a61566cb98",
      "item": {
        "type": "paragraph",
        "id": "5eca20a61566cb98",
        "text": "Introduction to the elm/parser package"
      },
      "date": 1696974133308
    },
    {
      "type": "edit",
      "id": "5eca20a61566cb98",
      "item": {
        "type": "paragraph",
        "id": "5eca20a61566cb98",
        "text": "Introduction to the elm/parser package [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ posgt]"
      },
      "date": 1696974144127
    },
    {
      "type": "edit",
      "id": "5eca20a61566cb98",
      "item": {
        "type": "paragraph",
        "id": "5eca20a61566cb98",
        "text": "Introduction to the elm/parser package [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ post]"
      },
      "date": 1696974150043
    },
    {
      "item": {
        "type": "factory",
        "id": "7357c600efddf1e6"
      },
      "id": "7357c600efddf1e6",
      "type": "add",
      "after": "5eca20a61566cb98",
      "date": 1696974248706
    },
    {
      "type": "edit",
      "id": "7357c600efddf1e6",
      "item": {
        "type": "paragraph",
        "id": "7357c600efddf1e6",
        "text": "Implementing the Pratt parsing algorithm in Elm "
      },
      "date": 1696974251708
    },
    {
      "type": "edit",
      "id": "7357c600efddf1e6",
      "item": {
        "type": "paragraph",
        "id": "7357c600efddf1e6",
        "text": "Implementing the Pratt parsing algorithm in Elm [https://medium.com/@p.aron.company/writing-a-calculator-with-pratt-parsing-in-elm-78efb313b98f post]"
      },
      "date": 1696974259492
    },
    {
      "id": "1f3efc4fac2328ad",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837092676
    },
    {
      "id": "a2063384ea3ea4d8",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837096311
    },
    {
      "id": "f94911eb4b474632",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837101351
    },
    {
      "id": "86c0a2403b670994",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837111573
    },
    {
      "id": "1fe271c9b76e6ca5",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837114672
    },
    {
      "id": "82f1f1574e12ef11",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837119168
    },
    {
      "id": "2c34ac6e1c49d7cc",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837121735
    },
    {
      "id": "9c004b776741506f",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837124245
    },
    {
      "id": "61f06e4cf8dcf39c",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837127285
    },
    {
      "id": "657ff5f9d26772ef",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837135890
    },
    {
      "id": "5f339c5cd7464d26",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837153148
    },
    {
      "id": "550a61d14b5379e8",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837162597
    },
    {
      "id": "83f3e444d7af9a68",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837165524
    },
    {
      "id": "430590c6305992d0",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837171798
    },
    {
      "id": "b1598b7af6a9fd80",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837195183
    },
    {
      "id": "529bd5d903adba19",
      "type": "remove",
      "removedTo": {
        "page": "elm/parser"
      },
      "date": 1697837199065
    },
    {
      "type": "remove",
      "id": "bd0f060ad2a4a4ff",
      "date": 1697837298401
    }
  ]
}