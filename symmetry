{
  "title": "Symmetry",
  "story": [
    {
      "type": "audio",
      "id": "d0804d90c6625bcd",
      "text": "https://chrt.fm/track/5594D5/static1.squarespace.com/static/607a5a4ecbc7ae6b49698947/t/63a4b892eaff4244acfbf88d/1672902375442/Episode43+final.mp3/original/Episode43+final.mp3\nJohn Earnest and Multimedia"
    },
    {
      "type": "paragraph",
      "id": "2fd774b33e3494df",
      "text": "00:57:14 [JE]"
    },
    {
      "type": "paragraph",
      "id": "2fbf932227fb9377",
      "text": "(1:15:24) […] to a degree you can end up just carrying this boat anchor around forever; this piece of technology that you used to solve this one problem, you don't really need this whole ecosystem that's attached to it, but now, you know, we decided on the standard and now we're stuck."
    },
    {
      "type": "paragraph",
      "id": "f554c285bdfbbc5e",
      "text": "[…] Whereas, is a ramp taking you down into something, I think is a better way of thinking about it […]"
    },
    {
      "type": "paragraph",
      "id": "c4cc857ced14821a",
      "text": "01:19:11 [JE]"
    },
    {
      "type": "markdown",
      "id": "aa694e5e4e29e73d",
      "text": "Symmetry between programs and data. See *Lisp, Smalltalk, and the Power of Symmetry* [https://medium.com/smalltalk-talk/lisp-smalltalk-and-the-power-of-symmetry-8bd96aaa0c0c post]"
    },
    {
      "type": "markdown",
      "id": "caa0ca75b754a576",
      "text": "> The only thing that seems to be required for a language to allow this is a pervasive symmetry between programs and data. If a language allows programs and data to be treated as the same thing, then that language becomes easily and infinitely extensible – a language of the gods. [[S-expression]]s, it turns out, are not the only way to do this – you can do it with objects as well. I wonder if there are still more ways we haven’t yet tried?"
    },
    {
      "type": "paragraph",
      "id": "ff3c151e8f5fffd6",
      "text": "Richard Kenneth Eng"
    },
    {
      "type": "factory",
      "id": "82e011e450df0b22"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Symmetry",
        "story": []
      },
      "date": 1639581193385
    },
    {
      "item": {
        "type": "factory",
        "id": "aa694e5e4e29e73d"
      },
      "id": "aa694e5e4e29e73d",
      "type": "add",
      "date": 1639581218700
    },
    {
      "type": "edit",
      "id": "aa694e5e4e29e73d",
      "item": {
        "type": "paragraph",
        "id": "aa694e5e4e29e73d",
        "text": "Symmetry between programs and data"
      },
      "date": 1639581220500
    },
    {
      "type": "edit",
      "id": "aa694e5e4e29e73d",
      "item": {
        "type": "paragraph",
        "id": "aa694e5e4e29e73d",
        "text": "Symmetry between programs and data. See *Lisp, Smalltalk, and the Power of Symmetry* [https://medium.com/smalltalk-talk/lisp-smalltalk-and-the-power-of-symmetry-8bd96aaa0c0c post]"
      },
      "date": 1639581245854
    },
    {
      "type": "edit",
      "id": "aa694e5e4e29e73d",
      "item": {
        "type": "markdown",
        "id": "aa694e5e4e29e73d",
        "text": "Symmetry between programs and data. See *Lisp, Smalltalk, and the Power of Symmetry* [https://medium.com/smalltalk-talk/lisp-smalltalk-and-the-power-of-symmetry-8bd96aaa0c0c post]"
      },
      "date": 1639581247934
    },
    {
      "item": {
        "type": "factory",
        "id": "caa0ca75b754a576"
      },
      "id": "caa0ca75b754a576",
      "type": "add",
      "after": "aa694e5e4e29e73d",
      "date": 1639581253363
    },
    {
      "type": "edit",
      "id": "caa0ca75b754a576",
      "item": {
        "type": "markdown",
        "id": "caa0ca75b754a576",
        "text": "> The only thing that seems to be required for a language to allow this is a pervasive symmetry between programs and data. If a language allows programs and data to be treated as the same thing, then that language becomes easily and infinitely extensible–a language of the gods. S-expressions, it turns out, are not the only way to do this–you can do it with objects as well. I wonder if there are still more ways we haven’t yet tried?"
      },
      "date": 1639581255881
    },
    {
      "type": "edit",
      "id": "caa0ca75b754a576",
      "item": {
        "type": "markdown",
        "id": "caa0ca75b754a576",
        "text": "> The only thing that seems to be required for a language to allow this is a pervasive symmetry between programs and data. If a language allows programs and data to be treated as the same thing, then that language becomes easily and infinitely extensible–a language of the gods. [[S-expressions]], it turns out, are not the only way to do this–you can do it with objects as well. I wonder if there are still more ways we haven’t yet tried?"
      },
      "date": 1639581310993
    },
    {
      "type": "edit",
      "id": "caa0ca75b754a576",
      "item": {
        "type": "markdown",
        "id": "caa0ca75b754a576",
        "text": "> The only thing that seems to be required for a language to allow this is a pervasive symmetry between programs and data. If a language allows programs and data to be treated as the same thing, then that language becomes easily and infinitely extensible – a language of the gods. [[S-expressions]], it turns out, are not the only way to do this–you can do it with objects as well. I wonder if there are still more ways we haven’t yet tried?"
      },
      "date": 1671014875289
    },
    {
      "type": "edit",
      "id": "caa0ca75b754a576",
      "item": {
        "type": "markdown",
        "id": "caa0ca75b754a576",
        "text": "> The only thing that seems to be required for a language to allow this is a pervasive symmetry between programs and data. If a language allows programs and data to be treated as the same thing, then that language becomes easily and infinitely extensible – a language of the gods. [[S-expressions]], it turns out, are not the only way to do this – you can do it with objects as well. I wonder if there are still more ways we haven’t yet tried?"
      },
      "date": 1671014888687
    },
    {
      "type": "edit",
      "id": "caa0ca75b754a576",
      "item": {
        "type": "markdown",
        "id": "caa0ca75b754a576",
        "text": "> The only thing that seems to be required for a language to allow this is a pervasive symmetry between programs and data. If a language allows programs and data to be treated as the same thing, then that language becomes easily and infinitely extensible – a language of the gods. [[S-expression]]s, it turns out, are not the only way to do this – you can do it with objects as well. I wonder if there are still more ways we haven’t yet tried?"
      },
      "date": 1678215384943
    },
    {
      "item": {
        "type": "factory",
        "id": "ff3c151e8f5fffd6"
      },
      "id": "ff3c151e8f5fffd6",
      "type": "add",
      "after": "caa0ca75b754a576",
      "date": 1706522191519
    },
    {
      "type": "edit",
      "id": "ff3c151e8f5fffd6",
      "item": {
        "type": "paragraph",
        "id": "ff3c151e8f5fffd6",
        "text": "Smalltalk Talk\n\nRichard Kenneth Eng"
      },
      "date": 1706522193735
    },
    {
      "type": "edit",
      "id": "ff3c151e8f5fffd6",
      "item": {
        "type": "paragraph",
        "id": "ff3c151e8f5fffd6",
        "text": "Richard Kenneth Eng"
      },
      "date": 1706522198477
    },
    {
      "item": {
        "type": "factory",
        "id": "82e011e450df0b22"
      },
      "id": "82e011e450df0b22",
      "type": "add",
      "after": "ff3c151e8f5fffd6",
      "date": 1712140311704
    },
    {
      "type": "edit",
      "id": "c7c26588316cae69",
      "item": {
        "type": "paragraph",
        "id": "c7c26588316cae69",
        "text": "So I wanted something crisp and simple and clear. And the first thing that comes to mind for me is Classic Mac OS, which you know looks very different from computers today in a lot of ways, but I think that many of the things that were good about it then, are still good even if it looks kind of retro. So it's consistent and the other thing about it is that it's the simplicity of the appearance of the widgets and the overall user interface and its visual coherence goes along with the drawing tools. All of the built in widgets are something that a person could very easily draw by hand using the drawing tools that are available. So you get this this symmetry. You don't have, a beautiful, elegant, modern, subtly gradated button on top of an MS paint squiggle. It would look weird; it would look out of place. But the the UI toolkit and Decker and the facilities that the user have match, and things look like they fit together. I think that is really empowering and encouraging to users in kind of an important way. It makes the user's creations feel like they're first class in this environment."
      },
      "date": 1712140320362
    },
    {
      "type": "edit",
      "id": "c7c26588316cae69",
      "item": {
        "type": "paragraph",
        "id": "c7c26588316cae69",
        "text": "So I ([[John Earnest]]) wanted something crisp and simple and clear. And the first thing that comes to mind for me is Classic Mac OS, which you know looks very different from computers today in a lot of ways, but I think that many of the things that were good about it then, are still good even if it looks kind of retro. So it's consistent and the other thing about it is that it's the simplicity of the appearance of the widgets and the overall user interface and its visual coherence goes along with the drawing tools. All of the built in widgets are something that a person could very easily draw by hand using the drawing tools that are available. So you get this this symmetry. You don't have, a beautiful, elegant, modern, subtly gradated button on top of an MS paint squiggle. It would look weird; it would look out of place. But the the UI toolkit and Decker and the facilities that the user have match, and things look like they fit together. I think that is really empowering and encouraging to users in kind of an important way. It makes the user's creations feel like they're first class in this environment."
      },
      "date": 1712140339725
    },
    {
      "id": "d0804d90c6625bcd",
      "type": "add",
      "item": {
        "type": "audio",
        "id": "d0804d90c6625bcd",
        "text": "https://chrt.fm/track/5594D5/static1.squarespace.com/static/607a5a4ecbc7ae6b49698947/t/63a4b892eaff4244acfbf88d/1672902375442/Episode43+final.mp3/original/Episode43+final.mp3\nJohn Earnest and Multimedia"
      },
      "after": "c7c26588316cae69",
      "attribution": {
        "page": "iKe"
      },
      "date": 1712140348777
    },
    {
      "item": {
        "type": "factory",
        "id": "2fd774b33e3494df"
      },
      "id": "2fd774b33e3494df",
      "type": "add",
      "after": "d0804d90c6625bcd",
      "date": 1712140360994
    },
    {
      "type": "edit",
      "id": "2fd774b33e3494df",
      "item": {
        "type": "paragraph",
        "id": "2fd774b33e3494df",
        "text": "00:57:14 [JE]"
      },
      "date": 1712140362766
    },
    {
      "type": "edit",
      "id": "c7c26588316cae69",
      "item": {
        "type": "paragraph",
        "id": "c7c26588316cae69",
        "text": "(58:23) So I ([[John Earnest]]) wanted something crisp and simple and clear. And the first thing that comes to mind for me is Classic Mac OS, which you know looks very different from computers today in a lot of ways, but I think that many of the things that were good about it then, are still good even if it looks kind of retro. So it's consistent and the other thing about it is that it's the simplicity of the appearance of the widgets and the overall user interface and its visual coherence goes along with the drawing tools. All of the built in widgets are something that a person could very easily draw by hand using the drawing tools that are available. So you get this this symmetry. You don't have, a beautiful, elegant, modern, subtly gradated button on top of an MS paint squiggle. It would look weird; it would look out of place. But the the UI toolkit and Decker and the facilities that the user have match, and things look like they fit together. I think that is really empowering and encouraging to users in kind of an important way. It makes the user's creations feel like they're first class in this environment."
      },
      "date": 1712140465140
    },
    {
      "type": "edit",
      "id": "c7c26588316cae69",
      "item": {
        "type": "paragraph",
        "id": "c7c26588316cae69",
        "text": "(58:23) So I ([[John Earnest]]) wanted something crisp and simple and clear. And the first thing that comes to mind for me is Classic Mac OS, which you know looks very different from computers today in a lot of ways, but I think that many of the things that were good about it then, are still good even if it looks kind of retro. So it's consistent and the other thing about it is that it's the simplicity of the appearance of the widgets and the overall user interface and its visual coherence goes along with the drawing tools. All of the built in widgets are something that a person could very easily draw by hand using the drawing tools that are available. So you get this this symmetry. You don't have, a beautiful, elegant, modern, subtly gradated button on top of an MS paint squiggle. It would look weird; it would look out of place. But the the UI toolkit and [[Decker]] and the facilities that the user have match, and things look like they fit together. I think that is really empowering and encouraging to users in kind of an important way. It makes the user's creations feel like they're first class in this environment."
      },
      "date": 1712140563040
    },
    {
      "type": "add",
      "id": "2fbf932227fb9377",
      "item": {
        "type": "paragraph",
        "id": "2fbf932227fb9377",
        "text": "(1:15:42) […] to a degree you can end up just carrying this boat anchor around forever; this piece of technology that you used to solve this one problem, you don't really need this whole ecosystem that's attached to it, but now, you know, we decided on the standard and now we're stuck."
      },
      "after": "2fd774b33e3494df",
      "date": 1712141639932
    },
    {
      "type": "edit",
      "id": "2fbf932227fb9377",
      "item": {
        "type": "paragraph",
        "id": "2fbf932227fb9377",
        "text": "(1:15:24) […] to a degree you can end up just carrying this boat anchor around forever; this piece of technology that you used to solve this one problem, you don't really need this whole ecosystem that's attached to it, but now, you know, we decided on the standard and now we're stuck."
      },
      "date": 1712141668884
    },
    {
      "item": {
        "type": "factory",
        "id": "f554c285bdfbbc5e"
      },
      "id": "f554c285bdfbbc5e",
      "type": "add",
      "after": "2fbf932227fb9377",
      "date": 1712141909417
    },
    {
      "type": "edit",
      "id": "f554c285bdfbbc5e",
      "item": {
        "type": "paragraph",
        "id": "f554c285bdfbbc5e",
        "text": "[…] Whereas, is a ramp taking you down into something, I think is a better way of thinking about it […]"
      },
      "date": 1712141915682
    },
    {
      "item": {
        "type": "factory",
        "id": "c4cc857ced14821a"
      },
      "id": "c4cc857ced14821a",
      "type": "add",
      "after": "f554c285bdfbbc5e",
      "date": 1712142048913
    },
    {
      "type": "edit",
      "id": "c4cc857ced14821a",
      "item": {
        "type": "paragraph",
        "id": "c4cc857ced14821a",
        "text": "01:19:11 [JE]"
      },
      "date": 1712142052012
    }
  ]
}