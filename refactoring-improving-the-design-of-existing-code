{
  "title": "Refactoring Improving The Design Of Existing Code",
  "story": [
    {
      "type": "html",
      "text": "<i>Refactoring: Improving the Design of Existing Code</i> by [[Martin Fowler]], The [[Addison Wesley]] Object Technology Series",
      "id": "f9ba3b4563fa8f74b417f22c6164fe29"
    },
    {
      "type": "image",
      "url": "http://images.amazon.com/images/P/0201485672.01.MZZZZZZZ.jpg",
      "text": "images.amazon.com",
      "id": "34a863eef8da4d2d33447af0eda8012b"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "c544592bd1b0ea106e5a179109ad5786"
    },
    {
      "type": "html",
      "text": "\nISBN:0201485672  Hit the shelves in mid-June of 1999. Sometimes known on Wiki as the [[Refactoring Book]].",
      "id": "afba1bd6c533d409d0697bf24b626982"
    },
    {
      "type": "html",
      "text": " Official site: ",
      "id": "049870652ab9d158a25d435a41371b96"
    },
    {
      "type": "html",
      "text": " [http://www.refactoring.com/ www.refactoring.com] (see [[Refactoring Dot Com]])",
      "id": "cf766cbdae495536a9efb5264a6523c7"
    },
    {
      "type": "html",
      "text": " Catalog of summaries: ",
      "id": "7c79e271ff0afd78526f0f64f3bb1a55"
    },
    {
      "type": "html",
      "text": " [http://www.refactoring.com/catalog/ www.refactoring.com]",
      "id": "79594586195f3730a767253498c4d4c2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "Perhaps this book can serve as the starting point and dictionary for a [[Refactoring Language]], much as [[Pattern Names]], used together, can form a [[Pattern Language]].",
      "id": "505b1637109bbb95773ce6e267d08bb8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "I picked up a copy at [[Java One]]. It's a wonderful book. It is organized roughly along the lines of the [[Gang Of Four]] book - some introductory chapters about what refactoring is, where it came from, and why you should care, followed by a catalog of refactorings. However, I found it to be a much more pleasant book to read than [[Design Patterns]] (as useful and important as that book is, I don't think it's an easy read). ",
      "id": "d3a69a05974778a1632d527d67bc09eb"
    },
    {
      "type": "html",
      "text": " [[Kent Beck]] wrote or contributed to three chapters (on [[Code Smell]]s, [[Big Refactorings]], and a summary explaining how refactoring fits into the bigger picture of software development ",
      "id": "f65c13ce5c467c839216e36aae2b35c8"
    },
    {
      "type": "html",
      "text": " [[William Opdyke]] supplied a chapter on his experiences with refactoring in real-world projects. ",
      "id": "363f7b48652537dc07625a79de4477d3"
    },
    {
      "type": "html",
      "text": " [[Don Roberts]] and [[John Brant]] wrote a chapter on refactoring tools (informed by their work on the [[Refactoring Browser]]).",
      "id": "9424d50f8494bbbab037879398cb7e98"
    },
    {
      "type": "html",
      "text": "\nThe book is well-written, thorough, and will spend the foreseeable future on [[My Lowest Bookshelf]].",
      "id": "2a8a6fe5f56a0296d5fa12f30336d3b3"
    },
    {
      "type": "html",
      "text": "\nLike Fowler's book [[Uml Distilled]], Refactoring is subversive. Along the way, readers learn about many, if not most, of the XP techniques and principles: pair programming, continuous unit testing (and writing unit tests first), [[You Arent Gonna Need It]], [[Once And Only Once]], and others. -- [[Glenn Vanderburg]]",
      "id": "b8a60c8c9208987fabcc106f8a797f72"
    },
    {
      "type": "html",
      "text": "\nIf you've read [[Smalltalk Best Practice Patterns]], you'll find this book is quite similar in a lot of ways. As well as showing you better ways to use the language, this book shows you how to take poor code and improve it by applying those patterns. It uses [[Java Language]] rather than [[Smalltalk Language]] and is much easier to apply directly for those of us using [[Cee Plus Plus]]. I couldn't recommend this book more! -- [[John Burton]]",
      "id": "d1d4a5ce821a7e20bc7094c9d352d747"
    },
    {
      "type": "html",
      "text": "\nKudos, Martin! This book is fabulous! Within an hour, I had decided that I will order several copies to spread around my company. And I was thrilled when I showed it to a colleague first thing this morning only to learned that he ordered it this weekend after discovering it (and reading chapter 1) at a local bookstore. -- [[Kiel Hodges]]",
      "id": "6bbde6b8743fc10365109a53c78be114"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "I'd like to thank Martin for putting together some of the theory of Refactoring with some actual practice here. Writing code is not simply written, but evolved, and this book gives some very specific methods and pathways for common programming techniques.",
      "id": "60ba70512a9c530540c14c243a94a4c1"
    },
    {
      "type": "html",
      "text": "\nThe odd thing is, like [[Design Patterns]], once you have seen the pattern (or idiom, or whatever you want to call it) you think to yourself Oh yeah, I do that (aka I [[Have This Pattern]]). But having a roadmap in front of you is a thought aid and useful reference point when you're in the thick of code without a flashlight.",
      "id": "00d2cd931dfe1a4bbfa56e673bf6484b"
    },
    {
      "type": "html",
      "text": "\nI must also thank this book for introducing me to the [[Java Unit]] (actually JUnit, but that's not wiki friendly) testing framework. I would have liked to have seen more focus on the pre-emptive unit testing methodology as it seemed interesting, but I am concerned how it would scale up to large scale software projects, specifically client/server or distributed systems.",
      "id": "798418605b4bc9863cacfc0fc0e41ea2"
    },
    {
      "type": "html",
      "text": "-- [[Will Sargent]]",
      "id": "ee033744e30b87f3572608813d09b9a7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "[[Refactoring Improving The Design Of Existing Code]] seems to suggest that [[Local Variables Are Bad]].",
      "id": "cdc38a8e68ebb435b545d972d2c0066f"
    },
    {
      "type": "html",
      "text": "<i>Or at least that they can be replaced with something better like a query. -- pg</i>",
      "id": "84a1217263b0d20e94bccf1325773b54"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "One thing that I found confusing was the UML class diagram of JUnit on page 92. It shows that Test<b></b>Suite and Test<b></b>Case both implement <<interface>> Test. That much was reasonable, and consistent with [[Martin Fowlers Junit Paper]]. However, it also shows that Test<b></b>Suite extends zero or more Test. -- [[Patrick Parker]]",
      "id": "ebf46285089c35c04f2ec609605baa10"
    },
    {
      "type": "html",
      "text": "\nThat looks like an erratum. The relationship should be aggregation, rather than inheritance. That is, a Test<i></i>Suite <i>contains</i> zero or more Tests.",
      "id": "5574cd3fe53d489c9d5db7dba71a378f"
    },
    {
      "type": "html",
      "text": "<i>JUnit uses the [[Composite Pattern]]. Test<b></b>Suite both implements Test </i>and<i> contains zero or more instances of Test.</i>",
      "id": "e857836349eb780393601bfe6647f6b2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "I just finished reading Chapter 6 and I have a question regarding [[Replace Method With Method Object]]. I have used this pattern before, creating an [[Inner Class]] to replace a classes method. The book makes no mention of using [[Inner Class]]es, and I was wondering if there are any reasons why you might not make the new [[Method Object]] an [[Inner Class]]?",
      "id": "15341b690b96ee7d0437b36156efed35"
    },
    {
      "type": "html",
      "text": "\nSure, why not? It's a simple extension of [[Replace Method With Method Object]].",
      "id": "8f0f47b7f9a21c0babb0f620b6ae52bd"
    },
    {
      "type": "html",
      "text": "\nPersonally I consider [[Replace Method With Inner Class]] to be the obvious implementation of the pattern. The question I was asking is: <i>\"Are there any times when using an inner class is inappropriate for this Pattern?\"</i>",
      "id": "35cd9ccef383a3c0fb4da12edceab275"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "Having finished reading Chapter 8 I thought I should ask why there was no treatment of the threading issues inherent in [[Duplicate Observed Data]]. The issue is that any modification of the [[Domain Object]] will be propagated to the GUI widgets automatically via the Observer update() method. As this occurs within the setter method of the [[Domain Object]], it will run within the updating Thread <b>not</b> the GUI Thread. As neither AWT nor Swing are [[Thread Safe]], this can lead to [[Data Race]]<i></i>'s and resulting bugs.",
      "id": "7cca156d3e6ddab5668e1b50314122a7"
    },
    {
      "type": "html",
      "text": "\nThe solution is for the [[Domain Object]] to register an update with either javax.swing.[[Invoke And Wait]]() or javax.swing.[[Invoke Later]](). Note that if you use [[Invoke And Wait]]() you must be careful you avoid [[Dead Lock]], [[Invoke Later]] does not have this problem however it will leave your GUI Object and your [[Domain Object]] out of sync until the update runs.",
      "id": "ca9df3bd06dfae74046539793b3447a6"
    },
    {
      "type": "html",
      "text": "\nBoth functions use Runnable as a [[Functor Object]], in most cases I use [[Anonymous Inner Class]]es for this.",
      "id": "51cb518b9bdd82135c144a9db8e90288"
    },
    {
      "type": "html",
      "text": "-- [[Andrae Muys]] ",
      "id": "9ce95fe0d478f61d7c73382406d6850d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "Excellent book - wish I'd come across it sooner. Quite practical/hands on, though with decent explanations. I found the GoF book unreadable, so I bought a clone, which still makes some of the patterns clear as mud. This book however couldn't be clearer, and what's more it's easy to read - written with a light touch and interspersed with humour. I was pleased to see that I was already using most of the refactorings - but having a good reason why is very reassuring. Still not taken 'Change Unidirectional Association to Bidirectional' on board though - I'm sure I've needed to achieve the same end before, but I can't figure out how else I would have done it. 10/10 for [[Martin Fowler]] & co. -- [[Danny Ayers]] ",
      "id": "bb1a0cce18352cff78dc445f33a1e2f2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "Comments on the book by a self-described [[Relational Weenie]] moved to [[Refactoring Is Not Relational]]. (Any [[Wiki Master]] should feel free to provide a better name for the page. -- [[Steven Newton]])",
      "id": "a1ee7dfd3baa35acc393b56cdd8184ce"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "[[Dot Net]] Refactoring Tutorial:",
      "id": "330c2487e889b5448f4fcf66722c5f80"
    },
    {
      "type": "html",
      "text": " [http://www.parlezuml.com/tutorials/dotnet_refactoring/intro.htm www.parlezuml.com]",
      "id": "60f11303479267000366f4a1cb590554"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "You know, I'm still not happy with the use of the term <i>design</i> in relation to refactoring. Design happens before coding. Code is supposed to reflect design. Refactoring can improve <i>implementation</i>, but it really can't affect design. If it does then there was something wrong with the design in the first place, now wasn't there?",
      "id": "5341d2eedbe82aeb5c5511cf48178906"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "I beg to disagree. See [[Emergent Design]].",
      "id": "0d8d1e883040d9c1e9b9275bbc4c0b18"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "See also [[Refactoring To Patterns]]",
      "id": "dbab6cec19f072ca1a7339622b0582b1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8786c474f0ec78c739cdda87c33ed00f"
    },
    {
      "type": "html",
      "text": "[[Category Book]], [[Category Refactoring]]",
      "id": "5b3bc8aa86d69d8d44b47e812ff95dfd"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?RefactoringImprovingTheDesignOfExistingCode c2.com]",
      "id": "140ca14eff5201013faf870c662022ad"
    }
  ],
  "journal": [
    {
      "date": 1381746002000,
      "id": "d871e6cddc5e7d5ab44e9503208e8f14",
      "type": "create",
      "item": {
        "title": "Refactoring Improving The Design Of Existing Code",
        "story": [
          {
            "type": "html",
            "text": "<i>Refactoring: Improving the Design of Existing Code</i> by [[Martin Fowler]], The [[Addison Wesley]] Object Technology Series",
            "id": "f9ba3b4563fa8f74b417f22c6164fe29"
          },
          {
            "type": "image",
            "url": "http://images.amazon.com/images/P/0201485672.01.MZZZZZZZ.jpg",
            "text": "images.amazon.com",
            "id": "34a863eef8da4d2d33447af0eda8012b"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "c544592bd1b0ea106e5a179109ad5786"
          },
          {
            "type": "html",
            "text": "\nISBN:0201485672  Hit the shelves in mid-June of 1999. Sometimes known on Wiki as the [[Refactoring Book]].",
            "id": "afba1bd6c533d409d0697bf24b626982"
          },
          {
            "type": "html",
            "text": " Official site: ",
            "id": "049870652ab9d158a25d435a41371b96"
          },
          {
            "type": "html",
            "text": " [http://www.refactoring.com/ www.refactoring.com] (see [[Refactoring Dot Com]])",
            "id": "cf766cbdae495536a9efb5264a6523c7"
          },
          {
            "type": "html",
            "text": " Catalog of summaries: ",
            "id": "7c79e271ff0afd78526f0f64f3bb1a55"
          },
          {
            "type": "html",
            "text": " [http://www.refactoring.com/catalog/ www.refactoring.com]",
            "id": "79594586195f3730a767253498c4d4c2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "Perhaps this book can serve as the starting point and dictionary for a [[Refactoring Language]], much as [[Pattern Names]], used together, can form a [[Pattern Language]].",
            "id": "505b1637109bbb95773ce6e267d08bb8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "I picked up a copy at [[Java One]]. It's a wonderful book. It is organized roughly along the lines of the [[Gang Of Four]] book - some introductory chapters about what refactoring is, where it came from, and why you should care, followed by a catalog of refactorings. However, I found it to be a much more pleasant book to read than [[Design Patterns]] (as useful and important as that book is, I don't think it's an easy read). ",
            "id": "d3a69a05974778a1632d527d67bc09eb"
          },
          {
            "type": "html",
            "text": " [[Kent Beck]] wrote or contributed to three chapters (on [[Code Smell]]s, [[Big Refactorings]], and a summary explaining how refactoring fits into the bigger picture of software development ",
            "id": "f65c13ce5c467c839216e36aae2b35c8"
          },
          {
            "type": "html",
            "text": " [[William Opdyke]] supplied a chapter on his experiences with refactoring in real-world projects. ",
            "id": "363f7b48652537dc07625a79de4477d3"
          },
          {
            "type": "html",
            "text": " [[Don Roberts]] and [[John Brant]] wrote a chapter on refactoring tools (informed by their work on the [[Refactoring Browser]]).",
            "id": "9424d50f8494bbbab037879398cb7e98"
          },
          {
            "type": "html",
            "text": "\nThe book is well-written, thorough, and will spend the foreseeable future on [[My Lowest Bookshelf]].",
            "id": "2a8a6fe5f56a0296d5fa12f30336d3b3"
          },
          {
            "type": "html",
            "text": "\nLike Fowler's book [[Uml Distilled]], Refactoring is subversive. Along the way, readers learn about many, if not most, of the XP techniques and principles: pair programming, continuous unit testing (and writing unit tests first), [[You Arent Gonna Need It]], [[Once And Only Once]], and others. -- [[Glenn Vanderburg]]",
            "id": "b8a60c8c9208987fabcc106f8a797f72"
          },
          {
            "type": "html",
            "text": "\nIf you've read [[Smalltalk Best Practice Patterns]], you'll find this book is quite similar in a lot of ways. As well as showing you better ways to use the language, this book shows you how to take poor code and improve it by applying those patterns. It uses [[Java Language]] rather than [[Smalltalk Language]] and is much easier to apply directly for those of us using [[Cee Plus Plus]]. I couldn't recommend this book more! -- [[John Burton]]",
            "id": "d1d4a5ce821a7e20bc7094c9d352d747"
          },
          {
            "type": "html",
            "text": "\nKudos, Martin! This book is fabulous! Within an hour, I had decided that I will order several copies to spread around my company. And I was thrilled when I showed it to a colleague first thing this morning only to learned that he ordered it this weekend after discovering it (and reading chapter 1) at a local bookstore. -- [[Kiel Hodges]]",
            "id": "6bbde6b8743fc10365109a53c78be114"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "I'd like to thank Martin for putting together some of the theory of Refactoring with some actual practice here. Writing code is not simply written, but evolved, and this book gives some very specific methods and pathways for common programming techniques.",
            "id": "60ba70512a9c530540c14c243a94a4c1"
          },
          {
            "type": "html",
            "text": "\nThe odd thing is, like [[Design Patterns]], once you have seen the pattern (or idiom, or whatever you want to call it) you think to yourself Oh yeah, I do that (aka I [[Have This Pattern]]). But having a roadmap in front of you is a thought aid and useful reference point when you're in the thick of code without a flashlight.",
            "id": "00d2cd931dfe1a4bbfa56e673bf6484b"
          },
          {
            "type": "html",
            "text": "\nI must also thank this book for introducing me to the [[Java Unit]] (actually JUnit, but that's not wiki friendly) testing framework. I would have liked to have seen more focus on the pre-emptive unit testing methodology as it seemed interesting, but I am concerned how it would scale up to large scale software projects, specifically client/server or distributed systems.",
            "id": "798418605b4bc9863cacfc0fc0e41ea2"
          },
          {
            "type": "html",
            "text": "-- [[Will Sargent]]",
            "id": "ee033744e30b87f3572608813d09b9a7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "[[Refactoring Improving The Design Of Existing Code]] seems to suggest that [[Local Variables Are Bad]].",
            "id": "cdc38a8e68ebb435b545d972d2c0066f"
          },
          {
            "type": "html",
            "text": "<i>Or at least that they can be replaced with something better like a query. -- pg</i>",
            "id": "84a1217263b0d20e94bccf1325773b54"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "One thing that I found confusing was the UML class diagram of JUnit on page 92. It shows that Test<b></b>Suite and Test<b></b>Case both implement <<interface>> Test. That much was reasonable, and consistent with [[Martin Fowlers Junit Paper]]. However, it also shows that Test<b></b>Suite extends zero or more Test. -- [[Patrick Parker]]",
            "id": "ebf46285089c35c04f2ec609605baa10"
          },
          {
            "type": "html",
            "text": "\nThat looks like an erratum. The relationship should be aggregation, rather than inheritance. That is, a Test<i></i>Suite <i>contains</i> zero or more Tests.",
            "id": "5574cd3fe53d489c9d5db7dba71a378f"
          },
          {
            "type": "html",
            "text": "<i>JUnit uses the [[Composite Pattern]]. Test<b></b>Suite both implements Test </i>and<i> contains zero or more instances of Test.</i>",
            "id": "e857836349eb780393601bfe6647f6b2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "I just finished reading Chapter 6 and I have a question regarding [[Replace Method With Method Object]]. I have used this pattern before, creating an [[Inner Class]] to replace a classes method. The book makes no mention of using [[Inner Class]]es, and I was wondering if there are any reasons why you might not make the new [[Method Object]] an [[Inner Class]]?",
            "id": "15341b690b96ee7d0437b36156efed35"
          },
          {
            "type": "html",
            "text": "\nSure, why not? It's a simple extension of [[Replace Method With Method Object]].",
            "id": "8f0f47b7f9a21c0babb0f620b6ae52bd"
          },
          {
            "type": "html",
            "text": "\nPersonally I consider [[Replace Method With Inner Class]] to be the obvious implementation of the pattern. The question I was asking is: <i>\"Are there any times when using an inner class is inappropriate for this Pattern?\"</i>",
            "id": "35cd9ccef383a3c0fb4da12edceab275"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "Having finished reading Chapter 8 I thought I should ask why there was no treatment of the threading issues inherent in [[Duplicate Observed Data]]. The issue is that any modification of the [[Domain Object]] will be propagated to the GUI widgets automatically via the Observer update() method. As this occurs within the setter method of the [[Domain Object]], it will run within the updating Thread <b>not</b> the GUI Thread. As neither AWT nor Swing are [[Thread Safe]], this can lead to [[Data Race]]<i></i>'s and resulting bugs.",
            "id": "7cca156d3e6ddab5668e1b50314122a7"
          },
          {
            "type": "html",
            "text": "\nThe solution is for the [[Domain Object]] to register an update with either javax.swing.[[Invoke And Wait]]() or javax.swing.[[Invoke Later]](). Note that if you use [[Invoke And Wait]]() you must be careful you avoid [[Dead Lock]], [[Invoke Later]] does not have this problem however it will leave your GUI Object and your [[Domain Object]] out of sync until the update runs.",
            "id": "ca9df3bd06dfae74046539793b3447a6"
          },
          {
            "type": "html",
            "text": "\nBoth functions use Runnable as a [[Functor Object]], in most cases I use [[Anonymous Inner Class]]es for this.",
            "id": "51cb518b9bdd82135c144a9db8e90288"
          },
          {
            "type": "html",
            "text": "-- [[Andrae Muys]] ",
            "id": "9ce95fe0d478f61d7c73382406d6850d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "Excellent book - wish I'd come across it sooner. Quite practical/hands on, though with decent explanations. I found the GoF book unreadable, so I bought a clone, which still makes some of the patterns clear as mud. This book however couldn't be clearer, and what's more it's easy to read - written with a light touch and interspersed with humour. I was pleased to see that I was already using most of the refactorings - but having a good reason why is very reassuring. Still not taken 'Change Unidirectional Association to Bidirectional' on board though - I'm sure I've needed to achieve the same end before, but I can't figure out how else I would have done it. 10/10 for [[Martin Fowler]] & co. -- [[Danny Ayers]] ",
            "id": "bb1a0cce18352cff78dc445f33a1e2f2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "Comments on the book by a self-described [[Relational Weenie]] moved to [[Refactoring Is Not Relational]]. (Any [[Wiki Master]] should feel free to provide a better name for the page. -- [[Steven Newton]])",
            "id": "a1ee7dfd3baa35acc393b56cdd8184ce"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "[[Dot Net]] Refactoring Tutorial:",
            "id": "330c2487e889b5448f4fcf66722c5f80"
          },
          {
            "type": "html",
            "text": " [http://www.parlezuml.com/tutorials/dotnet_refactoring/intro.htm www.parlezuml.com]",
            "id": "60f11303479267000366f4a1cb590554"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "You know, I'm still not happy with the use of the term <i>design</i> in relation to refactoring. Design happens before coding. Code is supposed to reflect design. Refactoring can improve <i>implementation</i>, but it really can't affect design. If it does then there was something wrong with the design in the first place, now wasn't there?",
            "id": "5341d2eedbe82aeb5c5511cf48178906"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "I beg to disagree. See [[Emergent Design]].",
            "id": "0d8d1e883040d9c1e9b9275bbc4c0b18"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "See also [[Refactoring To Patterns]]",
            "id": "dbab6cec19f072ca1a7339622b0582b1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8786c474f0ec78c739cdda87c33ed00f"
          },
          {
            "type": "html",
            "text": "[[Category Book]], [[Category Refactoring]]",
            "id": "5b3bc8aa86d69d8d44b47e812ff95dfd"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?RefactoringImprovingTheDesignOfExistingCode c2.com]",
            "id": "140ca14eff5201013faf870c662022ad"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1644305598498
    }
  ]
}