{
  "title": "2023-04-26",
  "story": [
    {
      "type": "paragraph",
      "id": "e0d115999f27aa96",
      "text": "⇒ [[elm-pages]]-v3-beta\n [https://discourse.elm-lang.org/t/realworld-app-elm-spa-example-in-elm-pages-v3/8992/5 discourse]"
    },
    {
      "type": "markdown",
      "id": "0e3d674d81e60539",
      "text": "> You can try a hosted version of elm-pages v3 TodoMVC app at https://elm-pages-todos.netlify.app/."
    },
    {
      "type": "paragraph",
      "id": "0c33e81bebc57ba6",
      "text": "view-source:https://[[elm-pages]]-todos.netlify.app/login"
    },
    {
      "type": "code",
      "id": "66db100b075008d3",
      "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Login</title>\n    <link rel=\"modulepreload\" crossorigin href=\"/elm.42b62f02.js\"><link rel=\"preload\" href=\"/assets/index-eae3d542.css\" as=\"style\"><link rel=\"modulepreload\" crossorigin href=\"/assets/index-bad0f17a.js\">\n    <script defer src=\"/elm.42b62f02.js\" type=\"text/javascript\"></script>\n    \n        \n    \n    <meta name=\"generator\" content=\"elm-pages v3.0.0-beta.28\" />\n    \n        <link rel=\"canonical\" href=\"https://elm-pages.com/login\" />    <meta … />\n                  <script id=\"__ELM_PAGES_BYTES_DATA__\" type=\"application/octet-stream\">AQIAAA==</script>\n    <script type=\"module\" crossorigin src=\"/assets/index-bad0f17a.js\"></script>\n    <link rel=\"stylesheet\" href=\"/assets/index-eae3d542.css\">\n  </head>\n  <body>\n    <div data-url=\"\" display=\"none\"></div>\n    <div><nav style=\"display:flex;justify-content:space-evenly;\"></nav><div style=\"padding:40px;\"><div><p>You aren&#039;t logged in yet.</p><form action=\"/login\" id=\"login\" method=\"POST\" noValidate><input name=\"kind\" type=\"hidden\" value=\"login\"><div><label>Email <input name=\"email\" type=\"email\" value=\"\"></label><ul style=\"color:red;\"></ul></div><ul style=\"color:red;\"></ul><button>Login</button></form></div></div></div>\n  </body>\n</html>"
    },
    {
      "type": "paragraph",
      "id": "1ee21cc7ea480b0e",
      "text": "⇒ [[Netlify]]"
    },
    {
      "type": "paragraph",
      "id": "d2bf74f6e0ce1c3c",
      "text": "docs/FAQ.md"
    },
    {
      "type": "paragraph",
      "id": "3adba4fc93e4a86c",
      "text": "Why does [[elm-pages]] use [[Lamdera]]? Is it free?"
    },
    {
      "type": "paragraph",
      "id": "717af21ce097453e",
      "text": "⇒ [[Elm Runtime]]"
    },
    {
      "type": "pagefold",
      "id": "b6baa467aa64409a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "edc09bf275ce8de2",
      "text": "Mail from Ward, Re: Wonder Room tweaks"
    },
    {
      "type": "paragraph",
      "id": "1a6376e0cc10ffa7",
      "text": "⇒ [[Kavita Tanna]]"
    },
    {
      "type": "pagefold",
      "id": "0fb77cb44a60ee99",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "5ee93c93f6ec6ad5",
      "site": "ward.asia.wiki.org",
      "slug": "register-plugin",
      "title": "Register Plugin",
      "text": "We consider adding incrementally more control over the creation of subdomains within a wiki farm. A Register plugin would be offered on a claimed site that would manufacture and possibly pre-claim subdomain sites."
    },
    {
      "type": "paragraph",
      "id": "0a87947d3e1123c6",
      "text": "Is [[elm-pages]] full-stack? Can I use it for pure static sites without a server? Can I use it for server-rendered pages with dynamic user content? ([https://github.com/dillonkearns/elm-pages-v3-beta/blob/8e816297380c7154333aa6577f207430fccc2bd7/docs/FAQ.md#is-elm-pages-full-stack-can-i-use-it-for-pure-static-sites-without-a-server-can-i-use-it-for-server-rendered-pages-with-dynamic-user-content docs/FAQ.md])"
    },
    {
      "type": "markdown",
      "id": "82d407d72af066ac",
      "text": "With this lifecycle, you're able to respond dynamically\nto a request, which means that you can do things like\n\n- Check for a [[Session Cookie]]\n- If the session cookie is present, use a BackendTask to lookup the user using an API call and server-render a page with user-specific page content\n- If the session cookie is absent, redirect to the login page using an HTTP 301 response code\n- Load data dynmically at request-time, so every time the page is loaded you have the latest data (compared to statically built sites that have data from the time when the site was last built)"
    },
    {
      "type": "paragraph",
      "id": "c046cfa83f1e2293",
      "text": "paul90:\n[…] [[Passport]] has effectively broken support for cookie based session management, and don't seem to intend fixing it. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$166479031582596guoVy:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
    },
    {
      "type": "paragraph",
      "id": "355be983cf749972",
      "text": "Todo app login [https://elm-pages-todos.netlify.app/ site], [https://todomvc.com/ site], [https://todomvc.com/examples/elm/ page]"
    },
    {
      "type": "paragraph",
      "id": "69c4f18a47dc5d21",
      "text": "evancz/elm-todomvc [https://github.com/evancz/elm-todomvc github]"
    },
    {
      "type": "paragraph",
      "id": "2bd28add49d23277",
      "text": "⇒ [[Life-Cycle]]"
    },
    {
      "type": "paragraph",
      "id": "66b1548e7d6b316d",
      "text": "➜  elm-pages-v3-beta git:(master) ✗ sh ./test.sh "
    },
    {
      "type": "paragraph",
      "id": "9726db13a813a653",
      "text": "Prerequisite: globby [https://www.npmjs.com/package/globby npm]"
    },
    {
      "type": "code",
      "id": "aae6d601c73b30dc",
      "text": "npm i globby"
    },
    {
      "type": "code",
      "id": "8bcc983ce6b5cbd3",
      "text": "[…]\n> elm-pages build --debug --keep-cache\n\nError [ERR_MODULE_NOT_FOUND]: Cannot find module '/Users/rgb/Projects/dreyeck/elm-pages-v3-beta/codegen/elm-pages-codegen.cjs' imported from /Users/rgb/Projects/dreyeck/elm-pages-v3-beta/generator/src/generate-template-module-connector.js"
    },
    {
      "type": "paragraph",
      "id": "fc621f77c9f54b33",
      "text": "elm-codegen [https://github.com/mdgriffith/elm-codegen github], [https://www.npmjs.com/package/elm-codegen npm]"
    },
    {
      "type": "code",
      "id": "ef498fee0ab8e1a4",
      "text": "npm i elm-codegen"
    },
    {
      "type": "paragraph",
      "id": "d2979be738afce7f",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "a5a467460beb6a5d",
      "text": "How do you handle responsive layouts when you don't know the browser dimensions at build time? [https://github.com/dillonkearns/elm-pages-v3-beta/blob/8e816297380c7154333aa6577f207430fccc2bd7/docs/FAQ.md#how-do-you-handle-responsive-layouts-when-you-dont-know-the-browser-dimensions-at-build-time page]"
    },
    {
      "type": "paragraph",
      "id": "d09faefafe7a7fce",
      "text": "A lot of users are building their [[elm-pages]] views with [[elm-ui]], so this is a common question because elm-ui is designed to do responsive layouts by storing the browser dimensions in the Model and doing conditionals based on that state."
    },
    {
      "type": "paragraph",
      "id": "5ecb144da38dc8ac",
      "text": "With elm-pages, and static sites in general, we are building pre-rendered HTML so we can serve it up really quickly through a CDN, rather than serving it up with a traditional server framework. That means that to have responsive pages that don't have a page flash, we need to use media queries to make our pages responsive. That way, the view is the same no matter what the dimensions are, so it will pre-render and look right on whatever device the user is on because the media queries will take care of making it responsive."
    },
    {
      "type": "paragraph",
      "id": "cdeb061b261c03ea",
      "text": "Since elm-ui isn't currently built with media queries in mind, it isn't a first-class experience to use them with elm-ui. One workaround you can use is to define some responsive classes that simply show or hide an element based on a media query, and apply those classes. For example, you could show the mobile or desktop version of the navbar by having a mobile-responsive and desktop-responsive class and rendering one element with each respsective class. But the media query will only show one at a time based on the dimensions."
    },
    {
      "type": "pagefold",
      "id": "407122970f92822e",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "66af6ca0e27e4190",
      "text": "⇒ [[Dillon Kearns]]\n  via [https://elmlang.slack.com/archives/CNSNETV37/p1681928149693739 slack]\nHey folks, I just released a new version of the elm-pages v3 beta that integrates my new elm-form package (https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/). I extracted that package from the elm-pages v3 API, but it's now usable as a standalone package as well. I'm quite pleased with how the integration worked out, it feels quite clean! And nice to be able to use the same API in vanilla projects - it just gets some superpowers when you use it in an elm-pages app, but you can use the same API to build your forms!\nSince the scope of elm-pages is so large, it's also nice to have it as a separate package as it's a bit more digestable as a separate package. We can also share Ellie snippets for examples of Forms.\nHere are the latest v3 package docs: https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/\nAnd the starter repo is up-to-date as well: https://github.com/dillonkearns/elm-pages-3-alpha-starter\nThe scaffold commands work with the latest Form API, too. Hope you enjoy!"
    },
    {
      "type": "markdown",
      "id": "795a26fd919b6d81",
      "text": "Getting Started Resources [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/ page]\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n* elm-pages Elm API [https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/ docs]\n* Quick start [https://github.com/dillonkearns/elm-pages-starter repo] (live site hosted [https://elm-pages-starter.netlify.app/ here])\n* Introducing elm-pages blog [https://elm-pages.com/blog/introducing-elm-pages/ post]\n* examples folder [https://github.com/dillonkearns/elm-pages/tree/master/examples github] (includes https://elm-pages.com site source)\n"
    },
    {
      "type": "paragraph",
      "id": "3b4a75ab27170ad4",
      "text": "⇒ [[Conduit]]"
    },
    {
      "type": "reference",
      "id": "e934454502f6539d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "elm-pages-realworld",
      "title": "elm-pages-realworld",
      "text": "[[Realworld]] implementation with [[elm-pages]] v3. [https://github.com/dillonkearns/elm-pages-realworld/ github], [https://elm-pages-realworld.netlify.app/ site]"
    },
    {
      "type": "paragraph",
      "id": "1eac1a4ecca60965",
      "text": " ryannhg /\nelm-spa-realworld [https://github.com/ryannhg/elm-spa-realworld github], [https://realworld.elm-spa.dev/ site]"
    },
    {
      "type": "pagefold",
      "id": "b0fe860034018a9c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "af1d8804e3b5c355",
      "text": "⇒ [[Compass]]"
    },
    {
      "type": "paragraph",
      "id": "28e1dfe3183b58f2",
      "text": "Haben Computer Vorurteile?42 - Die Antwort auf fast alles [https://www.arte.tv/de/videos/101938-008-A/haben-computer-vorurteile/ page] (23:30) ⇒ [[Kristian Kersting]]"
    },
    {
      "type": "paragraph",
      "id": "1629a52bb8569c3a",
      "text": "Artificial Intelligence and Machine Learning Lab [https://ml-research.github.io site]"
    },
    {
      "type": "paragraph",
      "id": "60c0e47afe260231",
      "text": "⇒ [[Katharina Zweig]] [https://aalab.cs.uni-kl.de/gruppe/zweig/ page]"
    },
    {
      "type": "paragraph",
      "id": "4f57ad722a8ad9f8",
      "text": "Ein augenöffnender Artikel wurde von Professor Carter Butts 2009 unter dem Titel \"Revisiting the Foundations of Social Network Analysis\" veröffentlicht. "
    },
    {
      "type": "reference",
      "id": "e5f2b57e95345ce0",
      "site": "wiki.ralfbarkow.ch",
      "slug": "glasperlenspiel",
      "title": "Glasperlenspiel",
      "text": "HESSE, Hermann, 1943/1972. Das Glasperlenspiel: Versuch einer Lebensbeschreibung des Magister Ludi Josef Knecht samt Knechts hinterlassenen Schriften.  Frankfurt/Main: Suhrkamp. Suhrkamp Taschenbuch, 79. ISBN 978-3-518-36579-3."
    },
    {
      "type": "paragraph",
      "id": "bb3218940a1a98c0",
      "text": " […] Beliebte Inhalte solcher Aufsätze waren Anekdoten aus dem Leben berühmter Männer und Frauen und deren Briefwechsel, sie hießen etwa «Friedrich Nietzsche und die Frauenmode um 1870» oder «Die Lieblingsspeisen des Komponisten Rossini» oder «Die Rolle des Schoßhundes im Leben großer Kurtisanen» und ähnlich. Ferner liebte man historisierende Betrachtungen über aktuelle Gesprächsstoffe der Wohlhabenden, etwa «Der Traum von der künstlichen Herstellung des Goldes im Lauf der Jahrhunderte» oder «Die Versuche zur chemisch-physikalischen Beeinflussung der Witterung» und hundert ähnliche Dinge. Lesen wir die von Ziegenhalß angeführten Titel solcher Plaudereien, so gilt unsre Befremdung weniger dem Umstande, daß es Menschen gab, welche sie als tägliche Lektüre verschlangen, als vielmehr der Tatsache, daß Autoren von Ruf und Rang und guter Vorbildung diesen Riesenverbrauch an nichtigen Interessantheiten «[[bedienen]]» halfen, wie bezeichnenderweise der Ausdruck dafür lautete: der Ausdruck bezeichnet übrigens auch das damalige Verhältnis des Menschen zur Maschine. […]"
    },
    {
      "type": "paragraph",
      "id": "c532be76eba98079",
      "text": " [...] Popular contents of such essays were anecdotes from the lives of famous men and women and their correspondence, they were called, for example, \"Friedrich Nietzsche and women's fashion around 1870\" or \"The favorite foods of the composer Rossini\" or \"The role of the lapdog in the lives of great courtesans\" and similar. Furthermore, one loved historicizing reflections on current topics of conversation of the wealthy, such as \"The dream of the artificial production of gold over the centuries\" or \"The experiments on the chemical-physical influence on the weather\" and a hundred similar things. If we read the titles of such chit-chat mentioned by Ziegenhalß, we are not so much astonished by the fact that there were people who devoured them as daily reading, but rather by the fact that authors of reputation and rank and good education helped to \"serve\" this huge consumption of trivial interesting things, as the expression for it was characteristically: the expression, by the way, also describes the relationship of man to the machine at that time. [...]"
    },
    {
      "type": "paragraph",
      "id": "1a53eeb0c5e9d9e7",
      "text": "[…] Zeitweise besonders beliebt waren die Befragungen bekannter Persönlichkeiten über Tagesfragen, welchen Ziegenhalß ein eigenes Kapitel widmet und bei welchen man zum Beispiel namhafte Chemiker oder Klaviervirtuosen sich über Politik, beliebte Schauspieler, Tänzer, Turner, Flieger oder auch Dichter sich über Nutzen und Nachteile des Junggesellentums, über die mutmaßlichen Ursachen von Finanzkrisen und so weiter äußern ließ. Es kam dabei einzig darauf an, einen bekannten Namen mit einem gerade aktuellen Thema zusammenzubringen: man lese bei Ziegenhalß die zum Teil frappanten Beispiele nach, er führt Hunderte an. […]"
    },
    {
      "type": "paragraph",
      "id": "26f6dcdddc095a71",
      "text": "[...] At times, the questioning of well-known personalities about questions of the day, to which Ziegenhalß devotes a separate chapter, was particularly popular, and in which, for example, well-known chemists or piano virtuosos were asked to comment on politics, popular actors, dancers, gymnasts, aviators, or even poets on the benefits and disadvantages of bachelorhood, on the presumed causes of financial crises, and so on. The only thing that mattered was to bring together a well-known name with a current topic: one can read in Ziegenhalß the sometimes striking examples, he cites hundreds. [...]"
    },
    {
      "type": "paragraph",
      "id": "367f53f893a50b57",
      "text": "⇒ [[Docta Ignorantia]]"
    },
    {
      "type": "pagefold",
      "id": "b3a934492900ab22",
      "text": "~"
    },
    {
      "type": "code",
      "id": "b69b438c74f2b602",
      "text": "pageDataBase64:document.getElementById(\"__ELM_PAGES_BYTES_DATA__\").innerHTML,userFlags:l.flags()}});return "
    },
    {
      "type": "paragraph",
      "id": "57191a8eee653355",
      "text": "Elm byte decoding within Http.get [https://stackoverflow.com/questions/60383450/elm-byte-decoding-within-http-get stackoverflow], [https://package.elm-lang.org/packages/elm/bytes/latest/Bytes-Decode#strings page]"
    },
    {
      "type": "paragraph",
      "id": "75bd5b97f0f7dfd7",
      "text": "protocolbuffers/protobuf, 2020. Online. C++. Protocol Buffers. [Accessed 3 June 2020]. Available from: https://github.com/protocolbuffers/protobufProtocol Buffers\n"
    },
    {
      "type": "paragraph",
      "id": "fc0d9e9afaaa8ee5",
      "text": "A vision for data interchange in Elm [https://gist.github.com/evancz/1c5f2cf34939336ecb79b97bb89d9da6#a-vision-for-data-interchange-in-elm gist]"
    },
    {
      "type": "paragraph",
      "id": "2310bc5cf5e03241",
      "text": "ProtoBuf decoding/encoding via Bytes.Decode.width? [https://discourse.elm-lang.org/t/protobuf-decoding-encoding-via-bytes-decode-width/2670 discourse]"
    },
    {
      "type": "paragraph",
      "id": "f9ab1c667c59544c",
      "text": "Protocol Buffers using bytes: `elm-protocol-buffers` [https://discourse.elm-lang.org/t/protocol-buffers-using-bytes-elm-protocol-buffers/2873 discourse]"
    },
    {
      "type": "paragraph",
      "id": "09c2bca3bde8dfd0",
      "text": "Vite build warns: script can't be bundled without type=\"module\" attribute [https://stackoverflow.com/questions/70951072/vite-build-warns-script-cant-be-bundled-without-type-module-attribute stackoverflow]"
    },
    {
      "type": "pagefold",
      "id": "7068ad1929ee973a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5e4bf94cb3be53be",
      "text": "Sean via [https://discord.com/channels/@me/869566842807652453/1100735566884122675 discord], [https://github.com/seandenigris/My-People/commit/92079d8346d682d824fc457cb1ffa07ca81d60b5 github]"
    },
    {
      "type": "pagefold",
      "id": "2986b063b7e1a8e1",
      "text": "~"
    },
    {
      "type": "code",
      "id": "142897c36e7daf80",
      "text": "[~/.wiki/conduit.dreyeck.ch/assets/home]$ cp template.html index.html"
    },
    {
      "type": "paragraph",
      "id": "9903636628c037ad",
      "text": "[[Ralf Barkow]]\n  via [https://elmlang.slack.com/archives/CNSNETV37/p1682528259748959 slack]\nHi Dillon, I have a question about your RealWorld sample app, i.e. elm-pages-realworld. More specifically about the build process.\nMy intention is to use elm-pages as a container for a federated wiki page. The Federated Wiki offers the possibility (see Safe and Familiar Welcome) to provide a “index.html” style template in a reserved path to realize a custom home page. In my case, that would be http://conduit.dreyeck.ch/assets/home/index.html\n"
    },
    {
      "type": "paragraph",
      "id": "5f1da3aecd695ad9",
      "text": "I create your Realworld app both on a Mac and on the NixOS server where I host my Federated Wiki farm, and create a symlink home -> elm-pages-realworld/dist/.\nDo I understand correctly that the build process does not create the index.html file, but that I have to create it myself based on the template.html file? My problem now is that I don’t understand how <!-- PLACEHOLDER_HEAD_AND_DATA --> is replaced by <script id=“__ELM_PAGES_BYTES_DATA__” type=“application/octet-stream”>...\nI can find an example of this construct in the dist directory only(?)  in the 404.html. When I copy this octet stream into my index.hml, I get “No route found for /____elm-pages-internal____/404 ...“.\nAm I doing something wrong and if so, what?"
    },
    {
      "type": "pagefold",
      "id": "167dc56c26a47505",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5a984593687b8f86",
      "text": "@marick If I understood the first part of your Foucault epsiode correctly, you are concerned with clarifying the notion of \"voluntary panoptism.\" [https://fosstodon.org/@rgb/110266900752069275 post]\n\nFoucault explains this in the chapter on \"Panoptism\" with an architectural example. While sovereign power acts vertically from a center, disciplinary power spreads horizontally. It is organized decentrally, largely depersonalized, and operates from within as a system of reciprocal control and self-discipline. "
    },
    {
      "type": "paragraph",
      "id": "ad69a20fb8702d44",
      "text": "Brian \"Podcast Persona\" Marick @marick@social.oddly-influenced.dev\n\n@rgb 2a. Bentham’s panopticon was a claim that undetectable observation would trick prisoners into observing themselves, which (in Prado’s terms) “can convert deliberate obedience of regulations into habitual compliance with norms. […] Habitual compliance itself converts to adoption or ‘internalization’ of those norms.”"
    },
    {
      "type": "paragraph",
      "id": "3de55b5710b184eb",
      "text": "@marick Foucault first shows in a historical review of the late Middle Ages and the early modern period that in the fight against the plague and against leprosy two respectively very different coping strategies emerge. While leprosy – and increasingly poverty and criminality – are met with exclusion, \"disciplinary models\" of ordering space and surveillance emerge in the fight against plague.\n\nThe exclusion/inclusion distinction is central here."
    },
    {
      "type": "paragraph",
      "id": "4a0b1d2c21ff98d9",
      "text": "@marick The idea of Jeremy Bentham, published in Dublin in 1787 under the title Panopticon, was not realized in the form proposed. Bentham assumes that broad sections of the population must be placed under surveillance so that they can be guided to lead meaningful, productive lives. In the tradition of the English utopians, he proposes a spatial solution: the grouping together of the lower classes concerned in buildings specially adapted to their respective problems."
    },
    {
      "type": "paragraph",
      "id": "511759744a5fb0e9",
      "text": "@marick The spectrum ranges from prisons to workhouses, manufactories and factories to poorhouses, from insane asylums and hospitals to schools."
    },
    {
      "type": "paragraph",
      "id": "4c8a54cce9b6267b",
      "text": "@marick The prototype for all these houses is characterized by an architectural ground plan and layout that is sophisticated down to the last detail: a ring of buildings in which work and life take place and which is to be designed in such a way that every occupant can be identified at any time, and a tower in the center from which overseers can observe every movement unnoticed."
    },
    {
      "type": "paragraph",
      "id": "7aabf3d4e2d151a8",
      "text": "@marick Foucault interprets the so-called Panopticon in terms of power theory as \"a machine for divorcing the pair seeing/being seen: In the outer ring, one is seen completely without ever seeing; in the central tower, one sees everything without ever being seen\"."
    },
    {
      "type": "paragraph",
      "id": "1c1f39ffe5a56ac9",
      "text": "@marick Re:  vertically / horizontally \n\nAt this point, a reference to DP1 and DP2 from the episode with Trond Hjorteland @trondhjort might be helpful. I would think Foucault could be helpful in describing the tension between DP1 and DP2 and their emergence."
    },
    {
      "type": "paragraph",
      "id": "d576d906b0f56ed2",
      "text": "@marick And to come full circle to the starting point of agile software development, see [[Code Style Reflects Organization]] for Robert Martin's view of code. It seems as if he separates the concepts in order to partition the people.\n\nHeavily partitioned code may be the way to go when it comes to predictability and monitoring developer progress. \n\nCf. Bentham's \"grouping together […] in buildings specially adapted to their respective problems.\""
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-04-26",
        "story": []
      },
      "date": 1682487959286
    },
    {
      "item": {
        "type": "factory",
        "id": "0c33e81bebc57ba6"
      },
      "id": "0c33e81bebc57ba6",
      "type": "add",
      "date": 1682487961970
    },
    {
      "type": "edit",
      "id": "0c33e81bebc57ba6",
      "item": {
        "type": "paragraph",
        "id": "0c33e81bebc57ba6",
        "text": "view-source:https://elm-pages-todos.netlify.app/login"
      },
      "date": 1682487963975
    },
    {
      "item": {
        "type": "factory",
        "id": "66db100b075008d3"
      },
      "id": "66db100b075008d3",
      "type": "add",
      "after": "0c33e81bebc57ba6",
      "date": 1682487968894
    },
    {
      "type": "edit",
      "id": "66db100b075008d3",
      "item": {
        "type": "code",
        "id": "66db100b075008d3",
        "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Login</title>\n    <link rel=\"modulepreload\" crossorigin href=\"/elm.42b62f02.js\"><link rel=\"preload\" href=\"/assets/index-eae3d542.css\" as=\"style\"><link rel=\"modulepreload\" crossorigin href=\"/assets/index-bad0f17a.js\">\n    <script defer src=\"/elm.42b62f02.js\" type=\"text/javascript\"></script>\n    \n        \n    \n    <meta name=\"generator\" content=\"elm-pages v3.0.0-beta.28\" />\n    \n        <link rel=\"canonical\" href=\"https://elm-pages.com/login\" />    <meta name=\"description\" content=\"Login to manage your todo list in full-stack Elm!\" />    <meta property=\"og:image\" content=\"https://images.unsplash.com/photo-1499750310107-5fef28a66643?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=80\" />    <meta property=\"og:image:secure_url\" content=\"https://images.unsplash.com/photo-1499750310107-5fef28a66643?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=80\" />    <meta property=\"og:image:alt\" content=\"Desk with a Todo List\" />    <meta property=\"og:title\" content=\"Login | elm-pages Todo List\" />    <meta property=\"og:url\" content=\"https://elm-pages.com/login\" />    <meta property=\"og:description\" content=\"Login to manage your todo list in full-stack Elm!\" />    <meta property=\"og:site_name\" content=\"Login | elm-pages Todo List\" />    <meta property=\"twitter:card\" content=\"summary\" />    <meta property=\"twitter:title\" content=\"Login | elm-pages Todo List\" />    <meta property=\"twitter:description\" content=\"Login to manage your todo list in full-stack Elm!\" />    <meta property=\"twitter:image\" content=\"https://images.unsplash.com/photo-1499750310107-5fef28a66643?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=600&amp;q=80\" />    <meta property=\"twitter:image:alt\" content=\"Desk with a Todo List\" />    <meta property=\"og:type\" content=\"website\" />    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />    <meta name=\"mobile-web-app-capable\" content=\"yes\" />    <meta name=\"theme-color\" content=\"#ffffff\" />    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />    <link rel=\"sitemap\" type=\"application/xml\" href=\"/sitemap.xml\" />    <link rel=\"manifest\" href=\"/manifest.json\" />\n                  <script id=\"__ELM_PAGES_BYTES_DATA__\" type=\"application/octet-stream\">AQIAAA==</script>\n    <script type=\"module\" crossorigin src=\"/assets/index-bad0f17a.js\"></script>\n    <link rel=\"stylesheet\" href=\"/assets/index-eae3d542.css\">\n  </head>\n  <body>\n    <div data-url=\"\" display=\"none\"></div>\n    <div><nav style=\"display:flex;justify-content:space-evenly;\"></nav><div style=\"padding:40px;\"><div><p>You aren&#039;t logged in yet.</p><form action=\"/login\" id=\"login\" method=\"POST\" noValidate><input name=\"kind\" type=\"hidden\" value=\"login\"><div><label>Email <input name=\"email\" type=\"email\" value=\"\"></label><ul style=\"color:red;\"></ul></div><ul style=\"color:red;\"></ul><button>Login</button></form></div></div></div>\n  </body>\n</html>"
      },
      "date": 1682487971059
    },
    {
      "type": "edit",
      "id": "0c33e81bebc57ba6",
      "item": {
        "type": "paragraph",
        "id": "0c33e81bebc57ba6",
        "text": "view-source:https://[[elm-pages]]-todos.netlify.app/login"
      },
      "date": 1682487979887
    },
    {
      "item": {
        "type": "factory",
        "id": "1ee21cc7ea480b0e"
      },
      "id": "1ee21cc7ea480b0e",
      "type": "add",
      "after": "66db100b075008d3",
      "date": 1682488036728
    },
    {
      "type": "edit",
      "id": "1ee21cc7ea480b0e",
      "item": {
        "type": "paragraph",
        "id": "1ee21cc7ea480b0e",
        "text": "⇒ [[Netlify]]"
      },
      "date": 1682488045583
    },
    {
      "id": "e0d115999f27aa96",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e0d115999f27aa96",
        "text": "elm-pages-v3-beta\n [https://discourse.elm-lang.org/t/realworld-app-elm-spa-example-in-elm-pages-v3/8992/5 discourse]"
      },
      "attribution": {
        "page": "2023-04-25"
      },
      "date": 1682488283153
    },
    {
      "type": "edit",
      "id": "e0d115999f27aa96",
      "item": {
        "type": "paragraph",
        "id": "e0d115999f27aa96",
        "text": "⇒ [[elm-pages]]-v3-beta\n [https://discourse.elm-lang.org/t/realworld-app-elm-spa-example-in-elm-pages-v3/8992/5 discourse]"
      },
      "date": 1682488294509
    },
    {
      "type": "add",
      "id": "0e3d674d81e60539",
      "item": {
        "type": "paragraph",
        "id": "0e3d674d81e60539",
        "text": "> You can try a hosted version of elm-pages v3 TodoMVC app at https://elm-pages-todos.netlify.app/ 4."
      },
      "after": "e0d115999f27aa96",
      "date": 1682488349309
    },
    {
      "type": "edit",
      "id": "0e3d674d81e60539",
      "item": {
        "type": "markdown",
        "id": "0e3d674d81e60539",
        "text": "> You can try a hosted version of elm-pages v3 TodoMVC app at https://elm-pages-todos.netlify.app/ 4."
      },
      "date": 1682488350826
    },
    {
      "type": "edit",
      "id": "0e3d674d81e60539",
      "item": {
        "type": "markdown",
        "id": "0e3d674d81e60539",
        "text": "> You can try a hosted version of elm-pages v3 TodoMVC app at https://elm-pages-todos.netlify.app/."
      },
      "date": 1682488359597
    },
    {
      "type": "edit",
      "id": "66db100b075008d3",
      "item": {
        "type": "code",
        "id": "66db100b075008d3",
        "text": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Login</title>\n    <link rel=\"modulepreload\" crossorigin href=\"/elm.42b62f02.js\"><link rel=\"preload\" href=\"/assets/index-eae3d542.css\" as=\"style\"><link rel=\"modulepreload\" crossorigin href=\"/assets/index-bad0f17a.js\">\n    <script defer src=\"/elm.42b62f02.js\" type=\"text/javascript\"></script>\n    \n        \n    \n    <meta name=\"generator\" content=\"elm-pages v3.0.0-beta.28\" />\n    \n        <link rel=\"canonical\" href=\"https://elm-pages.com/login\" />    <meta … />\n                  <script id=\"__ELM_PAGES_BYTES_DATA__\" type=\"application/octet-stream\">AQIAAA==</script>\n    <script type=\"module\" crossorigin src=\"/assets/index-bad0f17a.js\"></script>\n    <link rel=\"stylesheet\" href=\"/assets/index-eae3d542.css\">\n  </head>\n  <body>\n    <div data-url=\"\" display=\"none\"></div>\n    <div><nav style=\"display:flex;justify-content:space-evenly;\"></nav><div style=\"padding:40px;\"><div><p>You aren&#039;t logged in yet.</p><form action=\"/login\" id=\"login\" method=\"POST\" noValidate><input name=\"kind\" type=\"hidden\" value=\"login\"><div><label>Email <input name=\"email\" type=\"email\" value=\"\"></label><ul style=\"color:red;\"></ul></div><ul style=\"color:red;\"></ul><button>Login</button></form></div></div></div>\n  </body>\n</html>"
      },
      "date": 1682488475307
    },
    {
      "item": {
        "type": "factory",
        "id": "aab993ad8154cb94"
      },
      "id": "aab993ad8154cb94",
      "type": "add",
      "after": "1ee21cc7ea480b0e",
      "date": 1682489416148
    },
    {
      "type": "remove",
      "id": "aab993ad8154cb94",
      "date": 1682489421088
    },
    {
      "item": {
        "type": "factory",
        "id": "d2bf74f6e0ce1c3c"
      },
      "id": "d2bf74f6e0ce1c3c",
      "type": "add",
      "after": "1ee21cc7ea480b0e",
      "date": 1682489444088
    },
    {
      "type": "edit",
      "id": "d2bf74f6e0ce1c3c",
      "item": {
        "type": "paragraph",
        "id": "d2bf74f6e0ce1c3c",
        "text": "docs/FAQ.md"
      },
      "date": 1682489446866
    },
    {
      "item": {
        "type": "factory",
        "id": "717af21ce097453e"
      },
      "id": "717af21ce097453e",
      "type": "add",
      "after": "d2bf74f6e0ce1c3c",
      "date": 1682489724462
    },
    {
      "type": "edit",
      "id": "717af21ce097453e",
      "item": {
        "type": "paragraph",
        "id": "717af21ce097453e",
        "text": "⇒ [[Elm Runtime]]"
      },
      "date": 1682489741777
    },
    {
      "item": {
        "type": "factory",
        "id": "b6baa467aa64409a"
      },
      "id": "b6baa467aa64409a",
      "type": "add",
      "after": "717af21ce097453e",
      "date": 1682489936114
    },
    {
      "type": "edit",
      "id": "b6baa467aa64409a",
      "item": {
        "type": "pagefold",
        "id": "b6baa467aa64409a",
        "text": "~"
      },
      "date": 1682489939154
    },
    {
      "item": {
        "type": "factory",
        "id": "edc09bf275ce8de2"
      },
      "id": "edc09bf275ce8de2",
      "type": "add",
      "after": "b6baa467aa64409a",
      "date": 1682489940232
    },
    {
      "type": "edit",
      "id": "edc09bf275ce8de2",
      "item": {
        "type": "paragraph",
        "id": "edc09bf275ce8de2",
        "text": "Mail from Ward, Re: Wonder Room tweaks"
      },
      "date": 1682489955749
    },
    {
      "type": "add",
      "id": "1a6376e0cc10ffa7",
      "item": {
        "type": "paragraph",
        "id": "1a6376e0cc10ffa7",
        "text": "⇒ [[Kavita Tanna]]"
      },
      "after": "edc09bf275ce8de2",
      "date": 1682490001499
    },
    {
      "type": "add",
      "id": "3adba4fc93e4a86c",
      "item": {
        "type": "paragraph",
        "id": "3adba4fc93e4a86c",
        "text": "Why does elm-pages use Lamdera? Is it free?"
      },
      "after": "d2bf74f6e0ce1c3c",
      "date": 1682490065206
    },
    {
      "type": "edit",
      "id": "3adba4fc93e4a86c",
      "item": {
        "type": "paragraph",
        "id": "3adba4fc93e4a86c",
        "text": "Why does [[elm-pages]] use [[Lamdera]]? Is it free?"
      },
      "date": 1682490077234
    },
    {
      "item": {
        "type": "factory",
        "id": "0fb77cb44a60ee99"
      },
      "id": "0fb77cb44a60ee99",
      "type": "add",
      "after": "1a6376e0cc10ffa7",
      "date": 1682492535430
    },
    {
      "type": "edit",
      "id": "0fb77cb44a60ee99",
      "item": {
        "type": "pagefold",
        "id": "0fb77cb44a60ee99",
        "text": "~"
      },
      "date": 1682492538564
    },
    {
      "item": {
        "type": "factory",
        "id": "5ee93c93f6ec6ad5"
      },
      "id": "5ee93c93f6ec6ad5",
      "type": "add",
      "after": "0fb77cb44a60ee99",
      "date": 1682492540811
    },
    {
      "type": "edit",
      "id": "5ee93c93f6ec6ad5",
      "item": {
        "type": "reference",
        "id": "5ee93c93f6ec6ad5",
        "site": "ward.asia.wiki.org",
        "slug": "register-plugin",
        "title": "Register Plugin",
        "text": "We consider adding incrementally more control over the creation of subdomains within a wiki farm. A Register plugin would be offered on a claimed site that would manufacture and possibly pre-claim subdomain sites."
      },
      "date": 1682492544474
    },
    {
      "item": {
        "type": "factory",
        "id": "0a87947d3e1123c6"
      },
      "id": "0a87947d3e1123c6",
      "type": "add",
      "after": "5ee93c93f6ec6ad5",
      "date": 1682492578958
    },
    {
      "type": "edit",
      "id": "0a87947d3e1123c6",
      "item": {
        "type": "paragraph",
        "id": "0a87947d3e1123c6",
        "text": "Is elm-pages full-stack? Can I use it for pure static sites without a server? Can I use it for server-rendered pages with dynamic user content?"
      },
      "date": 1682492580718
    },
    {
      "type": "edit",
      "id": "0a87947d3e1123c6",
      "item": {
        "type": "paragraph",
        "id": "0a87947d3e1123c6",
        "text": "Is [[elm-pages]] full-stack? Can I use it for pure static sites without a server? Can I use it for server-rendered pages with dynamic user content? ([https://github.com/dillonkearns/elm-pages-v3-beta/blob/8e816297380c7154333aa6577f207430fccc2bd7/docs/FAQ.md docs/FAQ.md])"
      },
      "date": 1682492603433
    },
    {
      "type": "edit",
      "id": "0a87947d3e1123c6",
      "item": {
        "type": "paragraph",
        "id": "0a87947d3e1123c6",
        "text": "Is [[elm-pages]] full-stack? Can I use it for pure static sites without a server? Can I use it for server-rendered pages with dynamic user content? ([https://github.com/dillonkearns/elm-pages-v3-beta/blob/8e816297380c7154333aa6577f207430fccc2bd7/docs/FAQ.md#is-elm-pages-full-stack-can-i-use-it-for-pure-static-sites-without-a-server-can-i-use-it-for-server-rendered-pages-with-dynamic-user-content docs/FAQ.md])"
      },
      "date": 1682492629539
    },
    {
      "item": {
        "type": "factory",
        "id": "82d407d72af066ac"
      },
      "id": "82d407d72af066ac",
      "type": "add",
      "after": "0a87947d3e1123c6",
      "date": 1682492660537
    },
    {
      "type": "edit",
      "id": "82d407d72af066ac",
      "item": {
        "type": "markdown",
        "id": "82d407d72af066ac",
        "text": "With this lifecycle, you're able to respond dynamically\nto a request, which means that you can do things like\n\n- Check for a session cookie\n- If the session cookie is present, use a BackendTask to lookup the user using an API call and server-render a page with user-specific page content\n- If the session cookie is absent, redirect to the login page using an HTTP 301 response code\n- Load data dynmically at request-time, so every time the page is loaded you have the latest data (compared to statically built sites that have data from the time when the site was last built)"
      },
      "date": 1682492662519
    },
    {
      "item": {
        "type": "factory",
        "id": "c046cfa83f1e2293"
      },
      "id": "c046cfa83f1e2293",
      "type": "add",
      "after": "82d407d72af066ac",
      "date": 1682492854755
    },
    {
      "type": "edit",
      "id": "c046cfa83f1e2293",
      "item": {
        "type": "paragraph",
        "id": "c046cfa83f1e2293",
        "text": "https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$166479031582596guoVy:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st"
      },
      "date": 1682492857333
    },
    {
      "type": "edit",
      "id": "c046cfa83f1e2293",
      "item": {
        "type": "paragraph",
        "id": "c046cfa83f1e2293",
        "text": "paul90:\n[…] Passport has effectively broken support for cookie based session management, and don't seem to intend fixing it. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$166479031582596guoVy:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1682492888509
    },
    {
      "type": "edit",
      "id": "c046cfa83f1e2293",
      "item": {
        "type": "paragraph",
        "id": "c046cfa83f1e2293",
        "text": "paul90:\n[…] [[Passport]] has effectively broken support for cookie based session management, and don't seem to intend fixing it. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$166479031582596guoVy:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1682492910894
    },
    {
      "item": {
        "type": "factory",
        "id": "2bd28add49d23277"
      },
      "id": "2bd28add49d23277",
      "type": "add",
      "after": "c046cfa83f1e2293",
      "date": 1682493069039
    },
    {
      "type": "edit",
      "id": "2bd28add49d23277",
      "item": {
        "type": "paragraph",
        "id": "2bd28add49d23277",
        "text": "⇒ [[Life-Cycle]]"
      },
      "date": 1682493077824
    },
    {
      "item": {
        "type": "factory",
        "id": "fc621f77c9f54b33"
      },
      "id": "fc621f77c9f54b33",
      "type": "add",
      "after": "2bd28add49d23277",
      "date": 1682493624064
    },
    {
      "type": "edit",
      "id": "fc621f77c9f54b33",
      "item": {
        "type": "paragraph",
        "id": "fc621f77c9f54b33",
        "text": "https://github.com/mdgriffith/elm-codegen"
      },
      "date": 1682493626941
    },
    {
      "item": {
        "type": "factory",
        "id": "66b1548e7d6b316d"
      },
      "id": "66b1548e7d6b316d",
      "type": "add",
      "after": "fc621f77c9f54b33",
      "date": 1682493643225
    },
    {
      "id": "66b1548e7d6b316d",
      "type": "move",
      "order": [
        "e0d115999f27aa96",
        "0e3d674d81e60539",
        "0c33e81bebc57ba6",
        "66db100b075008d3",
        "1ee21cc7ea480b0e",
        "d2bf74f6e0ce1c3c",
        "3adba4fc93e4a86c",
        "717af21ce097453e",
        "b6baa467aa64409a",
        "edc09bf275ce8de2",
        "1a6376e0cc10ffa7",
        "0fb77cb44a60ee99",
        "5ee93c93f6ec6ad5",
        "0a87947d3e1123c6",
        "82d407d72af066ac",
        "c046cfa83f1e2293",
        "2bd28add49d23277",
        "66b1548e7d6b316d",
        "fc621f77c9f54b33"
      ],
      "date": 1682493645035
    },
    {
      "type": "edit",
      "id": "66b1548e7d6b316d",
      "item": {
        "type": "paragraph",
        "id": "66b1548e7d6b316d",
        "text": "➜  elm-pages-v3-beta git:(master) ✗ sh ./test.sh "
      },
      "date": 1682493646357
    },
    {
      "item": {
        "type": "factory",
        "id": "aae6d601c73b30dc"
      },
      "id": "aae6d601c73b30dc",
      "type": "add",
      "after": "fc621f77c9f54b33",
      "date": 1682493711432
    },
    {
      "id": "aae6d601c73b30dc",
      "type": "move",
      "order": [
        "e0d115999f27aa96",
        "0e3d674d81e60539",
        "0c33e81bebc57ba6",
        "66db100b075008d3",
        "1ee21cc7ea480b0e",
        "d2bf74f6e0ce1c3c",
        "3adba4fc93e4a86c",
        "717af21ce097453e",
        "b6baa467aa64409a",
        "edc09bf275ce8de2",
        "1a6376e0cc10ffa7",
        "0fb77cb44a60ee99",
        "5ee93c93f6ec6ad5",
        "0a87947d3e1123c6",
        "82d407d72af066ac",
        "c046cfa83f1e2293",
        "2bd28add49d23277",
        "66b1548e7d6b316d",
        "aae6d601c73b30dc",
        "fc621f77c9f54b33"
      ],
      "date": 1682493713601
    },
    {
      "type": "edit",
      "id": "aae6d601c73b30dc",
      "item": {
        "type": "code",
        "id": "aae6d601c73b30dc",
        "text": "npm i globby"
      },
      "date": 1682493715646
    },
    {
      "type": "add",
      "id": "9726db13a813a653",
      "item": {
        "type": "paragraph",
        "id": "9726db13a813a653",
        "text": "Prerequisite: https://www.npmjs.com/package/globby"
      },
      "after": "66b1548e7d6b316d",
      "date": 1682493763547
    },
    {
      "type": "edit",
      "id": "9726db13a813a653",
      "item": {
        "type": "paragraph",
        "id": "9726db13a813a653",
        "text": "Prerequisite: globby [https://www.npmjs.com/package/globby npm]"
      },
      "date": 1682493792453
    },
    {
      "item": {
        "type": "factory",
        "id": "8bcc983ce6b5cbd3"
      },
      "id": "8bcc983ce6b5cbd3",
      "type": "add",
      "after": "fc621f77c9f54b33",
      "date": 1682493863238
    },
    {
      "type": "edit",
      "id": "8bcc983ce6b5cbd3",
      "item": {
        "type": "code",
        "id": "8bcc983ce6b5cbd3",
        "text": "> elm-pages build --debug --keep-cache\n\nError [ERR_MODULE_NOT_FOUND]: Cannot find module '/Users/rgb/Projects/dreyeck/elm-pages-v3-beta/codegen/elm-pages-codegen.cjs' imported from /Users/rgb/Projects/dreyeck/elm-pages-v3-beta/generator/src/generate-template-module-connector.js"
      },
      "date": 1682493865188
    },
    {
      "id": "8bcc983ce6b5cbd3",
      "type": "move",
      "order": [
        "e0d115999f27aa96",
        "0e3d674d81e60539",
        "0c33e81bebc57ba6",
        "66db100b075008d3",
        "1ee21cc7ea480b0e",
        "d2bf74f6e0ce1c3c",
        "3adba4fc93e4a86c",
        "717af21ce097453e",
        "b6baa467aa64409a",
        "edc09bf275ce8de2",
        "1a6376e0cc10ffa7",
        "0fb77cb44a60ee99",
        "5ee93c93f6ec6ad5",
        "0a87947d3e1123c6",
        "82d407d72af066ac",
        "c046cfa83f1e2293",
        "2bd28add49d23277",
        "66b1548e7d6b316d",
        "9726db13a813a653",
        "aae6d601c73b30dc",
        "8bcc983ce6b5cbd3",
        "fc621f77c9f54b33"
      ],
      "date": 1682493867571
    },
    {
      "type": "edit",
      "id": "8bcc983ce6b5cbd3",
      "item": {
        "type": "code",
        "id": "8bcc983ce6b5cbd3",
        "text": "[…]\n> elm-pages build --debug --keep-cache\n\nError [ERR_MODULE_NOT_FOUND]: Cannot find module '/Users/rgb/Projects/dreyeck/elm-pages-v3-beta/codegen/elm-pages-codegen.cjs' imported from /Users/rgb/Projects/dreyeck/elm-pages-v3-beta/generator/src/generate-template-module-connector.js"
      },
      "date": 1682493881016
    },
    {
      "item": {
        "type": "factory",
        "id": "ef498fee0ab8e1a4"
      },
      "id": "ef498fee0ab8e1a4",
      "type": "add",
      "after": "fc621f77c9f54b33",
      "date": 1682494014278
    },
    {
      "type": "edit",
      "id": "ef498fee0ab8e1a4",
      "item": {
        "type": "code",
        "id": "ef498fee0ab8e1a4",
        "text": "npm i elm-codegen"
      },
      "date": 1682494016357
    },
    {
      "type": "edit",
      "id": "fc621f77c9f54b33",
      "item": {
        "type": "paragraph",
        "id": "fc621f77c9f54b33",
        "text": "elm-codegen [https://github.com/mdgriffith/elm-codegen github], "
      },
      "date": 1682494107155
    },
    {
      "type": "edit",
      "id": "fc621f77c9f54b33",
      "item": {
        "type": "paragraph",
        "id": "fc621f77c9f54b33",
        "text": "elm-codegen [https://github.com/mdgriffith/elm-codegen github], [https://www.npmjs.com/package/elm-codegen npm]"
      },
      "date": 1682494120672
    },
    {
      "item": {
        "type": "factory",
        "id": "d2979be738afce7f"
      },
      "id": "d2979be738afce7f",
      "type": "add",
      "after": "ef498fee0ab8e1a4",
      "date": 1682494305155
    },
    {
      "type": "edit",
      "id": "d2979be738afce7f",
      "item": {
        "type": "paragraph",
        "id": "d2979be738afce7f",
        "text": "[…]"
      },
      "date": 1682494308110
    },
    {
      "type": "add",
      "id": "a5a467460beb6a5d",
      "item": {
        "type": "paragraph",
        "id": "a5a467460beb6a5d",
        "text": "How do you handle responsive layouts when you don't know the browser dimensions at build time?"
      },
      "after": "d2979be738afce7f",
      "date": 1682494309094
    },
    {
      "type": "edit",
      "id": "a5a467460beb6a5d",
      "item": {
        "type": "paragraph",
        "id": "a5a467460beb6a5d",
        "text": "How do you handle responsive layouts when you don't know the browser dimensions at build time? [https://github.com/dillonkearns/elm-pages-v3-beta/blob/8e816297380c7154333aa6577f207430fccc2bd7/docs/FAQ.md#how-do-you-handle-responsive-layouts-when-you-dont-know-the-browser-dimensions-at-build-time page]"
      },
      "date": 1682494327206
    },
    {
      "item": {
        "type": "factory",
        "id": "d09faefafe7a7fce"
      },
      "id": "d09faefafe7a7fce",
      "type": "add",
      "after": "a5a467460beb6a5d",
      "date": 1682494335049
    },
    {
      "type": "edit",
      "id": "d09faefafe7a7fce",
      "item": {
        "type": "paragraph",
        "id": "d09faefafe7a7fce",
        "text": "A lot of users are building their [[elm-pages]] views with [[elm-ui]], so this is a common question because elm-ui is designed to do responsive layouts by storing the browser dimensions in the Model and doing conditionals based on that state."
      },
      "date": 1682494350107
    },
    {
      "item": {
        "type": "factory",
        "id": "5ecb144da38dc8ac"
      },
      "id": "5ecb144da38dc8ac",
      "type": "add",
      "after": "d09faefafe7a7fce",
      "date": 1682494371699
    },
    {
      "type": "edit",
      "id": "5ecb144da38dc8ac",
      "item": {
        "type": "paragraph",
        "id": "5ecb144da38dc8ac",
        "text": "With elm-pages, and static sites in general, we are building pre-rendered HTML so we can serve it up really quickly through a CDN, rather than serving it up with a traditional server framework. That means that to have responsive pages that don't have a page flash, we need to use media queries to make our pages responsive. That way, the view is the same no matter what the dimensions are, so it will pre-render and look right on whatever device the user is on because the media queries will take care of making it responsive."
      },
      "date": 1682494373750
    },
    {
      "item": {
        "type": "factory",
        "id": "cdeb061b261c03ea"
      },
      "id": "cdeb061b261c03ea",
      "type": "add",
      "after": "5ecb144da38dc8ac",
      "date": 1682494381961
    },
    {
      "type": "edit",
      "id": "cdeb061b261c03ea",
      "item": {
        "type": "paragraph",
        "id": "cdeb061b261c03ea",
        "text": "ince elm-ui isn't currently built with media queries in mind, it isn't a first-class experience to use them with elm-ui. One workaround you can use is to define some responsive classes that simply show or hide an element based on a media query, and apply those classes. For example, you could show the mobile or desktop version of the navbar by having a mobile-responsive and desktop-responsive class and rendering one element with each respsective class. But the media query will only show one at a time based on the dimensions."
      },
      "date": 1682494383243
    },
    {
      "type": "edit",
      "id": "cdeb061b261c03ea",
      "item": {
        "type": "paragraph",
        "id": "cdeb061b261c03ea",
        "text": "Since elm-ui isn't currently built with media queries in mind, it isn't a first-class experience to use them with elm-ui. One workaround you can use is to define some responsive classes that simply show or hide an element based on a media query, and apply those classes. For example, you could show the mobile or desktop version of the navbar by having a mobile-responsive and desktop-responsive class and rendering one element with each respsective class. But the media query will only show one at a time based on the dimensions."
      },
      "date": 1682494389957
    },
    {
      "type": "edit",
      "id": "82d407d72af066ac",
      "item": {
        "type": "markdown",
        "id": "82d407d72af066ac",
        "text": "With this lifecycle, you're able to respond dynamically\nto a request, which means that you can do things like\n\n- Check for a [[Session Cookie]]\n- If the session cookie is present, use a BackendTask to lookup the user using an API call and server-render a page with user-specific page content\n- If the session cookie is absent, redirect to the login page using an HTTP 301 response code\n- Load data dynmically at request-time, so every time the page is loaded you have the latest data (compared to statically built sites that have data from the time when the site was last built)"
      },
      "date": 1682494508467
    },
    {
      "item": {
        "type": "factory",
        "id": "355be983cf749972"
      },
      "id": "355be983cf749972",
      "type": "add",
      "after": "c046cfa83f1e2293",
      "date": 1682494833545
    },
    {
      "type": "edit",
      "id": "355be983cf749972",
      "item": {
        "type": "paragraph",
        "id": "355be983cf749972",
        "text": "Todo app login"
      },
      "date": 1682494835409
    },
    {
      "type": "add",
      "id": "69c4f18a47dc5d21",
      "item": {
        "type": "paragraph",
        "id": "69c4f18a47dc5d21",
        "text": "evancz/elm-todomvc [https://github.com/evancz/elm-todomvc github]"
      },
      "after": "355be983cf749972",
      "date": 1682494918748
    },
    {
      "type": "edit",
      "id": "355be983cf749972",
      "item": {
        "type": "paragraph",
        "id": "355be983cf749972",
        "text": "Todo app login [https://elm-pages-todos.netlify.app/ site]"
      },
      "date": 1682495021243
    },
    {
      "type": "edit",
      "id": "355be983cf749972",
      "item": {
        "type": "paragraph",
        "id": "355be983cf749972",
        "text": "Todo app login [https://elm-pages-todos.netlify.app/ site], [https://todomvc.com/ site]"
      },
      "date": 1682495080296
    },
    {
      "type": "edit",
      "id": "355be983cf749972",
      "item": {
        "type": "paragraph",
        "id": "355be983cf749972",
        "text": "Todo app login [https://elm-pages-todos.netlify.app/ site], [https://todomvc.com/ site], [https://todomvc.com/examples/elm/ page]"
      },
      "date": 1682495102925
    },
    {
      "item": {
        "type": "factory",
        "id": "407122970f92822e"
      },
      "id": "407122970f92822e",
      "type": "add",
      "after": "cdeb061b261c03ea",
      "date": 1682496031758
    },
    {
      "type": "edit",
      "id": "407122970f92822e",
      "item": {
        "type": "pagefold",
        "id": "407122970f92822e",
        "text": "~"
      },
      "date": 1682496034930
    },
    {
      "item": {
        "type": "factory",
        "id": "66af6ca0e27e4190"
      },
      "id": "66af6ca0e27e4190",
      "type": "add",
      "after": "407122970f92822e",
      "date": 1682496036683
    },
    {
      "type": "edit",
      "id": "66af6ca0e27e4190",
      "item": {
        "type": "paragraph",
        "id": "66af6ca0e27e4190",
        "text": "dillonkearns\n  8:15 PM\nHey folks, I just released a new version of the elm-pages v3 beta that integrates my new elm-form package (https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/). I extracted that package from the elm-pages v3 API, but it's now usable as a standalone package as well. I'm quite pleased with how the integration worked out, it feels quite clean! And nice to be able to use the same API in vanilla projects - it just gets some superpowers when you use it in an elm-pages app, but you can use the same API to build your forms!\nSince the scope of elm-pages is so large, it's also nice to have it as a separate package as it's a bit more digestable as a separate package. We can also share Ellie snippets for examples of Forms.\nHere are the latest v3 package docs: https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/\nAnd the starter repo is up-to-date as well: https://github.com/dillonkearns/elm-pages-3-alpha-starter\nThe scaffold commands work with the latest Form API, too. Hope you enjoy!"
      },
      "date": 1682496038723
    },
    {
      "type": "edit",
      "id": "66af6ca0e27e4190",
      "item": {
        "type": "paragraph",
        "id": "66af6ca0e27e4190",
        "text": "dillonkearns\n  via [https://elmlang.slack.com/archives/CNSNETV37/p1681928149693739 slack]\nHey folks, I just released a new version of the elm-pages v3 beta that integrates my new elm-form package (https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/). I extracted that package from the elm-pages v3 API, but it's now usable as a standalone package as well. I'm quite pleased with how the integration worked out, it feels quite clean! And nice to be able to use the same API in vanilla projects - it just gets some superpowers when you use it in an elm-pages app, but you can use the same API to build your forms!\nSince the scope of elm-pages is so large, it's also nice to have it as a separate package as it's a bit more digestable as a separate package. We can also share Ellie snippets for examples of Forms.\nHere are the latest v3 package docs: https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/\nAnd the starter repo is up-to-date as well: https://github.com/dillonkearns/elm-pages-3-alpha-starter\nThe scaffold commands work with the latest Form API, too. Hope you enjoy!"
      },
      "date": 1682496064887
    },
    {
      "type": "edit",
      "id": "66af6ca0e27e4190",
      "item": {
        "type": "markdown",
        "id": "66af6ca0e27e4190",
        "text": "dillonkearns\n  via [https://elmlang.slack.com/archives/CNSNETV37/p1681928149693739 slack]\nHey folks, I just released a new version of the elm-pages v3 beta that integrates my new elm-form package (https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/). I extracted that package from the elm-pages v3 API, but it's now usable as a standalone package as well. I'm quite pleased with how the integration worked out, it feels quite clean! And nice to be able to use the same API in vanilla projects - it just gets some superpowers when you use it in an elm-pages app, but you can use the same API to build your forms!\nSince the scope of elm-pages is so large, it's also nice to have it as a separate package as it's a bit more digestable as a separate package. We can also share Ellie snippets for examples of Forms.\nHere are the latest v3 package docs: https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/\nAnd the starter repo is up-to-date as well: https://github.com/dillonkearns/elm-pages-3-alpha-starter\nThe scaffold commands work with the latest Form API, too. Hope you enjoy!"
      },
      "date": 1682496727080
    },
    {
      "type": "edit",
      "id": "66af6ca0e27e4190",
      "item": {
        "type": "markdown",
        "id": "66af6ca0e27e4190",
        "text": "⇒ [[Dillon Kearns]]\n  via [https://elmlang.slack.com/archives/CNSNETV37/p1681928149693739 slack]\nHey folks, I just released a new version of the elm-pages v3 beta that integrates my new elm-form package (https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/). I extracted that package from the elm-pages v3 API, but it's now usable as a standalone package as well. I'm quite pleased with how the integration worked out, it feels quite clean! And nice to be able to use the same API in vanilla projects - it just gets some superpowers when you use it in an elm-pages app, but you can use the same API to build your forms!\nSince the scope of elm-pages is so large, it's also nice to have it as a separate package as it's a bit more digestable as a separate package. We can also share Ellie snippets for examples of Forms.\nHere are the latest v3 package docs: https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/\nAnd the starter repo is up-to-date as well: https://github.com/dillonkearns/elm-pages-3-alpha-starter\nThe scaffold commands work with the latest Form API, too. Hope you enjoy!"
      },
      "date": 1682497838060
    },
    {
      "item": {
        "type": "factory",
        "id": "795a26fd919b6d81"
      },
      "id": "795a26fd919b6d81",
      "type": "add",
      "after": "66af6ca0e27e4190",
      "date": 1682497889612
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "paragraph",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources\n\n    elm-pages Docs Site\n    elm-pages Elm API Docs\n    Quick start repo (live site hosted here)\n    Introducing elm-pages blog post\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682497890799
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "paragraph",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n    elm-pages Elm API Docs\n    Quick start repo (live site hosted here)\n    Introducing elm-pages blog post\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682497915709
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "markdown",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n    elm-pages Elm API Docs\n    Quick start repo (live site hosted here)\n    Introducing elm-pages blog post\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682497916900
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "markdown",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n* elm-pages Elm API [https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/ docs]\n    Quick start repo (live site hosted here)\n    Introducing elm-pages blog post\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682497951926
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "markdown",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n* elm-pages Elm API [https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/ docs]\n* Quick start [https://github.com/dillonkearns/elm-pages-starter repo] (live site hosted here)\n    Introducing elm-pages blog post\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682497989730
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "markdown",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n* elm-pages Elm API [https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/ docs]\n* Quick start [https://github.com/dillonkearns/elm-pages-starter repo] (live site hosted [https://elm-pages-starter.netlify.app/ here])\n    Introducing elm-pages blog post\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682498013365
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "markdown",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/ page]\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n* elm-pages Elm API [https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/ docs]\n* Quick start [https://github.com/dillonkearns/elm-pages-starter repo] (live site hosted [https://elm-pages-starter.netlify.app/ here])\n    Introducing elm-pages blog post\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682498065985
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "markdown",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/ page]\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n* elm-pages Elm API [https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/ docs]\n* Quick start [https://github.com/dillonkearns/elm-pages-starter repo] (live site hosted [https://elm-pages-starter.netlify.app/ here])\n* Introducing elm-pages blog [https://elm-pages.com/blog/introducing-elm-pages/ post]]\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682498089622
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "markdown",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/ page]\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n* elm-pages Elm API [https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/ docs]\n* Quick start [https://github.com/dillonkearns/elm-pages-starter repo] (live site hosted [https://elm-pages-starter.netlify.app/ here])\n* Introducing elm-pages blog [https://elm-pages.com/blog/introducing-elm-pages/ post]\n    examples folder (includes https://elm-pages.com site source)\n"
      },
      "date": 1682498095975
    },
    {
      "type": "edit",
      "id": "795a26fd919b6d81",
      "item": {
        "type": "markdown",
        "id": "795a26fd919b6d81",
        "text": "Getting Started Resources [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/ page]\n\n* elm-pages Docs [https://elm-pages.com/docs/ site]\n* elm-pages Elm API [https://package.elm-lang.org/packages/dillonkearns/elm-pages/latest/ docs]\n* Quick start [https://github.com/dillonkearns/elm-pages-starter repo] (live site hosted [https://elm-pages-starter.netlify.app/ here])\n* Introducing elm-pages blog [https://elm-pages.com/blog/introducing-elm-pages/ post]\n* examples folder [https://github.com/dillonkearns/elm-pages/tree/master/examples github] (includes https://elm-pages.com site source)\n"
      },
      "date": 1682498127367
    },
    {
      "item": {
        "type": "factory",
        "id": "3b4a75ab27170ad4"
      },
      "id": "3b4a75ab27170ad4",
      "type": "add",
      "after": "795a26fd919b6d81",
      "date": 1682499322500
    },
    {
      "type": "edit",
      "id": "3b4a75ab27170ad4",
      "item": {
        "type": "paragraph",
        "id": "3b4a75ab27170ad4",
        "text": "⇒"
      },
      "date": 1682499329173
    },
    {
      "type": "edit",
      "id": "3b4a75ab27170ad4",
      "item": {
        "type": "paragraph",
        "id": "3b4a75ab27170ad4",
        "text": "⇒ [[Conduit]]"
      },
      "date": 1682499339241
    },
    {
      "item": {
        "type": "factory",
        "id": "e934454502f6539d"
      },
      "id": "e934454502f6539d",
      "type": "add",
      "after": "3b4a75ab27170ad4",
      "date": 1682500491284
    },
    {
      "type": "edit",
      "id": "e934454502f6539d",
      "item": {
        "type": "reference",
        "id": "e934454502f6539d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-pages-realworld",
        "title": "elm-pages-realworld",
        "text": "[[Realworld]] implementation with [[elm-pages]] v3. [https://github.com/dillonkearns/elm-pages-realworld/ github], [https://realworld.elm-spa.dev/ site]"
      },
      "date": 1682500493306
    },
    {
      "item": {
        "type": "factory",
        "id": "895e953747b2c310"
      },
      "id": "895e953747b2c310",
      "type": "add",
      "after": "e934454502f6539d",
      "date": 1682502025380
    },
    {
      "type": "edit",
      "id": "895e953747b2c310",
      "item": {
        "type": "code",
        "id": "895e953747b2c310",
        "text": "Uncaught TypeError: can't access property \"innerHTML\", document.getElementById(...) is null\n    d http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n    t http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n    t http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n    m http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n    <anonymous> http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\nindex-cb9efa99.js:1:1067\n    d http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n    t http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n    (Async: EventListener.handleEvent)\n    t http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n    m http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n    <anonymous> http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1\n"
      },
      "date": 1682502027153
    },
    {
      "type": "edit",
      "id": "895e953747b2c310",
      "item": {
        "type": "code",
        "id": "895e953747b2c310",
        "text": "Uncaught TypeError: can't access property \"innerHTML\", document.getElementById(...) is null\n    […] http://conduit.dreyeck.ch/assets/home/index-cb9efa99.js:1"
      },
      "date": 1682502095886
    },
    {
      "type": "edit",
      "id": "e934454502f6539d",
      "item": {
        "type": "reference",
        "id": "e934454502f6539d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-pages-realworld",
        "title": "elm-pages-realworld",
        "text": "[[Realworld]] implementation with [[elm-pages]] v3. [https://github.com/dillonkearns/elm-pages-realworld/ github], [https://elm-pages-realworld.netlify.app/ site]"
      },
      "date": 1682502980773
    },
    {
      "type": "remove",
      "id": "895e953747b2c310",
      "date": 1682503538655
    },
    {
      "item": {
        "type": "factory",
        "id": "1eac1a4ecca60965"
      },
      "id": "1eac1a4ecca60965",
      "type": "add",
      "after": "e934454502f6539d",
      "date": 1682503540015
    },
    {
      "type": "edit",
      "id": "1eac1a4ecca60965",
      "item": {
        "type": "paragraph",
        "id": "1eac1a4ecca60965",
        "text": " ryannhg /\nelm-spa-realworld "
      },
      "date": 1682503542484
    },
    {
      "type": "edit",
      "id": "1eac1a4ecca60965",
      "item": {
        "type": "paragraph",
        "id": "1eac1a4ecca60965",
        "text": " ryannhg /\nelm-spa-realworld [https://github.com/ryannhg/elm-spa-realworld github], "
      },
      "date": 1682503558603
    },
    {
      "type": "edit",
      "id": "1eac1a4ecca60965",
      "item": {
        "type": "paragraph",
        "id": "1eac1a4ecca60965",
        "text": " ryannhg /\nelm-spa-realworld [https://github.com/ryannhg/elm-spa-realworld github], [https://realworld.elm-spa.dev/ site]"
      },
      "date": 1682503567503
    },
    {
      "item": {
        "type": "factory",
        "id": "b0fe860034018a9c"
      },
      "id": "b0fe860034018a9c",
      "type": "add",
      "after": "1eac1a4ecca60965",
      "date": 1682507879981
    },
    {
      "type": "edit",
      "id": "b0fe860034018a9c",
      "item": {
        "type": "pagefold",
        "id": "b0fe860034018a9c",
        "text": "~"
      },
      "date": 1682507883304
    },
    {
      "item": {
        "type": "factory",
        "id": "1629a52bb8569c3a"
      },
      "id": "1629a52bb8569c3a",
      "type": "add",
      "after": "b0fe860034018a9c",
      "date": 1682507885376
    },
    {
      "type": "edit",
      "id": "1629a52bb8569c3a",
      "item": {
        "type": "paragraph",
        "id": "1629a52bb8569c3a",
        "text": "Artificial Intelligence and Machine Learning Lab"
      },
      "date": 1682507889002
    },
    {
      "type": "edit",
      "id": "1629a52bb8569c3a",
      "item": {
        "type": "paragraph",
        "id": "1629a52bb8569c3a",
        "text": "Artificial Intelligence and Machine Learning Lab [https://ml-research.github.io site]"
      },
      "date": 1682507902533
    },
    {
      "item": {
        "type": "factory",
        "id": "af1d8804e3b5c355"
      },
      "id": "af1d8804e3b5c355",
      "type": "add",
      "after": "1629a52bb8569c3a",
      "date": 1682508014038
    },
    {
      "type": "edit",
      "id": "af1d8804e3b5c355",
      "item": {
        "type": "paragraph",
        "id": "af1d8804e3b5c355",
        "text": "[[Compass]]"
      },
      "date": 1682508026122
    },
    {
      "type": "edit",
      "id": "af1d8804e3b5c355",
      "item": {
        "type": "paragraph",
        "id": "af1d8804e3b5c355",
        "text": "⇒ [[Compass]]"
      },
      "date": 1682508032495
    },
    {
      "id": "1629a52bb8569c3a",
      "type": "move",
      "order": [
        "e0d115999f27aa96",
        "0e3d674d81e60539",
        "0c33e81bebc57ba6",
        "66db100b075008d3",
        "1ee21cc7ea480b0e",
        "d2bf74f6e0ce1c3c",
        "3adba4fc93e4a86c",
        "717af21ce097453e",
        "b6baa467aa64409a",
        "edc09bf275ce8de2",
        "1a6376e0cc10ffa7",
        "0fb77cb44a60ee99",
        "5ee93c93f6ec6ad5",
        "0a87947d3e1123c6",
        "82d407d72af066ac",
        "c046cfa83f1e2293",
        "355be983cf749972",
        "69c4f18a47dc5d21",
        "2bd28add49d23277",
        "66b1548e7d6b316d",
        "9726db13a813a653",
        "aae6d601c73b30dc",
        "8bcc983ce6b5cbd3",
        "fc621f77c9f54b33",
        "ef498fee0ab8e1a4",
        "d2979be738afce7f",
        "a5a467460beb6a5d",
        "d09faefafe7a7fce",
        "5ecb144da38dc8ac",
        "cdeb061b261c03ea",
        "407122970f92822e",
        "66af6ca0e27e4190",
        "795a26fd919b6d81",
        "3b4a75ab27170ad4",
        "e934454502f6539d",
        "1eac1a4ecca60965",
        "b0fe860034018a9c",
        "af1d8804e3b5c355",
        "1629a52bb8569c3a"
      ],
      "date": 1682508034148
    },
    {
      "item": {
        "type": "factory",
        "id": "28e1dfe3183b58f2"
      },
      "id": "28e1dfe3183b58f2",
      "type": "add",
      "after": "1629a52bb8569c3a",
      "date": 1682508143140
    },
    {
      "id": "28e1dfe3183b58f2",
      "type": "move",
      "order": [
        "e0d115999f27aa96",
        "0e3d674d81e60539",
        "0c33e81bebc57ba6",
        "66db100b075008d3",
        "1ee21cc7ea480b0e",
        "d2bf74f6e0ce1c3c",
        "3adba4fc93e4a86c",
        "717af21ce097453e",
        "b6baa467aa64409a",
        "edc09bf275ce8de2",
        "1a6376e0cc10ffa7",
        "0fb77cb44a60ee99",
        "5ee93c93f6ec6ad5",
        "0a87947d3e1123c6",
        "82d407d72af066ac",
        "c046cfa83f1e2293",
        "355be983cf749972",
        "69c4f18a47dc5d21",
        "2bd28add49d23277",
        "66b1548e7d6b316d",
        "9726db13a813a653",
        "aae6d601c73b30dc",
        "8bcc983ce6b5cbd3",
        "fc621f77c9f54b33",
        "ef498fee0ab8e1a4",
        "d2979be738afce7f",
        "a5a467460beb6a5d",
        "d09faefafe7a7fce",
        "5ecb144da38dc8ac",
        "cdeb061b261c03ea",
        "407122970f92822e",
        "66af6ca0e27e4190",
        "795a26fd919b6d81",
        "3b4a75ab27170ad4",
        "e934454502f6539d",
        "1eac1a4ecca60965",
        "b0fe860034018a9c",
        "af1d8804e3b5c355",
        "28e1dfe3183b58f2",
        "1629a52bb8569c3a"
      ],
      "date": 1682508145419
    },
    {
      "type": "edit",
      "id": "28e1dfe3183b58f2",
      "item": {
        "type": "paragraph",
        "id": "28e1dfe3183b58f2",
        "text": "Haben Computer Vorurteile?42 - Die Antwort auf fast alles"
      },
      "date": 1682508146569
    },
    {
      "type": "edit",
      "id": "28e1dfe3183b58f2",
      "item": {
        "type": "paragraph",
        "id": "28e1dfe3183b58f2",
        "text": "Haben Computer Vorurteile?42 - Die Antwort auf fast alles [https://www.arte.tv/de/videos/101938-008-A/haben-computer-vorurteile/ page]"
      },
      "date": 1682508158828
    },
    {
      "type": "edit",
      "id": "28e1dfe3183b58f2",
      "item": {
        "type": "paragraph",
        "id": "28e1dfe3183b58f2",
        "text": "Haben Computer Vorurteile?42 - Die Antwort auf fast alles [https://www.arte.tv/de/videos/101938-008-A/haben-computer-vorurteile/ page] (23:30)"
      },
      "date": 1682508225184
    },
    {
      "type": "edit",
      "id": "28e1dfe3183b58f2",
      "item": {
        "type": "paragraph",
        "id": "28e1dfe3183b58f2",
        "text": "Haben Computer Vorurteile?42 - Die Antwort auf fast alles [https://www.arte.tv/de/videos/101938-008-A/haben-computer-vorurteile/ page] (23:30) [[Kristian Kersting]]"
      },
      "date": 1682508237558
    },
    {
      "item": {
        "type": "factory",
        "id": "60c0e47afe260231"
      },
      "id": "60c0e47afe260231",
      "type": "add",
      "after": "1629a52bb8569c3a",
      "date": 1682508465634
    },
    {
      "type": "edit",
      "id": "60c0e47afe260231",
      "item": {
        "type": "paragraph",
        "id": "60c0e47afe260231",
        "text": "[[Katharina Zweig]]"
      },
      "date": 1682508472987
    },
    {
      "type": "edit",
      "id": "28e1dfe3183b58f2",
      "item": {
        "type": "paragraph",
        "id": "28e1dfe3183b58f2",
        "text": "Haben Computer Vorurteile?42 - Die Antwort auf fast alles [https://www.arte.tv/de/videos/101938-008-A/haben-computer-vorurteile/ page] (23:30) ⇒ [[Kristian Kersting]]"
      },
      "date": 1682508479468
    },
    {
      "type": "edit",
      "id": "60c0e47afe260231",
      "item": {
        "type": "paragraph",
        "id": "60c0e47afe260231",
        "text": "⇒ [[Katharina Zweig]]"
      },
      "date": 1682508541151
    },
    {
      "type": "edit",
      "id": "60c0e47afe260231",
      "item": {
        "type": "paragraph",
        "id": "60c0e47afe260231",
        "text": "⇒ [[Katharina Zweig]] [https://aalab.cs.uni-kl.de/gruppe/zweig/ page]"
      },
      "date": 1682508559004
    },
    {
      "item": {
        "type": "factory",
        "id": "4f57ad722a8ad9f8"
      },
      "id": "4f57ad722a8ad9f8",
      "type": "add",
      "after": "60c0e47afe260231",
      "date": 1682508570475
    },
    {
      "type": "edit",
      "id": "4f57ad722a8ad9f8",
      "item": {
        "type": "paragraph",
        "id": "4f57ad722a8ad9f8",
        "text": "Ein augenöffnender Artikel wurde von Professor Carter Butts 2009 unter dem Titel \"Revisiting the Foundations of Social Network Analysis\" veröffentlicht. "
      },
      "date": 1682508573461
    },
    {
      "item": {
        "type": "factory",
        "id": "36fcd104abd55959"
      },
      "id": "36fcd104abd55959",
      "type": "add",
      "after": "4f57ad722a8ad9f8",
      "date": 1682510357855
    },
    {
      "type": "edit",
      "id": "36fcd104abd55959",
      "item": {
        "type": "audio",
        "id": "36fcd104abd55959",
        "text": "https://archive.org/download/dasglasperlenspiel1/Das%20Glasperlenspiel%201.mp3"
      },
      "date": 1682510362796
    },
    {
      "item": {
        "type": "factory",
        "id": "49801c5134237b31"
      },
      "id": "49801c5134237b31",
      "type": "add",
      "after": "36fcd104abd55959",
      "date": 1682510565784
    },
    {
      "type": "edit",
      "id": "49801c5134237b31",
      "item": {
        "type": "paragraph",
        "id": "49801c5134237b31",
        "text": "\nHESSE, Hermann, 1943. Das Glasperlenspiel: Versuch einer Lebensbeschreibung des Magister Ludi Josef Knecht samt Knechts hinterlassenen Schriften. . Frankfurt/Main: Suhrkamp. Suhrkamp Taschenbuch, 79. ISBN 978-3-518-36579-3. \n"
      },
      "date": 1682510569958
    },
    {
      "type": "edit",
      "id": "36fcd104abd55959",
      "item": {
        "type": "audio",
        "id": "36fcd104abd55959",
        "text": "https://archive.org/download/dasglasperlenspiel1/Das%20Glasperlenspiel%201.mp3\nDas Glasperlenspiel 1\nby Hermann Hesse"
      },
      "date": 1682510640883
    },
    {
      "id": "49801c5134237b31",
      "type": "remove",
      "removedTo": {
        "page": "Glasperlenspiel"
      },
      "date": 1682510654577
    },
    {
      "item": {
        "type": "factory",
        "id": "e5f2b57e95345ce0"
      },
      "id": "e5f2b57e95345ce0",
      "type": "add",
      "after": "36fcd104abd55959",
      "date": 1682510712317
    },
    {
      "type": "edit",
      "id": "e5f2b57e95345ce0",
      "item": {
        "type": "reference",
        "id": "e5f2b57e95345ce0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "glasperlenspiel",
        "title": "Glasperlenspiel",
        "text": "HESSE, Hermann, 1943/1972. Das Glasperlenspiel: Versuch einer Lebensbeschreibung des Magister Ludi Josef Knecht samt Knechts hinterlassenen Schriften.  Frankfurt/Main: Suhrkamp. Suhrkamp Taschenbuch, 79. ISBN 978-3-518-36579-3."
      },
      "date": 1682510715210
    },
    {
      "id": "36fcd104abd55959",
      "type": "remove",
      "removedTo": {
        "page": "Glasperlenspiel"
      },
      "date": 1682510720443
    },
    {
      "item": {
        "type": "factory",
        "id": "bb3218940a1a98c0"
      },
      "id": "bb3218940a1a98c0",
      "type": "add",
      "after": "e5f2b57e95345ce0",
      "date": 1682513038956
    },
    {
      "type": "edit",
      "id": "bb3218940a1a98c0",
      "item": {
        "type": "paragraph",
        "id": "bb3218940a1a98c0",
        "text": " […] Beliebte Inhalte solcher Aufsätze waren Anekdoten aus dem Leben berühmter Männer und Frauen und deren Briefwechsel, sie hießen etwa «Friedrich Nietzsche und die Frauenmode um 1870» oder «Die Lieblingsspeisen des Komponisten Rossini» oder «Die Rolle des Schoßhundes im Leben großer Kurtisanen» und ähnlich. Ferner liebte man historisierende Betrachtungen über aktuelle Gesprächsstoffe der Wohlhabenden, etwa «Der Traum von der künstlichen Herstellung des Goldes im Lauf der Jahrhunderte» oder «Die Versuche zur chemisch-physikalischen Beeinflussung der Witterung» und hundert ähnliche Dinge. Lesen wir die von Ziegenhalß angeführten Titel solcher Plaudereien, so gilt unsre Befremdung weniger dem Umstande, daß es Menschen gab, welche sie als tägliche Lektüre verschlangen, als vielmehr der Tatsache, daß Autoren von Ruf und Rang und guter Vorbildung diesen Riesenverbrauch an nichtigen Interessantheiten «bedienen» halfen, wie bezeichnenderweise der Ausdruck dafür lautete: der Ausdruck bezeichnet übrigens auch das damalige Verhältnis des Menschen zur Maschine. […]"
      },
      "date": 1682513040703
    },
    {
      "item": {
        "type": "factory",
        "id": "c532be76eba98079"
      },
      "id": "c532be76eba98079",
      "type": "add",
      "after": "bb3218940a1a98c0",
      "date": 1682513054876
    },
    {
      "type": "edit",
      "id": "c532be76eba98079",
      "item": {
        "type": "paragraph",
        "id": "c532be76eba98079",
        "text": " [...] Popular contents of such essays were anecdotes from the lives of famous men and women and their correspondence, they were called, for example, \"Friedrich Nietzsche and women's fashion around 1870\" or \"The favorite foods of the composer Rossini\" or \"The role of the lapdog in the lives of great courtesans\" and similar. Furthermore, one loved historicizing reflections on current topics of conversation of the wealthy, such as \"The dream of the artificial production of gold over the centuries\" or \"The experiments on the chemical-physical influence on the weather\" and a hundred similar things. If we read the titles of such chit-chat mentioned by Ziegenhalß, we are not so much astonished by the fact that there were people who devoured them as daily reading, but rather by the fact that authors of reputation and rank and good education helped to \"serve\" this huge consumption of trivial interesting things, as the expression for it was characteristically: the expression, by the way, also describes the relationship of man to the machine at that time. [...]"
      },
      "date": 1682513056523
    },
    {
      "type": "edit",
      "id": "bb3218940a1a98c0",
      "item": {
        "type": "paragraph",
        "id": "bb3218940a1a98c0",
        "text": " […] Beliebte Inhalte solcher Aufsätze waren Anekdoten aus dem Leben berühmter Männer und Frauen und deren Briefwechsel, sie hießen etwa «Friedrich Nietzsche und die Frauenmode um 1870» oder «Die Lieblingsspeisen des Komponisten Rossini» oder «Die Rolle des Schoßhundes im Leben großer Kurtisanen» und ähnlich. Ferner liebte man historisierende Betrachtungen über aktuelle Gesprächsstoffe der Wohlhabenden, etwa «Der Traum von der künstlichen Herstellung des Goldes im Lauf der Jahrhunderte» oder «Die Versuche zur chemisch-physikalischen Beeinflussung der Witterung» und hundert ähnliche Dinge. Lesen wir die von Ziegenhalß angeführten Titel solcher Plaudereien, so gilt unsre Befremdung weniger dem Umstande, daß es Menschen gab, welche sie als tägliche Lektüre verschlangen, als vielmehr der Tatsache, daß Autoren von Ruf und Rang und guter Vorbildung diesen Riesenverbrauch an nichtigen Interessantheiten «[[bedienen]]» halfen, wie bezeichnenderweise der Ausdruck dafür lautete: der Ausdruck bezeichnet übrigens auch das damalige Verhältnis des Menschen zur Maschine. […]"
      },
      "date": 1682513076738
    },
    {
      "item": {
        "type": "factory",
        "id": "1a53eeb0c5e9d9e7"
      },
      "id": "1a53eeb0c5e9d9e7",
      "type": "add",
      "after": "c532be76eba98079",
      "date": 1682513560462
    },
    {
      "type": "edit",
      "id": "1a53eeb0c5e9d9e7",
      "item": {
        "type": "paragraph",
        "id": "1a53eeb0c5e9d9e7",
        "text": "[…]Zeitweise besonders beliebt waren die Befragungen bekannter Persönlichkeiten über Tagesfragen, welchen Ziegenhalß ein eigenes Kapitel widmet und bei welchen man zum Beispiel namhafte Chemiker oder Klaviervirtuosen sich über Politik, beliebte Schauspieler, Tänzer, Turner, Flieger oder auch Dichter sich über Nutzen und Nachteile des Junggesellentums, über die mutmaßlichen Ursachen von Finanzkrisen und so weiter äußern ließ. Es kam dabei einzig darauf an, einen bekannten Namen mit einem gerade aktuellen Thema zusammenzubringen: man lese bei Ziegenhalß die zum Teil frappanten Beispiele nach, er führt Hunderte an. […]"
      },
      "date": 1682513562043
    },
    {
      "type": "edit",
      "id": "1a53eeb0c5e9d9e7",
      "item": {
        "type": "paragraph",
        "id": "1a53eeb0c5e9d9e7",
        "text": "[…] Zeitweise besonders beliebt waren die Befragungen bekannter Persönlichkeiten über Tagesfragen, welchen Ziegenhalß ein eigenes Kapitel widmet und bei welchen man zum Beispiel namhafte Chemiker oder Klaviervirtuosen sich über Politik, beliebte Schauspieler, Tänzer, Turner, Flieger oder auch Dichter sich über Nutzen und Nachteile des Junggesellentums, über die mutmaßlichen Ursachen von Finanzkrisen und so weiter äußern ließ. Es kam dabei einzig darauf an, einen bekannten Namen mit einem gerade aktuellen Thema zusammenzubringen: man lese bei Ziegenhalß die zum Teil frappanten Beispiele nach, er führt Hunderte an. […]"
      },
      "date": 1682513572552
    },
    {
      "item": {
        "type": "factory",
        "id": "26f6dcdddc095a71"
      },
      "id": "26f6dcdddc095a71",
      "type": "add",
      "after": "1a53eeb0c5e9d9e7",
      "date": 1682513578264
    },
    {
      "type": "edit",
      "id": "26f6dcdddc095a71",
      "item": {
        "type": "paragraph",
        "id": "26f6dcdddc095a71",
        "text": "[...] At times, the questioning of well-known personalities about questions of the day, to which Ziegenhalß devotes a separate chapter, was particularly popular, and in which, for example, well-known chemists or piano virtuosos were asked to comment on politics, popular actors, dancers, gymnasts, aviators, or even poets on the benefits and disadvantages of bachelorhood, on the presumed causes of financial crises, and so on. The only thing that mattered was to bring together a well-known name with a current topic: one can read in Ziegenhalß the sometimes striking examples, he cites hundreds. [...]"
      },
      "date": 1682513580258
    },
    {
      "item": {
        "type": "factory",
        "id": "367f53f893a50b57"
      },
      "id": "367f53f893a50b57",
      "type": "add",
      "after": "26f6dcdddc095a71",
      "date": 1682515724929
    },
    {
      "type": "edit",
      "id": "367f53f893a50b57",
      "item": {
        "type": "paragraph",
        "id": "367f53f893a50b57",
        "text": "⇒ [[Docta Ignorantia]]"
      },
      "date": 1682515738973
    },
    {
      "item": {
        "type": "factory",
        "id": "b69b438c74f2b602"
      },
      "id": "b69b438c74f2b602",
      "type": "add",
      "after": "367f53f893a50b57",
      "date": 1682523694787
    },
    {
      "type": "edit",
      "id": "b69b438c74f2b602",
      "item": {
        "type": "code",
        "id": "b69b438c74f2b602",
        "text": "pageDataBase64:document.getElementById(\"__ELM_PAGES_BYTES_DATA__\").innerHTML,userFlags:l.flags()}});return "
      },
      "date": 1682523697978
    },
    {
      "item": {
        "type": "factory",
        "id": "b3a934492900ab22"
      },
      "id": "b3a934492900ab22",
      "type": "add",
      "after": "b69b438c74f2b602",
      "date": 1682523704294
    },
    {
      "type": "edit",
      "id": "b3a934492900ab22",
      "item": {
        "type": "pagefold",
        "id": "b3a934492900ab22",
        "text": "~"
      },
      "date": 1682523707518
    },
    {
      "id": "b3a934492900ab22",
      "type": "move",
      "order": [
        "e0d115999f27aa96",
        "0e3d674d81e60539",
        "0c33e81bebc57ba6",
        "66db100b075008d3",
        "1ee21cc7ea480b0e",
        "d2bf74f6e0ce1c3c",
        "3adba4fc93e4a86c",
        "717af21ce097453e",
        "b6baa467aa64409a",
        "edc09bf275ce8de2",
        "1a6376e0cc10ffa7",
        "0fb77cb44a60ee99",
        "5ee93c93f6ec6ad5",
        "0a87947d3e1123c6",
        "82d407d72af066ac",
        "c046cfa83f1e2293",
        "355be983cf749972",
        "69c4f18a47dc5d21",
        "2bd28add49d23277",
        "66b1548e7d6b316d",
        "9726db13a813a653",
        "aae6d601c73b30dc",
        "8bcc983ce6b5cbd3",
        "fc621f77c9f54b33",
        "ef498fee0ab8e1a4",
        "d2979be738afce7f",
        "a5a467460beb6a5d",
        "d09faefafe7a7fce",
        "5ecb144da38dc8ac",
        "cdeb061b261c03ea",
        "407122970f92822e",
        "66af6ca0e27e4190",
        "795a26fd919b6d81",
        "3b4a75ab27170ad4",
        "e934454502f6539d",
        "1eac1a4ecca60965",
        "b0fe860034018a9c",
        "af1d8804e3b5c355",
        "28e1dfe3183b58f2",
        "1629a52bb8569c3a",
        "60c0e47afe260231",
        "4f57ad722a8ad9f8",
        "e5f2b57e95345ce0",
        "bb3218940a1a98c0",
        "c532be76eba98079",
        "1a53eeb0c5e9d9e7",
        "26f6dcdddc095a71",
        "367f53f893a50b57",
        "b3a934492900ab22",
        "b69b438c74f2b602"
      ],
      "date": 1682523710040
    },
    {
      "item": {
        "type": "factory",
        "id": "57191a8eee653355"
      },
      "id": "57191a8eee653355",
      "type": "add",
      "after": "b69b438c74f2b602",
      "date": 1682523815626
    },
    {
      "type": "edit",
      "id": "57191a8eee653355",
      "item": {
        "type": "paragraph",
        "id": "57191a8eee653355",
        "text": "Elm byte decoding within Http.get"
      },
      "date": 1682523817681
    },
    {
      "type": "edit",
      "id": "57191a8eee653355",
      "item": {
        "type": "paragraph",
        "id": "57191a8eee653355",
        "text": "Elm byte decoding within Http.get [https://stackoverflow.com/questions/60383450/elm-byte-decoding-within-http-get stackoverflow]"
      },
      "date": 1682523838922
    },
    {
      "type": "edit",
      "id": "57191a8eee653355",
      "item": {
        "type": "paragraph",
        "id": "57191a8eee653355",
        "text": "Elm byte decoding within Http.get [https://stackoverflow.com/questions/60383450/elm-byte-decoding-within-http-get stackoverflow], [https://package.elm-lang.org/packages/elm/bytes/latest/Bytes-Decode#strings page]"
      },
      "date": 1682523854292
    },
    {
      "type": "add",
      "id": "75bd5b97f0f7dfd7",
      "item": {
        "type": "paragraph",
        "id": "75bd5b97f0f7dfd7",
        "text": "\nprotocolbuffers/protobuf, 2020. Online. C++. Protocol Buffers. [Accessed 3 June 2020]. Available from: https://github.com/protocolbuffers/protobufProtocol Buffers\n"
      },
      "after": "57191a8eee653355",
      "date": 1682523932790
    },
    {
      "type": "edit",
      "id": "75bd5b97f0f7dfd7",
      "item": {
        "type": "paragraph",
        "id": "75bd5b97f0f7dfd7",
        "text": "protocolbuffers/protobuf, 2020. Online. C++. Protocol Buffers. [Accessed 3 June 2020]. Available from: https://github.com/protocolbuffers/protobufProtocol Buffers\n"
      },
      "date": 1682523998880
    },
    {
      "type": "add",
      "id": "fc0d9e9afaaa8ee5",
      "item": {
        "type": "paragraph",
        "id": "fc0d9e9afaaa8ee5",
        "text": "A vision for data interchange in Elm"
      },
      "after": "75bd5b97f0f7dfd7",
      "date": 1682524001015
    },
    {
      "type": "edit",
      "id": "fc0d9e9afaaa8ee5",
      "item": {
        "type": "paragraph",
        "id": "fc0d9e9afaaa8ee5",
        "text": "A vision for data interchange in Elm [https://gist.github.com/evancz/1c5f2cf34939336ecb79b97bb89d9da6#a-vision-for-data-interchange-in-elm gist]"
      },
      "date": 1682524024937
    },
    {
      "type": "add",
      "id": "2310bc5cf5e03241",
      "item": {
        "type": "paragraph",
        "id": "2310bc5cf5e03241",
        "text": "ProtoBuf decoding/encoding via Bytes.Decode.width?"
      },
      "after": "fc0d9e9afaaa8ee5",
      "date": 1682524097820
    },
    {
      "type": "edit",
      "id": "2310bc5cf5e03241",
      "item": {
        "type": "paragraph",
        "id": "2310bc5cf5e03241",
        "text": "ProtoBuf decoding/encoding via Bytes.Decode.width? [https://discourse.elm-lang.org/t/protobuf-decoding-encoding-via-bytes-decode-width/2670 discourse]"
      },
      "date": 1682524112419
    },
    {
      "type": "add",
      "id": "f9ab1c667c59544c",
      "item": {
        "type": "paragraph",
        "id": "f9ab1c667c59544c",
        "text": "Protocol Buffers using bytes: `elm-protocol-buffers`"
      },
      "after": "2310bc5cf5e03241",
      "date": 1682524123860
    },
    {
      "type": "edit",
      "id": "f9ab1c667c59544c",
      "item": {
        "type": "paragraph",
        "id": "f9ab1c667c59544c",
        "text": "Protocol Buffers using bytes: `elm-protocol-buffers` [https://discourse.elm-lang.org/t/protocol-buffers-using-bytes-elm-protocol-buffers/2873 discourse]"
      },
      "date": 1682524136171
    },
    {
      "item": {
        "type": "factory",
        "id": "09c2bca3bde8dfd0"
      },
      "id": "09c2bca3bde8dfd0",
      "type": "add",
      "after": "f9ab1c667c59544c",
      "date": 1682524998635
    },
    {
      "type": "edit",
      "id": "09c2bca3bde8dfd0",
      "item": {
        "type": "paragraph",
        "id": "09c2bca3bde8dfd0",
        "text": "Vite build warns: script can't be bundled without type=\"module\" attribute"
      },
      "date": 1682525000195
    },
    {
      "type": "edit",
      "id": "09c2bca3bde8dfd0",
      "item": {
        "type": "paragraph",
        "id": "09c2bca3bde8dfd0",
        "text": "Vite build warns: script can't be bundled without type=\"module\" attribute [https://stackoverflow.com/questions/70951072/vite-build-warns-script-cant-be-bundled-without-type-module-attribute stackoverflow]]"
      },
      "date": 1682525013648
    },
    {
      "type": "edit",
      "id": "09c2bca3bde8dfd0",
      "item": {
        "type": "paragraph",
        "id": "09c2bca3bde8dfd0",
        "text": "Vite build warns: script can't be bundled without type=\"module\" attribute [https://stackoverflow.com/questions/70951072/vite-build-warns-script-cant-be-bundled-without-type-module-attribute stackoverflow]"
      },
      "date": 1682525016324
    },
    {
      "item": {
        "type": "factory",
        "id": "7068ad1929ee973a"
      },
      "id": "7068ad1929ee973a",
      "type": "add",
      "after": "09c2bca3bde8dfd0",
      "date": 1682526443578
    },
    {
      "type": "edit",
      "id": "7068ad1929ee973a",
      "item": {
        "type": "pagefold",
        "id": "7068ad1929ee973a",
        "text": "~"
      },
      "date": 1682526446688
    },
    {
      "item": {
        "type": "factory",
        "id": "5e4bf94cb3be53be"
      },
      "id": "5e4bf94cb3be53be",
      "type": "add",
      "after": "7068ad1929ee973a",
      "date": 1682526448714
    },
    {
      "type": "edit",
      "id": "5e4bf94cb3be53be",
      "item": {
        "type": "paragraph",
        "id": "5e4bf94cb3be53be",
        "text": "Sean via [https://discord.com/channels/@me/869566842807652453/1100735566884122675 discord]"
      },
      "date": 1682526460584
    },
    {
      "type": "edit",
      "id": "5e4bf94cb3be53be",
      "item": {
        "type": "paragraph",
        "id": "5e4bf94cb3be53be",
        "text": "Sean via [https://discord.com/channels/@me/869566842807652453/1100735566884122675 discord], [https://github.com/seandenigris/My-People/commit/92079d8346d682d824fc457cb1ffa07ca81d60b5 github]"
      },
      "date": 1682526490559
    },
    {
      "item": {
        "type": "factory",
        "id": "2986b063b7e1a8e1"
      },
      "id": "2986b063b7e1a8e1",
      "type": "add",
      "after": "5e4bf94cb3be53be",
      "date": 1682526752912
    },
    {
      "type": "edit",
      "id": "2986b063b7e1a8e1",
      "item": {
        "type": "pagefold",
        "id": "2986b063b7e1a8e1",
        "text": "~"
      },
      "date": 1682526755743
    },
    {
      "item": {
        "type": "factory",
        "id": "142897c36e7daf80"
      },
      "id": "142897c36e7daf80",
      "type": "add",
      "after": "2986b063b7e1a8e1",
      "date": 1682526757600
    },
    {
      "type": "edit",
      "id": "142897c36e7daf80",
      "item": {
        "type": "code",
        "id": "142897c36e7daf80",
        "text": "[~/.wiki/conduit.dreyeck.ch/assets/home]$ cp template.html index.html"
      },
      "date": 1682526766051
    },
    {
      "item": {
        "type": "factory",
        "id": "9903636628c037ad"
      },
      "id": "9903636628c037ad",
      "type": "add",
      "after": "142897c36e7daf80",
      "date": 1682528494554
    },
    {
      "type": "edit",
      "id": "9903636628c037ad",
      "item": {
        "type": "paragraph",
        "id": "9903636628c037ad",
        "text": "Ralf Barkow\n  6:57 PM\nHi Dillon, I have a question about your RealWorld sample app, i.e. elm-pages-realworld. More specifically about the build process.\nMy intention is to use elm-pages as a container for a federated wiki page. The Federated Wiki offers the possibility (see Safe and Familiar Welcome) to provide a “index.html” style template in a reserved path to realize a custom home page. In my case, that would be http://conduit.dreyeck.ch/assets/home/index.html\nI create your Realworld app both on a Mac and on the NixOS server where I host my Federated Wiki farm, and create a symlink home -> elm-pages-realworld/dist/.\nDo I understand correctly that the build process does not create the index.html file, but that I have to create it myself based on the template.html file? My problem now is that I don’t understand how <!-- PLACEHOLDER_HEAD_AND_DATA --> is replaced by <script id=“__ELM_PAGES_BYTES_DATA__” type=“application/octet-stream”>...\nI can find an example of this construct in the dist directory only(?)  in the 404.html. When I copy this octet stream into my index.hml, I get “No route found for /____elm-pages-internal____/404 ...“.\nAm I doing something wrong and if so, what?"
      },
      "date": 1682528497335
    },
    {
      "type": "edit",
      "id": "9903636628c037ad",
      "item": {
        "type": "paragraph",
        "id": "9903636628c037ad",
        "text": "[[Ralf Barkow]]\n  via [https://elmlang.slack.com/archives/CNSNETV37/p1682528259748959 slack]\nHi Dillon, I have a question about your RealWorld sample app, i.e. elm-pages-realworld. More specifically about the build process.\nMy intention is to use elm-pages as a container for a federated wiki page. The Federated Wiki offers the possibility (see Safe and Familiar Welcome) to provide a “index.html” style template in a reserved path to realize a custom home page. In my case, that would be http://conduit.dreyeck.ch/assets/home/index.html\nI create your Realworld app both on a Mac and on the NixOS server where I host my Federated Wiki farm, and create a symlink home -> elm-pages-realworld/dist/.\nDo I understand correctly that the build process does not create the index.html file, but that I have to create it myself based on the template.html file? My problem now is that I don’t understand how <!-- PLACEHOLDER_HEAD_AND_DATA --> is replaced by <script id=“__ELM_PAGES_BYTES_DATA__” type=“application/octet-stream”>...\nI can find an example of this construct in the dist directory only(?)  in the 404.html. When I copy this octet stream into my index.hml, I get “No route found for /____elm-pages-internal____/404 ...“.\nAm I doing something wrong and if so, what?"
      },
      "date": 1682528538137
    },
    {
      "type": "edit",
      "id": "9903636628c037ad",
      "item": {
        "type": "paragraph",
        "id": "9903636628c037ad",
        "text": "[[Ralf Barkow]]\n  via [https://elmlang.slack.com/archives/CNSNETV37/p1682528259748959 slack]\nHi Dillon, I have a question about your RealWorld sample app, i.e. elm-pages-realworld. More specifically about the build process.\nMy intention is to use elm-pages as a container for a federated wiki page. The Federated Wiki offers the possibility (see Safe and Familiar Welcome) to provide a “index.html” style template in a reserved path to realize a custom home page. In my case, that would be http://conduit.dreyeck.ch/assets/home/index.html\n"
      },
      "date": 1682528565630
    },
    {
      "type": "add",
      "id": "5f1da3aecd695ad9",
      "item": {
        "type": "paragraph",
        "id": "5f1da3aecd695ad9",
        "text": "I create your Realworld app both on a Mac and on the NixOS server where I host my Federated Wiki farm, and create a symlink home -> elm-pages-realworld/dist/.\nDo I understand correctly that the build process does not create the index.html file, but that I have to create it myself based on the template.html file? My problem now is that I don’t understand how <!-- PLACEHOLDER_HEAD_AND_DATA --> is replaced by <script id=“__ELM_PAGES_BYTES_DATA__” type=“application/octet-stream”>...\nI can find an example of this construct in the dist directory only(?)  in the 404.html. When I copy this octet stream into my index.hml, I get “No route found for /____elm-pages-internal____/404 ...“.\nAm I doing something wrong and if so, what?"
      },
      "after": "9903636628c037ad",
      "date": 1682528566099
    },
    {
      "item": {
        "type": "factory",
        "id": "167dc56c26a47505"
      },
      "id": "167dc56c26a47505",
      "type": "add",
      "after": "5f1da3aecd695ad9",
      "date": 1682541609239
    },
    {
      "type": "edit",
      "id": "167dc56c26a47505",
      "item": {
        "type": "pagefold",
        "id": "167dc56c26a47505",
        "text": "~"
      },
      "date": 1682541613536
    },
    {
      "item": {
        "type": "factory",
        "id": "5a984593687b8f86"
      },
      "id": "5a984593687b8f86",
      "type": "add",
      "after": "167dc56c26a47505",
      "date": 1682541616483
    },
    {
      "type": "edit",
      "id": "5a984593687b8f86",
      "item": {
        "type": "paragraph",
        "id": "5a984593687b8f86",
        "text": "[https://fosstodon.org/@rgb/110266900752069275 post]"
      },
      "date": 1682541664194
    },
    {
      "type": "edit",
      "id": "5a984593687b8f86",
      "item": {
        "type": "paragraph",
        "id": "5a984593687b8f86",
        "text": "@marick If I understood the first part of your Foucault epsiode correctly, you are concerned with clarifying the notion of \"voluntary panoptism.\"\n\nFoucault explains this in the chapter on \"Panoptism\" with an architectural example. While sovereign power acts vertically from a center, disciplinary power spreads horizontally. It is organized decentrally, largely depersonalized, and operates from within as a system of reciprocal control and self-discipline. [https://fosstodon.org/@rgb/110266900752069275 post]"
      },
      "date": 1682541674968
    },
    {
      "type": "edit",
      "id": "5a984593687b8f86",
      "item": {
        "type": "paragraph",
        "id": "5a984593687b8f86",
        "text": "@marick If I understood the first part of your Foucault epsiode correctly, you are concerned with clarifying the notion of \"voluntary panoptism.\" [https://fosstodon.org/@rgb/110266900752069275 post]\n\nFoucault explains this in the chapter on \"Panoptism\" with an architectural example. While sovereign power acts vertically from a center, disciplinary power spreads horizontally. It is organized decentrally, largely depersonalized, and operates from within as a system of reciprocal control and self-discipline. "
      },
      "date": 1682541685523
    },
    {
      "type": "add",
      "id": "ad69a20fb8702d44",
      "item": {
        "type": "paragraph",
        "id": "ad69a20fb8702d44",
        "text": "Brian \"Podcast Persona\" Marick @marick@social.oddly-influenced.dev\n\n@rgb 2a. Bentham’s panopticon was a claim that undetectable observation would trick prisoners into observing themselves, which (in Prado’s terms) “can convert deliberate obedience of regulations into habitual compliance with norms. […] Habitual compliance itself converts to adoption or ‘internalization’ of those norms.”"
      },
      "after": "5a984593687b8f86",
      "date": 1682541763423
    },
    {
      "type": "add",
      "id": "3de55b5710b184eb",
      "item": {
        "type": "paragraph",
        "id": "3de55b5710b184eb",
        "text": "@marick Foucault first shows in a historical review of the late Middle Ages and the early modern period that in the fight against the plague and against leprosy two respectively very different coping strategies emerge. While leprosy – and increasingly poverty and criminality – are met with exclusion, \"disciplinary models\" of ordering space and surveillance emerge in the fight against plague.\n\nThe exclusion/inclusion distinction is central here."
      },
      "after": "ad69a20fb8702d44",
      "date": 1682541783374
    },
    {
      "type": "add",
      "id": "4a0b1d2c21ff98d9",
      "item": {
        "type": "paragraph",
        "id": "4a0b1d2c21ff98d9",
        "text": "@marick The idea of Jeremy Bentham, published in Dublin in 1787 under the title Panopticon, was not realized in the form proposed. Bentham assumes that broad sections of the population must be placed under surveillance so that they can be guided to lead meaningful, productive lives. In the tradition of the English utopians, he proposes a spatial solution: the grouping together of the lower classes concerned in buildings specially adapted to their respective problems."
      },
      "after": "3de55b5710b184eb",
      "date": 1682541811338
    },
    {
      "type": "add",
      "id": "511759744a5fb0e9",
      "item": {
        "type": "paragraph",
        "id": "511759744a5fb0e9",
        "text": "@marick The spectrum ranges from prisons to workhouses, manufactories and factories to poorhouses, from insane asylums and hospitals to schools."
      },
      "after": "4a0b1d2c21ff98d9",
      "date": 1682541839611
    },
    {
      "type": "add",
      "id": "4c8a54cce9b6267b",
      "item": {
        "type": "paragraph",
        "id": "4c8a54cce9b6267b",
        "text": "@marick The prototype for all these houses is characterized by an architectural ground plan and layout that is sophisticated down to the last detail: a ring of buildings in which work and life take place and which is to be designed in such a way that every occupant can be identified at any time, and a tower in the center from which overseers can observe every movement unnoticed."
      },
      "after": "511759744a5fb0e9",
      "date": 1682541851533
    },
    {
      "type": "add",
      "id": "7aabf3d4e2d151a8",
      "item": {
        "type": "paragraph",
        "id": "7aabf3d4e2d151a8",
        "text": "@marick Foucault interprets the so-called Panopticon in terms of power theory as \"a machine for divorcing the pair seeing/being seen: In the outer ring, one is seen completely without ever seeing; in the central tower, one sees everything without ever being seen\"."
      },
      "after": "4c8a54cce9b6267b",
      "date": 1682541876423
    },
    {
      "type": "add",
      "id": "1c1f39ffe5a56ac9",
      "item": {
        "type": "paragraph",
        "id": "1c1f39ffe5a56ac9",
        "text": "@marick Re:  vertically / horizontally \n\nAt this point, a reference to DP1 and DP2 from the episode with Trond Hjorteland @trondhjort might be helpful. I would think Foucault could be helpful in describing the tension between DP1 and DP2 and their emergence."
      },
      "after": "7aabf3d4e2d151a8",
      "date": 1682541899466
    },
    {
      "item": {
        "type": "factory",
        "id": "d576d906b0f56ed2"
      },
      "id": "d576d906b0f56ed2",
      "type": "add",
      "after": "1c1f39ffe5a56ac9",
      "date": 1682544010994
    },
    {
      "type": "edit",
      "id": "d576d906b0f56ed2",
      "item": {
        "type": "paragraph",
        "id": "d576d906b0f56ed2",
        "text": "@marick And to come full circle to the starting point of agile software development, see [[Code Style Reflects Organization]] for Robert Martin's view of code. It seems as if he separates the concepts in order to partition the people.\n\nHeavily partitioned code may be the way to go when it comes to predictability and monitoring developer progress. \n\nCf. Bentham's \"grouping together […] in buildings specially adapted to their respective problems.\""
      },
      "date": 1682544028912
    }
  ]
}