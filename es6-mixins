{
  "title": "ES6 Mixins",
  "story": [
    {
      "type": "markdown",
      "id": "79514f400ac5168e",
      "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on Web Components. Only interested in coding approaches that can be shared with other people. With emphasis on stylin and reuse.  [https://twitter.com/janmiksovsky page]\n"
    },
    {
      "type": "markdown",
      "id": "6a1c540791868ab2",
      "text": "Many web developers come to reuse through design. We look at his work for clarity on how to decompose to implement ES6 'strict mode'  [https://component.kitchen/ page]\n"
    },
    {
      "type": "markdown",
      "id": "ac725e271c43a304",
      "text": "Component.kitchen rewrote its backend server to rip out a popular templating language and replaced it with plain JavaScript functions. After language improvements in ES2015 [https://plus.google.com/+ComponentKitchen/posts/FzSPbtmkDjq page]"
    },
    {
      "type": "markdown",
      "id": "8ac1f0f93cbb908b",
      "text": "   "
    },
    {
      "type": "markdown",
      "id": "a70507a835ad8919",
      "text": "\n"
    },
    {
      "type": "markdown",
      "id": "9b63a50327f71498",
      "text": "On implementing web component mixins as functions [https://component.kitchen/blog/posts/implementing-web-component-mixins-as-functions page]"
    },
    {
      "type": "markdown",
      "id": "c838bf439e384812",
      "text": "- \"ES6 template strings let us easily embed HTML directly inside of JavaScript files, instead of putting JavaScript code inside of HTML files as we did with HTML Imports.\" "
    },
    {
      "type": "markdown",
      "id": "f54bd4aa72cfc5d2",
      "text": "- \"Both packaging formats can work, but given the need for JavaScript modules anyway, it seems worthwhile for us to see what we can build with modules alone. "
    },
    {
      "type": "markdown",
      "id": "4faec240dbc29f3d",
      "text": "- Stencil.js was introduced recently at the 2017 Polymer Summit. A look at Stencil.js [https://component.kitchen/blog/posts/a-look-at-stenciljs page]"
    },
    {
      "type": "markdown",
      "id": "73a8afdb74c4a367",
      "text": "- Service Workers have indeterminate lifetimes and I think the only way to wake them up is for them to receive a push notification.  [https://component.kitchen/blog/posts/can-service-workers-service-background-applications page]"
    },
    {
      "type": "markdown",
      "id": "81c62dd6ea6c48ca",
      "text": "Since the term \"framework\" can provoke strong negative reactions, authors of such code may actually care whether their code is labeled a framework or not. [https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense  page]"
    },
    {
      "type": "markdown",
      "id": "4b541d41fdfec579",
      "text": "- Google, for example, seems to take great pains to avoid describing its own Polymer project as a framework. They call it a \"library\", which sounds perhaps smaller or less threatening."
    },
    {
      "type": "markdown",
      "id": "8f49d1106e87c6ee",
      "text": "-  Polymer easily meets all of the above framework criteria. For example, Polymer's internal asynchronous task-scheduling infrastructure establishes the flow of control in a Polymer application, determining when to invoke component lifecycle callbacks and property observers. "
    },
    {
      "type": "markdown",
      "id": "c678890632c06691",
      "text": "- Polymer has begun to gain increasing recognition in the market, with special attention paid to its structured design process, allowing for an interoperable \"lego block\" structure [https://en.wikipedia.org/wiki/Polymer_(library) page]"
    },
    {
      "type": "pagefold",
      "id": "831d2ce13f415a8c",
      "text": "."
    },
    {
      "type": "markdown",
      "id": "2b27edc3f3104ea6",
      "text": "See [[Elix ES6 Mixins]]\n"
    },
    {
      "type": "markdown",
      "id": "9f4ad03dc823971b",
      "text": "After a little more inspection, there's still an awful lot of code.  Wonder if the reactive part is worth the effort.  Might be that what I really want is much simpler.  The Power of Web Components. [https://hacks.mozilla.org/2018/11/the-power-of-web-components/ article]\n"
    },
    {
      "type": "markdown",
      "id": "491aae8f0153e557",
      "text": "Shim for custom elements in browsers that aren't quite there yet\nhttps://github.com/webcomponents/custom-elements\n\nFound this article helpful... leaving it here for now.\nhttps://blog.sessionstack.com/how-javascript-works-under-the-hood-of-custom-elements-best-practices-on-building-reusable-e118e888de0c\n"
    },
    {
      "type": "markdown",
      "id": "0dd0ddeabb9e8cdb",
      "text": "Hybrid.js also eschews class-based inheritance when creating ES6 components.  [https://hybrids.js.org/ https://hybrids.js.org/]  On closer look at the source, this is still not what I'm looking for.\n"
    },
    {
      "type": "markdown",
      "id": "a9c0f392c14e928f",
      "text": "The source code for polymer's `lit-element` looks interesting. [https://github.com/Polymer/lit-element github]\n"
    },
    {
      "type": "markdown",
      "id": "e63d1564196c2455",
      "text": "Also interested in the example of `lit-element` hosted at glitch: [https://glitch.com/~hello-lit-element glitch]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "ES6 Mixins",
        "story": []
      },
      "date": 1513895561117
    },
    {
      "item": {
        "type": "factory",
        "id": "a70507a835ad8919"
      },
      "id": "a70507a835ad8919",
      "type": "add",
      "date": 1513895562726
    },
    {
      "type": "edit",
      "id": "a70507a835ad8919",
      "item": {
        "type": "markdown",
        "id": "a70507a835ad8919",
        "text": "ES6 template strings let us easily embed HTML directly inside of JavaScript files, instead of putting JavaScript code inside of HTML files as we did with HTML Imports. "
      },
      "date": 1513895595106
    },
    {
      "item": {
        "type": "factory",
        "id": "f54bd4aa72cfc5d2"
      },
      "id": "f54bd4aa72cfc5d2",
      "type": "add",
      "after": "a70507a835ad8919",
      "date": 1513895596785
    },
    {
      "type": "edit",
      "id": "f54bd4aa72cfc5d2",
      "item": {
        "type": "markdown",
        "id": "f54bd4aa72cfc5d2",
        "text": "Both packaging formats can work, but given the need for JavaScript modules anyway, it seems worthwhile for us to see what we can build with modules alone. One thing we miss: an equivalent of HTML Import's “document.currentScript” so that a module can load a resource from a path relative to the JavaScript source file."
      },
      "date": 1513895607625
    },
    {
      "item": {
        "type": "factory",
        "id": "8bfeb0e06830bb48"
      },
      "id": "8bfeb0e06830bb48",
      "type": "add",
      "after": "f54bd4aa72cfc5d2",
      "date": 1513895609021
    },
    {
      "type": "remove",
      "id": "8bfeb0e06830bb48",
      "date": 1513895614864
    },
    {
      "item": {
        "type": "factory",
        "id": "79514f400ac5168e"
      },
      "id": "79514f400ac5168e",
      "type": "add",
      "after": "f54bd4aa72cfc5d2",
      "date": 1513895627235
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an expert on polymer webcomponents, we looked at his work for clarity on how to decompose to implement ES6 'strict mode'.   "
      },
      "date": 1513895791176
    },
    {
      "type": "move",
      "order": [
        "79514f400ac5168e",
        "a70507a835ad8919",
        "f54bd4aa72cfc5d2"
      ],
      "id": "79514f400ac5168e",
      "date": 1513895793552
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an expert on polymer webcomponents, we looked at his work for clarity on how to decompose to implement ES6 'strict mode'\n"
      },
      "date": 1513895812599
    },
    {
      "type": "add",
      "id": "8ac1f0f93cbb908b",
      "item": {
        "type": "markdown",
        "id": "8ac1f0f93cbb908b",
        "text": "   "
      },
      "after": "79514f400ac5168e",
      "date": 1513895815662
    },
    {
      "type": "edit",
      "id": "f54bd4aa72cfc5d2",
      "item": {
        "type": "markdown",
        "id": "f54bd4aa72cfc5d2",
        "text": "Both packaging formats can work, but given the need for JavaScript modules anyway, it seems worthwhile for us to see what we can build with modules alone. One thing we miss: an equivalent of HTML Import's “document.currentScript” so that a module can load a resource from a path relative to the JavaScript source file. [https://component.kitchen/blog/posts/building-web-components-from-a-loose-framework-of-mixins page]"
      },
      "date": 1513895825672
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an expert at component.kitchen on polymer based and other webcomponents, we looked at his work for clarity on how to decompose to implement ES6 'strict mode' [https://component.kitchen/ page]\n"
      },
      "date": 1513895893922
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an expert at component.kitchen on polymer based and other web components. We look at his work for clarity on how to decompose to implement ES6 'strict mode'. [https://component.kitchen/ page]\n"
      },
      "date": 1513895922432
    },
    {
      "type": "edit",
      "id": "a70507a835ad8919",
      "item": {
        "type": "markdown",
        "id": "a70507a835ad8919",
        "text": "\"ES6 template strings let us easily embed HTML directly inside of JavaScript files, instead of putting JavaScript code inside of HTML files as we did with HTML Imports.\" "
      },
      "date": 1513895940735
    },
    {
      "type": "edit",
      "id": "f54bd4aa72cfc5d2",
      "item": {
        "type": "markdown",
        "id": "f54bd4aa72cfc5d2",
        "text": "\"Both packaging formats can work, but given the need for JavaScript modules anyway, it seems worthwhile for us to see what we can build with modules alone. One thing we miss: an equivalent of HTML Import's “document.currentScript” so that a module can load a resource from a path relative to the JavaScript source file.\"[https://component.kitchen/blog/posts/building-web-components-from-a-loose-framework-of-mixins page]"
      },
      "date": 1513895971876
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an expert at component.kitchen on polymer based and other web components. With emphasis on stylin and reuse. Many developers look at reuse this way. We look at his work for clarity on how to decompose to implement ES6 'strict mode'. [https://component.kitchen/ page]\n"
      },
      "date": 1513896215114
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on polymer based and other web components. With emphasis on stylin and reuse. Many developers look at reuse this way. We look at his work for clarity on how to decompose to implement ES6 'strict mode'. [https://component.kitchen/ page]\n"
      },
      "date": 1513896358100
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on polymer based and other web components. With emphasis on stylin and reuse. Many developers look at reuse this way. We look at his work for clarity on how to decompose to implement ES6 'strict mode'. [hhttps://component.kitchen// page]\n"
      },
      "date": 1513896407034
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on polymer based and other web components. With emphasis on stylin and reuse.\n"
      },
      "date": 1513896429682
    },
    {
      "type": "add",
      "id": "6a1c540791868ab2",
      "item": {
        "type": "markdown",
        "id": "6a1c540791868ab2",
        "text": "Many developers look at reuse this way. We look at his work for clarity on how to decompose to implement ES6 'strict mode'. [https://component.kitchen/ page]\n"
      },
      "after": "79514f400ac5168e",
      "date": 1513896443289
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on polymer based and other web components. With emphasis on stylin and reuse.[https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513896455352
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on polymer based and other web components. With emphasis on stylin and reuse.\n [https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513896473644
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on polymer based and other web components. With emphasis on stylin and reuse [https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513896492236
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on polymer and other web components. With emphasis on stylin and reuse [https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513901208839
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on web components. With emphasis on stylin and reuse. [https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513901248365
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on web components. With emphasis on stylin and reuse through polymer and other  [https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513901383250
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on Web Components. With emphasis on stylin and reuse through Polymer. An open-source JavaScript library for building web applications using Web Components.  [https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513901574486
    },
    {
      "type": "edit",
      "id": "6a1c540791868ab2",
      "item": {
        "type": "markdown",
        "id": "6a1c540791868ab2",
        "text": "Many web developers come to reuse through design. We look at his work for clarity on how to decompose to implement ES6 'strict mode' . [https://component.kitchen/ page]\n"
      },
      "date": 1513901695959
    },
    {
      "type": "edit",
      "id": "6a1c540791868ab2",
      "item": {
        "type": "markdown",
        "id": "6a1c540791868ab2",
        "text": "Many web developers come to reuse through design. We look at his work for clarity on how to decompose to implement ES6 'strict mode'  [https://component.kitchen/ page]\n"
      },
      "date": 1513901703135
    },
    {
      "type": "edit",
      "id": "a70507a835ad8919",
      "item": {
        "type": "markdown",
        "id": "a70507a835ad8919",
        "text": "From Jan \n"
      },
      "date": 1513901746619
    },
    {
      "type": "add",
      "id": "c838bf439e384812",
      "item": {
        "type": "markdown",
        "id": "c838bf439e384812",
        "text": "\"ES6 template strings let us easily embed HTML directly inside of JavaScript files, instead of putting JavaScript code inside of HTML files as we did with HTML Imports.\" "
      },
      "after": "a70507a835ad8919",
      "date": 1513901750074
    },
    {
      "type": "edit",
      "id": "a70507a835ad8919",
      "item": {
        "type": "markdown",
        "id": "a70507a835ad8919",
        "text": "From Jan: \n"
      },
      "date": 1513901757256
    },
    {
      "type": "edit",
      "id": "f54bd4aa72cfc5d2",
      "item": {
        "type": "markdown",
        "id": "f54bd4aa72cfc5d2",
        "text": "\"Both packaging formats can work, but given the need for JavaScript modules anyway, it seems worthwhile for us to see what we can build with modules alone. "
      },
      "date": 1513901815812
    },
    {
      "item": {
        "type": "factory",
        "id": "f4537c47f28dff02"
      },
      "id": "f4537c47f28dff02",
      "type": "add",
      "after": "f54bd4aa72cfc5d2",
      "date": 1513901818288
    },
    {
      "type": "remove",
      "id": "f4537c47f28dff02",
      "date": 1513901839844
    },
    {
      "type": "edit",
      "id": "a70507a835ad8919",
      "item": {
        "type": "markdown",
        "id": "a70507a835ad8919",
        "text": "\n"
      },
      "date": 1513901856328
    },
    {
      "type": "edit",
      "id": "c838bf439e384812",
      "item": {
        "type": "markdown",
        "id": "c838bf439e384812",
        "text": "- \"ES6 template strings let us easily embed HTML directly inside of JavaScript files, instead of putting JavaScript code inside of HTML files as we did with HTML Imports.\" "
      },
      "date": 1513901866605
    },
    {
      "type": "edit",
      "id": "f54bd4aa72cfc5d2",
      "item": {
        "type": "markdown",
        "id": "f54bd4aa72cfc5d2",
        "text": "- \"Both packaging formats can work, but given the need for JavaScript modules anyway, it seems worthwhile for us to see what we can build with modules alone. "
      },
      "date": 1513901872852
    },
    {
      "item": {
        "type": "factory",
        "id": "ac725e271c43a304"
      },
      "id": "ac725e271c43a304",
      "type": "add",
      "after": "f54bd4aa72cfc5d2",
      "date": 1513902070854
    },
    {
      "type": "edit",
      "id": "ac725e271c43a304",
      "item": {
        "type": "markdown",
        "id": "ac725e271c43a304",
        "text": "Backing up to Jan on ES2015:\n"
      },
      "date": 1513902090118
    },
    {
      "type": "edit",
      "id": "ac725e271c43a304",
      "item": {
        "type": "markdown",
        "id": "ac725e271c43a304",
        "text": "Backing up to Jan on ES2015:  We’ve rewritten the component.kitchen backend server to rip out a popular templating language and replace it with plain JavaScript functions. Recent language improvements in ES2015 have, in our opinion, made it a sufficiently capable general-purpose language that we’ve dropped use of a special-purpose template language. As we began a rewrite of our site, we were inspired by our recent work using plain JavaScript functions to create web components and decided to apply the same philosophy to our backend as well.\n"
      },
      "date": 1513902144228
    },
    {
      "type": "edit",
      "id": "ac725e271c43a304",
      "item": {
        "type": "markdown",
        "id": "ac725e271c43a304",
        "text": "Earlier component.kitchen rewrote its backend server to rip out a popular templating language and replace it with plain JavaScript functions. Recent language improvements in ES2015 have, in our opinion, made it a sufficiently capable general-purpose language that we’ve dropped use of a special-purpose template language. As we began a rewrite of our site, we were inspired by our recent work using plain JavaScript functions to create web components and decided to apply the same philosophy to our backend as well.\n[https://plus.google.com/+ComponentKitchen/posts/FzSPbtmkDjq page]"
      },
      "date": 1513902230220
    },
    {
      "type": "edit",
      "id": "ac725e271c43a304",
      "item": {
        "type": "markdown",
        "id": "ac725e271c43a304",
        "text": "Earlier component.kitchen rewrote its backend server to rip out a popular templating language and replace it with plain JavaScript functions. Recent language improvements in ES2015\n[https://plus.google.com/+ComponentKitchen/posts/FzSPbtmkDjq page]"
      },
      "date": 1513902289727
    },
    {
      "type": "edit",
      "id": "ac725e271c43a304",
      "item": {
        "type": "markdown",
        "id": "ac725e271c43a304",
        "text": "Earlier component.kitchen rewrote its backend server to rip out a popular templating language and replace it with plain JavaScript functions. Recent language improvements in ES2015 [https://plus.google.com/+ComponentKitchen/posts/FzSPbtmkDjq page]"
      },
      "date": 1513902298706
    },
    {
      "type": "edit",
      "id": "ac725e271c43a304",
      "item": {
        "type": "markdown",
        "id": "ac725e271c43a304",
        "text": "Earlier component.kitchen rewrote its backend server to rip out a popular templating language and replace it with plain JavaScript functions. After language improvements in ES2015 [https://plus.google.com/+ComponentKitchen/posts/FzSPbtmkDjq page]"
      },
      "date": 1513902433865
    },
    {
      "item": {
        "type": "factory",
        "id": "9fa577347207aee2"
      },
      "id": "9fa577347207aee2",
      "type": "add",
      "after": "ac725e271c43a304",
      "date": 1513902438949
    },
    {
      "type": "edit",
      "id": "9fa577347207aee2",
      "item": {
        "type": "markdown",
        "id": "9fa577347207aee2",
        "text": "https://component.kitchen/blog/posts/implementing-web-component-mixins-as-functions page]"
      },
      "date": 1513902449994
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on Web Components. Only interested in coding approaches that can be shared with other people. With emphasis on stylin and reuse. An open-source JavaScript library for building web applications using Web Components.  [https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513902674882
    },
    {
      "type": "edit",
      "id": "79514f400ac5168e",
      "item": {
        "type": "markdown",
        "id": "79514f400ac5168e",
        "text": "Jan Miksovsky is an designer/developer expert at component.kitchen on Web Components. Only interested in coding approaches that can be shared with other people. With emphasis on stylin and reuse.  [https://twitter.com/janmiksovsky page]\n"
      },
      "date": 1513902707254
    },
    {
      "type": "edit",
      "id": "9fa577347207aee2",
      "item": {
        "type": "markdown",
        "id": "9fa577347207aee2",
        "text": "[https://component.kitchen/blog/posts/implementing-web-component-mixins-as-functions page]"
      },
      "date": 1513902780515
    },
    {
      "type": "edit",
      "id": "ac725e271c43a304",
      "item": {
        "type": "markdown",
        "id": "ac725e271c43a304",
        "text": "Earlier component.kitchen rewrote its backend server to rip out a popular templating language and replaced it with plain JavaScript functions. After language improvements in ES2015 [https://plus.google.com/+ComponentKitchen/posts/FzSPbtmkDjq page]"
      },
      "date": 1513902787199
    },
    {
      "type": "move",
      "order": [
        "79514f400ac5168e",
        "ac725e271c43a304",
        "6a1c540791868ab2",
        "8ac1f0f93cbb908b",
        "a70507a835ad8919",
        "c838bf439e384812",
        "f54bd4aa72cfc5d2",
        "9fa577347207aee2"
      ],
      "id": "ac725e271c43a304",
      "date": 1513902810043
    },
    {
      "item": {
        "type": "factory",
        "id": "4faec240dbc29f3d"
      },
      "id": "4faec240dbc29f3d",
      "type": "add",
      "after": "9fa577347207aee2",
      "date": 1513903061845
    },
    {
      "type": "edit",
      "id": "4faec240dbc29f3d",
      "item": {
        "type": "markdown",
        "id": "4faec240dbc29f3d",
        "text": "A look at Stencil.js "
      },
      "date": 1513903069957
    },
    {
      "type": "edit",
      "id": "4faec240dbc29f3d",
      "item": {
        "type": "markdown",
        "id": "4faec240dbc29f3d",
        "text": "A look at Stencil.js [https://component.kitchen/blog/posts/a-look-at-stenciljs page]"
      },
      "date": 1513903085379
    },
    {
      "type": "edit",
      "id": "4faec240dbc29f3d",
      "item": {
        "type": "markdown",
        "id": "4faec240dbc29f3d",
        "text": "-A look at Stencil.js [https://component.kitchen/blog/posts/a-look-at-stenciljs page]"
      },
      "date": 1513903097724
    },
    {
      "type": "edit",
      "id": "4faec240dbc29f3d",
      "item": {
        "type": "markdown",
        "id": "4faec240dbc29f3d",
        "text": "- A look at Stencil.js [https://component.kitchen/blog/posts/a-look-at-stenciljs page]"
      },
      "date": 1513903112276
    },
    {
      "type": "edit",
      "id": "4faec240dbc29f3d",
      "item": {
        "type": "markdown",
        "id": "4faec240dbc29f3d",
        "text": "- Stencil.js was introduced recently at the 2017 Polymer Summit. A look at Stencil.js [https://component.kitchen/blog/posts/a-look-at-stenciljs page]"
      },
      "date": 1513903168332
    },
    {
      "type": "remove",
      "id": "9fa577347207aee2",
      "date": 1513903178896
    },
    {
      "item": {
        "type": "factory",
        "id": "9b63a50327f71498"
      },
      "id": "9b63a50327f71498",
      "type": "add",
      "after": "4faec240dbc29f3d",
      "date": 1513903188996
    },
    {
      "type": "edit",
      "id": "9b63a50327f71498",
      "item": {
        "type": "markdown",
        "id": "9b63a50327f71498",
        "text": "[https://component.kitchen/blog/posts/implementing-web-component-mixins-as-functions page]"
      },
      "date": 1513903202570
    },
    {
      "type": "edit",
      "id": "9b63a50327f71498",
      "item": {
        "type": "markdown",
        "id": "9b63a50327f71498",
        "text": "On implementing web component mixins as functions [https://component.kitchen/blog/posts/implementing-web-component-mixins-as-functions page]"
      },
      "date": 1513903252726
    },
    {
      "type": "move",
      "order": [
        "79514f400ac5168e",
        "ac725e271c43a304",
        "6a1c540791868ab2",
        "8ac1f0f93cbb908b",
        "a70507a835ad8919",
        "9b63a50327f71498",
        "c838bf439e384812",
        "f54bd4aa72cfc5d2",
        "4faec240dbc29f3d"
      ],
      "id": "9b63a50327f71498",
      "date": 1513903266064
    },
    {
      "item": {
        "type": "factory",
        "id": "73a8afdb74c4a367"
      },
      "id": "73a8afdb74c4a367",
      "type": "add",
      "after": "4faec240dbc29f3d",
      "date": 1513903601059
    },
    {
      "type": "edit",
      "id": "73a8afdb74c4a367",
      "item": {
        "type": "markdown",
        "id": "73a8afdb74c4a367",
        "text": "- Service worker  https://component.kitchen/blog/posts/can-service-workers-service-background-applications"
      },
      "date": 1513903687077
    },
    {
      "type": "edit",
      "id": "73a8afdb74c4a367",
      "item": {
        "type": "markdown",
        "id": "73a8afdb74c4a367",
        "text": "- Service Workers have indeterminate lifetimes and I think the only way to wake them up is for them to receive a push notification.  [https://component.kitchen/blog/posts/can-service-workers-service-background-applications page]"
      },
      "date": 1513903784157
    },
    {
      "item": {
        "type": "factory",
        "id": "81c62dd6ea6c48ca"
      },
      "id": "81c62dd6ea6c48ca",
      "type": "add",
      "after": "73a8afdb74c4a367",
      "date": 1513904297117
    },
    {
      "type": "edit",
      "id": "81c62dd6ea6c48ca",
      "item": {
        "type": "markdown",
        "id": "81c62dd6ea6c48ca",
        "text": "[https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense page]"
      },
      "date": 1513904315941
    },
    {
      "type": "edit",
      "id": "81c62dd6ea6c48ca",
      "item": {
        "type": "markdown",
        "id": "81c62dd6ea6c48ca",
        "text": "Since the term \"framework\" can provoke strong negative reactions, authors of such code may actually care whether their code is labeled a framework or not. \n\n[https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense page]"
      },
      "date": 1513904441870
    },
    {
      "item": {
        "type": "factory",
        "id": "4b541d41fdfec579"
      },
      "id": "4b541d41fdfec579",
      "type": "add",
      "after": "81c62dd6ea6c48ca",
      "date": 1513904449896
    },
    {
      "type": "edit",
      "id": "4b541d41fdfec579",
      "item": {
        "type": "markdown",
        "id": "4b541d41fdfec579",
        "text": "- Google, for example, seems to take great pains to avoid describing its own Polymer project as a framework. They call it a \"library\", which sounds perhaps smaller or less threatening."
      },
      "date": 1513904477516
    },
    {
      "item": {
        "type": "factory",
        "id": "8f49d1106e87c6ee"
      },
      "id": "8f49d1106e87c6ee",
      "type": "add",
      "after": "4b541d41fdfec579",
      "date": 1513904480114
    },
    {
      "type": "edit",
      "id": "8f49d1106e87c6ee",
      "item": {
        "type": "markdown",
        "id": "8f49d1106e87c6ee",
        "text": "-  Polymer easily meets all of the above framework criteria. For example, Polymer's internal asynchronous task-scheduling infrastructure establishes the flow of control in a Polymer application, determining when to invoke component lifecycle callbacks and property observers."
      },
      "date": 1513904522869
    },
    {
      "type": "edit",
      "id": "81c62dd6ea6c48ca",
      "item": {
        "type": "markdown",
        "id": "81c62dd6ea6c48ca",
        "text": "Since the term \"framework\" can provoke strong negative reactions, authors of such code may actually care whether their code is labeled a framework or not. \n\n[https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense  page]"
      },
      "date": 1513904559124
    },
    {
      "type": "edit",
      "id": "81c62dd6ea6c48ca",
      "item": {
        "type": "markdown",
        "id": "81c62dd6ea6c48ca",
        "text": "Since the term \"framework\" can provoke strong negative reactions, authors of such code may actually care whether their code is labeled a framework or not. \n[https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense  page]"
      },
      "date": 1513904594340
    },
    {
      "type": "edit",
      "id": "81c62dd6ea6c48ca",
      "item": {
        "type": "markdown",
        "id": "81c62dd6ea6c48ca",
        "text": "Since the term \"framework\" can provoke strong negative reactions, authors of such code may actually care whether their code is labeled a framework or not. [https://component.kitchen/blog/posts/nobody-writes-production-web-components-in-vanilla-js-so-using-a-framework-makes-total-sense  page]"
      },
      "date": 1513904613809
    },
    {
      "type": "edit",
      "id": "8f49d1106e87c6ee",
      "item": {
        "type": "markdown",
        "id": "8f49d1106e87c6ee",
        "text": "-  Polymer easily meets all of the above framework criteria. For example, Polymer's internal asynchronous task-scheduling infrastructure establishes the flow of control in a Polymer application, determining when to invoke component lifecycle callbacks and property observers. [https://en.wikipedia.org/wiki/Polymer_(library) page]"
      },
      "date": 1513904659745
    },
    {
      "type": "edit",
      "id": "ac725e271c43a304",
      "item": {
        "type": "markdown",
        "id": "ac725e271c43a304",
        "text": "Component.kitchen rewrote its backend server to rip out a popular templating language and replaced it with plain JavaScript functions. After language improvements in ES2015 [https://plus.google.com/+ComponentKitchen/posts/FzSPbtmkDjq page]"
      },
      "date": 1513904940578
    },
    {
      "type": "move",
      "order": [
        "79514f400ac5168e",
        "6a1c540791868ab2",
        "ac725e271c43a304",
        "8ac1f0f93cbb908b",
        "a70507a835ad8919",
        "9b63a50327f71498",
        "c838bf439e384812",
        "f54bd4aa72cfc5d2",
        "4faec240dbc29f3d",
        "73a8afdb74c4a367",
        "81c62dd6ea6c48ca",
        "4b541d41fdfec579",
        "8f49d1106e87c6ee"
      ],
      "id": "6a1c540791868ab2",
      "date": 1513904946873
    },
    {
      "type": "move",
      "order": [
        "79514f400ac5168e",
        "ac725e271c43a304",
        "6a1c540791868ab2",
        "8ac1f0f93cbb908b",
        "a70507a835ad8919",
        "9b63a50327f71498",
        "c838bf439e384812",
        "f54bd4aa72cfc5d2",
        "4faec240dbc29f3d",
        "73a8afdb74c4a367",
        "81c62dd6ea6c48ca",
        "4b541d41fdfec579",
        "8f49d1106e87c6ee"
      ],
      "id": "ac725e271c43a304",
      "date": 1513904952656
    },
    {
      "item": {
        "type": "factory",
        "id": "c678890632c06691"
      },
      "id": "c678890632c06691",
      "type": "add",
      "after": "8f49d1106e87c6ee",
      "date": 1513905158994
    },
    {
      "type": "edit",
      "id": "c678890632c06691",
      "item": {
        "type": "markdown",
        "id": "c678890632c06691",
        "text": "Polymer has begun to gain increasing recognition in the market, with special attention paid to its structured design process, allowing for an interoperable \"lego block\" structure. "
      },
      "date": 1513905179476
    },
    {
      "type": "edit",
      "id": "c678890632c06691",
      "item": {
        "type": "markdown",
        "id": "c678890632c06691",
        "text": "- Polymer has begun to gain increasing recognition in the market, with special attention paid to its structured design process, allowing for an interoperable \"lego block\" structure. "
      },
      "date": 1513905186572
    },
    {
      "type": "edit",
      "id": "8f49d1106e87c6ee",
      "item": {
        "type": "markdown",
        "id": "8f49d1106e87c6ee",
        "text": "-  Polymer easily meets all of the above framework criteria. For example, Polymer's internal asynchronous task-scheduling infrastructure establishes the flow of control in a Polymer application, determining when to invoke component lifecycle callbacks and property observers. "
      },
      "date": 1513905208774
    },
    {
      "type": "edit",
      "id": "c678890632c06691",
      "item": {
        "type": "markdown",
        "id": "c678890632c06691",
        "text": "- Polymer has begun to gain increasing recognition in the market, with special attention paid to its structured design process, allowing for an interoperable \"lego block\" structure.[https://en.wikipedia.org/wiki/Polymer_(library) page]"
      },
      "date": 1513905220684
    },
    {
      "type": "edit",
      "id": "c678890632c06691",
      "item": {
        "type": "markdown",
        "id": "c678890632c06691",
        "text": "- Polymer has begun to gain increasing recognition in the market, with special attention paid to its structured design process, allowing for an interoperable \"lego block\" structure.\n [https://en.wikipedia.org/wiki/Polymer_(library) page]"
      },
      "date": 1513905228815
    },
    {
      "type": "edit",
      "id": "c678890632c06691",
      "item": {
        "type": "markdown",
        "id": "c678890632c06691",
        "text": "- Polymer has begun to gain increasing recognition in the market, with special attention paid to its structured design process, allowing for an interoperable \"lego block\" structure [https://en.wikipedia.org/wiki/Polymer_(library) page]"
      },
      "date": 1513905242716
    },
    {
      "type": "move",
      "order": [
        "79514f400ac5168e",
        "6a1c540791868ab2",
        "ac725e271c43a304",
        "8ac1f0f93cbb908b",
        "a70507a835ad8919",
        "9b63a50327f71498",
        "c838bf439e384812",
        "f54bd4aa72cfc5d2",
        "4faec240dbc29f3d",
        "73a8afdb74c4a367",
        "81c62dd6ea6c48ca",
        "4b541d41fdfec579",
        "8f49d1106e87c6ee",
        "c678890632c06691"
      ],
      "id": "6a1c540791868ab2",
      "date": 1513905364276
    },
    {
      "type": "fork",
      "site": "clive.tries.fed.wiki",
      "date": 1542501087403
    },
    {
      "item": {
        "type": "factory",
        "id": "831d2ce13f415a8c"
      },
      "id": "831d2ce13f415a8c",
      "type": "add",
      "after": "c678890632c06691",
      "date": 1542501110874
    },
    {
      "type": "edit",
      "id": "831d2ce13f415a8c",
      "item": {
        "type": "pagefold",
        "id": "831d2ce13f415a8c",
        "text": "."
      },
      "date": 1542501114251
    },
    {
      "item": {
        "type": "factory",
        "id": "e4bbe55e64fdb5de"
      },
      "id": "e4bbe55e64fdb5de",
      "type": "add",
      "after": "831d2ce13f415a8c",
      "date": 1542501115593
    },
    {
      "type": "edit",
      "id": "e4bbe55e64fdb5de",
      "item": {
        "type": "markdown",
        "id": "e4bbe55e64fdb5de",
        "text": "Little frustrated that I didn't notice this page 10 months ago.  component.kitchen is exactly the application of es6 modules I've wanted since I first learned about shadow DOM."
      },
      "date": 1542501236559
    },
    {
      "type": "edit",
      "id": "e4bbe55e64fdb5de",
      "item": {
        "type": "markdown",
        "id": "e4bbe55e64fdb5de",
        "text": "Little frustrated that I didn't notice this page 10 months ago.  component.kitchen is exactly the application of es6 modules I've wanted since I first learned about shadow DOM.\n"
      },
      "date": 1542505731375
    },
    {
      "type": "add",
      "id": "2b27edc3f3104ea6",
      "item": {
        "type": "markdown",
        "id": "2b27edc3f3104ea6",
        "text": "See [[Elix ES6 Mixins]]"
      },
      "after": "e4bbe55e64fdb5de",
      "date": 1542505746725
    },
    {
      "type": "edit",
      "id": "2b27edc3f3104ea6",
      "item": {
        "type": "markdown",
        "id": "2b27edc3f3104ea6",
        "text": "See [[Elix ES6 Mixins]]\n"
      },
      "date": 1542525291781
    },
    {
      "type": "add",
      "id": "9f4ad03dc823971b",
      "item": {
        "type": "markdown",
        "id": "9f4ad03dc823971b",
        "text": "After a little more inspection, there's still an awful lot of code.  Wonder if the reactive part is worth the effort.  Might be that what I really want is much simpler.  The Power of Web Components. [https://hacks.mozilla.org/2018/11/the-power-of-web-components/ article]"
      },
      "after": "2b27edc3f3104ea6",
      "date": 1542525390849
    },
    {
      "type": "edit",
      "id": "9f4ad03dc823971b",
      "item": {
        "type": "markdown",
        "id": "9f4ad03dc823971b",
        "text": "After a little more inspection, there's still an awful lot of code.  Wonder if the reactive part is worth the effort.  Might be that what I really want is much simpler.  The Power of Web Components. [https://hacks.mozilla.org/2018/11/the-power-of-web-components/ article]\n"
      },
      "date": 1548366487925
    },
    {
      "type": "add",
      "id": "491aae8f0153e557",
      "item": {
        "type": "markdown",
        "id": "491aae8f0153e557",
        "text": "Shim for custom elements in browsers that aren't quite there yet\nhttps://github.com/webcomponents/custom-elements"
      },
      "after": "9f4ad03dc823971b",
      "date": 1548366517000
    },
    {
      "type": "edit",
      "id": "491aae8f0153e557",
      "item": {
        "type": "markdown",
        "id": "491aae8f0153e557",
        "text": "Shim for custom elements in browsers that aren't quite there yet\nhttps://github.com/webcomponents/custom-elements\n\nFound this article helpful... leaving it here for now.\nhttps://blog.sessionstack.com/how-javascript-works-under-the-hood-of-custom-elements-best-practices-on-building-reusable-e118e888de0c"
      },
      "date": 1548366576256
    },
    {
      "type": "edit",
      "id": "491aae8f0153e557",
      "item": {
        "type": "markdown",
        "id": "491aae8f0153e557",
        "text": "Shim for custom elements in browsers that aren't quite there yet\nhttps://github.com/webcomponents/custom-elements\n\nFound this article helpful... leaving it here for now.\nhttps://blog.sessionstack.com/how-javascript-works-under-the-hood-of-custom-elements-best-practices-on-building-reusable-e118e888de0c\n"
      },
      "date": 1548969690832
    },
    {
      "type": "add",
      "id": "0dd0ddeabb9e8cdb",
      "item": {
        "type": "markdown",
        "id": "0dd0ddeabb9e8cdb",
        "text": "Hybrid.js also eschews class-based inheritance when creating ES6 components.  [https://hybrids.js.org/ https://hybrids.js.org/]"
      },
      "after": "491aae8f0153e557",
      "date": 1548969729336
    },
    {
      "type": "edit",
      "id": "0dd0ddeabb9e8cdb",
      "item": {
        "type": "markdown",
        "id": "0dd0ddeabb9e8cdb",
        "text": "Hybrid.js also eschews class-based inheritance when creating ES6 components.  [https://hybrids.js.org/ https://hybrids.js.org/]\n"
      },
      "date": 1548969786613
    },
    {
      "type": "add",
      "id": "a9c0f392c14e928f",
      "item": {
        "type": "markdown",
        "id": "a9c0f392c14e928f",
        "text": "The source code for polymer's `lit-element` looks interesting. [https://github.com/Polymer/lit-element github]\n"
      },
      "after": "0dd0ddeabb9e8cdb",
      "date": 1548969843204
    },
    {
      "type": "add",
      "id": "e63d1564196c2455",
      "item": {
        "type": "markdown",
        "id": "e63d1564196c2455",
        "text": "Also interested in the example of `lit-element` hosted at glitch: [http://glitch.com/~ glitch]"
      },
      "after": "a9c0f392c14e928f",
      "date": 1548969892522
    },
    {
      "type": "edit",
      "id": "e63d1564196c2455",
      "item": {
        "type": "markdown",
        "id": "e63d1564196c2455",
        "text": "Also interested in the example of `lit-element` hosted at glitch: [https://glitch.com/~hello-lit-element glitch]"
      },
      "date": 1548969939786
    },
    {
      "type": "edit",
      "id": "0dd0ddeabb9e8cdb",
      "item": {
        "type": "markdown",
        "id": "0dd0ddeabb9e8cdb",
        "text": "Hybrid.js also eschews class-based inheritance when creating ES6 components.  [https://hybrids.js.org/ https://hybrids.js.org/]  On closer look at the source, this is still not what I'm looking for.\n"
      },
      "date": 1549297507170
    },
    {
      "type": "remove",
      "id": "e4bbe55e64fdb5de",
      "date": 1549374765418
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1549409293273
    },
    {
      "type": "fork",
      "site": "clive.tries.fed.wiki",
      "date": 1636030928501
    }
  ]
}