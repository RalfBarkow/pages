{
  "title": "Two Decades of Smalltalk VM Development",
  "story": [
    {
      "type": "paragraph",
      "id": "6f2211fc94def471",
      "text": "MIRANDA, Eliot, BÉRA, Clément, GONZALEZ BOIX, Elisa and INGALLS, Dan, 2018. Two Decades of Smalltalk VM Development: Live VM Development through Simulation Tools. In: . 4 November 2018. p. 57–66. DOI 10.1145/3281287.3281295. "
    },
    {
      "type": "markdown",
      "id": "24258b6dcb793abf",
      "text": "> OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler. In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Two Decades of Smalltalk VM Development",
        "story": []
      },
      "date": 1659967133010
    },
    {
      "item": {
        "type": "factory",
        "id": "6f2211fc94def471"
      },
      "id": "6f2211fc94def471",
      "type": "add",
      "date": 1659967134727
    },
    {
      "type": "edit",
      "id": "6f2211fc94def471",
      "item": {
        "type": "paragraph",
        "id": "6f2211fc94def471",
        "text": "\nMIRANDA, Eliot, BÉRA, Clément, GONZALEZ BOIX, Elisa and INGALLS, Dan, 2018. Two Decades of Smalltalk VM Development: Live VM Development through Simulation Tools. In: . 4 November 2018. p. 57–66. DOI 10.1145/3281287.3281295. OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler. In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
      },
      "date": 1659967136274
    },
    {
      "type": "edit",
      "id": "6f2211fc94def471",
      "item": {
        "type": "paragraph",
        "id": "6f2211fc94def471",
        "text": "MIRANDA, Eliot, BÉRA, Clément, GONZALEZ BOIX, Elisa and INGALLS, Dan, 2018. Two Decades of Smalltalk VM Development: Live VM Development through Simulation Tools. In: . 4 November 2018. p. 57–66. DOI 10.1145/3281287.3281295. "
      },
      "date": 1659967140375
    },
    {
      "type": "add",
      "id": "24258b6dcb793abf",
      "item": {
        "type": "paragraph",
        "id": "24258b6dcb793abf",
        "text": "OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler. In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
      },
      "after": "6f2211fc94def471",
      "date": 1659967140839
    },
    {
      "type": "edit",
      "id": "24258b6dcb793abf",
      "item": {
        "type": "paragraph",
        "id": "24258b6dcb793abf",
        "text": "> OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler. In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
      },
      "date": 1659967146745
    },
    {
      "type": "edit",
      "id": "24258b6dcb793abf",
      "item": {
        "type": "markdown",
        "id": "24258b6dcb793abf",
        "text": "> OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler. In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
      },
      "date": 1659967147882
    }
  ]
}