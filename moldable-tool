{
  "title": "Moldable Tool",
  "story": [
    {
      "type": "markdown",
      "id": "f14f98effd937a1a",
      "text": "*Context*. You are developing a software system, and find that the existing development tools fall short in supporting domain-specific questions about the software. [https://book.gtoolkit.com/moldable-tool-98p0537dgjllrko3jqmdk8243 page]"
    },
    {
      "type": "markdown",
      "id": "b906ca65e2cc54bb",
      "text": "*Problem*. How can you cheaply and effectively extend the development environment with domain-specific tools that address your application domain?"
    },
    {
      "type": "markdown",
      "id": "3836a23b7261e1d6",
      "text": "*Forces*. Generic software tools are fine for answering generic questions, but they do not scale well when addressing domain-specific questions. For example, consider a generic debugger being used to debug an event-driven application — you want to step through the chain of events, not the stack. A plugin architecture can open up an IDE to new tools, but plugins can be complex and expensive to implement, and they often do not play nicely with existing tools or with each other."
    },
    {
      "type": "markdown",
      "id": "20b1f5e2fb26f5b6",
      "text": "*Solution*. Make the development tools moldable to the dynamic context of the artifacts they are intended to work with [2]."
    },
    {
      "type": "markdown",
      "id": "0fbff8f15b39e68e",
      "text": "[2] Andrei Chiş, Tudor Gîrba, Juraj Kubelka, Oscar Nierstrasz, Stefan Reichhart, and Aliaksei Syrel. 2017. Moldable Tools for Object-Oriented Development. In PAUSE: Present And Ulterior Software Engineering, Bertrand Meyer Manuel Mazzara (Ed.). Springer, Cham, 77–101. [https://doi.org/10.1007/978-3-319-67425-4_6 doi]"
    },
    {
      "type": "paragraph",
      "id": "8e2523756714e654",
      "text": "Object-oriented programming aims to facilitate navigation between domain concepts and the code that addresses those domains by enabling developers to directly model those domain concepts in the code. To make informed decisions, developers then formulate detailed and domain-specific questions about their systems in terms of domain concepts and use tools to explore available information and answer those questions. Development tools however focus mainly on object-oriented idioms and do not expose or exploit domain concepts constructed on top of object-oriented programming idioms. Analysis tools are typically not tightly integrated with development tools. This has a negative effect on program comprehension, increasing the effort and the time for obtaining answers.\n\nTo improve program comprehension, we propose to better integrate domain concepts and program comprehension tools into the development environment through moldable tools. Moldable tools are development tools that are aware of the current development context and support inexpensive creation of domain-specific extensions. We elaborate on the idea of moldable tools and show how to apply moldable tools to support object-oriented programming. Through practical examples, we show how developers can embed domain concepts into their development tools."
    },
    {
      "type": "pagefold",
      "id": "a54b9e22631a836b",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "0ba84299912c473d",
      "site": "mold.dreyeck.ch",
      "slug": "moldability-and-malleability",
      "title": "Moldability and Malleability",
      "text": "[[Moldability]] and [[Malleability]] refer to two distinct properties that are not interchangeable."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Moldable Tool",
        "story": []
      },
      "date": 1705705940421
    },
    {
      "item": {
        "type": "factory",
        "id": "f14f98effd937a1a"
      },
      "id": "f14f98effd937a1a",
      "type": "add",
      "date": 1705705941493
    },
    {
      "type": "edit",
      "id": "f14f98effd937a1a",
      "item": {
        "type": "paragraph",
        "id": "f14f98effd937a1a",
        "text": "Context: You are developing a software system, and find that the existing development tools fall short in supporting domain-specific questions about the software.\n"
      },
      "date": 1705705950475
    },
    {
      "type": "edit",
      "id": "f14f98effd937a1a",
      "item": {
        "type": "paragraph",
        "id": "f14f98effd937a1a",
        "text": "Context: You are developing a software system, and find that the existing development tools fall short in supporting domain-specific questions about the software. [https://book.gtoolkit.com/moldable-tool-98p0537dgjllrko3jqmdk8243 page]"
      },
      "date": 1705707717921
    },
    {
      "type": "fork",
      "site": "mold.dreyeck.ch",
      "date": 1705707732774
    },
    {
      "item": {
        "type": "pagefold",
        "id": "a54b9e22631a836b",
        "text": "~"
      },
      "id": "a54b9e22631a836b",
      "type": "add",
      "after": "f14f98effd937a1a",
      "date": 1705707880040
    },
    {
      "type": "edit",
      "id": "a54b9e22631a836b",
      "item": {
        "type": "pagefold",
        "id": "a54b9e22631a836b",
        "text": "~"
      },
      "date": 1705707883243
    },
    {
      "item": {
        "type": "reference",
        "id": "0ba84299912c473d",
        "site": "mold.dreyeck.ch",
        "slug": "moldability-and-malleability",
        "title": "Moldability and Malleability",
        "text": "[[Moldability]] and [[Malleability]] refer to two distinct properties that are not interchangeable."
      },
      "id": "0ba84299912c473d",
      "type": "add",
      "after": "a54b9e22631a836b",
      "date": 1705707885013
    },
    {
      "type": "edit",
      "id": "0ba84299912c473d",
      "item": {
        "type": "reference",
        "id": "0ba84299912c473d",
        "site": "mold.dreyeck.ch",
        "slug": "moldability-and-malleability",
        "title": "Moldability and Malleability",
        "text": "[[Moldability]] and [[Malleability]] refer to two distinct properties that are not interchangeable."
      },
      "date": 1705707888450
    },
    {
      "type": "add",
      "id": "b906ca65e2cc54bb",
      "item": {
        "type": "markdown",
        "id": "b906ca65e2cc54bb",
        "text": "*Problem*. How can you cheaply and effectively extend the development environment with domain-specific tools that address your application domain?"
      },
      "after": "f14f98effd937a1a",
      "date": 1705708034352
    },
    {
      "type": "edit",
      "id": "f14f98effd937a1a",
      "item": {
        "type": "markdown",
        "id": "f14f98effd937a1a",
        "text": "*Context*. You are developing a software system, and find that the existing development tools fall short in supporting domain-specific questions about the software. [https://book.gtoolkit.com/moldable-tool-98p0537dgjllrko3jqmdk8243 page]"
      },
      "date": 1705708044198
    },
    {
      "type": "edit",
      "id": "f14f98effd937a1a",
      "item": {
        "type": "markdown",
        "id": "f14f98effd937a1a",
        "text": "*Context*. You are developing a software system, and find that the existing development tools fall short in supporting domain-specific questions about the software. [https://book.gtoolkit.com/moldable-tool-98p0537dgjllrko3jqmdk8243 page]"
      },
      "date": 1705708045189
    },
    {
      "type": "edit",
      "id": "b906ca65e2cc54bb",
      "item": {
        "type": "markdown",
        "id": "b906ca65e2cc54bb",
        "text": "*Problem*. How can you cheaply and effectively extend the development environment with domain-specific tools that address your application domain?"
      },
      "date": 1705708050547
    },
    {
      "type": "edit",
      "id": "b906ca65e2cc54bb",
      "item": {
        "type": "markdown",
        "id": "b906ca65e2cc54bb",
        "text": "*Problem*. How can you cheaply and effectively extend the development environment with domain-specific tools that address your application domain?"
      },
      "date": 1705708051518
    },
    {
      "type": "add",
      "id": "3836a23b7261e1d6",
      "item": {
        "type": "markdown",
        "id": "3836a23b7261e1d6",
        "text": "*Forces*. Generic software tools are fine for answering generic questions, but they do not scale well when addressing domain-specific questions. For example, consider a generic debugger being used to debug an event-driven application — you want to step through the chain of events, not the stack. A plugin architecture can open up an IDE to new tools, but plugins can be complex and expensive to implement, and they often do not play nicely with existing tools or with each other."
      },
      "after": "b906ca65e2cc54bb",
      "date": 1705708078092
    },
    {
      "type": "add",
      "id": "20b1f5e2fb26f5b6",
      "item": {
        "type": "markdown",
        "id": "20b1f5e2fb26f5b6",
        "text": "*Solution*. Make the development tools moldable to the dynamic context of the artifacts they are intended to work with [2]."
      },
      "after": "3836a23b7261e1d6",
      "date": 1705708120326
    },
    {
      "type": "add",
      "id": "0fbff8f15b39e68e",
      "item": {
        "type": "markdown",
        "id": "0fbff8f15b39e68e",
        "text": "[2] Andrei Chiş, Tudor Gîrba, Juraj Kubelka, Oscar Nierstrasz, Stefan Reichhart, and Aliaksei Syrel. 2017. Moldable Tools for Object-Oriented Development. In PAUSE: Present And Ulterior Software Engineering, Bertrand Meyer Manuel Mazzara (Ed.). Springer, Cham, 77–101. https://doi.org/10.1007/978-3-319-67425-4_6"
      },
      "after": "20b1f5e2fb26f5b6",
      "date": 1705708149501,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1705708177403
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1705708200058
    },
    {
      "type": "edit",
      "id": "0fbff8f15b39e68e",
      "item": {
        "type": "markdown",
        "id": "0fbff8f15b39e68e",
        "text": "[2] Andrei Chiş, Tudor Gîrba, Juraj Kubelka, Oscar Nierstrasz, Stefan Reichhart, and Aliaksei Syrel. 2017. Moldable Tools for Object-Oriented Development. In PAUSE: Present And Ulterior Software Engineering, Bertrand Meyer Manuel Mazzara (Ed.). Springer, Cham, 77–101. [https://doi.org/10.1007/978-3-319-67425-4_6 doi]"
      },
      "date": 1705709247068
    },
    {
      "item": {
        "type": "factory",
        "id": "8e2523756714e654"
      },
      "id": "8e2523756714e654",
      "type": "add",
      "after": "0ba84299912c473d",
      "date": 1705709349774
    },
    {
      "id": "8e2523756714e654",
      "type": "move",
      "order": [
        "f14f98effd937a1a",
        "b906ca65e2cc54bb",
        "3836a23b7261e1d6",
        "20b1f5e2fb26f5b6",
        "0fbff8f15b39e68e",
        "8e2523756714e654",
        "a54b9e22631a836b",
        "0ba84299912c473d"
      ],
      "date": 1705709352033
    },
    {
      "type": "edit",
      "id": "8e2523756714e654",
      "item": {
        "type": "paragraph",
        "id": "8e2523756714e654",
        "text": "Object-oriented programming aims to facilitate navigation between domain concepts and the code that addresses those domains by enabling developers to directly model those domain concepts in the code. To make informed decisions, developers then formulate detailed and domain-specific questions about their systems in terms of domain concepts and use tools to explore available information and answer those questions. Development tools however focus mainly on object-oriented idioms and do not expose or exploit domain concepts constructed on top of object-oriented programming idioms. Analysis tools are typically not tightly integrated with development tools. This has a negative effect on program comprehension, increasing the effort and the time for obtaining answers.\n\nTo improve program comprehension, we propose to better integrate domain concepts and program comprehension tools into the development environment through moldable tools. Moldable tools are development tools that are aware of the current development context and support inexpensive creation of domain-specific extensions. We elaborate on the idea of moldable tools and show how to apply moldable tools to support object-oriented programming. Through practical examples, we show how developers can embed domain concepts into their development tools."
      },
      "date": 1705709353640
    },
    {
      "type": "fork",
      "site": "mold.dreyeck.ch",
      "date": 1706286676797
    }
  ]
}