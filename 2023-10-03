{
  "title": "2023-10-03",
  "story": [
    {
      "type": "paragraph",
      "id": "5139a3b9f4efa289",
      "text": "⇒ [[PEG]] ⇒ [[elm-peg]] ⇒ [[Roman R. Redziejowski]] ⇒ [[Cut Points in PEG]]"
    },
    {
      "type": "paragraph",
      "id": "cea804f4e576ebf3",
      "text": "⇒ [[Define a PEG Grammar]] ⇒ [[PEG Syntax and Semantics]] [https://nim-lang.org/docs/pegs.html page], PEG vs regular expression [https://nim-lang.org/docs/pegs.html#peg-syntax-and-semantics-peg-vs-regular-expression page]"
    },
    {
      "type": "markdown",
      "id": "5ca32937a47c9014",
      "text": "> As a regular expression"
    },
    {
      "type": "code",
      "id": "21d1617d042553bd",
      "text": "\\[.*\\]"
    },
    {
      "type": "markdown",
      "id": "31e7543843d8b530",
      "text": "> matches the longest possible text between '[' and ']'. As a PEG it never matches anything, because a PEG is deterministic: .* consumes the rest of the input, so \\] never matches. As a PEG this needs to be written as:"
    },
    {
      "type": "code",
      "id": "a6b54240a3734059",
      "text": "\\[ ( !\\] . )* \\]"
    },
    {
      "type": "markdown",
      "id": "539cc6dcda134243",
      "text": "> (or"
    },
    {
      "type": "code",
      "id": "e427bdf5199f7bdb",
      "text": "\\[ @ \\])"
    },
    {
      "type": "markdown",
      "id": "fe6395e1e736d924",
      "text": "> )."
    },
    {
      "type": "paragraph",
      "id": "efa12ef7721f363e",
      "text": "Test case [https://github.com/RalfBarkow/vite-elm-dojo/blob/aea8bfef364dc22e80362dd2285807fde9b897d0/tests/MainSpec.elm#L1-L22 code]"
    },
    {
      "type": "code",
      "id": "ca527f480b07b95c",
      "text": "module MainSpec exposing (suite)\n\nimport Expect\nimport Main exposing (result)\nimport Test exposing (..)\n\n\nsuite : Test\nsuite =\n    describe \"Parsing Expression Grammar (PEG)\"\n        [ test \"should parse 'abc' and convert it to all upper case 'ABC' with an action.\" <|\n            \\() ->\n                let\n                    expected =\n                        Ok \"ABC\"\n\n                    actual =\n                        result\n                in\n                Expect.equal actual expected\n        ]\n"
    },
    {
      "type": "paragraph",
      "id": "3370c97a92de842e",
      "text": "[https://github.com/RalfBarkow/vite-elm-dojo/blob/2ab35e7aa4a01059dafeaa192b571c6ba187c88b/src/Main.elm#L41-L48 code]"
    },
    {
      "type": "code",
      "id": "3dcdc2f1def35198",
      "text": "main =\n    case result of\n        Ok value ->\n            Html.text (\"Parsed value: \" ++ value)\n\n        Err error ->\n            Html.text (\"Parse error: \" ++ error.message)\n"
    },
    {
      "type": "paragraph",
      "id": "0214cc186308d392",
      "text": "Write your PEG.js grammar [https://pegjs.org/online page],  A PEG.js Grammar for Elm [https://gist.github.com/dynajoe/eeeff72c7ffebc1bb56153078694d90e gist], Creating a parser [https://rundis.github.io/blog/2016/elm_light_ast.html post] by [[Magnus Rundberget]]"
    },
    {
      "type": "video",
      "id": "ff153fa1335e39d4",
      "text": "YOUTUBE pmMhCRvU9R0\nDemo of new AST based features in elm-light. The Elm language plugin for Light Table"
    },
    {
      "type": "paragraph",
      "id": "03ea973dcc99f484",
      "text": "[[Lighttable]]"
    },
    {
      "type": "paragraph",
      "id": "8f069536aa284ba4",
      "text": "[[TEPA]]"
    },
    {
      "type": "paragraph",
      "id": "424e6d37e2665c91",
      "text": "⇒ [[dmx.ralfbarkow.ch]]: [[Let's Encrypt]] certificate expiration notice for domain"
    },
    {
      "type": "code",
      "id": "4bb4d4e8c6cd6e7a",
      "text": "ufw allow http\ncertbot \nufw deny http"
    },
    {
      "type": "paragraph",
      "id": "ad4b51a1ec34ff95",
      "text": "⇒ Common NoRedInk [[Containers]] [https://package.elm-lang.org/packages/NoRedInk/noredink-ui/latest/Nri-Ui-Container-V2 package]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-10-03",
        "story": []
      },
      "date": 1696310568215
    },
    {
      "item": {
        "type": "factory",
        "id": "424e6d37e2665c91"
      },
      "id": "424e6d37e2665c91",
      "type": "add",
      "date": 1696310569371
    },
    {
      "type": "edit",
      "id": "424e6d37e2665c91",
      "item": {
        "type": "paragraph",
        "id": "424e6d37e2665c91",
        "text": "⇒ [[dmx.ralfbarkow.ch]]"
      },
      "date": 1696310579706
    },
    {
      "item": {
        "type": "factory",
        "id": "4bb4d4e8c6cd6e7a"
      },
      "id": "4bb4d4e8c6cd6e7a",
      "type": "add",
      "after": "424e6d37e2665c91",
      "date": 1696310642804
    },
    {
      "type": "edit",
      "id": "4bb4d4e8c6cd6e7a",
      "item": {
        "type": "code",
        "id": "4bb4d4e8c6cd6e7a",
        "text": "ufw allow http\ncertbot \nufw deny http"
      },
      "date": 1696310653681
    },
    {
      "type": "edit",
      "id": "424e6d37e2665c91",
      "item": {
        "type": "paragraph",
        "id": "424e6d37e2665c91",
        "text": "⇒ [[dmx.ralfbarkow.ch]]: Let's Encrypt certificate expiration notice for domain \"dmx.ralfbarkow.ch\""
      },
      "date": 1696310702712
    },
    {
      "type": "edit",
      "id": "424e6d37e2665c91",
      "item": {
        "type": "paragraph",
        "id": "424e6d37e2665c91",
        "text": "⇒ [[dmx.ralfbarkow.ch]]: Let's Encrypt certificate expiration notice for domain"
      },
      "date": 1696310714960
    },
    {
      "type": "edit",
      "id": "424e6d37e2665c91",
      "item": {
        "type": "paragraph",
        "id": "424e6d37e2665c91",
        "text": "⇒ [[dmx.ralfbarkow.ch]]: [[Let's Encrypt]] certificate expiration notice for domain"
      },
      "date": 1696310803085
    },
    {
      "item": {
        "type": "factory",
        "id": "5139a3b9f4efa289"
      },
      "id": "5139a3b9f4efa289",
      "type": "add",
      "after": "4bb4d4e8c6cd6e7a",
      "date": 1696311070197
    },
    {
      "id": "5139a3b9f4efa289",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a"
      ],
      "date": 1696311072246
    },
    {
      "type": "edit",
      "id": "5139a3b9f4efa289",
      "item": {
        "type": "paragraph",
        "id": "5139a3b9f4efa289",
        "text": "⇒ [[PEG]]"
      },
      "date": 1696311084505
    },
    {
      "item": {
        "type": "factory",
        "id": "ad4b51a1ec34ff95"
      },
      "id": "ad4b51a1ec34ff95",
      "type": "add",
      "after": "4bb4d4e8c6cd6e7a",
      "date": 1696311679104
    },
    {
      "type": "edit",
      "id": "ad4b51a1ec34ff95",
      "item": {
        "type": "paragraph",
        "id": "ad4b51a1ec34ff95",
        "text": "Common NoRedInk Containers"
      },
      "date": 1696311682323
    },
    {
      "type": "edit",
      "id": "ad4b51a1ec34ff95",
      "item": {
        "type": "paragraph",
        "id": "ad4b51a1ec34ff95",
        "text": "Common NoRedInk Containers [https://package.elm-lang.org/packages/NoRedInk/noredink-ui/latest/Nri-Ui-Container-V2 package]"
      },
      "date": 1696311696603
    },
    {
      "type": "edit",
      "id": "ad4b51a1ec34ff95",
      "item": {
        "type": "paragraph",
        "id": "ad4b51a1ec34ff95",
        "text": "⇒"
      },
      "date": 1696311703777
    },
    {
      "type": "add",
      "id": "1d52e91bba6002ee",
      "item": {
        "type": "paragraph",
        "id": "1d52e91bba6002ee",
        "text": "Common NoRedInk Containers [https://package.elm-lang.org/packages/NoRedInk/noredink-ui/latest/Nri-Ui-Container-V2 package]"
      },
      "after": "ad4b51a1ec34ff95",
      "date": 1696311703989
    },
    {
      "type": "remove",
      "id": "1d52e91bba6002ee",
      "date": 1696311707610
    },
    {
      "type": "edit",
      "id": "ad4b51a1ec34ff95",
      "item": {
        "type": "paragraph",
        "id": "ad4b51a1ec34ff95",
        "text": "⇒ Common NoRedInk Containers [https://package.elm-lang.org/packages/NoRedInk/noredink-ui/latest/Nri-Ui-Container-V2 package]"
      },
      "date": 1696311708587
    },
    {
      "type": "edit",
      "id": "ad4b51a1ec34ff95",
      "item": {
        "type": "paragraph",
        "id": "ad4b51a1ec34ff95",
        "text": "⇒ Common NoRedInk [[Containers]] [https://package.elm-lang.org/packages/NoRedInk/noredink-ui/latest/Nri-Ui-Container-V2 package]"
      },
      "date": 1696311724008
    },
    {
      "item": {
        "type": "factory",
        "id": "ca3450827816371a"
      },
      "id": "ca3450827816371a",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696313217579
    },
    {
      "id": "ca3450827816371a",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "ca3450827816371a",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696313219154
    },
    {
      "type": "edit",
      "id": "ca3450827816371a",
      "item": {
        "type": "paragraph",
        "id": "ca3450827816371a",
        "text": "[[Roman R. Redziejowski]]"
      },
      "date": 1696313229881
    },
    {
      "type": "edit",
      "id": "ca3450827816371a",
      "item": {
        "type": "paragraph",
        "id": "ca3450827816371a",
        "text": "[[Roman R. Redziejowski]] Cut Points in PEG"
      },
      "date": 1696313548612
    },
    {
      "type": "edit",
      "id": "ca3450827816371a",
      "item": {
        "type": "paragraph",
        "id": "ca3450827816371a",
        "text": "[[Roman R. Redziejowski]] ⇒ [[Cut Points in PEG]]"
      },
      "date": 1696313559694
    },
    {
      "type": "edit",
      "id": "ca3450827816371a",
      "item": {
        "type": "paragraph",
        "id": "ca3450827816371a",
        "text": "⇒ [[Roman R. Redziejowski]] ⇒ [[Cut Points in PEG]]"
      },
      "date": 1696313565258
    },
    {
      "type": "remove",
      "id": "ca3450827816371a",
      "date": 1696316258342
    },
    {
      "type": "edit",
      "id": "5139a3b9f4efa289",
      "item": {
        "type": "paragraph",
        "id": "5139a3b9f4efa289",
        "text": "⇒ [[PEG]] ⇒ [[Roman R. Redziejowski]] ⇒ [[Cut Points in PEG]]"
      },
      "date": 1696316259298
    },
    {
      "type": "add",
      "id": "92dab93b4973a595",
      "item": {
        "type": "paragraph",
        "id": "92dab93b4973a595",
        "text": "Parser combinator implementation for Parsing Expression Grammar (PEG) "
      },
      "after": "5139a3b9f4efa289",
      "date": 1696316681199
    },
    {
      "type": "edit",
      "id": "92dab93b4973a595",
      "item": {
        "type": "paragraph",
        "id": "92dab93b4973a595",
        "text": "Parser combinator implementation for Parsing Expression Grammar (PEG) [https://github.com/YuyaAizawa/peg/tree/2.2.0 github], []"
      },
      "date": 1696316697890
    },
    {
      "type": "edit",
      "id": "92dab93b4973a595",
      "item": {
        "type": "paragraph",
        "id": "92dab93b4973a595",
        "text": "Parser combinator implementation for Parsing Expression Grammar (PEG) [https://github.com/YuyaAizawa/peg/tree/2.2.0 github], [https://package.elm-lang.org/packages/YuyaAizawa/peg/latest/ package]"
      },
      "date": 1696316713532
    },
    {
      "type": "add",
      "id": "0214cc186308d392",
      "item": {
        "type": "paragraph",
        "id": "0214cc186308d392",
        "text": "Write your PEG.js grammar"
      },
      "after": "92dab93b4973a595",
      "date": 1696317257975
    },
    {
      "type": "edit",
      "id": "0214cc186308d392",
      "item": {
        "type": "paragraph",
        "id": "0214cc186308d392",
        "text": "Write your PEG.js grammar [https://pegjs.org/online page]"
      },
      "date": 1696317266569
    },
    {
      "type": "edit",
      "id": "0214cc186308d392",
      "item": {
        "type": "paragraph",
        "id": "0214cc186308d392",
        "text": "Write your PEG.js grammar [https://pegjs.org/online page],  A PEG.js Grammar for Elm "
      },
      "date": 1696317281514
    },
    {
      "type": "edit",
      "id": "0214cc186308d392",
      "item": {
        "type": "paragraph",
        "id": "0214cc186308d392",
        "text": "Write your PEG.js grammar [https://pegjs.org/online page],  A PEG.js Grammar for Elm [https://gist.github.com/dynajoe/eeeff72c7ffebc1bb56153078694d90e gist]"
      },
      "date": 1696317295593
    },
    {
      "type": "edit",
      "id": "0214cc186308d392",
      "item": {
        "type": "paragraph",
        "id": "0214cc186308d392",
        "text": "Write your PEG.js grammar [https://pegjs.org/online page],  A PEG.js Grammar for Elm [https://gist.github.com/dynajoe/eeeff72c7ffebc1bb56153078694d90e gist], Creating a parser [post]"
      },
      "date": 1696317358833
    },
    {
      "type": "edit",
      "id": "0214cc186308d392",
      "item": {
        "type": "paragraph",
        "id": "0214cc186308d392",
        "text": "Write your PEG.js grammar [https://pegjs.org/online page],  A PEG.js Grammar for Elm [https://gist.github.com/dynajoe/eeeff72c7ffebc1bb56153078694d90e gist], Creating a parser [https://rundis.github.io/blog/2016/elm_light_ast.html post]"
      },
      "date": 1696317369287
    },
    {
      "type": "edit",
      "id": "0214cc186308d392",
      "item": {
        "type": "paragraph",
        "id": "0214cc186308d392",
        "text": "Write your PEG.js grammar [https://pegjs.org/online page],  A PEG.js Grammar for Elm [https://gist.github.com/dynajoe/eeeff72c7ffebc1bb56153078694d90e gist], Creating a parser [https://rundis.github.io/blog/2016/elm_light_ast.html post] by [[Magnus Rundberget]]"
      },
      "date": 1696317453463
    },
    {
      "item": {
        "type": "factory",
        "id": "ff153fa1335e39d4"
      },
      "id": "ff153fa1335e39d4",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696317463684
    },
    {
      "id": "ff153fa1335e39d4",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "92dab93b4973a595",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696317465553
    },
    {
      "type": "edit",
      "id": "ff153fa1335e39d4",
      "item": {
        "type": "video",
        "id": "ff153fa1335e39d4",
        "text": "YOUTUBE pmMhCRvU9R0"
      },
      "date": 1696317473731
    },
    {
      "type": "edit",
      "id": "ff153fa1335e39d4",
      "item": {
        "type": "video",
        "id": "ff153fa1335e39d4",
        "text": "YOUTUBE pmMhCRvU9R0\nDemo of new AST based features in elm-light. The Elm language plugin for Light Table"
      },
      "date": 1696317510569
    },
    {
      "type": "add",
      "id": "03ea973dcc99f484",
      "item": {
        "type": "paragraph",
        "id": "03ea973dcc99f484",
        "text": "[[Lighttable]]"
      },
      "after": "0214cc186308d392",
      "date": 1696317984065
    },
    {
      "id": "03ea973dcc99f484",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "92dab93b4973a595",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696317987795
    },
    {
      "type": "add",
      "id": "8f069536aa284ba4",
      "item": {
        "type": "paragraph",
        "id": "8f069536aa284ba4",
        "text": "[[TEPA]]"
      },
      "after": "03ea973dcc99f484",
      "date": 1696319197653
    },
    {
      "type": "add",
      "id": "cea804f4e576ebf3",
      "item": {
        "type": "paragraph",
        "id": "cea804f4e576ebf3",
        "text": "PEG syntax and semantics"
      },
      "after": "92dab93b4973a595",
      "date": 1696324683730
    },
    {
      "type": "edit",
      "id": "cea804f4e576ebf3",
      "item": {
        "type": "paragraph",
        "id": "cea804f4e576ebf3",
        "text": "PEG syntax and semantics [https://nim-lang.org/docs/pegs.html page]"
      },
      "date": 1696324697178
    },
    {
      "type": "edit",
      "id": "cea804f4e576ebf3",
      "item": {
        "type": "paragraph",
        "id": "cea804f4e576ebf3",
        "text": "⇒ [[PEG Syntax and Semantics]] [https://nim-lang.org/docs/pegs.html page]"
      },
      "date": 1696324731949
    },
    {
      "type": "edit",
      "id": "cea804f4e576ebf3",
      "item": {
        "type": "paragraph",
        "id": "cea804f4e576ebf3",
        "text": "⇒ [[PEG Syntax and Semantics]] [https://nim-lang.org/docs/pegs.html page], PEG vs regular expression"
      },
      "date": 1696325006013
    },
    {
      "type": "edit",
      "id": "cea804f4e576ebf3",
      "item": {
        "type": "paragraph",
        "id": "cea804f4e576ebf3",
        "text": "⇒ [[PEG Syntax and Semantics]] [https://nim-lang.org/docs/pegs.html page], PEG vs regular expression [https://nim-lang.org/docs/pegs.html#peg-syntax-and-semantics-peg-vs-regular-expression page]"
      },
      "date": 1696325014792
    },
    {
      "type": "edit",
      "id": "5139a3b9f4efa289",
      "item": {
        "type": "paragraph",
        "id": "5139a3b9f4efa289",
        "text": "⇒ [[PEG]] ⇒ [[elm-peg]] ⇒ [[Roman R. Redziejowski]] ⇒ [[Cut Points in PEG]]"
      },
      "date": 1696325273596
    },
    {
      "type": "edit",
      "id": "cea804f4e576ebf3",
      "item": {
        "type": "paragraph",
        "id": "cea804f4e576ebf3",
        "text": "⇒ [[Define a PEG Grammar]] ⇒ [[PEG Syntax and Semantics]] [https://nim-lang.org/docs/pegs.html page], PEG vs regular expression [https://nim-lang.org/docs/pegs.html#peg-syntax-and-semantics-peg-vs-regular-expression page]"
      },
      "date": 1696325300095
    },
    {
      "type": "remove",
      "id": "92dab93b4973a595",
      "date": 1696325327313
    },
    {
      "id": "5ca32937a47c9014",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "5ca32937a47c9014",
        "text": "> As a regular expression \\[.*\\] matches the longest possible text between '[' and ']'. As a PEG it never matches anything, because a PEG is deterministic: .* consumes the rest of the input, so \\] never matches. As a PEG this needs to be written as: \\[ ( !\\] . )* \\] (or \\[ @ \\])."
      },
      "after": "cea804f4e576ebf3",
      "attribution": {
        "page": "2023-10-02"
      },
      "date": 1696325987496
    },
    {
      "item": {
        "type": "factory",
        "id": "21d1617d042553bd"
      },
      "id": "21d1617d042553bd",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696325993133
    },
    {
      "id": "21d1617d042553bd",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696325997697
    },
    {
      "type": "edit",
      "id": "21d1617d042553bd",
      "item": {
        "type": "code",
        "id": "21d1617d042553bd",
        "text": "\\[.*\\]"
      },
      "date": 1696325999370
    },
    {
      "type": "edit",
      "id": "5ca32937a47c9014",
      "item": {
        "type": "markdown",
        "id": "5ca32937a47c9014",
        "text": "> As a regular expression"
      },
      "date": 1696326004434
    },
    {
      "type": "add",
      "id": "31e7543843d8b530",
      "item": {
        "type": "markdown",
        "id": "31e7543843d8b530",
        "text": "\\[.*\\] matches the longest possible text between '[' and ']'. As a PEG it never matches anything, because a PEG is deterministic: .* consumes the rest of the input, so \\] never matches. As a PEG this needs to be written as: \\[ ( !\\] . )* \\] (or \\[ @ \\])."
      },
      "after": "5ca32937a47c9014",
      "date": 1696326005086
    },
    {
      "id": "21d1617d042553bd",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696326007716
    },
    {
      "type": "edit",
      "id": "31e7543843d8b530",
      "item": {
        "type": "markdown",
        "id": "31e7543843d8b530",
        "text": "matches the longest possible text between '[' and ']'. As a PEG it never matches anything, because a PEG is deterministic: .* consumes the rest of the input, so \\] never matches. As a PEG this needs to be written as: \\[ ( !\\] . )* \\] (or \\[ @ \\])."
      },
      "date": 1696326017583
    },
    {
      "type": "edit",
      "id": "31e7543843d8b530",
      "item": {
        "type": "markdown",
        "id": "31e7543843d8b530",
        "text": "> matches the longest possible text between '[' and ']'. As a PEG it never matches anything, because a PEG is deterministic: .* consumes the rest of the input, so \\] never matches. As a PEG this needs to be written as: \\[ ( !\\] . )* \\] (or \\[ @ \\])."
      },
      "date": 1696326024815
    },
    {
      "item": {
        "type": "factory",
        "id": "a6b54240a3734059"
      },
      "id": "a6b54240a3734059",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696326074697
    },
    {
      "id": "a6b54240a3734059",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "a6b54240a3734059",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696326080579
    },
    {
      "type": "edit",
      "id": "31e7543843d8b530",
      "item": {
        "type": "markdown",
        "id": "31e7543843d8b530",
        "text": "> matches the longest possible text between '[' and ']'. As a PEG it never matches anything, because a PEG is deterministic: .* consumes the rest of the input, so \\] never matches. As a PEG this needs to be written as:"
      },
      "date": 1696326089776
    },
    {
      "type": "add",
      "id": "539cc6dcda134243",
      "item": {
        "type": "markdown",
        "id": "539cc6dcda134243",
        "text": "(or \\[ @ \\])."
      },
      "after": "31e7543843d8b530",
      "date": 1696326091970
    },
    {
      "type": "edit",
      "id": "a6b54240a3734059",
      "item": {
        "type": "code",
        "id": "a6b54240a3734059",
        "text": "\\[ ( !\\] . )* \\]"
      },
      "date": 1696326092995
    },
    {
      "id": "a6b54240a3734059",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "a6b54240a3734059",
        "539cc6dcda134243",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696326094931
    },
    {
      "type": "edit",
      "id": "539cc6dcda134243",
      "item": {
        "type": "markdown",
        "id": "539cc6dcda134243",
        "text": "> (or \\[ @ \\])."
      },
      "date": 1696326118329
    },
    {
      "item": {
        "type": "factory",
        "id": "e427bdf5199f7bdb"
      },
      "id": "e427bdf5199f7bdb",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696326120285
    },
    {
      "id": "e427bdf5199f7bdb",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "a6b54240a3734059",
        "539cc6dcda134243",
        "e427bdf5199f7bdb",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696326123733
    },
    {
      "type": "edit",
      "id": "e427bdf5199f7bdb",
      "item": {
        "type": "code",
        "id": "e427bdf5199f7bdb",
        "text": "\\[ @ \\])"
      },
      "date": 1696326134010
    },
    {
      "type": "edit",
      "id": "539cc6dcda134243",
      "item": {
        "type": "markdown",
        "id": "539cc6dcda134243",
        "text": "> (or"
      },
      "date": 1696326142138
    },
    {
      "type": "add",
      "id": "fe6395e1e736d924",
      "item": {
        "type": "markdown",
        "id": "fe6395e1e736d924",
        "text": ")."
      },
      "after": "539cc6dcda134243",
      "date": 1696326143041
    },
    {
      "id": "e427bdf5199f7bdb",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "a6b54240a3734059",
        "539cc6dcda134243",
        "e427bdf5199f7bdb",
        "fe6395e1e736d924",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696326144658
    },
    {
      "type": "edit",
      "id": "fe6395e1e736d924",
      "item": {
        "type": "markdown",
        "id": "fe6395e1e736d924",
        "text": "> )."
      },
      "date": 1696326148557
    },
    {
      "item": {
        "type": "factory",
        "id": "ca527f480b07b95c"
      },
      "id": "ca527f480b07b95c",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696327428028
    },
    {
      "id": "ca527f480b07b95c",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "a6b54240a3734059",
        "539cc6dcda134243",
        "e427bdf5199f7bdb",
        "fe6395e1e736d924",
        "ca527f480b07b95c",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696327434671
    },
    {
      "type": "edit",
      "id": "ca527f480b07b95c",
      "item": {
        "type": "code",
        "id": "ca527f480b07b95c",
        "text": "describe \"Parsing Wiki Links\" [\n    test \"should parse a valid wiki link\" <|\n        \\() ->\n            let\n                input = \"[[Federated Wiki]]\"\n                expected = Ok \"Federated Wiki\"\n                actual = YourModule.parseWikiLink input -- Replace with the actual function you're testing\n            in\n            Expect.equal actual expected\n]\n"
      },
      "date": 1696327436946
    },
    {
      "item": {
        "type": "factory",
        "id": "3dcdc2f1def35198"
      },
      "id": "3dcdc2f1def35198",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696327551092
    },
    {
      "id": "3dcdc2f1def35198",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "a6b54240a3734059",
        "539cc6dcda134243",
        "e427bdf5199f7bdb",
        "fe6395e1e736d924",
        "ca527f480b07b95c",
        "3dcdc2f1def35198",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696327556077
    },
    {
      "type": "edit",
      "id": "3dcdc2f1def35198",
      "item": {
        "type": "code",
        "id": "3dcdc2f1def35198",
        "text": "main =\n    case result of\n        Ok value ->\n            Html.text (\"Parsed value: \" ++ value)\n\n        Err error ->\n            Html.text (\"Parse error: \" ++ error.message)\n"
      },
      "date": 1696327559723
    },
    {
      "item": {
        "type": "factory",
        "id": "3370c97a92de842e"
      },
      "id": "3370c97a92de842e",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696327569278
    },
    {
      "id": "3370c97a92de842e",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "a6b54240a3734059",
        "539cc6dcda134243",
        "e427bdf5199f7bdb",
        "fe6395e1e736d924",
        "ca527f480b07b95c",
        "3370c97a92de842e",
        "3dcdc2f1def35198",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696327576595
    },
    {
      "type": "edit",
      "id": "3370c97a92de842e",
      "item": {
        "type": "paragraph",
        "id": "3370c97a92de842e",
        "text": "[https://github.com/RalfBarkow/vite-elm-dojo/blob/2ab35e7aa4a01059dafeaa192b571c6ba187c88b/src/Main.elm#L41-L48 code]"
      },
      "date": 1696327581974
    },
    {
      "type": "edit",
      "id": "ca527f480b07b95c",
      "item": {
        "type": "code",
        "id": "ca527f480b07b95c",
        "text": "module MainSpec exposing (suite)\n\nimport Expect\nimport Main exposing (result)\nimport Test exposing (..)\n\n\nsuite : Test\nsuite =\n    describe \"Parsing Expression Grammar (PEG)\"\n        [ test \"should parse 'abc' and convert it to all upper case 'ABC' with an action.\" <|\n            \\() ->\n                let\n                    expected =\n                        Ok \"ABC\"\n\n                    actual =\n                        result\n                in\n                Expect.equal actual expected\n        ]\n"
      },
      "date": 1696330789471
    },
    {
      "item": {
        "type": "factory",
        "id": "efa12ef7721f363e"
      },
      "id": "efa12ef7721f363e",
      "type": "add",
      "after": "ad4b51a1ec34ff95",
      "date": 1696330802976
    },
    {
      "id": "efa12ef7721f363e",
      "type": "move",
      "order": [
        "5139a3b9f4efa289",
        "cea804f4e576ebf3",
        "5ca32937a47c9014",
        "21d1617d042553bd",
        "31e7543843d8b530",
        "a6b54240a3734059",
        "539cc6dcda134243",
        "e427bdf5199f7bdb",
        "fe6395e1e736d924",
        "efa12ef7721f363e",
        "ca527f480b07b95c",
        "3370c97a92de842e",
        "3dcdc2f1def35198",
        "0214cc186308d392",
        "ff153fa1335e39d4",
        "03ea973dcc99f484",
        "8f069536aa284ba4",
        "424e6d37e2665c91",
        "4bb4d4e8c6cd6e7a",
        "ad4b51a1ec34ff95"
      ],
      "date": 1696330808862
    },
    {
      "type": "edit",
      "id": "efa12ef7721f363e",
      "item": {
        "type": "paragraph",
        "id": "efa12ef7721f363e",
        "text": "Test case [https://github.com/RalfBarkow/vite-elm-dojo/blob/aea8bfef364dc22e80362dd2285807fde9b897d0/tests/MainSpec.elm#L1-L22 code]"
      },
      "date": 1696330819013
    },
    {
      "type": "edit",
      "id": "efa12ef7721f363e",
      "item": {
        "type": "paragraph",
        "id": "efa12ef7721f363e",
        "text": "Test case [https://github.com/RalfBarkow/vite-elm-dojo/blob/aea8bfef364dc22e80362dd2285807fde9b897d0/tests/MainSpec.elm#L1-L22 code]:"
      },
      "date": 1696330832489
    },
    {
      "type": "edit",
      "id": "efa12ef7721f363e",
      "item": {
        "type": "paragraph",
        "id": "efa12ef7721f363e",
        "text": "Test case [https://github.com/RalfBarkow/vite-elm-dojo/blob/aea8bfef364dc22e80362dd2285807fde9b897d0/tests/MainSpec.elm#L1-L22 code]"
      },
      "date": 1696330837570
    }
  ]
}