{
  "title": "Search in Patricia‚Äôs Tree",
  "story": [
    {
      "type": "paragraph",
      "id": "948f55a82d1ec596",
      "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
    },
    {
      "type": "paragraph",
      "id": "9240534064719218",
      "text": "The bit pattern `10111 01000 00101` represents a sequence of bits, but without specific context or information about the encoding scheme being used, it's not possible to determine its meaning. In different contexts and encoding schemes, the same sequence of bits could represent entirely different things.\n\nFor example:\n\n- In ASCII encoding, a sequence of bits like this would typically represent characters. However, without knowing the encoding (ASCII, UTF-8, etc.), we can't determine the characters it represents."
    },
    {
      "type": "paragraph",
      "id": "0fbcc5b6b658b189",
      "text": "- In a custom binary protocol, these bits might represent various fields or commands, but we would need knowledge of that protocol to interpret it."
    },
    {
      "type": "paragraph",
      "id": "dbf9ceee7f19033f",
      "text": "- In a numerical context, it might represent an integer or some other numerical value.\n\nWithout further information about the context and encoding being used, I (ChatGPT) can't provide a specific meaning for this bit pattern. If you have additional details about where this bit pattern comes from or how it's intended to be interpreted, I'd be happy to try to help further."
    },
    {
      "type": "paragraph",
      "id": "cccda01fcad789b0",
      "text": "In order to provide binary data for this illustration, the words have been expressed in [[MIX Character Code]], and the codes have been converted into binary numbers with 5 bits per byte. Thus, the word WHICH is represented as the bit sequence 11010 01000 01001 00011 01000. (TAOCP, v. 3, p. 496)"
    },
    {
      "type": "paragraph",
      "id": "39583247f77ee477",
      "text": "Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
    },
    {
      "type": "image",
      "id": "ff15fbf8b579c57f",
      "text": "Fig. 33. An example of Patricia's tree and TEXT. (TAOCP, v. 3, p. 498)",
      "size": "wide",
      "width": 430,
      "height": 344,
      "url": "/assets/plugins/image/7415af4b0b7b316f81c001ebe222e33c.jpg"
    },
    {
      "type": "paragraph",
      "id": "3e5e76b4ea986c96",
      "text": "We start by looking at the SKIP field of the root node ùõº, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, ùõæ, tells us to look at the 1 + 11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, ùúÄ, tells us to look at the (12 + 1)st bit, which is 1; now we find RTAG = 1, so we go back to node ùõæ, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is 1xxxx xxxxx x01..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
    },
    {
      "type": "paragraph",
      "id": "3fa33e670df159ff",
      "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (non-existent) [‚áí [[Non-existence]]] 12th bit of the 10-bit argument."
    },
    {
      "type": "markdown",
      "id": "9c93e942732df762",
      "text": "At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
    },
    {
      "type": "pagefold",
      "id": "85c5256086f347b9",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "4176ec68350609ce",
      "text": "‚áí [[Pile vs Neural Networks]] ‚áí [[Pile]] "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Search in Patricia‚Äôs Tree",
        "story": []
      },
      "date": 1695194003123
    },
    {
      "id": "948f55a82d1ec596",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "948f55a82d1ec596",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "attribution": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695194006263
    },
    {
      "id": "9240534064719218",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9240534064719218",
        "text": "The bit pattern `10111 01000 00101` represents a sequence of bits, but without specific context or information about the encoding scheme being used, it's not possible to determine its meaning. In different contexts and encoding schemes, the same sequence of bits could represent entirely different things.\n\nFor example:\n\n- In ASCII encoding, a sequence of bits like this would typically represent characters. However, without knowing the encoding (ASCII, UTF-8, etc.), we can't determine the characters it represents."
      },
      "after": "948f55a82d1ec596",
      "attribution": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695194009557
    },
    {
      "id": "0fbcc5b6b658b189",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0fbcc5b6b658b189",
        "text": "- In a custom binary protocol, these bits might represent various fields or commands, but we would need knowledge of that protocol to interpret it."
      },
      "after": "9240534064719218",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194023730
    },
    {
      "id": "dbf9ceee7f19033f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "dbf9ceee7f19033f",
        "text": "- In a numerical context, it might represent an integer or some other numerical value.\n\nWithout further information about the context and encoding being used, I (ChatGPT) can't provide a specific meaning for this bit pattern. If you have additional details about where this bit pattern comes from or how it's intended to be interpreted, I'd be happy to try to help further."
      },
      "after": "0fbcc5b6b658b189",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194026950
    },
    {
      "id": "cccda01fcad789b0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cccda01fcad789b0",
        "text": "In order to provide binary data for this illustration, the words have been expressed in [[MIX Character Code]], and the codes have been converted into binary numbers with 5 bits per byte. Thus, the word WHICH is represented as the bit sequence 11010 01000 01001 00011 01000. (TAOCP, v. 3, p. 496)"
      },
      "after": "dbf9ceee7f19033f",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194033018
    },
    {
      "id": "39583247f77ee477",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "39583247f77ee477",
        "text": "Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "after": "cccda01fcad789b0",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194035153
    },
    {
      "id": "ff15fbf8b579c57f",
      "type": "add",
      "item": {
        "type": "image",
        "id": "ff15fbf8b579c57f",
        "text": "Fig. 33. An example of Patricia's tree and TEXT. (TAOCP, v. 3, p. 498)",
        "size": "wide",
        "width": 430,
        "height": 344,
        "url": "/assets/plugins/image/7415af4b0b7b316f81c001ebe222e33c.jpg"
      },
      "after": "39583247f77ee477",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194038536
    },
    {
      "id": "3e5e76b4ea986c96",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3e5e76b4ea986c96",
        "text": "We start by looking at the SKIP field of the root node ùõº, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, ùõæ, tells us to look at the 1 + 11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, ùúÄ, tells us to look at the (12 + 1)st bit, which is 1; now we find RTAG = 1, so we go back to node ùõæ, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is 1xxxx xxxxx x01..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
      },
      "after": "ff15fbf8b579c57f",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194128396
    },
    {
      "id": "c2958a7cb83bd9b3",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "after": "3e5e76b4ea986c96",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194769314
    },
    {
      "item": {
        "type": "factory",
        "id": "85c5256086f347b9"
      },
      "id": "85c5256086f347b9",
      "type": "add",
      "after": "c2958a7cb83bd9b3",
      "date": 1695195027080
    },
    {
      "id": "4176ec68350609ce",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4176ec68350609ce",
        "text": "‚áí [[Pile vs Neural Networks]]"
      },
      "after": "c2958a7cb83bd9b3",
      "attribution": {
        "page": "Pile"
      },
      "date": 1695195035764
    },
    {
      "id": "85c5256086f347b9",
      "type": "move",
      "order": [
        "948f55a82d1ec596",
        "9240534064719218",
        "0fbcc5b6b658b189",
        "dbf9ceee7f19033f",
        "cccda01fcad789b0",
        "39583247f77ee477",
        "ff15fbf8b579c57f",
        "3e5e76b4ea986c96",
        "c2958a7cb83bd9b3",
        "85c5256086f347b9",
        "4176ec68350609ce"
      ],
      "date": 1695195039074
    },
    {
      "type": "edit",
      "id": "85c5256086f347b9",
      "item": {
        "type": "pagefold",
        "id": "85c5256086f347b9",
        "text": "~"
      },
      "date": 1695195043101
    },
    {
      "type": "edit",
      "id": "4176ec68350609ce",
      "item": {
        "type": "paragraph",
        "id": "4176ec68350609ce",
        "text": "‚áí [[Pile]] ‚áí [[Pile vs Neural Networks]]"
      },
      "date": 1695195072439
    },
    {
      "type": "edit",
      "id": "4176ec68350609ce",
      "item": {
        "type": "paragraph",
        "id": "4176ec68350609ce",
        "text": "‚áí [[Pile vs Neural Networks]] ‚áí [[Pile]] "
      },
      "date": 1695195129773
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (non-existent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695212447889
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (non-existent) 12th bit of the 10-bit argument. [‚áí [[Non-existence]]] At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695212478718
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (non-existent [‚áí [[Non-existence]]]) 12th bit of the 10-bit argument.  At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695212503341
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (non-existent) [‚áí [[Non-existence]]] 12th bit of the 10-bit argument.  At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695212520217
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (non-existent) [‚áí [[Non-existence]]] 12th bit of the 10-bit argument."
      },
      "date": 1695212540450
    },
    {
      "type": "add",
      "id": "9c93e942732df762",
      "item": {
        "type": "markdown",
        "id": "9c93e942732df762",
        "text": "At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "after": "c2958a7cb83bd9b3",
      "date": 1695212541084
    },
    {
      "item": {
        "type": "factory",
        "id": "3fa33e670df159ff"
      },
      "id": "3fa33e670df159ff",
      "type": "add",
      "after": "4176ec68350609ce",
      "date": 1695212550666
    },
    {
      "id": "3fa33e670df159ff",
      "type": "move",
      "order": [
        "948f55a82d1ec596",
        "9240534064719218",
        "0fbcc5b6b658b189",
        "dbf9ceee7f19033f",
        "cccda01fcad789b0",
        "39583247f77ee477",
        "ff15fbf8b579c57f",
        "3e5e76b4ea986c96",
        "c2958a7cb83bd9b3",
        "3fa33e670df159ff",
        "9c93e942732df762",
        "85c5256086f347b9",
        "4176ec68350609ce"
      ],
      "date": 1695212553817
    },
    {
      "type": "remove",
      "id": "c2958a7cb83bd9b3",
      "date": 1695212559272
    },
    {
      "type": "edit",
      "id": "3fa33e670df159ff",
      "item": {
        "type": "paragraph",
        "id": "3fa33e670df159ff",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (non-existent) [‚áí [[Non-existence]]] 12th bit of the 10-bit argument."
      },
      "date": 1695212561018
    }
  ]
}