{
  "title": "Patricia’s Tree",
  "story": [
    {
      "type": "paragraph",
      "id": "d1867df4931a57d0",
      "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. It consists of a header and N −1 nodes, where the nodes contain several fields:"
    },
    {
      "type": "paragraph",
      "id": "36a9b6917261a24a",
      "text": "KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of “(JACK)” the node would contain the number 24 (which indicates the starting place of “JACK BUILT?” in the text string)."
    },
    {
      "type": "paragraph",
      "id": "26afba64ec0ae49e",
      "text": "LLINK and RLINK, pointers within the tree. These fields must be at least lg N bits long."
    },
    {
      "type": "paragraph",
      "id": "b4d1d9260a0732f5",
      "text": "LTAG and RTAG, one-bit fields that tell whether or not LLINK and RLINK, respectively, are pointers to children or to ancestors of the node. The dotted lines in Fig. 33 correspond to pointers whose TAG bit is 1."
    },
    {
      "type": "paragraph",
      "id": "c2587b0bf89bda78",
      "text": "SKIP, a number that tells how many bits to skip when searching, as explained below. This field should be large enough to hold the largest number k such that all keys with prefix σ agree in the next k bits following σ, for some string σ that is a prefix of at least two different keys; in practice, we may usually assume that k isn’t too large, and an error indication can be given if the size of the SKIP field is exceeded. The SKIP fields are shown as numbers within each non-header node of Fig. 33."
    },
    {
      "type": "paragraph",
      "id": "32e859c2f38cd4c1",
      "text": "The header contains only KEY, LLINK, and LTAG fields."
    },
    {
      "type": "paragraph",
      "id": "7076ade87e0252ed",
      "text": "⇒ [[Search in Patricia’s Tree]]"
    },
    {
      "type": "pagefold",
      "id": "3ea694ab055cfef3",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "323a400f7fe792cb",
      "text": "TAOCP, v. 3, p. 499"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Patricia’s Tree",
        "story": []
      },
      "date": 1695193914453
    },
    {
      "id": "948f55a82d1ec596",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "948f55a82d1ec596",
        "text": "A search in [[Patricia]]’s tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695193921145
    },
    {
      "id": "9240534064719218",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9240534064719218",
        "text": "The bit pattern `10111 01000 00101` represents a sequence of bits, but without specific context or information about the encoding scheme being used, it's not possible to determine its meaning. In different contexts and encoding schemes, the same sequence of bits could represent entirely different things.\n\nFor example:\n\n- In ASCII encoding, a sequence of bits like this would typically represent characters. However, without knowing the encoding (ASCII, UTF-8, etc.), we can't determine the characters it represents."
      },
      "after": "948f55a82d1ec596",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695193923237
    },
    {
      "id": "948f55a82d1ec596",
      "type": "remove",
      "removedTo": {
        "page": "Search in Patricia’s Tree"
      },
      "date": 1695194006261
    },
    {
      "id": "9240534064719218",
      "type": "remove",
      "removedTo": {
        "page": "Search in Patricia’s Tree"
      },
      "date": 1695194009556
    },
    {
      "id": "d1867df4931a57d0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. It consists of a header and N −1 nodes, where the nodes contain several fields:"
      },
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194058004
    },
    {
      "id": "36a9b6917261a24a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "36a9b6917261a24a",
        "text": "KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of “(JACK)” the node would contain the number 24 (which indicates the starting place of “JACK BUILT?” in the text string)."
      },
      "after": "d1867df4931a57d0",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194064020
    },
    {
      "id": "26afba64ec0ae49e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "26afba64ec0ae49e",
        "text": "LLINK and RLINK, pointers within the tree. These fields must be at least lg N bits long."
      },
      "after": "36a9b6917261a24a",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194068577
    },
    {
      "id": "b4d1d9260a0732f5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b4d1d9260a0732f5",
        "text": "LTAG and RTAG, one-bit fields that tell whether or not LLINK and RLINK, respectively, are pointers to children or to ancestors of the node. The dotted lines in Fig. 33 correspond to pointers whose TAG bit is 1."
      },
      "after": "26afba64ec0ae49e",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194072288
    },
    {
      "id": "c2587b0bf89bda78",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c2587b0bf89bda78",
        "text": "SKIP, a number that tells how many bits to skip when searching, as explained below. This field should be large enough to hold the largest number k such that all keys with prefix σ agree in the next k bits following σ, for some string σ that is a prefix of at least two different keys; in practice, we may usually assume that k isn’t too large, and an error indication can be given if the size of the SKIP field is exceeded. The SKIP fields are shown as numbers within each non-header node of Fig. 33."
      },
      "after": "b4d1d9260a0732f5",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194076025
    },
    {
      "id": "32e859c2f38cd4c1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "32e859c2f38cd4c1",
        "text": "The header contains only KEY, LLINK, and LTAG fields."
      },
      "after": "c2587b0bf89bda78",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194091635
    },
    {
      "id": "7076ade87e0252ed",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "⇒ [[Patricia’s Tree]] ⇒ [[Search in Patricia’s Tree]]"
      },
      "after": "32e859c2f38cd4c1",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194189403
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "⇒ [[Search in Patricia’s Tree]]"
      },
      "date": 1695194200285
    },
    {
      "item": {
        "type": "factory",
        "id": "3ea694ab055cfef3"
      },
      "id": "3ea694ab055cfef3",
      "type": "add",
      "after": "7076ade87e0252ed",
      "date": 1695194202072
    },
    {
      "type": "edit",
      "id": "3ea694ab055cfef3",
      "item": {
        "type": "pagefold",
        "id": "3ea694ab055cfef3",
        "text": "~"
      },
      "date": 1695194206793
    },
    {
      "id": "323a400f7fe792cb",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "323a400f7fe792cb",
        "text": "A search in [[Patricia]]’s tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "after": "3ea694ab055cfef3",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695194231475
    },
    {
      "type": "edit",
      "id": "323a400f7fe792cb",
      "item": {
        "type": "paragraph",
        "id": "323a400f7fe792cb",
        "text": "TAOCP, v. 3, p. 499"
      },
      "date": 1695194241082
    }
  ]
}