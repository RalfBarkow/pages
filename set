{
  "title": "Set",
  "story": [
    {
      "type": "markdown",
      "id": "4f49e0564c57ee16",
      "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\n\n"
    },
    {
      "type": "markdown",
      "id": "d0aa272dd813e699",
      "text": "The core operation is `#findElementOrNil:`, which either finds the position where an object is stored in array, if it is present, or finds a suitable position holding nil, if its argument is not present in array.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "b1f6dc1cd7e8f1fc",
      "text": "### Instance structure:\n\n- `array`\tAn array whose non-nil elements are the elements of the set, and whose nil elements are empty slots.  There is always at least one nil. [https://twitter.com/RalfBarkow/status/1567032563515985922?s=20&t=R1viVpJZWiSoNNQksP00Ug tweet]\n\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  `tally`\tThe number of elements in the set.  The array size is always greater than this.\n\n"
    }
  ],
  "journal": [
    {
      "item": {
        "type": "paragraph",
        "id": "dc6bc8b165ec55d1",
        "text": ""
      },
      "id": "dc6bc8b165ec55d1",
      "type": "add",
      "date": 1662444308484
    },
    {
      "type": "remove",
      "id": "dc6bc8b165ec55d1",
      "date": 1662444312720
    },
    {
      "item": {
        "type": "markdown",
        "id": "4f49e0564c57ee16",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to\n`#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an\nobject is stored in array, if it is present, or finds a suitable position holding nil, if\nits argument is not present in array.\n\n### Instance structure:\n\n- array\tAn array whose non-nil elements are the elements of the set,\n  and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  tally\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "id": "4f49e0564c57ee16",
      "type": "add",
      "date": 1662444314096
    },
    {
      "type": "edit",
      "id": "4f49e0564c57ee16",
      "item": {
        "type": "markdown",
        "id": "4f49e0564c57ee16",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to\n`#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an\nobject is stored in array, if it is present, or finds a suitable position holding nil, if\nits argument is not present in array.\n\n### Instance structure:\n\n- array\tAn array whose non-nil elements are the elements of the set,\n  and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  tally\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1662444316160
    },
    {
      "type": "fork",
      "date": 1662444317735
    },
    {
      "type": "edit",
      "id": "4f49e0564c57ee16",
      "item": {
        "type": "markdown",
        "id": "4f49e0564c57ee16",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to\n`#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an\nobject is stored in array, if it is present, or finds a suitable position holding nil, if\nits argument is not present in array.\n\n### Instance structure:\n\n- array\tAn array whose non-nil elements are the elements of the set, and whose nil elements are empty slots.  There is always at least one nil. [https://twitter.com/RalfBarkow/status/1567032563515985922?s=20&t=R1viVpJZWiSoNNQksP00Ug tweet]\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  tally\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1662444779348
    },
    {
      "type": "edit",
      "id": "4f49e0564c57ee16",
      "item": {
        "type": "markdown",
        "id": "4f49e0564c57ee16",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to\n`#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\n\n"
      },
      "date": 1662444826785
    },
    {
      "type": "add",
      "id": "d0aa272dd813e699",
      "item": {
        "type": "markdown",
        "id": "d0aa272dd813e699",
        "text": "The core operation is #find`ElementOrNil:`, which either finds the position where an\nobject is stored in array, if it is present, or finds a suitable position holding nil, if\nits argument is not present in array.\n\n\n"
      },
      "after": "4f49e0564c57ee16",
      "date": 1662444830757
    },
    {
      "type": "add",
      "id": "b1f6dc1cd7e8f1fc",
      "item": {
        "type": "markdown",
        "id": "b1f6dc1cd7e8f1fc",
        "text": "### Instance structure:\n\n- `array`\tAn array whose non-nil elements are the elements of the set, and whose nil elements are empty slots.  There is always at least one nil. [https://twitter.com/RalfBarkow/status/1567032563515985922?s=20&t=R1viVpJZWiSoNNQksP00Ug tweet]\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  `tally`\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "after": "d0aa272dd813e699",
      "date": 1662444846032
    },
    {
      "type": "edit",
      "id": "b1f6dc1cd7e8f1fc",
      "item": {
        "type": "markdown",
        "id": "b1f6dc1cd7e8f1fc",
        "text": "### Instance structure:\n\n- `array`\tAn array whose non-nil elements are the elements of the set, and whose nil elements are empty slots.  There is always at least one nil. [https://twitter.com/RalfBarkow/status/1567032563515985922?s=20&t=R1viVpJZWiSoNNQksP00Ug tweet]\n\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  `tally`\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1662444857743
    },
    {
      "type": "edit",
      "id": "4f49e0564c57ee16",
      "item": {
        "type": "markdown",
        "id": "4f49e0564c57ee16",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\n\n"
      },
      "date": 1662444885483
    },
    {
      "type": "edit",
      "id": "d0aa272dd813e699",
      "item": {
        "type": "markdown",
        "id": "d0aa272dd813e699",
        "text": "The core operation is #find`ElementOrNil:`, which either finds the position where an object is stored in array, if it is present, or finds a suitable position holding nil, if its argument is not present in array.\n\n\n"
      },
      "date": 1662444913749
    },
    {
      "type": "edit",
      "id": "d0aa272dd813e699",
      "item": {
        "type": "markdown",
        "id": "d0aa272dd813e699",
        "text": "The core operation is `#findElementOrNil:`, which either finds the position where an object is stored in array, if it is present, or finds a suitable position holding nil, if its argument is not present in array.\n\n\n"
      },
      "date": 1662444924760
    }
  ]
}