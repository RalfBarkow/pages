{
  "title": "Set",
  "story": [
    {
      "type": "markdown",
      "id": "052fd8e0b608b773",
      "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\n\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is `#findElementOrNil:`, which either finds the position where an object is stored in array, if it is present, or finds a suitable position holding nil, if its argument is not present in array.\n\n### Instance structure:\n\n- `array`\tAn array whose non-nil elements are the elements of the set, and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  `tally`\tThe number of elements in the set.  The array size is always greater than this.\n\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Set",
        "story": []
      },
      "date": 1661278957041
    },
    {
      "item": {
        "type": "factory",
        "id": "052fd8e0b608b773"
      },
      "id": "052fd8e0b608b773",
      "type": "add",
      "date": 1661278964216
    },
    {
      "type": "edit",
      "id": "052fd8e0b608b773",
      "item": {
        "type": "markdown",
        "id": "052fd8e0b608b773",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to\n`#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an\nobject is stored in array, if it is present, or finds a suitable position holding nil, if\nits argument is not present in array.\n\n### Instance structure:\n\n- array\tAn array whose non-nil elements are the elements of the set,\n  and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  tally\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1661278967189
    },
    {
      "type": "edit",
      "id": "052fd8e0b608b773",
      "item": {
        "type": "markdown",
        "id": "052fd8e0b608b773",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an\nobject is stored in array, if it is present, or finds a suitable position holding nil, if\nits argument is not present in array.\n\n### Instance structure:\n\n- array\tAn array whose non-nil elements are the elements of the set,\n  and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  tally\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1661278987163
    },
    {
      "type": "edit",
      "id": "052fd8e0b608b773",
      "item": {
        "type": "markdown",
        "id": "052fd8e0b608b773",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\n\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an\nobject is stored in array, if it is present, or finds a suitable position holding nil, if\nits argument is not present in array.\n\n### Instance structure:\n\n- array\tAn array whose non-nil elements are the elements of the set,\n  and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  tally\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1661279033017
    },
    {
      "type": "edit",
      "id": "052fd8e0b608b773",
      "item": {
        "type": "markdown",
        "id": "052fd8e0b608b773",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\n\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an object is stored in array, if it is present, or finds a suitable position holding nil, if its argument is not present in array.\n\n### Instance structure:\n\n- array\tAn array whose non-nil elements are the elements of the set,\n  and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  tally\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1661279043433
    },
    {
      "type": "edit",
      "id": "052fd8e0b608b773",
      "item": {
        "type": "markdown",
        "id": "052fd8e0b608b773",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\n\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an object is stored in array, if it is present, or finds a suitable position holding nil, if its argument is not present in array.\n\n### Instance structure:\n\n- `array`\tAn array whose non-nil elements are the elements of the set,\n  and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  `tally`\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1661279078622
    },
    {
      "type": "edit",
      "id": "052fd8e0b608b773",
      "item": {
        "type": "markdown",
        "id": "052fd8e0b608b773",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\n\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is #find`ElementOrNil:`, which either finds the position where an object is stored in array, if it is present, or finds a suitable position holding nil, if its argument is not present in array.\n\n### Instance structure:\n\n- `array`\tAn array whose non-nil elements are the elements of the set, and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  `tally`\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1661279090881
    },
    {
      "type": "edit",
      "id": "052fd8e0b608b773",
      "item": {
        "type": "markdown",
        "id": "052fd8e0b608b773",
        "text": "I represent a set of objects without duplicates.  I can hold anything that responds to `#hash` and `#=`, except for nil.  My instances will automatically grow, if necessary,\n\nNote that I rely on `#=`, not `#==`.  If you want a set using `#==`, use `IdentitySet`.\n\n\nThe core operation is `#findElementOrNil:`, which either finds the position where an object is stored in array, if it is present, or finds a suitable position holding nil, if its argument is not present in array.\n\n### Instance structure:\n\n- `array`\tAn array whose non-nil elements are the elements of the set, and whose nil elements are empty slots.  There is always at least one nil.\n  In fact I try to keep my \"load\" at 75% or less so that hashing will work well.\n\n-  `tally`\tThe number of elements in the set.  The array size is always greater than this.\n\n"
      },
      "date": 1661279828007
    }
  ]
}