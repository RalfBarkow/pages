{
  "title": "2022-05-23",
  "story": [
    {
      "type": "paragraph",
      "id": "4f1e62d0e41dbf95",
      "text": "⇒ [[IDE4PLC]]"
    },
    {
      "type": "markdown",
      "id": "a22469ec6e4c58a8",
      "text": "\nPERNIA, Eric N., 2013. Diseño de software y hardware de un Controlador Lógico Programable (PLC) y su entorno de programación – TALeS. Online. 2013. [Accessed 24 May 2022]. Available from: http://tales.blog.unq.edu.ar/diseno-de-software-y-hardware-de-un-controlador-logico-programable-plc-y-su-entorno-de-programacion/\n"
    },
    {
      "type": "paragraph",
      "id": "e2d13bad9725ccb4",
      "text": "This final work presents the design of a PLC and its programming environment. The general principles of this design are: the strict following of the [[IEC 61131]] Standard, the possibility of building a PLC with low hardware cost, the use of tools that can run in multiple operating systems, the adaptability of the software generated from the programming environment to any controller architecture, and the inclusion of program editing facilities (particularly in graphic languages) that correspond to the state of the art reflected in the most widely used commercial tools.\n\nIn this way, we obtain a PLC design and its programming environment which are independent from the hardware, achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller.\n\nEric N. Pernia\nTitle: Software and Hardware Design of a Programmable Logic Controller (PLC) and its programming environment.\nDirector: Carlos Lombardi\nPublic defense of the thesis: November 2013\nJury: José Juárez, Leonardo Gassman and Félix Safar\nStatus: Approved\n\nThesis file: [http://tales.blog.unq.edu.ar/wp-content/uploads/sites/102/2020/03/Informe-TF-IACI-UNQ-Eric-N.-Pernia.pdf TF Report IACI UNQ Eric N. Pernia.pdf]"
    },
    {
      "type": "paragraph",
      "id": "7e3ad6977c495c3c",
      "text": "This final work presents the design of a PLC and its programming environment. The general principles of this design are: the strict following of the IEC 61131 Standard, the possibility of building a PLC with low hardware cost, the use of tools that can run in multiple operating systems, the adaptability of the software generated from the programming environment to any controller architecture, and the inclusion of program editing facilities (particularly in graphical languages) that correspond to the state of the art reflected in the most widely used commercial tools. "
    },
    {
      "type": "paragraph",
      "id": "646e8a2b55ccf858",
      "text": "In this way, we obtain a PLC design and its programming environment, which are independent from the hardware achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller. "
    },
    {
      "type": "paragraph",
      "id": "5bf055cc584face6",
      "text": "Included in this proposal are: "
    },
    {
      "type": "paragraph",
      "id": "b4808a50d19d4b34",
      "text": "* A general hardware design for a micro PLC that favors low cost and adequate performance implementations. "
    },
    {
      "type": "paragraph",
      "id": "0c2bfd85e8f835b7",
      "text": "* A user interface design of the programming environment, with screen formats, interactions between the different screens, and general usability indications. "
    },
    {
      "type": "paragraph",
      "id": "385b1631f8528f24",
      "text": "* A specification of the computational model of the PLC programming concepts included in the IEC 61131 standard, conceived from the fundamental principles of object programming. "
    },
    {
      "type": "paragraph",
      "id": "bf60a7485051f846",
      "text": "* The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. "
    },
    {
      "type": "paragraph",
      "id": "1d634b73aed53629",
      "text": "To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. "
    },
    {
      "type": "paragraph",
      "id": "7939cd7600f210fe",
      "text": "In particular, in order to guarantee hardware independence, [[freeRTOS]] was chosen as the PLC operating system, which has \"ports\" for most of the microcontrollers in the market. In freeRTOS it is referred to as \"ports\" the hardware-dependent software layer, i.e. the microcontroller."
    },
    {
      "type": "paragraph",
      "id": "80dcc779b96754d2",
      "text": "The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
    },
    {
      "type": "graphviz",
      "id": "78d4f43bdffe121f",
      "text": "DOT strict digraph\n  \nrankdir=LR\n\n  node [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n  HERE NODE\n\n    node [style=filled fillcolor=lightblue]\n    WHERE /^⇒/\n      LINKS HERE -> NODE\n          node [style=filled fillcolor=white]\n          HERE NODE\n            WHERE /^⇒/\n              LINKS HERE -> NODE\n\n    node [style=filled fillcolor=white penwidth=3 color=black]\n    LINKS HERE -> NODE\n       node [style=filled fillcolor=white penwidth=1 color=black]\n       HERE NODE\n         LINKS HERE -> NODE\n\n   node [style=\"filled,rounded,dotted\" fillcolor=white]\n   edge [style=dotted]\n   HERE NODE\n      BACKLINKS NODE -> HERE"
    },
    {
      "type": "pagefold",
      "id": "074eaa053d104d1c",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "89debdfa882dffbe",
      "site": "thompson.reimage.fed.wiki",
      "slug": "garden-cultivating",
      "title": "Garden Cultivating",
      "text": "Story of 31 pages with 15515 words and 77 more links."
    },
    {
      "type": "reference",
      "id": "c37bddb75eb1a550",
      "site": "dayton.fed.wiki",
      "slug": "learning-cycles",
      "title": "Learning Cycles",
      "text": "The key to the transformative power of Agile is fast, iterative learning cycles."
    },
    {
      "type": "reference",
      "id": "5a1803e115947aac",
      "site": "dev2.wiki.innovateoregon.org",
      "slug": "joy-felt",
      "title": "Joy Felt",
      "text": "# Intention"
    },
    {
      "type": "reference",
      "id": "26f8c69d6f9ecf68",
      "site": "wiki.ralfbarkow.ch",
      "slug": "wards-afterword",
      "title": "Ward’s Afterword",
      "text": "Two decades ago a small group met to share what they felt was new about how they  developed software. Their operational observations were expressed as unexpected preferences and collectively dubbed “agile.” The word stuck. But we might ask, what lead  them to the [[Agile Manifesto]], this unusual agreement?"
    },
    {
      "type": "reference",
      "id": "8616ff5cf36077ef",
      "site": "wellspring.fed.wiki",
      "slug": "using-the-model-of-positive-deviancy",
      "title": "Using the Model of Positive Deviancy",
      "text": "I was introduced to model of positive deviancy by Martin Etherington, who was, at that time, the Chief Marketing Officer at Tektronix. We were working together to introduce new marketing models in his organization."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-05-23",
        "story": []
      },
      "date": 1653285573748
    },
    {
      "item": {
        "type": "factory",
        "id": "4f1e62d0e41dbf95"
      },
      "id": "4f1e62d0e41dbf95",
      "type": "add",
      "date": 1653285575623
    },
    {
      "type": "edit",
      "id": "4f1e62d0e41dbf95",
      "item": {
        "type": "paragraph",
        "id": "4f1e62d0e41dbf95",
        "text": "[[IDE4PLC]]"
      },
      "date": 1653285581312
    },
    {
      "type": "edit",
      "id": "4f1e62d0e41dbf95",
      "item": {
        "type": "paragraph",
        "id": "4f1e62d0e41dbf95",
        "text": "⇒ [[IDE4PLC]]"
      },
      "date": 1653285597230
    },
    {
      "item": {
        "type": "factory",
        "id": "78d4f43bdffe121f"
      },
      "id": "78d4f43bdffe121f",
      "type": "add",
      "after": "4f1e62d0e41dbf95",
      "date": 1653285629348
    },
    {
      "type": "edit",
      "id": "78d4f43bdffe121f",
      "item": {
        "type": "graphviz",
        "id": "78d4f43bdffe121f",
        "text": "DOT strict digraph\n  \nrankdir=LR\n\n  node [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n  HERE NODE\n\n    node [style=filled fillcolor=lightblue]\n    WHERE /^⇒/\n      LINKS HERE -> NODE\n          node [style=filled fillcolor=white]\n          HERE NODE\n            WHERE /^⇒/\n              LINKS HERE -> NODE\n\n    node [style=filled fillcolor=white penwidth=3 color=black]\n    LINKS HERE -> NODE\n       node [style=filled fillcolor=white penwidth=1 color=black]\n       HERE NODE\n         LINKS HERE -> NODE\n\n   node [style=\"filled,rounded,dotted\" fillcolor=white]\n   edge [style=dotted]\n   HERE NODE\n      BACKLINKS NODE -> HERE"
      },
      "date": 1653285633498
    },
    {
      "item": {
        "type": "factory",
        "id": "074eaa053d104d1c"
      },
      "id": "074eaa053d104d1c",
      "type": "add",
      "after": "78d4f43bdffe121f",
      "date": 1653296133217
    },
    {
      "type": "edit",
      "id": "074eaa053d104d1c",
      "item": {
        "type": "pagefold",
        "id": "074eaa053d104d1c",
        "text": "~"
      },
      "date": 1653296136468
    },
    {
      "item": {
        "type": "factory",
        "id": "89debdfa882dffbe"
      },
      "id": "89debdfa882dffbe",
      "type": "add",
      "after": "074eaa053d104d1c",
      "date": 1653296138279
    },
    {
      "type": "edit",
      "id": "89debdfa882dffbe",
      "item": {
        "type": "reference",
        "id": "89debdfa882dffbe",
        "site": "thompson.reimage.fed.wiki",
        "slug": "garden-cultivating",
        "title": "Garden Cultivating",
        "text": "Story of 31 pages with 15515 words and 77 more links."
      },
      "date": 1653296145795
    },
    {
      "item": {
        "type": "factory",
        "id": "c37bddb75eb1a550"
      },
      "id": "c37bddb75eb1a550",
      "type": "add",
      "after": "89debdfa882dffbe",
      "date": 1653298572147
    },
    {
      "type": "edit",
      "id": "c37bddb75eb1a550",
      "item": {
        "type": "reference",
        "id": "c37bddb75eb1a550",
        "site": "dayton.fed.wiki",
        "slug": "learning-cycles",
        "title": "Learning Cycles",
        "text": "The key to the transformative power of Agile is fast, iterative learning cycles."
      },
      "date": 1653298578046
    },
    {
      "item": {
        "type": "factory",
        "id": "5a1803e115947aac"
      },
      "id": "5a1803e115947aac",
      "type": "add",
      "after": "c37bddb75eb1a550",
      "date": 1653299657595
    },
    {
      "type": "edit",
      "id": "5a1803e115947aac",
      "item": {
        "type": "reference",
        "id": "5a1803e115947aac",
        "site": "dev2.wiki.innovateoregon.org",
        "slug": "joy-felt",
        "title": "Joy Felt",
        "text": "# Intention"
      },
      "date": 1653299662170
    },
    {
      "item": {
        "type": "factory",
        "id": "6a3716103a00445a"
      },
      "id": "6a3716103a00445a",
      "type": "add",
      "after": "5a1803e115947aac",
      "date": 1653301903263
    },
    {
      "type": "edit",
      "id": "6a3716103a00445a",
      "item": {
        "type": "paragraph",
        "id": "6a3716103a00445a",
        "text": "[[Ward’s Afterword]]\nTwo decades ago a small group met to share what they felt was new about how they developed software. Their operational observations were expressed as unexpected pref¬ erences and collectively dubbed “agile.” The word stuck. But we might ask, what lead them to the Agile Manifesto, this unusual agreement?\nWe now know that their observations were so powerful that positive results have been had even when their specific methods were misunderstood and improperly applied. What then is this secret sauce?\nThompson recognizes a specific shift in mindset, the established set of attitudes held by those engaged in an endeavor, as the root of agile. The “agile mindset” then is the patterns of thought that come engaging in agile-like practices whatever they might be.\nWe can escape this circular definition by looking more closely into what had changed about software two decades ago.\nComputers would become very cheap. And they would be personally owned. And linked together. And they would do nothing new without software, original software that did things yet to be imagined.\nA few labs in Boston and Palo Alto put these soon to be cheap computers in front of children to see what they could make of them. They reasoned that young mindsets were still open to new things. What would they want? How would they be empowered by the brute force of technology humanized for their use?\nThe kids were curious. Not yet brilliant but curious in ways that the brilliant researchers had to struggle to remember. And theirs was a profession that honored curiosity.\nImagine their dedication in the face of professional demands.\nWe are a curious species.\nOur working life favors curiosity even if we at times forget this. I am reminded of my friend, an engineering manager, who was asked, like all employees, to work in the warehouse during the Christmas rush. Why, he wondered while restocking returns, did so many items go to one particular aisle? He walked behind the shelves where bins were loaded to find the SKU numbers were off by one on that side, making every ship¬ ment wrong.\n"
      },
      "date": 1653301917761
    },
    {
      "id": "6a3716103a00445a",
      "type": "remove",
      "date": 1653301930193
    },
    {
      "item": {
        "type": "factory",
        "id": "26f8c69d6f9ecf68"
      },
      "id": "26f8c69d6f9ecf68",
      "type": "add",
      "after": "5a1803e115947aac",
      "date": 1653302862352
    },
    {
      "type": "edit",
      "id": "26f8c69d6f9ecf68",
      "item": {
        "type": "reference",
        "id": "26f8c69d6f9ecf68",
        "site": "wiki.ralfbarkow.ch",
        "slug": "wards-afterword",
        "title": "Ward’s Afterword",
        "text": "Two decades ago a small group met to share what they felt was new about how they  developed software. Their operational observations were expressed as unexpected preferences and collectively dubbed “agile.” The word stuck. But we might ask, what lead  them to the [[Agile Manifesto]], this unusual agreement?"
      },
      "date": 1653302887100
    },
    {
      "item": {
        "type": "factory",
        "id": "8616ff5cf36077ef"
      },
      "id": "8616ff5cf36077ef",
      "type": "add",
      "after": "26f8c69d6f9ecf68",
      "date": 1653303180705
    },
    {
      "type": "edit",
      "id": "8616ff5cf36077ef",
      "item": {
        "type": "reference",
        "id": "8616ff5cf36077ef",
        "site": "wellspring.fed.wiki",
        "slug": "using-the-model-of-positive-deviancy",
        "title": "Using the Model of Positive Deviancy",
        "text": "I was introduced to model of positive deviancy by Martin Etherington, who was, at that time, the Chief Marketing Officer at Tektronix. We were working together to introduce new marketing models in his organization."
      },
      "date": 1653303184918
    },
    {
      "type": "add",
      "id": "a22469ec6e4c58a8",
      "item": {
        "type": "paragraph",
        "id": "a22469ec6e4c58a8",
        "text": "\nDiseño de software y hardware de un Controlador Lógico Programable (PLC) y su entorno de programación – TALeS, [no date]. Online. [Accessed 24 May 2022]. Available from: http://tales.blog.unq.edu.ar/diseno-de-software-y-hardware-de-un-controlador-logico-programable-plc-y-su-entorno-de-programacion/\n"
      },
      "after": "4f1e62d0e41dbf95",
      "date": 1653343526601
    },
    {
      "type": "edit",
      "id": "a22469ec6e4c58a8",
      "item": {
        "type": "paragraph",
        "id": "a22469ec6e4c58a8",
        "text": "Diseño de software y hardware de un Controlador Lógico Programable (PLC) y su entorno de programación – TALeS, [no date]. Online. [Accessed 24 May 2022]. Available from: http://tales.blog.unq.edu.ar/diseno-de-software-y-hardware-de-un-controlador-logico-programable-plc-y-su-entorno-de-programacion/"
      },
      "date": 1653343544614
    },
    {
      "type": "add",
      "id": "e2d13bad9725ccb4",
      "item": {
        "type": "paragraph",
        "id": "e2d13bad9725ccb4",
        "text": "This final work presents the design of a PLC and its programming environment. The general principles of this design are: the strict following of the IEC 61131 Standard, the possibility of building a PLC with low hardware cost, the use of tools that can run in multiple operating systems, the adaptability of the software generated from the programming environment to any controller architecture, and the inclusion of program editing facilities (particularly in graphic languages) that correspond to the state of the art reflected in the most widely used commercial tools.\n\nIn this way, we obtain a PLC design and its programming environment which are independent from the hardware, achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller.\n\nEric N. Pernia\nTitle: Software and Hardware Design of a Programmable Logic Controller (PLC) and its programming environment.\nDirector: Carlos Lombardi\nPublic defense of the thesis: November 2013\nJury: José Juárez, Leonardo Gassman and Félix Safar\nStatus: Approved\n\nThesis file: TF Report IACI UNQ Eric N. Pernia.pdf"
      },
      "after": "a22469ec6e4c58a8",
      "date": 1653343553575
    },
    {
      "type": "edit",
      "id": "e2d13bad9725ccb4",
      "item": {
        "type": "paragraph",
        "id": "e2d13bad9725ccb4",
        "text": "This final work presents the design of a PLC and its programming environment. The general principles of this design are: the strict following of the [[IEC 61131]] Standard, the possibility of building a PLC with low hardware cost, the use of tools that can run in multiple operating systems, the adaptability of the software generated from the programming environment to any controller architecture, and the inclusion of program editing facilities (particularly in graphic languages) that correspond to the state of the art reflected in the most widely used commercial tools.\n\nIn this way, we obtain a PLC design and its programming environment which are independent from the hardware, achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller.\n\nEric N. Pernia\nTitle: Software and Hardware Design of a Programmable Logic Controller (PLC) and its programming environment.\nDirector: Carlos Lombardi\nPublic defense of the thesis: November 2013\nJury: José Juárez, Leonardo Gassman and Félix Safar\nStatus: Approved\n\nThesis file: TF Report IACI UNQ Eric N. Pernia.pdf"
      },
      "date": 1653343566474
    },
    {
      "type": "edit",
      "id": "a22469ec6e4c58a8",
      "item": {
        "type": "markdown",
        "id": "a22469ec6e4c58a8",
        "text": "Diseño de software y hardware de un Controlador Lógico Programable (PLC) y su entorno de programación – TALeS, [no date]. Online. [Accessed 24 May 2022]. Available from: http://tales.blog.unq.edu.ar/diseno-de-software-y-hardware-de-un-controlador-logico-programable-plc-y-su-entorno-de-programacion/"
      },
      "date": 1653343573073
    },
    {
      "type": "edit",
      "id": "a22469ec6e4c58a8",
      "item": {
        "type": "markdown",
        "id": "a22469ec6e4c58a8",
        "text": "\nPERNIA, Eric N., 2013. Diseño de software y hardware de un Controlador Lógico Programable (PLC) y su entorno de programación – TALeS. Online. 2013. [Accessed 24 May 2022]. Available from: http://tales.blog.unq.edu.ar/diseno-de-software-y-hardware-de-un-controlador-logico-programable-plc-y-su-entorno-de-programacion/\n"
      },
      "date": 1653343621498
    },
    {
      "type": "edit",
      "id": "e2d13bad9725ccb4",
      "item": {
        "type": "paragraph",
        "id": "e2d13bad9725ccb4",
        "text": "This final work presents the design of a PLC and its programming environment. The general principles of this design are: the strict following of the [[IEC 61131]] Standard, the possibility of building a PLC with low hardware cost, the use of tools that can run in multiple operating systems, the adaptability of the software generated from the programming environment to any controller architecture, and the inclusion of program editing facilities (particularly in graphic languages) that correspond to the state of the art reflected in the most widely used commercial tools.\n\nIn this way, we obtain a PLC design and its programming environment which are independent from the hardware, achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller.\n\nEric N. Pernia\nTitle: Software and Hardware Design of a Programmable Logic Controller (PLC) and its programming environment.\nDirector: Carlos Lombardi\nPublic defense of the thesis: November 2013\nJury: José Juárez, Leonardo Gassman and Félix Safar\nStatus: Approved\n\nThesis file: [http://tales.blog.unq.edu.ar/wp-content/uploads/sites/102/2020/03/Informe-TF-IACI-UNQ-Eric-N.-Pernia.pdf TF Report IACI UNQ Eric N. Pernia.pdf]"
      },
      "date": 1653343693834
    },
    {
      "type": "add",
      "id": "7e3ad6977c495c3c",
      "item": {
        "type": "paragraph",
        "id": "7e3ad6977c495c3c",
        "text": "This final work presents the design of a PLC and its programming environment. The general principles of this design are: the strict following of the IEC 61131 Standard, the possibility of building a PLC with low hardware cost, the use of tools that can run in multiple operating systems, the adaptability of the software generated from the programming environment to any controller architecture, and the inclusion of program editing facilities (particularly in graphical languages) that correspond to the state of the art reflected in the most widely used commercial tools. In this way, we obtain a PLC design and its programming environment, which are independent from the hardware achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller. Included in this proposal are: A general hardware design for a micro PLC that favors low cost and adequate performance implementations. A user interface design of the programming environment, with screen formats, interactions between the different screens, and general usability indications. A specification of the computational model of the PLC programming concepts included in the IEC 61131 standard, conceived from the fundamental principles of object programming. The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. Translated with www.DeepL.com/Translator (free version)"
      },
      "after": "e2d13bad9725ccb4",
      "date": 1653343770222
    },
    {
      "type": "edit",
      "id": "7e3ad6977c495c3c",
      "item": {
        "type": "paragraph",
        "id": "7e3ad6977c495c3c",
        "text": "This final work presents the design of a PLC and its programming environment. The general principles of this design are: the strict following of the IEC 61131 Standard, the possibility of building a PLC with low hardware cost, the use of tools that can run in multiple operating systems, the adaptability of the software generated from the programming environment to any controller architecture, and the inclusion of program editing facilities (particularly in graphical languages) that correspond to the state of the art reflected in the most widely used commercial tools. In this way, we obtain a PLC design and its programming environment, which are independent from the hardware achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller. Included in this proposal are: A general hardware design for a micro PLC that favors low cost and adequate performance implementations. A user interface design of the programming environment, with screen formats, interactions between the different screens, and general usability indications. A specification of the computational model of the PLC programming concepts included in the IEC 61131 standard, conceived from the fundamental principles of object programming. The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "date": 1653343775161
    },
    {
      "type": "edit",
      "id": "7e3ad6977c495c3c",
      "item": {
        "type": "paragraph",
        "id": "7e3ad6977c495c3c",
        "text": "This final work presents the design of a PLC and its programming environment. The general principles of this design are: the strict following of the IEC 61131 Standard, the possibility of building a PLC with low hardware cost, the use of tools that can run in multiple operating systems, the adaptability of the software generated from the programming environment to any controller architecture, and the inclusion of program editing facilities (particularly in graphical languages) that correspond to the state of the art reflected in the most widely used commercial tools. "
      },
      "date": 1653343826361
    },
    {
      "type": "add",
      "id": "646e8a2b55ccf858",
      "item": {
        "type": "paragraph",
        "id": "646e8a2b55ccf858",
        "text": "In this way, we obtain a PLC design and its programming environment, which are independent from the hardware achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller. Included in this proposal are: A general hardware design for a micro PLC that favors low cost and adequate performance implementations. A user interface design of the programming environment, with screen formats, interactions between the different screens, and general usability indications. A specification of the computational model of the PLC programming concepts included in the IEC 61131 standard, conceived from the fundamental principles of object programming. The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "after": "7e3ad6977c495c3c",
      "date": 1653343827172
    },
    {
      "type": "edit",
      "id": "646e8a2b55ccf858",
      "item": {
        "type": "paragraph",
        "id": "646e8a2b55ccf858",
        "text": "In this way, we obtain a PLC design and its programming environment, which are independent from the hardware achieving a great compatibility, allowing at the same time the agile edition of the programs to be executed in the controller. "
      },
      "date": 1653343864449
    },
    {
      "type": "add",
      "id": "5bf055cc584face6",
      "item": {
        "type": "paragraph",
        "id": "5bf055cc584face6",
        "text": "Included in this proposal are: "
      },
      "after": "646e8a2b55ccf858",
      "date": 1653343869150
    },
    {
      "type": "add",
      "id": "b4808a50d19d4b34",
      "item": {
        "type": "paragraph",
        "id": "b4808a50d19d4b34",
        "text": "* A general hardware design for a micro PLC that favors low cost and adequate performance implementations. A user interface design of the programming environment, with screen formats, interactions between the different screens, and general usability indications. A specification of the computational model of the PLC programming concepts included in the IEC 61131 standard, conceived from the fundamental principles of object programming. The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "after": "5bf055cc584face6",
      "date": 1653343873748
    },
    {
      "type": "edit",
      "id": "b4808a50d19d4b34",
      "item": {
        "type": "paragraph",
        "id": "b4808a50d19d4b34",
        "text": "* A general hardware design for a micro PLC that favors low cost and adequate performance implementations. "
      },
      "date": 1653343886304
    },
    {
      "type": "add",
      "id": "0c2bfd85e8f835b7",
      "item": {
        "type": "paragraph",
        "id": "0c2bfd85e8f835b7",
        "text": "* A user interface design of the programming environment, with screen formats, interactions between the different screens, and general usability indications. A specification of the computational model of the PLC programming concepts included in the IEC 61131 standard, conceived from the fundamental principles of object programming. The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "after": "b4808a50d19d4b34",
      "date": 1653343888330
    },
    {
      "type": "edit",
      "id": "0c2bfd85e8f835b7",
      "item": {
        "type": "paragraph",
        "id": "0c2bfd85e8f835b7",
        "text": "* A user interface design of the programming environment, with screen formats, interactions between the different screens, and general usability indications. "
      },
      "date": 1653343919842
    },
    {
      "type": "add",
      "id": "385b1631f8528f24",
      "item": {
        "type": "paragraph",
        "id": "385b1631f8528f24",
        "text": "* A specification of the computational model of the PLC programming concepts included in the IEC 61131 standard, conceived from the fundamental principles of object programming. The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "after": "0c2bfd85e8f835b7",
      "date": 1653343921537
    },
    {
      "type": "edit",
      "id": "385b1631f8528f24",
      "item": {
        "type": "paragraph",
        "id": "385b1631f8528f24",
        "text": "* A specification of the computational model of the PLC programming concepts included in the IEC 61131 standard, conceived from the fundamental principles of object programming. "
      },
      "date": 1653343936562
    },
    {
      "type": "add",
      "id": "bf60a7485051f846",
      "item": {
        "type": "paragraph",
        "id": "bf60a7485051f846",
        "text": "* The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "after": "385b1631f8528f24",
      "date": 1653343937735
    },
    {
      "type": "edit",
      "id": "bf60a7485051f846",
      "item": {
        "type": "paragraph",
        "id": "bf60a7485051f846",
        "text": "* The definition of the execution software environment to be mounted on the hardware, in such a way that the programs generated from the programming environment are executed on the defined execution environment. "
      },
      "date": 1653343959426
    },
    {
      "type": "add",
      "id": "1d634b73aed53629",
      "item": {
        "type": "paragraph",
        "id": "1d634b73aed53629",
        "text": "To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "after": "bf60a7485051f846",
      "date": 1653343960066
    },
    {
      "type": "edit",
      "id": "1d634b73aed53629",
      "item": {
        "type": "paragraph",
        "id": "1d634b73aed53629",
        "text": "To demonstrate the validity of the design, the following were developed: an electronic PLC prototype (Hardware) in which only Boolean inputs and outputs and no communication functions are considered, a programming environment developed according to the proposed design, and an implementation of the software execution environment in the PLC on which the programs developed from the programming environment are mounted. This implementation complies with the guidelines included in the design, respecting the general principles described above. "
      },
      "date": 1653343998463
    },
    {
      "type": "add",
      "id": "7939cd7600f210fe",
      "item": {
        "type": "paragraph",
        "id": "7939cd7600f210fe",
        "text": "In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports \"1 for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "after": "1d634b73aed53629",
      "date": 1653343999134
    },
    {
      "type": "edit",
      "id": "7939cd7600f210fe",
      "item": {
        "type": "paragraph",
        "id": "7939cd7600f210fe",
        "text": "In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports\" for most of the microcontrollers in the market. The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "date": 1653344119767
    },
    {
      "type": "edit",
      "id": "7939cd7600f210fe",
      "item": {
        "type": "paragraph",
        "id": "7939cd7600f210fe",
        "text": "In particular, in order to guarantee hardware independence, freeRTOS was chosen as the PLC operating system, which has \"ports\" for most of the microcontrollers in the market. In freeRTOS it is referred to as \"ports\" the hardware-dependent software layer, i.e. the microcontroller."
      },
      "date": 1653344149982
    },
    {
      "type": "add",
      "id": "80dcc779b96754d2",
      "item": {
        "type": "paragraph",
        "id": "80dcc779b96754d2",
        "text": "The programming environment was implemented on Pharo-Smalltalk, which is a development environment that allows the software to run on Windows, Linux and MAC OS X; in this way, independence from the operating system of the equipment on which the environment is executed is also achieved. Both software (Pharo and freeRTOS) are free tools minimizing development costs. "
      },
      "after": "7939cd7600f210fe",
      "date": 1653344150538
    },
    {
      "type": "edit",
      "id": "7939cd7600f210fe",
      "item": {
        "type": "paragraph",
        "id": "7939cd7600f210fe",
        "text": "In particular, in order to guarantee hardware independence, [[freeRTOS]] was chosen as the PLC operating system, which has \"ports\" for most of the microcontrollers in the market. In freeRTOS it is referred to as \"ports\" the hardware-dependent software layer, i.e. the microcontroller."
      },
      "date": 1653345265727
    }
  ]
}