{
  "title": "Crash-Restart Patterns",
  "story": [
    {
      "type": "paragraph",
      "id": "78f203b25c0deb0b",
      "text": "[[Fred Hebert]] writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". In Erlang and elixir, specifically with OTP, we have access to these architectural patterns that most languages only have when you're dealing with hardware machines or virtual machines and not within the language itself. See the second half of The Hitchhiker's Guide to the Unexpected\n [https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html blog] [https://youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
    },
    {
      "type": "frame",
      "id": "2bc8bc547410f9c5",
      "text": "https://www.youtube-nocookie.com/embed/_PLCqBm8vQU?start=1167\nHEIGHT 300\nHitchhiker's Guide to the Unexpected. ElixirDaze 2018 Keynote. Fred Hebert. [https://youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
    },
    {
      "type": "paragraph",
      "id": "2de0de7a84a7ecea",
      "text": "The supervisor itself should contain only that immutable data that requires no dynamism\n"
    },
    {
      "type": "paragraph",
      "id": "814731118ed3b226",
      "text": "The processes themselves should be able to bootstrap themselves from having data that loads once and is sorta dynamic (what is the guarantee you offer on boot?)\n"
    },
    {
      "type": "paragraph",
      "id": "bf2993acb16d3c24",
      "text": "The rest of the transient state is just moving around doing whatever. If you want to keep it safe, you have to make a copy of it to another area that is more stable\n"
    },
    {
      "type": "html",
      "id": "f375ff3e11135925",
      "text": "<img width=100% src=\"//wiki.dbbs.co/assets/pages/crash-restart-patterns/crash-restart-patterns.jpg\">"
    },
    {
      "type": "paragraph",
      "id": "a1f2d3c7912e0764",
      "text": "Part of the thing you encode in a supervision structure is that gradient from \"we got nothing\" and how to progressively rebuild state. A connection to a database is extremely dynamic state but you can rebuild it from less dynamic state (an IP address, which you get on DNS), which comes from something even more static (a configuration string somewhere). Being able to define that gradient of what type of dynamism you have in your state becomes really useful to properly define failure and recovery domains."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Crash-Restart Patterns",
        "story": []
      },
      "date": 1600966900978
    },
    {
      "item": {
        "type": "factory",
        "id": "78f203b25c0deb0b"
      },
      "id": "78f203b25c0deb0b",
      "type": "add",
      "date": 1600966939413
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Herbert"
      },
      "date": 1600966949529
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Hebert writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\"."
      },
      "date": 1600966969402
    },
    {
      "type": "add",
      "id": "2de0de7a84a7ecea",
      "item": {
        "type": "paragraph",
        "id": "2de0de7a84a7ecea",
        "text": "The supervisor itself should contain only that immutable data that requires no dynamism\n"
      },
      "after": "78f203b25c0deb0b",
      "date": 1600966975414
    },
    {
      "type": "add",
      "id": "814731118ed3b226",
      "item": {
        "type": "paragraph",
        "id": "814731118ed3b226",
        "text": "The processes themselves should be able to bootstrap themselves from having data that loads once and is sorta dynamic (what is the guarantee you offer on boot?)\n"
      },
      "after": "2de0de7a84a7ecea",
      "date": 1600966984044
    },
    {
      "type": "add",
      "id": "bf2993acb16d3c24",
      "item": {
        "type": "paragraph",
        "id": "bf2993acb16d3c24",
        "text": "The rest of the transient state is just moving around doing whatever. If you want to keep it safe, you have to make a copy of it to another area that is more stable\n"
      },
      "after": "814731118ed3b226",
      "date": 1600966987506
    },
    {
      "type": "add",
      "id": "a1f2d3c7912e0764",
      "item": {
        "type": "paragraph",
        "id": "a1f2d3c7912e0764",
        "text": "Part of the thing you encode in a supervision structure is that gradient from \"we got nothing\" and how to progressively rebuild state. A connection to a database is extremely dynamic state but you can rebuild it from less dynamic state (an IP address, which you get on DNS), which comes from something even more static (a configuration string somewhere). Being able to define that gradient of what type of dynamism you have in your state becomes really useful to properly define failure and recovery domains."
      },
      "after": "bf2993acb16d3c24",
      "date": 1600966991631
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Hebert writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". [https://lfi-software.slack.com/archives/CG0GVMEPJ/p1600882523023200 slack]"
      },
      "date": 1600967048926
    },
    {
      "item": {
        "type": "factory",
        "id": "36e3b0a1979bde71"
      },
      "id": "36e3b0a1979bde71",
      "type": "add",
      "after": "a1f2d3c7912e0764",
      "date": 1600967089002
    },
    {
      "type": "edit",
      "id": "36e3b0a1979bde71",
      "item": {
        "type": "video",
        "id": "36e3b0a1979bde71",
        "text": "YOUTUBE _PLCqBm8vQU\n(double-click to edit caption)\n"
      },
      "date": 1600967121598
    },
    {
      "type": "edit",
      "id": "36e3b0a1979bde71",
      "item": {
        "type": "video",
        "id": "36e3b0a1979bde71",
        "text": "YOUTUBE _PLCqBm8vQU\nPublished Mar 14, 2018."
      },
      "date": 1600967262042
    },
    {
      "id": "36e3b0a1979bde71",
      "type": "move",
      "order": [
        "78f203b25c0deb0b",
        "2de0de7a84a7ecea",
        "814731118ed3b226",
        "36e3b0a1979bde71",
        "bf2993acb16d3c24",
        "a1f2d3c7912e0764"
      ],
      "date": 1600967288408
    },
    {
      "id": "36e3b0a1979bde71",
      "type": "move",
      "order": [
        "78f203b25c0deb0b",
        "36e3b0a1979bde71",
        "2de0de7a84a7ecea",
        "814731118ed3b226",
        "bf2993acb16d3c24",
        "a1f2d3c7912e0764"
      ],
      "date": 1600967295710
    },
    {
      "item": {
        "type": "factory",
        "id": "be10f1f49ddd3217"
      },
      "id": "be10f1f49ddd3217",
      "type": "add",
      "after": "a1f2d3c7912e0764",
      "date": 1601867162078
    },
    {
      "type": "edit",
      "id": "be10f1f49ddd3217",
      "item": {
        "type": "assets",
        "id": "be10f1f49ddd3217",
        "text": "pages/crash-restart-patterns"
      },
      "date": 1601867192204
    },
    {
      "item": {
        "type": "factory",
        "id": "f375ff3e11135925"
      },
      "id": "f375ff3e11135925",
      "type": "add",
      "after": "be10f1f49ddd3217",
      "date": 1601867385126
    },
    {
      "type": "edit",
      "id": "f375ff3e11135925",
      "item": {
        "type": "html",
        "id": "f375ff3e11135925",
        "text": "<img width=100% src=http://simnet.ward.asia.wiki.org/assets/pages/crash-restart-patterns/Screen%20Shot%202020-09-24%20at%207.45.08%20AM.jpg>"
      },
      "date": 1601867401197
    },
    {
      "id": "f375ff3e11135925",
      "type": "move",
      "order": [
        "78f203b25c0deb0b",
        "36e3b0a1979bde71",
        "2de0de7a84a7ecea",
        "814731118ed3b226",
        "bf2993acb16d3c24",
        "f375ff3e11135925",
        "a1f2d3c7912e0764",
        "be10f1f49ddd3217"
      ],
      "date": 1601867407036
    },
    {
      "type": "remove",
      "id": "be10f1f49ddd3217",
      "date": 1601867424775
    },
    {
      "type": "fork",
      "site": "simnet.ward.asia.wiki.org",
      "date": 1611429100376
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Hebert writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". [https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html blog] [https://lfi-software.slack.com/archives/CG0GVMEPJ/p1600882523023200 slack]"
      },
      "date": 1648484036482
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Hebert writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". The Hitchhiker's Guide to the Unexpected\n [https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html blog]"
      },
      "date": 1648484074638
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Hebert writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". The Hitchhiker's Guide to the Unexpected\n [https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html blog] [https://www.youtube.com/watch?v=_PLCqBm8vQU youtube]"
      },
      "date": 1648484100033
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Hebert writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". See the second half of The Hitchhiker's Guide to the Unexpected\n [https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html blog] [https://www.youtube.com/watch?v=_PLCqBm8vQU youtube]"
      },
      "date": 1648484122907
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Hebert writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". See the second half of The Hitchhiker's Guide to the Unexpected\n [https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html blog] [https://youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
      },
      "date": 1648484200086
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "Fred Hebert writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". In Erlang and elixir, specifically with OTP, we have access to these architectural patterns that most languages only have when you're dealing with hardware machines or virtual machines and not within the language itself. See the second half of The Hitchhiker's Guide to the Unexpected\n [https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html blog] [https://youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
      },
      "date": 1648484373085
    },
    {
      "type": "edit",
      "id": "f375ff3e11135925",
      "item": {
        "type": "html",
        "id": "f375ff3e11135925",
        "text": "<img width=100% src=//simnet.ward.asia.wiki.org/assets/pages/crash-restart-patterns/Screen%20Shot%202020-09-24%20at%207.45.08%20AM.jpg>"
      },
      "date": 1648484390535
    },
    {
      "type": "edit",
      "id": "f375ff3e11135925",
      "item": {
        "type": "html",
        "id": "f375ff3e11135925",
        "text": "<img width=100% src=\"//simnet.ward.asia.wiki.org/assets/pages/crash-restart-patterns/Screen%20Shot%202020-09-24%20at%207.45.08%20AM.jpg\">"
      },
      "date": 1648484414425
    },
    {
      "type": "edit",
      "id": "f375ff3e11135925",
      "item": {
        "type": "html",
        "id": "f375ff3e11135925",
        "text": "<img width=100% src=\"//wiki.dbbs.co/assets/pages/crash-restart-patterns/crash-restart-patterns.jpg\">"
      },
      "date": 1648484510059
    },
    {
      "type": "add",
      "id": "2bc8bc547410f9c5",
      "item": {
        "type": "factory",
        "id": "2bc8bc547410f9c5",
        "text": "//youtu.be/_PLCqBm8vQU?t=1167"
      },
      "after": "36e3b0a1979bde71",
      "date": 1648484637787
    },
    {
      "type": "edit",
      "id": "2bc8bc547410f9c5",
      "item": {
        "type": "frame",
        "id": "2bc8bc547410f9c5",
        "text": "//youtu.be/_PLCqBm8vQU?t=1167\nHEIGHT 300\nHitchhiker's Guide to the Unexpected. ElixirDaze 2018 Keynote. Fred Hebert. [//youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
      },
      "date": 1648484726293
    },
    {
      "type": "edit",
      "id": "2bc8bc547410f9c5",
      "item": {
        "type": "frame",
        "id": "2bc8bc547410f9c5",
        "text": "https://www.youtube-nocookie.com/embed/_PLCqBm8vQU?t=1167\nHEIGHT 300\nHitchhiker's Guide to the Unexpected. ElixirDaze 2018 Keynote. Fred Hebert. [//youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
      },
      "date": 1648484825361
    },
    {
      "type": "edit",
      "id": "2bc8bc547410f9c5",
      "item": {
        "type": "frame",
        "id": "2bc8bc547410f9c5",
        "text": "https://www.youtube-nocookie.com/embed/_PLCqBm8vQU?t=1167\nHEIGHT 300\nHitchhiker's Guide to the Unexpected. ElixirDaze 2018 Keynote. Fred Hebert. [https://youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
      },
      "date": 1648484839659
    },
    {
      "type": "edit",
      "id": "2bc8bc547410f9c5",
      "item": {
        "type": "frame",
        "id": "2bc8bc547410f9c5",
        "text": "https://www.youtube-nocookie.com/embed/_PLCqBm8vQU?start=1167\nHEIGHT 300\nHitchhiker's Guide to the Unexpected. ElixirDaze 2018 Keynote. Fred Hebert. [https://youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
      },
      "date": 1648484864195
    },
    {
      "type": "remove",
      "id": "36e3b0a1979bde71",
      "date": 1648484878674
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1678103477162
    },
    {
      "type": "edit",
      "id": "78f203b25c0deb0b",
      "item": {
        "type": "paragraph",
        "id": "78f203b25c0deb0b",
        "text": "[[Fred Hebert]] writes, Over the years I found that a similar pattern makes a lot of sense for Erlang processes that need to do crash-restart patterns, with the idea of \"rolling back to a known stable state\". In Erlang and elixir, specifically with OTP, we have access to these architectural patterns that most languages only have when you're dealing with hardware machines or virtual machines and not within the language itself. See the second half of The Hitchhiker's Guide to the Unexpected\n [https://ferd.ca/the-hitchhiker-s-guide-to-the-unexpected.html blog] [https://youtu.be/_PLCqBm8vQU?t=1167 youtube 19m27s]"
      },
      "date": 1678103488722
    }
  ]
}