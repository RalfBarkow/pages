{
  "title": "Graphics Patterns",
  "story": [
    {
      "type": "html",
      "text": "Graphics applications are concurrent and distributed systems, and many patterns of concurrent and distributed programming apply to interactive graphical programs.",
      "id": "4683ffd669eff023a1ffde8b94a28340"
    },
    {
      "type": "html",
      "text": "<b>Architecture of A Graphics System</b>",
      "id": "315a088186367312a7b04c30fdc59054"
    },
    {
      "type": "html",
      "text": "\nModern graphical computer systems are organised as a display manager that shares the display surface between multiple client applications.  Clients communicate with the display manager by message passing, sending drawing requests or queries and receiving replies or user-input events.  Some graphics systems, such as X11 ([[Xwindow Protocol]], [http://www.x.org/ www.x.org], [http://www.xfree86.org www.xfree86.org]), [[Network Extensible Window System]], QNX's Photon microGUI ([http://www.qnx.com/products/photon/index.html www.qnx.com]) or OpenGL/GLX ([http://www.opengl.org/ www.opengl.org]), can pass the messages over the network.  Others, such as the GUI components of Windows NT, pass the messages between processes on the same host.  Either way, communication costs are a bottleneck in graphics applications and must be minimised to achieve acceptable interactive performance.",
      "id": "a86c6779ec544d7454e9de25d80d105c"
    },
    {
      "type": "html",
      "text": "\nThe display manager runs concurrently with the display hardware and communicates with it via the graphics card.  The display manager writes to the the display memory in the card, and the hardware reads the display memory as the scanline moves down the monitor.  The display manager and the display hardware must synchronise to avoid flicker and tearing in the generated graphics.  These synchronisation costs must be minimised to achieve acceptable interactive performance.",
      "id": "6596526c85787f7a751854c3b2b9107c"
    },
    {
      "type": "html",
      "text": "\nThe communication protocol between the display manager and its clients is too complex to be used directly.  Access to the protocol is usually provided by a procedural API, such as XLib or the Win32 GDI, where procedures map quite directly to communication messages passed between client and server.  These APIs typically contain hundreds of access functions.  However, graphical displays have a natural object-oriented representation, and so the lower level API can be wrapped in a convenient class library or framework.",
      "id": "539499ac40c944a4ee3a23d8c9e77c33"
    },
    {
      "type": "html",
      "text": "<b>Patterns of programming graphics and animation.</b>",
      "id": "8de3815f45c63b906f4cb57cf93fe978"
    },
    {
      "type": "html",
      "text": "<i>Representing Graphical Displays as Objects</i>",
      "id": "9cc2a312874ea46cecb8470d52477bb8"
    },
    {
      "type": "html",
      "text": " [[Layered Graphics]]",
      "id": "ab6b575ec08a14a019219a7311cbe38a"
    },
    {
      "type": "html",
      "text": " [[Structured Graphics]]",
      "id": "7fa57cf07be75fbd243d096778d00d13"
    },
    {
      "type": "html",
      "text": " [[Scene Graph]]",
      "id": "6d623b66169c321fe51ac0694d643b2f"
    },
    {
      "type": "html",
      "text": " [[Paper Pen And Person]]",
      "id": "2c5730baed1143b16fb1ba39087a6072"
    },
    {
      "type": "html",
      "text": " [[The Grammar Of Graphics]]",
      "id": "3f5406ff550fcad3d15037ece43579cf"
    },
    {
      "type": "html",
      "text": " [[Discrete Cartesian Geometry Primitives]]",
      "id": "ac2f304f84bf95d08acc1ccfe920c9a8"
    },
    {
      "type": "html",
      "text": " [[Continuous Cartesian Geometry Primitives]]",
      "id": "5ec0dc0a70c8145e2264cc1522ee3345"
    },
    {
      "type": "html",
      "text": " [[Fixed Point Cartesian Geometry Primitives]]",
      "id": "4cca1aa8fc1f63476cbabe4724cdd3af"
    },
    {
      "type": "html",
      "text": "<i>Implementing Interactivity</i>",
      "id": "a5081f80fb4ddd45e01d89b3e1a3fc07"
    },
    {
      "type": "html",
      "text": " [[Tooled Composite]]",
      "id": "14505df2c8a6cfa13b6cc6b34cc8ebfe"
    },
    {
      "type": "html",
      "text": " [[User Interface Patterns]]",
      "id": "6f829d56574d1650a90d48f74b13dafd"
    },
    {
      "type": "html",
      "text": " [[Interactive Scene Graph]]",
      "id": "3380411cbb767aec2a0d1f70b46b415e"
    },
    {
      "type": "html",
      "text": "<i>Drawing</i>",
      "id": "0524a4ab1dd8741ab211008fd1d8f46c"
    },
    {
      "type": "html",
      "text": " [[Avoid Drawing]]",
      "id": "16bc56e2cf8bb0474376111e7330015c"
    },
    {
      "type": "html",
      "text": " [[Deferred Update]]",
      "id": "974ddcad2495beb92bb799db26b2e61a"
    },
    {
      "type": "html",
      "text": " [[Logical Alpha]]",
      "id": "41c80a9616a7747e69acba60d05bafc0"
    },
    {
      "type": "html",
      "text": " [[Idle Updates]]",
      "id": "81b06b83b90ccfc6bb9b11af14be2c26"
    },
    {
      "type": "html",
      "text": " [[Double Buffer]]",
      "id": "687bf840941f3cea7e3c96feebd40f00"
    },
    {
      "type": "html",
      "text": " [[Triple Buffer]]",
      "id": "5e9258a8f76cf730387742f91ae978e8"
    },
    {
      "type": "html",
      "text": " [[Refresh Rectangles]], also known as [[Dirty Rectangles]]",
      "id": "48527b9b3f5d146e8ac19173f0f995f4"
    },
    {
      "type": "html",
      "text": " [[Avoid Multiple Primitive Graphic Commands]]:",
      "id": "f159de872bd8c6c0c21f2f9e8518a61c"
    },
    {
      "type": "html",
      "text": " [[Aggregate Graphic Commands]]",
      "id": "6892f045b11ecc2f759e82932181a46b"
    },
    {
      "type": "html",
      "text": " [[Buffer Graphic Commands]]",
      "id": "ad516250f4740acc41cda4dc83996cc5"
    },
    {
      "type": "html",
      "text": " [[Compiled Graphic Commands]]",
      "id": "62758650b9c28acd07b271f9a2d017d3"
    },
    {
      "type": "html",
      "text": " [[Single Transform]]",
      "id": "ecf58d0076827b1ca9e787a29eff7e9f"
    },
    {
      "type": "html",
      "text": " [[Abstract Session Pattern]] is used to maintain multiple drawing contexts for the same display surface.",
      "id": "fad694d12b493b5c3ef302c7520c8475"
    },
    {
      "type": "html",
      "text": "<i>Pages about or clarifying the patterns</i>",
      "id": "10639ef44af439b29b3de3c4f97408b0"
    },
    {
      "type": "html",
      "text": " [[Use Objects To Represent Objects]]",
      "id": "493a6563b865daaa0f5e03c148706431"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a5938ff3e10cb9f6d2e9f795ad89eb2f"
    },
    {
      "type": "html",
      "text": "\nAlso see [[User Interface Patterns]], [[Smalltalk Graphics Framework]]",
      "id": "0a5671a8e2eab416b53009280e2c06fa"
    },
    {
      "type": "html",
      "text": "\n[[Category Graphics Pattern]] [[Category Pattern]]",
      "id": "7e2bbda9fd6f95d15b6b6bd837e9a942"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a5938ff3e10cb9f6d2e9f795ad89eb2f"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?GraphicsPatterns c2.com]",
      "id": "f62f9f41a9a90d136bd06667c0ee20b4"
    }
  ],
  "journal": [
    {
      "date": 1349260824000,
      "id": "6c2b756a4500e4cf21be9c7067ebc482",
      "type": "create",
      "item": {
        "title": "Graphics Patterns",
        "story": [
          {
            "type": "html",
            "text": "Graphics applications are concurrent and distributed systems, and many patterns of concurrent and distributed programming apply to interactive graphical programs.",
            "id": "4683ffd669eff023a1ffde8b94a28340"
          },
          {
            "type": "html",
            "text": "<b>Architecture of A Graphics System</b>",
            "id": "315a088186367312a7b04c30fdc59054"
          },
          {
            "type": "html",
            "text": "\nModern graphical computer systems are organised as a display manager that shares the display surface between multiple client applications.  Clients communicate with the display manager by message passing, sending drawing requests or queries and receiving replies or user-input events.  Some graphics systems, such as X11 ([[Xwindow Protocol]], [http://www.x.org/ www.x.org], [http://www.xfree86.org www.xfree86.org]), [[Network Extensible Window System]], QNX's Photon microGUI ([http://www.qnx.com/products/photon/index.html www.qnx.com]) or OpenGL/GLX ([http://www.opengl.org/ www.opengl.org]), can pass the messages over the network.  Others, such as the GUI components of Windows NT, pass the messages between processes on the same host.  Either way, communication costs are a bottleneck in graphics applications and must be minimised to achieve acceptable interactive performance.",
            "id": "a86c6779ec544d7454e9de25d80d105c"
          },
          {
            "type": "html",
            "text": "\nThe display manager runs concurrently with the display hardware and communicates with it via the graphics card.  The display manager writes to the the display memory in the card, and the hardware reads the display memory as the scanline moves down the monitor.  The display manager and the display hardware must synchronise to avoid flicker and tearing in the generated graphics.  These synchronisation costs must be minimised to achieve acceptable interactive performance.",
            "id": "6596526c85787f7a751854c3b2b9107c"
          },
          {
            "type": "html",
            "text": "\nThe communication protocol between the display manager and its clients is too complex to be used directly.  Access to the protocol is usually provided by a procedural API, such as XLib or the Win32 GDI, where procedures map quite directly to communication messages passed between client and server.  These APIs typically contain hundreds of access functions.  However, graphical displays have a natural object-oriented representation, and so the lower level API can be wrapped in a convenient class library or framework.",
            "id": "539499ac40c944a4ee3a23d8c9e77c33"
          },
          {
            "type": "html",
            "text": "<b>Patterns of programming graphics and animation.</b>",
            "id": "8de3815f45c63b906f4cb57cf93fe978"
          },
          {
            "type": "html",
            "text": "<i>Representing Graphical Displays as Objects</i>",
            "id": "9cc2a312874ea46cecb8470d52477bb8"
          },
          {
            "type": "html",
            "text": " [[Layered Graphics]]",
            "id": "ab6b575ec08a14a019219a7311cbe38a"
          },
          {
            "type": "html",
            "text": " [[Structured Graphics]]",
            "id": "7fa57cf07be75fbd243d096778d00d13"
          },
          {
            "type": "html",
            "text": " [[Scene Graph]]",
            "id": "6d623b66169c321fe51ac0694d643b2f"
          },
          {
            "type": "html",
            "text": " [[Paper Pen And Person]]",
            "id": "2c5730baed1143b16fb1ba39087a6072"
          },
          {
            "type": "html",
            "text": " [[The Grammar Of Graphics]]",
            "id": "3f5406ff550fcad3d15037ece43579cf"
          },
          {
            "type": "html",
            "text": " [[Discrete Cartesian Geometry Primitives]]",
            "id": "ac2f304f84bf95d08acc1ccfe920c9a8"
          },
          {
            "type": "html",
            "text": " [[Continuous Cartesian Geometry Primitives]]",
            "id": "5ec0dc0a70c8145e2264cc1522ee3345"
          },
          {
            "type": "html",
            "text": " [[Fixed Point Cartesian Geometry Primitives]]",
            "id": "4cca1aa8fc1f63476cbabe4724cdd3af"
          },
          {
            "type": "html",
            "text": "<i>Implementing Interactivity</i>",
            "id": "a5081f80fb4ddd45e01d89b3e1a3fc07"
          },
          {
            "type": "html",
            "text": " [[Tooled Composite]]",
            "id": "14505df2c8a6cfa13b6cc6b34cc8ebfe"
          },
          {
            "type": "html",
            "text": " [[User Interface Patterns]]",
            "id": "6f829d56574d1650a90d48f74b13dafd"
          },
          {
            "type": "html",
            "text": " [[Interactive Scene Graph]]",
            "id": "3380411cbb767aec2a0d1f70b46b415e"
          },
          {
            "type": "html",
            "text": "<i>Drawing</i>",
            "id": "0524a4ab1dd8741ab211008fd1d8f46c"
          },
          {
            "type": "html",
            "text": " [[Avoid Drawing]]",
            "id": "16bc56e2cf8bb0474376111e7330015c"
          },
          {
            "type": "html",
            "text": " [[Deferred Update]]",
            "id": "974ddcad2495beb92bb799db26b2e61a"
          },
          {
            "type": "html",
            "text": " [[Logical Alpha]]",
            "id": "41c80a9616a7747e69acba60d05bafc0"
          },
          {
            "type": "html",
            "text": " [[Idle Updates]]",
            "id": "81b06b83b90ccfc6bb9b11af14be2c26"
          },
          {
            "type": "html",
            "text": " [[Double Buffer]]",
            "id": "687bf840941f3cea7e3c96feebd40f00"
          },
          {
            "type": "html",
            "text": " [[Triple Buffer]]",
            "id": "5e9258a8f76cf730387742f91ae978e8"
          },
          {
            "type": "html",
            "text": " [[Refresh Rectangles]], also known as [[Dirty Rectangles]]",
            "id": "48527b9b3f5d146e8ac19173f0f995f4"
          },
          {
            "type": "html",
            "text": " [[Avoid Multiple Primitive Graphic Commands]]:",
            "id": "f159de872bd8c6c0c21f2f9e8518a61c"
          },
          {
            "type": "html",
            "text": " [[Aggregate Graphic Commands]]",
            "id": "6892f045b11ecc2f759e82932181a46b"
          },
          {
            "type": "html",
            "text": " [[Buffer Graphic Commands]]",
            "id": "ad516250f4740acc41cda4dc83996cc5"
          },
          {
            "type": "html",
            "text": " [[Compiled Graphic Commands]]",
            "id": "62758650b9c28acd07b271f9a2d017d3"
          },
          {
            "type": "html",
            "text": " [[Single Transform]]",
            "id": "ecf58d0076827b1ca9e787a29eff7e9f"
          },
          {
            "type": "html",
            "text": " [[Abstract Session Pattern]] is used to maintain multiple drawing contexts for the same display surface.",
            "id": "fad694d12b493b5c3ef302c7520c8475"
          },
          {
            "type": "html",
            "text": "<i>Pages about or clarifying the patterns</i>",
            "id": "10639ef44af439b29b3de3c4f97408b0"
          },
          {
            "type": "html",
            "text": " [[Use Objects To Represent Objects]]",
            "id": "493a6563b865daaa0f5e03c148706431"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a5938ff3e10cb9f6d2e9f795ad89eb2f"
          },
          {
            "type": "html",
            "text": "\nAlso see [[User Interface Patterns]], [[Smalltalk Graphics Framework]]",
            "id": "0a5671a8e2eab416b53009280e2c06fa"
          },
          {
            "type": "html",
            "text": "\n[[Category Graphics Pattern]] [[Category Pattern]]",
            "id": "7e2bbda9fd6f95d15b6b6bd837e9a942"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a5938ff3e10cb9f6d2e9f795ad89eb2f"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?GraphicsPatterns c2.com]",
            "id": "f62f9f41a9a90d136bd06667c0ee20b4"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707800705597
    }
  ]
}