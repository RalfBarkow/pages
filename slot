{
  "title": "Slot",
  "story": [
    {
      "type": "paragraph",
      "id": "e0fcac7a64ebf432",
      "text": "A [[Pattern]] is a [[Plan]] that has some number of parts and shows you how each part turns a face to the others [⇒ [[Turn a Face to the Other]]] how each joins with the others or stands off how each part does what it does and how the others ate it or drag it down and how all the parts may be grasped as a whole and made to serve as one thing for some higher goal or as part of a larger pattern."
    },
    {
      "type": "paragraph",
      "id": "cc58fb742523d9ae",
      "text": "A pattern should give hints or clues as to when and where it is best put to use what is more some of the parts of a pattern may be [[Hole]]s or slots in which other things may be placed later a good pattern will say how changes can be made in the course of time thus some choices of the plan are built in as part of the pattern and other choices wait till the time when the pattern is to be used in this way a pattern stands for a design space in which you can choose on the fly your own path for growth and change it is good to design a thing but it can be far better and far harder to design a pattern best of all is to know when to use a pattern."
    },
    {
      "type": "paragraph",
      "id": "6fb6d01ad0024804",
      "text": "Now for some more computer words […]"
    },
    {
      "type": "video",
      "id": "f2362e31c39a2a9a",
      "text": "START 1974\nYOUTUBE lw6TaiXzHAE\n⇒ [[Generic Type]]"
    },
    {
      "type": "pagefold",
      "id": "439a7cb8446eacd8",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "617b22a34a02e365",
      "site": "found.ward.fed.wiki",
      "slug": "growing-a-language",
      "title": "Growing a Language",
      "text": "Guy Steele demonstrates how Java should grow in the future and why what he proposes is the best path forward."
    },
    {
      "type": "reference",
      "id": "04559edb50c8dbfa",
      "site": "wiki.ralfbarkow.ch",
      "slug": "computational-scripts",
      "title": "Computational Scripts",
      "text": "[[Scripts]] also support a computational theory, similar in spirit to frames in artificial intelligence (Minsky 1981). Both are based on the general idea of [[Schema]]s as a [[Basis for Mental Representation]] (see e.g. Arbib 1989; Brewer and Nakamura 1984; Bartlett 1932; Bobrow and Norman 1975; Rumelhart 1980). According to schema theory, people organize knowledge about familiar objects, situations, and procedures in terms of prototypes, or schemas. A schema consists of a [[Representation]] for common knowledge that is shared by all instances, and a number of slots […]"
    },
    {
      "type": "reference",
      "id": "086d41eb9b37e1e9",
      "site": "mike.dojo.fed.wiki",
      "slug": "representation",
      "title": "Representation",
      "text": "In this wiki we're concerned with means and practices of integrated plural representation: textual, graphical/iconic and algorithmic. And specifically, with federated wiki as a wonderful way of working across this range."
    },
    {
      "type": "reference",
      "id": "09f32d1ad8ae8a65",
      "site": "wiki.ralfbarkow.ch",
      "slug": "trait",
      "title": "Trait",
      "text": "Traits can be composed in arbitrary order. The composite entity (class or trait) …"
    },
    {
      "type": "reference",
      "id": "3d204d5c302fb669",
      "site": "wiki.ralfbarkow.ch",
      "slug": "traits",
      "title": "Traits",
      "text": "Traits are pure units of [[Behavior]] that can be composed to form classes or other traits. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
    },
    {
      "type": "reference",
      "id": "f13a30584f16d1b4",
      "site": "wiki.ralfbarkow.ch",
      "slug": "trait-composition-mechanism",
      "title": "Trait Composition Mechanism",
      "text": "[https://wiki.ralfbarkow.ch/view/properties-of-parallel-distributed-models/view/representation/view/generalization/view/learn/view/slot/view/fact-modeling/view/network/view/code/view/pattern/view/cancel lineup] ⇒ Slot"
    },
    {
      "type": "paragraph",
      "id": "3cf61765f5d37872",
      "text": "How to add a slot to a class? [https://book.gtoolkit.com/how-to-add-a-slot-to-a-class--1l8n7i2kpw3dklbuj0hhxndin page]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Slot",
        "story": []
      },
      "date": 1673876939189
    },
    {
      "id": "04559edb50c8dbfa",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "04559edb50c8dbfa",
        "site": "wiki.ralfbarkow.ch",
        "slug": "computational-scripts",
        "title": "Computational Scripts",
        "text": "[[Scripts]] also support a computational theory, similar in spirit to frames in artificial intelligence (Minsky 1981). Both are based on the general idea of schemas as a basis for mental representation (see e.g. Arbib 1989; Brewer and Nakamura 1984; Bartlett 1932; Bobrow and Norman 1975; Rumelhart 1980). According to schema theory, people organize knowledge about familiar objects, situations, and procedures in terms of prototypes, or schemas. A schema consists of a representation for common knowledge that is shared by all instances, and a number of [[Slot]]s […]"
      },
      "date": 1673876947769
    },
    {
      "type": "edit",
      "id": "04559edb50c8dbfa",
      "item": {
        "type": "reference",
        "id": "04559edb50c8dbfa",
        "site": "wiki.ralfbarkow.ch",
        "slug": "computational-scripts",
        "title": "Computational Scripts",
        "text": "[[Scripts]] also support a computational theory, similar in spirit to frames in artificial intelligence (Minsky 1981). Both are based on the general idea of schemas as a [[Basis for Mental Representation]] (see e.g. Arbib 1989; Brewer and Nakamura 1984; Bartlett 1932; Bobrow and Norman 1975; Rumelhart 1980). According to schema theory, people organize knowledge about familiar objects, situations, and procedures in terms of prototypes, or schemas. A schema consists of a representation for common knowledge that is shared by all instances, and a number of [[Slot]]s […]"
      },
      "date": 1673876976743
    },
    {
      "type": "edit",
      "id": "04559edb50c8dbfa",
      "item": {
        "type": "reference",
        "id": "04559edb50c8dbfa",
        "site": "wiki.ralfbarkow.ch",
        "slug": "computational-scripts",
        "title": "Computational Scripts",
        "text": "[[Scripts]] also support a computational theory, similar in spirit to frames in artificial intelligence (Minsky 1981). Both are based on the general idea of [[Schema]]s as a [[Basis for Mental Representation]] (see e.g. Arbib 1989; Brewer and Nakamura 1984; Bartlett 1932; Bobrow and Norman 1975; Rumelhart 1980). According to schema theory, people organize knowledge about familiar objects, situations, and procedures in terms of prototypes, or schemas. A schema consists of a representation for common knowledge that is shared by all instances, and a number of [[Slot]]s […]"
      },
      "date": 1673877005269
    },
    {
      "item": {
        "type": "factory",
        "id": "086d41eb9b37e1e9"
      },
      "id": "086d41eb9b37e1e9",
      "type": "add",
      "after": "04559edb50c8dbfa",
      "date": 1673879593330
    },
    {
      "type": "edit",
      "id": "086d41eb9b37e1e9",
      "item": {
        "type": "reference",
        "id": "086d41eb9b37e1e9",
        "site": "mike.dojo.fed.wiki",
        "slug": "representation",
        "title": "Representation",
        "text": "In this wiki we're concerned with means and practices of integrated plural representation: textual, graphical/iconic and algorithmic. And specifically, with federated wiki as a wonderful way of working across this range."
      },
      "date": 1673879603322
    },
    {
      "type": "edit",
      "id": "04559edb50c8dbfa",
      "item": {
        "type": "reference",
        "id": "04559edb50c8dbfa",
        "site": "wiki.ralfbarkow.ch",
        "slug": "computational-scripts",
        "title": "Computational Scripts",
        "text": "[[Scripts]] also support a computational theory, similar in spirit to frames in artificial intelligence (Minsky 1981). Both are based on the general idea of [[Schema]]s as a [[Basis for Mental Representation]] (see e.g. Arbib 1989; Brewer and Nakamura 1984; Bartlett 1932; Bobrow and Norman 1975; Rumelhart 1980). According to schema theory, people organize knowledge about familiar objects, situations, and procedures in terms of prototypes, or schemas. A schema consists of a [[Representation]] for common knowledge that is shared by all instances, and a number of [[Slot]]s […]"
      },
      "date": 1673879646034
    },
    {
      "item": {
        "type": "factory",
        "id": "09f32d1ad8ae8a65"
      },
      "id": "09f32d1ad8ae8a65",
      "type": "add",
      "after": "086d41eb9b37e1e9",
      "date": 1673880627722
    },
    {
      "type": "edit",
      "id": "09f32d1ad8ae8a65",
      "item": {
        "type": "reference",
        "id": "09f32d1ad8ae8a65",
        "site": "wiki.ralfbarkow.ch",
        "slug": "trait",
        "title": "Trait",
        "text": "Traits can be composed in arbitrary order. The composite entity (class or trait)"
      },
      "date": 1673880629883
    },
    {
      "item": {
        "type": "factory",
        "id": "3d204d5c302fb669"
      },
      "id": "3d204d5c302fb669",
      "type": "add",
      "after": "09f32d1ad8ae8a65",
      "date": 1673880640453
    },
    {
      "type": "edit",
      "id": "3d204d5c302fb669",
      "item": {
        "type": "reference",
        "id": "3d204d5c302fb669",
        "site": "wiki.ralfbarkow.ch",
        "slug": "traits",
        "title": "Traits",
        "text": "Traits are pure units of [[Behavior]] that can be composed to form classes or other **traits**. The trait composition mechanism is an alternative to multiple or mixin inheritance in which **the composer has full control over the trait composition**. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1673880643723
    },
    {
      "type": "edit",
      "id": "09f32d1ad8ae8a65",
      "item": {
        "type": "reference",
        "id": "09f32d1ad8ae8a65",
        "site": "wiki.ralfbarkow.ch",
        "slug": "trait",
        "title": "Trait",
        "text": "Traits can be composed in arbitrary order. The composite entity (class or trait) …"
      },
      "date": 1673880680840
    },
    {
      "type": "edit",
      "id": "3d204d5c302fb669",
      "item": {
        "type": "reference",
        "id": "3d204d5c302fb669",
        "site": "wiki.ralfbarkow.ch",
        "slug": "traits",
        "title": "Traits",
        "text": "Traits are pure units of [[Behavior]] that can be composed to form classes or other traits. The trait composition mechanism is an alternative to multiple or mixin inheritance in which **the composer has full control over the trait composition**. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1673880701777
    },
    {
      "type": "edit",
      "id": "3d204d5c302fb669",
      "item": {
        "type": "reference",
        "id": "3d204d5c302fb669",
        "site": "wiki.ralfbarkow.ch",
        "slug": "traits",
        "title": "Traits",
        "text": "Traits are pure units of [[Behavior]] that can be composed to form classes or other traits. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1673880715098
    },
    {
      "item": {
        "type": "factory",
        "id": "f13a30584f16d1b4"
      },
      "id": "f13a30584f16d1b4",
      "type": "add",
      "after": "3d204d5c302fb669",
      "date": 1673881856233
    },
    {
      "type": "edit",
      "id": "f13a30584f16d1b4",
      "item": {
        "type": "reference",
        "id": "f13a30584f16d1b4",
        "site": "wiki.ralfbarkow.ch",
        "slug": "trait-composition-mechanism",
        "title": "Trait Composition Mechanism",
        "text": "[https://wiki.ralfbarkow.ch/view/properties-of-parallel-distributed-models/view/representation/view/generalization/view/learn/view/slot/view/fact-modeling/view/network/view/code/view/pattern/view/cancel lineup] ⇒ [[Slot]]"
      },
      "date": 1673881858964
    },
    {
      "type": "edit",
      "id": "f13a30584f16d1b4",
      "item": {
        "type": "reference",
        "id": "f13a30584f16d1b4",
        "site": "wiki.ralfbarkow.ch",
        "slug": "trait-composition-mechanism",
        "title": "Trait Composition Mechanism",
        "text": "[https://wiki.ralfbarkow.ch/view/properties-of-parallel-distributed-models/view/representation/view/generalization/view/learn/view/slot/view/fact-modeling/view/network/view/code/view/pattern/view/cancel lineup] ⇒ Slot"
      },
      "date": 1673884756472
    },
    {
      "id": "e0fcac7a64ebf432",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e0fcac7a64ebf432",
        "text": "a [[Pattern]] is a [[plan]] that has some number of parts and shows you how each part turns a face to the others how each joins with the others or stands off how each part does what it does and how the others ate it or drag it down and how all the parts may be grasped as a whole and made to serve as one thing for some higher goal or as part of a larger pattern a pattern should give hints or clues as to when and where it is best put to use what is more some of the parts of a pattern may be holes or [[Slot]]s in which other things may be placed later a good pattern will say how changes can be made in the course of time thus some choices of the plan are built in as part of the pattern and other choices wait till the time when the pattern is to be used in this way a pattern stands for a design space in which you can choose on the fly your own path for growth and change it is good to design a thing but it can be far better and far harder to design a pattern best of all is to know when to use a pattern now for some more computer words […]"
      },
      "date": 1673999440787
    },
    {
      "item": {
        "type": "factory",
        "id": "439a7cb8446eacd8"
      },
      "id": "439a7cb8446eacd8",
      "type": "add",
      "after": "f13a30584f16d1b4",
      "date": 1673999450130
    },
    {
      "type": "edit",
      "id": "439a7cb8446eacd8",
      "item": {
        "type": "pagefold",
        "id": "439a7cb8446eacd8",
        "text": "~"
      },
      "date": 1673999453640
    },
    {
      "id": "439a7cb8446eacd8",
      "type": "move",
      "order": [
        "e0fcac7a64ebf432",
        "439a7cb8446eacd8",
        "04559edb50c8dbfa",
        "086d41eb9b37e1e9",
        "09f32d1ad8ae8a65",
        "3d204d5c302fb669",
        "f13a30584f16d1b4"
      ],
      "date": 1673999457464
    },
    {
      "item": {
        "type": "factory",
        "id": "617b22a34a02e365"
      },
      "id": "617b22a34a02e365",
      "type": "add",
      "after": "f13a30584f16d1b4",
      "date": 1673999460713
    },
    {
      "type": "edit",
      "id": "617b22a34a02e365",
      "item": {
        "type": "reference",
        "id": "617b22a34a02e365",
        "site": "found.ward.fed.wiki",
        "slug": "growing-a-language",
        "title": "Growing a Language",
        "text": "Guy Steele demonstrates how Java should grow in the future and why what he proposes is the best path forward."
      },
      "date": 1673999471246
    },
    {
      "id": "617b22a34a02e365",
      "type": "move",
      "order": [
        "e0fcac7a64ebf432",
        "439a7cb8446eacd8",
        "617b22a34a02e365",
        "04559edb50c8dbfa",
        "086d41eb9b37e1e9",
        "09f32d1ad8ae8a65",
        "3d204d5c302fb669",
        "f13a30584f16d1b4"
      ],
      "date": 1673999477725
    },
    {
      "id": "a739973a2958debe",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a739973a2958debe",
        "text": "https://youtu.be/lw6TaiXzHAE?t=1974"
      },
      "after": "e0fcac7a64ebf432",
      "date": 1673999499398
    },
    {
      "type": "add",
      "id": "4f1a7e4c8e52c100",
      "item": {
        "type": "paragraph",
        "id": "4f1a7e4c8e52c100",
        "text": "https://youtu.be/lw6TaiXzHAE?t=1997"
      },
      "after": "a739973a2958debe",
      "date": 1673999602502
    },
    {
      "type": "edit",
      "id": "4f1a7e4c8e52c100",
      "item": {
        "type": "paragraph",
        "id": "4f1a7e4c8e52c100",
        "text": "[[https://youtu.be/lw6TaiXzHAE?t=1997 33:18]]\na generic type is a map from one or more types to types put another way a generic type is a"
      },
      "date": 1673999664761
    },
    {
      "type": "add",
      "id": "aed0f0c340264c0a",
      "item": {
        "type": "paragraph",
        "id": "aed0f0c340264c0a",
        "text": "⇒ [[Generic Type]]"
      },
      "after": "a739973a2958debe",
      "date": 1673999705535
    },
    {
      "id": "4f1a7e4c8e52c100",
      "type": "remove",
      "date": 1673999717216
    },
    {
      "type": "edit",
      "id": "e0fcac7a64ebf432",
      "item": {
        "type": "paragraph",
        "id": "e0fcac7a64ebf432",
        "text": "a [[Pattern]] is a [[plan]] that has some number of parts and shows you how each part turns a face to the others how each joins with the others or stands off how each part does what it does and how the others ate it or drag it down and how all the parts may be grasped as a whole and made to serve as one thing for some higher goal or as part of a larger pattern a pattern should give hints or clues as to when and where it is best put to use what is more some of the parts of a pattern may be [[Hole]]s or slots in which other things may be placed later a good pattern will say how changes can be made in the course of time thus some choices of the plan are built in as part of the pattern and other choices wait till the time when the pattern is to be used in this way a pattern stands for a design space in which you can choose on the fly your own path for growth and change it is good to design a thing but it can be far better and far harder to design a pattern best of all is to know when to use a pattern now for some more computer words […]"
      },
      "date": 1702449453674
    },
    {
      "type": "edit",
      "id": "04559edb50c8dbfa",
      "item": {
        "type": "reference",
        "id": "04559edb50c8dbfa",
        "site": "wiki.ralfbarkow.ch",
        "slug": "computational-scripts",
        "title": "Computational Scripts",
        "text": "[[Scripts]] also support a computational theory, similar in spirit to frames in artificial intelligence (Minsky 1981). Both are based on the general idea of [[Schema]]s as a [[Basis for Mental Representation]] (see e.g. Arbib 1989; Brewer and Nakamura 1984; Bartlett 1932; Bobrow and Norman 1975; Rumelhart 1980). According to schema theory, people organize knowledge about familiar objects, situations, and procedures in terms of prototypes, or schemas. A schema consists of a [[Representation]] for common knowledge that is shared by all instances, and a number of slots […]"
      },
      "date": 1702449515375
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702451903000
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1705703860298
    },
    {
      "item": {
        "type": "factory",
        "id": "f2362e31c39a2a9a"
      },
      "id": "f2362e31c39a2a9a",
      "type": "add",
      "after": "f13a30584f16d1b4",
      "date": 1705703870202
    },
    {
      "id": "f2362e31c39a2a9a",
      "type": "move",
      "order": [
        "e0fcac7a64ebf432",
        "f2362e31c39a2a9a",
        "a739973a2958debe",
        "aed0f0c340264c0a",
        "439a7cb8446eacd8",
        "617b22a34a02e365",
        "04559edb50c8dbfa",
        "086d41eb9b37e1e9",
        "09f32d1ad8ae8a65",
        "3d204d5c302fb669",
        "f13a30584f16d1b4"
      ],
      "date": 1705703880462
    },
    {
      "type": "edit",
      "id": "f2362e31c39a2a9a",
      "item": {
        "type": "video",
        "id": "f2362e31c39a2a9a",
        "text": "START 1974"
      },
      "date": 1705703887414
    },
    {
      "type": "edit",
      "id": "f2362e31c39a2a9a",
      "item": {
        "type": "video",
        "id": "f2362e31c39a2a9a",
        "text": "START 1974\nYOUTUBE lw6TaiXzHAE"
      },
      "date": 1705703896083
    },
    {
      "type": "edit",
      "id": "f2362e31c39a2a9a",
      "item": {
        "type": "video",
        "id": "f2362e31c39a2a9a",
        "text": "START 1974\nYOUTUBE lw6TaiXzHAE\n⇒ [[Generic Type]]"
      },
      "date": 1705703942050
    },
    {
      "type": "remove",
      "id": "a739973a2958debe",
      "date": 1705703944577
    },
    {
      "type": "remove",
      "id": "aed0f0c340264c0a",
      "date": 1705703947181
    },
    {
      "type": "fork",
      "site": "mold.dreyeck.ch",
      "date": 1705736155127
    },
    {
      "type": "edit",
      "id": "3cf61765f5d37872",
      "item": {
        "type": "paragraph",
        "id": "3cf61765f5d37872",
        "text": "How to add a slot to a class?"
      },
      "date": 1705736166197
    },
    {
      "type": "edit",
      "id": "3cf61765f5d37872",
      "item": {
        "type": "paragraph",
        "id": "3cf61765f5d37872",
        "text": "How to add a slot to a class? [https://book.gtoolkit.com/how-to-add-a-slot-to-a-class--1l8n7i2kpw3dklbuj0hhxndin page]"
      },
      "date": 1705736220175
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1705750607897
    },
    {
      "type": "edit",
      "id": "e0fcac7a64ebf432",
      "item": {
        "type": "paragraph",
        "id": "e0fcac7a64ebf432",
        "text": "a [[Pattern]] is a [[plan]] that has some number of parts and shows you how each part turns a face to the others [⇒ [[Turn a Face to the Other]]] how each joins with the others or stands off how each part does what it does and how the others ate it or drag it down and how all the parts may be grasped as a whole and made to serve as one thing for some higher goal or as part of a larger pattern a pattern should give hints or clues as to when and where it is best put to use what is more some of the parts of a pattern may be [[Hole]]s or slots in which other things may be placed later a good pattern will say how changes can be made in the course of time thus some choices of the plan are built in as part of the pattern and other choices wait till the time when the pattern is to be used in this way a pattern stands for a design space in which you can choose on the fly your own path for growth and change it is good to design a thing but it can be far better and far harder to design a pattern best of all is to know when to use a pattern now for some more computer words […]"
      },
      "date": 1705750700123
    },
    {
      "type": "fork",
      "site": "mold.dreyeck.ch",
      "date": 1706135199443
    },
    {
      "type": "edit",
      "id": "e0fcac7a64ebf432",
      "item": {
        "type": "paragraph",
        "id": "e0fcac7a64ebf432",
        "text": "a [[Pattern]] is a [[plan]] that has some number of parts and shows you how each part turns a face to the others [⇒ [[Turn a Face to the Other]]] how each joins with the others or stands off how each part does what it does and how the others ate it or drag it down and how all the parts may be grasped as a whole and made to serve as one thing for some higher goal or as part of a larger pattern."
      },
      "date": 1706711785974
    },
    {
      "type": "add",
      "id": "cc58fb742523d9ae",
      "item": {
        "type": "paragraph",
        "id": "cc58fb742523d9ae",
        "text": "A pattern should give hints or clues as to when and where it is best put to use what is more some of the parts of a pattern may be [[Hole]]s or slots in which other things may be placed later a good pattern will say how changes can be made in the course of time thus some choices of the plan are built in as part of the pattern and other choices wait till the time when the pattern is to be used in this way a pattern stands for a design space in which you can choose on the fly your own path for growth and change it is good to design a thing but it can be far better and far harder to design a pattern best of all is to know when to use a pattern now for some more computer words […]"
      },
      "after": "e0fcac7a64ebf432",
      "date": 1706711786733
    },
    {
      "type": "edit",
      "id": "cc58fb742523d9ae",
      "item": {
        "type": "paragraph",
        "id": "cc58fb742523d9ae",
        "text": "A pattern should give hints or clues as to when and where it is best put to use what is more some of the parts of a pattern may be [[Hole]]s or slots in which other things may be placed later a good pattern will say how changes can be made in the course of time thus some choices of the plan are built in as part of the pattern and other choices wait till the time when the pattern is to be used in this way a pattern stands for a design space in which you can choose on the fly your own path for growth and change it is good to design a thing but it can be far better and far harder to design a pattern best of all is to know when to use a pattern."
      },
      "date": 1706711861289
    },
    {
      "type": "add",
      "id": "6fb6d01ad0024804",
      "item": {
        "type": "paragraph",
        "id": "6fb6d01ad0024804",
        "text": "Now for some more computer words […]"
      },
      "after": "cc58fb742523d9ae",
      "date": 1706711862382
    },
    {
      "type": "edit",
      "id": "e0fcac7a64ebf432",
      "item": {
        "type": "paragraph",
        "id": "e0fcac7a64ebf432",
        "text": "A [[Pattern]] is a [[plan]] that has some number of parts and shows you how each part turns a face to the others [⇒ [[Turn a Face to the Other]]] how each joins with the others or stands off how each part does what it does and how the others ate it or drag it down and how all the parts may be grasped as a whole and made to serve as one thing for some higher goal or as part of a larger pattern."
      },
      "date": 1706711890772
    },
    {
      "type": "edit",
      "id": "e0fcac7a64ebf432",
      "item": {
        "type": "paragraph",
        "id": "e0fcac7a64ebf432",
        "text": "A [[Pattern]] is a [[Plan]] that has some number of parts and shows you how each part turns a face to the others [⇒ [[Turn a Face to the Other]]] how each joins with the others or stands off how each part does what it does and how the others ate it or drag it down and how all the parts may be grasped as a whole and made to serve as one thing for some higher goal or as part of a larger pattern."
      },
      "date": 1706711907786
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1706712059835
    }
  ]
}