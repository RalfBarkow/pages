{
  "title": "String Template Literals",
  "story": [
    {
      "type": "paragraph",
      "id": "646e6d9e0f70297a",
      "text": "The “aba” program can be written in a Javascript program using string template literals."
    },
    {
      "type": "code",
      "id": "7cfe8b4ce5a68e13",
      "text": "// Javascript \nlet x = \"a\" ; \nexport default `${x}b${x}`;"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "1af2f4f212123a1b",
      "text": "//localhost:3000/assets/pages/js-snippet-template/importjs.html\n"
    },
    {
      "type": "pagefold",
      "id": "fcf748bae0bcd2de",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "4367c0bf2fb48dbf",
      "text": "CRICHTON, Will and KRISHNAMURTHI, Shriram, 2024. A Core Calculus for Documents: Or, Lambda: The Ultimate Document. Proceedings of the ACM on Programming Languages. 5 January 2024. Vol. 8, no. POPL, p. 23:667-23:694. DOI 10.1145/3632865. \nPassive documents and active programs now widely comingle. Document languages include Turing-complete programming elements, and programming languages include sophisticated document notations. However, there are no formal foundations that model these languages. This matters because the [[Interaction Between Document and Program]] can be subtle and error-prone. In this paper we describe several such problems, then taxonomize and formalize document languages as levels of a document calculus. We employ the calculus as a foundation for implementing complex features such as reactivity, as well as for proving theorems about the boundary of content and computation. We intend for the document calculus to provide a theoretical basis for new document languages, and to assist designers in cleaning up the unsavory corners of existing languages.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "String Template Literals",
        "story": []
      },
      "date": 1711445477205
    },
    {
      "item": {
        "type": "factory",
        "id": "7cfe8b4ce5a68e13"
      },
      "id": "7cfe8b4ce5a68e13",
      "type": "add",
      "date": 1711445478341
    },
    {
      "type": "edit",
      "id": "7cfe8b4ce5a68e13",
      "item": {
        "type": "code",
        "id": "7cfe8b4ce5a68e13",
        "text": "// Javascript 2 \nlet x = a ; \n`${x}b${x}`"
      },
      "date": 1711445500487
    },
    {
      "item": {
        "type": "factory",
        "id": "1af2f4f212123a1b"
      },
      "id": "1af2f4f212123a1b",
      "type": "add",
      "after": "7cfe8b4ce5a68e13",
      "date": 1711445531065
    },
    {
      "type": "edit",
      "id": "1af2f4f212123a1b",
      "item": {
        "type": "frame",
        "id": "1af2f4f212123a1b",
        "text": "//localhost:3000/assets/pages/js-snippet-template/importjs.html\nHEIGHT 400"
      },
      "date": 1711445541540
    },
    {
      "type": "edit",
      "id": "7cfe8b4ce5a68e13",
      "item": {
        "type": "code",
        "id": "7cfe8b4ce5a68e13",
        "text": "// Javascript 2 \nlet x = \"a\" ; \n`${x}b${x}`"
      },
      "date": 1711445557792
    },
    {
      "type": "edit",
      "id": "7cfe8b4ce5a68e13",
      "item": {
        "type": "code",
        "id": "7cfe8b4ce5a68e13",
        "text": "// Javascript 2 \nlet x = \"a\" ; \nshow.innerHTML = `${x}b${x}`;"
      },
      "date": 1711445737647
    },
    {
      "type": "edit",
      "id": "1af2f4f212123a1b",
      "item": {
        "type": "frame",
        "id": "1af2f4f212123a1b",
        "text": "//localhost:3000/assets/pages/js-snippet-template/importjs.html\n"
      },
      "date": 1711445817226
    },
    {
      "type": "edit",
      "id": "7cfe8b4ce5a68e13",
      "item": {
        "type": "code",
        "id": "7cfe8b4ce5a68e13",
        "text": "// Javascript 2 \nlet x = \"a\" ; \nshow = `${x}b${x}`;"
      },
      "date": 1711445931056
    },
    {
      "type": "edit",
      "id": "7cfe8b4ce5a68e13",
      "item": {
        "type": "code",
        "id": "7cfe8b4ce5a68e13",
        "text": "// Javascript 2 \nlet x = \"a\" ; \nexport default `${x}b${x}`;"
      },
      "date": 1711446015254
    },
    {
      "type": "edit",
      "id": "7cfe8b4ce5a68e13",
      "item": {
        "type": "code",
        "id": "7cfe8b4ce5a68e13",
        "text": "// Javascript \nlet x = \"a\" ; \nexport default `${x}b${x}`;"
      },
      "date": 1711446045541
    },
    {
      "id": "caa626ac93aa7d4c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "caa626ac93aa7d4c",
        "text": "In the frame below we can view the results."
      },
      "after": "7cfe8b4ce5a68e13",
      "attribution": {
        "page": "JS Snippet Template",
        "site": "js.ward.asia.wiki.org"
      },
      "date": 1711446061792
    },
    {
      "item": {
        "type": "factory",
        "id": "646e6d9e0f70297a"
      },
      "id": "646e6d9e0f70297a",
      "type": "add",
      "after": "1af2f4f212123a1b",
      "date": 1711446108558
    },
    {
      "id": "646e6d9e0f70297a",
      "type": "move",
      "order": [
        "646e6d9e0f70297a",
        "7cfe8b4ce5a68e13",
        "caa626ac93aa7d4c",
        "1af2f4f212123a1b"
      ],
      "date": 1711446111549
    },
    {
      "type": "edit",
      "id": "646e6d9e0f70297a",
      "item": {
        "type": "paragraph",
        "id": "646e6d9e0f70297a",
        "text": "The “aba” program can be written in a Javascript program using string template literals."
      },
      "date": 1711446141848
    },
    {
      "item": {
        "type": "factory",
        "id": "fcf748bae0bcd2de"
      },
      "id": "fcf748bae0bcd2de",
      "type": "add",
      "after": "1af2f4f212123a1b",
      "date": 1711446198828
    },
    {
      "type": "edit",
      "id": "fcf748bae0bcd2de",
      "item": {
        "type": "pagefold",
        "id": "fcf748bae0bcd2de",
        "text": "~"
      },
      "date": 1711446201934
    },
    {
      "item": {
        "type": "factory",
        "id": "4367c0bf2fb48dbf"
      },
      "id": "4367c0bf2fb48dbf",
      "type": "add",
      "after": "fcf748bae0bcd2de",
      "date": 1711446203311
    },
    {
      "type": "edit",
      "id": "4367c0bf2fb48dbf",
      "item": {
        "type": "paragraph",
        "id": "4367c0bf2fb48dbf",
        "text": "\nCRICHTON, Will and KRISHNAMURTHI, Shriram, 2024. A Core Calculus for Documents: Or, Lambda: The Ultimate Document. Proceedings of the ACM on Programming Languages. 5 January 2024. Vol. 8, no. POPL, p. 23:667-23:694. DOI 10.1145/3632865. \nPassive documents and active programs now widely comingle. Document languages include Turing-complete programming elements, and programming languages include sophisticated document notations. However, there are no formal foundations that model these languages. This matters because the interaction between document and program can be subtle and error-prone. In this paper we describe several such problems, then taxonomize and formalize document languages as levels of a document calculus. We employ the calculus as a foundation for implementing complex features such as reactivity, as well as for proving theorems about the boundary of content and computation. We intend for the document calculus to provide a theoretical basis for new document languages, and to assist designers in cleaning up the unsavory corners of existing languages.\n"
      },
      "date": 1711446205225
    },
    {
      "type": "edit",
      "id": "4367c0bf2fb48dbf",
      "item": {
        "type": "paragraph",
        "id": "4367c0bf2fb48dbf",
        "text": "CRICHTON, Will and KRISHNAMURTHI, Shriram, 2024. A Core Calculus for Documents: Or, Lambda: The Ultimate Document. Proceedings of the ACM on Programming Languages. 5 January 2024. Vol. 8, no. POPL, p. 23:667-23:694. DOI 10.1145/3632865. \nPassive documents and active programs now widely comingle. Document languages include Turing-complete programming elements, and programming languages include sophisticated document notations. However, there are no formal foundations that model these languages. This matters because the [[Interaction Between Document and Program]] can be subtle and error-prone. In this paper we describe several such problems, then taxonomize and formalize document languages as levels of a document calculus. We employ the calculus as a foundation for implementing complex features such as reactivity, as well as for proving theorems about the boundary of content and computation. We intend for the document calculus to provide a theoretical basis for new document languages, and to assist designers in cleaning up the unsavory corners of existing languages.\n"
      },
      "date": 1711446280178
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711468618301
    }
  ]
}