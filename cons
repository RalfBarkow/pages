{
  "title": "cons",
  "story": [
    {
      "type": "paragraph",
      "id": "0ebf1a85b274ef0f",
      "text": "In computer programming, cons (/ˈkɒnz/ or /ˈkɒns/) is a fundamental function in most dialects of the Lisp programming language. cons constructs memory objects which hold two values or pointers to two values. These objects are referred to as (cons) cells, conses, non-atomic s-expressions (\"NATSes\"), or (cons) pairs. In Lisp jargon, the expression \"to cons x onto y\" means to construct a new object with (cons x y). The resulting pair has a left half, referred to as the car (the first element, or contents of the address part of register), and a right half, referred to as the cdr (the second element, or contents of the decrement part of register). [https://en.wikipedia.org/wiki/Cons wikipedia]\n"
    },
    {
      "type": "paragraph",
      "id": "f772baa1baf69d50",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "9c56f01096224f0e",
      "text": "The word \"cons\" and expressions like \"to cons onto\" are also part of a more general functional programming jargon. Sometimes operators that have a similar purpose, especially in the context of list processing, are pronounced \"cons\". (A good example is the :: operator in ML, Scala, F#, Lean, Coq, and [[Elm]] or the : operator in Haskell, which adds an element to the beginning of a list.) "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "cons",
        "story": []
      },
      "date": 1696367134936
    },
    {
      "item": {
        "type": "factory",
        "id": "0ebf1a85b274ef0f"
      },
      "id": "0ebf1a85b274ef0f",
      "type": "add",
      "date": 1696367158106
    },
    {
      "type": "edit",
      "id": "0ebf1a85b274ef0f",
      "item": {
        "type": "paragraph",
        "id": "0ebf1a85b274ef0f",
        "text": "In computer programming, cons (/ˈkɒnz/ or /ˈkɒns/) is a fundamental function in most dialects of the Lisp programming language. cons constructs memory objects which hold two values or pointers to two values. These objects are referred to as (cons) cells, conses, non-atomic s-expressions (\"NATSes\"), or (cons) pairs. In Lisp jargon, the expression \"to cons x onto y\" means to construct a new object with (cons x y). The resulting pair has a left half, referred to as the car (the first element, or contents of the address part of register), and a right half, referred to as the cdr (the second element, or contents of the decrement part of register).\n\n"
      },
      "date": 1696367160901
    },
    {
      "type": "edit",
      "id": "0ebf1a85b274ef0f",
      "item": {
        "type": "paragraph",
        "id": "0ebf1a85b274ef0f",
        "text": "In computer programming, cons (/ˈkɒnz/ or /ˈkɒns/) is a fundamental function in most dialects of the Lisp programming language. cons constructs memory objects which hold two values or pointers to two values. These objects are referred to as (cons) cells, conses, non-atomic s-expressions (\"NATSes\"), or (cons) pairs. In Lisp jargon, the expression \"to cons x onto y\" means to construct a new object with (cons x y). The resulting pair has a left half, referred to as the car (the first element, or contents of the address part of register), and a right half, referred to as the cdr (the second element, or contents of the decrement part of register). [https://en.wikipedia.org/wiki/Cons wikipedia]\n"
      },
      "date": 1696367175252
    },
    {
      "item": {
        "type": "factory",
        "id": "f772baa1baf69d50"
      },
      "id": "f772baa1baf69d50",
      "type": "add",
      "after": "0ebf1a85b274ef0f",
      "date": 1696367261122
    },
    {
      "type": "edit",
      "id": "f772baa1baf69d50",
      "item": {
        "type": "paragraph",
        "id": "f772baa1baf69d50",
        "text": "[…]"
      },
      "date": 1696367263978
    },
    {
      "type": "add",
      "id": "9c56f01096224f0e",
      "item": {
        "type": "paragraph",
        "id": "9c56f01096224f0e",
        "text": "The word \"cons\" and expressions like \"to cons onto\" are also part of a more general functional programming jargon. Sometimes operators that have a similar purpose, especially in the context of list processing, are pronounced \"cons\". (A good example is the :: operator in ML, Scala, F#, Lean, Coq, and Elm or the : operator in Haskell, which adds an element to the beginning of a list.) "
      },
      "after": "f772baa1baf69d50",
      "date": 1696367264915
    },
    {
      "type": "edit",
      "id": "9c56f01096224f0e",
      "item": {
        "type": "paragraph",
        "id": "9c56f01096224f0e",
        "text": "The word \"cons\" and expressions like \"to cons onto\" are also part of a more general functional programming jargon. Sometimes operators that have a similar purpose, especially in the context of list processing, are pronounced \"cons\". (A good example is the :: operator in ML, Scala, F#, Lean, Coq, and [[Elm]] or the : operator in Haskell, which adds an element to the beginning of a list.) "
      },
      "date": 1696367302116
    }
  ]
}