{
  "title": "2022-10-10",
  "story": [
    {
      "type": "reference",
      "id": "aa60f16e9595d57c",
      "site": "thompson.fed.wiki",
      "slug": "making-something",
      "title": "Making Something",
      "text": "[https://medium.com/@scott.stevenson/how-to-finally-make-something-a16c8db7ba2a How To Finally Make Something], an article shared by Ralf. In it, Scott writes:"
    },
    {
      "type": "reference",
      "id": "6dcacda2f1299254",
      "site": "thompson.fed.wiki",
      "slug": "just-in-time-learner",
      "title": "Just-In-Time Learner",
      "text": "There are some students who are compliant learners and thrive in traditional learning environments. They do well on tests and are rewarded with good grades. They have mastered the ‘game of school’."
    },
    {
      "type": "paragraph",
      "id": "8206b0a4ca872e80",
      "text": "About Bootstrapping. [https://dougengelbart.org/content/view/226/ bootstrapping] "
    },
    {
      "type": "markdown",
      "id": "b8e423f5b4f342af",
      "text": "> […] the expectation that anyone working on an important aspect of boosting Collective IQ will seriously push the envelope through their own experimentatal usage of their work product(s); it's providers using what they provide to become faster, smarter, more effective providers. \n"
    },
    {
      "type": "markdown",
      "id": "9deb22f655a0c84e",
      "text": "# Re: Bootstrapping\nHow does this \"faster, smarter, more effective\" relate to [[Deep Listening]] (dadirri)?\n"
    },
    {
      "type": "markdown",
      "id": "af698b846da4ec3b",
      "text": "dadiiri reminds me of player 1 – player 2 oscillating as long as she, i.e. the observer, is unable to unfold a paradox.\n"
    },
    {
      "type": "markdown",
      "id": "77782f7282c25438",
      "text": "I understood Miriam-Rose Ungunmerr-Baumann as saying that dadirri was the greatest gift they could give, asking in return for companionship, so to speak, on their journey to find their own pace.\n\n"
    },
    {
      "type": "markdown",
      "id": "6bb5ebbfd28013b1",
      "text": "The challenge would be not to impose a metronome on her/us, but to consider the walking/learning path as an emerging common metronome."
    },
    {
      "type": "paragraph",
      "id": "f73037a1879dbd22",
      "text": "⇒ [[Metronom]]"
    },
    {
      "type": "markdown",
      "id": "31ae5ada69a9dd9d",
      "text": "⇒ [[Paradoxieentfaltung]] ⇒ Die Paradoxie des Entscheidens\n"
    },
    {
      "type": "markdown",
      "id": "72e01175ec793650",
      "text": "LUHMANN, Niklas, 2000. Die Paradoxie des Entscheidens. In: LUHMANN, Niklas, Organisation und Entscheidung. Online. Wiesbaden: VS Verlag für Sozialwissenschaften. p. 123–151. [Accessed 23 July 2022]. ISBN 978-3-322-97094-7. \n\n"
    },
    {
      "type": "markdown",
      "id": "ed8de687bcacf5c1",
      "text": "> The concept of [[Action]] is thus associated with reduced modes of attribution, and this leads to the question: who attributes? Or more generally: who observes and describes an action as an action, a [[Decision]] as a decision?\n"
    },
    {
      "type": "markdown",
      "id": "4169d217418f80ee",
      "text": "⇒ [[Organisation und Entscheidung]] ⇒ [[Organizations Learn]]"
    },
    {
      "type": "pagefold",
      "id": "5ebc11a378f52e6e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f6a4513694e44f22",
      "text": "Kleine Einführung\nin die Programmierung [⇒[[Programming]]]\n\n(mit Eclipse und Haskell)\nChristopher Oezbek"
    },
    {
      "type": "paragraph",
      "id": "21ce88b1b7f7c933",
      "text": "/Users/rgb/Documents/2009/2009-11/2009-11-29"
    },
    {
      "type": "paragraph",
      "id": "dad2125bba8fc56b",
      "text": "Oezbek04a_-_EclipseIntroduction.ppt"
    },
    {
      "type": "paragraph",
      "id": "4105090c41ee5ab8",
      "text": "The [[Programming]] page relates its definiton of programming to making and encoding decisions and thus to organizations."
    },
    {
      "type": "reference",
      "id": "baab83315a644932",
      "site": "marc.tries.fed.wiki",
      "slug": "xp-and-normative-good",
      "title": "XP and Normative Good",
      "text": "Extreme Programming (xp) prescribes a dozen practices that reinforce each other so as to allow teams to make software development decisions. We examine the distribution of responsibilities required for, and means to arrive at, good decisions within this framework."
    },
    {
      "type": "reference",
      "id": "40dfadfb5fb8ed8a",
      "site": "wiki.ralfbarkow.ch",
      "slug": "process",
      "title": "Process",
      "text": "See [[Process (Prozess)]]."
    },
    {
      "type": "paragraph",
      "id": "ea8675dce1c8e5e4",
      "text": "The [[Process]] page is an example of a fork in the path (of transformation)."
    },
    {
      "type": "paragraph",
      "id": "ddb855e15c07fc57",
      "text": "Monetarisierung führt zu einer selbstzerstörerischen Kundenbindung. [https://twitter.com/jonathoda/status/1247249288834539524?s=20&t=CsnmaYR_PxJ3utt4nVVrxA tweet], [https://alarmingdevelopment.org/?p=1632 post]"
    },
    {
      "type": "markdown",
      "id": "339780fcb8dc36ee",
      "text": "* What is wrong with programming? [https://github.com/MondoAurora/DustFramework/wiki/What-is-wrong-with-programming page]"
    },
    {
      "type": "graphviz",
      "id": "3a7a1d9680e8ac0c",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "paragraph",
      "id": "d485b80939ca4906",
      "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[Goal Analysis]] ⇒ [[Label Propagation]] ⇒ [[Finding Communities]] ⇒ [[Goals]] ⇒ [[Ends Planning]]"
    },
    {
      "type": "markdown",
      "id": "d68f3b225d8cf690",
      "text": "⇒ [[Using the Injector Pane]]\n"
    },
    {
      "type": "markdown",
      "id": "085bbd582e6c93e9",
      "text": "⇒ [[create]] a [[Topicmap]]\n"
    },
    {
      "type": "markdown",
      "id": "d86d53ffcca59195",
      "text": "* [[Workspace]] ⇒ [[Box]] ⇒ [[Page]] ⇒ [[Story]]"
    },
    {
      "type": "markdown",
      "id": "a020867f3a332a4a",
      "text": "⇒ [[Form]]\n* How to change the order of fields in a form? [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#how-to-change-the-order-of-fields-in-a-form page]"
    },
    {
      "type": "markdown",
      "id": "0351aa576d88556c",
      "text": "* You can benefit from [[DMX]]’s [[Model-Driven Form Generator]]: When you create instances of the composite you defined, the editing form contains fields for all identity attributes of child instances. You thus get a [[Form]] with all properties you want to add. The child instances linked to the parent by a Custom Association Type are also part of the form. When you fill in those fields, the semantics of the Custom Association type are carried over to the instance. You do not have to drag associations but they are added for you through the form resp. your data model. [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#custom-association-types page]"
    },
    {
      "type": "paragraph",
      "id": "f67d5b2ac4f684a6",
      "text": "⇒ [[find]] ⇒ [[Finding Communities]]"
    },
    {
      "type": "markdown",
      "id": "11f45399a97dbd3c",
      "text": "* [[Assistance]] in filling out forms.\n* [[Micropayment]] ⇒ [[History of micropayments]] ⇒ [[Ted Nelson]] ⇒ [[Web Monetization API]]\n* [[Greenlight]] ⇒ [[Computation]]"
    },
    {
      "type": "markdown",
      "id": "7c4048b0312272ad",
      "text": "> Its network layer is powered by [https://croquet.io Croquet]. Croquet's unique technology ensures bit-identical [[Computation]] in each participants' local browser, reducing network traffic and latency.\n\n"
    },
    {
      "type": "paragraph",
      "id": "7444c201c7920818",
      "text": "⇒ [[Box]] ⇒ [[Fence after Fence]] ⇒ [[Display-Scene Tree]]"
    },
    {
      "type": "paragraph",
      "id": "045f8361beafa92c",
      "text": " OHSHIMA, Yoshiki, FREUDENBERG, Bert, KAEHLER, Ted and LUNZER, Aran, 2012. A report on KScript and KSWorld.\n"
    },
    {
      "type": "markdown",
      "id": "1d89f5a50fef5dc9",
      "text": "* [[Behaviors and Events]]\n* [[Setting Values into Streams]]"
    },
    {
      "type": "paragraph",
      "id": "7ce82d564c1a5d1b",
      "text": "⇒ [[Business Model]]"
    },
    {
      "type": "markdown",
      "id": "15ab5b742b0c443a",
      "text": "* Dynamic form rendering and filling the form from a JSON object?\n* Json-GUI—A module for the dynamic generation of form-based web interfaces. [https://www.sciencedirect.com/science/article/pii/S2352711018300505 sciencedirect], [https://doi.org/10.1016/j.softx.2018.11.007 doi], [https://github.com/ElsevierSoftwareX/SOFTX_2018_32 github] depends on Google Maps JavaScript API [https://developers.google.com/maps/documentation/javascript/error-messages#invalid-key page]"
    },
    {
      "type": "markdown",
      "id": "984a2ef03b438561",
      "text": "* Mapbox GL JS. [https://www.mapbox.com/mapbox-gljs site], [https://www.diva-portal.org/smash/get/diva2:851452/FULLTEXT02 pdf], [https://github.com/mapbox/mapbox-gl-js github]\n"
    },
    {
      "type": "markdown",
      "id": "3e53caea68900e6a",
      "text": "* \nLeveraging Linked Data to Build Hypermedia-Driven Web APIs by [[Markus Lanthaler]]"
    },
    {
      "type": "paragraph",
      "id": "d8798cd6f698d0d2",
      "text": "\nLANTHALER, Markus, 2014. Leveraging Linked Data to Build Hypermedia-Driven Web APIs. In: PAUTASSO, Cesare, WILDE, Erik and ALARCON, Rosa (eds.), REST: Advanced Research Topics and Practical Applications. Online. New York, NY: Springer. p. 107–123. [Accessed 10 October 2022]. ISBN 978-1-4614-9299-3. "
    },
    {
      "type": "markdown",
      "id": "8f6679d1c9133e3d",
      "text": "> In this chapter we will illustrate how [[Linked Data]] can be used to create loosely coupled, hypermedia-driven Web APIs. Apart from introducing [[JSON-LD]] and showing how it can be used as a generic data format for Web APIs, we will demonstrate how a short list of concrete design guidelines and a small vocabulary can be used to create APIs that expose enough information to be usable by a completely generic API browser. Based on a simple prototype, we will show how easily such a, at first sight, disruptive approach can be integrated in current Web frameworks and how it can be used to build interoperable and evolvable APIs in considerably less time. Last but not least, we will give an outlook of how such an approach opens the door to other Semantic Web technologies.\n"
    },
    {
      "type": "paragraph",
      "id": "8410e68ceea5c8cd",
      "text": "PAUTASSO, Cesare, WILDE, Erik and ALARCÓN, Rosa (eds.), 2014. REST: advanced research topics and practical applications. New York: Springer. ISBN 978-1-4614-9298-6. \n"
    },
    {
      "type": "paragraph",
      "id": "74fd08e5a0e39178",
      "text": "The current best practice for developing truly [[RESTful]] [[JSON]]-based Web APIs is to define a custom media type which extends JSON to support labeled hyperlinks."
    },
    {
      "type": "markdown",
      "id": "b45df7138bdb9d94",
      "text": "* Collection+JSON [13]"
    },
    {
      "type": "paragraph",
      "id": "eac6db90a7c709cc",
      "text": "The RESTfulness of [[Speech Acts]] | Manageability, 2017. Online. [Accessed 27 May 2021]. Available from: https://web.archive.org/web/20170424134126/https://www.manageability.org/blog/stuff/the-restfulness-of-speech-acts/view\n"
    },
    {
      "type": "paragraph",
      "id": "88c17ac638ac030c",
      "text": "⇒ [[Stefan Marr]] ⇒ [[RESTful Web Services]]"
    },
    {
      "type": "markdown",
      "id": "e29d06095fffb348",
      "text": "MARR, Stefan, [no date]. RESTful Web Services. Online. [Accessed 27 May 2021]. Available from: https://stefan-marr.de/pages/restful-web-services/"
    },
    {
      "type": "markdown",
      "id": "5a6094f2ac5d8425",
      "text": "> Der REST-Architekturstil und der Representational State Transfer als Basis für das Design von Web Services werden vorgestellt. Als Heranführung werden die Grundlagen für interoperable Schnittstellen behandelt, welche an HTTP als eine Implementierung konkretisiert werden, um darauf aufbauend die vier wesentlichen Fragen und acht notwendigen Prinzipien zur konkreten Erstellung eines RESTful Web Services an einem Beispiel zu verdeutlichen. Darüber hinaus werden kurz Ansätze zur Lösung gängiger Probleme angerissen, um anschließend auf Vorteil des REST-Architekturstils insgesamt einzugehen und damit ein Fazit zu ziehen.\n\nKeywords: Interoperabilität, REST, Systemarchitektur, Web Services\n"
    },
    {
      "type": "markdown",
      "id": "a0fdc25e742772cd",
      "text": "* [[URI]]s ⇒ [[Linked Data]] \n* [[DMXObject]]\n"
    },
    {
      "type": "markdown",
      "id": "69ec1ba80cdb6acf",
      "text": "The requirement to refer to a public vocabulary seems to be linked to the introduction of types. Maybe we should try to do without types for as long as possible and just use instances?! Instance of …? Instace of what? Instance of [[Distinction]]?!!"
    },
    {
      "type": "pagefold",
      "id": "1d77951ad66703a6",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "2ab481b84f0d452a",
      "text": "Evaluate graph nodes with dynamic properties, update svg in dom. [https://github.com/WardCunningham/assets/commit/92efee1dbc7167ae146881cd44fdec4650dd32a5 commit]"
    },
    {
      "type": "paragraph",
      "id": "b15749e955b3ef37",
      "text": "⇒ pages/[[super-collaborator]]/sim.js"
    },
    {
      "type": "paragraph",
      "id": "1559b659c2a5a95c",
      "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]] ⇒ [[Sorts]]"
    },
    {
      "type": "markdown",
      "id": "19746ee350a18e36",
      "text": "* SVG <polygon>. [https://www.w3schools.com/graphics/svg_polygon.asp w3schools]"
    },
    {
      "type": "markdown",
      "id": "5a43775f4e5dfcbd",
      "text": "My path from Thompson's [[Meaning Nodes]] to a kind of use case *Assistance in filling out forms* (or boxes):\nhttps://wiki.ralfbarkow.ch/view/2022-10-10/view/display-scene-tree/view/box – would have to be formulated …\n⇒ [[Display-Scene Tree]] ⇒ [[Time Bubbles]] ⇒ [[Box]]\n"
    },
    {
      "type": "markdown",
      "id": "ea57ddb7c419dc8e",
      "text": "Ward via [https://matrix.to/#/!zZErFjngcoPWssWRBH:dreyeck.freedombox.rocks/$2fflpOPEYzkdniyz4gfZwqYQSTNmlXWpSxC5Upczsrk?via=dreyeck.freedombox.rocks&via=matrix.org matrix]: Interesting background reading from Viewpoint Research Institute. [[Time Bubbles]] drew my attention immediately because of my recent addition of [[Clock]]s to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the [[Target]] applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n\n"
    },
    {
      "type": "markdown",
      "id": "3644fa27556ecebd",
      "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\n\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program. [https://github.com/khinsen/leibniz-pharo#leibniz-pharo github]\n\n"
    },
    {
      "type": "pagefold",
      "id": "961bfe01276bed81",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "06a5979db6659289",
      "text": "OHSHIMA, Yoshiki, FREUDENBERG, Bert, KAEHLER, Ted and LUNZER, Aran, 2012. A report on KScript and KSWorld. VPRI Research Note RN-2012-001. [http://www.vpri.org/pdf/rn2012001_kscript.pdf pdf]\n"
    },
    {
      "type": "paragraph",
      "id": "621fe592a1da8448",
      "text": "Time-aware computation models have a long\nhistory that goes back to John McCarthy’s Situation Calculus [14] and still\nwork is going on such as Dedalus [2], but they have not been fully adapted into\nEtoys-like authoring environments."
    },
    {
      "type": "paragraph",
      "id": "4d2acf0dbd52dd5d",
      "text": "[14] J. McCarthy and P. J. Hayes. Some philosophical problems from the standpoint of artificial intelligence. In B. Meltzer and D. Michie, editors, Machine Intelligence 4, pages 463–502. Edinburgh University Press, 1969. [http://www-formal.stanford.edu/jmc/mcchay69.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "758caa324d39f116",
      "text": "> […] Davidson’s main thesis is that, in order to translate statements involving actions into the predicate calculus, it appears necessary to allow actions as values of bound variables, that is (by Quine’s test) as real individuals. The situation calculus of course follows this advice in that we allow quantification over strategies, which have actions as a special case. Also important are Simon’s papers (1965, 1967) on command-logics. Simon’s main purpose is to show that a special logic of commands is unnecessary, ordinary logic serving as the only deductive machinery; but this need not detain us here. He makes several points, most notably perhaps that agents are most of the time not performing actions, and that in fact they only stir to action when forced to by some outside interference. He has the particularly interesting example of a serial processor operating in a parallel-demand environment, and the resulting need for interrupts. Action logics such as von Wright’s and ours do not distinguish between action and inaction, and we are not aware of any action-logic which has reached a stage of sophistication adequate to meet Simon’s implied criticism. \n>\n> There is a large body of purely philosophical writings on action, time, determinism, etc., most of which is irrelevant for present purposes. However, we mention two which have recently appeared and which seem interesting: a paper by Chisholm (1967) and another paper by Evans (1967), summarizing the recent discussion on the distinctions between states, performances and activities.\n"
    },
    {
      "type": "markdown",
      "id": "3588973ee7694336",
      "text": "⇒ [[Intelligent Machine]]"
    },
    {
      "type": "paragraph",
      "id": "7f9c11fa0e26f992",
      "text": "[2] P. Alvaro, W. Marczak, N. Conway, J. M. Hellerstein, D. Maier, R. C. Sears, P. Alvaro, W. R. Marczak, N. Conway, J. M. Hellerstein, D. Maier, and R. Sears. Dedalus: Datalog in time and space. Technical report, University of California, Berkeley, 2009. [https://apps.dtic.mil/sti/pdfs/ADA538767.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "866ab330fd3dee54",
      "text": "> […] First, the state of any such system evolves with its execution. Second, deductions in these systems may be arbitrarily delayed, dropped, or reordered by the unreliable network links they must traverse. Previous efforts addressed the former by extending Datalog to include updates, key constraints, persistence and events, and the latter by assuming ordered and reliable delivery while ignoring delay. These details have a semantics outside Datalog, which increases the complexity of the language or its interpretation, and forces programmers to think operationally. We argue that the missing component from these previous languages is a notion of *[[time]]*.\n"
    },
    {
      "type": "markdown",
      "id": "c7598759181dbf25",
      "text": "In this paper we present Dedalus, a foundation language for programming and reasoning about distributed systems. Dedalus reduces to a subset of Datalog [30] with negation, aggregate functions, successor and choice, and admits an explicit representation of time into the logic language. We show that Dedalus provides a declarative foundation for the two signature features of distributed systems: mutable state, and asynchronous processing and communication. Given these two features, we address three important properties of programs in a domain-specific manner: a notion of safety appropriate to non-terminating computations, stratified monotonic reasoning with negation over time, and efficient evaluation over time via a simple execution strategy. We also provide conservative syntactic checks for our temporal notions of safety and stratification. Our experience implementing full-featured systems in variants of Datalog suggests that Dedalus is well-suited to the specification of rich distributed services and protocols, and provides both cleaner semantics and richer tests of correctness."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-10-10",
        "story": []
      },
      "date": 1665381297765
    },
    {
      "item": {
        "type": "factory",
        "id": "f6a4513694e44f22"
      },
      "id": "f6a4513694e44f22",
      "type": "add",
      "date": 1665381299487
    },
    {
      "type": "edit",
      "id": "f6a4513694e44f22",
      "item": {
        "type": "paragraph",
        "id": "f6a4513694e44f22",
        "text": "Kleine Einführung\nin die Programmierung \n\n(mit Eclipse und Haskell)\nChristopher Oezbek"
      },
      "date": 1665381307302
    },
    {
      "item": {
        "type": "factory",
        "id": "21ce88b1b7f7c933"
      },
      "id": "21ce88b1b7f7c933",
      "type": "add",
      "after": "f6a4513694e44f22",
      "date": 1665381318737
    },
    {
      "type": "edit",
      "id": "21ce88b1b7f7c933",
      "item": {
        "type": "paragraph",
        "id": "21ce88b1b7f7c933",
        "text": "/Users/rgb/Documents/2009/2009-11/2009-11-29"
      },
      "date": 1665381321420
    },
    {
      "type": "add",
      "id": "dad2125bba8fc56b",
      "item": {
        "type": "paragraph",
        "id": "dad2125bba8fc56b",
        "text": "Oezbek04a_-_EclipseIntroduction.ppt"
      },
      "after": "21ce88b1b7f7c933",
      "date": 1665381339760
    },
    {
      "type": "edit",
      "id": "f6a4513694e44f22",
      "item": {
        "type": "paragraph",
        "id": "f6a4513694e44f22",
        "text": "Kleine Einführung\nin die Programmierung [[⇒Programming]]\n\n(mit Eclipse und Haskell)\nChristopher Oezbek"
      },
      "date": 1665381453643
    },
    {
      "type": "edit",
      "id": "f6a4513694e44f22",
      "item": {
        "type": "paragraph",
        "id": "f6a4513694e44f22",
        "text": "Kleine Einführung\nin die Programmierung [⇒[[Programming]]]\n\n(mit Eclipse und Haskell)\nChristopher Oezbek"
      },
      "date": 1665381486472
    },
    {
      "item": {
        "type": "factory",
        "id": "4105090c41ee5ab8"
      },
      "id": "4105090c41ee5ab8",
      "type": "add",
      "after": "dad2125bba8fc56b",
      "date": 1665381618153
    },
    {
      "type": "edit",
      "id": "4105090c41ee5ab8",
      "item": {
        "type": "paragraph",
        "id": "4105090c41ee5ab8",
        "text": "The decision"
      },
      "date": 1665381629830
    },
    {
      "type": "edit",
      "id": "4105090c41ee5ab8",
      "item": {
        "type": "paragraph",
        "id": "4105090c41ee5ab8",
        "text": "The [[Programming]] page relates its definiton of programming to making and encoding decisions and thus to organizations."
      },
      "date": 1665381701077
    },
    {
      "item": {
        "type": "factory",
        "id": "aa60f16e9595d57c"
      },
      "id": "aa60f16e9595d57c",
      "type": "add",
      "after": "4105090c41ee5ab8",
      "date": 1665381850429
    },
    {
      "id": "aa60f16e9595d57c",
      "type": "move",
      "order": [
        "aa60f16e9595d57c",
        "f6a4513694e44f22",
        "21ce88b1b7f7c933",
        "dad2125bba8fc56b",
        "4105090c41ee5ab8"
      ],
      "date": 1665381871001
    },
    {
      "type": "edit",
      "id": "aa60f16e9595d57c",
      "item": {
        "type": "reference",
        "id": "aa60f16e9595d57c",
        "site": "thompson.fed.wiki",
        "slug": "making-something",
        "title": "Making Something",
        "text": "[https://medium.com/@scott.stevenson/how-to-finally-make-something-a16c8db7ba2a How To Finally Make Something], an article shared by Ralf. In it, Scott writes:"
      },
      "date": 1665381888037
    },
    {
      "item": {
        "type": "factory",
        "id": "6dcacda2f1299254"
      },
      "id": "6dcacda2f1299254",
      "type": "add",
      "after": "4105090c41ee5ab8",
      "date": 1665381959773
    },
    {
      "id": "6dcacda2f1299254",
      "type": "move",
      "order": [
        "aa60f16e9595d57c",
        "6dcacda2f1299254",
        "f6a4513694e44f22",
        "21ce88b1b7f7c933",
        "dad2125bba8fc56b",
        "4105090c41ee5ab8"
      ],
      "date": 1665381964495
    },
    {
      "type": "edit",
      "id": "6dcacda2f1299254",
      "item": {
        "type": "reference",
        "id": "6dcacda2f1299254",
        "site": "thompson.fed.wiki",
        "slug": "just-in-time-learner",
        "title": "Just-In-Time Learner",
        "text": "There are some students who are compliant learners and thrive in traditional learning environments. They do well on tests and are rewarded with good grades. They have mastered the ‘game of school’."
      },
      "date": 1665381970537
    },
    {
      "item": {
        "type": "factory",
        "id": "5ebc11a378f52e6e"
      },
      "id": "5ebc11a378f52e6e",
      "type": "add",
      "after": "4105090c41ee5ab8",
      "date": 1665382057524
    },
    {
      "id": "5ebc11a378f52e6e",
      "type": "move",
      "order": [
        "aa60f16e9595d57c",
        "6dcacda2f1299254",
        "5ebc11a378f52e6e",
        "f6a4513694e44f22",
        "21ce88b1b7f7c933",
        "dad2125bba8fc56b",
        "4105090c41ee5ab8"
      ],
      "date": 1665382061988
    },
    {
      "type": "edit",
      "id": "5ebc11a378f52e6e",
      "item": {
        "type": "pagefold",
        "id": "5ebc11a378f52e6e",
        "text": "~"
      },
      "date": 1665382066772
    },
    {
      "item": {
        "type": "factory",
        "id": "8206b0a4ca872e80"
      },
      "id": "8206b0a4ca872e80",
      "type": "add",
      "after": "4105090c41ee5ab8",
      "date": 1665382070090
    },
    {
      "id": "8206b0a4ca872e80",
      "type": "move",
      "order": [
        "aa60f16e9595d57c",
        "6dcacda2f1299254",
        "8206b0a4ca872e80",
        "5ebc11a378f52e6e",
        "f6a4513694e44f22",
        "21ce88b1b7f7c933",
        "dad2125bba8fc56b",
        "4105090c41ee5ab8"
      ],
      "date": 1665382073868
    },
    {
      "type": "edit",
      "id": "8206b0a4ca872e80",
      "item": {
        "type": "paragraph",
        "id": "8206b0a4ca872e80",
        "text": "About Bootstrapping "
      },
      "date": 1665382084857
    },
    {
      "type": "edit",
      "id": "8206b0a4ca872e80",
      "item": {
        "type": "paragraph",
        "id": "8206b0a4ca872e80",
        "text": "About Bootstrapping. [https://dougengelbart.org/content/view/226/ bootstrapping] "
      },
      "date": 1665382115916
    },
    {
      "type": "add",
      "id": "f73037a1879dbd22",
      "item": {
        "type": "paragraph",
        "id": "f73037a1879dbd22",
        "text": "[[Metronom]]"
      },
      "after": "8206b0a4ca872e80",
      "date": 1665382124365
    },
    {
      "type": "add",
      "id": "b8e423f5b4f342af",
      "item": {
        "type": "paragraph",
        "id": "b8e423f5b4f342af",
        "text": "> […] the expectation that anyone working on an important aspect of boosting Collective IQ will seriously push the envelope through their own experimentatal usage of their work product(s); it's providers using what they provide to become faster, smarter, more effective providers. Thu"
      },
      "after": "8206b0a4ca872e80",
      "date": 1665382709682
    },
    {
      "type": "edit",
      "id": "b8e423f5b4f342af",
      "item": {
        "type": "markdown",
        "id": "b8e423f5b4f342af",
        "text": "> […] the expectation that anyone working on an important aspect of boosting Collective IQ will seriously push the envelope through their own experimentatal usage of their work product(s); it's providers using what they provide to become faster, smarter, more effective providers. Thu"
      },
      "date": 1665382712252
    },
    {
      "type": "edit",
      "id": "b8e423f5b4f342af",
      "item": {
        "type": "markdown",
        "id": "b8e423f5b4f342af",
        "text": "> […] the expectation that anyone working on an important aspect of boosting Collective IQ will seriously push the envelope through their own experimentatal usage of their work product(s); it's providers using what they provide to become faster, smarter, more effective providers. \n"
      },
      "date": 1665382749125
    },
    {
      "type": "add",
      "id": "9deb22f655a0c84e",
      "item": {
        "type": "markdown",
        "id": "9deb22f655a0c84e",
        "text": "How does this \"faster, smarter, more effective\" relate to "
      },
      "after": "b8e423f5b4f342af",
      "date": 1665382769362
    },
    {
      "type": "edit",
      "id": "9deb22f655a0c84e",
      "item": {
        "type": "markdown",
        "id": "9deb22f655a0c84e",
        "text": "How does this \"faster, smarter, more effective\" relate to [[Deep Listening]] (dadirri)?"
      },
      "date": 1665382846896
    },
    {
      "type": "edit",
      "id": "9deb22f655a0c84e",
      "item": {
        "type": "markdown",
        "id": "9deb22f655a0c84e",
        "text": "How does this \"faster, smarter, more effective\" relate to [[Deep Listening]] (dadirri)?\n"
      },
      "date": 1665383089174
    },
    {
      "type": "add",
      "id": "31ae5ada69a9dd9d",
      "item": {
        "type": "markdown",
        "id": "31ae5ada69a9dd9d",
        "text": "Die Paradoxie des Entscheidens"
      },
      "after": "9deb22f655a0c84e",
      "date": 1665383094112
    },
    {
      "type": "edit",
      "id": "9deb22f655a0c84e",
      "item": {
        "type": "markdown",
        "id": "9deb22f655a0c84e",
        "text": "How does this \"faster, smarter, more effective\" relate to [[Deep Listening]] (dadirri)?\n\nI understood Miriam-Rose Ungunmerr-Baumann as saying that dadirri was the greatest gift they could give, asking in return for companionship, so to speak, on their journey to find their own pace."
      },
      "date": 1665383306263
    },
    {
      "type": "edit",
      "id": "9deb22f655a0c84e",
      "item": {
        "type": "markdown",
        "id": "9deb22f655a0c84e",
        "text": "How does this \"faster, smarter, more effective\" relate to [[Deep Listening]] (dadirri)?\n\nRe: Bootstrapping\nHow does this \"faster, smarter, more effective\" relate to Deep Listening (dadirri)?\n"
      },
      "date": 1665383416324
    },
    {
      "type": "add",
      "id": "af698b846da4ec3b",
      "item": {
        "type": "markdown",
        "id": "af698b846da4ec3b",
        "text": "dadiiri reminds me of player 1 – player 2 oscillating as long as she, i.e. the observer, is unable to unfold a paradox.\n"
      },
      "after": "9deb22f655a0c84e",
      "date": 1665383422338
    },
    {
      "type": "add",
      "id": "77782f7282c25438",
      "item": {
        "type": "markdown",
        "id": "77782f7282c25438",
        "text": "I understood Miriam-Rose Ungunmerr-Baumann as saying that dadirri was the greatest gift they could give, asking in return for companionship, so to speak, on their journey to find their own pace.\n"
      },
      "after": "af698b846da4ec3b",
      "date": 1665383423051
    },
    {
      "type": "edit",
      "id": "31ae5ada69a9dd9d",
      "item": {
        "type": "markdown",
        "id": "31ae5ada69a9dd9d",
        "text": "⇒ [[Paradoxieentfaltung]] Die Paradoxie des Entscheidens"
      },
      "date": 1665383466677
    },
    {
      "type": "edit",
      "id": "31ae5ada69a9dd9d",
      "item": {
        "type": "markdown",
        "id": "31ae5ada69a9dd9d",
        "text": "⇒ [[Paradoxieentfaltung]] ⇒ Die Paradoxie des Entscheidens"
      },
      "date": 1665383511220
    },
    {
      "id": "f73037a1879dbd22",
      "type": "move",
      "order": [
        "aa60f16e9595d57c",
        "6dcacda2f1299254",
        "8206b0a4ca872e80",
        "b8e423f5b4f342af",
        "9deb22f655a0c84e",
        "af698b846da4ec3b",
        "77782f7282c25438",
        "f73037a1879dbd22",
        "31ae5ada69a9dd9d",
        "5ebc11a378f52e6e",
        "f6a4513694e44f22",
        "21ce88b1b7f7c933",
        "dad2125bba8fc56b",
        "4105090c41ee5ab8"
      ],
      "date": 1665383534918
    },
    {
      "type": "edit",
      "id": "31ae5ada69a9dd9d",
      "item": {
        "type": "markdown",
        "id": "31ae5ada69a9dd9d",
        "text": "⇒ [[Paradoxieentfaltung]] ⇒ Die Paradoxie des Entscheidens\n"
      },
      "date": 1665383552217
    },
    {
      "type": "add",
      "id": "72e01175ec793650",
      "item": {
        "type": "markdown",
        "id": "72e01175ec793650",
        "text": "\nLUHMANN, Niklas, 2000. Die Paradoxie des Entscheidens. In: LUHMANN, Niklas, Organisation und Entscheidung. Online. Wiesbaden: VS Verlag für Sozialwissenschaften. p. 123–151. [Accessed 23 July 2022]. ISBN 978-3-322-97094-7. \n"
      },
      "after": "31ae5ada69a9dd9d",
      "date": 1665383555804
    },
    {
      "type": "edit",
      "id": "72e01175ec793650",
      "item": {
        "type": "markdown",
        "id": "72e01175ec793650",
        "text": "LUHMANN, Niklas, 2000. Die Paradoxie des Entscheidens. In: LUHMANN, Niklas, Organisation und Entscheidung. Online. Wiesbaden: VS Verlag für Sozialwissenschaften. p. 123–151. [Accessed 23 July 2022]. ISBN 978-3-322-97094-7. \n\n"
      },
      "date": 1665383619271
    },
    {
      "type": "add",
      "id": "ed8de687bcacf5c1",
      "item": {
        "type": "markdown",
        "id": "ed8de687bcacf5c1",
        "text": "> The concept of action is thus associated with reduced modes of attribution, and this leads to the question: who attributes? Or more generally: who observes and describes an action as an action, a decision as a decision?"
      },
      "after": "72e01175ec793650",
      "date": 1665383623795
    },
    {
      "type": "edit",
      "id": "ed8de687bcacf5c1",
      "item": {
        "type": "markdown",
        "id": "ed8de687bcacf5c1",
        "text": "> The concept of [[Action]] is thus associated with reduced modes of attribution, and this leads to the question: who attributes? Or more generally: who observes and describes an action as an action, a decision as a decision?"
      },
      "date": 1665383639505
    },
    {
      "type": "edit",
      "id": "ed8de687bcacf5c1",
      "item": {
        "type": "markdown",
        "id": "ed8de687bcacf5c1",
        "text": "> The concept of [[Action]] is thus associated with reduced modes of attribution, and this leads to the question: who attributes? Or more generally: who observes and describes an action as an action, a [[Decision]] as a decision?"
      },
      "date": 1665383687892
    },
    {
      "type": "edit",
      "id": "ed8de687bcacf5c1",
      "item": {
        "type": "markdown",
        "id": "ed8de687bcacf5c1",
        "text": "> The concept of [[Action]] is thus associated with reduced modes of attribution, and this leads to the question: who attributes? Or more generally: who observes and describes an action as an action, a [[Decision]] as a decision?\n"
      },
      "date": 1665383793381
    },
    {
      "type": "add",
      "id": "4169d217418f80ee",
      "item": {
        "type": "markdown",
        "id": "4169d217418f80ee",
        "text": "⇒ [[Organizations Learn]]"
      },
      "after": "ed8de687bcacf5c1",
      "date": 1665383804643
    },
    {
      "type": "edit",
      "id": "77782f7282c25438",
      "item": {
        "type": "markdown",
        "id": "77782f7282c25438",
        "text": "I understood Miriam-Rose Ungunmerr-Baumann as saying that dadirri was the greatest gift they could give, asking in return for companionship, so to speak, on their journey to find their own pace.\n\n"
      },
      "date": 1665384042148
    },
    {
      "type": "add",
      "id": "6bb5ebbfd28013b1",
      "item": {
        "type": "markdown",
        "id": "6bb5ebbfd28013b1",
        "text": "The challenge would be not to impose a metronome on her/us, but to consider the walking/learning path as an emerging common metronome."
      },
      "after": "77782f7282c25438",
      "date": 1665384045656
    },
    {
      "type": "edit",
      "id": "f73037a1879dbd22",
      "item": {
        "type": "paragraph",
        "id": "f73037a1879dbd22",
        "text": "⇒ [[Metronom]]"
      },
      "date": 1665384061931
    },
    {
      "type": "edit",
      "id": "9deb22f655a0c84e",
      "item": {
        "type": "markdown",
        "id": "9deb22f655a0c84e",
        "text": "How does this \"faster, smarter, more effective\" relate to [[Deep Listening]] (dadirri)?\n\n# Re: Bootstrapping\nHow does this \"faster, smarter, more effective\" relate to Deep Listening (dadirri)?\n"
      },
      "date": 1665384071981
    },
    {
      "type": "edit",
      "id": "9deb22f655a0c84e",
      "item": {
        "type": "markdown",
        "id": "9deb22f655a0c84e",
        "text": "# Re: Bootstrapping\nHow does this \"faster, smarter, more effective\" relate to [[Deep Listening]] (dadirri)?\n"
      },
      "date": 1665384091973
    },
    {
      "type": "edit",
      "id": "4169d217418f80ee",
      "item": {
        "type": "markdown",
        "id": "4169d217418f80ee",
        "text": "⇒ [[Organisation und Entscheidung]] ⇒ [[Organizations Learn]]"
      },
      "date": 1665384189105
    },
    {
      "item": {
        "type": "factory",
        "id": "baab83315a644932"
      },
      "id": "baab83315a644932",
      "type": "add",
      "after": "4105090c41ee5ab8",
      "date": 1665384881462
    },
    {
      "type": "edit",
      "id": "baab83315a644932",
      "item": {
        "type": "reference",
        "id": "baab83315a644932",
        "site": "marc.tries.fed.wiki",
        "slug": "xp-and-normative-good",
        "title": "XP and Normative Good",
        "text": "Extreme Programming (xp) prescribes a dozen practices that reinforce each other so as to allow teams to make software development decisions. We examine the distribution of responsibilities required for, and means to arrive at, good decisions within this framework."
      },
      "date": 1665384940863
    },
    {
      "item": {
        "type": "factory",
        "id": "40dfadfb5fb8ed8a"
      },
      "id": "40dfadfb5fb8ed8a",
      "type": "add",
      "after": "baab83315a644932",
      "date": 1665385851521
    },
    {
      "type": "edit",
      "id": "40dfadfb5fb8ed8a",
      "item": {
        "type": "reference",
        "id": "40dfadfb5fb8ed8a",
        "site": "wiki.ralfbarkow.ch",
        "slug": "process",
        "title": "Process",
        "text": "See [[Process (Prozess)]]."
      },
      "date": 1665385854906
    },
    {
      "item": {
        "type": "factory",
        "id": "fe62f431c620a9f8"
      },
      "id": "fe62f431c620a9f8",
      "type": "add",
      "after": "40dfadfb5fb8ed8a",
      "date": 1665385900277
    },
    {
      "type": "remove",
      "id": "fe62f431c620a9f8",
      "date": 1665385904062
    },
    {
      "item": {
        "type": "factory",
        "id": "ea8675dce1c8e5e4"
      },
      "id": "ea8675dce1c8e5e4",
      "type": "add",
      "after": "40dfadfb5fb8ed8a",
      "date": 1665385918430
    },
    {
      "type": "edit",
      "id": "ea8675dce1c8e5e4",
      "item": {
        "type": "paragraph",
        "id": "ea8675dce1c8e5e4",
        "text": "The Process page is an example of a fork in the path."
      },
      "date": 1665385927076
    },
    {
      "type": "edit",
      "id": "ea8675dce1c8e5e4",
      "item": {
        "type": "paragraph",
        "id": "ea8675dce1c8e5e4",
        "text": "The Process page is an example of a fork in the path (of transformation)."
      },
      "date": 1665385957818
    },
    {
      "type": "edit",
      "id": "ea8675dce1c8e5e4",
      "item": {
        "type": "paragraph",
        "id": "ea8675dce1c8e5e4",
        "text": "The [[Process]] page is an example of a fork in the path (of transformation)."
      },
      "date": 1665385977242
    },
    {
      "item": {
        "type": "factory",
        "id": "ddb855e15c07fc57"
      },
      "id": "ddb855e15c07fc57",
      "type": "add",
      "after": "ea8675dce1c8e5e4",
      "date": 1665386381233
    },
    {
      "type": "edit",
      "id": "ddb855e15c07fc57",
      "item": {
        "type": "paragraph",
        "id": "ddb855e15c07fc57",
        "text": "Monetarisierung führt zu einer selbstzerstörerischen Kundenbindung."
      },
      "date": 1665386385852
    },
    {
      "type": "edit",
      "id": "ddb855e15c07fc57",
      "item": {
        "type": "paragraph",
        "id": "ddb855e15c07fc57",
        "text": "Monetarisierung führt zu einer selbstzerstörerischen Kundenbindung. [https://twitter.com/jonathoda/status/1247249288834539524?s=20&t=CsnmaYR_PxJ3utt4nVVrxA tweet]"
      },
      "date": 1665386403483
    },
    {
      "type": "edit",
      "id": "ddb855e15c07fc57",
      "item": {
        "type": "paragraph",
        "id": "ddb855e15c07fc57",
        "text": "Monetarisierung führt zu einer selbstzerstörerischen Kundenbindung. [https://twitter.com/jonathoda/status/1247249288834539524?s=20&t=CsnmaYR_PxJ3utt4nVVrxA tweet], [https://alarmingdevelopment.org/?p=1632 post]"
      },
      "date": 1665386425840
    },
    {
      "item": {
        "type": "factory",
        "id": "339780fcb8dc36ee"
      },
      "id": "339780fcb8dc36ee",
      "type": "add",
      "after": "ddb855e15c07fc57",
      "date": 1665386761147
    },
    {
      "type": "edit",
      "id": "339780fcb8dc36ee",
      "item": {
        "type": "markdown",
        "id": "339780fcb8dc36ee",
        "text": "* https://github.com/MondoAurora/DustFramework/wiki/What-is-wrong-with-programming"
      },
      "date": 1665386766320
    },
    {
      "item": {
        "type": "factory",
        "id": "d485b80939ca4906"
      },
      "id": "d485b80939ca4906",
      "type": "add",
      "after": "339780fcb8dc36ee",
      "date": 1665394762571
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]]"
      },
      "date": 1665394781838
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]]"
      },
      "date": 1665394810609
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[End]]"
      },
      "date": 1665394826741
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[Ends]]"
      },
      "date": 1665394832783
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[Ends Planning]]"
      },
      "date": 1665394845071
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[Goals]] ⇒ [[Ends Planning]]"
      },
      "date": 1665394864390
    },
    {
      "item": {
        "type": "factory",
        "id": "cd01238fc7b6126d"
      },
      "id": "cd01238fc7b6126d",
      "type": "add",
      "after": "d485b80939ca4906",
      "date": 1665394866097
    },
    {
      "type": "edit",
      "id": "cd01238fc7b6126d",
      "item": {
        "type": "pagefold",
        "id": "cd01238fc7b6126d",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1665394876217
    },
    {
      "type": "remove",
      "id": "cd01238fc7b6126d",
      "date": 1665394880269
    },
    {
      "item": {
        "type": "factory",
        "id": "3a7a1d9680e8ac0c"
      },
      "id": "3a7a1d9680e8ac0c",
      "type": "add",
      "after": "d485b80939ca4906",
      "date": 1665394881466
    },
    {
      "type": "edit",
      "id": "3a7a1d9680e8ac0c",
      "item": {
        "type": "graphviz",
        "id": "3a7a1d9680e8ac0c",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1665394884009
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[Goal Analysis]] ⇒ [[Goals]] ⇒ [[Ends Planning]]"
      },
      "date": 1665395043820
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[Goal Analysis]] ⇒ [[Label Propagation]] ⇒ [[Goals]] ⇒ [[Ends Planning]]"
      },
      "date": 1665395079753
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[Goal Analysis]] ⇒ [[Label Propagation]] ⇒ [[Finding Communities] ⇒ [[Goals]] ⇒ [[Ends Planning]]"
      },
      "date": 1665395106437
    },
    {
      "type": "edit",
      "id": "d485b80939ca4906",
      "item": {
        "type": "paragraph",
        "id": "d485b80939ca4906",
        "text": "⇒ [[Formulare gestalten]] ⇒ [[Goal]] ⇒ [[Goal Analysis]] ⇒ [[Label Propagation]] ⇒ [[Finding Communities]] ⇒ [[Goals]] ⇒ [[Ends Planning]]"
      },
      "date": 1665395112818
    },
    {
      "item": {
        "type": "factory",
        "id": "d68f3b225d8cf690"
      },
      "id": "d68f3b225d8cf690",
      "type": "add",
      "after": "3a7a1d9680e8ac0c",
      "date": 1665397614231
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "* [[Using the Beam Pane]]"
      },
      "date": 1665397620644
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "* [[Using the Injector Pane]]"
      },
      "date": 1665397631711
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "⇒ [[Using the Injector Pane]]\n⇒ [[create]] a [[Topicmap]]"
      },
      "date": 1665397904935
    },
    {
      "item": {
        "type": "factory",
        "id": "d86d53ffcca59195"
      },
      "id": "d86d53ffcca59195",
      "type": "add",
      "after": "d68f3b225d8cf690",
      "date": 1665398007236
    },
    {
      "type": "edit",
      "id": "d86d53ffcca59195",
      "item": {
        "type": "markdown",
        "id": "d86d53ffcca59195",
        "text": "* [[Workspace]]"
      },
      "date": 1665398029505
    },
    {
      "type": "edit",
      "id": "d86d53ffcca59195",
      "item": {
        "type": "markdown",
        "id": "d86d53ffcca59195",
        "text": "* [[Workspace]] ⇒ [[Box]]"
      },
      "date": 1665398041704
    },
    {
      "type": "edit",
      "id": "d86d53ffcca59195",
      "item": {
        "type": "markdown",
        "id": "d86d53ffcca59195",
        "text": "* [[Workspace]] ⇒ [[Box]] ⇒ [[Page]]"
      },
      "date": 1665398141815
    },
    {
      "type": "edit",
      "id": "d86d53ffcca59195",
      "item": {
        "type": "markdown",
        "id": "d86d53ffcca59195",
        "text": "* [[Workspace]] ⇒ [[Box]] ⇒ [[Page]] ⇒ [[Story]]"
      },
      "date": 1665398721739
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "⇒ [[Using the Injector Pane]]\n⇒ [[create]] a [[Topicmap]]\n\nHow to change the order of fields in a form?"
      },
      "date": 1665398789039
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "⇒ [[Using the Injector Pane]]\n⇒ [[create]] a [[Topicmap]]\n\nHow to change the order of fields in a form? [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#how-to-change-the-order-of-fields-in-a-form page]"
      },
      "date": 1665398801411
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "⇒ [[Using the Injector Pane]]\n⇒ [[create]] a [[Topicmap]]\n[[\nHow to change the order of fields in a form? [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#how-to-change-the-order-of-fields-in-a-form page]"
      },
      "date": 1665398870236
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "⇒ [[Using the Injector Pane]]\n⇒ [[create]] a [[Topicmap]]\n⇒ [[Form]]\nHow to change the order of fields in a form? [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#how-to-change-the-order-of-fields-in-a-form page]"
      },
      "date": 1665398882277
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "⇒ [[Using the Injector Pane]]\n⇒ [[create]] a [[Topicmap]]\n⇒ [[Form]]\n* How to change the order of fields in a form? [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#how-to-change-the-order-of-fields-in-a-form page]"
      },
      "date": 1665398887062
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "⇒ [[Using the Injector Pane]]\n⇒ [[create]] a [[Topicmap]]\n"
      },
      "date": 1665398892197
    },
    {
      "type": "add",
      "id": "a020867f3a332a4a",
      "item": {
        "type": "markdown",
        "id": "a020867f3a332a4a",
        "text": "⇒ [[Form]]\n* How to change the order of fields in a form? [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#how-to-change-the-order-of-fields-in-a-form page]"
      },
      "after": "d68f3b225d8cf690",
      "date": 1665398893692
    },
    {
      "type": "edit",
      "id": "d68f3b225d8cf690",
      "item": {
        "type": "markdown",
        "id": "d68f3b225d8cf690",
        "text": "⇒ [[Using the Injector Pane]]\n"
      },
      "date": 1665398895257
    },
    {
      "type": "add",
      "id": "085bbd582e6c93e9",
      "item": {
        "type": "markdown",
        "id": "085bbd582e6c93e9",
        "text": "⇒ [[create]] a [[Topicmap]]\n"
      },
      "after": "d68f3b225d8cf690",
      "date": 1665398895651
    },
    {
      "item": {
        "type": "factory",
        "id": "0351aa576d88556c"
      },
      "id": "0351aa576d88556c",
      "type": "add",
      "after": "a020867f3a332a4a",
      "date": 1665398930355
    },
    {
      "type": "edit",
      "id": "0351aa576d88556c",
      "item": {
        "type": "markdown",
        "id": "0351aa576d88556c",
        "text": "* You can benefit from DMX’s model-driven form generator: When you create instances of the composite you defined, the editing form contains fields for all identity attributes of child instances. You thus get a form with all properties you want to add. The child instances linked to the parent by a Custom Association Type are also part of the form. When you fill in those fields, the semantics of the Custom Association type are carried over to the instance. You do not have to drag associations but they are added for you through the form resp. your data model."
      },
      "date": 1665398935825
    },
    {
      "type": "edit",
      "id": "0351aa576d88556c",
      "item": {
        "type": "markdown",
        "id": "0351aa576d88556c",
        "text": "* You can benefit from DMX’s model-driven form generator: When you create instances of the composite you defined, the editing form contains fields for all identity attributes of child instances. You thus get a form with all properties you want to add. The child instances linked to the parent by a Custom Association Type are also part of the form. When you fill in those fields, the semantics of the Custom Association type are carried over to the instance. You do not have to drag associations but they are added for you through the form resp. your data model. [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#custom-association-types page]"
      },
      "date": 1665398956534
    },
    {
      "type": "edit",
      "id": "0351aa576d88556c",
      "item": {
        "type": "markdown",
        "id": "0351aa576d88556c",
        "text": "* You can benefit from [[DMX]]’s model-driven form generator: When you create instances of the composite you defined, the editing form contains fields for all identity attributes of child instances. You thus get a form with all properties you want to add. The child instances linked to the parent by a Custom Association Type are also part of the form. When you fill in those fields, the semantics of the Custom Association type are carried over to the instance. You do not have to drag associations but they are added for you through the form resp. your data model. [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#custom-association-types page]"
      },
      "date": 1665398996297
    },
    {
      "type": "edit",
      "id": "0351aa576d88556c",
      "item": {
        "type": "markdown",
        "id": "0351aa576d88556c",
        "text": "* You can benefit from [[DMX]]’s [[Model-Driven Form Generator]]: When you create instances of the composite you defined, the editing form contains fields for all identity attributes of child instances. You thus get a form with all properties you want to add. The child instances linked to the parent by a Custom Association Type are also part of the form. When you fill in those fields, the semantics of the Custom Association type are carried over to the instance. You do not have to drag associations but they are added for you through the form resp. your data model. [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#custom-association-types page]"
      },
      "date": 1665399026770
    },
    {
      "id": "0351aa576d88556c",
      "type": "remove",
      "date": 1665399061808
    },
    {
      "id": "d86d53ffcca59195",
      "type": "move",
      "order": [
        "aa60f16e9595d57c",
        "6dcacda2f1299254",
        "8206b0a4ca872e80",
        "b8e423f5b4f342af",
        "9deb22f655a0c84e",
        "af698b846da4ec3b",
        "77782f7282c25438",
        "6bb5ebbfd28013b1",
        "f73037a1879dbd22",
        "31ae5ada69a9dd9d",
        "72e01175ec793650",
        "ed8de687bcacf5c1",
        "4169d217418f80ee",
        "5ebc11a378f52e6e",
        "f6a4513694e44f22",
        "21ce88b1b7f7c933",
        "dad2125bba8fc56b",
        "4105090c41ee5ab8",
        "baab83315a644932",
        "40dfadfb5fb8ed8a",
        "ea8675dce1c8e5e4",
        "ddb855e15c07fc57",
        "339780fcb8dc36ee",
        "d485b80939ca4906",
        "3a7a1d9680e8ac0c",
        "d68f3b225d8cf690",
        "085bbd582e6c93e9",
        "d86d53ffcca59195",
        "a020867f3a332a4a"
      ],
      "date": 1665399092215
    },
    {
      "id": "0351aa576d88556c",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "0351aa576d88556c",
        "text": "* You can benefit from [[DMX]]’s [[Model-Driven Form Generator]]: When you create instances of the composite you defined, the editing form contains fields for all identity attributes of child instances. You thus get a form with all properties you want to add. The child instances linked to the parent by a Custom Association Type are also part of the form. When you fill in those fields, the semantics of the Custom Association type are carried over to the instance. You do not have to drag associations but they are added for you through the form resp. your data model. [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#custom-association-types page]"
      },
      "after": "a020867f3a332a4a",
      "date": 1665399109536
    },
    {
      "id": "11f45399a97dbd3c",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms."
      },
      "after": "0351aa576d88556c",
      "date": 1665399956359
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Greenlight]]"
      },
      "date": 1665399982353
    },
    {
      "id": "7c4048b0312272ad",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "7c4048b0312272ad",
        "text": "Its network layer is powered by [https://croquet.io Croquet]. Croquet's unique technology ensures bit-identical computation in each participants' local browser, reducing network traffic and latency.\n\n"
      },
      "after": "11f45399a97dbd3c",
      "date": 1665400041085
    },
    {
      "type": "edit",
      "id": "7c4048b0312272ad",
      "item": {
        "type": "markdown",
        "id": "7c4048b0312272ad",
        "text": "> Its network layer is powered by [https://croquet.io Croquet]. Croquet's unique technology ensures bit-identical computation in each participants' local browser, reducing network traffic and latency.\n\n"
      },
      "date": 1665400046203
    },
    {
      "type": "edit",
      "id": "7c4048b0312272ad",
      "item": {
        "type": "markdown",
        "id": "7c4048b0312272ad",
        "text": "> Its network layer is powered by [https://croquet.io Croquet]. Croquet's unique technology ensures bit-identical [[Computation]] in each participants' local browser, reducing network traffic and latency.\n\n"
      },
      "date": 1665400065094
    },
    {
      "id": "7c4048b0312272ad",
      "type": "remove",
      "date": 1665400096606
    },
    {
      "id": "7c4048b0312272ad",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "7c4048b0312272ad",
        "text": "> Its network layer is powered by [https://croquet.io Croquet]. Croquet's unique technology ensures bit-identical [[Computation]] in each participants' local browser, reducing network traffic and latency.\n\n"
      },
      "after": "11f45399a97dbd3c",
      "date": 1665400130434
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Greenlight]]  [[Computation]]"
      },
      "date": 1665400203590
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665400212327
    },
    {
      "id": "d485b80939ca4906",
      "type": "move",
      "order": [
        "aa60f16e9595d57c",
        "6dcacda2f1299254",
        "8206b0a4ca872e80",
        "b8e423f5b4f342af",
        "9deb22f655a0c84e",
        "af698b846da4ec3b",
        "77782f7282c25438",
        "6bb5ebbfd28013b1",
        "f73037a1879dbd22",
        "31ae5ada69a9dd9d",
        "72e01175ec793650",
        "ed8de687bcacf5c1",
        "4169d217418f80ee",
        "5ebc11a378f52e6e",
        "f6a4513694e44f22",
        "21ce88b1b7f7c933",
        "dad2125bba8fc56b",
        "4105090c41ee5ab8",
        "baab83315a644932",
        "40dfadfb5fb8ed8a",
        "ea8675dce1c8e5e4",
        "ddb855e15c07fc57",
        "339780fcb8dc36ee",
        "3a7a1d9680e8ac0c",
        "d485b80939ca4906",
        "d68f3b225d8cf690",
        "085bbd582e6c93e9",
        "d86d53ffcca59195",
        "a020867f3a332a4a",
        "0351aa576d88556c",
        "11f45399a97dbd3c",
        "7c4048b0312272ad"
      ],
      "date": 1665400505246
    },
    {
      "type": "edit",
      "id": "339780fcb8dc36ee",
      "item": {
        "type": "markdown",
        "id": "339780fcb8dc36ee",
        "text": "* What is wrong with programming [https://github.com/MondoAurora/DustFramework/wiki/What-is-wrong-with-programming page]"
      },
      "date": 1665400532803
    },
    {
      "type": "edit",
      "id": "339780fcb8dc36ee",
      "item": {
        "type": "markdown",
        "id": "339780fcb8dc36ee",
        "text": "* What is wrong with programming? [https://github.com/MondoAurora/DustFramework/wiki/What-is-wrong-with-programming page]"
      },
      "date": 1665400540825
    },
    {
      "item": {
        "type": "factory",
        "id": "f67d5b2ac4f684a6"
      },
      "id": "f67d5b2ac4f684a6",
      "type": "add",
      "after": "7c4048b0312272ad",
      "date": 1665401078366
    },
    {
      "type": "edit",
      "id": "f67d5b2ac4f684a6",
      "item": {
        "type": "paragraph",
        "id": "f67d5b2ac4f684a6",
        "text": "– [[find]]"
      },
      "date": 1665401088578
    },
    {
      "type": "edit",
      "id": "f67d5b2ac4f684a6",
      "item": {
        "type": "paragraph",
        "id": "f67d5b2ac4f684a6",
        "text": "⇒ [[find]]"
      },
      "date": 1665401094147
    },
    {
      "id": "f67d5b2ac4f684a6",
      "type": "move",
      "order": [
        "aa60f16e9595d57c",
        "6dcacda2f1299254",
        "8206b0a4ca872e80",
        "b8e423f5b4f342af",
        "9deb22f655a0c84e",
        "af698b846da4ec3b",
        "77782f7282c25438",
        "6bb5ebbfd28013b1",
        "f73037a1879dbd22",
        "31ae5ada69a9dd9d",
        "72e01175ec793650",
        "ed8de687bcacf5c1",
        "4169d217418f80ee",
        "5ebc11a378f52e6e",
        "f6a4513694e44f22",
        "21ce88b1b7f7c933",
        "dad2125bba8fc56b",
        "4105090c41ee5ab8",
        "baab83315a644932",
        "40dfadfb5fb8ed8a",
        "ea8675dce1c8e5e4",
        "ddb855e15c07fc57",
        "339780fcb8dc36ee",
        "3a7a1d9680e8ac0c",
        "d485b80939ca4906",
        "d68f3b225d8cf690",
        "085bbd582e6c93e9",
        "d86d53ffcca59195",
        "a020867f3a332a4a",
        "0351aa576d88556c",
        "f67d5b2ac4f684a6",
        "11f45399a97dbd3c",
        "7c4048b0312272ad"
      ],
      "date": 1665401268711
    },
    {
      "type": "edit",
      "id": "f67d5b2ac4f684a6",
      "item": {
        "type": "paragraph",
        "id": "f67d5b2ac4f684a6",
        "text": "⇒ [[find]] ⇒ [[Finding Communities]]"
      },
      "date": 1665401284364
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[ Micropayment]]\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665401315383
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Micropayment]]\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665401322716
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Micropayment]] ⇒\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665401392489
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Micropayment]] ⇒ Web Monetization API\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665401398346
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Micropayment]] ⇒ [[Web Monetization API]]\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665401406554
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Micropayment]] ⇒ [[History of micropayments]] ⇒ [[Web Monetization API]]\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665401448477
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Micropayment]] ⇒ [[History of micropayments]] ⇒ [[[[Ted Nelson]]]] ⇒ [[Web Monetization API]]\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665401465175
    },
    {
      "type": "edit",
      "id": "11f45399a97dbd3c",
      "item": {
        "type": "markdown",
        "id": "11f45399a97dbd3c",
        "text": "* [[Assistance]] in filling out forms.\n* [[Micropayment]] ⇒ [[History of micropayments]] ⇒ [[Ted Nelson]] ⇒ [[Web Monetization API]]\n* [[Greenlight]] ⇒ [[Computation]]"
      },
      "date": 1665401473842
    },
    {
      "type": "edit",
      "id": "d86d53ffcca59195",
      "item": {
        "type": "markdown",
        "id": "d86d53ffcca59195",
        "text": "* [[Workspace]] ⇒ [[Box]] – [[Fence after Fence]] – ⇒ [[Page]] ⇒ [[Story]]"
      },
      "date": 1665401539552
    },
    {
      "item": {
        "type": "factory",
        "id": "7444c201c7920818"
      },
      "id": "7444c201c7920818",
      "type": "add",
      "after": "7c4048b0312272ad",
      "date": 1665401677869
    },
    {
      "type": "edit",
      "id": "7444c201c7920818",
      "item": {
        "type": "paragraph",
        "id": "7444c201c7920818",
        "text": "OHSHIMA, Yoshiki, FREUDENBERG, Bert, KAEHLER, Ted and LUNZER, Aran, 2012. A report on KScript and KSWorld. . 2012. \n"
      },
      "date": 1665401700605
    },
    {
      "type": "edit",
      "id": "7444c201c7920818",
      "item": {
        "type": "paragraph",
        "id": "7444c201c7920818",
        "text": "[[Boxes]] OHSHIMA, Yoshiki, FREUDENBERG, Bert, KAEHLER, Ted and LUNZER, Aran, 2012. A report on KScript and KSWorld. . 2012. \n"
      },
      "date": 1665401756245
    },
    {
      "type": "edit",
      "id": "d86d53ffcca59195",
      "item": {
        "type": "markdown",
        "id": "d86d53ffcca59195",
        "text": "* [[Workspace]] ⇒ [[Box]] ⇒ [[Boxes]]– [[Fence after Fence]] – ⇒ [[Page]] ⇒ [[Story]]"
      },
      "date": 1665401778607
    },
    {
      "type": "edit",
      "id": "7444c201c7920818",
      "item": {
        "type": "paragraph",
        "id": "7444c201c7920818",
        "text": "⇒ [[Boxes]]– [[Fence after Fence]] –"
      },
      "date": 1665401789305
    },
    {
      "type": "add",
      "id": "045f8361beafa92c",
      "item": {
        "type": "paragraph",
        "id": "045f8361beafa92c",
        "text": " OHSHIMA, Yoshiki, FREUDENBERG, Bert, KAEHLER, Ted and LUNZER, Aran, 2012. A report on KScript and KSWorld. . 2012. \n"
      },
      "after": "7444c201c7920818",
      "date": 1665401791415
    },
    {
      "type": "edit",
      "id": "7444c201c7920818",
      "item": {
        "type": "paragraph",
        "id": "7444c201c7920818",
        "text": "⇒ [[Box]]– [[Fence after Fence]]"
      },
      "date": 1665401810889
    },
    {
      "type": "edit",
      "id": "d86d53ffcca59195",
      "item": {
        "type": "markdown",
        "id": "d86d53ffcca59195",
        "text": "* [[Workspace]] ⇒ [[Box]] ⇒ [[Page]] ⇒ [[Story]]"
      },
      "date": 1665401821820
    },
    {
      "type": "edit",
      "id": "045f8361beafa92c",
      "item": {
        "type": "paragraph",
        "id": "045f8361beafa92c",
        "text": " OHSHIMA, Yoshiki, FREUDENBERG, Bert, KAEHLER, Ted and LUNZER, Aran, 2012. A report on KScript and KSWorld.\n"
      },
      "date": 1665401867703
    },
    {
      "item": {
        "type": "factory",
        "id": "1d89f5a50fef5dc9"
      },
      "id": "1d89f5a50fef5dc9",
      "type": "add",
      "after": "045f8361beafa92c",
      "date": 1665401970433
    },
    {
      "type": "edit",
      "id": "1d89f5a50fef5dc9",
      "item": {
        "type": "markdown",
        "id": "1d89f5a50fef5dc9",
        "text": "* [[Behaviors and Events]]"
      },
      "date": 1665401978995
    },
    {
      "type": "edit",
      "id": "1d89f5a50fef5dc9",
      "item": {
        "type": "markdown",
        "id": "1d89f5a50fef5dc9",
        "text": "* [[Behaviors and Events]]\n* [[Setting Values into Streams]]"
      },
      "date": 1665402240054
    },
    {
      "type": "edit",
      "id": "7444c201c7920818",
      "item": {
        "type": "paragraph",
        "id": "7444c201c7920818",
        "text": "⇒ [[Box]] ⇒ [[Fence after Fence]] ⇒ [[Display-Scene Tree]]"
      },
      "date": 1665402525436
    },
    {
      "type": "edit",
      "id": "0351aa576d88556c",
      "item": {
        "type": "markdown",
        "id": "0351aa576d88556c",
        "text": "* You can benefit from [[DMX]]’s [[Model-Driven Form Generator]]: When you create instances of the composite you defined, the editing form contains fields for all identity attributes of child instances. You thus get a [[Form]] with all properties you want to add. The child instances linked to the parent by a Custom Association Type are also part of the form. When you fill in those fields, the semantics of the Custom Association type are carried over to the instance. You do not have to drag associations but they are added for you through the form resp. your data model. [https://dmx.readthedocs.io/en/latest/user.html?highlight=form#custom-association-types page]"
      },
      "date": 1665403187574
    },
    {
      "item": {
        "type": "factory",
        "id": "7ce82d564c1a5d1b"
      },
      "id": "7ce82d564c1a5d1b",
      "type": "add",
      "after": "1d89f5a50fef5dc9",
      "date": 1665411085880
    },
    {
      "type": "edit",
      "id": "7ce82d564c1a5d1b",
      "item": {
        "type": "paragraph",
        "id": "7ce82d564c1a5d1b",
        "text": "[[Business Model]]"
      },
      "date": 1665411093648
    },
    {
      "type": "edit",
      "id": "7ce82d564c1a5d1b",
      "item": {
        "type": "paragraph",
        "id": "7ce82d564c1a5d1b",
        "text": "⇒ [[Business Model]]"
      },
      "date": 1665411100328
    },
    {
      "item": {
        "type": "factory",
        "id": "15ab5b742b0c443a"
      },
      "id": "15ab5b742b0c443a",
      "type": "add",
      "after": "7ce82d564c1a5d1b",
      "date": 1665411871504
    },
    {
      "type": "edit",
      "id": "15ab5b742b0c443a",
      "item": {
        "type": "markdown",
        "id": "15ab5b742b0c443a",
        "text": "* Dynamic form rendering and filling the form from a JSON object?"
      },
      "date": 1665411875648
    },
    {
      "type": "edit",
      "id": "15ab5b742b0c443a",
      "item": {
        "type": "markdown",
        "id": "15ab5b742b0c443a",
        "text": "* Dynamic form rendering and filling the form from a JSON object?\n* Json-GUI—A module for the dynamic generation of form-based web interfaces."
      },
      "date": 1665411897018
    },
    {
      "type": "edit",
      "id": "15ab5b742b0c443a",
      "item": {
        "type": "markdown",
        "id": "15ab5b742b0c443a",
        "text": "* Dynamic form rendering and filling the form from a JSON object?\n* Json-GUI—A module for the dynamic generation of form-based web interfaces. [https://www.sciencedirect.com/science/article/pii/S2352711018300505 sciencedirect]"
      },
      "date": 1665411909486
    },
    {
      "type": "edit",
      "id": "15ab5b742b0c443a",
      "item": {
        "type": "markdown",
        "id": "15ab5b742b0c443a",
        "text": "* Dynamic form rendering and filling the form from a JSON object?\n* Json-GUI—A module for the dynamic generation of form-based web interfaces. [https://www.sciencedirect.com/science/article/pii/S2352711018300505 sciencedirect], [https://doi.org/10.1016/j.softx.2018.11.007 doi]"
      },
      "date": 1665412025199
    },
    {
      "type": "edit",
      "id": "15ab5b742b0c443a",
      "item": {
        "type": "markdown",
        "id": "15ab5b742b0c443a",
        "text": "* Dynamic form rendering and filling the form from a JSON object?\n* Json-GUI—A module for the dynamic generation of form-based web interfaces. [https://www.sciencedirect.com/science/article/pii/S2352711018300505 sciencedirect], [https://doi.org/10.1016/j.softx.2018.11.007 doi], [https://github.com/ElsevierSoftwareX/SOFTX_2018_32 github]"
      },
      "date": 1665412045345
    },
    {
      "type": "edit",
      "id": "15ab5b742b0c443a",
      "item": {
        "type": "markdown",
        "id": "15ab5b742b0c443a",
        "text": "* Dynamic form rendering and filling the form from a JSON object?\n* Json-GUI—A module for the dynamic generation of form-based web interfaces. [https://www.sciencedirect.com/science/article/pii/S2352711018300505 sciencedirect], [https://doi.org/10.1016/j.softx.2018.11.007 doi], [https://github.com/ElsevierSoftwareX/SOFTX_2018_32 github] depends on Google Maps JavaScript API [https://developers.google.com/maps/documentation/javascript/error-messages#invalid-key page]"
      },
      "date": 1665412347693
    },
    {
      "item": {
        "type": "factory",
        "id": "984a2ef03b438561"
      },
      "id": "984a2ef03b438561",
      "type": "add",
      "after": "15ab5b742b0c443a",
      "date": 1665412637425
    },
    {
      "type": "edit",
      "id": "984a2ef03b438561",
      "item": {
        "type": "markdown",
        "id": "984a2ef03b438561",
        "text": "* "
      },
      "date": 1665412645660
    },
    {
      "type": "edit",
      "id": "984a2ef03b438561",
      "item": {
        "type": "markdown",
        "id": "984a2ef03b438561",
        "text": "* Mapbox GL JS "
      },
      "date": 1665412662408
    },
    {
      "type": "edit",
      "id": "984a2ef03b438561",
      "item": {
        "type": "markdown",
        "id": "984a2ef03b438561",
        "text": "* Mapbox GL JS. [site], [https://www.diva-portal.org/smash/get/diva2:851452/FULLTEXT02 pdf] "
      },
      "date": 1665412684894
    },
    {
      "type": "edit",
      "id": "984a2ef03b438561",
      "item": {
        "type": "markdown",
        "id": "984a2ef03b438561",
        "text": "* Mapbox GL JS. [https://www.mapbox.com/mapbox-gljs site], [https://www.diva-portal.org/smash/get/diva2:851452/FULLTEXT02 pdf] "
      },
      "date": 1665412724055
    },
    {
      "type": "edit",
      "id": "984a2ef03b438561",
      "item": {
        "type": "markdown",
        "id": "984a2ef03b438561",
        "text": "* Mapbox GL JS. [https://www.mapbox.com/mapbox-gljs site], [https://www.diva-portal.org/smash/get/diva2:851452/FULLTEXT02 pdf], [https://github.com/mapbox/mapbox-gl-js github]"
      },
      "date": 1665412796974
    },
    {
      "type": "edit",
      "id": "984a2ef03b438561",
      "item": {
        "type": "markdown",
        "id": "984a2ef03b438561",
        "text": "* Mapbox GL JS. [https://www.mapbox.com/mapbox-gljs site], [https://www.diva-portal.org/smash/get/diva2:851452/FULLTEXT02 pdf], [https://github.com/mapbox/mapbox-gl-js github]\n"
      },
      "date": 1665412903386
    },
    {
      "type": "add",
      "id": "3e53caea68900e6a",
      "item": {
        "type": "markdown",
        "id": "3e53caea68900e6a",
        "text": "* \nLeveraging Linked Data to Build Hypermedia-Driven Web APIs"
      },
      "after": "984a2ef03b438561",
      "date": 1665412905351
    },
    {
      "type": "edit",
      "id": "3e53caea68900e6a",
      "item": {
        "type": "markdown",
        "id": "3e53caea68900e6a",
        "text": "* \nLeveraging Linked Data to Build Hypermedia-Driven Web APIs by [[Markus Lanthaler]]"
      },
      "date": 1665413343492
    },
    {
      "item": {
        "type": "factory",
        "id": "d8798cd6f698d0d2"
      },
      "id": "d8798cd6f698d0d2",
      "type": "add",
      "after": "3e53caea68900e6a",
      "date": 1665413387296
    },
    {
      "type": "edit",
      "id": "d8798cd6f698d0d2",
      "item": {
        "type": "paragraph",
        "id": "d8798cd6f698d0d2",
        "text": "\nLANTHALER, Markus, 2014. Leveraging Linked Data to Build Hypermedia-Driven Web APIs. In: PAUTASSO, Cesare, WILDE, Erik and ALARCON, Rosa (eds.), REST: Advanced Research Topics and Practical Applications. Online. New York, NY: Springer. p. 107–123. [Accessed 10 October 2022]. ISBN 978-1-4614-9299-3. "
      },
      "date": 1665413396216
    },
    {
      "type": "add",
      "id": "8f6679d1c9133e3d",
      "item": {
        "type": "paragraph",
        "id": "8f6679d1c9133e3d",
        "text": "> In this chapter we will illustrate how Linked Data can be used to create loosely coupled, hypermedia-driven Web APIs. Apart from introducing JSON-LD and showing how it can be used as a generic data format for Web APIs, we will demonstrate how a short list of concrete design guidelines and a small vocabulary can be used to create APIs that expose enough information to be usable by a completely generic API browser. Based on a simple prototype, we will show how easily such a, at first sight, disruptive approach can be integrated in current Web frameworks and how it can be used to build interoperable and evolvable APIs in considerably less time. Last but not least, we will give an outlook of how such an approach opens the door to other Semantic Web technologies.\n"
      },
      "after": "d8798cd6f698d0d2",
      "date": 1665413398142
    },
    {
      "type": "edit",
      "id": "8f6679d1c9133e3d",
      "item": {
        "type": "markdown",
        "id": "8f6679d1c9133e3d",
        "text": "> In this chapter we will illustrate how Linked Data can be used to create loosely coupled, hypermedia-driven Web APIs. Apart from introducing JSON-LD and showing how it can be used as a generic data format for Web APIs, we will demonstrate how a short list of concrete design guidelines and a small vocabulary can be used to create APIs that expose enough information to be usable by a completely generic API browser. Based on a simple prototype, we will show how easily such a, at first sight, disruptive approach can be integrated in current Web frameworks and how it can be used to build interoperable and evolvable APIs in considerably less time. Last but not least, we will give an outlook of how such an approach opens the door to other Semantic Web technologies.\n"
      },
      "date": 1665413399658
    },
    {
      "type": "edit",
      "id": "8f6679d1c9133e3d",
      "item": {
        "type": "markdown",
        "id": "8f6679d1c9133e3d",
        "text": "> In this chapter we will illustrate how [[Linked Data]]] can be used to create loosely coupled, hypermedia-driven Web APIs. Apart from introducing JSON-LD and showing how it can be used as a generic data format for Web APIs, we will demonstrate how a short list of concrete design guidelines and a small vocabulary can be used to create APIs that expose enough information to be usable by a completely generic API browser. Based on a simple prototype, we will show how easily such a, at first sight, disruptive approach can be integrated in current Web frameworks and how it can be used to build interoperable and evolvable APIs in considerably less time. Last but not least, we will give an outlook of how such an approach opens the door to other Semantic Web technologies.\n"
      },
      "date": 1665413416904
    },
    {
      "type": "edit",
      "id": "8f6679d1c9133e3d",
      "item": {
        "type": "markdown",
        "id": "8f6679d1c9133e3d",
        "text": "> In this chapter we will illustrate how [[Linked Data]] can be used to create loosely coupled, hypermedia-driven Web APIs. Apart from introducing JSON-LD and showing how it can be used as a generic data format for Web APIs, we will demonstrate how a short list of concrete design guidelines and a small vocabulary can be used to create APIs that expose enough information to be usable by a completely generic API browser. Based on a simple prototype, we will show how easily such a, at first sight, disruptive approach can be integrated in current Web frameworks and how it can be used to build interoperable and evolvable APIs in considerably less time. Last but not least, we will give an outlook of how such an approach opens the door to other Semantic Web technologies.\n"
      },
      "date": 1665413422652
    },
    {
      "type": "edit",
      "id": "8f6679d1c9133e3d",
      "item": {
        "type": "markdown",
        "id": "8f6679d1c9133e3d",
        "text": "> In this chapter we will illustrate how [[Linked Data]] can be used to create loosely coupled, hypermedia-driven Web APIs. Apart from introducing [[JSON-LD]] and showing how it can be used as a generic data format for Web APIs, we will demonstrate how a short list of concrete design guidelines and a small vocabulary can be used to create APIs that expose enough information to be usable by a completely generic API browser. Based on a simple prototype, we will show how easily such a, at first sight, disruptive approach can be integrated in current Web frameworks and how it can be used to build interoperable and evolvable APIs in considerably less time. Last but not least, we will give an outlook of how such an approach opens the door to other Semantic Web technologies.\n"
      },
      "date": 1665413550397
    },
    {
      "item": {
        "type": "factory",
        "id": "8410e68ceea5c8cd"
      },
      "id": "8410e68ceea5c8cd",
      "type": "add",
      "after": "8f6679d1c9133e3d",
      "date": 1665413569664
    },
    {
      "type": "edit",
      "id": "8410e68ceea5c8cd",
      "item": {
        "type": "paragraph",
        "id": "8410e68ceea5c8cd",
        "text": "\nPAUTASSO, Cesare, WILDE, Erik and ALARCÓN, Rosa (eds.), 2014. REST: advanced research topics and practical applications. . New York: Springer. ISBN 978-1-4614-9298-6. QA155 .R378 2014\n"
      },
      "date": 1665413572563
    },
    {
      "type": "edit",
      "id": "8410e68ceea5c8cd",
      "item": {
        "type": "paragraph",
        "id": "8410e68ceea5c8cd",
        "text": "PAUTASSO, Cesare, WILDE, Erik and ALARCÓN, Rosa (eds.), 2014. REST: advanced research topics and practical applications. New York: Springer. ISBN 978-1-4614-9298-6. \n"
      },
      "date": 1665413586345
    },
    {
      "item": {
        "type": "factory",
        "id": "74fd08e5a0e39178"
      },
      "id": "74fd08e5a0e39178",
      "type": "add",
      "after": "8410e68ceea5c8cd",
      "date": 1665413772425
    },
    {
      "type": "edit",
      "id": "74fd08e5a0e39178",
      "item": {
        "type": "paragraph",
        "id": "74fd08e5a0e39178",
        "text": "The current best practice for developing truly RESTful JSON-based Web APIs is to define a custom media type which extends JSON to support labeled hyperlinks."
      },
      "date": 1665413774362
    },
    {
      "item": {
        "type": "factory",
        "id": "b45df7138bdb9d94"
      },
      "id": "b45df7138bdb9d94",
      "type": "add",
      "after": "74fd08e5a0e39178",
      "date": 1665413811251
    },
    {
      "type": "edit",
      "id": "b45df7138bdb9d94",
      "item": {
        "type": "markdown",
        "id": "b45df7138bdb9d94",
        "text": "* Collection+JSON [13]"
      },
      "date": 1665413814637
    },
    {
      "type": "edit",
      "id": "74fd08e5a0e39178",
      "item": {
        "type": "paragraph",
        "id": "74fd08e5a0e39178",
        "text": "The current best practice for developing truly [[RESTful]] [[JSON]]-based Web APIs is to define a custom media type which extends JSON to support labeled hyperlinks."
      },
      "date": 1665413866732
    },
    {
      "item": {
        "type": "factory",
        "id": "eac6db90a7c709cc"
      },
      "id": "eac6db90a7c709cc",
      "type": "add",
      "after": "b45df7138bdb9d94",
      "date": 1665413918393
    },
    {
      "type": "edit",
      "id": "eac6db90a7c709cc",
      "item": {
        "type": "paragraph",
        "id": "eac6db90a7c709cc",
        "text": "\nThe RESTfulness of Speech Acts | Manageability, 2017. Online. [Accessed 27 May 2021]. Available from: https://web.archive.org/web/20170424134126/https://www.manageability.org/blog/stuff/the-restfulness-of-speech-acts/view\n"
      },
      "date": 1665413920104
    },
    {
      "type": "edit",
      "id": "eac6db90a7c709cc",
      "item": {
        "type": "paragraph",
        "id": "eac6db90a7c709cc",
        "text": "The RESTfulness of [[Speech Acts]] | Manageability, 2017. Online. [Accessed 27 May 2021]. Available from: https://web.archive.org/web/20170424134126/https://www.manageability.org/blog/stuff/the-restfulness-of-speech-acts/view\n"
      },
      "date": 1665413935750
    },
    {
      "item": {
        "type": "factory",
        "id": "88c17ac638ac030c"
      },
      "id": "88c17ac638ac030c",
      "type": "add",
      "after": "eac6db90a7c709cc",
      "date": 1665414328534
    },
    {
      "type": "edit",
      "id": "88c17ac638ac030c",
      "item": {
        "type": "paragraph",
        "id": "88c17ac638ac030c",
        "text": "[[Stefan Marr]]"
      },
      "date": 1665414333087
    },
    {
      "type": "edit",
      "id": "88c17ac638ac030c",
      "item": {
        "type": "paragraph",
        "id": "88c17ac638ac030c",
        "text": "⇒ [[Stefan Marr]]"
      },
      "date": 1665414345955
    },
    {
      "type": "edit",
      "id": "88c17ac638ac030c",
      "item": {
        "type": "paragraph",
        "id": "88c17ac638ac030c",
        "text": "⇒ [[Stefan Marr]] ⇒ [[RESTful Web Services]]"
      },
      "date": 1665414378536
    },
    {
      "item": {
        "type": "factory",
        "id": "e29d06095fffb348"
      },
      "id": "e29d06095fffb348",
      "type": "add",
      "after": "88c17ac638ac030c",
      "date": 1665414458301
    },
    {
      "type": "edit",
      "id": "e29d06095fffb348",
      "item": {
        "type": "paragraph",
        "id": "e29d06095fffb348",
        "text": "\nMARR, Stefan, [no date]. RESTful Web Services. Online. [Accessed 27 May 2021]. Available from: https://stefan-marr.de/pages/restful-web-services/Der REST-Architekturstil und der Representational State Transfer als Basis für das Design von Web Services werden vorgestellt. Als Heranführung werden die Grundlagen für interoperable Schnittstellen behandelt, welche an HTTP als eine Implementierung konkretisiert werden, um darauf aufbauend die vier wesentlichen Fragen und acht notwendigen Prinzipien zur konkreten Erstellung eines RESTful Web Services an einem Beispiel zu verdeutlichen. Darüber hinaus werden kurz Ansätze zur Lösung gängiger Probleme angerissen, um anschließend auf Vorteil des REST-Architekturstils insgesamt einzugehen und damit ein Fazit zu ziehen.\n\nKeywords: Interoperabilität, REST, Systemarchitektur, Web Services\n"
      },
      "date": 1665414461660
    },
    {
      "type": "edit",
      "id": "e29d06095fffb348",
      "item": {
        "type": "paragraph",
        "id": "e29d06095fffb348",
        "text": "MARR, Stefan, [no date]. RESTful Web Services. Online. [Accessed 27 May 2021]. Available from: https://stefan-marr.de/pages/restful-web-services/"
      },
      "date": 1665414475547
    },
    {
      "type": "add",
      "id": "5a6094f2ac5d8425",
      "item": {
        "type": "paragraph",
        "id": "5a6094f2ac5d8425",
        "text": "> Der REST-Architekturstil und der Representational State Transfer als Basis für das Design von Web Services werden vorgestellt. Als Heranführung werden die Grundlagen für interoperable Schnittstellen behandelt, welche an HTTP als eine Implementierung konkretisiert werden, um darauf aufbauend die vier wesentlichen Fragen und acht notwendigen Prinzipien zur konkreten Erstellung eines RESTful Web Services an einem Beispiel zu verdeutlichen. Darüber hinaus werden kurz Ansätze zur Lösung gängiger Probleme angerissen, um anschließend auf Vorteil des REST-Architekturstils insgesamt einzugehen und damit ein Fazit zu ziehen.\n\nKeywords: Interoperabilität, REST, Systemarchitektur, Web Services\n"
      },
      "after": "e29d06095fffb348",
      "date": 1665414476493
    },
    {
      "type": "edit",
      "id": "5a6094f2ac5d8425",
      "item": {
        "type": "markdown",
        "id": "5a6094f2ac5d8425",
        "text": "> Der REST-Architekturstil und der Representational State Transfer als Basis für das Design von Web Services werden vorgestellt. Als Heranführung werden die Grundlagen für interoperable Schnittstellen behandelt, welche an HTTP als eine Implementierung konkretisiert werden, um darauf aufbauend die vier wesentlichen Fragen und acht notwendigen Prinzipien zur konkreten Erstellung eines RESTful Web Services an einem Beispiel zu verdeutlichen. Darüber hinaus werden kurz Ansätze zur Lösung gängiger Probleme angerissen, um anschließend auf Vorteil des REST-Architekturstils insgesamt einzugehen und damit ein Fazit zu ziehen.\n\nKeywords: Interoperabilität, REST, Systemarchitektur, Web Services\n"
      },
      "date": 1665414478222
    },
    {
      "type": "edit",
      "id": "e29d06095fffb348",
      "item": {
        "type": "markdown",
        "id": "e29d06095fffb348",
        "text": "MARR, Stefan, [no date]. RESTful Web Services. Online. [Accessed 27 May 2021]. Available from: https://stefan-marr.de/pages/restful-web-services/"
      },
      "date": 1665414503466
    },
    {
      "item": {
        "type": "factory",
        "id": "a0fdc25e742772cd"
      },
      "id": "a0fdc25e742772cd",
      "type": "add",
      "after": "5a6094f2ac5d8425",
      "date": 1665414567844
    },
    {
      "type": "edit",
      "id": "a0fdc25e742772cd",
      "item": {
        "type": "markdown",
        "id": "a0fdc25e742772cd",
        "text": "* [[URIs]]"
      },
      "date": 1665414574054
    },
    {
      "type": "edit",
      "id": "a0fdc25e742772cd",
      "item": {
        "type": "markdown",
        "id": "a0fdc25e742772cd",
        "text": "* [[URI]]s"
      },
      "date": 1665414581519
    },
    {
      "type": "edit",
      "id": "a0fdc25e742772cd",
      "item": {
        "type": "markdown",
        "id": "a0fdc25e742772cd",
        "text": "* [[URI]]s [[Linked Data]] "
      },
      "date": 1665414609521
    },
    {
      "type": "edit",
      "id": "a0fdc25e742772cd",
      "item": {
        "type": "markdown",
        "id": "a0fdc25e742772cd",
        "text": "* [[URI]]s ⇒ [[Linked Data]] "
      },
      "date": 1665414619532
    },
    {
      "type": "edit",
      "id": "a0fdc25e742772cd",
      "item": {
        "type": "markdown",
        "id": "a0fdc25e742772cd",
        "text": "* [[URI]]s ⇒ [[Linked Data]] \n* [[DMXObject]]"
      },
      "date": 1665414644938
    },
    {
      "type": "edit",
      "id": "a0fdc25e742772cd",
      "item": {
        "type": "markdown",
        "id": "a0fdc25e742772cd",
        "text": "* [[URI]]s ⇒ [[Linked Data]] \n* [[DMXObject]]\n"
      },
      "date": 1665414838859
    },
    {
      "type": "add",
      "id": "69ec1ba80cdb6acf",
      "item": {
        "type": "markdown",
        "id": "69ec1ba80cdb6acf",
        "text": "The requirement to refer to a public vocabulary seems to be linked to the introduction of types. Maybe we should try to do without types for as long as possible and just use instances?!"
      },
      "after": "a0fdc25e742772cd",
      "date": 1665414850719
    },
    {
      "type": "edit",
      "id": "69ec1ba80cdb6acf",
      "item": {
        "type": "markdown",
        "id": "69ec1ba80cdb6acf",
        "text": "The requirement to refer to a public vocabulary seems to be linked to the introduction of types. Maybe we should try to do without types for as long as possible and just use instances?! Instance of …? Instance of [[Distinction]]?!!"
      },
      "date": 1665414911227
    },
    {
      "type": "edit",
      "id": "69ec1ba80cdb6acf",
      "item": {
        "type": "markdown",
        "id": "69ec1ba80cdb6acf",
        "text": "The requirement to refer to a public vocabulary seems to be linked to the introduction of types. Maybe we should try to do without types for as long as possible and just use instances?! Instance of …? Instace of what? Instance of [[Distinction]]?!!"
      },
      "date": 1665414938182
    },
    {
      "item": {
        "type": "factory",
        "id": "1d77951ad66703a6"
      },
      "id": "1d77951ad66703a6",
      "type": "add",
      "after": "69ec1ba80cdb6acf",
      "date": 1665429051545
    },
    {
      "type": "edit",
      "id": "1d77951ad66703a6",
      "item": {
        "type": "pagefold",
        "id": "1d77951ad66703a6",
        "text": "~"
      },
      "date": 1665429056033
    },
    {
      "item": {
        "type": "factory",
        "id": "2ab481b84f0d452a"
      },
      "id": "2ab481b84f0d452a",
      "type": "add",
      "after": "1d77951ad66703a6",
      "date": 1665429059184
    },
    {
      "type": "edit",
      "id": "2ab481b84f0d452a",
      "item": {
        "type": "paragraph",
        "id": "2ab481b84f0d452a",
        "text": "Evaluate graph nodes with dynamic properties, update svg in dom"
      },
      "date": 1665429063903
    },
    {
      "type": "edit",
      "id": "2ab481b84f0d452a",
      "item": {
        "type": "paragraph",
        "id": "2ab481b84f0d452a",
        "text": "Evaluate graph nodes with dynamic properties, update svg in dom. [https://github.com/WardCunningham/assets/commit/92efee1dbc7167ae146881cd44fdec4650dd32a5 commit]"
      },
      "date": 1665429119735
    },
    {
      "type": "add",
      "id": "b15749e955b3ef37",
      "item": {
        "type": "paragraph",
        "id": "b15749e955b3ef37",
        "text": "pages/super-collaborator/sim.js"
      },
      "after": "2ab481b84f0d452a",
      "date": 1665429182939
    },
    {
      "type": "edit",
      "id": "b15749e955b3ef37",
      "item": {
        "type": "paragraph",
        "id": "b15749e955b3ef37",
        "text": "⇒ pages/[[super-collaborator]]/sim.js"
      },
      "date": 1665429199371
    },
    {
      "item": {
        "type": "factory",
        "id": "1559b659c2a5a95c"
      },
      "id": "1559b659c2a5a95c",
      "type": "add",
      "after": "b15749e955b3ef37",
      "date": 1665429424081
    },
    {
      "type": "edit",
      "id": "1559b659c2a5a95c",
      "item": {
        "type": "paragraph",
        "id": "1559b659c2a5a95c",
        "text": "Lotka-Volterra Equations"
      },
      "date": 1665429446087
    },
    {
      "type": "edit",
      "id": "1559b659c2a5a95c",
      "item": {
        "type": "paragraph",
        "id": "1559b659c2a5a95c",
        "text": "⇒ [[Lotka-Volterra Equations]]"
      },
      "date": 1665429456484
    },
    {
      "type": "edit",
      "id": "1559b659c2a5a95c",
      "item": {
        "type": "paragraph",
        "id": "1559b659c2a5a95c",
        "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]"
      },
      "date": 1665429618631
    },
    {
      "type": "edit",
      "id": "1559b659c2a5a95c",
      "item": {
        "type": "paragraph",
        "id": "1559b659c2a5a95c",
        "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]] ⇒ [[Sorts]]"
      },
      "date": 1665430929737
    },
    {
      "item": {
        "type": "factory",
        "id": "19746ee350a18e36"
      },
      "id": "19746ee350a18e36",
      "type": "add",
      "after": "1559b659c2a5a95c",
      "date": 1665432082673
    },
    {
      "type": "edit",
      "id": "19746ee350a18e36",
      "item": {
        "type": "markdown",
        "id": "19746ee350a18e36",
        "text": "* SVG <polygon>"
      },
      "date": 1665432089759
    },
    {
      "type": "edit",
      "id": "19746ee350a18e36",
      "item": {
        "type": "markdown",
        "id": "19746ee350a18e36",
        "text": "* SVG <polygon>. [https://www.w3schools.com/graphics/svg_polygon.asp w3schools]"
      },
      "date": 1665432105297
    },
    {
      "item": {
        "type": "factory",
        "id": "5a43775f4e5dfcbd"
      },
      "id": "5a43775f4e5dfcbd",
      "type": "add",
      "after": "19746ee350a18e36",
      "date": 1665433727712
    },
    {
      "type": "edit",
      "id": "5a43775f4e5dfcbd",
      "item": {
        "type": "markdown",
        "id": "5a43775f4e5dfcbd",
        "text": "Ralf Barkow\nMy path from your \nThompson\n Meaning Nodes to a kind of use case Assistance in filling out forms (or boxes):\nhttps://wiki.ralfbarkow.ch/view/2022-10-10/view/display-scene-tree/view/box – would have to be formulated …\n"
      },
      "date": 1665433739803
    },
    {
      "type": "add",
      "id": "ea57ddb7c419dc8e",
      "item": {
        "type": "markdown",
        "id": "ea57ddb7c419dc8e",
        "text": "Ward\nRalf Barkow\n: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\nRalf Barkow\n\"A Clock, after all, tells people what to do, not the other way around.\" – Ward Cunningham\nhttps://wiki.ralfbarkow.ch/view/clock\nRalf Barkow\nWard\nRalf Barkow\n: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\nhttps://wiki.ralfbarkow.ch/view/lotka-volterra-equations/view/leibniz\nRalf Barkow\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\nhttps://github.com/khinsen/leibniz-pharo#leibniz-pharo\nRalf Barkow\n"
      },
      "after": "5a43775f4e5dfcbd",
      "date": 1665433740743
    },
    {
      "type": "edit",
      "id": "5a43775f4e5dfcbd",
      "item": {
        "type": "markdown",
        "id": "5a43775f4e5dfcbd",
        "text": "Ralf Barkow\nMy path from your \nThompson\n [[Meaning Nodes]] to a kind of use case Assistance in filling out forms (or boxes):\nhttps://wiki.ralfbarkow.ch/view/2022-10-10/view/display-scene-tree/view/box – would have to be formulated …\n"
      },
      "date": 1665433755078
    },
    {
      "type": "edit",
      "id": "ea57ddb7c419dc8e",
      "item": {
        "type": "markdown",
        "id": "ea57ddb7c419dc8e",
        "text": "Ward via [https://matrix.to/#/!zZErFjngcoPWssWRBH:dreyeck.freedombox.rocks/$2fflpOPEYzkdniyz4gfZwqYQSTNmlXWpSxC5Upczsrk?via=dreyeck.freedombox.rocks&via=matrix.org matrix]\nRalf Barkow\n: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\nRalf Barkow\n\"A Clock, after all, tells people what to do, not the other way around.\" – Ward Cunningham\nhttps://wiki.ralfbarkow.ch/view/clock\nRalf Barkow\nWard\nRalf Barkow\n: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\nhttps://wiki.ralfbarkow.ch/view/lotka-volterra-equations/view/leibniz\nRalf Barkow\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\nhttps://github.com/khinsen/leibniz-pharo#leibniz-pharo\nRalf Barkow\n"
      },
      "date": 1665433781645
    },
    {
      "type": "edit",
      "id": "ea57ddb7c419dc8e",
      "item": {
        "type": "markdown",
        "id": "ea57ddb7c419dc8e",
        "text": "Ward via [https://matrix.to/#/!zZErFjngcoPWssWRBH:dreyeck.freedombox.rocks/$2fflpOPEYzkdniyz4gfZwqYQSTNmlXWpSxC5Upczsrk?via=dreyeck.freedombox.rocks&via=matrix.org matrix]: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\nRalf Barkow\n\"A Clock, after all, tells people what to do, not the other way around.\" – Ward Cunningham\nhttps://wiki.ralfbarkow.ch/view/clock\nRalf Barkow\nWard\nRalf Barkow\n: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\nhttps://wiki.ralfbarkow.ch/view/lotka-volterra-equations/view/leibniz\nRalf Barkow\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\nhttps://github.com/khinsen/leibniz-pharo#leibniz-pharo\nRalf Barkow\n"
      },
      "date": 1665433800192
    },
    {
      "type": "edit",
      "id": "ea57ddb7c419dc8e",
      "item": {
        "type": "markdown",
        "id": "ea57ddb7c419dc8e",
        "text": "Ward via [https://matrix.to/#/!zZErFjngcoPWssWRBH:dreyeck.freedombox.rocks/$2fflpOPEYzkdniyz4gfZwqYQSTNmlXWpSxC5Upczsrk?via=dreyeck.freedombox.rocks&via=matrix.org matrix]: Interesting background reading from Viewpoint Research Institute. [[Time Bubble]] drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\nRalf Barkow\n\"A Clock, after all, tells people what to do, not the other way around.\" – Ward Cunningham\nhttps://wiki.ralfbarkow.ch/view/clock\nRalf Barkow\nWard\nRalf Barkow\n: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\nhttps://wiki.ralfbarkow.ch/view/lotka-volterra-equations/view/leibniz\nRalf Barkow\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\nhttps://github.com/khinsen/leibniz-pharo#leibniz-pharo\nRalf Barkow\n"
      },
      "date": 1665433816413
    },
    {
      "type": "edit",
      "id": "ea57ddb7c419dc8e",
      "item": {
        "type": "markdown",
        "id": "ea57ddb7c419dc8e",
        "text": "Ward via [https://matrix.to/#/!zZErFjngcoPWssWRBH:dreyeck.freedombox.rocks/$2fflpOPEYzkdniyz4gfZwqYQSTNmlXWpSxC5Upczsrk?via=dreyeck.freedombox.rocks&via=matrix.org matrix]: Interesting background reading from Viewpoint Research Institute. [[Time Bubbles]] drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\nRalf Barkow\n\"A Clock, after all, tells people what to do, not the other way around.\" – Ward Cunningham\nhttps://wiki.ralfbarkow.ch/view/clock\nRalf Barkow\nWard\nRalf Barkow\n: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\nhttps://wiki.ralfbarkow.ch/view/lotka-volterra-equations/view/leibniz\nRalf Barkow\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\nhttps://github.com/khinsen/leibniz-pharo#leibniz-pharo\nRalf Barkow\n"
      },
      "date": 1665433857856
    },
    {
      "type": "edit",
      "id": "ea57ddb7c419dc8e",
      "item": {
        "type": "markdown",
        "id": "ea57ddb7c419dc8e",
        "text": "Ward via [https://matrix.to/#/!zZErFjngcoPWssWRBH:dreyeck.freedombox.rocks/$2fflpOPEYzkdniyz4gfZwqYQSTNmlXWpSxC5Upczsrk?via=dreyeck.freedombox.rocks&via=matrix.org matrix]: Interesting background reading from Viewpoint Research Institute. [[Time Bubbles]] drew my attention immediately because of my recent addition of [[Clock]]s to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\nRalf Barkow\n\"A Clock, after all, tells people what to do, not the other way around.\" – Ward Cunningham\nhttps://wiki.ralfbarkow.ch/view/clock\nRalf Barkow\nWard\nRalf Barkow\n: Interesting background reading from Viewpoint Research Institute. Time Bubble drew my attention immediately because of my recent addition of Clocks to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\nhttps://wiki.ralfbarkow.ch/view/lotka-volterra-equations/view/leibniz\nRalf Barkow\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\nhttps://github.com/khinsen/leibniz-pharo#leibniz-pharo\nRalf Barkow\n"
      },
      "date": 1665433877606
    },
    {
      "type": "edit",
      "id": "ea57ddb7c419dc8e",
      "item": {
        "type": "markdown",
        "id": "ea57ddb7c419dc8e",
        "text": "Ward via [https://matrix.to/#/!zZErFjngcoPWssWRBH:dreyeck.freedombox.rocks/$2fflpOPEYzkdniyz4gfZwqYQSTNmlXWpSxC5Upczsrk?via=dreyeck.freedombox.rocks&via=matrix.org matrix]: Interesting background reading from Viewpoint Research Institute. [[Time Bubbles]] drew my attention immediately because of my recent addition of [[Clock]]s to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the Target applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n\n"
      },
      "date": 1665433940207
    },
    {
      "type": "add",
      "id": "3644fa27556ecebd",
      "item": {
        "type": "markdown",
        "id": "3644fa27556ecebd",
        "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\nhttps://wiki.ralfbarkow.ch/view/lotka-volterra-equations/view/leibniz\nRalf Barkow\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\nhttps://github.com/khinsen/leibniz-pharo#leibniz-pharo\nRalf Barkow\n"
      },
      "after": "ea57ddb7c419dc8e",
      "date": 1665433940796
    },
    {
      "type": "edit",
      "id": "3644fa27556ecebd",
      "item": {
        "type": "markdown",
        "id": "3644fa27556ecebd",
        "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\n\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\nhttps://github.com/khinsen/leibniz-pharo#leibniz-pharo\nRalf Barkow\n"
      },
      "date": 1665433964314
    },
    {
      "type": "edit",
      "id": "3644fa27556ecebd",
      "item": {
        "type": "markdown",
        "id": "3644fa27556ecebd",
        "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\n\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program.\n[https://github.com/khinsen/leibniz-pharo#leibniz-pharo github]\n\n"
      },
      "date": 1665433995856
    },
    {
      "type": "edit",
      "id": "3644fa27556ecebd",
      "item": {
        "type": "markdown",
        "id": "3644fa27556ecebd",
        "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\n\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program [https://github.com/khinsen/leibniz-pharo#leibniz-pharo github]\n\n"
      },
      "date": 1665434003355
    },
    {
      "type": "edit",
      "id": "3644fa27556ecebd",
      "item": {
        "type": "markdown",
        "id": "3644fa27556ecebd",
        "text": "⇒ [[Lotka-Volterra Equations]] ⇒ [[Leibniz]]\n\nLeibniz lets you write mathematical equations (see [[Lotka-Volterra equations]] for a simple example), without necessarily doing anything with them. You can use Leibniz much like traditional mathematical notation, but with the benefit of consistency checks (in particular consistency of Sorts and with the benefit of being machine-readable, meaning that you can feed your equations as input to a computational tool, such as a simulator or a data analysis program. [https://github.com/khinsen/leibniz-pharo#leibniz-pharo github]\n\n"
      },
      "date": 1665434015182
    },
    {
      "type": "edit",
      "id": "5a43775f4e5dfcbd",
      "item": {
        "type": "markdown",
        "id": "5a43775f4e5dfcbd",
        "text": "My path from Thompson's [[Meaning Nodes]] to a kind of use case Assistance in filling out forms (or boxes):\nhttps://wiki.ralfbarkow.ch/view/2022-10-10/view/display-scene-tree/view/box – would have to be formulated …\n"
      },
      "date": 1665434050352
    },
    {
      "type": "edit",
      "id": "ea57ddb7c419dc8e",
      "item": {
        "type": "markdown",
        "id": "ea57ddb7c419dc8e",
        "text": "Ward via [https://matrix.to/#/!zZErFjngcoPWssWRBH:dreyeck.freedombox.rocks/$2fflpOPEYzkdniyz4gfZwqYQSTNmlXWpSxC5Upczsrk?via=dreyeck.freedombox.rocks&via=matrix.org matrix]: Interesting background reading from Viewpoint Research Institute. [[Time Bubbles]] drew my attention immediately because of my recent addition of [[Clock]]s to the super collaborator in order to exert exactly this sort of control. A Clock is a node that controls the simulation. I made it global to the [[Target]] applying to all dynamic nodes. I could have made it something that exerted control over a subgraph thus allowing different parts of a model to run at different rates and resolutions. A bubble indeed.\n\n"
      },
      "date": 1665434122497
    },
    {
      "type": "edit",
      "id": "5a43775f4e5dfcbd",
      "item": {
        "type": "markdown",
        "id": "5a43775f4e5dfcbd",
        "text": "My path from Thompson's [[Meaning Nodes]] to a kind of use case Assistance in filling out forms (or boxes):\nhttps://wiki.ralfbarkow.ch/view/2022-10-10/view/display-scene-tree/view/box – would have to be formulated …\n[[Display-Scene Tree]]\n"
      },
      "date": 1665434180377
    },
    {
      "type": "edit",
      "id": "5a43775f4e5dfcbd",
      "item": {
        "type": "markdown",
        "id": "5a43775f4e5dfcbd",
        "text": "My path from Thompson's [[Meaning Nodes]] to a kind of use case Assistance in filling out forms (or boxes):\nhttps://wiki.ralfbarkow.ch/view/2022-10-10/view/display-scene-tree/view/box – would have to be formulated …\n⇒ [[Display-Scene Tree]] ⇒ [[Box]]\n"
      },
      "date": 1665434199323
    },
    {
      "type": "edit",
      "id": "5a43775f4e5dfcbd",
      "item": {
        "type": "markdown",
        "id": "5a43775f4e5dfcbd",
        "text": "My path from Thompson's [[Meaning Nodes]] to a kind of use case Assistance in filling out forms (or boxes):\nhttps://wiki.ralfbarkow.ch/view/2022-10-10/view/display-scene-tree/view/box – would have to be formulated …\n⇒ [[Display-Scene Tree]] ⇒ [[Time Bubbles]] ⇒ [[Box]]\n"
      },
      "date": 1665434231520
    },
    {
      "type": "edit",
      "id": "5a43775f4e5dfcbd",
      "item": {
        "type": "markdown",
        "id": "5a43775f4e5dfcbd",
        "text": "My path from Thompson's [[Meaning Nodes]] to a kind of use case *Assistance in filling out forms* (or boxes):\nhttps://wiki.ralfbarkow.ch/view/2022-10-10/view/display-scene-tree/view/box – would have to be formulated …\n⇒ [[Display-Scene Tree]] ⇒ [[Time Bubbles]] ⇒ [[Box]]\n"
      },
      "date": 1665434265356
    },
    {
      "item": {
        "type": "factory",
        "id": "961bfe01276bed81"
      },
      "id": "961bfe01276bed81",
      "type": "add",
      "after": "3644fa27556ecebd",
      "date": 1665434390498
    },
    {
      "type": "edit",
      "id": "961bfe01276bed81",
      "item": {
        "type": "pagefold",
        "id": "961bfe01276bed81",
        "text": "~"
      },
      "date": 1665434394844
    },
    {
      "item": {
        "type": "factory",
        "id": "621fe592a1da8448"
      },
      "id": "621fe592a1da8448",
      "type": "add",
      "after": "961bfe01276bed81",
      "date": 1665434397724
    },
    {
      "type": "edit",
      "id": "621fe592a1da8448",
      "item": {
        "type": "paragraph",
        "id": "621fe592a1da8448",
        "text": "ime-aware computation models have a long\nhistory that goes back to John McCarthy’s Situation Calculus [14] and still\nwork is going on such as Dedalus [2], but they have not been fully adapted into\nEtoys-like authoring environments."
      },
      "date": 1665434400907
    },
    {
      "type": "edit",
      "id": "621fe592a1da8448",
      "item": {
        "type": "paragraph",
        "id": "621fe592a1da8448",
        "text": "Time-aware computation models have a long\nhistory that goes back to John McCarthy’s Situation Calculus [14] and still\nwork is going on such as Dedalus [2], but they have not been fully adapted into\nEtoys-like authoring environments."
      },
      "date": 1665434404980
    },
    {
      "item": {
        "type": "factory",
        "id": "4d2acf0dbd52dd5d"
      },
      "id": "4d2acf0dbd52dd5d",
      "type": "add",
      "after": "621fe592a1da8448",
      "date": 1665434439195
    },
    {
      "id": "06a5979db6659289",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "06a5979db6659289",
        "text": "OHSHIMA, Yoshiki, FREUDENBERG, Bert, KAEHLER, Ted and LUNZER, Aran, 2012. A report on KScript and KSWorld. VPRI Research Note RN-2012-001. [http://www.vpri.org/pdf/rn2012001_kscript.pdf pdf]\n"
      },
      "after": "961bfe01276bed81",
      "date": 1665434445418
    },
    {
      "type": "edit",
      "id": "4d2acf0dbd52dd5d",
      "item": {
        "type": "paragraph",
        "id": "4d2acf0dbd52dd5d",
        "text": "[14] J. McCarthy and P. J. Hayes. Some philosophical problems from the standpoint of artificial intelligence. In B. Meltzer and D. Michie, editors, Machine Intelligence 4, pages 463–502. Edinburgh University Press, 1969."
      },
      "date": 1665434604954
    },
    {
      "type": "add",
      "id": "7f9c11fa0e26f992",
      "item": {
        "type": "paragraph",
        "id": "7f9c11fa0e26f992",
        "text": "[2] P. Alvaro, W. Marczak, N. Conway, J. M. Hellerstein, D. Maier, R. C. Sears, P. Alvaro, W. R. Marczak, N. Conway, J. M. Hellerstein, D. Maier, and R. Sears. Dedalus: Datalog in time and space. Technical report, University of California, Berkeley, 2009."
      },
      "after": "4d2acf0dbd52dd5d",
      "date": 1665434632016
    },
    {
      "type": "edit",
      "id": "7f9c11fa0e26f992",
      "item": {
        "type": "paragraph",
        "id": "7f9c11fa0e26f992",
        "text": "[2] P. Alvaro, W. Marczak, N. Conway, J. M. Hellerstein, D. Maier, R. C. Sears, P. Alvaro, W. R. Marczak, N. Conway, J. M. Hellerstein, D. Maier, and R. Sears. Dedalus: Datalog in time and space. Technical report, University of California, Berkeley, 2009. [https://apps.dtic.mil/sti/pdfs/ADA538767.pdf pdf]"
      },
      "date": 1665434670567
    },
    {
      "item": {
        "type": "factory",
        "id": "866ab330fd3dee54"
      },
      "id": "866ab330fd3dee54",
      "type": "add",
      "after": "7f9c11fa0e26f992",
      "date": 1665434759890
    },
    {
      "type": "edit",
      "id": "866ab330fd3dee54",
      "item": {
        "type": "markdown",
        "id": "866ab330fd3dee54",
        "text": "> […] First, the state of any such system evolves with its execution. Second, deductions in these systems may be arbitrarily delayed, dropped, or reordered by the unreliable network links they must traverse. Previous efforts addressed the former by extending Datalog to include updates, key constraints, persistence and events, and the latter by assuming ordered and reliable delivery while ignoring delay. These details have a semantics outside Datalog, which increases the complexity of the language or its interpretation, and forces programmers to think operationally. We argue that the missing component from these previous languages is a notion of time."
      },
      "date": 1665434766336
    },
    {
      "type": "edit",
      "id": "866ab330fd3dee54",
      "item": {
        "type": "markdown",
        "id": "866ab330fd3dee54",
        "text": "> […] First, the state of any such system evolves with its execution. Second, deductions in these systems may be arbitrarily delayed, dropped, or reordered by the unreliable network links they must traverse. Previous efforts addressed the former by extending Datalog to include updates, key constraints, persistence and events, and the latter by assuming ordered and reliable delivery while ignoring delay. These details have a semantics outside Datalog, which increases the complexity of the language or its interpretation, and forces programmers to think operationally. We argue that the missing component from these previous languages is a notion of *time*."
      },
      "date": 1665434814656
    },
    {
      "type": "edit",
      "id": "866ab330fd3dee54",
      "item": {
        "type": "markdown",
        "id": "866ab330fd3dee54",
        "text": "> […] First, the state of any such system evolves with its execution. Second, deductions in these systems may be arbitrarily delayed, dropped, or reordered by the unreliable network links they must traverse. Previous efforts addressed the former by extending Datalog to include updates, key constraints, persistence and events, and the latter by assuming ordered and reliable delivery while ignoring delay. These details have a semantics outside Datalog, which increases the complexity of the language or its interpretation, and forces programmers to think operationally. We argue that the missing component from these previous languages is a notion of *[[time]]*."
      },
      "date": 1665434828311
    },
    {
      "type": "edit",
      "id": "866ab330fd3dee54",
      "item": {
        "type": "markdown",
        "id": "866ab330fd3dee54",
        "text": "> […] First, the state of any such system evolves with its execution. Second, deductions in these systems may be arbitrarily delayed, dropped, or reordered by the unreliable network links they must traverse. Previous efforts addressed the former by extending Datalog to include updates, key constraints, persistence and events, and the latter by assuming ordered and reliable delivery while ignoring delay. These details have a semantics outside Datalog, which increases the complexity of the language or its interpretation, and forces programmers to think operationally. We argue that the missing component from these previous languages is a notion of *[[time]]*.\n"
      },
      "date": 1665434921412
    },
    {
      "type": "add",
      "id": "c7598759181dbf25",
      "item": {
        "type": "markdown",
        "id": "c7598759181dbf25",
        "text": "In this paper we present Dedalus, a foundation language for programming and reasoning about distributed systems. Dedalus reduces to a subset of Datalog [30] with negation, aggregate functions, successor and choice, and admits an explicit representation of time into the logic language. We show that Dedalus provides a declarative foundation for the two signature features of distributed systems: mutable state, and asynchronous processing and communication. Given these two features, we address three important properties of programs in a domain-specific manner: a notion of safety appropriate to non-terminating computations, stratified monotonic reasoning with negation over time, and efficient evaluation over time via a simple execution strategy. We also provide conservative syntactic checks for our temporal notions of safety and stratification. Our experience implementing full-featured systems in variants of Datalog suggests that Dedalus is well-suited to the specification of rich distributed services and protocols, and provides both cleaner semantics and richer tests of correctness."
      },
      "after": "866ab330fd3dee54",
      "date": 1665434922196
    },
    {
      "type": "edit",
      "id": "4d2acf0dbd52dd5d",
      "item": {
        "type": "paragraph",
        "id": "4d2acf0dbd52dd5d",
        "text": "[14] J. McCarthy and P. J. Hayes. Some philosophical problems from the standpoint of artificial intelligence. In B. Meltzer and D. Michie, editors, Machine Intelligence 4, pages 463–502. Edinburgh University Press, 1969. [http://www-formal.stanford.edu/jmc/mcchay69.pdf pdf]"
      },
      "date": 1665435001827
    },
    {
      "type": "add",
      "id": "758caa324d39f116",
      "item": {
        "type": "paragraph",
        "id": "758caa324d39f116",
        "text": "> […] Davidson’s main thesis is that, in order to translate statements\ninvolving actions into the predicate calculus, it appears necessary to allow\nactions as values of bound variables, that is (by Quine’s test) as real indi-\nviduals. The situation calculus of course follows this advice in that we allow\nquantification over strategies, which have actions as a special case. Also im-\nportant are Simon’s papers (1965, 1967) on command-logics. Simon’s main\npurpose is to show that a special logic of commands is unnecessary, ordinary\nlogic serving as the only deductive machinery; but this need not detain us\nhere. He makes several points, most notably perhaps that agents are most\nof the time not performing actions, and that in fact they only stir to ac-\ntion when forced to by some outside interference. He has the particularly\ninteresting example of a serial processor operating in a parallel-demand en-\nvironment, and the resulting need for interrupts. Action logics such as von\nWright’s and ours do not distinguish between action and inaction, and we\nare not aware of any action-logic which has reached a stage of sophistication\nadequate to meet Simon’s implied criticism.\nThere is a large body of purely philosophical writings on action, time,\ndeterminism, etc., most of which is irrelevant for present purposes. However,\nwe mention two which have recently appeared and which seem interesting: a\npaper by Chisholm (1967) and another paper by Evans (1967), summarizing\nthe recent discussion on the distinctions between states, performances and\nactivities."
      },
      "after": "4d2acf0dbd52dd5d",
      "date": 1665435444045
    },
    {
      "type": "edit",
      "id": "758caa324d39f116",
      "item": {
        "type": "markdown",
        "id": "758caa324d39f116",
        "text": "> […] Davidson’s main thesis is that, in order to translate statements\ninvolving actions into the predicate calculus, it appears necessary to allow\nactions as values of bound variables, that is (by Quine’s test) as real indi-\nviduals. The situation calculus of course follows this advice in that we allow\nquantification over strategies, which have actions as a special case. Also im-\nportant are Simon’s papers (1965, 1967) on command-logics. Simon’s main\npurpose is to show that a special logic of commands is unnecessary, ordinary\nlogic serving as the only deductive machinery; but this need not detain us\nhere. He makes several points, most notably perhaps that agents are most\nof the time not performing actions, and that in fact they only stir to ac-\ntion when forced to by some outside interference. He has the particularly\ninteresting example of a serial processor operating in a parallel-demand en-\nvironment, and the resulting need for interrupts. Action logics such as von\nWright’s and ours do not distinguish between action and inaction, and we\nare not aware of any action-logic which has reached a stage of sophistication\nadequate to meet Simon’s implied criticism.\nThere is a large body of purely philosophical writings on action, time,\ndeterminism, etc., most of which is irrelevant for present purposes. However,\nwe mention two which have recently appeared and which seem interesting: a\npaper by Chisholm (1967) and another paper by Evans (1967), summarizing\nthe recent discussion on the distinctions between states, performances and\nactivities."
      },
      "date": 1665435445804
    },
    {
      "type": "edit",
      "id": "758caa324d39f116",
      "item": {
        "type": "markdown",
        "id": "758caa324d39f116",
        "text": "> […] Davidson’s main thesis is that, in order to translate statements involving actions into the predicate calculus, it appears necessary to allow actions as values of bound variables, that is (by Quine’s test) as real individuals. The situation calculus of course follows this advice in that we allow quantification over strategies, which have actions as a special case. Also important are Simon’s papers (1965, 1967) on command-logics. Simon’s main purpose is to show that a special logic of commands is unnecessary, ordinary logic serving as the only deductive machinery; but this need not detain us here. He makes several points, most notably perhaps that agents are most of the time not performing actions, and that in fact they only stir to action when forced to by some outside interference. He has the particularly interesting example of a serial processor operating in a parallel-demand environment, and the resulting need for interrupts. Action logics such as von Wright’s and ours do not distinguish between action and inaction, and we are not aware of any action-logic which has reached a stage of sophistication adequate to meet Simon’s implied criticism. \n>\n> There is a large body of purely philosophical writings on action, time, determinism, etc., most of which is irrelevant for present purposes. However, we mention two which have recently appeared and which seem interesting: a paper by Chisholm (1967) and another paper by Evans (1967), summarizing the recent discussion on the distinctions between states, performances and activities."
      },
      "date": 1665435554679
    },
    {
      "type": "edit",
      "id": "758caa324d39f116",
      "item": {
        "type": "markdown",
        "id": "758caa324d39f116",
        "text": "> […] Davidson’s main thesis is that, in order to translate statements involving actions into the predicate calculus, it appears necessary to allow actions as values of bound variables, that is (by Quine’s test) as real individuals. The situation calculus of course follows this advice in that we allow quantification over strategies, which have actions as a special case. Also important are Simon’s papers (1965, 1967) on command-logics. Simon’s main purpose is to show that a special logic of commands is unnecessary, ordinary logic serving as the only deductive machinery; but this need not detain us here. He makes several points, most notably perhaps that agents are most of the time not performing actions, and that in fact they only stir to action when forced to by some outside interference. He has the particularly interesting example of a serial processor operating in a parallel-demand environment, and the resulting need for interrupts. Action logics such as von Wright’s and ours do not distinguish between action and inaction, and we are not aware of any action-logic which has reached a stage of sophistication adequate to meet Simon’s implied criticism. \n>\n> There is a large body of purely philosophical writings on action, time, determinism, etc., most of which is irrelevant for present purposes. However, we mention two which have recently appeared and which seem interesting: a paper by Chisholm (1967) and another paper by Evans (1967), summarizing the recent discussion on the distinctions between states, performances and activities.\n"
      },
      "date": 1665435864261
    },
    {
      "type": "add",
      "id": "3588973ee7694336",
      "item": {
        "type": "markdown",
        "id": "3588973ee7694336",
        "text": "– [[Intelligent Machine]]"
      },
      "after": "758caa324d39f116",
      "date": 1665435872686
    },
    {
      "type": "edit",
      "id": "3588973ee7694336",
      "item": {
        "type": "markdown",
        "id": "3588973ee7694336",
        "text": "⇒ [[Intelligent Machine]]"
      },
      "date": 1665435878670
    }
  ]
}