{
  "title": "versionAt:",
  "story": [
    {
      "type": "markdown",
      "id": "42b8a50feb3fcbf8",
      "text": "We implement the two visible methods in [[Contract]] – `#versionAt:put:` and `#versionAt:`. (In some cases you will want to make a Safe Copy of the [[Version]] before you store it, but we are just careful not to modify a Version after we have stored it in a [[History]].)\n"
    },
    {
      "type": "code",
      "id": "b3ff51464ae04dea",
      "text": "Contract>>versionAt: aDate put: aVersion\n aVersion date: aDate.\n self versions add: aVersion"
    },
    {
      "type": "paragraph",
      "id": "9ead1c7ea29cffec",
      "text": "⇒ [[Most Recent First]]"
    },
    {
      "type": "code",
      "id": "4537bbaf531a2127",
      "text": "Contract>>versions\n \"The instance variable “versions” will be lazily initialized to a SortedCollection of Versions. \"\n versions isNil ifTrue: [versions := SortedCollection sortBlock: [:a :b | a date > b date]].\n ^versions"
    },
    {
      "type": "paragraph",
      "id": "d96e5e67125b0656",
      "text": "I am still not quite clear what "
    },
    {
      "type": "markdown",
      "id": "eb6a6ec718ed0ca4",
      "text": "> The instance variable “versions” will be lazily initialized to a [[SortedCollection]] of [[Versions]]."
    },
    {
      "type": "paragraph",
      "id": "ce77a593b648906b",
      "text": "means. \n\t"
    },
    {
      "type": "paragraph",
      "id": "1cd7d52ec338ad50",
      "text": "⇒ [[Sort Block]]"
    },
    {
      "type": "markdown",
      "id": "fa6d6ac70b44dd7d",
      "text": "> A sort block takes two elements of the collection as parameter and should return a boolean describing if the first one should be before the second one. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/SortingCollections.md#sorting-via-a-block github]\n"
    },
    {
      "type": "markdown",
      "id": "8b60196337be9fca",
      "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versionsAt:` method so that it detects with greater than or equal to (`>=`), instead of just greater than (`>`)  – now we have implemented `Contract>>versionAt:` [https://github.com/RalfBarkow/time-travel-project/commit/bdbb6e959a1b6faf1d68c9e5c742bfde85085d9b commit]: "
    },
    {
      "type": "code",
      "id": "77b6839a8e1fe254",
      "text": "versionAt: aDate\n\t^ self versions detect: [:each | aDate >= each date]"
    },
    {
      "type": "paragraph",
      "id": "6f9a1605e509b363",
      "text": "But the paper says:"
    },
    {
      "type": "code",
      "id": "d94f00185d3485b9",
      "text": "Contract>>versionAt: aDate\n ^self versions detect: [:each | aPerspective > each date] "
    },
    {
      "type": "paragraph",
      "id": "22702d9a118aebca",
      "text": "⇒ [[Perspective]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "versionAt:",
        "story": []
      },
      "date": 1654610071276
    },
    {
      "item": {
        "type": "factory",
        "id": "42b8a50feb3fcbf8"
      },
      "id": "42b8a50feb3fcbf8",
      "type": "add",
      "date": 1654610088596
    },
    {
      "type": "edit",
      "id": "42b8a50feb3fcbf8",
      "item": {
        "type": "paragraph",
        "id": "42b8a50feb3fcbf8",
        "text": "With this in place, we can implement the two visible methods in Contract- #versionAt:put: and\n#versionAt:. (In some cases you will want to make a Safe Copy of the Version before you store it, but\nwe are just careful not to modify a Version after we have stored it in a History.)\nContract>>versionAt: aDate put: aVersion\n aVersion date: aDate.\n self versions add: aVersion"
      },
      "date": 1654610093133
    },
    {
      "item": {
        "type": "factory",
        "id": "b3ff51464ae04dea"
      },
      "id": "b3ff51464ae04dea",
      "type": "add",
      "after": "42b8a50feb3fcbf8",
      "date": 1654610098370
    },
    {
      "type": "edit",
      "id": "42b8a50feb3fcbf8",
      "item": {
        "type": "paragraph",
        "id": "42b8a50feb3fcbf8",
        "text": "With this in place, we can implement the two visible methods in Contract- #versionAt:put: and\n#versionAt:. (In some cases you will want to make a Safe Copy of the Version before you store it, but\nwe are just careful not to modify a Version after we have stored it in a History.)\n"
      },
      "date": 1654610099544
    },
    {
      "type": "edit",
      "id": "b3ff51464ae04dea",
      "item": {
        "type": "code",
        "id": "b3ff51464ae04dea",
        "text": "Contract>>versionAt: aDate put: aVersion\n aVersion date: aDate.\n self versions add: aVersion"
      },
      "date": 1654610100454
    },
    {
      "type": "edit",
      "id": "42b8a50feb3fcbf8",
      "item": {
        "type": "paragraph",
        "id": "42b8a50feb3fcbf8",
        "text": "We implement the two visible methods in [[Contract]] – #versionAt:put: and\n#versionAt:. (In some cases you will want to make a Safe Copy of the Version before you store it, but\nwe are just careful not to modify a Version after we have stored it in a History.)\n"
      },
      "date": 1654610138889
    },
    {
      "item": {
        "type": "factory",
        "id": "9ead1c7ea29cffec"
      },
      "id": "9ead1c7ea29cffec",
      "type": "add",
      "after": "b3ff51464ae04dea",
      "date": 1654610167877
    },
    {
      "type": "edit",
      "id": "9ead1c7ea29cffec",
      "item": {
        "type": "paragraph",
        "id": "9ead1c7ea29cffec",
        "text": "⇒ [[Most Recent First]]"
      },
      "date": 1654610183313
    },
    {
      "item": {
        "type": "factory",
        "id": "b7f4f7fe8936e217"
      },
      "id": "b7f4f7fe8936e217",
      "type": "add",
      "after": "9ead1c7ea29cffec",
      "date": 1654610199906
    },
    {
      "type": "edit",
      "id": "b7f4f7fe8936e217",
      "item": {
        "type": "paragraph",
        "id": "b7f4f7fe8936e217",
        "text": "The instance variable “versions” will be lazily initialized to a SortedCollection of Versions.\nContract>>versions\n versions isNil ifTrue: [versions := SortedCollection sortBlock: [:a :b | a date > b date]].\n ^versions"
      },
      "date": 1654610203629
    },
    {
      "type": "add",
      "id": "d96e5e67125b0656",
      "item": {
        "type": "paragraph",
        "id": "d96e5e67125b0656",
        "text": "Now we can implement Contract>>versionAt: "
      },
      "after": "b7f4f7fe8936e217",
      "date": 1654610206402
    },
    {
      "item": {
        "type": "factory",
        "id": "4537bbaf531a2127"
      },
      "id": "4537bbaf531a2127",
      "type": "add",
      "after": "d96e5e67125b0656",
      "date": 1654610209348
    },
    {
      "id": "4537bbaf531a2127",
      "type": "move",
      "order": [
        "42b8a50feb3fcbf8",
        "b3ff51464ae04dea",
        "9ead1c7ea29cffec",
        "b7f4f7fe8936e217",
        "4537bbaf531a2127",
        "d96e5e67125b0656"
      ],
      "date": 1654610211156
    },
    {
      "type": "edit",
      "id": "b7f4f7fe8936e217",
      "item": {
        "type": "paragraph",
        "id": "b7f4f7fe8936e217",
        "text": "The instance variable “versions” will be lazily initialized to a SortedCollection of Versions."
      },
      "date": 1654610218028
    },
    {
      "type": "edit",
      "id": "4537bbaf531a2127",
      "item": {
        "type": "code",
        "id": "4537bbaf531a2127",
        "text": "\nContract>>versions\n versions isNil ifTrue: [versions := SortedCollection sortBlock: [:a :b | a date > b date]].\n ^versions"
      },
      "date": 1654610218946
    },
    {
      "type": "edit",
      "id": "4537bbaf531a2127",
      "item": {
        "type": "code",
        "id": "4537bbaf531a2127",
        "text": "Contract>>versions\n versions isNil ifTrue: [versions := SortedCollection sortBlock: [:a :b | a date > b date]].\n ^versions"
      },
      "date": 1654610222688
    },
    {
      "type": "edit",
      "id": "d96e5e67125b0656",
      "item": {
        "type": "paragraph",
        "id": "d96e5e67125b0656",
        "text": "[[Sort Block]]"
      },
      "date": 1654610241061
    },
    {
      "type": "add",
      "id": "76cb3ce39ba31a59",
      "item": {
        "type": "paragraph",
        "id": "76cb3ce39ba31a59",
        "text": "Now we can implement Contract>>versionAt: "
      },
      "after": "d96e5e67125b0656",
      "date": 1654610242733
    },
    {
      "type": "edit",
      "id": "d96e5e67125b0656",
      "item": {
        "type": "paragraph",
        "id": "d96e5e67125b0656",
        "text": "⇒ [[Sort Block]]"
      },
      "date": 1654610252917
    },
    {
      "type": "edit",
      "id": "42b8a50feb3fcbf8",
      "item": {
        "type": "paragraph",
        "id": "42b8a50feb3fcbf8",
        "text": "We implement the two visible methods in [[Contract]] – #versionAt:put: and\n#versionAt:. (In some cases you will want to make a Safe Copy of the [[Version]] before you store it, but\nwe are just careful not to modify a Version after we have stored it in a History.)\n"
      },
      "date": 1654610273484
    },
    {
      "type": "edit",
      "id": "42b8a50feb3fcbf8",
      "item": {
        "type": "paragraph",
        "id": "42b8a50feb3fcbf8",
        "text": "We implement the two visible methods in [[Contract]] – #versionAt:put: and\n#versionAt:. (In some cases you will want to make a Safe Copy of the [[Version]] before you store it, but\nwe are just careful not to modify a Version after we have stored it in a [[History]].)\n"
      },
      "date": 1654610286376
    },
    {
      "type": "edit",
      "id": "b7f4f7fe8936e217",
      "item": {
        "type": "paragraph",
        "id": "b7f4f7fe8936e217",
        "text": "The instance variable “versions” will be lazily initialized to a [[SortedCollection]] of Versions."
      },
      "date": 1654610305819
    },
    {
      "type": "edit",
      "id": "b7f4f7fe8936e217",
      "item": {
        "type": "paragraph",
        "id": "b7f4f7fe8936e217",
        "text": "The instance variable “versions” will be lazily initialized to a [[SortedCollection]] of [[Versions]]."
      },
      "date": 1654610313499
    },
    {
      "id": "fa6d6ac70b44dd7d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "fa6d6ac70b44dd7d",
        "text": "A sort block takes two elements of the collection as parameter and should return a boolean describing if the first one should be before the second one. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/SortingCollections.md#sorting-via-a-block github]"
      },
      "after": "d96e5e67125b0656",
      "date": 1654610393218
    },
    {
      "type": "edit",
      "id": "fa6d6ac70b44dd7d",
      "item": {
        "type": "paragraph",
        "id": "fa6d6ac70b44dd7d",
        "text": "> A sort block takes two elements of the collection as parameter and should return a boolean describing if the first one should be before the second one. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/SortingCollections.md#sorting-via-a-block github]"
      },
      "date": 1654610417159
    },
    {
      "type": "edit",
      "id": "fa6d6ac70b44dd7d",
      "item": {
        "type": "markdown",
        "id": "fa6d6ac70b44dd7d",
        "text": "> A sort block takes two elements of the collection as parameter and should return a boolean describing if the first one should be before the second one. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/SortingCollections.md#sorting-via-a-block github]"
      },
      "date": 1654610418699
    },
    {
      "type": "edit",
      "id": "fa6d6ac70b44dd7d",
      "item": {
        "type": "markdown",
        "id": "fa6d6ac70b44dd7d",
        "text": "> A sort block takes two elements of the collection as parameter and should return a boolean describing if the first one should be before the second one. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/SortingCollections.md#sorting-via-a-block github]\n"
      },
      "date": 1654610425475
    },
    {
      "type": "add",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements!"
      },
      "after": "fa6d6ac70b44dd7d",
      "date": 1654610436206
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]] But this test case is dealing with only one "
      },
      "date": 1654610521667
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]] But in the context of this test case we are dealing with only one version."
      },
      "date": 1654610554008
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]] But in the context of this test case we are dealing with only 1 version."
      },
      "date": 1654610606075
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]] But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it tests for greater than equal instead of just greater."
      },
      "date": 1654610691731
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]] But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it tests for greater than or equal to (`, instead of just greater than."
      },
      "date": 1654610763680
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]] But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it tests for greater than or equal to (`>=`), instead of just greater than (`>`)."
      },
      "date": 1654610787636
    },
    {
      "item": {
        "type": "factory",
        "id": "77b6839a8e1fe254"
      },
      "id": "77b6839a8e1fe254",
      "type": "add",
      "after": "76cb3ce39ba31a59",
      "date": 1654610796448
    },
    {
      "type": "edit",
      "id": "77b6839a8e1fe254",
      "item": {
        "type": "code",
        "id": "77b6839a8e1fe254",
        "text": "Contract>>versions\n versions isNil ifTrue: [versions := SortedCollection sortBlock: [:a :b | a date > b date]].\n ^versions"
      },
      "date": 1654610799772
    },
    {
      "id": "77b6839a8e1fe254",
      "type": "move",
      "order": [
        "42b8a50feb3fcbf8",
        "b3ff51464ae04dea",
        "9ead1c7ea29cffec",
        "b7f4f7fe8936e217",
        "4537bbaf531a2127",
        "d96e5e67125b0656",
        "fa6d6ac70b44dd7d",
        "8b60196337be9fca",
        "77b6839a8e1fe254",
        "76cb3ce39ba31a59"
      ],
      "date": 1654610801800
    },
    {
      "type": "edit",
      "id": "77b6839a8e1fe254",
      "item": {
        "type": "code",
        "id": "77b6839a8e1fe254",
        "text": "Contract>>versions\n versions isNil ifTrue: [versions := SortedCollection sortBlock: [:a :b | a date >= b date]].\n ^versions"
      },
      "date": 1654610806090
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it tests for greater than or equal to (`>=`), instead of just greater than (`>`)."
      },
      "date": 1654610818923
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it tests for greater than or equal to (`>=`), instead of just greater than (`>`):"
      },
      "date": 1654610832490
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it tests for greater than or equal to (`>=`), instead of just greater than (`>`) [https://github.com/RalfBarkow/time-travel-project/commit/bdbb6e959a1b6faf1d68c9e5c742bfde85085d9b commit]: "
      },
      "date": 1654611466642
    },
    {
      "type": "edit",
      "id": "77b6839a8e1fe254",
      "item": {
        "type": "code",
        "id": "77b6839a8e1fe254",
        "text": "versionAt: aDate\n\t^ self versions detect: [:each | aDate >= each date]"
      },
      "date": 1654611620469
    },
    {
      "id": "76cb3ce39ba31a59",
      "type": "move",
      "order": [
        "42b8a50feb3fcbf8",
        "b3ff51464ae04dea",
        "9ead1c7ea29cffec",
        "b7f4f7fe8936e217",
        "4537bbaf531a2127",
        "d96e5e67125b0656",
        "fa6d6ac70b44dd7d",
        "8b60196337be9fca",
        "76cb3ce39ba31a59",
        "77b6839a8e1fe254"
      ],
      "date": 1654611632202
    },
    {
      "type": "remove",
      "id": "76cb3ce39ba31a59",
      "date": 1654611657053
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it tests for greater than or equal to (`>=`), instead of just greater than (`>`) [https://github.com/RalfBarkow/time-travel-project/commit/bdbb6e959a1b6faf1d68c9e5c742bfde85085d9b commit] – now we can implement `Contract>>versionAt:` : "
      },
      "date": 1654611683583
    },
    {
      "item": {
        "type": "factory",
        "id": "6f9a1605e509b363"
      },
      "id": "6f9a1605e509b363",
      "type": "add",
      "after": "77b6839a8e1fe254",
      "date": 1654611759055
    },
    {
      "type": "edit",
      "id": "6f9a1605e509b363",
      "item": {
        "type": "paragraph",
        "id": "6f9a1605e509b363",
        "text": "But the paper says:"
      },
      "date": 1654611765179
    },
    {
      "item": {
        "type": "factory",
        "id": "d94f00185d3485b9"
      },
      "id": "d94f00185d3485b9",
      "type": "add",
      "after": "47cfe7bcd97b58b8",
      "date": 1654611767737
    },
    {
      "type": "edit",
      "id": "d94f00185d3485b9",
      "item": {
        "type": "code",
        "id": "d94f00185d3485b9",
        "text": "Contract>>versionAt: aDate\n ^self versions detect: [:each | aPerspective > each date] "
      },
      "date": 1654611770336
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it detects with greater than or equal to (`>=`), instead of just greater than (`>`) [https://github.com/RalfBarkow/time-travel-project/commit/bdbb6e959a1b6faf1d68c9e5c742bfde85085d9b commit] – now we can implement `Contract>>versionAt:` : "
      },
      "date": 1654611935790
    },
    {
      "type": "edit",
      "id": "42b8a50feb3fcbf8",
      "item": {
        "type": "paragraph",
        "id": "42b8a50feb3fcbf8",
        "text": "We implement the two visible methods in [[Contract]] – `#versionAt:put:` and `#versionAt:`. (In some cases you will want to make a Safe Copy of the [[Version]] before you store it, but we are just careful not to modify a Version after we have stored it in a [[History]].)\n"
      },
      "date": 1654611995443
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versions` method so that it detects with greater than or equal to (`>=`), instead of just greater than (`>`)  – now we can implement `Contract>>versionAt:` [https://github.com/RalfBarkow/time-travel-project/commit/bdbb6e959a1b6faf1d68c9e5c742bfde85085d9b commit]: "
      },
      "date": 1654612077578
    },
    {
      "id": "d94f00185d3485b9",
      "type": "move",
      "order": [
        "42b8a50feb3fcbf8",
        "b3ff51464ae04dea",
        "9ead1c7ea29cffec",
        "b7f4f7fe8936e217",
        "4537bbaf531a2127",
        "d96e5e67125b0656",
        "fa6d6ac70b44dd7d",
        "8b60196337be9fca",
        "77b6839a8e1fe254",
        "6f9a1605e509b363",
        "d94f00185d3485b9"
      ],
      "date": 1654612194290
    },
    {
      "item": {
        "type": "factory",
        "id": "22702d9a118aebca"
      },
      "id": "22702d9a118aebca",
      "type": "add",
      "after": "d94f00185d3485b9",
      "date": 1654612286187
    },
    {
      "type": "edit",
      "id": "22702d9a118aebca",
      "item": {
        "type": "paragraph",
        "id": "22702d9a118aebca",
        "text": "⇒ [[Perspective]]"
      },
      "date": 1654612309099
    },
    {
      "type": "edit",
      "id": "42b8a50feb3fcbf8",
      "item": {
        "type": "markdown",
        "id": "42b8a50feb3fcbf8",
        "text": "We implement the two visible methods in [[Contract]] – `#versionAt:put:` and `#versionAt:`. (In some cases you will want to make a Safe Copy of the [[Version]] before you store it, but we are just careful not to modify a Version after we have stored it in a [[History]].)\n"
      },
      "date": 1654612321105
    },
    {
      "type": "edit",
      "id": "d96e5e67125b0656",
      "item": {
        "type": "paragraph",
        "id": "d96e5e67125b0656",
        "text": "\"The instance variable “versions” will be lazily initialized to a SortedCollection of Versions. \"\n\t"
      },
      "date": 1654634525549
    },
    {
      "type": "add",
      "id": "1cd7d52ec338ad50",
      "item": {
        "type": "paragraph",
        "id": "1cd7d52ec338ad50",
        "text": "⇒ [[Sort Block]]"
      },
      "after": "d96e5e67125b0656",
      "date": 1654634526649
    },
    {
      "type": "edit",
      "id": "d96e5e67125b0656",
      "item": {
        "type": "paragraph",
        "id": "d96e5e67125b0656",
        "text": "I am still not quite clear what \"The instance variable “versions” will be lazily initialized to a SortedCollection of Versions.\" means. \n\t"
      },
      "date": 1654634584644
    },
    {
      "type": "edit",
      "id": "d96e5e67125b0656",
      "item": {
        "type": "paragraph",
        "id": "d96e5e67125b0656",
        "text": "I am still not quite clear what "
      },
      "date": 1654634593174
    },
    {
      "type": "add",
      "id": "eb6a6ec718ed0ca4",
      "item": {
        "type": "paragraph",
        "id": "eb6a6ec718ed0ca4",
        "text": "> \"The instance variable “versions” will be lazily initialized to a SortedCollection of Versions.\" "
      },
      "after": "d96e5e67125b0656",
      "date": 1654634596136
    },
    {
      "type": "add",
      "id": "ce77a593b648906b",
      "item": {
        "type": "paragraph",
        "id": "ce77a593b648906b",
        "text": "means. \n\t"
      },
      "after": "eb6a6ec718ed0ca4",
      "date": 1654634596949
    },
    {
      "type": "edit",
      "id": "eb6a6ec718ed0ca4",
      "item": {
        "type": "markdown",
        "id": "eb6a6ec718ed0ca4",
        "text": "> \"The instance variable “versions” will be lazily initialized to a SortedCollection of Versions.\" "
      },
      "date": 1654634598183
    },
    {
      "type": "edit",
      "id": "4537bbaf531a2127",
      "item": {
        "type": "code",
        "id": "4537bbaf531a2127",
        "text": "Contract>>versions\n \"The instance variable “versions” will be lazily initialized to a SortedCollection of Versions. \"\n versions isNil ifTrue: [versions := SortedCollection sortBlock: [:a :b | a date > b date]].\n ^versions"
      },
      "date": 1654634670909
    },
    {
      "id": "b7f4f7fe8936e217",
      "type": "move",
      "order": [
        "42b8a50feb3fcbf8",
        "b3ff51464ae04dea",
        "9ead1c7ea29cffec",
        "4537bbaf531a2127",
        "d96e5e67125b0656",
        "b7f4f7fe8936e217",
        "eb6a6ec718ed0ca4",
        "ce77a593b648906b",
        "1cd7d52ec338ad50",
        "fa6d6ac70b44dd7d",
        "8b60196337be9fca",
        "77b6839a8e1fe254",
        "6f9a1605e509b363",
        "d94f00185d3485b9",
        "22702d9a118aebca"
      ],
      "date": 1654634757329
    },
    {
      "type": "remove",
      "id": "b7f4f7fe8936e217",
      "date": 1654634766908
    },
    {
      "type": "edit",
      "id": "eb6a6ec718ed0ca4",
      "item": {
        "type": "markdown",
        "id": "eb6a6ec718ed0ca4",
        "text": "> The instance variable “versions” will be lazily initialized to a [[SortedCollection]] of [[Versions]]."
      },
      "date": 1654634771603
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versionsAt:` method so that it detects with greater than or equal to (`>=`), instead of just greater than (`>`)  – now we can implement `Contract>>versionAt:` [https://github.com/RalfBarkow/time-travel-project/commit/bdbb6e959a1b6faf1d68c9e5c742bfde85085d9b commit]: "
      },
      "date": 1654634849414
    },
    {
      "type": "edit",
      "id": "8b60196337be9fca",
      "item": {
        "type": "markdown",
        "id": "8b60196337be9fca",
        "text": "**Note**: 2 elements! ⇒ [[testPayToday]]: But in the context of this test case we are dealing with only 1 version. We change the `versionsAt:` method so that it detects with greater than or equal to (`>=`), instead of just greater than (`>`)  – now we have implemented `Contract>>versionAt:` [https://github.com/RalfBarkow/time-travel-project/commit/bdbb6e959a1b6faf1d68c9e5c742bfde85085d9b commit]: "
      },
      "date": 1654634896615
    }
  ]
}