{
  "title": "BEAMs of Insight",
  "story": [
    {
      "type": "paragraph",
      "id": "348f8068e520cab4",
      "text": "A small collection of links to wisdom from Erlang and Elixir communities. We have become a fan of these languages by paying attention to insightful thinking their native speakers have shared in English prose. Notable contributers we've collected include Fred Hébert and Joe Armstrong."
    },
    {
      "type": "paragraph",
      "id": "dfbc21bd66243e19",
      "text": "[[Spawn or Not]]—separate concerns of code structure from runtime structure: in Elixir, functions for code, processes for runtime"
    },
    {
      "type": "paragraph",
      "id": "4686409456c58b07",
      "text": "[[Crash-Restart Patterns]]—roll back to a known stable state"
    },
    {
      "type": "paragraph",
      "id": "af81af521d7e4f54",
      "text": "[[Tips from Erlang]]—model places where failure should be acceptable; push failure modes towards clearly defined recoveries; gradually expand recoveries to handle other specific failure modes."
    },
    {
      "type": "paragraph",
      "id": "4838c32bec296ee3",
      "text": "[[You Reap What You Code]]—many, many thoughts tying resilience engineering, mental models, observability, operable code, and more."
    },
    {
      "type": "paragraph",
      "id": "9e956857989db049",
      "text": "[[Pipeline Made of Airbags]]—erlang hot code loading as a deploy pipeline compared to the containerized norms."
    },
    {
      "type": "paragraph",
      "id": "4f9afddf73b93db2",
      "text": "[[Complexity in One Computer]]—Joe Armstrong presented The Mess We're In at Strange Loop 2014."
    },
    {
      "type": "paragraph",
      "id": "efbd0feec009daa6",
      "text": "[[Tiddly Meets Erlang]]—intertwingled & all-in-oneness"
    },
    {
      "type": "paragraph",
      "id": "e473c8b39efb5c9f",
      "text": "[[Let it Fail]]—good advice for anyone writing high-volume, non-stop applications"
    },
    {
      "type": "paragraph",
      "id": "4cd64763f2d4d1f9",
      "text": "[[Actors and Objects]]—a collection of connections starting with Alan Kay's thoughts relationship between Actor model and OOP"
    },
    {
      "type": "pagefold",
      "id": "177f134296209c92",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "f4f18342e81162bf",
      "text": "These thoughts may move to their own pages of language fandom, but can live here for now."
    },
    {
      "type": "paragraph",
      "id": "851bd24b12a0352a",
      "text": "One of the best programmers I have worked with never draws class diagrams when object modeling at a whiteboard.  He always draws object instances."
    },
    {
      "type": "paragraph",
      "id": "8cb85cf833fb1e99",
      "text": "His mental model, what he chooses to communicate to others with at the white board with [[Boxes and Arrows]] is what is happening at runtime."
    },
    {
      "type": "paragraph",
      "id": "3f94793848d955c7",
      "text": "Sandi Metz draws sequence diagrams.  She draws attention to how messages flow between object instances at runtime; using a diagram organized around the passage of time."
    },
    {
      "type": "paragraph",
      "id": "6227a33abd6e8fce",
      "text": "See also [[xkcd 1883 supervillain plan]] for other thoughts about time."
    },
    {
      "type": "paragraph",
      "id": "6ee802d0be423405",
      "text": "We are reminded of advice from LISP: use macros only when nothing else will do; reach first for simple functions."
    },
    {
      "type": "paragraph",
      "id": "6b7b471f28fb75a7",
      "text": "We have heard both LISP and Smalltalk developers brag about modifying code at runtime. Non-LISP and non-Smalltalk devs react in horror at the very idea."
    },
    {
      "type": "paragraph",
      "id": "eae5dd2787a325ec",
      "text": "Runtime is when software is delighting or frustrating its customers.  It is essential for us to learn how to think about what happens at runtime."
    },
    {
      "type": "paragraph",
      "id": "83ac5b4ea9838d32",
      "text": "See also [[Visualizing Concurrency in Go]]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "BEAMs of Insight",
        "story": []
      },
      "date": 1610221648771
    },
    {
      "item": {
        "type": "factory",
        "id": "348f8068e520cab4"
      },
      "id": "348f8068e520cab4",
      "type": "add",
      "date": 1610221651272
    },
    {
      "type": "edit",
      "id": "348f8068e520cab4",
      "item": {
        "type": "paragraph",
        "id": "348f8068e520cab4",
        "text": "A small collection of links to wisdom from Erlang and Elixir communities. We have become a fan of these languages by paying attention to insightful thinking their native speakers have shared in English prose. Notable contributers we've collected include Fred Hébert and Joe Armstrong."
      },
      "date": 1610221979743
    },
    {
      "type": "add",
      "id": "efbd0feec009daa6",
      "item": {
        "type": "paragraph",
        "id": "efbd0feec009daa6",
        "text": "[[Tiddly Meets Erlang]]"
      },
      "after": "348f8068e520cab4",
      "date": 1610222860464
    },
    {
      "type": "add",
      "id": "e473c8b39efb5c9f",
      "item": {
        "type": "paragraph",
        "id": "e473c8b39efb5c9f",
        "text": "[[Let it Fail]]"
      },
      "after": "efbd0feec009daa6",
      "date": 1610222878372
    },
    {
      "type": "edit",
      "id": "efbd0feec009daa6",
      "item": {
        "type": "paragraph",
        "id": "efbd0feec009daa6",
        "text": "[[Tiddly Meets Erlang]]—intertwingled & all-in-oneness"
      },
      "date": 1610222902628
    },
    {
      "type": "edit",
      "id": "e473c8b39efb5c9f",
      "item": {
        "type": "paragraph",
        "id": "e473c8b39efb5c9f",
        "text": "[[Let it Fail]]—good advice for anyone writing high-volume, non-stop applications\n\n"
      },
      "date": 1610222968394
    },
    {
      "type": "edit",
      "id": "e473c8b39efb5c9f",
      "item": {
        "type": "paragraph",
        "id": "e473c8b39efb5c9f",
        "text": "[[Let it Fail]]—good advice for anyone writing high-volume, non-stop applications"
      },
      "date": 1610222986045
    },
    {
      "type": "add",
      "id": "dfbc21bd66243e19",
      "item": {
        "type": "paragraph",
        "id": "dfbc21bd66243e19",
        "text": "[[Spawn or Not]]—separate concerns of code structure from runtime structure: in Elixir, functions for code, processes for runtime"
      },
      "after": "e473c8b39efb5c9f",
      "date": 1610223048169
    },
    {
      "type": "add",
      "id": "4838c32bec296ee3",
      "item": {
        "type": "paragraph",
        "id": "4838c32bec296ee3",
        "text": "[[You Reap What You Code]]"
      },
      "after": "dfbc21bd66243e19",
      "date": 1610223074743
    },
    {
      "type": "add",
      "id": "9e956857989db049",
      "item": {
        "type": "paragraph",
        "id": "9e956857989db049",
        "text": "[[Pipeline Made of Airbags]]—erlang hot code loading as a deploy pipeline compared to the containerized norms."
      },
      "after": "4838c32bec296ee3",
      "date": 1610238159737
    },
    {
      "item": {
        "type": "factory",
        "id": "177f134296209c92"
      },
      "id": "177f134296209c92",
      "type": "add",
      "after": "9e956857989db049",
      "date": 1610238217604
    },
    {
      "type": "edit",
      "id": "177f134296209c92",
      "item": {
        "type": "pagefold",
        "id": "177f134296209c92",
        "text": "."
      },
      "date": 1610238221430
    },
    {
      "id": "f4f18342e81162bf",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "f4f18342e81162bf",
        "text": "One of the best programmers I have worked with never draws class diagrams when object modeling at a whiteboard.  He always draws object _instances_.  His mental model, what he chooses to communicate to others with at the white board with [[Boxes and Arrows]] is what is happening at runtime.\n"
      },
      "after": "177f134296209c92",
      "date": 1610238228961
    },
    {
      "id": "3f94793848d955c7",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "3f94793848d955c7",
        "text": "Similarly, Sandi Metz draws sequence diagrams... also drawing attention to how messages flow between object _instances_ at runtime; using a diagram organized around the passage of time."
      },
      "after": "f4f18342e81162bf",
      "date": 1610238233053
    },
    {
      "id": "6227a33abd6e8fce",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6227a33abd6e8fce",
        "text": "See also [[xkcd 1883 supervillain plan]] for other thoughts about time."
      },
      "after": "f4f18342e81162bf",
      "date": 1610238243087
    },
    {
      "id": "6227a33abd6e8fce",
      "type": "move",
      "order": [
        "348f8068e520cab4",
        "efbd0feec009daa6",
        "e473c8b39efb5c9f",
        "dfbc21bd66243e19",
        "4838c32bec296ee3",
        "9e956857989db049",
        "177f134296209c92",
        "f4f18342e81162bf",
        "3f94793848d955c7",
        "6227a33abd6e8fce"
      ],
      "date": 1610238247637
    },
    {
      "id": "6ee802d0be423405",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6ee802d0be423405",
        "text": "I am reminded of advice from LISP: use macros only when nothing else will do; reach first for simple functions."
      },
      "after": "3f94793848d955c7",
      "date": 1610238253688
    },
    {
      "id": "6b7b471f28fb75a7",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6b7b471f28fb75a7",
        "text": "I am also reminded that I have heard both LISP and Smalltalk developers talk (or even brag) about modifying code at runtime.  I have seen non-LISP and non-Smalltalk devs react in horror at the very idea."
      },
      "after": "6ee802d0be423405",
      "date": 1610238257446
    },
    {
      "id": "eae5dd2787a325ec",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "eae5dd2787a325ec",
        "text": "Runtime is when software is delighting or frustrating its customers.  It is essential for us to learn how to think about what happens at runtime."
      },
      "after": "6b7b471f28fb75a7",
      "date": 1610238262306
    },
    {
      "id": "83ac5b4ea9838d32",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "83ac5b4ea9838d32",
        "text": "See also [[Visualizing Concurrency in Go]]."
      },
      "after": "eae5dd2787a325ec",
      "date": 1610238265128
    },
    {
      "type": "edit",
      "id": "f4f18342e81162bf",
      "item": {
        "type": "factory",
        "id": "f4f18342e81162bf",
        "text": "\nOne of the best programmers I have worked with never draws class diagrams when object modeling at a whiteboard.  He always draws object _instances_.  His mental model, what he chooses to communicate to others with at the white board with [[Boxes and Arrows]] is what is happening at runtime.\n"
      },
      "date": 1610238305575
    },
    {
      "type": "edit",
      "id": "f4f18342e81162bf",
      "item": {
        "type": "paragraph",
        "id": "f4f18342e81162bf",
        "text": "These thoughts may move to their own pages of language fandom, but can live here for now."
      },
      "date": 1610238329272
    },
    {
      "type": "add",
      "id": "851bd24b12a0352a",
      "item": {
        "type": "paragraph",
        "id": "851bd24b12a0352a",
        "text": "One of the best programmers I have worked with never draws class diagrams when object modeling at a whiteboard.  He always draws object instances."
      },
      "after": "f4f18342e81162bf",
      "date": 1610238358970
    },
    {
      "type": "add",
      "id": "8cb85cf833fb1e99",
      "item": {
        "type": "paragraph",
        "id": "8cb85cf833fb1e99",
        "text": "His mental model, what he chooses to communicate to others with at the white board with [[Boxes and Arrows]] is what is happening at runtime."
      },
      "after": "851bd24b12a0352a",
      "date": 1610238373793
    },
    {
      "type": "edit",
      "id": "3f94793848d955c7",
      "item": {
        "type": "factory",
        "id": "3f94793848d955c7",
        "text": "Sandi Metz draws sequence diagrams... also drawing attention to how messages flow between object instances at runtime; using a diagram organized around the passage of time."
      },
      "date": 1610238387642
    },
    {
      "type": "edit",
      "id": "3f94793848d955c7",
      "item": {
        "type": "paragraph",
        "id": "3f94793848d955c7",
        "text": "Sandi Metz draws sequence diagrams.  She draws attention to how messages flow between object instances at runtime; using a diagram organized around the passage of time."
      },
      "date": 1610238465185
    },
    {
      "id": "6227a33abd6e8fce",
      "type": "move",
      "order": [
        "348f8068e520cab4",
        "efbd0feec009daa6",
        "e473c8b39efb5c9f",
        "dfbc21bd66243e19",
        "4838c32bec296ee3",
        "9e956857989db049",
        "177f134296209c92",
        "f4f18342e81162bf",
        "851bd24b12a0352a",
        "8cb85cf833fb1e99",
        "3f94793848d955c7",
        "6227a33abd6e8fce",
        "6ee802d0be423405",
        "6b7b471f28fb75a7",
        "eae5dd2787a325ec",
        "83ac5b4ea9838d32"
      ],
      "date": 1610238474422
    },
    {
      "type": "edit",
      "id": "6ee802d0be423405",
      "item": {
        "type": "paragraph",
        "id": "6ee802d0be423405",
        "text": "We are reminded of advice from LISP: use macros only when nothing else will do; reach first for simple functions."
      },
      "date": 1610238488759
    },
    {
      "type": "edit",
      "id": "6b7b471f28fb75a7",
      "item": {
        "type": "paragraph",
        "id": "6b7b471f28fb75a7",
        "text": "We have heard both LISP and Smalltalk developers brag about modifying code at runtime. Non-LISP and non-Smalltalk devs react in horror at the very idea."
      },
      "date": 1610238524131
    },
    {
      "type": "edit",
      "id": "4838c32bec296ee3",
      "item": {
        "type": "paragraph",
        "id": "4838c32bec296ee3",
        "text": "[[You Reap What You Code]]—many, many thoughts tying resilience engineering, mental models, observability, operable code, and more."
      },
      "date": 1610238595330
    },
    {
      "id": "dfbc21bd66243e19",
      "type": "move",
      "order": [
        "348f8068e520cab4",
        "dfbc21bd66243e19",
        "efbd0feec009daa6",
        "e473c8b39efb5c9f",
        "4838c32bec296ee3",
        "9e956857989db049",
        "177f134296209c92",
        "f4f18342e81162bf",
        "851bd24b12a0352a",
        "8cb85cf833fb1e99",
        "3f94793848d955c7",
        "6227a33abd6e8fce",
        "6ee802d0be423405",
        "6b7b471f28fb75a7",
        "eae5dd2787a325ec",
        "83ac5b4ea9838d32"
      ],
      "date": 1610239040282
    },
    {
      "id": "4838c32bec296ee3",
      "type": "move",
      "order": [
        "348f8068e520cab4",
        "dfbc21bd66243e19",
        "4838c32bec296ee3",
        "efbd0feec009daa6",
        "e473c8b39efb5c9f",
        "9e956857989db049",
        "177f134296209c92",
        "f4f18342e81162bf",
        "851bd24b12a0352a",
        "8cb85cf833fb1e99",
        "3f94793848d955c7",
        "6227a33abd6e8fce",
        "6ee802d0be423405",
        "6b7b471f28fb75a7",
        "eae5dd2787a325ec",
        "83ac5b4ea9838d32"
      ],
      "date": 1610239043244
    },
    {
      "id": "9e956857989db049",
      "type": "move",
      "order": [
        "348f8068e520cab4",
        "dfbc21bd66243e19",
        "4838c32bec296ee3",
        "9e956857989db049",
        "efbd0feec009daa6",
        "e473c8b39efb5c9f",
        "177f134296209c92",
        "f4f18342e81162bf",
        "851bd24b12a0352a",
        "8cb85cf833fb1e99",
        "3f94793848d955c7",
        "6227a33abd6e8fce",
        "6ee802d0be423405",
        "6b7b471f28fb75a7",
        "eae5dd2787a325ec",
        "83ac5b4ea9838d32"
      ],
      "date": 1610239045867
    },
    {
      "type": "add",
      "id": "4f9afddf73b93db2",
      "item": {
        "type": "paragraph",
        "id": "4f9afddf73b93db2",
        "text": "[[Complexity in One Computer]]—Joe Armstrong presented The Mess We're In at Strange Loop 2014."
      },
      "after": "9e956857989db049",
      "date": 1610239099273
    },
    {
      "type": "add",
      "id": "4cd64763f2d4d1f9",
      "item": {
        "type": "paragraph",
        "id": "4cd64763f2d4d1f9",
        "text": "[[Actors and Objects]]—a collection of connections starting with Alan Kay's thoughts relationship between Actor model and OOP"
      },
      "after": "e473c8b39efb5c9f",
      "date": 1611075353062
    },
    {
      "type": "add",
      "id": "4686409456c58b07",
      "item": {
        "type": "paragraph",
        "id": "4686409456c58b07",
        "text": "[[Crash-Restart Patterns]]"
      },
      "after": "dfbc21bd66243e19",
      "date": 1611429115773
    },
    {
      "type": "edit",
      "id": "4686409456c58b07",
      "item": {
        "type": "paragraph",
        "id": "4686409456c58b07",
        "text": "[[Crash-Restart Patterns]]—roll back to a known stable state"
      },
      "date": 1611429141165
    },
    {
      "type": "add",
      "id": "af81af521d7e4f54",
      "item": {
        "type": "paragraph",
        "id": "af81af521d7e4f54",
        "text": "[[Tips from Erlang]]"
      },
      "after": "4686409456c58b07",
      "date": 1611429208655
    },
    {
      "type": "edit",
      "id": "af81af521d7e4f54",
      "item": {
        "type": "paragraph",
        "id": "af81af521d7e4f54",
        "text": "[[Tips from Erlang]]—model places where failure should be acceptable; push failure modes towards clearly defined recoveries; gradually expand recoveries to handle other specific failure modes."
      },
      "date": 1611429359499
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1651125782174
    }
  ]
}