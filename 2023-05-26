{
  "title": "2023-05-26",
  "story": [
    {
      "type": "paragraph",
      "id": "cbd98d497bdd9981",
      "text": "⇒ [[Willem Van den Ende]] ⇒ [[Punishment Reformation]] ⇒ [[Oddly Influenced]]: Foucault, /Discipline and Punish/, and voluntary panopticism, part 1–3 [https://podcast.oddly-influenced.dev/episodes/foucault-and-voluntary-panopticism page], [https://podcast.oddly-influenced.dev/episodes/foucault-discipline-and-punish-part-2-the-factory page], [https://podcast.oddly-influenced.dev/episodes/foucault-discipline-and-punish-part-3-expertise-and-panopticism page]"
    },
    {
      "type": "html",
      "id": "aaedeaff7b6b7fad",
      "text": "<img\n  src=\"\"\n  width=\"100%\"\n>"
    },
    {
      "type": "image",
      "id": "18e4dd31faec7b6a",
      "text": "Who Have You Paired With? [https://images.transistor.fm/file/transistor/images/episode/1314827/medium_1683840504-artwork.jpg jpg]",
      "size": "wide",
      "width": 430,
      "height": 430,
      "url": "/assets/plugins/image/4e3083d2ae18aec6aaebdf940f44c6ec.jpg"
    },
    {
      "type": "paragraph",
      "id": "2021695515a03761",
      "text": "Does [[Pair Programming]] with the chat thing make it a diagonal line?"
    },
    {
      "type": "pagefold",
      "id": "f2e8d51d2a5800bb",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c703965116e46901",
      "text": "⇒ [[At The Edge]]: Logging In"
    },
    {
      "type": "code",
      "id": "b5b05f90d196441e",
      "text": " cd ~/Projects/RalfBarkow/vite-elm-dojo/"
    },
    {
      "type": "paragraph",
      "id": "0f3836e2f694624a",
      "text": "1. Copy code"
    },
    {
      "type": "paragraph",
      "id": "0b51e1367e90a90e",
      "text": "2. 'Reply' with Compiler Error messages:"
    },
    {
      "type": "code",
      "id": "831bb1e2bb2cdc41",
      "text": "Compilation failed\nCompiling ...-- UNFINISHED IF -------------------------------------------------- src/Main.elm\n\nI was expecting to see more of this `if` expression, but I got stuck here:\n\n60|     if String.isEmpty username || String.isEmpty password then\n61|         Err \"Username and password are required fields.\"\n62| \n63|     else if username == \"admin\" && password\n                                               ^\nI was expecting to see the then keyword next.\n\nNote: I can be confused by indentation. Maybe something is not indented enough?\n\n\nDetected problems in 1 module."
    },
    {
      "type": "paragraph",
      "id": "98871af622d0c33c",
      "text": "3. Try compiling the updated code"
    },
    {
      "type": "paragraph",
      "id": "0f17da271e251bb4",
      "text": "⇒ [[Elm and AI]] ⇒ [[Prompt Engineering]]"
    },
    {
      "type": "markdown",
      "id": "7444af527ee6e7dd",
      "text": "> [00:12:32]\nIt will hallucinate certain variants because the process through which it is arriving at these suggestions does not involve understanding the types of the program like the compiler does."
    },
    {
      "type": "paragraph",
      "id": "58111ec878b701e6",
      "text": "Does the compiler [[understand]] the types of the program?"
    },
    {
      "type": "reference",
      "id": "3a6b4c9b6fb0adbb",
      "site": "wiki.ralfbarkow.ch",
      "slug": "exploratory-parsing",
      "title": "Exploratory Parsing",
      "text": "A parser reads text to discover structure and meaning. For example, a C language parser can read a C program and understand in a real sense everything that the program has to say. Contrast this to a pattern matcher..."
    },
    {
      "type": "paragraph",
      "id": "3e27b85168cdbef1",
      "text": "See AboutUs Getting Started blog post announcing the open-sourcing of this technology. [https://github.com/WardCunningham/devblog/blob/master/_posts/2011-07-03-getting-started-exploratory-parsing.markdown github]"
    },
    {
      "type": "paragraph",
      "id": "f9b3ad10dbd44c0a",
      "text": "A [[Parser]] reads text to discover structure and meaning. For example, a C language parser can read a C program and understand in a real sense everything that the program has to say. Contrast this to a pattern matcher, such as regular-expression matching, which can find fragments of a program useful in editing but can't keep track of enough context to make sense of a whole program.\n\nWe often use the unix grep utility to look through large files. By applying a regular-expression match to each line, grep is able to report just the lines of interest. When we allow ourselves to grep repeatedly, driven by our curiosity, responding to each answer grep provides with another question, when we do this we are exploring.\n\nThe internet is full of text that defies understanding in any sense with simple pattern matching. In response AboutUs built an environment for exploring the internet interactively, using parsers constructed on a whim, returning matches in within the context described by the explorer."
    },
    {
      "type": "paragraph",
      "id": "babab31526371c03",
      "text": "Note: Replace grep with the chat thing? ⇒ [[Geoffrey Hinton]] ⇒ [[Back Propagation]]"
    },
    {
      "type": "paragraph",
      "id": "be563a4b86927dbf",
      "text": "See also [[Java Wiki Content Fetcher]], [https://github.com/jasonrclark/fedwiki-java/issues/1 github], [https://github.com/jasonrclark/fedwiki-java/blob/0a5702c2a842341679a6207122516e1f86598e38/Main.java#L87-L99 Main.java#L87-L99]:"
    },
    {
      "type": "code",
      "id": "5cfbc84be482ec6d",
      "text": "public List<String> links() {\n      var matcher = linkPattern.matcher(text);\n      if (matcher.find()) {\n        var slug = matcher.group(1)\n          .replaceAll(\"\\\\s\", \"-\")\n          .replaceAll(\"[^A-Za-z0-9-]\", \"\")\n          .toLowerCase(Locale.getDefault());\n        return List.of(slug);\n      }\n      return List.of();\n    }"
    },
    {
      "type": "paragraph",
      "id": "33d7a71aaebf89dd",
      "text": "We anticipate a command line tool that can usefully browse the wiki federation. To this end we will create Java mechanisms that duplicate in the simplest way possible the current [[Single-Page Application]]. This will demonstrate that our collaborative hypertext is not irrevocably dependent on javascript or the browser."
    },
    {
      "type": "pagefold",
      "id": "48b9c3e2e406a40e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5bb6cf2b0fcfd10b",
      "text": "⇒ [[Brian Marick]] … I mean, it’s weird. Being saved depends on faith alone (an internal quality), *but* we have to work these faith-less people hard so that they might become the kind of people who are saved? [https://social.oddly-influenced.dev/@marick/110432039551914719 post]\n\nThis may be a sign of an inconsistency in their thinking, as it was put into practice?"
    },
    {
      "type": "paragraph",
      "id": "7667881deae91d35",
      "text": "⇒ [[Ralf Barkow]] ⇒ [[Brian Marick]]: In order to deal with \"these faith-less people,\" society has invented the concept of the person, which makes the future predictable. You should be the same person tomorrow. That this has to do with religion seems plausible. And guilt probably arose in this context. Gift and counter-gift create order and limit the future possibilities of people. [https://fosstodon.org/@rgb/110434219946455099 post]"
    },
    {
      "type": "pagefold",
      "id": "ace79f1b9f509e7d",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "1b975d800645d28e",
      "text": "Spencer-Browns distinction ist eine sich entziehende, bis zum Widerruf des Wiedereintritts aufschiebende différance im Sinne von Jacques Derrida (2004a)."
    },
    {
      "type": "paragraph",
      "id": "be592158f5fb0c4a",
      "text": "PLENER, Peter, WERBER, Niels and WOLF, Burkhardt (eds.), 2021. Das Formular. Berlin, Heidelberg: Springer. AdminiStudies. Formen und Medien der Verwaltung. ISBN 978-3-662-64083-8, p. 7N5."
    },
    {
      "type": "paragraph",
      "id": "3fa7f59ac5a88624",
      "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers. [https://package.elm-lang.org/packages/elm/http/2.0.0/ elm-lang], [https://guide.elm-lang.org/effects/http.html page] ⇒ Unused pattern variable request [https://github.com/RalfBarkow/vite-elm-app/commit/231e55301dbfc18a60d9436f0aac757ab5eb10e2 commit] "
    },
    {
      "type": "paragraph",
      "id": "2fd02a1432beedf5",
      "text": "Replace with your server URL"
    },
    {
      "type": "paragraph",
      "id": "2124feed51f071de",
      "text": "⇒ [[Forms]]"
    },
    {
      "type": "reference",
      "id": "8ea8d5b1eb7206d1",
      "site": "ward.asia.wiki.org",
      "slug": "sites-for-friends",
      "title": "Sites for Friends",
      "text": "We consider how we might provide just sufficient security for a small community of friends to form quickly, enjoy ownership, invite others and recover from mistakes."
    },
    {
      "type": "reference",
      "id": "78ac0f9c5aeff9b4",
      "site": "ward.asia.wiki.org",
      "slug": "friendly-security",
      "title": "Friendly Security",
      "text": "We explore the new security plugin api of [[Wiki - 0.10.0]] through the creation of a 'friends' module suitable for farms were the server administrator knows and is available to help every site owner should they have login trouble."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-05-26",
        "story": []
      },
      "date": 1685079284470
    },
    {
      "item": {
        "type": "factory",
        "id": "cbd98d497bdd9981"
      },
      "id": "cbd98d497bdd9981",
      "type": "add",
      "date": 1685079285886
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "[[Willem Van den Ende]]: @marick @rgb @marcevers I learnt about the work of Dirck Coornhert in secondary school - he wrote about about punishment reformation in 1587 - all about incarceration and instilling a work ethic as mentioned in your podcast. \"The innovation of the tuchthuis, as first conceived by Dirck Coornhert and described in his Boeventucht (1587), was to add rehabilitation to deterrence [..]\" [https://www.dbnl.org/tekst/_zev001200001_01/_zev001200001_01_0011.php page]\nA clash of values: the survival of Utrecht's confraternities after the Reformation and the debate over their dissolution Benjamin J. Kaplan, De Zeventiende Eeuw. Jaargang 16 - DBNL \n\n"
      },
      "date": 1685079352019
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "[[Willem Van den Ende]]: @marick @rgb @marcevers I learnt about the work of Dirck Coornhert in secondary school - he wrote about about punishment reformation in 1587 - all about incarceration and instilling a work ethic as mentioned in your podcast. \"The innovation of the tuchthuis, as first conceived by Dirck Coornhert and described in his Boeventucht (1587), was to add rehabilitation to deterrence [..]\" [https://www.dbnl.org/tekst/_zev001200001_01/_zev001200001_01_0011.php page]\nA clash of values: the survival of Utrecht's confraternities after the Reformation and the debate over their dissolution Benjamin J. Kaplan, De Zeventiende Eeuw. Jaargang 16 - DBNL [https://mastodon.social/@mostalive/110430884767234150 post]\n\n"
      },
      "date": 1685079378210
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]]: @marick @rgb @marcevers I learnt about the work of Dirck Coornhert in secondary school - he wrote about about punishment reformation in 1587 - all about incarceration and instilling a work ethic as mentioned in your podcast. \"The innovation of the tuchthuis, as first conceived by Dirck Coornhert and described in his Boeventucht (1587), was to add rehabilitation to deterrence [..]\" [https://www.dbnl.org/tekst/_zev001200001_01/_zev001200001_01_0011.php page]\nA clash of values: the survival of Utrecht's confraternities after the Reformation and the debate over their dissolution Benjamin J. Kaplan, De Zeventiende Eeuw. Jaargang 16 - DBNL [https://mastodon.social/@mostalive/110430884767234150 post]\n\n"
      },
      "date": 1685079392575
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]]: @marick @rgb @marcevers I learnt about the work of [[Dirck Coornhert]] in secondary school - he wrote about about punishment reformation in 1587 - all about incarceration and instilling a work ethic as mentioned in your podcast. \"The innovation of the tuchthuis, as first conceived by Dirck Coornhert and described in his Boeventucht (1587), was to add rehabilitation to deterrence [..]\" [https://www.dbnl.org/tekst/_zev001200001_01/_zev001200001_01_0011.php page]\nA clash of values: the survival of Utrecht's confraternities after the Reformation and the debate over their dissolution Benjamin J. Kaplan, De Zeventiende Eeuw. Jaargang 16 - DBNL [https://mastodon.social/@mostalive/110430884767234150 post]\n\n"
      },
      "date": 1685079405124
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]]: @marick @rgb @marcevers I learnt about the work of [[Dirck Coornhert]] in secondary school – he wrote about about punishment reformation in 1587 – all about incarceration and instilling a work ethic as mentioned in your podcast. \"The innovation of the tuchthuis, as first conceived by Dirck Coornhert and described in his Boeventucht (1587), was to add rehabilitation to deterrence [..]\" [https://www.dbnl.org/tekst/_zev001200001_01/_zev001200001_01_0011.php page]\nA clash of values: the survival of Utrecht's confraternities after the Reformation and the debate over their dissolution Benjamin J. Kaplan, De Zeventiende Eeuw. Jaargang 16 - DBNL [https://mastodon.social/@mostalive/110430884767234150 post]\n\n"
      },
      "date": 1685079415739
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]]: @marick @rgb @marcevers I learnt about the work of [[Dirck Coornhert]] in secondary school – he wrote about […] punishment reformation in 1587 – all about incarceration and instilling a work ethic as mentioned in your podcast. \"The innovation of the tuchthuis, as first conceived by Dirck Coornhert and described in his Boeventucht (1587), was to add rehabilitation to deterrence [..]\" [https://www.dbnl.org/tekst/_zev001200001_01/_zev001200001_01_0011.php page]\nA clash of values: the survival of Utrecht's confraternities after the Reformation and the debate over their dissolution Benjamin J. Kaplan, De Zeventiende Eeuw. Jaargang 16 - DBNL [https://mastodon.social/@mostalive/110430884767234150 post]\n\n"
      },
      "date": 1685079440475
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]]: @marick @rgb @marcevers I learnt about the work of [[Dirck Coornhert]] in secondary school – he wrote about […] punishment reformation in 1587 – all about incarceration and instilling a work ethic as mentioned in your podcast. \"The innovation of the tuchthuis, as first conceived by Dirck Coornhert and described in his Boeventucht (1587), was to add rehabilitation to deterrence [..]\" [https://www.dbnl.org/tekst/_zev001200001_01/_zev001200001_01_0011.php page]\nA clash of values: the survival of Utrecht's confraternities after the Reformation and the debate over their dissolution Benjamin J. Kaplan, De Zeventiende Eeuw. Jaargang 16 - DBNL [https://mastodon.social/@mostalive/110430884767234150 post]\n"
      },
      "date": 1685079537023
    },
    {
      "type": "add",
      "id": "a47a7b513bba6d97",
      "item": {
        "type": "paragraph",
        "id": "a47a7b513bba6d97",
        "text": "[[punishment reformation"
      },
      "after": "cbd98d497bdd9981",
      "date": 1685079542675
    },
    {
      "type": "edit",
      "id": "a47a7b513bba6d97",
      "item": {
        "type": "paragraph",
        "id": "a47a7b513bba6d97",
        "text": "[[Punishment Reformation]]"
      },
      "date": 1685079556590
    },
    {
      "type": "edit",
      "id": "a47a7b513bba6d97",
      "item": {
        "type": "paragraph",
        "id": "a47a7b513bba6d97",
        "text": "⇒ [[Punishment Reformation]]"
      },
      "date": 1685079565795
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]]"
      },
      "date": 1685079585506
    },
    {
      "type": "remove",
      "id": "a47a7b513bba6d97",
      "date": 1685079589447
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]] ⇒ [[Punishment Reformation]]"
      },
      "date": 1685079590355
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]] ⇒ [[Punishment Reformation]] ⇒ [[Oddly Influenced]]"
      },
      "date": 1685079635638
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]] ⇒ [[Punishment Reformation]] ⇒ [[Oddly Influenced]]: Foucault, /Discipline and Punish/, and voluntary panopticism, part 1 ["
      },
      "date": 1685079682953
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]] ⇒ [[Punishment Reformation]] ⇒ [[Oddly Influenced]]: Foucault, /Discipline and Punish/, and voluntary panopticism, part 1–3 [https://podcast.oddly-influenced.dev/episodes/foucault-and-voluntary-panopticism page]"
      },
      "date": 1685079704141
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]] ⇒ [[Punishment Reformation]] ⇒ [[Oddly Influenced]]: Foucault, /Discipline and Punish/, and voluntary panopticism, part 1–3 [https://podcast.oddly-influenced.dev/episodes/foucault-and-voluntary-panopticism page], [https://podcast.oddly-influenced.dev/episodes/foucault-discipline-and-punish-part-2-the-factory page], [ page]"
      },
      "date": 1685079731011
    },
    {
      "type": "edit",
      "id": "cbd98d497bdd9981",
      "item": {
        "type": "paragraph",
        "id": "cbd98d497bdd9981",
        "text": "⇒ [[Willem Van den Ende]] ⇒ [[Punishment Reformation]] ⇒ [[Oddly Influenced]]: Foucault, /Discipline and Punish/, and voluntary panopticism, part 1–3 [https://podcast.oddly-influenced.dev/episodes/foucault-and-voluntary-panopticism page], [https://podcast.oddly-influenced.dev/episodes/foucault-discipline-and-punish-part-2-the-factory page], [https://podcast.oddly-influenced.dev/episodes/foucault-discipline-and-punish-part-3-expertise-and-panopticism page]"
      },
      "date": 1685079750696
    },
    {
      "item": {
        "type": "factory",
        "id": "aaedeaff7b6b7fad"
      },
      "id": "aaedeaff7b6b7fad",
      "type": "add",
      "after": "cbd98d497bdd9981",
      "date": 1685079777492
    },
    {
      "type": "edit",
      "id": "aaedeaff7b6b7fad",
      "item": {
        "type": "html",
        "id": "aaedeaff7b6b7fad",
        "text": "<img\n  src=\"https://images.transistor.fm/file/transistor/images/episode/1314827/medium_1683840504-artwork.jpg\"\n  width=\"100%\"\n>"
      },
      "date": 1685079803141
    },
    {
      "item": {
        "type": "factory",
        "id": "18e4dd31faec7b6a"
      },
      "id": "18e4dd31faec7b6a",
      "type": "add",
      "after": "aaedeaff7b6b7fad",
      "date": 1685079827280
    },
    {
      "type": "edit",
      "id": "18e4dd31faec7b6a",
      "item": {
        "type": "image",
        "id": "18e4dd31faec7b6a",
        "text": "Uploaded image",
        "size": "wide",
        "width": 430,
        "height": 430,
        "url": "/assets/plugins/image/4e3083d2ae18aec6aaebdf940f44c6ec.jpg"
      },
      "date": 1685079964721
    },
    {
      "type": "edit",
      "id": "18e4dd31faec7b6a",
      "item": {
        "type": "image",
        "id": "18e4dd31faec7b6a",
        "text": "Who Have You Paired With?",
        "size": "wide",
        "width": 430,
        "height": 430,
        "url": "/assets/plugins/image/4e3083d2ae18aec6aaebdf940f44c6ec.jpg"
      },
      "date": 1685079996298
    },
    {
      "type": "edit",
      "id": "aaedeaff7b6b7fad",
      "item": {
        "type": "html",
        "id": "aaedeaff7b6b7fad",
        "text": "<img\n  src=\"\"\n  width=\"100%\"\n>"
      },
      "date": 1685080005098
    },
    {
      "type": "edit",
      "id": "18e4dd31faec7b6a",
      "item": {
        "type": "image",
        "id": "18e4dd31faec7b6a",
        "text": "Who Have You Paired With? [https://images.transistor.fm/file/transistor/images/episode/1314827/medium_1683840504-artwork.jpg jpg]",
        "size": "wide",
        "width": 430,
        "height": 430,
        "url": "/assets/plugins/image/4e3083d2ae18aec6aaebdf940f44c6ec.jpg"
      },
      "date": 1685080027232
    },
    {
      "item": {
        "type": "factory",
        "id": "2021695515a03761"
      },
      "id": "2021695515a03761",
      "type": "add",
      "after": "18e4dd31faec7b6a",
      "date": 1685080055327
    },
    {
      "type": "edit",
      "id": "2021695515a03761",
      "item": {
        "type": "paragraph",
        "id": "2021695515a03761",
        "text": "[[Pair Programming]] with the chat thing makes this to a diagonal line."
      },
      "date": 1685080082506
    },
    {
      "type": "edit",
      "id": "2021695515a03761",
      "item": {
        "type": "paragraph",
        "id": "2021695515a03761",
        "text": "[[Pair Programming]] with the chat thing makes this a diagonal line."
      },
      "date": 1685080092977
    },
    {
      "type": "edit",
      "id": "2021695515a03761",
      "item": {
        "type": "paragraph",
        "id": "2021695515a03761",
        "text": "Does [[Pair Programming]] with the chat thing make it a diagonal line?"
      },
      "date": 1685080163306
    },
    {
      "item": {
        "type": "factory",
        "id": "f2e8d51d2a5800bb"
      },
      "id": "f2e8d51d2a5800bb",
      "type": "add",
      "after": "2021695515a03761",
      "date": 1685088176439
    },
    {
      "type": "edit",
      "id": "f2e8d51d2a5800bb",
      "item": {
        "type": "pagefold",
        "id": "f2e8d51d2a5800bb",
        "text": "~"
      },
      "date": 1685088179261
    },
    {
      "item": {
        "type": "factory",
        "id": "c703965116e46901"
      },
      "id": "c703965116e46901",
      "type": "add",
      "after": "f2e8d51d2a5800bb",
      "date": 1685088180763
    },
    {
      "type": "edit",
      "id": "c703965116e46901",
      "item": {
        "type": "paragraph",
        "id": "c703965116e46901",
        "text": "⇒ [[At The Edge]]"
      },
      "date": 1685088200500
    },
    {
      "item": {
        "type": "factory",
        "id": "698c2f7cdb2098fd"
      },
      "id": "698c2f7cdb2098fd",
      "type": "add",
      "after": "c703965116e46901",
      "date": 1685088555379
    },
    {
      "type": "remove",
      "id": "698c2f7cdb2098fd",
      "date": 1685088562536
    },
    {
      "item": {
        "type": "factory",
        "id": "831bb1e2bb2cdc41"
      },
      "id": "831bb1e2bb2cdc41",
      "type": "add",
      "after": "c703965116e46901",
      "date": 1685088564936
    },
    {
      "type": "edit",
      "id": "831bb1e2bb2cdc41",
      "item": {
        "type": "code",
        "id": "831bb1e2bb2cdc41",
        "text": "module Login exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\n\n-- MODEL\n\n\ntype alias Model =\n    { username : String\n    , password : String\n    , error : Maybe String\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { username = \"\"\n    , password = \"\"\n    , error = Nothing\n    }\n\n\n-- UPDATE\n\n\ntype Msg\n    = UsernameChanged String\n    | PasswordChanged String\n    | SubmitClicked\n    | FormSubmitted\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        UsernameChanged newUsername ->\n            { model | username = newUsername }\n\n        PasswordChanged newPassword ->\n            { model | password = newPassword }\n\n        SubmitClicked ->\n            case validateCredentials model.username model.password of\n                Ok _ ->\n                    { model | error = Nothing }\n\n                Err errMsg ->\n                    { model | error = Just errMsg }\n\n        FormSubmitted ->\n            { model | error = Nothing }\n\n\nvalidateCredentials : String -> String -> Result String ()\nvalidateCredentials username password =\n    if String.isEmpty username || String.isEmpty password then\n        Err \"Username and password are required fields.\"\n\n    else if username == \"admin\" && password == \"password\" then\n        Ok ()\n\n    else\n        Err \"Invalid username or password.\"\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    form [ onSubmit FormSubmitted ]\n        [ h1 [] [ text \"Login\" ]\n        , input [ placeholder \"Username\", value model.username, onInput UsernameChanged ] []\n        , input [ placeholder \"Password\", value model.password, onInput PasswordChanged, type_ \"password\" ] []\n        , button [ onClick SubmitClicked ] [ text \"Submit\" ]\n        , viewError model.error\n        ]\n\n\nviewError : Maybe String -> Html msg\nviewError maybeError =\n    case maybeError of\n        Just error ->\n            div [ style \"color\" \"red\" ] [ text error ]\n\n        Nothing ->\n            text \"\"\n\n\n-- MAIN\n\n\nmain =\n    Html.program\n        { init = initialModel\n        , update = update\n        , view = view\n        , subscriptions = \\_ -> Sub.none\n        }\n"
      },
      "date": 1685088566796
    },
    {
      "item": {
        "type": "factory",
        "id": "b5b05f90d196441e"
      },
      "id": "b5b05f90d196441e",
      "type": "add",
      "after": "831bb1e2bb2cdc41",
      "date": 1685088606059
    },
    {
      "type": "edit",
      "id": "b5b05f90d196441e",
      "item": {
        "type": "code",
        "id": "b5b05f90d196441e",
        "text": " cd ~/Projects/RalfBarkow/vite-elm-dojo/"
      },
      "date": 1685088607805
    },
    {
      "id": "b5b05f90d196441e",
      "type": "move",
      "order": [
        "cbd98d497bdd9981",
        "aaedeaff7b6b7fad",
        "18e4dd31faec7b6a",
        "2021695515a03761",
        "f2e8d51d2a5800bb",
        "c703965116e46901",
        "b5b05f90d196441e",
        "831bb1e2bb2cdc41"
      ],
      "date": 1685088617810
    },
    {
      "type": "edit",
      "id": "c703965116e46901",
      "item": {
        "type": "paragraph",
        "id": "c703965116e46901",
        "text": "⇒ [[At The Edge]]: Logging In"
      },
      "date": 1685088631120
    },
    {
      "type": "edit",
      "id": "831bb1e2bb2cdc41",
      "item": {
        "type": "code",
        "id": "831bb1e2bb2cdc41",
        "text": "Compilation failed\nCompiling ...-- UNFINISHED IF -------------------------------------------------- src/Main.elm\n\nI was expecting to see more of this `if` expression, but I got stuck here:\n\n60|     if String.isEmpty username || String.isEmpty password then\n61|         Err \"Username and password are required fields.\"\n62| \n63|     else if username == \"admin\" && password\n                                               ^\nI was expecting to see the then keyword next.\n\nNote: I can be confused by indentation. Maybe something is not indented enough?\n\n\nDetected problems in 1 module."
      },
      "date": 1685088874721
    },
    {
      "item": {
        "type": "factory",
        "id": "0f3836e2f694624a"
      },
      "id": "0f3836e2f694624a",
      "type": "add",
      "after": "831bb1e2bb2cdc41",
      "date": 1685088878524
    },
    {
      "id": "0f3836e2f694624a",
      "type": "move",
      "order": [
        "cbd98d497bdd9981",
        "aaedeaff7b6b7fad",
        "18e4dd31faec7b6a",
        "2021695515a03761",
        "f2e8d51d2a5800bb",
        "c703965116e46901",
        "b5b05f90d196441e",
        "0f3836e2f694624a",
        "831bb1e2bb2cdc41"
      ],
      "date": 1685088884276
    },
    {
      "type": "edit",
      "id": "0f3836e2f694624a",
      "item": {
        "type": "paragraph",
        "id": "0f3836e2f694624a",
        "text": "Copy "
      },
      "date": 1685088890240
    },
    {
      "type": "edit",
      "id": "0f3836e2f694624a",
      "item": {
        "type": "paragraph",
        "id": "0f3836e2f694624a",
        "text": "Copy code"
      },
      "date": 1685088902851
    },
    {
      "type": "add",
      "id": "0b51e1367e90a90e",
      "item": {
        "type": "paragraph",
        "id": "0b51e1367e90a90e",
        "text": "'Reply' with Compiler Error messages:"
      },
      "after": "0f3836e2f694624a",
      "date": 1685088939643
    },
    {
      "item": {
        "type": "factory",
        "id": "98871af622d0c33c"
      },
      "id": "98871af622d0c33c",
      "type": "add",
      "after": "831bb1e2bb2cdc41",
      "date": 1685089536221
    },
    {
      "type": "edit",
      "id": "98871af622d0c33c",
      "item": {
        "type": "paragraph",
        "id": "98871af622d0c33c",
        "text": "⇒ [[Elm and AI]]"
      },
      "date": 1685089551132
    },
    {
      "type": "edit",
      "id": "98871af622d0c33c",
      "item": {
        "type": "paragraph",
        "id": "98871af622d0c33c",
        "text": "⇒ [[Elm and AI]] ⇒ [[Prompt Engineering]]"
      },
      "date": 1685089595080
    },
    {
      "id": "7444af527ee6e7dd",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7444af527ee6e7dd",
        "text": "[00:12:32]\nIt will hallucinate certain variants because the process through which it is arriving at these suggestions does not involve understanding the types of the program like the compiler does."
      },
      "after": "98871af622d0c33c",
      "attribution": {
        "page": "Prompt Engineering"
      },
      "date": 1685089624206
    },
    {
      "type": "edit",
      "id": "7444af527ee6e7dd",
      "item": {
        "type": "paragraph",
        "id": "7444af527ee6e7dd",
        "text": "> [00:12:32]\nIt will hallucinate certain variants because the process through which it is arriving at these suggestions does not involve understanding the types of the program like the compiler does."
      },
      "date": 1685089630294
    },
    {
      "type": "edit",
      "id": "7444af527ee6e7dd",
      "item": {
        "type": "markdown",
        "id": "7444af527ee6e7dd",
        "text": "> [00:12:32]\nIt will hallucinate certain variants because the process through which it is arriving at these suggestions does not involve understanding the types of the program like the compiler does."
      },
      "date": 1685089631364
    },
    {
      "item": {
        "type": "factory",
        "id": "3a6b4c9b6fb0adbb"
      },
      "id": "3a6b4c9b6fb0adbb",
      "type": "add",
      "after": "7444af527ee6e7dd",
      "date": 1685089659136
    },
    {
      "type": "edit",
      "id": "3a6b4c9b6fb0adbb",
      "item": {
        "type": "reference",
        "id": "3a6b4c9b6fb0adbb",
        "site": "wiki.ralfbarkow.ch",
        "slug": "exploratory-parsing",
        "title": "Exploratory Parsing",
        "text": "A parser reads text to discover structure and meaning. For example, a C language parser can read a C program and understand in a real sense everything that the program has to say. Contrast this to a pattern matcher..."
      },
      "date": 1685089666231
    },
    {
      "item": {
        "type": "factory",
        "id": "58111ec878b701e6"
      },
      "id": "58111ec878b701e6",
      "type": "add",
      "after": "3a6b4c9b6fb0adbb",
      "date": 1685089765767
    },
    {
      "id": "58111ec878b701e6",
      "type": "move",
      "order": [
        "cbd98d497bdd9981",
        "aaedeaff7b6b7fad",
        "18e4dd31faec7b6a",
        "2021695515a03761",
        "f2e8d51d2a5800bb",
        "c703965116e46901",
        "b5b05f90d196441e",
        "0f3836e2f694624a",
        "0b51e1367e90a90e",
        "831bb1e2bb2cdc41",
        "98871af622d0c33c",
        "7444af527ee6e7dd",
        "58111ec878b701e6",
        "3a6b4c9b6fb0adbb"
      ],
      "date": 1685089767427
    },
    {
      "type": "edit",
      "id": "58111ec878b701e6",
      "item": {
        "type": "paragraph",
        "id": "58111ec878b701e6",
        "text": "Does the compiler understand the types of the program?"
      },
      "date": 1685089775565
    },
    {
      "type": "edit",
      "id": "58111ec878b701e6",
      "item": {
        "type": "paragraph",
        "id": "58111ec878b701e6",
        "text": "Does the compiler [[understand]] the types of the program?"
      },
      "date": 1685089797349
    },
    {
      "id": "3e27b85168cdbef1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3e27b85168cdbef1",
        "text": "See AboutUs Getting Started blog post announcing the open-sourcing of this technology. [https://github.com/WardCunningham/devblog/blob/master/_posts/2011-07-03-getting-started-exploratory-parsing.markdown github]"
      },
      "after": "3a6b4c9b6fb0adbb",
      "attribution": {
        "page": "Exploratory Parsing",
        "site": "code.fed.wiki.org"
      },
      "date": 1685089842935
    },
    {
      "item": {
        "type": "factory",
        "id": "f9b3ad10dbd44c0a"
      },
      "id": "f9b3ad10dbd44c0a",
      "type": "add",
      "after": "3e27b85168cdbef1",
      "date": 1685089878376
    },
    {
      "type": "edit",
      "id": "f9b3ad10dbd44c0a",
      "item": {
        "type": "paragraph",
        "id": "f9b3ad10dbd44c0a",
        "text": "A parser reads text to discover structure and meaning. For example, a C language parser can read a C program and understand in a real sense everything that the program has to say. Contrast this to a pattern matcher, such as regular-expression matching, which can find fragments of a program useful in editing but can't keep track of enough context to make sense of a whole program.\n\nWe often use the unix grep utility to look through large files. By applying a regular-expression match to each line, grep is able to report just the lines of interest. When we allow ourselves to grep repeatedly, driven by our curiosity, responding to each answer grep provides with another question, when we do this we are exploring.\n\nThe internet is full of text that defies understanding in any sense with simple pattern matching. In response AboutUs built an environment for exploring the internet interactively, using parsers constructed on a whim, returning matches in within the context described by the explorer."
      },
      "date": 1685089879739
    },
    {
      "item": {
        "type": "factory",
        "id": "babab31526371c03"
      },
      "id": "babab31526371c03",
      "type": "add",
      "after": "f9b3ad10dbd44c0a",
      "date": 1685089927263
    },
    {
      "type": "edit",
      "id": "babab31526371c03",
      "item": {
        "type": "paragraph",
        "id": "babab31526371c03",
        "text": "Note: Replace grep with the chat thing?"
      },
      "date": 1685089940421
    },
    {
      "type": "edit",
      "id": "f9b3ad10dbd44c0a",
      "item": {
        "type": "paragraph",
        "id": "f9b3ad10dbd44c0a",
        "text": "A [[Parser]] reads text to discover structure and meaning. For example, a C language parser can read a C program and understand in a real sense everything that the program has to say. Contrast this to a pattern matcher, such as regular-expression matching, which can find fragments of a program useful in editing but can't keep track of enough context to make sense of a whole program.\n\nWe often use the unix grep utility to look through large files. By applying a regular-expression match to each line, grep is able to report just the lines of interest. When we allow ourselves to grep repeatedly, driven by our curiosity, responding to each answer grep provides with another question, when we do this we are exploring.\n\nThe internet is full of text that defies understanding in any sense with simple pattern matching. In response AboutUs built an environment for exploring the internet interactively, using parsers constructed on a whim, returning matches in within the context described by the explorer."
      },
      "date": 1685089977648
    },
    {
      "type": "add",
      "id": "be563a4b86927dbf",
      "item": {
        "type": "paragraph",
        "id": "be563a4b86927dbf",
        "text": "See also [[Java Wiki Content Fetcher]]"
      },
      "after": "babab31526371c03",
      "date": 1685090029360
    },
    {
      "item": {
        "type": "factory",
        "id": "5cfbc84be482ec6d"
      },
      "id": "5cfbc84be482ec6d",
      "type": "add",
      "after": "be563a4b86927dbf",
      "date": 1685090337208
    },
    {
      "type": "edit",
      "id": "5cfbc84be482ec6d",
      "item": {
        "type": "code",
        "id": "5cfbc84be482ec6d",
        "text": "public List<String> links() {\n      var matcher = linkPattern.matcher(text);\n      if (matcher.find()) {\n        var slug = matcher.group(1)\n          .replaceAll(\"\\\\s\", \"-\")\n          .replaceAll(\"[^A-Za-z0-9-]\", \"\")\n          .toLowerCase(Locale.getDefault());\n        return List.of(slug);\n      }\n      return List.of();\n    }"
      },
      "date": 1685090339364
    },
    {
      "type": "edit",
      "id": "be563a4b86927dbf",
      "item": {
        "type": "paragraph",
        "id": "be563a4b86927dbf",
        "text": "See also [[Java Wiki Content Fetcher]], Basic read and follow link loop: "
      },
      "date": 1685090359997
    },
    {
      "type": "edit",
      "id": "be563a4b86927dbf",
      "item": {
        "type": "paragraph",
        "id": "be563a4b86927dbf",
        "text": "See also [[Java Wiki Content Fetcher]], Basic read and follow link loop: ["
      },
      "date": 1685090686445
    },
    {
      "type": "edit",
      "id": "be563a4b86927dbf",
      "item": {
        "type": "paragraph",
        "id": "be563a4b86927dbf",
        "text": "See also [[Java Wiki Content Fetcher]], Basic read and follow link loop: [https://github.com/jasonrclark/fedwiki-java/commit/18202e304fc5d05a0733a05bac17943f79e5e48e commit]"
      },
      "date": 1685090724798
    },
    {
      "type": "edit",
      "id": "be563a4b86927dbf",
      "item": {
        "type": "paragraph",
        "id": "be563a4b86927dbf",
        "text": "See also [[Java Wiki Content Fetcher]], [https://github.com/jasonrclark/fedwiki-java/issues/1 github], Basic read and follow link loop: [https://github.com/jasonrclark/fedwiki-java/commit/18202e304fc5d05a0733a05bac17943f79e5e48e commit]"
      },
      "date": 1685091226227
    },
    {
      "type": "edit",
      "id": "be563a4b86927dbf",
      "item": {
        "type": "paragraph",
        "id": "be563a4b86927dbf",
        "text": "See also [[Java Wiki Content Fetcher]], [https://github.com/jasonrclark/fedwiki-java/issues/1 github], Basic read and follow link loop: [https://github.com/jasonrclark/fedwiki-java/commit/18202e304fc5d05a0733a05bac17943f79e5e48e commit], [https://github.com/jasonrclark/fedwiki-java/blob/0a5702c2a842341679a6207122516e1f86598e38/Main.java#L87-L99 Main.java#L87-L99]:"
      },
      "date": 1685091410970
    },
    {
      "type": "edit",
      "id": "be563a4b86927dbf",
      "item": {
        "type": "paragraph",
        "id": "be563a4b86927dbf",
        "text": "See also [[Java Wiki Content Fetcher]], [https://github.com/jasonrclark/fedwiki-java/issues/1 github], [https://github.com/jasonrclark/fedwiki-java/blob/0a5702c2a842341679a6207122516e1f86598e38/Main.java#L87-L99 Main.java#L87-L99]:"
      },
      "date": 1685091458244
    },
    {
      "item": {
        "type": "factory",
        "id": "33d7a71aaebf89dd"
      },
      "id": "33d7a71aaebf89dd",
      "type": "add",
      "after": "5cfbc84be482ec6d",
      "date": 1685091513248
    },
    {
      "type": "edit",
      "id": "33d7a71aaebf89dd",
      "item": {
        "type": "paragraph",
        "id": "33d7a71aaebf89dd",
        "text": "We anticipate a command line tool that can usefully browse the wiki federation. To this end we will create Java mechanisms that duplicate in the simplest way possible the current single page application. This will demonstrate that our collaborative hypertext is not irrevocably dependent on javascript or the browser."
      },
      "date": 1685091514703
    },
    {
      "type": "edit",
      "id": "33d7a71aaebf89dd",
      "item": {
        "type": "paragraph",
        "id": "33d7a71aaebf89dd",
        "text": "We anticipate a command line tool that can usefully browse the wiki federation. To this end we will create Java mechanisms that duplicate in the simplest way possible the current [[single page application]]. This will demonstrate that our collaborative hypertext is not irrevocably dependent on javascript or the browser."
      },
      "date": 1685091529824
    },
    {
      "type": "edit",
      "id": "33d7a71aaebf89dd",
      "item": {
        "type": "paragraph",
        "id": "33d7a71aaebf89dd",
        "text": "We anticipate a command line tool that can usefully browse the wiki federation. To this end we will create Java mechanisms that duplicate in the simplest way possible the current [[Single-Page Application]]. This will demonstrate that our collaborative hypertext is not irrevocably dependent on javascript or the browser."
      },
      "date": 1685091605314
    },
    {
      "type": "edit",
      "id": "babab31526371c03",
      "item": {
        "type": "paragraph",
        "id": "babab31526371c03",
        "text": "Note: Replace grep with the chat thing? [[Geoffrey Hinton]]"
      },
      "date": 1685091749226
    },
    {
      "type": "edit",
      "id": "babab31526371c03",
      "item": {
        "type": "paragraph",
        "id": "babab31526371c03",
        "text": "Note: Replace grep with the chat thing? ⇒ [[Geoffrey Hinton]]"
      },
      "date": 1685091764864
    },
    {
      "type": "edit",
      "id": "babab31526371c03",
      "item": {
        "type": "paragraph",
        "id": "babab31526371c03",
        "text": "Note: Replace grep with the chat thing? ⇒ [[Geoffrey Hinton]] ⇒ [[Back Propagation]]"
      },
      "date": 1685091826294
    },
    {
      "item": {
        "type": "factory",
        "id": "48b9c3e2e406a40e"
      },
      "id": "48b9c3e2e406a40e",
      "type": "add",
      "after": "33d7a71aaebf89dd",
      "date": 1685092649822
    },
    {
      "type": "edit",
      "id": "48b9c3e2e406a40e",
      "item": {
        "type": "pagefold",
        "id": "48b9c3e2e406a40e",
        "text": "~"
      },
      "date": 1685092652849
    },
    {
      "item": {
        "type": "factory",
        "id": "5bb6cf2b0fcfd10b"
      },
      "id": "5bb6cf2b0fcfd10b",
      "type": "add",
      "after": "48b9c3e2e406a40e",
      "date": 1685092654767
    },
    {
      "type": "edit",
      "id": "5bb6cf2b0fcfd10b",
      "item": {
        "type": "paragraph",
        "id": "5bb6cf2b0fcfd10b",
        "text": "[[Brian Marick]] @marick@social.oddly-influenced.dev\n\n@mostalive @rgb @marcevers …\nI mean, it’s weird. Being saved depends on faith alone (an internal quality), *but* we have to work these faith-less people hard so that they might become the kind of people who are saved?\n\nThis may be a sign of an inconsistency in their thinking, as it was put into practice?\n2m\nrgb\nRalf Barkow @rgb\n\n@marick @mostalive @marcevers In order to deal with \"these faith-less people,\" society has invented the concept of the person, which makes the future predictable. You should be the same person tomorrow. That this has to do with religion seems plausible. And guilt probably arose in this context. Gift and counter-gift create order and limit the future possibilities of people."
      },
      "date": 1685092671019
    },
    {
      "item": {
        "type": "factory",
        "id": "ace79f1b9f509e7d"
      },
      "id": "ace79f1b9f509e7d",
      "type": "add",
      "after": "5bb6cf2b0fcfd10b",
      "date": 1685094197602
    },
    {
      "type": "edit",
      "id": "ace79f1b9f509e7d",
      "item": {
        "type": "pagefold",
        "id": "ace79f1b9f509e7d",
        "text": "~"
      },
      "date": 1685094200453
    },
    {
      "item": {
        "type": "factory",
        "id": "1b975d800645d28e"
      },
      "id": "1b975d800645d28e",
      "type": "add",
      "after": "ace79f1b9f509e7d",
      "date": 1685094201772
    },
    {
      "type": "edit",
      "id": "1b975d800645d28e",
      "item": {
        "type": "paragraph",
        "id": "1b975d800645d28e",
        "text": "Spencer-Browns distinction ist eine sich entziehende, bis zum Widerruf des Wiedereintritts aufschiebende différance im Sinne von Jacques Derrida (2004a)."
      },
      "date": 1685094205134
    },
    {
      "type": "add",
      "id": "be592158f5fb0c4a",
      "item": {
        "type": "paragraph",
        "id": "be592158f5fb0c4a",
        "text": "\nPLENER, Peter, WERBER, Niels and WOLF, Burkhardt (eds.), 2021. Das Formular.  Online. Berlin, Heidelberg: Springer. [Accessed 26 May 2023]. AdminiStudies. Formen und Medien der Verwaltung. ISBN 978-3-662-64083-8. \n"
      },
      "after": "1b975d800645d28e",
      "date": 1685094216569
    },
    {
      "type": "edit",
      "id": "be592158f5fb0c4a",
      "item": {
        "type": "paragraph",
        "id": "be592158f5fb0c4a",
        "text": "PLENER, Peter, WERBER, Niels and WOLF, Burkhardt (eds.), 2021. Das Formular. Berlin, Heidelberg: Springer. AdminiStudies. Formen und Medien der Verwaltung. ISBN 978-3-662-64083-8. \n"
      },
      "date": 1685094231253
    },
    {
      "type": "edit",
      "id": "be592158f5fb0c4a",
      "item": {
        "type": "paragraph",
        "id": "be592158f5fb0c4a",
        "text": "PLENER, Peter, WERBER, Niels and WOLF, Burkhardt (eds.), 2021. Das Formular. Berlin, Heidelberg: Springer. AdminiStudies. Formen und Medien der Verwaltung. ISBN 978-3-662-64083-8, p. 7N5."
      },
      "date": 1685094278549
    },
    {
      "item": {
        "type": "factory",
        "id": "2124feed51f071de"
      },
      "id": "2124feed51f071de",
      "type": "add",
      "after": "be592158f5fb0c4a",
      "date": 1685094537191
    },
    {
      "type": "edit",
      "id": "2124feed51f071de",
      "item": {
        "type": "paragraph",
        "id": "2124feed51f071de",
        "text": "⇒ [[Forms]]"
      },
      "date": 1685094553150
    },
    {
      "type": "edit",
      "id": "5bb6cf2b0fcfd10b",
      "item": {
        "type": "paragraph",
        "id": "5bb6cf2b0fcfd10b",
        "text": "⇒ [[Brian Marick]] … I mean, it’s weird. Being saved depends on faith alone (an internal quality), *but* we have to work these faith-less people hard so that they might become the kind of people who are saved?\n\nThis may be a sign of an inconsistency in their thinking, as it was put into practice?"
      },
      "date": 1685094862023
    },
    {
      "type": "add",
      "id": "7667881deae91d35",
      "item": {
        "type": "paragraph",
        "id": "7667881deae91d35",
        "text": "\n[[Ralf Barkow]] @rgb\n\n@marick @mostalive @marcevers In order to deal with \"these faith-less people,\" society has invented the concept of the person, which makes the future predictable. You should be the same person tomorrow. That this has to do with religion seems plausible. And guilt probably arose in this context. Gift and counter-gift create order and limit the future possibilities of people."
      },
      "after": "5bb6cf2b0fcfd10b",
      "date": 1685094872286
    },
    {
      "type": "edit",
      "id": "7667881deae91d35",
      "item": {
        "type": "paragraph",
        "id": "7667881deae91d35",
        "text": "⇒ [[Ralf Barkow]] ⇒ [[Brian Marick]]\n\n@marick @mostalive @marcevers In order to deal with \"these faith-less people,\" society has invented the concept of the person, which makes the future predictable. You should be the same person tomorrow. That this has to do with religion seems plausible. And guilt probably arose in this context. Gift and counter-gift create order and limit the future possibilities of people."
      },
      "date": 1685094885738
    },
    {
      "type": "edit",
      "id": "5bb6cf2b0fcfd10b",
      "item": {
        "type": "paragraph",
        "id": "5bb6cf2b0fcfd10b",
        "text": "⇒ [[Brian Marick]] … I mean, it’s weird. Being saved depends on faith alone (an internal quality), *but* we have to work these faith-less people hard so that they might become the kind of people who are saved? [https://social.oddly-influenced.dev/@marick/110432039551914719 post]\n\nThis may be a sign of an inconsistency in their thinking, as it was put into practice?"
      },
      "date": 1685094934792
    },
    {
      "type": "edit",
      "id": "7667881deae91d35",
      "item": {
        "type": "paragraph",
        "id": "7667881deae91d35",
        "text": "⇒ [[Ralf Barkow]] ⇒ [[Brian Marick]]: In order to deal with \"these faith-less people,\" society has invented the concept of the person, which makes the future predictable. You should be the same person tomorrow. That this has to do with religion seems plausible. And guilt probably arose in this context. Gift and counter-gift create order and limit the future possibilities of people. [https://fosstodon.org/@rgb/110434219946455099 post]"
      },
      "date": 1685094962649
    },
    {
      "item": {
        "type": "factory",
        "id": "e889852781df3666"
      },
      "id": "e889852781df3666",
      "type": "add",
      "after": "2124feed51f071de",
      "date": 1685098766651
    },
    {
      "type": "edit",
      "id": "e889852781df3666",
      "item": {
        "type": "paragraph",
        "id": "e889852781df3666",
        "text": "[[HTTP]]"
      },
      "date": 1685098774403
    },
    {
      "type": "edit",
      "id": "e889852781df3666",
      "item": {
        "type": "paragraph",
        "id": "e889852781df3666",
        "text": "⇒ [[HTTP]]"
      },
      "date": 1685098783008
    },
    {
      "type": "edit",
      "id": "e889852781df3666",
      "item": {
        "type": "paragraph",
        "id": "e889852781df3666",
        "text": "⇒ [[HTTP]]: next step?"
      },
      "date": 1685098879370
    },
    {
      "id": "e889852781df3666",
      "type": "move",
      "order": [
        "cbd98d497bdd9981",
        "aaedeaff7b6b7fad",
        "18e4dd31faec7b6a",
        "2021695515a03761",
        "f2e8d51d2a5800bb",
        "c703965116e46901",
        "b5b05f90d196441e",
        "0f3836e2f694624a",
        "0b51e1367e90a90e",
        "831bb1e2bb2cdc41",
        "98871af622d0c33c",
        "7444af527ee6e7dd",
        "58111ec878b701e6",
        "3a6b4c9b6fb0adbb",
        "3e27b85168cdbef1",
        "f9b3ad10dbd44c0a",
        "babab31526371c03",
        "be563a4b86927dbf",
        "5cfbc84be482ec6d",
        "33d7a71aaebf89dd",
        "48b9c3e2e406a40e",
        "5bb6cf2b0fcfd10b",
        "7667881deae91d35",
        "ace79f1b9f509e7d",
        "1b975d800645d28e",
        "be592158f5fb0c4a",
        "e889852781df3666",
        "2124feed51f071de"
      ],
      "date": 1685105530628
    },
    {
      "id": "3fa7f59ac5a88624",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3fa7f59ac5a88624",
        "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers. [https://package.elm-lang.org/packages/elm/http/2.0.0/ elm-lang], [https://guide.elm-lang.org/effects/http.html page]"
      },
      "after": "be592158f5fb0c4a",
      "attribution": {
        "page": "HTTP"
      },
      "date": 1685105550391
    },
    {
      "type": "remove",
      "id": "e889852781df3666",
      "date": 1685105554874
    },
    {
      "type": "edit",
      "id": "3fa7f59ac5a88624",
      "item": {
        "type": "paragraph",
        "id": "3fa7f59ac5a88624",
        "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers. [https://package.elm-lang.org/packages/elm/http/2.0.0/ elm-lang], [https://guide.elm-lang.org/effects/http.html page] ⇒ "
      },
      "date": 1685105617279
    },
    {
      "id": "267bf9eef7bb15a4",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "267bf9eef7bb15a4",
        "text": "Unused pattern variable request [https://github.com/RalfBarkow/vite-elm-app/commit/231e55301dbfc18a60d9436f0aac757ab5eb10e2 commit] "
      },
      "after": "3fa7f59ac5a88624",
      "attribution": {
        "page": "HTTP"
      },
      "date": 1685105621760
    },
    {
      "type": "remove",
      "id": "267bf9eef7bb15a4",
      "date": 1685105625153
    },
    {
      "type": "edit",
      "id": "3fa7f59ac5a88624",
      "item": {
        "type": "paragraph",
        "id": "3fa7f59ac5a88624",
        "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers. [https://package.elm-lang.org/packages/elm/http/2.0.0/ elm-lang], [https://guide.elm-lang.org/effects/http.html page] ⇒ Unused pattern variable request [https://github.com/RalfBarkow/vite-elm-app/commit/231e55301dbfc18a60d9436f0aac757ab5eb10e2 commit] "
      },
      "date": 1685105627249
    },
    {
      "item": {
        "type": "factory",
        "id": "488ee140d35c53f1"
      },
      "id": "488ee140d35c53f1",
      "type": "add",
      "after": "2124feed51f071de",
      "date": 1685105715352
    },
    {
      "type": "edit",
      "id": "488ee140d35c53f1",
      "item": {
        "type": "code",
        "id": "488ee140d35c53f1",
        "text": "Http.send handleHttpError request"
      },
      "date": 1685105719620
    },
    {
      "id": "488ee140d35c53f1",
      "type": "move",
      "order": [
        "cbd98d497bdd9981",
        "aaedeaff7b6b7fad",
        "18e4dd31faec7b6a",
        "2021695515a03761",
        "f2e8d51d2a5800bb",
        "c703965116e46901",
        "b5b05f90d196441e",
        "0f3836e2f694624a",
        "0b51e1367e90a90e",
        "831bb1e2bb2cdc41",
        "98871af622d0c33c",
        "7444af527ee6e7dd",
        "58111ec878b701e6",
        "3a6b4c9b6fb0adbb",
        "3e27b85168cdbef1",
        "f9b3ad10dbd44c0a",
        "babab31526371c03",
        "be563a4b86927dbf",
        "5cfbc84be482ec6d",
        "33d7a71aaebf89dd",
        "48b9c3e2e406a40e",
        "5bb6cf2b0fcfd10b",
        "7667881deae91d35",
        "ace79f1b9f509e7d",
        "1b975d800645d28e",
        "be592158f5fb0c4a",
        "3fa7f59ac5a88624",
        "488ee140d35c53f1",
        "2124feed51f071de"
      ],
      "date": 1685105721469
    },
    {
      "type": "add",
      "id": "2fd02a1432beedf5",
      "item": {
        "type": "paragraph",
        "id": "2fd02a1432beedf5",
        "text": "Add"
      },
      "after": "3fa7f59ac5a88624",
      "date": 1685105728053
    },
    {
      "type": "edit",
      "id": "2fd02a1432beedf5",
      "item": {
        "type": "paragraph",
        "id": "2fd02a1432beedf5",
        "text": "Replace with your server URL"
      },
      "date": 1685110187468
    },
    {
      "type": "remove",
      "id": "488ee140d35c53f1",
      "date": 1685110189145
    },
    {
      "item": {
        "type": "factory",
        "id": "8ea8d5b1eb7206d1"
      },
      "id": "8ea8d5b1eb7206d1",
      "type": "add",
      "after": "2124feed51f071de",
      "date": 1685110910611
    },
    {
      "type": "edit",
      "id": "8ea8d5b1eb7206d1",
      "item": {
        "type": "reference",
        "id": "8ea8d5b1eb7206d1",
        "site": "ward.asia.wiki.org",
        "slug": "sites-for-friends",
        "title": "Sites for Friends",
        "text": "We consider how we might provide just sufficient security for a small community of friends to form quickly, enjoy ownership, invite others and recover from mistakes."
      },
      "date": 1685110930315
    },
    {
      "item": {
        "type": "factory",
        "id": "78ac0f9c5aeff9b4"
      },
      "id": "78ac0f9c5aeff9b4",
      "type": "add",
      "after": "8ea8d5b1eb7206d1",
      "date": 1685110940675
    },
    {
      "type": "edit",
      "id": "78ac0f9c5aeff9b4",
      "item": {
        "type": "reference",
        "id": "78ac0f9c5aeff9b4",
        "site": "ward.asia.wiki.org",
        "slug": "friendly-security",
        "title": "Friendly Security",
        "text": "We explore the new security plugin api of [[Wiki - 0.10.0]] through the creation of a 'friends' module suitable for farms were the server administrator knows and is available to help every site owner should they have login trouble."
      },
      "date": 1685110944579
    },
    {
      "type": "edit",
      "id": "98871af622d0c33c",
      "item": {
        "type": "paragraph",
        "id": "98871af622d0c33c",
        "text": "try compiling the updated code"
      },
      "date": 1685111820390
    },
    {
      "type": "add",
      "id": "0f17da271e251bb4",
      "item": {
        "type": "paragraph",
        "id": "0f17da271e251bb4",
        "text": "⇒ [[Elm and AI]] ⇒ [[Prompt Engineering]]"
      },
      "after": "98871af622d0c33c",
      "date": 1685111821697
    },
    {
      "type": "edit",
      "id": "98871af622d0c33c",
      "item": {
        "type": "paragraph",
        "id": "98871af622d0c33c",
        "text": "Try compiling the updated code"
      },
      "date": 1685111824785
    },
    {
      "type": "edit",
      "id": "0f3836e2f694624a",
      "item": {
        "type": "paragraph",
        "id": "0f3836e2f694624a",
        "text": "1. Copy code"
      },
      "date": 1685111834440
    },
    {
      "type": "edit",
      "id": "0b51e1367e90a90e",
      "item": {
        "type": "paragraph",
        "id": "0b51e1367e90a90e",
        "text": "2. 'Reply' with Compiler Error messages:"
      },
      "date": 1685111838695
    },
    {
      "type": "edit",
      "id": "98871af622d0c33c",
      "item": {
        "type": "paragraph",
        "id": "98871af622d0c33c",
        "text": "3. Try compiling the updated code"
      },
      "date": 1685111844557
    }
  ]
}