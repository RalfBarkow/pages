{
  "title": "LR",
  "story": [
    {
      "type": "paragraph",
      "id": "612eb68e025cfe11",
      "text": "TOMITA, Masaru, 1991. Generalized LR parsing. Springer Science & Business Media. [Accessed 19 December 2023]. \n"
    },
    {
      "type": "paragraph",
      "id": "630d8d41d713aa4d",
      "text": "Of course, there was a good reason why LR had never been applied for natural languages; it was simply impossible. If your context-free grammar is sufficiently more complex than programming languages, its LR parsing table will have multiple actions, and deterministic parsing will be no longer possible. Worst case context-free grammars generate parsing tables that have multiple actions in every entry, and parsing nondeterministically with such a table is as inefficient as parsing without precompilation. Fortunately, typical natural language grammars are not as bad as the worst case grammars. They are very close to LR, and usually only a few entries are multiply defined."
    },
    {
      "type": "paragraph",
      "id": "37cdb91cc24981cf",
      "text": "The [[Generalized LR Parsing]] algorithm handles multiply defined entries gracefully with a device called [[Graph-Structured Stack]], preserving most of the LR efficiency. In fact, if the grammar is as simple as a programming language, it behaves exactly like the standard LR parsing algorithm. While its efficiency is still debatable with the unusual worst case grammars, I (Masaru Tomita) am confident that the GLR parsing algorithm is clearly more efficient than any other non-precompiling algorithms for practical natural language grammars."
    },
    {
      "type": "paragraph",
      "id": "adeff515c09455e7",
      "text": "⇐ [[Generalized LR Parsing]] ⇒ [[Graph-Structured Stack]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "LR",
        "story": []
      },
      "date": 1702982661461
    },
    {
      "type": "edit",
      "id": "fbb8fb29acc274c8",
      "item": {
        "type": "pagefold",
        "id": "fbb8fb29acc274c8",
        "text": "~"
      },
      "date": 1702982680889
    },
    {
      "id": "612eb68e025cfe11",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "612eb68e025cfe11",
        "text": "TOMITA, Masaru, 1991. Generalized LR parsing. Springer Science & Business Media. [Accessed 19 December 2023]. \n"
      },
      "after": "fbb8fb29acc274c8",
      "attribution": {
        "page": "Generalized LR Parsing"
      },
      "date": 1702982688387
    },
    {
      "item": {
        "type": "factory",
        "id": "630d8d41d713aa4d"
      },
      "id": "630d8d41d713aa4d",
      "type": "add",
      "after": "612eb68e025cfe11",
      "date": 1702982720375
    },
    {
      "type": "edit",
      "id": "630d8d41d713aa4d",
      "item": {
        "type": "paragraph",
        "id": "630d8d41d713aa4d",
        "text": "Of course, there was a good reason why LR had never been applied for natural languages; it was simply impossible. If your context-free grammar is sufficiently more complex than programming languages, its LR parsing table will have multiple actions, and deterministic parsing will be no longer possible. Worst case context-free grammars generate parsing tables that have multiple actions in every entry, and parsing nondeterministically with such a table is as inefficient as parsing without precompilation. Fortunately, typical natural language grammars are not as bad as the worst case grammars. They are very close to LR, and usually only a few entries are multiply defined."
      },
      "date": 1702982722087
    },
    {
      "item": {
        "type": "factory",
        "id": "37cdb91cc24981cf"
      },
      "id": "37cdb91cc24981cf",
      "type": "add",
      "after": "630d8d41d713aa4d",
      "date": 1702982768673
    },
    {
      "type": "edit",
      "id": "37cdb91cc24981cf",
      "item": {
        "type": "paragraph",
        "id": "37cdb91cc24981cf",
        "text": "The Generalized LR parsing algorithm handles multiply defined entries gracefully with a device called graph-structured stack, preserving most of the LR efficiency. In fact, if the grammar is as simple as a programming language, it behaves exactly like the standard LR parsing algorithm. While its efficiency is still debatable with the unusual worst case grammars, I am confident that the GLR parsing algorithm is clearly more efficient than any other non-precompiling algorithms for practical natural language grammars."
      },
      "date": 1702982770499
    },
    {
      "type": "edit",
      "id": "37cdb91cc24981cf",
      "item": {
        "type": "paragraph",
        "id": "37cdb91cc24981cf",
        "text": "The Generalized LR parsing algorithm handles multiply defined entries gracefully with a device called [[Graph-Structured Stack]], preserving most of the LR efficiency. In fact, if the grammar is as simple as a programming language, it behaves exactly like the standard LR parsing algorithm. While its efficiency is still debatable with the unusual worst case grammars, I am confident that the GLR parsing algorithm is clearly more efficient than any other non-precompiling algorithms for practical natural language grammars."
      },
      "date": 1702982809618
    },
    {
      "type": "edit",
      "id": "37cdb91cc24981cf",
      "item": {
        "type": "paragraph",
        "id": "37cdb91cc24981cf",
        "text": "The Generalized LR parsing algorithm handles multiply defined entries gracefully with a device called [[Graph-Structured Stack]], preserving most of the LR efficiency. In fact, if the grammar is as simple as a programming language, it behaves exactly like the standard LR parsing algorithm. While its efficiency is still debatable with the unusual worst case grammars, I (Masaru Tomita) am confident that the GLR parsing algorithm is clearly more efficient than any other non-precompiling algorithms for practical natural language grammars."
      },
      "date": 1702982891932
    },
    {
      "item": {
        "type": "factory",
        "id": "a261f31dd61cc04c"
      },
      "id": "a261f31dd61cc04c",
      "type": "add",
      "after": "37cdb91cc24981cf",
      "date": 1702982989569
    },
    {
      "type": "edit",
      "id": "a261f31dd61cc04c",
      "item": {
        "type": "paragraph",
        "id": "a261f31dd61cc04c",
        "text": "A [[Common Lisp]] version of the GLR parser is available for practical natural"
      },
      "date": 1702982998750
    },
    {
      "type": "edit",
      "id": "a261f31dd61cc04c",
      "item": {
        "type": "paragraph",
        "id": "a261f31dd61cc04c",
        "text": "A [[Common Lisp]] version of the GLR parser is available for practical natural language projects. It accepts a grammar written in an LFG-like notation. If you are interested in obtaining a copy of the software, contact: […]"
      },
      "date": 1702983020575
    },
    {
      "item": {
        "type": "factory",
        "id": "25d2a0ce9ab900d0"
      },
      "id": "25d2a0ce9ab900d0",
      "type": "add",
      "after": "a261f31dd61cc04c",
      "date": 1702983043056
    },
    {
      "type": "edit",
      "id": "25d2a0ce9ab900d0",
      "item": {
        "type": "paragraph",
        "id": "25d2a0ce9ab900d0",
        "text": "This parscr is no longer the only GLR parser. At the first International Workshop on Parsing Technologies (Pittsburgh, 1989), a good number of papers on GLR parsing were presented by many different researchers from allover the world. This book is a collection of selected papers on GLR parsing, most of which were presented at the workshop."
      },
      "date": 1702983044727
    },
    {
      "type": "edit",
      "id": "37cdb91cc24981cf",
      "item": {
        "type": "paragraph",
        "id": "37cdb91cc24981cf",
        "text": "The [[Generalized LR Parsing]] algorithm handles multiply defined entries gracefully with a device called [[Graph-Structured Stack]], preserving most of the LR efficiency. In fact, if the grammar is as simple as a programming language, it behaves exactly like the standard LR parsing algorithm. While its efficiency is still debatable with the unusual worst case grammars, I (Masaru Tomita) am confident that the GLR parsing algorithm is clearly more efficient than any other non-precompiling algorithms for practical natural language grammars."
      },
      "date": 1702983093764
    },
    {
      "id": "a261f31dd61cc04c",
      "type": "remove",
      "removedTo": {
        "page": "Generalized LR Parsing"
      },
      "date": 1702983103064
    },
    {
      "type": "edit",
      "id": "25d2a0ce9ab900d0",
      "item": {
        "type": "paragraph",
        "id": "25d2a0ce9ab900d0",
        "text": "This parser is no longer the only GLR parser. At the first International Workshop on Parsing Technologies (Pittsburgh, 1989), a good number of papers on GLR parsing were presented by many different researchers from allover the world. This book is a collection of selected papers on GLR parsing, most of which were presented at the workshop."
      },
      "date": 1702983116312
    },
    {
      "id": "25d2a0ce9ab900d0",
      "type": "remove",
      "removedTo": {
        "page": "Generalized LR Parsing"
      },
      "date": 1702983118591
    },
    {
      "item": {
        "type": "factory",
        "id": "adeff515c09455e7"
      },
      "id": "adeff515c09455e7",
      "type": "add",
      "after": "37cdb91cc24981cf",
      "date": 1702983157665
    },
    {
      "type": "edit",
      "id": "adeff515c09455e7",
      "item": {
        "type": "paragraph",
        "id": "adeff515c09455e7",
        "text": "⇐ [[Generalized LR Parsing]] ⇒ "
      },
      "date": 1702983172764
    },
    {
      "type": "edit",
      "id": "adeff515c09455e7",
      "item": {
        "type": "paragraph",
        "id": "adeff515c09455e7",
        "text": "⇐ [[Generalized LR Parsing]] ⇒ [[Graph-Structured Stack]]"
      },
      "date": 1702983180213
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1702986134382
    }
  ]
}