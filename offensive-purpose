{
  "title": "Offensive Purpose",
  "story": [
    {
      "type": "paragraph",
      "id": "40661f647fb6f26e",
      "text": "The current Android sensor security model either allows only restrictive read access to sensitive sensors (e.g., an app can only read its own touch data) or requires special install-time permissions (e.g., to read microphone, camera, or GPS). "
    },
    {
      "type": "paragraph",
      "id": "d07281267835eefd",
      "text": "Moreover, Android does not allow write access to any of the sensors. Sensing-based security and non-security applications, therefore, crucially rely upon the sanity of the Android sensor security model. "
    },
    {
      "type": "paragraph",
      "id": "fd3fd93b325715c9",
      "text": "In this paper, we show that such a model can be effectively circumvented. Specifically, we build SMASheD, a legitimate framework under the current Android ecosystem that can be used to stealthily sniff as well as manipulate many of the Android’s restricted sensors (even touch input). "
    },
    {
      "type": "paragraph",
      "id": "a43e1050e4acef39",
      "text": "SMASheD exploits the Android debug bridge functionality and enables a malicious app with only the INTERNET permission to read, and write to, multiple different sensor data files at will. SMASheD is the first framework, to the best of our knowledge, that can sniff and manipulate protected sensors on unrooted Android devices, without user awareness, without constant device-PC connection and without the need to infect the PC. "
    },
    {
      "type": "paragraph",
      "id": "1becc5a23a20e88e",
      "text": "The primary contributions of this paper are twofold. First, we design and develop the SMASheD framework, and evaluate its effectiveness on multiple Android devices, including phones, watches, and glasses. Second, as an offensive implication of the SMASheD framework, we introduce a wide array of potentially devastating attacks. Our attacks against the touch sensor range from accurately logging the touchscreen input (TouchLogger) to injecting touch events for accessing restricted sensors and resources, installing and granting special permissions to other malicious apps, accessing user accounts, and authenticating on behalf of the user-essentially almost doing whatever the device user can do (secretively). Our attacks against various physical sensors (motion, position, and environmental) can subvert the functionality provided by numerous existing sensing-based security and non-security applications, including those used for (continuous) authentication, authorization, safety, and elderly care."
    },
    {
      "type": "pagefold",
      "id": "8cb0d625c62c2e8a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "6ea23e2995451748",
      "text": "\nMOHAMED, Manar, SHRESTHA, Babins and SAXENA, Nitesh, 2017. SMASheD: Sniffing and Manipulating Android Sensor Data for Offensive Purposes. IEEE Transactions on Information Forensics and Security. April 2017. Vol. 12, no. 4, p. 901–913. DOI 10.1109/TIFS.2016.2620278. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Offensive Purpose",
        "story": []
      },
      "date": 1675932065151
    },
    {
      "item": {
        "type": "factory",
        "id": "6ea23e2995451748"
      },
      "id": "6ea23e2995451748",
      "type": "add",
      "date": 1675932077548
    },
    {
      "type": "edit",
      "id": "6ea23e2995451748",
      "item": {
        "type": "paragraph",
        "id": "6ea23e2995451748",
        "text": "\nMOHAMED, Manar, SHRESTHA, Babins and SAXENA, Nitesh, 2017. SMASheD: Sniffing and Manipulating Android Sensor Data for Offensive Purposes. IEEE Transactions on Information Forensics and Security. April 2017. Vol. 12, no. 4, p. 901–913. DOI 10.1109/TIFS.2016.2620278. "
      },
      "date": 1675932090323
    },
    {
      "item": {
        "type": "factory",
        "id": "40661f647fb6f26e"
      },
      "id": "40661f647fb6f26e",
      "type": "add",
      "after": "6ea23e2995451748",
      "date": 1675932091099
    },
    {
      "type": "edit",
      "id": "40661f647fb6f26e",
      "item": {
        "type": "paragraph",
        "id": "40661f647fb6f26e",
        "text": "The current Android sensor security model either allows only restrictive read access to sensitive sensors (e.g., an app can only read its own touch data) or requires special install-time permissions (e.g., to read microphone, camera, or GPS). Moreover, Android does not allow write access to any of the sensors. Sensing-based security and non-security applications, therefore, crucially rely upon the sanity of the Android sensor security model. In this paper, we show that such a model can be effectively circumvented. Specifically, we build SMASheD, a legitimate framework under the current Android ecosystem that can be used to stealthily sniff as well as manipulate many of the Android’s restricted sensors (even touch input). SMASheD exploits the Android debug bridge functionality and enables a malicious app with only the INTERNET permission to read, and write to, multiple different sensor data files at will. SMASheD is the first framework, to the best of our knowledge, that can sniff and manipulate protected sensors on unrooted Android devices, without user awareness, without constant device-PC connection and without the need to infect the PC. The primary contributions of this paper are twofold. First, we design and develop the SMASheD framework, and evaluate its effectiveness on multiple Android devices, including phones, watches, and glasses. Second, as an offensive implication of the SMASheD framework, we introduce a wide array of potentially devastating attacks. Our attacks against the touch sensor range from accurately logging the touchscreen input (TouchLogger) to injecting touch events for accessing restricted sensors and resources, installing and granting special permissions to other malicious apps, accessing user accounts, and authenticating on behalf of the user-essentially almost doing whatever the device user can do (secretively). Our attacks against various physical sensors (motion, position, and environmental) can subvert the functionality provided by numerous existing sensing-based security and non-security applications, including those used for (continuous) authentication, authorization, safety, and elderly care."
      },
      "date": 1675932093027
    },
    {
      "id": "40661f647fb6f26e",
      "type": "move",
      "order": [
        "40661f647fb6f26e",
        "6ea23e2995451748"
      ],
      "date": 1675932094162
    },
    {
      "item": {
        "type": "factory",
        "id": "8cb0d625c62c2e8a"
      },
      "id": "8cb0d625c62c2e8a",
      "type": "add",
      "after": "6ea23e2995451748",
      "date": 1675932097029
    },
    {
      "type": "edit",
      "id": "8cb0d625c62c2e8a",
      "item": {
        "type": "pagefold",
        "id": "8cb0d625c62c2e8a",
        "text": "~"
      },
      "date": 1675932099875
    },
    {
      "id": "8cb0d625c62c2e8a",
      "type": "move",
      "order": [
        "40661f647fb6f26e",
        "8cb0d625c62c2e8a",
        "6ea23e2995451748"
      ],
      "date": 1675932102520
    },
    {
      "type": "edit",
      "id": "40661f647fb6f26e",
      "item": {
        "type": "paragraph",
        "id": "40661f647fb6f26e",
        "text": "The current Android sensor security model either allows only restrictive read access to sensitive sensors (e.g., an app can only read its own touch data) or requires special install-time permissions (e.g., to read microphone, camera, or GPS). "
      },
      "date": 1675932117195
    },
    {
      "type": "add",
      "id": "d07281267835eefd",
      "item": {
        "type": "paragraph",
        "id": "d07281267835eefd",
        "text": "Moreover, Android does not allow write access to any of the sensors. Sensing-based security and non-security applications, therefore, crucially rely upon the sanity of the Android sensor security model. "
      },
      "after": "40661f647fb6f26e",
      "date": 1675932126031
    },
    {
      "type": "add",
      "id": "fd3fd93b325715c9",
      "item": {
        "type": "paragraph",
        "id": "fd3fd93b325715c9",
        "text": "In this paper, we show that such a model can be effectively circumvented. Specifically, we build SMASheD, a legitimate framework under the current Android ecosystem that can be used to stealthily sniff as well as manipulate many of the Android’s restricted sensors (even touch input). SMASheD exploits the Android debug bridge functionality and enables a malicious app with only the INTERNET permission to read, and write to, multiple different sensor data files at will. SMASheD is the first framework, to the best of our knowledge, that can sniff and manipulate protected sensors on unrooted Android devices, without user awareness, without constant device-PC connection and without the need to infect the PC. The primary contributions of this paper are twofold. First, we design and develop the SMASheD framework, and evaluate its effectiveness on multiple Android devices, including phones, watches, and glasses. Second, as an offensive implication of the SMASheD framework, we introduce a wide array of potentially devastating attacks. Our attacks against the touch sensor range from accurately logging the touchscreen input (TouchLogger) to injecting touch events for accessing restricted sensors and resources, installing and granting special permissions to other malicious apps, accessing user accounts, and authenticating on behalf of the user-essentially almost doing whatever the device user can do (secretively). Our attacks against various physical sensors (motion, position, and environmental) can subvert the functionality provided by numerous existing sensing-based security and non-security applications, including those used for (continuous) authentication, authorization, safety, and elderly care."
      },
      "after": "d07281267835eefd",
      "date": 1675932126943
    },
    {
      "type": "edit",
      "id": "fd3fd93b325715c9",
      "item": {
        "type": "paragraph",
        "id": "fd3fd93b325715c9",
        "text": "In this paper, we show that such a model can be effectively circumvented. Specifically, we build SMASheD, a legitimate framework under the current Android ecosystem that can be used to stealthily sniff as well as manipulate many of the Android’s restricted sensors (even touch input). "
      },
      "date": 1675932153736
    },
    {
      "type": "add",
      "id": "a43e1050e4acef39",
      "item": {
        "type": "paragraph",
        "id": "a43e1050e4acef39",
        "text": "SMASheD exploits the Android debug bridge functionality and enables a malicious app with only the INTERNET permission to read, and write to, multiple different sensor data files at will. SMASheD is the first framework, to the best of our knowledge, that can sniff and manipulate protected sensors on unrooted Android devices, without user awareness, without constant device-PC connection and without the need to infect the PC. "
      },
      "after": "fd3fd93b325715c9",
      "date": 1675932175794
    },
    {
      "type": "add",
      "id": "1becc5a23a20e88e",
      "item": {
        "type": "paragraph",
        "id": "1becc5a23a20e88e",
        "text": "The primary contributions of this paper are twofold. First, we design and develop the SMASheD framework, and evaluate its effectiveness on multiple Android devices, including phones, watches, and glasses. Second, as an offensive implication of the SMASheD framework, we introduce a wide array of potentially devastating attacks. Our attacks against the touch sensor range from accurately logging the touchscreen input (TouchLogger) to injecting touch events for accessing restricted sensors and resources, installing and granting special permissions to other malicious apps, accessing user accounts, and authenticating on behalf of the user-essentially almost doing whatever the device user can do (secretively). Our attacks against various physical sensors (motion, position, and environmental) can subvert the functionality provided by numerous existing sensing-based security and non-security applications, including those used for (continuous) authentication, authorization, safety, and elderly care."
      },
      "after": "a43e1050e4acef39",
      "date": 1675932192670
    }
  ]
}