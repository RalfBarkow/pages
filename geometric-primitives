{
  "title": "Geometric Primitives",
  "story": [
    {
      "type": "paragraph",
      "id": "5bbb3439bf8d1cf1",
      "text": "See [https://wiki.ralfbarkow.ch/assets/pages/world-core-tutorial-1/webglRender.js webgl/src/Render.js] ⇒ [[Geometric Primitives]]"
    },
    {
      "type": "markdown",
      "id": "0f03c220c0f67464",
      "text": "# Cube\n"
    },
    {
      "type": "code",
      "id": "66a8d0fd85fcdb51",
      "text": "export function Cube(x, y, z, color = [1,1,1,1]) {\n    const cube = new Triangles();\n    x /= 2;\n    y /= 2;\n    z /= 2;\n    cube.addFace( […] );\n      […] \n    return cube;\n}"
    },
    {
      "type": "markdown",
      "id": "af4e5abac0f5c692",
      "text": "# Sphere"
    },
    {
      "type": "markdown",
      "id": "471823418f891e39",
      "text": "This yields more equal-sized triangles that the typical normalization approach\nFor more info see: http://mathproofs.blogspot.com/2005/07/mapping-cube-to-sphere.html\nAnd: https://medium.com/game-dev-daily/four-ways-to-create-a-mesh-for-a-sphere-d7956b825db4"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Geometric Primitives",
        "story": []
      },
      "date": 1655155103709
    },
    {
      "item": {
        "type": "factory",
        "id": "2468d11158b4304c"
      },
      "id": "2468d11158b4304c",
      "type": "add",
      "date": 1655155113223
    },
    {
      "type": "edit",
      "id": "2468d11158b4304c",
      "item": {
        "type": "code",
        "id": "2468d11158b4304c",
        "text": "export function UnitCube() {\n    const cube = new Triangles();\n    cube.addFace([[-0.5, -0.5, -0.5], [-0.5, 0.5, -0.5], [0.5, 0.5, -0.5], [0.5, -0.5, -0.5]], [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[-0.5, -0.5, -0.5], [-0.5, -0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, 0.5, -0.5]], [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[-0.5, -0.5, -0.5], [0.5, -0.5, -0.5], [0.5, -0.5, 0.5], [-0.5, -0.5, 0.5]], [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[0.5, 0.5, 0.5], [0.5, 0.5, -0.5], [-0.5, 0.5, -0.5], [-0.5, 0.5, 0.5]], [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[0.5, 0.5, 0.5], [-0.5, 0.5, 0.5], [-0.5, -0.5, 0.5], [0.5, -0.5, 0.5]], [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[0.5, 0.5, 0.5], [0.5, -0.5, 0.5], [0.5, -0.5, -0.5], [0.5, 0.5, -0.5]], [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]], [[0,0], [1,0], [1,1], [0,1]]);\n    return cube;\n}"
      },
      "date": 1655155115756
    },
    {
      "item": {
        "type": "factory",
        "id": "8b62c1ee349d4032"
      },
      "id": "8b62c1ee349d4032",
      "type": "add",
      "after": "2468d11158b4304c",
      "date": 1655155126286
    },
    {
      "type": "edit",
      "id": "8b62c1ee349d4032",
      "item": {
        "type": "code",
        "id": "8b62c1ee349d4032",
        "text": "export function Cube(x, y, z, color = [1,1,1,1]) {\n    const cube = new Triangles();\n    x /= 2;\n    y /= 2;\n    z /= 2;\n    cube.addFace([[-x, -y, -z], [-x, y, -z], [x, y, -z], [x, -y, -z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[-x, -y, -z], [-x, -y, z], [-x, y, z], [-x, y, -z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[-x, -y, -z], [x, -y, -z], [x, -y, z], [-x, -y, z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[x, y, z], [x, y, -z], [-x, y, -z], [-x, y, z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[x, y, z], [-x, y, z], [-x, -y, z], [x, -y, z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[x, y, z], [x, -y, z], [x, -y, -z], [x, y, -z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    return cube;\n}"
      },
      "date": 1655155129585
    },
    {
      "item": {
        "type": "factory",
        "id": "cbd0d5c3879c9503"
      },
      "id": "cbd0d5c3879c9503",
      "type": "add",
      "after": "8b62c1ee349d4032",
      "date": 1655155158765
    },
    {
      "type": "edit",
      "id": "cbd0d5c3879c9503",
      "item": {
        "type": "code",
        "id": "cbd0d5c3879c9503",
        "text": "export function Sphere(r, facets, c = [1,1,1,1]) {\n    const sphere = new Triangles();\n    const ff = 1/facets;\n\n    //-- -X --\n\n    for (let i = 0; i < facets; i++) {\n        for (let j = 0; j < facets; j++) {\n\n            const p0 = v3_scale(Spherify([-1, -1 + 2*ff*i, -1 + 2*ff*j]),r);\n            const p1 = v3_scale(Spherify([-1, -1 + 2*ff*i, -1 + 2*ff*(j+1)]),r);\n            const p2 = v3_scale(Spherify([-1, -1 + 2*ff*(i+1), -1 + 2*ff*(j+1)]),r);\n            const p3 = v3_scale(Spherify([-1, -1 + 2*ff*(i+1), -1 + 2*ff*j]),r);\n\n            const u0 = i * ff;\n            const u1 = u0 + ff;\n            const v0 = j * ff;\n            const v1 = v0 + ff;\n\n            sphere.addFace([p0, p1, p2, p3], [c, c, c, c], [[u0,v0], [u1,v0], [u1,v1], [u0,v1]]);\n        }\n    }\n\n    //-- +X --\n\n    for (let i = 0; i < facets; i++) {\n        for (let j = 0; j < facets; j++) {\n\n            const p0 = v3_scale(Spherify([1, -1 + 2*ff*i, -1 + 2*ff*j]),r);\n            const p1 = v3_scale(Spherify([1, -1 + 2*ff*(i+1), -1 + 2*ff*j]),r);\n            const p2 = v3_scale(Spherify([1, -1 + 2*ff*(i+1), -1 + 2*ff*(j+1)]),r);\n            const p3 = v3_scale(Spherify([1, -1 + 2*ff*i, -1 + 2*ff*(j+1)]),r);\n\n            const u0 = i * ff;\n            const u1 = u0 + ff;\n            const v0 = j * ff;\n            const v1 = v0 + ff;\n\n            sphere.addFace([p0, p1, p2, p3], [c, c, c, c], [[u0,v0], [u1,v0], [u1,v1], [u0,v1]]);\n        }\n    }\n\n    //-- -Y --\n\n    for (let i = 0; i < facets; i++) {\n        for (let j = 0; j < facets; j++) {\n\n            const p0 = v3_scale(Spherify([-1 + 2*ff*i, -1 , -1 + 2*ff*j]),r);\n            const p1 = v3_scale(Spherify([-1 + 2*ff*(i+1), -1 , -1 + 2*ff*j]),r);\n            const p2 = v3_scale(Spherify([-1 + 2*ff*(i+1), -1,  -1 + 2*ff*(j+1)]),r);\n            const p3 = v3_scale(Spherify([-1 + 2*ff*i, -1, -1 + 2*ff*(j+1)]),r);\n\n            const u0 = i * ff;\n            const u1 = u0 + ff;\n            const v0 = j * ff;\n            const v1 = v0 + ff;\n\n            sphere.addFace([p0, p1, p2, p3], [c, c, c, c], [[u0,v0], [u1,v0], [u1,v1], [u0,v1]]);\n        }\n    }\n\n    //-- +Y --\n\n    for (let i = 0; i < facets; i++) {\n        for (let j = 0; j < facets; j++) {\n\n            const p0 = v3_scale(Spherify([-1 + 2*ff*i, 1, -1 + 2*ff*j]),r);\n            const p1 = v3_scale(Spherify([-1 + 2*ff*i, 1, -1 + 2*ff*(j+1)]),r);\n            const p2 = v3_scale(Spherify([-1 + 2*ff*(i+1), 1, -1 + 2*ff*(j+1)]),r);\n            const p3 = v3_scale(Spherify([-1 + 2*ff*(i+1), 1, -1 + 2*ff*j]),r);\n\n            const u0 = i * ff;\n            const u1 = u0 + ff;\n            const v0 = j * ff;\n            const v1 = v0 + ff;\n\n            sphere.addFace([p0, p1, p2, p3], [c, c, c, c], [[u0,v0], [u1,v0], [u1,v1], [u0,v1]]);\n        }\n    }\n\n    //-- -Z --\n\n    for (let i = 0; i < facets; i++) {\n        for (let j = 0; j < facets; j++) {\n\n            const p0 = v3_scale(Spherify([-1 + 2*ff*i, -1 + 2*ff*j, -1]),r);\n            const p1 = v3_scale(Spherify([-1 + 2*ff*i, -1 + 2*ff*(j+1), -1]),r);\n            const p2 = v3_scale(Spherify([-1 + 2*ff*(i+1), -1 + 2*ff*(j+1), -1]),r);\n            const p3 = v3_scale(Spherify([-1 + 2*ff*(i+1), -1 + 2*ff*j, -1]),r);\n\n            const u0 = i * ff;\n            const u1 = u0 + ff;\n            const v0 = j * ff;\n            const v1 = v0 + ff;\n\n            sphere.addFace([p0, p1, p2, p3], [c, c, c, c], [[u0,v0], [u1,v0], [u1,v1], [u0,v1]]);\n        }\n    }\n\n    //-- +Z --\n\n    for (let i = 0; i < facets; i++) {\n        for (let j = 0; j < facets; j++) {\n\n            const p0 = v3_scale(Spherify([-1 + 2*ff*i, -1 + 2*ff*j, 1]),r);\n            const p1 = v3_scale(Spherify([-1 + 2*ff*(i+1), -1 + 2*ff*j, 1]),r);\n            const p2 = v3_scale(Spherify([-1 + 2*ff*(i+1), -1 + 2*ff*(j+1), 1]),r);\n            const p3 = v3_scale(Spherify([-1 + 2*ff*i, -1 + 2*ff*(j+1), 1]),r);\n\n            const u0 = i * ff;\n            const u1 = u0 + ff;\n            const v0 = j * ff;\n            const v1 = v0 + ff;\n\n            sphere.addFace([p0, p1, p2, p3], [c, c, c, c], [[u0,v0], [u1,v0], [u1,v1], [u0,v1]]);\n        }\n    }\n\n    return sphere;\n}\n"
      },
      "date": 1655155162472
    },
    {
      "item": {
        "type": "factory",
        "id": "471823418f891e39"
      },
      "id": "471823418f891e39",
      "type": "add",
      "after": "cbd0d5c3879c9503",
      "date": 1655155196469
    },
    {
      "type": "edit",
      "id": "471823418f891e39",
      "item": {
        "type": "markdown",
        "id": "471823418f891e39",
        "text": "This yields more equal-sized triangles that the typical normalization approach\n// For more info see: http://mathproofs.blogspot.com/2005/07/mapping-cube-to-sphere.html\n// And: https://medium.com/game-dev-daily/four-ways-to-create-a-mesh-for-a-sphere-d7956b825db4"
      },
      "date": 1655155198923
    },
    {
      "type": "edit",
      "id": "471823418f891e39",
      "item": {
        "type": "markdown",
        "id": "471823418f891e39",
        "text": "This yields more equal-sized triangles that the typical normalization approach\nFor more info see: http://mathproofs.blogspot.com/2005/07/mapping-cube-to-sphere.html\nAnd: https://medium.com/game-dev-daily/four-ways-to-create-a-mesh-for-a-sphere-d7956b825db4"
      },
      "date": 1655155212184
    },
    {
      "item": {
        "type": "factory",
        "id": "5bbb3439bf8d1cf1"
      },
      "id": "5bbb3439bf8d1cf1",
      "type": "add",
      "after": "471823418f891e39",
      "date": 1655159080760
    },
    {
      "type": "edit",
      "id": "5bbb3439bf8d1cf1",
      "item": {
        "type": "paragraph",
        "id": "5bbb3439bf8d1cf1",
        "text": "See [https://wiki.ralfbarkow.ch/assets/pages/world-core-tutorial-1/webglRender.js webgl/src/Render.js] ⇒ [[Geometric Primitives]]"
      },
      "date": 1655159083787
    },
    {
      "id": "5bbb3439bf8d1cf1",
      "type": "move",
      "order": [
        "5bbb3439bf8d1cf1",
        "2468d11158b4304c",
        "8b62c1ee349d4032",
        "cbd0d5c3879c9503",
        "471823418f891e39"
      ],
      "date": 1655159095978
    },
    {
      "type": "remove",
      "id": "2468d11158b4304c",
      "date": 1655159211019
    },
    {
      "type": "remove",
      "id": "8b62c1ee349d4032",
      "date": 1655159212678
    },
    {
      "type": "remove",
      "id": "cbd0d5c3879c9503",
      "date": 1655159233124
    },
    {
      "type": "add",
      "id": "af4e5abac0f5c692",
      "item": {
        "type": "paragraph",
        "id": "af4e5abac0f5c692",
        "text": "# Sphere"
      },
      "after": "5bbb3439bf8d1cf1",
      "date": 1655159242573
    },
    {
      "type": "edit",
      "id": "af4e5abac0f5c692",
      "item": {
        "type": "markdown",
        "id": "af4e5abac0f5c692",
        "text": "# Sphere"
      },
      "date": 1655159244339
    },
    {
      "type": "add",
      "id": "0f03c220c0f67464",
      "item": {
        "type": "paragraph",
        "id": "0f03c220c0f67464",
        "text": "# Cube"
      },
      "after": "5bbb3439bf8d1cf1",
      "date": 1655159318037
    },
    {
      "type": "edit",
      "id": "0f03c220c0f67464",
      "item": {
        "type": "markdown",
        "id": "0f03c220c0f67464",
        "text": "# Cube"
      },
      "date": 1655159320135
    },
    {
      "type": "edit",
      "id": "0f03c220c0f67464",
      "item": {
        "type": "markdown",
        "id": "0f03c220c0f67464",
        "text": "# Cube\n[…]"
      },
      "date": 1655159325400
    },
    {
      "item": {
        "type": "factory",
        "id": "66a8d0fd85fcdb51"
      },
      "id": "66a8d0fd85fcdb51",
      "type": "add",
      "after": "471823418f891e39",
      "date": 1655159349426
    },
    {
      "id": "66a8d0fd85fcdb51",
      "type": "move",
      "order": [
        "5bbb3439bf8d1cf1",
        "0f03c220c0f67464",
        "66a8d0fd85fcdb51",
        "af4e5abac0f5c692",
        "471823418f891e39"
      ],
      "date": 1655159353106
    },
    {
      "type": "edit",
      "id": "66a8d0fd85fcdb51",
      "item": {
        "type": "code",
        "id": "66a8d0fd85fcdb51",
        "text": "export function Cube(x, y, z, color = [1,1,1,1]) {\n    const cube = new Triangles();\n    x /= 2;\n    y /= 2;\n    z /= 2;\n    cube.addFace([[-x, -y, -z], [-x, y, -z], [x, y, -z], [x, -y, -z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[-x, -y, -z], [-x, -y, z], [-x, y, z], [-x, y, -z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[-x, -y, -z], [x, -y, -z], [x, -y, z], [-x, -y, z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[x, y, z], [x, y, -z], [-x, y, -z], [-x, y, z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[x, y, z], [-x, y, z], [-x, -y, z], [x, -y, z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    cube.addFace([[x, y, z], [x, -y, z], [x, -y, -z], [x, y, -z]], [color, color, color, color], [[0,0], [1,0], [1,1], [0,1]]);\n    return cube;\n}"
      },
      "date": 1655159356764
    },
    {
      "type": "edit",
      "id": "0f03c220c0f67464",
      "item": {
        "type": "markdown",
        "id": "0f03c220c0f67464",
        "text": "# Cube\n"
      },
      "date": 1655159360300
    },
    {
      "type": "edit",
      "id": "66a8d0fd85fcdb51",
      "item": {
        "type": "code",
        "id": "66a8d0fd85fcdb51",
        "text": "export function Cube(x, y, z, color = [1,1,1,1]) {\n    const cube = new Triangles();\n    x /= 2;\n    y /= 2;\n    z /= 2;\n    cube.addFace […];\n    return cube;\n}"
      },
      "date": 1655159402105
    },
    {
      "type": "edit",
      "id": "66a8d0fd85fcdb51",
      "item": {
        "type": "code",
        "id": "66a8d0fd85fcdb51",
        "text": "export function Cube(x, y, z, color = [1,1,1,1]) {\n    const cube = new Triangles();\n    x /= 2;\n    y /= 2;\n    z /= 2;\n    cube.addFace( […] );\n    return cube;\n}"
      },
      "date": 1655159420223
    },
    {
      "type": "edit",
      "id": "66a8d0fd85fcdb51",
      "item": {
        "type": "code",
        "id": "66a8d0fd85fcdb51",
        "text": "export function Cube(x, y, z, color = [1,1,1,1]) {\n    const cube = new Triangles();\n    x /= 2;\n    y /= 2;\n    z /= 2;\n    cube.addFace( […] );\n\n    return cube;\n}"
      },
      "date": 1655159439493
    },
    {
      "type": "edit",
      "id": "66a8d0fd85fcdb51",
      "item": {
        "type": "code",
        "id": "66a8d0fd85fcdb51",
        "text": "export function Cube(x, y, z, color = [1,1,1,1]) {\n    const cube = new Triangles();\n    x /= 2;\n    y /= 2;\n    z /= 2;\n    cube.addFace( […] );\n      […] \n    return cube;\n}"
      },
      "date": 1655159445541
    }
  ]
}