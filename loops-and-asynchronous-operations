{
  "title": "Loops and asynchronous operations",
  "story": [
    {
      "type": "paragraph",
      "id": "c01acff852ed3435",
      "text": "Firing off asynchronous operations from inside a loop is one of the most often screwed up things in JavaScript. All of the same properties that so often come to our aid and make our lives easier combine to blind side us in a hard to spot way."
    },
    {
      "type": "paragraph",
      "id": "950f832c8d0afccf",
      "text": "The crux of the problem is scope. A JavaScript function can access any variable that is defined where the function is defined, but they have their current value, not necessarily the same as when the function was defined."
    },
    {
      "type": "code",
      "id": "de762b8c97a7fd31",
      "text": "  var input = [ 'foo', 'bar', 'baz'];\n  var orderedOutput = []; // or is it?\n\n  for (var i = 0; i < input.length; i++) {\n    // 'i' right here has the value you expect,\n    // counting from 0 to 2. Same with the line\n    // below where we get the thing from the input\n    // array.\n    doAsyncThing(input[i], function (err, results) {\n      orderedOutput[i] = results; // 'i' here is 3.\n      // why 3? because this is the future.\n      // we are referencing the outside i which at\n      // this point has gone through the\n      // entire array, failed the check\n      // to make sure it is shorter than\n      // 'input.length' and is sitting there unused.\n\n      console.log(orderedOutput);\n\n      // Each time this function is called i will\n      // always be 3, so ordered output will look\n      // something like: \"[ , , , 'We got: foo' ]\"\n      // each time it gets logged, with the message\n      // changing each time.\n    })\n  }\n  function doAsyncThing (thing, callback) {\n    // wait up to a second.\n    setTimeout(function () {\n      callback(null, 'We got: ' + thing)\n    }, 1000 * Math.random());\n  }"
    },
    {
      "type": "paragraph",
      "id": "05da582c284342e6",
      "text": "The easy answer to the problem above is to use es5's [].forEach, or lodash's _.forEach to iterate over the array instead of a for loop. That way each iteration gets its own copy of i who's value never changes, because each one is defined in its own function scope."
    },
    {
      "type": "code",
      "id": "f096946d39d39b60",
      "text": "  var input = [ 'foo', 'bar', 'baz'];\n  var orderedOutput = []; // or is it?\n  input.forEach(function (thing, i) {\n    doAsyncThing(thing, function (err, results) {\n      orderedOutput[i] = results;\n      // 'i' here is the i that corresponds\n      // to the correct item.\n      console.log(orderedOutput);\n    })\n  })\n  function doAsyncThing (thing, callback) {\n    // wait up to a second.\n    setTimeout(function () {\n      callback(null, 'We got: ' + thing)\n    }, 1000 * Math.random());\n  }"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Loops and asynchronous operations",
        "story": []
      },
      "date": 1430895367194
    },
    {
      "item": {
        "type": "factory",
        "id": "a98f27115f0a9981"
      },
      "id": "a98f27115f0a9981",
      "type": "add",
      "date": 1430895369616
    },
    {
      "type": "remove",
      "id": "a98f27115f0a9981",
      "date": 1430895380966
    },
    {
      "item": {
        "type": "factory",
        "id": "c01acff852ed3435"
      },
      "id": "c01acff852ed3435",
      "type": "add",
      "date": 1430895449682
    },
    {
      "type": "edit",
      "id": "c01acff852ed3435",
      "item": {
        "type": "paragraph",
        "id": "c01acff852ed3435",
        "text": "Firing off asynchronous operations from inside a loop is one of the most often screwed up things in JavaScript. All of the same properties that so often come to our aid and make our lives easier combine to blind side us in a hard to spot way."
      },
      "date": 1430895597654
    },
    {
      "item": {
        "type": "factory",
        "id": "950f832c8d0afccf"
      },
      "id": "950f832c8d0afccf",
      "type": "add",
      "after": "c01acff852ed3435",
      "date": 1430895610008
    },
    {
      "type": "edit",
      "id": "950f832c8d0afccf",
      "item": {
        "type": "paragraph",
        "id": "950f832c8d0afccf",
        "text": "The crux of the problem is scope. A JavaScript function can access any variable that is defined where the function is defined, but they have their current value, not necessarily the same as when the function was defined."
      },
      "date": 1430895777868
    },
    {
      "item": {
        "type": "factory",
        "id": "de762b8c97a7fd31"
      },
      "id": "de762b8c97a7fd31",
      "type": "add",
      "after": "950f832c8d0afccf",
      "date": 1430895800192
    },
    {
      "type": "edit",
      "id": "de762b8c97a7fd31",
      "item": {
        "type": "code",
        "id": "de762b8c97a7fd31",
        "text": "  var input = [ 'foo', 'bar', 'baz'];\n  var orderedOutput = []; // or is it?\n\n  for (var i = 0; i < input.length; i++) {\n    // 'i' right here has the value you expect,\n    // counting from 0 to 2. Same with the line\n    // below where we get the thing from the input\n    // array.\n    doAsyncThing(input[i], function (err, results) {\n      orderedOutput[i] = results; // 'i' here is 3.\n      // why 3? because this is the future.\n      // we are referencing the outside i which at this\n      // point has gone through the entire array, failed\n      // the check to make sure it is shorter than\n      // 'input.length' and is sitting there unused.\n\n      console.log(orderedOutput);\n\n      // Each time this function is called i will\n      // always be 3, so ordered output will look\n      // something like: \"[ , , , 'We got: foo' ]\"\n      // each time it gets logged, with the message\n      // changing each time.\n    })\n  }\n  function doAsyncThing (thing, callback) {\n    // wait up to a second.\n    setTimeout(function () {\n      callback(null, 'We got: ' + thing)\n    }, 1000 * Math.random());\n  }"
      },
      "date": 1430895812080
    },
    {
      "type": "edit",
      "id": "de762b8c97a7fd31",
      "item": {
        "type": "code",
        "id": "de762b8c97a7fd31",
        "text": "  var input = [ 'foo', 'bar', 'baz'];\n  var orderedOutput = []; // or is it?\n\n  for (var i = 0; i < input.length; i++) {\n    // 'i' right here has the value you expect,\n    // counting from 0 to 2. Same with the line\n    // below where we get the thing from the input\n    // array.\n    doAsyncThing(input[i], function (err, results) {\n      orderedOutput[i] = results; // 'i' here is 3.\n      // why 3? because this is the future.\n      // we are referencing the outside i which at\n      // this point has gone through the\n      // entire array, failed the check\n      // to make sure it is shorter than\n      // 'input.length' and is sitting there unused.\n\n      console.log(orderedOutput);\n\n      // Each time this function is called i will\n      // always be 3, so ordered output will look\n      // something like: \"[ , , , 'We got: foo' ]\"\n      // each time it gets logged, with the message\n      // changing each time.\n    })\n  }\n  function doAsyncThing (thing, callback) {\n    // wait up to a second.\n    setTimeout(function () {\n      callback(null, 'We got: ' + thing)\n    }, 1000 * Math.random());\n  }"
      },
      "date": 1430895926629
    },
    {
      "item": {
        "type": "factory",
        "id": "05da582c284342e6"
      },
      "id": "05da582c284342e6",
      "type": "add",
      "after": "de762b8c97a7fd31",
      "date": 1430895972454
    },
    {
      "type": "edit",
      "id": "05da582c284342e6",
      "item": {
        "type": "paragraph",
        "id": "05da582c284342e6",
        "text": "The easy answer to the problem above is to use es5's [].forEach, or lodash's _.forEach to iterate over the array instead of a for loop. That way each iteration gets its own copy of i who's value never changes, because each one is defined in its own function scope."
      },
      "date": 1430896051340
    },
    {
      "item": {
        "type": "factory",
        "id": "f096946d39d39b60"
      },
      "id": "f096946d39d39b60",
      "type": "add",
      "after": "05da582c284342e6",
      "date": 1430896086362
    },
    {
      "type": "edit",
      "id": "f096946d39d39b60",
      "item": {
        "type": "code",
        "id": "f096946d39d39b60",
        "text": "  var input = [ 'foo', 'bar', 'baz'];\n  var orderedOutput = []; // or is it?\n  input.forEach(function (thing, i) {\n    doAsyncThing(thing, function (err, results) {\n      orderedOutput[i] = results;\n      // 'i' here is the i that corresponds\n      // to the correct item.\n      console.log(orderedOutput);\n    })\n  })\n  function doAsyncThing (thing, callback) {\n    // wait up to a second.\n    setTimeout(function () {\n      callback(null, 'We got: ' + thing)\n    }, 1000 * Math.random());\n  }"
      },
      "date": 1430896273973
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1652868326836
    }
  ]
}