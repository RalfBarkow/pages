{
  "title": "PROXY Request",
  "story": [
    {
      "type": "markdown",
      "id": "0386d8f74354cab1",
      "text": "\n"
    },
    {
      "type": "markdown",
      "id": "12cee4f7bfa4e544",
      "text": "Here we try to learn, why a `PROXY Request` sometimes fails with an, e.g., ```Error: getaddrinfo ENOTFOUND hello.>\nJul 26 09:00:37 nixos wiki[788]:     at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:66:26)```\n"
    },
    {
      "type": "markdown",
      "id": "b2f41ff3833522eb",
      "text": "See [[Proxy request for site owner]]"
    },
    {
      "type": "markdown",
      "id": "6edc71a1fdbe13e3",
      "text": "[[Securing Transports]]\n> Use a proxy server in front of the transporters, and wiki, and make the transporters available within the wiki domain – this is the mechanism we will look at here.\n"
    },
    {
      "type": "markdown",
      "id": "fbbe475618165a8f",
      "text": "[[Federated Wiki with Nginx]]\n> We will use Nginx as a reverse proxy in front of the Federated Wiki server. \n"
    },
    {
      "type": "markdown",
      "id": "8cfd6fd7be2b6b65",
      "text": "[[Origin Server]]\n> **Remote Proxy** would be when our browser asks the origin server to retrieve the remote page on our behalf. We use remote proxy when following remote links. This gives the origin server an opportunity to cache the remote page but we've yet to offer this. \n"
    },
    {
      "type": "markdown",
      "id": "ffa00dab06968a54",
      "text": "[[Layered Authentication]]\n> This layered approach will be provided by the use of a proxy, that handles all wiki requests ensuring that only authorized requests reach the wiki server."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "PROXY Request",
        "story": []
      },
      "date": 1627292638156
    },
    {
      "item": {
        "type": "factory",
        "id": "0386d8f74354cab1"
      },
      "id": "0386d8f74354cab1",
      "type": "add",
      "date": 1627292722409
    },
    {
      "type": "edit",
      "id": "0386d8f74354cab1",
      "item": {
        "type": "markdown",
        "id": "0386d8f74354cab1",
        "text": "[[Securing Transports]] "
      },
      "date": 1627292730613
    },
    {
      "type": "edit",
      "id": "0386d8f74354cab1",
      "item": {
        "type": "markdown",
        "id": "0386d8f74354cab1",
        "text": "[[Securing Transports]]\n> Use a proxy server in front of the transporters, and wiki, and make the transporters available within the wiki domain - this is the mechanism we will look at here."
      },
      "date": 1627292771132
    },
    {
      "type": "edit",
      "id": "0386d8f74354cab1",
      "item": {
        "type": "markdown",
        "id": "0386d8f74354cab1",
        "text": "[[Securing Transports]]\n> Use a proxy server in front of the transporters, and wiki, and make the transporters available within the wiki domain - this is the mechanism we will look at here.\n"
      },
      "date": 1627292785064
    },
    {
      "type": "add",
      "id": "fbbe475618165a8f",
      "item": {
        "type": "markdown",
        "id": "fbbe475618165a8f",
        "text": "[[Federated Wiki with Nginx]]"
      },
      "after": "0386d8f74354cab1",
      "date": 1627292789585
    },
    {
      "type": "edit",
      "id": "fbbe475618165a8f",
      "item": {
        "type": "markdown",
        "id": "fbbe475618165a8f",
        "text": "[[Federated Wiki with Nginx]]\n> We will use Nginx as a reverse proxy in front of the Federated Wiki server. "
      },
      "date": 1627292811858
    },
    {
      "type": "edit",
      "id": "fbbe475618165a8f",
      "item": {
        "type": "markdown",
        "id": "fbbe475618165a8f",
        "text": "[[Federated Wiki with Nginx]]\n> We will use Nginx as a reverse proxy in front of the Federated Wiki server. \n"
      },
      "date": 1627292837125
    },
    {
      "type": "add",
      "id": "8cfd6fd7be2b6b65",
      "item": {
        "type": "markdown",
        "id": "8cfd6fd7be2b6b65",
        "text": "[[Origin Server]]"
      },
      "after": "fbbe475618165a8f",
      "date": 1627292844460
    },
    {
      "type": "edit",
      "id": "8cfd6fd7be2b6b65",
      "item": {
        "type": "markdown",
        "id": "8cfd6fd7be2b6b65",
        "text": "[[Origin Server]]\n> <b>Remote Proxy</b> would be when our browser asks the origin server to retrieve the remote page on our behalf. We use remote proxy when following remote links. This gives the origin server an opportunity to cache the remote page but we've yet to offer this. "
      },
      "date": 1627292864260
    },
    {
      "type": "edit",
      "id": "8cfd6fd7be2b6b65",
      "item": {
        "type": "markdown",
        "id": "8cfd6fd7be2b6b65",
        "text": "[[Origin Server]]\n> **Remote Proxy** would be when our browser asks the origin server to retrieve the remote page on our behalf. We use remote proxy when following remote links. This gives the origin server an opportunity to cache the remote page but we've yet to offer this. "
      },
      "date": 1627292879276
    },
    {
      "type": "edit",
      "id": "8cfd6fd7be2b6b65",
      "item": {
        "type": "markdown",
        "id": "8cfd6fd7be2b6b65",
        "text": "[[Origin Server]]\n> **Remote Proxy** would be when our browser asks the origin server to retrieve the remote page on our behalf. We use remote proxy when following remote links. This gives the origin server an opportunity to cache the remote page but we've yet to offer this. \n"
      },
      "date": 1627292904153
    },
    {
      "type": "add",
      "id": "ffa00dab06968a54",
      "item": {
        "type": "markdown",
        "id": "ffa00dab06968a54",
        "text": "[[Layered Authentication]]\n> "
      },
      "after": "8cfd6fd7be2b6b65",
      "date": 1627292911168
    },
    {
      "type": "edit",
      "id": "ffa00dab06968a54",
      "item": {
        "type": "markdown",
        "id": "ffa00dab06968a54",
        "text": "[[Layered Authentication]]\n> This layered approach will be provided by the use of a proxy, that handles all wiki requests ensuring that only authorized requests reach the wiki server."
      },
      "date": 1627292927186
    },
    {
      "type": "edit",
      "id": "0386d8f74354cab1",
      "item": {
        "type": "markdown",
        "id": "0386d8f74354cab1",
        "text": "[[Securing Transports]]\n> Use a proxy server in front of the transporters, and wiki, and make the transporters available within the wiki domain – this is the mechanism we will look at here.\n"
      },
      "date": 1627292939735
    },
    {
      "type": "edit",
      "id": "0386d8f74354cab1",
      "item": {
        "type": "markdown",
        "id": "0386d8f74354cab1",
        "text": "\n"
      },
      "date": 1627294130108
    },
    {
      "type": "add",
      "id": "12cee4f7bfa4e544",
      "item": {
        "type": "markdown",
        "id": "12cee4f7bfa4e544",
        "text": "Here we try to learn, why a `PROXY Request` sometimes fails with an \n[[Securing Transports]]\n> Use a proxy server in front of the transporters, and wiki, and make the transporters available within the wiki domain – this is the mechanism we will look at here.\n"
      },
      "after": "0386d8f74354cab1",
      "date": 1627294159127
    },
    {
      "type": "edit",
      "id": "12cee4f7bfa4e544",
      "item": {
        "type": "markdown",
        "id": "12cee4f7bfa4e544",
        "text": "Here we try to learn, why a `PROXY Request` sometimes fails with an Error: getaddrinfo ENOTFOUND hello.>\nJul 26 09:00:37 nixos wiki[788]:     at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:66:26\n"
      },
      "date": 1627294265956
    },
    {
      "type": "add",
      "id": "6edc71a1fdbe13e3",
      "item": {
        "type": "markdown",
        "id": "6edc71a1fdbe13e3",
        "text": "[[Securing Transports]]\n> Use a proxy server in front of the transporters, and wiki, and make the transporters available within the wiki domain – this is the mechanism we will look at here.\n"
      },
      "after": "12cee4f7bfa4e544",
      "date": 1627294276433
    },
    {
      "type": "edit",
      "id": "12cee4f7bfa4e544",
      "item": {
        "type": "markdown",
        "id": "12cee4f7bfa4e544",
        "text": "Here we try to learn, why a `PROXY Request` sometimes fails with an ```Error: getaddrinfo ENOTFOUND hello.>\nJul 26 09:00:37 nixos wiki[788]:     at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:66:26```\n"
      },
      "date": 1627294296500
    },
    {
      "type": "edit",
      "id": "12cee4f7bfa4e544",
      "item": {
        "type": "markdown",
        "id": "12cee4f7bfa4e544",
        "text": "Here we try to learn, why a `PROXY Request` sometimes fails with an, e.g., ```Error: getaddrinfo ENOTFOUND hello.>\nJul 26 09:00:37 nixos wiki[788]:     at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:66:26```\n"
      },
      "date": 1627294309742
    },
    {
      "type": "edit",
      "id": "12cee4f7bfa4e544",
      "item": {
        "type": "markdown",
        "id": "12cee4f7bfa4e544",
        "text": "Here we try to learn, why a `PROXY Request` sometimes fails with an, e.g., ```Error: getaddrinfo ENOTFOUND hello.>\nJul 26 09:00:37 nixos wiki[788]:     at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:66:26)```\n"
      },
      "date": 1627294835583
    },
    {
      "type": "add",
      "id": "b2f41ff3833522eb",
      "item": {
        "type": "markdown",
        "id": "b2f41ff3833522eb",
        "text": "See [[Proxy request for site owner]]"
      },
      "after": "12cee4f7bfa4e544",
      "date": 1627297652212
    }
  ]
}