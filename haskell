{
  "title": "Haskell",
  "story": [
    {
      "type": "paragraph",
      "id": "f32a5be7c11acb8a",
      "text": "There is a certain mind-set, a certain [[Viewpoint]] of the world, and a certain approach to problem solving that collectively work best when programming in Haskell (this is true for any programming paradigm). If you teach only Haskell language details to a C programmer, he or she is likely to write ugly, incomprehensible functional programs. But if you teach how to think differently, how to see problems in a different light, functional solutions will come easily, and elegant Haskell programs will result."
    },
    {
      "type": "paragraph",
      "id": "f2d4dddcf454bc9f",
      "text": "[[Music]] has many ties to mathematics. Combining the elegant mathematical nature of Haskell with that of music is as natural as singing a nursery tune. Using a high-level language to express musical ideas is, of course, not new. But Haskell is unique in its insistence on purity (no side effects), and this alone makes it particularly suitable for expressing musical ideas. By focusing on what a musical entity is, rather than on how to create it, we allow musical ideas to take their natural form as Haskell expressions. Haskell’s many abstraction mechanisms allow us to write computer music programs that are elegant, concise, yet powerful. We will consistently attempt to let the music express itself as naturally as possible, without encoding it in terms of irrelevant language details."
    },
    {
      "type": "pagefold",
      "id": "0b91daa74c2cbe24",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "e4f4b51d912eece0",
      "text": "HUDAK, Paul and QUICK, Donya, 2018. The Haskell school of music: from signals to symphonies. Cambridge, United Kingdom ; New York, NY: Cambridge University Press. ISBN 978-1-108-41675-7. \n"
    },
    {
      "type": "pagefold",
      "id": "dc4d8ba8ca508924",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "47679720bd7f4366",
      "site": "wiki.ralfbarkow.ch",
      "slug": "posix-programs-in-elm",
      "title": "Posix programs in Elm",
      "text": "Write your tools and build scripts in Elm. [https://github.com/albertdahlin/elm-posix#posix-programs-in-elm github]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Haskell",
        "story": []
      },
      "date": 1684790842358
    },
    {
      "id": "e4f4b51d912eece0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e4f4b51d912eece0",
        "text": "HUDAK, Paul and QUICK, Donya, 2018. The [[Haskell]] school of music: from signals to symphonies. Cambridge, United Kingdom ; New York, NY: Cambridge University Press. ISBN 978-1-108-41675-7. \n"
      },
      "attribution": {
        "page": "2023-05-22"
      },
      "date": 1684790846484
    },
    {
      "type": "edit",
      "id": "e4f4b51d912eece0",
      "item": {
        "type": "paragraph",
        "id": "e4f4b51d912eece0",
        "text": "HUDAK, Paul and QUICK, Donya, 2018. The Haskell school of music: from signals to symphonies. Cambridge, United Kingdom ; New York, NY: Cambridge University Press. ISBN 978-1-108-41675-7. \n"
      },
      "date": 1684790854855
    },
    {
      "item": {
        "type": "factory",
        "id": "dc4d8ba8ca508924"
      },
      "id": "dc4d8ba8ca508924",
      "type": "add",
      "after": "e4f4b51d912eece0",
      "date": 1684790870853
    },
    {
      "type": "edit",
      "id": "dc4d8ba8ca508924",
      "item": {
        "type": "pagefold",
        "id": "dc4d8ba8ca508924",
        "text": "~"
      },
      "date": 1684790873904
    },
    {
      "item": {
        "type": "factory",
        "id": "47679720bd7f4366"
      },
      "id": "47679720bd7f4366",
      "type": "add",
      "after": "dc4d8ba8ca508924",
      "date": 1684790875715
    },
    {
      "type": "edit",
      "id": "47679720bd7f4366",
      "item": {
        "type": "reference",
        "id": "47679720bd7f4366",
        "site": "wiki.ralfbarkow.ch",
        "slug": "posix-programs-in-elm",
        "title": "Posix programs in Elm",
        "text": "Write your tools and build scripts in Elm. [https://github.com/albertdahlin/elm-posix#posix-programs-in-elm github]"
      },
      "date": 1684790878299
    },
    {
      "item": {
        "type": "factory",
        "id": "f32a5be7c11acb8a"
      },
      "id": "f32a5be7c11acb8a",
      "type": "add",
      "after": "47679720bd7f4366",
      "date": 1684790908420
    },
    {
      "id": "f32a5be7c11acb8a",
      "type": "move",
      "order": [
        "f32a5be7c11acb8a",
        "e4f4b51d912eece0",
        "dc4d8ba8ca508924",
        "47679720bd7f4366"
      ],
      "date": 1684790910022
    },
    {
      "type": "edit",
      "id": "f32a5be7c11acb8a",
      "item": {
        "type": "paragraph",
        "id": "f32a5be7c11acb8a",
        "text": "There is a certain mind-set, a certain viewpoint of the world, and a certain approach to problem solving that collectively work best when programming in Haskell (this is true for any programming paradigm). If you teach only Haskell language details to a C programmer, he or she is likely to write ugly, incomprehensible functional programs. But if you teach how to think differently, how to see problems in a different light, functional solutions will come easily, and elegant Haskell programs will result."
      },
      "date": 1684790911323
    },
    {
      "item": {
        "type": "factory",
        "id": "0b91daa74c2cbe24"
      },
      "id": "0b91daa74c2cbe24",
      "type": "add",
      "after": "47679720bd7f4366",
      "date": 1684790913782
    },
    {
      "id": "0b91daa74c2cbe24",
      "type": "move",
      "order": [
        "f32a5be7c11acb8a",
        "0b91daa74c2cbe24",
        "e4f4b51d912eece0",
        "dc4d8ba8ca508924",
        "47679720bd7f4366"
      ],
      "date": 1684790915988
    },
    {
      "type": "edit",
      "id": "0b91daa74c2cbe24",
      "item": {
        "type": "pagefold",
        "id": "0b91daa74c2cbe24",
        "text": "~"
      },
      "date": 1684790918470
    },
    {
      "type": "edit",
      "id": "f32a5be7c11acb8a",
      "item": {
        "type": "paragraph",
        "id": "f32a5be7c11acb8a",
        "text": "There is a certain mind-set, a certain [[Viewpoint]] of the world, and a certain approach to problem solving that collectively work best when programming in Haskell (this is true for any programming paradigm). If you teach only Haskell language details to a C programmer, he or she is likely to write ugly, incomprehensible functional programs. But if you teach how to think differently, how to see problems in a different light, functional solutions will come easily, and elegant Haskell programs will result."
      },
      "date": 1684790932994
    },
    {
      "type": "add",
      "id": "f2d4dddcf454bc9f",
      "item": {
        "type": "paragraph",
        "id": "f2d4dddcf454bc9f",
        "text": "[[Music]] has many ties to mathematics. Combining the elegant mathematical nature of Haskell with that of music is as natural as singing a nursery tune. Using a high-level language to express musical ideas is, of course, not new. But Haskell is unique in its insistence on purity (no side effects), and this alone makes it particularly suitable for expressing musical ideas. By focusing on what a musical entity is, rather than on how to create it, we allow musical ideas to take their natural form as Haskell expressions. Haskell’s many abstraction mechanisms allow us to write computer music programs that are elegant, concise, yet powerful. We will consistently attempt to let the music express itself as naturally as possible, without encoding it in terms of irrelevant language details."
      },
      "after": "f32a5be7c11acb8a",
      "date": 1684790970734
    }
  ]
}