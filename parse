{
  "title": "parse",
  "story": [
    {
      "type": "paragraph",
      "id": "aedd04d69f0dd51e",
      "text": "‚áê [[MiniLatex]] ‚áí Driver [https://github.com/RalfBarkow/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Driver.elm#L55-L63 code] ‚áí [[AST]]"
    },
    {
      "type": "code",
      "id": "00d330748ad52b1a",
      "text": "{-| Parse the given text and return an AST represeting it.\n-}\nparse : String -> List (List LatexExpression)\nparse text =\n    text\n        |> Paragraph.logicalParagraphify\n        |> List.map MiniLatexParser.parse\n\n"
    },
    {
      "type": "pagefold",
      "id": "5ce6164bf5052923",
      "text": "üî∫"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "elmparser",
      "title": "elm/parser",
      "text": "[[Evan Czaplicki]]. 2020. [[Elm Parser]]. [https://package.elm-lang.org/packages/elm/parser/latest/ page]",
      "id": "686d986ffa07c37b"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "scratch",
      "title": "scratch",
      "text": "ParseJson Message for a Future story",
      "id": "a67093c82812d05d"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "gobble-it-up",
      "title": "Gobble It Up",
      "text": "‚áí [[Elm Parser]] ‚áí [[Parser Pipelines]]",
      "id": "ce95be86d6eced94"
    },
    {
      "type": "video",
      "id": "66b902d4335c6227",
      "text": "YOUTUBE M9ulswr1z0E\n\"[[Demystifying Parsers]]\" by [[Tereza Sokol]]"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "hammurabi-step",
      "title": "Hammurabi Step",
      "text": "We compute next year's state from this year's state, the ruler's decisions we have parsed, and some formulas that make the game interesting.",
      "id": "3cb7f7a7b3b52f61"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "the-lexical-file",
      "title": "The Lexical File",
      "text": "is an in-house dictionary of corporate knowledge. Entries in this file are noun phrases parsed out from the firm documents. Under the heading of a noun phrase, there are:",
      "id": "4a9327561020e506"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parser",
      "title": "Parser",
      "text": "Answer a parser that accepts the receiving string.",
      "id": "9cdd6b5a5d515327"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "expression-parsing",
      "title": "Expression Parsing",
      "text": "We wonder if we can parse an arithmetic expression and return an [[Abstract Syntax Tree]] as a graph. Try this one: [http://hsc.fed.wiki/view/expression-parsing page]",
      "id": "e4e582c3e82e8aab"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parsing-expression-grammar",
      "title": "Parsing Expression Grammar",
      "text": "[https://www.lukas-renggli.ch/blog/petitparser-1 Writing Parsers with PetitParser] ‚Äì [[Lukas Renggli]]",
      "id": "82933a5159c46d0a"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "pegjs",
      "title": "PEG.js",
      "text": "[[PEG.js]] is a simple parser generator for JavaScript that produces fast parsers with excellent error reporting. You can use it to process complex data or computer languages and build transformers, interpreters, compilers and other tools easily.  [https://pegjs.org/ site]",
      "id": "e687e5b1b3390cfa"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parser-pipelines",
      "title": "Parser Pipelines",
      "text": "Regular expressions are quite confusing and difficult to use. This library provides a coherent alternative that handles more cases and produces clearer code. [https://github.com/elm/parser#parser github], [https://package.elm-lang.org/packages/elm/parser/latest page]",
      "id": "e6f4626ce6d6985e"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "ppcompositeparser",
      "title": "PPCompositeParser",
      "text": "is a composed parser built from various primitive parsers. ",
      "id": "185c6d6a7fedd688"
    },
    {
      "type": "markdown",
      "id": "ee9b01b670923735",
      "text": "> Every production in the receiver is specified as a method that returns its parser. "
    },
    {
      "type": "reference",
      "id": "638b78e7f95c9e6e",
      "site": "wiki.ralfbarkow.ch",
      "slug": "natural-language-parser",
      "title": "Natural Language Parser",
      "text": "that analyzes the syntactic structure of an input [[Sentence]] in relation to a specified grammar and generates all possible syntax trees of the sentence, along with estimates of the probability of each being the correct parse."
    },
    {
      "type": "paragraph",
      "id": "f08cbad7d6ba2f13",
      "text": "Parse Path: The tree path from the token‚Äôs leaf\nnode to the root of the syntactic parse tree. ([[NavyTime]], p. 73)"
    },
    {
      "type": "reference",
      "id": "fa6fe400c8035e35",
      "site": "thompson.wiki.innovateoregon.org",
      "slug": "path",
      "title": "Path",
      "text": "‚áí [[Path Dialect]]"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "ical-blocks-as-parsed",
      "title": "iCal Blocks as Parsed",
      "text": "Blocks found in the order that they appear in an iCal file. Some editing for line length. The file contained 60 lines numbered 0 to 59 as is customary in javascript.",
      "id": "0e2e0ea7d1179991"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "approach-to-parsing",
      "title": "Approach to Parsing",
      "text": "‚áí [[PetitParser]] ‚áí parse",
      "id": "9d55a574319c6548"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "compromise",
      "title": "Compromise",
      "text": "is a [[JavaScript]] library that can parse, transform, and help use text. [https://github.com/spencermountain/compromise github], [https://compromise.cool/ site], [https://observablehq.com/@spencermountain/nlp-compromise docs]",
      "id": "7363ba2382b582be"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "predictive-parser",
      "title": "Predictive Parser",
      "text": "is a recursive descent parser with no backtracking or backup. It is a top-down parser that does not require backtracking. At each step, the choice of the rule to be expanded is made upon the next terminal symbol.",
      "id": "bbcb1ee22ad2c9b4"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "tree-parsers",
      "title": "Tree Parsers",
      "text": "recognizers that process [[Abstract Syntax Tree]]s instead of symbol sequences.",
      "id": "33984803fe930c2a"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parse-dont-validate",
      "title": "Parse, Don‚Äôt Validate",
      "text": "Because [[elm-pages]] has a build step, you know that your BackendTask.Http requests succeeded, your decoders succeeded, your custom BackendTask validations succeeded, and everything went smoothly. If something went wrong, you get a build failure and can deal with the issues before the site goes live. That means your users won't see those errors, and as a developer you don't need to handle those error cases in your code! Think of it as \"parse, don't validate\", but for your entire build. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "differential-parse-rendering",
      "title": "Differential Parse-Rendering",
      "text": "can leave parts of the document, e.g. section numbers out-of-sync. To bring them back into sync, one must do a full render.",
      "id": "a9bc03d737d80d64"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parse-what-you-expect",
      "title": "Parse What You Expect",
      "text": "Notes [[Ward]] wrote to organize the talk. [https://c2.com/~ward/sao/TechIgnite-v1/outline.txt txt] (presented at SAO's TechIgnite V1. [https://c2.com/~ward/sao/TechIgnite-v1/ site])",
      "id": "a4d1feba68efcf3f"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parse-wiki-style-links",
      "title": "Parse Wiki-Style Links",
      "text": "and Render Them as Anchors [‚áí [[MiniLatex]]: a Parser-Renderer for ‚Ä¶ ‚áê [[Render Wiki Link]]]",
      "id": "1917a57c43b95ad5"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "filter-before-you-parse",
      "title": "Filter before You Parse",
      "text": "Exploratory big data applications often run on raw unstructured or semi-structured data formats, such as JSON files or text logs. These applications can spend 80‚Äì90% of their execution time parsing the data.",
      "id": "444b178e5a274ff6"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "glr-parser",
      "title": "GLR Parser",
      "text": "A GLR parser (GLR standing for \"Generalized LR\", where L stands for \"left-to-right\" and R stands for \"rightmost (derivation)\") is an extension of an LR parser algorithm to handle non-deterministic and ambiguous grammars.",
      "id": "78a0774bf53bc003"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "libcypher-parser",
      "title": "libcypher-parser",
      "text": "libcypher-parser is a parser library and validation (lint) tool for [[Cypher]], the graph query language. The parser is written in C, and is intended for building tools and libraries in various languages. [https://cleishm.github.io/libcypher-parser/ github]",
      "id": "a31caef7ecbbdd82"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "import-cypher-from-arrow",
      "title": "Import Cypher from Arrow",
      "text": "We tried to parse the [[cypher]] syntax used to add graph elements to [[neo4j]]. See [[Import from Arrow]].",
      "id": "df63dcf180388fe0"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "recursive-descent-parser",
      "title": "Recursive Descent Parser",
      "text": "It is a kind of Top-Down Parser. [https://www.geeksforgeeks.org/recursive-descent-parser/ page]",
      "id": "bc1b576325b69087"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "static-types-for-parsers",
      "title": "Static Types for Parsers",
      "text": "All of our [[Seran]] [[Outpost]] experiments teach about the tools and libraries preferred by [[Deno]].",
      "id": "570d61060f4a68a1"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parser-generator-for-javascript",
      "title": "Parser Generator for Javascript",
      "text": "Documentation [https://pegjs.org/documentation page]",
      "id": "df0b60222e208705"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "context-free-parsing",
      "title": "Context-Free Parsing",
      "text": "All efficient algorithms for parsing context-free grammars make use of some kind of well-formed substring table. Earley's algorithm (1970) is perhaps the best-known example. The algorithm builds up a vector of parse lists, where each entry in a parse list is an item ‚Äì a production rule with one indicator showing how much of the righthand side has been parsed, and another saying where the parse started.",
      "id": "c86043859741aec3"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "smacc",
      "title": "Smacc",
      "text": "(Smalltalk Compiler-Compiler) is a freely available parser generator for Smalltalk. It generates LR parsers and is a replacement for the T-Gen parser generator.",
      "id": "9e3816a0c58d2364"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "antlr",
      "title": "ANTLR",
      "text": "is a lexer and parser generator that allows the generation of [[Tree Parsers]].",
      "id": "5fe7800710b289fc"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "building-a-parser-from-an-antlr-grammar",
      "title": "Building a Parser from an ANTLR Grammar",
      "text": "If you already have an [[ANTLR]] grammar for your language lying around or know how to get to one‚Äîand many popular languages already have such a grammar‚Äî, you can get to a simple parser in a matter of minutes.",
      "id": "3e016436cf17bfee"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "modelcc",
      "title": "ModelCC",
      "text": "We introduce [[ModelCC]], a model-based tool for language specification. ModelCC acts as a parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.",
      "id": "fcde73d759efa967"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "petitparser2",
      "title": "PetitParser2",
      "text": "is a framework for building parsers. [https://github.com/kursjan/petitparser2 github]",
      "id": "525f8e65741f6d6f"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "smaccglrparser",
      "title": "SmaCCGLRParser",
      "text": "is an abstract superclass for all GLR generated parsers in [[SmaCC]].",
      "id": "59fd678f2a05eeed"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "verveinej",
      "title": "VerveineJ",
      "text": "A Java to JSON/MSE parser",
      "id": "52b4d1fcefa17fc0"
    },
    {
      "type": "pagefold",
      "id": "dc0562a480e9204b",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "d7e5ecb5bf483179",
      "text": "parse | BrE p…ëÀêz, AmE p…ërs |\ntransitive verb\n1 (Linguistics) grammatisch beschreiben ‚ÄπWort‚Ä∫ grammatisch analysieren ‚ÄπSatz‚Ä∫\n2 (Computing) parsen"
    }
  ],
  "journal": [
    {
      "item": {
        "type": "markdown",
        "id": "d7e5ecb5bf483179",
        "text": "parse | BrE p…ëÀêz, AmE p…ërs |\ntransitive verb\n1 (Linguistics) grammatisch beschreiben ‚ÄπWort‚Ä∫ grammatisch analysieren ‚ÄπSatz‚Ä∫\n2 (Computing) parsen"
      },
      "id": "d7e5ecb5bf483179",
      "type": "add",
      "date": 1675259648526
    },
    {
      "type": "edit",
      "id": "d7e5ecb5bf483179",
      "item": {
        "type": "markdown",
        "id": "d7e5ecb5bf483179",
        "text": "parse | BrE p…ëÀêz, AmE p…ërs |\ntransitive verb\n1 (Linguistics) grammatisch beschreiben ‚ÄπWort‚Ä∫ grammatisch analysieren ‚ÄπSatz‚Ä∫\n2 (Computing) parsen"
      },
      "date": 1675259650620
    },
    {
      "type": "fork",
      "date": 1675259652326
    },
    {
      "item": {
        "type": "factory",
        "id": "dc0562a480e9204b"
      },
      "id": "dc0562a480e9204b",
      "type": "add",
      "after": "d7e5ecb5bf483179",
      "date": 1675259714354
    },
    {
      "type": "edit",
      "id": "dc0562a480e9204b",
      "item": {
        "type": "pagefold",
        "id": "dc0562a480e9204b",
        "text": "~"
      },
      "date": 1675259716822
    },
    {
      "id": "dc0562a480e9204b",
      "type": "move",
      "order": [
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1675259718620
    },
    {
      "item": {
        "type": "factory",
        "id": "638b78e7f95c9e6e"
      },
      "id": "638b78e7f95c9e6e",
      "type": "add",
      "after": "d7e5ecb5bf483179",
      "date": 1675259724734
    },
    {
      "id": "638b78e7f95c9e6e",
      "type": "move",
      "order": [
        "638b78e7f95c9e6e",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1675259726473
    },
    {
      "type": "edit",
      "id": "638b78e7f95c9e6e",
      "item": {
        "type": "reference",
        "id": "638b78e7f95c9e6e",
        "site": "wiki.ralfbarkow.ch",
        "slug": "natural-language-parser",
        "title": "Natural Language Parser",
        "text": "A natural language parser is described that analyzes the syntactic structure of an input sentence in relation to a specified grammar and generates all possible syntax trees of the sentence, along with estimates of the probability of each being the correct parse."
      },
      "date": 1675259727924
    },
    {
      "type": "edit",
      "id": "638b78e7f95c9e6e",
      "item": {
        "type": "reference",
        "id": "638b78e7f95c9e6e",
        "site": "wiki.ralfbarkow.ch",
        "slug": "natural-language-parser",
        "title": "Natural Language Parser",
        "text": "A natural language parser is described that analyzes the syntactic structure of an input [[Sentence]] in relation to a specified grammar and generates all possible syntax trees of the sentence, along with estimates of the probability of each being the correct parse."
      },
      "date": 1675259747520
    },
    {
      "item": {
        "type": "factory",
        "id": "fa6fe400c8035e35"
      },
      "id": "fa6fe400c8035e35",
      "type": "add",
      "after": "d7e5ecb5bf483179",
      "date": 1675259759474
    },
    {
      "type": "edit",
      "id": "fa6fe400c8035e35",
      "item": {
        "type": "reference",
        "id": "fa6fe400c8035e35",
        "site": "thompson.wiki.innovateoregon.org",
        "slug": "path",
        "title": "Path",
        "text": "While the path of transformation is different for every school, here are some of the key parts of this journey."
      },
      "date": 1675259768855
    },
    {
      "id": "fa6fe400c8035e35",
      "type": "move",
      "order": [
        "638b78e7f95c9e6e",
        "fa6fe400c8035e35",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1675259770592
    },
    {
      "type": "edit",
      "id": "fa6fe400c8035e35",
      "item": {
        "type": "reference",
        "id": "fa6fe400c8035e35",
        "site": "thompson.wiki.innovateoregon.org",
        "slug": "path",
        "title": "Path",
        "text": "[[Path Dialect]]"
      },
      "date": 1675259797319
    },
    {
      "type": "edit",
      "id": "fa6fe400c8035e35",
      "item": {
        "type": "reference",
        "id": "fa6fe400c8035e35",
        "site": "thompson.wiki.innovateoregon.org",
        "slug": "path",
        "title": "Path",
        "text": "‚áí [[Path Dialect]]"
      },
      "date": 1675259806834
    },
    {
      "id": "00d330748ad52b1a",
      "type": "add",
      "item": {
        "type": "code",
        "id": "00d330748ad52b1a",
        "text": "{-| Parse the given text and return an AST represeting it.\n-}\nparse : String -> List (List LatexExpression)\nparse text =\n    text\n        |> Paragraph.logicalParagraphify\n        |> List.map MiniLatexParser.parse\n\n"
      },
      "attribution": {
        "page": "2023-09-15"
      },
      "date": 1694836214116
    },
    {
      "id": "aedd04d69f0dd51e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "aedd04d69f0dd51e",
        "text": "‚áí [[MiniLatex]] ‚áí [[parse]] "
      },
      "attribution": {
        "page": "2023-09-15"
      },
      "date": 1694836219917
    },
    {
      "id": "39ceecfba1775af1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "39ceecfba1775af1",
        "text": "Driver.elm [https://github.com/RalfBarkow/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Driver.elm#L55-L63 code]:"
      },
      "after": "aedd04d69f0dd51e",
      "attribution": {
        "page": "2023-09-15"
      },
      "date": 1694836223438
    },
    {
      "type": "remove",
      "id": "39ceecfba1775af1",
      "date": 1694836230101
    },
    {
      "type": "edit",
      "id": "aedd04d69f0dd51e",
      "item": {
        "type": "paragraph",
        "id": "aedd04d69f0dd51e",
        "text": "‚áí [[MiniLatex]] ‚áí Driver.elm [https://github.com/RalfBarkow/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Driver.elm#L55-L63 code]:"
      },
      "date": 1694836233970
    },
    {
      "item": {
        "type": "factory",
        "id": "5ce6164bf5052923"
      },
      "id": "5ce6164bf5052923",
      "type": "add",
      "after": "d7e5ecb5bf483179",
      "date": 1694836282169
    },
    {
      "type": "edit",
      "id": "5ce6164bf5052923",
      "item": {
        "type": "pagefold",
        "id": "5ce6164bf5052923",
        "text": "üî∫"
      },
      "date": 1694836286252
    },
    {
      "id": "5ce6164bf5052923",
      "type": "move",
      "order": [
        "aedd04d69f0dd51e",
        "00d330748ad52b1a",
        "5ce6164bf5052923",
        "638b78e7f95c9e6e",
        "fa6fe400c8035e35",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1694836289022
    },
    {
      "type": "fork",
      "date": 1694836342671
    },
    {
      "type": "edit",
      "id": "aedd04d69f0dd51e",
      "item": {
        "type": "paragraph",
        "id": "aedd04d69f0dd51e",
        "text": "‚áí [[MiniLatex]] ‚áí Driver.elm [https://github.com/RalfBarkow/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Driver.elm#L55-L63 code] ‚áí [[AST]]"
      },
      "date": 1694836371873
    },
    {
      "type": "edit",
      "id": "aedd04d69f0dd51e",
      "item": {
        "type": "paragraph",
        "id": "aedd04d69f0dd51e",
        "text": "‚áí [[MiniLatex]] ‚áí Driver [https://github.com/RalfBarkow/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Driver.elm#L55-L63 code] ‚áí [[AST]]"
      },
      "date": 1694836391637
    },
    {
      "item": {
        "type": "factory",
        "id": "f08cbad7d6ba2f13"
      },
      "id": "f08cbad7d6ba2f13",
      "type": "add",
      "after": "d7e5ecb5bf483179",
      "date": 1694836584001
    },
    {
      "id": "f08cbad7d6ba2f13",
      "type": "move",
      "order": [
        "aedd04d69f0dd51e",
        "00d330748ad52b1a",
        "5ce6164bf5052923",
        "638b78e7f95c9e6e",
        "f08cbad7d6ba2f13",
        "fa6fe400c8035e35",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1694836589209
    },
    {
      "type": "edit",
      "id": "f08cbad7d6ba2f13",
      "item": {
        "type": "paragraph",
        "id": "f08cbad7d6ba2f13",
        "text": "Parse Path: The tree path from the token‚Äôs leaf\nnode to the root of the syntactic parse tree."
      },
      "date": 1694836590812
    },
    {
      "type": "edit",
      "id": "f08cbad7d6ba2f13",
      "item": {
        "type": "paragraph",
        "id": "f08cbad7d6ba2f13",
        "text": "Parse Path: The tree path from the token‚Äôs leaf\nnode to the root of the syntactic parse tree. ([[NavyTime]], p. "
      },
      "date": 1694836685805
    },
    {
      "type": "edit",
      "id": "f08cbad7d6ba2f13",
      "item": {
        "type": "paragraph",
        "id": "f08cbad7d6ba2f13",
        "text": "Parse Path: The tree path from the token‚Äôs leaf\nnode to the root of the syntactic parse tree. ([[NavyTime]], p. 73)"
      },
      "date": 1694836699185
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parse-dont-validate",
        "title": "Parse, Don‚Äôt Validate",
        "text": "Because [[elm-pages]] has a build step, you know that your BackendTask.Http requests succeeded, your decoders succeeded, your custom BackendTask validations succeeded, and everything went smoothly. If something went wrong, you get a build failure and can deal with the issues before the site goes live. That means your users won't see those errors, and as a developer you don't need to handle those error cases in your code! Think of it as \"parse, don't validate\", but for your entire build. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1"
      },
      "after": "fa6fe400c8035e35",
      "date": 1694837184619
    },
    {
      "id": "a9bc03d737d80d64",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "differential-parse-rendering",
        "title": "Differential Parse-Rendering",
        "text": "can leave parts of the document, e.g. section numbers out-of-sync. To bring them back into sync, one must do a full render.",
        "id": "a9bc03d737d80d64"
      },
      "date": 1694837308849
    },
    {
      "id": "1917a57c43b95ad5",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parse-wiki-style-links",
        "title": "Parse Wiki-Style Links",
        "text": "and Render Them as Anchors [‚áí [[MiniLatex]]: a Parser-Renderer for ‚Ä¶ ‚áê [[Render Wiki Link]]]",
        "id": "1917a57c43b95ad5"
      },
      "after": "a9bc03d737d80d64",
      "date": 1694837340261
    },
    {
      "type": "edit",
      "id": "638b78e7f95c9e6e",
      "item": {
        "type": "reference",
        "id": "638b78e7f95c9e6e",
        "site": "wiki.ralfbarkow.ch",
        "slug": "natural-language-parser",
        "title": "Natural Language Parser",
        "text": "that analyzes the syntactic structure of an input [[Sentence]] in relation to a specified grammar and generates all possible syntax trees of the sentence, along with estimates of the probability of each being the correct parse."
      },
      "date": 1694837378964
    },
    {
      "id": "a4d1feba68efcf3f",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parse-what-you-expect",
        "title": "Parse What You Expect",
        "text": "Notes [[Ward]] wrote to organize the talk. [https://c2.com/~ward/sao/TechIgnite-v1/outline.txt txt] (presented at SAO's TechIgnite V1. [https://c2.com/~ward/sao/TechIgnite-v1/ site])",
        "id": "a4d1feba68efcf3f"
      },
      "after": "1917a57c43b95ad5",
      "date": 1694837420596
    },
    {
      "id": "444b178e5a274ff6",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "filter-before-you-parse",
        "title": "Filter before You Parse",
        "text": "Exploratory big data applications often run on raw unstructured or semi-structured data formats, such as JSON files or text logs. These applications can spend 80‚Äì90% of their execution time parsing the data.",
        "id": "444b178e5a274ff6"
      },
      "after": "1917a57c43b95ad5",
      "date": 1694837431537
    },
    {
      "id": "a4d1feba68efcf3f",
      "type": "move",
      "order": [
        "aedd04d69f0dd51e",
        "00d330748ad52b1a",
        "5ce6164bf5052923",
        "638b78e7f95c9e6e",
        "f08cbad7d6ba2f13",
        "fa6fe400c8035e35",
        "undefined",
        "a9bc03d737d80d64",
        "1917a57c43b95ad5",
        "a4d1feba68efcf3f",
        "444b178e5a274ff6",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1694837448685,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1694837451612
    },
    {
      "id": "33984803fe930c2a",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "tree-parsers",
        "title": "Tree Parsers",
        "text": "recognizers that process [[Abstract Syntax Tree]]s instead of symbol sequences.",
        "id": "33984803fe930c2a"
      },
      "after": "fa6fe400c8035e35",
      "date": 1694837518328
    },
    {
      "type": "edit",
      "id": "33984803fe930c2a",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "tree-parsers",
        "title": "Tree Parsers",
        "text": "recognizers that process [[Abstract Syntax Tree]]s instead of symbol sequences.",
        "id": "33984803fe930c2a"
      },
      "date": 1694837525713
    },
    {
      "type": "edit",
      "id": "33984803fe930c2a",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "tree-parsers",
        "title": "Tree Parsers",
        "text": "recognizers that process [[Abstract Syntax Tree]]s instead of symbol sequences.",
        "id": "33984803fe930c2a"
      },
      "date": 1694837593742
    },
    {
      "id": "9cdd6b5a5d515327",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parser",
        "title": "Parser",
        "text": "Answer a parser that accepts the receiving string.",
        "id": "9cdd6b5a5d515327"
      },
      "after": "5ce6164bf5052923",
      "date": 1694837647961
    },
    {
      "id": "78a0774bf53bc003",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "glr-parser",
        "title": "GLR Parser",
        "text": "A GLR parser (GLR standing for \"Generalized LR\", where L stands for \"left-to-right\" and R stands for \"rightmost (derivation)\") is an extension of an LR parser algorithm to handle non-deterministic and ambiguous grammars.",
        "id": "78a0774bf53bc003"
      },
      "after": "1917a57c43b95ad5",
      "date": 1694837749870
    },
    {
      "type": "edit",
      "id": "78a0774bf53bc003",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "glr-parser",
        "title": "GLR Parser",
        "text": "A GLR parser (GLR standing for \"Generalized LR\", where L stands for \"left-to-right\" and R stands for \"rightmost (derivation)\") is an extension of an LR parser algorithm to handle non-deterministic and ambiguous grammars.",
        "id": "78a0774bf53bc003"
      },
      "date": 1694837761909
    },
    {
      "id": "78a0774bf53bc003",
      "type": "move",
      "order": [
        "aedd04d69f0dd51e",
        "00d330748ad52b1a",
        "5ce6164bf5052923",
        "9cdd6b5a5d515327",
        "638b78e7f95c9e6e",
        "f08cbad7d6ba2f13",
        "fa6fe400c8035e35",
        "33984803fe930c2a",
        "undefined",
        "a9bc03d737d80d64",
        "1917a57c43b95ad5",
        "a4d1feba68efcf3f",
        "444b178e5a274ff6",
        "78a0774bf53bc003",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1694837765279,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1694837767220
    },
    {
      "id": "a31caef7ecbbdd82",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "libcypher-parser",
        "title": "libcypher-parser",
        "text": "libcypher-parser is a parser library and validation (lint) tool for [[Cypher]], the graph query language. The parser is written in C, and is intended for building tools and libraries in various languages. [https://cleishm.github.io/libcypher-parser/ github]",
        "id": "a31caef7ecbbdd82"
      },
      "after": "78a0774bf53bc003",
      "date": 1694837826851
    },
    {
      "id": "686d986ffa07c37b",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elmparser",
        "title": "elm/parser",
        "text": "[[Evan Czaplicki]]. 2020. [[Elm Parser]]. [https://package.elm-lang.org/packages/elm/parser/latest/ page]",
        "id": "686d986ffa07c37b"
      },
      "after": "5ce6164bf5052923",
      "date": 1694837859342
    },
    {
      "id": "e6f4626ce6d6985e",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parser-pipelines",
        "title": "Parser Pipelines",
        "text": "Regular expressions are quite confusing and difficult to use. This library provides a coherent alternative that handles more cases and produces clearer code. [https://github.com/elm/parser#parser github], [https://package.elm-lang.org/packages/elm/parser/latest page]",
        "id": "e6f4626ce6d6985e"
      },
      "after": "9cdd6b5a5d515327",
      "date": 1694837894589
    },
    {
      "id": "bbcb1ee22ad2c9b4",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "predictive-parser",
        "title": "Predictive Parser",
        "text": "is a recursive descent parser with no backtracking or backup. It is a top-down parser that does not require backtracking. At each step, the choice of the rule to be expanded is made upon the next terminal symbol.",
        "id": "bbcb1ee22ad2c9b4"
      },
      "after": "fa6fe400c8035e35",
      "date": 1694837912089
    },
    {
      "type": "edit",
      "id": "bbcb1ee22ad2c9b4",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "predictive-parser",
        "title": "Predictive Parser",
        "text": "is a recursive descent parser with no backtracking or backup. It is a top-down parser that does not require backtracking. At each step, the choice of the rule to be expanded is made upon the next terminal symbol.",
        "id": "bbcb1ee22ad2c9b4"
      },
      "date": 1694837920826
    },
    {
      "id": "1917a57c43b95ad5",
      "type": "move",
      "order": [
        "aedd04d69f0dd51e",
        "00d330748ad52b1a",
        "5ce6164bf5052923",
        "686d986ffa07c37b",
        "9cdd6b5a5d515327",
        "e6f4626ce6d6985e",
        "638b78e7f95c9e6e",
        "f08cbad7d6ba2f13",
        "fa6fe400c8035e35",
        "bbcb1ee22ad2c9b4",
        "33984803fe930c2a",
        "undefined",
        "a9bc03d737d80d64",
        "a4d1feba68efcf3f",
        "1917a57c43b95ad5",
        "444b178e5a274ff6",
        "78a0774bf53bc003",
        "a31caef7ecbbdd82",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1694838041217,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1694838044286
    },
    {
      "id": "0e2e0ea7d1179991",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "ical-blocks-as-parsed",
        "title": "iCal Blocks as Parsed",
        "text": "Blocks found in the order that they appear in an iCal file. Some editing for line length. The file contained 60 lines numbered 0 to 59 as is customary in javascript.",
        "id": "0e2e0ea7d1179991"
      },
      "after": "fa6fe400c8035e35",
      "date": 1694838271605
    },
    {
      "id": "bc1b576325b69087",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "recursive-descent-parser",
        "title": "Recursive Descent Parser",
        "text": "It is a kind of Top-Down Parser. [https://www.geeksforgeeks.org/recursive-descent-parser/ page]",
        "id": "bc1b576325b69087"
      },
      "after": "a31caef7ecbbdd82",
      "date": 1694838497002
    },
    {
      "id": "570d61060f4a68a1",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "static-types-for-parsers",
        "title": "Static Types for Parsers",
        "text": "All of our [[Seran]] [[Outpost]] experiments teach about the tools and libraries preferred by [[Deno]].",
        "id": "570d61060f4a68a1"
      },
      "after": "bc1b576325b69087",
      "date": 1694838509746
    },
    {
      "id": "df0b60222e208705",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parser-generator-for-javascript",
        "title": "Parser Generator for Javascript",
        "text": "Documentation [https://pegjs.org/documentation page]",
        "id": "df0b60222e208705"
      },
      "after": "570d61060f4a68a1",
      "date": 1694838517152
    },
    {
      "id": "3e016436cf17bfee",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "building-a-parser-from-an-antlr-grammar",
        "title": "Building a Parser from an ANTLR Grammar",
        "text": "If you already have an [[ANTLR]] grammar for your language lying around or know how to get to one‚Äîand many popular languages already have such a grammar‚Äî, you can get to a simple parser in a matter of minutes.",
        "id": "3e016436cf17bfee"
      },
      "after": "df0b60222e208705",
      "date": 1694838525935
    },
    {
      "id": "c86043859741aec3",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "context-free-parsing",
        "title": "Context-Free Parsing",
        "text": "All efficient algorithms for parsing context-free grammars make use of some kind of well-formed substring table. Earley's algorithm (1970) is perhaps the best-known example. The algorithm builds up a vector of parse lists, where each entry in a parse list is an item ‚Äì a production rule with one indicator showing how much of the righthand side has been parsed, and another saying where the parse started.",
        "id": "c86043859741aec3"
      },
      "after": "3e016436cf17bfee",
      "date": 1694838550579
    },
    {
      "id": "9d55a574319c6548",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "approach-to-parsing",
        "title": "Approach to Parsing",
        "text": "‚áí [[PetitParser]] ‚áí [[parse]]",
        "id": "9d55a574319c6548"
      },
      "after": "0e2e0ea7d1179991",
      "date": 1694838598332
    },
    {
      "id": "df63dcf180388fe0",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "import-cypher-from-arrow",
        "title": "Import Cypher from Arrow",
        "text": "We tried to parse the [[cypher]] syntax used to add graph elements to [[neo4j]]. See [[Import from Arrow]].",
        "id": "df63dcf180388fe0"
      },
      "after": "a31caef7ecbbdd82",
      "date": 1694838625427
    },
    {
      "id": "e4e582c3e82e8aab",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "expression-parsing",
        "title": "Expression Parsing",
        "text": "We wonder if we can parse an arithmetic expression and return an [[Abstract Syntax Tree]] as a graph. Try this one: [http://hsc.fed.wiki/view/expression-parsing page]",
        "id": "e4e582c3e82e8aab"
      },
      "after": "9cdd6b5a5d515327",
      "date": 1694838646449
    },
    {
      "type": "edit",
      "id": "e4e582c3e82e8aab",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "expression-parsing",
        "title": "Expression Parsing",
        "text": "We wonder if we can parse an arithmetic expression and return an [[Abstract Syntax Tree]] as a graph. Try this one: [http://hsc.fed.wiki/view/expression-parsing page]",
        "id": "e4e582c3e82e8aab"
      },
      "date": 1694838691404
    },
    {
      "type": "edit",
      "id": "e4e582c3e82e8aab",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "expression-parsing",
        "title": "Expression Parsing",
        "text": "We wonder if we can parse an arithmetic expression and return an [[Abstract Syntax Tree]] as a graph. Try this one: [http://hsc.fed.wiki/view/expression-parsing page]",
        "id": "e4e582c3e82e8aab"
      },
      "date": 1694838788091
    },
    {
      "id": "7363ba2382b582be",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "compromise",
        "title": "Compromise",
        "text": "is a [[JavaScript]] library that can parse, transform, and help use text. [https://github.com/spencermountain/compromise github], [https://compromise.cool/ site], [https://observablehq.com/@spencermountain/nlp-compromise docs]",
        "id": "7363ba2382b582be"
      },
      "after": "9d55a574319c6548",
      "date": 1694838956562
    },
    {
      "id": "185c6d6a7fedd688",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "ppcompositeparser",
        "title": "PPCompositeParser",
        "text": "is a composed parser built from various primitive parsers. ",
        "id": "185c6d6a7fedd688"
      },
      "after": "e6f4626ce6d6985e",
      "date": 1694838992352
    },
    {
      "type": "edit",
      "id": "185c6d6a7fedd688",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "ppcompositeparser",
        "title": "PPCompositeParser",
        "text": "is a composed parser built from various primitive parsers. ",
        "id": "185c6d6a7fedd688"
      },
      "date": 1694839006558
    },
    {
      "id": "ee9b01b670923735",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ee9b01b670923735",
        "text": "> Every production in the receiver is specified as a method that returns its parser. "
      },
      "after": "185c6d6a7fedd688",
      "attribution": {
        "page": "PPCompositeParser"
      },
      "date": 1694839057214
    },
    {
      "type": "edit",
      "id": "ee9b01b670923735",
      "item": {
        "type": "markdown",
        "id": "ee9b01b670923735",
        "text": "> Every production in the receiver is specified as a method that returns its parser. "
      },
      "date": 1694839063588
    },
    {
      "type": "edit",
      "id": "ee9b01b670923735",
      "item": {
        "type": "markdown",
        "id": "ee9b01b670923735",
        "text": "> Every production in the receiver is specified as a method that returns its parser. "
      },
      "date": 1694839070228
    },
    {
      "id": "9e3816a0c58d2364",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "smacc",
        "title": "Smacc",
        "text": "(Smalltalk Compiler-Compiler) is a freely available parser generator for Smalltalk. It generates LR parsers and is a replacement for the T-Gen parser generator.",
        "id": "9e3816a0c58d2364"
      },
      "after": "c86043859741aec3",
      "date": 1694839095540
    },
    {
      "type": "edit",
      "id": "9e3816a0c58d2364",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "smacc",
        "title": "Smacc",
        "text": "(Smalltalk Compiler-Compiler) is a freely available parser generator for Smalltalk. It generates LR parsers and is a replacement for the T-Gen parser generator.",
        "id": "9e3816a0c58d2364"
      },
      "date": 1694839101201
    },
    {
      "id": "3e016436cf17bfee",
      "type": "move",
      "order": [
        "aedd04d69f0dd51e",
        "00d330748ad52b1a",
        "5ce6164bf5052923",
        "686d986ffa07c37b",
        "9cdd6b5a5d515327",
        "e4e582c3e82e8aab",
        "e6f4626ce6d6985e",
        "185c6d6a7fedd688",
        "ee9b01b670923735",
        "638b78e7f95c9e6e",
        "f08cbad7d6ba2f13",
        "fa6fe400c8035e35",
        "0e2e0ea7d1179991",
        "9d55a574319c6548",
        "7363ba2382b582be",
        "bbcb1ee22ad2c9b4",
        "33984803fe930c2a",
        "undefined",
        "a9bc03d737d80d64",
        "a4d1feba68efcf3f",
        "1917a57c43b95ad5",
        "444b178e5a274ff6",
        "78a0774bf53bc003",
        "a31caef7ecbbdd82",
        "df63dcf180388fe0",
        "bc1b576325b69087",
        "570d61060f4a68a1",
        "df0b60222e208705",
        "c86043859741aec3",
        "9e3816a0c58d2364",
        "3e016436cf17bfee",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1694839148587,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1694839151872
    },
    {
      "id": "5fe7800710b289fc",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "antlr",
        "title": "ANTLR",
        "text": "is a lexer and parser generator that allows the generation of [[Tree Parsers]].",
        "id": "5fe7800710b289fc"
      },
      "after": "9e3816a0c58d2364",
      "date": 1694839167815
    },
    {
      "type": "edit",
      "id": "5fe7800710b289fc",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "antlr",
        "title": "ANTLR",
        "text": "is a lexer and parser generator that allows the generation of [[Tree Parsers]].",
        "id": "5fe7800710b289fc"
      },
      "date": 1694839183563
    },
    {
      "id": "fcde73d759efa967",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "modelcc",
        "title": "ModelCC",
        "text": "We introduce [[ModelCC]], a model-based tool for language specification. ModelCC acts as a parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.",
        "id": "fcde73d759efa967"
      },
      "after": "3e016436cf17bfee",
      "date": 1694839195135
    },
    {
      "id": "e687e5b1b3390cfa",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "pegjs",
        "title": "PEG.js",
        "text": "[[PEG.js]] is a simple parser generator for JavaScript that produces fast parsers with excellent error reporting. You can use it to process complex data or computer languages and build transformers, interpreters, compilers and other tools easily.  [https://pegjs.org/ site]",
        "id": "e687e5b1b3390cfa"
      },
      "after": "fcde73d759efa967",
      "date": 1694839204278
    },
    {
      "id": "a67093c82812d05d",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "scratch",
        "title": "scratch",
        "text": "ParseJson Message for a Future story",
        "id": "a67093c82812d05d"
      },
      "after": "686d986ffa07c37b",
      "date": 1694839253587
    },
    {
      "id": "ce95be86d6eced94",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "gobble-it-up",
        "title": "Gobble It Up",
        "text": "‚áí [[Elm Parser]] ‚áí [[Parser Pipelines]]",
        "id": "ce95be86d6eced94"
      },
      "after": "a67093c82812d05d",
      "date": 1694839313176
    },
    {
      "id": "3cb7f7a7b3b52f61",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "hammurabi-step",
        "title": "Hammurabi Step",
        "text": "We compute next year's state from this year's state, the ruler's decisions we have parsed, and some formulas that make the game interesting.",
        "id": "3cb7f7a7b3b52f61"
      },
      "after": "ce95be86d6eced94",
      "date": 1694839364550
    },
    {
      "id": "525f8e65741f6d6f",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "petitparser2",
        "title": "PetitParser2",
        "text": "is a framework for building parsers. [https://github.com/kursjan/petitparser2 github]",
        "id": "525f8e65741f6d6f"
      },
      "after": "e687e5b1b3390cfa",
      "date": 1694839378487
    },
    {
      "type": "edit",
      "id": "525f8e65741f6d6f",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "petitparser2",
        "title": "PetitParser2",
        "text": "is a framework for building parsers. [https://github.com/kursjan/petitparser2 github]",
        "id": "525f8e65741f6d6f"
      },
      "date": 1694839386358
    },
    {
      "id": "59fd678f2a05eeed",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "smaccglrparser",
        "title": "SmaCCGLRParser",
        "text": "is an abstract superclass for all GLR generated parsers in [[SmaCC]].",
        "id": "59fd678f2a05eeed"
      },
      "after": "525f8e65741f6d6f",
      "date": 1694839406553
    },
    {
      "type": "edit",
      "id": "59fd678f2a05eeed",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "smaccglrparser",
        "title": "SmaCCGLRParser",
        "text": "is an abstract superclass for all GLR generated parsers in [[SmaCC]].",
        "id": "59fd678f2a05eeed"
      },
      "date": 1694839410887
    },
    {
      "id": "4a9327561020e506",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-lexical-file",
        "title": "The Lexical File",
        "text": "is an in-house dictionary of corporate knowledge. Entries in this file are noun phrases parsed out from the firm documents. Under the heading of a noun phrase, there are:",
        "id": "4a9327561020e506"
      },
      "after": "3cb7f7a7b3b52f61",
      "date": 1694839437505
    },
    {
      "type": "edit",
      "id": "4a9327561020e506",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-lexical-file",
        "title": "The Lexical File",
        "text": "is an in-house dictionary of corporate knowledge. Entries in this file are noun phrases parsed out from the firm documents. Under the heading of a noun phrase, there are:",
        "id": "4a9327561020e506"
      },
      "date": 1694839453765
    },
    {
      "id": "52b4d1fcefa17fc0",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "verveinej",
        "title": "VerveineJ",
        "text": "A Java to JSON/MSE parser",
        "id": "52b4d1fcefa17fc0"
      },
      "after": "59fd678f2a05eeed",
      "date": 1694839485971
    },
    {
      "id": "82933a5159c46d0a",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parsing-expression-grammar",
        "title": "Parsing Expression Grammar",
        "text": "[https://www.lukas-renggli.ch/blog/petitparser-1 Writing Parsers with PetitParser] ‚Äì [[Lukas Renggli]]",
        "id": "82933a5159c46d0a"
      },
      "after": "e4e582c3e82e8aab",
      "date": 1694839529235
    },
    {
      "id": "e687e5b1b3390cfa",
      "type": "move",
      "order": [
        "aedd04d69f0dd51e",
        "00d330748ad52b1a",
        "5ce6164bf5052923",
        "686d986ffa07c37b",
        "a67093c82812d05d",
        "ce95be86d6eced94",
        "3cb7f7a7b3b52f61",
        "4a9327561020e506",
        "9cdd6b5a5d515327",
        "e4e582c3e82e8aab",
        "82933a5159c46d0a",
        "e687e5b1b3390cfa",
        "e6f4626ce6d6985e",
        "185c6d6a7fedd688",
        "ee9b01b670923735",
        "638b78e7f95c9e6e",
        "f08cbad7d6ba2f13",
        "fa6fe400c8035e35",
        "0e2e0ea7d1179991",
        "9d55a574319c6548",
        "7363ba2382b582be",
        "bbcb1ee22ad2c9b4",
        "33984803fe930c2a",
        "undefined",
        "a9bc03d737d80d64",
        "a4d1feba68efcf3f",
        "1917a57c43b95ad5",
        "444b178e5a274ff6",
        "78a0774bf53bc003",
        "a31caef7ecbbdd82",
        "df63dcf180388fe0",
        "bc1b576325b69087",
        "570d61060f4a68a1",
        "df0b60222e208705",
        "c86043859741aec3",
        "9e3816a0c58d2364",
        "5fe7800710b289fc",
        "3e016436cf17bfee",
        "fcde73d759efa967",
        "525f8e65741f6d6f",
        "59fd678f2a05eeed",
        "52b4d1fcefa17fc0",
        "dc0562a480e9204b",
        "d7e5ecb5bf483179"
      ],
      "date": 1694839567677,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1694839573730
    },
    {
      "type": "edit",
      "id": "aedd04d69f0dd51e",
      "item": {
        "type": "paragraph",
        "id": "aedd04d69f0dd51e",
        "text": "‚áê [[MiniLatex]] ‚áí Driver [https://github.com/RalfBarkow/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Driver.elm#L55-L63 code] ‚áí [[AST]]"
      },
      "date": 1694839889526
    },
    {
      "id": "66b902d4335c6227",
      "type": "add",
      "item": {
        "type": "video",
        "id": "66b902d4335c6227",
        "text": "YOUTUBE M9ulswr1z0E\n\"Demystifying Parsers\" by [[Tereza Sokol]]"
      },
      "after": "ce95be86d6eced94",
      "attribution": {
        "page": "2023-09-13"
      },
      "date": 1694840009509
    },
    {
      "type": "edit",
      "id": "66b902d4335c6227",
      "item": {
        "type": "video",
        "id": "66b902d4335c6227",
        "text": "YOUTUBE M9ulswr1z0E\n\"[[Demystifying Parsers]]\" by [[Tereza Sokol]]"
      },
      "date": 1694840735000
    },
    {
      "type": "edit",
      "id": "9d55a574319c6548",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "approach-to-parsing",
        "title": "Approach to Parsing",
        "text": "‚áí [[PetitParser]] ‚áí parse",
        "id": "9d55a574319c6548"
      },
      "date": 1695203440023
    }
  ]
}