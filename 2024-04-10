{
  "title": "2024-04-10",
  "story": [
    {
      "type": "paragraph",
      "id": "ef3c9f4741c3c796",
      "text": "⇐ [[2016-03-25]] / [[1995-03-25]]"
    },
    {
      "type": "paragraph",
      "id": "dd56a138d0e0624c",
      "text": "In the past, cupboard-sized encyclopaedias belonged in the middle-class living room and were never lent out. Today, we get our information from the Internet and are happy to pass on our wiki knowledge. "
    },
    {
      "type": "audio",
      "id": "8627a7216205a78f",
      "text": "https://cdn-storage.br.de/iLCpbHJGNL9zu6i6NL97bmWH_-by/_-iS/9-4P_Ary/04176ea8-316c-4251-82c5-4a40d4a08a27_3.mp3\nMaier, Yvonne. 25.03.1995: Das erste Wiki startet im Netz. [https://www.br.de/radio/bayern2/sendungen/radiowissen/erstes-wiki-startet-im-netz-102.html br.de] 2016-03-25"
    },
    {
      "type": "pagefold",
      "id": "c0feed982f10fe12",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "bf04f156fe4e23de",
      "text": "⇐ [[Iain Couzin's Collective Behavior]]"
    },
    {
      "type": "paragraph",
      "id": "756f92e582e3af8f",
      "text": "[[synchronize]]"
    },
    {
      "type": "paragraph",
      "id": "19840ec092cb1cad",
      "text": "[[Murmuration]]"
    },
    {
      "type": "pagefold",
      "id": "f170a416cdf989fd",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "7d16fbc379be5bd4",
      "text": "[[John Pavlick]], For lack of a better name, I’m calling it “The Module Pattern”. [https://dev.to/jmpavlick/for-lack-of-a-better-name-im-calling-it-the-module-pattern-5dfi post]"
    },
    {
      "type": "pagefold",
      "id": "6d0a90ce610b6bc1",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "327911a6539469f9",
      "text": "From [[Robert Best]] today: we did take a small little stab at using [[Cytoscape.js]] about 9 months ago here\n[https://robert.wiki.openlearning.cc/cytoscape-demo.html page]\n\nThe graph data itself is just hardcoded inside the HTML script\ni think we just copied this demo from somewhere and just ran with it\nthe data is put in the elements: key as shown here\n[https://js.cytoscape.org/#notation/elements-json page]"
    },
    {
      "type": "paragraph",
      "id": "7f4484776329f409",
      "text": "and i (Robert) think if you scroll down, their alternative format is closer to your own right? where nodes and edges are broken out into their own arrays, rather than all elements in one big array"
    },
    {
      "type": "markdown",
      "id": "61486d35a6a39f63",
      "text": "> The elements JSON may alternatively be in the following format, keyed by group:"
    },
    {
      "type": "code",
      "id": "d748c9b9662910b6",
      "text": "cytoscape({\n  container: document.getElementById('cy'),\n\n  elements: {\n    nodes: [\n      {\n        data: { id: 'a' }\n      },\n\n      {\n        data: { id: 'b' }\n      }\n    ],\n    edges: [\n      {\n        data: { id: 'ab', source: 'a', target: 'b' }\n      }\n    ]\n  },\n\n  layout: {\n    name: 'grid',\n    rows: 1\n  },\n\n  // so we can see the ids\n  style: [\n    {\n      selector: 'node',\n      style: {\n        'label': 'data(id)'\n      }\n    }\n  ]\n});"
    },
    {
      "type": "image",
      "id": "7d8e1ca84b221331",
      "text": "window.cy",
      "size": "thumbnail",
      "width": 183,
      "height": 194,
      "url": "/assets/plugins/image/c7107fb39f67985301b5c073293c3893.jpg"
    },
    {
      "type": "paragraph",
      "id": "8d99f756ae99a668",
      "text": "Ward replied:\n\nOoh. That is very promising. We can import assets from anything Marc or Thompson does. If it turns out to be a bit awkward, then we have a clear use case to improve with new push and pull mechanisms."
    },
    {
      "type": "reference",
      "id": "e659d4a54d629518",
      "site": "robert.wiki.openlearning.cc",
      "slug": "cytoscape-demo",
      "title": "Cytoscape Demo",
      "text": "Embed example cytoscape html below. [https://robert.wiki.openlearning.cc/assets/pages/cytoscape-demo/ward.html expand]"
    },
    {
      "type": "paragraph",
      "id": "dc19107475a84e26",
      "text": "Uncaught Error: No such layout `cose-bilkent` found.  Did you forget to import it and `cytoscape.use()` it?"
    },
    {
      "type": "paragraph",
      "id": "63eb25fa06950cf7",
      "text": "[[DMX 5 Cytoscape Renderer]] [https://www.npmjs.com/package/dmx-cytoscape-renderer?activeTab=explore npm] – A DMX topicmap renderer as a composable GUI component"
    },
    {
      "type": "paragraph",
      "id": "c2d6ace056c36360",
      "text": "DMX 5.3.5-SNAPSHOT BUILD FAILURE"
    },
    {
      "type": "paragraph",
      "id": "c50a08efac558c82",
      "text": "[INFO] [[DMX Webclient]] ...................................... FAILURE [01:17 min]"
    },
    {
      "type": "markdown",
      "id": "6b108ac4c0926484",
      "text": "[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:29 min\n[INFO] Finished at: 2024-04-10T18:46:48+02:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.6.0:exec (npm-run-build) on project dmx-webclient: Command execution failed.: Process exited with an error: 1 (Exit value: 1) -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :dmx-webclient\n➜  dmx-platform git:(master) ✗"
    },
    {
      "type": "paragraph",
      "id": "5b7567ecf7e25c16",
      "text": "From this log, it appears that there was an error while trying to execute the npm-run-build command during the Maven build process for the \"dmx-webclient\" project. To diagnose and fix the issue, you may need to investigate why the npm-run-build command failed and resolve any underlying problems with it."
    },
    {
      "type": "paragraph",
      "id": "f806bf53d0b05b2b",
      "text": "Node.js v21.7.1"
    },
    {
      "type": "pagefold",
      "id": "262343cbc93b11ef",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "387c458d01ea1e0c",
      "site": "found.ward.fed.wiki",
      "slug": "convert-search-to-sqlite",
      "title": "Convert Search to SQLite",
      "text": "Work in progress."
    },
    {
      "type": "pagefold",
      "id": "8ad4159f9170ca6d",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "dccdfe37b50de3ca",
      "text": "⇐ [[recommend]] ⇒ [[Store Unique Representations of Nodes]] ⇐ [[store]]"
    },
    {
      "type": "paragraph",
      "id": "a97b14b7b31bac7b",
      "text": "Graphs also provide us with a natural way of thinking about their [[Multiscale Structure]] ranging from the microscopic [[ego-network]] structure of nodes to mesoscopic clustersì to the overall macroscopic connectivity patterns. ([[Similarities and Representations of Graph Structures]], p., 2)"
    },
    {
      "type": "reference",
      "id": "1da17c4d4dc0058b",
      "site": "wiki.ralfbarkow.ch",
      "slug": "ego-minus-ego",
      "title": "Ego Minus Ego",
      "text": "The ego minus ego of a user u is therefore the set of its alters with the interactions between them."
    },
    {
      "type": "paragraph",
      "id": "d74bc55cc585a27a",
      "text": "As our first contribution, we introduce our neural network-based method, [[Verse]], in Chapter 4."
    },
    {
      "type": "paragraph",
      "id": "660a4ebf46da9bbc",
      "text": "TSITSULIN, Anton, MOTTIN, Davide, KARRAS, Panagiotis and MÜLLER, Emmanuel, 2018. VERSE: Versatile Graph Embeddings from Similarity Measures. In: Proceedings of the 2018 World Wide Web Conference on World Wide Web - WWW ’18. Lyon, France: ACM Press. 2018. p. 539–548. ISBN 978-1-4503-5639-8. DOI 10.1145/3178876.3186120. [Accessed 10 April 2024]. \n"
    },
    {
      "type": "paragraph",
      "id": "3676495980a5e19c",
      "text": "Embedding a web-scale information network into a low-dimensional vector space facilitates tasks such as [[Link Prediction]], classification, and visualization. Past research has addressed the problem of extracting such embeddings by adopting methods from words to graphs, without defining a clearly comprehensible graph-related objective. Yet, as we show, the objectives used in past works implicitly utilize similarity measures among graph nodes. In this paper, we carry the similarity orientation of previous works to its logical conclusion; we propose VERtex Similarity Embeddings (VERSE), a simple, versatile, and memory-efficient method that derives graph embeddings explicitly calibrated to preserve the distributions of a selected vertex-to-vertex similarity measure. VERSE learns such embeddings by training a single-layer neural network. While its default, scalable version does so via sampling similarity information, we also develop a variant using the full information per vertex. Our experimental study on standard benchmarks and real-world datasets demonstrates that VERSE, instantiated with diverse similarity measures, outperforms state-of-the-art methods in terms of precision and recall in major data mining tasks and supersedes them in time and space efficiency, while the scalable sampling-based variant achieves equally good result as the non-scalable full variant."
    },
    {
      "type": "reference",
      "id": "967d6da559c5dd6a",
      "site": "wiki.ralfbarkow.ch",
      "slug": "2024-04-09",
      "title": "2024-04-09",
      "text": "Ward Cunningham on the Appeal of OOP and Dynamic Languages, Federated Wiki. [https://www.infoq.com/interviews/cunningham-federated-wiki/ page]"
    },
    {
      "type": "paragraph",
      "id": "fa134846b99fb8d5",
      "text": "[[Asynchronous Versus Synchronous]]"
    },
    {
      "type": "reference",
      "id": "09566bca32030c58",
      "site": "wiki.ralfbarkow.ch",
      "slug": "compositejs",
      "title": "composite.js",
      "text": "// [[aggregate]] multiple graphs into a single graph"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2024-04-10",
        "story": []
      },
      "date": 1712748008868
    },
    {
      "item": {
        "type": "factory",
        "id": "327911a6539469f9"
      },
      "id": "327911a6539469f9",
      "type": "add",
      "date": 1712748082095
    },
    {
      "type": "edit",
      "id": "327911a6539469f9",
      "item": {
        "type": "paragraph",
        "id": "327911a6539469f9",
        "text": "From Robert Best today:\n\ni totally forgot we did take a small little stab at using cytoscapejs about 9 months ago here\nhttps://robert.wiki.openlearning.cc/cytoscape-demo.html\n\nThe graph data itself is just hardcoded inside the HTML script\ni think we just copied this demo from somewhere and just ran with it\nthe data is put in the elements: key as shown here\nhttps://js.cytoscape.org/#notation/elements-json\n\nand i think if you scroll down, their alternative format is closer to your own right? where nodes and edges are broken out into their own arrays, rather than all elements in one big array\n\nWard replied:\n\nOoh. That is very promising. We can import assets from anything Marc or Thompson does. If it turns out to be a bit awkward, then we have a clear use case to improve with new push and pull mechanisms."
      },
      "date": 1712748160610
    },
    {
      "item": {
        "type": "factory",
        "id": "1ece28347f14ba65"
      },
      "id": "1ece28347f14ba65",
      "type": "add",
      "after": "327911a6539469f9",
      "date": 1712748180446
    },
    {
      "type": "edit",
      "id": "1ece28347f14ba65",
      "item": {
        "type": "roster",
        "id": "1ece28347f14ba65",
        "text": "robert.wiki.openlearning.cc"
      },
      "date": 1712748185162
    },
    {
      "type": "edit",
      "id": "327911a6539469f9",
      "item": {
        "type": "paragraph",
        "id": "327911a6539469f9",
        "text": "From Robert Best today:\n\ni totally forgot we did take a small little stab at using cytoscapejs about 9 months ago here\n[https://robert.wiki.openlearning.cc/cytoscape-demo.html page]\n\nThe graph data itself is just hardcoded inside the HTML script\ni think we just copied this demo from somewhere and just ran with it\nthe data is put in the elements: key as shown here\nhttps://js.cytoscape.org/#notation/elements-json\n\nand i think if you scroll down, their alternative format is closer to your own right? where nodes and edges are broken out into their own arrays, rather than all elements in one big array\n\nWard replied:\n\nOoh. That is very promising. We can import assets from anything Marc or Thompson does. If it turns out to be a bit awkward, then we have a clear use case to improve with new push and pull mechanisms."
      },
      "date": 1712748199436
    },
    {
      "item": {
        "type": "factory",
        "id": "e659d4a54d629518"
      },
      "id": "e659d4a54d629518",
      "type": "add",
      "after": "1ece28347f14ba65",
      "date": 1712748208550
    },
    {
      "type": "edit",
      "id": "e659d4a54d629518",
      "item": {
        "type": "reference",
        "id": "e659d4a54d629518",
        "site": "robert.wiki.openlearning.cc",
        "slug": "cytoscape-demo",
        "title": "Cytoscape Demo",
        "text": "Embed example cytoscape html below. [https://robert.wiki.openlearning.cc/assets/pages/cytoscape-demo/ward.html expand]"
      },
      "date": 1712748213897
    },
    {
      "item": {
        "type": "factory",
        "id": "dc19107475a84e26"
      },
      "id": "dc19107475a84e26",
      "type": "add",
      "after": "e659d4a54d629518",
      "date": 1712748270968
    },
    {
      "type": "edit",
      "id": "dc19107475a84e26",
      "item": {
        "type": "paragraph",
        "id": "dc19107475a84e26",
        "text": "Uncaught Error: No such layout `cose-bilkent` found.  Did you forget to import it and `cytoscape.use()` it?"
      },
      "date": 1712748275344
    },
    {
      "item": {
        "type": "factory",
        "id": "fd8a6568b3492b53"
      },
      "id": "fd8a6568b3492b53",
      "type": "add",
      "after": "dc19107475a84e26",
      "date": 1712748370601
    },
    {
      "type": "edit",
      "id": "fd8a6568b3492b53",
      "item": {
        "type": "paragraph",
        "id": "fd8a6568b3492b53",
        "text": "[[cytoscape.js]]"
      },
      "date": 1712748375488
    },
    {
      "item": {
        "type": "factory",
        "id": "63eb25fa06950cf7"
      },
      "id": "63eb25fa06950cf7",
      "type": "add",
      "after": "fd8a6568b3492b53",
      "date": 1712748441759
    },
    {
      "type": "edit",
      "id": "63eb25fa06950cf7",
      "item": {
        "type": "paragraph",
        "id": "63eb25fa06950cf7",
        "text": "DMX 5 Cytoscape Renderer"
      },
      "date": 1712748443430
    },
    {
      "type": "edit",
      "id": "63eb25fa06950cf7",
      "item": {
        "type": "paragraph",
        "id": "63eb25fa06950cf7",
        "text": "DMX 5 Cytoscape Renderer [https://www.npmjs.com/package/dmx-cytoscape-renderer?activeTab=explore npm]"
      },
      "date": 1712748452815
    },
    {
      "type": "edit",
      "id": "63eb25fa06950cf7",
      "item": {
        "type": "paragraph",
        "id": "63eb25fa06950cf7",
        "text": "[[DMX 5 Cytoscape Renderer]] [https://www.npmjs.com/package/dmx-cytoscape-renderer?activeTab=explore npm] – A DMX topicmap renderer as a composable GUI component"
      },
      "date": 1712748499056
    },
    {
      "item": {
        "type": "factory",
        "id": "387c458d01ea1e0c"
      },
      "id": "387c458d01ea1e0c",
      "type": "add",
      "after": "63eb25fa06950cf7",
      "date": 1712765193263
    },
    {
      "type": "edit",
      "id": "387c458d01ea1e0c",
      "item": {
        "type": "reference",
        "id": "387c458d01ea1e0c",
        "site": "found.ward.fed.wiki",
        "slug": "convert-search-to-sqlite",
        "title": "Convert Search to SQLite",
        "text": "Work in progress."
      },
      "date": 1712765196887
    },
    {
      "item": {
        "type": "factory",
        "id": "c2d6ace056c36360"
      },
      "id": "c2d6ace056c36360",
      "type": "add",
      "after": "387c458d01ea1e0c",
      "date": 1712767651590
    },
    {
      "type": "edit",
      "id": "c2d6ace056c36360",
      "item": {
        "type": "paragraph",
        "id": "c2d6ace056c36360",
        "text": "DMX 5.3.5-SNAPSHOT"
      },
      "date": 1712767662156
    },
    {
      "type": "edit",
      "id": "c2d6ace056c36360",
      "item": {
        "type": "paragraph",
        "id": "c2d6ace056c36360",
        "text": "DMX 5.3.5-SNAPSHOT BUILD FAILURE"
      },
      "date": 1712767675025
    },
    {
      "type": "add",
      "id": "c50a08efac558c82",
      "item": {
        "type": "paragraph",
        "id": "c50a08efac558c82",
        "text": "[INFO] [[DMX Webclient]] ...................................... FAILURE [01:17 min]"
      },
      "after": "c2d6ace056c36360",
      "date": 1712767693207
    },
    {
      "item": {
        "type": "factory",
        "id": "6b108ac4c0926484"
      },
      "id": "6b108ac4c0926484",
      "type": "add",
      "after": "c50a08efac558c82",
      "date": 1712767711571
    },
    {
      "type": "edit",
      "id": "6b108ac4c0926484",
      "item": {
        "type": "markdown",
        "id": "6b108ac4c0926484",
        "text": "[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:29 min\n[INFO] Finished at: 2024-04-10T18:46:48+02:00\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.6.0:exec (npm-run-build) on project dmx-webclient: Command execution failed.: Process exited with an error: 1 (Exit value: 1) -> [Help 1]\n[ERROR]\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR]\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n[ERROR]\n[ERROR] After correcting the problems, you can resume the build with the command\n[ERROR]   mvn <args> -rf :dmx-webclient\n➜  dmx-platform git:(master) ✗"
      },
      "date": 1712767714487
    },
    {
      "item": {
        "type": "factory",
        "id": "5b7567ecf7e25c16"
      },
      "id": "5b7567ecf7e25c16",
      "type": "add",
      "after": "6b108ac4c0926484",
      "date": 1712767795330
    },
    {
      "type": "edit",
      "id": "5b7567ecf7e25c16",
      "item": {
        "type": "paragraph",
        "id": "5b7567ecf7e25c16",
        "text": "From this log, it appears that there was an error while trying to execute the npm-run-build command during the Maven build process for the \"dmx-webclient\" project. To diagnose and fix the issue, you may need to investigate why the npm-run-build command failed and resolve any underlying problems with it."
      },
      "date": 1712767813741
    },
    {
      "item": {
        "type": "factory",
        "id": "f806bf53d0b05b2b"
      },
      "id": "f806bf53d0b05b2b",
      "type": "add",
      "after": "5b7567ecf7e25c16",
      "date": 1712767998253
    },
    {
      "type": "edit",
      "id": "f806bf53d0b05b2b",
      "item": {
        "type": "paragraph",
        "id": "f806bf53d0b05b2b",
        "text": "Node.js v21.7.1"
      },
      "date": 1712768001054
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712768281078
    },
    {
      "type": "edit",
      "id": "327911a6539469f9",
      "item": {
        "type": "paragraph",
        "id": "327911a6539469f9",
        "text": "From Robert Best today: we did take a small little stab at using [[Cytoscape.js]] about 9 months ago here\n[https://robert.wiki.openlearning.cc/cytoscape-demo.html page]\n\nThe graph data itself is just hardcoded inside the HTML script\ni think we just copied this demo from somewhere and just ran with it\nthe data is put in the elements: key as shown here\n[https://js.cytoscape.org/#notation/elements-json page]"
      },
      "date": 1712768580390
    },
    {
      "type": "remove",
      "id": "fd8a6568b3492b53",
      "date": 1712768587814
    },
    {
      "type": "edit",
      "id": "327911a6539469f9",
      "item": {
        "type": "paragraph",
        "id": "327911a6539469f9",
        "text": "From Robert Best today: we did take a small little stab at using [[Cytoscape.js]] about 9 months ago here\n[https://robert.wiki.openlearning.cc/cytoscape-demo.html page]\n\nThe graph data itself is just hardcoded inside the HTML script\ni think we just copied this demo from somewhere and just ran with it\nthe data is put in the elements: key as shown here\n[https://js.cytoscape.org/#notation/elements-json page]"
      },
      "date": 1712768601544
    },
    {
      "type": "edit",
      "id": "327911a6539469f9",
      "item": {
        "type": "paragraph",
        "id": "327911a6539469f9",
        "text": "From Robert Best today: we did take a small little stab at using [[Cytoscape.js]] about 9 months ago here\n[https://robert.wiki.openlearning.cc/cytoscape-demo.html page]\n\nThe graph data itself is just hardcoded inside the HTML script\ni think we just copied this demo from somewhere and just ran with it\nthe data is put in the elements: key as shown here\n[https://js.cytoscape.org/#notation/elements-json page]"
      },
      "date": 1712768638874
    },
    {
      "type": "edit",
      "id": "327911a6539469f9",
      "item": {
        "type": "paragraph",
        "id": "327911a6539469f9",
        "text": "From Robert Best today: we did take a small little stab at using [[Cytoscape.js]] about 9 months ago here\n[https://robert.wiki.openlearning.cc/cytoscape-demo.html page]\n\nThe graph data itself is just hardcoded inside the HTML script\ni think we just copied this demo from somewhere and just ran with it\nthe data is put in the elements: key as shown here\n[https://js.cytoscape.org/#notation/elements-json page]"
      },
      "date": 1712768729451
    },
    {
      "type": "add",
      "id": "61486d35a6a39f63",
      "item": {
        "type": "markdown",
        "id": "61486d35a6a39f63",
        "text": "> The elements JSON may alternatively be in the following format, keyed by group:"
      },
      "after": "327911a6539469f9",
      "date": 1712768733389
    },
    {
      "type": "add",
      "id": "7f4484776329f409",
      "item": {
        "type": "paragraph",
        "id": "7f4484776329f409",
        "text": "and i think if you scroll down, their alternative format is closer to your own right? where nodes and edges are broken out into their own arrays, rather than all elements in one big array\n\nWard replied:\n\nOoh. That is very promising. We can import assets from anything Marc or Thompson does. If it turns out to be a bit awkward, then we have a clear use case to improve with new push and pull mechanisms."
      },
      "after": "61486d35a6a39f63",
      "date": 1712768734407
    },
    {
      "type": "edit",
      "id": "61486d35a6a39f63",
      "item": {
        "type": "markdown",
        "id": "61486d35a6a39f63",
        "text": "> The elements JSON may alternatively be in the following format, keyed by group:"
      },
      "date": 1712768735967
    },
    {
      "item": {
        "type": "factory",
        "id": "d748c9b9662910b6"
      },
      "id": "d748c9b9662910b6",
      "type": "add",
      "after": "f806bf53d0b05b2b",
      "date": 1712768771192
    },
    {
      "id": "d748c9b9662910b6",
      "type": "move",
      "order": [
        "327911a6539469f9",
        "61486d35a6a39f63",
        "d748c9b9662910b6",
        "7f4484776329f409",
        "1ece28347f14ba65",
        "e659d4a54d629518",
        "dc19107475a84e26",
        "63eb25fa06950cf7",
        "387c458d01ea1e0c",
        "c2d6ace056c36360",
        "c50a08efac558c82",
        "6b108ac4c0926484",
        "5b7567ecf7e25c16",
        "f806bf53d0b05b2b"
      ],
      "date": 1712768780910,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1712768785353
    },
    {
      "type": "edit",
      "id": "d748c9b9662910b6",
      "item": {
        "type": "code",
        "id": "d748c9b9662910b6",
        "text": "cytoscape({\n  container: document.getElementById('cy'),\n\n  elements: {\n    nodes: [\n      {\n        data: { id: 'a' }\n      },\n\n      {\n        data: { id: 'b' }\n      }\n    ],\n    edges: [\n      {\n        data: { id: 'ab', source: 'a', target: 'b' }\n      }\n    ]\n  },\n\n  layout: {\n    name: 'grid',\n    rows: 1\n  },\n\n  // so we can see the ids\n  style: [\n    {\n      selector: 'node',\n      style: {\n        'label': 'data(id)'\n      }\n    }\n  ]\n});"
      },
      "date": 1712768789347
    },
    {
      "item": {
        "type": "factory",
        "id": "7d8e1ca84b221331"
      },
      "id": "7d8e1ca84b221331",
      "type": "add",
      "after": "f806bf53d0b05b2b",
      "date": 1712768915644
    },
    {
      "id": "7d8e1ca84b221331",
      "type": "move",
      "order": [
        "327911a6539469f9",
        "61486d35a6a39f63",
        "d748c9b9662910b6",
        "7d8e1ca84b221331",
        "7f4484776329f409",
        "1ece28347f14ba65",
        "e659d4a54d629518",
        "dc19107475a84e26",
        "63eb25fa06950cf7",
        "387c458d01ea1e0c",
        "c2d6ace056c36360",
        "c50a08efac558c82",
        "6b108ac4c0926484",
        "5b7567ecf7e25c16",
        "f806bf53d0b05b2b"
      ],
      "date": 1712768928113
    },
    {
      "type": "edit",
      "id": "7d8e1ca84b221331",
      "item": {
        "type": "image",
        "id": "7d8e1ca84b221331",
        "text": "window.cy",
        "size": "thumbnail",
        "width": 183,
        "height": 194,
        "url": "/assets/plugins/image/c7107fb39f67985301b5c073293c3893.jpg"
      },
      "date": 1712768956309
    },
    {
      "type": "fork",
      "date": 1712768983250
    },
    {
      "type": "edit",
      "id": "7f4484776329f409",
      "item": {
        "type": "paragraph",
        "id": "7f4484776329f409",
        "text": "and i think if you scroll down, their alternative format is closer to your own right? where nodes and edges are broken out into their own arrays, rather than all elements in one big array"
      },
      "date": 1712769018531
    },
    {
      "type": "add",
      "id": "8d99f756ae99a668",
      "item": {
        "type": "paragraph",
        "id": "8d99f756ae99a668",
        "text": "Ward replied:\n\nOoh. That is very promising. We can import assets from anything Marc or Thompson does. If it turns out to be a bit awkward, then we have a clear use case to improve with new push and pull mechanisms."
      },
      "after": "7f4484776329f409",
      "date": 1712769019359
    },
    {
      "id": "7f4484776329f409",
      "type": "move",
      "order": [
        "327911a6539469f9",
        "7f4484776329f409",
        "61486d35a6a39f63",
        "d748c9b9662910b6",
        "7d8e1ca84b221331",
        "8d99f756ae99a668",
        "1ece28347f14ba65",
        "e659d4a54d629518",
        "dc19107475a84e26",
        "63eb25fa06950cf7",
        "387c458d01ea1e0c",
        "c2d6ace056c36360",
        "c50a08efac558c82",
        "6b108ac4c0926484",
        "5b7567ecf7e25c16",
        "f806bf53d0b05b2b"
      ],
      "date": 1712769028357
    },
    {
      "type": "edit",
      "id": "7f4484776329f409",
      "item": {
        "type": "paragraph",
        "id": "7f4484776329f409",
        "text": "and i (Robert) think if you scroll down, their alternative format is closer to your own right? where nodes and edges are broken out into their own arrays, rather than all elements in one big array"
      },
      "date": 1712769048423
    },
    {
      "type": "remove",
      "id": "1ece28347f14ba65",
      "date": 1712769120393
    },
    {
      "id": "387c458d01ea1e0c",
      "type": "move",
      "order": [
        "327911a6539469f9",
        "7f4484776329f409",
        "61486d35a6a39f63",
        "d748c9b9662910b6",
        "7d8e1ca84b221331",
        "8d99f756ae99a668",
        "e659d4a54d629518",
        "dc19107475a84e26",
        "63eb25fa06950cf7",
        "c2d6ace056c36360",
        "c50a08efac558c82",
        "6b108ac4c0926484",
        "5b7567ecf7e25c16",
        "f806bf53d0b05b2b",
        "387c458d01ea1e0c"
      ],
      "date": 1712769137808
    },
    {
      "item": {
        "type": "factory",
        "id": "262343cbc93b11ef"
      },
      "id": "262343cbc93b11ef",
      "type": "add",
      "after": "387c458d01ea1e0c",
      "date": 1712769145422
    },
    {
      "type": "edit",
      "id": "262343cbc93b11ef",
      "item": {
        "type": "pagefold",
        "id": "262343cbc93b11ef",
        "text": "~"
      },
      "date": 1712769148213
    },
    {
      "id": "262343cbc93b11ef",
      "type": "move",
      "order": [
        "327911a6539469f9",
        "7f4484776329f409",
        "61486d35a6a39f63",
        "d748c9b9662910b6",
        "7d8e1ca84b221331",
        "8d99f756ae99a668",
        "e659d4a54d629518",
        "dc19107475a84e26",
        "63eb25fa06950cf7",
        "c2d6ace056c36360",
        "c50a08efac558c82",
        "6b108ac4c0926484",
        "5b7567ecf7e25c16",
        "f806bf53d0b05b2b",
        "262343cbc93b11ef",
        "387c458d01ea1e0c"
      ],
      "date": 1712769153351
    },
    {
      "type": "edit",
      "id": "327911a6539469f9",
      "item": {
        "type": "paragraph",
        "id": "327911a6539469f9",
        "text": "From [[Robert Best]] today: we did take a small little stab at using [[Cytoscape.js]] about 9 months ago here\n[https://robert.wiki.openlearning.cc/cytoscape-demo.html page]\n\nThe graph data itself is just hardcoded inside the HTML script\ni think we just copied this demo from somewhere and just ran with it\nthe data is put in the elements: key as shown here\n[https://js.cytoscape.org/#notation/elements-json page]"
      },
      "date": 1712769228270
    },
    {
      "item": {
        "type": "factory",
        "id": "8ad4159f9170ca6d"
      },
      "id": "8ad4159f9170ca6d",
      "type": "add",
      "after": "387c458d01ea1e0c",
      "date": 1712769681807
    },
    {
      "type": "edit",
      "id": "8ad4159f9170ca6d",
      "item": {
        "type": "pagefold",
        "id": "8ad4159f9170ca6d",
        "text": "~"
      },
      "date": 1712769692806
    },
    {
      "item": {
        "type": "factory",
        "id": "dccdfe37b50de3ca"
      },
      "id": "dccdfe37b50de3ca",
      "type": "add",
      "after": "8ad4159f9170ca6d",
      "date": 1712769694338
    },
    {
      "type": "edit",
      "id": "dccdfe37b50de3ca",
      "item": {
        "type": "paragraph",
        "id": "dccdfe37b50de3ca",
        "text": "⇐ [[recommend]]"
      },
      "date": 1712769711351
    },
    {
      "type": "edit",
      "id": "dccdfe37b50de3ca",
      "item": {
        "type": "paragraph",
        "id": "dccdfe37b50de3ca",
        "text": "⇐ [[recommend]] ⇒ [[Store Unique Representations of Nodes]] ⇐ [[store]]"
      },
      "date": 1712769755680
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1712779687325
    },
    {
      "id": "ef3c9f4741c3c796",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ef3c9f4741c3c796",
        "text": "⇐ [[2016-03-25]] / [[1995-03-25]]"
      },
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779692841
    },
    {
      "id": "dd56a138d0e0624c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "dd56a138d0e0624c",
        "text": "In the past, cupboard-sized encyclopaedias belonged in the middle-class living room and were never lent out. Today, we get our information from the Internet and are happy to pass on our wiki knowledge. "
      },
      "after": "ef3c9f4741c3c796",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779695581
    },
    {
      "id": "8627a7216205a78f",
      "type": "add",
      "item": {
        "type": "audio",
        "id": "8627a7216205a78f",
        "text": "https://cdn-storage.br.de/iLCpbHJGNL9zu6i6NL97bmWH_-by/_-iS/9-4P_Ary/04176ea8-316c-4251-82c5-4a40d4a08a27_3.mp3\nMaier, Yvonne. 25.03.1995: Das erste Wiki startet im Netz. [https://www.br.de/radio/bayern2/sendungen/radiowissen/erstes-wiki-startet-im-netz-102.html br.de] 2016-03-25"
      },
      "after": "dd56a138d0e0624c",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779698658
    },
    {
      "id": "c0feed982f10fe12",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "c0feed982f10fe12",
        "text": "~"
      },
      "after": "8627a7216205a78f",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779702663
    },
    {
      "id": "bf04f156fe4e23de",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "bf04f156fe4e23de",
        "text": "⇐ [[Iain Couzin's Collective Behavior]]"
      },
      "after": "c0feed982f10fe12",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779706453
    },
    {
      "id": "756f92e582e3af8f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "756f92e582e3af8f",
        "text": "[[synchronize]]"
      },
      "after": "bf04f156fe4e23de",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779710084
    },
    {
      "id": "19840ec092cb1cad",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "19840ec092cb1cad",
        "text": "[[Murmuration]]"
      },
      "after": "756f92e582e3af8f",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779713791
    },
    {
      "id": "f170a416cdf989fd",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "f170a416cdf989fd",
        "text": "~"
      },
      "after": "19840ec092cb1cad",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779718510
    },
    {
      "id": "7d16fbc379be5bd4",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7d16fbc379be5bd4",
        "text": "[[John Pavlick]], For lack of a better name, I’m calling it “The Module Pattern”. [https://dev.to/jmpavlick/for-lack-of-a-better-name-im-calling-it-the-module-pattern-5dfi post]"
      },
      "after": "f170a416cdf989fd",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779725245
    },
    {
      "id": "6d0a90ce610b6bc1",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "6d0a90ce610b6bc1",
        "text": "~"
      },
      "after": "7d16fbc379be5bd4",
      "attribution": {
        "page": "scratch"
      },
      "date": 1712779731097
    },
    {
      "item": {
        "type": "factory",
        "id": "a97b14b7b31bac7b"
      },
      "id": "a97b14b7b31bac7b",
      "type": "add",
      "after": "dccdfe37b50de3ca",
      "date": 1712780203958
    },
    {
      "type": "edit",
      "id": "a97b14b7b31bac7b",
      "item": {
        "type": "paragraph",
        "id": "a97b14b7b31bac7b",
        "text": "Graphs also provide us with a natural way of thinking about their multiscale structure ranging from the microscopic ego-network structure of nodes to mesoscopic clustersì to the overall macroscopic connectivity patterns."
      },
      "date": 1712780214721
    },
    {
      "type": "edit",
      "id": "a97b14b7b31bac7b",
      "item": {
        "type": "paragraph",
        "id": "a97b14b7b31bac7b",
        "text": "Graphs also provide us with a natural way of thinking about their multiscale structure ranging from the microscopic [[ego-network]] structure of nodes to mesoscopic clustersì to the overall macroscopic connectivity patterns."
      },
      "date": 1712780236080
    },
    {
      "item": {
        "type": "factory",
        "id": "1da17c4d4dc0058b"
      },
      "id": "1da17c4d4dc0058b",
      "type": "add",
      "after": "a97b14b7b31bac7b",
      "date": 1712780253078
    },
    {
      "type": "edit",
      "id": "1da17c4d4dc0058b",
      "item": {
        "type": "reference",
        "id": "1da17c4d4dc0058b",
        "site": "wiki.ralfbarkow.ch",
        "slug": "ego-minus-ego",
        "title": "Ego Minus Ego",
        "text": "The ego minus ego of a user u is therefore the set of its alters with the interactions between them."
      },
      "date": 1712780271130
    },
    {
      "type": "edit",
      "id": "a97b14b7b31bac7b",
      "item": {
        "type": "paragraph",
        "id": "a97b14b7b31bac7b",
        "text": "Graphs also provide us with a natural way of thinking about their multiscale structure ranging from the microscopic [[ego-network]] structure of nodes to mesoscopic clustersì to the overall macroscopic connectivity patterns. ([[Similarities and Representations of Graph Structures]], )"
      },
      "date": 1712780299323
    },
    {
      "type": "edit",
      "id": "a97b14b7b31bac7b",
      "item": {
        "type": "paragraph",
        "id": "a97b14b7b31bac7b",
        "text": "Graphs also provide us with a natural way of thinking about their multiscale structure ranging from the microscopic [[ego-network]] structure of nodes to mesoscopic clustersì to the overall macroscopic connectivity patterns. ([[Similarities and Representations of Graph Structures]], p., 2)"
      },
      "date": 1712780327485
    },
    {
      "type": "edit",
      "id": "a97b14b7b31bac7b",
      "item": {
        "type": "paragraph",
        "id": "a97b14b7b31bac7b",
        "text": "Graphs also provide us with a natural way of thinking about their [[Multiscale Structure]] ranging from the microscopic [[ego-network]] structure of nodes to mesoscopic clustersì to the overall macroscopic connectivity patterns. ([[Similarities and Representations of Graph Structures]], p., 2)"
      },
      "date": 1712780632062
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712780741977
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1712780773465
    },
    {
      "item": {
        "type": "factory",
        "id": "d74bc55cc585a27a"
      },
      "id": "d74bc55cc585a27a",
      "type": "add",
      "after": "1da17c4d4dc0058b",
      "date": 1712781465627
    },
    {
      "type": "edit",
      "id": "d74bc55cc585a27a",
      "item": {
        "type": "paragraph",
        "id": "d74bc55cc585a27a",
        "text": "As our first contribution, we introduce our neural network-based method, V E R S E, in Chapter ¦."
      },
      "date": 1712781491691
    },
    {
      "type": "edit",
      "id": "d74bc55cc585a27a",
      "item": {
        "type": "paragraph",
        "id": "d74bc55cc585a27a",
        "text": "As our first contribution, we introduce our neural network-based method, V E R S E, in Chapter 4."
      },
      "date": 1712781505658
    },
    {
      "type": "edit",
      "id": "d74bc55cc585a27a",
      "item": {
        "type": "paragraph",
        "id": "d74bc55cc585a27a",
        "text": "As our first contribution, we introduce our neural network-based method, [[Verse]], in Chapter 4."
      },
      "date": 1712781623605
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712781654636
    },
    {
      "item": {
        "type": "factory",
        "id": "660a4ebf46da9bbc"
      },
      "id": "660a4ebf46da9bbc",
      "type": "add",
      "after": "d74bc55cc585a27a",
      "date": 1712781855840
    },
    {
      "type": "edit",
      "id": "660a4ebf46da9bbc",
      "item": {
        "type": "paragraph",
        "id": "660a4ebf46da9bbc",
        "text": "\nTSITSULIN, Anton, MOTTIN, Davide, KARRAS, Panagiotis and MÜLLER, Emmanuel, 2018. VERSE: Versatile Graph Embeddings from Similarity Measures. In: Proceedings of the 2018 World Wide Web Conference on World Wide Web - WWW ’18. Online. Lyon, France: ACM Press. 2018. p. 539–548. ISBN 978-1-4503-5639-8. DOI 10.1145/3178876.3186120. [Accessed 10 April 2024]. \n"
      },
      "date": 1712781857621
    },
    {
      "type": "edit",
      "id": "660a4ebf46da9bbc",
      "item": {
        "type": "paragraph",
        "id": "660a4ebf46da9bbc",
        "text": "TSITSULIN, Anton, MOTTIN, Davide, KARRAS, Panagiotis and MÜLLER, Emmanuel, 2018. VERSE: Versatile Graph Embeddings from Similarity Measures. In: Proceedings of the 2018 World Wide Web Conference on World Wide Web - WWW ’18. Lyon, France: ACM Press. 2018. p. 539–548. ISBN 978-1-4503-5639-8. DOI 10.1145/3178876.3186120. [Accessed 10 April 2024]. \n"
      },
      "date": 1712781867531
    },
    {
      "item": {
        "type": "factory",
        "id": "3676495980a5e19c"
      },
      "id": "3676495980a5e19c",
      "type": "add",
      "after": "660a4ebf46da9bbc",
      "date": 1712781971726
    },
    {
      "type": "edit",
      "id": "3676495980a5e19c",
      "item": {
        "type": "paragraph",
        "id": "3676495980a5e19c",
        "text": "Embedding a web-scale information network into a low-dimensional vector space facilitates tasks such as link prediction, classification, and visualization. Past research has addressed the problem of extracting such embeddings by adopting methods from words to graphs, without defining a clearly comprehensible graph-related objective. Yet, as we show, the objectives used in past works implicitly utilize similarity measures among graph nodes. In this paper, we carry the similarity orientation of previous works to its logical conclusion; we propose VERtex Similarity Embeddings (VERSE), a simple, versatile, and memory-efficient method that derives graph embeddings explicitly calibrated to preserve the distributions of a selected vertex-to-vertex similarity measure. VERSE learns such embeddings by training a single-layer neural network. While its default, scalable version does so via sampling similarity information, we also develop a variant using the full information per vertex. Our experimental study on standard benchmarks and real-world datasets demonstrates that VERSE, instantiated with diverse similarity measures, outperforms state-of-the-art methods in terms of precision and recall in major data mining tasks and supersedes them in time and space efficiency, while the scalable sampling-based variant achieves equally good result as the non-scalable full variant."
      },
      "date": 1712781973689
    },
    {
      "type": "edit",
      "id": "3676495980a5e19c",
      "item": {
        "type": "paragraph",
        "id": "3676495980a5e19c",
        "text": "Embedding a web-scale information network into a low-dimensional vector space facilitates tasks such as [[Link Prediction]], classification, and visualization. Past research has addressed the problem of extracting such embeddings by adopting methods from words to graphs, without defining a clearly comprehensible graph-related objective. Yet, as we show, the objectives used in past works implicitly utilize similarity measures among graph nodes. In this paper, we carry the similarity orientation of previous works to its logical conclusion; we propose VERtex Similarity Embeddings (VERSE), a simple, versatile, and memory-efficient method that derives graph embeddings explicitly calibrated to preserve the distributions of a selected vertex-to-vertex similarity measure. VERSE learns such embeddings by training a single-layer neural network. While its default, scalable version does so via sampling similarity information, we also develop a variant using the full information per vertex. Our experimental study on standard benchmarks and real-world datasets demonstrates that VERSE, instantiated with diverse similarity measures, outperforms state-of-the-art methods in terms of precision and recall in major data mining tasks and supersedes them in time and space efficiency, while the scalable sampling-based variant achieves equally good result as the non-scalable full variant."
      },
      "date": 1712781996336
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1712782209170
    },
    {
      "item": {
        "type": "factory",
        "id": "967d6da559c5dd6a"
      },
      "id": "967d6da559c5dd6a",
      "type": "add",
      "after": "3676495980a5e19c",
      "date": 1712783472307
    },
    {
      "type": "edit",
      "id": "967d6da559c5dd6a",
      "item": {
        "type": "reference",
        "id": "967d6da559c5dd6a",
        "site": "wiki.ralfbarkow.ch",
        "slug": "2024-04-09",
        "title": "2024-04-09",
        "text": "JavaScript Testing with [[Jasmine]] by [[Evan Hahn]]. [https://priv.gg/e/OReilly.JavaScript.Testing.With.Jasmine.Apr.2013.ISBN.1449356370.pdf pdf], Jasmine and [[CoffeeScript]] ⇒"
      },
      "date": 1712783481055
    },
    {
      "type": "edit",
      "id": "967d6da559c5dd6a",
      "item": {
        "type": "reference",
        "id": "967d6da559c5dd6a",
        "site": "wiki.ralfbarkow.ch",
        "slug": "2024-04-09",
        "title": "2024-04-09",
        "text": "Ward Cunningham on the Appeal of OOP and Dynamic Languages, Federated Wiki. [https://www.infoq.com/interviews/cunningham-federated-wiki/ page]"
      },
      "date": 1712783488726
    },
    {
      "item": {
        "type": "factory",
        "id": "fa134846b99fb8d5"
      },
      "id": "fa134846b99fb8d5",
      "type": "add",
      "after": "967d6da559c5dd6a",
      "date": 1712783496145
    },
    {
      "type": "edit",
      "id": "fa134846b99fb8d5",
      "item": {
        "type": "paragraph",
        "id": "fa134846b99fb8d5",
        "text": "[[Asynchronous Versus Synchronous]]"
      },
      "date": 1712783500516
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712783862760
    },
    {
      "item": {
        "type": "factory",
        "id": "09566bca32030c58"
      },
      "id": "09566bca32030c58",
      "type": "add",
      "after": "fa134846b99fb8d5",
      "date": 1712784061147
    },
    {
      "type": "edit",
      "id": "09566bca32030c58",
      "item": {
        "type": "reference",
        "id": "09566bca32030c58",
        "site": "wiki.ralfbarkow.ch",
        "slug": "compositejs",
        "title": "composite.js",
        "text": "// aggregate multiple graphs into a single graph"
      },
      "date": 1712784069730
    },
    {
      "type": "edit",
      "id": "09566bca32030c58",
      "item": {
        "type": "reference",
        "id": "09566bca32030c58",
        "site": "wiki.ralfbarkow.ch",
        "slug": "compositejs",
        "title": "composite.js",
        "text": "// [[aggregate]] multiple graphs into a single graph"
      },
      "date": 1712784083920
    }
  ]
}