{
  "title": "How Emily Tamed the Caml",
  "story": [
    {
      "type": "markdown",
      "id": "be9ad3e0130db908",
      "text": "> How does  one  make  a  program  breach  resistant?One  promising  approach  is  to  apply  the  Principle  of  Least  Authority  at   object  granularity.  The  E  language has  previously demonstrated that  object-capability  languages  turn  many  of  the  security  \nrequirements for software into emergent properties of traditional object-oriented design and modularity enforcement.\nEmily  is  a  subset  of  OCaml  that  uses  a  design  rule  verifier  to  enforce  object-capability  principles.  It  demonstrates  how\nmemory-safe languages can be transformed into breach-resistant object-capability systems with little loss of either \nexpressivity or performance."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "How Emily Tamed the Caml",
        "story": []
      },
      "date": 1628512242035
    },
    {
      "item": {
        "type": "factory",
        "id": "be9ad3e0130db908"
      },
      "id": "be9ad3e0130db908",
      "type": "add",
      "date": 1628512254138
    },
    {
      "type": "edit",
      "id": "be9ad3e0130db908",
      "item": {
        "type": "markdown",
        "id": "be9ad3e0130db908",
        "text": "> How does  one  make  a  program  breach  resistant?One  promising  approach  is  to  apply  the  Principle  of  Least  Authority  at  \nobject  granularity.  The  E  language has  previously demonstrated that  object-capability  languages  turn  many  of  the  security  \nrequirements for software into emergent properties of traditional object-oriented design and modularity enforcement.\nEmily  is  a  subset  of  OCaml  that  uses  a  design  rule  verifier  to  enforce  object-capability  principles.  It  demonstrates  how\nmemory-safe languages can be transformed into breach-resistant object-capability systems with little loss of either \nexpressivity or performance."
      },
      "date": 1628512258424
    },
    {
      "type": "edit",
      "id": "be9ad3e0130db908",
      "item": {
        "type": "markdown",
        "id": "be9ad3e0130db908",
        "text": "> How does  one  make  a  program  breach  resistant?One  promising  approach  is  to  apply  the  Principle  of  Least  Authority  at   object  granularity.  The  E  language has  previously demonstrated that  object-capability  languages  turn  many  of  the  security  \nrequirements for software into emergent properties of traditional object-oriented design and modularity enforcement.\nEmily  is  a  subset  of  OCaml  that  uses  a  design  rule  verifier  to  enforce  object-capability  principles.  It  demonstrates  how\nmemory-safe languages can be transformed into breach-resistant object-capability systems with little loss of either \nexpressivity or performance."
      },
      "date": 1628512271326
    }
  ]
}