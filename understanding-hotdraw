{
  "title": "Understanding HotDraw",
  "story": [
    {
      "type": "markdown",
      "id": "939d03b34eb52f27",
      "text": "T. Richner and S. Ducasse, “Recovering high-level views of object-oriented applications from static and dynamic information,” in Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM’99). “Software Maintenance for Business Change” (Cat. No.99CB36360), Oxford, UK, 1999, pp. 13–22. doi: 10.1109/ICSM.1999.792487.\n"
    },
    {
      "type": "markdown",
      "id": "89118f498b1d0450",
      "text": "# Case Study: Understanding HotDraw"
    },
    {
      "type": "markdown",
      "id": "8f1d9b225ee288e6",
      "text": "In this section we demonstrate how our approach supports reverse engineering and program understanding by applying it on the [[HotDraw]] framework [1]. We show how Prolog rules are used to define R and C for specifying and generating a range of views of the framework. We first briefly present HotDraw. We then define a scenario and specify and analyze some views generated from this trace information."
    },
    {
      "type": "markdown",
      "id": "e696b9868d672bfc",
      "text": "## The HotDraw Framework\n"
    },
    {
      "type": "markdown",
      "id": "512c5f89ebfbc209",
      "text": "HotDraw is a framework for semantic graphic editors. It allows for the creation of graphical editors which associate the picture with a data structure - that is, changing the picture also changes the data structure. The HotDraw framework consists of 114 Smalltalk classes and comes with several sample editors.\n"
    },
    {
      "type": "markdown",
      "id": "017ecbb3316bb49f",
      "text": "\nFrom the documentation we learn that HotDraw is based on the Model-View-Controller triad [18]; these roles are played by the classes Drawing, DrawingEditor and DrawingController respectively. Furthermore, it has a few other basic elements: tools are used to manipulate the drawing which consists of figures accessed through handles. Constraints are used to ensure that certain invariants are met, for exam- ple, that two figures connected with a line remain connected if one of the figures is moved."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Understanding HotDraw",
        "story": []
      },
      "date": 1629477097324
    },
    {
      "item": {
        "type": "factory",
        "id": "939d03b34eb52f27"
      },
      "id": "939d03b34eb52f27",
      "type": "add",
      "date": 1629477098840
    },
    {
      "type": "edit",
      "id": "939d03b34eb52f27",
      "item": {
        "type": "markdown",
        "id": "939d03b34eb52f27",
        "text": "T. Richner and S. Ducasse, “Recovering high-level views of object-oriented applications from static and dynamic information,” in Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM’99). “Software Maintenance for Business Change” (Cat. No.99CB36360), Oxford, UK, 1999, pp. 13–22. doi: 10.1109/ICSM.1999.792487.\n"
      },
      "date": 1629477105341
    },
    {
      "item": {
        "type": "factory",
        "id": "c26e81bf81244537"
      },
      "id": "c26e81bf81244537",
      "type": "add",
      "after": "939d03b34eb52f27",
      "date": 1629477113929
    },
    {
      "type": "remove",
      "id": "c26e81bf81244537",
      "date": 1629477114982
    },
    {
      "item": {
        "type": "factory",
        "id": "89118f498b1d0450"
      },
      "id": "89118f498b1d0450",
      "type": "add",
      "after": "939d03b34eb52f27",
      "date": 1629477115951
    },
    {
      "type": "edit",
      "id": "89118f498b1d0450",
      "item": {
        "type": "markdown",
        "id": "89118f498b1d0450",
        "text": "# Case Study: Understanding HotDraw"
      },
      "date": 1629477120316
    },
    {
      "item": {
        "type": "factory",
        "id": "996e1111da6ff73b"
      },
      "id": "996e1111da6ff73b",
      "type": "add",
      "after": "89118f498b1d0450",
      "date": 1629477127914
    },
    {
      "type": "remove",
      "id": "996e1111da6ff73b",
      "date": 1629477129057
    },
    {
      "item": {
        "type": "factory",
        "id": "8f1d9b225ee288e6"
      },
      "id": "8f1d9b225ee288e6",
      "type": "add",
      "after": "89118f498b1d0450",
      "date": 1629477130126
    },
    {
      "type": "edit",
      "id": "8f1d9b225ee288e6",
      "item": {
        "type": "markdown",
        "id": "8f1d9b225ee288e6",
        "text": "In this section we demonstrate how our approach supports reverse engineering and program understanding by applying it on the [[HotDraw]] framework [1]. We show how Pro- log rules are used to define R and C for specifying and gen- erating a range of views of the framework. We first briefly present HotDraw. We then define a scenario and specify and analyze some views generated from this trace information."
      },
      "date": 1629477149318
    },
    {
      "type": "edit",
      "id": "8f1d9b225ee288e6",
      "item": {
        "type": "markdown",
        "id": "8f1d9b225ee288e6",
        "text": "In this section we demonstrate how our approach supports reverse engineering and program understanding by applying it on the [[HotDraw]] framework [1]. We show how Prolog rules are used to define R and C for specifying and generating a range of views of the framework. We first briefly present HotDraw. We then define a scenario and specify and analyze some views generated from this trace information."
      },
      "date": 1629477168279
    },
    {
      "item": {
        "type": "factory",
        "id": "15be93b55c32d79f"
      },
      "id": "15be93b55c32d79f",
      "type": "add",
      "after": "8f1d9b225ee288e6",
      "date": 1629477172933
    },
    {
      "type": "remove",
      "id": "15be93b55c32d79f",
      "date": 1629477174012
    },
    {
      "item": {
        "type": "factory",
        "id": "e696b9868d672bfc"
      },
      "id": "e696b9868d672bfc",
      "type": "add",
      "after": "8f1d9b225ee288e6",
      "date": 1629477175230
    },
    {
      "type": "edit",
      "id": "e696b9868d672bfc",
      "item": {
        "type": "markdown",
        "id": "e696b9868d672bfc",
        "text": "## The HotDraw Framework"
      },
      "date": 1629477181148
    },
    {
      "type": "edit",
      "id": "e696b9868d672bfc",
      "item": {
        "type": "markdown",
        "id": "e696b9868d672bfc",
        "text": "## The HotDraw Framework\n"
      },
      "date": 1629477186431
    },
    {
      "type": "add",
      "id": "512c5f89ebfbc209",
      "item": {
        "type": "markdown",
        "id": "512c5f89ebfbc209",
        "text": "HotDraw is a framework for semantic graphic editors. It allows for the creation of graphical editors which associate the picture with a data structure - that is, changing the picture also changes the data structure. The HotDraw framework consists of 114 Smalltalk classes and comes with several sample editors."
      },
      "after": "e696b9868d672bfc",
      "date": 1629477210728
    },
    {
      "type": "edit",
      "id": "512c5f89ebfbc209",
      "item": {
        "type": "markdown",
        "id": "512c5f89ebfbc209",
        "text": "HotDraw is a framework for semantic graphic editors. It allows for the creation of graphical editors which associate the picture with a data structure - that is, changing the picture also changes the data structure. The HotDraw framework consists of 114 Smalltalk classes and comes with several sample editors.\n"
      },
      "date": 1629477216683
    },
    {
      "type": "add",
      "id": "017ecbb3316bb49f",
      "item": {
        "type": "markdown",
        "id": "017ecbb3316bb49f",
        "text": "\nFrom the documentation we learn that HotDraw is based on the Model-View-Controller triad [18]; these roles are played by the classes Drawing, DrawingEditor and DrawingController respectively. Furthermore, it has a few other basic elements: tools are used to manipulate the drawing which consists of figures accessed through handles. Constraints are used to ensure that certain invariants are met, for exam- ple, that two figures connected with a line remain connected if one of the figures is moved."
      },
      "after": "512c5f89ebfbc209",
      "date": 1629477233699
    }
  ]
}