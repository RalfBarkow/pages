{
  "title": "Method",
  "story": [
    {
      "type": "markdown",
      "id": "2dc1d2674c81dac1",
      "text": "The Smalltalk code is stored in what is called a method, which corresponds (approximately) to a named Lisp lambda-expression. As for classes, a textual representation may be obtained just by sending introspective messages. [:x | x+1] is equivalent to the (lambda (x) (+ x 1)) Lisp expression.\n"
    },
    {
      "type": "code",
      "id": "ab27e7338192106f",
      "text": "[:x | x+1] "
    },
    {
      "type": "markdown",
      "id": "9850a4784c999a0b",
      "text": " It is represented by an object – a `FullBlockClosure` – from which one can ask for its external textual representation. In order to get their external textual representation, methods and lexical closures, denoted under the vocable block, use their internal representation, which mainly comprises bytecodes, as well as a decompiler (which is reified, too). A special tool (CompiledCodeInspector) makes the access to this source representation very user friendly, using the mouse and a click on a field."
    },
    {
      "type": "reference",
      "id": "1cfe16886022dccd",
      "site": "marc.tries.fed.wiki",
      "slug": "method",
      "title": "Method",
      "text": "Whisp:"
    },
    {
      "type": "markdown",
      "id": "b3f584d930504832",
      "text": "Need to define method, [[tool]], [[affordance]], [[model]] and more.\n\nSee [[Methods]]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Method",
        "story": []
      },
      "date": 1606926684142
    },
    {
      "item": {
        "type": "factory",
        "id": "2dc1d2674c81dac1"
      },
      "id": "2dc1d2674c81dac1",
      "type": "add",
      "date": 1606926691391
    },
    {
      "type": "edit",
      "id": "2dc1d2674c81dac1",
      "item": {
        "type": "markdown",
        "id": "2dc1d2674c81dac1",
        "text": "Whisp:\nNeed to define method, [[tool]], [[affordance]], [[model]] and more.\nSee [[Methods]]."
      },
      "date": 1606926787060
    },
    {
      "type": "fork",
      "site": "marc.tries.fed.wiki",
      "date": 1631270919845
    },
    {
      "item": {
        "type": "reference",
        "id": "1cfe16886022dccd",
        "site": "marc.tries.fed.wiki",
        "slug": "method",
        "title": "Method",
        "text": "Whisp:"
      },
      "id": "1cfe16886022dccd",
      "type": "add",
      "after": "2dc1d2674c81dac1",
      "date": 1659025970049
    },
    {
      "type": "edit",
      "id": "1cfe16886022dccd",
      "item": {
        "type": "reference",
        "id": "1cfe16886022dccd",
        "site": "marc.tries.fed.wiki",
        "slug": "method",
        "title": "Method",
        "text": "Whisp:"
      },
      "date": 1659025972665
    },
    {
      "type": "edit",
      "id": "2dc1d2674c81dac1",
      "item": {
        "type": "markdown",
        "id": "2dc1d2674c81dac1",
        "text": "The Smalltalk code is stored in what is called a method, which corresponds (approximately) to a named Lisp lambda-expression. As for classes, a textual representation may be obtained just by sending introspective messages. [:x | x+1] is equivalent to the (lambda (x) (+ x 1)) Lisp expression.\n"
      },
      "date": 1659025987087
    },
    {
      "type": "edit",
      "id": "2dc1d2674c81dac1",
      "item": {
        "type": "markdown",
        "id": "2dc1d2674c81dac1",
        "text": "The Smalltalk code is stored in what is called a method, which corresponds (approximately) to a named Lisp lambda-expression. As for classes, a textual representation may be obtained just by sending introspective messages. [:x | x+1] is equivalent to the (lambda (x) (+ x 1)) Lisp expression.\n"
      },
      "date": 1659026000029
    },
    {
      "id": "1cfe16886022dccd",
      "type": "move",
      "order": [
        "2dc1d2674c81dac1",
        "1cfe16886022dccd",
        "b3f584d930504832"
      ],
      "date": 1659026003066,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1659026005315
    },
    {
      "type": "add",
      "id": "b3f584d930504832",
      "item": {
        "type": "markdown",
        "id": "b3f584d930504832",
        "text": "\nNeed to define method, [[tool]], [[affordance]], [[model]] and more.\nSee [[Methods]]."
      },
      "after": "2dc1d2674c81dac1",
      "date": 1659026005747
    },
    {
      "item": {
        "type": "factory",
        "id": "ab27e7338192106f"
      },
      "id": "ab27e7338192106f",
      "type": "add",
      "after": "b3f584d930504832",
      "date": 1659026061754
    },
    {
      "type": "edit",
      "id": "ab27e7338192106f",
      "item": {
        "type": "code",
        "id": "ab27e7338192106f",
        "text": "[:x | x+1] "
      },
      "date": 1659026064102
    },
    {
      "id": "ab27e7338192106f",
      "type": "move",
      "order": [
        "2dc1d2674c81dac1",
        "ab27e7338192106f",
        "1cfe16886022dccd",
        "b3f584d930504832"
      ],
      "date": 1659026066472
    },
    {
      "item": {
        "type": "factory",
        "id": "9850a4784c999a0b"
      },
      "id": "9850a4784c999a0b",
      "type": "add",
      "after": "b3f584d930504832",
      "date": 1659026108414
    },
    {
      "id": "9850a4784c999a0b",
      "type": "move",
      "order": [
        "2dc1d2674c81dac1",
        "ab27e7338192106f",
        "9850a4784c999a0b",
        "1cfe16886022dccd",
        "b3f584d930504832"
      ],
      "date": 1659026109990
    },
    {
      "type": "edit",
      "id": "9850a4784c999a0b",
      "item": {
        "type": "paragraph",
        "id": "9850a4784c999a0b",
        "text": " It is represented by an object – a `FullBlockClosure` – from which one can ask for its external textual representation. In order to get their external textual representation, methods and lexical closures, denoted under the vocable block, use their internal representation, which mainly comprises bytecodes, as well as a decompiler (which is reified, too). A special tool (CompiledCodeInspector) makes the access to this source representation very user friendly, using the mouse and a click on a field."
      },
      "date": 1659026111977
    },
    {
      "type": "edit",
      "id": "9850a4784c999a0b",
      "item": {
        "type": "markdown",
        "id": "9850a4784c999a0b",
        "text": " It is represented by an object – a `FullBlockClosure` – from which one can ask for its external textual representation. In order to get their external textual representation, methods and lexical closures, denoted under the vocable block, use their internal representation, which mainly comprises bytecodes, as well as a decompiler (which is reified, too). A special tool (CompiledCodeInspector) makes the access to this source representation very user friendly, using the mouse and a click on a field."
      },
      "date": 1659026113322
    },
    {
      "type": "edit",
      "id": "b3f584d930504832",
      "item": {
        "type": "markdown",
        "id": "b3f584d930504832",
        "text": "Need to define method, [[tool]], [[affordance]], [[model]] and more.\n\nSee [[Methods]]."
      },
      "date": 1659026162971
    }
  ]
}