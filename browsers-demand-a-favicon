{
  "title": "Browsers Demand a Favicon",
  "story": [
    {
      "id": "53e48000",
      "type": "paragraph",
      "text": "We\n enjoy experimenting with lightweight html5 programs served locally as \nstatic pages. Unless otherwise directed, browsers insist on requesting \nfavicon.ico files. Tired of ignoring this noise, we explore giving the \nbrowsers what they want."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 310\nRefresh this frame to generate more random icons.\n\nClick to copy a <link> tag to the clipboard.\n"
    },
    {
      "type": "paragraph",
      "id": "60923a2c55883798",
      "text": "Those who don't care about Safari can also use an SVG for their favicon. Perhaps this:"
    },
    {
      "type": "code",
      "id": "d76639d9c8430df0",
      "text": "/* (hiding this html inside a javascript comment)\n\n<link rel=\"icon\" type=\"image/svg+xml\" href='data:image/svg+xml,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -5 10 10\"><circle r=\"5\" fill=\"lightblue\"></circle></svg>'>\n\n*/"
    },
    {
      "type": "pagefold",
      "id": "c480da2f65acaade",
      "text": "."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  icons.style.display = 'block'\n  const check = document.createElement('textarea')\n  Object.assign(check.style, {\n    display: 'block',\n    boxSizing: 'border-box',\n    width: '100%',\n    height: '4rem',\n    margin: '5px 0'\n  })\n  check.setAttribute('id', 'check')\n  const refresh = document.createElement('button')\n  refresh.setAttribute('id', 'refresh')\n  refresh.innerText = 'Generate New Icons'\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  el.appendChild(icons)\n  el.appendChild(refresh)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n  window.refresh.onclick = () => location.reload()\n}\n"
    },
    {
      "type": "paragraph",
      "id": "3c6c232f2d091f9b",
      "text": "copyToClipboard() encodes the trick that gives the browser a favicon. A <link rel=\"icon\"> tag is generated with a data url and copied to the clipboard."
    },
    {
      "type": "paragraph",
      "id": "d5b35deea94125e0",
      "text": "The interested author can paste this <link> into their script, for example inside the <head> tag, to meet the browsers' need for a favicon."
    },
    {
      "type": "code",
      "id": "749a669cf00a9040",
      "text": "function copyToClipboard(event) {\n  const {target} = event\n  event.preventDefault()\n  if (target.tagName == \"CANVAS\") {\n    const html = `<link rel=\"icon\" type=\"image/png\" href=\"${target.toDataURL(\"image/png\")}\">`\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(html)\n      window.check.value = `Copied to clipboard.\nYou can paste into this text area to double-check.`\n    } else {\n      window.check.value = `<!--\nClipboard is not available in http.\nYou'll have to copy the old fashioned way.\n-->\n${html}`\n    }\n  }\n}\n"
    },
    {
      "type": "paragraph",
      "id": "d6ffd3c0deff8af5",
      "text": "For more info about clipboard.writeText(), see [https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText mdn]"
    },
    {
      "type": "paragraph",
      "id": "8e7bd99a3534f456",
      "text": "Note: clipboard is only available in https. Therefore we have explicitly specified an HTTPS url for the frame above."
    },
    {
      "type": "paragraph",
      "id": "cbe56fbe13b2dc6b",
      "text": "Our randomFavicon() uses <canvas> to generate a circle with a gradient similar to wiki flags. We choose circles for our script favicons so they can be easily distinguished from wikis when the tabs get crowded."
    },
    {
      "type": "code",
      "id": "f7644a4d7b267c9a",
      "text": "function randomFavicon() {\n  const rads = () => `${Math.random()*Math.PI*2}rad`\n  const canvas = document.createElement('canvas')\n  canvas.width = canvas.height = 64\n  const ctx = canvas.getContext('2d')\n  const tilt = Math.round(Math.random()*64)\n  const gradient = ctx.createLinearGradient(\n    tilt,0, (64-tilt),64)\n  const a = 50 -\n    Math.round(45*Math.random()*Math.random())\n  const b = 50 +\n    Math.round(45*Math.random()*Math.random())\n  gradient\n    .addColorStop(0, `hsl(${rads()} 78% ${a}%)`)\n  gradient\n    .addColorStop(1, `hsl(${rads()} 78% ${b}%)`)\n  ctx.fillStyle = gradient\n  ctx.arc(32, 32, 32, 0, Math.PI*2, true)\n  ctx.fill()\n  return canvas\n}\n"
    },
    {
      "type": "paragraph",
      "id": "836e2e6e9567b6f5",
      "text": "For more info about createLinearGradient(), see [https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient mdn]"
    },
    {
      "type": "paragraph",
      "id": "cfe3352f30a0bc2e",
      "text": "For more info about hsl(), see [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl mdn]"
    },
    {
      "id": "38b44000",
      "type": "paragraph",
      "text": "For more about Favicon, see [https://en.wikipedia.org/wiki/Favicon wikipedia]"
    },
    {
      "id": "73fba000",
      "type": "paragraph",
      "text": "We can ignore the ICO image format and just use PNGs. See [https://en.wikipedia.org/wiki/ICO_(file_format) wikipedia]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Browsers Demand a Favicon",
        "story": [
          {
            "id": "53e48000",
            "type": "paragraph",
            "text": "We\n enjoy experimenting with lightweight html5 programs served locally as \nstatic pages. Unless otherwise directed, browsers insist on requesting \nfavicon.ico files. Tired of ignoring this noise, we explore giving the \nbrowsers what they want."
          },
          {
            "id": "38b44000",
            "type": "paragraph",
            "text": "For more about Favicon, see [https://en.wikipedia.org/wiki/Favicon wikipedia]"
          },
          {
            "id": "73fba000",
            "type": "paragraph",
            "text": "We can ignore the ICO image format. See [https://en.wikipedia.org/wiki/ICO_(file_format) wikipedia]."
          }
        ]
      },
      "date": 1660436586741
    },
    {
      "type": "fork",
      "date": 1660436607078
    },
    {
      "id": "6cf52409eec3988c",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
      },
      "after": "53e48000",
      "date": 1660436622097
    },
    {
      "type": "add",
      "id": "60923a2c55883798",
      "item": {
        "type": "paragraph",
        "id": "60923a2c55883798",
        "text": "..."
      },
      "after": "6cf52409eec3988c",
      "date": 1660436660635
    },
    {
      "type": "add",
      "id": "3c6c232f2d091f9b",
      "item": {
        "type": "paragraph",
        "id": "3c6c232f2d091f9b",
        "text": "..."
      },
      "after": "60923a2c55883798",
      "date": 1660436664599
    },
    {
      "id": "5eb6b67568179aa3",
      "type": "add",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n el.innerHTML = 2 + 3\n}\n\n"
      },
      "after": "60923a2c55883798",
      "date": 1660436670842
    },
    {
      "type": "add",
      "id": "f7644a4d7b267c9a",
      "item": {
        "type": "factory",
        "id": "f7644a4d7b267c9a",
        "text": "..."
      },
      "after": "3c6c232f2d091f9b",
      "date": 1660436824603
    },
    {
      "type": "edit",
      "id": "f7644a4d7b267c9a",
      "item": {
        "type": "code",
        "id": "f7644a4d7b267c9a",
        "text": "function randomFavicon() {\n  const rads = () => `${Math.random()*Math.PI*2}rad`\n  const canvas = document.createElement('canvas')\n  canvas.width = canvas.height = 64\n  const ctx = canvas.getContext('2d')\n  const tilt = Math.round(Math.random()*n)\n  const gradient = ctx.createLinearGradient(\n    tilt,0, (64-tilt),64)\n  const a = 50 -\n    Math.round(45*Math.random()*Math.random())\n  const b = 50 +\n    Math.round(45*Math.random()*Math.random())\n  gradient.addColorStop(0, `hsl(${rads()} 78% ${a}%)`)\n  gradient.addColorStop(1, `hsl(${rads()} 78% ${b}%)`)\n  ctx.fillStyle = gradient\n  ctx.arc(32, 32, 32, 0, Math.PI*2, true)\n  ctx.fill()\n  return canvas\n}\n"
      },
      "date": 1660437109676
    },
    {
      "type": "edit",
      "id": "f7644a4d7b267c9a",
      "item": {
        "type": "code",
        "id": "f7644a4d7b267c9a",
        "text": "function randomFavicon() {\n  const rads = () => `${Math.random()*Math.PI*2}rad`\n  const canvas = document.createElement('canvas')\n  canvas.width = canvas.height = 64\n  const ctx = canvas.getContext('2d')\n  const tilt = Math.round(Math.random()*n)\n  const gradient = ctx.createLinearGradient(\n    tilt,0, (64-tilt),64)\n  const a = 50 -\n    Math.round(45*Math.random()*Math.random())\n  const b = 50 +\n    Math.round(45*Math.random()*Math.random())\n  gradient\n    .addColorStop(0, `hsl(${rads()} 78% ${a}%)`)\n  gradient\n    .addColorStop(1, `hsl(${rads()} 78% ${b}%)`)\n  ctx.fillStyle = gradient\n  ctx.arc(32, 32, 32, 0, Math.PI*2, true)\n  ctx.fill()\n  return canvas\n}\n"
      },
      "date": 1660437130280
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  for (let i=0; i<20; i++) {\n    el.appendChild(randomFavicon())\n  }\n}\n\n"
      },
      "date": 1660437190835
    },
    {
      "type": "edit",
      "id": "f7644a4d7b267c9a",
      "item": {
        "type": "code",
        "id": "f7644a4d7b267c9a",
        "text": "function randomFavicon() {\n  const rads = () => `${Math.random()*Math.PI*2}rad`\n  const canvas = document.createElement('canvas')\n  canvas.width = canvas.height = 64\n  const ctx = canvas.getContext('2d')\n  const tilt = Math.round(Math.random()*64)\n  const gradient = ctx.createLinearGradient(\n    tilt,0, (64-tilt),64)\n  const a = 50 -\n    Math.round(45*Math.random()*Math.random())\n  const b = 50 +\n    Math.round(45*Math.random()*Math.random())\n  gradient\n    .addColorStop(0, `hsl(${rads()} 78% ${a}%)`)\n  gradient\n    .addColorStop(1, `hsl(${rads()} 78% ${b}%)`)\n  ctx.fillStyle = gradient\n  ctx.arc(32, 32, 32, 0, Math.PI*2, true)\n  ctx.fill()\n  return canvas\n}\n"
      },
      "date": 1660437233638
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 300"
      },
      "date": 1660437324659
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  for (let i=0; i<18; i++) {\n    el.appendChild(randomFavicon())\n  }\n}\n\n"
      },
      "date": 1660437333739
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 260"
      },
      "date": 1660437341497
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 230"
      },
      "date": 1660437347654
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 230\n<p>\nRefresh this frame to generate more random icons.\n</p>\n<p>\nClick to copy a &lt;link&gt; tag to the clipboard.\n</p>\n"
      },
      "date": 1660437431362
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 230\nRefresh this frame to generate more random icons.\n\nClick to copy a <link> tag to the clipboard.\n"
      },
      "date": 1660437448286
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 200\nRefresh this frame to generate more random icons.\n\nClick to copy a <link> tag to the clipboard.\n"
      },
      "date": 1660437459211
    },
    {
      "type": "add",
      "id": "cbe56fbe13b2dc6b",
      "item": {
        "type": "paragraph",
        "id": "cbe56fbe13b2dc6b",
        "text": "..."
      },
      "after": "3c6c232f2d091f9b",
      "date": 1660437509367
    },
    {
      "type": "add",
      "id": "749a669cf00a9040",
      "item": {
        "type": "factory",
        "id": "749a669cf00a9040",
        "text": "..."
      },
      "after": "3c6c232f2d091f9b",
      "date": 1660437518032
    },
    {
      "type": "edit",
      "id": "749a669cf00a9040",
      "item": {
        "type": "code",
        "id": "749a669cf00a9040",
        "text": "function copyToClipboard(event) {\n  const {target} = event\n  event.preventDefault()\n  if (target.tagName == \"CANVAS\") {\n    navigator.clipboard.writeText(\n    `<link rel=\"icon\" type=\"image/png\" href=\"${target.toDataURL(\"image/png\")}\">`)\n  }\n}\n"
      },
      "date": 1660437714213
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  for (let i=0; i<18; i++) {\n    el.appendChild(randomFavicon())\n  }\n}\n\nexport async function bind(el) {\n  el.onclick = copyToClipboard\n}\n"
      },
      "date": 1660437759094
    },
    {
      "type": "edit",
      "id": "3c6c232f2d091f9b",
      "item": {
        "type": "paragraph",
        "id": "3c6c232f2d091f9b",
        "text": "copyToClipboard() encodes the trick that gives the browser a favicon. A <link rel=\"icon\"> tag is generated with a data url and copied to the clipboard."
      },
      "date": 1660437974931
    },
    {
      "type": "add",
      "id": "d5b35deea94125e0",
      "item": {
        "type": "paragraph",
        "id": "d5b35deea94125e0",
        "text": "The interested author can paste this <link> into their script, for example inside the <head> tag, to meet the browsers' need for a favicon."
      },
      "after": "3c6c232f2d091f9b",
      "date": 1660438120030
    },
    {
      "type": "edit",
      "id": "cbe56fbe13b2dc6b",
      "item": {
        "type": "paragraph",
        "id": "cbe56fbe13b2dc6b",
        "text": "Our randomFavicon() uses <canvas> to generate a circle with a gradient similar to wiki flags. We choose circles for our script favicons so they can be easily distinguished from wikis when the tabs get crowded."
      },
      "date": 1660438304947
    },
    {
      "type": "edit",
      "id": "73fba000",
      "item": {
        "id": "73fba000",
        "type": "paragraph",
        "text": "We can ignore the ICO image format and just use PNGs. See [https://en.wikipedia.org/wiki/ICO_(file_format) wikipedia]."
      },
      "date": 1660438449976
    },
    {
      "type": "add",
      "id": "c480da2f65acaade",
      "item": {
        "type": "factory",
        "id": "c480da2f65acaade",
        "text": "..."
      },
      "after": "60923a2c55883798",
      "date": 1660438466978
    },
    {
      "type": "edit",
      "id": "c480da2f65acaade",
      "item": {
        "type": "pagefold",
        "id": "c480da2f65acaade",
        "text": "."
      },
      "date": 1660438470775
    },
    {
      "type": "edit",
      "id": "60923a2c55883798",
      "item": {
        "type": "paragraph",
        "id": "60923a2c55883798",
        "text": "Those who don't care about Safari can also use an SVG for their favicon."
      },
      "date": 1660438523299
    },
    {
      "type": "edit",
      "id": "60923a2c55883798",
      "item": {
        "type": "paragraph",
        "id": "60923a2c55883798",
        "text": "Those who don't care about Safari can also use an SVG for their favicon. Perhaps this:"
      },
      "date": 1660438554138
    },
    {
      "type": "add",
      "id": "d76639d9c8430df0",
      "item": {
        "type": "factory",
        "id": "d76639d9c8430df0",
        "text": "..."
      },
      "after": "60923a2c55883798",
      "date": 1660438556225
    },
    {
      "type": "edit",
      "id": "d76639d9c8430df0",
      "item": {
        "type": "code",
        "id": "d76639d9c8430df0",
        "text": "// TODO"
      },
      "date": 1660438564419
    },
    {
      "type": "add",
      "id": "cfe3352f30a0bc2e",
      "item": {
        "type": "paragraph",
        "id": "cfe3352f30a0bc2e",
        "text": "For CSS hsl(), see [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl mdn]."
      },
      "after": "f7644a4d7b267c9a",
      "date": 1660438659994
    },
    {
      "type": "edit",
      "id": "cfe3352f30a0bc2e",
      "item": {
        "type": "paragraph",
        "id": "cfe3352f30a0bc2e",
        "text": "For more info about hsl(), see [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl mdn]."
      },
      "date": 1660438700025
    },
    {
      "type": "add",
      "id": "d6ffd3c0deff8af5",
      "item": {
        "type": "paragraph",
        "id": "d6ffd3c0deff8af5",
        "text": "For more info about clipboard.writeText(), see [https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText mdn]"
      },
      "after": "749a669cf00a9040",
      "date": 1660438763363
    },
    {
      "type": "edit",
      "id": "d6ffd3c0deff8af5",
      "item": {
        "type": "paragraph",
        "id": "d6ffd3c0deff8af5",
        "text": "For more info about clipboard.writeText(), see [https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText mdn]."
      },
      "date": 1660438768390
    },
    {
      "type": "edit",
      "id": "cfe3352f30a0bc2e",
      "item": {
        "type": "paragraph",
        "id": "cfe3352f30a0bc2e",
        "text": "For more info about hsl(), see [https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl mdn]"
      },
      "date": 1660438773975
    },
    {
      "type": "edit",
      "id": "d6ffd3c0deff8af5",
      "item": {
        "type": "paragraph",
        "id": "d6ffd3c0deff8af5",
        "text": "For more info about clipboard.writeText(), see [https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText mdn]"
      },
      "date": 1660438778280
    },
    {
      "type": "add",
      "id": "836e2e6e9567b6f5",
      "item": {
        "type": "paragraph",
        "id": "836e2e6e9567b6f5",
        "text": "For more info about createLinearGradient(), see [https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient mdn]"
      },
      "after": "f7644a4d7b267c9a",
      "date": 1660438861814
    },
    {
      "type": "edit",
      "id": "d76639d9c8430df0",
      "item": {
        "type": "code",
        "id": "d76639d9c8430df0",
        "text": "<link rel=\"icon\" type=\"image/svg+xml\" href='data:image/svg+xml,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -5 10 10\"><circle r=\"5\" fill=\"lightblue\"></circle></svg>'>"
      },
      "date": 1660439821720
    },
    {
      "type": "edit",
      "id": "d76639d9c8430df0",
      "item": {
        "type": "code",
        "id": "d76639d9c8430df0",
        "text": "`\n\n<link rel=\"icon\" type=\"image/svg+xml\" href='data:image/svg+xml,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -5 10 10\"><circle r=\"5\" fill=\"lightblue\"></circle></svg>'>\n\n`"
      },
      "date": 1660451479537
    },
    {
      "type": "edit",
      "id": "d76639d9c8430df0",
      "item": {
        "type": "code",
        "id": "d76639d9c8430df0",
        "text": "/* (hiding this html inside a javascript comment)\n\n<link rel=\"icon\" type=\"image/svg+xml\" href='data:image/svg+xml,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -5 10 10\"><circle r=\"5\" fill=\"lightblue\"></circle></svg>'>\n\n*/"
      },
      "date": 1660451535358
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "https://wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 200\nRefresh this frame to generate more random icons.\n\nClick to copy a <link> tag to the clipboard.\n"
      },
      "date": 1660941703525
    },
    {
      "type": "add",
      "id": "8e7bd99a3534f456",
      "item": {
        "type": "paragraph",
        "id": "8e7bd99a3534f456",
        "text": "Note: clipboard is only available in https."
      },
      "after": "d6ffd3c0deff8af5",
      "date": 1660941792259
    },
    {
      "type": "edit",
      "id": "8e7bd99a3534f456",
      "item": {
        "type": "paragraph",
        "id": "8e7bd99a3534f456",
        "text": "Note: clipboard is only available in https. Therefore we have explicitly specified an HTTPS url for the frame above."
      },
      "date": 1661617197729
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  const check = document.createElement('textarea')\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  check.setAttribute(\n    'style', 'width: 100%; height: 4rem;')\n  check.setAttribute('id', 'check')\n  el.appendChild(icons)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  el.onclick = copyToClipboard\n}\n"
      },
      "date": 1661617534416
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  const check = document.createElement('textarea')\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  check.setAttribute(\n    'style', 'width: 100%; height: 4rem; box-sizing: border-box;')\n  check.setAttribute('id', 'check')\n  el.appendChild(icons)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  el.onclick = copyToClipboard\n}\n"
      },
      "date": 1661617719215
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  const check = document.createElement('textarea')\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  Object.assign(check.style, {\n  })\n  check.style.width = \"100%\";\n  check.style.\n    'style', 'width: 100%; height: 4rem; box-sizing: border-box;')\n  check.setAttribute('id', 'check')\n  el.appendChild(icons)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  el.onclick = copyToClipboard\n}\n"
      },
      "date": 1661617843691
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  const check = document.createElement('textarea')\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  Object.assign(check.style, {\n    width: \"100%\",\n    height: \"4rem\",\n    boxSizing: \"border-box\"\n  })\n  check.setAttribute('id', 'check')\n  el.appendChild(icons)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  el.onclick = copyToClipboard\n}\n"
      },
      "date": 1661617886529
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n\n  const check = document.createElement('textarea')\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  Object.assign(check.style, {\n    width: \"100%\",\n    height: \"4rem\",\n    boxSizing: \"border-box\"\n  })\n  check.setAttribute('id', 'check')\n  el.appendChild(icons)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  el.onclick = copyToClipboard\n}\n"
      },
      "date": 1661617982818
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  const check = document.createElement('textarea')\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  Object.assign(check.style, {\n    width: \"100%\",\n    height: \"4rem\",\n    boxSizing: \"border-box\"\n  })\n  check.setAttribute('id', 'check')\n  el.appendChild(icons)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n}\n"
      },
      "date": 1661618028910
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  const check = document.createElement('textarea')\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  Object.assign(check.style, {\n    width: \"100%\",\n    height: \"4rem\",\n    display: \"block\"\n    boxSizing: \"border-box\",\n  })\n  check.setAttribute('id', 'check')\n  el.appendChild(icons)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n}\n"
      },
      "date": 1661618170205
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  icons.style.display = 'block'\n  const check = document.createElement('textarea')\n  Object.assign(check.style, {\n    width: '100%',\n    height: '4rem',\n    display: 'block',\n    boxSizing: 'border-box',\n  })\n  check.setAttribute('id', 'check')\n  const refresh = document.createElement('button')\n  refresh.setAttribute('id', 'refresh')\n  refresh.innerText = 'Generate New Icons'\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  el.appendChild(icons)\n  el.appendChild(refresh)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n  window.refresh.onclick = () => location.reload()\n  window.parent.postMessage({\n    action: resize(),\n    details: {height: document.body.innerHeight}\n  }, '*')\n}\n"
      },
      "date": 1661618477421
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  icons.style.display = 'block'\n  const check = document.createElement('textarea')\n  Object.assign(check.style, {\n    width: '100%',\n    height: '4rem',\n    display: 'block',\n    boxSizing: 'border-box',\n  })\n  check.setAttribute('id', 'check')\n  const refresh = document.createElement('button')\n  refresh.setAttribute('id', 'refresh')\n  refresh.innerText = 'Generate New Icons'\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  el.appendChild(icons)\n  el.appendChild(refresh)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n  window.refresh.onclick = () => location.reload()\n  window.parent.postMessage({\n    action: 'resize',\n    details: {height: document.body.innerHeight}\n  }, '*')\n}\n"
      },
      "date": 1661618506928
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  icons.style.display = 'block'\n  const check = document.createElement('textarea')\n  Object.assign(check.style, {\n    width: '100%',\n    height: '4rem',\n    display: 'block',\n    boxSizing: 'border-box',\n  })\n  check.setAttribute('id', 'check')\n  const refresh = document.createElement('button')\n  refresh.setAttribute('id', 'refresh')\n  refresh.innerText = 'Generate New Icons'\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  el.appendChild(icons)\n  el.appendChild(refresh)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n  window.refresh.onclick = () => location.reload()\n  window.parent.postMessage({\n    action: 'resize',\n    details: {height: document.body.offsetHeight}\n  }, '*')\n}\n"
      },
      "date": 1661618582319
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  icons.style.display = 'block'\n  const check = document.createElement('textarea')\n  Object.assign(check.style, {\n    width: '100%',\n    height: '4rem',\n    display: 'block',\n    boxSizing: 'border-box',\n  })\n  check.setAttribute('id', 'check')\n  const refresh = document.createElement('button')\n  refresh.setAttribute('id', 'refresh')\n  refresh.innerText = 'Generate New Icons'\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  el.appendChild(icons)\n  el.appendChild(refresh)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n  window.refresh.onclick = () => location.reload()\n}\n"
      },
      "date": 1661618651684
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "https://wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 300\nRefresh this frame to generate more random icons.\n\nClick to copy a <link> tag to the clipboard.\n"
      },
      "date": 1661618658834
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "https://wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 310\nRefresh this frame to generate more random icons.\n\nClick to copy a <link> tag to the clipboard.\n"
      },
      "date": 1661618664878
    },
    {
      "type": "edit",
      "id": "749a669cf00a9040",
      "item": {
        "type": "code",
        "id": "749a669cf00a9040",
        "text": "function copyToClipboard(event) {\n  const {target} = event\n  event.preventDefault()\n  if (target.tagName == \"CANVAS\") {\n    navigator.clipboard.writeText(\n    `<link rel=\"icon\" type=\"image/png\" href=\"${target.toDataURL(\"image/png\")}\">`)\n    window.check.innerText = `copied to clipboard.\nyou can paste into this text area to double-check.`\n  }\n}\n"
      },
      "date": 1661618808823
    },
    {
      "type": "edit",
      "id": "749a669cf00a9040",
      "item": {
        "type": "code",
        "id": "749a669cf00a9040",
        "text": "function copyToClipboard(event) {\n  const {target} = event\n  event.preventDefault()\n  if (target.tagName == \"CANVAS\") {\n    navigator.clipboard.writeText(\n    `<link rel=\"icon\" type=\"image/png\" href=\"${target.toDataURL(\"image/png\")}\">`)\n    window.check.innerText = `copied to clipboard.\\n\nyou can paste into this text area to double-check.`\n  }\n}\n"
      },
      "date": 1661618859422
    },
    {
      "type": "edit",
      "id": "749a669cf00a9040",
      "item": {
        "type": "code",
        "id": "749a669cf00a9040",
        "text": "function copyToClipboard(event) {\n  const {target} = event\n  event.preventDefault()\n  if (target.tagName == \"CANVAS\") {\n    navigator.clipboard.writeText(\n    `<link rel=\"icon\" type=\"image/png\" href=\"${target.toDataURL(\"image/png\")}\">`)\n    window.check.value = `copied to clipboard.\\n\nyou can paste into this text area to double-check.`\n  }\n}\n"
      },
      "date": 1661618972282
    },
    {
      "type": "edit",
      "id": "749a669cf00a9040",
      "item": {
        "type": "code",
        "id": "749a669cf00a9040",
        "text": "function copyToClipboard(event) {\n  const {target} = event\n  event.preventDefault()\n  if (target.tagName == \"CANVAS\") {\n    navigator.clipboard.writeText(\n    `<link rel=\"icon\" type=\"image/png\" href=\"${target.toDataURL(\"image/png\")}\">`)\n    window.check.value = `Copied to clipboard.\nYou can paste into this text area to double-check.`\n  }\n}\n"
      },
      "date": 1661619016916
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  icons.style.display = 'block'\n  const check = document.createElement('textarea')\n  Object.assign(check.style, {\n    display: 'block',\n    boxSizing: 'border-box',\n    width: '100%',\n    height: '4rem',\n    margin: '5px'\n  })\n  check.setAttribute('id', 'check')\n  const refresh = document.createElement('button')\n  refresh.setAttribute('id', 'refresh')\n  refresh.innerText = 'Generate New Icons'\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  el.appendChild(icons)\n  el.appendChild(refresh)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n  window.refresh.onclick = () => location.reload()\n}\n"
      },
      "date": 1661619056541
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n  const icons = document.createElement('p')\n  icons.setAttribute('id', 'icons')\n  icons.style.display = 'block'\n  const check = document.createElement('textarea')\n  Object.assign(check.style, {\n    display: 'block',\n    boxSizing: 'border-box',\n    width: '100%',\n    height: '4rem',\n    margin: '5px 0'\n  })\n  check.setAttribute('id', 'check')\n  const refresh = document.createElement('button')\n  refresh.setAttribute('id', 'refresh')\n  refresh.innerText = 'Generate New Icons'\n  for (let i=0; i<18; i++) {\n    icons.appendChild(randomFavicon())\n  }\n  el.appendChild(icons)\n  el.appendChild(refresh)\n  el.appendChild(check)\n}\n\nexport async function bind(el) {\n  window.icons.onclick = copyToClipboard\n  window.refresh.onclick = () => location.reload()\n}\n"
      },
      "date": 1661619074123
    },
    {
      "type": "edit",
      "id": "749a669cf00a9040",
      "item": {
        "type": "code",
        "id": "749a669cf00a9040",
        "text": "function copyToClipboard(event) {\n  const {target} = event\n  event.preventDefault()\n  if (target.tagName == \"CANVAS\") {\n    const html = `<link rel=\"icon\" type=\"image/png\" href=\"${target.toDataURL(\"image/png\")}\">`\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(html)\n      window.check.value = `Copied to clipboard.\nYou can paste into this text area to double-check.`\n    } else {\n      window.check.value = `\n<!-- can only copy to clipboard when using https -->\n${html}`\n    }\n  }\n}\n"
      },
      "date": 1669216411921
    },
    {
      "type": "edit",
      "id": "749a669cf00a9040",
      "item": {
        "type": "code",
        "id": "749a669cf00a9040",
        "text": "function copyToClipboard(event) {\n  const {target} = event\n  event.preventDefault()\n  if (target.tagName == \"CANVAS\") {\n    const html = `<link rel=\"icon\" type=\"image/png\" href=\"${target.toDataURL(\"image/png\")}\">`\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(html)\n      window.check.value = `Copied to clipboard.\nYou can paste into this text area to double-check.`\n    } else {\n      window.check.value = `<!--\nClipboard is not available in http.\nYou'll have to copy the old fashioned way.\n-->\n${html}`\n    }\n  }\n}\n"
      },
      "date": 1669216568153
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co"
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 310\nRefresh this frame to generate more random icons.\n\nClick to copy a <link> tag to the clipboard.\n"
      },
      "date": 1669218934209
    }
  ]
}