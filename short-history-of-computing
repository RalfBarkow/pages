{
  "title": "Short History of Computing",
  "story": [
    {
      "type": "paragraph",
      "id": "b06762d55b0f3ee9",
      "text": "Are some graphs better than others. Probably not. Especially because one graph can represent any other. This is a tradition in computing. "
    },
    {
      "type": "markdown",
      "id": "6a5fc006054e3938",
      "text": "# Graphs"
    },
    {
      "type": "paragraph",
      "id": "a8223b87a400cc9f",
      "text": "Ada Lovelace is sometimes called the first programmer because she recognized she could give words (and bit patterns) any meaning."
    },
    {
      "type": "paragraph",
      "id": "01179b51e39cbc8a",
      "text": "When we say there are nodes and relations we've asserted a structure."
    },
    {
      "type": "paragraph",
      "id": "6b093a65ff7c3325",
      "text": "When we attach words to the nodes and relations it becomes arbitrarily general."
    },
    {
      "type": "paragraph",
      "id": "38536017f848e5f5",
      "text": "Structure is more about navigation than meaning."
    },
    {
      "type": "paragraph",
      "id": "ac533410c325cd6d",
      "text": "A graphic designer can suggest structure (and enable navigation) by proximity and alignment."
    },
    {
      "type": "paragraph",
      "id": "41ba71266df88932",
      "text": "In the computer we use punctuation. That is, we reserve some bit patterns to mean something other than words."
    },
    {
      "type": "markdown",
      "id": "19de047b8adb4a93",
      "text": "# Representation"
    },
    {
      "type": "paragraph",
      "id": "3868d3777cd30500",
      "text": "In compilers one often distinguishes syntax from semantics. Structure vs meaning is a similar distinction. "
    },
    {
      "type": "paragraph",
      "id": "8d3074e618d2cc34",
      "text": "What computers can and can't do falls into automata theory. [https://en.wikipedia.org/wiki/Automata_theory. wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "75ac6e7467bddeb0",
      "text": "Better than this is the foundational insight due to Lovelace. [https://en.wikipedia.org/wiki/Ada_Lovelace#First_computer_program wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "a9f4f56f80641b1f",
      "text": "There are many levels of abstraction in the computer I am using. Let me see if I can name a few."
    },
    {
      "type": "paragraph",
      "id": "a20bddeb35615495",
      "text": "My wall plug provides the power required to establish regions of more or less charge. This charge lingers making it a memory."
    },
    {
      "type": "paragraph",
      "id": "92387cb6f40fb14b",
      "text": "The charge in one spot can vary the resistance in another spot. From this we can assemble decision making networks."
    },
    {
      "type": "paragraph",
      "id": "47abbb8692b23f81",
      "text": "If we interpret lots of charge as logic true and less charge as false, the decisions resemble logic gates like and and or gates."
    },
    {
      "type": "paragraph",
      "id": "e71a83e28518936e",
      "text": "If we interpret true as 1 and false as 0 and arrange our regions of charge by powers of two we can represent numbers."
    },
    {
      "type": "paragraph",
      "id": "872c62e270a1a31f",
      "text": "If we amass a lot of logic storage and then hook that up to retrieval logic then we can build random access memory."
    },
    {
      "type": "paragraph",
      "id": "11fc6c38b8d08b4f",
      "text": "if we amass a lot of logic gates we can perform arithmetic and logic operations we can build an arithmetic logic unit."
    },
    {
      "type": "paragraph",
      "id": "675c00b338e76428",
      "text": "If we interpret some numbers as instructions and feed them into decoding logic to control the arithmetic logic unit then we will have a stored program digital computer."
    },
    {
      "type": "paragraph",
      "id": "5cd59bf6cf30b7ee",
      "text": "We might say we are using the Von Neumann architecture because he was an early advocate for this structure."
    },
    {
      "type": "markdown",
      "id": "4203b02cd6a4f3f8",
      "text": "# Computers"
    },
    {
      "type": "paragraph",
      "id": "2a213f929515af01",
      "text": "There has been a lot of packaging innovation since Von Neumann but the basic architecture is largely unchanged."
    },
    {
      "type": "paragraph",
      "id": "dc5205d5710f33e2",
      "text": "I have a friend who built a computer out of relays that he bought from Radio Shack. He share his instruction decoding with me so I built a simulator in perl.\n[http://code.fed.wiki.org/view/harry-porters-relay-computer post]"
    },
    {
      "type": "paragraph",
      "id": "abee87b006cf0dcf",
      "text": "I've now covered 100 years of computing from Lovelace to Von Neumann."
    },
    {
      "type": "paragraph",
      "id": "eae6ab83a2f5e387",
      "text": "The Apollo moon landing need a small, light and powerful computer."
    },
    {
      "type": "paragraph",
      "id": "f89e71e1f684890b",
      "text": "Charles Draper had designed the guidance computer for the Polaris missile but a moon landing was a much bigger project. "
    },
    {
      "type": "paragraph",
      "id": "434de95d6b61631c",
      "text": "Draper's team sought out the manufacture of integrated circuits, multiple gages on a single silicon substrate. This made the Apollo Guidance Computer possible."
    },
    {
      "type": "paragraph",
      "id": "4f4df7307c2d5dbb",
      "text": "Draper's team also invented a mathematical language suitable for guidance computations and wrote a simulator for it to run on the AGC."
    },
    {
      "type": "markdown",
      "id": "9362dac62ea67157",
      "text": "# Industry"
    },
    {
      "type": "paragraph",
      "id": "1c0b23efa11f3657",
      "text": "It's just starting to get interesting. "
    },
    {
      "type": "paragraph",
      "id": "1e429080be0de80b",
      "text": "Intel put all the parts on one substrate, the 4004. Then the 6800. Then the 6502 that Woz turned into the Apple I."
    },
    {
      "type": "paragraph",
      "id": "eb4c59dbf3a2bab0",
      "text": "Basic and Visicalc made this class of machines useful. Themselves written as interpreters on top of interpreters."
    },
    {
      "type": "paragraph",
      "id": "8d21f77703a079df",
      "text": "Displays have had their own history. CRTs, Light Pens, Liquid Crystals, GPUs, touch pads, all programmed with multiple levels of interpretation."
    },
    {
      "type": "paragraph",
      "id": "4a177fab1ccefe19",
      "text": "Signaling over a distance has had an awesome history too from Morse, to Armstrong, to packet switching, flow control, backbones, and NICs."
    },
    {
      "type": "paragraph",
      "id": "e50bb60c03a875a0",
      "text": "All this is what makes the super collaborator super. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Short History of Computing",
        "story": []
      },
      "date": 1668217368870
    },
    {
      "item": {
        "type": "factory",
        "id": "a8223b87a400cc9f"
      },
      "id": "a8223b87a400cc9f",
      "type": "add",
      "date": 1668217453731
    },
    {
      "type": "edit",
      "id": "a8223b87a400cc9f",
      "item": {
        "type": "paragraph",
        "id": "a8223b87a400cc9f",
        "text": "Ada Lovelace is sometimes called the first programmer because she recognized she could give words (and bit patterns) any meaning."
      },
      "date": 1668217466137
    },
    {
      "type": "add",
      "id": "01179b51e39cbc8a",
      "item": {
        "type": "paragraph",
        "id": "01179b51e39cbc8a",
        "text": "When we say there are nodes and relations we've asserted a structure."
      },
      "after": "a8223b87a400cc9f",
      "date": 1668217476520
    },
    {
      "type": "add",
      "id": "6b093a65ff7c3325",
      "item": {
        "type": "paragraph",
        "id": "6b093a65ff7c3325",
        "text": "When we attach words to the nodes and relations it becomes arbitrarily general."
      },
      "after": "01179b51e39cbc8a",
      "date": 1668217482404
    },
    {
      "type": "add",
      "id": "38536017f848e5f5",
      "item": {
        "type": "paragraph",
        "id": "38536017f848e5f5",
        "text": "Structure is more about navigation than meaning."
      },
      "after": "6b093a65ff7c3325",
      "date": 1668217487174
    },
    {
      "type": "add",
      "id": "ac533410c325cd6d",
      "item": {
        "type": "paragraph",
        "id": "ac533410c325cd6d",
        "text": "A graphic designer can suggest structure (and enable navigation) by proximity and alignment."
      },
      "after": "38536017f848e5f5",
      "date": 1668217491258
    },
    {
      "type": "add",
      "id": "41ba71266df88932",
      "item": {
        "type": "paragraph",
        "id": "41ba71266df88932",
        "text": "In the computer we use punctuation. That is, we reserve some bit patterns to mean something other than words."
      },
      "after": "ac533410c325cd6d",
      "date": 1668217492850
    },
    {
      "item": {
        "type": "factory",
        "id": "6a5fc006054e3938"
      },
      "id": "6a5fc006054e3938",
      "type": "add",
      "after": "41ba71266df88932",
      "date": 1668217518694
    },
    {
      "type": "edit",
      "id": "6a5fc006054e3938",
      "item": {
        "type": "markdown",
        "id": "6a5fc006054e3938",
        "text": "# Graphs"
      },
      "date": 1668217532246
    },
    {
      "id": "6a5fc006054e3938",
      "type": "move",
      "order": [
        "6a5fc006054e3938",
        "a8223b87a400cc9f",
        "01179b51e39cbc8a",
        "6b093a65ff7c3325",
        "38536017f848e5f5",
        "ac533410c325cd6d",
        "41ba71266df88932"
      ],
      "date": 1668217535951
    },
    {
      "type": "add",
      "id": "b06762d55b0f3ee9",
      "item": {
        "type": "paragraph",
        "id": "b06762d55b0f3ee9",
        "text": "Are some graphs better than others. Probably not. Especially because one graph can represent any other. This is a tradition in computing. "
      },
      "after": "a8223b87a400cc9f",
      "date": 1668217645778
    },
    {
      "id": "b06762d55b0f3ee9",
      "type": "move",
      "order": [
        "b06762d55b0f3ee9",
        "6a5fc006054e3938",
        "a8223b87a400cc9f",
        "01179b51e39cbc8a",
        "6b093a65ff7c3325",
        "38536017f848e5f5",
        "ac533410c325cd6d",
        "41ba71266df88932"
      ],
      "date": 1668217648857
    },
    {
      "item": {
        "type": "factory",
        "id": "19de047b8adb4a93"
      },
      "id": "19de047b8adb4a93",
      "type": "add",
      "after": "41ba71266df88932",
      "date": 1668217667110
    },
    {
      "type": "edit",
      "id": "19de047b8adb4a93",
      "item": {
        "type": "markdown",
        "id": "19de047b8adb4a93",
        "text": "# Representation"
      },
      "date": 1668217686996
    },
    {
      "item": {
        "type": "factory",
        "id": "3868d3777cd30500"
      },
      "id": "3868d3777cd30500",
      "type": "add",
      "after": "19de047b8adb4a93",
      "date": 1668217728882
    },
    {
      "type": "edit",
      "id": "3868d3777cd30500",
      "item": {
        "type": "paragraph",
        "id": "3868d3777cd30500",
        "text": "In compilers one often distinguishes syntax from semantics. Structure vs meaning is a similar distinction. "
      },
      "date": 1668217735491
    },
    {
      "type": "add",
      "id": "8d3074e618d2cc34",
      "item": {
        "type": "paragraph",
        "id": "8d3074e618d2cc34",
        "text": "What computers can and can't do falls into automata theory. [https://en.wikipedia.org/wiki/Automata_theory. wikipedia]"
      },
      "after": "3868d3777cd30500",
      "date": 1668217749591
    },
    {
      "type": "add",
      "id": "75ac6e7467bddeb0",
      "item": {
        "type": "paragraph",
        "id": "75ac6e7467bddeb0",
        "text": "Better than this is the foundational insight due to Lovelace. [https://en.wikipedia.org/wiki/Ada_Lovelace#First_computer_program wikipedia]"
      },
      "after": "8d3074e618d2cc34",
      "date": 1668217760793
    },
    {
      "type": "add",
      "id": "a9f4f56f80641b1f",
      "item": {
        "type": "paragraph",
        "id": "a9f4f56f80641b1f",
        "text": "There are many levels of abstraction in the computer I am using. Let me see if I can name a few."
      },
      "after": "75ac6e7467bddeb0",
      "date": 1668217850544
    },
    {
      "type": "add",
      "id": "a20bddeb35615495",
      "item": {
        "type": "paragraph",
        "id": "a20bddeb35615495",
        "text": "My wall plug provides the power required to establish regions of more or less charge. This charge lingers making it a memory."
      },
      "after": "a9f4f56f80641b1f",
      "date": 1668217861623
    },
    {
      "type": "add",
      "id": "92387cb6f40fb14b",
      "item": {
        "type": "paragraph",
        "id": "92387cb6f40fb14b",
        "text": "The charge in one spot can vary the resistance in another spot. From this we can assemble decision making networks."
      },
      "after": "a20bddeb35615495",
      "date": 1668217866088
    },
    {
      "type": "add",
      "id": "47abbb8692b23f81",
      "item": {
        "type": "paragraph",
        "id": "47abbb8692b23f81",
        "text": "If we interpret lots of charge as logic true and less charge as false, the decisions resemble logic gates like and and or gates."
      },
      "after": "92387cb6f40fb14b",
      "date": 1668217885390
    },
    {
      "type": "add",
      "id": "e71a83e28518936e",
      "item": {
        "type": "paragraph",
        "id": "e71a83e28518936e",
        "text": "If we interpret true as 1 and false as 0 and arrange our regions of charge by powers of two we can represent numbers."
      },
      "after": "47abbb8692b23f81",
      "date": 1668217890099
    },
    {
      "type": "add",
      "id": "872c62e270a1a31f",
      "item": {
        "type": "paragraph",
        "id": "872c62e270a1a31f",
        "text": "If we amass a lot of logic storage and then hook that up to retrieval logic then we can build random access memory."
      },
      "after": "e71a83e28518936e",
      "date": 1668217899762
    },
    {
      "type": "add",
      "id": "11fc6c38b8d08b4f",
      "item": {
        "type": "paragraph",
        "id": "11fc6c38b8d08b4f",
        "text": "if we amass a lot of logic gates we can perform arithmetic and logic operations we can build an arithmetic logic unit."
      },
      "after": "872c62e270a1a31f",
      "date": 1668217906001
    },
    {
      "type": "add",
      "id": "675c00b338e76428",
      "item": {
        "type": "paragraph",
        "id": "675c00b338e76428",
        "text": "If we interpret some numbers as instructions and feed them into decoding logic to control the arithmetic logic unit then we will have a stored program digital computer."
      },
      "after": "11fc6c38b8d08b4f",
      "date": 1668217922052
    },
    {
      "type": "add",
      "id": "5cd59bf6cf30b7ee",
      "item": {
        "type": "paragraph",
        "id": "5cd59bf6cf30b7ee",
        "text": "We might say we are using the Von Neumann architecture because he was an early advocate for this structure."
      },
      "after": "675c00b338e76428",
      "date": 1668217927234
    },
    {
      "type": "add",
      "id": "4203b02cd6a4f3f8",
      "item": {
        "type": "paragraph",
        "id": "4203b02cd6a4f3f8",
        "text": "# Computers"
      },
      "after": "5cd59bf6cf30b7ee",
      "date": 1668217952634
    },
    {
      "type": "add",
      "id": "2a213f929515af01",
      "item": {
        "type": "paragraph",
        "id": "2a213f929515af01",
        "text": "There has been a lot of packaging innovation since Von Neumann but the basic architecture is largely unchanged."
      },
      "after": "4203b02cd6a4f3f8",
      "date": 1668217956819
    },
    {
      "type": "add",
      "id": "dc5205d5710f33e2",
      "item": {
        "type": "paragraph",
        "id": "dc5205d5710f33e2",
        "text": "I have a friend who built a computer out of relays that he bought from Radio Shack. He share his instruction decoding with me so I built a simulator in perl.\n[http://code.fed.wiki.org/view/harry-porters-relay-computer post]"
      },
      "after": "2a213f929515af01",
      "date": 1668217979294
    },
    {
      "type": "add",
      "id": "abee87b006cf0dcf",
      "item": {
        "type": "paragraph",
        "id": "abee87b006cf0dcf",
        "text": "I've now covered 100 years of computing from Lovelace to Von Neumann."
      },
      "after": "dc5205d5710f33e2",
      "date": 1668217984107
    },
    {
      "type": "add",
      "id": "eae6ab83a2f5e387",
      "item": {
        "type": "paragraph",
        "id": "eae6ab83a2f5e387",
        "text": "The Apollo moon landing need a small, light and powerful computer."
      },
      "after": "abee87b006cf0dcf",
      "date": 1668218038667
    },
    {
      "type": "add",
      "id": "f89e71e1f684890b",
      "item": {
        "type": "paragraph",
        "id": "f89e71e1f684890b",
        "text": "Charles Draper had designed the guidance computer for the Polaris missile but a moon landing was a much bigger project. "
      },
      "after": "eae6ab83a2f5e387",
      "date": 1668218042509
    },
    {
      "type": "add",
      "id": "434de95d6b61631c",
      "item": {
        "type": "paragraph",
        "id": "434de95d6b61631c",
        "text": "Draper's team sought out the manufacture of integrated circuits, multiple gages on a single silicon substrate. This made the Apollo Guidance Computer possible."
      },
      "after": "f89e71e1f684890b",
      "date": 1668218050762
    },
    {
      "type": "add",
      "id": "4f4df7307c2d5dbb",
      "item": {
        "type": "paragraph",
        "id": "4f4df7307c2d5dbb",
        "text": "Draper's team also invented a mathematical language suitable for guidance computations and wrote a simulator for it to run on the AGC."
      },
      "after": "434de95d6b61631c",
      "date": 1668218054389
    },
    {
      "type": "edit",
      "id": "4203b02cd6a4f3f8",
      "item": {
        "type": "markdown",
        "id": "4203b02cd6a4f3f8",
        "text": "# Computers"
      },
      "date": 1668218059000
    },
    {
      "type": "add",
      "id": "9362dac62ea67157",
      "item": {
        "type": "paragraph",
        "id": "9362dac62ea67157",
        "text": "# Industry"
      },
      "after": "4f4df7307c2d5dbb",
      "date": 1668218138306
    },
    {
      "type": "add",
      "id": "1c0b23efa11f3657",
      "item": {
        "type": "paragraph",
        "id": "1c0b23efa11f3657",
        "text": "It's just starting to get interesting. "
      },
      "after": "9362dac62ea67157",
      "date": 1668218146227
    },
    {
      "type": "add",
      "id": "1e429080be0de80b",
      "item": {
        "type": "paragraph",
        "id": "1e429080be0de80b",
        "text": "Intel put all the parts on one substrate, the 4004. Then the 6800. Then the 6502 that Woz turned into the Apple I."
      },
      "after": "1c0b23efa11f3657",
      "date": 1668218154558
    },
    {
      "type": "add",
      "id": "eb4c59dbf3a2bab0",
      "item": {
        "type": "paragraph",
        "id": "eb4c59dbf3a2bab0",
        "text": "Basic and Visicalc made this class of machines useful. Themselves written as interpreters on top of interpreters."
      },
      "after": "1e429080be0de80b",
      "date": 1668218157993
    },
    {
      "type": "add",
      "id": "8d21f77703a079df",
      "item": {
        "type": "paragraph",
        "id": "8d21f77703a079df",
        "text": "Displays have had their own history. CRTs, Light Pens, Liquid Crystals, GPUs, touch pads, all programmed with multiple levels of interpretation."
      },
      "after": "eb4c59dbf3a2bab0",
      "date": 1668218166493
    },
    {
      "type": "add",
      "id": "4a177fab1ccefe19",
      "item": {
        "type": "paragraph",
        "id": "4a177fab1ccefe19",
        "text": "Signaling over a distance has had an awesome history too from Morse, to Armstrong, to packet switching, flow control, backbones, and NICs."
      },
      "after": "8d21f77703a079df",
      "date": 1668218172742
    },
    {
      "type": "add",
      "id": "e50bb60c03a875a0",
      "item": {
        "type": "paragraph",
        "id": "e50bb60c03a875a0",
        "text": "All this is what makes the [[Hypertext Super Collaborator]] super. "
      },
      "after": "4a177fab1ccefe19",
      "date": 1668218187522
    },
    {
      "type": "edit",
      "id": "9362dac62ea67157",
      "item": {
        "type": "markdown",
        "id": "9362dac62ea67157",
        "text": "# Industry"
      },
      "date": 1668218190833
    },
    {
      "type": "edit",
      "id": "e50bb60c03a875a0",
      "item": {
        "type": "paragraph",
        "id": "e50bb60c03a875a0",
        "text": "All this is what makes the super collaborator super. "
      },
      "date": 1668218213894
    },
    {
      "type": "fork",
      "site": "ward.dojo.fed.wiki",
      "date": 1668899571611
    }
  ]
}