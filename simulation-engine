{
  "title": "Simulation Engine",
  "story": [
    {
      "type": "paragraph",
      "id": "762fc84a2a43d40e",
      "text": "The simulator maintains an ordered queue of predicted events related to activities prescribed by the model and those recording the model's behavior."
    },
    {
      "type": "paragraph",
      "id": "86acc04aab358729",
      "text": "Pascal favored linked lists and trees as dynamic storage. There have been many fixed sized arrays where dynamics was not required."
    },
    {
      "type": "paragraph",
      "id": "5c18ad0b872e7540",
      "text": "The Java implementation created objects were Pascal code used the almost object oriented WITH clauses. Where nested WITH clauses we had to choose one object to \"own\" that would more logically be shared."
    },
    {
      "type": "paragraph",
      "id": "650ec285b9bc2ed4",
      "text": "The Java implementation had dynamic object inherit from the static Simulator so that global state would be conveniently accessed."
    },
    {
      "type": "paragraph",
      "id": "fd1a969a48df8e7a",
      "text": "We will slowly replace static and linked structures with familiar javascript objects. We expect persistent bugs where index origin alternates between 1 and 0. Yuck."
    },
    {
      "type": "markdown",
      "id": "fc233c781430348d",
      "text": "# Objects"
    },
    {
      "type": "paragraph",
      "id": "265c4dd5f19ff7a4",
      "text": "A Station collects the storage and logic that would be replicated for each repeater station."
    },
    {
      "type": "paragraph",
      "id": "afd1be700c1f3d1b",
      "text": "See [[Station Identifiers]]"
    },
    {
      "type": "paragraph",
      "id": "e4f60f7a4b07be10",
      "text": "A Message travels between Stations that hold them until they have channel capacity to pass it along the next hop."
    },
    {
      "type": "paragraph",
      "id": "60ab6f53a8003d4d",
      "text": "Graph and Scatter objects held x vs y and y vs t data to be printed at end of run."
    },
    {
      "type": "paragraph",
      "id": "568c6bcd5c6f537c",
      "text": "EventBlocks held future events to be dispatched when their time has come. "
    },
    {
      "type": "markdown",
      "id": "9960d2ea35c9a1b8",
      "text": "# Queues"
    },
    {
      "type": "paragraph",
      "id": "8325088e1b6e9b02",
      "text": "Each Station has a messageQueue that holds Messages waiting to be sent. The Simulator has an eventQueue that holds events waiting to be processes. In both cases a javascript array replaces linked lists and priority trees. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Simulation Engine",
        "story": []
      },
      "date": 1594044197057
    },
    {
      "item": {
        "type": "factory",
        "id": "762fc84a2a43d40e"
      },
      "id": "762fc84a2a43d40e",
      "type": "add",
      "date": 1594044225176
    },
    {
      "type": "edit",
      "id": "762fc84a2a43d40e",
      "item": {
        "type": "paragraph",
        "id": "762fc84a2a43d40e",
        "text": "The simulator maintains an ordered queue of predicted events related to activities prescribed by the model and those recording the model's behavior."
      },
      "date": 1594044377365
    },
    {
      "item": {
        "type": "factory",
        "id": "86acc04aab358729"
      },
      "id": "86acc04aab358729",
      "type": "add",
      "after": "762fc84a2a43d40e",
      "date": 1594086155768
    },
    {
      "type": "edit",
      "id": "86acc04aab358729",
      "item": {
        "type": "paragraph",
        "id": "86acc04aab358729",
        "text": "Pascal favored linked lists and trees as dynamic storage. There have been many fixed sized arrays where dynamics was not required."
      },
      "date": 1594086392955
    },
    {
      "type": "add",
      "id": "5c18ad0b872e7540",
      "item": {
        "type": "paragraph",
        "id": "5c18ad0b872e7540",
        "text": "The Java implementation created objects were Pascal code used the almost object oriented WITH clauses. Where nested WITH clauses we had to choose one object to \"own\" that would more logically be shared."
      },
      "after": "86acc04aab358729",
      "date": 1594086515593
    },
    {
      "type": "add",
      "id": "650ec285b9bc2ed4",
      "item": {
        "type": "paragraph",
        "id": "650ec285b9bc2ed4",
        "text": "The Java implementation had dynamic object inherit from the static Simulator so that global state would be conveniently accessed. "
      },
      "after": "5c18ad0b872e7540",
      "date": 1594086585343
    },
    {
      "type": "edit",
      "id": "650ec285b9bc2ed4",
      "item": {
        "type": "paragraph",
        "id": "650ec285b9bc2ed4",
        "text": "The Java implementation had dynamic object inherit from the static Simulator so that global state would be conveniently accessed."
      },
      "date": 1594086645145
    },
    {
      "type": "add",
      "id": "fd1a969a48df8e7a",
      "item": {
        "type": "paragraph",
        "id": "fd1a969a48df8e7a",
        "text": "We will slowly replace static and linked structures with familiar javascript objects. We expect persistent bugs where index origin alternates between 1 and 0. Yuck."
      },
      "after": "650ec285b9bc2ed4",
      "date": 1594086790689
    },
    {
      "type": "add",
      "id": "fc233c781430348d",
      "item": {
        "type": "paragraph",
        "id": "fc233c781430348d",
        "text": "# Objects"
      },
      "after": "fd1a969a48df8e7a",
      "date": 1594086804252
    },
    {
      "type": "add",
      "id": "265c4dd5f19ff7a4",
      "item": {
        "type": "paragraph",
        "id": "265c4dd5f19ff7a4",
        "text": "A Station collects the storage and logic that would be replicated for each repeater station."
      },
      "after": "fc233c781430348d",
      "date": 1594086847807
    },
    {
      "type": "add",
      "id": "e4f60f7a4b07be10",
      "item": {
        "type": "paragraph",
        "id": "e4f60f7a4b07be10",
        "text": "A Message travels between Stations that hold them until they have channel capacity to pass it along the next hop. "
      },
      "after": "265c4dd5f19ff7a4",
      "date": 1594086910081
    },
    {
      "type": "edit",
      "id": "fc233c781430348d",
      "item": {
        "type": "markdown",
        "id": "fc233c781430348d",
        "text": "# Objects"
      },
      "date": 1594086933837
    },
    {
      "type": "edit",
      "id": "e4f60f7a4b07be10",
      "item": {
        "type": "paragraph",
        "id": "e4f60f7a4b07be10",
        "text": "A Message travels between Stations that hold them until they have channel capacity to pass it along the next hop."
      },
      "date": 1594086937314
    },
    {
      "type": "add",
      "id": "8325088e1b6e9b02",
      "item": {
        "type": "paragraph",
        "id": "8325088e1b6e9b02",
        "text": "Each Station has a messageQueue that holds Messages waiting to be sent. "
      },
      "after": "e4f60f7a4b07be10",
      "date": 1594086969184
    },
    {
      "type": "edit",
      "id": "8325088e1b6e9b02",
      "item": {
        "type": "paragraph",
        "id": "8325088e1b6e9b02",
        "text": "Each Station has a messageQueue that holds Messages waiting to be sent. The Simulator has an eventQueue that holds events waiting to be processes. In both cases a javascript array replaces linked lists and priority trees. "
      },
      "date": 1594087096013
    },
    {
      "type": "add",
      "id": "60ab6f53a8003d4d",
      "item": {
        "type": "paragraph",
        "id": "60ab6f53a8003d4d",
        "text": "Graph and Scatter held x vs y and y vs t data to be printed at end of run."
      },
      "after": "e4f60f7a4b07be10",
      "date": 1594087182824
    },
    {
      "type": "edit",
      "id": "60ab6f53a8003d4d",
      "item": {
        "type": "paragraph",
        "id": "60ab6f53a8003d4d",
        "text": "Graph and Scatter objects held x vs y and y vs t data to be printed at end of run."
      },
      "date": 1594087198966
    },
    {
      "type": "add",
      "id": "9960d2ea35c9a1b8",
      "item": {
        "type": "paragraph",
        "id": "9960d2ea35c9a1b8",
        "text": "# Queues"
      },
      "after": "60ab6f53a8003d4d",
      "date": 1594087211493
    },
    {
      "type": "edit",
      "id": "9960d2ea35c9a1b8",
      "item": {
        "type": "markdown",
        "id": "9960d2ea35c9a1b8",
        "text": "# Queues"
      },
      "date": 1594087215239
    },
    {
      "type": "add",
      "id": "568c6bcd5c6f537c",
      "item": {
        "type": "paragraph",
        "id": "568c6bcd5c6f537c",
        "text": "EventBlocks held future events to be dispatched when their time has come. "
      },
      "after": "60ab6f53a8003d4d",
      "date": 1594087328640
    },
    {
      "type": "add",
      "id": "afd1be700c1f3d1b",
      "item": {
        "type": "paragraph",
        "id": "afd1be700c1f3d1b",
        "text": "See [[Station Identifiers]]"
      },
      "after": "265c4dd5f19ff7a4",
      "date": 1594499097378
    },
    {
      "type": "fork",
      "site": "simnet.ward.asia.wiki.org",
      "date": 1674208003043
    }
  ]
}