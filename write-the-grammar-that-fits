{
  "title": "Write the Grammar That Fits",
  "story": [
    {
      "type": "paragraph",
      "id": "9c5fd63c6ea59354",
      "text": "This is not the usual kind of computer science you might have learned in a compiler course, because it's the other way around: you have the text first, and then you write the grammar that fits the text, not the other way around."
    },
    {
      "type": "paragraph",
      "id": "61ca48cc7531ce73",
      "text": "For example, we write the grammar that fits the text in the form of the following [[Elm]] source [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code]."
    },
    {
      "type": "code",
      "id": "5a696e64cd863ed7",
      "text": "grammarString : String\ngrammarString =\n    \"\"\"\n    start <- <char+> {action}\n    char <- [a-z]    \n    \"\"\"\n\n"
    },
    {
      "type": "paragraph",
      "id": "f10afc1dece74e33",
      "text": "This is a string containing a [[PEG]] ([[Parsing Expression Grammar]]) rule. It defines a simple grammar with two rules: start and char."
    },
    {
      "type": "markdown",
      "id": "1950d64f355c2c70",
      "text": "`start` expects one or more lowercase letters (specified by `<char+>`) and applies an action `{action}`."
    },
    {
      "type": "markdown",
      "id": "a59a3ebd9da09809",
      "text": "`char` matches a single lowercase letter."
    },
    {
      "type": "pagefold",
      "id": "2af98993a31a4946",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "bb0c9198f8bc9532",
      "site": "code.fed.wiki.org",
      "slug": "exploratory-parsing",
      "title": "Exploratory Parsing",
      "text": "See AboutUs Getting Started blog post announcing the open-sourcing of this technology. [https://github.com/WardCunningham/devblog/blob/master/_posts/2011-07-03-getting-started-exploratory-parsing.markdown github]"
    },
    {
      "type": "reference",
      "id": "f91c0a33c0969971",
      "site": "wiki.ralfbarkow.ch",
      "slug": "define-a-peg-grammar",
      "title": "Define a PEG Grammar",
      "text": "To get started with Elm PEG Parser, you first need to define a PEG Grammar using the Grammar type."
    },
    {
      "type": "paragraph",
      "id": "da53e50b272b3183",
      "text": "[[PEGN]]: Parsing Expression Grammar Notation [https://pegn.dev/ site] by [[Robert S. Muhlestein]]"
    },
    {
      "type": "reference",
      "id": "84e2c519e08ff5b4",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parse-a-string-with-the-grammar",
      "title": "Parse a String with the Grammar",
      "text": "MainSpec.elm test case [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/tests/MainSpec.elm#L8-L22 code]"
    },
    {
      "type": "reference",
      "id": "ba61a727dc1fec47",
      "site": "wiki.ralfbarkow.ch",
      "slug": "parse-wiki-style-links",
      "title": "Parse Wiki-Style Links",
      "text": "and Render Them as Anchors [⇒ [[MiniLatex]]: a Parser-Renderer for … ⇐ [[Render Wiki Link]]]"
    },
    {
      "type": "reference",
      "id": "7982cc1ce4332a4d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "multicomment",
      "title": "multiComment",
      "text": "We intend to 'abuse' the multiComment parser [https://package.elm-lang.org/packages/elm/parser/latest/Parser#multiComment page] (Context: Whitespace) to [[Parse Wiki-Style Links]]."
    },
    {
      "type": "graphviz",
      "id": "ba67e723d3e0a5d6",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Write the Grammar That Fits",
        "story": []
      },
      "date": 1696413968503
    },
    {
      "item": {
        "type": "factory",
        "id": "2af98993a31a4946"
      },
      "id": "2af98993a31a4946",
      "type": "add",
      "date": 1696413975176
    },
    {
      "type": "edit",
      "id": "2af98993a31a4946",
      "item": {
        "type": "pagefold",
        "id": "2af98993a31a4946",
        "text": "~"
      },
      "date": 1696413977576
    },
    {
      "id": "bb0c9198f8bc9532",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "bb0c9198f8bc9532",
        "site": "code.fed.wiki.org",
        "slug": "exploratory-parsing",
        "title": "Exploratory Parsing",
        "text": "See AboutUs Getting Started blog post announcing the open-sourcing of this technology. [https://github.com/WardCunningham/devblog/blob/master/_posts/2011-07-03-getting-started-exploratory-parsing.markdown github]"
      },
      "after": "2af98993a31a4946",
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696413980826
    },
    {
      "id": "9c5fd63c6ea59354",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9c5fd63c6ea59354",
        "text": "This is not the usual kind of computer science you might have learned in a compiler course, because it's the other way around: you have the text first, and then you write the grammar that fits the text, not the other way around."
      },
      "attribution": {
        "page": "Exploratory Parsing"
      },
      "date": 1696413986378
    },
    {
      "item": {
        "type": "factory",
        "id": "5a696e64cd863ed7"
      },
      "id": "5a696e64cd863ed7",
      "type": "add",
      "after": "bb0c9198f8bc9532",
      "date": 1696414610057
    },
    {
      "id": "5a696e64cd863ed7",
      "type": "move",
      "order": [
        "9c5fd63c6ea59354",
        "5a696e64cd863ed7",
        "2af98993a31a4946",
        "bb0c9198f8bc9532"
      ],
      "date": 1696414612057
    },
    {
      "type": "edit",
      "id": "5a696e64cd863ed7",
      "item": {
        "type": "code",
        "id": "5a696e64cd863ed7",
        "text": "grammarString : String\ngrammarString =\n    \"\"\"\n    start <- <char+> {action}\n    char <- [a-z]    \n    \"\"\"\n\n"
      },
      "date": 1696414613559
    },
    {
      "item": {
        "type": "factory",
        "id": "f10afc1dece74e33"
      },
      "id": "f10afc1dece74e33",
      "type": "add",
      "after": "bb0c9198f8bc9532",
      "date": 1696414636088
    },
    {
      "id": "f10afc1dece74e33",
      "type": "move",
      "order": [
        "9c5fd63c6ea59354",
        "5a696e64cd863ed7",
        "f10afc1dece74e33",
        "2af98993a31a4946",
        "bb0c9198f8bc9532"
      ],
      "date": 1696414637938
    },
    {
      "type": "edit",
      "id": "f10afc1dece74e33",
      "item": {
        "type": "paragraph",
        "id": "f10afc1dece74e33",
        "text": "This is a string containing a PEG (Parsing Expression Grammar) rule. It defines a simple grammar with two rules: start and char."
      },
      "date": 1696414639214
    },
    {
      "type": "edit",
      "id": "f10afc1dece74e33",
      "item": {
        "type": "paragraph",
        "id": "f10afc1dece74e33",
        "text": "This is a string containing a [[PEG]] ([[Parsing Expression Grammar]]) rule. It defines a simple grammar with two rules: start and char."
      },
      "date": 1696414659724
    },
    {
      "item": {
        "type": "factory",
        "id": "1950d64f355c2c70"
      },
      "id": "1950d64f355c2c70",
      "type": "add",
      "after": "bb0c9198f8bc9532",
      "date": 1696414693137
    },
    {
      "id": "1950d64f355c2c70",
      "type": "move",
      "order": [
        "9c5fd63c6ea59354",
        "5a696e64cd863ed7",
        "f10afc1dece74e33",
        "1950d64f355c2c70",
        "2af98993a31a4946",
        "bb0c9198f8bc9532"
      ],
      "date": 1696414695088
    },
    {
      "type": "edit",
      "id": "1950d64f355c2c70",
      "item": {
        "type": "markdown",
        "id": "1950d64f355c2c70",
        "text": "start expects one or more lowercase letters (specified by <char+>) and applies an action {action}."
      },
      "date": 1696414696859
    },
    {
      "type": "edit",
      "id": "1950d64f355c2c70",
      "item": {
        "type": "markdown",
        "id": "1950d64f355c2c70",
        "text": "`start` expects one or more lowercase letters (specified by <char+>) and applies an action {action}."
      },
      "date": 1696414709472
    },
    {
      "type": "edit",
      "id": "1950d64f355c2c70",
      "item": {
        "type": "markdown",
        "id": "1950d64f355c2c70",
        "text": "`start` expects one or more lowercase letters (specified by `<char+>`) and applies an action `{action}`."
      },
      "date": 1696414721176
    },
    {
      "type": "add",
      "id": "a59a3ebd9da09809",
      "item": {
        "type": "markdown",
        "id": "a59a3ebd9da09809",
        "text": "`char` matches a single lowercase letter."
      },
      "after": "1950d64f355c2c70",
      "date": 1696414756778
    },
    {
      "type": "add",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the following grammar (string):"
      },
      "after": "9c5fd63c6ea59354",
      "date": 1696414832855
    },
    {
      "type": "edit",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the following grammar (string) [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code]:"
      },
      "date": 1696414872296
    },
    {
      "type": "edit",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the following [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code] – grammar (string) :"
      },
      "date": 1696414894610
    },
    {
      "type": "edit",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the following grammar[https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code] (string) :"
      },
      "date": 1696414917331
    },
    {
      "type": "edit",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the following grammar [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code] (string) :"
      },
      "date": 1696414922022
    },
    {
      "type": "edit",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the following  [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code]:"
      },
      "date": 1696414954507
    },
    {
      "type": "edit",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the following  [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code]."
      },
      "date": 1696414961060
    },
    {
      "type": "edit",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the grammar that matches the text in the form of the following [[Elm]] source [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code]."
      },
      "date": 1696415074221
    },
    {
      "type": "edit",
      "id": "61ca48cc7531ce73",
      "item": {
        "type": "paragraph",
        "id": "61ca48cc7531ce73",
        "text": "For example, we write the grammar that fits the text in the form of the following [[Elm]] source [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L15-L22 code]."
      },
      "date": 1696415135435
    },
    {
      "item": {
        "type": "factory",
        "id": "da53e50b272b3183"
      },
      "id": "da53e50b272b3183",
      "type": "add",
      "after": "bb0c9198f8bc9532",
      "date": 1696415382633
    },
    {
      "type": "edit",
      "id": "da53e50b272b3183",
      "item": {
        "type": "paragraph",
        "id": "da53e50b272b3183",
        "text": "PEGN: Parsing Expression Grammar Notation"
      },
      "date": 1696415388151
    },
    {
      "type": "edit",
      "id": "da53e50b272b3183",
      "item": {
        "type": "paragraph",
        "id": "da53e50b272b3183",
        "text": "PEGN: Parsing Expression Grammar Notation [https://pegn.dev/ site]"
      },
      "date": 1696415400049
    },
    {
      "type": "edit",
      "id": "da53e50b272b3183",
      "item": {
        "type": "paragraph",
        "id": "da53e50b272b3183",
        "text": "[[PEGN]]: Parsing Expression Grammar Notation [https://pegn.dev/ site]"
      },
      "date": 1696415802369
    },
    {
      "type": "edit",
      "id": "da53e50b272b3183",
      "item": {
        "type": "paragraph",
        "id": "da53e50b272b3183",
        "text": "[[PEGN]]: Parsing Expression Grammar Notation [https://pegn.dev/ site] by [[Robert S. Muhlestein]]"
      },
      "date": 1696416020062
    },
    {
      "item": {
        "type": "factory",
        "id": "f91c0a33c0969971"
      },
      "id": "f91c0a33c0969971",
      "type": "add",
      "after": "da53e50b272b3183",
      "date": 1696435255726
    },
    {
      "type": "edit",
      "id": "f91c0a33c0969971",
      "item": {
        "type": "reference",
        "id": "f91c0a33c0969971",
        "site": "wiki.ralfbarkow.ch",
        "slug": "define-a-peg-grammar",
        "title": "Define a PEG Grammar",
        "text": "To get started with Elm PEG Parser, you first need to define a PEG Grammar using the Grammar type."
      },
      "date": 1696435258324
    },
    {
      "id": "f91c0a33c0969971",
      "type": "move",
      "order": [
        "9c5fd63c6ea59354",
        "61ca48cc7531ce73",
        "5a696e64cd863ed7",
        "f10afc1dece74e33",
        "1950d64f355c2c70",
        "a59a3ebd9da09809",
        "2af98993a31a4946",
        "bb0c9198f8bc9532",
        "f91c0a33c0969971",
        "da53e50b272b3183"
      ],
      "date": 1696435260227
    },
    {
      "item": {
        "type": "factory",
        "id": "84e2c519e08ff5b4"
      },
      "id": "84e2c519e08ff5b4",
      "type": "add",
      "after": "da53e50b272b3183",
      "date": 1696435286312
    },
    {
      "type": "edit",
      "id": "84e2c519e08ff5b4",
      "item": {
        "type": "reference",
        "id": "84e2c519e08ff5b4",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parse-a-string-with-the-grammar",
        "title": "Parse a String with the Grammar",
        "text": "MainSpec.elm test case [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/tests/MainSpec.elm#L8-L22 code]"
      },
      "date": 1696435288643
    },
    {
      "item": {
        "type": "factory",
        "id": "ba61a727dc1fec47"
      },
      "id": "ba61a727dc1fec47",
      "type": "add",
      "after": "84e2c519e08ff5b4",
      "date": 1696435300930
    },
    {
      "type": "edit",
      "id": "ba61a727dc1fec47",
      "item": {
        "type": "reference",
        "id": "ba61a727dc1fec47",
        "site": "wiki.ralfbarkow.ch",
        "slug": "parse-wiki-style-links",
        "title": "Parse Wiki-Style Links",
        "text": "and Render Them as Anchors [⇒ [[MiniLatex]]: a Parser-Renderer for … ⇐ [[Render Wiki Link]]]"
      },
      "date": 1696435302961
    },
    {
      "item": {
        "type": "factory",
        "id": "7982cc1ce4332a4d"
      },
      "id": "7982cc1ce4332a4d",
      "type": "add",
      "after": "ba61a727dc1fec47",
      "date": 1696435404662
    },
    {
      "type": "edit",
      "id": "7982cc1ce4332a4d",
      "item": {
        "type": "reference",
        "id": "7982cc1ce4332a4d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "multicomment",
        "title": "multiComment",
        "text": "We intend to 'abuse' the multiComment parser [https://package.elm-lang.org/packages/elm/parser/latest/Parser#multiComment page] (Context: Whitespace) to [[Parse Wiki-Style Links]]."
      },
      "date": 1696435406959
    },
    {
      "item": {
        "type": "factory",
        "id": "ba67e723d3e0a5d6"
      },
      "id": "ba67e723d3e0a5d6",
      "type": "add",
      "after": "7982cc1ce4332a4d",
      "date": 1696435424028
    },
    {
      "type": "edit",
      "id": "ba67e723d3e0a5d6",
      "item": {
        "type": "graphviz",
        "id": "ba67e723d3e0a5d6",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1696435432916
    }
  ]
}