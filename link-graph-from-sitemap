{
  "title": "Link Graph from Sitemap",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "The sitemaps Paul create now do include links found in page. These are returned as entries where the key is the slug linked to and the value is the paragraph id where the link was found. Paragraph ids are rarely duplicated but one case were they are is when pages are made from a template. I made a lot of pages this way in my daily photo challenge. I think I will write a little shell script to find these reused ids. This isn't the problem you are solving but you have me interested and I might try turning Paul's sitemap representation into a Graph just to see how that works out."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "// get a sitemap\nconst site = `photos.ward.dojo.fed.wiki`\nconst url = `http://${site}/system/sitemap.json`\nconst sitemap = await fetch(url)\n  .then(res => res.json())\nconsole.log({sitemap})"
    },
    {
      "type": "code",
      "id": "14bd43188a956d58",
      "text": "// collect links [from,to,at]\nconst links = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links)\n    .map(e => [info.slug,e[0],e[1]]))\n  .flat()\nconsole.log({links})"
    },
    {
      "type": "code",
      "id": "84d7bbc7f990e685",
      "text": "// get ready to make a graph\nimport {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nconst graph = new Graph()\nconst nids = {}\nconst node = slug => {\n  if (!(slug in nids))\n    nids[slug] = graph.addNode('Page',{name:slug})\n  return nids[slug]}"
    },
    {
      "type": "code",
      "id": "30e8026eac5f3205",
      "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there),{id:by})\nconsole.log({graph})\nconsole.log({tally:graph.tally()})"
    },
    {
      "type": "code",
      "id": "cc589b436a45d1a4",
      "text": "// query graph for a given relation by type\nconst id = \"20300030377904197632\"\nconst cypher = `match (here) -[by{id:\"${id}\"}]->(there)`\nconst result = graph.search(cypher)\nconsole.log({result})"
    },
    {
      "type": "code",
      "id": "52f1f801ba049e82",
      "text": "// format result for easy reading\nexport default result.map(({here,there,by}) =>\n  [here.props.name,there.props.name,by.props.id])"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//js.ward.asia.wiki.org/assets/pages/js-snippet-template/importjs.html\nHEIGHT 400"
    },
    {
      "type": "paragraph",
      "id": "8155a586f5842b0f",
      "text": "See also [[Static Import Snippet]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Link Graph from Sitemap",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\n2 + 3\n\n"
          },
          {
            "type": "paragraph",
            "id": "caa626ac93aa7d4c",
            "text": "In the frame below we can view the results."
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "//js.ward.asia.wiki.org/assets/pages/js-snippet-template/importjs.html\nHEIGHT 400"
          },
          {
            "type": "paragraph",
            "id": "8155a586f5842b0f",
            "text": "See also [[Static Import Snippet]]"
          }
        ]
      },
      "date": 1710952864627
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport default `${2 + 3}`\n\n"
      },
      "date": 1710953087382
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport default 2 + 3\n\n"
      },
      "date": 1710953151578
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nconst site = `photos.ward.dojo.fed.wiki`\nconst url = `http://${site}/system/sitemap.json`\nconst sitemap = await fetch(url).then(res => res.json())\nconst result = sitemap.length\n\nexport default result\n\n"
      },
      "date": 1710953385958
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nconst site = `photos.ward.dojo.fed.wiki`\nconst url = `http://${site}/system/sitemap.json`\nconst sitemap = await fetch(url)\n  .then(res => res.json())\nconst result = sitemap.length\n\nexport default result\n\n"
      },
      "date": 1710953408021
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nconst site = `photos.ward.dojo.fed.wiki`\nconst url = `http://${site}/system/sitemap.json`\nconst sitemap = await fetch(url)\n  .then(res => res.json())\nconsole.log({sitemap})\nconst result = sitemap.length\n\nexport default result\n\n"
      },
      "date": 1710953560644
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "The sitemaps Paul create now do include links found in page. These are returned as entries where the key is the slug linked to and the value is the paragraph id where the link was found. Paragraph ids are rarely duplicated but one case were they are is when pages are made from a template. I made a lot of pages this way in my daily photo challenge. I think I will write a little shell script to find these reused ids. This isn't the problem you are solving but you have me interested and I might try turning Paul's sitemap representation into a Graph just to see how that works out."
      },
      "date": 1710953724189
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// get a sitemap\nconst site = `photos.ward.dojo.fed.wiki`\nconst url = `http://${site}/system/sitemap.json`\nconst sitemap = await fetch(url)\n  .then(res => res.json())\nconsole.log({sitemap})"
      },
      "date": 1710953774592
    },
    {
      "item": {
        "type": "factory",
        "id": "14bd43188a956d58"
      },
      "id": "14bd43188a956d58",
      "type": "add",
      "after": "8155a586f5842b0f",
      "date": 1710953790206
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\nconst result = sitemap.length\nexport default result\n\n"
      },
      "date": 1710953812621
    },
    {
      "id": "14bd43188a956d58",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "14bd43188a956d58",
        "caa626ac93aa7d4c",
        "6cf52409eec3988c",
        "8155a586f5842b0f"
      ],
      "date": 1710953817003
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap.length\nexport default result\n\n"
      },
      "date": 1710954023768
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap.map(info => info.links)\nexport default result\n\n"
      },
      "date": 1710954772205
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .map(info => info.links)\n  .filter(links => links)\nexport default result\n\n"
      },
      "date": 1710954820172
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .map(info => info.links)\n  .filter(links => links)\n  .map(links => Object.entries(links)\nexport default result\n\n"
      },
      "date": 1710954891075
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .map(info => info.links)\n  .filter(links => links)\n  .map(links => Object.entries(links))\nexport default result\n\n"
      },
      "date": 1710954897171
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .map(info => info.links)\n  .filter(links => links)\n  .map(links => Object.entries(links))\n  .flat()\nexport default result\n\n"
      },
      "date": 1710954915458
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .map(info => info.links)\n  .filter(links => links)\n  .map(links => Object.entries(links))\n  .flat()\n  .map(entry => entry[1])\nexport default result\n\n"
      },
      "date": 1710955015843
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .map(info => info.links)\n  .filter(links => links)\n  .map(links => Object.entries(links))\n  .flat()\n  .map(entry => entry[1])\n  .sort()\nexport default result\n\n"
      },
      "date": 1710955029410
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links))\n  .flat()\n  .map(entry => entry[1])\n  .sort()\nexport default result\n\n"
      },
      "date": 1710972641694
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links)\n)\n  .flat()\n  .map(entry => entry[1])\n  .sort()\nexport default result\n\n"
      },
      "date": 1710972707393
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links)\n    .map(e => [info.slug,e[0],e[1]]))\n  .flat()\n  .sort()\nexport default result\n\n"
      },
      "date": 1710972796569
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "//Show some results\n\nconst result = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links)\n    .map(e => [info.slug,e[0],e[1]]))\n  .flat()\nexport default result\n\n"
      },
      "date": 1710972858581
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "// collect links [from,to,at]\nconst links = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links)\n    .map(e => [info.slug,e[0],e[1]]))\n  .flat()\n\n"
      },
      "date": 1710973150333
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "// collect links [from,to,at]\nconst links = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links)\n    .map(e => [info.slug,e[0],e[1]]))\n  .flat()\nconsole.log({links})"
      },
      "date": 1710973171792
    },
    {
      "item": {
        "type": "factory",
        "id": "84d7bbc7f990e685"
      },
      "id": "84d7bbc7f990e685",
      "type": "add",
      "after": "8155a586f5842b0f",
      "date": 1710973193142
    },
    {
      "id": "84d7bbc7f990e685",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "14bd43188a956d58",
        "84d7bbc7f990e685",
        "caa626ac93aa7d4c",
        "6cf52409eec3988c",
        "8155a586f5842b0f"
      ],
      "date": 1710973199945
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "import {Graph} from \nexport default result\n"
      },
      "date": 1710973273218
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "import {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nexport default result\n"
      },
      "date": 1710973320437
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "import {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nconst graph = new Graph()\nconst nids = {}\nconst node = slug => (slug in nids)\n  ? nids[slug]\n  : graph.add\nexport default result\n"
      },
      "date": 1710973529214
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "import {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nconst graph = new Graph()\nconst nids = {}\nconst node = slug => {(slug in nids)\n  ? nids[slug]\n  : graph.add\nexport default result\n"
      },
      "date": 1710973724808
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "import {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nconst graph = new Graph()\nconst nids = {}\nconst node = slug => {\n  if (!(slug in nids))\n    nids[slug] = graph.addNode('Page',{name:slug})\n  return nids[slug]}\nfor (const [here, there, by] of links\n  graph.addRel(by,node(here),node(there))\nexport default graph\n"
      },
      "date": 1710974156677
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "import {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nconst graph = new Graph()\nconst nids = {}\nconst node = slug => {\n  if (!(slug in nids))\n    nids[slug] = graph.addNode('Page',{name:slug})\n  return nids[slug]}\nfor (const [here, there, by] of links\n  graph.addRel(by,node(here),node(there))\nresult = graph.tally()\nexport default result\n"
      },
      "date": 1710974223770
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "import {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nconst graph = new Graph()\nconst nids = {}\nconst node = slug => {\n  if (!(slug in nids))\n    nids[slug] = graph.addNode('Page',{name:slug})\n  return nids[slug]}\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there))\nresult = graph.tally()\nexport default result\n"
      },
      "date": 1710974240269
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "import {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nconst graph = new Graph()\nconst nids = {}\nconst node = slug => {\n  if (!(slug in nids))\n    nids[slug] = graph.addNode('Page',{name:slug})\n  return nids[slug]}\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there))\nconst result = graph.tally()\nexport default result\n"
      },
      "date": 1710974259105
    },
    {
      "type": "edit",
      "id": "84d7bbc7f990e685",
      "item": {
        "type": "code",
        "id": "84d7bbc7f990e685",
        "text": "// get ready to make a graph\nimport {Graph} from 'https://wardcunningham.github.io/graph/graph.js'\nconst graph = new Graph()\nconst nids = {}\nconst node = slug => {\n  if (!(slug in nids))\n    nids[slug] = graph.addNode('Page',{name:slug})\n  return nids[slug]}"
      },
      "date": 1710975058913
    },
    {
      "item": {
        "type": "factory",
        "id": "30e8026eac5f3205"
      },
      "id": "30e8026eac5f3205",
      "type": "add",
      "after": "8155a586f5842b0f",
      "date": 1710975062983
    },
    {
      "type": "edit",
      "id": "30e8026eac5f3205",
      "item": {
        "type": "code",
        "id": "30e8026eac5f3205",
        "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there))\nconsole.log({tally:graph.tally()}\nexport default result\n"
      },
      "date": 1710975192894
    },
    {
      "id": "30e8026eac5f3205",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "14bd43188a956d58",
        "84d7bbc7f990e685",
        "30e8026eac5f3205",
        "caa626ac93aa7d4c",
        "6cf52409eec3988c",
        "8155a586f5842b0f"
      ],
      "date": 1710975215320
    },
    {
      "type": "edit",
      "id": "30e8026eac5f3205",
      "item": {
        "type": "code",
        "id": "30e8026eac5f3205",
        "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there))\nconsole.log({tally:graph.tally()})\nexport default result\n"
      },
      "date": 1710975252077
    },
    {
      "type": "edit",
      "id": "30e8026eac5f3205",
      "item": {
        "type": "code",
        "id": "30e8026eac5f3205",
        "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there))\nconsole.log({tally:graph.tally()})\nexport default graph\n"
      },
      "date": 1710975273587
    },
    {
      "type": "edit",
      "id": "30e8026eac5f3205",
      "item": {
        "type": "code",
        "id": "30e8026eac5f3205",
        "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there))\nconsole.log({tally:graph.tally()})\nexport default graph.tally()\n"
      },
      "date": 1710975401359
    },
    {
      "type": "fork",
      "date": 1710975536980
    },
    {
      "item": {
        "type": "factory",
        "id": "cc589b436a45d1a4"
      },
      "id": "cc589b436a45d1a4",
      "type": "add",
      "after": "8155a586f5842b0f",
      "date": 1710975586949
    },
    {
      "id": "cc589b436a45d1a4",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "14bd43188a956d58",
        "84d7bbc7f990e685",
        "30e8026eac5f3205",
        "cc589b436a45d1a4",
        "caa626ac93aa7d4c",
        "6cf52409eec3988c",
        "8155a586f5842b0f"
      ],
      "date": 1710975601357
    },
    {
      "type": "edit",
      "id": "cc589b436a45d1a4",
      "item": {
        "type": "code",
        "id": "cc589b436a45d1a4",
        "text": "// query graph for a given relation by type\nconst id = \"20300030377904197632\"\nconst cypher = `match (here) -[:${id}]->(there)`\nconst result = graph.query(cypher)\nconsole.log({result})\nexport default result"
      },
      "date": 1710975819629
    },
    {
      "type": "edit",
      "id": "30e8026eac5f3205",
      "item": {
        "type": "code",
        "id": "30e8026eac5f3205",
        "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there))\nconsole.log({tally:graph.tally()})"
      },
      "date": 1710975834399
    },
    {
      "type": "edit",
      "id": "cc589b436a45d1a4",
      "item": {
        "type": "code",
        "id": "cc589b436a45d1a4",
        "text": "// query graph for a given relation by type\nconst id = \"20300030377904197632\"\nconst cypher = `match (here) -[:${id}]->(there)`\nconst result = graph.search(cypher)\nconsole.log({result})\nexport default result"
      },
      "date": 1710975848467
    },
    {
      "type": "edit",
      "id": "30e8026eac5f3205",
      "item": {
        "type": "code",
        "id": "30e8026eac5f3205",
        "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there),{})\nconsole.log({tally:graph.tally()})"
      },
      "date": 1710975886086
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "// collect links [from,to,at]\nconst links = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links)\n    .map(e => [info.slug,e[0],e[1]]))\n  .flat()\nconsole.log({links,graph})"
      },
      "date": 1710976052919
    },
    {
      "type": "edit",
      "id": "14bd43188a956d58",
      "item": {
        "type": "code",
        "id": "14bd43188a956d58",
        "text": "// collect links [from,to,at]\nconst links = sitemap\n  .filter(info => info.links)\n  .map(info => Object.entries(info.links)\n    .map(e => [info.slug,e[0],e[1]]))\n  .flat()\nconsole.log({links})"
      },
      "date": 1710976071221
    },
    {
      "type": "edit",
      "id": "30e8026eac5f3205",
      "item": {
        "type": "code",
        "id": "30e8026eac5f3205",
        "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there),{})\nconsole.log({graph})\nconsole.log({tally:graph.tally()})"
      },
      "date": 1710976097945
    },
    {
      "type": "edit",
      "id": "cc589b436a45d1a4",
      "item": {
        "type": "code",
        "id": "cc589b436a45d1a4",
        "text": "// query graph for a given relation by type\nconst id = \"20300030377904197632\"\nconst cypher = `match (here) -[r:${id}]->(there)`\nconst result = graph.search(cypher)\nconsole.log({result})\nexport default result"
      },
      "date": 1710976185443
    },
    {
      "type": "edit",
      "id": "cc589b436a45d1a4",
      "item": {
        "type": "code",
        "id": "cc589b436a45d1a4",
        "text": "// query graph for a given relation by type\nconst id = \"20300030377904197632\"\nconst cypher = `match (here) -[r]->(there)`\nconst result = graph.search(cypher)\nconsole.log({result})\nexport default result"
      },
      "date": 1710976200008
    },
    {
      "type": "edit",
      "id": "30e8026eac5f3205",
      "item": {
        "type": "code",
        "id": "30e8026eac5f3205",
        "text": "// fill graph with rels typed with paragraph id\nfor (const [here, there, by] of links)\n  graph.addRel(by,node(here),node(there),{id:by})\nconsole.log({graph})\nconsole.log({tally:graph.tally()})"
      },
      "date": 1710976272206
    },
    {
      "type": "edit",
      "id": "cc589b436a45d1a4",
      "item": {
        "type": "code",
        "id": "cc589b436a45d1a4",
        "text": "// query graph for a given relation by type\nconst id = \"20300030377904197632\"\nconst cypher = `match (here) -[by{id:\"${id}\"}]->(there)`\nconst result = graph.search(cypher)\nconsole.log({result})\nexport default result"
      },
      "date": 1710976335433
    },
    {
      "type": "fork",
      "date": 1710976837725
    },
    {
      "type": "edit",
      "id": "cc589b436a45d1a4",
      "item": {
        "type": "code",
        "id": "cc589b436a45d1a4",
        "text": "// query graph for a given relation by type\nconst id = \"20300030377904197632\"\nconst cypher = `match (here) -[by{id:\"${id}\"}]->(there)`\nconst result = graph.search(cypher)\nconsole.log({result})"
      },
      "date": 1710976896013
    },
    {
      "item": {
        "type": "factory",
        "id": "52f1f801ba049e82"
      },
      "id": "52f1f801ba049e82",
      "type": "add",
      "after": "8155a586f5842b0f",
      "date": 1710976906275
    },
    {
      "type": "edit",
      "id": "52f1f801ba049e82",
      "item": {
        "type": "code",
        "id": "52f1f801ba049e82",
        "text": "// format result for easy reading"
      },
      "date": 1710976922010
    },
    {
      "id": "52f1f801ba049e82",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "14bd43188a956d58",
        "84d7bbc7f990e685",
        "30e8026eac5f3205",
        "cc589b436a45d1a4",
        "52f1f801ba049e82",
        "caa626ac93aa7d4c",
        "6cf52409eec3988c",
        "8155a586f5842b0f"
      ],
      "date": 1710976926756
    },
    {
      "type": "edit",
      "id": "52f1f801ba049e82",
      "item": {
        "type": "code",
        "id": "52f1f801ba049e82",
        "text": "// format result for easy reading\nexport default result"
      },
      "date": 1710976944334
    },
    {
      "type": "edit",
      "id": "52f1f801ba049e82",
      "item": {
        "type": "code",
        "id": "52f1f801ba049e82",
        "text": "// format result for easy reading\nexport default result.map(({here,there,by} =>\n  `${here.props.name} ${by.props.id} ${there.props.name}`"
      },
      "date": 1710977149221
    },
    {
      "type": "edit",
      "id": "52f1f801ba049e82",
      "item": {
        "type": "code",
        "id": "52f1f801ba049e82",
        "text": "// format result for easy reading\nexport default result.map(({here,there,by}) =>\n  `${here.props.name} ${by.props.id} ${there.props.name}`"
      },
      "date": 1710977159314
    },
    {
      "type": "edit",
      "id": "52f1f801ba049e82",
      "item": {
        "type": "code",
        "id": "52f1f801ba049e82",
        "text": "// format result for easy reading\nexport default result.map(({here,there,by}) =>\n  `${here.props.name} ${by.props.id} ${there.props.name}`)"
      },
      "date": 1710977170985
    },
    {
      "type": "edit",
      "id": "52f1f801ba049e82",
      "item": {
        "type": "code",
        "id": "52f1f801ba049e82",
        "text": "// format result for easy reading\nexport default result.map(({here,there,by}) =>\n  [here.props.name,by.props.id,there.props.name])"
      },
      "date": 1710977269401
    },
    {
      "type": "edit",
      "id": "52f1f801ba049e82",
      "item": {
        "type": "code",
        "id": "52f1f801ba049e82",
        "text": "// format result for easy reading\nexport default result.map(({here,there,by}) =>\n  [here.props.name,there.props.name,by.props.id])"
      },
      "date": 1710977291750
    },
    {
      "type": "fork",
      "site": "js.ward.asia.wiki.org",
      "date": 1711000198117
    }
  ]
}