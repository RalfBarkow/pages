{
  "title": "Pts",
  "story": [
    {
      "type": "paragraph",
      "id": "704a5cb14ed765ae",
      "text": "Pts is a typescript/javascript library for visualization and creative-coding. [https://github.com/williamngan/pts github]"
    },
    {
      "type": "paragraph",
      "id": "23769a733aa47603",
      "text": "Let's see if we can run the [https://ptsjs.org/demo/edit/?name=pts.quickStart pts.quickStart] here in wiki. (See [[G9 Demos]])  "
    },
    {
      "type": "code",
      "id": "3e30892bba231070",
      "text": "//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  // Pts.quickStart instantiates a CanvasSapce and CanvasForm and put the respective \"space\" and \"form\" variables into global scope and bind mouse and touch events.\n  // It returns a function where you can init with callback functions ( animateFn, startFn, actionFn, resizeFn )\n  // See guides for more details: https://ptsjs.org/guide/Get-started-0100.html\n  var run = Pts.quickStart( \"pt\", \"#f03\" ); \n\n  // Pass an animate callback function to run\n  run( ( time, ftime ) => { \n    let subs = space.innerBound.map( (p) => Line.subpoints( [p, space.pointer], 30 ) );\n    let rects = Util.zip( subs ).map( (r,i) => Rectangle.corners( r ).rotate2D( i*Math.PI/60, space.pointer ) );\n    form.strokeOnly(\"#FDC\", 2).polygons( rects );\n  });\n\n})();"
    },
    {
      "type": "frame",
      "id": "e75afbe965cbf0f6",
      "text": "//wiki.ralfbarkow.ch/assets/pages/pts-demos/run-pts.html\nHEIGHT 160"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Pts",
        "story": []
      },
      "date": 1652620600234
    },
    {
      "item": {
        "type": "factory",
        "id": "704a5cb14ed765ae"
      },
      "id": "704a5cb14ed765ae",
      "type": "add",
      "date": 1652620603302
    },
    {
      "type": "edit",
      "id": "704a5cb14ed765ae",
      "item": {
        "type": "paragraph",
        "id": "704a5cb14ed765ae",
        "text": "Pts is a typescript/javascript library for visualization and creative-coding."
      },
      "date": 1652620605315
    },
    {
      "type": "edit",
      "id": "704a5cb14ed765ae",
      "item": {
        "type": "paragraph",
        "id": "704a5cb14ed765ae",
        "text": "Pts is a typescript/javascript library for visualization and creative-coding. [https://github.com/williamngan/pts github]"
      },
      "date": 1652620617069
    },
    {
      "item": {
        "type": "factory",
        "id": "23769a733aa47603"
      },
      "id": "23769a733aa47603",
      "type": "add",
      "after": "704a5cb14ed765ae",
      "date": 1652620950180
    },
    {
      "type": "edit",
      "id": "23769a733aa47603",
      "item": {
        "type": "paragraph",
        "id": "23769a733aa47603",
        "text": "Let's see if we can run "
      },
      "date": 1652620959920
    },
    {
      "type": "edit",
      "id": "23769a733aa47603",
      "item": {
        "type": "paragraph",
        "id": "23769a733aa47603",
        "text": "Let's see if we can run the Pts.js here in wiki. (See [[G9 Demos]]].  "
      },
      "date": 1652621040997
    },
    {
      "item": {
        "type": "factory",
        "id": "e75afbe965cbf0f6"
      },
      "id": "e75afbe965cbf0f6",
      "type": "add",
      "after": "23769a733aa47603",
      "date": 1652621741412
    },
    {
      "type": "edit",
      "id": "e75afbe965cbf0f6",
      "item": {
        "type": "frame",
        "id": "e75afbe965cbf0f6",
        "text": "//wiki.ralfbarkow.ch/assets/pages/g9-demos/run-pts.html\nHEIGHT 160"
      },
      "date": 1652621755402
    },
    {
      "type": "edit",
      "id": "e75afbe965cbf0f6",
      "item": {
        "type": "frame",
        "id": "e75afbe965cbf0f6",
        "text": "//wiki.ralfbarkow.ch/assets/pages/pts-demos/run-pts.html\nHEIGHT 160"
      },
      "date": 1652621775366
    },
    {
      "type": "edit",
      "id": "23769a733aa47603",
      "item": {
        "type": "paragraph",
        "id": "23769a733aa47603",
        "text": "Let's see if we can run the Pts.js here in wiki. (See [[G9 Demos]]).  "
      },
      "date": 1652622373882
    },
    {
      "item": {
        "type": "factory",
        "id": "4ab18cfc07b1d81b"
      },
      "id": "4ab18cfc07b1d81b",
      "type": "add",
      "after": "e75afbe965cbf0f6",
      "date": 1652622643385
    },
    {
      "type": "remove",
      "id": "4ab18cfc07b1d81b",
      "date": 1652622647525
    },
    {
      "item": {
        "type": "factory",
        "id": "3e30892bba231070"
      },
      "id": "3e30892bba231070",
      "type": "add",
      "after": "e75afbe965cbf0f6",
      "date": 1652622689223
    },
    {
      "id": "3e30892bba231070",
      "type": "move",
      "order": [
        "704a5cb14ed765ae",
        "23769a733aa47603",
        "3e30892bba231070",
        "e75afbe965cbf0f6"
      ],
      "date": 1652622692186
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "//"
      },
      "date": 1652622702712
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "//\n  run( (time, ftime)  => {\n    // space.pointer stores the last mouse or touch position\n    let m = space.pointer;\n    \n    // drawing\n    form.strokeOnly(\"#123\", 5).line( [new Pt( m.x, 0), m, new Pt( 0, m.y)] );\n    form.stroke(\"#42e\").line( [new Pt(0,0), m] );\n    form.stroke(\"#fff\", 5).fill(\"#42e\").point( m, 10, \"circle\")\n    form.fill(\"#123\").font(14, \"bold\").text( m.$add(20, 5), m.toString() );\n  });"
      },
      "date": 1652622863333
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "//\n\n    \n    // drawing\n    form.strokeOnly(\"#123\", 5).line( [new Pt( m.x, 0), m, new Pt( 0, m.y)] );\n    form.stroke(\"#42e\").line( [new Pt(0,0), m] );\n    form.stroke(\"#fff\", 5).fill(\"#42e\").point( m, 10, \"circle\")\n    form.fill(\"#123\").font(14, \"bold\").text( m.$add(20, 5), m.toString() );\n  });"
      },
      "date": 1652622917321
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "// drawing\n    form.strokeOnly(\"#123\", 5).line( [new Pt( m.x, 0), m, new Pt( 0, m.y)] );\n    form.stroke(\"#42e\").line( [new Pt(0,0), m] );\n    form.stroke(\"#fff\", 5).fill(\"#42e\").point( m, 10, \"circle\")\n    form.fill(\"#123\").font(14, \"bold\").text( m.$add(20, 5), m.toString() );\n  });"
      },
      "date": 1652622949887
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "// drawing\n    form.strokeOnly(\"#123\", 5).line( [new Pt( m.x, 0), m, new Pt( 0, m.y)] );\n    form.stroke(\"#42e\").line( [new Pt(0,0), m] );\n    form.stroke(\"#fff\", 5).fill(\"#42e\").point( m, 10, \"circle\")\n    form.fill(\"#123\").font(14, \"bold\").text( m.$add(20, 5), m.toString() );\n"
      },
      "date": 1652623023723
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "// drawing\nform.strokeOnly(\"#123\", 5).line( [new Pt( m.x, 0), m, new Pt( 0, m.y)] );\nform.stroke(\"#42e\").line( [new Pt(0,0), m] );\nform.stroke(\"#fff\", 5).fill(\"#42e\").point( m, 10, \"circle\")\nform.fill(\"#123\").font(14, \"bold\").text( m.$add(20, 5), m.toString() );\n"
      },
      "date": 1652623392932
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "// drawing\nform.strokeOnly(\"#123\", 5).line( [new Pt( m.x, 0), m, new Pt( 0, m.y)] );\nform.stroke(\"#42e\").line( [new Pt(0,0), m] );\nform.stroke(\"#fff\", 5).fill(\"#42e\").point( m, 10, \"circle\") );\nform.fill(\"#123\").font(14, \"bold\").text( m.$add(20, 5), m.toString() );\n"
      },
      "date": 1652623420525
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "// drawing\nform.strokeOnly(\"#123\", 5).line( [new Pt( m.x, 0), m, new Pt( 0, m.y)] );\nform.stroke(\"#42e\").line( [new Pt(0,0), m] );\nform.stroke(\"#fff\", 5).fill(\"#42e\").point( m, 10, \"circle\") ;\nform.fill(\"#123\").font(14, \"bold\").text( m.$add(20, 5), m.toString() );\n"
      },
      "date": 1652623446678
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "//"
      },
      "date": 1652623609982
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "//\nspace.bindMouse().bindTouch().play();"
      },
      "date": 1652623645721
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "//\n// space.bindMouse().bindTouch().play();"
      },
      "date": 1652623719480
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "  run( (time, ftime)  => {\n    // rectangle\n    var rect = Rectangle.fromCenter( space.center, space.size.$divide(2) );\n    var poly = Rectangle.corners( rect );\n    poly.shear2D( Num.cycle( time%5000/5000 ) - 0.5, space.center );\n    \n    // triangle\n    var tris = poly.segments( 2, 1, true );\n    tris.map( (t) => t.push( space.pointer ) );\n    \n    // circle\n    var circles = tris.map( (t) => Triangle.incircle( t ) );\n    \n    // drawing\n    form.fillOnly(\"#123\").polygon( poly );\n    form.fill(\"#f05\").circles( circles );\n    form.strokeOnly(\"#fff \", 3 ).polygons( tris );\n    form.fill(\"#123\").point( space.pointer, 5 );\n  });\n\n  //// ---- "
      },
      "date": 1652623812525
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "\n    // rectangle\n    var rect = Rectangle.fromCenter( space.center, space.size.$divide(2) );\n    var poly = Rectangle.corners( rect );\n    poly.shear2D( Num.cycle( time%5000/5000 ) - 0.5, space.center );\n    \n    // triangle\n    var tris = poly.segments( 2, 1, true );\n    tris.map( (t) => t.push( space.pointer ) );\n    \n    // circle\n    var circles = tris.map( (t) => Triangle.incircle( t ) );\n    \n    // drawing\n    form.fillOnly(\"#123\").polygon( poly );\n    form.fill(\"#f05\").circles( circles );\n    form.strokeOnly(\"#fff \", 3 ).polygons( tris );\n    form.fill(\"#123\").point( space.pointer, 5 );\n  });\n\n  //// ---- "
      },
      "date": 1652623831544
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "    // rectangle\n    var rect = Rectangle.fromCenter( space.center, space.size.$divide(2) );\n    var poly = Rectangle.corners( rect );\n    poly.shear2D( Num.cycle( time%5000/5000 ) - 0.5, space.center );\n    \n    // triangle\n    var tris = poly.segments( 2, 1, true );\n    tris.map( (t) => t.push( space.pointer ) );\n    \n    // circle\n    var circles = tris.map( (t) => Triangle.incircle( t ) );\n    \n    // drawing\n    form.fillOnly(\"#123\").polygon( poly );\n    form.fill(\"#f05\").circles( circles );\n    form.strokeOnly(\"#fff \", 3 ).polygons( tris );\n    form.fill(\"#123\").point( space.pointer, 5 );\n\n\n  //// ---- "
      },
      "date": 1652623842608
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "    // rectangle\n    const rect = Rectangle.fromCenter( space.center, space.size.$divide(2) );\n    const poly = Rectangle.corners( rect );\n    poly.shear2D( Num.cycle( time%5000/5000 ) - 0.5, space.center );\n    \n    // triangle\n    const tris = poly.segments( 2, 1, true );\n    tris.map( (t) => t.push( space.pointer ) );\n    \n    // circle\n    const circles = tris.map( (t) => Triangle.incircle( t ) );\n    \n    // drawing\n    form.fillOnly(\"#123\").polygon( poly );\n    form.fill(\"#f05\").circles( circles );\n    form.strokeOnly(\"#fff \", 3 ).polygons( tris );\n    form.fill(\"#123\").point( space.pointer, 5 );\n\n\n  //// ---- "
      },
      "date": 1652623992617
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "    // rectangle\n    const rect = Rectangle.fromCenter( space.center, space.size.$divide(2) );\n    const poly = Rectangle.corners( rect );\n    // poly.shear2D( Num.cycle( time%5000/5000 ) - 0.5, space.center );\n    \n    // triangle\n    const tris = poly.segments( 2, 1, true );\n    tris.map( (t) => t.push( space.pointer ) );\n    \n    // circle\n    const circles = tris.map( (t) => Triangle.incircle( t ) );\n    \n    // drawing\n    form.fillOnly(\"#123\").polygon( poly );\n    form.fill(\"#f05\").circles( circles );\n    form.strokeOnly(\"#fff \", 3 ).polygons( tris );\n    form.fill(\"#123\").point( space.pointer, 5 );\n\n\n  //// ---- "
      },
      "date": 1652624010920
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "// Pts.quickStart instantiates a CanvasSapce and CanvasForm and put the respective \"space\" and \"form\" variables into global scope and bind mouse and touch events.\n  // It returns a function where you can init with callback functions ( animateFn, startFn, actionFn, resizeFn )\n  // See guides for more details: https://ptsjs.org/guide/Get-started-0100.html\n  var run = Pts.quickStart( \"pt\", \"#f03\" ); \n\n  // Pass an animate callback function to run\n  run( ( time, ftime ) => { \n    let subs = space.innerBound.map( (p) => Line.subpoints( [p, space.pointer], 30 ) );\n    let rects = Util.zip( subs ).map( (r,i) => Rectangle.corners( r ).rotate2D( i*Math.PI/60, space.pointer ) );\n    form.strokeOnly(\"#FDC\", 2).polygons( rects );\n  });"
      },
      "date": 1652624114670
    },
    {
      "type": "edit",
      "id": "3e30892bba231070",
      "item": {
        "type": "code",
        "id": "3e30892bba231070",
        "text": "//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  // Pts.quickStart instantiates a CanvasSapce and CanvasForm and put the respective \"space\" and \"form\" variables into global scope and bind mouse and touch events.\n  // It returns a function where you can init with callback functions ( animateFn, startFn, actionFn, resizeFn )\n  // See guides for more details: https://ptsjs.org/guide/Get-started-0100.html\n  var run = Pts.quickStart( \"pt\", \"#f03\" ); \n\n  // Pass an animate callback function to run\n  run( ( time, ftime ) => { \n    let subs = space.innerBound.map( (p) => Line.subpoints( [p, space.pointer], 30 ) );\n    let rects = Util.zip( subs ).map( (r,i) => Rectangle.corners( r ).rotate2D( i*Math.PI/60, space.pointer ) );\n    form.strokeOnly(\"#FDC\", 2).polygons( rects );\n  });\n\n})();"
      },
      "date": 1652624769350
    },
    {
      "type": "edit",
      "id": "23769a733aa47603",
      "item": {
        "type": "paragraph",
        "id": "23769a733aa47603",
        "text": "Let's see if we can run the Pts.js here in wiki. (See [[G9 Demos]])  "
      },
      "date": 1652624875735
    },
    {
      "type": "edit",
      "id": "23769a733aa47603",
      "item": {
        "type": "paragraph",
        "id": "23769a733aa47603",
        "text": "Let's see if we can run the [https://ptsjs.org/demo/edit/?name=pts.quickStart pts.quickStart] here in wiki. (See [[G9 Demos]])  "
      },
      "date": 1652624962543
    }
  ]
}