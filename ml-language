{
  "title": "Ml Language",
  "story": [
    {
      "type": "html",
      "text": "The [[Functional Programming Language]] ML was originally developed by [[Robin Milner]] ([[Turing Award]] 1991) and was the first language to include [[Polymorphic Type Inference]], together with a type-safe exception-handling mechanism. ML stands for [[Meta Language]], <i>not</i> for [[Markup Language]]. ML is not [[Machine Language]].",
      "id": "30c91a64ec229c74067604b161604ff7"
    },
    {
      "type": "html",
      "text": "\nML is a [[Strongly Typed]], [[Statically Typed]] language with semantics somewhat resembling those of the [[Scheme Language]].",
      "id": "7e94fcc26491cb6e49446daa09e6b572"
    },
    {
      "type": "html",
      "text": "\nML provides the following features:",
      "id": "b4eff05134ff6d5f4a73a60ee0fb6c1b"
    },
    {
      "type": "html",
      "text": " automatic [[Type Inference]]:<br>Don't write types yourself, let the compiler do it for you!",
      "id": "588534e05225b920f3c0396691874134"
    },
    {
      "type": "html",
      "text": " mostly declarative syntax using [[Pattern Matching]]",
      "id": "9956f0f58e82740bc2742c01c8f61c49"
    },
    {
      "type": "html",
      "text": " [[Generic Type]]s:<br>Somewhat like C++'s templates (see [[Category Cpp Templates]]).",
      "id": "d55858cbc88053a17fcf2c20d35e2d03"
    },
    {
      "type": "html",
      "text": " [[Parametric Modules]] (functors):<br>Modules can take other modules as an argument. (As far as I know, this is unique for ML.)  <i>([[Answer Me]]: I've tried to research this on the web aeons ago, and my understanding of how functors work still eludes me.  Can someone point a clueless n00b to a step-by-step tutorial or fill in the gaps on [[How Ml Functors Work]] ?  Thanks!)</i>",
      "id": "e0c2a5cad286bdfda7e6cb1bc531902e"
    },
    {
      "type": "html",
      "text": "\nUnlike Haskell [[[Haskell Language]]] (and like [[Lisp Language]] and Scheme), ML is <i>strict</i>: the arguments to a function are always evaluated before evaluating the body of the function (see [[Strict Evaluation]] and [[Lazy Evaluation]]).",
      "id": "0202eccd110f673e637c2a1802e5e8ee"
    },
    {
      "type": "html",
      "text": "\nThere are three ML dialects in wide use:",
      "id": "3b389a3f0ed77f5ef3bf87059f6de33b"
    },
    {
      "type": "html",
      "text": " O'Caml [[[Objective Caml]]]",
      "id": "83b7d2abc79fb68a50df0b9ba34ab0e5"
    },
    {
      "type": "html",
      "text": " Standard ML [[[Sml Language]]]",
      "id": "f122595a6a1d0d42981a4250ca402bbe"
    },
    {
      "type": "html",
      "text": " F# [[[Fsharp Language]]]",
      "id": "67f6119f280c443b62d741a67c670385"
    },
    {
      "type": "html",
      "text": "\nSee [http://www.mpi-sws.mpg.de/~rossberg/sml-vs-ocaml.html www.mpi-sws.mpg.de] for a concise description of the differences between O'Caml and Standard ML.",
      "id": "da9e974333a600f3791cd101a35986bb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "735b5c321ab768b7565c3e073a808fbe"
    },
    {
      "type": "html",
      "text": "Can we see some code snippet and syntax/notation examples here? ",
      "id": "523b1ed7578e042125e24a8e764a6dd8"
    },
    {
      "type": "html",
      "text": "<i>Maybe some [[Sml Language]] examples would satisfy. There is an example at that page already.</i>",
      "id": "b66e2e07df096bfeeac4cc4e2c9ce9ae"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "735b5c321ab768b7565c3e073a808fbe"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Category Functional Programming]]",
      "id": "5ba966ac442f6e9e12122924156471b8"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?MlLanguage c2.com]",
      "id": "fb3bec853220e7e92328e81e62b209ef"
    }
  ],
  "journal": [
    {
      "date": 1400002698000,
      "id": "93d6fab397ecfb342a118dadc48022ea",
      "type": "create",
      "item": {
        "title": "Ml Language",
        "story": [
          {
            "type": "html",
            "text": "The [[Functional Programming Language]] ML was originally developed by [[Robin Milner]] ([[Turing Award]] 1991) and was the first language to include [[Polymorphic Type Inference]], together with a type-safe exception-handling mechanism. ML stands for [[Meta Language]], <i>not</i> for [[Markup Language]]. ML is not [[Machine Language]].",
            "id": "30c91a64ec229c74067604b161604ff7"
          },
          {
            "type": "html",
            "text": "\nML is a [[Strongly Typed]], [[Statically Typed]] language with semantics somewhat resembling those of the [[Scheme Language]].",
            "id": "7e94fcc26491cb6e49446daa09e6b572"
          },
          {
            "type": "html",
            "text": "\nML provides the following features:",
            "id": "b4eff05134ff6d5f4a73a60ee0fb6c1b"
          },
          {
            "type": "html",
            "text": " automatic [[Type Inference]]:<br>Don't write types yourself, let the compiler do it for you!",
            "id": "588534e05225b920f3c0396691874134"
          },
          {
            "type": "html",
            "text": " mostly declarative syntax using [[Pattern Matching]]",
            "id": "9956f0f58e82740bc2742c01c8f61c49"
          },
          {
            "type": "html",
            "text": " [[Generic Type]]s:<br>Somewhat like C++'s templates (see [[Category Cpp Templates]]).",
            "id": "d55858cbc88053a17fcf2c20d35e2d03"
          },
          {
            "type": "html",
            "text": " [[Parametric Modules]] (functors):<br>Modules can take other modules as an argument. (As far as I know, this is unique for ML.)  <i>([[Answer Me]]: I've tried to research this on the web aeons ago, and my understanding of how functors work still eludes me.  Can someone point a clueless n00b to a step-by-step tutorial or fill in the gaps on [[How Ml Functors Work]] ?  Thanks!)</i>",
            "id": "e0c2a5cad286bdfda7e6cb1bc531902e"
          },
          {
            "type": "html",
            "text": "\nUnlike Haskell [[[Haskell Language]]] (and like [[Lisp Language]] and Scheme), ML is <i>strict</i>: the arguments to a function are always evaluated before evaluating the body of the function (see [[Strict Evaluation]] and [[Lazy Evaluation]]).",
            "id": "0202eccd110f673e637c2a1802e5e8ee"
          },
          {
            "type": "html",
            "text": "\nThere are three ML dialects in wide use:",
            "id": "3b389a3f0ed77f5ef3bf87059f6de33b"
          },
          {
            "type": "html",
            "text": " O'Caml [[[Objective Caml]]]",
            "id": "83b7d2abc79fb68a50df0b9ba34ab0e5"
          },
          {
            "type": "html",
            "text": " Standard ML [[[Sml Language]]]",
            "id": "f122595a6a1d0d42981a4250ca402bbe"
          },
          {
            "type": "html",
            "text": " F# [[[Fsharp Language]]]",
            "id": "67f6119f280c443b62d741a67c670385"
          },
          {
            "type": "html",
            "text": "\nSee [http://www.mpi-sws.mpg.de/~rossberg/sml-vs-ocaml.html www.mpi-sws.mpg.de] for a concise description of the differences between O'Caml and Standard ML.",
            "id": "da9e974333a600f3791cd101a35986bb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "735b5c321ab768b7565c3e073a808fbe"
          },
          {
            "type": "html",
            "text": "Can we see some code snippet and syntax/notation examples here? ",
            "id": "523b1ed7578e042125e24a8e764a6dd8"
          },
          {
            "type": "html",
            "text": "<i>Maybe some [[Sml Language]] examples would satisfy. There is an example at that page already.</i>",
            "id": "b66e2e07df096bfeeac4cc4e2c9ce9ae"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "735b5c321ab768b7565c3e073a808fbe"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Category Functional Programming]]",
            "id": "5ba966ac442f6e9e12122924156471b8"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?MlLanguage c2.com]",
            "id": "fb3bec853220e7e92328e81e62b209ef"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1707795865876
    }
  ]
}