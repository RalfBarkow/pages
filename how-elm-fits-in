{
  "title": "How Elm Fits In",
  "story": [
    {
      "type": "paragraph",
      "id": "71974ed438b7cf07",
      "text": "[[Elm]] can be used either as a replacement for in-browser JavaScript code or as a complement to it. "
    },
    {
      "type": "paragraph",
      "id": "9b291c09c04ea7e5",
      "text": "You write some .elm files, run them through Elm's compiler, and end up with plain old .js files that the browser runs as it normally would. If you have separate stylesheets that you use alongside JavaScript, they'll work the same way alongside Elm."
    },
    {
      "type": "html",
      "id": "7cb19f348ce8fc48",
      "text": "<center><img width=100% src=\"https://drek4537l1klr.cloudfront.net/rfeldman/Figures/fig1-1_alt.jpg\" alt=\"Figure 1.1. Elm files are compiled to plain old JavaScript files.\"></center>"
    },
    {
      "type": "markdown",
      "id": "aca420d60742043f",
      "text": "# Assets"
    },
    {
      "type": "paragraph",
      "id": "ea0e993846492343",
      "text": "See [[Lineup Based Signaling]] Between Frames, the [[Fedwiki Assets Folder]], and the [[Assets Plugin]], which offer links to those assets."
    },
    {
      "type": "markdown",
      "id": "cce193736b231b14",
      "text": "1. Add paragraph\n1. Choose a Plugin > `Assets`\n1. Type anything, e.g., the letter `f`\n"
    },
    {
      "type": "assets",
      "id": "27dafc4236ec4918",
      "text": "f"
    },
    {
      "type": "markdown",
      "id": "307b4b925446f4d0",
      "text": "1. On localhost, make a new directory called, e.g., `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`).\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
    },
    {
      "type": "code",
      "id": "0feca81e60f0542e",
      "text": "module Main exposing (..)\n\nimport Html exposing (text)\n\n\nmain =\n  text \"Hello!\"\n"
    },
    {
      "type": "markdown",
      "id": "a51783d54f4b3869",
      "text": "## Compile to JavaScript\n"
    },
    {
      "type": "code",
      "id": "f3bc72e2fbd466b8",
      "text": "elm make src/Main.elm --output app.js"
    },
    {
      "type": "markdown",
      "id": "1c633dcf5ada1aa6",
      "text": "## index.html"
    },
    {
      "type": "paragraph",
      "id": "01400b861b470d35",
      "text": "Put the following content inside it:"
    },
    {
      "type": "code",
      "id": "cdc966021909da1f",
      "text": "<!doctype html>\n<html>\n    <head>\n        <script>\n        </script>\n    </head>\n\n    <body>\n        <div id=\"app\"></div>\n\n        <script src=\"app.js\"></script>\n        <script>\n         var app = Elm.Main.init({node: document.getElementById(\"app\")});\n        </script>\n    </body>\n</html>"
    },
    {
      "type": "markdown",
      "id": "3a9ce5d9b497bb10",
      "text": "Upload `app.js` and `index.html` to Assets (see above).\n\n# Frame"
    },
    {
      "type": "markdown",
      "id": "fba4c3b73da1a887",
      "text": "Add paragraph, choose a `Frame` plugin and type, e.g., `https://wiki.ralfbarkow.ch/assets/f/index.html`"
    },
    {
      "type": "frame",
      "id": "2188c894e703af22",
      "text": "https://wiki.ralfbarkow.ch/assets/f/index.html"
    },
    {
      "type": "pagefold",
      "id": "cbfbdecd759595b5",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "5c8e41888f55198a",
      "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163794502144600ipbPW:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
    },
    {
      "type": "markdown",
      "id": "b0de6f6b140d4f83",
      "text": "> I think Elm could fit nicely into a Frame and that a small port shim could encourage its use. Our Frame plugin interacts with the rest of wiki through [[messaging]] similar to but much simpler than the way Electron talks to the host window system. I'm pretty addicted to bare ES6 after years of building CoffeeScript but if Elm brings something to the environment I'm happy to see it.\nhttps://www.reddit.com/r/elm/comments/97gm4n/elm_electron/e4970b9/?utm_source=reddit&utm_medium=web2x&context=3\n\n"
    },
    {
      "type": "markdown",
      "id": "1defbf4aedf3aff7",
      "text": "[[Paul Rodwell]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163799549664908GgARx:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]\n> The frame runs in a sandbox that restricts what can be done. The settings are 'allow-scripts allow-downloads allow-forms', see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n"
    },
    {
      "type": "pagefold",
      "id": "e6458a0a34d64603",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "3022f6c9807114fc",
      "text": "Sandboxing with elm [https://discourse.elm-lang.org/t/sandboxing-with-elm/1218 discourse]"
    },
    {
      "type": "markdown",
      "id": "d22c02d0fa76ddf0",
      "text": "> Something exotic would be to create an iframe via JS that loads another app.\n>\n> You can indeed de-/serialize your whole state and put that through a port."
    },
    {
      "type": "markdown",
      "id": "5b016f543bb32221",
      "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]\n* [[Wiki API]]\n> # My wiki talks to your wiki\n> […] This would enable web pages to embed wiki as an iFrame, or wiki to communicate to or be communicated with other apps in browser tabs or wasm components.\n* [[Frame Asset Interop]]"
    },
    {
      "type": "html",
      "id": "a073530bb1adb29a",
      "text": "<img"
    },
    {
      "type": "html",
      "id": "a586a0a3b780a768",
      "text": "<!doctype html>\n<html>\n    <head>\n        <script>\n        </script>\n    </head>\n\n    <body>\n        <div id=\"app\"></div>\n\n        <script src=\"app.js\"></script>\n        <script>\n         var app = Elm.Main.init({node: document.getElementById(\"app\")});\n        </script>\n    </body>\n</html>\n"
    },
    {
      "type": "factory",
      "id": "4aeeb8ec8a4ff920"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "How Elm Fits In",
        "story": []
      },
      "date": 1637419692037
    },
    {
      "item": {
        "type": "factory",
        "id": "71974ed438b7cf07"
      },
      "id": "71974ed438b7cf07",
      "type": "add",
      "date": 1637419696059
    },
    {
      "type": "edit",
      "id": "71974ed438b7cf07",
      "item": {
        "type": "paragraph",
        "id": "71974ed438b7cf07",
        "text": "[[Elm]] can be used either as a replacement for in-browser JavaScript code or as a complement to it. You write some .elm files, run them through Elm's compiler, and end up with plain old .js files that the browser runs as it normally would. If you have separate stylesheets that you use alongside JavaScript, they'll work the same way alongside Elm."
      },
      "date": 1637419817587
    },
    {
      "item": {
        "type": "factory",
        "id": "25ec3526a327321a"
      },
      "id": "25ec3526a327321a",
      "type": "add",
      "after": "71974ed438b7cf07",
      "date": 1637419857674
    },
    {
      "type": "remove",
      "id": "25ec3526a327321a",
      "date": 1637419872761
    },
    {
      "item": {
        "type": "factory",
        "id": "ea0e993846492343"
      },
      "id": "ea0e993846492343",
      "type": "add",
      "after": "71974ed438b7cf07",
      "date": 1637419876094
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "[[Assets]] ?"
      },
      "date": 1637419891227
    },
    {
      "item": {
        "type": "factory",
        "id": "27dafc4236ec4918"
      },
      "id": "27dafc4236ec4918",
      "type": "add",
      "after": "ea0e993846492343",
      "date": 1637419906966
    },
    {
      "type": "edit",
      "id": "27dafc4236ec4918",
      "item": {
        "type": "assets",
        "id": "27dafc4236ec4918",
        "text": "f"
      },
      "date": 1637419911702
    },
    {
      "item": {
        "type": "factory",
        "id": "7062ad4568a388d5"
      },
      "id": "7062ad4568a388d5",
      "type": "add",
      "after": "27dafc4236ec4918",
      "date": 1637419917374
    },
    {
      "type": "remove",
      "id": "7062ad4568a388d5",
      "date": 1637419919383
    },
    {
      "item": {
        "type": "factory",
        "id": "cce193736b231b14"
      },
      "id": "cce193736b231b14",
      "type": "add",
      "after": "27dafc4236ec4918",
      "date": 1637419933958
    },
    {
      "type": "edit",
      "id": "cce193736b231b14",
      "item": {
        "type": "markdown",
        "id": "cce193736b231b14",
        "text": "1. Add paragraph\n1. Choose Assets plugin\n"
      },
      "date": 1637419977256
    },
    {
      "type": "edit",
      "id": "cce193736b231b14",
      "item": {
        "type": "markdown",
        "id": "cce193736b231b14",
        "text": "1. add paragraph\n1. Choose Assets plugin\n"
      },
      "date": 1637419986256
    },
    {
      "item": {
        "type": "factory",
        "id": "2f90431548fa6827"
      },
      "id": "2f90431548fa6827",
      "type": "add",
      "after": "cce193736b231b14",
      "date": 1637419988229
    },
    {
      "type": "edit",
      "id": "cce193736b231b14",
      "item": {
        "type": "markdown",
        "id": "cce193736b231b14",
        "text": "1. add paragraph\n1. Choose a Plugin > Assets\n"
      },
      "date": 1637420017292
    },
    {
      "id": "27dafc4236ec4918",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "2f90431548fa6827"
      ],
      "date": 1637420022678
    },
    {
      "type": "edit",
      "id": "2f90431548fa6827",
      "item": {
        "type": "assets",
        "id": "2f90431548fa6827",
        "text": "f"
      },
      "date": 1637420029288
    },
    {
      "item": {
        "type": "factory",
        "id": "0ae9a9419e52c657"
      },
      "id": "0ae9a9419e52c657",
      "type": "add",
      "after": "2f90431548fa6827",
      "date": 1637420040430
    },
    {
      "type": "remove",
      "id": "0ae9a9419e52c657",
      "date": 1637420041860
    },
    {
      "type": "edit",
      "id": "cce193736b231b14",
      "item": {
        "type": "markdown",
        "id": "cce193736b231b14",
        "text": "1. add paragraph\n1. Choose a Plugin > Assets\n1. type anything, for example the letter `f`\n"
      },
      "date": 1637420115447
    },
    {
      "type": "remove",
      "id": "2f90431548fa6827",
      "date": 1637420118840
    },
    {
      "item": {
        "type": "factory",
        "id": "307b4b925446f4d0"
      },
      "id": "307b4b925446f4d0",
      "type": "add",
      "after": "27dafc4236ec4918",
      "date": 1637420308794
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`"
      },
      "date": 1637420376159
    },
    {
      "item": {
        "type": "factory",
        "id": "3022f6c9807114fc"
      },
      "id": "3022f6c9807114fc",
      "type": "add",
      "after": "307b4b925446f4d0",
      "date": 1637420421674
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read Creating an Elm project [page]"
      },
      "date": 1637420443475
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read Creating an Elm project [Creating an Elm project page]"
      },
      "date": 1637420456878
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [Creating an Elm project page]"
      },
      "date": 1637420472614
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]"
      },
      "date": 1637420481723
    },
    {
      "item": {
        "type": "factory",
        "id": "e6458a0a34d64603"
      },
      "id": "e6458a0a34d64603",
      "type": "add",
      "after": "3022f6c9807114fc",
      "date": 1637420649834
    },
    {
      "type": "edit",
      "id": "e6458a0a34d64603",
      "item": {
        "type": "pagefold",
        "id": "e6458a0a34d64603",
        "text": "~"
      },
      "date": 1637420655847
    },
    {
      "id": "3022f6c9807114fc",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "e6458a0a34d64603",
        "3022f6c9807114fc"
      ],
      "date": 1637420658134
    },
    {
      "type": "edit",
      "id": "3022f6c9807114fc",
      "item": {
        "type": "paragraph",
        "id": "3022f6c9807114fc",
        "text": "Sandboxing with elm [page]"
      },
      "date": 1637420667490
    },
    {
      "type": "edit",
      "id": "3022f6c9807114fc",
      "item": {
        "type": "paragraph",
        "id": "3022f6c9807114fc",
        "text": "Sandboxing with elm [https://discourse.elm-lang.org/t/sandboxing-with-elm/1218 page]"
      },
      "date": 1637420673487
    },
    {
      "item": {
        "type": "code",
        "id": "0feca81e60f0542e",
        "text": "module Main exposing (..)\n\nimport Html exposing (text)\n\n\nmain =\n  text \"Hello!\"\n"
      },
      "id": "0feca81e60f0542e",
      "type": "add",
      "after": "3022f6c9807114fc",
      "date": 1637421915020
    },
    {
      "type": "edit",
      "id": "0feca81e60f0542e",
      "item": {
        "type": "code",
        "id": "0feca81e60f0542e",
        "text": "module Main exposing (..)\n\nimport Html exposing (text)\n\n\nmain =\n  text \"Hello!\"\n"
      },
      "date": 1637421918432
    },
    {
      "id": "0feca81e60f0542e",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "e6458a0a34d64603",
        "3022f6c9807114fc"
      ],
      "date": 1637421920704
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637421987708
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637422002386
    },
    {
      "item": {
        "type": "paragraph",
        "id": "007af81800213a70",
        "text": "Compiling to JavaScript"
      },
      "id": "007af81800213a70",
      "type": "add",
      "after": "3022f6c9807114fc",
      "date": 1637422173034
    },
    {
      "type": "edit",
      "id": "007af81800213a70",
      "item": {
        "type": "paragraph",
        "id": "007af81800213a70",
        "text": "Compiling to JavaScript"
      },
      "date": 1637422184832
    },
    {
      "id": "007af81800213a70",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "007af81800213a70",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "b1e82473e59f7024"
      ],
      "date": 1637422187253,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1637422192622
    },
    {
      "type": "add",
      "id": "0f4479b897e88e24",
      "item": {
        "type": "paragraph",
        "id": "0f4479b897e88e24",
        "text": "elm make src/Main.elm --output app.js"
      },
      "after": "007af81800213a70",
      "date": 1637422223213
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637422269403
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637422287663
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n  Let's create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`) and put the following content inside it.\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637422373650
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n  Let's create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`) and put the following content inside it, and upload it to the Assets above.\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637422496839
    },
    {
      "type": "add",
      "id": "895a884e37a594c6",
      "item": {
        "type": "paragraph",
        "id": "895a884e37a594c6",
        "text": "Upload app.js to Assets"
      },
      "after": "0f4479b897e88e24",
      "date": 1637422535947
    },
    {
      "type": "add",
      "id": "4956aff983c6bcc5",
      "item": {
        "type": "paragraph",
        "id": "4956aff983c6bcc5",
        "text": "index.html"
      },
      "after": "0feca81e60f0542e",
      "date": 1637423862536
    },
    {
      "item": {
        "type": "factory",
        "id": "cdc966021909da1f"
      },
      "id": "cdc966021909da1f",
      "type": "add",
      "after": "3022f6c9807114fc",
      "date": 1637423869509
    },
    {
      "type": "edit",
      "id": "cdc966021909da1f",
      "item": {
        "type": "code",
        "id": "cdc966021909da1f",
        "text": "\n         var app = Elm.Main.init({node: document.getElementById(\"app\")});\n        "
      },
      "date": 1637423873546
    },
    {
      "id": "cdc966021909da1f",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "4956aff983c6bcc5",
        "cdc966021909da1f",
        "007af81800213a70",
        "0f4479b897e88e24",
        "895a884e37a594c6",
        "e6458a0a34d64603",
        "3022f6c9807114fc"
      ],
      "date": 1637423879922
    },
    {
      "type": "edit",
      "id": "cdc966021909da1f",
      "item": {
        "type": "code",
        "id": "cdc966021909da1f",
        "text": "<!doctype html>\n<html>\n    <head>\n        <script>\n        </script>\n    </head>\n\n    <body>\n        <div id=\"app\"></div>\n\n        <script src=\"app.js\"></script>\n        <script>\n         var app = Elm.Main.init({node: document.getElementById(\"app\")});\n        </script>\n    </body>\n</html>"
      },
      "date": 1637423902998
    },
    {
      "id": "007af81800213a70",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "007af81800213a70",
        "4956aff983c6bcc5",
        "cdc966021909da1f",
        "0f4479b897e88e24",
        "895a884e37a594c6",
        "e6458a0a34d64603",
        "3022f6c9807114fc"
      ],
      "date": 1637423943068
    },
    {
      "id": "0f4479b897e88e24",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "007af81800213a70",
        "0f4479b897e88e24",
        "4956aff983c6bcc5",
        "cdc966021909da1f",
        "895a884e37a594c6",
        "e6458a0a34d64603",
        "3022f6c9807114fc"
      ],
      "date": 1637423947168
    },
    {
      "type": "edit",
      "id": "0f4479b897e88e24",
      "item": {
        "type": "paragraph",
        "id": "0f4479b897e88e24",
        "text": "`elm make src/Main.elm --output app.js`"
      },
      "date": 1637423957991
    },
    {
      "item": {
        "type": "factory",
        "id": "3ba9276913f0f378"
      },
      "id": "3ba9276913f0f378",
      "type": "add",
      "after": "3022f6c9807114fc",
      "date": 1637423964554
    },
    {
      "type": "edit",
      "id": "3ba9276913f0f378",
      "item": {
        "type": "markdown",
        "id": "3ba9276913f0f378",
        "text": "elm"
      },
      "date": 1637423967924
    },
    {
      "id": "3ba9276913f0f378",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "007af81800213a70",
        "3ba9276913f0f378",
        "0f4479b897e88e24",
        "4956aff983c6bcc5",
        "cdc966021909da1f",
        "895a884e37a594c6",
        "e6458a0a34d64603",
        "3022f6c9807114fc"
      ],
      "date": 1637423971715
    },
    {
      "type": "remove",
      "id": "0f4479b897e88e24",
      "date": 1637423974337
    },
    {
      "type": "edit",
      "id": "3ba9276913f0f378",
      "item": {
        "type": "markdown",
        "id": "3ba9276913f0f378",
        "text": "`elm make src/Main.elm --output app.js`"
      },
      "date": 1637423975385
    },
    {
      "item": {
        "type": "factory",
        "id": "d22c02d0fa76ddf0"
      },
      "id": "d22c02d0fa76ddf0",
      "type": "add",
      "after": "3022f6c9807114fc",
      "date": 1637424069555
    },
    {
      "type": "edit",
      "id": "d22c02d0fa76ddf0",
      "item": {
        "type": "markdown",
        "id": "d22c02d0fa76ddf0",
        "text": "> Something exotic would be to create an iframe via JS that loads another app."
      },
      "date": 1637424073504
    },
    {
      "type": "edit",
      "id": "895a884e37a594c6",
      "item": {
        "type": "paragraph",
        "id": "895a884e37a594c6",
        "text": "Upload `app.js` to Assets"
      },
      "date": 1637427839768
    },
    {
      "item": {
        "type": "factory",
        "id": "3a9ce5d9b497bb10"
      },
      "id": "3a9ce5d9b497bb10",
      "type": "add",
      "after": "d22c02d0fa76ddf0",
      "date": 1637427844586
    },
    {
      "type": "remove",
      "id": "895a884e37a594c6",
      "date": 1637427853605
    },
    {
      "type": "edit",
      "id": "3a9ce5d9b497bb10",
      "item": {
        "type": "markdown",
        "id": "3a9ce5d9b497bb10",
        "text": "Upload `app.js` to Assets"
      },
      "date": 1637427854777
    },
    {
      "id": "3a9ce5d9b497bb10",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "007af81800213a70",
        "3ba9276913f0f378",
        "4956aff983c6bcc5",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0"
      ],
      "date": 1637427857455
    },
    {
      "type": "edit",
      "id": "3a9ce5d9b497bb10",
      "item": {
        "type": "markdown",
        "id": "3a9ce5d9b497bb10",
        "text": "Upload `app.js` and `index.html` to Assets."
      },
      "date": 1637427899950
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n  Let's create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`) and put the following content inside it.\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637427923463
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n  Let's create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`).\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637427992874
    },
    {
      "type": "add",
      "id": "01400b861b470d35",
      "item": {
        "type": "paragraph",
        "id": "01400b861b470d35",
        "text": "Put the following content inside it:"
      },
      "after": "4956aff983c6bcc5",
      "date": 1637428002420
    },
    {
      "type": "edit",
      "id": "007af81800213a70",
      "item": {
        "type": "paragraph",
        "id": "007af81800213a70",
        "text": "## Compiling to JavaScript"
      },
      "date": 1637428006417
    },
    {
      "item": {
        "type": "factory",
        "id": "a51783d54f4b3869"
      },
      "id": "a51783d54f4b3869",
      "type": "add",
      "after": "d22c02d0fa76ddf0",
      "date": 1637428011737
    },
    {
      "type": "edit",
      "id": "a51783d54f4b3869",
      "item": {
        "type": "markdown",
        "id": "a51783d54f4b3869",
        "text": "##  c"
      },
      "date": 1637428016838
    },
    {
      "id": "a51783d54f4b3869",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "007af81800213a70",
        "3ba9276913f0f378",
        "4956aff983c6bcc5",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0"
      ],
      "date": 1637428021823
    },
    {
      "type": "remove",
      "id": "007af81800213a70",
      "date": 1637428026517
    },
    {
      "type": "edit",
      "id": "a51783d54f4b3869",
      "item": {
        "type": "markdown",
        "id": "a51783d54f4b3869",
        "text": "## Compiling to JavaScript"
      },
      "date": 1637428028500
    },
    {
      "type": "edit",
      "id": "a51783d54f4b3869",
      "item": {
        "type": "markdown",
        "id": "a51783d54f4b3869",
        "text": "## Compiling to JavaScript\n"
      },
      "date": 1637428036487
    },
    {
      "type": "add",
      "id": "1c633dcf5ada1aa6",
      "item": {
        "type": "markdown",
        "id": "1c633dcf5ada1aa6",
        "text": "## index.html"
      },
      "after": "a51783d54f4b3869",
      "date": 1637428047231
    },
    {
      "id": "1c633dcf5ada1aa6",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "3ba9276913f0f378",
        "4956aff983c6bcc5",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0"
      ],
      "date": 1637428049348
    },
    {
      "type": "remove",
      "id": "4956aff983c6bcc5",
      "date": 1637428052527
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called, e.g., `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n  Let's create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`).\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637428094677
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called, e.g., `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file:\n  Let's create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`).\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637428140354
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On your localhost/pc/laptop, make a new directory called, e.g., `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n  Let's create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`).\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1637428160045
    },
    {
      "type": "edit",
      "id": "3a9ce5d9b497bb10",
      "item": {
        "type": "markdown",
        "id": "3a9ce5d9b497bb10",
        "text": "Upload `app.js` and `index.html` to Assets (see above)."
      },
      "date": 1637428212417
    },
    {
      "item": {
        "type": "factory",
        "id": "5b016f543bb32221"
      },
      "id": "5b016f543bb32221",
      "type": "add",
      "after": "d22c02d0fa76ddf0",
      "date": 1637428405861
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]"
      },
      "date": 1637428425778
    },
    {
      "item": {
        "type": "factory",
        "id": "a073530bb1adb29a"
      },
      "id": "a073530bb1adb29a",
      "type": "add",
      "after": "5b016f543bb32221",
      "date": 1637496628586
    },
    {
      "type": "edit",
      "id": "a073530bb1adb29a",
      "item": {
        "type": "html",
        "id": "a073530bb1adb29a",
        "text": "<img"
      },
      "date": 1637496635631
    },
    {
      "item": {
        "type": "factory",
        "id": "7cb19f348ce8fc48"
      },
      "id": "7cb19f348ce8fc48",
      "type": "add",
      "after": "a073530bb1adb29a",
      "date": 1637496664684
    },
    {
      "type": "edit",
      "id": "7cb19f348ce8fc48",
      "item": {
        "type": "html",
        "id": "7cb19f348ce8fc48",
        "text": "<img src=\"https://drek4537l1klr.cloudfront.net/rfeldman/Figures/fig1-1_alt.jpg\">"
      },
      "date": 1637496674153
    },
    {
      "id": "7cb19f348ce8fc48",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "7cb19f348ce8fc48",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "3ba9276913f0f378",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a"
      ],
      "date": 1637496680748
    },
    {
      "type": "edit",
      "id": "7cb19f348ce8fc48",
      "item": {
        "type": "html",
        "id": "7cb19f348ce8fc48",
        "text": "<img src=\"https://drek4537l1klr.cloudfront.net/rfeldman/Figures/fig1-1_alt.jpg\" alt=\"Figure 1.1>"
      },
      "date": 1637496740827
    },
    {
      "type": "edit",
      "id": "7cb19f348ce8fc48",
      "item": {
        "type": "html",
        "id": "7cb19f348ce8fc48",
        "text": "<img src=\"https://drek4537l1klr.cloudfront.net/rfeldman/Figures/fig1-1_alt.jpg\" alt=\"Figure 1.1. Elm files are compiled to plain old JavaScript files.\">"
      },
      "date": 1637496759957
    },
    {
      "type": "edit",
      "id": "7cb19f348ce8fc48",
      "item": {
        "type": "html",
        "id": "7cb19f348ce8fc48",
        "text": "<center><img width=100% src=\"https://drek4537l1klr.cloudfront.net/rfeldman/Figures/fig1-1_alt.jpg\" alt=\"Figure 1.1. Elm files are compiled to plain old JavaScript files.\"></center>"
      },
      "date": 1637497005863
    },
    {
      "type": "edit",
      "id": "7cb19f348ce8fc48",
      "item": {
        "type": "html",
        "id": "7cb19f348ce8fc48",
        "text": "<center><img width=100% src=\"https://drek4537l1klr.cloudfront.net/rfeldman/Figures/fig1-1_alt.jpg\" alt=\"Figure 1.1. Elm files are compiled to plain old JavaScript files.\"></center>"
      },
      "date": 1637497018032
    },
    {
      "type": "edit",
      "id": "71974ed438b7cf07",
      "item": {
        "type": "paragraph",
        "id": "71974ed438b7cf07",
        "text": "[[Elm]] can be used either as a replacement for in-browser JavaScript code or as a complement to it. "
      },
      "date": 1637497069888
    },
    {
      "id": "7cb19f348ce8fc48",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "7cb19f348ce8fc48",
        "9b291c09c04ea7e5",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "3ba9276913f0f378",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a"
      ],
      "date": 1637497073186,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "9b291c09c04ea7e5",
      "item": {
        "type": "paragraph",
        "id": "9b291c09c04ea7e5",
        "text": "You write some .elm files, run them through Elm's compiler, and end up with plain old .js files that the browser runs as it normally would. If you have separate stylesheets that you use alongside JavaScript, they'll work the same way alongside Elm."
      },
      "after": "71974ed438b7cf07",
      "date": 1637497078050
    },
    {
      "type": "fork",
      "date": 1637497078992
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]"
      },
      "date": 1637497306984
    },
    {
      "type": "edit",
      "id": "d22c02d0fa76ddf0",
      "item": {
        "type": "markdown",
        "id": "d22c02d0fa76ddf0",
        "text": "> Something exotic would be to create an iframe via JS that loads another app.\n>\n> You can indeed de-/serialize your whole state and put that through a port."
      },
      "date": 1637498490191
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "[[Assets]] ? / Lineup Based Signaling Between Frames"
      },
      "date": 1637587932283
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "[[Assets]] ? / [[Lineup Based Signaling Between Frames]]"
      },
      "date": 1637587961338
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "[[Assets]] ? / [[Lineup Based Signaling]] Between Frames"
      },
      "date": 1637587978681
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "[[Assets]] and [[Lineup Based Signaling]] Between Frames"
      },
      "date": 1637588127900
    },
    {
      "item": {
        "type": "factory",
        "id": "aca420d60742043f"
      },
      "id": "aca420d60742043f",
      "type": "add",
      "after": "a073530bb1adb29a",
      "date": 1637589029734
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "See [[Assets]] and [[Lineup Based Signaling]] Between Frames"
      },
      "date": 1637589031715
    },
    {
      "type": "edit",
      "id": "aca420d60742043f",
      "item": {
        "type": "markdown",
        "id": "aca420d60742043f",
        "text": "# Assets"
      },
      "date": 1637589035871
    },
    {
      "id": "aca420d60742043f",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "9b291c09c04ea7e5",
        "7cb19f348ce8fc48",
        "ea0e993846492343",
        "aca420d60742043f",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "3ba9276913f0f378",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a"
      ],
      "date": 1637589041353
    },
    {
      "id": "ea0e993846492343",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "9b291c09c04ea7e5",
        "7cb19f348ce8fc48",
        "aca420d60742043f",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "3ba9276913f0f378",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a"
      ],
      "date": 1637589051477
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "See [[Fedwiki Assets Folder]] and [[Lineup Based Signaling]] Between Frames"
      },
      "date": 1637589200822
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "See [[Lineup Based Signaling]] Between Frames and [[Fedwiki Assets Folder]]"
      },
      "date": 1637589216732
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "See [[Lineup Based Signaling]] Between Frames, the [[Fedwiki Assets Folder]], and the [[Assets Plugin]]"
      },
      "date": 1637589312221
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "See [[Lineup Based Signaling]] Between Frames, the [[Fedwiki Assets Folder]], and the [[Assets Plugin]], offer links to those assets"
      },
      "date": 1637589340796
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "See [[Lineup Based Signaling]] Between Frames, the [[Fedwiki Assets Folder]], and the [[Assets Plugin]], which offer links to those assets"
      },
      "date": 1637589478159
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]\n* [[Wiki API]]\n> "
      },
      "date": 1637589903616
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]\n* [[Wiki API]]\n> # My wiki talks to your wiki"
      },
      "date": 1637589936556
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]\n* [[Wiki API]]\n> # My wiki talks to your wiki\n> […] "
      },
      "date": 1637589952616
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]\n* [[Wiki API]]\n> # My wiki talks to your wiki\n> […] This would enable web pages to embed wiki as an iFrame, or wiki to communicate to or be communicated with other apps in browser tabs or wasm components."
      },
      "date": 1637589961139
    },
    {
      "item": {
        "type": "factory",
        "id": "a586a0a3b780a768"
      },
      "id": "a586a0a3b780a768",
      "type": "add",
      "after": "a073530bb1adb29a",
      "date": 1637917302628
    },
    {
      "type": "edit",
      "id": "a586a0a3b780a768",
      "item": {
        "type": "html",
        "id": "a586a0a3b780a768",
        "text": "<!doctype html>\n<html>\n    <head>\n        <script>\n        </script>\n    </head>\n\n    <body>\n        <div id=\"app\"></div>\n\n        <script src=\"app.js\"></script>\n        <script>\n         var app = Elm.Main.init({node: document.getElementById(\"app\")});\n        </script>\n    </body>\n</html>\n"
      },
      "date": 1637917305266
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]\n* [[Wiki API]]\n> # My wiki talks to your wiki\n> […] This would enable web pages to embed wiki as an iFrame, or wiki to communicate to or be communicated with other apps in browser tabs or wasm components.\n* [[Frame Asset Interpol]]"
      },
      "date": 1637945025133
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]\n* [[Wiki API]]\n> # My wiki talks to your wiki\n> […] This would enable web pages to embed wiki as an iFrame, or wiki to communicate to or be communicated with other apps in browser tabs or wasm components.\n* [[Frame Asset Interops]]"
      },
      "date": 1637945034206
    },
    {
      "type": "edit",
      "id": "5b016f543bb32221",
      "item": {
        "type": "markdown",
        "id": "5b016f543bb32221",
        "text": "# See also\n* [[Framed]]\n* [[Plugin-Based Reusable UI]]\n* [[Wiki API]]\n> # My wiki talks to your wiki\n> […] This would enable web pages to embed wiki as an iFrame, or wiki to communicate to or be communicated with other apps in browser tabs or wasm components.\n* [[Frame Asset Interop]]"
      },
      "date": 1637945040867
    },
    {
      "item": {
        "type": "factory",
        "id": "4871d9eaaa948993"
      },
      "id": "4871d9eaaa948993",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1637980395005
    },
    {
      "type": "remove",
      "id": "4871d9eaaa948993",
      "date": 1637980404026
    },
    {
      "item": {
        "type": "factory",
        "id": "2188c894e703af22"
      },
      "id": "2188c894e703af22",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1637980416004
    },
    {
      "type": "edit",
      "id": "2188c894e703af22",
      "item": {
        "type": "frame",
        "id": "2188c894e703af22",
        "text": "https://wiki.ralfbarkow.ch"
      },
      "date": 1637980435269
    },
    {
      "id": "2188c894e703af22",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "9b291c09c04ea7e5",
        "7cb19f348ce8fc48",
        "aca420d60742043f",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "3ba9276913f0f378",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "2188c894e703af22",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a",
        "a586a0a3b780a768"
      ],
      "date": 1637980448410
    },
    {
      "type": "edit",
      "id": "2188c894e703af22",
      "item": {
        "type": "frame",
        "id": "2188c894e703af22",
        "text": "https://wiki.ralfbarkow.ch/assets/f/index.html"
      },
      "date": 1637980529361
    },
    {
      "type": "edit",
      "id": "3a9ce5d9b497bb10",
      "item": {
        "type": "markdown",
        "id": "3a9ce5d9b497bb10",
        "text": "Upload `app.js` and `index.html` to Assets (see above).\n"
      },
      "date": 1637980573440
    },
    {
      "item": {
        "type": "factory",
        "id": "8eca80b9c1162c6b"
      },
      "id": "8eca80b9c1162c6b",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1637980581013
    },
    {
      "type": "add",
      "id": "fba4c3b73da1a887",
      "item": {
        "type": "markdown",
        "id": "fba4c3b73da1a887",
        "text": "Add paragraph and choose a `Frame` plugin"
      },
      "after": "3a9ce5d9b497bb10",
      "date": 1637980622507
    },
    {
      "type": "remove",
      "id": "8eca80b9c1162c6b",
      "date": 1637980649018
    },
    {
      "type": "edit",
      "id": "fba4c3b73da1a887",
      "item": {
        "type": "markdown",
        "id": "fba4c3b73da1a887",
        "text": "Add paragraph and choose a `Frame` plugin and enter ´https://wiki.ralfbarkow.ch/assets/f/index.html`"
      },
      "date": 1637980679092
    },
    {
      "type": "edit",
      "id": "fba4c3b73da1a887",
      "item": {
        "type": "markdown",
        "id": "fba4c3b73da1a887",
        "text": "Add paragraph and choose a `Frame` plugin and enter `https://wiki.ralfbarkow.ch/assets/f/index.html`"
      },
      "date": 1637980704868
    },
    {
      "type": "edit",
      "id": "fba4c3b73da1a887",
      "item": {
        "type": "markdown",
        "id": "fba4c3b73da1a887",
        "text": "Add paragraph, choose a `Frame` plugin and enter `https://wiki.ralfbarkow.ch/assets/f/index.html`"
      },
      "date": 1637980728021
    },
    {
      "item": {
        "type": "factory",
        "id": "494d8ddef91f648b"
      },
      "id": "494d8ddef91f648b",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1637980759897
    },
    {
      "type": "edit",
      "id": "cce193736b231b14",
      "item": {
        "type": "markdown",
        "id": "cce193736b231b14",
        "text": "1. add paragraph\n1. Choose a Plugin > `Assets`\n1. type anything, for example the letter `f`\n"
      },
      "date": 1637980772680
    },
    {
      "type": "edit",
      "id": "cce193736b231b14",
      "item": {
        "type": "markdown",
        "id": "cce193736b231b14",
        "text": "1. add paragraph\n1. Choose a Plugin > Assets\n1. type anything, e.g., the letter `f`\n"
      },
      "date": 1637981104206
    },
    {
      "type": "edit",
      "id": "fba4c3b73da1a887",
      "item": {
        "type": "markdown",
        "id": "fba4c3b73da1a887",
        "text": "Add paragraph, choose a `Frame` plugin and tymm\n"
      },
      "date": 1637981182731
    },
    {
      "type": "edit",
      "id": "fba4c3b73da1a887",
      "item": {
        "type": "markdown",
        "id": "fba4c3b73da1a887",
        "text": "Add paragraph, choose a `Frame` plugin and type `https://wiki.ralfbarkow.ch/assets/f/index.html`"
      },
      "date": 1637981188087
    },
    {
      "type": "remove",
      "id": "494d8ddef91f648b",
      "date": 1637981269787
    },
    {
      "item": {
        "type": "factory",
        "id": "5c8e41888f55198a"
      },
      "id": "5c8e41888f55198a",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1637982271472
    },
    {
      "type": "edit",
      "id": "5c8e41888f55198a",
      "item": {
        "type": "paragraph",
        "id": "5c8e41888f55198a",
        "text": "[[Ward]] via [matrix]"
      },
      "date": 1637982289621
    },
    {
      "type": "add",
      "id": "b0de6f6b140d4f83",
      "item": {
        "type": "paragraph",
        "id": "b0de6f6b140d4f83",
        "text": "> I think Elm could fit nicely into a Frame and that a small port shim could encourage its use. Our Frame plugin interacts with the rest of wiki through messaging similar to but much simpler than the way Electron talks to the host window system. I'm pretty addicted to bare ES6 after years of building CoffeeScript but if Elm brings something to the environment I'm happy to see it.\n"
      },
      "after": "5c8e41888f55198a",
      "date": 1637982299537
    },
    {
      "type": "edit",
      "id": "b0de6f6b140d4f83",
      "item": {
        "type": "markdown",
        "id": "b0de6f6b140d4f83",
        "text": "> I think Elm could fit nicely into a Frame and that a small port shim could encourage its use. Our Frame plugin interacts with the rest of wiki through messaging similar to but much simpler than the way Electron talks to the host window system. I'm pretty addicted to bare ES6 after years of building CoffeeScript but if Elm brings something to the environment I'm happy to see it.\n"
      },
      "date": 1637982300844
    },
    {
      "type": "edit",
      "id": "5c8e41888f55198a",
      "item": {
        "type": "paragraph",
        "id": "5c8e41888f55198a",
        "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163794502144600ipbPW:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
      },
      "date": 1637982314466
    },
    {
      "type": "edit",
      "id": "b0de6f6b140d4f83",
      "item": {
        "type": "markdown",
        "id": "b0de6f6b140d4f83",
        "text": "> I think Elm could fit nicely into a Frame and that a small port shim could encourage its use. Our Frame plugin interacts with the rest of wiki through messaging similar to but much simpler than the way Electron talks to the host window system. I'm pretty addicted to bare ES6 after years of building CoffeeScript but if Elm brings something to the environment I'm happy to see it.\nhttps://www.reddit.com/r/elm/comments/97gm4n/elm_electron/e4970b9/?utm_source=reddit&utm_medium=web2x&context=3\n"
      },
      "date": 1637982332405
    },
    {
      "id": "5c8e41888f55198a",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "9b291c09c04ea7e5",
        "7cb19f348ce8fc48",
        "aca420d60742043f",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "3ba9276913f0f378",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "fba4c3b73da1a887",
        "2188c894e703af22",
        "5c8e41888f55198a",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a",
        "a586a0a3b780a768",
        "b0de6f6b140d4f83"
      ],
      "date": 1637982613129
    },
    {
      "id": "b0de6f6b140d4f83",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "9b291c09c04ea7e5",
        "7cb19f348ce8fc48",
        "aca420d60742043f",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "3ba9276913f0f378",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "fba4c3b73da1a887",
        "2188c894e703af22",
        "5c8e41888f55198a",
        "b0de6f6b140d4f83",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a",
        "a586a0a3b780a768"
      ],
      "date": 1637982620964
    },
    {
      "type": "edit",
      "id": "cce193736b231b14",
      "item": {
        "type": "markdown",
        "id": "cce193736b231b14",
        "text": "1. add paragraph\n1. Choose a Plugin > `Assets`\n1. type anything, e.g., the letter `f`\n"
      },
      "date": 1637983978130
    },
    {
      "type": "edit",
      "id": "3022f6c9807114fc",
      "item": {
        "type": "paragraph",
        "id": "3022f6c9807114fc",
        "text": "Sandboxing with elm [https://discourse.elm-lang.org/t/sandboxing-with-elm/1218 discourse]"
      },
      "date": 1637984504179
    },
    {
      "type": "edit",
      "id": "a51783d54f4b3869",
      "item": {
        "type": "markdown",
        "id": "a51783d54f4b3869",
        "text": "## Compile to JavaScript\n"
      },
      "date": 1637984686996
    },
    {
      "type": "edit",
      "id": "fba4c3b73da1a887",
      "item": {
        "type": "markdown",
        "id": "fba4c3b73da1a887",
        "text": "Add paragraph, choose a `Frame` plugin and type, e.g., `https://wiki.ralfbarkow.ch/assets/f/index.html`"
      },
      "date": 1637984780895
    },
    {
      "type": "edit",
      "id": "3a9ce5d9b497bb10",
      "item": {
        "type": "markdown",
        "id": "3a9ce5d9b497bb10",
        "text": "Upload `app.js` and `index.html` to Assets (see above).\n\n# Frame"
      },
      "date": 1638010364197
    },
    {
      "item": {
        "type": "factory",
        "id": "952f7565d1db26a1"
      },
      "id": "952f7565d1db26a1",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1638010370510
    },
    {
      "type": "remove",
      "id": "952f7565d1db26a1",
      "date": 1638010384069
    },
    {
      "item": {
        "type": "factory",
        "id": "f3bc72e2fbd466b8"
      },
      "id": "f3bc72e2fbd466b8",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1638010537578
    },
    {
      "item": {
        "type": "factory",
        "id": "c2dba6dc28203c01"
      },
      "id": "c2dba6dc28203c01",
      "type": "add",
      "after": "f3bc72e2fbd466b8",
      "date": 1638010538553
    },
    {
      "type": "remove",
      "id": "3ba9276913f0f378",
      "date": 1638010541861
    },
    {
      "type": "edit",
      "id": "f3bc72e2fbd466b8",
      "item": {
        "type": "code",
        "id": "f3bc72e2fbd466b8",
        "text": "elm make src/Main.elm --output app.js"
      },
      "date": 1638010547832
    },
    {
      "id": "f3bc72e2fbd466b8",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "9b291c09c04ea7e5",
        "7cb19f348ce8fc48",
        "aca420d60742043f",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "f3bc72e2fbd466b8",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "fba4c3b73da1a887",
        "2188c894e703af22",
        "5c8e41888f55198a",
        "b0de6f6b140d4f83",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a",
        "a586a0a3b780a768",
        "c2dba6dc28203c01"
      ],
      "date": 1638010555646
    },
    {
      "type": "edit",
      "id": "b0de6f6b140d4f83",
      "item": {
        "type": "markdown",
        "id": "b0de6f6b140d4f83",
        "text": "> I think Elm could fit nicely into a Frame and that a small port shim could encourage its use. Our Frame plugin interacts with the rest of wiki through messaging similar to but much simpler than the way Electron talks to the host window system. I'm pretty addicted to bare ES6 after years of building CoffeeScript but if Elm brings something to the environment I'm happy to see it.\nhttps://www.reddit.com/r/elm/comments/97gm4n/elm_electron/e4970b9/?utm_source=reddit&utm_medium=web2x&context=3\n\n"
      },
      "date": 1638010946126
    },
    {
      "type": "add",
      "id": "1defbf4aedf3aff7",
      "item": {
        "type": "markdown",
        "id": "1defbf4aedf3aff7",
        "text": "Paul via [matrix]\n> The frame runs in a sandbox that restricts what can be done. The settings are 'allow-scripts allow-downloads allow-forms', see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n"
      },
      "after": "b0de6f6b140d4f83",
      "date": 1638010956378
    },
    {
      "type": "edit",
      "id": "1defbf4aedf3aff7",
      "item": {
        "type": "markdown",
        "id": "1defbf4aedf3aff7",
        "text": "Paul via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163799549664908GgARx:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]\n> The frame runs in a sandbox that restricts what can be done. The settings are 'allow-scripts allow-downloads allow-forms', see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n"
      },
      "date": 1638010972734
    },
    {
      "type": "remove",
      "id": "c2dba6dc28203c01",
      "date": 1638011102266
    },
    {
      "type": "edit",
      "id": "1defbf4aedf3aff7",
      "item": {
        "type": "markdown",
        "id": "1defbf4aedf3aff7",
        "text": "[[Paul Rodell]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163799549664908GgARx:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]\n> The frame runs in a sandbox that restricts what can be done. The settings are 'allow-scripts allow-downloads allow-forms', see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n"
      },
      "date": 1638011960545
    },
    {
      "type": "edit",
      "id": "1defbf4aedf3aff7",
      "item": {
        "type": "markdown",
        "id": "1defbf4aedf3aff7",
        "text": "[[Paul Rodwell]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163799549664908GgARx:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]\n> The frame runs in a sandbox that restricts what can be done. The settings are 'allow-scripts allow-downloads allow-forms', see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n"
      },
      "date": 1638011978456
    },
    {
      "type": "edit",
      "id": "ea0e993846492343",
      "item": {
        "type": "paragraph",
        "id": "ea0e993846492343",
        "text": "See [[Lineup Based Signaling]] Between Frames, the [[Fedwiki Assets Folder]], and the [[Assets Plugin]], which offer links to those assets."
      },
      "date": 1638014828602
    },
    {
      "type": "edit",
      "id": "cce193736b231b14",
      "item": {
        "type": "markdown",
        "id": "cce193736b231b14",
        "text": "1. Add paragraph\n1. Choose a Plugin > `Assets`\n1. Type anything, e.g., the letter `f`\n"
      },
      "date": 1638014845520
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On localhost, make a new directory called, e.g., `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a .html file\n  Let's create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`).\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1638014932506
    },
    {
      "type": "edit",
      "id": "307b4b925446f4d0",
      "item": {
        "type": "markdown",
        "id": "307b4b925446f4d0",
        "text": "1. On localhost, make a new directory called, e.g., `assets` and open it in a terminal.\n1. Run `elm init`\n1. Read *Creating an Elm project* [https://github.com/elm/compiler/blob/master/hints/init.md#creating-an-elm-project page]\n1. Create a file named `index.html` in the same directory as our `elm.json` file (the one where we ran `elm init`).\n1. In the `src`directory, create a file `Main.elm`with the following content (code):"
      },
      "date": 1638014976543
    },
    {
      "type": "fork",
      "date": 1638015032947
    },
    {
      "item": {
        "type": "factory",
        "id": "cbfbdecd759595b5"
      },
      "id": "cbfbdecd759595b5",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1638015103308
    },
    {
      "type": "edit",
      "id": "cbfbdecd759595b5",
      "item": {
        "type": "pagefold",
        "id": "cbfbdecd759595b5",
        "text": "."
      },
      "date": 1638015106386
    },
    {
      "id": "cbfbdecd759595b5",
      "type": "move",
      "order": [
        "71974ed438b7cf07",
        "9b291c09c04ea7e5",
        "7cb19f348ce8fc48",
        "aca420d60742043f",
        "ea0e993846492343",
        "cce193736b231b14",
        "27dafc4236ec4918",
        "307b4b925446f4d0",
        "0feca81e60f0542e",
        "a51783d54f4b3869",
        "f3bc72e2fbd466b8",
        "1c633dcf5ada1aa6",
        "01400b861b470d35",
        "cdc966021909da1f",
        "3a9ce5d9b497bb10",
        "fba4c3b73da1a887",
        "2188c894e703af22",
        "cbfbdecd759595b5",
        "5c8e41888f55198a",
        "b0de6f6b140d4f83",
        "1defbf4aedf3aff7",
        "e6458a0a34d64603",
        "3022f6c9807114fc",
        "d22c02d0fa76ddf0",
        "5b016f543bb32221",
        "a073530bb1adb29a",
        "a586a0a3b780a768"
      ],
      "date": 1638015110865
    },
    {
      "type": "edit",
      "id": "b0de6f6b140d4f83",
      "item": {
        "type": "markdown",
        "id": "b0de6f6b140d4f83",
        "text": "> I think Elm could fit nicely into a Frame and that a small port shim could encourage its use. Our Frame plugin interacts with the rest of wiki through [[messaging]] similar to but much simpler than the way Electron talks to the host window system. I'm pretty addicted to bare ES6 after years of building CoffeeScript but if Elm brings something to the environment I'm happy to see it.\nhttps://www.reddit.com/r/elm/comments/97gm4n/elm_electron/e4970b9/?utm_source=reddit&utm_medium=web2x&context=3\n\n"
      },
      "date": 1638220463608
    },
    {
      "type": "fork",
      "date": 1638220734115
    },
    {
      "type": "fork",
      "date": 1638223057909
    },
    {
      "item": {
        "type": "factory",
        "id": "4aeeb8ec8a4ff920"
      },
      "id": "4aeeb8ec8a4ff920",
      "type": "add",
      "after": "a586a0a3b780a768",
      "date": 1638289410250
    }
  ]
}