{
  "title": "Traversals",
  "story": [
    {
      "type": "markdown",
      "id": "ef5a6d2716ed0ab3",
      "text": "Now that we know the basics of messaging, such as naming [[selectors]] properly and using [[Polymorphism]] to [[cross]] distinctions drawn by means of classes, it is time to use what we have just discussed to implement `matches:` in a completely new way."
    },
    {
      "type": "markdown",
      "id": "ee820f5cf69d515d",
      "text": "First of all, if we are going to let a behavior traverse an information space to answer the question `aPattern matches: aString`, what is the space we are talking about? And given the space, what does asking `matches:` represent?\n"
    },
    {
      "type": "markdown",
      "id": "57616245b30617d2",
      "text": "We can try to guess the space by looking at the static context of matches:. In our non-inlined version, the static context was represented by the instance names of the match tracker. These names kept the positions up to which the pattern had matched the string, and the positions up to which the string had been examined according to the pattern. In other words, the static context of matches: seemed to be as follows."
    },
    {
      "type": "markdown",
      "id": "4319cd7bb297340b",
      "text": "* aPattern, patternMatchedInterval\n"
    },
    {
      "type": "markdown",
      "id": "7c5bcac6835f2bb7",
      "text": "* aString, stringMatchedInterval"
    },
    {
      "type": "markdown",
      "id": "7cfbd66cb0bb9c0a",
      "text": "If the static context above represents the location in the information space, then what is the direction of the traversal implied by `matches:`? Well, it seems to be going from a location (or static context) of non-empty intervals towards one in which the intervals are empty. Thus, if that is the case, the matter of `matches:` appears to imply two issues that need to be addressed. The first one is do both intervals become empty at the same time? The answer to this question is the value of `matches:` — assuming the traversal can be performed in the first place! Clearly, the traversal ’abc’ `matches:` ’xyz’ will not get anywhere. Therefore, the second issue is *can the traversal reach a point in which at least one of the intervals is empty?*\n"
    },
    {
      "type": "markdown",
      "id": "51f42eda009b5eaa",
      "text": "We can put those two questions together. Thus, in simpler terms, the value of matches: is the answer to the assertion *the traversal reaches a point at which both intervals become empty simultaneously*. Hopefully these points will be the attractors of the information space as implied by matches:.\n"
    },
    {
      "type": "markdown",
      "id": "7b718cdaaf4652eb",
      "text": "But how come the space looks like a collection of interval pairs and there is no mention of the pattern and the string? Now it seems they do not belong to the space at all. How is this possible?\n"
    },
    {
      "type": "markdown",
      "id": "69c6282306a3ae43",
      "text": "> The behavior of matches: is configured by the pattern and the string.\n\nIf we examine this situation carefully, we will see that at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n\n> Or the direction in which mice traverse a [[Maze]]."
    },
    {
      "type": "markdown",
      "id": "c1365be87d62f30a",
      "text": "This suggests that in reality the static context is just the pair of intervals, that the space is one of interval pairs connected in the orientation specified by `aPattern matches: aString`, that we distinguish interesting accumulation points by drawing distinctions regarding the interval sizes, that we are able do so because we can perceive a difference between their possible values, and that the answer we are after is whether the particular traversal ends at an interesting accumulation point or not.\n"
    },
    {
      "type": "markdown",
      "id": "9f61f1c32d3cd097",
      "text": "> You can also see `matches:` as discrete vector integration of a trajectory in the space of interval pairs."
    },
    {
      "type": "paragraph",
      "id": "cf6c9b5dc147eec3",
      "text": "⇒ [[Contexts]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Traversals",
        "story": []
      },
      "date": 1660801973527
    },
    {
      "item": {
        "type": "factory",
        "id": "ef5a6d2716ed0ab3"
      },
      "id": "ef5a6d2716ed0ab3",
      "type": "add",
      "date": 1660801983725
    },
    {
      "type": "edit",
      "id": "ef5a6d2716ed0ab3",
      "item": {
        "type": "paragraph",
        "id": "ef5a6d2716ed0ab3",
        "text": "Now that we know the basics of messaging, such as naming selectors properly and using polymorphism to cross distinctions drawn by means of classes, it is time to use what we have just discussed to implement matches: in a completely new way."
      },
      "date": 1660801987065
    },
    {
      "type": "add",
      "id": "4319cd7bb297340b",
      "item": {
        "type": "paragraph",
        "id": "4319cd7bb297340b",
        "text": "[…]"
      },
      "after": "ef5a6d2716ed0ab3",
      "date": 1660801988947
    },
    {
      "type": "edit",
      "id": "ef5a6d2716ed0ab3",
      "item": {
        "type": "paragraph",
        "id": "ef5a6d2716ed0ab3",
        "text": "Now that we know the basics of messaging, such as naming selectors properly and using polymorphism to [[cross]] distinctions drawn by means of classes, it is time to use what we have just discussed to implement matches: in a completely new way."
      },
      "date": 1660802003868
    },
    {
      "type": "edit",
      "id": "ef5a6d2716ed0ab3",
      "item": {
        "type": "paragraph",
        "id": "ef5a6d2716ed0ab3",
        "text": "Now that we know the basics of messaging, such as naming [[selectors]] properly and using [[polymorphism]] to [[cross]] distinctions drawn by means of classes, it is time to use what we have just discussed to implement matches: in a completely new way."
      },
      "date": 1660802029137
    },
    {
      "item": {
        "type": "factory",
        "id": "ee820f5cf69d515d"
      },
      "id": "ee820f5cf69d515d",
      "type": "add",
      "after": "4319cd7bb297340b",
      "date": 1660810100244
    },
    {
      "id": "ee820f5cf69d515d",
      "type": "move",
      "order": [
        "ef5a6d2716ed0ab3",
        "ee820f5cf69d515d",
        "4319cd7bb297340b"
      ],
      "date": 1660810104762
    },
    {
      "type": "edit",
      "id": "ee820f5cf69d515d",
      "item": {
        "type": "paragraph",
        "id": "ee820f5cf69d515d",
        "text": "First of all, if we are going to let a behavior traverse an information space to answer the question aPattern matches: aString, what is the space we are talking about? And given the space, what does asking matches: represent?"
      },
      "date": 1660810106276
    },
    {
      "type": "edit",
      "id": "ee820f5cf69d515d",
      "item": {
        "type": "paragraph",
        "id": "ee820f5cf69d515d",
        "text": "First of all, if we are going to let a behavior traverse an information space to answer the question `aPattern matches: aString`, what is the space we are talking about? And given the space, what does asking matches: represent?"
      },
      "date": 1660810135043
    },
    {
      "type": "edit",
      "id": "ee820f5cf69d515d",
      "item": {
        "type": "markdown",
        "id": "ee820f5cf69d515d",
        "text": "First of all, if we are going to let a behavior traverse an information space to answer the question `aPattern matches: aString`, what is the space we are talking about? And given the space, what does asking matches: represent?"
      },
      "date": 1660810136771
    },
    {
      "type": "edit",
      "id": "ee820f5cf69d515d",
      "item": {
        "type": "markdown",
        "id": "ee820f5cf69d515d",
        "text": "First of all, if we are going to let a behavior traverse an information space to answer the question `aPattern matches: aString`, what is the space we are talking about? And given the space, what does asking `matches:` represent?"
      },
      "date": 1660810153736
    },
    {
      "type": "edit",
      "id": "ee820f5cf69d515d",
      "item": {
        "type": "markdown",
        "id": "ee820f5cf69d515d",
        "text": "First of all, if we are going to let a behavior traverse an information space to answer the question `aPattern matches: aString`, what is the space we are talking about? And given the space, what does asking `matches:` represent?\n"
      },
      "date": 1660810307202
    },
    {
      "type": "add",
      "id": "57616245b30617d2",
      "item": {
        "type": "markdown",
        "id": "57616245b30617d2",
        "text": "We can try to guess the space by looking at the static context of matches:. In our non-inlined version, the static context was represented by the instance names of the match tracker. These names kept the positions up to which the pattern had matched the string, and the positions up to which the string had been examined according to the pattern. In other words, the static context of matches: seemed to be as follows."
      },
      "after": "ee820f5cf69d515d",
      "date": 1660810308906
    },
    {
      "item": {
        "type": "factory",
        "id": "5fe367993ec334f4"
      },
      "id": "5fe367993ec334f4",
      "type": "add",
      "after": "4319cd7bb297340b",
      "date": 1660822862272
    },
    {
      "type": "edit",
      "id": "5fe367993ec334f4",
      "item": {
        "type": "paragraph",
        "id": "5fe367993ec334f4",
        "text": "[…] In other words, matches: translates the pattern and the string into a direction vector at each step of the trip!"
      },
      "date": 1660822866866
    },
    {
      "type": "add",
      "id": "cf6c9b5dc147eec3",
      "item": {
        "type": "paragraph",
        "id": "cf6c9b5dc147eec3",
        "text": "[…]"
      },
      "after": "5fe367993ec334f4",
      "date": 1660822869173
    },
    {
      "type": "edit",
      "id": "5fe367993ec334f4",
      "item": {
        "type": "paragraph",
        "id": "5fe367993ec334f4",
        "text": "[…] In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!"
      },
      "date": 1660822879244
    },
    {
      "type": "edit",
      "id": "5fe367993ec334f4",
      "item": {
        "type": "markdown",
        "id": "5fe367993ec334f4",
        "text": "[…] In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!"
      },
      "date": 1660822880914
    },
    {
      "type": "edit",
      "id": "5fe367993ec334f4",
      "item": {
        "type": "markdown",
        "id": "5fe367993ec334f4",
        "text": "[…] In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n"
      },
      "date": 1660822929832
    },
    {
      "type": "add",
      "id": "c1365be87d62f30a",
      "item": {
        "type": "markdown",
        "id": "c1365be87d62f30a",
        "text": "This suggests that in reality the static context is just the pair of intervals, that the space is one of interval pairs connected in the orientation specified"
      },
      "after": "5fe367993ec334f4",
      "date": 1660822930795
    },
    {
      "type": "edit",
      "id": "5fe367993ec334f4",
      "item": {
        "type": "markdown",
        "id": "5fe367993ec334f4",
        "text": "[…] In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n\n> Or the direction in which mice traverse a maze."
      },
      "date": 1660822964161
    },
    {
      "type": "edit",
      "id": "5fe367993ec334f4",
      "item": {
        "type": "markdown",
        "id": "5fe367993ec334f4",
        "text": "[…] In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n\n> Or the direction in which mice traverse a [[maze]]."
      },
      "date": 1660822973470
    },
    {
      "type": "edit",
      "id": "c1365be87d62f30a",
      "item": {
        "type": "markdown",
        "id": "c1365be87d62f30a",
        "text": "This suggests that in reality the static context is just the pair of intervals, that the space is one of interval pairs connected in the orientation specified by aPattern matches: aString, that we distinguish interesting accumulation points by drawing distinctions regarding the interval sizes, that we are able do so because we can perceive a difference between their possible values, and that the answer we are after is whether the particular traversal ends at an interesting accumulation point or not."
      },
      "date": 1660823068941
    },
    {
      "type": "edit",
      "id": "c1365be87d62f30a",
      "item": {
        "type": "markdown",
        "id": "c1365be87d62f30a",
        "text": "This suggests that in reality the static context is just the pair of intervals, that the space is one of interval pairs connected in the orientation specified by `aPattern matches: aString`, that we distinguish interesting accumulation points by drawing distinctions regarding the interval sizes, that we are able do so because we can perceive a difference between their possible values, and that the answer we are after is whether the particular traversal ends at an interesting accumulation point or not."
      },
      "date": 1660823086703
    },
    {
      "type": "edit",
      "id": "ef5a6d2716ed0ab3",
      "item": {
        "type": "paragraph",
        "id": "ef5a6d2716ed0ab3",
        "text": "Now that we know the basics of messaging, such as naming [[selectors]] properly and using [[polymorphism]] to [[cross]] distinctions drawn by means of classes, it is time to use what we have just discussed to implement `matches:` in a completely new way."
      },
      "date": 1660823172499
    },
    {
      "type": "edit",
      "id": "ef5a6d2716ed0ab3",
      "item": {
        "type": "markdown",
        "id": "ef5a6d2716ed0ab3",
        "text": "Now that we know the basics of messaging, such as naming [[selectors]] properly and using [[polymorphism]] to [[cross]] distinctions drawn by means of classes, it is time to use what we have just discussed to implement `matches:` in a completely new way."
      },
      "date": 1660823174254
    },
    {
      "type": "edit",
      "id": "c1365be87d62f30a",
      "item": {
        "type": "markdown",
        "id": "c1365be87d62f30a",
        "text": "This suggests that in reality the static context is just the pair of intervals, that the space is one of interval pairs connected in the orientation specified by `aPattern matches: aString`, that we distinguish interesting accumulation points by drawing distinctions regarding the interval sizes, that we are able do so because we can perceive a difference between their possible values, and that the answer we are after is whether the particular traversal ends at an interesting accumulation point or not.\n"
      },
      "date": 1660823248191
    },
    {
      "type": "add",
      "id": "9f61f1c32d3cd097",
      "item": {
        "type": "markdown",
        "id": "9f61f1c32d3cd097",
        "text": "> You can also see matches: as discrete vector integration of a trajectory in the space of interval pairs."
      },
      "after": "c1365be87d62f30a",
      "date": 1660823250152
    },
    {
      "type": "edit",
      "id": "9f61f1c32d3cd097",
      "item": {
        "type": "markdown",
        "id": "9f61f1c32d3cd097",
        "text": "> You can also see `matches:` as discrete vector integration of a trajectory in the space of interval pairs."
      },
      "date": 1660823267180
    },
    {
      "type": "edit",
      "id": "cf6c9b5dc147eec3",
      "item": {
        "type": "paragraph",
        "id": "cf6c9b5dc147eec3",
        "text": "[[Contexts]]"
      },
      "date": 1660823288900
    },
    {
      "type": "edit",
      "id": "cf6c9b5dc147eec3",
      "item": {
        "type": "paragraph",
        "id": "cf6c9b5dc147eec3",
        "text": "⇒ [[Contexts]]"
      },
      "date": 1660823294799
    },
    {
      "type": "edit",
      "id": "4319cd7bb297340b",
      "item": {
        "type": "paragraph",
        "id": "4319cd7bb297340b",
        "text": "* aPattern, patternMatchedInterval"
      },
      "date": 1667345200584
    },
    {
      "type": "add",
      "id": "7cfbd66cb0bb9c0a",
      "item": {
        "type": "paragraph",
        "id": "7cfbd66cb0bb9c0a",
        "text": "[…]"
      },
      "after": "4319cd7bb297340b",
      "date": 1667345204721
    },
    {
      "type": "edit",
      "id": "4319cd7bb297340b",
      "item": {
        "type": "markdown",
        "id": "4319cd7bb297340b",
        "text": "* aPattern, patternMatchedInterval"
      },
      "date": 1667345205885
    },
    {
      "type": "edit",
      "id": "4319cd7bb297340b",
      "item": {
        "type": "markdown",
        "id": "4319cd7bb297340b",
        "text": "* aPattern, patternMatchedInterval\n"
      },
      "date": 1667345213700
    },
    {
      "type": "add",
      "id": "7c5bcac6835f2bb7",
      "item": {
        "type": "markdown",
        "id": "7c5bcac6835f2bb7",
        "text": "• aString, stringMatchedInterval"
      },
      "after": "4319cd7bb297340b",
      "date": 1667345214400
    },
    {
      "type": "edit",
      "id": "7c5bcac6835f2bb7",
      "item": {
        "type": "markdown",
        "id": "7c5bcac6835f2bb7",
        "text": "* aString, stringMatchedInterval"
      },
      "date": 1667345222543
    },
    {
      "type": "edit",
      "id": "7cfbd66cb0bb9c0a",
      "item": {
        "type": "paragraph",
        "id": "7cfbd66cb0bb9c0a",
        "text": "If the static context above represents the location in the information space, then what is the direction of the traversal implied by matches:? Well, it seems to be going from a location (or static context) of non-empty intervals towards one in which the intervals are empty. Thus, if that is the case, the matter of matches: appears to imply two issues that need to be addressed. The first one is do both intervals become empty at the same time? The answer to this question is the value of matches: — assuming the traversal can be performed in the first place! Clearly, the traversal ’abc’ matches: ’xyz’ will not get anywhere. Therefore, the second issue is can the traversal reach a point in which at least one of the intervals is empty?"
      },
      "date": 1667345259445
    },
    {
      "type": "add",
      "id": "5f65e196f8e4965c",
      "item": {
        "type": "paragraph",
        "id": "5f65e196f8e4965c",
        "text": "[…]"
      },
      "after": "7cfbd66cb0bb9c0a",
      "date": 1667345260476
    },
    {
      "type": "edit",
      "id": "7cfbd66cb0bb9c0a",
      "item": {
        "type": "paragraph",
        "id": "7cfbd66cb0bb9c0a",
        "text": "If the static context above represents the location in the information space, then what is the direction of the traversal implied by matches:? Well, it seems to be going from a location (or static context) of non-empty intervals towards one in which the intervals are empty. Thus, if that is the case, the matter of matches: appears to imply two issues that need to be addressed. The first one is do both intervals become empty at the same time? The answer to this question is the value of matches: — assuming the traversal can be performed in the first place! Clearly, the traversal ’abc’ matches: ’xyz’ will not get anywhere. Therefore, the second issue is *can the traversal reach a point in which at least one of the intervals is empty?*"
      },
      "date": 1667345322111
    },
    {
      "type": "edit",
      "id": "7cfbd66cb0bb9c0a",
      "item": {
        "type": "markdown",
        "id": "7cfbd66cb0bb9c0a",
        "text": "If the static context above represents the location in the information space, then what is the direction of the traversal implied by matches:? Well, it seems to be going from a location (or static context) of non-empty intervals towards one in which the intervals are empty. Thus, if that is the case, the matter of matches: appears to imply two issues that need to be addressed. The first one is do both intervals become empty at the same time? The answer to this question is the value of matches: — assuming the traversal can be performed in the first place! Clearly, the traversal ’abc’ matches: ’xyz’ will not get anywhere. Therefore, the second issue is *can the traversal reach a point in which at least one of the intervals is empty?*"
      },
      "date": 1667345324756
    },
    {
      "type": "edit",
      "id": "7cfbd66cb0bb9c0a",
      "item": {
        "type": "markdown",
        "id": "7cfbd66cb0bb9c0a",
        "text": "If the static context above represents the location in the information space, then what is the direction of the traversal implied by `matches:`? Well, it seems to be going from a location (or static context) of non-empty intervals towards one in which the intervals are empty. Thus, if that is the case, the matter of `matches:` appears to imply two issues that need to be addressed. The first one is do both intervals become empty at the same time? The answer to this question is the value of matches: — assuming the traversal can be performed in the first place! Clearly, the traversal ’abc’ matches: ’xyz’ will not get anywhere. Therefore, the second issue is *can the traversal reach a point in which at least one of the intervals is empty?*"
      },
      "date": 1667345367371
    },
    {
      "type": "edit",
      "id": "7cfbd66cb0bb9c0a",
      "item": {
        "type": "markdown",
        "id": "7cfbd66cb0bb9c0a",
        "text": "If the static context above represents the location in the information space, then what is the direction of the traversal implied by `matches:`? Well, it seems to be going from a location (or static context) of non-empty intervals towards one in which the intervals are empty. Thus, if that is the case, the matter of `matches:` appears to imply two issues that need to be addressed. The first one is do both intervals become empty at the same time? The answer to this question is the value of `matches:` — assuming the traversal can be performed in the first place! Clearly, the traversal ’abc’ `matches:` ’xyz’ will not get anywhere. Therefore, the second issue is *can the traversal reach a point in which at least one of the intervals is empty?*"
      },
      "date": 1667345395141
    },
    {
      "type": "edit",
      "id": "7cfbd66cb0bb9c0a",
      "item": {
        "type": "markdown",
        "id": "7cfbd66cb0bb9c0a",
        "text": "If the static context above represents the location in the information space, then what is the direction of the traversal implied by `matches:`? Well, it seems to be going from a location (or static context) of non-empty intervals towards one in which the intervals are empty. Thus, if that is the case, the matter of `matches:` appears to imply two issues that need to be addressed. The first one is do both intervals become empty at the same time? The answer to this question is the value of `matches:` — assuming the traversal can be performed in the first place! Clearly, the traversal ’abc’ `matches:` ’xyz’ will not get anywhere. Therefore, the second issue is *can the traversal reach a point in which at least one of the intervals is empty?*\n"
      },
      "date": 1667345426463
    },
    {
      "type": "add",
      "id": "51f42eda009b5eaa",
      "item": {
        "type": "markdown",
        "id": "51f42eda009b5eaa",
        "text": "We can put those two questions together. Thus, in simpler terms, the value of matches: is the answer to the assertion the traversal reaches a point at which both intervals become empty simultaneously. Hopefully these points will be the attractors of the information space as implied by matches:."
      },
      "after": "7cfbd66cb0bb9c0a",
      "date": 1667345427105
    },
    {
      "type": "edit",
      "id": "51f42eda009b5eaa",
      "item": {
        "type": "markdown",
        "id": "51f42eda009b5eaa",
        "text": "We can put those two questions together. Thus, in simpler terms, the value of matches: is the answer to the assertion *the traversal reaches a point at which both intervals become empty simultaneously*. Hopefully these points will be the attractors of the information space as implied by matches:."
      },
      "date": 1667345458586
    },
    {
      "type": "edit",
      "id": "51f42eda009b5eaa",
      "item": {
        "type": "markdown",
        "id": "51f42eda009b5eaa",
        "text": "We can put those two questions together. Thus, in simpler terms, the value of matches: is the answer to the assertion *the traversal reaches a point at which both intervals become empty simultaneously*. Hopefully these points will be the attractors of the information space as implied by matches:.\n"
      },
      "date": 1667345478366
    },
    {
      "type": "add",
      "id": "7b718cdaaf4652eb",
      "item": {
        "type": "markdown",
        "id": "7b718cdaaf4652eb",
        "text": "But how come the space looks like a collection of interval pairs and there is no mention of the pattern and the string? Now it seems they do not belong to the space at all. How is this possible?"
      },
      "after": "51f42eda009b5eaa",
      "date": 1667345479153
    },
    {
      "type": "edit",
      "id": "5f65e196f8e4965c",
      "item": {
        "type": "paragraph",
        "id": "5f65e196f8e4965c",
        "text": "> The behavior of matches: is configured by the pattern and the string.\n\nIf we examine this situation carefully, we will see that at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, matches: translates the pattern and the string into a direction vector at each step of the trip!\n\n"
      },
      "date": 1667345624982
    },
    {
      "type": "edit",
      "id": "5f65e196f8e4965c",
      "item": {
        "type": "markdown",
        "id": "5f65e196f8e4965c",
        "text": "> The behavior of matches: is configured by the pattern and the string.\n\nIf we examine this situation carefully, we will see that at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, matches: translates the pattern and the string into a direction vector at each step of the trip!\n\n"
      },
      "date": 1667345626397
    },
    {
      "type": "remove",
      "id": "5f65e196f8e4965c",
      "date": 1667345638251
    },
    {
      "type": "edit",
      "id": "7b718cdaaf4652eb",
      "item": {
        "type": "markdown",
        "id": "7b718cdaaf4652eb",
        "text": "But how come the space looks like a collection of interval pairs and there is no mention of the pattern and the string? Now it seems they do not belong to the space at all. How is this possible?\n"
      },
      "date": 1667345647833
    },
    {
      "type": "add",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "> The behavior of matches: is configured by the pattern and the string.\n\nIf we examine this situation carefully, we will see that at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, matches: translates the pattern and the string into a direction vector at each step of the trip!\n\n"
      },
      "after": "7b718cdaaf4652eb",
      "date": 1667345648758
    },
    {
      "type": "edit",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "> The behavior of matches: is configured by the pattern and the string.\n\nIf we examine this situation carefully, we will see that at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. \n\n"
      },
      "date": 1667345658704
    },
    {
      "type": "remove",
      "id": "5fe367993ec334f4",
      "date": 1667345661476
    },
    {
      "type": "edit",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "> The behavior of matches: is configured by the pattern and the string.\n\nIf we examine this situation carefully, we will see that at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n\n> Or the direction in which mice traverse a [[maze]]."
      },
      "date": 1667345666995
    },
    {
      "type": "edit",
      "id": "ef5a6d2716ed0ab3",
      "item": {
        "type": "markdown",
        "id": "ef5a6d2716ed0ab3",
        "text": "Now that we know the basics of messaging, such as naming [[selectors]] properly and using [[Polymorphism]] to [[cross]] distinctions drawn by means of classes, it is time to use what we have just discussed to implement `matches:` in a completely new way."
      },
      "date": 1672029424490
    },
    {
      "type": "edit",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "> The behavior of matches: is configured by the pattern and the string.\n\nIf we examine this situation carefully, we will see that at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n\n> Or the direction in which mice traverse a [[Maze]]."
      },
      "date": 1672029447656
    }
  ]
}