{
  "title": "symbol : String -> Parser ()",
  "story": [
    {
      "type": "paragraph",
      "id": "a7f2c5459c93ea80",
      "text": "[[Parse]] symbols like ( and ,. [https://package.elm-lang.org/packages/elm/parser/latest/Parser#symbol page]"
    },
    {
      "type": "code",
      "id": "2c584bc9c60bb7be",
      "text": "symbol : String -> Parser ()"
    },
    {
      "type": "paragraph",
      "id": "e4dd5c36a7bc813a",
      "text": "The symbol function has type String -> Parser (). This means it must take in a String argument, and it will definitely return an Parser () value."
    },
    {
      "type": "code",
      "id": "40e0936b62d0b70e",
      "text": "run (symbol \"[\") \"[\" == Ok ()\nrun (symbol \"[\") \"4\" == Err ... (ExpectingSymbol \"[\") ...\n"
    },
    {
      "type": "paragraph",
      "id": "7e495beb22ef7bad",
      "text": "Note: This is good for stuff like [[Brackets]] and semicolons, but it probably should not be used for binary operators like + and - because you can find yourself in weird situations. For example, is 3--4 a typo? Or is it 3 - -4? I have had better luck with chompWhile isSymbol and sorting out which operator it is afterwards."
    },
    {
      "type": "pagefold",
      "id": "eeb528bc865f2aac",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "7cd4fc0152d7d84f",
      "text": "The empty tuple () is called the [[Unit]] type in Elm."
    },
    {
      "type": "paragraph",
      "id": "3c7b33a0835ed7ee",
      "text": "What does () mean? [https://faq.elm-community.org/#what-does--mean faq]: It is the empty tuple or [[Unit Type]]. It serves much like [[void]], null, or None in other languages."
    },
    {
      "type": "paragraph",
      "id": "e8c536b2fe100a62",
      "text": "⇒ [[Unit type]]"
    },
    {
      "type": "markdown",
      "id": "2adc9601149bd901",
      "text": "> In Haskell, Rust, and Elm, the unit type is called () and its only value is also (), reflecting the 0-tuple interpretation. [https://en.wikipedia.org/wiki/Unit_type wikipedia]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "symbol : String -> Parser ()",
        "story": []
      },
      "date": 1696930190094
    },
    {
      "item": {
        "type": "factory",
        "id": "a7f2c5459c93ea80"
      },
      "id": "a7f2c5459c93ea80",
      "type": "add",
      "date": 1696930228680
    },
    {
      "type": "edit",
      "id": "a7f2c5459c93ea80",
      "item": {
        "type": "paragraph",
        "id": "a7f2c5459c93ea80",
        "text": "[https://package.elm-lang.org/packages/elm/parser/latest/Parser#symbol page]"
      },
      "date": 1696930236900
    },
    {
      "item": {
        "type": "factory",
        "id": "65e4f2ec6c3e8ab8"
      },
      "id": "65e4f2ec6c3e8ab8",
      "type": "add",
      "after": "a7f2c5459c93ea80",
      "date": 1696930245300
    },
    {
      "type": "remove",
      "id": "65e4f2ec6c3e8ab8",
      "date": 1696930251285
    },
    {
      "item": {
        "type": "factory",
        "id": "2c584bc9c60bb7be"
      },
      "id": "2c584bc9c60bb7be",
      "type": "add",
      "after": "a7f2c5459c93ea80",
      "date": 1696930258340
    },
    {
      "type": "edit",
      "id": "2c584bc9c60bb7be",
      "item": {
        "type": "code",
        "id": "2c584bc9c60bb7be",
        "text": "symbol : String -> Parser ()"
      },
      "date": 1696930259807
    },
    {
      "type": "edit",
      "id": "a7f2c5459c93ea80",
      "item": {
        "type": "paragraph",
        "id": "a7f2c5459c93ea80",
        "text": "Parse symbols like ( and ,. [https://package.elm-lang.org/packages/elm/parser/latest/Parser#symbol page]"
      },
      "date": 1696930291239
    },
    {
      "item": {
        "type": "factory",
        "id": "40e0936b62d0b70e"
      },
      "id": "40e0936b62d0b70e",
      "type": "add",
      "after": "2c584bc9c60bb7be",
      "date": 1696930303596
    },
    {
      "type": "edit",
      "id": "40e0936b62d0b70e",
      "item": {
        "type": "code",
        "id": "40e0936b62d0b70e",
        "text": "run (symbol \"[\") \"[\" == Ok ()\nrun (symbol \"[\") \"4\" == Err ... (ExpectingSymbol \"[\") ...\n"
      },
      "date": 1696930305416
    },
    {
      "item": {
        "type": "factory",
        "id": "7e495beb22ef7bad"
      },
      "id": "7e495beb22ef7bad",
      "type": "add",
      "after": "40e0936b62d0b70e",
      "date": 1696930313218
    },
    {
      "type": "edit",
      "id": "7e495beb22ef7bad",
      "item": {
        "type": "paragraph",
        "id": "7e495beb22ef7bad",
        "text": "Note: This is good for stuff like brackets and semicolons, but it probably should not be used for binary operators like + and - because you can find yourself in weird situations. For example, is 3--4 a typo? Or is it 3 - -4? I have had better luck with chompWhile isSymbol and sorting out which operator it is afterwards."
      },
      "date": 1696930314563
    },
    {
      "type": "edit",
      "id": "a7f2c5459c93ea80",
      "item": {
        "type": "paragraph",
        "id": "a7f2c5459c93ea80",
        "text": "[[Parse]] symbols like ( and ,. [https://package.elm-lang.org/packages/elm/parser/latest/Parser#symbol page]"
      },
      "date": 1696930343509
    },
    {
      "item": {
        "type": "factory",
        "id": "e4dd5c36a7bc813a"
      },
      "id": "e4dd5c36a7bc813a",
      "type": "add",
      "after": "7e495beb22ef7bad",
      "date": 1696930416670
    },
    {
      "id": "e4dd5c36a7bc813a",
      "type": "move",
      "order": [
        "a7f2c5459c93ea80",
        "2c584bc9c60bb7be",
        "e4dd5c36a7bc813a",
        "40e0936b62d0b70e",
        "7e495beb22ef7bad"
      ],
      "date": 1696930418755
    },
    {
      "type": "edit",
      "id": "e4dd5c36a7bc813a",
      "item": {
        "type": "paragraph",
        "id": "e4dd5c36a7bc813a",
        "text": "The symbol function has type String -> Parser ()"
      },
      "date": 1696930430644
    },
    {
      "type": "edit",
      "id": "e4dd5c36a7bc813a",
      "item": {
        "type": "paragraph",
        "id": "e4dd5c36a7bc813a",
        "text": "The symbol function has type String -> Parser ()."
      },
      "date": 1696930439609
    },
    {
      "type": "edit",
      "id": "e4dd5c36a7bc813a",
      "item": {
        "type": "paragraph",
        "id": "e4dd5c36a7bc813a",
        "text": "The symbol function has type String -> Parser (). This means it must take in a String argument, and it will definitely return an Parser () value."
      },
      "date": 1696930466224
    },
    {
      "item": {
        "type": "factory",
        "id": "eeb528bc865f2aac"
      },
      "id": "eeb528bc865f2aac",
      "type": "add",
      "after": "7e495beb22ef7bad",
      "date": 1696952906681
    },
    {
      "type": "edit",
      "id": "eeb528bc865f2aac",
      "item": {
        "type": "pagefold",
        "id": "eeb528bc865f2aac",
        "text": "~"
      },
      "date": 1696952910390
    },
    {
      "id": "7cd4fc0152d7d84f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7cd4fc0152d7d84f",
        "text": "The empty tuple () is called the [[Unit]] type in Elm."
      },
      "after": "eeb528bc865f2aac",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1696952915881
    },
    {
      "id": "3c7b33a0835ed7ee",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3c7b33a0835ed7ee",
        "text": "What does () mean? [https://faq.elm-community.org/#what-does--mean faq]: It is the empty tuple or [[Unit Type]]. It serves much like [[void]], null, or None in other languages."
      },
      "after": "7cd4fc0152d7d84f",
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1696952919239
    },
    {
      "item": {
        "type": "factory",
        "id": "2adc9601149bd901"
      },
      "id": "2adc9601149bd901",
      "type": "add",
      "after": "3c7b33a0835ed7ee",
      "date": 1696952961350
    },
    {
      "type": "edit",
      "id": "2adc9601149bd901",
      "item": {
        "type": "markdown",
        "id": "2adc9601149bd901",
        "text": "> In Haskell, Rust, and Elm, the unit type is called () and its only value is also (), reflecting the 0-tuple interpretation."
      },
      "date": 1696952965070
    },
    {
      "type": "edit",
      "id": "2adc9601149bd901",
      "item": {
        "type": "markdown",
        "id": "2adc9601149bd901",
        "text": "> In Haskell, Rust, and Elm, the unit type is called () and its only value is also (), reflecting the 0-tuple interpretation. [https://en.wikipedia.org/wiki/Unit_type wikipedia]"
      },
      "date": 1696952994287
    },
    {
      "type": "add",
      "id": "e8c536b2fe100a62",
      "item": {
        "type": "paragraph",
        "id": "e8c536b2fe100a62",
        "text": "⇒ [[Unit type]]"
      },
      "after": "3c7b33a0835ed7ee",
      "date": 1696954410280
    },
    {
      "type": "edit",
      "id": "3c7b33a0835ed7ee",
      "item": {
        "type": "paragraph",
        "id": "3c7b33a0835ed7ee",
        "text": "What does [[()]] mean? [https://faq.elm-community.org/#what-does--mean faq]: It is the empty tuple or [[Unit Type]]. It serves much like [[void]], null, or None in other languages."
      },
      "date": 1696954448973
    },
    {
      "type": "edit",
      "id": "3c7b33a0835ed7ee",
      "item": {
        "type": "paragraph",
        "id": "3c7b33a0835ed7ee",
        "text": "What does () mean? [https://faq.elm-community.org/#what-does--mean faq]: It is the empty tuple or [[Unit Type]]. It serves much like [[void]], null, or None in other languages."
      },
      "date": 1696954458967
    },
    {
      "id": "2adc9601149bd901",
      "type": "remove",
      "removedTo": {
        "page": "Unit Type"
      },
      "date": 1696954486658
    },
    {
      "type": "edit",
      "id": "7e495beb22ef7bad",
      "item": {
        "type": "paragraph",
        "id": "7e495beb22ef7bad",
        "text": "Note: This is good for stuff like [[Brackets]] and semicolons, but it probably should not be used for binary operators like + and - because you can find yourself in weird situations. For example, is 3--4 a typo? Or is it 3 - -4? I have had better luck with chompWhile isSymbol and sorting out which operator it is afterwards."
      },
      "date": 1696954638831
    },
    {
      "id": "2adc9601149bd901",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "2adc9601149bd901",
        "text": "> In Haskell, Rust, and Elm, the unit type is called () and its only value is also (), reflecting the 0-tuple interpretation. [https://en.wikipedia.org/wiki/Unit_type wikipedia]"
      },
      "after": "e8c536b2fe100a62",
      "date": 1696954778032
    }
  ]
}