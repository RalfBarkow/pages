{
  "title": "Cee Language",
  "story": [
    {
      "type": "html",
      "text": "C is a [[System Programming]] language, which also became popular for writing [[Application Program]]s, because",
      "id": "5c10e2d8c234dc474459918dbbbe83ac"
    },
    {
      "type": "html",
      "text": " Kernighan & Ritchie's Unix operating system was adopted within Bell Labs for use on PDP11 computers, and was written in C",
      "id": "d1765ceb8414b1bfca4a9caa76a870fd"
    },
    {
      "type": "html",
      "text": " It was the first efficient and portable high-level systems programming language (see bottom of page for discussion).",
      "id": "3e3c257c94c4be58de0f47fc26228527"
    },
    {
      "type": "html",
      "text": " Early microprocessors were slow and needed the speed advantage.",
      "id": "0a09f5e913f317b4905708a9652d8a12"
    },
    {
      "type": "html",
      "text": " The competitor languages at the time (Basic, PL/I, Fortran, Cobol, and Pascal) had huge problems.",
      "id": "587fd4427ef72288caec1d007b300008"
    },
    {
      "type": "html",
      "text": " Other languages like Lisp were broadly considered unworkable on low-end machines at the time due to speed issues and lack of ability to do external linkage.",
      "id": "b1ceb690f54f0f2468bba47c84ada35b"
    },
    {
      "type": "html",
      "text": "\n3-5 are largely no longer true, and so C is suffering a backlash of criticism for not having the characteristics of an application programming language, such as protecting the average programmer from cutting himself with sharp tools.",
      "id": "bcbfc1c739871e758e9008d1cc527a64"
    },
    {
      "type": "code",
      "text": "  int main()\n  {\n      void (*i_am_bleeding)() = (void(*)())15;\n      i_am_bleeding();\n      return 0;\n  }",
      "id": "b4d56943ddaa98f8cdd579cfd12b2b5c"
    },
    {
      "type": "html",
      "text": "<i>The problem with C is the techniques that help it compete with modern dynamic languages are invariably the techniques that make it dangerous.</i>",
      "id": "a270027c2c296fd87c13a1f6d3e87d38"
    },
    {
      "type": "html",
      "text": "\nThe C language was created by [[Dennis Ritchie]] over the period 1969 through 1973, based on predecessor languages B and BCPL. By '73 it could reimplement Unix on an early PDP 11. Unix had been implemented purely in assembly before that. See [[Kernighan And Ritchie]] (book).",
      "id": "4149ffb1a63bf96792bc76b79a920613"
    },
    {
      "type": "html",
      "text": "\nIt was one of the first successful high-level systems programming languages, and since the 1980s has been the most widely used systems programming languages, mostly displacing assembly code for that purpose. See also [[Bliss Language]].",
      "id": "a187b4fc73c772c8f4499fbe8538cd91"
    },
    {
      "type": "html",
      "text": "\nA very insightful contrarian comment about the nature of C appears in an [[Alexander Stepanov]] (C++ STL designer) interview by Al Stevens in [[Dr Dobbs Journal]] (3/1995) ([http://www.sgi.com/tech/stl/drdobbs-interview.html www.sgi.com]):",
      "id": "600b0eced7c4861e13f8930b841f87c9"
    },
    {
      "type": "html",
      "text": "\"Let's consider now why C is a great language. It is commonly believed that C is a hack which was successful because Unix was written in it. I disagree. Over a long period of time computer architectures evolved, not because of some clever people figuring how to evolve architectures---as a matter of fact, clever people were pushing tagged architectures during that period of time---but because of the demands of different programmers to solve real problems. Computers that were able to deal just with numbers evolved into computers with byte-addressable memory, flat address spaces, and pointers. This was a natural evolution reflecting the growing set of problems that people were solving. <b>C, reflecting the genius of Dennis Ritchie, provided a minimal model of the computer that had evolved over 30 years. C was not a quick hack. As computers evolved to handle all kinds of problems, C, being the minimal model of such a computer, became a very powerful language to solve all kinds of problems in different domains very effectively.</b> This is the secret of C's portability: it is the best representation of an abstract computer that we have. Of course, the abstraction is done over the set of real computers, not some imaginary computational devices. Moreover, people could understand the machine model behind C. It is much easier for an average engineer to understand the machine model behind C than the machine model behind Ada or even Scheme. <b>C succeeded because it was doing the right thing, not because of AT&T promoting it or Unix being written with it.</b>\" (emphasis added)",
      "id": "3299ae94aa1f1bdda33fc5ad6bc7bb5b"
    },
    {
      "type": "html",
      "text": "\nC became successful because it provided a range of data and control structures that were general enough to be sufficient for many programming tasks, but limited enough to be fairly easy to implement efficiently on common computer architectures. Assembly language was in near universal use for systems programming in the 1970s; to be a suitable replacement, C needed to offer comparable speed with improved usability. To that end it offered relative machine independence, structured control constructs (if, while, for), and importantly, [[Text Substitution Macros]], which are widely deplored today but which were wildly popular in [[Assembly Language]]s.",
      "id": "cbf7545cb5b94aeca9d8349a60b68cee"
    },
    {
      "type": "html",
      "text": "\nC supports",
      "id": "203e338556b23d1d2bb6d7c23ba08188"
    },
    {
      "type": "html",
      "text": " characters, integers, floating point numbers, pointers, and multi-dimensional arrays.",
      "id": "7c3610904587363f5e22fe73eaeb3afa"
    },
    {
      "type": "html",
      "text": " user-definable records (\"structures\") including bit-fields",
      "id": "a979d93baa569608c736399dc75e9ebf"
    },
    {
      "type": "html",
      "text": " Infix operators for arithmetic, comparisons, bitwise and/or/xor/not/shift, logical short-circuited and/or/not, ternary [[Conditional Operator]]",
      "id": "34f7e06a576de03f2185e3880f9a8247"
    },
    {
      "type": "html",
      "text": " Basic [[Structured Programming]] control constructs (if, for, while, do-while, [[Switch Statement]], goto)",
      "id": "f2d9e74ce037f69c6d798e2933430545"
    },
    {
      "type": "html",
      "text": " Simple return-stack functions (recursive but not first class, not nested, no [[Lexical Closure]]s, indeed no lexical scoping beyond \"global scope\", \"file scope\", \"block scope\" at all)",
      "id": "9919b4e9caae5649747eaad18da61cfa"
    },
    {
      "type": "html",
      "text": " [[Function Pointer]]s are (almost) first-class entities in C; you cannot create new functions at runtime but a [[Function Pointer]], once bound to a function, can be used like any other object.",
      "id": "95eb4568f83e79ee88d11e5d01d90656"
    },
    {
      "type": "html",
      "text": " [[Assignments Are Expressions]]",
      "id": "b4afac5dfb2a6e7d970ab8d40fbb0743"
    },
    {
      "type": "html",
      "text": " Automatic management of stack-allocated variables local to functions",
      "id": "629fc819c90f26ca817e1037329b4440"
    },
    {
      "type": "html",
      "text": " A [[Cee Standard Library]] of functions for strings, floating point, OS interface, and an innovative portable I/O library (At least, innovative for 1970. By modern standards, stdio is quite limited; the existence of other de-facto standard I/O libraries like that defined in POSIX.1 remedies the situation quite a bit.)",
      "id": "a0bd0cc46b1c7904dc05bb6439f38e7d"
    },
    {
      "type": "html",
      "text": " Very little else",
      "id": "9d279d2309d4496eed19cfeb896c76df"
    },
    {
      "type": "html",
      "text": "<i>A note on the [[Cee Preprocessor]] copied from [[Trivial Do While Loop]]:</i>",
      "id": "c73a16061db66fe15ed69af2e5597082"
    },
    {
      "type": "html",
      "text": "\nFor years it wasn't considered part of the C language per se, and was advocated, designed, and implemented by different people than the rest of C: Alan Snyder, Mike Lesk, and John Reiser. See Ritchie's history of C at [http://cm.bell-labs.com/cm/cs/who/dmr/chist.html cm.bell-labs.com].",
      "id": "6f34dd4ffef091a797b65274f3db9405"
    },
    {
      "type": "html",
      "text": "The design of the preprocessor is horrid in several ways, but on the other hand, Reiser's implementation of it is an amazing case study in how to make software run really, really, really fast. In one environment I used in the 1980s, it was faster than \"cat file.c > /tmp/foo\"! (\"cat\" uses getchar() and the stdio lib was inefficient).",
      "id": "b21105940cb35c58abe7037011635678"
    },
    {
      "type": "html",
      "text": "\nAlthough often criticized for being a \"low-level [[High Level Language]]\", this is also C's strength, allowing very fast [[Machine Code]] to be generated for an especially wide range of types of programs, making it especially suitable for a systems programming language.",
      "id": "07e6f1ee938af4d427c9b94082ce8d93"
    },
    {
      "type": "html",
      "text": "\nA variety of more sophisticated languages have been claimed to be suitable as replacements for C, but as of 2003 there still are no other candidates that are 100% technically successful in matching or surpassing C in its areas of strengths.",
      "id": "e08fb10489190fd5b0f3cab77f31cda5"
    },
    {
      "type": "html",
      "text": "\nOn the other hand, C has been displaced to a noticeable extent in non-systems programming areas, and displaced to a certain (and some say growing) extent even in systems programming, by languages such as C++, Java, Perl, etc.",
      "id": "d46379fa04f4435a25fc7588f34a097d"
    },
    {
      "type": "html",
      "text": "\nThe lack of Object Oriented features in C creates dissatisfaction, but nonetheless [[Cee Plus Plus]] is not universally considered to be a suitable replacement for C due to a large variety of perceived flaws, including complexity.",
      "id": "f114887b66aa6077ddf4ffa72661bdfc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "<i>The most important of the \"object oriented\" features can be implemented in [[Cee Language]] through a combination of convention and macros (see [[Pointer Cast Polymorphism]]). Many programmers who understand enough about object-oriented programming to take advantage of the OO features in [[Cee Plus Plus]] find it easier to simply do the same things in [[Cee Language]].</i>",
      "id": "434852533c5dd3eea95f108405cebd47"
    },
    {
      "type": "html",
      "text": "\nThis has been widely debated. Some people believe it to be true, others do not. I personally find that this approach is better than nothing, but does not give me as much support from the compiler as I would like. I've done OO programming even in [[Assembly Language]], but obviously that doesn't make assembly an OO language.",
      "id": "7fb4eccaa92523181a3c6c143700ec5b"
    },
    {
      "type": "html",
      "text": "<i>[[Objective Cee]] offers more expressive object oriented features than [[Cee Plus Plus]] and doesn't do nearly as much damage to the rest of the language than [[Cee Plus Plus]]. Many of the macro packages were similar (though long gone). I think the point is that there are <b>many</b> choices besides [[Cee Plus Plus]] for C programmers who want object oriented capabilities without having to learn an entirely new language.</i>",
      "id": "b5449da4d2ffdde957cc3c9ff3371560"
    },
    {
      "type": "html",
      "text": "\nAgreed. And [[Objective Cee]] is also a wonderfully small language; I <i>(who?)</i> implemented it on top of a C compiler once, commercially, all by myself in a short period of time. The core language itself, that is; naturally HP licensed the libraries from NeXT.",
      "id": "5cb57fc80ddb3865022b12d816119cfc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "\nDon't forget the most famous example of polymorphism in [[Cee Language]], the table of [[Device Driver]]s at the heart of every unix-like operating system. Every device driver is an object (class: major number, instance: minor number) that implements the standard open/close/read/write/ioctl/poll device interface.",
      "id": "58a1d59750d51001abdd34de64d61b27"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "\nC is a nice low-level general-purpose language, which personally I love but other people tend to get a lazy when it comes to memory management, specifically pointers.",
      "id": "b613e17349f6fbae655f9b6e5552848b"
    },
    {
      "type": "html",
      "text": "\nDefinitely, C is the dominant language today for systems programming. Many (system) software (programs) are written in C. They include Windows, Linux, [[Mac Osx]], etc. -- [[Takuya Murata]]",
      "id": "5cfc01edee5197d5a17ea768b3299e37"
    },
    {
      "type": "html",
      "text": "\n[[Cee Plus Plus]] is an extended language from C. C++ is a superset of C except slight differences.",
      "id": "4793fa0f233f2d12d2afbfad8b7f26ac"
    },
    {
      "type": "html",
      "text": "<i>Not anymore. The most recent C standard, [[Ansi Cee]] 99, contains numerous new incompatiblities with C++ - including doing quite a few things differently than C++ does them and which will likely be difficult for C++ implementors (and the C++ committee) to reconcile. Some think that this was done intentionally - quite a few influential C folks are openly hostile to [[Cee Plus Plus]] (isn't everybody?), and don't like being considered a subset of C++. That said, many of the new extensions are quite useful (well-defined integer types, restrict, vararg macros) and probably should wind up in C++ sooner or later.</i>",
      "id": "89d3b21fe7f4ff51e74c5fadb6c4ffc5"
    },
    {
      "type": "html",
      "text": "<i>While I don't think it is necessary for C to be a near-subset of C++; I do think they should have a usable common subset. I hope the [[Cee Plus Plus]] community finds some way to reconcile these differences. -- [[Scott Johnson]]</i>",
      "id": "06661f38ad2d80ca9ed025e0d31c1dc2"
    },
    {
      "type": "html",
      "text": "\nLooking at a detailed description (e.g. [http://david.tribble.com/text/cdiffs.htm david.tribble.com]) the <i>new incompatibilities</i> do not seem to be so dramatic. Of course, now there are some new ways to write programs that compile under C and are invalid under C++. So, if you really go at it, you'll surely succeed. But the common part of C and C++ is not at all reduced compared to C89 (meaning: you might not use some new C99 features like variable length arrays *). Furthermore there are other modifications in C99 vs. C89 that really brought C closer to C++. So, in practice you needn't lean out of the window too much if you want to write source code that compiles with C and C++ ... (*: In some of the harder cases remember: The preprocessor is your friend :-))",
      "id": "233fe1a5d0c9ec63b2f55444263434fd"
    },
    {
      "type": "html",
      "text": "\nAnyone else. . . have a look at the [[Hello World]] page for examples.",
      "id": "94c0c61366cc58d66db7a4dad57b329b"
    },
    {
      "type": "html",
      "text": "\nSee also [[Brian Kernighan]] and [[Dennis Ritchie]] or maybe even [[Kernighan And Ritchie]]",
      "id": "9a45f4fab3c4b6b44fd3e6618fe5d7e7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "[[Cee Language]] snippet from [[Kernighan And Ritchie]]:",
      "id": "da323a5d142f4b49bce529c964dcfc7e"
    },
    {
      "type": "code",
      "text": " void strcpy(char *from, char *to) {\n    while(*to++ = *from++);\n }",
      "id": "703d6e78361259de3eb622c08a0181dc"
    },
    {
      "type": "html",
      "text": "<i>Is this intentionally wrong?</i>",
      "id": "ee6830e135ec5b0b215dc99674f448fd"
    },
    {
      "type": "html",
      "text": "\nWhat's wrong with it? Is it the fact that the designers care deeply that it should run fast and care little that *from might not be terminated and overrun memory? Is that a problem? <i>That's a user problem...</i> I'd call it a [[Language Usability]] problem.",
      "id": "664873fcd3d71004741297444b54e154"
    },
    {
      "type": "html",
      "text": "<i>Well, actually one thing wrong with it is that the [[Cee Standard Library]] strcpy has the destination argument <b>first</b>...</i>",
      "id": "e7b9743557ffa57e46f9cf39d518d08c"
    },
    {
      "type": "html",
      "text": "\nAnd the other thing wrong is that the standard library defines <i>strcpy</i> to return a <i>char *</i> to the destination string. Besides, from is a const pointer, as we don't modify the source string.",
      "id": "27f225d12cd5b2928d2832ce848d6fda"
    },
    {
      "type": "html",
      "text": "\nfrom the man page:",
      "id": "0862d0d8a504d1271de862ed8c67250f"
    },
    {
      "type": "code",
      "text": " #include <string.h>\n char *strcpy(char *dest, const char *src);",
      "id": "5f5b2b35da5459c7ef641362731b2ad0"
    },
    {
      "type": "html",
      "text": "So I'd say a better try to this particular part of the library would be:",
      "id": "61dfe533067e18a245c8ce7909771b2f"
    },
    {
      "type": "code",
      "text": " char *strcpy(char *to, const char *from) {\n    char * tmp = to;\n    while ( *to++ = *from++ )\n        // look ma, nothing in here, C99 comment style :-)\n        ;\n    return tmp;\n }",
      "id": "86ef9c0f6b2e1673507b29e6c2d2d0bf"
    },
    {
      "type": "html",
      "text": "<i>Except that the arguments are restricted pointers according to the C99 Standard, so even the above isn't quite right. -- [[James Dennett]]</i>",
      "id": "728a68c71e6067a719d87e98abe00057"
    },
    {
      "type": "html",
      "text": "<b>Heretics. The reason strcpy is a library call is to have it optimised for each architecture. The infamous empty-block while() above is 5-30 times slower than dedicated assembly, depending on the architecture.</b>",
      "id": "ab7a4627ec668a10284c77eed8800861"
    },
    {
      "type": "html",
      "text": "\nBTW, it'd be better using <i>char *<b>strncpy</b>(char *to, const char *from, size_t num)</i>, no buffer overflows.",
      "id": "c9f27ce54dabb5eb534634f56569a027"
    },
    {
      "type": "html",
      "text": "''Not necessarily, strncpy doesn't guarantee NUL-termination, so you <b>still</b> have to check the result. Better to explicitly\ncheck, or use a real string library. Don't even think about strncat().''",
      "id": "6d864c2c02efb09187f6932e47653527"
    },
    {
      "type": "html",
      "text": "\nNo you don't.",
      "id": "2d867c00010a1466c8cc6eb5cabc243f"
    },
    {
      "type": "code",
      "text": "  strncpy(dst, src, n);\n  dst[n-1] = 0;",
      "id": "0d418d8ba2ddf9b8dbe75268d2e11b51"
    },
    {
      "type": "html",
      "text": "\nEnd of discussion, and no \"checking\" necessary.  If <i>src</i> is too big to fit in dst, then it would have been truncated anyway.  This is something you'd have to check for with strcpy <i>anyway</i> to prevent a buffer overflow.",
      "id": "63d12650de5952db6a28b2c93862f54a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "No. strncpy() is buggy (or misnamed). See [http://blog.liw.fi/posts/strncpy/ blog.liw.fi]\nIt doesn't guarantee the result is a string and it may copy many more characters than necessary.\nIt can be useful but it *isn't* a string function!",
      "id": "463dd7f7269a005687b20187223ba058"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "\nHere's a dumb newbie question for all you c gurus.... I've been reading through sample code, and seeing a lot of things like this:",
      "id": "3ce814325ebb4933085b9cbd248b4d20"
    },
    {
      "type": "code",
      "text": "    char* this_variable_will_store_a_string",
      "id": "d51439cd3370568b37a8126cedea6d9f"
    },
    {
      "type": "html",
      "text": "Now... my understanding of these things is that char* tells you we're dealing with a pointer to a variable of type character but",
      "id": "0d86b0bdc2d1393581e06c9a82e1542f"
    },
    {
      "type": "html",
      "text": " how big is this variable? (the one being pointed to)",
      "id": "fb53bbda959a38a212912f457494e373"
    },
    {
      "type": "html",
      "text": " <i>Anyone's guess.</i>",
      "id": "a65fe020ba4d6c94c5d9684b7eaabdf4"
    },
    {
      "type": "html",
      "text": " How long can the string be?",
      "id": "5485aa4da0f82de64b765e6e15af17bc"
    },
    {
      "type": "html",
      "text": " <i>As long as the allocated memory permits (note the need for null termination).</i>",
      "id": "9d35103035a246d5e4396c4a7ee2e343"
    },
    {
      "type": "html",
      "text": " How is the memory allocated?",
      "id": "3e4872ddc54617bef3c9fa9951d47e13"
    },
    {
      "type": "html",
      "text": " <i>[[It Depends]]. It could be that the char * is intended to point into a previously declared char[], or it might be intended to point at malloc()ed memory; and the malloc might occur pretty much anywhere.</i>",
      "id": "855ac309b0d7bfb7ea666dd55497cf92"
    },
    {
      "type": "html",
      "text": "\nThanks for answering me so quickly! Here's another question:",
      "id": "c792b77f523bc9e8fe16cc93cbdad641"
    },
    {
      "type": "html",
      "text": " If you try to store a string that is too long in some memory that is not big enough, can you accidently overwrite memory which contains other (possibly very important) data?",
      "id": "6dc5284f3b371dc1a884d5403a75a356"
    },
    {
      "type": "html",
      "text": " <i>Yes. It often happens. C programmers are notoriously lazy about checking for the maximum length of data put into a buffer. The language provides no automatic checking. This type of programming error is often used by crackers to deliberately overwrite data in memory in order to modify values or even take control of the program. See [[Cee Language And Buffer Overflows]]</i>",
      "id": "e9d67ef6e7a5e28ee58a8799f756dafe"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "For copy-style functions, what's the [[Preferred Order Of Src Dst Arguments]]?",
      "id": "1dcb96bbd375bb126eb942b3207dfcf7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "\nHas the [[Cee Language]], Circa1970, passed its [[Use By Date]]?",
      "id": "78563729620be314d19f26b1d5de525a"
    },
    {
      "type": "html",
      "text": "<i>[[Cee Language]] will persist as long as Unix-like systems exist. Also, C is usually the first language ported to a new microprocessor or microcontroller, so C will persist as long as there are [[Embedded Systems]] to develop.</i>",
      "id": "819a765a1ce470dc5f782c904474528f"
    },
    {
      "type": "html",
      "text": "\nWell-written C code is the most portable of any language, since every device has a C compiler, and every language has a mechanism for calling C code (like JNI or CriTCL, for example). Therefore, if you want your library to be usable anywhere and in any language, write it in C.",
      "id": "bc58a43f9f084b01466854c61b394314"
    },
    {
      "type": "html",
      "text": "<i>Also note that some younger languages compile to C.</i>",
      "id": "fa4ddad7b22cb51a029de7a629bff35e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "<b>Why is C [[As Fast As Cee]]?</b>",
      "id": "15a769a8add8316040224c1c5c061e97"
    },
    {
      "type": "html",
      "text": "\nNothing on this page truly explains why C is a fast language. A set of instructions is a set of instructions. Why is one set written in C faster than one say written in Pascal or in basic. <i>Pascal was not necessarily slow, but had a very poor set of built-in I/O functions that made it seem very slow. Basic is generally slowed down by its interpreter. C, from the beginning, was very little \"higher level\" than assembly language. You could generally \"see\" the resulting assembly code from the source code. This allowed expert programmers to write efficient code, though sometimes at the expense of readability. Over time, this emphasis was generally found to be counter-productive for the long term, but at the same time, compiler optimization was making great strides. It's amazing how tight the assembly output can be from a C compiler! (I've looked.)</i>",
      "id": "ee368bcf79d5decb026c37a5e2d4e479"
    },
    {
      "type": "html",
      "text": "\nC is fast because",
      "id": "5c0151bc82cd48c81afaa4a5a2346dec"
    },
    {
      "type": "html",
      "text": " it was designed to be an attractive replacement for [[Assembly Language]] for systems programming the original [[Unix Os]]; most languages are trying to replace other [[High Level Language]]s. In other words, C didn't get used at all until it was nearly as fast as the fastest possible language. This is almost never true of other languages.",
      "id": "644167422107def8b6537aee28fdb388"
    },
    {
      "type": "html",
      "text": " its creator had speed (and small memory size) as the number one goal; most languages are attempting to make programming easier, and then try to improve the implementation (not the design) of the language for speed afterwards (Lisp is an example of a language for which some of the world's brightest people eventually found ways to implement it very fast, and even then they found it superior to build a brand new computer/cpu architecture to support Lisp efficiently. But see point #4 below)",
      "id": "c8f7d3b372b44b5f46c45b79ca7abde1"
    },
    {
      "type": "html",
      "text": " its creator was intimately familiar with machine architecture and compiler technology",
      "id": "fca2acedfd08cdc8eb42315db91b1e19"
    },
    {
      "type": "html",
      "text": " it was designed to be fast on small simple machines, which sort of automatically also makes it fast on big simple computers.  With complex architectures, such as the 6502/65816, 8086 through 80286, et. al., C's performance was lackluster at best since it didn't map well to the more sophisticated features of these architectures.  This is why all modern CPUs offer \"flat\" address spaces today, or \"reduced\" addressing modes, so as to run C software more efficiently (indeed, this was the driving force behind [[Reduced Instruction Set Computer]]s).",
      "id": "b45066303b0200c7ec360d83c78700aa"
    },
    {
      "type": "html",
      "text": " its design attempts to do as much work as possible at compile time, and to leave out any language feature that requires \"unnecessary\" work at run time.",
      "id": "7d490c561d55aa27fb53dfad948d8de2"
    },
    {
      "type": "html",
      "text": " C is derived from B and BCPL, which are even simpler languages with only one type (the machine word). Features in support of making programming easier were added only slowly and grudgingly to make C a more general purpose language, and even then usually only if they had no runtime penalty (e.g. the addition of typedef to the language).",
      "id": "96a83bf33fb7331b13aec75e239d034e"
    },
    {
      "type": "html",
      "text": " Because C only offers low-level simple mechanisms that can be implemented as very fast machine code, programmers tend to use those same mechanisms. In languages that offer higher-level, more complex features, programmers tend to use those, too, making their programs slower than they would be otherwise.",
      "id": "86e6f75063899798edd1240f98b6d536"
    },
    {
      "type": "html",
      "text": " many C constructs translate into a single machine instruction, which from a simplistic point of view, is as fast as something possibly could be",
      "id": "a249f0d299ad8c43fad4d6aadbcd108e"
    },
    {
      "type": "html",
      "text": "\nIt's worthwhile keeping in mind that C originally had to run on a machine with only 24k of RAM, 12k of which was devoted to Unix; later PDP 11 versions had more, but still only 64K of data for RAM and 64K for instructions. So optimization for small memory use was an overriding consideration. To some extent, such an approach happens to also lead to speed optimization as a side effect (not always, but to a noticeable extent).",
      "id": "a755ed2e1c0856b979df7e411c0518a2"
    },
    {
      "type": "html",
      "text": "[I would argue that there is a self reinforcing cycle also in play here.  Most modern benchmarks are written in C (initially because of portability), so processor design tends towards things that make the benchmarks run fast, some of which will have more general applicability to C programs.  Then C gets used more (and more benchmarks get written in it) because it is fast.]",
      "id": "1742099f825794767177bed944f7f0b9"
    },
    {
      "type": "html",
      "text": "\nHere are some examples of features that were used in other languages in the late 1960s/early 1970s that were left out of C very much on purpose in order to make C a faster language:",
      "id": "1e6be574a64dc55b32f50783a5e783a8"
    },
    {
      "type": "html",
      "text": " Array bounds checking (enforced by Pascal). \"But it only takes a few extra machine instructions\", people wail. No, not inside a triply nested inner loop, it doesn't; it can cost millions of instructions per second overall, depending on the application, forcing people to switch to assembler for their inner loops - a last resort that we don't want to encourage. [[System Programming]], remember? <i>Fortunately, most Pascal compilers lets you turn that feature off. This is not a language issue, but a compiler issue.</i>",
      "id": "aabab39db7ebf5a1df13eaed18873d95"
    },
    {
      "type": "html",
      "text": " Nested function definitions (available in Algol60 and Pascal). [[Alternative Microprocessor Design]] discusses special hardware (\"display registers\") used to make this blazing fast. C was developed on machines that didn't have this hardware.",
      "id": "1b507cfd995ab19b8799427f3cc52d54"
    },
    {
      "type": "html",
      "text": " Garbage collection (available in Lisp since 1960). The original algorithms required the machine to stop everything for several seconds when doing garbage collection, which is utterly inappropriate for a systems programming language that must control real-time hardware with guaranteed delays of no more than a few thousandths of a second. More recent GC algorithms have better characteristics but still have problems for systems programming, such as imposing an extra indirection on every memory access and having high performance only if 6/7ths of memory always goes unused, etc. (I've studied the literature closely.) <i>See [[Oberon System]] for a counter-example.</i>",
      "id": "ed58e2e0ff06432831b893187f46df1e"
    },
    {
      "type": "html",
      "text": " switch/case statements on expressions rather than just small integers (available in Pascal as an alternative to a long series of if-then-elses). These are syntactically attractive and programmer-friendly, but hide the expense of the underlying if-then-else implementation. C programmers use switch on an integer wherever possible, which can be implemented very efficiently (see [[Switch Statement]]). <i>However, switching on complex expressions can also result in smaller, faster code in some cases as well. Again, a compiler issue, not a language issue.</i>",
      "id": "a68065b2da9c4d62a141217e9cf498e7"
    },
    {
      "type": "html",
      "text": " Convenient string manipulation with hidden storage management (Basic 1965, Snobol 1968, etc). Extremely convenient, but can consume hundreds to thousands of instructions to implement a single string operation. <i>Library issue.</i>",
      "id": "5ec304b053abacf4c9141a296678b6ab"
    },
    {
      "type": "html",
      "text": "\nObject oriented languages were introduced around the same time as C (late 1960s to early 1970s), ",
      "id": "0a3141c2c55eceb03aa16f8fb12f8954"
    },
    {
      "type": "html",
      "text": " Twice now someone has changed this to \"1980s\", which is false. Simula67 introduced classes and inheritance in 1967, and Smalltalk was developed in the 70s and Alan Kay coined the term \"object oriented\" in the 1970s. OO merely began to become <b>popular</b> in the 1980s due to Byte articles, the rise of C++, etc. So please do not mis-correct this historical point again. It's not a typo.\nand so some people wonder why C isn't object oriented. Even if it wasn't in the original language, why wasn't it added later? Speed, once again. See also [[Cee Plus Plus Slower Than Cee]] and [[Cee Plus Plus Not Slower Than Cee]].",
      "id": "269b1bfce449270d99c3bee5f8017f7e"
    },
    {
      "type": "html",
      "text": "\n[[Objective Cee]], [[Object Cee]] (a variant created by Apple and BBN) and numerous private variants added object oriented capabilities to [[Cee Language]] while attempting to preserve the performance of [[Cee Language]]. As was mentioned above, such extensions were straightforward for a competent [[Cee Language]] programmer who understood object-oriented practice as it existed in the early eighties. [[Cee Plus Plus]] was, in the opinion of many, one of the less successful attempts to accomplish this extension.",
      "id": "af29954c6382fba2beb6bce41198e924"
    },
    {
      "type": "html",
      "text": "<i>[[Objective Cee]] method calls are more expensive than [[Cee Plus Plus]] virtual function calls, as [[Objective Cee]] uses [[Dynamic Typing]] rather than [[Static Typing]] for the OO part. Calling via [[Dynamic Typing]] is more expensive than static binding - though again, not \"thousands of instructions\" (unless you have a very simplistic implementation which searches the class hierarchy for the correct function to call every time). [[Objective Cee]] doesn't have [[Multiple Inheritance]] (efficient implementations of [[Dynamic Typing]] coupled with [[Multiple Inheritance]] are problematic). I don't believe [[Objective Cee]] has exceptions, either.</i>",
      "id": "3b618324934565618fdaa458f0680c47"
    },
    {
      "type": "html",
      "text": "[Agreed. I'm unclear, however, why more people don't switch to Objective-C when they are unhappy with C++... any thoughts, or has this been addressed well on another page?]",
      "id": "c61a156c727efa01b887101251689397"
    },
    {
      "type": "html",
      "text": "<i>Because why would they? Objective-C doesn't fix any of the common C++ annoyances (at least those of actual C++ programmers). And it doesn't have many of the C++ features. No exceptions, no way to do RAII, etc. Apparently no portable standard library (other than the C library). Objective-C is less efficient, has fewer features, and there's less literature about it.</i>",
      "id": "4bc7f3339f4e4477f39c1a15a088cb4e"
    },
    {
      "type": "html",
      "text": "\n[[Forth Language]] is almost as fast as C, but typically not <b>as</b> fast, since it explicitly uses a stack rather than making it easy for implementations to make efficient use of machine registers, which is critically important to get maximum speed from a cpu. It is also considered somewhat lower-level than C, and the average programmer dislikes its [[Postfix Notation]], and prefers the familiar C/Algol-family [[Infix Notation]] for arithmetic.",
      "id": "c9fb32c0364275d0aeb49cbd79f47a5a"
    },
    {
      "type": "html",
      "text": "However, precisely because it is a stack-oriented language, the compiler is able to trace dataflow substantially better than traditional language implementations, allowing it to emit code every bit as fast as C (such as nearly all commercial Forth systems today) or even <i>faster</i> than C (such as iForth when working with floating point math).  The use of a stack has absolutely, positively <i>nothing</i> to do with making it easier or harder on the register allocator.  What <i>does</i> have the impact, however, are variadic words and words which return varying number of results (e.g., FIND, which returns either (xt -1) for an immediate word, (xt 1) for a normal word, or (addr length 0) if a word designated by the string (addr length) wasn't found.  If FIND instead returned three results for ALL conditions, optimization would be possible.  Note that modern Forth practice <b>strongly</b> encourages uniform input and output signatures, precisely because it makes automated optimization by the compiler easier.)",
      "id": "f3cd4709d7c357a5e57075261b50206b"
    },
    {
      "type": "html",
      "text": "\nFortran is often even faster than C for scientific number crunching, at least on vector supercomputers, but it has never been as general purpose of a language as C; Fortran certainly is not a systems programming language that would be as effective as C for implementing an operating system or a compiler. It is a lower level language and generally considered to be rather primitive, even with recent features added to the standard.",
      "id": "6687fd5fefb384ada2e3c4412ccd20c2"
    },
    {
      "type": "html",
      "text": "\nAs mentioned, Lisp has been made fast...even faster than Fortran for number crunching at one point in the 1970s. But this required heroic efforts, and requires carefully avoiding higher level power constructs. The kind of program that Lisp programmers really enjoy writing in Lisp (e.g. unrestrained recursion that isn't necessarily tail-recursive, use of lexically-scoped outer-scope variables, use of higher order functions, etc) will typically be much slower than the corresponding C program in any implementation.",
      "id": "ae60241e909d42d69773692f7441f36d"
    },
    {
      "type": "html",
      "text": "\nThis begins to get into the rather deep specialty areas of compiler design and cpu architecture, which are considered obscure and arcane even by many programmers (especially application programmers who don't do systems programming, don't care about systems programming, and just want to use languages that are powerful and convenient), so extreme technical detail would be inappropriate here.",
      "id": "b4550727b17521bf637993739e312eaf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "<i>Nothing on this page truly explains why C is a fast language.</i>",
      "id": "739560e6ec38c9ff987577a8eebf486e"
    },
    {
      "type": "html",
      "text": "\n[[Cee Language]] is fast because it was in daily use by an enormous number of dedicated developers who profiled and optimized the bejesus out of it (primarily the \"portable\" C compiler). The (Unix) community into which it was born was the primal open-source community, which welcomed and propagated improvements. The first implementations of [[Cee Language]] did not produce code that was noticeably faster than comparable code written in Pascal. The early Unix community learned, through experience, how to make their environment go faster. Since that environment was written in [[Cee Language]], the language improved as well. The proprietary languages that attempted to compete with [[Cee Language]] could not keep up, mostly because no single company could match the developer resources leveraged by the academic and unix community.",
      "id": "9bec7548418388b25b6420c4b224e4df"
    },
    {
      "type": "html",
      "text": "<i>Overall that's true, but a nitpick: I used the first two [[Pascal Language]] implementations in the world, at [[Cal Berkeley]], on the CDC 6400 and on the PDP 11. The former was on a machine that didn't support C, so no direct comparison was possible. The second was byte coded, and hence far slower than the C compiler. You are doubtless referring to some of the later (but still early) optimizing Pascal compilers, which took a while to come along due to the popularity of the [[Ucsd Pascal]] system (which again was byte coded). So C must have been hands-down faster than any Pascal system for something like the first 8 years of Pascal's existence, until people started seriously applying the state of the art to optimizing Pascal compilers.</i>",
      "id": "a44f1ad6fc2b7c76e4064fb6de57efb9"
    },
    {
      "type": "html",
      "text": "\nMy first-hand experience began in 1982 or so (I was a hardware guy before then), I was using Pascal on a Perq (I worked for Three Rivers at the time) that was optimized for Pascal, and so my very earliest memories are probably atypical. We compiled C into \"C-codes\", because the Perq was microcoded to be <b>blazing</b> (for its time) at bytecoded implementations. By 1983-85, I was working with more vanilla-flavored M68K machines, and the portable C compiler was significantly faster than Pascal. As I recall, it shared a code generator with the Fortran compiler, so Fortran and C did pretty well on those machines.",
      "id": "f080cee8abe2e090d1f09e9f8bde58ff"
    },
    {
      "type": "html",
      "text": "<i>C made significant contributions to the state of the art of optimization and of portable compilers in that era, BTW, long before C became a dominant language.</i>",
      "id": "f5640fef9da5586ed14ae748a45afd59"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "\nPerhaps [[Alternative Microprocessor Design]] would be a better place to discuss this. I'm curious - what about the Perq made it so good for bytecoded implementations? Would those features would still be useful today if I wanted to, say, build a custom [[Fpga Cpu]] that I wanted to run Java? -- [[David Cary]]",
      "id": "fda5b02c05478b120c5a650840d64a11"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "<b>it was the first efficient and portable high-level systems programming language</b>",
      "id": "2f65da400a916e946a99e66ac9088172"
    },
    {
      "type": "html",
      "text": "\nThis may be a controversial claim, but PL/I-S only ran on IBM systems, Burroughs did systems programming in Algol, but only on Burroughs architectures, etc. The apparent exceptions either do not seem to be portable, or if they were (e.g. Fortran), they weren't very widely used for systems programming, because of an impedance mismatch (including inefficiency).",
      "id": "1fe8a7612b42ea46d4d6cf6ef2be4134"
    },
    {
      "type": "html",
      "text": "\n[[Bliss Language]] was effectively used for systems programming, and pioneered many compiler optimizations, but was not portable (PDP 11 only). <i>Actually, that's not quite true; there were Bliss compilers for [[Dec System Twenty]] and the VAX as well (AFAICT; I wasn't there, but I did some research in to it recently as part of a [[Retro Computing]] compiler project). However, this is not as straightforward as it sounds, as Bliss wasn't a single language, but a </i>family<i> of dialects, each optimized for the system (and in some cases, the [[Operating System]]) they ran on. Furthermore, the language evolved substantially over time; thus the Bliss-10 that ran on [[Tops Ten]] in 1970 was quite different from Bliss-11 for RSX-11 in 1978, or Bliss-32 for [[Vms Operating System]] in 1980. There was something called Common Bliss, which was supposedly a subset of all the later dialects, but apparently it was never widely used. [[Comments And Corrections Welcome]]. -- [[Jay Osako]]</i>",
      "id": "27708e12f3eb62dcdab8b1cf3221634a"
    },
    {
      "type": "html",
      "text": "\n[[Forth Language]] might be an exception, except that it is usually considered low-level rather than high-level, it has primarily been used as an embedded language rather than for general systems programming.  <i>(Actually, not true.  When Forth was first employed, it was used to implement multi-user, multitasking, data visualization and processing environments at NRAO.  Its applicability towards embedded development came much later.)</i>",
      "id": "ca1dd43121bbb364125f5a1939f75139"
    },
    {
      "type": "html",
      "text": "\nThe Algol-60-like language 'Imp' from Edinburgh University (a descendant of Atlas Autocode, which itself was ported from the Atlas to the KDF-9) was a high-level language used initially for operating system coding, and later for applications - just like C, but predating it by several years. Imp was widely ported to systems as diverse as the KDF-9, ICL4-50, 4-75/IBM360,370/Amdahl V7, ICL1900, ICL2900, Modular 1, Univac 1108, IBM 7090, CDC Cyber, PDP-9/PDP-11/PDP-15/DEC-10, Interdata 32 series, Perkin-Elmer 3220, Sparc/SunOS, Acorn ARM/Archimedes [[[Acorn Archimedes]]], NS32000/Acorn Panos, Transputer, Ferranti DISC, Z80, 6809, (some HP calculator that has been forgotten), MTS, 68000, Sequent Symmetry, and finally Intel 386.",
      "id": "d853c54bc5d9f2d4ee08d896f936627f"
    },
    {
      "type": "html",
      "text": " I have questions about this, please see newly created [[Imp Language]] page.",
      "id": "98e6c08f4961f1a556e145232c4465ea"
    },
    {
      "type": "html",
      "text": "\nIt has become popular to contradict that C is a \"high-level language\", but by the standards of the 1970s, everyone was happy to consider it one. It is approximately at the same level as Pascal, which attracts much less venom.",
      "id": "394ab905906277f62efdbb7ce463ca17"
    },
    {
      "type": "html",
      "text": "<i>Pascal doesn't allow you to sling pointers around, but C requires some pointer use to even talk to the standard library. Common C style encourages pointer use at a level unheard-of in any language OTHER than assembly, to the point of allowing semi-arbitrary pointer arithmetic. (Fully arbitrary if you freely interchange pointers and integers.) Pascal has the same number of pointers, granted, but the language does a better job of hiding the pesky things. That, and Pascal seems to have a stronger notion of what strings are. (Especially in later non-standard variants. Strings in ISO Pascal are legendarily bad.)</i>",
      "id": "08c48ab90a01801efd0f9b9a57851ef8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "\nMy experiences from system and other performance-oriented programming since 1982 prompts me to claim that (at least for me) the WYSIWYG nature of C is the key to its speed. There will be no hidden calls, creators/destructors etc unless I want them there. I've written so much C code and debugged it in lower-level debuggers to the extent that I can more or less predict what assembly language code will be generated. This, in turn, causes me to avoid certain constructs in certain cases because I'm aware of their performance penalties. Ones that come to mind are using consecutively numbered cases in switch statements and using intermediate pointers to values/structure members so as to make sure the address isn't computed over and over again. The former causes indirect jumps through a vector of addresses as opposed to creating a giant binary test code with lots of CoMPares and (conditional )JuMPs. The latter is especially important on compilers for CISCs with few registers (which forces the compiler to constantly re-use them) and much less important on RISC compilers.",
      "id": "1458fcbc04711540d0ed4e9fad6112b7"
    },
    {
      "type": "html",
      "text": "\nThis is how I can write maintainable C code and others may wonder slightly as to why I chose certain constructs but the code will be understandable.",
      "id": "6c241bcd9b20f08948974dab58f9235b"
    },
    {
      "type": "html",
      "text": "\nI also like to use a (\"semi-arbitrary\") pointer scaling macro which scares the **** out of some but is appreciated by others once they figure it out. Another is pointer subtraction to get the byte offset.",
      "id": "62a79142ea737c017c195d5e162151c6"
    },
    {
      "type": "html",
      "text": "#define pointer_manipulation(base,scale) ((void *)(((char *) base) + scale))",
      "id": "a4dd78bb3fb1b83fa14d037bab6e3998"
    },
    {
      "type": "html",
      "text": "#define pointer_subtraction(base,member) ((int)(((char *) member)-((char *) base)))",
      "id": "8fd09ca5a409a9bedbd4f4f997ddf4df"
    },
    {
      "type": "html",
      "text": "\nI've also implemented the x86 RDTSC instruction which allows me to implement elapsed time measurements inside the application code without significant overhead, not to mention elapsed clock cycles measurements!",
      "id": "bb29b3508bff9b8a680c6343499eb8d2"
    },
    {
      "type": "html",
      "text": "\nIf I write good C code the compiler will produce assembly code which is so fast that I cannot significantly better it by coding manually. Believe me, I've really tried. My favorite compiler is OpenWatcomC, mostly because of its #pragma aux construct which allows specifying inline assembler and what registers the instructions affects. In this way I can streamline the x86's block manipulating instructions into the compiler's optimization work. ",
      "id": "710d2fcde5682cf7b88bed48088d5c0a"
    },
    {
      "type": "html",
      "text": "\nThe only other language I found suitable for working in a manner anywhere similar was PL/M-86 but that language was hampered by its almost complete lack of floating point support. On the other hand, it forced me to dig very deeply into the iEEE754 floating point formats and figure out quite a few really powerful constructs and algorithms.",
      "id": "62bb7cf358fac970db8b9a9b3aca213d"
    },
    {
      "type": "html",
      "text": "\nTo me, a fast (non-interactive) program is one which appears to exit immediately after it has been invoked. Of course, in the time in-between, the program has done everything it should. An acceptably but not impressively fast program is one where computing time is equal to I/O time.",
      "id": "987a2a7b604f374f132ec4749f15e876"
    },
    {
      "type": "html",
      "text": "\nA very interesting site, this. - [[Olof Forshell]]",
      "id": "7cf85cf59ef5865ab7b9af4b684a4cab"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "See some interesting discussion on a comp.compilers post: [http://compilers.iecc.com/comparch/article/98-05-052 compilers.iecc.com].",
      "id": "97da352e767c6350f2e2dbdd5d983a25"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "[[Simplified Wrapper And Interface Generator]] (SWIG) can be used to make calls from many other languages to [[Cee Language]] or [[Cee Plus Plus]] code.",
      "id": "a366653ffe04e3e36fd7aeac4984d984"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "[[Cee Aitch]] (Ch) is C implemented in an interpreter.",
      "id": "f23b63bb3277518bc61743af26c0689c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "See Also:",
      "id": "59289ccd91194219648c485c8c67fcc1"
    },
    {
      "type": "html",
      "text": " [[Cee Plus Plus Road Map]]  (this [[Road Map]] covers C as well as C++)",
      "id": "3378564d1bb1862aa0c05d44411cc8a5"
    },
    {
      "type": "html",
      "text": " [[Is Break Statement Archaic]]",
      "id": "6786d95ea6d4dd2f01815a5250d25a26"
    },
    {
      "type": "html",
      "text": " [[Its Time To Dump Cee Syntax]]",
      "id": "e103ba3de09c71fba3da07f82c4813e7"
    },
    {
      "type": "html",
      "text": " [[Learning Cee]]",
      "id": "8e39bf3a4aeb615cb62fbed7c56e34bd"
    },
    {
      "type": "html",
      "text": " [[Static Code Analysis]] (some lint tools for C)",
      "id": "93def21c718b637c882d5e599c93c99d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "I know many a programming language, but overall I like C the most.  Sure, it's not object-oriented, sure, it's lower level than Java, but I like C. \nBesides, C can do so much.  Maybe not with only the standard library, but even ncurses allows one to make a word processor.",
      "id": "09e0efe9f249da1485c291d1d962f5de"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3e65b1228d24975197384414cdbe9fea"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Category Cee]]",
      "id": "d920ce345b633334c3343debf7932456"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CeeLanguage c2.com]",
      "id": "d31d7111c7a1756c2ab0f443d825a9ba"
    }
  ],
  "journal": [
    {
      "date": 1417535118000,
      "id": "4300643e1700212ebbbacff7ae40a378",
      "type": "create",
      "item": {
        "title": "Cee Language",
        "story": [
          {
            "type": "html",
            "text": "C is a [[System Programming]] language, which also became popular for writing [[Application Program]]s, because",
            "id": "5c10e2d8c234dc474459918dbbbe83ac"
          },
          {
            "type": "html",
            "text": " Kernighan & Ritchie's Unix operating system was adopted within Bell Labs for use on PDP11 computers, and was written in C",
            "id": "d1765ceb8414b1bfca4a9caa76a870fd"
          },
          {
            "type": "html",
            "text": " It was the first efficient and portable high-level systems programming language (see bottom of page for discussion).",
            "id": "3e3c257c94c4be58de0f47fc26228527"
          },
          {
            "type": "html",
            "text": " Early microprocessors were slow and needed the speed advantage.",
            "id": "0a09f5e913f317b4905708a9652d8a12"
          },
          {
            "type": "html",
            "text": " The competitor languages at the time (Basic, PL/I, Fortran, Cobol, and Pascal) had huge problems.",
            "id": "587fd4427ef72288caec1d007b300008"
          },
          {
            "type": "html",
            "text": " Other languages like Lisp were broadly considered unworkable on low-end machines at the time due to speed issues and lack of ability to do external linkage.",
            "id": "b1ceb690f54f0f2468bba47c84ada35b"
          },
          {
            "type": "html",
            "text": "\n3-5 are largely no longer true, and so C is suffering a backlash of criticism for not having the characteristics of an application programming language, such as protecting the average programmer from cutting himself with sharp tools.",
            "id": "bcbfc1c739871e758e9008d1cc527a64"
          },
          {
            "type": "code",
            "text": "  int main()\n  {\n      void (*i_am_bleeding)() = (void(*)())15;\n      i_am_bleeding();\n      return 0;\n  }",
            "id": "b4d56943ddaa98f8cdd579cfd12b2b5c"
          },
          {
            "type": "html",
            "text": "<i>The problem with C is the techniques that help it compete with modern dynamic languages are invariably the techniques that make it dangerous.</i>",
            "id": "a270027c2c296fd87c13a1f6d3e87d38"
          },
          {
            "type": "html",
            "text": "\nThe C language was created by [[Dennis Ritchie]] over the period 1969 through 1973, based on predecessor languages B and BCPL. By '73 it could reimplement Unix on an early PDP 11. Unix had been implemented purely in assembly before that. See [[Kernighan And Ritchie]] (book).",
            "id": "4149ffb1a63bf96792bc76b79a920613"
          },
          {
            "type": "html",
            "text": "\nIt was one of the first successful high-level systems programming languages, and since the 1980s has been the most widely used systems programming languages, mostly displacing assembly code for that purpose. See also [[Bliss Language]].",
            "id": "a187b4fc73c772c8f4499fbe8538cd91"
          },
          {
            "type": "html",
            "text": "\nA very insightful contrarian comment about the nature of C appears in an [[Alexander Stepanov]] (C++ STL designer) interview by Al Stevens in [[Dr Dobbs Journal]] (3/1995) ([http://www.sgi.com/tech/stl/drdobbs-interview.html www.sgi.com]):",
            "id": "600b0eced7c4861e13f8930b841f87c9"
          },
          {
            "type": "html",
            "text": "\"Let's consider now why C is a great language. It is commonly believed that C is a hack which was successful because Unix was written in it. I disagree. Over a long period of time computer architectures evolved, not because of some clever people figuring how to evolve architectures---as a matter of fact, clever people were pushing tagged architectures during that period of time---but because of the demands of different programmers to solve real problems. Computers that were able to deal just with numbers evolved into computers with byte-addressable memory, flat address spaces, and pointers. This was a natural evolution reflecting the growing set of problems that people were solving. <b>C, reflecting the genius of Dennis Ritchie, provided a minimal model of the computer that had evolved over 30 years. C was not a quick hack. As computers evolved to handle all kinds of problems, C, being the minimal model of such a computer, became a very powerful language to solve all kinds of problems in different domains very effectively.</b> This is the secret of C's portability: it is the best representation of an abstract computer that we have. Of course, the abstraction is done over the set of real computers, not some imaginary computational devices. Moreover, people could understand the machine model behind C. It is much easier for an average engineer to understand the machine model behind C than the machine model behind Ada or even Scheme. <b>C succeeded because it was doing the right thing, not because of AT&T promoting it or Unix being written with it.</b>\" (emphasis added)",
            "id": "3299ae94aa1f1bdda33fc5ad6bc7bb5b"
          },
          {
            "type": "html",
            "text": "\nC became successful because it provided a range of data and control structures that were general enough to be sufficient for many programming tasks, but limited enough to be fairly easy to implement efficiently on common computer architectures. Assembly language was in near universal use for systems programming in the 1970s; to be a suitable replacement, C needed to offer comparable speed with improved usability. To that end it offered relative machine independence, structured control constructs (if, while, for), and importantly, [[Text Substitution Macros]], which are widely deplored today but which were wildly popular in [[Assembly Language]]s.",
            "id": "cbf7545cb5b94aeca9d8349a60b68cee"
          },
          {
            "type": "html",
            "text": "\nC supports",
            "id": "203e338556b23d1d2bb6d7c23ba08188"
          },
          {
            "type": "html",
            "text": " characters, integers, floating point numbers, pointers, and multi-dimensional arrays.",
            "id": "7c3610904587363f5e22fe73eaeb3afa"
          },
          {
            "type": "html",
            "text": " user-definable records (\"structures\") including bit-fields",
            "id": "a979d93baa569608c736399dc75e9ebf"
          },
          {
            "type": "html",
            "text": " Infix operators for arithmetic, comparisons, bitwise and/or/xor/not/shift, logical short-circuited and/or/not, ternary [[Conditional Operator]]",
            "id": "34f7e06a576de03f2185e3880f9a8247"
          },
          {
            "type": "html",
            "text": " Basic [[Structured Programming]] control constructs (if, for, while, do-while, [[Switch Statement]], goto)",
            "id": "f2d9e74ce037f69c6d798e2933430545"
          },
          {
            "type": "html",
            "text": " Simple return-stack functions (recursive but not first class, not nested, no [[Lexical Closure]]s, indeed no lexical scoping beyond \"global scope\", \"file scope\", \"block scope\" at all)",
            "id": "9919b4e9caae5649747eaad18da61cfa"
          },
          {
            "type": "html",
            "text": " [[Function Pointer]]s are (almost) first-class entities in C; you cannot create new functions at runtime but a [[Function Pointer]], once bound to a function, can be used like any other object.",
            "id": "95eb4568f83e79ee88d11e5d01d90656"
          },
          {
            "type": "html",
            "text": " [[Assignments Are Expressions]]",
            "id": "b4afac5dfb2a6e7d970ab8d40fbb0743"
          },
          {
            "type": "html",
            "text": " Automatic management of stack-allocated variables local to functions",
            "id": "629fc819c90f26ca817e1037329b4440"
          },
          {
            "type": "html",
            "text": " A [[Cee Standard Library]] of functions for strings, floating point, OS interface, and an innovative portable I/O library (At least, innovative for 1970. By modern standards, stdio is quite limited; the existence of other de-facto standard I/O libraries like that defined in POSIX.1 remedies the situation quite a bit.)",
            "id": "a0bd0cc46b1c7904dc05bb6439f38e7d"
          },
          {
            "type": "html",
            "text": " Very little else",
            "id": "9d279d2309d4496eed19cfeb896c76df"
          },
          {
            "type": "html",
            "text": "<i>A note on the [[Cee Preprocessor]] copied from [[Trivial Do While Loop]]:</i>",
            "id": "c73a16061db66fe15ed69af2e5597082"
          },
          {
            "type": "html",
            "text": "\nFor years it wasn't considered part of the C language per se, and was advocated, designed, and implemented by different people than the rest of C: Alan Snyder, Mike Lesk, and John Reiser. See Ritchie's history of C at [http://cm.bell-labs.com/cm/cs/who/dmr/chist.html cm.bell-labs.com].",
            "id": "6f34dd4ffef091a797b65274f3db9405"
          },
          {
            "type": "html",
            "text": "The design of the preprocessor is horrid in several ways, but on the other hand, Reiser's implementation of it is an amazing case study in how to make software run really, really, really fast. In one environment I used in the 1980s, it was faster than \"cat file.c > /tmp/foo\"! (\"cat\" uses getchar() and the stdio lib was inefficient).",
            "id": "b21105940cb35c58abe7037011635678"
          },
          {
            "type": "html",
            "text": "\nAlthough often criticized for being a \"low-level [[High Level Language]]\", this is also C's strength, allowing very fast [[Machine Code]] to be generated for an especially wide range of types of programs, making it especially suitable for a systems programming language.",
            "id": "07e6f1ee938af4d427c9b94082ce8d93"
          },
          {
            "type": "html",
            "text": "\nA variety of more sophisticated languages have been claimed to be suitable as replacements for C, but as of 2003 there still are no other candidates that are 100% technically successful in matching or surpassing C in its areas of strengths.",
            "id": "e08fb10489190fd5b0f3cab77f31cda5"
          },
          {
            "type": "html",
            "text": "\nOn the other hand, C has been displaced to a noticeable extent in non-systems programming areas, and displaced to a certain (and some say growing) extent even in systems programming, by languages such as C++, Java, Perl, etc.",
            "id": "d46379fa04f4435a25fc7588f34a097d"
          },
          {
            "type": "html",
            "text": "\nThe lack of Object Oriented features in C creates dissatisfaction, but nonetheless [[Cee Plus Plus]] is not universally considered to be a suitable replacement for C due to a large variety of perceived flaws, including complexity.",
            "id": "f114887b66aa6077ddf4ffa72661bdfc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "<i>The most important of the \"object oriented\" features can be implemented in [[Cee Language]] through a combination of convention and macros (see [[Pointer Cast Polymorphism]]). Many programmers who understand enough about object-oriented programming to take advantage of the OO features in [[Cee Plus Plus]] find it easier to simply do the same things in [[Cee Language]].</i>",
            "id": "434852533c5dd3eea95f108405cebd47"
          },
          {
            "type": "html",
            "text": "\nThis has been widely debated. Some people believe it to be true, others do not. I personally find that this approach is better than nothing, but does not give me as much support from the compiler as I would like. I've done OO programming even in [[Assembly Language]], but obviously that doesn't make assembly an OO language.",
            "id": "7fb4eccaa92523181a3c6c143700ec5b"
          },
          {
            "type": "html",
            "text": "<i>[[Objective Cee]] offers more expressive object oriented features than [[Cee Plus Plus]] and doesn't do nearly as much damage to the rest of the language than [[Cee Plus Plus]]. Many of the macro packages were similar (though long gone). I think the point is that there are <b>many</b> choices besides [[Cee Plus Plus]] for C programmers who want object oriented capabilities without having to learn an entirely new language.</i>",
            "id": "b5449da4d2ffdde957cc3c9ff3371560"
          },
          {
            "type": "html",
            "text": "\nAgreed. And [[Objective Cee]] is also a wonderfully small language; I <i>(who?)</i> implemented it on top of a C compiler once, commercially, all by myself in a short period of time. The core language itself, that is; naturally HP licensed the libraries from NeXT.",
            "id": "5cb57fc80ddb3865022b12d816119cfc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "\nDon't forget the most famous example of polymorphism in [[Cee Language]], the table of [[Device Driver]]s at the heart of every unix-like operating system. Every device driver is an object (class: major number, instance: minor number) that implements the standard open/close/read/write/ioctl/poll device interface.",
            "id": "58a1d59750d51001abdd34de64d61b27"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "\nC is a nice low-level general-purpose language, which personally I love but other people tend to get a lazy when it comes to memory management, specifically pointers.",
            "id": "b613e17349f6fbae655f9b6e5552848b"
          },
          {
            "type": "html",
            "text": "\nDefinitely, C is the dominant language today for systems programming. Many (system) software (programs) are written in C. They include Windows, Linux, [[Mac Osx]], etc. -- [[Takuya Murata]]",
            "id": "5cfc01edee5197d5a17ea768b3299e37"
          },
          {
            "type": "html",
            "text": "\n[[Cee Plus Plus]] is an extended language from C. C++ is a superset of C except slight differences.",
            "id": "4793fa0f233f2d12d2afbfad8b7f26ac"
          },
          {
            "type": "html",
            "text": "<i>Not anymore. The most recent C standard, [[Ansi Cee]] 99, contains numerous new incompatiblities with C++ - including doing quite a few things differently than C++ does them and which will likely be difficult for C++ implementors (and the C++ committee) to reconcile. Some think that this was done intentionally - quite a few influential C folks are openly hostile to [[Cee Plus Plus]] (isn't everybody?), and don't like being considered a subset of C++. That said, many of the new extensions are quite useful (well-defined integer types, restrict, vararg macros) and probably should wind up in C++ sooner or later.</i>",
            "id": "89d3b21fe7f4ff51e74c5fadb6c4ffc5"
          },
          {
            "type": "html",
            "text": "<i>While I don't think it is necessary for C to be a near-subset of C++; I do think they should have a usable common subset. I hope the [[Cee Plus Plus]] community finds some way to reconcile these differences. -- [[Scott Johnson]]</i>",
            "id": "06661f38ad2d80ca9ed025e0d31c1dc2"
          },
          {
            "type": "html",
            "text": "\nLooking at a detailed description (e.g. [http://david.tribble.com/text/cdiffs.htm david.tribble.com]) the <i>new incompatibilities</i> do not seem to be so dramatic. Of course, now there are some new ways to write programs that compile under C and are invalid under C++. So, if you really go at it, you'll surely succeed. But the common part of C and C++ is not at all reduced compared to C89 (meaning: you might not use some new C99 features like variable length arrays *). Furthermore there are other modifications in C99 vs. C89 that really brought C closer to C++. So, in practice you needn't lean out of the window too much if you want to write source code that compiles with C and C++ ... (*: In some of the harder cases remember: The preprocessor is your friend :-))",
            "id": "233fe1a5d0c9ec63b2f55444263434fd"
          },
          {
            "type": "html",
            "text": "\nAnyone else. . . have a look at the [[Hello World]] page for examples.",
            "id": "94c0c61366cc58d66db7a4dad57b329b"
          },
          {
            "type": "html",
            "text": "\nSee also [[Brian Kernighan]] and [[Dennis Ritchie]] or maybe even [[Kernighan And Ritchie]]",
            "id": "9a45f4fab3c4b6b44fd3e6618fe5d7e7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "[[Cee Language]] snippet from [[Kernighan And Ritchie]]:",
            "id": "da323a5d142f4b49bce529c964dcfc7e"
          },
          {
            "type": "code",
            "text": " void strcpy(char *from, char *to) {\n    while(*to++ = *from++);\n }",
            "id": "703d6e78361259de3eb622c08a0181dc"
          },
          {
            "type": "html",
            "text": "<i>Is this intentionally wrong?</i>",
            "id": "ee6830e135ec5b0b215dc99674f448fd"
          },
          {
            "type": "html",
            "text": "\nWhat's wrong with it? Is it the fact that the designers care deeply that it should run fast and care little that *from might not be terminated and overrun memory? Is that a problem? <i>That's a user problem...</i> I'd call it a [[Language Usability]] problem.",
            "id": "664873fcd3d71004741297444b54e154"
          },
          {
            "type": "html",
            "text": "<i>Well, actually one thing wrong with it is that the [[Cee Standard Library]] strcpy has the destination argument <b>first</b>...</i>",
            "id": "e7b9743557ffa57e46f9cf39d518d08c"
          },
          {
            "type": "html",
            "text": "\nAnd the other thing wrong is that the standard library defines <i>strcpy</i> to return a <i>char *</i> to the destination string. Besides, from is a const pointer, as we don't modify the source string.",
            "id": "27f225d12cd5b2928d2832ce848d6fda"
          },
          {
            "type": "html",
            "text": "\nfrom the man page:",
            "id": "0862d0d8a504d1271de862ed8c67250f"
          },
          {
            "type": "code",
            "text": " #include <string.h>\n char *strcpy(char *dest, const char *src);",
            "id": "5f5b2b35da5459c7ef641362731b2ad0"
          },
          {
            "type": "html",
            "text": "So I'd say a better try to this particular part of the library would be:",
            "id": "61dfe533067e18a245c8ce7909771b2f"
          },
          {
            "type": "code",
            "text": " char *strcpy(char *to, const char *from) {\n    char * tmp = to;\n    while ( *to++ = *from++ )\n        // look ma, nothing in here, C99 comment style :-)\n        ;\n    return tmp;\n }",
            "id": "86ef9c0f6b2e1673507b29e6c2d2d0bf"
          },
          {
            "type": "html",
            "text": "<i>Except that the arguments are restricted pointers according to the C99 Standard, so even the above isn't quite right. -- [[James Dennett]]</i>",
            "id": "728a68c71e6067a719d87e98abe00057"
          },
          {
            "type": "html",
            "text": "<b>Heretics. The reason strcpy is a library call is to have it optimised for each architecture. The infamous empty-block while() above is 5-30 times slower than dedicated assembly, depending on the architecture.</b>",
            "id": "ab7a4627ec668a10284c77eed8800861"
          },
          {
            "type": "html",
            "text": "\nBTW, it'd be better using <i>char *<b>strncpy</b>(char *to, const char *from, size_t num)</i>, no buffer overflows.",
            "id": "c9f27ce54dabb5eb534634f56569a027"
          },
          {
            "type": "html",
            "text": "''Not necessarily, strncpy doesn't guarantee NUL-termination, so you <b>still</b> have to check the result. Better to explicitly\ncheck, or use a real string library. Don't even think about strncat().''",
            "id": "6d864c2c02efb09187f6932e47653527"
          },
          {
            "type": "html",
            "text": "\nNo you don't.",
            "id": "2d867c00010a1466c8cc6eb5cabc243f"
          },
          {
            "type": "code",
            "text": "  strncpy(dst, src, n);\n  dst[n-1] = 0;",
            "id": "0d418d8ba2ddf9b8dbe75268d2e11b51"
          },
          {
            "type": "html",
            "text": "\nEnd of discussion, and no \"checking\" necessary.  If <i>src</i> is too big to fit in dst, then it would have been truncated anyway.  This is something you'd have to check for with strcpy <i>anyway</i> to prevent a buffer overflow.",
            "id": "63d12650de5952db6a28b2c93862f54a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "No. strncpy() is buggy (or misnamed). See [http://blog.liw.fi/posts/strncpy/ blog.liw.fi]\nIt doesn't guarantee the result is a string and it may copy many more characters than necessary.\nIt can be useful but it *isn't* a string function!",
            "id": "463dd7f7269a005687b20187223ba058"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "\nHere's a dumb newbie question for all you c gurus.... I've been reading through sample code, and seeing a lot of things like this:",
            "id": "3ce814325ebb4933085b9cbd248b4d20"
          },
          {
            "type": "code",
            "text": "    char* this_variable_will_store_a_string",
            "id": "d51439cd3370568b37a8126cedea6d9f"
          },
          {
            "type": "html",
            "text": "Now... my understanding of these things is that char* tells you we're dealing with a pointer to a variable of type character but",
            "id": "0d86b0bdc2d1393581e06c9a82e1542f"
          },
          {
            "type": "html",
            "text": " how big is this variable? (the one being pointed to)",
            "id": "fb53bbda959a38a212912f457494e373"
          },
          {
            "type": "html",
            "text": " <i>Anyone's guess.</i>",
            "id": "a65fe020ba4d6c94c5d9684b7eaabdf4"
          },
          {
            "type": "html",
            "text": " How long can the string be?",
            "id": "5485aa4da0f82de64b765e6e15af17bc"
          },
          {
            "type": "html",
            "text": " <i>As long as the allocated memory permits (note the need for null termination).</i>",
            "id": "9d35103035a246d5e4396c4a7ee2e343"
          },
          {
            "type": "html",
            "text": " How is the memory allocated?",
            "id": "3e4872ddc54617bef3c9fa9951d47e13"
          },
          {
            "type": "html",
            "text": " <i>[[It Depends]]. It could be that the char * is intended to point into a previously declared char[], or it might be intended to point at malloc()ed memory; and the malloc might occur pretty much anywhere.</i>",
            "id": "855ac309b0d7bfb7ea666dd55497cf92"
          },
          {
            "type": "html",
            "text": "\nThanks for answering me so quickly! Here's another question:",
            "id": "c792b77f523bc9e8fe16cc93cbdad641"
          },
          {
            "type": "html",
            "text": " If you try to store a string that is too long in some memory that is not big enough, can you accidently overwrite memory which contains other (possibly very important) data?",
            "id": "6dc5284f3b371dc1a884d5403a75a356"
          },
          {
            "type": "html",
            "text": " <i>Yes. It often happens. C programmers are notoriously lazy about checking for the maximum length of data put into a buffer. The language provides no automatic checking. This type of programming error is often used by crackers to deliberately overwrite data in memory in order to modify values or even take control of the program. See [[Cee Language And Buffer Overflows]]</i>",
            "id": "e9d67ef6e7a5e28ee58a8799f756dafe"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "For copy-style functions, what's the [[Preferred Order Of Src Dst Arguments]]?",
            "id": "1dcb96bbd375bb126eb942b3207dfcf7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "\nHas the [[Cee Language]], Circa1970, passed its [[Use By Date]]?",
            "id": "78563729620be314d19f26b1d5de525a"
          },
          {
            "type": "html",
            "text": "<i>[[Cee Language]] will persist as long as Unix-like systems exist. Also, C is usually the first language ported to a new microprocessor or microcontroller, so C will persist as long as there are [[Embedded Systems]] to develop.</i>",
            "id": "819a765a1ce470dc5f782c904474528f"
          },
          {
            "type": "html",
            "text": "\nWell-written C code is the most portable of any language, since every device has a C compiler, and every language has a mechanism for calling C code (like JNI or CriTCL, for example). Therefore, if you want your library to be usable anywhere and in any language, write it in C.",
            "id": "bc58a43f9f084b01466854c61b394314"
          },
          {
            "type": "html",
            "text": "<i>Also note that some younger languages compile to C.</i>",
            "id": "fa4ddad7b22cb51a029de7a629bff35e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "<b>Why is C [[As Fast As Cee]]?</b>",
            "id": "15a769a8add8316040224c1c5c061e97"
          },
          {
            "type": "html",
            "text": "\nNothing on this page truly explains why C is a fast language. A set of instructions is a set of instructions. Why is one set written in C faster than one say written in Pascal or in basic. <i>Pascal was not necessarily slow, but had a very poor set of built-in I/O functions that made it seem very slow. Basic is generally slowed down by its interpreter. C, from the beginning, was very little \"higher level\" than assembly language. You could generally \"see\" the resulting assembly code from the source code. This allowed expert programmers to write efficient code, though sometimes at the expense of readability. Over time, this emphasis was generally found to be counter-productive for the long term, but at the same time, compiler optimization was making great strides. It's amazing how tight the assembly output can be from a C compiler! (I've looked.)</i>",
            "id": "ee368bcf79d5decb026c37a5e2d4e479"
          },
          {
            "type": "html",
            "text": "\nC is fast because",
            "id": "5c0151bc82cd48c81afaa4a5a2346dec"
          },
          {
            "type": "html",
            "text": " it was designed to be an attractive replacement for [[Assembly Language]] for systems programming the original [[Unix Os]]; most languages are trying to replace other [[High Level Language]]s. In other words, C didn't get used at all until it was nearly as fast as the fastest possible language. This is almost never true of other languages.",
            "id": "644167422107def8b6537aee28fdb388"
          },
          {
            "type": "html",
            "text": " its creator had speed (and small memory size) as the number one goal; most languages are attempting to make programming easier, and then try to improve the implementation (not the design) of the language for speed afterwards (Lisp is an example of a language for which some of the world's brightest people eventually found ways to implement it very fast, and even then they found it superior to build a brand new computer/cpu architecture to support Lisp efficiently. But see point #4 below)",
            "id": "c8f7d3b372b44b5f46c45b79ca7abde1"
          },
          {
            "type": "html",
            "text": " its creator was intimately familiar with machine architecture and compiler technology",
            "id": "fca2acedfd08cdc8eb42315db91b1e19"
          },
          {
            "type": "html",
            "text": " it was designed to be fast on small simple machines, which sort of automatically also makes it fast on big simple computers.  With complex architectures, such as the 6502/65816, 8086 through 80286, et. al., C's performance was lackluster at best since it didn't map well to the more sophisticated features of these architectures.  This is why all modern CPUs offer \"flat\" address spaces today, or \"reduced\" addressing modes, so as to run C software more efficiently (indeed, this was the driving force behind [[Reduced Instruction Set Computer]]s).",
            "id": "b45066303b0200c7ec360d83c78700aa"
          },
          {
            "type": "html",
            "text": " its design attempts to do as much work as possible at compile time, and to leave out any language feature that requires \"unnecessary\" work at run time.",
            "id": "7d490c561d55aa27fb53dfad948d8de2"
          },
          {
            "type": "html",
            "text": " C is derived from B and BCPL, which are even simpler languages with only one type (the machine word). Features in support of making programming easier were added only slowly and grudgingly to make C a more general purpose language, and even then usually only if they had no runtime penalty (e.g. the addition of typedef to the language).",
            "id": "96a83bf33fb7331b13aec75e239d034e"
          },
          {
            "type": "html",
            "text": " Because C only offers low-level simple mechanisms that can be implemented as very fast machine code, programmers tend to use those same mechanisms. In languages that offer higher-level, more complex features, programmers tend to use those, too, making their programs slower than they would be otherwise.",
            "id": "86e6f75063899798edd1240f98b6d536"
          },
          {
            "type": "html",
            "text": " many C constructs translate into a single machine instruction, which from a simplistic point of view, is as fast as something possibly could be",
            "id": "a249f0d299ad8c43fad4d6aadbcd108e"
          },
          {
            "type": "html",
            "text": "\nIt's worthwhile keeping in mind that C originally had to run on a machine with only 24k of RAM, 12k of which was devoted to Unix; later PDP 11 versions had more, but still only 64K of data for RAM and 64K for instructions. So optimization for small memory use was an overriding consideration. To some extent, such an approach happens to also lead to speed optimization as a side effect (not always, but to a noticeable extent).",
            "id": "a755ed2e1c0856b979df7e411c0518a2"
          },
          {
            "type": "html",
            "text": "[I would argue that there is a self reinforcing cycle also in play here.  Most modern benchmarks are written in C (initially because of portability), so processor design tends towards things that make the benchmarks run fast, some of which will have more general applicability to C programs.  Then C gets used more (and more benchmarks get written in it) because it is fast.]",
            "id": "1742099f825794767177bed944f7f0b9"
          },
          {
            "type": "html",
            "text": "\nHere are some examples of features that were used in other languages in the late 1960s/early 1970s that were left out of C very much on purpose in order to make C a faster language:",
            "id": "1e6be574a64dc55b32f50783a5e783a8"
          },
          {
            "type": "html",
            "text": " Array bounds checking (enforced by Pascal). \"But it only takes a few extra machine instructions\", people wail. No, not inside a triply nested inner loop, it doesn't; it can cost millions of instructions per second overall, depending on the application, forcing people to switch to assembler for their inner loops - a last resort that we don't want to encourage. [[System Programming]], remember? <i>Fortunately, most Pascal compilers lets you turn that feature off. This is not a language issue, but a compiler issue.</i>",
            "id": "aabab39db7ebf5a1df13eaed18873d95"
          },
          {
            "type": "html",
            "text": " Nested function definitions (available in Algol60 and Pascal). [[Alternative Microprocessor Design]] discusses special hardware (\"display registers\") used to make this blazing fast. C was developed on machines that didn't have this hardware.",
            "id": "1b507cfd995ab19b8799427f3cc52d54"
          },
          {
            "type": "html",
            "text": " Garbage collection (available in Lisp since 1960). The original algorithms required the machine to stop everything for several seconds when doing garbage collection, which is utterly inappropriate for a systems programming language that must control real-time hardware with guaranteed delays of no more than a few thousandths of a second. More recent GC algorithms have better characteristics but still have problems for systems programming, such as imposing an extra indirection on every memory access and having high performance only if 6/7ths of memory always goes unused, etc. (I've studied the literature closely.) <i>See [[Oberon System]] for a counter-example.</i>",
            "id": "ed58e2e0ff06432831b893187f46df1e"
          },
          {
            "type": "html",
            "text": " switch/case statements on expressions rather than just small integers (available in Pascal as an alternative to a long series of if-then-elses). These are syntactically attractive and programmer-friendly, but hide the expense of the underlying if-then-else implementation. C programmers use switch on an integer wherever possible, which can be implemented very efficiently (see [[Switch Statement]]). <i>However, switching on complex expressions can also result in smaller, faster code in some cases as well. Again, a compiler issue, not a language issue.</i>",
            "id": "a68065b2da9c4d62a141217e9cf498e7"
          },
          {
            "type": "html",
            "text": " Convenient string manipulation with hidden storage management (Basic 1965, Snobol 1968, etc). Extremely convenient, but can consume hundreds to thousands of instructions to implement a single string operation. <i>Library issue.</i>",
            "id": "5ec304b053abacf4c9141a296678b6ab"
          },
          {
            "type": "html",
            "text": "\nObject oriented languages were introduced around the same time as C (late 1960s to early 1970s), ",
            "id": "0a3141c2c55eceb03aa16f8fb12f8954"
          },
          {
            "type": "html",
            "text": " Twice now someone has changed this to \"1980s\", which is false. Simula67 introduced classes and inheritance in 1967, and Smalltalk was developed in the 70s and Alan Kay coined the term \"object oriented\" in the 1970s. OO merely began to become <b>popular</b> in the 1980s due to Byte articles, the rise of C++, etc. So please do not mis-correct this historical point again. It's not a typo.\nand so some people wonder why C isn't object oriented. Even if it wasn't in the original language, why wasn't it added later? Speed, once again. See also [[Cee Plus Plus Slower Than Cee]] and [[Cee Plus Plus Not Slower Than Cee]].",
            "id": "269b1bfce449270d99c3bee5f8017f7e"
          },
          {
            "type": "html",
            "text": "\n[[Objective Cee]], [[Object Cee]] (a variant created by Apple and BBN) and numerous private variants added object oriented capabilities to [[Cee Language]] while attempting to preserve the performance of [[Cee Language]]. As was mentioned above, such extensions were straightforward for a competent [[Cee Language]] programmer who understood object-oriented practice as it existed in the early eighties. [[Cee Plus Plus]] was, in the opinion of many, one of the less successful attempts to accomplish this extension.",
            "id": "af29954c6382fba2beb6bce41198e924"
          },
          {
            "type": "html",
            "text": "<i>[[Objective Cee]] method calls are more expensive than [[Cee Plus Plus]] virtual function calls, as [[Objective Cee]] uses [[Dynamic Typing]] rather than [[Static Typing]] for the OO part. Calling via [[Dynamic Typing]] is more expensive than static binding - though again, not \"thousands of instructions\" (unless you have a very simplistic implementation which searches the class hierarchy for the correct function to call every time). [[Objective Cee]] doesn't have [[Multiple Inheritance]] (efficient implementations of [[Dynamic Typing]] coupled with [[Multiple Inheritance]] are problematic). I don't believe [[Objective Cee]] has exceptions, either.</i>",
            "id": "3b618324934565618fdaa458f0680c47"
          },
          {
            "type": "html",
            "text": "[Agreed. I'm unclear, however, why more people don't switch to Objective-C when they are unhappy with C++... any thoughts, or has this been addressed well on another page?]",
            "id": "c61a156c727efa01b887101251689397"
          },
          {
            "type": "html",
            "text": "<i>Because why would they? Objective-C doesn't fix any of the common C++ annoyances (at least those of actual C++ programmers). And it doesn't have many of the C++ features. No exceptions, no way to do RAII, etc. Apparently no portable standard library (other than the C library). Objective-C is less efficient, has fewer features, and there's less literature about it.</i>",
            "id": "4bc7f3339f4e4477f39c1a15a088cb4e"
          },
          {
            "type": "html",
            "text": "\n[[Forth Language]] is almost as fast as C, but typically not <b>as</b> fast, since it explicitly uses a stack rather than making it easy for implementations to make efficient use of machine registers, which is critically important to get maximum speed from a cpu. It is also considered somewhat lower-level than C, and the average programmer dislikes its [[Postfix Notation]], and prefers the familiar C/Algol-family [[Infix Notation]] for arithmetic.",
            "id": "c9fb32c0364275d0aeb49cbd79f47a5a"
          },
          {
            "type": "html",
            "text": "However, precisely because it is a stack-oriented language, the compiler is able to trace dataflow substantially better than traditional language implementations, allowing it to emit code every bit as fast as C (such as nearly all commercial Forth systems today) or even <i>faster</i> than C (such as iForth when working with floating point math).  The use of a stack has absolutely, positively <i>nothing</i> to do with making it easier or harder on the register allocator.  What <i>does</i> have the impact, however, are variadic words and words which return varying number of results (e.g., FIND, which returns either (xt -1) for an immediate word, (xt 1) for a normal word, or (addr length 0) if a word designated by the string (addr length) wasn't found.  If FIND instead returned three results for ALL conditions, optimization would be possible.  Note that modern Forth practice <b>strongly</b> encourages uniform input and output signatures, precisely because it makes automated optimization by the compiler easier.)",
            "id": "f3cd4709d7c357a5e57075261b50206b"
          },
          {
            "type": "html",
            "text": "\nFortran is often even faster than C for scientific number crunching, at least on vector supercomputers, but it has never been as general purpose of a language as C; Fortran certainly is not a systems programming language that would be as effective as C for implementing an operating system or a compiler. It is a lower level language and generally considered to be rather primitive, even with recent features added to the standard.",
            "id": "6687fd5fefb384ada2e3c4412ccd20c2"
          },
          {
            "type": "html",
            "text": "\nAs mentioned, Lisp has been made fast...even faster than Fortran for number crunching at one point in the 1970s. But this required heroic efforts, and requires carefully avoiding higher level power constructs. The kind of program that Lisp programmers really enjoy writing in Lisp (e.g. unrestrained recursion that isn't necessarily tail-recursive, use of lexically-scoped outer-scope variables, use of higher order functions, etc) will typically be much slower than the corresponding C program in any implementation.",
            "id": "ae60241e909d42d69773692f7441f36d"
          },
          {
            "type": "html",
            "text": "\nThis begins to get into the rather deep specialty areas of compiler design and cpu architecture, which are considered obscure and arcane even by many programmers (especially application programmers who don't do systems programming, don't care about systems programming, and just want to use languages that are powerful and convenient), so extreme technical detail would be inappropriate here.",
            "id": "b4550727b17521bf637993739e312eaf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "<i>Nothing on this page truly explains why C is a fast language.</i>",
            "id": "739560e6ec38c9ff987577a8eebf486e"
          },
          {
            "type": "html",
            "text": "\n[[Cee Language]] is fast because it was in daily use by an enormous number of dedicated developers who profiled and optimized the bejesus out of it (primarily the \"portable\" C compiler). The (Unix) community into which it was born was the primal open-source community, which welcomed and propagated improvements. The first implementations of [[Cee Language]] did not produce code that was noticeably faster than comparable code written in Pascal. The early Unix community learned, through experience, how to make their environment go faster. Since that environment was written in [[Cee Language]], the language improved as well. The proprietary languages that attempted to compete with [[Cee Language]] could not keep up, mostly because no single company could match the developer resources leveraged by the academic and unix community.",
            "id": "9bec7548418388b25b6420c4b224e4df"
          },
          {
            "type": "html",
            "text": "<i>Overall that's true, but a nitpick: I used the first two [[Pascal Language]] implementations in the world, at [[Cal Berkeley]], on the CDC 6400 and on the PDP 11. The former was on a machine that didn't support C, so no direct comparison was possible. The second was byte coded, and hence far slower than the C compiler. You are doubtless referring to some of the later (but still early) optimizing Pascal compilers, which took a while to come along due to the popularity of the [[Ucsd Pascal]] system (which again was byte coded). So C must have been hands-down faster than any Pascal system for something like the first 8 years of Pascal's existence, until people started seriously applying the state of the art to optimizing Pascal compilers.</i>",
            "id": "a44f1ad6fc2b7c76e4064fb6de57efb9"
          },
          {
            "type": "html",
            "text": "\nMy first-hand experience began in 1982 or so (I was a hardware guy before then), I was using Pascal on a Perq (I worked for Three Rivers at the time) that was optimized for Pascal, and so my very earliest memories are probably atypical. We compiled C into \"C-codes\", because the Perq was microcoded to be <b>blazing</b> (for its time) at bytecoded implementations. By 1983-85, I was working with more vanilla-flavored M68K machines, and the portable C compiler was significantly faster than Pascal. As I recall, it shared a code generator with the Fortran compiler, so Fortran and C did pretty well on those machines.",
            "id": "f080cee8abe2e090d1f09e9f8bde58ff"
          },
          {
            "type": "html",
            "text": "<i>C made significant contributions to the state of the art of optimization and of portable compilers in that era, BTW, long before C became a dominant language.</i>",
            "id": "f5640fef9da5586ed14ae748a45afd59"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "\nPerhaps [[Alternative Microprocessor Design]] would be a better place to discuss this. I'm curious - what about the Perq made it so good for bytecoded implementations? Would those features would still be useful today if I wanted to, say, build a custom [[Fpga Cpu]] that I wanted to run Java? -- [[David Cary]]",
            "id": "fda5b02c05478b120c5a650840d64a11"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "<b>it was the first efficient and portable high-level systems programming language</b>",
            "id": "2f65da400a916e946a99e66ac9088172"
          },
          {
            "type": "html",
            "text": "\nThis may be a controversial claim, but PL/I-S only ran on IBM systems, Burroughs did systems programming in Algol, but only on Burroughs architectures, etc. The apparent exceptions either do not seem to be portable, or if they were (e.g. Fortran), they weren't very widely used for systems programming, because of an impedance mismatch (including inefficiency).",
            "id": "1fe8a7612b42ea46d4d6cf6ef2be4134"
          },
          {
            "type": "html",
            "text": "\n[[Bliss Language]] was effectively used for systems programming, and pioneered many compiler optimizations, but was not portable (PDP 11 only). <i>Actually, that's not quite true; there were Bliss compilers for [[Dec System Twenty]] and the VAX as well (AFAICT; I wasn't there, but I did some research in to it recently as part of a [[Retro Computing]] compiler project). However, this is not as straightforward as it sounds, as Bliss wasn't a single language, but a </i>family<i> of dialects, each optimized for the system (and in some cases, the [[Operating System]]) they ran on. Furthermore, the language evolved substantially over time; thus the Bliss-10 that ran on [[Tops Ten]] in 1970 was quite different from Bliss-11 for RSX-11 in 1978, or Bliss-32 for [[Vms Operating System]] in 1980. There was something called Common Bliss, which was supposedly a subset of all the later dialects, but apparently it was never widely used. [[Comments And Corrections Welcome]]. -- [[Jay Osako]]</i>",
            "id": "27708e12f3eb62dcdab8b1cf3221634a"
          },
          {
            "type": "html",
            "text": "\n[[Forth Language]] might be an exception, except that it is usually considered low-level rather than high-level, it has primarily been used as an embedded language rather than for general systems programming.  <i>(Actually, not true.  When Forth was first employed, it was used to implement multi-user, multitasking, data visualization and processing environments at NRAO.  Its applicability towards embedded development came much later.)</i>",
            "id": "ca1dd43121bbb364125f5a1939f75139"
          },
          {
            "type": "html",
            "text": "\nThe Algol-60-like language 'Imp' from Edinburgh University (a descendant of Atlas Autocode, which itself was ported from the Atlas to the KDF-9) was a high-level language used initially for operating system coding, and later for applications - just like C, but predating it by several years. Imp was widely ported to systems as diverse as the KDF-9, ICL4-50, 4-75/IBM360,370/Amdahl V7, ICL1900, ICL2900, Modular 1, Univac 1108, IBM 7090, CDC Cyber, PDP-9/PDP-11/PDP-15/DEC-10, Interdata 32 series, Perkin-Elmer 3220, Sparc/SunOS, Acorn ARM/Archimedes [[[Acorn Archimedes]]], NS32000/Acorn Panos, Transputer, Ferranti DISC, Z80, 6809, (some HP calculator that has been forgotten), MTS, 68000, Sequent Symmetry, and finally Intel 386.",
            "id": "d853c54bc5d9f2d4ee08d896f936627f"
          },
          {
            "type": "html",
            "text": " I have questions about this, please see newly created [[Imp Language]] page.",
            "id": "98e6c08f4961f1a556e145232c4465ea"
          },
          {
            "type": "html",
            "text": "\nIt has become popular to contradict that C is a \"high-level language\", but by the standards of the 1970s, everyone was happy to consider it one. It is approximately at the same level as Pascal, which attracts much less venom.",
            "id": "394ab905906277f62efdbb7ce463ca17"
          },
          {
            "type": "html",
            "text": "<i>Pascal doesn't allow you to sling pointers around, but C requires some pointer use to even talk to the standard library. Common C style encourages pointer use at a level unheard-of in any language OTHER than assembly, to the point of allowing semi-arbitrary pointer arithmetic. (Fully arbitrary if you freely interchange pointers and integers.) Pascal has the same number of pointers, granted, but the language does a better job of hiding the pesky things. That, and Pascal seems to have a stronger notion of what strings are. (Especially in later non-standard variants. Strings in ISO Pascal are legendarily bad.)</i>",
            "id": "08c48ab90a01801efd0f9b9a57851ef8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "\nMy experiences from system and other performance-oriented programming since 1982 prompts me to claim that (at least for me) the WYSIWYG nature of C is the key to its speed. There will be no hidden calls, creators/destructors etc unless I want them there. I've written so much C code and debugged it in lower-level debuggers to the extent that I can more or less predict what assembly language code will be generated. This, in turn, causes me to avoid certain constructs in certain cases because I'm aware of their performance penalties. Ones that come to mind are using consecutively numbered cases in switch statements and using intermediate pointers to values/structure members so as to make sure the address isn't computed over and over again. The former causes indirect jumps through a vector of addresses as opposed to creating a giant binary test code with lots of CoMPares and (conditional )JuMPs. The latter is especially important on compilers for CISCs with few registers (which forces the compiler to constantly re-use them) and much less important on RISC compilers.",
            "id": "1458fcbc04711540d0ed4e9fad6112b7"
          },
          {
            "type": "html",
            "text": "\nThis is how I can write maintainable C code and others may wonder slightly as to why I chose certain constructs but the code will be understandable.",
            "id": "6c241bcd9b20f08948974dab58f9235b"
          },
          {
            "type": "html",
            "text": "\nI also like to use a (\"semi-arbitrary\") pointer scaling macro which scares the **** out of some but is appreciated by others once they figure it out. Another is pointer subtraction to get the byte offset.",
            "id": "62a79142ea737c017c195d5e162151c6"
          },
          {
            "type": "html",
            "text": "#define pointer_manipulation(base,scale) ((void *)(((char *) base) + scale))",
            "id": "a4dd78bb3fb1b83fa14d037bab6e3998"
          },
          {
            "type": "html",
            "text": "#define pointer_subtraction(base,member) ((int)(((char *) member)-((char *) base)))",
            "id": "8fd09ca5a409a9bedbd4f4f997ddf4df"
          },
          {
            "type": "html",
            "text": "\nI've also implemented the x86 RDTSC instruction which allows me to implement elapsed time measurements inside the application code without significant overhead, not to mention elapsed clock cycles measurements!",
            "id": "bb29b3508bff9b8a680c6343499eb8d2"
          },
          {
            "type": "html",
            "text": "\nIf I write good C code the compiler will produce assembly code which is so fast that I cannot significantly better it by coding manually. Believe me, I've really tried. My favorite compiler is OpenWatcomC, mostly because of its #pragma aux construct which allows specifying inline assembler and what registers the instructions affects. In this way I can streamline the x86's block manipulating instructions into the compiler's optimization work. ",
            "id": "710d2fcde5682cf7b88bed48088d5c0a"
          },
          {
            "type": "html",
            "text": "\nThe only other language I found suitable for working in a manner anywhere similar was PL/M-86 but that language was hampered by its almost complete lack of floating point support. On the other hand, it forced me to dig very deeply into the iEEE754 floating point formats and figure out quite a few really powerful constructs and algorithms.",
            "id": "62bb7cf358fac970db8b9a9b3aca213d"
          },
          {
            "type": "html",
            "text": "\nTo me, a fast (non-interactive) program is one which appears to exit immediately after it has been invoked. Of course, in the time in-between, the program has done everything it should. An acceptably but not impressively fast program is one where computing time is equal to I/O time.",
            "id": "987a2a7b604f374f132ec4749f15e876"
          },
          {
            "type": "html",
            "text": "\nA very interesting site, this. - [[Olof Forshell]]",
            "id": "7cf85cf59ef5865ab7b9af4b684a4cab"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "See some interesting discussion on a comp.compilers post: [http://compilers.iecc.com/comparch/article/98-05-052 compilers.iecc.com].",
            "id": "97da352e767c6350f2e2dbdd5d983a25"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "[[Simplified Wrapper And Interface Generator]] (SWIG) can be used to make calls from many other languages to [[Cee Language]] or [[Cee Plus Plus]] code.",
            "id": "a366653ffe04e3e36fd7aeac4984d984"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "[[Cee Aitch]] (Ch) is C implemented in an interpreter.",
            "id": "f23b63bb3277518bc61743af26c0689c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "See Also:",
            "id": "59289ccd91194219648c485c8c67fcc1"
          },
          {
            "type": "html",
            "text": " [[Cee Plus Plus Road Map]]  (this [[Road Map]] covers C as well as C++)",
            "id": "3378564d1bb1862aa0c05d44411cc8a5"
          },
          {
            "type": "html",
            "text": " [[Is Break Statement Archaic]]",
            "id": "6786d95ea6d4dd2f01815a5250d25a26"
          },
          {
            "type": "html",
            "text": " [[Its Time To Dump Cee Syntax]]",
            "id": "e103ba3de09c71fba3da07f82c4813e7"
          },
          {
            "type": "html",
            "text": " [[Learning Cee]]",
            "id": "8e39bf3a4aeb615cb62fbed7c56e34bd"
          },
          {
            "type": "html",
            "text": " [[Static Code Analysis]] (some lint tools for C)",
            "id": "93def21c718b637c882d5e599c93c99d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "I know many a programming language, but overall I like C the most.  Sure, it's not object-oriented, sure, it's lower level than Java, but I like C. \nBesides, C can do so much.  Maybe not with only the standard library, but even ncurses allows one to make a word processor.",
            "id": "09e0efe9f249da1485c291d1d962f5de"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3e65b1228d24975197384414cdbe9fea"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Category Cee]]",
            "id": "d920ce345b633334c3343debf7932456"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CeeLanguage c2.com]",
            "id": "d31d7111c7a1756c2ab0f443d825a9ba"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626127390301
    }
  ]
}