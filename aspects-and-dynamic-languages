{
  "title": "Aspects And Dynamic Languages",
  "story": [
    {
      "type": "html",
      "text": "Programmers used to more dynamic, reflective languages like [[Lisp Language]], [[Smalltalk Language]], [[Python Language]], or [[Ruby Language]] can be found puzzling about what is new enough about this to give it an \"*Oriented<b></b>Programming\" name.",
      "id": "ba34d73fcd0156e4b8ae3d63ef4d42a8"
    },
    {
      "type": "html",
      "text": "<i>AOP is just an extension of [[Object Oriented Programming]]. Both of these tools allow us to more easily achieve [[Code Normalization]].</i>",
      "id": "dc9e2b83af47c20d1509297703389547"
    },
    {
      "type": "html",
      "text": "\nThe [[Ruby Language]] also lets you do this - you can (for example) change the behavior of method invocation or attribute access on a particular object or class of objects, all at run time. For example, you could define your own tracing capability, point it at an object, and suddenly that object traces all accesses to its attributes, all with no change to that object's source. Once you have decent reflection and metaclasses, AOP is just part of the language. -- [[David Thomas]]",
      "id": "9c7142db88a4770dddb4b61fc9cf0033"
    },
    {
      "type": "html",
      "text": "<i>Could you offer an example that would clarify this, please? :)</i>",
      "id": "3091877b49ff37cdd039cdf28e175393"
    },
    {
      "type": "html",
      "text": "\nAny OO language lets you define class methods, like so:",
      "id": "86aac0c12b76f37cb8cb89ebe6d235b1"
    },
    {
      "type": "code",
      "text": " # User.rb\n class User\n   def getRank\n     self.rank\n   end\n ...\n end",
      "id": "ef3c1e52cd8aeebb6215e303ddc0e9f7"
    },
    {
      "type": "html",
      "text": "<b>Ruby</b> also lets you define, at runtime, methods on a predefined class, outside of that class' original definition. This lets you do things such as, say, add a method to a predefined class:",
      "id": "d58bb9d2009da6e9efd1e89167ecf7cc"
    },
    {
      "type": "code",
      "text": " # UserPlus.rb\n # User was already defined in User.rb, but let's add one more method here\n class User\n   def selfEsteemProgram\n     true\n   end\n end",
      "id": "a52dc3929de8237ad7d772dfd574017e"
    },
    {
      "type": "html",
      "text": "In <b>Python</b>, this can be done as:",
      "id": "bec9c4d9c752c99be9b1e85e8c40f8e1"
    },
    {
      "type": "code",
      "text": " # User class already defined, but we add another method here\n User.selfEsteemProgram = lambda x: True",
      "id": "2ddac0de195a58ea99d8f679c1e99fc2"
    },
    {
      "type": "html",
      "text": "Back to <b>Ruby</b>, you can also define, at runtime, methods on individual objects:",
      "id": "1b4ae9bff0cbe8f1bf42f6b45d41df24"
    },
    {
      "type": "code",
      "text": " # happyUsers.rb\n myUser = User.new\n if selfEsteemProgram\n   def myUser.getRank\n     \"Supervisor\"\n   end\n end",
      "id": "d5fcb2d1afd9807db472224b09d0755f"
    },
    {
      "type": "html",
      "text": "And in <b>Python</b>:",
      "id": "0f3b0263358fa2529cccae01e02b2b00"
    },
    {
      "type": "code",
      "text": " myUser = User()\n if myUser.selfEsteemProgram():\n   def f(x): return \"Supervisor\"\n   import new\n   myUser.getRank = new.instancemethod(f, myUser, myUser.__class__)",
      "id": "2510a02c666f6894c79d488acf7a2ca6"
    },
    {
      "type": "html",
      "text": "Also, Ruby's [[Mix In]]s or Python's [[Meta Class]]es might be enough to take care of what AOP is supposed to do.",
      "id": "ecedfc3c5537f62f107987f2cce733f8"
    },
    {
      "type": "html",
      "text": "<i>For Python, see Pyarie ([http://pyarie.wikisophia.org/index.php/AOP pyarie.wikisophia.org]), which uses the Pythius ([http://pythius.sf.net pythius.sf.net]) AOP module. Also [[Trans Warp]] seems to have had some Aspect aspect. ([http://www.zope.org/Members/pje/Wikis/TransWarp/AOPTutorial www.zope.org]). And, finally, there's [http://www.logilab.org//projects/aspects/ www.logilab.org].</i>",
      "id": "dc6fa13edc19675f511b67d1704a4b31"
    },
    {
      "type": "html",
      "text": "\nFor a more detailed/better example of AOP in Ruby, and a rewrite of an AOP refactoring tutorial from [http://www.theserverside.com/articles/article.jsp?l=AspectOrientedRefactoringPart1 www.theserverside.com],\nsee [http://homepages.ihug.com.au/~naseby/16.html homepages.ihug.com.au]. -- [[Anonymous Donor]]",
      "id": "e6affabcb9c8ed8fd31364735d5dde78"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a0276a5581ad09ec919c7ea8deede621"
    },
    {
      "type": "html",
      "text": "[[Io Language]] has similar capabilities to Ruby's. -- [[Jason Grossman]]",
      "id": "4c09c6a0aab061369924dd6a68580c1b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a0276a5581ad09ec919c7ea8deede621"
    },
    {
      "type": "html",
      "text": "[[Category Aspect Orientation]]",
      "id": "c0e3a4df73071bb65bf3a07bcbdc26e3"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AspectsAndDynamicLanguages c2.com]",
      "id": "743c32b68e43b1d019e6613f21494e99"
    }
  ],
  "journal": [
    {
      "date": 1416499540000,
      "id": "e1c509da8604ff94fe8a44bf364e929b",
      "type": "create",
      "item": {
        "title": "Aspects And Dynamic Languages",
        "story": [
          {
            "type": "html",
            "text": "Programmers used to more dynamic, reflective languages like [[Lisp Language]], [[Smalltalk Language]], [[Python Language]], or [[Ruby Language]] can be found puzzling about what is new enough about this to give it an \"*Oriented<b></b>Programming\" name.",
            "id": "ba34d73fcd0156e4b8ae3d63ef4d42a8"
          },
          {
            "type": "html",
            "text": "<i>AOP is just an extension of [[Object Oriented Programming]]. Both of these tools allow us to more easily achieve [[Code Normalization]].</i>",
            "id": "dc9e2b83af47c20d1509297703389547"
          },
          {
            "type": "html",
            "text": "\nThe [[Ruby Language]] also lets you do this - you can (for example) change the behavior of method invocation or attribute access on a particular object or class of objects, all at run time. For example, you could define your own tracing capability, point it at an object, and suddenly that object traces all accesses to its attributes, all with no change to that object's source. Once you have decent reflection and metaclasses, AOP is just part of the language. -- [[David Thomas]]",
            "id": "9c7142db88a4770dddb4b61fc9cf0033"
          },
          {
            "type": "html",
            "text": "<i>Could you offer an example that would clarify this, please? :)</i>",
            "id": "3091877b49ff37cdd039cdf28e175393"
          },
          {
            "type": "html",
            "text": "\nAny OO language lets you define class methods, like so:",
            "id": "86aac0c12b76f37cb8cb89ebe6d235b1"
          },
          {
            "type": "code",
            "text": " # User.rb\n class User\n   def getRank\n     self.rank\n   end\n ...\n end",
            "id": "ef3c1e52cd8aeebb6215e303ddc0e9f7"
          },
          {
            "type": "html",
            "text": "<b>Ruby</b> also lets you define, at runtime, methods on a predefined class, outside of that class' original definition. This lets you do things such as, say, add a method to a predefined class:",
            "id": "d58bb9d2009da6e9efd1e89167ecf7cc"
          },
          {
            "type": "code",
            "text": " # UserPlus.rb\n # User was already defined in User.rb, but let's add one more method here\n class User\n   def selfEsteemProgram\n     true\n   end\n end",
            "id": "a52dc3929de8237ad7d772dfd574017e"
          },
          {
            "type": "html",
            "text": "In <b>Python</b>, this can be done as:",
            "id": "bec9c4d9c752c99be9b1e85e8c40f8e1"
          },
          {
            "type": "code",
            "text": " # User class already defined, but we add another method here\n User.selfEsteemProgram = lambda x: True",
            "id": "2ddac0de195a58ea99d8f679c1e99fc2"
          },
          {
            "type": "html",
            "text": "Back to <b>Ruby</b>, you can also define, at runtime, methods on individual objects:",
            "id": "1b4ae9bff0cbe8f1bf42f6b45d41df24"
          },
          {
            "type": "code",
            "text": " # happyUsers.rb\n myUser = User.new\n if selfEsteemProgram\n   def myUser.getRank\n     \"Supervisor\"\n   end\n end",
            "id": "d5fcb2d1afd9807db472224b09d0755f"
          },
          {
            "type": "html",
            "text": "And in <b>Python</b>:",
            "id": "0f3b0263358fa2529cccae01e02b2b00"
          },
          {
            "type": "code",
            "text": " myUser = User()\n if myUser.selfEsteemProgram():\n   def f(x): return \"Supervisor\"\n   import new\n   myUser.getRank = new.instancemethod(f, myUser, myUser.__class__)",
            "id": "2510a02c666f6894c79d488acf7a2ca6"
          },
          {
            "type": "html",
            "text": "Also, Ruby's [[Mix In]]s or Python's [[Meta Class]]es might be enough to take care of what AOP is supposed to do.",
            "id": "ecedfc3c5537f62f107987f2cce733f8"
          },
          {
            "type": "html",
            "text": "<i>For Python, see Pyarie ([http://pyarie.wikisophia.org/index.php/AOP pyarie.wikisophia.org]), which uses the Pythius ([http://pythius.sf.net pythius.sf.net]) AOP module. Also [[Trans Warp]] seems to have had some Aspect aspect. ([http://www.zope.org/Members/pje/Wikis/TransWarp/AOPTutorial www.zope.org]). And, finally, there's [http://www.logilab.org//projects/aspects/ www.logilab.org].</i>",
            "id": "dc6fa13edc19675f511b67d1704a4b31"
          },
          {
            "type": "html",
            "text": "\nFor a more detailed/better example of AOP in Ruby, and a rewrite of an AOP refactoring tutorial from [http://www.theserverside.com/articles/article.jsp?l=AspectOrientedRefactoringPart1 www.theserverside.com],\nsee [http://homepages.ihug.com.au/~naseby/16.html homepages.ihug.com.au]. -- [[Anonymous Donor]]",
            "id": "e6affabcb9c8ed8fd31364735d5dde78"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a0276a5581ad09ec919c7ea8deede621"
          },
          {
            "type": "html",
            "text": "[[Io Language]] has similar capabilities to Ruby's. -- [[Jason Grossman]]",
            "id": "4c09c6a0aab061369924dd6a68580c1b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a0276a5581ad09ec919c7ea8deede621"
          },
          {
            "type": "html",
            "text": "[[Category Aspect Orientation]]",
            "id": "c0e3a4df73071bb65bf3a07bcbdc26e3"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AspectsAndDynamicLanguages c2.com]",
            "id": "743c32b68e43b1d019e6613f21494e99"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907468474
    }
  ]
}