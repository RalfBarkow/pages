{
  "title": "Source Maps",
  "story": [
    {
      "type": "paragraph",
      "id": "f479123a3915c66a",
      "text": "With languages that have no dedicated IDE, developers have to rely on external debuggers provided by browsers such as [[Firebug]], and [[Chrome DevTools]]. Although such debuggers allow breakpointing, single-stepping, and examining of code and data, they operate on the generated Javascript code. Developers have to deal with the cumbersome activity of tracking back the original code to introduce fixes. An interesting workaround is to rely on Javascript [[source maps]]. Source Maps, were initially introduced to allow web browser debuggers to retrieve and display the original Javascript code, while running a minified version that enables faster code loading over the network. This solution has been successfully applied to languages that compile to Javascript such as [[CoffeeScript]] or [[TypeScript]]. The map allows the Javascript engine to match up the Javascript code being evaluated with source developed in the host language. (p. 5–6)"
    },
    {
      "type": "pagefold",
      "id": "4107d4d2b93b0065",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "e5e555326296477a",
      "text": "N. Bouraqadi, D. Mason, [[Test-Driven Development for Generated Portable Javascript Apps]], Sci. Comput. Program. (2018), https://doi.org/10.1016/j.scico.2018.02.003"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Source Maps",
        "story": []
      },
      "date": 1649783554332
    },
    {
      "item": {
        "type": "factory",
        "id": "f479123a3915c66a"
      },
      "id": "f479123a3915c66a",
      "type": "add",
      "date": 1649783612393
    },
    {
      "type": "edit",
      "id": "f479123a3915c66a",
      "item": {
        "type": "paragraph",
        "id": "f479123a3915c66a",
        "text": "With languages that have no dedicated IDE, developers have to rely on external debuggers provided by browsers such as Firebug [10], and Chrome DevTools [11]. Although such debuggers allow breakpointing, single-stepping, and examining of code and data, they operate on the generated Javascript code. Developers have to deal with the cumbersome activity of tracking back the original code to introduce fixes. An interesting workaround is to rely on Javascript source maps [12]. Source Maps, were initially introduced to allow web browser debuggers to retrieve and display the original Javascript code, while running a minified version that enables faster code loading over the network. This solution has been successfully applied to languages that compile to Javascript such as CoffeeScript [13]or TypeScript [14]."
      },
      "date": 1649783613910
    },
    {
      "type": "edit",
      "id": "f479123a3915c66a",
      "item": {
        "type": "paragraph",
        "id": "f479123a3915c66a",
        "text": "With languages that have no dedicated IDE, developers have to rely on external debuggers provided by browsers such as Firebug [10], and Chrome DevTools [11]. Although such debuggers allow breakpointing, single-stepping, and examining of code and data, they operate on the generated Javascript code. Developers have to deal with the cumbersome activity of tracking back the original code to introduce fixes. An interesting workaround is to rely on Javascript source maps [12]. Source Maps, were initially introduced to allow web browser debuggers to retrieve and display the original Javascript code, while running a minified version that enables faster code loading over the network. This solution has been successfully applied to languages that compile to Javascript such as [[CoffeeScript]] or [[TypeScript]]. (p. 5)"
      },
      "date": 1649783652829
    },
    {
      "id": "4107d4d2b93b0065",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "4107d4d2b93b0065",
        "text": "~"
      },
      "after": "f479123a3915c66a",
      "date": 1649783655776
    },
    {
      "id": "e5e555326296477a",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "e5e555326296477a",
        "text": "N. Bouraqadi, D. Mason, [[Test-Driven Development for Generated Portable Javascript Apps]], Sci. Comput. Program. (2018), https://doi.org/10.1016/j.scico.2018.02.003"
      },
      "after": "4107d4d2b93b0065",
      "date": 1649783658431
    },
    {
      "type": "edit",
      "id": "f479123a3915c66a",
      "item": {
        "type": "paragraph",
        "id": "f479123a3915c66a",
        "text": "With languages that have no dedicated IDE, developers have to rely on external debuggers provided by browsers such as [[Firebug]], and [[Chrome DevTools]]. Although such debuggers allow breakpointing, single-stepping, and examining of code and data, they operate on the generated Javascript code. Developers have to deal with the cumbersome activity of tracking back the original code to introduce fixes. An interesting workaround is to rely on Javascript source maps [12]. Source Maps, were initially introduced to allow web browser debuggers to retrieve and display the original Javascript code, while running a minified version that enables faster code loading over the network. This solution has been successfully applied to languages that compile to Javascript such as [[CoffeeScript]] or [[TypeScript]]. (p. 5)"
      },
      "date": 1649783703180
    },
    {
      "type": "edit",
      "id": "f479123a3915c66a",
      "item": {
        "type": "paragraph",
        "id": "f479123a3915c66a",
        "text": "With languages that have no dedicated IDE, developers have to rely on external debuggers provided by browsers such as [[Firebug]], and [[Chrome DevTools]]. Although such debuggers allow breakpointing, single-stepping, and examining of code and data, they operate on the generated Javascript code. Developers have to deal with the cumbersome activity of tracking back the original code to introduce fixes. An interesting workaround is to rely on Javascript [[source maps]]. Source Maps, were initially introduced to allow web browser debuggers to retrieve and display the original Javascript code, while running a minified version that enables faster code loading over the network. This solution has been successfully applied to languages that compile to Javascript such as [[CoffeeScript]] or [[TypeScript]]. (p. 5)"
      },
      "date": 1649783732196
    },
    {
      "type": "edit",
      "id": "f479123a3915c66a",
      "item": {
        "type": "paragraph",
        "id": "f479123a3915c66a",
        "text": "With languages that have no dedicated IDE, developers have to rely on external debuggers provided by browsers such as [[Firebug]], and [[Chrome DevTools]]. Although such debuggers allow breakpointing, single-stepping, and examining of code and data, they operate on the generated Javascript code. Developers have to deal with the cumbersome activity of tracking back the original code to introduce fixes. An interesting workaround is to rely on Javascript [[source maps]]. Source Maps, were initially introduced to allow web browser debuggers to retrieve and display the original Javascript code, while running a minified version that enables faster code loading over the network. This solution has been successfully applied to languages that compile to Javascript such as [[CoffeeScript]] or [[TypeScript]]. The map allows the Javascript engine to match up the Javascript (p. 5–6)"
      },
      "date": 1649783767222
    },
    {
      "type": "edit",
      "id": "f479123a3915c66a",
      "item": {
        "type": "paragraph",
        "id": "f479123a3915c66a",
        "text": "With languages that have no dedicated IDE, developers have to rely on external debuggers provided by browsers such as [[Firebug]], and [[Chrome DevTools]]. Although such debuggers allow breakpointing, single-stepping, and examining of code and data, they operate on the generated Javascript code. Developers have to deal with the cumbersome activity of tracking back the original code to introduce fixes. An interesting workaround is to rely on Javascript [[source maps]]. Source Maps, were initially introduced to allow web browser debuggers to retrieve and display the original Javascript code, while running a minified version that enables faster code loading over the network. This solution has been successfully applied to languages that compile to Javascript such as [[CoffeeScript]] or [[TypeScript]]. The map allows the Javascript engine to match up the Javascript code being evaluated with source developed in the host language. (p. 5–6)"
      },
      "date": 1649783781201
    },
    {
      "type": "fork",
      "date": 1649784643792
    }
  ]
}