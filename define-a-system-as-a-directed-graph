{
  "title": "Define a System as a Directed Graph",
  "story": [
    {
      "type": "paragraph",
      "id": "67c91aae9a22d689",
      "text": "In this paper, we introduce a new functional reactive programming (FRP) language Emfrp designed to support small-scale embedded systems. An Emfrp program defines a system as a fixed directed graph whose nodes correspond to the time-varying values in the system. The language equips a simple mechanism that enables each node to refer the past values of arbitrary nodes. Using this mechanism, Emfrp provides simplicity and flexibility for describing complex time-dependent reactive behaviors without space and time leaks. Our Emfrp compiler produces platform-independent ANSI-C code that can run on multiple processors including resource constrained microcontrollers. To demonstrate the capabilities of the language, we show a simple but non-trivial example application."
    },
    {
      "type": "pagefold",
      "id": "5626098c9fc74ee8",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "41ac515f14bfa8f2",
      "text": "Emfrp: a functional reactive programming language for small-scale embedded systems | Companion Proceedings of the 15th International Conference on Modularity, [no date]. In: … Available from: https://dl.acm.org/doi/10.1145/2892664.2892670 [Accessed 30 March 2024]."
    },
    {
      "type": "markdown",
      "id": "5569925b66e2d585",
      "text": "## Design Considerations"
    },
    {
      "type": "paragraph",
      "id": "017d0bf2e202df4b",
      "text": "Expressing time-varying values and events is the central topic of FRP language design. Existing FRP languages and frameworks, such as [[Elm]][4] and Yampa[10, 6, 2], treat time-varying values as first-class data using types that encapsulate time dependencies. Types (or type constructors) for the purpose are either built-in (e.g., Signal in Elm) or user-defined using sophisticated type constructors such as arrows[7]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Define a System as a Directed Graph",
        "story": []
      },
      "date": 1711836288684
    },
    {
      "item": {
        "type": "factory",
        "id": "67c91aae9a22d689"
      },
      "id": "67c91aae9a22d689",
      "type": "add",
      "date": 1711836290694
    },
    {
      "type": "edit",
      "id": "67c91aae9a22d689",
      "item": {
        "type": "paragraph",
        "id": "67c91aae9a22d689",
        "text": "Emfrp: a functional reactive programming language for small-scale embedded systems | Companion Proceedings of the 15th International Conference on Modularity, [no date]. In: … Available from: https://dl.acm.org/doi/10.1145/2892664.2892670 [Accessed 30 March 2024]. \n"
      },
      "date": 1711836309476
    },
    {
      "type": "edit",
      "id": "67c91aae9a22d689",
      "item": {
        "type": "paragraph",
        "id": "67c91aae9a22d689",
        "text": "In this paper, we introduce a new functional reactive programming (FRP) language Emfrp designed to support small-scale embedded systems. An Emfrp program defines a system as a fixed directed graph whose nodes correspond to the time-varying values in the system. The language equips a simple mechanism that enables each node to refer the past values of arbitrary nodes. Using this mechanism, Emfrp provides simplicity and flexibility for describing complex time-dependent reactive behaviors without space and time leaks. Our Emfrp compiler produces platform-independent ANSIC code that can run on multiple processors including resource constrained microcontrollers. To demonstrate the capabilities of the language, we show a simple but non-trivial example application."
      },
      "date": 1711836348105
    },
    {
      "type": "add",
      "id": "41ac515f14bfa8f2",
      "item": {
        "type": "paragraph",
        "id": "41ac515f14bfa8f2",
        "text": "Emfrp: a functional reactive programming language for small-scale embedded systems | Companion Proceedings of the 15th International Conference on Modularity, [no date]. In: … Available from: https://dl.acm.org/doi/10.1145/2892664.2892670 [Accessed 30 March 2024]."
      },
      "after": "67c91aae9a22d689",
      "date": 1711836348638
    },
    {
      "item": {
        "type": "factory",
        "id": "5626098c9fc74ee8"
      },
      "id": "5626098c9fc74ee8",
      "type": "add",
      "after": "41ac515f14bfa8f2",
      "date": 1711836351799
    },
    {
      "id": "5626098c9fc74ee8",
      "type": "move",
      "order": [
        "67c91aae9a22d689",
        "5626098c9fc74ee8",
        "41ac515f14bfa8f2"
      ],
      "date": 1711836353979
    },
    {
      "type": "edit",
      "id": "5626098c9fc74ee8",
      "item": {
        "type": "pagefold",
        "id": "5626098c9fc74ee8",
        "text": "~"
      },
      "date": 1711836359963
    },
    {
      "type": "edit",
      "id": "67c91aae9a22d689",
      "item": {
        "type": "paragraph",
        "id": "67c91aae9a22d689",
        "text": "In this paper, we introduce a new functional reactive programming (FRP) language Emfrp designed to support small-scale embedded systems. An Emfrp program defines a system as a fixed directed graph whose nodes correspond to the time-varying values in the system. The language equips a simple mechanism that enables each node to refer the past values of arbitrary nodes. Using this mechanism, Emfrp provides simplicity and flexibility for describing complex time-dependent reactive behaviors without space and time leaks. Our Emfrp compiler produces platform-independent ANSI-C code that can run on multiple processors including resource constrained microcontrollers. To demonstrate the capabilities of the language, we show a simple but non-trivial example application."
      },
      "date": 1711836409839
    },
    {
      "item": {
        "type": "factory",
        "id": "5569925b66e2d585"
      },
      "id": "5569925b66e2d585",
      "type": "add",
      "after": "41ac515f14bfa8f2",
      "date": 1711836557429
    },
    {
      "type": "edit",
      "id": "5569925b66e2d585",
      "item": {
        "type": "paragraph",
        "id": "5569925b66e2d585",
        "text": "## Design Considerations"
      },
      "date": 1711836563780
    },
    {
      "item": {
        "type": "factory",
        "id": "017d0bf2e202df4b"
      },
      "id": "017d0bf2e202df4b",
      "type": "add",
      "after": "5569925b66e2d585",
      "date": 1711836577939
    },
    {
      "type": "edit",
      "id": "017d0bf2e202df4b",
      "item": {
        "type": "paragraph",
        "id": "017d0bf2e202df4b",
        "text": "Expressing time-varying values and events is the central topic of FRP language design. Existing FRP languages and frameworks, such as Elm[4] and Yampa[10, 6, 2], treat time-varying values as first-class data using types that encapsulate time dependencies. Types (or type constructors) for the purpose are either built-in (e.g., Signal in Elm) or user-defined using sophisticated type constructors such as arrows[7]."
      },
      "date": 1711836579536
    },
    {
      "type": "edit",
      "id": "5569925b66e2d585",
      "item": {
        "type": "markdown",
        "id": "5569925b66e2d585",
        "text": "## Design Considerations"
      },
      "date": 1711836958723
    },
    {
      "type": "edit",
      "id": "017d0bf2e202df4b",
      "item": {
        "type": "paragraph",
        "id": "017d0bf2e202df4b",
        "text": "Expressing time-varying values and events is the central topic of FRP language design. Existing FRP languages and frameworks, such as [[Elm]][4] and Yampa[10, 6, 2], treat time-varying values as first-class data using types that encapsulate time dependencies. Types (or type constructors) for the purpose are either built-in (e.g., Signal in Elm) or user-defined using sophisticated type constructors such as arrows[7]."
      },
      "date": 1711836971466
    }
  ]
}