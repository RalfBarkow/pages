{
  "title": "Feature Creep",
  "story": [
    {
      "type": "html",
      "text": "The tendency to add \"just another little feature\" ...until the whole product is overwhelmed with them.",
      "id": "493b7801981bc6d1a2ee62afd06f5f0a"
    },
    {
      "type": "html",
      "text": "\nExamples: [[Perl Language]], most [[Micro Soft]] products.",
      "id": "b3102aab692ee0eb9e6e37a776dac727"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d9ab60113b40f29c12f45258632a1cc"
    },
    {
      "type": "html",
      "text": "\nSince there are still people who in all seriousness suggest that adding a new feature is better than fixing a bug, on this wiki no less!, it behooves us to explain, or at least to prove beyond the shadow of a doubt, why such an attitude is backwards and antedeluvian.",
      "id": "e76c5a51bda218bd688ebff06ed08e6a"
    },
    {
      "type": "html",
      "text": "\nThe generalization of the following to all software development should be obvious. From Sensible design principles for new networks and services ([http://www.firstmonday.org/issues/issue10_1/kilkki/ www.firstmonday.org])",
      "id": "f0f786869ece1557d74538ced4c931f8"
    },
    {
      "type": "html",
      "text": "\nOur studies about the usefulness of communication services indicate that a small set of basic features is able to provide a great majority of benefits (Pohjola and Kilkki, 2004). Any additional feature, for instance a QoS mechanism, typically provides only a marginal gain that is easily lost due to the additional efforts needed to manage and operate the network. Therefore, although it may seem reasonable to develop a new capability, the following matters must be carefully considered:",
      "id": "33504384bb1049c66069215d7c143c1e"
    },
    {
      "type": "html",
      "text": " Better service for a set of users does not imply better user experience in general, because better service for someone usually means worse or no service for some other users.",
      "id": "1fb350b51712815a2430e17af49b44cc"
    },
    {
      "type": "html",
      "text": " Better technical performance does not directly imply better business performance, because the relationship between transmitted bytes and operator profit varies vastly from case to case.",
      "id": "8bfdc140a8974bb7a41b7e3870313653"
    },
    {
      "type": "html",
      "text": " Complex methods to boost performance or service quality are likely to generate complex interactions that may seriously complicate network management, and actually cancel out any positive effects.",
      "id": "05f692c3273fd151069b9e9ab280de70"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d9ab60113b40f29c12f45258632a1cc"
    },
    {
      "type": "html",
      "text": "\nBeing a fan of toaster ovens, I've observed bloat over the years in the front panels. The old style ones had just two sliders/knobs: temperature and duration. (Perhaps a third option, fan level could be considered.) Now they have too many buttons and too many modes, often buttons for specific foods. Newbies cannot use them without training, spending lots of time experimenting, or reading the manual. I'd rather go back to the 2 or 3 sliders, but perhaps with a digital read-out to better monitor the levels. It is easier to bump a slider up or down than push 3 buttons roughly 8 times total. We've regressed.",
      "id": "61a422278d3fc514b2ace6ed3f5e0a4b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d9ab60113b40f29c12f45258632a1cc"
    },
    {
      "type": "html",
      "text": "The worst example of this IMO are the on-screen monitor 'control panels' instead of using the obvious one-per-button control. Every monitor is different and it takes me 40x longer to adjust brightness. I used to just move a slider/button and directly adjust it. Now I have to press Menu, plus and minus buttons, option buttons, etc, navigating some arcane proprietary UI that won't exit until I wait 5 seconds.",
      "id": "1eb4ee0e6615198b6a3543c48d8f280f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d9ab60113b40f29c12f45258632a1cc"
    },
    {
      "type": "html",
      "text": "\nSee also [[Creeping Featuritis]], [[Language Idiom Clutter]], and [[Feature Interaction]].",
      "id": "8e08cb5f556dbfc28088ab81b524327d"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?FeatureCreep c2.com]",
      "id": "292dc17b1f9f4ae01046822e533f75b0"
    }
  ],
  "journal": [
    {
      "date": 1415817008000,
      "id": "f46aa4244e73b66b5ceb200ccff4b3e1",
      "type": "create",
      "item": {
        "title": "Feature Creep",
        "story": [
          {
            "type": "html",
            "text": "The tendency to add \"just another little feature\" ...until the whole product is overwhelmed with them.",
            "id": "493b7801981bc6d1a2ee62afd06f5f0a"
          },
          {
            "type": "html",
            "text": "\nExamples: [[Perl Language]], most [[Micro Soft]] products.",
            "id": "b3102aab692ee0eb9e6e37a776dac727"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d9ab60113b40f29c12f45258632a1cc"
          },
          {
            "type": "html",
            "text": "\nSince there are still people who in all seriousness suggest that adding a new feature is better than fixing a bug, on this wiki no less!, it behooves us to explain, or at least to prove beyond the shadow of a doubt, why such an attitude is backwards and antedeluvian.",
            "id": "e76c5a51bda218bd688ebff06ed08e6a"
          },
          {
            "type": "html",
            "text": "\nThe generalization of the following to all software development should be obvious. From Sensible design principles for new networks and services ([http://www.firstmonday.org/issues/issue10_1/kilkki/ www.firstmonday.org])",
            "id": "f0f786869ece1557d74538ced4c931f8"
          },
          {
            "type": "html",
            "text": "\nOur studies about the usefulness of communication services indicate that a small set of basic features is able to provide a great majority of benefits (Pohjola and Kilkki, 2004). Any additional feature, for instance a QoS mechanism, typically provides only a marginal gain that is easily lost due to the additional efforts needed to manage and operate the network. Therefore, although it may seem reasonable to develop a new capability, the following matters must be carefully considered:",
            "id": "33504384bb1049c66069215d7c143c1e"
          },
          {
            "type": "html",
            "text": " Better service for a set of users does not imply better user experience in general, because better service for someone usually means worse or no service for some other users.",
            "id": "1fb350b51712815a2430e17af49b44cc"
          },
          {
            "type": "html",
            "text": " Better technical performance does not directly imply better business performance, because the relationship between transmitted bytes and operator profit varies vastly from case to case.",
            "id": "8bfdc140a8974bb7a41b7e3870313653"
          },
          {
            "type": "html",
            "text": " Complex methods to boost performance or service quality are likely to generate complex interactions that may seriously complicate network management, and actually cancel out any positive effects.",
            "id": "05f692c3273fd151069b9e9ab280de70"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d9ab60113b40f29c12f45258632a1cc"
          },
          {
            "type": "html",
            "text": "\nBeing a fan of toaster ovens, I've observed bloat over the years in the front panels. The old style ones had just two sliders/knobs: temperature and duration. (Perhaps a third option, fan level could be considered.) Now they have too many buttons and too many modes, often buttons for specific foods. Newbies cannot use them without training, spending lots of time experimenting, or reading the manual. I'd rather go back to the 2 or 3 sliders, but perhaps with a digital read-out to better monitor the levels. It is easier to bump a slider up or down than push 3 buttons roughly 8 times total. We've regressed.",
            "id": "61a422278d3fc514b2ace6ed3f5e0a4b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d9ab60113b40f29c12f45258632a1cc"
          },
          {
            "type": "html",
            "text": "The worst example of this IMO are the on-screen monitor 'control panels' instead of using the obvious one-per-button control. Every monitor is different and it takes me 40x longer to adjust brightness. I used to just move a slider/button and directly adjust it. Now I have to press Menu, plus and minus buttons, option buttons, etc, navigating some arcane proprietary UI that won't exit until I wait 5 seconds.",
            "id": "1eb4ee0e6615198b6a3543c48d8f280f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d9ab60113b40f29c12f45258632a1cc"
          },
          {
            "type": "html",
            "text": "\nSee also [[Creeping Featuritis]], [[Language Idiom Clutter]], and [[Feature Interaction]].",
            "id": "8e08cb5f556dbfc28088ab81b524327d"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?FeatureCreep c2.com]",
            "id": "292dc17b1f9f4ae01046822e533f75b0"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1708068746590
    }
  ]
}