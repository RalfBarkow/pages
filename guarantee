{
  "title": "Guarantee",
  "story": [
    {
      "type": "paragraph",
      "id": "eaa1eabf9dbe461f",
      "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
    },
    {
      "type": "audio",
      "id": "0c7f5903c3db90c2",
      "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/d1c5f97c-9700-48b0-ab35-a039edbfd0d5/audio/16dc506d-5aa1-42c1-8838-9ffaa3e0e1e9/default_tc.mp3\nelm radio – 080: Elm and AI [https://elm-radio.com/episode/elm-and-ai/ page]"
    },
    {
      "type": "paragraph",
      "id": "2218dae6fe5fb4c7",
      "text": "[00:08:48]\nWe do not accept half guarantees, right?"
    },
    {
      "type": "paragraph",
      "id": "91ba01f05fafd636",
      "text": "[00:09:57]\nSo then when you're talking about guarantees and then AI that's prone to [[Hallucination]],\n[00:10:03]\nthat becomes an interesting question, right?\n[00:10:05]\nNow I actually am pretty confident about our ability to do useful things with that.\n[00:10:12]\nMaybe that's counterintuitive because I'm talking about how much we care about guarantees\n[00:10:18]\nand then talking about hallucination.\n[00:10:20]\nI'm actually very reluctant to integrate things like GitHub copilot suggestions into my code\n[00:10:27]\nbecause I think it's a very easy way to introduce subtle bugs."
    },
    {
      "type": "paragraph",
      "id": "8c1e47b90aac18ad",
      "text": "[00:10:32]\nBut the way I'm thinking about how AI fits into my workflow for writing Elm code and\n[00:10:39]\nmy sort of ideals for tools that involve like trusting my tools so that I can do critical\n[00:10:48]\nthinking and then delegate certain types of problems with complete trust to a tool, right?\n[00:10:55]\nThose two things do fit together, but not out of the box."
    },
    {
      "type": "paragraph",
      "id": "4e70f01bdb1b70f3",
      "text": "[00:11:04]\n[…], I was playing around with GitHub copilot, which for anyone who hasn't used\n[00:11:08]\nit, it's now a paid tool, but it will give you sort of fancy AI assisted, GPT assisted\n[00:11:17]\nauto completions in your editor."
    },
    {
      "type": "paragraph",
      "id": "cc2bbfba16ad7382",
      "text": "[00:12:06]\nIn some cases, I'll trust it.\n[00:12:08]\nI will have a custom type with four variants, and I will write out a function that says\n[00:12:15]\nmy custom type to string, and then it fills it in perfectly.\n[00:12:19]\nAnd it's impressive, but there are certain things like that, that I have an intuition\n[00:12:27]\nthat it's going to be really good and trustworthy at solving.\n[00:12:30]\nThat said, it does hallucinate certain things."
    },
    {
      "type": "paragraph",
      "id": "a0ea1059de7819e3",
      "text": "⇒ [[Prompt Engineering]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Guarantee",
        "story": []
      },
      "date": 1681920562388
    },
    {
      "id": "eaa1eabf9dbe461f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "eaa1eabf9dbe461f",
        "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
      },
      "attribution": {
        "page": "Hallucination"
      },
      "date": 1681920565907
    },
    {
      "id": "0c7f5903c3db90c2",
      "type": "add",
      "item": {
        "type": "audio",
        "id": "0c7f5903c3db90c2",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/d1c5f97c-9700-48b0-ab35-a039edbfd0d5/audio/16dc506d-5aa1-42c1-8838-9ffaa3e0e1e9/default_tc.mp3\nelm radio – 080: Elm and AI [https://elm-radio.com/episode/elm-and-ai/ page]"
      },
      "after": "eaa1eabf9dbe461f",
      "attribution": {
        "page": "Hallucination"
      },
      "date": 1681920568227
    },
    {
      "item": {
        "type": "factory",
        "id": "2218dae6fe5fb4c7"
      },
      "id": "2218dae6fe5fb4c7",
      "type": "add",
      "after": "0c7f5903c3db90c2",
      "date": 1681920671484
    },
    {
      "type": "edit",
      "id": "2218dae6fe5fb4c7",
      "item": {
        "type": "paragraph",
        "id": "2218dae6fe5fb4c7",
        "text": "[00:08:48]\nWe do not accept half guarantees, right?"
      },
      "date": 1681920673760
    },
    {
      "item": {
        "type": "factory",
        "id": "91ba01f05fafd636"
      },
      "id": "91ba01f05fafd636",
      "type": "add",
      "after": "2218dae6fe5fb4c7",
      "date": 1681920758743
    },
    {
      "type": "edit",
      "id": "91ba01f05fafd636",
      "item": {
        "type": "paragraph",
        "id": "91ba01f05fafd636",
        "text": "[00:09:57]\nSo then when you're talking about guarantees and then AI that's prone to hallucination,\n[00:10:03]\nthat becomes an interesting question, right?\n[00:10:05]\nNow I actually am pretty confident about our ability to do useful things with that.\n[00:10:12]\nMaybe that's counterintuitive because I'm talking about how much we care about guarantees\n[00:10:18]\nand then talking about hallucination.\n[00:10:20]\nI'm actually very reluctant to integrate things like GitHub copilot suggestions into my code\n[00:10:27]\nbecause I think it's a very easy way to introduce subtle bugs."
      },
      "date": 1681920762749
    },
    {
      "type": "edit",
      "id": "91ba01f05fafd636",
      "item": {
        "type": "paragraph",
        "id": "91ba01f05fafd636",
        "text": "[00:09:57]\nSo then when you're talking about guarantees and then AI that's prone to [[Hallucination]],\n[00:10:03]\nthat becomes an interesting question, right?\n[00:10:05]\nNow I actually am pretty confident about our ability to do useful things with that.\n[00:10:12]\nMaybe that's counterintuitive because I'm talking about how much we care about guarantees\n[00:10:18]\nand then talking about hallucination.\n[00:10:20]\nI'm actually very reluctant to integrate things like GitHub copilot suggestions into my code\n[00:10:27]\nbecause I think it's a very easy way to introduce subtle bugs."
      },
      "date": 1681920812327
    },
    {
      "item": {
        "type": "factory",
        "id": "8c1e47b90aac18ad"
      },
      "id": "8c1e47b90aac18ad",
      "type": "add",
      "after": "91ba01f05fafd636",
      "date": 1681920874566
    },
    {
      "type": "edit",
      "id": "8c1e47b90aac18ad",
      "item": {
        "type": "paragraph",
        "id": "8c1e47b90aac18ad",
        "text": "[00:10:32]\nBut the way I'm thinking about how AI fits into my workflow for writing Elm code and\n[00:10:39]\nmy sort of ideals for tools that involve like trusting my tools so that I can do critical\n[00:10:48]\nthinking and then delegate certain types of problems with complete trust to a tool, right?\n[00:10:55]\nThose two things do fit together, but not out of the box."
      },
      "date": 1681920876103
    },
    {
      "item": {
        "type": "factory",
        "id": "4e70f01bdb1b70f3"
      },
      "id": "4e70f01bdb1b70f3",
      "type": "add",
      "after": "8c1e47b90aac18ad",
      "date": 1681920903133
    },
    {
      "type": "edit",
      "id": "4e70f01bdb1b70f3",
      "item": {
        "type": "paragraph",
        "id": "4e70f01bdb1b70f3",
        "text": "[00:11:04]\n[…], I was playing around with GitHub copilot, which for anyone who hasn't used\n[00:11:08]\nit, it's now a paid tool, but it will give you sort of fancy AI assisted, GPT assisted\n[00:11:17]\nauto completions in your editor."
      },
      "date": 1681920911509
    },
    {
      "item": {
        "type": "factory",
        "id": "cc2bbfba16ad7382"
      },
      "id": "cc2bbfba16ad7382",
      "type": "add",
      "after": "4e70f01bdb1b70f3",
      "date": 1681920963728
    },
    {
      "type": "edit",
      "id": "cc2bbfba16ad7382",
      "item": {
        "type": "paragraph",
        "id": "cc2bbfba16ad7382",
        "text": "[00:12:06]\nIn some cases, I'll trust it.\n[00:12:08]\nI will have a custom type with four variants, and I will write out a function that says\n[00:12:15]\nmy custom type to string, and then it fills it in perfectly.\n[00:12:19]\nAnd it's impressive, but there are certain things like that, that I have an intuition\n[00:12:27]\nthat it's going to be really good and trustworthy at solving.\n[00:12:30]\nThat said, it does hallucinate certain things."
      },
      "date": 1681920965203
    },
    {
      "item": {
        "type": "factory",
        "id": "7444af527ee6e7dd"
      },
      "id": "7444af527ee6e7dd",
      "type": "add",
      "after": "cc2bbfba16ad7382",
      "date": 1681920978458
    },
    {
      "type": "edit",
      "id": "7444af527ee6e7dd",
      "item": {
        "type": "paragraph",
        "id": "7444af527ee6e7dd",
        "text": "[00:12:32]\nIt will hallucinate certain variants because the process through which it is arriving at\n[00:12:37]\nthese suggestions does not involve understanding the types of the program like the compiler\n[00:12:43]\ndoes."
      },
      "date": 1681920980096
    },
    {
      "item": {
        "type": "factory",
        "id": "7d0804674511d4b8"
      },
      "id": "7d0804674511d4b8",
      "type": "add",
      "after": "7444af527ee6e7dd",
      "date": 1681921012883
    },
    {
      "type": "edit",
      "id": "7d0804674511d4b8",
      "item": {
        "type": "paragraph",
        "id": "7d0804674511d4b8",
        "text": "[00:12:45]\nSo to me, where it gets very interesting is when you start using prompt engineering to\n[00:12:51]\ndo that.\n[00:12:52]\nAnd so I've been thinking about a set of principles around this.\n[00:12:59]\nSo prompt engineering is when you ask a question to get a Copilot or mostly chatGPT or other\n[00:13:07]\ntools and you do it in a specific way, like you frame your questions in a specific way,\n[00:13:12]\nyou ask for specific things, you give additional instructions so that it gives you better results."
      },
      "date": 1681921015357
    },
    {
      "item": {
        "type": "factory",
        "id": "69cb39ef996c4fcc"
      },
      "id": "69cb39ef996c4fcc",
      "type": "add",
      "after": "7d0804674511d4b8",
      "date": 1681921026530
    },
    {
      "type": "edit",
      "id": "69cb39ef996c4fcc",
      "item": {
        "type": "paragraph",
        "id": "69cb39ef996c4fcc",
        "text": "[00:13:18]\nI don't know why people call it engineering yet, but it's very interesting.\n[00:13:24]\nAlthough, I mean, there are prompt engineer job posts out there, and I think this is kind\n[00:13:30]\nof going to become a thing."
      },
      "date": 1681921028233
    },
    {
      "item": {
        "type": "factory",
        "id": "1a6d0e924b599047"
      },
      "id": "1a6d0e924b599047",
      "type": "add",
      "after": "69cb39ef996c4fcc",
      "date": 1681921041156
    },
    {
      "type": "edit",
      "id": "1a6d0e924b599047",
      "item": {
        "type": "paragraph",
        "id": "1a6d0e924b599047",
        "text": "[00:13:32]\nSo it feels more like politics, like when you try to phrase things that sound good to\n[00:13:38]\nyou, what makes you sound good.\n[00:13:41]\nIt's more like a speech thing than an engineering thing so far."
      },
      "date": 1681921042617
    },
    {
      "type": "edit",
      "id": "1a6d0e924b599047",
      "item": {
        "type": "paragraph",
        "id": "1a6d0e924b599047",
        "text": "[00:13:32]\nSo it feels more like politics, like when you try to phrase things that sound good to\n[00:13:38]\nyou, what makes you sound good.\n[00:13:41]\nIt's more like a speech thing than an engineering thing so far. >> speech"
      },
      "date": 1681921062426
    },
    {
      "type": "edit",
      "id": "1a6d0e924b599047",
      "item": {
        "type": "paragraph",
        "id": "1a6d0e924b599047",
        "text": "[00:13:32]\nSo it feels more like politics, like when you try to phrase things that sound good to\n[00:13:38]\nyou, what makes you sound good.\n[00:13:41]\nIt's more like a [[Speech]] thing than an engineering thing so far. >> speech"
      },
      "date": 1681921079401
    },
    {
      "item": {
        "type": "factory",
        "id": "a0ea1059de7819e3"
      },
      "id": "a0ea1059de7819e3",
      "type": "add",
      "after": "1a6d0e924b599047",
      "date": 1681921158374
    },
    {
      "type": "edit",
      "id": "a0ea1059de7819e3",
      "item": {
        "type": "paragraph",
        "id": "a0ea1059de7819e3",
        "text": "[[Prompt Engineering]]"
      },
      "date": 1681921162317
    },
    {
      "type": "edit",
      "id": "a0ea1059de7819e3",
      "item": {
        "type": "paragraph",
        "id": "a0ea1059de7819e3",
        "text": "⇒ [[Prompt Engineering]]"
      },
      "date": 1681921175258
    },
    {
      "id": "7d0804674511d4b8",
      "type": "remove",
      "removedTo": {
        "page": "Prompt Engineering"
      },
      "date": 1681921217532
    },
    {
      "id": "7444af527ee6e7dd",
      "type": "remove",
      "removedTo": {
        "page": "Prompt Engineering"
      },
      "date": 1681921220344
    },
    {
      "id": "69cb39ef996c4fcc",
      "type": "remove",
      "removedTo": {
        "page": "Prompt Engineering"
      },
      "date": 1681921222660
    },
    {
      "id": "1a6d0e924b599047",
      "type": "remove",
      "removedTo": {
        "page": "Prompt Engineering"
      },
      "date": 1681921224832
    }
  ]
}