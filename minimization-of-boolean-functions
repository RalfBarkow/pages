{
  "title": "Minimization of Boolean Functions",
  "story": [
    {
      "type": "markdown",
      "id": "7c69cc81d2fb5d6a",
      "text": "Typesetting ladder diagrams may be boring and time-consuming. One thing you can try is JQM - Java Quine McCluskey for minimization of Boolean functions available on https://sourceforge.net/projects/jqm-java-quine-mccluskey/. It can generate the solution and create the corresponding ladder diagram based on a given truth table. Unfortunately, it does not place blocks."
    },
    {
      "type": "pagefold",
      "id": "08bdc6c560deb60c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "40a27289a8625eae",
      "text": "\nLAUS, Luis Paulo, 2022. Typesetting Ladder Diagrams with LATEX and TikZ. . 10 April 2022. P. 19. \n"
    },
    {
      "type": "pagefold",
      "id": "2b9b9753ffa1bff8",
      "text": "JQM"
    },
    {
      "type": "paragraph",
      "id": "76ab96c57a26ec41",
      "text": "Java Quine McCluskey implements the Quine McCluskey algorithm with Petrick’s Method (or the method of prime implicants) for minimization of Boolean functions. This software can be used both for learning and solving real problems. As a learning/teaching tool, it presents not only the results but also how the problem was solved as well as how to use Karnaugh Maps to solve the problem.\nUp to sixteen functions of sixteen variables can be minimized. A graphical interface is provided for entering and editing the truth table that can be saved and loaded. The results can be exported in HTML format. It generates the Karnaugh Map for educational purposes and the actual truth table from the obtained expressions even when multiple solutions for each function are found.\nThis implementation supports PLC programming, so results can be presented in many forms including Structured Text (ST) and Ladder Diagram (LD) along with conventional Boolean expression."
    },
    {
      "type": "pagefold",
      "id": "a0f002659eb487f6",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "a7b5c0dd3ab77646",
      "text": "JQM Java Quine McCluskey, [no date]. SourceForge. Online. [Accessed 3 August 2022]. [https://sourceforge.net/projects/jqm-java-quine-mccluskey/ sourceforge]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Minimization of Boolean Functions",
        "story": []
      },
      "date": 1659517339934
    },
    {
      "item": {
        "type": "factory",
        "id": "76ab96c57a26ec41"
      },
      "id": "76ab96c57a26ec41",
      "type": "add",
      "date": 1659517357102
    },
    {
      "type": "edit",
      "id": "76ab96c57a26ec41",
      "item": {
        "type": "paragraph",
        "id": "76ab96c57a26ec41",
        "text": "Java Quine McCluskey implements the Quine McCluskey algorithm with Petrick’s Method (or the method of prime implicants) for minimization of Boolean functions. This software can be used both for learning and solving real problems. As a learning/teaching tool, it presents not only the results but also how the problem was solved as well as how to use Karnaugh Maps to solve the problem.\nUp to sixteen functions of sixteen variables can be minimized. A graphical interface is provided for entering and editing the truth table that can be saved and loaded. The results can be exported in HTML format. It generates the Karnaugh Map for educational purposes and the actual truth table from the obtained expressions even when multiple solutions for each function are found.\nThis implementation supports PLC programming, so results can be presented in many forms including Structured Text (ST) and Ladder Diagram (LD) along with conventional Boolean expression."
      },
      "date": 1659517362025
    },
    {
      "item": {
        "type": "factory",
        "id": "a0f002659eb487f6"
      },
      "id": "a0f002659eb487f6",
      "type": "add",
      "after": "76ab96c57a26ec41",
      "date": 1659517381702
    },
    {
      "type": "edit",
      "id": "a0f002659eb487f6",
      "item": {
        "type": "pagefold",
        "id": "a0f002659eb487f6",
        "text": "~"
      },
      "date": 1659517386190
    },
    {
      "item": {
        "type": "factory",
        "id": "a7b5c0dd3ab77646"
      },
      "id": "a7b5c0dd3ab77646",
      "type": "add",
      "after": "a0f002659eb487f6",
      "date": 1659517388862
    },
    {
      "type": "edit",
      "id": "a7b5c0dd3ab77646",
      "item": {
        "type": "paragraph",
        "id": "a7b5c0dd3ab77646",
        "text": "\nJQM Java Quine McCluskey, [no date]. SourceForge. Online. [Accessed 3 August 2022]. Available from: https://sourceforge.net/projects/jqm-java-quine-mccluskey/Download JQM Java Quine McCluskey for free. JQM - Java Quine McCluskey for minimization of Boolean functions. Java Quine McCluskey implements the Quine McCluskey algorithm with Petrick’s Method (or the method of prime implicants) for minimization of Boolean functions. This software can be used both for learning and solving real problems.\n"
      },
      "date": 1659517392888
    },
    {
      "type": "edit",
      "id": "a7b5c0dd3ab77646",
      "item": {
        "type": "paragraph",
        "id": "a7b5c0dd3ab77646",
        "text": "JQM Java Quine McCluskey, [no date]. SourceForge. Online. [Accessed 3 August 2022]. Available from: https://sourceforge.net/projects/jqm-java-quine-mccluskey/Download "
      },
      "date": 1659517415620
    },
    {
      "type": "edit",
      "id": "a7b5c0dd3ab77646",
      "item": {
        "type": "markdown",
        "id": "a7b5c0dd3ab77646",
        "text": "JQM Java Quine McCluskey, [no date]. SourceForge. Online. [Accessed 3 August 2022]. Available from: https://sourceforge.net/projects/jqm-java-quine-mccluskey/Download "
      },
      "date": 1659517418771
    },
    {
      "type": "edit",
      "id": "a7b5c0dd3ab77646",
      "item": {
        "type": "markdown",
        "id": "a7b5c0dd3ab77646",
        "text": "JQM Java Quine McCluskey, [no date]. SourceForge. Online. [Accessed 3 August 2022]. [https://sourceforge.net/projects/jqm-java-quine-mccluskey/ sourceforge]"
      },
      "date": 1659517445508
    },
    {
      "item": {
        "type": "factory",
        "id": "7c69cc81d2fb5d6a"
      },
      "id": "7c69cc81d2fb5d6a",
      "type": "add",
      "after": "a7b5c0dd3ab77646",
      "date": 1659517618102
    },
    {
      "id": "7c69cc81d2fb5d6a",
      "type": "move",
      "order": [
        "7c69cc81d2fb5d6a",
        "76ab96c57a26ec41",
        "a0f002659eb487f6",
        "a7b5c0dd3ab77646"
      ],
      "date": 1659517623801
    },
    {
      "type": "edit",
      "id": "7c69cc81d2fb5d6a",
      "item": {
        "type": "paragraph",
        "id": "7c69cc81d2fb5d6a",
        "text": "Typesetting ladder diagrams may be boring and time-consuming. One thing you can try is JQM - Java Quine McCluskey for minimization of Boolean functions available on https://sourceforge.net/projects/ jqm-java-quine-mccluskey/. It can generate the solution and create the corresponding ladder diagram based on a given truth table. Unfortunately, it does not place blocks."
      },
      "date": 1659517628483
    },
    {
      "type": "add",
      "id": "40a27289a8625eae",
      "item": {
        "type": "paragraph",
        "id": "40a27289a8625eae",
        "text": "Laus, Luis Paulo. „Typesetting Ladder Diagrams with LATEX and TikZ“, o. J., 19.\n"
      },
      "after": "7c69cc81d2fb5d6a",
      "date": 1659517662375
    },
    {
      "type": "edit",
      "id": "40a27289a8625eae",
      "item": {
        "type": "paragraph",
        "id": "40a27289a8625eae",
        "text": "\nLAUS, Luis Paulo, 2022. Typesetting Ladder Diagrams with LATEX and TikZ. . 10 April 2022. P. 19. \n"
      },
      "date": 1659517752493
    },
    {
      "item": {
        "type": "factory",
        "id": "08bdc6c560deb60c"
      },
      "id": "08bdc6c560deb60c",
      "type": "add",
      "after": "a7b5c0dd3ab77646",
      "date": 1659517773390
    },
    {
      "id": "08bdc6c560deb60c",
      "type": "move",
      "order": [
        "7c69cc81d2fb5d6a",
        "08bdc6c560deb60c",
        "40a27289a8625eae",
        "76ab96c57a26ec41",
        "a0f002659eb487f6",
        "a7b5c0dd3ab77646"
      ],
      "date": 1659517785038
    },
    {
      "type": "edit",
      "id": "08bdc6c560deb60c",
      "item": {
        "type": "pagefold",
        "id": "08bdc6c560deb60c",
        "text": "~"
      },
      "date": 1659517789526
    },
    {
      "item": {
        "type": "factory",
        "id": "2b9b9753ffa1bff8"
      },
      "id": "2b9b9753ffa1bff8",
      "type": "add",
      "after": "a7b5c0dd3ab77646",
      "date": 1659517895750
    },
    {
      "id": "2b9b9753ffa1bff8",
      "type": "move",
      "order": [
        "7c69cc81d2fb5d6a",
        "08bdc6c560deb60c",
        "40a27289a8625eae",
        "2b9b9753ffa1bff8",
        "76ab96c57a26ec41",
        "a0f002659eb487f6",
        "a7b5c0dd3ab77646"
      ],
      "date": 1659517901198
    },
    {
      "type": "edit",
      "id": "2b9b9753ffa1bff8",
      "item": {
        "type": "pagefold",
        "id": "2b9b9753ffa1bff8",
        "text": "JQM"
      },
      "date": 1659517905209
    },
    {
      "type": "edit",
      "id": "7c69cc81d2fb5d6a",
      "item": {
        "type": "markdown",
        "id": "7c69cc81d2fb5d6a",
        "text": "Typesetting ladder diagrams may be boring and time-consuming. One thing you can try is JQM - Java Quine McCluskey for minimization of Boolean functions available on https://sourceforge.net/projects/ jqm-java-quine-mccluskey/. It can generate the solution and create the corresponding ladder diagram based on a given truth table. Unfortunately, it does not place blocks."
      },
      "date": 1659517925483
    },
    {
      "type": "edit",
      "id": "7c69cc81d2fb5d6a",
      "item": {
        "type": "markdown",
        "id": "7c69cc81d2fb5d6a",
        "text": "Typesetting ladder diagrams may be boring and time-consuming. One thing you can try is JQM - Java Quine McCluskey for minimization of Boolean functions available on https://sourceforge.net/projects/jqm-java-quine-mccluskey/. It can generate the solution and create the corresponding ladder diagram based on a given truth table. Unfortunately, it does not place blocks."
      },
      "date": 1659517932049
    }
  ]
}