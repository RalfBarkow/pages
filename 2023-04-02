{
  "title": "2023-04-02",
  "story": [
    {
      "type": "paragraph",
      "id": "3b8e5ba41fcb68ed",
      "text": "What Is ChatGPT Doing … and Why Does It Work? [https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/ post], [https://youtu.be/xHPQ_oSsJgg?t=2452 video]"
    },
    {
      "type": "video",
      "id": "4fca3154909c6f9e",
      "text": "YOUTUBE xHPQ_oSsJgg\nStephen Wolfram: ChatGPT, Dark Matter, & AI "
    },
    {
      "type": "paragraph",
      "id": "377dd4c08f3ee9d2",
      "text": "But let’s say we want a “theory of cat recognition” in neural nets. We can say: “Look, this particular net does it”—and immediately that gives us some sense of “how hard a problem” it is (and, for example, how many neurons or layers might be needed). But at least as of now we don’t have a way to “give a narrative description” of what the network is doing. And maybe that’s because it truly is computationally irreducible, and there’s no general way to find what it does except by explicitly tracing each step. Or maybe it’s just that we haven’t “figured out the science”, and identified the “natural laws” that allow us to summarize what’s going on."
    },
    {
      "type": "paragraph",
      "id": "fb36919a93bad57e",
      "text": "We’ll encounter the same kinds of issues when we talk about generating language with ChatGPT. And again it’s not clear whether there are ways to “summarize what it’s doing”. But the richness and detail of language (and our experience with it) may allow us to get further than with images."
    },
    {
      "type": "reference",
      "id": "540fb3a54d42f71a",
      "site": "wiki.ralfbarkow.ch",
      "slug": "computational-irreducibility",
      "title": "Computational Irreducibility",
      "text": "While many [[Computation]]s admit shortcuts that allow them to be performed more rapidly, others cannot be sped up. Computations that cannot be sped up by means of any shortcut are called computationally irreducible. The principle of computational irreducibility says that **the only way to determine the answer to a computationally irreducible question is to perform, or [[simulate]], the computation**. Some irreducible computations can be sped up by performing them on faster hardware, as **the principle refers only to computation time**. [https://mathworl"
    },
    {
      "type": "paragraph",
      "id": "76d52c82b5ea4d58",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "c4f171cda5bac1c9",
      "text": "But an important feature of neural nets is that—like computers in general—they’re ultimately just dealing with data. And current neural nets—with current approaches to neural net training—specifically deal with arrays of numbers. But in the course of processing, those arrays can be completely rearranged and reshaped. And as an example, the network we used for identifying digits above starts with a 2D “image-like” array, quickly “thickening” to many channels, but then “concentrating down” into a 1D array that will ultimately contain elements representing the different possible output digits:"
    },
    {
      "type": "html",
      "id": "c01700a8af332a82",
      "text": "<img\n  src=\"https://content.wolfram.com/uploads/sites/43/2023/02/sw021423img74.png\"\n  width=\"100%\"\n>"
    },
    {
      "type": "paragraph",
      "id": "91eb55014ad13eb0",
      "text": "See \"Games and Puzzles as Multicomputational Systems\" [https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/ post]"
    },
    {
      "type": "reference",
      "id": "47ed4c9e84207cee",
      "site": "wiki.ralfbarkow.ch",
      "slug": "model-free-method-zoo",
      "title": "Model Free Method Zoo",
      "text": "Model Free Methods are used in the life sciences, in data mining, and elsewhere when solving problems in domains where robust Models (scientific models, hypotheses, theories, formulas, equations, and computer programs) describing the problem domain cannot be created or productively used."
    },
    {
      "type": "markdown",
      "id": "c3ac8e6f3894c578",
      "text": "* Trial and Error (try anything)\n* [[Enumeration]] (try everything once)\n* Track successes and failures\n* [[Table Lookup]] (of gathered experience) – 53:32;  \nGraph algorithms (table to graph transformation) [https://www.educative.io/blog/graph-algorithms-tutorial page]\n* Track Correlations \n* Pattern Discovery based methods\n* [[Adaptation]]\n* [[Evolution]] or [[Evolutionary Computation]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-04-02",
        "story": []
      },
      "date": 1680431102786
    },
    {
      "item": {
        "type": "factory",
        "id": "4fca3154909c6f9e"
      },
      "id": "4fca3154909c6f9e",
      "type": "add",
      "date": 1680431450137
    },
    {
      "type": "edit",
      "id": "4fca3154909c6f9e",
      "item": {
        "type": "video",
        "id": "4fca3154909c6f9e",
        "text": "YOUTUBE xHPQ_oSsJgg"
      },
      "date": 1680431454793
    },
    {
      "type": "edit",
      "id": "4fca3154909c6f9e",
      "item": {
        "type": "video",
        "id": "4fca3154909c6f9e",
        "text": "YOUTUBE xHPQ_oSsJgg\nStephen Wolfram: ChatGPT, Dark Matter, & AI "
      },
      "date": 1680431585470
    },
    {
      "item": {
        "type": "factory",
        "id": "3b8e5ba41fcb68ed"
      },
      "id": "3b8e5ba41fcb68ed",
      "type": "add",
      "after": "4fca3154909c6f9e",
      "date": 1680431880887
    },
    {
      "type": "edit",
      "id": "3b8e5ba41fcb68ed",
      "item": {
        "type": "paragraph",
        "id": "3b8e5ba41fcb68ed",
        "text": "What Is ChatGPT Doing … and Why Does It Work?"
      },
      "date": 1680431882755
    },
    {
      "id": "3b8e5ba41fcb68ed",
      "type": "move",
      "order": [
        "3b8e5ba41fcb68ed",
        "4fca3154909c6f9e"
      ],
      "date": 1680431884963
    },
    {
      "type": "edit",
      "id": "3b8e5ba41fcb68ed",
      "item": {
        "type": "paragraph",
        "id": "3b8e5ba41fcb68ed",
        "text": "What Is ChatGPT Doing … and Why Does It Work? [https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/ post]"
      },
      "date": 1680431904028
    },
    {
      "type": "edit",
      "id": "3b8e5ba41fcb68ed",
      "item": {
        "type": "paragraph",
        "id": "3b8e5ba41fcb68ed",
        "text": "What Is ChatGPT Doing … and Why Does It Work? [https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/ post], [https://youtu.be/xHPQ_oSsJgg?t=2452 video]"
      },
      "date": 1680431925624
    },
    {
      "item": {
        "type": "factory",
        "id": "377dd4c08f3ee9d2"
      },
      "id": "377dd4c08f3ee9d2",
      "type": "add",
      "after": "4fca3154909c6f9e",
      "date": 1680432256999
    },
    {
      "type": "edit",
      "id": "377dd4c08f3ee9d2",
      "item": {
        "type": "paragraph",
        "id": "377dd4c08f3ee9d2",
        "text": "But let’s say we want a “theory of cat recognition” in neural nets. We can say: “Look, this particular net does it”—and immediately that gives us some sense of “how hard a problem” it is (and, for example, how many neurons or layers might be needed). But at least as of now we don’t have a way to “give a narrative description” of what the network is doing. And maybe that’s because it truly is computationally irreducible, and there’s no general way to find what it does except by explicitly tracing each step. Or maybe it’s just that we haven’t “figured out the science”, and identified the “natural laws” that allow us to summarize what’s going on."
      },
      "date": 1680432258720
    },
    {
      "item": {
        "type": "factory",
        "id": "540fb3a54d42f71a"
      },
      "id": "540fb3a54d42f71a",
      "type": "add",
      "after": "377dd4c08f3ee9d2",
      "date": 1680432296801
    },
    {
      "type": "edit",
      "id": "540fb3a54d42f71a",
      "item": {
        "type": "reference",
        "id": "540fb3a54d42f71a",
        "site": "wiki.ralfbarkow.ch",
        "slug": "computational-irreducibility",
        "title": "Computational Irreducibility",
        "text": "While many [[Computation]]s admit shortcuts that allow them to be performed more rapidly, others cannot be sped up. Computations that cannot be sped up by means of any shortcut are called computationally irreducible. The principle of computational irreducibility says that **the only way to determine the answer to a computationally irreducible question is to perform, or [[simulate]], the computation**. Some irreducible computations can be sped up by performing them on faster hardware, as **the principle refers only to computation time**. [https://mathworl"
      },
      "date": 1680432300011
    },
    {
      "type": "add",
      "id": "fb36919a93bad57e",
      "item": {
        "type": "paragraph",
        "id": "fb36919a93bad57e",
        "text": "We’ll encounter the same kinds of issues when we talk about generating language with ChatGPT. And again it’s not clear whether there are ways to “summarize what it’s doing”. But the richness and detail of language (and our experience with it) may allow us to get further than with images."
      },
      "after": "377dd4c08f3ee9d2",
      "date": 1680432347089
    },
    {
      "item": {
        "type": "factory",
        "id": "76d52c82b5ea4d58"
      },
      "id": "76d52c82b5ea4d58",
      "type": "add",
      "after": "540fb3a54d42f71a",
      "date": 1680432429394
    },
    {
      "type": "edit",
      "id": "76d52c82b5ea4d58",
      "item": {
        "type": "paragraph",
        "id": "76d52c82b5ea4d58",
        "text": "[…]"
      },
      "date": 1680432432766
    },
    {
      "type": "add",
      "id": "c4f171cda5bac1c9",
      "item": {
        "type": "paragraph",
        "id": "c4f171cda5bac1c9",
        "text": "But an important feature of neural nets is that—like computers in general—they’re ultimately just dealing with data. And current neural nets—with current approaches to neural net training—specifically deal with arrays of numbers. But in the course of processing, those arrays can be completely rearranged and reshaped. And as an example, the network we used for identifying digits above starts with a 2D “image-like” array, quickly “thickening” to many channels, but then “concentrating down” into a 1D array that will ultimately contain elements representing the different possible output digits:"
      },
      "after": "76d52c82b5ea4d58",
      "date": 1680432434061
    },
    {
      "item": {
        "type": "factory",
        "id": "c01700a8af332a82"
      },
      "id": "c01700a8af332a82",
      "type": "add",
      "after": "c4f171cda5bac1c9",
      "date": 1680432441369
    },
    {
      "type": "edit",
      "id": "c01700a8af332a82",
      "item": {
        "type": "html",
        "id": "c01700a8af332a82",
        "text": "<img\n  src=\"https://content.wolfram.com/uploads/sites/43/2023/02/sw021423img74.png\"\n  width=\"100%\"\n>"
      },
      "date": 1680432456715
    },
    {
      "item": {
        "type": "factory",
        "id": "f7adbbf8ab020348"
      },
      "id": "f7adbbf8ab020348",
      "type": "add",
      "after": "c01700a8af332a82",
      "date": 1680432502616
    },
    {
      "type": "edit",
      "id": "f7adbbf8ab020348",
      "item": {
        "type": "paragraph",
        "id": "f7adbbf8ab020348",
        "text": "But, OK, how can one tell how big a neural net one will need for a particular task? It’s something of an art. At some level the key thing is to know “how hard the task is”. But for human-like tasks that’s typically very hard to estimate. Yes, there may be a systematic way to do the task very “mechanically” by computer. But it’s hard to know if there are what one might think of as tricks or shortcuts that allow one to do the task at least at a “human-like level” vastly more easily. It might take enumerating a giant game tree to “mechanically” play a certain game; but there might be a much easier (“heuristic”) way to achieve “human-level play”."
      },
      "date": 1680432504448
    },
    {
      "item": {
        "type": "factory",
        "id": "91eb55014ad13eb0"
      },
      "id": "91eb55014ad13eb0",
      "type": "add",
      "after": "f7adbbf8ab020348",
      "date": 1680432548809
    },
    {
      "type": "edit",
      "id": "91eb55014ad13eb0",
      "item": {
        "type": "paragraph",
        "id": "91eb55014ad13eb0",
        "text": "See \"Games and Puzzles as Multicomputational Systems\" "
      },
      "date": 1680432555039
    },
    {
      "type": "edit",
      "id": "91eb55014ad13eb0",
      "item": {
        "type": "paragraph",
        "id": "91eb55014ad13eb0",
        "text": "See \"Games and Puzzles as Multicomputational Systems\" [https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/ post]"
      },
      "date": 1680432564430
    },
    {
      "item": {
        "type": "factory",
        "id": "47ed4c9e84207cee"
      },
      "id": "47ed4c9e84207cee",
      "type": "add",
      "after": "91eb55014ad13eb0",
      "date": 1680432684480
    },
    {
      "type": "edit",
      "id": "47ed4c9e84207cee",
      "item": {
        "type": "reference",
        "id": "47ed4c9e84207cee",
        "site": "wiki.ralfbarkow.ch",
        "slug": "model-free-method-zoo",
        "title": "Model Free Method Zoo",
        "text": "Model Free Methods are used in the life sciences, in data mining, and elsewhere when solving problems in domains where robust Models (scientific models, hypotheses, theories, formulas, equations, and computer programs) describing the problem domain cannot be created or productively used."
      },
      "date": 1680432686786
    },
    {
      "id": "c3ac8e6f3894c578",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c3ac8e6f3894c578",
        "text": "* Trial and Error (try anything)\n* Enumeration (try everything once)\n* Track successes and failures\n* [[Table Lookup]] (of gathered experience) – 53:32;  \nGraph algorithms (table to graph transformation) [https://www.educative.io/blog/graph-algorithms-tutorial page]\n* Track Correlations \n* Pattern Discovery based methods\n* [[Adaptation]]\n* [[Evolution]] or [[Evolutionary Computation]]"
      },
      "after": "47ed4c9e84207cee",
      "attribution": {
        "page": "Understanding Machines"
      },
      "date": 1680432702796
    },
    {
      "type": "edit",
      "id": "c3ac8e6f3894c578",
      "item": {
        "type": "markdown",
        "id": "c3ac8e6f3894c578",
        "text": "* Trial and Error (try anything)\n* [[Enumeration]] (try everything once)\n* Track successes and failures\n* [[Table Lookup]] (of gathered experience) – 53:32;  \nGraph algorithms (table to graph transformation) [https://www.educative.io/blog/graph-algorithms-tutorial page]\n* Track Correlations \n* Pattern Discovery based methods\n* [[Adaptation]]\n* [[Evolution]] or [[Evolutionary Computation]]"
      },
      "date": 1680432716068
    },
    {
      "id": "91eb55014ad13eb0",
      "type": "remove",
      "removedTo": {
        "page": "Enumeration"
      },
      "date": 1680432726078
    },
    {
      "id": "91eb55014ad13eb0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "91eb55014ad13eb0",
        "text": "See \"Games and Puzzles as Multicomputational Systems\" [https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/ post]"
      },
      "after": "f7adbbf8ab020348",
      "attribution": {
        "page": "Enumeration"
      },
      "date": 1680433763976
    },
    {
      "id": "f7adbbf8ab020348",
      "type": "remove",
      "removedTo": {
        "page": "Enumeration"
      },
      "date": 1680433769642
    }
  ]
}