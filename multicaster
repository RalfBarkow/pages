{
  "title": "Multicaster",
  "story": [
    {
      "type": "html",
      "text": "There might be a case for the multicaster returning a [[Visitor]] of its own (the [[Traveller]]). The Traveller could encapsulate, at its simplest, the act of returning/removing the original Visitor. A more complex version could allow the caller to replace the contributed Visitor with a different one. This has several advantages: because the Object only has to pass through the Traveller, a single 'addListener()' type method is now sufficient for most functionality. Secondly, the Traveller <i>safely</i> exposes the client to powerful functionality (replacing the contributed listener, cancelling the listener, etc.), as it grants this access per visitor, and not by multicaster. In some cases, the client may not even need retain a reference to the listener any more.",
      "id": "cbf8d42ca2a2a6eea8d250c2abfa149e"
    },
    {
      "type": "pagefold",
      "id": "be61c2ff99f1c194",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "9eee794457e17505",
      "site": "sfw.c2.com",
      "slug": "traveller-pattern",
      "title": "Traveller Pattern",
      "text": "A thought: The [[Visitor Pattern]]'s match."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Multicaster",
        "story": []
      },
      "date": 1709811943344
    },
    {
      "id": "cbf8d42ca2a2a6eea8d250c2abfa149e",
      "type": "add",
      "item": {
        "type": "html",
        "text": "\nThere might be a case for the multicaster returning a Visitor of its own (the Traveller). The Traveller could encapsulate, at its simplest, the act of returning/removing the original Visitor. A more complex version could allow the caller to replace the contributed Visitor with a different one. This has several advantages: because the Object only has to pass through the Traveller, a single 'addListener()' type method is now sufficient for most functionality. Secondly, the Traveller <i>safely</i> exposes the client to powerful functionality (replacing the contributed listener, cancelling the listener, etc.), as it grants this access per visitor, and not by multicaster. In some cases, the client may not even need retain a reference to the listener any more.",
        "id": "cbf8d42ca2a2a6eea8d250c2abfa149e"
      },
      "attribution": {
        "page": "Traveller Pattern"
      },
      "date": 1709811947845
    },
    {
      "type": "edit",
      "id": "cbf8d42ca2a2a6eea8d250c2abfa149e",
      "item": {
        "type": "html",
        "text": "There might be a case for the multicaster returning a Visitor of its own (the Traveller). The Traveller could encapsulate, at its simplest, the act of returning/removing the original Visitor. A more complex version could allow the caller to replace the contributed Visitor with a different one. This has several advantages: because the Object only has to pass through the Traveller, a single 'addListener()' type method is now sufficient for most functionality. Secondly, the Traveller <i>safely</i> exposes the client to powerful functionality (replacing the contributed listener, cancelling the listener, etc.), as it grants this access per visitor, and not by multicaster. In some cases, the client may not even need retain a reference to the listener any more.",
        "id": "cbf8d42ca2a2a6eea8d250c2abfa149e"
      },
      "date": 1709811985278
    },
    {
      "item": {
        "type": "factory",
        "id": "be61c2ff99f1c194"
      },
      "id": "be61c2ff99f1c194",
      "type": "add",
      "after": "cbf8d42ca2a2a6eea8d250c2abfa149e",
      "date": 1709811994708
    },
    {
      "type": "edit",
      "id": "be61c2ff99f1c194",
      "item": {
        "type": "pagefold",
        "id": "be61c2ff99f1c194",
        "text": "~"
      },
      "date": 1709811998461
    },
    {
      "item": {
        "type": "factory",
        "id": "9eee794457e17505"
      },
      "id": "9eee794457e17505",
      "type": "add",
      "after": "be61c2ff99f1c194",
      "date": 1709812000033
    },
    {
      "type": "edit",
      "id": "9eee794457e17505",
      "item": {
        "type": "reference",
        "id": "9eee794457e17505",
        "site": "sfw.c2.com",
        "slug": "traveller-pattern",
        "title": "Traveller Pattern",
        "text": "<i>A thought: The [[Visitor Pattern]]'s match.</i>"
      },
      "date": 1709812003093
    },
    {
      "type": "edit",
      "id": "9eee794457e17505",
      "item": {
        "type": "reference",
        "id": "9eee794457e17505",
        "site": "sfw.c2.com",
        "slug": "traveller-pattern",
        "title": "Traveller Pattern",
        "text": "A thought: The [[Visitor Pattern]]'s match."
      },
      "date": 1709812017226
    },
    {
      "type": "edit",
      "id": "cbf8d42ca2a2a6eea8d250c2abfa149e",
      "item": {
        "type": "html",
        "text": "There might be a case for the multicaster returning a [[Visitor]] of its own (the [[Traveller]]). The Traveller could encapsulate, at its simplest, the act of returning/removing the original Visitor. A more complex version could allow the caller to replace the contributed Visitor with a different one. This has several advantages: because the Object only has to pass through the Traveller, a single 'addListener()' type method is now sufficient for most functionality. Secondly, the Traveller <i>safely</i> exposes the client to powerful functionality (replacing the contributed listener, cancelling the listener, etc.), as it grants this access per visitor, and not by multicaster. In some cases, the client may not even need retain a reference to the listener any more.",
        "id": "cbf8d42ca2a2a6eea8d250c2abfa149e"
      },
      "date": 1709812038390
    },
    {
      "type": "fork",
      "date": 1709812158423
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709829248858
    }
  ]
}