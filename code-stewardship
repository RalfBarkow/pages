{
  "title": "Code Stewardship",
  "story": [
    {
      "type": "html",
      "text": "[[Code Stewardship]] is an alternative to [[Code Ownership]], emphasizing that code is the team's property, and not the sole province of any one person. A team member is granted stewardship over a piece of code. The steward has primary responsibility for the code's \"care and feeding,\" with input and guidance from the community. The steward normally makes all changes to the code, though trusted members of the team may make changes that the steward is then responsible for vetting.",
      "id": "f0567dc5a543f501763fe183a4203511"
    },
    {
      "type": "html",
      "text": "\nI've found that teams that adopt the position that code is owned by the team have fewer ego conflicts over code than teams that adopt single-user [[Code Ownership]]. (My experience is with small teams in startups. Your mileage may vary.)",
      "id": "b812953737d6600682eb0e05b2d4aacc"
    },
    {
      "type": "html",
      "text": "-- [[Dave Smith]]",
      "id": "de148021c00742d54b2df266eb20181e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7e981667e76430b16952580944ad88cc"
    },
    {
      "type": "html",
      "text": "The difference between this and single code owner are subtle, if not downright cosmetic. The <i>name</i> is different, and probably better in that it emphasizes that the programmer is responsible to the group and that his or her position is temporary. However, unless these consequent ideas are reflected elsewhere in the policy (eg reviews of stewardship by the group, periodic reassigning of stewards), I'm not sure the name alone is enough to change what actually happens. You say that only the steward can make changes, so <i>structurally</i> it is very similar.",
      "id": "f7dcd572416b0aec7a6f27c4d61ce55a"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "a2234ce68ab3ecb3af8d82ce9a7b28db"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7e981667e76430b16952580944ad88cc"
    },
    {
      "type": "html",
      "text": "The difference may seem subtle, but the behaviors generated by [[Code Stewardship]] are noticeably different from the behaviors generated by [[Code Ownership]]. It comes down to <i>ego</i> and <i>turf.</i> Someone who believes that they <i>own</i> the code is, in my experience, likely to hang their ego more on the success of their component(s) than on the success of the overall product. Stewards, on the other hand, are more likely (again, in my experience-YMMV) to make decisions based on the common good, often allowing (or contributing to) changes in their code that they'd have done differently or not a all if they \"owned\" the code. -- [[Dave Smith]]",
      "id": "01eb2c9f4e986afe476f4cb3521f0360"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7e981667e76430b16952580944ad88cc"
    },
    {
      "type": "html",
      "text": "What problem is solved or avoided by encouraging [[Code Stewardship]] instead of [[Collective Code Ownership]]?",
      "id": "4c863845d8d32213c2b594caa7b4d4fd"
    },
    {
      "type": "html",
      "text": "<i>My read on [[Collective Code Ownership]] (influenced by the other XP pages) is that the two ideas are nearly identical, though [[Code Stewardship]] explicitly allows for subject matter experts (e.g., the database steward, the [[Gui Toolkit]] steward) while [[Collective Code Ownership]] does not. In practice, this may not be much of a difference, since developers will naturally gravitate towards their area of expertise. -- [[Dave Smith]]</i>",
      "id": "990cc244ac9b26948c9ed636d9223574"
    },
    {
      "type": "html",
      "text": "\nActually in XP we discourage people gravitating. We recommend switching people around so that you don't get the ego involvement and you do get cross-training. -- [[Ron Jeffries]]",
      "id": "b7ab7e62e9b456dee2931873b9e27f55"
    },
    {
      "type": "html",
      "text": "<i>But don't you sometimes need specialization? Building a GUI requires very different skills than building an object distribution layer or using a database. -- [[Russell Gold]]</i>",
      "id": "b95cab8f87d6e42c2207aabb7e925d2e"
    },
    {
      "type": "html",
      "text": "\nYou can have two GUI experts on a team; can you have two GUI stewards? I got the impression the answer was no, that a steward was one person with sole responsibility. \"Steward\" to me sounds like a binary thing: you are one or you aren't; where as you can have degrees of expertise. To me it sounds like [[Code Stewardship]] is pushing in the same direction as [[Collective Code Ownership]] but is still much closer to single code owner. If there's an advantage, its that being less radical it may be more acceptable to conservative programmers.",
      "id": "db19105571a33bee7c193d1879e5e1a8"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "a2234ce68ab3ecb3af8d82ce9a7b28db"
    },
    {
      "type": "html",
      "text": "<i>You can (and I have had) multiple stewards for the GUI. On reflection, this looked very much like [[Collective Code Ownership]]. The stewardship relationship isn't binary, and does bind by degree of expertise. We kept this from degenerating into [[Code Ownership]] by constantly reinforcing the team's ownership of the code base, and by looking for cross-training opportunities. -- [[Dave Smith]]</i>",
      "id": "b68b08241f20f765e2516e85a23360b7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7e981667e76430b16952580944ad88cc"
    },
    {
      "type": "html",
      "text": "\nI like the term [[Code Stewardship]], because it reinforces the idea of\nprogramming for others who have as great a stake in the code as the original\ndevelopers. And it suggests the varied activities of coordinating software evolution: the generation and management of diffs and patches, the testing\nand fielding of alternate versions, the refactoring of differing versions when possible. -- [[Scott Johnston]]",
      "id": "b0e99924b256d974aa81095003c6ba7c"
    },
    {
      "type": "html",
      "text": "\nI usually interpret \"ownership\" to mean what is described here as \"stewardship.\" Many people seem to infer that ownership implies exclusive access; but to me it merely implies authoritative access-control: I may own a car, but I have the authority to give the keys to person's I deem trustworthy and responsible if I so choose. Similarly, I may own a piece of code but I get to choose how relaxed/restrictive I am to others who want to get their hands on it. --[[Brad Appleton]]",
      "id": "34c02eaa7ecb6fc54b55d8a11d9ffcd4"
    },
    {
      "type": "html",
      "text": "\nThere is a distinction I think, one that can make a difference when discussing such configuration management concepts. \"ownership\" brings to mind \"rights\", something everyone wants. \"stewardship\" brings to mind \"responsibilities\", something not so universally clamored for. -- [[Scott Johnston]]",
      "id": "af904464be63198892275992af4cecb1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7e981667e76430b16952580944ad88cc"
    },
    {
      "type": "html",
      "text": "\nI never knew such a disciplined enunciation of these ideas existed until now - thanks to all who have formalized these thoughts. Eight years ago I ran a data center which inherited code from other sites - we did not develop it. We HAD to adopt stewardship principles - and other XP techniques - to survive. Our rules were simple:",
      "id": "e5cf19ab2fe979eb6701c2546decb8d0"
    },
    {
      "type": "html",
      "text": "\n1) Every piece of inherited code was improved when a change was made: minimally by documenting paragraphs not previously documented, or structurally by - what I now understand to be - refactoring.",
      "id": "8a30230e585148ae61217747aac9acfa"
    },
    {
      "type": "html",
      "text": "\n2) Every change going into production was peer-reviewed. As a supervisor my changes were subject to the same rule, and my code was reviewed by my subordinates. If you couldn't understand the changes, then rule #1 was violated, by definition.",
      "id": "7ea608bd4a7d77c891f1493f1967c4f5"
    },
    {
      "type": "html",
      "text": "\n3) Every subsystem had a primary and a secondary knowledge expert. We were our own development AND production support shop, and the business could afford no module going into production that couldn't be fixed by any available member of the team.",
      "id": "b460f5a6d0f3c6ee67dcaf07f8347e4f"
    },
    {
      "type": "html",
      "text": "\n4) Every peer review had to be able to reproduce the test results.",
      "id": "1632db1cf23fc240d6fcd88e365bbb66"
    },
    {
      "type": "html",
      "text": "\n5) The combination of 2, 3, and 4 meant the following: You were fair but thorough in reviewing other's code (because you might get called on to fix production exceptions), you were thorough in your own testing, and you were thorough in your documentation and documentation review since you might have to walk through this code on an emergency basis!",
      "id": "1129467e0ec67319b3e62458b21a2b45"
    },
    {
      "type": "html",
      "text": "\nOur standards were borne out by the following 2 statistics:",
      "id": "891aa2c0cd7d2fe51d53546e1e100e55"
    },
    {
      "type": "html",
      "text": "\na) We reduced time spent on fixing problems from 25% of programming time to 12%",
      "id": "c675fc7804490adc5a78fa669b8411eb"
    },
    {
      "type": "html",
      "text": "\nb) We reduced time spent on fixing OUR problems from 11% to 2%",
      "id": "529b6ef5b41ff8984e6d6ef4be278415"
    },
    {
      "type": "html",
      "text": "-- Andy Higgins",
      "id": "fb0575b4c5bf6ef0a3c02d4f177a097c"
    },
    {
      "type": "html",
      "text": "\nRelated topics: [[Collective Code Ownership]], [[Specialization Is For Insects]], [[How Do You Let Go]]",
      "id": "5c10c7ecfb52af03657b1a465a042bed"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CodeStewardship c2.com]",
      "id": "c5d47242578af182cea9fe7b9f559b3c"
    }
  ],
  "journal": [
    {
      "date": 1133717532000,
      "id": "dd69fd7f80f11decfdaf545fcf81d2a9",
      "type": "create",
      "item": {
        "title": "Code Stewardship",
        "story": [
          {
            "type": "html",
            "text": "[[Code Stewardship]] is an alternative to [[Code Ownership]], emphasizing that code is the team's property, and not the sole province of any one person. A team member is granted stewardship over a piece of code. The steward has primary responsibility for the code's \"care and feeding,\" with input and guidance from the community. The steward normally makes all changes to the code, though trusted members of the team may make changes that the steward is then responsible for vetting.",
            "id": "f0567dc5a543f501763fe183a4203511"
          },
          {
            "type": "html",
            "text": "\nI've found that teams that adopt the position that code is owned by the team have fewer ego conflicts over code than teams that adopt single-user [[Code Ownership]]. (My experience is with small teams in startups. Your mileage may vary.)",
            "id": "b812953737d6600682eb0e05b2d4aacc"
          },
          {
            "type": "html",
            "text": "-- [[Dave Smith]]",
            "id": "de148021c00742d54b2df266eb20181e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7e981667e76430b16952580944ad88cc"
          },
          {
            "type": "html",
            "text": "The difference between this and single code owner are subtle, if not downright cosmetic. The <i>name</i> is different, and probably better in that it emphasizes that the programmer is responsible to the group and that his or her position is temporary. However, unless these consequent ideas are reflected elsewhere in the policy (eg reviews of stewardship by the group, periodic reassigning of stewards), I'm not sure the name alone is enough to change what actually happens. You say that only the steward can make changes, so <i>structurally</i> it is very similar.",
            "id": "f7dcd572416b0aec7a6f27c4d61ce55a"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "a2234ce68ab3ecb3af8d82ce9a7b28db"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7e981667e76430b16952580944ad88cc"
          },
          {
            "type": "html",
            "text": "The difference may seem subtle, but the behaviors generated by [[Code Stewardship]] are noticeably different from the behaviors generated by [[Code Ownership]]. It comes down to <i>ego</i> and <i>turf.</i> Someone who believes that they <i>own</i> the code is, in my experience, likely to hang their ego more on the success of their component(s) than on the success of the overall product. Stewards, on the other hand, are more likely (again, in my experience-YMMV) to make decisions based on the common good, often allowing (or contributing to) changes in their code that they'd have done differently or not a all if they \"owned\" the code. -- [[Dave Smith]]",
            "id": "01eb2c9f4e986afe476f4cb3521f0360"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7e981667e76430b16952580944ad88cc"
          },
          {
            "type": "html",
            "text": "What problem is solved or avoided by encouraging [[Code Stewardship]] instead of [[Collective Code Ownership]]?",
            "id": "4c863845d8d32213c2b594caa7b4d4fd"
          },
          {
            "type": "html",
            "text": "<i>My read on [[Collective Code Ownership]] (influenced by the other XP pages) is that the two ideas are nearly identical, though [[Code Stewardship]] explicitly allows for subject matter experts (e.g., the database steward, the [[Gui Toolkit]] steward) while [[Collective Code Ownership]] does not. In practice, this may not be much of a difference, since developers will naturally gravitate towards their area of expertise. -- [[Dave Smith]]</i>",
            "id": "990cc244ac9b26948c9ed636d9223574"
          },
          {
            "type": "html",
            "text": "\nActually in XP we discourage people gravitating. We recommend switching people around so that you don't get the ego involvement and you do get cross-training. -- [[Ron Jeffries]]",
            "id": "b7ab7e62e9b456dee2931873b9e27f55"
          },
          {
            "type": "html",
            "text": "<i>But don't you sometimes need specialization? Building a GUI requires very different skills than building an object distribution layer or using a database. -- [[Russell Gold]]</i>",
            "id": "b95cab8f87d6e42c2207aabb7e925d2e"
          },
          {
            "type": "html",
            "text": "\nYou can have two GUI experts on a team; can you have two GUI stewards? I got the impression the answer was no, that a steward was one person with sole responsibility. \"Steward\" to me sounds like a binary thing: you are one or you aren't; where as you can have degrees of expertise. To me it sounds like [[Code Stewardship]] is pushing in the same direction as [[Collective Code Ownership]] but is still much closer to single code owner. If there's an advantage, its that being less radical it may be more acceptable to conservative programmers.",
            "id": "db19105571a33bee7c193d1879e5e1a8"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "a2234ce68ab3ecb3af8d82ce9a7b28db"
          },
          {
            "type": "html",
            "text": "<i>You can (and I have had) multiple stewards for the GUI. On reflection, this looked very much like [[Collective Code Ownership]]. The stewardship relationship isn't binary, and does bind by degree of expertise. We kept this from degenerating into [[Code Ownership]] by constantly reinforcing the team's ownership of the code base, and by looking for cross-training opportunities. -- [[Dave Smith]]</i>",
            "id": "b68b08241f20f765e2516e85a23360b7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7e981667e76430b16952580944ad88cc"
          },
          {
            "type": "html",
            "text": "\nI like the term [[Code Stewardship]], because it reinforces the idea of\nprogramming for others who have as great a stake in the code as the original\ndevelopers. And it suggests the varied activities of coordinating software evolution: the generation and management of diffs and patches, the testing\nand fielding of alternate versions, the refactoring of differing versions when possible. -- [[Scott Johnston]]",
            "id": "b0e99924b256d974aa81095003c6ba7c"
          },
          {
            "type": "html",
            "text": "\nI usually interpret \"ownership\" to mean what is described here as \"stewardship.\" Many people seem to infer that ownership implies exclusive access; but to me it merely implies authoritative access-control: I may own a car, but I have the authority to give the keys to person's I deem trustworthy and responsible if I so choose. Similarly, I may own a piece of code but I get to choose how relaxed/restrictive I am to others who want to get their hands on it. --[[Brad Appleton]]",
            "id": "34c02eaa7ecb6fc54b55d8a11d9ffcd4"
          },
          {
            "type": "html",
            "text": "\nThere is a distinction I think, one that can make a difference when discussing such configuration management concepts. \"ownership\" brings to mind \"rights\", something everyone wants. \"stewardship\" brings to mind \"responsibilities\", something not so universally clamored for. -- [[Scott Johnston]]",
            "id": "af904464be63198892275992af4cecb1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7e981667e76430b16952580944ad88cc"
          },
          {
            "type": "html",
            "text": "\nI never knew such a disciplined enunciation of these ideas existed until now - thanks to all who have formalized these thoughts. Eight years ago I ran a data center which inherited code from other sites - we did not develop it. We HAD to adopt stewardship principles - and other XP techniques - to survive. Our rules were simple:",
            "id": "e5cf19ab2fe979eb6701c2546decb8d0"
          },
          {
            "type": "html",
            "text": "\n1) Every piece of inherited code was improved when a change was made: minimally by documenting paragraphs not previously documented, or structurally by - what I now understand to be - refactoring.",
            "id": "8a30230e585148ae61217747aac9acfa"
          },
          {
            "type": "html",
            "text": "\n2) Every change going into production was peer-reviewed. As a supervisor my changes were subject to the same rule, and my code was reviewed by my subordinates. If you couldn't understand the changes, then rule #1 was violated, by definition.",
            "id": "7ea608bd4a7d77c891f1493f1967c4f5"
          },
          {
            "type": "html",
            "text": "\n3) Every subsystem had a primary and a secondary knowledge expert. We were our own development AND production support shop, and the business could afford no module going into production that couldn't be fixed by any available member of the team.",
            "id": "b460f5a6d0f3c6ee67dcaf07f8347e4f"
          },
          {
            "type": "html",
            "text": "\n4) Every peer review had to be able to reproduce the test results.",
            "id": "1632db1cf23fc240d6fcd88e365bbb66"
          },
          {
            "type": "html",
            "text": "\n5) The combination of 2, 3, and 4 meant the following: You were fair but thorough in reviewing other's code (because you might get called on to fix production exceptions), you were thorough in your own testing, and you were thorough in your documentation and documentation review since you might have to walk through this code on an emergency basis!",
            "id": "1129467e0ec67319b3e62458b21a2b45"
          },
          {
            "type": "html",
            "text": "\nOur standards were borne out by the following 2 statistics:",
            "id": "891aa2c0cd7d2fe51d53546e1e100e55"
          },
          {
            "type": "html",
            "text": "\na) We reduced time spent on fixing problems from 25% of programming time to 12%",
            "id": "c675fc7804490adc5a78fa669b8411eb"
          },
          {
            "type": "html",
            "text": "\nb) We reduced time spent on fixing OUR problems from 11% to 2%",
            "id": "529b6ef5b41ff8984e6d6ef4be278415"
          },
          {
            "type": "html",
            "text": "-- Andy Higgins",
            "id": "fb0575b4c5bf6ef0a3c02d4f177a097c"
          },
          {
            "type": "html",
            "text": "\nRelated topics: [[Collective Code Ownership]], [[Specialization Is For Insects]], [[How Do You Let Go]]",
            "id": "5c10c7ecfb52af03657b1a465a042bed"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CodeStewardship c2.com]",
            "id": "c5d47242578af182cea9fe7b9f559b3c"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628171152219
    }
  ]
}