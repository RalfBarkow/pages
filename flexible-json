{
  "title": "Flexible-json",
  "story": [
    {
      "type": "markdown",
      "id": "d10e4b355149083a",
      "text": "We have developed the habit of storing data within a [[wiki-page]]. This hack has proven useful in a classic [[wiki-way]]. Rather than fixing a schema-based reference for say a graph - we refer to:\n"
    },
    {
      "type": "code",
      "id": "d6c27cf4305dd623",
      "text": "the first graph on the page"
    },
    {
      "type": "markdown",
      "id": "961a827aa7cf703d",
      "text": "We can fetch the page-json with a canonical url made up of the domain-name and the [[page-slug]]. Software is easily able to iterate through ordered story-items until it finds an item of [[item-type]] “graphviz” and then return the text associated with this item.\n"
    },
    {
      "type": "markdown",
      "id": "71d28eddb57a9fec",
      "text": "We are able to drag items around the page and add whatever we like to the page including other graphs. If we want to change the graph that is returned we can drag a new graph above the old graph so it now comes first in the list.\n"
    },
    {
      "type": "markdown",
      "id": "146e0ac201cd369d",
      "text": "Of course we can refer to items using their [[item-id]], but we have found that this is not as robust, as an author might delete the item - say the graph - and then add another one by hand - we prefer to rely on the visible expression of the data and leave the schema loose but easy to code."
    },
    {
      "type": "markdown",
      "id": "3cd51b2360a05e46",
      "text": "Of course eventually we may need to formalise the data and provide a robust schema, but that does not mean that this [[flexible-json]] approach does not have creative merit. We are building easy to scrape web pages. This informality provides the basis for creative evolution."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Flexible-json",
        "story": []
      },
      "date": 1630238573946
    },
    {
      "item": {
        "type": "factory",
        "id": "d10e4b355149083a"
      },
      "id": "d10e4b355149083a",
      "type": "add",
      "date": 1630238574976
    },
    {
      "type": "edit",
      "id": "d10e4b355149083a",
      "item": {
        "type": "markdown",
        "id": "d10e4b355149083a",
        "text": "We have developed the habit of storing data within a [[wiki-page]]. This hack has proven useful in a classic [[wiki-way]]. Rather than fixing a schema-based reference for say a graph - we refer to:\n"
      },
      "date": 1630238725767
    },
    {
      "type": "add",
      "id": "d6c27cf4305dd623",
      "item": {
        "type": "factory",
        "id": "d6c27cf4305dd623",
        "text": "The first "
      },
      "after": "d10e4b355149083a",
      "date": 1630238733829
    },
    {
      "type": "edit",
      "id": "d6c27cf4305dd623",
      "item": {
        "type": "code",
        "id": "d6c27cf4305dd623",
        "text": "the first graph on the page"
      },
      "date": 1630238755349
    },
    {
      "item": {
        "type": "factory",
        "id": "961a827aa7cf703d"
      },
      "id": "961a827aa7cf703d",
      "type": "add",
      "after": "d6c27cf4305dd623",
      "date": 1630238758533
    },
    {
      "type": "edit",
      "id": "961a827aa7cf703d",
      "item": {
        "type": "markdown",
        "id": "961a827aa7cf703d",
        "text": "We can fetch the page-json with a canonical url made up of the domain-name and the [[page-slug]]. Software is easily able to iterate through ordered story-items until it finds an item of [[item-type]] “graphviz” and then return the text associated with this item.\n"
      },
      "date": 1630238949110
    },
    {
      "type": "add",
      "id": "71d28eddb57a9fec",
      "item": {
        "type": "markdown",
        "id": "71d28eddb57a9fec",
        "text": "We are able to drag items around the page and add whatever we like to the page including other graphs. If we want to change the graph that is returned we can drag a new graph above the old graph so it now comes first in the list.\n"
      },
      "after": "961a827aa7cf703d",
      "date": 1630239027416
    },
    {
      "type": "add",
      "id": "146e0ac201cd369d",
      "item": {
        "type": "markdown",
        "id": "146e0ac201cd369d",
        "text": "Of course we can refer to items using their [[item-id]], but we have found that this is not as robust, as an author might delete the item - say the graph - and then add another one by hand - we prefer to rely on the visible expression of the data and leave the schema loose but easy to code."
      },
      "after": "71d28eddb57a9fec",
      "date": 1630239142600
    },
    {
      "item": {
        "type": "factory",
        "id": "3cd51b2360a05e46"
      },
      "id": "3cd51b2360a05e46",
      "type": "add",
      "after": "146e0ac201cd369d",
      "date": 1630239154055
    },
    {
      "type": "edit",
      "id": "3cd51b2360a05e46",
      "item": {
        "type": "markdown",
        "id": "3cd51b2360a05e46",
        "text": "Of course eventually we may need to formalise the data and provide a robust schema, but that does not mean that this [[flexible-json]] approach does not have creative merit. We are building easy to scrape web pages. This informality provides the basis for creative evolution."
      },
      "date": 1630239257088
    },
    {
      "type": "fork",
      "site": "livecode.world",
      "date": 1630307691928
    }
  ]
}