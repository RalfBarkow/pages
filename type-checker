{
  "title": "Type Checker",
  "story": [
    {
      "type": "reference",
      "id": "2268c7a4adaf4ef6",
      "site": "wiki.ralfbarkow.ch",
      "slug": "strong-typing",
      "title": "Strong Typing",
      "text": "Talk given to Philadelphia and St. Louis Perl mongers September 22, 1999. [https://perl.plover.com/yak/typing/notes.html page]"
    },
    {
      "type": "paragraph",
      "id": "1a4406e412ac4b2b",
      "text": "Slide 30: Huh???\n\nHas the vaunted ML type checker screwed up? It certainly has produced an impossible result. Will we have to disable it or work around it to get our program to compile, like we had to in C and Pascal? No. The type checker has the type correct in this case. The fact that the type is not what we expected means that there is a bug in our program, not in the type checker.\n\nHow can the impossible occur? One way is if it never actually occurs. That's why you can promise to renew your NSI registration when Hell freezes over. Are you going to have to renew? No, because Hell is not going to freeze over.\n\nIf we put a list of strings into our sort function, the compiler says that when it returns, it will have turned it into a list of ints. This is impossible. One possible explanation is that the sort function never returns. And in fact this is the case. The sort function, as we wrote it, goes into an infinite loop on any input except the empty list.\n\n"
    },
    {
      "type": "markdown",
      "id": "1c653e743062ad39",
      "text": "**This means that the type checker has found an infinite loop bug in our program. Ponder that for a minute.**"
    },
    {
      "type": "paragraph",
      "id": "97fbd28b2320a57b",
      "text": "\nNow try to imagine the Pascal type checker detecting an infinite loop."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Type Checker",
        "story": []
      },
      "date": 1651397219422
    },
    {
      "item": {
        "type": "factory",
        "id": "1a4406e412ac4b2b"
      },
      "id": "1a4406e412ac4b2b",
      "type": "add",
      "date": 1651398431687
    },
    {
      "type": "edit",
      "id": "1a4406e412ac4b2b",
      "item": {
        "type": "paragraph",
        "id": "1a4406e412ac4b2b",
        "text": "Slide 30: Huh???\n\nHas the vaunted ML type checker screwed up? It certainly has produced an impossible result. Will we have to disable it or work around it to get our program to compile, like we had to in C and Pascal? No. The type checker has the type correct in this case. The fact that the type is not what we expected means that there is a bug in our program, not in the type checker.\n\nHow can the impossible occur? One way is if it never actually occurs. That's why you can promise to renew your NSI registration when Hell freezes over. Are you going to have to renew? No, because Hell is not going to freeze over.\n\nIf we put a list of strings into our sort function, the compiler says that when it returns, it will have turned it into a list of ints. This is impossible. One possible explanation is that the sort function never returns. And in fact this is the case. The sort function, as we wrote it, goes into an infinite loop on any input except the empty list.\n\nThis means that the type checker has found an infinite loop bug in our program. Ponder that for a minute.\n\nNow try to imagine the Pascal type checker detecting an infinite loop."
      },
      "date": 1651398434774
    },
    {
      "item": {
        "type": "factory",
        "id": "2268c7a4adaf4ef6"
      },
      "id": "2268c7a4adaf4ef6",
      "type": "add",
      "after": "1a4406e412ac4b2b",
      "date": 1651398454079
    },
    {
      "id": "2268c7a4adaf4ef6",
      "type": "move",
      "order": [
        "2268c7a4adaf4ef6",
        "1a4406e412ac4b2b"
      ],
      "date": 1651398459172
    },
    {
      "type": "edit",
      "id": "2268c7a4adaf4ef6",
      "item": {
        "type": "reference",
        "id": "2268c7a4adaf4ef6",
        "site": "wiki.ralfbarkow.ch",
        "slug": "strong-typing",
        "title": "Strong Typing",
        "text": "Talk given to Philadelphia and St. Louis Perl mongers September 22, 1999. [https://perl.plover.com/yak/typing/notes.html page]"
      },
      "date": 1651398461751
    },
    {
      "type": "edit",
      "id": "1a4406e412ac4b2b",
      "item": {
        "type": "paragraph",
        "id": "1a4406e412ac4b2b",
        "text": "Slide 30: Huh???\n\nHas the vaunted ML type checker screwed up? It certainly has produced an impossible result. Will we have to disable it or work around it to get our program to compile, like we had to in C and Pascal? No. The type checker has the type correct in this case. The fact that the type is not what we expected means that there is a bug in our program, not in the type checker.\n\nHow can the impossible occur? One way is if it never actually occurs. That's why you can promise to renew your NSI registration when Hell freezes over. Are you going to have to renew? No, because Hell is not going to freeze over.\n\nIf we put a list of strings into our sort function, the compiler says that when it returns, it will have turned it into a list of ints. This is impossible. One possible explanation is that the sort function never returns. And in fact this is the case. The sort function, as we wrote it, goes into an infinite loop on any input except the empty list.\n\n"
      },
      "date": 1651398551629
    },
    {
      "type": "add",
      "id": "1c653e743062ad39",
      "item": {
        "type": "paragraph",
        "id": "1c653e743062ad39",
        "text": "This means that the type checker has found an infinite loop bug in our program. Ponder that for a minute."
      },
      "after": "1a4406e412ac4b2b",
      "date": 1651398554401
    },
    {
      "type": "add",
      "id": "97fbd28b2320a57b",
      "item": {
        "type": "paragraph",
        "id": "97fbd28b2320a57b",
        "text": "\nNow try to imagine the Pascal type checker detecting an infinite loop."
      },
      "after": "1c653e743062ad39",
      "date": 1651398555625
    },
    {
      "type": "edit",
      "id": "1c653e743062ad39",
      "item": {
        "type": "paragraph",
        "id": "1c653e743062ad39",
        "text": "**This means that the type checker has found an infinite loop bug in our program. Ponder that for a minute.**"
      },
      "date": 1651398562124
    },
    {
      "type": "edit",
      "id": "1c653e743062ad39",
      "item": {
        "type": "markdown",
        "id": "1c653e743062ad39",
        "text": "**This means that the type checker has found an infinite loop bug in our program. Ponder that for a minute.**"
      },
      "date": 1651398563278
    }
  ]
}