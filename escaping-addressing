{
  "title": "Escaping Addressing",
  "story": [
    {
      "type": "paragraph",
      "id": "66be257b309313b1",
      "text": "Address busses works well and are at the heart of both processor and memory design on a variety of scales. Address busses make computers a logical machine for when they are properly clocked we can reason knowing all elements have been considered. But this pattern is rare or nonexistent in nature. Let's understand why."
    },
    {
      "type": "paragraph",
      "id": "a0a2ef9ea25c5dc6",
      "text": "A position statement from the Biological Framings of Problems in Computing workshop held April 17-19, 2002, at the Santa Fe Institute in Santa Fe, New Mexico. [http://c2.com/cybords/wiki.cgi?EscapingAddresses post]"
    },
    {
      "type": "paragraph",
      "id": "a808bd42a257eac1",
      "text": "Biological systems signal through codes such as the genetic code or the [[Anti-idiotype Network]]. They signal along transmission lines such as the myelin sheathed axon and branching trees like the dendrite. They switch signal expression with flags and transport messengers along routes. They organize along fields such as the concentration gradients that cue differentiation. But they don't (or don't often) buss addresses. That is because the signal carriers (atoms, not electrons) are too sluggish to make an address buss useful. "
    },
    {
      "type": "paragraph",
      "id": "31ee243fea653652",
      "text": "As we increase the number of elements on a chip, in a cabinet or on a network above a threshold even the speedy electron slows to a level that makes busses impractical. Then the system designer is challenged to [[Maintain the Fiction of Addressability]]. Registers, arrays, caches, servers, and singletons are all artifacts we maintain as if addressing were always as easy as it once was. The co-evolution of our hardware and software designs have enshrined the address buss so firmly in our computational world that only a restart can displace it. "
    },
    {
      "type": "paragraph",
      "id": "1ef931853cb3d1c9",
      "text": "Imagine a world where the very first computers were manufactured from twelve inch wafers, deployed into an environment where every person had hundereds, and that they were all connected, world wide. Would we choose to make addresses presented on a buss a fundamental idiom?"
    },
    {
      "type": "paragraph",
      "id": "4cf0a86fdf5f2094",
      "text": "When we abandon address busses we abandon the logical determinism that comes with them. We can no longer be sure that all elements have been considered. Such is already the life of the network engineer. But in programming methods and language design and even processor architecture, we hang on to logic as if it were all that were possible. This is not because no one has pointed to another way. Rather, it is because no community of circuit, system, network, language and methodology designers have looked the same way at the same time. -- [[Ward Cunningham]]"
    },
    {
      "type": "pagefold",
      "id": "57e7276e84b048b1",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "2a3577b21f972aa0",
      "site": "wiki.ralfbarkow.ch",
      "slug": "anti-idiotype-network",
      "title": "Anti-idiotype Network",
      "text": "Chronic dysimmune neuropathies encompass a group of neuropathies that share immune-mediated pathomechanism."
    },
    {
      "type": "paragraph",
      "id": "9c797f0f94bf6ea8",
      "text": "We will know that we have escaped the confining logic of addressability when we consider proliferation to be a sign of success rather than failure. See OnceAndOnlyOnce: "
    },
    {
      "type": "reference",
      "id": "058b5fe73358d804",
      "site": "wiki.ralfbarkow.ch",
      "slug": "once-and-only-once",
      "title": "Once And Only Once",
      "text": "One of the main goals (if not <i>the</i> main goal) when [[Re Factoring]] code. Each and every declaration of behavior should appear [[Once And Only Once]]. Conceptually analogous to normalization in the [[Relational Model]]. See also [[Dont Repeat Yourself]]."
    },
    {
      "type": "paragraph",
      "id": "d75e11549bc266fc",
      "text": "Similar arguments have been made regarding the Von Neumann bottleneck. I find both the bottleneck and the usual alternatives non-biological and seek here to find something more fundamental to replace. "
    },
    {
      "type": "paragraph",
      "id": "eb8d342560f5528e",
      "text": "[[Tom Ray]] chose complementary matching as an alternative to offset addressing in Tierra's instruction set. His motivation was to make small changes have small effects so as to not break things hopelessly with every mutation. "
    },
    {
      "type": "pagefold",
      "id": "699423d5952655ab",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "83b32cb5d4f190df",
      "text": "The following comments were inspired by Ward's remarks although they do not follow from them directly. In simulating 'biological' agents, the choice of space (and hence 'addressing') seems critical. Many simulations use a 2D grid: this is nice, because you can easily display the simulation on a 2D pixel grid aka 'monitor'. But it's quite limited.\n\n"
    },
    {
      "type": "paragraph",
      "id": "8b8dd04c729f078f",
      "text": "I've moved to using 3D grids (and 3D graphics software for display). A cubic cell has common faces with 6 others rather than 4, but the increase in complexity is higher than the numbers suggest. Biology makes good use of 3D, but it's not clear how much could be achieved in 2D.\n\n"
    },
    {
      "type": "paragraph",
      "id": "1624f99059547424",
      "text": "If our agents are computer code/data, we can use memory addresses as our 'space'. There are many ways of doing this. Tierra uses a linear space. But a 32-bit word can also be interpreted as 1, 2, 4, ..., 32 dimensions and, as Kanerva has shown (\"[[Sparse Distributed Memory]]\", MIT Press), binary hypercubes of high dimension have interesting properties. Distances are easy to compute with the Hamming metric and 'spheres of influence' (Hamming distance < r) have nice properties.\n\n"
    },
    {
      "type": "paragraph",
      "id": "1af90e66997459ae",
      "text": "On a slightly different note, Ward mentions the difficulty of self-replication in 2D. I suspect it's even hard in 3D! But biological organisms don't self-replicate, they lay eggs instead. The only self-replication problem they solve is [[copy]]ing the DNA, which is approximately 1D. -- PeterGrogono "
    },
    {
      "type": "pagefold",
      "id": "514884eb304e2e14",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "60dd7677c3e03927",
      "text": "I strongly concur with Peter. I think life is able to self-replicate but only at the very lowest level. And this is the level that I think is possible to mimic through computer programs. Lisp, for example, has the very unique feature that code is data, and this property allows it to \"encode\" in metadata, the structures that are to emerge in a morphogenesis process. -- [[Mike Beedle]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Escaping Addressing",
        "story": []
      },
      "date": 1450805466632
    },
    {
      "item": {
        "type": "factory",
        "id": "66be257b309313b1"
      },
      "id": "66be257b309313b1",
      "type": "add",
      "date": 1450805539261
    },
    {
      "type": "edit",
      "id": "66be257b309313b1",
      "item": {
        "type": "paragraph",
        "id": "66be257b309313b1",
        "text": "Address busses works well and are at the heart of both processor and memory design on a variety of scales. Address busses make computers a logical machine for when they are properly clocked we can reason knowing all elements have been considered. But this pattern is rare or nonexistent in nature. Let's understand why."
      },
      "date": 1450805620903
    },
    {
      "type": "add",
      "id": "a0a2ef9ea25c5dc6",
      "item": {
        "type": "paragraph",
        "id": "a0a2ef9ea25c5dc6",
        "text": "A position statement from the Biological Framings of Problems in Computing workshop held April 17-19, 2002, at the Santa Fe Institute in Santa Fe, New Mexico."
      },
      "after": "66be257b309313b1",
      "date": 1450805669715
    },
    {
      "type": "edit",
      "id": "a0a2ef9ea25c5dc6",
      "item": {
        "type": "paragraph",
        "id": "a0a2ef9ea25c5dc6",
        "text": "A position statement from the Biological Framings of Problems in Computing workshop held April 17-19, 2002, at the Santa Fe Institute in Santa Fe, New Mexico. [http://c2.com/cybords/wiki.cgi?EscapingAddresses post]"
      },
      "date": 1450805689996
    },
    {
      "type": "fork",
      "site": "ward.asia.wiki.org",
      "date": 1637919374510
    },
    {
      "item": {
        "type": "factory",
        "id": "a808bd42a257eac1"
      },
      "id": "a808bd42a257eac1",
      "type": "add",
      "after": "a0a2ef9ea25c5dc6",
      "date": 1673848758288
    },
    {
      "type": "edit",
      "id": "a808bd42a257eac1",
      "item": {
        "type": "paragraph",
        "id": "a808bd42a257eac1",
        "text": "Biological systems signal through codes such as the genetic code or the anti-idiotype network. They signal along transmission lines such as the myelin sheathed axon and branching trees like the dendrite. They switch signal expression with flags and transport messengers along routes. They organize along fields such as the concentration gradients that cue differentiation. But they don't (or don't often) buss addresses. That is because the signal carriers (atoms, not electrons) are too sluggish to make an address buss useful. "
      },
      "date": 1673848759911
    },
    {
      "item": {
        "type": "factory",
        "id": "2a3577b21f972aa0"
      },
      "id": "2a3577b21f972aa0",
      "type": "add",
      "after": "a808bd42a257eac1",
      "date": 1673848791458
    },
    {
      "type": "edit",
      "id": "2a3577b21f972aa0",
      "item": {
        "type": "reference",
        "id": "2a3577b21f972aa0",
        "site": "wiki.ralfbarkow.ch",
        "slug": "anti-idiotype-network",
        "title": "Anti-idiotype Network",
        "text": "Chronic dysimmune neuropathies encompass a group of neuropathies that share immune-mediated pathomechanism."
      },
      "date": 1673848794618
    },
    {
      "item": {
        "type": "factory",
        "id": "57e7276e84b048b1"
      },
      "id": "57e7276e84b048b1",
      "type": "add",
      "after": "2a3577b21f972aa0",
      "date": 1673848811685
    },
    {
      "id": "57e7276e84b048b1",
      "type": "move",
      "order": [
        "66be257b309313b1",
        "a0a2ef9ea25c5dc6",
        "a808bd42a257eac1",
        "57e7276e84b048b1",
        "2a3577b21f972aa0"
      ],
      "date": 1673848814667
    },
    {
      "type": "edit",
      "id": "a808bd42a257eac1",
      "item": {
        "type": "paragraph",
        "id": "a808bd42a257eac1",
        "text": "Biological systems signal through codes such as the genetic code or the Anti-idiotype Network. They signal along transmission lines such as the myelin sheathed axon and branching trees like the dendrite. They switch signal expression with flags and transport messengers along routes. They organize along fields such as the concentration gradients that cue differentiation. But they don't (or don't often) buss addresses. That is because the signal carriers (atoms, not electrons) are too sluggish to make an address buss useful. "
      },
      "date": 1673848816166
    },
    {
      "type": "edit",
      "id": "57e7276e84b048b1",
      "item": {
        "type": "pagefold",
        "id": "57e7276e84b048b1",
        "text": "~"
      },
      "date": 1673848817717
    },
    {
      "type": "edit",
      "id": "a808bd42a257eac1",
      "item": {
        "type": "paragraph",
        "id": "a808bd42a257eac1",
        "text": "Biological systems signal through codes such as the genetic code or the [[Anti-idiotype Network]]. They signal along transmission lines such as the myelin sheathed axon and branching trees like the dendrite. They switch signal expression with flags and transport messengers along routes. They organize along fields such as the concentration gradients that cue differentiation. But they don't (or don't often) buss addresses. That is because the signal carriers (atoms, not electrons) are too sluggish to make an address buss useful. "
      },
      "date": 1673848830221
    },
    {
      "id": "31ee243fea653652",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "31ee243fea653652",
        "text": "As we increase the number of elements on a chip, in a cabinet or on a network above a threshold even the speedy electron slows to a level that makes busses impractical. Then the system designer is challenged to [[Maintain the Fiction of Addressability]]. Registers, arrays, caches, servers, and singletons are all artifacts we maintain as if addressing were always as easy as it once was. The co-evolution of our hardware and software designs have enshrined the address buss so firmly in our computational world that only a restart can displace it. "
      },
      "after": "a808bd42a257eac1",
      "date": 1673848943500
    },
    {
      "item": {
        "type": "factory",
        "id": "1ef931853cb3d1c9"
      },
      "id": "1ef931853cb3d1c9",
      "type": "add",
      "after": "2a3577b21f972aa0",
      "date": 1673849000532
    },
    {
      "id": "1ef931853cb3d1c9",
      "type": "move",
      "order": [
        "66be257b309313b1",
        "a0a2ef9ea25c5dc6",
        "a808bd42a257eac1",
        "31ee243fea653652",
        "1ef931853cb3d1c9",
        "57e7276e84b048b1",
        "2a3577b21f972aa0"
      ],
      "date": 1673849002235
    },
    {
      "type": "edit",
      "id": "1ef931853cb3d1c9",
      "item": {
        "type": "paragraph",
        "id": "1ef931853cb3d1c9",
        "text": "Imagine a world where the very first computers were manufactured from twelve inch wafers, deployed into an environment where every person had hundereds, and that they were all connected, world wide. Would we choose to make addresses presented on a buss a fundamental idiom? I think not. "
      },
      "date": 1673849003708
    },
    {
      "type": "edit",
      "id": "1ef931853cb3d1c9",
      "item": {
        "type": "paragraph",
        "id": "1ef931853cb3d1c9",
        "text": "Imagine a world where the very first computers were manufactured from twelve inch wafers, deployed into an environment where every person had hundereds, and that they were all connected, world wide. Would we choose to make addresses presented on a buss a fundamental idiom?"
      },
      "date": 1673849031870
    },
    {
      "type": "add",
      "id": "4cf0a86fdf5f2094",
      "item": {
        "type": "paragraph",
        "id": "4cf0a86fdf5f2094",
        "text": "When we abandon address busses we abandon the logical determinism that comes with them. We can no longer be sure that all elements have been considered. Such is already the life of the network engineer. But in programming methods and language design and even processor architecture, we hang on to logic as if it were all that were possible. This is not because no one has pointed to another way. Rather, it is because no community of circuit, system, network, language and methodology designers have looked the same way at the same time. -- [[Ward Cunningham]]"
      },
      "after": "1ef931853cb3d1c9",
      "date": 1673849074731
    },
    {
      "item": {
        "type": "factory",
        "id": "058b5fe73358d804"
      },
      "id": "058b5fe73358d804",
      "type": "add",
      "after": "2a3577b21f972aa0",
      "date": 1673849141076
    },
    {
      "type": "edit",
      "id": "058b5fe73358d804",
      "item": {
        "type": "reference",
        "id": "058b5fe73358d804",
        "site": "wiki.ralfbarkow.ch",
        "slug": "once-and-only-once",
        "title": "Once And Only Once",
        "text": "One of the main goals (if not <i>the</i> main goal) when [[Re Factoring]] code. Each and every declaration of behavior should appear [[Once And Only Once]]. Conceptually analogous to normalization in the [[Relational Model]]. See also [[Dont Repeat Yourself]]."
      },
      "date": 1673849143517
    },
    {
      "item": {
        "type": "factory",
        "id": "9c797f0f94bf6ea8"
      },
      "id": "9c797f0f94bf6ea8",
      "type": "add",
      "after": "058b5fe73358d804",
      "date": 1673849171470
    },
    {
      "type": "edit",
      "id": "9c797f0f94bf6ea8",
      "item": {
        "type": "paragraph",
        "id": "9c797f0f94bf6ea8",
        "text": "We will know that we have escaped the confining logic of addressability when we consider proliferation to be a sign of success rather than failure. See OnceAndOnlyOnce. "
      },
      "date": 1673849173636
    },
    {
      "id": "9c797f0f94bf6ea8",
      "type": "move",
      "order": [
        "66be257b309313b1",
        "a0a2ef9ea25c5dc6",
        "a808bd42a257eac1",
        "31ee243fea653652",
        "1ef931853cb3d1c9",
        "4cf0a86fdf5f2094",
        "57e7276e84b048b1",
        "2a3577b21f972aa0",
        "9c797f0f94bf6ea8",
        "058b5fe73358d804"
      ],
      "date": 1673849175504
    },
    {
      "type": "edit",
      "id": "9c797f0f94bf6ea8",
      "item": {
        "type": "paragraph",
        "id": "9c797f0f94bf6ea8",
        "text": "We will know that we have escaped the confining logic of addressability when we consider proliferation to be a sign of success rather than failure. See OnceAndOnlyOnce: "
      },
      "date": 1673849182957
    },
    {
      "item": {
        "type": "factory",
        "id": "d75e11549bc266fc"
      },
      "id": "d75e11549bc266fc",
      "type": "add",
      "after": "058b5fe73358d804",
      "date": 1673852872526
    },
    {
      "type": "edit",
      "id": "d75e11549bc266fc",
      "item": {
        "type": "paragraph",
        "id": "d75e11549bc266fc",
        "text": "Similar arguments have been made regarding the Von Neumann bottleneck. I find both the bottleneck and the usual alternatives non-biological and seek here to find something more fundamental to replace. "
      },
      "date": 1673852874870
    },
    {
      "item": {
        "type": "factory",
        "id": "eb8d342560f5528e"
      },
      "id": "eb8d342560f5528e",
      "type": "add",
      "after": "d75e11549bc266fc",
      "date": 1673852954782
    },
    {
      "type": "edit",
      "id": "eb8d342560f5528e",
      "item": {
        "type": "paragraph",
        "id": "eb8d342560f5528e",
        "text": "TomRay chose complementary matching as an alternative to offset addressing in Tierra's instruction set. His motivation was to make small changes have small effects so as to not break things hopelessly with every mutation. "
      },
      "date": 1673852960961
    },
    {
      "type": "edit",
      "id": "eb8d342560f5528e",
      "item": {
        "type": "paragraph",
        "id": "eb8d342560f5528e",
        "text": "[[Tom Ray]] chose complementary matching as an alternative to offset addressing in Tierra's instruction set. His motivation was to make small changes have small effects so as to not break things hopelessly with every mutation. "
      },
      "date": 1673852974863
    },
    {
      "item": {
        "type": "factory",
        "id": "699423d5952655ab"
      },
      "id": "699423d5952655ab",
      "type": "add",
      "after": "eb8d342560f5528e",
      "date": 1673853038831
    },
    {
      "type": "edit",
      "id": "699423d5952655ab",
      "item": {
        "type": "pagefold",
        "id": "699423d5952655ab",
        "text": "~"
      },
      "date": 1673853043329
    },
    {
      "item": {
        "type": "factory",
        "id": "83b32cb5d4f190df"
      },
      "id": "83b32cb5d4f190df",
      "type": "add",
      "after": "699423d5952655ab",
      "date": 1673853057910
    },
    {
      "type": "edit",
      "id": "83b32cb5d4f190df",
      "item": {
        "type": "paragraph",
        "id": "83b32cb5d4f190df",
        "text": "The following comments were inspired by Ward's remarks although they do not follow from them directly. In simulating 'biological' agents, the choice of space (and hence 'addressing') seems critical. Many simulations use a 2D grid: this is nice, because you can easily display the simulation on a 2D pixel grid aka 'monitor'. But it's quite limited.\n\nI've moved to using 3D grids (and 3D graphics software for display). A cubic cell has common faces with 6 others rather than 4, but the increase in complexity is higher than the numbers suggest. Biology makes good use of 3D, but it's not clear how much could be achieved in 2D.\n\nIf our agents are computer code/data, we can use memory addresses as our 'space'. There are many ways of doing this. Tierra uses a linear space. But a 32-bit word can also be interpreted as 1, 2, 4, ..., 32 dimensions and, as Kanerva has shown (\"Sparse Distributed Memory\", MIT Press), binary hypercubes of high dimension have interesting properties. Distances are easy to compute with the Hamming metric and 'spheres of influence' (Hamming distance < r) have nice properties.\n\nOn a slightly different note, Ward mentions the difficulty of self-replication in 2D. I suspect it's even hard in 3D! But biological organisms don't self-replicate, they lay eggs instead. The only self-replication problem they solve is copying the DNA, which is approximately 1D. -- PeterGrogono "
      },
      "date": 1673853064771
    },
    {
      "item": {
        "type": "factory",
        "id": "514884eb304e2e14"
      },
      "id": "514884eb304e2e14",
      "type": "add",
      "after": "83b32cb5d4f190df",
      "date": 1673853080959
    },
    {
      "type": "edit",
      "id": "514884eb304e2e14",
      "item": {
        "type": "pagefold",
        "id": "514884eb304e2e14",
        "text": "~"
      },
      "date": 1673853084480
    },
    {
      "item": {
        "type": "factory",
        "id": "60dd7677c3e03927"
      },
      "id": "60dd7677c3e03927",
      "type": "add",
      "after": "514884eb304e2e14",
      "date": 1673853086393
    },
    {
      "type": "edit",
      "id": "60dd7677c3e03927",
      "item": {
        "type": "paragraph",
        "id": "60dd7677c3e03927",
        "text": "I strongly concur with Peter. I think life is able to self-replicate but only at the very lowest level. And this is the level that I think is possible to mimic through computer programs. Lisp, for exmaple, has the very unique feature that code is data, and this property allows it to \"encode\" in metadata, the structures that are to emerge in a morphogenesis process. -- MikeBeedle"
      },
      "date": 1673853088190
    },
    {
      "type": "edit",
      "id": "60dd7677c3e03927",
      "item": {
        "type": "paragraph",
        "id": "60dd7677c3e03927",
        "text": "I strongly concur with Peter. I think life is able to self-replicate but only at the very lowest level. And this is the level that I think is possible to mimic through computer programs. Lisp, for example, has the very unique feature that code is data, and this property allows it to \"encode\" in metadata, the structures that are to emerge in a morphogenesis process. -- MikeBeedle"
      },
      "date": 1673853104568
    },
    {
      "type": "edit",
      "id": "60dd7677c3e03927",
      "item": {
        "type": "paragraph",
        "id": "60dd7677c3e03927",
        "text": "I strongly concur with Peter. I think life is able to self-replicate but only at the very lowest level. And this is the level that I think is possible to mimic through computer programs. Lisp, for example, has the very unique feature that code is data, and this property allows it to \"encode\" in metadata, the structures that are to emerge in a morphogenesis process. -- [[Mike Beedle]]"
      },
      "date": 1673853136691
    },
    {
      "type": "edit",
      "id": "83b32cb5d4f190df",
      "item": {
        "type": "paragraph",
        "id": "83b32cb5d4f190df",
        "text": "The following comments were inspired by Ward's remarks although they do not follow from them directly. In simulating 'biological' agents, the choice of space (and hence 'addressing') seems critical. Many simulations use a 2D grid: this is nice, because you can easily display the simulation on a 2D pixel grid aka 'monitor'. But it's quite limited.\n\nI've moved to using 3D grids (and 3D graphics software for display). A cubic cell has common faces with 6 others rather than 4, but the increase in complexity is higher than the numbers suggest. Biology makes good use of 3D, but it's not clear how much could be achieved in 2D.\n\nIf our agents are computer code/data, we can use memory addresses as our 'space'. There are many ways of doing this. Tierra uses a linear space. But a 32-bit word can also be interpreted as 1, 2, 4, ..., 32 dimensions and, as Kanerva has shown (\"Sparse Distributed Memory\", MIT Press), binary hypercubes of high dimension have interesting properties. Distances are easy to compute with the Hamming metric and 'spheres of influence' (Hamming distance < r) have nice properties.\n\n"
      },
      "date": 1673853465472
    },
    {
      "type": "add",
      "id": "1af90e66997459ae",
      "item": {
        "type": "paragraph",
        "id": "1af90e66997459ae",
        "text": "On a slightly different note, Ward mentions the difficulty of self-replication in 2D. I suspect it's even hard in 3D! But biological organisms don't self-replicate, they lay eggs instead. The only self-replication problem they solve is copying the DNA, which is approximately 1D. -- PeterGrogono "
      },
      "after": "83b32cb5d4f190df",
      "date": 1673853470039
    },
    {
      "type": "edit",
      "id": "83b32cb5d4f190df",
      "item": {
        "type": "paragraph",
        "id": "83b32cb5d4f190df",
        "text": "The following comments were inspired by Ward's remarks although they do not follow from them directly. In simulating 'biological' agents, the choice of space (and hence 'addressing') seems critical. Many simulations use a 2D grid: this is nice, because you can easily display the simulation on a 2D pixel grid aka 'monitor'. But it's quite limited.\n\nI've moved to using 3D grids (and 3D graphics software for display). A cubic cell has common faces with 6 others rather than 4, but the increase in complexity is higher than the numbers suggest. Biology makes good use of 3D, but it's not clear how much could be achieved in 2D.\n\n"
      },
      "date": 1673853479022
    },
    {
      "type": "add",
      "id": "1624f99059547424",
      "item": {
        "type": "paragraph",
        "id": "1624f99059547424",
        "text": "If our agents are computer code/data, we can use memory addresses as our 'space'. There are many ways of doing this. Tierra uses a linear space. But a 32-bit word can also be interpreted as 1, 2, 4, ..., 32 dimensions and, as Kanerva has shown (\"Sparse Distributed Memory\", MIT Press), binary hypercubes of high dimension have interesting properties. Distances are easy to compute with the Hamming metric and 'spheres of influence' (Hamming distance < r) have nice properties.\n\n"
      },
      "after": "83b32cb5d4f190df",
      "date": 1673853480526
    },
    {
      "type": "edit",
      "id": "83b32cb5d4f190df",
      "item": {
        "type": "paragraph",
        "id": "83b32cb5d4f190df",
        "text": "The following comments were inspired by Ward's remarks although they do not follow from them directly. In simulating 'biological' agents, the choice of space (and hence 'addressing') seems critical. Many simulations use a 2D grid: this is nice, because you can easily display the simulation on a 2D pixel grid aka 'monitor'. But it's quite limited.\n\n"
      },
      "date": 1673853482615
    },
    {
      "type": "add",
      "id": "8b8dd04c729f078f",
      "item": {
        "type": "paragraph",
        "id": "8b8dd04c729f078f",
        "text": "I've moved to using 3D grids (and 3D graphics software for display). A cubic cell has common faces with 6 others rather than 4, but the increase in complexity is higher than the numbers suggest. Biology makes good use of 3D, but it's not clear how much could be achieved in 2D.\n\n"
      },
      "after": "83b32cb5d4f190df",
      "date": 1673853487758
    },
    {
      "type": "edit",
      "id": "1624f99059547424",
      "item": {
        "type": "paragraph",
        "id": "1624f99059547424",
        "text": "If our agents are computer code/data, we can use memory addresses as our 'space'. There are many ways of doing this. Tierra uses a linear space. But a 32-bit word can also be interpreted as 1, 2, 4, ..., 32 dimensions and, as Kanerva has shown (\"[[Sparse Distributed Memory]]\", MIT Press), binary hypercubes of high dimension have interesting properties. Distances are easy to compute with the Hamming metric and 'spheres of influence' (Hamming distance < r) have nice properties.\n\n"
      },
      "date": 1673854172345
    },
    {
      "type": "edit",
      "id": "1af90e66997459ae",
      "item": {
        "type": "paragraph",
        "id": "1af90e66997459ae",
        "text": "On a slightly different note, Ward mentions the difficulty of self-replication in 2D. I suspect it's even hard in 3D! But biological organisms don't self-replicate, they lay eggs instead. The only self-replication problem they solve is [[copy]]ing the DNA, which is approximately 1D. -- PeterGrogono "
      },
      "date": 1673854200014
    }
  ]
}