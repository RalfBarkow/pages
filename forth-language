{
  "title": "Forth Language",
  "story": [
    {
      "type": "html",
      "text": "<b>Local Wiki Resources:</b>",
      "id": "9d24ec1216263ad45a07c5ebc344168e"
    },
    {
      "type": "html",
      "text": " [[Starting Forth]]:<br>The classic Forth and programming tutorial by [[Leo Brodie]]",
      "id": "b3b0fc02297f8c6f6fd4cfbeccaa5054"
    },
    {
      "type": "html",
      "text": " [[Thinking Forth]]:<br>The classic Forth book by [[Leo Brodie]]",
      "id": "387a9b239a58e3475929f09723d534ab"
    },
    {
      "type": "html",
      "text": " [[Example Forth Code]]:<br>A few simple examples of FORTH code, to give you a minimal feel for it.",
      "id": "7ee7aa5a3fa08bbe309ebece109a5848"
    },
    {
      "type": "html",
      "text": " [[Chuck Moore]]:<br>The inventor of Forth, [[Color Forth]], and [[Forth Processor]]s",
      "id": "dd77fadbbb51f4925ed409a28f217ead"
    },
    {
      "type": "html",
      "text": " [[Forth Values]]:<br>Core values of Forth from 1970 to 1999",
      "id": "58d71e606f28c07fb589cbf97d69dd65"
    },
    {
      "type": "html",
      "text": " [[Forth Simplicity]]:<br>Explains the extreme simplicity of Forth",
      "id": "688514b2447aedf99ef1c7b8fb82c7e4"
    },
    {
      "type": "html",
      "text": " [[Forth Readability]]:<br>Shows how easily one can read each other's code",
      "id": "332f5246acfa292b0c172d7f9d5eb2d4"
    },
    {
      "type": "html",
      "text": " [[Forth Efficiency]]:<br>Examples of Forth's efficient use of resources",
      "id": "c2bcd76476a92d2c6b9df75848f58159"
    },
    {
      "type": "html",
      "text": " [[Forth Reusability]]:<br>Shows how effective code sharing can be",
      "id": "8a2af0b01f985d48e14a021e98731686"
    },
    {
      "type": "html",
      "text": " [[Forth Portability]]:<br>Proves how easily you can move your code from one platform to the next",
      "id": "8a0060a4dff328da096be68a7b678f7c"
    },
    {
      "type": "html",
      "text": " [[Forth Objects]]:<br>Object-Orientation in Forth, with a sample implementation (see also [[Mops Language]] and [[Neon Language]])",
      "id": "8da048bdb10aa6d2aa4a0197a4831c06"
    },
    {
      "type": "html",
      "text": " [[Forth Scientific Library]]:<br>Scientific and mathematical abstractions",
      "id": "e46a21748b611ff59f5bd6b020021fd6"
    },
    {
      "type": "html",
      "text": " [[Forth In Smalltalk]]:<br>[[Ward Cunningham]] relates an educational experience with his brother",
      "id": "ffa16160c5683f873edabd0b92dc50ab"
    },
    {
      "type": "html",
      "text": " [[Smalltalk In Forth]]:<br>Attempting to implement Smalltalk in Forth",
      "id": "f387e5e04a2270171f1fc5646323cae6"
    },
    {
      "type": "html",
      "text": " [[Forth In Java]]:<br>... rumors of Forth running on top of the [[Java Virtual Machine]] ...",
      "id": "3ac8c7a23deef2b2fd598fd2c75b371c"
    },
    {
      "type": "html",
      "text": " [[Post Script]]:<br>A closely related language that is optimized for printing (see [[Forth Postscript Relationship]])",
      "id": "fc221d5168c4ddde1e814092cca16530"
    },
    {
      "type": "html",
      "text": " [[Forth Community]]:<br>the users of Forth",
      "id": "546093a26b3048d91b737b12ca2076ca"
    },
    {
      "type": "html",
      "text": " [[Forth Wiki Projects]]:<br>[[Forth Wiki]] originated projects covering a range as wide as their contributor's horizons",
      "id": "10ee8cf37c27db27f102ad6383a27cbd"
    },
    {
      "type": "html",
      "text": " [[Forth Vs Lisp]]:<br>A comparison of the two languages.",
      "id": "fee32914cc34141202c53f5d4c71c3b2"
    },
    {
      "type": "html",
      "text": " [[Forth Macro]]:<br>Extending the language.",
      "id": "eae6a1ca085637e85db4edffcbed85bf"
    },
    {
      "type": "html",
      "text": " [[Ans Forth]]:<br>the 1994 ANSI standard for Forth to which most modern systems comply",
      "id": "3160e71a3a26af04ab002bd3378b7231"
    },
    {
      "type": "html",
      "text": " [[Open Firmware]]:<br>A Forth system built into the firmware of every Sun and Apple computer, as well as many servers from IBM.",
      "id": "98e051885095449faa88d449b8d8bfe1"
    },
    {
      "type": "html",
      "text": " [[Ficl Language]]:<br>Forth as an [[Embedded Language]]",
      "id": "5007dd1b126a96dbc834e7e06982f0de"
    },
    {
      "type": "html",
      "text": " [[Joy Language]]:<br>a post-fix [[Functional Programming Language]]",
      "id": "e80dbd4473a4e793b1446aa503ecdf9c"
    },
    {
      "type": "html",
      "text": " [[Factor Language]]:<br>another [[Post Fix]] language borrowing ideas from [[Common Lisp]] and Forth",
      "id": "0df41e2cfb441967754d275b04a74ddf"
    },
    {
      "type": "html",
      "text": " [[Forth In Lua]]:<br>Forth is implemented in [[Lua Language]]",
      "id": "378202734008db1edfe062a53d274b1d"
    },
    {
      "type": "html",
      "text": "<b>Getting Started With Forth:</b>",
      "id": "6908db858525d3f44aedcf8a8151d5e6"
    },
    {
      "type": "html",
      "text": "[[Starting Forth]]:<br>[[Leo Brodie]]'s classic Forth and programming tutorial. Now with modernized online versions.",
      "id": "c76cb88ba4c3f9e72ea1dd9073b29eff"
    },
    {
      "type": "html",
      "text": "[http://www.sunterr.demon.co.uk/guide.htm www.sunterr.demon.co.uk] :<br>Guide to getting started with Win32Forth (includes download locations and introductory tutorials)",
      "id": "8ccf02f205b3b661099e0c65e6809425"
    },
    {
      "type": "html",
      "text": "[http://www.geocities.com/dolphinconsultant/myforth.html www.geocities.com] :<br>Forth in Java (This page includes eForth implemented as a Java applet, allowing any Java-enabled browser to try Forth interactively. (Java source (160K) is also included))",
      "id": "cb571c9110b8b4a96444905b1b865b50"
    },
    {
      "type": "html",
      "text": "[[Js Forth]] :<br>Forth in [[Java Script]], running in a web browser window",
      "id": "21f79a6f60b88b00a9a674b277357e1b"
    },
    {
      "type": "html",
      "text": "[http://wiki.forthfreak.net/index.cgi?ForthTutorials wiki.forthfreak.net] :<br>online tutorials",
      "id": "225b6f3958b430f19b5e30caea2c3bf7"
    },
    {
      "type": "html",
      "text": "<b>Discussing Forth with others:</b> IRC and other Forth-related wiki: ([[Edit Hint]]: move to [[Forth Wiki]] ?)",
      "id": "c1c48668b61b15aad864a921b035bdb7"
    },
    {
      "type": "html",
      "text": "news:comp.lang.forth :<br>The [[Use Net]] newsgroup for Forth.",
      "id": "89eb227e442cb6c4dfa85967e1fccfd7"
    },
    {
      "type": "html",
      "text": "[http://wiki.forthfreak.net/ wiki.forthfreak.net] :<br>Forthfreak - a Forth-specific wiki with an inventory of many Forth resources",
      "id": "6aad85df895ee4975409c68c86e50df4"
    },
    {
      "type": "html",
      "text": "[[Sleepless Night Wiki]] :<br>a wiki focused on [[Quartus Forth]], but with many general purpose pages as well",
      "id": "c212e17372c199c154478777026ef867"
    },
    {
      "type": "html",
      "text": "#forth@irc.freenode.net (openprojects is now freenode):<br>Introduction to irc at [http://www.mirc.com/irc.html www.mirc.com]",
      "id": "b45c604cf8608afd60783988cbca61a8"
    },
    {
      "type": "html",
      "text": "[http://wiki.enst.fr/bin/view/Picforth/ wiki.enst.fr] :<br>[[Pic Forth]] - a wiki focused on [[Pic Forth]], which runs on those little under-$8 PIC microprocessors with ~8K words of program memory and a few hundred bytes of RAM ... unfortunately, not (yet) interactive. <i>Is there something similar for the Atmel AVR? -- [[David Cary]]</i>",
      "id": "50e14b98d975e60ef915db56c6c6e5ba"
    },
    {
      "type": "html",
      "text": " There is a free system called AVR-Byte Forth by Willem Ouwerkerk, but I don't have an address. Also see [http://www.tinyboot.com/avr.html www.tinyboot.com]. And both [[Forth Inc]] and MPE have commercial AVR compilers and dev systems, including free eval systems. -- [[Ian Osgood]]",
      "id": "992d12f29cbeb5484a31172514dea3b5"
    },
    {
      "type": "html",
      "text": "[http://annexia.org/forth annexia.org] :<br>[[Jones Forth]] - A concise, wonderfully well-commented Forth implementation in assembly. Reads like a novel.",
      "id": "f84b0349e1a38ba89a952294f01cba87"
    },
    {
      "type": "html",
      "text": "[http://www.forthwiki.com www.forthwiki.com] :<br>Much more than just a wiki. FAQs, Forums, Articles, Blogs, Links and more.",
      "id": "1f39bb0daf2f0e01be55bf64c23d30bc"
    },
    {
      "type": "html",
      "text": "<b>Other Internet Resources:</b>",
      "id": "8f9def0cf5f0a34b5d391814eedfdf15"
    },
    {
      "type": "html",
      "text": "[http://www.forth.com/resources/evolution/index.html www.forth.com] :<br>A full history of Forth",
      "id": "1cea782874fd7cf272e368a55a7f2714"
    },
    {
      "type": "html",
      "text": "[http://www.taygeta.com/forth.html www.taygeta.com] :<br>The Taygeta archive of Forth resources",
      "id": "626fb479d03274043962334e957dfc6c"
    },
    {
      "type": "html",
      "text": "[http://www.forth.com/ www.forth.com] :<br>(Forth, Inc.) [[Forth Inc]] was the first company to sell Forth products, and was founded by the inventors of Forth.",
      "id": "b04b97c8fca63aca9f8c9fabafda6594"
    },
    {
      "type": "html",
      "text": "[http://www.ultratechnology.com/ www.ultratechnology.com] :<br>Recent work on hardware Forths, includes recent talks by Charles Moore",
      "id": "5f58310fb2da1c2075e0c09a85c8447f"
    },
    {
      "type": "html",
      "text": "[http://www.forth.org/fig.html www.forth.org] :<br>The Forth Interest Group",
      "id": "519e3b4e290cba0f7e5f617987e613ed"
    },
    {
      "type": "html",
      "text": "[http://dec.bournemouth.ac.uk/forth/index.html dec.bournemouth.ac.uk] :<br>The Forth Research Page",
      "id": "c6ffe36cd7a645173f9dc913bb7f4a34"
    },
    {
      "type": "html",
      "text": "[http://www.zetetics.com/bj/papers/ www.zetetics.com] :<br>Good papers on Forth implementation",
      "id": "1e311a2d0b9a5b9fe82f4b922e6af2e4"
    },
    {
      "type": "html",
      "text": "[http://forth.gsfc.nasa.gov/ forth.gsfc.nasa.gov] :<br>Lists over 50 space-related uses of Forth",
      "id": "b8b26cc3725af2db239f01273a49e192"
    },
    {
      "type": "html",
      "text": "[http://dmoz.org/Computers/Programming/Languages/Forth/ dmoz.org] :<br>The [[Open Directory Project]] listing for Forth",
      "id": "4089983bc92865fb3ff9e267bfab4a7c"
    },
    {
      "type": "html",
      "text": "[http://dir.yahoo.com/Computers_and_Internet/Programming_Languages/Forth/ dir.yahoo.com] :<br>The Yahoo listing for Forth",
      "id": "3009be80075ec9520ed9cf9db717a9d8"
    },
    {
      "type": "html",
      "text": "[http://www.zforth.com/ www.zforth.com] :<br>The Forth Programming Webring",
      "id": "d1197b2a67c5f676420c6cc890b47c91"
    },
    {
      "type": "html",
      "text": "[http://www.fig-uk.org/byof.htm www.fig-uk.org] :<br>How to implement your own Forth",
      "id": "7594aa98702d424253ca682a3236e4da"
    },
    {
      "type": "html",
      "text": "[http://www.quartus.net/products/forth/ www.quartus.net] :<br>[[Quartus Forth]] for the Palm - A whole development system self-contained on a Palm",
      "id": "baf5cff1e4e7bc9a471712fc8b62843f"
    },
    {
      "type": "html",
      "text": "[http://www2.tunes.org/cgi-bin/TunesWiki?ForthOS www2.tunes.org] :<br>Forth as OS",
      "id": "f950f6e718fd036bd7c49e89ef9f20cb"
    },
    {
      "type": "html",
      "text": "[http://ftp.uni-bremen.de/pub/mirrors/Taygeta-Archive/ ftp.uni-bremen.de] :<br>[[University Of Bremen]] Ftp Site",
      "id": "50b79330f5c622df11486aba7cce46ce"
    },
    {
      "type": "html",
      "text": "[http://home.vrweb.de/~stephan.becher/forth/ home.vrweb.de] :<br>[[Strong Forth]], a Forth dialect with strong type checking",
      "id": "18165be80c3c9f53b9247e2a7d3d6892"
    },
    {
      "type": "html",
      "text": "[http://rainbowforth.sourceforge.net/ rainbowforth.sourceforge.net] :<br>An AJAX-y implementation of [[Color Forth]] called Rainbow Forth.",
      "id": "694297fe4868b7a199ad925ff69e8053"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "<b>How did Forth get its name?</b>",
      "id": "3347261ea263ef0ca2d005c010975b74"
    },
    {
      "type": "html",
      "text": "Charles Moore::<br><i>The first time I combined the ideas I had been developing into a single entity, I was working on an IBM 1130, a \"third-generation\" computer. The result seemed so powerful that I considered it a \"fourth generation computer language.\" I would have called it Fourth, except that the 1130 permitted only five-character identifiers. So Fourth became Forth, a nicer play on words anyway.</i>",
      "id": "1e72948742e50acc2a8b85ed9b424397"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "\nForth is a [[Stack Based Language]] based on [[Postfix Notation]]: Operations and function calls are placed <b>after</b> their arguments. They work by popping the arguments off the data stack, performing their operation, and then pushing the results back on the data stack.",
      "id": "0c2e20d6260a2baa0024e73cb1c01a76"
    },
    {
      "type": "html",
      "text": "\nFORTH is often used in [[Embedded System]]s:",
      "id": "e758b058aa6b62b4844ba527858dfaa7"
    },
    {
      "type": "html",
      "text": " It packs <b>LOTS</b> of functionality into limited memory.",
      "id": "38e9f65c06ea4d388d22de819ad088f6"
    },
    {
      "type": "html",
      "text": " Code (and much data) is ROM-able.",
      "id": "959c8245f297ecd64c7f703f32ec89fa"
    },
    {
      "type": "html",
      "text": " Is a \"[[High Level Language]]\" that encourages highly modular code. (OO in later releases.) (See <b>[[High Level Language]]</b> below)",
      "id": "dfe96a98b7b5418b61b37525bdacb2f0"
    },
    {
      "type": "html",
      "text": " Can be interpreted at high speed (approaching that of machine code). Think \"interactive hardware debugging\".",
      "id": "398b091ec2e4d1e1e4a1e5c51db9ed51"
    },
    {
      "type": "html",
      "text": " Easily compiled to machine code (but this is not usually done in most free implementations; only professional ones like [[Forth Inc]], MPE, and [[Quartus Forth]]).",
      "id": "f98eaedad5b193e9d5342fc3917ead30"
    },
    {
      "type": "html",
      "text": " Integrated access to assembly language.",
      "id": "4df78f493ca1f6b6db1afc2096b8ca78"
    },
    {
      "type": "html",
      "text": " Is \"fully and easily extensible.\" (Only a few low-level routines of the runtime are <b>not</b> written in FORTH.)",
      "id": "ffac71f6eabe17ca3cd23a9d7920ea71"
    },
    {
      "type": "html",
      "text": "\nThe boot monitor on [[Sun Microsystems]] workstations includes a very useful [[Forth Language]] interpreter ([[Open Firmware]]). [[Hours Of Fun]]. <i>(The \"stars\" sample code at [[Example Forth Code]] works at the \"ok\" boot prompt of any Sun workstation.)</i>",
      "id": "f97dd90a1ece40bff6e7614eee9dd609"
    },
    {
      "type": "html",
      "text": "\nIn the 80s, Forth was also commonly used by astronomers (and their grad students!) to program the control systems of telescopes and other instruments. I don't have recent data to know if this is still the case.",
      "id": "92ee12a50986fa00eb5b6113310b558c"
    },
    {
      "type": "html",
      "text": "\nOriginally, Forth was a [[Threaded Interpretive Language]]. Among the variations used:",
      "id": "6a5ed744d6495a0d04558e38e0216de3"
    },
    {
      "type": "html",
      "text": " [[Indirect Threaded Code]]",
      "id": "058b2a12ba85d3702b41a97c3f1b8ce4"
    },
    {
      "type": "html",
      "text": " [[Direct Threaded Code]]",
      "id": "943334c0a0a4beb2799f8464d2a02865"
    },
    {
      "type": "html",
      "text": " [[Token Threaded Code]]",
      "id": "6836dcbde79bf19ac3c398fc546def5b"
    },
    {
      "type": "html",
      "text": " [[Subroutine Threaded Code]]",
      "id": "2e63ec246026f97950b95efe43faebe1"
    },
    {
      "type": "html",
      "text": "\nThese are fast, easy to implement, and allow very compact object code. Modern professional Forth implementations do optimized compilation.",
      "id": "98b7353b6557396b1eafd875c12c0185"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "<b>\"[[High Level Language]]\" ...</b>",
      "id": "54cb0773d2026d607fbf6229bf5dfbf2"
    },
    {
      "type": "html",
      "text": "\nFORTH is a \"[[High Level Language]]\" that encourages highly modular code. (OO in later releases.) (<i>About the same level of abstraction as C?</i>)",
      "id": "e156ee4d29b4b82f32c58481681391a1"
    },
    {
      "type": "html",
      "text": "<i>(Realize that \"higher level\" is not always a good thing, as the most \"high level\" of languages are always specialized for particular domains, and work poorly in other domains.)</i>",
      "id": "c90c688432c569ad8486686076177fe7"
    },
    {
      "type": "html",
      "text": "\nTo address the question, I'd say that FORTH is slightly \"lower level\" than C. Knowing the workings of the interpreter, and manipulation of the virtual machine state are typical of FORTH programming. And the ease of transition in and out of assembly language also contributes to this conclusion.",
      "id": "e067aefd1898f688d420821593b62427"
    },
    {
      "type": "html",
      "text": "\nOn the other hand, FORTH programs tend to be <b>highly</b> modular, leading to a programming style that's a bit less procedural than typical C functions.",
      "id": "21271480a6ba1f2210989a26ae4379e1"
    },
    {
      "type": "html",
      "text": "<i>(I'm probably talking beyond my experience, which is minimal, and was quite a few years ago.)</i> -- [[Jeff Grigg]]",
      "id": "22b61ecdffc2a32c5a12125af8a65f02"
    },
    {
      "type": "html",
      "text": "\nYes, you can do assembly in C, but when's the last time you saw someone do it?",
      "id": "be008338e69a26c587efc1eaabed43e0"
    },
    {
      "type": "html",
      "text": "^-- uh, yesterday?",
      "id": "11689878bc98ce26421f41b5e6c80ce7"
    },
    {
      "type": "html",
      "text": "<i>I've seen it in the low-level primitives, where, to be honest, it's more of a syntactic convenience than something fundamental. That is, doing assembly in FORTH makes it so that you don't have to use a separate compiler/assembler and have separate source files.</i>",
      "id": "6d3bdebb7b0037a41732146d15ff44c9"
    },
    {
      "type": "html",
      "text": "\nIn Forth, you can define a word that has a different effect on the stack depending on the parameters passed to it via the stack. e.g. If it's Tuesday, put an integer on the stack, otherwise, take one off. <i>(This is allowed, but not encouraged.)</i> There are lots of other languages where any such effect would always be classed as a bug, which would suggest that Forth users commonly encounter what might be called \"stack effect bugs.\" It would settle this little discussion if we could say that C doesn't have this problem, but of course, in C, there is printf, which is the first thing you see when you read an introductory book about C, and which is an absolute black hole for exactly the same kind of bugs. Ain't the world crazy? -- [[Daniel Earwicker]].",
      "id": "4d3be6b1af2f3c4ddccff1c65e7344be"
    },
    {
      "type": "html",
      "text": "<i>I read in the NASM documentation ([[Net Wide Assembler]]) that in the C calling convention, the caller allocates space on the stack for the parameters and the </i>caller<i> cleans it up as well. Thus, printf can mess itself up, but if it can find its return address on the stack, the program as a whole should recover. I'm not sure I can say the same for scanf: you can trick it into overwriting its return address.</i>",
      "id": "3d73754f6189194fa1cb021d73e7161c"
    },
    {
      "type": "html",
      "text": "<i>Someone once said that the difference between a high-level language and a low-level language is that, in the lower level languages, you have to worry about the irrelevant. For example, in assembly languages, you have to handle the mechanics of register allocation and parameter-passing yourself. In C, you have to handle pointers. In C++, you still have to handle pointers. In a high-level language, such matters are handled for you.</i>",
      "id": "4d5b4807561c02cb90ba245ee431d006"
    },
    {
      "type": "html",
      "text": "<i>Forth is a low-level language when you start, because it doesn't come with a large vocabulary of ready-made words for every application. But you can define words to make Forth run at as high a level as you want it to. You can transparently redefine any word Forth already comes with, and you can even hide the stack if you want to write your own parser </i>(see [[Forth Macro]])<i>. Because Forth doesn't impose a syntax of its own, this is cleaner than if you want to do something similar in C or C++ or Java.</i> -- [[Edward Kiser]] (occasional Forth dabbler)",
      "id": "fe5d17e0d9743f4f783071aa64b87f8d"
    },
    {
      "type": "html",
      "text": "\nI think Forth is best described as a [[Meta Language]] or a [[Meta Programming]] language: it is a general-purpose language used to define [[Domain Specific Language]]s or application-specific languages. This is very powerful, but is also easily misused. -- [[Kris Johnson]]",
      "id": "5cf62e734b41849060ad3cfcf2611a68"
    },
    {
      "type": "html",
      "text": "\nAnother word I've heard used in the attempt to describe this \"both-high-low-level\" aspect is \"[[Proto Language]].\" It \"becomes\" the language you need for the domain or application. -- [[Garry Hamilton]]",
      "id": "0a899bfb7de29700bc1329493fa44d3b"
    },
    {
      "type": "html",
      "text": "<i>How often does such metaprogramming actually happen to the degree that a truly \"higher level\" language gets written on top of forth instead of simply composed of words that more or less use the existing control structures?</i>",
      "id": "8eb1f6595c90c29424a427d3ca7ad444"
    },
    {
      "type": "html",
      "text": "\nThis depends on your experience level with Forth. If you're using Forth after a lifetime of C(++), you'll tend to write code that is structured very much like C. You'll run into constant problems doing this, what with massive stack imbalance bugs due to losing track of what is and isn't on the stack, etc. After some time with it, <i>and</i> if you haven't given up in disgust, you'll eventually come to realize that Forth encourages not so much abstraction, but rather conversation. The abstraction comes as a side-effect of <i>conversing</i> with your computer. Hence Forth's emphasis on <i>words</i> rather than <i>functions.</i>",
      "id": "c03def84f0752c75c1e341e43b08c17d"
    },
    {
      "type": "html",
      "text": "\nFor example, in C, if you want to write a program that prints a number in a variety of bases, you'd probably either have one function per base, or you'd pass the base as a parameter. In Forth, you simply \"tell\" it what base to print with. For example:",
      "id": "6aa92ac391a6498af9f9ee7654ce00a5"
    },
    {
      "type": "html",
      "text": "\nIn C:",
      "id": "d7360e5ca286cab7cccb0b205a6d78fe"
    },
    {
      "type": "code",
      "text": " void print_inBase_(int aNumber, base b) {\n  switch(b) {\n  case B_DEC:  printf(\"%d\", aNumber); break;\n  case B_HEX:  printf(\"%X\", aNumber); break;\n  ...etc...\n  }\n }",
      "id": "db3a9bb160a25a757ac2080a87c5c706"
    },
    {
      "type": "code",
      "text": " ...",
      "id": "a2fa3a0d85936a25b71322d2b7a4ccb0"
    },
    {
      "type": "code",
      "text": " {\n  print_inBase_(0xDEADBEEF, B_DEC);\n  print_inBase_(55, B_HEX);\n }",
      "id": "1393cac094fddeeedc9739c43af31ec1"
    },
    {
      "type": "html",
      "text": "In Forth:",
      "id": "0c3225a1a744d9c57f2370f539accfa8"
    },
    {
      "type": "code",
      "text": " $DEADBEEF hex print 55 decimal print",
      "id": "65cd0c1a64a7b6a72a80b2a78cb27b6d"
    },
    {
      "type": "html",
      "text": "Now, seeing how this works in Forth, some might realize, \"Oh, hey, this rules!\" and attempt to implement C-coding this way too. I don't recommend this, because dealing with thread-local storage is often quite painful. However, this makes <i>perfect</i> sense for <i>objects</i> to do, and in fact, is already done -- viva fseek(), ioctl(), and many others. So, assuming you create a \"printer object\" of sorts, you could write your C client code better, this way:",
      "id": "5cb2f127704f3c17c5473e66e9d8020d"
    },
    {
      "type": "code",
      "text": " {\n  print(inDecimal(p), 0xDEADBEEF);\n  print(inHex(p), 55);\n }",
      "id": "fd4be29d42bd4ecd7def5b027ce439c0"
    },
    {
      "type": "html",
      "text": "The key to making this work is that inDecimal()/inHex() obviously must return p itself, so that its print function can work! For this reason, it is <b>not</b> a coincidence that the default return value in Smalltalk is <b>self</b>.",
      "id": "771135311fa8b3646c728169698c0c11"
    },
    {
      "type": "html",
      "text": "\nBTW, since printing numbers was such a common task for Chuck when he implemented his code for NRAO, he provided a short-cut word to do the deed: dot (literally typed as \".\").",
      "id": "d138a5ca701d08bd3832d393675ee347"
    },
    {
      "type": "code",
      "text": " $DEADBEEF hex . 55 decimal .",
      "id": "2d906fb097eabfb4977372e41b3a3f70"
    },
    {
      "type": "html",
      "text": "This results in a program that has a fair number of module-scoped variables, and if your Forth supports multitasking, user-variables as well (think thread-local storage). Interestingly, because of the conversational manner in which you program, <i>saving</i> and <i>restoring</i> these variables often doesn't occur, particularly if they're user-variables. Sometimes you need to, but it tends to be relatively rare.",
      "id": "db217f03ddd4fbfcedce612e383f0f9f"
    },
    {
      "type": "html",
      "text": "\nFor example, when programming graphics words for Forth, it is rare in Forth to see individual words take more than 2 or 3 parameters on the stack. So, to draw a box with some text in it, given some coordinates (L,T) (left, top of the box), we might see something like, oh, I dunno, this:",
      "id": "bebf2128cc36708d2a672683afce3615"
    },
    {
      "type": "code",
      "text": " 2variable text\n : ok  S\"  OK  \" text 2! ;\n : cancel  s\" CANCEL\" text 2! ;\n : top  2dup at over 64 + over horiz line ;        ''Note that top, bottom, left, and right are \"private\" words,''\n : bottom  ( same as top but 12 pixels lower ) 12 + top 12 - ;    ''in that after they're used in '''rect''', they may be safely''\n : left  2dup at 2dup 12 + vert line ;          ''redefined for other purposes later on in the program.''\n : right  ( same as left, 64 pixels over ) over 64 + over left 2drop ;  ''See HyperStaticGlobalEnvironment''\n : rect  top bottom left right ;\n : text  2 + swap 10 + swap at text 2@ type ;\n : button  rect text ;",
      "id": "4d9af76ea768cd9d897f84b0a24d4e15"
    },
    {
      "type": "html",
      "text": "So, we'd probably use it something like this:",
      "id": "5eaade2ace1e205b62e88ad077fe2aa4"
    },
    {
      "type": "code",
      "text": " ( draw our dialog box here )\n ...\n 100 200 green color ok button  300 200 red color cancel button",
      "id": "699de872167e6d0c4db7dae39ab73c9e"
    },
    {
      "type": "html",
      "text": "This style of programming meshes very well with [[Immediate Mode Gui]]s as well. Some other folks will see obvious parallels with the [[Parameter Object]] pattern.",
      "id": "8750694c95d20273cd99bedbce2bb2fb"
    },
    {
      "type": "html",
      "text": "<i>It seems to me that unlike with a stack-based VM that another language like Java or Python sits on, all significant Forth programs are written by folks who are not only comfortable with, but prefer Forth's lack of syntax and RPN conventions. It's like scheme and lisp macros: with the exception of the mini-language of LOOP, every lisp macro tends to keep strictly to sexp notation and even evaluation order, despite the power of macros to truly extend syntax.</i>",
      "id": "c5fad5d88a616b4446343323ca93dbdb"
    },
    {
      "type": "html",
      "text": "\nCorrect. It is possible to define infix-style languages in Forth, just like in Lisp. However, it is rarely performed, because again, there is no <i>need</i> to. Once you work with Forth for a while, you become familiar enough with the language to get by on your own without having the need for translators. A little while further, and you become fluent in it. Further still, it supplants your previous mode of thought in programming, and suddenly, everybody else suffers from [[Blub Paradox]].",
      "id": "e45d4ba949a55b2c892765bed37fe167"
    },
    {
      "type": "html",
      "text": "<i>Not so much a negative criticism of forth (or lisp or scheme), but an observation that extensibility of a language tends to be used in very incremental ways, while those looking for radically new constructs tend to choose a different language entirely regardless of the expressive power of the macro suite.</i>",
      "id": "fa0a574348bbe96fd4143ed266d1d9fc"
    },
    {
      "type": "html",
      "text": "\nVery interesting observation, indeed!",
      "id": "42a78128a3d6159628cfbd2564a62791"
    },
    {
      "type": "html",
      "text": "<i>Possibly because all library code is still written in the \"base\" language</i>",
      "id": "058af40f3e450ec393373f8337f88cf9"
    },
    {
      "type": "html",
      "text": "\nWell, at some point, <i>something</i> has to be written <i>in</i> the base language in order to provide higher-level services. If languages like [[Cee Language]] has taught us anything, it's that libraries can provide a large number of services formerly thought to only be renderable portably in the language itself. [[Cee Language]] demolished the ubiquity of [[Pascal Language]] and [[Pli Language]] for that reason. -- [[Samuel Falvo]]",
      "id": "23ce4b2fcf42307b416a6ba89a12c40f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "Food for thought: Could Forth be translated \"on the fly\" to a more \"conventional\" looking form? Perhaps stack annotations can help with functions... Forth might be a good base for an [[Intentional Programming]] system then?",
      "id": "d667e521642347960bb35d0879bb3e91"
    },
    {
      "type": "html",
      "text": "<i>Hmm...translating Forth amounts to decompiling, which is in general difficult; what would you want the \"conventional\" form to be? I'm not sure I get your idea about a base for [[Intentional Programming]], possibly because I don't know the subject well enough.</i>",
      "id": "1f5d6dc5de6575ea5b760358ae2bed68"
    },
    {
      "type": "html",
      "text": "many Forths come with a decompiler built right in. :-)  here is an example from GForth:",
      "id": "f65634a85d00b60e4992b3e25ab3c751"
    },
    {
      "type": "html",
      "text": "\nsee !\nCode !",
      "id": "77e91faa6c3b118bdc0c94825b1c543d"
    },
    {
      "type": "html",
      "text": "( $402A4C )  mov     dword ptr 4168E0 , ebx  \\ $89 $1D $E0 $68 $41 $0",
      "id": "bd894f43ffed01b7bb3f67f8e7156b06"
    },
    {
      "type": "html",
      "text": "( $402A52 )  mov     edx , dword ptr 4 [esi]  \\ $8B $56 $4",
      "id": "ff267e6e9bc452aff3a3cb571a544748"
    },
    {
      "type": "html",
      "text": "( $402A55 )  mov     eax , dword ptr [esi]  \\ $8B $6",
      "id": "12e8fd966e1dac6cf5d901d1bce22e17"
    },
    {
      "type": "html",
      "text": "( $402A57 )  add     esi , # 8  \\ $83 $C6 $8",
      "id": "76374540c91ed0204c0ebfc56184e3dd"
    },
    {
      "type": "html",
      "text": "( $402A5A )  mov     dword ptr [eax] , edx  \\ $89 $10",
      "id": "509fd534914dfaa66c0186738dd74706"
    },
    {
      "type": "html",
      "text": "( $402A5C )  add     ebx , # 4  \\ $83 $C3 $4",
      "id": "8797eba211fdfa947b223f693efd27f9"
    },
    {
      "type": "html",
      "text": "( $402A5F )  jmp     dword ptr FC [ebx]  \\ $FF $63 $FC",
      "id": "b4a85c596baf078fa5b665e077683917"
    },
    {
      "type": "html",
      "text": "( $402A62 )  mov     esi , esi  \\ $89 $F6\nend-code",
      "id": "440f0b8f0b166b3e1df203d5253b0a26"
    },
    {
      "type": "code",
      "text": " ok",
      "id": "302eeb3993465112d7bd6513642245af"
    },
    {
      "type": "html",
      "text": "---\nA better fit would be Forth used as the virtual machine for a another language. So \"conventional\" language compiles to Forth, Forth executes program.",
      "id": "b18097bfd0df84f8d733f7902e1c4ee9"
    },
    {
      "type": "html",
      "text": "\n[[Meta Programming]] is used in many Forth applications and libraries to better match the domain language. For example, the Forth Scientific Library, which uses [[Forth Macro]]s to allow infix mathematical expressions, and more convenient use of vectors and matricies. There are also [[Forth Macro]] libraries that allow you to define state machines by simply laying out the tables of state transitions.",
      "id": "89bc5e191ee671f6d06c98f982d360d3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "\nMy first lesson in factoring functions came from FORTH. Because FORTH doesn't usually use many (or any) variables (accessing data mainly on the stack), large FORTH routines (called <i>words</i>) are extremely hard to read. Readable FORTH depends strongly on small, <i>well named</i> words. When you finally get the right mix of words that work together, there is an \"Ah-HA\" feeling that says \"This is right!\". Reading Martin Fowler's <i>Refactoring</i> book can bring that same kind of feeling. -- [[Jim Weirich]]",
      "id": "7bd6a459657292136fbdd5a1ce32ff14"
    },
    {
      "type": "html",
      "text": "\nI think you meant to say, Forth functions don't use named parameters. Inside the body of a C function, named parameters act just like local variables. -- [[David Cary]]",
      "id": "481933414ae5bd78a7c6f74708dcb49a"
    },
    {
      "type": "html",
      "text": "<i>Actually, Forth does support variables, like this:</i>",
      "id": "3a415ccbb428adb1a2c4607312d41c4b"
    },
    {
      "type": "code",
      "text": " VARIABLE BWAHAHA \\ create an uninitialized variable called BWAHAHA, one cell in size\n 1000 BWAHAHA ! \\ store 1000 in it (1000 in the current base is... 1000)\n BWAHAHA @ . \\ --> prints 1000",
      "id": "e8c82b219ad01233c5a43ca44b8e2c62"
    },
    {
      "type": "html",
      "text": "<i>For a while I developed an over-fondness for a word called LOCALS| which allows you to create local variables inside a word. LOCALS| is very bad for you because you can't easily factor a word which uses it.</i>",
      "id": "937ad829e345684d9b55bf93daaf212d"
    },
    {
      "type": "html",
      "text": "HYPOT_SQ ( a b -- c ) \\ define a word called HYPOT_SQ",
      "id": "1084b3855ddd2f820c680c03f7c23964"
    },
    {
      "type": "html",
      "text": "LOCALS| b a |\t\\ pops two parameters into local variables:<br>first pops b, then pops a",
      "id": "128b315adb685545a4467157d4be7e3f"
    },
    {
      "type": "code",
      "text": "  a a * b b * +  \\ calculate sum of squares\n  100 TO a  \\ you can store in your locals (here I'm just wasting CPU to prove it)\n  ;    \\ semicolon automatically cleans up the locals",
      "id": "b3f87351105d20e9c69e6ead55b1a764"
    },
    {
      "type": "html",
      "text": " 4 HYPOT_SQ . \\ --> prints 25",
      "id": "ec66c4c2945e76f285e2c4a2d30140f8"
    },
    {
      "type": "html",
      "text": "<i>However, there is this thing called VALUE which is like a cross between LOCALS| and VARIABLE. However, I should clarify that these VALUEs are not the least bit local, so their use is non-reentrant. The locals really are local.</i>",
      "id": "2205f522be8b2afe69b2043f8174dfae"
    },
    {
      "type": "html",
      "text": " VALUE a \\ create a VALUE called a, initially 0",
      "id": "1fa1e71723f53b2fd0ae5cb0e1ebf8b3"
    },
    {
      "type": "html",
      "text": " VALUE b \\ create a VALUE called b, initially 0",
      "id": "35529ed219911bb613607fefaad180ad"
    },
    {
      "type": "html",
      "text": "HYPOT_SQ ( a b -- c )",
      "id": "896d2b1ce6fdaa915ecb0b165b62aea3"
    },
    {
      "type": "code",
      "text": "  TO b  \\ pop stack and store it in b\n  TO a  \\ pop stack and store it in a\n  a a * b b * +  \\ calculate sum of squares, which is left on stack\n  ;",
      "id": "21208001a69a7093b2798dd8a01d2f6d"
    },
    {
      "type": "html",
      "text": " 4 HYPOT_SQ . \\ --> prints 25",
      "id": "ec66c4c2945e76f285e2c4a2d30140f8"
    },
    {
      "type": "code",
      "text": " a . \\ --> prints 3 because a still contains it",
      "id": "1934d469af97b5f02d4e2ca1ffc60c85"
    },
    {
      "type": "html",
      "text": "Have you read about LOCALS| at [http://www.complang.tuwien.ac.at/forth/faq/faq-general-4.html#ss4.4 www.complang.tuwien.ac.at]? It recommends syntax more like",
      "id": "31c47fd6783a61a1d93dc5fbe278072b"
    },
    {
      "type": "html",
      "text": "HYPOT_SQ { a b -- c } \\ define a word called HYPOT_SQ",
      "id": "7c87706f7b19b2eca7296eb277bb3df0"
    },
    {
      "type": "code",
      "text": "    \\  and pops two parameters into local variables\n  a a * b b * +  \\ calculate sum of squares\n  100 TO a  \\ you can store in your locals (here I'm just wasting CPU to prove it)\n  ;    \\ semicolon automatically cleans up the locals",
      "id": "d70ab392faf50c08c7911adcfa2e1d7d"
    },
    {
      "type": "html",
      "text": "<i>Of course for such a simple function I would probably just write</i>",
      "id": "7f212412b2ece28ea1bc55531d9c06db"
    },
    {
      "type": "html",
      "text": "SQ ( a -- b ) DUP * ;",
      "id": "9becb5abacbd0474ca3b2728eefc0f62"
    },
    {
      "type": "html",
      "text": "HYPOT_SQ ( a b -- c ) SQ SWAP SQ + ;",
      "id": "4357d1e4080a894a63c6869dcd607d80"
    },
    {
      "type": "html",
      "text": "<i>but I wanted to illustrate the options you have. If you want to write something moderately complicated in Forth like a [[Merge Sort]] then you will need to use a VARIABLE or VALUE or two; the stack will quickly grow too complicated to handle otherwise.</i>",
      "id": "fb909a06d0f76667aebf682a7cf8d385"
    },
    {
      "type": "html",
      "text": "<i>If a word uses variables or values you can factor it. -- [[Edward Kiser]] (much more experienced now)</i>",
      "id": "786f7431eaef4600624cab17e84e1195"
    },
    {
      "type": "html",
      "text": "\nGenerally great advice, <i>but,</i> not necessarily always a good thing to be taken to extremes. You can write [[Spaghetti Code]] with factored Forth words as you can anything else. At some point, you'll find that you're factoring so much that your complexity grows out of control. As [[Chuck Moore]] states over and over again, <i>never</i> put more than 3 values on the stack at any one time in any given context (however, if there are 186291 values already on the stack, that's OK, you don't need to worry about those; your call<i>ing</i> words will deal with those somehow). BTW, that patterns like [[Parameter Object]] exist suggests clearly that this principle applies broadly, not specifically just to Forth.",
      "id": "6e75d9435b29c15bf17effb869f055ac"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "\nFor my <i>controversial statement of the day,</i> I'll say... <b>Some people say that FORTH is a \"dead language.\"</b> While it was once very popular in embedded systems, the availability of MS-DOS/Windows C/C++ development tools for cross-development to more powerful embedded platforms has caused a number of people to switch to C/C++. If SUN has its way, Java will take the field. (...and I'm inclined to think that they will.) -- [[Jeff Grigg]]",
      "id": "aec1f46be0a29740f16e3b57440bd56a"
    },
    {
      "type": "html",
      "text": "\n[[Forth Language As Development Tool]] describes how Forth as an extendable language grows until it models the structure of the target domain of the problem to be solved.",
      "id": "2199c6ca9515a1534838057042f4b01b"
    },
    {
      "type": "html",
      "text": "\n[[Frank Carver]] asked if Java is \"too big\" for [[Embedded Java]] memory limited implementations.",
      "id": "2e300a851a076be2b3373b935aeffc35"
    },
    {
      "type": "html",
      "text": "-- [[Anonymous Donor]]-s",
      "id": "da4407f0208b6bb29b2c59698866e09a"
    },
    {
      "type": "html",
      "text": "\nAnyone who says \"[[Forth Is Dead]]\", obviously doesn't know Forth.",
      "id": "ebb024c56f783a515eb008140da194f8"
    },
    {
      "type": "html",
      "text": "-- [[Bill Zimmerly]]",
      "id": "2f027ec8f9b9fdc8d399175ab51b7e04"
    },
    {
      "type": "html",
      "text": "<i>Forth is not widely used, but its influence is bigger than its user base. To misquote Larry Wall, a </i>real<i> programmer can write Forth code in any language. I've written more Forth-like code in Java and C++ than I have in Forth!</i> -- [[Edward Kiser]] (Note: my volume of Forth code has since caught up.)",
      "id": "510746edd2858a413cfd02e21374d17d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "\nThe first language publicly available to program the original 128K Mac was [[Mac Forth]] [[http://www.macforth.com/ www.macforth.com]], from CSI (Creative Solutions, Inc) in Rockville MD. (Mac development was then done on a Lisa.) [[Mac Forth]] was introduced in 2/84, before even the ring binder version of Inside Mac was available. (The one before the phonebook edition.) I wish I could remember the name of the implementor (great at forth, great as a hardware designer) to give him credit. CSI was sold some time ago, and moved to Western MD. I don't see them alive on the Web now, but may just have not looked hard enough. -- [[Jim Russell]]",
      "id": "2e8365877f3baa6eb840f520f904d9a6"
    },
    {
      "type": "html",
      "text": "\nFrom the [[Mac Forth]] Plus Manual: <i>[[Mac Forth]] was created by Don Colburn and Dave Colburn.</i> -- [[Felix Franz]] ",
      "id": "aceb96f6b82164121c606dbd70901e18"
    },
    {
      "type": "html",
      "text": "<i>Yes! Don Colburn was the name I couldn't recall. Very sharp guy.</i>",
      "id": "a8b66d29a9abc1951590ec9da294e150"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "\nAn interesting? note: A guy named Jean-Paul Wippler is considering using Forth as a super glue language to bind Python Perl and Tcl together in a project called Minotaur. URL: [http://www.equi4.com/minotaur/minotaur.html www.equi4.com]",
      "id": "be809df3dc9791691f65b2b98ac526b5"
    },
    {
      "type": "html",
      "text": "<i>is this wise?</i>",
      "id": "e3c24c720bfb23f29de49bc8629ebeee"
    },
    {
      "type": "html",
      "text": "\nExtremely. Forth is an ideal intermediary language, precisely because it's so agile. Otherwise, it wouldn't have been chosen for [[Open Firmware]], which when you think about it, is a Forth system that must interface to a potentially wide variety of programming language environments.",
      "id": "c3b063538cde493b0518d1d0065bbdc5"
    },
    {
      "type": "html",
      "text": "\nIn addition, Forth is now at the heart of the Tamarin implementation of [[Action Script]]. It is used as an introspectable meta-language, to aid in tracing a running [[Action Script]] program so that one can wisely choose which bits to compile [[Just In Time]].",
      "id": "58f4508549089d200ccc1bb61959efe5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "\nIs Forth still a good fit for modern commodity CPU architectures (Okay I'm talking Intel here), considering they tend to prefer registers to the stack? Is mapping the stack top to registers still the preferred optimization here? The question isn't whether Forth is obsolete, it obviously isn't, the question is whether it's really an ideal match for these particular architectures? The only other alternative seems to be assembly, but macro assembly is not something that lends itself to instant recompilation like Forth does, which allows the system to be kept largely free of \"object code\".",
      "id": "c1058652e1a94275a7b359eeda0bcaa8"
    },
    {
      "type": "html",
      "text": "<i>Nothing has changed on this subject for many, many years. Intel architectures are register-starved, so the lack of extreme register optimization found in most Forth implementations has much less effect on the first place than it does on a register-rich architecture, such as most RISC CPUs.</i>",
      "id": "2e4739294d7bab4fe33e2398cae5eb39"
    },
    {
      "type": "html",
      "text": " [This is silly - modern Inteloid CPUs have huge numbers of registers, hiding behind register re-naming. // I suspect register renaming won't much help an interpreter, though it may give a boost to JIT and the \"dynamic superinstructions\" in gforth. Interpreters typically have terrible behavior in deep pipelines anyway.]",
      "id": "3c890af2bfeb5fddb88506c38fd6c2a8"
    },
    {
      "type": "html",
      "text": " It's not \"silly\", it is in fact correct, but ok, it's worth discussing. The question is not merely how many total registers exist behind the scenes, although obviously the larger register file plus renaming helped Pentium performance. Firstly, please note, although Intel has added every optimization it can, so that the Pentium isn't too far behind in the speed races, nonetheless it's never been a contender for fastest cpu at a given clock rate. Its architectural legacy is just too much baggage. This is just a reminder that it's not a subtle point of theory, there are some decades of benchmarks, too.",
      "id": "821fd0d51a01961f4f8f97186b974a99"
    },
    {
      "type": "html",
      "text": " As to this particular issue, the externally visible architecture makes a difference, even if internally the code is translated to a completely different and more efficient form. Consider the extra machine instructions that need to be generated in order to e.g. recompute a constant, when there wasn't a spare register to hang onto the value for a while. Consider the extra data bandwidth used if the value is fetched rather than computed. Consider the register spills to/from the stack generated by the compiler when it runs out of registers. All of these things have a rather large cost, and in general it is quite impossible for the interior Pentium architecture to optimize them away.",
      "id": "6dc5286e61f075fc69d83357a88e5a17"
    },
    {
      "type": "html",
      "text": " So, as I said, the Pentium is register starved, and I stand by that.",
      "id": "0a005f24e28153b655bdf9dcac831764"
    },
    {
      "type": "html",
      "text": "<i>Also, as has always been true, \"inner loops\" can be very easily optimized in Forth by creating new words defined in assembly.</i>",
      "id": "6432c323511c6a107f9a410c632c2712"
    },
    {
      "type": "html",
      "text": "<i>Lastly, often the alternative is an even slower interpreted language.</i>",
      "id": "33a2005fd4bb61c205bce2908d25e76f"
    },
    {
      "type": "html",
      "text": "\nState-of-the-art [[Forth Compiler]]s from [[Forth Inc]] and MPE are as highly optimized as modern C compilers for the Intel architecture.",
      "id": "87ae85b00f217fa25e0598b87b2f2c4e"
    },
    {
      "type": "html",
      "text": "<i>You are consistently misinterpreting my message as being anti-Forth, which was completely the opposite my intended points. The question was \"is forth a good fit for modern CPUs?\" And I answered that yes, it is, and why. You seem to be thinking I was saying \"no, it's not\".</i>",
      "id": "1e83d2368ed9ce4af97ea8d0f8e52232"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "See also [[Forth Wiki]] or make a fulltext search for Forth in this Wiki: [http://c2.com/cgi/fullSearch?search=Forth c2.com]",
      "id": "9063c00461455697b0e974dbb85f9578"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "Please do not revert this page. Broken links have been fixed, obsolete links removed, and a new Forth URL added. <i>(NOTE: as of November 2012 there are broken links and pages that were last updated in 2000, <b>a dozen years ago.</b> Isn't it about time the Forth community got hip to the fact that [[Forth Is Dead]]?)</i>",
      "id": "3c40f47936ed92c86d6d9735bca828c9"
    },
    {
      "type": "html",
      "text": "\nPlease, please -- some Forth addict clean up this page, eh? There are dead links and links to more dead links. Let's not let Wiki devolve into a repository of useless clutter, shall we?",
      "id": "84c1734f6674193f0e05034fff6d1e0e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "6ceb467488d2a08cdeeb4a704035ed14"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]], [[Category Forth]]",
      "id": "4f3c54be4b4652d28bab91fbc7bcff56"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ForthLanguage c2.com]",
      "id": "49cebcc0f5ec44fb70ce823d2c2247b4"
    }
  ],
  "journal": [
    {
      "date": 1360433655000,
      "id": "931efa9e0b13efa22c829da8fb70a806",
      "type": "create",
      "item": {
        "title": "Forth Language",
        "story": [
          {
            "type": "html",
            "text": "<b>Local Wiki Resources:</b>",
            "id": "9d24ec1216263ad45a07c5ebc344168e"
          },
          {
            "type": "html",
            "text": " [[Starting Forth]]:<br>The classic Forth and programming tutorial by [[Leo Brodie]]",
            "id": "b3b0fc02297f8c6f6fd4cfbeccaa5054"
          },
          {
            "type": "html",
            "text": " [[Thinking Forth]]:<br>The classic Forth book by [[Leo Brodie]]",
            "id": "387a9b239a58e3475929f09723d534ab"
          },
          {
            "type": "html",
            "text": " [[Example Forth Code]]:<br>A few simple examples of FORTH code, to give you a minimal feel for it.",
            "id": "7ee7aa5a3fa08bbe309ebece109a5848"
          },
          {
            "type": "html",
            "text": " [[Chuck Moore]]:<br>The inventor of Forth, [[Color Forth]], and [[Forth Processor]]s",
            "id": "dd77fadbbb51f4925ed409a28f217ead"
          },
          {
            "type": "html",
            "text": " [[Forth Values]]:<br>Core values of Forth from 1970 to 1999",
            "id": "58d71e606f28c07fb589cbf97d69dd65"
          },
          {
            "type": "html",
            "text": " [[Forth Simplicity]]:<br>Explains the extreme simplicity of Forth",
            "id": "688514b2447aedf99ef1c7b8fb82c7e4"
          },
          {
            "type": "html",
            "text": " [[Forth Readability]]:<br>Shows how easily one can read each other's code",
            "id": "332f5246acfa292b0c172d7f9d5eb2d4"
          },
          {
            "type": "html",
            "text": " [[Forth Efficiency]]:<br>Examples of Forth's efficient use of resources",
            "id": "c2bcd76476a92d2c6b9df75848f58159"
          },
          {
            "type": "html",
            "text": " [[Forth Reusability]]:<br>Shows how effective code sharing can be",
            "id": "8a2af0b01f985d48e14a021e98731686"
          },
          {
            "type": "html",
            "text": " [[Forth Portability]]:<br>Proves how easily you can move your code from one platform to the next",
            "id": "8a0060a4dff328da096be68a7b678f7c"
          },
          {
            "type": "html",
            "text": " [[Forth Objects]]:<br>Object-Orientation in Forth, with a sample implementation (see also [[Mops Language]] and [[Neon Language]])",
            "id": "8da048bdb10aa6d2aa4a0197a4831c06"
          },
          {
            "type": "html",
            "text": " [[Forth Scientific Library]]:<br>Scientific and mathematical abstractions",
            "id": "e46a21748b611ff59f5bd6b020021fd6"
          },
          {
            "type": "html",
            "text": " [[Forth In Smalltalk]]:<br>[[Ward Cunningham]] relates an educational experience with his brother",
            "id": "ffa16160c5683f873edabd0b92dc50ab"
          },
          {
            "type": "html",
            "text": " [[Smalltalk In Forth]]:<br>Attempting to implement Smalltalk in Forth",
            "id": "f387e5e04a2270171f1fc5646323cae6"
          },
          {
            "type": "html",
            "text": " [[Forth In Java]]:<br>... rumors of Forth running on top of the [[Java Virtual Machine]] ...",
            "id": "3ac8c7a23deef2b2fd598fd2c75b371c"
          },
          {
            "type": "html",
            "text": " [[Post Script]]:<br>A closely related language that is optimized for printing (see [[Forth Postscript Relationship]])",
            "id": "fc221d5168c4ddde1e814092cca16530"
          },
          {
            "type": "html",
            "text": " [[Forth Community]]:<br>the users of Forth",
            "id": "546093a26b3048d91b737b12ca2076ca"
          },
          {
            "type": "html",
            "text": " [[Forth Wiki Projects]]:<br>[[Forth Wiki]] originated projects covering a range as wide as their contributor's horizons",
            "id": "10ee8cf37c27db27f102ad6383a27cbd"
          },
          {
            "type": "html",
            "text": " [[Forth Vs Lisp]]:<br>A comparison of the two languages.",
            "id": "fee32914cc34141202c53f5d4c71c3b2"
          },
          {
            "type": "html",
            "text": " [[Forth Macro]]:<br>Extending the language.",
            "id": "eae6a1ca085637e85db4edffcbed85bf"
          },
          {
            "type": "html",
            "text": " [[Ans Forth]]:<br>the 1994 ANSI standard for Forth to which most modern systems comply",
            "id": "3160e71a3a26af04ab002bd3378b7231"
          },
          {
            "type": "html",
            "text": " [[Open Firmware]]:<br>A Forth system built into the firmware of every Sun and Apple computer, as well as many servers from IBM.",
            "id": "98e051885095449faa88d449b8d8bfe1"
          },
          {
            "type": "html",
            "text": " [[Ficl Language]]:<br>Forth as an [[Embedded Language]]",
            "id": "5007dd1b126a96dbc834e7e06982f0de"
          },
          {
            "type": "html",
            "text": " [[Joy Language]]:<br>a post-fix [[Functional Programming Language]]",
            "id": "e80dbd4473a4e793b1446aa503ecdf9c"
          },
          {
            "type": "html",
            "text": " [[Factor Language]]:<br>another [[Post Fix]] language borrowing ideas from [[Common Lisp]] and Forth",
            "id": "0df41e2cfb441967754d275b04a74ddf"
          },
          {
            "type": "html",
            "text": " [[Forth In Lua]]:<br>Forth is implemented in [[Lua Language]]",
            "id": "378202734008db1edfe062a53d274b1d"
          },
          {
            "type": "html",
            "text": "<b>Getting Started With Forth:</b>",
            "id": "6908db858525d3f44aedcf8a8151d5e6"
          },
          {
            "type": "html",
            "text": "[[Starting Forth]]:<br>[[Leo Brodie]]'s classic Forth and programming tutorial. Now with modernized online versions.",
            "id": "c76cb88ba4c3f9e72ea1dd9073b29eff"
          },
          {
            "type": "html",
            "text": "[http://www.sunterr.demon.co.uk/guide.htm www.sunterr.demon.co.uk] :<br>Guide to getting started with Win32Forth (includes download locations and introductory tutorials)",
            "id": "8ccf02f205b3b661099e0c65e6809425"
          },
          {
            "type": "html",
            "text": "[http://www.geocities.com/dolphinconsultant/myforth.html www.geocities.com] :<br>Forth in Java (This page includes eForth implemented as a Java applet, allowing any Java-enabled browser to try Forth interactively. (Java source (160K) is also included))",
            "id": "cb571c9110b8b4a96444905b1b865b50"
          },
          {
            "type": "html",
            "text": "[[Js Forth]] :<br>Forth in [[Java Script]], running in a web browser window",
            "id": "21f79a6f60b88b00a9a674b277357e1b"
          },
          {
            "type": "html",
            "text": "[http://wiki.forthfreak.net/index.cgi?ForthTutorials wiki.forthfreak.net] :<br>online tutorials",
            "id": "225b6f3958b430f19b5e30caea2c3bf7"
          },
          {
            "type": "html",
            "text": "<b>Discussing Forth with others:</b> IRC and other Forth-related wiki: ([[Edit Hint]]: move to [[Forth Wiki]] ?)",
            "id": "c1c48668b61b15aad864a921b035bdb7"
          },
          {
            "type": "html",
            "text": "news:comp.lang.forth :<br>The [[Use Net]] newsgroup for Forth.",
            "id": "89eb227e442cb6c4dfa85967e1fccfd7"
          },
          {
            "type": "html",
            "text": "[http://wiki.forthfreak.net/ wiki.forthfreak.net] :<br>Forthfreak - a Forth-specific wiki with an inventory of many Forth resources",
            "id": "6aad85df895ee4975409c68c86e50df4"
          },
          {
            "type": "html",
            "text": "[[Sleepless Night Wiki]] :<br>a wiki focused on [[Quartus Forth]], but with many general purpose pages as well",
            "id": "c212e17372c199c154478777026ef867"
          },
          {
            "type": "html",
            "text": "#forth@irc.freenode.net (openprojects is now freenode):<br>Introduction to irc at [http://www.mirc.com/irc.html www.mirc.com]",
            "id": "b45c604cf8608afd60783988cbca61a8"
          },
          {
            "type": "html",
            "text": "[http://wiki.enst.fr/bin/view/Picforth/ wiki.enst.fr] :<br>[[Pic Forth]] - a wiki focused on [[Pic Forth]], which runs on those little under-$8 PIC microprocessors with ~8K words of program memory and a few hundred bytes of RAM ... unfortunately, not (yet) interactive. <i>Is there something similar for the Atmel AVR? -- [[David Cary]]</i>",
            "id": "50e14b98d975e60ef915db56c6c6e5ba"
          },
          {
            "type": "html",
            "text": " There is a free system called AVR-Byte Forth by Willem Ouwerkerk, but I don't have an address. Also see [http://www.tinyboot.com/avr.html www.tinyboot.com]. And both [[Forth Inc]] and MPE have commercial AVR compilers and dev systems, including free eval systems. -- [[Ian Osgood]]",
            "id": "992d12f29cbeb5484a31172514dea3b5"
          },
          {
            "type": "html",
            "text": "[http://annexia.org/forth annexia.org] :<br>[[Jones Forth]] - A concise, wonderfully well-commented Forth implementation in assembly. Reads like a novel.",
            "id": "f84b0349e1a38ba89a952294f01cba87"
          },
          {
            "type": "html",
            "text": "[http://www.forthwiki.com www.forthwiki.com] :<br>Much more than just a wiki. FAQs, Forums, Articles, Blogs, Links and more.",
            "id": "1f39bb0daf2f0e01be55bf64c23d30bc"
          },
          {
            "type": "html",
            "text": "<b>Other Internet Resources:</b>",
            "id": "8f9def0cf5f0a34b5d391814eedfdf15"
          },
          {
            "type": "html",
            "text": "[http://www.forth.com/resources/evolution/index.html www.forth.com] :<br>A full history of Forth",
            "id": "1cea782874fd7cf272e368a55a7f2714"
          },
          {
            "type": "html",
            "text": "[http://www.taygeta.com/forth.html www.taygeta.com] :<br>The Taygeta archive of Forth resources",
            "id": "626fb479d03274043962334e957dfc6c"
          },
          {
            "type": "html",
            "text": "[http://www.forth.com/ www.forth.com] :<br>(Forth, Inc.) [[Forth Inc]] was the first company to sell Forth products, and was founded by the inventors of Forth.",
            "id": "b04b97c8fca63aca9f8c9fabafda6594"
          },
          {
            "type": "html",
            "text": "[http://www.ultratechnology.com/ www.ultratechnology.com] :<br>Recent work on hardware Forths, includes recent talks by Charles Moore",
            "id": "5f58310fb2da1c2075e0c09a85c8447f"
          },
          {
            "type": "html",
            "text": "[http://www.forth.org/fig.html www.forth.org] :<br>The Forth Interest Group",
            "id": "519e3b4e290cba0f7e5f617987e613ed"
          },
          {
            "type": "html",
            "text": "[http://dec.bournemouth.ac.uk/forth/index.html dec.bournemouth.ac.uk] :<br>The Forth Research Page",
            "id": "c6ffe36cd7a645173f9dc913bb7f4a34"
          },
          {
            "type": "html",
            "text": "[http://www.zetetics.com/bj/papers/ www.zetetics.com] :<br>Good papers on Forth implementation",
            "id": "1e311a2d0b9a5b9fe82f4b922e6af2e4"
          },
          {
            "type": "html",
            "text": "[http://forth.gsfc.nasa.gov/ forth.gsfc.nasa.gov] :<br>Lists over 50 space-related uses of Forth",
            "id": "b8b26cc3725af2db239f01273a49e192"
          },
          {
            "type": "html",
            "text": "[http://dmoz.org/Computers/Programming/Languages/Forth/ dmoz.org] :<br>The [[Open Directory Project]] listing for Forth",
            "id": "4089983bc92865fb3ff9e267bfab4a7c"
          },
          {
            "type": "html",
            "text": "[http://dir.yahoo.com/Computers_and_Internet/Programming_Languages/Forth/ dir.yahoo.com] :<br>The Yahoo listing for Forth",
            "id": "3009be80075ec9520ed9cf9db717a9d8"
          },
          {
            "type": "html",
            "text": "[http://www.zforth.com/ www.zforth.com] :<br>The Forth Programming Webring",
            "id": "d1197b2a67c5f676420c6cc890b47c91"
          },
          {
            "type": "html",
            "text": "[http://www.fig-uk.org/byof.htm www.fig-uk.org] :<br>How to implement your own Forth",
            "id": "7594aa98702d424253ca682a3236e4da"
          },
          {
            "type": "html",
            "text": "[http://www.quartus.net/products/forth/ www.quartus.net] :<br>[[Quartus Forth]] for the Palm - A whole development system self-contained on a Palm",
            "id": "baf5cff1e4e7bc9a471712fc8b62843f"
          },
          {
            "type": "html",
            "text": "[http://www2.tunes.org/cgi-bin/TunesWiki?ForthOS www2.tunes.org] :<br>Forth as OS",
            "id": "f950f6e718fd036bd7c49e89ef9f20cb"
          },
          {
            "type": "html",
            "text": "[http://ftp.uni-bremen.de/pub/mirrors/Taygeta-Archive/ ftp.uni-bremen.de] :<br>[[University Of Bremen]] Ftp Site",
            "id": "50b79330f5c622df11486aba7cce46ce"
          },
          {
            "type": "html",
            "text": "[http://home.vrweb.de/~stephan.becher/forth/ home.vrweb.de] :<br>[[Strong Forth]], a Forth dialect with strong type checking",
            "id": "18165be80c3c9f53b9247e2a7d3d6892"
          },
          {
            "type": "html",
            "text": "[http://rainbowforth.sourceforge.net/ rainbowforth.sourceforge.net] :<br>An AJAX-y implementation of [[Color Forth]] called Rainbow Forth.",
            "id": "694297fe4868b7a199ad925ff69e8053"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "<b>How did Forth get its name?</b>",
            "id": "3347261ea263ef0ca2d005c010975b74"
          },
          {
            "type": "html",
            "text": "Charles Moore::<br><i>The first time I combined the ideas I had been developing into a single entity, I was working on an IBM 1130, a \"third-generation\" computer. The result seemed so powerful that I considered it a \"fourth generation computer language.\" I would have called it Fourth, except that the 1130 permitted only five-character identifiers. So Fourth became Forth, a nicer play on words anyway.</i>",
            "id": "1e72948742e50acc2a8b85ed9b424397"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "\nForth is a [[Stack Based Language]] based on [[Postfix Notation]]: Operations and function calls are placed <b>after</b> their arguments. They work by popping the arguments off the data stack, performing their operation, and then pushing the results back on the data stack.",
            "id": "0c2e20d6260a2baa0024e73cb1c01a76"
          },
          {
            "type": "html",
            "text": "\nFORTH is often used in [[Embedded System]]s:",
            "id": "e758b058aa6b62b4844ba527858dfaa7"
          },
          {
            "type": "html",
            "text": " It packs <b>LOTS</b> of functionality into limited memory.",
            "id": "38e9f65c06ea4d388d22de819ad088f6"
          },
          {
            "type": "html",
            "text": " Code (and much data) is ROM-able.",
            "id": "959c8245f297ecd64c7f703f32ec89fa"
          },
          {
            "type": "html",
            "text": " Is a \"[[High Level Language]]\" that encourages highly modular code. (OO in later releases.) (See <b>[[High Level Language]]</b> below)",
            "id": "dfe96a98b7b5418b61b37525bdacb2f0"
          },
          {
            "type": "html",
            "text": " Can be interpreted at high speed (approaching that of machine code). Think \"interactive hardware debugging\".",
            "id": "398b091ec2e4d1e1e4a1e5c51db9ed51"
          },
          {
            "type": "html",
            "text": " Easily compiled to machine code (but this is not usually done in most free implementations; only professional ones like [[Forth Inc]], MPE, and [[Quartus Forth]]).",
            "id": "f98eaedad5b193e9d5342fc3917ead30"
          },
          {
            "type": "html",
            "text": " Integrated access to assembly language.",
            "id": "4df78f493ca1f6b6db1afc2096b8ca78"
          },
          {
            "type": "html",
            "text": " Is \"fully and easily extensible.\" (Only a few low-level routines of the runtime are <b>not</b> written in FORTH.)",
            "id": "ffac71f6eabe17ca3cd23a9d7920ea71"
          },
          {
            "type": "html",
            "text": "\nThe boot monitor on [[Sun Microsystems]] workstations includes a very useful [[Forth Language]] interpreter ([[Open Firmware]]). [[Hours Of Fun]]. <i>(The \"stars\" sample code at [[Example Forth Code]] works at the \"ok\" boot prompt of any Sun workstation.)</i>",
            "id": "f97dd90a1ece40bff6e7614eee9dd609"
          },
          {
            "type": "html",
            "text": "\nIn the 80s, Forth was also commonly used by astronomers (and their grad students!) to program the control systems of telescopes and other instruments. I don't have recent data to know if this is still the case.",
            "id": "92ee12a50986fa00eb5b6113310b558c"
          },
          {
            "type": "html",
            "text": "\nOriginally, Forth was a [[Threaded Interpretive Language]]. Among the variations used:",
            "id": "6a5ed744d6495a0d04558e38e0216de3"
          },
          {
            "type": "html",
            "text": " [[Indirect Threaded Code]]",
            "id": "058b2a12ba85d3702b41a97c3f1b8ce4"
          },
          {
            "type": "html",
            "text": " [[Direct Threaded Code]]",
            "id": "943334c0a0a4beb2799f8464d2a02865"
          },
          {
            "type": "html",
            "text": " [[Token Threaded Code]]",
            "id": "6836dcbde79bf19ac3c398fc546def5b"
          },
          {
            "type": "html",
            "text": " [[Subroutine Threaded Code]]",
            "id": "2e63ec246026f97950b95efe43faebe1"
          },
          {
            "type": "html",
            "text": "\nThese are fast, easy to implement, and allow very compact object code. Modern professional Forth implementations do optimized compilation.",
            "id": "98b7353b6557396b1eafd875c12c0185"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "<b>\"[[High Level Language]]\" ...</b>",
            "id": "54cb0773d2026d607fbf6229bf5dfbf2"
          },
          {
            "type": "html",
            "text": "\nFORTH is a \"[[High Level Language]]\" that encourages highly modular code. (OO in later releases.) (<i>About the same level of abstraction as C?</i>)",
            "id": "e156ee4d29b4b82f32c58481681391a1"
          },
          {
            "type": "html",
            "text": "<i>(Realize that \"higher level\" is not always a good thing, as the most \"high level\" of languages are always specialized for particular domains, and work poorly in other domains.)</i>",
            "id": "c90c688432c569ad8486686076177fe7"
          },
          {
            "type": "html",
            "text": "\nTo address the question, I'd say that FORTH is slightly \"lower level\" than C. Knowing the workings of the interpreter, and manipulation of the virtual machine state are typical of FORTH programming. And the ease of transition in and out of assembly language also contributes to this conclusion.",
            "id": "e067aefd1898f688d420821593b62427"
          },
          {
            "type": "html",
            "text": "\nOn the other hand, FORTH programs tend to be <b>highly</b> modular, leading to a programming style that's a bit less procedural than typical C functions.",
            "id": "21271480a6ba1f2210989a26ae4379e1"
          },
          {
            "type": "html",
            "text": "<i>(I'm probably talking beyond my experience, which is minimal, and was quite a few years ago.)</i> -- [[Jeff Grigg]]",
            "id": "22b61ecdffc2a32c5a12125af8a65f02"
          },
          {
            "type": "html",
            "text": "\nYes, you can do assembly in C, but when's the last time you saw someone do it?",
            "id": "be008338e69a26c587efc1eaabed43e0"
          },
          {
            "type": "html",
            "text": "^-- uh, yesterday?",
            "id": "11689878bc98ce26421f41b5e6c80ce7"
          },
          {
            "type": "html",
            "text": "<i>I've seen it in the low-level primitives, where, to be honest, it's more of a syntactic convenience than something fundamental. That is, doing assembly in FORTH makes it so that you don't have to use a separate compiler/assembler and have separate source files.</i>",
            "id": "6d3bdebb7b0037a41732146d15ff44c9"
          },
          {
            "type": "html",
            "text": "\nIn Forth, you can define a word that has a different effect on the stack depending on the parameters passed to it via the stack. e.g. If it's Tuesday, put an integer on the stack, otherwise, take one off. <i>(This is allowed, but not encouraged.)</i> There are lots of other languages where any such effect would always be classed as a bug, which would suggest that Forth users commonly encounter what might be called \"stack effect bugs.\" It would settle this little discussion if we could say that C doesn't have this problem, but of course, in C, there is printf, which is the first thing you see when you read an introductory book about C, and which is an absolute black hole for exactly the same kind of bugs. Ain't the world crazy? -- [[Daniel Earwicker]].",
            "id": "4d3be6b1af2f3c4ddccff1c65e7344be"
          },
          {
            "type": "html",
            "text": "<i>I read in the NASM documentation ([[Net Wide Assembler]]) that in the C calling convention, the caller allocates space on the stack for the parameters and the </i>caller<i> cleans it up as well. Thus, printf can mess itself up, but if it can find its return address on the stack, the program as a whole should recover. I'm not sure I can say the same for scanf: you can trick it into overwriting its return address.</i>",
            "id": "3d73754f6189194fa1cb021d73e7161c"
          },
          {
            "type": "html",
            "text": "<i>Someone once said that the difference between a high-level language and a low-level language is that, in the lower level languages, you have to worry about the irrelevant. For example, in assembly languages, you have to handle the mechanics of register allocation and parameter-passing yourself. In C, you have to handle pointers. In C++, you still have to handle pointers. In a high-level language, such matters are handled for you.</i>",
            "id": "4d5b4807561c02cb90ba245ee431d006"
          },
          {
            "type": "html",
            "text": "<i>Forth is a low-level language when you start, because it doesn't come with a large vocabulary of ready-made words for every application. But you can define words to make Forth run at as high a level as you want it to. You can transparently redefine any word Forth already comes with, and you can even hide the stack if you want to write your own parser </i>(see [[Forth Macro]])<i>. Because Forth doesn't impose a syntax of its own, this is cleaner than if you want to do something similar in C or C++ or Java.</i> -- [[Edward Kiser]] (occasional Forth dabbler)",
            "id": "fe5d17e0d9743f4f783071aa64b87f8d"
          },
          {
            "type": "html",
            "text": "\nI think Forth is best described as a [[Meta Language]] or a [[Meta Programming]] language: it is a general-purpose language used to define [[Domain Specific Language]]s or application-specific languages. This is very powerful, but is also easily misused. -- [[Kris Johnson]]",
            "id": "5cf62e734b41849060ad3cfcf2611a68"
          },
          {
            "type": "html",
            "text": "\nAnother word I've heard used in the attempt to describe this \"both-high-low-level\" aspect is \"[[Proto Language]].\" It \"becomes\" the language you need for the domain or application. -- [[Garry Hamilton]]",
            "id": "0a899bfb7de29700bc1329493fa44d3b"
          },
          {
            "type": "html",
            "text": "<i>How often does such metaprogramming actually happen to the degree that a truly \"higher level\" language gets written on top of forth instead of simply composed of words that more or less use the existing control structures?</i>",
            "id": "8eb1f6595c90c29424a427d3ca7ad444"
          },
          {
            "type": "html",
            "text": "\nThis depends on your experience level with Forth. If you're using Forth after a lifetime of C(++), you'll tend to write code that is structured very much like C. You'll run into constant problems doing this, what with massive stack imbalance bugs due to losing track of what is and isn't on the stack, etc. After some time with it, <i>and</i> if you haven't given up in disgust, you'll eventually come to realize that Forth encourages not so much abstraction, but rather conversation. The abstraction comes as a side-effect of <i>conversing</i> with your computer. Hence Forth's emphasis on <i>words</i> rather than <i>functions.</i>",
            "id": "c03def84f0752c75c1e341e43b08c17d"
          },
          {
            "type": "html",
            "text": "\nFor example, in C, if you want to write a program that prints a number in a variety of bases, you'd probably either have one function per base, or you'd pass the base as a parameter. In Forth, you simply \"tell\" it what base to print with. For example:",
            "id": "6aa92ac391a6498af9f9ee7654ce00a5"
          },
          {
            "type": "html",
            "text": "\nIn C:",
            "id": "d7360e5ca286cab7cccb0b205a6d78fe"
          },
          {
            "type": "code",
            "text": " void print_inBase_(int aNumber, base b) {\n  switch(b) {\n  case B_DEC:  printf(\"%d\", aNumber); break;\n  case B_HEX:  printf(\"%X\", aNumber); break;\n  ...etc...\n  }\n }",
            "id": "db3a9bb160a25a757ac2080a87c5c706"
          },
          {
            "type": "code",
            "text": " ...",
            "id": "a2fa3a0d85936a25b71322d2b7a4ccb0"
          },
          {
            "type": "code",
            "text": " {\n  print_inBase_(0xDEADBEEF, B_DEC);\n  print_inBase_(55, B_HEX);\n }",
            "id": "1393cac094fddeeedc9739c43af31ec1"
          },
          {
            "type": "html",
            "text": "In Forth:",
            "id": "0c3225a1a744d9c57f2370f539accfa8"
          },
          {
            "type": "code",
            "text": " $DEADBEEF hex print 55 decimal print",
            "id": "65cd0c1a64a7b6a72a80b2a78cb27b6d"
          },
          {
            "type": "html",
            "text": "Now, seeing how this works in Forth, some might realize, \"Oh, hey, this rules!\" and attempt to implement C-coding this way too. I don't recommend this, because dealing with thread-local storage is often quite painful. However, this makes <i>perfect</i> sense for <i>objects</i> to do, and in fact, is already done -- viva fseek(), ioctl(), and many others. So, assuming you create a \"printer object\" of sorts, you could write your C client code better, this way:",
            "id": "5cb2f127704f3c17c5473e66e9d8020d"
          },
          {
            "type": "code",
            "text": " {\n  print(inDecimal(p), 0xDEADBEEF);\n  print(inHex(p), 55);\n }",
            "id": "fd4be29d42bd4ecd7def5b027ce439c0"
          },
          {
            "type": "html",
            "text": "The key to making this work is that inDecimal()/inHex() obviously must return p itself, so that its print function can work! For this reason, it is <b>not</b> a coincidence that the default return value in Smalltalk is <b>self</b>.",
            "id": "771135311fa8b3646c728169698c0c11"
          },
          {
            "type": "html",
            "text": "\nBTW, since printing numbers was such a common task for Chuck when he implemented his code for NRAO, he provided a short-cut word to do the deed: dot (literally typed as \".\").",
            "id": "d138a5ca701d08bd3832d393675ee347"
          },
          {
            "type": "code",
            "text": " $DEADBEEF hex . 55 decimal .",
            "id": "2d906fb097eabfb4977372e41b3a3f70"
          },
          {
            "type": "html",
            "text": "This results in a program that has a fair number of module-scoped variables, and if your Forth supports multitasking, user-variables as well (think thread-local storage). Interestingly, because of the conversational manner in which you program, <i>saving</i> and <i>restoring</i> these variables often doesn't occur, particularly if they're user-variables. Sometimes you need to, but it tends to be relatively rare.",
            "id": "db217f03ddd4fbfcedce612e383f0f9f"
          },
          {
            "type": "html",
            "text": "\nFor example, when programming graphics words for Forth, it is rare in Forth to see individual words take more than 2 or 3 parameters on the stack. So, to draw a box with some text in it, given some coordinates (L,T) (left, top of the box), we might see something like, oh, I dunno, this:",
            "id": "bebf2128cc36708d2a672683afce3615"
          },
          {
            "type": "code",
            "text": " 2variable text\n : ok  S\"  OK  \" text 2! ;\n : cancel  s\" CANCEL\" text 2! ;\n : top  2dup at over 64 + over horiz line ;        ''Note that top, bottom, left, and right are \"private\" words,''\n : bottom  ( same as top but 12 pixels lower ) 12 + top 12 - ;    ''in that after they're used in '''rect''', they may be safely''\n : left  2dup at 2dup 12 + vert line ;          ''redefined for other purposes later on in the program.''\n : right  ( same as left, 64 pixels over ) over 64 + over left 2drop ;  ''See HyperStaticGlobalEnvironment''\n : rect  top bottom left right ;\n : text  2 + swap 10 + swap at text 2@ type ;\n : button  rect text ;",
            "id": "4d9af76ea768cd9d897f84b0a24d4e15"
          },
          {
            "type": "html",
            "text": "So, we'd probably use it something like this:",
            "id": "5eaade2ace1e205b62e88ad077fe2aa4"
          },
          {
            "type": "code",
            "text": " ( draw our dialog box here )\n ...\n 100 200 green color ok button  300 200 red color cancel button",
            "id": "699de872167e6d0c4db7dae39ab73c9e"
          },
          {
            "type": "html",
            "text": "This style of programming meshes very well with [[Immediate Mode Gui]]s as well. Some other folks will see obvious parallels with the [[Parameter Object]] pattern.",
            "id": "8750694c95d20273cd99bedbce2bb2fb"
          },
          {
            "type": "html",
            "text": "<i>It seems to me that unlike with a stack-based VM that another language like Java or Python sits on, all significant Forth programs are written by folks who are not only comfortable with, but prefer Forth's lack of syntax and RPN conventions. It's like scheme and lisp macros: with the exception of the mini-language of LOOP, every lisp macro tends to keep strictly to sexp notation and even evaluation order, despite the power of macros to truly extend syntax.</i>",
            "id": "c5fad5d88a616b4446343323ca93dbdb"
          },
          {
            "type": "html",
            "text": "\nCorrect. It is possible to define infix-style languages in Forth, just like in Lisp. However, it is rarely performed, because again, there is no <i>need</i> to. Once you work with Forth for a while, you become familiar enough with the language to get by on your own without having the need for translators. A little while further, and you become fluent in it. Further still, it supplants your previous mode of thought in programming, and suddenly, everybody else suffers from [[Blub Paradox]].",
            "id": "e45d4ba949a55b2c892765bed37fe167"
          },
          {
            "type": "html",
            "text": "<i>Not so much a negative criticism of forth (or lisp or scheme), but an observation that extensibility of a language tends to be used in very incremental ways, while those looking for radically new constructs tend to choose a different language entirely regardless of the expressive power of the macro suite.</i>",
            "id": "fa0a574348bbe96fd4143ed266d1d9fc"
          },
          {
            "type": "html",
            "text": "\nVery interesting observation, indeed!",
            "id": "42a78128a3d6159628cfbd2564a62791"
          },
          {
            "type": "html",
            "text": "<i>Possibly because all library code is still written in the \"base\" language</i>",
            "id": "058af40f3e450ec393373f8337f88cf9"
          },
          {
            "type": "html",
            "text": "\nWell, at some point, <i>something</i> has to be written <i>in</i> the base language in order to provide higher-level services. If languages like [[Cee Language]] has taught us anything, it's that libraries can provide a large number of services formerly thought to only be renderable portably in the language itself. [[Cee Language]] demolished the ubiquity of [[Pascal Language]] and [[Pli Language]] for that reason. -- [[Samuel Falvo]]",
            "id": "23ce4b2fcf42307b416a6ba89a12c40f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "Food for thought: Could Forth be translated \"on the fly\" to a more \"conventional\" looking form? Perhaps stack annotations can help with functions... Forth might be a good base for an [[Intentional Programming]] system then?",
            "id": "d667e521642347960bb35d0879bb3e91"
          },
          {
            "type": "html",
            "text": "<i>Hmm...translating Forth amounts to decompiling, which is in general difficult; what would you want the \"conventional\" form to be? I'm not sure I get your idea about a base for [[Intentional Programming]], possibly because I don't know the subject well enough.</i>",
            "id": "1f5d6dc5de6575ea5b760358ae2bed68"
          },
          {
            "type": "html",
            "text": "many Forths come with a decompiler built right in. :-)  here is an example from GForth:",
            "id": "f65634a85d00b60e4992b3e25ab3c751"
          },
          {
            "type": "html",
            "text": "\nsee !\nCode !",
            "id": "77e91faa6c3b118bdc0c94825b1c543d"
          },
          {
            "type": "html",
            "text": "( $402A4C )  mov     dword ptr 4168E0 , ebx  \\ $89 $1D $E0 $68 $41 $0",
            "id": "bd894f43ffed01b7bb3f67f8e7156b06"
          },
          {
            "type": "html",
            "text": "( $402A52 )  mov     edx , dword ptr 4 [esi]  \\ $8B $56 $4",
            "id": "ff267e6e9bc452aff3a3cb571a544748"
          },
          {
            "type": "html",
            "text": "( $402A55 )  mov     eax , dword ptr [esi]  \\ $8B $6",
            "id": "12e8fd966e1dac6cf5d901d1bce22e17"
          },
          {
            "type": "html",
            "text": "( $402A57 )  add     esi , # 8  \\ $83 $C6 $8",
            "id": "76374540c91ed0204c0ebfc56184e3dd"
          },
          {
            "type": "html",
            "text": "( $402A5A )  mov     dword ptr [eax] , edx  \\ $89 $10",
            "id": "509fd534914dfaa66c0186738dd74706"
          },
          {
            "type": "html",
            "text": "( $402A5C )  add     ebx , # 4  \\ $83 $C3 $4",
            "id": "8797eba211fdfa947b223f693efd27f9"
          },
          {
            "type": "html",
            "text": "( $402A5F )  jmp     dword ptr FC [ebx]  \\ $FF $63 $FC",
            "id": "b4a85c596baf078fa5b665e077683917"
          },
          {
            "type": "html",
            "text": "( $402A62 )  mov     esi , esi  \\ $89 $F6\nend-code",
            "id": "440f0b8f0b166b3e1df203d5253b0a26"
          },
          {
            "type": "code",
            "text": " ok",
            "id": "302eeb3993465112d7bd6513642245af"
          },
          {
            "type": "html",
            "text": "---\nA better fit would be Forth used as the virtual machine for a another language. So \"conventional\" language compiles to Forth, Forth executes program.",
            "id": "b18097bfd0df84f8d733f7902e1c4ee9"
          },
          {
            "type": "html",
            "text": "\n[[Meta Programming]] is used in many Forth applications and libraries to better match the domain language. For example, the Forth Scientific Library, which uses [[Forth Macro]]s to allow infix mathematical expressions, and more convenient use of vectors and matricies. There are also [[Forth Macro]] libraries that allow you to define state machines by simply laying out the tables of state transitions.",
            "id": "89bc5e191ee671f6d06c98f982d360d3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "\nMy first lesson in factoring functions came from FORTH. Because FORTH doesn't usually use many (or any) variables (accessing data mainly on the stack), large FORTH routines (called <i>words</i>) are extremely hard to read. Readable FORTH depends strongly on small, <i>well named</i> words. When you finally get the right mix of words that work together, there is an \"Ah-HA\" feeling that says \"This is right!\". Reading Martin Fowler's <i>Refactoring</i> book can bring that same kind of feeling. -- [[Jim Weirich]]",
            "id": "7bd6a459657292136fbdd5a1ce32ff14"
          },
          {
            "type": "html",
            "text": "\nI think you meant to say, Forth functions don't use named parameters. Inside the body of a C function, named parameters act just like local variables. -- [[David Cary]]",
            "id": "481933414ae5bd78a7c6f74708dcb49a"
          },
          {
            "type": "html",
            "text": "<i>Actually, Forth does support variables, like this:</i>",
            "id": "3a415ccbb428adb1a2c4607312d41c4b"
          },
          {
            "type": "code",
            "text": " VARIABLE BWAHAHA \\ create an uninitialized variable called BWAHAHA, one cell in size\n 1000 BWAHAHA ! \\ store 1000 in it (1000 in the current base is... 1000)\n BWAHAHA @ . \\ --> prints 1000",
            "id": "e8c82b219ad01233c5a43ca44b8e2c62"
          },
          {
            "type": "html",
            "text": "<i>For a while I developed an over-fondness for a word called LOCALS| which allows you to create local variables inside a word. LOCALS| is very bad for you because you can't easily factor a word which uses it.</i>",
            "id": "937ad829e345684d9b55bf93daaf212d"
          },
          {
            "type": "html",
            "text": "HYPOT_SQ ( a b -- c ) \\ define a word called HYPOT_SQ",
            "id": "1084b3855ddd2f820c680c03f7c23964"
          },
          {
            "type": "html",
            "text": "LOCALS| b a |\t\\ pops two parameters into local variables:<br>first pops b, then pops a",
            "id": "128b315adb685545a4467157d4be7e3f"
          },
          {
            "type": "code",
            "text": "  a a * b b * +  \\ calculate sum of squares\n  100 TO a  \\ you can store in your locals (here I'm just wasting CPU to prove it)\n  ;    \\ semicolon automatically cleans up the locals",
            "id": "b3f87351105d20e9c69e6ead55b1a764"
          },
          {
            "type": "html",
            "text": " 4 HYPOT_SQ . \\ --> prints 25",
            "id": "ec66c4c2945e76f285e2c4a2d30140f8"
          },
          {
            "type": "html",
            "text": "<i>However, there is this thing called VALUE which is like a cross between LOCALS| and VARIABLE. However, I should clarify that these VALUEs are not the least bit local, so their use is non-reentrant. The locals really are local.</i>",
            "id": "2205f522be8b2afe69b2043f8174dfae"
          },
          {
            "type": "html",
            "text": " VALUE a \\ create a VALUE called a, initially 0",
            "id": "1fa1e71723f53b2fd0ae5cb0e1ebf8b3"
          },
          {
            "type": "html",
            "text": " VALUE b \\ create a VALUE called b, initially 0",
            "id": "35529ed219911bb613607fefaad180ad"
          },
          {
            "type": "html",
            "text": "HYPOT_SQ ( a b -- c )",
            "id": "896d2b1ce6fdaa915ecb0b165b62aea3"
          },
          {
            "type": "code",
            "text": "  TO b  \\ pop stack and store it in b\n  TO a  \\ pop stack and store it in a\n  a a * b b * +  \\ calculate sum of squares, which is left on stack\n  ;",
            "id": "21208001a69a7093b2798dd8a01d2f6d"
          },
          {
            "type": "html",
            "text": " 4 HYPOT_SQ . \\ --> prints 25",
            "id": "ec66c4c2945e76f285e2c4a2d30140f8"
          },
          {
            "type": "code",
            "text": " a . \\ --> prints 3 because a still contains it",
            "id": "1934d469af97b5f02d4e2ca1ffc60c85"
          },
          {
            "type": "html",
            "text": "Have you read about LOCALS| at [http://www.complang.tuwien.ac.at/forth/faq/faq-general-4.html#ss4.4 www.complang.tuwien.ac.at]? It recommends syntax more like",
            "id": "31c47fd6783a61a1d93dc5fbe278072b"
          },
          {
            "type": "html",
            "text": "HYPOT_SQ { a b -- c } \\ define a word called HYPOT_SQ",
            "id": "7c87706f7b19b2eca7296eb277bb3df0"
          },
          {
            "type": "code",
            "text": "    \\  and pops two parameters into local variables\n  a a * b b * +  \\ calculate sum of squares\n  100 TO a  \\ you can store in your locals (here I'm just wasting CPU to prove it)\n  ;    \\ semicolon automatically cleans up the locals",
            "id": "d70ab392faf50c08c7911adcfa2e1d7d"
          },
          {
            "type": "html",
            "text": "<i>Of course for such a simple function I would probably just write</i>",
            "id": "7f212412b2ece28ea1bc55531d9c06db"
          },
          {
            "type": "html",
            "text": "SQ ( a -- b ) DUP * ;",
            "id": "9becb5abacbd0474ca3b2728eefc0f62"
          },
          {
            "type": "html",
            "text": "HYPOT_SQ ( a b -- c ) SQ SWAP SQ + ;",
            "id": "4357d1e4080a894a63c6869dcd607d80"
          },
          {
            "type": "html",
            "text": "<i>but I wanted to illustrate the options you have. If you want to write something moderately complicated in Forth like a [[Merge Sort]] then you will need to use a VARIABLE or VALUE or two; the stack will quickly grow too complicated to handle otherwise.</i>",
            "id": "fb909a06d0f76667aebf682a7cf8d385"
          },
          {
            "type": "html",
            "text": "<i>If a word uses variables or values you can factor it. -- [[Edward Kiser]] (much more experienced now)</i>",
            "id": "786f7431eaef4600624cab17e84e1195"
          },
          {
            "type": "html",
            "text": "\nGenerally great advice, <i>but,</i> not necessarily always a good thing to be taken to extremes. You can write [[Spaghetti Code]] with factored Forth words as you can anything else. At some point, you'll find that you're factoring so much that your complexity grows out of control. As [[Chuck Moore]] states over and over again, <i>never</i> put more than 3 values on the stack at any one time in any given context (however, if there are 186291 values already on the stack, that's OK, you don't need to worry about those; your call<i>ing</i> words will deal with those somehow). BTW, that patterns like [[Parameter Object]] exist suggests clearly that this principle applies broadly, not specifically just to Forth.",
            "id": "6e75d9435b29c15bf17effb869f055ac"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "\nFor my <i>controversial statement of the day,</i> I'll say... <b>Some people say that FORTH is a \"dead language.\"</b> While it was once very popular in embedded systems, the availability of MS-DOS/Windows C/C++ development tools for cross-development to more powerful embedded platforms has caused a number of people to switch to C/C++. If SUN has its way, Java will take the field. (...and I'm inclined to think that they will.) -- [[Jeff Grigg]]",
            "id": "aec1f46be0a29740f16e3b57440bd56a"
          },
          {
            "type": "html",
            "text": "\n[[Forth Language As Development Tool]] describes how Forth as an extendable language grows until it models the structure of the target domain of the problem to be solved.",
            "id": "2199c6ca9515a1534838057042f4b01b"
          },
          {
            "type": "html",
            "text": "\n[[Frank Carver]] asked if Java is \"too big\" for [[Embedded Java]] memory limited implementations.",
            "id": "2e300a851a076be2b3373b935aeffc35"
          },
          {
            "type": "html",
            "text": "-- [[Anonymous Donor]]-s",
            "id": "da4407f0208b6bb29b2c59698866e09a"
          },
          {
            "type": "html",
            "text": "\nAnyone who says \"[[Forth Is Dead]]\", obviously doesn't know Forth.",
            "id": "ebb024c56f783a515eb008140da194f8"
          },
          {
            "type": "html",
            "text": "-- [[Bill Zimmerly]]",
            "id": "2f027ec8f9b9fdc8d399175ab51b7e04"
          },
          {
            "type": "html",
            "text": "<i>Forth is not widely used, but its influence is bigger than its user base. To misquote Larry Wall, a </i>real<i> programmer can write Forth code in any language. I've written more Forth-like code in Java and C++ than I have in Forth!</i> -- [[Edward Kiser]] (Note: my volume of Forth code has since caught up.)",
            "id": "510746edd2858a413cfd02e21374d17d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "\nThe first language publicly available to program the original 128K Mac was [[Mac Forth]] [[http://www.macforth.com/ www.macforth.com]], from CSI (Creative Solutions, Inc) in Rockville MD. (Mac development was then done on a Lisa.) [[Mac Forth]] was introduced in 2/84, before even the ring binder version of Inside Mac was available. (The one before the phonebook edition.) I wish I could remember the name of the implementor (great at forth, great as a hardware designer) to give him credit. CSI was sold some time ago, and moved to Western MD. I don't see them alive on the Web now, but may just have not looked hard enough. -- [[Jim Russell]]",
            "id": "2e8365877f3baa6eb840f520f904d9a6"
          },
          {
            "type": "html",
            "text": "\nFrom the [[Mac Forth]] Plus Manual: <i>[[Mac Forth]] was created by Don Colburn and Dave Colburn.</i> -- [[Felix Franz]] ",
            "id": "aceb96f6b82164121c606dbd70901e18"
          },
          {
            "type": "html",
            "text": "<i>Yes! Don Colburn was the name I couldn't recall. Very sharp guy.</i>",
            "id": "a8b66d29a9abc1951590ec9da294e150"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "\nAn interesting? note: A guy named Jean-Paul Wippler is considering using Forth as a super glue language to bind Python Perl and Tcl together in a project called Minotaur. URL: [http://www.equi4.com/minotaur/minotaur.html www.equi4.com]",
            "id": "be809df3dc9791691f65b2b98ac526b5"
          },
          {
            "type": "html",
            "text": "<i>is this wise?</i>",
            "id": "e3c24c720bfb23f29de49bc8629ebeee"
          },
          {
            "type": "html",
            "text": "\nExtremely. Forth is an ideal intermediary language, precisely because it's so agile. Otherwise, it wouldn't have been chosen for [[Open Firmware]], which when you think about it, is a Forth system that must interface to a potentially wide variety of programming language environments.",
            "id": "c3b063538cde493b0518d1d0065bbdc5"
          },
          {
            "type": "html",
            "text": "\nIn addition, Forth is now at the heart of the Tamarin implementation of [[Action Script]]. It is used as an introspectable meta-language, to aid in tracing a running [[Action Script]] program so that one can wisely choose which bits to compile [[Just In Time]].",
            "id": "58f4508549089d200ccc1bb61959efe5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "\nIs Forth still a good fit for modern commodity CPU architectures (Okay I'm talking Intel here), considering they tend to prefer registers to the stack? Is mapping the stack top to registers still the preferred optimization here? The question isn't whether Forth is obsolete, it obviously isn't, the question is whether it's really an ideal match for these particular architectures? The only other alternative seems to be assembly, but macro assembly is not something that lends itself to instant recompilation like Forth does, which allows the system to be kept largely free of \"object code\".",
            "id": "c1058652e1a94275a7b359eeda0bcaa8"
          },
          {
            "type": "html",
            "text": "<i>Nothing has changed on this subject for many, many years. Intel architectures are register-starved, so the lack of extreme register optimization found in most Forth implementations has much less effect on the first place than it does on a register-rich architecture, such as most RISC CPUs.</i>",
            "id": "2e4739294d7bab4fe33e2398cae5eb39"
          },
          {
            "type": "html",
            "text": " [This is silly - modern Inteloid CPUs have huge numbers of registers, hiding behind register re-naming. // I suspect register renaming won't much help an interpreter, though it may give a boost to JIT and the \"dynamic superinstructions\" in gforth. Interpreters typically have terrible behavior in deep pipelines anyway.]",
            "id": "3c890af2bfeb5fddb88506c38fd6c2a8"
          },
          {
            "type": "html",
            "text": " It's not \"silly\", it is in fact correct, but ok, it's worth discussing. The question is not merely how many total registers exist behind the scenes, although obviously the larger register file plus renaming helped Pentium performance. Firstly, please note, although Intel has added every optimization it can, so that the Pentium isn't too far behind in the speed races, nonetheless it's never been a contender for fastest cpu at a given clock rate. Its architectural legacy is just too much baggage. This is just a reminder that it's not a subtle point of theory, there are some decades of benchmarks, too.",
            "id": "821fd0d51a01961f4f8f97186b974a99"
          },
          {
            "type": "html",
            "text": " As to this particular issue, the externally visible architecture makes a difference, even if internally the code is translated to a completely different and more efficient form. Consider the extra machine instructions that need to be generated in order to e.g. recompute a constant, when there wasn't a spare register to hang onto the value for a while. Consider the extra data bandwidth used if the value is fetched rather than computed. Consider the register spills to/from the stack generated by the compiler when it runs out of registers. All of these things have a rather large cost, and in general it is quite impossible for the interior Pentium architecture to optimize them away.",
            "id": "6dc5286e61f075fc69d83357a88e5a17"
          },
          {
            "type": "html",
            "text": " So, as I said, the Pentium is register starved, and I stand by that.",
            "id": "0a005f24e28153b655bdf9dcac831764"
          },
          {
            "type": "html",
            "text": "<i>Also, as has always been true, \"inner loops\" can be very easily optimized in Forth by creating new words defined in assembly.</i>",
            "id": "6432c323511c6a107f9a410c632c2712"
          },
          {
            "type": "html",
            "text": "<i>Lastly, often the alternative is an even slower interpreted language.</i>",
            "id": "33a2005fd4bb61c205bce2908d25e76f"
          },
          {
            "type": "html",
            "text": "\nState-of-the-art [[Forth Compiler]]s from [[Forth Inc]] and MPE are as highly optimized as modern C compilers for the Intel architecture.",
            "id": "87ae85b00f217fa25e0598b87b2f2c4e"
          },
          {
            "type": "html",
            "text": "<i>You are consistently misinterpreting my message as being anti-Forth, which was completely the opposite my intended points. The question was \"is forth a good fit for modern CPUs?\" And I answered that yes, it is, and why. You seem to be thinking I was saying \"no, it's not\".</i>",
            "id": "1e83d2368ed9ce4af97ea8d0f8e52232"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "See also [[Forth Wiki]] or make a fulltext search for Forth in this Wiki: [http://c2.com/cgi/fullSearch?search=Forth c2.com]",
            "id": "9063c00461455697b0e974dbb85f9578"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "Please do not revert this page. Broken links have been fixed, obsolete links removed, and a new Forth URL added. <i>(NOTE: as of November 2012 there are broken links and pages that were last updated in 2000, <b>a dozen years ago.</b> Isn't it about time the Forth community got hip to the fact that [[Forth Is Dead]]?)</i>",
            "id": "3c40f47936ed92c86d6d9735bca828c9"
          },
          {
            "type": "html",
            "text": "\nPlease, please -- some Forth addict clean up this page, eh? There are dead links and links to more dead links. Let's not let Wiki devolve into a repository of useless clutter, shall we?",
            "id": "84c1734f6674193f0e05034fff6d1e0e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "6ceb467488d2a08cdeeb4a704035ed14"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]], [[Category Forth]]",
            "id": "4f3c54be4b4652d28bab91fbc7bcff56"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ForthLanguage c2.com]",
            "id": "49cebcc0f5ec44fb70ce823d2c2247b4"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1673468589365
    }
  ]
}