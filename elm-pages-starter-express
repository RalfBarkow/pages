{
  "title": "elm-pages-starter-express",
  "story": [
    {
      "type": "paragraph",
      "id": "d34b4d55689aca90",
      "text": "This is an example of using [[elm-pages v3]] with [[Express]]. [https://github.com/blaix/elm-pages-starter-express#elm-pages-starter-express github], [https://github.com/dillonkearns/elm-pages/discussions/378#discussioncomment-5930563 page]"
    },
    {
      "type": "markdown",
      "id": "ec14b71efb881d5b",
      "text": "> The [[Adapter]] just copies the [[elm-pages]] renderer and a basic express server into dist-server and node runs the server from there."
    },
    {
      "type": "reference",
      "id": "14b51cecd9c10779",
      "site": "code.dreyeck.ch",
      "slug": "elm-pages-adapter",
      "title": "Elm-Pages Adapter",
      "text": "The idea of adapters is that they are responsible for turning the output of the [[elm-pages]] build into the right setup for a specific hosting provider. (i.e. adapting the output)"
    },
    {
      "type": "code",
      "id": "711603182631d76d",
      "text": "lamdera reset\nnpm run build\nnpm start"
    },
    {
      "type": "markdown",
      "id": "fbd46dd053df6fed",
      "text": "> start\n> node dist-server/server.mjs\n\n"
    },
    {
      "type": "paragraph",
      "id": "1c14124eb45f5eb0",
      "text": "On our server we get an error message: listen EADDRINUSE: address already in use. The reason is that our wiki server is configured to be available on port 3000. Therefore we have to use another port, e.g. 4040."
    },
    {
      "type": "paragraph",
      "id": "8334cf8f8d0d5a90",
      "text": "dist-server/server.mjs [⇒ [[Express]]]"
    },
    {
      "type": "code",
      "id": "4a40e1bbaf88fa46",
      "text": "import express from \"express\";\nimport elmPagesMiddleware from \"./middleware.mjs\";\n\nconst app = express();\nconst port = 4040;\n\napp.use(express.static(\"dist\"));\napp.use(elmPagesMiddleware);\napp.listen(port, () => {\n  console.log(`Listening on port ${port}`);\n});\n"
    },
    {
      "type": "code",
      "id": "893f416b308df5ac",
      "text": "$ npm start\n\n> start\n> node dist-server/server.mjs\n\nListening on port 4040"
    },
    {
      "type": "image",
      "id": "ccbf1082a70f3ffa",
      "text": "elm-pages is running",
      "size": "wide",
      "width": 430,
      "height": 176,
      "url": "/assets/plugins/image/29916f7eed22a1cfa5a888ec48fcdbac.jpg"
    },
    {
      "type": "paragraph",
      "id": "002c8254fa1f89d6",
      "text": "[http://blog.dreyeck.ch blog.dreyeck.ch]"
    },
    {
      "type": "paragraph",
      "id": "c81d8c140d0854d1",
      "text": "Note: In case of 502 Bad Gateway, the server must be restarted (\"npm start\")."
    },
    {
      "type": "code",
      "id": "59cd04edd19c08f8",
      "text": "[~/.wiki/blog.dreyeck.ch/elm-pages-starter-express]$ npm start"
    },
    {
      "type": "pagefold",
      "id": "b753fc46bc631974",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c3c4d31dc5067bae",
      "text": "What is the difference between .js and .mjs files? [https://stackoverflow.com/questions/57492546/what-is-the-difference-between-js-and-mjs-files#57492606 stackoverflow]"
    },
    {
      "type": "markdown",
      "id": "224b4a0a1363f312",
      "text": "> Node.js will treat .cjs files as CommonJS modules and .mjs files as ECMAScript modules. It will treat .js files as whatever the default module system for the project is (which is CommonJS unless package.json says \"type\": \"module\",)."
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "javascript-modules",
      "title": "Javascript Modules",
      "text": "In the most ubiquitous programming ecosystem, modules have been shoehorned in where they were originally lacking.  As of early 2018, nodejs gradually builds toward ECMAScript Modules.  Guidance for transition from CommonJS to ESM: [https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71 link]"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "esm",
      "title": "ESM",
      "text": "What are ECMAScript [[Modules]] (ESM)? [https://blog.logrocket.com/how-to-use-ecmascript-modules-with-node-js/ post]",
      "id": "d7e7e5e7136955fc"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "vite",
      "title": "Vite",
      "text": "Vite serves source code over native ESM. [https://vitejs.dev/guide/why.html page], [[Javascript Modules]] [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules mdn]",
      "id": "f10375123f325990"
    },
    {
      "type": "paragraph",
      "id": "6269a92f157c0ce1",
      "text": "⇒ [[Wikifunctions]] ⇒ [[Open Language]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "elm-pages-starter-express",
        "story": []
      },
      "date": 1691767779329
    },
    {
      "item": {
        "type": "factory",
        "id": "d34b4d55689aca90"
      },
      "id": "d34b4d55689aca90",
      "type": "add",
      "date": 1691767780711
    },
    {
      "type": "edit",
      "id": "d34b4d55689aca90",
      "item": {
        "type": "paragraph",
        "id": "d34b4d55689aca90",
        "text": "This is an example of using elm-pages 3.0 with express.js."
      },
      "date": 1691767782162
    },
    {
      "type": "edit",
      "id": "d34b4d55689aca90",
      "item": {
        "type": "paragraph",
        "id": "d34b4d55689aca90",
        "text": "This is an example of using elm-pages 3.0 with express.js. [https://github.com/blaix/elm-pages-starter-express github], [https://github.com/dillonkearns/elm-pages/discussions/378#discussioncomment-5930563 page]"
      },
      "date": 1691767792694
    },
    {
      "type": "edit",
      "id": "d34b4d55689aca90",
      "item": {
        "type": "paragraph",
        "id": "d34b4d55689aca90",
        "text": "This is an example of using elm-pages 3.0 with express.js. [https://github.com/blaix/elm-pages-starter-express#elm-pages-starter-expresss github], [https://github.com/dillonkearns/elm-pages/discussions/378#discussioncomment-5930563 page]"
      },
      "date": 1691767807285
    },
    {
      "type": "edit",
      "id": "d34b4d55689aca90",
      "item": {
        "type": "paragraph",
        "id": "d34b4d55689aca90",
        "text": "This is an example of using elm-pages 3.0 with express.js. [https://github.com/blaix/elm-pages-starter-express#elm-pages-starter-express github], [https://github.com/dillonkearns/elm-pages/discussions/378#discussioncomment-5930563 page]"
      },
      "date": 1691767845750
    },
    {
      "item": {
        "type": "factory",
        "id": "ec14b71efb881d5b"
      },
      "id": "ec14b71efb881d5b",
      "type": "add",
      "after": "d34b4d55689aca90",
      "date": 1691767889688
    },
    {
      "type": "edit",
      "id": "ec14b71efb881d5b",
      "item": {
        "type": "paragraph",
        "id": "ec14b71efb881d5b",
        "text": "> The [[Adapter]] just copies the elm pages renderer and a basic express server into dist-server and node runs the server from there."
      },
      "date": 1691767899031
    },
    {
      "type": "edit",
      "id": "ec14b71efb881d5b",
      "item": {
        "type": "markdown",
        "id": "ec14b71efb881d5b",
        "text": "> The [[Adapter]] just copies the elm pages renderer and a basic express server into dist-server and node runs the server from there."
      },
      "date": 1691767900083
    },
    {
      "type": "edit",
      "id": "d34b4d55689aca90",
      "item": {
        "type": "paragraph",
        "id": "d34b4d55689aca90",
        "text": "This is an example of using [[elm-pages v3]] with express.js. [https://github.com/blaix/elm-pages-starter-express#elm-pages-starter-express github], [https://github.com/dillonkearns/elm-pages/discussions/378#discussioncomment-5930563 page]"
      },
      "date": 1692013525887
    },
    {
      "type": "edit",
      "id": "d34b4d55689aca90",
      "item": {
        "type": "paragraph",
        "id": "d34b4d55689aca90",
        "text": "This is an example of using [[elm-pages v3]] with [[Express]]. [https://github.com/blaix/elm-pages-starter-express#elm-pages-starter-express github], [https://github.com/dillonkearns/elm-pages/discussions/378#discussioncomment-5930563 page]"
      },
      "date": 1692013555360
    },
    {
      "type": "edit",
      "id": "ec14b71efb881d5b",
      "item": {
        "type": "markdown",
        "id": "ec14b71efb881d5b",
        "text": "> The [[Adapter]] just copies the [[elm pages]] renderer and a basic express server into dist-server and node runs the server from there."
      },
      "date": 1692013608289
    },
    {
      "type": "edit",
      "id": "ec14b71efb881d5b",
      "item": {
        "type": "markdown",
        "id": "ec14b71efb881d5b",
        "text": "> The [[Adapter]] just copies the [[elm-pages]] renderer and a basic express server into dist-server and node runs the server from there."
      },
      "date": 1692013617558
    },
    {
      "id": "14b51cecd9c10779",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "14b51cecd9c10779",
        "site": "code.dreyeck.ch",
        "slug": "elm-pages-adapter",
        "title": "Elm-Pages Adapter",
        "text": "The idea of adapters is that they are responsible for turning the output of the [[elm-pages]] build into the right setup for a specific hosting provider. (i.e. adapting the output)"
      },
      "after": "ec14b71efb881d5b",
      "attribution": {
        "page": "elm-pages v3"
      },
      "date": 1692266077335
    },
    {
      "id": "711603182631d76d",
      "type": "add",
      "item": {
        "type": "code",
        "id": "711603182631d76d",
        "text": "lamdera reset\nnpm run build\nnpm start"
      },
      "after": "14b51cecd9c10779",
      "attribution": {
        "page": "elm-pages v3"
      },
      "date": 1692266093314
    },
    {
      "id": "fbd46dd053df6fed",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "fbd46dd053df6fed",
        "text": "> start\n> node dist-server/server.mjs\n\n"
      },
      "after": "711603182631d76d",
      "attribution": {
        "page": "elm-pages v3"
      },
      "date": 1692266095401
    },
    {
      "id": "1c14124eb45f5eb0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1c14124eb45f5eb0",
        "text": "On our server we get an error message: listen EADDRINUSE: address already in use. The reason is that our wiki server is configured to be available on port 3000. Therefore we have to use another port, e.g. 4040."
      },
      "after": "fbd46dd053df6fed",
      "attribution": {
        "page": "elm-pages v3"
      },
      "date": 1692266098111
    },
    {
      "id": "8334cf8f8d0d5a90",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8334cf8f8d0d5a90",
        "text": "dist-server/server.mj"
      },
      "after": "1c14124eb45f5eb0",
      "attribution": {
        "page": "elm-pages v3"
      },
      "date": 1692266109098
    },
    {
      "id": "4a40e1bbaf88fa46",
      "type": "add",
      "item": {
        "type": "code",
        "id": "4a40e1bbaf88fa46",
        "text": "import express from \"express\";\nimport elmPagesMiddleware from \"./middleware.mjs\";\n\nconst app = express();\nconst port = 4040;\n\napp.use(express.static(\"dist\"));\napp.use(elmPagesMiddleware);\napp.listen(port, () => {\n  console.log(`Listening on port ${port}`);\n});\n"
      },
      "after": "8334cf8f8d0d5a90",
      "attribution": {
        "page": "elm-pages v3"
      },
      "date": 1692266112560
    },
    {
      "id": "893f416b308df5ac",
      "type": "add",
      "item": {
        "type": "code",
        "id": "893f416b308df5ac",
        "text": "$ npm start\n\n> start\n> node dist-server/server.mjs\n\nListening on port 4040"
      },
      "after": "4a40e1bbaf88fa46",
      "attribution": {
        "page": "elm-pages v3"
      },
      "date": 1692266127619
    },
    {
      "id": "ccbf1082a70f3ffa",
      "type": "add",
      "item": {
        "type": "image",
        "id": "ccbf1082a70f3ffa",
        "text": "elm-pages is running",
        "size": "wide",
        "width": 430,
        "height": 176,
        "url": "/assets/plugins/image/29916f7eed22a1cfa5a888ec48fcdbac.jpg"
      },
      "after": "893f416b308df5ac",
      "attribution": {
        "page": "elm-pages v3"
      },
      "date": 1692266143164
    },
    {
      "type": "edit",
      "id": "8334cf8f8d0d5a90",
      "item": {
        "type": "paragraph",
        "id": "8334cf8f8d0d5a90",
        "text": "dist-server/server.mjs"
      },
      "date": 1692266166751
    },
    {
      "type": "edit",
      "id": "8334cf8f8d0d5a90",
      "item": {
        "type": "paragraph",
        "id": "8334cf8f8d0d5a90",
        "text": "dist-server/server.mjs [⇒ [[Express]"
      },
      "date": 1692266240397
    },
    {
      "type": "edit",
      "id": "8334cf8f8d0d5a90",
      "item": {
        "type": "paragraph",
        "id": "8334cf8f8d0d5a90",
        "text": "dist-server/server.mjs [⇒ [[Express]]]"
      },
      "date": 1692266247043
    },
    {
      "id": "002c8254fa1f89d6",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "002c8254fa1f89d6",
        "text": "[http://blog.dreyeck.ch blog.dreyeck.ch]"
      },
      "after": "ccbf1082a70f3ffa",
      "attribution": {
        "page": "2023-08-14"
      },
      "date": 1692266903985
    },
    {
      "item": {
        "type": "factory",
        "id": "c81d8c140d0854d1"
      },
      "id": "c81d8c140d0854d1",
      "type": "add",
      "after": "002c8254fa1f89d6",
      "date": 1692266929774
    },
    {
      "type": "edit",
      "id": "c81d8c140d0854d1",
      "item": {
        "type": "paragraph",
        "id": "c81d8c140d0854d1",
        "text": "Note: In case of 502 Bad Gateway"
      },
      "date": 1692266941011
    },
    {
      "type": "edit",
      "id": "c81d8c140d0854d1",
      "item": {
        "type": "paragraph",
        "id": "c81d8c140d0854d1",
        "text": "Note: In case of 502 Bad Gateway, the server must be restarted (see above)."
      },
      "date": 1692266981340
    },
    {
      "type": "edit",
      "id": "c81d8c140d0854d1",
      "item": {
        "type": "paragraph",
        "id": "c81d8c140d0854d1",
        "text": "Note: In case of 502 Bad Gateway, the server must be restarted (see \"npm start\" above)."
      },
      "date": 1692267007071
    },
    {
      "item": {
        "type": "factory",
        "id": "59cd04edd19c08f8"
      },
      "id": "59cd04edd19c08f8",
      "type": "add",
      "after": "c81d8c140d0854d1",
      "date": 1692267210005
    },
    {
      "type": "edit",
      "id": "59cd04edd19c08f8",
      "item": {
        "type": "code",
        "id": "59cd04edd19c08f8",
        "text": "~/.wiki/blog.dreyeck.ch/elm-pages-starter-express]$ npm start"
      },
      "date": 1692267223454
    },
    {
      "type": "edit",
      "id": "59cd04edd19c08f8",
      "item": {
        "type": "code",
        "id": "59cd04edd19c08f8",
        "text": "[~/.wiki/blog.dreyeck.ch/elm-pages-starter-express]$ npm start"
      },
      "date": 1692267233238
    },
    {
      "type": "edit",
      "id": "c81d8c140d0854d1",
      "item": {
        "type": "paragraph",
        "id": "c81d8c140d0854d1",
        "text": "Note: In case of 502 Bad Gateway, the server must be restarted (\"npm start\")."
      },
      "date": 1692267268638
    },
    {
      "item": {
        "type": "factory",
        "id": "b753fc46bc631974"
      },
      "id": "b753fc46bc631974",
      "type": "add",
      "after": "59cd04edd19c08f8",
      "date": 1692267293338
    },
    {
      "type": "edit",
      "id": "b753fc46bc631974",
      "item": {
        "type": "pagefold",
        "id": "b753fc46bc631974",
        "text": "~"
      },
      "date": 1692267295852
    },
    {
      "item": {
        "type": "factory",
        "id": "c3c4d31dc5067bae"
      },
      "id": "c3c4d31dc5067bae",
      "type": "add",
      "after": "b753fc46bc631974",
      "date": 1692267320482
    },
    {
      "type": "edit",
      "id": "c3c4d31dc5067bae",
      "item": {
        "type": "paragraph",
        "id": "c3c4d31dc5067bae",
        "text": "What is the difference between .js and .mjs files?"
      },
      "date": 1692267322810
    },
    {
      "type": "edit",
      "id": "c3c4d31dc5067bae",
      "item": {
        "type": "paragraph",
        "id": "c3c4d31dc5067bae",
        "text": "What is the difference between .js and .mjs files? [https://stackoverflow.com/questions/57492546/what-is-the-difference-between-js-and-mjs-files#57492606 stackoverflow]"
      },
      "date": 1692267335291
    },
    {
      "item": {
        "type": "factory",
        "id": "224b4a0a1363f312"
      },
      "id": "224b4a0a1363f312",
      "type": "add",
      "after": "c3c4d31dc5067bae",
      "date": 1692267358282
    },
    {
      "type": "edit",
      "id": "224b4a0a1363f312",
      "item": {
        "type": "paragraph",
        "id": "224b4a0a1363f312",
        "text": "> Node.js will treat .cjs files as CommonJS modules and .mjs files as ECMAScript modules. It will treat .js files as whatever the default module system for the project is (which is CommonJS unless package.json says \"type\": \"module\",)."
      },
      "date": 1692267360922
    },
    {
      "type": "edit",
      "id": "224b4a0a1363f312",
      "item": {
        "type": "markdown",
        "id": "224b4a0a1363f312",
        "text": "> Node.js will treat .cjs files as CommonJS modules and .mjs files as ECMAScript modules. It will treat .js files as whatever the default module system for the project is (which is CommonJS unless package.json says \"type\": \"module\",)."
      },
      "date": 1692267362078
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "javascript-modules",
        "title": "Javascript Modules",
        "text": "In the most ubiquitous programming ecosystem, modules have been shoehorned in where they were originally lacking.  As of early 2018, nodejs gradually builds toward ECMAScript Modules.  Guidance for transition from CommonJS to ESM: [https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71 link]"
      },
      "after": "224b4a0a1363f312",
      "date": 1692267402019
    },
    {
      "id": "d7e7e5e7136955fc",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "esm",
        "title": "ESM",
        "text": "What are ECMAScript [[Modules]] (ESM)? [https://blog.logrocket.com/how-to-use-ecmascript-modules-with-node-js/ post]",
        "id": "d7e7e5e7136955fc"
      },
      "date": 1692267404052
    },
    {
      "id": "f10375123f325990",
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "vite",
        "title": "Vite",
        "text": "Vite serves source code over native ESM. [https://vitejs.dev/guide/why.html page], [[Javascript Modules]] [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules mdn]",
        "id": "f10375123f325990"
      },
      "after": "d7e7e5e7136955fc",
      "date": 1692267492139
    },
    {
      "item": {
        "type": "factory",
        "id": "6269a92f157c0ce1"
      },
      "id": "6269a92f157c0ce1",
      "type": "add",
      "after": "f10375123f325990",
      "date": 1692267551606
    },
    {
      "type": "edit",
      "id": "6269a92f157c0ce1",
      "item": {
        "type": "paragraph",
        "id": "6269a92f157c0ce1",
        "text": "⇒ [[Wikifunctions]] "
      },
      "date": 1692267553202
    },
    {
      "type": "edit",
      "id": "6269a92f157c0ce1",
      "item": {
        "type": "paragraph",
        "id": "6269a92f157c0ce1",
        "text": "⇒ [[Wikifunctions]] ⇒ [[Open Language]]"
      },
      "date": 1692268218100
    }
  ]
}