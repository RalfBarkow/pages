{
  "title": "2022-01-14",
  "story": [
    {
      "type": "reference",
      "id": "37a311029e94c518",
      "site": "wiki.ralfbarkow.ch",
      "slug": "2022-01-12",
      "title": "2022-01-12",
      "text": "[[Watch What I Do]]"
    },
    {
      "type": "markdown",
      "id": "aaeddfedb0a97b22",
      "text": "> Sönke Ahrens writes there: \"Whoever, like Luhmann, wants to discover unexpected parallels between heterogeneous elements, can only do so with the help of an externalized memory that also makes such comparisons possible and does not prevent them from the outset by a hierarchical order. Above all, however, we need a system that can remember and present more things to us than we can ourselves. You can only build theoretical complexity if you externalize it - whether you can juggle four, five, seven, or nine things in your head at the same time: it's definitely too little.\"\nSmalltalk / gt seems to be or can become such a system. Welcome to the club.\n"
    },
    {
      "type": "paragraph",
      "id": "bfb5602dec22d003",
      "text": "07:24"
    },
    {
      "type": "pagefold",
      "id": "88a48f17e648cc62",
      "text": "gt"
    },
    {
      "type": "paragraph",
      "id": "2d63c499d4791948",
      "text": "Offray: In my case, I started my prototyping at interactive documentation (with Grafoscopio) because I didn't want to focus on developers (as I'm not one) and I found a lot of resistance to ideas of autopoietic systems (with all the installed tradition of indirection of editing \"dead files\" to compile them or reload the browser) among fellow members of the hackerspace. "
    },
    {
      "type": "paragraph",
      "id": "3925f84c8efe402d",
      "text": "tudor girba via [https://discord.com/channels/729445214812504107/735947900651175998/931238161047236618 discord]: Yes, I know you come from a different background and that your interest is of a different nature than where we started from. I do not mean to suggest you should change any of that. I also do not intend to diminish the importance of history. For example, we do not hide that our work is highly influenced and is enabled by that of Smalltalk and that Smalltalk itself was inspired by a biological metaphor. However, parallels are useful when they advance the conversation. At the same time, a metaphor can be limiting when it fails to embrace a new angle that is not present in what we compare against.\n\nLet's consider an extreme case: say someone that is used to calculators sees a computer for the first time. Upon seeing a calculator application that someone might conclude that \"the computer is a calculator with characters presented in different fonts\". It would not appear incorrect from the perspective of that person as they both deal with some computation. At the same time the comparison is highly limiting. Instead, we'd want that person to consider the computer for what the computer is. (interesting to note is that this would not diminish the historical relevance of a calculator)\n\nA similar situation, but certainly not as extreme, happens when we talk about malleability/modifiability and moldability. They are not interchangeable. Moldability should be understood for what it is, not for how it is similar to something else."
    },
    {
      "type": "pagefold",
      "id": "7158a2491cdbd65a",
      "text": "Moldability vs. Malleability (33 Messages)"
    },
    {
      "type": "paragraph",
      "id": "4226811b4498d0fe",
      "text": "Moldability vs malleability --> Formbarkeit vs. Verformbarkeit"
    },
    {
      "type": "markdown",
      "id": "e49e6d692a8d65d7",
      "text": "Offray — gestern um 18:40 Uhr\nI for example don't think that the calculator example applies here. As it could be viewed as the computer being an evolution of the calculator. I don't think that, at conceptual level moldability, malleability and modiability are conceptual evolutions, and they more highlight perspective points.\n\n**How can we use the different concepts to emphasize connections instead of differences?**, as pointed in this message:\n\nhttps://discord.com/channels/729445214812504107/735947900651175998/931239986316066846 \n"
    },
    {
      "type": "paragraph",
      "id": "97ba3bd76b476201",
      "text": "Offray — gestern um 18:35 Uhr\nI think that is important to emphasize both, differences and connection points. So far I have seen only the first ones in detriment of the second ones. I don't see clear differences between Moldability, malleability and modifiability, except of context (the first one more related/used with/within devs and software). But I will say that if we want a wider and more diverse conversation, it's time to emphasize connections.\n\nI would say that GT embodies the idea of moldability in the software world, while also it connects with a long tradition of modifiable systems in several other places (biology, sociology, cognition, design) and it offers a lot of entry points for diverse people coming from those places (particularly via data storytelling and visualization).\n\nOf course, the connections are a community responsibility. We need to find them together \nUmm... I think that this topic is deserving its own thread... How can we do that?"
    },
    {
      "type": "paragraph",
      "id": "4c6f3e53cd5782fe",
      "text": "tudor girba — gestern um 18:40 Uhr\nCan we agree that a new concept can be evaluated and compared with others only after the concept is understood?"
    },
    {
      "type": "paragraph",
      "id": "a45dc1bfda9dee8b",
      "text": "Offray — gestern um 18:42 Uhr\nI think its an iterative process. The concept is understood as it is compared, connected and evaluated with others. It helps to locate it in such epistemic network. "
    },
    {
      "type": "paragraph",
      "id": "c90e21384598bf5f",
      "text": "thekkid — gestern um 18:47 Uhr\nI don't wish to distract from the conversation that you're having but I'm also struggling to disentangle the two concepts. I'm not trying to undervalue the semantic relevance but \"Malleability refers to the property of a system to be adjusted to the needs of a user. These adjustments happen within bounds of the hooks that the system provides\". I would argue that a system with limited predefined edges that isn't extensible is in fact not malleable but quite rigid.\n\nI realize this is an argument of semantics but in order to make sure I'm not missing something else I wanted to clarify.\nThe moldability definition allowing for the user to change the environment with the purpose of explaining the inside of the system also seems relatively narrow in scope since there could be other purposes to change the environment."
    },
    {
      "type": "paragraph",
      "id": "4049a0f96cace96f",
      "text": "Offray — gestern um 18:56 Uhr\nI think tha a little bit of genealogy of how we individually approach/arrive to such concepts could be helpful.\n\nFor me, understanding the system is a prerequisite of changing it... well changing it can be a way of understanding it, so both are interactive and in dialogue. And the way to make  a system understandable is via self-referentiality: if the system has a discourse about itself, you can change the system within the system. Digital systems are particularly well suited for self-refentiality if we deconstruct the frontier between the source code and the running system, because source code describes the running system and the running system can be used to change the source code. And because software systems are used in the context of social systems (i.e: communities), by introducing a self referential software system (a meta system) in dialogue with a social system, we can improve the possibiliites of technosocial systems to change themselves.\n\nThis was the hypothesis I developed and prototyped in my PhD. \nSo far, in my path, none of the concepts of moldability, malleability, modifiabiity had been strictly introduced and in fact, despite wanting to use a Smalltalk based software system in my hackerspace, I started with other (python based) systems, as they where closer to the culture I was trying to approach. Then I decided to use Pharo to build Grafoscopio and in that path I found the Moldable Debugger. Which lead me to Moose, then back to Pharo and now to GT. \nIn that path I found several concepts used by different communities in similar ways: modifiability, moldability and malleability. I was unable to find a strong division of them, except of the contexts where they where developed/used. And, for me, the idea of self-referential meta-systems is a bridge concept among all those traditions and communities. Something I would like to emphasize, to emphasize also possible bridges and to invite more people to the conversation by building bridges between technosocial systems. So far I have seen the techno part being over emphasized (software, APIs, IDEs), but the social part is lacking."
    },
    {
      "type": "pagefold",
      "id": "f9472c1bc6ac09ae",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f84f2164c9db0d31",
      "text": "Konrad Hinsen — gestern um 20:48 Uhr\nI'd say that moldable development is malleability pushed to the meta-level of development tools. But that's a very theoretical description. The impact is different."
    },
    {
      "type": "paragraph",
      "id": "eb3af37f211985b2",
      "text": "tudor girba — gestern um 20:50 Uhr\nThat's a nice way of putting it! And of course, due to self referentiality, it can  have cascading effects. "
    },
    {
      "type": "paragraph",
      "id": "a4580a0f97db9f2a",
      "text": "Offray — gestern um 21:33 Uhr\nAdding development clarifies the context of the definition and helps to differentiate from malleable systems, for example."
    },
    {
      "type": "pagefold",
      "id": "2981bead464e2bf4",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "90735ff160d28861",
      "text": "Re: thekkid — gestern um 18:47 Uhr\nI don't wish to distract from the conversation that you're having but "
    },
    {
      "type": "paragraph",
      "id": "c53c77643bed9854",
      "text": "tudor girba — gestern um 19:06 Uhr\nWelcome :). Take a look at the list from https://malleable.systems/. It's a nice list which is quite similar to the idea of personal computing. What it takes for granted is how it is understood where and why the extension should happen. The consequence is that the extension will happen where others happened. The hooks play a particularly critical role. They are like the walking paths through a meadow. Moldability addresses the extra question of where and why something happens or should happen. It turns out that to address that you need malleability, but the act of creating these tools during programming changes the nature of programming. That is novel, and not explored. Looking at it from what we already know (even for example from the Smalltalk history) is not helpful because it's a new discipline with new, not yet developed skills. "
    },
    {
      "type": "paragraph",
      "id": "3573d9662f6ab12d",
      "text": "thekkid — gestern um 19:10 Uhr\nI help work on the collective. I don't think anything they're doing is in contrast with doing the work during programming. Different areas of the research just have different focus points. As @Offray pointed out GT is listed in the catalog. Programming is a specific domain in the context of using a computer."
    },
    {
      "type": "paragraph",
      "id": "a84f31ace7451dfe",
      "text": "Offray — gestern um 19:11 Uhr\nMoldability addresses the extra question of where and why something happens or should happen.\n\nI would say that this approach could be a difference. And it's related with Humane Assesment. This could be a place where the similarities and differences are clearer. \n"
    },
    {
      "type": "paragraph",
      "id": "b2cf16c0e323697c",
      "text": "thekkid — gestern um 19:13 Uhr\nJust to make sure I understand the interpretation there would be that moldability is using the malleability to provide some form of introspection to aid in understanding the system."
    },
    {
      "type": "paragraph",
      "id": "d3653bf6c55d7d27",
      "text": "tudor girba — gestern um 19:14 Uhr\nProgramming is not a specific domain. Programming is the domain :). To get anything right, we have to get that one right. If we observe that the result of programming leads to unwanted properties, such as resulting systems that are black box, it means we do not understand programming yet and we should go back to the drawing board. We now have a luxury that the people that worked on the original idea of personal computing did not have: we can observe what happened and we can iterate."
    },
    {
      "type": "paragraph",
      "id": "57e1cb77464cb241",
      "text": "--- ? --- (my reaction)"
    },
    {
      "type": "paragraph",
      "id": "e2ddd9e3098a2234",
      "text": "tudor girba — gestern um 19:15 Uhr\nYes. And this is an essential property, too that leads to a new way of thinking with and about systems. "
    },
    {
      "type": "paragraph",
      "id": "11ec909a427abc98",
      "text": "thekkid — gestern um 19:16 Uhr\nOkay, I think I was confused before because I always took for granted that you'd need this sort of introspection in order to make scalable systems malleable in the first place. \n"
    },
    {
      "type": "paragraph",
      "id": "f3abf112ee1f494c",
      "text": "tudor girba — gestern um 19:16 Uhr\nMoldable Development is an evolution of Humane Assessment. With humane assessment we focused on just the reading problem. With Moldable Development we enlarge the focus on how a new way of reading changes how we construct."
    },
    {
      "type": "paragraph",
      "id": "627b0c54acad0314",
      "text": "tudor girba — gestern um 19:17 Uhr\nAnd yet, isn't it interesting how given that it's such an obvious property, no systems, including Smalltalk, actually offer that in a way that scales to more than a few screens?"
    },
    {
      "type": "paragraph",
      "id": "a329a80019d0d2dc",
      "text": "thekkid — gestern um 19:18 Uhr\nYeah, I would say the current state of all computing is pretty awful. That's why I'm interested in GToolkit and the Malleable Systems Collective 😅"
    },
    {
      "type": "paragraph",
      "id": "b163d56ddae6772f",
      "text": "tudor girba — gestern um 19:20 Uhr\nBut, even when we consider a system like Smalltalk or Lisp, we still miss this. That's because the problem of scale was not within the bounds of what was originally considered. Somewhere along the line, we took it for granted that the way we can relate to a few objects is the same as how we should relate to billions of objects. From our observation there is a way in which both can be dealt with in the same way, but it's not the naive one people considered originally. That's what moldability offers."
    },
    {
      "type": "paragraph",
      "id": "c0082ac0d59a2d68",
      "text": "Offray — gestern um 19:24 Uhr\nAha, in that genealogy we can trace differences and connection points. For example in methodology, scalability and so so."
    },
    {
      "type": "paragraph",
      "id": "22315ff605a508f4",
      "text": "tudor girba — gestern um 19:25 Uhr\nOf course. But, that still does not make them interchangeable."
    },
    {
      "type": "paragraph",
      "id": "2e59809bf7f70e7a",
      "text": "thekkid — gestern um 19:26 Uhr\nProbably an oversimplification but it seems to be a distinction of method vs process."
    },
    {
      "type": "paragraph",
      "id": "c567078ebfa10ead",
      "text": "tudor girba — gestern um 19:27 Uhr\nIn what way?"
    },
    {
      "type": "paragraph",
      "id": "4b5b2711d0fcf520",
      "text": "thekkid — gestern um 19:28 Uhr\nMalleability is about what you're capable of doing using the system. Moldable development (in my limited understanding) is about using that capability to better understand systems."
    },
    {
      "type": "paragraph",
      "id": "b921a767c2fa68d7",
      "text": "tudor girba — gestern um 19:29 Uhr\nThanks for clarifying. No, that's not it :)."
    },
    {
      "type": "paragraph",
      "id": "fda1900d4f3a41b3",
      "text": "thekkid — gestern um 19:30 Uhr\nMaybe an example of something that would be one and not the other would help."
    },
    {
      "type": "paragraph",
      "id": "4756315ede3cd3c5",
      "text": "tudor girba — gestern um 19:51 Uhr\nOk. Here is an example that @CarlosL put together soon after he saw GT: https://lepiter.io/feenk/testimonial--moldable-database-analysis-9q25tat05nzravb46tuq4aih0/. This describes how we got to understand his database by constructing tools for it. This is an example, of how the changing the lens through which we look at a system changes how we reason about it.\n\nThis might be perceived as some kind of data science.\n\nHere are a couple of further examples of how we come to such extensions and what they can lead to:\nhttps://www.infoq.com/presentations/moldable-development/?utm_source=twitter&utm_medium=link&utm_campaign=calendar\n\nNow, the most interesting part is when we apply it to what we consider as difficult problems. This thread describes a problem we have right at this moment: https://twitter.com/feenkcom/status/1481023198678458370\nIt's a really difficult problem about our own environment that we could not reason about without creating a new tool in and with the environment. \n\nThe latter shows that we cannot distinguish between programming and moldability: without creating that custom view we cannot understand the problem, and without understanding the problem we cannot construct further."
    },
    {
      "type": "paragraph",
      "id": "70863bb121e8fc8d",
      "text": "Offray — gestern um 19:53 Uhr\nUmm... I think that we need to make a more particular definition. \"Moldability in the context of Moldable Development means [...] and it differs from other concepts like Malleability and modifiability because [...]\". Kind of similar to what has been done separating Moldable Development from [[Literate Programming]] and other attempts in the GT Book.\nThat would allow others to say something like \"While Moldable development defines/confines itself as [...], we are interesting on it, because of its connections and practical implications in dialogue with wider traditions like [...]. Here we offer some use cases  in [...]\"."
    },
    {
      "type": "paragraph",
      "id": "aad1cf1bceb44bfc",
      "text": "thekkid — gestern um 20:04 Uhr\nI've seen the infoq talk but I'll check out the other examples. I'm probably going to drop the semantic concern. Most of the value I expect I'll get is from seeing the patterns of use."
    },
    {
      "type": "paragraph",
      "id": "663dcf49f245800f",
      "text": "Offray — gestern um 20:06 Uhr\nMy concern is not about semantic by itself, but what can be done in connection with other communities and traditions. That is how I have been using Grafoscopio before and how I'm using Lepiter now (for example with TiddlyWikiPharo)"
    },
    {
      "type": "paragraph",
      "id": "9e70051ee34645db",
      "text": "But I thing that meaning is enactive. What all those terms mean will be clarified by how the tools and practices that embed them made possible. "
    },
    {
      "type": "paragraph",
      "id": "090b07738360c6ab",
      "text": "tudor girba — gestern um 20:50 Uhr\nYes. We were only able to explain moldability by getting people to experiment it first hand. Our hope is that perhaps it can work if you get to see many examples, too. That's the reason why most people conflate what we do with something else and the main point tends to not get across."
    },
    {
      "type": "pagefold",
      "id": "46fb30a8c2f7490c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c5b2a96ad0b9cbfd",
      "text": "Ralf Barkow — heute um 08:07 Uhr\nIn one of 'my' other contexts after the Pile Systems experience, 'we' solved this problem in the context of dmx.berlin by also operationalizing objects as associations/relations. A nice side effect is that DMX can provide a user interface where I stand on the shoulders of these billions of objects, externalizing complexity into the underlying semantic network, but I can focus on juggling four, five, seven, or nine things in my head at the same time."
    },
    {
      "type": "paragraph",
      "id": "ebd1e5a7aa907441",
      "text": "08:22"
    },
    {
      "type": "pagefold",
      "id": "d56987c9d182747b",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "562825f63aad3c90",
      "text": "Konrad Hinsen — gestern um 20:48 Uhr\nI'd say that moldable development is malleability pushed to the meta-level of development tools. But that's a very theoretical description. The impact is different.\n"
    },
    {
      "type": "markdown",
      "id": "34aff99759e8b8dc",
      "text": "Offray — gestern um 21:33 Uhr\nAdding *development* clarifies the context of the definition and helps to differentiate from malleable systems, for example."
    },
    {
      "type": "pagefold",
      "id": "ec28076581445386",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "5e085ffb937fa7f2",
      "text": "Konrad Hinsen — gestern um 10:38 Uhr\nTweet thread (pointing to blog post) on \"Notational Intelligence\". Some parts will sound familiar to the GT fanclub. https://twitter.com/thesephist/status/1481446902960844801\n [https://thesephist.com/posts/notation/ post]"
    },
    {
      "type": "paragraph",
      "id": "5e293153cb544a52",
      "text": "Recognizable"
    },
    {
      "type": "reference",
      "id": "37511c7a2f9345b7",
      "site": "wiki.ralfbarkow.ch",
      "slug": "recognizable",
      "title": "Recognizable",
      "text": "(\"[[Doing with Images Makes Symbols]]\")"
    },
    {
      "type": "pagefold",
      "id": "01bd7959fec0eda5",
      "text": "Biota\n"
    },
    {
      "type": "paragraph",
      "id": "a19f9a67ed42d417",
      "text": "How to construct an instruction dispatch table from a method dictionary."
    },
    {
      "type": "paragraph",
      "id": "ad7715fde8e8fb9c",
      "text": "\"dispatch table pointer\". [https://web.cecs.pdx.edu/~harry/musings/SmalltalkOverview.html page]"
    },
    {
      "type": "markdown",
      "id": "7724c2754b52248b",
      "text": "> \nAn object is like a C \"struct\" or a Pascal record. The only difference between a record and an object is that the object contains a single special field that identifies which class the object belongs to. In C++, Java, and Smalltalk, there is a single hidden field in every object. In Smalltalk, this field is called the \"class pointer.\" In other languages, this hidden field is called the \"V-table pointer\" or \"dispatch table pointer\". "
    },
    {
      "type": "pagefold",
      "id": "af13c3dbf74419f7",
      "text": "FreedomBox"
    },
    {
      "type": "markdown",
      "id": "cb852930a224cd8e",
      "text": "https://wiki.debian.org/FreedomBox/Manual/MatrixSynapse"
    },
    {
      "type": "video",
      "id": "dbe4f30507b04aa3",
      "text": "YOUTUBE 8snpMHHbymI\nThe easiest and fastest way to install Matrix Synapse: use FreedomBox"
    },
    {
      "type": "paragraph",
      "id": "494b9ce23d2e767c",
      "text": "Matrix [https://matrix.org/faq/ faq]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-01-14",
        "story": []
      },
      "date": 1642141475017
    },
    {
      "item": {
        "type": "factory",
        "id": "bfb5602dec22d003"
      },
      "id": "bfb5602dec22d003",
      "type": "add",
      "date": 1642141476807
    },
    {
      "item": {
        "type": "factory",
        "id": "88a48f17e648cc62"
      },
      "id": "88a48f17e648cc62",
      "type": "add",
      "after": "bfb5602dec22d003",
      "date": 1642141480496
    },
    {
      "type": "edit",
      "id": "bfb5602dec22d003",
      "item": {
        "type": "paragraph",
        "id": "bfb5602dec22d003",
        "text": "07:24"
      },
      "date": 1642141485310
    },
    {
      "type": "edit",
      "id": "88a48f17e648cc62",
      "item": {
        "type": "pagefold",
        "id": "88a48f17e648cc62",
        "text": "gt"
      },
      "date": 1642141495116
    },
    {
      "item": {
        "type": "factory",
        "id": "2d63c499d4791948"
      },
      "id": "2d63c499d4791948",
      "type": "add",
      "after": "88a48f17e648cc62",
      "date": 1642141497170
    },
    {
      "type": "edit",
      "id": "2d63c499d4791948",
      "item": {
        "type": "paragraph",
        "id": "2d63c499d4791948",
        "text": "Offray: In my case, I started my prototyping at interactive documentation (with Grafoscopio) because I didn't want to focus on developers (as I'm not one) and I found a lot of resistance to ideas of autopoietic systems (with all the installed tradition of indirection of editing \"dead files\" to compile them or reload the browser) among fellow members of the hackerspace. "
      },
      "date": 1642141553305
    },
    {
      "item": {
        "type": "factory",
        "id": "3925f84c8efe402d"
      },
      "id": "3925f84c8efe402d",
      "type": "add",
      "after": "2d63c499d4791948",
      "date": 1642141563125
    },
    {
      "type": "edit",
      "id": "3925f84c8efe402d",
      "item": {
        "type": "paragraph",
        "id": "3925f84c8efe402d",
        "text": "Yes, I know you come from a different background and that your interest is of a different nature than where we started from. I do not mean to suggest you should change any of that. I also do not intend to diminish the importance of history. For example, we do not hide that our work is highly influenced and is enabled by that of Smalltalk and that Smalltalk itself was inspired by a biological metaphor. However, parallels are useful when they advance the conversation. At the same time, a metaphor can be limiting when it fails to embrace a new angle that is not present in what we compare against.\n\nLet's consider an extreme case: say someone that is used to calculators sees a computer for the first time. Upon seeing a calculator application that someone might conclude that \"the computer is a calculator with characters presented in different fonts\". It would not appear incorrect from the perspective of that person as they both deal with some computation. At the same time the comparison is highly limiting. Instead, we'd want that person to consider the computer for what the computer is. (interesting to note is that this would not diminish the historical relevance of a calculator)\n\nA similar situation, but certainly not as extreme, happens when we talk about malleability/modifiability and moldability. They are not interchangeable. Moldability should be understood for what it is, not for how it is similar to something else."
      },
      "date": 1642141567414
    },
    {
      "type": "edit",
      "id": "3925f84c8efe402d",
      "item": {
        "type": "paragraph",
        "id": "3925f84c8efe402d",
        "text": "tudor girba via [discord]: Yes, I know you come from a different background and that your interest is of a different nature than where we started from. I do not mean to suggest you should change any of that. I also do not intend to diminish the importance of history. For example, we do not hide that our work is highly influenced and is enabled by that of Smalltalk and that Smalltalk itself was inspired by a biological metaphor. However, parallels are useful when they advance the conversation. At the same time, a metaphor can be limiting when it fails to embrace a new angle that is not present in what we compare against.\n\nLet's consider an extreme case: say someone that is used to calculators sees a computer for the first time. Upon seeing a calculator application that someone might conclude that \"the computer is a calculator with characters presented in different fonts\". It would not appear incorrect from the perspective of that person as they both deal with some computation. At the same time the comparison is highly limiting. Instead, we'd want that person to consider the computer for what the computer is. (interesting to note is that this would not diminish the historical relevance of a calculator)\n\nA similar situation, but certainly not as extreme, happens when we talk about malleability/modifiability and moldability. They are not interchangeable. Moldability should be understood for what it is, not for how it is similar to something else."
      },
      "date": 1642141592817
    },
    {
      "type": "edit",
      "id": "3925f84c8efe402d",
      "item": {
        "type": "paragraph",
        "id": "3925f84c8efe402d",
        "text": "tudor girba via [https://discord.com/channels/729445214812504107/735947900651175998/931238161047236618 discord]: Yes, I know you come from a different background and that your interest is of a different nature than where we started from. I do not mean to suggest you should change any of that. I also do not intend to diminish the importance of history. For example, we do not hide that our work is highly influenced and is enabled by that of Smalltalk and that Smalltalk itself was inspired by a biological metaphor. However, parallels are useful when they advance the conversation. At the same time, a metaphor can be limiting when it fails to embrace a new angle that is not present in what we compare against.\n\nLet's consider an extreme case: say someone that is used to calculators sees a computer for the first time. Upon seeing a calculator application that someone might conclude that \"the computer is a calculator with characters presented in different fonts\". It would not appear incorrect from the perspective of that person as they both deal with some computation. At the same time the comparison is highly limiting. Instead, we'd want that person to consider the computer for what the computer is. (interesting to note is that this would not diminish the historical relevance of a calculator)\n\nA similar situation, but certainly not as extreme, happens when we talk about malleability/modifiability and moldability. They are not interchangeable. Moldability should be understood for what it is, not for how it is similar to something else."
      },
      "date": 1642141606393
    },
    {
      "item": {
        "type": "factory",
        "id": "7158a2491cdbd65a"
      },
      "id": "7158a2491cdbd65a",
      "type": "add",
      "after": "3925f84c8efe402d",
      "date": 1642141640794
    },
    {
      "type": "edit",
      "id": "7158a2491cdbd65a",
      "item": {
        "type": "pagefold",
        "id": "7158a2491cdbd65a",
        "text": "M"
      },
      "date": 1642141647245
    },
    {
      "item": {
        "type": "factory",
        "id": "4226811b4498d0fe"
      },
      "id": "4226811b4498d0fe",
      "type": "add",
      "after": "7158a2491cdbd65a",
      "date": 1642141692557
    },
    {
      "type": "edit",
      "id": "4226811b4498d0fe",
      "item": {
        "type": "paragraph",
        "id": "4226811b4498d0fe",
        "text": "Moldability vs malleability --> "
      },
      "date": 1642141699101
    },
    {
      "type": "edit",
      "id": "4226811b4498d0fe",
      "item": {
        "type": "paragraph",
        "id": "4226811b4498d0fe",
        "text": "Moldability vs malleability --> Formbarkeit vs. Verformbarkeit"
      },
      "date": 1642141705347
    },
    {
      "type": "edit",
      "id": "7158a2491cdbd65a",
      "item": {
        "type": "pagefold",
        "id": "7158a2491cdbd65a",
        "text": "Moldability vs. Malleability (33 "
      },
      "date": 1642141760939
    },
    {
      "item": {
        "type": "factory",
        "id": "e49e6d692a8d65d7"
      },
      "id": "e49e6d692a8d65d7",
      "type": "add",
      "after": "4226811b4498d0fe",
      "date": 1642141774084
    },
    {
      "type": "edit",
      "id": "7158a2491cdbd65a",
      "item": {
        "type": "pagefold",
        "id": "7158a2491cdbd65a",
        "text": "Moldability vs. Malleability (33 Messages)"
      },
      "date": 1642141776043
    },
    {
      "type": "edit",
      "id": "e49e6d692a8d65d7",
      "item": {
        "type": "paragraph",
        "id": "e49e6d692a8d65d7",
        "text": "Offray — gestern um 18:40 Uhr\nI for example don't think that the calculator example applies here. As it could be viewed as the computer being an evolution of the calculator. I don't think that, at conceptual level moldability, malleability and modiability are conceptual evolutions, and they more highlight perspective points.\n\nHow can we use the different concepts to emphasize connections instead of differences?, as pointed in this message:\n\nhttps://discord.com/channels/729445214812504107/735947900651175998/931239986316066846 \n"
      },
      "date": 1642141811960
    },
    {
      "item": {
        "type": "factory",
        "id": "97ba3bd76b476201"
      },
      "id": "97ba3bd76b476201",
      "type": "add",
      "after": "e49e6d692a8d65d7",
      "date": 1642141826125
    },
    {
      "type": "edit",
      "id": "97ba3bd76b476201",
      "item": {
        "type": "paragraph",
        "id": "97ba3bd76b476201",
        "text": "Offray — gestern um 18:35 Uhr\nI think that is important to emphasize both, differences and connection points. So far I have seen only the first ones in detriment of the second ones. I don't see clear differences between Moldability, malleability and modifiability, except of context (the first one more related/used with/within devs and software). But I will say that if we want a wider and more diverse conversation, it's time to emphasize connections.\n\nI would say that GT embodies the idea of moldability in the software world, while also it connects with a long tradition of modifiable systems in several other places (biology, sociology, cognition, design) and it offers a lot of entry points for diverse people coming from those places (particularly via data storytelling and visualization).\n\nOf course, the connections are a community responsibility. We need to find them together \nUmm... I think that this topic is deserving its own thread... How can we do that?"
      },
      "date": 1642141827939
    },
    {
      "type": "edit",
      "id": "e49e6d692a8d65d7",
      "item": {
        "type": "paragraph",
        "id": "e49e6d692a8d65d7",
        "text": "Offray — gestern um 18:40 Uhr\nI for example don't think that the calculator example applies here. As it could be viewed as the computer being an evolution of the calculator. I don't think that, at conceptual level moldability, malleability and modiability are conceptual evolutions, and they more highlight perspective points.\n\n**How can we use the different concepts to emphasize connections instead of differences?**, as pointed in this message:\n\nhttps://discord.com/channels/729445214812504107/735947900651175998/931239986316066846 \n"
      },
      "date": 1642141870921
    },
    {
      "type": "edit",
      "id": "e49e6d692a8d65d7",
      "item": {
        "type": "markdown",
        "id": "e49e6d692a8d65d7",
        "text": "Offray — gestern um 18:40 Uhr\nI for example don't think that the calculator example applies here. As it could be viewed as the computer being an evolution of the calculator. I don't think that, at conceptual level moldability, malleability and modiability are conceptual evolutions, and they more highlight perspective points.\n\n**How can we use the different concepts to emphasize connections instead of differences?**, as pointed in this message:\n\nhttps://discord.com/channels/729445214812504107/735947900651175998/931239986316066846 \n"
      },
      "date": 1642141872319
    },
    {
      "item": {
        "type": "factory",
        "id": "f84f2164c9db0d31"
      },
      "id": "f84f2164c9db0d31",
      "type": "add",
      "after": "97ba3bd76b476201",
      "date": 1642141883087
    },
    {
      "type": "edit",
      "id": "f84f2164c9db0d31",
      "item": {
        "type": "paragraph",
        "id": "f84f2164c9db0d31",
        "text": "Konrad Hinsen — gestern um 20:48 Uhr\nI'd say that moldable development is malleability pushed to the meta-level of development tools. But that's a very theoretical description. The impact is different."
      },
      "date": 1642141884687
    },
    {
      "item": {
        "type": "factory",
        "id": "eb3af37f211985b2"
      },
      "id": "eb3af37f211985b2",
      "type": "add",
      "after": "f84f2164c9db0d31",
      "date": 1642141896267
    },
    {
      "type": "edit",
      "id": "eb3af37f211985b2",
      "item": {
        "type": "paragraph",
        "id": "eb3af37f211985b2",
        "text": "tudor girba — gestern um 20:50 Uhr\nThat's a nice way of putting it! And of course, due to self referentiality, it can  have cascading effects. "
      },
      "date": 1642141899424
    },
    {
      "item": {
        "type": "factory",
        "id": "a4580a0f97db9f2a"
      },
      "id": "a4580a0f97db9f2a",
      "type": "add",
      "after": "eb3af37f211985b2",
      "date": 1642141909620
    },
    {
      "type": "edit",
      "id": "a4580a0f97db9f2a",
      "item": {
        "type": "paragraph",
        "id": "a4580a0f97db9f2a",
        "text": "Offray — gestern um 21:33 Uhr\nAdding development clarifies the context of the definition and helps to differentiate from malleable systems, for example."
      },
      "date": 1642141911563
    },
    {
      "item": {
        "type": "factory",
        "id": "f9472c1bc6ac09ae"
      },
      "id": "f9472c1bc6ac09ae",
      "type": "add",
      "after": "a4580a0f97db9f2a",
      "date": 1642142114816
    },
    {
      "type": "edit",
      "id": "f9472c1bc6ac09ae",
      "item": {
        "type": "pagefold",
        "id": "f9472c1bc6ac09ae",
        "text": "~"
      },
      "date": 1642142121205
    },
    {
      "id": "f9472c1bc6ac09ae",
      "type": "move",
      "order": [
        "bfb5602dec22d003",
        "88a48f17e648cc62",
        "2d63c499d4791948",
        "3925f84c8efe402d",
        "7158a2491cdbd65a",
        "4226811b4498d0fe",
        "e49e6d692a8d65d7",
        "97ba3bd76b476201",
        "f9472c1bc6ac09ae",
        "f84f2164c9db0d31",
        "eb3af37f211985b2",
        "a4580a0f97db9f2a"
      ],
      "date": 1642142125158
    },
    {
      "type": "add",
      "id": "4c6f3e53cd5782fe",
      "item": {
        "type": "paragraph",
        "id": "4c6f3e53cd5782fe",
        "text": "tudor girba — gestern um 18:40 Uhr\nCan we agree that a new concept can be evaluated and compared with others only after the concept is understood?"
      },
      "after": "97ba3bd76b476201",
      "date": 1642142159711
    },
    {
      "type": "add",
      "id": "a45dc1bfda9dee8b",
      "item": {
        "type": "paragraph",
        "id": "a45dc1bfda9dee8b",
        "text": "Offray — gestern um 18:42 Uhr\nI think its an iterative process. The concept is understood as it is compared, connected and evaluated with others. It helps to locate it in such epistemic network. "
      },
      "after": "4c6f3e53cd5782fe",
      "date": 1642142198680
    },
    {
      "type": "add",
      "id": "c90e21384598bf5f",
      "item": {
        "type": "paragraph",
        "id": "c90e21384598bf5f",
        "text": "thekkid — gestern um 18:47 Uhr\nI don't wish to distract from the conversation that you're having but I'm also struggling to disentangle the two concepts. I'm not trying to undervalue the semantic relevance but \"Malleability refers to the property of a system to be adjusted to the needs of a user. These adjustments happen within bounds of the hooks that the system provides\". I would argue that a system with limited predefined edges that isn't extensible is in fact not malleable but quite rigid.\n\nI realize this is an argument of semantics but in order to make sure I'm not missing something else I wanted to clarify.\nThe moldability definition allowing for the user to change the environment with the purpose of explaining the inside of the system also seems relatively narrow in scope since there could be other purposes to change the environment."
      },
      "after": "a45dc1bfda9dee8b",
      "date": 1642142221782
    },
    {
      "type": "add",
      "id": "4049a0f96cace96f",
      "item": {
        "type": "paragraph",
        "id": "4049a0f96cace96f",
        "text": "Offray — gestern um 18:56 Uhr\nI think tha a little bit of genealogy of how we individually approach/arrive to such concepts could be helpful.\n\nFor me, understanding the system is a prerequisite of changing it... well changing it can be a way of understanding it, so both are interactive and in dialogue. And the way to make  a system understandable is via self-referentiality: if the system has a discourse about itself, you can change the system within the system. Digital systems are particularly well suited for self-refentiality if we deconstruct the frontier between the source code and the running system, because source code describes the running system and the running system can be used to change the source code. And because software systems are used in the context of social systems (i.e: communities), by introducing a self referential software system (a meta system) in dialogue with a social system, we can improve the possibiliites of technosocial systems to change themselves.\n\nThis was the hypothesis I developed and prototyped in my PhD. \nSo far, in my path, none of the concepts of moldability, malleability, modifiabiity had been strictly introduced and in fact, despite wanting to use a Smalltalk based software system in my hackerspace, I started with other (python based) systems, as they where closer to the culture I was trying to approach. Then I decided to use Pharo to build Grafoscopio and in that path I found the Moldable Debugger. Which lead me to Moose, then back to Pharo and now to GT. \nIn that path I found several concepts used by different communities in similar ways: modifiability, moldability and malleability. I was unable to find a strong division of them, except of the contexts where they where developed/used. And, for me, the idea of self-referential meta-systems is a bridge concept among all those traditions and communities. Something I would like to emphasize, to emphasize also possible bridges and to invite more people to the conversation by building bridges between technosocial systems. So far I have seen the techno part being over emphasized (software, APIs, IDEs), but the social part is lacking."
      },
      "after": "c90e21384598bf5f",
      "date": 1642142269132
    },
    {
      "item": {
        "type": "factory",
        "id": "409ace34dc81963a"
      },
      "id": "409ace34dc81963a",
      "type": "add",
      "after": "a4580a0f97db9f2a",
      "date": 1642142704049
    },
    {
      "type": "edit",
      "id": "409ace34dc81963a",
      "item": {
        "type": "paragraph",
        "id": "409ace34dc81963a",
        "text": "~"
      },
      "date": 1642142712288
    },
    {
      "item": {
        "type": "factory",
        "id": "2981bead464e2bf4"
      },
      "id": "2981bead464e2bf4",
      "type": "add",
      "after": "409ace34dc81963a",
      "date": 1642142717008
    },
    {
      "type": "edit",
      "id": "2981bead464e2bf4",
      "item": {
        "type": "pagefold",
        "id": "2981bead464e2bf4",
        "text": "~"
      },
      "date": 1642142721396
    },
    {
      "type": "remove",
      "id": "409ace34dc81963a",
      "date": 1642142725445
    },
    {
      "item": {
        "type": "factory",
        "id": "90735ff160d28861"
      },
      "id": "90735ff160d28861",
      "type": "add",
      "after": "2981bead464e2bf4",
      "date": 1642142728272
    },
    {
      "type": "edit",
      "id": "90735ff160d28861",
      "item": {
        "type": "paragraph",
        "id": "90735ff160d28861",
        "text": "Re: thekkid — gestern um 18:47 Uhr\nI don't wish to distract from the conversation that you're having but "
      },
      "date": 1642142736205
    },
    {
      "item": {
        "type": "factory",
        "id": "c53c77643bed9854"
      },
      "id": "c53c77643bed9854",
      "type": "add",
      "after": "90735ff160d28861",
      "date": 1642142752130
    },
    {
      "type": "edit",
      "id": "c53c77643bed9854",
      "item": {
        "type": "paragraph",
        "id": "c53c77643bed9854",
        "text": "tudor girba — gestern um 19:06 Uhr\nWelcome :). Take a look at the list from https://malleable.systems/. It's a nice list which is quite similar to the idea of personal computing. What it takes for granted is how it is understood where and why the extension should happen. The consequence is that the extension will happen where others happened. The hooks play a particularly critical role. They are like the walking paths through a meadow. Moldability addresses the extra question of where and why something happens or should happen. It turns out that to address that you need malleability, but the act of creating these tools during programming changes the nature of programming. That is novel, and not explored. Looking at it from what we already know (even for example from the Smalltalk history) is not helpful because it's a new discipline with new, not yet developed skills. \n"
      },
      "date": 1642142753757
    },
    {
      "type": "edit",
      "id": "c53c77643bed9854",
      "item": {
        "type": "paragraph",
        "id": "c53c77643bed9854",
        "text": "tudor girba — gestern um 19:06 Uhr\nWelcome :). Take a look at the list from https://malleable.systems/. It's a nice list which is quite similar to the idea of personal computing. What it takes for granted is how it is understood where and why the extension should happen. The consequence is that the extension will happen where others happened. The hooks play a particularly critical role. They are like the walking paths through a meadow. Moldability addresses the extra question of where and why something happens or should happen. It turns out that to address that you need malleability, but the act of creating these tools during programming changes the nature of programming. That is novel, and not explored. Looking at it from what we already know (even for example from the Smalltalk history) is not helpful because it's a new discipline with new, not yet developed skills. "
      },
      "date": 1642142772829
    },
    {
      "type": "add",
      "id": "3573d9662f6ab12d",
      "item": {
        "type": "paragraph",
        "id": "3573d9662f6ab12d",
        "text": "thekkid — gestern um 19:10 Uhr\nI help work on the collective. I don't think anything they're doing is in contrast with doing the work during programming. Different areas of the research just have different focus points. As @Offray pointed out GT is listed in the catalog. Programming is a specific domain in the context of using a computer."
      },
      "after": "c53c77643bed9854",
      "date": 1642142774506
    },
    {
      "item": {
        "type": "factory",
        "id": "a84f31ace7451dfe"
      },
      "id": "a84f31ace7451dfe",
      "type": "add",
      "after": "3573d9662f6ab12d",
      "date": 1642142875957
    },
    {
      "type": "edit",
      "id": "a84f31ace7451dfe",
      "item": {
        "type": "paragraph",
        "id": "a84f31ace7451dfe",
        "text": "Offray — gestern um 19:11 Uhr\nMoldability addresses the extra question of where and why something happens or should happen.\n\nI would say that this approach could be a difference. And it's related with Humane Assesment. This could be a place where the similarities and differences are clearer. \n"
      },
      "date": 1642142878220
    },
    {
      "type": "add",
      "id": "b2cf16c0e323697c",
      "item": {
        "type": "paragraph",
        "id": "b2cf16c0e323697c",
        "text": "thekkid — gestern um 19:13 Uhr\nJust to make sure I understand the interpretation there would be that moldability is using the malleability to provide some form of introspection to aid in understanding the system."
      },
      "after": "a84f31ace7451dfe",
      "date": 1642142908054
    },
    {
      "type": "add",
      "id": "d3653bf6c55d7d27",
      "item": {
        "type": "paragraph",
        "id": "d3653bf6c55d7d27",
        "text": "tudor girba — gestern um 19:14 Uhr\nProgramming is not a specific domain. Programming is the domain :). To get anything right, we have to get that one right. If we observe that the result of programming leads to unwanted properties, such as resulting systems that are black box, it means we do not understand programming yet and we should go back to the drawing board. We now have a luxury that the people that worked on the original idea of personal computing did not have: we can observe what happened and we can iterate."
      },
      "after": "b2cf16c0e323697c",
      "date": 1642143145760
    },
    {
      "type": "add",
      "id": "57e1cb77464cb241",
      "item": {
        "type": "paragraph",
        "id": "57e1cb77464cb241",
        "text": "--- ? --- (my reaction)"
      },
      "after": "d3653bf6c55d7d27",
      "date": 1642143243369
    },
    {
      "type": "add",
      "id": "e2ddd9e3098a2234",
      "item": {
        "type": "paragraph",
        "id": "e2ddd9e3098a2234",
        "text": "tudor girba — gestern um 19:15 Uhr\nYes. And this is an essential property, too that leads to a new way of thinking with and about systems. \n"
      },
      "after": "57e1cb77464cb241",
      "date": 1642143246834
    },
    {
      "type": "edit",
      "id": "e2ddd9e3098a2234",
      "item": {
        "type": "paragraph",
        "id": "e2ddd9e3098a2234",
        "text": "tudor girba — gestern um 19:15 Uhr\nYes. And this is an essential property, too that leads to a new way of thinking with and about systems. "
      },
      "date": 1642143259930
    },
    {
      "type": "add",
      "id": "11ec909a427abc98",
      "item": {
        "type": "paragraph",
        "id": "11ec909a427abc98",
        "text": "thekkid — gestern um 19:16 Uhr\nOkay, I think I was confused before because I always took for granted that you'd need this sort of introspection in order to make scalable systems malleable in the first place. \n"
      },
      "after": "e2ddd9e3098a2234",
      "date": 1642143261460
    },
    {
      "item": {
        "type": "factory",
        "id": "f3abf112ee1f494c"
      },
      "id": "f3abf112ee1f494c",
      "type": "add",
      "after": "11ec909a427abc98",
      "date": 1642143268563
    },
    {
      "type": "edit",
      "id": "f3abf112ee1f494c",
      "item": {
        "type": "paragraph",
        "id": "f3abf112ee1f494c",
        "text": "tudor girba — gestern um 19:16 Uhr\nMoldable Development is an evolution of Humane Assessment. With humane assessment we focused on just the reading problem. With Moldable Development we enlarge the focus on how a new way of reading changes how we construct."
      },
      "date": 1642143270630
    },
    {
      "type": "add",
      "id": "627b0c54acad0314",
      "item": {
        "type": "paragraph",
        "id": "627b0c54acad0314",
        "text": "tudor girba — gestern um 19:17 Uhr\nAnd yet, isn't it interesting how given that it's such an obvious property, no systems, including Smalltalk, actually offer that in a way that scales to more than a few screens?"
      },
      "after": "f3abf112ee1f494c",
      "date": 1642143279126
    },
    {
      "type": "add",
      "id": "a329a80019d0d2dc",
      "item": {
        "type": "paragraph",
        "id": "a329a80019d0d2dc",
        "text": "thekkid — gestern um 19:18 Uhr\nYeah, I would say the current state of all computing is pretty awful. That's why I'm interested in GToolkit and the Malleable Systems Collective 😅"
      },
      "after": "627b0c54acad0314",
      "date": 1642143287782
    },
    {
      "type": "add",
      "id": "b163d56ddae6772f",
      "item": {
        "type": "paragraph",
        "id": "b163d56ddae6772f",
        "text": "tudor girba — gestern um 19:20 Uhr\nBut, even when we consider a system like Smalltalk or Lisp, we still miss this. That's because the problem of scale was not within the bounds of what was originally considered. Somewhere along the line, we took it for granted that the way we can relate to a few objects is the same as how we should relate to billions of objects. From our observation there is a way in which both can be dealt with in the same way, but it's not the naive one people considered originally. That's what moldability offers."
      },
      "after": "a329a80019d0d2dc",
      "date": 1642143298078
    },
    {
      "type": "add",
      "id": "c0082ac0d59a2d68",
      "item": {
        "type": "paragraph",
        "id": "c0082ac0d59a2d68",
        "text": "Offray — gestern um 19:24 Uhr\nAha, in that genealogy we can trace differences and connection points. For example in methodology, scalability and so so."
      },
      "after": "b163d56ddae6772f",
      "date": 1642143381262
    },
    {
      "type": "add",
      "id": "22315ff605a508f4",
      "item": {
        "type": "paragraph",
        "id": "22315ff605a508f4",
        "text": "tudor girba — gestern um 19:25 Uhr\nOf course. But, that still does not make them interchangeable."
      },
      "after": "c0082ac0d59a2d68",
      "date": 1642143390452
    },
    {
      "type": "add",
      "id": "2e59809bf7f70e7a",
      "item": {
        "type": "paragraph",
        "id": "2e59809bf7f70e7a",
        "text": "thekkid — gestern um 19:26 Uhr\nProbably an oversimplification but it seems to be a distinction of method vs process."
      },
      "after": "22315ff605a508f4",
      "date": 1642143399883
    },
    {
      "type": "add",
      "id": "c567078ebfa10ead",
      "item": {
        "type": "paragraph",
        "id": "c567078ebfa10ead",
        "text": "tudor girba — gestern um 19:27 Uhr\nIn what way?"
      },
      "after": "2e59809bf7f70e7a",
      "date": 1642143407502
    },
    {
      "type": "add",
      "id": "4b5b2711d0fcf520",
      "item": {
        "type": "paragraph",
        "id": "4b5b2711d0fcf520",
        "text": "thekkid — gestern um 19:28 Uhr\nMalleability is about what you're capable of doing using the system. Moldable development (in my limited understanding) is about using that capability to better understand systems."
      },
      "after": "c567078ebfa10ead",
      "date": 1642143417510
    },
    {
      "type": "add",
      "id": "b921a767c2fa68d7",
      "item": {
        "type": "paragraph",
        "id": "b921a767c2fa68d7",
        "text": "tudor girba — gestern um 19:29 Uhr\nThanks for clarifying. No, that's not it :)."
      },
      "after": "4b5b2711d0fcf520",
      "date": 1642143425654
    },
    {
      "type": "add",
      "id": "fda1900d4f3a41b3",
      "item": {
        "type": "paragraph",
        "id": "fda1900d4f3a41b3",
        "text": "thekkid — gestern um 19:30 Uhr\nMaybe an example of something that would be one and not the other would help."
      },
      "after": "b921a767c2fa68d7",
      "date": 1642143435519
    },
    {
      "type": "add",
      "id": "4756315ede3cd3c5",
      "item": {
        "type": "paragraph",
        "id": "4756315ede3cd3c5",
        "text": "tudor girba — gestern um 19:51 Uhr\nOk. Here is an example that @CarlosL put together soon after he saw GT: https://lepiter.io/feenk/testimonial--moldable-database-analysis-9q25tat05nzravb46tuq4aih0/. This describes how we got to understand his database by constructing tools for it. This is an example, of how the changing the lens through which we look at a system changes how we reason about it.\n\nThis might be perceived as some kind of data science.\n\nHere are a couple of further examples of how we come to such extensions and what they can lead to:\nhttps://www.infoq.com/presentations/moldable-development/?utm_source=twitter&utm_medium=link&utm_campaign=calendar\n\nNow, the most interesting part is when we apply it to what we consider as difficult problems. This thread describes a problem we have right at this moment: https://twitter.com/feenkcom/status/1481023198678458370\nIt's a really difficult problem about our own environment that we could not reason about without creating a new tool in and with the environment. \n\nThe latter shows that we cannot distinguish between programming and moldability: without creating that custom view we cannot understand the problem, and without understanding the problem we cannot construct further."
      },
      "after": "fda1900d4f3a41b3",
      "date": 1642143446586
    },
    {
      "type": "add",
      "id": "70863bb121e8fc8d",
      "item": {
        "type": "paragraph",
        "id": "70863bb121e8fc8d",
        "text": "Offray — gestern um 19:53 Uhr\nUmm... I think that we need to make a more particular definition. \"Moldability in the context of Moldable Development means [...] and it differs from other concepts like Malleability and modifiability because [...]\". Kind of similar to what has been done separating Moldable Development from Literate Programming and other attempts in the GT Book.\nThat would allow others to say something like \"While Moldable development defines/confines itself as [...], we are interesting on it, because of its connections and practical implications in dialogue with wider traditions like [...]. Here we offer some use cases  in [...]\"."
      },
      "after": "4756315ede3cd3c5",
      "date": 1642143458226
    },
    {
      "item": {
        "type": "factory",
        "id": "46fb30a8c2f7490c"
      },
      "id": "46fb30a8c2f7490c",
      "type": "add",
      "after": "70863bb121e8fc8d",
      "date": 1642144082622
    },
    {
      "item": {
        "type": "factory",
        "id": "c5b2a96ad0b9cbfd"
      },
      "id": "c5b2a96ad0b9cbfd",
      "type": "add",
      "after": "46fb30a8c2f7490c",
      "date": 1642144088906
    },
    {
      "type": "edit",
      "id": "46fb30a8c2f7490c",
      "item": {
        "type": "pagefold",
        "id": "46fb30a8c2f7490c",
        "text": "~"
      },
      "date": 1642144091544
    },
    {
      "type": "edit",
      "id": "c5b2a96ad0b9cbfd",
      "item": {
        "type": "paragraph",
        "id": "c5b2a96ad0b9cbfd",
        "text": "Ralf Barkow — heute um 08:07 Uhr\nIn one of 'my' other contexts after the Pile Systems experience, 'we' solved this problem in the context of dmx.berlin by also operationalizing objects as associations/relations. A nice side effect is that DMX can provide a user interface where I stand on the shoulders of these billions of objects, externalizing complexity into the underlying semantic network, but I can focus on juggling four, five, seven, or nine things in my head at the same time."
      },
      "date": 1642144100040
    },
    {
      "item": {
        "type": "factory",
        "id": "37a311029e94c518"
      },
      "id": "37a311029e94c518",
      "type": "add",
      "after": "d6208307809c2300",
      "date": 1642144106782
    },
    {
      "type": "edit",
      "id": "37a311029e94c518",
      "item": {
        "type": "reference",
        "id": "37a311029e94c518",
        "site": "wiki.ralfbarkow.ch",
        "slug": "2022-01-12",
        "title": "2022-01-12",
        "text": "[[Watch What I Do]]"
      },
      "date": 1642144112152
    },
    {
      "item": {
        "type": "factory",
        "id": "aaeddfedb0a97b22"
      },
      "id": "aaeddfedb0a97b22",
      "type": "add",
      "after": "37a311029e94c518",
      "date": 1642144121745
    },
    {
      "type": "edit",
      "id": "aaeddfedb0a97b22",
      "item": {
        "type": "markdown",
        "id": "aaeddfedb0a97b22",
        "text": "> Sönke Ahrens writes there: \"Whoever, like Luhmann, wants to discover unexpected parallels between heterogeneous elements, can only do so with the help of an externalized memory that also makes such comparisons possible and does not prevent them from the outset by a hierarchical order. Above all, however, we need a system that can remember and present more things to us than we can ourselves. You can only build theoretical complexity if you externalize it - whether you can juggle four, five, seven, or nine things in your head at the same time: it's definitely too little.\"\nSmalltalk / gt seems to be or can become such a system. Welcome to the club.\n"
      },
      "date": 1642144125714
    },
    {
      "type": "edit",
      "id": "70863bb121e8fc8d",
      "item": {
        "type": "paragraph",
        "id": "70863bb121e8fc8d",
        "text": "Offray — gestern um 19:53 Uhr\nUmm... I think that we need to make a more particular definition. \"Moldability in the context of Moldable Development means [...] and it differs from other concepts like Malleability and modifiability because [...]\". Kind of similar to what has been done separating Moldable Development from [[Literate Programming]] and other attempts in the GT Book.\nThat would allow others to say something like \"While Moldable development defines/confines itself as [...], we are interesting on it, because of its connections and practical implications in dialogue with wider traditions like [...]. Here we offer some use cases  in [...]\"."
      },
      "date": 1642144275447
    },
    {
      "type": "add",
      "id": "aad1cf1bceb44bfc",
      "item": {
        "type": "paragraph",
        "id": "aad1cf1bceb44bfc",
        "text": "thekkid — gestern um 20:04 Uhr\nI've seen the infoq talk but I'll check out the other examples. I'm probably going to drop the semantic concern. Most of the value I expect I'll get is from seeing the patterns of use."
      },
      "after": "70863bb121e8fc8d",
      "date": 1642144301392
    },
    {
      "type": "add",
      "id": "663dcf49f245800f",
      "item": {
        "type": "paragraph",
        "id": "663dcf49f245800f",
        "text": "Offray — gestern um 20:06 Uhr\nMy concern is not about semantic by itself, but what can be done in connection with other communities and traditions. That is how I have been using Grafoscopio before and how I'm using Lepiter now (for example with TiddlyWikiPharo)"
      },
      "after": "aad1cf1bceb44bfc",
      "date": 1642144330232
    },
    {
      "type": "add",
      "id": "9e70051ee34645db",
      "item": {
        "type": "paragraph",
        "id": "9e70051ee34645db",
        "text": "But I thing that meaning is enactive. What all those terms mean will be clarified by how the tools and practices that embed them made possible. "
      },
      "after": "663dcf49f245800f",
      "date": 1642144341533
    },
    {
      "type": "add",
      "id": "090b07738360c6ab",
      "item": {
        "type": "paragraph",
        "id": "090b07738360c6ab",
        "text": "tudor girba — gestern um 20:50 Uhr\nYes. We were only able to explain moldability by getting people to experiment it first hand. Our hope is that perhaps it can work if you get to see many examples, too. That's the reason why most people conflate what we do with something else and the main point tends to not get across."
      },
      "after": "9e70051ee34645db",
      "date": 1642144368311
    },
    {
      "item": {
        "type": "factory",
        "id": "d56987c9d182747b"
      },
      "id": "d56987c9d182747b",
      "type": "add",
      "after": "c5b2a96ad0b9cbfd",
      "date": 1642144667021
    },
    {
      "type": "edit",
      "id": "d56987c9d182747b",
      "item": {
        "type": "pagefold",
        "id": "d56987c9d182747b",
        "text": "~"
      },
      "date": 1642144674512
    },
    {
      "item": {
        "type": "factory",
        "id": "34aff99759e8b8dc"
      },
      "id": "34aff99759e8b8dc",
      "type": "add",
      "after": "d56987c9d182747b",
      "date": 1642144676160
    },
    {
      "type": "edit",
      "id": "34aff99759e8b8dc",
      "item": {
        "type": "paragraph",
        "id": "34aff99759e8b8dc",
        "text": "Offray — gestern um 21:33 Uhr\nAdding development clarifies the context of the definition and helps to differentiate from malleable systems, for example."
      },
      "date": 1642144680470
    },
    {
      "type": "add",
      "id": "562825f63aad3c90",
      "item": {
        "type": "paragraph",
        "id": "562825f63aad3c90",
        "text": "Konrad Hinsen — gestern um 20:48 Uhr\nI'd say that moldable development is malleability pushed to the meta-level of development tools. But that's a very theoretical description. The impact is different.\n"
      },
      "after": "d56987c9d182747b",
      "date": 1642144693757
    },
    {
      "type": "edit",
      "id": "34aff99759e8b8dc",
      "item": {
        "type": "paragraph",
        "id": "34aff99759e8b8dc",
        "text": "Offray — gestern um 21:33 Uhr\nAdding *development* clarifies the context of the definition and helps to differentiate from malleable systems, for example."
      },
      "date": 1642144710558
    },
    {
      "type": "edit",
      "id": "34aff99759e8b8dc",
      "item": {
        "type": "markdown",
        "id": "34aff99759e8b8dc",
        "text": "Offray — gestern um 21:33 Uhr\nAdding *development* clarifies the context of the definition and helps to differentiate from malleable systems, for example."
      },
      "date": 1642144711630
    },
    {
      "item": {
        "type": "factory",
        "id": "ebd1e5a7aa907441"
      },
      "id": "ebd1e5a7aa907441",
      "type": "add",
      "after": "34aff99759e8b8dc",
      "date": 1642144922606
    },
    {
      "type": "edit",
      "id": "ebd1e5a7aa907441",
      "item": {
        "type": "paragraph",
        "id": "ebd1e5a7aa907441",
        "text": "08:22"
      },
      "date": 1642144927648
    },
    {
      "item": {
        "type": "factory",
        "id": "ec28076581445386"
      },
      "id": "ec28076581445386",
      "type": "add",
      "after": "ebd1e5a7aa907441",
      "date": 1642152319998
    },
    {
      "type": "edit",
      "id": "ec28076581445386",
      "item": {
        "type": "pagefold",
        "id": "ec28076581445386",
        "text": "~"
      },
      "date": 1642152325735
    },
    {
      "item": {
        "type": "factory",
        "id": "5e085ffb937fa7f2"
      },
      "id": "5e085ffb937fa7f2",
      "type": "add",
      "after": "ec28076581445386",
      "date": 1642152329445
    },
    {
      "type": "edit",
      "id": "5e085ffb937fa7f2",
      "item": {
        "type": "paragraph",
        "id": "5e085ffb937fa7f2",
        "text": "https://thesephist.com/posts/notation/ "
      },
      "date": 1642152385342
    },
    {
      "type": "edit",
      "id": "5e085ffb937fa7f2",
      "item": {
        "type": "paragraph",
        "id": "5e085ffb937fa7f2",
        "text": "[https://thesephist.com/posts/notation/ post]"
      },
      "date": 1642152908524
    },
    {
      "type": "edit",
      "id": "5e085ffb937fa7f2",
      "item": {
        "type": "paragraph",
        "id": "5e085ffb937fa7f2",
        "text": "Konrad Hinsen — gestern um 10:38 Uhr\nTweet thread (pointing to blog post) on \"Notational Intelligence\". Some parts will sound familiar to the GT fanclub. https://twitter.com/thesephist/status/1481446902960844801\n [https://thesephist.com/posts/notation/ post]"
      },
      "date": 1642152917977
    },
    {
      "type": "edit",
      "id": "5e085ffb937fa7f2",
      "item": {
        "type": "markdown",
        "id": "5e085ffb937fa7f2",
        "text": "Konrad Hinsen — gestern um 10:38 Uhr\nTweet thread (pointing to blog post) on \"Notational Intelligence\". Some parts will sound familiar to the GT fanclub. https://twitter.com/thesephist/status/1481446902960844801\n [https://thesephist.com/posts/notation/ post]"
      },
      "date": 1642152926187
    },
    {
      "item": {
        "type": "factory",
        "id": "2e80a25727a68862"
      },
      "id": "2e80a25727a68862",
      "type": "add",
      "after": "5e085ffb937fa7f2",
      "date": 1642152939818
    },
    {
      "type": "edit",
      "id": "2e80a25727a68862",
      "item": {
        "type": "paragraph",
        "id": "2e80a25727a68862",
        "text": "Ralf Barkow — heute um 10:28 Uhr\nThanks @Konrad Hinsen , I feel the need for a notation that can mark stories as failed in a particular context and allow us to continue/branch with another story.\nProblem:Therefore: pattern applied to twin pages.\nThereby the evolution leads the twin sides away from each other. \nA kind of DNA strand methaphor, if 'we' will. \nWith the difference that perhaps not repairs, but differences could form the preferred side."
      },
      "date": 1642152941532
    },
    {
      "type": "add",
      "id": "600c965024ef2480",
      "item": {
        "type": "paragraph",
        "id": "600c965024ef2480",
        "text": "Ralf Barkow — heute um 10:41 Uhr\nThe art would now be to be able to recognize the story and its ramifications already when perceiving a mark/notation once made, so to speak, in an abbreviated form, without having to reread all the stories each time. (Cf. the discussion about the Folgezettel/follow-up note concept in the zettelkasten). \nSuch a mark/annotation would then make all its ramifications recognizable without having to trace all the links first."
      },
      "after": "2e80a25727a68862",
      "date": 1642153560695
    },
    {
      "type": "edit",
      "id": "600c965024ef2480",
      "item": {
        "type": "paragraph",
        "id": "600c965024ef2480",
        "text": "Ralf Barkow — heute um 10:41 Uhr\nThe art would now be to be able to recognize the story and its ramifications already when perceiving a mark/notation once made, so to speak, in an abbreviated form, without having to reread all the stories each time. (Cf. the discussion about the Folgezettel/follow-up note concept in the #zettelkasten). \nSuch a mark/annotation would then make all its ramifications recognizable without having to trace all the links first."
      },
      "date": 1642153590550
    },
    {
      "item": {
        "type": "factory",
        "id": "14fa3e2c398e13ab"
      },
      "id": "14fa3e2c398e13ab",
      "type": "add",
      "after": "600c965024ef2480",
      "date": 1642153722801
    },
    {
      "type": "edit",
      "id": "14fa3e2c398e13ab",
      "item": {
        "type": "paragraph",
        "id": "14fa3e2c398e13ab",
        "text": "(\"Doing with Images Makes Symbols\")"
      },
      "date": 1642153733437
    },
    {
      "type": "edit",
      "id": "14fa3e2c398e13ab",
      "item": {
        "type": "paragraph",
        "id": "14fa3e2c398e13ab",
        "text": "(\"[[Doing with Images Makes Symbols]]\")"
      },
      "date": 1642153793579
    },
    {
      "type": "edit",
      "id": "2e80a25727a68862",
      "item": {
        "type": "paragraph",
        "id": "2e80a25727a68862",
        "text": "Ralf Barkow — heute um 10:28 Uhr\nThanks @Konrad Hinsen , I feel the need for a notation that can mark stories as failed in a particular context and allow us to continue/branch with another story.\nProblem:Therefore: pattern applied to twin pages.\nThereby the evolution leads the twin sides away from each other. \nA kind of DNA strand metaphor, if 'we' will. \nWith the difference that perhaps not repairs, but differences could form the preferred side."
      },
      "date": 1642154257911
    },
    {
      "type": "add",
      "id": "5e293153cb544a52",
      "item": {
        "type": "paragraph",
        "id": "5e293153cb544a52",
        "text": "[[Recognizable]]"
      },
      "after": "14fa3e2c398e13ab",
      "date": 1642156866486
    },
    {
      "id": "2e80a25727a68862",
      "type": "remove",
      "date": 1642156884614
    },
    {
      "id": "600c965024ef2480",
      "type": "remove",
      "date": 1642156954442
    },
    {
      "id": "14fa3e2c398e13ab",
      "type": "remove",
      "date": 1642156981736
    },
    {
      "item": {
        "type": "factory",
        "id": "37511c7a2f9345b7"
      },
      "id": "37511c7a2f9345b7",
      "type": "add",
      "after": "5e293153cb544a52",
      "date": 1642156984834
    },
    {
      "type": "edit",
      "id": "37511c7a2f9345b7",
      "item": {
        "type": "reference",
        "id": "37511c7a2f9345b7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "recognizable",
        "title": "Recognizable",
        "text": "(\"[[Doing with Images Makes Symbols]]\")"
      },
      "date": 1642156987070
    },
    {
      "type": "edit",
      "id": "5e293153cb544a52",
      "item": {
        "type": "paragraph",
        "id": "5e293153cb544a52",
        "text": "Recognizable"
      },
      "date": 1642156991119
    },
    {
      "id": "ebd1e5a7aa907441",
      "type": "move",
      "order": [
        "37a311029e94c518",
        "aaeddfedb0a97b22",
        "bfb5602dec22d003",
        "88a48f17e648cc62",
        "2d63c499d4791948",
        "3925f84c8efe402d",
        "7158a2491cdbd65a",
        "4226811b4498d0fe",
        "e49e6d692a8d65d7",
        "97ba3bd76b476201",
        "4c6f3e53cd5782fe",
        "a45dc1bfda9dee8b",
        "c90e21384598bf5f",
        "4049a0f96cace96f",
        "f9472c1bc6ac09ae",
        "f84f2164c9db0d31",
        "eb3af37f211985b2",
        "a4580a0f97db9f2a",
        "2981bead464e2bf4",
        "90735ff160d28861",
        "c53c77643bed9854",
        "3573d9662f6ab12d",
        "a84f31ace7451dfe",
        "b2cf16c0e323697c",
        "d3653bf6c55d7d27",
        "57e1cb77464cb241",
        "e2ddd9e3098a2234",
        "11ec909a427abc98",
        "f3abf112ee1f494c",
        "627b0c54acad0314",
        "a329a80019d0d2dc",
        "b163d56ddae6772f",
        "c0082ac0d59a2d68",
        "22315ff605a508f4",
        "2e59809bf7f70e7a",
        "c567078ebfa10ead",
        "4b5b2711d0fcf520",
        "b921a767c2fa68d7",
        "fda1900d4f3a41b3",
        "4756315ede3cd3c5",
        "70863bb121e8fc8d",
        "aad1cf1bceb44bfc",
        "663dcf49f245800f",
        "9e70051ee34645db",
        "090b07738360c6ab",
        "46fb30a8c2f7490c",
        "c5b2a96ad0b9cbfd",
        "ebd1e5a7aa907441",
        "d56987c9d182747b",
        "562825f63aad3c90",
        "34aff99759e8b8dc",
        "ec28076581445386",
        "5e085ffb937fa7f2",
        "5e293153cb544a52",
        "37511c7a2f9345b7"
      ],
      "date": 1642157013632
    },
    {
      "item": {
        "type": "factory",
        "id": "01bd7959fec0eda5"
      },
      "id": "01bd7959fec0eda5",
      "type": "add",
      "after": "37511c7a2f9345b7",
      "date": 1642170418171
    },
    {
      "item": {
        "type": "factory",
        "id": "a19f9a67ed42d417"
      },
      "id": "a19f9a67ed42d417",
      "type": "add",
      "after": "01bd7959fec0eda5",
      "date": 1642170427868
    },
    {
      "type": "edit",
      "id": "01bd7959fec0eda5",
      "item": {
        "type": "pagefold",
        "id": "01bd7959fec0eda5",
        "text": "Biota\n"
      },
      "date": 1642170429145
    },
    {
      "type": "edit",
      "id": "a19f9a67ed42d417",
      "item": {
        "type": "paragraph",
        "id": "a19f9a67ed42d417",
        "text": "How to construct an instruction dispatch table from a method dictionary."
      },
      "date": 1642170440126
    },
    {
      "item": {
        "type": "factory",
        "id": "ad7715fde8e8fb9c"
      },
      "id": "ad7715fde8e8fb9c",
      "type": "add",
      "after": "a19f9a67ed42d417",
      "date": 1642171299189
    },
    {
      "type": "edit",
      "id": "ad7715fde8e8fb9c",
      "item": {
        "type": "paragraph",
        "id": "ad7715fde8e8fb9c",
        "text": "\"dispatch table pointer\"."
      },
      "date": 1642171302117
    },
    {
      "type": "edit",
      "id": "ad7715fde8e8fb9c",
      "item": {
        "type": "paragraph",
        "id": "ad7715fde8e8fb9c",
        "text": "\"dispatch table pointer\". [https://web.cecs.pdx.edu/~harry/musings/SmalltalkOverview.html page]"
      },
      "date": 1642171310833
    },
    {
      "item": {
        "type": "factory",
        "id": "7724c2754b52248b"
      },
      "id": "7724c2754b52248b",
      "type": "add",
      "after": "ad7715fde8e8fb9c",
      "date": 1642171316164
    },
    {
      "type": "edit",
      "id": "7724c2754b52248b",
      "item": {
        "type": "markdown",
        "id": "7724c2754b52248b",
        "text": "> \nAn object is like a C \"struct\" or a Pascal record. The only difference between a record and an object is that the object contains a single special field that identifies which class the object belongs to. In C++, Java, and Smalltalk, there is a single hidden field in every object. In Smalltalk, this field is called the \"class pointer.\" In other languages, this hidden field is called the \"V-table pointer\" or \"dispatch table pointer\". "
      },
      "date": 1642171321070
    },
    {
      "item": {
        "type": "factory",
        "id": "af13c3dbf74419f7"
      },
      "id": "af13c3dbf74419f7",
      "type": "add",
      "after": "7724c2754b52248b",
      "date": 1642171885102
    },
    {
      "type": "edit",
      "id": "af13c3dbf74419f7",
      "item": {
        "type": "pagefold",
        "id": "af13c3dbf74419f7",
        "text": "~"
      },
      "date": 1642171889079
    },
    {
      "item": {
        "type": "factory",
        "id": "3e370dbdc4433bd6"
      },
      "id": "3e370dbdc4433bd6",
      "type": "add",
      "after": "af13c3dbf74419f7",
      "date": 1642171892492
    },
    {
      "type": "edit",
      "id": "3e370dbdc4433bd6",
      "item": {
        "type": "paragraph",
        "id": "3e370dbdc4433bd6",
        "text": "https://youtu.be/8snpMHHbymI"
      },
      "date": 1642171898054
    },
    {
      "item": {
        "type": "factory",
        "id": "dbe4f30507b04aa3"
      },
      "id": "dbe4f30507b04aa3",
      "type": "add",
      "after": "3e370dbdc4433bd6",
      "date": 1642171939667
    },
    {
      "type": "edit",
      "id": "af13c3dbf74419f7",
      "item": {
        "type": "pagefold",
        "id": "af13c3dbf74419f7",
        "text": "FreedomBox"
      },
      "date": 1642171940757
    },
    {
      "type": "edit",
      "id": "dbe4f30507b04aa3",
      "item": {
        "type": "video",
        "id": "dbe4f30507b04aa3",
        "text": "YOUTUBE "
      },
      "date": 1642171945221
    },
    {
      "type": "edit",
      "id": "3e370dbdc4433bd6",
      "item": {
        "type": "paragraph",
        "id": "3e370dbdc4433bd6",
        "text": "https://youtu.be/"
      },
      "date": 1642171947755
    },
    {
      "type": "edit",
      "id": "dbe4f30507b04aa3",
      "item": {
        "type": "video",
        "id": "dbe4f30507b04aa3",
        "text": "YOUTUBE 8snpMHHbymI"
      },
      "date": 1642171951071
    },
    {
      "type": "remove",
      "id": "3e370dbdc4433bd6",
      "date": 1642171955399
    },
    {
      "type": "edit",
      "id": "dbe4f30507b04aa3",
      "item": {
        "type": "video",
        "id": "dbe4f30507b04aa3",
        "text": "YOUTUBE 8snpMHHbymI\nThe easiest and fastest way to install Matrix Synapse: use FreedomBox"
      },
      "date": 1642171966514
    },
    {
      "item": {
        "type": "factory",
        "id": "cb852930a224cd8e"
      },
      "id": "cb852930a224cd8e",
      "type": "add",
      "after": "dbe4f30507b04aa3",
      "date": 1642172001452
    },
    {
      "type": "edit",
      "id": "cb852930a224cd8e",
      "item": {
        "type": "paragraph",
        "id": "cb852930a224cd8e",
        "text": "https://wiki.debian.org/FreedomBox/Manual/MatrixSynapse"
      },
      "date": 1642172003490
    },
    {
      "type": "edit",
      "id": "cb852930a224cd8e",
      "item": {
        "type": "markdown",
        "id": "cb852930a224cd8e",
        "text": "https://wiki.debian.org/FreedomBox/Manual/MatrixSynapse"
      },
      "date": 1642172006618
    },
    {
      "id": "cb852930a224cd8e",
      "type": "move",
      "order": [
        "37a311029e94c518",
        "aaeddfedb0a97b22",
        "bfb5602dec22d003",
        "88a48f17e648cc62",
        "2d63c499d4791948",
        "3925f84c8efe402d",
        "7158a2491cdbd65a",
        "4226811b4498d0fe",
        "e49e6d692a8d65d7",
        "97ba3bd76b476201",
        "4c6f3e53cd5782fe",
        "a45dc1bfda9dee8b",
        "c90e21384598bf5f",
        "4049a0f96cace96f",
        "f9472c1bc6ac09ae",
        "f84f2164c9db0d31",
        "eb3af37f211985b2",
        "a4580a0f97db9f2a",
        "2981bead464e2bf4",
        "90735ff160d28861",
        "c53c77643bed9854",
        "3573d9662f6ab12d",
        "a84f31ace7451dfe",
        "b2cf16c0e323697c",
        "d3653bf6c55d7d27",
        "57e1cb77464cb241",
        "e2ddd9e3098a2234",
        "11ec909a427abc98",
        "f3abf112ee1f494c",
        "627b0c54acad0314",
        "a329a80019d0d2dc",
        "b163d56ddae6772f",
        "c0082ac0d59a2d68",
        "22315ff605a508f4",
        "2e59809bf7f70e7a",
        "c567078ebfa10ead",
        "4b5b2711d0fcf520",
        "b921a767c2fa68d7",
        "fda1900d4f3a41b3",
        "4756315ede3cd3c5",
        "70863bb121e8fc8d",
        "aad1cf1bceb44bfc",
        "663dcf49f245800f",
        "9e70051ee34645db",
        "090b07738360c6ab",
        "46fb30a8c2f7490c",
        "c5b2a96ad0b9cbfd",
        "ebd1e5a7aa907441",
        "d56987c9d182747b",
        "562825f63aad3c90",
        "34aff99759e8b8dc",
        "ec28076581445386",
        "5e085ffb937fa7f2",
        "5e293153cb544a52",
        "37511c7a2f9345b7",
        "01bd7959fec0eda5",
        "a19f9a67ed42d417",
        "ad7715fde8e8fb9c",
        "7724c2754b52248b",
        "af13c3dbf74419f7",
        "cb852930a224cd8e",
        "dbe4f30507b04aa3"
      ],
      "date": 1642172008191
    },
    {
      "item": {
        "type": "factory",
        "id": "494b9ce23d2e767c"
      },
      "id": "494b9ce23d2e767c",
      "type": "add",
      "after": "dbe4f30507b04aa3",
      "date": 1642172034215
    },
    {
      "type": "edit",
      "id": "494b9ce23d2e767c",
      "item": {
        "type": "paragraph",
        "id": "494b9ce23d2e767c",
        "text": "https://matrix.org/faq/"
      },
      "date": 1642172036998
    },
    {
      "type": "edit",
      "id": "494b9ce23d2e767c",
      "item": {
        "type": "paragraph",
        "id": "494b9ce23d2e767c",
        "text": "[https://matrix.org/faq/ faq]"
      },
      "date": 1642172047472
    },
    {
      "type": "edit",
      "id": "494b9ce23d2e767c",
      "item": {
        "type": "paragraph",
        "id": "494b9ce23d2e767c",
        "text": "Matrix [https://matrix.org/faq/ faq]"
      },
      "date": 1642172058792
    }
  ]
}