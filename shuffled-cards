{
  "title": "Shuffled Cards",
  "story": [
    {
      "type": "paragraph",
      "id": "404cf083f07b2b57",
      "text": "Randomizing a list of integers in JavaScript is tricky. First there is the trick to get a list of integers and then a trick to shuffle it. [https://wiki.c2.com/?LinearShuffle c2]"
    },
    {
      "type": "markdown",
      "id": "00f76ff348892888",
      "text": "# Application Frame"
    },
    {
      "type": "frame",
      "id": "b74b8c12bda0a777",
      "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 30"
    },
    {
      "type": "paragraph",
      "id": "2b83956535395893",
      "text": "We need a function that displays the deck of cards in the Application Frame. We refer to this frame as a \"deck-container\"."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "// Function to emit HTML content for the deck container\nexport async function emit(el) {\n  el.innerHTML = `\n  <div id=\"deck-container\"></div>\n  <style>#deck-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)"
    },
    {
      "type": "markdown",
      "id": "2a53aeae1e6e865d",
      "text": "# linearShuffle"
    },
    {
      "type": "code",
      "id": "86d30b39cb4618af",
      "text": "  const deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  console.log(\"Original deck:\", deck);"
    },
    {
      "type": "code",
      "id": "b4344b4089be63c5",
      "text": "  const shuffle = linearShuffle(deck)",
      "alias": "27e88033d49e7c47"
    },
    {
      "type": "code",
      "id": "17aab5ec6cb79d53",
      "text": "  renderDeck(shuffle)\n  console.log(\"Shuffled deck:\", shuffle);"
    },
    {
      "type": "markdown",
      "id": "d44adad43c9706c8",
      "text": "**Note**: Comment out the following code block to see the output of the deck of cards version in the Application Frame at the top of this page."
    },
    {
      "type": "code",
      "id": "385e38ed4f32e9a8",
      "text": "  // Generate a random todo list with 10 items\n  const randomTodoList = generateRandomTodoList(10);\n  renderDeck(randomTodoList);\n  console.log(\"Random todo list:\", randomTodoList);"
    },
    {
      "type": "code",
      "id": "4f09bdab360247d8",
      "text": "} // End of bind "
    },
    {
      "type": "markdown",
      "id": "8cc12e8637a776da",
      "text": "# The Render Function"
    },
    {
      "type": "code",
      "id": "f60c71defbe486e0",
      "text": "// Function to render the deck in the deck container\nasync function renderDeck(deck) {\n\n    // Parse the JSON string into an object\n    // const deckObject = JSON.parse(deck);\n    const deckObject = deck;\n\n    // Select the deck container element\n    const deckContainer = document.getElementById('deck-container');\n    \n    // Render the deck in the deck container\n    deckContainer.innerHTML = `<pre>${JSON.stringify(deckObject)}</pre>`;\n}\n"
    },
    {
      "type": "markdown",
      "id": "add901ed424af270",
      "text": "# The linearShuffle Function"
    },
    {
      "type": "code",
      "id": "4f46952fb4a34d06",
      "text": "function linearShuffle(deck) {\n  for (let i = deck.length - 1; i > 0; i--) {\n    // Generate a random index between 0 and i (inclusive)\n    const j = Math.floor(Math.random() * (i + 1));\n\n    // Swap deck[i] with deck[j]\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n}"
    },
    {
      "type": "paragraph",
      "id": "dd79ad2cd8589f42",
      "text": "Is this an example of [[Destructuring Assignment]], a feature introduced in ES6 (ECMAScript 2015)? [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment mdn] [https://262.ecma-international.org/6.0/#sec-destructuring-assignment ecma]"
    },
    {
      "type": "paragraph",
      "id": "44e83184bdb8de88",
      "text": "How could we apply this to our [[Random Walk]] in the [[Speed Bot Journey]]?"
    },
    {
      "type": "paragraph",
      "id": "6a27c563b5aa90b7",
      "text": "We want to a watch a random todo list. "
    },
    {
      "type": "paragraph",
      "id": "b737af7a4d650550",
      "text": "We could:"
    },
    {
      "type": "paragraph",
      "id": "297f2eaeff6fc90e",
      "text": "1. Create an array of integers representing the todo list items."
    },
    {
      "type": "paragraph",
      "id": "fa0b2c4d119319dc",
      "text": "2. Shuffle the array to randomize the order of items."
    },
    {
      "type": "markdown",
      "id": "612e7f5909f14d30",
      "text": "# generateRandomTodoList"
    },
    {
      "type": "paragraph",
      "id": "9a89448973e432a8",
      "text": "Here's a function that could accomplish this:"
    },
    {
      "type": "code",
      "id": "8671fcbee044a6ed",
      "text": "function generateRandomTodoList(numItems) {\n  // Create an array of integers from 1 to numItems\n  const todoList = Array.from({ length: numItems }, (_, index) => index + 1);\n\n  // Shuffle the array\n  for (let i = todoList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [todoList[i], todoList[j]] = [todoList[j], todoList[i]];\n  }\n\n  return todoList;\n}\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Shuffled Cards",
        "story": []
      },
      "date": 1709091463513
    },
    {
      "id": "2b83956535395893",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the deck."
      },
      "after": "b74b8c12bda0a777",
      "attribution": {
        "page": "2024-02-28"
      },
      "date": 1709091473857
    },
    {
      "id": "5eb6b67568179aa3",
      "type": "add",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Function to emit HTML content for the deck container\nexport async function emit(el) {\n    el.innerHTML = `\n    <div id=\"deck-container\"></div>\n    <style>#deck-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)"
      },
      "after": "2b83956535395893",
      "attribution": {
        "page": "2024-02-28"
      },
      "date": 1709091483874
    },
    {
      "id": "2a53aeae1e6e865d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2a53aeae1e6e865d",
        "text": "linearShuffle"
      },
      "after": "5eb6b67568179aa3",
      "attribution": {
        "page": "2024-02-28"
      },
      "date": 1709091499345
    },
    {
      "id": "27e88033d49e7c47",
      "type": "add",
      "item": {
        "type": "code",
        "id": "27e88033d49e7c47",
        "text": "  const shuffle = linearShuffle(deck)"
      },
      "after": "86d30b39cb4618af",
      "attribution": {
        "page": "2024-02-28"
      },
      "date": 1709091508920
    },
    {
      "id": "4f09bdab360247d8",
      "type": "add",
      "item": {
        "type": "code",
        "id": "4f09bdab360247d8",
        "text": "}"
      },
      "after": "17aab5ec6cb79d53",
      "attribution": {
        "page": "2024-02-28"
      },
      "date": 1709091516062
    },
    {
      "id": "f60c71defbe486e0",
      "type": "add",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "// Function to render the deck in the deck container\nasync function renderDeck(deck) {\n\n    // Parse the JSON string into an object\n    // const deckObject = JSON.parse(deck);\n    const deckObject = deck;\n\n    // Select the deck container element\n    const deckContainer = document.getElementById('deck-container');\n    \n    // Render the deck in the deck container\n    deckContainer.innerHTML = `<pre>${JSON.stringify(deckObject)}</pre>`; // Pretty print the JSON\n}\n"
      },
      "after": "4f09bdab360247d8",
      "attribution": {
        "page": "2024-02-28"
      },
      "date": 1709091519956
    },
    {
      "id": "4f46952fb4a34d06",
      "type": "add",
      "item": {
        "type": "code",
        "id": "4f46952fb4a34d06",
        "text": "function linearShuffle(deck) {\n    for (let i = deck.length - 1; i > 0; i--) {\n        // Generate a random index between 0 and i (inclusive)\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // Swap deck[i] with deck[j]\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    return deck;\n}"
      },
      "after": "f60c71defbe486e0",
      "attribution": {
        "page": "2024-02-28"
      },
      "date": 1709091525613
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709091835118
    },
    {
      "id": "b74b8c12bda0a777",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "b74b8c12bda0a777",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 75"
      },
      "attribution": {
        "page": "2024-02-28",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709091865767
    },
    {
      "id": "2b83956535395893",
      "type": "move",
      "order": [
        "b74b8c12bda0a777",
        "2b83956535395893",
        "4f09bdab360247d8",
        "f60c71defbe486e0",
        "4f46952fb4a34d06",
        "27e88033d49e7c47",
        "5eb6b67568179aa3",
        "2a53aeae1e6e865d"
      ],
      "date": 1709091881629
    },
    {
      "id": "5eb6b67568179aa3",
      "type": "move",
      "order": [
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "4f09bdab360247d8",
        "f60c71defbe486e0",
        "4f46952fb4a34d06",
        "27e88033d49e7c47",
        "2a53aeae1e6e865d"
      ],
      "date": 1709091896913
    },
    {
      "id": "2a53aeae1e6e865d",
      "type": "move",
      "order": [
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "2a53aeae1e6e865d",
        "4f09bdab360247d8",
        "f60c71defbe486e0",
        "4f46952fb4a34d06",
        "27e88033d49e7c47"
      ],
      "date": 1709091940225
    },
    {
      "id": "86d30b39cb4618af",
      "type": "add",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "  const deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  console.log(\"Original deck:\", deck);"
      },
      "after": "2a53aeae1e6e865d",
      "attribution": {
        "page": "2024-02-28",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709091957494
    },
    {
      "id": "b4344b4089be63c5",
      "type": "add",
      "item": {
        "type": "code",
        "id": "b4344b4089be63c5",
        "text": "  const shuffle = linearShuffle(deck)",
        "alias": "27e88033d49e7c47"
      },
      "after": "86d30b39cb4618af",
      "attribution": {
        "page": "2024-02-28",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709091968748
    },
    {
      "id": "17aab5ec6cb79d53",
      "type": "add",
      "item": {
        "type": "code",
        "id": "17aab5ec6cb79d53",
        "text": "  renderDeck(shuffle)\n  console.log(\"Shuffled deck:\", shuffle);"
      },
      "after": "b4344b4089be63c5",
      "attribution": {
        "page": "2024-02-28",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709091975341
    },
    {
      "type": "remove",
      "id": "27e88033d49e7c47",
      "date": 1709092027293
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709092079036
    },
    {
      "id": "404cf083f07b2b57",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "404cf083f07b2b57",
        "text": "[…]: to make his partition script operate in a random order Ward replaced a for loop with a while loop watching a random todo list. Randomizing a list of integers in javascript is tricky. First there is the trick to get a list of integers and then a trick to shuffle it. [https://wiki.c2.com/?LinearShuffle c2]"
      },
      "attribution": {
        "page": "2024-02-27"
      },
      "date": 1709092217510
    },
    {
      "type": "edit",
      "id": "404cf083f07b2b57",
      "item": {
        "type": "paragraph",
        "id": "404cf083f07b2b57",
        "text": "Randomizing a list of integers in javascript is tricky. First there is the trick to get a list of integers and then a trick to shuffle it. [https://wiki.c2.com/?LinearShuffle c2]"
      },
      "date": 1709092223436
    },
    {
      "type": "edit",
      "id": "404cf083f07b2b57",
      "item": {
        "type": "paragraph",
        "id": "404cf083f07b2b57",
        "text": "Randomizing a list of integers in Javascript is tricky. First there is the trick to get a list of integers and then a trick to shuffle it. [https://wiki.c2.com/?LinearShuffle c2]"
      },
      "date": 1709092252345
    },
    {
      "type": "edit",
      "id": "4f09bdab360247d8",
      "item": {
        "type": "code",
        "id": "4f09bdab360247d8",
        "text": "} // End of bind "
      },
      "date": 1709092343253
    },
    {
      "type": "edit",
      "id": "4f46952fb4a34d06",
      "item": {
        "type": "code",
        "id": "4f46952fb4a34d06",
        "text": "function linearShuffle(deck) {\n    for (let i = deck.length - 1; i > 0; i--) {\n        // Generate a random index between 0 and i (inclusive)\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // Swap deck[i] with deck[j]\n        const temp = deck[i];\n        deck[i] = deck[j];\n        deck[j] = temp;\n    }\n    return deck;\n}\n"
      },
      "date": 1709092710052
    },
    {
      "type": "fork",
      "date": 1709093066893
    },
    {
      "item": {
        "type": "factory",
        "id": "dd79ad2cd8589f42"
      },
      "id": "dd79ad2cd8589f42",
      "type": "add",
      "after": "4f46952fb4a34d06",
      "date": 1709093092544
    },
    {
      "type": "edit",
      "id": "dd79ad2cd8589f42",
      "item": {
        "type": "paragraph",
        "id": "dd79ad2cd8589f42",
        "text": "Is this an example for destructuring assignment, a feature introduced in ES6 (ECMAScript 2015)?"
      },
      "date": 1709093120637
    },
    {
      "type": "edit",
      "id": "dd79ad2cd8589f42",
      "item": {
        "type": "paragraph",
        "id": "dd79ad2cd8589f42",
        "text": "Is this an example of destructuring assignment, a feature introduced in ES6 (ECMAScript 2015)?"
      },
      "date": 1709093152401
    },
    {
      "type": "edit",
      "id": "dd79ad2cd8589f42",
      "item": {
        "type": "paragraph",
        "id": "dd79ad2cd8589f42",
        "text": "Is this an example of destructuring assignment, a feature introduced in ES6 (ECMAScript 2015)? [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment mdn]"
      },
      "date": 1709093185548
    },
    {
      "type": "edit",
      "id": "dd79ad2cd8589f42",
      "item": {
        "type": "paragraph",
        "id": "dd79ad2cd8589f42",
        "text": "Is this an example of [[Destructuring Assignment]], a feature introduced in ES6 (ECMAScript 2015)? [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment mdn]"
      },
      "date": 1709093305187
    },
    {
      "type": "edit",
      "id": "dd79ad2cd8589f42",
      "item": {
        "type": "paragraph",
        "id": "dd79ad2cd8589f42",
        "text": "Is this an example of [[Destructuring Assignment]], a feature introduced in ES6 (ECMAScript 2015)? [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment mdn] [https://262.ecma-international.org/6.0/#sec-destructuring-assignment ecma]"
      },
      "date": 1709093466693
    },
    {
      "type": "edit",
      "id": "4f46952fb4a34d06",
      "item": {
        "type": "code",
        "id": "4f46952fb4a34d06",
        "text": "unction linearShuffle(deck) {\n    for (let i = deck.length - 1; i > 0; i--) {\n        // Generate a random index between 0 and i (inclusive)\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // Swap deck[i] with deck[j]\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    return deck;\n}"
      },
      "date": 1709093546217
    },
    {
      "type": "edit",
      "id": "4f46952fb4a34d06",
      "item": {
        "type": "code",
        "id": "4f46952fb4a34d06",
        "text": "function linearShuffle(deck) {\n    for (let i = deck.length - 1; i > 0; i--) {\n        // Generate a random index between 0 and i (inclusive)\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // Swap deck[i] with deck[j]\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    return deck;\n}"
      },
      "date": 1709093631821
    },
    {
      "item": {
        "type": "factory",
        "id": "44e83184bdb8de88"
      },
      "id": "44e83184bdb8de88",
      "type": "add",
      "after": "dd79ad2cd8589f42",
      "date": 1709094299168
    },
    {
      "type": "edit",
      "id": "44e83184bdb8de88",
      "item": {
        "type": "paragraph",
        "id": "44e83184bdb8de88",
        "text": "How could we apply this to our random walk in the [[Speed Bot Journey]]?"
      },
      "date": 1709094301277
    },
    {
      "type": "edit",
      "id": "44e83184bdb8de88",
      "item": {
        "type": "paragraph",
        "id": "44e83184bdb8de88",
        "text": "How could we apply this to our [[Random Walk]] in the [[Speed Bot Journey]]?"
      },
      "date": 1709094327637
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "// Function to render the deck in the deck container\nasync function renderDeck(deck) {\n\n    // Parse the JSON string into an object\n    // const deckObject = JSON.parse(deck);\n    const deckObject = deck;\n\n    // Select the deck container element\n    const deckContainer = document.getElementById('deck-container');\n    \n    // Render the deck in the deck container\n    deckContainer.innerHTML = `<pre>${JSON.stringify(deckObject)}</pre>`;\n}\n"
      },
      "date": 1709095058648
    },
    {
      "type": "edit",
      "id": "4f46952fb4a34d06",
      "item": {
        "type": "code",
        "id": "4f46952fb4a34d06",
        "text": "function linearShuffle(deck) {\n  for (let i = deck.length - 1; i > 0; i--) {\n    // Generate a random index between 0 and i (inclusive)\n    const j = Math.floor(Math.random() * (i + 1));\n\n    // Swap deck[i] with deck[j]\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n}"
      },
      "date": 1709095139261
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Function to emit HTML content for the deck container\nexport async function emit(el) {\n  el.innerHTML = `\n  <div id=\"deck-container\"></div>\n  <style>#deck-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)"
      },
      "date": 1709095245438
    },
    {
      "type": "edit",
      "id": "2b83956535395893",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the deck of cards."
      },
      "date": 1709095291248
    },
    {
      "type": "edit",
      "id": "404cf083f07b2b57",
      "item": {
        "type": "paragraph",
        "id": "404cf083f07b2b57",
        "text": "Randomizing a list of integers in JavaScript is tricky. First there is the trick to get a list of integers and then a trick to shuffle it. [https://wiki.c2.com/?LinearShuffle c2]"
      },
      "date": 1709095552634
    },
    {
      "type": "add",
      "id": "6a27c563b5aa90b7",
      "item": {
        "type": "paragraph",
        "id": "6a27c563b5aa90b7",
        "text": "We want to a watch a random todo list. "
      },
      "after": "44e83184bdb8de88",
      "date": 1709095641250
    },
    {
      "item": {
        "type": "factory",
        "id": "b737af7a4d650550"
      },
      "id": "b737af7a4d650550",
      "type": "add",
      "after": "6a27c563b5aa90b7",
      "date": 1709095670627
    },
    {
      "type": "fork",
      "date": 1709095692301
    },
    {
      "type": "edit",
      "id": "b737af7a4d650550",
      "item": {
        "type": "paragraph",
        "id": "b737af7a4d650550",
        "text": "To generate a randomized todo list in JavaScript, you can follow these steps:"
      },
      "date": 1709095700936
    },
    {
      "type": "add",
      "id": "297f2eaeff6fc90e",
      "item": {
        "type": "paragraph",
        "id": "297f2eaeff6fc90e",
        "text": "1. Create an array of integers representing the todo list items."
      },
      "after": "b737af7a4d650550",
      "date": 1709095707167
    },
    {
      "type": "add",
      "id": "fa0b2c4d119319dc",
      "item": {
        "type": "paragraph",
        "id": "fa0b2c4d119319dc",
        "text": "2. Shuffle the array to randomize the order of items.\nHere's a function that accomplishes this:"
      },
      "after": "297f2eaeff6fc90e",
      "date": 1709095707684
    },
    {
      "type": "edit",
      "id": "fa0b2c4d119319dc",
      "item": {
        "type": "paragraph",
        "id": "fa0b2c4d119319dc",
        "text": "2. Shuffle the array to randomize the order of items."
      },
      "date": 1709095735946
    },
    {
      "type": "add",
      "id": "9a89448973e432a8",
      "item": {
        "type": "paragraph",
        "id": "9a89448973e432a8",
        "text": "Here's a function that accomplishes this:"
      },
      "after": "fa0b2c4d119319dc",
      "date": 1709095736790
    },
    {
      "item": {
        "type": "factory",
        "id": "8671fcbee044a6ed"
      },
      "id": "8671fcbee044a6ed",
      "type": "add",
      "after": "9a89448973e432a8",
      "date": 1709095743509
    },
    {
      "type": "edit",
      "id": "8671fcbee044a6ed",
      "item": {
        "type": "code",
        "id": "8671fcbee044a6ed",
        "text": "function generateRandomTodoList(numItems) {\n    // Create an array of integers from 1 to numItems\n    const todoList = Array.from({ length: numItems }, (_, index) => index + 1);\n\n    // Shuffle the array\n    for (let i = todoList.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [todoList[i], todoList[j]] = [todoList[j], todoList[i]];\n    }\n\n    return todoList;\n}\n\n// Generate a random todo list with 10 items\nconst randomTodoList = generateRandomTodoList(10);\nconsole.log(randomTodoList);\n"
      },
      "date": 1709095745846
    },
    {
      "type": "edit",
      "id": "8671fcbee044a6ed",
      "item": {
        "type": "code",
        "id": "8671fcbee044a6ed",
        "text": "function generateRandomTodoList(numItems) {\n  // Create an array of integers from 1 to numItems\n  const todoList = Array.from({ length: numItems }, (_, index) => index + 1);\n\n  // Shuffle the array\n  for (let i = todoList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [todoList[i], todoList[j]] = [todoList[j], todoList[i]];\n  }\n\n  return todoList;\n}\n\n// Generate a random todo list with 10 items\nconst randomTodoList = generateRandomTodoList(10);\nconsole.log(randomTodoList);\n"
      },
      "date": 1709095792712
    },
    {
      "type": "edit",
      "id": "b737af7a4d650550",
      "item": {
        "type": "paragraph",
        "id": "b737af7a4d650550",
        "text": "We could:"
      },
      "date": 1709095962663
    },
    {
      "type": "edit",
      "id": "9a89448973e432a8",
      "item": {
        "type": "paragraph",
        "id": "9a89448973e432a8",
        "text": "Here's a function that could accomplishes this:"
      },
      "date": 1709096038401
    },
    {
      "id": "385e38ed4f32e9a8",
      "type": "add",
      "item": {
        "type": "code",
        "id": "385e38ed4f32e9a8",
        "text": "const numItems = 10;\nrenderDeck(generateRandomTodoList(numItems));"
      },
      "after": "17aab5ec6cb79d53",
      "attribution": {
        "page": "scratch"
      },
      "date": 1709096190794
    },
    {
      "type": "add",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "paragraph",
        "id": "d44adad43c9706c8",
        "text": "Note:"
      },
      "after": "2a53aeae1e6e865d",
      "date": 1709096494723
    },
    {
      "id": "d44adad43c9706c8",
      "type": "move",
      "order": [
        "404cf083f07b2b57",
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "2a53aeae1e6e865d",
        "86d30b39cb4618af",
        "b4344b4089be63c5",
        "17aab5ec6cb79d53",
        "d44adad43c9706c8",
        "385e38ed4f32e9a8",
        "4f09bdab360247d8",
        "f60c71defbe486e0",
        "4f46952fb4a34d06",
        "dd79ad2cd8589f42",
        "44e83184bdb8de88",
        "6a27c563b5aa90b7",
        "b737af7a4d650550",
        "297f2eaeff6fc90e",
        "fa0b2c4d119319dc",
        "9a89448973e432a8",
        "8671fcbee044a6ed"
      ],
      "date": 1709096498020
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "paragraph",
        "id": "d44adad43c9706c8",
        "text": "Note: Comment out the following code block to see the deck of cards version."
      },
      "date": 1709096625421
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "paragraph",
        "id": "d44adad43c9706c8",
        "text": "Note: Comment out the following code block to see the previous deck of cards version."
      },
      "date": 1709096707458
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "paragraph",
        "id": "d44adad43c9706c8",
        "text": "Note: Comment out the following code block to see the output of previous deck of cards version in the frame on top of this page."
      },
      "date": 1709096767956
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "paragraph",
        "id": "d44adad43c9706c8",
        "text": "Note: Comment out the following code block to see the output of previous deck of cards version in the frame at top of this page."
      },
      "date": 1709096780927
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "paragraph",
        "id": "d44adad43c9706c8",
        "text": "Note: Comment out the following code block to see the output of previous deck of cards version in the frame at the top of this page."
      },
      "date": 1709096786877
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "paragraph",
        "id": "d44adad43c9706c8",
        "text": "Note: Comment out the following code block to see the output of the previous deck of cards version in the frame at the top of this page."
      },
      "date": 1709096804806
    },
    {
      "type": "edit",
      "id": "8671fcbee044a6ed",
      "item": {
        "type": "code",
        "id": "8671fcbee044a6ed",
        "text": "function generateRandomTodoList(numItems) {\n  // Create an array of integers from 1 to numItems\n  const todoList = Array.from({ length: numItems }, (_, index) => index + 1);\n\n  // Shuffle the array\n  for (let i = todoList.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [todoList[i], todoList[j]] = [todoList[j], todoList[i]];\n  }\n\n  return todoList;\n}\n"
      },
      "date": 1709096870727
    },
    {
      "type": "edit",
      "id": "385e38ed4f32e9a8",
      "item": {
        "type": "code",
        "id": "385e38ed4f32e9a8",
        "text": "  // Generate a random todo list with 10 items\n  const randomTodoList = generateRandomTodoList(10);\n  renderDeck(randomTodoList);\n  console.log(randomTodoList);"
      },
      "date": 1709096949912
    },
    {
      "type": "edit",
      "id": "385e38ed4f32e9a8",
      "item": {
        "type": "code",
        "id": "385e38ed4f32e9a8",
        "text": "  // Generate a random todo list with 10 items\n  const randomTodoList = generateRandomTodoList(10);\n  renderDeck(randomTodoList);\n  console.log(\"Random todo list:\", randomTodoList);"
      },
      "date": 1709097288110
    },
    {
      "type": "edit",
      "id": "b74b8c12bda0a777",
      "item": {
        "type": "frame",
        "id": "b74b8c12bda0a777",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 50"
      },
      "date": 1709097439551
    },
    {
      "type": "edit",
      "id": "b74b8c12bda0a777",
      "item": {
        "type": "frame",
        "id": "b74b8c12bda0a777",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 25"
      },
      "date": 1709097450980
    },
    {
      "type": "edit",
      "id": "b74b8c12bda0a777",
      "item": {
        "type": "frame",
        "id": "b74b8c12bda0a777",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 30"
      },
      "date": 1709097481285
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709100428394
    },
    {
      "type": "edit",
      "id": "9a89448973e432a8",
      "item": {
        "type": "paragraph",
        "id": "9a89448973e432a8",
        "text": "Here's a function that could accomplish this:"
      },
      "date": 1709100680905
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709100744863
    },
    {
      "type": "add",
      "id": "00f76ff348892888",
      "item": {
        "type": "paragraph",
        "id": "00f76ff348892888",
        "text": "Application frame"
      },
      "after": "404cf083f07b2b57",
      "date": 1709101151385
    },
    {
      "type": "edit",
      "id": "00f76ff348892888",
      "item": {
        "type": "paragraph",
        "id": "00f76ff348892888",
        "text": "Application Frame"
      },
      "date": 1709101183283
    },
    {
      "type": "edit",
      "id": "2b83956535395893",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the deck of cards in the Application Frame."
      },
      "date": 1709101205651
    },
    {
      "type": "add",
      "id": "612e7f5909f14d30",
      "item": {
        "type": "paragraph",
        "id": "612e7f5909f14d30",
        "text": "# generateRandomTodoList"
      },
      "after": "fa0b2c4d119319dc",
      "date": 1709101249335
    },
    {
      "type": "edit",
      "id": "612e7f5909f14d30",
      "item": {
        "type": "markdown",
        "id": "612e7f5909f14d30",
        "text": "# generateRandomTodoList"
      },
      "date": 1709101250903
    },
    {
      "type": "edit",
      "id": "2a53aeae1e6e865d",
      "item": {
        "type": "paragraph",
        "id": "2a53aeae1e6e865d",
        "text": "# linearShuffle"
      },
      "date": 1709101269622
    },
    {
      "type": "edit",
      "id": "2a53aeae1e6e865d",
      "item": {
        "type": "markdown",
        "id": "2a53aeae1e6e865d",
        "text": "# linearShuffle"
      },
      "date": 1709101271230
    },
    {
      "type": "edit",
      "id": "00f76ff348892888",
      "item": {
        "type": "paragraph",
        "id": "00f76ff348892888",
        "text": "# Application Frame"
      },
      "date": 1709101276268
    },
    {
      "type": "edit",
      "id": "00f76ff348892888",
      "item": {
        "type": "markdown",
        "id": "00f76ff348892888",
        "text": "# Application Frame"
      },
      "date": 1709101277669
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "paragraph",
        "id": "d44adad43c9706c8",
        "text": "**Note**: Comment out the following code block to see the output of the previous deck of cards version in the frame at the top of this page."
      },
      "date": 1709101313997
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "markdown",
        "id": "d44adad43c9706c8",
        "text": "**Note**: Comment out the following code block to see the output of the previous deck of cards version in the frame at the top of this page."
      },
      "date": 1709101316634
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "markdown",
        "id": "d44adad43c9706c8",
        "text": "**Note**: Comment out the following code block to see the output of the deck of cards version in the frame at the top of this page."
      },
      "date": 1709101339552
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "markdown",
        "id": "d44adad43c9706c8",
        "text": "**Note**: Comment out the following code block to see the output of the deck of cards version in the in the Application Frame at the top of this page."
      },
      "date": 1709101358432
    },
    {
      "type": "edit",
      "id": "d44adad43c9706c8",
      "item": {
        "type": "markdown",
        "id": "d44adad43c9706c8",
        "text": "**Note**: Comment out the following code block to see the output of the deck of cards version in the Application Frame at the top of this page."
      },
      "date": 1709101389992
    },
    {
      "id": "add901ed424af270",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "add901ed424af270",
        "text": "# The linearShuffle Function"
      },
      "after": "f60c71defbe486e0",
      "attribution": {
        "page": "scratch"
      },
      "date": 1709101460119
    },
    {
      "id": "8cc12e8637a776da",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "8cc12e8637a776da",
        "text": "# The Render Function"
      },
      "after": "4f09bdab360247d8",
      "attribution": {
        "page": "scratch"
      },
      "date": 1709101506848
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709101563174
    },
    {
      "type": "edit",
      "id": "2b83956535395893",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the deck of cards in the Application Frame. "
      },
      "date": 1709101796538
    },
    {
      "type": "edit",
      "id": "2b83956535395893",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the deck of cards in the Application Frame. We refer to this frame as a deck container."
      },
      "date": 1709101817393
    },
    {
      "type": "edit",
      "id": "2b83956535395893",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the deck of cards in the Application Frame. We refer to this frame as a \"deck-container\"."
      },
      "date": 1709101842549
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709101884309
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709191942004
    }
  ]
}