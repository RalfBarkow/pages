{
  "title": "Make HTTP Requests in Elm",
  "story": [
    {
      "type": "paragraph",
      "id": "66ee39d803544bf1",
      "text": "Following the example of [[James Vaughan]] ( [https://jamesbvaughan.com/elm-http-requests/ post], [https://github.com/RalfBarkow/vite-elm-dojo/commit/a29b628a72fbc8f697f8d7eafd59a0909df8a56b commit]) we replace the RandomCat [https://publicapis.io/random-cat-animals-api page] url with [https://wiki.ralfbarkow.ch/2023-05-27.json https://wiki.ralfbarkow.ch/2023-05-27.json]:"
    },
    {
      "type": "code",
      "id": "8d685d74770f4eac",
      "text": "-        { url = \"https://aws.random.cat/meow\"\n+        { url = \"https://wiki.ralfbarkow.ch/2023-05-27.json\"\n"
    },
    {
      "type": "paragraph",
      "id": "28e90128d5dd0160",
      "text": "and get the message:"
    },
    {
      "type": "code",
      "id": "c79f47283778ee37",
      "text": "GotResult Err …\n0 = BadBody \"Problem... `file`\""
    },
    {
      "type": "paragraph",
      "id": "b85691cbef92d934",
      "text": "We refactor:"
    },
    {
      "type": "code",
      "id": "354dd680fc77f7f7",
      "text": "-        , expect = Http.expectJson GotResult (field \"file\" string)\n+        , expect = Http.expectJson GotResult (field \"title\" string)\n"
    },
    {
      "type": "paragraph",
      "id": "86fb559e52630967",
      "text": "Note: We opened [https://wiki.ralfbarkow.ch/2023-05-27.json https://wiki.ralfbarkow.ch/2023-05-27.json] and found that the name of the first field is title."
    },
    {
      "type": "pagefold",
      "id": "f107b341bd2d1238",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "b73dde182470bd6c",
      "text": "VAUGHAN, James, 2018. How To Make HTTP Requests In Elm. [https://jamesbvaughan.com/elm-http-requests/ post] [[Elm]] is a language designed for building reliable and robust frontend applications. Its purely functional nature makes it a great language for frontend developers who want to get some exposure to functional programming.\nI think Elm is great, but some of the concepts and patterns commonly used in Elm applications really confused me when I was first learning about it. I’m hoping that these posts will help others who are in that situation.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Make HTTP Requests in Elm",
        "story": []
      },
      "date": 1685180837610
    },
    {
      "id": "66ee39d803544bf1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "66ee39d803544bf1",
        "text": "Following the example of James, we replace the RandomCat [https://publicapis.io/random-cat-animals-api page] url with [https://wiki.ralfbarkow.ch/2023-05-27.json https://wiki.ralfbarkow.ch/2023-05-27.json]:"
      },
      "attribution": {
        "page": "2023-05-27"
      },
      "date": 1685180842305
    },
    {
      "id": "8d685d74770f4eac",
      "type": "add",
      "item": {
        "type": "code",
        "id": "8d685d74770f4eac",
        "text": "-        { url = \"https://aws.random.cat/meow\"\n+        { url = \"https://wiki.ralfbarkow.ch/2023-05-27.json\"\n"
      },
      "after": "66ee39d803544bf1",
      "attribution": {
        "page": "2023-05-27"
      },
      "date": 1685180845002
    },
    {
      "id": "28e90128d5dd0160",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "28e90128d5dd0160",
        "text": "and get the message:"
      },
      "after": "8d685d74770f4eac",
      "attribution": {
        "page": "2023-05-27"
      },
      "date": 1685180846796
    },
    {
      "id": "c79f47283778ee37",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c79f47283778ee37",
        "text": "GotResult Err …\n0 = BadBody \"Problem... `file`\""
      },
      "after": "28e90128d5dd0160",
      "attribution": {
        "page": "2023-05-27"
      },
      "date": 1685180848543
    },
    {
      "id": "b85691cbef92d934",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b85691cbef92d934",
        "text": "We refactor:"
      },
      "after": "c79f47283778ee37",
      "attribution": {
        "page": "2023-05-27"
      },
      "date": 1685180852198
    },
    {
      "id": "354dd680fc77f7f7",
      "type": "add",
      "item": {
        "type": "code",
        "id": "354dd680fc77f7f7",
        "text": "-        , expect = Http.expectJson GotResult (field \"file\" string)\n+        , expect = Http.expectJson GotResult (field \"title\" string)\n"
      },
      "after": "c79f47283778ee37",
      "attribution": {
        "page": "2023-05-27"
      },
      "date": 1685180854726
    },
    {
      "id": "b85691cbef92d934",
      "type": "move",
      "order": [
        "66ee39d803544bf1",
        "8d685d74770f4eac",
        "28e90128d5dd0160",
        "c79f47283778ee37",
        "b85691cbef92d934",
        "354dd680fc77f7f7"
      ],
      "date": 1685180856613,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1685181392337
    },
    {
      "id": "86fb559e52630967",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "86fb559e52630967",
        "text": "Note: We opened [https://wiki.ralfbarkow.ch/2023-05-27.json https://wiki.ralfbarkow.ch/2023-05-27.json] and found that the name of the first field is title."
      },
      "after": "354dd680fc77f7f7",
      "date": 1685181601751
    },
    {
      "item": {
        "type": "factory",
        "id": "f107b341bd2d1238"
      },
      "id": "f107b341bd2d1238",
      "type": "add",
      "after": "86fb559e52630967",
      "date": 1685181666107
    },
    {
      "type": "edit",
      "id": "f107b341bd2d1238",
      "item": {
        "type": "pagefold",
        "id": "f107b341bd2d1238",
        "text": "~"
      },
      "date": 1685181668350
    },
    {
      "id": "b73dde182470bd6c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b73dde182470bd6c",
        "text": "VAUGHAN, James, 2018. How To Make HTTP Requests In Elm. [https://jamesbvaughan.com/elm-http-requests/ post] [[Elm]] is a language designed for building reliable and robust frontend applications. Its purely functional nature makes it a great language for frontend developers who want to get some exposure to functional programming.\nI think Elm is great, but some of the concepts and patterns commonly used in Elm applications really confused me when I was first learning about it. I’m hoping that these posts will help others who are in that situation.\n"
      },
      "after": "f107b341bd2d1238",
      "date": 1685181672227
    },
    {
      "type": "edit",
      "id": "66ee39d803544bf1",
      "item": {
        "type": "paragraph",
        "id": "66ee39d803544bf1",
        "text": "Following the example of James [https://jamesbvaughan.com/elm-http-requests/ post], we replace the RandomCat [https://publicapis.io/random-cat-animals-api page] url with [https://wiki.ralfbarkow.ch/2023-05-27.json https://wiki.ralfbarkow.ch/2023-05-27.json]:"
      },
      "date": 1685181750103
    },
    {
      "type": "edit",
      "id": "66ee39d803544bf1",
      "item": {
        "type": "paragraph",
        "id": "66ee39d803544bf1",
        "text": "Following the example of James [https://jamesbvaughan.com/elm-http-requests/ post] [https://github.com/RalfBarkow/vite-elm-dojo/commit/a29b628a72fbc8f697f8d7eafd59a0909df8a56b commit], we replace the RandomCat [https://publicapis.io/random-cat-animals-api page] url with [https://wiki.ralfbarkow.ch/2023-05-27.json https://wiki.ralfbarkow.ch/2023-05-27.json]:"
      },
      "date": 1685181789433
    },
    {
      "type": "edit",
      "id": "66ee39d803544bf1",
      "item": {
        "type": "paragraph",
        "id": "66ee39d803544bf1",
        "text": "Following the example of [[James Vaughan]], [https://jamesbvaughan.com/elm-http-requests/ post] [https://github.com/RalfBarkow/vite-elm-dojo/commit/a29b628a72fbc8f697f8d7eafd59a0909df8a56b commit], we replace the RandomCat [https://publicapis.io/random-cat-animals-api page] url with [https://wiki.ralfbarkow.ch/2023-05-27.json https://wiki.ralfbarkow.ch/2023-05-27.json]:"
      },
      "date": 1685182701114
    },
    {
      "type": "edit",
      "id": "66ee39d803544bf1",
      "item": {
        "type": "paragraph",
        "id": "66ee39d803544bf1",
        "text": "Following the example of [[James Vaughan]] ( [https://jamesbvaughan.com/elm-http-requests/ post], [https://github.com/RalfBarkow/vite-elm-dojo/commit/a29b628a72fbc8f697f8d7eafd59a0909df8a56b commit]) we replace the RandomCat [https://publicapis.io/random-cat-animals-api page] url with [https://wiki.ralfbarkow.ch/2023-05-27.json https://wiki.ralfbarkow.ch/2023-05-27.json]:"
      },
      "date": 1685182720738
    }
  ]
}