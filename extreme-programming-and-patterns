{
  "title": "Extreme Programming And Patterns",
  "story": [
    {
      "type": "html",
      "text": "The XP literature (albeit tiny) says very very little about patterns.  It is as if these authors wanted to forget about the patterns movement.  So I wonder, what do folks think is the role of patterns within XP?  (and I'm not talking about the 2-3 patterns mentioned in Martin's Refactoring book). -- [[Joshua Kerievsky]]",
      "id": "4845d04335c3ce050edfcf7316fac961"
    },
    {
      "type": "html",
      "text": "<i>Considering Kent Beck and Ward Cunningham were two of the driving forces behind the patterns movement it seems unlikely the XP authors would want to forget about it.</i> -- [[Martijn Meijering]]",
      "id": "51938d745735616ffc428385a8eef422"
    },
    {
      "type": "html",
      "text": "\nNevertheless, in the XP process at present, patterns are like some very distant cousin.  Perhaps this has to do with the evolving understanding of the role of <b>Design</b> in XP (see [[Refactor Or Design]]). Or maybe the authors of XP are just scared that patterns will lead to all sorts of stuff that falls under [[You Arent Gonna Need It]]. -- [[Joshua Kerievsky]]",
      "id": "303c4f91378a81f23358eb13b8d668ca"
    },
    {
      "type": "html",
      "text": "<i>Patterns are not part of XP, but XPers certainly use patterns.  When refactoring code, one needs a direction in which to refactor -- a refactoring goal, so to speak.  Patterns are often good refactoring goals. -- [[Robert Cecil Martin]] 12/16/99, 23:29</i>",
      "id": "b1f498381bdb24495dba9a7f14dd9bd4"
    },
    {
      "type": "html",
      "text": "\nSo, Robert, let me re-phrase what you are saying: patterns are good refactoring goals and XPers use patterns -- however, patterns aren't part of XP.  Are you trying to sound like a Zen Master, Robert, or do you really think these kinds of proclamations will help people and teams?  ",
      "id": "7b0a2d0cc5e3793c44e7d4140a4f9757"
    },
    {
      "type": "html",
      "text": "<i>Yes, I really think this helps.  We don't include 'if' statements as a necessary part of XP, we don't include inheritance as a necessary part of XP, and we don't include design patterns as a necessary part of XP.  XP and Patterns are orthogonal concepts.  You can do XP without patterns, and you can use patterns without XP.</i>",
      "id": "4e4eff4d7267996cab5af389d3f6675f"
    },
    {
      "type": "html",
      "text": "<i>Having said that, I would expect any reasonably experienced XPer to be very conversant with patterns, and to employ them on a regular basis as refactoring targets.  -- [[Robert Cecil Martin]] 1/19/00 07:48</i>",
      "id": "4f90bdaed5f3acd19031aff6a31b5c88"
    },
    {
      "type": "html",
      "text": "\nWhy don't we simply say that the ideal XP team would be one in which both the Coach and his or her programmers know nothing about patterns. As refactorers, they will simply <i>let the code go where it wants to go</i> (as Ron says below) and their ignorance of patterns will not only not get in the way of their producing simple, effective code ([[Once And Only Once]], etc.), but this ignorance will actually <i>help them</i> produce this code. -- [[Joshua Kerievsky]]",
      "id": "b9390535631202b2327079ac1a53de9e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d0a0392e5288fa6f613043b50500ec7"
    },
    {
      "type": "html",
      "text": "\nPeople often ask me \"So do I need to learn Design Patterns to do XP?  Or should I just read the Refactoring book?\"",
      "id": "f0e5ddb237dea7a0e27d7ab76ec208b1"
    },
    {
      "type": "html",
      "text": "\nWell, considering that the Refactoring book touches on about 2-3 patterns (uh, Strategy and Template Method off the top of my head) what do you think my answer is?",
      "id": "de2ed0a2e14a93b6d426ede35b785acc"
    },
    {
      "type": "html",
      "text": "\nThe XP authors are struggling to put into words what they do. I'd argue that what they do involves a fairly good grasp of the patterns literature to date. Their knowledge of patterns steers them in refactoring.  So if they don't talk about pattern anymore, how do they expect XP teams to effectively refactor?  Is the XP philosophy to ignore time-honored, recurring solutions to problems?",
      "id": "652e1cf915e938ea1e0047b7f8a46740"
    },
    {
      "type": "html",
      "text": "-- [[Joshua Kerievsky]]",
      "id": "fdda0b0a32c7b6a36ae5b8e724a47ea0"
    },
    {
      "type": "html",
      "text": "\nSomewhere on these pages Ron Jeffries said that you should have the GOF patterns in your bag of tricks, but that you shouldn't reach too deep in it too soon. It is better to refactor a pattern into your design than to start with it. Ralph Johnson said something similar a couple of days ago on a newsgroup. The GOF book says that many patterns are natural endpoints for refactoring. -- [[Martijn Meijering]]",
      "id": "54f4e0d4979ee63631de3b91748190fb"
    },
    {
      "type": "html",
      "text": "\nTo you and me, the patterns are natural endpoints for refactoring.  To those who don't know patterns, they aren't.  Thus, newbie XPers, who lack knowledge of patterns, will have a hard time refactoring their code, especially since the current literature doesn't encourage them to learn patterns.  So let us [[Embrace Change]] and fix this. -- [[Joshua Kerievsky]]",
      "id": "32f2d1afcc73ea2f8ebc79046cd5d376"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d0a0392e5288fa6f613043b50500ec7"
    },
    {
      "type": "html",
      "text": "\nFor each Pattern, the GOF book presents two things: The skeleton without which you don't have the Pattern, and a bunch of illustrative stuff around the pattern that's a total candidate for [[You Arent Gonna Need It]]. So the correct procedure is to implement the skeleton (paying attention to things like adding the Pattern role names to class names), and deferring all the extras.",
      "id": "84a327dca399f0eee516050f8d942474"
    },
    {
      "type": "html",
      "text": "\nRemember that ways to arrange objects - like Pattern skeletons, the [[Dependency Inversion Principle]], method forwarding, & switch statement abstraction - are scaffolds to hang functionality on, not the functionality itself. Because [[You Arent Gonna Need It]] targets only functionality as dead weight that must be supported thru the iterations in which it adds no value, the skeleton of a Pattern is a Good Thing so long as it supports even a single crumb of functionality that you need right now. -- [[Phl Ip]]",
      "id": "167d2069cb6c9ebaa6bbb7c9a1656a4e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d0a0392e5288fa6f613043b50500ec7"
    },
    {
      "type": "html",
      "text": "\nTwo things:",
      "id": "eac1115bcc7cea786feeb2838653fc0f"
    },
    {
      "type": "html",
      "text": "\n1. Many programmers with patterns are small children with hammers. You can always tell when someone has just read GOF - they come in the next day wanting to put Composite somewhere.",
      "id": "0712540921b5ded2494870246c43161e"
    },
    {
      "type": "html",
      "text": "\nB. As Josh says, patterns are goals. They are somewhere the human wants to take the code. Refactoring is more like the human taking the code where it wants to go.",
      "id": "701e83aed325bee0c310d54f27d6519e"
    },
    {
      "type": "html",
      "text": "\nIn learning XP, many goals are frankly in the way. One is trying to strip oneself of preconceptions and get down to a quiet place where the truth of the code can be heard.",
      "id": "e83d459b9f8f13fc86018c03904645b7"
    },
    {
      "type": "html",
      "text": "\nThat said, patterns are a wonderful way to know a thing to do when, for a moment, one doesn't know what to do. They're a good tool to have, but a dangerous tool to want to use. Is this paradoxical? Then so be it. -- [[Ron Jeffries]]",
      "id": "d030a70dbc23784e9c88d7f574138fd9"
    },
    {
      "type": "html",
      "text": "\nTwo responses, Ron:",
      "id": "7736f58cef912598ab6a43917ade3714"
    },
    {
      "type": "html",
      "text": "\n1. Many programmers who get excited about XP, are like small children with hammers. You can always tell when programmers get excited about XP, because they start doing a few practices, like [[Pair Programming]] and Testing, and neglect to do the hard stuff, like getting the users fully involved in the XP process.  You and I both saw a team do this a few years ago, remember?",
      "id": "519f4e21b897d171a0901f4d9529c353"
    },
    {
      "type": "html",
      "text": "<i>Could it be that programmers who get excited about XP put the practices in where they can?  Sad to say but I have been on projects where programmers never met with the customer ( military projects ).</i>",
      "id": "481284a9df6ec253e3e65cd8b76e6c5b"
    },
    {
      "type": "html",
      "text": "\nB. Patterns are presentations of problems, consequences of problems, solutions to problems, variations on those solutions, and pointers to other patterns. The key to using patterns effectively, is knowing which problems they solve.  If you know that, you'll know when to refactor them into code. If you don't, many of your refactorings will fail to improve your code.",
      "id": "dc778ed9f6949554c1d48ec99678507b"
    },
    {
      "type": "html",
      "text": "\nTelling experienced folks to <i>let the code go where it wants to go</i> is wonderful.  Telling that to inexperienced folks will leave them scratching their heads, wondering what to do next. -- [[Joshua Kerievsky]]",
      "id": "4468ca947b9b741dbde157a1720d1846"
    },
    {
      "type": "html",
      "text": "<i>The motorcycle ... is almost impossible to understand unless you already know how one works.</i> -- [[Robert Pirsig]], [[Zen And The Art Of Motorcycle Maintenance]] ",
      "id": "2e7cfbcf77b823c3c373a2e9ff7fb5df"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d0a0392e5288fa6f613043b50500ec7"
    },
    {
      "type": "html",
      "text": "\nJosh asks, <i>Why don't we simply say that the ideal XP team would be one in which both the Coach and his or her programmers know nothing about patterns. As refactorers, they will simply </i>let the code go where it wants to go<i> (as Ron says below) and their ignorance of patterns will not only not get in the way of their producing simple, effective code ([[Once And Only Once]], etc.), but this ignorance will actually </i>help them<i> produce this code.</i>",
      "id": "95e63b6a93e615ed4c8a876fda6d41f9"
    },
    {
      "type": "html",
      "text": "\nI don't say that because I don't believe it. ",
      "id": "cdb0a7a7cf8a81b2a8509de44a690669"
    },
    {
      "type": "html",
      "text": "(It's my practice to say only what I believe, usually. But recall my motto \"How do I know what I think until I hear what I say?\") ",
      "id": "f8cbe486e91fe520fe6e6a71ff1fb09a"
    },
    {
      "type": "html",
      "text": "<i>(Cute, Ron. Reminds me of [[The Hunting Of The Snark]], in which Rule 42 says, \"No one shall speak to the Man at the Helm\".  The Bellman completed that with, \"and the Man at the Helm shall speak to no one.\"  Thus, we can safely expect you to say what you have said, which is appropriate in many a coaching situation.  -- cheers, Alistair :-)</i>",
      "id": "1a133fccb319aee3b794a61225f62fe2"
    },
    {
      "type": "html",
      "text": "\nA beginner can't listen to the code and hear what it says. He needs to learn patterns (in the generic sense) of code quality. He needs to see good code (and, I suppose, bad) in order to learn to make good code.",
      "id": "970e3e2b35487cc6589f3e7ed3d545a6"
    },
    {
      "type": "html",
      "text": "\nA question, and I mean it to be a question, is whether patterns as presently constituted help with this. I think Beck's Smalltalk Best Practice Patterns do help, because they are very micro. I think GoF is more iffy, as the patterns and discussion get pretty big sometimes, and they may make big solutions seem desirable. [[Martin Fowler]]'s excellent Analysis Patterns offer the same peril, the selection of a big solution when a small one would do.",
      "id": "f609663365a37fa0f3cc5489c35e09aa"
    },
    {
      "type": "html",
      "text": "\nBecause patterns embody what most of us have spent many years learning (and still often imperfectly), they are heavy with content. Yet good code is light, gentle, simple, clear, pure. The one doesn't always lead to the other.",
      "id": "6a9dc567a44017ac6576d94940862fd7"
    },
    {
      "type": "html",
      "text": "\nI have no answer - I'm sure the answer isn't what Josh suggests (sarcastically I hope). The answer I've tried to use in my life is to read and know as much as I can, then swap it all to background and go simply. When I've managed that, I've done well. More than that, I don't know ... yet.  -- [[Ron Jeffries]]",
      "id": "fb11b2e74dd59f8305cd91f015aaea51"
    },
    {
      "type": "html",
      "text": "\nSee [[Let Patterns Emerge]]",
      "id": "9c0bb386e0a8f428095ebf8941091d9b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "0d0a0392e5288fa6f613043b50500ec7"
    },
    {
      "type": "html",
      "text": "\nThe answer to your question, about whether patterns help beginners learn to listen to the code, for me, is a resounding YES.  ",
      "id": "b89115340723f8f96be91f43d0e00598"
    },
    {
      "type": "html",
      "text": "\nBut we may have different ideas of what patterns are.",
      "id": "2d2ea48ccc11347c7a4e2c80d0ddee46"
    },
    {
      "type": "html",
      "text": "\nFor me, patterns enable the creation of light, gentle, simple, clear and pure code.  But you seem to think of patterns as heavyweight.  Perhaps that has something to do with the <i>presentation</i> of patterns, particularly in the GoF book.  ",
      "id": "e98c95dd0ccebf0eb7ae207e2f98a2c2"
    },
    {
      "type": "html",
      "text": "\nThe GoF book is wonderful, but it is flawed in its presentation of the problems that lead to the use of patterns.  The Applicability section tries to help with this, as does the Motivation section.  But overall, I find that beginners don't sufficiently understand the problem till they see it in code.  So in my [[Design Patterns Workshop]], I describe and show the kind of bad, ugly code, which could be a lot lighter and simpler, were it to use a pattern. ",
      "id": "55c350998c287dd417277505598baa27"
    },
    {
      "type": "html",
      "text": "\nTake the Decorator pattern as an example. One can use this pattern to make classes simpler, by getting rid of stuff that barely gets used.  If you study [[Java Unit]], you'll find that Kent and Erich use it for implementing a Repeated Test and an Active Test (a test that runs in a thread). Their use of this pattern enabled them to keep their Test Case class light and simple.  But they know the problem of placing too much stuff in a class -- how it makes the interface large, makes the class heavyweight, harder to understand, and harder to maintain. ",
      "id": "1bfc364de3e577af72488902ddd2d21d"
    },
    {
      "type": "html",
      "text": "\nBeginners don't know this, yet need to.  And it is the same with many of the other GoF patterns, and the larger patterns literature (particularly, some of the best [[Pattern Languages]]).  Important stuff, which programmers need to know, and use wisely.",
      "id": "04e727eefad22b35f2107419a0ab68fa"
    },
    {
      "type": "html",
      "text": "\nThus, my argument is that patterns are just another important discipline within the XP umbrella of disciplines.  And like all XP processes, patterns are best used when they are mingled with other XP processes. -- [[Joshua Kerievsky]]",
      "id": "aef3fb506020e2be3d0d3660940176c6"
    },
    {
      "type": "html",
      "text": "<i>This seems (to me) to be apples and oranges (so if I've dramatically missed the boat here edit away). To my thinking, patterns are tools to convey knowledge (prior art). They have been around as long as man has, but perhaps not articulated.  Saying that patterns are or aren't part of XP is like saying that a particular language or OS is or isn't part of XP.</i> -- Ted",
      "id": "93e98dc4c4fa1cb5ecee3f454f8bb4f0"
    },
    {
      "type": "html",
      "text": "\nYou may be thinking of patterns in the generic sense, while I'm referring to specific [[Patterns Of Software]], particularly [[Design Patterns]] and [[Pattern Languages]].  -- [[Joshua Kerievsky]]",
      "id": "a1d851aa718435a837ec29ac8433253e"
    },
    {
      "type": "html",
      "text": "<i>[[Joshua Kerievsky]], you state on [[Refactor Or Design]]: <b>XP has helped me learn to use patterns judiciously.</b> I think this speaks volumes. This is how patterns and XP intersect.</i>",
      "id": "b1f98a5a68e4d6694e17165afa8e3eb7"
    },
    {
      "type": "html",
      "text": "<i>Whether the patterns are used in the end or not, if the programmers have a working understanding of the patterns, they share a vocabulary. This seems like the sort of thing that might make CRC sessions go much, much faster. -- [[Eric Herman]]</i>",
      "id": "41c50ff4789e42cce3f0ccd63e8f2993"
    },
    {
      "type": "html",
      "text": "\nI collected a list on extreme programming books at [http://www.x-m-l.de/cgi-bin/amaread.pl?topic=Extreme+Programming www.x-m-l.de] -- Marc Schoenefeld",
      "id": "a1063b8dd5fddd0713839c0ac7606758"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ExtremeProgrammingAndPatterns c2.com]",
      "id": "e95c0f1b68ca77b900c8a5f6565d45f7"
    }
  ],
  "journal": [
    {
      "date": 1045103986000,
      "id": "67fe32a9ca3723e06d2bb7808141ee45",
      "type": "create",
      "item": {
        "title": "Extreme Programming And Patterns",
        "story": [
          {
            "type": "html",
            "text": "The XP literature (albeit tiny) says very very little about patterns.  It is as if these authors wanted to forget about the patterns movement.  So I wonder, what do folks think is the role of patterns within XP?  (and I'm not talking about the 2-3 patterns mentioned in Martin's Refactoring book). -- [[Joshua Kerievsky]]",
            "id": "4845d04335c3ce050edfcf7316fac961"
          },
          {
            "type": "html",
            "text": "<i>Considering Kent Beck and Ward Cunningham were two of the driving forces behind the patterns movement it seems unlikely the XP authors would want to forget about it.</i> -- [[Martijn Meijering]]",
            "id": "51938d745735616ffc428385a8eef422"
          },
          {
            "type": "html",
            "text": "\nNevertheless, in the XP process at present, patterns are like some very distant cousin.  Perhaps this has to do with the evolving understanding of the role of <b>Design</b> in XP (see [[Refactor Or Design]]). Or maybe the authors of XP are just scared that patterns will lead to all sorts of stuff that falls under [[You Arent Gonna Need It]]. -- [[Joshua Kerievsky]]",
            "id": "303c4f91378a81f23358eb13b8d668ca"
          },
          {
            "type": "html",
            "text": "<i>Patterns are not part of XP, but XPers certainly use patterns.  When refactoring code, one needs a direction in which to refactor -- a refactoring goal, so to speak.  Patterns are often good refactoring goals. -- [[Robert Cecil Martin]] 12/16/99, 23:29</i>",
            "id": "b1f498381bdb24495dba9a7f14dd9bd4"
          },
          {
            "type": "html",
            "text": "\nSo, Robert, let me re-phrase what you are saying: patterns are good refactoring goals and XPers use patterns -- however, patterns aren't part of XP.  Are you trying to sound like a Zen Master, Robert, or do you really think these kinds of proclamations will help people and teams?  ",
            "id": "7b0a2d0cc5e3793c44e7d4140a4f9757"
          },
          {
            "type": "html",
            "text": "<i>Yes, I really think this helps.  We don't include 'if' statements as a necessary part of XP, we don't include inheritance as a necessary part of XP, and we don't include design patterns as a necessary part of XP.  XP and Patterns are orthogonal concepts.  You can do XP without patterns, and you can use patterns without XP.</i>",
            "id": "4e4eff4d7267996cab5af389d3f6675f"
          },
          {
            "type": "html",
            "text": "<i>Having said that, I would expect any reasonably experienced XPer to be very conversant with patterns, and to employ them on a regular basis as refactoring targets.  -- [[Robert Cecil Martin]] 1/19/00 07:48</i>",
            "id": "4f90bdaed5f3acd19031aff6a31b5c88"
          },
          {
            "type": "html",
            "text": "\nWhy don't we simply say that the ideal XP team would be one in which both the Coach and his or her programmers know nothing about patterns. As refactorers, they will simply <i>let the code go where it wants to go</i> (as Ron says below) and their ignorance of patterns will not only not get in the way of their producing simple, effective code ([[Once And Only Once]], etc.), but this ignorance will actually <i>help them</i> produce this code. -- [[Joshua Kerievsky]]",
            "id": "b9390535631202b2327079ac1a53de9e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d0a0392e5288fa6f613043b50500ec7"
          },
          {
            "type": "html",
            "text": "\nPeople often ask me \"So do I need to learn Design Patterns to do XP?  Or should I just read the Refactoring book?\"",
            "id": "f0e5ddb237dea7a0e27d7ab76ec208b1"
          },
          {
            "type": "html",
            "text": "\nWell, considering that the Refactoring book touches on about 2-3 patterns (uh, Strategy and Template Method off the top of my head) what do you think my answer is?",
            "id": "de2ed0a2e14a93b6d426ede35b785acc"
          },
          {
            "type": "html",
            "text": "\nThe XP authors are struggling to put into words what they do. I'd argue that what they do involves a fairly good grasp of the patterns literature to date. Their knowledge of patterns steers them in refactoring.  So if they don't talk about pattern anymore, how do they expect XP teams to effectively refactor?  Is the XP philosophy to ignore time-honored, recurring solutions to problems?",
            "id": "652e1cf915e938ea1e0047b7f8a46740"
          },
          {
            "type": "html",
            "text": "-- [[Joshua Kerievsky]]",
            "id": "fdda0b0a32c7b6a36ae5b8e724a47ea0"
          },
          {
            "type": "html",
            "text": "\nSomewhere on these pages Ron Jeffries said that you should have the GOF patterns in your bag of tricks, but that you shouldn't reach too deep in it too soon. It is better to refactor a pattern into your design than to start with it. Ralph Johnson said something similar a couple of days ago on a newsgroup. The GOF book says that many patterns are natural endpoints for refactoring. -- [[Martijn Meijering]]",
            "id": "54f4e0d4979ee63631de3b91748190fb"
          },
          {
            "type": "html",
            "text": "\nTo you and me, the patterns are natural endpoints for refactoring.  To those who don't know patterns, they aren't.  Thus, newbie XPers, who lack knowledge of patterns, will have a hard time refactoring their code, especially since the current literature doesn't encourage them to learn patterns.  So let us [[Embrace Change]] and fix this. -- [[Joshua Kerievsky]]",
            "id": "32f2d1afcc73ea2f8ebc79046cd5d376"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d0a0392e5288fa6f613043b50500ec7"
          },
          {
            "type": "html",
            "text": "\nFor each Pattern, the GOF book presents two things: The skeleton without which you don't have the Pattern, and a bunch of illustrative stuff around the pattern that's a total candidate for [[You Arent Gonna Need It]]. So the correct procedure is to implement the skeleton (paying attention to things like adding the Pattern role names to class names), and deferring all the extras.",
            "id": "84a327dca399f0eee516050f8d942474"
          },
          {
            "type": "html",
            "text": "\nRemember that ways to arrange objects - like Pattern skeletons, the [[Dependency Inversion Principle]], method forwarding, & switch statement abstraction - are scaffolds to hang functionality on, not the functionality itself. Because [[You Arent Gonna Need It]] targets only functionality as dead weight that must be supported thru the iterations in which it adds no value, the skeleton of a Pattern is a Good Thing so long as it supports even a single crumb of functionality that you need right now. -- [[Phl Ip]]",
            "id": "167d2069cb6c9ebaa6bbb7c9a1656a4e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d0a0392e5288fa6f613043b50500ec7"
          },
          {
            "type": "html",
            "text": "\nTwo things:",
            "id": "eac1115bcc7cea786feeb2838653fc0f"
          },
          {
            "type": "html",
            "text": "\n1. Many programmers with patterns are small children with hammers. You can always tell when someone has just read GOF - they come in the next day wanting to put Composite somewhere.",
            "id": "0712540921b5ded2494870246c43161e"
          },
          {
            "type": "html",
            "text": "\nB. As Josh says, patterns are goals. They are somewhere the human wants to take the code. Refactoring is more like the human taking the code where it wants to go.",
            "id": "701e83aed325bee0c310d54f27d6519e"
          },
          {
            "type": "html",
            "text": "\nIn learning XP, many goals are frankly in the way. One is trying to strip oneself of preconceptions and get down to a quiet place where the truth of the code can be heard.",
            "id": "e83d459b9f8f13fc86018c03904645b7"
          },
          {
            "type": "html",
            "text": "\nThat said, patterns are a wonderful way to know a thing to do when, for a moment, one doesn't know what to do. They're a good tool to have, but a dangerous tool to want to use. Is this paradoxical? Then so be it. -- [[Ron Jeffries]]",
            "id": "d030a70dbc23784e9c88d7f574138fd9"
          },
          {
            "type": "html",
            "text": "\nTwo responses, Ron:",
            "id": "7736f58cef912598ab6a43917ade3714"
          },
          {
            "type": "html",
            "text": "\n1. Many programmers who get excited about XP, are like small children with hammers. You can always tell when programmers get excited about XP, because they start doing a few practices, like [[Pair Programming]] and Testing, and neglect to do the hard stuff, like getting the users fully involved in the XP process.  You and I both saw a team do this a few years ago, remember?",
            "id": "519f4e21b897d171a0901f4d9529c353"
          },
          {
            "type": "html",
            "text": "<i>Could it be that programmers who get excited about XP put the practices in where they can?  Sad to say but I have been on projects where programmers never met with the customer ( military projects ).</i>",
            "id": "481284a9df6ec253e3e65cd8b76e6c5b"
          },
          {
            "type": "html",
            "text": "\nB. Patterns are presentations of problems, consequences of problems, solutions to problems, variations on those solutions, and pointers to other patterns. The key to using patterns effectively, is knowing which problems they solve.  If you know that, you'll know when to refactor them into code. If you don't, many of your refactorings will fail to improve your code.",
            "id": "dc778ed9f6949554c1d48ec99678507b"
          },
          {
            "type": "html",
            "text": "\nTelling experienced folks to <i>let the code go where it wants to go</i> is wonderful.  Telling that to inexperienced folks will leave them scratching their heads, wondering what to do next. -- [[Joshua Kerievsky]]",
            "id": "4468ca947b9b741dbde157a1720d1846"
          },
          {
            "type": "html",
            "text": "<i>The motorcycle ... is almost impossible to understand unless you already know how one works.</i> -- [[Robert Pirsig]], [[Zen And The Art Of Motorcycle Maintenance]] ",
            "id": "2e7cfbcf77b823c3c373a2e9ff7fb5df"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d0a0392e5288fa6f613043b50500ec7"
          },
          {
            "type": "html",
            "text": "\nJosh asks, <i>Why don't we simply say that the ideal XP team would be one in which both the Coach and his or her programmers know nothing about patterns. As refactorers, they will simply </i>let the code go where it wants to go<i> (as Ron says below) and their ignorance of patterns will not only not get in the way of their producing simple, effective code ([[Once And Only Once]], etc.), but this ignorance will actually </i>help them<i> produce this code.</i>",
            "id": "95e63b6a93e615ed4c8a876fda6d41f9"
          },
          {
            "type": "html",
            "text": "\nI don't say that because I don't believe it. ",
            "id": "cdb0a7a7cf8a81b2a8509de44a690669"
          },
          {
            "type": "html",
            "text": "(It's my practice to say only what I believe, usually. But recall my motto \"How do I know what I think until I hear what I say?\") ",
            "id": "f8cbe486e91fe520fe6e6a71ff1fb09a"
          },
          {
            "type": "html",
            "text": "<i>(Cute, Ron. Reminds me of [[The Hunting Of The Snark]], in which Rule 42 says, \"No one shall speak to the Man at the Helm\".  The Bellman completed that with, \"and the Man at the Helm shall speak to no one.\"  Thus, we can safely expect you to say what you have said, which is appropriate in many a coaching situation.  -- cheers, Alistair :-)</i>",
            "id": "1a133fccb319aee3b794a61225f62fe2"
          },
          {
            "type": "html",
            "text": "\nA beginner can't listen to the code and hear what it says. He needs to learn patterns (in the generic sense) of code quality. He needs to see good code (and, I suppose, bad) in order to learn to make good code.",
            "id": "970e3e2b35487cc6589f3e7ed3d545a6"
          },
          {
            "type": "html",
            "text": "\nA question, and I mean it to be a question, is whether patterns as presently constituted help with this. I think Beck's Smalltalk Best Practice Patterns do help, because they are very micro. I think GoF is more iffy, as the patterns and discussion get pretty big sometimes, and they may make big solutions seem desirable. [[Martin Fowler]]'s excellent Analysis Patterns offer the same peril, the selection of a big solution when a small one would do.",
            "id": "f609663365a37fa0f3cc5489c35e09aa"
          },
          {
            "type": "html",
            "text": "\nBecause patterns embody what most of us have spent many years learning (and still often imperfectly), they are heavy with content. Yet good code is light, gentle, simple, clear, pure. The one doesn't always lead to the other.",
            "id": "6a9dc567a44017ac6576d94940862fd7"
          },
          {
            "type": "html",
            "text": "\nI have no answer - I'm sure the answer isn't what Josh suggests (sarcastically I hope). The answer I've tried to use in my life is to read and know as much as I can, then swap it all to background and go simply. When I've managed that, I've done well. More than that, I don't know ... yet.  -- [[Ron Jeffries]]",
            "id": "fb11b2e74dd59f8305cd91f015aaea51"
          },
          {
            "type": "html",
            "text": "\nSee [[Let Patterns Emerge]]",
            "id": "9c0bb386e0a8f428095ebf8941091d9b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "0d0a0392e5288fa6f613043b50500ec7"
          },
          {
            "type": "html",
            "text": "\nThe answer to your question, about whether patterns help beginners learn to listen to the code, for me, is a resounding YES.  ",
            "id": "b89115340723f8f96be91f43d0e00598"
          },
          {
            "type": "html",
            "text": "\nBut we may have different ideas of what patterns are.",
            "id": "2d2ea48ccc11347c7a4e2c80d0ddee46"
          },
          {
            "type": "html",
            "text": "\nFor me, patterns enable the creation of light, gentle, simple, clear and pure code.  But you seem to think of patterns as heavyweight.  Perhaps that has something to do with the <i>presentation</i> of patterns, particularly in the GoF book.  ",
            "id": "e98c95dd0ccebf0eb7ae207e2f98a2c2"
          },
          {
            "type": "html",
            "text": "\nThe GoF book is wonderful, but it is flawed in its presentation of the problems that lead to the use of patterns.  The Applicability section tries to help with this, as does the Motivation section.  But overall, I find that beginners don't sufficiently understand the problem till they see it in code.  So in my [[Design Patterns Workshop]], I describe and show the kind of bad, ugly code, which could be a lot lighter and simpler, were it to use a pattern. ",
            "id": "55c350998c287dd417277505598baa27"
          },
          {
            "type": "html",
            "text": "\nTake the Decorator pattern as an example. One can use this pattern to make classes simpler, by getting rid of stuff that barely gets used.  If you study [[Java Unit]], you'll find that Kent and Erich use it for implementing a Repeated Test and an Active Test (a test that runs in a thread). Their use of this pattern enabled them to keep their Test Case class light and simple.  But they know the problem of placing too much stuff in a class -- how it makes the interface large, makes the class heavyweight, harder to understand, and harder to maintain. ",
            "id": "1bfc364de3e577af72488902ddd2d21d"
          },
          {
            "type": "html",
            "text": "\nBeginners don't know this, yet need to.  And it is the same with many of the other GoF patterns, and the larger patterns literature (particularly, some of the best [[Pattern Languages]]).  Important stuff, which programmers need to know, and use wisely.",
            "id": "04e727eefad22b35f2107419a0ab68fa"
          },
          {
            "type": "html",
            "text": "\nThus, my argument is that patterns are just another important discipline within the XP umbrella of disciplines.  And like all XP processes, patterns are best used when they are mingled with other XP processes. -- [[Joshua Kerievsky]]",
            "id": "aef3fb506020e2be3d0d3660940176c6"
          },
          {
            "type": "html",
            "text": "<i>This seems (to me) to be apples and oranges (so if I've dramatically missed the boat here edit away). To my thinking, patterns are tools to convey knowledge (prior art). They have been around as long as man has, but perhaps not articulated.  Saying that patterns are or aren't part of XP is like saying that a particular language or OS is or isn't part of XP.</i> -- Ted",
            "id": "93e98dc4c4fa1cb5ecee3f454f8bb4f0"
          },
          {
            "type": "html",
            "text": "\nYou may be thinking of patterns in the generic sense, while I'm referring to specific [[Patterns Of Software]], particularly [[Design Patterns]] and [[Pattern Languages]].  -- [[Joshua Kerievsky]]",
            "id": "a1d851aa718435a837ec29ac8433253e"
          },
          {
            "type": "html",
            "text": "<i>[[Joshua Kerievsky]], you state on [[Refactor Or Design]]: <b>XP has helped me learn to use patterns judiciously.</b> I think this speaks volumes. This is how patterns and XP intersect.</i>",
            "id": "b1f98a5a68e4d6694e17165afa8e3eb7"
          },
          {
            "type": "html",
            "text": "<i>Whether the patterns are used in the end or not, if the programmers have a working understanding of the patterns, they share a vocabulary. This seems like the sort of thing that might make CRC sessions go much, much faster. -- [[Eric Herman]]</i>",
            "id": "41c50ff4789e42cce3f0ccd63e8f2993"
          },
          {
            "type": "html",
            "text": "\nI collected a list on extreme programming books at [http://www.x-m-l.de/cgi-bin/amaread.pl?topic=Extreme+Programming www.x-m-l.de] -- Marc Schoenefeld",
            "id": "a1063b8dd5fddd0713839c0ac7606758"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ExtremeProgrammingAndPatterns c2.com]",
            "id": "e95c0f1b68ca77b900c8a5f6565d45f7"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1671724067260
    }
  ]
}