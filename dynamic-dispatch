{
  "title": "Dynamic Dispatch",
  "story": [
    {
      "type": "html",
      "text": "The selection of a method to run based on both a) its signature, and b) the type of one or more of its arguments. Feature found in all OO languages. In many languages, <i>all</i> method calls are potentially dynamic (though [[Static Dispatch]] may be used as an optimization). In others, such as [[Cee Plus Plus]], functions have to be explicitly declared to use dynamic dispatch (the <i>virtual</i> keyword does this in C++; a <i>virtual function</i> is little more than one that uses dynamic dispatch).",
      "id": "ee2bb960b130f9eede15de6222e182f0"
    },
    {
      "type": "html",
      "text": "\nThere are several types of [[Dynamic Dispatch]]:",
      "id": "fe7ff1341f1b42b7e3085dd7dc5c22cf"
    },
    {
      "type": "html",
      "text": " [[Single Dispatch]]. Found in most OO languages ([[Smalltalk Language]], [[Java Language]], [[Cee Plus Plus]]); only one argument (usually given a special name like \"this\" or \"self\") is used (along with the method signature) to select the method to run.  Easy to implement, and meshes well with the encapsulation semantics of many OO languages.",
      "id": "842128148fad669da7dbdce718c44740"
    },
    {
      "type": "html",
      "text": " [[Multiple Dispatch]] ([[Multi Methods]]). Found in [[Dylan Language]], available in [[Common Lisp Object System]]. More than one (potentially <i>all</i>) arguments to a method are used to select the method to run. Doesn't mesh as well with object ownership semantics, and harder to implement efficiently. A special case of [[Multiple Dispatch]] is [[Double Dispatch]], which is useful when implementing <i>binary operators</i>.",
      "id": "b4ad5e5ece78dfcdda87a8069c1f5752"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?DynamicDispatch c2.com]",
      "id": "ba63c401771bebedf0294f711ce7eb37"
    }
  ],
  "journal": [
    {
      "date": 1417046027000,
      "id": "db5157f9f81af08d8cbdd92b8bd896c9",
      "type": "create",
      "item": {
        "title": "Dynamic Dispatch",
        "story": [
          {
            "type": "html",
            "text": "The selection of a method to run based on both a) its signature, and b) the type of one or more of its arguments. Feature found in all OO languages. In many languages, <i>all</i> method calls are potentially dynamic (though [[Static Dispatch]] may be used as an optimization). In others, such as [[Cee Plus Plus]], functions have to be explicitly declared to use dynamic dispatch (the <i>virtual</i> keyword does this in C++; a <i>virtual function</i> is little more than one that uses dynamic dispatch).",
            "id": "ee2bb960b130f9eede15de6222e182f0"
          },
          {
            "type": "html",
            "text": "\nThere are several types of [[Dynamic Dispatch]]:",
            "id": "fe7ff1341f1b42b7e3085dd7dc5c22cf"
          },
          {
            "type": "html",
            "text": " [[Single Dispatch]]. Found in most OO languages ([[Smalltalk Language]], [[Java Language]], [[Cee Plus Plus]]); only one argument (usually given a special name like \"this\" or \"self\") is used (along with the method signature) to select the method to run.  Easy to implement, and meshes well with the encapsulation semantics of many OO languages.",
            "id": "842128148fad669da7dbdce718c44740"
          },
          {
            "type": "html",
            "text": " [[Multiple Dispatch]] ([[Multi Methods]]). Found in [[Dylan Language]], available in [[Common Lisp Object System]]. More than one (potentially <i>all</i>) arguments to a method are used to select the method to run. Doesn't mesh as well with object ownership semantics, and harder to implement efficiently. A special case of [[Multiple Dispatch]] is [[Double Dispatch]], which is useful when implementing <i>binary operators</i>.",
            "id": "b4ad5e5ece78dfcdda87a8069c1f5752"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?DynamicDispatch c2.com]",
            "id": "ba63c401771bebedf0294f711ce7eb37"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1699944096139
    }
  ]
}