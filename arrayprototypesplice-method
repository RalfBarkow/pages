{
  "title": "Array.prototype.splice Method",
  "story": [
    {
      "type": "paragraph",
      "id": "a90055bc0f3778f0",
      "text": "As an example of [[Test to Learn]], let us take a look at the built-in Array.prototype.splice method. This method takes two or more arguments: an index to start with, a number of elements to remove, and optional elements to insert into the array. We are curious if this method changes the original array or not. We could look up the answer, or simply ask JavaScript to tell us, as the learning test in the following code snippet shows."
    },
    {
      "type": "code",
      "id": "94c3efd30534ef28",
      "text": "describe(\"ArrayTest\", function() {\n    it(\"test array splice should not modify array\", function() {\n        var arr = [1, 2, 3, 4, 5];\n        var result = arr.splice(2, 3);\n        expect(arr).toEqual([1, 2, 3, 4, 5]);\n    });\n});\n"
    },
    {
      "type": "markdown",
      "id": "f8a70b30af6fccb6",
      "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
    },
    {
      "type": "code",
      "id": "8d110b75dc8a2bf1",
      "text": "TestCase(\"ArrayTest\", { \n  \"test array splice should not modify array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\n  assertEquals([1, 2, 3, 4, 5], arr); } \n});"
    },
    {
      "type": "paragraph",
      "id": "65faeb6bb8c5b232",
      "text": "To run the test, click on SpecRunner.html in the following assets."
    },
    {
      "type": "assets",
      "id": "5514951e4be51976",
      "text": "pages/arrayprototypesplice-method"
    },
    {
      "type": "paragraph",
      "id": "8875b56e44f265df",
      "text": "Because we don’t really know what the answer is, we roll with the assumption that the splice method is not destructive. Note how this contrasts with traditional unit testing—when testing production code we should always write assertions on firm expectation about the result. However, we are now learning by observing what the implementation can tell us, and so whatever answer we are assuming before running the test is not of grave importance. Running the test proves us wrong anyway: “expected [1, 2, 3, 4, 5] but was [1, 2].” So we have learned something new. To record our findings, Listing 4.2 updates the test to state what we now know to be true."
    },
    {
      "type": "code",
      "id": "80dab11d24524fc1",
      "text": "TestCase(\"ArrayTest\", { \n  \"test array splice should modify array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\nassertEquals([1, 2], arr); } \n});"
    },
    {
      "type": "markdown",
      "id": "0431c8c262c30931",
      "text": "**Listing 4.2** Array.prototype.splice modifies the receiving array"
    },
    {
      "type": "paragraph",
      "id": "c18e1a681df411da",
      "text": "Note how both the wording and the assertion changed. Because we have discovered that the method in question is in fact destructive, we now wonder: Does it also return the result? Listing 4.3 investigates."
    },
    {
      "type": "code",
      "id": "01c8192136a7b61c",
      "text": "\"test array splice should return modified array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\n  assertEquals(arr, result); \n}"
    },
    {
      "type": "markdown",
      "id": "3741675b34937705",
      "text": "**Listing 4.3** Expecting Array.prototype.splice to return the spliced array"
    },
    null,
    {
      "type": "pagefold",
      "id": "fe49c9acda9ace66",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c0eedf3c3255ce14",
      "text": "JOHANSEN, Christian, 2011. Test-driven JavaScript development. Upper Saddle River, NJ: Addison-Wesley. Developer’s library series. ISBN 978-0-321-68391-5. p. 56–57."
    },
    {
      "type": "paragraph",
      "id": "ca93b934cb81ab02",
      "text": "[…]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Array.prototype.splice Method",
        "story": []
      },
      "date": 1713709480537
    },
    {
      "item": {
        "type": "assets",
        "id": "bf0c225430090c3c",
        "text": ""
      },
      "id": "bf0c225430090c3c",
      "type": "add",
      "date": 1713709482751
    },
    {
      "type": "remove",
      "id": "bf0c225430090c3c",
      "date": 1713709485860
    },
    {
      "item": {
        "type": "assets",
        "id": "5514951e4be51976",
        "text": "pages/arrayprototypesplice-method"
      },
      "id": "5514951e4be51976",
      "type": "add",
      "date": 1713709491210
    },
    {
      "type": "edit",
      "id": "5514951e4be51976",
      "item": {
        "type": "assets",
        "id": "5514951e4be51976",
        "text": "pages/arrayprototypesplice-method"
      },
      "date": 1713709498368
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a90055bc0f3778f0",
        "text": "As an example of [[Test to Learn]], let us take a look at the built-in Array.prototype.splice method. This method takes two or more arguments: an index to start with, a number of elements to remove, and optional elements to insert into the array. We are curious if this method changes the original array or not. We could look up the answer, or simply ask JavaScript to tell us, as the learning test in the following code snippet shows."
      },
      "id": "a90055bc0f3778f0",
      "type": "add",
      "after": "5514951e4be51976",
      "date": 1713709670293
    },
    {
      "id": "a90055bc0f3778f0",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "5514951e4be51976"
      ],
      "date": 1713709671954
    },
    {
      "id": "9aef8f14ee2aeb27",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9aef8f14ee2aeb27",
        "text": ""
      },
      "attribution": {
        "page": "2024-04-21"
      },
      "date": 1713709675642
    },
    {
      "type": "edit",
      "id": "9aef8f14ee2aeb27",
      "item": {
        "type": "paragraph",
        "id": "9aef8f14ee2aeb27",
        "text": ""
      },
      "date": 1713709684414
    },
    {
      "type": "edit",
      "id": "a90055bc0f3778f0",
      "item": {
        "type": "paragraph",
        "id": "a90055bc0f3778f0",
        "text": "As an example of [[Test to Learn]], let us take a look at the built-in Array.prototype.splice method. This method takes two or more arguments: an index to start with, a number of elements to remove, and optional elements to insert into the array. We are curious if this method changes the original array or not. We could look up the answer, or simply ask JavaScript to tell us, as the learning test in the following code snippet shows."
      },
      "date": 1713709700428
    },
    {
      "item": {
        "type": "code",
        "id": "94c3efd30534ef28",
        "text": "describe(\"ArrayTest\", function() {\n    it(\"test array splice should not modify array\", function() {\n        var arr = [1, 2, 3, 4, 5];\n        var result = arr.splice(2, 3);\n        expect(arr).toEqual([1, 2, 3, 4, 5]);\n    });\n});\n"
      },
      "id": "94c3efd30534ef28",
      "type": "add",
      "after": "5514951e4be51976",
      "date": 1713709760210
    },
    {
      "type": "edit",
      "id": "94c3efd30534ef28",
      "item": {
        "type": "code",
        "id": "94c3efd30534ef28",
        "text": "describe(\"ArrayTest\", function() {\n    it(\"test array splice should not modify array\", function() {\n        var arr = [1, 2, 3, 4, 5];\n        var result = arr.splice(2, 3);\n        expect(arr).toEqual([1, 2, 3, 4, 5]);\n    });\n});\n"
      },
      "date": 1713709762320
    },
    {
      "id": "94c3efd30534ef28",
      "type": "move",
      "order": [
        "9aef8f14ee2aeb27",
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "5514951e4be51976"
      ],
      "date": 1713709778695
    },
    {
      "type": "edit",
      "id": "a90055bc0f3778f0",
      "item": {
        "type": "paragraph",
        "id": "a90055bc0f3778f0",
        "text": "As an example of [[Test to Learn]], let us take a look at the built-in Array.prototype.splice method. This method takes two or more arguments: an index to start with, a number of elements to remove, and optional elements to insert into the array. We are curious if this method changes the original array or not. We could look up the answer, or simply ask JavaScript to tell us, as the learning test in the following code snippet shows."
      },
      "date": 1713709796029
    },
    {
      "type": "add",
      "id": "f8a70b30af6fccb6",
      "item": {
        "type": "markdown",
        "id": "f8a70b30af6fccb6",
        "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
      },
      "after": "a90055bc0f3778f0",
      "date": 1713709797321
    },
    {
      "id": "f8a70b30af6fccb6",
      "type": "move",
      "order": [
        "9aef8f14ee2aeb27",
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "5514951e4be51976"
      ],
      "date": 1713709799515
    },
    {
      "type": "edit",
      "id": "f8a70b30af6fccb6",
      "item": {
        "type": "markdown",
        "id": "f8a70b30af6fccb6",
        "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
      },
      "date": 1713709824884
    },
    {
      "type": "edit",
      "id": "f8a70b30af6fccb6",
      "item": {
        "type": "markdown",
        "id": "f8a70b30af6fccb6",
        "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
      },
      "date": 1713709857135
    },
    {
      "type": "edit",
      "id": "a90055bc0f3778f0",
      "item": {
        "type": "paragraph",
        "id": "a90055bc0f3778f0",
        "text": "As an example of [[Test to Learn]], let us take a look at the built-in Array.prototype.splice method. This method takes two or more arguments: an index to start with, a number of elements to remove, and optional elements to insert into the array. We are curious if this method changes the original array or not. We could look up the answer, or simply ask JavaScript to tell us, as the learning test in the following code snippet shows."
      },
      "date": 1713709885774
    },
    {
      "type": "edit",
      "id": "a90055bc0f3778f0",
      "item": {
        "type": "paragraph",
        "id": "a90055bc0f3778f0",
        "text": "As an example of [[Test to Learn]], let us take a look at the built-in Array.prototype.splice method. This method takes two or more arguments: an index to start with, a number of elements to remove, and optional elements to insert into the array. We are curious if this method changes the original array or not. We could look up the answer, or simply ask JavaScript to tell us, as the learning test in the following code snippet shows."
      },
      "date": 1713709948004
    },
    {
      "type": "remove",
      "id": "9aef8f14ee2aeb27",
      "date": 1713709950182
    },
    {
      "type": "edit",
      "id": "a90055bc0f3778f0",
      "item": {
        "type": "paragraph",
        "id": "a90055bc0f3778f0",
        "text": "As an example of [[Test to Learn]], let us take a look at the built-in Array.prototype.splice method. This method takes two or more arguments: an index to start with, a number of elements to remove, and optional elements to insert into the array. We are curious if this method changes the original array or not. We could look up the answer, or simply ask JavaScript to tell us, as the learning test in the following code snippet shows."
      },
      "date": 1713709964069
    },
    {
      "type": "edit",
      "id": "f8a70b30af6fccb6",
      "item": {
        "type": "markdown",
        "id": "f8a70b30af6fccb6",
        "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
      },
      "date": 1713710007791
    },
    {
      "type": "edit",
      "id": "f8a70b30af6fccb6",
      "item": {
        "type": "markdown",
        "id": "f8a70b30af6fccb6",
        "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
      },
      "date": 1713710027580
    },
    {
      "id": "fe49c9acda9ace66",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "fe49c9acda9ace66",
        "text": "~"
      },
      "after": "5514951e4be51976",
      "attribution": {
        "page": "Test to Learn"
      },
      "date": 1713710103866
    },
    {
      "id": "c0eedf3c3255ce14",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c0eedf3c3255ce14",
        "text": "JOHANSEN, Christian, 2011. Test-driven JavaScript development. Upper Saddle River, NJ: Addison-Wesley. Developer’s library series. ISBN 978-0-321-68391-5. p. 56."
      },
      "after": "fe49c9acda9ace66",
      "attribution": {
        "page": "Test to Learn"
      },
      "date": 1713710107442
    },
    {
      "type": "edit",
      "id": "c0eedf3c3255ce14",
      "item": {
        "type": "paragraph",
        "id": "c0eedf3c3255ce14",
        "text": "JOHANSEN, Christian, 2011. Test-driven JavaScript development. Upper Saddle River, NJ: Addison-Wesley. Developer’s library series. ISBN 978-0-321-68391-5. p. 56."
      },
      "date": 1713710124687
    },
    {
      "item": {
        "type": "paragraph",
        "id": "8875b56e44f265df",
        "text": "Because we don’t really know what the answer is, we roll with the assumption that the splice method is not destructive. Note how this contrasts with traditional unit testing—when testing production code we should always write assertions on firm expectation about the result. However, we are now learning by observing what the implementation can tell us, and so whatever answer we are assuming before running the test is not of grave importance. Running the test proves us wrong anyway: “expected [1, 2, 3, 4, 5] but was [1, 2].” So we have learned something new. To record our findings, Listing 4.2 updates the test to state what we now know to be true."
      },
      "id": "8875b56e44f265df",
      "type": "add",
      "after": "c0eedf3c3255ce14",
      "date": 1713710159538
    },
    {
      "id": "8875b56e44f265df",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "5514951e4be51976",
        "8875b56e44f265df",
        "fe49c9acda9ace66",
        "c0eedf3c3255ce14"
      ],
      "date": 1713710162080
    },
    {
      "type": "edit",
      "id": "8875b56e44f265df",
      "item": {
        "type": "paragraph",
        "id": "8875b56e44f265df",
        "text": "Because we don’t really know what the answer is, we roll with the assumption that the splice method is not destructive. Note how this contrasts with traditional unit testing—when testing production code we should always write assertions on firm expectation about the result. However, we are now learning by observing what the implementation can tell us, and so whatever answer we are assuming before running the test is not of grave importance. Running the test proves us wrong anyway: “expected [1, 2, 3, 4, 5] but was [1, 2].” So we have learned something new. To record our findings, Listing 4.2 updates the test to state what we now know to be true."
      },
      "date": 1713710163920
    },
    {
      "item": {
        "type": "code",
        "id": "80dab11d24524fc1",
        "text": "TestCase(\"ArrayTest\", { \"test array splice should modify array\": function () { var arr = [1, 2, 3, 4, 5]; var result = arr.splice(2, 3); assertEquals([1, 2], arr); } });"
      },
      "id": "80dab11d24524fc1",
      "type": "add",
      "after": "c0eedf3c3255ce14",
      "date": 1713710245895
    },
    {
      "id": "80dab11d24524fc1",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "5514951e4be51976",
        "8875b56e44f265df",
        "80dab11d24524fc1",
        "fe49c9acda9ace66",
        "c0eedf3c3255ce14"
      ],
      "date": 1713710247782
    },
    {
      "type": "edit",
      "id": "80dab11d24524fc1",
      "item": {
        "type": "code",
        "id": "80dab11d24524fc1",
        "text": "TestCase(\"ArrayTest\", { \"test array splice should modify array\": function () { var arr = [1, 2, 3, 4, 5]; var result = arr.splice(2, 3); assertEquals([1, 2], arr); } });"
      },
      "date": 1713710249586
    },
    {
      "item": {
        "type": "markdown",
        "id": "0431c8c262c30931",
        "text": "**Listing 4.2** Array.prototype.splice modifies the receiving array"
      },
      "id": "0431c8c262c30931",
      "type": "add",
      "after": "c0eedf3c3255ce14",
      "date": 1713710268708
    },
    {
      "id": "0431c8c262c30931",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "5514951e4be51976",
        "8875b56e44f265df",
        "80dab11d24524fc1",
        "0431c8c262c30931",
        "fe49c9acda9ace66",
        "c0eedf3c3255ce14"
      ],
      "date": 1713710270878
    },
    {
      "type": "edit",
      "id": "0431c8c262c30931",
      "item": {
        "type": "markdown",
        "id": "0431c8c262c30931",
        "text": "**Listing 4.2** Array.prototype.splice modifies the receiving array"
      },
      "date": 1713710272372
    },
    {
      "type": "edit",
      "id": "0431c8c262c30931",
      "item": {
        "type": "markdown",
        "id": "0431c8c262c30931",
        "text": "**Listing 4.2** Array.prototype.splice modifies the receiving array"
      },
      "date": 1713710277449
    },
    {
      "type": "edit",
      "id": "0431c8c262c30931",
      "item": {
        "type": "markdown",
        "id": "0431c8c262c30931",
        "text": "**Listing 4.2** Array.prototype.splice modifies the receiving array"
      },
      "date": 1713710283683
    },
    {
      "type": "edit",
      "id": "0431c8c262c30931",
      "item": {
        "type": "markdown",
        "id": "0431c8c262c30931",
        "text": "**Listing 4.2** Array.prototype.splice modifies the receiving array"
      },
      "date": 1713710284858
    },
    {
      "type": "edit",
      "id": "f8a70b30af6fccb6",
      "item": {
        "type": "markdown",
        "id": "f8a70b30af6fccb6",
        "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
      },
      "date": 1713710362536
    },
    {
      "type": "add",
      "id": "65faeb6bb8c5b232",
      "item": {
        "type": "paragraph",
        "id": "65faeb6bb8c5b232",
        "text": "To run the test, click on SpecRunner.html in the following assets."
      },
      "after": "f8a70b30af6fccb6",
      "date": 1713710362735
    },
    {
      "type": "add",
      "id": "43dd3b02bf01646a",
      "item": {
        "type": "paragraph",
        "id": "43dd3b02bf01646a",
        "text": ""
      },
      "after": "f8a70b30af6fccb6",
      "date": 1713710364336
    },
    {
      "type": "edit",
      "id": "f8a70b30af6fccb6",
      "item": {
        "type": "markdown",
        "id": "f8a70b30af6fccb6",
        "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
      },
      "date": 1713710394569
    },
    {
      "item": {
        "type": "code",
        "id": "8d110b75dc8a2bf1",
        "text": "TestCase(\"ArrayTest\", { \"test array splice should not modify array\": function () { var arr = [1, 2, 3, 4, 5]; var result = arr.splice(2, 3); assertEquals([1, 2, 3, 4, 5], arr); } });"
      },
      "id": "8d110b75dc8a2bf1",
      "type": "add",
      "after": "c0eedf3c3255ce14",
      "date": 1713710398332
    },
    {
      "id": "8d110b75dc8a2bf1",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "8d110b75dc8a2bf1",
        "43dd3b02bf01646a",
        "65faeb6bb8c5b232",
        "5514951e4be51976",
        "8875b56e44f265df",
        "80dab11d24524fc1",
        "0431c8c262c30931",
        "fe49c9acda9ace66",
        "c0eedf3c3255ce14"
      ],
      "date": 1713710406687,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "remove",
      "id": "43dd3b02bf01646a",
      "date": 1713710411182
    },
    {
      "type": "edit",
      "id": "8d110b75dc8a2bf1",
      "item": {
        "type": "code",
        "id": "8d110b75dc8a2bf1",
        "text": "TestCase(\"ArrayTest\", { \"test array splice should not modify array\": function () { var arr = [1, 2, 3, 4, 5]; var result = arr.splice(2, 3); assertEquals([1, 2, 3, 4, 5], arr); } });"
      },
      "date": 1713710412005
    },
    {
      "type": "edit",
      "id": "f8a70b30af6fccb6",
      "item": {
        "type": "markdown",
        "id": "f8a70b30af6fccb6",
        "text": "NB. **Listing 4.1** Expecting Array.prototype.splice to modify the array"
      },
      "date": 1713710413445
    },
    {
      "type": "fork",
      "date": 1713710416510
    },
    {
      "type": "edit",
      "id": "8d110b75dc8a2bf1",
      "item": {
        "type": "code",
        "id": "8d110b75dc8a2bf1",
        "text": "TestCase(\"ArrayTest\", { \n  \"test array splice should not modify array\": function () { var arr = [1, 2, 3, 4, 5]; var result = arr.splice(2, 3); assertEquals([1, 2, 3, 4, 5], arr); } });"
      },
      "date": 1713710443383
    },
    {
      "type": "edit",
      "id": "8d110b75dc8a2bf1",
      "item": {
        "type": "code",
        "id": "8d110b75dc8a2bf1",
        "text": "TestCase(\"ArrayTest\", { \n  \"test array splice should not modify array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n  assertEquals([1, 2, 3, 4, 5], arr); } \n});"
      },
      "date": 1713710491543
    },
    {
      "type": "edit",
      "id": "8d110b75dc8a2bf1",
      "item": {
        "type": "code",
        "id": "8d110b75dc8a2bf1",
        "text": "TestCase(\"ArrayTest\", { \n  \"test array splice should not modify array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\n  assertEquals([1, 2, 3, 4, 5], arr); } \n});"
      },
      "date": 1713710514745
    },
    {
      "type": "edit",
      "id": "80dab11d24524fc1",
      "item": {
        "type": "code",
        "id": "80dab11d24524fc1",
        "text": "TestCase(\"ArrayTest\", { \n  \"test array splice should modify array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\nassertEquals([1, 2], arr); \n} });"
      },
      "date": 1713710627513
    },
    {
      "type": "edit",
      "id": "80dab11d24524fc1",
      "item": {
        "type": "code",
        "id": "80dab11d24524fc1",
        "text": "TestCase(\"ArrayTest\", { \n  \"test array splice should modify array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\nassertEquals([1, 2], arr); } \n});"
      },
      "date": 1713710645267
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713712020007
    },
    {
      "item": {
        "type": "paragraph",
        "id": "c18e1a681df411da",
        "text": "Note how both the wording and the assertion changed. Because we have discovered that the method in question is in fact destructive, we now wonder: Does it also return the result? Listing 4.3 investigates."
      },
      "id": "c18e1a681df411da",
      "type": "add",
      "after": "c0eedf3c3255ce14",
      "date": 1713712215276
    },
    {
      "id": "c18e1a681df411da",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "8d110b75dc8a2bf1",
        "65faeb6bb8c5b232",
        "5514951e4be51976",
        "8875b56e44f265df",
        "80dab11d24524fc1",
        "0431c8c262c30931",
        "c18e1a681df411da",
        "fe49c9acda9ace66",
        "c0eedf3c3255ce14"
      ],
      "date": 1713712218572
    },
    {
      "type": "edit",
      "id": "c18e1a681df411da",
      "item": {
        "type": "paragraph",
        "id": "c18e1a681df411da",
        "text": "Note how both the wording and the assertion changed. Because we have discovered that the method in question is in fact destructive, we now wonder: Does it also return the result? Listing 4.3 investigates."
      },
      "date": 1713712220386
    },
    {
      "item": {
        "type": "code",
        "id": "01c8192136a7b61c",
        "text": "\"test array splice should return modified array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\n  assertEquals(arr, result); \n}"
      },
      "id": "01c8192136a7b61c",
      "type": "add",
      "after": "c0eedf3c3255ce14",
      "date": 1713712234643
    },
    {
      "id": "01c8192136a7b61c",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "8d110b75dc8a2bf1",
        "65faeb6bb8c5b232",
        "5514951e4be51976",
        "8875b56e44f265df",
        "80dab11d24524fc1",
        "0431c8c262c30931",
        "c18e1a681df411da",
        "01c8192136a7b61c",
        "fe49c9acda9ace66",
        "c0eedf3c3255ce14"
      ],
      "date": 1713712237371
    },
    {
      "type": "edit",
      "id": "01c8192136a7b61c",
      "item": {
        "type": "code",
        "id": "01c8192136a7b61c",
        "text": "\"test array splice should return modified array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\n  assertEquals(arr, result); \n}"
      },
      "date": 1713712240559
    },
    {
      "type": "edit",
      "id": "01c8192136a7b61c",
      "item": {
        "type": "code",
        "id": "01c8192136a7b61c",
        "text": "\"test array splice should return modified array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\n  assertEquals(arr, result); \n}"
      },
      "date": 1713712251882
    },
    {
      "type": "edit",
      "id": "01c8192136a7b61c",
      "item": {
        "type": "code",
        "id": "01c8192136a7b61c",
        "text": "\"test array splice should return modified array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\n  assertEquals(arr, result); \n}"
      },
      "date": 1713712258410
    },
    {
      "type": "edit",
      "id": "01c8192136a7b61c",
      "item": {
        "type": "code",
        "id": "01c8192136a7b61c",
        "text": "\"test array splice should return modified array\": function () { \n  var arr = [1, 2, 3, 4, 5]; \n  var result = arr.splice(2, 3); \n\n  assertEquals(arr, result); \n}"
      },
      "date": 1713712269048
    },
    {
      "item": {
        "type": "markdown",
        "id": "3741675b34937705",
        "text": "**Listing 4.3** Expecting Array.prototype.splice to return the spliced array"
      },
      "id": "3741675b34937705",
      "type": "add",
      "after": "c0eedf3c3255ce14",
      "date": 1713712278261
    },
    {
      "id": "3741675b34937705",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "8d110b75dc8a2bf1",
        "65faeb6bb8c5b232",
        "5514951e4be51976",
        "8875b56e44f265df",
        "80dab11d24524fc1",
        "0431c8c262c30931",
        "c18e1a681df411da",
        "01c8192136a7b61c",
        "3741675b34937705",
        "fe49c9acda9ace66",
        "c0eedf3c3255ce14"
      ],
      "date": 1713712280635
    },
    {
      "type": "edit",
      "id": "3741675b34937705",
      "item": {
        "type": "markdown",
        "id": "3741675b34937705",
        "text": "**Listing 4.3** Expecting Array.prototype.splice to return the spliced array"
      },
      "date": 1713712288260
    },
    {
      "type": "edit",
      "id": "3741675b34937705",
      "item": {
        "type": "markdown",
        "id": "3741675b34937705",
        "text": "**Listing 4.3** Expecting Array.prototype.splice to return the spliced array"
      },
      "date": 1713712289602
    },
    {
      "type": "edit",
      "id": "c0eedf3c3255ce14",
      "item": {
        "type": "paragraph",
        "id": "c0eedf3c3255ce14",
        "text": "JOHANSEN, Christian, 2011. Test-driven JavaScript development. Upper Saddle River, NJ: Addison-Wesley. Developer’s library series. ISBN 978-0-321-68391-5. p. 56–57."
      },
      "date": 1713712314899
    },
    {
      "id": "ca93b934cb81ab02",
      "type": "move",
      "order": [
        "a90055bc0f3778f0",
        "94c3efd30534ef28",
        "f8a70b30af6fccb6",
        "8d110b75dc8a2bf1",
        "65faeb6bb8c5b232",
        "5514951e4be51976",
        "8875b56e44f265df",
        "80dab11d24524fc1",
        "0431c8c262c30931",
        "c18e1a681df411da",
        "01c8192136a7b61c",
        "3741675b34937705",
        "ca93b934cb81ab02",
        "fe49c9acda9ace66",
        "c0eedf3c3255ce14"
      ],
      "date": 1713712318525,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ca93b934cb81ab02",
        "text": "[…]"
      },
      "id": "ca93b934cb81ab02",
      "type": "add",
      "after": "c0eedf3c3255ce14",
      "date": 1713712316648
    },
    {
      "type": "edit",
      "id": "ca93b934cb81ab02",
      "item": {
        "type": "paragraph",
        "id": "ca93b934cb81ab02",
        "text": "[…]"
      },
      "date": 1713712322538
    },
    {
      "type": "fork",
      "date": 1713712326674
    }
  ]
}