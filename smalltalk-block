{
  "title": "Smalltalk Block",
  "story": [
    {
      "type": "paragraph",
      "id": "98485bc34b307171",
      "text": "What is a block? [https://thepharo.dev/2020/04/27/about-blocks-basics-101/ post]"
    },
    {
      "type": "paragraph",
      "id": "56b4cffc6a31eb65",
      "text": "A block is a [[lambda expression]] that captures (or closes over) its environment at creation-time. We will see later what it means exactly. For now, imagine a block as an anonymous function or method. A block is a piece of code whose execution is frozen and can be kicked in using messages. Blocks are defined by square brackets.\n\nIf you execute and print the result of the following code, you will not get 3, but a block.\nIndeed, you did not ask for the block value, but just for the block itself, and you got it."
    },
    {
      "type": "code",
      "id": "6f6d73710a0fac9e",
      "text": "[ 1 + 2 ]"
    },
    {
      "type": "markdown",
      "id": "c18f0ba1dfe63929",
      "text": "a {{gtClass:FullBlockClosure}}"
    },
    {
      "type": "markdown",
      "id": "83a81a7e9838279d",
      "text": "A FullBlockClosure is a closure that can be independent of any outerContext if desired.  It has its own method (currently reusing the startpc inst var) and its own receiver.  outerContext can be either a MethodContext/Context or nil."
    },
    {
      "type": "markdown",
      "id": "a2103d4fca5e58d1",
      "text": "See also *FullBlockClosures in Pharo #246*. [https://github.com/theseion/Fuel/issues/246 github]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Smalltalk Block",
        "story": []
      },
      "date": 1666629706292
    },
    {
      "item": {
        "type": "factory",
        "id": "98485bc34b307171"
      },
      "id": "98485bc34b307171",
      "type": "add",
      "date": 1666629717647
    },
    {
      "type": "edit",
      "id": "98485bc34b307171",
      "item": {
        "type": "paragraph",
        "id": "98485bc34b307171",
        "text": "What is a block?"
      },
      "date": 1666629720474
    },
    {
      "type": "edit",
      "id": "98485bc34b307171",
      "item": {
        "type": "paragraph",
        "id": "98485bc34b307171",
        "text": "What is a block? [https://thepharo.dev/2020/04/27/about-blocks-basics-101/ post]"
      },
      "date": 1666629730412
    },
    {
      "item": {
        "type": "factory",
        "id": "56b4cffc6a31eb65"
      },
      "id": "56b4cffc6a31eb65",
      "type": "add",
      "after": "98485bc34b307171",
      "date": 1666629760724
    },
    {
      "type": "edit",
      "id": "56b4cffc6a31eb65",
      "item": {
        "type": "paragraph",
        "id": "56b4cffc6a31eb65",
        "text": "A block is a lambda expression that captures (or closes over) its environment at creation-time. We will see later what it means exactly. For now, imagine a block as an anonymous function or method. A block is a piece of code whose execution is frozen and can be kicked in using messages. Blocks are defined by square brackets.\n\nIf you execute and print the result of the following code, you will not get 3, but a block.\nIndeed, you did not ask for the block value, but just for the block itself, and you got it."
      },
      "date": 1666629763015
    },
    {
      "item": {
        "type": "factory",
        "id": "6f6d73710a0fac9e"
      },
      "id": "6f6d73710a0fac9e",
      "type": "add",
      "after": "56b4cffc6a31eb65",
      "date": 1666630084734
    },
    {
      "type": "edit",
      "id": "6f6d73710a0fac9e",
      "item": {
        "type": "code",
        "id": "6f6d73710a0fac9e",
        "text": "[ 1 + 2 ]"
      },
      "date": 1666630087076
    },
    {
      "item": {
        "type": "factory",
        "id": "c18f0ba1dfe63929"
      },
      "id": "c18f0ba1dfe63929",
      "type": "add",
      "after": "6f6d73710a0fac9e",
      "date": 1666630094937
    },
    {
      "type": "edit",
      "id": "c18f0ba1dfe63929",
      "item": {
        "type": "markdown",
        "id": "c18f0ba1dfe63929",
        "text": "a {{gtClass:FullBlockClosure}}"
      },
      "date": 1666630097205
    },
    {
      "item": {
        "type": "factory",
        "id": "83a81a7e9838279d"
      },
      "id": "83a81a7e9838279d",
      "type": "add",
      "after": "c18f0ba1dfe63929",
      "date": 1666630139201
    },
    {
      "type": "edit",
      "id": "83a81a7e9838279d",
      "item": {
        "type": "markdown",
        "id": "83a81a7e9838279d",
        "text": "A FullBlockClosure is a closure that can be independent of any outerContext if desired.  It has its own method (currently reusing the startpc inst var) and its own receiver.  outerContext can be either a MethodContext/Context or nil."
      },
      "date": 1666630141721
    },
    {
      "type": "edit",
      "id": "56b4cffc6a31eb65",
      "item": {
        "type": "paragraph",
        "id": "56b4cffc6a31eb65",
        "text": "A block is a [[lambda expression]] that captures (or closes over) its environment at creation-time. We will see later what it means exactly. For now, imagine a block as an anonymous function or method. A block is a piece of code whose execution is frozen and can be kicked in using messages. Blocks are defined by square brackets.\n\nIf you execute and print the result of the following code, you will not get 3, but a block.\nIndeed, you did not ask for the block value, but just for the block itself, and you got it."
      },
      "date": 1666630203981
    },
    {
      "item": {
        "type": "factory",
        "id": "a2103d4fca5e58d1"
      },
      "id": "a2103d4fca5e58d1",
      "type": "add",
      "after": "83a81a7e9838279d",
      "date": 1666700420585
    },
    {
      "type": "edit",
      "id": "a2103d4fca5e58d1",
      "item": {
        "type": "paragraph",
        "id": "a2103d4fca5e58d1",
        "text": "See also "
      },
      "date": 1666700427831
    },
    {
      "type": "edit",
      "id": "a2103d4fca5e58d1",
      "item": {
        "type": "paragraph",
        "id": "a2103d4fca5e58d1",
        "text": "See also *FullBlockClosures in Pharo #246* "
      },
      "date": 1666700480307
    },
    {
      "type": "edit",
      "id": "a2103d4fca5e58d1",
      "item": {
        "type": "paragraph",
        "id": "a2103d4fca5e58d1",
        "text": "See also *FullBlockClosures in Pharo #246*. [https://github.com/theseion/Fuel/issues/246 github]"
      },
      "date": 1666700503249
    },
    {
      "type": "edit",
      "id": "a2103d4fca5e58d1",
      "item": {
        "type": "markdown",
        "id": "a2103d4fca5e58d1",
        "text": "See also *FullBlockClosures in Pharo #246*. [https://github.com/theseion/Fuel/issues/246 github]"
      },
      "date": 1666700523357
    }
  ]
}