{
  "title": "Schema Inference for Property Graphs",
  "story": [
    {
      "type": "paragraph",
      "id": "ee3e75c2dd5c8658",
      "text": "⇒ Schema [[Inference for Property Graphs]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Schema Inference for Property Graphs",
        "story": []
      },
      "date": 1664313821404
    },
    {
      "item": {
        "type": "factory",
        "id": "ee3e75c2dd5c8658"
      },
      "id": "ee3e75c2dd5c8658",
      "type": "add",
      "date": 1664313833773
    },
    {
      "type": "edit",
      "id": "ee3e75c2dd5c8658",
      "item": {
        "type": "paragraph",
        "id": "ee3e75c2dd5c8658",
        "text": "Existing PG schema inference methods in available graph databases (such as Neo4j) are simplistic in that they can only output basic edge types and node types and do not take into account the complexity of the PG data model. In particular, they cannot handle complex data types, overlapping node types or node hierarchies. [pdf](https://openproceedings.org/2021/conf/edbt/p279.pdf)"
      },
      "date": 1664313857301
    },
    {
      "type": "edit",
      "id": "ee3e75c2dd5c8658",
      "item": {
        "type": "paragraph",
        "id": "ee3e75c2dd5c8658",
        "text": "Existing PG schema inference methods in available graph databases (such as Neo4j) are simplistic in that they can only output basic edge types and node types and do not take into account the complexity of the PG data model. In particular, they cannot handle complex data types, overlapping node types or node hierarchies. [https://openproceedings.org/2021/conf/edbt/p279.pdf pdf]"
      },
      "date": 1664313871921
    },
    {
      "item": {
        "type": "factory",
        "id": "d9cfd69cffcfcdf1"
      },
      "id": "d9cfd69cffcfcdf1",
      "type": "add",
      "after": "ee3e75c2dd5c8658",
      "date": 1664313892573
    },
    {
      "type": "edit",
      "id": "d9cfd69cffcfcdf1",
      "item": {
        "type": "paragraph",
        "id": "d9cfd69cffcfcdf1",
        "text": "Ward via [matrix]\n> Baseline Comparison. We first compare the schemas inferred by our label-oriented approach with a baseline, the schemas returned by the Neo4j call db.schema query (cf. Table 2). The latter outputs many spurious types as it only targets single-labeled node types, even in the presence of multi-labeled node instances. Moreover, no property types or cardinality constraints can be captured, as opposed to our proposed method. As a result, the baseline schema is not accurate and error-prone."
      },
      "date": 1664313906426
    },
    {
      "type": "edit",
      "id": "d9cfd69cffcfcdf1",
      "item": {
        "type": "markdown",
        "id": "d9cfd69cffcfcdf1",
        "text": "Ward via [matrix]\n> Baseline Comparison. We first compare the schemas inferred by our label-oriented approach with a baseline, the schemas returned by the Neo4j call db.schema query (cf. Table 2). The latter outputs many spurious types as it only targets single-labeled node types, even in the presence of multi-labeled node instances. Moreover, no property types or cardinality constraints can be captured, as opposed to our proposed method. As a result, the baseline schema is not accurate and error-prone."
      },
      "date": 1664313909964
    },
    {
      "type": "edit",
      "id": "d9cfd69cffcfcdf1",
      "item": {
        "type": "markdown",
        "id": "d9cfd69cffcfcdf1",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1664298521267577nzExG:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n> Baseline Comparison. We first compare the schemas inferred by our label-oriented approach with a baseline, the schemas returned by the Neo4j call db.schema query (cf. Table 2). The latter outputs many spurious types as it only targets single-labeled node types, even in the presence of multi-labeled node instances. Moreover, no property types or cardinality constraints can be captured, as opposed to our proposed method. As a result, the baseline schema is not accurate and error-prone."
      },
      "date": 1664313925824
    },
    {
      "type": "edit",
      "id": "ee3e75c2dd5c8658",
      "item": {
        "type": "paragraph",
        "id": "ee3e75c2dd5c8658",
        "text": "⇒ [[Schema Inference for Property Graphs]]Existing PG schema inference methods in available graph databases (such as Neo4j) are simplistic in that they can only output basic edge types and node types and do not take into account the complexity of the PG data model. In particular, they cannot handle complex data types, overlapping node types or node hierarchies. [https://openproceedings.org/2021/conf/edbt/p279.pdf pdf]"
      },
      "date": 1664313973832
    },
    {
      "type": "edit",
      "id": "ee3e75c2dd5c8658",
      "item": {
        "type": "paragraph",
        "id": "ee3e75c2dd5c8658",
        "text": "⇒ [[Schema Inference for Property Graphs]]"
      },
      "date": 1664313982078
    },
    {
      "type": "add",
      "id": "5a467b869656e797",
      "item": {
        "type": "paragraph",
        "id": "5a467b869656e797",
        "text": "Existing PG schema inference methods in available graph databases (such as Neo4j) are simplistic in that they can only output basic edge types and node types and do not take into account the complexity of the PG data model. In particular, they cannot handle complex data types, overlapping node types or node hierarchies. [https://openproceedings.org/2021/conf/edbt/p279.pdf pdf]"
      },
      "after": "ee3e75c2dd5c8658",
      "date": 1664313984334
    },
    {
      "type": "edit",
      "id": "ee3e75c2dd5c8658",
      "item": {
        "type": "paragraph",
        "id": "ee3e75c2dd5c8658",
        "text": "⇒ Schema [[Inference for Property Graphs]]"
      },
      "date": 1664313989476
    },
    {
      "id": "5a467b869656e797",
      "type": "remove",
      "date": 1664313997218
    },
    {
      "id": "d9cfd69cffcfcdf1",
      "type": "remove",
      "date": 1664314002274
    }
  ]
}