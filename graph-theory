{
  "title": "Graph Theory",
  "story": [
    {
      "type": "html",
      "text": "[[Graph Theory]] is the study of graphs.",
      "id": "20bfa996dcd02f1747066a48b52e356b"
    },
    {
      "type": "html",
      "text": "\nA graph is a bunch of vertices and edges (also known as nodes and arcs). Each edge joins two vertices. That's all a graph is. (We don't think of the vertices and edges as being located anywhere in space; a graph is completely specified once you've said that there are N vertices and M edges and <i>these</i> ones are joined to <i>those</i> ones. Although sometimes it's interesting to attach properties to the vertices and edges - colour them, or assign capacities to them and see how much stuff can flow through the network, or whatever.)",
      "id": "1b039adfbc8bc22755073bd469762a48"
    },
    {
      "type": "html",
      "text": "\nIn different areas of study, there can be variation in the exact details of the definition of a graph. For example, should we allow multiple edges joining a single pair of vertices? Should we allow a vertex to be joined to itself? When such variations are allowed, the term \"simple graph\" is used for a graph without such features; when such variations are not allowed, one could specifically refer to a \"multigraph with loops\" for a graph that might have them. Another distinction is between \"undirected\" and \"directed\" graphs: do we think of edges as joining <i>unordered</i> or <i>ordered</i> pairs of vertices? Directed graphs are useful a little more often (at least in \"real world\" applications), but generally the unqualified word \"graph\" means \"undirected graph\".",
      "id": "233c7b7a0954fa801eb3f24327e4e099"
    },
    {
      "type": "html",
      "text": "\n[[Graph Theory]] is a branch of [[Pure Mathematics]], yet has lots of applications. Some examples:",
      "id": "fd796bb230055b0d51a8f2dc91a64772"
    },
    {
      "type": "html",
      "text": " [[Optimizing Compilers]] will usually represent the structure of (part of) a program as a graph, whose vertices are individual operations or [[Basic Block]]s and where edges correspond to possible transfers of control. Graphs are also often used for register allocation, and in fact for lots of other things.",
      "id": "c179499d5dfb348f578541f372df23b9"
    },
    {
      "type": "html",
      "text": " Any situation involving movement through channels of limited capacity. By representing channels as edges in a graph labeled with numbers representing channel capacities, one can use [[Graph Theory]] to find optimal paths of transport through the network. This includes:",
      "id": "eec8a1535b8cef1f0337b8cc4c4cf6ec"
    },
    {
      "type": "html",
      "text": " bits on the internet;",
      "id": "272d24b8d8edf3ad21dc080b3264c4da"
    },
    {
      "type": "html",
      "text": " trucks on roads;",
      "id": "3b0a129dab3328c3e46ecc33c24b2138"
    },
    {
      "type": "html",
      "text": " current and voltage in electrical networks;",
      "id": "1e7bff98befd8a7145e9ac4de8147356"
    },
    {
      "type": "html",
      "text": " fluids in pipelines;",
      "id": "5b6b810deb461cb15694c4df171050a3"
    },
    {
      "type": "html",
      "text": " goods being moved between places;",
      "id": "4c501a048479bd12108db81be082968c"
    },
    {
      "type": "html",
      "text": " money flowing through an economy;",
      "id": "c265611f3ac1b9fb313f115ee1faad68"
    },
    {
      "type": "html",
      "text": " particles in a [[Feynman Diagram]];",
      "id": "55abdae6a4a35a48de205d20f9fe14dc"
    },
    {
      "type": "html",
      "text": " transitions between derived expressions when [[Theorem Proving]]",
      "id": "b6aa5d586a6fc425c77cf76c284eda6b"
    },
    {
      "type": "html",
      "text": " The [[World Wide Web]], or any portion of it, can be thought of as a directed graph whose vertices are Web pages and whose edges are hyperlinks.  The result seems to be a type of graph called a [[Small World]] Graph.",
      "id": "24ea737aea7383e8389516d46031700c"
    },
    {
      "type": "html",
      "text": " VLSI, CAD applications, and CASE tools. (See [[Graph Viz]] for a cool example.) ",
      "id": "d0fd0b43a414f7aebfd9995b1d482cba"
    },
    {
      "type": "html",
      "text": " The behavior of objects can be shown with states as vertices and changes as edges. [[Start Charts]] are an abbreviated form of these.",
      "id": "b128792196a3a1df38151bdbebbf9ad3"
    },
    {
      "type": "html",
      "text": "\nContributors: [[Dick Botting]], [[Joseph Dale]], [[Anonymous Donor]]s",
      "id": "0c349420fe2bc555e403785fe07e12ec"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c67f563ac45c31d7eddfc64f62932fb3"
    },
    {
      "type": "html",
      "text": "[[Graph Theory]] provides a rich language for talking about complex structures.  I jotted down some formal definitions of the language of [[Graph Theory]] in [http://www.csci.csusb.edu/dick/maths/math_22_graphs.html www.csci.csusb.edu]. -- [[Dick Botting]]",
      "id": "6467f1f8cf3ed8b9c28b44bfd5740cee"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c67f563ac45c31d7eddfc64f62932fb3"
    },
    {
      "type": "html",
      "text": "Much of [[Graph Theory]] is isomorphic to [[Matrix Theory]] and where they join is now known as [[Matroid Theory]], see, e.g., [http://members.aol.com/matroids/ members.aol.com]",
      "id": "798b66a817122210030e05997e55e19c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c67f563ac45c31d7eddfc64f62932fb3"
    },
    {
      "type": "html",
      "text": "There are quite a lot of simple-to-understand questions in graph theory that are unsolved. Here's one. Take a (simple, undirected) graph where every vertex has exactly four edges. Is it always possible to find a subset of the vertices and a subset of the edges so that every retained vertex has exactly three retained edges?",
      "id": "818e01c892eba272328ec8faf8cd5c0c"
    },
    {
      "type": "html",
      "text": "\nLike [[Number Theory]], it's a field full of simple questions without answers.",
      "id": "62d3448d871ea73812aae54d7ee305aa"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c67f563ac45c31d7eddfc64f62932fb3"
    },
    {
      "type": "html",
      "text": "Could all aggregate data structures essentially be created from a graph? ",
      "id": "51940ded5042bcb0790c09ef08b7bcb2"
    },
    {
      "type": "html",
      "text": " [[Unordered Collection]] - graph composed of zero edges.  ",
      "id": "fbeead70b212d0f65918eeb0ae5ab399"
    },
    {
      "type": "html",
      "text": " [[Ordered Collection]] - acyclic graph with one path",
      "id": "a223fbe4ef427683c36c55f3867bd21d"
    },
    {
      "type": "html",
      "text": " Hierarchy - directed acyclic graph",
      "id": "13d380532176c83c7c685f363e7fc8f7"
    },
    {
      "type": "html",
      "text": " Graph - graph",
      "id": "0f96b6affe96589323a697672eb1e145"
    },
    {
      "type": "html",
      "text": "\nIt seems that other aggregate data structure properties such as... ",
      "id": "29dc2ec90ed7d68b80e956cd605672cf"
    },
    {
      "type": "html",
      "text": " being sorted or ordered",
      "id": "a8fbc6b30cbdec19fa308c8de99e5920"
    },
    {
      "type": "html",
      "text": " not allowing duplicate values",
      "id": "389fd0619bc6c330fbc49584e60b5c4f"
    },
    {
      "type": "html",
      "text": " immutability",
      "id": "f8ed4aaccc5bd70350240bf4e47d3398"
    },
    {
      "type": "html",
      "text": "\nare almost like filters. For example: if I wanted a [[Sorted Collection]] the input values could be filtered so that they're inserted in the proper location of 'sorted-ness'. If I wanted immutability the operations that would change the state of the values, or even the number of values could be filtered so that they either passively do nothing or actively throw an error. Maybe filters could be wrapped around each other similar to some of Java IO classes?",
      "id": "91c508b72c269be0ee5cb703ed963e2a"
    },
    {
      "type": "html",
      "text": " Graphs, at least by themselves, don't allow you to describe or represent filters, and I can't begin to imagine how you'd go about guaranteeing that there are no duplicate values in a mutable graph (what's a duplicate value in a graph, anyway?  do edges make a difference as to whether the value is the same?).  I'm not convinced you can <b>create</b> these other data structures in terms of graphs, though you probably can represent or impose their data <b>upon</b> a graph.  ",
      "id": "ec3c1475027a99650ecb07c32e3805c2"
    },
    {
      "type": "html",
      "text": "<i>There is something similar called [[Category Theory]], and proponents claim that all mathematics can be restated in category-theoretic terms. You seem to be asking the same sort of question, and the answer is probably \"Yes\". I would add, though, does it help? The answer to that is definitely \"Only sometimes.\"</i>",
      "id": "48534408092c0ddf1ded3781e70a17b7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c67f563ac45c31d7eddfc64f62932fb3"
    },
    {
      "type": "html",
      "text": "\nRe: [[Unordered Collection]] - graph composed of zero edges.",
      "id": "3332ac3744d0c8a77cf19eb0524e2de5"
    },
    {
      "type": "html",
      "text": "<i>A graph with a single vertex, the only way to have no edges, implies a single datum.  This is not a collection.  A better example would be a collection of vertices that are fully meshed (e.g., a vertex has an edge to <b>every</b> other vertex).  This allows one the ability to enumerate the contents of the collection, but no discernable directivity or associativity exists.</i>' --[[Samuel Falvo]]",
      "id": "ffa082faccc21710dc66d560008279b1"
    },
    {
      "type": "html",
      "text": "\nI believe you're thinking in terms of the 'connected' graph.  It is quite possible to describe a graph with many vertices and no edges whatsoever.  A complete graph, as you're suggesting, would also work (it being isomorphic to the completely disconnected graph)... but I'd steer clear of it if only because it too readily presents the possibility of attaching semantic information to each edge in the graph (e.g. a label or a number), at which point the presence of edges becomes significant and associativity becomes relevant.  This would come naturally to mind because each vertex in the collection must already have semantic information (this being the 'value' or an identifier for an 'object' found within the collection).  ",
      "id": "ee8477438f30d6cb6d92cf75873e281a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c67f563ac45c31d7eddfc64f62932fb3"
    },
    {
      "type": "html",
      "text": "[[Category Jargon]] [[Category Math]]",
      "id": "fc09fa28b70cd6ad244c65414c270fa7"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?GraphTheory c2.com]",
      "id": "228959a2360d05f057ba62dd9c03e970"
    }
  ],
  "journal": [
    {
      "date": 1369727661000,
      "id": "e8f38d9b0cfcaacd21b7de8a2a04b0ba",
      "type": "create",
      "item": {
        "title": "Graph Theory",
        "story": [
          {
            "type": "html",
            "text": "[[Graph Theory]] is the study of graphs.",
            "id": "20bfa996dcd02f1747066a48b52e356b"
          },
          {
            "type": "html",
            "text": "\nA graph is a bunch of vertices and edges (also known as nodes and arcs). Each edge joins two vertices. That's all a graph is. (We don't think of the vertices and edges as being located anywhere in space; a graph is completely specified once you've said that there are N vertices and M edges and <i>these</i> ones are joined to <i>those</i> ones. Although sometimes it's interesting to attach properties to the vertices and edges - colour them, or assign capacities to them and see how much stuff can flow through the network, or whatever.)",
            "id": "1b039adfbc8bc22755073bd469762a48"
          },
          {
            "type": "html",
            "text": "\nIn different areas of study, there can be variation in the exact details of the definition of a graph. For example, should we allow multiple edges joining a single pair of vertices? Should we allow a vertex to be joined to itself? When such variations are allowed, the term \"simple graph\" is used for a graph without such features; when such variations are not allowed, one could specifically refer to a \"multigraph with loops\" for a graph that might have them. Another distinction is between \"undirected\" and \"directed\" graphs: do we think of edges as joining <i>unordered</i> or <i>ordered</i> pairs of vertices? Directed graphs are useful a little more often (at least in \"real world\" applications), but generally the unqualified word \"graph\" means \"undirected graph\".",
            "id": "233c7b7a0954fa801eb3f24327e4e099"
          },
          {
            "type": "html",
            "text": "\n[[Graph Theory]] is a branch of [[Pure Mathematics]], yet has lots of applications. Some examples:",
            "id": "fd796bb230055b0d51a8f2dc91a64772"
          },
          {
            "type": "html",
            "text": " [[Optimizing Compilers]] will usually represent the structure of (part of) a program as a graph, whose vertices are individual operations or [[Basic Block]]s and where edges correspond to possible transfers of control. Graphs are also often used for register allocation, and in fact for lots of other things.",
            "id": "c179499d5dfb348f578541f372df23b9"
          },
          {
            "type": "html",
            "text": " Any situation involving movement through channels of limited capacity. By representing channels as edges in a graph labeled with numbers representing channel capacities, one can use [[Graph Theory]] to find optimal paths of transport through the network. This includes:",
            "id": "eec8a1535b8cef1f0337b8cc4c4cf6ec"
          },
          {
            "type": "html",
            "text": " bits on the internet;",
            "id": "272d24b8d8edf3ad21dc080b3264c4da"
          },
          {
            "type": "html",
            "text": " trucks on roads;",
            "id": "3b0a129dab3328c3e46ecc33c24b2138"
          },
          {
            "type": "html",
            "text": " current and voltage in electrical networks;",
            "id": "1e7bff98befd8a7145e9ac4de8147356"
          },
          {
            "type": "html",
            "text": " fluids in pipelines;",
            "id": "5b6b810deb461cb15694c4df171050a3"
          },
          {
            "type": "html",
            "text": " goods being moved between places;",
            "id": "4c501a048479bd12108db81be082968c"
          },
          {
            "type": "html",
            "text": " money flowing through an economy;",
            "id": "c265611f3ac1b9fb313f115ee1faad68"
          },
          {
            "type": "html",
            "text": " particles in a [[Feynman Diagram]];",
            "id": "55abdae6a4a35a48de205d20f9fe14dc"
          },
          {
            "type": "html",
            "text": " transitions between derived expressions when [[Theorem Proving]]",
            "id": "b6aa5d586a6fc425c77cf76c284eda6b"
          },
          {
            "type": "html",
            "text": " The [[World Wide Web]], or any portion of it, can be thought of as a directed graph whose vertices are Web pages and whose edges are hyperlinks.  The result seems to be a type of graph called a [[Small World]] Graph.",
            "id": "24ea737aea7383e8389516d46031700c"
          },
          {
            "type": "html",
            "text": " VLSI, CAD applications, and CASE tools. (See [[Graph Viz]] for a cool example.) ",
            "id": "d0fd0b43a414f7aebfd9995b1d482cba"
          },
          {
            "type": "html",
            "text": " The behavior of objects can be shown with states as vertices and changes as edges. [[Start Charts]] are an abbreviated form of these.",
            "id": "b128792196a3a1df38151bdbebbf9ad3"
          },
          {
            "type": "html",
            "text": "\nContributors: [[Dick Botting]], [[Joseph Dale]], [[Anonymous Donor]]s",
            "id": "0c349420fe2bc555e403785fe07e12ec"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c67f563ac45c31d7eddfc64f62932fb3"
          },
          {
            "type": "html",
            "text": "[[Graph Theory]] provides a rich language for talking about complex structures.  I jotted down some formal definitions of the language of [[Graph Theory]] in [http://www.csci.csusb.edu/dick/maths/math_22_graphs.html www.csci.csusb.edu]. -- [[Dick Botting]]",
            "id": "6467f1f8cf3ed8b9c28b44bfd5740cee"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c67f563ac45c31d7eddfc64f62932fb3"
          },
          {
            "type": "html",
            "text": "Much of [[Graph Theory]] is isomorphic to [[Matrix Theory]] and where they join is now known as [[Matroid Theory]], see, e.g., [http://members.aol.com/matroids/ members.aol.com]",
            "id": "798b66a817122210030e05997e55e19c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c67f563ac45c31d7eddfc64f62932fb3"
          },
          {
            "type": "html",
            "text": "There are quite a lot of simple-to-understand questions in graph theory that are unsolved. Here's one. Take a (simple, undirected) graph where every vertex has exactly four edges. Is it always possible to find a subset of the vertices and a subset of the edges so that every retained vertex has exactly three retained edges?",
            "id": "818e01c892eba272328ec8faf8cd5c0c"
          },
          {
            "type": "html",
            "text": "\nLike [[Number Theory]], it's a field full of simple questions without answers.",
            "id": "62d3448d871ea73812aae54d7ee305aa"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c67f563ac45c31d7eddfc64f62932fb3"
          },
          {
            "type": "html",
            "text": "Could all aggregate data structures essentially be created from a graph? ",
            "id": "51940ded5042bcb0790c09ef08b7bcb2"
          },
          {
            "type": "html",
            "text": " [[Unordered Collection]] - graph composed of zero edges.  ",
            "id": "fbeead70b212d0f65918eeb0ae5ab399"
          },
          {
            "type": "html",
            "text": " [[Ordered Collection]] - acyclic graph with one path",
            "id": "a223fbe4ef427683c36c55f3867bd21d"
          },
          {
            "type": "html",
            "text": " Hierarchy - directed acyclic graph",
            "id": "13d380532176c83c7c685f363e7fc8f7"
          },
          {
            "type": "html",
            "text": " Graph - graph",
            "id": "0f96b6affe96589323a697672eb1e145"
          },
          {
            "type": "html",
            "text": "\nIt seems that other aggregate data structure properties such as... ",
            "id": "29dc2ec90ed7d68b80e956cd605672cf"
          },
          {
            "type": "html",
            "text": " being sorted or ordered",
            "id": "a8fbc6b30cbdec19fa308c8de99e5920"
          },
          {
            "type": "html",
            "text": " not allowing duplicate values",
            "id": "389fd0619bc6c330fbc49584e60b5c4f"
          },
          {
            "type": "html",
            "text": " immutability",
            "id": "f8ed4aaccc5bd70350240bf4e47d3398"
          },
          {
            "type": "html",
            "text": "\nare almost like filters. For example: if I wanted a [[Sorted Collection]] the input values could be filtered so that they're inserted in the proper location of 'sorted-ness'. If I wanted immutability the operations that would change the state of the values, or even the number of values could be filtered so that they either passively do nothing or actively throw an error. Maybe filters could be wrapped around each other similar to some of Java IO classes?",
            "id": "91c508b72c269be0ee5cb703ed963e2a"
          },
          {
            "type": "html",
            "text": " Graphs, at least by themselves, don't allow you to describe or represent filters, and I can't begin to imagine how you'd go about guaranteeing that there are no duplicate values in a mutable graph (what's a duplicate value in a graph, anyway?  do edges make a difference as to whether the value is the same?).  I'm not convinced you can <b>create</b> these other data structures in terms of graphs, though you probably can represent or impose their data <b>upon</b> a graph.  ",
            "id": "ec3c1475027a99650ecb07c32e3805c2"
          },
          {
            "type": "html",
            "text": "<i>There is something similar called [[Category Theory]], and proponents claim that all mathematics can be restated in category-theoretic terms. You seem to be asking the same sort of question, and the answer is probably \"Yes\". I would add, though, does it help? The answer to that is definitely \"Only sometimes.\"</i>",
            "id": "48534408092c0ddf1ded3781e70a17b7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c67f563ac45c31d7eddfc64f62932fb3"
          },
          {
            "type": "html",
            "text": "\nRe: [[Unordered Collection]] - graph composed of zero edges.",
            "id": "3332ac3744d0c8a77cf19eb0524e2de5"
          },
          {
            "type": "html",
            "text": "<i>A graph with a single vertex, the only way to have no edges, implies a single datum.  This is not a collection.  A better example would be a collection of vertices that are fully meshed (e.g., a vertex has an edge to <b>every</b> other vertex).  This allows one the ability to enumerate the contents of the collection, but no discernable directivity or associativity exists.</i>' --[[Samuel Falvo]]",
            "id": "ffa082faccc21710dc66d560008279b1"
          },
          {
            "type": "html",
            "text": "\nI believe you're thinking in terms of the 'connected' graph.  It is quite possible to describe a graph with many vertices and no edges whatsoever.  A complete graph, as you're suggesting, would also work (it being isomorphic to the completely disconnected graph)... but I'd steer clear of it if only because it too readily presents the possibility of attaching semantic information to each edge in the graph (e.g. a label or a number), at which point the presence of edges becomes significant and associativity becomes relevant.  This would come naturally to mind because each vertex in the collection must already have semantic information (this being the 'value' or an identifier for an 'object' found within the collection).  ",
            "id": "ee8477438f30d6cb6d92cf75873e281a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c67f563ac45c31d7eddfc64f62932fb3"
          },
          {
            "type": "html",
            "text": "[[Category Jargon]] [[Category Math]]",
            "id": "fc09fa28b70cd6ad244c65414c270fa7"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?GraphTheory c2.com]",
            "id": "228959a2360d05f057ba62dd9c03e970"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1654243800674
    }
  ]
}