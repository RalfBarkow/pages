{
  "title": "Debt Metaphor Explained",
  "story": [
    {
      "type": "paragraph",
      "id": "86612745c5f3e268",
      "text": "While programming we continually make decisions about the future. An important skill is deciding which decisions to make when. This deciding about deciding confuses many people even programmers."
    },
    {
      "type": "markdown",
      "id": "73605c59aaa8c737",
      "text": "# Decisions"
    },
    {
      "type": "paragraph",
      "id": "8579bff934f1d439",
      "text": "In the 1980's I threw myself into the then new discipline of object-oriented programming where a small change in thinking had many surprising benefits. One that was often missed was that I could use its modeling versatility to create new options for when decisions must be made."
    },
    {
      "type": "paragraph",
      "id": "51a5e60c8dc4b151",
      "text": "Many people advanced theories about design in the context of object. Most of these revolved around capturing the diversity present in the physical world. This advice was occasionally useful but not nearly as useful as using objects to capture diversity in the work in front of me, programming."
    },
    {
      "type": "paragraph",
      "id": "3f796cd9666be089",
      "text": "I felt that I had discovered something important. Objects offered a new kind of modularity which let me compartmentalize the decisions in front of me. This worked especially well on a team where the objects embodied these decisions which became common knowledge among my colleagues and made discussions of priorities effortless."
    },
    {
      "type": "paragraph",
      "id": "e2060c6dd0013ad5",
      "text": "The most tangible consequence of using objects to model our own progress was that progress continued smoothly month after month, year after year. The program got better every day, more flexible, easier to improve, free of looming disaster."
    },
    {
      "type": "markdown",
      "id": "b12d7728e0dad81d",
      "text": "# Metaphor"
    },
    {
      "type": "paragraph",
      "id": "6a9e9fcc7d16194a",
      "text": "We struggle to explain what goes on within our heads as we make the long strings of compounding decisions required of any engineering discipline. The material we work when programming is so light and readily available that our own thinking completely dominates schedules unlike any other form of engineering. Decisions take time but little else."
    },
    {
      "type": "paragraph",
      "id": "ca1e25675f525552",
      "text": "We often speak of time as if it were money. We spend time with our kids, or save time with a new skill. We wish we had more time when we don't. We say time is money even when we know they are different. We speak of time metaphorically as money and the metaphor mostly works."
    },
    {
      "type": "paragraph",
      "id": "60c1db72b05fb85a",
      "text": "Time is literally money to entrepreneurs. They race to market having borrowed other people's money and share the returns when they succeed. The terms are clear: they win, they share, they lose, the money is gone."
    },
    {
      "type": "paragraph",
      "id": "216a687437f3d529",
      "text": "The debt metaphor is simple. Decisions take time. Time is money. Delaying decisions is borrowing money."
    },
    {
      "type": "paragraph",
      "id": "9ad73fe955d51341",
      "text": "The parts of this metaphor that eludes people is that taking on technical debut is a strategy. But it can only be good strategy when you understand how to use it to makes software better."
    },
    {
      "type": "markdown",
      "id": "5e102dc44cda30cf",
      "text": "# Technique"
    },
    {
      "type": "paragraph",
      "id": "31dbd7c5be1dd830",
      "text": "I must now explain what it is like to move programming decisions around using objects and how these choices become strategic. How we properly borrow time."
    },
    {
      "type": "paragraph",
      "id": "998094357396efae",
      "text": "Imagine the conversation between two developers as they make and discuss decisions about their work. They talk about what might be expected and how they will coax the machine to meet those expectations. Let's call this the work. But there is lots more talk, lots more to be decided. There is meta work, the work about deciding how to go about the work. They are deciding about deciding."
    },
    {
      "type": "paragraph",
      "id": "804f6155326bee7a",
      "text": "The developer's conversation will turn to how much they know about expectations, how they could learn more, how they will know when they have learned enough and when they should stop putting what they've learned into the program. Remember, they are making decisions about the future and the future is always uncertain."
    },
    {
      "type": "paragraph",
      "id": "84ebf4ed2862235d",
      "text": "When working with objects developers in this fix always have an easy way out: decide now to have multiple kinds of objects where some can be program now with other variations to come later. This buys time to move on to other important work."
    },
    {
      "type": "paragraph",
      "id": "4796cfe457b97b01",
      "text": "Eventually there will be a clear need for the work that has been left undone. A second or third version of the object will be reasoned about, decided, and put in place. There is more meta work now: can the first version be discarded? If not, can it meet an expanded interface of the later versions? At what cost and benefit?"
    },
    {
      "type": "paragraph",
      "id": "55d51d7b9d8b1b5f",
      "text": "To employ the debt strategy is to become good at these decisions too. To have skills at meta work."
    },
    {
      "type": "paragraph",
      "id": "8a715db01039faa9",
      "text": "Some programs are piles of poor decisions and their owners speak of technical debt as if this bankruptcy is what I was trying to explain. They missed my point. They may be incapable of getting my point because they don't understand method dispatch, have never used it to model uncertainty, or maybe don't get where programmers spend their time."
    },
    {
      "type": "markdown",
      "id": "cda74db5a4c2dc72",
      "text": "# Reflection"
    },
    {
      "type": "paragraph",
      "id": "34436ff9689ef62d",
      "text": "One might wonder if they have the skills to borrow time as I have described. I say probably not. They are programming skills applied in one's stream of thought while making programming decisions balancing the present with the future in intricate situations."
    },
    {
      "type": "paragraph",
      "id": "e8707085b2896c1f",
      "text": "I have described the technique as a conversation between two programmers in the act of programming for a reason. Pairing encourages meta work while the work progresses. What problem are we trying to solve? When are we really going to need that? Will we remember that when we come back later?"
    },
    {
      "type": "paragraph",
      "id": "48e13f677f1af733",
      "text": "These conversations did not happen before there were object to which they apply or before there were screens large enough and programming fast enough for colleagues to see it happening. Then the work and the meta work could be articulated, pointing at the screen, finding words for what happened, remembering these words, and building on them skills and experience."
    },
    {
      "type": "pagefold",
      "id": "1e1cca06a0675c1b",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "fce32a3ce3aba545",
      "text": "See also [[Quantifying Technical Debt]]"
    },
    {
      "type": "paragraph",
      "id": "4a844a8fb491895e",
      "text": "Technical Debt - Prevention, Diagnosis and Cure:\nA reading and resources list with lots of ways to diagnose, prevent and control tech debt. [https://github.com/jamesefhawkins/tech-debt-reading-list site]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Debt Metaphor Explained",
        "story": []
      },
      "date": 1535809570132
    },
    {
      "item": {
        "type": "factory",
        "id": "86612745c5f3e268"
      },
      "id": "86612745c5f3e268",
      "type": "add",
      "date": 1535809579435
    },
    {
      "type": "edit",
      "id": "86612745c5f3e268",
      "item": {
        "type": "paragraph",
        "id": "86612745c5f3e268",
        "text": "While programming we continually make decisions about the future. An important skill is deciding which decisions to make when. This deciding about deciding confuses many people even programmers."
      },
      "date": 1535809856346
    },
    {
      "type": "add",
      "id": "8579bff934f1d439",
      "item": {
        "type": "paragraph",
        "id": "8579bff934f1d439",
        "text": "In the 1980's I threw myself into the then new discipline of object-oriented programming where a small change in thinking had many surprising benefits. One that was often missed was that I could use its modeling versatility to create new options for when decisions must be made."
      },
      "after": "86612745c5f3e268",
      "date": 1535810150380
    },
    {
      "type": "add",
      "id": "51a5e60c8dc4b151",
      "item": {
        "type": "paragraph",
        "id": "51a5e60c8dc4b151",
        "text": "Many people advanced theories about design in the context of object. Most of these revolved around capturing the diversity present in the physical world. This advice was occasionally useful but not nearly as useful as using objects to capture diversity in the work in front of me, programming."
      },
      "after": "8579bff934f1d439",
      "date": 1535810833305
    },
    {
      "type": "add",
      "id": "3f796cd9666be089",
      "item": {
        "type": "paragraph",
        "id": "3f796cd9666be089",
        "text": "I felt that I had discovered something important. Objects offered a new kind of modularity which let me compartmentalize the decisions in front of me. This worked especially well on a team where the objects embodied these decisions which became common knowledge among my colleagues and made discussions of priorities effortless."
      },
      "after": "51a5e60c8dc4b151",
      "date": 1535811171312
    },
    {
      "type": "add",
      "id": "e2060c6dd0013ad5",
      "item": {
        "type": "paragraph",
        "id": "e2060c6dd0013ad5",
        "text": "The most tangible consequence of using objects to model our own progress was that progress continued smoothly month after month, year after year. The program got better every day."
      },
      "after": "3f796cd9666be089",
      "date": 1535811442726
    },
    {
      "type": "edit",
      "id": "e2060c6dd0013ad5",
      "item": {
        "type": "paragraph",
        "id": "e2060c6dd0013ad5",
        "text": "The most tangible consequence of using objects to model our own progress was that progress continued smoothly month after month, year after year. The program got better every day, more flexible, easier to improve, free of looming disaster."
      },
      "date": 1535811799739
    },
    {
      "type": "add",
      "id": "b12d7728e0dad81d",
      "item": {
        "type": "paragraph",
        "id": "b12d7728e0dad81d",
        "text": "# Metaphor"
      },
      "after": "e2060c6dd0013ad5",
      "date": 1535812455739
    },
    {
      "type": "add",
      "id": "73605c59aaa8c737",
      "item": {
        "type": "paragraph",
        "id": "73605c59aaa8c737",
        "text": "# Decisions"
      },
      "after": "86612745c5f3e268",
      "date": 1535812482186
    },
    {
      "type": "edit",
      "id": "73605c59aaa8c737",
      "item": {
        "type": "markdown",
        "id": "73605c59aaa8c737",
        "text": "# Decisions"
      },
      "date": 1535812484870
    },
    {
      "type": "add",
      "id": "6a9e9fcc7d16194a",
      "item": {
        "type": "paragraph",
        "id": "6a9e9fcc7d16194a",
        "text": "We struggle to explain what goes on within our heads as we make the long strings of compounding decisions required of any engineering discipline. The material we work in programming is so light and readily available our own thinking completely dominates our schedules, unlike any other form of engineering. Decisions take time."
      },
      "after": "b12d7728e0dad81d",
      "date": 1535813172021
    },
    {
      "type": "add",
      "id": "ca1e25675f525552",
      "item": {
        "type": "paragraph",
        "id": "ca1e25675f525552",
        "text": "We often speak of time as if it were money. We spend time with our kids, or save time with a new skill. We wish we had more when we don't. We say time is money even when we know they are different. We speak of time metaphorically as money and the metaphor mostly works."
      },
      "after": "6a9e9fcc7d16194a",
      "date": 1535813416570
    },
    {
      "type": "edit",
      "id": "b12d7728e0dad81d",
      "item": {
        "type": "markdown",
        "id": "b12d7728e0dad81d",
        "text": "# Metaphor"
      },
      "date": 1535813465904
    },
    {
      "type": "add",
      "id": "60c1db72b05fb85a",
      "item": {
        "type": "paragraph",
        "id": "60c1db72b05fb85a",
        "text": "Time is literally money to entrepreneurs. They race to market having borrowed other people's money and share the returns when they succeed. The terms are clear: they win, they share, they lose, the money is gone."
      },
      "after": "ca1e25675f525552",
      "date": 1535815925738
    },
    {
      "type": "add",
      "id": "216a687437f3d529",
      "item": {
        "type": "paragraph",
        "id": "216a687437f3d529",
        "text": "The debt metaphor is simple. Decisions take time. Time is money. Delaying decisions is borrowing money."
      },
      "after": "60c1db72b05fb85a",
      "date": 1535816118799
    },
    {
      "type": "add",
      "id": "9ad73fe955d51341",
      "item": {
        "type": "paragraph",
        "id": "9ad73fe955d51341",
        "text": "The parts of this metaphor that eludes people is that taking on technical debut is strategy. It can be good strategy if you understand how it makes software better."
      },
      "after": "216a687437f3d529",
      "date": 1535816363895
    },
    {
      "type": "add",
      "id": "dcd06bcc1a485b12",
      "item": {
        "type": "paragraph",
        "id": "dcd06bcc1a485b12",
        "text": "Strategic use of technical debt makes software better."
      },
      "after": "9ad73fe955d51341",
      "date": 1535816388741
    },
    {
      "type": "add",
      "id": "5e102dc44cda30cf",
      "item": {
        "type": "paragraph",
        "id": "5e102dc44cda30cf",
        "text": "# Technique"
      },
      "after": "dcd06bcc1a485b12",
      "date": 1535816451820
    },
    {
      "type": "add",
      "id": "31dbd7c5be1dd830",
      "item": {
        "type": "paragraph",
        "id": "31dbd7c5be1dd830",
        "text": "I must now explain what it is like to move decisions around using objects and how these choices become strategic."
      },
      "after": "5e102dc44cda30cf",
      "date": 1535816555705
    },
    {
      "type": "edit",
      "id": "5e102dc44cda30cf",
      "item": {
        "type": "markdown",
        "id": "5e102dc44cda30cf",
        "text": "# Technique"
      },
      "date": 1535816558864
    },
    {
      "type": "edit",
      "id": "31dbd7c5be1dd830",
      "item": {
        "type": "paragraph",
        "id": "31dbd7c5be1dd830",
        "text": "I must now explain what it is like to move programming decisions around using objects and how these choices become strategic."
      },
      "date": 1535816575417
    },
    {
      "type": "edit",
      "id": "31dbd7c5be1dd830",
      "item": {
        "type": "paragraph",
        "id": "31dbd7c5be1dd830",
        "text": "I must now explain what it is like to move programming decisions around using objects and how these choices become strategic. How we properly borrow time."
      },
      "date": 1535816594784
    },
    {
      "type": "add",
      "id": "998094357396efae",
      "item": {
        "type": "paragraph",
        "id": "998094357396efae",
        "text": "Imagine the conversation between two developers as they make and discuss decisions about their work. They talk about what might be expected and how they will coax the machine to meet those expectations. Let's call this the work. But there is lots more to be decided. There is meta work, the work about deciding how to go about the work. They are deciding about deciding."
      },
      "after": "31dbd7c5be1dd830",
      "date": 1535817260025
    },
    {
      "type": "edit",
      "id": "998094357396efae",
      "item": {
        "type": "paragraph",
        "id": "998094357396efae",
        "text": "Imagine the conversation between two developers as they make and discuss decisions about their work. They talk about what might be expected and how they will coax the machine to meet those expectations. Let's call this the work. But there is lots more talk, lots more to be decided. There is meta work, the work about deciding how to go about the work. They are deciding about deciding."
      },
      "date": 1535817306727
    },
    {
      "type": "add",
      "id": "804f6155326bee7a",
      "item": {
        "type": "paragraph",
        "id": "804f6155326bee7a",
        "text": "The developer's conversation will turn to how much they know about expectations, how they could learn more, how they will know when they have learned enough and when they should stop putting that learning into the program. Remember, they are making decisions about the future and the future is always unclear."
      },
      "after": "998094357396efae",
      "date": 1535817488250
    },
    {
      "type": "edit",
      "id": "804f6155326bee7a",
      "item": {
        "type": "paragraph",
        "id": "804f6155326bee7a",
        "text": "The developer's conversation will turn to how much they know about expectations, how they could learn more, how they will know when they have learned enough and when they should stop putting what they've learned into the program. Remember, they are making decisions about the future and the future is always unclear."
      },
      "date": 1535817543482
    },
    {
      "type": "edit",
      "id": "804f6155326bee7a",
      "item": {
        "type": "paragraph",
        "id": "804f6155326bee7a",
        "text": "The developer's conversation will turn to how much they know about expectations, how they could learn more, how they will know when they have learned enough and when they should stop putting what they've learned into the program. Remember, they are making decisions about the future and the future is always uncertain."
      },
      "date": 1535817729859
    },
    {
      "type": "add",
      "id": "84ebf4ed2862235d",
      "item": {
        "type": "paragraph",
        "id": "84ebf4ed2862235d",
        "text": "When working with objects developers in this fix always have an easy way out: decide now to have multiple kinds of objects, some of which we can program now, other variations that will come later. This buys them time to move on to other important work. Time is money and they've chosen to take on some debt."
      },
      "after": "804f6155326bee7a",
      "date": 1535818024446
    },
    {
      "type": "edit",
      "id": "84ebf4ed2862235d",
      "item": {
        "type": "paragraph",
        "id": "84ebf4ed2862235d",
        "text": "When working with objects developers in this fix always have an easy way out: decide now to have multiple kinds of objects where some can be program now with other variations to come later. This buys time to move on to other important work."
      },
      "date": 1535818937675
    },
    {
      "type": "add",
      "id": "4796cfe457b97b01",
      "item": {
        "type": "paragraph",
        "id": "4796cfe457b97b01",
        "text": "Eventually there will be a clear need for the work that has been left undone. A second or third version of the object will be reasoned about, decided, and put in place. There is more meta work now: can the first version be discarded? If not, can it meet an expanded interface of the later versions? At what cost and benefit?"
      },
      "after": "84ebf4ed2862235d",
      "date": 1535819423556
    },
    {
      "type": "add",
      "id": "55d51d7b9d8b1b5f",
      "item": {
        "type": "paragraph",
        "id": "55d51d7b9d8b1b5f",
        "text": "To employ the debt strategy is to become good at these decisions too. To have skills at meta work."
      },
      "after": "4796cfe457b97b01",
      "date": 1535819700636
    },
    {
      "type": "add",
      "id": "8a715db01039faa9",
      "item": {
        "type": "paragraph",
        "id": "8a715db01039faa9",
        "text": "Some programs are piles of poor decisions and their owners speak of technical debt as if this bankruptcy is what I was trying to explain. They missed my point. They may be incapable of getting my point because they don't understand method dispatch, have never used it to model uncertainty, or maybe don't get where programmers spend their time."
      },
      "after": "55d51d7b9d8b1b5f",
      "date": 1535820098242
    },
    {
      "type": "add",
      "id": "cda74db5a4c2dc72",
      "item": {
        "type": "paragraph",
        "id": "cda74db5a4c2dc72",
        "text": "# Reflection"
      },
      "after": "8a715db01039faa9",
      "date": 1535820288433
    },
    {
      "type": "add",
      "id": "34436ff9689ef62d",
      "item": {
        "type": "paragraph",
        "id": "34436ff9689ef62d",
        "text": "One might wonder if they have the skills to borrow time as I have described. I say probably not. They are programming skills applied in the stream of thought while making programming decisions balancing present with future in intricate situations."
      },
      "after": "cda74db5a4c2dc72",
      "date": 1535821036486
    },
    {
      "type": "edit",
      "id": "34436ff9689ef62d",
      "item": {
        "type": "paragraph",
        "id": "34436ff9689ef62d",
        "text": "One might wonder if they have the skills to borrow time as I have described. I say probably not. They are programming skills applied in one's stream of thought while making programming decisions balancing the present with the future in intricate situations."
      },
      "date": 1535821132218
    },
    {
      "type": "add",
      "id": "e8707085b2896c1f",
      "item": {
        "type": "paragraph",
        "id": "e8707085b2896c1f",
        "text": "I described the technique as a conversation between two programmers in the act of programming. These conversations did not happen before there were object to which they apply or before there were screens large enough and programming fast enough for colleagues to see it happening. Then the work and the meta work could be articulated, pointing at the screen, finding words for what happened, remembering those words, and building on them skills and experience."
      },
      "after": "34436ff9689ef62d",
      "date": 1535821625317
    },
    {
      "type": "edit",
      "id": "e8707085b2896c1f",
      "item": {
        "type": "paragraph",
        "id": "e8707085b2896c1f",
        "text": "I described the technique as a conversation between two programmers in the act of programming. These conversations did not happen before there were object to which they apply or before there were screens large enough and programming fast enough for colleagues to see it happening. Then the work and the meta work could be articulated, pointing at the screen, finding words for what happened, remembering these words, and building on them skills and experience."
      },
      "date": 1535821670380
    },
    {
      "type": "edit",
      "id": "cda74db5a4c2dc72",
      "item": {
        "type": "markdown",
        "id": "cda74db5a4c2dc72",
        "text": "# Reflection"
      },
      "date": 1535821674552
    },
    {
      "type": "edit",
      "id": "6a9e9fcc7d16194a",
      "item": {
        "type": "paragraph",
        "id": "6a9e9fcc7d16194a",
        "text": "We struggle to explain what goes on within our heads as we make the long strings of compounding decisions required of any engineering discipline. The material we work when programming is so light and readily available our own thinking completely dominates our schedules, unlike any other form of engineering. Decisions take time."
      },
      "date": 1535843948441
    },
    {
      "type": "edit",
      "id": "6a9e9fcc7d16194a",
      "item": {
        "type": "paragraph",
        "id": "6a9e9fcc7d16194a",
        "text": "We struggle to explain what goes on within our heads as we make the long strings of compounding decisions required of any engineering discipline. The material we work when programming is so light and readily available that our own thinking completely dominates schedules unlike any other form of engineering. Decisions take time but little else."
      },
      "date": 1535844032996
    },
    {
      "type": "edit",
      "id": "ca1e25675f525552",
      "item": {
        "type": "paragraph",
        "id": "ca1e25675f525552",
        "text": "We often speak of time as if it were money. We spend time with our kids, or save time with a new skill. We wish we had more time when we don't. We say time is money even when we know they are different. We speak of time metaphorically as money and the metaphor mostly works."
      },
      "date": 1535844125299
    },
    {
      "type": "edit",
      "id": "9ad73fe955d51341",
      "item": {
        "type": "paragraph",
        "id": "9ad73fe955d51341",
        "text": "The parts of this metaphor that eludes people is that taking on technical debut is a strategy. But it can only be good strategy when you understand how to use it to makes software better."
      },
      "date": 1535844219864
    },
    {
      "type": "remove",
      "id": "dcd06bcc1a485b12",
      "date": 1535844255966
    },
    {
      "type": "edit",
      "id": "e8707085b2896c1f",
      "item": {
        "type": "paragraph",
        "id": "e8707085b2896c1f",
        "text": "I have described the technique as a conversation between two programmers in the act of programming for a reason. These conversations did not happen before there were object to which they apply or before there were screens large enough and programming fast enough for colleagues to see it happening. Then the work and the meta work could be articulated, pointing at the screen, finding words for what happened, remembering these words, and building on them skills and experience."
      },
      "date": 1535844337908
    },
    {
      "type": "edit",
      "id": "e8707085b2896c1f",
      "item": {
        "type": "paragraph",
        "id": "e8707085b2896c1f",
        "text": "I have described the technique as a conversation between two programmers in the act of programming for a reason. Pairing encourages meta work while the work progresses. What problem are we trying to solve? When are we really going to need that?"
      },
      "date": 1535845637963
    },
    {
      "type": "add",
      "id": "48e13f677f1af733",
      "item": {
        "type": "paragraph",
        "id": "48e13f677f1af733",
        "text": "These conversations did not happen before there were object to which they apply or before there were screens large enough and programming fast enough for colleagues to see it happening. Then the work and the meta work could be articulated, pointing at the screen, finding words for what happened, remembering these words, and building on them skills and experience."
      },
      "after": "e8707085b2896c1f",
      "date": 1535845643898
    },
    {
      "type": "edit",
      "id": "e8707085b2896c1f",
      "item": {
        "type": "paragraph",
        "id": "e8707085b2896c1f",
        "text": "I have described the technique as a conversation between two programmers in the act of programming for a reason. Pairing encourages meta work while the work progresses. What problem are we trying to solve? When are we really going to need that? Will we remember that when we come back later?"
      },
      "date": 1535845746255
    },
    {
      "item": {
        "type": "factory",
        "id": "1e1cca06a0675c1b"
      },
      "id": "1e1cca06a0675c1b",
      "type": "add",
      "after": "48e13f677f1af733",
      "date": 1535851376877
    },
    {
      "type": "edit",
      "id": "1e1cca06a0675c1b",
      "item": {
        "type": "pagefold",
        "id": "1e1cca06a0675c1b",
        "text": "."
      },
      "date": 1535851382779
    },
    {
      "item": {
        "type": "factory",
        "id": "fce32a3ce3aba545"
      },
      "id": "fce32a3ce3aba545",
      "type": "add",
      "after": "1e1cca06a0675c1b",
      "date": 1535851384914
    },
    {
      "type": "edit",
      "id": "fce32a3ce3aba545",
      "item": {
        "type": "paragraph",
        "id": "fce32a3ce3aba545",
        "text": "See also [[Quantifying Technical Debt]]"
      },
      "date": 1535851395754
    },
    {
      "type": "fork",
      "site": "ward.bay.wiki.org",
      "date": 1549765794225
    },
    {
      "type": "add",
      "id": "4a844a8fb491895e",
      "item": {
        "type": "paragraph",
        "id": "4a844a8fb491895e",
        "text": "Technical Debt - Prevention, Diagnosis and Cure:\nA reading and resources list with lots of ways to diagnose, prevent and control tech debt."
      },
      "after": "fce32a3ce3aba545",
      "date": 1571510747273
    },
    {
      "type": "edit",
      "id": "4a844a8fb491895e",
      "item": {
        "type": "paragraph",
        "id": "4a844a8fb491895e",
        "text": "Technical Debt - Prevention, Diagnosis and Cure:\nA reading and resources list with lots of ways to diagnose, prevent and control tech debt. [https://github.com/jamesefhawkins/tech-debt-reading-list site]"
      },
      "date": 1571510763204
    },
    {
      "type": "fork",
      "site": "found.ward.bay.wiki.org",
      "date": 1650921805881
    }
  ]
}