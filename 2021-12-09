{
  "title": "2021-12-09",
  "story": [
    {
      "type": "paragraph",
      "id": "9bfd2dea33471d3d",
      "text": "[[Elm Discourse]]"
    },
    {
      "type": "paragraph",
      "id": "48919e294853ed1b",
      "text": "[[nano-theme]]"
    },
    {
      "type": "reference",
      "id": "fbe55e381e75a74a",
      "site": "clive.tries.fed.wiki",
      "slug": "performance-per-watt",
      "title": "Performance Per Watt",
      "text": "Performance per wattâ€”basically, or how much computing power you can get out of a battery charge, is the new benchmark for computing. [â€¦] Analysts, for now are calling this era spatial computing, at the core are post PC era ARM-based systems on a chip (SoC). Highly integrated, sub 6nm, low power post PC-era systems.   "
    },
    {
      "type": "pagefold",
      "id": "96210779a6036381",
      "text": "Neo4j Discord"
    },
    {
      "type": "paragraph",
      "id": "3a598437ffa950d9",
      "text": "[https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163892579422756dRham:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
    },
    {
      "type": "paragraph",
      "id": "0c33ea7967f5fa0e",
      "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163890138910189zJpJN:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix] and [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163892579422756dRham:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
    },
    {
      "type": "markdown",
      "id": "e4ea37de3ea43a9b",
      "text": "> I've switched my arrow json parsing to use \"caption\" where before I used \"properties.name\". I've gotten some assistance from the totally awesome [[Michael Hunger]] but I can't quite put it together. Here is the conversation: Discord"
    },
    {
      "type": "paragraph",
      "id": "1af4c6338e09b684",
      "text": "michael.hunger\n â€” \n07.12.2021\nHi Ward, good to see you here ðŸ™‚\nas arrows is a drawing tool, the \"caption\" is usually the unstructured text that's written into a circle. that could be anything e.g. a type or a name or title of the example node.\nIf you only want to use captions that's fine for drawing.\nBut then if you want to create a \"real\" graph model you have the option to turn the caption into a node-label (from a type like \"Book\") or into a property, e.g. (name:\"C2 Wiki\")"
    },
    {
      "type": "markdown",
      "id": "af14866d2daf2149",
      "text": "Ward: As arrows is a drawing tool, I would like to inform you that I use a different one:\nhttps://dmx.berlin/\nhttps://search.maven.org/artifact/systems.dmx/dmx-storage-neo4j/5.2.1/bundle\nhttps://git.dmx.systems/dmx-platform/dmx-platform.git\n"
    },
    {
      "type": "markdown",
      "id": "8b9f0280d6a70d35",
      "text": "# Technology\n## Server-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n## Client-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n"
    },
    {
      "type": "markdown",
      "id": "a9adcd74207482e4",
      "text": "[[Cytoscape]] site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\n"
    },
    {
      "type": "markdown",
      "id": "16a5424a9e8ef11c",
      "text": "Leaflet site: https://leafletjs.com/\nan open-source JavaScript library\nfor mobile-friendly interactive maps\n"
    },
    {
      "type": "paragraph",
      "id": "f2b120f924caa0e1",
      "text": "Ralf Barkow@rgb:dreyeck.freedombox.rocks\nDMX is component-based and extendable via an OSGi compliant plugin architecture. The Platform consists of a number of plugins. Read in the Developer Guide how platform and plugins work together. There are more plugins that can be installed optionally."
    },
    {
      "type": "paragraph",
      "id": "7fc3ca50f7347127",
      "text": "I probably don't need to mention that I'm working on a Federated Wiki plugin (called dmx-zettelkasten)."
    },
    {
      "type": "video",
      "id": "dc8170b9f7bc0b82",
      "text": "YOUTUBE P1IT7GsEp4c\nCytoscape Tutorials: Creating a Discrete Mapping"
    },
    {
      "type": "paragraph",
      "id": "0bf1576560fb8453",
      "text": "[[zsh compinit]]"
    },
    {
      "type": "paragraph",
      "id": "4ffedc9754e07376",
      "text": "[[Yaron Koren]], Enterprise MediaWiki: State of the Ecosystem"
    },
    {
      "type": "paragraph",
      "id": "427f8198410a980d",
      "text": "[[Markus Wiedenmaier]], [[CloudConvert]], [[Essential DocIO]]"
    },
    {
      "type": "paragraph",
      "id": "2cc344d94d3e5732",
      "text": "[https://www.plattform-i40.de/IP/Redaktion/DE/Videos/Downloads/211125_nh_forschung.html video]"
    },
    {
      "type": "paragraph",
      "id": "c73b959f63c99cb7",
      "text": "[[Civic Technology]]"
    },
    {
      "type": "paragraph",
      "id": "1af0f6adbc9e44a1",
      "text": "[[emacs -q -l]]"
    },
    {
      "type": "paragraph",
      "id": "d5d3c50ad0a55955",
      "text": "Validating Neo4j graphs against SHACL. [https://neo4j.com/labs/neosemantics/4.3/validation/ page] "
    },
    {
      "type": "markdown",
      "id": "a13fd15e4e8a4680",
      "text": "> This module makes it possible for a [[Neo4j]] graph to be validated against a formal definition of some graph constraints. By graph constraints, we mean things like \"the value for the age property needs to be an integer\", or \"a Task node needs to be connected to at least one TaskOwner node through the OWNED_BY relationship\", or many others.\n> \n> Neosemantics uses the W3C standard Shapes Constraint Language (SHACL) as the formalism to describe such graph constraints. In v.4 we cover a significant portion of the SHACL language but not all. The elements not implemented yet will be added gradually and changes will be reflected in this manual.\n"
    },
    {
      "type": "paragraph",
      "id": "fb2978b205baf6f7",
      "text": "[[Associative Model of Data]]: [[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163906180293954fCYZY:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
    },
    {
      "type": "markdown",
      "id": "196070ae9b296c70",
      "text": "> I see DMX has a lot to offer. Skimming the plugin authoring guide I notice a departure from both [[Neo4j]] and [[Graphviz]]: [â€¦]\n"
    },
    {
      "type": "markdown",
      "id": "4da20e33e6a7d3b8",
      "text": "> For example, in [[El Dorado]] I associate every relation with one of the 40 data sources I consult. Initially I linked source nodes to the nodes they sourced. But this made all queries more difficult and there were many sources for a given node. Not so with relations. These tended to be the special purpose for which many sources were created: relating important things. My solution was to add the name of the source to a property of the relation. Then when it was important, I looked up the source nodes by name."
    },
    {
      "type": "html",
      "id": "3f07209d2475f03e",
      "text": "<center><img width=\"100%\" src=\"https://dreyeck.freedombox.rocks/_matrix/media/r0/download/matrix.org/IgQTJNWsfAUZUbKxzShhtORH\"></center>"
    },
    {
      "type": "markdown",
      "id": "6ae72c707bde926a",
      "text": "> Here I asked El Dorado to explain what it knows about itself in its various parts. The soft relation to sources are shown by dotted lines. To draw this in [[Graphviz]] I had to insert extra fake nodes into relations so that I could draw a dotted line to the relations.\nThe faint numbers on the dotted lines counts the number of relations extracted from a source when it is in regards to El Dorado, the system, the subject of my query. I can click these to see all properties involved, up to 100, after which I sample."
    },
    {
      "type": "markdown",
      "id": "a719efb7132581b2",
      "text": "> Aside: I've shown this to Neo4j experts who have not been impressed. I think this is because they live in a world where they improve the representation of data they have. The value in this diagram is that I can see what I have and also how I learned it. In a world where all sources are incomplete and out of sync this is crucial for writing robust queries an interpreting their results."
    },
    {
      "type": "pagefold",
      "id": "adbefa0a1c9301b0",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "2af48d7ebb8b84fc",
      "text": "[[ProtonMail]] "
    },
    {
      "type": "paragraph",
      "id": "48dd70f27b03c761",
      "text": "Pattern matching of incoming javascript messages in Elm"
    },
    {
      "type": "markdown",
      "id": "c9d94dfdccb5311d",
      "text": "- Receiving Data from JavaScript. [https://elmprogramming.com/receiving-data-from-javascript.html page]\n"
    },
    {
      "type": "markdown",
      "id": "fd85baac3a5b8763",
      "text": "The following diagram shows the difference between an outgoing and incoming port."
    },
    {
      "type": "html",
      "id": "38901286b8cfdf61",
      "text": "<center><img width=\"100%\" src=\"https://elmprogramming.com/images/chapter-8/8.4-receiving-data-from-js/incoming-vs-outgoing-ports.svg\"></center>"
    },
    {
      "type": "paragraph",
      "id": "755cacc2ccc3e160",
      "text": "Unlike the command (returned by the outgoing port), we actually want the subscription (returned by the incoming port) to send a message to our app whenever the JavaScript code sends some data. Also see [[Runtime]]."
    },
    {
      "type": "html",
      "id": "cd1c2e060c0b9053",
      "text": "<center><img width=\"100%\" src=\"https://elmprogramming.com/images/chapter-8/8.4-receiving-data-from-js/elm-to-javascript.svg\"></center>"
    },
    {
      "type": "markdown",
      "id": "345e5b99d4139ff8",
      "text": "Weâ€™ll be storing whatever value JavaScript sends in our model. Letâ€™s add â€“ see [[Protecting Boundaries]] â€“ a new data constructor called `ReceivedDataFromJS` to the `Msg` type in `PortExamples.elm` that takes the model as an input and returns a message."
    },
    {
      "type": "markdown",
      "id": "4ba3c0c6113b93c1",
      "text": "- [[Pattern Matching]]. [https://elmprogramming.com/pattern-matching.html page]\n> Pattern matching is the act of checking one or more inputs against a pre-defined pattern and seeing if they match. In [[Elm]], thereâ€™s only a fixed set of patterns we can match against, so pattern matching has limited application. However, itâ€™s still an important feature of the language. In this section, weâ€™ll go through a few examples of pattern matching to understand how it works in Elm.\n"
    },
    {
      "type": "markdown",
      "id": "60e267121cbc79ba",
      "text": "Finally, itâ€™s important to keep in mind that pattern matching can only look at the structure of data. It canâ€™t do any computation on the data itself. [https://elmprogramming.com/pattern-matching.html page], Summary."
    },
    {
      "type": "reference",
      "id": "846b0a9ea1e88215",
      "site": "wiki.ralfbarkow.ch",
      "slug": "protecting-boundaries",
      "title": "Protecting Boundaries",
      "text": "What happens if we send a number instead of a string from JavaScript to our Elm app? [https://elmprogramming.com/protecting-boundaries.html page]"
    },
    {
      "type": "paragraph",
      "id": "e5fdf48b31d110cd",
      "text": "Couldn't receive data from JavaScript\n\nError: Expecting a STRING"
    },
    {
      "type": "paragraph",
      "id": "74bac7a04bb9f920",
      "text": "+             app.ports.receiveData.send(Date.now().toString());"
    },
    {
      "type": "paragraph",
      "id": "b342c8335ce99b82",
      "text": "In Elm code, [[we]] formulate [[expectations]] about what we will/want to see on the part of JavaScript."
    },
    {
      "type": "reference",
      "id": "fff8682dde3f84a3",
      "site": "wiki.ralfbarkow.ch",
      "slug": "frame-integration-promises",
      "title": "Frame Integration Promises",
      "text": "We wrap the [[Frame plugin]]'s integrations with a promise-based interface and distribute them as an ES6 module along with a couple of helpers we've found useful."
    },
    {
      "type": "pagefold",
      "id": "15271be29afc71fb",
      "text": "`shiftStep` documentation"
    },
    {
      "type": "paragraph",
      "id": "536b57a77568b41e",
      "text": "The branching factor has to be a power of two (8, 16, 32, 64...). This is because we use the index to tell us which path to take when navigating the tree, and we do this by dividing it into several smaller numbers (see `shiftStep` documentation). By dividing the index into smaller numbers, we will always get a range which is a power of two (2 bits gives 0-3, 3 gives 0-7, 4 gives 0-15...). [https://github.com/elm/core/blob/1.0.5/src/Array.elm github]"
    },
    {
      "type": "markdown",
      "id": "10ee88611bc3fae6",
      "text": "# Learning From The Standard Library"
    },
    {
      "type": "paragraph",
      "id": "5e52cf8a8f1bfff0",
      "text": "    One of the best ways to learn Elm is to read Elmâ€™s standard library. A large portion of the code contained in the standard library is written in Elm. Itâ€™s good code written by experienced programmers some of whom were responsible for creating Elm itself.\n\n    Just pick a module you like and browse through some of the functions, types, and values listed in that module. After that, head on over to Github and look for the filename that contains the code for the module youâ€™re interested in. For example, the code for the List module is in src/List.elm, and the code for Maybe is in src/Maybe.elm. Once youâ€™re in the right file, search for the value youâ€™re looking for and try to understand how itâ€™s implemented. [https://elmprogramming.com/pattern-matching.html page]\n"
    },
    {
      "type": "paragraph",
      "id": "339f5228278bbd60",
      "text": "What helped you learn Elm?. [https://discourse.elm-lang.org/t/what-helped-you-learn-elm/7959 discourse]"
    },
    {
      "type": "video",
      "id": "9fb6e87624ddcdf0",
      "text": "YOUTUBE 5CYeZ2kEiOI\nFrom Rails to Elm and Haskell - [[Richard Feldman]]"
    },
    {
      "type": "paragraph",
      "id": "5ef7635082de1ab5",
      "text": "Controlled Experiment"
    },
    {
      "type": "paragraph",
      "id": "60b045fc5305db30",
      "text": "Catch net / Safety net"
    },
    {
      "type": "video",
      "id": "c96510d4b445612a",
      "text": "YOUTUBE VV3qEaP-s_8\nNeo4j Graph Embeddings"
    },
    {
      "type": "markdown",
      "id": "7f56cddc59a0c70c",
      "text": "esp. https://youtu.be/VV3qEaP-s_8?t=43"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2021-12-09",
        "story": []
      },
      "date": 1639005213553
    },
    {
      "item": {
        "type": "factory",
        "id": "9bfd2dea33471d3d"
      },
      "id": "9bfd2dea33471d3d",
      "type": "add",
      "date": 1639005214968
    },
    {
      "type": "edit",
      "id": "9bfd2dea33471d3d",
      "item": {
        "type": "paragraph",
        "id": "9bfd2dea33471d3d",
        "text": "[[Elm Discourse]]"
      },
      "date": 1639005220530
    },
    {
      "item": {
        "type": "factory",
        "id": "48919e294853ed1b"
      },
      "id": "48919e294853ed1b",
      "type": "add",
      "after": "9bfd2dea33471d3d",
      "date": 1639006925849
    },
    {
      "type": "edit",
      "id": "48919e294853ed1b",
      "item": {
        "type": "paragraph",
        "id": "48919e294853ed1b",
        "text": "[[nano-theme]]"
      },
      "date": 1639006930162
    },
    {
      "item": {
        "type": "factory",
        "id": "fbe55e381e75a74a"
      },
      "id": "fbe55e381e75a74a",
      "type": "add",
      "after": "48919e294853ed1b",
      "date": 1639031584424
    },
    {
      "type": "edit",
      "id": "fbe55e381e75a74a",
      "item": {
        "type": "reference",
        "id": "fbe55e381e75a74a",
        "site": "clive.tries.fed.wiki",
        "slug": "performance-per-watt",
        "title": "Performance Per Watt",
        "text": "Performance per wattâ€”basically, or how much computing power you can get out of a battery charge, is the new benchmark for computing. I grew up in the  PC-era and Moore's Law. I'm conditioned to thinking about battery charge by developing mobile phone apps. The wearable era will be more exacting."
      },
      "date": 1639031593134
    },
    {
      "type": "edit",
      "id": "fbe55e381e75a74a",
      "item": {
        "type": "reference",
        "id": "fbe55e381e75a74a",
        "site": "clive.tries.fed.wiki",
        "slug": "performance-per-watt",
        "title": "Performance Per Watt",
        "text": "Performance per wattâ€”basically, or how much computing power you can get out of a battery charge, is the new benchmark for computing. [â€¦] Analysts, for now are calling this era spatial computing, at the core are post PC era ARM-based systems on a chip (SoC). Highly integrated, sub 6nm, low power post PC-era systems.   "
      },
      "date": 1639031792037
    },
    {
      "item": {
        "type": "factory",
        "id": "3a598437ffa950d9"
      },
      "id": "3a598437ffa950d9",
      "type": "add",
      "after": "fbe55e381e75a74a",
      "date": 1639032684151
    },
    {
      "type": "edit",
      "id": "3a598437ffa950d9",
      "item": {
        "type": "paragraph",
        "id": "3a598437ffa950d9",
        "text": "[https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163892579422756dRham:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
      },
      "date": 1639032699928
    },
    {
      "item": {
        "type": "factory",
        "id": "96210779a6036381"
      },
      "id": "96210779a6036381",
      "type": "add",
      "after": "3a598437ffa950d9",
      "date": 1639032701277
    },
    {
      "type": "edit",
      "id": "96210779a6036381",
      "item": {
        "type": "pagefold",
        "id": "96210779a6036381",
        "text": "Neo4j Discord"
      },
      "date": 1639032711219
    },
    {
      "id": "96210779a6036381",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9"
      ],
      "date": 1639032715073
    },
    {
      "item": {
        "type": "factory",
        "id": "f20971f85abb5dc3"
      },
      "id": "f20971f85abb5dc3",
      "type": "add",
      "after": "3a598437ffa950d9",
      "date": 1639032742025
    },
    {
      "type": "remove",
      "id": "f20971f85abb5dc3",
      "date": 1639032744872
    },
    {
      "type": "add",
      "id": "0c33ea7967f5fa0e",
      "item": {
        "type": "paragraph",
        "id": "0c33ea7967f5fa0e",
        "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163890138910189zJpJN:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
      },
      "after": "3a598437ffa950d9",
      "date": 1639032767939
    },
    {
      "item": {
        "type": "factory",
        "id": "e4ea37de3ea43a9b"
      },
      "id": "e4ea37de3ea43a9b",
      "type": "add",
      "after": "0c33ea7967f5fa0e",
      "date": 1639032881375
    },
    {
      "type": "edit",
      "id": "0c33ea7967f5fa0e",
      "item": {
        "type": "paragraph",
        "id": "0c33ea7967f5fa0e",
        "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163890138910189zJpJN:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix] and [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163892579422756dRham:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
      },
      "date": 1639032896114
    },
    {
      "type": "edit",
      "id": "e4ea37de3ea43a9b",
      "item": {
        "type": "markdown",
        "id": "e4ea37de3ea43a9b",
        "text": "> I've switched my arrow json parsing to use \"caption\" where before I used \"properties.name\". I've gotten some assistance from the totally awesome Michael Hunger but I can't quite put it together. Here is the conversation: Discord"
      },
      "date": 1639032919981
    },
    {
      "type": "edit",
      "id": "e4ea37de3ea43a9b",
      "item": {
        "type": "markdown",
        "id": "e4ea37de3ea43a9b",
        "text": "> I've switched my arrow json parsing to use \"caption\" where before I used \"properties.name\". I've gotten some assistance from the totally awesome [[Michael Hunger]] but I can't quite put it together. Here is the conversation: Discord"
      },
      "date": 1639032939700
    },
    {
      "item": {
        "type": "factory",
        "id": "1af4c6338e09b684"
      },
      "id": "1af4c6338e09b684",
      "type": "add",
      "after": "e4ea37de3ea43a9b",
      "date": 1639032953126
    },
    {
      "type": "edit",
      "id": "1af4c6338e09b684",
      "item": {
        "type": "paragraph",
        "id": "1af4c6338e09b684",
        "text": "michael.hunger\n â€” \n07.12.2021\nHi Ward, good to see you here ðŸ™‚\nas arrows is a drawing tool, the \"caption\" is usually the unstructured text that's written into a circle. that could be anything e.g. a type or a name or title of the example node.\nIf you only want to use captions that's fine for drawing.\nBut then if you want to create a \"real\" graph model you have the option to turn the caption into a node-label (from a type like \"Book\") or into a property, e.g. (name:\"C2 Wiki\")"
      },
      "date": 1639032954948
    },
    {
      "item": {
        "type": "factory",
        "id": "dc8170b9f7bc0b82"
      },
      "id": "dc8170b9f7bc0b82",
      "type": "add",
      "after": "1af4c6338e09b684",
      "date": 1639034318146
    },
    {
      "type": "edit",
      "id": "dc8170b9f7bc0b82",
      "item": {
        "type": "video",
        "id": "dc8170b9f7bc0b82",
        "text": "YOUTUBE P1IT7GsEp4c"
      },
      "date": 1639034335018
    },
    {
      "type": "edit",
      "id": "dc8170b9f7bc0b82",
      "item": {
        "type": "video",
        "id": "dc8170b9f7bc0b82",
        "text": "YOUTUBE P1IT7GsEp4c\nCytoscape Tutorials: Creating a Discrete Mapping"
      },
      "date": 1639034350437
    },
    {
      "item": {
        "type": "factory",
        "id": "af14866d2daf2149"
      },
      "id": "af14866d2daf2149",
      "type": "add",
      "after": "dc8170b9f7bc0b82",
      "date": 1639034987063
    },
    {
      "type": "edit",
      "id": "af14866d2daf2149",
      "item": {
        "type": "paragraph",
        "id": "af14866d2daf2149",
        "text": "Ward: As arrows is a drawing tool, I would like to inform you that I use a different one:\nhttps://dmx.berlin/\nhttps://search.maven.org/artifact/systems.dmx/dmx-storage-neo4j/5.2.1/bundle\nhttps://git.dmx.systems/dmx-platform/dmx-platform.git\nTechnology\nServer-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n\nClient-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n\nCytoscape site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\nLeaflet site: https://leafletjs.com/\nan open-source JavaScript library\nfor mobile-friendly interactive maps\nRalf Barkow@rgb:dreyeck.freedombox.rocks\nDMX is component-based and extendable via an OSGi compliant plugin architecture. The Platform consists of a number of plugins. Read in the Developer Guide how platform and plugins work together. There are more plugins that can be installed optionally.\nI probably don't need to mention that I'm working on a Federated Wiki plugin (called dmx-zettelkasten)."
      },
      "date": 1639034988659
    },
    {
      "id": "dc8170b9f7bc0b82",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "dc8170b9f7bc0b82"
      ],
      "date": 1639035007639
    },
    {
      "type": "edit",
      "id": "af14866d2daf2149",
      "item": {
        "type": "paragraph",
        "id": "af14866d2daf2149",
        "text": "Ward: As arrows is a drawing tool, I would like to inform you that I use a different one:\nhttps://dmx.berlin/\nhttps://search.maven.org/artifact/systems.dmx/dmx-storage-neo4j/5.2.1/bundle\nhttps://git.dmx.systems/dmx-platform/dmx-platform.git\nTechnology\nServer-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n\nClient-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n\nCytoscape site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\nLeaflet site: https://leafletjs.com/\nan open-source JavaScript library\nfor mobile-friendly interactive maps\nRalf Barkow@rgb:dreyeck.freedombox.rocks\nDMX is component-based and extendable via an OSGi compliant plugin architecture. The Platform consists of a number of plugins. Read in the Developer Guide how platform and plugins work together. There are more plugins that can be installed optionally."
      },
      "date": 1639035021773
    },
    {
      "type": "add",
      "id": "7fc3ca50f7347127",
      "item": {
        "type": "paragraph",
        "id": "7fc3ca50f7347127",
        "text": "I probably don't need to mention that I'm working on a Federated Wiki plugin (called dmx-zettelkasten)."
      },
      "after": "af14866d2daf2149",
      "date": 1639035024739
    },
    {
      "type": "fork",
      "date": 1639035047287
    },
    {
      "type": "edit",
      "id": "af14866d2daf2149",
      "item": {
        "type": "paragraph",
        "id": "af14866d2daf2149",
        "text": "Ward: As arrows is a drawing tool, I would like to inform you that I use a different one:\nhttps://dmx.berlin/\nhttps://search.maven.org/artifact/systems.dmx/dmx-storage-neo4j/5.2.1/bundle\nhttps://git.dmx.systems/dmx-platform/dmx-platform.git\nTechnology\nServer-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n\nClient-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n\nCytoscape site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\nLeaflet site: https://leafletjs.com/\nan open-source JavaScript library\nfor mobile-friendly interactive maps\n"
      },
      "date": 1639035057695
    },
    {
      "type": "add",
      "id": "f2b120f924caa0e1",
      "item": {
        "type": "paragraph",
        "id": "f2b120f924caa0e1",
        "text": "Ralf Barkow@rgb:dreyeck.freedombox.rocks\nDMX is component-based and extendable via an OSGi compliant plugin architecture. The Platform consists of a number of plugins. Read in the Developer Guide how platform and plugins work together. There are more plugins that can be installed optionally."
      },
      "after": "af14866d2daf2149",
      "date": 1639035057877
    },
    {
      "type": "edit",
      "id": "af14866d2daf2149",
      "item": {
        "type": "paragraph",
        "id": "af14866d2daf2149",
        "text": "Ward: As arrows is a drawing tool, I would like to inform you that I use a different one:\nhttps://dmx.berlin/\nhttps://search.maven.org/artifact/systems.dmx/dmx-storage-neo4j/5.2.1/bundle\nhttps://git.dmx.systems/dmx-platform/dmx-platform.git\nTechnology\nServer-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n\nClient-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n\nCytoscape site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\n"
      },
      "date": 1639035065094
    },
    {
      "type": "add",
      "id": "16a5424a9e8ef11c",
      "item": {
        "type": "paragraph",
        "id": "16a5424a9e8ef11c",
        "text": "Leaflet site: https://leafletjs.com/\nan open-source JavaScript library\nfor mobile-friendly interactive maps\n"
      },
      "after": "af14866d2daf2149",
      "date": 1639035066510
    },
    {
      "type": "edit",
      "id": "16a5424a9e8ef11c",
      "item": {
        "type": "markdown",
        "id": "16a5424a9e8ef11c",
        "text": "Leaflet site: https://leafletjs.com/\nan open-source JavaScript library\nfor mobile-friendly interactive maps\n"
      },
      "date": 1639035067894
    },
    {
      "type": "edit",
      "id": "af14866d2daf2149",
      "item": {
        "type": "markdown",
        "id": "af14866d2daf2149",
        "text": "Ward: As arrows is a drawing tool, I would like to inform you that I use a different one:\nhttps://dmx.berlin/\nhttps://search.maven.org/artifact/systems.dmx/dmx-storage-neo4j/5.2.1/bundle\nhttps://git.dmx.systems/dmx-platform/dmx-platform.git\nTechnology\nServer-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n\nClient-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n\nCytoscape site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\n"
      },
      "date": 1639035069676
    },
    {
      "type": "edit",
      "id": "af14866d2daf2149",
      "item": {
        "type": "markdown",
        "id": "af14866d2daf2149",
        "text": "Ward: As arrows is a drawing tool, I would like to inform you that I use a different one:\nhttps://dmx.berlin/\nhttps://search.maven.org/artifact/systems.dmx/dmx-storage-neo4j/5.2.1/bundle\nhttps://git.dmx.systems/dmx-platform/dmx-platform.git\n#Technology\n##Server-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n##Client-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n\nCytoscape site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\n"
      },
      "date": 1639035090724
    },
    {
      "type": "edit",
      "id": "af14866d2daf2149",
      "item": {
        "type": "markdown",
        "id": "af14866d2daf2149",
        "text": "Ward: As arrows is a drawing tool, I would like to inform you that I use a different one:\nhttps://dmx.berlin/\nhttps://search.maven.org/artifact/systems.dmx/dmx-storage-neo4j/5.2.1/bundle\nhttps://git.dmx.systems/dmx-platform/dmx-platform.git\n"
      },
      "date": 1639035101041
    },
    {
      "type": "add",
      "id": "8b9f0280d6a70d35",
      "item": {
        "type": "markdown",
        "id": "8b9f0280d6a70d35",
        "text": "#Technology\n##Server-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n##Client-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n"
      },
      "after": "af14866d2daf2149",
      "date": 1639035104273
    },
    {
      "type": "add",
      "id": "a9adcd74207482e4",
      "item": {
        "type": "markdown",
        "id": "a9adcd74207482e4",
        "text": "\nCytoscape site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\n"
      },
      "after": "8b9f0280d6a70d35",
      "date": 1639035105798
    },
    {
      "item": {
        "type": "factory",
        "id": "0bf1576560fb8453"
      },
      "id": "0bf1576560fb8453",
      "type": "add",
      "after": "dc8170b9f7bc0b82",
      "date": 1639035113037
    },
    {
      "type": "fork",
      "date": 1639035136280
    },
    {
      "type": "edit",
      "id": "8b9f0280d6a70d35",
      "item": {
        "type": "markdown",
        "id": "8b9f0280d6a70d35",
        "text": "# Technology\n##S erver-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n## Client-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n"
      },
      "date": 1639035149018
    },
    {
      "type": "edit",
      "id": "8b9f0280d6a70d35",
      "item": {
        "type": "markdown",
        "id": "8b9f0280d6a70d35",
        "text": "# Technology\n## Server-Side\nJava, Felix (OSGi), Neo4j, Lucene, Jetty, Jetty WebSocket, Jersey (JAX-RS).\n## Client-Side\nVue.js, Vuex, Vue-Router, Element UI, Cytoscape, Quill, Leaflet.\n"
      },
      "date": 1639035156230
    },
    {
      "type": "edit",
      "id": "a9adcd74207482e4",
      "item": {
        "type": "markdown",
        "id": "a9adcd74207482e4",
        "text": "[[Cytoscape]] site: https://cytoscape.org/\nCytoscape is an open source software platform for visualizing complex networks and integrating these with any type of attribute data. A lot of Apps are available for various kinds of problem domains, including bioinformatics, social network analysis, and semantic web.\n"
      },
      "date": 1639035169166
    },
    {
      "type": "edit",
      "id": "0bf1576560fb8453",
      "item": {
        "type": "paragraph",
        "id": "0bf1576560fb8453",
        "text": "[[zsh compinit]]"
      },
      "date": 1639045411456
    },
    {
      "item": {
        "type": "factory",
        "id": "4ffedc9754e07376"
      },
      "id": "4ffedc9754e07376",
      "type": "add",
      "after": "0bf1576560fb8453",
      "date": 1639049971541
    },
    {
      "type": "edit",
      "id": "4ffedc9754e07376",
      "item": {
        "type": "paragraph",
        "id": "4ffedc9754e07376",
        "text": "Yaron Koren, Enterprise MediaWiki: State of the Ecosystem"
      },
      "date": 1639049974298
    },
    {
      "type": "edit",
      "id": "4ffedc9754e07376",
      "item": {
        "type": "paragraph",
        "id": "4ffedc9754e07376",
        "text": "[[Yaron Koren]], Enterprise MediaWiki: State of the Ecosystem"
      },
      "date": 1639049982888
    },
    {
      "item": {
        "type": "factory",
        "id": "c0335cf7474c9629"
      },
      "id": "c0335cf7474c9629",
      "type": "add",
      "after": "0bf1576560fb8453",
      "date": 1639050164105
    },
    {
      "type": "edit",
      "id": "c0335cf7474c9629",
      "item": {
        "type": "paragraph",
        "id": "c0335cf7474c9629",
        "text": "CloudConvert "
      },
      "date": 1639050176476
    },
    {
      "id": "c0335cf7474c9629",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "c0335cf7474c9629"
      ],
      "date": 1639050178800
    },
    {
      "type": "edit",
      "id": "c0335cf7474c9629",
      "item": {
        "type": "paragraph",
        "id": "c0335cf7474c9629",
        "text": "[[CloudConvert]] "
      },
      "date": 1639050187331
    },
    {
      "item": {
        "type": "factory",
        "id": "427f8198410a980d"
      },
      "id": "427f8198410a980d",
      "type": "add",
      "after": "c0335cf7474c9629",
      "date": 1639050268697
    },
    {
      "type": "edit",
      "id": "427f8198410a980d",
      "item": {
        "type": "paragraph",
        "id": "427f8198410a980d",
        "text": "[[Markus Wiedenmaier]]"
      },
      "date": 1639050273191
    },
    {
      "id": "427f8198410a980d",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "427f8198410a980d",
        "c0335cf7474c9629"
      ],
      "date": 1639050275066
    },
    {
      "item": {
        "type": "factory",
        "id": "c73b959f63c99cb7"
      },
      "id": "c73b959f63c99cb7",
      "type": "add",
      "after": "c0335cf7474c9629",
      "date": 1639051500769
    },
    {
      "type": "edit",
      "id": "c73b959f63c99cb7",
      "item": {
        "type": "paragraph",
        "id": "c73b959f63c99cb7",
        "text": "[[Civic Technology]]"
      },
      "date": 1639051512952
    },
    {
      "item": {
        "type": "factory",
        "id": "1af0f6adbc9e44a1"
      },
      "id": "1af0f6adbc9e44a1",
      "type": "add",
      "after": "c73b959f63c99cb7",
      "date": 1639060913710
    },
    {
      "type": "edit",
      "id": "1af0f6adbc9e44a1",
      "item": {
        "type": "paragraph",
        "id": "1af0f6adbc9e44a1",
        "text": "[["
      },
      "date": 1639060927157
    },
    {
      "type": "edit",
      "id": "1af0f6adbc9e44a1",
      "item": {
        "type": "paragraph",
        "id": "1af0f6adbc9e44a1",
        "text": "[[emacs -q -l]]"
      },
      "date": 1639060945957
    },
    {
      "item": {
        "type": "factory",
        "id": "d5d3c50ad0a55955"
      },
      "id": "d5d3c50ad0a55955",
      "type": "add",
      "after": "1af0f6adbc9e44a1",
      "date": 1639062512354
    },
    {
      "type": "edit",
      "id": "d5d3c50ad0a55955",
      "item": {
        "type": "paragraph",
        "id": "d5d3c50ad0a55955",
        "text": "Validating Neo4j graphs against SHACL "
      },
      "date": 1639062517263
    },
    {
      "type": "edit",
      "id": "d5d3c50ad0a55955",
      "item": {
        "type": "paragraph",
        "id": "d5d3c50ad0a55955",
        "text": "Validating Neo4j graphs against SHACL. [https://neo4j.com/labs/neosemantics/4.3/validation/ page] "
      },
      "date": 1639062530194
    },
    {
      "item": {
        "type": "factory",
        "id": "a13fd15e4e8a4680"
      },
      "id": "a13fd15e4e8a4680",
      "type": "add",
      "after": "d5d3c50ad0a55955",
      "date": 1639062547641
    },
    {
      "type": "edit",
      "id": "a13fd15e4e8a4680",
      "item": {
        "type": "markdown",
        "id": "a13fd15e4e8a4680",
        "text": "> \n\nThis module makes it possible for a Neo4j graph to be validated against a formal definition of some graph constraints. By graph constraints, we mean things like \"the value for the age property needs to be an integer\", or \"a Task node needs to be connected to at least one TaskOwner node through the OWNED_BY relationship\", or many others.\n> \n> Neosemantics uses the W3C standard Shapes Constraint Language (SHACL) as the formalism to describe such graph constraints. In v.4 we cover a significant portion of the SHACL language but not all. The elements not implemented yet will be added gradually and changes will be reflected in this manual.\n"
      },
      "date": 1639062554566
    },
    {
      "type": "edit",
      "id": "a13fd15e4e8a4680",
      "item": {
        "type": "markdown",
        "id": "a13fd15e4e8a4680",
        "text": "> This module makes it possible for a Neo4j graph to be validated against a formal definition of some graph constraints. By graph constraints, we mean things like \"the value for the age property needs to be an integer\", or \"a Task node needs to be connected to at least one TaskOwner node through the OWNED_BY relationship\", or many others.\n> \n> Neosemantics uses the W3C standard Shapes Constraint Language (SHACL) as the formalism to describe such graph constraints. In v.4 we cover a significant portion of the SHACL language but not all. The elements not implemented yet will be added gradually and changes will be reflected in this manual.\n"
      },
      "date": 1639062559598
    },
    {
      "type": "edit",
      "id": "a13fd15e4e8a4680",
      "item": {
        "type": "markdown",
        "id": "a13fd15e4e8a4680",
        "text": "> This module makes it possible for a [[Neo4j]] graph to be validated against a formal definition of some graph constraints. By graph constraints, we mean things like \"the value for the age property needs to be an integer\", or \"a Task node needs to be connected to at least one TaskOwner node through the OWNED_BY relationship\", or many others.\n> \n> Neosemantics uses the W3C standard Shapes Constraint Language (SHACL) as the formalism to describe such graph constraints. In v.4 we cover a significant portion of the SHACL language but not all. The elements not implemented yet will be added gradually and changes will be reflected in this manual.\n"
      },
      "date": 1639062579886
    },
    {
      "item": {
        "type": "factory",
        "id": "fb2978b205baf6f7"
      },
      "id": "fb2978b205baf6f7",
      "type": "add",
      "after": "a13fd15e4e8a4680",
      "date": 1639062767067
    },
    {
      "type": "edit",
      "id": "fb2978b205baf6f7",
      "item": {
        "type": "paragraph",
        "id": "fb2978b205baf6f7",
        "text": "[[Associative Model of Data]]"
      },
      "date": 1639062781154
    },
    {
      "type": "edit",
      "id": "fb2978b205baf6f7",
      "item": {
        "type": "paragraph",
        "id": "fb2978b205baf6f7",
        "text": "[[Associative Model of Data]]: [[Ward]] via [matrix]"
      },
      "date": 1639063336197
    },
    {
      "type": "edit",
      "id": "fb2978b205baf6f7",
      "item": {
        "type": "paragraph",
        "id": "fb2978b205baf6f7",
        "text": "[[Associative Model of Data]]: [[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163906180293954fCYZY:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
      },
      "date": 1639063350460
    },
    {
      "type": "add",
      "id": "196070ae9b296c70",
      "item": {
        "type": "paragraph",
        "id": "196070ae9b296c70",
        "text": "> I see DMX has a lot to offer. Skimming the plugin authoring guide I notice a departure from both Neo4j and Graphviz:"
      },
      "after": "fb2978b205baf6f7",
      "date": 1639063377229
    },
    {
      "type": "edit",
      "id": "196070ae9b296c70",
      "item": {
        "type": "paragraph",
        "id": "196070ae9b296c70",
        "text": "> I see DMX has a lot to offer. Skimming the plugin authoring guide I notice a departure from both Neo4j and Graphviz: [â€¦]"
      },
      "date": 1639063385344
    },
    {
      "type": "edit",
      "id": "196070ae9b296c70",
      "item": {
        "type": "markdown",
        "id": "196070ae9b296c70",
        "text": "> I see DMX has a lot to offer. Skimming the plugin authoring guide I notice a departure from both Neo4j and Graphviz: [â€¦]"
      },
      "date": 1639063643061
    },
    {
      "item": {
        "type": "factory",
        "id": "3f07209d2475f03e"
      },
      "id": "3f07209d2475f03e",
      "type": "add",
      "after": "196070ae9b296c70",
      "date": 1639063644426
    },
    {
      "type": "edit",
      "id": "196070ae9b296c70",
      "item": {
        "type": "markdown",
        "id": "196070ae9b296c70",
        "text": "> I see DMX has a lot to offer. Skimming the plugin authoring guide I notice a departure from both Neo4j and Graphviz: [â€¦]\n"
      },
      "date": 1639063647699
    },
    {
      "type": "add",
      "id": "4da20e33e6a7d3b8",
      "item": {
        "type": "markdown",
        "id": "4da20e33e6a7d3b8",
        "text": "> For example, in El Dorado I associate every relation with one of the 40 data sources I consult. Initially I linked source nodes to the nodes they sourced. But this made all queries more difficult and there were many sources for a given node. Not so with relations. These tended to be the special purpose for which many sources were created: relating important things. My solution was to add the name of the source to a property of the relation. Then when it was important, I looked up the source nodes by name."
      },
      "after": "196070ae9b296c70",
      "date": 1639063650082
    },
    {
      "type": "edit",
      "id": "4da20e33e6a7d3b8",
      "item": {
        "type": "markdown",
        "id": "4da20e33e6a7d3b8",
        "text": "> For example, in [[El Dorado]] I associate every relation with one of the 40 data sources I consult. Initially I linked source nodes to the nodes they sourced. But this made all queries more difficult and there were many sources for a given node. Not so with relations. These tended to be the special purpose for which many sources were created: relating important things. My solution was to add the name of the source to a property of the relation. Then when it was important, I looked up the source nodes by name."
      },
      "date": 1639063660346
    },
    {
      "type": "edit",
      "id": "3f07209d2475f03e",
      "item": {
        "type": "html",
        "id": "3f07209d2475f03e",
        "text": "<center><img width=\"100%\" src=\"https://dreyeck.freedombox.rocks/_matrix/media/r0/download/matrix.org/IgQTJNWsfAUZUbKxzShhtORH\"></center>"
      },
      "date": 1639064058482
    },
    {
      "item": {
        "type": "factory",
        "id": "6ae72c707bde926a"
      },
      "id": "6ae72c707bde926a",
      "type": "add",
      "after": "3f07209d2475f03e",
      "date": 1639064101256
    },
    {
      "type": "edit",
      "id": "6ae72c707bde926a",
      "item": {
        "type": "paragraph",
        "id": "6ae72c707bde926a",
        "text": "> Here I asked El Dorado to explain what it knows about itself in its various parts. The soft relation to sources are shown by dotted lines. To draw this in Graphviz I had to insert extra fake nodes into relations so that I could draw a dotted line to the relations.\nThe faint numbers on the dotted lines counts the number of relations extracted from a source when it is in regards to El Dorado, the system, the subject of my query. I can click these to see all properties involved, up to 100, after which I sample."
      },
      "date": 1639064107698
    },
    {
      "type": "edit",
      "id": "6ae72c707bde926a",
      "item": {
        "type": "markdown",
        "id": "6ae72c707bde926a",
        "text": "> Here I asked El Dorado to explain what it knows about itself in its various parts. The soft relation to sources are shown by dotted lines. To draw this in Graphviz I had to insert extra fake nodes into relations so that I could draw a dotted line to the relations.\nThe faint numbers on the dotted lines counts the number of relations extracted from a source when it is in regards to El Dorado, the system, the subject of my query. I can click these to see all properties involved, up to 100, after which I sample."
      },
      "date": 1639064108764
    },
    {
      "type": "edit",
      "id": "6ae72c707bde926a",
      "item": {
        "type": "markdown",
        "id": "6ae72c707bde926a",
        "text": "> Here I asked El Dorado to explain what it knows about itself in its various parts. The soft relation to sources are shown by dotted lines. To draw this in [[Graphviz]] I had to insert extra fake nodes into relations so that I could draw a dotted line to the relations.\nThe faint numbers on the dotted lines counts the number of relations extracted from a source when it is in regards to El Dorado, the system, the subject of my query. I can click these to see all properties involved, up to 100, after which I sample."
      },
      "date": 1639064138493
    },
    {
      "type": "edit",
      "id": "196070ae9b296c70",
      "item": {
        "type": "markdown",
        "id": "196070ae9b296c70",
        "text": "> I see DMX has a lot to offer. Skimming the plugin authoring guide I notice a departure from both [[Neo4j]] and [[Graphviz]]: [â€¦]\n"
      },
      "date": 1639064161303
    },
    {
      "item": {
        "type": "factory",
        "id": "a719efb7132581b2"
      },
      "id": "a719efb7132581b2",
      "type": "add",
      "after": "6ae72c707bde926a",
      "date": 1639064192363
    },
    {
      "type": "edit",
      "id": "a719efb7132581b2",
      "item": {
        "type": "paragraph",
        "id": "a719efb7132581b2",
        "text": "> Aside: I've shown this to Neo4j experts who have not been impressed. I think this is because they live in a world where they improve the representation of data they have. The value in this diagram is that I can see what I have and also how I learned it. In a world where all sources are incomplete and out of sync this is crucial for writing robust queries an interpreting their results."
      },
      "date": 1639064196376
    },
    {
      "type": "edit",
      "id": "a719efb7132581b2",
      "item": {
        "type": "markdown",
        "id": "a719efb7132581b2",
        "text": "> Aside: I've shown this to Neo4j experts who have not been impressed. I think this is because they live in a world where they improve the representation of data they have. The value in this diagram is that I can see what I have and also how I learned it. In a world where all sources are incomplete and out of sync this is crucial for writing robust queries an interpreting their results."
      },
      "date": 1639064197386
    },
    {
      "item": {
        "type": "factory",
        "id": "2af48d7ebb8b84fc"
      },
      "id": "2af48d7ebb8b84fc",
      "type": "add",
      "after": "a719efb7132581b2",
      "date": 1639069824997
    },
    {
      "item": {
        "type": "factory",
        "id": "adbefa0a1c9301b0"
      },
      "id": "adbefa0a1c9301b0",
      "type": "add",
      "after": "2af48d7ebb8b84fc",
      "date": 1639069835033
    },
    {
      "type": "edit",
      "id": "2af48d7ebb8b84fc",
      "item": {
        "type": "paragraph",
        "id": "2af48d7ebb8b84fc",
        "text": "[[ProtonMail]] "
      },
      "date": 1639069836254
    },
    {
      "type": "edit",
      "id": "adbefa0a1c9301b0",
      "item": {
        "type": "pagefold",
        "id": "adbefa0a1c9301b0",
        "text": "~"
      },
      "date": 1639069838050
    },
    {
      "id": "adbefa0a1c9301b0",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "427f8198410a980d",
        "c0335cf7474c9629",
        "c73b959f63c99cb7",
        "1af0f6adbc9e44a1",
        "d5d3c50ad0a55955",
        "a13fd15e4e8a4680",
        "fb2978b205baf6f7",
        "196070ae9b296c70",
        "4da20e33e6a7d3b8",
        "3f07209d2475f03e",
        "6ae72c707bde926a",
        "a719efb7132581b2",
        "adbefa0a1c9301b0",
        "2af48d7ebb8b84fc"
      ],
      "date": 1639069841618
    },
    {
      "type": "add",
      "id": "6784b6cea8fdc5ac",
      "item": {
        "type": "paragraph",
        "id": "6784b6cea8fdc5ac",
        "text": "[[Essential DocIO]]"
      },
      "after": "c0335cf7474c9629",
      "date": 1639071064285
    },
    {
      "type": "remove",
      "id": "c0335cf7474c9629",
      "date": 1639071352213
    },
    {
      "type": "edit",
      "id": "427f8198410a980d",
      "item": {
        "type": "paragraph",
        "id": "427f8198410a980d",
        "text": "[[Markus Wiedenmaier]], [[CloudConvert]],"
      },
      "date": 1639071359018
    },
    {
      "type": "remove",
      "id": "6784b6cea8fdc5ac",
      "date": 1639071363854
    },
    {
      "type": "edit",
      "id": "427f8198410a980d",
      "item": {
        "type": "paragraph",
        "id": "427f8198410a980d",
        "text": "[[Markus Wiedenmaier]], [[CloudConvert]], [[Essential DocIO]]"
      },
      "date": 1639071365055
    },
    {
      "type": "add",
      "id": "2cc344d94d3e5732",
      "item": {
        "type": "paragraph",
        "id": "2cc344d94d3e5732",
        "text": "[https://www.plattform-i40.de/IP/Redaktion/DE/Videos/Downloads/211125_nh_forschung.html video]"
      },
      "after": "427f8198410a980d",
      "date": 1639072262308
    },
    {
      "item": {
        "type": "factory",
        "id": "48dd70f27b03c761"
      },
      "id": "48dd70f27b03c761",
      "type": "add",
      "after": "2af48d7ebb8b84fc",
      "date": 1639081408853
    },
    {
      "type": "edit",
      "id": "48dd70f27b03c761",
      "item": {
        "type": "paragraph",
        "id": "48dd70f27b03c761",
        "text": "Pattern matching of incoming javascript messages in Elm"
      },
      "date": 1639081415003
    },
    {
      "item": {
        "type": "factory",
        "id": "c9d94dfdccb5311d"
      },
      "id": "c9d94dfdccb5311d",
      "type": "add",
      "after": "48dd70f27b03c761",
      "date": 1639081447486
    },
    {
      "type": "edit",
      "id": "c9d94dfdccb5311d",
      "item": {
        "type": "markdown",
        "id": "c9d94dfdccb5311d",
        "text": "- Receiving Data from JavaScript"
      },
      "date": 1639081453331
    },
    {
      "type": "edit",
      "id": "c9d94dfdccb5311d",
      "item": {
        "type": "markdown",
        "id": "c9d94dfdccb5311d",
        "text": "- Receiving Data from JavaScript. [https://elmprogramming.com/receiving-data-from-javascript.html page]"
      },
      "date": 1639081465336
    },
    {
      "item": {
        "type": "factory",
        "id": "4ba3c0c6113b93c1"
      },
      "id": "4ba3c0c6113b93c1",
      "type": "add",
      "after": "c9d94dfdccb5311d",
      "date": 1639081520341
    },
    {
      "type": "edit",
      "id": "4ba3c0c6113b93c1",
      "item": {
        "type": "paragraph",
        "id": "4ba3c0c6113b93c1",
        "text": "- Pattern Matching"
      },
      "date": 1639081526203
    },
    {
      "type": "edit",
      "id": "4ba3c0c6113b93c1",
      "item": {
        "type": "markdown",
        "id": "4ba3c0c6113b93c1",
        "text": "- Pattern Matching"
      },
      "date": 1639081527518
    },
    {
      "type": "edit",
      "id": "4ba3c0c6113b93c1",
      "item": {
        "type": "markdown",
        "id": "4ba3c0c6113b93c1",
        "text": "- [[Pattern Matching]]"
      },
      "date": 1639081539875
    },
    {
      "type": "edit",
      "id": "4ba3c0c6113b93c1",
      "item": {
        "type": "markdown",
        "id": "4ba3c0c6113b93c1",
        "text": "- [[Pattern Matching]]. [https://elmprogramming.com/pattern-matching.html page]"
      },
      "date": 1639081693252
    },
    {
      "type": "edit",
      "id": "4ba3c0c6113b93c1",
      "item": {
        "type": "markdown",
        "id": "4ba3c0c6113b93c1",
        "text": "- [[Pattern Matching]]. [https://elmprogramming.com/pattern-matching.html page]\n> Pattern matching is the act of checking one or more inputs against a pre-defined pattern and seeing if they match. In Elm, thereâ€™s only a fixed set of patterns we can match against, so pattern matching has limited application. However, itâ€™s still an important feature of the language. In this section, weâ€™ll go through a few examples of pattern matching to understand how it works in Elm."
      },
      "date": 1639081707688
    },
    {
      "type": "edit",
      "id": "4ba3c0c6113b93c1",
      "item": {
        "type": "markdown",
        "id": "4ba3c0c6113b93c1",
        "text": "- [[Pattern Matching]]. [https://elmprogramming.com/pattern-matching.html page]\n> Pattern matching is the act of checking one or more inputs against a pre-defined pattern and seeing if they match. In [[Elm]], thereâ€™s only a fixed set of patterns we can match against, so pattern matching has limited application. However, itâ€™s still an important feature of the language. In this section, weâ€™ll go through a few examples of pattern matching to understand how it works in Elm."
      },
      "date": 1639081736252
    },
    {
      "item": {
        "type": "factory",
        "id": "846b0a9ea1e88215"
      },
      "id": "846b0a9ea1e88215",
      "type": "add",
      "after": "4ba3c0c6113b93c1",
      "date": 1639081852047
    },
    {
      "type": "edit",
      "id": "846b0a9ea1e88215",
      "item": {
        "type": "reference",
        "id": "846b0a9ea1e88215",
        "site": "wiki.ralfbarkow.ch",
        "slug": "protecting-boundaries",
        "title": "Protecting Boundaries",
        "text": "What happens if we send a number instead of a string from JavaScript to our Elm app? [https://elmprogramming.com/protecting-boundaries.html page]"
      },
      "date": 1639081855449
    },
    {
      "item": {
        "type": "factory",
        "id": "e5fdf48b31d110cd"
      },
      "id": "e5fdf48b31d110cd",
      "type": "add",
      "after": "846b0a9ea1e88215",
      "date": 1639083204688
    },
    {
      "type": "edit",
      "id": "e5fdf48b31d110cd",
      "item": {
        "type": "paragraph",
        "id": "e5fdf48b31d110cd",
        "text": "Couldn't receive data from JavaScript\n\nError: Expecting a STRING"
      },
      "date": 1639083206455
    },
    {
      "type": "add",
      "id": "74bac7a04bb9f920",
      "item": {
        "type": "paragraph",
        "id": "74bac7a04bb9f920",
        "text": "          app.ports.sendData.subscribe(function(data) {\n              console.log(\"Data from Elm: \", JSON.stringify(data));\n-             app.ports.receiveData.send(\"Hey Elm!\");\n+             app.ports.receiveData.send(Date.now().toString());\n          });\n         </script>\n     </body>\n"
      },
      "after": "e5fdf48b31d110cd",
      "date": 1639083349726
    },
    {
      "type": "edit",
      "id": "74bac7a04bb9f920",
      "item": {
        "type": "paragraph",
        "id": "74bac7a04bb9f920",
        "text": "+             app.ports.receiveData.send(Date.now().toString());"
      },
      "date": 1639083371228
    },
    {
      "item": {
        "type": "factory",
        "id": "b342c8335ce99b82"
      },
      "id": "b342c8335ce99b82",
      "type": "add",
      "after": "74bac7a04bb9f920",
      "date": 1639083695826
    },
    {
      "type": "edit",
      "id": "b342c8335ce99b82",
      "item": {
        "type": "paragraph",
        "id": "b342c8335ce99b82",
        "text": "In Elm code, we formulate expectations about what we will/want to see on the part of JavaScript."
      },
      "date": 1639083698066
    },
    {
      "type": "edit",
      "id": "b342c8335ce99b82",
      "item": {
        "type": "paragraph",
        "id": "b342c8335ce99b82",
        "text": "In Elm code, [[we]] formulate expectations about what we will/want to see on the part of JavaScript."
      },
      "date": 1639083716184
    },
    {
      "type": "edit",
      "id": "b342c8335ce99b82",
      "item": {
        "type": "paragraph",
        "id": "b342c8335ce99b82",
        "text": "In Elm code, [[we]] formulate [[expectations]] about what we will/want to see on the part of JavaScript."
      },
      "date": 1639084372420
    },
    {
      "type": "edit",
      "id": "b342c8335ce99b82",
      "item": {
        "type": "paragraph",
        "id": "b342c8335ce99b82",
        "text": "In Elm code, [[we]] formulate [[expectation]]s about what we will/want to see on the part of JavaScript."
      },
      "date": 1639084383849
    },
    {
      "type": "edit",
      "id": "b342c8335ce99b82",
      "item": {
        "type": "paragraph",
        "id": "b342c8335ce99b82",
        "text": "In Elm code, [[we]] formulate [[expectations]] about what we will/want to see on the part of JavaScript."
      },
      "date": 1639084396212
    },
    {
      "item": {
        "type": "factory",
        "id": "38901286b8cfdf61"
      },
      "id": "38901286b8cfdf61",
      "type": "add",
      "after": "b342c8335ce99b82",
      "date": 1639084839065
    },
    {
      "type": "edit",
      "id": "38901286b8cfdf61",
      "item": {
        "type": "html",
        "id": "38901286b8cfdf61",
        "text": "<center><img width=\"100%\" src=\"https://elmprogramming.com/images/chapter-8/8.4-receiving-data-from-js/incoming-vs-outgoing-ports.svg\"></center>"
      },
      "date": 1639084875008
    },
    {
      "id": "38901286b8cfdf61",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "427f8198410a980d",
        "2cc344d94d3e5732",
        "c73b959f63c99cb7",
        "1af0f6adbc9e44a1",
        "d5d3c50ad0a55955",
        "a13fd15e4e8a4680",
        "fb2978b205baf6f7",
        "196070ae9b296c70",
        "4da20e33e6a7d3b8",
        "3f07209d2475f03e",
        "6ae72c707bde926a",
        "a719efb7132581b2",
        "adbefa0a1c9301b0",
        "2af48d7ebb8b84fc",
        "48dd70f27b03c761",
        "c9d94dfdccb5311d",
        "38901286b8cfdf61",
        "4ba3c0c6113b93c1",
        "846b0a9ea1e88215",
        "e5fdf48b31d110cd",
        "74bac7a04bb9f920",
        "b342c8335ce99b82"
      ],
      "date": 1639084983893
    },
    {
      "type": "edit",
      "id": "c9d94dfdccb5311d",
      "item": {
        "type": "markdown",
        "id": "c9d94dfdccb5311d",
        "text": "- Receiving Data from JavaScript. [https://elmprogramming.com/receiving-data-from-javascript.html page]\nThe following diagram shows the difference between an outgoing and incoming port."
      },
      "date": 1639085030881
    },
    {
      "type": "edit",
      "id": "c9d94dfdccb5311d",
      "item": {
        "type": "markdown",
        "id": "c9d94dfdccb5311d",
        "text": "- Receiving Data from JavaScript. [https://elmprogramming.com/receiving-data-from-javascript.html page]\n"
      },
      "date": 1639085042059
    },
    {
      "type": "add",
      "id": "fd85baac3a5b8763",
      "item": {
        "type": "markdown",
        "id": "fd85baac3a5b8763",
        "text": "The following diagram shows the difference between an outgoing and incoming port."
      },
      "after": "c9d94dfdccb5311d",
      "date": 1639085042619
    },
    {
      "item": {
        "type": "factory",
        "id": "755cacc2ccc3e160"
      },
      "id": "755cacc2ccc3e160",
      "type": "add",
      "after": "b342c8335ce99b82",
      "date": 1639085090110
    },
    {
      "type": "edit",
      "id": "755cacc2ccc3e160",
      "item": {
        "type": "paragraph",
        "id": "755cacc2ccc3e160",
        "text": "Unlike the command (returned by the outgoing port), we actually want the subscription (returned by the incoming port) to send a message to our app whenever the JavaScript code sends some data."
      },
      "date": 1639085092825
    },
    {
      "id": "755cacc2ccc3e160",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "427f8198410a980d",
        "2cc344d94d3e5732",
        "c73b959f63c99cb7",
        "1af0f6adbc9e44a1",
        "d5d3c50ad0a55955",
        "a13fd15e4e8a4680",
        "fb2978b205baf6f7",
        "196070ae9b296c70",
        "4da20e33e6a7d3b8",
        "3f07209d2475f03e",
        "6ae72c707bde926a",
        "a719efb7132581b2",
        "adbefa0a1c9301b0",
        "2af48d7ebb8b84fc",
        "48dd70f27b03c761",
        "c9d94dfdccb5311d",
        "fd85baac3a5b8763",
        "38901286b8cfdf61",
        "755cacc2ccc3e160",
        "4ba3c0c6113b93c1",
        "846b0a9ea1e88215",
        "e5fdf48b31d110cd",
        "74bac7a04bb9f920",
        "b342c8335ce99b82"
      ],
      "date": 1639085099264
    },
    {
      "item": {
        "type": "factory",
        "id": "cd1c2e060c0b9053"
      },
      "id": "cd1c2e060c0b9053",
      "type": "add",
      "after": "b342c8335ce99b82",
      "date": 1639085102743
    },
    {
      "id": "cd1c2e060c0b9053",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "427f8198410a980d",
        "2cc344d94d3e5732",
        "c73b959f63c99cb7",
        "1af0f6adbc9e44a1",
        "d5d3c50ad0a55955",
        "a13fd15e4e8a4680",
        "fb2978b205baf6f7",
        "196070ae9b296c70",
        "4da20e33e6a7d3b8",
        "3f07209d2475f03e",
        "6ae72c707bde926a",
        "a719efb7132581b2",
        "adbefa0a1c9301b0",
        "2af48d7ebb8b84fc",
        "48dd70f27b03c761",
        "c9d94dfdccb5311d",
        "fd85baac3a5b8763",
        "38901286b8cfdf61",
        "755cacc2ccc3e160",
        "cd1c2e060c0b9053",
        "4ba3c0c6113b93c1",
        "846b0a9ea1e88215",
        "e5fdf48b31d110cd",
        "74bac7a04bb9f920",
        "b342c8335ce99b82"
      ],
      "date": 1639085108165
    },
    {
      "type": "edit",
      "id": "cd1c2e060c0b9053",
      "item": {
        "type": "html",
        "id": "cd1c2e060c0b9053",
        "text": "<center><img width=\"100%\" src=\"https://elmprogramming.com/images/chapter-8/8.4-receiving-data-from-js/elm-to-javascript.svg\"></center>"
      },
      "date": 1639085148473
    },
    {
      "item": {
        "type": "factory",
        "id": "345e5b99d4139ff8"
      },
      "id": "345e5b99d4139ff8",
      "type": "add",
      "after": "b342c8335ce99b82",
      "date": 1639085241799
    },
    {
      "id": "345e5b99d4139ff8",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "427f8198410a980d",
        "2cc344d94d3e5732",
        "c73b959f63c99cb7",
        "1af0f6adbc9e44a1",
        "d5d3c50ad0a55955",
        "a13fd15e4e8a4680",
        "fb2978b205baf6f7",
        "196070ae9b296c70",
        "4da20e33e6a7d3b8",
        "3f07209d2475f03e",
        "6ae72c707bde926a",
        "a719efb7132581b2",
        "adbefa0a1c9301b0",
        "2af48d7ebb8b84fc",
        "48dd70f27b03c761",
        "c9d94dfdccb5311d",
        "fd85baac3a5b8763",
        "38901286b8cfdf61",
        "755cacc2ccc3e160",
        "cd1c2e060c0b9053",
        "345e5b99d4139ff8",
        "4ba3c0c6113b93c1",
        "846b0a9ea1e88215",
        "e5fdf48b31d110cd",
        "74bac7a04bb9f920",
        "b342c8335ce99b82"
      ],
      "date": 1639085248058
    },
    {
      "type": "edit",
      "id": "345e5b99d4139ff8",
      "item": {
        "type": "paragraph",
        "id": "345e5b99d4139ff8",
        "text": "Weâ€™ll be storing whatever value JavaScript sends in our model. Letâ€™s add a new data constructor called ReceivedDataFromJS to the Msg type in PortExamples.elm that takes the model as an input and returns a message."
      },
      "date": 1639085249810
    },
    {
      "type": "edit",
      "id": "345e5b99d4139ff8",
      "item": {
        "type": "paragraph",
        "id": "345e5b99d4139ff8",
        "text": "Weâ€™ll be storing whatever value JavaScript sends in our model. Letâ€™s add a new data constructor called `ReceivedDataFromJS` to the Msg type in PortExamples.elm that takes the model as an input and returns a message."
      },
      "date": 1639085282943
    },
    {
      "type": "edit",
      "id": "345e5b99d4139ff8",
      "item": {
        "type": "markdown",
        "id": "345e5b99d4139ff8",
        "text": "Weâ€™ll be storing whatever value JavaScript sends in our model. Letâ€™s add a new data constructor called `ReceivedDataFromJS` to the Msg type in PortExamples.elm that takes the model as an input and returns a message."
      },
      "date": 1639085286707
    },
    {
      "type": "edit",
      "id": "345e5b99d4139ff8",
      "item": {
        "type": "markdown",
        "id": "345e5b99d4139ff8",
        "text": "Weâ€™ll be storing whatever value JavaScript sends in our model. Letâ€™s add â€“ see [[Protecting Boundaries]] â€“ a new data constructor called `ReceivedDataFromJS` to the Msg type in PortExamples.elm that takes the model as an input and returns a message."
      },
      "date": 1639085334893
    },
    {
      "type": "edit",
      "id": "345e5b99d4139ff8",
      "item": {
        "type": "markdown",
        "id": "345e5b99d4139ff8",
        "text": "Weâ€™ll be storing whatever value JavaScript sends in our model. Letâ€™s add â€“ see [[Protecting Boundaries]] â€“ a new data constructor called `ReceivedDataFromJS` to the `Msg` type in PortExamples.elm that takes the model as an input and returns a message."
      },
      "date": 1639085370024
    },
    {
      "type": "edit",
      "id": "345e5b99d4139ff8",
      "item": {
        "type": "markdown",
        "id": "345e5b99d4139ff8",
        "text": "Weâ€™ll be storing whatever value JavaScript sends in our model. Letâ€™s add â€“ see [[Protecting Boundaries]] â€“ a new data constructor called `ReceivedDataFromJS` to the `Msg` type in `PortExamples.elm` that takes the model as an input and returns a message."
      },
      "date": 1639085387087
    },
    {
      "item": {
        "type": "factory",
        "id": "15271be29afc71fb"
      },
      "id": "15271be29afc71fb",
      "type": "add",
      "after": "b342c8335ce99b82",
      "date": 1639085554805
    },
    {
      "type": "edit",
      "id": "15271be29afc71fb",
      "item": {
        "type": "pagefold",
        "id": "15271be29afc71fb",
        "text": "~"
      },
      "date": 1639085559953
    },
    {
      "item": {
        "type": "factory",
        "id": "536b57a77568b41e"
      },
      "id": "536b57a77568b41e",
      "type": "add",
      "after": "15271be29afc71fb",
      "date": 1639085561805
    },
    {
      "type": "edit",
      "id": "536b57a77568b41e",
      "item": {
        "type": "paragraph",
        "id": "536b57a77568b41e",
        "text": "https://github.com/elm/core/blob/1.0.5/src/Array.elm"
      },
      "date": 1639085566826
    },
    {
      "type": "edit",
      "id": "536b57a77568b41e",
      "item": {
        "type": "paragraph",
        "id": "536b57a77568b41e",
        "text": "The branching factor has to be a power of two (8, 16, 32, 64...). This is because we use the index to tell us which path to take when navigating the tree, and we do this by dividing it into several smaller numbers (see `shiftStep` documentation). By dividing the index into smaller numbers, we will always get a range which is a power of two (2 bits gives 0-3, 3 gives 0-7, 4 gives 0-15...). [https://github.com/elm/core/blob/1.0.5/src/Array.elm github]"
      },
      "date": 1639085608239
    },
    {
      "type": "edit",
      "id": "15271be29afc71fb",
      "item": {
        "type": "pagefold",
        "id": "15271be29afc71fb",
        "text": "`shiftStep` documentation"
      },
      "date": 1639085626734
    },
    {
      "item": {
        "type": "factory",
        "id": "10ee88611bc3fae6"
      },
      "id": "10ee88611bc3fae6",
      "type": "add",
      "after": "536b57a77568b41e",
      "date": 1639085696096
    },
    {
      "type": "edit",
      "id": "10ee88611bc3fae6",
      "item": {
        "type": "paragraph",
        "id": "10ee88611bc3fae6",
        "text": "\nLearning From The Standard Library\n    One of the best ways to learn Elm is to read Elmâ€™s standard library. A large portion of the code contained in the standard library is written in Elm. Itâ€™s good code written by experienced programmers some of whom were responsible for creating Elm itself.\n\n    Just pick a module you like and browse through some of the functions, types, and values listed in that module. After that, head on over to Github and look for the filename that contains the code for the module youâ€™re interested in. For example, the code for the List module is in src/List.elm, and the code for Maybe is in src/Maybe.elm. Once youâ€™re in the right file, search for the value youâ€™re looking for and try to understand how itâ€™s implemented.\n"
      },
      "date": 1639085697931
    },
    {
      "type": "edit",
      "id": "10ee88611bc3fae6",
      "item": {
        "type": "paragraph",
        "id": "10ee88611bc3fae6",
        "text": "Learning From The Standard Library"
      },
      "date": 1639085710223
    },
    {
      "type": "add",
      "id": "5e52cf8a8f1bfff0",
      "item": {
        "type": "paragraph",
        "id": "5e52cf8a8f1bfff0",
        "text": "    One of the best ways to learn Elm is to read Elmâ€™s standard library. A large portion of the code contained in the standard library is written in Elm. Itâ€™s good code written by experienced programmers some of whom were responsible for creating Elm itself.\n\n    Just pick a module you like and browse through some of the functions, types, and values listed in that module. After that, head on over to Github and look for the filename that contains the code for the module youâ€™re interested in. For example, the code for the List module is in src/List.elm, and the code for Maybe is in src/Maybe.elm. Once youâ€™re in the right file, search for the value youâ€™re looking for and try to understand how itâ€™s implemented.\n"
      },
      "after": "10ee88611bc3fae6",
      "date": 1639085711016
    },
    {
      "type": "edit",
      "id": "10ee88611bc3fae6",
      "item": {
        "type": "paragraph",
        "id": "10ee88611bc3fae6",
        "text": "# Learning From The Standard Library"
      },
      "date": 1639085719090
    },
    {
      "type": "edit",
      "id": "10ee88611bc3fae6",
      "item": {
        "type": "markdown",
        "id": "10ee88611bc3fae6",
        "text": "# Learning From The Standard Library"
      },
      "date": 1639085721970
    },
    {
      "type": "edit",
      "id": "5e52cf8a8f1bfff0",
      "item": {
        "type": "paragraph",
        "id": "5e52cf8a8f1bfff0",
        "text": "    One of the best ways to learn Elm is to read Elmâ€™s standard library. A large portion of the code contained in the standard library is written in Elm. Itâ€™s good code written by experienced programmers some of whom were responsible for creating Elm itself.\n\n    Just pick a module you like and browse through some of the functions, types, and values listed in that module. After that, head on over to Github and look for the filename that contains the code for the module youâ€™re interested in. For example, the code for the List module is in src/List.elm, and the code for Maybe is in src/Maybe.elm. Once youâ€™re in the right file, search for the value youâ€™re looking for and try to understand how itâ€™s implemented. [https://elmprogramming.com/pattern-matching.html page]\n"
      },
      "date": 1639085748739
    },
    {
      "type": "edit",
      "id": "755cacc2ccc3e160",
      "item": {
        "type": "paragraph",
        "id": "755cacc2ccc3e160",
        "text": "Unlike the command (returned by the outgoing port), we actually want the subscription (returned by the incoming port) to send a message to our app whenever the JavaScript code sends some data. Also see [[Runtime]]."
      },
      "date": 1639086398327
    },
    {
      "type": "edit",
      "id": "4ba3c0c6113b93c1",
      "item": {
        "type": "markdown",
        "id": "4ba3c0c6113b93c1",
        "text": "- [[Pattern Matching]]. [https://elmprogramming.com/pattern-matching.html page]\n> Pattern matching is the act of checking one or more inputs against a pre-defined pattern and seeing if they match. In [[Elm]], thereâ€™s only a fixed set of patterns we can match against, so pattern matching has limited application. However, itâ€™s still an important feature of the language. In this section, weâ€™ll go through a few examples of pattern matching to understand how it works in Elm.\n"
      },
      "date": 1639086504386
    },
    {
      "type": "add",
      "id": "60e267121cbc79ba",
      "item": {
        "type": "markdown",
        "id": "60e267121cbc79ba",
        "text": "Finally, itâ€™s important to keep in mind that pattern matching can only look at the structure of data. It canâ€™t do any computation on the data itself."
      },
      "after": "4ba3c0c6113b93c1",
      "date": 1639086506909
    },
    {
      "type": "edit",
      "id": "60e267121cbc79ba",
      "item": {
        "type": "markdown",
        "id": "60e267121cbc79ba",
        "text": "Finally, itâ€™s important to keep in mind that pattern matching can only look at the structure of data. It canâ€™t do any computation on the data itself. [https://elmprogramming.com/pattern-matching.html page], Summary."
      },
      "date": 1639086531884
    },
    {
      "item": {
        "type": "factory",
        "id": "fff8682dde3f84a3"
      },
      "id": "fff8682dde3f84a3",
      "type": "add",
      "after": "5e52cf8a8f1bfff0",
      "date": 1639086873350
    },
    {
      "id": "fff8682dde3f84a3",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "427f8198410a980d",
        "2cc344d94d3e5732",
        "c73b959f63c99cb7",
        "1af0f6adbc9e44a1",
        "d5d3c50ad0a55955",
        "a13fd15e4e8a4680",
        "fb2978b205baf6f7",
        "196070ae9b296c70",
        "4da20e33e6a7d3b8",
        "3f07209d2475f03e",
        "6ae72c707bde926a",
        "a719efb7132581b2",
        "adbefa0a1c9301b0",
        "2af48d7ebb8b84fc",
        "48dd70f27b03c761",
        "c9d94dfdccb5311d",
        "fd85baac3a5b8763",
        "38901286b8cfdf61",
        "755cacc2ccc3e160",
        "cd1c2e060c0b9053",
        "345e5b99d4139ff8",
        "4ba3c0c6113b93c1",
        "60e267121cbc79ba",
        "846b0a9ea1e88215",
        "e5fdf48b31d110cd",
        "74bac7a04bb9f920",
        "b342c8335ce99b82",
        "fff8682dde3f84a3",
        "15271be29afc71fb",
        "536b57a77568b41e",
        "10ee88611bc3fae6",
        "5e52cf8a8f1bfff0"
      ],
      "date": 1639086881859
    },
    {
      "type": "edit",
      "id": "fff8682dde3f84a3",
      "item": {
        "type": "reference",
        "id": "fff8682dde3f84a3",
        "site": "wiki.ralfbarkow.ch",
        "slug": "frame-integration-promises",
        "title": "Frame Integration Promises",
        "text": "We wrap the [[Frame plugin]]'s integrations with a promise-based interface and distribute them as an ES6 module along with a couple of helpers we've found useful."
      },
      "date": 1639086884416
    },
    {
      "item": {
        "type": "factory",
        "id": "339f5228278bbd60"
      },
      "id": "339f5228278bbd60",
      "type": "add",
      "after": "5e52cf8a8f1bfff0",
      "date": 1639087087538
    },
    {
      "type": "edit",
      "id": "339f5228278bbd60",
      "item": {
        "type": "paragraph",
        "id": "339f5228278bbd60",
        "text": "What helped you learn Elm?. "
      },
      "date": 1639087092585
    },
    {
      "type": "edit",
      "id": "339f5228278bbd60",
      "item": {
        "type": "paragraph",
        "id": "339f5228278bbd60",
        "text": "What helped you learn Elm?. ["
      },
      "date": 1639087120844
    },
    {
      "type": "edit",
      "id": "339f5228278bbd60",
      "item": {
        "type": "paragraph",
        "id": "339f5228278bbd60",
        "text": "What helped you learn Elm?. [https://discourse.elm-lang.org/t/what-helped-you-learn-elm/7959 discourse]"
      },
      "date": 1639087138076
    },
    {
      "item": {
        "type": "factory",
        "id": "9fb6e87624ddcdf0"
      },
      "id": "9fb6e87624ddcdf0",
      "type": "add",
      "after": "339f5228278bbd60",
      "date": 1639087506247
    },
    {
      "type": "edit",
      "id": "9fb6e87624ddcdf0",
      "item": {
        "type": "video",
        "id": "9fb6e87624ddcdf0",
        "text": "YOUTUBE 5CYeZ2kEiOI"
      },
      "date": 1639087518442
    },
    {
      "type": "edit",
      "id": "9fb6e87624ddcdf0",
      "item": {
        "type": "video",
        "id": "9fb6e87624ddcdf0",
        "text": "YOUTUBE 5CYeZ2kEiOI\nFrom Rails to Elm and Haskell - [[Richard Feldman]]"
      },
      "date": 1639087555153
    },
    {
      "item": {
        "type": "factory",
        "id": "5ef7635082de1ab5"
      },
      "id": "5ef7635082de1ab5",
      "type": "add",
      "after": "9fb6e87624ddcdf0",
      "date": 1639089294183
    },
    {
      "type": "edit",
      "id": "5ef7635082de1ab5",
      "item": {
        "type": "paragraph",
        "id": "5ef7635082de1ab5",
        "text": "Controlled Experiment"
      },
      "date": 1639089303593
    },
    {
      "type": "add",
      "id": "60b045fc5305db30",
      "item": {
        "type": "paragraph",
        "id": "60b045fc5305db30",
        "text": "Catch net / "
      },
      "after": "5ef7635082de1ab5",
      "date": 1639089342855
    },
    {
      "type": "edit",
      "id": "60b045fc5305db30",
      "item": {
        "type": "paragraph",
        "id": "60b045fc5305db30",
        "text": "Catch net / Safety net"
      },
      "date": 1639089351443
    },
    {
      "item": {
        "type": "factory",
        "id": "7f56cddc59a0c70c"
      },
      "id": "7f56cddc59a0c70c",
      "type": "add",
      "after": "60b045fc5305db30",
      "date": 1639089403324
    },
    {
      "type": "edit",
      "id": "7f56cddc59a0c70c",
      "item": {
        "type": "paragraph",
        "id": "7f56cddc59a0c70c",
        "text": "https://youtu.be/VV3qEaP-s_8?t=43"
      },
      "date": 1639089407630
    },
    {
      "type": "edit",
      "id": "7f56cddc59a0c70c",
      "item": {
        "type": "markdown",
        "id": "7f56cddc59a0c70c",
        "text": "https://youtu.be/VV3qEaP-s_8?t=43"
      },
      "date": 1639089409105
    },
    {
      "item": {
        "type": "factory",
        "id": "c96510d4b445612a"
      },
      "id": "c96510d4b445612a",
      "type": "add",
      "after": "7f56cddc59a0c70c",
      "date": 1639089420465
    },
    {
      "type": "edit",
      "id": "c96510d4b445612a",
      "item": {
        "type": "video",
        "id": "c96510d4b445612a",
        "text": "YOUTUBE VV3qEaP-s_8"
      },
      "date": 1639089441118
    },
    {
      "type": "edit",
      "id": "c96510d4b445612a",
      "item": {
        "type": "video",
        "id": "c96510d4b445612a",
        "text": "YOUTUBE VV3qEaP-s_8\nNeo4j Graph Embeddings"
      },
      "date": 1639089469187
    },
    {
      "id": "7f56cddc59a0c70c",
      "type": "move",
      "order": [
        "9bfd2dea33471d3d",
        "48919e294853ed1b",
        "fbe55e381e75a74a",
        "96210779a6036381",
        "3a598437ffa950d9",
        "0c33ea7967f5fa0e",
        "e4ea37de3ea43a9b",
        "1af4c6338e09b684",
        "af14866d2daf2149",
        "8b9f0280d6a70d35",
        "a9adcd74207482e4",
        "16a5424a9e8ef11c",
        "f2b120f924caa0e1",
        "7fc3ca50f7347127",
        "dc8170b9f7bc0b82",
        "0bf1576560fb8453",
        "4ffedc9754e07376",
        "427f8198410a980d",
        "2cc344d94d3e5732",
        "c73b959f63c99cb7",
        "1af0f6adbc9e44a1",
        "d5d3c50ad0a55955",
        "a13fd15e4e8a4680",
        "fb2978b205baf6f7",
        "196070ae9b296c70",
        "4da20e33e6a7d3b8",
        "3f07209d2475f03e",
        "6ae72c707bde926a",
        "a719efb7132581b2",
        "adbefa0a1c9301b0",
        "2af48d7ebb8b84fc",
        "48dd70f27b03c761",
        "c9d94dfdccb5311d",
        "fd85baac3a5b8763",
        "38901286b8cfdf61",
        "755cacc2ccc3e160",
        "cd1c2e060c0b9053",
        "345e5b99d4139ff8",
        "4ba3c0c6113b93c1",
        "60e267121cbc79ba",
        "846b0a9ea1e88215",
        "e5fdf48b31d110cd",
        "74bac7a04bb9f920",
        "b342c8335ce99b82",
        "fff8682dde3f84a3",
        "15271be29afc71fb",
        "536b57a77568b41e",
        "10ee88611bc3fae6",
        "5e52cf8a8f1bfff0",
        "339f5228278bbd60",
        "9fb6e87624ddcdf0",
        "5ef7635082de1ab5",
        "60b045fc5305db30",
        "c96510d4b445612a",
        "7f56cddc59a0c70c"
      ],
      "date": 1639089471965
    },
    {
      "type": "edit",
      "id": "7f56cddc59a0c70c",
      "item": {
        "type": "markdown",
        "id": "7f56cddc59a0c70c",
        "text": "esp. https://youtu.be/VV3qEaP-s_8?t=43"
      },
      "date": 1639089639353
    }
  ]
}