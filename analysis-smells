{
  "title": "Analysis Smells",
  "story": [
    {
      "type": "html",
      "text": "Okay I'm thinking about definitions 0, 1, and 4 off of the [[What Is Analysis]] page:.",
      "id": "fa4c23de603019228cea8b8c4281f9bb"
    },
    {
      "type": "html",
      "text": " <b>Group 0</b>, study of something preexisting, to answer questions  ",
      "id": "cb9af0d3e60d013dcf2f4846047f7c4c"
    },
    {
      "type": "html",
      "text": " <b>Group 1</b>, refined requirements",
      "id": "f923e6165217ece29e34c7d31ee7cab6"
    },
    {
      "type": "html",
      "text": " <b>(Group 2</b>, initial design)",
      "id": "2e46d630d17d8aeedd5fd1ea986ef03c"
    },
    {
      "type": "html",
      "text": " <b>(Group 3</b>, implementation-independent design)",
      "id": "4d9b4fb21e59dbfba4ac5e212499db7d"
    },
    {
      "type": "html",
      "text": " <b>Group 4</b>, determining what factors lurk around and in-between the Requirements",
      "id": "8f2ec2184b48d467f26904cadf9ae565"
    },
    {
      "type": "html",
      "text": "\nWhen you are trying to understand a software problem, what are typical errors and mistakes that are made?",
      "id": "74e050610648dc334ca48beea680497e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3fa3d9bec3149ec6da52dd83040ed92f"
    },
    {
      "type": "html",
      "text": "<i>The following is not an answer to the above question, but instead is offered in the same spirit as [[Code Smell]]s.</i>",
      "id": "9e825d4109762977c58fc38a41349892"
    },
    {
      "type": "html",
      "text": "\nCommon Analysis<b></b>Smells:",
      "id": "a3cf3b07deb8c64364174a0cbce44bbd"
    },
    {
      "type": "html",
      "text": " [[Gloss For The Boss]]:<br>the analysis deliverables are too pretentious, too elaborately typeset, the diagrams are too carefully shaded or coloured<i>(Although sloppy presentation can be a sign of sloppy thinking)</i>",
      "id": "be8ed0125385007c0c4fb394288f3651"
    },
    {
      "type": "html",
      "text": " [[Words For The Nerds]]:<br>the terminology used in the analysis deliverables is more familiar to the analyst than to those working in the problem domain.  <i>(Although uncritical adoption of the jargon of the [[Problem Domain]] without explanation or definition doesn't help to foster a common language for the project)</i>",
      "id": "63f3fe056a63c31757954d8998592562"
    },
    {
      "type": "html",
      "text": " [[Easy Peasy Lemon Squeezy]]:<br>the analysis deliverables contain lots of impressive descriptions about superficial (easily-obtained) user requirements, but not enough about other important requirements (authorization, reversal of errors, integration with other systems, logging and audit, time factors, etc).  <i>(Although many of the requirements in these areas will depend on the solution adopted rather than on the fundamental [[Business Requirements]]; that is, they are [[Second Order Requirements]])</i>",
      "id": "1ad64cd5509e429de655310e0664a3ba"
    },
    {
      "type": "html",
      "text": " Paving the Cowpath:<br>A user or sponsor (who usually doesn't know any better) requests something that basically mimics a paper workaround, including the addition of redundant data entry in multiple systems, and the analyst (who also doesn't, but who SHOULD, know better) diligently writes it up as a requirement to be built.  <i>(Since I have done this myself more than once, I was able to, at long last, recognize it as a smell and possibly an anti-pattern. So, I am putting it here with the hope that younger/smarter analysts will not stumble over it as I have.)</i> ",
      "id": "a7f06726d19f1b1c7ab10249437fcf01"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3fa3d9bec3149ec6da52dd83040ed92f"
    },
    {
      "type": "html",
      "text": "A problem I've seen on a number of occasions is that an analyst has a specific implementation technology in mind when analysing the requirements. It then becomes easy to think: \"feature X is probably difficult to implement -- let's hope users don't want it\". The analyst, explicitly or implicitly, neglects to consider that feature. When the requirements spec is finished, it is obvious that the chosen technology is a good fit because there are no requirements that are show-stoppers. 6 months down the line, the neglected feature comes to light, but because its a show-stopper for the implementation technology, it is put off till the next version.",
      "id": "e8cb79354b76558197c193a7ddf4d00e"
    },
    {
      "type": "html",
      "text": "<i>It is important to record all the requirements, <b></i>especially</b><i> those that are thought to be difficult. This is a matter of professionalism and integrity as well as good sense.</i>",
      "id": "ebec6605c0fe327ee2c34b3ed7768d9f"
    },
    {
      "type": "html",
      "text": "\nOne example I've seen more than once is a save/restore feature for a simulation. Users realise that a simulation that takes several hours (or days) to run, so it would be really nice if they could save the simulation state periodically for when the computer crashes. But the super-optimized C (or C++) code that implements the simulation model has no concept of the explicit state of the model. It's the type of thing that's easy to add early but, especially with traditional development methods, is very difficult to add later. The reason for not putting it in early is that 'surely that'll slow things down'.",
      "id": "a90778232f7773ad0c76d07da85ee7c1"
    },
    {
      "type": "html",
      "text": "\nDatabases (relational vs objects) offer a rich source of examples too. If a type of transaction is difficult (or slow) then, rather than fix the problem, it much easier to pretend that users don't really want that feature. As another example: users don't really want method grained version control for Java do they? Many tools use file based versioning, so assume users don't want finer grains.",
      "id": "164090387f94dae514e221b68e6d8d2b"
    },
    {
      "type": "html",
      "text": "\nOf course, analysis in a vacuum is also a problem: \"You want the software to determine the optimal route for your sales people to visit 1000 cities, in real time? Well, I'm sure our clever programmers can do that.\"",
      "id": "4a7041ee105b0cff136db294214eadd3"
    },
    {
      "type": "html",
      "text": "-- [[Dave Whipp]]",
      "id": "c6ba71790f2f14d6f2094a1b0f1a8ca2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3fa3d9bec3149ec6da52dd83040ed92f"
    },
    {
      "type": "html",
      "text": "[[Category Analysis]]",
      "id": "5fe9a8628d8209c46bf6c337781c551b"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AnalysisSmells c2.com]",
      "id": "a89af6d84e219bf276d88dee14c9cd2d"
    }
  ],
  "journal": [
    {
      "date": 1175628360000,
      "id": "e43be3a24504c0db0ba9e8d22625a1bb",
      "type": "create",
      "item": {
        "title": "Analysis Smells",
        "story": [
          {
            "type": "html",
            "text": "Okay I'm thinking about definitions 0, 1, and 4 off of the [[What Is Analysis]] page:.",
            "id": "fa4c23de603019228cea8b8c4281f9bb"
          },
          {
            "type": "html",
            "text": " <b>Group 0</b>, study of something preexisting, to answer questions  ",
            "id": "cb9af0d3e60d013dcf2f4846047f7c4c"
          },
          {
            "type": "html",
            "text": " <b>Group 1</b>, refined requirements",
            "id": "f923e6165217ece29e34c7d31ee7cab6"
          },
          {
            "type": "html",
            "text": " <b>(Group 2</b>, initial design)",
            "id": "2e46d630d17d8aeedd5fd1ea986ef03c"
          },
          {
            "type": "html",
            "text": " <b>(Group 3</b>, implementation-independent design)",
            "id": "4d9b4fb21e59dbfba4ac5e212499db7d"
          },
          {
            "type": "html",
            "text": " <b>Group 4</b>, determining what factors lurk around and in-between the Requirements",
            "id": "8f2ec2184b48d467f26904cadf9ae565"
          },
          {
            "type": "html",
            "text": "\nWhen you are trying to understand a software problem, what are typical errors and mistakes that are made?",
            "id": "74e050610648dc334ca48beea680497e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3fa3d9bec3149ec6da52dd83040ed92f"
          },
          {
            "type": "html",
            "text": "<i>The following is not an answer to the above question, but instead is offered in the same spirit as [[Code Smell]]s.</i>",
            "id": "9e825d4109762977c58fc38a41349892"
          },
          {
            "type": "html",
            "text": "\nCommon Analysis<b></b>Smells:",
            "id": "a3cf3b07deb8c64364174a0cbce44bbd"
          },
          {
            "type": "html",
            "text": " [[Gloss For The Boss]]:<br>the analysis deliverables are too pretentious, too elaborately typeset, the diagrams are too carefully shaded or coloured<i>(Although sloppy presentation can be a sign of sloppy thinking)</i>",
            "id": "be8ed0125385007c0c4fb394288f3651"
          },
          {
            "type": "html",
            "text": " [[Words For The Nerds]]:<br>the terminology used in the analysis deliverables is more familiar to the analyst than to those working in the problem domain.  <i>(Although uncritical adoption of the jargon of the [[Problem Domain]] without explanation or definition doesn't help to foster a common language for the project)</i>",
            "id": "63f3fe056a63c31757954d8998592562"
          },
          {
            "type": "html",
            "text": " [[Easy Peasy Lemon Squeezy]]:<br>the analysis deliverables contain lots of impressive descriptions about superficial (easily-obtained) user requirements, but not enough about other important requirements (authorization, reversal of errors, integration with other systems, logging and audit, time factors, etc).  <i>(Although many of the requirements in these areas will depend on the solution adopted rather than on the fundamental [[Business Requirements]]; that is, they are [[Second Order Requirements]])</i>",
            "id": "1ad64cd5509e429de655310e0664a3ba"
          },
          {
            "type": "html",
            "text": " Paving the Cowpath:<br>A user or sponsor (who usually doesn't know any better) requests something that basically mimics a paper workaround, including the addition of redundant data entry in multiple systems, and the analyst (who also doesn't, but who SHOULD, know better) diligently writes it up as a requirement to be built.  <i>(Since I have done this myself more than once, I was able to, at long last, recognize it as a smell and possibly an anti-pattern. So, I am putting it here with the hope that younger/smarter analysts will not stumble over it as I have.)</i> ",
            "id": "a7f06726d19f1b1c7ab10249437fcf01"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3fa3d9bec3149ec6da52dd83040ed92f"
          },
          {
            "type": "html",
            "text": "A problem I've seen on a number of occasions is that an analyst has a specific implementation technology in mind when analysing the requirements. It then becomes easy to think: \"feature X is probably difficult to implement -- let's hope users don't want it\". The analyst, explicitly or implicitly, neglects to consider that feature. When the requirements spec is finished, it is obvious that the chosen technology is a good fit because there are no requirements that are show-stoppers. 6 months down the line, the neglected feature comes to light, but because its a show-stopper for the implementation technology, it is put off till the next version.",
            "id": "e8cb79354b76558197c193a7ddf4d00e"
          },
          {
            "type": "html",
            "text": "<i>It is important to record all the requirements, <b></i>especially</b><i> those that are thought to be difficult. This is a matter of professionalism and integrity as well as good sense.</i>",
            "id": "ebec6605c0fe327ee2c34b3ed7768d9f"
          },
          {
            "type": "html",
            "text": "\nOne example I've seen more than once is a save/restore feature for a simulation. Users realise that a simulation that takes several hours (or days) to run, so it would be really nice if they could save the simulation state periodically for when the computer crashes. But the super-optimized C (or C++) code that implements the simulation model has no concept of the explicit state of the model. It's the type of thing that's easy to add early but, especially with traditional development methods, is very difficult to add later. The reason for not putting it in early is that 'surely that'll slow things down'.",
            "id": "a90778232f7773ad0c76d07da85ee7c1"
          },
          {
            "type": "html",
            "text": "\nDatabases (relational vs objects) offer a rich source of examples too. If a type of transaction is difficult (or slow) then, rather than fix the problem, it much easier to pretend that users don't really want that feature. As another example: users don't really want method grained version control for Java do they? Many tools use file based versioning, so assume users don't want finer grains.",
            "id": "164090387f94dae514e221b68e6d8d2b"
          },
          {
            "type": "html",
            "text": "\nOf course, analysis in a vacuum is also a problem: \"You want the software to determine the optimal route for your sales people to visit 1000 cities, in real time? Well, I'm sure our clever programmers can do that.\"",
            "id": "4a7041ee105b0cff136db294214eadd3"
          },
          {
            "type": "html",
            "text": "-- [[Dave Whipp]]",
            "id": "c6ba71790f2f14d6f2094a1b0f1a8ca2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3fa3d9bec3149ec6da52dd83040ed92f"
          },
          {
            "type": "html",
            "text": "[[Category Analysis]]",
            "id": "5fe9a8628d8209c46bf6c337781c551b"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AnalysisSmells c2.com]",
            "id": "a89af6d84e219bf276d88dee14c9cd2d"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1675225951152
    }
  ]
}