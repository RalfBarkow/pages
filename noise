{
  "title": "Noise",
  "story": [
    {
      "type": "paragraph",
      "id": "2d1dceb11b887538",
      "text": "A common way to generate 2D maps is to use a bandwidth-limited noise function, such as Simplex or Perlin noise, as a building block. [https://www.redblobgames.com/maps/terrain-from-noise/#noise page]"
    },
    {
      "type": "paragraph",
      "id": "1ff80f47cc8cf010",
      "text": "This is what the noise function looks like:"
    },
    {
      "type": "html",
      "id": "069e32990e830f2f",
      "text": "<center>\n  <img\n    width=\"100%\"\n    src=\"https://www.redblobgames.com/maps/terrain-from-noise/images/render-noise.png?2022-03-29-18-51-59\"\n  >\n</center>"
    },
    {
      "type": "paragraph",
      "id": "0c58447ff924e599",
      "text": "We assign each location on the map a number from 0.0 to 1.0. In this image, 0.0 is black and 1.0 is white. Here’s how to set the color at each grid location in C-like syntax:"
    },
    {
      "type": "code",
      "id": "88911ede175b448c",
      "text": "for (int y = 0; y < height; y++) {\n  for (int x = 0; x < width; x++) {      \n    double nx = x/width - 0.5, ny = y/height - 0.5;\n    value[y][x] = noise(nx, ny);\n  }\n}"
    },
    {
      "type": "paragraph",
      "id": "823dc966b569326e",
      "text": "The loop will work the same in Javascript, Python, Haxe, C++, C#, Java, and most other popular languages, so I’ll show it in C-like syntax and you can convert it to the language you’re using. In the rest of the tutorial, I’ll show how the loop body (the value[y][x]=… line) changes as we add more features. At the end, I’ll show a complete example. (See [https://www.redblobgames.com/maps/terrain-from-noise/#demo Playground])"
    },
    {
      "type": "paragraph",
      "id": "3f3d5fd7ae4733fc",
      "text": "Depending on the library you use, you may have to shift or multiply the values you get back to fit into the 0.0 to 1.0 range. Some libraries return 0.0 to 1.0; some return -1.0 to +1.0; some return other ranges like -0.7 to +0.7. Some don’t say what they return, so you may have to look at the return values to figure out the range."
    },
    {
      "type": "paragraph",
      "id": "191312629f1b61c1",
      "text": "⇒ [[Elevation]]"
    },
    {
      "type": "graphviz",
      "id": "61a38f9383264598",
      "text": "DOT strict digraph\n  \nrankdir=LR\n\n  node [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n  HERE NODE\n\n    node [style=filled fillcolor=lightblue]\n    WHERE /^Next/\n      LINKS HERE -> NODE\n          node [style=filled fillcolor=white]\n          HERE NODE\n            WHERE /^Next/\n              LINKS HERE -> NODE\n\n    node [style=filled fillcolor=white penwidth=3 color=black]\n    LINKS HERE -> NODE\n       node [style=filled fillcolor=white penwidth=1 color=black]\n       HERE NODE\n         LINKS HERE -> NODE\n\n   node [style=\"filled,rounded,dotted\" fillcolor=white]\n   edge [style=dotted]\n   HERE NODE",
      "dot": "strict digraph {rankdir=LR\n\n\n\n\n\nnode [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n\"Noise\"\nnode [style=filled fillcolor=lightblue]\nnode [style=filled fillcolor=white penwidth=3 color=black]\n\"Noise\" -> \"Elevation\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Elevation\"\n\"Elevation\" -> \"Terrain\nfrom\nNoise\"\nnode [style=\"filled,rounded,dotted\" fillcolor=white]\nedge [style=dotted]\n\"Noise\"}",
      "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 8.0.5 (0)\n -->\n<!-- Pages: 1 -->\n<svg width=\"338pt\" height=\"91pt\"\n viewBox=\"0.00 0.00 338.32 90.59\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 86.59)\">\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-86.59 334.32,-86.59 334.32,4 -4,4\"/>\n<!-- Noise -->\n<g id=\"node1\" class=\"node\">\n<title>Noise</title>\n<ellipse fill=\"lightyellow\" stroke=\"black\" stroke-width=\"3\" cx=\"35.73\" cy=\"-41.3\" rx=\"35.73\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"35.73\" y=\"-37.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Noise</text>\n</g>\n<!-- Elevation -->\n<g id=\"node2\" class=\"node\">\n<title>Elevation</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"158.21\" cy=\"-41.3\" rx=\"50.76\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"158.21\" y=\"-37.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Elevation</text>\n</g>\n<!-- Noise&#45;&gt;Elevation -->\n<g id=\"edge1\" class=\"edge\">\n<title>Noise&#45;&gt;Elevation</title>\n<path fill=\"none\" stroke=\"black\" d=\"M72.88,-41.3C80.04,-41.3 87.74,-41.3 95.48,-41.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"95.39,-44.8 105.39,-41.3 95.39,-37.8 95.39,-44.8\"/>\n</g>\n<!-- Terrain\nfrom\nNoise -->\n<g id=\"node3\" class=\"node\">\n<title>Terrain\nfrom\nNoise</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"287.65\" cy=\"-41.3\" rx=\"42.67\" ry=\"41.3\"/>\n<text text-anchor=\"middle\" x=\"287.65\" y=\"-53.9\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Terrain</text>\n<text text-anchor=\"middle\" x=\"287.65\" y=\"-37.1\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">from</text>\n<text text-anchor=\"middle\" x=\"287.65\" y=\"-20.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Noise</text>\n</g>\n<!-- Elevation&#45;&gt;Terrain\nfrom\nNoise -->\n<g id=\"edge2\" class=\"edge\">\n<title>Elevation&#45;&gt;Terrain\nfrom\nNoise</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210.31,-41.3C218.03,-41.3 226.01,-41.3 233.76,-41.3\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"233.53,-44.8 243.53,-41.3 233.53,-37.8 233.53,-44.8\"/>\n</g>\n</g>\n</svg>\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Noise",
        "story": []
      },
      "date": 1651988786919
    },
    {
      "item": {
        "type": "factory",
        "id": "cbe94c6dd4ee8c5d"
      },
      "id": "cbe94c6dd4ee8c5d",
      "type": "add",
      "date": 1651988788319
    },
    {
      "type": "edit",
      "id": "cbe94c6dd4ee8c5d",
      "item": {
        "type": "paragraph",
        "id": "cbe94c6dd4ee8c5d",
        "text": "https://www.redblobgames.com/maps/terrain-from-noise/#noise"
      },
      "date": 1651988789820
    },
    {
      "type": "edit",
      "id": "cbe94c6dd4ee8c5d",
      "item": {
        "type": "markdown",
        "id": "cbe94c6dd4ee8c5d",
        "text": "https://www.redblobgames.com/maps/terrain-from-noise/#noise"
      },
      "date": 1651988790642
    },
    {
      "item": {
        "type": "factory",
        "id": "2d1dceb11b887538"
      },
      "id": "2d1dceb11b887538",
      "type": "add",
      "after": "cbe94c6dd4ee8c5d",
      "date": 1651988799650
    },
    {
      "type": "edit",
      "id": "2d1dceb11b887538",
      "item": {
        "type": "paragraph",
        "id": "2d1dceb11b887538",
        "text": "A common way to generate 2D maps is to use a bandwidth-limited noise function, such as Simplex or Perlin noise, as a building block. This is what the noise function looks like:"
      },
      "date": 1651988801958
    },
    {
      "item": {
        "type": "factory",
        "id": "069e32990e830f2f"
      },
      "id": "069e32990e830f2f",
      "type": "add",
      "after": "2d1dceb11b887538",
      "date": 1651988812781
    },
    {
      "type": "edit",
      "id": "069e32990e830f2f",
      "item": {
        "type": "html",
        "id": "069e32990e830f2f",
        "text": "<center>\n  <img\n    width=\"100%\"\n    src=\"https://www.redblobgames.com/maps/terrain-from-noise/images/render-noise.png?2022-03-29-18-51-59\"\n  >\n</center>"
      },
      "date": 1651988840048
    },
    {
      "item": {
        "type": "factory",
        "id": "0c58447ff924e599"
      },
      "id": "0c58447ff924e599",
      "type": "add",
      "after": "069e32990e830f2f",
      "date": 1651988860525
    },
    {
      "type": "edit",
      "id": "0c58447ff924e599",
      "item": {
        "type": "paragraph",
        "id": "0c58447ff924e599",
        "text": "We assign each location on the map a number from 0.0 to 1.0. In this image, 0.0 is black and 1.0 is white. Here’s how to set the color at each grid location in C-like syntax:"
      },
      "date": 1651988862097
    },
    {
      "item": {
        "type": "factory",
        "id": "88911ede175b448c"
      },
      "id": "88911ede175b448c",
      "type": "add",
      "after": "0c58447ff924e599",
      "date": 1651988867146
    },
    {
      "type": "edit",
      "id": "88911ede175b448c",
      "item": {
        "type": "code",
        "id": "88911ede175b448c",
        "text": "for (int y = 0; y < height; y++) {\n  for (int x = 0; x < width; x++) {      \n    double nx = x/width - 0.5, ny = y/height - 0.5;\n    value[y][x] = noise(nx, ny);\n  }\n}"
      },
      "date": 1651988869671
    },
    {
      "item": {
        "type": "factory",
        "id": "823dc966b569326e"
      },
      "id": "823dc966b569326e",
      "type": "add",
      "after": "88911ede175b448c",
      "date": 1651988909703
    },
    {
      "type": "edit",
      "id": "823dc966b569326e",
      "item": {
        "type": "paragraph",
        "id": "823dc966b569326e",
        "text": "The loop will work the same in Javascript, Python, Haxe, C++, C#, Java, and most other popular languages, so I’ll show it in C-like syntax and you can convert it to the language you’re using. In the rest of the tutorial, I’ll show how the loop body (the value[y][x]=… line) changes as we add more features. At the end, I’ll show a complete example."
      },
      "date": 1651988911187
    },
    {
      "item": {
        "type": "factory",
        "id": "3f3d5fd7ae4733fc"
      },
      "id": "3f3d5fd7ae4733fc",
      "type": "add",
      "after": "823dc966b569326e",
      "date": 1651988934230
    },
    {
      "type": "edit",
      "id": "3f3d5fd7ae4733fc",
      "item": {
        "type": "paragraph",
        "id": "3f3d5fd7ae4733fc",
        "text": "Depending on the library you use, you may have to shift or multiply the values you get back to fit into the 0.0 to 1.0 range. Some libraries return 0.0 to 1.0; some return -1.0 to +1.0; some return other ranges like -0.7 to +0.7. Some don’t say what they return, so you may have to look at the return values to figure out the range."
      },
      "date": 1651988936119
    },
    {
      "type": "edit",
      "id": "823dc966b569326e",
      "item": {
        "type": "paragraph",
        "id": "823dc966b569326e",
        "text": "The loop will work the same in Javascript, Python, Haxe, C++, C#, Java, and most other popular languages, so I’ll show it in C-like syntax and you can convert it to the language you’re using. In the rest of the tutorial, I’ll show how the loop body (the value[y][x]=… line) changes as we add more features. At the end, I’ll show a complete example. (See Playground)"
      },
      "date": 1651988991215
    },
    {
      "type": "edit",
      "id": "823dc966b569326e",
      "item": {
        "type": "paragraph",
        "id": "823dc966b569326e",
        "text": "The loop will work the same in Javascript, Python, Haxe, C++, C#, Java, and most other popular languages, so I’ll show it in C-like syntax and you can convert it to the language you’re using. In the rest of the tutorial, I’ll show how the loop body (the value[y][x]=… line) changes as we add more features. At the end, I’ll show a complete example. (See [Playground)"
      },
      "date": 1651989010866
    },
    {
      "type": "edit",
      "id": "823dc966b569326e",
      "item": {
        "type": "paragraph",
        "id": "823dc966b569326e",
        "text": "The loop will work the same in Javascript, Python, Haxe, C++, C#, Java, and most other popular languages, so I’ll show it in C-like syntax and you can convert it to the language you’re using. In the rest of the tutorial, I’ll show how the loop body (the value[y][x]=… line) changes as we add more features. At the end, I’ll show a complete example. (See [https://www.redblobgames.com/maps/terrain-from-noise/#demo Playground])"
      },
      "date": 1651989025830
    },
    {
      "item": {
        "type": "factory",
        "id": "191312629f1b61c1"
      },
      "id": "191312629f1b61c1",
      "type": "add",
      "after": "3f3d5fd7ae4733fc",
      "date": 1651989223535
    },
    {
      "type": "edit",
      "id": "191312629f1b61c1",
      "item": {
        "type": "paragraph",
        "id": "191312629f1b61c1",
        "text": "Next: [[Elevation]]"
      },
      "date": 1651989230104
    },
    {
      "item": {
        "type": "factory",
        "id": "61a38f9383264598"
      },
      "id": "61a38f9383264598",
      "type": "add",
      "after": "191312629f1b61c1",
      "date": 1651989244862
    },
    {
      "type": "edit",
      "id": "61a38f9383264598",
      "item": {
        "type": "graphviz",
        "id": "61a38f9383264598",
        "text": "DOT strict digraph\n  \nrankdir=LR\n\n  node [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n  HERE NODE\n\n    node [style=filled fillcolor=lightblue]\n    WHERE /^Next/\n      LINKS HERE -> NODE\n          node [style=filled fillcolor=white]\n          HERE NODE\n            WHERE /^Next/\n              LINKS HERE -> NODE\n\n    node [style=filled fillcolor=white penwidth=3 color=black]\n    LINKS HERE -> NODE\n       node [style=filled fillcolor=white penwidth=1 color=black]\n       HERE NODE\n         LINKS HERE -> NODE\n\n   node [style=\"filled,rounded,dotted\" fillcolor=white]\n   edge [style=dotted]\n   HERE NODE"
      },
      "date": 1651989250922
    },
    {
      "type": "remove",
      "id": "cbe94c6dd4ee8c5d",
      "date": 1658987529231
    },
    {
      "type": "edit",
      "id": "2d1dceb11b887538",
      "item": {
        "type": "paragraph",
        "id": "2d1dceb11b887538",
        "text": "A common way to generate 2D maps is to use a bandwidth-limited noise function, such as Simplex or Perlin noise, as a building block. https://www.redblobgames.com/maps/terrain-from-noise/#noise page]"
      },
      "date": 1658987543008
    },
    {
      "type": "add",
      "id": "1ff80f47cc8cf010",
      "item": {
        "type": "paragraph",
        "id": "1ff80f47cc8cf010",
        "text": "This is what the noise function looks like:"
      },
      "after": "2d1dceb11b887538",
      "date": 1658987545395
    },
    {
      "type": "edit",
      "id": "2d1dceb11b887538",
      "item": {
        "type": "paragraph",
        "id": "2d1dceb11b887538",
        "text": "A common way to generate 2D maps is to use a bandwidth-limited noise function, such as Simplex or Perlin noise, as a building block. [https://www.redblobgames.com/maps/terrain-from-noise/#noise page]"
      },
      "date": 1658987548687
    },
    {
      "type": "edit",
      "id": "191312629f1b61c1",
      "item": {
        "type": "paragraph",
        "id": "191312629f1b61c1",
        "text": "⇒ [[Elevation]]"
      },
      "date": 1701065480476
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1701071035659
    }
  ]
}