{
  "title": "2022-05-04",
  "story": [
    {
      "type": "paragraph",
      "id": "50fabbaa3fbf1ad5",
      "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1651630369301103cxmCU:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nFirst graph automatically added to [[El Dorado]]. I asked, where does \"cunningham\" connect and wiki was in one corner."
    },
    {
      "type": "html",
      "id": "997ef2384df8386f",
      "text": "<center>\n  <img\n    width=\"100%\"\n    src=\"https://dreyeck.freedombox.rocks/_matrix/media/r0/download/matrix.org/YWmLdVHmcCvuSfGvAQVZnOeo\"\n  >\n</center>"
    },
    {
      "type": "paragraph",
      "id": "ff880b594e5e48e0",
      "text": "Notice it quotes \"property graphs\" as the source.\nThis was harder than I though since I have forgotten so much [[Ruby]] where I had to recode the [[merge logic]] to make it work.\nIf I click the 2 it will show me the properties of the person and the wiki."
    },
    {
      "type": "pagefold",
      "id": "8020ab622eb814a1",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c1f3fd9f204c0c57",
      "text": "⇒ [[Merge]]: ⇒ [[Merge Logic]]"
    },
    {
      "type": "reference",
      "id": "ce3eaa53fdba959b",
      "site": "scrape.fed.wiki",
      "slug": "scrape--search-explained",
      "title": "Scrape & Search Explained",
      "text": "Our federation wide search runs a scrape four times a day to update flat-file indices that are searched on demand with a plugin and several related tools. [https://github.com/WardCunningham/search github]"
    },
    {
      "type": "reference",
      "id": "b873df8d1b733e44",
      "site": "scrape.fed.wiki",
      "slug": "subsystem-diagrams",
      "title": "Subsystem Diagrams",
      "text": "We will draw component and interaction diagrams for subsystems and then compose these into larger diagrams as suits our needs in the moment."
    },
    {
      "type": "reference",
      "id": "e5e6f0dd82efaeec",
      "site": "wiki.ralfbarkow.ch",
      "slug": "public-side-of-wiki",
      "title": "Public Side of Wiki",
      "text": "Wiki is by nature public. Wiki, you might think is all about sharing freely, and loving the limelight, praising the openess. But this is not so. Wiki has a private side."
    },
    {
      "type": "reference",
      "id": "0da0b9c556b1e9a3",
      "site": "ddd.ward.wiki.org",
      "slug": "cautiously-merge",
      "title": "Cautiously Merge",
      "text": "We have developed techniques for adding new information sources without disrupting the work we have already done. In essence, we use queries of partially integrated data to understand how more useful relations can be established."
    },
    {
      "type": "reference",
      "id": "a96c67f42317ff65",
      "site": "ddd.ward.wiki.org",
      "slug": "merge-and-transform",
      "title": "Merge and Transform",
      "text": "We reconcile differences in terms as we merge information from extracted files and make connections between those elements where important relations exist."
    },
    {
      "type": "reference",
      "id": "22af7e5556d165a7",
      "site": "wiki.ralfbarkow.ch",
      "slug": "crdt-implementation",
      "title": "CRDT Implementation",
      "text": "[[Yjs]] is a [(CRDT implementation](https://github.com/yjs/yjs#Yjs-CRDT-Algorithm) that exposes its internal data structure as shared types. Shared types are common data types like Map or Array with superpowers: changes are automatically distributed to other peers and merged without merge conflicts."
    },
    {
      "type": "reference",
      "id": "b95859617db6e58b",
      "site": "garden.asia.wiki.org",
      "slug": "lineup-overview",
      "title": "Lineup Overview",
      "text": "Transport from here to see all Graph plugins in the lineup on one chart. Save it if you like it."
    },
    {
      "type": "markdown",
      "id": "24144bf816da4811",
      "text": "> Here we try to [[merge]] diagrams without a transporter."
    },
    {
      "type": "reference",
      "id": "1db13c9effa36c6f",
      "site": "context.asia.wiki.org",
      "slug": "tips-for-modeling",
      "title": "Tips for Modeling",
      "text": "We suggest an incremental approach where new sources are added to a daily build and explored with ad-hoc queries before choosing a more permanent representation as nodes and relations."
    },
    {
      "type": "reference",
      "id": "84cf18bcb6f6209c",
      "site": "garden.asia.wiki.org",
      "slug": "lineup-viewer",
      "title": "Lineup Viewer",
      "text": "Here we merge graphs from the lineup into a single graph. Press find to merge, draw to open new page."
    },
    {
      "type": "reference",
      "id": "bec9b23cd44257af",
      "site": "marc.tries.fed.wiki",
      "slug": "import-link-from-arrows",
      "title": "Import Link from Arrows",
      "text": "We test export as URL feature as another mechanism to [[Import from Arrow]]."
    },
    {
      "type": "markdown",
      "id": "5a9ac9adff84b21c",
      "text": "> Create Graphviz and\n[[Merge]] Arrows Graphs"
    },
    {
      "type": "reference",
      "id": "c58f40b323d32f85",
      "site": "scripts.fed.wiki",
      "slug": "graph-source-diagram-script",
      "title": "Graph Source Diagram Script",
      "text": "The Graph plugin sources \"graph\" data as might other plugins eventually. This script [[merge]]s this data to be drawn with Graphviz. [https://github.com/WardCunningham/assets/blob/master/pages/lineup-overview/diagram.html github]"
    },
    {
      "type": "reference",
      "id": "4dd6e33d99354bfe",
      "site": "sailing.marc.dojo.fed.wiki",
      "slug": "selected-graphs-merged",
      "title": "Selected Graphs Merged",
      "text": "Imported from Arrows: […]"
    },
    {
      "type": "reference",
      "id": "393778ebdced1f66",
      "site": "best.ward.bay.wiki.org",
      "slug": "inventory-of-workflow-steps",
      "title": "Inventory of Workflow Steps",
      "text": "We will adapt the ideas of pattern languages to what we call workflows. Each step makes something. We document those things and the flows among them into a knowledge graph."
    },
    {
      "type": "reference",
      "id": "85266fd35558ba3d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "automerge",
      "title": "Automerge",
      "text": "[[Automerge]] is a library of data structures for building collaborative applications in JavaScript. [https://github.com/automerge/automerge github]"
    },
    {
      "type": "reference",
      "id": "f3da658ed4ba5ffe",
      "site": "marc.tries.fed.wiki",
      "slug": "thinking-with-arrows-tool",
      "title": "Thinking with Arrows Tool",
      "text": "How does the Arrows Tool help us think together?"
    },
    {
      "type": "markdown",
      "id": "8eb36f0b8f5f5587",
      "text": "> * Combine perspectives using Ward's \"[[merge]] arrows\" tool"
    },
    {
      "type": "reference",
      "id": "1ac8f2aac010dbc2",
      "site": "wiki.ralfbarkow.ch",
      "slug": "branchial-space",
      "title": "Branchial Space",
      "text": "[[Causal graphs]] provide one kind of summary of the [[evolution]] of a system, based on capturing the [[causal relationships]] between events. "
    },
    {
      "type": "markdown",
      "id": "01d70712cd8b38ca",
      "text": "> One might perhaps have imagined that states on different branches of a [[multiway system]] would be completely independent. But when [[causal invariance]] is present they are definitely not—because for example whenever they split (to form a branch pair), they will always [[merge]] again. "
    },
    {
      "type": "reference",
      "id": "a55cee48faa29636",
      "site": "ward.dojo.fed.wiki",
      "slug": "composite-graph",
      "title": "Composite Graph",
      "text": "We have a simple interface for constructing graphs but these are restricted to only new nodes for now. Here we close loops by merging several smaller graphs that intersect at identical nodes. [https://github.com/WardCunningham/assets/blob/master/pages/mock-graph-data/composite.html github]"
    },
    {
      "type": "markdown",
      "id": "b9d47f47f6db698b",
      "text": "⇒ `mock-graph-data/composite.html`"
    },
    {
      "type": "code",
      "id": "3e15a595b1a101fb",
      "text": "  function merge(comp,incr,source) {\n\n    function mergeprops(into,from) {\n      const keys = Object.keys(into)\n        .concat(Object.keys(from))\n        .filter(uniq)\n      for (const key of keys) {\n        if (into[key]) {\n          if (from[key] && into[key] != from[key]) {\n            window.result.innerHTML +=\n              `<div style=\"font-size:small; padding:4px; background-color:#fee; border-radius:4px; border:1px solid #aaa;\">\n                conflict for \"${key}\" property<br>\n                choosing \"${into[key]}\" over \"${from[key]}\"</div>`\n          }\n        }\n        else {\n          if(from[key]) {\n            into[key] = from[key]\n          }\n        }\n      }\n    }\n"
    },
    {
      "type": "pagefold",
      "id": "5313fc944acc056f",
      "text": "~"
    },
    {
      "type": "video",
      "id": "dd6234e943d9a1ad",
      "text": "YOUTUBE cdgZAJYsLcM\n#opendata #datasharing #biology\nFORGOTTEN DATA: the Leftovers of Science [Subs ENG/GER/FRA/ITA]"
    },
    {
      "type": "markdown",
      "id": "50c296ddbc72cba6",
      "text": "[[Simone Pengue]] and [[Michael Podvinec]]\n"
    },
    {
      "type": "markdown",
      "id": "d456ae488bf9dff3",
      "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=116\n"
    },
    {
      "type": "markdown",
      "id": "a1333b15b129c63a",
      "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=530\n> A better way to do it and, sort of, the way that we now consider the best way is to use public repositories for data. They are forever, they have permanent identifiers but they are also domain specific. And in fact in biology we have like the [[Protein Data Bank]]. This was founded in 1971. In its first release it contained, so this is a database for the structure of proteins and in its first release it contained just eight proteins. By now it’s the de facto standard for the exchange of protein structural data and it’s sort of *the* place where you put a structure, so if you can if you have this kind of repositories available to you that are clearly domain specific and sort of the thing that is internationally used by everybody that’s kind of the best place to put this information because everybody knows where to pick it up afterwards.\n\n"
    },
    {
      "type": "markdown",
      "id": "b77bc700107ce44d",
      "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=589\n"
    },
    {
      "type": "markdown",
      "id": "845f7c6340baa885",
      "text": "The scientific community has already had to face the issue of data sharing\n\nand in 2016 they published a series of guidelines - which go under the name of ‘[[FAIR data]]’.\n\nI’ve heard of this FAIR data, could you please explain us what they are?\nFAIR has a little bit a different approach, in not so much focussing on\nopenness and free availability, let’s say,\nbut rather focussing on, if data is available, it should be made available in a way\n\nthat it can actually be capitalised on.\nSo FAIR, the acronym, F is for findable,\nso there’s no use that there’s a data set out there, but I don’t know how to find it.\n\nAnd ‘findable’’ also brings up the important topic of metadata.\nIf I don’t know what’s in the data, just knowing there’s a dataset is of little value.\nThe A in FAIR is ‘accessible’ that if there is this dataset, I need to know\nhow I can get it, where I can get it\nI stands for ‘interoperable’. This is maybe the biggest contrast to the open data movement,\n\nin that this is now a very strong focus saying basically\ndata should be readable by humans and by machines\n\nSo, use common formats, document the formats\n\nAnd then R, in FAIR stands for ‘reusable’.\nProvide the data in a format, with the proper annotation, with the proper metadata\nyou see I’m saying metadata a lot. But that’s really what is key here.\nFrom personal experience we once received, in a project we received\ntwo USB drives with data that were measured at another group.\nThis was, sort of, kind of discarded data, really.\nThey had tried to do something else, but they had this data lying around we wanted to do something with it.\nAnd it was pretty hard to convince them to actually go the extra effort provide us with the data\nand then at some point we had these two USB drives and they were full with folders\n\nthat were called with numbers: 127, 509 -- In the\nfolders were files that had similar non-clear file names,\n\nthat probably made sense to somebody who had sort of the master list\nbut it made no sense to us. So in the end we had two hard disks that were full of data\nbut we couldn’t do anything with it.\n"
    },
    {
      "type": "markdown",
      "id": "2b30a2a4e3f642e2",
      "text": "[…] Dr [[Mariagrazia Giuffreda]], [https://youtubetranscript.com/?v=cdgZAJYsLcM&t=871 youtubetranscript]"
    },
    {
      "type": "pagefold",
      "id": "f83a7986da0e54fd",
      "text": "~"
    },
    {
      "type": "video",
      "id": "9fafee134019516a",
      "text": "YOUTUBE 9Kzn4zV55JM\nThe Quantum Underpinning of Life - Prof. [[Johnjoe McFadden]] [Zoom seminar at Biozentrum, Basel]"
    },
    {
      "type": "markdown",
      "id": "0f3d3952c635aac1",
      "text": "https://youtubetranscript.com/?v=9Kzn4zV55JM&t=976\n"
    },
    {
      "type": "markdown",
      "id": "42dd50efa00d8bf3",
      "text": "> Is it likely that coherence is maintained in living systems, and this shows that coherence is maintained in a pool when you drop a If you drop a pebble into a pool, you see mechanical features of that event and you can see interference waves, mechanical interference between two pebbles that fall into the pool."
    },
    {
      "type": "pagefold",
      "id": "b8a9ef0df5147fa7",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "8a91892ec3cc422e",
      "text": "[[Wiki Client]]: better SVG handling. [https://github.com/fedwiki/wiki-client/commit/03b2c854cce108e99d157cb0a656ab0ef4d5fb1a commit]"
    },
    {
      "type": "markdown",
      "id": "5f01966e58e7c637",
      "text": "> dropping an SVG file, or URL, will create an html item with the SVG"
    },
    {
      "type": "paragraph",
      "id": "ca2bf21d61cfe55e",
      "text": "using pure promises syntax: [https://javascript.info/fetch page]"
    },
    {
      "type": "paragraph",
      "id": "4eda9c44568d3607",
      "text": "With modern functions, we attach our callbacks to the returned promises instead, forming a promise chain: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises page]"
    },
    {
      "type": "code",
      "id": "a2f6d9996823d443",
      "text": "doSomething()\n.then(function(result) {\n  return doSomethingElse(result);\n})\n.then(function(newResult) {\n  return doThirdThing(newResult);\n})\n.then(function(finalResult) {\n  console.log('Got the final result: ' + finalResult);\n})\n.catch(failureCallback);\n"
    },
    {
      "type": "markdown",
      "id": "1a48aaab2c119054",
      "text": "`lib/factory.coffee`"
    },
    {
      "type": "code",
      "id": "8dff93fa921f008d",
      "text": "  addRemoteSvg = (url) ->\n    document.documentElement.style.cursor = 'wait'\n    fetch(url)\n    .then (response) ->\n      if response.ok\n        return response\n      throw new Error('Unable to fetch svg')\n    .then (response) ->\n      return response.text()\n    .then (svgText) ->\n      document.documentElement.style.cursor = 'default'\n      item.type = 'html'\n      item.source = url\n      item.text = svgText + \"<p>[#{url} Source]</p>\"\n      syncEditAction()"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-05-04",
        "story": []
      },
      "date": 1651631553765
    },
    {
      "item": {
        "type": "factory",
        "id": "50fabbaa3fbf1ad5"
      },
      "id": "50fabbaa3fbf1ad5",
      "type": "add",
      "date": 1651631566078
    },
    {
      "type": "edit",
      "id": "50fabbaa3fbf1ad5",
      "item": {
        "type": "paragraph",
        "id": "50fabbaa3fbf1ad5",
        "text": "[[Ward]] via [matrix]\nFirst graph automatically added to El Dorado. I asked, where does \"cunningham\" connect and wiki was in one corner."
      },
      "date": 1651631593924
    },
    {
      "type": "edit",
      "id": "50fabbaa3fbf1ad5",
      "item": {
        "type": "paragraph",
        "id": "50fabbaa3fbf1ad5",
        "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1651630369301103cxmCU:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nFirst graph automatically added to El Dorado. I asked, where does \"cunningham\" connect and wiki was in one corner."
      },
      "date": 1651631610893
    },
    {
      "type": "edit",
      "id": "50fabbaa3fbf1ad5",
      "item": {
        "type": "paragraph",
        "id": "50fabbaa3fbf1ad5",
        "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1651630369301103cxmCU:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nFirst graph automatically added to [[El Dorado]]. I asked, where does \"cunningham\" connect and wiki was in one corner."
      },
      "date": 1651648092129
    },
    {
      "item": {
        "type": "factory",
        "id": "997ef2384df8386f"
      },
      "id": "997ef2384df8386f",
      "type": "add",
      "after": "50fabbaa3fbf1ad5",
      "date": 1651648881331
    },
    {
      "type": "edit",
      "id": "997ef2384df8386f",
      "item": {
        "type": "html",
        "id": "997ef2384df8386f",
        "text": "<center>\n  <img\n    width=\"100%\"\n    src=\"https://dreyeck.freedombox.rocks/_matrix/media/r0/download/matrix.org/YWmLdVHmcCvuSfGvAQVZnOeo\"\n  >\n</center>"
      },
      "date": 1651648916702
    },
    {
      "item": {
        "type": "factory",
        "id": "ff880b594e5e48e0"
      },
      "id": "ff880b594e5e48e0",
      "type": "add",
      "after": "997ef2384df8386f",
      "date": 1651648930787
    },
    {
      "type": "edit",
      "id": "ff880b594e5e48e0",
      "item": {
        "type": "paragraph",
        "id": "ff880b594e5e48e0",
        "text": "Notice it quotes \"property graphs\" as the source.\nThis was harder than I though since I have forgotten so much Ruby where I had to recode the merge logic to make it work.\nIf I click the 2 it will show me the properties of the person and the wiki."
      },
      "date": 1651648932679
    },
    {
      "type": "edit",
      "id": "ff880b594e5e48e0",
      "item": {
        "type": "paragraph",
        "id": "ff880b594e5e48e0",
        "text": "Notice it quotes \"property graphs\" as the source.\nThis was harder than I though since I have forgotten so much [[Ruby]] where I had to recode the merge logic to make it work.\nIf I click the 2 it will show me the properties of the person and the wiki."
      },
      "date": 1651648949147
    },
    {
      "type": "edit",
      "id": "ff880b594e5e48e0",
      "item": {
        "type": "paragraph",
        "id": "ff880b594e5e48e0",
        "text": "Notice it quotes \"property graphs\" as the source.\nThis was harder than I though since I have forgotten so much [[Ruby]] where I had to recode the [[merge logic]] to make it work.\nIf I click the 2 it will show me the properties of the person and the wiki."
      },
      "date": 1651648966659
    },
    {
      "item": {
        "type": "factory",
        "id": "8020ab622eb814a1"
      },
      "id": "8020ab622eb814a1",
      "type": "add",
      "after": "ff880b594e5e48e0",
      "date": 1651649283411
    },
    {
      "type": "edit",
      "id": "8020ab622eb814a1",
      "item": {
        "type": "pagefold",
        "id": "8020ab622eb814a1",
        "text": "~"
      },
      "date": 1651649287279
    },
    {
      "item": {
        "type": "factory",
        "id": "ce3eaa53fdba959b"
      },
      "id": "ce3eaa53fdba959b",
      "type": "add",
      "after": "8020ab622eb814a1",
      "date": 1651649288900
    },
    {
      "type": "edit",
      "id": "ce3eaa53fdba959b",
      "item": {
        "type": "reference",
        "id": "ce3eaa53fdba959b",
        "site": "scrape.fed.wiki",
        "slug": "scrape--search-explained",
        "title": "Scrape & Search Explained",
        "text": "Our federation wide search runs a scrape four times a day to update flat-file indices that are searched on demand with a plugin and several related tools. [https://github.com/WardCunningham/search github]"
      },
      "date": 1651649302524
    },
    {
      "item": {
        "type": "factory",
        "id": "b873df8d1b733e44"
      },
      "id": "b873df8d1b733e44",
      "type": "add",
      "after": "ce3eaa53fdba959b",
      "date": 1651650487256
    },
    {
      "type": "edit",
      "id": "b873df8d1b733e44",
      "item": {
        "type": "reference",
        "id": "b873df8d1b733e44",
        "site": "scrape.fed.wiki",
        "slug": "subsystem-diagrams",
        "title": "Subsystem Diagrams",
        "text": "We will draw component and interaction diagrams for subsystems and then compose these into larger diagrams as suits our needs in the moment."
      },
      "date": 1651650490721
    },
    {
      "item": {
        "type": "factory",
        "id": "e5e6f0dd82efaeec"
      },
      "id": "e5e6f0dd82efaeec",
      "type": "add",
      "after": "b873df8d1b733e44",
      "date": 1651651371492
    },
    {
      "type": "edit",
      "id": "e5e6f0dd82efaeec",
      "item": {
        "type": "reference",
        "id": "e5e6f0dd82efaeec",
        "site": "wiki.ralfbarkow.ch",
        "slug": "public-side-of-wiki",
        "title": "Public Side of Wiki",
        "text": "Wiki is by nature public. Wiki, you might think is all about sharing freely, and loving the limelight, praising the openess. But this is not so. Wiki has a private side."
      },
      "date": 1651651374975
    },
    {
      "item": {
        "type": "factory",
        "id": "c1f3fd9f204c0c57"
      },
      "id": "c1f3fd9f204c0c57",
      "type": "add",
      "after": "e5e6f0dd82efaeec",
      "date": 1651651410665
    },
    {
      "type": "edit",
      "id": "c1f3fd9f204c0c57",
      "item": {
        "type": "paragraph",
        "id": "c1f3fd9f204c0c57",
        "text": "[[Merge]]"
      },
      "date": 1651651417584
    },
    {
      "id": "c1f3fd9f204c0c57",
      "type": "move",
      "order": [
        "50fabbaa3fbf1ad5",
        "997ef2384df8386f",
        "ff880b594e5e48e0",
        "8020ab622eb814a1",
        "c1f3fd9f204c0c57",
        "ce3eaa53fdba959b",
        "b873df8d1b733e44",
        "e5e6f0dd82efaeec"
      ],
      "date": 1651651420109
    },
    {
      "type": "edit",
      "id": "c1f3fd9f204c0c57",
      "item": {
        "type": "paragraph",
        "id": "c1f3fd9f204c0c57",
        "text": "⇒ [[Merge]]:"
      },
      "date": 1651651435587
    },
    {
      "item": {
        "type": "factory",
        "id": "0da0b9c556b1e9a3"
      },
      "id": "0da0b9c556b1e9a3",
      "type": "add",
      "after": "e5e6f0dd82efaeec",
      "date": 1651651455482
    },
    {
      "type": "edit",
      "id": "0da0b9c556b1e9a3",
      "item": {
        "type": "reference",
        "id": "0da0b9c556b1e9a3",
        "site": "ddd.ward.wiki.org",
        "slug": "cautiously-merge",
        "title": "Cautiously Merge",
        "text": "We have developed techniques for adding new information sources without disrupting the work we have already done. In essence, we use queries of partially integrated data to understand how more useful relations can be established."
      },
      "date": 1651651458810
    },
    {
      "type": "edit",
      "id": "c1f3fd9f204c0c57",
      "item": {
        "type": "paragraph",
        "id": "c1f3fd9f204c0c57",
        "text": "⇒ [[Merge]]: ⇒ [Merge Logic]]"
      },
      "date": 1651651583375
    },
    {
      "type": "edit",
      "id": "c1f3fd9f204c0c57",
      "item": {
        "type": "paragraph",
        "id": "c1f3fd9f204c0c57",
        "text": "⇒ [[Merge]]: ⇒ [[Merge Logic]]"
      },
      "date": 1651651589523
    },
    {
      "item": {
        "type": "factory",
        "id": "a96c67f42317ff65"
      },
      "id": "a96c67f42317ff65",
      "type": "add",
      "after": "0da0b9c556b1e9a3",
      "date": 1651651804311
    },
    {
      "type": "edit",
      "id": "a96c67f42317ff65",
      "item": {
        "type": "reference",
        "id": "a96c67f42317ff65",
        "site": "ddd.ward.wiki.org",
        "slug": "merge-and-transform",
        "title": "Merge and Transform",
        "text": "We reconcile differences in terms as we merge information from extracted files and make connections between those elements where important relations exist."
      },
      "date": 1651651807610
    },
    {
      "item": {
        "type": "factory",
        "id": "22af7e5556d165a7"
      },
      "id": "22af7e5556d165a7",
      "type": "add",
      "after": "a96c67f42317ff65",
      "date": 1651651877265
    },
    {
      "type": "edit",
      "id": "22af7e5556d165a7",
      "item": {
        "type": "reference",
        "id": "22af7e5556d165a7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "crdt-implementation",
        "title": "CRDT Implementation",
        "text": "[[Yjs]] is a [(CRDT implementation](https://github.com/yjs/yjs#Yjs-CRDT-Algorithm) that exposes its internal data structure as shared types. Shared types are common data types like Map or Array with superpowers: changes are automatically distributed to other peers and merged without merge conflicts."
      },
      "date": 1651651880294
    },
    {
      "item": {
        "type": "factory",
        "id": "b95859617db6e58b"
      },
      "id": "b95859617db6e58b",
      "type": "add",
      "after": "22af7e5556d165a7",
      "date": 1651651950880
    },
    {
      "type": "edit",
      "id": "b95859617db6e58b",
      "item": {
        "type": "reference",
        "id": "b95859617db6e58b",
        "site": "garden.asia.wiki.org",
        "slug": "lineup-overview",
        "title": "Lineup Overview",
        "text": "Transport from here to see all Graph plugins in the lineup on one chart. Save it if you like it."
      },
      "date": 1651651953987
    },
    {
      "id": "24144bf816da4811",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "24144bf816da4811",
        "text": "Here we try to merge diagrams without a transporter."
      },
      "after": "b95859617db6e58b",
      "date": 1651651957005
    },
    {
      "type": "edit",
      "id": "24144bf816da4811",
      "item": {
        "type": "paragraph",
        "id": "24144bf816da4811",
        "text": "> Here we try to [[merge]] diagrams without a transporter."
      },
      "date": 1651651967908
    },
    {
      "type": "edit",
      "id": "24144bf816da4811",
      "item": {
        "type": "markdown",
        "id": "24144bf816da4811",
        "text": "> Here we try to [[merge]] diagrams without a transporter."
      },
      "date": 1651651969699
    },
    {
      "item": {
        "type": "factory",
        "id": "1db13c9effa36c6f"
      },
      "id": "1db13c9effa36c6f",
      "type": "add",
      "after": "24144bf816da4811",
      "date": 1651652078084
    },
    {
      "type": "edit",
      "id": "1db13c9effa36c6f",
      "item": {
        "type": "reference",
        "id": "1db13c9effa36c6f",
        "site": "context.asia.wiki.org",
        "slug": "tips-for-modeling",
        "title": "Tips for Modeling",
        "text": "We suggest an incremental approach where new sources are added to a daily build and explored with ad-hoc queries before choosing a more permanent representation as nodes and relations."
      },
      "date": 1651652083017
    },
    {
      "item": {
        "type": "factory",
        "id": "84cf18bcb6f6209c"
      },
      "id": "84cf18bcb6f6209c",
      "type": "add",
      "after": "1db13c9effa36c6f",
      "date": 1651652291792
    },
    {
      "type": "edit",
      "id": "84cf18bcb6f6209c",
      "item": {
        "type": "reference",
        "id": "84cf18bcb6f6209c",
        "site": "garden.asia.wiki.org",
        "slug": "lineup-viewer",
        "title": "Lineup Viewer",
        "text": "Here we merge graphs from the lineup into a single graph. Press find to merge, draw to open new page."
      },
      "date": 1651652295971
    },
    {
      "item": {
        "type": "factory",
        "id": "bec9b23cd44257af"
      },
      "id": "bec9b23cd44257af",
      "type": "add",
      "after": "84cf18bcb6f6209c",
      "date": 1651652462606
    },
    {
      "type": "edit",
      "id": "bec9b23cd44257af",
      "item": {
        "type": "reference",
        "id": "bec9b23cd44257af",
        "site": "marc.tries.fed.wiki",
        "slug": "import-link-from-arrows",
        "title": "Import Link from Arrows",
        "text": "We test export as URL feature as another mechanism to [[Import from Arrow]]."
      },
      "date": 1651652465652
    },
    {
      "item": {
        "type": "factory",
        "id": "5a9ac9adff84b21c"
      },
      "id": "5a9ac9adff84b21c",
      "type": "add",
      "after": "bec9b23cd44257af",
      "date": 1651652483789
    },
    {
      "type": "edit",
      "id": "5a9ac9adff84b21c",
      "item": {
        "type": "markdown",
        "id": "5a9ac9adff84b21c",
        "text": "> Create Graphviz and\nMerge Arrows Graphs"
      },
      "date": 1651652487674
    },
    {
      "type": "edit",
      "id": "5a9ac9adff84b21c",
      "item": {
        "type": "markdown",
        "id": "5a9ac9adff84b21c",
        "text": "> Create Graphviz and\n[[Merge]] Arrows Graphs"
      },
      "date": 1651652498025
    },
    {
      "item": {
        "type": "factory",
        "id": "c58f40b323d32f85"
      },
      "id": "c58f40b323d32f85",
      "type": "add",
      "after": "5a9ac9adff84b21c",
      "date": 1651652595732
    },
    {
      "type": "edit",
      "id": "c58f40b323d32f85",
      "item": {
        "type": "reference",
        "id": "c58f40b323d32f85",
        "site": "scripts.fed.wiki",
        "slug": "graph-source-diagram-script",
        "title": "Graph Source Diagram Script",
        "text": "The Graph plugin sources \"graph\" data as might other plugins eventually. This script merges this data to be drawn with Graphviz. [https://github.com/WardCunningham/assets/blob/master/pages/lineup-overview/diagram.html github]"
      },
      "date": 1651652599604
    },
    {
      "type": "edit",
      "id": "c58f40b323d32f85",
      "item": {
        "type": "reference",
        "id": "c58f40b323d32f85",
        "site": "scripts.fed.wiki",
        "slug": "graph-source-diagram-script",
        "title": "Graph Source Diagram Script",
        "text": "The Graph plugin sources \"graph\" data as might other plugins eventually. This script [[merge]]s this data to be drawn with Graphviz. [https://github.com/WardCunningham/assets/blob/master/pages/lineup-overview/diagram.html github]"
      },
      "date": 1651652610044
    },
    {
      "item": {
        "type": "factory",
        "id": "4dd6e33d99354bfe"
      },
      "id": "4dd6e33d99354bfe",
      "type": "add",
      "after": "c58f40b323d32f85",
      "date": 1651652945648
    },
    {
      "type": "edit",
      "id": "4dd6e33d99354bfe",
      "item": {
        "type": "reference",
        "id": "4dd6e33d99354bfe",
        "site": "sailing.marc.dojo.fed.wiki",
        "slug": "selected-graphs-merged",
        "title": "Selected Graphs Merged",
        "text": "Imported from Arrows: [https://arrows.app/#/import/json=eyJncmFwaCI6eyJzdHlsZSI6eyJmb250LWZhbWlseSI6InNhbnMtc2VyaWYiLCJiYWNrZ3JvdW5kLWNvbG9yIjoiI2ZmZmZmZiIsIm5vZGUtY29sb3IiOiIjZmZmZmZmIiwiYm9yZGVyLXdpZHRoIjo0LCJib3JkZXItY29sb3IiOiIjMDAwMDAwIiwicmFkaXVzIjo1MCwibm9kZS1wYWRkaW5nIjo1LCJub2RlLW1hcmdpbiI6Miwib3V0c2lkZS1wb3NpdGlvbiI6ImF1dG8iLCJub2RlLWljb24taW1hZ2UiOiIiLCJub2RlLWJhY2tncm91bmQtaW1hZ2UiOiIiLCJpY29uLXBvc2l0aW9uIjoiaW5zaWRlIiwiaWNvbi1zaXplIjo2NCwiY2FwdGlvbi1wb3NpdGlvbiI6Imluc2lkZSIsImNhcHRpb24tbWF4LXdpZHRoIjoyMDAsImNhcHRpb24tY29sb3IiOiIjMDAwMDAwIiwi"
      },
      "date": 1651652953230
    },
    {
      "type": "edit",
      "id": "4dd6e33d99354bfe",
      "item": {
        "type": "reference",
        "id": "4dd6e33d99354bfe",
        "site": "sailing.marc.dojo.fed.wiki",
        "slug": "selected-graphs-merged",
        "title": "Selected Graphs Merged",
        "text": "Imported from Arrows: […]"
      },
      "date": 1651652966618
    },
    {
      "item": {
        "type": "factory",
        "id": "393778ebdced1f66"
      },
      "id": "393778ebdced1f66",
      "type": "add",
      "after": "4dd6e33d99354bfe",
      "date": 1651653044719
    },
    {
      "type": "edit",
      "id": "393778ebdced1f66",
      "item": {
        "type": "reference",
        "id": "393778ebdced1f66",
        "site": "best.ward.bay.wiki.org",
        "slug": "inventory-of-workflow-steps",
        "title": "Inventory of Workflow Steps",
        "text": "We will adapt the ideas of pattern languages to what we call workflows. Each step makes something. We document those things and the flows among them into a knowledge graph."
      },
      "date": 1651653055035
    },
    {
      "item": {
        "type": "factory",
        "id": "85266fd35558ba3d"
      },
      "id": "85266fd35558ba3d",
      "type": "add",
      "after": "393778ebdced1f66",
      "date": 1651653365672
    },
    {
      "type": "edit",
      "id": "85266fd35558ba3d",
      "item": {
        "type": "reference",
        "id": "85266fd35558ba3d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "automerge",
        "title": "Automerge",
        "text": "[[Automerge]] is a library of data structures for building collaborative applications in JavaScript. [https://github.com/automerge/automerge github]"
      },
      "date": 1651653369785
    },
    {
      "item": {
        "type": "factory",
        "id": "f3da658ed4ba5ffe"
      },
      "id": "f3da658ed4ba5ffe",
      "type": "add",
      "after": "85266fd35558ba3d",
      "date": 1651653424754
    },
    {
      "type": "edit",
      "id": "f3da658ed4ba5ffe",
      "item": {
        "type": "reference",
        "id": "f3da658ed4ba5ffe",
        "site": "marc.tries.fed.wiki",
        "slug": "thinking-with-arrows-tool",
        "title": "Thinking with Arrows Tool",
        "text": "How does the Arrows Tool help us think together?"
      },
      "date": 1651653436235
    },
    {
      "item": {
        "type": "factory",
        "id": "1ac8f2aac010dbc2"
      },
      "id": "1ac8f2aac010dbc2",
      "type": "add",
      "after": "f3da658ed4ba5ffe",
      "date": 1651653453570
    },
    {
      "id": "8eb36f0b8f5f5587",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "8eb36f0b8f5f5587",
        "text": "# FedWiki users\n\n* Arrows SVG in FedWiki assigns an explanatory page to each node and each relationship.\n* Can explore causal loop diagrams\n* Combine perspectives using Ward's \"merge arrows\" tool\n* And more programming magic to come...\n"
      },
      "after": "f3da658ed4ba5ffe",
      "date": 1651653458243
    },
    {
      "type": "edit",
      "id": "8eb36f0b8f5f5587",
      "item": {
        "type": "markdown",
        "id": "8eb36f0b8f5f5587",
        "text": "\n* Combine perspectives using Ward's \"merge arrows\" tool"
      },
      "date": 1651653465548
    },
    {
      "type": "edit",
      "id": "8eb36f0b8f5f5587",
      "item": {
        "type": "markdown",
        "id": "8eb36f0b8f5f5587",
        "text": "> * Combine perspectives using Ward's \"merge arrows\" tool"
      },
      "date": 1651653469699
    },
    {
      "type": "edit",
      "id": "8eb36f0b8f5f5587",
      "item": {
        "type": "markdown",
        "id": "8eb36f0b8f5f5587",
        "text": "> * Combine perspectives using Ward's \"[[merge]] arrows\" tool"
      },
      "date": 1651653482099
    },
    {
      "type": "edit",
      "id": "1ac8f2aac010dbc2",
      "item": {
        "type": "reference",
        "id": "1ac8f2aac010dbc2",
        "site": "wiki.ralfbarkow.ch",
        "slug": "branchial-space",
        "title": "Branchial Space",
        "text": "[[Causal graphs]] provide one kind of summary of the [[evolution]] of a system, based on capturing the [[causal relationships]] between events. What we call branchial graphs provide another kind of summary, based on capturing relationships between states on different branches of a multiway system. And whereas causal graphs capture relationships between events at different steps in the evolution of a system, branchial graphs capture relationships between states on different branches at a given step. And in a sense they define a map for exploring branchial"
      },
      "date": 1651653549761
    },
    {
      "type": "edit",
      "id": "1ac8f2aac010dbc2",
      "item": {
        "type": "reference",
        "id": "1ac8f2aac010dbc2",
        "site": "wiki.ralfbarkow.ch",
        "slug": "branchial-space",
        "title": "Branchial Space",
        "text": "[[Causal graphs]] provide one kind of summary of the [[evolution]] of a system, based on capturing the [[causal relationships]] between events. "
      },
      "date": 1651653570144
    },
    {
      "item": {
        "type": "factory",
        "id": "8a89ae50b411e0b0"
      },
      "id": "8a89ae50b411e0b0",
      "type": "add",
      "after": "1ac8f2aac010dbc2",
      "date": 1651653592231
    },
    {
      "id": "01d70712cd8b38ca",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "01d70712cd8b38ca",
        "text": "One might perhaps have imagined that states on different branches of a [[multiway system]] would be completely independent. But when causal invariance is present they are definitely not—because for example whenever they split (to form a branch pair), they will always merge again. "
      },
      "after": "1ac8f2aac010dbc2",
      "date": 1651653594404
    },
    {
      "type": "remove",
      "id": "8a89ae50b411e0b0",
      "date": 1651653598870
    },
    {
      "type": "edit",
      "id": "01d70712cd8b38ca",
      "item": {
        "type": "paragraph",
        "id": "01d70712cd8b38ca",
        "text": "> One might perhaps have imagined that states on different branches of a [[multiway system]] would be completely independent. But when [[causal invariance]] is present they are definitely not—because for example whenever they split (to form a branch pair), they will always merge again. "
      },
      "date": 1651653616885
    },
    {
      "type": "edit",
      "id": "01d70712cd8b38ca",
      "item": {
        "type": "markdown",
        "id": "01d70712cd8b38ca",
        "text": "> One might perhaps have imagined that states on different branches of a [[multiway system]] would be completely independent. But when [[causal invariance]] is present they are definitely not—because for example whenever they split (to form a branch pair), they will always merge again. "
      },
      "date": 1651653621123
    },
    {
      "type": "edit",
      "id": "01d70712cd8b38ca",
      "item": {
        "type": "markdown",
        "id": "01d70712cd8b38ca",
        "text": "> One might perhaps have imagined that states on different branches of a [[multiway system]] would be completely independent. But when [[causal invariance]] is present they are definitely not—because for example whenever they split (to form a branch pair), they will always [[merge]] again. "
      },
      "date": 1651653638680
    },
    {
      "item": {
        "type": "factory",
        "id": "a55cee48faa29636"
      },
      "id": "a55cee48faa29636",
      "type": "add",
      "after": "01d70712cd8b38ca",
      "date": 1651653729445
    },
    {
      "type": "edit",
      "id": "a55cee48faa29636",
      "item": {
        "type": "reference",
        "id": "a55cee48faa29636",
        "site": "ward.dojo.fed.wiki",
        "slug": "composite-graph",
        "title": "Composite Graph",
        "text": "We have a simple interface for constructing graphs but these are restricted to only new nodes for now. Here we close loops by merging several smaller graphs that intersect at identical nodes. [https://github.com/WardCunningham/assets/blob/master/pages/mock-graph-data/composite.html github]"
      },
      "date": 1651653732871
    },
    {
      "item": {
        "type": "factory",
        "id": "b9d47f47f6db698b"
      },
      "id": "b9d47f47f6db698b",
      "type": "add",
      "after": "a55cee48faa29636",
      "date": 1651653757797
    },
    {
      "type": "edit",
      "id": "b9d47f47f6db698b",
      "item": {
        "type": "paragraph",
        "id": "b9d47f47f6db698b",
        "text": "`mock-graph-data/composite.html`"
      },
      "date": 1651653763561
    },
    {
      "type": "edit",
      "id": "b9d47f47f6db698b",
      "item": {
        "type": "paragraph",
        "id": "b9d47f47f6db698b",
        "text": "⇒ `mock-graph-data/composite.html`"
      },
      "date": 1651653771215
    },
    {
      "type": "edit",
      "id": "b9d47f47f6db698b",
      "item": {
        "type": "markdown",
        "id": "b9d47f47f6db698b",
        "text": "⇒ `mock-graph-data/composite.html`"
      },
      "date": 1651653772055
    },
    {
      "item": {
        "type": "factory",
        "id": "3e15a595b1a101fb"
      },
      "id": "3e15a595b1a101fb",
      "type": "add",
      "after": "b9d47f47f6db698b",
      "date": 1651653820265
    },
    {
      "type": "edit",
      "id": "3e15a595b1a101fb",
      "item": {
        "type": "code",
        "id": "3e15a595b1a101fb",
        "text": "  function merge(comp,incr,source) {\n\n    function mergeprops(into,from) {\n      const keys = Object.keys(into)\n        .concat(Object.keys(from))\n        .filter(uniq)\n      for (const key of keys) {\n        if (into[key]) {\n          if (from[key] && into[key] != from[key]) {\n            window.result.innerHTML +=\n              `<div style=\"font-size:small; padding:4px; background-color:#fee; border-radius:4px; border:1px solid #aaa;\">\n                conflict for \"${key}\" property<br>\n                choosing \"${into[key]}\" over \"${from[key]}\"</div>`\n          }\n        }\n        else {\n          if(from[key]) {\n            into[key] = from[key]\n          }\n        }\n      }\n    }\n"
      },
      "date": 1651653822553
    },
    {
      "item": {
        "type": "factory",
        "id": "5313fc944acc056f"
      },
      "id": "5313fc944acc056f",
      "type": "add",
      "after": "3e15a595b1a101fb",
      "date": 1651659373993
    },
    {
      "type": "edit",
      "id": "5313fc944acc056f",
      "item": {
        "type": "pagefold",
        "id": "5313fc944acc056f",
        "text": "~"
      },
      "date": 1651659379164
    },
    {
      "item": {
        "type": "factory",
        "id": "9fafee134019516a"
      },
      "id": "9fafee134019516a",
      "type": "add",
      "after": "5313fc944acc056f",
      "date": 1651659381969
    },
    {
      "type": "edit",
      "id": "9fafee134019516a",
      "item": {
        "type": "video",
        "id": "9fafee134019516a",
        "text": "YOUTUBE 9Kzn4zV55JM"
      },
      "date": 1651659402964
    },
    {
      "type": "edit",
      "id": "9fafee134019516a",
      "item": {
        "type": "video",
        "id": "9fafee134019516a",
        "text": "YOUTUBE 9Kzn4zV55JM\nThe Quantum Underpinning of Life - Prof. [[Johnjoe McFadden]] [Zoom seminar at Biozentrum, Basel]"
      },
      "date": 1651659447346
    },
    {
      "item": {
        "type": "factory",
        "id": "0f3d3952c635aac1"
      },
      "id": "0f3d3952c635aac1",
      "type": "add",
      "after": "9fafee134019516a",
      "date": 1651659664960
    },
    {
      "type": "edit",
      "id": "0f3d3952c635aac1",
      "item": {
        "type": "paragraph",
        "id": "0f3d3952c635aac1",
        "text": "https://youtubetranscript.com/?v=9Kzn4zV55JM&t=976"
      },
      "date": 1651659667439
    },
    {
      "type": "edit",
      "id": "0f3d3952c635aac1",
      "item": {
        "type": "markdown",
        "id": "0f3d3952c635aac1",
        "text": "https://youtubetranscript.com/?v=9Kzn4zV55JM&t=976"
      },
      "date": 1651659668553
    },
    {
      "type": "edit",
      "id": "0f3d3952c635aac1",
      "item": {
        "type": "markdown",
        "id": "0f3d3952c635aac1",
        "text": "https://youtubetranscript.com/?v=9Kzn4zV55JM&t=976\n"
      },
      "date": 1651659948074
    },
    {
      "type": "add",
      "id": "42dd50efa00d8bf3",
      "item": {
        "type": "markdown",
        "id": "42dd50efa00d8bf3",
        "text": "Is it likely that coherence is maintained in um living systems, and this shows that coherence is maintained in a pool when you drop a If you drop a pebble into a pool, you see mechanical features of that event and you can see interference waves, mechanical interference between two pebbles that fall into the pool."
      },
      "after": "0f3d3952c635aac1",
      "date": 1651659949035
    },
    {
      "type": "edit",
      "id": "42dd50efa00d8bf3",
      "item": {
        "type": "markdown",
        "id": "42dd50efa00d8bf3",
        "text": "> Is it likely that coherence is maintained in living systems, and this shows that coherence is maintained in a pool when you drop a If you drop a pebble into a pool, you see mechanical features of that event and you can see interference waves, mechanical interference between two pebbles that fall into the pool."
      },
      "date": 1651659959174
    },
    {
      "item": {
        "type": "factory",
        "id": "dd6234e943d9a1ad"
      },
      "id": "dd6234e943d9a1ad",
      "type": "add",
      "after": "42dd50efa00d8bf3",
      "date": 1651660688963
    },
    {
      "id": "dd6234e943d9a1ad",
      "type": "move",
      "order": [
        "50fabbaa3fbf1ad5",
        "997ef2384df8386f",
        "ff880b594e5e48e0",
        "8020ab622eb814a1",
        "c1f3fd9f204c0c57",
        "ce3eaa53fdba959b",
        "b873df8d1b733e44",
        "e5e6f0dd82efaeec",
        "0da0b9c556b1e9a3",
        "a96c67f42317ff65",
        "22af7e5556d165a7",
        "b95859617db6e58b",
        "24144bf816da4811",
        "1db13c9effa36c6f",
        "84cf18bcb6f6209c",
        "bec9b23cd44257af",
        "5a9ac9adff84b21c",
        "c58f40b323d32f85",
        "4dd6e33d99354bfe",
        "393778ebdced1f66",
        "85266fd35558ba3d",
        "f3da658ed4ba5ffe",
        "8eb36f0b8f5f5587",
        "1ac8f2aac010dbc2",
        "01d70712cd8b38ca",
        "a55cee48faa29636",
        "b9d47f47f6db698b",
        "3e15a595b1a101fb",
        "5313fc944acc056f",
        "dd6234e943d9a1ad",
        "9fafee134019516a",
        "0f3d3952c635aac1",
        "42dd50efa00d8bf3"
      ],
      "date": 1651660695814
    },
    {
      "type": "edit",
      "id": "dd6234e943d9a1ad",
      "item": {
        "type": "video",
        "id": "dd6234e943d9a1ad",
        "text": "YOUTUBE cdgZAJYsLcM"
      },
      "date": 1651660709294
    },
    {
      "type": "edit",
      "id": "dd6234e943d9a1ad",
      "item": {
        "type": "video",
        "id": "dd6234e943d9a1ad",
        "text": "YOUTUBE cdgZAJYsLcM\n#opendata #datasharing #biology\nFORGOTTEN DATA: the Leftovers of Science [Subs ENG/GER/FRA/ITA]"
      },
      "date": 1651660778251
    },
    {
      "item": {
        "type": "factory",
        "id": "50c296ddbc72cba6"
      },
      "id": "50c296ddbc72cba6",
      "type": "add",
      "after": "42dd50efa00d8bf3",
      "date": 1651660800239
    },
    {
      "type": "edit",
      "id": "50c296ddbc72cba6",
      "item": {
        "type": "paragraph",
        "id": "50c296ddbc72cba6",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=116"
      },
      "date": 1651660802648
    },
    {
      "id": "50c296ddbc72cba6",
      "type": "move",
      "order": [
        "50fabbaa3fbf1ad5",
        "997ef2384df8386f",
        "ff880b594e5e48e0",
        "8020ab622eb814a1",
        "c1f3fd9f204c0c57",
        "ce3eaa53fdba959b",
        "b873df8d1b733e44",
        "e5e6f0dd82efaeec",
        "0da0b9c556b1e9a3",
        "a96c67f42317ff65",
        "22af7e5556d165a7",
        "b95859617db6e58b",
        "24144bf816da4811",
        "1db13c9effa36c6f",
        "84cf18bcb6f6209c",
        "bec9b23cd44257af",
        "5a9ac9adff84b21c",
        "c58f40b323d32f85",
        "4dd6e33d99354bfe",
        "393778ebdced1f66",
        "85266fd35558ba3d",
        "f3da658ed4ba5ffe",
        "8eb36f0b8f5f5587",
        "1ac8f2aac010dbc2",
        "01d70712cd8b38ca",
        "a55cee48faa29636",
        "b9d47f47f6db698b",
        "3e15a595b1a101fb",
        "5313fc944acc056f",
        "dd6234e943d9a1ad",
        "50c296ddbc72cba6",
        "9fafee134019516a",
        "0f3d3952c635aac1",
        "42dd50efa00d8bf3"
      ],
      "date": 1651660807258
    },
    {
      "type": "edit",
      "id": "50c296ddbc72cba6",
      "item": {
        "type": "markdown",
        "id": "50c296ddbc72cba6",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=116"
      },
      "date": 1651660808597
    },
    {
      "type": "edit",
      "id": "50c296ddbc72cba6",
      "item": {
        "type": "markdown",
        "id": "50c296ddbc72cba6",
        "text": "Michael Podvinec\n"
      },
      "date": 1651660864569
    },
    {
      "type": "add",
      "id": "d456ae488bf9dff3",
      "item": {
        "type": "markdown",
        "id": "d456ae488bf9dff3",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=116"
      },
      "after": "50c296ddbc72cba6",
      "date": 1651660866123
    },
    {
      "type": "edit",
      "id": "50c296ddbc72cba6",
      "item": {
        "type": "markdown",
        "id": "50c296ddbc72cba6",
        "text": "[[Michael Podvinec]]\n"
      },
      "date": 1651660873882
    },
    {
      "type": "edit",
      "id": "50c296ddbc72cba6",
      "item": {
        "type": "markdown",
        "id": "50c296ddbc72cba6",
        "text": "[[Simone Pengue]] and [[Michael Podvinec]]\n"
      },
      "date": 1651660898703
    },
    {
      "type": "edit",
      "id": "d456ae488bf9dff3",
      "item": {
        "type": "markdown",
        "id": "d456ae488bf9dff3",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=116\n"
      },
      "date": 1651660974309
    },
    {
      "type": "add",
      "id": "a1333b15b129c63a",
      "item": {
        "type": "markdown",
        "id": "a1333b15b129c63a",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=530"
      },
      "after": "d456ae488bf9dff3",
      "date": 1651660975488
    },
    {
      "type": "edit",
      "id": "a1333b15b129c63a",
      "item": {
        "type": "markdown",
        "id": "a1333b15b129c63a",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=530\n> A better way to do it and, sort of, the way that we now consider the best way is to use public repositories for data. They are forever, they have permanent identifiers but they are also domain specific. And in fact in biology we have like the Protein Data Bank. This was founded in 1971. In its first release it contained, so this is a database for the structure of proteins and in its first release it contained just eight proteins. By now it’s the de facto standard for the exchange of protein structural data and it’s sort of *the* place where you put a structure, so if you can if you have this kind of repositories available to you that are clearly domain specific and sort of the thing that is internationally used by everybody that’s kind of the best place to put this information because everybody knows where to pick it up afterwards.\n"
      },
      "date": 1651661119586
    },
    {
      "item": {
        "type": "factory",
        "id": "f83a7986da0e54fd"
      },
      "id": "f83a7986da0e54fd",
      "type": "add",
      "after": "42dd50efa00d8bf3",
      "date": 1651661123420
    },
    {
      "type": "edit",
      "id": "f83a7986da0e54fd",
      "item": {
        "type": "pagefold",
        "id": "f83a7986da0e54fd",
        "text": "~"
      },
      "date": 1651661127030
    },
    {
      "id": "f83a7986da0e54fd",
      "type": "move",
      "order": [
        "50fabbaa3fbf1ad5",
        "997ef2384df8386f",
        "ff880b594e5e48e0",
        "8020ab622eb814a1",
        "c1f3fd9f204c0c57",
        "ce3eaa53fdba959b",
        "b873df8d1b733e44",
        "e5e6f0dd82efaeec",
        "0da0b9c556b1e9a3",
        "a96c67f42317ff65",
        "22af7e5556d165a7",
        "b95859617db6e58b",
        "24144bf816da4811",
        "1db13c9effa36c6f",
        "84cf18bcb6f6209c",
        "bec9b23cd44257af",
        "5a9ac9adff84b21c",
        "c58f40b323d32f85",
        "4dd6e33d99354bfe",
        "393778ebdced1f66",
        "85266fd35558ba3d",
        "f3da658ed4ba5ffe",
        "8eb36f0b8f5f5587",
        "1ac8f2aac010dbc2",
        "01d70712cd8b38ca",
        "a55cee48faa29636",
        "b9d47f47f6db698b",
        "3e15a595b1a101fb",
        "5313fc944acc056f",
        "dd6234e943d9a1ad",
        "50c296ddbc72cba6",
        "d456ae488bf9dff3",
        "a1333b15b129c63a",
        "f83a7986da0e54fd",
        "9fafee134019516a",
        "0f3d3952c635aac1",
        "42dd50efa00d8bf3"
      ],
      "date": 1651661132462
    },
    {
      "type": "edit",
      "id": "a1333b15b129c63a",
      "item": {
        "type": "markdown",
        "id": "a1333b15b129c63a",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=530\n> A better way to do it and, sort of, the way that we now consider the best way is to use public repositories for data. They are forever, they have permanent identifiers but they are also domain specific. And in fact in biology we have like the [[Protein Data Bank]]. This was founded in 1971. In its first release it contained, so this is a database for the structure of proteins and in its first release it contained just eight proteins. By now it’s the de facto standard for the exchange of protein structural data and it’s sort of *the* place where you put a structure, so if you can if you have this kind of repositories available to you that are clearly domain specific and sort of the thing that is internationally used by everybody that’s kind of the best place to put this information because everybody knows where to pick it up afterwards.\n"
      },
      "date": 1651661237446
    },
    {
      "type": "edit",
      "id": "a1333b15b129c63a",
      "item": {
        "type": "markdown",
        "id": "a1333b15b129c63a",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=530\n> A better way to do it and, sort of, the way that we now consider the best way is to use public repositories for data. They are forever, they have permanent identifiers but they are also domain specific. And in fact in biology we have like the [[Protein Data Bank]]. This was founded in 1971. In its first release it contained, so this is a database for the structure of proteins and in its first release it contained just eight proteins. By now it’s the de facto standard for the exchange of protein structural data and it’s sort of *the* place where you put a structure, so if you can if you have this kind of repositories available to you that are clearly domain specific and sort of the thing that is internationally used by everybody that’s kind of the best place to put this information because everybody knows where to pick it up afterwards.\n\n"
      },
      "date": 1651661425409
    },
    {
      "type": "add",
      "id": "b77bc700107ce44d",
      "item": {
        "type": "markdown",
        "id": "b77bc700107ce44d",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=589"
      },
      "after": "a1333b15b129c63a",
      "date": 1651661426645
    },
    {
      "type": "edit",
      "id": "b77bc700107ce44d",
      "item": {
        "type": "markdown",
        "id": "b77bc700107ce44d",
        "text": "https://youtubetranscript.com/?v=cdgZAJYsLcM&t=589\n"
      },
      "date": 1651661509495
    },
    {
      "type": "add",
      "id": "845f7c6340baa885",
      "item": {
        "type": "markdown",
        "id": "845f7c6340baa885",
        "text": "The scientific community has already had to face the issue of data sharing\n\nand in 2016 they published a series of guidelines - which go under the name of ‘FAIR data’.\n\nI’ve heard of this FAIR data, could you please explain us what they are?\nFAIR has a little bit a different approach, in not so much focussing on\nopenness and free availability, let’s say,\nbut rather focussing on, if data is available, it should be made available in a way\n\nthat it can actually be capitalised on.\nSo FAIR, the acronym, F is for findable,\nso there’s no use that there’s a data set out there, but I don’t know how to find it.\n\nAnd ‘findable’’ also brings up the important topic of metadata.\nIf I don’t know what’s in the data, just knowing there’s a dataset is of little value.\nThe A in FAIR is ‘accessible’ that if there is this dataset, I need to know\nhow I can get it, where I can get it\nI stands for ‘interoperable’. This is maybe the biggest contrast to the open data movement,\n\nin that this is now a very strong focus saying basically\ndata should be readable by humans and by machines\n\nSo, use common formats, document the formats\n\nAnd then R, in FAIR stands for ‘reusable’.\nProvide the data in a format, with the proper annotation, with the proper metadata\nyou see I’m saying metadata a lot. But that’s really what is key here.\nFrom personal experience we once received, in a project we received\ntwo USB drives with data that were measured at another group.\nThis was, sort of, kind of discarded data, really.\nThey had tried to do something else, but they had this data lying around we wanted to do something with it.\nAnd it was pretty hard to convince them to actually go the extra effort provide us with the data\nand then at some point we had these two USB drives and they were full with folders\n\nthat were called with numbers: 127, 509 -- In the\nfolders were files that had similar non-clear file names,\n\nthat probably made sense to somebody who had sort of the master list\nbut it made no sense to us. So in the end we had two hard disks that were full of data\nbut we couldn’t do anything with it."
      },
      "after": "b77bc700107ce44d",
      "date": 1651661510294
    },
    {
      "type": "edit",
      "id": "845f7c6340baa885",
      "item": {
        "type": "markdown",
        "id": "845f7c6340baa885",
        "text": "The scientific community has already had to face the issue of data sharing\n\nand in 2016 they published a series of guidelines - which go under the name of ‘[[FAIR data]]’.\n\nI’ve heard of this FAIR data, could you please explain us what they are?\nFAIR has a little bit a different approach, in not so much focussing on\nopenness and free availability, let’s say,\nbut rather focussing on, if data is available, it should be made available in a way\n\nthat it can actually be capitalised on.\nSo FAIR, the acronym, F is for findable,\nso there’s no use that there’s a data set out there, but I don’t know how to find it.\n\nAnd ‘findable’’ also brings up the important topic of metadata.\nIf I don’t know what’s in the data, just knowing there’s a dataset is of little value.\nThe A in FAIR is ‘accessible’ that if there is this dataset, I need to know\nhow I can get it, where I can get it\nI stands for ‘interoperable’. This is maybe the biggest contrast to the open data movement,\n\nin that this is now a very strong focus saying basically\ndata should be readable by humans and by machines\n\nSo, use common formats, document the formats\n\nAnd then R, in FAIR stands for ‘reusable’.\nProvide the data in a format, with the proper annotation, with the proper metadata\nyou see I’m saying metadata a lot. But that’s really what is key here.\nFrom personal experience we once received, in a project we received\ntwo USB drives with data that were measured at another group.\nThis was, sort of, kind of discarded data, really.\nThey had tried to do something else, but they had this data lying around we wanted to do something with it.\nAnd it was pretty hard to convince them to actually go the extra effort provide us with the data\nand then at some point we had these two USB drives and they were full with folders\n\nthat were called with numbers: 127, 509 -- In the\nfolders were files that had similar non-clear file names,\n\nthat probably made sense to somebody who had sort of the master list\nbut it made no sense to us. So in the end we had two hard disks that were full of data\nbut we couldn’t do anything with it."
      },
      "date": 1651661690364
    },
    {
      "type": "edit",
      "id": "845f7c6340baa885",
      "item": {
        "type": "markdown",
        "id": "845f7c6340baa885",
        "text": "The scientific community has already had to face the issue of data sharing\n\nand in 2016 they published a series of guidelines - which go under the name of ‘[[FAIR data]]’.\n\nI’ve heard of this FAIR data, could you please explain us what they are?\nFAIR has a little bit a different approach, in not so much focussing on\nopenness and free availability, let’s say,\nbut rather focussing on, if data is available, it should be made available in a way\n\nthat it can actually be capitalised on.\nSo FAIR, the acronym, F is for findable,\nso there’s no use that there’s a data set out there, but I don’t know how to find it.\n\nAnd ‘findable’’ also brings up the important topic of metadata.\nIf I don’t know what’s in the data, just knowing there’s a dataset is of little value.\nThe A in FAIR is ‘accessible’ that if there is this dataset, I need to know\nhow I can get it, where I can get it\nI stands for ‘interoperable’. This is maybe the biggest contrast to the open data movement,\n\nin that this is now a very strong focus saying basically\ndata should be readable by humans and by machines\n\nSo, use common formats, document the formats\n\nAnd then R, in FAIR stands for ‘reusable’.\nProvide the data in a format, with the proper annotation, with the proper metadata\nyou see I’m saying metadata a lot. But that’s really what is key here.\nFrom personal experience we once received, in a project we received\ntwo USB drives with data that were measured at another group.\nThis was, sort of, kind of discarded data, really.\nThey had tried to do something else, but they had this data lying around we wanted to do something with it.\nAnd it was pretty hard to convince them to actually go the extra effort provide us with the data\nand then at some point we had these two USB drives and they were full with folders\n\nthat were called with numbers: 127, 509 -- In the\nfolders were files that had similar non-clear file names,\n\nthat probably made sense to somebody who had sort of the master list\nbut it made no sense to us. So in the end we had two hard disks that were full of data\nbut we couldn’t do anything with it.\n"
      },
      "date": 1651662130604
    },
    {
      "type": "add",
      "id": "2b30a2a4e3f642e2",
      "item": {
        "type": "markdown",
        "id": "2b30a2a4e3f642e2",
        "text": "[…] Dr [[Mariagrazia Giuffreda]] "
      },
      "after": "845f7c6340baa885",
      "date": 1651662144829
    },
    {
      "type": "edit",
      "id": "2b30a2a4e3f642e2",
      "item": {
        "type": "markdown",
        "id": "2b30a2a4e3f642e2",
        "text": "[…] Dr [[Mariagrazia Giuffreda]] [https://youtubetranscript.com/?v=cdgZAJYsLcM&t=871 youtubetranscript]"
      },
      "date": 1651662166921
    },
    {
      "type": "edit",
      "id": "2b30a2a4e3f642e2",
      "item": {
        "type": "markdown",
        "id": "2b30a2a4e3f642e2",
        "text": "[…] Dr [[Mariagrazia Giuffreda]], [https://youtubetranscript.com/?v=cdgZAJYsLcM&t=871 youtubetranscript]"
      },
      "date": 1651662172411
    },
    {
      "item": {
        "type": "factory",
        "id": "b8a9ef0df5147fa7"
      },
      "id": "b8a9ef0df5147fa7",
      "type": "add",
      "after": "42dd50efa00d8bf3",
      "date": 1651668751920
    },
    {
      "type": "edit",
      "id": "b8a9ef0df5147fa7",
      "item": {
        "type": "pagefold",
        "id": "b8a9ef0df5147fa7",
        "text": "~"
      },
      "date": 1651668756354
    },
    {
      "item": {
        "type": "factory",
        "id": "8a91892ec3cc422e"
      },
      "id": "8a91892ec3cc422e",
      "type": "add",
      "after": "b8a9ef0df5147fa7",
      "date": 1651668757997
    },
    {
      "type": "edit",
      "id": "8a91892ec3cc422e",
      "item": {
        "type": "paragraph",
        "id": "8a91892ec3cc422e",
        "text": "better SVG handling"
      },
      "date": 1651668761592
    },
    {
      "type": "edit",
      "id": "8a91892ec3cc422e",
      "item": {
        "type": "paragraph",
        "id": "8a91892ec3cc422e",
        "text": "[[Wiki Client]]: better SVG handling"
      },
      "date": 1651668792362
    },
    {
      "type": "edit",
      "id": "8a91892ec3cc422e",
      "item": {
        "type": "paragraph",
        "id": "8a91892ec3cc422e",
        "text": "[[Wiki Client]]: better SVG handling [ commit]"
      },
      "date": 1651668853503
    },
    {
      "type": "edit",
      "id": "8a91892ec3cc422e",
      "item": {
        "type": "paragraph",
        "id": "8a91892ec3cc422e",
        "text": "[[Wiki Client]]: better SVG handling [https://github.com/fedwiki/wiki-client/commit/03b2c854cce108e99d157cb0a656ab0ef4d5fb1a commit]"
      },
      "date": 1651668870734
    },
    {
      "type": "edit",
      "id": "8a91892ec3cc422e",
      "item": {
        "type": "paragraph",
        "id": "8a91892ec3cc422e",
        "text": "[[Wiki Client]]: better SVG handling. [https://github.com/fedwiki/wiki-client/commit/03b2c854cce108e99d157cb0a656ab0ef4d5fb1a commit]"
      },
      "date": 1651668875037
    },
    {
      "item": {
        "type": "factory",
        "id": "5f01966e58e7c637"
      },
      "id": "5f01966e58e7c637",
      "type": "add",
      "after": "8a91892ec3cc422e",
      "date": 1651668886811
    },
    {
      "type": "edit",
      "id": "5f01966e58e7c637",
      "item": {
        "type": "markdown",
        "id": "5f01966e58e7c637",
        "text": "> dropping an SVG file, or URL, will create an html item with the SVG"
      },
      "date": 1651668890622
    },
    {
      "item": {
        "type": "factory",
        "id": "ca2bf21d61cfe55e"
      },
      "id": "ca2bf21d61cfe55e",
      "type": "add",
      "after": "5f01966e58e7c637",
      "date": 1651669061781
    },
    {
      "type": "edit",
      "id": "ca2bf21d61cfe55e",
      "item": {
        "type": "paragraph",
        "id": "ca2bf21d61cfe55e",
        "text": "using pure promises syntax:"
      },
      "date": 1651669065682
    },
    {
      "type": "edit",
      "id": "ca2bf21d61cfe55e",
      "item": {
        "type": "paragraph",
        "id": "ca2bf21d61cfe55e",
        "text": "using pure promises syntax: [https://javascript.info/fetch page]"
      },
      "date": 1651669082192
    },
    {
      "item": {
        "type": "factory",
        "id": "4eda9c44568d3607"
      },
      "id": "4eda9c44568d3607",
      "type": "add",
      "after": "ca2bf21d61cfe55e",
      "date": 1651669098760
    },
    {
      "type": "edit",
      "id": "4eda9c44568d3607",
      "item": {
        "type": "paragraph",
        "id": "4eda9c44568d3607",
        "text": "With modern functions, we attach our callbacks to the returned promises instead, forming a promise chain:"
      },
      "date": 1651669102446
    },
    {
      "type": "edit",
      "id": "4eda9c44568d3607",
      "item": {
        "type": "paragraph",
        "id": "4eda9c44568d3607",
        "text": "With modern functions, we attach our callbacks to the returned promises instead, forming a promise chain: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises page]"
      },
      "date": 1651669111699
    },
    {
      "item": {
        "type": "factory",
        "id": "a2f6d9996823d443"
      },
      "id": "a2f6d9996823d443",
      "type": "add",
      "after": "4eda9c44568d3607",
      "date": 1651669120668
    },
    {
      "type": "edit",
      "id": "a2f6d9996823d443",
      "item": {
        "type": "code",
        "id": "a2f6d9996823d443",
        "text": "doSomething()\n.then(function(result) {\n  return doSomethingElse(result);\n})\n.then(function(newResult) {\n  return doThirdThing(newResult);\n})\n.then(function(finalResult) {\n  console.log('Got the final result: ' + finalResult);\n})\n.catch(failureCallback);\n"
      },
      "date": 1651669123033
    },
    {
      "item": {
        "type": "factory",
        "id": "8dff93fa921f008d"
      },
      "id": "8dff93fa921f008d",
      "type": "add",
      "after": "a2f6d9996823d443",
      "date": 1651669147064
    },
    {
      "type": "edit",
      "id": "8dff93fa921f008d",
      "item": {
        "type": "code",
        "id": "8dff93fa921f008d",
        "text": "  addRemoteSvg = (url) ->\n    document.documentElement.style.cursor = 'wait'\n    fetch(url)\n    .then (response) ->\n      if response.ok\n        return response\n      throw new Error('Unable to fetch svg')\n    .then (response) ->\n      return response.text()\n    .then (svgText) ->\n      document.documentElement.style.cursor = 'default'\n      item.type = 'html'\n      item.source = url\n      item.text = svgText + \"<p>[#{url} Source]</p>\"\n      syncEditAction()"
      },
      "date": 1651669149340
    },
    {
      "item": {
        "type": "factory",
        "id": "1a48aaab2c119054"
      },
      "id": "1a48aaab2c119054",
      "type": "add",
      "after": "8dff93fa921f008d",
      "date": 1651669204396
    },
    {
      "type": "edit",
      "id": "1a48aaab2c119054",
      "item": {
        "type": "paragraph",
        "id": "1a48aaab2c119054",
        "text": "\nlib/factory.coffee"
      },
      "date": 1651669208135
    },
    {
      "id": "1a48aaab2c119054",
      "type": "move",
      "order": [
        "50fabbaa3fbf1ad5",
        "997ef2384df8386f",
        "ff880b594e5e48e0",
        "8020ab622eb814a1",
        "c1f3fd9f204c0c57",
        "ce3eaa53fdba959b",
        "b873df8d1b733e44",
        "e5e6f0dd82efaeec",
        "0da0b9c556b1e9a3",
        "a96c67f42317ff65",
        "22af7e5556d165a7",
        "b95859617db6e58b",
        "24144bf816da4811",
        "1db13c9effa36c6f",
        "84cf18bcb6f6209c",
        "bec9b23cd44257af",
        "5a9ac9adff84b21c",
        "c58f40b323d32f85",
        "4dd6e33d99354bfe",
        "393778ebdced1f66",
        "85266fd35558ba3d",
        "f3da658ed4ba5ffe",
        "8eb36f0b8f5f5587",
        "1ac8f2aac010dbc2",
        "01d70712cd8b38ca",
        "a55cee48faa29636",
        "b9d47f47f6db698b",
        "3e15a595b1a101fb",
        "5313fc944acc056f",
        "dd6234e943d9a1ad",
        "50c296ddbc72cba6",
        "d456ae488bf9dff3",
        "a1333b15b129c63a",
        "b77bc700107ce44d",
        "845f7c6340baa885",
        "2b30a2a4e3f642e2",
        "f83a7986da0e54fd",
        "9fafee134019516a",
        "0f3d3952c635aac1",
        "42dd50efa00d8bf3",
        "b8a9ef0df5147fa7",
        "8a91892ec3cc422e",
        "5f01966e58e7c637",
        "ca2bf21d61cfe55e",
        "4eda9c44568d3607",
        "a2f6d9996823d443",
        "1a48aaab2c119054",
        "8dff93fa921f008d"
      ],
      "date": 1651669211883
    },
    {
      "type": "edit",
      "id": "1a48aaab2c119054",
      "item": {
        "type": "paragraph",
        "id": "1a48aaab2c119054",
        "text": "`lib/factory.coffee`"
      },
      "date": 1651669221850
    },
    {
      "type": "edit",
      "id": "1a48aaab2c119054",
      "item": {
        "type": "markdown",
        "id": "1a48aaab2c119054",
        "text": "`lib/factory.coffee`"
      },
      "date": 1651669223797
    }
  ]
}