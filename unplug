{
  "title": "unplug",
  "story": [
    {
      "type": "paragraph",
      "id": "1cb4c7ba3ec7b70a",
      "text": "WHILE A PROGRAM EXPRESSES intent, it is the [[Computer]], the hardware, that brings that intent to life. In order to have full control over your program's expression you must control the computer that runs it."
    },
    {
      "type": "markdown",
      "id": "fd795f7bd951ff6f",
      "text": "**[[Therefore]]**, write your program for a computer with a plug. Should you be dissatisfied with the behavior of the computer, unplug it."
    },
    {
      "type": "pagefold",
      "id": "385536355b016dee",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "fda48599e5ed5aec",
      "text": "[[Ward Cunningham]], Afterword in \nBECK, Kent, 1999. [[Kent Beck’s guide to better Smalltalk]]. Cambridge, U.K. ; New York: Cambridge University Press. SIGS reference library series, 14. ISBN 978-0-521-64437-2.\n"
    },
    {
      "type": "paragraph",
      "id": "dffb645d2b25e957",
      "text": "I'm working from memory here. This idea, the idea that you could unplug a computer, is an idea that has run in and out of our culture for about as long as there have been computers. I've expressed the idea as a [[Pattern]]: a [[Problem]] and its [[Solution]]. I'm thinking about this pattern because it reminds me of programming with Kent."
    },
    {
      "type": "paragraph",
      "id": "7e8e02d8b1172f84",
      "text": "I haven't got the words to this pattern quite right. It gives the impression that I fear computers run amuck. Does anybody remember that old film, The Forbin Project, where the U.S. defense computer gets to talking to the Soviet defense computer and they get the idea that they can run the world better than us? Well, that's not the problem. I first wrote the \"don't program a computer you can't unplug\" pattern because Kent and I needed a pattern at a large scale. We were looking for big advice for a new kind of developer. We imagined ordinary people taking their computing needs into their own hands. These people would use powerful languages to express themselves. But they would also need clear advice about using them. The \"unplug\" pattern says, Before you start writing a program, get a computer that you can control for your own purposes. It says, don't settle for a computer in a glass room. Don't borrow time. Get your own computer. Make it yours."
    },
    {
      "type": "paragraph",
      "id": "d07ceb74ca04fa20",
      "text": "There is a lot of history to this pattern. Kent and I shared a vision of computing. We worked in a lab that used the sandbox approach to research. You know, give all the researchers the kind of computer that will be the norm in a decade and see what happens. We had dual-processor workstations with huge screens and graphics accelerators on every desk. And what happened?"
    },
    {
      "type": "paragraph",
      "id": "4be00bf09d107d2b",
      "text": "Not too much. For some reason most people thought they needed permission to write programs. Not us. We made those machines our own."
    },
    {
      "type": "paragraph",
      "id": "d8d14f4af76432cc",
      "text": "We wrote programs together for a year and a half. We'd make up a problem over coffee on Monday, have a prototype struggling by Tuesday, and be dragging people into the office to see results by Friday. Yes, it was like that, except when it wasn't. Sometimes we'd get stuck. By Tuesday we would be over our heads and out of ideas. We had a program going nowhere. So we pulled the plug."
    },
    {
      "type": "paragraph",
      "id": "af81ef2345e81980",
      "text": "Kent and I could walk away from an undone program. We could because we were writing those programs for ourselves. We had no further use for them when they stopped giving back. Put another way, we expected the mere act of authoring to reward us, as it often did Then we found patterns. We both had [[Christopher Alexander]] on our bookshelves. We had noticed that our flip attitude about development was working, producing programs that were used, even reused. Alexander got us thinking that we could can what we were doing and share it too."
    },
    {
      "type": "paragraph",
      "id": "45f7d1503509bc9d",
      "text": "I remember Alexander's [[Emphasis on Piecemeal Growth]]. It was fundamental to all of his work, and to ours as well. Alexander's vision went beyond our vision, though, in one important way. He recognized the incredible range of forces that bear on one's work. He knew that to make a house one must also know how to make a city, and a brick. Then he showed us how to link that know-how together, top to bottom. Awesome."
    },
    {
      "type": "paragraph",
      "id": "df31065066d20aa9",
      "text": "So that is how I came to be talking about computer plugs. We learned from Alexander that our advice had to be concrete. Who ever learned anything from advice like, \"Make your program friendly\"? We had recently had better luck with more concrete advice like, Have one pop-up menu, containing verbs, for each pane. …"
    },
    {
      "type": "paragraph",
      "id": "105cf818f362f75f",
      "text": "The \"unplug\" pattern wasn't about plugs at all. It was about [[Ownership]] and [[Control]]. It said, \"Take control of the environment in which you write programs.\" The point of plugs was just the test, something concrete that would lead you in the right direction without overly constraining what you do."
    },
    {
      "type": "paragraph",
      "id": "a291f01737120a47",
      "text": "It's a good pattern, but not complete. The pattern really only works when surrounded with other patterns that actually give you the ownership and control you'll need. Kent and I fell into that. We didn't make it for ourselves. But we recognized we had it, and used it."
    },
    {
      "type": "paragraph",
      "id": "f0f82152744b35e4",
      "text": "The pattern is anything but obsolete today. You're probably thinking that 99.9 percent of all software written is written on computers that unplug. But can you unplug them? I was thinking about workstations when I first articulated the pattern a decade ago. We thought they would be the locus of power. But it's turned out servers hold the power now. Can you unplug yours? Can you even get it on the phone?"
    },
    {
      "type": "paragraph",
      "id": "55cb7ad666d69a39",
      "text": "I maintain an Internet presence that I set up with the help of a particularly enlightened provider. I have a server on my premises with a plug that I own. Although the bandwidth of my connection is modest, it is continuous. I've found the character of the whole configuration to be categorically better than simpler arrangements. On my machine I run programs that are unwelcome elsewhere: programs that open their own connections, or just run without stopping. I don't have to ask permission."
    },
    {
      "type": "paragraph",
      "id": "6217338c09a4071e",
      "text": "We are just consumers to the huge corporations of the computer and telecommunications industry. They want to sell to us alright, but they won't sell us everything we need; that is, they won't make us powerful... unless we insist. Pay attention to the pattern. If we computer users are to have and hold the kind of ownership Kent and I have known, we are going to have to watch those plugs."
    },
    {
      "type": "paragraph",
      "id": "d5f9d32845eb24ad",
      "text": "— [[Ward Cunningham]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "unplug",
        "story": []
      },
      "date": 1707973889307
    },
    {
      "item": {
        "type": "factory",
        "id": "1cb4c7ba3ec7b70a"
      },
      "id": "1cb4c7ba3ec7b70a",
      "type": "add",
      "date": 1707973890466
    },
    {
      "type": "edit",
      "id": "1cb4c7ba3ec7b70a",
      "item": {
        "type": "paragraph",
        "id": "1cb4c7ba3ec7b70a",
        "text": "WHILE A PROGRAM EXPRESSES intent, it is the computer, the hardware, that brings that intent to life. In order to have full control over your program's expression you must control the computer that runs it. Therefore, write your program for a computer with a plug. Should you be dissatisfied with the behavior of the computer, unplug it."
      },
      "date": 1707973899096
    },
    {
      "item": {
        "type": "factory",
        "id": "385536355b016dee"
      },
      "id": "385536355b016dee",
      "type": "add",
      "after": "1cb4c7ba3ec7b70a",
      "date": 1707973934037
    },
    {
      "type": "edit",
      "id": "385536355b016dee",
      "item": {
        "type": "pagefold",
        "id": "385536355b016dee",
        "text": "~"
      },
      "date": 1707973939418
    },
    {
      "item": {
        "type": "factory",
        "id": "fda48599e5ed5aec"
      },
      "id": "fda48599e5ed5aec",
      "type": "add",
      "after": "385536355b016dee",
      "date": 1707973940875
    },
    {
      "type": "edit",
      "id": "fda48599e5ed5aec",
      "item": {
        "type": "paragraph",
        "id": "fda48599e5ed5aec",
        "text": "Ward, AFTERWORD in "
      },
      "date": 1707973946316
    },
    {
      "type": "edit",
      "id": "fda48599e5ed5aec",
      "item": {
        "type": "paragraph",
        "id": "fda48599e5ed5aec",
        "text": "Ward, AFTERWORD in \nBECK, Kent, 1999. Kent Beck’s guide to better Smalltalk. Cambridge, U.K. ; New York: Cambridge University Press. SIGS reference library series, 14. ISBN 978-0-521-64437-2. \nQA76.73.S59 B425 1999\n"
      },
      "date": 1707973962776
    },
    {
      "type": "edit",
      "id": "fda48599e5ed5aec",
      "item": {
        "type": "paragraph",
        "id": "fda48599e5ed5aec",
        "text": "Ward, AFTERWORD in \nBECK, Kent, 1999. Kent Beck’s guide to better Smalltalk. Cambridge, U.K. ; New York: Cambridge University Press. SIGS reference library series, 14. ISBN 978-0-521-64437-2.\n"
      },
      "date": 1707973978983
    },
    {
      "type": "edit",
      "id": "fda48599e5ed5aec",
      "item": {
        "type": "paragraph",
        "id": "fda48599e5ed5aec",
        "text": "WARD CUNNINGHAM, AFTERWORD in \nBECK, Kent, 1999. Kent Beck’s guide to better Smalltalk. Cambridge, U.K. ; New York: Cambridge University Press. SIGS reference library series, 14. ISBN 978-0-521-64437-2.\n"
      },
      "date": 1707974015243
    },
    {
      "type": "edit",
      "id": "fda48599e5ed5aec",
      "item": {
        "type": "paragraph",
        "id": "fda48599e5ed5aec",
        "text": "[[Ward Cunningham]], AFTERWORD in \nBECK, Kent, 1999. Kent Beck’s guide to better Smalltalk. Cambridge, U.K. ; New York: Cambridge University Press. SIGS reference library series, 14. ISBN 978-0-521-64437-2.\n"
      },
      "date": 1707974027622
    },
    {
      "type": "edit",
      "id": "fda48599e5ed5aec",
      "item": {
        "type": "paragraph",
        "id": "fda48599e5ed5aec",
        "text": "[[Ward Cunningham]], Afterword in \nBECK, Kent, 1999. Kent Beck’s guide to better Smalltalk. Cambridge, U.K. ; New York: Cambridge University Press. SIGS reference library series, 14. ISBN 978-0-521-64437-2.\n"
      },
      "date": 1707974046097
    },
    {
      "item": {
        "type": "factory",
        "id": "dffb645d2b25e957"
      },
      "id": "dffb645d2b25e957",
      "type": "add",
      "after": "fda48599e5ed5aec",
      "date": 1707974081774
    },
    {
      "type": "edit",
      "id": "dffb645d2b25e957",
      "item": {
        "type": "paragraph",
        "id": "dffb645d2b25e957",
        "text": "I'm working from memory here. This idea, the idea that you could unplug a computer, is an idea that has run in and out of our culture for about as long as there have been computers. I've expressed the idea as a pattern: a problem and its solution. I'm thinking about this pattern because it reminds me of programming with Kent."
      },
      "date": 1707974083620
    },
    {
      "item": {
        "type": "factory",
        "id": "7e8e02d8b1172f84"
      },
      "id": "7e8e02d8b1172f84",
      "type": "add",
      "after": "dffb645d2b25e957",
      "date": 1707974110283
    },
    {
      "type": "edit",
      "id": "7e8e02d8b1172f84",
      "item": {
        "type": "paragraph",
        "id": "7e8e02d8b1172f84",
        "text": "I haven't got the words to this pattern quite right. It gives the impression that I fear computers run amuck. Does anybody remember that old film, The Forbin Project, where the U.S. defense computer gets to talking to the Soviet defense computer and they get the idea that they can run the world better than us? Well, that's not the problem. I first wrote the \"don't program a computer you can't unplug\" pattern because Kent and I needed a pattern at a large scale. We were looking for big advice for a new kind of developer. We imagined ordinary people taking their computing needs into their own hands. These people would use powerful languages to express themselves. But they would also need clear advice about using them. The \"unplug\" pattern says, Before you start writing a program, get a computer that you can control for your own purposes. It says, don't settle for a computer in a glass room. Don't borrow time. Get your own computer. Make it yours"
      },
      "date": 1707974111929
    },
    {
      "type": "edit",
      "id": "7e8e02d8b1172f84",
      "item": {
        "type": "paragraph",
        "id": "7e8e02d8b1172f84",
        "text": "I haven't got the words to this pattern quite right. It gives the impression that I fear computers run amuck. Does anybody remember that old film, The Forbin Project, where the U.S. defense computer gets to talking to the Soviet defense computer and they get the idea that they can run the world better than us? Well, that's not the problem. I first wrote the \"don't program a computer you can't unplug\" pattern because Kent and I needed a pattern at a large scale. We were looking for big advice for a new kind of developer. We imagined ordinary people taking their computing needs into their own hands. These people would use powerful languages to express themselves. But they would also need clear advice about using them. The \"unplug\" pattern says, Before you start writing a program, get a computer that you can control for your own purposes. It says, don't settle for a computer in a glass room. Don't borrow time. Get your own computer. Make it yours."
      },
      "date": 1707974170201
    },
    {
      "item": {
        "type": "factory",
        "id": "d07ceb74ca04fa20"
      },
      "id": "d07ceb74ca04fa20",
      "type": "add",
      "after": "7e8e02d8b1172f84",
      "date": 1707974181206
    },
    {
      "type": "edit",
      "id": "d07ceb74ca04fa20",
      "item": {
        "type": "paragraph",
        "id": "d07ceb74ca04fa20",
        "text": "There is a lot of history to this pattern. Kent and I shared a vision of computing. We worked in a lab that used the sandbox approach to research. You know, give all the researchers the kind of computer that will be the norm in a decade and see what happens. We had dual-processor workstations with huge screens and graphics accelerators on every desk. And what happened?"
      },
      "date": 1707974183001
    },
    {
      "item": {
        "type": "factory",
        "id": "4be00bf09d107d2b"
      },
      "id": "4be00bf09d107d2b",
      "type": "add",
      "after": "d07ceb74ca04fa20",
      "date": 1707974207848
    },
    {
      "type": "edit",
      "id": "4be00bf09d107d2b",
      "item": {
        "type": "paragraph",
        "id": "4be00bf09d107d2b",
        "text": "Not too much. For some reason most people thought they needed permission to write programs. Not us. We made those machines our own."
      },
      "date": 1707974209563
    },
    {
      "item": {
        "type": "factory",
        "id": "d8d14f4af76432cc"
      },
      "id": "d8d14f4af76432cc",
      "type": "add",
      "after": "4be00bf09d107d2b",
      "date": 1707974222120
    },
    {
      "type": "edit",
      "id": "d8d14f4af76432cc",
      "item": {
        "type": "paragraph",
        "id": "d8d14f4af76432cc",
        "text": "We wrote programs together for a year and a half. We'd make up a problem over coffee on Monday, have a prototype struggling by Tuesday, and be dragging people into the office to see results by Friday. Yes, it was like that, except when it wasn't. Sometimes we'd get stuck. By Tuesday we would be over our heads and out of ideas. We had a program going nowhere. So we pulled the plug."
      },
      "date": 1707974224692
    },
    {
      "item": {
        "type": "factory",
        "id": "af81ef2345e81980"
      },
      "id": "af81ef2345e81980",
      "type": "add",
      "after": "d8d14f4af76432cc",
      "date": 1707974255833
    },
    {
      "type": "edit",
      "id": "af81ef2345e81980",
      "item": {
        "type": "paragraph",
        "id": "af81ef2345e81980",
        "text": "Kent and I could walk away from an undone program. We could because we were writing those programs for ourselves. We had no further use for them when they stopped giving back. Put another way, we expected the mere act of authoring to reward us, as it often did Then we found patterns. We both had Christopher Alexander on our bookshelves. We had noticed that our flip attitude about development was working, producing programs that were used, even reused. Alexander got us thinking that we could can what we were doing and share it too."
      },
      "date": 1707974257377
    },
    {
      "type": "edit",
      "id": "af81ef2345e81980",
      "item": {
        "type": "paragraph",
        "id": "af81ef2345e81980",
        "text": "Kent and I could walk away from an undone program. We could because we were writing those programs for ourselves. We had no further use for them when they stopped giving back. Put another way, we expected the mere act of authoring to reward us, as it often did Then we found patterns. We both had [[Christopher Alexander]] on our bookshelves. We had noticed that our flip attitude about development was working, producing programs that were used, even reused. Alexander got us thinking that we could can what we were doing and share it too."
      },
      "date": 1707974329728
    },
    {
      "item": {
        "type": "factory",
        "id": "45f7d1503509bc9d"
      },
      "id": "45f7d1503509bc9d",
      "type": "add",
      "after": "af81ef2345e81980",
      "date": 1707974350053
    },
    {
      "type": "edit",
      "id": "45f7d1503509bc9d",
      "item": {
        "type": "paragraph",
        "id": "45f7d1503509bc9d",
        "text": "I remember Alexander's emphasis on piecemeal growth. It was fundamental to all of his work, and to ours as well. Alexander's vision went beyond our vision, though, in one important way. He recognized the incredible range of forces that bear on one's work. He knew that to make a house one must also know how to make a city, and a brick. Then he showed us how to link that know-how together, top to bottom. Awesome."
      },
      "date": 1707974371473
    },
    {
      "type": "edit",
      "id": "45f7d1503509bc9d",
      "item": {
        "type": "paragraph",
        "id": "45f7d1503509bc9d",
        "text": "I remember Alexander's [[Emphasis on Piecemeal Growth]]. It was fundamental to all of his work, and to ours as well. Alexander's vision went beyond our vision, though, in one important way. He recognized the incredible range of forces that bear on one's work. He knew that to make a house one must also know how to make a city, and a brick. Then he showed us how to link that know-how together, top to bottom. Awesome."
      },
      "date": 1707974385802
    },
    {
      "item": {
        "type": "factory",
        "id": "df31065066d20aa9"
      },
      "id": "df31065066d20aa9",
      "type": "add",
      "after": "45f7d1503509bc9d",
      "date": 1707974541087
    },
    {
      "type": "edit",
      "id": "df31065066d20aa9",
      "item": {
        "type": "paragraph",
        "id": "df31065066d20aa9",
        "text": "So that is how I came to be talking about computer plugs. We learned from Alexander that our advice had to be concrete. Who ever learned anything from advice like, \"Make your program friendly\"? We had recently had better luck with more concrete advice like, Have one pop-up menu, containing verbs, for each pane. …"
      },
      "date": 1707974546667
    },
    {
      "type": "add",
      "id": "105cf818f362f75f",
      "item": {
        "type": "paragraph",
        "id": "105cf818f362f75f",
        "text": "The \"unplug\" pattern wasn't about plugs at all. It was about ownership and control. It said, \"Take control of the environment in which you write programs.\" The point of plugs was just the test, something concrete that would lead you in the right direction without overly constraining what you do."
      },
      "after": "df31065066d20aa9",
      "date": 1707992236254
    },
    {
      "type": "edit",
      "id": "105cf818f362f75f",
      "item": {
        "type": "paragraph",
        "id": "105cf818f362f75f",
        "text": "The \"unplug\" pattern wasn't about plugs at all. It was about [[Ownership]] and [[Control]]. It said, \"Take control of the environment in which you write programs.\" The point of plugs was just the test, something concrete that would lead you in the right direction without overly constraining what you do."
      },
      "date": 1707992258857
    },
    {
      "type": "add",
      "id": "a291f01737120a47",
      "item": {
        "type": "paragraph",
        "id": "a291f01737120a47",
        "text": "It's a good pattern, but not complete. The pattern really only works when surrounded with other patterns that actually give you the ownership and control you'll need. Kent and I fell into that. We didn't make it for ourselves. But we recognized we had it, and used it."
      },
      "after": "105cf818f362f75f",
      "date": 1707993006524
    },
    {
      "type": "add",
      "id": "f0f82152744b35e4",
      "item": {
        "type": "paragraph",
        "id": "f0f82152744b35e4",
        "text": "The pattern is anything but obsolete today. You're probably thinking that 99.9 percent of all software written is written on computers that unplug. But"
      },
      "after": "a291f01737120a47",
      "date": 1707993169543
    },
    {
      "type": "edit",
      "id": "f0f82152744b35e4",
      "item": {
        "type": "paragraph",
        "id": "f0f82152744b35e4",
        "text": "The pattern is anything but obsolete today. You're probably thinking that 99.9 percent of all software written is written on computers that unplug. But can you unplug them? I was thinking about workstations when I first articulated the pattern a decade ago. We thought they would be the locus of power. But it's turned out servers hold the power now. Can you unplug yours? Can you even get it on the phone?"
      },
      "date": 1707993180639
    },
    {
      "type": "add",
      "id": "55cb7ad666d69a39",
      "item": {
        "type": "paragraph",
        "id": "55cb7ad666d69a39",
        "text": "I maintain an Internet presence that I set up with the help of a particularly enlightened provider. I have a server on my premises with a plug that I own. Although the bandwidth of my connection is modest, it is continuous. I've found the character of the whole configuration to be categorically better than simpler arrangements. On my machine I run programs that are unwelcome elsewhere: programs that open their own connections, or just run without stopping. I don't have to ask permission."
      },
      "after": "f0f82152744b35e4",
      "date": 1707993210602
    },
    {
      "type": "add",
      "id": "6217338c09a4071e",
      "item": {
        "type": "paragraph",
        "id": "6217338c09a4071e",
        "text": "We are just consumers to the huge corporations of the computer and telecommunications industry. They want to sell to us alright, but they won't sell us everything we need; that is, they won't make us powerful... unless we insist. Pay attention to the pattern. If we computer users are to have and hold the kind of ownership Kent and I have known, we are going to have to watch those plugs."
      },
      "after": "55cb7ad666d69a39",
      "date": 1707993242800
    },
    {
      "item": {
        "type": "factory",
        "id": "d5f9d32845eb24ad"
      },
      "id": "d5f9d32845eb24ad",
      "type": "add",
      "after": "6217338c09a4071e",
      "date": 1707993249010
    },
    {
      "type": "edit",
      "id": "d5f9d32845eb24ad",
      "item": {
        "type": "paragraph",
        "id": "d5f9d32845eb24ad",
        "text": "— [[Ward Cunningham]]"
      },
      "date": 1707993256220
    },
    {
      "type": "edit",
      "id": "1cb4c7ba3ec7b70a",
      "item": {
        "type": "paragraph",
        "id": "1cb4c7ba3ec7b70a",
        "text": "WHILE A PROGRAM EXPRESSES intent, it is the [[Computer]] , the hardware, that brings that intent to life. In order to have full control over your program's expression you must control the computer that runs it. Therefore, write your program for a computer with a plug. Should you be dissatisfied with the behavior of the computer, unplug it."
      },
      "date": 1707994336299
    },
    {
      "type": "edit",
      "id": "1cb4c7ba3ec7b70a",
      "item": {
        "type": "paragraph",
        "id": "1cb4c7ba3ec7b70a",
        "text": "WHILE A PROGRAM EXPRESSES intent, it is the [[Computer]], the hardware, that brings that intent to life. In order to have full control over your program's expression you must control the computer that runs it. Therefore, write your program for a computer with a plug. Should you be dissatisfied with the behavior of the computer, unplug it."
      },
      "date": 1707994356164
    },
    {
      "type": "edit",
      "id": "1cb4c7ba3ec7b70a",
      "item": {
        "type": "paragraph",
        "id": "1cb4c7ba3ec7b70a",
        "text": "WHILE A PROGRAM EXPRESSES intent, it is the [[Computer]], the hardware, that brings that intent to life. In order to have full control over your program's expression you must control the computer that runs it."
      },
      "date": 1707994384319
    },
    {
      "type": "add",
      "id": "fd795f7bd951ff6f",
      "item": {
        "type": "paragraph",
        "id": "fd795f7bd951ff6f",
        "text": "**[[Therefore]]**, write your program for a computer with a plug. Should you be dissatisfied with the behavior of the computer, unplug it."
      },
      "after": "1cb4c7ba3ec7b70a",
      "date": 1707994393750
    },
    {
      "type": "edit",
      "id": "fd795f7bd951ff6f",
      "item": {
        "type": "markdown",
        "id": "fd795f7bd951ff6f",
        "text": "**[[Therefore]]**, write your program for a computer with a plug. Should you be dissatisfied with the behavior of the computer, unplug it."
      },
      "date": 1707994395189
    },
    {
      "type": "edit",
      "id": "dffb645d2b25e957",
      "item": {
        "type": "paragraph",
        "id": "dffb645d2b25e957",
        "text": "I'm working from memory here. This idea, the idea that you could unplug a computer, is an idea that has run in and out of our culture for about as long as there have been computers. I've expressed the idea as a [[Pattern]]: a [[Problem]] and its [[Solution]]. I'm thinking about this pattern because it reminds me of programming with Kent."
      },
      "date": 1707994826772
    },
    {
      "type": "edit",
      "id": "fda48599e5ed5aec",
      "item": {
        "type": "paragraph",
        "id": "fda48599e5ed5aec",
        "text": "[[Ward Cunningham]], Afterword in \nBECK, Kent, 1999. [[Kent Beck’s guide to better Smalltalk]]. Cambridge, U.K. ; New York: Cambridge University Press. SIGS reference library series, 14. ISBN 978-0-521-64437-2.\n"
      },
      "date": 1707995165110
    }
  ]
}