{
  "title": "Context-Oriented Programming",
  "story": [
    {
      "type": "paragraph",
      "id": "91a850db65903067",
      "text": "[[Example]]s are great but they have a context problem."
    },
    {
      "type": "paragraph",
      "id": "a5b0cd156867be71",
      "text": "The idea of (test-)state construction is good because they follow the model use cases. But they are global and inflexible to different environments which have to be defined at the root of an example. That is something TestCases are good for. But TestCase don‘t help much in state construction.\nSome things can be mitigated using context oriented programming with dynamic variables. But at the end the meeting point of all of these is a global location which makes them not easy to use. ([[Norbert Hartl]], [https://www.linkedin.com/feed/update/urn:li:activity:7141081360965746688?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7141081360965746688%2C7141397500350922752%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287141397500350922752%2Curn%3Ali%3Aactivity%3A7141081360965746688%29 post])"
    },
    {
      "type": "paragraph",
      "id": "fb2434dae0415fc4",
      "text": "In the context of the [[Federated Wiki]], a global location is a [[Page]]. [https://www.linkedin.com/feed/update/urn:li:activity:7141081360965746688?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7141081360965746688%2C7141397500350922752%29&replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7141081360965746688%2C7141697640668229633%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287141397500350922752%2Curn%3Ali%3Aactivity%3A7141081360965746688%29&dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287141697640668229633%2Curn%3Ali%3Aactivity%3A7141081360965746688%29 post]"
    },
    {
      "type": "pagefold",
      "id": "88573c28fa5e36ff",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "3766515f7e623320",
      "site": "wiki.ralfbarkow.ch",
      "slug": "use-examples-rather-than-tests",
      "title": "Use Examples Rather than Tests",
      "text": "With [[Moldable Development]] we use examples rather than tests. Basically these are unit tests that return a live instance that you can interact with."
    },
    {
      "type": "paragraph",
      "id": "9f92595707613291",
      "text": "HIRSCHFELD, Robert, COSTANZA, Pascal and NIERSTRASZ, Oscar, 2008. Context-Oriented Programming. Journal of Object Technology. 2008. Vol. 7, no. 3, p. 125–151. [https://boris.unibe.ch/37163/1/article4.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "55ec1a44a01bd7d1",
      "text": "Context-dependent behavior is becoming increasingly important for a wide range of application domains, from pervasive computing to common business applications. Unfortunately, mainstream programming languages do not provide mechanisms that enable software entities to adapt their behavior dynamically to the current execution context. This leads developers to adopt convoluted designs to achieve the necessary runtime flexibility. We propose a new programming technique called Context-oriented Programming (COP) which addresses this problem. COP treats context explicitly, and provides mechanisms to dynamically adapt behavior in reaction to changes in context, even after system deployment at runtime. In this paper we lay the foundations of COP, show how dynamic layer activation enables multi-dimensional dispatch, illustrate the application of COP by examples in several language extensions, and demonstrate that COP is largely independent of other commitments to programming style."
    },
    {
      "type": "reference",
      "id": "86bcb1fa32639e99",
      "site": "wiki.ralfbarkow.ch",
      "slug": "leibniz",
      "title": "Leibniz",
      "text": "a [[Digital Scientific Notation]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Context-Oriented Programming",
        "story": []
      },
      "date": 1702712366053
    },
    {
      "id": "91a850db65903067",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "91a850db65903067",
        "text": "Examples are great but they have a context problem. The idea of (test-)state construction is good because they follow the model use cases. But they are global and inflexible to different environments which have to be defined at the root of an example. That is something TestCases are good for. But TestCase don‘t help much in state construction.\nSome things can be mitigated using context oriented programming with dynamic variables. But at the end the meeting point of all of these is a global location which makes them not easy to use."
      },
      "attribution": {
        "page": "2023-12-16"
      },
      "date": 1702712380708
    },
    {
      "id": "ec6927ecf49a1e4b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ec6927ecf49a1e4b",
        "text": "[[Norbert Hartl]]"
      },
      "after": "91a850db65903067",
      "attribution": {
        "page": "2023-12-16"
      },
      "date": 1702712384028
    },
    {
      "type": "remove",
      "id": "ec6927ecf49a1e4b",
      "date": 1702712405980
    },
    {
      "type": "edit",
      "id": "91a850db65903067",
      "item": {
        "type": "paragraph",
        "id": "91a850db65903067",
        "text": "Examples are great but they have a context problem. The idea of (test-)state construction is good because they follow the model use cases. But they are global and inflexible to different environments which have to be defined at the root of an example. That is something TestCases are good for. But TestCase don‘t help much in state construction.\nSome things can be mitigated using context oriented programming with dynamic variables. But at the end the meeting point of all of these is a global location which makes them not easy to use. ([[Norbert Hartl]])"
      },
      "date": 1702712408777
    },
    {
      "type": "edit",
      "id": "91a850db65903067",
      "item": {
        "type": "paragraph",
        "id": "91a850db65903067",
        "text": "Examples are great but they have a context problem. The idea of (test-)state construction is good because they follow the model use cases. But they are global and inflexible to different environments which have to be defined at the root of an example. That is something TestCases are good for. But TestCase don‘t help much in state construction.\nSome things can be mitigated using context oriented programming with dynamic variables. But at the end the meeting point of all of these is a global location which makes them not easy to use. ([[Norbert Hartl]] [https://www.linkedin.com/feed/update/urn:li:activity:7141081360965746688?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7141081360965746688%2C7141397500350922752%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287141397500350922752%2Curn%3Ali%3Aactivity%3A7141081360965746688%29 post])"
      },
      "date": 1702712433435
    },
    {
      "type": "edit",
      "id": "91a850db65903067",
      "item": {
        "type": "paragraph",
        "id": "91a850db65903067",
        "text": "Examples are great but they have a context problem."
      },
      "date": 1702712466316
    },
    {
      "type": "add",
      "id": "a5b0cd156867be71",
      "item": {
        "type": "paragraph",
        "id": "a5b0cd156867be71",
        "text": "The idea of (test-)state construction is good because they follow the model use cases. But they are global and inflexible to different environments which have to be defined at the root of an example. That is something TestCases are good for. But TestCase don‘t help much in state construction.\nSome things can be mitigated using context oriented programming with dynamic variables. But at the end the meeting point of all of these is a global location which makes them not easy to use. ([[Norbert Hartl]] [https://www.linkedin.com/feed/update/urn:li:activity:7141081360965746688?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7141081360965746688%2C7141397500350922752%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287141397500350922752%2Curn%3Ali%3Aactivity%3A7141081360965746688%29 post])"
      },
      "after": "91a850db65903067",
      "date": 1702712475501
    },
    {
      "item": {
        "type": "factory",
        "id": "88573c28fa5e36ff"
      },
      "id": "88573c28fa5e36ff",
      "type": "add",
      "after": "a5b0cd156867be71",
      "date": 1702712476985
    },
    {
      "type": "edit",
      "id": "88573c28fa5e36ff",
      "item": {
        "type": "pagefold",
        "id": "88573c28fa5e36ff",
        "text": "~"
      },
      "date": 1702712479774
    },
    {
      "id": "3766515f7e623320",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "3766515f7e623320",
        "site": "wiki.ralfbarkow.ch",
        "slug": "use-examples-rather-than-tests",
        "title": "Use Examples Rather than Tests",
        "text": "With [[Moldable Development]] we use examples rather than tests. Basically these are unit tests that return a live instance that you can interact with."
      },
      "after": "88573c28fa5e36ff",
      "attribution": {
        "page": "2023-12-16"
      },
      "date": 1702712489168
    },
    {
      "type": "edit",
      "id": "a5b0cd156867be71",
      "item": {
        "type": "paragraph",
        "id": "a5b0cd156867be71",
        "text": "The idea of (test-)state construction is good because they follow the model use cases. But they are global and inflexible to different environments which have to be defined at the root of an example. That is something TestCases are good for. But TestCase don‘t help much in state construction.\nSome things can be mitigated using context oriented programming with dynamic variables. But at the end the meeting point of all of these is a global location which makes them not easy to use. ([[Norbert Hartl]], [https://www.linkedin.com/feed/update/urn:li:activity:7141081360965746688?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7141081360965746688%2C7141397500350922752%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287141397500350922752%2Curn%3Ali%3Aactivity%3A7141081360965746688%29 post])"
      },
      "date": 1702712525395
    },
    {
      "item": {
        "type": "factory",
        "id": "9f92595707613291"
      },
      "id": "9f92595707613291",
      "type": "add",
      "after": "3766515f7e623320",
      "date": 1702712663092
    },
    {
      "type": "edit",
      "id": "9f92595707613291",
      "item": {
        "type": "paragraph",
        "id": "9f92595707613291",
        "text": "\nHIRSCHFELD, Robert, COSTANZA, Pascal and NIERSTRASZ, Oscar, 2008. Context-Oriented Programming. Journal of Object Technology. 2008. Vol. 7, no. 3, p. 125–151. \nContext-dependent behavior is becoming increasingly important for a wide range of application domains, from pervasive computing to common business applications. Unfortunately, mainstream programming languages do not provide mechanisms that enable software entities to adapt their behavior dynamically to the current execution context. This leads developers to adopt convoluted designs to achieve the necessary runtime flexibility. We propose a new programming technique called Context-oriented Programming (COP) which addresses this problem. COP treats context explicitly, and provides mechanisms to dynamically adapt behavior in reaction to changes in context, even after system deployment at runtime. In this paper we lay the foundations of COP, show how dynamic layer activation enables multi-dimensional dispatch, illustrate the application of COP by examples in several language extensions, and demonstrate that COP is largely independent of other commitments to programming style.\n"
      },
      "date": 1702712665071
    },
    {
      "type": "edit",
      "id": "9f92595707613291",
      "item": {
        "type": "paragraph",
        "id": "9f92595707613291",
        "text": "HIRSCHFELD, Robert, COSTANZA, Pascal and NIERSTRASZ, Oscar, 2008. Context-Oriented Programming. Journal of Object Technology. 2008. Vol. 7, no. 3, p. 125–151. [https://boris.unibe.ch/37163/1/article4.pdf pdf]"
      },
      "date": 1702712706706
    },
    {
      "type": "add",
      "id": "55ec1a44a01bd7d1",
      "item": {
        "type": "paragraph",
        "id": "55ec1a44a01bd7d1",
        "text": "Context-dependent behavior is becoming increasingly important for a wide range of application domains, from pervasive computing to common business applications. Unfortunately, mainstream programming languages do not provide mechanisms that enable software entities to adapt their behavior dynamically to the current execution context. This leads developers to adopt convoluted designs to achieve the necessary runtime flexibility. We propose a new programming technique called Context-oriented Programming (COP) which addresses this problem. COP treats context explicitly, and provides mechanisms to dynamically adapt behavior in reaction to changes in context, even after system deployment at runtime. In this paper we lay the foundations of COP, show how dynamic layer activation enables multi-dimensional dispatch, illustrate the application of COP by examples in several language extensions, and demonstrate that COP is largely independent of other commitments to programming style."
      },
      "after": "9f92595707613291",
      "date": 1702712707181
    },
    {
      "item": {
        "type": "factory",
        "id": "86bcb1fa32639e99"
      },
      "id": "86bcb1fa32639e99",
      "type": "add",
      "after": "55ec1a44a01bd7d1",
      "date": 1702712752820
    },
    {
      "type": "edit",
      "id": "86bcb1fa32639e99",
      "item": {
        "type": "reference",
        "id": "86bcb1fa32639e99",
        "site": "wiki.ralfbarkow.ch",
        "slug": "leibniz",
        "title": "Leibniz",
        "text": "a [[Digital Scientific Notation]]"
      },
      "date": 1702712762534
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702712858314
    },
    {
      "type": "edit",
      "id": "91a850db65903067",
      "item": {
        "type": "paragraph",
        "id": "91a850db65903067",
        "text": "[[Examples]] are great but they have a context problem."
      },
      "date": 1702712955594
    },
    {
      "type": "edit",
      "id": "91a850db65903067",
      "item": {
        "type": "paragraph",
        "id": "91a850db65903067",
        "text": "[[Example]]s are great but they have a context problem."
      },
      "date": 1702712984656
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1702713546162
    },
    {
      "type": "add",
      "id": "fb2434dae0415fc4",
      "item": {
        "type": "paragraph",
        "id": "fb2434dae0415fc4",
        "text": "In the context of the [[Federated Wiki]], a global location is a [[Page]]."
      },
      "after": "a5b0cd156867be71",
      "date": 1702713590314
    },
    {
      "type": "edit",
      "id": "fb2434dae0415fc4",
      "item": {
        "type": "paragraph",
        "id": "fb2434dae0415fc4",
        "text": "In the context of the [[Federated Wiki]], a global location is a [[Page]]. [https://www.linkedin.com/feed/update/urn:li:activity:7141081360965746688?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7141081360965746688%2C7141397500350922752%29&replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7141081360965746688%2C7141697640668229633%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287141397500350922752%2Curn%3Ali%3Aactivity%3A7141081360965746688%29&dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287141697640668229633%2Curn%3Ali%3Aactivity%3A7141081360965746688%29 post]"
      },
      "date": 1702713603752
    }
  ]
}