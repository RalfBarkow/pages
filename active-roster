{
  "title": "Active Roster",
  "story": [
    {
      "type": "markdown",
      "id": "2972f53899d8e67b",
      "text": "Introducing __Active Rosters__. An active roster is a [[roster]] created not by hand, but by using code. This ensures that the roster is as up-to-date as possible."
    },
    {
      "type": "markdown",
      "id": "b47a955fcb629c73",
      "text": "# Uncoupling"
    },
    {
      "type": "paragraph",
      "id": "cdeaa9833dcb5256",
      "text": "We aim to figure out the best way to move away from using active rosters. While we are writing and creating many domains each day in a research group we need them, but as we move forwards, we want to leave snapshots of these rosters to enable robustness as we fork pages and rosters around [[the federation]]."
    },
    {
      "type": "markdown",
      "id": "debc4f7f4db262fb",
      "text": "- [[Generated Roster]]"
    },
    {
      "type": "markdown",
      "id": "b3fa1f6944a2f9bc",
      "text": "# Proxied dynamic rosters\n\nWe can achieve this by using the built in roster proxy function in fedwiki - that is one roster can refer to another. In this way we can have a whole bunch of activity pages scattered around various sites all referring to a single canonical roster. "
    },
    {
      "type": "markdown",
      "id": "3aab83ac6f12390d",
      "text": "# Switching\nWe can then switch this canonical roster from a dynamically (code) generated roster to a static roster using an external service to re-write the wiki page containing the canonical roster and presto - all other rosters are now hard wired.\n"
    },
    {
      "type": "markdown",
      "id": "88dd44342a6ad8b9",
      "text": "# Speed\n"
    },
    {
      "type": "markdown",
      "id": "5e1743f56f2c16b2",
      "text": "Rosters that are slow will not draw fast enough for activity pages to read them. Unfortunately these proxied dynamic rosters are slightly too slow for that."
    },
    {
      "type": "markdown",
      "id": "9623e894ffd9400c",
      "text": "# Current implementation\n"
    },
    {
      "type": "markdown",
      "id": "a5735659ae851ca2",
      "text": "The current implementation attempt to prevent strain on the server by using json files cached in wiki. We use the [[json plugin]].\n"
    },
    {
      "type": "markdown",
      "id": "722825b50795d828",
      "text": "The format of the stored json is based on the same provided by [[Ward Cunningham]]:\n"
    },
    {
      "type": "markdown",
      "id": "037f9ed5971ce1b9",
      "text": "- http://search.fed.wiki.org:3030/site-web.json"
    },
    {
      "type": "markdown",
      "id": "5684d58d8c816354",
      "text": "[[Atopia Domain Index]] caches a similarly structured json-array of domain names on the [[Atopia Server]], and stores these in it's [[json-plugin]].\n"
    },
    {
      "type": "markdown",
      "id": "1c608724bd3ad94f",
      "text": "The [[Federation Domain Index]] caches domain names from the whole federation, and likewise stores this in it's [[json-plugin]].\n"
    },
    {
      "type": "markdown",
      "id": "17146d4092119045",
      "text": "# Future Implementation\n"
    },
    {
      "type": "markdown",
      "id": "0d9028775c4d828a",
      "text": "We propose that a future version of the [[wiki-server]] should return rosters for all the sites it serves, with a built in query language enabling a range of flexible roster creation similar to the ones being explored here.\n"
    },
    {
      "type": "markdown",
      "id": "72061e130ff6d79d",
      "text": "[[Automatic Snapshot]]s could be preformed on each page-edit. This would combine many of the advantages of both approaches to programatic creation of rosters, and could be of more general application to other plugins."
    },
    {
      "type": "markdown",
      "id": "84ff031e41dfead4",
      "text": "# Active Roster Examples\n"
    },
    {
      "type": "markdown",
      "id": "e59dc62b69f5cd53",
      "text": "The rosters below are dynamically generated with code on the `rest.livecode.world` server. If tht server goes down these rosters will not function."
    },
    {
      "type": "roster",
      "id": "837135217f9a7d8d",
      "text": "Thought Garden Sites\n\nROSTER rest.livecode.world/thought"
    },
    {
      "type": "roster",
      "id": "9290fce974ba1503",
      "text": "Ward's Wiki Sites\n\nROSTER rest.livecode.world/ward"
    },
    {
      "type": "markdown",
      "id": "877865dfa3472465",
      "text": "# See also\n"
    },
    {
      "type": "markdown",
      "id": "b463a685d7a3942d",
      "text": "- [[Active Roster]]\n- [[Dynamic Roster]]\n- [[Roster Maker]]\n- [[Roster Transport]]\n"
    },
    {
      "type": "markdown",
      "id": "d8ffb00e3a9916f0",
      "text": "- [[Federation Domain Index]]\n- [[Search Index Downloads]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Active Roster",
        "story": []
      },
      "date": 1547918295836
    },
    {
      "item": {
        "type": "factory",
        "id": "2972f53899d8e67b"
      },
      "id": "2972f53899d8e67b",
      "type": "add",
      "date": 1547918297063
    },
    {
      "type": "edit",
      "id": "2972f53899d8e67b",
      "item": {
        "type": "paragraph",
        "id": "2972f53899d8e67b",
        "text": "Introducing Active Rosters. An active roster is a [[roster]] created not by hand, but by using code. "
      },
      "date": 1547918452334
    },
    {
      "type": "add",
      "id": "70cebf29e347734b",
      "item": {
        "type": "paragraph",
        "id": "70cebf29e347734b",
        "text": "It has become increasingly difficult to keep up to date with the number of sites that authors and [[research group]]s create. The solution is to create the required roster programatically."
      },
      "after": "2972f53899d8e67b",
      "date": 1547918453301
    },
    {
      "type": "add",
      "id": "9623e894ffd9400c",
      "item": {
        "type": "paragraph",
        "id": "9623e894ffd9400c",
        "text": "# Current implementation"
      },
      "after": "70cebf29e347734b",
      "date": 1547918484196
    },
    {
      "type": "edit",
      "id": "9623e894ffd9400c",
      "item": {
        "type": "markdown",
        "id": "9623e894ffd9400c",
        "text": "# Current implementation"
      },
      "date": 1547918485696
    },
    {
      "type": "add",
      "id": "877865dfa3472465",
      "item": {
        "type": "paragraph",
        "id": "877865dfa3472465",
        "text": "# See also"
      },
      "after": "9623e894ffd9400c",
      "date": 1547918489693
    },
    {
      "type": "edit",
      "id": "877865dfa3472465",
      "item": {
        "type": "markdown",
        "id": "877865dfa3472465",
        "text": "# See also"
      },
      "date": 1547918490747
    },
    {
      "type": "edit",
      "id": "9623e894ffd9400c",
      "item": {
        "type": "markdown",
        "id": "9623e894ffd9400c",
        "text": "# Current implementation\n"
      },
      "date": 1547918497013
    },
    {
      "type": "add",
      "id": "84ff031e41dfead4",
      "item": {
        "type": "markdown",
        "id": "84ff031e41dfead4",
        "text": "# Examples"
      },
      "after": "9623e894ffd9400c",
      "date": 1547918504085
    },
    {
      "type": "add",
      "id": "a5735659ae851ca2",
      "item": {
        "type": "markdown",
        "id": "a5735659ae851ca2",
        "text": "The current implementation attempt to prevent strain on the server by using json files cached in wiki. We us the [[json plugin]].\n"
      },
      "after": "9623e894ffd9400c",
      "date": 1547920772394
    },
    {
      "type": "add",
      "id": "5684d58d8c816354",
      "item": {
        "type": "markdown",
        "id": "5684d58d8c816354",
        "text": "The first"
      },
      "after": "a5735659ae851ca2",
      "date": 1547920790868
    },
    {
      "type": "fork",
      "site": "future.fedwiki.org",
      "date": 1547920814474
    },
    {
      "type": "fork",
      "site": "fedwiki.org",
      "date": 1547920828797
    },
    {
      "type": "edit",
      "id": "5684d58d8c816354",
      "item": {
        "type": "markdown",
        "id": "5684d58d8c816354",
        "text": "[[Atopia Domain Index]] caches a json-array of good domain names on the [[Atopia Server]]."
      },
      "date": 1547920914676
    },
    {
      "type": "edit",
      "id": "877865dfa3472465",
      "item": {
        "type": "markdown",
        "id": "877865dfa3472465",
        "text": "# See also\n"
      },
      "date": 1547921789542
    },
    {
      "type": "add",
      "id": "d8ffb00e3a9916f0",
      "item": {
        "type": "markdown",
        "id": "d8ffb00e3a9916f0",
        "text": "- [[Search Index Downloads]]"
      },
      "after": "877865dfa3472465",
      "date": 1547921794911
    },
    {
      "type": "edit",
      "id": "d8ffb00e3a9916f0",
      "item": {
        "type": "markdown",
        "id": "d8ffb00e3a9916f0",
        "text": "- [[Federation Domain Index]]\n- [[Search Index Downloads]]"
      },
      "date": 1547921876608
    },
    {
      "type": "edit",
      "id": "a5735659ae851ca2",
      "item": {
        "type": "markdown",
        "id": "a5735659ae851ca2",
        "text": "The current implementation attempt to prevent strain on the server by using json files cached in wiki. We use the [[json plugin]].\n"
      },
      "date": 1547922087722
    },
    {
      "type": "add",
      "id": "722825b50795d828",
      "item": {
        "type": "markdown",
        "id": "722825b50795d828",
        "text": "The format of the stored json is based on the same provided by [[Ward Cunningham]]:\n"
      },
      "after": "a5735659ae851ca2",
      "date": 1547922121511
    },
    {
      "type": "add",
      "id": "037f9ed5971ce1b9",
      "item": {
        "type": "markdown",
        "id": "037f9ed5971ce1b9",
        "text": "- [http://search.fed.wiki.org:3030/site-web.json json]"
      },
      "after": "722825b50795d828",
      "date": 1547922127508
    },
    {
      "type": "edit",
      "id": "037f9ed5971ce1b9",
      "item": {
        "type": "markdown",
        "id": "037f9ed5971ce1b9",
        "text": "- http://search.fed.wiki.org:3030/site-web.json"
      },
      "date": 1547922140892
    },
    {
      "type": "edit",
      "id": "5684d58d8c816354",
      "item": {
        "type": "markdown",
        "id": "5684d58d8c816354",
        "text": "[[Atopia Domain Index]] caches a similarly structured json-array of domain names on the [[Atopia Server]], and stores these in it's [[json-plugin]].."
      },
      "date": 1547922195315
    },
    {
      "type": "edit",
      "id": "5684d58d8c816354",
      "item": {
        "type": "markdown",
        "id": "5684d58d8c816354",
        "text": "[[Atopia Domain Index]] caches a similarly structured json-array of domain names on the [[Atopia Server]], and stores these in it's [[json-plugin]].\n"
      },
      "date": 1547922204683
    },
    {
      "type": "add",
      "id": "1c608724bd3ad94f",
      "item": {
        "type": "markdown",
        "id": "1c608724bd3ad94f",
        "text": "The [[Federation Domain Index]] caches domain names from the whole federation, and likewise stores these in it's [[json-plugin]].."
      },
      "after": "5684d58d8c816354",
      "date": 1547922247972
    },
    {
      "type": "edit",
      "id": "1c608724bd3ad94f",
      "item": {
        "type": "markdown",
        "id": "1c608724bd3ad94f",
        "text": "The [[Federation Domain Index]] caches domain names from the whole federation, and likewise stores this in it's [[json-plugin]].."
      },
      "date": 1547922253022
    },
    {
      "type": "edit",
      "id": "1c608724bd3ad94f",
      "item": {
        "type": "markdown",
        "id": "1c608724bd3ad94f",
        "text": "The [[Federation Domain Index]] caches domain names from the whole federation, and likewise stores this in it's [[json-plugin]]."
      },
      "date": 1547922256327
    },
    {
      "type": "edit",
      "id": "1c608724bd3ad94f",
      "item": {
        "type": "markdown",
        "id": "1c608724bd3ad94f",
        "text": "The [[Federation Domain Index]] caches domain names from the whole federation, and likewise stores this in it's [[json-plugin]].\n"
      },
      "date": 1547922271008
    },
    {
      "type": "add",
      "id": "17146d4092119045",
      "item": {
        "type": "markdown",
        "id": "17146d4092119045",
        "text": "# Future Implementation\n"
      },
      "after": "1c608724bd3ad94f",
      "date": 1547922281055
    },
    {
      "type": "add",
      "id": "0d9028775c4d828a",
      "item": {
        "type": "markdown",
        "id": "0d9028775c4d828a",
        "text": "We propose that a future version of the [[wiki-server]] should return rosters for all the sites it serves, with a built in query language enabling a range of flexible roster creation similar to the ones being explored here."
      },
      "after": "17146d4092119045",
      "date": 1547922355551
    },
    {
      "type": "add",
      "item": {
        "type": "roster",
        "id": "837135217f9a7d8d",
        "text": "Thought Garden Sites\n\nROSTER rest.livecode.world/thought"
      },
      "after": "84ff031e41dfead4",
      "id": "837135217f9a7d8d",
      "date": 1547922699461
    },
    {
      "item": {
        "type": "factory",
        "id": "9290fce974ba1503"
      },
      "id": "9290fce974ba1503",
      "type": "add",
      "after": "d8ffb00e3a9916f0",
      "date": 1547922701872
    },
    {
      "type": "move",
      "order": [
        "2972f53899d8e67b",
        "70cebf29e347734b",
        "9623e894ffd9400c",
        "a5735659ae851ca2",
        "722825b50795d828",
        "037f9ed5971ce1b9",
        "5684d58d8c816354",
        "1c608724bd3ad94f",
        "17146d4092119045",
        "0d9028775c4d828a",
        "84ff031e41dfead4",
        "837135217f9a7d8d",
        "9290fce974ba1503",
        "877865dfa3472465",
        "d8ffb00e3a9916f0"
      ],
      "id": "9290fce974ba1503",
      "date": 1547922703923
    },
    {
      "type": "edit",
      "id": "9290fce974ba1503",
      "item": {
        "type": "roster",
        "id": "9290fce974ba1503",
        "text": "Ward's Wiki Sites\n\nROSTER rest.livecode.world/ward"
      },
      "date": 1547922727988
    },
    {
      "type": "edit",
      "id": "2972f53899d8e67b",
      "item": {
        "type": "paragraph",
        "id": "2972f53899d8e67b",
        "text": "Introducing Active Rosters. An active roster is a [[roster]] created not by hand, but by using code."
      },
      "date": 1547922755594
    },
    {
      "type": "add",
      "id": "2fa8fb49f23a882a",
      "item": {
        "type": "paragraph",
        "id": "2fa8fb49f23a882a",
        "text": "- [[Roster Maker]]"
      },
      "after": "2972f53899d8e67b",
      "date": 1547922772903
    },
    {
      "type": "edit",
      "id": "2fa8fb49f23a882a",
      "item": {
        "type": "markdown",
        "id": "2fa8fb49f23a882a",
        "text": "- [[Roster Maker]]"
      },
      "date": 1547922774408
    },
    {
      "type": "edit",
      "id": "2972f53899d8e67b",
      "item": {
        "type": "paragraph",
        "id": "2972f53899d8e67b",
        "text": "Introducing Active Rosters. An active roster is a [[roster]] created not by hand, but by using code. This ensures that the roster is as up-to-date as possible."
      },
      "date": 1547923099718
    },
    {
      "type": "add",
      "id": "b47a955fcb629c73",
      "item": {
        "type": "paragraph",
        "id": "b47a955fcb629c73",
        "text": "An alternative approach is to use the server to create a roster for you with the latest information. This has the advantage of uncoupling the roster from the server, which could disappear. The disadvantage being the information is not keep up to date."
      },
      "after": "2972f53899d8e67b",
      "date": 1547923222831
    },
    {
      "type": "edit",
      "id": "0d9028775c4d828a",
      "item": {
        "type": "markdown",
        "id": "0d9028775c4d828a",
        "text": "We propose that a future version of the [[wiki-server]] should return rosters for all the sites it serves, with a built in query language enabling a range of flexible roster creation similar to the ones being explored here.\n"
      },
      "date": 1547923228849
    },
    {
      "type": "add",
      "id": "72061e130ff6d79d",
      "item": {
        "type": "markdown",
        "id": "72061e130ff6d79d",
        "text": "[[Automatic Snapshot]]s could be preformed on each page-edit. This would combine many of the advantages of both approaches to programatic creation of rosters, and could be of more general application to other plugins."
      },
      "after": "0d9028775c4d828a",
      "date": 1547923319518
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "b463a685d7a3942d",
        "text": "- [[Active Roster]]\n- [[Dynamic Roster]]\n- [[Roster Maker]]\n- [[Roster Transport]]\n"
      },
      "after": "877865dfa3472465",
      "id": "b463a685d7a3942d",
      "date": 1547974817578
    },
    {
      "type": "edit",
      "id": "b47a955fcb629c73",
      "item": {
        "type": "paragraph",
        "id": "b47a955fcb629c73",
        "text": "# Uncoupling"
      },
      "date": 1550658888667
    },
    {
      "type": "edit",
      "id": "b47a955fcb629c73",
      "item": {
        "type": "markdown",
        "id": "b47a955fcb629c73",
        "text": "# Uncoupling"
      },
      "date": 1550658890537
    },
    {
      "type": "add",
      "id": "cdeaa9833dcb5256",
      "item": {
        "type": "paragraph",
        "id": "cdeaa9833dcb5256",
        "text": "An alternative approach is to use the server to create a roster for you with the latest information. This has the advantage of uncoupling the roster from the server, which could disappear. The disadvantage being the information is not keep up to date."
      },
      "after": "b47a955fcb629c73",
      "date": 1550658892762
    },
    {
      "type": "edit",
      "id": "84ff031e41dfead4",
      "item": {
        "type": "markdown",
        "id": "84ff031e41dfead4",
        "text": "# Active Roster Examples"
      },
      "date": 1550658922961
    },
    {
      "type": "edit",
      "id": "84ff031e41dfead4",
      "item": {
        "type": "markdown",
        "id": "84ff031e41dfead4",
        "text": "# Active Roster Examples\n"
      },
      "date": 1550658926588
    },
    {
      "type": "add",
      "id": "e59dc62b69f5cd53",
      "item": {
        "type": "markdown",
        "id": "e59dc62b69f5cd53",
        "text": "The rosters below are dynamically generated with code on the `rest.livecode.world` server. If tht server goes down these rosters will not function."
      },
      "after": "84ff031e41dfead4",
      "date": 1550658970626
    },
    {
      "type": "edit",
      "id": "cdeaa9833dcb5256",
      "item": {
        "type": "paragraph",
        "id": "cdeaa9833dcb5256",
        "text": "We aim to figure out the best way to move away from using acitve rosters."
      },
      "date": 1550659006128
    },
    {
      "type": "add",
      "id": "d1f84c079e6e7ce2",
      "item": {
        "type": "paragraph",
        "id": "d1f84c079e6e7ce2",
        "text": "An alternative approach is to use the server to create a roster for you with the latest information. This has the advantage of uncoupling the roster from the server, which could disappear. The disadvantage being the information is not keep up to date."
      },
      "after": "cdeaa9833dcb5256",
      "date": 1550659009671
    },
    {
      "type": "edit",
      "id": "cdeaa9833dcb5256",
      "item": {
        "type": "paragraph",
        "id": "cdeaa9833dcb5256",
        "text": "We aim to figure out the best way to move away from using active rosters. While we are writing and creating many domains each day in a research group we need them, but as we move forwards, we want to leave snapshots of these rosters to enable robustness as we fork pages and rosters around [[the federation]]."
      },
      "date": 1550659096961
    },
    {
      "type": "edit",
      "id": "2972f53899d8e67b",
      "item": {
        "type": "paragraph",
        "id": "2972f53899d8e67b",
        "text": "Introducing __Active Rosters__. An active roster is a [[roster]] created not by hand, but by using code. This ensures that the roster is as up-to-date as possible."
      },
      "date": 1550752568307
    },
    {
      "type": "add",
      "id": "debc4f7f4db262fb",
      "item": {
        "type": "paragraph",
        "id": "debc4f7f4db262fb",
        "text": "- [[Generated Roster]]"
      },
      "after": "cdeaa9833dcb5256",
      "date": 1550752601241
    },
    {
      "type": "edit",
      "id": "debc4f7f4db262fb",
      "item": {
        "type": "markdown",
        "id": "debc4f7f4db262fb",
        "text": "- [[Generated Roster]]"
      },
      "date": 1550752604274
    },
    {
      "type": "remove",
      "id": "d1f84c079e6e7ce2",
      "date": 1550752619818
    },
    {
      "type": "remove",
      "id": "2fa8fb49f23a882a",
      "date": 1550752621995
    },
    {
      "type": "remove",
      "id": "70cebf29e347734b",
      "date": 1550752624542
    },
    {
      "type": "edit",
      "id": "2972f53899d8e67b",
      "item": {
        "type": "markdown",
        "id": "2972f53899d8e67b",
        "text": "Introducing __Active Rosters__. An active roster is a [[roster]] created not by hand, but by using code. This ensures that the roster is as up-to-date as possible."
      },
      "date": 1550752767166
    },
    {
      "type": "add",
      "id": "b3fa1f6944a2f9bc",
      "item": {
        "type": "paragraph",
        "id": "b3fa1f6944a2f9bc",
        "text": "We can achieve this by using the built in roster proxy function in fedwiki - that is one roster can refer to another. In this way we can have a whole bunch of activity pages scattered around various sites all referring to a single canonical roster. "
      },
      "after": "cdeaa9833dcb5256",
      "date": 1594711250082
    },
    {
      "type": "add",
      "id": "3aab83ac6f12390d",
      "item": {
        "type": "paragraph",
        "id": "3aab83ac6f12390d",
        "text": "# Switching"
      },
      "after": "b3fa1f6944a2f9bc",
      "date": 1594711258560
    },
    {
      "type": "edit",
      "id": "3aab83ac6f12390d",
      "item": {
        "type": "markdown",
        "id": "3aab83ac6f12390d",
        "text": "# Switching"
      },
      "date": 1594711264959
    },
    {
      "type": "edit",
      "id": "3aab83ac6f12390d",
      "item": {
        "type": "markdown",
        "id": "3aab83ac6f12390d",
        "text": "# Switching\nWe can then switch this canonical roster from a dynamically (code) generated roster to a static roster using an external service to re-write the wiki page containing the canonical roster and presto - all other rosters are now hard wired.\n"
      },
      "date": 1594711358900
    },
    {
      "type": "add",
      "id": "88dd44342a6ad8b9",
      "item": {
        "type": "markdown",
        "id": "88dd44342a6ad8b9",
        "text": "# Speed\n"
      },
      "after": "3aab83ac6f12390d",
      "date": 1594711364942
    },
    {
      "type": "add",
      "id": "5e1743f56f2c16b2",
      "item": {
        "type": "markdown",
        "id": "5e1743f56f2c16b2",
        "text": "Rosters that are slow will not draw fast enough for activity pages to read them. Unfortunately these proxied dynamic rosters are slightly too slow for that."
      },
      "after": "88dd44342a6ad8b9",
      "date": 1594711410583
    },
    {
      "id": "debc4f7f4db262fb",
      "type": "move",
      "order": [
        "2972f53899d8e67b",
        "b47a955fcb629c73",
        "cdeaa9833dcb5256",
        "debc4f7f4db262fb",
        "b3fa1f6944a2f9bc",
        "3aab83ac6f12390d",
        "88dd44342a6ad8b9",
        "5e1743f56f2c16b2",
        "9623e894ffd9400c",
        "a5735659ae851ca2",
        "722825b50795d828",
        "037f9ed5971ce1b9",
        "5684d58d8c816354",
        "1c608724bd3ad94f",
        "17146d4092119045",
        "0d9028775c4d828a",
        "72061e130ff6d79d",
        "84ff031e41dfead4",
        "e59dc62b69f5cd53",
        "837135217f9a7d8d",
        "9290fce974ba1503",
        "877865dfa3472465",
        "b463a685d7a3942d",
        "d8ffb00e3a9916f0"
      ],
      "date": 1594711415915
    },
    {
      "type": "edit",
      "id": "b3fa1f6944a2f9bc",
      "item": {
        "type": "paragraph",
        "id": "b3fa1f6944a2f9bc",
        "text": "# Proxied dynamic rosters"
      },
      "date": 1594711435099
    },
    {
      "type": "add",
      "id": "347592c46c36c566",
      "item": {
        "type": "paragraph",
        "id": "347592c46c36c566",
        "text": "We can achieve this by using the built in roster proxy function in fedwiki - that is one roster can refer to another. In this way we can have a whole bunch of activity pages scattered around various sites all referring to a single canonical roster. "
      },
      "after": "b3fa1f6944a2f9bc",
      "date": 1594711436151
    },
    {
      "type": "edit",
      "id": "b3fa1f6944a2f9bc",
      "item": {
        "type": "markdown",
        "id": "b3fa1f6944a2f9bc",
        "text": "# Proxied dynamic rosters"
      },
      "date": 1594711437206
    },
    {
      "type": "remove",
      "id": "347592c46c36c566",
      "date": 1594711440089
    },
    {
      "type": "edit",
      "id": "b3fa1f6944a2f9bc",
      "item": {
        "type": "markdown",
        "id": "b3fa1f6944a2f9bc",
        "text": "# Proxied dynamic rosters\n\nWe can achieve this by using the built in roster proxy function in fedwiki - that is one roster can refer to another. In this way we can have a whole bunch of activity pages scattered around various sites all referring to a single canonical roster. "
      },
      "date": 1594711444911
    },
    {
      "type": "fork",
      "site": "roster.fedwiki.org",
      "date": 1627588526231
    }
  ]
}