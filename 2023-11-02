{
  "title": "2023-11-02",
  "story": [
    {
      "type": "reference",
      "id": "b1d941c1d1b7928d",
      "site": "ward.dojo.fed.wiki",
      "slug": "find-forks",
      "title": "Find Forks",
      "text": "We found a fork of a page David had once prepared that listed many now lost sites. We will see if we can find and suitably index live sites that have other useful forks."
    },
    {
      "type": "paragraph",
      "id": "eb355ea7cd7bcbb7",
      "text": "fortyfoxes via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16988782605342QKjEN:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nEverything seems to work well on firefox. Interesting but strange problems on the browsers with localhost domains."
    },
    {
      "type": "paragraph",
      "id": "2fb9c84226fddbcc",
      "text": "On Safari forking from localhost works, but wiki farm domains do show blank except for plain localhost url – so david.localhost which works on other browsers is blanks. On Chrom wiki farms on localhost work well – but forking to public domian does not. Only Fireflox works properly."
    },
    {
      "type": "paragraph",
      "id": "8a42d8fb26d772f5",
      "text": "This is an issue with the Electron-like client i am creating - as it uses the native embedded browser on each platform - so as with Safari on MacOs it does not display wiki farm domains like david.localhost."
    },
    {
      "type": "paragraph",
      "id": "657edabd86b6b7e9",
      "text": "⇒ [[Narrative Generation]] ⇒ [[BioSmalltalk]]"
    },
    {
      "type": "paragraph",
      "id": "712dc7b021dc15a8",
      "text": "[[recombine]] becomes"
    },
    {
      "type": "code",
      "id": "f18206bdc6e4a882",
      "text": "{{gtPage:recombine|db=aglh1ce18ttiplvtwozjipfl5}}"
    },
    {
      "type": "pagefold",
      "id": "4df01f5790325abf",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "ac5dfa080b934384",
      "site": "hsc.fed.wiki",
      "slug": "graphviz-emphasis-node",
      "title": "Graphviz Emphasis Node",
      "text": "We use a short-hand json format to configure added emphasis for Graphviz nodes and edges based on the types we find in graphs."
    },
    {
      "type": "html",
      "id": "68854d81da5f935c",
      "text": "<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"description\" content=\"Graphviz Emphasis Node | The personal blog of Veit Heller\">\n    <meta name=\"author\" content=\"Veit Heller\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Graphviz Emphasis Node | Veit's Blog</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./le_style.css\">\n\t\t <script src=\"./le_script.js\"></script>\n    <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">\n  </head>\n  <body lang=\"en\">\n    <div class=\"aside\">\n        <p><a href=\"/\">Veit's Blog</a></p>\n        <h1>Graphviz Emphasis Node</h1>\n        <p class=\"date\">2/11/2023</p>\n    </div>\n    <div class=\"content\">\n      <div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"https://wiki.ralfbarkow.ch/view/graphviz-emphasis-node\">https://wiki.ralfbarkow.ch/view/graphviz-emphasis-node</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage := FedWikiPage new\n\turl: (thisSnippet\n\t\t\tpreviousSnippetDo: [ :s | (s ast // LeExternalLabelUrlLinkNode name) anyOne url ]\n\t\t\tifNone: [  ]) asUrl\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nfork, site: hsc.fed.wiki\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nnewer\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"http://hsc.fed.wiki/view/graphviz-emphasis-node\">http://hsc.fed.wiki/view/graphviz-emphasis-node</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc := FedWikiPage new\n\turl: (thisSnippet\n\t\t\tpreviousSnippetDo: [ :s | (s ast // LeExternalLabelUrlLinkNode name) anyOne url ]\n\t\t\tifNone: [  ]) asUrl\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc journal value at: 84\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nFork the newer page\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 84\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 85 \"fork\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 86\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nArray(Object)>>errorSubscriptBounds:\nArray(Object)>>at:\nUndefinedObject>>DoIt\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">GtPharoSnippetCoder</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">GtPharoSourceCoder subclass: #GtPharoSnippetCoder\n\tinstanceVariableNames: 'xdocFilename behavior'\n\tclassVariableNames: ''\n\tpackage: 'GToolkit-Pharo-Coder-Method-Coder'</code>\n    </span>\n(GtPharoSourceCoder)>>primitiveEvaluate:inContext:onFailDo:\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\">http://hsc.fed.wiki/assets/scripts/import-foreign-json.html</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n    {\n      \"type\": \"frame\",\n      \"id\": \"d28867297e3b4f1f\",\n      \"text\": \"http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\\nHEIGHT 240\"\n    },\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\naZnUrl := 'http://hsc.fed.wiki/assets/scripts/import-foreign-json.html' asUrl \"a ZnUrl\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">ZnUrl</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">Object subclass: #ZnUrl\n\tinstanceVariableNames: 'scheme host port segments query fragment username password'\n\tclassVariableNames: ''\n\tpackage: 'Zinc-Resource-Meta-Core'</code>\n    </span>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhtml := ZnEasy get: 'http://hsc.fed.wiki/assets/scripts/import-foreign-json.html' \"a ZnResponse\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">ZnResponse</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">ZnMessage subclass: #ZnResponse\n\tinstanceVariableNames: 'statusLine'\n\tclassVariableNames: ''\n\tpackage: 'Zinc-HTTP-Core'</code>\n    </span>\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nThis JavaScript code appears to be part of a web page, written in ECMAScript module format (<code>type=\"module\"</code>). Let's break down the code step by step:\n\n1. <b>Module Imports</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nimport * as frame from 'http://code.fed.wiki/assets/v1/frame.js'\n   import {Graph} from 'http://hsc.fed.wiki/assets/home/graph.js'\n   import {dotify} from 'http://hsc.fed.wiki/assets/home/dotify.js'\n   import {drop} from 'http://hsc.fed.wiki/assets/home/drop.js'\n        </code>\n      </pre>\n    </div>\n   These lines import modules from external sources. It seems like this code relies on external libraries for functionality. The modules <code>frame</code>, <code>Graph</code>, <code>dotify</code>, and <code>drop</code> are being imported.\n\n2. <b>Global Functions</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.over = function (event) {\n     event.preventDefault()\n   }\n        </code>\n      </pre>\n    </div>\n   This defines a global function <code>over</code> which takes an <code>event</code> as an argument. It prevents the default behavior of the event (e.g., preventing the browser from performing its default action when dragging something).\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.drop = async function (event) {\n     event.preventDefault();\n     const want = files(event).filter(file =>\n       file.name.endsWith('.json') &amp;&amp;\n       file.type === 'application/json')\n     input.value = await want[0].text()\n   }\n        </code>\n      </pre>\n    </div>\n   This defines a global asynchronous function <code>drop</code> which also takes an <code>event</code> as an argument. It prevents the default behavior of the event, then it retrieves a list of files from the event using the <code>files</code> function. It filters the files to only include those with a <code>.json</code> extension and of type <code>'application/json'</code>. Finally, it sets the value of an HTML element with the ID <code>input</code> to the text content of the first file.\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nfunction files(event) {\n     if (event.dataTransfer.items) {\n       return [...event.dataTransfer.items]\n         .filter(item => item.kind === 'file')\n         .map(item => item.getAsFile())\n     } else {\n       return [...event.dataTransfer.files]\n     }\n   }\n        </code>\n      </pre>\n    </div>\n   This is a helper function <code>files</code> which takes an <code>event</code> as an argument. It checks if the event has <code>dataTransfer.items</code>. If so, it converts the items to an array, filters them to only include files, and then maps them to their corresponding <code>File</code> objects. If <code>dataTransfer.items</code> is not available, it converts <code>event.dataTransfer.files</code> to an array.\n\n3. <b>Global Async Functions</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.dopreview = async event => {\n     trouble.innerText = ''\n     const graph = await convert()\n     const title = \"Imported Graph\"\n     const story = [\n       {type:'code',text:JSON.stringify(graph.tally())},\n       {type:'graphviz',text:dotify({graph,merged:{nids:[]}})}\n     ]\n     frame.open({title,story},event.shiftKey)\n   }\n        </code>\n      </pre>\n    </div>\n   This defines an asynchronous function <code>dopreview</code> which takes an <code>event</code> as an argument. It first sets the <code>innerText</code> of an HTML element with the ID <code>trouble</code> to an empty string. It then awaits the result of the <code>convert</code> function and assigns it to the variable <code>graph</code>. Next, it creates a <code>title</code> variable with the value \"Imported Graph\". It then creates an array called <code>story</code> containing two objects, each with a <code>type</code> and <code>text</code> property. Finally, it calls the <code>open</code> function from the <code>frame</code> module with an object containing <code>title</code>, <code>story</code>, and a boolean indicating if the shift key is pressed.\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.dodownload = async event => {\n     trouble.innerText = ''\n     const graph = await convert()\n     const name = graph.nodes[0].props.name || 'imported'\n     frame.download(graph.stringify(null,2),`${name}.graph.json`,'application/json')\n   }\n        </code>\n      </pre>\n    </div>\n   This defines another asynchronous function <code>dodownload</code> which also takes an <code>event</code> as an argument. It performs similar steps to <code>dopreview</code>, but instead of calling <code>frame.open</code>, it calls <code>frame.download</code>. It generates a file name based on the name of the first node in the <code>graph</code> or defaults to <code>'imported'</code>.\n\n4. <b>Async Function <code>convert</code></b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nasync function convert () {\n     // ...\n   }\n        </code>\n      </pre>\n    </div>\n   This is an asynchronous function named <code>convert</code>. It appears to be the core function of this script. It performs several operations to handle JSON data and interact with a <code>Graph</code> object.\n\n5. <b>Inside the <code>convert</code> Function</b>:\n   - It creates a new <code>Graph</code> object.\n   - It obtains a context from the <code>frame</code> module.\n   - It retrieves and concatenates code from the <code>context.page.story</code> which has <code>type</code> set to <code>'code'</code>.\n   - It wraps the concatenated code in an export statement and assigns it to the variable <code>wrap</code>.\n   - It tries to import this dynamically generated JavaScript module using a base64-encoded URI.\n   - If the module is successfully imported, it processes JSON data and invokes the <code>convert</code> function from the module.\n\n6. <b>Error Handling</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\ntry {\n     // ...\n   } catch (e) {\n     console.log('trouble',e)\n     trouble.innerHTML = `&lt;p>${e.name}: ${e.message}&lt;/p>`\n   }\n        </code>\n      </pre>\n    </div>\n   This code handles potential errors that may occur during the execution of the <code>try</code> block. If an error occurs, it logs a message to the console and sets the inner HTML of an element with the ID <code>trouble</code> to display information about the error.\n\nOverall, this script appears to be designed to handle drag-and-drop events for JSON files, convert the JSON data using dynamically generated code, and interact with a <code>Graph</code> object and a UI element with the ID <code>input</code>. It also provides functions for previewing and downloading the processed data.\n  </p>\n</div>\n      <div class=\"footer\">\n        <p>Want to go back to the <a href=\"/\">list of posts</a>?</p>\n      </div>\n    </div>\n  </body>\n</html>"
    },
    {
      "type": "image",
      "id": "84f1c6b9af74cb6e",
      "text": "a FedWikiPage sequencer ?",
      "size": "thumbnail",
      "width": 183,
      "height": 185,
      "url": "/assets/plugins/image/b58bcb2f5eb9332653e679a2d1b4075a.jpg"
    },
    {
      "type": "paragraph",
      "id": "cb966916a566dd3e",
      "text": "⇒ [[a ZnResponse]]"
    },
    {
      "type": "pagefold",
      "id": "eeb7811348548bdb",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a6d1890946cdc24b",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1698941645329vuJQZ:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
    },
    {
      "type": "paragraph",
      "id": "bb9ef85147f3f229",
      "text": "At [[New Relic]] I built a graph database called [[El Dorado]] that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The [[Hypertext Super Collaborator]] captured many of these ideas in a single web app but never attracted the online collaboration promised by building on [[Croquet]]."
    },
    {
      "type": "paragraph",
      "id": "4741832414eb9aba",
      "text": "Recently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: [http://search.dojo.fed.wiki/solo-super-collaborator.html page]"
    },
    {
      "type": "reference",
      "id": "f80ba7e544c03575",
      "site": "search.dojo.fed.wiki",
      "slug": "solo-super-collaborator",
      "title": "Solo Super Collaborator",
      "text": "The Super Collaborator explored online collaboration based on Croquet. We've stepped back from this interaction but think its graph merging mechanism will be useful for relating \"read me\" level documentation across many repos."
    },
    {
      "type": "reference",
      "id": "09d4e3b57773eae7",
      "site": "search.dojo.fed.wiki",
      "slug": "search-services",
      "title": "Search Services",
      "text": "We consider the various responsibilities we have given to various files and scripts that work together but often for different purposes."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-11-02",
        "story": []
      },
      "date": 1698902098668
    },
    {
      "item": {
        "type": "factory",
        "id": "eb355ea7cd7bcbb7"
      },
      "id": "eb355ea7cd7bcbb7",
      "type": "add",
      "date": 1698902100143
    },
    {
      "type": "edit",
      "id": "eb355ea7cd7bcbb7",
      "item": {
        "type": "paragraph",
        "id": "eb355ea7cd7bcbb7",
        "text": "fortyfoxes\nEverything seems to work well on firefox. Interesting but strange problems on othe browsers with localhost domains. On Safari forking from localhost works, but wiki farm domains do show blank except for plain localhost url - so david.localhost which works on other browsers is blanks. On Chrom wiki farms on localhost work well - but forking to public domian does not. Only Fireflox works properly.\nThis is an issue with the Electron-like client i am creating - as it uses the native embedded browser on each platform - so as with Safari on MacOs it does not display wiki farm domains like david.localhost. "
      },
      "date": 1698902103308
    },
    {
      "type": "edit",
      "id": "eb355ea7cd7bcbb7",
      "item": {
        "type": "paragraph",
        "id": "eb355ea7cd7bcbb7",
        "text": "fortyfoxes via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16988782605342QKjEN:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nEverything seems to work well on firefox. Interesting but strange problems on othe browsers with localhost domains. On Safari forking from localhost works, but wiki farm domains do show blank except for plain localhost url - so david.localhost which works on other browsers is blanks. On Chrom wiki farms on localhost work well - but forking to public domian does not. Only Fireflox works properly.\nThis is an issue with the Electron-like client i am creating - as it uses the native embedded browser on each platform - so as with Safari on MacOs it does not display wiki farm domains like david.localhost. "
      },
      "date": 1698902314542
    },
    {
      "item": {
        "type": "factory",
        "id": "b1d941c1d1b7928d"
      },
      "id": "b1d941c1d1b7928d",
      "type": "add",
      "after": "eb355ea7cd7bcbb7",
      "date": 1698908083413
    },
    {
      "type": "edit",
      "id": "b1d941c1d1b7928d",
      "item": {
        "type": "reference",
        "id": "b1d941c1d1b7928d",
        "site": "ward.dojo.fed.wiki",
        "slug": "find-forks",
        "title": "Find Forks",
        "text": "We found a fork of a page David had once prepared that listed many now lost sites. We will see if we can find and suitably index live sites that have other useful forks."
      },
      "date": 1698908087474
    },
    {
      "item": {
        "type": "factory",
        "id": "657edabd86b6b7e9"
      },
      "id": "657edabd86b6b7e9",
      "type": "add",
      "after": "b1d941c1d1b7928d",
      "date": 1698910280925
    },
    {
      "type": "edit",
      "id": "657edabd86b6b7e9",
      "item": {
        "type": "paragraph",
        "id": "657edabd86b6b7e9",
        "text": "[[Narrative Generation]]"
      },
      "date": 1698910284796
    },
    {
      "item": {
        "type": "factory",
        "id": "84f1c6b9af74cb6e"
      },
      "id": "84f1c6b9af74cb6e",
      "type": "add",
      "after": "657edabd86b6b7e9",
      "date": 1698910442187
    },
    {
      "type": "edit",
      "id": "84f1c6b9af74cb6e",
      "item": {
        "type": "image",
        "id": "84f1c6b9af74cb6e",
        "text": "sequencer",
        "size": "thumbnail",
        "width": 183,
        "height": 185,
        "url": "/assets/plugins/image/b58bcb2f5eb9332653e679a2d1b4075a.jpg"
      },
      "date": 1698910473840
    },
    {
      "type": "edit",
      "id": "84f1c6b9af74cb6e",
      "item": {
        "type": "image",
        "id": "84f1c6b9af74cb6e",
        "text": "a FedWikiPage sequencer ?",
        "size": "thumbnail",
        "width": 183,
        "height": 185,
        "url": "/assets/plugins/image/b58bcb2f5eb9332653e679a2d1b4075a.jpg"
      },
      "date": 1698910531212
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "eb355ea7cd7bcbb7",
        "84f1c6b9af74cb6e",
        "b1d941c1d1b7928d",
        "657edabd86b6b7e9"
      ],
      "date": 1698910541528
    },
    {
      "type": "edit",
      "id": "657edabd86b6b7e9",
      "item": {
        "type": "paragraph",
        "id": "657edabd86b6b7e9",
        "text": "⇒ [[Narrative Generation]]"
      },
      "date": 1698910558980
    },
    {
      "item": {
        "type": "factory",
        "id": "712dc7b021dc15a8"
      },
      "id": "712dc7b021dc15a8",
      "type": "add",
      "after": "657edabd86b6b7e9",
      "date": 1698910917888
    },
    {
      "type": "edit",
      "id": "712dc7b021dc15a8",
      "item": {
        "type": "paragraph",
        "id": "712dc7b021dc15a8",
        "text": "[[recombine]] becomes {{gtPage:recombine|db=aglh1ce18ttiplvtwozjipfl5}}"
      },
      "date": 1698910923899
    },
    {
      "item": {
        "type": "factory",
        "id": "f18206bdc6e4a882"
      },
      "id": "f18206bdc6e4a882",
      "type": "add",
      "after": "712dc7b021dc15a8",
      "date": 1698910927732
    },
    {
      "type": "edit",
      "id": "f18206bdc6e4a882",
      "item": {
        "type": "code",
        "id": "f18206bdc6e4a882",
        "text": "{{gtPage:recombine|db=aglh1ce18ttiplvtwozjipfl5}}"
      },
      "date": 1698910934258
    },
    {
      "type": "edit",
      "id": "712dc7b021dc15a8",
      "item": {
        "type": "paragraph",
        "id": "712dc7b021dc15a8",
        "text": "[[recombine]] becomes"
      },
      "date": 1698910942592
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "eb355ea7cd7bcbb7",
        "b1d941c1d1b7928d",
        "657edabd86b6b7e9",
        "84f1c6b9af74cb6e",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882"
      ],
      "date": 1698910959717
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "84f1c6b9af74cb6e",
        "eb355ea7cd7bcbb7",
        "b1d941c1d1b7928d",
        "657edabd86b6b7e9",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882"
      ],
      "date": 1698910976671
    },
    {
      "id": "b1d941c1d1b7928d",
      "type": "move",
      "order": [
        "84f1c6b9af74cb6e",
        "b1d941c1d1b7928d",
        "eb355ea7cd7bcbb7",
        "657edabd86b6b7e9",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882"
      ],
      "date": 1698911016665
    },
    {
      "type": "edit",
      "id": "eb355ea7cd7bcbb7",
      "item": {
        "type": "paragraph",
        "id": "eb355ea7cd7bcbb7",
        "text": "fortyfoxes via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16988782605342QKjEN:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nEverything seems to work well on firefox. Interesting but strange problems on the browsers with localhost domains."
      },
      "date": 1698911076336
    },
    {
      "type": "add",
      "id": "2fb9c84226fddbcc",
      "item": {
        "type": "paragraph",
        "id": "2fb9c84226fddbcc",
        "text": "On Safari forking from localhost works, but wiki farm domains do show blank except for plain localhost url - so david.localhost which works on other browsers is blanks. On Chrom wiki farms on localhost work well - but forking to public domian does not. Only Fireflox works properly."
      },
      "after": "eb355ea7cd7bcbb7",
      "date": 1698911079811
    },
    {
      "type": "add",
      "id": "8a42d8fb26d772f5",
      "item": {
        "type": "paragraph",
        "id": "8a42d8fb26d772f5",
        "text": "This is an issue with the Electron-like client i am creating - as it uses the native embedded browser on each platform - so as with Safari on MacOs it does not display wiki farm domains like david.localhost."
      },
      "after": "2fb9c84226fddbcc",
      "date": 1698911083439
    },
    {
      "type": "edit",
      "id": "2fb9c84226fddbcc",
      "item": {
        "type": "paragraph",
        "id": "2fb9c84226fddbcc",
        "text": "On Safari forking from localhost works, but wiki farm domains do show blank except for plain localhost url – so david.localhost which works on other browsers is blanks. On Chrom wiki farms on localhost work well – but forking to public domian does not. Only Fireflox works properly."
      },
      "date": 1698911149448
    },
    {
      "item": {
        "type": "factory",
        "id": "f8eec8ac1fa537b8"
      },
      "id": "f8eec8ac1fa537b8",
      "type": "add",
      "after": "f18206bdc6e4a882",
      "date": 1698911227037
    },
    {
      "type": "edit",
      "id": "f8eec8ac1fa537b8",
      "item": {
        "type": "paragraph",
        "id": "f8eec8ac1fa537b8",
        "text": "[[BioSmalltalk]]"
      },
      "date": 1698911231875
    },
    {
      "item": {
        "type": "factory",
        "id": "4df01f5790325abf"
      },
      "id": "4df01f5790325abf",
      "type": "add",
      "after": "f8eec8ac1fa537b8",
      "date": 1698919284183
    },
    {
      "type": "edit",
      "id": "4df01f5790325abf",
      "item": {
        "type": "pagefold",
        "id": "4df01f5790325abf",
        "text": "~"
      },
      "date": 1698919288968
    },
    {
      "item": {
        "type": "factory",
        "id": "ac5dfa080b934384"
      },
      "id": "ac5dfa080b934384",
      "type": "add",
      "after": "4df01f5790325abf",
      "date": 1698919290790
    },
    {
      "type": "edit",
      "id": "ac5dfa080b934384",
      "item": {
        "type": "reference",
        "id": "ac5dfa080b934384",
        "site": "hsc.fed.wiki",
        "slug": "graphviz-emphasis-node",
        "title": "Graphviz Emphasis Node",
        "text": "We use a short-hand json format to configure added emphasis for Graphviz nodes and edges based on the types we find in graphs."
      },
      "date": 1698919296610
    },
    {
      "item": {
        "type": "factory",
        "id": "68854d81da5f935c"
      },
      "id": "68854d81da5f935c",
      "type": "add",
      "after": "ac5dfa080b934384",
      "date": 1698922307170
    },
    {
      "type": "edit",
      "id": "68854d81da5f935c",
      "item": {
        "type": "html",
        "id": "68854d81da5f935c",
        "text": "<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"description\" content=\"Graphviz Emphasis Node | The personal blog of Veit Heller\">\n    <meta name=\"author\" content=\"Veit Heller\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Graphviz Emphasis Node | Veit's Blog</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./le_style.css\">\n\t\t <script src=\"./le_script.js\"></script>\n    <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">\n  </head>\n  <body lang=\"en\">\n    <div class=\"aside\">\n        <p><a href=\"/\">Veit's Blog</a></p>\n        <h1>Graphviz Emphasis Node</h1>\n        <p class=\"date\">2/11/2023</p>\n    </div>\n    <div class=\"content\">\n      <div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"https://wiki.ralfbarkow.ch/view/graphviz-emphasis-node\">https://wiki.ralfbarkow.ch/view/graphviz-emphasis-node</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage := FedWikiPage new\n\turl: (thisSnippet\n\t\t\tpreviousSnippetDo: [ :s | (s ast // LeExternalLabelUrlLinkNode name) anyOne url ]\n\t\t\tifNone: [  ]) asUrl\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nfork, site: hsc.fed.wiki\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nnewer\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"http://hsc.fed.wiki/view/graphviz-emphasis-node\">http://hsc.fed.wiki/view/graphviz-emphasis-node</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc := FedWikiPage new\n\turl: (thisSnippet\n\t\t\tpreviousSnippetDo: [ :s | (s ast // LeExternalLabelUrlLinkNode name) anyOne url ]\n\t\t\tifNone: [  ]) asUrl\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc journal value at: 84\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nFork the newer page\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 84\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 85 \"fork\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 86\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nArray(Object)>>errorSubscriptBounds:\nArray(Object)>>at:\nUndefinedObject>>DoIt\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">GtPharoSnippetCoder</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">GtPharoSourceCoder subclass: #GtPharoSnippetCoder\n\tinstanceVariableNames: 'xdocFilename behavior'\n\tclassVariableNames: ''\n\tpackage: 'GToolkit-Pharo-Coder-Method-Coder'</code>\n    </span>\n(GtPharoSourceCoder)>>primitiveEvaluate:inContext:onFailDo:\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\">http://hsc.fed.wiki/assets/scripts/import-foreign-json.html</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n    {\n      \"type\": \"frame\",\n      \"id\": \"d28867297e3b4f1f\",\n      \"text\": \"http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\\nHEIGHT 240\"\n    },\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\naZnUrl := 'http://hsc.fed.wiki/assets/scripts/import-foreign-json.html' asUrl \"a ZnUrl\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">ZnUrl</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">Object subclass: #ZnUrl\n\tinstanceVariableNames: 'scheme host port segments query fragment username password'\n\tclassVariableNames: ''\n\tpackage: 'Zinc-Resource-Meta-Core'</code>\n    </span>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhtml := ZnEasy get: 'http://hsc.fed.wiki/assets/scripts/import-foreign-json.html' \"a ZnResponse\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">ZnResponse</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">ZnMessage subclass: #ZnResponse\n\tinstanceVariableNames: 'statusLine'\n\tclassVariableNames: ''\n\tpackage: 'Zinc-HTTP-Core'</code>\n    </span>\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nThis JavaScript code appears to be part of a web page, written in ECMAScript module format (<code>type=\"module\"</code>). Let's break down the code step by step:\n\n1. <b>Module Imports</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nimport * as frame from 'http://code.fed.wiki/assets/v1/frame.js'\n   import {Graph} from 'http://hsc.fed.wiki/assets/home/graph.js'\n   import {dotify} from 'http://hsc.fed.wiki/assets/home/dotify.js'\n   import {drop} from 'http://hsc.fed.wiki/assets/home/drop.js'\n        </code>\n      </pre>\n    </div>\n   These lines import modules from external sources. It seems like this code relies on external libraries for functionality. The modules <code>frame</code>, <code>Graph</code>, <code>dotify</code>, and <code>drop</code> are being imported.\n\n2. <b>Global Functions</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.over = function (event) {\n     event.preventDefault()\n   }\n        </code>\n      </pre>\n    </div>\n   This defines a global function <code>over</code> which takes an <code>event</code> as an argument. It prevents the default behavior of the event (e.g., preventing the browser from performing its default action when dragging something).\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.drop = async function (event) {\n     event.preventDefault();\n     const want = files(event).filter(file =>\n       file.name.endsWith('.json') &amp;&amp;\n       file.type === 'application/json')\n     input.value = await want[0].text()\n   }\n        </code>\n      </pre>\n    </div>\n   This defines a global asynchronous function <code>drop</code> which also takes an <code>event</code> as an argument. It prevents the default behavior of the event, then it retrieves a list of files from the event using the <code>files</code> function. It filters the files to only include those with a <code>.json</code> extension and of type <code>'application/json'</code>. Finally, it sets the value of an HTML element with the ID <code>input</code> to the text content of the first file.\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nfunction files(event) {\n     if (event.dataTransfer.items) {\n       return [...event.dataTransfer.items]\n         .filter(item => item.kind === 'file')\n         .map(item => item.getAsFile())\n     } else {\n       return [...event.dataTransfer.files]\n     }\n   }\n        </code>\n      </pre>\n    </div>\n   This is a helper function <code>files</code> which takes an <code>event</code> as an argument. It checks if the event has <code>dataTransfer.items</code>. If so, it converts the items to an array, filters them to only include files, and then maps them to their corresponding <code>File</code> objects. If <code>dataTransfer.items</code> is not available, it converts <code>event.dataTransfer.files</code> to an array.\n\n3. <b>Global Async Functions</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.dopreview = async event => {\n     trouble.innerText = ''\n     const graph = await convert()\n     const title = \"Imported Graph\"\n     const story = [\n       {type:'code',text:JSON.stringify(graph.tally())},\n       {type:'graphviz',text:dotify({graph,merged:{nids:[]}})}\n     ]\n     frame.open({title,story},event.shiftKey)\n   }\n        </code>\n      </pre>\n    </div>\n   This defines an asynchronous function <code>dopreview</code> which takes an <code>event</code> as an argument. It first sets the <code>innerText</code> of an HTML element with the ID <code>trouble</code> to an empty string. It then awaits the result of the <code>convert</code> function and assigns it to the variable <code>graph</code>. Next, it creates a <code>title</code> variable with the value \"Imported Graph\". It then creates an array called <code>story</code> containing two objects, each with a <code>type</code> and <code>text</code> property. Finally, it calls the <code>open</code> function from the <code>frame</code> module with an object containing <code>title</code>, <code>story</code>, and a boolean indicating if the shift key is pressed.\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.dodownload = async event => {\n     trouble.innerText = ''\n     const graph = await convert()\n     const name = graph.nodes[0].props.name || 'imported'\n     frame.download(graph.stringify(null,2),`${name}.graph.json`,'application/json')\n   }\n        </code>\n      </pre>\n    </div>\n   This defines another asynchronous function <code>dodownload</code> which also takes an <code>event</code> as an argument. It performs similar steps to <code>dopreview</code>, but instead of calling <code>frame.open</code>, it calls <code>frame.download</code>. It generates a file name based on the name of the first node in the <code>graph</code> or defaults to <code>'imported'</code>.\n\n4. <b>Async Function <code>convert</code></b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nasync function convert () {\n     // ...\n   }\n        </code>\n      </pre>\n    </div>\n   This is an asynchronous function named <code>convert</code>. It appears to be the core function of this script. It performs several operations to handle JSON data and interact with a <code>Graph</code> object.\n\n5. <b>Inside the <code>convert</code> Function</b>:\n   - It creates a new <code>Graph</code> object.\n   - It obtains a context from the <code>frame</code> module.\n   - It retrieves and concatenates code from the <code>context.page.story</code> which has <code>type</code> set to <code>'code'</code>.\n   - It wraps the concatenated code in an export statement and assigns it to the variable <code>wrap</code>.\n   - It tries to import this dynamically generated JavaScript module using a base64-encoded URI.\n   - If the module is successfully imported, it processes JSON data and invokes the <code>convert</code> function from the module.\n\n6. <b>Error Handling</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\ntry {\n     // ...\n   } catch (e) {\n     console.log('trouble',e)\n     trouble.innerHTML = `&lt;p>${e.name}: ${e.message}&lt;/p>`\n   }\n        </code>\n      </pre>\n    </div>\n   This code handles potential errors that may occur during the execution of the <code>try</code> block. If an error occurs, it logs a message to the console and sets the inner HTML of an element with the ID <code>trouble</code> to display information about the error.\n\nOverall, this script appears to be designed to handle drag-and-drop events for JSON files, convert the JSON data using dynamically generated code, and interact with a <code>Graph</code> object and a UI element with the ID <code>input</code>. It also provides functions for previewing and downloading the processed data.\n  </p>\n</div>\n      <div class=\"footer\">\n        <p>Want to go back to the <a href=\"/\">list of posts</a>?</p>\n      </div>\n    </div>\n  </body>\n</html>\n"
      },
      "date": 1698922309740
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "b1d941c1d1b7928d",
        "eb355ea7cd7bcbb7",
        "2fb9c84226fddbcc",
        "8a42d8fb26d772f5",
        "657edabd86b6b7e9",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882",
        "f8eec8ac1fa537b8",
        "4df01f5790325abf",
        "ac5dfa080b934384",
        "84f1c6b9af74cb6e",
        "68854d81da5f935c"
      ],
      "date": 1698925289805
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "b1d941c1d1b7928d",
        "eb355ea7cd7bcbb7",
        "2fb9c84226fddbcc",
        "8a42d8fb26d772f5",
        "657edabd86b6b7e9",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882",
        "f8eec8ac1fa537b8",
        "4df01f5790325abf",
        "84f1c6b9af74cb6e",
        "ac5dfa080b934384",
        "68854d81da5f935c"
      ],
      "date": 1698925294574
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "b1d941c1d1b7928d",
        "eb355ea7cd7bcbb7",
        "2fb9c84226fddbcc",
        "8a42d8fb26d772f5",
        "657edabd86b6b7e9",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882",
        "f8eec8ac1fa537b8",
        "84f1c6b9af74cb6e",
        "4df01f5790325abf",
        "ac5dfa080b934384",
        "68854d81da5f935c"
      ],
      "date": 1698925321777
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "b1d941c1d1b7928d",
        "eb355ea7cd7bcbb7",
        "2fb9c84226fddbcc",
        "8a42d8fb26d772f5",
        "657edabd86b6b7e9",
        "84f1c6b9af74cb6e",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882",
        "f8eec8ac1fa537b8",
        "4df01f5790325abf",
        "ac5dfa080b934384",
        "68854d81da5f935c"
      ],
      "date": 1698925326120
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "b1d941c1d1b7928d",
        "eb355ea7cd7bcbb7",
        "2fb9c84226fddbcc",
        "8a42d8fb26d772f5",
        "84f1c6b9af74cb6e",
        "657edabd86b6b7e9",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882",
        "f8eec8ac1fa537b8",
        "4df01f5790325abf",
        "ac5dfa080b934384",
        "68854d81da5f935c"
      ],
      "date": 1698925330935
    },
    {
      "type": "edit",
      "id": "68854d81da5f935c",
      "item": {
        "type": "html",
        "id": "68854d81da5f935c",
        "text": "<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"description\" content=\"Graphviz Emphasis Node | The personal blog of Veit Heller\">\n    <meta name=\"author\" content=\"Veit Heller\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Graphviz Emphasis Node | Veit's Blog</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./le_style.css\">\n\t\t <script src=\"./le_script.js\"></script>\n    <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">\n  </head>\n  <body lang=\"en\">\n    <div class=\"aside\">\n        <p><a href=\"/\">Veit's Blog</a></p>\n        <h1>Graphviz Emphasis Node</h1>\n        <p class=\"date\">2/11/2023</p>\n    </div>\n    <div class=\"content\">\n      <div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"https://wiki.ralfbarkow.ch/view/graphviz-emphasis-node\">https://wiki.ralfbarkow.ch/view/graphviz-emphasis-node</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage := FedWikiPage new\n\turl: (thisSnippet\n\t\t\tpreviousSnippetDo: [ :s | (s ast // LeExternalLabelUrlLinkNode name) anyOne url ]\n\t\t\tifNone: [  ]) asUrl\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nfork, site: hsc.fed.wiki\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nnewer\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"http://hsc.fed.wiki/view/graphviz-emphasis-node\">http://hsc.fed.wiki/view/graphviz-emphasis-node</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc := FedWikiPage new\n\turl: (thisSnippet\n\t\t\tpreviousSnippetDo: [ :s | (s ast // LeExternalLabelUrlLinkNode name) anyOne url ]\n\t\t\tifNone: [  ]) asUrl\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhsc journal value at: 84\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nFork the newer page\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 83\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 84\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 85 \"fork\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\npage journal value at: 86\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nArray(Object)>>errorSubscriptBounds:\nArray(Object)>>at:\nUndefinedObject>>DoIt\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">GtPharoSnippetCoder</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">GtPharoSourceCoder subclass: #GtPharoSnippetCoder\n\tinstanceVariableNames: 'xdocFilename behavior'\n\tclassVariableNames: ''\n\tpackage: 'GToolkit-Pharo-Coder-Method-Coder'</code>\n    </span>\n(GtPharoSourceCoder)>>primitiveEvaluate:inContext:onFailDo:\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<a href=\"http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\">http://hsc.fed.wiki/assets/scripts/import-foreign-json.html</a>\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n    {\n      \"type\": \"frame\",\n      \"id\": \"d28867297e3b4f1f\",\n      \"text\": \"http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\\nHEIGHT 240\"\n    },\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\naZnUrl := 'http://hsc.fed.wiki/assets/scripts/import-foreign-json.html' asUrl \"a ZnUrl\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">ZnUrl</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">Object subclass: #ZnUrl\n\tinstanceVariableNames: 'scheme host port segments query fragment username password'\n\tclassVariableNames: ''\n\tpackage: 'Zinc-Resource-Meta-Core'</code>\n    </span>\n  </p>\n</div>\n<div class=\"snippet textual-snippet code-snippet pharo-snippet fullWidth\">\n  <pre class=\"no_bottom_margin\">\nhtml := ZnEasy get: 'http://hsc.fed.wiki/assets/scripts/import-foreign-json.html' \"a ZnResponse\"\n  </pre>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\n<code class=\"annotation annotation-label annotation-label-class annotation-label-code expandable-annotation-label annotation-sibling-is-collapsed\">ZnResponse</code>    <span class=\"textual-snippet code-snippet pharo-class-definition expandable-annotation-view collapsed-annotation-view\">\n<code class=\"\">ZnMessage subclass: #ZnResponse\n\tinstanceVariableNames: 'statusLine'\n\tclassVariableNames: ''\n\tpackage: 'Zinc-HTTP-Core'</code>\n    </span>\n  </p>\n</div>\n<div class=\"snippet textual-snippet text-snippet paragraphWidth\">\n  <p>\nThis JavaScript code appears to be part of a web page, written in ECMAScript module format (<code>type=\"module\"</code>). Let's break down the code step by step:\n\n1. <b>Module Imports</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nimport * as frame from 'http://code.fed.wiki/assets/v1/frame.js'\n   import {Graph} from 'http://hsc.fed.wiki/assets/home/graph.js'\n   import {dotify} from 'http://hsc.fed.wiki/assets/home/dotify.js'\n   import {drop} from 'http://hsc.fed.wiki/assets/home/drop.js'\n        </code>\n      </pre>\n    </div>\n   These lines import modules from external sources. It seems like this code relies on external libraries for functionality. The modules <code>frame</code>, <code>Graph</code>, <code>dotify</code>, and <code>drop</code> are being imported.\n\n2. <b>Global Functions</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.over = function (event) {\n     event.preventDefault()\n   }\n        </code>\n      </pre>\n    </div>\n   This defines a global function <code>over</code> which takes an <code>event</code> as an argument. It prevents the default behavior of the event (e.g., preventing the browser from performing its default action when dragging something).\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.drop = async function (event) {\n     event.preventDefault();\n     const want = files(event).filter(file =>\n       file.name.endsWith('.json') &amp;&amp;\n       file.type === 'application/json')\n     input.value = await want[0].text()\n   }\n        </code>\n      </pre>\n    </div>\n   This defines a global asynchronous function <code>drop</code> which also takes an <code>event</code> as an argument. It prevents the default behavior of the event, then it retrieves a list of files from the event using the <code>files</code> function. It filters the files to only include those with a <code>.json</code> extension and of type <code>'application/json'</code>. Finally, it sets the value of an HTML element with the ID <code>input</code> to the text content of the first file.\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nfunction files(event) {\n     if (event.dataTransfer.items) {\n       return [...event.dataTransfer.items]\n         .filter(item => item.kind === 'file')\n         .map(item => item.getAsFile())\n     } else {\n       return [...event.dataTransfer.files]\n     }\n   }\n        </code>\n      </pre>\n    </div>\n   This is a helper function <code>files</code> which takes an <code>event</code> as an argument. It checks if the event has <code>dataTransfer.items</code>. If so, it converts the items to an array, filters them to only include files, and then maps them to their corresponding <code>File</code> objects. If <code>dataTransfer.items</code> is not available, it converts <code>event.dataTransfer.files</code> to an array.\n\n3. <b>Global Async Functions</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.dopreview = async event => {\n     trouble.innerText = ''\n     const graph = await convert()\n     const title = \"Imported Graph\"\n     const story = [\n       {type:'code',text:JSON.stringify(graph.tally())},\n       {type:'graphviz',text:dotify({graph,merged:{nids:[]}})}\n     ]\n     frame.open({title,story},event.shiftKey)\n   }\n        </code>\n      </pre>\n    </div>\n   This defines an asynchronous function <code>dopreview</code> which takes an <code>event</code> as an argument. It first sets the <code>innerText</code> of an HTML element with the ID <code>trouble</code> to an empty string. It then awaits the result of the <code>convert</code> function and assigns it to the variable <code>graph</code>. Next, it creates a <code>title</code> variable with the value \"Imported Graph\". It then creates an array called <code>story</code> containing two objects, each with a <code>type</code> and <code>text</code> property. Finally, it calls the <code>open</code> function from the <code>frame</code> module with an object containing <code>title</code>, <code>story</code>, and a boolean indicating if the shift key is pressed.\n\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nwindow.dodownload = async event => {\n     trouble.innerText = ''\n     const graph = await convert()\n     const name = graph.nodes[0].props.name || 'imported'\n     frame.download(graph.stringify(null,2),`${name}.graph.json`,'application/json')\n   }\n        </code>\n      </pre>\n    </div>\n   This defines another asynchronous function <code>dodownload</code> which also takes an <code>event</code> as an argument. It performs similar steps to <code>dopreview</code>, but instead of calling <code>frame.open</code>, it calls <code>frame.download</code>. It generates a file name based on the name of the first node in the <code>graph</code> or defaults to <code>'imported'</code>.\n\n4. <b>Async Function <code>convert</code></b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\nasync function convert () {\n     // ...\n   }\n        </code>\n      </pre>\n    </div>\n   This is an asynchronous function named <code>convert</code>. It appears to be the core function of this script. It performs several operations to handle JSON data and interact with a <code>Graph</code> object.\n\n5. <b>Inside the <code>convert</code> Function</b>:\n   - It creates a new <code>Graph</code> object.\n   - It obtains a context from the <code>frame</code> module.\n   - It retrieves and concatenates code from the <code>context.page.story</code> which has <code>type</code> set to <code>'code'</code>.\n   - It wraps the concatenated code in an export statement and assigns it to the variable <code>wrap</code>.\n   - It tries to import this dynamically generated JavaScript module using a base64-encoded URI.\n   - If the module is successfully imported, it processes JSON data and invokes the <code>convert</code> function from the module.\n\n6. <b>Error Handling</b>:\n       <div class=\"code_block\">\n      <pre>\n        <code class=\"smalltalk\">\ntry {\n     // ...\n   } catch (e) {\n     console.log('trouble',e)\n     trouble.innerHTML = `&lt;p>${e.name}: ${e.message}&lt;/p>`\n   }\n        </code>\n      </pre>\n    </div>\n   This code handles potential errors that may occur during the execution of the <code>try</code> block. If an error occurs, it logs a message to the console and sets the inner HTML of an element with the ID <code>trouble</code> to display information about the error.\n\nOverall, this script appears to be designed to handle drag-and-drop events for JSON files, convert the JSON data using dynamically generated code, and interact with a <code>Graph</code> object and a UI element with the ID <code>input</code>. It also provides functions for previewing and downloading the processed data.\n  </p>\n</div>\n      <div class=\"footer\">\n        <p>Want to go back to the <a href=\"/\">list of posts</a>?</p>\n      </div>\n    </div>\n  </body>\n</html>"
      },
      "date": 1698925354056
    },
    {
      "id": "84f1c6b9af74cb6e",
      "type": "move",
      "order": [
        "b1d941c1d1b7928d",
        "eb355ea7cd7bcbb7",
        "2fb9c84226fddbcc",
        "8a42d8fb26d772f5",
        "657edabd86b6b7e9",
        "712dc7b021dc15a8",
        "f18206bdc6e4a882",
        "f8eec8ac1fa537b8",
        "4df01f5790325abf",
        "ac5dfa080b934384",
        "68854d81da5f935c",
        "84f1c6b9af74cb6e"
      ],
      "date": 1698925369953
    },
    {
      "type": "remove",
      "id": "f8eec8ac1fa537b8",
      "date": 1698925427217
    },
    {
      "type": "edit",
      "id": "657edabd86b6b7e9",
      "item": {
        "type": "paragraph",
        "id": "657edabd86b6b7e9",
        "text": "⇒ [[Narrative Generation]] ⇒ [[BioSmalltalk]]"
      },
      "date": 1698925432983
    },
    {
      "type": "fork",
      "date": 1698925524079
    },
    {
      "item": {
        "type": "factory",
        "id": "cb966916a566dd3e"
      },
      "id": "cb966916a566dd3e",
      "type": "add",
      "after": "84f1c6b9af74cb6e",
      "date": 1698937010431
    },
    {
      "type": "edit",
      "id": "cb966916a566dd3e",
      "item": {
        "type": "paragraph",
        "id": "cb966916a566dd3e",
        "text": "⇒ [[a ZnResponse]]"
      },
      "date": 1698937070852
    },
    {
      "type": "fork",
      "date": 1698937210413
    },
    {
      "item": {
        "type": "factory",
        "id": "eeb7811348548bdb"
      },
      "id": "eeb7811348548bdb",
      "type": "add",
      "after": "cb966916a566dd3e",
      "date": 1698944159762
    },
    {
      "type": "edit",
      "id": "eeb7811348548bdb",
      "item": {
        "type": "pagefold",
        "id": "eeb7811348548bdb",
        "text": "~"
      },
      "date": 1698944163606
    },
    {
      "item": {
        "type": "factory",
        "id": "90812fb4b4b64391"
      },
      "id": "90812fb4b4b64391",
      "type": "add",
      "after": "eeb7811348548bdb",
      "date": 1698944172172
    },
    {
      "type": "edit",
      "id": "90812fb4b4b64391",
      "item": {
        "type": "paragraph",
        "id": "90812fb4b4b64391",
        "text": "Ward via [matrix]\nAt New Relic I built a graph database called El Dorado that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The Hypertext Super Collaborator captured many of these ideas in a single web app but never attracted the online collaboration promised by building on Croquet.\n\nRecently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: http://search.dojo.fed.wiki/solo-super-collaborator.html"
      },
      "date": 1698944181994
    },
    {
      "type": "edit",
      "id": "90812fb4b4b64391",
      "item": {
        "type": "paragraph",
        "id": "90812fb4b4b64391",
        "text": "Ward via [Ward\nAt New Relic I built a graph database called El Dorado that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The Hypertext Super Collaborator captured many of these ideas in a single web app but never attracted the online collaboration promised by building on Croquet.\n\nRecently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: http://search.dojo.fed.wiki/solo-super-collaborator.html matrix]\nAt New Relic I built a graph database called El Dorado that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The Hypertext Super Collaborator captured many of these ideas in a single web app but never attracted the online collaboration promised by building on Croquet.\n\nRecently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: http://search.dojo.fed.wiki/solo-super-collaborator.html"
      },
      "date": 1698944194256
    },
    {
      "type": "remove",
      "id": "90812fb4b4b64391",
      "date": 1698944215064
    },
    {
      "item": {
        "type": "factory",
        "id": "a6d1890946cdc24b"
      },
      "id": "a6d1890946cdc24b",
      "type": "add",
      "after": "eeb7811348548bdb",
      "date": 1698944218332
    },
    {
      "type": "edit",
      "id": "a6d1890946cdc24b",
      "item": {
        "type": "paragraph",
        "id": "a6d1890946cdc24b",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1698941645329vuJQZ:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1698944227438
    },
    {
      "item": {
        "type": "factory",
        "id": "bb9ef85147f3f229"
      },
      "id": "bb9ef85147f3f229",
      "type": "add",
      "after": "a6d1890946cdc24b",
      "date": 1698944232959
    },
    {
      "type": "edit",
      "id": "bb9ef85147f3f229",
      "item": {
        "type": "paragraph",
        "id": "bb9ef85147f3f229",
        "text": "At New Relic I built a graph database called El Dorado that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The Hypertext Super Collaborator captured many of these ideas in a single web app but never attracted the online collaboration promised by building on Croquet.\n\nRecently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: http://search.dojo.fed.wiki/solo-super-collaborator.html"
      },
      "date": 1698944234490
    },
    {
      "type": "edit",
      "id": "bb9ef85147f3f229",
      "item": {
        "type": "paragraph",
        "id": "bb9ef85147f3f229",
        "text": "At New Relic I built a graph database called [[El Dorado]] that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The Hypertext Super Collaborator captured many of these ideas in a single web app but never attracted the online collaboration promised by building on Croquet.\n\nRecently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: http://search.dojo.fed.wiki/solo-super-collaborator.html"
      },
      "date": 1698944248751
    },
    {
      "item": {
        "type": "factory",
        "id": "f80ba7e544c03575"
      },
      "id": "f80ba7e544c03575",
      "type": "add",
      "after": "bb9ef85147f3f229",
      "date": 1698944254314
    },
    {
      "type": "edit",
      "id": "f80ba7e544c03575",
      "item": {
        "type": "reference",
        "id": "f80ba7e544c03575",
        "site": "search.dojo.fed.wiki",
        "slug": "solo-super-collaborator",
        "title": "Solo Super Collaborator",
        "text": "The Super Collaborator explored online collaboration based on Croquet. We've stepped back from this interaction but think its graph merging mechanism will be useful for relating \"read me\" level documentation across many repos."
      },
      "date": 1698944257968
    },
    {
      "type": "edit",
      "id": "bb9ef85147f3f229",
      "item": {
        "type": "paragraph",
        "id": "bb9ef85147f3f229",
        "text": "At New Relic I built a graph database called [[El Dorado]] that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The Hypertext Super Collaborator captured many of these ideas in a single web app but never attracted the online collaboration promised by building on Croquet.\n\nRecently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: [http://search.dojo.fed.wiki/solo-super-collaborator.html page]"
      },
      "date": 1698944356038
    },
    {
      "type": "edit",
      "id": "bb9ef85147f3f229",
      "item": {
        "type": "paragraph",
        "id": "bb9ef85147f3f229",
        "text": "At [[New Relic]] I built a graph database called [[El Dorado]] that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The Hypertext Super Collaborator captured many of these ideas in a single web app but never attracted the online collaboration promised by building on Croquet.\n\nRecently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: [http://search.dojo.fed.wiki/solo-super-collaborator.html page]"
      },
      "date": 1698945403851
    },
    {
      "type": "edit",
      "id": "bb9ef85147f3f229",
      "item": {
        "type": "paragraph",
        "id": "bb9ef85147f3f229",
        "text": "At [[New Relic]] I built a graph database called [[El Dorado]] that aggregated info extracted from hundreds of systems. With that came a methodology for querying out interesting parts and rendering that in clickable graphviz. As we've chipped away at reinventing El Dorado here in wiki we have discovered merging small graphs worked much better than querying a small graph out of a huge one. The [[Hypertext Super Collaborator]] captured many of these ideas in a single web app but never attracted the online collaboration promised by building on [[Croquet]]."
      },
      "date": 1698945458205
    },
    {
      "type": "add",
      "id": "4741832414eb9aba",
      "item": {
        "type": "paragraph",
        "id": "4741832414eb9aba",
        "text": "Recently I have been moving some of our Javascript graph abstractions to Ruby which works well as GitHub actions. The idea here is to automatically extract small graphs from source code repos and then assemble them as needed to understand large systems with a \"solo\"  version of the super collaborator. I've been moving code and have gotten a version just complete enough for a self-guided demo. Check it out: [http://search.dojo.fed.wiki/solo-super-collaborator.html page]"
      },
      "after": "bb9ef85147f3f229",
      "date": 1698945459395
    },
    {
      "item": {
        "type": "factory",
        "id": "09d4e3b57773eae7"
      },
      "id": "09d4e3b57773eae7",
      "type": "add",
      "after": "f80ba7e544c03575",
      "date": 1698948386732
    },
    {
      "type": "edit",
      "id": "09d4e3b57773eae7",
      "item": {
        "type": "reference",
        "id": "09d4e3b57773eae7",
        "site": "search.dojo.fed.wiki",
        "slug": "search-services",
        "title": "Search Services",
        "text": "We consider the various responsibilities we have given to various files and scripts that work together but often for different purposes."
      },
      "date": 1698948391094
    }
  ]
}