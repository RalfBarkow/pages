{
  "title": "Encapsulation",
  "story": [
    {
      "type": "markdown",
      "id": "acea1192301c6c07",
      "text": "Bracha and Ungar motivated the encapsulation property of mirrors via a hypothetical class browser tool, noting that the Java core reflection APIs bring an unwanted restriction: reflecting only the host VM, not a remote instance. \n"
    },
    {
      "type": "markdown",
      "id": "906248b26a9a504d",
      "text": "This is a failure of encapsulation, not because it doesn’t hide the VM’s internals (it does!), but on criteria of plurality: clients may reflect only on one specific machine’s state (the host machine’s); they are provided with only a single, fixed view; and only one implementation of the interface may be present in any one program. \n"
    },
    {
      "type": "markdown",
      "id": "ef3200fbb2cffc7f",
      "text": "Different mirrors offering distinct meta-level views are often desirable, as alluded to by Bracha’s and Ungar’s mention of “a functional decomposition rather than. . . leaving that decision to the implementation of the objects themselves”. \n"
    },
    {
      "type": "markdown",
      "id": "41113d94ca3b1f59",
      "text": "Coexistence of different implementations of the same abstraction is a key property of object-oriented encapsulation, as noted by Cook (2009) and Aldrich (2013). \n"
    },
    {
      "type": "markdown",
      "id": "3845f447ee11c672",
      "text": "We can also see it as a hallmark of postmodernism in software – an instance of a concern for “many little stories”, in opposition to a unique grand modernist narrative."
    },
    {
      "type": "paragraph",
      "id": "d12ed694fcd45b97",
      "text": "⇒ [[Doppelgänger]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Encapsulation",
        "story": []
      },
      "date": 1635928759675
    },
    {
      "item": {
        "type": "factory",
        "id": "acea1192301c6c07"
      },
      "id": "acea1192301c6c07",
      "type": "add",
      "date": 1635928761003
    },
    {
      "type": "edit",
      "id": "acea1192301c6c07",
      "item": {
        "type": "markdown",
        "id": "acea1192301c6c07",
        "text": "Bracha and Ungar motivated the encapsulation property of mirrors via a hypotheti- cal class browser tool, noting that the Java core reflection APIs bring an unwanted restriction: reflecting only the host VM, not a remote instance. This is a failure of encapsulation, not because it doesn’t hide the VM’s internals (it does!), but on criteria of plurality: clients may reflect only on one specific machine’s state (the host machine’s); they are provided with only a single, fixed view; and only one implementation of the interface may be present in any one program. Different mirrors offering distinct meta-level views are often desirable, as alluded to by Bracha’s and Ungar’s mention of “a functional decomposition rather than. . . leaving that decision to the implementation of the objects themselves”. Coexistence of different implementations of the same abstraction is a key property of object- oriented encapsulation, as noted by Cook (2009) and Aldrich (2013). We can also see it as a hallmark of postmodernism in software—an instance of a concern for “many little stories”, in opposition to a unique grand modernist narrative."
      },
      "date": 1635928768423
    },
    {
      "type": "edit",
      "id": "acea1192301c6c07",
      "item": {
        "type": "markdown",
        "id": "acea1192301c6c07",
        "text": "Bracha and Ungar motivated the encapsulation property of mirrors via a hypothetical class browser tool, noting that the Java core reflection APIs bring an unwanted restriction: reflecting only the host VM, not a remote instance. This is a failure of encapsulation, not because it doesn’t hide the VM’s internals (it does!), but on criteria of plurality: clients may reflect only on one specific machine’s state (the host machine’s); they are provided with only a single, fixed view; and only one implementation of the interface may be present in any one program. Different mirrors offering distinct meta-level views are often desirable, as alluded to by Bracha’s and Ungar’s mention of “a functional decomposition rather than. . . leaving that decision to the implementation of the objects themselves”. Coexistence of different implementations of the same abstraction is a key property of object- oriented encapsulation, as noted by Cook (2009) and Aldrich (2013). We can also see it as a hallmark of postmodernism in software—an instance of a concern for “many little stories”, in opposition to a unique grand modernist narrative."
      },
      "date": 1635928787268
    },
    {
      "type": "edit",
      "id": "acea1192301c6c07",
      "item": {
        "type": "markdown",
        "id": "acea1192301c6c07",
        "text": "Bracha and Ungar motivated the encapsulation property of mirrors via a hypothetical class browser tool, noting that the Java core reflection APIs bring an unwanted restriction: reflecting only the host VM, not a remote instance. \n"
      },
      "date": 1673530000487
    },
    {
      "type": "add",
      "id": "906248b26a9a504d",
      "item": {
        "type": "markdown",
        "id": "906248b26a9a504d",
        "text": "This is a failure of encapsulation, not because it doesn’t hide the VM’s internals (it does!), but on criteria of plurality: clients may reflect only on one specific machine’s state (the host machine’s); they are provided with only a single, fixed view; and only one implementation of the interface may be present in any one program. Different mirrors offering distinct meta-level views are often desirable, as alluded to by Bracha’s and Ungar’s mention of “a functional decomposition rather than. . . leaving that decision to the implementation of the objects themselves”. Coexistence of different implementations of the same abstraction is a key property of object- oriented encapsulation, as noted by Cook (2009) and Aldrich (2013). We can also see it as a hallmark of postmodernism in software—an instance of a concern for “many little stories”, in opposition to a unique grand modernist narrative."
      },
      "after": "acea1192301c6c07",
      "date": 1673530001550
    },
    {
      "type": "edit",
      "id": "906248b26a9a504d",
      "item": {
        "type": "markdown",
        "id": "906248b26a9a504d",
        "text": "This is a failure of encapsulation, not because it doesn’t hide the VM’s internals (it does!), but on criteria of plurality: clients may reflect only on one specific machine’s state (the host machine’s); they are provided with only a single, fixed view; and only one implementation of the interface may be present in any one program. \n"
      },
      "date": 1673530030316
    },
    {
      "type": "add",
      "id": "ef3200fbb2cffc7f",
      "item": {
        "type": "markdown",
        "id": "ef3200fbb2cffc7f",
        "text": "Different mirrors offering distinct meta-level views are often desirable, as alluded to by Bracha’s and Ungar’s mention of “a functional decomposition rather than. . . leaving that decision to the implementation of the objects themselves”. Coexistence of different implementations of the same abstraction is a key property of object- oriented encapsulation, as noted by Cook (2009) and Aldrich (2013). We can also see it as a hallmark of postmodernism in software—an instance of a concern for “many little stories”, in opposition to a unique grand modernist narrative."
      },
      "after": "906248b26a9a504d",
      "date": 1673530031373
    },
    {
      "type": "edit",
      "id": "ef3200fbb2cffc7f",
      "item": {
        "type": "markdown",
        "id": "ef3200fbb2cffc7f",
        "text": "Different mirrors offering distinct meta-level views are often desirable, as alluded to by Bracha’s and Ungar’s mention of “a functional decomposition rather than. . . leaving that decision to the implementation of the objects themselves”. \n"
      },
      "date": 1673530079421
    },
    {
      "type": "add",
      "id": "41113d94ca3b1f59",
      "item": {
        "type": "markdown",
        "id": "41113d94ca3b1f59",
        "text": "Coexistence of different implementations of the same abstraction is a key property of object- oriented encapsulation, as noted by Cook (2009) and Aldrich (2013). We can also see it as a hallmark of postmodernism in software—an instance of a concern for “many little stories”, in opposition to a unique grand modernist narrative."
      },
      "after": "ef3200fbb2cffc7f",
      "date": 1673530081250
    },
    {
      "type": "edit",
      "id": "41113d94ca3b1f59",
      "item": {
        "type": "markdown",
        "id": "41113d94ca3b1f59",
        "text": "Coexistence of different implementations of the same abstraction is a key property of object- oriented encapsulation, as noted by Cook (2009) and Aldrich (2013). \n"
      },
      "date": 1673530096933
    },
    {
      "type": "add",
      "id": "3845f447ee11c672",
      "item": {
        "type": "markdown",
        "id": "3845f447ee11c672",
        "text": "We can also see it as a hallmark of postmodernism in software – an instance of a concern for “many little stories”, in opposition to a unique grand modernist narrative."
      },
      "after": "41113d94ca3b1f59",
      "date": 1673530101610
    },
    {
      "item": {
        "type": "factory",
        "id": "d12ed694fcd45b97"
      },
      "id": "d12ed694fcd45b97",
      "type": "add",
      "after": "3845f447ee11c672",
      "date": 1673530103414
    },
    {
      "type": "edit",
      "id": "d12ed694fcd45b97",
      "item": {
        "type": "paragraph",
        "id": "d12ed694fcd45b97",
        "text": "⇒ [[Doppelgänger]"
      },
      "date": 1673530115324
    },
    {
      "type": "edit",
      "id": "d12ed694fcd45b97",
      "item": {
        "type": "paragraph",
        "id": "d12ed694fcd45b97",
        "text": "⇒ [[Doppelgänger]]"
      },
      "date": 1673530118364
    },
    {
      "type": "edit",
      "id": "41113d94ca3b1f59",
      "item": {
        "type": "markdown",
        "id": "41113d94ca3b1f59",
        "text": "Coexistence of different implementations of the same abstraction is a key property of object-oriented encapsulation, as noted by Cook (2009) and Aldrich (2013). \n"
      },
      "date": 1673540927386
    }
  ]
}