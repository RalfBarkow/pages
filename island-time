{
  "title": "Island Time",
  "story": [
    {
      "type": "paragraph",
      "id": "7aa9e990373d0b3d",
      "text": "System Overview - [[Croquet]] Consortium. [https://web.archive.org/web/20120426052149/https://projects.fslab.de/svn/CroquetBag/trunk/zusatzMaterial/webpages/System%20Overview%20-%20Croquet%20Consortium.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "63cc00110ff838e0",
      "text": "When a message is executed, the time remains atomic in that it does not advance during the execution of this message. The “now” of the message stays the same. When we generate a future message during the current message, we always define its execution time in terms of the current “now” plus an offset value. This offset must always be greater than zero (though in fact zero is an acceptable value in certain circumstances, it should almost always be avoided because if it is infinitely iterated, Croquet can’t advance and the system will appear to freeze.) If we generate multiple future messages, they will have an identical “now”, though they may have different offsets. If we generate two messages at the same “now” and with an identical temporal offset value, an additional message number is used to ensure deterministic ordering of the messages."
    },
    {
      "type": "paragraph",
      "id": "f8e1904d1e4927cc",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "ae16fe0d550a76cc",
      "text": "Internal future messages are implicitly replicated; they involve messages generated and processed within each Island replica, so they involve no network traffic. This means that an Island’s computations are, and must be, deterministically equivalent on all replicas. As an example, any given external message received and executed inside of a group of replicated Islands must in turn generate exactly the same internal future messages that are in turn placed into the Islands’ message queues. The resulting states of the replicated Islands after receipt of the external message must be identical, including the contents of the message queues. External future messages are explicitly replicated. Of course external messages are generated outside of the scope of an Island, typically by one of the users of the system. The replication of external messages is handled by an object called a Router, which in addition specifies when the message will be executed. The Router is more fully described below."
    },
    {
      "type": "markdown",
      "id": "416287049eb59219",
      "text": "# The Future of Croquet Objects \n"
    },
    {
      "type": "markdown",
      "id": "9ac87fee0141caef",
      "text": "The real work of Croquet is actually performed by the objects that are inside of the Islands. These are the objects that know how to display themselves, respond to external user events, and perform time-based simulations. They can be 3D objects that get rendered using OpenGL, or 2D objects that lie flat on the screen, or even zero-D objects that have no visual representation at all, but can perform complex computations. In fact, there are really no special “Croquet” objects. **The real distinction is that objects inside of Islands can send and receive [[Future Message]]s.** These are virtually any message that an object understands, but sent into the future to be executed at an explicit later time. The syntax is basically the same as sending a normal message to an object, except we need to specify how far into the future the message will be executed."
    },
    {
      "type": "paragraph",
      "id": "fb448dca98060518",
      "text": "⇒ [[Time Travel Project]]"
    },
    {
      "type": "graphviz",
      "id": "b7c0ccb4de13ec92",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Island Time",
        "story": []
      },
      "date": 1654185518479
    },
    {
      "id": "7aa9e990373d0b3d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7aa9e990373d0b3d",
        "text": "System Overview - [[Croquet]] Consortium. [https://web.archive.org/web/20120426052149/https://projects.fslab.de/svn/CroquetBag/trunk/zusatzMaterial/webpages/System%20Overview%20-%20Croquet%20Consortium.pdf pdf]"
      },
      "date": 1654185525701
    },
    {
      "item": {
        "type": "factory",
        "id": "63cc00110ff838e0"
      },
      "id": "63cc00110ff838e0",
      "type": "add",
      "after": "7aa9e990373d0b3d",
      "date": 1654185548140
    },
    {
      "type": "edit",
      "id": "63cc00110ff838e0",
      "item": {
        "type": "paragraph",
        "id": "63cc00110ff838e0",
        "text": "When a message is executed, the time remains atomic in that it does not advance during the execution of this message. The “now” of the message stays the same. When we generate a future message during the current message, we always define its execution time in terms of the current “now” plus an offset value. This offset must always be greater than zero (though in fact zero is an acceptable value in certain circumstances, it should almost always be avoided because if it is infinitely iterated, Croquet can’t advance and the system will appear to freeze.) If we generate multiple future messages, they will have an identical “now”, though they may have different offsets. If we generate two messages at the same “now” and with an identical temporal offset value, an additional message number is used to ensure deterministic ordering of the messages."
      },
      "date": 1654185549319
    },
    {
      "item": {
        "type": "factory",
        "id": "f8e1904d1e4927cc"
      },
      "id": "f8e1904d1e4927cc",
      "type": "add",
      "after": "63cc00110ff838e0",
      "date": 1654185688099
    },
    {
      "type": "edit",
      "id": "f8e1904d1e4927cc",
      "item": {
        "type": "paragraph",
        "id": "f8e1904d1e4927cc",
        "text": "[…]"
      },
      "date": 1654185691257
    },
    {
      "item": {
        "type": "factory",
        "id": "ae16fe0d550a76cc"
      },
      "id": "ae16fe0d550a76cc",
      "type": "add",
      "after": "f8e1904d1e4927cc",
      "date": 1654185705589
    },
    {
      "type": "edit",
      "id": "ae16fe0d550a76cc",
      "item": {
        "type": "paragraph",
        "id": "ae16fe0d550a76cc",
        "text": "Internal future messages are implicitly replicated; they involve messages generated and processed within each Island replica, so they involve no network traffic. This means that an Island’s computations are, and must be,"
      },
      "date": 1654185707493
    },
    {
      "type": "edit",
      "id": "ae16fe0d550a76cc",
      "item": {
        "type": "paragraph",
        "id": "ae16fe0d550a76cc",
        "text": "Internal future messages are implicitly replicated; they involve messages generated and processed within each Island replica, so they involve no network traffic. This means that an Island’s computations are, and must be, deterministically equivalent on all replicas. As an example, any given external message received and executed inside of a group of replicated Islands must in turn generate exactly the same internal future messages that are in turn placed into the Islands’ message queues. The resulting states of the replicated Islands after receipt of the external message must be identical, including the contents of the message queues. External future messages are explicitly replicated. Of course external messages are generated outside of the scope of an Island, typically by one of the users of the system. The replication of external messages is handled by an object called a Router, which in addition specifies when the message will be executed. The Router is more fully described below."
      },
      "date": 1654185725750
    },
    {
      "item": {
        "type": "factory",
        "id": "416287049eb59219"
      },
      "id": "416287049eb59219",
      "type": "add",
      "after": "ae16fe0d550a76cc",
      "date": 1654185816426
    },
    {
      "type": "edit",
      "id": "416287049eb59219",
      "item": {
        "type": "markdown",
        "id": "416287049eb59219",
        "text": "# The Future of Croquet Objects The real work of Croquet is actually performed by the objects that are inside of the Islands. These are the objects that know how to display themselves, respond to external user events, and perform time-based simulations. They can be 3D objects that get rendered using OpenGL, or 2D objects that lie flat on the screen, or even zero-D objects that have no visual representation at all, but can perform complex computations. In fact, there are really no special “Croquet” objects. The real distinction is that objects inside of Islands can send and receive future messages. These are virtually any message that an object understands, but sent into the future to be executed at an explicit later time. The syntax is basically the same as sending a normal message to an object, except we need to specify how far into the future the message will be executed."
      },
      "date": 1654185821211
    },
    {
      "type": "edit",
      "id": "416287049eb59219",
      "item": {
        "type": "markdown",
        "id": "416287049eb59219",
        "text": "# The Future of Croquet Objects \n"
      },
      "date": 1654185825940
    },
    {
      "type": "add",
      "id": "9ac87fee0141caef",
      "item": {
        "type": "markdown",
        "id": "9ac87fee0141caef",
        "text": "The real work of Croquet is actually performed by the objects that are inside of the Islands. These are the objects that know how to display themselves, respond to external user events, and perform time-based simulations. They can be 3D objects that get rendered using OpenGL, or 2D objects that lie flat on the screen, or even zero-D objects that have no visual representation at all, but can perform complex computations. In fact, there are really no special “Croquet” objects. The real distinction is that objects inside of Islands can send and receive future messages. These are virtually any message that an object understands, but sent into the future to be executed at an explicit later time. The syntax is basically the same as sending a normal message to an object, except we need to specify how far into the future the message will be executed."
      },
      "after": "416287049eb59219",
      "date": 1654185827340
    },
    {
      "type": "edit",
      "id": "9ac87fee0141caef",
      "item": {
        "type": "markdown",
        "id": "9ac87fee0141caef",
        "text": "The real work of Croquet is actually performed by the objects that are inside of the Islands. These are the objects that know how to display themselves, respond to external user events, and perform time-based simulations. They can be 3D objects that get rendered using OpenGL, or 2D objects that lie flat on the screen, or even zero-D objects that have no visual representation at all, but can perform complex computations. In fact, there are really no special “Croquet” objects. **The real distinction is that objects inside of Islands can send and receive [[Future Messages]].** These are virtually any message that an object understands, but sent into the future to be executed at an explicit later time. The syntax is basically the same as sending a normal message to an object, except we need to specify how far into the future the message will be executed."
      },
      "date": 1654185892804
    },
    {
      "item": {
        "type": "factory",
        "id": "fb448dca98060518"
      },
      "id": "fb448dca98060518",
      "type": "add",
      "after": "9ac87fee0141caef",
      "date": 1654185939953
    },
    {
      "type": "edit",
      "id": "fb448dca98060518",
      "item": {
        "type": "paragraph",
        "id": "fb448dca98060518",
        "text": "[[Time Travel Project]]"
      },
      "date": 1654185944574
    },
    {
      "type": "edit",
      "id": "fb448dca98060518",
      "item": {
        "type": "paragraph",
        "id": "fb448dca98060518",
        "text": "⇒ [[Time Travel Project]]"
      },
      "date": 1654185955794
    },
    {
      "item": {
        "type": "factory",
        "id": "b7c0ccb4de13ec92"
      },
      "id": "b7c0ccb4de13ec92",
      "type": "add",
      "after": "fb448dca98060518",
      "date": 1654185966474
    },
    {
      "type": "edit",
      "id": "b7c0ccb4de13ec92",
      "item": {
        "type": "graphviz",
        "id": "b7c0ccb4de13ec92",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1654185969866
    },
    {
      "type": "edit",
      "id": "9ac87fee0141caef",
      "item": {
        "type": "markdown",
        "id": "9ac87fee0141caef",
        "text": "The real work of Croquet is actually performed by the objects that are inside of the Islands. These are the objects that know how to display themselves, respond to external user events, and perform time-based simulations. They can be 3D objects that get rendered using OpenGL, or 2D objects that lie flat on the screen, or even zero-D objects that have no visual representation at all, but can perform complex computations. In fact, there are really no special “Croquet” objects. **The real distinction is that objects inside of Islands can send and receive [[Future Message]]s.** These are virtually any message that an object understands, but sent into the future to be executed at an explicit later time. The syntax is basically the same as sending a normal message to an object, except we need to specify how far into the future the message will be executed."
      },
      "date": 1654186019135
    }
  ]
}