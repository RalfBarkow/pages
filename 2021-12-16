{
  "title": "2021-12-16",
  "story": [
    {
      "type": "paragraph",
      "id": "446653f2934a5382",
      "text": "marcpierson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163903563476772wBGfz:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
    },
    {
      "type": "markdown",
      "id": "35bc29caaef25d11",
      "text": "> Ralf, will your plug in have clickable node and link labels that create ghost pages or open existing pages with that slug?"
    },
    {
      "type": "pagefold",
      "id": "7ea02ac0844b6b90",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "55bf958771ec7066",
      "text": "[[Monday]]"
    },
    {
      "type": "paragraph",
      "id": "5461ba8de4cfe791",
      "text": "[[Embrace the Platform]]"
    },
    {
      "type": "video",
      "id": "3ee3341701746b4c",
      "text": "YOUTUBE qvY7R6te7go"
    },
    {
      "type": "markdown",
      "id": "cc7c93a4778952db",
      "text": "http://forum.world.st/New-type-of-web-application-using-HTML-CSS-and-Smalltalk-td5116051.html"
    },
    {
      "type": "markdown",
      "id": "18b9eb00ccf0eaf3",
      "text": "> [â€¦] the minimal image is running on SqueakJS VM. You can find info here: https://squeak.js.org\n\nInteresting question regarding deployment. In my current setup you do need the server, but it is not unrealistic to have a setup in which at some point the client is asked to create a snapshot. The SqueakJS VM does allow this.\n"
    },
    {
      "type": "markdown",
      "id": "a478ca4b404b8bd8",
      "text": "This snapshot could be stored somewhere as a final application. It could even be possible to stop the communicator and remove it (as well as a few\nother classes) from the image before taking the snapshot and kind of sealing the application like that.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "74d80cca62373a33",
      "text": "So it could be a way of creating standalone web applications. If that was the thought behind the question.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "65d5ac80e07b8832",
      "text": "I did use this mechanism of creating snapshots in an attempt to strip down a regular Pharo image and create the small image to run inside the browser.\n\n"
    },
    {
      "type": "markdown",
      "id": "fcd891df9b6b176e",
      "text": "Until I decided that route was longer than doing the bootstrap route of creating an image from scratch ;-).\n\nRegards,\nErik "
    },
    {
      "type": "pagefold",
      "id": "701a955915934277",
      "text": "Developer Productivity"
    },
    {
      "type": "paragraph",
      "id": "08f20161cbed563c",
      "text": "botwhytho via [https://discord.com/channels/729445214812504107/834369757452697641/920915641484070932 discord] DE: Ich denke, es gibt mehrere Dinge, fÃ¼r die Sie Pharo/Gt bei der Arbeit verwenden kÃ¶nnten, sie fallen entweder in die Kategorie \"EntwicklerproduktivitÃ¤t\" oder \"Softwarebewertung\" (es gibt einen ganzen Kanal fÃ¼r dieses Thema in diesem Discord-Server). Sie kÃ¶nnen die Sprachen, die Sie fÃ¼r Ihre FE-EntwicklungsablÃ¤ufe verwenden, derzeit nicht kontrollieren, aber Sie haben vielleicht mehr Freiheit bei der Sprache, die Sie verwenden, um Tools zu erstellen, die vielleicht keine aktuelle Parallele haben, die Ihnen (und eventuell Ihren Teamkollegen) Kopfzerbrechen bereiten."
    },
    {
      "type": "paragraph",
      "id": "a79d4d18e7aff37b",
      "text": "[[Software Assessment]]"
    },
    {
      "type": "markdown",
      "id": "d590110ad1a7ef64",
      "text": "botwhytho via [https://discord.com/channels/729445214812504107/834369757452697641/920918152592900146 discord] \nHere are a few examples:\n- Having more insight into CI tools: yaml is used a lot in most of these tools and sometimes there is so much logic in them that you are 'programming in yaml' ðŸ¤¦ . I've used mondrian to visualize calling graphs across yaml.\n- Software Assessment\n     - Help you answer questions like are we not being DRY, should I centralize/modularize a certain React component, such analysis is even better if done across repos\n     - Should i split this monolith? What would be the best way?\n     - Create custom logic & custom Gt views on top of Moose/Famix that understands, for example route logic in node.js Express web server\n- Build something that competes with Insomnia/Postman for prototyping around REST apis. Being able to navigate/query JSON responses as live objects, as opposed to dead text makes Gt as is already pretty good at working with JSON data. It could be better, but it's better than with text (in my opinion)\n- While developing locally, log heavily and structurally and use Gt to parse logs and potentially build better stories of the internal state of programs that you could do with the native Js tools that ecosystem provides (edit: forgot you can now interact with JS debugger from Gt, haven't tried it myself, but that may be the first thing on your list to try.) \nYou can do a lot of stuff 'around' your existing code with Gt"
    },
    {
      "type": "pagefold",
      "id": "77fc7c00b6e8da61",
      "text": "Title Casing"
    },
    {
      "type": "paragraph",
      "id": "eda63320058f6412",
      "text": "Konrad Hinsen via [https://discord.com/channels/729445214812504107/834369757452697641/920927678222204969 discord]\nNice example. Going for patchworks means accepting more fragile systems in exchange for moving on faster. I hope that one day we will have \"patchwork refactoring tools\" for turning prototype patchworks into more robust systems. And maybe GT will be part of that."
    },
    {
      "type": "pagefold",
      "id": "6d07ce4a71ae999c",
      "text": "SqueakJS"
    },
    {
      "type": "paragraph",
      "id": "1c29e49c3aa42cab",
      "text": "[[Lively SqueakJS Debugger]]"
    },
    {
      "type": "pagefold",
      "id": "d22b46be0019ab1a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "7e588aabf0550795",
      "text": "\nFix typo in syntax explainer [feenkcom/gtoolkit#2288] "
    },
    {
      "type": "markdown",
      "id": "9c997155ebd5aee2",
      "text": "https://github.com/feenkcom/gtoolkit-inspector/commit/3fc417885a935da4632bd097d2d28ee5c1951d89"
    },
    {
      "type": "pagefold",
      "id": "5d1393c02edc1e07",
      "text": "Empiriomonism"
    },
    {
      "type": "paragraph",
      "id": "f0303e569638b0e7",
      "text": "[[Three Gaps]]"
    },
    {
      "type": "paragraph",
      "id": "556f654f548e4e28",
      "text": "Terminology, p. ixâ€“xi"
    },
    {
      "type": "pagefold",
      "id": "e33eb43d5fdf57fe",
      "text": "Emacs"
    },
    {
      "type": "paragraph",
      "id": "1744654dc009a517",
      "text": "[[Tree-edit]]: Structural editing for Java, Python, C, and beyond! [https://emacsconf.org/2021/talks/structural/?utm_source=pocket_mylist talk] [[Ethan Leba]]"
    },
    {
      "type": "paragraph",
      "id": "429b3e6b9b1d273e",
      "text": "Combobulate [https://github.com/mickeynp/combobulate github]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2021-12-16",
        "story": []
      },
      "date": 1639607139221
    },
    {
      "id": "446653f2934a5382",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "446653f2934a5382",
        "text": "marcpierson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163903563476772wBGfz:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
      },
      "date": 1639607142279
    },
    {
      "id": "35bc29caaef25d11",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "35bc29caaef25d11",
        "text": "> Ralf, will your plug in have clickable node and link labels that create ghost pages or open existing pages with that slug?"
      },
      "after": "446653f2934a5382",
      "date": 1639607144770
    },
    {
      "item": {
        "type": "factory",
        "id": "7ea02ac0844b6b90"
      },
      "id": "7ea02ac0844b6b90",
      "type": "add",
      "after": "35bc29caaef25d11",
      "date": 1639656044767
    },
    {
      "type": "edit",
      "id": "7ea02ac0844b6b90",
      "item": {
        "type": "pagefold",
        "id": "7ea02ac0844b6b90",
        "text": "âˆ«"
      },
      "date": 1639656049823
    },
    {
      "type": "edit",
      "id": "7ea02ac0844b6b90",
      "item": {
        "type": "pagefold",
        "id": "7ea02ac0844b6b90",
        "text": "~"
      },
      "date": 1639656057477
    },
    {
      "item": {
        "type": "factory",
        "id": "55bf958771ec7066"
      },
      "id": "55bf958771ec7066",
      "type": "add",
      "after": "7ea02ac0844b6b90",
      "date": 1639656059566
    },
    {
      "type": "edit",
      "id": "55bf958771ec7066",
      "item": {
        "type": "paragraph",
        "id": "55bf958771ec7066",
        "text": "[[Monday]]"
      },
      "date": 1639656064586
    },
    {
      "item": {
        "type": "factory",
        "id": "5461ba8de4cfe791"
      },
      "id": "5461ba8de4cfe791",
      "type": "add",
      "after": "55bf958771ec7066",
      "date": 1639657495784
    },
    {
      "type": "edit",
      "id": "5461ba8de4cfe791",
      "item": {
        "type": "paragraph",
        "id": "5461ba8de4cfe791",
        "text": "[[Embrace the Platform]]"
      },
      "date": 1639657505521
    },
    {
      "item": {
        "type": "factory",
        "id": "3ee3341701746b4c"
      },
      "id": "3ee3341701746b4c",
      "type": "add",
      "after": "5461ba8de4cfe791",
      "date": 1639658463174
    },
    {
      "type": "edit",
      "id": "3ee3341701746b4c",
      "item": {
        "type": "video",
        "id": "3ee3341701746b4c",
        "text": "YOUTUBE qvY7R6te7go"
      },
      "date": 1639658474108
    },
    {
      "item": {
        "type": "factory",
        "id": "cc7c93a4778952db"
      },
      "id": "cc7c93a4778952db",
      "type": "add",
      "after": "3ee3341701746b4c",
      "date": 1639658489651
    },
    {
      "type": "edit",
      "id": "cc7c93a4778952db",
      "item": {
        "type": "paragraph",
        "id": "cc7c93a4778952db",
        "text": "http://forum.world.st/New-type-of-web-application-using-HTML-CSS-and-Smalltalk-td5116051.html"
      },
      "date": 1639658491418
    },
    {
      "type": "edit",
      "id": "cc7c93a4778952db",
      "item": {
        "type": "markdown",
        "id": "cc7c93a4778952db",
        "text": "http://forum.world.st/New-type-of-web-application-using-HTML-CSS-and-Smalltalk-td5116051.html"
      },
      "date": 1639658493349
    },
    {
      "item": {
        "type": "factory",
        "id": "18b9eb00ccf0eaf3"
      },
      "id": "18b9eb00ccf0eaf3",
      "type": "add",
      "after": "cc7c93a4778952db",
      "date": 1639658612658
    },
    {
      "type": "edit",
      "id": "18b9eb00ccf0eaf3",
      "item": {
        "type": "paragraph",
        "id": "18b9eb00ccf0eaf3",
        "text": "> [â€¦] the minimal image is running on SqueakJS VM. You can find info\nhere: https://squeak.js.org\n\nInteresting question regarding deployment. In my current setup you do need\nthe server, but it is not unrealistic to have a setup in which at some point\nthe client is asked to create a snapshot. The SqueakJS VM does allow this.\nThis snapshot could be stored somewhere as a final application. It could\neven be possible to stop the communicator and remove it (as well as a few\nother classes) from the image before taking the snapshot and kind of sealing\nthe application like that.\n\nSo it could be a way of creating standalone web applications. If that was\nthe thought behind the question.\n\nI did use this mechanism of creating snapshots in an attempt to strip down a\nregular Pharo image and create the small image to run inside the browser.\nUntil I decided that route was longer than doing the bootstrap route of\ncreating an image from scratch ;-).\n\nRegards,\nErik "
      },
      "date": 1639658623694
    },
    {
      "type": "edit",
      "id": "18b9eb00ccf0eaf3",
      "item": {
        "type": "markdown",
        "id": "18b9eb00ccf0eaf3",
        "text": "> [â€¦] the minimal image is running on SqueakJS VM. You can find info\nhere: https://squeak.js.org\n\nInteresting question regarding deployment. In my current setup you do need\nthe server, but it is not unrealistic to have a setup in which at some point\nthe client is asked to create a snapshot. The SqueakJS VM does allow this.\nThis snapshot could be stored somewhere as a final application. It could\neven be possible to stop the communicator and remove it (as well as a few\nother classes) from the image before taking the snapshot and kind of sealing\nthe application like that.\n\nSo it could be a way of creating standalone web applications. If that was\nthe thought behind the question.\n\nI did use this mechanism of creating snapshots in an attempt to strip down a\nregular Pharo image and create the small image to run inside the browser.\nUntil I decided that route was longer than doing the bootstrap route of\ncreating an image from scratch ;-).\n\nRegards,\nErik "
      },
      "date": 1639658626002
    },
    {
      "type": "edit",
      "id": "18b9eb00ccf0eaf3",
      "item": {
        "type": "markdown",
        "id": "18b9eb00ccf0eaf3",
        "text": "> [â€¦] the minimal image is running on SqueakJS VM. You can find info\nhere: https://squeak.js.org\n\nInteresting question regarding deployment. In my current setup you do need the server, but it is not unrealistic to have a setup in which at some point\nthe client is asked to create a snapshot. The SqueakJS VM does allow this.\nThis snapshot could be stored somewhere as a final application. It could even be possible to stop the communicator and remove it (as well as a few\nother classes) from the image before taking the snapshot and kind of sealing the application like that.\n\nSo it could be a way of creating standalone web applications. If that was\nthe thought behind the question.\n\nI did use this mechanism of creating snapshots in an attempt to strip down a\nregular Pharo image and create the small image to run inside the browser.\nUntil I decided that route was longer than doing the bootstrap route of\ncreating an image from scratch ;-).\n\nRegards,\nErik "
      },
      "date": 1639658641061
    },
    {
      "type": "edit",
      "id": "18b9eb00ccf0eaf3",
      "item": {
        "type": "markdown",
        "id": "18b9eb00ccf0eaf3",
        "text": "> [â€¦] the minimal image is running on SqueakJS VM. You can find info\nhere: https://squeak.js.org\n\nInteresting question regarding deployment. In my current setup you do need the server, but it is not unrealistic to have a setup in which at some point\nthe client is asked to create a snapshot. The SqueakJS VM does allow this.\n"
      },
      "date": 1639658649492
    },
    {
      "type": "add",
      "id": "a478ca4b404b8bd8",
      "item": {
        "type": "markdown",
        "id": "a478ca4b404b8bd8",
        "text": "This snapshot could be stored somewhere as a final application. It could even be possible to stop the communicator and remove it (as well as a few\nother classes) from the image before taking the snapshot and kind of sealing the application like that.\n\nSo it could be a way of creating standalone web applications. If that was\nthe thought behind the question.\n\nI did use this mechanism of creating snapshots in an attempt to strip down a\nregular Pharo image and create the small image to run inside the browser.\nUntil I decided that route was longer than doing the bootstrap route of\ncreating an image from scratch ;-).\n\nRegards,\nErik "
      },
      "after": "18b9eb00ccf0eaf3",
      "date": 1639658651363
    },
    {
      "type": "edit",
      "id": "18b9eb00ccf0eaf3",
      "item": {
        "type": "markdown",
        "id": "18b9eb00ccf0eaf3",
        "text": "> [â€¦] the minimal image is running on SqueakJS VM. You can find info\nhere: https://squeak.js.org\n\nInteresting question regarding deployment. In my current setup you do need the server, but it is not unrealistic to have a setup in which at some point the client is asked to create a snapshot. The SqueakJS VM does allow this.\n"
      },
      "date": 1639658655859
    },
    {
      "type": "edit",
      "id": "a478ca4b404b8bd8",
      "item": {
        "type": "markdown",
        "id": "a478ca4b404b8bd8",
        "text": "This snapshot could be stored somewhere as a final application. It could even be possible to stop the communicator and remove it (as well as a few\nother classes) from the image before taking the snapshot and kind of sealing the application like that.\n\nSo it could be a way of creating standalone web applications. If that was the thought behind the question.\n\nI did use this mechanism of creating snapshots in an attempt to strip down a\nregular Pharo image and create the small image to run inside the browser.\nUntil I decided that route was longer than doing the bootstrap route of\ncreating an image from scratch ;-).\n\nRegards,\nErik "
      },
      "date": 1639658675112
    },
    {
      "type": "edit",
      "id": "a478ca4b404b8bd8",
      "item": {
        "type": "markdown",
        "id": "a478ca4b404b8bd8",
        "text": "This snapshot could be stored somewhere as a final application. It could even be possible to stop the communicator and remove it (as well as a few\nother classes) from the image before taking the snapshot and kind of sealing the application like that.\n\n\n"
      },
      "date": 1639658680958
    },
    {
      "type": "add",
      "id": "74d80cca62373a33",
      "item": {
        "type": "markdown",
        "id": "74d80cca62373a33",
        "text": "So it could be a way of creating standalone web applications. If that was the thought behind the question.\n\n\n"
      },
      "after": "a478ca4b404b8bd8",
      "date": 1639658683310
    },
    {
      "type": "add",
      "id": "65d5ac80e07b8832",
      "item": {
        "type": "markdown",
        "id": "65d5ac80e07b8832",
        "text": "I did use this mechanism of creating snapshots in an attempt to strip down a regular Pharo image and create the small image to run inside the browser.\n\n"
      },
      "after": "74d80cca62373a33",
      "date": 1639658692104
    },
    {
      "type": "add",
      "id": "fcd891df9b6b176e",
      "item": {
        "type": "markdown",
        "id": "fcd891df9b6b176e",
        "text": "Until I decided that route was longer than doing the bootstrap route of creating an image from scratch ;-).\n\nRegards,\nErik "
      },
      "after": "65d5ac80e07b8832",
      "date": 1639658695065
    },
    {
      "type": "edit",
      "id": "18b9eb00ccf0eaf3",
      "item": {
        "type": "markdown",
        "id": "18b9eb00ccf0eaf3",
        "text": "> [â€¦] the minimal image is running on SqueakJS VM. You can find info here: https://squeak.js.org\n\nInteresting question regarding deployment. In my current setup you do need the server, but it is not unrealistic to have a setup in which at some point the client is asked to create a snapshot. The SqueakJS VM does allow this.\n"
      },
      "date": 1639658717333
    },
    {
      "item": {
        "type": "factory",
        "id": "701a955915934277"
      },
      "id": "701a955915934277",
      "type": "add",
      "after": "fcd891df9b6b176e",
      "date": 1639660224901
    },
    {
      "type": "edit",
      "id": "701a955915934277",
      "item": {
        "type": "pagefold",
        "id": "701a955915934277",
        "text": "developer roductivity"
      },
      "date": 1639660234782
    },
    {
      "type": "edit",
      "id": "701a955915934277",
      "item": {
        "type": "pagefold",
        "id": "701a955915934277",
        "text": "Developer Productivity"
      },
      "date": 1639660244097
    },
    {
      "item": {
        "type": "factory",
        "id": "6d07ce4a71ae999c"
      },
      "id": "6d07ce4a71ae999c",
      "type": "add",
      "after": "701a955915934277",
      "date": 1639660256198
    },
    {
      "type": "edit",
      "id": "6d07ce4a71ae999c",
      "item": {
        "type": "pagefold",
        "id": "6d07ce4a71ae999c",
        "text": "SqueakJS"
      },
      "date": 1639660268045
    },
    {
      "item": {
        "type": "factory",
        "id": "1c29e49c3aa42cab"
      },
      "id": "1c29e49c3aa42cab",
      "type": "add",
      "after": "6d07ce4a71ae999c",
      "date": 1639660299900
    },
    {
      "type": "edit",
      "id": "1c29e49c3aa42cab",
      "item": {
        "type": "paragraph",
        "id": "1c29e49c3aa42cab",
        "text": "[[Lively SqueakJS Debugger]]"
      },
      "date": 1639660309411
    },
    {
      "item": {
        "type": "factory",
        "id": "08f20161cbed563c"
      },
      "id": "08f20161cbed563c",
      "type": "add",
      "after": "1c29e49c3aa42cab",
      "date": 1639660388927
    },
    {
      "type": "edit",
      "id": "08f20161cbed563c",
      "item": {
        "type": "paragraph",
        "id": "08f20161cbed563c",
        "text": "Ich hab's. Ich denke, es gibt mehrere Dinge, fÃ¼r die Sie Pharo/Gt bei der Arbeit verwenden kÃ¶nnten, sie fallen entweder in die Kategorie \"EntwicklerproduktivitÃ¤t\" oder \"Softwarebewertung\" (es gibt einen ganzen Kanal fÃ¼r dieses Thema in diesem Discord-Server). Sie kÃ¶nnen die Sprachen, die Sie fÃ¼r Ihre FE-EntwicklungsablÃ¤ufe verwenden, derzeit nicht kontrollieren, aber Sie haben vielleicht mehr Freiheit bei der Sprache, die Sie verwenden, um Tools zu erstellen, die vielleicht keine aktuelle Parallele haben, die Ihnen (und eventuell Ihren Teamkollegen) Kopfzerbrechen bereiten."
      },
      "date": 1639660392950
    },
    {
      "id": "08f20161cbed563c",
      "type": "move",
      "order": [
        "446653f2934a5382",
        "35bc29caaef25d11",
        "7ea02ac0844b6b90",
        "55bf958771ec7066",
        "5461ba8de4cfe791",
        "3ee3341701746b4c",
        "cc7c93a4778952db",
        "18b9eb00ccf0eaf3",
        "a478ca4b404b8bd8",
        "74d80cca62373a33",
        "65d5ac80e07b8832",
        "fcd891df9b6b176e",
        "701a955915934277",
        "08f20161cbed563c",
        "6d07ce4a71ae999c",
        "1c29e49c3aa42cab"
      ],
      "date": 1639660394834
    },
    {
      "type": "edit",
      "id": "08f20161cbed563c",
      "item": {
        "type": "paragraph",
        "id": "08f20161cbed563c",
        "text": "Ich denke, es gibt mehrere Dinge, fÃ¼r die Sie Pharo/Gt bei der Arbeit verwenden kÃ¶nnten, sie fallen entweder in die Kategorie \"EntwicklerproduktivitÃ¤t\" oder \"Softwarebewertung\" (es gibt einen ganzen Kanal fÃ¼r dieses Thema in diesem Discord-Server). Sie kÃ¶nnen die Sprachen, die Sie fÃ¼r Ihre FE-EntwicklungsablÃ¤ufe verwenden, derzeit nicht kontrollieren, aber Sie haben vielleicht mehr Freiheit bei der Sprache, die Sie verwenden, um Tools zu erstellen, die vielleicht keine aktuelle Parallele haben, die Ihnen (und eventuell Ihren Teamkollegen) Kopfzerbrechen bereiten."
      },
      "date": 1639660401140
    },
    {
      "type": "edit",
      "id": "08f20161cbed563c",
      "item": {
        "type": "paragraph",
        "id": "08f20161cbed563c",
        "text": "botwhytho via [discord] DE: Ich denke, es gibt mehrere Dinge, fÃ¼r die Sie Pharo/Gt bei der Arbeit verwenden kÃ¶nnten, sie fallen entweder in die Kategorie \"EntwicklerproduktivitÃ¤t\" oder \"Softwarebewertung\" (es gibt einen ganzen Kanal fÃ¼r dieses Thema in diesem Discord-Server). Sie kÃ¶nnen die Sprachen, die Sie fÃ¼r Ihre FE-EntwicklungsablÃ¤ufe verwenden, derzeit nicht kontrollieren, aber Sie haben vielleicht mehr Freiheit bei der Sprache, die Sie verwenden, um Tools zu erstellen, die vielleicht keine aktuelle Parallele haben, die Ihnen (und eventuell Ihren Teamkollegen) Kopfzerbrechen bereiten."
      },
      "date": 1639660435338
    },
    {
      "type": "edit",
      "id": "08f20161cbed563c",
      "item": {
        "type": "paragraph",
        "id": "08f20161cbed563c",
        "text": "botwhytho via [https://discord.com/channels/729445214812504107/834369757452697641/920915641484070932 discord] DE: Ich denke, es gibt mehrere Dinge, fÃ¼r die Sie Pharo/Gt bei der Arbeit verwenden kÃ¶nnten, sie fallen entweder in die Kategorie \"EntwicklerproduktivitÃ¤t\" oder \"Softwarebewertung\" (es gibt einen ganzen Kanal fÃ¼r dieses Thema in diesem Discord-Server). Sie kÃ¶nnen die Sprachen, die Sie fÃ¼r Ihre FE-EntwicklungsablÃ¤ufe verwenden, derzeit nicht kontrollieren, aber Sie haben vielleicht mehr Freiheit bei der Sprache, die Sie verwenden, um Tools zu erstellen, die vielleicht keine aktuelle Parallele haben, die Ihnen (und eventuell Ihren Teamkollegen) Kopfzerbrechen bereiten."
      },
      "date": 1639660453730
    },
    {
      "type": "add",
      "id": "a79d4d18e7aff37b",
      "item": {
        "type": "paragraph",
        "id": "a79d4d18e7aff37b",
        "text": "[[Software Assessment]]"
      },
      "after": "08f20161cbed563c",
      "date": 1639661616685
    },
    {
      "type": "add",
      "id": "d590110ad1a7ef64",
      "item": {
        "type": "paragraph",
        "id": "d590110ad1a7ef64",
        "text": "botwhytho â€” heute um 06:59 Uhr\nHere are a few examples:\n- Having more insight into CI tools: yaml is used a lot in most of these tools and sometimes there is so much logic in them that you are 'programming in yaml' ðŸ¤¦ . I've used mondrian to visualize calling graphs across yaml.\n- Software Assessment\n     - Help you answer questions like are we not being DRY, should I centralize/modularize a certain React component, such analysis is even better if done across repos\n     - Should i split this monolith? What would be the best way?\n     - Create custom logic & custom Gt views on top of Moose/Famix that understands, for example route logic in node.js Express web server\n- Build something that competes with Insomnia/Postman for prototyping around REST apis. Being able to navigate/query JSON responses as live objects, as opposed to dead text makes Gt as is already pretty good at working with JSON data. It could be better, but it's better than with text (in my opinion)\n- While developing locally, log heavily and structurally and use Gt to parse logs and potentially build better stories of the internal state of programs that you could do with the native Js tools that ecosystem provides (edit: forgot you can now interact with JS debugger from Gt, haven't tried it myself, but that may be the first thing on your list to try.) \nYou can do a lot of stuff 'around' your existing code with Gt"
      },
      "after": "a79d4d18e7aff37b",
      "date": 1639661663006
    },
    {
      "type": "edit",
      "id": "d590110ad1a7ef64",
      "item": {
        "type": "paragraph",
        "id": "d590110ad1a7ef64",
        "text": "botwhytho via [https://discord.com/channels/729445214812504107/834369757452697641/920915641484070932 discord] \nHere are a few examples:\n- Having more insight into CI tools: yaml is used a lot in most of these tools and sometimes there is so much logic in them that you are 'programming in yaml' ðŸ¤¦ . I've used mondrian to visualize calling graphs across yaml.\n- Software Assessment\n     - Help you answer questions like are we not being DRY, should I centralize/modularize a certain React component, such analysis is even better if done across repos\n     - Should i split this monolith? What would be the best way?\n     - Create custom logic & custom Gt views on top of Moose/Famix that understands, for example route logic in node.js Express web server\n- Build something that competes with Insomnia/Postman for prototyping around REST apis. Being able to navigate/query JSON responses as live objects, as opposed to dead text makes Gt as is already pretty good at working with JSON data. It could be better, but it's better than with text (in my opinion)\n- While developing locally, log heavily and structurally and use Gt to parse logs and potentially build better stories of the internal state of programs that you could do with the native Js tools that ecosystem provides (edit: forgot you can now interact with JS debugger from Gt, haven't tried it myself, but that may be the first thing on your list to try.) \nYou can do a lot of stuff 'around' your existing code with Gt"
      },
      "date": 1639661675416
    },
    {
      "type": "edit",
      "id": "d590110ad1a7ef64",
      "item": {
        "type": "paragraph",
        "id": "d590110ad1a7ef64",
        "text": "botwhytho via [https://discord.com/channels/729445214812504107/834369757452697641/920918152592900146 discord] \nHere are a few examples:\n- Having more insight into CI tools: yaml is used a lot in most of these tools and sometimes there is so much logic in them that you are 'programming in yaml' ðŸ¤¦ . I've used mondrian to visualize calling graphs across yaml.\n- Software Assessment\n     - Help you answer questions like are we not being DRY, should I centralize/modularize a certain React component, such analysis is even better if done across repos\n     - Should i split this monolith? What would be the best way?\n     - Create custom logic & custom Gt views on top of Moose/Famix that understands, for example route logic in node.js Express web server\n- Build something that competes with Insomnia/Postman for prototyping around REST apis. Being able to navigate/query JSON responses as live objects, as opposed to dead text makes Gt as is already pretty good at working with JSON data. It could be better, but it's better than with text (in my opinion)\n- While developing locally, log heavily and structurally and use Gt to parse logs and potentially build better stories of the internal state of programs that you could do with the native Js tools that ecosystem provides (edit: forgot you can now interact with JS debugger from Gt, haven't tried it myself, but that may be the first thing on your list to try.) \nYou can do a lot of stuff 'around' your existing code with Gt"
      },
      "date": 1639661692579
    },
    {
      "type": "add",
      "id": "eda63320058f6412",
      "item": {
        "type": "paragraph",
        "id": "eda63320058f6412",
        "text": "Konrad Hinsen â€” heute um 07:37 Uhr\nNice example. Going for patchworks means accepting more fragile systems in exchange for moving on faster. I hope that one day we will have \"patchwork refactoring tools\" for turning prototype patchworks into more robust systems. And maybe GT will be part of that."
      },
      "after": "d590110ad1a7ef64",
      "date": 1639661814749
    },
    {
      "type": "edit",
      "id": "eda63320058f6412",
      "item": {
        "type": "paragraph",
        "id": "eda63320058f6412",
        "text": "Konrad Hinsen via [https://discord.com/channels/729445214812504107/834369757452697641/920927678222204969 discord]\nNice example. Going for patchworks means accepting more fragile systems in exchange for moving on faster. I hope that one day we will have \"patchwork refactoring tools\" for turning prototype patchworks into more robust systems. And maybe GT will be part of that."
      },
      "date": 1639661835186
    },
    {
      "item": {
        "type": "factory",
        "id": "77fc7c00b6e8da61"
      },
      "id": "77fc7c00b6e8da61",
      "type": "add",
      "after": "1c29e49c3aa42cab",
      "date": 1639661880464
    },
    {
      "type": "edit",
      "id": "77fc7c00b6e8da61",
      "item": {
        "type": "pagefold",
        "id": "77fc7c00b6e8da61",
        "text": "Title Casing"
      },
      "date": 1639661883293
    },
    {
      "id": "77fc7c00b6e8da61",
      "type": "move",
      "order": [
        "446653f2934a5382",
        "35bc29caaef25d11",
        "7ea02ac0844b6b90",
        "55bf958771ec7066",
        "5461ba8de4cfe791",
        "3ee3341701746b4c",
        "cc7c93a4778952db",
        "18b9eb00ccf0eaf3",
        "a478ca4b404b8bd8",
        "74d80cca62373a33",
        "65d5ac80e07b8832",
        "fcd891df9b6b176e",
        "701a955915934277",
        "08f20161cbed563c",
        "a79d4d18e7aff37b",
        "d590110ad1a7ef64",
        "77fc7c00b6e8da61",
        "eda63320058f6412",
        "6d07ce4a71ae999c",
        "1c29e49c3aa42cab"
      ],
      "date": 1639661886656
    },
    {
      "item": {
        "type": "factory",
        "id": "d22b46be0019ab1a"
      },
      "id": "d22b46be0019ab1a",
      "type": "add",
      "after": "1c29e49c3aa42cab",
      "date": 1639666454372
    },
    {
      "item": {
        "type": "factory",
        "id": "9c997155ebd5aee2"
      },
      "id": "9c997155ebd5aee2",
      "type": "add",
      "after": "d22b46be0019ab1a",
      "date": 1639666460879
    },
    {
      "type": "edit",
      "id": "d22b46be0019ab1a",
      "item": {
        "type": "pagefold",
        "id": "d22b46be0019ab1a",
        "text": "~"
      },
      "date": 1639666462440
    },
    {
      "type": "edit",
      "id": "9c997155ebd5aee2",
      "item": {
        "type": "paragraph",
        "id": "9c997155ebd5aee2",
        "text": "https://github.com/feenkcom/gtoolkit-inspector/commit/3fc417885a935da4632bd097d2d28ee5c1951d89"
      },
      "date": 1639666464059
    },
    {
      "type": "edit",
      "id": "9c997155ebd5aee2",
      "item": {
        "type": "markdown",
        "id": "9c997155ebd5aee2",
        "text": "https://github.com/feenkcom/gtoolkit-inspector/commit/3fc417885a935da4632bd097d2d28ee5c1951d89"
      },
      "date": 1639666465664
    },
    {
      "type": "edit",
      "id": "d590110ad1a7ef64",
      "item": {
        "type": "markdown",
        "id": "d590110ad1a7ef64",
        "text": "botwhytho via [https://discord.com/channels/729445214812504107/834369757452697641/920918152592900146 discord] \nHere are a few examples:\n- Having more insight into CI tools: yaml is used a lot in most of these tools and sometimes there is so much logic in them that you are 'programming in yaml' ðŸ¤¦ . I've used mondrian to visualize calling graphs across yaml.\n- Software Assessment\n     - Help you answer questions like are we not being DRY, should I centralize/modularize a certain React component, such analysis is even better if done across repos\n     - Should i split this monolith? What would be the best way?\n     - Create custom logic & custom Gt views on top of Moose/Famix that understands, for example route logic in node.js Express web server\n- Build something that competes with Insomnia/Postman for prototyping around REST apis. Being able to navigate/query JSON responses as live objects, as opposed to dead text makes Gt as is already pretty good at working with JSON data. It could be better, but it's better than with text (in my opinion)\n- While developing locally, log heavily and structurally and use Gt to parse logs and potentially build better stories of the internal state of programs that you could do with the native Js tools that ecosystem provides (edit: forgot you can now interact with JS debugger from Gt, haven't tried it myself, but that may be the first thing on your list to try.) \nYou can do a lot of stuff 'around' your existing code with Gt"
      },
      "date": 1639680495889
    },
    {
      "type": "edit",
      "id": "d590110ad1a7ef64",
      "item": {
        "type": "markdown",
        "id": "d590110ad1a7ef64",
        "text": "botwhytho via [https://discord.com/channels/729445214812504107/834369757452697641/920918152592900146 discord] \nHere are a few examples:\n- Having more insight into CI tools: yaml is used a lot in most of these tools and sometimes there is so much logic in them that you are 'programming in yaml' ðŸ¤¦ . I've used mondrian to visualize calling graphs across yaml.\n- Software Assessment\n     - Help you answer questions like are we not being DRY, should I centralize/modularize a certain React component, such analysis is even better if done across repos\n     - Should i split this monolith? What would be the best way?\n     - Create custom logic & custom Gt views on top of Moose/Famix that understands, for example route logic in node.js Express web server\n- Build something that competes with Insomnia/Postman for prototyping around REST apis. Being able to navigate/query JSON responses as live objects, as opposed to dead text makes Gt as is already pretty good at working with JSON data. It could be better, but it's better than with text (in my opinion)\n- While developing locally, log heavily and structurally and use Gt to parse logs and potentially build better stories of the internal state of programs that you could do with the native Js tools that ecosystem provides (edit: forgot you can now interact with JS debugger from Gt, haven't tried it myself, but that may be the first thing on your list to try.) \nYou can do a lot of stuff 'around' your existing code with Gt"
      },
      "date": 1639680495891
    },
    {
      "type": "fork",
      "date": 1639680656873
    },
    {
      "item": {
        "type": "factory",
        "id": "7e588aabf0550795"
      },
      "id": "7e588aabf0550795",
      "type": "add",
      "after": "9c997155ebd5aee2",
      "date": 1639680707698
    },
    {
      "type": "edit",
      "id": "7e588aabf0550795",
      "item": {
        "type": "paragraph",
        "id": "7e588aabf0550795",
        "text": "\nFix typo in syntax explainer [feenkcom/gtoolkit#2288] "
      },
      "date": 1639680710427
    },
    {
      "id": "7e588aabf0550795",
      "type": "move",
      "order": [
        "446653f2934a5382",
        "35bc29caaef25d11",
        "7ea02ac0844b6b90",
        "55bf958771ec7066",
        "5461ba8de4cfe791",
        "3ee3341701746b4c",
        "cc7c93a4778952db",
        "18b9eb00ccf0eaf3",
        "a478ca4b404b8bd8",
        "74d80cca62373a33",
        "65d5ac80e07b8832",
        "fcd891df9b6b176e",
        "701a955915934277",
        "08f20161cbed563c",
        "a79d4d18e7aff37b",
        "d590110ad1a7ef64",
        "77fc7c00b6e8da61",
        "eda63320058f6412",
        "6d07ce4a71ae999c",
        "1c29e49c3aa42cab",
        "d22b46be0019ab1a",
        "7e588aabf0550795",
        "9c997155ebd5aee2"
      ],
      "date": 1639680712226
    },
    {
      "item": {
        "type": "factory",
        "id": "5d1393c02edc1e07"
      },
      "id": "5d1393c02edc1e07",
      "type": "add",
      "after": "9c997155ebd5aee2",
      "date": 1639687378844
    },
    {
      "type": "edit",
      "id": "5d1393c02edc1e07",
      "item": {
        "type": "pagefold",
        "id": "5d1393c02edc1e07",
        "text": "Empiriomonism"
      },
      "date": 1639687384694
    },
    {
      "item": {
        "type": "factory",
        "id": "f0303e569638b0e7"
      },
      "id": "f0303e569638b0e7",
      "type": "add",
      "after": "5d1393c02edc1e07",
      "date": 1639687386243
    },
    {
      "type": "edit",
      "id": "f0303e569638b0e7",
      "item": {
        "type": "paragraph",
        "id": "f0303e569638b0e7",
        "text": "[[Three Gaps]]"
      },
      "date": 1639687419643
    },
    {
      "item": {
        "type": "factory",
        "id": "556f654f548e4e28"
      },
      "id": "556f654f548e4e28",
      "type": "add",
      "after": "f0303e569638b0e7",
      "date": 1639688028804
    },
    {
      "type": "edit",
      "id": "556f654f548e4e28",
      "item": {
        "type": "paragraph",
        "id": "556f654f548e4e28",
        "text": "Terminology, p. ixâ€“xi"
      },
      "date": 1639688055518
    },
    {
      "item": {
        "type": "factory",
        "id": "e33eb43d5fdf57fe"
      },
      "id": "e33eb43d5fdf57fe",
      "type": "add",
      "after": "556f654f548e4e28",
      "date": 1639690055946
    },
    {
      "type": "edit",
      "id": "e33eb43d5fdf57fe",
      "item": {
        "type": "pagefold",
        "id": "e33eb43d5fdf57fe",
        "text": "Emacs"
      },
      "date": 1639690062437
    },
    {
      "item": {
        "type": "factory",
        "id": "1744654dc009a517"
      },
      "id": "1744654dc009a517",
      "type": "add",
      "after": "e33eb43d5fdf57fe",
      "date": 1639690064678
    },
    {
      "type": "edit",
      "id": "1744654dc009a517",
      "item": {
        "type": "paragraph",
        "id": "1744654dc009a517",
        "text": "Tree-edit: Structural editing for Java, Python, C, and beyond!"
      },
      "date": 1639690069497
    },
    {
      "type": "edit",
      "id": "1744654dc009a517",
      "item": {
        "type": "paragraph",
        "id": "1744654dc009a517",
        "text": "Tree-edit: Structural editing for Java, Python, C, and beyond! [https://emacsconf.org/2021/talks/structural/?utm_source=pocket_mylist talk]"
      },
      "date": 1639690089908
    },
    {
      "item": {
        "type": "factory",
        "id": "04f098f5b676699c"
      },
      "id": "04f098f5b676699c",
      "type": "add",
      "after": "1744654dc009a517",
      "date": 1639690115473
    },
    {
      "type": "edit",
      "id": "04f098f5b676699c",
      "item": {
        "type": "video",
        "id": "04f098f5b676699c",
        "text": "https://media.emacsconf.org/2021/emacsconf-2021-structural--tree-edit-structural-editing-for-java-python-c-and-beyond--ethan-leba--main.webm"
      },
      "date": 1639690118040
    },
    {
      "item": {
        "type": "factory",
        "id": "0067ab6afcf7311c"
      },
      "id": "0067ab6afcf7311c",
      "type": "add",
      "after": "04f098f5b676699c",
      "date": 1639690122453
    },
    {
      "type": "edit",
      "id": "0067ab6afcf7311c",
      "item": {
        "type": "html",
        "id": "0067ab6afcf7311c",
        "text": "https://media.emacsconf.org/2021/emacsconf-2021-structural--tree-edit-structural-editing-for-java-python-c-and-beyond--ethan-leba--main.webm"
      },
      "date": 1639690125537
    },
    {
      "type": "remove",
      "id": "04f098f5b676699c",
      "date": 1639690135746
    },
    {
      "type": "remove",
      "id": "0067ab6afcf7311c",
      "date": 1639690147146
    },
    {
      "item": {
        "type": "factory",
        "id": "5ffbfd70a673cc58"
      },
      "id": "5ffbfd70a673cc58",
      "type": "add",
      "after": "1744654dc009a517",
      "date": 1639690193163
    },
    {
      "type": "edit",
      "id": "5ffbfd70a673cc58",
      "item": {
        "type": "html",
        "id": "5ffbfd70a673cc58",
        "text": "\n<source src=\"https://media.emacsconf.org/2021/emacsconf-2021-structural--tree-edit-structural-editing-for-java-python-c-and-beyond--ethan-leba--main.webm\" type=\"\"><track label=\"English\" kind=\"captions\" srclang=\"en\" src=\"/2021/captions/emacsconf-2021-structural--tree-edit-structural-editing-for-java-python-c-and-beyond--ethan-leba--main.vtt\" default=\"\">\n\n<p><em>Your browser does not support the video tag, please download the video instead.</em></p>\n"
      },
      "date": 1639690195747
    },
    {
      "type": "remove",
      "id": "5ffbfd70a673cc58",
      "date": 1639690219007
    },
    {
      "type": "edit",
      "id": "1744654dc009a517",
      "item": {
        "type": "paragraph",
        "id": "1744654dc009a517",
        "text": "Tree-edit: Structural editing for Java, Python, C, and beyond! [https://emacsconf.org/2021/talks/structural/?utm_source=pocket_mylist talk] [[Ethan Leba]]"
      },
      "date": 1639690988856
    },
    {
      "item": {
        "type": "factory",
        "id": "429b3e6b9b1d273e"
      },
      "id": "429b3e6b9b1d273e",
      "type": "add",
      "after": "1744654dc009a517",
      "date": 1639691472346
    },
    {
      "type": "edit",
      "id": "429b3e6b9b1d273e",
      "item": {
        "type": "paragraph",
        "id": "429b3e6b9b1d273e",
        "text": "Combobulate"
      },
      "date": 1639691475746
    },
    {
      "type": "edit",
      "id": "429b3e6b9b1d273e",
      "item": {
        "type": "paragraph",
        "id": "429b3e6b9b1d273e",
        "text": "Combobulate [https://github.com/mickeynp/combobulate github]"
      },
      "date": 1639691505081
    },
    {
      "type": "edit",
      "id": "1744654dc009a517",
      "item": {
        "type": "paragraph",
        "id": "1744654dc009a517",
        "text": "[[Tree-edit]]: Structural editing for Java, Python, C, and beyond! [https://emacsconf.org/2021/talks/structural/?utm_source=pocket_mylist talk] [[Ethan Leba]]"
      },
      "date": 1639692270853
    }
  ]
}