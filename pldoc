{
  "title": "PlDoc",
  "story": [
    {
      "type": "markdown",
      "id": "bdec3e99bd466568",
      "text": "Wiki style [[Literate Programming]] for [[Prolog]]\n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice.  [0] "
    },
    {
      "type": "markdown",
      "id": "a3d4af690abfe1f4",
      "text": "Shum and Cook [14] describe a controlled experiment\non the effect of literate programming in education. \n"
    },
    {
      "type": "markdown",
      "id": "79634a3534a6d350",
      "text": " it produced 'how documentation’ "
    },
    {
      "type": "pagefold",
      "id": "c42199aa419fe15d",
      "text": "References"
    },
    {
      "type": "markdown",
      "id": "a2cfe40b3a21ed2e",
      "text": "**[0]** Wielemaker, Jan, and Anjo Anjewierden. “PlDoc: Wiki Style Literate Programming for Prolog,” [https://www.swi-prolog.org/download/publications/pldoc.pdf pdf]\n\n**[14]** Stephen Shum and Curtis Cook. Using literate programming to teach good pro-\ngramming practices. In SIGCSE ’94: Proceedings of the twenty-fifth SIGCSE sym-\nposium on Computer science education, pages 66–70, New York, NY, USA, 1994.\nACM Press"
    },
    {
      "type": "markdown",
      "id": "80a8c17c2553c7b3",
      "text": "**[2]** Anjo Anjewierden, Bob Wielinga, and Robert de Hoog. Task and domain ontolo- gies for knowledge mapping in operational processes. Metis Deliverable 4.2/2003, University of Amsterdam, 2004. [[tOKo]] home: http://www.toko-sigmund.org/."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "PlDoc",
        "story": []
      },
      "date": 1628172364161
    },
    {
      "item": {
        "type": "factory",
        "id": "bdec3e99bd466568"
      },
      "id": "bdec3e99bd466568",
      "type": "add",
      "date": 1628172370470
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "Wiki style Literate Programming for\nProlog"
      },
      "date": 1628172373474
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "Wiki style Literate Programming for Prolog"
      },
      "date": 1628172377669
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "Wiki style Literate Programming for Prolog [https://www.swi-prolog.org/download/publications/pldoc.pdf pdf]"
      },
      "date": 1628172392295
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog "
      },
      "date": 1628172423905
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog \n> Abstract. This document introduces PlDoc, a literate programming\nsystem for Prolog. Starting point for PlDoc was minimal distraction from\nthe programming task and maximal immediate reward, attempting to se-\nduce the programmer to use the system. Minimal distraction is achieved\nusing structured comments that are as closely as possible related to com-\nmon Prolog documentation practices. Immediate reward is provided by a\nweb interface powered from the Prolog development environment that in-\ntegrates searching and browsing application and system documentation.\nWhen accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of\nchoice"
      },
      "date": 1628172443405
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog \n> **Abstract**. This document introduces PlDoc, a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to se-\nduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to com-\nmon Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that in-\ntegrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice"
      },
      "date": 1628172471639
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog \n> **Abstract**. This document introduces PlDoc, a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to se-\nduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that in-\ntegrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice"
      },
      "date": 1628172481124
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog \n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to se-\nduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that in-\ntegrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice"
      },
      "date": 1628172495107
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog \n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that in-\ntegrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice"
      },
      "date": 1628172512827
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog \n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice"
      },
      "date": 1628172536743
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog \n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice."
      },
      "date": 1628172554610
    },
    {
      "item": {
        "type": "factory",
        "id": "a3d4af690abfe1f4"
      },
      "id": "a3d4af690abfe1f4",
      "type": "add",
      "after": "bdec3e99bd466568",
      "date": 1628172599771
    },
    {
      "type": "edit",
      "id": "a3d4af690abfe1f4",
      "item": {
        "type": "markdown",
        "id": "a3d4af690abfe1f4",
        "text": "Shum and Cook [14] describe a controlled experiment\non the effect of literate programming in education. "
      },
      "date": 1628172602053
    },
    {
      "type": "edit",
      "id": "a3d4af690abfe1f4",
      "item": {
        "type": "markdown",
        "id": "a3d4af690abfe1f4",
        "text": "Shum and Cook [14] describe a controlled experiment\non the effect of literate programming in education. \n"
      },
      "date": 1628172635699
    },
    {
      "type": "add",
      "id": "79634a3534a6d350",
      "item": {
        "type": "markdown",
        "id": "79634a3534a6d350",
        "text": "how documentation’ "
      },
      "after": "a3d4af690abfe1f4",
      "date": 1628172645231
    },
    {
      "type": "edit",
      "id": "79634a3534a6d350",
      "item": {
        "type": "markdown",
        "id": "79634a3534a6d350",
        "text": " it produced 'how documentation’ "
      },
      "date": 1628172659920
    },
    {
      "type": "edit",
      "id": "79634a3534a6d350",
      "item": {
        "type": "markdown",
        "id": "79634a3534a6d350",
        "text": " it produced `how documentation’ "
      },
      "date": 1628172672071
    },
    {
      "type": "edit",
      "id": "79634a3534a6d350",
      "item": {
        "type": "markdown",
        "id": "79634a3534a6d350",
        "text": " it produced 'how documentation’ "
      },
      "date": 1628172682242
    },
    {
      "item": {
        "type": "factory",
        "id": "c42199aa419fe15d"
      },
      "id": "c42199aa419fe15d",
      "type": "add",
      "after": "79634a3534a6d350",
      "date": 1628172904141
    },
    {
      "type": "edit",
      "id": "c42199aa419fe15d",
      "item": {
        "type": "pagefold",
        "id": "c42199aa419fe15d",
        "text": "~\n"
      },
      "date": 1628172909923
    },
    {
      "item": {
        "type": "factory",
        "id": "a2cfe40b3a21ed2e"
      },
      "id": "a2cfe40b3a21ed2e",
      "type": "add",
      "after": "c42199aa419fe15d",
      "date": 1628172911173
    },
    {
      "type": "edit",
      "id": "a2cfe40b3a21ed2e",
      "item": {
        "type": "markdown",
        "id": "a2cfe40b3a21ed2e",
        "text": "14. Stephen Shum and Curtis Cook. Using literate programming to teach good pro-\ngramming practices. In SIGCSE ’94: Proceedings of the twenty-fifth SIGCSE sym-\nposium on Computer science education, pages 66–70, New York, NY, USA, 1994.\nACM Press"
      },
      "date": 1628172914789
    },
    {
      "type": "edit",
      "id": "a2cfe40b3a21ed2e",
      "item": {
        "type": "markdown",
        "id": "a2cfe40b3a21ed2e",
        "text": "**[14]** Stephen Shum and Curtis Cook. Using literate programming to teach good pro-\ngramming practices. In SIGCSE ’94: Proceedings of the twenty-fifth SIGCSE sym-\nposium on Computer science education, pages 66–70, New York, NY, USA, 1994.\nACM Press"
      },
      "date": 1628177767794
    },
    {
      "type": "edit",
      "id": "c42199aa419fe15d",
      "item": {
        "type": "pagefold",
        "id": "c42199aa419fe15d",
        "text": "References"
      },
      "date": 1628178131620
    },
    {
      "item": {
        "type": "factory",
        "id": "80a8c17c2553c7b3"
      },
      "id": "80a8c17c2553c7b3",
      "type": "add",
      "after": "a2cfe40b3a21ed2e",
      "date": 1628178134784
    },
    {
      "type": "edit",
      "id": "80a8c17c2553c7b3",
      "item": {
        "type": "markdown",
        "id": "80a8c17c2553c7b3",
        "text": "**[2]** Anjo Anjewierden, Bob Wielinga, and Robert de Hoog. Task and domain ontolo- gies for knowledge mapping in operational processes. Metis Deliverable 4.2/2003, University of Amsterdam, 2004. tOKo home: http://www.toko-sigmund.org/."
      },
      "date": 1628178153097
    },
    {
      "type": "edit",
      "id": "80a8c17c2553c7b3",
      "item": {
        "type": "markdown",
        "id": "80a8c17c2553c7b3",
        "text": "**[2]** Anjo Anjewierden, Bob Wielinga, and Robert de Hoog. Task and domain ontolo- gies for knowledge mapping in operational processes. Metis Deliverable 4.2/2003, University of Amsterdam, 2004. [[tOKo]] home: http://www.toko-sigmund.org/."
      },
      "date": 1628178216820
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "Wielemaker, Jan, and Anjo Anjewierden. “PlDoc: Wiki Style Literate Programming for Prolog,” n.d., 15.\n [https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog \n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice."
      },
      "date": 1628225875448
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "\n [https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] – Wiki style Literate Programming for Prolog [0]\n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice."
      },
      "date": 1628225920490
    },
    {
      "type": "edit",
      "id": "a2cfe40b3a21ed2e",
      "item": {
        "type": "markdown",
        "id": "a2cfe40b3a21ed2e",
        "text": "**[0]** Wielemaker, Jan, and Anjo Anjewierden. “PlDoc: Wiki Style Literate Programming for Prolog,” n.d., 15.\n**[14]** Stephen Shum and Curtis Cook. Using literate programming to teach good pro-\ngramming practices. In SIGCSE ’94: Proceedings of the twenty-fifth SIGCSE sym-\nposium on Computer science education, pages 66–70, New York, NY, USA, 1994.\nACM Press"
      },
      "date": 1628225941482
    },
    {
      "type": "edit",
      "id": "a2cfe40b3a21ed2e",
      "item": {
        "type": "markdown",
        "id": "a2cfe40b3a21ed2e",
        "text": "**[0]** Wielemaker, Jan, and Anjo Anjewierden. “PlDoc: Wiki Style Literate Programming for Prolog,”\n\n**[14]** Stephen Shum and Curtis Cook. Using literate programming to teach good pro-\ngramming practices. In SIGCSE ’94: Proceedings of the twenty-fifth SIGCSE sym-\nposium on Computer science education, pages 66–70, New York, NY, USA, 1994.\nACM Press"
      },
      "date": 1628225956769
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": " [https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] [0] – Wiki style Literate Programming for Prolog\n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice."
      },
      "date": 1628225969043
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] [0] – Wiki style Literate Programming for Prolog\n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice."
      },
      "date": 1628226004720
    },
    {
      "type": "edit",
      "id": "a2cfe40b3a21ed2e",
      "item": {
        "type": "markdown",
        "id": "a2cfe40b3a21ed2e",
        "text": "**[0]** Wielemaker, Jan, and Anjo Anjewierden. “PlDoc: Wiki Style Literate Programming for Prolog,” [https://www.swi-prolog.org/download/publications/pldoc.pdf pdf]\n\n**[14]** Stephen Shum and Curtis Cook. Using literate programming to teach good pro-\ngramming practices. In SIGCSE ’94: Proceedings of the twenty-fifth SIGCSE sym-\nposium on Computer science education, pages 66–70, New York, NY, USA, 1994.\nACM Press"
      },
      "date": 1628226008226
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "[https://www.swi-prolog.org/download/publications/pldoc.pdf pdf] [0] – Wiki style Literate Programming for Prolog\n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice.  [0] "
      },
      "date": 1628226058591
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "Wiki style Literate Programming for Prolog\n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice.  [0] "
      },
      "date": 1628226072362
    },
    {
      "type": "edit",
      "id": "bdec3e99bd466568",
      "item": {
        "type": "markdown",
        "id": "bdec3e99bd466568",
        "text": "Wiki style [[Literate Programming]] for [[Prolog]]\n> **Abstract**. This document introduces [[PlDoc]], a literate programming system for Prolog. Starting point for PlDoc was minimal distraction from the programming task and maximal immediate reward, attempting to seduce the programmer to use the system. Minimal distraction is achieved using structured comments that are as closely as possible related to common Prolog documentation practices. Immediate reward is provided by a web interface powered from the Prolog development environment that integrates searching and browsing application and system documentation. When accessed from localhost, it is possible to go from documentation\nshown in a browser to the source code displayed in the user’s editor of choice.  [0] "
      },
      "date": 1628226149850
    }
  ]
}