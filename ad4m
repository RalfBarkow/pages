{
  "title": "AD4M",
  "story": [
    {
      "type": "paragraph",
      "id": "43b88da1528bedc7",
      "text": "AD4M is a set of minimal assumptions to make all apps interoperate.  [https://ad4m.dev/ site], [https://github.com/perspect3vism github], [https://github.com/perspect3vism/ad4m github]"
    },
    {
      "type": "video",
      "id": "4fe59ff4a06e2571",
      "text": "YOUTUBE 5BLDCWg6GZI\nAD4M Explained in 12 minutes"
    },
    {
      "type": "paragraph",
      "id": "75aaad395dc4bf27",
      "text": "[https://youtu.be/5BLDCWg6GZI?t=187 3:07]\nThey are like the agent’s second brain or [[Zettelkasten]].",
      "alias": "d6939d187842ec24"
    },
    {
      "type": "paragraph",
      "id": "d6939d187842ec24",
      "text": "[https://youtu.be/5BLDCWg6GZI?t=394 6:34]\nTrick No.2 Social DNA"
    },
    {
      "type": "paragraph",
      "id": "40fdaa3f21ceb540",
      "text": "[https://youtu.be/5BLDCWg6GZI?t=444 7:24]\nThat can easily be done through the Prolog engine that AD4M spawns for each perspective."
    },
    {
      "type": "paragraph",
      "id": "75910f9ea31a4727",
      "text": "The Agent-Centric Distributed Application Meta-ontology or just: Agent-Centric DApp Meta-ontology [https://github.com/perspect3vism/ad4m/blob/main/README.md github]"
    },
    {
      "type": "pagefold",
      "id": "a12cd4bd38cb2661",
      "text": "Neighbourhood"
    },
    {
      "type": "paragraph",
      "id": "2c28802867a47a65",
      "text": "Publishing that local Perspective by turning it into a [[Neighbourhood]] [https://github.com/perspect3vism/ad4m/blob/main/README.md#publishing-that-local-perspective-by-turning-it-into-a-neighbourhood github]"
    },
    {
      "type": "markdown",
      "id": "09aafe32281666d3",
      "text": "> The back-bone of a [[Neighbourhood]] is a LinkLanguage - a Language that enables the sharing and thus synchronizing of links (see LinksAdapter in Language.ts). While there can and should be many different implementations with different trade-offs and features (like membranes [⇒ [[semipermeable]]] etc.), there currently is one fully implemented and Holochain based LinkLanguage with the name Social Context.\n\nIt is deployed on the current test network (Language Language v0.0.5) under the address: QmZ1mkoY8nLvpxY3Mizx8UkUiwUzjxJxsqSTPPdH8sHxCQ.\nCreating our unique LinkLanguage clone through templating\n\n\n"
    },
    {
      "type": "markdown",
      "id": "ae09fc437a8b11e3",
      "text": "But we should not just use this publicly known Language as the back-bone for our new Neighbourhood, since we need a unique clone. So what we want is to use this existing Language as a template and create a new copy with the same code but different [[UUID]] and/name in order to create a fresh space for our new Neighbourhood."
    },
    {
      "type": "pagefold",
      "id": "48286c8380fd64b0",
      "text": "AD4M_0.2.10_x64.dmg"
    },
    {
      "type": "paragraph",
      "id": "5808b4784c5b8fb6",
      "text": "Install AD4M [https://github.com/perspect3vism/ad4m/releases github] (AD4M Launcher v0.2.10)"
    },
    {
      "type": "paragraph",
      "id": "a9f374286d51eaa9",
      "text": "⇀ copy [[Holochain]] binary"
    },
    {
      "type": "code",
      "id": "482d4aa77cc1c454",
      "text": "[2023-01-17T18:39:27.090805+01:00] INFO - Free port: 12000\n[2023-01-17T18:39:27.215959+01:00] INFO - init command by copy holochain binary\n[2023-01-17T18:39:31.819982+01:00] INFO - \u001b[2m AD4M executor starting with version:  0.2.10 \n[2023-01-17T18:39:31.820189+01:00] INFO -  Starting ad4m core with path: /Users/rgb/.ad4m \n[2023-01-17T18:39:31.820211+01:00] INFO -  => AD4M core language addresses: languageLanguage bundle (hidden) +  [\n\n[…]\n"
    },
    {
      "type": "paragraph",
      "id": "152811e18638d5e5",
      "text": "⇀ AD4M executor "
    },
    {
      "type": "paragraph",
      "id": "34dc63afe4e7e184",
      "text": "⇀ ad4m core"
    },
    {
      "type": "paragraph",
      "id": "4af0cab142e4c6c6",
      "text": "⇀ AD4M core language addresses"
    },
    {
      "type": "pagefold",
      "id": "2de1ad85ed6e5c41",
      "text": "Introduction"
    },
    {
      "type": "paragraph",
      "id": "9a46591da4ab6301",
      "text": "[https://web.archive.org/web/20221129133722/https://docs.ad4m.dev/ archive]"
    },
    {
      "type": "paragraph",
      "id": "c2a6704ab6bc3870",
      "text": "The name AD4M is an ackronym for The Agent-Centric Distributed Application Meta-ontology or just: Agent-Centric DApp Meta-ontology."
    },
    {
      "type": "paragraph",
      "id": "6c54b3a2407d39b5",
      "text": "\nAD4M is a meta-ontology and a spanning layer - an upper extension to the TCP/IP stack. But AD4M is also a framework for building apps - mainly social apps, which renders it an engine (like a game engine) for social networks and collaboration apps. With its ability to bootstrap specific ontologies from its meta-ontology, it is a malleable social network itself. It could be the last one.\n\nAt its core, AD4M is just an idea, a formalization of a different approach, a complete set of basic concepts that together span a new paradigm of (distributed) software architecture.\n\nIt tries to capture the quintessence of what really goes on in human communication networks, in order to shape the digital space around that reality - instead of having the technology dictate how we communicate.\n\nPutting the human first and starting from a pure agent-centric approach, AD4M deconstructs the concept of applications and suggests a different principle for the creation and maintenance of coherence in communication networks: social contexts (who am I talking to?) and shared subjective meaning, instead of assumed objectivity implied by monolithic apps that don't differentiate between agents' different renderings and associations of the same data or event or subject."
    },
    {
      "type": "pagefold",
      "id": "27d483f0bf869b19",
      "text": "Meta-Ontology"
    },
    {
      "type": "paragraph",
      "id": "e6948425ed561c32",
      "text": "What really goes on is that agents/humans exchange expressions of various (and evolving) languages in order to share their partial perspectives/associations with each other and thus convey meaning, build meaning, make sense of things together."
    },
    {
      "type": "html",
      "id": "40392ccb90427280",
      "text": "<img\n width=\"100%\"\n src=\"https://web.archive.org/web/20221129133722im_/https://docs.ad4m.dev/ad4m-ontology.png\"\n>"
    },
    {
      "type": "paragraph",
      "id": "b541a5220dc5bb29",
      "text": "In order to suggest a minimal assumption for maximum buy-in, AD4M carves out this quintessence of what human networks and the internet have in common, by postulating an ontology of three basic and irreducible concepts: "
    },
    {
      "type": "markdown",
      "id": "fd4632e53434031f",
      "text": "* [[Agent]]s\n* [[Language]]s, and\n* [[Perspective]]s.\n"
    },
    {
      "type": "paragraph",
      "id": "462f2a9e87ade5b8",
      "text": "Languages include Expressions in their definition, and Perspectives include Links (Link Expressions, to be precise)."
    },
    {
      "type": "paragraph",
      "id": "e6940e599910a106",
      "text": "Through combination of these basic principles, two important derived concepts are constructed:"
    },
    {
      "type": "markdown",
      "id": "2e14ed8cd509f000",
      "text": "* Neighbourhoods (i.e. shared Perspectives)\n* Social Organisms (i.e. fractal, super agents, defined through shared perspectives and shared interaction patterns/social DNA).\n"
    },
    {
      "type": "paragraph",
      "id": "3b8a6f910436e261",
      "text": "[…]"
    },
    {
      "type": "pagefold",
      "id": "4c60fdb5f0820eca",
      "text": "~"
    },
    {
      "type": "code",
      "id": "69e5bf3edbdb3fe3",
      "text": "jsipfs cat /ipfs/QmRaaUwTNfwgFZpeUy8qrZwrp2dY4kCKmmB5xEqvH3vtD1/readme\n"
    },
    {
      "type": "paragraph",
      "id": "d507e06d6cbf3bbd",
      "text": "https://js.ipfs.tech/"
    },
    {
      "type": "code",
      "id": "7d6ce3b73c408856",
      "text": "npm install ipfs -g\n"
    },
    {
      "type": "code",
      "id": "02bc266db67c9b02",
      "text": "jsipfs cat QmPChd2hVbrJ6bfo3WBcTW4iZnpHm8TEzWkLHmLpXhF68A"
    },
    {
      "type": "paragraph",
      "id": "e96ceff05c905b10",
      "text": "⇒ no IPFS repo found in /Users/rgb/.jsipfs."
    },
    {
      "type": "pagefold",
      "id": "fd88f66cc1fc448a",
      "text": "Core Concepts"
    },
    {
      "type": "markdown",
      "id": "c86241a8b5208d6e",
      "text": "# Agents"
    },
    {
      "type": "paragraph",
      "id": "e2fe320d1d01d58c",
      "text": "…are build around DID - Decentralized Identifier . Users can bring their existing identity or have AD4M create a new one.\n\nConceptually, AD4M agents are modelled as something that can speak and that can listen. Agents speak by creating Expressions of AD4M Languages, whereby these Expression get signed by the agent's DID key.\n\nAD4M agents also have a publicly shared Perspective, that other agents can see just by resolving their DID URI. This Perspective is like the agents semantic web page, consisting of statements the agent chooses to share with the world. Statements either about themselves (acting as public profile used by various apps), or about anything else.\n\nFinally, AD4M agents declare a direct message Language, an AD4M Language they choose to be contacted with for receiving messages.\n\nAD4M's built-in Agent-Language resolves DID URIs to AD4M Expressions that look like this: "
    },
    {
      "type": "code",
      "id": "d6ac8ed01d1ed532",
      "text": "\n{\n    did: \"did:key:zQ3shNWd4bg67ktTVg9EMnnrsRjhkH6cRNCjRRxfTaTqBniAf\",\n    perspective: {\n        links: []\n    },\n    directMessageLanguage: \"lang://QmZ9Z9Z5yZsegxArToww5zmwtPpojXN6zXJsi7WwMUa8\"\n}"
    },
    {
      "type": "paragraph",
      "id": "d8b9613f9d61d1b6",
      "text": "(see API docs about Agent)"
    },
    {
      "type": "paragraph",
      "id": "a8808a53a54829c1",
      "text": "⇒ docs.ad4m.dev\nHost\nError [https://docs.ad4m.dev/ site]"
    },
    {
      "type": "markdown",
      "id": "232f106a7e399656",
      "text": "# Languages\n\n"
    },
    {
      "type": "paragraph",
      "id": "2a4d75c512d15b43",
      "text": "…encapsulate the actual technology used to communicate, like Holochain or IPFS and enable Agents to create and share Expressions.\n\nExpressions are referenced via a URI of the kind:\n<language>://<language specific expression address>\n(with special cases like DID URIs being parsed as such and resolved through the Agent Language).\n\nAD4M resolves these URIs by first looking up the Language via its hash (and potentially downloading the Language through the built-in Language of Languages) and then asking the Language about the Expression with given address.\n\nLanguages are distributed and interpreted as JavaScript modules. AD4M passes in proxy-object to the managed Holochain, IPFS, etc. instances so Language developers can use these technologies without having to set them up or manage themselves. "
    },
    {
      "type": "code",
      "id": "e7837980d9f32467",
      "text": "// Example of a Language that uses the Holochain proxy object                        \nexport default async function create(context: LanguageContext): Promise {\n    const Holochain = context.Holochain as HolochainLanguageDelegate;\n    await Holochain.registerDNAs([{ file: DNA, nick: DNA_NICK }]);\n\n    // ...\n\n    async get(expressionAddress: Address): Promise {\n        const expression = await this.#DNA.call(\n          DNA_NICK,\n          \"zome_name\",\n          \"get_expression_zome_function_name\",\n          expressionAddress\n        );\n    }\n}"
    },
    {
      "type": "paragraph",
      "id": "a733969bfe91af16",
      "text": "(Read section in docs about how to write AD4M Languages)"
    },
    {
      "type": "markdown",
      "id": "ea3a7c96fc077173",
      "text": "# Perspectives\n\n"
    },
    {
      "type": "paragraph",
      "id": "2073aee0c996d728",
      "text": "…are local and private graph databases. They represent context and association between expressions.\n\nThey consist of a list of RDF/semantic web like triplets (subject-predicate-obejct) called links because all three items are just Expression URIs pointing to Expressions of arbitrary Languages.\n\nPerspectives are like Solid’s pods, but they are agent-centric:"
    },
    {
      "type": "markdown",
      "id": "156d3488ff1bf0cb",
      "text": "* Atomic Perspectives belong to and are stored with a single Agent.\n* Links inside Perspectives are Link Expressions, so they include their provenance and cryptographic signature"
    },
    {
      "type": "paragraph",
      "id": "6cfa82a1d9d0a926",
      "text": "While Expressions are objective (every agent resolving their URI renders the same data), Perspectives represent subjective associations between objective Expressions.\n\n(See Gettint Started section above for how to deal with Perspectives)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "AD4M",
        "story": []
      },
      "date": 1640895051934
    },
    {
      "item": {
        "type": "factory",
        "id": "43b88da1528bedc7"
      },
      "id": "43b88da1528bedc7",
      "type": "add",
      "date": 1640895060859
    },
    {
      "type": "edit",
      "id": "43b88da1528bedc7",
      "item": {
        "type": "paragraph",
        "id": "43b88da1528bedc7",
        "text": "[https://ad4m.dev/ site]"
      },
      "date": 1640895066383
    },
    {
      "type": "edit",
      "id": "43b88da1528bedc7",
      "item": {
        "type": "paragraph",
        "id": "43b88da1528bedc7",
        "text": "AD4M is a set of minimal assumptions to make all apps interoperate.  [https://ad4m.dev/ site]"
      },
      "date": 1640895089179
    },
    {
      "item": {
        "type": "factory",
        "id": "75910f9ea31a4727"
      },
      "id": "75910f9ea31a4727",
      "type": "add",
      "after": "43b88da1528bedc7",
      "date": 1640895181294
    },
    {
      "type": "edit",
      "id": "75910f9ea31a4727",
      "item": {
        "type": "paragraph",
        "id": "75910f9ea31a4727",
        "text": "The Agent-Centric Distributed Application Meta-ontology or just: Agent-Centric DApp Meta-ontology"
      },
      "date": 1640895185539
    },
    {
      "type": "edit",
      "id": "75910f9ea31a4727",
      "item": {
        "type": "paragraph",
        "id": "75910f9ea31a4727",
        "text": "The Agent-Centric Distributed Application Meta-ontology or just: Agent-Centric DApp Meta-ontology [https://github.com/perspect3vism/ad4m/blob/main/README.md github]"
      },
      "date": 1640895199063
    },
    {
      "item": {
        "type": "factory",
        "id": "2c28802867a47a65"
      },
      "id": "2c28802867a47a65",
      "type": "add",
      "after": "75910f9ea31a4727",
      "date": 1640895232684
    },
    {
      "type": "edit",
      "id": "2c28802867a47a65",
      "item": {
        "type": "paragraph",
        "id": "2c28802867a47a65",
        "text": "Publishing that local Perspective by turning it into a Neighbourhood"
      },
      "date": 1640895234915
    },
    {
      "type": "edit",
      "id": "2c28802867a47a65",
      "item": {
        "type": "paragraph",
        "id": "2c28802867a47a65",
        "text": "Publishing that local Perspective by turning it into a Neighbourhood [https://github.com/perspect3vism/ad4m/blob/main/README.md#publishing-that-local-perspective-by-turning-it-into-a-neighbourhood github]"
      },
      "date": 1640895246439
    },
    {
      "type": "edit",
      "id": "2c28802867a47a65",
      "item": {
        "type": "paragraph",
        "id": "2c28802867a47a65",
        "text": "Publishing that local Perspective by turning it into a [[Neighbourhood]] [https://github.com/perspect3vism/ad4m/blob/main/README.md#publishing-that-local-perspective-by-turning-it-into-a-neighbourhood github]"
      },
      "date": 1640895258938
    },
    {
      "item": {
        "type": "factory",
        "id": "09aafe32281666d3"
      },
      "id": "09aafe32281666d3",
      "type": "add",
      "after": "2c28802867a47a65",
      "date": 1640895289900
    },
    {
      "type": "edit",
      "id": "09aafe32281666d3",
      "item": {
        "type": "markdown",
        "id": "09aafe32281666d3",
        "text": "> The back-bone of a Neighbourhood is a LinkLanguage - a Language that enables the sharing and thus synchronizing of links (see LinksAdapter in Language.ts). While there can and should be many different implementations with different trade-offs and features (like membranes etc.), there currently is one fully implemented and Holochain based LinkLanguage with the name Social Context.\n\nIt is deployed on the current test network (Language Language v0.0.5) under the address: QmZ1mkoY8nLvpxY3Mizx8UkUiwUzjxJxsqSTPPdH8sHxCQ.\nCreating our unique LinkLanguage clone through templating\n\nBut we should not just use this publicly known Language as the back-bone for our new Neighbourhood, since we need a unique clone. So what we want is to use this existing Language as a template and create a new copy with the same code but different UUID and/name in order to create a fresh space for our new Neighbourhood."
      },
      "date": 1640895293382
    },
    {
      "type": "edit",
      "id": "09aafe32281666d3",
      "item": {
        "type": "markdown",
        "id": "09aafe32281666d3",
        "text": "> The back-bone of a Neighbourhood is a LinkLanguage - a Language that enables the sharing and thus synchronizing of links (see LinksAdapter in Language.ts). While there can and should be many different implementations with different trade-offs and features (like membranes etc.), there currently is one fully implemented and Holochain based LinkLanguage with the name Social Context.\n\nIt is deployed on the current test network (Language Language v0.0.5) under the address: QmZ1mkoY8nLvpxY3Mizx8UkUiwUzjxJxsqSTPPdH8sHxCQ.\nCreating our unique LinkLanguage clone through templating\n\n\n"
      },
      "date": 1649918101981
    },
    {
      "type": "add",
      "id": "ae09fc437a8b11e3",
      "item": {
        "type": "markdown",
        "id": "ae09fc437a8b11e3",
        "text": "But we should not just use this publicly known Language as the back-bone for our new Neighbourhood, since we need a unique clone. So what we want is to use this existing Language as a template and create a new copy with the same code but different [[UUID]] and/name in order to create a fresh space for our new Neighbourhood."
      },
      "after": "09aafe32281666d3",
      "date": 1649918112938
    },
    {
      "type": "edit",
      "id": "09aafe32281666d3",
      "item": {
        "type": "markdown",
        "id": "09aafe32281666d3",
        "text": "> The back-bone of a Neighbourhood is a LinkLanguage - a Language that enables the sharing and thus synchronizing of links (see LinksAdapter in Language.ts). While there can and should be many different implementations with different trade-offs and features (like membranes [⇒ [[semipermeable]]] etc.), there currently is one fully implemented and Holochain based LinkLanguage with the name Social Context.\n\nIt is deployed on the current test network (Language Language v0.0.5) under the address: QmZ1mkoY8nLvpxY3Mizx8UkUiwUzjxJxsqSTPPdH8sHxCQ.\nCreating our unique LinkLanguage clone through templating\n\n\n"
      },
      "date": 1673960853060
    },
    {
      "type": "edit",
      "id": "09aafe32281666d3",
      "item": {
        "type": "markdown",
        "id": "09aafe32281666d3",
        "text": "> The back-bone of a [[Neighbourhood]] is a LinkLanguage - a Language that enables the sharing and thus synchronizing of links (see LinksAdapter in Language.ts). While there can and should be many different implementations with different trade-offs and features (like membranes [⇒ [[semipermeable]]] etc.), there currently is one fully implemented and Holochain based LinkLanguage with the name Social Context.\n\nIt is deployed on the current test network (Language Language v0.0.5) under the address: QmZ1mkoY8nLvpxY3Mizx8UkUiwUzjxJxsqSTPPdH8sHxCQ.\nCreating our unique LinkLanguage clone through templating\n\n\n"
      },
      "date": 1673960902439
    },
    {
      "item": {
        "type": "factory",
        "id": "4fe59ff4a06e2571"
      },
      "id": "4fe59ff4a06e2571",
      "type": "add",
      "after": "ae09fc437a8b11e3",
      "date": 1673960979866
    },
    {
      "type": "edit",
      "id": "4fe59ff4a06e2571",
      "item": {
        "type": "video",
        "id": "4fe59ff4a06e2571",
        "text": "YOUTUBE 5BLDCWg6GZI"
      },
      "date": 1673960989710
    },
    {
      "id": "4fe59ff4a06e2571",
      "type": "move",
      "order": [
        "43b88da1528bedc7",
        "4fe59ff4a06e2571",
        "75910f9ea31a4727",
        "2c28802867a47a65",
        "09aafe32281666d3",
        "ae09fc437a8b11e3"
      ],
      "date": 1673960995420
    },
    {
      "type": "edit",
      "id": "4fe59ff4a06e2571",
      "item": {
        "type": "video",
        "id": "4fe59ff4a06e2571",
        "text": "YOUTUBE 5BLDCWg6GZI\nAD4M Explained in 12 minutes"
      },
      "date": 1673962656745
    },
    {
      "id": "d6939d187842ec24",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d6939d187842ec24",
        "text": "[https://youtu.be/5BLDCWg6GZI?t=394 6:34]\nTrick No.2 Social DNA"
      },
      "after": "4fe59ff4a06e2571",
      "date": 1673962819301
    },
    {
      "id": "40fdaa3f21ceb540",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "40fdaa3f21ceb540",
        "text": "[https://youtu.be/5BLDCWg6GZI?t=444 7:24]\nThat can easily be done through the Prolog engine that AD4M spawns for each perspective."
      },
      "after": "d6939d187842ec24",
      "date": 1673962822618
    },
    {
      "item": {
        "type": "factory",
        "id": "a12cd4bd38cb2661"
      },
      "id": "a12cd4bd38cb2661",
      "type": "add",
      "after": "ae09fc437a8b11e3",
      "date": 1673962848403
    },
    {
      "type": "edit",
      "id": "a12cd4bd38cb2661",
      "item": {
        "type": "pagefold",
        "id": "a12cd4bd38cb2661",
        "text": "Neighbourhood"
      },
      "date": 1673962852988
    },
    {
      "id": "a12cd4bd38cb2661",
      "type": "move",
      "order": [
        "43b88da1528bedc7",
        "4fe59ff4a06e2571",
        "d6939d187842ec24",
        "40fdaa3f21ceb540",
        "75910f9ea31a4727",
        "a12cd4bd38cb2661",
        "2c28802867a47a65",
        "09aafe32281666d3",
        "ae09fc437a8b11e3"
      ],
      "date": 1673962856865
    },
    {
      "id": "75aaad395dc4bf27",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "75aaad395dc4bf27",
        "text": "[https://youtu.be/5BLDCWg6GZI?t=187 3:07]\nThey are like the agent’s second brain or [[Zettelkasten]].",
        "alias": "d6939d187842ec24"
      },
      "after": "4fe59ff4a06e2571",
      "date": 1673963103253
    },
    {
      "type": "edit",
      "id": "43b88da1528bedc7",
      "item": {
        "type": "paragraph",
        "id": "43b88da1528bedc7",
        "text": "AD4M is a set of minimal assumptions to make all apps interoperate.  [https://ad4m.dev/ site], [https://github.com/perspect3vism github], [https://github.com/perspect3vism/ad4m github]"
      },
      "date": 1673976832601
    },
    {
      "type": "edit",
      "id": "43b88da1528bedc7",
      "item": {
        "type": "paragraph",
        "id": "43b88da1528bedc7",
        "text": "AD4M is a set of minimal assumptions to make all apps interoperate.  [https://ad4m.dev/ site], [https://github.com/perspect3vism github], [https://github.com/perspect3vism/ad4m github]"
      },
      "date": 1673976855771
    },
    {
      "item": {
        "type": "pagefold",
        "id": "48286c8380fd64b0",
        "text": "AD4M_0.2.10_x64.dmg"
      },
      "id": "48286c8380fd64b0",
      "type": "add",
      "after": "ae09fc437a8b11e3",
      "date": 1673978662770
    },
    {
      "type": "edit",
      "id": "48286c8380fd64b0",
      "item": {
        "type": "pagefold",
        "id": "48286c8380fd64b0",
        "text": "AD4M_0.2.10_x64.dmg"
      },
      "date": 1673978666055
    },
    {
      "type": "edit",
      "id": "48286c8380fd64b0",
      "item": {
        "type": "pagefold",
        "id": "48286c8380fd64b0",
        "text": "AD4M_0.2.10_x64.dmg"
      },
      "date": 1673978682527
    },
    {
      "item": {
        "type": "code",
        "id": "482d4aa77cc1c454",
        "text": "[2023-01-17T18:39:27.090805+01:00] INFO - Free port: 12000\n[2023-01-17T18:39:27.215959+01:00] INFO - init command by copy holochain binary\n[2023-01-17T18:39:31.819982+01:00] INFO - \u001b[2m AD4M executor starting with version:  0.2.10 \n[2023-01-17T18:39:31.820189+01:00] INFO -  Starting ad4m core with path: /Users/rgb/.ad4m \n[2023-01-17T18:39:31.820211+01:00] INFO -  => AD4M core language addresses: languageLanguage bundle (hidden) +  [\n\n[…]\n"
      },
      "id": "482d4aa77cc1c454",
      "type": "add",
      "after": "48286c8380fd64b0",
      "date": 1673978721987
    },
    {
      "type": "edit",
      "id": "482d4aa77cc1c454",
      "item": {
        "type": "code",
        "id": "482d4aa77cc1c454",
        "text": "[2023-01-17T18:39:27.090805+01:00] INFO - Free port: 12000\n[2023-01-17T18:39:27.215959+01:00] INFO - init command by copy holochain binary\n[2023-01-17T18:39:31.819982+01:00] INFO - \u001b[2m AD4M executor starting with version:  0.2.10 \n[2023-01-17T18:39:31.820189+01:00] INFO -  Starting ad4m core with path: /Users/rgb/.ad4m \n[2023-01-17T18:39:31.820211+01:00] INFO -  => AD4M core language addresses: languageLanguage bundle (hidden) +  [\n\n[…]\n"
      },
      "date": 1673978724326
    },
    {
      "type": "edit",
      "id": "482d4aa77cc1c454",
      "item": {
        "type": "code",
        "id": "482d4aa77cc1c454",
        "text": "[2023-01-17T18:39:27.090805+01:00] INFO - Free port: 12000\n[2023-01-17T18:39:27.215959+01:00] INFO - init command by copy holochain binary\n[2023-01-17T18:39:31.819982+01:00] INFO - \u001b[2m AD4M executor starting with version:  0.2.10 \n[2023-01-17T18:39:31.820189+01:00] INFO -  Starting ad4m core with path: /Users/rgb/.ad4m \n[2023-01-17T18:39:31.820211+01:00] INFO -  => AD4M core language addresses: languageLanguage bundle (hidden) +  [\n\n[…]\n"
      },
      "date": 1673978759211
    },
    {
      "item": {
        "type": "paragraph",
        "id": "5808b4784c5b8fb6",
        "text": "Install [AD4M https://github.com/perspect3vism/ad4m/releases github]"
      },
      "id": "5808b4784c5b8fb6",
      "type": "add",
      "after": "482d4aa77cc1c454",
      "date": 1673978772814
    },
    {
      "type": "edit",
      "id": "5808b4784c5b8fb6",
      "item": {
        "type": "paragraph",
        "id": "5808b4784c5b8fb6",
        "text": "Install [AD4M https://github.com/perspect3vism/ad4m/releases github]"
      },
      "date": 1673978786858
    },
    {
      "type": "edit",
      "id": "5808b4784c5b8fb6",
      "item": {
        "type": "paragraph",
        "id": "5808b4784c5b8fb6",
        "text": "Install [AD4M https://github.com/perspect3vism/ad4m/releases github]"
      },
      "date": 1673978793900
    },
    {
      "type": "edit",
      "id": "5808b4784c5b8fb6",
      "item": {
        "type": "paragraph",
        "id": "5808b4784c5b8fb6",
        "text": "Install [AD4M https://github.com/perspect3vism/ad4m/releases github]"
      },
      "date": 1673978801262
    },
    {
      "type": "add",
      "id": "152811e18638d5e5",
      "item": {
        "type": "paragraph",
        "id": "152811e18638d5e5",
        "text": "⇀ AD4M executor "
      },
      "after": "5808b4784c5b8fb6",
      "date": 1673978897617
    },
    {
      "type": "edit",
      "id": "152811e18638d5e5",
      "item": {
        "type": "paragraph",
        "id": "152811e18638d5e5",
        "text": "⇀ AD4M executor "
      },
      "date": 1673978908858
    },
    {
      "type": "add",
      "id": "34dc63afe4e7e184",
      "item": {
        "type": "paragraph",
        "id": "34dc63afe4e7e184",
        "text": "⇀ ad4m core"
      },
      "after": "152811e18638d5e5",
      "date": 1673978933219
    },
    {
      "type": "edit",
      "id": "34dc63afe4e7e184",
      "item": {
        "type": "paragraph",
        "id": "34dc63afe4e7e184",
        "text": "⇀ ad4m core"
      },
      "date": 1673978939255
    },
    {
      "type": "add",
      "id": "4af0cab142e4c6c6",
      "item": {
        "type": "paragraph",
        "id": "4af0cab142e4c6c6",
        "text": "⇀ AD4M core language addresses"
      },
      "after": "34dc63afe4e7e184",
      "date": 1673978958073
    },
    {
      "type": "edit",
      "id": "4af0cab142e4c6c6",
      "item": {
        "type": "paragraph",
        "id": "4af0cab142e4c6c6",
        "text": "⇀ AD4M core language addresses"
      },
      "date": 1673978964686
    },
    {
      "type": "edit",
      "id": "5808b4784c5b8fb6",
      "item": {
        "type": "paragraph",
        "id": "5808b4784c5b8fb6",
        "text": "Install [AD4M https://github.com/perspect3vism/ad4m/releases github]"
      },
      "date": 1673979042531
    },
    {
      "id": "5808b4784c5b8fb6",
      "type": "move",
      "order": [
        "43b88da1528bedc7",
        "4fe59ff4a06e2571",
        "75aaad395dc4bf27",
        "d6939d187842ec24",
        "40fdaa3f21ceb540",
        "75910f9ea31a4727",
        "a12cd4bd38cb2661",
        "2c28802867a47a65",
        "09aafe32281666d3",
        "ae09fc437a8b11e3",
        "48286c8380fd64b0",
        "5808b4784c5b8fb6",
        "482d4aa77cc1c454",
        "a9f374286d51eaa9",
        "152811e18638d5e5",
        "34dc63afe4e7e184",
        "4af0cab142e4c6c6"
      ],
      "date": 1673979045184,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "a9f374286d51eaa9",
      "item": {
        "type": "paragraph",
        "id": "a9f374286d51eaa9",
        "text": "⇀ copy [[Holochain]] binary"
      },
      "after": "5808b4784c5b8fb6",
      "date": 1673979046903
    },
    {
      "type": "edit",
      "id": "5808b4784c5b8fb6",
      "item": {
        "type": "paragraph",
        "id": "5808b4784c5b8fb6",
        "text": "Install [AD4M https://github.com/perspect3vism/ad4m/releases github]"
      },
      "date": 1673979067081
    },
    {
      "type": "fork",
      "date": 1673979070053
    },
    {
      "type": "edit",
      "id": "5808b4784c5b8fb6",
      "item": {
        "type": "paragraph",
        "id": "5808b4784c5b8fb6",
        "text": "Install AD4M [https://github.com/perspect3vism/ad4m/releases github]"
      },
      "date": 1673979137054
    },
    {
      "type": "edit",
      "id": "5808b4784c5b8fb6",
      "item": {
        "type": "paragraph",
        "id": "5808b4784c5b8fb6",
        "text": "Install AD4M [https://github.com/perspect3vism/ad4m/releases github] (AD4M Launcher v0.2.10)"
      },
      "date": 1673979150531
    },
    {
      "item": {
        "type": "factory",
        "id": "2de1ad85ed6e5c41"
      },
      "id": "2de1ad85ed6e5c41",
      "type": "add",
      "after": "4af0cab142e4c6c6",
      "date": 1673979394977
    },
    {
      "type": "edit",
      "id": "2de1ad85ed6e5c41",
      "item": {
        "type": "pagefold",
        "id": "2de1ad85ed6e5c41",
        "text": "Introduction"
      },
      "date": 1673979398893
    },
    {
      "item": {
        "type": "factory",
        "id": "9a46591da4ab6301"
      },
      "id": "9a46591da4ab6301",
      "type": "add",
      "after": "2de1ad85ed6e5c41",
      "date": 1673979407009
    },
    {
      "type": "edit",
      "id": "9a46591da4ab6301",
      "item": {
        "type": "paragraph",
        "id": "9a46591da4ab6301",
        "text": "[https://web.archive.org/web/20221129133722/https://docs.ad4m.dev/ archive]"
      },
      "date": 1673979416868
    },
    {
      "item": {
        "type": "factory",
        "id": "c2a6704ab6bc3870"
      },
      "id": "c2a6704ab6bc3870",
      "type": "add",
      "after": "9a46591da4ab6301",
      "date": 1673979432483
    },
    {
      "type": "edit",
      "id": "c2a6704ab6bc3870",
      "item": {
        "type": "paragraph",
        "id": "c2a6704ab6bc3870",
        "text": "The name AD4M is an ackronym for The Agent-Centric Distributed Application Meta-ontology or just: Agent-Centric DApp Meta-ontology.\n\nAD4M is a meta-ontology and a spanning layer - an upper extension to the TCP/IP stack. But AD4M is also a framework for building apps - mainly social apps, which renders it an engine (like a game engine) for social networks and collaboration apps. With its ability to bootstrap specific ontologies from its meta-ontology, it is a malleable social network itself. It could be the last one.\n\nAt its core, AD4M is just an idea, a formalization of a different approach, a complete set of basic concepts that together span a new paradigm of (distributed) software architecture.\n\nIt tries to capture the quintessence of what really goes on in human communication networks, in order to shape the digital space around that reality - instead of having the technology dictate how we communicate.\n\nPutting the human first and starting from a pure agent-centric approach, AD4M deconstructs the concept of applications and suggests a different principle for the creation and maintenance of coherence in communication networks: social contexts (who am I talking to?) and shared subjective meaning, instead of assumed objectivity implied by monolithic apps that don't differentiate between agents' different renderings and associations of the same data or event or subject."
      },
      "date": 1673979434045
    },
    {
      "item": {
        "type": "factory",
        "id": "27d483f0bf869b19"
      },
      "id": "27d483f0bf869b19",
      "type": "add",
      "after": "c2a6704ab6bc3870",
      "date": 1673979461906
    },
    {
      "type": "edit",
      "id": "27d483f0bf869b19",
      "item": {
        "type": "pagefold",
        "id": "27d483f0bf869b19",
        "text": "Meta-Ontology"
      },
      "date": 1673979463928
    },
    {
      "item": {
        "type": "factory",
        "id": "e6948425ed561c32"
      },
      "id": "e6948425ed561c32",
      "type": "add",
      "after": "27d483f0bf869b19",
      "date": 1673979469852
    },
    {
      "type": "edit",
      "id": "e6948425ed561c32",
      "item": {
        "type": "paragraph",
        "id": "e6948425ed561c32",
        "text": "What really goes on is that agents/humans exchange expressions of various (and evolving) languages in order to share their partial perspectives/associations with each other and thus convey meaning, build meaning, make sense of things together."
      },
      "date": 1673979471923
    },
    {
      "item": {
        "type": "factory",
        "id": "40392ccb90427280"
      },
      "id": "40392ccb90427280",
      "type": "add",
      "after": "e6948425ed561c32",
      "date": 1673979473788
    },
    {
      "type": "edit",
      "id": "40392ccb90427280",
      "item": {
        "type": "html",
        "id": "40392ccb90427280",
        "text": "<img\n width=\"100%\"\n src=\"https://web.archive.org/web/20221129133722im_/https://docs.ad4m.dev/ad4m-ontology.png\"\n>"
      },
      "date": 1673979498480
    },
    {
      "item": {
        "type": "factory",
        "id": "b541a5220dc5bb29"
      },
      "id": "b541a5220dc5bb29",
      "type": "add",
      "after": "40392ccb90427280",
      "date": 1673979514764
    },
    {
      "type": "edit",
      "id": "b541a5220dc5bb29",
      "item": {
        "type": "paragraph",
        "id": "b541a5220dc5bb29",
        "text": "In order to suggest a minimal assumption for maximum buy-in, AD4M carves out this quintessence of what human networks and the internet have in common, by postulating an ontology of three basic and irreducible concepts: "
      },
      "date": 1673979518632
    },
    {
      "type": "add",
      "id": "462f2a9e87ade5b8",
      "item": {
        "type": "paragraph",
        "id": "462f2a9e87ade5b8",
        "text": "[…]"
      },
      "after": "b541a5220dc5bb29",
      "date": 1673979520563
    },
    {
      "item": {
        "type": "factory",
        "id": "4c60fdb5f0820eca"
      },
      "id": "4c60fdb5f0820eca",
      "type": "add",
      "after": "462f2a9e87ade5b8",
      "date": 1673979577704
    },
    {
      "type": "edit",
      "id": "4c60fdb5f0820eca",
      "item": {
        "type": "pagefold",
        "id": "4c60fdb5f0820eca",
        "text": "~"
      },
      "date": 1673979580475
    },
    {
      "item": {
        "type": "factory",
        "id": "69e5bf3edbdb3fe3"
      },
      "id": "69e5bf3edbdb3fe3",
      "type": "add",
      "after": "4c60fdb5f0820eca",
      "date": 1673979582071
    },
    {
      "type": "edit",
      "id": "69e5bf3edbdb3fe3",
      "item": {
        "type": "code",
        "id": "69e5bf3edbdb3fe3",
        "text": "jsipfs cat /ipfs/QmRaaUwTNfwgFZpeUy8qrZwrp2dY4kCKmmB5xEqvH3vtD1/readme\n"
      },
      "date": 1673979584791
    },
    {
      "item": {
        "type": "factory",
        "id": "d507e06d6cbf3bbd"
      },
      "id": "d507e06d6cbf3bbd",
      "type": "add",
      "after": "69e5bf3edbdb3fe3",
      "date": 1673979731924
    },
    {
      "type": "edit",
      "id": "d507e06d6cbf3bbd",
      "item": {
        "type": "paragraph",
        "id": "d507e06d6cbf3bbd",
        "text": "https://js.ipfs.tech/"
      },
      "date": 1673979736720
    },
    {
      "item": {
        "type": "factory",
        "id": "7d6ce3b73c408856"
      },
      "id": "7d6ce3b73c408856",
      "type": "add",
      "after": "d507e06d6cbf3bbd",
      "date": 1673979840455
    },
    {
      "type": "edit",
      "id": "7d6ce3b73c408856",
      "item": {
        "type": "code",
        "id": "7d6ce3b73c408856",
        "text": "npm install ipfs -g\njsipfs cat QmPChd2hVbrJ6bfo3WBcTW4iZnpHm8TEzWkLHmLpXhF68A"
      },
      "date": 1673979853913
    },
    {
      "type": "add",
      "id": "fd4632e53434031f",
      "item": {
        "type": "paragraph",
        "id": "fd4632e53434031f",
        "text": "\n    Agents\n    Languages, and\n    Perspectives.\n"
      },
      "after": "b541a5220dc5bb29",
      "date": 1673979898528
    },
    {
      "type": "edit",
      "id": "fd4632e53434031f",
      "item": {
        "type": "paragraph",
        "id": "fd4632e53434031f",
        "text": "    Agents\n    Languages, and\n    Perspectives.\n"
      },
      "date": 1673979900959
    },
    {
      "type": "edit",
      "id": "fd4632e53434031f",
      "item": {
        "type": "paragraph",
        "id": "fd4632e53434031f",
        "text": "* Agents\n* Languages, and\n* Perspectives.\n"
      },
      "date": 1673979915674
    },
    {
      "type": "edit",
      "id": "fd4632e53434031f",
      "item": {
        "type": "markdown",
        "id": "fd4632e53434031f",
        "text": "* Agents\n* Languages, and\n* Perspectives.\n"
      },
      "date": 1673979917385
    },
    {
      "type": "edit",
      "id": "fd4632e53434031f",
      "item": {
        "type": "markdown",
        "id": "fd4632e53434031f",
        "text": "* [[Agent]]s\n* Languages, and\n* Perspectives.\n"
      },
      "date": 1673979925375
    },
    {
      "item": {
        "type": "factory",
        "id": "c4f2b6f47e5cfa3d"
      },
      "id": "c4f2b6f47e5cfa3d",
      "type": "add",
      "after": "7d6ce3b73c408856",
      "date": 1673979970892
    },
    {
      "type": "edit",
      "id": "7d6ce3b73c408856",
      "item": {
        "type": "code",
        "id": "7d6ce3b73c408856",
        "text": "npm install ipfs -g\n"
      },
      "date": 1673979971943
    },
    {
      "type": "edit",
      "id": "c4f2b6f47e5cfa3d",
      "item": {
        "type": "paragraph",
        "id": "c4f2b6f47e5cfa3d",
        "text": "jsipfs cat QmPChd2hVbrJ6bfo3WBcTW4iZnpHm8TEzWkLHmLpXhF68A"
      },
      "date": 1673979972674
    },
    {
      "type": "edit",
      "id": "fd4632e53434031f",
      "item": {
        "type": "markdown",
        "id": "fd4632e53434031f",
        "text": "* [[Agent]]s\n* [[Language]]s, and\n* [[Perspective]]s.\n"
      },
      "date": 1673980004385
    },
    {
      "type": "edit",
      "id": "c2a6704ab6bc3870",
      "item": {
        "type": "paragraph",
        "id": "c2a6704ab6bc3870",
        "text": "The name AD4M is an ackronym for The Agent-Centric Distributed Application Meta-ontology or just: Agent-Centric DApp Meta-ontology."
      },
      "date": 1673980044648
    },
    {
      "type": "add",
      "id": "6c54b3a2407d39b5",
      "item": {
        "type": "paragraph",
        "id": "6c54b3a2407d39b5",
        "text": "\nAD4M is a meta-ontology and a spanning layer - an upper extension to the TCP/IP stack. But AD4M is also a framework for building apps - mainly social apps, which renders it an engine (like a game engine) for social networks and collaboration apps. With its ability to bootstrap specific ontologies from its meta-ontology, it is a malleable social network itself. It could be the last one.\n\nAt its core, AD4M is just an idea, a formalization of a different approach, a complete set of basic concepts that together span a new paradigm of (distributed) software architecture.\n\nIt tries to capture the quintessence of what really goes on in human communication networks, in order to shape the digital space around that reality - instead of having the technology dictate how we communicate.\n\nPutting the human first and starting from a pure agent-centric approach, AD4M deconstructs the concept of applications and suggests a different principle for the creation and maintenance of coherence in communication networks: social contexts (who am I talking to?) and shared subjective meaning, instead of assumed objectivity implied by monolithic apps that don't differentiate between agents' different renderings and associations of the same data or event or subject."
      },
      "after": "c2a6704ab6bc3870",
      "date": 1673980046466
    },
    {
      "item": {
        "type": "factory",
        "id": "e96ceff05c905b10"
      },
      "id": "e96ceff05c905b10",
      "type": "add",
      "after": "c4f2b6f47e5cfa3d",
      "date": 1673980174055
    },
    {
      "type": "edit",
      "id": "e96ceff05c905b10",
      "item": {
        "type": "paragraph",
        "id": "e96ceff05c905b10",
        "text": "no IPFS repo found in /Users/rgb/.jsipfs."
      },
      "date": 1673980177066
    },
    {
      "type": "edit",
      "id": "e96ceff05c905b10",
      "item": {
        "type": "paragraph",
        "id": "e96ceff05c905b10",
        "text": "⇒ no IPFS repo found in /Users/rgb/.jsipfs."
      },
      "date": 1673980194825
    },
    {
      "item": {
        "type": "factory",
        "id": "02bc266db67c9b02"
      },
      "id": "02bc266db67c9b02",
      "type": "add",
      "after": "e96ceff05c905b10",
      "date": 1673980201731
    },
    {
      "type": "remove",
      "id": "c4f2b6f47e5cfa3d",
      "date": 1673980202931
    },
    {
      "type": "edit",
      "id": "02bc266db67c9b02",
      "item": {
        "type": "code",
        "id": "02bc266db67c9b02",
        "text": "jsipfs cat QmPChd2hVbrJ6bfo3WBcTW4iZnpHm8TEzWkLHmLpXhF68A"
      },
      "date": 1673980203976
    },
    {
      "id": "02bc266db67c9b02",
      "type": "move",
      "order": [
        "43b88da1528bedc7",
        "4fe59ff4a06e2571",
        "75aaad395dc4bf27",
        "d6939d187842ec24",
        "40fdaa3f21ceb540",
        "75910f9ea31a4727",
        "a12cd4bd38cb2661",
        "2c28802867a47a65",
        "09aafe32281666d3",
        "ae09fc437a8b11e3",
        "48286c8380fd64b0",
        "5808b4784c5b8fb6",
        "a9f374286d51eaa9",
        "482d4aa77cc1c454",
        "152811e18638d5e5",
        "34dc63afe4e7e184",
        "4af0cab142e4c6c6",
        "2de1ad85ed6e5c41",
        "9a46591da4ab6301",
        "c2a6704ab6bc3870",
        "6c54b3a2407d39b5",
        "27d483f0bf869b19",
        "e6948425ed561c32",
        "40392ccb90427280",
        "b541a5220dc5bb29",
        "fd4632e53434031f",
        "462f2a9e87ade5b8",
        "4c60fdb5f0820eca",
        "69e5bf3edbdb3fe3",
        "d507e06d6cbf3bbd",
        "7d6ce3b73c408856",
        "02bc266db67c9b02",
        "e96ceff05c905b10"
      ],
      "date": 1673980206003
    },
    {
      "type": "edit",
      "id": "462f2a9e87ade5b8",
      "item": {
        "type": "paragraph",
        "id": "462f2a9e87ade5b8",
        "text": "Languages include Expressions in their definition, and Perspectives include Links (Link Expressions, to be precise)."
      },
      "date": 1673980241948
    },
    {
      "type": "add",
      "id": "3b8a6f910436e261",
      "item": {
        "type": "paragraph",
        "id": "3b8a6f910436e261",
        "text": "[…]"
      },
      "after": "462f2a9e87ade5b8",
      "date": 1673980242555
    },
    {
      "type": "add",
      "id": "e6940e599910a106",
      "item": {
        "type": "paragraph",
        "id": "e6940e599910a106",
        "text": "Through combination of these basic principles, two important derived concepts are constructed:"
      },
      "after": "462f2a9e87ade5b8",
      "date": 1673980298531
    },
    {
      "type": "add",
      "id": "2e14ed8cd509f000",
      "item": {
        "type": "paragraph",
        "id": "2e14ed8cd509f000",
        "text": "* Neighbourhoods (i.e. shared Perspectives)\n* Social Organisms (i.e. fractal, super agents, defined through shared perspectives and shared interaction patterns/social DNA).\n"
      },
      "after": "e6940e599910a106",
      "date": 1673980321285
    },
    {
      "type": "edit",
      "id": "2e14ed8cd509f000",
      "item": {
        "type": "markdown",
        "id": "2e14ed8cd509f000",
        "text": "* Neighbourhoods (i.e. shared Perspectives)\n* Social Organisms (i.e. fractal, super agents, defined through shared perspectives and shared interaction patterns/social DNA).\n"
      },
      "date": 1673980323519
    },
    {
      "item": {
        "type": "factory",
        "id": "a8808a53a54829c1"
      },
      "id": "a8808a53a54829c1",
      "type": "add",
      "after": "e96ceff05c905b10",
      "date": 1673980476094
    },
    {
      "type": "edit",
      "id": "a8808a53a54829c1",
      "item": {
        "type": "paragraph",
        "id": "a8808a53a54829c1",
        "text": "docs.ad4m.dev\nHost\nError"
      },
      "date": 1673980480750
    },
    {
      "type": "edit",
      "id": "a8808a53a54829c1",
      "item": {
        "type": "paragraph",
        "id": "a8808a53a54829c1",
        "text": "docs.ad4m.dev\nHost\nError [https://docs.ad4m.dev/ site]"
      },
      "date": 1673980490418
    },
    {
      "item": {
        "type": "factory",
        "id": "fd88f66cc1fc448a"
      },
      "id": "fd88f66cc1fc448a",
      "type": "add",
      "after": "a8808a53a54829c1",
      "date": 1673980532566
    },
    {
      "type": "edit",
      "id": "fd88f66cc1fc448a",
      "item": {
        "type": "pagefold",
        "id": "fd88f66cc1fc448a",
        "text": "Core Concepts"
      },
      "date": 1673980537109
    },
    {
      "item": {
        "type": "factory",
        "id": "c86241a8b5208d6e"
      },
      "id": "c86241a8b5208d6e",
      "type": "add",
      "after": "fd88f66cc1fc448a",
      "date": 1673980548722
    },
    {
      "type": "edit",
      "id": "c86241a8b5208d6e",
      "item": {
        "type": "paragraph",
        "id": "c86241a8b5208d6e",
        "text": "Agents\n\n…are build around DID - Decentralized Identifier . Users can bring their existing identity or have AD4M create a new one.\n\nConceptually, AD4M agents are modelled as something that can speak and that can listen. Agents speak by creating Expressions of AD4M Languages, whereby these Expression get signed by the agent's DID key.\n\nAD4M agents also have a publicly shared Perspective, that other agents can see just by resolving their DID URI. This Perspective is like the agents semantic web page, consisting of statements the agent chooses to share with the world. Statements either about themselves (acting as public profile used by various apps), or about anything else.\n\nFinally, AD4M agents declare a direct message Language, an AD4M Language they choose to be contacted with for receiving messages.\n\nAD4M's built-in Agent-Language resolves DID URIs to AD4M Expressions that look like this: "
      },
      "date": 1673980551099
    },
    {
      "item": {
        "type": "factory",
        "id": "d6ac8ed01d1ed532"
      },
      "id": "d6ac8ed01d1ed532",
      "type": "add",
      "after": "c86241a8b5208d6e",
      "date": 1673980564078
    },
    {
      "type": "edit",
      "id": "d6ac8ed01d1ed532",
      "item": {
        "type": "code",
        "id": "d6ac8ed01d1ed532",
        "text": "\n{\n    did: \"did:key:zQ3shNWd4bg67ktTVg9EMnnrsRjhkH6cRNCjRRxfTaTqBniAf\",\n    perspective: {\n        links: []\n    },\n    directMessageLanguage: \"lang://QmZ9Z9Z5yZsegxArToww5zmwtPpojXN6zXJsi7WwMUa8\"\n}"
      },
      "date": 1673980566273
    },
    {
      "item": {
        "type": "factory",
        "id": "d8b9613f9d61d1b6"
      },
      "id": "d8b9613f9d61d1b6",
      "type": "add",
      "after": "d6ac8ed01d1ed532",
      "date": 1673980581874
    },
    {
      "type": "edit",
      "id": "d8b9613f9d61d1b6",
      "item": {
        "type": "paragraph",
        "id": "d8b9613f9d61d1b6",
        "text": "(see API docs about Agent)"
      },
      "date": 1673980584025
    },
    {
      "id": "a8808a53a54829c1",
      "type": "move",
      "order": [
        "43b88da1528bedc7",
        "4fe59ff4a06e2571",
        "75aaad395dc4bf27",
        "d6939d187842ec24",
        "40fdaa3f21ceb540",
        "75910f9ea31a4727",
        "a12cd4bd38cb2661",
        "2c28802867a47a65",
        "09aafe32281666d3",
        "ae09fc437a8b11e3",
        "48286c8380fd64b0",
        "5808b4784c5b8fb6",
        "a9f374286d51eaa9",
        "482d4aa77cc1c454",
        "152811e18638d5e5",
        "34dc63afe4e7e184",
        "4af0cab142e4c6c6",
        "2de1ad85ed6e5c41",
        "9a46591da4ab6301",
        "c2a6704ab6bc3870",
        "6c54b3a2407d39b5",
        "27d483f0bf869b19",
        "e6948425ed561c32",
        "40392ccb90427280",
        "b541a5220dc5bb29",
        "fd4632e53434031f",
        "462f2a9e87ade5b8",
        "e6940e599910a106",
        "2e14ed8cd509f000",
        "3b8a6f910436e261",
        "4c60fdb5f0820eca",
        "69e5bf3edbdb3fe3",
        "d507e06d6cbf3bbd",
        "7d6ce3b73c408856",
        "02bc266db67c9b02",
        "e96ceff05c905b10",
        "fd88f66cc1fc448a",
        "c86241a8b5208d6e",
        "d6ac8ed01d1ed532",
        "d8b9613f9d61d1b6",
        "a8808a53a54829c1"
      ],
      "date": 1673980588971
    },
    {
      "type": "edit",
      "id": "a8808a53a54829c1",
      "item": {
        "type": "paragraph",
        "id": "a8808a53a54829c1",
        "text": "⇒ docs.ad4m.dev\nHost\nError [https://docs.ad4m.dev/ site]"
      },
      "date": 1673980599683
    },
    {
      "type": "edit",
      "id": "c86241a8b5208d6e",
      "item": {
        "type": "paragraph",
        "id": "c86241a8b5208d6e",
        "text": "# Agents"
      },
      "date": 1673980625785
    },
    {
      "type": "edit",
      "id": "c86241a8b5208d6e",
      "item": {
        "type": "markdown",
        "id": "c86241a8b5208d6e",
        "text": "# Agents"
      },
      "date": 1673980629224
    },
    {
      "type": "add",
      "id": "e2fe320d1d01d58c",
      "item": {
        "type": "paragraph",
        "id": "e2fe320d1d01d58c",
        "text": "…are build around DID - Decentralized Identifier . Users can bring their existing identity or have AD4M create a new one.\n\nConceptually, AD4M agents are modelled as something that can speak and that can listen. Agents speak by creating Expressions of AD4M Languages, whereby these Expression get signed by the agent's DID key.\n\nAD4M agents also have a publicly shared Perspective, that other agents can see just by resolving their DID URI. This Perspective is like the agents semantic web page, consisting of statements the agent chooses to share with the world. Statements either about themselves (acting as public profile used by various apps), or about anything else.\n\nFinally, AD4M agents declare a direct message Language, an AD4M Language they choose to be contacted with for receiving messages.\n\nAD4M's built-in Agent-Language resolves DID URIs to AD4M Expressions that look like this: "
      },
      "after": "c86241a8b5208d6e",
      "date": 1673980633450
    },
    {
      "item": {
        "type": "factory",
        "id": "232f106a7e399656"
      },
      "id": "232f106a7e399656",
      "type": "add",
      "after": "a8808a53a54829c1",
      "date": 1673980641015
    },
    {
      "type": "edit",
      "id": "232f106a7e399656",
      "item": {
        "type": "paragraph",
        "id": "232f106a7e399656",
        "text": "# Languages\n\n"
      },
      "date": 1673980649165
    },
    {
      "type": "edit",
      "id": "232f106a7e399656",
      "item": {
        "type": "markdown",
        "id": "232f106a7e399656",
        "text": "# Languages\n\n"
      },
      "date": 1673980651365
    },
    {
      "type": "add",
      "id": "2a4d75c512d15b43",
      "item": {
        "type": "paragraph",
        "id": "2a4d75c512d15b43",
        "text": "…encapsulate the actual technology used to communicate, like Holochain or IPFS and enable Agents to create and share Expressions.\n\nExpressions are referenced via a URI of the kind:\n<language>://<language specific expression address>\n(with special cases like DID URIs being parsed as such and resolved through the Agent Language).\n\nAD4M resolves these URIs by first looking up the Language via its hash (and potentially downloading the Language through the built-in Language of Languages) and then asking the Language about the Expression with given address.\n\nLanguages are distributed and interpreted as JavaScript modules. AD4M passes in proxy-object to the managed Holochain, IPFS, etc. instances so Language developers can use these technologies without having to set them up or manage themselves. "
      },
      "after": "232f106a7e399656",
      "date": 1673980652449
    },
    {
      "item": {
        "type": "factory",
        "id": "e7837980d9f32467"
      },
      "id": "e7837980d9f32467",
      "type": "add",
      "after": "2a4d75c512d15b43",
      "date": 1673980693297
    },
    {
      "type": "edit",
      "id": "e7837980d9f32467",
      "item": {
        "type": "code",
        "id": "e7837980d9f32467",
        "text": "// Example of a Language that uses the Holochain proxy object                        \nexport default async function create(context: LanguageContext): Promise {\n    const Holochain = context.Holochain as HolochainLanguageDelegate;\n    await Holochain.registerDNAs([{ file: DNA, nick: DNA_NICK }]);\n\n    // ...\n\n    async get(expressionAddress: Address): Promise {\n        const expression = await this.#DNA.call(\n          DNA_NICK,\n          \"zome_name\",\n          \"get_expression_zome_function_name\",\n          expressionAddress\n        );\n    }\n}"
      },
      "date": 1673980696754
    },
    {
      "item": {
        "type": "factory",
        "id": "a733969bfe91af16"
      },
      "id": "a733969bfe91af16",
      "type": "add",
      "after": "e7837980d9f32467",
      "date": 1673980705830
    },
    {
      "type": "edit",
      "id": "a733969bfe91af16",
      "item": {
        "type": "paragraph",
        "id": "a733969bfe91af16",
        "text": "(Read section in docs about how to write AD4M Languages)"
      },
      "date": 1673980707561
    },
    {
      "item": {
        "type": "factory",
        "id": "ea3a7c96fc077173"
      },
      "id": "ea3a7c96fc077173",
      "type": "add",
      "after": "a733969bfe91af16",
      "date": 1673980720850
    },
    {
      "type": "edit",
      "id": "ea3a7c96fc077173",
      "item": {
        "type": "paragraph",
        "id": "ea3a7c96fc077173",
        "text": "# Perspectives\n\n"
      },
      "date": 1673980729016
    },
    {
      "type": "edit",
      "id": "ea3a7c96fc077173",
      "item": {
        "type": "markdown",
        "id": "ea3a7c96fc077173",
        "text": "# Perspectives\n\n"
      },
      "date": 1673980730590
    },
    {
      "type": "add",
      "id": "2073aee0c996d728",
      "item": {
        "type": "paragraph",
        "id": "2073aee0c996d728",
        "text": "…are local and private graph databases. They represent context and association between expressions.\n\nThey consist of a list of RDF/semantic web like triplets (subject-predicate-obejct) called links because all three items are just Expression URIs pointing to Expressions of arbitrary Languages.\n\nPerspectives are like Solid’s pods, but they are agent-centric:\n\n    Atomic Perspectives belong to and are stored with a single Agent.\n    Links inside Perspectives are Link Expressions, so they include their provenance and cryptographic signature\n\nWhile Expressions are objective (every agent resolving their URI renders the same data), Perspectives represent subjective associations between objective Expressions.\n\n(See Gettint Started section above for how to deal with Perspectives)"
      },
      "after": "ea3a7c96fc077173",
      "date": 1673980731357
    },
    {
      "type": "edit",
      "id": "2073aee0c996d728",
      "item": {
        "type": "paragraph",
        "id": "2073aee0c996d728",
        "text": "…are local and private graph databases. They represent context and association between expressions.\n\nThey consist of a list of RDF/semantic web like triplets (subject-predicate-obejct) called links because all three items are just Expression URIs pointing to Expressions of arbitrary Languages.\n\nPerspectives are like Solid’s pods, but they are agent-centric:"
      },
      "date": 1673980766636
    },
    {
      "type": "add",
      "id": "156d3488ff1bf0cb",
      "item": {
        "type": "paragraph",
        "id": "156d3488ff1bf0cb",
        "text": "* Atomic Perspectives belong to and are stored with a single Agent.\n* Links inside Perspectives are Link Expressions, so they include their provenance and cryptographic signature"
      },
      "after": "2073aee0c996d728",
      "date": 1673980781899
    },
    {
      "type": "add",
      "id": "6cfa82a1d9d0a926",
      "item": {
        "type": "paragraph",
        "id": "6cfa82a1d9d0a926",
        "text": "While Expressions are objective (every agent resolving their URI renders the same data), Perspectives represent subjective associations between objective Expressions.\n\n(See Gettint Started section above for how to deal with Perspectives)"
      },
      "after": "156d3488ff1bf0cb",
      "date": 1673980783539
    },
    {
      "type": "edit",
      "id": "156d3488ff1bf0cb",
      "item": {
        "type": "markdown",
        "id": "156d3488ff1bf0cb",
        "text": "* Atomic Perspectives belong to and are stored with a single Agent.\n* Links inside Perspectives are Link Expressions, so they include their provenance and cryptographic signature"
      },
      "date": 1673980784895
    }
  ]
}