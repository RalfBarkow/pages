{
  "title": "2024-03-06",
  "story": [
    {
      "type": "paragraph",
      "id": "2a8bfdc48f4eb588",
      "text": "⇐ [[Antwort]] (within [[Location in the Network of Message Paths]])"
    },
    {
      "type": "paragraph",
      "id": "5f02d0299949afcf",
      "text": "Die virtuelle Maschine antwortet wahr oder falsch. Das ist das Ergebnis einer willkürlichen [[Auswahl]]."
    },
    {
      "type": "paragraph",
      "id": "72716a647b19de3e",
      "text": "[[Act of Answering]]"
    },
    {
      "type": "paragraph",
      "id": "2665ce43d7e684d9",
      "text": "[[Ruliology]] See: [[Ruliad]]"
    },
    {
      "type": "paragraph",
      "id": "9f7aa72c8b2125e6",
      "text": "We need a function to compute the diff of a [[Graph]] and a function to visualize this diff."
    },
    {
      "type": "paragraph",
      "id": "87304dc2de6a37af",
      "text": "\nHARDING, Bradley, GOULET, Marc-André, COUSINEAU, Denis and CHARTIER, Sylvain, 2017. Are recurrent associative memories good models of decision making? Modelling discrimination decisions from different perspectives. In: 2017 International Joint Conference on Neural Networks (IJCNN). Online. IEEE. 2017. p. 2621–2628. Available from: https://ieeexplore.ieee.org/abstract/document/7966176/ [Accessed 6 March 2024]. \n"
    },
    {
      "type": "paragraph",
      "id": "e9a807040ee571e6",
      "text": "⇐ [[How to Go From a Problem to a Bad Solution]] and then to a good solution – an example Graphviz dialog of the new Wiki Client [https://www.linkedin.com/posts/ralfbarkow_federatedwiki-activity-7171051308194480128-EuA3 post]"
    },
    {
      "type": "reference",
      "id": "fbeb517fe392c3c2",
      "site": "wiki.ralfbarkow.ch",
      "slug": "semi-edge-walk",
      "title": "Semi-Edge Walk",
      "text": "[…] a [[Walk]] can be imagined as an actual walk of a [[Traveler]] along the edges in a diagrammatic representation of the [[Graph]] under consideration. The traveler always walks along an [[Edge]] from one end-vertex to the other. Suppose now that we allow the traveler to change his mind when coming to the midpoint of an edge: instead of continuing along the edge towards the other end-vertex, he could return to the initial end-vertex and continue as he wishes. Then the basic constituent of a walk is no longer an edge; rather we could speak of a [[Walk as a Sequence of Semi-Edges]]."
    },
    {
      "type": "paragraph",
      "id": "c561acb93a8b4bc7",
      "text": "⇒ [[Bayesian Reader]]"
    },
    {
      "type": "paragraph",
      "id": "339feb638d120314",
      "text": "⇒ [[Tree Boosting]]"
    },
    {
      "type": "paragraph",
      "id": "857cab8dcd0f95c0",
      "text": "[https://en.wikipedia.org/w/index.php?title=Gradient_boosting&action=edit&section=1 wikipedia] … Algorithmen, die eine Kostenfunktion im Funktionsraum optimieren, indem sie iterativ eine Funktion (schwache Hypothese) wählen, die in die Richtung des negativen Gradienten zeigt. See: [[Force]] (within [[What Is a Pattern?]]), [[Choosing Which Benefit Function to Maximize]]"
    },
    {
      "type": "paragraph",
      "id": "f014bd3203749b79",
      "text": "⇐ [[inner]] [http://wiki.ralfbarkow.ch/view/lineup-para/view/lineup-graph/view/inner lineup]: [[lineup-para]] – [[lineup-graph]] – [[inner]]"
    },
    {
      "type": "paragraph",
      "id": "7def97504f52de5a",
      "text": "We want to compare the graph sent with [[broadcastGraph]](graph) with the graph received in graphStreamIncoming(jsonString). [https://github.com/RalfBarkow/assets/commit/cdd43fdbc09fe63a3735ea3d0364798a7d766128 commit]"
    },
    {
      "type": "code",
      "id": "1fca17789fe78f56",
      "text": "function graphStreamIncoming(message){\n            console.log(\"graphStreamIncoming reached\");\n            // Is the function called twice in every case?\n\n            // Parse the JSON string into a JavaScript object\n            const json = JSON.parse(message);\n\n            const incomingGraph = new Graph(json.nodes, json.rels); // incoming broadcast\n            return incomingGraph;\n            //return message;\n        }"
    },
    {
      "type": "code",
      "id": "5d2aa7b1b349c622",
      "text": "// Compare the incoming broadcast of a graph with the outgoing broadcast\nasync function graphStream(graph) {\n    console.log(\"graphStream reached\");\n\n    const json = JSON.parse(graph);\n    const outgoingGraph = new Graph(json.nodes, json.rels); // outgoing broadcast;\n    console.log(\"outgoingGraph: \", outgoingGraph);\n\n    // Wait for the next incoming graph\n    const incomingGraph = await graphStreamIncoming(graph);\n    console.log(\"incomingGraph: \", incomingGraph);\n\n}"
    },
    {
      "type": "paragraph",
      "id": "c24ec0dcfbc1de7a",
      "text": "2 graphs incoming"
    },
    {
      "type": "image",
      "id": "646d57f3ccda1b34",
      "text": "Diff in rels",
      "size": "wide",
      "width": 418,
      "height": 85,
      "url": "/assets/plugins/image/2579b484829d813faa722f3f8433dcde.jpg"
    },
    {
      "type": "code",
      "id": "ff4e5ebea23e88bb",
      "text": "681,683c681\n<       \"out\": [\n<         68\n<       ],\n---\n>       \"out\": [],\n688,690c686\n<       \"in\": [\n<         68\n<       ],\n---\n>       \"in\": [],\n1102,1107d1097\n<       \"props\": {}\n<     },\n<     {\n<       \"type\": \"fromPickToNext\",\n<       \"from\": 68,\n<       \"to\": 69,\n"
    },
    {
      "type": "image",
      "id": "363a5034d2a4b56a",
      "text": "The graphStream function calls graphStreamIncoming twice",
      "size": "wide",
      "width": 418,
      "height": 458,
      "url": "/assets/plugins/image/2bab38c37617c35fb01d59cec41de57e.jpg"
    },
    {
      "type": "markdown",
      "id": "cf2e7da626955bab",
      "text": "… for the second time within the `await` expression."
    },
    {
      "type": "code",
      "id": "399c67485e18c137",
      "text": "const incomingGraph = await graphStreamIncoming(graph);"
    },
    {
      "type": "paragraph",
      "id": "6e5e420d3e15c818",
      "text": "Based on this behavior, we could visualize the change in the incoming graph as a diff and animate the transition from one state to another."
    },
    {
      "type": "paragraph",
      "id": "6c1b9b09afd7b36a",
      "text": "[[Capture Graph Changes]]"
    },
    {
      "type": "paragraph",
      "id": "0f66a2229a237ee1",
      "text": "– [[Edge Insertion]] (addRel)"
    },
    {
      "type": "image",
      "id": "d8379c22e9b28191",
      "text": "Illustration of fundamental graph representations (Adjacency Matrix, Adjacency List, Edge List) and remarks on their usage in dynamic settings.",
      "size": "wide",
      "width": 418,
      "height": 190,
      "url": "/assets/plugins/image/31409b35af789b62f6af3d8bcf5e34e6.jpg"
    },
    {
      "type": "paragraph",
      "id": "bc8be1ef350101c1",
      "text": "BESTA, Maciej, FISCHER, Marc, KALAVRI, Vasiliki, KAPRALOV, Michael and HOEFLER, Torsten, 2020. Practice of streaming and dynamic graphs: Concepts, models, systems, and parallelism. arXiv. 2020. P. 1912–12740. [https://www.research-collection.ethz.ch/handle/20.500.11850/462546 ethz] [Accessed 6 March 2024]. [https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/462546/streaming-graphs.pdf?sequence=1&isAllowed=y pdf]\n"
    },
    {
      "type": "paragraph",
      "id": "e5c3ce0925bdbae5",
      "text": "A tuple corresponds to one edge."
    },
    {
      "type": "paragraph",
      "id": "02f9d0e527248446",
      "text": "I think we are observing the \"edge insertion\" phenomenon here (next page adds a new rel of type \"fromPickToNext\" to rels)."
    },
    {
      "type": "image",
      "id": "17372cf6c8c814c4",
      "text": "42 – 43",
      "size": "wide",
      "width": 418,
      "height": 293,
      "url": "/assets/plugins/image/750e44807883942b4f0134b6619a5a76.jpg"
    },
    {
      "type": "paragraph",
      "id": "d01970b8459e3bbd",
      "text": "⇐ [[inner]] [http://wiki.ralfbarkow.ch/view/lineup-para/view/lineup-graph/view/inner lineup]: [[lineup-para]] – [[lineup-graph]] – [[inner]]"
    },
    {
      "type": "reference",
      "id": "389ceac464e50c6e",
      "site": "kerry.relocalizecreativity.net",
      "slug": "clean-questions",
      "title": "Clean Questions",
      "text": "Transcriber: Amanda Chu\nReviewer: Peter van de Ven Thank you. It's lovely to follow that last talk because I think that\nwhat I'm wanting to present to you is a [[Language of Inquiry]], a way that we can inquire into our own and one another's experience in a completely different way to any that I experienced growing up. What I'm going to do with this talk is I'm going to tell you a tiny bit about my background and why this was so important to me, a little bit about David Grove, who originated [[Clean Questions]] – this is not my tool. What I've done with it is my work. And it is shareware;\nthat man gave it away. He said, Take it."
    },
    {
      "type": "paragraph",
      "id": "df40a69318125d20",
      "text": "⇒ [[Graphs Evolve Over Time]]"
    },
    {
      "type": "paragraph",
      "id": "b771e0a69dc51069",
      "text": "[[Speed Bot]] and \"a new graph generator, based on a 'forest fire' [[spread]]ing process\""
    },
    {
      "type": "paragraph",
      "id": "7fbffcf16bcfa367",
      "text": "[[Journal to Graph]], [[Journal]] → \"[[~/journal/0]]\""
    },
    {
      "type": "paragraph",
      "id": "fc0940241cc36684",
      "text": "[[Forest Fire Model]]"
    },
    {
      "type": "paragraph",
      "id": "1f5e100a72cac435",
      "text": "⇐ [[High-Dimensional Computing]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2024-03-06",
        "story": []
      },
      "date": 1709704908032
    },
    {
      "item": {
        "type": "factory",
        "id": "9f7aa72c8b2125e6"
      },
      "id": "9f7aa72c8b2125e6",
      "type": "add",
      "date": 1709704909610
    },
    {
      "type": "edit",
      "id": "9f7aa72c8b2125e6",
      "item": {
        "type": "paragraph",
        "id": "9f7aa72c8b2125e6",
        "text": "We need a function to compute the diff of a [[Graph]] and a function to visualize this diff."
      },
      "date": 1709704919335
    },
    {
      "item": {
        "type": "factory",
        "id": "3261d25024d2e9a9"
      },
      "id": "3261d25024d2e9a9",
      "type": "add",
      "after": "9f7aa72c8b2125e6",
      "date": 1709705148762
    },
    {
      "type": "edit",
      "id": "3261d25024d2e9a9",
      "item": {
        "type": "paragraph",
        "id": "3261d25024d2e9a9",
        "text": "⇐ [[Antwort]]"
      },
      "date": 1709705169178
    },
    {
      "id": "3261d25024d2e9a9",
      "type": "move",
      "order": [
        "3261d25024d2e9a9",
        "9f7aa72c8b2125e6"
      ],
      "date": 1709705171855
    },
    {
      "id": "2a8bfdc48f4eb588",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2a8bfdc48f4eb588",
        "text": "[[Antwort]] (within [[Location in the Network of Message Paths]])"
      },
      "after": "3261d25024d2e9a9",
      "attribution": {
        "page": "Antwort",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709705185899
    },
    {
      "type": "remove",
      "id": "3261d25024d2e9a9",
      "date": 1709705192997
    },
    {
      "type": "edit",
      "id": "2a8bfdc48f4eb588",
      "item": {
        "type": "paragraph",
        "id": "2a8bfdc48f4eb588",
        "text": "⇐ [[Antwort]] (within [[Location in the Network of Message Paths]])"
      },
      "date": 1709705196744
    },
    {
      "item": {
        "type": "factory",
        "id": "5f02d0299949afcf"
      },
      "id": "5f02d0299949afcf",
      "type": "add",
      "after": "9f7aa72c8b2125e6",
      "date": 1709705295335
    },
    {
      "id": "5f02d0299949afcf",
      "type": "move",
      "order": [
        "2a8bfdc48f4eb588",
        "5f02d0299949afcf",
        "9f7aa72c8b2125e6"
      ],
      "date": 1709705297330
    },
    {
      "type": "edit",
      "id": "5f02d0299949afcf",
      "item": {
        "type": "paragraph",
        "id": "5f02d0299949afcf",
        "text": "Die virtuelle Maschine antwortet wahr oder falsch. Das ist das Ergebnis einer willkürlichen [[Auswahl]]."
      },
      "date": 1709705337402
    },
    {
      "item": {
        "type": "factory",
        "id": "87304dc2de6a37af"
      },
      "id": "87304dc2de6a37af",
      "type": "add",
      "after": "9f7aa72c8b2125e6",
      "date": 1709706663217
    },
    {
      "type": "edit",
      "id": "87304dc2de6a37af",
      "item": {
        "type": "paragraph",
        "id": "87304dc2de6a37af",
        "text": "\nHARDING, Bradley, GOULET, Marc-André, COUSINEAU, Denis and CHARTIER, Sylvain, 2017. Are recurrent associative memories good models of decision making? Modelling discrimination decisions from different perspectives. In: 2017 International Joint Conference on Neural Networks (IJCNN). Online. IEEE. 2017. p. 2621–2628. Available from: https://ieeexplore.ieee.org/abstract/document/7966176/ [Accessed 6 March 2024]. \n"
      },
      "date": 1709706665901
    },
    {
      "type": "add",
      "id": "72716a647b19de3e",
      "item": {
        "type": "paragraph",
        "id": "72716a647b19de3e",
        "text": "[[Act of Answering]]"
      },
      "after": "5f02d0299949afcf",
      "date": 1709706971075
    },
    {
      "id": "2665ce43d7e684d9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2665ce43d7e684d9",
        "text": "[[Ruliology]] See: [[Ruliad]]"
      },
      "after": "72716a647b19de3e",
      "attribution": {
        "page": "R",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709708466509
    },
    {
      "item": {
        "type": "factory",
        "id": "e9a807040ee571e6"
      },
      "id": "e9a807040ee571e6",
      "type": "add",
      "after": "87304dc2de6a37af",
      "date": 1709712808723
    },
    {
      "type": "edit",
      "id": "e9a807040ee571e6",
      "item": {
        "type": "paragraph",
        "id": "e9a807040ee571e6",
        "text": "[https://www.linkedin.com/posts/ralfbarkow_federatedwiki-activity-7171051308194480128-EuA3 post]"
      },
      "date": 1709712814447
    },
    {
      "type": "edit",
      "id": "e9a807040ee571e6",
      "item": {
        "type": "paragraph",
        "id": "e9a807040ee571e6",
        "text": "⇐ [[How to Go From a Problem to a Bad Solution]] and then to a good solution – an example Graphviz dialog of the new Wiki Client [https://www.linkedin.com/posts/ralfbarkow_federatedwiki-activity-7171051308194480128-EuA3 post]"
      },
      "date": 1709712905309
    },
    {
      "item": {
        "type": "factory",
        "id": "fbeb517fe392c3c2"
      },
      "id": "fbeb517fe392c3c2",
      "type": "add",
      "after": "e9a807040ee571e6",
      "date": 1709713864757
    },
    {
      "type": "edit",
      "id": "fbeb517fe392c3c2",
      "item": {
        "type": "reference",
        "id": "fbeb517fe392c3c2",
        "site": "wiki.ralfbarkow.ch",
        "slug": "semi-edge-walk",
        "title": "Semi-Edge Walk",
        "text": "[…] a [[Walk]] can be imagined as an actual walk of a [[Traveler]] along the edges in a diagrammatic representation of the [[Graph]] under consideration. The traveler always walks along an [[Edge]] from one end-vertex to the other. Suppose now that we allow the traveler to change his mind when coming to the midpoint of an edge: instead of continuing along the edge towards the other end-vertex, he could return to the initial end-vertex and continue as he wishes. Then the basic constituent of a walk is no longer an edge; rather we could speak of a [[Walk a"
      },
      "date": 1709713867048
    },
    {
      "type": "edit",
      "id": "fbeb517fe392c3c2",
      "item": {
        "type": "reference",
        "id": "fbeb517fe392c3c2",
        "site": "wiki.ralfbarkow.ch",
        "slug": "semi-edge-walk",
        "title": "Semi-Edge Walk",
        "text": "[…] a [[Walk]] can be imagined as an actual walk of a [[Traveler]] along the edges in a diagrammatic representation of the [[Graph]] under consideration. The traveler always walks along an [[Edge]] from one end-vertex to the other. Suppose now that we allow the traveler to change his mind when coming to the midpoint of an edge: instead of continuing along the edge towards the other end-vertex, he could return to the initial end-vertex and continue as he wishes. Then the basic constituent of a walk is no longer an edge; rather we could speak of a [[Walk as a Sequence of Semi-Edges]]."
      },
      "date": 1709713911891
    },
    {
      "item": {
        "type": "factory",
        "id": "c561acb93a8b4bc7"
      },
      "id": "c561acb93a8b4bc7",
      "type": "add",
      "after": "fbeb517fe392c3c2",
      "date": 1709715550969
    },
    {
      "type": "edit",
      "id": "c561acb93a8b4bc7",
      "item": {
        "type": "paragraph",
        "id": "c561acb93a8b4bc7",
        "text": "⇒ [[Bayesian Reader]]"
      },
      "date": 1709715560052
    },
    {
      "item": {
        "type": "factory",
        "id": "339feb638d120314"
      },
      "id": "339feb638d120314",
      "type": "add",
      "after": "c561acb93a8b4bc7",
      "date": 1709717775849
    },
    {
      "type": "edit",
      "id": "339feb638d120314",
      "item": {
        "type": "paragraph",
        "id": "339feb638d120314",
        "text": "⇒ [[Tree Boosting]]"
      },
      "date": 1709717785094
    },
    {
      "item": {
        "type": "factory",
        "id": "857cab8dcd0f95c0"
      },
      "id": "857cab8dcd0f95c0",
      "type": "add",
      "after": "339feb638d120314",
      "date": 1709718364953
    },
    {
      "type": "edit",
      "id": "857cab8dcd0f95c0",
      "item": {
        "type": "paragraph",
        "id": "857cab8dcd0f95c0",
        "text": "[https://en.wikipedia.org/w/index.php?title=Gradient_boosting&action=edit&section=1 wikipedia]"
      },
      "date": 1709718372177
    },
    {
      "type": "edit",
      "id": "857cab8dcd0f95c0",
      "item": {
        "type": "paragraph",
        "id": "857cab8dcd0f95c0",
        "text": "[https://en.wikipedia.org/w/index.php?title=Gradient_boosting&action=edit&section=1 wikipedia] … Algorithmen, die eine Kostenfunktion im Funktionsraum optimieren, indem sie iterativ eine Funktion (schwache Hypothese) wählen, die in die Richtung des negativen Gradienten zeigt. "
      },
      "date": 1709718390768
    },
    {
      "item": {
        "type": "factory",
        "id": "f014bd3203749b79"
      },
      "id": "f014bd3203749b79",
      "type": "add",
      "after": "857cab8dcd0f95c0",
      "date": 1709718580911
    },
    {
      "type": "edit",
      "id": "f014bd3203749b79",
      "item": {
        "type": "paragraph",
        "id": "f014bd3203749b79",
        "text": "[[inner]] [http://wiki.ralfbarkow.ch/view/lineup-para/view/lineup-graph/view/inner lineup]"
      },
      "date": 1709718602129
    },
    {
      "type": "edit",
      "id": "f014bd3203749b79",
      "item": {
        "type": "paragraph",
        "id": "f014bd3203749b79",
        "text": "[[inner]] [http://wiki.ralfbarkow.ch/view/lineup-para/view/lineup-graph/view/inner lineup]: [[lineup-para]] [[lineup-graph]] [[inner]]"
      },
      "date": 1709719268388
    },
    {
      "type": "edit",
      "id": "f014bd3203749b79",
      "item": {
        "type": "paragraph",
        "id": "f014bd3203749b79",
        "text": "[[inner]] [http://wiki.ralfbarkow.ch/view/lineup-para/view/lineup-graph/view/inner lineup]: [[lineup-para]] – [[lineup-graph]] – [[inner]]"
      },
      "date": 1709719282124
    },
    {
      "item": {
        "type": "factory",
        "id": "ff4e5ebea23e88bb"
      },
      "id": "ff4e5ebea23e88bb",
      "type": "add",
      "after": "f014bd3203749b79",
      "date": 1709721081942
    },
    {
      "type": "edit",
      "id": "ff4e5ebea23e88bb",
      "item": {
        "type": "code",
        "id": "ff4e5ebea23e88bb",
        "text": "692,694c692\n<       \"out\": [\n<         70\n<       ],\n---\n>       \"out\": [],\n699,701c697\n<       \"in\": [\n<         70\n<       ],\n---\n>       \"in\": [],\n1125,1130d1120\n<       \"props\": {}\n<     },\n<     {\n<       \"type\": \"fromPickToNext\",\n<       \"from\": 69,\n<       \"to\": 70,\n"
      },
      "date": 1709721085274
    },
    {
      "type": "edit",
      "id": "857cab8dcd0f95c0",
      "item": {
        "type": "paragraph",
        "id": "857cab8dcd0f95c0",
        "text": "[https://en.wikipedia.org/w/index.php?title=Gradient_boosting&action=edit&section=1 wikipedia] … Algorithmen, die eine Kostenfunktion im Funktionsraum optimieren, indem sie iterativ eine Funktion (schwache Hypothese) wählen, die in die Richtung des negativen Gradienten zeigt."
      },
      "date": 1709721191073
    },
    {
      "type": "add",
      "id": "7def97504f52de5a",
      "item": {
        "type": "paragraph",
        "id": "7def97504f52de5a",
        "text": "We want to compare the graph sent with broadcastGraph(graph) with the graph received in graphStream(jsonString)."
      },
      "after": "857cab8dcd0f95c0",
      "date": 1709721191883
    },
    {
      "id": "7def97504f52de5a",
      "type": "move",
      "order": [
        "2a8bfdc48f4eb588",
        "5f02d0299949afcf",
        "72716a647b19de3e",
        "2665ce43d7e684d9",
        "9f7aa72c8b2125e6",
        "87304dc2de6a37af",
        "e9a807040ee571e6",
        "fbeb517fe392c3c2",
        "c561acb93a8b4bc7",
        "339feb638d120314",
        "857cab8dcd0f95c0",
        "f014bd3203749b79",
        "7def97504f52de5a",
        "ff4e5ebea23e88bb"
      ],
      "date": 1709721194313
    },
    {
      "type": "edit",
      "id": "f014bd3203749b79",
      "item": {
        "type": "paragraph",
        "id": "f014bd3203749b79",
        "text": "⇐ [[inner]] [http://wiki.ralfbarkow.ch/view/lineup-para/view/lineup-graph/view/inner lineup]: [[lineup-para]] – [[lineup-graph]] – [[inner]]"
      },
      "date": 1709721204212
    },
    {
      "item": {
        "type": "factory",
        "id": "1fca17789fe78f56"
      },
      "id": "1fca17789fe78f56",
      "type": "add",
      "after": "ff4e5ebea23e88bb",
      "date": 1709725461951
    },
    {
      "type": "edit",
      "id": "1fca17789fe78f56",
      "item": {
        "type": "code",
        "id": "1fca17789fe78f56",
        "text": " function graphStreamIncoming(message){\n                console.log(\"graphStreamIncoming reached\");\n                // Is the function called twice in every case?\n\n                // Parse the JSON string into a JavaScript object\n                const json = JSON.parse(message);\n\n                const incoming = new Graph(json.nodes, json.rels); // incoming broadcast\n                return incoming;\n                //return message;\n            }"
      },
      "date": 1709725464872
    },
    {
      "type": "edit",
      "id": "1fca17789fe78f56",
      "item": {
        "type": "code",
        "id": "1fca17789fe78f56",
        "text": "function graphStreamIncoming(message){\n            console.log(\"graphStreamIncoming reached\");\n            // Is the function called twice in every case?\n\n            // Parse the JSON string into a JavaScript object\n            const json = JSON.parse(message);\n\n            const incoming = new Graph(json.nodes, json.rels); // incoming broadcast\n            return incoming;\n            //return message;\n        }"
      },
      "date": 1709725480338
    },
    {
      "item": {
        "type": "factory",
        "id": "646d57f3ccda1b34"
      },
      "id": "646d57f3ccda1b34",
      "type": "add",
      "after": "1fca17789fe78f56",
      "date": 1709725494367
    },
    {
      "type": "edit",
      "id": "646d57f3ccda1b34",
      "item": {
        "type": "image",
        "id": "646d57f3ccda1b34",
        "text": "Diff in rels",
        "size": "wide",
        "width": 418,
        "height": 85,
        "url": "/assets/plugins/image/2579b484829d813faa722f3f8433dcde.jpg"
      },
      "date": 1709725506569
    },
    {
      "type": "edit",
      "id": "ff4e5ebea23e88bb",
      "item": {
        "type": "code",
        "id": "ff4e5ebea23e88bb",
        "text": "681,683c681\n<       \"out\": [\n<         68\n<       ],\n---\n>       \"out\": [],\n688,690c686\n<       \"in\": [\n<         68\n<       ],\n---\n>       \"in\": [],\n1102,1107d1097\n<       \"props\": {}\n<     },\n<     {\n<       \"type\": \"fromPickToNext\",\n<       \"from\": 68,\n<       \"to\": 69,\n"
      },
      "date": 1709725688391
    },
    {
      "id": "ff4e5ebea23e88bb",
      "type": "move",
      "order": [
        "2a8bfdc48f4eb588",
        "5f02d0299949afcf",
        "72716a647b19de3e",
        "2665ce43d7e684d9",
        "9f7aa72c8b2125e6",
        "87304dc2de6a37af",
        "e9a807040ee571e6",
        "fbeb517fe392c3c2",
        "c561acb93a8b4bc7",
        "339feb638d120314",
        "857cab8dcd0f95c0",
        "f014bd3203749b79",
        "7def97504f52de5a",
        "1fca17789fe78f56",
        "646d57f3ccda1b34",
        "ff4e5ebea23e88bb"
      ],
      "date": 1709725693815
    },
    {
      "type": "edit",
      "id": "7def97504f52de5a",
      "item": {
        "type": "paragraph",
        "id": "7def97504f52de5a",
        "text": "We want to compare the graph sent with broadcastGraph(graph) with the graph received in graphStreamIncoming(jsonString)."
      },
      "date": 1709725715908
    },
    {
      "item": {
        "type": "factory",
        "id": "5d2aa7b1b349c622"
      },
      "id": "5d2aa7b1b349c622",
      "type": "add",
      "after": "ff4e5ebea23e88bb",
      "date": 1709725743490
    },
    {
      "type": "edit",
      "id": "5d2aa7b1b349c622",
      "item": {
        "type": "code",
        "id": "5d2aa7b1b349c622",
        "text": "// Compare the incoming broadcast of a graph with the outgoing broadcast\n            async function graphStream(graph) {\n                console.log(\"graphStream reached\");\n\n                const json = JSON.parse(graph);\n                const outgoingGraph = new Graph(json.nodes, json.rels); // outgoing broadcast;\n                console.log(\"outgoingGraph: \", outgoingGraph);\n\n                // Wait for the next incoming graph\n                const incomingGraph = await graphStreamIncoming(graph);\n                console.log(\"incomingGraph: \", incomingGraph);\n\n            }"
      },
      "date": 1709725747851
    },
    {
      "type": "edit",
      "id": "5d2aa7b1b349c622",
      "item": {
        "type": "code",
        "id": "5d2aa7b1b349c622",
        "text": "// Compare the incoming broadcast of a graph with the outgoing broadcast\nasync function graphStream(graph) {\n    console.log(\"graphStream reached\");\n\n    const json = JSON.parse(graph);\n    const outgoingGraph = new Graph(json.nodes, json.rels); // outgoing broadcast;\n    console.log(\"outgoingGraph: \", outgoingGraph);\n\n    // Wait for the next incoming graph\n    const incomingGraph = await graphStreamIncoming(graph);\n    console.log(\"incomingGraph: \", incomingGraph);\n\n}"
      },
      "date": 1709725765048
    },
    {
      "item": {
        "type": "factory",
        "id": "c24ec0dcfbc1de7a"
      },
      "id": "c24ec0dcfbc1de7a",
      "type": "add",
      "after": "5d2aa7b1b349c622",
      "date": 1709725808176
    },
    {
      "type": "edit",
      "id": "c24ec0dcfbc1de7a",
      "item": {
        "type": "paragraph",
        "id": "c24ec0dcfbc1de7a",
        "text": "2 graphs incoming"
      },
      "date": 1709725822963
    },
    {
      "id": "646d57f3ccda1b34",
      "type": "move",
      "order": [
        "2a8bfdc48f4eb588",
        "5f02d0299949afcf",
        "72716a647b19de3e",
        "2665ce43d7e684d9",
        "9f7aa72c8b2125e6",
        "87304dc2de6a37af",
        "e9a807040ee571e6",
        "fbeb517fe392c3c2",
        "c561acb93a8b4bc7",
        "339feb638d120314",
        "857cab8dcd0f95c0",
        "f014bd3203749b79",
        "7def97504f52de5a",
        "1fca17789fe78f56",
        "ff4e5ebea23e88bb",
        "5d2aa7b1b349c622",
        "646d57f3ccda1b34",
        "c24ec0dcfbc1de7a"
      ],
      "date": 1709725849898
    },
    {
      "id": "c24ec0dcfbc1de7a",
      "type": "move",
      "order": [
        "2a8bfdc48f4eb588",
        "5f02d0299949afcf",
        "72716a647b19de3e",
        "2665ce43d7e684d9",
        "9f7aa72c8b2125e6",
        "87304dc2de6a37af",
        "e9a807040ee571e6",
        "fbeb517fe392c3c2",
        "c561acb93a8b4bc7",
        "339feb638d120314",
        "857cab8dcd0f95c0",
        "f014bd3203749b79",
        "7def97504f52de5a",
        "1fca17789fe78f56",
        "ff4e5ebea23e88bb",
        "5d2aa7b1b349c622",
        "c24ec0dcfbc1de7a",
        "646d57f3ccda1b34"
      ],
      "date": 1709725855351
    },
    {
      "id": "ff4e5ebea23e88bb",
      "type": "move",
      "order": [
        "2a8bfdc48f4eb588",
        "5f02d0299949afcf",
        "72716a647b19de3e",
        "2665ce43d7e684d9",
        "9f7aa72c8b2125e6",
        "87304dc2de6a37af",
        "e9a807040ee571e6",
        "fbeb517fe392c3c2",
        "c561acb93a8b4bc7",
        "339feb638d120314",
        "857cab8dcd0f95c0",
        "f014bd3203749b79",
        "7def97504f52de5a",
        "1fca17789fe78f56",
        "5d2aa7b1b349c622",
        "c24ec0dcfbc1de7a",
        "646d57f3ccda1b34",
        "ff4e5ebea23e88bb"
      ],
      "date": 1709725861156
    },
    {
      "type": "edit",
      "id": "1fca17789fe78f56",
      "item": {
        "type": "code",
        "id": "1fca17789fe78f56",
        "text": "function graphStreamIncoming(message){\n            console.log(\"graphStreamIncoming reached\");\n            // Is the function called twice in every case?\n\n            // Parse the JSON string into a JavaScript object\n            const json = JSON.parse(message);\n\n            const incomingGraph = new Graph(json.nodes, json.rels); // incoming broadcast\n            return incomingGraph;\n            //return message;\n        }"
      },
      "date": 1709726114138
    },
    {
      "type": "edit",
      "id": "7def97504f52de5a",
      "item": {
        "type": "paragraph",
        "id": "7def97504f52de5a",
        "text": "We want to compare the graph sent with broadcastGraph(graph) with the graph received in graphStreamIncoming(jsonString). [https://github.com/RalfBarkow/assets/commit/cdd43fdbc09fe63a3735ea3d0364798a7d766128 commit]"
      },
      "date": 1709727217817
    },
    {
      "item": {
        "type": "factory",
        "id": "363a5034d2a4b56a"
      },
      "id": "363a5034d2a4b56a",
      "type": "add",
      "after": "ff4e5ebea23e88bb",
      "date": 1709729086628
    },
    {
      "type": "edit",
      "id": "363a5034d2a4b56a",
      "item": {
        "type": "image",
        "id": "363a5034d2a4b56a",
        "text": "The graphStream function calls graphStreamIncoming twice",
        "size": "wide",
        "width": 418,
        "height": 458,
        "url": "/assets/plugins/image/2bab38c37617c35fb01d59cec41de57e.jpg"
      },
      "date": 1709729119747
    },
    {
      "item": {
        "type": "factory",
        "id": "cf2e7da626955bab"
      },
      "id": "cf2e7da626955bab",
      "type": "add",
      "after": "363a5034d2a4b56a",
      "date": 1709729194408
    },
    {
      "type": "edit",
      "id": "cf2e7da626955bab",
      "item": {
        "type": "paragraph",
        "id": "cf2e7da626955bab",
        "text": "… within the `await` expression."
      },
      "date": 1709729212030
    },
    {
      "type": "edit",
      "id": "cf2e7da626955bab",
      "item": {
        "type": "markdown",
        "id": "cf2e7da626955bab",
        "text": "… within the `await` expression."
      },
      "date": 1709729213331
    },
    {
      "type": "edit",
      "id": "cf2e7da626955bab",
      "item": {
        "type": "markdown",
        "id": "cf2e7da626955bab",
        "text": "… for the second time within the `await` expression."
      },
      "date": 1709729229352
    },
    {
      "item": {
        "type": "factory",
        "id": "399c67485e18c137"
      },
      "id": "399c67485e18c137",
      "type": "add",
      "after": "cf2e7da626955bab",
      "date": 1709729284297
    },
    {
      "type": "edit",
      "id": "399c67485e18c137",
      "item": {
        "type": "code",
        "id": "399c67485e18c137",
        "text": "const incomingGraph = await graphStreamIncoming(graph);"
      },
      "date": 1709729286392
    },
    {
      "item": {
        "type": "factory",
        "id": "6e5e420d3e15c818"
      },
      "id": "6e5e420d3e15c818",
      "type": "add",
      "after": "399c67485e18c137",
      "date": 1709729420689
    },
    {
      "type": "edit",
      "id": "6e5e420d3e15c818",
      "item": {
        "type": "paragraph",
        "id": "6e5e420d3e15c818",
        "text": "Based on this behavior, we could visualize the change in the incoming graph as a diff and animate the transition from one state to another."
      },
      "date": 1709729422233
    },
    {
      "item": {
        "type": "factory",
        "id": "6c1b9b09afd7b36a"
      },
      "id": "6c1b9b09afd7b36a",
      "type": "add",
      "after": "6e5e420d3e15c818",
      "date": 1709729723731
    },
    {
      "type": "edit",
      "id": "6c1b9b09afd7b36a",
      "item": {
        "type": "paragraph",
        "id": "6c1b9b09afd7b36a",
        "text": "[[Capture Graph Changes]]"
      },
      "date": 1709729728487
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709730377314
    },
    {
      "item": {
        "type": "factory",
        "id": "0f66a2229a237ee1"
      },
      "id": "0f66a2229a237ee1",
      "type": "add",
      "after": "6c1b9b09afd7b36a",
      "date": 1709730730819
    },
    {
      "type": "edit",
      "id": "0f66a2229a237ee1",
      "item": {
        "type": "paragraph",
        "id": "0f66a2229a237ee1",
        "text": "– [[Edge Insertion]]"
      },
      "date": 1709730746232
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709730975514
    },
    {
      "item": {
        "type": "factory",
        "id": "d8379c22e9b28191"
      },
      "id": "d8379c22e9b28191",
      "type": "add",
      "after": "0f66a2229a237ee1",
      "date": 1709730981400
    },
    {
      "type": "edit",
      "id": "d8379c22e9b28191",
      "item": {
        "type": "image",
        "id": "d8379c22e9b28191",
        "text": "Illustration of fundamental graph representations (Adjacency Matrix, Adjacency List, Edge List) and remarks on their usage in dynamic settings.",
        "size": "wide",
        "width": 418,
        "height": 190,
        "url": "/assets/plugins/image/31409b35af789b62f6af3d8bcf5e34e6.jpg"
      },
      "date": 1709730995344
    },
    {
      "item": {
        "type": "factory",
        "id": "bc8be1ef350101c1"
      },
      "id": "bc8be1ef350101c1",
      "type": "add",
      "after": "d8379c22e9b28191",
      "date": 1709731011181
    },
    {
      "type": "edit",
      "id": "bc8be1ef350101c1",
      "item": {
        "type": "paragraph",
        "id": "bc8be1ef350101c1",
        "text": "\nBESTA, Maciej, FISCHER, Marc, KALAVRI, Vasiliki, KAPRALOV, Michael and HOEFLER, Torsten, 2020. Practice of streaming and dynamic graphs: Concepts, models, systems, and parallelism. arXiv. Online. 2020. P. 1912–12740. Available from: https://www.research-collection.ethz.ch/handle/20.500.11850/462546 [Accessed 6 March 2024]. \n"
      },
      "date": 1709731013129
    },
    {
      "type": "edit",
      "id": "bc8be1ef350101c1",
      "item": {
        "type": "paragraph",
        "id": "bc8be1ef350101c1",
        "text": "BESTA, Maciej, FISCHER, Marc, KALAVRI, Vasiliki, KAPRALOV, Michael and HOEFLER, Torsten, 2020. Practice of streaming and dynamic graphs: Concepts, models, systems, and parallelism. arXiv. 2020. P. 1912–12740. [https://www.research-collection.ethz.ch/handle/20.500.11850/462546 ethz] [Accessed 6 March 2024]. \n"
      },
      "date": 1709731045481
    },
    {
      "type": "edit",
      "id": "bc8be1ef350101c1",
      "item": {
        "type": "paragraph",
        "id": "bc8be1ef350101c1",
        "text": "BESTA, Maciej, FISCHER, Marc, KALAVRI, Vasiliki, KAPRALOV, Michael and HOEFLER, Torsten, 2020. Practice of streaming and dynamic graphs: Concepts, models, systems, and parallelism. arXiv. 2020. P. 1912–12740. [https://www.research-collection.ethz.ch/handle/20.500.11850/462546 ethz] [Accessed 6 March 2024]. [https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/462546/streaming-graphs.pdf?sequence=1&isAllowed=y pdf]\n"
      },
      "date": 1709731069089
    },
    {
      "item": {
        "type": "factory",
        "id": "e5c3ce0925bdbae5"
      },
      "id": "e5c3ce0925bdbae5",
      "type": "add",
      "after": "bc8be1ef350101c1",
      "date": 1709731274405
    },
    {
      "type": "edit",
      "id": "e5c3ce0925bdbae5",
      "item": {
        "type": "paragraph",
        "id": "e5c3ce0925bdbae5",
        "text": "One tuple corresponds to one edge."
      },
      "date": 1709731307390
    },
    {
      "type": "edit",
      "id": "e5c3ce0925bdbae5",
      "item": {
        "type": "paragraph",
        "id": "e5c3ce0925bdbae5",
        "text": "A tuple corresponds to one edge."
      },
      "date": 1709731324175
    },
    {
      "type": "edit",
      "id": "0f66a2229a237ee1",
      "item": {
        "type": "paragraph",
        "id": "0f66a2229a237ee1",
        "text": "– [[Edge Insertion]] (addRel)"
      },
      "date": 1709731427188
    },
    {
      "type": "add",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing the \"edge insertion\" phenomenon here."
      },
      "after": "e5c3ce0925bdbae5",
      "date": 1709731568888
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing the \"edge insertion\" phenomenon here. (next page)"
      },
      "date": 1709732623868
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing the \"edge insertion\" phenomenon here. (next page adds a new rel to rels)"
      },
      "date": 1709732690175
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing the \"edge insertion\" phenomenon here. (next page adds a new rel of type \"fromPickToNext\" to rels)"
      },
      "date": 1709732734186
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing the \"edge insertion\" phenomenon here (next page adds a new rel of type \"fromPickToNext\" to rels)."
      },
      "date": 1709732744749
    },
    {
      "item": {
        "type": "factory",
        "id": "389ceac464e50c6e"
      },
      "id": "389ceac464e50c6e",
      "type": "add",
      "after": "02f9d0e527248446",
      "date": 1709733539372
    },
    {
      "type": "edit",
      "id": "389ceac464e50c6e",
      "item": {
        "type": "reference",
        "id": "389ceac464e50c6e",
        "site": "kerry.relocalizecreativity.net",
        "slug": "clean-questions",
        "title": "Clean Questions",
        "text": "YOUTUBE aVvcU5gG4KU"
      },
      "date": 1709733547117
    },
    {
      "type": "edit",
      "id": "389ceac464e50c6e",
      "item": {
        "type": "reference",
        "id": "389ceac464e50c6e",
        "site": "kerry.relocalizecreativity.net",
        "slug": "clean-questions",
        "title": "Clean Questions",
        "text": "Transcriber: Amanda Chu\nReviewer: Peter van de Ven Thank you. It's lovely to follow that last talk because I think that\nwhat I'm wanting to present to you is a language of inquiry, a way that we can inquire\ninto our own and one another's experience in a completely different way\nto any that I experienced growing up. What I'm going to do with this talk is I'm going to tell you a tiny bit\nabout my background and why this was so important to me, a little bit about David Grove,\nwho originated clean questions - this is not my tool. What I've done with it is my work. And it is shareware;\nthat man gave it away. He said, Take it."
      },
      "date": 1709733597034
    },
    {
      "type": "edit",
      "id": "389ceac464e50c6e",
      "item": {
        "type": "reference",
        "id": "389ceac464e50c6e",
        "site": "kerry.relocalizecreativity.net",
        "slug": "clean-questions",
        "title": "Clean Questions",
        "text": "Transcriber: Amanda Chu\nReviewer: Peter van de Ven Thank you. It's lovely to follow that last talk because I think that\nwhat I'm wanting to present to you is a [[Language of Inquiry]], a way that we can inquire\ninto our own and one another's experience in a completely different way\nto any that I experienced growing up. What I'm going to do with this talk is I'm going to tell you a tiny bit\nabout my background and why this was so important to me, a little bit about David Grove,\nwho originated clean questions - this is not my tool. What I've done with it is my work. And it is shareware;\nthat man gave it away. He said, Take it."
      },
      "date": 1709733652523
    },
    {
      "type": "edit",
      "id": "389ceac464e50c6e",
      "item": {
        "type": "reference",
        "id": "389ceac464e50c6e",
        "site": "kerry.relocalizecreativity.net",
        "slug": "clean-questions",
        "title": "Clean Questions",
        "text": "Transcriber: Amanda Chu\nReviewer: Peter van de Ven Thank you. It's lovely to follow that last talk because I think that\nwhat I'm wanting to present to you is a [[Language of Inquiry]], a way that we can inquire into our own and one another's experience in a completely different way to any that I experienced growing up. What I'm going to do with this talk is I'm going to tell you a tiny bit about my background and why this was so important to me, a little bit about David Grove, who originated [[Clean Questions]] – this is not my tool. What I've done with it is my work. And it is shareware;\nthat man gave it away. He said, Take it."
      },
      "date": 1709733716965
    },
    {
      "item": {
        "type": "factory",
        "id": "17372cf6c8c814c4"
      },
      "id": "17372cf6c8c814c4",
      "type": "add",
      "after": "389ceac464e50c6e",
      "date": 1709735313065
    },
    {
      "type": "edit",
      "id": "17372cf6c8c814c4",
      "item": {
        "type": "image",
        "id": "17372cf6c8c814c4",
        "text": "Uploaded image",
        "size": "wide",
        "width": 418,
        "height": 293,
        "url": "/assets/plugins/image/750e44807883942b4f0134b6619a5a76.jpg"
      },
      "date": 1709735339488
    },
    {
      "type": "edit",
      "id": "17372cf6c8c814c4",
      "item": {
        "type": "image",
        "id": "17372cf6c8c814c4",
        "text": "42 – 43",
        "size": "wide",
        "width": 418,
        "height": 293,
        "url": "/assets/plugins/image/750e44807883942b4f0134b6619a5a76.jpg"
      },
      "date": 1709735451072
    },
    {
      "item": {
        "type": "factory",
        "id": "d01970b8459e3bbd"
      },
      "id": "d01970b8459e3bbd",
      "type": "add",
      "after": "17372cf6c8c814c4",
      "date": 1709735505790
    },
    {
      "type": "edit",
      "id": "d01970b8459e3bbd",
      "item": {
        "type": "paragraph",
        "id": "d01970b8459e3bbd",
        "text": "⇐ [[inner]] [http://wiki.ralfbarkow.ch/view/lineup-para/view/lineup-graph/view/inner lineup]: [[lineup-para]] – [[lineup-graph]] – [[inner]]"
      },
      "date": 1709735507769
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709736015806
    },
    {
      "type": "edit",
      "id": "857cab8dcd0f95c0",
      "item": {
        "type": "paragraph",
        "id": "857cab8dcd0f95c0",
        "text": "[https://en.wikipedia.org/w/index.php?title=Gradient_boosting&action=edit&section=1 wikipedia] … Algorithmen, die eine Kostenfunktion im Funktionsraum optimieren, indem sie iterativ eine Funktion (schwache Hypothese) wählen, die in die Richtung des negativen Gradienten zeigt. See: [[Force]] (within [[What Is a Pattern?]]), [[Choosing Which Benefit Function to Maximize]]"
      },
      "date": 1709736023999
    },
    {
      "id": "389ceac464e50c6e",
      "type": "move",
      "order": [
        "2a8bfdc48f4eb588",
        "5f02d0299949afcf",
        "72716a647b19de3e",
        "2665ce43d7e684d9",
        "9f7aa72c8b2125e6",
        "87304dc2de6a37af",
        "e9a807040ee571e6",
        "fbeb517fe392c3c2",
        "c561acb93a8b4bc7",
        "339feb638d120314",
        "857cab8dcd0f95c0",
        "f014bd3203749b79",
        "7def97504f52de5a",
        "1fca17789fe78f56",
        "5d2aa7b1b349c622",
        "c24ec0dcfbc1de7a",
        "646d57f3ccda1b34",
        "ff4e5ebea23e88bb",
        "363a5034d2a4b56a",
        "cf2e7da626955bab",
        "399c67485e18c137",
        "6e5e420d3e15c818",
        "6c1b9b09afd7b36a",
        "0f66a2229a237ee1",
        "d8379c22e9b28191",
        "bc8be1ef350101c1",
        "e5c3ce0925bdbae5",
        "02f9d0e527248446",
        "17372cf6c8c814c4",
        "d01970b8459e3bbd",
        "389ceac464e50c6e"
      ],
      "date": 1709736089398
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709747094044
    },
    {
      "type": "edit",
      "id": "7def97504f52de5a",
      "item": {
        "type": "paragraph",
        "id": "7def97504f52de5a",
        "text": "We want to compare the graph sent with [[broadcastGraph]](graph) with the graph received in graphStreamIncoming(jsonString). [https://github.com/RalfBarkow/assets/commit/cdd43fdbc09fe63a3735ea3d0364798a7d766128 commit]"
      },
      "date": 1709747956100
    },
    {
      "item": {
        "type": "factory",
        "id": "aa30853d5ccd900e"
      },
      "id": "aa30853d5ccd900e",
      "type": "add",
      "after": "389ceac464e50c6e",
      "date": 1709757792449
    },
    {
      "type": "edit",
      "id": "aa30853d5ccd900e",
      "item": {
        "type": "paragraph",
        "id": "aa30853d5ccd900e",
        "text": "Jure Leskovec, Jon Kleinberg, and Christos Faloutsos. 2005. Graphs over time: Densification laws, shrinking diameters and possible explanations. In Proceedings of the 11th ACM SIGKDD International Conference on Knowledge Discovery in Data Mining (KDD’05). 177–187."
      },
      "date": 1709757795416
    },
    {
      "type": "add",
      "id": "2aab614028a99aa1",
      "item": {
        "type": "paragraph",
        "id": "2aab614028a99aa1",
        "text": "How do real graphs evolve over time? What are \"normal\" growth patterns in social, technological, and information networks? Many studies have discovered patterns in static graphs, identifying properties in a single snapshot of a large network, or in a very small number of snapshots; these include heavy tails for in- and out-degree distributions, communities, small-world phenomena, and others. However, given the lack of information about network evolution over long periods, it has been hard to convert these findings into statements about trends over time.Here we study a wide range of real graphs, and we observe some surprising phenomena. First, most of these graphs densify over time, with the number of edges growing super-linearly in the number of nodes. Second, the average distance between nodes often shrinks over time, in contrast to the conventional wisdom that such distance parameters should increase slowly as a function of the number of nodes (like O(log n) or O(log(log n)).Existing graph generation models do not exhibit these types of behavior, even at a qualitative level. We provide a new graph generator, based on a \"forest fire\" spreading process, that has a simple, intuitive justification, requires very few parameters (like the \"flammability\" of nodes), and produces graphs exhibiting the full range of properties observed both in prior work and in the present study."
      },
      "after": "aa30853d5ccd900e",
      "date": 1709757904053
    },
    {
      "type": "add",
      "id": "df40a69318125d20",
      "item": {
        "type": "paragraph",
        "id": "df40a69318125d20",
        "text": "[[Graphs Evolve Over Time]]"
      },
      "after": "aa30853d5ccd900e",
      "date": 1709757946376
    },
    {
      "id": "2aab614028a99aa1",
      "type": "remove",
      "removedTo": {
        "page": "Graphs Evolve Over Time"
      },
      "date": 1709757958803
    },
    {
      "type": "edit",
      "id": "df40a69318125d20",
      "item": {
        "type": "paragraph",
        "id": "df40a69318125d20",
        "text": "⇒ [[Graphs Evolve Over Time]]"
      },
      "date": 1709757978770
    },
    {
      "id": "aa30853d5ccd900e",
      "type": "remove",
      "removedTo": {
        "page": "Graphs Evolve Over Time"
      },
      "date": 1709757982778
    },
    {
      "id": "df40a69318125d20",
      "type": "remove",
      "removedTo": {
        "page": "evolve"
      },
      "date": 1709758347139
    },
    {
      "id": "df40a69318125d20",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "df40a69318125d20",
        "text": "[[Graphs Evolve Over Time]]"
      },
      "after": "389ceac464e50c6e",
      "attribution": {
        "page": "evolve"
      },
      "date": 1709758372970
    },
    {
      "type": "edit",
      "id": "df40a69318125d20",
      "item": {
        "type": "paragraph",
        "id": "df40a69318125d20",
        "text": "⇒ [[Graphs Evolve Over Time]]"
      },
      "date": 1709758381791
    },
    {
      "type": "add",
      "id": "7fbffcf16bcfa367",
      "item": {
        "type": "paragraph",
        "id": "7fbffcf16bcfa367",
        "text": "[[Journal to Graph]]"
      },
      "after": "df40a69318125d20",
      "date": 1709759040597
    },
    {
      "type": "edit",
      "id": "7fbffcf16bcfa367",
      "item": {
        "type": "paragraph",
        "id": "7fbffcf16bcfa367",
        "text": "[[Journal to Graph]], [[Journal]]"
      },
      "date": 1709759059504
    },
    {
      "type": "edit",
      "id": "7fbffcf16bcfa367",
      "item": {
        "type": "paragraph",
        "id": "7fbffcf16bcfa367",
        "text": "[[Journal to Graph]], [[Journal]] "
      },
      "date": 1709759067357
    },
    {
      "type": "edit",
      "id": "7fbffcf16bcfa367",
      "item": {
        "type": "paragraph",
        "id": "7fbffcf16bcfa367",
        "text": "[[Journal to Graph]], [[Journal]] → \"[[~/journal/0]]\"\""
      },
      "date": 1709759089402
    },
    {
      "type": "edit",
      "id": "7fbffcf16bcfa367",
      "item": {
        "type": "paragraph",
        "id": "7fbffcf16bcfa367",
        "text": "[[Journal to Graph]], [[Journal]] → \"[[~/journal/0]]\""
      },
      "date": 1709759098190
    },
    {
      "item": {
        "type": "factory",
        "id": "b771e0a69dc51069"
      },
      "id": "b771e0a69dc51069",
      "type": "add",
      "after": "7fbffcf16bcfa367",
      "date": 1709759558622
    },
    {
      "type": "edit",
      "id": "b771e0a69dc51069",
      "item": {
        "type": "paragraph",
        "id": "b771e0a69dc51069",
        "text": "[[Speed Bot]] and"
      },
      "date": 1709759568442
    },
    {
      "id": "ba6d4c4e54c8e1e0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ba6d4c4e54c8e1e0",
        "text": "Existing graph generation models do not exhibit these types of behavior, even at a qualitative level. We provide a new graph generator, based on a \"forest fire\" [[spread]]ing process, that has a simple, intuitive justification, requires very few parameters (like the \"flammability\" of nodes), and produces graphs exhibiting the full range of properties observed both in prior work and in the present study."
      },
      "after": "b771e0a69dc51069",
      "attribution": {
        "page": "Graphs Evolve Over Time"
      },
      "date": 1709759572303
    },
    {
      "type": "remove",
      "id": "ba6d4c4e54c8e1e0",
      "date": 1709759605696
    },
    {
      "type": "edit",
      "id": "b771e0a69dc51069",
      "item": {
        "type": "paragraph",
        "id": "b771e0a69dc51069",
        "text": "[[Speed Bot]] and \"a new graph generator, based on a 'forest fire' [[spread]]ing process\""
      },
      "date": 1709759606768
    },
    {
      "id": "b771e0a69dc51069",
      "type": "move",
      "order": [
        "2a8bfdc48f4eb588",
        "5f02d0299949afcf",
        "72716a647b19de3e",
        "2665ce43d7e684d9",
        "9f7aa72c8b2125e6",
        "87304dc2de6a37af",
        "e9a807040ee571e6",
        "fbeb517fe392c3c2",
        "c561acb93a8b4bc7",
        "339feb638d120314",
        "857cab8dcd0f95c0",
        "f014bd3203749b79",
        "7def97504f52de5a",
        "1fca17789fe78f56",
        "5d2aa7b1b349c622",
        "c24ec0dcfbc1de7a",
        "646d57f3ccda1b34",
        "ff4e5ebea23e88bb",
        "363a5034d2a4b56a",
        "cf2e7da626955bab",
        "399c67485e18c137",
        "6e5e420d3e15c818",
        "6c1b9b09afd7b36a",
        "0f66a2229a237ee1",
        "d8379c22e9b28191",
        "bc8be1ef350101c1",
        "e5c3ce0925bdbae5",
        "02f9d0e527248446",
        "17372cf6c8c814c4",
        "d01970b8459e3bbd",
        "389ceac464e50c6e",
        "df40a69318125d20",
        "b771e0a69dc51069",
        "7fbffcf16bcfa367"
      ],
      "date": 1709759615726
    },
    {
      "type": "add",
      "id": "fc0940241cc36684",
      "item": {
        "type": "paragraph",
        "id": "fc0940241cc36684",
        "text": "[[Forest Fire Model]]"
      },
      "after": "7fbffcf16bcfa367",
      "date": 1709760042118
    },
    {
      "type": "add",
      "id": "1f5e100a72cac435",
      "item": {
        "type": "paragraph",
        "id": "1f5e100a72cac435",
        "text": "⇐ [[High-Dimensional Computing]]"
      },
      "after": "fc0940241cc36684",
      "date": 1709760383601
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709829832185
    }
  ]
}