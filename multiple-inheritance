{
  "title": "Multiple Inheritance",
  "story": [
    {
      "type": "html",
      "text": "What you have when a class has more than one direct superclass.\nSome OO languages have <b>Multiple Inheritance</b> (for instance:\n[[Cee Plus Plus]], [[Common Lisp]], [[Python Language]], [[Perl Language]]); some don't (for\ninstance: [[Smalltalk Language]], [[Modula Three]], [[Java Language]]).\nJava <i>does</i> have a sort of half-way house called \"interfaces\",\nproviding multiple inheritance of interface but not of implementation. (<i>When I switched from C++ to Java I got blesses on my fingas.</i>)",
      "id": "9fc32fa12adce6246cd05e2f4b06ca6e"
    },
    {
      "type": "html",
      "text": "Some people like <b>Multiple Inheritance</b> , some don't. See [[Multiple Inheritance Is Not Evil]], and maybe also [[Multiple Inheritance In Smalltalk]].",
      "id": "4dfbddb0bf9801c3b858d7b265b3b979"
    },
    {
      "type": "html",
      "text": "\nNot to be confused with [[Multiple Dispatch]], which is what happens when\nmethod dispatch looks at the (dynamic) type of more than one object.",
      "id": "b908a714f321bd5b7088127df49d61cb"
    },
    {
      "type": "html",
      "text": "(And which people disagree on just as much as they do about <b>Multiple Inheritance</b> .)",
      "id": "71479890966b72264d8b3eedbbd0d62f"
    },
    {
      "type": "html",
      "text": "<i>Surely no one thinks [[Multiple Dispatch]] is evil?</i>",
      "id": "0508da21595b8a9e12e0c78a7f4c6c79"
    },
    {
      "type": "html",
      "text": "\nThe classic first complaint about MI is inherited method clash. And just why can't people establish that inherited implementation clashes are illegal, and otherwise allow MI? That would have the side effect of preventing diamond-shaped hierarchies for all but the most abstract of classes. Essentially, it makes the practical issues disappear. This still leaves the damage you can cause with [[Taxo Mania]], but that is a [[Bad Programmer]] problem, not a [[Bad Feature]] problem. -- [[Ian Kjos]]",
      "id": "746ef4d81e964a8a78beb5ec8adf2dbb"
    },
    {
      "type": "html",
      "text": "\nThere <i>is</i> no method clash.  In [[Common Lisp]], for example, each\nclass has a <i>precedence list</i>, which is used to determine\nall applicable methods at time of dispatch.  This problem is\na myth, and only exists in some (poorly, in my opinion) designed languages.",
      "id": "8cc75cd88f5722b0c58691cf96ac55bf"
    },
    {
      "type": "html",
      "text": "--[[Alain Picard]]",
      "id": "a87f1fd7d1133bb2b324f43a7d0fd335"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "cbe121907881e6436b3c24e8e89c5b78"
    },
    {
      "type": "html",
      "text": "Please don't forget [[Eiffel Language]].  It does <b>Multiple Inheritance</b>  right.",
      "id": "6c6537ea63691c062619620013f48c54"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "cbe121907881e6436b3c24e8e89c5b78"
    },
    {
      "type": "html",
      "text": "<b>Multiple Inheritance</b>  of implementation allows for [[Mix In]]s.",
      "id": "423dd23603dc000222566b039e9ccb1a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "cbe121907881e6436b3c24e8e89c5b78"
    },
    {
      "type": "html",
      "text": "\nSome of us [[Relational Weenie]]s see \"sets\" when we see multiple inheritance. Multiple inheritance is an oxymoron IMO because if you have multiple parents, then it is not really a true hierarchy any more. It is my belief that [[Limits Of Hierarchies]] will eventually lead to sets as real-world complexity creeps into a project/system, which will lead to relational-like technology. Perhaps this is an [[All Roads Lead To Rome]] sin, but that is how I see it. Hierarchies are easy to relate to (initially), but don't scale well over time (changes) or project size increases. -t",
      "id": "499a799cd54d99bb1413841c189d0c01"
    },
    {
      "type": "html",
      "text": "<i>Yes, classes are sets of functions.  How is that comparable to relational where there are sets of data?</i>",
      "id": "585e73d714a93c7aa58fe373f188ca4d"
    },
    {
      "type": "html",
      "text": "Classes are sets of objects, not sets of functions.  <b>Multiple Inheritance</b>  reflects the fact that sets may intersect, and is often an ugly kludge.",
      "id": "81c8c267df29b37919aeb1decf45f4aa"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "cbe121907881e6436b3c24e8e89c5b78"
    },
    {
      "type": "html",
      "text": "Why must it be a hierarchy?  Why not a simple directed graph?",
      "id": "9745f96013c989876bd885adb90dad1c"
    },
    {
      "type": "html",
      "text": "<i>It can be a graph. With multiple inheritance, it is a \"multiarchy\" instead of a hierarchy. The issue that must be resolved, however, is the order in which conflicts are resolved. If a given class inherits from both classA and classB, and both classA and classB define someMethod, then the order determines whether classA.someMethod or classB.someMethod is actually selected. Similarly, if either method includes a call to \"super\", or its equivalent, then the order determines which ancestor's method is selected. The \"conflict\" isn't a problem, per se. The multiple-inheritance mechanism simply needs to provide a mechanism for resolving the choice.</i>",
      "id": "bfd623b0ecd2c55880c0971355bbd699"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "cbe121907881e6436b3c24e8e89c5b78"
    },
    {
      "type": "html",
      "text": "See also: [[Callinga Spadea Spade]]",
      "id": "5484f3e166954de5b9bf2a58b07f07d2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "cbe121907881e6436b3c24e8e89c5b78"
    },
    {
      "type": "html",
      "text": "[[Category Polymorphism]] [[Category Language Feature]]",
      "id": "5bc053f13595bb7fe3b965c679091b61"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?MultipleInheritance c2.com]",
      "id": "7c958ddd9934d19813fea9d46ef32eda"
    }
  ],
  "journal": [
    {
      "date": 1402005240000,
      "id": "da8e72a7c6191e6d0177c4730f5445df",
      "type": "create",
      "item": {
        "title": "Multiple Inheritance",
        "story": [
          {
            "type": "html",
            "text": "What you have when a class has more than one direct superclass.\nSome OO languages have [[Multiple Inheritance]] (for instance:\n[[Cee Plus Plus]], [[Common Lisp]], [[Python Language]], [[Perl Language]]); some don't (for\ninstance: [[Smalltalk Language]], [[Modula Three]], [[Java Language]]).\nJava <i>does</i> have a sort of half-way house called \"interfaces\",\nproviding multiple inheritance of interface but not of implementation. (<i>When I switched from C++ to Java I got blesses on my fingas.</i>)",
            "id": "9fc32fa12adce6246cd05e2f4b06ca6e"
          },
          {
            "type": "html",
            "text": "\nSome people like [[Multiple Inheritance]], some don't. See [[Multiple Inheritance Is Not Evil]], and maybe also [[Multiple Inheritance In Smalltalk]].",
            "id": "4dfbddb0bf9801c3b858d7b265b3b979"
          },
          {
            "type": "html",
            "text": "\nNot to be confused with [[Multiple Dispatch]], which is what happens when\nmethod dispatch looks at the (dynamic) type of more than one object.",
            "id": "b908a714f321bd5b7088127df49d61cb"
          },
          {
            "type": "html",
            "text": "(And which people disagree on just as much as they do about [[Multiple Inheritance]].)",
            "id": "71479890966b72264d8b3eedbbd0d62f"
          },
          {
            "type": "html",
            "text": "<i>Surely no one thinks [[Multiple Dispatch]] is evil?</i>",
            "id": "0508da21595b8a9e12e0c78a7f4c6c79"
          },
          {
            "type": "html",
            "text": "\nThe classic first complaint about MI is inherited method clash. And just why can't people establish that inherited implementation clashes are illegal, and otherwise allow MI? That would have the side effect of preventing diamond-shaped hierarchies for all but the most abstract of classes. Essentially, it makes the practical issues disappear. This still leaves the damage you can cause with [[Taxo Mania]], but that is a [[Bad Programmer]] problem, not a [[Bad Feature]] problem. -- [[Ian Kjos]]",
            "id": "746ef4d81e964a8a78beb5ec8adf2dbb"
          },
          {
            "type": "html",
            "text": "\nThere <i>is</i> no method clash.  In [[Common Lisp]], for example, each\nclass has a <i>precedence list</i>, which is used to determine\nall applicable methods at time of dispatch.  This problem is\na myth, and only exists in some (poorly, in my opinion) designed languages.",
            "id": "8cc75cd88f5722b0c58691cf96ac55bf"
          },
          {
            "type": "html",
            "text": "--[[Alain Picard]]",
            "id": "a87f1fd7d1133bb2b324f43a7d0fd335"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "cbe121907881e6436b3c24e8e89c5b78"
          },
          {
            "type": "html",
            "text": "Please don't forget [[Eiffel Language]].  It does [[Multiple Inheritance]] right.",
            "id": "6c6537ea63691c062619620013f48c54"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "cbe121907881e6436b3c24e8e89c5b78"
          },
          {
            "type": "html",
            "text": "\n[[Multiple Inheritance]] of implementation allows for [[Mix In]]s.",
            "id": "423dd23603dc000222566b039e9ccb1a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "cbe121907881e6436b3c24e8e89c5b78"
          },
          {
            "type": "html",
            "text": "\nSome of us [[Relational Weenie]]s see \"sets\" when we see multiple inheritance. Multiple inheritance is an oxymoron IMO because if you have multiple parents, then it is not really a true hierarchy any more. It is my belief that [[Limits Of Hierarchies]] will eventually lead to sets as real-world complexity creeps into a project/system, which will lead to relational-like technology. Perhaps this is an [[All Roads Lead To Rome]] sin, but that is how I see it. Hierarchies are easy to relate to (initially), but don't scale well over time (changes) or project size increases. -t",
            "id": "499a799cd54d99bb1413841c189d0c01"
          },
          {
            "type": "html",
            "text": "<i>Yes, classes are sets of functions.  How is that comparable to relational where there are sets of data?</i>",
            "id": "585e73d714a93c7aa58fe373f188ca4d"
          },
          {
            "type": "html",
            "text": "\nClasses are sets of objects, not sets of functions.  [[Multiple Inheritance]] reflects the fact that sets may intersect, and is often an ugly kludge.",
            "id": "81c8c267df29b37919aeb1decf45f4aa"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "cbe121907881e6436b3c24e8e89c5b78"
          },
          {
            "type": "html",
            "text": "Why must it be a hierarchy?  Why not a simple directed graph?",
            "id": "9745f96013c989876bd885adb90dad1c"
          },
          {
            "type": "html",
            "text": "<i>It can be a graph. With multiple inheritance, it is a \"multiarchy\" instead of a hierarchy. The issue that must be resolved, however, is the order in which conflicts are resolved. If a given class inherits from both classA and classB, and both classA and classB define someMethod, then the order determines whether classA.someMethod or classB.someMethod is actually selected. Similarly, if either method includes a call to \"super\", or its equivalent, then the order determines which ancestor's method is selected. The \"conflict\" isn't a problem, per se. The multiple-inheritance mechanism simply needs to provide a mechanism for resolving the choice.</i>",
            "id": "bfd623b0ecd2c55880c0971355bbd699"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "cbe121907881e6436b3c24e8e89c5b78"
          },
          {
            "type": "html",
            "text": "See also: [[Callinga Spadea Spade]]",
            "id": "5484f3e166954de5b9bf2a58b07f07d2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "cbe121907881e6436b3c24e8e89c5b78"
          },
          {
            "type": "html",
            "text": "[[Category Polymorphism]] [[Category Language Feature]]",
            "id": "5bc053f13595bb7fe3b965c679091b61"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?MultipleInheritance c2.com]",
            "id": "7c958ddd9934d19813fea9d46ef32eda"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626999214215
    },
    {
      "type": "edit",
      "id": "9fc32fa12adce6246cd05e2f4b06ca6e",
      "item": {
        "type": "html",
        "text": "What you have when a class has more than one direct superclass.\nSome OO languages have **Multiple Inheritance** (for instance:\n[[Cee Plus Plus]], [[Common Lisp]], [[Python Language]], [[Perl Language]]); some don't (for\ninstance: [[Smalltalk Language]], [[Modula Three]], [[Java Language]]).\nJava <i>does</i> have a sort of half-way house called \"interfaces\",\nproviding multiple inheritance of interface but not of implementation. (<i>When I switched from C++ to Java I got blesses on my fingas.</i>)",
        "id": "9fc32fa12adce6246cd05e2f4b06ca6e"
      },
      "date": 1662262666748
    },
    {
      "type": "edit",
      "id": "9fc32fa12adce6246cd05e2f4b06ca6e",
      "item": {
        "type": "html",
        "text": "What you have when a class has more than one direct superclass.\nSome OO languages have <b>Multiple Inheritance</b> (for instance:\n[[Cee Plus Plus]], [[Common Lisp]], [[Python Language]], [[Perl Language]]); some don't (for\ninstance: [[Smalltalk Language]], [[Modula Three]], [[Java Language]]).\nJava <i>does</i> have a sort of half-way house called \"interfaces\",\nproviding multiple inheritance of interface but not of implementation. (<i>When I switched from C++ to Java I got blesses on my fingas.</i>)",
        "id": "9fc32fa12adce6246cd05e2f4b06ca6e"
      },
      "date": 1662262702357
    },
    {
      "type": "edit",
      "id": "71479890966b72264d8b3eedbbd0d62f",
      "item": {
        "type": "html",
        "text": "(And which people disagree on just as much as they do about <b>Multiple Inheritance</b> .)",
        "id": "71479890966b72264d8b3eedbbd0d62f"
      },
      "date": 1662262737532
    },
    {
      "type": "edit",
      "id": "423dd23603dc000222566b039e9ccb1a",
      "item": {
        "type": "html",
        "text": "<b>Multiple Inheritance</b>  of implementation allows for [[Mix In]]s.",
        "id": "423dd23603dc000222566b039e9ccb1a"
      },
      "date": 1662262749521
    },
    {
      "type": "edit",
      "id": "81c8c267df29b37919aeb1decf45f4aa",
      "item": {
        "type": "html",
        "text": "Classes are sets of objects, not sets of functions.  <b>Multiple Inheritance</b>  reflects the fact that sets may intersect, and is often an ugly kludge.",
        "id": "81c8c267df29b37919aeb1decf45f4aa"
      },
      "date": 1662262765855
    },
    {
      "type": "edit",
      "id": "4dfbddb0bf9801c3b858d7b265b3b979",
      "item": {
        "type": "html",
        "text": "Some people like <b>Multiple Inheritance</b> , some don't. See [[Multiple Inheritance Is Not Evil]], and maybe also [[Multiple Inheritance In Smalltalk]].",
        "id": "4dfbddb0bf9801c3b858d7b265b3b979"
      },
      "date": 1662262790424
    },
    {
      "type": "edit",
      "id": "6c6537ea63691c062619620013f48c54",
      "item": {
        "type": "html",
        "text": "Please don't forget [[Eiffel Language]].  It does <b>Multiple Inheritance</b>  right.",
        "id": "6c6537ea63691c062619620013f48c54"
      },
      "date": 1662262864773
    }
  ]
}