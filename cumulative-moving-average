{
  "title": "Cumulative moving average",
  "story": [
    {
      "id": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
      "type": "markdown",
      "text": "In a __cumulative moving average__ (__CMA__), the data arrive in an ordered datum stream, and the user would like to get the average of all of the data up until the current datum. For example, an investor may want the average price of all of the stock transactions for a particular stock up until the current time.\n"
    },
    {
      "type": "markdown",
      "id": "06221de59c2f68dd",
      "text": "The [[Livecode]] function [[math_CumulativeAverage]] is based on the math on this page. It is used to create simple logs by the [[log_IncrementAverage]]."
    },
    {
      "type": "markdown",
      "id": "788c25802032bf0a",
      "text": "As each new transaction occurs, the average price at the time of the transaction can be calculated for all of the transactions up to that point using the cumulative average, typically an equally weighted [[average]] of the sequence of ''n'' values up to the current time:- [https://en.wikipedia.org/wiki/Moving_average#Cumulative_moving_average wikipedia]"
    },
    {
      "id": "9a3814ada3103ef3",
      "type": "html",
      "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;' data-imagestyle='fullwiki'>\n<a href=\"http://handler.livecode.world/assets/cumulative_moving_average.svg\" target=\"_blank\"><img style=\"display:block; margin:auto; width:100%;\" src=\"http://handler.livecode.world/assets/cumulative_moving_average.svg\">\n</a>\n<p class=caption>\n\nThe brute-force method to calculate the [[cumulative moving average]].\n</p></div>",
      "alias": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc"
    },
    {
      "id": "00d45f55-df55-479b-92cb-93cef486e295",
      "type": "markdown",
      "text": "The brute-force method to calculate this would be to store all of the data and calculate the sum and divide by the number of points every time a new datum arrived. However, it is possible to simply update cumulative average as a new value using the formula:\n"
    },
    {
      "id": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
      "type": "html",
      "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;' data-imagestyle='fullwiki'>\n<a href=\"http://handler.livecode.world/assets/moving_average.svg\" target=\"_blank\"><img style=\"display:block; margin:auto; width:100%;\" src=\"http://handler.livecode.world/assets/moving_average.svg\">\n</a>\n<p class=caption>\n\n[[Cumulative moving average]] based on new time series data.</p></div>"
    },
    {
      "type": "markdown",
      "id": "4b4ec3f6cb2cfcf8",
      "text": "Thus the current cumulative average for a new datum is equal to:\n\n1. The previous cumulative average\n1. Times n\n1. plus the latest datum\n1. all divided by the number of points received so far, n+1. \n"
    },
    {
      "type": "markdown",
      "id": "f54e3aa86aafc238",
      "text": "When all of the data arrive (n = N), then the cumulative average will equal the final average. It is also possible to store a running total of the data as well as the number of points and dividing the total by the number of points to get the CMA each time a new datum arrives.\n"
    },
    {
      "type": "markdown",
      "id": "1874d3f10716c9f9",
      "text": "In [[Livecode]] we have the following function:\n"
    },
    {
      "type": "code",
      "id": "aacec563fb86cdae",
      "text": "function math_CumulativeAverage nValue, lastAv, n\n  return (lastAv * n + nValue) / (n + 1)\nend math_CumulativeAverage\n"
    },
    {
      "type": "markdown",
      "id": "dac409415a21cfcd",
      "text": "Which we can test with:\n"
    },
    {
      "type": "code",
      "id": "d2125f2e1f17747c",
      "text": "command test_CumulativeAverage\n   put \"1,3,5,4,2,4,3\" into sSeries\n   put sum (sSeries) / the number of items of sSeries into mAverage\n   --\n   put item 1 of sSeries into lastAverage\n   repeat with itemNum = 2 to the number of items of sSeries\n      put item itemNum of sSeries into newValue\n      put itemNum - 1 into n\n      put math_CumulativeAverage (newValue, lastAverage, n) into  newAverage\n      put newAverage into lastAverage\n   end repeat\n   put mAverage & CR & lastAverage\nend test_CumulativeAverage\n"
    },
    {
      "type": "markdown",
      "id": "654064809f7de4d0",
      "text": "# See also\n\n- [[Moving average]]\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Cumulative moving average",
        "story": []
      },
      "date": 1629370936808
    },
    {
      "id": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
      "type": "add",
      "item": {
        "id": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
        "type": "markdown",
        "text": "In a __cumulative moving average__ (__CMA__), the data arrive in an ordered datum stream, and the user would like to get the average of all of the data up until the current datum. For example, an investor may want the average price of all of the stock transactions for a particular stock up until the current time. As each new transaction occurs, the average price at the time of the transaction can be calculated for all of the transactions up to that point using the cumulative average, typically an equally weighted [[average]] of the sequence of ''n'' values up to the current time:- [https://en.wikipedia.org/wiki/Moving_average#Cumulative_moving_average wikipedia]"
      },
      "date": 1629370938745
    },
    {
      "id": "00d45f55-df55-479b-92cb-93cef486e295",
      "type": "add",
      "item": {
        "id": "00d45f55-df55-479b-92cb-93cef486e295",
        "type": "markdown",
        "text": "The brute-force method to calculate this would be to store all of the data and calculate the sum and divide by the number of points every time a new datum arrived. However, it is possible to simply update cumulative average as a new value using the formula"
      },
      "after": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
      "date": 1629370940962
    },
    {
      "id": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
      "type": "add",
      "item": {
        "id": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
        "type": "html",
        "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;' data-imagestyle='fullwiki'>\n<a href=\"http://handler.livecode.world/assets/moving_average.svg\" target=\"_blank\"><img style=\"display:block; margin:auto; width:100%;\" src=\"http://handler.livecode.world/assets/moving_average.svg\">\n</a>\n<p class=caption>\n\nThis is an [[full width image]] linked to the following url - [http://handler.livecode.world/assets/moving_average.svg livecode.world]\n\n</p></div>"
      },
      "after": "00d45f55-df55-479b-92cb-93cef486e295",
      "date": 1629370943074
    },
    {
      "type": "edit",
      "id": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
      "item": {
        "id": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
        "type": "markdown",
        "text": "In a __cumulative moving average__ (__CMA__), the data arrive in an ordered datum stream, and the user would like to get the average of all of the data up until the current datum. For example, an investor may want the average price of all of the stock transactions for a particular stock up until the current time. \n"
      },
      "date": 1629371052348
    },
    {
      "item": {
        "type": "factory",
        "id": "654064809f7de4d0"
      },
      "id": "654064809f7de4d0",
      "type": "add",
      "after": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
      "date": 1629371057957
    },
    {
      "type": "add",
      "id": "788c25802032bf0a",
      "item": {
        "type": "markdown",
        "id": "788c25802032bf0a",
        "text": "As each new transaction occurs, the average price at the time of the transaction can be calculated for all of the transactions up to that point using the cumulative average, typically an equally weighted [[average]] of the sequence of ''n'' values up to the current time:- [https://en.wikipedia.org/wiki/Moving_average#Cumulative_moving_average wikipedia]"
      },
      "after": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
      "date": 1629371059283
    },
    {
      "type": "edit",
      "id": "654064809f7de4d0",
      "item": {
        "type": "markdown",
        "id": "654064809f7de4d0",
        "text": "# See also\n"
      },
      "date": 1629371063245
    },
    {
      "type": "edit",
      "id": "654064809f7de4d0",
      "item": {
        "type": "markdown",
        "id": "654064809f7de4d0",
        "text": "# See also\n\n- [[Moving average]]\n"
      },
      "date": 1629371071571
    },
    {
      "id": "9a3814ada3103ef3",
      "type": "add",
      "item": {
        "id": "9a3814ada3103ef3",
        "type": "html",
        "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;' data-imagestyle='fullwiki'>\n<a href=\"http://handler.livecode.world/assets/cumulative_moving_average.svg\" target=\"_blank\"><img style=\"display:block; margin:auto; width:100%;\" src=\"http://handler.livecode.world/assets/cumulative_moving_average.svg\">\n</a>\n<p class=caption>\n\nThis is an [[full width image]] linked to the following url - [http://handler.livecode.world/assets/cumulative_moving_average.svg livecode.world]\n\n</p></div>",
        "alias": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc"
      },
      "after": "788c25802032bf0a",
      "date": 1629371223887
    },
    {
      "type": "edit",
      "id": "9a3814ada3103ef3",
      "item": {
        "id": "9a3814ada3103ef3",
        "type": "html",
        "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;' data-imagestyle='fullwiki'>\n<a href=\"http://handler.livecode.world/assets/cumulative_moving_average.svg\" target=\"_blank\"><img style=\"display:block; margin:auto; width:100%;\" src=\"http://handler.livecode.world/assets/cumulative_moving_average.svg\">\n</a>\n<p class=caption>\n\nThe brute-force method to calculate the [[cumulative moving average]].\n</p></div>",
        "alias": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc"
      },
      "date": 1629371274244
    },
    {
      "type": "edit",
      "id": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
      "item": {
        "id": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
        "type": "html",
        "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;' data-imagestyle='fullwiki'>\n<a href=\"http://handler.livecode.world/assets/moving_average.svg\" target=\"_blank\"><img style=\"display:block; margin:auto; width:100%;\" src=\"http://handler.livecode.world/assets/moving_average.svg\">\n</a>\n<p class=caption>\n\n[[Cumulative moving average based on new time series data.</p></div>"
      },
      "date": 1629371344631
    },
    {
      "type": "edit",
      "id": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
      "item": {
        "id": "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
        "type": "html",
        "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;' data-imagestyle='fullwiki'>\n<a href=\"http://handler.livecode.world/assets/moving_average.svg\" target=\"_blank\"><img style=\"display:block; margin:auto; width:100%;\" src=\"http://handler.livecode.world/assets/moving_average.svg\">\n</a>\n<p class=caption>\n\n[[Cumulative moving average]] based on new time series data.</p></div>"
      },
      "date": 1629371351871
    },
    {
      "type": "edit",
      "id": "00d45f55-df55-479b-92cb-93cef486e295",
      "item": {
        "id": "00d45f55-df55-479b-92cb-93cef486e295",
        "type": "markdown",
        "text": "The brute-force method to calculate this would be to store all of the data and calculate the sum and divide by the number of points every time a new datum arrived. However, it is possible to simply update cumulative average as a new value using the formula:\n"
      },
      "date": 1629372294529
    },
    {
      "type": "add",
      "id": "4b4ec3f6cb2cfcf8",
      "item": {
        "type": "markdown",
        "id": "4b4ec3f6cb2cfcf8",
        "text": "Thus the current cumulative average for a new datum is equal to the previous cumulative average, times n, plus the latest datum, all divided by the number of points received so far, n+1. When all of the data arrive (n = N), then the cumulative average will equal the final average. It is also possible to store a running total of the data as well as the number of points and dividing the total by the number of points to get the CMA each time a new datum arrives."
      },
      "after": "00d45f55-df55-479b-92cb-93cef486e295",
      "date": 1629372295681
    },
    {
      "id": "4b4ec3f6cb2cfcf8",
      "type": "move",
      "order": [
        "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
        "788c25802032bf0a",
        "9a3814ada3103ef3",
        "00d45f55-df55-479b-92cb-93cef486e295",
        "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
        "4b4ec3f6cb2cfcf8",
        "654064809f7de4d0"
      ],
      "date": 1629372298813
    },
    {
      "type": "edit",
      "id": "4b4ec3f6cb2cfcf8",
      "item": {
        "type": "markdown",
        "id": "4b4ec3f6cb2cfcf8",
        "text": "Thus the current cumulative average for a new datum is equal to:\n\n1. The previous cumulative average"
      },
      "date": 1629372327600
    },
    {
      "type": "add",
      "id": "62b64c80c98a08f2",
      "item": {
        "type": "markdown",
        "id": "62b64c80c98a08f2",
        "text": "1. Times n\n1. plus the latest datum\n1. all divided by the number of points received so far, n+1. \n"
      },
      "after": "4b4ec3f6cb2cfcf8",
      "date": 1629372358162
    },
    {
      "type": "add",
      "id": "f54e3aa86aafc238",
      "item": {
        "type": "markdown",
        "id": "f54e3aa86aafc238",
        "text": "When all of the data arrive (n = N), then the cumulative average will equal the final average. It is also possible to store a running total of the data as well as the number of points and dividing the total by the number of points to get the CMA each time a new datum arrives."
      },
      "after": "62b64c80c98a08f2",
      "date": 1629372359501
    },
    {
      "type": "remove",
      "id": "62b64c80c98a08f2",
      "date": 1629372360276
    },
    {
      "type": "edit",
      "id": "4b4ec3f6cb2cfcf8",
      "item": {
        "type": "markdown",
        "id": "4b4ec3f6cb2cfcf8",
        "text": "Thus the current cumulative average for a new datum is equal to:\n\n1. The previous cumulative average\n1. Times n\n1. plus the latest datum\n1. all divided by the number of points received so far, n+1. \n"
      },
      "date": 1629372384847
    },
    {
      "type": "edit",
      "id": "f54e3aa86aafc238",
      "item": {
        "type": "markdown",
        "id": "f54e3aa86aafc238",
        "text": "When all of the data arrive (n = N), then the cumulative average will equal the final average. It is also possible to store a running total of the data as well as the number of points and dividing the total by the number of points to get the CMA each time a new datum arrives.\n"
      },
      "date": 1629373109895
    },
    {
      "type": "add",
      "id": "1874d3f10716c9f9",
      "item": {
        "type": "markdown",
        "id": "1874d3f10716c9f9",
        "text": "In [[Livecode]] we have the following function:\n"
      },
      "after": "f54e3aa86aafc238",
      "date": 1629373127379
    },
    {
      "type": "add",
      "id": "aacec563fb86cdae",
      "item": {
        "type": "factory",
        "id": "aacec563fb86cdae",
        "text": "sfda"
      },
      "after": "1874d3f10716c9f9",
      "date": 1629373134414
    },
    {
      "type": "edit",
      "id": "aacec563fb86cdae",
      "item": {
        "type": "code",
        "id": "aacec563fb86cdae",
        "text": "function math_CumulativeAverage newValue, lastAverage, n\n   put (lastAverage * n + newValue) / (n + 1) into newAverage\n   return newAverage\nend math_CumulativeAverage\n"
      },
      "date": 1629373137779
    },
    {
      "type": "edit",
      "id": "aacec563fb86cdae",
      "item": {
        "type": "code",
        "id": "aacec563fb86cdae",
        "text": "function math_CumulativeAverage nValue, lastAverage, n\n   put (lastAverage * n + nValue) / (n + 1) into nAverage\n   return nAverage\nend math_CumulativeAverage\n"
      },
      "date": 1629373165088
    },
    {
      "type": "edit",
      "id": "aacec563fb86cdae",
      "item": {
        "type": "code",
        "id": "aacec563fb86cdae",
        "text": "function math_CumulativeAverage nValue, lastAv, n\n put (lastAverage * n + nValue) / (n + 1) into nAverage\n   return nAverage\nend math_CumulativeAverage\n"
      },
      "date": 1629373197955
    },
    {
      "type": "edit",
      "id": "aacec563fb86cdae",
      "item": {
        "type": "code",
        "id": "aacec563fb86cdae",
        "text": "function math_CumulativeAverage nValue, lastAv, n\n  return (lastAverage * n + nValue) / (n + 1)\nend math_CumulativeAverage\n"
      },
      "date": 1629373222189
    },
    {
      "type": "edit",
      "id": "aacec563fb86cdae",
      "item": {
        "type": "code",
        "id": "aacec563fb86cdae",
        "text": "function math_CumulativeAverage nValue, lastAv, n\n  return (lastAv * n + nValue) / (n + 1)\nend math_CumulativeAverage\n"
      },
      "date": 1629373244129
    },
    {
      "type": "add",
      "id": "dac409415a21cfcd",
      "item": {
        "type": "markdown",
        "id": "dac409415a21cfcd",
        "text": "Which we can test with:\n"
      },
      "after": "1874d3f10716c9f9",
      "date": 1629373274185
    },
    {
      "type": "add",
      "id": "d2125f2e1f17747c",
      "item": {
        "type": "factory",
        "id": "d2125f2e1f17747c",
        "text": "asfd"
      },
      "after": "dac409415a21cfcd",
      "date": 1629373276703
    },
    {
      "type": "edit",
      "id": "d2125f2e1f17747c",
      "item": {
        "type": "code",
        "id": "d2125f2e1f17747c",
        "text": "command test_CumulativeAverage\n   put \"1,3,5,4,2,4,3\" into sSeries\n   put sum (sSeries) / the number of items of sSeries into mAverage\n   --\n   put item 1 of sSeries into lastAverage\n   repeat with itemNum = 2 to the number of items of sSeries\n      put item itemNum of sSeries into newValue\n      put itemNum - 1 into n\n      put math_CumulativeAverage (newValue, lastAverage, n) into  newAverage\n      put newAverage into lastAverage\n   end repeat\n   put mAverage & CR & lastAverage\nend test_CumulativeAverage\n"
      },
      "date": 1629373280755
    },
    {
      "id": "aacec563fb86cdae",
      "type": "move",
      "order": [
        "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
        "788c25802032bf0a",
        "9a3814ada3103ef3",
        "00d45f55-df55-479b-92cb-93cef486e295",
        "ef00e137-e4a2-439e-8e54-5fff31e6c6fc",
        "4b4ec3f6cb2cfcf8",
        "f54e3aa86aafc238",
        "1874d3f10716c9f9",
        "aacec563fb86cdae",
        "dac409415a21cfcd",
        "d2125f2e1f17747c",
        "654064809f7de4d0"
      ],
      "date": 1629373284463
    },
    {
      "type": "edit",
      "id": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
      "item": {
        "id": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
        "type": "markdown",
        "text": "In a __cumulative moving average__ (__CMA__), the data arrive in an ordered datum stream, and the user would like to get the average of all of the data up until the current datum. For example, an investor may want the average price of all of the stock transactions for a particular stock up until the current time.\n"
      },
      "date": 1629415308033
    },
    {
      "type": "add",
      "id": "06221de59c2f68dd",
      "item": {
        "type": "markdown",
        "id": "06221de59c2f68dd",
        "text": "The [[Livecode]] function [[dfsa]] is based on the math on this page. It is used to create simple logs"
      },
      "after": "e40064c9-4dec-4a9a-a6c8-0455b12c4ce2",
      "date": 1629415389271
    },
    {
      "type": "edit",
      "id": "06221de59c2f68dd",
      "item": {
        "type": "markdown",
        "id": "06221de59c2f68dd",
        "text": "The [[Livecode]] function [[math_CumulativeAverage]] is based on the math on this page. It is used to create simple logs"
      },
      "date": 1629415394725
    },
    {
      "type": "edit",
      "id": "06221de59c2f68dd",
      "item": {
        "type": "markdown",
        "id": "06221de59c2f68dd",
        "text": "The [[Livecode]] function [[math_CumulativeAverage]] is based on the math on this page. It is used to create simple logs by the [[log_IncrementAverage]]."
      },
      "date": 1629415465822
    },
    {
      "type": "fork",
      "site": "handler.livecode.world",
      "date": 1629450328421
    }
  ]
}