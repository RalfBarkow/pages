{
  "title": "Parser",
  "story": [
    {
      "type": "markdown",
      "id": "0f1ff66171665a2b",
      "text": "Answer a parser that accepts the receiving string."
    },
    {
      "type": "markdown",
      "id": "990c558187dbe188",
      "text": "See [[PP2HtmlHeaderGrammar]]"
    },
    {
      "type": "paragraph",
      "id": "b389786775704537",
      "text": "⇒ [[parse]]"
    },
    {
      "type": "pagefold",
      "id": "36b754cd8d82d59d",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "6f58cab29e8725ba",
      "text": "⇒ [[Interactive Query Expansion]]"
    },
    {
      "type": "paragraph",
      "id": "9e1a05703f874d14",
      "text": "\"A shallow parser\". [https://scholar.google.ch/scholar?hl=de&as_sdt=0%2C5&q=%22A+shallow+parser%22&btnG= scholar]"
    },
    {
      "type": "markdown",
      "id": "8f4c21d816532c20",
      "text": "markedjs/marked, 2019. Online. JavaScript. markedjs. [Accessed 27 November 2019]. Available from: https://github.com/markedjs/marked \n> A markdown parser and compiler. Built for speed. Contribute to markedjs/marked development by creating an account on GitHub.\n\n\n\n"
    },
    {
      "type": "markdown",
      "id": "91f585163794481c",
      "text": "moosetechnology/PetitParser, 2021. Online. Smalltalk. moosetechnology. [Accessed 3 May 2021]. Available from: https://github.com/moosetechnology/PetitParser \n> Petit Parser is a framework for building parsers. Contribute to moosetechnology/PetitParser development by creating an account on GitHub.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "7390abcf691d9845",
      "text": "QUESADA, Luis, BERZAL, Fernando and CUBERO, Juan-Carlos, 2011. A Language Specification Tool for Model-Based Parsing. In: YIN, Hujun, WANG, Wenjia and RAYWARD-SMITH, Victor (eds.), Intelligent Data Engineering and Automated Learning - IDEAL 2011. Berlin, Heidelberg: Springer. 2011. p. 50–57. Lecture Notes in Computer Science. ISBN 978-3-642-23878-9. DOI 10.1007/978-3-642-23878-9_7. \n> Typically, formal languages are described by providing a textual [[BNF-like Notation]] specification, which is then manually annotated for syntax-directed translation. When the use of an explicit model is required, its implementation requires the development of the conversion steps between the model and the grammar, and between the parse tree and the model instance. Whenever the language specification is modified, the developer has to manually propagate changes throughout the entire language processor pipeline. These updates are time-consuming, tedious, and error-prone. Besides, in the case that different applications use the same language, the developer has to maintain several copies of the same language specification. In this paper, we introduce a model-based parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "32a7043be7a06a43",
      "text": "SOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yaml \n> Work with YAML in Elm. \n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/Citezen \n> Citezen is a bib parser and tool suite\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Parser",
        "story": []
      },
      "date": 1631788278222
    },
    {
      "item": {
        "type": "factory",
        "id": "0f1ff66171665a2b"
      },
      "id": "0f1ff66171665a2b",
      "type": "add",
      "date": 1631788288296
    },
    {
      "type": "edit",
      "id": "0f1ff66171665a2b",
      "item": {
        "type": "markdown",
        "id": "0f1ff66171665a2b",
        "text": "Answer a parser that accepts the receiving string."
      },
      "date": 1631788290547
    },
    {
      "item": {
        "type": "factory",
        "id": "990c558187dbe188"
      },
      "id": "990c558187dbe188",
      "type": "add",
      "after": "0f1ff66171665a2b",
      "date": 1631788312373
    },
    {
      "type": "edit",
      "id": "990c558187dbe188",
      "item": {
        "type": "markdown",
        "id": "990c558187dbe188",
        "text": "See [[PP2HtmlHeaderGrammar]]"
      },
      "date": 1631788336012
    },
    {
      "item": {
        "type": "factory",
        "id": "b389786775704537"
      },
      "id": "b389786775704537",
      "type": "add",
      "after": "990c558187dbe188",
      "date": 1654860219343
    },
    {
      "type": "edit",
      "id": "b389786775704537",
      "item": {
        "type": "paragraph",
        "id": "b389786775704537",
        "text": "⇒ [[parse]]"
      },
      "date": 1654860236192
    },
    {
      "item": {
        "type": "factory",
        "id": "36b754cd8d82d59d"
      },
      "id": "36b754cd8d82d59d",
      "type": "add",
      "after": "b389786775704537",
      "date": 1670954503692
    },
    {
      "type": "edit",
      "id": "36b754cd8d82d59d",
      "item": {
        "type": "pagefold",
        "id": "36b754cd8d82d59d",
        "text": "~"
      },
      "date": 1670954507314
    },
    {
      "item": {
        "type": "factory",
        "id": "1186c7a8c7a40369"
      },
      "id": "1186c7a8c7a40369",
      "type": "add",
      "after": "36b754cd8d82d59d",
      "date": 1670954508693
    },
    {
      "type": "edit",
      "id": "1186c7a8c7a40369",
      "item": {
        "type": "paragraph",
        "id": "1186c7a8c7a40369",
        "text": "An integration of triple parser with predicate based approach for search engine development"
      },
      "date": 1670954510866
    },
    {
      "type": "edit",
      "id": "1186c7a8c7a40369",
      "item": {
        "type": "paragraph",
        "id": "1186c7a8c7a40369",
        "text": "An integration of triple parser with predicate based approach for search engine development. [https://doi.org/10.1109/ECS.2015.7124969 doi]"
      },
      "date": 1670954552572
    },
    {
      "item": {
        "type": "factory",
        "id": "322dcef8e1bf305e"
      },
      "id": "322dcef8e1bf305e",
      "type": "add",
      "after": "1186c7a8c7a40369",
      "date": 1670954596907
    },
    {
      "type": "edit",
      "id": "322dcef8e1bf305e",
      "item": {
        "type": "markdown",
        "id": "322dcef8e1bf305e",
        "text": "> Since people do not like automated methods, it is replaced by interactive query expansion"
      },
      "date": 1670954600309
    },
    {
      "item": {
        "type": "factory",
        "id": "6f58cab29e8725ba"
      },
      "id": "6f58cab29e8725ba",
      "type": "add",
      "after": "322dcef8e1bf305e",
      "date": 1670954617251
    },
    {
      "type": "edit",
      "id": "6f58cab29e8725ba",
      "item": {
        "type": "paragraph",
        "id": "6f58cab29e8725ba",
        "text": "[[Interactive Query Expansion]]"
      },
      "date": 1670954623898
    },
    {
      "type": "edit",
      "id": "6f58cab29e8725ba",
      "item": {
        "type": "paragraph",
        "id": "6f58cab29e8725ba",
        "text": "⇒ [[Interactive Query Expansion]]"
      },
      "date": 1670954630460
    },
    {
      "id": "322dcef8e1bf305e",
      "type": "remove",
      "date": 1670954638791
    },
    {
      "type": "edit",
      "id": "1186c7a8c7a40369",
      "item": {
        "type": "paragraph",
        "id": "1186c7a8c7a40369",
        "text": "An integration of triple parser with predicate based approach for search engine development. "
      },
      "date": 1670954690291
    },
    {
      "type": "remove",
      "id": "1186c7a8c7a40369",
      "date": 1670954697195
    },
    {
      "item": {
        "type": "factory",
        "id": "8f4c21d816532c20"
      },
      "id": "8f4c21d816532c20",
      "type": "add",
      "after": "6f58cab29e8725ba",
      "date": 1670956025247
    },
    {
      "type": "edit",
      "id": "8f4c21d816532c20",
      "item": {
        "type": "markdown",
        "id": "8f4c21d816532c20",
        "text": "\nmarkedjs/marked, 2019. Online. JavaScript. markedjs. [Accessed 27 November 2019]. Available from: https://github.com/markedjs/markedA markdown parser and compiler. Built for speed. Contribute to markedjs/marked development by creating an account on GitHub.\n\nmoosetechnology/PetitParser, 2021. Online. Smalltalk. moosetechnology. [Accessed 3 May 2021]. Available from: https://github.com/moosetechnology/PetitParserPetit Parser is a framework for building parsers. Contribute to moosetechnology/PetitParser development by creating an account on GitHub.\n\nQUESADA, Luis, BERZAL, Fernando and CUBERO, Juan-Carlos, 2011. A Language Specification Tool for Model-Based Parsing. In: YIN, Hujun, WANG, Wenjia and RAYWARD-SMITH, Victor (eds.), Intelligent Data Engineering and Automated Learning - IDEAL 2011. Berlin, Heidelberg: Springer. 2011. p. 50–57. Lecture Notes in Computer Science. ISBN 978-3-642-23878-9. DOI 10.1007/978-3-642-23878-9_7. Typically, formal languages are described by providing a textual BNF-like notation specification, which is then manually annotated for syntax-directed translation. When the use of an explicit model is required, its implementation requires the development of the conversion steps between the model and the grammar, and between the parse tree and the model instance. Whenever the language specification is modified, the developer has to manually propagate changes throughout the entire language processor pipeline. These updates are time-consuming, tedious, and error-prone. Besides, in the case that different applications use the same language, the developer has to maintain several copies of the same language specification. In this paper, we introduce a model-based parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.\n\nSOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yamlWork with YAML in Elm. Contribute to terezka/yaml development by creating an account on GitHub.\n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/CitezenCitezen is a bib parser and tool suite\n"
      },
      "date": 1670956028002
    },
    {
      "type": "edit",
      "id": "8f4c21d816532c20",
      "item": {
        "type": "markdown",
        "id": "8f4c21d816532c20",
        "text": "markedjs/marked, 2019. Online. JavaScript. markedjs. [Accessed 27 November 2019]. Available from: https://github.com/markedjs/marked \n> A markdown parser and compiler. Built for speed. Contribute to markedjs/marked development by creating an account on GitHub.\n\nmoosetechnology/PetitParser, 2021. Online. Smalltalk. moosetechnology. [Accessed 3 May 2021]. Available from: https://github.com/moosetechnology/PetitParserPetit Parser is a framework for building parsers. Contribute to moosetechnology/PetitParser development by creating an account on GitHub.\n\nQUESADA, Luis, BERZAL, Fernando and CUBERO, Juan-Carlos, 2011. A Language Specification Tool for Model-Based Parsing. In: YIN, Hujun, WANG, Wenjia and RAYWARD-SMITH, Victor (eds.), Intelligent Data Engineering and Automated Learning - IDEAL 2011. Berlin, Heidelberg: Springer. 2011. p. 50–57. Lecture Notes in Computer Science. ISBN 978-3-642-23878-9. DOI 10.1007/978-3-642-23878-9_7. Typically, formal languages are described by providing a textual BNF-like notation specification, which is then manually annotated for syntax-directed translation. When the use of an explicit model is required, its implementation requires the development of the conversion steps between the model and the grammar, and between the parse tree and the model instance. Whenever the language specification is modified, the developer has to manually propagate changes throughout the entire language processor pipeline. These updates are time-consuming, tedious, and error-prone. Besides, in the case that different applications use the same language, the developer has to maintain several copies of the same language specification. In this paper, we introduce a model-based parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.\n\nSOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yamlWork with YAML in Elm. Contribute to terezka/yaml development by creating an account on GitHub.\n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/CitezenCitezen is a bib parser and tool suite\n"
      },
      "date": 1670956045542
    },
    {
      "type": "edit",
      "id": "8f4c21d816532c20",
      "item": {
        "type": "markdown",
        "id": "8f4c21d816532c20",
        "text": "markedjs/marked, 2019. Online. JavaScript. markedjs. [Accessed 27 November 2019]. Available from: https://github.com/markedjs/marked \n> A markdown parser and compiler. Built for speed. Contribute to markedjs/marked development by creating an account on GitHub.\n\n\nmoosetechnology/PetitParser, 2021. Online. Smalltalk. moosetechnology. [Accessed 3 May 2021]. Available from: https://github.com/moosetechnology/PetitParser \n> Petit Parser is a framework for building parsers. Contribute to moosetechnology/PetitParser development by creating an account on GitHub.\n\nQUESADA, Luis, BERZAL, Fernando and CUBERO, Juan-Carlos, 2011. A Language Specification Tool for Model-Based Parsing. In: YIN, Hujun, WANG, Wenjia and RAYWARD-SMITH, Victor (eds.), Intelligent Data Engineering and Automated Learning - IDEAL 2011. Berlin, Heidelberg: Springer. 2011. p. 50–57. Lecture Notes in Computer Science. ISBN 978-3-642-23878-9. DOI 10.1007/978-3-642-23878-9_7. Typically, formal languages are described by providing a textual BNF-like notation specification, which is then manually annotated for syntax-directed translation. When the use of an explicit model is required, its implementation requires the development of the conversion steps between the model and the grammar, and between the parse tree and the model instance. Whenever the language specification is modified, the developer has to manually propagate changes throughout the entire language processor pipeline. These updates are time-consuming, tedious, and error-prone. Besides, in the case that different applications use the same language, the developer has to maintain several copies of the same language specification. In this paper, we introduce a model-based parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.\n\nSOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yamlWork with YAML in Elm. Contribute to terezka/yaml development by creating an account on GitHub.\n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/CitezenCitezen is a bib parser and tool suite\n"
      },
      "date": 1670956076714
    },
    {
      "type": "edit",
      "id": "8f4c21d816532c20",
      "item": {
        "type": "markdown",
        "id": "8f4c21d816532c20",
        "text": "markedjs/marked, 2019. Online. JavaScript. markedjs. [Accessed 27 November 2019]. Available from: https://github.com/markedjs/marked \n> A markdown parser and compiler. Built for speed. Contribute to markedjs/marked development by creating an account on GitHub.\n\n\n\n"
      },
      "date": 1670956090465
    },
    {
      "type": "add",
      "id": "91f585163794481c",
      "item": {
        "type": "markdown",
        "id": "91f585163794481c",
        "text": "moosetechnology/PetitParser, 2021. Online. Smalltalk. moosetechnology. [Accessed 3 May 2021]. Available from: https://github.com/moosetechnology/PetitParser \n> Petit Parser is a framework for building parsers. Contribute to moosetechnology/PetitParser development by creating an account on GitHub.\n\n\n"
      },
      "after": "8f4c21d816532c20",
      "date": 1670956092998
    },
    {
      "type": "add",
      "id": "7390abcf691d9845",
      "item": {
        "type": "markdown",
        "id": "7390abcf691d9845",
        "text": "QUESADA, Luis, BERZAL, Fernando and CUBERO, Juan-Carlos, 2011. A Language Specification Tool for Model-Based Parsing. In: YIN, Hujun, WANG, Wenjia and RAYWARD-SMITH, Victor (eds.), Intelligent Data Engineering and Automated Learning - IDEAL 2011. Berlin, Heidelberg: Springer. 2011. p. 50–57. Lecture Notes in Computer Science. ISBN 978-3-642-23878-9. DOI 10.1007/978-3-642-23878-9_7. \n> Typically, formal languages are described by providing a textual BNF-like notation specification, which is then manually annotated for syntax-directed translation. When the use of an explicit model is required, its implementation requires the development of the conversion steps between the model and the grammar, and between the parse tree and the model instance. Whenever the language specification is modified, the developer has to manually propagate changes throughout the entire language processor pipeline. These updates are time-consuming, tedious, and error-prone. Besides, in the case that different applications use the same language, the developer has to maintain several copies of the same language specification. In this paper, we introduce a model-based parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.\n\nSOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yamlWork with YAML in Elm. Contribute to terezka/yaml development by creating an account on GitHub.\n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/CitezenCitezen is a bib parser and tool suite\n"
      },
      "after": "91f585163794481c",
      "date": 1670956098246
    },
    {
      "type": "edit",
      "id": "7390abcf691d9845",
      "item": {
        "type": "markdown",
        "id": "7390abcf691d9845",
        "text": "QUESADA, Luis, BERZAL, Fernando and CUBERO, Juan-Carlos, 2011. A Language Specification Tool for Model-Based Parsing. In: YIN, Hujun, WANG, Wenjia and RAYWARD-SMITH, Victor (eds.), Intelligent Data Engineering and Automated Learning - IDEAL 2011. Berlin, Heidelberg: Springer. 2011. p. 50–57. Lecture Notes in Computer Science. ISBN 978-3-642-23878-9. DOI 10.1007/978-3-642-23878-9_7. \n> Typically, formal languages are described by providing a textual [[BNF-like notation]] specification, which is then manually annotated for syntax-directed translation. When the use of an explicit model is required, its implementation requires the development of the conversion steps between the model and the grammar, and between the parse tree and the model instance. Whenever the language specification is modified, the developer has to manually propagate changes throughout the entire language processor pipeline. These updates are time-consuming, tedious, and error-prone. Besides, in the case that different applications use the same language, the developer has to maintain several copies of the same language specification. In this paper, we introduce a model-based parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.\n\nSOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yamlWork with YAML in Elm. Contribute to terezka/yaml development by creating an account on GitHub.\n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/CitezenCitezen is a bib parser and tool suite\n"
      },
      "date": 1670956127024
    },
    {
      "type": "edit",
      "id": "7390abcf691d9845",
      "item": {
        "type": "markdown",
        "id": "7390abcf691d9845",
        "text": "QUESADA, Luis, BERZAL, Fernando and CUBERO, Juan-Carlos, 2011. A Language Specification Tool for Model-Based Parsing. In: YIN, Hujun, WANG, Wenjia and RAYWARD-SMITH, Victor (eds.), Intelligent Data Engineering and Automated Learning - IDEAL 2011. Berlin, Heidelberg: Springer. 2011. p. 50–57. Lecture Notes in Computer Science. ISBN 978-3-642-23878-9. DOI 10.1007/978-3-642-23878-9_7. \n> Typically, formal languages are described by providing a textual [[BNF-like Notation]] specification, which is then manually annotated for syntax-directed translation. When the use of an explicit model is required, its implementation requires the development of the conversion steps between the model and the grammar, and between the parse tree and the model instance. Whenever the language specification is modified, the developer has to manually propagate changes throughout the entire language processor pipeline. These updates are time-consuming, tedious, and error-prone. Besides, in the case that different applications use the same language, the developer has to maintain several copies of the same language specification. In this paper, we introduce a model-based parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.\n\nSOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yamlWork with YAML in Elm. Contribute to terezka/yaml development by creating an account on GitHub.\n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/CitezenCitezen is a bib parser and tool suite\n"
      },
      "date": 1670956138813
    },
    {
      "type": "edit",
      "id": "7390abcf691d9845",
      "item": {
        "type": "markdown",
        "id": "7390abcf691d9845",
        "text": "QUESADA, Luis, BERZAL, Fernando and CUBERO, Juan-Carlos, 2011. A Language Specification Tool for Model-Based Parsing. In: YIN, Hujun, WANG, Wenjia and RAYWARD-SMITH, Victor (eds.), Intelligent Data Engineering and Automated Learning - IDEAL 2011. Berlin, Heidelberg: Springer. 2011. p. 50–57. Lecture Notes in Computer Science. ISBN 978-3-642-23878-9. DOI 10.1007/978-3-642-23878-9_7. \n> Typically, formal languages are described by providing a textual [[BNF-like Notation]] specification, which is then manually annotated for syntax-directed translation. When the use of an explicit model is required, its implementation requires the development of the conversion steps between the model and the grammar, and between the parse tree and the model instance. Whenever the language specification is modified, the developer has to manually propagate changes throughout the entire language processor pipeline. These updates are time-consuming, tedious, and error-prone. Besides, in the case that different applications use the same language, the developer has to maintain several copies of the same language specification. In this paper, we introduce a model-based parser generator that decouples language specification from language processing, hence avoiding many of the problems caused by grammar-driven parsers and parser generators.\n\n\n"
      },
      "date": 1670956172233
    },
    {
      "type": "add",
      "id": "32a7043be7a06a43",
      "item": {
        "type": "markdown",
        "id": "32a7043be7a06a43",
        "text": "SOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yaml \n> Work with YAML in Elm. Contribute to terezka/yaml development by creating an account on GitHub.\n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/CitezenCitezen is a bib parser and tool suite\n"
      },
      "after": "7390abcf691d9845",
      "date": 1670956187656
    },
    {
      "type": "edit",
      "id": "32a7043be7a06a43",
      "item": {
        "type": "markdown",
        "id": "32a7043be7a06a43",
        "text": "SOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yaml \n> Work with YAML in Elm. \n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/CitezenCitezen is a bib parser and tool suite\n"
      },
      "date": 1670956193201
    },
    {
      "type": "edit",
      "id": "32a7043be7a06a43",
      "item": {
        "type": "markdown",
        "id": "32a7043be7a06a43",
        "text": "SOKOL, Tereza, 2020. terezka/yaml. Online. Elm. 20 March 2020. [Accessed 5 June 2020]. Available from: https://github.com/terezka/yaml \n> Work with YAML in Elm. \n\nSTÉPHANEDUCASSE, 2021. Citezen. Online. Smalltalk. 14 October 2021. [Accessed 25 August 2022]. Available from: https://github.com/Ducasse/Citezen \n> Citezen is a bib parser and tool suite\n"
      },
      "date": 1670956202437
    },
    {
      "type": "add",
      "id": "9e1a05703f874d14",
      "item": {
        "type": "paragraph",
        "id": "9e1a05703f874d14",
        "text": "\"A shallow parser\""
      },
      "after": "6f58cab29e8725ba",
      "date": 1670960446486
    },
    {
      "type": "edit",
      "id": "9e1a05703f874d14",
      "item": {
        "type": "paragraph",
        "id": "9e1a05703f874d14",
        "text": "\"A shallow parser\". [https://scholar.google.ch/scholar?hl=de&as_sdt=0%2C5&q=%22A+shallow+parser%22&btnG= scholar]"
      },
      "date": 1670960457581
    }
  ]
}