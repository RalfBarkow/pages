{
  "title": "Microdown",
  "story": [
    {
      "type": "markdown",
      "id": "c061b06199ba1985",
      "text": "clean and extensible markup language to support [[Pharo]] documentation"
    },
    {
      "type": "video",
      "id": "8853b7963ed4979c",
      "text": "YOUTUBE kblJODD9SA0\nPresentation of Microdown in IWST 2020.\n"
    },
    {
      "type": "pagefold",
      "id": "94b72a1f470826f7",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "e57c06bba0026f5c",
      "text": "Kasper Østerbye <notifications@github.com>"
    },
    {
      "type": "paragraph",
      "id": "bec3e2964b019a4b",
      "text": "[pillar-markup/Microdown] Documentation of Microdown itself (Issue #531)"
    },
    {
      "type": "markdown",
      "id": "12dba82da5a9a880",
      "text": "I have seen a number of short introductions to Microdown now, and I think it is worth trying to agree on where this documentation should live so we can collaborate on one good documentation rather than several half baked.\n\nFirst a list of the ones I know of:\n\n* Hernán have made a list in: https://github.com/pillar-markup/Presentations/blob/main/pointsFromHernan.txt\n* The readme file of Microdown: https://github.com/pillar-markup/Microdown\n* The documents in Microdown/doc: https://github.com/pillar-markup/Microdown/tree/dev/doc\n* Documentation in the Microdown package (in the image)\n\n\n"
    },
    {
      "type": "markdown",
      "id": "1e1892ebe2ef3d0b",
      "text": "Second I want to point to two mechanisms which currently work:\n\n* It is possible to use inputFile in package and class comments.\nSo if one wants a readme file to be a package comment as well, just put an inputFile in the comment. For example:\n    <!inputFile|path=https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md!>.\n* If the document browser/editor package is present, one can make links in package/class comments (and elsewhere) which links to an external microdown document which will open in the document browser when clicked. For example\n    [Readme of Microdown](https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md)\n\nThe purpose of these two is to support interoperability between in-image and external documents.\nIn particular to be able to store larger pieces of documents outside the image, but to be able to present it in-image in a seamless manner.\n\nMy personal suggestion is to:\n\n* Keep and extend on the documents in Microdown/doc\n* Replace the short into in Microdown/readme with a link to Microdown/doc/readme. The Microdown/readme should then concentrate on install instructions\n* Expand the Microdown/doc folder with info on using Microdown for Latex, HTML, etc\n\n—\nReply to this email directly, view it on GitHub, or unsubscribe.\nYou are receiving this because you are subscribed to this thread.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Microdown",
        "story": []
      },
      "date": 1627631455409
    },
    {
      "item": {
        "type": "factory",
        "id": "8853b7963ed4979c"
      },
      "id": "8853b7963ed4979c",
      "type": "add",
      "date": 1627631456845
    },
    {
      "type": "edit",
      "id": "8853b7963ed4979c",
      "item": {
        "type": "video",
        "id": "8853b7963ed4979c",
        "text": "YOUTUBE kblJODD9SA0"
      },
      "date": 1627631469548
    },
    {
      "type": "edit",
      "id": "8853b7963ed4979c",
      "item": {
        "type": "video",
        "id": "8853b7963ed4979c",
        "text": "YOUTUBE kblJODD9SA0\nPresentation of Microdown in IWST 2020.\n\nMicrodown: clean and extensible markup language to support Pharo documentation."
      },
      "date": 1627631497642
    },
    {
      "item": {
        "type": "factory",
        "id": "c061b06199ba1985"
      },
      "id": "c061b06199ba1985",
      "type": "add",
      "after": "8853b7963ed4979c",
      "date": 1627631515248
    },
    {
      "type": "edit",
      "id": "c061b06199ba1985",
      "item": {
        "type": "markdown",
        "id": "c061b06199ba1985",
        "text": "clean and extensible markup language to support Pharo documentation"
      },
      "date": 1627631522322
    },
    {
      "id": "c061b06199ba1985",
      "type": "move",
      "order": [
        "c061b06199ba1985",
        "8853b7963ed4979c"
      ],
      "date": 1627631524511
    },
    {
      "type": "edit",
      "id": "8853b7963ed4979c",
      "item": {
        "type": "video",
        "id": "8853b7963ed4979c",
        "text": "YOUTUBE kblJODD9SA0\nPresentation of Microdown in IWST 2020.\n"
      },
      "date": 1627631537177
    },
    {
      "type": "edit",
      "id": "c061b06199ba1985",
      "item": {
        "type": "markdown",
        "id": "c061b06199ba1985",
        "text": "clean and extensible markup language to support [[Pharo]] documentation"
      },
      "date": 1627631555076
    },
    {
      "item": {
        "type": "pagefold",
        "id": "94b72a1f470826f7",
        "text": "~"
      },
      "id": "94b72a1f470826f7",
      "type": "add",
      "after": "8853b7963ed4979c",
      "date": 1660126062392
    },
    {
      "type": "edit",
      "id": "94b72a1f470826f7",
      "item": {
        "type": "pagefold",
        "id": "94b72a1f470826f7",
        "text": "~"
      },
      "date": 1660126065561
    },
    {
      "item": {
        "type": "paragraph",
        "id": "e57c06bba0026f5c",
        "text": "Kasper Østerbye <notifications@github.com>"
      },
      "id": "e57c06bba0026f5c",
      "type": "add",
      "after": "94b72a1f470826f7",
      "date": 1660126067429
    },
    {
      "type": "edit",
      "id": "e57c06bba0026f5c",
      "item": {
        "type": "paragraph",
        "id": "e57c06bba0026f5c",
        "text": "Kasper Østerbye <notifications@github.com>"
      },
      "date": 1660126069786
    },
    {
      "item": {
        "type": "paragraph",
        "id": "bec3e2964b019a4b",
        "text": "[pillar-markup/Microdown] Documentation of Microdown itself (Issue #531)"
      },
      "id": "bec3e2964b019a4b",
      "type": "add",
      "after": "e57c06bba0026f5c",
      "date": 1660126078779
    },
    {
      "type": "edit",
      "id": "bec3e2964b019a4b",
      "item": {
        "type": "paragraph",
        "id": "bec3e2964b019a4b",
        "text": "[pillar-markup/Microdown] Documentation of Microdown itself (Issue #531)"
      },
      "date": 1660126080346
    },
    {
      "item": {
        "type": "markdown",
        "id": "12dba82da5a9a880",
        "text": "\n\nI have seen a number of short introductions to Microdown now, and I think it is worth trying to agree on where this documentation should live so we can collaborate on one good documentation rather than several half baked.\n\nFirst a list of the ones I know of:\n\n    Hernán have made a list in: https://github.com/pillar-markup/Presentations/blob/main/pointsFromHernan.txt\n    The readme file of Microdown: https://github.com/pillar-markup/Microdown\n    The documents in Microdown/doc: https://github.com/pillar-markup/Microdown/tree/dev/doc\n    Documentation in the Microdown package (in the image)\n\nSecond I want to point to two mechanisms which currently work:\n\n    It is possible to use inputFile in package and class comments.\n    So if one wants a readme file to be a package comment as well, just put an inputFile in the comment. For example:\n    <!inputFile|path=https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md!>.\n    If the document browser/editor package is present, one can make links in package/class comments (and elsewhere) which links to an external microdown document which will open in the document browser when clicked. For example\n    [Readme of Microdown](https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md)\n\nThe purpose of these two is to support interoperability between in-image and external documents.\nIn particular to be able to store larger pieces of documents outside the image, but to be able to present it in-image in a seamless manner.\n\nMy personal suggestion is to:\n\n    Keep and extend on the documents in Microdown/doc\n    Replace the short into in Microdown/readme with a link to Microdown/doc/readme. The Microdown/readme should then concentrate on install instructions\n    Expand the Microdown/doc folder with info on using Microdown for Latex, HTML, etc\n\n—\nReply to this email directly, view it on GitHub, or unsubscribe.\nYou are receiving this because you are subscribed to this thread.\n"
      },
      "id": "12dba82da5a9a880",
      "type": "add",
      "after": "bec3e2964b019a4b",
      "date": 1660126085056,
      "error": {
        "type": "error",
        "msg": "Bad Gateway",
        "response": "<html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n"
      }
    },
    {
      "type": "edit",
      "id": "12dba82da5a9a880",
      "item": {
        "type": "markdown",
        "id": "12dba82da5a9a880",
        "text": "\n\nI have seen a number of short introductions to Microdown now, and I think it is worth trying to agree on where this documentation should live so we can collaborate on one good documentation rather than several half baked.\n\nFirst a list of the ones I know of:\n\n    Hernán have made a list in: https://github.com/pillar-markup/Presentations/blob/main/pointsFromHernan.txt\n    The readme file of Microdown: https://github.com/pillar-markup/Microdown\n    The documents in Microdown/doc: https://github.com/pillar-markup/Microdown/tree/dev/doc\n    Documentation in the Microdown package (in the image)\n\nSecond I want to point to two mechanisms which currently work:\n\n    It is possible to use inputFile in package and class comments.\n    So if one wants a readme file to be a package comment as well, just put an inputFile in the comment. For example:\n    <!inputFile|path=https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md!>.\n    If the document browser/editor package is present, one can make links in package/class comments (and elsewhere) which links to an external microdown document which will open in the document browser when clicked. For example\n    [Readme of Microdown](https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md)\n\nThe purpose of these two is to support interoperability between in-image and external documents.\nIn particular to be able to store larger pieces of documents outside the image, but to be able to present it in-image in a seamless manner.\n\nMy personal suggestion is to:\n\n    Keep and extend on the documents in Microdown/doc\n    Replace the short into in Microdown/readme with a link to Microdown/doc/readme. The Microdown/readme should then concentrate on install instructions\n    Expand the Microdown/doc folder with info on using Microdown for Latex, HTML, etc\n\n—\nReply to this email directly, view it on GitHub, or unsubscribe.\nYou are receiving this because you are subscribed to this thread.\n"
      },
      "date": 1660126086898,
      "error": {
        "type": "error",
        "msg": "Bad Gateway",
        "response": "<html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n"
      }
    },
    {
      "type": "edit",
      "id": "12dba82da5a9a880",
      "item": {
        "type": "markdown",
        "id": "12dba82da5a9a880",
        "text": "\nI have seen a number of short introductions to Microdown now, and I think it is worth trying to agree on where this documentation should live so we can collaborate on one good documentation rather than several half baked.\n\nFirst a list of the ones I know of:\n\n* Hernán have made a list in: https://github.com/pillar-markup/Presentations/blob/main/pointsFromHernan.txt\n* The readme file of Microdown: https://github.com/pillar-markup/Microdown\n* The documents in Microdown/doc: https://github.com/pillar-markup/Microdown/tree/dev/doc\n* Documentation in the Microdown package (in the image)\n\nSecond I want to point to two mechanisms which currently work:\n\n    It is possible to use inputFile in package and class comments.\n    So if one wants a readme file to be a package comment as well, just put an inputFile in the comment. For example:\n    <!inputFile|path=https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md!>.\n    If the document browser/editor package is present, one can make links in package/class comments (and elsewhere) which links to an external microdown document which will open in the document browser when clicked. For example\n    [Readme of Microdown](https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md)\n\nThe purpose of these two is to support interoperability between in-image and external documents.\nIn particular to be able to store larger pieces of documents outside the image, but to be able to present it in-image in a seamless manner.\n\nMy personal suggestion is to:\n\n    Keep and extend on the documents in Microdown/doc\n    Replace the short into in Microdown/readme with a link to Microdown/doc/readme. The Microdown/readme should then concentrate on install instructions\n    Expand the Microdown/doc folder with info on using Microdown for Latex, HTML, etc\n\n—\nReply to this email directly, view it on GitHub, or unsubscribe.\nYou are receiving this because you are subscribed to this thread.\n"
      },
      "date": 1660126108344,
      "error": {
        "type": "error",
        "msg": "Bad Gateway",
        "response": "<html>\r\n<head><title>502 Bad Gateway</title></head>\r\n<body>\r\n<center><h1>502 Bad Gateway</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n"
      }
    },
    {
      "type": "fork",
      "date": 1660126114724,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "edit",
      "id": "12dba82da5a9a880",
      "item": {
        "type": "markdown",
        "id": "12dba82da5a9a880",
        "text": "I have seen a number of short introductions to Microdown now, and I think it is worth trying to agree on where this documentation should live so we can collaborate on one good documentation rather than several half baked.\n\nFirst a list of the ones I know of:\n\n* Hernán have made a list in: https://github.com/pillar-markup/Presentations/blob/main/pointsFromHernan.txt\n* The readme file of Microdown: https://github.com/pillar-markup/Microdown\n* The documents in Microdown/doc: https://github.com/pillar-markup/Microdown/tree/dev/doc\n* Documentation in the Microdown package (in the image)\n\n\n"
      },
      "date": 1660126145151,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "edit",
      "id": "12dba82da5a9a880",
      "item": {
        "type": "markdown",
        "id": "12dba82da5a9a880",
        "text": "I have seen a number of short introductions to Microdown now, and I think it is worth trying to agree on where this documentation should live so we can collaborate on one good documentation rather than several half baked.\n\nFirst a list of the ones I know of:\n\n* Hernán have made a list in: https://github.com/pillar-markup/Presentations/blob/main/pointsFromHernan.txt\n* The readme file of Microdown: https://github.com/pillar-markup/Microdown\n* The documents in Microdown/doc: https://github.com/pillar-markup/Microdown/tree/dev/doc\n* Documentation in the Microdown package (in the image)\n\n\n"
      },
      "date": 1660126134747,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "fork",
      "date": 1660126167453,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "add",
      "id": "1e1892ebe2ef3d0b",
      "item": {
        "type": "markdown",
        "id": "1e1892ebe2ef3d0b",
        "text": "Second I want to point to two mechanisms which currently work:\n\n* It is possible to use inputFile in package and class comments.\nSo if one wants a readme file to be a package comment as well, just put an inputFile in the comment. For example:\n    <!inputFile|path=https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md!>.\n* If the document browser/editor package is present, one can make links in package/class comments (and elsewhere) which links to an external microdown document which will open in the document browser when clicked. For example\n    [Readme of Microdown](https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md)\n\nThe purpose of these two is to support interoperability between in-image and external documents.\nIn particular to be able to store larger pieces of documents outside the image, but to be able to present it in-image in a seamless manner.\n\nMy personal suggestion is to:\n\n    Keep and extend on the documents in Microdown/doc\n    Replace the short into in Microdown/readme with a link to Microdown/doc/readme. The Microdown/readme should then concentrate on install instructions\n    Expand the Microdown/doc folder with info on using Microdown for Latex, HTML, etc\n\n—\nReply to this email directly, view it on GitHub, or unsubscribe.\nYou are receiving this because you are subscribed to this thread.\n"
      },
      "after": "12dba82da5a9a880",
      "date": 1660126149377,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "edit",
      "id": "1e1892ebe2ef3d0b",
      "item": {
        "type": "markdown",
        "id": "1e1892ebe2ef3d0b",
        "text": "Second I want to point to two mechanisms which currently work:\n\n* It is possible to use inputFile in package and class comments.\nSo if one wants a readme file to be a package comment as well, just put an inputFile in the comment. For example:\n    <!inputFile|path=https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md!>.\n* If the document browser/editor package is present, one can make links in package/class comments (and elsewhere) which links to an external microdown document which will open in the document browser when clicked. For example\n    [Readme of Microdown](https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md)\n\nThe purpose of these two is to support interoperability between in-image and external documents.\nIn particular to be able to store larger pieces of documents outside the image, but to be able to present it in-image in a seamless manner.\n\nMy personal suggestion is to:\n\n    Keep and extend on the documents in Microdown/doc\n    Replace the short into in Microdown/readme with a link to Microdown/doc/readme. The Microdown/readme should then concentrate on install instructions\n    Expand the Microdown/doc folder with info on using Microdown for Latex, HTML, etc\n\n—\nReply to this email directly, view it on GitHub, or unsubscribe.\nYou are receiving this because you are subscribed to this thread.\n"
      },
      "date": 1660126160934,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "edit",
      "id": "1e1892ebe2ef3d0b",
      "item": {
        "type": "markdown",
        "id": "1e1892ebe2ef3d0b",
        "text": "Second I want to point to two mechanisms which currently work:\n\n* It is possible to use inputFile in package and class comments.\nSo if one wants a readme file to be a package comment as well, just put an inputFile in the comment. For example:\n    <!inputFile|path=https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md!>.\n* If the document browser/editor package is present, one can make links in package/class comments (and elsewhere) which links to an external microdown document which will open in the document browser when clicked. For example\n    [Readme of Microdown](https://raw.githubusercontent.com/pillar-markup/Microdown/dev/doc/readme.md)\n\nThe purpose of these two is to support interoperability between in-image and external documents.\nIn particular to be able to store larger pieces of documents outside the image, but to be able to present it in-image in a seamless manner.\n\nMy personal suggestion is to:\n\n* Keep and extend on the documents in Microdown/doc\n* Replace the short into in Microdown/readme with a link to Microdown/doc/readme. The Microdown/readme should then concentrate on install instructions\n* Expand the Microdown/doc folder with info on using Microdown for Latex, HTML, etc\n\n—\nReply to this email directly, view it on GitHub, or unsubscribe.\nYou are receiving this because you are subscribed to this thread.\n"
      },
      "date": 1660126440985
    },
    {
      "type": "fork",
      "date": 1660126444031
    }
  ]
}