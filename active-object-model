{
  "title": "Active Object Model",
  "story": [
    {
      "type": "html",
      "text": "See also [[Adaptive Object Model]], which seems to be the preferred term.",
      "id": "5b0910f91ff5a05ed993934177f979f1"
    },
    {
      "type": "html",
      "text": "\nOne of the things about OOPSLA'97 that impressed\nme the most was that half of the demos had an\nexplicit representation of their object model that\nthey would interpret.  Each system used a different\nname for this idea, often including \"meta\" as part of\nthe name.  But the name that I liked best was  [[Active Object Model]].",
      "id": "71f40c27432c6578252287389cb8c151"
    },
    {
      "type": "html",
      "text": "<i>[See [[Meta Data]], [[Meta Level]] for more about \"meta\"]</i>",
      "id": "6613dd61d650c869fac20011d501d9f2"
    },
    {
      "type": "html",
      "text": "\nYou can easily get yourself in trouble with an \n[[Active Object Model]].  It can make your application\nmore abstract and harder for newcomers to understand.\nHowever, it can also drastically simplify an application,\ncan make programs become much more extensible without\nrecompiling them, and can make an expert extremely productive.",
      "id": "2bc8e312e5fbafa0bd1e0d62ef88c6e9"
    },
    {
      "type": "html",
      "text": "\nA system with an [[Active Object Model]] has an explicit object\nmodel that it interprets at run-time.  If you change the\nobject model, the system changes its behavior.  For example,\na lot of workflow systems have an [[Active Object Model]].\nObjects have states and respond to events by changing state.\nThe [[Active Object Model]] defines the objects, their states,\nthe events, and the conditions under which an object\nchanges state.  Suitably privileged people can change \nthis object model \"without programming\".  Or are they\nprogramming after all?",
      "id": "264243325de93b0530979dbc085cec14"
    },
    {
      "type": "html",
      "text": "\nOne of the systems at OOPSLA was used for defining\npotential products.  The products were complex\ntelecommunications equipment.  Each product had hundreds\nof options, and only certainly combination of options\nwere legal. The system had an object model that described\nthe different components of a product and which \nconfigurations were legal.  The whole system used only\nfour or five classes, but these classes were things\nlike Object and Relation.  The thousands of kinds of\nproducts were all just instances of Object.  They would\nconfigure a system for sale by making a clone of one of\nthe existing Objects and customizing it.  So, this\nsystem not only had an [[Active Object Model]], it used the\nPrototype pattern.  The authors claimed they could\nbuild a system in .01% of the time that others took to\nbuild it.",
      "id": "4fb1421eef2f9252481b95afd45c1a19"
    },
    {
      "type": "html",
      "text": "\nThe Hartford has an [[Active Object Model]] for representing\ninsurance policies.  A policy is a tree of objects,\neach of which is an instance of Component.  Each Component\nhas a type, which is an instance of [[Component Type]].  \nEach instance of [[Component Type]] has a name and defines\na set of attributes.  For example, the [[Component Type]]\nnamed \"Auto\" defines attributes like \"Make\" and \"Year\",\nwhile the [[Component Type]] named \"Property\" defines attributes like \"Address\" and \"Construction\".  The\ncomponent representing the policy on a house has the\ntype \"Property\", and gives values to all the attributes\ndefined by the \"Property\" [[Component Type]].",
      "id": "d06e60d6237710aea2658e2e9eaa8bb5"
    },
    {
      "type": "html",
      "text": "-[[Ralph Johnson]]",
      "id": "bd70ad3b66424b76b29d37608536979c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "This is similar to [[Customization Via Programming]].",
      "id": "6b7bf7da68920317a4156b360b69e959"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "Ralph, you mention attributes above, but what about methods?  Moreover, is AOM really different from, say, a pure prototype system like Self? ",
      "id": "bf169b597741a1665cccb0232035dc70"
    },
    {
      "type": "html",
      "text": "\nIt is very interesting to me that here the object model is made explicit and over in [[Multi Caster]], the connection and notification models are made explicit.  -- [[Michael Feathers]]",
      "id": "8c2689b6c694530f5ae59e26ec42bf39"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "This seems a bit related to [[Business Rules]], where the rules are made explicit.",
      "id": "7604284c29b2b7488f9a6cf4122d6a26"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "I've seen systems that let you define rules and associate them with types.\nThe Hartford system is one.  But some of the systems don't do this, so it\nseems to be an optional part of the pattern.",
      "id": "fc31e16a56e587925c6d213d36814c4b"
    },
    {
      "type": "html",
      "text": "\nSelf is a language.  These systems are not billed as languages, though of\ncourse you can think of them as languages.  Self is prototype based, while\nthese are based on the [[Type Object]] pattern.  [[James Noble]] has apparently seen\nquite a few prototype-based systems that are similar to this.  I haven't.",
      "id": "936afbe3eb991cafd25a193d90f49ef9"
    },
    {
      "type": "html",
      "text": "\nA lot of patterns make something explicit that is usually implicit.\nI think that is a common trick in OO design.",
      "id": "730045847271f157da5a1391b45cbda4"
    },
    {
      "type": "html",
      "text": "-- [[Ralph Johnson]]",
      "id": "4c8e5d5384d21fbc2f94bb1a68f18bc8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "Good insight. See also [[Aspect Oriented Programming]].",
      "id": "3fd0c2ae44c4fa1fcabb5795dbfc9f87"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "284428c640a1f5526a0f96b258faf640"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "I would have called it an [[Abstract Machine]]: you are building a custom set of entities and an instruction set to go along with it. All your domain problems are expressed as combinations of these things. I like these types of designs -- must be my Operating System bias. If you take this seriously, and take into account language-design issues like naming and scope and so on, the designs become super-flexible with little effort. A closely related idea is the Bell Labs' [[Little Language]] school of design. Although I think the labs people were mistaken to build so many little languages, a single common language like lisp or smalltalk is much better. (Yes, I know they were working on resource-starved machines).  -- [[Aamod Sane]]",
      "id": "3d9e31242850fc7d7b44447e51cad4d0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "Manufacturing systems (MRP, ERP) usually have more than one level of active models:  one level often called Masters, e.g. Product Master, [[Bill Of Material]] Master, Routing Master, defines products and their associated processes generally.  The Master level sometimes also has something corresponding to a [[Type Object]].  In process industries, the Master level might be called Recipes or Formulas for products.",
      "id": "3220bab78cd52f7a2dac4b83609f1599"
    },
    {
      "type": "html",
      "text": "\nThe next level is Planning or Specification, where people plan specific quantities of specific products to manufacture at specific times. This level is the [[Active Object Model]] for the real-time event level. --Bob Haugen",
      "id": "e2599564c6764bcf21ab4754eca64b9e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "See these pattern languages:",
      "id": "3e22e8f8f6c3d7aaa1c6a498db5b8bc3"
    },
    {
      "type": "html",
      "text": "\n[[Brian Foote]] and [[Joseph Yoder]], <i>Metadata and Active Object-Models</i>,\n[http://www.joeyoder.com/papers/patterns/patterns.html www.joeyoder.com]",
      "id": "be64fbd66ae77f4b299b7f19c848cf71"
    },
    {
      "type": "html",
      "text": "\n[[Martin Fowler]], <i>Dealing with Properties</i>, Copyright year 1997 [http://www.martinfowler.com/apsupp/properties.pdf www.martinfowler.com]",
      "id": "9ca6e96d2450125539d3325885bb0021"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "In my experience, there is one element that makes an [[Active Object Model]] work or break: If you can come up with a complete interpreter or not. The interpreter is actually the place where your domain knowledge goes in. It contains the invariants of the \"[[Business Rules]]\", the fundamental rules the system has to play by. The system can not operate outside this invariants (unless someone comes up with a hack here and there).  The variant parts ([[Hot Spot]]s) have been factored out to the object model it interprets.",
      "id": "c3bf2384ab5d217bfbddc0ab8c6c5419"
    },
    {
      "type": "html",
      "text": "\nIt is interesting that the systems mentioned on this page are all dealing with a relative small and well defined [[Problem Domain]] (Configuration: Combination allowed or not. Insurance: Case Insured or not). All problem domains where it seems to be possible to come up with a closed [[Meta Model]] of what is going on in the real word. So one prerequisite for succesfull applying the pattern might be to have",
      "id": "52f7e72c6e382426ad04744312290fae"
    },
    {
      "type": "html",
      "text": " a relative small, well defined problem domain,",
      "id": "440b30ebf3f3d6f122201cd9744c1547"
    },
    {
      "type": "html",
      "text": " where all principal interactions and relations in the problem domain are known,",
      "id": "037172f7e0dc80c81880dc03b2e234f9"
    },
    {
      "type": "html",
      "text": " and where these can be abstracted into some kind of interpreter,",
      "id": "2203501ea31f20e694c80eacdb9a65ce"
    },
    {
      "type": "html",
      "text": " forming a [[Frame Work]] on a [[Meta Level]].",
      "id": "afe3271713d39d60ef6a68b22a87bf80"
    },
    {
      "type": "html",
      "text": "\nRegarding the last point: In my view, [[Active Object Model]] is about creating a [[Frame Work]], which is based on a higher problem domain abstration than usual (on the [[Meta Level]]). Consequently, the flexible part of such a framework (the object model) operates on the problem domain level.",
      "id": "c8edd88554b4872f4a4bbb87dd827edc"
    },
    {
      "type": "html",
      "text": "-- [[Thomas Weidenfeller]]",
      "id": "0202216cc982b622ec3a6ce5dff7af81"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "\nA note about the pattern's name. [[Active Object]] is a well known OO term, where it denotes that an object executes in its own thread of control. Maybe [[Active Object Model]] is a misleading name?",
      "id": "64466246366dd4374ab1780dad08c0b8"
    },
    {
      "type": "html",
      "text": "\nSeconded!  --[[Paul Morrison]]",
      "id": "5c1e7de4da23e7199649b670c7548815"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "\nSee also: [http://www.adaptiveobjectmodel.com/ www.adaptiveobjectmodel.com] ",
      "id": "1c22ea9d1de829716c06d90916146165"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]] [[Category Models]]",
      "id": "92aac09b47e4479a53029c78c07d539b"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ActiveObjectModel c2.com]",
      "id": "8e723d83ed13dc72f7d0cdb9052fca4e"
    }
  ],
  "journal": [
    {
      "date": 1417692124000,
      "id": "ee6ab82ff5d22e53602be1c8843c5937",
      "type": "create",
      "item": {
        "title": "Active Object Model",
        "story": [
          {
            "type": "html",
            "text": "See also [[Adaptive Object Model]], which seems to be the preferred term.",
            "id": "5b0910f91ff5a05ed993934177f979f1"
          },
          {
            "type": "html",
            "text": "\nOne of the things about OOPSLA'97 that impressed\nme the most was that half of the demos had an\nexplicit representation of their object model that\nthey would interpret.  Each system used a different\nname for this idea, often including \"meta\" as part of\nthe name.  But the name that I liked best was  [[Active Object Model]].",
            "id": "71f40c27432c6578252287389cb8c151"
          },
          {
            "type": "html",
            "text": "<i>[See [[Meta Data]], [[Meta Level]] for more about \"meta\"]</i>",
            "id": "6613dd61d650c869fac20011d501d9f2"
          },
          {
            "type": "html",
            "text": "\nYou can easily get yourself in trouble with an \n[[Active Object Model]].  It can make your application\nmore abstract and harder for newcomers to understand.\nHowever, it can also drastically simplify an application,\ncan make programs become much more extensible without\nrecompiling them, and can make an expert extremely productive.",
            "id": "2bc8e312e5fbafa0bd1e0d62ef88c6e9"
          },
          {
            "type": "html",
            "text": "\nA system with an [[Active Object Model]] has an explicit object\nmodel that it interprets at run-time.  If you change the\nobject model, the system changes its behavior.  For example,\na lot of workflow systems have an [[Active Object Model]].\nObjects have states and respond to events by changing state.\nThe [[Active Object Model]] defines the objects, their states,\nthe events, and the conditions under which an object\nchanges state.  Suitably privileged people can change \nthis object model \"without programming\".  Or are they\nprogramming after all?",
            "id": "264243325de93b0530979dbc085cec14"
          },
          {
            "type": "html",
            "text": "\nOne of the systems at OOPSLA was used for defining\npotential products.  The products were complex\ntelecommunications equipment.  Each product had hundreds\nof options, and only certainly combination of options\nwere legal. The system had an object model that described\nthe different components of a product and which \nconfigurations were legal.  The whole system used only\nfour or five classes, but these classes were things\nlike Object and Relation.  The thousands of kinds of\nproducts were all just instances of Object.  They would\nconfigure a system for sale by making a clone of one of\nthe existing Objects and customizing it.  So, this\nsystem not only had an [[Active Object Model]], it used the\nPrototype pattern.  The authors claimed they could\nbuild a system in .01% of the time that others took to\nbuild it.",
            "id": "4fb1421eef2f9252481b95afd45c1a19"
          },
          {
            "type": "html",
            "text": "\nThe Hartford has an [[Active Object Model]] for representing\ninsurance policies.  A policy is a tree of objects,\neach of which is an instance of Component.  Each Component\nhas a type, which is an instance of [[Component Type]].  \nEach instance of [[Component Type]] has a name and defines\na set of attributes.  For example, the [[Component Type]]\nnamed \"Auto\" defines attributes like \"Make\" and \"Year\",\nwhile the [[Component Type]] named \"Property\" defines attributes like \"Address\" and \"Construction\".  The\ncomponent representing the policy on a house has the\ntype \"Property\", and gives values to all the attributes\ndefined by the \"Property\" [[Component Type]].",
            "id": "d06e60d6237710aea2658e2e9eaa8bb5"
          },
          {
            "type": "html",
            "text": "-[[Ralph Johnson]]",
            "id": "bd70ad3b66424b76b29d37608536979c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "This is similar to [[Customization Via Programming]].",
            "id": "6b7bf7da68920317a4156b360b69e959"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "Ralph, you mention attributes above, but what about methods?  Moreover, is AOM really different from, say, a pure prototype system like Self? ",
            "id": "bf169b597741a1665cccb0232035dc70"
          },
          {
            "type": "html",
            "text": "\nIt is very interesting to me that here the object model is made explicit and over in [[Multi Caster]], the connection and notification models are made explicit.  -- [[Michael Feathers]]",
            "id": "8c2689b6c694530f5ae59e26ec42bf39"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "This seems a bit related to [[Business Rules]], where the rules are made explicit.",
            "id": "7604284c29b2b7488f9a6cf4122d6a26"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "I've seen systems that let you define rules and associate them with types.\nThe Hartford system is one.  But some of the systems don't do this, so it\nseems to be an optional part of the pattern.",
            "id": "fc31e16a56e587925c6d213d36814c4b"
          },
          {
            "type": "html",
            "text": "\nSelf is a language.  These systems are not billed as languages, though of\ncourse you can think of them as languages.  Self is prototype based, while\nthese are based on the [[Type Object]] pattern.  [[James Noble]] has apparently seen\nquite a few prototype-based systems that are similar to this.  I haven't.",
            "id": "936afbe3eb991cafd25a193d90f49ef9"
          },
          {
            "type": "html",
            "text": "\nA lot of patterns make something explicit that is usually implicit.\nI think that is a common trick in OO design.",
            "id": "730045847271f157da5a1391b45cbda4"
          },
          {
            "type": "html",
            "text": "-- [[Ralph Johnson]]",
            "id": "4c8e5d5384d21fbc2f94bb1a68f18bc8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "Good insight. See also [[Aspect Oriented Programming]].",
            "id": "3fd0c2ae44c4fa1fcabb5795dbfc9f87"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "284428c640a1f5526a0f96b258faf640"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "I would have called it an [[Abstract Machine]]: you are building a custom set of entities and an instruction set to go along with it. All your domain problems are expressed as combinations of these things. I like these types of designs -- must be my Operating System bias. If you take this seriously, and take into account language-design issues like naming and scope and so on, the designs become super-flexible with little effort. A closely related idea is the Bell Labs' [[Little Language]] school of design. Although I think the labs people were mistaken to build so many little languages, a single common language like lisp or smalltalk is much better. (Yes, I know they were working on resource-starved machines).  -- [[Aamod Sane]]",
            "id": "3d9e31242850fc7d7b44447e51cad4d0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "Manufacturing systems (MRP, ERP) usually have more than one level of active models:  one level often called Masters, e.g. Product Master, [[Bill Of Material]] Master, Routing Master, defines products and their associated processes generally.  The Master level sometimes also has something corresponding to a [[Type Object]].  In process industries, the Master level might be called Recipes or Formulas for products.",
            "id": "3220bab78cd52f7a2dac4b83609f1599"
          },
          {
            "type": "html",
            "text": "\nThe next level is Planning or Specification, where people plan specific quantities of specific products to manufacture at specific times. This level is the [[Active Object Model]] for the real-time event level. --Bob Haugen",
            "id": "e2599564c6764bcf21ab4754eca64b9e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "See these pattern languages:",
            "id": "3e22e8f8f6c3d7aaa1c6a498db5b8bc3"
          },
          {
            "type": "html",
            "text": "\n[[Brian Foote]] and [[Joseph Yoder]], <i>Metadata and Active Object-Models</i>,\n[http://www.joeyoder.com/papers/patterns/patterns.html www.joeyoder.com]",
            "id": "be64fbd66ae77f4b299b7f19c848cf71"
          },
          {
            "type": "html",
            "text": "\n[[Martin Fowler]], <i>Dealing with Properties</i>, Copyright year 1997 [http://www.martinfowler.com/apsupp/properties.pdf www.martinfowler.com]",
            "id": "9ca6e96d2450125539d3325885bb0021"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "In my experience, there is one element that makes an [[Active Object Model]] work or break: If you can come up with a complete interpreter or not. The interpreter is actually the place where your domain knowledge goes in. It contains the invariants of the \"[[Business Rules]]\", the fundamental rules the system has to play by. The system can not operate outside this invariants (unless someone comes up with a hack here and there).  The variant parts ([[Hot Spot]]s) have been factored out to the object model it interprets.",
            "id": "c3bf2384ab5d217bfbddc0ab8c6c5419"
          },
          {
            "type": "html",
            "text": "\nIt is interesting that the systems mentioned on this page are all dealing with a relative small and well defined [[Problem Domain]] (Configuration: Combination allowed or not. Insurance: Case Insured or not). All problem domains where it seems to be possible to come up with a closed [[Meta Model]] of what is going on in the real word. So one prerequisite for succesfull applying the pattern might be to have",
            "id": "52f7e72c6e382426ad04744312290fae"
          },
          {
            "type": "html",
            "text": " a relative small, well defined problem domain,",
            "id": "440b30ebf3f3d6f122201cd9744c1547"
          },
          {
            "type": "html",
            "text": " where all principal interactions and relations in the problem domain are known,",
            "id": "037172f7e0dc80c81880dc03b2e234f9"
          },
          {
            "type": "html",
            "text": " and where these can be abstracted into some kind of interpreter,",
            "id": "2203501ea31f20e694c80eacdb9a65ce"
          },
          {
            "type": "html",
            "text": " forming a [[Frame Work]] on a [[Meta Level]].",
            "id": "afe3271713d39d60ef6a68b22a87bf80"
          },
          {
            "type": "html",
            "text": "\nRegarding the last point: In my view, [[Active Object Model]] is about creating a [[Frame Work]], which is based on a higher problem domain abstration than usual (on the [[Meta Level]]). Consequently, the flexible part of such a framework (the object model) operates on the problem domain level.",
            "id": "c8edd88554b4872f4a4bbb87dd827edc"
          },
          {
            "type": "html",
            "text": "-- [[Thomas Weidenfeller]]",
            "id": "0202216cc982b622ec3a6ce5dff7af81"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "\nA note about the pattern's name. [[Active Object]] is a well known OO term, where it denotes that an object executes in its own thread of control. Maybe [[Active Object Model]] is a misleading name?",
            "id": "64466246366dd4374ab1780dad08c0b8"
          },
          {
            "type": "html",
            "text": "\nSeconded!  --[[Paul Morrison]]",
            "id": "5c1e7de4da23e7199649b670c7548815"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "\nSee also: [http://www.adaptiveobjectmodel.com/ www.adaptiveobjectmodel.com] ",
            "id": "1c22ea9d1de829716c06d90916146165"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c80cf78c32cd7a5d977fcef07cd7c06a"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]] [[Category Models]]",
            "id": "92aac09b47e4479a53029c78c07d539b"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ActiveObjectModel c2.com]",
            "id": "8e723d83ed13dc72f7d0cdb9052fca4e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626125269969
    }
  ]
}