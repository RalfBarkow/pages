{
  "title": "User Focused Design in Elm",
  "story": [
    {
      "type": "paragraph",
      "id": "a8cca2a0651193b2",
      "text": "Elm’s stated goal of maintainability, of restoring a level of sanity to the programmer in his art, is reminiscent of the work of [[Yukihiro Matsumoto]], who, with Ruby, sought to give developers [[joy]]."
    },
    {
      "type": "video",
      "id": "86ce669168669106",
      "text": "YOUTUBE oYk8CKH7OhE\nEvan Czaplicki - Let's be mainstream! User focused design in [[Elm]] - Curry On, 2015"
    },
    {
      "type": "paragraph",
      "id": "2e7cf21b0f5df98b",
      "text": "Solving the Maintainability Nightmare [https://www.crossingtheruby.com/2021/01/13/elm-solving-the-maintainability-nightmare.html page], 2016"
    },
    {
      "type": "markdown",
      "id": "8b8747faf5919e92",
      "text": "> His main argument is that we find ourselves back in a mess of maintainability with JavaScript. The parallel is not a difficult one to draw when we have called—and are making—JavaScript, the assembly language of the web. One of the key features of assembly language is that you don’t work with it, and there have always been attempts to move in that direction, from the early behemoths GWT and Cappucino, to the ‘father’ of many transpiled languages, [[CoffeeScript]], leading the current crop twoards more modern and opinionated flavours in TypeScript and Flow. I have written a little previously about this phenomenon, highlighting Elm’s uniqueness."
    },
    {
      "type": "paragraph",
      "id": "b5e04e2aa63d6958",
      "text": "In doing so it implicitly acknowledges the assembly nature of JavaScript as a build target, and explicitly seeks to be an improvement on JavaScript as a brain target."
    },
    {
      "type": "markdown",
      "id": "437dfbade155c6d2",
      "text": "> It is the latter aspect that I believe is most noteworthy, the first has now been done many times before. The tendency has either been to improve the semantics of JavaScript or replace it with the existing semantics of an existing language. Elm’s stated goal of maintainability, of restoring a level of sanity to the programmer in his art, is reminiscent of the work of [[Yukihiro Matsumoto]], who, with Ruby, sought to give developers [[joy]]. The key being, design a language for man and not the machine. Many of the affordances—or lack thereof—in Ruby can also be seen in Elm: lack of a var declaration; omission of parentheses except when necessary; let the compiler work out the type; a clear style optimized for readability; a helpful compiler; all contrinuting to a friendly and approachable face that continues to be so when you revisit it a few weeks or months down the line."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "User Focused Design in Elm",
        "story": []
      },
      "date": 1630396504340
    },
    {
      "item": {
        "type": "factory",
        "id": "86ce669168669106"
      },
      "id": "86ce669168669106",
      "type": "add",
      "date": 1630396506050
    },
    {
      "type": "edit",
      "id": "86ce669168669106",
      "item": {
        "type": "video",
        "id": "86ce669168669106",
        "text": "YOUTUBE oYk8CKH7OhE"
      },
      "date": 1630396517351
    },
    {
      "type": "edit",
      "id": "86ce669168669106",
      "item": {
        "type": "video",
        "id": "86ce669168669106",
        "text": "YOUTUBE oYk8CKH7OhE\nEvan Czaplicki - Let's be mainstream! User focused design in Elm - Curry On, 2015"
      },
      "date": 1630396536413
    },
    {
      "type": "edit",
      "id": "86ce669168669106",
      "item": {
        "type": "video",
        "id": "86ce669168669106",
        "text": "YOUTUBE oYk8CKH7OhE\nEvan Czaplicki - Let's be mainstream! User focused design in [[Elm]] - Curry On, 2015"
      },
      "date": 1637414045332
    },
    {
      "item": {
        "type": "factory",
        "id": "2e7cf21b0f5df98b"
      },
      "id": "2e7cf21b0f5df98b",
      "type": "add",
      "after": "86ce669168669106",
      "date": 1637426357353
    },
    {
      "type": "edit",
      "id": "2e7cf21b0f5df98b",
      "item": {
        "type": "paragraph",
        "id": "2e7cf21b0f5df98b",
        "text": "Solving the Maintainability Nightmare [page]"
      },
      "date": 1637426368032
    },
    {
      "type": "edit",
      "id": "2e7cf21b0f5df98b",
      "item": {
        "type": "paragraph",
        "id": "2e7cf21b0f5df98b",
        "text": "Solving the Maintainability Nightmare [https://www.crossingtheruby.com/2021/01/13/elm-solving-the-maintainability-nightmare.html page]"
      },
      "date": 1637426384574
    },
    {
      "item": {
        "type": "factory",
        "id": "8b8747faf5919e92"
      },
      "id": "8b8747faf5919e92",
      "type": "add",
      "after": "2e7cf21b0f5df98b",
      "date": 1637426629733
    },
    {
      "type": "edit",
      "id": "8b8747faf5919e92",
      "item": {
        "type": "markdown",
        "id": "8b8747faf5919e92",
        "text": "> His main argument is that we find ourselves back in a mess of maintainability with JavaScript. THe parallel is not a difficult one to draw when we have called—and are making—JavaScript, the assembly language of the web. One of the key features of assembly language is that you don’t work with it, and there have always been attempts to move in that direction, from the early behemoths GWT and Cappucino, to the ‘father’ of many transpiled languages, CoffeeScript, leading the current crop twoards more modern and opinionated flavours in TypeScript and Flow. I have written a little previously about this phenomenon, highlighting Elm’s uniqueness."
      },
      "date": 1637426633889
    },
    {
      "type": "edit",
      "id": "8b8747faf5919e92",
      "item": {
        "type": "markdown",
        "id": "8b8747faf5919e92",
        "text": "> His main argument is that we find ourselves back in a mess of maintainability with JavaScript. The parallel is not a difficult one to draw when we have called—and are making—JavaScript, the assembly language of the web. One of the key features of assembly language is that you don’t work with it, and there have always been attempts to move in that direction, from the early behemoths GWT and Cappucino, to the ‘father’ of many transpiled languages, CoffeeScript, leading the current crop twoards more modern and opinionated flavours in TypeScript and Flow. I have written a little previously about this phenomenon, highlighting Elm’s uniqueness."
      },
      "date": 1637426646533
    },
    {
      "type": "edit",
      "id": "8b8747faf5919e92",
      "item": {
        "type": "markdown",
        "id": "8b8747faf5919e92",
        "text": "> His main argument is that we find ourselves back in a mess of maintainability with JavaScript. The parallel is not a difficult one to draw when we have called—and are making—JavaScript, the assembly language of the web. One of the key features of assembly language is that you don’t work with it, and there have always been attempts to move in that direction, from the early behemoths GWT and Cappucino, to the ‘father’ of many transpiled languages, [[CoffeeScript]], leading the current crop twoards more modern and opinionated flavours in TypeScript and Flow. I have written a little previously about this phenomenon, highlighting Elm’s uniqueness."
      },
      "date": 1637426676073
    },
    {
      "type": "edit",
      "id": "2e7cf21b0f5df98b",
      "item": {
        "type": "paragraph",
        "id": "2e7cf21b0f5df98b",
        "text": "Solving the Maintainability Nightmare [https://www.crossingtheruby.com/2021/01/13/elm-solving-the-maintainability-nightmare.html page], 2016"
      },
      "date": 1637426859468
    },
    {
      "item": {
        "type": "factory",
        "id": "b5e04e2aa63d6958"
      },
      "id": "b5e04e2aa63d6958",
      "type": "add",
      "after": "8b8747faf5919e92",
      "date": 1637426920025
    },
    {
      "type": "edit",
      "id": "b5e04e2aa63d6958",
      "item": {
        "type": "paragraph",
        "id": "b5e04e2aa63d6958",
        "text": "In doing so it implicitly acknowledges the assembly nature of JavaScript as a build target, and explicitly seeks to be an improvement on JavaScript as a brain target."
      },
      "date": 1637426936978
    },
    {
      "item": {
        "type": "factory",
        "id": "437dfbade155c6d2"
      },
      "id": "437dfbade155c6d2",
      "type": "add",
      "after": "b5e04e2aa63d6958",
      "date": 1637427002530
    },
    {
      "type": "edit",
      "id": "437dfbade155c6d2",
      "item": {
        "type": "markdown",
        "id": "437dfbade155c6d2",
        "text": "> It is the latter aspect that I believe is most noteworthy, the first has now been done many times before. The tendency has either been to improve the semantics of JavaScript or replace it with the existing semantics of an existing language. Elm’s stated goal of maintainability, of restoring a level of sanity to the programmer in his art, is reminiscent of the work of Yukihiro Matsumoto, who, with Ruby, sought to give developers joy. The key being, design a language for man and not the machine. Many of the affordances—or lack thereof—in Ruby can also be seen in Elm: lack of a var declaration; omission of parentheses except when necessary; let the compiler work out the type; a clear style optimized for readability; a helpful compiler; all contrinuting to a friendly and approachable face that continues to be so when you revisit it a few weeks or months down the line"
      },
      "date": 1637427006608
    },
    {
      "type": "edit",
      "id": "437dfbade155c6d2",
      "item": {
        "type": "markdown",
        "id": "437dfbade155c6d2",
        "text": "> It is the latter aspect that I believe is most noteworthy, the first has now been done many times before. The tendency has either been to improve the semantics of JavaScript or replace it with the existing semantics of an existing language. Elm’s stated goal of maintainability, of restoring a level of sanity to the programmer in his art, is reminiscent of the work of [[Yukihiro Matsumoto]], who, with Ruby, sought to give developers [[joy]]. The key being, design a language for man and not the machine. Many of the affordances—or lack thereof—in Ruby can also be seen in Elm: lack of a var declaration; omission of parentheses except when necessary; let the compiler work out the type; a clear style optimized for readability; a helpful compiler; all contrinuting to a friendly and approachable face that continues to be so when you revisit it a few weeks or months down the line"
      },
      "date": 1637427056540
    },
    {
      "type": "edit",
      "id": "437dfbade155c6d2",
      "item": {
        "type": "markdown",
        "id": "437dfbade155c6d2",
        "text": "> It is the latter aspect that I believe is most noteworthy, the first has now been done many times before. The tendency has either been to improve the semantics of JavaScript or replace it with the existing semantics of an existing language. Elm’s stated goal of maintainability, of restoring a level of sanity to the programmer in his art, is reminiscent of the work of [[Yukihiro Matsumoto]], who, with Ruby, sought to give developers [[joy]]. The key being, design a language for man and not the machine. Many of the affordances—or lack thereof—in Ruby can also be seen in Elm: lack of a var declaration; omission of parentheses except when necessary; let the compiler work out the type; a clear style optimized for readability; a helpful compiler; all contrinuting to a friendly and approachable face that continues to be so when you revisit it a few weeks or months down the line."
      },
      "date": 1637427316989
    },
    {
      "item": {
        "type": "factory",
        "id": "a8cca2a0651193b2"
      },
      "id": "a8cca2a0651193b2",
      "type": "add",
      "after": "437dfbade155c6d2",
      "date": 1637427660818
    },
    {
      "type": "edit",
      "id": "a8cca2a0651193b2",
      "item": {
        "type": "paragraph",
        "id": "a8cca2a0651193b2",
        "text": "Elm’s stated goal of maintainability, of restoring a level of sanity to the programmer in his art, is reminiscent of the work of [[Yukihiro Matsumoto]], who, with Ruby, sought to give developers [[joy]]."
      },
      "date": 1637427663218
    },
    {
      "id": "a8cca2a0651193b2",
      "type": "move",
      "order": [
        "a8cca2a0651193b2",
        "86ce669168669106",
        "2e7cf21b0f5df98b",
        "8b8747faf5919e92",
        "b5e04e2aa63d6958",
        "437dfbade155c6d2"
      ],
      "date": 1637427668490
    }
  ]
}