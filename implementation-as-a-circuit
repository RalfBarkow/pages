{
  "title": "Implementation as a Circuit",
  "story": [
    {
      "type": "paragraph",
      "id": "82f039880094cc43",
      "text": "The interesting aspect of implementing circuits with multiple inner contexts is that their very structure suggests the order in which each of their pieces should be created."
    },
    {
      "type": "paragraph",
      "id": "2eba612caeb8486c",
      "text": "In other words, the point of viewing the circuit as a whole is to evaluate it for some arguments. If we see the circuit’s inner parts in terms of a graph, implementing the circuit is equivalent to coloring each node of the graph while traversing it. Therefore, a suitable implementation technique in these situations is to take enough example arguments so that their corresponding evaluations will require the circuit’s graph to be completely painted with our implementations."
    },
    {
      "type": "pagefold",
      "id": "39a49666a22bc219",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "1f0621625ca78ac9",
      "text": "[[A Mentoring Course on Smalltalk]], p. 104"
    },
    {
      "type": "paragraph",
      "id": "bafc18ecb76fea2b",
      "text": "We play the role of a JIT compiler."
    },
    {
      "type": "pagefold",
      "id": "ae96f1f6d48b4ce0",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "d2cc6f63e20773b7",
      "text": "This is what we did when we went over an example of how our bidirectional approach to `match:` would work earlier in this chapter. So again, it is all about some sort of [[Connectedness Check]] in a graph, or traversing an information space either towards its attractors or visiting all possible locations. The [[Laws of Form]] are present everywhere."
    },
    {
      "type": "paragraph",
      "id": "3f7d8d8de36d274a",
      "text": "So, for our concrete purposes, we will concentrate on the expression below."
    },
    {
      "type": "code",
      "id": "94d5df28586b43f3",
      "text": "’a#c*fg#ij*x#z’ matches: ’abcQQfgfghijQQxyz’"
    },
    {
      "type": "paragraph",
      "id": "01aa1d542806f1b6",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "3fe54221ad83ad94",
      "text": "⇒ [[Condensed Implementation Strategy]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Implementation as a Circuit",
        "story": []
      },
      "date": 1704268934413
    },
    {
      "item": {
        "type": "factory",
        "id": "82f039880094cc43"
      },
      "id": "82f039880094cc43",
      "type": "add",
      "date": 1704268936080
    },
    {
      "type": "edit",
      "id": "82f039880094cc43",
      "item": {
        "type": "paragraph",
        "id": "82f039880094cc43",
        "text": "The interesting aspect of implementing circuits with multiple inner contexts is that their very structure suggests the order in which each of their pieces should be created. In other words, the point of viewing the circuit as a whole is to evaluate it for some arguments. If we see the circuit’s inner parts in terms of a graph, implementing the circuit is equivalent to coloring each node of the graph while traversing it. Therefore, a suitable implementation technique in these situations is to take enough example arguments so that their corresponding evaluations will require the circuit’s graph to be completely painted with our implementations."
      },
      "date": 1704268937966
    },
    {
      "item": {
        "type": "factory",
        "id": "39a49666a22bc219"
      },
      "id": "39a49666a22bc219",
      "type": "add",
      "after": "82f039880094cc43",
      "date": 1704268960762
    },
    {
      "type": "edit",
      "id": "39a49666a22bc219",
      "item": {
        "type": "pagefold",
        "id": "39a49666a22bc219",
        "text": "~"
      },
      "date": 1704268963287
    },
    {
      "item": {
        "type": "factory",
        "id": "1f0621625ca78ac9"
      },
      "id": "1f0621625ca78ac9",
      "type": "add",
      "after": "39a49666a22bc219",
      "date": 1704268964416
    },
    {
      "type": "edit",
      "id": "1f0621625ca78ac9",
      "item": {
        "type": "paragraph",
        "id": "1f0621625ca78ac9",
        "text": "[[A Mentoring Course on Smalltalk]], p. "
      },
      "date": 1704268967923
    },
    {
      "type": "edit",
      "id": "1f0621625ca78ac9",
      "item": {
        "type": "paragraph",
        "id": "1f0621625ca78ac9",
        "text": "[[A Mentoring Course on Smalltalk]], p. 104"
      },
      "date": 1704268978764
    },
    {
      "type": "edit",
      "id": "82f039880094cc43",
      "item": {
        "type": "paragraph",
        "id": "82f039880094cc43",
        "text": "The interesting aspect of implementing circuits with multiple inner contexts is that their very structure suggests the order in which each of their pieces should be created."
      },
      "date": 1704268991529
    },
    {
      "type": "add",
      "id": "2eba612caeb8486c",
      "item": {
        "type": "paragraph",
        "id": "2eba612caeb8486c",
        "text": "In other words, the point of viewing the circuit as a whole is to evaluate it for some arguments. If we see the circuit’s inner parts in terms of a graph, implementing the circuit is equivalent to coloring each node of the graph while traversing it. Therefore, a suitable implementation technique in these situations is to take enough example arguments so that their corresponding evaluations will require the circuit’s graph to be completely painted with our implementations."
      },
      "after": "82f039880094cc43",
      "date": 1704268991971
    },
    {
      "item": {
        "type": "factory",
        "id": "bafc18ecb76fea2b"
      },
      "id": "bafc18ecb76fea2b",
      "type": "add",
      "after": "1f0621625ca78ac9",
      "date": 1704269126671
    },
    {
      "type": "edit",
      "id": "bafc18ecb76fea2b",
      "item": {
        "type": "paragraph",
        "id": "bafc18ecb76fea2b",
        "text": "We play the role of a JIT compiler."
      },
      "date": 1704269128425
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1704269271194
    },
    {
      "item": {
        "type": "factory",
        "id": "ae96f1f6d48b4ce0"
      },
      "id": "ae96f1f6d48b4ce0",
      "type": "add",
      "after": "bafc18ecb76fea2b",
      "date": 1704269463055
    },
    {
      "type": "edit",
      "id": "ae96f1f6d48b4ce0",
      "item": {
        "type": "pagefold",
        "id": "ae96f1f6d48b4ce0",
        "text": "~"
      },
      "date": 1704269467159
    },
    {
      "item": {
        "type": "factory",
        "id": "d2cc6f63e20773b7"
      },
      "id": "d2cc6f63e20773b7",
      "type": "add",
      "after": "ae96f1f6d48b4ce0",
      "date": 1704269483629
    },
    {
      "type": "edit",
      "id": "d2cc6f63e20773b7",
      "item": {
        "type": "paragraph",
        "id": "d2cc6f63e20773b7",
        "text": "This is what we did when we went over an example of how our bidirectional approach to match: would work earlier in this chapter. So again, it is all about some sort of connectedness check in a graph, or traversing an information space either towards its attractors or visiting all possible locations. The Laws of Form are present everywhere."
      },
      "date": 1704269485394
    },
    {
      "type": "edit",
      "id": "d2cc6f63e20773b7",
      "item": {
        "type": "paragraph",
        "id": "d2cc6f63e20773b7",
        "text": "This is what we did when we went over an example of how our bidirectional approach to match: would work earlier in this chapter. So again, it is all about some sort of connectedness check in a graph, or traversing an information space either towards its attractors or visiting all possible locations. The [[Laws of Form]] are present everywhere."
      },
      "date": 1704269507565
    },
    {
      "type": "add",
      "id": "3f7d8d8de36d274a",
      "item": {
        "type": "paragraph",
        "id": "3f7d8d8de36d274a",
        "text": "So, for our concrete purposes, we will concentrate on the expression below."
      },
      "after": "d2cc6f63e20773b7",
      "date": 1704269547278
    },
    {
      "item": {
        "type": "factory",
        "id": "94d5df28586b43f3"
      },
      "id": "94d5df28586b43f3",
      "type": "add",
      "after": "3f7d8d8de36d274a",
      "date": 1704269552298
    },
    {
      "type": "edit",
      "id": "94d5df28586b43f3",
      "item": {
        "type": "code",
        "id": "94d5df28586b43f3",
        "text": "’a#c*fg#ij*x#z’ matches: ’abcQQfgfghijQQxyz’"
      },
      "date": 1704269554498
    },
    {
      "item": {
        "type": "factory",
        "id": "01aa1d542806f1b6"
      },
      "id": "01aa1d542806f1b6",
      "type": "add",
      "after": "94d5df28586b43f3",
      "date": 1704269565385
    },
    {
      "type": "edit",
      "id": "01aa1d542806f1b6",
      "item": {
        "type": "paragraph",
        "id": "01aa1d542806f1b6",
        "text": "[…]"
      },
      "date": 1704269568891
    },
    {
      "item": {
        "type": "factory",
        "id": "3fe54221ad83ad94"
      },
      "id": "3fe54221ad83ad94",
      "type": "add",
      "after": "01aa1d542806f1b6",
      "date": 1704269619254
    },
    {
      "type": "edit",
      "id": "3fe54221ad83ad94",
      "item": {
        "type": "paragraph",
        "id": "3fe54221ad83ad94",
        "text": "⇒ [[Condensed Implementation Strategy]]"
      },
      "date": 1704269621082
    },
    {
      "type": "edit",
      "id": "d2cc6f63e20773b7",
      "item": {
        "type": "paragraph",
        "id": "d2cc6f63e20773b7",
        "text": "This is what we did when we went over an example of how our bidirectional approach to `match:` would work earlier in this chapter. So again, it is all about some sort of connectedness check in a graph, or traversing an information space either towards its attractors or visiting all possible locations. The [[Laws of Form]] are present everywhere."
      },
      "date": 1704269848162
    },
    {
      "type": "edit",
      "id": "d2cc6f63e20773b7",
      "item": {
        "type": "markdown",
        "id": "d2cc6f63e20773b7",
        "text": "This is what we did when we went over an example of how our bidirectional approach to `match:` would work earlier in this chapter. So again, it is all about some sort of connectedness check in a graph, or traversing an information space either towards its attractors or visiting all possible locations. The [[Laws of Form]] are present everywhere."
      },
      "date": 1704269850260
    },
    {
      "type": "edit",
      "id": "d2cc6f63e20773b7",
      "item": {
        "type": "markdown",
        "id": "d2cc6f63e20773b7",
        "text": "This is what we did when we went over an example of how our bidirectional approach to `match:` would work earlier in this chapter. So again, it is all about some sort of [[Connectedness Check]] in a graph, or traversing an information space either towards its attractors or visiting all possible locations. The [[Laws of Form]] are present everywhere."
      },
      "date": 1704273314990
    }
  ]
}