{
  "title": "Situated Software",
  "story": [
    {
      "type": "paragraph",
      "id": "5af658de72fa7a36",
      "text": "[[Federated Wiki]] feels more like \"situated software\", i.e. software built and evolved by its users following their needs. And  that's how [[Konrad Hinsen]] thinks user-facing software should work. Tools adapt to communities, not the other way round. [https://scholar.social/@khinsen/110031868208502352 post]"
    },
    {
      "type": "pagefold",
      "id": "c16ae913588518a3",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f0a6396526a37aa1",
      "text": "\nBALASUBRAMANIAM, Sriram, LEWIS, Grace A., SIMANTA, Soumya and SMITH, Dennis B., 2008. Situated Software: Concepts, Motivation, Technology, and the Future. IEEE Software. November 2008. Vol. 25, no. 6, p. 50–55. DOI 10.1109/MS.2008.159. Situated software, a type of opportunistic software, is created by a small subset of users to fulfill a specific purpose. For example, business users have been creating situated software through mashups, which combine data from multiple sources on internal systems or the Internet. Situated software can change the way users access, perceive, and consume information, and can allow users to finally focus on what to do with information, rather than where to find it or how to get to it. However, situated software also has limitations. This article identifies situated software’s role, provides examples of its use, traces the Internet’s role in its rapid evolution, outlines areas where it is appropriate, describes its limitations, and presents enablers for adopting situated software in an enterprise.\n"
    },
    {
      "type": "pagefold",
      "id": "87b45c4da6071713",
      "text": "Situated Software Design"
    },
    {
      "type": "paragraph",
      "id": "6a8b6b5312c5509a",
      "text": "\nHOFMANN, Hubert F., PFEIFER, Rolf and VINKHUYZEN, Erik, 1993. Situated Software Design. Technical Report. University of Zurich. \n"
    },
    {
      "type": "paragraph",
      "id": "7f5acc5dd4b3e8f2",
      "text": "Existing approaches to software design are largely based on a rationalistic perspective. Winograd and Flores in their seminal book “[[Under­standing Computers and Cognition]]” have characterized rationalism by three steps [29, p. 15]: (1) Characterize the situation in terms of identifiable objects with well-defined properties. (2) Find general rules that apply to situations in terms of those objects and properties. (3) Apply the rules logically to the situation of concern, drawing conclusions about what should be done."
    },
    {
      "type": "paragraph",
      "id": "b1a75236d4314892",
      "text": "While software design that relies exclusively on this perspective may be suited for virtual worlds, it has proved to be inappropriate in real worlds. Virtual worlds are formal, like logic, mathematics, formal games, etc. The real world differs from virtual ones in a number of important respects: it changes continuously, it is largely unpredictable, and it is only partially knowable. As obvious as the distinction between virtual and real world may seem to be, we demonstrate that software design approaches neglect this distinction and treat the real world as a virtual one."
    },
    {
      "type": "paragraph",
      "id": "29d0ba0f41b3cea0",
      "text": "To overcome the problems inherent in current design approaches, we have to take the dynamics of the [[System-Environment Interaction]] into account. A basic assumption is that the users of software systems are viewed as situated agents, rather than as actors following preconceived plans [27]. As situated agents, users interact with their environment and bring to bear their prior experience on the particular situation. If design is to be based on this perspective then it must be viewed as situated. We discuss the implications of this view and conclude that software design approaches based on a rationalistic perspective are intrinsically limited and that an alternative view is needed."
    },
    {
      "type": "paragraph",
      "id": "85eac40579eb911c",
      "text": "[27] L.A. Suchman, [[Plans and Situated Actions]]. Cambridge University Press, Cambridge, 1987."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Situated Software",
        "story": []
      },
      "date": 1679475406694
    },
    {
      "item": {
        "type": "factory",
        "id": "5af658de72fa7a36"
      },
      "id": "5af658de72fa7a36",
      "type": "add",
      "date": 1679475408509
    },
    {
      "type": "edit",
      "id": "5af658de72fa7a36",
      "item": {
        "type": "paragraph",
        "id": "5af658de72fa7a36",
        "text": "[[Federated Wiki]] feels more like \"situated software\", i.e. software built and evolved by its users following their needs. And  that's how I think user-facing software *should* work. Tools adapt to communities, not the other way round."
      },
      "date": 1679475420911
    },
    {
      "type": "edit",
      "id": "5af658de72fa7a36",
      "item": {
        "type": "paragraph",
        "id": "5af658de72fa7a36",
        "text": "[[Federated Wiki]] feels more like \"situated software\", i.e. software built and evolved by its users following their needs. And  that's how [[Konrad Hinsen]] thinks user-facing software *should* work. Tools adapt to communities, not the other way round. [https://scholar.social/@khinsen/110031868208502352 post]"
      },
      "date": 1679475452185
    },
    {
      "type": "edit",
      "id": "5af658de72fa7a36",
      "item": {
        "type": "paragraph",
        "id": "5af658de72fa7a36",
        "text": "[[Federated Wiki]] feels more like \"situated software\", i.e. software built and evolved by its users following their needs. And  that's how [[Konrad Hinsen]] thinks user-facing software should work. Tools adapt to communities, not the other way round. [https://scholar.social/@khinsen/110031868208502352 post]"
      },
      "date": 1679475461989
    },
    {
      "item": {
        "type": "factory",
        "id": "c16ae913588518a3"
      },
      "id": "c16ae913588518a3",
      "type": "add",
      "after": "5af658de72fa7a36",
      "date": 1679475567152
    },
    {
      "type": "edit",
      "id": "c16ae913588518a3",
      "item": {
        "type": "pagefold",
        "id": "c16ae913588518a3",
        "text": "~"
      },
      "date": 1679475569666
    },
    {
      "item": {
        "type": "factory",
        "id": "f0a6396526a37aa1"
      },
      "id": "f0a6396526a37aa1",
      "type": "add",
      "after": "c16ae913588518a3",
      "date": 1679475571146
    },
    {
      "type": "edit",
      "id": "f0a6396526a37aa1",
      "item": {
        "type": "paragraph",
        "id": "f0a6396526a37aa1",
        "text": "\nBALASUBRAMANIAM, Sriram, LEWIS, Grace A., SIMANTA, Soumya and SMITH, Dennis B., 2008. Situated Software: Concepts, Motivation, Technology, and the Future. IEEE Software. November 2008. Vol. 25, no. 6, p. 50–55. DOI 10.1109/MS.2008.159. Situated software, a type of opportunistic software, is created by a small subset of users to fulfill a specific purpose. For example, business users have been creating situated software through mashups, which combine data from multiple sources on internal systems or the Internet. Situated software can change the way users access, perceive, and consume information, and can allow users to finally focus on what to do with information, rather than where to find it or how to get to it. However, situated software also has limitations. This article identifies situated software’s role, provides examples of its use, traces the Internet’s role in its rapid evolution, outlines areas where it is appropriate, describes its limitations, and presents enablers for adopting situated software in an enterprise.\n"
      },
      "date": 1679475575287
    },
    {
      "item": {
        "type": "factory",
        "id": "87b45c4da6071713"
      },
      "id": "87b45c4da6071713",
      "type": "add",
      "after": "f0a6396526a37aa1",
      "date": 1679478425095
    },
    {
      "type": "edit",
      "id": "87b45c4da6071713",
      "item": {
        "type": "pagefold",
        "id": "87b45c4da6071713",
        "text": "Situated Software Design"
      },
      "date": 1679478433612
    },
    {
      "id": "6a8b6b5312c5509a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6a8b6b5312c5509a",
        "text": "\nHOFMANN, Hubert F., PFEIFER, Rolf and VINKHUYZEN, Erik, 1993. Situated Software Design. Technical Report. University of Zurich. \n"
      },
      "after": "87b45c4da6071713",
      "attribution": {
        "page": "2023-03-22"
      },
      "date": 1679478437100
    },
    {
      "item": {
        "type": "factory",
        "id": "7f5acc5dd4b3e8f2"
      },
      "id": "7f5acc5dd4b3e8f2",
      "type": "add",
      "after": "6a8b6b5312c5509a",
      "date": 1679478490939
    },
    {
      "type": "edit",
      "id": "7f5acc5dd4b3e8f2",
      "item": {
        "type": "paragraph",
        "id": "7f5acc5dd4b3e8f2",
        "text": "Existing approaches to software design are largely based on a rationalistic perspective. Winograd and Flores in their seminal book “Understanding computers and cognition” have characterized rationalism by three steps [29, p. 15]: (1) Characterize the situation in terms of identifiable objects with well-defined properties. (2) Find general rules that apply to situations in terms of those objects and properties. (3) Apply the rules logically to the situation of concern, drawing conclusions about what should be done."
      },
      "date": 1679478492245
    },
    {
      "type": "edit",
      "id": "7f5acc5dd4b3e8f2",
      "item": {
        "type": "paragraph",
        "id": "7f5acc5dd4b3e8f2",
        "text": "Existing approaches to software design are largely based on a rationalistic perspective. Winograd and Flores in their seminal book “[[Understanding computers and cognition]]” have characterized rationalism by three steps [29, p. 15]: (1) Characterize the situation in terms of identifiable objects with well-defined properties. (2) Find general rules that apply to situations in terms of those objects and properties. (3) Apply the rules logically to the situation of concern, drawing conclusions about what should be done."
      },
      "date": 1679478509275
    },
    {
      "type": "edit",
      "id": "7f5acc5dd4b3e8f2",
      "item": {
        "type": "paragraph",
        "id": "7f5acc5dd4b3e8f2",
        "text": "Existing approaches to software design are largely based on a rationalistic perspective. Winograd and Flores in their seminal book “[[Under­standing Computers and Cognition]]” have characterized rationalism by three steps [29, p. 15]: (1) Characterize the situation in terms of identifiable objects with well-defined properties. (2) Find general rules that apply to situations in terms of those objects and properties. (3) Apply the rules logically to the situation of concern, drawing conclusions about what should be done."
      },
      "date": 1679478522142
    },
    {
      "item": {
        "type": "factory",
        "id": "b1a75236d4314892"
      },
      "id": "b1a75236d4314892",
      "type": "add",
      "after": "7f5acc5dd4b3e8f2",
      "date": 1679478574651
    },
    {
      "type": "edit",
      "id": "b1a75236d4314892",
      "item": {
        "type": "paragraph",
        "id": "b1a75236d4314892",
        "text": "While software design that relies exclusively on this perspective may be suited for virtual worlds, it has proved to be inappropriate in real worlds. Virtual worlds are formal, like logic, mathematics, formal games, etc. The real world differs from virtual ones in a number of important respects: it changes continuously, it is largely unpredictable, and it is only partially knowable. As obvious as the distinction between virtual and real world may seem to be, we demonstrate that software design approaches neglect this distinction and treat the real world as a virtual one."
      },
      "date": 1679478576021
    },
    {
      "item": {
        "type": "factory",
        "id": "29d0ba0f41b3cea0"
      },
      "id": "29d0ba0f41b3cea0",
      "type": "add",
      "after": "b1a75236d4314892",
      "date": 1679478608375
    },
    {
      "type": "edit",
      "id": "29d0ba0f41b3cea0",
      "item": {
        "type": "paragraph",
        "id": "29d0ba0f41b3cea0",
        "text": "To overcome the problems inherent in current design approaches, we have to take the dynamics of the system-environment interaction into account. A basic assumption is that the users of software systems are viewed as situated agents, rather than as actors following preconceived plans [27]. As situated agents, users interact with their environment and bring to bear their prior experience on the particular situation. If design is to be based on this perspective then it must be viewed as situated. We discuss the implications of this view and conclude that software design approaches based on a rationalistic perspective are intrinsically limited and that an alternative view is needed."
      },
      "date": 1679478609953
    },
    {
      "type": "edit",
      "id": "29d0ba0f41b3cea0",
      "item": {
        "type": "paragraph",
        "id": "29d0ba0f41b3cea0",
        "text": "To overcome the problems inherent in current design approaches, we have to take the dynamics of the [[System-Environment Interaction]] into account. A basic assumption is that the users of software systems are viewed as situated agents, rather than as actors following preconceived plans [27]. As situated agents, users interact with their environment and bring to bear their prior experience on the particular situation. If design is to be based on this perspective then it must be viewed as situated. We discuss the implications of this view and conclude that software design approaches based on a rationalistic perspective are intrinsically limited and that an alternative view is needed."
      },
      "date": 1679478653772
    },
    {
      "item": {
        "type": "factory",
        "id": "85eac40579eb911c"
      },
      "id": "85eac40579eb911c",
      "type": "add",
      "after": "29d0ba0f41b3cea0",
      "date": 1679478706846
    },
    {
      "type": "edit",
      "id": "85eac40579eb911c",
      "item": {
        "type": "paragraph",
        "id": "85eac40579eb911c",
        "text": "[27] L.A. Suchman, Plans and Situated Actions. Cambridge University Press, Cambridge, 1987."
      },
      "date": 1679478713721
    },
    {
      "type": "edit",
      "id": "85eac40579eb911c",
      "item": {
        "type": "paragraph",
        "id": "85eac40579eb911c",
        "text": "[27] L.A. Suchman, [[Plans and Situated Actions]]. Cambridge University Press, Cambridge, 1987."
      },
      "date": 1679479559323
    }
  ]
}