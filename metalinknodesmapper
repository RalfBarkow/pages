{
  "title": "MetaLinkNodesMapper",
  "story": [
    {
      "type": "paragraph",
      "id": "397b49e4d769bda3",
      "text": "I map how instance specific links are put on nodes, in different ways."
    },
    {
      "type": "paragraph",
      "id": "29c157ca55fdfce6",
      "text": "I provide an interface to easily and fastly find a [[Link]] for a given [[Node]] or nodes for a given link."
    },
    {
      "type": "code",
      "id": "b4cd9baea643d264",
      "text": "initialize\n\tobjectsForNodes := WeakIdentityKeyDictionary new.\n\tnodesForObjects := WeakIdentityKeyDictionary new"
    },
    {
      "type": "code",
      "id": "6b2507b1eee1ffb9",
      "text": "isNode: aNode ownedBy: anObject\n\t^(nodesForObjects at: anObject ifAbsent:[^false]) includes: aNode"
    },
    {
      "type": "code",
      "id": "3256392494ffee4d",
      "text": "addNode: aNode forObject: anObject\n\t(nodesForObjects at: anObject ifAbsentPut: [ IdentitySet new ]) add: aNode.\n\t(objectsForNodes at: aNode ifAbsentPut: [ WeakSet new ]) add: anObject.\n\t^ aNode"
    },
    {
      "type": "code",
      "id": "ea4be031ecea8f30",
      "text": "removeNode: aNode forObject: anObject\n\t\"I am just a helper object, if someone asks me to remove a node or an object\n\tthat i don't know, i don't raise any errors\"\n\t(nodesForObjects at: anObject) remove: aNode ifAbsent:[].\n\t(objectsForNodes at: aNode) remove: anObject ifAbsent:[]"
    },
    {
      "type": "pagefold",
      "id": "bbfd67f658f844ee",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "8af1db1722d28faa",
      "text": "# findNodeLike:forObject:"
    },
    {
      "type": "code",
      "id": "dd201e9a618d4fdb",
      "text": "findNodeLike: aNode forObject: anObject\n\t| nodesForObject |\n\tnodesForObject := nodesForObjects at: anObject ifAbsent: [ #() ].\n\t^ nodesForObject detect: [ :node | node isEquivalentTo: aNode ] ifNone: [ nil ]"
    },
    {
      "type": "paragraph",
      "id": "0eedf4d26660d793",
      "text": "The purpose of this method is to find a node in a collection associated with a particular object, which is equivalent to a given node."
    },
    {
      "type": "markdown",
      "id": "f037ddb92b14250d",
      "text": "**Code Explanation:** (ChatGPT 3.5) `nodesForObject := nodesForObjects at: anObject ifAbsent: [ #() ]`: Retrieves the collection of nodes associated with the given `anObject` from a dictionary named `nodesForObjects`. If there is no entry for `anObject`, it defaults to an empty array (`#()`).\n\n`^ nodesForObject detect: [ :node | node isEquivalentTo: aNode ] ifNone: [ nil ]`: Uses the `detect:ifNone:` message to find the first node in the collection that satisfies the condition provided in the block `[ :node | node isEquivalentTo: aNode ]`.\n     - If a node is found, it is returned.\n     - If no node is found, the `ifNone: [ nil ]` block is executed, and `nil` is returned."
    },
    {
      "type": "image",
      "id": "c10d7913b2e94541",
      "text": "findNodeLike:forObject:",
      "size": "wide",
      "width": 430,
      "height": 268,
      "url": "/assets/plugins/image/84b9ee686c8778b8223022ba7148d554.jpg"
    },
    {
      "type": "markdown",
      "id": "03b31815e8f1220e",
      "text": "**Node Equivalence Check:** The condition `node isEquivalentTo: aNode` suggests that there is an `isEquivalentTo:` method implemented on the nodes. This method likely checks whether the current node is equivalent to the given `aNode`. The definition of `isEquivalentTo:` would depend on the specific requirements of your application. (ChatGPT 3.5)"
    },
    {
      "type": "pagefold",
      "id": "1a4f5085a38e2a21",
      "text": "~"
    },
    {
      "type": "code",
      "id": "a8182c0252b1e447",
      "text": "findNodesForObject: anObject\n\t^ nodesForObjects at: anObject ifAbsent: [ #() ]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "MetaLinkNodesMapper",
        "story": []
      },
      "date": 1701872322936
    },
    {
      "item": {
        "type": "factory",
        "id": "397b49e4d769bda3"
      },
      "id": "397b49e4d769bda3",
      "type": "add",
      "date": 1701872329482
    },
    {
      "type": "edit",
      "id": "397b49e4d769bda3",
      "item": {
        "type": "paragraph",
        "id": "397b49e4d769bda3",
        "text": "I map how instance specific links are put on nodes, in different ways.\n\nI provide an interface to easily and fastly find a links for a given node or nodes for a given link."
      },
      "date": 1701872332719
    },
    {
      "type": "edit",
      "id": "397b49e4d769bda3",
      "item": {
        "type": "paragraph",
        "id": "397b49e4d769bda3",
        "text": "I map how instance specific links are put on nodes, in different ways.\n\nI provide an interface to easily and fastly find a [[Link]] for a given node or nodes for a given link."
      },
      "date": 1701872423824
    },
    {
      "item": {
        "type": "factory",
        "id": "3256392494ffee4d"
      },
      "id": "3256392494ffee4d",
      "type": "add",
      "after": "397b49e4d769bda3",
      "date": 1701872469325
    },
    {
      "type": "edit",
      "id": "3256392494ffee4d",
      "item": {
        "type": "code",
        "id": "3256392494ffee4d",
        "text": "addNode: aNode forObject: anObject\n\t(nodesForObjects at: anObject ifAbsentPut: [ IdentitySet new ]) add: aNode.\n\t(objectsForNodes at: aNode ifAbsentPut: [ WeakSet new ]) add: anObject.\n\t^ aNode"
      },
      "date": 1701872470910
    },
    {
      "item": {
        "type": "factory",
        "id": "dd201e9a618d4fdb"
      },
      "id": "dd201e9a618d4fdb",
      "type": "add",
      "after": "3256392494ffee4d",
      "date": 1701872489780
    },
    {
      "type": "edit",
      "id": "dd201e9a618d4fdb",
      "item": {
        "type": "code",
        "id": "dd201e9a618d4fdb",
        "text": "findNodeLike: aNode forObject: anObject\n\t| nodesForObject |\n\tnodesForObject := nodesForObjects at: anObject ifAbsent: [ #() ].\n\t^ nodesForObject detect: [ :node | node isEquivalentTo: aNode ] ifNone: [ nil ]"
      },
      "date": 1701872491422
    },
    {
      "item": {
        "type": "factory",
        "id": "a8182c0252b1e447"
      },
      "id": "a8182c0252b1e447",
      "type": "add",
      "after": "dd201e9a618d4fdb",
      "date": 1701872515803
    },
    {
      "type": "edit",
      "id": "a8182c0252b1e447",
      "item": {
        "type": "code",
        "id": "a8182c0252b1e447",
        "text": "findNodesForObject: anObject\n\t^ nodesForObjects at: anObject ifAbsent: [ #() ]"
      },
      "date": 1701872519050
    },
    {
      "item": {
        "type": "factory",
        "id": "b4cd9baea643d264"
      },
      "id": "b4cd9baea643d264",
      "type": "add",
      "after": "a8182c0252b1e447",
      "date": 1701872529901
    },
    {
      "type": "edit",
      "id": "b4cd9baea643d264",
      "item": {
        "type": "code",
        "id": "b4cd9baea643d264",
        "text": "initialize\n\tobjectsForNodes := WeakIdentityKeyDictionary new.\n\tnodesForObjects := WeakIdentityKeyDictionary new"
      },
      "date": 1701872532618
    },
    {
      "type": "edit",
      "id": "397b49e4d769bda3",
      "item": {
        "type": "paragraph",
        "id": "397b49e4d769bda3",
        "text": "I map how instance specific links are put on nodes, in different ways.\n\nI provide an interface to easily and fastly find a [[Link]] for a given [[Node]] or nodes for a given link."
      },
      "date": 1701872560361
    },
    {
      "type": "add",
      "id": "29c157ca55fdfce6",
      "item": {
        "type": "paragraph",
        "id": "29c157ca55fdfce6",
        "text": "I provide an interface to easily and fastly find a [[Link]] for a given [[Node]] or nodes for a given link."
      },
      "after": "397b49e4d769bda3",
      "date": 1701872565461
    },
    {
      "item": {
        "type": "factory",
        "id": "6b2507b1eee1ffb9"
      },
      "id": "6b2507b1eee1ffb9",
      "type": "add",
      "after": "b4cd9baea643d264",
      "date": 1701872590618
    },
    {
      "type": "edit",
      "id": "6b2507b1eee1ffb9",
      "item": {
        "type": "code",
        "id": "6b2507b1eee1ffb9",
        "text": "isNode: aNode ownedBy: anObject\n\t^(nodesForObjects at: anObject ifAbsent:[^false]) includes: aNode"
      },
      "date": 1701872593239
    },
    {
      "id": "b4cd9baea643d264",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "3256392494ffee4d",
        "dd201e9a618d4fdb",
        "a8182c0252b1e447",
        "6b2507b1eee1ffb9"
      ],
      "date": 1701872605057
    },
    {
      "item": {
        "type": "factory",
        "id": "ea4be031ecea8f30"
      },
      "id": "ea4be031ecea8f30",
      "type": "add",
      "after": "6b2507b1eee1ffb9",
      "date": 1701872643985
    },
    {
      "type": "edit",
      "id": "ea4be031ecea8f30",
      "item": {
        "type": "code",
        "id": "ea4be031ecea8f30",
        "text": "removeNode: aNode forObject: anObject\n\t\"I am just a helper object, if someone asks me to remove a node or an object\n\tthat i don't know, i don't raise any errors\"\n\t(nodesForObjects at: anObject) remove: aNode ifAbsent:[].\n\t(objectsForNodes at: aNode) remove: anObject ifAbsent:[]"
      },
      "date": 1701872646186
    },
    {
      "id": "ea4be031ecea8f30",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "dd201e9a618d4fdb",
        "a8182c0252b1e447",
        "6b2507b1eee1ffb9"
      ],
      "date": 1701872654588
    },
    {
      "id": "6b2507b1eee1ffb9",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "dd201e9a618d4fdb",
        "a8182c0252b1e447"
      ],
      "date": 1701872669903
    },
    {
      "item": {
        "type": "factory",
        "id": "c10d7913b2e94541"
      },
      "id": "c10d7913b2e94541",
      "type": "add",
      "after": "a8182c0252b1e447",
      "date": 1701872953223
    },
    {
      "type": "edit",
      "id": "c10d7913b2e94541",
      "item": {
        "type": "image",
        "id": "c10d7913b2e94541",
        "text": "findNodeLike:forObject:",
        "size": "wide",
        "width": 430,
        "height": 268,
        "url": "/assets/plugins/image/84b9ee686c8778b8223022ba7148d554.jpg"
      },
      "date": 1701872970838
    },
    {
      "id": "c10d7913b2e94541",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "dd201e9a618d4fdb",
        "c10d7913b2e94541",
        "a8182c0252b1e447"
      ],
      "date": 1701873011442
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1701873246743
    },
    {
      "item": {
        "type": "factory",
        "id": "0eedf4d26660d793"
      },
      "id": "0eedf4d26660d793",
      "type": "add",
      "after": "a8182c0252b1e447",
      "date": 1701873418604
    },
    {
      "id": "0eedf4d26660d793",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "dd201e9a618d4fdb",
        "0eedf4d26660d793",
        "c10d7913b2e94541",
        "a8182c0252b1e447"
      ],
      "date": 1701873424488
    },
    {
      "type": "edit",
      "id": "0eedf4d26660d793",
      "item": {
        "type": "paragraph",
        "id": "0eedf4d26660d793",
        "text": "The purpose of this method is to find a node in a collection associated with a particular object, which is equivalent to a given node."
      },
      "date": 1701873467387
    },
    {
      "type": "add",
      "id": "8af1db1722d28faa",
      "item": {
        "type": "paragraph",
        "id": "8af1db1722d28faa",
        "text": "findNodeLike:forObject:"
      },
      "after": "0eedf4d26660d793",
      "date": 1701873476369
    },
    {
      "id": "8af1db1722d28faa",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "8af1db1722d28faa",
        "dd201e9a618d4fdb",
        "0eedf4d26660d793",
        "c10d7913b2e94541",
        "a8182c0252b1e447"
      ],
      "date": 1701873480837
    },
    {
      "item": {
        "type": "factory",
        "id": "1a4f5085a38e2a21"
      },
      "id": "1a4f5085a38e2a21",
      "type": "add",
      "after": "a8182c0252b1e447",
      "date": 1701873762412
    },
    {
      "id": "1a4f5085a38e2a21",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "8af1db1722d28faa",
        "dd201e9a618d4fdb",
        "0eedf4d26660d793",
        "c10d7913b2e94541",
        "1a4f5085a38e2a21",
        "a8182c0252b1e447"
      ],
      "date": 1701873766706
    },
    {
      "type": "edit",
      "id": "1a4f5085a38e2a21",
      "item": {
        "type": "pagefold",
        "id": "1a4f5085a38e2a21",
        "text": "~"
      },
      "date": 1701873770082
    },
    {
      "item": {
        "type": "factory",
        "id": "bbfd67f658f844ee"
      },
      "id": "bbfd67f658f844ee",
      "type": "add",
      "after": "a8182c0252b1e447",
      "date": 1701873772370
    },
    {
      "id": "bbfd67f658f844ee",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "8af1db1722d28faa",
        "dd201e9a618d4fdb",
        "0eedf4d26660d793",
        "bbfd67f658f844ee",
        "c10d7913b2e94541",
        "1a4f5085a38e2a21",
        "a8182c0252b1e447"
      ],
      "date": 1701873780481
    },
    {
      "id": "bbfd67f658f844ee",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "bbfd67f658f844ee",
        "8af1db1722d28faa",
        "dd201e9a618d4fdb",
        "0eedf4d26660d793",
        "c10d7913b2e94541",
        "1a4f5085a38e2a21",
        "a8182c0252b1e447"
      ],
      "date": 1701873786290
    },
    {
      "type": "edit",
      "id": "bbfd67f658f844ee",
      "item": {
        "type": "pagefold",
        "id": "bbfd67f658f844ee",
        "text": "~"
      },
      "date": 1701873794971
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1701873895000
    },
    {
      "type": "edit",
      "id": "397b49e4d769bda3",
      "item": {
        "type": "paragraph",
        "id": "397b49e4d769bda3",
        "text": "I map how instance specific links are put on nodes, in different ways."
      },
      "date": 1701873958599
    },
    {
      "item": {
        "type": "factory",
        "id": "f037ddb92b14250d"
      },
      "id": "f037ddb92b14250d",
      "type": "add",
      "after": "a8182c0252b1e447",
      "date": 1701874195155
    },
    {
      "type": "edit",
      "id": "f037ddb92b14250d",
      "item": {
        "type": "markdown",
        "id": "f037ddb92b14250d",
        "text": "Node Equivalence Check:**\n   - The condition `node isEquivalentTo: aNode` suggests that there is an `isEquivalentTo:` method implemented on the nodes. This method likely checks whether the current node is equivalent to the given `aNode`. The definition of `isEquivalentTo:` would depend on the specific requirements of your application."
      },
      "date": 1701874200522
    },
    {
      "type": "edit",
      "id": "f037ddb92b14250d",
      "item": {
        "type": "markdown",
        "id": "f037ddb92b14250d",
        "text": "**Node Equivalence Check:** The condition `node isEquivalentTo: aNode` suggests that there is an `isEquivalentTo:` method implemented on the nodes. This method likely checks whether the current node is equivalent to the given `aNode`. The definition of `isEquivalentTo:` would depend on the specific requirements of your application."
      },
      "date": 1701874224613
    },
    {
      "type": "edit",
      "id": "f037ddb92b14250d",
      "item": {
        "type": "markdown",
        "id": "f037ddb92b14250d",
        "text": "**Node Equivalence Check:** The condition `node isEquivalentTo: aNode` suggests that there is an `isEquivalentTo:` method implemented on the nodes. This method likely checks whether the current node is equivalent to the given `aNode`. The definition of `isEquivalentTo:` would depend on the specific requirements of your application. (ChatGPT 3.5)"
      },
      "date": 1701874272888
    },
    {
      "type": "edit",
      "id": "f037ddb92b14250d",
      "item": {
        "type": "markdown",
        "id": "f037ddb92b14250d",
        "text": "**Code Explanation:**\n   - `nodesForObject := nodesForObjects at: anObject ifAbsent: [ #() ]`: Retrieves the collection of nodes associated with the given `anObject` from a dictionary named `nodesForObjects`. If there is no entry for `anObject`, it defaults to an empty array (`#()`).\n   - `^ nodesForObject detect: [ :node | node isEquivalentTo: aNode ] ifNone: [ nil ]`: Uses the `detect:ifNone:` message to find the first node in the collection that satisfies the condition provided in the block `[ :node | node isEquivalentTo: aNode ]`.\n     - If a node is found, it is returned.\n     - If no node is found, the `ifNone: [ nil ]` block is executed, and `nil` is returned."
      },
      "date": 1701874319494
    },
    {
      "type": "add",
      "id": "03b31815e8f1220e",
      "item": {
        "type": "markdown",
        "id": "03b31815e8f1220e",
        "text": "**Node Equivalence Check:** The condition `node isEquivalentTo: aNode` suggests that there is an `isEquivalentTo:` method implemented on the nodes. This method likely checks whether the current node is equivalent to the given `aNode`. The definition of `isEquivalentTo:` would depend on the specific requirements of your application. (ChatGPT 3.5)"
      },
      "after": "f037ddb92b14250d",
      "date": 1701874324666
    },
    {
      "id": "03b31815e8f1220e",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "bbfd67f658f844ee",
        "8af1db1722d28faa",
        "dd201e9a618d4fdb",
        "0eedf4d26660d793",
        "c10d7913b2e94541",
        "03b31815e8f1220e",
        "1a4f5085a38e2a21",
        "a8182c0252b1e447",
        "f037ddb92b14250d"
      ],
      "date": 1701874421195
    },
    {
      "id": "f037ddb92b14250d",
      "type": "move",
      "order": [
        "397b49e4d769bda3",
        "29c157ca55fdfce6",
        "b4cd9baea643d264",
        "6b2507b1eee1ffb9",
        "3256392494ffee4d",
        "ea4be031ecea8f30",
        "bbfd67f658f844ee",
        "8af1db1722d28faa",
        "dd201e9a618d4fdb",
        "0eedf4d26660d793",
        "f037ddb92b14250d",
        "c10d7913b2e94541",
        "03b31815e8f1220e",
        "1a4f5085a38e2a21",
        "a8182c0252b1e447"
      ],
      "date": 1701874426555
    },
    {
      "type": "edit",
      "id": "f037ddb92b14250d",
      "item": {
        "type": "markdown",
        "id": "f037ddb92b14250d",
        "text": "**Code Explanation:** (ChatGPT 3.5)\n   - `nodesForObject := nodesForObjects at: anObject ifAbsent: [ #() ]`: Retrieves the collection of nodes associated with the given `anObject` from a dictionary named `nodesForObjects`. If there is no entry for `anObject`, it defaults to an empty array (`#()`).\n   - `^ nodesForObject detect: [ :node | node isEquivalentTo: aNode ] ifNone: [ nil ]`: Uses the `detect:ifNone:` message to find the first node in the collection that satisfies the condition provided in the block `[ :node | node isEquivalentTo: aNode ]`.\n     - If a node is found, it is returned.\n     - If no node is found, the `ifNone: [ nil ]` block is executed, and `nil` is returned."
      },
      "date": 1701874450677
    },
    {
      "type": "edit",
      "id": "f037ddb92b14250d",
      "item": {
        "type": "markdown",
        "id": "f037ddb92b14250d",
        "text": "**Code Explanation:** (ChatGPT 3.5)\n`nodesForObject := nodesForObjects at: anObject ifAbsent: [ #() ]`: Retrieves the collection of nodes associated with the given `anObject` from a dictionary named `nodesForObjects`. If there is no entry for `anObject`, it defaults to an empty array (`#()`).\n\n`^ nodesForObject detect: [ :node | node isEquivalentTo: aNode ] ifNone: [ nil ]`: Uses the `detect:ifNone:` message to find the first node in the collection that satisfies the condition provided in the block `[ :node | node isEquivalentTo: aNode ]`.\n     - If a node is found, it is returned.\n     - If no node is found, the `ifNone: [ nil ]` block is executed, and `nil` is returned."
      },
      "date": 1701874493369
    },
    {
      "type": "edit",
      "id": "f037ddb92b14250d",
      "item": {
        "type": "markdown",
        "id": "f037ddb92b14250d",
        "text": "**Code Explanation:** (ChatGPT 3.5) `nodesForObject := nodesForObjects at: anObject ifAbsent: [ #() ]`: Retrieves the collection of nodes associated with the given `anObject` from a dictionary named `nodesForObjects`. If there is no entry for `anObject`, it defaults to an empty array (`#()`).\n\n`^ nodesForObject detect: [ :node | node isEquivalentTo: aNode ] ifNone: [ nil ]`: Uses the `detect:ifNone:` message to find the first node in the collection that satisfies the condition provided in the block `[ :node | node isEquivalentTo: aNode ]`.\n     - If a node is found, it is returned.\n     - If no node is found, the `ifNone: [ nil ]` block is executed, and `nil` is returned."
      },
      "date": 1701874506052
    },
    {
      "type": "edit",
      "id": "8af1db1722d28faa",
      "item": {
        "type": "paragraph",
        "id": "8af1db1722d28faa",
        "text": "# findNodeLike:forObject:"
      },
      "date": 1701874684329
    },
    {
      "type": "edit",
      "id": "8af1db1722d28faa",
      "item": {
        "type": "markdown",
        "id": "8af1db1722d28faa",
        "text": "# findNodeLike:forObject:"
      },
      "date": 1701874685603
    }
  ]
}