{
  "title": "First Animated Program",
  "story": [
    {
      "type": "paragraph",
      "id": "b3966074c1b682c4",
      "text": "We animate a Monte Carlo integration picking random points within a square. From this we approximate Pi by counting points falling within a circle's area."
    },
    {
      "type": "paragraph",
      "id": "26e9f6be0cd8b857",
      "text": "See [[First Published Program]]"
    },
    {
      "type": "paragraph",
      "id": "8d3b8fa5ad50976e",
      "text": "We choose points with a square, sides = 2, area = 4. We will draw these points in red when they fall within a circle radius = 1 which we know when x¬≤+y¬≤ is within r¬≤"
    },
    {
      "type": "code",
      "id": "a298fc34d2e39df5",
      "text": "  x = rnd()\n  y = rnd()\n  if(x*x + y*y <= 1*1) ..."
    },
    {
      "type": "paragraph",
      "id": "9147e3129ab98adf",
      "text": "We'll draw the points on a square html <canvas> large enough to show well on the page."
    },
    {
      "type": "code",
      "id": "0a24604873649533",
      "text": "  <canvas id=\"canvas\" width=\"360\" height=\"360\"> "
    },
    {
      "type": "paragraph",
      "id": "90f8c4c9fce6fd3f",
      "text": "We use a 2d api which has functions for choosing colors and drawing dots."
    },
    {
      "type": "code",
      "id": "c0a69f31aba95be1",
      "text": "  const ctx = window.canvas.getContext(\"2d\")\n  ctx.fillStyle = \"red\"\n  ctx.fillRect((x+1)*180, (y+1)*180, 1, 1) "
    },
    {
      "type": "paragraph",
      "id": "ad6589ba0cb27a59",
      "text": "We'll repeat the calculation a million times stopping long enough every thousand to calculate and display at the standard refresh rate."
    },
    {
      "type": "code",
      "id": "efd74456b99a7a60",
      "text": "  for (let i=0; i<1000000; i++) {\n    if(0 == i%1000) {\n      window.report.innerText = red/i*4\n      await frame()\n    }\n  }"
    },
    {
      "type": "paragraph",
      "id": "58b3135a3aa9737a",
      "text": "We save our work in Assets."
    },
    {
      "type": "assets",
      "id": "f6ee53559362a101",
      "text": "pages/first-animated-program"
    },
    {
      "type": "paragraph",
      "id": "571ae92edac0d56f",
      "text": "Then show it in a Frame. Jiggle this to restart."
    },
    {
      "type": "frame",
      "id": "c7bb025d7c184f3f",
      "text": "//wiki.ralfbarkow.ch/assets/pages/first-animated-program/circle.html\nHEIGHT 450"
    },
    {
      "type": "paragraph",
      "id": "89da2d33984a04b9",
      "text": "[[MDN Search Terms]] canvas getContext fillStyle fillRect await requestAnimationFrame"
    },
    {
      "type": "markdown",
      "id": "cf80b0444c62866e",
      "text": "# Curiosity"
    },
    {
      "type": "paragraph",
      "id": "2d7063c0bd32b2eb",
      "text": "The correct behavior of <canvas> seems to require more of the usual doctype and html tag surroundings. When I couldn't make a really small program work I turned to the mdn example that did work before experimentally disassembling that. [https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_usage#a_simple_example mdn]"
    },
    {
      "type": "paragraph",
      "id": "b20bc1f43e1c79b8",
      "text": "Unlike our results, the decimal ùùÖ has no repeating digits. When we compute the ratio of areas we are asking for repeating decimals and find quite a variety of new sequences with each run. [https://en.wikipedia.org/wiki/Repeating_decimal wikipedia]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "First Animated Program",
        "story": []
      },
      "date": 1673832537530
    },
    {
      "item": {
        "type": "factory",
        "id": "b3966074c1b682c4"
      },
      "id": "b3966074c1b682c4",
      "type": "add",
      "date": 1673832539512
    },
    {
      "type": "edit",
      "id": "b3966074c1b682c4",
      "item": {
        "type": "paragraph",
        "id": "b3966074c1b682c4",
        "text": "We will show a Monte Carlo integration as it picks random points within a square from which we compute Pi by counting the points falling within a circle."
      },
      "date": 1673832756619
    },
    {
      "type": "edit",
      "id": "b3966074c1b682c4",
      "item": {
        "type": "paragraph",
        "id": "b3966074c1b682c4",
        "text": "We animate a Monte Carlo integration as it picks random points within a square from which we compute Pi by counting the points falling within a circle."
      },
      "date": 1673832773971
    },
    {
      "type": "add",
      "id": "26e9f6be0cd8b857",
      "item": {
        "type": "paragraph",
        "id": "26e9f6be0cd8b857",
        "text": "See [[Tips for Programming]]"
      },
      "after": "b3966074c1b682c4",
      "date": 1673832806952
    },
    {
      "item": {
        "type": "factory",
        "id": "f6ee53559362a101"
      },
      "id": "f6ee53559362a101",
      "type": "add",
      "after": "26e9f6be0cd8b857",
      "date": 1673832869769
    },
    {
      "type": "edit",
      "id": "f6ee53559362a101",
      "item": {
        "type": "assets",
        "id": "f6ee53559362a101",
        "text": "pages/first-animated-program"
      },
      "date": 1673832878116
    },
    {
      "item": {
        "type": "factory",
        "id": "c7bb025d7c184f3f"
      },
      "id": "c7bb025d7c184f3f",
      "type": "add",
      "after": "f6ee53559362a101",
      "date": 1673832907198
    },
    {
      "type": "edit",
      "id": "c7bb025d7c184f3f",
      "item": {
        "type": "frame",
        "id": "c7bb025d7c184f3f",
        "text": "http://app.ward.dojo.fed.wiki/assets/pages/first-animated-program/circle.html\nHEIGHT 450"
      },
      "date": 1673832924079
    },
    {
      "type": "add",
      "id": "8d3b8fa5ad50976e",
      "item": {
        "type": "paragraph",
        "id": "8d3b8fa5ad50976e",
        "text": "We choose points with a square, sides = 2, area = 4."
      },
      "after": "26e9f6be0cd8b857",
      "date": 1673833295900
    },
    {
      "type": "edit",
      "id": "8d3b8fa5ad50976e",
      "item": {
        "type": "paragraph",
        "id": "8d3b8fa5ad50976e",
        "text": "We choose points with a square, sides = 2, area = 4. We will draw these points in red when they fall within a circle, radius = 1."
      },
      "date": 1673833443659
    },
    {
      "type": "add",
      "id": "a298fc34d2e39df5",
      "item": {
        "type": "factory",
        "id": "a298fc34d2e39df5",
        "text": "      const x = rnd()\n      const y = rnd()\n      if(x*x + y*y <= 1*1) {\n"
      },
      "after": "8d3b8fa5ad50976e",
      "date": 1673833448733
    },
    {
      "type": "edit",
      "id": "a298fc34d2e39df5",
      "item": {
        "type": "code",
        "id": "a298fc34d2e39df5",
        "text": "  x = rnd()\n  y = rnd()\n  if(x*x + y*y <= 1*1) ..."
      },
      "date": 1673833480139
    },
    {
      "type": "edit",
      "id": "8d3b8fa5ad50976e",
      "item": {
        "type": "paragraph",
        "id": "8d3b8fa5ad50976e",
        "text": "We choose points with a square, sides = 2, area = 4. We will draw these points in red when they fall within a circle, radius = 1 which we know when x"
      },
      "date": 1673833571923
    },
    {
      "type": "edit",
      "id": "8d3b8fa5ad50976e",
      "item": {
        "type": "paragraph",
        "id": "8d3b8fa5ad50976e",
        "text": "We choose points with a square, sides = 2, area = 4. We will draw these points in red when they fall within a circle, radius = 1 which we know when x¬≤+y¬≤ is within r¬≤"
      },
      "date": 1673833623337
    },
    {
      "type": "add",
      "id": "9147e3129ab98adf",
      "item": {
        "type": "paragraph",
        "id": "9147e3129ab98adf",
        "text": "We'll draw the points on a square html <canvas> large enough to show well on the page."
      },
      "after": "8d3b8fa5ad50976e",
      "date": 1673833803369
    },
    {
      "id": "9147e3129ab98adf",
      "type": "move",
      "order": [
        "b3966074c1b682c4",
        "26e9f6be0cd8b857",
        "8d3b8fa5ad50976e",
        "a298fc34d2e39df5",
        "9147e3129ab98adf",
        "f6ee53559362a101",
        "c7bb025d7c184f3f"
      ],
      "date": 1673833808058
    },
    {
      "type": "add",
      "id": "90f8c4c9fce6fd3f",
      "item": {
        "type": "paragraph",
        "id": "90f8c4c9fce6fd3f",
        "text": "We use a 2d api which has functions for choosing colors and drawing dots."
      },
      "after": "9147e3129ab98adf",
      "date": 1673833905711
    },
    {
      "type": "add",
      "id": "ad6589ba0cb27a59",
      "item": {
        "type": "paragraph",
        "id": "ad6589ba0cb27a59",
        "text": "We'll repeat the calculation a million times stopping long enough to update the screen at the standard refresh frame of 16ms."
      },
      "after": "90f8c4c9fce6fd3f",
      "date": 1673833994900
    },
    {
      "type": "edit",
      "id": "ad6589ba0cb27a59",
      "item": {
        "type": "paragraph",
        "id": "ad6589ba0cb27a59",
        "text": "We'll repeat the calculation a million times stopping long enough to update the screen at the standard refresh rate."
      },
      "date": 1673834005280
    },
    {
      "type": "add",
      "id": "0a24604873649533",
      "item": {
        "type": "paragraph",
        "id": "0a24604873649533",
        "text": "<canvas id=\"canvas\" width=\"360\" height=\"360\">"
      },
      "after": "9147e3129ab98adf",
      "date": 1673834025111
    },
    {
      "type": "edit",
      "id": "0a24604873649533",
      "item": {
        "type": "code",
        "id": "0a24604873649533",
        "text": "<canvas id=\"canvas\" width=\"360\" height=\"360\"> "
      },
      "date": 1673834034177
    },
    {
      "type": "add",
      "id": "c0a69f31aba95be1",
      "item": {
        "type": "paragraph",
        "id": "c0a69f31aba95be1",
        "text": "  const ctx = window.canvas.getContext(\"2d\")\n  ctx.fillStyle = \"red\"\n  ctx.fillRect((x+1)*180, (y+1)*180, 1, 1)"
      },
      "after": "90f8c4c9fce6fd3f",
      "date": 1673834121934
    },
    {
      "type": "edit",
      "id": "c0a69f31aba95be1",
      "item": {
        "type": "code",
        "id": "c0a69f31aba95be1",
        "text": "  const ctx = window.canvas.getContext(\"2d\")\n  ctx.fillStyle = \"red\"\n  ctx.fillRect((x+1)*180, (y+1)*180, 1, 1) "
      },
      "date": 1673834131556
    },
    {
      "type": "edit",
      "id": "0a24604873649533",
      "item": {
        "type": "code",
        "id": "0a24604873649533",
        "text": "  <canvas id=\"canvas\" width=\"360\" height=\"360\"> "
      },
      "date": 1673834139448
    },
    {
      "type": "add",
      "id": "efd74456b99a7a60",
      "item": {
        "type": "factory",
        "id": "efd74456b99a7a60",
        "text": "<canvas id=\"canvas\" width=\"360\" height=\"360\"></canvas>\n  <script type=module>\n    const frame = () => new Promise(done => requestAnimationFrame(done))\n    const rnd = () => Math.random()*2-1 // -1 to 1\n    const ctx = window.canvas.getContext(\"2d\");\n    let red = 0\n    for (let i=0; i<1000000; i++){\n      const x = rnd()\n      const y = rnd()\n      if(x*x + y*y <= 1*1) {\n        ctx.fillStyle = \"red\"\n        red += 1\n      }\n      else {\n        ctx.fillStyle = \"yellow\"\n      }\n      ctx.fillRect((x+1)*180, (y+1)*180, 1, 1);"
      },
      "after": "ad6589ba0cb27a59",
      "date": 1673834171076
    },
    {
      "type": "edit",
      "id": "efd74456b99a7a60",
      "item": {
        "type": "code",
        "id": "efd74456b99a7a60",
        "text": "  for (let i=0; i<1000000; i++){\n"
      },
      "date": 1673834205840
    },
    {
      "type": "edit",
      "id": "efd74456b99a7a60",
      "item": {
        "type": "code",
        "id": "efd74456b99a7a60",
        "text": "  for (let i=0; i<1000000; i++){\n    ...\n    if(0 == i%1000) {\n      window.report.innerText = red/i*4\n      await frame()\n    }\n  }"
      },
      "date": 1673834284483
    },
    {
      "type": "edit",
      "id": "efd74456b99a7a60",
      "item": {
        "type": "code",
        "id": "efd74456b99a7a60",
        "text": "  for (let i=0; i<1000000; i++){\n    if(0 == i%1000) {\n      window.report.innerText = red/i*4\n      await frame()\n    }\n  }"
      },
      "date": 1673834318367
    },
    {
      "type": "edit",
      "id": "efd74456b99a7a60",
      "item": {
        "type": "code",
        "id": "efd74456b99a7a60",
        "text": "  for (let i=0; i<1000000; i++) {\n    if(0 == i%1000) {\n      window.report.innerText = red/i*4\n      await frame()\n    }\n  }"
      },
      "date": 1673834325834
    },
    {
      "type": "add",
      "id": "58b3135a3aa9737a",
      "item": {
        "type": "paragraph",
        "id": "58b3135a3aa9737a",
        "text": "We save as we did in [[First Published Program]]"
      },
      "after": "ad6589ba0cb27a59",
      "date": 1673834459954
    },
    {
      "id": "58b3135a3aa9737a",
      "type": "move",
      "order": [
        "b3966074c1b682c4",
        "26e9f6be0cd8b857",
        "8d3b8fa5ad50976e",
        "a298fc34d2e39df5",
        "9147e3129ab98adf",
        "0a24604873649533",
        "90f8c4c9fce6fd3f",
        "c0a69f31aba95be1",
        "ad6589ba0cb27a59",
        "efd74456b99a7a60",
        "58b3135a3aa9737a",
        "f6ee53559362a101",
        "c7bb025d7c184f3f"
      ],
      "date": 1673834463365
    },
    {
      "type": "add",
      "id": "571ae92edac0d56f",
      "item": {
        "type": "paragraph",
        "id": "571ae92edac0d56f",
        "text": "Then show in a Frame."
      },
      "after": "58b3135a3aa9737a",
      "date": 1673834524893
    },
    {
      "type": "edit",
      "id": "58b3135a3aa9737a",
      "item": {
        "type": "paragraph",
        "id": "58b3135a3aa9737a",
        "text": "We save in Assets."
      },
      "date": 1673834547081
    },
    {
      "type": "edit",
      "id": "571ae92edac0d56f",
      "item": {
        "type": "paragraph",
        "id": "571ae92edac0d56f",
        "text": "Then show in Frame."
      },
      "date": 1673834552410
    },
    {
      "id": "571ae92edac0d56f",
      "type": "move",
      "order": [
        "b3966074c1b682c4",
        "26e9f6be0cd8b857",
        "8d3b8fa5ad50976e",
        "a298fc34d2e39df5",
        "9147e3129ab98adf",
        "0a24604873649533",
        "90f8c4c9fce6fd3f",
        "c0a69f31aba95be1",
        "ad6589ba0cb27a59",
        "efd74456b99a7a60",
        "58b3135a3aa9737a",
        "f6ee53559362a101",
        "571ae92edac0d56f",
        "c7bb025d7c184f3f"
      ],
      "date": 1673834555913
    },
    {
      "type": "edit",
      "id": "571ae92edac0d56f",
      "item": {
        "type": "paragraph",
        "id": "571ae92edac0d56f",
        "text": "Then show in Frame. Restart with a jiggle."
      },
      "date": 1673834582168
    },
    {
      "item": {
        "type": "factory",
        "id": "89da2d33984a04b9"
      },
      "id": "89da2d33984a04b9",
      "type": "add",
      "after": "c7bb025d7c184f3f",
      "date": 1673834927744
    },
    {
      "type": "edit",
      "id": "89da2d33984a04b9",
      "item": {
        "type": "paragraph",
        "id": "89da2d33984a04b9",
        "text": "[[MDN Search Terms]] canvas getcontext fillstyle fillrect"
      },
      "date": 1673834993737
    },
    {
      "type": "edit",
      "id": "89da2d33984a04b9",
      "item": {
        "type": "paragraph",
        "id": "89da2d33984a04b9",
        "text": "[[MDN Search Terms]] canvas getContext fillStyle fillRect requestAnimationFrame"
      },
      "date": 1673835075351
    },
    {
      "type": "edit",
      "id": "89da2d33984a04b9",
      "item": {
        "type": "paragraph",
        "id": "89da2d33984a04b9",
        "text": "[[MDN Search Terms]] canvas getContext fillStyle fillRect await requestAnimationFrame"
      },
      "date": 1673835126454
    },
    {
      "type": "edit",
      "id": "8d3b8fa5ad50976e",
      "item": {
        "type": "paragraph",
        "id": "8d3b8fa5ad50976e",
        "text": "We choose points with a square, sides = 2, area = 4. We will draw these points in red when they fall within a circle radius = 1 which we know when x¬≤+y¬≤ is within r¬≤"
      },
      "date": 1673835321480
    },
    {
      "type": "edit",
      "id": "8d3b8fa5ad50976e",
      "item": {
        "type": "paragraph",
        "id": "8d3b8fa5ad50976e",
        "text": "We choose points with a square, sides = 2, area = 4. We will draw these points in red when they fall within an inclosed circle radius = 1 which we know when x¬≤+y¬≤ is within r¬≤"
      },
      "date": 1673835376680
    },
    {
      "type": "edit",
      "id": "8d3b8fa5ad50976e",
      "item": {
        "type": "paragraph",
        "id": "8d3b8fa5ad50976e",
        "text": "We choose points with a square, sides = 2, area = 4. We will draw these points in red when they fall within a circle radius = 1 which we know when x¬≤+y¬≤ is within r¬≤"
      },
      "date": 1673835390964
    },
    {
      "type": "edit",
      "id": "26e9f6be0cd8b857",
      "item": {
        "type": "paragraph",
        "id": "26e9f6be0cd8b857",
        "text": "See [[Small First Program]]"
      },
      "date": 1673835577892
    },
    {
      "type": "edit",
      "id": "b3966074c1b682c4",
      "item": {
        "type": "paragraph",
        "id": "b3966074c1b682c4",
        "text": "We animate a Monte Carlo integration picking random points within a square from which we compute Pi by approximating area by classifying points as inside or out."
      },
      "date": 1673835747093
    },
    {
      "type": "edit",
      "id": "b3966074c1b682c4",
      "item": {
        "type": "paragraph",
        "id": "b3966074c1b682c4",
        "text": "We animate a Monte Carlo integration picking random points within a square. From this we approximate Pi by counting points falling within a circle's area."
      },
      "date": 1673835902631
    },
    {
      "type": "edit",
      "id": "26e9f6be0cd8b857",
      "item": {
        "type": "paragraph",
        "id": "26e9f6be0cd8b857",
        "text": "See [[First Published Program]]"
      },
      "date": 1673835963374
    },
    {
      "type": "edit",
      "id": "58b3135a3aa9737a",
      "item": {
        "type": "paragraph",
        "id": "58b3135a3aa9737a",
        "text": "We save our work in Assets."
      },
      "date": 1673836132912
    },
    {
      "type": "edit",
      "id": "571ae92edac0d56f",
      "item": {
        "type": "paragraph",
        "id": "571ae92edac0d56f",
        "text": "Then show it in a Frame. Restart with a jiggle."
      },
      "date": 1673836143422
    },
    {
      "type": "edit",
      "id": "571ae92edac0d56f",
      "item": {
        "type": "paragraph",
        "id": "571ae92edac0d56f",
        "text": "Then show it in a Frame. jiggle to restart."
      },
      "date": 1673836162814
    },
    {
      "type": "edit",
      "id": "571ae92edac0d56f",
      "item": {
        "type": "paragraph",
        "id": "571ae92edac0d56f",
        "text": "Then show it in a Frame. Jiggle this to restart."
      },
      "date": 1673836184008
    },
    {
      "type": "edit",
      "id": "ad6589ba0cb27a59",
      "item": {
        "type": "paragraph",
        "id": "ad6589ba0cb27a59",
        "text": "We'll repeat the calculation a million times stopping long enough every thousand to calculate and display at the standard refresh rate."
      },
      "date": 1673837849981
    },
    {
      "id": "cf80b0444c62866e",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "cf80b0444c62866e",
        "text": "# Curiosity"
      },
      "after": "c7bb025d7c184f3f",
      "attribution": {
        "page": "Photo Rotator",
        "site": "photos.ward.dojo.fed.wiki"
      },
      "date": 1673882852679
    },
    {
      "type": "add",
      "id": "2d7063c0bd32b2eb",
      "item": {
        "type": "paragraph",
        "id": "2d7063c0bd32b2eb",
        "text": "The correct behavior of <canvas> seems to require more of the usual doctype and html tag surroundings. When I couldn't make a really small program work I turned to the mdn example that did work before experimentally disassembling that."
      },
      "after": "89da2d33984a04b9",
      "date": 1673883113782
    },
    {
      "type": "edit",
      "id": "2d7063c0bd32b2eb",
      "item": {
        "type": "paragraph",
        "id": "2d7063c0bd32b2eb",
        "text": "The correct behavior of <canvas> seems to require more of the usual doctype and html tag surroundings. When I couldn't make a really small program work I turned to the mdn example that did work before experimentally disassembling that. [https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_usage#a_simple_example mdn]"
      },
      "date": 1673883131427
    },
    {
      "id": "2d7063c0bd32b2eb",
      "type": "move",
      "order": [
        "b3966074c1b682c4",
        "26e9f6be0cd8b857",
        "8d3b8fa5ad50976e",
        "a298fc34d2e39df5",
        "9147e3129ab98adf",
        "0a24604873649533",
        "90f8c4c9fce6fd3f",
        "c0a69f31aba95be1",
        "ad6589ba0cb27a59",
        "efd74456b99a7a60",
        "58b3135a3aa9737a",
        "f6ee53559362a101",
        "571ae92edac0d56f",
        "c7bb025d7c184f3f",
        "cf80b0444c62866e",
        "2d7063c0bd32b2eb",
        "89da2d33984a04b9"
      ],
      "date": 1673883134790
    },
    {
      "id": "89da2d33984a04b9",
      "type": "move",
      "order": [
        "b3966074c1b682c4",
        "26e9f6be0cd8b857",
        "8d3b8fa5ad50976e",
        "a298fc34d2e39df5",
        "9147e3129ab98adf",
        "0a24604873649533",
        "90f8c4c9fce6fd3f",
        "c0a69f31aba95be1",
        "ad6589ba0cb27a59",
        "efd74456b99a7a60",
        "58b3135a3aa9737a",
        "f6ee53559362a101",
        "571ae92edac0d56f",
        "c7bb025d7c184f3f",
        "89da2d33984a04b9",
        "cf80b0444c62866e",
        "2d7063c0bd32b2eb"
      ],
      "date": 1673883141869
    },
    {
      "type": "add",
      "id": "b20bc1f43e1c79b8",
      "item": {
        "type": "paragraph",
        "id": "b20bc1f43e1c79b8",
        "text": "Unlike our results, the decimal ùùÖ has no repeating digits. When we compute the ratio of areas we are asking for repeating decimals and find quite a variety of new sequences with each run. "
      },
      "after": "2d7063c0bd32b2eb",
      "date": 1673883787104
    },
    {
      "type": "edit",
      "id": "b20bc1f43e1c79b8",
      "item": {
        "type": "paragraph",
        "id": "b20bc1f43e1c79b8",
        "text": "Unlike our results, the decimal ùùÖ has no repeating digits. When we compute the ratio of areas we are asking for repeating decimals and find quite a variety of new sequences with each run. [https://en.wikipedia.org/wiki/Repeating_decimal wikipedia]"
      },
      "date": 1673883810661
    },
    {
      "type": "fork",
      "site": "app.ward.dojo.fed.wiki",
      "date": 1674146737640
    },
    {
      "type": "edit",
      "id": "c7bb025d7c184f3f",
      "item": {
        "type": "frame",
        "id": "c7bb025d7c184f3f",
        "text": "//wiki.ralfbarkow.ch/assets/pages/first-animated-program/circle.html\nHEIGHT 450"
      },
      "date": 1674146877833
    }
  ]
}