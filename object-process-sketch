{
  "title": "Object Process Sketch",
  "story": [
    {
      "type": "markdown",
      "id": "830a8eee1390544b",
      "text": "[Object Process Methodology](https://esml.technion.ac.il/opm/introduction-to-opm/) (OPM) is a framework for modeling systems.  In software development, a sketch is an informal diagram that focuses on communication rather than completeness."
    },
    {
      "type": "markdown",
      "id": "316e709c735c05ae",
      "text": "In 2008, Joe Gollner wrote a concise description of [Object Process Methodology](https://www.gollner.ca/2008/03/object-process.html):\n> The Object Process Methodology offers an astoundingly simple framework for modeling systems and scenarios of unlimited complexity. The root of its ability to do so lies in the fact that it departs from the prevailing fixation with Object Orientation (OO) which, in ultimately trying to represent the world using constructs relevant to software, inevitably spawns bewildering models as soon as it moves beyond anything more \"real\" than a software component. \n\n> The main departure that OPM makes, as its name suggests, is the elevation of \"processes\" to being peers to \"objects\". In the real world, there are _things_ and there are _things that happen to things_ and this basic decomposition of conceptual units fits reality to a tee. \n\n> So it is that whereas the full envelope of UML diagrams provides over 150 individual symbols, OPM manages to get by with literally a handful. This simplicity then makes a second major departure possible - the elimination of the litany of diagram types. In OPM, there is only one diagram type and only one integrated view. This is one major reason why business people can immediately grasp the contents of an OPM model."
    },
    {
      "type": "markdown",
      "id": "886641ba3018754b",
      "text": "Tools supporting OPM (i.e. [OPCAT](https://esml.technion.ac.il/opm/opcat-installation/), [OPCloud](https://www.opcloud.tech)) simultaneously edit an _Object Process Diagram_ (OPD) alongside _Object Process Language_ (OPL).  This automation ensures correctness as the modeler views the relations expressed in the diagram with the precise meaning in the language.  For subject matter experts not familiar with the meaning of every node (e.g. processes are ovals, objects are rectangles, states ar rounded rectangles) and edge (i.e. each arrowhead has a different meaning), some understanding is lost."
    },
    {
      "type": "markdown",
      "id": "027477af66cd01e3",
      "text": "The OPM tools unfortunately create an OPD as a graphic image (e.g. JPG, PNG) separately from the OPL text.  Marking up a read-only graphic image with text is unmaintainable. "
    },
    {
      "type": "markdown",
      "id": "f319c0149bc162ee",
      "text": "In software development, sketching can be done on a whiteboard, while modeling is done separately in a tool.  For the Unified Modeling Language (UML), Martin Fowler expresses the approach as [UmlAsSketch](https://martinfowler.com/bliki/UmlAsSketch.html):\n> Since sketching is pretty informal and dynamic you need to do them quickly and collaboratively, so a common medium is a white board. Sketches are also useful in documents, in which case the focus is communication rather than completeness. The tools used for sketching are lightweight drawing tools and often people aren't too particular about keeping to every strict rule of the UML. Most UML diagrams shown in books, such as mine, are sketches. Their emphasis is on selective communication rather than complete specification. Hence my sound-bite \"comprehensiveness is the enemy of comprehensibility\"."
    },
    {
      "type": "markdown",
      "id": "689965ac6a7fcd08",
      "text": "[Graphviz](https://graphviz.org/Gallery/directed/UML_Class_diagram.html), as implemented in Federated Wiki, enables labels (on nodes and edges) as internal links.  Replicating an _Object Process Sketch_ from an OPM tool, and augmenting the arrowheads on edges with a label is an aim towards improving comprehensibility."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Object Process Sketch",
        "story": []
      },
      "date": 1670942871214
    },
    {
      "item": {
        "type": "factory",
        "id": "830a8eee1390544b"
      },
      "id": "830a8eee1390544b",
      "type": "add",
      "date": 1670942881525
    },
    {
      "type": "edit",
      "id": "830a8eee1390544b",
      "item": {
        "type": "markdown",
        "id": "830a8eee1390544b",
        "text": "[Object Process Methodology](https://esml.technion.ac.il/opm/introduction-to-opm/) (OPM is a framework for modeling systems.  In software development, a sketch is an informal diagram that focuses on communication rather than completeness."
      },
      "date": 1670942884988
    },
    {
      "type": "edit",
      "id": "830a8eee1390544b",
      "item": {
        "type": "markdown",
        "id": "830a8eee1390544b",
        "text": "[Object Process Methodology](https://esml.technion.ac.il/opm/introduction-to-opm/) (OPM) is a framework for modeling systems.  In software development, a sketch is an informal diagram that focuses on communication rather than completeness."
      },
      "date": 1670942899650
    },
    {
      "item": {
        "type": "factory",
        "id": "316e709c735c05ae"
      },
      "id": "316e709c735c05ae",
      "type": "add",
      "after": "830a8eee1390544b",
      "date": 1670943158756
    },
    {
      "type": "edit",
      "id": "316e709c735c05ae",
      "item": {
        "type": "markdown",
        "id": "316e709c735c05ae",
        "text": "In 2008, Joe Gollner wrote a concise description of [Object Process Methodology](https://www.gollner.ca/2008/03/object-process.html)\n> The Object Process Methodology offers an astoundingly simple framework for modeling systems and scenarios of unlimited complexity. The root of its ability to do so lies in the fact that it departs from the prevailing fixation with Object Orientation (OO) which, in ultimately trying to represent the world using constructs relevant to software, inevitably spawns bewildering models as soon as it moves beyond anything more \"real\" than a software component. \n> The main departure that OPM makes, as its name suggests, is the elevation of \"processes\" to being peers to \"objects\". In the real world, there are _things_ and there are _things that happen to things_ and this basic decomposition of conceptual units fits reality to a tee. \n> So it is that whereas the full envelope of UML diagrams provides over 150 individual symbols, OPM manages to get by with literally a handful. This simplicity then makes a second major departure possible - the elimination of the litany of diagram types. In OPM, there is only one diagram type and only one integrated view. This is one major reason why business people can immediately grasp the contents of an OPM model."
      },
      "date": 1670943165005
    },
    {
      "type": "edit",
      "id": "316e709c735c05ae",
      "item": {
        "type": "markdown",
        "id": "316e709c735c05ae",
        "text": "In 2008, Joe Gollner wrote a concise description of [Object Process Methodology](https://www.gollner.ca/2008/03/object-process.html):\n> The Object Process Methodology offers an astoundingly simple framework for modeling systems and scenarios of unlimited complexity. The root of its ability to do so lies in the fact that it departs from the prevailing fixation with Object Orientation (OO) which, in ultimately trying to represent the world using constructs relevant to software, inevitably spawns bewildering models as soon as it moves beyond anything more \"real\" than a software component. \n\n> The main departure that OPM makes, as its name suggests, is the elevation of \"processes\" to being peers to \"objects\". In the real world, there are _things_ and there are _things that happen to things_ and this basic decomposition of conceptual units fits reality to a tee. \n\n> So it is that whereas the full envelope of UML diagrams provides over 150 individual symbols, OPM manages to get by with literally a handful. This simplicity then makes a second major departure possible - the elimination of the litany of diagram types. In OPM, there is only one diagram type and only one integrated view. This is one major reason why business people can immediately grasp the contents of an OPM model."
      },
      "date": 1670943195079
    },
    {
      "item": {
        "type": "factory",
        "id": "886641ba3018754b"
      },
      "id": "886641ba3018754b",
      "type": "add",
      "after": "316e709c735c05ae",
      "date": 1670943211516
    },
    {
      "type": "edit",
      "id": "886641ba3018754b",
      "item": {
        "type": "markdown",
        "id": "886641ba3018754b",
        "text": "Tools supporting OPM (i.e. [OPCAT](https://esml.technion.ac.il/opm/opcat-installation/), [OPCloud](https://www.opcloud.tech)) simultaneously edit an _Object Process Diagram_ (OPD) alongside _Object Process Language_ (OPL).  This automation ensures correctness as the modeler views the relations expressed in the diagram with the precise meaning in the language.  For subject matter experts not familiar with the meaning of every node (e.g. processes are ovals, objects are rectangles, states ar rounded rectangles) and edge (i.e. each arrowhead has a different meaning), some understanding is lost."
      },
      "date": 1670943219155
    },
    {
      "item": {
        "type": "factory",
        "id": "027477af66cd01e3"
      },
      "id": "027477af66cd01e3",
      "type": "add",
      "after": "886641ba3018754b",
      "date": 1670943251252
    },
    {
      "type": "edit",
      "id": "027477af66cd01e3",
      "item": {
        "type": "markdown",
        "id": "027477af66cd01e3",
        "text": "The OPM tools unfortunately create an OPD as a graphic image (e.g. JPG, PNG) separately from the OPL text.  Marking up a read-only graphic image with text is unmaintainable. "
      },
      "date": 1670943256831
    },
    {
      "item": {
        "type": "factory",
        "id": "f319c0149bc162ee"
      },
      "id": "f319c0149bc162ee",
      "type": "add",
      "after": "027477af66cd01e3",
      "date": 1670943266045
    },
    {
      "type": "edit",
      "id": "f319c0149bc162ee",
      "item": {
        "type": "markdown",
        "id": "f319c0149bc162ee",
        "text": "In software development, sketching can be done on a whiteboard, while modeling is done separately in a tool.  For the Unified Modeling Language (UML), Martin Fowler expresses the approach as [UmlAsSketch](https://martinfowler.com/bliki/UmlAsSketch.html)\n> Since sketching is pretty informal and dynamic you need to do them quickly and collaboratively, so a common medium is a white board. Sketches are also useful in documents, in which case the focus is communication rather than completeness. The tools used for sketching are lightweight drawing tools and often people aren't too particular about keeping to every strict rule of the UML. Most UML diagrams shown in books, such as mine, are sketches. Their emphasis is on selective communication rather than complete specification. Hence my sound-bite \"comprehensiveness is the enemy of comprehensibility\""
      },
      "date": 1670943272243
    },
    {
      "type": "edit",
      "id": "f319c0149bc162ee",
      "item": {
        "type": "markdown",
        "id": "f319c0149bc162ee",
        "text": "In software development, sketching can be done on a whiteboard, while modeling is done separately in a tool.  For the Unified Modeling Language (UML), Martin Fowler expresses the approach as [UmlAsSketch](https://martinfowler.com/bliki/UmlAsSketch.html):\n> Since sketching is pretty informal and dynamic you need to do them quickly and collaboratively, so a common medium is a white board. Sketches are also useful in documents, in which case the focus is communication rather than completeness. The tools used for sketching are lightweight drawing tools and often people aren't too particular about keeping to every strict rule of the UML. Most UML diagrams shown in books, such as mine, are sketches. Their emphasis is on selective communication rather than complete specification. Hence my sound-bite \"comprehensiveness is the enemy of comprehensibility\"."
      },
      "date": 1670943317180
    },
    {
      "item": {
        "type": "factory",
        "id": "d6e5bd55b05b94b3"
      },
      "id": "d6e5bd55b05b94b3",
      "type": "add",
      "after": "f319c0149bc162ee",
      "date": 1670943325044
    },
    {
      "type": "remove",
      "id": "d6e5bd55b05b94b3",
      "date": 1670943331025
    },
    {
      "item": {
        "type": "factory",
        "id": "689965ac6a7fcd08"
      },
      "id": "689965ac6a7fcd08",
      "type": "add",
      "after": "f319c0149bc162ee",
      "date": 1670943333146
    },
    {
      "type": "edit",
      "id": "689965ac6a7fcd08",
      "item": {
        "type": "markdown",
        "id": "689965ac6a7fcd08",
        "text": "[Graphviz](https://graphviz.org/Gallery/directed/UML_Class_diagram.html), as implemented in Federated Wiki, enables labels (on nodes and edges) as internal links.  Replicating an _Object Process Sketch_ from an OPM tool, and augmenting the arrowheads on edges with a label is an aim towards improving comprehensibility."
      },
      "date": 1670943338571
    },
    {
      "type": "fork",
      "site": "wh.daviding.wiki.openlearning.cc",
      "date": 1670944972044
    },
    {
      "type": "fork",
      "site": "daviding.wiki.openlearning.cc",
      "date": 1671023198449
    }
  ]
}