{
  "title": "Multiblaster",
  "story": [
    {
      "type": "paragraph",
      "id": "a54b67dad71986b2",
      "text": "â‡’ [[Croquet Multiblaster]]. "
    },
    {
      "type": "markdown",
      "id": "b0e89dcecb41898b",
      "text": "> This is an homage to Asteroids, implemented as a single HTML page without any backend code. All clients are kept in sync automatically by [[Croquet]]'s synchronization technology. [https://github.com/croquet/multiblaster github], [https://croquet.io/multiblaster/index.html?q=9zguex297g#pw=InauQyhaxzp-QOFJqn9H-A play it!]"
    },
    {
      "type": "markdown",
      "id": "883e8a5fdd496df3",
      "text": "Uses [[UNPKG]] **Script Tag** to access [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame:"
    },
    {
      "type": "code",
      "id": "c50b7efeded4ac19",
      "text": "       <meta charset=\"utf-8\">\n       <script src=\"https://unpkg.com/@croquet/croquet@1.0.5\"></script>\n"
    },
    {
      "type": "frame",
      "id": "0c67cd42705c9d6b",
      "text": "<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n        <title>Croquet Multiblaster</title>\n        <style>\n            html, body {\n                margin: 0;\n                height: 100%;\n                overflow: hidden;\n                touch-action: none;\n                background: #999;\n                -webkit-touch-callout: none;\n                -webkit-user-select: none;\n                user-select: none;\n                touch-action: none;\n            }\n            #canvas {\n                background: #000;\n                object-fit: contain;\n                max-width: 100%;\n                max-height: 100%;\n            }\n            #joystick {\n                position: absolute;\n                right: 50px;\n                bottom: 50px;\n                width: 120px;\n                height: 120px;\n                border: 3px solid #FFF;\n                border-radius: 60px;\n                opacity: 0.5;\n            }\n            #knob {\n                position: absolute;\n                left: 20px;\n                top: 20px;\n                width: 80px;\n                height: 80px;\n                border-radius: 40px;\n                background-color: #FFF;\n            }\n            #codelink {\n                position: fixed; bottom: 10px; right: 10px; padding: .5em; border-radius: 30px;\n                opacity: 50%; background: lightgray; box-shadow: 1px 1px 5px black;\n                text-decoration: none; font-family: monospace; font-size: 1.5em;\n            }\n            #codelink:hover {\n                opacity: 100%;\n            }\n        </style>\n        <script src=\"https://unpkg.com/@croquet/croquet@1.0\"></script>\n    </head>\n    <body>\n        <canvas id=\"canvas\" width=\"1000\" height=\"1000\"></canvas>\n        <div id=\"joystick\"><div id=\"knob\"></div></div>\n        <a id=\"codelink\" href=\"https://github.com/croquet/multiblaster/blob/main/index.html\"\n            title=\"View source code on GitHub\" target=\"_blank\">{}</a>\n        <script>\n/////////// Model code is executed inside of synced VM /////////// \n\nclass Game extends Croquet.Model {\n    init() {\n        this.ships = new Map();\n        this.asteroids = new Set();\n        this.blasts = new Set();\n        this.subscribe(this.sessionId, \"view-join\", this.viewJoined);\n        this.subscribe(this.sessionId, \"view-exit\", this.viewExited);\n        Asteroid.create({});\n        this.mainLoop();\n    }\n\n    viewJoined(viewId) {\n        const ship = Ship.create({ viewId });\n        this.ships.set(viewId, ship);\n    }\n\n    viewExited(viewId) {\n        const ship = this.ships.get(viewId);\n        this.ships.delete(viewId);\n        ship.destroy();\n    }\n\n    checkCollisions() {\n        for (const asteroid of this.asteroids) {\n            if (asteroid.wasHit) continue;\n            const minx = asteroid.x - asteroid.size;\n            const maxx = asteroid.x + asteroid.size;\n            const miny = asteroid.y - asteroid.size;\n            const maxy = asteroid.y + asteroid.size;\n            for (const blast of this.blasts) {\n                if (blast.x > minx && blast.x < maxx && blast.y > miny && blast.y < maxy) {\n                    asteroid.hitBy(blast);\n                    break;\n                }\n            }\n            for (const ship of this.ships.values()) {\n                if (!ship.wasHit && ship.x + 10 > minx && ship.x - 10 < maxx && ship.y + 10 > miny && ship.y - 10 < maxy) {\n                    if (!ship.score && Math.abs(ship.x-500) + Math.abs(ship.y-500) < 40) continue; // no hit if just spawned\n                    ship.hitBy(asteroid);\n                    break;\n                }\n            }\n        }\n    }\n\n    mainLoop() {\n        for (const ship of this.ships.values()) ship.move();\n        for (const asteroid of this.asteroids) asteroid.move();\n        for (const blast of this.blasts) blast.move();\n        this.checkCollisions();\n        this.future(50).mainLoop(); // move & check every 50 ms\n    }\n}\nGame.register(\"Game\");\n\nclass Ship extends Croquet.Model {\n    init({ viewId }) {\n        this.viewId = viewId;\n        this.reset();\n        this.subscribe(viewId, \"left-thruster\", this.leftThruster);\n        this.subscribe(viewId, \"right-thruster\", this.rightThruster);\n        this.subscribe(viewId, \"forward-thruster\", this.forwardThruster);\n        this.subscribe(viewId, \"fire-blaster\", this.fireBlaster);\n    }\n\n    reset() {\n        this.x = 500;\n        this.y = 500;\n        this.a = -Math.PI / 2;\n        this.dx = 0;\n        this.dy = 0;\n        this.left = false;\n        this.right = false;\n        this.forward = false;\n        this.score = 0;\n        this.wasHit = 0;\n    }\n\n    leftThruster(active) {\n        if (this.wasHit) return;\n        this.left = active;\n    }\n\n    rightThruster(active) {\n        if (this.wasHit) return;\n        this.right = active;\n    }\n\n    forwardThruster(active) {\n        if (this.wasHit) return;\n        this.forward = active;\n    }\n\n    fireBlaster() {\n        if (this.wasHit) return;\n        const dx = Math.cos(this.a) * 20;\n        const dy = Math.sin(this.a) * 20;\n        const x = this.x + dx;\n        const y = this.y + dy;\n        Blast.create({ x, y, dx, dy, ship: this });\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris for 3 seconds\n            if (++this.wasHit > 60) this.reset();\n        } else {\n            // process thruster controls\n            if (this.forward) {\n                this.dx += Math.cos(this.a) * 0.5;\n                this.dy += Math.sin(this.a) * 0.5;\n                if (this.dx > 10) this.dx = 10;\n                if (this.dx < -10) this.dx = -10;\n                if (this.dy > 10) this.dy = 10;\n                if (this.dy < -10) this.dy = -10;\n            }\n            if (this.left) this.a -= 0.2;\n            if (this.right) this.a += 0.2;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n        // drift through space\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n    }\n\n    hitBy(asteroid) {\n        // turn both into debris\n        this.wasHit = 1;\n        asteroid.wasHit = 1;\n    }\n}\nShip.register(\"Ship\");\n\nclass Asteroid extends Croquet.Model {\n    init({ size, x, y, a, dx, dy, da }) {\n        if (size) {\n            // init second asteroid after spliting\n            this.size = size;\n            this.x = x;\n            this.y = y;\n            this.a = a;\n            this.dx = dx;\n            this.dy = dy;\n            this.da = da;\n        } else {\n            // init new large asteroid\n            this.size = 40;\n            this.x = Math.random() * 400 - 200;\n            this.y = Math.random() * 400 - 200;\n            this.a = Math.random() * Math.PI * 2;\n            const speed = Math.random() * 4 + 1;\n            this.dx = Math.cos(this.a) * speed;\n            this.dy = Math.sin(this.a) * speed;\n            this.da = (0.02 + Math.random() * 0.03) * (Math.random() < 0.5 ? 1 : -1);\n            this.wasHit = 0;\n            this.move();\n        }\n        this.wellKnownModel(\"modelRoot\").asteroids.add(this);\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris, larger pieces drift longer\n            if (++this.wasHit > this.size) this.destroy();\n        }\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n        if (!this.wasHit) {\n            this.a += this.da;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n    }\n\n    hitBy(blast) {\n        if (!blast.ship.wasHit) blast.ship.score++;\n        if (this.size > 20) {\n            // split into two smaller faster asteroids\n            this.size *= 0.7;\n            this.da *= 1.5;\n            this.dx = -blast.dy * 10 / this.size;\n            this.dy = blast.dx * 10 / this.size;\n            Asteroid.create({ size: this.size, x: this.x, y: this.y, a: this.a, dx: -this.dx, dy: -this.dy, da: this.da });\n        } else {\n            // turn into debris\n            this.wasHit = 1;\n        }\n        blast.destroy();\n    }\n\n    destroy() {\n        const asteroids = this.wellKnownModel(\"modelRoot\").asteroids;\n        asteroids.delete(this);\n        super.destroy();\n        // keep at least 5 asteroids around\n        if (asteroids.size < 5) Asteroid.create({});\n    }\n}\nAsteroid.register(\"Asteroid\");\n\nclass Blast extends Croquet.Model {\n    init({x, y, dx, dy, ship}) {\n        this.ship = ship;\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.t = 0;\n        this.wellKnownModel(\"modelRoot\").blasts.add(this);\n    }\n\n    move() {\n        // move for 1.5 second before disappearing\n        if (++this.t < 30) {\n            this.x += this.dx;\n            this.y += this.dy;\n            if (this.x < 0) this.x += 1000;\n            if (this.x > 1000) this.x -= 1000;\n            if (this.y < 0) this.y += 1000;\n            if (this.y > 1000) this.y -= 1000;\n        } else {\n            this.destroy();\n        }\n    }\n\n    destroy() {\n        this.wellKnownModel(\"modelRoot\").blasts.delete(this);\n        super.destroy();\n    }\n}\nBlast.register(\"Blast\");\n\n\n/////////// Code below is executed outside of synced VM /////////// \n\n\nclass Display extends Croquet.View {\n    constructor(model) {\n        super(model);\n        this.model = model;\n\n        const joystick = document.getElementById(\"joystick\");\n        const knob = document.getElementById(\"knob\");\n\n        document.onkeydown = (e) => {\n            joystick.style.display = \"none\";\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", true); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", true); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", true); break;\n                case \" \":                              this.publish(this.viewId, \"fire-blaster\"); break;\n            }\n        };\n        document.onkeyup = (e) => {\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", false); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", false); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", false); break;\n            }\n        };\n\n        let x = 0, y = 0, id = 0, right = false, left = false, forward = false;\n        document.onpointerdown = (e) => {\n            if (!id) {\n                id = e.pointerId;\n                x = e.clientX;\n                y = e.clientY;\n                joystick.style.left = `${x - 60}px`;\n                joystick.style.top = `${y - 60}px`;\n                joystick.style.display = \"block\";\n            }\n        };\n        document.onpointermove = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (dx > 30) {\n                    dx = 30;\n                    if (!right) { this.publish(this.viewId, \"right-thruster\", true); right = true; }\n                } else if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (dx < -30) {\n                    dx = -30;\n                    if (!left) { this.publish(this.viewId, \"left-thruster\", true); left = true; }\n                } else if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false; }\n                if (dy < -30) {\n                    dy = -30;\n                    if (!forward) { this.publish(this.viewId, \"forward-thruster\", true); forward = true; }\n                } else if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                if (dy > 0) dy = 0;\n                knob.style.left = `${20 + dx}px`;\n                knob.style.top = `${20 + dy}px`;\n            }\n        }\n        document.onpointerup = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                id = 0;\n                if (!right && !left && !forward) {\n                    this.publish(this.viewId, \"fire-blaster\");\n                }\n                if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false;  }\n                if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                knob.style.left = `20px`;\n                knob.style.top = `20px`;\n            } else {\n                this.publish(this.viewId, \"fire-blaster\");\n            }\n        }\n        document.onpointercancel = document.onpointerup;\n        document.oncontextmenu = e => { e.preventDefault();  this.publish(this.viewId, \"fire-blaster\"); }\n        document.ontouchend = e => e.preventDefault(); // prevent double-tap zoom on iOS\n        codelink.ontouchend = () => codelink.click(); // but allow clicking link Â¯\\_(ãƒ„)_/Â¯\n\n        this.smoothing = new WeakMap(); // position cache for interpolated rendering\n\n        this.context = canvas.getContext(\"2d\");\n    }\n\n    // update is called once per render frame\n    // read from shared model, interpolate, render\n    update() {\n        this.context.clearRect(0, 0, 1000, 1000);\n        this.context.font = '40px sans-serif';\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"white\";\n        for (const ship of this.model.ships.values()) {\n            const { x, y, a } = this.smoothPosAndAngle(ship);\n            this.context.save();\n            this.context.translate(x, y);\n            if (ship.score) this.context.fillText(ship.score, 30, 15);\n            this.context.rotate(a);\n            if (ship.wasHit) this.drawShipDebris(ship.wasHit);\n            else this.drawShip(ship.forward, ship.viewId === this.viewId);\n            this.context.restore();\n        }\n        for (const asteroid of this.model.asteroids) {\n            const { x, y, a } = this.smoothPosAndAngle(asteroid);\n            this.context.save();\n            this.context.translate(x, y);\n            this.context.rotate(a);\n            if (asteroid.wasHit) this.drawAsteroidDebris(asteroid.size, asteroid.wasHit * 2);\n            else this.drawAsteroid(asteroid.size);\n            this.context.restore();\n        }\n        for (const blast of this.model.blasts) {\n            const { x, y } = this.smoothPos(blast);\n            this.context.save();\n            this.context.translate(x, y);\n            this.drawBlast();\n            this.context.restore();\n        }\n    }\n\n    smoothPos(obj) {\n        if (!this.smoothing.has(obj)) {\n            this.smoothing.set(obj, { x: obj.x, y: obj.y, a: obj.a });\n        }\n        const smoothed = this.smoothing.get(obj);\n        const dx = obj.x - smoothed.x;\n        const dy = obj.y - smoothed.y;\n        if (Math.abs(dx) < 50) smoothed.x += dx * 0.3; else smoothed.x = obj.x;\n        if (Math.abs(dy) < 50) smoothed.y += dy * 0.3; else smoothed.y = obj.y;\n        return smoothed;\n    }\n\n    smoothPosAndAngle(obj) {\n        const smoothed = this.smoothPos(obj);\n        const da = obj.a - smoothed.a;\n        if (Math.abs(da) < 1) smoothed.a += da * 0.3; else smoothed.a = obj.a;\n        return smoothed;\n    }\n\n    drawShip(thrust, highlight) {\n        this.context.beginPath();\n        this.context.moveTo(+20,   0);\n        this.context.lineTo(-20, +10);\n        this.context.lineTo(-20, -10);\n        this.context.closePath();\n        this.context.stroke();\n        if (highlight) {\n            this.context.fill();\n        }\n        if (thrust) {\n            this.context.beginPath();\n            this.context.moveTo(-20, +5);\n            this.context.lineTo(-30,  0);\n            this.context.lineTo(-20, -5);\n            this.context.stroke();\n        }\n    }\n\n    drawShipDebris(t) {\n        this.context.beginPath();\n        this.context.moveTo(+20 + t,   0 + t);\n        this.context.lineTo(-20 + t, +10 + t);\n        this.context.moveTo(-20 - t * 1.4, +10);\n        this.context.lineTo(-20 - t * 1.4, -10);\n        this.context.moveTo(-20 + t, -10 - t);\n        this.context.lineTo(+20 + t,   0 - t);\n        this.context.stroke();\n    }\n\n    drawAsteroid(size) {\n        this.context.beginPath();\n        this.context.moveTo(+size,  0);\n        this.context.lineTo( 0, +size);\n        this.context.lineTo(-size,  0);\n        this.context.lineTo( 0, -size);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    drawAsteroidDebris(size, t) {\n        this.context.beginPath();\n        this.context.moveTo(+size + t,  0 + t);\n        this.context.lineTo( 0 + t, +size + t);\n        this.context.moveTo(-size - t,  0 - t);\n        this.context.lineTo( 0 - t, -size - t);\n        this.context.moveTo(-size - t,  0 + t);\n        this.context.lineTo( 0 - t, +size + t);\n        this.context.moveTo(+size + t,  0 - t);\n        this.context.lineTo( 0 + t, -size - t);\n        this.context.stroke();\n    }\n\n    drawBlast() {\n        this.context.beginPath();\n        this.context.ellipse(0, 0, 2, 2, 0, 0, 2 * Math.PI);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}\n\nCroquet.App.makeWidgetDock(); // shows QR code\n\nCroquet.Session.join({\n    apiKey: '1_i65fcn11n7lhrb5n890hs3dhj11hfzfej57pvlrx', // get your own from croquet.io/keys\n    appId: 'io.croquet.multiblaster',\n    name: Croquet.App.autoSession(),\n    password: Croquet.App.autoPassword(),\n    model: Game,\n    view: Display,\n});\n        </script>\n    </body>\n</html>\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Multiblaster",
        "story": []
      },
      "date": 1654169686334
    },
    {
      "item": {
        "type": "factory",
        "id": "a54b67dad71986b2"
      },
      "id": "a54b67dad71986b2",
      "type": "add",
      "date": 1654169696820
    },
    {
      "type": "edit",
      "id": "a54b67dad71986b2",
      "item": {
        "type": "paragraph",
        "id": "a54b67dad71986b2",
        "text": "â€“ [https://croquet.io/multiblaster]"
      },
      "date": 1654169705209
    },
    {
      "type": "edit",
      "id": "a54b67dad71986b2",
      "item": {
        "type": "paragraph",
        "id": "a54b67dad71986b2",
        "text": "â€“ [https://croquet.io/multiblaster croquet.io]"
      },
      "date": 1654169716419
    },
    {
      "type": "fork",
      "date": 1654170064060
    },
    {
      "item": {
        "type": "factory",
        "id": "af73f1ef127f4723"
      },
      "id": "af73f1ef127f4723",
      "type": "add",
      "after": "a54b67dad71986b2",
      "date": 1654170094885
    },
    {
      "type": "edit",
      "id": "af73f1ef127f4723",
      "item": {
        "type": "html",
        "id": "af73f1ef127f4723",
        "text": "\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n        <title>Croquet Multiblaster</title>\n        <style>\n            html, body {\n                margin: 0;\n                height: 100%;\n                overflow: hidden;\n                touch-action: none;\n                background: #999;\n                -webkit-touch-callout: none;\n                -webkit-user-select: none;\n                user-select: none;\n                touch-action: none;\n            }\n            #canvas {\n                background: #000;\n                object-fit: contain;\n                max-width: 100%;\n                max-height: 100%;\n            }\n            #joystick {\n                position: absolute;\n                right: 50px;\n                bottom: 50px;\n                width: 120px;\n                height: 120px;\n                border: 3px solid #FFF;\n                border-radius: 60px;\n                opacity: 0.5;\n            }\n            #knob {\n                position: absolute;\n                left: 20px;\n                top: 20px;\n                width: 80px;\n                height: 80px;\n                border-radius: 40px;\n                background-color: #FFF;\n            }\n            #codelink {\n                position: fixed; bottom: 10px; right: 10px; padding: .5em; border-radius: 30px;\n                opacity: 50%; background: lightgray; box-shadow: 1px 1px 5px black;\n                text-decoration: none; font-family: monospace; font-size: 1.5em;\n            }\n            #codelink:hover {\n                opacity: 100%;\n            }\n        </style>\n        <script src=\"https://unpkg.com/@croquet/croquet@1.0\"></script>\n    </head>\n    <body>\n        <canvas id=\"canvas\" width=\"1000\" height=\"1000\"></canvas>\n        <div id=\"joystick\"><div id=\"knob\"></div></div>\n        <a id=\"codelink\" href=\"https://github.com/croquet/multiblaster/blob/main/index.html\"\n            title=\"View source code on GitHub\" target=\"_blank\">{}</a>\n        <script>\n/////////// Model code is executed inside of synced VM /////////// \n\nclass Game extends Croquet.Model {\n    init() {\n        this.ships = new Map();\n        this.asteroids = new Set();\n        this.blasts = new Set();\n        this.subscribe(this.sessionId, \"view-join\", this.viewJoined);\n        this.subscribe(this.sessionId, \"view-exit\", this.viewExited);\n        Asteroid.create({});\n        this.mainLoop();\n    }\n\n    viewJoined(viewId) {\n        const ship = Ship.create({ viewId });\n        this.ships.set(viewId, ship);\n    }\n\n    viewExited(viewId) {\n        const ship = this.ships.get(viewId);\n        this.ships.delete(viewId);\n        ship.destroy();\n    }\n\n    checkCollisions() {\n        for (const asteroid of this.asteroids) {\n            if (asteroid.wasHit) continue;\n            const minx = asteroid.x - asteroid.size;\n            const maxx = asteroid.x + asteroid.size;\n            const miny = asteroid.y - asteroid.size;\n            const maxy = asteroid.y + asteroid.size;\n            for (const blast of this.blasts) {\n                if (blast.x > minx && blast.x < maxx && blast.y > miny && blast.y < maxy) {\n                    asteroid.hitBy(blast);\n                    break;\n                }\n            }\n            for (const ship of this.ships.values()) {\n                if (!ship.wasHit && ship.x + 10 > minx && ship.x - 10 < maxx && ship.y + 10 > miny && ship.y - 10 < maxy) {\n                    if (!ship.score && Math.abs(ship.x-500) + Math.abs(ship.y-500) < 40) continue; // no hit if just spawned\n                    ship.hitBy(asteroid);\n                    break;\n                }\n            }\n        }\n    }\n\n    mainLoop() {\n        for (const ship of this.ships.values()) ship.move();\n        for (const asteroid of this.asteroids) asteroid.move();\n        for (const blast of this.blasts) blast.move();\n        this.checkCollisions();\n        this.future(50).mainLoop(); // move & check every 50 ms\n    }\n}\nGame.register(\"Game\");\n\nclass Ship extends Croquet.Model {\n    init({ viewId }) {\n        this.viewId = viewId;\n        this.reset();\n        this.subscribe(viewId, \"left-thruster\", this.leftThruster);\n        this.subscribe(viewId, \"right-thruster\", this.rightThruster);\n        this.subscribe(viewId, \"forward-thruster\", this.forwardThruster);\n        this.subscribe(viewId, \"fire-blaster\", this.fireBlaster);\n    }\n\n    reset() {\n        this.x = 500;\n        this.y = 500;\n        this.a = -Math.PI / 2;\n        this.dx = 0;\n        this.dy = 0;\n        this.left = false;\n        this.right = false;\n        this.forward = false;\n        this.score = 0;\n        this.wasHit = 0;\n    }\n\n    leftThruster(active) {\n        if (this.wasHit) return;\n        this.left = active;\n    }\n\n    rightThruster(active) {\n        if (this.wasHit) return;\n        this.right = active;\n    }\n\n    forwardThruster(active) {\n        if (this.wasHit) return;\n        this.forward = active;\n    }\n\n    fireBlaster() {\n        if (this.wasHit) return;\n        const dx = Math.cos(this.a) * 20;\n        const dy = Math.sin(this.a) * 20;\n        const x = this.x + dx;\n        const y = this.y + dy;\n        Blast.create({ x, y, dx, dy, ship: this });\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris for 3 seconds\n            if (++this.wasHit > 60) this.reset();\n        } else {\n            // process thruster controls\n            if (this.forward) {\n                this.dx += Math.cos(this.a) * 0.5;\n                this.dy += Math.sin(this.a) * 0.5;\n                if (this.dx > 10) this.dx = 10;\n                if (this.dx < -10) this.dx = -10;\n                if (this.dy > 10) this.dy = 10;\n                if (this.dy < -10) this.dy = -10;\n            }\n            if (this.left) this.a -= 0.2;\n            if (this.right) this.a += 0.2;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n        // drift through space\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n    }\n\n    hitBy(asteroid) {\n        // turn both into debris\n        this.wasHit = 1;\n        asteroid.wasHit = 1;\n    }\n}\nShip.register(\"Ship\");\n\nclass Asteroid extends Croquet.Model {\n    init({ size, x, y, a, dx, dy, da }) {\n        if (size) {\n            // init second asteroid after spliting\n            this.size = size;\n            this.x = x;\n            this.y = y;\n            this.a = a;\n            this.dx = dx;\n            this.dy = dy;\n            this.da = da;\n        } else {\n            // init new large asteroid\n            this.size = 40;\n            this.x = Math.random() * 400 - 200;\n            this.y = Math.random() * 400 - 200;\n            this.a = Math.random() * Math.PI * 2;\n            const speed = Math.random() * 4 + 1;\n            this.dx = Math.cos(this.a) * speed;\n            this.dy = Math.sin(this.a) * speed;\n            this.da = (0.02 + Math.random() * 0.03) * (Math.random() < 0.5 ? 1 : -1);\n            this.wasHit = 0;\n            this.move();\n        }\n        this.wellKnownModel(\"modelRoot\").asteroids.add(this);\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris, larger pieces drift longer\n            if (++this.wasHit > this.size) this.destroy();\n        }\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n        if (!this.wasHit) {\n            this.a += this.da;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n    }\n\n    hitBy(blast) {\n        if (!blast.ship.wasHit) blast.ship.score++;\n        if (this.size > 20) {\n            // split into two smaller faster asteroids\n            this.size *= 0.7;\n            this.da *= 1.5;\n            this.dx = -blast.dy * 10 / this.size;\n            this.dy = blast.dx * 10 / this.size;\n            Asteroid.create({ size: this.size, x: this.x, y: this.y, a: this.a, dx: -this.dx, dy: -this.dy, da: this.da });\n        } else {\n            // turn into debris\n            this.wasHit = 1;\n        }\n        blast.destroy();\n    }\n\n    destroy() {\n        const asteroids = this.wellKnownModel(\"modelRoot\").asteroids;\n        asteroids.delete(this);\n        super.destroy();\n        // keep at least 5 asteroids around\n        if (asteroids.size < 5) Asteroid.create({});\n    }\n}\nAsteroid.register(\"Asteroid\");\n\nclass Blast extends Croquet.Model {\n    init({x, y, dx, dy, ship}) {\n        this.ship = ship;\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.t = 0;\n        this.wellKnownModel(\"modelRoot\").blasts.add(this);\n    }\n\n    move() {\n        // move for 1.5 second before disappearing\n        if (++this.t < 30) {\n            this.x += this.dx;\n            this.y += this.dy;\n            if (this.x < 0) this.x += 1000;\n            if (this.x > 1000) this.x -= 1000;\n            if (this.y < 0) this.y += 1000;\n            if (this.y > 1000) this.y -= 1000;\n        } else {\n            this.destroy();\n        }\n    }\n\n    destroy() {\n        this.wellKnownModel(\"modelRoot\").blasts.delete(this);\n        super.destroy();\n    }\n}\nBlast.register(\"Blast\");\n\n\n/////////// Code below is executed outside of synced VM /////////// \n\n\nclass Display extends Croquet.View {\n    constructor(model) {\n        super(model);\n        this.model = model;\n\n        const joystick = document.getElementById(\"joystick\");\n        const knob = document.getElementById(\"knob\");\n\n        document.onkeydown = (e) => {\n            joystick.style.display = \"none\";\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", true); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", true); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", true); break;\n                case \" \":                              this.publish(this.viewId, \"fire-blaster\"); break;\n            }\n        };\n        document.onkeyup = (e) => {\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", false); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", false); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", false); break;\n            }\n        };\n\n        let x = 0, y = 0, id = 0, right = false, left = false, forward = false;\n        document.onpointerdown = (e) => {\n            if (!id) {\n                id = e.pointerId;\n                x = e.clientX;\n                y = e.clientY;\n                joystick.style.left = `${x - 60}px`;\n                joystick.style.top = `${y - 60}px`;\n                joystick.style.display = \"block\";\n            }\n        };\n        document.onpointermove = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (dx > 30) {\n                    dx = 30;\n                    if (!right) { this.publish(this.viewId, \"right-thruster\", true); right = true; }\n                } else if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (dx < -30) {\n                    dx = -30;\n                    if (!left) { this.publish(this.viewId, \"left-thruster\", true); left = true; }\n                } else if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false; }\n                if (dy < -30) {\n                    dy = -30;\n                    if (!forward) { this.publish(this.viewId, \"forward-thruster\", true); forward = true; }\n                } else if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                if (dy > 0) dy = 0;\n                knob.style.left = `${20 + dx}px`;\n                knob.style.top = `${20 + dy}px`;\n            }\n        }\n        document.onpointerup = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                id = 0;\n                if (!right && !left && !forward) {\n                    this.publish(this.viewId, \"fire-blaster\");\n                }\n                if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false;  }\n                if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                knob.style.left = `20px`;\n                knob.style.top = `20px`;\n            } else {\n                this.publish(this.viewId, \"fire-blaster\");\n            }\n        }\n        document.onpointercancel = document.onpointerup;\n        document.oncontextmenu = e => { e.preventDefault();  this.publish(this.viewId, \"fire-blaster\"); }\n        document.ontouchend = e => e.preventDefault(); // prevent double-tap zoom on iOS\n        codelink.ontouchend = () => codelink.click(); // but allow clicking link Â¯\\_(ãƒ„)_/Â¯\n\n        this.smoothing = new WeakMap(); // position cache for interpolated rendering\n\n        this.context = canvas.getContext(\"2d\");\n    }\n\n    // update is called once per render frame\n    // read from shared model, interpolate, render\n    update() {\n        this.context.clearRect(0, 0, 1000, 1000);\n        this.context.font = '40px sans-serif';\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"white\";\n        for (const ship of this.model.ships.values()) {\n            const { x, y, a } = this.smoothPosAndAngle(ship);\n            this.context.save();\n            this.context.translate(x, y);\n            if (ship.score) this.context.fillText(ship.score, 30, 15);\n            this.context.rotate(a);\n            if (ship.wasHit) this.drawShipDebris(ship.wasHit);\n            else this.drawShip(ship.forward, ship.viewId === this.viewId);\n            this.context.restore();\n        }\n        for (const asteroid of this.model.asteroids) {\n            const { x, y, a } = this.smoothPosAndAngle(asteroid);\n            this.context.save();\n            this.context.translate(x, y);\n            this.context.rotate(a);\n            if (asteroid.wasHit) this.drawAsteroidDebris(asteroid.size, asteroid.wasHit * 2);\n            else this.drawAsteroid(asteroid.size);\n            this.context.restore();\n        }\n        for (const blast of this.model.blasts) {\n            const { x, y } = this.smoothPos(blast);\n            this.context.save();\n            this.context.translate(x, y);\n            this.drawBlast();\n            this.context.restore();\n        }\n    }\n\n    smoothPos(obj) {\n        if (!this.smoothing.has(obj)) {\n            this.smoothing.set(obj, { x: obj.x, y: obj.y, a: obj.a });\n        }\n        const smoothed = this.smoothing.get(obj);\n        const dx = obj.x - smoothed.x;\n        const dy = obj.y - smoothed.y;\n        if (Math.abs(dx) < 50) smoothed.x += dx * 0.3; else smoothed.x = obj.x;\n        if (Math.abs(dy) < 50) smoothed.y += dy * 0.3; else smoothed.y = obj.y;\n        return smoothed;\n    }\n\n    smoothPosAndAngle(obj) {\n        const smoothed = this.smoothPos(obj);\n        const da = obj.a - smoothed.a;\n        if (Math.abs(da) < 1) smoothed.a += da * 0.3; else smoothed.a = obj.a;\n        return smoothed;\n    }\n\n    drawShip(thrust, highlight) {\n        this.context.beginPath();\n        this.context.moveTo(+20,   0);\n        this.context.lineTo(-20, +10);\n        this.context.lineTo(-20, -10);\n        this.context.closePath();\n        this.context.stroke();\n        if (highlight) {\n            this.context.fill();\n        }\n        if (thrust) {\n            this.context.beginPath();\n            this.context.moveTo(-20, +5);\n            this.context.lineTo(-30,  0);\n            this.context.lineTo(-20, -5);\n            this.context.stroke();\n        }\n    }\n\n    drawShipDebris(t) {\n        this.context.beginPath();\n        this.context.moveTo(+20 + t,   0 + t);\n        this.context.lineTo(-20 + t, +10 + t);\n        this.context.moveTo(-20 - t * 1.4, +10);\n        this.context.lineTo(-20 - t * 1.4, -10);\n        this.context.moveTo(-20 + t, -10 - t);\n        this.context.lineTo(+20 + t,   0 - t);\n        this.context.stroke();\n    }\n\n    drawAsteroid(size) {\n        this.context.beginPath();\n        this.context.moveTo(+size,  0);\n        this.context.lineTo( 0, +size);\n        this.context.lineTo(-size,  0);\n        this.context.lineTo( 0, -size);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    drawAsteroidDebris(size, t) {\n        this.context.beginPath();\n        this.context.moveTo(+size + t,  0 + t);\n        this.context.lineTo( 0 + t, +size + t);\n        this.context.moveTo(-size - t,  0 - t);\n        this.context.lineTo( 0 - t, -size - t);\n        this.context.moveTo(-size - t,  0 + t);\n        this.context.lineTo( 0 - t, +size + t);\n        this.context.moveTo(+size + t,  0 - t);\n        this.context.lineTo( 0 + t, -size - t);\n        this.context.stroke();\n    }\n\n    drawBlast() {\n        this.context.beginPath();\n        this.context.ellipse(0, 0, 2, 2, 0, 0, 2 * Math.PI);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}\n\nCroquet.App.makeWidgetDock(); // shows QR code\n\nCroquet.Session.join({\n    apiKey: '1_i65fcn11n7lhrb5n890hs3dhj11hfzfej57pvlrx', // get your own from croquet.io/keys\n    appId: 'io.croquet.multiblaster',\n    name: Croquet.App.autoSession(),\n    password: Croquet.App.autoPassword(),\n    model: Game,\n    view: Display,\n});\n        </script>\n    </body>\n</html>\n"
      },
      "date": 1654170097768
    },
    {
      "item": {
        "type": "factory",
        "id": "797b37ba550e393f"
      },
      "id": "797b37ba550e393f",
      "type": "add",
      "after": "af73f1ef127f4723",
      "date": 1654170114864
    },
    {
      "type": "edit",
      "id": "af73f1ef127f4723",
      "item": {
        "type": "html",
        "id": "af73f1ef127f4723",
        "text": "<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n        <title>Croquet Multiblaster</title>\n        <style>\n            html, body {\n                margin: 0;\n                height: 100%;\n                overflow: hidden;\n                touch-action: none;\n                background: #999;\n                -webkit-touch-callout: none;\n                -webkit-user-select: none;\n                user-select: none;\n                touch-action: none;\n            }\n            #canvas {\n                background: #000;\n                object-fit: contain;\n                max-width: 100%;\n                max-height: 100%;\n            }\n            #joystick {\n                position: absolute;\n                right: 50px;\n                bottom: 50px;\n                width: 120px;\n                height: 120px;\n                border: 3px solid #FFF;\n                border-radius: 60px;\n                opacity: 0.5;\n            }\n            #knob {\n                position: absolute;\n                left: 20px;\n                top: 20px;\n                width: 80px;\n                height: 80px;\n                border-radius: 40px;\n                background-color: #FFF;\n            }\n            #codelink {\n                position: fixed; bottom: 10px; right: 10px; padding: .5em; border-radius: 30px;\n                opacity: 50%; background: lightgray; box-shadow: 1px 1px 5px black;\n                text-decoration: none; font-family: monospace; font-size: 1.5em;\n            }\n            #codelink:hover {\n                opacity: 100%;\n            }\n        </style>\n        <script src=\"https://unpkg.com/@croquet/croquet@1.0\"></script>\n    </head>\n    <body>\n        <canvas id=\"canvas\" width=\"1000\" height=\"1000\"></canvas>\n        <div id=\"joystick\"><div id=\"knob\"></div></div>\n        <a id=\"codelink\" href=\"https://github.com/croquet/multiblaster/blob/main/index.html\"\n            title=\"View source code on GitHub\" target=\"_blank\">{}</a>\n        <script>\n/////////// Model code is executed inside of synced VM /////////// \n\nclass Game extends Croquet.Model {\n    init() {\n        this.ships = new Map();\n        this.asteroids = new Set();\n        this.blasts = new Set();\n        this.subscribe(this.sessionId, \"view-join\", this.viewJoined);\n        this.subscribe(this.sessionId, \"view-exit\", this.viewExited);\n        Asteroid.create({});\n        this.mainLoop();\n    }\n\n    viewJoined(viewId) {\n        const ship = Ship.create({ viewId });\n        this.ships.set(viewId, ship);\n    }\n\n    viewExited(viewId) {\n        const ship = this.ships.get(viewId);\n        this.ships.delete(viewId);\n        ship.destroy();\n    }\n\n    checkCollisions() {\n        for (const asteroid of this.asteroids) {\n            if (asteroid.wasHit) continue;\n            const minx = asteroid.x - asteroid.size;\n            const maxx = asteroid.x + asteroid.size;\n            const miny = asteroid.y - asteroid.size;\n            const maxy = asteroid.y + asteroid.size;\n            for (const blast of this.blasts) {\n                if (blast.x > minx && blast.x < maxx && blast.y > miny && blast.y < maxy) {\n                    asteroid.hitBy(blast);\n                    break;\n                }\n            }\n            for (const ship of this.ships.values()) {\n                if (!ship.wasHit && ship.x + 10 > minx && ship.x - 10 < maxx && ship.y + 10 > miny && ship.y - 10 < maxy) {\n                    if (!ship.score && Math.abs(ship.x-500) + Math.abs(ship.y-500) < 40) continue; // no hit if just spawned\n                    ship.hitBy(asteroid);\n                    break;\n                }\n            }\n        }\n    }\n\n    mainLoop() {\n        for (const ship of this.ships.values()) ship.move();\n        for (const asteroid of this.asteroids) asteroid.move();\n        for (const blast of this.blasts) blast.move();\n        this.checkCollisions();\n        this.future(50).mainLoop(); // move & check every 50 ms\n    }\n}\nGame.register(\"Game\");\n\nclass Ship extends Croquet.Model {\n    init({ viewId }) {\n        this.viewId = viewId;\n        this.reset();\n        this.subscribe(viewId, \"left-thruster\", this.leftThruster);\n        this.subscribe(viewId, \"right-thruster\", this.rightThruster);\n        this.subscribe(viewId, \"forward-thruster\", this.forwardThruster);\n        this.subscribe(viewId, \"fire-blaster\", this.fireBlaster);\n    }\n\n    reset() {\n        this.x = 500;\n        this.y = 500;\n        this.a = -Math.PI / 2;\n        this.dx = 0;\n        this.dy = 0;\n        this.left = false;\n        this.right = false;\n        this.forward = false;\n        this.score = 0;\n        this.wasHit = 0;\n    }\n\n    leftThruster(active) {\n        if (this.wasHit) return;\n        this.left = active;\n    }\n\n    rightThruster(active) {\n        if (this.wasHit) return;\n        this.right = active;\n    }\n\n    forwardThruster(active) {\n        if (this.wasHit) return;\n        this.forward = active;\n    }\n\n    fireBlaster() {\n        if (this.wasHit) return;\n        const dx = Math.cos(this.a) * 20;\n        const dy = Math.sin(this.a) * 20;\n        const x = this.x + dx;\n        const y = this.y + dy;\n        Blast.create({ x, y, dx, dy, ship: this });\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris for 3 seconds\n            if (++this.wasHit > 60) this.reset();\n        } else {\n            // process thruster controls\n            if (this.forward) {\n                this.dx += Math.cos(this.a) * 0.5;\n                this.dy += Math.sin(this.a) * 0.5;\n                if (this.dx > 10) this.dx = 10;\n                if (this.dx < -10) this.dx = -10;\n                if (this.dy > 10) this.dy = 10;\n                if (this.dy < -10) this.dy = -10;\n            }\n            if (this.left) this.a -= 0.2;\n            if (this.right) this.a += 0.2;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n        // drift through space\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n    }\n\n    hitBy(asteroid) {\n        // turn both into debris\n        this.wasHit = 1;\n        asteroid.wasHit = 1;\n    }\n}\nShip.register(\"Ship\");\n\nclass Asteroid extends Croquet.Model {\n    init({ size, x, y, a, dx, dy, da }) {\n        if (size) {\n            // init second asteroid after spliting\n            this.size = size;\n            this.x = x;\n            this.y = y;\n            this.a = a;\n            this.dx = dx;\n            this.dy = dy;\n            this.da = da;\n        } else {\n            // init new large asteroid\n            this.size = 40;\n            this.x = Math.random() * 400 - 200;\n            this.y = Math.random() * 400 - 200;\n            this.a = Math.random() * Math.PI * 2;\n            const speed = Math.random() * 4 + 1;\n            this.dx = Math.cos(this.a) * speed;\n            this.dy = Math.sin(this.a) * speed;\n            this.da = (0.02 + Math.random() * 0.03) * (Math.random() < 0.5 ? 1 : -1);\n            this.wasHit = 0;\n            this.move();\n        }\n        this.wellKnownModel(\"modelRoot\").asteroids.add(this);\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris, larger pieces drift longer\n            if (++this.wasHit > this.size) this.destroy();\n        }\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n        if (!this.wasHit) {\n            this.a += this.da;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n    }\n\n    hitBy(blast) {\n        if (!blast.ship.wasHit) blast.ship.score++;\n        if (this.size > 20) {\n            // split into two smaller faster asteroids\n            this.size *= 0.7;\n            this.da *= 1.5;\n            this.dx = -blast.dy * 10 / this.size;\n            this.dy = blast.dx * 10 / this.size;\n            Asteroid.create({ size: this.size, x: this.x, y: this.y, a: this.a, dx: -this.dx, dy: -this.dy, da: this.da });\n        } else {\n            // turn into debris\n            this.wasHit = 1;\n        }\n        blast.destroy();\n    }\n\n    destroy() {\n        const asteroids = this.wellKnownModel(\"modelRoot\").asteroids;\n        asteroids.delete(this);\n        super.destroy();\n        // keep at least 5 asteroids around\n        if (asteroids.size < 5) Asteroid.create({});\n    }\n}\nAsteroid.register(\"Asteroid\");\n\nclass Blast extends Croquet.Model {\n    init({x, y, dx, dy, ship}) {\n        this.ship = ship;\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.t = 0;\n        this.wellKnownModel(\"modelRoot\").blasts.add(this);\n    }\n\n    move() {\n        // move for 1.5 second before disappearing\n        if (++this.t < 30) {\n            this.x += this.dx;\n            this.y += this.dy;\n            if (this.x < 0) this.x += 1000;\n            if (this.x > 1000) this.x -= 1000;\n            if (this.y < 0) this.y += 1000;\n            if (this.y > 1000) this.y -= 1000;\n        } else {\n            this.destroy();\n        }\n    }\n\n    destroy() {\n        this.wellKnownModel(\"modelRoot\").blasts.delete(this);\n        super.destroy();\n    }\n}\nBlast.register(\"Blast\");\n\n\n/////////// Code below is executed outside of synced VM /////////// \n\n\nclass Display extends Croquet.View {\n    constructor(model) {\n        super(model);\n        this.model = model;\n\n        const joystick = document.getElementById(\"joystick\");\n        const knob = document.getElementById(\"knob\");\n\n        document.onkeydown = (e) => {\n            joystick.style.display = \"none\";\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", true); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", true); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", true); break;\n                case \" \":                              this.publish(this.viewId, \"fire-blaster\"); break;\n            }\n        };\n        document.onkeyup = (e) => {\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", false); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", false); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", false); break;\n            }\n        };\n\n        let x = 0, y = 0, id = 0, right = false, left = false, forward = false;\n        document.onpointerdown = (e) => {\n            if (!id) {\n                id = e.pointerId;\n                x = e.clientX;\n                y = e.clientY;\n                joystick.style.left = `${x - 60}px`;\n                joystick.style.top = `${y - 60}px`;\n                joystick.style.display = \"block\";\n            }\n        };\n        document.onpointermove = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (dx > 30) {\n                    dx = 30;\n                    if (!right) { this.publish(this.viewId, \"right-thruster\", true); right = true; }\n                } else if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (dx < -30) {\n                    dx = -30;\n                    if (!left) { this.publish(this.viewId, \"left-thruster\", true); left = true; }\n                } else if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false; }\n                if (dy < -30) {\n                    dy = -30;\n                    if (!forward) { this.publish(this.viewId, \"forward-thruster\", true); forward = true; }\n                } else if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                if (dy > 0) dy = 0;\n                knob.style.left = `${20 + dx}px`;\n                knob.style.top = `${20 + dy}px`;\n            }\n        }\n        document.onpointerup = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                id = 0;\n                if (!right && !left && !forward) {\n                    this.publish(this.viewId, \"fire-blaster\");\n                }\n                if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false;  }\n                if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                knob.style.left = `20px`;\n                knob.style.top = `20px`;\n            } else {\n                this.publish(this.viewId, \"fire-blaster\");\n            }\n        }\n        document.onpointercancel = document.onpointerup;\n        document.oncontextmenu = e => { e.preventDefault();  this.publish(this.viewId, \"fire-blaster\"); }\n        document.ontouchend = e => e.preventDefault(); // prevent double-tap zoom on iOS\n        codelink.ontouchend = () => codelink.click(); // but allow clicking link Â¯\\_(ãƒ„)_/Â¯\n\n        this.smoothing = new WeakMap(); // position cache for interpolated rendering\n\n        this.context = canvas.getContext(\"2d\");\n    }\n\n    // update is called once per render frame\n    // read from shared model, interpolate, render\n    update() {\n        this.context.clearRect(0, 0, 1000, 1000);\n        this.context.font = '40px sans-serif';\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"white\";\n        for (const ship of this.model.ships.values()) {\n            const { x, y, a } = this.smoothPosAndAngle(ship);\n            this.context.save();\n            this.context.translate(x, y);\n            if (ship.score) this.context.fillText(ship.score, 30, 15);\n            this.context.rotate(a);\n            if (ship.wasHit) this.drawShipDebris(ship.wasHit);\n            else this.drawShip(ship.forward, ship.viewId === this.viewId);\n            this.context.restore();\n        }\n        for (const asteroid of this.model.asteroids) {\n            const { x, y, a } = this.smoothPosAndAngle(asteroid);\n            this.context.save();\n            this.context.translate(x, y);\n            this.context.rotate(a);\n            if (asteroid.wasHit) this.drawAsteroidDebris(asteroid.size, asteroid.wasHit * 2);\n            else this.drawAsteroid(asteroid.size);\n            this.context.restore();\n        }\n        for (const blast of this.model.blasts) {\n            const { x, y } = this.smoothPos(blast);\n            this.context.save();\n            this.context.translate(x, y);\n            this.drawBlast();\n            this.context.restore();\n        }\n    }\n\n    smoothPos(obj) {\n        if (!this.smoothing.has(obj)) {\n            this.smoothing.set(obj, { x: obj.x, y: obj.y, a: obj.a });\n        }\n        const smoothed = this.smoothing.get(obj);\n        const dx = obj.x - smoothed.x;\n        const dy = obj.y - smoothed.y;\n        if (Math.abs(dx) < 50) smoothed.x += dx * 0.3; else smoothed.x = obj.x;\n        if (Math.abs(dy) < 50) smoothed.y += dy * 0.3; else smoothed.y = obj.y;\n        return smoothed;\n    }\n\n    smoothPosAndAngle(obj) {\n        const smoothed = this.smoothPos(obj);\n        const da = obj.a - smoothed.a;\n        if (Math.abs(da) < 1) smoothed.a += da * 0.3; else smoothed.a = obj.a;\n        return smoothed;\n    }\n\n    drawShip(thrust, highlight) {\n        this.context.beginPath();\n        this.context.moveTo(+20,   0);\n        this.context.lineTo(-20, +10);\n        this.context.lineTo(-20, -10);\n        this.context.closePath();\n        this.context.stroke();\n        if (highlight) {\n            this.context.fill();\n        }\n        if (thrust) {\n            this.context.beginPath();\n            this.context.moveTo(-20, +5);\n            this.context.lineTo(-30,  0);\n            this.context.lineTo(-20, -5);\n            this.context.stroke();\n        }\n    }\n\n    drawShipDebris(t) {\n        this.context.beginPath();\n        this.context.moveTo(+20 + t,   0 + t);\n        this.context.lineTo(-20 + t, +10 + t);\n        this.context.moveTo(-20 - t * 1.4, +10);\n        this.context.lineTo(-20 - t * 1.4, -10);\n        this.context.moveTo(-20 + t, -10 - t);\n        this.context.lineTo(+20 + t,   0 - t);\n        this.context.stroke();\n    }\n\n    drawAsteroid(size) {\n        this.context.beginPath();\n        this.context.moveTo(+size,  0);\n        this.context.lineTo( 0, +size);\n        this.context.lineTo(-size,  0);\n        this.context.lineTo( 0, -size);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    drawAsteroidDebris(size, t) {\n        this.context.beginPath();\n        this.context.moveTo(+size + t,  0 + t);\n        this.context.lineTo( 0 + t, +size + t);\n        this.context.moveTo(-size - t,  0 - t);\n        this.context.lineTo( 0 - t, -size - t);\n        this.context.moveTo(-size - t,  0 + t);\n        this.context.lineTo( 0 - t, +size + t);\n        this.context.moveTo(+size + t,  0 - t);\n        this.context.lineTo( 0 + t, -size - t);\n        this.context.stroke();\n    }\n\n    drawBlast() {\n        this.context.beginPath();\n        this.context.ellipse(0, 0, 2, 2, 0, 0, 2 * Math.PI);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}\n\nCroquet.App.makeWidgetDock(); // shows QR code\n\nCroquet.Session.join({\n    apiKey: '1_i65fcn11n7lhrb5n890hs3dhj11hfzfej57pvlrx', // get your own from croquet.io/keys\n    appId: 'io.croquet.multiblaster',\n    name: Croquet.App.autoSession(),\n    password: Croquet.App.autoPassword(),\n    model: Game,\n    view: Display,\n});\n        </script>\n    </body>\n</html>\n"
      },
      "date": 1654170116310
    },
    {
      "type": "remove",
      "id": "797b37ba550e393f",
      "date": 1654170118713
    },
    {
      "item": {
        "type": "factory",
        "id": "0c67cd42705c9d6b"
      },
      "id": "0c67cd42705c9d6b",
      "type": "add",
      "after": "af73f1ef127f4723",
      "date": 1654170145433
    },
    {
      "type": "edit",
      "id": "0c67cd42705c9d6b",
      "item": {
        "type": "frame",
        "id": "0c67cd42705c9d6b",
        "text": "\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n        <title>Croquet Multiblaster</title>\n        <style>\n            html, body {\n                margin: 0;\n                height: 100%;\n                overflow: hidden;\n                touch-action: none;\n                background: #999;\n                -webkit-touch-callout: none;\n                -webkit-user-select: none;\n                user-select: none;\n                touch-action: none;\n            }\n            #canvas {\n                background: #000;\n                object-fit: contain;\n                max-width: 100%;\n                max-height: 100%;\n            }\n            #joystick {\n                position: absolute;\n                right: 50px;\n                bottom: 50px;\n                width: 120px;\n                height: 120px;\n                border: 3px solid #FFF;\n                border-radius: 60px;\n                opacity: 0.5;\n            }\n            #knob {\n                position: absolute;\n                left: 20px;\n                top: 20px;\n                width: 80px;\n                height: 80px;\n                border-radius: 40px;\n                background-color: #FFF;\n            }\n            #codelink {\n                position: fixed; bottom: 10px; right: 10px; padding: .5em; border-radius: 30px;\n                opacity: 50%; background: lightgray; box-shadow: 1px 1px 5px black;\n                text-decoration: none; font-family: monospace; font-size: 1.5em;\n            }\n            #codelink:hover {\n                opacity: 100%;\n            }\n        </style>\n        <script src=\"https://unpkg.com/@croquet/croquet@1.0\"></script>\n    </head>\n    <body>\n        <canvas id=\"canvas\" width=\"1000\" height=\"1000\"></canvas>\n        <div id=\"joystick\"><div id=\"knob\"></div></div>\n        <a id=\"codelink\" href=\"https://github.com/croquet/multiblaster/blob/main/index.html\"\n            title=\"View source code on GitHub\" target=\"_blank\">{}</a>\n        <script>\n/////////// Model code is executed inside of synced VM /////////// \n\nclass Game extends Croquet.Model {\n    init() {\n        this.ships = new Map();\n        this.asteroids = new Set();\n        this.blasts = new Set();\n        this.subscribe(this.sessionId, \"view-join\", this.viewJoined);\n        this.subscribe(this.sessionId, \"view-exit\", this.viewExited);\n        Asteroid.create({});\n        this.mainLoop();\n    }\n\n    viewJoined(viewId) {\n        const ship = Ship.create({ viewId });\n        this.ships.set(viewId, ship);\n    }\n\n    viewExited(viewId) {\n        const ship = this.ships.get(viewId);\n        this.ships.delete(viewId);\n        ship.destroy();\n    }\n\n    checkCollisions() {\n        for (const asteroid of this.asteroids) {\n            if (asteroid.wasHit) continue;\n            const minx = asteroid.x - asteroid.size;\n            const maxx = asteroid.x + asteroid.size;\n            const miny = asteroid.y - asteroid.size;\n            const maxy = asteroid.y + asteroid.size;\n            for (const blast of this.blasts) {\n                if (blast.x > minx && blast.x < maxx && blast.y > miny && blast.y < maxy) {\n                    asteroid.hitBy(blast);\n                    break;\n                }\n            }\n            for (const ship of this.ships.values()) {\n                if (!ship.wasHit && ship.x + 10 > minx && ship.x - 10 < maxx && ship.y + 10 > miny && ship.y - 10 < maxy) {\n                    if (!ship.score && Math.abs(ship.x-500) + Math.abs(ship.y-500) < 40) continue; // no hit if just spawned\n                    ship.hitBy(asteroid);\n                    break;\n                }\n            }\n        }\n    }\n\n    mainLoop() {\n        for (const ship of this.ships.values()) ship.move();\n        for (const asteroid of this.asteroids) asteroid.move();\n        for (const blast of this.blasts) blast.move();\n        this.checkCollisions();\n        this.future(50).mainLoop(); // move & check every 50 ms\n    }\n}\nGame.register(\"Game\");\n\nclass Ship extends Croquet.Model {\n    init({ viewId }) {\n        this.viewId = viewId;\n        this.reset();\n        this.subscribe(viewId, \"left-thruster\", this.leftThruster);\n        this.subscribe(viewId, \"right-thruster\", this.rightThruster);\n        this.subscribe(viewId, \"forward-thruster\", this.forwardThruster);\n        this.subscribe(viewId, \"fire-blaster\", this.fireBlaster);\n    }\n\n    reset() {\n        this.x = 500;\n        this.y = 500;\n        this.a = -Math.PI / 2;\n        this.dx = 0;\n        this.dy = 0;\n        this.left = false;\n        this.right = false;\n        this.forward = false;\n        this.score = 0;\n        this.wasHit = 0;\n    }\n\n    leftThruster(active) {\n        if (this.wasHit) return;\n        this.left = active;\n    }\n\n    rightThruster(active) {\n        if (this.wasHit) return;\n        this.right = active;\n    }\n\n    forwardThruster(active) {\n        if (this.wasHit) return;\n        this.forward = active;\n    }\n\n    fireBlaster() {\n        if (this.wasHit) return;\n        const dx = Math.cos(this.a) * 20;\n        const dy = Math.sin(this.a) * 20;\n        const x = this.x + dx;\n        const y = this.y + dy;\n        Blast.create({ x, y, dx, dy, ship: this });\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris for 3 seconds\n            if (++this.wasHit > 60) this.reset();\n        } else {\n            // process thruster controls\n            if (this.forward) {\n                this.dx += Math.cos(this.a) * 0.5;\n                this.dy += Math.sin(this.a) * 0.5;\n                if (this.dx > 10) this.dx = 10;\n                if (this.dx < -10) this.dx = -10;\n                if (this.dy > 10) this.dy = 10;\n                if (this.dy < -10) this.dy = -10;\n            }\n            if (this.left) this.a -= 0.2;\n            if (this.right) this.a += 0.2;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n        // drift through space\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n    }\n\n    hitBy(asteroid) {\n        // turn both into debris\n        this.wasHit = 1;\n        asteroid.wasHit = 1;\n    }\n}\nShip.register(\"Ship\");\n\nclass Asteroid extends Croquet.Model {\n    init({ size, x, y, a, dx, dy, da }) {\n        if (size) {\n            // init second asteroid after spliting\n            this.size = size;\n            this.x = x;\n            this.y = y;\n            this.a = a;\n            this.dx = dx;\n            this.dy = dy;\n            this.da = da;\n        } else {\n            // init new large asteroid\n            this.size = 40;\n            this.x = Math.random() * 400 - 200;\n            this.y = Math.random() * 400 - 200;\n            this.a = Math.random() * Math.PI * 2;\n            const speed = Math.random() * 4 + 1;\n            this.dx = Math.cos(this.a) * speed;\n            this.dy = Math.sin(this.a) * speed;\n            this.da = (0.02 + Math.random() * 0.03) * (Math.random() < 0.5 ? 1 : -1);\n            this.wasHit = 0;\n            this.move();\n        }\n        this.wellKnownModel(\"modelRoot\").asteroids.add(this);\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris, larger pieces drift longer\n            if (++this.wasHit > this.size) this.destroy();\n        }\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n        if (!this.wasHit) {\n            this.a += this.da;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n    }\n\n    hitBy(blast) {\n        if (!blast.ship.wasHit) blast.ship.score++;\n        if (this.size > 20) {\n            // split into two smaller faster asteroids\n            this.size *= 0.7;\n            this.da *= 1.5;\n            this.dx = -blast.dy * 10 / this.size;\n            this.dy = blast.dx * 10 / this.size;\n            Asteroid.create({ size: this.size, x: this.x, y: this.y, a: this.a, dx: -this.dx, dy: -this.dy, da: this.da });\n        } else {\n            // turn into debris\n            this.wasHit = 1;\n        }\n        blast.destroy();\n    }\n\n    destroy() {\n        const asteroids = this.wellKnownModel(\"modelRoot\").asteroids;\n        asteroids.delete(this);\n        super.destroy();\n        // keep at least 5 asteroids around\n        if (asteroids.size < 5) Asteroid.create({});\n    }\n}\nAsteroid.register(\"Asteroid\");\n\nclass Blast extends Croquet.Model {\n    init({x, y, dx, dy, ship}) {\n        this.ship = ship;\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.t = 0;\n        this.wellKnownModel(\"modelRoot\").blasts.add(this);\n    }\n\n    move() {\n        // move for 1.5 second before disappearing\n        if (++this.t < 30) {\n            this.x += this.dx;\n            this.y += this.dy;\n            if (this.x < 0) this.x += 1000;\n            if (this.x > 1000) this.x -= 1000;\n            if (this.y < 0) this.y += 1000;\n            if (this.y > 1000) this.y -= 1000;\n        } else {\n            this.destroy();\n        }\n    }\n\n    destroy() {\n        this.wellKnownModel(\"modelRoot\").blasts.delete(this);\n        super.destroy();\n    }\n}\nBlast.register(\"Blast\");\n\n\n/////////// Code below is executed outside of synced VM /////////// \n\n\nclass Display extends Croquet.View {\n    constructor(model) {\n        super(model);\n        this.model = model;\n\n        const joystick = document.getElementById(\"joystick\");\n        const knob = document.getElementById(\"knob\");\n\n        document.onkeydown = (e) => {\n            joystick.style.display = \"none\";\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", true); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", true); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", true); break;\n                case \" \":                              this.publish(this.viewId, \"fire-blaster\"); break;\n            }\n        };\n        document.onkeyup = (e) => {\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", false); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", false); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", false); break;\n            }\n        };\n\n        let x = 0, y = 0, id = 0, right = false, left = false, forward = false;\n        document.onpointerdown = (e) => {\n            if (!id) {\n                id = e.pointerId;\n                x = e.clientX;\n                y = e.clientY;\n                joystick.style.left = `${x - 60}px`;\n                joystick.style.top = `${y - 60}px`;\n                joystick.style.display = \"block\";\n            }\n        };\n        document.onpointermove = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (dx > 30) {\n                    dx = 30;\n                    if (!right) { this.publish(this.viewId, \"right-thruster\", true); right = true; }\n                } else if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (dx < -30) {\n                    dx = -30;\n                    if (!left) { this.publish(this.viewId, \"left-thruster\", true); left = true; }\n                } else if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false; }\n                if (dy < -30) {\n                    dy = -30;\n                    if (!forward) { this.publish(this.viewId, \"forward-thruster\", true); forward = true; }\n                } else if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                if (dy > 0) dy = 0;\n                knob.style.left = `${20 + dx}px`;\n                knob.style.top = `${20 + dy}px`;\n            }\n        }\n        document.onpointerup = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                id = 0;\n                if (!right && !left && !forward) {\n                    this.publish(this.viewId, \"fire-blaster\");\n                }\n                if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false;  }\n                if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                knob.style.left = `20px`;\n                knob.style.top = `20px`;\n            } else {\n                this.publish(this.viewId, \"fire-blaster\");\n            }\n        }\n        document.onpointercancel = document.onpointerup;\n        document.oncontextmenu = e => { e.preventDefault();  this.publish(this.viewId, \"fire-blaster\"); }\n        document.ontouchend = e => e.preventDefault(); // prevent double-tap zoom on iOS\n        codelink.ontouchend = () => codelink.click(); // but allow clicking link Â¯\\_(ãƒ„)_/Â¯\n\n        this.smoothing = new WeakMap(); // position cache for interpolated rendering\n\n        this.context = canvas.getContext(\"2d\");\n    }\n\n    // update is called once per render frame\n    // read from shared model, interpolate, render\n    update() {\n        this.context.clearRect(0, 0, 1000, 1000);\n        this.context.font = '40px sans-serif';\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"white\";\n        for (const ship of this.model.ships.values()) {\n            const { x, y, a } = this.smoothPosAndAngle(ship);\n            this.context.save();\n            this.context.translate(x, y);\n            if (ship.score) this.context.fillText(ship.score, 30, 15);\n            this.context.rotate(a);\n            if (ship.wasHit) this.drawShipDebris(ship.wasHit);\n            else this.drawShip(ship.forward, ship.viewId === this.viewId);\n            this.context.restore();\n        }\n        for (const asteroid of this.model.asteroids) {\n            const { x, y, a } = this.smoothPosAndAngle(asteroid);\n            this.context.save();\n            this.context.translate(x, y);\n            this.context.rotate(a);\n            if (asteroid.wasHit) this.drawAsteroidDebris(asteroid.size, asteroid.wasHit * 2);\n            else this.drawAsteroid(asteroid.size);\n            this.context.restore();\n        }\n        for (const blast of this.model.blasts) {\n            const { x, y } = this.smoothPos(blast);\n            this.context.save();\n            this.context.translate(x, y);\n            this.drawBlast();\n            this.context.restore();\n        }\n    }\n\n    smoothPos(obj) {\n        if (!this.smoothing.has(obj)) {\n            this.smoothing.set(obj, { x: obj.x, y: obj.y, a: obj.a });\n        }\n        const smoothed = this.smoothing.get(obj);\n        const dx = obj.x - smoothed.x;\n        const dy = obj.y - smoothed.y;\n        if (Math.abs(dx) < 50) smoothed.x += dx * 0.3; else smoothed.x = obj.x;\n        if (Math.abs(dy) < 50) smoothed.y += dy * 0.3; else smoothed.y = obj.y;\n        return smoothed;\n    }\n\n    smoothPosAndAngle(obj) {\n        const smoothed = this.smoothPos(obj);\n        const da = obj.a - smoothed.a;\n        if (Math.abs(da) < 1) smoothed.a += da * 0.3; else smoothed.a = obj.a;\n        return smoothed;\n    }\n\n    drawShip(thrust, highlight) {\n        this.context.beginPath();\n        this.context.moveTo(+20,   0);\n        this.context.lineTo(-20, +10);\n        this.context.lineTo(-20, -10);\n        this.context.closePath();\n        this.context.stroke();\n        if (highlight) {\n            this.context.fill();\n        }\n        if (thrust) {\n            this.context.beginPath();\n            this.context.moveTo(-20, +5);\n            this.context.lineTo(-30,  0);\n            this.context.lineTo(-20, -5);\n            this.context.stroke();\n        }\n    }\n\n    drawShipDebris(t) {\n        this.context.beginPath();\n        this.context.moveTo(+20 + t,   0 + t);\n        this.context.lineTo(-20 + t, +10 + t);\n        this.context.moveTo(-20 - t * 1.4, +10);\n        this.context.lineTo(-20 - t * 1.4, -10);\n        this.context.moveTo(-20 + t, -10 - t);\n        this.context.lineTo(+20 + t,   0 - t);\n        this.context.stroke();\n    }\n\n    drawAsteroid(size) {\n        this.context.beginPath();\n        this.context.moveTo(+size,  0);\n        this.context.lineTo( 0, +size);\n        this.context.lineTo(-size,  0);\n        this.context.lineTo( 0, -size);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    drawAsteroidDebris(size, t) {\n        this.context.beginPath();\n        this.context.moveTo(+size + t,  0 + t);\n        this.context.lineTo( 0 + t, +size + t);\n        this.context.moveTo(-size - t,  0 - t);\n        this.context.lineTo( 0 - t, -size - t);\n        this.context.moveTo(-size - t,  0 + t);\n        this.context.lineTo( 0 - t, +size + t);\n        this.context.moveTo(+size + t,  0 - t);\n        this.context.lineTo( 0 + t, -size - t);\n        this.context.stroke();\n    }\n\n    drawBlast() {\n        this.context.beginPath();\n        this.context.ellipse(0, 0, 2, 2, 0, 0, 2 * Math.PI);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}\n\nCroquet.App.makeWidgetDock(); // shows QR code\n\nCroquet.Session.join({\n    apiKey: '1_i65fcn11n7lhrb5n890hs3dhj11hfzfej57pvlrx', // get your own from croquet.io/keys\n    appId: 'io.croquet.multiblaster',\n    name: Croquet.App.autoSession(),\n    password: Croquet.App.autoPassword(),\n    model: Game,\n    view: Display,\n});\n        </script>\n    </body>\n</html>\n"
      },
      "date": 1654170150263
    },
    {
      "type": "fork",
      "date": 1654170523702
    },
    {
      "type": "remove",
      "id": "af73f1ef127f4723",
      "date": 1654170537733
    },
    {
      "type": "edit",
      "id": "a54b67dad71986b2",
      "item": {
        "type": "paragraph",
        "id": "a54b67dad71986b2",
        "text": "Croquet Multiblaster. [https://croquet.io/multiblaster croquet.io]"
      },
      "date": 1654170799658
    },
    {
      "type": "edit",
      "id": "a54b67dad71986b2",
      "item": {
        "type": "paragraph",
        "id": "a54b67dad71986b2",
        "text": "Croquet Multiblaster. [https://croquet.io/multiblaster croquet.io], [https://github.com/croquet/multiblaster/blob/main/index.html github]"
      },
      "date": 1654170821525
    },
    {
      "type": "edit",
      "id": "0c67cd42705c9d6b",
      "item": {
        "type": "frame",
        "id": "0c67cd42705c9d6b",
        "text": "<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n        <title>Croquet Multiblaster</title>\n        <style>\n            html, body {\n                margin: 0;\n                height: 100%;\n                overflow: hidden;\n                touch-action: none;\n                background: #999;\n                -webkit-touch-callout: none;\n                -webkit-user-select: none;\n                user-select: none;\n                touch-action: none;\n            }\n            #canvas {\n                background: #000;\n                object-fit: contain;\n                max-width: 100%;\n                max-height: 100%;\n            }\n            #joystick {\n                position: absolute;\n                right: 50px;\n                bottom: 50px;\n                width: 120px;\n                height: 120px;\n                border: 3px solid #FFF;\n                border-radius: 60px;\n                opacity: 0.5;\n            }\n            #knob {\n                position: absolute;\n                left: 20px;\n                top: 20px;\n                width: 80px;\n                height: 80px;\n                border-radius: 40px;\n                background-color: #FFF;\n            }\n            #codelink {\n                position: fixed; bottom: 10px; right: 10px; padding: .5em; border-radius: 30px;\n                opacity: 50%; background: lightgray; box-shadow: 1px 1px 5px black;\n                text-decoration: none; font-family: monospace; font-size: 1.5em;\n            }\n            #codelink:hover {\n                opacity: 100%;\n            }\n        </style>\n        <script src=\"https://unpkg.com/@croquet/croquet@1.0\"></script>\n    </head>\n    <body>\n        <canvas id=\"canvas\" width=\"1000\" height=\"1000\"></canvas>\n        <div id=\"joystick\"><div id=\"knob\"></div></div>\n        <a id=\"codelink\" href=\"https://github.com/croquet/multiblaster/blob/main/index.html\"\n            title=\"View source code on GitHub\" target=\"_blank\">{}</a>\n        <script>\n/////////// Model code is executed inside of synced VM /////////// \n\nclass Game extends Croquet.Model {\n    init() {\n        this.ships = new Map();\n        this.asteroids = new Set();\n        this.blasts = new Set();\n        this.subscribe(this.sessionId, \"view-join\", this.viewJoined);\n        this.subscribe(this.sessionId, \"view-exit\", this.viewExited);\n        Asteroid.create({});\n        this.mainLoop();\n    }\n\n    viewJoined(viewId) {\n        const ship = Ship.create({ viewId });\n        this.ships.set(viewId, ship);\n    }\n\n    viewExited(viewId) {\n        const ship = this.ships.get(viewId);\n        this.ships.delete(viewId);\n        ship.destroy();\n    }\n\n    checkCollisions() {\n        for (const asteroid of this.asteroids) {\n            if (asteroid.wasHit) continue;\n            const minx = asteroid.x - asteroid.size;\n            const maxx = asteroid.x + asteroid.size;\n            const miny = asteroid.y - asteroid.size;\n            const maxy = asteroid.y + asteroid.size;\n            for (const blast of this.blasts) {\n                if (blast.x > minx && blast.x < maxx && blast.y > miny && blast.y < maxy) {\n                    asteroid.hitBy(blast);\n                    break;\n                }\n            }\n            for (const ship of this.ships.values()) {\n                if (!ship.wasHit && ship.x + 10 > minx && ship.x - 10 < maxx && ship.y + 10 > miny && ship.y - 10 < maxy) {\n                    if (!ship.score && Math.abs(ship.x-500) + Math.abs(ship.y-500) < 40) continue; // no hit if just spawned\n                    ship.hitBy(asteroid);\n                    break;\n                }\n            }\n        }\n    }\n\n    mainLoop() {\n        for (const ship of this.ships.values()) ship.move();\n        for (const asteroid of this.asteroids) asteroid.move();\n        for (const blast of this.blasts) blast.move();\n        this.checkCollisions();\n        this.future(50).mainLoop(); // move & check every 50 ms\n    }\n}\nGame.register(\"Game\");\n\nclass Ship extends Croquet.Model {\n    init({ viewId }) {\n        this.viewId = viewId;\n        this.reset();\n        this.subscribe(viewId, \"left-thruster\", this.leftThruster);\n        this.subscribe(viewId, \"right-thruster\", this.rightThruster);\n        this.subscribe(viewId, \"forward-thruster\", this.forwardThruster);\n        this.subscribe(viewId, \"fire-blaster\", this.fireBlaster);\n    }\n\n    reset() {\n        this.x = 500;\n        this.y = 500;\n        this.a = -Math.PI / 2;\n        this.dx = 0;\n        this.dy = 0;\n        this.left = false;\n        this.right = false;\n        this.forward = false;\n        this.score = 0;\n        this.wasHit = 0;\n    }\n\n    leftThruster(active) {\n        if (this.wasHit) return;\n        this.left = active;\n    }\n\n    rightThruster(active) {\n        if (this.wasHit) return;\n        this.right = active;\n    }\n\n    forwardThruster(active) {\n        if (this.wasHit) return;\n        this.forward = active;\n    }\n\n    fireBlaster() {\n        if (this.wasHit) return;\n        const dx = Math.cos(this.a) * 20;\n        const dy = Math.sin(this.a) * 20;\n        const x = this.x + dx;\n        const y = this.y + dy;\n        Blast.create({ x, y, dx, dy, ship: this });\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris for 3 seconds\n            if (++this.wasHit > 60) this.reset();\n        } else {\n            // process thruster controls\n            if (this.forward) {\n                this.dx += Math.cos(this.a) * 0.5;\n                this.dy += Math.sin(this.a) * 0.5;\n                if (this.dx > 10) this.dx = 10;\n                if (this.dx < -10) this.dx = -10;\n                if (this.dy > 10) this.dy = 10;\n                if (this.dy < -10) this.dy = -10;\n            }\n            if (this.left) this.a -= 0.2;\n            if (this.right) this.a += 0.2;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n        // drift through space\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n    }\n\n    hitBy(asteroid) {\n        // turn both into debris\n        this.wasHit = 1;\n        asteroid.wasHit = 1;\n    }\n}\nShip.register(\"Ship\");\n\nclass Asteroid extends Croquet.Model {\n    init({ size, x, y, a, dx, dy, da }) {\n        if (size) {\n            // init second asteroid after spliting\n            this.size = size;\n            this.x = x;\n            this.y = y;\n            this.a = a;\n            this.dx = dx;\n            this.dy = dy;\n            this.da = da;\n        } else {\n            // init new large asteroid\n            this.size = 40;\n            this.x = Math.random() * 400 - 200;\n            this.y = Math.random() * 400 - 200;\n            this.a = Math.random() * Math.PI * 2;\n            const speed = Math.random() * 4 + 1;\n            this.dx = Math.cos(this.a) * speed;\n            this.dy = Math.sin(this.a) * speed;\n            this.da = (0.02 + Math.random() * 0.03) * (Math.random() < 0.5 ? 1 : -1);\n            this.wasHit = 0;\n            this.move();\n        }\n        this.wellKnownModel(\"modelRoot\").asteroids.add(this);\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris, larger pieces drift longer\n            if (++this.wasHit > this.size) this.destroy();\n        }\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n        if (!this.wasHit) {\n            this.a += this.da;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n    }\n\n    hitBy(blast) {\n        if (!blast.ship.wasHit) blast.ship.score++;\n        if (this.size > 20) {\n            // split into two smaller faster asteroids\n            this.size *= 0.7;\n            this.da *= 1.5;\n            this.dx = -blast.dy * 10 / this.size;\n            this.dy = blast.dx * 10 / this.size;\n            Asteroid.create({ size: this.size, x: this.x, y: this.y, a: this.a, dx: -this.dx, dy: -this.dy, da: this.da });\n        } else {\n            // turn into debris\n            this.wasHit = 1;\n        }\n        blast.destroy();\n    }\n\n    destroy() {\n        const asteroids = this.wellKnownModel(\"modelRoot\").asteroids;\n        asteroids.delete(this);\n        super.destroy();\n        // keep at least 5 asteroids around\n        if (asteroids.size < 5) Asteroid.create({});\n    }\n}\nAsteroid.register(\"Asteroid\");\n\nclass Blast extends Croquet.Model {\n    init({x, y, dx, dy, ship}) {\n        this.ship = ship;\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.t = 0;\n        this.wellKnownModel(\"modelRoot\").blasts.add(this);\n    }\n\n    move() {\n        // move for 1.5 second before disappearing\n        if (++this.t < 30) {\n            this.x += this.dx;\n            this.y += this.dy;\n            if (this.x < 0) this.x += 1000;\n            if (this.x > 1000) this.x -= 1000;\n            if (this.y < 0) this.y += 1000;\n            if (this.y > 1000) this.y -= 1000;\n        } else {\n            this.destroy();\n        }\n    }\n\n    destroy() {\n        this.wellKnownModel(\"modelRoot\").blasts.delete(this);\n        super.destroy();\n    }\n}\nBlast.register(\"Blast\");\n\n\n/////////// Code below is executed outside of synced VM /////////// \n\n\nclass Display extends Croquet.View {\n    constructor(model) {\n        super(model);\n        this.model = model;\n\n        const joystick = document.getElementById(\"joystick\");\n        const knob = document.getElementById(\"knob\");\n\n        document.onkeydown = (e) => {\n            joystick.style.display = \"none\";\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", true); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", true); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", true); break;\n                case \" \":                              this.publish(this.viewId, \"fire-blaster\"); break;\n            }\n        };\n        document.onkeyup = (e) => {\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", false); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", false); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", false); break;\n            }\n        };\n\n        let x = 0, y = 0, id = 0, right = false, left = false, forward = false;\n        document.onpointerdown = (e) => {\n            if (!id) {\n                id = e.pointerId;\n                x = e.clientX;\n                y = e.clientY;\n                joystick.style.left = `${x - 60}px`;\n                joystick.style.top = `${y - 60}px`;\n                joystick.style.display = \"block\";\n            }\n        };\n        document.onpointermove = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (dx > 30) {\n                    dx = 30;\n                    if (!right) { this.publish(this.viewId, \"right-thruster\", true); right = true; }\n                } else if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (dx < -30) {\n                    dx = -30;\n                    if (!left) { this.publish(this.viewId, \"left-thruster\", true); left = true; }\n                } else if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false; }\n                if (dy < -30) {\n                    dy = -30;\n                    if (!forward) { this.publish(this.viewId, \"forward-thruster\", true); forward = true; }\n                } else if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                if (dy > 0) dy = 0;\n                knob.style.left = `${20 + dx}px`;\n                knob.style.top = `${20 + dy}px`;\n            }\n        }\n        document.onpointerup = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                id = 0;\n                if (!right && !left && !forward) {\n                    this.publish(this.viewId, \"fire-blaster\");\n                }\n                if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false;  }\n                if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                knob.style.left = `20px`;\n                knob.style.top = `20px`;\n            } else {\n                this.publish(this.viewId, \"fire-blaster\");\n            }\n        }\n        document.onpointercancel = document.onpointerup;\n        document.oncontextmenu = e => { e.preventDefault();  this.publish(this.viewId, \"fire-blaster\"); }\n        document.ontouchend = e => e.preventDefault(); // prevent double-tap zoom on iOS\n        codelink.ontouchend = () => codelink.click(); // but allow clicking link Â¯\\_(ãƒ„)_/Â¯\n\n        this.smoothing = new WeakMap(); // position cache for interpolated rendering\n\n        this.context = canvas.getContext(\"2d\");\n    }\n\n    // update is called once per render frame\n    // read from shared model, interpolate, render\n    update() {\n        this.context.clearRect(0, 0, 1000, 1000);\n        this.context.font = '40px sans-serif';\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"white\";\n        for (const ship of this.model.ships.values()) {\n            const { x, y, a } = this.smoothPosAndAngle(ship);\n            this.context.save();\n            this.context.translate(x, y);\n            if (ship.score) this.context.fillText(ship.score, 30, 15);\n            this.context.rotate(a);\n            if (ship.wasHit) this.drawShipDebris(ship.wasHit);\n            else this.drawShip(ship.forward, ship.viewId === this.viewId);\n            this.context.restore();\n        }\n        for (const asteroid of this.model.asteroids) {\n            const { x, y, a } = this.smoothPosAndAngle(asteroid);\n            this.context.save();\n            this.context.translate(x, y);\n            this.context.rotate(a);\n            if (asteroid.wasHit) this.drawAsteroidDebris(asteroid.size, asteroid.wasHit * 2);\n            else this.drawAsteroid(asteroid.size);\n            this.context.restore();\n        }\n        for (const blast of this.model.blasts) {\n            const { x, y } = this.smoothPos(blast);\n            this.context.save();\n            this.context.translate(x, y);\n            this.drawBlast();\n            this.context.restore();\n        }\n    }\n\n    smoothPos(obj) {\n        if (!this.smoothing.has(obj)) {\n            this.smoothing.set(obj, { x: obj.x, y: obj.y, a: obj.a });\n        }\n        const smoothed = this.smoothing.get(obj);\n        const dx = obj.x - smoothed.x;\n        const dy = obj.y - smoothed.y;\n        if (Math.abs(dx) < 50) smoothed.x += dx * 0.3; else smoothed.x = obj.x;\n        if (Math.abs(dy) < 50) smoothed.y += dy * 0.3; else smoothed.y = obj.y;\n        return smoothed;\n    }\n\n    smoothPosAndAngle(obj) {\n        const smoothed = this.smoothPos(obj);\n        const da = obj.a - smoothed.a;\n        if (Math.abs(da) < 1) smoothed.a += da * 0.3; else smoothed.a = obj.a;\n        return smoothed;\n    }\n\n    drawShip(thrust, highlight) {\n        this.context.beginPath();\n        this.context.moveTo(+20,   0);\n        this.context.lineTo(-20, +10);\n        this.context.lineTo(-20, -10);\n        this.context.closePath();\n        this.context.stroke();\n        if (highlight) {\n            this.context.fill();\n        }\n        if (thrust) {\n            this.context.beginPath();\n            this.context.moveTo(-20, +5);\n            this.context.lineTo(-30,  0);\n            this.context.lineTo(-20, -5);\n            this.context.stroke();\n        }\n    }\n\n    drawShipDebris(t) {\n        this.context.beginPath();\n        this.context.moveTo(+20 + t,   0 + t);\n        this.context.lineTo(-20 + t, +10 + t);\n        this.context.moveTo(-20 - t * 1.4, +10);\n        this.context.lineTo(-20 - t * 1.4, -10);\n        this.context.moveTo(-20 + t, -10 - t);\n        this.context.lineTo(+20 + t,   0 - t);\n        this.context.stroke();\n    }\n\n    drawAsteroid(size) {\n        this.context.beginPath();\n        this.context.moveTo(+size,  0);\n        this.context.lineTo( 0, +size);\n        this.context.lineTo(-size,  0);\n        this.context.lineTo( 0, -size);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    drawAsteroidDebris(size, t) {\n        this.context.beginPath();\n        this.context.moveTo(+size + t,  0 + t);\n        this.context.lineTo( 0 + t, +size + t);\n        this.context.moveTo(-size - t,  0 - t);\n        this.context.lineTo( 0 - t, -size - t);\n        this.context.moveTo(-size - t,  0 + t);\n        this.context.lineTo( 0 - t, +size + t);\n        this.context.moveTo(+size + t,  0 - t);\n        this.context.lineTo( 0 + t, -size - t);\n        this.context.stroke();\n    }\n\n    drawBlast() {\n        this.context.beginPath();\n        this.context.ellipse(0, 0, 2, 2, 0, 0, 2 * Math.PI);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}\n\nCroquet.App.makeWidgetDock(); // shows QR code\n\nCroquet.Session.join({\n    apiKey: '1_i65fcn11n7lhrb5n890hs3dhj11hfzfej57pvlrx', // get your own from croquet.io/keys\n    appId: 'io.croquet.multiblaster',\n    name: Croquet.App.autoSession(),\n    password: Croquet.App.autoPassword(),\n    model: Game,\n    view: Display,\n});\n        </script>\n    </body>\n</html>\n"
      },
      "date": 1654170835536
    },
    {
      "type": "edit",
      "id": "a54b67dad71986b2",
      "item": {
        "type": "paragraph",
        "id": "a54b67dad71986b2",
        "text": "[[Croquet]] Multiblaster. [https://croquet.io/multiblaster croquet.io], [https://github.com/croquet/multiblaster/blob/main/index.html github]"
      },
      "date": 1654172626104
    },
    {
      "type": "add",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "paragraph",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script."
      },
      "after": "a54b67dad71986b2",
      "date": 1654176864804
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "paragraph",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and api.croquet.io"
      },
      "date": 1654176948700
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "paragraph",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and api.croquet.io, XHR, Frame."
      },
      "date": 1654176982188
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "paragraph",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame."
      },
      "date": 1654177012509
    },
    {
      "type": "add",
      "id": "6e8c89022e2182db",
      "item": {
        "type": "paragraph",
        "id": "6e8c89022e2182db",
        "text": ">"
      },
      "after": "883e8a5fdd496df3",
      "date": 1654177075577
    },
    {
      "type": "edit",
      "id": "6e8c89022e2182db",
      "item": {
        "type": "paragraph",
        "id": "6e8c89022e2182db",
        "text": "> First, get a free API key from croquet.io/keys"
      },
      "date": 1654177083431
    },
    {
      "type": "edit",
      "id": "6e8c89022e2182db",
      "item": {
        "type": "markdown",
        "id": "6e8c89022e2182db",
        "text": "> First, get a free API key from croquet.io/keys"
      },
      "date": 1654177086828
    },
    {
      "type": "edit",
      "id": "6e8c89022e2182db",
      "item": {
        "type": "markdown",
        "id": "6e8c89022e2182db",
        "text": "> First, get a free API key from [https://croquet.io/keys/ croquet.io/keys]"
      },
      "date": 1654177112714
    },
    {
      "type": "edit",
      "id": "a54b67dad71986b2",
      "item": {
        "type": "paragraph",
        "id": "a54b67dad71986b2",
        "text": "[[Croquet Multiblaster]]. [https://croquet.io/multiblaster croquet.io], [https://github.com/croquet/multiblaster/blob/main/index.html github]"
      },
      "date": 1654177222726
    },
    {
      "id": "883e8a5fdd496df3",
      "type": "remove",
      "date": 1654177262450
    },
    {
      "id": "6e8c89022e2182db",
      "type": "remove",
      "date": 1654177464294
    },
    {
      "type": "edit",
      "id": "a54b67dad71986b2",
      "item": {
        "type": "paragraph",
        "id": "a54b67dad71986b2",
        "text": "â‡’ [[Croquet Multiblaster]]. "
      },
      "date": 1654177613078
    },
    {
      "id": "883e8a5fdd496df3",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame â‡’ **Script Tag**:"
      },
      "after": "a54b67dad71986b2",
      "date": 1654177636706
    },
    {
      "id": "c50b7efeded4ac19",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c50b7efeded4ac19",
        "text": "       <meta charset=\"utf-8\">\n       <script src=\"https://unpkg.com/@croquet/croquet@1.0.5\"></script>\n"
      },
      "after": "883e8a5fdd496df3",
      "date": 1654177640462
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "markdown",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] **Script Tag** to access [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame â‡’ :"
      },
      "date": 1654177801916
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "markdown",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] **Script Tag** to access [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame:"
      },
      "date": 1654177830884
    },
    {
      "type": "fork",
      "date": 1654881448571
    },
    {
      "type": "add",
      "id": "b0e89dcecb41898b",
      "item": {
        "type": "paragraph",
        "id": "b0e89dcecb41898b",
        "text": "> This is an homage to Asteroids, implemented as a single HTML page without any backend code. All clients are kept in sync automatically by [[Croquet]]'s synchronization technology. [https://github.com/croquet/multiblaster github], [https://croquet.io/multiblaster/index.html?q=9zguex297g#pw=InauQyhaxzp-QOFJqn9H-A play it!]"
      },
      "after": "a54b67dad71986b2",
      "date": 1654882872034
    },
    {
      "type": "edit",
      "id": "b0e89dcecb41898b",
      "item": {
        "type": "markdown",
        "id": "b0e89dcecb41898b",
        "text": "> This is an homage to Asteroids, implemented as a single HTML page without any backend code. All clients are kept in sync automatically by [[Croquet]]'s synchronization technology. [https://github.com/croquet/multiblaster github], [https://croquet.io/multiblaster/index.html?q=9zguex297g#pw=InauQyhaxzp-QOFJqn9H-A play it!]"
      },
      "date": 1654882876404
    }
  ]
}