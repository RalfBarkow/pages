{
  "title": "Memoization",
  "story": [
    {
      "type": "paragraph",
      "id": "098443cc2284f990",
      "text": "The term memoization was coined by [[Donald Michie]] (1968) to refer to the process by which a function is made to automatically remember the results of previous computations. The idea has become more popular in recent years with the rise of functional languages; Field and Harrison (1988) devote a whole chapter to it. The basic idea is just to keep a table of previously computed input/result pairs. "
    },
    {
      "type": "pagefold",
      "id": "d2edab61302a22c9",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "90e3becd881883aa",
      "text": "NORVIG, Peter, 1991. Techniques for automatic memoization with applications to context-free parsing. Computational Linguistics. 1991. Vol. 17, no. 1, p. 91–98. \n"
    },
    {
      "type": "paragraph",
      "id": "6506fb46a3f9ae03",
      "text": "Memoization is a technique for storing values of a function instead of recomputing them each time the function is called. [https://wiki.haskell.org/Memoization wiki.haskell]"
    },
    {
      "type": "reference",
      "id": "6a094534c5aca644",
      "site": "wiki.ralfbarkow.ch",
      "slug": "functions-are-containers",
      "title": "Functions Are Containers",
      "text": "Memoization via Representables [https://iagoleal.com/posts/representable-memoize/ post]"
    },
    {
      "type": "reference",
      "id": "14ff4a37711e412b",
      "site": "wiki.ralfbarkow.ch",
      "slug": "memoization-via-representables",
      "title": "Memoization via Representables",
      "text": "What is the most basic [[Container]] type a language can have? Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. [https://iagoleal.com/posts/representable-memoize/ post]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Memoization",
        "story": []
      },
      "date": 1679895561559
    },
    {
      "item": {
        "type": "factory",
        "id": "6a094534c5aca644"
      },
      "id": "6a094534c5aca644",
      "type": "add",
      "date": 1679895563128
    },
    {
      "type": "edit",
      "id": "6a094534c5aca644",
      "item": {
        "type": "reference",
        "id": "6a094534c5aca644",
        "site": "wiki.ralfbarkow.ch",
        "slug": "functions-are-containers",
        "title": "Functions Are Containers",
        "text": "Memoization via Representables [https://iagoleal.com/posts/representable-memoize/ post]"
      },
      "date": 1679895566159
    },
    {
      "item": {
        "type": "factory",
        "id": "14ff4a37711e412b"
      },
      "id": "14ff4a37711e412b",
      "type": "add",
      "after": "6a094534c5aca644",
      "date": 1680002823574
    },
    {
      "type": "edit",
      "id": "14ff4a37711e412b",
      "item": {
        "type": "reference",
        "id": "14ff4a37711e412b",
        "site": "wiki.ralfbarkow.ch",
        "slug": "memoization-via-representables",
        "title": "Memoization via Representables",
        "text": "What is the most basic [[Container]] type a language can have? Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. [https://iagoleal.com/posts/representable-memoize/ post]"
      },
      "date": 1680002826390
    },
    {
      "item": {
        "type": "factory",
        "id": "098443cc2284f990"
      },
      "id": "098443cc2284f990",
      "type": "add",
      "after": "14ff4a37711e412b",
      "date": 1680003197152
    },
    {
      "id": "098443cc2284f990",
      "type": "move",
      "order": [
        "098443cc2284f990",
        "6a094534c5aca644",
        "14ff4a37711e412b"
      ],
      "date": 1680003199070
    },
    {
      "type": "edit",
      "id": "098443cc2284f990",
      "item": {
        "type": "paragraph",
        "id": "098443cc2284f990",
        "text": "The term memoization was coined by Donald Michie (1968) to refer to the process by which a function is made to automatically remember the results of previous computations. The idea has become more popular in recent years with the rise of functional languages; Field and Harrison (1988) devote a whole chapter to it. The basic idea is just to keep a table of previously computed input/result pairs. In Common Lisp one could write: 1"
      },
      "date": 1680003201326
    },
    {
      "type": "edit",
      "id": "098443cc2284f990",
      "item": {
        "type": "paragraph",
        "id": "098443cc2284f990",
        "text": "The term memoization was coined by Donald Michie (1968) to refer to the process by which a function is made to automatically remember the results of previous computations. The idea has become more popular in recent years with the rise of functional languages; Field and Harrison (1988) devote a whole chapter to it. The basic idea is just to keep a table of previously computed input/result pairs. "
      },
      "date": 1680003253054
    },
    {
      "item": {
        "type": "factory",
        "id": "d2edab61302a22c9"
      },
      "id": "d2edab61302a22c9",
      "type": "add",
      "after": "14ff4a37711e412b",
      "date": 1680003265338
    },
    {
      "id": "d2edab61302a22c9",
      "type": "move",
      "order": [
        "098443cc2284f990",
        "d2edab61302a22c9",
        "6a094534c5aca644",
        "14ff4a37711e412b"
      ],
      "date": 1680003267161
    },
    {
      "type": "edit",
      "id": "d2edab61302a22c9",
      "item": {
        "type": "pagefold",
        "id": "d2edab61302a22c9",
        "text": "~"
      },
      "date": 1680003269673
    },
    {
      "item": {
        "type": "factory",
        "id": "90e3becd881883aa"
      },
      "id": "90e3becd881883aa",
      "type": "add",
      "after": "14ff4a37711e412b",
      "date": 1680003271501
    },
    {
      "id": "90e3becd881883aa",
      "type": "move",
      "order": [
        "098443cc2284f990",
        "d2edab61302a22c9",
        "90e3becd881883aa",
        "6a094534c5aca644",
        "14ff4a37711e412b"
      ],
      "date": 1680003274262
    },
    {
      "type": "edit",
      "id": "90e3becd881883aa",
      "item": {
        "type": "paragraph",
        "id": "90e3becd881883aa",
        "text": "NORVIG, Peter, 1991. Techniques for automatic memoization with applications to context-free parsing. Computational Linguistics. 1991. Vol. 17, no. 1, p. 91–98. \n"
      },
      "date": 1680003281649
    },
    {
      "type": "edit",
      "id": "098443cc2284f990",
      "item": {
        "type": "paragraph",
        "id": "098443cc2284f990",
        "text": "The term memoization was coined by [[Donald Michie]] (1968) to refer to the process by which a function is made to automatically remember the results of previous computations. The idea has become more popular in recent years with the rise of functional languages; Field and Harrison (1988) devote a whole chapter to it. The basic idea is just to keep a table of previously computed input/result pairs. "
      },
      "date": 1680003293311
    },
    {
      "type": "add",
      "id": "6506fb46a3f9ae03",
      "item": {
        "type": "paragraph",
        "id": "6506fb46a3f9ae03",
        "text": "Memoization is a technique for storing values of a function instead of recomputing them each time the function is called. "
      },
      "after": "90e3becd881883aa",
      "date": 1680004508745
    },
    {
      "type": "edit",
      "id": "6506fb46a3f9ae03",
      "item": {
        "type": "paragraph",
        "id": "6506fb46a3f9ae03",
        "text": "Memoization is a technique for storing values of a function instead of recomputing them each time the function is called. [https://wiki.haskell.org/Memoization wiki.haskell]"
      },
      "date": 1680004523024
    }
  ]
}