{
  "title": "Problems in UI Engineering",
  "story": [
    {
      "type": "paragraph",
      "id": "8b5e07003fa24589",
      "text": "Adam Solove commits continual attention to three persistent problems in user-interface engineering: structured concurrency, understandable behavior, and data synchronization. [https://medium.com/@asolove/what-are-the-important-problems-in-ui-engineering-8b7f8b305611 post]"
    },
    {
      "type": "paragraph",
      "id": "3d13af15c9c58fbd",
      "text": "Structured Concurrency.\nEspecially on the web, but also in native mobile development, it is still very easy to get concurrent behavior wrong. It is rare to see the code of a user interface that doesn’t have data races or use-after-dead problems related to components that fire off asynchronous chains that eventually trigger mutations."
    },
    {
      "type": "paragraph",
      "id": "1e4a6f9e32d423be",
      "text": "Understandable Behavior. When building interactive systems, it is enormously difficult to understand their behavior because of the enormous state-space. You have to consider all the system’s data and operations multiplied by all the possible sequences of the user’s interactions. "
    },
    {
      "type": "paragraph",
      "id": "f9c94e7b278e4a92",
      "text": "Data Synchronization.\nThe network eventually absorbs every application that used to live only on a single computer. From making small web apps work while offline to correctly merging multiple users’ edits on large documents, we are going to need a wide array of options for synchronizing data."
    },
    {
      "type": "pagefold",
      "id": "88350eddb4f7342b",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "6f678ad7e9df14a3",
      "text": "Adam has left an indelible mark on federated wiki as an early contributor. We've since sought to sidestep or  postpone the remaining difficult problems he astutely characterizes for all distributed interacting systems. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Problems in UI Engineering",
        "story": []
      },
      "date": 1492786704410
    },
    {
      "item": {
        "type": "factory",
        "id": "8b5e07003fa24589"
      },
      "id": "8b5e07003fa24589",
      "type": "add",
      "date": 1492786781313
    },
    {
      "type": "edit",
      "id": "8b5e07003fa24589",
      "item": {
        "type": "paragraph",
        "id": "8b5e07003fa24589",
        "text": "Adam Solove commits continual attention to three persistent problems in user-interface engineering: structured concurrency, understandable behavior, and data synchronization."
      },
      "date": 1492786874877
    },
    {
      "type": "edit",
      "id": "8b5e07003fa24589",
      "item": {
        "type": "paragraph",
        "id": "8b5e07003fa24589",
        "text": "Adam Solove commits continual attention to three persistent problems in user-interface engineering: structured concurrency, understandable behavior, and data synchronization. [https://medium.com/@asolove/what-are-the-important-problems-in-ui-engineering-8b7f8b305611 medium]"
      },
      "date": 1492786896461
    },
    {
      "type": "edit",
      "id": "8b5e07003fa24589",
      "item": {
        "type": "paragraph",
        "id": "8b5e07003fa24589",
        "text": "Adam Solove commits continual attention to three persistent problems in user-interface engineering: structured concurrency, understandable behavior, and data synchronization. [https://medium.com/@asolove/what-are-the-important-problems-in-ui-engineering-8b7f8b305611 post]"
      },
      "date": 1492786902591
    },
    {
      "type": "add",
      "id": "3d13af15c9c58fbd",
      "item": {
        "type": "paragraph",
        "id": "3d13af15c9c58fbd",
        "text": "Structured Concurrency.\nEspecially on the web, but also in native mobile development, it is still very easy to get concurrent behavior wrong. It is rare to see the code of a user interface that doesn’t have data races or use-after-dead problems related to components that fire off asynchronous chains that eventually trigger mutations."
      },
      "after": "8b5e07003fa24589",
      "date": 1492786977148
    },
    {
      "type": "add",
      "id": "1e4a6f9e32d423be",
      "item": {
        "type": "paragraph",
        "id": "1e4a6f9e32d423be",
        "text": "Understandable Behavior. When building interactive systems, it is enormously difficult to understand their behavior because of the enormous state-space. You have to consider all the system’s data and operations multiplied by all the possible sequences of the user’s interactions. "
      },
      "after": "3d13af15c9c58fbd",
      "date": 1492787013918
    },
    {
      "type": "add",
      "id": "f9c94e7b278e4a92",
      "item": {
        "type": "paragraph",
        "id": "f9c94e7b278e4a92",
        "text": "Data Synchronization.\nThe network eventually absorbs every application that used to live only on a single computer. From making small web apps work while offline to correctly merging multiple users’ edits on large documents, we are going to need a wide array of options for synchronizing data."
      },
      "after": "1e4a6f9e32d423be",
      "date": 1492787064452
    },
    {
      "item": {
        "type": "factory",
        "id": "88350eddb4f7342b"
      },
      "id": "88350eddb4f7342b",
      "type": "add",
      "after": "f9c94e7b278e4a92",
      "date": 1492787080303
    },
    {
      "type": "edit",
      "id": "88350eddb4f7342b",
      "item": {
        "type": "pagefold",
        "id": "88350eddb4f7342b",
        "text": "."
      },
      "date": 1492787090700
    },
    {
      "item": {
        "type": "factory",
        "id": "6f678ad7e9df14a3"
      },
      "id": "6f678ad7e9df14a3",
      "type": "add",
      "after": "88350eddb4f7342b",
      "date": 1492787092818
    },
    {
      "type": "edit",
      "id": "6f678ad7e9df14a3",
      "item": {
        "type": "paragraph",
        "id": "6f678ad7e9df14a3",
        "text": "Adam has left an indelible mark on federated wiki as an early contributor. We've since sought to sidestep or  postpone the remaining difficult problems he astutely characterizes for all distributed interacting systems. "
      },
      "date": 1492787370907
    },
    {
      "type": "fork",
      "site": "ward.bay.wiki.org",
      "date": 1565669683796
    },
    {
      "type": "fork",
      "site": "code.fed.wiki",
      "date": 1676998214914
    }
  ]
}