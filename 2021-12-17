{
  "title": "2021-12-17",
  "story": [
    {
      "type": "reference",
      "id": "232f43142bd1da58",
      "site": "kale.wiki.ralfbarkow.ch",
      "slug": "reflections-on-digital-tools",
      "title": "Reflections on digital tools",
      "text": "- found it both surprising and plausible to see that in humanities computing methods of interpretation and the objects to be represented are very close together"
    },
    {
      "type": "pagefold",
      "id": "54fc58a2b16f8db9",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f4f8eba3e7c6932b",
      "text": "ANNE-CHRISTINE SCHINDLER\nCyborgs vs. Bienen: Subjekt und Körperlosigkeit in der New Economy [https://aether.ethz.ch/ausgabe/new-economy/?a=cyborgs-vs-bienen page]"
    },
    {
      "type": "markdown",
      "id": "da2c80a9a3799e31",
      "text": "> Seine Vision erklärte er deshalb mit der Denkfigur des Bienenschwarms, dem [[hive mind]]. Der hive mind ist ein Paradebeispiel für eine Vision der Netzgesellschaft, in der Körper und Subjekt verschwinden. Ihm stelle ich ein anderes theoretisches Konzept gegenüber, das auf demselben diskursiven Raster beruht und doch grundverschieden ist. Donna Haraways Cyborg (1985), wie der hive mind ein kybernetischer Organismus, wurde in den 1990er-Jahren als Denkfigur aufgegriffen, um Kritik an Visionen wie jenen von Kelly zu üben."
    },
    {
      "type": "paragraph",
      "id": "d1c68f5b4073d2f7",
      "text": "He therefore explained his vision with the figure of thought of the swarm of bees, the hive mind. The hive mind is a prime example of a vision of the net society in which body and subject disappear. I contrast it with another theoretical concept based on the same discursive grid, yet fundamentally different. Donna Haraway's cyborg (1985), like the hive mind a cybernetic organism, was taken up as a figure of thought in the 1990s to criticize visions such as Kelly's. The hive mind is a cybernetic organism."
    },
    {
      "type": "markdown",
      "id": "00e7eec0c073e835",
      "text": "> Sowohl Haraway als auch Kelly stellten einen Bruch fest, eine Verschiebung der alten industriellen in eine neue Netzgesellschaft. Aber während Kelly eine exklusive Welt entwirft, in der sich digitale Eliten im virtuellen Raum vernetzen – was Arthur Kroker und Michael A. Weinstein 1994 als »virtual class« theoretisierten –,3 analysiert Haraway die Technologisierung aller Lebensbereiche aus einer intersektionalen Perspektive. Auch ihre Cyborg bewegt sich im Netz, aber sie ist die Antithese zum hive mind, weil sie Körperlichkeiten – und damit unterschiedliche soziale Realitäten – fest im Blick behält.\n"
    },
    {
      "type": "markdown",
      "id": "15a58e00c0cb9ae9",
      "text": "Both Haraway and Kelly noted a rupture, a shift from the old industrial to a new network society. But while Kelly sketches an exclusive world in which digital elites network in virtual space-what Arthur Kroker and Michael A. Weinstein theorized as the \"virtual class\" in 1994,3 Haraway analyzes the technologization of all areas of life from an intersectional perspective. Her cyborg also moves on the Net, but it is the antithesis of the [[hive mind]] because it keeps corporealities - and thus different social realities - firmly in view."
    },
    {
      "type": "html",
      "id": "fe18a416d5c3a5b3",
      "text": "<center><img width=\"100%\" src=\"https://aether.ethz.ch/site/assets/files/3753/schindler_abb1.1280x0.jpg\"></center>"
    },
    {
      "type": "markdown",
      "id": "6a642aa09bf43614",
      "text": "## Der hive mind als (organischer) Cyborg\nThe hive mind as an (organic) cyborg\n"
    },
    {
      "type": "markdown",
      "id": "791b605e735428fa",
      "text": "When Out of Control appeared, the first commercially successful browsers, NCSA Mosaic and, soon after, Netscape Navigator, had begun to network the world ever more rapidly. Light signals in fiber optic cables compressed space and time; the dotcom bubble grew, the new economy boomed. The \"complexity of computers and man-made systems,\" Kelly wrote, had reached \"the complexity of living things. \"27 A complexity so great that humans could not possibly maintain control over these systems."
    },
    {
      "type": "pagefold",
      "id": "6025c966dabbd5d8",
      "text": "gt"
    },
    {
      "type": "paragraph",
      "id": "7834e2acb246ae9e",
      "text": "tudor girba via [https://discord.com/channels/729445214812504107/735947900651175998/921445653765320714 discord]"
    },
    {
      "type": "paragraph",
      "id": "3d423f99706a75f5",
      "text": "Pharo is the runtime language in which the environment is built. We use it because makes it very cheap to experiment with new thoughts  (Smalltalk in general - Pharo in particular because it has a more solid basis). We likely would have not been able to go to the extent we did without an environment that allowed us to learn and explore like this. Now that we know what is possible, other tradeoffs are possible. We are certain other people will copy what we do. That's the primary reason we are doing it in the open. However, the worry is that people will copy only the shiny visible parts and this will not solve the problem.\n\nSo, what problem is that? Making a world of software sustainable by making the inside of the systems explainable. That's the goal. To get there we are talking about orders of magnitude more enhanced abilities as compared with the current baseline. So, it's certainly likely that people will find 2-3x improvement and regard it as a win. That's within reach without much effort. But, we likely need to enhance our abilities to reason about computation many times more to have a change for a sustainable future.\n\nNow, GT is implemented in Pharo and naturally, Pharo is the first supported language, too. The second language supported is the one with which we construct support for other languages (SmaCC). Also, on the analysis side, GT comes with support for other languages. Furthermore, Lepiter also comes with support for scripting JS and Python (including inspection and debugging support). More will likely come in the future.\n\nCan GT be used right now? Definitely. We use it extensively in concrete systems written in many languages and at different levels of abstraction. We get our funding by solving concrete problems. You can see some use cases in this Discord, like software-assessment, executable-specifications or data-exploration ."
    },
    {
      "type": "paragraph",
      "id": "b3d6457f4b4861e9",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "78994cb506b2fa33",
      "text": "tudor girba — heute um 19:14 Uhr\nExactly! We call this the software environmentalism crisis: we create software ever faster, but we are unable to recycle old systems. We behave not unlike the plastic industry."
    },
    {
      "type": "paragraph",
      "id": "701a00d792b1f7b9",
      "text": "Also see [[Max Liboiron]], [[Plastics]]"
    },
    {
      "type": "paragraph",
      "id": "53e50ba941e00b93",
      "text": "To recycle a system is to take it apart and refurbish for new purposes. But, before we can take it apart, we first have to understand the parts. Currently, this is the bottleneck and it relies on reading. As reading is capped to a constant speed, it cannot match a superlinear growth. Hence, the only way to a sustainable future is to make the understanding of the parts not depend on the size of the system. And the only way to do that is to get better at teaching our tools at what we care to learn about our systems.\n\nOf course, this is a tall order. But, the good news is that the software world has fractal-like properties. So, to affect large [[patterns]], we have to affect the smallest [[pattern]]. That is why most of our work focused on the most basic tool: the inspector. \n"
    },
    {
      "type": "pagefold",
      "id": "c2deb35646f1e1eb",
      "text": "DE"
    },
    {
      "type": "paragraph",
      "id": "8d73a7015c969e3d",
      "text": "Ein System zu recyceln bedeutet, es zu zerlegen und für neue Zwecke aufzubereiten. Aber bevor wir es auseinandernehmen können, müssen wir erst die Teile verstehen. Dies ist derzeit der Engpass, und er beruht auf dem Lesen. Da das Lesen auf eine konstante Geschwindigkeit begrenzt ist, kann es nicht mit einem superlinearen Wachstum Schritt halten. Der einzige Weg in eine nachhaltige Zukunft besteht also darin, das Verständnis der Teile nicht von der Größe des Systems abhängig zu machen. Und die einzige Möglichkeit, dies zu erreichen, besteht darin, unsere Werkzeuge besser auf das zu trainieren, was wir über unsere Systeme lernen wollen.\n\nNatürlich ist das eine große Aufgabe. Aber die gute Nachricht ist, dass die Software-Welt fraktalähnliche Eigenschaften hat. Um also große Muster zu beeinflussen, müssen wir das kleinste Muster beeinflussen. Deshalb konzentrierte sich der Großteil unserer Arbeit auf das grundlegendste Werkzeug: den Inspektor. \n"
    },
    {
      "type": "pagefold",
      "id": "6d88407bab24ec15",
      "text": "[…]"
    },
    {
      "type": "markdown",
      "id": "35ec1f615823cc72",
      "text": "tudor girba — heute um 20:48 Uhr\nWhen the environment changes, the system should change, too. It should be \"recycled\" for the new reality. Some changes are more obvious: eg, how do I scale the system to deal with a sudden increase in the demand? But, most changes are smaller in scope: eg, is my system affected by the [[log4shell]] problem. In fact, any evolution of the system is a small recycling.\n\nSo, what happens when we cannot change them anymore? There are visible effects on businesses. And there are less visible ones, too. For example, when the COVID pandemic started people could not get their unemployment support because systems could not handle the increase:\nhttps://twitter.com/girba/status/1246750717538373632?s=20"
    },
    {
      "type": "pagefold",
      "id": "346e3afe9ac2a17c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "2d28fd4cc37e76df",
      "text": "Sean DeNigris\n@SeanDenigris\n#GToolkit extension to share variables between tools, even in other tabs or GtWorlds. \n\nSooths a major pain point for end user-like tasks right in the GT IDE w/o the need for front-end GUIs.\n\nInspired by @pharoproject\n's variable sharing feature in v. 9"
    },
    {
      "type": "video",
      "id": "eb1a6db2943b1b68",
      "text": "YOUTUBE dOhkO_fk9rQ\nGToolkit - Share Variables between Tools"
    },
    {
      "type": "paragraph",
      "id": "979deb19c6071a2d",
      "text": "Demo of an extension supporting sharing of variables across tools, even in different tabs or different GtWorlds. Because GT is so great at bringing models to life, I have been relying on the IDE itself for end user tasks (where I am the end user) instead of writing front-end GUIs like I used to in Pharo. During this activity, a major pain point for me with GT has been data which is trapped in one tool (e.g. an inspector, playground) and needed in another. I got inspired by Pharo 9's variable-sharing feature and decided I needed it in GT. I finally got around to implementation. Hope it helps..."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2021-12-17",
        "story": []
      },
      "date": 1639723024264
    },
    {
      "item": {
        "type": "factory",
        "id": "f4f8eba3e7c6932b"
      },
      "id": "f4f8eba3e7c6932b",
      "type": "add",
      "date": 1639725931305
    },
    {
      "type": "edit",
      "id": "f4f8eba3e7c6932b",
      "item": {
        "type": "paragraph",
        "id": "f4f8eba3e7c6932b",
        "text": "ANNE-CHRISTINE SCHINDLER\nCyborgs vs. Bienen: Subjekt und Körperlosigkeit in der New Economy"
      },
      "date": 1639725933318
    },
    {
      "item": {
        "type": "factory",
        "id": "99812d4a94ef40a4"
      },
      "id": "99812d4a94ef40a4",
      "type": "add",
      "after": "f4f8eba3e7c6932b",
      "date": 1639725941935
    },
    {
      "type": "edit",
      "id": "f4f8eba3e7c6932b",
      "item": {
        "type": "paragraph",
        "id": "f4f8eba3e7c6932b",
        "text": "ANNE-CHRISTINE SCHINDLER\nCyborgs vs. Bienen: Subjekt und Körperlosigkeit in der New Economy [https://aether.ethz.ch/ausgabe/new-economy/?a=cyborgs-vs-bienen page]"
      },
      "date": 1639725959593
    },
    {
      "type": "remove",
      "id": "99812d4a94ef40a4",
      "date": 1639725983531
    },
    {
      "item": {
        "type": "factory",
        "id": "da2c80a9a3799e31"
      },
      "id": "da2c80a9a3799e31",
      "type": "add",
      "after": "f4f8eba3e7c6932b",
      "date": 1639725986250
    },
    {
      "type": "edit",
      "id": "da2c80a9a3799e31",
      "item": {
        "type": "markdown",
        "id": "da2c80a9a3799e31",
        "text": "> Seine Vision erklärte er deshalb mit der Denkfigur des Bienenschwarms, dem hive mind. Der hive mind ist ein Paradebeispiel für eine Vision der Netzgesellschaft, in der Körper und Subjekt verschwinden. Ihm stelle ich ein anderes theoretisches Konzept gegenüber, das auf demselben diskursiven Raster beruht und doch grundverschieden ist. Donna Haraways Cyborg (1985), wie der hive mind ein kybernetischer Organismus, wurde in den 1990er-Jahren als Denkfigur aufgegriffen, um Kritik an Visionen wie jenen von Kelly zu üben."
      },
      "date": 1639725989919
    },
    {
      "item": {
        "type": "factory",
        "id": "d1c68f5b4073d2f7"
      },
      "id": "d1c68f5b4073d2f7",
      "type": "add",
      "after": "da2c80a9a3799e31",
      "date": 1639726011989
    },
    {
      "type": "edit",
      "id": "d1c68f5b4073d2f7",
      "item": {
        "type": "paragraph",
        "id": "d1c68f5b4073d2f7",
        "text": "He therefore explained his vision with the figure of thought of the swarm of bees, the hive mind. The hive mind is a prime example of a vision of the net society in which body and subject disappear. I contrast it with another theoretical concept based on the same discursive grid, yet fundamentally different. Donna Haraway's cyborg (1985), like the hive mind a cybernetic organism, was taken up as a figure of thought in the 1990s to criticize visions such as Kelly's. The hive mind is a cybernetic organism."
      },
      "date": 1639726015096
    },
    {
      "type": "edit",
      "id": "da2c80a9a3799e31",
      "item": {
        "type": "markdown",
        "id": "da2c80a9a3799e31",
        "text": "> Seine Vision erklärte er deshalb mit der Denkfigur des Bienenschwarms, dem [[hive mind]]. Der hive mind ist ein Paradebeispiel für eine Vision der Netzgesellschaft, in der Körper und Subjekt verschwinden. Ihm stelle ich ein anderes theoretisches Konzept gegenüber, das auf demselben diskursiven Raster beruht und doch grundverschieden ist. Donna Haraways Cyborg (1985), wie der hive mind ein kybernetischer Organismus, wurde in den 1990er-Jahren als Denkfigur aufgegriffen, um Kritik an Visionen wie jenen von Kelly zu üben."
      },
      "date": 1639726038244
    },
    {
      "item": {
        "type": "factory",
        "id": "fe18a416d5c3a5b3"
      },
      "id": "fe18a416d5c3a5b3",
      "type": "add",
      "after": "d1c68f5b4073d2f7",
      "date": 1639726583866
    },
    {
      "type": "edit",
      "id": "fe18a416d5c3a5b3",
      "item": {
        "type": "html",
        "id": "fe18a416d5c3a5b3",
        "text": "<center><img width=\"100%\" src=\"https://aether.ethz.ch/site/assets/files/3753/schindler_abb1.1280x0.jpg\"></center>"
      },
      "date": 1639726611847
    },
    {
      "type": "add",
      "id": "00e7eec0c073e835",
      "item": {
        "type": "paragraph",
        "id": "00e7eec0c073e835",
        "text": "> Sowohl Haraway als auch Kelly stellten einen Bruch fest, eine Verschiebung der alten industriellen in eine neue Netzgesellschaft. Aber während Kelly eine exklusive Welt entwirft, in der sich digitale Eliten im virtuellen Raum vernetzen – was Arthur Kroker und Michael A. Weinstein 1994 als »virtual class« theoretisierten –,3 analysiert Haraway die Technologisierung aller Lebensbereiche aus einer intersektionalen Perspektive. Auch ihre Cyborg bewegt sich im Netz, aber sie ist die Antithese zum hive mind, weil sie Körperlichkeiten – und damit unterschiedliche soziale Realitäten – fest im Blick behält."
      },
      "after": "d1c68f5b4073d2f7",
      "date": 1639726887622
    },
    {
      "type": "edit",
      "id": "00e7eec0c073e835",
      "item": {
        "type": "markdown",
        "id": "00e7eec0c073e835",
        "text": "> Sowohl Haraway als auch Kelly stellten einen Bruch fest, eine Verschiebung der alten industriellen in eine neue Netzgesellschaft. Aber während Kelly eine exklusive Welt entwirft, in der sich digitale Eliten im virtuellen Raum vernetzen – was Arthur Kroker und Michael A. Weinstein 1994 als »virtual class« theoretisierten –,3 analysiert Haraway die Technologisierung aller Lebensbereiche aus einer intersektionalen Perspektive. Auch ihre Cyborg bewegt sich im Netz, aber sie ist die Antithese zum hive mind, weil sie Körperlichkeiten – und damit unterschiedliche soziale Realitäten – fest im Blick behält."
      },
      "date": 1639726897081
    },
    {
      "type": "edit",
      "id": "00e7eec0c073e835",
      "item": {
        "type": "markdown",
        "id": "00e7eec0c073e835",
        "text": "> Sowohl Haraway als auch Kelly stellten einen Bruch fest, eine Verschiebung der alten industriellen in eine neue Netzgesellschaft. Aber während Kelly eine exklusive Welt entwirft, in der sich digitale Eliten im virtuellen Raum vernetzen – was Arthur Kroker und Michael A. Weinstein 1994 als »virtual class« theoretisierten –,3 analysiert Haraway die Technologisierung aller Lebensbereiche aus einer intersektionalen Perspektive. Auch ihre Cyborg bewegt sich im Netz, aber sie ist die Antithese zum hive mind, weil sie Körperlichkeiten – und damit unterschiedliche soziale Realitäten – fest im Blick behält.\n"
      },
      "date": 1639726904286
    },
    {
      "type": "add",
      "id": "15a58e00c0cb9ae9",
      "item": {
        "type": "markdown",
        "id": "15a58e00c0cb9ae9",
        "text": "Both Haraway and Kelly noted a rupture, a shift from the old industrial to a new network society. But while Kelly sketches an exclusive world in which digital elites network in virtual space-what Arthur Kroker and Michael A. Weinstein theorized as the \"virtual class\" in 1994,3 Haraway analyzes the technologization of all areas of life from an intersectional perspective. Her cyborg also moves on the Net, but it is the antithesis of the hive mind because it keeps corporealities - and thus different social realities - firmly in view."
      },
      "after": "00e7eec0c073e835",
      "date": 1639726905455
    },
    {
      "type": "edit",
      "id": "15a58e00c0cb9ae9",
      "item": {
        "type": "markdown",
        "id": "15a58e00c0cb9ae9",
        "text": "Both Haraway and Kelly noted a rupture, a shift from the old industrial to a new network society. But while Kelly sketches an exclusive world in which digital elites network in virtual space-what Arthur Kroker and Michael A. Weinstein theorized as the \"virtual class\" in 1994,3 Haraway analyzes the technologization of all areas of life from an intersectional perspective. Her cyborg also moves on the Net, but it is the antithesis of the [[hive mind]] because it keeps corporealities - and thus different social realities - firmly in view."
      },
      "date": 1639726937217
    },
    {
      "item": {
        "type": "factory",
        "id": "6a642aa09bf43614"
      },
      "id": "6a642aa09bf43614",
      "type": "add",
      "after": "fe18a416d5c3a5b3",
      "date": 1639726967580
    },
    {
      "type": "edit",
      "id": "6a642aa09bf43614",
      "item": {
        "type": "markdown",
        "id": "6a642aa09bf43614",
        "text": "## Der hive mind als (organischer) Cyborg"
      },
      "date": 1639726973207
    },
    {
      "type": "edit",
      "id": "6a642aa09bf43614",
      "item": {
        "type": "markdown",
        "id": "6a642aa09bf43614",
        "text": "## Der hive mind als (organischer) Cyborg\nThe hive mind as an (organic) cyborg"
      },
      "date": 1639726984890
    },
    {
      "type": "edit",
      "id": "6a642aa09bf43614",
      "item": {
        "type": "markdown",
        "id": "6a642aa09bf43614",
        "text": "## Der hive mind als (organischer) Cyborg\nThe hive mind as an (organic) cyborg\n"
      },
      "date": 1639727053808
    },
    {
      "type": "add",
      "id": "791b605e735428fa",
      "item": {
        "type": "markdown",
        "id": "791b605e735428fa",
        "text": "When Out of Control appeared, the first commercially successful browsers, NCSA Mosaic and, soon after, Netscape Navigator, had begun to network the world ever more rapidly. Light signals in fiber optic cables compressed space and time; the dotcom bubble grew, the new economy boomed. The \"complexity of computers and man-made systems,\" Kelly wrote, had reached \"the complexity of living things. \"27 A complexity so great that humans could not possibly maintain control over these systems."
      },
      "after": "6a642aa09bf43614",
      "date": 1639727054998
    },
    {
      "item": {
        "type": "factory",
        "id": "232f43142bd1da58"
      },
      "id": "232f43142bd1da58",
      "type": "add",
      "after": "791b605e735428fa",
      "date": 1639757167258
    },
    {
      "type": "edit",
      "id": "232f43142bd1da58",
      "item": {
        "type": "reference",
        "id": "232f43142bd1da58",
        "site": "kale.wiki.ralfbarkow.ch",
        "slug": "reflections-on-digital-tools",
        "title": "Reflections on digital tools",
        "text": "- found it both surprising and plausible to see that in humanities computing methods of interpretation and the objects to be represented are very close together"
      },
      "date": 1639757170052
    },
    {
      "id": "232f43142bd1da58",
      "type": "move",
      "order": [
        "232f43142bd1da58",
        "f4f8eba3e7c6932b",
        "da2c80a9a3799e31",
        "d1c68f5b4073d2f7",
        "00e7eec0c073e835",
        "15a58e00c0cb9ae9",
        "fe18a416d5c3a5b3",
        "6a642aa09bf43614",
        "791b605e735428fa"
      ],
      "date": 1639757176035
    },
    {
      "item": {
        "type": "factory",
        "id": "54fc58a2b16f8db9"
      },
      "id": "54fc58a2b16f8db9",
      "type": "add",
      "after": "791b605e735428fa",
      "date": 1639757232334
    },
    {
      "type": "edit",
      "id": "54fc58a2b16f8db9",
      "item": {
        "type": "pagefold",
        "id": "54fc58a2b16f8db9",
        "text": "~"
      },
      "date": 1639757236907
    },
    {
      "id": "54fc58a2b16f8db9",
      "type": "move",
      "order": [
        "232f43142bd1da58",
        "54fc58a2b16f8db9",
        "f4f8eba3e7c6932b",
        "da2c80a9a3799e31",
        "d1c68f5b4073d2f7",
        "00e7eec0c073e835",
        "15a58e00c0cb9ae9",
        "fe18a416d5c3a5b3",
        "6a642aa09bf43614",
        "791b605e735428fa"
      ],
      "date": 1639757242744
    },
    {
      "item": {
        "type": "factory",
        "id": "6025c966dabbd5d8"
      },
      "id": "6025c966dabbd5d8",
      "type": "add",
      "after": "791b605e735428fa",
      "date": 1639768300658
    },
    {
      "item": {
        "type": "factory",
        "id": "7834e2acb246ae9e"
      },
      "id": "7834e2acb246ae9e",
      "type": "add",
      "after": "6025c966dabbd5d8",
      "date": 1639768307998
    },
    {
      "type": "edit",
      "id": "6025c966dabbd5d8",
      "item": {
        "type": "pagefold",
        "id": "6025c966dabbd5d8",
        "text": "gt"
      },
      "date": 1639768326776
    },
    {
      "type": "edit",
      "id": "7834e2acb246ae9e",
      "item": {
        "type": "paragraph",
        "id": "7834e2acb246ae9e",
        "text": "Pharo is the runtime language in which the environment is built. We use it because makes it very cheap to experiment with new thoughts  (Smalltalk in general - Pharo in particular because it has a more solid basis). We likely would have not been able to go to the extent we did without an environment that allowed us to learn and explore like this. Now that we know what is possible, other tradeoffs are possible. We are certain other people will copy what we do. That's the primary reason we are doing it in the open. However, the worry is that people will copy only the shiny visible parts and this will not solve the problem.\n\nSo, what problem is that? Making a world of software sustainable by making the inside of the systems explainable. That's the goal. To get there we are talking about orders of magnitude more enhanced abilities as compared with the current baseline. So, it's certainly likely that people will find 2-3x improvement and regard it as a win. That's within reach without much effort. But, we likely need to enhance our abilities to reason about computation many times more to have a change for a sustainable future.\n\nNow, GT is implemented in Pharo and naturally, Pharo is the first supported language, too. The second language supported is the one with which we construct support for other languages (SmaCC). Also, on the analysis side, GT comes with support for other languages. Furthermore, Lepiter also comes with support for scripting JS and Python (including inspection and debugging support). More will likely come in the future.\n\nCan GT be used right now? Definitely. We use it extensively in concrete systems written in many languages and at different levels of abstraction. We get our funding by solving concrete problems. You can see some use cases in this Discord, like software-assessment, executable-specifications or data-exploration ."
      },
      "date": 1639768329920
    },
    {
      "type": "edit",
      "id": "7834e2acb246ae9e",
      "item": {
        "type": "paragraph",
        "id": "7834e2acb246ae9e",
        "text": "tudor girba — heute um 17:56 Uhr"
      },
      "date": 1639768378237
    },
    {
      "type": "add",
      "id": "3d423f99706a75f5",
      "item": {
        "type": "paragraph",
        "id": "3d423f99706a75f5",
        "text": "Pharo is the runtime language in which the environment is built. We use it because makes it very cheap to experiment with new thoughts  (Smalltalk in general - Pharo in particular because it has a more solid basis). We likely would have not been able to go to the extent we did without an environment that allowed us to learn and explore like this. Now that we know what is possible, other tradeoffs are possible. We are certain other people will copy what we do. That's the primary reason we are doing it in the open. However, the worry is that people will copy only the shiny visible parts and this will not solve the problem.\n\nSo, what problem is that? Making a world of software sustainable by making the inside of the systems explainable. That's the goal. To get there we are talking about orders of magnitude more enhanced abilities as compared with the current baseline. So, it's certainly likely that people will find 2-3x improvement and regard it as a win. That's within reach without much effort. But, we likely need to enhance our abilities to reason about computation many times more to have a change for a sustainable future.\n\nNow, GT is implemented in Pharo and naturally, Pharo is the first supported language, too. The second language supported is the one with which we construct support for other languages (SmaCC). Also, on the analysis side, GT comes with support for other languages. Furthermore, Lepiter also comes with support for scripting JS and Python (including inspection and debugging support). More will likely come in the future.\n\nCan GT be used right now? Definitely. We use it extensively in concrete systems written in many languages and at different levels of abstraction. We get our funding by solving concrete problems. You can see some use cases in this Discord, like software-assessment, executable-specifications or data-exploration ."
      },
      "after": "7834e2acb246ae9e",
      "date": 1639768379757
    },
    {
      "type": "edit",
      "id": "7834e2acb246ae9e",
      "item": {
        "type": "paragraph",
        "id": "7834e2acb246ae9e",
        "text": "tudor girba via [https://discord.com/channels/729445214812504107/735947900651175998/921445653765320714 discord]"
      },
      "date": 1639768404330
    },
    {
      "item": {
        "type": "factory",
        "id": "b3d6457f4b4861e9"
      },
      "id": "b3d6457f4b4861e9",
      "type": "add",
      "after": "3d423f99706a75f5",
      "date": 1639768546772
    },
    {
      "type": "edit",
      "id": "b3d6457f4b4861e9",
      "item": {
        "type": "paragraph",
        "id": "b3d6457f4b4861e9",
        "text": "[…]"
      },
      "date": 1639768555360
    },
    {
      "type": "add",
      "id": "78994cb506b2fa33",
      "item": {
        "type": "paragraph",
        "id": "78994cb506b2fa33",
        "text": "tudor girba — heute um 19:14 Uhr\nExactly! We call this the software environmentalism crisis: we create software ever faster, but we are unable to recycle old systems. We behave not unlike the plastic industry.\n\nTo recycle a system is to take it apart and refurbish for new purposes. But, before we can take it apart, we first have to understand the parts. Currently, this is the bottleneck and it relies on reading. As reading is capped to a constant speed, it cannot match a superlinear growth. Hence, the only way to a sustainable future is to make the understanding of the parts not depend on the size of the system. And the only way to do that is to get better at teaching our tools at what we care to learn about our systems.\n\nOf course, this is a tall order. But, the good news is that the software world has fractal-like properties. So, to affect large patterns, we have to affect the smallest pattern. That is why most of our work focused on the most basic tool: the inspector. \n"
      },
      "after": "b3d6457f4b4861e9",
      "date": 1639768561546
    },
    {
      "type": "edit",
      "id": "78994cb506b2fa33",
      "item": {
        "type": "paragraph",
        "id": "78994cb506b2fa33",
        "text": "tudor girba — heute um 19:14 Uhr\nExactly! We call this the software environmentalism crisis: we create software ever faster, but we are unable to recycle old systems. We behave not unlike the plastic industry."
      },
      "date": 1639768605428
    },
    {
      "type": "add",
      "id": "53e50ba941e00b93",
      "item": {
        "type": "paragraph",
        "id": "53e50ba941e00b93",
        "text": "\nTo recycle a system is to take it apart and refurbish for new purposes. But, before we can take it apart, we first have to understand the parts. Currently, this is the bottleneck and it relies on reading. As reading is capped to a constant speed, it cannot match a superlinear growth. Hence, the only way to a sustainable future is to make the understanding of the parts not depend on the size of the system. And the only way to do that is to get better at teaching our tools at what we care to learn about our systems.\n\nOf course, this is a tall order. But, the good news is that the software world has fractal-like properties. So, to affect large patterns, we have to affect the smallest pattern. That is why most of our work focused on the most basic tool: the inspector. \n"
      },
      "after": "78994cb506b2fa33",
      "date": 1639768608089
    },
    {
      "type": "add",
      "id": "701a00d792b1f7b9",
      "item": {
        "type": "paragraph",
        "id": "701a00d792b1f7b9",
        "text": "Also see [[Plastics]]"
      },
      "after": "78994cb506b2fa33",
      "date": 1639768625099
    },
    {
      "type": "edit",
      "id": "53e50ba941e00b93",
      "item": {
        "type": "paragraph",
        "id": "53e50ba941e00b93",
        "text": "To recycle a system is to take it apart and refurbish for new purposes. But, before we can take it apart, we first have to understand the parts. Currently, this is the bottleneck and it relies on reading. As reading is capped to a constant speed, it cannot match a superlinear growth. Hence, the only way to a sustainable future is to make the understanding of the parts not depend on the size of the system. And the only way to do that is to get better at teaching our tools at what we care to learn about our systems.\n\nOf course, this is a tall order. But, the good news is that the software world has fractal-like properties. So, to affect large patterns, we have to affect the smallest pattern. That is why most of our work focused on the most basic tool: the inspector. \n"
      },
      "date": 1639768918557
    },
    {
      "item": {
        "type": "factory",
        "id": "c2deb35646f1e1eb"
      },
      "id": "c2deb35646f1e1eb",
      "type": "add",
      "after": "53e50ba941e00b93",
      "date": 1639769031120
    },
    {
      "type": "edit",
      "id": "c2deb35646f1e1eb",
      "item": {
        "type": "pagefold",
        "id": "c2deb35646f1e1eb",
        "text": "DE"
      },
      "date": 1639769034819
    },
    {
      "item": {
        "type": "factory",
        "id": "8d73a7015c969e3d"
      },
      "id": "8d73a7015c969e3d",
      "type": "add",
      "after": "c2deb35646f1e1eb",
      "date": 1639769036360
    },
    {
      "type": "edit",
      "id": "8d73a7015c969e3d",
      "item": {
        "type": "paragraph",
        "id": "8d73a7015c969e3d",
        "text": "Ein System zu recyceln bedeutet, es zu zerlegen und für neue Zwecke aufzubereiten. Aber bevor wir es auseinandernehmen können, müssen wir erst die Teile verstehen. Dies ist derzeit der Engpass, und er beruht auf dem Lesen. Da das Lesen auf eine konstante Geschwindigkeit begrenzt ist, kann es nicht mit einem superlinearen Wachstum Schritt halten. Der einzige Weg in eine nachhaltige Zukunft besteht also darin, das Verständnis der Teile nicht von der Größe des Systems abhängig zu machen. Und die einzige Möglichkeit, dies zu erreichen, besteht darin, unsere Werkzeuge besser auf das zu trainieren, was wir über unsere Systeme lernen wollen.\n\nNatürlich ist das eine große Aufgabe. Aber die gute Nachricht ist, dass die Software-Welt fraktalähnliche Eigenschaften hat. Um also große Muster zu beeinflussen, müssen wir das kleinste Muster beeinflussen. Deshalb konzentrierte sich der Großteil unserer Arbeit auf das grundlegendste Werkzeug: den Inspektor. \n"
      },
      "date": 1639769038827
    },
    {
      "type": "edit",
      "id": "701a00d792b1f7b9",
      "item": {
        "type": "paragraph",
        "id": "701a00d792b1f7b9",
        "text": "Also see [[Max Liboiron]], [[Plastics]]"
      },
      "date": 1639769208960
    },
    {
      "type": "edit",
      "id": "53e50ba941e00b93",
      "item": {
        "type": "paragraph",
        "id": "53e50ba941e00b93",
        "text": "To recycle a system is to take it apart and refurbish for new purposes. But, before we can take it apart, we first have to understand the parts. Currently, this is the bottleneck and it relies on reading. As reading is capped to a constant speed, it cannot match a superlinear growth. Hence, the only way to a sustainable future is to make the understanding of the parts not depend on the size of the system. And the only way to do that is to get better at teaching our tools at what we care to learn about our systems.\n\nOf course, this is a tall order. But, the good news is that the software world has fractal-like properties. So, to affect large [[patterns]], we have to affect the smallest pattern. That is why most of our work focused on the most basic tool: the inspector. \n"
      },
      "date": 1639769705799
    },
    {
      "type": "edit",
      "id": "53e50ba941e00b93",
      "item": {
        "type": "paragraph",
        "id": "53e50ba941e00b93",
        "text": "To recycle a system is to take it apart and refurbish for new purposes. But, before we can take it apart, we first have to understand the parts. Currently, this is the bottleneck and it relies on reading. As reading is capped to a constant speed, it cannot match a superlinear growth. Hence, the only way to a sustainable future is to make the understanding of the parts not depend on the size of the system. And the only way to do that is to get better at teaching our tools at what we care to learn about our systems.\n\nOf course, this is a tall order. But, the good news is that the software world has fractal-like properties. So, to affect large [[patterns]], we have to affect the smallest [[pattern]]. That is why most of our work focused on the most basic tool: the inspector. \n"
      },
      "date": 1639769852722
    },
    {
      "item": {
        "type": "factory",
        "id": "6d88407bab24ec15"
      },
      "id": "6d88407bab24ec15",
      "type": "add",
      "after": "8d73a7015c969e3d",
      "date": 1639770630028
    },
    {
      "type": "edit",
      "id": "6d88407bab24ec15",
      "item": {
        "type": "pagefold",
        "id": "6d88407bab24ec15",
        "text": "[…]"
      },
      "date": 1639770643239
    },
    {
      "item": {
        "type": "factory",
        "id": "35ec1f615823cc72"
      },
      "id": "35ec1f615823cc72",
      "type": "add",
      "after": "6d88407bab24ec15",
      "date": 1639770649742
    },
    {
      "type": "edit",
      "id": "35ec1f615823cc72",
      "item": {
        "type": "paragraph",
        "id": "35ec1f615823cc72",
        "text": "tudor girba — heute um 20:48 Uhr\nWhen the environment changes, the system should change, too. It should be \"recycled\" for the new reality. Some changes are more obvious: eg, how do I scale the system to deal with a sudden increase in the demand? But, most changes are smaller in scope: eg, is my system affected by the log4shell problem. In fact, any evolution of the system is a small recycling.\n\nSo, what happens when we cannot change them anymore? There are visible effects on businesses. And there are less visible ones, too. For example, when the COVID pandemic started people could not get their unemployment support because systems could not handle the increase:\nhttps://twitter.com/girba/status/1246750717538373632?s=20"
      },
      "date": 1639770654872
    },
    {
      "type": "edit",
      "id": "35ec1f615823cc72",
      "item": {
        "type": "paragraph",
        "id": "35ec1f615823cc72",
        "text": "tudor girba — heute um 20:48 Uhr\nWhen the environment changes, the system should change, too. It should be \"recycled\" for the new reality. Some changes are more obvious: eg, how do I scale the system to deal with a sudden increase in the demand? But, most changes are smaller in scope: eg, is my system affected by the [[log4shell]] problem. In fact, any evolution of the system is a small recycling.\n\nSo, what happens when we cannot change them anymore? There are visible effects on businesses. And there are less visible ones, too. For example, when the COVID pandemic started people could not get their unemployment support because systems could not handle the increase:\nhttps://twitter.com/girba/status/1246750717538373632?s=20"
      },
      "date": 1639770694624
    },
    {
      "type": "edit",
      "id": "35ec1f615823cc72",
      "item": {
        "type": "markdown",
        "id": "35ec1f615823cc72",
        "text": "tudor girba — heute um 20:48 Uhr\nWhen the environment changes, the system should change, too. It should be \"recycled\" for the new reality. Some changes are more obvious: eg, how do I scale the system to deal with a sudden increase in the demand? But, most changes are smaller in scope: eg, is my system affected by the [[log4shell]] problem. In fact, any evolution of the system is a small recycling.\n\nSo, what happens when we cannot change them anymore? There are visible effects on businesses. And there are less visible ones, too. For example, when the COVID pandemic started people could not get their unemployment support because systems could not handle the increase:\nhttps://twitter.com/girba/status/1246750717538373632?s=20"
      },
      "date": 1639770719350
    },
    {
      "item": {
        "type": "factory",
        "id": "b6e8cb7857fb526c"
      },
      "id": "b6e8cb7857fb526c",
      "type": "add",
      "after": "35ec1f615823cc72",
      "date": 1639770842012
    },
    {
      "type": "remove",
      "id": "b6e8cb7857fb526c",
      "date": 1639770845463
    },
    {
      "item": {
        "type": "factory",
        "id": "346e3afe9ac2a17c"
      },
      "id": "346e3afe9ac2a17c",
      "type": "add",
      "after": "35ec1f615823cc72",
      "date": 1639770849864
    },
    {
      "type": "edit",
      "id": "346e3afe9ac2a17c",
      "item": {
        "type": "pagefold",
        "id": "346e3afe9ac2a17c",
        "text": "~"
      },
      "date": 1639770854959
    },
    {
      "item": {
        "type": "factory",
        "id": "ec526859dda80e0f"
      },
      "id": "ec526859dda80e0f",
      "type": "add",
      "after": "346e3afe9ac2a17c",
      "date": 1639770859066
    },
    {
      "item": {
        "type": "factory",
        "id": "80472b7b435ffb53"
      },
      "id": "80472b7b435ffb53",
      "type": "add",
      "after": "ec526859dda80e0f",
      "date": 1639770865360
    },
    {
      "type": "remove",
      "id": "ec526859dda80e0f",
      "date": 1639770869157
    },
    {
      "type": "remove",
      "id": "80472b7b435ffb53",
      "date": 1639770872809
    },
    {
      "item": {
        "type": "factory",
        "id": "20c132236e18b5df"
      },
      "id": "20c132236e18b5df",
      "type": "add",
      "after": "346e3afe9ac2a17c",
      "date": 1639770874561
    },
    {
      "type": "remove",
      "id": "20c132236e18b5df",
      "date": 1639770879080
    },
    {
      "item": {
        "type": "factory",
        "id": "eb1a6db2943b1b68"
      },
      "id": "eb1a6db2943b1b68",
      "type": "add",
      "after": "346e3afe9ac2a17c",
      "date": 1639770881783
    },
    {
      "type": "edit",
      "id": "eb1a6db2943b1b68",
      "item": {
        "type": "video",
        "id": "eb1a6db2943b1b68",
        "text": "YOUTUBE dOhkO_fk9rQ"
      },
      "date": 1639770891655
    },
    {
      "item": {
        "type": "factory",
        "id": "42a7a1d4c9f0ed2b"
      },
      "id": "42a7a1d4c9f0ed2b",
      "type": "add",
      "after": "eb1a6db2943b1b68",
      "date": 1639771335226
    },
    {
      "type": "remove",
      "id": "42a7a1d4c9f0ed2b",
      "date": 1639771339903
    },
    {
      "item": {
        "type": "factory",
        "id": "2d28fd4cc37e76df"
      },
      "id": "2d28fd4cc37e76df",
      "type": "add",
      "after": "eb1a6db2943b1b68",
      "date": 1639771344454
    },
    {
      "type": "edit",
      "id": "2d28fd4cc37e76df",
      "item": {
        "type": "paragraph",
        "id": "2d28fd4cc37e76df",
        "text": "Sean DeNigris\n@SeanDenigris\n#GToolkit extension to share variables between tools, even in other tabs or GtWorlds. \n\nSooths a major pain point for end user-like tasks right in the GT IDE w/o the need for front-end GUIs.\n\nInspired by @pharoproject\n's variable sharing feature in v. 9"
      },
      "date": 1639771346696
    },
    {
      "id": "2d28fd4cc37e76df",
      "type": "move",
      "order": [
        "232f43142bd1da58",
        "54fc58a2b16f8db9",
        "f4f8eba3e7c6932b",
        "da2c80a9a3799e31",
        "d1c68f5b4073d2f7",
        "00e7eec0c073e835",
        "15a58e00c0cb9ae9",
        "fe18a416d5c3a5b3",
        "6a642aa09bf43614",
        "791b605e735428fa",
        "6025c966dabbd5d8",
        "7834e2acb246ae9e",
        "3d423f99706a75f5",
        "b3d6457f4b4861e9",
        "78994cb506b2fa33",
        "701a00d792b1f7b9",
        "53e50ba941e00b93",
        "c2deb35646f1e1eb",
        "8d73a7015c969e3d",
        "6d88407bab24ec15",
        "35ec1f615823cc72",
        "346e3afe9ac2a17c",
        "2d28fd4cc37e76df",
        "eb1a6db2943b1b68"
      ],
      "date": 1639771351041
    },
    {
      "type": "edit",
      "id": "eb1a6db2943b1b68",
      "item": {
        "type": "video",
        "id": "eb1a6db2943b1b68",
        "text": "YOUTUBE dOhkO_fk9rQ\nGToolkit - Share Variables between Tools"
      },
      "date": 1639771394176
    },
    {
      "item": {
        "type": "factory",
        "id": "979deb19c6071a2d"
      },
      "id": "979deb19c6071a2d",
      "type": "add",
      "after": "eb1a6db2943b1b68",
      "date": 1639771411284
    },
    {
      "type": "edit",
      "id": "979deb19c6071a2d",
      "item": {
        "type": "paragraph",
        "id": "979deb19c6071a2d",
        "text": "Demo of an extension supporting sharing of variables across tools, even in different tabs or different GtWorlds. Because GT is so great at bringing models to life, I have been relying on the IDE itself for end user tasks (where I am the end user) instead of writing front-end GUIs like I used to in Pharo. During this activity, a major pain point for me with GT has been data which is trapped in one tool (e.g. an inspector, playground) and needed in another. I got inspired by Pharo 9's variable-sharing feature and decided I needed it in GT. I finally got around to implementation. Hope it helps..."
      },
      "date": 1639771416293
    }
  ]
}