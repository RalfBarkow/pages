{
  "title": "Transparent Proxies",
  "story": [
    {
      "type": "markdown",
      "id": "9aeafe89aa585b00",
      "text": "An object which represents an object on a remote system is called a [[Proxy]]. \n"
    },
    {
      "type": "markdown",
      "id": "9c8c2226384ccb1c",
      "text": "Ideally, it forwards every message sent to it to the remote object, and so provides the illusion of transparent remote messaging. Remote messaging in Smalltalk is often done by using a proxy class which inherits and implements as few messages as possible, and overriding the handler message sent by the virtual machine when a message is not understood. This provides enough coverage to do many useful things, but some messages handled specially by the virtual machine are not forwarded. Some use cases, like remote debugging, require forwarding even those special messages.\n"
    },
    {
      "type": "markdown",
      "id": "1fb87f872ed729c5",
      "text": "To achieve total forwarding coverage, we must modify the virtual machine. There are some situations where this is undesirable (e.g., a lack of tools or expertise, or a requirement to use a past virtual machine unmodified). [[Tether]] uses the “does not understand” tactic above in these situations, but provides a modified virtual machine for the rest. In this virtual machine, message forwarding is triggered during method lookup for instances of a specific proxy class (which can be located anywhere in the class hierarchy). Method caching and methods implemented directly as virtual machine instructions are also appropriately adapted. There are a few messages which proxies must understand locally, to participate in [[Live Serialization]]. These messages are also handled specially by the virtual machine."
    },
    {
      "type": "markdown",
      "id": "b0324cbfd04518c3",
      "text": "⇒ [[See for Yourself]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Transparent Proxies",
        "story": []
      },
      "date": 1628927790258
    },
    {
      "item": {
        "type": "factory",
        "id": "47c4fd0997f02c5c"
      },
      "id": "47c4fd0997f02c5c",
      "type": "add",
      "date": 1628927798552
    },
    {
      "type": "remove",
      "id": "47c4fd0997f02c5c",
      "date": 1628927799550
    },
    {
      "item": {
        "type": "factory",
        "id": "9aeafe89aa585b00"
      },
      "id": "9aeafe89aa585b00",
      "type": "add",
      "date": 1628927800766
    },
    {
      "type": "edit",
      "id": "9aeafe89aa585b00",
      "item": {
        "type": "markdown",
        "id": "9aeafe89aa585b00",
        "text": "An object which represents an object on a remote system is called a proxy. Ideally, it forwards every message sent to it to the remote object, and so provides the illusion of transparent remote messaging. Remote messaging in Smalltalk is often done by using a proxy class which inherits and implements as few messages as possible, and overriding the handler message sent by the virtual machine when a message is not understood. This provides enough coverage to do many useful things, but some messages handled specially by the virtual machine are not forwarded. Some use cases, like remote debugging, require forwarding even those special messages.\n\nTo achieve total forwarding coverage, we must modify the virtual machine. There are some situations where this is undesirable (e.g., a lack of tools or expertise, or a requirement to use a past virtual machine unmodified). Tether uses the “does not understand” tactic above in these situations, but provides a modified virtual machine for the rest. In this virtual machine, message forwarding is triggered during method lookup for instances of a specific proxy class (which can be located anywhere in the class hierarchy). Method caching and methods implemented directly as virtual machine instructions are also appropriately adapted. There are a few messages which proxies must understand locally, to participate in live serialization. These messages are also handled specially by the virtual machine."
      },
      "date": 1628927803308
    },
    {
      "type": "edit",
      "id": "9aeafe89aa585b00",
      "item": {
        "type": "markdown",
        "id": "9aeafe89aa585b00",
        "text": "An object which represents an object on a remote system is called a *proxy*. \n"
      },
      "date": 1628927829729
    },
    {
      "type": "add",
      "id": "9c8c2226384ccb1c",
      "item": {
        "type": "markdown",
        "id": "9c8c2226384ccb1c",
        "text": "Ideally, it forwards every message sent to it to the remote object, and so provides the illusion of transparent remote messaging. Remote messaging in Smalltalk is often done by using a proxy class which inherits and implements as few messages as possible, and overriding the handler message sent by the virtual machine when a message is not understood. This provides enough coverage to do many useful things, but some messages handled specially by the virtual machine are not forwarded. Some use cases, like remote debugging, require forwarding even those special messages.\n\nTo achieve total forwarding coverage, we must modify the virtual machine. There are some situations where this is undesirable (e.g., a lack of tools or expertise, or a requirement to use a past virtual machine unmodified). Tether uses the “does not understand” tactic above in these situations, but provides a modified virtual machine for the rest. In this virtual machine, message forwarding is triggered during method lookup for instances of a specific proxy class (which can be located anywhere in the class hierarchy). Method caching and methods implemented directly as virtual machine instructions are also appropriately adapted. There are a few messages which proxies must understand locally, to participate in live serialization. These messages are also handled specially by the virtual machine."
      },
      "after": "9aeafe89aa585b00",
      "date": 1628927830598
    },
    {
      "type": "edit",
      "id": "9c8c2226384ccb1c",
      "item": {
        "type": "markdown",
        "id": "9c8c2226384ccb1c",
        "text": "Ideally, it forwards every message sent to it to the remote object, and so provides the illusion of transparent remote messaging. Remote messaging in Smalltalk is often done by using a proxy class which inherits and implements as few messages as possible, and overriding the handler message sent by the virtual machine when a message is not understood. This provides enough coverage to do many useful things, but some messages handled specially by the virtual machine are not forwarded. Some use cases, like remote debugging, require forwarding even those special messages.\n"
      },
      "date": 1628927872969
    },
    {
      "type": "add",
      "id": "1fb87f872ed729c5",
      "item": {
        "type": "markdown",
        "id": "1fb87f872ed729c5",
        "text": "\nTo achieve total forwarding coverage, we must modify the virtual machine. There are some situations where this is undesirable (e.g., a lack of tools or expertise, or a requirement to use a past virtual machine unmodified). [[Tether]] uses the “does not understand” tactic above in these situations, but provides a modified virtual machine for the rest. In this virtual machine, message forwarding is triggered during method lookup for instances of a specific proxy class (which can be located anywhere in the class hierarchy). Method caching and methods implemented directly as virtual machine instructions are also appropriately adapted. There are a few messages which proxies must understand locally, to participate in live serialization. These messages are also handled specially by the virtual machine."
      },
      "after": "9c8c2226384ccb1c",
      "date": 1628927881752
    },
    {
      "item": {
        "type": "factory",
        "id": "b0324cbfd04518c3"
      },
      "id": "b0324cbfd04518c3",
      "type": "add",
      "after": "1fb87f872ed729c5",
      "date": 1628927910003
    },
    {
      "type": "edit",
      "id": "b0324cbfd04518c3",
      "item": {
        "type": "markdown",
        "id": "b0324cbfd04518c3",
        "text": "Next: [[See for Yourself]]"
      },
      "date": 1628927925696
    },
    {
      "type": "edit",
      "id": "9aeafe89aa585b00",
      "item": {
        "type": "markdown",
        "id": "9aeafe89aa585b00",
        "text": "An object which represents an object on a remote system is called a [[Proxy]]. \n"
      },
      "date": 1704985631989
    },
    {
      "type": "edit",
      "id": "1fb87f872ed729c5",
      "item": {
        "type": "markdown",
        "id": "1fb87f872ed729c5",
        "text": "To achieve total forwarding coverage, we must modify the virtual machine. There are some situations where this is undesirable (e.g., a lack of tools or expertise, or a requirement to use a past virtual machine unmodified). [[Tether]] uses the “does not understand” tactic above in these situations, but provides a modified virtual machine for the rest. In this virtual machine, message forwarding is triggered during method lookup for instances of a specific proxy class (which can be located anywhere in the class hierarchy). Method caching and methods implemented directly as virtual machine instructions are also appropriately adapted. There are a few messages which proxies must understand locally, to participate in [[Live Serialization]]. These messages are also handled specially by the virtual machine."
      },
      "date": 1704985710235
    },
    {
      "type": "edit",
      "id": "b0324cbfd04518c3",
      "item": {
        "type": "markdown",
        "id": "b0324cbfd04518c3",
        "text": "⇒ [[See for Yourself]]"
      },
      "date": 1704985723823
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1704985833813
    }
  ]
}