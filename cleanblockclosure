{
  "title": "CleanBlockClosure",
  "story": [
    {
      "type": "markdown",
      "id": "988a3537a12bcec4",
      "text": "Class: CleanBlockClosure\n                                                                                                    \nExperimental\n\nThis is disabled by default.\n\nIf you want to experiment, you can enable the #optionCleanBlockClosure compiler option.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "913c2cff8fa448e8",
      "text": "In the current system (with that option disabled), blocks are compiled to instances of [[CompiledBlock]].\nThey are stored as literals and we create/push a FullBlockClosure with a special bytecode.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "3e983fadcb3a583c",
      "text": "This bytecode thus creates a FullBock at runtime.\n\nIf a block is clean (does not access self, super, outer temps/args, does not return), we can create the block\nat compile time instead.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "fc69fc7d800970ae",
      "text": "CleanBlockClosure is exactly that: a [[closure]] created at compile time, it is stored in the literal frame and just pushed on the stack.\n\nFor debugging, it does implement all needed machinary to read temps (via tempNamed:) just like a [[FullBlockClosure]]\n\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "CleanBlockClosure",
        "story": []
      },
      "date": 1654074486647
    },
    {
      "item": {
        "type": "factory",
        "id": "988a3537a12bcec4"
      },
      "id": "988a3537a12bcec4",
      "type": "add",
      "date": 1654074492782
    },
    {
      "type": "edit",
      "id": "988a3537a12bcec4",
      "item": {
        "type": "markdown",
        "id": "988a3537a12bcec4",
        "text": "Class: CleanBlockClosure\n                                                                                                    \nExperimental\n\nThis is disabled by default.\n\nIf you want to experiment, you can enable the #optionCleanBlockClosure compiler option.\n\nIn the current system (with that option disabled), blocks are compiled to instances of CompiledBlock.\nThey are stored as literals and we create/push a FullBlockClosure with a special bytecode.\n\nThis bytecode thus creates a FullBock at runtime.\n\nIf a block is clean (does not access self, super, outer temps/args, does not return), we can create the block\nat compile time instead.\n\nCleanBlockClosure is exactly that: a closure created at compile time, it is stored in the literal frame and just\npushed on the stack.\n\nFor debugging, it does implement all needed machinary to read temps (via tempNamed:) just like a FullBlockClosure\n\n"
      },
      "date": 1654074494947
    },
    {
      "type": "edit",
      "id": "988a3537a12bcec4",
      "item": {
        "type": "markdown",
        "id": "988a3537a12bcec4",
        "text": "Class: CleanBlockClosure\n                                                                                                    \nExperimental\n\nThis is disabled by default.\n\nIf you want to experiment, you can enable the #optionCleanBlockClosure compiler option.\n\nIn the current system (with that option disabled), blocks are compiled to instances of CompiledBlock.\nThey are stored as literals and we create/push a FullBlockClosure with a special bytecode.\n\nThis bytecode thus creates a FullBock at runtime.\n\nIf a block is clean (does not access self, super, outer temps/args, does not return), we can create the block\nat compile time instead.\n\n\n"
      },
      "date": 1654074535161
    },
    {
      "type": "add",
      "id": "fc69fc7d800970ae",
      "item": {
        "type": "markdown",
        "id": "fc69fc7d800970ae",
        "text": "CleanBlockClosure is exactly that: a [[closure]] created at compile time, it is stored in the literal frame and just\npushed on the stack.\n\nFor debugging, it does implement all needed machinary to read temps (via tempNamed:) just like a FullBlockClosure\n\n"
      },
      "after": "988a3537a12bcec4",
      "date": 1654074545708
    },
    {
      "type": "edit",
      "id": "fc69fc7d800970ae",
      "item": {
        "type": "markdown",
        "id": "fc69fc7d800970ae",
        "text": "CleanBlockClosure is exactly that: a [[closure]] created at compile time, it is stored in the literal frame and just pushed on the stack.\n\nFor debugging, it does implement all needed machinary to read temps (via tempNamed:) just like a FullBlockClosure\n\n"
      },
      "date": 1654074619792
    },
    {
      "type": "edit",
      "id": "988a3537a12bcec4",
      "item": {
        "type": "markdown",
        "id": "988a3537a12bcec4",
        "text": "Class: CleanBlockClosure\n                                                                                                    \nExperimental\n\nThis is disabled by default.\n\nIf you want to experiment, you can enable the #optionCleanBlockClosure compiler option.\n\n\n"
      },
      "date": 1654074660831
    },
    {
      "type": "add",
      "id": "913c2cff8fa448e8",
      "item": {
        "type": "markdown",
        "id": "913c2cff8fa448e8",
        "text": "In the current system (with that option disabled), blocks are compiled to instances of CompiledBlock.\nThey are stored as literals and we create/push a FullBlockClosure with a special bytecode.\n\n\n"
      },
      "after": "988a3537a12bcec4",
      "date": 1654074663046
    },
    {
      "type": "add",
      "id": "3e983fadcb3a583c",
      "item": {
        "type": "markdown",
        "id": "3e983fadcb3a583c",
        "text": "This bytecode thus creates a FullBock at runtime.\n\nIf a block is clean (does not access self, super, outer temps/args, does not return), we can create the block\nat compile time instead.\n\n\n"
      },
      "after": "913c2cff8fa448e8",
      "date": 1654074665133
    },
    {
      "type": "edit",
      "id": "913c2cff8fa448e8",
      "item": {
        "type": "markdown",
        "id": "913c2cff8fa448e8",
        "text": "In the current system (with that option disabled), blocks are compiled to instances of [[CompiledBlock]].\nThey are stored as literals and we create/push a FullBlockClosure with a special bytecode.\n\n\n"
      },
      "date": 1654074672734
    },
    {
      "type": "edit",
      "id": "fc69fc7d800970ae",
      "item": {
        "type": "markdown",
        "id": "fc69fc7d800970ae",
        "text": "CleanBlockClosure is exactly that: a [[closure]] created at compile time, it is stored in the literal frame and just pushed on the stack.\n\nFor debugging, it does implement all needed machinary to read temps (via tempNamed:) just like a [[FullBlockClosure]]\n\n"
      },
      "date": 1654074726132
    }
  ]
}