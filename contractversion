{
  "title": "ContractVersion",
  "story": [
    {
      "type": "paragraph",
      "id": "2c15c809ee15734d",
      "text": "[[testPayLastMonth]]"
    },
    {
      "type": "paragraph",
      "id": "89ac3fd305aceb91",
      "text": "Using [[Time Travel]], we can refactor the naïve test case into one that can remember changing pay rates."
    },
    {
      "type": "paragraph",
      "id": "eb26c8b5616040b7",
      "text": "For now we can use simple Dates as the lookup key.\n"
    },
    {
      "type": "code",
      "id": "5ab5bbc30ff71a6b",
      "text": "NavigationTest>>testPayToday\n| contract version |\ncontract := Contract new.\nversion := ContractVersion pay: 1000.\ncontract versionAt: '2/1/99' asDate put: version.\nself assert: (contract versionAt: '2/1/99' asDate) pay = 1000\n"
    },
    {
      "type": "paragraph",
      "id": "073d2b3d7a8ef3a6",
      "text": "To make this test case run, first we create [[Contract]] (the History part of our Time Travel):"
    },
    {
      "type": "code",
      "id": "5880907b3d942c48",
      "text": "Contract\nSuperclass: Object\nInstance variables: versions\n"
    },
    {
      "type": "paragraph",
      "id": "55a2483fa63cada8",
      "text": "Now we can define the ContractVersion (we omit the Constructor Method #pay:)\nContractVersion\nSuperclass: Object\nInstance variables: pay date\nWith this in place, we can implement the two visible methods in Contract- #versionAt:put: and\n#versionAt:. (In some cases you will want to make a Safe Copy of the Version before you store it, but\nwe are just careful not to modify a Version after we have stored it in a History.)\nContract>>versionAt: aDate put: aVersion\naVersion date: aDate.\nself versions add: aVersion"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "ContractVersion",
        "story": []
      },
      "date": 1654322139127
    },
    {
      "item": {
        "type": "factory",
        "id": "2c15c809ee15734d"
      },
      "id": "2c15c809ee15734d",
      "type": "add",
      "date": 1654322140555
    },
    {
      "type": "edit",
      "id": "2c15c809ee15734d",
      "item": {
        "type": "paragraph",
        "id": "2c15c809ee15734d",
        "text": "[[testPayLastMonth]]"
      },
      "date": 1654322144448
    },
    {
      "item": {
        "type": "paragraph",
        "id": "89ac3fd305aceb91",
        "text": "Using [[Time Travel]], we can refactor the naïve test case into one that can remember changing pay rates."
      },
      "id": "89ac3fd305aceb91",
      "type": "add",
      "after": "2c15c809ee15734d",
      "date": 1654322983322
    },
    {
      "type": "edit",
      "id": "89ac3fd305aceb91",
      "item": {
        "type": "paragraph",
        "id": "89ac3fd305aceb91",
        "text": "Using [[Time Travel]], we can refactor the naïve test case into one that can remember changing pay rates."
      },
      "date": 1654322987373
    },
    {
      "type": "edit",
      "id": "89ac3fd305aceb91",
      "item": {
        "type": "paragraph",
        "id": "89ac3fd305aceb91",
        "text": "Using [[Time Travel]], we can refactor the naïve test case into one that can remember changing pay rates."
      },
      "date": 1654323003198
    },
    {
      "type": "edit",
      "id": "89ac3fd305aceb91",
      "item": {
        "type": "paragraph",
        "id": "89ac3fd305aceb91",
        "text": "Using [[Time Travel]], we can refactor the naïve test case into one that can remember changing pay rates."
      },
      "date": 1654323008224
    },
    {
      "type": "add",
      "id": "eb26c8b5616040b7",
      "item": {
        "type": "paragraph",
        "id": "eb26c8b5616040b7",
        "text": "For now we can use simple Dates as the lookup key.\n"
      },
      "after": "89ac3fd305aceb91",
      "date": 1654323009989
    },
    {
      "type": "add",
      "id": "85ba03c18c041b3e",
      "item": {
        "type": "paragraph",
        "id": "85ba03c18c041b3e",
        "text": ""
      },
      "after": "eb26c8b5616040b7",
      "date": 1654323011951
    },
    {
      "item": {
        "type": "code",
        "id": "5ab5bbc30ff71a6b",
        "text": "NavigationTest>>testPayToday\n| contract version |\ncontract := Contract new.\nversion := ContractVersion pay: 1000.\ncontract versionAt: '2/1/99' asDate put: version.\nself assert: (contract versionAt: '2/1/99' asDate) pay = 1000\n"
      },
      "id": "5ab5bbc30ff71a6b",
      "type": "add",
      "after": "073d2b3d7a8ef3a6",
      "date": 1654323015306
    },
    {
      "id": "5ab5bbc30ff71a6b",
      "type": "move",
      "order": [
        "2c15c809ee15734d",
        "89ac3fd305aceb91",
        "eb26c8b5616040b7",
        "5ab5bbc30ff71a6b",
        "85ba03c18c041b3e",
        "073d2b3d7a8ef3a6"
      ],
      "date": 1654323017516,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "073d2b3d7a8ef3a6",
      "item": {
        "type": "paragraph",
        "id": "073d2b3d7a8ef3a6",
        "text": "To make this test case run, first we create Contract (the History part of our Time Travel):\nContract\nSuperclass: Object\nInstance variables: versions\nNow we can define the ContractVersion (we omit the Constructor Method #pay:)\nContractVersion\nSuperclass: Object\nInstance variables: pay date\nWith this in place, we can implement the two visible methods in Contract- #versionAt:put: and\n#versionAt:. (In some cases you will want to make a Safe Copy of the Version before you store it, but\nwe are just careful not to modify a Version after we have stored it in a History.)\nContract>>versionAt: aDate put: aVersion\naVersion date: aDate.\nself versions add: aVersion"
      },
      "after": "85ba03c18c041b3e",
      "date": 1654323018534
    },
    {
      "type": "remove",
      "id": "85ba03c18c041b3e",
      "date": 1654323022092
    },
    {
      "type": "edit",
      "id": "5ab5bbc30ff71a6b",
      "item": {
        "type": "code",
        "id": "5ab5bbc30ff71a6b",
        "text": "NavigationTest>>testPayToday\n| contract version |\ncontract := Contract new.\nversion := ContractVersion pay: 1000.\ncontract versionAt: '2/1/99' asDate put: version.\nself assert: (contract versionAt: '2/1/99' asDate) pay = 1000\n"
      },
      "date": 1654323023201
    },
    {
      "type": "fork",
      "date": 1654323025985
    },
    {
      "type": "edit",
      "id": "073d2b3d7a8ef3a6",
      "item": {
        "type": "paragraph",
        "id": "073d2b3d7a8ef3a6",
        "text": "To make this test case run, first we create Contract (the History part of our Time Travel):"
      },
      "date": 1654323056807
    },
    {
      "type": "add",
      "id": "5657ee12abba355b",
      "item": {
        "type": "paragraph",
        "id": "5657ee12abba355b",
        "text": "Contract\nSuperclass: Object\nInstance variables: versions\n"
      },
      "after": "073d2b3d7a8ef3a6",
      "date": 1654323058389
    },
    {
      "item": {
        "type": "factory",
        "id": "a37bf7856419cff8"
      },
      "id": "a37bf7856419cff8",
      "type": "add",
      "after": "55a2483fa63cada8",
      "date": 1654323062173
    },
    {
      "type": "add",
      "id": "55a2483fa63cada8",
      "item": {
        "type": "paragraph",
        "id": "55a2483fa63cada8",
        "text": "Now we can define the ContractVersion (we omit the Constructor Method #pay:)\nContractVersion\nSuperclass: Object\nInstance variables: pay date\nWith this in place, we can implement the two visible methods in Contract- #versionAt:put: and\n#versionAt:. (In some cases you will want to make a Safe Copy of the Version before you store it, but\nwe are just careful not to modify a Version after we have stored it in a History.)\nContract>>versionAt: aDate put: aVersion\naVersion date: aDate.\nself versions add: aVersion"
      },
      "after": "5657ee12abba355b",
      "date": 1654323063688
    },
    {
      "type": "remove",
      "id": "a37bf7856419cff8",
      "date": 1654323065783
    },
    {
      "item": {
        "type": "factory",
        "id": "5880907b3d942c48"
      },
      "id": "5880907b3d942c48",
      "type": "add",
      "after": "55a2483fa63cada8",
      "date": 1654323067226
    },
    {
      "id": "5880907b3d942c48",
      "type": "move",
      "order": [
        "2c15c809ee15734d",
        "89ac3fd305aceb91",
        "eb26c8b5616040b7",
        "5ab5bbc30ff71a6b",
        "073d2b3d7a8ef3a6",
        "5657ee12abba355b",
        "5880907b3d942c48",
        "55a2483fa63cada8"
      ],
      "date": 1654323070197
    },
    {
      "type": "remove",
      "id": "5657ee12abba355b",
      "date": 1654323075484
    },
    {
      "type": "edit",
      "id": "5880907b3d942c48",
      "item": {
        "type": "code",
        "id": "5880907b3d942c48",
        "text": "Contract\nSuperclass: Object\nInstance variables: versions\n"
      },
      "date": 1654323076660
    },
    {
      "type": "edit",
      "id": "073d2b3d7a8ef3a6",
      "item": {
        "type": "paragraph",
        "id": "073d2b3d7a8ef3a6",
        "text": "To make this test case run, first we create [[Contract]] (the History part of our Time Travel):"
      },
      "date": 1654323089477
    },
    {
      "type": "fork",
      "date": 1654323145268
    }
  ]
}