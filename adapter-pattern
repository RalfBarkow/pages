{
  "title": "Adapter Pattern",
  "story": [
    {
      "type": "html",
      "text": "<b>Intent:</b> <i>Convert</i> the interface of some class <i>b</i> into an interface <i>a</i> that some client class <i>c</i> understands. The [[Adapter Pattern]] lets classes with incompatible interfaces work together. This is sometimes called a <i>wrapper</i> because an adapter class wraps the implementation of another class in the desired interface. This pattern makes heavy use of delegation where the delegator is the adapter (or wrapper) and the delegate is the class being adapted.",
      "id": "ca8949cc80f91b20cca1fb39574516ee"
    },
    {
      "type": "html",
      "text": "\nOne could say that both the [[Adapter Pattern]] and the [[Bridge Pattern]] are specific instances of [[Jim Coplien]]'s [[Envelope Letter]] idiom. <i>Or of the [[Handle Body Pattern]].</i>",
      "id": "b9cc5a840558cfed500718d3bd168784"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "aabfbe5672fcaedb3fffdb95cf969ee0"
    },
    {
      "type": "html",
      "text": "The description above talks about Adapter as being a way to wrap an object in an incompatible interface.  In reality, the [[Adapter Pattern]] can be used for much more than that.  Its principal feature is that it provides a way for an object to permit access to its internals in such a way that clients are not coupled to the structure of those internals.  The Eclipse code base applies this characteristic of the [[Adapter Pattern]] repeatedly to implement the [[Law Of Demeter]]; to avoid having clients of a class coupled to the internal structure of the class.  --[[Dave Orme]]",
      "id": "a53c84300613cfd461ba227de503ff03"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "aabfbe5672fcaedb3fffdb95cf969ee0"
    },
    {
      "type": "html",
      "text": " [http://www.vincehuston.org/dp/adapter.html www.vincehuston.org]",
      "id": "4bd018e29a21f616ca5e557280d20f5e"
    },
    {
      "type": "html",
      "text": " [http://www.castle-cadenza.demon.co.uk/wrapper.htm www.castle-cadenza.demon.co.uk] (where it is called Wrapper rather than Adapter).",
      "id": "11463032d550ec878f75331f1bfc1fe4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "aabfbe5672fcaedb3fffdb95cf969ee0"
    },
    {
      "type": "code",
      "text": " /* Java code sample */",
      "id": "b626a3858dcc068db77ba4e0b7c0f5fb"
    },
    {
      "type": "code",
      "text": " interface Stack<T>\n {\n     public void push(T t);\n     public T pop();\n     public T top();\n }",
      "id": "7f3b11db6b80212dbb98bf5dfd02246f"
    },
    {
      "type": "code",
      "text": " /* DoubleLinkedList */\n class DList<T>\n {\n     public void insert(DNode pos, T t);\n     public void remove(DNode pos, T t);",
      "id": "3b6826a06a72ff057d95530e6f46228f"
    },
    {
      "type": "code",
      "text": "     public void insertHead(T t);\n     public void insertTail(T t);",
      "id": "549a3e2e70a585d4eb07b732a8a93658"
    },
    {
      "type": "code",
      "text": "     public T removeHead();\n     public T removeTail();",
      "id": "ba23ab1f92cef9f09e7a6625a12b21fb"
    },
    {
      "type": "code",
      "text": "     public T getHead();\n     public T getTail();\n }",
      "id": "002297568cd19a04986e59649eb11b40"
    },
    {
      "type": "code",
      "text": " /* Adapt DList class to Stack interface */\n class DListImpStack<T> extends DList<T> implements Stack<T>\n {\n     public void push(T t) {\n         insertTail(t);\n     }",
      "id": "aa2b6f062d3d8005ddc6134cafe8c061"
    },
    {
      "type": "code",
      "text": "     public T pop() {\n         return removeTail();\n     }",
      "id": "46706c6872eae5f2fd834ace554f7535"
    },
    {
      "type": "code",
      "text": "     public T top() {\n         return getTail();\n     }\n };",
      "id": "298adb92aa392a9a7b4fd8dc38664607"
    },
    {
      "type": "html",
      "text": "\nHere is the Adapter from the above example with composition:",
      "id": "a7c4dc9ccabe669b5076869bcdc7f709"
    },
    {
      "type": "code",
      "text": " /* Adapter using composition */",
      "id": "671ccd44b3db00ae6f36d67737285baa"
    },
    {
      "type": "code",
      "text": " class DListToStackAdapter<T> implements Stack<T>\n {\n     private DList<T> m_List;",
      "id": "d869c8f528b9151f34955a3a2ec05d0f"
    },
    {
      "type": "code",
      "text": "     public DListToStackAdapter(DList<T> m_List) {\n         this.m_List = m_List;\n     }",
      "id": "e40989681f93329ab818560673264fd6"
    },
    {
      "type": "code",
      "text": "     public void push(T t) {\n         m_List.insertTail(t);\n     }",
      "id": "6e74b5f73e9e741a4aa3406084c066f5"
    },
    {
      "type": "code",
      "text": "     public T pop() {\n         return m_List.removeTail();\n     }",
      "id": "b0a279146337576ddb0666bfad51f84c"
    },
    {
      "type": "code",
      "text": "     public T top() {\n         return m_List.getTail();\n     }",
      "id": "e87268550c3ea5c28ecb4fc2647b87e0"
    },
    {
      "type": "html",
      "text": "}",
      "id": "cceee759a7b06bf7daa71bd5b0c33cd6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "aabfbe5672fcaedb3fffdb95cf969ee0"
    },
    {
      "type": "html",
      "text": "See: [[Bridge Pattern]], [[Decorator Pattern]], [[Retrofit Interface Pattern]], [[Proxy Pattern]], [[Design Patterns]], [[Handle Body Pattern]], [[Two Way Adapter]]",
      "id": "5b0794e6136fde0c55c8f27f0fb1b260"
    },
    {
      "type": "html",
      "text": "\n[[Category Pattern]], [[Category Structural Patterns]], [[Category Interface]]",
      "id": "4c15c420b6bf21af26b68d8a3dfe78fe"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AdapterPattern c2.com]",
      "id": "1ffd5922a5d531c7e3269b0470f1df07"
    }
  ],
  "journal": [
    {
      "date": 1413279208000,
      "id": "9cd3d12d9d8841dc8566293b15a60956",
      "type": "create",
      "item": {
        "title": "Adapter Pattern",
        "story": [
          {
            "type": "html",
            "text": "<b>Intent:</b> <i>Convert</i> the interface of some class <i>b</i> into an interface <i>a</i> that some client class <i>c</i> understands. The [[Adapter Pattern]] lets classes with incompatible interfaces work together. This is sometimes called a <i>wrapper</i> because an adapter class wraps the implementation of another class in the desired interface. This pattern makes heavy use of delegation where the delegator is the adapter (or wrapper) and the delegate is the class being adapted.",
            "id": "ca8949cc80f91b20cca1fb39574516ee"
          },
          {
            "type": "html",
            "text": "\nOne could say that both the [[Adapter Pattern]] and the [[Bridge Pattern]] are specific instances of [[Jim Coplien]]'s [[Envelope Letter]] idiom. <i>Or of the [[Handle Body Pattern]].</i>",
            "id": "b9cc5a840558cfed500718d3bd168784"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "aabfbe5672fcaedb3fffdb95cf969ee0"
          },
          {
            "type": "html",
            "text": "The description above talks about Adapter as being a way to wrap an object in an incompatible interface.  In reality, the [[Adapter Pattern]] can be used for much more than that.  Its principal feature is that it provides a way for an object to permit access to its internals in such a way that clients are not coupled to the structure of those internals.  The Eclipse code base applies this characteristic of the [[Adapter Pattern]] repeatedly to implement the [[Law Of Demeter]]; to avoid having clients of a class coupled to the internal structure of the class.  --[[Dave Orme]]",
            "id": "a53c84300613cfd461ba227de503ff03"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "aabfbe5672fcaedb3fffdb95cf969ee0"
          },
          {
            "type": "html",
            "text": " [http://www.vincehuston.org/dp/adapter.html www.vincehuston.org]",
            "id": "4bd018e29a21f616ca5e557280d20f5e"
          },
          {
            "type": "html",
            "text": " [http://www.castle-cadenza.demon.co.uk/wrapper.htm www.castle-cadenza.demon.co.uk] (where it is called Wrapper rather than Adapter).",
            "id": "11463032d550ec878f75331f1bfc1fe4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "aabfbe5672fcaedb3fffdb95cf969ee0"
          },
          {
            "type": "code",
            "text": " /* Java code sample */",
            "id": "b626a3858dcc068db77ba4e0b7c0f5fb"
          },
          {
            "type": "code",
            "text": " interface Stack<T>\n {\n     public void push(T t);\n     public T pop();\n     public T top();\n }",
            "id": "7f3b11db6b80212dbb98bf5dfd02246f"
          },
          {
            "type": "code",
            "text": " /* DoubleLinkedList */\n class DList<T>\n {\n     public void insert(DNode pos, T t);\n     public void remove(DNode pos, T t);",
            "id": "3b6826a06a72ff057d95530e6f46228f"
          },
          {
            "type": "code",
            "text": "     public void insertHead(T t);\n     public void insertTail(T t);",
            "id": "549a3e2e70a585d4eb07b732a8a93658"
          },
          {
            "type": "code",
            "text": "     public T removeHead();\n     public T removeTail();",
            "id": "ba23ab1f92cef9f09e7a6625a12b21fb"
          },
          {
            "type": "code",
            "text": "     public T getHead();\n     public T getTail();\n }",
            "id": "002297568cd19a04986e59649eb11b40"
          },
          {
            "type": "code",
            "text": " /* Adapt DList class to Stack interface */\n class DListImpStack<T> extends DList<T> implements Stack<T>\n {\n     public void push(T t) {\n         insertTail(t);\n     }",
            "id": "aa2b6f062d3d8005ddc6134cafe8c061"
          },
          {
            "type": "code",
            "text": "     public T pop() {\n         return removeTail();\n     }",
            "id": "46706c6872eae5f2fd834ace554f7535"
          },
          {
            "type": "code",
            "text": "     public T top() {\n         return getTail();\n     }\n };",
            "id": "298adb92aa392a9a7b4fd8dc38664607"
          },
          {
            "type": "html",
            "text": "\nHere is the Adapter from the above example with composition:",
            "id": "a7c4dc9ccabe669b5076869bcdc7f709"
          },
          {
            "type": "code",
            "text": " /* Adapter using composition */",
            "id": "671ccd44b3db00ae6f36d67737285baa"
          },
          {
            "type": "code",
            "text": " class DListToStackAdapter<T> implements Stack<T>\n {\n     private DList<T> m_List;",
            "id": "d869c8f528b9151f34955a3a2ec05d0f"
          },
          {
            "type": "code",
            "text": "     public DListToStackAdapter(DList<T> m_List) {\n         this.m_List = m_List;\n     }",
            "id": "e40989681f93329ab818560673264fd6"
          },
          {
            "type": "code",
            "text": "     public void push(T t) {\n         m_List.insertTail(t);\n     }",
            "id": "6e74b5f73e9e741a4aa3406084c066f5"
          },
          {
            "type": "code",
            "text": "     public T pop() {\n         return m_List.removeTail();\n     }",
            "id": "b0a279146337576ddb0666bfad51f84c"
          },
          {
            "type": "code",
            "text": "     public T top() {\n         return m_List.getTail();\n     }",
            "id": "e87268550c3ea5c28ecb4fc2647b87e0"
          },
          {
            "type": "html",
            "text": "}",
            "id": "cceee759a7b06bf7daa71bd5b0c33cd6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "aabfbe5672fcaedb3fffdb95cf969ee0"
          },
          {
            "type": "html",
            "text": "See: [[Bridge Pattern]], [[Decorator Pattern]], [[Retrofit Interface Pattern]], [[Proxy Pattern]], [[Design Patterns]], [[Handle Body Pattern]], [[Two Way Adapter]]",
            "id": "5b0794e6136fde0c55c8f27f0fb1b260"
          },
          {
            "type": "html",
            "text": "\n[[Category Pattern]], [[Category Structural Patterns]], [[Category Interface]]",
            "id": "4c15c420b6bf21af26b68d8a3dfe78fe"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AdapterPattern c2.com]",
            "id": "1ffd5922a5d531c7e3269b0470f1df07"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907817222
    }
  ]
}