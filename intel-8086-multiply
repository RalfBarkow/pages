{
  "title": "Intel 8086 Multiply",
  "story": [
    {
      "type": "paragraph",
      "id": "22d15eb85e357c89",
      "text": "Ken Shirriff explains the [[Multiplication]] process inside the 8086, analyzes the microcode that it used, and discusses the hardware circuitry that helped it out. Analysis is based on reverse-engineering the 8086 from die photos. [https://www.righto.com/2023/03/8086-multiplication-microcode.html post]"
    },
    {
      "type": "paragraph",
      "id": "9cd21b2a44dbb9c3",
      "text": "Here the 8086 die under a microscope, with main functional blocks labeled. Photo shows the chip with the metal and polysilicon removed. [https://static.righto.com/images/8086-mul/die-labeled-w600.jpg enlarge]"
    },
    {
      "type": "html",
      "id": "bf0c05d55c09c46f",
      "text": "<img width=100% src=https://static.righto.com/images/8086-mul/die-labeled-w600.jpg>"
    },
    {
      "type": "paragraph",
      "id": "897bf4a216bb7ae3",
      "text": "The 8086 supports many instructions with byte and word versions, using 8-bit or 16-bit arguments. In most cases, the byte and word instructions use the same microcode, with the ALU and register hardware using bytes or words based on the instruction. "
    },
    {
      "type": "html",
      "id": "d0bf6ab15decadee",
      "text": "<pre>  move        action\nAX → tmpC   LRCY tmpC         <span>iMUL rmw</span>\nM → tmpB    CALL X0 PREIMUL   <span>called for signed multiplication</span>\n            CALL CORX         <span>the core routine</span>\n            CALL F1 NEGATE    <span>called for negative result</span>\n            CALL X0 IMULCOF   <span>called for signed multiplication</span>\ntmpC → AX   JMPS X0 7  \n            CALL MULCOF       <span>called for unsigned multiplication</span>\ntmpA → DX   RNI\n</pre>\n"
    },
    {
      "type": "paragraph",
      "id": "7fff94e181e9e57b",
      "text": "However, the byte- and word-multiply instructions use different registers, requiring microcode changes. In particular, the multiplier is in AL, the low half of the accumulator. At the end, the 16-bit result is returned in AX, the full 16-bit accumulator; two micro-instructions assemble the result from tmpC and tmpA into the two bytes of the accumulator, 'AL' and 'AH' respectively. Apart from those changes, the microcode is the same as the word multiply microcode discussed earlier."
    },
    {
      "type": "paragraph",
      "id": "ace730dfa4dc1d6b",
      "text": "The counter and F1 latch as they appear on the die. The latch for the REP state is also here. [https://static.righto.com/images/8086-mul/counter-w600.jpg enlarge]"
    },
    {
      "type": "html",
      "id": "a8dbd4017833a1ad",
      "text": "<img width=100% src=https://static.righto.com/images/8086-mul/counter-w600.jpg>"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Intel 8086 Multiply",
        "story": []
      },
      "date": 1679635268839
    },
    {
      "item": {
        "type": "factory",
        "id": "22d15eb85e357c89"
      },
      "id": "22d15eb85e357c89",
      "type": "add",
      "date": 1679635304673
    },
    {
      "type": "edit",
      "id": "22d15eb85e357c89",
      "item": {
        "type": "paragraph",
        "id": "22d15eb85e357c89",
        "text": "I explain the multiplication process inside the 8086, analyze the microcode that it used, and discuss the hardware circuitry that helped it out.3 My analysis is based on reverse-engineering the 8086 from die photos."
      },
      "date": 1679635309550
    },
    {
      "type": "edit",
      "id": "22d15eb85e357c89",
      "item": {
        "type": "paragraph",
        "id": "22d15eb85e357c89",
        "text": "Ken Shirriff explains the multiplication process inside the 8086, analyzes the microcode that it used, and discusses the hardware circuitry that helped it out. Analysis is based on reverse-engineering the 8086 from die photos."
      },
      "date": 1679635347417
    },
    {
      "type": "edit",
      "id": "22d15eb85e357c89",
      "item": {
        "type": "paragraph",
        "id": "22d15eb85e357c89",
        "text": "Ken Shirriff explains the multiplication process inside the 8086, analyzes the microcode that it used, and discusses the hardware circuitry that helped it out. Analysis is based on reverse-engineering the 8086 from die photos. [https://www.righto.com/2023/03/8086-multiplication-microcode.html post]"
      },
      "date": 1679635357136
    },
    {
      "item": {
        "type": "factory",
        "id": "bf0c05d55c09c46f"
      },
      "id": "bf0c05d55c09c46f",
      "type": "add",
      "after": "22d15eb85e357c89",
      "date": 1679635402102
    },
    {
      "type": "edit",
      "id": "bf0c05d55c09c46f",
      "item": {
        "type": "html",
        "id": "bf0c05d55c09c46f",
        "text": "<img width=100% src=https://static.righto.com/images/8086-mul/die-labeled-w600.jpg>"
      },
      "date": 1679635414903
    },
    {
      "type": "add",
      "id": "9cd21b2a44dbb9c3",
      "item": {
        "type": "paragraph",
        "id": "9cd21b2a44dbb9c3",
        "text": "The 8086 die under a microscope, with main functional blocks labeled. This photo shows the chip with the metal and polysilicon removed, revealing the silicon underneath."
      },
      "after": "22d15eb85e357c89",
      "date": 1679635438883
    },
    {
      "type": "edit",
      "id": "9cd21b2a44dbb9c3",
      "item": {
        "type": "paragraph",
        "id": "9cd21b2a44dbb9c3",
        "text": "The 8086 die under a microscope, with main functional blocks labeled. This photo shows the chip with the metal and polysilicon removed, revealing the silicon underneath. [https://static.righto.com/images/8086-mul/die-labeled-w600.jpg enlarge]"
      },
      "date": 1679635466391
    },
    {
      "type": "edit",
      "id": "9cd21b2a44dbb9c3",
      "item": {
        "type": "paragraph",
        "id": "9cd21b2a44dbb9c3",
        "text": "The 8086 die under a microscope, with main functional blocks labeled. Photo shows the chip with the metal and polysilicon removed, revealing the silicon underneath. [https://static.righto.com/images/8086-mul/die-labeled-w600.jpg enlarge]"
      },
      "date": 1679635486022
    },
    {
      "type": "edit",
      "id": "9cd21b2a44dbb9c3",
      "item": {
        "type": "paragraph",
        "id": "9cd21b2a44dbb9c3",
        "text": "The 8086 die under a microscope, with main functional blocks labeled. Photo shows the chip with the metal and polysilicon removed to reveal the circuit underneath. [https://static.righto.com/images/8086-mul/die-labeled-w600.jpg enlarge]"
      },
      "date": 1679635534365
    },
    {
      "type": "edit",
      "id": "9cd21b2a44dbb9c3",
      "item": {
        "type": "paragraph",
        "id": "9cd21b2a44dbb9c3",
        "text": "The 8086 die under a microscope, with main functional blocks labeled. Photo shows the chip with the metal and polysilicon removed. [https://static.righto.com/images/8086-mul/die-labeled-w600.jpg enlarge]"
      },
      "date": 1679635545418
    },
    {
      "type": "edit",
      "id": "9cd21b2a44dbb9c3",
      "item": {
        "type": "paragraph",
        "id": "9cd21b2a44dbb9c3",
        "text": "Here the 8086 die under a microscope, with main functional blocks labeled. Photo shows the chip with the metal and polysilicon removed. [https://static.righto.com/images/8086-mul/die-labeled-w600.jpg enlarge]"
      },
      "date": 1679635571017
    },
    {
      "item": {
        "type": "factory",
        "id": "d0bf6ab15decadee"
      },
      "id": "d0bf6ab15decadee",
      "type": "add",
      "after": "bf0c05d55c09c46f",
      "date": 1679635691121
    },
    {
      "type": "edit",
      "id": "d0bf6ab15decadee",
      "item": {
        "type": "html",
        "id": "d0bf6ab15decadee",
        "text": "  move        action\nAX → tmpC   LRCY tmpC        <span><b>iMUL rmw:</b></span>\nM → tmpB    CALL X0 PREIMUL   <span>called for signed multiplication</span>\n            CALL CORX         <span>the core routine</span>\n            CALL F1 NEGATE    <span>called for negative result</span>\n            CALL X0 IMULCOF   <span>called for signed multiplication</span>\ntmpC → AX   JMPS X0 7  \n            CALL MULCOF       <span>called for unsigned multiplication</span>\ntmpA → DX   RNI  \n"
      },
      "date": 1679635696072
    },
    {
      "type": "edit",
      "id": "d0bf6ab15decadee",
      "item": {
        "type": "html",
        "id": "d0bf6ab15decadee",
        "text": "<pre>  move        action\nAX → tmpC   LRCY tmpC        <span><b>iMUL rmw:</b></span>\nM → tmpB    CALL X0 PREIMUL   <span>called for signed multiplication</span>\n            CALL CORX         <span>the core routine</span>\n            CALL F1 NEGATE    <span>called for negative result</span>\n            CALL X0 IMULCOF   <span>called for signed multiplication</span>\ntmpC → AX   JMPS X0 7  \n            CALL MULCOF       <span>called for unsigned multiplication</span>\ntmpA → DX   RNI  \n"
      },
      "date": 1679635724020
    },
    {
      "type": "edit",
      "id": "d0bf6ab15decadee",
      "item": {
        "type": "html",
        "id": "d0bf6ab15decadee",
        "text": "<pre>  move        action\nAX → tmpC   LRCY tmpC        <span><b>iMUL rmw:</b></span>\nM → tmpB    CALL X0 PREIMUL   <span>called for signed multiplication</span>\n            CALL CORX         <span>the core routine</span>\n            CALL F1 NEGATE    <span>called for negative result</span>\n            CALL X0 IMULCOF   <span>called for signed multiplication</span>\ntmpC → AX   JMPS X0 7  \n            CALL MULCOF       <span>called for unsigned multiplication</span>\ntmpA → DX   RNI\n</pre>\n"
      },
      "date": 1679635741265
    },
    {
      "type": "edit",
      "id": "d0bf6ab15decadee",
      "item": {
        "type": "html",
        "id": "d0bf6ab15decadee",
        "text": "<pre>  move        action\nAX → tmpC   LRCY tmpC        <span>iMUL rmw:</span>\nM → tmpB    CALL X0 PREIMUL   <span>called for signed multiplication</span>\n            CALL CORX         <span>the core routine</span>\n            CALL F1 NEGATE    <span>called for negative result</span>\n            CALL X0 IMULCOF   <span>called for signed multiplication</span>\ntmpC → AX   JMPS X0 7  \n            CALL MULCOF       <span>called for unsigned multiplication</span>\ntmpA → DX   RNI\n</pre>\n"
      },
      "date": 1679635765831
    },
    {
      "type": "edit",
      "id": "d0bf6ab15decadee",
      "item": {
        "type": "html",
        "id": "d0bf6ab15decadee",
        "text": "<pre>  move        action\nAX → tmpC   LRCY tmpC         <span>iMUL rmw</span>\nM → tmpB    CALL X0 PREIMUL   <span>called for signed multiplication</span>\n            CALL CORX         <span>the core routine</span>\n            CALL F1 NEGATE    <span>called for negative result</span>\n            CALL X0 IMULCOF   <span>called for signed multiplication</span>\ntmpC → AX   JMPS X0 7  \n            CALL MULCOF       <span>called for unsigned multiplication</span>\ntmpA → DX   RNI\n</pre>\n"
      },
      "date": 1679635817856
    },
    {
      "item": {
        "type": "factory",
        "id": "897bf4a216bb7ae3"
      },
      "id": "897bf4a216bb7ae3",
      "type": "add",
      "after": "d0bf6ab15decadee",
      "date": 1679635855849
    },
    {
      "type": "edit",
      "id": "897bf4a216bb7ae3",
      "item": {
        "type": "paragraph",
        "id": "897bf4a216bb7ae3",
        "text": "The 8086 supports many instructions with byte and word versions, using 8-bit or 16-bit arguments. In most cases, the byte and word instructions use the same microcode, with the ALU and register hardware using bytes or words based on the instruction. "
      },
      "date": 1679635867267
    },
    {
      "type": "add",
      "id": "7fff94e181e9e57b",
      "item": {
        "type": "paragraph",
        "id": "7fff94e181e9e57b",
        "text": "However, the byte- and word-multiply instructions use different registers, requiring microcode changes. In particular, the multiplier is in AL, the low half of the accumulator. At the end, the 16-bit result is returned in AX, the full 16-bit accumulator; two micro-instructions assemble the result from tmpC and tmpA into the two bytes of the accumulator, 'AL' and 'AH' respectively. Apart from those changes, the microcode is the same as the word multiply microcode discussed earlier."
      },
      "after": "897bf4a216bb7ae3",
      "date": 1679635874607
    },
    {
      "id": "d0bf6ab15decadee",
      "type": "move",
      "order": [
        "22d15eb85e357c89",
        "9cd21b2a44dbb9c3",
        "bf0c05d55c09c46f",
        "897bf4a216bb7ae3",
        "7fff94e181e9e57b",
        "d0bf6ab15decadee"
      ],
      "date": 1679635880599
    },
    {
      "id": "d0bf6ab15decadee",
      "type": "move",
      "order": [
        "22d15eb85e357c89",
        "9cd21b2a44dbb9c3",
        "bf0c05d55c09c46f",
        "897bf4a216bb7ae3",
        "d0bf6ab15decadee",
        "7fff94e181e9e57b"
      ],
      "date": 1679635887694
    },
    {
      "item": {
        "type": "factory",
        "id": "a8dbd4017833a1ad"
      },
      "id": "a8dbd4017833a1ad",
      "type": "add",
      "after": "7fff94e181e9e57b",
      "date": 1679635991908
    },
    {
      "type": "edit",
      "id": "a8dbd4017833a1ad",
      "item": {
        "type": "html",
        "id": "a8dbd4017833a1ad",
        "text": "<img width=100% src=https://www.righto.com/2023/03/8086-multiplication-microcode.html>"
      },
      "date": 1679636004823
    },
    {
      "type": "edit",
      "id": "a8dbd4017833a1ad",
      "item": {
        "type": "html",
        "id": "a8dbd4017833a1ad",
        "text": "<img width=100% src=https://static.righto.com/images/8086-mul/counter-w600.jpg>"
      },
      "date": 1679636026240
    },
    {
      "type": "add",
      "id": "ace730dfa4dc1d6b",
      "item": {
        "type": "paragraph",
        "id": "ace730dfa4dc1d6b",
        "text": "The counter and F1 latch as they appear on the die. The latch for the REP state is also here."
      },
      "after": "7fff94e181e9e57b",
      "date": 1679636052458
    },
    {
      "type": "edit",
      "id": "ace730dfa4dc1d6b",
      "item": {
        "type": "paragraph",
        "id": "ace730dfa4dc1d6b",
        "text": "The counter and F1 latch as they appear on the die. The latch for the REP state is also here. [https://static.righto.com/images/8086-mul/counter-w600.jpg enlarge]"
      },
      "date": 1679636069937
    },
    {
      "type": "fork",
      "site": "found.ward.fed.wiki",
      "date": 1679637623985
    },
    {
      "type": "edit",
      "id": "22d15eb85e357c89",
      "item": {
        "type": "paragraph",
        "id": "22d15eb85e357c89",
        "text": "Ken Shirriff explains the [[Multiplication]] process inside the 8086, analyzes the microcode that it used, and discusses the hardware circuitry that helped it out. Analysis is based on reverse-engineering the 8086 from die photos. [https://www.righto.com/2023/03/8086-multiplication-microcode.html post]"
      },
      "date": 1679637727353
    }
  ]
}