{
  "title": "Guest Book",
  "story": [
    {
      "type": "paragraph",
      "id": "a571cdc137ed8063",
      "text": "We set out to make a guest book that anyone could sign without logging into to wiki. [https://github.com/WardCunningham/assets/tree/master/pages/guest-book github]\n\n"
    },
    {
      "type": "markdown",
      "id": "f31c6630e0556b6c",
      "text": "# Progress"
    },
    {
      "type": "paragraph",
      "id": "fba420e33de413c0",
      "text": "Our strategy is to supplement wiki with a second server that will append to the log.txt for each guest. We aligned unix permissions between the two servers."
    },
    {
      "type": "paragraph",
      "id": "dd8d541716def068",
      "text": "This is a form that posts to our temporary guest book server: localhost:8080.\n\n"
    },
    {
      "type": "html",
      "id": "3a25165ac041d370",
      "text": "<form action=\"http://localhost:8080/\" method=POST>\nFill out our guest book.\n<input name=name id=name>\n<input type=submit>\n</form>"
    },
    {
      "type": "assets",
      "id": "df24afe7316f449a",
      "text": "pages/guest-book"
    },
    {
      "type": "paragraph",
      "id": "bf89645b4a3065d3",
      "text": "We borrowed the deno example code for handing a POST from Deno Deploy. [https://deno.com/deploy/docs/example-post-request/ page]"
    },
    {
      "type": "paragraph",
      "id": "aaf8638d2f17bfc1",
      "text": "This example showed how to handle many content types. We extended the example for form-data with a local write."
    },
    {
      "type": "code",
      "id": "174c408673467b73",
      "text": "if(key == 'name') {\n  await Deno.writeTextFile(\"./log.txt\", value+\"\\n\",\n    {append: true})\n}\n"
    },
    {
      "type": "paragraph",
      "id": "c5da420f1f54a8c4",
      "text": "We linked ./log.txt to the asset deep in the assets folder. This is how we connected our application to wiki. It also required that we fiddle with unix permissions before we could write."
    },
    {
      "type": "paragraph",
      "id": "6bf4f4099da110ea",
      "text": "We tested the service with curl."
    },
    {
      "type": "code",
      "id": "811e275f33e9164e",
      "text": "curl -X POST -F 'name=Robert' localhost:8080"
    },
    {
      "type": "markdown",
      "id": "8e4016d38274ac3c",
      "text": "# Trouble"
    },
    {
      "type": "paragraph",
      "id": "f820904cec8cdbcf",
      "text": "Without thinking we created a cross-site POST which must be approved by a CORS pre-flight validation. I've struggled with this from Frame html script but our situation here is simpler."
    },
    {
      "type": "paragraph",
      "id": "9e3e85bfd98be311",
      "text": "My intention was to cross-fork our localhost testbed with this public dojo site but found that dragging a localhost flag to the public site no longer works. Bummer. I transferred the page through an export.json file and then hacked the journal with a text editor to make it look like it had been forked. All's good now."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Guest Book",
        "story": []
      },
      "date": 1632521575538
    },
    {
      "item": {
        "type": "factory",
        "id": "df24afe7316f449a"
      },
      "id": "df24afe7316f449a",
      "type": "add",
      "date": 1632521585456
    },
    {
      "type": "edit",
      "id": "df24afe7316f449a",
      "item": {
        "type": "assets",
        "id": "df24afe7316f449a",
        "text": "pages/guest-book"
      },
      "date": 1632521600342
    },
    {
      "type": "fork",
      "site": "ward.dojo.fed.wiki",
      "date": 1632521744581
    },
    {
      "item": {
        "type": "html",
        "id": "3a25165ac041d370",
        "text": "<form action=\"http://localhost:8080/\" method=POST>\nFill out our guest book.\n<input name=name id=name>\n<input type=submit>\n</form>"
      },
      "id": "3a25165ac041d370",
      "type": "add",
      "after": "df24afe7316f449a",
      "date": 1632522945327
    },
    {
      "type": "edit",
      "id": "3a25165ac041d370",
      "item": {
        "type": "html",
        "id": "3a25165ac041d370",
        "text": "<form action=\"http://localhost:8080/\" method=POST>\nFill out our guest book.\n<input name=name id=name>\n<input type=submit>\n</form>"
      },
      "date": 1632523027666
    },
    {
      "type": "edit",
      "id": "3a25165ac041d370",
      "item": {
        "type": "html",
        "id": "3a25165ac041d370",
        "text": "<form action=\"http://localhost:8080/\" method=POST>\nFill out our guest book.\n<input name=name id=name>\n<input type=submit>\n</form>"
      },
      "date": 1632523072409
    },
    {
      "type": "edit",
      "id": "3a25165ac041d370",
      "item": {
        "type": "html",
        "id": "3a25165ac041d370",
        "text": "<form action=\"http://localhost:8080/\" method=POST>\nFill out our guest book.\n<input name=name id=name>\n<input type=submit>\n</form>"
      },
      "date": 1632523086316
    },
    {
      "id": "3a25165ac041d370",
      "type": "move",
      "order": [
        "3a25165ac041d370",
        "df24afe7316f449a"
      ],
      "date": 1632523092718
    },
    {
      "type": "edit",
      "id": "3a25165ac041d370",
      "item": {
        "type": "html",
        "id": "3a25165ac041d370",
        "text": "<form action=\"http://localhost:8080/\" method=POST>\nFill out our guest book.\n<input name=name id=name>\n<input type=submit>\n</form>"
      },
      "date": 1632523368481
    },
    {
      "type": "edit",
      "id": "3a25165ac041d370",
      "item": {
        "type": "html",
        "id": "3a25165ac041d370",
        "text": "<form action=\"http://localhost:8080/\" method=POST>\nFill out our guest book.\n<input name=name id=name>\n<input type=submit>\n</form>"
      },
      "date": 1632523483409
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a571cdc137ed8063",
        "text": "We set out to make a guest book that anyone could sign without logging into to wiki.\n\n"
      },
      "id": "a571cdc137ed8063",
      "type": "add",
      "after": "df24afe7316f449a",
      "date": 1632524650232
    },
    {
      "type": "edit",
      "id": "a571cdc137ed8063",
      "item": {
        "type": "paragraph",
        "id": "a571cdc137ed8063",
        "text": "We set out to make a guest book that anyone could sign without logging into to wiki.\n\n"
      },
      "date": 1632524658119
    },
    {
      "id": "a571cdc137ed8063",
      "type": "move",
      "order": [
        "a571cdc137ed8063",
        "3a25165ac041d370",
        "df24afe7316f449a"
      ],
      "date": 1632524660786
    },
    {
      "type": "edit",
      "id": "a571cdc137ed8063",
      "item": {
        "type": "paragraph",
        "id": "a571cdc137ed8063",
        "text": "We set out to make a guest book that anyone could sign without logging into to wiki.\n\n"
      },
      "date": 1632524664400
    },
    {
      "type": "add",
      "id": "dd8d541716def068",
      "item": {
        "type": "paragraph",
        "id": "dd8d541716def068",
        "text": "This is a form that posts to our temporary guest book server: localhost:8080.\n\n"
      },
      "after": "a571cdc137ed8063",
      "date": 1632524665255
    },
    {
      "type": "add",
      "id": "fba420e33de413c0",
      "item": {
        "type": "paragraph",
        "id": "fba420e33de413c0",
        "text": "Our strategy is to have the server side append to the log.txt for which we have insured that unix permissions between the two servers are in alignment."
      },
      "after": "dd8d541716def068",
      "date": 1632524748505
    },
    {
      "id": "fba420e33de413c0",
      "type": "move",
      "order": [
        "a571cdc137ed8063",
        "dd8d541716def068",
        "3a25165ac041d370",
        "fba420e33de413c0",
        "df24afe7316f449a"
      ],
      "date": 1632524751100
    },
    {
      "item": {
        "type": "paragraph",
        "id": "bf89645b4a3065d3",
        "text": "We borrowed the deno example code for handing a POST from Deno Deploy. [https://deno.com/deploy/docs/example-post-request/ page]"
      },
      "id": "bf89645b4a3065d3",
      "type": "add",
      "after": "df24afe7316f449a",
      "date": 1632525948890
    },
    {
      "type": "edit",
      "id": "bf89645b4a3065d3",
      "item": {
        "type": "paragraph",
        "id": "bf89645b4a3065d3",
        "text": "We borrowed the deno example code for handing a POST from Deno Deploy. [https://deno.com/deploy/docs/example-post-request/ page]"
      },
      "date": 1632525996896
    },
    {
      "type": "edit",
      "id": "bf89645b4a3065d3",
      "item": {
        "type": "paragraph",
        "id": "bf89645b4a3065d3",
        "text": "We borrowed the deno example code for handing a POST from Deno Deploy. [https://deno.com/deploy/docs/example-post-request/ page]"
      },
      "date": 1632526034223
    },
    {
      "id": "fba420e33de413c0",
      "type": "move",
      "order": [
        "a571cdc137ed8063",
        "dd8d541716def068",
        "fba420e33de413c0",
        "3a25165ac041d370",
        "df24afe7316f449a",
        "bf89645b4a3065d3"
      ],
      "date": 1632528192006,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "fork",
      "site": "localhost",
      "date": 1632528241085
    },
    {
      "id": "dd8d541716def068",
      "type": "move",
      "order": [
        "a571cdc137ed8063",
        "fba420e33de413c0",
        "dd8d541716def068",
        "3a25165ac041d370",
        "df24afe7316f449a",
        "bf89645b4a3065d3"
      ],
      "date": 1632528249909
    },
    {
      "type": "add",
      "id": "aaf8638d2f17bfc1",
      "item": {
        "type": "paragraph",
        "id": "aaf8638d2f17bfc1",
        "text": "This example showed how to handle many content types. We extended the example "
      },
      "after": "bf89645b4a3065d3",
      "date": 1632532755520
    },
    {
      "type": "edit",
      "id": "aaf8638d2f17bfc1",
      "item": {
        "type": "paragraph",
        "id": "aaf8638d2f17bfc1",
        "text": "This example showed how to handle many content types. We extended the example for form-data with a local write."
      },
      "date": 1632532786670
    },
    {
      "item": {
        "type": "factory",
        "id": "174c408673467b73"
      },
      "id": "174c408673467b73",
      "type": "add",
      "after": "aaf8638d2f17bfc1",
      "date": 1632532789284
    },
    {
      "type": "edit",
      "id": "174c408673467b73",
      "item": {
        "type": "code",
        "id": "174c408673467b73",
        "text": "  if(key == 'name') {\n    await Deno.writeTextFile(\"./log.txt\", value+\"\\n\",{append: true});\n  }\n"
      },
      "date": 1632532824953
    },
    {
      "type": "edit",
      "id": "174c408673467b73",
      "item": {
        "type": "code",
        "id": "174c408673467b73",
        "text": "  if(key == 'name') {\n    await Deno.writeTextFile(\"./log.txt\", value+\"\\n\", {append: true});\n  }\n"
      },
      "date": 1632532842597
    },
    {
      "type": "edit",
      "id": "174c408673467b73",
      "item": {
        "type": "code",
        "id": "174c408673467b73",
        "text": "if(key == 'name') {\n  await Deno.writeTextFile(\"./log.txt\", value+\"\\n\", {append: true});\n}\n"
      },
      "date": 1632532860187
    },
    {
      "type": "edit",
      "id": "174c408673467b73",
      "item": {
        "type": "code",
        "id": "174c408673467b73",
        "text": "if(key == 'name') {\n  await Deno.writeTextFile(\"./log.txt\", value+\"\\n\",\n    {append: true});\n}\n"
      },
      "date": 1632532875281
    },
    {
      "type": "edit",
      "id": "174c408673467b73",
      "item": {
        "type": "code",
        "id": "174c408673467b73",
        "text": "if(key == 'name') {\n  await Deno.writeTextFile(\"./log.txt\", value+\"\\n\",\n    {append: true})\n}\n"
      },
      "date": 1632532882840
    },
    {
      "item": {
        "type": "factory",
        "id": "c5da420f1f54a8c4"
      },
      "id": "c5da420f1f54a8c4",
      "type": "add",
      "after": "174c408673467b73",
      "date": 1632532978446
    },
    {
      "type": "edit",
      "id": "c5da420f1f54a8c4",
      "item": {
        "type": "paragraph",
        "id": "c5da420f1f54a8c4",
        "text": "We linked ./log.txt to the asset deep in the assets folder. This is how we connected our application to wiki. It also required that we fiddle with unix permissions before we could write."
      },
      "date": 1632533082953
    },
    {
      "type": "add",
      "id": "6bf4f4099da110ea",
      "item": {
        "type": "paragraph",
        "id": "6bf4f4099da110ea",
        "text": "We tested the service with curl."
      },
      "after": "c5da420f1f54a8c4",
      "date": 1632533169157
    },
    {
      "item": {
        "type": "factory",
        "id": "811e275f33e9164e"
      },
      "id": "811e275f33e9164e",
      "type": "add",
      "after": "6bf4f4099da110ea",
      "date": 1632533172152
    },
    {
      "type": "edit",
      "id": "811e275f33e9164e",
      "item": {
        "type": "code",
        "id": "811e275f33e9164e",
        "text": "curl -X POST -F 'name=Robert' localhost:8080"
      },
      "date": 1632533178181
    },
    {
      "type": "add",
      "id": "f31c6630e0556b6c",
      "item": {
        "type": "paragraph",
        "id": "f31c6630e0556b6c",
        "text": "# Progress"
      },
      "after": "a571cdc137ed8063",
      "date": 1632533297325
    },
    {
      "type": "edit",
      "id": "f31c6630e0556b6c",
      "item": {
        "type": "markdown",
        "id": "f31c6630e0556b6c",
        "text": "# Progress"
      },
      "date": 1632533299876
    },
    {
      "type": "edit",
      "id": "fba420e33de413c0",
      "item": {
        "type": "paragraph",
        "id": "fba420e33de413c0",
        "text": "Our strategy is to supplement wiki with a second server that will append to the log.txt for each guest. We insured that unix permissions between the two servers are in alignment."
      },
      "date": 1632533485985
    },
    {
      "type": "edit",
      "id": "fba420e33de413c0",
      "item": {
        "type": "paragraph",
        "id": "fba420e33de413c0",
        "text": "Our strategy is to supplement wiki with a second server that will append to the log.txt for each guest. We aligned unix permissions between the two servers."
      },
      "date": 1632533517921
    },
    {
      "item": {
        "type": "factory",
        "id": "8e4016d38274ac3c"
      },
      "id": "8e4016d38274ac3c",
      "type": "add",
      "after": "811e275f33e9164e",
      "date": 1632533650479
    },
    {
      "type": "edit",
      "id": "8e4016d38274ac3c",
      "item": {
        "type": "markdown",
        "id": "8e4016d38274ac3c",
        "text": "# Trouble"
      },
      "date": 1632533660248
    },
    {
      "item": {
        "type": "factory",
        "id": "f820904cec8cdbcf"
      },
      "id": "f820904cec8cdbcf",
      "type": "add",
      "after": "8e4016d38274ac3c",
      "date": 1632533681663
    },
    {
      "type": "edit",
      "id": "f820904cec8cdbcf",
      "item": {
        "type": "paragraph",
        "id": "f820904cec8cdbcf",
        "text": "Without thinking we created a cross-site POST which must be approved by a CORS preflight validation. We left this \"to do\"."
      },
      "date": 1632533876557
    },
    {
      "type": "edit",
      "id": "f820904cec8cdbcf",
      "item": {
        "type": "paragraph",
        "id": "f820904cec8cdbcf",
        "text": "Without thinking we created a cross-site POST which must be approved by a CORS preflight validation. I've struggled with this from Frame html script but our situation here is simpler."
      },
      "date": 1632533940807
    },
    {
      "type": "add",
      "id": "9e3e85bfd98be311",
      "item": {
        "type": "paragraph",
        "id": "9e3e85bfd98be311",
        "text": "My intention was to cross-fork our localhost testbed with this public dojo site but found that dragging a localhost flag to the public site no longer works. Bummer. I transferred the page through an export.json file and then hacked the journal with a text editor to make it look like it had been forked. All's good now."
      },
      "after": "f820904cec8cdbcf",
      "date": 1632534193034
    },
    {
      "type": "edit",
      "id": "f820904cec8cdbcf",
      "item": {
        "type": "paragraph",
        "id": "f820904cec8cdbcf",
        "text": "Without thinking we created a cross-site POST which must be approved by a CORS pre-flight validation. I've struggled with this from Frame html script but our situation here is simpler."
      },
      "date": 1632534447474
    },
    {
      "type": "edit",
      "id": "a571cdc137ed8063",
      "item": {
        "type": "paragraph",
        "id": "a571cdc137ed8063",
        "text": "We set out to make a guest book that anyone could sign without logging into to wiki. [https://github.com/WardCunningham/assets/tree/master/pages/guest-book github]\n\n"
      },
      "date": 1632535472395
    },
    {
      "type": "fork",
      "site": "ward.dojo.fed.wiki",
      "date": 1632555010792
    }
  ]
}