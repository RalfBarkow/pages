{
  "title": "makeNoise",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "Explain what this does."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "// Code that does it.\n\n/** Make a new map with noise, and cache previously generated maps */\nlet mapCache = new Map<string, Map2D>();\nexport function makeNoise(width: number, height: number, frequency: number, seed: number): Map2D {\n    const cacheKey = `${seed}:${width}:${height}:${frequency}`;\n    if (!mapCache.has(cacheKey)) {\n        let map = new Map2D(width, height);\n        fillNoise(map, frequency, seed);\n        mapCache.set(cacheKey, map);\n    }\n    return mapCache.get(cacheKey);\n}\n"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
    },
    {
      "type": "paragraph",
      "id": "8155a586f5842b0f",
      "text": "See also [[Map2D]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "makeNoise",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\nexport async function emit(el) {\n el.innerHTML = 2 + 3\n}\n\n"
          },
          {
            "type": "paragraph",
            "id": "caa626ac93aa7d4c",
            "text": "In the frame below we can view the results."
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
          },
          {
            "type": "paragraph",
            "id": "8155a586f5842b0f",
            "text": "See also [[Static Import Snippet]]"
          }
        ]
      },
      "date": 1652001115863
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
      },
      "date": 1652001125465
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\n/** Make a new map with noise, and cache previously generated maps */\nlet mapCache = new Map<string, Map2D>();\nexport function makeNoise(width: number, height: number, frequency: number, seed: number): Map2D {\n    const cacheKey = `${seed}:${width}:${height}:${frequency}`;\n    if (!mapCache.has(cacheKey)) {\n        let map = new Map2D(width, height);\n        fillNoise(map, frequency, seed);\n        mapCache.set(cacheKey, map);\n    }\n    return mapCache.get(cacheKey);\n}\n\n\n\n"
      },
      "date": 1652001131899
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nexport function makeNoise(width: number, height: number, frequency: number, seed: number): Map2D {\n    const cacheKey = `${seed}:${width}:${height}:${frequency}`;\n    if (!mapCache.has(cacheKey)) {\n        let map = new Map2D(width, height);\n        fillNoise(map, frequency, seed);\n        mapCache.set(cacheKey, map);\n    }\n    return mapCache.get(cacheKey);\n}\n"
      },
      "date": 1652001180843
    },
    {
      "type": "edit",
      "id": "8155a586f5842b0f",
      "item": {
        "type": "paragraph",
        "id": "8155a586f5842b0f",
        "text": "See also [[Map2D]]"
      },
      "date": 1652001230087
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\n/** Make a new map with noise, and cache previously generated maps */\nlet mapCache = new Map<string, Map2D>();\nexport function makeNoise(width: number, height: number, frequency: number, seed: number): Map2D {\n    const cacheKey = `${seed}:${width}:${height}:${frequency}`;\n    if (!mapCache.has(cacheKey)) {\n        let map = new Map2D(width, height);\n        fillNoise(map, frequency, seed);\n        mapCache.set(cacheKey, map);\n    }\n    return mapCache.get(cacheKey);\n}\n"
      },
      "date": 1652001293630
    }
  ]
}