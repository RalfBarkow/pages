{
  "title": "Why Program Functionally?",
  "story": [
    {
      "type": "markdown",
      "id": "a64ca8e6c257a5c9",
      "text": "# What Does ‚ÄúFunctional Programming‚Äù Mean?"
    },
    {
      "type": "paragraph",
      "id": "5bf5a7f79f8ba0e2",
      "text": "A clear definition what one understands by functional programming, does not exist. Meanwhile many programming languages offer the possibility of implementing individual aspects of functional programming. In order to experience the advantages of functional programming, it is however advantageous to use a language, which implements the functional programming paradigm very cleanly. One such language is Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
    },
    {
      "type": "paragraph",
      "id": "d4a1430c72bbd882",
      "text": "Characteristics of purely functional programming languages - such as [[Elm]] - are:"
    },
    {
      "type": "markdown",
      "id": "e55b505f602f6d2e",
      "text": " * Programs are formed with the help of functions in the mathematical sense. A function can be passed values and always has a result that it returns.\n * Functions have no side effects. This means that a function has no effects except to cause a return. Purely functional languages thus do not even allow screen output. You will learn how to still achieve output in Elm, even though Elm is a purely functional language, in the section on dynamic web pages.\n * Functions are deterministic. Given the same parameters passed to a function, a function must return the same. Thus, random number generation or user input are not allowed within functions.\n * Functions are considered first class citizens. Thus, one can pass values to functions as parameters or receive them from a function as a return, just like other values. What is meant here is not the function value of e.g. the function f(x) = 3x for e.g. x=2, but the function f itself. This sounds very abstract, but it will become clearer in the later sections. "
    },
    {
      "type": "markdown",
      "id": "13b0fdcc37ae81e6",
      "text": "# Advantages Due to Restriction"
    },
    {
      "type": "paragraph",
      "id": "4baa8d0e31c22bfb",
      "text": "All this sounds like significant limitations compared to other languages, and indeed it is. However, the omission brings advantages that are typical for functional languages: "
    },
    {
      "type": "markdown",
      "id": "2cd8e169dc585e46",
      "text": " * Some errors that would be logical errors or runtime errors in other languages become syntactic errors in Elm. This is a huge advantage because the compiler can report these errors to us during development, while logical errors and runtime errors may go undetected and then appear to the user. (see Errors in Programs )\n * The testability of functional programs is facilitated. Since the result of a function depends only on its parameters and not on internal or external states or events (e.g., random numbers or user input), it is easier to formulate test cases that cover all contingencies.\n * Since functions have no side effects, e.g., they do not access file contents, there are no problems when several functions are executed in parallel at the same time. Functional programs are thus easier to parallelize.\n * The restriction to side-effect-free and deterministic functions enforces a good programming style. Even if you never program in Elm again later, learning it will give you a better programming style. Many of the things you need to keep in mind in Elm are also considered good style in other languages. "
    },
    {
      "type": "pagefold",
      "id": "a0b5f463e9f421ae",
      "text": "üî∫"
    },
    {
      "type": "reference",
      "id": "0b4f7d382a971bc9",
      "site": "de.dreyeck.ch",
      "slug": "warum-funktional-programmieren",
      "title": "Warum funktional programmieren?",
      "text": "Ein klare Definition was man unter funktionaler Programmierung versteht, gibt es nicht. Inzwischen bieten viele Programmiersprachen die M√∂glichkeit einzelne Aspekte der funktionalen Programmierung umzusetzen. Um die Vorz√ºge der funktionalen Programmierung zu erleben, ist es aber von Vorteil eine Sprache zu nutzen, die das funktionale Programmierparadigma sehr sauber umsetzt. Eine dieser Sprachen ist Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
    },
    {
      "type": "paragraph",
      "id": "96fe05a87cde455e",
      "text": "‚áí [[Ben√∂tigte Software]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Why Program Functionally?",
        "story": []
      },
      "date": 1695286697766
    },
    {
      "id": "a64ca8e6c257a5c9",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "a64ca8e6c257a5c9",
        "text": "# Was bedeutet \"funktionale Programmierung\"?"
      },
      "attribution": {
        "page": "Warum funktional programmieren?"
      },
      "date": 1695286700485
    },
    {
      "type": "edit",
      "id": "a64ca8e6c257a5c9",
      "item": {
        "type": "markdown",
        "id": "a64ca8e6c257a5c9",
        "text": "# What does \"functional programming\" mean?"
      },
      "date": 1695286707406
    },
    {
      "id": "5bf5a7f79f8ba0e2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5bf5a7f79f8ba0e2",
        "text": "Ein klare Definition was man unter funktionaler Programmierung versteht, gibt es nicht. Inzwischen bieten viele Programmiersprachen die M√∂glichkeit einzelne Aspekte der funktionalen Programmierung umzusetzen. Um die Vorz√ºge der funktionalen Programmierung zu erleben, ist es aber von Vorteil eine Sprache zu nutzen, die das funktionale Programmierparadigma sehr sauber umsetzt. Eine dieser Sprachen ist Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
      },
      "after": "a64ca8e6c257a5c9",
      "attribution": {
        "page": "Warum funktional programmieren?"
      },
      "date": 1695286710025
    },
    {
      "type": "edit",
      "id": "5bf5a7f79f8ba0e2",
      "item": {
        "type": "paragraph",
        "id": "5bf5a7f79f8ba0e2",
        "text": "A clear definition what one understands by functional programming, does not exist. Meanwhile many programming languages offer the possibility of implementing individual aspects of functional programming. In order to experience the advantages of functional programming, it is however advantageous to use a language, which implements the functional programming paradigm very cleanly. One such language is Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
      },
      "date": 1695286717665
    },
    {
      "id": "d4a1430c72bbd882",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d4a1430c72bbd882",
        "text": "Merkmale rein funktionaler Programmiersprachen - wie z.B. [[Elm]] - sind:"
      },
      "after": "5bf5a7f79f8ba0e2",
      "attribution": {
        "page": "Warum funktional programmieren?"
      },
      "date": 1695286726634
    },
    {
      "type": "edit",
      "id": "d4a1430c72bbd882",
      "item": {
        "type": "paragraph",
        "id": "d4a1430c72bbd882",
        "text": "Characteristics of purely functional programming languages - such as [[Elm]] - are:"
      },
      "date": 1695286735153
    },
    {
      "item": {
        "type": "factory",
        "id": "0b4f7d382a971bc9"
      },
      "id": "0b4f7d382a971bc9",
      "type": "add",
      "after": "d4a1430c72bbd882",
      "date": 1695286746464
    },
    {
      "type": "edit",
      "id": "0b4f7d382a971bc9",
      "item": {
        "type": "reference",
        "id": "0b4f7d382a971bc9",
        "site": "de.dreyeck.ch",
        "slug": "warum-funktional-programmieren",
        "title": "Warum funktional programmieren?",
        "text": "Ein klare Definition was man unter funktionaler Programmierung versteht, gibt es nicht. Inzwischen bieten viele Programmiersprachen die M√∂glichkeit einzelne Aspekte der funktionalen Programmierung umzusetzen. Um die Vorz√ºge der funktionalen Programmierung zu erleben, ist es aber von Vorteil eine Sprache zu nutzen, die das funktionale Programmierparadigma sehr sauber umsetzt. Eine dieser Sprachen ist Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
      },
      "date": 1695286749006
    },
    {
      "item": {
        "type": "factory",
        "id": "a0b5f463e9f421ae"
      },
      "id": "a0b5f463e9f421ae",
      "type": "add",
      "after": "0b4f7d382a971bc9",
      "date": 1695286750648
    },
    {
      "id": "a0b5f463e9f421ae",
      "type": "move",
      "order": [
        "a64ca8e6c257a5c9",
        "5bf5a7f79f8ba0e2",
        "d4a1430c72bbd882",
        "a0b5f463e9f421ae",
        "0b4f7d382a971bc9"
      ],
      "date": 1695286751923
    },
    {
      "type": "edit",
      "id": "a0b5f463e9f421ae",
      "item": {
        "type": "pagefold",
        "id": "a0b5f463e9f421ae",
        "text": "üî∫"
      },
      "date": 1695286766918
    },
    {
      "id": "e55b505f602f6d2e",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "e55b505f602f6d2e",
        "text": " * Programme werden mit Hilfe von Funktionen im mathematischen Sinne gebildet. Eine Funktion kann Werte √ºbergeben bekommen und hat immer ein Ergebnis, das sie zur√ºckliefert.\n * Funktionen haben keine Seiteneffekte. Das bedeutet, dass eine Funktion keine Auswirkungen hat, au√üer dass sie eine R√ºckgabe bewirkt. Rein funktionale Sprachen erlauben damit noch nicht einmal eine Bildschirmausgabe. Wie man dennoch Ausgaben in Elm erreichen kann, obwohl Elm eine rein funktionale Sprache ist, lernst du im Abschnitt √ºber dynamische Webseiten.\n * Funktionen sind deterministisch. Bei gleichen Parametern, die an eine Funktion √ºbergeben werden, muss eine Funktion die gleiche R√ºckgabe liefern. Somit sind die Erzeugung von Zufallszahlen oder Benutzereingaben innerhalb von Funktionen nicht erlaubt.\n * Funktionen gelten als B√ºrger erster Klasse. Man kann Funktionen also wie andere Werte auch als Parameter √ºbergeben oder von einer Funktion als R√ºckgabe erhalten. Gemeint ist hier nicht der Funktswert z.B. der Funktion f(x) = 3x f√ºr z.B. x=2, sondern die Funktion f an sich. Das klingt sehr abstrakt, wird aber in den sp√§teren Abschnitten anschaulicher. "
      },
      "after": "d4a1430c72bbd882",
      "attribution": {
        "page": "Warum funktional programmieren?"
      },
      "date": 1695286777145
    },
    {
      "type": "edit",
      "id": "e55b505f602f6d2e",
      "item": {
        "type": "markdown",
        "id": "e55b505f602f6d2e",
        "text": " * Programs are formed with the help of functions in the mathematical sense. A function can be passed values and always has a result that it returns.\n * Functions have no side effects. This means that a function has no effects except to cause a return. Purely functional languages thus do not even allow screen output. You will learn how to still achieve output in Elm, even though Elm is a purely functional language, in the section on dynamic web pages.\n * Functions are deterministic. Given the same parameters passed to a function, a function must return the same. Thus, random number generation or user input are not allowed within functions.\n * Functions are considered first class citizens. Thus, one can pass values to functions as parameters or receive them from a function as a return, just like other values. What is meant here is not the function value of e.g. the function f(x) = 3x for e.g. x=2, but the function f itself. This sounds very abstract, but it will become clearer in the later sections. "
      },
      "date": 1695286784710
    },
    {
      "id": "13b0fdcc37ae81e6",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "13b0fdcc37ae81e6",
        "text": "# Vorteile durch Beschr√§nkung"
      },
      "after": "e55b505f602f6d2e",
      "attribution": {
        "page": "Warum funktional programmieren?"
      },
      "date": 1695286793378
    },
    {
      "type": "edit",
      "id": "13b0fdcc37ae81e6",
      "item": {
        "type": "markdown",
        "id": "13b0fdcc37ae81e6",
        "text": "# Advantages due to restriction# Vorteile durch Beschr√§nkung"
      },
      "date": 1695286802944
    },
    {
      "type": "edit",
      "id": "13b0fdcc37ae81e6",
      "item": {
        "type": "markdown",
        "id": "13b0fdcc37ae81e6",
        "text": "# Advantages due to restriction"
      },
      "date": 1695286808545
    },
    {
      "type": "fork",
      "date": 1695286846882
    },
    {
      "type": "edit",
      "id": "a64ca8e6c257a5c9",
      "item": {
        "type": "markdown",
        "id": "a64ca8e6c257a5c9",
        "text": "# What Does ‚ÄúFunctional Programming‚Äù Mean?"
      },
      "date": 1695286861216
    },
    {
      "type": "edit",
      "id": "13b0fdcc37ae81e6",
      "item": {
        "type": "markdown",
        "id": "13b0fdcc37ae81e6",
        "text": "# Advantages Due to Restriction"
      },
      "date": 1695286870740
    },
    {
      "id": "4baa8d0e31c22bfb",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4baa8d0e31c22bfb",
        "text": "Das alles klingt nach deutlichen Einschr√§nkungen gegen√ºber anderen Sprachen und in der Tat ist das auch der Fall. Der Verzicht bringt aber Vorteile, die typisch f√ºr funktionale Sprachen sind: "
      },
      "after": "13b0fdcc37ae81e6",
      "attribution": {
        "page": "Warum funktional programmieren?"
      },
      "date": 1695286884458
    },
    {
      "type": "edit",
      "id": "4baa8d0e31c22bfb",
      "item": {
        "type": "paragraph",
        "id": "4baa8d0e31c22bfb",
        "text": "All this sounds like significant limitations compared to other languages, and indeed it is. However, the omission brings advantages that are typical for functional languages: "
      },
      "date": 1695286891727
    },
    {
      "id": "2cd8e169dc585e46",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "2cd8e169dc585e46",
        "text": " *  Einige Fehler, die in anderen Sprachen logische Fehler oder Laufzeitfehler w√§ren, werden in Elm zu syntaktischen Fehlern. Das ist ein riesiger Vorteil, da der Compiler uns diese Fehler w√§hrend der Entwicklung melden kann, w√§hrend logische Fehler und Laufzeitfehler eventuell unentdeckt bleiben und dann beim Benutzer auftreten. (siehe Fehler in Programmen )\n * Die Testbarkeit funktionaler Programme ist erleichtert. Da das Ergebnis einer Funktion nur von den Parametern und nicht von internen oder externen Zust√§nden oder Ereignissen (z.B. Zufallszahlen oder Benutzereingaben) abh√§ngt, kann man leichter Testf√§lle formulieren, die alle Eventualit√§ten abdecken.\n * Da Funktionen keine Seiteneffekte haben, also z.B. nicht auf Dateiinhalte zugreifen, gibt es keine Probleme, wenn mehrere Funktionen gleichzeitig parallel ausgef√ºhrt werden. Funktionale Programme sind somit leichter parallelisierbar.\n * Die Beschr√§nkung auf Seiteneffekt-freie und deterministische Funktionen erzwingt einen guten Programmierstil. Selbst wenn du sp√§ter nie mehr in Elm programmieren solltest, wird dir die Besch√§ftigung damit einen besseren Programmierstil bringen. Viele der Dinge, die du in Elm beachten musst, gelten auch in anderen Sprachen als guter Stil. "
      },
      "after": "4baa8d0e31c22bfb",
      "attribution": {
        "page": "Warum funktional programmieren?"
      },
      "date": 1695286903204
    },
    {
      "type": "edit",
      "id": "2cd8e169dc585e46",
      "item": {
        "type": "markdown",
        "id": "2cd8e169dc585e46",
        "text": " * Some errors that would be logical errors or runtime errors in other languages become syntactic errors in Elm. This is a huge advantage because the compiler can report these errors to us during development, while logical errors and runtime errors may go undetected and then appear to the user. (see Errors in Programs )\n * The testability of functional programs is facilitated. Since the result of a function depends only on its parameters and not on internal or external states or events (e.g., random numbers or user input), it is easier to formulate test cases that cover all contingencies.\n * Since functions have no side effects, e.g., they do not access file contents, there are no problems when several functions are executed in parallel at the same time. Functional programs are thus easier to parallelize.\n * The restriction to side-effect-free and deterministic functions enforces a good programming style. Even if you never program in Elm again later, learning it will give you a better programming style. Many of the things you need to keep in mind in Elm are also considered good style in other languages. "
      },
      "date": 1695286912547
    },
    {
      "id": "96fe05a87cde455e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "96fe05a87cde455e",
        "text": "‚áí [[Ben√∂tigte Software]]"
      },
      "after": "0b4f7d382a971bc9",
      "attribution": {
        "page": "Warum funktional programmieren?"
      },
      "date": 1695286922007
    }
  ]
}