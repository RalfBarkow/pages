{
  "title": "Cannot Get View",
  "story": [
    {
      "type": "code",
      "id": "cf2c3e687198a95d",
      "text": "Cannot GET /view/12:06:18"
    },
    {
      "type": "code",
      "id": "c674cbe5fc8c0050",
      "text": "App dying\n{\n  is404: true,\n  route: '/view/12:06:18',\n  htmlString: {\n    kind: 'html-template',\n    title: 'Page not found',\n    html: '<div style=\"padding:30px;\" id=\"not-found-reason\">No route found for <code>/view/12:06:18</code> Did you mean to go to one of these routes:<ul style=\"padding-top:30px;\"><li style=\"list-style:inside;\"><span><code>/blog/:slug</code></span></li><li style=\"list-style:inside;\"><span><code>/greet</code></span></li><li style=\"list-style:inside;\"><span><code>/hello</code></span></li><li style=\"list-style:inside;\"><span><code>/index</code></span></li></ul></div>',\n    bytesData: 'AgQIdmlldxAxMjowNjoxOAA=',\n    headTags: '',\n    rootElement: '<html lang=\"en\">'\n  },\n  contentJson: {},\n  statusCode: 404,\n  headers: {},\n  kind: 'html',\n  contentDatPayload: DataView {\n    byteLength: 17,\n    byteOffset: 0,\n    buffer: ArrayBuffer {\n      [Uint8Contents]: <02 04 08 76 69 65 77 10 31 32 3a 30 36 3a 31 38 00>,\n      byteLength: 17\n    }\n  }\n}"
    },
    {
      "type": "paragraph",
      "id": "b495b2a3ba1fc7fe",
      "text": "Base64 Decode and Encode [https://www.base64decode.org/ site]"
    },
    {
      "type": "code",
      "id": "ce7aead12a248c1a",
      "text": "AgQIdmlldxAxMjowNjoxOAA="
    },
    {
      "type": "paragraph",
      "id": "e9c00392bb76b489",
      "text": "⇒ [[Bytes Encoders and Decoders]] ⇒ [[BackendTask]]"
    },
    {
      "type": "paragraph",
      "id": "b759515e8a61d002",
      "text": "⇒ [[Find Route]]"
    },
    {
      "type": "pagefold",
      "id": "02f521a2cbaf660d",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "32c1de1a715592af",
      "site": "wiki.ralfbarkow.ch",
      "slug": "backendtask",
      "title": "BackendTask",
      "text": "In an [[elm-pages]] app, each Route Module can define a value data which is a BackendTask that will be resolved before init is called. That means it is also available when the page's HTML is pre-rendered during the build step. You can also access the resolved data in head to use it for the page's SEO meta tags. [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/BackendTask page]"
    },
    {
      "type": "paragraph",
      "id": "9c53fc8328587a72",
      "text": "Think of BackendTask like a Cmd or Effect. It's a special type which you pass up to the runtime to ask it to do something for you. Since Elm code is pure, it can't perform side-effects. BackendTasks will not do anything unless they're passed to the elm-pages framework. Since the framework has its own Model, update, etc., it's able to go perform side-effects to resolve those BackendTasks for you. You can think of it like a wrapper around [[The Elm Architecture]] [https://guide.elm-lang.org/architecture/ site]. [https://elm-pages.com/docs/how-does-it-work page]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Cannot Get View",
        "story": []
      },
      "date": 1692792561942
    },
    {
      "id": "c674cbe5fc8c0050",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c674cbe5fc8c0050",
        "text": "App dying\n{\n  is404: true,\n  route: '/view/12:06:18',\n  htmlString: {\n    kind: 'html-template',\n    title: 'Page not found',\n    html: '<div style=\"padding:30px;\" id=\"not-found-reason\">No route found for <code>/view/12:06:18</code> Did you mean to go to one of these routes:<ul style=\"padding-top:30px;\"><li style=\"list-style:inside;\"><span><code>/blog/:slug</code></span></li><li style=\"list-style:inside;\"><span><code>/greet</code></span></li><li style=\"list-style:inside;\"><span><code>/hello</code></span></li><li style=\"list-style:inside;\"><span><code>/index</code></span></li></ul></div>',\n    bytesData: 'AgQIdmlldxAxMjowNjoxOAA=',\n    headTags: '',\n    rootElement: '<html lang=\"en\">'\n  },\n  contentJson: {},\n  statusCode: 404,\n  headers: {},\n  kind: 'html',\n  contentDatPayload: DataView {\n    byteLength: 17,\n    byteOffset: 0,\n    buffer: ArrayBuffer {\n      [Uint8Contents]: <02 04 08 76 69 65 77 10 31 32 3a 30 36 3a 31 38 00>,\n      byteLength: 17\n    }\n  }\n}"
      },
      "attribution": {
        "page": "2023-08-23"
      },
      "date": 1692792565216
    },
    {
      "id": "cf2c3e687198a95d",
      "type": "add",
      "item": {
        "type": "code",
        "id": "cf2c3e687198a95d",
        "text": "Cannot GET /view/12:06:18"
      },
      "attribution": {
        "page": "2023-08-23"
      },
      "date": 1692792572685
    },
    {
      "item": {
        "type": "factory",
        "id": "b495b2a3ba1fc7fe"
      },
      "id": "b495b2a3ba1fc7fe",
      "type": "add",
      "after": "c674cbe5fc8c0050",
      "date": 1692792642892
    },
    {
      "type": "edit",
      "id": "b495b2a3ba1fc7fe",
      "item": {
        "type": "paragraph",
        "id": "b495b2a3ba1fc7fe",
        "text": "[https://www.base64decode.org/ site]"
      },
      "date": 1692792649720
    },
    {
      "item": {
        "type": "factory",
        "id": "ce7aead12a248c1a"
      },
      "id": "ce7aead12a248c1a",
      "type": "add",
      "after": "b495b2a3ba1fc7fe",
      "date": 1692792665195
    },
    {
      "type": "edit",
      "id": "ce7aead12a248c1a",
      "item": {
        "type": "code",
        "id": "ce7aead12a248c1a",
        "text": "AgQIdmlldxAxMjowNjoxOAA="
      },
      "date": 1692792667463
    },
    {
      "type": "edit",
      "id": "b495b2a3ba1fc7fe",
      "item": {
        "type": "paragraph",
        "id": "b495b2a3ba1fc7fe",
        "text": "Base64 Decode and Encode [https://www.base64decode.org/ site]"
      },
      "date": 1692792682307
    },
    {
      "item": {
        "type": "factory",
        "id": "b759515e8a61d002"
      },
      "id": "b759515e8a61d002",
      "type": "add",
      "after": "ce7aead12a248c1a",
      "date": 1692792762904
    },
    {
      "type": "edit",
      "id": "b759515e8a61d002",
      "item": {
        "type": "paragraph",
        "id": "b759515e8a61d002",
        "text": "⇒ [[Find Route]]"
      },
      "date": 1692792773791
    },
    {
      "item": {
        "type": "factory",
        "id": "02f521a2cbaf660d"
      },
      "id": "02f521a2cbaf660d",
      "type": "add",
      "after": "b759515e8a61d002",
      "date": 1692795814807
    },
    {
      "type": "edit",
      "id": "02f521a2cbaf660d",
      "item": {
        "type": "pagefold",
        "id": "02f521a2cbaf660d",
        "text": "~"
      },
      "date": 1692795818327
    },
    {
      "item": {
        "type": "factory",
        "id": "32c1de1a715592af"
      },
      "id": "32c1de1a715592af",
      "type": "add",
      "after": "02f521a2cbaf660d",
      "date": 1692795820868
    },
    {
      "type": "edit",
      "id": "32c1de1a715592af",
      "item": {
        "type": "reference",
        "id": "32c1de1a715592af",
        "site": "wiki.ralfbarkow.ch",
        "slug": "backendtask",
        "title": "BackendTask",
        "text": "In an [[elm-pages]] app, each Route Module can define a value data which is a BackendTask that will be resolved before init is called. That means it is also available when the page's HTML is pre-rendered during the build step. You can also access the resolved data in head to use it for the page's SEO meta tags. [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/BackendTask page]"
      },
      "date": 1692795823107
    },
    {
      "id": "e9c00392bb76b489",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e9c00392bb76b489",
        "text": "⇒ [[Bytes Encoders and Decoders]]"
      },
      "after": "ce7aead12a248c1a",
      "attribution": {
        "page": "2023-08-23"
      },
      "date": 1692795895208
    },
    {
      "type": "edit",
      "id": "e9c00392bb76b489",
      "item": {
        "type": "paragraph",
        "id": "e9c00392bb76b489",
        "text": "⇒ [[Bytes Encoders and Decoders]] ⇒ [[BackendTask]]"
      },
      "date": 1692795947288
    },
    {
      "id": "9c53fc8328587a72",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9c53fc8328587a72",
        "text": "Think of BackendTask like a Cmd or Effect. It's a special type which you pass up to the runtime to ask it to do something for you. Since Elm code is pure, it can't perform side-effects. BackendTasks will not do anything unless they're passed to the elm-pages framework. Since the framework has its own Model, update, etc., it's able to go perform side-effects to resolve those BackendTasks for you. You can think of it like a wrapper around [[The Elm Architecture]]."
      },
      "after": "32c1de1a715592af",
      "attribution": {
        "page": "Bytes Encoders and Decoders"
      },
      "date": 1692796061493
    },
    {
      "type": "edit",
      "id": "9c53fc8328587a72",
      "item": {
        "type": "paragraph",
        "id": "9c53fc8328587a72",
        "text": "Think of BackendTask like a Cmd or Effect. It's a special type which you pass up to the runtime to ask it to do something for you. Since Elm code is pure, it can't perform side-effects. BackendTasks will not do anything unless they're passed to the elm-pages framework. Since the framework has its own Model, update, etc., it's able to go perform side-effects to resolve those BackendTasks for you. You can think of it like a wrapper around [[The Elm Architecture]]. [https://elm-pages.com/docs/how-does-it-work page]"
      },
      "date": 1692796088760
    },
    {
      "type": "edit",
      "id": "9c53fc8328587a72",
      "item": {
        "type": "paragraph",
        "id": "9c53fc8328587a72",
        "text": "Think of BackendTask like a Cmd or Effect. It's a special type which you pass up to the runtime to ask it to do something for you. Since Elm code is pure, it can't perform side-effects. BackendTasks will not do anything unless they're passed to the elm-pages framework. Since the framework has its own Model, update, etc., it's able to go perform side-effects to resolve those BackendTasks for you. You can think of it like a wrapper around [[The Elm Architecture]] [https://guide.elm-lang.org/architecture/ site]. [https://elm-pages.com/docs/how-does-it-work page]"
      },
      "date": 1692796197754
    }
  ]
}