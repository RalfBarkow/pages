{
  "title": "#HowToThing #001",
  "story": [
    {
      "type": "paragraph",
      "id": "3a1827b5785621f6",
      "text": "Ongoing since August 2023: #HowToThing is a series of short posts from [[Karsten Schmidt]] on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon], [https://thi.ng/ site]"
    },
    {
      "type": "paragraph",
      "id": "46dbff19773e5d70",
      "text": "These are not necessarily intro examples, but each one comes with heavily commented code (and often with visual outputs/results). [https://github.com/thi-ng/umbrella/blob/develop/README.md#howtothing github]"
    },
    {
      "type": "paragraph",
      "id": "c812864ade7d2ca8",
      "text": "#HowToThing #001:\nBuild a FPS counter with moving average w/ thi.ng/transducers [https://github.com/thi-ng/umbrella/tree/develop/packages/transducers github]"
    },
    {
      "type": "html",
      "id": "6bd500642e2eed45",
      "text": "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"294.680\" height=\"61.313\" viewBox=\"0 3.715312500000003 294.6796875 61.31250000000001\" stroke=\"none\"><style>path { fill: #333; } @media (prefers-color-scheme: dark) { path { fill: #ccc; } }</style><path d=\"M0 47.520L7.031 47.520C10.469 35.817 13.986 24.193 17.367 12.434L19.969 3.715L12.938 3.715L10.336 12.434L4.711 12.434L3.445 16.864L9.070 16.864Z\"/><path d=\"M18.281 47.520L25.313 47.520C27.919 38.759 30.449 29.922 33.117 21.223L23.977 21.223L29.109 3.715L22.078 3.715C19.919 11.002 17.838 18.366 15.609 25.583L9.141 47.520L16.172 47.520L22.641 25.583L24.750 25.583Z\"/><path d=\"M44.508 13.454C44.489 11.502 42.949 9.973 40.992 9.973C39.023 9.973 37.477 11.520 37.477 13.489C37.477 15.387 39.023 16.934 40.992 16.934C42.949 16.934 44.489 15.406 44.508 13.454C44.508 13.442 44.508 13.430 44.508 13.418ZM27.422 47.520L34.453 47.520L42.258 21.223L35.227 21.223Z\"/><path d=\"M44.578 44.145C44.578 42.176 43.031 40.629 41.063 40.629C39.164 40.629 37.617 42.176 37.617 44.145C37.617 46.114 39.164 47.661 41.133 47.661C43.102 47.661 44.648 46.114 44.648 44.145Z\"/><path d=\"M54.844 47.520L61.875 47.520C64.481 38.759 67.012 29.922 69.680 21.223L53.508 21.223C50.839 29.922 48.310 38.760 45.703 47.520L52.734 47.520L59.203 25.583L61.313 25.583Z\"/><path d=\"M58.781 65.028L74.953 65.028C78.918 51.954 82.725 38.721 86.625 25.583L87.961 21.223L71.789 21.223C69.121 29.922 66.591 38.760 63.984 47.520L71.016 47.520L77.484 25.583L79.594 25.583L69.258 60.668L67.148 60.668L68.414 56.309L61.383 56.309C60.544 59.244 59.677 62.150 58.781 65.028Z\"/><path d=\"M77.063 65.028L84.094 65.028L102.234 3.715L95.203 3.715Z\"/><path d=\"M97.031 47.520L104.063 47.520C107.500 35.817 111.017 24.193 114.398 12.434L117 3.715L109.969 3.715L107.367 12.434L101.742 12.434L100.477 16.864L106.102 16.864Z\"/><path d=\"M120.516 30.012L127.547 30.012C128.378 27.046 129.244 24.116 130.148 21.223L113.977 21.223C111.308 29.922 108.779 38.760 106.172 47.520L113.203 47.520L119.672 25.583L121.781 25.583Z\"/><path d=\"M124.453 47.520L140.625 47.520C142.750 40.176 144.939 32.896 147.094 25.583L148.430 21.223L132.258 21.223L130.922 25.583L140.063 25.583L134.859 43.161L132.750 43.161L136.688 30.012L129.656 30.012C127.921 35.847 126.143 41.640 124.453 47.520Z\"/><path d=\"M151.875 47.520L158.906 47.520C161.513 38.759 164.043 29.922 166.711 21.223L150.539 21.223C147.871 29.922 145.341 38.760 142.734 47.520L149.766 47.520L156.234 25.583L158.344 25.583Z\"/><path d=\"M175.359 30.012L182.391 30.012C183.221 27.046 184.088 24.116 184.992 21.223L168.820 21.223C167.917 24.116 167.049 27.046 166.219 30.012L172.758 38.731L171.422 43.161L169.313 43.161L170.648 38.731L163.617 38.731C162.731 41.641 161.862 44.570 161.016 47.520L177.188 47.520C178.034 44.570 178.902 41.641 179.789 38.731L173.250 30.012L174.516 25.583L176.625 25.583Z\"/><path d=\"M179.297 47.520L195.469 47.520C199.745 32.883 204.099 18.322 208.406 3.715L201.375 3.715L189.703 43.161L187.594 43.161L194.133 21.223L187.102 21.223C184.503 29.992 181.854 38.710 179.297 47.520Z\"/><path d=\"M197.578 47.520L213.750 47.520C216.307 38.710 218.957 29.992 221.555 21.223L214.523 21.223L207.984 43.161L205.875 43.161L212.414 21.223L205.383 21.223C202.785 29.992 200.135 38.710 197.578 47.520Z\"/><path d=\"M230.203 30.012L237.234 30.012C238.065 27.046 238.932 24.116 239.836 21.223L223.664 21.223L222.328 25.583L222.365 25.583C220.198 32.897 217.986 40.165 215.859 47.520L232.031 47.520C232.878 44.570 233.746 41.641 234.633 38.731L227.602 38.731L226.266 43.161L224.156 43.161L229.396 25.583L231.469 25.583Z\"/><path d=\"M245.883 38.731L252.914 38.731C254.646 32.893 256.323 26.999 258.117 21.223L241.945 21.223L240.609 25.583L240.646 25.583C238.479 32.897 236.267 40.165 234.141 47.520L250.313 47.520L251.578 43.161L242.438 43.161L247.677 25.583L249.750 25.583Z\"/><path d=\"M266.766 30.012L273.797 30.012C274.628 27.046 275.494 24.116 276.398 21.223L260.227 21.223C257.558 29.922 255.029 38.760 252.422 47.520L259.453 47.520L265.922 25.583L268.031 25.583Z\"/><path d=\"M285.047 30.012L292.078 30.012C292.909 27.046 293.776 24.116 294.680 21.223L278.508 21.223C277.604 24.116 276.736 27.046 275.906 30.012L282.445 38.731L281.109 43.161L279 43.161L280.336 38.731L273.305 38.731C272.418 41.641 271.550 44.570 270.703 47.520L286.875 47.520C287.722 44.570 288.590 41.641 289.477 38.731L282.938 30.012L284.203 25.583L286.313 25.583Z\"/></svg>"
    },
    {
      "type": "code",
      "id": "c39d57e9f3f2b586",
      "text": "// howtothing-001.js\n\nimport { fiber } from 'https://cdn.skypack.dev/@thi.ng/fibers';\nimport { benchmark, comp, map, movingAverage, step } from 'https://cdn.skypack.dev/@thi.ng/transducers';\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + \" fps\")\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || \"[sampling]\";\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/"
    },
    {
      "type": "markdown",
      "id": "00f76ff348892888",
      "text": "# Application Frame"
    },
    {
      "type": "frame",
      "id": "ddb9f8e3172ed2a3",
      "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html"
    },
    {
      "type": "markdown",
      "id": "4891bdc2fa1b5915",
      "text": "See docs for more details:\n* [https://docs.thi.ng/umbrella/fibers/ fibers]\n* [https://docs.thi.ng/umbrella/transducers transducers]\n* Development mode for examples using thi.ng meta‐css [https://github.com/thi-ng/umbrella/wiki/Development-mode-for-examples-using-thi.ng-meta%E2%80%90css github]\n* Example build instructions. [https://github.com/thi-ng/umbrella/wiki/Example-build-instructions github]"
    },
    {
      "type": "paragraph",
      "id": "b823e6841e8c3bd2",
      "text": "Example build instructions. [https://github.com/thi-ng/umbrella/wiki/Example-build-instructions github]"
    },
    {
      "type": "markdown",
      "id": "1f619dada86de559",
      "text": "Install Bun, a fast JavaScript runtime, package manager, bundler, and test runner. [https://bun.sh/ site] with `curl -fsSL https://bun.sh/install | bash`."
    },
    {
      "type": "paragraph",
      "id": "af7f0d00e0bbf476",
      "text": "⇒ [[rstream-system-bus]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "#HowToThing #001",
        "story": []
      },
      "date": 1713374487502
    },
    {
      "item": {
        "type": "factory",
        "id": "c39d57e9f3f2b586"
      },
      "id": "c39d57e9f3f2b586",
      "type": "add",
      "date": 1713374489522
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "#HowToThing #001"
      },
      "date": 1713374494218
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "import { fiber } from &quot;@thi.ng/fibers&quot;;\nimport { benchmark, comp, map, movingAverage, step } from &quot;@thi.ng/transducers&quot;;\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + &quot; fps&quot;)\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || &quot;[sampling]&quot;;\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/\" title=\"import { fiber } from &quot;@thi.ng/fibers&quot;;\nimport { benchmark, comp, map, movingAverage, step } from &quot;@thi.ng/transducers&quot;;\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + &quot; fps&quot;)\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || &quot;[sampling]&quot;;\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/\" lang=\"en\" src=\"https://cdn.fosstodon.org/cache/media_attachments/files/110/898/929/188/776/093/original/283cc5f2d454ecd4.png\" width=\"1428\" height=\"1392\" style=\"transform: scale(1) translate(0px); transform-origin: 0px 0px 0px;\" draggable=\"false\">"
      },
      "date": 1713374513630
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "import { fiber } from &quot;@thi.ng/fibers&quot;;from \"https://cdn.skypack.dev/@thi.ng/atom\";\nimport { benchmark, comp, map, movingAverage, step } from &quot;@thi.ng/transducers&quot;;\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + &quot; fps&quot;)\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || &quot;[sampling]&quot;;\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/\" title=\"import { fiber } from &quot;@thi.ng/fibers&quot;;\nimport { benchmark, comp, map, movingAverage, step } from &quot;@thi.ng/transducers&quot;;\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + &quot; fps&quot;)\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || &quot;[sampling]&quot;;\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/\" lang=\"en\" src=\"https://cdn.fosstodon.org/cache/media_attachments/files/110/898/929/188/776/093/original/283cc5f2d454ecd4.png\" width=\"1428\" height=\"1392\" style=\"transform: scale(1) translate(0px); transform-origin: 0px 0px 0px;\" draggable=\"false\">"
      },
      "date": 1713374548040
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "import { fiber } from \"https://cdn.skypack.dev/@thi.ng/fiber\";\nimport { benchmark, comp, map, movingAverage, step } from \"https://cdn.skypack.dev/@thi.ng/transducer\";\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + &quot; fps&quot;)\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || &quot;[sampling]&quot;;\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/\" title=\"import { fiber } from &quot;@thi.ng/fibers&quot;;\nimport { benchmark, comp, map, movingAverage, step } from &quot;@thi.ng/transducers&quot;;\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + &quot; fps&quot;)\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || &quot;[sampling]&quot;;\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/\" lang=\"en\" src=\"https://cdn.fosstodon.org/cache/media_attachments/files/110/898/929/188/776/093/original/283cc5f2d454ecd4.png\" width=\"1428\" height=\"1392\" style=\"transform: scale(1) translate(0px); transform-origin: 0px 0px 0px;\" draggable=\"false\">"
      },
      "date": 1713374611153
    },
    {
      "id": "00f76ff348892888",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "00f76ff348892888",
        "text": "# Application Frame"
      },
      "after": "c39d57e9f3f2b586",
      "attribution": {
        "page": "rstream-dataflow"
      },
      "date": 1713374619626
    },
    {
      "id": "ddb9f8e3172ed2a3",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "ddb9f8e3172ed2a3",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html"
      },
      "after": "00f76ff348892888",
      "attribution": {
        "page": "rstream-dataflow"
      },
      "date": 1713374627694
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "import { fiber } from \"https://cdn.skypack.dev/@thi.ng/fiber\";\nimport { benchmark, comp, map, movingAverage, step } from \"https://cdn.skypack.dev/@thi.ng/transducer\";\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + &quot; fps&quot;)\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || &quot;[sampling]&quot;;\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/"
      },
      "date": 1713374708507
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "import { fiber } from \"https://cdn.skypack.dev/@thi.ng/fiber\";\nimport { benchmark, comp, map, movingAverage, step } from \"https://cdn.skypack.dev/@thi.ng/transducers\";\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + \" fps\")\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || \"[sampling]\";\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/"
      },
      "date": 1713374899047
    },
    {
      "item": {
        "type": "factory",
        "id": "3a1827b5785621f6"
      },
      "id": "3a1827b5785621f6",
      "type": "add",
      "after": "ddb9f8e3172ed2a3",
      "date": 1713374944706
    },
    {
      "id": "3a1827b5785621f6",
      "type": "move",
      "order": [
        "3a1827b5785621f6",
        "c39d57e9f3f2b586",
        "00f76ff348892888",
        "ddb9f8e3172ed2a3"
      ],
      "date": 1713374947871
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Announcing #HowToThing, small code snippets illustrating useful patterns and use cases for various libraries/projects in the https://thi.ng ecosystem/anti-framework..."
      },
      "date": 1713374949223
    },
    {
      "type": "add",
      "id": "c812864ade7d2ca8",
      "item": {
        "type": "paragraph",
        "id": "c812864ade7d2ca8",
        "text": "#HowToThing #001:\nBuild a FPS counter with moving average w/ https://thi.ng/transducers\n\nSource code in alt text\n\n(Ps. Have been trying to start similar stuff in the past on the birdsite, but let's see if I can control my attention and be more consistent this time... If you have any topic requests, please reply below [or via DM])"
      },
      "after": "3a1827b5785621f6",
      "date": 1713374976687
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Announcing #HowToThing, small code snippets illustrating useful patterns and use cases for various libraries/projects in the https://thi.ng ecosystem/anti-framework... [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon]"
      },
      "date": 1713375008219
    },
    {
      "type": "fork",
      "date": 1713375361054
    },
    {
      "type": "edit",
      "id": "ddb9f8e3172ed2a3",
      "item": {
        "type": "frame",
        "id": "ddb9f8e3172ed2a3",
        "text": "//localhost:3000/assets/pages/snippet-template/esm.html"
      },
      "date": 1713375501749
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "// howtothing-001.js\n\nimport { fiber } from \"https://cdn.skypack.dev/@thi.ng/fiber\";\nimport { benchmark, comp, map, movingAverage, step } from \"https://cdn.skypack.dev/@thi.ng/transducers\";\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + \" fps\")\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || \"[sampling]\";\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/"
      },
      "date": 1713375828439
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "// howtothing-001.js\n\nimport { fiber } from \"https://cdn.skypack.dev/@thi.ng/fiber\";\nimport { benchmark, comp, map, movingAverage, step } from \"https://cdn.skypack.dev/@thi.ng/transducers\";\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + \" fps\")\n    )\n);\n"
      },
      "date": 1713376040100
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "// howtothing-001.js\n\nimport { fiber } from 'https://cdn.skypack.dev/@thi.ng/fiber';\nimport { benchmark, comp, map, movingAverage, step } from 'https://cdn.skypack.dev/@thi.ng/transducers';\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + \" fps\")\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || \"[sampling]\";\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/"
      },
      "date": 1713376467376
    },
    {
      "type": "edit",
      "id": "c39d57e9f3f2b586",
      "item": {
        "type": "code",
        "id": "c39d57e9f3f2b586",
        "text": "// howtothing-001.js\n\nimport { fiber } from 'https://cdn.skypack.dev/@thi.ng/fibers';\nimport { benchmark, comp, map, movingAverage, step } from 'https://cdn.skypack.dev/@thi.ng/transducers';\n\n// compose a FPS counter function from multiple transducers\n// the `step` function is a wrapper for step-wise execution\nconst fps = step(\n    comp(\n        // measure time since last input\n        // (the input value itself is irrelevant)\n        benchmark(),\n        // simple moving average (period=30)\n        movingAverage(30),\n        // convert time into frequency (frame per second), format\n        map((x) => (1000 / x).toFixed(1) + \" fps\")\n    )\n);\n\n// example usage\n// (in browsers default execution of fibers is via requestAnimationFrame())\nfiber(function* () {\n    while (true) {\n        // compute next step of FPS counter\n        // since we're using a moving average of 30,\n        // the first 29 frames will not yield any result (returns `undefined`)\n        // the logical-OR (`||`) will then choose a fallback string\n        const currFps = fps(0) || \"[sampling]\";\n        console.log(currFps);\n        // wait until next frame\n        yield;\n    }\n}).run();\n\n// see docs for more details:\n// https://docs.thi.ng/umbrella/fibers/\n// https://docs.thi.ng/umbrella/transducers/"
      },
      "date": 1713376872126
    },
    {
      "item": {
        "type": "factory",
        "id": "4891bdc2fa1b5915"
      },
      "id": "4891bdc2fa1b5915",
      "type": "add",
      "after": "ddb9f8e3172ed2a3",
      "date": 1713377010135
    },
    {
      "type": "edit",
      "id": "4891bdc2fa1b5915",
      "item": {
        "type": "paragraph",
        "id": "4891bdc2fa1b5915",
        "text": "See docs for more details:\n– [https://docs.thi.ng/umbrella/fibers/ fibers]\n– [https://docs.thi.ng/umbrella/transducers/ transducers]"
      },
      "date": 1713377047882
    },
    {
      "type": "edit",
      "id": "4891bdc2fa1b5915",
      "item": {
        "type": "markdown",
        "id": "4891bdc2fa1b5915",
        "text": "See docs for more details:\n– [https://docs.thi.ng/umbrella/fibers/ fibers]\n– [https://docs.thi.ng/umbrella/transducers/ transducers]"
      },
      "date": 1713377057107
    },
    {
      "type": "edit",
      "id": "4891bdc2fa1b5915",
      "item": {
        "type": "markdown",
        "id": "4891bdc2fa1b5915",
        "text": "See docs for more details:\n* [https://docs.thi.ng/umbrella/fibers/ fibers]\n* [https://docs.thi.ng/umbrella/transducers/ transducers]"
      },
      "date": 1713377073482
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "[[Karsten Schmidt]] announces #HowToThing, small code snippets illustrating useful patterns and use cases for various libraries/projects in the https://thi.ng ecosystem/anti-framework... [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon]"
      },
      "date": 1713377193542
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "[[Karsten Schmidt]] announces #HowToThing, small code snippets illustrating useful patterns and use cases for various libraries/projects in the [https://thi.ng thi.ng] ecosystem/anti-framework... [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon]"
      },
      "date": 1713377257553
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "[[Karsten Schmidt]] announces #HowToThing, small code snippets illustrating useful patterns and use cases for various libraries/projects in the [https://thi.ng thi.ng]ecosystem/anti-framework... [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon]"
      },
      "date": 1713377263360
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "[[Karsten Schmidt]] announces #HowToThing, small code snippets illustrating useful patterns and use cases for various libraries/projects in the [https://thi.ng thi.ng] ecosystem/anti-framework... [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon]"
      },
      "date": 1713377269454
    },
    {
      "type": "edit",
      "id": "c812864ade7d2ca8",
      "item": {
        "type": "paragraph",
        "id": "c812864ade7d2ca8",
        "text": "#HowToThing #001:\nBuild a FPS counter with moving average w/ https://thi.ng/transducers"
      },
      "date": 1713377287943
    },
    {
      "type": "edit",
      "id": "c812864ade7d2ca8",
      "item": {
        "type": "paragraph",
        "id": "c812864ade7d2ca8",
        "text": "#HowToThing #001:\nBuild a FPS counter with moving average w/ https://thi.ng/transducers [https://github.com/thi-ng/umbrella/tree/develop/packages/transducers github]"
      },
      "date": 1713377320465
    },
    {
      "item": {
        "type": "factory",
        "id": "6bd500642e2eed45"
      },
      "id": "6bd500642e2eed45",
      "type": "add",
      "after": "4891bdc2fa1b5915",
      "date": 1713377360735
    },
    {
      "type": "edit",
      "id": "6bd500642e2eed45",
      "item": {
        "type": "html",
        "id": "6bd500642e2eed45",
        "text": "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"294.680\" height=\"61.313\" viewBox=\"0 3.715312500000003 294.6796875 61.31250000000001\" stroke=\"none\"><style>path { fill: #333; } @media (prefers-color-scheme: dark) { path { fill: #ccc; } }</style><path d=\"M0 47.520L7.031 47.520C10.469 35.817 13.986 24.193 17.367 12.434L19.969 3.715L12.938 3.715L10.336 12.434L4.711 12.434L3.445 16.864L9.070 16.864Z\"/><path d=\"M18.281 47.520L25.313 47.520C27.919 38.759 30.449 29.922 33.117 21.223L23.977 21.223L29.109 3.715L22.078 3.715C19.919 11.002 17.838 18.366 15.609 25.583L9.141 47.520L16.172 47.520L22.641 25.583L24.750 25.583Z\"/><path d=\"M44.508 13.454C44.489 11.502 42.949 9.973 40.992 9.973C39.023 9.973 37.477 11.520 37.477 13.489C37.477 15.387 39.023 16.934 40.992 16.934C42.949 16.934 44.489 15.406 44.508 13.454C44.508 13.442 44.508 13.430 44.508 13.418ZM27.422 47.520L34.453 47.520L42.258 21.223L35.227 21.223Z\"/><path d=\"M44.578 44.145C44.578 42.176 43.031 40.629 41.063 40.629C39.164 40.629 37.617 42.176 37.617 44.145C37.617 46.114 39.164 47.661 41.133 47.661C43.102 47.661 44.648 46.114 44.648 44.145Z\"/><path d=\"M54.844 47.520L61.875 47.520C64.481 38.759 67.012 29.922 69.680 21.223L53.508 21.223C50.839 29.922 48.310 38.760 45.703 47.520L52.734 47.520L59.203 25.583L61.313 25.583Z\"/><path d=\"M58.781 65.028L74.953 65.028C78.918 51.954 82.725 38.721 86.625 25.583L87.961 21.223L71.789 21.223C69.121 29.922 66.591 38.760 63.984 47.520L71.016 47.520L77.484 25.583L79.594 25.583L69.258 60.668L67.148 60.668L68.414 56.309L61.383 56.309C60.544 59.244 59.677 62.150 58.781 65.028Z\"/><path d=\"M77.063 65.028L84.094 65.028L102.234 3.715L95.203 3.715Z\"/><path d=\"M97.031 47.520L104.063 47.520C107.500 35.817 111.017 24.193 114.398 12.434L117 3.715L109.969 3.715L107.367 12.434L101.742 12.434L100.477 16.864L106.102 16.864Z\"/><path d=\"M120.516 30.012L127.547 30.012C128.378 27.046 129.244 24.116 130.148 21.223L113.977 21.223C111.308 29.922 108.779 38.760 106.172 47.520L113.203 47.520L119.672 25.583L121.781 25.583Z\"/><path d=\"M124.453 47.520L140.625 47.520C142.750 40.176 144.939 32.896 147.094 25.583L148.430 21.223L132.258 21.223L130.922 25.583L140.063 25.583L134.859 43.161L132.750 43.161L136.688 30.012L129.656 30.012C127.921 35.847 126.143 41.640 124.453 47.520Z\"/><path d=\"M151.875 47.520L158.906 47.520C161.513 38.759 164.043 29.922 166.711 21.223L150.539 21.223C147.871 29.922 145.341 38.760 142.734 47.520L149.766 47.520L156.234 25.583L158.344 25.583Z\"/><path d=\"M175.359 30.012L182.391 30.012C183.221 27.046 184.088 24.116 184.992 21.223L168.820 21.223C167.917 24.116 167.049 27.046 166.219 30.012L172.758 38.731L171.422 43.161L169.313 43.161L170.648 38.731L163.617 38.731C162.731 41.641 161.862 44.570 161.016 47.520L177.188 47.520C178.034 44.570 178.902 41.641 179.789 38.731L173.250 30.012L174.516 25.583L176.625 25.583Z\"/><path d=\"M179.297 47.520L195.469 47.520C199.745 32.883 204.099 18.322 208.406 3.715L201.375 3.715L189.703 43.161L187.594 43.161L194.133 21.223L187.102 21.223C184.503 29.992 181.854 38.710 179.297 47.520Z\"/><path d=\"M197.578 47.520L213.750 47.520C216.307 38.710 218.957 29.992 221.555 21.223L214.523 21.223L207.984 43.161L205.875 43.161L212.414 21.223L205.383 21.223C202.785 29.992 200.135 38.710 197.578 47.520Z\"/><path d=\"M230.203 30.012L237.234 30.012C238.065 27.046 238.932 24.116 239.836 21.223L223.664 21.223L222.328 25.583L222.365 25.583C220.198 32.897 217.986 40.165 215.859 47.520L232.031 47.520C232.878 44.570 233.746 41.641 234.633 38.731L227.602 38.731L226.266 43.161L224.156 43.161L229.396 25.583L231.469 25.583Z\"/><path d=\"M245.883 38.731L252.914 38.731C254.646 32.893 256.323 26.999 258.117 21.223L241.945 21.223L240.609 25.583L240.646 25.583C238.479 32.897 236.267 40.165 234.141 47.520L250.313 47.520L251.578 43.161L242.438 43.161L247.677 25.583L249.750 25.583Z\"/><path d=\"M266.766 30.012L273.797 30.012C274.628 27.046 275.494 24.116 276.398 21.223L260.227 21.223C257.558 29.922 255.029 38.760 252.422 47.520L259.453 47.520L265.922 25.583L268.031 25.583Z\"/><path d=\"M285.047 30.012L292.078 30.012C292.909 27.046 293.776 24.116 294.680 21.223L278.508 21.223C277.604 24.116 276.736 27.046 275.906 30.012L282.445 38.731L281.109 43.161L279 43.161L280.336 38.731L273.305 38.731C272.418 41.641 271.550 44.570 270.703 47.520L286.875 47.520C287.722 44.570 288.590 41.641 289.477 38.731L282.938 30.012L284.203 25.583L286.313 25.583Z\"/></svg>"
      },
      "date": 1713377374249
    },
    {
      "id": "6bd500642e2eed45",
      "type": "move",
      "order": [
        "3a1827b5785621f6",
        "c812864ade7d2ca8",
        "6bd500642e2eed45",
        "c39d57e9f3f2b586",
        "00f76ff348892888",
        "ddb9f8e3172ed2a3",
        "4891bdc2fa1b5915"
      ],
      "date": 1713377384706
    },
    {
      "type": "edit",
      "id": "c812864ade7d2ca8",
      "item": {
        "type": "paragraph",
        "id": "c812864ade7d2ca8",
        "text": "#HowToThing #001:\nBuild a FPS counter with moving average w/ thi.ng/transducers [https://github.com/thi-ng/umbrella/tree/develop/packages/transducers github]"
      },
      "date": 1713377441849
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713377618435
    },
    {
      "type": "edit",
      "id": "ddb9f8e3172ed2a3",
      "item": {
        "type": "frame",
        "id": "ddb9f8e3172ed2a3",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html"
      },
      "date": 1713377634699
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "[[Karsten Schmidt]] announces #HowToThing, small code snippets illustrating useful patterns and use cases for various libraries/projects in the [https://thi.ng thi.ng] ecosystem/anti-framework... [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon], [https://fosstodon.org/@rgb/112287954793525879 toot]"
      },
      "date": 1713378346795
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Ongoing since August 2023: #HowToThing is a series of short posts on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. These are not necessarily intro examples, but each one comes with heavily commented code (and often with visual outputs/results)."
      },
      "date": 1713385383892
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Ongoing since August 2023: #HowToThing is a series of short posts from [[Karsten Schmidt]]  on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. These are not necessarily intro examples, but each one comes with heavily commented code (and often with visual outputs/results)."
      },
      "date": 1713385394227
    },
    {
      "type": "remove",
      "id": "2dc5d0b7f1ba191a",
      "date": 1713385404405
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Ongoing since August 2023: #HowToThing is a series of short posts from [[Karsten Schmidt]]  on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. These are not necessarily intro examples, but each one comes with heavily commented code (and often with visual outputs/results). [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon], [https://fosstodon.org/@rgb/112287954793525879 toot]"
      },
      "date": 1713385405491
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Ongoing since August 2023: #HowToThing is a series of short posts from [[Karsten Schmidt]]  on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. These are not necessarily intro examples, but each one comes with heavily commented code (and often with visual outputs/results). [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon], [https://fosstodon.org/@rgb/112287954793525879 toot], [https://github.com/thi-ng/umbrella/blob/develop/README.md#howtothing github]"
      },
      "date": 1713386024332
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Ongoing since August 2023: #HowToThing is a series of short posts from [[Karsten Schmidt]]  on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. These are not necessarily intro examples, but each one comes with heavily commented code (and often with visual outputs/results). [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon], [https://github.com/thi-ng/umbrella/blob/develop/README.md#howtothing github]"
      },
      "date": 1713386877916
    },
    {
      "id": "b823e6841e8c3bd2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b823e6841e8c3bd2",
        "text": "Example build instructions. [https://github.com/thi-ng/umbrella/wiki/Example-build-instructions github]"
      },
      "after": "4891bdc2fa1b5915",
      "attribution": {
        "page": "2024-04-17"
      },
      "date": 1713387454151
    },
    {
      "id": "b440584d6b685c3b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b440584d6b685c3b",
        "text": "Development mode for examples using thi.ng meta‐css [https://github.com/thi-ng/umbrella/wiki/Development-mode-for-examples-using-thi.ng-meta%E2%80%90css github]"
      },
      "after": "b823e6841e8c3bd2",
      "attribution": {
        "page": "2024-04-17"
      },
      "date": 1713387457215
    },
    {
      "type": "edit",
      "id": "b823e6841e8c3bd2",
      "item": {
        "type": "paragraph",
        "id": "b823e6841e8c3bd2",
        "text": "Example build instructions. [https://github.com/thi-ng/umbrella/wiki/Example-build-instructions github]"
      },
      "date": 1713387469900
    },
    {
      "id": "b440584d6b685c3b",
      "type": "move",
      "order": [
        "3a1827b5785621f6",
        "c812864ade7d2ca8",
        "6bd500642e2eed45",
        "c39d57e9f3f2b586",
        "00f76ff348892888",
        "ddb9f8e3172ed2a3",
        "4891bdc2fa1b5915",
        "b440584d6b685c3b",
        "b823e6841e8c3bd2"
      ],
      "date": 1713387722321,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1713387728462
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Ongoing since August 2023: #HowToThing is a series of short posts from [[Karsten Schmidt]]  on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. [https://thi.ng/ site]"
      },
      "date": 1713387817822
    },
    {
      "type": "add",
      "id": "46dbff19773e5d70",
      "item": {
        "type": "paragraph",
        "id": "46dbff19773e5d70",
        "text": "These are not necessarily intro examples, but each one comes with heavily commented code (and often with visual outputs/results). [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon], [https://github.com/thi-ng/umbrella/blob/develop/README.md#howtothing github]"
      },
      "after": "3a1827b5785621f6",
      "date": 1713387817867
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Ongoing since August 2023: #HowToThing is a series of short posts from [[Karsten Schmidt]]  on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon], [https://thi.ng/ site]"
      },
      "date": 1713387873859
    },
    {
      "type": "edit",
      "id": "46dbff19773e5d70",
      "item": {
        "type": "paragraph",
        "id": "46dbff19773e5d70",
        "text": "These are not necessarily intro examples, but each one comes with heavily commented code (and often with visual outputs/results). [https://github.com/thi-ng/umbrella/blob/develop/README.md#howtothing github]"
      },
      "date": 1713387892972
    },
    {
      "id": "1f619dada86de559",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1f619dada86de559",
        "text": "Bun is a fast JavaScript runtime, package manager, bundler, and test runner. [https://bun.sh/ site]"
      },
      "after": "b823e6841e8c3bd2",
      "attribution": {
        "page": "2024-04-17"
      },
      "date": 1713388532377
    },
    {
      "id": "47f429dc80380899",
      "type": "add",
      "item": {
        "type": "code",
        "id": "47f429dc80380899",
        "text": "curl -fsSL https://bun.sh/install | bash"
      },
      "after": "1f619dada86de559",
      "attribution": {
        "page": "2024-04-17"
      },
      "date": 1713388536252
    },
    {
      "item": {
        "type": "factory",
        "id": "af7f0d00e0bbf476"
      },
      "id": "af7f0d00e0bbf476",
      "type": "add",
      "after": "47f429dc80380899",
      "date": 1713388589582
    },
    {
      "type": "edit",
      "id": "af7f0d00e0bbf476",
      "item": {
        "type": "paragraph",
        "id": "af7f0d00e0bbf476",
        "text": "⇒ [[rstream-system-bus]]"
      },
      "date": 1713388608985
    },
    {
      "type": "fork",
      "date": 1713390489834
    },
    {
      "type": "remove",
      "id": "b440584d6b685c3b",
      "date": 1713390497234
    },
    {
      "type": "edit",
      "id": "4891bdc2fa1b5915",
      "item": {
        "type": "markdown",
        "id": "4891bdc2fa1b5915",
        "text": "See docs for more details:\n* [https://docs.thi.ng/umbrella/fibers/ fibers]\n* [https://docs.thi.ng/umbrella/transducers transducers]\n* Development mode for examples using thi.ng meta‐css [https://github.com/thi-ng/umbrella/wiki/Development-mode-for-examples-using-thi.ng-meta%E2%80%90css github]\n"
      },
      "date": 1713390511650
    },
    {
      "type": "edit",
      "id": "4891bdc2fa1b5915",
      "item": {
        "type": "markdown",
        "id": "4891bdc2fa1b5915",
        "text": "See docs for more details:\n* [https://docs.thi.ng/umbrella/fibers/ fibers]\n* [https://docs.thi.ng/umbrella/transducers transducers]\n* Development mode for examples using thi.ng meta‐css [https://github.com/thi-ng/umbrella/wiki/Development-mode-for-examples-using-thi.ng-meta%E2%80%90css github]\n* Example build instructions. [https://github.com/thi-ng/umbrella/wiki/Example-build-instructions github]"
      },
      "date": 1713390518365
    },
    {
      "type": "edit",
      "id": "1f619dada86de559",
      "item": {
        "type": "paragraph",
        "id": "1f619dada86de559",
        "text": "Install Bun, a fast JavaScript runtime, package manager, bundler, and test runner. [https://bun.sh/ site]"
      },
      "date": 1713390536248
    },
    {
      "type": "remove",
      "id": "47f429dc80380899",
      "date": 1713390935720
    },
    {
      "type": "edit",
      "id": "1f619dada86de559",
      "item": {
        "type": "paragraph",
        "id": "1f619dada86de559",
        "text": "Install Bun, a fast JavaScript runtime, package manager, bundler, and test runner. [https://bun.sh/ site] with `curl -fsSL https://bun.sh/install | bash`."
      },
      "date": 1713390948864
    },
    {
      "type": "edit",
      "id": "1f619dada86de559",
      "item": {
        "type": "markdown",
        "id": "1f619dada86de559",
        "text": "Install Bun, a fast JavaScript runtime, package manager, bundler, and test runner. [https://bun.sh/ site] with `curl -fsSL https://bun.sh/install | bash`."
      },
      "date": 1713390952523
    },
    {
      "type": "edit",
      "id": "3a1827b5785621f6",
      "item": {
        "type": "paragraph",
        "id": "3a1827b5785621f6",
        "text": "Ongoing since August 2023: #HowToThing is a series of short posts from [[Karsten Schmidt]] on Mastodon, demonstrating a range of different techniques, patterns and use cases from across the thi.ng/umbrella ecosystem. [https://mastodon.thi.ng/@toxi/110898928550740865 mastodon], [https://thi.ng/ site]"
      },
      "date": 1713391202450
    }
  ]
}