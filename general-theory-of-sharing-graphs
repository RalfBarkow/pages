{
  "title": "General Theory of Sharing Graphs",
  "story": [
    {
      "type": "paragraph",
      "id": "30dfa552d2bb4a06",
      "text": "Techniques for the implementation of functional calculi based on the use of pointers (i.e., on graphs) have been known since the beginning of the 1970s (see [27, 25])."
    },
    {
      "type": "paragraph",
      "id": "855f793b08b7174c",
      "text": "[27] C.P. Wadsworth, Semantics and pragmatics of the lambda-calculus, Chapter 4, Ph.D. Thesis, Oxford, England, 1971."
    },
    {
      "type": "paragraph",
      "id": "a2954cc29824df8b",
      "text": "[25] S.L. Peyton Jones, The Implementation of Functional Programming Languages, Prentice-Hall International, Englewood Cli\u000bs, NJ, 1986. [26] L. Regnier, Lambda-Calcul et Reseaux, Ph.D. Thesis, Universit\u0013 e Paris 7, Paris, 1992. "
    },
    {
      "type": "paragraph",
      "id": "b44d49fa574549db",
      "text": "In these solutions, sharing is implemented by means of pointers from the nodes accessing a shared subterm to the root of the subterm. These techniques have a main drawback: in order to avoid unwanted side-effects, variable substitution requires a careful implementation (see [27]). In fact, replacing a term Ts for the occurrences of a variable x in a term Tt by substituting a pointer to Ts for any pointer to x would apply the variable substitution in every term Tu that shares the representation of the variable x with Tt. To fix this problem, the usual solution is to create a new instance of Tt in which to safely replace Ts for x. Soundness is recovered, but at the cost of the duplication of the redexes in Tt."
    },
    {
      "type": "markdown",
      "id": "f2d79b827d586b2a",
      "text": "## A fine decomposition of λ-calculus β-rule"
    },
    {
      "type": "paragraph",
      "id": "a2b0e9f713e678d3",
      "text": "Sharing graphs implement a sharing reduction much finer than the one obtainable keeping multiple pointers to the same subterm. In order to present this sharing reduction, let us try to implement the \f-rule of \u0015-calculus by means of a step-by-step graph reduction system in which the objects rewritten are nodes rather than terms. […]"
    },
    {
      "type": "paragraph",
      "id": "7d5f172b9ad993fc",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "9846609d62e5cabb",
      "text": "Sharing graphs have been introduced by Lamping [21] for the implementation of L\u0013 evy's optimal reductions of \u0015-terms [23]. Several re\fnements of sharing graphs have been successively proposed by Gonthier et al. [13, 14], and by Asperti and Laneve [5, 1]. The work of Gonthier et al. addressed how Lamping's formalism can be interpreted inside the so-called geometry of interaction (GOI) of Girard [12]; Asperti presented a more categorical justi\fcation of Gonthier's technique; Asperti and Laneve gave a generalization of the methodology to the so-called interaction systems, the subclass of the combinatory reduction systems [18] for which it is possible to \fnd a Curry{Howard analogy with a suitable intuitionistic logic. Furthermore, Asperti used sharing graphs for the implementation of an optimal version of an ML-like functional language [3]."
    },
    {
      "type": "paragraph",
      "id": "d6728e59e1b6096f",
      "text": "12] J.-Y. Girard, Geometry of interaction 1: interpretation of system F, in: R. Ferro, C. Bonotto, S. Valentini, A. Zanardo (Eds.), Logic Colloqium `88, Elsevier, North-Holland, Amsterdam, 1989, pp. 221{260. [https://jb55.com/linear/pdf/Towards%20a%20geometry%20of%20interaction.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "c0beebd7dd5d895a",
      "text": "> The program is essentially about the development of a logic of actions, i.e. of non-reusable facts (versus situations) we will accept the intuitionistic dogma that the meaning of a formula is in a proof of it (and not in its truth)."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "General Theory of Sharing Graphs",
        "story": []
      },
      "date": 1663283769450
    },
    {
      "type": "fork",
      "date": 1663283775208
    },
    {
      "item": {
        "type": "factory",
        "id": "30dfa552d2bb4a06"
      },
      "id": "30dfa552d2bb4a06",
      "type": "add",
      "date": 1663284561817
    },
    {
      "type": "edit",
      "id": "30dfa552d2bb4a06",
      "item": {
        "type": "paragraph",
        "id": "30dfa552d2bb4a06",
        "text": "Techniques for the implementation of functional calculi based on the use of pointers (i.e., on graphs) have been known since the beginning of the 1970s (see [27, 25])."
      },
      "date": 1663284563524
    },
    {
      "item": {
        "type": "factory",
        "id": "a2954cc29824df8b"
      },
      "id": "a2954cc29824df8b",
      "type": "add",
      "after": "30dfa552d2bb4a06",
      "date": 1663284590971
    },
    {
      "type": "edit",
      "id": "a2954cc29824df8b",
      "item": {
        "type": "paragraph",
        "id": "a2954cc29824df8b",
        "text": "[25] S.L. Peyton Jones, The Implementation of Functional Programming Languages, Prentice-Hall International, Englewood Cli\u000bs, NJ, 1986. [26] L. Regnier, Lambda-Calcul et Reseaux, Ph.D. Thesis, Universit\u0013 e Paris 7, Paris, 1992. "
      },
      "date": 1663284597367
    },
    {
      "type": "add",
      "id": "855f793b08b7174c",
      "item": {
        "type": "paragraph",
        "id": "855f793b08b7174c",
        "text": "[27] C.P. Wadsworth, Semantics and pragmatics of the lambda-calculus, Chapter 4, Ph.D. Thesis, Oxford, England, 1971."
      },
      "after": "a2954cc29824df8b",
      "date": 1663284599554
    },
    {
      "type": "add",
      "id": "58b391f741491b56",
      "item": {
        "type": "paragraph",
        "id": "58b391f741491b56",
        "text": "[26] L. Regnier, Lambda-Calcul et Reseaux, Ph.D. Thesis, Universit\u0013 e Paris 7, Paris, 1992. "
      },
      "after": "a2954cc29824df8b",
      "date": 1663284603195
    },
    {
      "type": "remove",
      "id": "58b391f741491b56",
      "date": 1663284608398
    },
    {
      "id": "855f793b08b7174c",
      "type": "move",
      "order": [
        "30dfa552d2bb4a06",
        "855f793b08b7174c",
        "a2954cc29824df8b"
      ],
      "date": 1663284612990
    },
    {
      "item": {
        "type": "factory",
        "id": "b44d49fa574549db"
      },
      "id": "b44d49fa574549db",
      "type": "add",
      "after": "a2954cc29824df8b",
      "date": 1663284671399
    },
    {
      "type": "edit",
      "id": "b44d49fa574549db",
      "item": {
        "type": "paragraph",
        "id": "b44d49fa574549db",
        "text": "In these solutions, sharing is implemented by means of pointers from the nodes accessing a shared subterm to the root of the subterm. These techniques have a main drawback: in order to avoid unwanted side-e\u000bects, variable substitution requires a careful implementation (see [27]). In fact, replacing a term Ts for the occurrences of a variable x in a term Tt by substituting a pointer to Ts for any pointer to x would apply the variable substitution in every term Tu that shares the representation of the variable x with Tt. To \fx this problem, the usual solution is to create a new instance of Tt in which to safely replace Ts for x. Soundness is recovered, but at the cost of the duplication of the redexes in Tt."
      },
      "date": 1663284678312
    },
    {
      "type": "edit",
      "id": "b44d49fa574549db",
      "item": {
        "type": "paragraph",
        "id": "b44d49fa574549db",
        "text": "In these solutions, sharing is implemented by means of pointers from the nodes accessing a shared subterm to the root of the subterm. These techniques have a main drawback: in order to avoid unwanted side-effects, variable substitution requires a careful implementation (see [27]). In fact, replacing a term Ts for the occurrences of a variable x in a term Tt by substituting a pointer to Ts for any pointer to x would apply the variable substitution in every term Tu that shares the representation of the variable x with Tt. To \fx this problem, the usual solution is to create a new instance of Tt in which to safely replace Ts for x. Soundness is recovered, but at the cost of the duplication of the redexes in Tt."
      },
      "date": 1663284717747
    },
    {
      "type": "edit",
      "id": "b44d49fa574549db",
      "item": {
        "type": "paragraph",
        "id": "b44d49fa574549db",
        "text": "In these solutions, sharing is implemented by means of pointers from the nodes accessing a shared subterm to the root of the subterm. These techniques have a main drawback: in order to avoid unwanted side-effects, variable substitution requires a careful implementation (see [27]). In fact, replacing a term Ts for the occurrences of a variable x in a term Tt by substituting a pointer to Ts for any pointer to x would apply the variable substitution in every term Tu that shares the representation of the variable x with Tt. To fix this problem, the usual solution is to create a new instance of Tt in which to safely replace Ts for x. Soundness is recovered, but at the cost of the duplication of the redexes in Tt."
      },
      "date": 1663284763522
    },
    {
      "item": {
        "type": "factory",
        "id": "f2d79b827d586b2a"
      },
      "id": "f2d79b827d586b2a",
      "type": "add",
      "after": "b44d49fa574549db",
      "date": 1663285881537
    },
    {
      "type": "edit",
      "id": "f2d79b827d586b2a",
      "item": {
        "type": "markdown",
        "id": "f2d79b827d586b2a",
        "text": "## A fine decomposition of \u0015-calculus \f-rule"
      },
      "date": 1663285894503
    },
    {
      "type": "edit",
      "id": "f2d79b827d586b2a",
      "item": {
        "type": "markdown",
        "id": "f2d79b827d586b2a",
        "text": "## A fine decomposition of λ-calculus \f-rule"
      },
      "date": 1663285924981
    },
    {
      "type": "edit",
      "id": "f2d79b827d586b2a",
      "item": {
        "type": "markdown",
        "id": "f2d79b827d586b2a",
        "text": "## A fine decomposition of λ-calculus β-rule"
      },
      "date": 1663285951480
    },
    {
      "item": {
        "type": "factory",
        "id": "a2b0e9f713e678d3"
      },
      "id": "a2b0e9f713e678d3",
      "type": "add",
      "after": "f2d79b827d586b2a",
      "date": 1663285968092
    },
    {
      "type": "edit",
      "id": "a2b0e9f713e678d3",
      "item": {
        "type": "paragraph",
        "id": "a2b0e9f713e678d3",
        "text": "Sharing graphs implement a sharing reduction much \fner than the one obtainable keeping multiple pointers to the same subterm. In order to present this sharing reduction, let us try to implement the \f-rule of \u0015-calculus by means of a step-by-step graph reduction system in which the objects rewritten are nodes rather than terms. […]"
      },
      "date": 1663285974412
    },
    {
      "type": "edit",
      "id": "a2b0e9f713e678d3",
      "item": {
        "type": "paragraph",
        "id": "a2b0e9f713e678d3",
        "text": "Sharing graphs implement a sharing reduction much finer than the one obtainable keeping multiple pointers to the same subterm. In order to present this sharing reduction, let us try to implement the \f-rule of \u0015-calculus by means of a step-by-step graph reduction system in which the objects rewritten are nodes rather than terms. […]"
      },
      "date": 1663285998331
    },
    {
      "item": {
        "type": "factory",
        "id": "7d5f172b9ad993fc"
      },
      "id": "7d5f172b9ad993fc",
      "type": "add",
      "after": "a2b0e9f713e678d3",
      "date": 1663286067504
    },
    {
      "type": "edit",
      "id": "7d5f172b9ad993fc",
      "item": {
        "type": "paragraph",
        "id": "7d5f172b9ad993fc",
        "text": "[…]"
      },
      "date": 1663286072955
    },
    {
      "type": "add",
      "id": "9846609d62e5cabb",
      "item": {
        "type": "paragraph",
        "id": "9846609d62e5cabb",
        "text": "Sharing graphs have been introduced by Lamping [21] for the implementation of L\u0013 evy's optimal reductions of \u0015-terms [23]. Several re\fnements of sharing graphs have been successively proposed by Gonthier et al. [13, 14], and by Asperti and Laneve [5, 1]. The work of Gonthier et al. addressed how Lamping's formalism can be interpreted inside the so-called geometry of interaction (GOI) of Girard [12]; Asperti presented a more categorical justi\fcation of Gonthier's technique; Asperti and Laneve gave a generalization of the methodology to the so-called interaction systems, the subclass of the combinatory reduction systems [18] for which it is possible to \fnd a Curry{Howard analogy with a suitable intuitionistic logic. Furthermore, Asperti used sharing graphs for the implementation of an optimal version of an ML-like functional language [3]."
      },
      "after": "7d5f172b9ad993fc",
      "date": 1663286075774
    },
    {
      "item": {
        "type": "factory",
        "id": "d6728e59e1b6096f"
      },
      "id": "d6728e59e1b6096f",
      "type": "add",
      "after": "9846609d62e5cabb",
      "date": 1663286120331
    },
    {
      "type": "edit",
      "id": "d6728e59e1b6096f",
      "item": {
        "type": "paragraph",
        "id": "d6728e59e1b6096f",
        "text": "12] J.-Y. Girard, Geometry of interaction 1: interpretation of system F, in: R. Ferro, C. Bonotto, S. Valentini, A. Zanardo (Eds.), Logic Colloqium `88, Elsevier, North-Holland, Amsterdam, 1989, pp. 221{260."
      },
      "date": 1663286129257
    },
    {
      "type": "edit",
      "id": "d6728e59e1b6096f",
      "item": {
        "type": "paragraph",
        "id": "d6728e59e1b6096f",
        "text": "12] J.-Y. Girard, Geometry of interaction 1: interpretation of system F, in: R. Ferro, C. Bonotto, S. Valentini, A. Zanardo (Eds.), Logic Colloqium `88, Elsevier, North-Holland, Amsterdam, 1989, pp. 221{260. [https://jb55.com/linear/pdf/Towards%20a%20geometry%20of%20interaction.pdf pdf]"
      },
      "date": 1663286156451
    },
    {
      "item": {
        "type": "factory",
        "id": "c0beebd7dd5d895a"
      },
      "id": "c0beebd7dd5d895a",
      "type": "add",
      "after": "d6728e59e1b6096f",
      "date": 1663286456770
    },
    {
      "type": "edit",
      "id": "c0beebd7dd5d895a",
      "item": {
        "type": "markdown",
        "id": "c0beebd7dd5d895a",
        "text": "> The program is essentially about the development of a logic of actions, i.e. of non-reusable facts (versus situations) we will accept the intuitionistic dogma that the meaning of a formula is in a proof of it (and not in its truth)."
      },
      "date": 1663286461504
    }
  ]
}