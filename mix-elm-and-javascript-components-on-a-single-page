{
  "title": "Mix Elm and JavaScript Components on a Single Page",
  "story": [
    {
      "type": "paragraph",
      "id": "1ed5fa2ec9a0c137",
      "text": "Embedding Elm App in Page [https://dmitryrogozhny.com/blog/embed-elm-app-in-page post] â‡’ [[Elm and AI]]"
    },
    {
      "type": "pagefold",
      "id": "603b285b460c2f4b",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "20a0bff18b54e2d9",
      "text": "To embed an Elm application in a web page, you can follow these steps:"
    },
    {
      "type": "paragraph",
      "id": "e86d177a0ff90607",
      "text": "1. Build your Elm application using the elm make command. This will generate a JavaScript file that you can include in your web page.\n"
    },
    {
      "type": "paragraph",
      "id": "ca0af2928b2221df",
      "text": "2. Create an HTML element that will contain your Elm application. You can use a div element for this purpose.\n"
    },
    {
      "type": "paragraph",
      "id": "1c3584052a973c7b",
      "text": "3. Include the generated JavaScript file in your HTML page using a [[Script Tag]]. You can include the file either in the head or body section of your HTML page."
    },
    {
      "type": "code",
      "id": "097b9b9d1c26bc57",
      "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Elm App</title>\n    <script src=\"my-elm-app.js\"></script>\n  </head>\n  <body>\n    <div id=\"elm-container\"></div>\n  </body>\n</html>\n"
    },
    {
      "type": "paragraph",
      "id": "5f892e5e71cec9da",
      "text": "4. In your Elm application, use the embed function to mount your application to the HTML element. The embed function takes two arguments: the Elm module that contains your application, and a reference to the HTML element where you want to mount the application."
    },
    {
      "type": "paragraph",
      "id": "6e4e618655ec3fff",
      "text": "[Note: See [[rdom-svg-nodes]] and the use of the $compile function, which also applies this mount concept; RB]"
    },
    {
      "type": "code",
      "id": "7dea33ebb7a87fc3",
      "text": "var app = Elm.Main.embed(document.getElementById('elm-container'));\n"
    },
    {
      "type": "paragraph",
      "id": "a8c097e7c02771bf",
      "text": "5. Save your HTML page and open it in a web browser. Your Elm application should now be embedded in the web page."
    },
    {
      "type": "paragraph",
      "id": "b5286bc8070ad3ca",
      "text": "Note that you may need to adjust the src attribute in the script tag to match the name and location of the JavaScript file generated by the elm make command."
    },
    {
      "type": "pagefold",
      "id": "06ffd193ec454c0d",
      "text": ". chat.openai ."
    },
    {
      "type": "paragraph",
      "id": "0395968933bd62ab",
      "text": "How to integrate an existing node.js app into an Elm app, so that the node.js app will be displayed in a lineup of windows side by side with the Elm app?"
    },
    {
      "type": "pagefold",
      "id": "754a0b7bb13d7016",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "cc7e4f6cd72a83d3",
      "text": "To integrate an existing Node.js app with an Elm app and display them side by side, you can follow these steps:"
    },
    {
      "type": "paragraph",
      "id": "e878a0ee6b83ad8f",
      "text": "1. Set up a container that will hold both the Node.js app and the Elm app. You can use a parent div element for this purpose."
    },
    {
      "type": "code",
      "id": "b5341e99cad9215c",
      "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Node.js and Elm Integration</title>\n  </head>\n  <body>\n    <div id=\"container\">\n      <!-- Node.js app will be displayed here -->\n      <div id=\"node-app\"></div>\n      <!-- Elm app will be displayed here -->\n      <div id=\"elm-app\"></div>\n    </div>\n    <script src=\"node-app.js\"></script>\n    <script src=\"elm-app.js\"></script>\n  </body>\n</html>\n"
    },
    {
      "type": "paragraph",
      "id": "53319d239278c667",
      "text": "2. Add the Node.js app to the container. You can use a script tag to load the Node.js app's JavaScript file and add it to the div element you created for the Node.js app."
    },
    {
      "type": "code",
      "id": "e7d9c11d0dc25c20",
      "text": "var nodeAppContainer = document.getElementById('node-app');\nvar nodeAppIframe = document.createElement('iframe');\nnodeAppIframe.src = 'http://localhost:3000'; // replace with your Node.js app's URL\nnodeAppIframe.width = '50%'; // adjust size as needed\nnodeAppIframe.height = '100%'; // adjust size as needed\nnodeAppContainer.appendChild(nodeAppIframe);\n"
    },
    {
      "type": "pagefold",
      "id": "f4303dca7e31f73d",
      "text": "chat.openai",
      "alias": "754a0b7bb13d7016"
    },
    {
      "type": "paragraph",
      "id": "17821c5d1246933d",
      "text": "3. Add the Elm app to the container. You can use the embed function to mount the Elm app to the div element you created for the Elm app."
    },
    {
      "type": "code",
      "id": "83c4df59895ff1dc",
      "text": "var elmAppContainer = document.getElementById('elm-app');\nvar elmApp = Elm.Main.embed(elmAppContainer);\n"
    },
    {
      "type": "paragraph",
      "id": "4abd7b345cae602d",
      "text": "4. Style the container and the child elements using CSS to position them side by side."
    },
    {
      "type": "code",
      "id": "4e51fef6c4d74e6c",
      "text": "#container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n}\n#node-app, #elm-app {\n  border: 1px solid black;\n  margin: 10px;\n}\n"
    },
    {
      "type": "paragraph",
      "id": "1dd5da7b680ffc2a",
      "text": "5. Save the HTML file and open it in a web browser. You should see both the Node.js app and the Elm app displayed side by side in the container.\n"
    },
    {
      "type": "paragraph",
      "id": "e2268a5ed4e4d688",
      "text": "Note that you may need to adjust the size and positioning of the container and the child elements to fit your specific use case."
    },
    {
      "type": "pagefold",
      "id": "aa5f194264c55bb4",
      "text": ". chat.openai ."
    },
    {
      "type": "paragraph",
      "id": "93a9f38d9e5dfa29",
      "text": "How to communicate between the Elm app and the Node.js app in this container?"
    },
    {
      "type": "pagefold",
      "id": "788ede89aae83fdf",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "d73199f74f52d28e",
      "text": "To communicate between the Elm app and the Node.js app in the container, you can use one of the following methods:"
    },
    {
      "type": "paragraph",
      "id": "6a9c2b917db5a70d",
      "text": "1. [[PostMessage]] API: You can use the postMessage API to send messages between the Elm app and the Node.js app. In the Node.js app, you can listen to the message event on the window object to receive messages from the Elm app. In the Elm app, you can use the send function to send messages to the Node.js app. Here's an example:"
    },
    {
      "type": "code",
      "id": "748017371372794c",
      "text": "// Node.js app\nwindow.addEventListener('message', function(event) {\n  if (event.origin !== 'http://localhost:8000') { // replace with your Elm app's URL\n    return;\n  }\n  // handle message from Elm app\n  console.log('Received message from Elm app:', event.data);\n});\n\n// Elm app\nvar nodeAppIframe = document.getElementById('node-app');\nnodeAppIframe.contentWindow.postMessage('Hello from Elm app!', 'http://localhost:3000'); // replace with your Node.js app's URL\n"
    },
    {
      "type": "paragraph",
      "id": "3350b470e65fac0a",
      "text": "2. [[WebSockets]]: You can use WebSockets to establish a bidirectional communication channel between the Elm app and the Node.js app. In the Node.js app, you can use a WebSocket library like ws to create a WebSocket server. In the Elm app, you can use the WebSocket API to create a WebSocket client and send messages to the Node.js app. Here's an example:"
    },
    {
      "type": "code",
      "id": "22d502390097429c",
      "text": "// Node.js app\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 }); // replace with your desired port\n\nwss.on('connection', function connection(ws) {\n  console.log('WebSocket connection established');\n  ws.on('message', function incoming(message) {\n    console.log('Received message from Elm app:', message);\n    // handle message from Elm app\n  });\n});\n\n// Elm app\nvar socket = new WebSocket('ws://localhost:8080'); // replace with your Node.js app's URL\n\nsocket.addEventListener('open', function(event) {\n  console.log('WebSocket connection established');\n  socket.send('Hello from Elm app!');\n});\n\nsocket.addEventListener('message', function(event) {\n  console.log('Received message from Node.js app:', event.data);\n  // handle message from Node.js app\n});\n"
    },
    {
      "type": "paragraph",
      "id": "bb53d31b7b6b8cf2",
      "text": "Note that you'll need to implement error handling and security measures for both methods to ensure safe and reliable communication between the Elm app and the Node.js app."
    },
    {
      "type": "pagefold",
      "id": "74d7b55975dcbf5d",
      "text": ". chat.openai ."
    },
    {
      "type": "paragraph",
      "id": "772c41958c4c5610",
      "text": "To mix Elm and Federated Wiki JavaScript components on a single page, you can follow these steps:"
    },
    {
      "type": "pagefold",
      "id": "a1b17bf3fdcdc056",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "87d3b481fb410658",
      "text": "To mix Elm and Federated Wiki JavaScript components on a single page, you can follow these steps:"
    },
    {
      "type": "paragraph",
      "id": "75f6590dbe5aec36",
      "text": "1. Set up a [[Container]] that will hold both the Elm app and the Federated Wiki component. You can use a parent div element for this purpose."
    },
    {
      "type": "code",
      "id": "627b2331bfac043f",
      "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Elm and Federated Wiki Integration</title>\n  </head>\n  <body>\n    <div id=\"container\">\n      <!-- Elm app will be displayed here -->\n      <div id=\"elm-app\"></div>\n      <!-- Federated Wiki component will be displayed here -->\n      <div id=\"wiki-component\"></div>\n    </div>\n    <script src=\"elm-app.js\"></script>\n    <script src=\"wiki-component.js\"></script>\n  </body>\n</html>\n"
    },
    {
      "type": "paragraph",
      "id": "3254f3484e63dcf8",
      "text": "2. Add the Elm app to the container. You can use the embed function to mount the Elm app to the div element you created for the Elm app."
    },
    {
      "type": "code",
      "id": "8fad6ede10f519b8",
      "text": "var elmAppContainer = document.getElementById('elm-app');\nvar elmApp = Elm.Main.embed(elmAppContainer);\n"
    },
    {
      "type": "paragraph",
      "id": "1580e2f208e06f2e",
      "text": "3. Add the Federated Wiki component to the container. You can use a [[Script Tag]] to load the Federated Wiki component's JavaScript file and add it to the div element you created for the Federated Wiki component."
    },
    {
      "type": "code",
      "id": "d85498f117756c4b",
      "text": "var wikiComponentContainer = document.getElementById('wiki-component');\nvar wikiComponentScript = document.createElement('script');\nwikiComponentScript.src = 'https://some.federated.wiki/component.js'; // replace with the URL of your Federated Wiki component\nwikiComponentScript.onload = function() {\n  // initialize the Federated Wiki component\n  var wikiComponent = new FederatedWiki.Component();\n  wikiComponent.mount(wikiComponentContainer);\n};\ndocument.head.appendChild(wikiComponentScript);\n"
    },
    {
      "type": "paragraph",
      "id": "b288975121779629",
      "text": "4. Style the container and the child elements using CSS to position them side by side."
    },
    {
      "type": "code",
      "id": "4039a186b62deead",
      "text": "#container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n}\n#elm-app, #wiki-component {\n  border: 1px solid black;\n  margin: 10px;\n}\n"
    },
    {
      "type": "paragraph",
      "id": "09727fcba13948da",
      "text": "5. Save the HTML file and open it in a web browser. You should see both the Elm app and the Federated Wiki component displayed side by side in the container.\n"
    },
    {
      "type": "paragraph",
      "id": "8e431912ad5ccd49",
      "text": "Note that you may need to adjust the size and positioning of the container and the child elements to fit your specific use case. Also, make sure that the Federated Wiki component is compatible with the version of the Federated Wiki software you're using."
    },
    {
      "type": "pagefold",
      "id": "c7c49675b989fc5a",
      "text": ". chat.openai ."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Mix Elm and JavaScript Components on a Single Page",
        "story": []
      },
      "date": 1681998472957
    },
    {
      "item": {
        "type": "factory",
        "id": "1ed5fa2ec9a0c137"
      },
      "id": "1ed5fa2ec9a0c137",
      "type": "add",
      "date": 1681998502098
    },
    {
      "type": "edit",
      "id": "1ed5fa2ec9a0c137",
      "item": {
        "type": "paragraph",
        "id": "1ed5fa2ec9a0c137",
        "text": "Embedding Elm App in Page "
      },
      "date": 1681998503954
    },
    {
      "type": "edit",
      "id": "1ed5fa2ec9a0c137",
      "item": {
        "type": "paragraph",
        "id": "1ed5fa2ec9a0c137",
        "text": "Embedding Elm App in Page [https://dmitryrogozhny.com/blog/embed-elm-app-in-page post]"
      },
      "date": 1681998515954
    },
    {
      "id": "603b285b460c2f4b",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "603b285b460c2f4b",
        "text": "chat.openai"
      },
      "after": "1ed5fa2ec9a0c137",
      "attribution": {
        "page": "2023-04-20"
      },
      "date": 1681998535636
    },
    {
      "id": "20a0bff18b54e2d9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "20a0bff18b54e2d9",
        "text": "To embed an Elm application in a web page, you can follow these steps:"
      },
      "after": "603b285b460c2f4b",
      "attribution": {
        "page": "2023-04-20"
      },
      "date": 1681998538157
    },
    {
      "id": "e86d177a0ff90607",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e86d177a0ff90607",
        "text": "1. Build your Elm application using the elm make command. This will generate a JavaScript file that you can include in your web page.\nCreate an HTML element that will contain your Elm application. You can use a div element for this purpose.\nInclude the generated JavaScript file in your HTML page using a script tag. You can include the file either in the head or body section of your HTML page."
      },
      "after": "20a0bff18b54e2d9",
      "attribution": {
        "page": "2023-04-20"
      },
      "date": 1681998540814
    },
    {
      "type": "edit",
      "id": "e86d177a0ff90607",
      "item": {
        "type": "paragraph",
        "id": "e86d177a0ff90607",
        "text": "1. Build your Elm application using the elm make command. This will generate a JavaScript file that you can include in your web page.\n"
      },
      "date": 1681998558606
    },
    {
      "type": "add",
      "id": "ca0af2928b2221df",
      "item": {
        "type": "paragraph",
        "id": "ca0af2928b2221df",
        "text": "2. Create an HTML element that will contain your Elm application. You can use a div element for this purpose.\n"
      },
      "after": "e86d177a0ff90607",
      "date": 1681998562442
    },
    {
      "type": "add",
      "id": "1c3584052a973c7b",
      "item": {
        "type": "paragraph",
        "id": "1c3584052a973c7b",
        "text": "3. Include the generated JavaScript file in your HTML page using a script tag. You can include the file either in the head or body section of your HTML page."
      },
      "after": "ca0af2928b2221df",
      "date": 1681998562744
    },
    {
      "item": {
        "type": "factory",
        "id": "097b9b9d1c26bc57"
      },
      "id": "097b9b9d1c26bc57",
      "type": "add",
      "after": "1c3584052a973c7b",
      "date": 1681998572597
    },
    {
      "type": "edit",
      "id": "097b9b9d1c26bc57",
      "item": {
        "type": "code",
        "id": "097b9b9d1c26bc57",
        "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>My Elm App</title>\n    <script src=\"my-elm-app.js\"></script>\n  </head>\n  <body>\n    <div id=\"elm-container\"></div>\n  </body>\n</html>\n"
      },
      "date": 1681998574538
    },
    {
      "item": {
        "type": "factory",
        "id": "5f892e5e71cec9da"
      },
      "id": "5f892e5e71cec9da",
      "type": "add",
      "after": "097b9b9d1c26bc57",
      "date": 1681998594352
    },
    {
      "type": "edit",
      "id": "5f892e5e71cec9da",
      "item": {
        "type": "paragraph",
        "id": "5f892e5e71cec9da",
        "text": "4. In your Elm application, use the embed function to mount your application to the HTML element. The embed function takes two arguments: the Elm module that contains your application, and a reference to the HTML element where you want to mount the application."
      },
      "date": 1681998596703
    },
    {
      "item": {
        "type": "factory",
        "id": "7dea33ebb7a87fc3"
      },
      "id": "7dea33ebb7a87fc3",
      "type": "add",
      "after": "5f892e5e71cec9da",
      "date": 1681998604849
    },
    {
      "type": "edit",
      "id": "7dea33ebb7a87fc3",
      "item": {
        "type": "code",
        "id": "7dea33ebb7a87fc3",
        "text": "var app = Elm.Main.embed(document.getElementById('elm-container'));\n"
      },
      "date": 1681998606724
    },
    {
      "item": {
        "type": "factory",
        "id": "a8c097e7c02771bf"
      },
      "id": "a8c097e7c02771bf",
      "type": "add",
      "after": "7dea33ebb7a87fc3",
      "date": 1681998626527
    },
    {
      "type": "edit",
      "id": "a8c097e7c02771bf",
      "item": {
        "type": "paragraph",
        "id": "a8c097e7c02771bf",
        "text": "5. Save your HTML page and open it in a web browser. Your Elm application should now be embedded in the web page."
      },
      "date": 1681998630769
    },
    {
      "item": {
        "type": "factory",
        "id": "b5286bc8070ad3ca"
      },
      "id": "b5286bc8070ad3ca",
      "type": "add",
      "after": "a8c097e7c02771bf",
      "date": 1681998641778
    },
    {
      "type": "edit",
      "id": "b5286bc8070ad3ca",
      "item": {
        "type": "paragraph",
        "id": "b5286bc8070ad3ca",
        "text": "Note that you may need to adjust the src attribute in the script tag to match the name and location of the JavaScript file generated by the elm make command."
      },
      "date": 1681998643555
    },
    {
      "id": "06ffd193ec454c0d",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "06ffd193ec454c0d",
        "text": ". chat.openai ."
      },
      "after": "b5286bc8070ad3ca",
      "attribution": {
        "page": "2023-04-20"
      },
      "date": 1681998647452
    },
    {
      "item": {
        "type": "factory",
        "id": "0395968933bd62ab"
      },
      "id": "0395968933bd62ab",
      "type": "add",
      "after": "06ffd193ec454c0d",
      "date": 1681998669734
    },
    {
      "type": "edit",
      "id": "0395968933bd62ab",
      "item": {
        "type": "paragraph",
        "id": "0395968933bd62ab",
        "text": "How to integrate an existing node.js app into an Elm app, so that the node.js app will be displayed in a lineup of windows side by side with the Elm app?"
      },
      "date": 1681998671269
    },
    {
      "id": "754a0b7bb13d7016",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "754a0b7bb13d7016",
        "text": "chat.openai"
      },
      "after": "0395968933bd62ab",
      "attribution": {
        "page": "2023-04-20"
      },
      "date": 1681998679559
    },
    {
      "item": {
        "type": "factory",
        "id": "cc7e4f6cd72a83d3"
      },
      "id": "cc7e4f6cd72a83d3",
      "type": "add",
      "after": "754a0b7bb13d7016",
      "date": 1681998690272
    },
    {
      "type": "edit",
      "id": "cc7e4f6cd72a83d3",
      "item": {
        "type": "paragraph",
        "id": "cc7e4f6cd72a83d3",
        "text": "To integrate an existing Node.js app with an Elm app and display them side by side, you can follow these steps:"
      },
      "date": 1681998696141
    },
    {
      "type": "add",
      "id": "e878a0ee6b83ad8f",
      "item": {
        "type": "paragraph",
        "id": "e878a0ee6b83ad8f",
        "text": "1. Set up a container that will hold both the Node.js app and the Elm app. You can use a parent div element for this purpose."
      },
      "after": "cc7e4f6cd72a83d3",
      "date": 1681998697509
    },
    {
      "item": {
        "type": "factory",
        "id": "b5341e99cad9215c"
      },
      "id": "b5341e99cad9215c",
      "type": "add",
      "after": "e878a0ee6b83ad8f",
      "date": 1681998703323
    },
    {
      "type": "edit",
      "id": "b5341e99cad9215c",
      "item": {
        "type": "code",
        "id": "b5341e99cad9215c",
        "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Node.js and Elm Integration</title>\n  </head>\n  <body>\n    <div id=\"container\">\n      <!-- Node.js app will be displayed here -->\n      <div id=\"node-app\"></div>\n      <!-- Elm app will be displayed here -->\n      <div id=\"elm-app\"></div>\n    </div>\n    <script src=\"node-app.js\"></script>\n    <script src=\"elm-app.js\"></script>\n  </body>\n</html>\n"
      },
      "date": 1681998706613
    },
    {
      "item": {
        "type": "factory",
        "id": "53319d239278c667"
      },
      "id": "53319d239278c667",
      "type": "add",
      "after": "b5341e99cad9215c",
      "date": 1681998749712
    },
    {
      "type": "edit",
      "id": "53319d239278c667",
      "item": {
        "type": "paragraph",
        "id": "53319d239278c667",
        "text": "2. Add the Node.js app to the container. You can use a script tag to load the Node.js app's JavaScript file and add it to the div element you created for the Node.js app."
      },
      "date": 1681998752806
    },
    {
      "item": {
        "type": "factory",
        "id": "5c867f521656775c"
      },
      "id": "5c867f521656775c",
      "type": "add",
      "after": "53319d239278c667",
      "date": 1681998778885
    },
    {
      "type": "edit",
      "id": "5c867f521656775c",
      "item": {
        "type": "paragraph",
        "id": "5c867f521656775c",
        "text": "var nodeAppContainer = document.getElementById('node-app');\nvar nodeAppIframe = document.createElement('iframe');\nnodeAppIframe.src = 'http://localhost:3000'; // replace with your Node.js app's URL\nnodeAppIframe.width = '50%'; // adjust size as needed\nnodeAppIframe.height = '100%'; // adjust size as needed\nnodeAppContainer.appendChild(nodeAppIframe);\n"
      },
      "date": 1681998780195
    },
    {
      "item": {
        "type": "factory",
        "id": "e7d9c11d0dc25c20"
      },
      "id": "e7d9c11d0dc25c20",
      "type": "add",
      "after": "5c867f521656775c",
      "date": 1681998782861
    },
    {
      "type": "edit",
      "id": "e7d9c11d0dc25c20",
      "item": {
        "type": "code",
        "id": "e7d9c11d0dc25c20",
        "text": "var nodeAppContainer = document.getElementById('node-app');\nvar nodeAppIframe = document.createElement('iframe');\nnodeAppIframe.src = 'http://localhost:3000'; // replace with your Node.js app's URL\nnodeAppIframe.width = '50%'; // adjust size as needed\nnodeAppIframe.height = '100%'; // adjust size as needed\nnodeAppContainer.appendChild(nodeAppIframe);\n"
      },
      "date": 1681998785385
    },
    {
      "type": "remove",
      "id": "5c867f521656775c",
      "date": 1681998787079
    },
    {
      "item": {
        "type": "factory",
        "id": "17821c5d1246933d"
      },
      "id": "17821c5d1246933d",
      "type": "add",
      "after": "e7d9c11d0dc25c20",
      "date": 1681998829493
    },
    {
      "type": "edit",
      "id": "17821c5d1246933d",
      "item": {
        "type": "paragraph",
        "id": "17821c5d1246933d",
        "text": "3. Add the Elm app to the container. You can use the embed function to mount the Elm app to the div element you created for the Elm app."
      },
      "date": 1681998832676
    },
    {
      "item": {
        "type": "factory",
        "id": "83c4df59895ff1dc"
      },
      "id": "83c4df59895ff1dc",
      "type": "add",
      "after": "17821c5d1246933d",
      "date": 1681998847728
    },
    {
      "type": "edit",
      "id": "83c4df59895ff1dc",
      "item": {
        "type": "code",
        "id": "83c4df59895ff1dc",
        "text": "var elmAppContainer = document.getElementById('elm-app');\nvar elmApp = Elm.Main.embed(elmAppContainer);\n"
      },
      "date": 1681998849608
    },
    {
      "item": {
        "type": "factory",
        "id": "4abd7b345cae602d"
      },
      "id": "4abd7b345cae602d",
      "type": "add",
      "after": "83c4df59895ff1dc",
      "date": 1681998861262
    },
    {
      "type": "edit",
      "id": "4abd7b345cae602d",
      "item": {
        "type": "paragraph",
        "id": "4abd7b345cae602d",
        "text": "4. Style the container and the child elements using CSS to position them side by side."
      },
      "date": 1681998863632
    },
    {
      "item": {
        "type": "factory",
        "id": "4e51fef6c4d74e6c"
      },
      "id": "4e51fef6c4d74e6c",
      "type": "add",
      "after": "4abd7b345cae602d",
      "date": 1681998869684
    },
    {
      "type": "edit",
      "id": "4e51fef6c4d74e6c",
      "item": {
        "type": "code",
        "id": "4e51fef6c4d74e6c",
        "text": "#container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n}\n#node-app, #elm-app {\n  border: 1px solid black;\n  margin: 10px;\n}\n"
      },
      "date": 1681998871657
    },
    {
      "item": {
        "type": "factory",
        "id": "1dd5da7b680ffc2a"
      },
      "id": "1dd5da7b680ffc2a",
      "type": "add",
      "after": "4e51fef6c4d74e6c",
      "date": 1681998880253
    },
    {
      "type": "edit",
      "id": "1dd5da7b680ffc2a",
      "item": {
        "type": "paragraph",
        "id": "1dd5da7b680ffc2a",
        "text": "5. Save the HTML file and open it in a web browser. You should see both the Node.js app and the Elm app displayed side by side in the container.\n"
      },
      "date": 1681998885561
    },
    {
      "type": "edit",
      "id": "1ed5fa2ec9a0c137",
      "item": {
        "type": "paragraph",
        "id": "1ed5fa2ec9a0c137",
        "text": "Embedding Elm App in Page [https://dmitryrogozhny.com/blog/embed-elm-app-in-page post] [[Elm and AI]]"
      },
      "date": 1681998904124
    },
    {
      "type": "edit",
      "id": "1ed5fa2ec9a0c137",
      "item": {
        "type": "paragraph",
        "id": "1ed5fa2ec9a0c137",
        "text": "Embedding Elm App in Page [https://dmitryrogozhny.com/blog/embed-elm-app-in-page post] â‡’ [[Elm and AI]]"
      },
      "date": 1681998910597
    },
    {
      "item": {
        "type": "factory",
        "id": "e2268a5ed4e4d688"
      },
      "id": "e2268a5ed4e4d688",
      "type": "add",
      "after": "1dd5da7b680ffc2a",
      "date": 1681998989111
    },
    {
      "type": "edit",
      "id": "e2268a5ed4e4d688",
      "item": {
        "type": "paragraph",
        "id": "e2268a5ed4e4d688",
        "text": "Note that you may need to adjust the size and positioning of the container and the child elements to fit your specific use case."
      },
      "date": 1681998990452
    },
    {
      "id": "aa5f194264c55bb4",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "aa5f194264c55bb4",
        "text": ". chat.openai ."
      },
      "after": "e2268a5ed4e4d688",
      "attribution": {
        "page": "2023-04-20"
      },
      "date": 1681999001051
    },
    {
      "item": {
        "type": "factory",
        "id": "93a9f38d9e5dfa29"
      },
      "id": "93a9f38d9e5dfa29",
      "type": "add",
      "after": "aa5f194264c55bb4",
      "date": 1681999016985
    },
    {
      "type": "edit",
      "id": "93a9f38d9e5dfa29",
      "item": {
        "type": "paragraph",
        "id": "93a9f38d9e5dfa29",
        "text": "How to communicate between the Elm app and the Node.js app in this container?"
      },
      "date": 1681999018441
    },
    {
      "id": "f4303dca7e31f73d",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "f4303dca7e31f73d",
        "text": "chat.openai",
        "alias": "754a0b7bb13d7016"
      },
      "after": "e7d9c11d0dc25c20",
      "attribution": {
        "page": "2023-04-20"
      },
      "date": 1681999041658
    },
    {
      "item": {
        "type": "factory",
        "id": "788ede89aae83fdf"
      },
      "id": "788ede89aae83fdf",
      "type": "add",
      "after": "93a9f38d9e5dfa29",
      "date": 1681999048965
    },
    {
      "type": "edit",
      "id": "788ede89aae83fdf",
      "item": {
        "type": "pagefold",
        "id": "788ede89aae83fdf",
        "text": "chat.openai"
      },
      "date": 1681999058737
    },
    {
      "item": {
        "type": "factory",
        "id": "d73199f74f52d28e"
      },
      "id": "d73199f74f52d28e",
      "type": "add",
      "after": "788ede89aae83fdf",
      "date": 1681999076984
    },
    {
      "type": "edit",
      "id": "d73199f74f52d28e",
      "item": {
        "type": "paragraph",
        "id": "d73199f74f52d28e",
        "text": "To communicate between the Elm app and the Node.js app in the container, you can use one of the following methods:"
      },
      "date": 1681999086662
    },
    {
      "type": "add",
      "id": "6a9c2b917db5a70d",
      "item": {
        "type": "paragraph",
        "id": "6a9c2b917db5a70d",
        "text": "1. PostMessage API: You can use the postMessage API to send messages between the Elm app and the Node.js app. In the Node.js app, you can listen to the message event on the window object to receive messages from the Elm app. In the Elm app, you can use the send function to send messages to the Node.js app. Here's an example:"
      },
      "after": "d73199f74f52d28e",
      "date": 1681999088856
    },
    {
      "type": "edit",
      "id": "6a9c2b917db5a70d",
      "item": {
        "type": "paragraph",
        "id": "6a9c2b917db5a70d",
        "text": "1. [[PostMessage]] API: You can use the postMessage API to send messages between the Elm app and the Node.js app. In the Node.js app, you can listen to the message event on the window object to receive messages from the Elm app. In the Elm app, you can use the send function to send messages to the Node.js app. Here's an example:"
      },
      "date": 1681999102908
    },
    {
      "item": {
        "type": "factory",
        "id": "748017371372794c"
      },
      "id": "748017371372794c",
      "type": "add",
      "after": "6a9c2b917db5a70d",
      "date": 1681999137556
    },
    {
      "type": "edit",
      "id": "748017371372794c",
      "item": {
        "type": "code",
        "id": "748017371372794c",
        "text": "// Node.js app\nwindow.addEventListener('message', function(event) {\n  if (event.origin !== 'http://localhost:8000') { // replace with your Elm app's URL\n    return;\n  }\n  // handle message from Elm app\n  console.log('Received message from Elm app:', event.data);\n});\n\n// Elm app\nvar nodeAppIframe = document.getElementById('node-app');\nnodeAppIframe.contentWindow.postMessage('Hello from Elm app!', 'http://localhost:3000'); // replace with your Node.js app's URL\n"
      },
      "date": 1681999139322
    },
    {
      "item": {
        "type": "factory",
        "id": "3350b470e65fac0a"
      },
      "id": "3350b470e65fac0a",
      "type": "add",
      "after": "748017371372794c",
      "date": 1682002822808
    },
    {
      "type": "edit",
      "id": "3350b470e65fac0a",
      "item": {
        "type": "paragraph",
        "id": "3350b470e65fac0a",
        "text": "2. WebSockets: You can use WebSockets to establish a bidirectional communication channel between the Elm app and the Node.js app. In the Node.js app, you can use a WebSocket library like ws to create a WebSocket server. In the Elm app, you can use the WebSocket API to create a WebSocket client and send messages to the Node.js app. Here's an example:"
      },
      "date": 1682002826277
    },
    {
      "item": {
        "type": "factory",
        "id": "e87c131f514ebb38"
      },
      "id": "e87c131f514ebb38",
      "type": "add",
      "after": "3350b470e65fac0a",
      "date": 1682002847054
    },
    {
      "type": "edit",
      "id": "e87c131f514ebb38",
      "item": {
        "type": "paragraph",
        "id": "e87c131f514ebb38",
        "text": "WebSockets: You can use WebSockets to establish a bidirectional communication channel between the Elm app and the Node.js app. In the Node.js app, you can use a WebSocket library like ws to create a WebSocket server. In the Elm app, you can use the WebSocket API to create a WebSocket client and send messages to the Node.js app. Here's an example:"
      },
      "date": 1682002848830
    },
    {
      "type": "remove",
      "id": "e87c131f514ebb38",
      "date": 1682002851904
    },
    {
      "item": {
        "type": "factory",
        "id": "22d502390097429c"
      },
      "id": "22d502390097429c",
      "type": "add",
      "after": "3350b470e65fac0a",
      "date": 1682002855843
    },
    {
      "type": "edit",
      "id": "22d502390097429c",
      "item": {
        "type": "code",
        "id": "22d502390097429c",
        "text": "// Node.js app\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 }); // replace with your desired port\n\nwss.on('connection', function connection(ws) {\n  console.log('WebSocket connection established');\n  ws.on('message', function incoming(message) {\n    console.log('Received message from Elm app:', message);\n    // handle message from Elm app\n  });\n});\n\n// Elm app\nvar socket = new WebSocket('ws://localhost:8080'); // replace with your Node.js app's URL\n\nsocket.addEventListener('open', function(event) {\n  console.log('WebSocket connection established');\n  socket.send('Hello from Elm app!');\n});\n\nsocket.addEventListener('message', function(event) {\n  console.log('Received message from Node.js app:', event.data);\n  // handle message from Node.js app\n});\n"
      },
      "date": 1682002857561
    },
    {
      "item": {
        "type": "factory",
        "id": "bb53d31b7b6b8cf2"
      },
      "id": "bb53d31b7b6b8cf2",
      "type": "add",
      "after": "22d502390097429c",
      "date": 1682002891284
    },
    {
      "type": "edit",
      "id": "bb53d31b7b6b8cf2",
      "item": {
        "type": "paragraph",
        "id": "bb53d31b7b6b8cf2",
        "text": "Note that you'll need to implement error handling and security measures for both methods to ensure safe and reliable communication between the Elm app and the Node.js app."
      },
      "date": 1682002892714
    },
    {
      "item": {
        "type": "factory",
        "id": "74d7b55975dcbf5d"
      },
      "id": "74d7b55975dcbf5d",
      "type": "add",
      "after": "bb53d31b7b6b8cf2",
      "date": 1682002906672
    },
    {
      "type": "edit",
      "id": "74d7b55975dcbf5d",
      "item": {
        "type": "pagefold",
        "id": "74d7b55975dcbf5d",
        "text": ". chat.openai ."
      },
      "date": 1682002908464
    },
    {
      "item": {
        "type": "factory",
        "id": "772c41958c4c5610"
      },
      "id": "772c41958c4c5610",
      "type": "add",
      "after": "74d7b55975dcbf5d",
      "date": 1682002947818
    },
    {
      "type": "edit",
      "id": "772c41958c4c5610",
      "item": {
        "type": "paragraph",
        "id": "772c41958c4c5610",
        "text": "To mix Elm and Federated Wiki JavaScript components on a single page, you can follow these steps:"
      },
      "date": 1682002960322
    },
    {
      "item": {
        "type": "factory",
        "id": "a1b17bf3fdcdc056"
      },
      "id": "a1b17bf3fdcdc056",
      "type": "add",
      "after": "772c41958c4c5610",
      "date": 1682002964239
    },
    {
      "type": "edit",
      "id": "a1b17bf3fdcdc056",
      "item": {
        "type": "pagefold",
        "id": "a1b17bf3fdcdc056",
        "text": "chat.openai"
      },
      "date": 1682002971424
    },
    {
      "item": {
        "type": "factory",
        "id": "87d3b481fb410658"
      },
      "id": "87d3b481fb410658",
      "type": "add",
      "after": "a1b17bf3fdcdc056",
      "date": 1682002977902
    },
    {
      "type": "edit",
      "id": "87d3b481fb410658",
      "item": {
        "type": "paragraph",
        "id": "87d3b481fb410658",
        "text": "To mix Elm and Federated Wiki JavaScript components on a single page, you can follow these steps:"
      },
      "date": 1682002979288
    },
    {
      "item": {
        "type": "factory",
        "id": "75f6590dbe5aec36"
      },
      "id": "75f6590dbe5aec36",
      "type": "add",
      "after": "87d3b481fb410658",
      "date": 1682002988892
    },
    {
      "type": "edit",
      "id": "75f6590dbe5aec36",
      "item": {
        "type": "paragraph",
        "id": "75f6590dbe5aec36",
        "text": "1. Set up a container that will hold both the Elm app and the Federated Wiki component. You can use a parent div element for this purpose."
      },
      "date": 1682002991751
    },
    {
      "item": {
        "type": "factory",
        "id": "627b2331bfac043f"
      },
      "id": "627b2331bfac043f",
      "type": "add",
      "after": "75f6590dbe5aec36",
      "date": 1682003006657
    },
    {
      "type": "edit",
      "id": "627b2331bfac043f",
      "item": {
        "type": "code",
        "id": "627b2331bfac043f",
        "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Elm and Federated Wiki Integration</title>\n  </head>\n  <body>\n    <div id=\"container\">\n      <!-- Elm app will be displayed here -->\n      <div id=\"elm-app\"></div>\n      <!-- Federated Wiki component will be displayed here -->\n      <div id=\"wiki-component\"></div>\n    </div>\n    <script src=\"elm-app.js\"></script>\n    <script src=\"wiki-component.js\"></script>\n  </body>\n</html>\n"
      },
      "date": 1682003008364
    },
    {
      "item": {
        "type": "factory",
        "id": "3254f3484e63dcf8"
      },
      "id": "3254f3484e63dcf8",
      "type": "add",
      "after": "627b2331bfac043f",
      "date": 1682003045762
    },
    {
      "type": "edit",
      "id": "3254f3484e63dcf8",
      "item": {
        "type": "paragraph",
        "id": "3254f3484e63dcf8",
        "text": "2. Add the Elm app to the container. You can use the embed function to mount the Elm app to the div element you created for the Elm app."
      },
      "date": 1682003048011
    },
    {
      "item": {
        "type": "factory",
        "id": "8fad6ede10f519b8"
      },
      "id": "8fad6ede10f519b8",
      "type": "add",
      "after": "3254f3484e63dcf8",
      "date": 1682003054836
    },
    {
      "type": "edit",
      "id": "8fad6ede10f519b8",
      "item": {
        "type": "code",
        "id": "8fad6ede10f519b8",
        "text": "var elmAppContainer = document.getElementById('elm-app');\nvar elmApp = Elm.Main.embed(elmAppContainer);\n"
      },
      "date": 1682003056647
    },
    {
      "item": {
        "type": "factory",
        "id": "1580e2f208e06f2e"
      },
      "id": "1580e2f208e06f2e",
      "type": "add",
      "after": "8fad6ede10f519b8",
      "date": 1682003065348
    },
    {
      "type": "edit",
      "id": "1580e2f208e06f2e",
      "item": {
        "type": "paragraph",
        "id": "1580e2f208e06f2e",
        "text": "3. Add the Federated Wiki component to the container. You can use a script tag to load the Federated Wiki component's JavaScript file and add it to the div element you created for the Federated Wiki component."
      },
      "date": 1682003069452
    },
    {
      "type": "edit",
      "id": "1580e2f208e06f2e",
      "item": {
        "type": "paragraph",
        "id": "1580e2f208e06f2e",
        "text": "3. Add the Federated Wiki component to the container. You can use a [[script tag]] to load the Federated Wiki component's JavaScript file and add it to the div element you created for the Federated Wiki component."
      },
      "date": 1682003078750
    },
    {
      "type": "edit",
      "id": "1580e2f208e06f2e",
      "item": {
        "type": "paragraph",
        "id": "1580e2f208e06f2e",
        "text": "3. Add the Federated Wiki component to the container. You can use a [[Script Tag]] to load the Federated Wiki component's JavaScript file and add it to the div element you created for the Federated Wiki component."
      },
      "date": 1682003131727
    },
    {
      "item": {
        "type": "factory",
        "id": "d85498f117756c4b"
      },
      "id": "d85498f117756c4b",
      "type": "add",
      "after": "1580e2f208e06f2e",
      "date": 1682003187854
    },
    {
      "type": "edit",
      "id": "d85498f117756c4b",
      "item": {
        "type": "code",
        "id": "d85498f117756c4b",
        "text": "var wikiComponentContainer = document.getElementById('wiki-component');\nvar wikiComponentScript = document.createElement('script');\nwikiComponentScript.src = 'https://some.federated.wiki/component.js'; // replace with the URL of your Federated Wiki component\nwikiComponentScript.onload = function() {\n  // initialize the Federated Wiki component\n  var wikiComponent = new FederatedWiki.Component();\n  wikiComponent.mount(wikiComponentContainer);\n};\ndocument.head.appendChild(wikiComponentScript);\n"
      },
      "date": 1682003189701
    },
    {
      "item": {
        "type": "factory",
        "id": "b288975121779629"
      },
      "id": "b288975121779629",
      "type": "add",
      "after": "d85498f117756c4b",
      "date": 1682003228308
    },
    {
      "type": "edit",
      "id": "b288975121779629",
      "item": {
        "type": "paragraph",
        "id": "b288975121779629",
        "text": "4. Style the container and the child elements using CSS to position them side by side."
      },
      "date": 1682003231701
    },
    {
      "item": {
        "type": "factory",
        "id": "4039a186b62deead"
      },
      "id": "4039a186b62deead",
      "type": "add",
      "after": "b288975121779629",
      "date": 1682003236880
    },
    {
      "type": "edit",
      "id": "4039a186b62deead",
      "item": {
        "type": "code",
        "id": "4039a186b62deead",
        "text": "#container {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n}\n#elm-app, #wiki-component {\n  border: 1px solid black;\n  margin: 10px;\n}\n"
      },
      "date": 1682003239130
    },
    {
      "item": {
        "type": "factory",
        "id": "09727fcba13948da"
      },
      "id": "09727fcba13948da",
      "type": "add",
      "after": "4039a186b62deead",
      "date": 1682003258162
    },
    {
      "type": "edit",
      "id": "09727fcba13948da",
      "item": {
        "type": "paragraph",
        "id": "09727fcba13948da",
        "text": "5. Save the HTML file and open it in a web browser. You should see both the Elm app and the Federated Wiki component displayed side by side in the container.\n"
      },
      "date": 1682003260632
    },
    {
      "item": {
        "type": "factory",
        "id": "8e431912ad5ccd49"
      },
      "id": "8e431912ad5ccd49",
      "type": "add",
      "after": "09727fcba13948da",
      "date": 1682003265999
    },
    {
      "type": "edit",
      "id": "8e431912ad5ccd49",
      "item": {
        "type": "paragraph",
        "id": "8e431912ad5ccd49",
        "text": "Note that you may need to adjust the size and positioning of the container and the child elements to fit your specific use case. Also, make sure that the Federated Wiki component is compatible with the version of the Federated Wiki software you're using."
      },
      "date": 1682003268741
    },
    {
      "item": {
        "type": "factory",
        "id": "c7c49675b989fc5a"
      },
      "id": "c7c49675b989fc5a",
      "type": "add",
      "after": "8e431912ad5ccd49",
      "date": 1682003275899
    },
    {
      "type": "edit",
      "id": "c7c49675b989fc5a",
      "item": {
        "type": "pagefold",
        "id": "c7c49675b989fc5a",
        "text": ". chat.openai ."
      },
      "date": 1682003278993
    },
    {
      "type": "edit",
      "id": "75f6590dbe5aec36",
      "item": {
        "type": "paragraph",
        "id": "75f6590dbe5aec36",
        "text": "1. Set up a [[Container]] that will hold both the Elm app and the Federated Wiki component. You can use a parent div element for this purpose."
      },
      "date": 1682003306266
    },
    {
      "type": "edit",
      "id": "1c3584052a973c7b",
      "item": {
        "type": "paragraph",
        "id": "1c3584052a973c7b",
        "text": "3. Include the generated JavaScript file in your HTML page using a [[Script Tag]]. You can include the file either in the head or body section of your HTML page."
      },
      "date": 1682003536519
    },
    {
      "type": "add",
      "id": "6e4e618655ec3fff",
      "item": {
        "type": "paragraph",
        "id": "6e4e618655ec3fff",
        "text": "[Note: See "
      },
      "after": "5f892e5e71cec9da",
      "date": 1682003790774
    },
    {
      "type": "edit",
      "id": "6e4e618655ec3fff",
      "item": {
        "type": "paragraph",
        "id": "6e4e618655ec3fff",
        "text": "[Note: See [[rdom-svg-nodes]] and the use of the $compile function which also applies this mount concept ; RB]"
      },
      "date": 1682003849199
    },
    {
      "type": "edit",
      "id": "3350b470e65fac0a",
      "item": {
        "type": "paragraph",
        "id": "3350b470e65fac0a",
        "text": "2. [[WebSockets]]: You can use WebSockets to establish a bidirectional communication channel between the Elm app and the Node.js app. In the Node.js app, you can use a WebSocket library like ws to create a WebSocket server. In the Elm app, you can use the WebSocket API to create a WebSocket client and send messages to the Node.js app. Here's an example:"
      },
      "date": 1682003932175
    },
    {
      "type": "edit",
      "id": "6e4e618655ec3fff",
      "item": {
        "type": "paragraph",
        "id": "6e4e618655ec3fff",
        "text": "[Note: See [[rdom-svg-nodes]] and the use of the $compile function, which also applies this mount concept; RB]"
      },
      "date": 1682006180544
    }
  ]
}