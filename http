{
  "title": "HTTP",
  "story": [
    {
      "type": "paragraph",
      "id": "465b874f6514bcf5",
      "text": "Anything starting with http gets you banned -- [[Scott Hanselman]] [https://twitter.com/shanselman/status/1604940668388147200?s=20&t=VIoEyUxxknPOh4d_yriLBA tweet]"
    },
    {
      "type": "paragraph",
      "id": "041b5315abfb7aba",
      "text": "HTTP is arguably the most important application level network protocol for what we consider to be the internet. It is the protocol that allows web browsers and web servers to communicate. It is also becoming the most popular protocol for implementing web services. [https://github.com/svenvc/zinc/blob/master/doc/zinc-http-components-paper.md github]"
    },
    {
      "type": "markdown",
      "id": "3a6bd508151ba36d",
      "text": "See [[Hypertext Transfer Protocol]]."
    },
    {
      "type": "paragraph",
      "id": "f566e4729e292b33",
      "text": "⇒ [[Elm]] provides a mechanism to send HTTP requests to a server and handle the responses. Here's an example of how you can send a POST request with the login form data and check for a 200 response:"
    },
    {
      "type": "code",
      "id": "c8a3c48728221061",
      "text": "import Html exposing (form, input, button, text)\nimport Html.Attributes exposing (placeholder, type_)\nimport Html.Events exposing (onClick)\nimport Http\nimport Json.Decode as Json\n\n-- Define the model\n\ntype alias Model =\n    { username : String\n    , password : String\n    , response : String\n    }\n\ninitialModel : Model\ninitialModel =\n    { username = \"\"\n    , password = \"\"\n    , response = \"\"\n    }\n\n-- Define the Msg type\n\ntype Msg\n    = UsernameChanged String\n    | PasswordChanged String\n    | SubmitClicked\n\n-- Define the update function\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        UsernameChanged newUsername ->\n            ( { model | username = newUsername }, Cmd.none )\n\n        PasswordChanged newPassword ->\n            ( { model | password = newPassword }, Cmd.none )\n\n        SubmitClicked ->\n            let\n                request =\n                    { method = \"POST\"\n                    , headers = []\n                    , url = \"https://your-server.com/login\" -- Replace with your server URL\n                    , body =\n                        Http.jsonBody <| Json.object\n                            [ ( \"username\", Json.string model.username )\n                            , ( \"password\", Json.string model.password )\n                            ]\n                    , expect = Http.expectString handleResponse\n                    }\n            in\n            ( { model | response = \"Sending request...\" }, Http.send handleHttpError request )\n\nhandleResponse : Result Http.Error String -> Msg\nhandleResponse result =\n    case result of\n        Ok response ->\n            if response == \"200\"\n                then ShowSuccess\n                else ShowError response\n\n        Err error ->\n            ShowError (Http.errorToString error)\n\nhandleHttpError : Http.Error -> Msg\nhandleHttpError error =\n    ShowError (Http.errorToString error)\n\n-- Define the view function\n\nview : Model -> Html Msg\nview model =\n    form []\n        [ input [ placeholder \"Username\", type_ \"text\", onInput UsernameChanged ] []\n        , input [ placeholder \"Password\", type_ \"password\", onInput PasswordChanged ] []\n        , button [ onClick SubmitClicked ] [ text \"Submit\" ]\n        , text model.response\n        ]\n\n-- Start the Elm application\n\nmain : Program () Model Msg\nmain =\n    Html.program\n        { init = ( initialModel, Cmd.none )\n        , view = view\n        , update = update\n        , subscriptions = \\_ -> Sub.none\n        }\n"
    },
    {
      "type": "paragraph",
      "id": "267bf9eef7bb15a4",
      "text": "Unused pattern variable request [https://github.com/RalfBarkow/vite-elm-app/commit/231e55301dbfc18a60d9436f0aac757ab5eb10e2 commit] "
    },
    {
      "type": "pagefold",
      "id": "fe62ab30ca4045d2",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "3fa7f59ac5a88624",
      "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers. [https://package.elm-lang.org/packages/elm/http/2.0.0/ elm-lang], [https://guide.elm-lang.org/effects/http.html page]"
    },
    {
      "type": "paragraph",
      "id": "fc50ce5416480bf1",
      "text": "⇒ [[John F. Miller]]: MILLER, John F., 2017. Using Elm to Submit a form without tracking the field values. Stack Overflow. Online. 5 October 2017. [Accessed 23 May 2023]. Available from: [https://stackoverflow.com/q/46580703 stackoverflow]\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "HTTP",
        "story": []
      },
      "date": 1552049944503
    },
    {
      "item": {
        "type": "factory",
        "id": "3a6bd508151ba36d"
      },
      "id": "3a6bd508151ba36d",
      "type": "add",
      "date": 1552049946524
    },
    {
      "type": "edit",
      "id": "3a6bd508151ba36d",
      "item": {
        "type": "markdown",
        "id": "3a6bd508151ba36d",
        "text": "See [[Hypertext Transfer Protocol]]"
      },
      "date": 1552049951669
    },
    {
      "type": "fork",
      "site": "c0de.academy",
      "date": 1628808572661
    },
    {
      "item": {
        "type": "factory",
        "id": "041b5315abfb7aba"
      },
      "id": "041b5315abfb7aba",
      "type": "add",
      "after": "3a6bd508151ba36d",
      "date": 1649937841563
    },
    {
      "type": "edit",
      "id": "041b5315abfb7aba",
      "item": {
        "type": "paragraph",
        "id": "041b5315abfb7aba",
        "text": "[https://github.com/svenvc/zinc/blob/master/doc/zinc-http-components-paper.md github]"
      },
      "date": 1649937851012
    },
    {
      "type": "edit",
      "id": "041b5315abfb7aba",
      "item": {
        "type": "paragraph",
        "id": "041b5315abfb7aba",
        "text": "HTTP is arguably the most important application level network protocol for what we consider to be the internet. It is the protocol that allows web browsers and web servers to communicate. It is also becoming the most popular protocol for implementing web services. [https://github.com/svenvc/zinc/blob/master/doc/zinc-http-components-paper.md github]"
      },
      "date": 1649937871253
    },
    {
      "id": "041b5315abfb7aba",
      "type": "move",
      "order": [
        "041b5315abfb7aba",
        "3a6bd508151ba36d"
      ],
      "date": 1649937873954
    },
    {
      "type": "edit",
      "id": "3a6bd508151ba36d",
      "item": {
        "type": "markdown",
        "id": "3a6bd508151ba36d",
        "text": "See [[Hypertext Transfer Protocol]]."
      },
      "date": 1649937876782
    },
    {
      "type": "edit",
      "id": "041b5315abfb7aba",
      "item": {
        "type": "paragraph",
        "id": "041b5315abfb7aba",
        "text": "[[HTTP]] is arguably the most important application level network protocol for what we consider to be the internet. It is the protocol that allows web browsers and web servers to communicate. It is also becoming the most popular protocol for implementing web services. [https://github.com/svenvc/zinc/blob/master/doc/zinc-http-components-paper.md github]"
      },
      "date": 1649937884748
    },
    {
      "item": {
        "type": "factory",
        "id": "465b874f6514bcf5"
      },
      "id": "465b874f6514bcf5",
      "type": "add",
      "after": "3a6bd508151ba36d",
      "date": 1675340083974
    },
    {
      "type": "edit",
      "id": "465b874f6514bcf5",
      "item": {
        "type": "paragraph",
        "id": "465b874f6514bcf5",
        "text": "[https://twitter.com/shanselman/status/1604940668388147200?s=20&t=VIoEyUxxknPOh4d_yriLBA tweet]"
      },
      "date": 1675340091667
    },
    {
      "type": "edit",
      "id": "465b874f6514bcf5",
      "item": {
        "type": "paragraph",
        "id": "465b874f6514bcf5",
        "text": "Anything starting with http gets you banned -- [https://twitter.com/shanselman/status/1604940668388147200?s=20&t=VIoEyUxxknPOh4d_yriLBA tweet]"
      },
      "date": 1675340110301
    },
    {
      "type": "edit",
      "id": "465b874f6514bcf5",
      "item": {
        "type": "paragraph",
        "id": "465b874f6514bcf5",
        "text": "Anything starting with http gets you banned -- [[Scott Hanselman]][https://twitter.com/shanselman/status/1604940668388147200?s=20&t=VIoEyUxxknPOh4d_yriLBA tweet]"
      },
      "date": 1675340124961
    },
    {
      "type": "edit",
      "id": "465b874f6514bcf5",
      "item": {
        "type": "paragraph",
        "id": "465b874f6514bcf5",
        "text": "Anything starting with http gets you banned -- [[Scott Hanselman]] [https://twitter.com/shanselman/status/1604940668388147200?s=20&t=VIoEyUxxknPOh4d_yriLBA tweet]"
      },
      "date": 1675340132223
    },
    {
      "id": "465b874f6514bcf5",
      "type": "move",
      "order": [
        "465b874f6514bcf5",
        "041b5315abfb7aba",
        "3a6bd508151ba36d"
      ],
      "date": 1675340268317
    },
    {
      "type": "edit",
      "id": "041b5315abfb7aba",
      "item": {
        "type": "paragraph",
        "id": "041b5315abfb7aba",
        "text": "HTTP is arguably the most important application level network protocol for what we consider to be the internet. It is the protocol that allows web browsers and web servers to communicate. It is also becoming the most popular protocol for implementing web services. [https://github.com/svenvc/zinc/blob/master/doc/zinc-http-components-paper.md github]"
      },
      "date": 1675340277888
    },
    {
      "id": "f566e4729e292b33",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f566e4729e292b33",
        "text": "⇒ [[Elm]] provides a mechanism to send HTTP requests to a server and handle the responses. Here's an example of how you can send a POST request with the login form data and check for a 200 response:"
      },
      "after": "3a6bd508151ba36d",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104665378
    },
    {
      "id": "c8a3c48728221061",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c8a3c48728221061",
        "text": "import Html exposing (form, input, button, text)\nimport Html.Attributes exposing (placeholder, type_)\nimport Html.Events exposing (onClick)\nimport Http\nimport Json.Decode as Json\n\n-- Define the model\n\ntype alias Model =\n    { username : String\n    , password : String\n    , response : String\n    }\n\ninitialModel : Model\ninitialModel =\n    { username = \"\"\n    , password = \"\"\n    , response = \"\"\n    }\n\n-- Define the Msg type\n\ntype Msg\n    = UsernameChanged String\n    | PasswordChanged String\n    | SubmitClicked\n\n-- Define the update function\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        UsernameChanged newUsername ->\n            ( { model | username = newUsername }, Cmd.none )\n\n        PasswordChanged newPassword ->\n            ( { model | password = newPassword }, Cmd.none )\n\n        SubmitClicked ->\n            let\n                request =\n                    { method = \"POST\"\n                    , headers = []\n                    , url = \"https://your-server.com/login\" -- Replace with your server URL\n                    , body =\n                        Http.jsonBody <| Json.object\n                            [ ( \"username\", Json.string model.username )\n                            , ( \"password\", Json.string model.password )\n                            ]\n                    , expect = Http.expectString handleResponse\n                    }\n            in\n            ( { model | response = \"Sending request...\" }, Http.send handleHttpError request )\n\nhandleResponse : Result Http.Error String -> Msg\nhandleResponse result =\n    case result of\n        Ok response ->\n            if response == \"200\"\n                then ShowSuccess\n                else ShowError response\n\n        Err error ->\n            ShowError (Http.errorToString error)\n\nhandleHttpError : Http.Error -> Msg\nhandleHttpError error =\n    ShowError (Http.errorToString error)\n\n-- Define the view function\n\nview : Model -> Html Msg\nview model =\n    form []\n        [ input [ placeholder \"Username\", type_ \"text\", onInput UsernameChanged ] []\n        , input [ placeholder \"Password\", type_ \"password\", onInput PasswordChanged ] []\n        , button [ onClick SubmitClicked ] [ text \"Submit\" ]\n        , text model.response\n        ]\n\n-- Start the Elm application\n\nmain : Program () Model Msg\nmain =\n    Html.program\n        { init = ( initialModel, Cmd.none )\n        , view = view\n        , update = update\n        , subscriptions = \\_ -> Sub.none\n        }\n"
      },
      "after": "f566e4729e292b33",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104718754
    },
    {
      "id": "267bf9eef7bb15a4",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "267bf9eef7bb15a4",
        "text": "Unused pattern variable request [https://github.com/RalfBarkow/vite-elm-app/commit/231e55301dbfc18a60d9436f0aac757ab5eb10e2 commit] "
      },
      "after": "c8a3c48728221061",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104734552
    },
    {
      "id": "fe62ab30ca4045d2",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "fe62ab30ca4045d2",
        "text": "~"
      },
      "after": "267bf9eef7bb15a4",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104740534
    },
    {
      "id": "3fa7f59ac5a88624",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3fa7f59ac5a88624",
        "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers. [https://package.elm-lang.org/packages/elm/http/2.0.0/ elm-lang], [https://guide.elm-lang.org/effects/http.html page]"
      },
      "after": "fe62ab30ca4045d2",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104744974
    },
    {
      "id": "fc50ce5416480bf1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "fc50ce5416480bf1",
        "text": "⇒ [[John F. Miller]]: MILLER, John F., 2017. Using Elm to Submit a form without tracking the field values. Stack Overflow. Online. 5 October 2017. [Accessed 23 May 2023]. Available from: [https://stackoverflow.com/q/46580703 stackoverflow]\n"
      },
      "after": "3fa7f59ac5a88624",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104752787
    }
  ]
}