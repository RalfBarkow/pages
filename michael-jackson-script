{
  "title": "Michael Jackson Script",
  "story": [
    {
      "type": "markdown",
      "id": "9a3e372152483b38",
      "text": "Michael Jackson Script (mjs) is a file name the node js community ascribed to ES6 modules. \n"
    },
    {
      "type": "markdown",
      "id": "794b2894f6773a9d",
      "text": "An Update on ES6 Modules in Node.js on Medium is well written and well commented on [https://medium.com/the-node-js-collection/an-update-on-es6-modules-in-node-js-42c958b890c page]"
    },
    {
      "type": "markdown",
      "id": "662ab4ee8ce18f24",
      "text": "I am parsing through the article to understand more the complaints by the node community. \n"
    },
    {
      "type": "markdown",
      "id": "c0a4a8c8f9e36894",
      "text": "My gut check is, nobody has explained the capabilities-based logic behind ES6 modules. Thus the node community feels the standards people have not taken their needs into consideration. [https://twitter.com/mjackson/status/935555362073149441 MJStwitter]\n"
    },
    {
      "type": "markdown",
      "id": "ebf8593043d1d5b9",
      "text": "When the opposite is true in Solidity: Race-To-Empty, Recursive Call, or Solar Storm vulnerability [http://vessenes.com/more-ethereum-attacks-race-to-empty-is-the-real-deal/ page] "
    },
    {
      "type": "markdown",
      "id": "1ca01c0bfae48ec9",
      "text": "\n"
    },
    {
      "type": "markdown",
      "id": "628973e7689610a0",
      "text": "\n"
    },
    {
      "type": "markdown",
      "id": "35ccfe305cdcb5a1",
      "text": "Some ECMAScript Explanations and Stories for Dave by Wirfs Allen [http://www.wirfs-brock.com/allen/posts/778 blog]\n\n"
    },
    {
      "type": "markdown",
      "id": "c17ee92a835624ac",
      "text": "ECMAScript (ES) module loader that enables a smooth transition between Node and ES module formats with near built-in performance [https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/ blog]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Michael Jackson Script",
        "story": []
      },
      "date": 1520748894176
    },
    {
      "item": {
        "type": "factory",
        "id": "9a3e372152483b38"
      },
      "id": "9a3e372152483b38",
      "type": "add",
      "date": 1520748895491
    },
    {
      "type": "edit",
      "id": "9a3e372152483b38",
      "item": {
        "type": "markdown",
        "id": "9a3e372152483b38",
        "text": "Michael Jackson Script (mjs) is a file name the node js community ascribed to ES6 modules.  "
      },
      "date": 1520748966442
    },
    {
      "type": "edit",
      "id": "9a3e372152483b38",
      "item": {
        "type": "markdown",
        "id": "9a3e372152483b38",
        "text": "Michael Jackson Script (mjs) is a file name the node js community ascribed to ES6 modules. Via a well written and well commented article on    \n"
      },
      "date": 1520749044254
    },
    {
      "type": "edit",
      "id": "9a3e372152483b38",
      "item": {
        "type": "markdown",
        "id": "9a3e372152483b38",
        "text": "Michael Jackson Script (mjs) is a file name the node js community ascribed to ES6 modules. An Update on ES6 Modules in Node.js on Medium is well written and well commented on "
      },
      "date": 1520749139039
    },
    {
      "type": "edit",
      "id": "9a3e372152483b38",
      "item": {
        "type": "markdown",
        "id": "9a3e372152483b38",
        "text": "Michael Jackson Script (mjs) is a file name the node js community ascribed to ES6 modules. An Update on ES6 Modules in Node.js on Medium is well written and well commented on [https://medium.com/the-node-js-collection/an-update-on-es6-modules-in-node-js-42c958b890c page]"
      },
      "date": 1520749172720
    },
    {
      "type": "edit",
      "id": "9a3e372152483b38",
      "item": {
        "type": "markdown",
        "id": "9a3e372152483b38",
        "text": "Michael Jackson Script (mjs) is a file name the node js community ascribed to ES6 modules. \n"
      },
      "date": 1520749213499
    },
    {
      "type": "add",
      "id": "794b2894f6773a9d",
      "item": {
        "type": "markdown",
        "id": "794b2894f6773a9d",
        "text": "An Update on ES6 Modules in Node.js on Medium is well written and well commented on [https://medium.com/the-node-js-collection/an-update-on-es6-modules-in-node-js-42c958b890c page]"
      },
      "after": "9a3e372152483b38",
      "date": 1520749215767
    },
    {
      "item": {
        "type": "factory",
        "id": "662ab4ee8ce18f24"
      },
      "id": "662ab4ee8ce18f24",
      "type": "add",
      "after": "794b2894f6773a9d",
      "date": 1520749218777
    },
    {
      "type": "edit",
      "id": "662ab4ee8ce18f24",
      "item": {
        "type": "markdown",
        "id": "662ab4ee8ce18f24",
        "text": "I am parsing through the article to understand more the complaints by the node community. My gut check is nobody has explained the capabilities-based  logic behind ES6 modules. Thus the node community feel the standards people have not taken their needs into consideration.     "
      },
      "date": 1520749456094
    },
    {
      "type": "edit",
      "id": "662ab4ee8ce18f24",
      "item": {
        "type": "markdown",
        "id": "662ab4ee8ce18f24",
        "text": "I am parsing through the article to understand more the complaints by the node community. \n"
      },
      "date": 1520749471951
    },
    {
      "type": "add",
      "id": "c0a4a8c8f9e36894",
      "item": {
        "type": "markdown",
        "id": "c0a4a8c8f9e36894",
        "text": "My gut check is nobody has explained the capabilities-based  logic behind ES6 modules. Thus the node community feel the standards people have not taken their needs into consideration.     "
      },
      "after": "662ab4ee8ce18f24",
      "date": 1520749474206
    },
    {
      "type": "edit",
      "id": "c0a4a8c8f9e36894",
      "item": {
        "type": "markdown",
        "id": "c0a4a8c8f9e36894",
        "text": "My gut check is, nobody has explained the capabilities-based logic behind ES6 modules. Thus the node community feels the standards people have not taken their needs into consideration.     "
      },
      "date": 1520749516422
    },
    {
      "type": "edit",
      "id": "c0a4a8c8f9e36894",
      "item": {
        "type": "markdown",
        "id": "c0a4a8c8f9e36894",
        "text": "My gut check is, nobody has explained the capabilities-based logic behind ES6 modules. Thus the node community feels the standards people have not taken their needs into consideration. When the opposite is true.    "
      },
      "date": 1520749537869
    },
    {
      "type": "edit",
      "id": "c0a4a8c8f9e36894",
      "item": {
        "type": "markdown",
        "id": "c0a4a8c8f9e36894",
        "text": "My gut check is, nobody has explained the capabilities-based logic behind ES6 modules. Thus the node community feels the standards people have not taken their needs into consideration. When the opposite is true in Solidity: Race-To-Empty, Recursive Call, or Solar Storm vulnerability   "
      },
      "date": 1520749957257
    },
    {
      "type": "edit",
      "id": "c0a4a8c8f9e36894",
      "item": {
        "type": "markdown",
        "id": "c0a4a8c8f9e36894",
        "text": "My gut check is, nobody has explained the capabilities-based logic behind ES6 modules. Thus the node community feels the standards people have not taken their needs into consideration. When the opposite is true in Solidity: Race-To-Empty, Recursive Call, or Solar Storm vulnerability [http://vessenes.com/more-ethereum-attacks-race-to-empty-is-the-real-deal/ page] "
      },
      "date": 1520749983611
    },
    {
      "type": "edit",
      "id": "c0a4a8c8f9e36894",
      "item": {
        "type": "markdown",
        "id": "c0a4a8c8f9e36894",
        "text": "My gut check is, nobody has explained the capabilities-based logic behind ES6 modules. Thus the node community feels the standards people have not taken their needs into consideration. \n"
      },
      "date": 1520749992844
    },
    {
      "type": "add",
      "id": "ebf8593043d1d5b9",
      "item": {
        "type": "markdown",
        "id": "ebf8593043d1d5b9",
        "text": "When the opposite is true in Solidity: Race-To-Empty, Recursive Call, or Solar Storm vulnerability [http://vessenes.com/more-ethereum-attacks-race-to-empty-is-the-real-deal/ page] "
      },
      "after": "c0a4a8c8f9e36894",
      "date": 1520749995947
    },
    {
      "type": "edit",
      "id": "c0a4a8c8f9e36894",
      "item": {
        "type": "markdown",
        "id": "c0a4a8c8f9e36894",
        "text": "My gut check is, nobody has explained the capabilities-based logic behind ES6 modules. Thus the node community feels the standards people have not taken their needs into consideration. [https://twitter.com/mjackson/status/935555362073149441 MJS]\n"
      },
      "date": 1520751242409
    },
    {
      "type": "edit",
      "id": "c0a4a8c8f9e36894",
      "item": {
        "type": "markdown",
        "id": "c0a4a8c8f9e36894",
        "text": "My gut check is, nobody has explained the capabilities-based logic behind ES6 modules. Thus the node community feels the standards people have not taken their needs into consideration. [https://twitter.com/mjackson/status/935555362073149441 MJStwitter]\n"
      },
      "date": 1520751257857
    },
    {
      "item": {
        "type": "factory",
        "id": "1ca01c0bfae48ec9"
      },
      "id": "1ca01c0bfae48ec9",
      "type": "add",
      "after": "ebf8593043d1d5b9",
      "date": 1520752282120
    },
    {
      "type": "edit",
      "id": "1ca01c0bfae48ec9",
      "item": {
        "type": "markdown",
        "id": "1ca01c0bfae48ec9",
        "text": "http://www.wirfs-brock.com/allen/"
      },
      "date": 1520752286774
    },
    {
      "type": "edit",
      "id": "1ca01c0bfae48ec9",
      "item": {
        "type": "markdown",
        "id": "1ca01c0bfae48ec9",
        "text": "http://www.wirfs-brock.com/allen/\n"
      },
      "date": 1520752508034
    },
    {
      "type": "add",
      "id": "c17ee92a835624ac",
      "item": {
        "type": "markdown",
        "id": "c17ee92a835624ac",
        "text": "https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/"
      },
      "after": "1ca01c0bfae48ec9",
      "date": 1520752510888
    },
    {
      "type": "edit",
      "id": "1ca01c0bfae48ec9",
      "item": {
        "type": "markdown",
        "id": "1ca01c0bfae48ec9",
        "text": "\n"
      },
      "date": 1520752561619
    },
    {
      "type": "add",
      "id": "628973e7689610a0",
      "item": {
        "type": "markdown",
        "id": "628973e7689610a0",
        "text": "\n"
      },
      "after": "1ca01c0bfae48ec9",
      "date": 1520752562970
    },
    {
      "type": "add",
      "id": "35ccfe305cdcb5a1",
      "item": {
        "type": "markdown",
        "id": "35ccfe305cdcb5a1",
        "text": "http://www.wirfs-brock.com/allen/posts/778\n\n"
      },
      "after": "628973e7689610a0",
      "date": 1520752578306
    },
    {
      "type": "edit",
      "id": "35ccfe305cdcb5a1",
      "item": {
        "type": "markdown",
        "id": "35ccfe305cdcb5a1",
        "text": "Some ECMAScript Explanations and Stories for Dave by Wirfs http://www.wirfs-brock.com/allen/posts/778\n\n"
      },
      "date": 1520752636532
    },
    {
      "type": "edit",
      "id": "35ccfe305cdcb5a1",
      "item": {
        "type": "markdown",
        "id": "35ccfe305cdcb5a1",
        "text": "Some ECMAScript Explanations and Stories for Dave by Wirfs Allen [http://www.wirfs-brock.com/allen/posts/778 blog]\n\n"
      },
      "date": 1520752969093
    },
    {
      "type": "edit",
      "id": "c17ee92a835624ac",
      "item": {
        "type": "markdown",
        "id": "c17ee92a835624ac",
        "text": "ECMAScript (ES) module loader that enables a smooth transition between Node and ES module formats with near built-in performance! [ https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/ blog]"
      },
      "date": 1520753110430
    },
    {
      "type": "edit",
      "id": "c17ee92a835624ac",
      "item": {
        "type": "markdown",
        "id": "c17ee92a835624ac",
        "text": "ECMAScript (ES) module loader that enables a smooth transition between Node and ES module formats with near built-in performance![https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/ blog]"
      },
      "date": 1520753121525
    },
    {
      "type": "edit",
      "id": "c17ee92a835624ac",
      "item": {
        "type": "markdown",
        "id": "c17ee92a835624ac",
        "text": "ECMAScript (ES) module loader that enables a smooth transition between Node and ES module formats with near built-in performance! \n [https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/ blog]"
      },
      "date": 1520753135759
    },
    {
      "type": "edit",
      "id": "c17ee92a835624ac",
      "item": {
        "type": "markdown",
        "id": "c17ee92a835624ac",
        "text": "ECMAScript (ES) module loader that enables a smooth transition between Node and ES module formats with near built-in performance [https://blogs.windows.com/msedgedev/2017/08/10/es-modules-node-today/ blog]"
      },
      "date": 1520753148573
    },
    {
      "type": "fork",
      "site": "clive.tries.fed.wiki",
      "date": 1636031153232
    }
  ]
}