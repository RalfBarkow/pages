{
  "title": "Test First User Interfaces",
  "story": [
    {
      "type": "html",
      "text": "A forum to discuss [[Test Driven Development]] for [[Graphical User Interface]]s, with mail and news portals:",
      "id": "b483c32a915f16475dda83be40ff6507"
    },
    {
      "type": "html",
      "text": " [http://groups.yahoo.com/group/testfirstuserinterfaces/ groups.yahoo.com]",
      "id": "66e898d222eef416110e574ac24d7679"
    },
    {
      "type": "html",
      "text": " news://news.gmane.org/gmane.comp.programming.test-first-user-interfaces",
      "id": "ffba25ec5d607cf9cc82128b6af7547d"
    },
    {
      "type": "html",
      "text": "\nPhlip sent the principles to the yahoo group:",
      "id": "e05a30a152e6625fc1bfb5143a4b4118"
    },
    {
      "type": "html",
      "text": " [http://groups.yahoo.com/group/TestFirstUserInterfaces/message/615/ groups.yahoo.com]",
      "id": "3dbf13e5ae958e613a20357954d4b42d"
    },
    {
      "type": "html",
      "text": " [[Test First User Interfaces Principles]] (also added to the reading list)",
      "id": "47cacffa5f1ecb3edcf0b28dcc59f109"
    },
    {
      "type": "html",
      "text": "\nAnd, eventually, a little [[Eye Candy]]:",
      "id": "4ef4bef0f248c84d09b2f819ffb6ca72"
    },
    {
      "type": "image",
      "url": "http://flea.sourceforge.net/rotatingBraneKandel.gif",
      "text": "flea.sourceforge.net",
      "id": "333b08a6640ed2089197b0e71fb24b87"
    },
    {
      "type": "html",
      "text": "\n (save this image and open it locally to watch it rotate - sorry about the format!)",
      "id": "aee3b7dc10adae5efb5ad59278e1bc17"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "baf6367b2f580634e05961761afe9b8e"
    },
    {
      "type": "html",
      "text": "<i>TFUI</i> recommends programmers write a category of [[Test Fixture]]s that make a project's [[Programmer Test]] framework comptetive with its GUIs [[Class Wizard]]s, form painters, and debuggers.",
      "id": "9a81169c7e9a7ba14e33e6a915a5b31e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "baf6367b2f580634e05961761afe9b8e"
    },
    {
      "type": "html",
      "text": "\nThe best example so far is [[Remote User Interface]].",
      "id": "e7e4f0ac6f0474971af60d48c3075931"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "baf6367b2f580634e05961761afe9b8e"
    },
    {
      "type": "html",
      "text": "\nDavid Carlton wrote:",
      "id": "a1a1ff69e277ae2cb16f6dc728b8f897"
    },
    {
      "type": "html",
      "text": "<i>I'm about to add a GUI interface for an application that I'm writing;</i>",
      "id": "7110f030fb382b252eca7b318ae034f4"
    },
    {
      "type": "html",
      "text": "\nYou have already ran the first mile. You have an app with programmatic \ncontrols to do everything you want, but no GUI. The layer that your [[Gui Layer]] will connect to is the \"[[Representation Layer]]\". It can do everything to \nthe object model that the GUI will, but without any awareness (import, \ninclude, etc.) of the actual [[Gui Toolkit]].",
      "id": "6cb7b8f0ff68ec3240ff67212ec0550f"
    },
    {
      "type": "html",
      "text": "\nThis is very good; beginning with the [[Graphical User Interface]], and adding all the logic \npiecemeal to its event handlers, leads to [[Spaghetti Code]].",
      "id": "a0b5fae197c4d9056c7b1e5afa3ce28b"
    },
    {
      "type": "html",
      "text": "\nIf you are starting a new project with a GUI, and you want to avoid the \ntemptations of [[Spaghetti Code]] and [[Too Much Gui Code]], then use a [[Test First]] approach that extends \nthe [[Model View Controller]] pattern with a mock view class, which is\nvery testable.  See Michael Feathers' \"The Humble Dialog Box\" at \n[http://www.objectmentor.com/resources/articles/TheHumbleDialogBox.pdf www.objectmentor.com] ",
      "id": "36a40aa8f2268af6a82c030a65428e78"
    },
    {
      "type": "html",
      "text": "<i>how should I test it?</i>",
      "id": "050e24e54affbb2820ff8197aea84e3c"
    },
    {
      "type": "html",
      "text": "\nBy writing code that pushes data into the GUI forms. Then the code \nmanipulates the forms like a user (but at the toolkit level, not at the \nlevel of raw mouse and keyboard motions), and then reading the data back \nout.",
      "id": "ec4cc00dafde7ed07ba7419536f21df0"
    },
    {
      "type": "html",
      "text": "\nHowever, the GUI will probably try to display the window. Primitive GUIs \nthat ran on 286 hardware could do a lot before displaying the window, as an \noptimization for speedy typists. On modern GUIs you can still often tap ",
      "id": "8389b3334c56ac12a4716aae8b4f2760"
    },
    {
      "type": "html",
      "text": "<Enter> before a dialog box comes up; it will absorb the enter before it \ndisplays, supress the display, and return the enter to the application.",
      "id": "cdebbafd8d5c23e309ebcdae5cedddbd"
    },
    {
      "type": "html",
      "text": "\nHowever, modern GUIs often contain widgets bonded together with an [[Object Request Broker]] like \nActiveX, which usually turns on \"apartment model threading\" on principle. \nSo the GUI will probably display, because a thread other than the one \nrunning your test code will service the Paint event.",
      "id": "487d55c2b97cf22d0a5b55527b774433"
    },
    {
      "type": "html",
      "text": "\nTo write a GUI [[Test First]], >most< of the time you don't want to see it. You \nwant to type, hit Go, get a [[Green Bar]], and keep typing, with minimal \ninterruption to your [[Mental State Called Flow]]. And you certainly don't want the temptation of \nthat window popping up inviting you to \"just test it manually, just this \nonce.\"",
      "id": "53c98209d6df84f006f1caaa44e15382"
    },
    {
      "type": "html",
      "text": "\nIf you can defeat all that, you will achieve a Nirvana where the GUI toolkit \nis:",
      "id": "81d1a93c2cdfd0e88b13ca7a2fce0b22"
    },
    {
      "type": "html",
      "text": "<b>just another library</b>",
      "id": "035631ac3bb69e42001e32f410683741"
    },
    {
      "type": "html",
      "text": "<i>I can test lots of the application's behavior by doing unit tests for non-GUI classes and systems tests that test the application's performance when using the text interface (which, fortunately, lets me test many important aspects of the output: the text interface vs GUI interface choice is well localized, I think), but I'm at a bit of a loss as to how to test that windows pop up and respond to mouse clicks/keyboard input/etc. in an automated fashion.</i>",
      "id": "47be04b2a81377d3cdd8a6591549e178"
    },
    {
      "type": "html",
      "text": "\nThe culture and documentation for these things teach write-only. They don't \ndwell on how you read back from a control what its current state is. But \nthe functions are >usually< available.",
      "id": "25973ce32ceb919c6cd51a40d238a45f"
    },
    {
      "type": "html",
      "text": "\n[http://wiki.rubygarden.org/Ruby/page/show/SvgCanvas wiki.rubygarden.org]",
      "id": "b99ef233efbeb328d83a5275596a4c16"
    },
    {
      "type": "html",
      "text": "\nThat sample uses the excellent [[Ruby Language]] on the excellent Tk Canvas \nwidget. Things inside that canvas are \"objects\". They are actually records, \nat the Tk level, so changing their members changes the canvas's display. \nAnd the Ruby wrapper promotes canvas items to full-fledged objects.",
      "id": "d31510b8ff01c5bc95095ecb67ac9094"
    },
    {
      "type": "html",
      "text": "\nThe test below pushes a command into the [[Graph Viz]] 'dot' program. 'dot' \nfilters the command into SVG; the function 'putSvgIntoCanvas' parses the \nSVG and obeys each command in it.",
      "id": "af52d2605b4a2657d051b7ec1e6595ab"
    },
    {
      "type": "html",
      "text": "\nWe test this, round-trip, by then querying those item objects out, and \ninspecting that they are, in fact, a black oval and blue text.",
      "id": "109143f80bceeb852b405980b7610311"
    },
    {
      "type": "code",
      "text": "  def test_blueText",
      "id": "0ea68a5ab970c842f72481e9e292ee09"
    },
    {
      "type": "code",
      "text": "  dottage = '''\n    aNode [label = \"Kozmik Bullfrog\", fontcolor = blue];\n    '''\n  svg = _emitSvg(dottage, false)",
      "id": "368c9e15ce57bd6afc98a57ad2f07db3"
    },
    {
      "type": "code",
      "text": "  canvas = warmUp()\n  putSvgIntoCanvas(svg, canvas)",
      "id": "0bbb53fd3234463b8c602d357d7cd998"
    },
    {
      "type": "code",
      "text": "  all = canvas.find_all()\n  assert_equal all.size(), 2\n  assert_equal canvas.itemtype(1), TkcOval\n  assert_equal canvas.itemtype(2), TkcText\n  oval = all[0]\n  assert_equal oval.cget('outline'), 'black'\n  assert_equal oval.cget('fill'), ''\n  text = all[1]\n  assert_equal text.cget('fill'), 'blue'\n  assert_equal text.cget('text'), 'Kozmik Bullfrog'",
      "id": "0fa26e7a23f445ca0af9e84d857474ae"
    },
    {
      "type": "code",
      "text": "  done(false)",
      "id": "999e8ad1c7ddd1b46b1953753f58017e"
    },
    {
      "type": "code",
      "text": "  end",
      "id": "b55234cef042dca83818dc85354cccde"
    },
    {
      "type": "html",
      "text": "\nAt the end, we don't call [[Tk Mainloop]]. That means we don't need to see the \ncanvas. If we temporarily want to, we turn the 'false' to a 'true' on that \nlast statement.",
      "id": "2fc999fe8485a2f3a9bbbb6deb220de5"
    },
    {
      "type": "html",
      "text": "\nThat fits this pattern: [[Then Dont Call Main Loop]]",
      "id": "243b36fe0990235ff1865286424ed2c6"
    },
    {
      "type": "html",
      "text": "<i>It seems like one option is to have some sort of robot that can fake user's GUI input; are there GUI libraries for C++/X-Windows that support this sort of thing? Otherwise, I guess I'll have to use non-automated tests, which I'd rather avoid whenever possible.</i>",
      "id": "53f63f6c4df2b3ff69f0bd42db3eb6c8"
    },
    {
      "type": "html",
      "text": "\nFirst, it is possible, via super-human research, to fake raw keyboard and \nmouse input.",
      "id": "075ed3faa969b56d6b29bb0ca88627eb"
    },
    {
      "type": "html",
      "text": "\nBut this would test your toolkit first, then your own GUI Layer. If you are \nnot writing or refactoring a toolkit, don't test it.",
      "id": "6159dd580f8f9f3a2aec02fd83d544bb"
    },
    {
      "type": "html",
      "text": "\nTo test within your own GUI layer, call its own events directly. In my \n[[Svg Canvas]], this line bonds a callback to an event on an item in the canvas:",
      "id": "b0a1a7821edc60e350399aa72d6bee15"
    },
    {
      "type": "code",
      "text": "  thing.bind('Button-1') do\n  _selectNode(canvas, thing.gettags())\n  end",
      "id": "03f499400a112f600f0a62d765b45645"
    },
    {
      "type": "html",
      "text": "(\"thing\" is a recently created oval around a node, so in context it's not a \nbad name.)",
      "id": "9869f8a6a47dcdc7dc74b86dc43e1641"
    },
    {
      "type": "html",
      "text": "\nNow the test:",
      "id": "a827180469e22b5b4b0aca8cd3963531"
    },
    {
      "type": "code",
      "text": "  def test__selectNode",
      "id": "e37178633bf8bcda6818de5d4e8ba0fd"
    },
    {
      "type": "code",
      "text": "  dottage = '''\n    aNode [label = \"glue\", style = filled, fillcolor = pink, \n    color = green];\n    bNode [label = \"factory\", style = filled, fillcolor = \n    pink, color = green];\n    '''\n  svg = _emitSvg(dottage)\n  canvas = warmUp()\n  putSvgIntoCanvas(svg, canvas)",
      "id": "c02c9f59a2499decd030e6a0fc07aa71"
    },
    {
      "type": "code",
      "text": "  all = canvas.find_all()\n  assert_equal all.size(), 4\n  assert_equal canvas.itemtype(2), TkcText\n  text1 = all[1]\n  # assert_equal text.cget('outline'), 'green'\n  assert_equal text1.cget('fill'), 'black'\n  assert_equal canvas.itemtype(4), TkcText\n  text2 = all[3]\n  # assert_equal text.cget('outline'), 'green'\n  assert_equal text2.cget('fill'), 'black'",
      "id": "83e15879b1b0059636d508108beeb39f"
    },
    {
      "type": "code",
      "text": "  # selecting a node, by clicking on the oval or the text,\n  # makes the outline of the oval thicker, but does not \n  # change the \"width\" of the text. Selecting another\n  # node restores the outline width of the first",
      "id": "12dabafc790ca17a6170db5dc42e68ce"
    },
    {
      "type": "code",
      "text": "  # TODO text with a linefeed in it",
      "id": "b44b5fdcb62fd08f477b0df30d7ac7d9"
    },
    {
      "type": "code",
      "text": "  assert_equal all[0].cget('width'), 1\n  assert_equal all[1].cget('width'), 0\n  assert_equal all[2].cget('width'), 1\n  assert_equal all[3].cget('width'), 0",
      "id": "132b7bddaf096e89ae4411d5fda3f86b"
    },
    {
      "type": "code",
      "text": "  _selectNode(canvas, text2.gettags())",
      "id": "a2d81f19d8b3e6dbb90973edf2aab888"
    },
    {
      "type": "code",
      "text": "  assert_equal all[0].cget('width'), 1\n  assert_equal all[1].cget('width'), 0\n  assert_equal all[2].cget('width'), 3.0\n  assert_equal all[3].cget('width'), 0",
      "id": "8572c5403fcc1d18af2509b151c2cb8e"
    },
    {
      "type": "code",
      "text": "  _selectNode(canvas, all[0].gettags())",
      "id": "12d94e463a08af745bba0b245fcf47ab"
    },
    {
      "type": "code",
      "text": "  assert_equal all[0].cget('width'), 3\n  assert_equal all[1].cget('width'), 0\n  assert_equal all[2].cget('width'), 1\n  assert_equal all[3].cget('width'), 0\n  done(false)",
      "id": "4a17ec30c3c4c9067439caffc608a556"
    },
    {
      "type": "code",
      "text": "  end",
      "id": "b55234cef042dca83818dc85354cccde"
    },
    {
      "type": "html",
      "text": "\nThat just called _selectNode() itself. There are ways to test the raw input, \nnot the bound event, but we don't care.",
      "id": "be11b8b5ef5a43db831eca32b5b3db7b"
    },
    {
      "type": "html",
      "text": "\nThe test shows that selected nodes get thicker.",
      "id": "4569081d86bc856ccdd97a0d6a916898"
    },
    {
      "type": "html",
      "text": "\nIf manual testing (which still must always occur anyway) reveals a problem \nin the bindings, one could test at the Tk Canvas item level, by querying out \nthe bound event and calling it. This is a pain (due in this specific case \nto incompatibilities between Ruby and Tk's binding conventions), but it's \nas close to the boundary of >our< GUI Layer as possible.",
      "id": "2f26b9d3d20ab43447e1c4cff51e4fad"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "baf6367b2f580634e05961761afe9b8e"
    },
    {
      "type": "html",
      "text": "\nGUI toolkits design to either present a window or die\ntrying.",
      "id": "c949366007577af49e927dbb6ab71b94"
    },
    {
      "type": "html",
      "text": "\nA programmer, seeing such a window, might be tempted\nto click on that window with a mouse, instead of\nperform the research required to learn to click on\nthat window with a test rig. Early in a project is the\ncorrect time to start good habits. Use [[Test Driven Development]] to write that window's features.",
      "id": "e912f37424fb4c5db7426bf67cd6a691"
    },
    {
      "type": "html",
      "text": "\nThe principle we will follow is One Button Testing.\nThat means while editing one hits One Button,\ntypically the Run or Debug button in one's IDE.",
      "id": "18c72b7c47813607237c1c3b1ae95d21"
    },
    {
      "type": "html",
      "text": "\nThe IDE now runs our test rig; the rig runs the\nwindow, \"clicks\" on it automatically, confirms the\nresults, and dismisses the window.",
      "id": "1b3114c4ef03b577821247e7a63447e6"
    },
    {
      "type": "html",
      "text": "\"The light is green the trap is clean.\" --Dr. Raymond\nStantz.  Ghostbusters.",
      "id": "b87ced301dfdf68d63ee0fbcaff3b660"
    },
    {
      "type": "html",
      "text": "\nProgrammers who do not obey this principle will find\nthemselves frequently manually putting their windows\ninto various situations, such as reading a document\ncontaining known test data, and then manually running\nthe window with that data to verify results, and\nverifying internal states with assertions and trace\nstatements.",
      "id": "30c484e9aa6ef7e5a5ad954305290367"
    },
    {
      "type": "html",
      "text": "\nEach of these manual activities represents a missed\nopportunity to write a test. Such a test would\npreserve functionality, going forward, against the\nbane of GUI development - rampant refactorings of both\nmechanics and esthetics. -- [[Phl Ip]]",
      "id": "435e9efa1935d7b408c130c6f547b5de"
    },
    {
      "type": "html",
      "text": "\nThe reading list:",
      "id": "8725d83f56be9c30a705bd1ec959ed71"
    },
    {
      "type": "html",
      "text": " [[Gui Testing]]",
      "id": "66e2293f146823941f60f54fd873049f"
    },
    {
      "type": "html",
      "text": " [[Gui Testing Game Apps]]",
      "id": "25a5a4857d0033e35dc4bbcb4254ab20"
    },
    {
      "type": "html",
      "text": " [[Gui Testing Patterns]]",
      "id": "441fd92940703aa5cb3a79d8c6824d9b"
    },
    {
      "type": "html",
      "text": " [[Gui Unit Testing]]",
      "id": "3ef2c8aa2c60d9dcaff26f0c56909ba2"
    },
    {
      "type": "html",
      "text": " [[Java Gui Architectures]]",
      "id": "4ad24287f65902139011bc7680ad0744"
    },
    {
      "type": "html",
      "text": " [[Java Gui Unit Testing]]",
      "id": "b2799d391b21132a4588c239747bb45d"
    },
    {
      "type": "html",
      "text": " [[Lets Reuse That Gui]]",
      "id": "c29dd4c8e8a5cc4243db745ef14436d7"
    },
    {
      "type": "html",
      "text": " [[One Button Testing]]",
      "id": "8f307d6d70e738d8fd269be6521bc663"
    },
    {
      "type": "html",
      "text": " [[Regular Expression Match Assertion]]  <-- for HTML",
      "id": "ffdade769c7995703ff58c96c2c23d90"
    },
    {
      "type": "html",
      "text": " [[Test First User Interfaces Principles]]",
      "id": "c4b07877f09b1ea04f85a3d064bcd065"
    },
    {
      "type": "html",
      "text": " [[Testing Graphics Systems]]",
      "id": "ce252f90630f1c0c9c62c344731023c8"
    },
    {
      "type": "html",
      "text": " [[Then Dont Call Main Loop]]",
      "id": "04f12ef43f4014272c9bfa7a26bc5734"
    },
    {
      "type": "html",
      "text": " [[Too Much Gui Code]]",
      "id": "e5469f38062cba628a5a3cf326746727"
    },
    {
      "type": "html",
      "text": " [[Web Applications And Xp]]",
      "id": "c6405249c8e998886e20dd6a7adb671f"
    },
    {
      "type": "html",
      "text": " [[Web Testing]]",
      "id": "2cd308288acea24e9b14e29c6ffcd3fd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "baf6367b2f580634e05961761afe9b8e"
    },
    {
      "type": "html",
      "text": "see also [[Test Driven Development]], [[Test Driven Analysis And Design]]",
      "id": "723ebd7ab4018e421e796c1666b0fd24"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "baf6367b2f580634e05961761afe9b8e"
    },
    {
      "type": "html",
      "text": "[[Category Testing]], [[Category Gui]]",
      "id": "e8b5a231f0aa8f4a005a1b3f9a217ade"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?TestFirstUserInterfaces c2.com]",
      "id": "d606edbf6426b1b9320f6a60f86d0457"
    }
  ],
  "journal": [
    {
      "date": 1152247191000,
      "id": "d7bf35172728578dd91933c1135ad51c",
      "type": "create",
      "item": {
        "title": "Test First User Interfaces",
        "story": [
          {
            "type": "html",
            "text": "A forum to discuss [[Test Driven Development]] for [[Graphical User Interface]]s, with mail and news portals:",
            "id": "b483c32a915f16475dda83be40ff6507"
          },
          {
            "type": "html",
            "text": " [http://groups.yahoo.com/group/testfirstuserinterfaces/ groups.yahoo.com]",
            "id": "66e898d222eef416110e574ac24d7679"
          },
          {
            "type": "html",
            "text": " news://news.gmane.org/gmane.comp.programming.test-first-user-interfaces",
            "id": "ffba25ec5d607cf9cc82128b6af7547d"
          },
          {
            "type": "html",
            "text": "\nPhlip sent the principles to the yahoo group:",
            "id": "e05a30a152e6625fc1bfb5143a4b4118"
          },
          {
            "type": "html",
            "text": " [http://groups.yahoo.com/group/TestFirstUserInterfaces/message/615/ groups.yahoo.com]",
            "id": "3dbf13e5ae958e613a20357954d4b42d"
          },
          {
            "type": "html",
            "text": " [[Test First User Interfaces Principles]] (also added to the reading list)",
            "id": "47cacffa5f1ecb3edcf0b28dcc59f109"
          },
          {
            "type": "html",
            "text": "\nAnd, eventually, a little [[Eye Candy]]:",
            "id": "4ef4bef0f248c84d09b2f819ffb6ca72"
          },
          {
            "type": "image",
            "url": "http://flea.sourceforge.net/rotatingBraneKandel.gif",
            "text": "flea.sourceforge.net",
            "id": "333b08a6640ed2089197b0e71fb24b87"
          },
          {
            "type": "html",
            "text": "\n (save this image and open it locally to watch it rotate - sorry about the format!)",
            "id": "aee3b7dc10adae5efb5ad59278e1bc17"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "baf6367b2f580634e05961761afe9b8e"
          },
          {
            "type": "html",
            "text": "<i>TFUI</i> recommends programmers write a category of [[Test Fixture]]s that make a project's [[Programmer Test]] framework comptetive with its GUIs [[Class Wizard]]s, form painters, and debuggers.",
            "id": "9a81169c7e9a7ba14e33e6a915a5b31e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "baf6367b2f580634e05961761afe9b8e"
          },
          {
            "type": "html",
            "text": "\nThe best example so far is [[Remote User Interface]].",
            "id": "e7e4f0ac6f0474971af60d48c3075931"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "baf6367b2f580634e05961761afe9b8e"
          },
          {
            "type": "html",
            "text": "\nDavid Carlton wrote:",
            "id": "a1a1ff69e277ae2cb16f6dc728b8f897"
          },
          {
            "type": "html",
            "text": "<i>I'm about to add a GUI interface for an application that I'm writing;</i>",
            "id": "7110f030fb382b252eca7b318ae034f4"
          },
          {
            "type": "html",
            "text": "\nYou have already ran the first mile. You have an app with programmatic \ncontrols to do everything you want, but no GUI. The layer that your [[Gui Layer]] will connect to is the \"[[Representation Layer]]\". It can do everything to \nthe object model that the GUI will, but without any awareness (import, \ninclude, etc.) of the actual [[Gui Toolkit]].",
            "id": "6cb7b8f0ff68ec3240ff67212ec0550f"
          },
          {
            "type": "html",
            "text": "\nThis is very good; beginning with the [[Graphical User Interface]], and adding all the logic \npiecemeal to its event handlers, leads to [[Spaghetti Code]].",
            "id": "a0b5fae197c4d9056c7b1e5afa3ce28b"
          },
          {
            "type": "html",
            "text": "\nIf you are starting a new project with a GUI, and you want to avoid the \ntemptations of [[Spaghetti Code]] and [[Too Much Gui Code]], then use a [[Test First]] approach that extends \nthe [[Model View Controller]] pattern with a mock view class, which is\nvery testable.  See Michael Feathers' \"The Humble Dialog Box\" at \n[http://www.objectmentor.com/resources/articles/TheHumbleDialogBox.pdf www.objectmentor.com] ",
            "id": "36a40aa8f2268af6a82c030a65428e78"
          },
          {
            "type": "html",
            "text": "<i>how should I test it?</i>",
            "id": "050e24e54affbb2820ff8197aea84e3c"
          },
          {
            "type": "html",
            "text": "\nBy writing code that pushes data into the GUI forms. Then the code \nmanipulates the forms like a user (but at the toolkit level, not at the \nlevel of raw mouse and keyboard motions), and then reading the data back \nout.",
            "id": "ec4cc00dafde7ed07ba7419536f21df0"
          },
          {
            "type": "html",
            "text": "\nHowever, the GUI will probably try to display the window. Primitive GUIs \nthat ran on 286 hardware could do a lot before displaying the window, as an \noptimization for speedy typists. On modern GUIs you can still often tap ",
            "id": "8389b3334c56ac12a4716aae8b4f2760"
          },
          {
            "type": "html",
            "text": "<Enter> before a dialog box comes up; it will absorb the enter before it \ndisplays, supress the display, and return the enter to the application.",
            "id": "cdebbafd8d5c23e309ebcdae5cedddbd"
          },
          {
            "type": "html",
            "text": "\nHowever, modern GUIs often contain widgets bonded together with an [[Object Request Broker]] like \nActiveX, which usually turns on \"apartment model threading\" on principle. \nSo the GUI will probably display, because a thread other than the one \nrunning your test code will service the Paint event.",
            "id": "487d55c2b97cf22d0a5b55527b774433"
          },
          {
            "type": "html",
            "text": "\nTo write a GUI [[Test First]], >most< of the time you don't want to see it. You \nwant to type, hit Go, get a [[Green Bar]], and keep typing, with minimal \ninterruption to your [[Mental State Called Flow]]. And you certainly don't want the temptation of \nthat window popping up inviting you to \"just test it manually, just this \nonce.\"",
            "id": "53c98209d6df84f006f1caaa44e15382"
          },
          {
            "type": "html",
            "text": "\nIf you can defeat all that, you will achieve a Nirvana where the GUI toolkit \nis:",
            "id": "81d1a93c2cdfd0e88b13ca7a2fce0b22"
          },
          {
            "type": "html",
            "text": "<b>just another library</b>",
            "id": "035631ac3bb69e42001e32f410683741"
          },
          {
            "type": "html",
            "text": "<i>I can test lots of the application's behavior by doing unit tests for non-GUI classes and systems tests that test the application's performance when using the text interface (which, fortunately, lets me test many important aspects of the output: the text interface vs GUI interface choice is well localized, I think), but I'm at a bit of a loss as to how to test that windows pop up and respond to mouse clicks/keyboard input/etc. in an automated fashion.</i>",
            "id": "47be04b2a81377d3cdd8a6591549e178"
          },
          {
            "type": "html",
            "text": "\nThe culture and documentation for these things teach write-only. They don't \ndwell on how you read back from a control what its current state is. But \nthe functions are >usually< available.",
            "id": "25973ce32ceb919c6cd51a40d238a45f"
          },
          {
            "type": "html",
            "text": "\n[http://wiki.rubygarden.org/Ruby/page/show/SvgCanvas wiki.rubygarden.org]",
            "id": "b99ef233efbeb328d83a5275596a4c16"
          },
          {
            "type": "html",
            "text": "\nThat sample uses the excellent [[Ruby Language]] on the excellent Tk Canvas \nwidget. Things inside that canvas are \"objects\". They are actually records, \nat the Tk level, so changing their members changes the canvas's display. \nAnd the Ruby wrapper promotes canvas items to full-fledged objects.",
            "id": "d31510b8ff01c5bc95095ecb67ac9094"
          },
          {
            "type": "html",
            "text": "\nThe test below pushes a command into the [[Graph Viz]] 'dot' program. 'dot' \nfilters the command into SVG; the function 'putSvgIntoCanvas' parses the \nSVG and obeys each command in it.",
            "id": "af52d2605b4a2657d051b7ec1e6595ab"
          },
          {
            "type": "html",
            "text": "\nWe test this, round-trip, by then querying those item objects out, and \ninspecting that they are, in fact, a black oval and blue text.",
            "id": "109143f80bceeb852b405980b7610311"
          },
          {
            "type": "code",
            "text": "  def test_blueText",
            "id": "0ea68a5ab970c842f72481e9e292ee09"
          },
          {
            "type": "code",
            "text": "  dottage = '''\n    aNode [label = \"Kozmik Bullfrog\", fontcolor = blue];\n    '''\n  svg = _emitSvg(dottage, false)",
            "id": "368c9e15ce57bd6afc98a57ad2f07db3"
          },
          {
            "type": "code",
            "text": "  canvas = warmUp()\n  putSvgIntoCanvas(svg, canvas)",
            "id": "0bbb53fd3234463b8c602d357d7cd998"
          },
          {
            "type": "code",
            "text": "  all = canvas.find_all()\n  assert_equal all.size(), 2\n  assert_equal canvas.itemtype(1), TkcOval\n  assert_equal canvas.itemtype(2), TkcText\n  oval = all[0]\n  assert_equal oval.cget('outline'), 'black'\n  assert_equal oval.cget('fill'), ''\n  text = all[1]\n  assert_equal text.cget('fill'), 'blue'\n  assert_equal text.cget('text'), 'Kozmik Bullfrog'",
            "id": "0fa26e7a23f445ca0af9e84d857474ae"
          },
          {
            "type": "code",
            "text": "  done(false)",
            "id": "999e8ad1c7ddd1b46b1953753f58017e"
          },
          {
            "type": "code",
            "text": "  end",
            "id": "b55234cef042dca83818dc85354cccde"
          },
          {
            "type": "html",
            "text": "\nAt the end, we don't call [[Tk Mainloop]]. That means we don't need to see the \ncanvas. If we temporarily want to, we turn the 'false' to a 'true' on that \nlast statement.",
            "id": "2fc999fe8485a2f3a9bbbb6deb220de5"
          },
          {
            "type": "html",
            "text": "\nThat fits this pattern: [[Then Dont Call Main Loop]]",
            "id": "243b36fe0990235ff1865286424ed2c6"
          },
          {
            "type": "html",
            "text": "<i>It seems like one option is to have some sort of robot that can fake user's GUI input; are there GUI libraries for C++/X-Windows that support this sort of thing? Otherwise, I guess I'll have to use non-automated tests, which I'd rather avoid whenever possible.</i>",
            "id": "53f63f6c4df2b3ff69f0bd42db3eb6c8"
          },
          {
            "type": "html",
            "text": "\nFirst, it is possible, via super-human research, to fake raw keyboard and \nmouse input.",
            "id": "075ed3faa969b56d6b29bb0ca88627eb"
          },
          {
            "type": "html",
            "text": "\nBut this would test your toolkit first, then your own GUI Layer. If you are \nnot writing or refactoring a toolkit, don't test it.",
            "id": "6159dd580f8f9f3a2aec02fd83d544bb"
          },
          {
            "type": "html",
            "text": "\nTo test within your own GUI layer, call its own events directly. In my \n[[Svg Canvas]], this line bonds a callback to an event on an item in the canvas:",
            "id": "b0a1a7821edc60e350399aa72d6bee15"
          },
          {
            "type": "code",
            "text": "  thing.bind('Button-1') do\n  _selectNode(canvas, thing.gettags())\n  end",
            "id": "03f499400a112f600f0a62d765b45645"
          },
          {
            "type": "html",
            "text": "(\"thing\" is a recently created oval around a node, so in context it's not a \nbad name.)",
            "id": "9869f8a6a47dcdc7dc74b86dc43e1641"
          },
          {
            "type": "html",
            "text": "\nNow the test:",
            "id": "a827180469e22b5b4b0aca8cd3963531"
          },
          {
            "type": "code",
            "text": "  def test__selectNode",
            "id": "e37178633bf8bcda6818de5d4e8ba0fd"
          },
          {
            "type": "code",
            "text": "  dottage = '''\n    aNode [label = \"glue\", style = filled, fillcolor = pink, \n    color = green];\n    bNode [label = \"factory\", style = filled, fillcolor = \n    pink, color = green];\n    '''\n  svg = _emitSvg(dottage)\n  canvas = warmUp()\n  putSvgIntoCanvas(svg, canvas)",
            "id": "c02c9f59a2499decd030e6a0fc07aa71"
          },
          {
            "type": "code",
            "text": "  all = canvas.find_all()\n  assert_equal all.size(), 4\n  assert_equal canvas.itemtype(2), TkcText\n  text1 = all[1]\n  # assert_equal text.cget('outline'), 'green'\n  assert_equal text1.cget('fill'), 'black'\n  assert_equal canvas.itemtype(4), TkcText\n  text2 = all[3]\n  # assert_equal text.cget('outline'), 'green'\n  assert_equal text2.cget('fill'), 'black'",
            "id": "83e15879b1b0059636d508108beeb39f"
          },
          {
            "type": "code",
            "text": "  # selecting a node, by clicking on the oval or the text,\n  # makes the outline of the oval thicker, but does not \n  # change the \"width\" of the text. Selecting another\n  # node restores the outline width of the first",
            "id": "12dabafc790ca17a6170db5dc42e68ce"
          },
          {
            "type": "code",
            "text": "  # TODO text with a linefeed in it",
            "id": "b44b5fdcb62fd08f477b0df30d7ac7d9"
          },
          {
            "type": "code",
            "text": "  assert_equal all[0].cget('width'), 1\n  assert_equal all[1].cget('width'), 0\n  assert_equal all[2].cget('width'), 1\n  assert_equal all[3].cget('width'), 0",
            "id": "132b7bddaf096e89ae4411d5fda3f86b"
          },
          {
            "type": "code",
            "text": "  _selectNode(canvas, text2.gettags())",
            "id": "a2d81f19d8b3e6dbb90973edf2aab888"
          },
          {
            "type": "code",
            "text": "  assert_equal all[0].cget('width'), 1\n  assert_equal all[1].cget('width'), 0\n  assert_equal all[2].cget('width'), 3.0\n  assert_equal all[3].cget('width'), 0",
            "id": "8572c5403fcc1d18af2509b151c2cb8e"
          },
          {
            "type": "code",
            "text": "  _selectNode(canvas, all[0].gettags())",
            "id": "12d94e463a08af745bba0b245fcf47ab"
          },
          {
            "type": "code",
            "text": "  assert_equal all[0].cget('width'), 3\n  assert_equal all[1].cget('width'), 0\n  assert_equal all[2].cget('width'), 1\n  assert_equal all[3].cget('width'), 0\n  done(false)",
            "id": "4a17ec30c3c4c9067439caffc608a556"
          },
          {
            "type": "code",
            "text": "  end",
            "id": "b55234cef042dca83818dc85354cccde"
          },
          {
            "type": "html",
            "text": "\nThat just called _selectNode() itself. There are ways to test the raw input, \nnot the bound event, but we don't care.",
            "id": "be11b8b5ef5a43db831eca32b5b3db7b"
          },
          {
            "type": "html",
            "text": "\nThe test shows that selected nodes get thicker.",
            "id": "4569081d86bc856ccdd97a0d6a916898"
          },
          {
            "type": "html",
            "text": "\nIf manual testing (which still must always occur anyway) reveals a problem \nin the bindings, one could test at the Tk Canvas item level, by querying out \nthe bound event and calling it. This is a pain (due in this specific case \nto incompatibilities between Ruby and Tk's binding conventions), but it's \nas close to the boundary of >our< GUI Layer as possible.",
            "id": "2f26b9d3d20ab43447e1c4cff51e4fad"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "baf6367b2f580634e05961761afe9b8e"
          },
          {
            "type": "html",
            "text": "\nGUI toolkits design to either present a window or die\ntrying.",
            "id": "c949366007577af49e927dbb6ab71b94"
          },
          {
            "type": "html",
            "text": "\nA programmer, seeing such a window, might be tempted\nto click on that window with a mouse, instead of\nperform the research required to learn to click on\nthat window with a test rig. Early in a project is the\ncorrect time to start good habits. Use [[Test Driven Development]] to write that window's features.",
            "id": "e912f37424fb4c5db7426bf67cd6a691"
          },
          {
            "type": "html",
            "text": "\nThe principle we will follow is One Button Testing.\nThat means while editing one hits One Button,\ntypically the Run or Debug button in one's IDE.",
            "id": "18c72b7c47813607237c1c3b1ae95d21"
          },
          {
            "type": "html",
            "text": "\nThe IDE now runs our test rig; the rig runs the\nwindow, \"clicks\" on it automatically, confirms the\nresults, and dismisses the window.",
            "id": "1b3114c4ef03b577821247e7a63447e6"
          },
          {
            "type": "html",
            "text": "\"The light is green the trap is clean.\" --Dr. Raymond\nStantz.  Ghostbusters.",
            "id": "b87ced301dfdf68d63ee0fbcaff3b660"
          },
          {
            "type": "html",
            "text": "\nProgrammers who do not obey this principle will find\nthemselves frequently manually putting their windows\ninto various situations, such as reading a document\ncontaining known test data, and then manually running\nthe window with that data to verify results, and\nverifying internal states with assertions and trace\nstatements.",
            "id": "30c484e9aa6ef7e5a5ad954305290367"
          },
          {
            "type": "html",
            "text": "\nEach of these manual activities represents a missed\nopportunity to write a test. Such a test would\npreserve functionality, going forward, against the\nbane of GUI development - rampant refactorings of both\nmechanics and esthetics. -- [[Phl Ip]]",
            "id": "435e9efa1935d7b408c130c6f547b5de"
          },
          {
            "type": "html",
            "text": "\nThe reading list:",
            "id": "8725d83f56be9c30a705bd1ec959ed71"
          },
          {
            "type": "html",
            "text": " [[Gui Testing]]",
            "id": "66e2293f146823941f60f54fd873049f"
          },
          {
            "type": "html",
            "text": " [[Gui Testing Game Apps]]",
            "id": "25a5a4857d0033e35dc4bbcb4254ab20"
          },
          {
            "type": "html",
            "text": " [[Gui Testing Patterns]]",
            "id": "441fd92940703aa5cb3a79d8c6824d9b"
          },
          {
            "type": "html",
            "text": " [[Gui Unit Testing]]",
            "id": "3ef2c8aa2c60d9dcaff26f0c56909ba2"
          },
          {
            "type": "html",
            "text": " [[Java Gui Architectures]]",
            "id": "4ad24287f65902139011bc7680ad0744"
          },
          {
            "type": "html",
            "text": " [[Java Gui Unit Testing]]",
            "id": "b2799d391b21132a4588c239747bb45d"
          },
          {
            "type": "html",
            "text": " [[Lets Reuse That Gui]]",
            "id": "c29dd4c8e8a5cc4243db745ef14436d7"
          },
          {
            "type": "html",
            "text": " [[One Button Testing]]",
            "id": "8f307d6d70e738d8fd269be6521bc663"
          },
          {
            "type": "html",
            "text": " [[Regular Expression Match Assertion]]  <-- for HTML",
            "id": "ffdade769c7995703ff58c96c2c23d90"
          },
          {
            "type": "html",
            "text": " [[Test First User Interfaces Principles]]",
            "id": "c4b07877f09b1ea04f85a3d064bcd065"
          },
          {
            "type": "html",
            "text": " [[Testing Graphics Systems]]",
            "id": "ce252f90630f1c0c9c62c344731023c8"
          },
          {
            "type": "html",
            "text": " [[Then Dont Call Main Loop]]",
            "id": "04f12ef43f4014272c9bfa7a26bc5734"
          },
          {
            "type": "html",
            "text": " [[Too Much Gui Code]]",
            "id": "e5469f38062cba628a5a3cf326746727"
          },
          {
            "type": "html",
            "text": " [[Web Applications And Xp]]",
            "id": "c6405249c8e998886e20dd6a7adb671f"
          },
          {
            "type": "html",
            "text": " [[Web Testing]]",
            "id": "2cd308288acea24e9b14e29c6ffcd3fd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "baf6367b2f580634e05961761afe9b8e"
          },
          {
            "type": "html",
            "text": "see also [[Test Driven Development]], [[Test Driven Analysis And Design]]",
            "id": "723ebd7ab4018e421e796c1666b0fd24"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "baf6367b2f580634e05961761afe9b8e"
          },
          {
            "type": "html",
            "text": "[[Category Testing]], [[Category Gui]]",
            "id": "e8b5a231f0aa8f4a005a1b3f9a217ade"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?TestFirstUserInterfaces c2.com]",
            "id": "d606edbf6426b1b9320f6a60f86d0457"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628148923510
    }
  ]
}