{
  "title": "2023-06-10",
  "story": [
    {
      "type": "paragraph",
      "id": "77f2f1d38fdb91a0",
      "text": "⇒ [[Decode JSON in Elm]]: Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168636214571224yXOCC:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix]:\nFor a couple of months now we've been coding an hour or two a week on a Java program that can correctly read page json and follow its links through the federation."
    },
    {
      "type": "reference",
      "id": "a5bbbdf9087c9595",
      "site": "ward.dojo.fed.wiki",
      "slug": "federation-browser-in-java",
      "title": "Federation Browser in Java",
      "text": "Ward challenged [[Jason Clark]], a Java expert, to fetch and parse page json. He wrote a demonstration using modern http and object mapping libraries. [https://github.com/jasonrclark/fedwiki-java/tree/363584957b99a7a21ed2db1f64773063ea84b336 github]"
    },
    {
      "type": "paragraph",
      "id": "c572b61cf080005b",
      "text": "I had written about this before:"
    },
    {
      "type": "reference",
      "id": "57b8440a7ef4f42a",
      "site": "wiki.ralfbarkow.ch",
      "slug": "java-wiki-content-fetcher",
      "title": "Java Wiki Content Fetcher",
      "text": "Read federated wiki pages from the internet with Java. Uses the Jackson library for JSON (locally downloaded jars) and the built-in HttpClient from JDK 11+. [https://github.com/jasonrclark/fedwiki-java github]"
    },
    {
      "type": "markdown",
      "id": "5c449fbafe66e0d9",
      "text": "> This will output a cryptic looking object output but it's a start."
    },
    {
      "type": "paragraph",
      "id": "53859e347475177e",
      "text": "Compare that with this output:"
    },
    {
      "type": "image",
      "id": "3d0c5d200752f510",
      "text": "Current vite-elm-dojo UI [https://github.com/RalfBarkow/vite-elm-dojo github]",
      "size": "wide",
      "width": 419,
      "height": 220,
      "url": "/assets/plugins/image/83d0606b3ad0b7157cf3734e1f9ff418.jpg"
    },
    {
      "type": "image",
      "id": "eb2d8e4e97f4884e",
      "text": "Elm Debugger",
      "size": "wide",
      "width": 419,
      "height": 171,
      "url": "/assets/plugins/image/feb80930806bfa88041f14380d39681f.jpg"
    },
    {
      "type": "image",
      "id": "987f08a560e9d941",
      "text": "Parsed Ghost Page (Future)",
      "size": "wide",
      "width": 419,
      "height": 253,
      "url": "/assets/plugins/image/b9dc357e57fa5b188d510b812a3d072d.jpg"
    },
    {
      "type": "paragraph",
      "id": "fd5182eebfb2fc89",
      "text": "⇒ [[Message]] ⇒ [[Model]] ⇒ [[Decode JSON in Elm]] ⇒ [[2023-06-09]] ⇒ Next: … ⇒ [[Track Successes and Failures]]"
    },
    {
      "type": "paragraph",
      "id": "a4cd755ca1abea46",
      "text": "The code you provided: (ChatGPT May 24 Version)"
    },
    {
      "type": "code",
      "id": "7f775d2953edb79a",
      "text": "storyDecoder : Decode.Decoder Story\nstoryDecoder =\n    Decode.oneOf\n        [ Decode.map Future futureEventDecoder\n        , Decode.map Snippet storySnippetDecoder\n        , Decode.map AddFactory factoryItemDecoder\n        , Decode.map (\\_ -> EmptyStory) (Decode.succeed EmptyStory)\n        ]\n"
    },
    {
      "type": "paragraph",
      "id": "d6c230d5b4ec2345",
      "text": "is a great example of using Decode.oneOf to analyze the Journal data and decode it into a Story type. In this case, the [[Story]] type seems to represent different types of events that can occur in a journal. […]"
    },
    {
      "type": "paragraph",
      "id": "aa507998bc94f1a0",
      "text": "No, the [[Journal]] type records different types of events that occur in the Story."
    },
    {
      "type": "paragraph",
      "id": "725a3a38fda060c6",
      "text": "The [[Journal]] type records different types of events that occur in the story. By playing the journal step by step, we can time travel through the different versions of the story. What might a user interface look like in Elm Code that can replay the history of the story like the Elm Debugger?"
    },
    {
      "type": "paragraph",
      "id": "f46f6f64d238761c",
      "text": "To create a UI in Elm that allows you to replay the history of the Story, similar to the Elm Debugger, you can leverage the Elm architecture and build a time-traveling feature. Here's a high-level overview of how the UI could be structured: (ChatGPT May 24 Version)"
    },
    {
      "type": "paragraph",
      "id": "700babaa05808121",
      "text": "1. [[Model]]: The model of your application would include the current state of the Story, as well as the list of Journal events that make up its history. You might also need additional fields to keep track of the current step in the replay and control the playback speed."
    },
    {
      "type": "paragraph",
      "id": "f681b892c978ddca",
      "text": "The model might include fields such as currentStory to store the current version of the story, journal to store the list of events, and currentIndex to keep track of the current position in the journal. [⇒ [[Track Successes and Failures]]]"
    },
    {
      "type": "paragraph",
      "id": "b4ad503aee4e09c9",
      "text": "2. [[View]]: The view function would render the current state of the Story to the user interface. You can display the content of the Story along with any other relevant information. Additionally, you'll need playback controls such as play, pause, step forward, and step backward buttons."
    },
    {
      "type": "paragraph",
      "id": "dabb1ad8059f5625",
      "text": "3. [[Update]]: The update function would handle the different messages triggered by user interactions. You'll need messages for controlling the playback, such as play, pause, step forward, and step backward. When a message is received, you can update the model accordingly, adjusting the current step in the replay or changing the playback speed."
    },
    {
      "type": "paragraph",
      "id": "4eec78feca16e414",
      "text": "4. [[Subscriptions]]: You can use subscriptions to control the playback speed. For example, you can set up a subscription that emits a message every few milliseconds to step forward in the replay, allowing for smooth animation of the Story's history."
    },
    {
      "type": "paragraph",
      "id": "8a9497d80081dbc8",
      "text": "5. [[Time Travel]]: To implement time travel, you can use a combination of the Journal events and the current step in the replay. When the user clicks on the step forward or step backward buttons, you can update the model to reflect the corresponding step in the replay and use that information to display the appropriate version of the Story.\n"
    },
    {
      "type": "paragraph",
      "id": "291579fd82ec7a65",
      "text": "By implementing the above structure, you can create a UI that allows the user to replay the history of the Story by stepping through the Journal events. With the playback controls and time travel functionality, users can interactively explore the different versions of the Story, similar to the experience provided by the [[Elm Debugger]]."
    },
    {
      "type": "pagefold",
      "id": "d73c377da4471ed8",
      "text": "~"
    },
    {
      "type": "code",
      "id": "104bdfb861357f9a",
      "text": "storyDecoder : Decode.Decoder Story\nstoryDecoder =\n    Decode.oneOf\n        [ Decode.map Future futureEventDecoder\n        , Decode.map Snippet storySnippetDecoder\n\n        --  , Decode.map AddFactory factoryItemDecoder\n        , Decode.map (\\_ -> EmptyStory) (Decode.succeed EmptyStory)\n        ]"
    },
    {
      "type": "paragraph",
      "id": "61333b72b63c5129",
      "text": "Based on the failure you encountered, it seems that uncommenting the line Decode.map AddFactory factoryItemDecoder in your storyDecoder introduces a failing test case in elm-test. The specific test case that fails is the one related to the \"Add Factory\" scenario. (ChatGPT May 24 Version)"
    },
    {
      "type": "paragraph",
      "id": "9d5d0554f4c4ab32",
      "text": "The failure message indicates a mismatch between the expected and actual values. It shows that the expected value has a story field containing [AddFactory { id = \"d1493b7d30cfab68\", type_ = \"factory\" }], while the actual value has an EmptyStory in the story field."
    },
    {
      "type": "paragraph",
      "id": "fa537f87032fd5e9",
      "text": "This suggests that the decoding process for the \"Add Factory\" scenario is not producing the expected result. There could be a problem with the factoryItemDecoder or the way it interacts with the other decoders in your pipeline."
    },
    {
      "type": "paragraph",
      "id": "384dd899b32e9704",
      "text": "To troubleshoot and fix this issue, you can review the implementation of the factoryItemDecoder and ensure that it correctly handles the JSON input for the \"Add Factory\" scenario. Pay attention to the structure and field names in the JSON data and make sure they match the corresponding Elm types and field names."
    },
    {
      "type": "paragraph",
      "id": "4f41e87c1b8c7cd0",
      "text": "Additionally, you may want to examine the structure of your test data and ensure it aligns with the expectations of your decoders. Verify that the JSON input used in the failing test case accurately represents the \"Add Factory\" scenario."
    },
    {
      "type": "paragraph",
      "id": "ae53c8f5d9688091",
      "text": "By investigating and addressing these potential issues, you should be able to resolve the test failure and ensure that the decoding process works as expected for the \"Add Factory\" scenario."
    },
    {
      "type": "pagefold",
      "id": "69bf4ff9730a039e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5550c1609f7bde9e",
      "text": "add paragraph"
    },
    {
      "type": "image",
      "id": "2bc6412c80fcd115",
      "text": "Page in WikiSpec",
      "size": "wide",
      "width": 419,
      "height": 440,
      "url": "/assets/plugins/image/6ac5ad0ee46225652567559b5255f7c4.jpg"
    },
    {
      "type": "paragraph",
      "id": "ebdec2ae026ba812",
      "text": "We have "
    },
    {
      "type": "code",
      "id": "665ab46ab01bdfbc",
      "text": "addEventDecoder : Decode.Decoder AddEvent\naddEventDecoder =\n    Decode.map4 AddEvent\n        (Decode.field \"item\" factoryItemDecoder)\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"type\" Decode.string)\n        (Decode.field \"date\" Decode.int)"
    },
    {
      "type": "paragraph",
      "id": "13ce277da7688268",
      "text": "and"
    },
    {
      "type": "code",
      "id": "d7b4ea62b533cb4f",
      "text": "paragraphItemDecoder : Decode.Decoder ParagraphItemAlias\nparagraphItemDecoder =\n    Decode.map3 ParagraphItemAlias\n        (Decode.field \"type\" Decode.string)\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"text\" Decode.string)"
    },
    {
      "type": "paragraph",
      "id": "8e0fa69c9ccc58ac",
      "text": "Idea: DSL for describing expectedJson in the WikiSpec.elm test cases."
    },
    {
      "type": "paragraph",
      "id": "fc243bb6de28b469",
      "text": "Using a DSL (Domain-Specific Language) to describe the expected JSON in your test cases can be a useful approach. It can provide a more readable and expressive way to specify the expected JSON structure and values, making your tests easier to understand and maintain. (ChatGPT May 24 Version)"
    },
    {
      "type": "paragraph",
      "id": "86fb9e6983c601c0",
      "text": "Here's an example of how you could create a DSL for describing the expected JSON structure:"
    },
    {
      "type": "paragraph",
      "id": "6175cef700274012",
      "text": "1. Define a custom type to represent the DSL expressions:"
    },
    {
      "type": "code",
      "id": "30d2b32ceb82cdf7",
      "text": "type ExpectedJson\n    = Field String ExpectedJson\n    | List ExpectedJson\n    | Value Json.Encode.Value\n"
    },
    {
      "type": "paragraph",
      "id": "c02dcc2ef308f1a7",
      "text": "2. Create helper functions to construct DSL expressions:"
    },
    {
      "type": "code",
      "id": "0a462fe139b4411d",
      "text": "field : String -> ExpectedJson -> ExpectedJson\nfield fieldName expectedJson =\n    Field fieldName expectedJson\n\nlist : List ExpectedJson -> ExpectedJson\nlist expectedJsonList =\n    List expectedJsonList\n\nvalue : Json.Encode.Value -> ExpectedJson\nvalue jsonValue =\n    Value jsonValue\n"
    },
    {
      "type": "code",
      "id": "603913fa1dc39b17",
      "text": "validateJson : ExpectedJson -> Decode.Value -> Bool\nvalidateJson expectedJson actualJson =\n    -- Implement the validation logic comparing the DSL expression with the actual JSON\n"
    },
    {
      "type": "paragraph",
      "id": "66a969087d92a914",
      "text": "3. Write a function to validate the expected JSON using the DSL:"
    },
    {
      "type": "code",
      "id": "660bcf84d20ddd30",
      "text": "validateJson : ExpectedJson -> Decode.Value -> Bool\nvalidateJson expectedJson actualJson =\n    -- Implement the validation logic comparing the DSL expression with the actual JSON\n"
    },
    {
      "type": "paragraph",
      "id": "03b807af240a7438",
      "text": "With this DSL, you can now describe the expected JSON structure and values in a more readable manner. Here's an example usage:"
    },
    {
      "type": "code",
      "id": "e83db3280f1866a4",
      "text": "expectedJson : ExpectedJson\nexpectedJson =\n    field \"id\" (value (Json.Encode.string \"123\"))\n        |> field \"name\" (value (Json.Encode.string \"John Doe\"))\n        |> field \"age\" (value (Json.Encode.int 25))\n        |> field \"tags\" (list [ value (Json.Encode.string \"tag1\")\n                              , value (Json.Encode.string \"tag2\")\n                              ])\n\nactualJson : Decode.Value\nactualJson =\n    -- JSON obtained from decoding\n\ntest : Bool\ntest =\n    validateJson expectedJson actualJson\n"
    },
    {
      "type": "paragraph",
      "id": "a417cf6d95ac7a7f",
      "text": "By using this DSL, you can have a clear and expressive representation of the expected JSON structure in your test cases. It allows you to focus on the structure and values you expect, making it easier to write and maintain your tests."
    },
    {
      "type": "paragraph",
      "id": "3e790761bffe5272",
      "text": "⇒ [[scratch]]"
    },
    {
      "type": "image",
      "id": "449156e8263ce4ac",
      "text": "edit image",
      "size": "wide",
      "width": 419,
      "height": 357,
      "url": "/assets/plugins/image/48c5fecaaa2e29756b61f8d927c5ca39.jpg"
    },
    {
      "type": "paragraph",
      "id": "a82941c4cf54997a",
      "text": "createType EmptyStory: Create EmptyStory"
    },
    {
      "type": "paragraph",
      "id": "4168292410d5c06b",
      "text": "factoryType add id: Factory add id"
    },
    {
      "type": "paragraph",
      "id": "af97a04bc4fd927a",
      "text": "editType id to imageType: Edit id toImage"
    },
    {
      "type": "paragraph",
      "id": "56c6a6fb2fca9151",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168641056274563grJEF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix]\nJson is to be admired for its balance between flexibility and interoperability. Users of json can easily push it off balance by expecting elaborate interpretation of that which json passes on as atomic types. Item types are just strings to json, but to a page json reader they represent the impossible: code today a handler for a type that will be invented tomorrow."
    },
    {
      "type": "paragraph",
      "id": "8759e9c0d0bc36d0",
      "text": "I intend to ignore all but a popular and useful subset of item types. But even with this expectation I caught a little slip in the code I have already written. I implemented a command, find word, which will sequence through the items looking for the one who's text contains the word. But, an item isn't required to have a text field. We often code this as item.text || \"\" which will substitute an empty string for a missing field. My search will not find the word in this text which is fine by me, But what if some plugin used the text field to store some rich text object that didn't support my regex search? Our approach so far has been to \"let it fail\". This seems counter to the expectation of languages that aspire to be more reliably correct."
    },
    {
      "type": "paragraph",
      "id": "1760fc7a9a0615a3",
      "text": "I will be interested to see what sort of accommodations Ralf makes for these issues in Elm. "
    },
    {
      "type": "paragraph",
      "id": "6e0852add8b4fd43",
      "text": "[…]"
    },
    {
      "type": "code",
      "id": "922e13968455bc60",
      "text": "module Main exposing (..)\n\nimport Html exposing (div, text)\nimport Json.Decode as Decode exposing (Decoder, map2, field)\n\n\n-- Define the base record type\ntype alias Item =\n    { id : String\n    , text : String\n    }\n\n\n-- Decode the base fields and allow additional fields\nitemDecoder : Decoder Item\nitemDecoder =\n    map2 Item\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"text\" Decode.string)\n\n\n-- Decode an item with additional fields\nextendedItemDecoder : Decoder (Item, Decode.Value)\nextendedItemDecoder =\n    Decode.map2\n        (\\item extraFields -> (item, extraFields))\n        itemDecoder\n        (Decode.succeed ()) -- Additional fields are ignored\n\n\n-- Example usage\njsonData : String\njsonData =\n    \"\"\"\n    {\n        \"id\": \"123\",\n        \"text\": \"Some text\",\n        \"newField\": \"New field value\"\n    }\n    \"\"\"\n\nmain =\n    case Decode.decodeString extendedItemDecoder jsonData of\n        Ok (item, extraFields) ->\n            div [] [\n                text (\"ID: \" ++ item.id),\n                text (\"Text: \" ++ item.text),\n                text (\"Extra fields: \" ++ Decode.encode extraFields)\n            ]\n\n        Err error ->\n            text (\"Decoding error: \" ++ Decode.errorToString error)\n"
    },
    {
      "type": "paragraph",
      "id": "e8ae7f161ef62215",
      "text": "\nPALKAR, Shoumik, ABUZAID, Firas, BAILIS, Peter and ZAHARIA, Matei, 2018. Filter before you parse: faster analytics on raw data with sparser. Proceedings of the VLDB Endowment. 1 July 2018. Vol. 11, no. 11, p. 1576–1589. DOI 10.14778/3236187.3236207. Exploratory big data applications often run on raw unstructured or semi-structured data formats, such as JSON files or text logs. These applications can spend 80--90% of their execution time parsing the data. In this paper, we propose a new approach for reducing this overhead: apply filters on the data’s raw bytestream before parsing. This technique, which we call raw filtering, leverages the features of modern hardware and the high selectivity of queries found in many exploratory applications. With raw filtering, a user-specified query predicate is compiled into a set of filtering primitives called raw filters (RFs). RFs are fast, SIMD-based operators that occasionally yield false positives, but never false negatives. We combine multiple RFs into an RF cascade to decrease the false positive rate and maximize parsing throughput. Because the best RF cascade is data-dependent, we propose an optimizer that dynamically selects the combination of RFs with the best expected throughput, achieving within 10% of the global optimum cascade while adding less than 1.2% overhead. We implement these techniques in a system called Sparser, which automatically manages a parsing cascade given a data stream in a supported format (e.g., JSON, Avro, Parquet) and a user query. We show that many real-world applications are highly selective and benefit from Sparser. Across diverse workloads, Sparser accelerates state-of-the-art parsers such as Mison by up to 22 × and improves end-to-end application performance by up to 9 ×.\n"
    }
  ],
  "journal": [
    {
      "id": "2bc6412c80fcd115",
      "type": "move",
      "order": [
        "77f2f1d38fdb91a0",
        "a5bbbdf9087c9595",
        "c572b61cf080005b",
        "57b8440a7ef4f42a",
        "5c449fbafe66e0d9",
        "53859e347475177e",
        "3d0c5d200752f510",
        "eb2d8e4e97f4884e",
        "987f08a560e9d941",
        "fd5182eebfb2fc89",
        "a4cd755ca1abea46",
        "7f775d2953edb79a",
        "d6c230d5b4ec2345",
        "aa507998bc94f1a0",
        "725a3a38fda060c6",
        "f46f6f64d238761c",
        "700babaa05808121",
        "f681b892c978ddca",
        "b4ad503aee4e09c9",
        "dabb1ad8059f5625",
        "4eec78feca16e414",
        "8a9497d80081dbc8",
        "291579fd82ec7a65",
        "d73c377da4471ed8",
        "104bdfb861357f9a",
        "61333b72b63c5129",
        "9d5d0554f4c4ab32",
        "fa537f87032fd5e9",
        "384dd899b32e9704",
        "4f41e87c1b8c7cd0",
        "ae53c8f5d9688091",
        "69bf4ff9730a039e",
        "5550c1609f7bde9e",
        "2bc6412c80fcd115",
        "ebdec2ae026ba812",
        "665ab46ab01bdfbc",
        "13ce277da7688268",
        "d7b4ea62b533cb4f",
        "8e0fa69c9ccc58ac",
        "fc243bb6de28b469",
        "86fb9e6983c601c0",
        "6175cef700274012",
        "30d2b32ceb82cdf7",
        "c02dcc2ef308f1a7",
        "0a462fe139b4411d",
        "603913fa1dc39b17",
        "66a969087d92a914",
        "660bcf84d20ddd30",
        "03b807af240a7438",
        "e83db3280f1866a4",
        "a417cf6d95ac7a7f",
        "eebd8051ba9c7f41"
      ],
      "date": 1686397346104
    },
    {
      "type": "edit",
      "id": "2bc6412c80fcd115",
      "item": {
        "type": "image",
        "id": "2bc6412c80fcd115",
        "text": "Page in WikiSpec",
        "size": "wide",
        "width": 419,
        "height": 440,
        "url": "/assets/plugins/image/6ac5ad0ee46225652567559b5255f7c4.jpg"
      },
      "date": 1686397264290
    },
    {
      "item": {
        "type": "image",
        "id": "2bc6412c80fcd115",
        "text": "Page in WikiSpec",
        "size": "wide",
        "width": 419,
        "height": 440,
        "url": "/assets/plugins/image/6ac5ad0ee46225652567559b5255f7c4.jpg"
      },
      "id": "2bc6412c80fcd115",
      "type": "add",
      "after": "eebd8051ba9c7f41",
      "date": 1686397240808
    },
    {
      "id": "eebd8051ba9c7f41",
      "type": "move",
      "order": [
        "77f2f1d38fdb91a0",
        "a5bbbdf9087c9595",
        "c572b61cf080005b",
        "57b8440a7ef4f42a",
        "5c449fbafe66e0d9",
        "53859e347475177e",
        "3d0c5d200752f510",
        "eb2d8e4e97f4884e",
        "987f08a560e9d941",
        "fd5182eebfb2fc89",
        "a4cd755ca1abea46",
        "7f775d2953edb79a",
        "d6c230d5b4ec2345",
        "aa507998bc94f1a0",
        "725a3a38fda060c6",
        "f46f6f64d238761c",
        "700babaa05808121",
        "f681b892c978ddca",
        "b4ad503aee4e09c9",
        "dabb1ad8059f5625",
        "4eec78feca16e414",
        "8a9497d80081dbc8",
        "291579fd82ec7a65",
        "d73c377da4471ed8",
        "104bdfb861357f9a",
        "61333b72b63c5129",
        "9d5d0554f4c4ab32",
        "fa537f87032fd5e9",
        "384dd899b32e9704",
        "4f41e87c1b8c7cd0",
        "ae53c8f5d9688091",
        "69bf4ff9730a039e",
        "5550c1609f7bde9e",
        "ebdec2ae026ba812",
        "665ab46ab01bdfbc",
        "13ce277da7688268",
        "d7b4ea62b533cb4f",
        "8e0fa69c9ccc58ac",
        "fc243bb6de28b469",
        "86fb9e6983c601c0",
        "6175cef700274012",
        "30d2b32ceb82cdf7",
        "c02dcc2ef308f1a7",
        "0a462fe139b4411d",
        "603913fa1dc39b17",
        "66a969087d92a914",
        "660bcf84d20ddd30",
        "03b807af240a7438",
        "e83db3280f1866a4",
        "a417cf6d95ac7a7f",
        "eebd8051ba9c7f41"
      ],
      "date": 1686397058654
    },
    {
      "type": "create",
      "item": {
        "title": "2023-06-10",
        "story": []
      },
      "date": 1686378724872
    },
    {
      "item": {
        "type": "factory",
        "id": "77f2f1d38fdb91a0"
      },
      "id": "77f2f1d38fdb91a0",
      "type": "add",
      "date": 1686378726438
    },
    {
      "type": "edit",
      "id": "77f2f1d38fdb91a0",
      "item": {
        "type": "paragraph",
        "id": "77f2f1d38fdb91a0",
        "text": "Ward\nFor a couple of months now we've been coding an hour or two a week on a Java program that can correctly read page json and follow its links through the federation. http://ward.dojo.fed.wiki/federation-browser-in-java.html"
      },
      "date": 1686378728810
    },
    {
      "type": "edit",
      "id": "77f2f1d38fdb91a0",
      "item": {
        "type": "paragraph",
        "id": "77f2f1d38fdb91a0",
        "text": "Ward via Matrix:\nFor a couple of months now we've been coding an hour or two a week on a Java program that can correctly read page json and follow its links through the federation. http://ward.dojo.fed.wiki/federation-browser-in-java.html"
      },
      "date": 1686378741738
    },
    {
      "type": "edit",
      "id": "77f2f1d38fdb91a0",
      "item": {
        "type": "paragraph",
        "id": "77f2f1d38fdb91a0",
        "text": "⇒ [[Decode JSON in Elm]]: Ward via Matrix:\nFor a couple of months now we've been coding an hour or two a week on a Java program that can correctly read page json and follow its links through the federation. http://ward.dojo.fed.wiki/federation-browser-in-java.html"
      },
      "date": 1686378753135
    },
    {
      "type": "edit",
      "id": "77f2f1d38fdb91a0",
      "item": {
        "type": "paragraph",
        "id": "77f2f1d38fdb91a0",
        "text": "⇒ [[Decode JSON in Elm]]: Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168636214571224yXOCC:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de Matrix]:\nFor a couple of months now we've been coding an hour or two a week on a Java program that can correctly read page json and follow its links through the federation. http://ward.dojo.fed.wiki/federation-browser-in-java.html"
      },
      "date": 1686378769867
    },
    {
      "item": {
        "type": "factory",
        "id": "a5bbbdf9087c9595"
      },
      "id": "a5bbbdf9087c9595",
      "type": "add",
      "after": "77f2f1d38fdb91a0",
      "date": 1686379033567
    },
    {
      "type": "edit",
      "id": "a5bbbdf9087c9595",
      "item": {
        "type": "reference",
        "id": "a5bbbdf9087c9595",
        "site": "ward.dojo.fed.wiki",
        "slug": "federation-browser-in-java",
        "title": "Federation Browser in Java",
        "text": "I challenged Jason Clark, a Java expert, to fetch and parse page json. He wrote a demonstration using modern http and object mapping libraries. [https://github.com/jasonrclark/fedwiki-java/tree/363584957b99a7a21ed2db1f64773063ea84b336 github]"
      },
      "date": 1686379039148
    },
    {
      "item": {
        "type": "factory",
        "id": "57b8440a7ef4f42a"
      },
      "id": "57b8440a7ef4f42a",
      "type": "add",
      "after": "a5bbbdf9087c9595",
      "date": 1686379063019
    },
    {
      "type": "edit",
      "id": "57b8440a7ef4f42a",
      "item": {
        "type": "reference",
        "id": "57b8440a7ef4f42a",
        "site": "wiki.ralfbarkow.ch",
        "slug": "java-wiki-content-fetcher",
        "title": "Java Wiki Content Fetcher",
        "text": "Read federated wiki pages from the internet with Java. Uses the Jackson library for JSON (locally downloaded jars) and the built-in HttpClient from JDK 11+. [https://github.com/jasonrclark/fedwiki-java github]"
      },
      "date": 1686379065305
    },
    {
      "type": "edit",
      "id": "a5bbbdf9087c9595",
      "item": {
        "type": "reference",
        "id": "a5bbbdf9087c9595",
        "site": "ward.dojo.fed.wiki",
        "slug": "federation-browser-in-java",
        "title": "Federation Browser in Java",
        "text": "Ward challenged Jason Clark, a Java expert, to fetch and parse page json. He wrote a demonstration using modern http and object mapping libraries. [https://github.com/jasonrclark/fedwiki-java/tree/363584957b99a7a21ed2db1f64773063ea84b336 github]"
      },
      "date": 1686379073238
    },
    {
      "type": "edit",
      "id": "a5bbbdf9087c9595",
      "item": {
        "type": "reference",
        "id": "a5bbbdf9087c9595",
        "site": "ward.dojo.fed.wiki",
        "slug": "federation-browser-in-java",
        "title": "Federation Browser in Java",
        "text": "Ward challenged [[Jason Clark]], a Java expert, to fetch and parse page json. He wrote a demonstration using modern http and object mapping libraries. [https://github.com/jasonrclark/fedwiki-java/tree/363584957b99a7a21ed2db1f64773063ea84b336 github]"
      },
      "date": 1686379085346
    },
    {
      "type": "edit",
      "id": "77f2f1d38fdb91a0",
      "item": {
        "type": "paragraph",
        "id": "77f2f1d38fdb91a0",
        "text": "⇒ [[Decode JSON in Elm]]: Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168636214571224yXOCC:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de Matrix]:\nFor a couple of months now we've been coding an hour or two a week on a Java program that can correctly read page json and follow its links through the federation."
      },
      "date": 1686379119068
    },
    {
      "id": "5c449fbafe66e0d9",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "5c449fbafe66e0d9",
        "text": "# fedwiki-java\nVery basics of reading a FedWiki page from Java. Uses the Jackson library for JSON (locally downloaded jars) and the built-in HttpClient from JDK 11+.\n\nTo run locally:\n```\njava \\\n  -cp jackson-core-2.14.2.jar:\\\n  jackson-annotations-2.14.2.jar:\\\n  jackson-databind-2.14.2.jar \\\n  Main.java\n```\nThis will output a cryptic looking object output but it's a start."
      },
      "after": "57b8440a7ef4f42a",
      "attribution": {
        "page": "Federation Browser in Java",
        "site": "ward.dojo.fed.wiki"
      },
      "date": 1686379228789
    },
    {
      "type": "edit",
      "id": "5c449fbafe66e0d9",
      "item": {
        "type": "markdown",
        "id": "5c449fbafe66e0d9",
        "text": "> This will output a cryptic looking object output but it's a start."
      },
      "date": 1686379239522
    },
    {
      "item": {
        "type": "factory",
        "id": "53859e347475177e"
      },
      "id": "53859e347475177e",
      "type": "add",
      "after": "5c449fbafe66e0d9",
      "date": 1686379252162
    },
    {
      "type": "edit",
      "id": "53859e347475177e",
      "item": {
        "type": "paragraph",
        "id": "53859e347475177e",
        "text": "Compare this to:"
      },
      "date": 1686379257357
    },
    {
      "type": "edit",
      "id": "53859e347475177e",
      "item": {
        "type": "paragraph",
        "id": "53859e347475177e",
        "text": "Compare this to this output:"
      },
      "date": 1686379266462
    },
    {
      "item": {
        "type": "factory",
        "id": "4f226fbedf183cad"
      },
      "id": "4f226fbedf183cad",
      "type": "add",
      "after": "53859e347475177e",
      "date": 1686379269286
    },
    {
      "item": {
        "type": "factory",
        "id": "ffd63da50ae2bf33"
      },
      "id": "ffd63da50ae2bf33",
      "type": "add",
      "after": "4f226fbedf183cad",
      "date": 1686379299223
    },
    {
      "type": "edit",
      "id": "4f226fbedf183cad",
      "item": {
        "type": "html",
        "id": "4f226fbedf183cad",
        "text": "<img\n  src = \"\"\n  width = \"100%\"\n>"
      },
      "date": 1686379300847
    },
    {
      "type": "edit",
      "id": "ffd63da50ae2bf33",
      "item": {
        "type": "code",
        "id": "ffd63da50ae2bf33",
        "text": "<img\n  src = \"\"\n  width = \"100%\"\n>"
      },
      "date": 1686379302341
    },
    {
      "type": "edit",
      "id": "4f226fbedf183cad",
      "item": {
        "type": "html",
        "id": "4f226fbedf183cad",
        "text": "<img\n  src = \"https://dreyeck.freedombox.rocks/_matrix/media/r0/download/dreyeck.freedombox.rocks/CmsBgkeezwYuMZVDqVeltTPt\"\n  width = \"100%\"\n>"
      },
      "date": 1686379316041
    },
    {
      "item": {
        "type": "factory",
        "id": "3d0c5d200752f510"
      },
      "id": "3d0c5d200752f510",
      "type": "add",
      "after": "ffd63da50ae2bf33",
      "date": 1686379329891
    },
    {
      "type": "edit",
      "id": "3d0c5d200752f510",
      "item": {
        "type": "image",
        "id": "3d0c5d200752f510",
        "text": "Current vite-elm-dojo ui",
        "size": "wide",
        "width": 419,
        "height": 220,
        "url": "/assets/plugins/image/83d0606b3ad0b7157cf3734e1f9ff418.jpg"
      },
      "date": 1686379369337
    },
    {
      "type": "remove",
      "id": "ffd63da50ae2bf33",
      "date": 1686379373998
    },
    {
      "type": "remove",
      "id": "4f226fbedf183cad",
      "date": 1686379375793
    },
    {
      "item": {
        "type": "factory",
        "id": "eb2d8e4e97f4884e"
      },
      "id": "eb2d8e4e97f4884e",
      "type": "add",
      "after": "3d0c5d200752f510",
      "date": 1686379380661
    },
    {
      "type": "edit",
      "id": "eb2d8e4e97f4884e",
      "item": {
        "type": "image",
        "id": "eb2d8e4e97f4884e",
        "text": "Elm Debugger",
        "size": "wide",
        "width": 419,
        "height": 171,
        "url": "/assets/plugins/image/feb80930806bfa88041f14380d39681f.jpg"
      },
      "date": 1686379392873
    },
    {
      "item": {
        "type": "factory",
        "id": "987f08a560e9d941"
      },
      "id": "987f08a560e9d941",
      "type": "add",
      "after": "eb2d8e4e97f4884e",
      "date": 1686379401745
    },
    {
      "type": "edit",
      "id": "987f08a560e9d941",
      "item": {
        "type": "image",
        "id": "987f08a560e9d941",
        "text": "Parsed Ghost Page (Future)",
        "size": "wide",
        "width": 419,
        "height": 253,
        "url": "/assets/plugins/image/b9dc357e57fa5b188d510b812a3d072d.jpg"
      },
      "date": 1686379418204
    },
    {
      "type": "edit",
      "id": "53859e347475177e",
      "item": {
        "type": "paragraph",
        "id": "53859e347475177e",
        "text": "Compare that to this output:"
      },
      "date": 1686379445814
    },
    {
      "type": "edit",
      "id": "53859e347475177e",
      "item": {
        "type": "paragraph",
        "id": "53859e347475177e",
        "text": "Compare that with this output:"
      },
      "date": 1686379469225
    },
    {
      "type": "edit",
      "id": "3d0c5d200752f510",
      "item": {
        "type": "image",
        "id": "3d0c5d200752f510",
        "text": "Current Vite-Elm-Dojo UI",
        "size": "wide",
        "width": 419,
        "height": 220,
        "url": "/assets/plugins/image/83d0606b3ad0b7157cf3734e1f9ff418.jpg"
      },
      "date": 1686379501720
    },
    {
      "type": "edit",
      "id": "3d0c5d200752f510",
      "item": {
        "type": "image",
        "id": "3d0c5d200752f510",
        "text": "Current vite-elm-dojo UI",
        "size": "wide",
        "width": 419,
        "height": 220,
        "url": "/assets/plugins/image/83d0606b3ad0b7157cf3734e1f9ff418.jpg"
      },
      "date": 1686379518524
    },
    {
      "type": "edit",
      "id": "3d0c5d200752f510",
      "item": {
        "type": "image",
        "id": "3d0c5d200752f510",
        "text": "Current vite-elm-dojo UI [https://github.com/RalfBarkow/vite-elm-dojo github]",
        "size": "wide",
        "width": 419,
        "height": 220,
        "url": "/assets/plugins/image/83d0606b3ad0b7157cf3734e1f9ff418.jpg"
      },
      "date": 1686379548014
    },
    {
      "type": "add",
      "id": "c572b61cf080005b",
      "item": {
        "type": "paragraph",
        "id": "c572b61cf080005b",
        "text": "I had written about this before:"
      },
      "after": "77f2f1d38fdb91a0",
      "date": 1686379615006
    },
    {
      "id": "c572b61cf080005b",
      "type": "move",
      "order": [
        "77f2f1d38fdb91a0",
        "a5bbbdf9087c9595",
        "c572b61cf080005b",
        "57b8440a7ef4f42a",
        "5c449fbafe66e0d9",
        "53859e347475177e",
        "3d0c5d200752f510",
        "eb2d8e4e97f4884e",
        "987f08a560e9d941"
      ],
      "date": 1686379616894
    },
    {
      "item": {
        "type": "factory",
        "id": "fd5182eebfb2fc89"
      },
      "id": "fd5182eebfb2fc89",
      "type": "add",
      "after": "987f08a560e9d941",
      "date": 1686379714882
    },
    {
      "type": "edit",
      "id": "fd5182eebfb2fc89",
      "item": {
        "type": "paragraph",
        "id": "fd5182eebfb2fc89",
        "text": "⇒ [[Message]]"
      },
      "date": 1686379727172
    },
    {
      "type": "edit",
      "id": "fd5182eebfb2fc89",
      "item": {
        "type": "paragraph",
        "id": "fd5182eebfb2fc89",
        "text": "⇒ [[Message]] ⇒ [[Model]]"
      },
      "date": 1686379736764
    },
    {
      "type": "edit",
      "id": "fd5182eebfb2fc89",
      "item": {
        "type": "paragraph",
        "id": "fd5182eebfb2fc89",
        "text": "⇒ [[Message]] ⇒ [[Model]] ⇒ [[Decode JSON in Elm]]"
      },
      "date": 1686381486532
    },
    {
      "type": "edit",
      "id": "fd5182eebfb2fc89",
      "item": {
        "type": "paragraph",
        "id": "fd5182eebfb2fc89",
        "text": "⇒ [[Message]] ⇒ [[Model]] ⇒ [[Decode JSON in Elm]] ⇒ [[2023-06-09]] ⇒ Next: … ⇒ [[Track Successes and Failures]]"
      },
      "date": 1686381565898
    },
    {
      "type": "edit",
      "id": "fd5182eebfb2fc89",
      "item": {
        "type": "paragraph",
        "id": "fd5182eebfb2fc89",
        "text": "⇒ [[Message]] ⇒ [[Model]] ⇒ [[Decode JSON in Elm]] ⇒ [[2023-06-09]] ⇒ Next: … ⇒ [[Track Successes and Failures]]"
      },
      "date": 1686381580355
    },
    {
      "type": "edit",
      "id": "fd5182eebfb2fc89",
      "item": {
        "type": "paragraph",
        "id": "fd5182eebfb2fc89",
        "text": "⇒ [[Message]] ⇒ [[Model]] ⇒ [[Decode JSON in Elm]] ⇒ [[2023-06-09]] ⇒ Next: … ⇒ [[Track Successes and Failures]]"
      },
      "date": 1686381613875
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a4cd755ca1abea46",
        "text": "The code you provided: (ChatGPT May 24 Version)"
      },
      "id": "a4cd755ca1abea46",
      "type": "add",
      "after": "fd5182eebfb2fc89",
      "date": 1686388758174
    },
    {
      "type": "edit",
      "id": "a4cd755ca1abea46",
      "item": {
        "type": "paragraph",
        "id": "a4cd755ca1abea46",
        "text": "The code you provided: (ChatGPT May 24 Version)"
      },
      "date": 1686388760163
    },
    {
      "type": "edit",
      "id": "a4cd755ca1abea46",
      "item": {
        "type": "paragraph",
        "id": "a4cd755ca1abea46",
        "text": "The code you provided: (ChatGPT May 24 Version)"
      },
      "date": 1686388770264
    },
    {
      "item": {
        "type": "code",
        "id": "7f775d2953edb79a",
        "text": "storyDecoder : Decode.Decoder Story\nstoryDecoder =\n    Decode.oneOf\n        [ Decode.map Future futureEventDecoder\n        , Decode.map Snippet storySnippetDecoder\n        , Decode.map AddFactory factoryItemDecoder\n        , Decode.map (\\_ -> EmptyStory) (Decode.succeed EmptyStory)\n        ]\n"
      },
      "id": "7f775d2953edb79a",
      "type": "add",
      "after": "a4cd755ca1abea46",
      "date": 1686388777626
    },
    {
      "type": "edit",
      "id": "7f775d2953edb79a",
      "item": {
        "type": "code",
        "id": "7f775d2953edb79a",
        "text": "storyDecoder : Decode.Decoder Story\nstoryDecoder =\n    Decode.oneOf\n        [ Decode.map Future futureEventDecoder\n        , Decode.map Snippet storySnippetDecoder\n        , Decode.map AddFactory factoryItemDecoder\n        , Decode.map (\\_ -> EmptyStory) (Decode.succeed EmptyStory)\n        ]\n"
      },
      "date": 1686388781101
    },
    {
      "item": {
        "type": "paragraph",
        "id": "d6c230d5b4ec2345",
        "text": "is a great example of using Decode.oneOf to analyze the Journal data and decode it into a Story type. In this case, the [[Story]] type seems to represent different types of events that can occur in a journal. […]"
      },
      "id": "d6c230d5b4ec2345",
      "type": "add",
      "after": "7f775d2953edb79a",
      "date": 1686388839861
    },
    {
      "type": "edit",
      "id": "d6c230d5b4ec2345",
      "item": {
        "type": "paragraph",
        "id": "d6c230d5b4ec2345",
        "text": "is a great example of using Decode.oneOf to analyze the Journal data and decode it into a Story type. In this case, the [[Story]] type seems to represent different types of events that can occur in a journal. […]"
      },
      "date": 1686388841428
    },
    {
      "type": "edit",
      "id": "d6c230d5b4ec2345",
      "item": {
        "type": "paragraph",
        "id": "d6c230d5b4ec2345",
        "text": "is a great example of using Decode.oneOf to analyze the Journal data and decode it into a Story type. In this case, the [[Story]] type seems to represent different types of events that can occur in a journal. […]"
      },
      "date": 1686388846375
    },
    {
      "type": "edit",
      "id": "d6c230d5b4ec2345",
      "item": {
        "type": "paragraph",
        "id": "d6c230d5b4ec2345",
        "text": "is a great example of using Decode.oneOf to analyze the Journal data and decode it into a Story type. In this case, the [[Story]] type seems to represent different types of events that can occur in a journal. […]"
      },
      "date": 1686388857226
    },
    {
      "item": {
        "type": "paragraph",
        "id": "213de0ff9cf3665f",
        "text": ""
      },
      "id": "213de0ff9cf3665f",
      "type": "add",
      "after": "d6c230d5b4ec2345",
      "date": 1686388919490
    },
    {
      "type": "edit",
      "id": "d6c230d5b4ec2345",
      "item": {
        "type": "paragraph",
        "id": "d6c230d5b4ec2345",
        "text": "is a great example of using Decode.oneOf to analyze the Journal data and decode it into a Story type. In this case, the [[Story]] type seems to represent different types of events that can occur in a journal. […]"
      },
      "date": 1686388920841
    },
    {
      "type": "edit",
      "id": "213de0ff9cf3665f",
      "item": {
        "type": "paragraph",
        "id": "213de0ff9cf3665f",
        "text": ""
      },
      "date": 1686388925335
    },
    {
      "type": "add",
      "id": "aa507998bc94f1a0",
      "item": {
        "type": "paragraph",
        "id": "aa507998bc94f1a0",
        "text": "No, the [[Journal]] type records different types of events that occur in the Story."
      },
      "after": "213de0ff9cf3665f",
      "date": 1686388952599
    },
    {
      "type": "edit",
      "id": "aa507998bc94f1a0",
      "item": {
        "type": "paragraph",
        "id": "aa507998bc94f1a0",
        "text": "No, the [[Journal]] type records different types of events that occur in the Story."
      },
      "date": 1686388974295
    },
    {
      "type": "edit",
      "id": "aa507998bc94f1a0",
      "item": {
        "type": "paragraph",
        "id": "aa507998bc94f1a0",
        "text": "No, the [[Journal]] type records different types of events that occur in the Story."
      },
      "date": 1686389049724
    },
    {
      "type": "remove",
      "id": "213de0ff9cf3665f",
      "date": 1686389144363
    },
    {
      "item": {
        "type": "paragraph",
        "id": "725a3a38fda060c6",
        "text": "The [[Journal]] type records different types of events that occur in the story. By playing the journal step by step, we can time travel through the different versions of the story. What might a user interface look like in Elm Code that can replay the history of the story like the Elm Debugger?"
      },
      "id": "725a3a38fda060c6",
      "type": "add",
      "after": "aa507998bc94f1a0",
      "date": 1686389315379
    },
    {
      "type": "edit",
      "id": "725a3a38fda060c6",
      "item": {
        "type": "paragraph",
        "id": "725a3a38fda060c6",
        "text": "The [[Journal]] type records different types of events that occur in the story. By playing the journal step by step, we can time travel through the different versions of the story. What might a user interface look like in Elm Code that can replay the history of the story like the Elm Debugger?"
      },
      "date": 1686389317985
    },
    {
      "type": "edit",
      "id": "725a3a38fda060c6",
      "item": {
        "type": "paragraph",
        "id": "725a3a38fda060c6",
        "text": "The [[Journal]] type records different types of events that occur in the story. By playing the journal step by step, we can time travel through the different versions of the story. What might a user interface look like in Elm Code that can replay the history of the story like the Elm Debugger?"
      },
      "date": 1686389324827
    },
    {
      "item": {
        "type": "paragraph",
        "id": "f46f6f64d238761c",
        "text": "To create a UI in Elm that allows you to replay the history of the Story, similar to the Elm Debugger, you can leverage the Elm architecture and build a time-traveling feature. Here's a high-level overview of how the UI could be structured: (ChatGPT May 24 Version)"
      },
      "id": "f46f6f64d238761c",
      "type": "add",
      "after": "725a3a38fda060c6",
      "date": 1686389379279
    },
    {
      "type": "edit",
      "id": "f46f6f64d238761c",
      "item": {
        "type": "paragraph",
        "id": "f46f6f64d238761c",
        "text": "To create a UI in Elm that allows you to replay the history of the Story, similar to the Elm Debugger, you can leverage the Elm architecture and build a time-traveling feature. Here's a high-level overview of how the UI could be structured: (ChatGPT May 24 Version)"
      },
      "date": 1686389381655
    },
    {
      "type": "edit",
      "id": "f46f6f64d238761c",
      "item": {
        "type": "paragraph",
        "id": "f46f6f64d238761c",
        "text": "To create a UI in Elm that allows you to replay the history of the Story, similar to the Elm Debugger, you can leverage the Elm architecture and build a time-traveling feature. Here's a high-level overview of how the UI could be structured: (ChatGPT May 24 Version)"
      },
      "date": 1686389393166
    },
    {
      "type": "add",
      "id": "700babaa05808121",
      "item": {
        "type": "paragraph",
        "id": "700babaa05808121",
        "text": "1. [[Model]]: The model of your application would include the current state of the Story, as well as the list of Journal events that make up its history. You might also need additional fields to keep track of the current step in the replay and control the playback speed."
      },
      "after": "f46f6f64d238761c",
      "date": 1686389414094
    },
    {
      "type": "add",
      "id": "b4ad503aee4e09c9",
      "item": {
        "type": "paragraph",
        "id": "b4ad503aee4e09c9",
        "text": "2. [[View]]: The view function would render the current state of the Story to the user interface. You can display the content of the Story along with any other relevant information. Additionally, you'll need playback controls such as play, pause, step forward, and step backward buttons."
      },
      "after": "700babaa05808121",
      "date": 1686389450198
    },
    {
      "type": "add",
      "id": "dabb1ad8059f5625",
      "item": {
        "type": "paragraph",
        "id": "dabb1ad8059f5625",
        "text": "3. [[Update]]: The update function would handle the different messages triggered by user interactions. You'll need messages for controlling the playback, such as play, pause, step forward, and step backward. When a message is received, you can update the model accordingly, adjusting the current step in the replay or changing the playback speed."
      },
      "after": "b4ad503aee4e09c9",
      "date": 1686389474004
    },
    {
      "type": "edit",
      "id": "dabb1ad8059f5625",
      "item": {
        "type": "paragraph",
        "id": "dabb1ad8059f5625",
        "text": "3. [[Update]]: The update function would handle the different messages triggered by user interactions. You'll need messages for controlling the playback, such as play, pause, step forward, and step backward. When a message is received, you can update the model accordingly, adjusting the current step in the replay or changing the playback speed."
      },
      "date": 1686389490679
    },
    {
      "type": "add",
      "id": "4eec78feca16e414",
      "item": {
        "type": "paragraph",
        "id": "4eec78feca16e414",
        "text": "4. [[Subscriptions]]: You can use subscriptions to control the playback speed. For example, you can set up a subscription that emits a message every few milliseconds to step forward in the replay, allowing for smooth animation of the Story's history."
      },
      "after": "dabb1ad8059f5625",
      "date": 1686389507376
    },
    {
      "item": {
        "type": "paragraph",
        "id": "8a9497d80081dbc8",
        "text": "5. [[Time Travel]]: To implement time travel, you can use a combination of the Journal events and the current step in the replay. When the user clicks on the step forward or step backward buttons, you can update the model to reflect the corresponding step in the replay and use that information to display the appropriate version of the Story.\n"
      },
      "id": "8a9497d80081dbc8",
      "type": "add",
      "after": "4eec78feca16e414",
      "date": 1686389524291
    },
    {
      "type": "edit",
      "id": "8a9497d80081dbc8",
      "item": {
        "type": "paragraph",
        "id": "8a9497d80081dbc8",
        "text": "5. [[Time Travel]]: To implement time travel, you can use a combination of the Journal events and the current step in the replay. When the user clicks on the step forward or step backward buttons, you can update the model to reflect the corresponding step in the replay and use that information to display the appropriate version of the Story.\n"
      },
      "date": 1686389535808
    },
    {
      "type": "add",
      "id": "291579fd82ec7a65",
      "item": {
        "type": "paragraph",
        "id": "291579fd82ec7a65",
        "text": "By implementing the above structure, you can create a UI that allows the user to replay the history of the Story by stepping through the Journal events. With the playback controls and time travel functionality, users can interactively explore the different versions of the Story, similar to the experience provided by the [[Elm Debugger]]."
      },
      "after": "8a9497d80081dbc8",
      "date": 1686389566516
    },
    {
      "type": "add",
      "id": "f681b892c978ddca",
      "item": {
        "type": "paragraph",
        "id": "f681b892c978ddca",
        "text": "The model might include fields such as currentStory to store the current version of the story, journal to store the list of events, and currentIndex to keep track of the current position in the journal. [⇒ [[Track Successes and Failures]]]"
      },
      "after": "700babaa05808121",
      "date": 1686389648883
    },
    {
      "type": "edit",
      "id": "f681b892c978ddca",
      "item": {
        "type": "paragraph",
        "id": "f681b892c978ddca",
        "text": "The model might include fields such as currentStory to store the current version of the story, journal to store the list of events, and currentIndex to keep track of the current position in the journal. [⇒ [[Track Successes and Failures]]]"
      },
      "date": 1686389687077
    },
    {
      "item": {
        "type": "pagefold",
        "id": "d73c377da4471ed8",
        "text": "~"
      },
      "id": "d73c377da4471ed8",
      "type": "add",
      "after": "291579fd82ec7a65",
      "date": 1686390337793
    },
    {
      "type": "edit",
      "id": "d73c377da4471ed8",
      "item": {
        "type": "pagefold",
        "id": "d73c377da4471ed8",
        "text": "~"
      },
      "date": 1686390340633
    },
    {
      "item": {
        "type": "code",
        "id": "104bdfb861357f9a",
        "text": "storyDecoder : Decode.Decoder Story\nstoryDecoder =\n    Decode.oneOf\n        [ Decode.map Future futureEventDecoder\n        , Decode.map Snippet storySnippetDecoder\n\n        --  , Decode.map AddFactory factoryItemDecoder\n        , Decode.map (\\_ -> EmptyStory) (Decode.succeed EmptyStory)\n        ]"
      },
      "id": "104bdfb861357f9a",
      "type": "add",
      "after": "d73c377da4471ed8",
      "date": 1686390342027
    },
    {
      "type": "edit",
      "id": "104bdfb861357f9a",
      "item": {
        "type": "code",
        "id": "104bdfb861357f9a",
        "text": "storyDecoder : Decode.Decoder Story\nstoryDecoder =\n    Decode.oneOf\n        [ Decode.map Future futureEventDecoder\n        , Decode.map Snippet storySnippetDecoder\n\n        --  , Decode.map AddFactory factoryItemDecoder\n        , Decode.map (\\_ -> EmptyStory) (Decode.succeed EmptyStory)\n        ]"
      },
      "date": 1686390344437
    },
    {
      "item": {
        "type": "paragraph",
        "id": "61333b72b63c5129",
        "text": "Based on the failure you encountered, it seems that uncommenting the line Decode.map AddFactory factoryItemDecoder in your storyDecoder introduces a failing test case in elm-test. The specific test case that fails is the one related to the \"Add Factory\" scenario. (ChatGPT May 24 Version)"
      },
      "id": "61333b72b63c5129",
      "type": "add",
      "after": "104bdfb861357f9a",
      "date": 1686390356757
    },
    {
      "type": "edit",
      "id": "61333b72b63c5129",
      "item": {
        "type": "paragraph",
        "id": "61333b72b63c5129",
        "text": "Based on the failure you encountered, it seems that uncommenting the line Decode.map AddFactory factoryItemDecoder in your storyDecoder introduces a failing test case in elm-test. The specific test case that fails is the one related to the \"Add Factory\" scenario. (ChatGPT May 24 Version)"
      },
      "date": 1686390373075
    },
    {
      "type": "edit",
      "id": "61333b72b63c5129",
      "item": {
        "type": "paragraph",
        "id": "61333b72b63c5129",
        "text": "Based on the failure you encountered, it seems that uncommenting the line Decode.map AddFactory factoryItemDecoder in your storyDecoder introduces a failing test case in elm-test. The specific test case that fails is the one related to the \"Add Factory\" scenario. (ChatGPT May 24 Version)"
      },
      "date": 1686390385325
    },
    {
      "type": "add",
      "id": "9d5d0554f4c4ab32",
      "item": {
        "type": "paragraph",
        "id": "9d5d0554f4c4ab32",
        "text": "The failure message indicates a mismatch between the expected and actual values. It shows that the expected value has a story field containing [AddFactory { id = \"d1493b7d30cfab68\", type_ = \"factory\" }], while the actual value has an EmptyStory in the story field."
      },
      "after": "61333b72b63c5129",
      "date": 1686390404965
    },
    {
      "type": "edit",
      "id": "9d5d0554f4c4ab32",
      "item": {
        "type": "paragraph",
        "id": "9d5d0554f4c4ab32",
        "text": "The failure message indicates a mismatch between the expected and actual values. It shows that the expected value has a story field containing [AddFactory { id = \"d1493b7d30cfab68\", type_ = \"factory\" }], while the actual value has an EmptyStory in the story field."
      },
      "date": 1686390445844
    },
    {
      "type": "add",
      "id": "fa537f87032fd5e9",
      "item": {
        "type": "paragraph",
        "id": "fa537f87032fd5e9",
        "text": "This suggests that the decoding process for the \"Add Factory\" scenario is not producing the expected result. There could be a problem with the factoryItemDecoder or the way it interacts with the other decoders in your pipeline."
      },
      "after": "9d5d0554f4c4ab32",
      "date": 1686390447825
    },
    {
      "type": "edit",
      "id": "fa537f87032fd5e9",
      "item": {
        "type": "paragraph",
        "id": "fa537f87032fd5e9",
        "text": "This suggests that the decoding process for the \"Add Factory\" scenario is not producing the expected result. There could be a problem with the factoryItemDecoder or the way it interacts with the other decoders in your pipeline."
      },
      "date": 1686390464570
    },
    {
      "type": "add",
      "id": "384dd899b32e9704",
      "item": {
        "type": "paragraph",
        "id": "384dd899b32e9704",
        "text": "To troubleshoot and fix this issue, you can review the implementation of the factoryItemDecoder and ensure that it correctly handles the JSON input for the \"Add Factory\" scenario. Pay attention to the structure and field names in the JSON data and make sure they match the corresponding Elm types and field names."
      },
      "after": "fa537f87032fd5e9",
      "date": 1686390466025
    },
    {
      "type": "add",
      "id": "4f41e87c1b8c7cd0",
      "item": {
        "type": "paragraph",
        "id": "4f41e87c1b8c7cd0",
        "text": "Additionally, you may want to examine the structure of your test data and ensure it aligns with the expectations of your decoders. Verify that the JSON input used in the failing test case accurately represents the \"Add Factory\" scenario."
      },
      "after": "384dd899b32e9704",
      "date": 1686390478089
    },
    {
      "type": "add",
      "id": "ae53c8f5d9688091",
      "item": {
        "type": "paragraph",
        "id": "ae53c8f5d9688091",
        "text": "By investigating and addressing these potential issues, you should be able to resolve the test failure and ensure that the decoding process works as expected for the \"Add Factory\" scenario."
      },
      "after": "4f41e87c1b8c7cd0",
      "date": 1686390485240
    },
    {
      "type": "fork",
      "date": 1686390671641
    },
    {
      "item": {
        "type": "factory",
        "id": "69bf4ff9730a039e"
      },
      "id": "69bf4ff9730a039e",
      "type": "add",
      "after": "ae53c8f5d9688091",
      "date": 1686391270577
    },
    {
      "type": "edit",
      "id": "69bf4ff9730a039e",
      "item": {
        "type": "pagefold",
        "id": "69bf4ff9730a039e",
        "text": "~"
      },
      "date": 1686391274332
    },
    {
      "item": {
        "type": "factory",
        "id": "5550c1609f7bde9e"
      },
      "id": "5550c1609f7bde9e",
      "type": "add",
      "after": "69bf4ff9730a039e",
      "date": 1686391277416
    },
    {
      "type": "edit",
      "id": "5550c1609f7bde9e",
      "item": {
        "type": "paragraph",
        "id": "5550c1609f7bde9e",
        "text": "add paragraph"
      },
      "date": 1686391282427
    },
    {
      "item": {
        "type": "factory",
        "id": "665ab46ab01bdfbc"
      },
      "id": "665ab46ab01bdfbc",
      "type": "add",
      "after": "ebdec2ae026ba812",
      "date": 1686391341526
    },
    {
      "type": "add",
      "id": "ebdec2ae026ba812",
      "item": {
        "type": "paragraph",
        "id": "ebdec2ae026ba812",
        "text": "We have "
      },
      "after": "5550c1609f7bde9e",
      "date": 1686391342740
    },
    {
      "type": "edit",
      "id": "665ab46ab01bdfbc",
      "item": {
        "type": "code",
        "id": "665ab46ab01bdfbc",
        "text": "addEventDecoder : Decode.Decoder AddEvent\naddEventDecoder =\n    Decode.map4 AddEvent\n        (Decode.field \"item\" factoryItemDecoder)\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"type\" Decode.string)\n        (Decode.field \"date\" Decode.int)"
      },
      "date": 1686391343412
    },
    {
      "item": {
        "type": "factory",
        "id": "13ce277da7688268"
      },
      "id": "13ce277da7688268",
      "type": "add",
      "after": "665ab46ab01bdfbc",
      "date": 1686391364978
    },
    {
      "type": "edit",
      "id": "13ce277da7688268",
      "item": {
        "type": "paragraph",
        "id": "13ce277da7688268",
        "text": "and"
      },
      "date": 1686391367110
    },
    {
      "type": "add",
      "id": "27f5ab648a40e96f",
      "item": {
        "type": "paragraph",
        "id": "27f5ab648a40e96f",
        "text": "paragraphItemDecoder : Decode.Decoder ParagraphItemAlias\nparagraphItemDecoder =\n    Decode.map3 ParagraphItemAlias\n        (Decode.field \"type\" Decode.string)\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"text\" Decode.string)"
      },
      "after": "13ce277da7688268",
      "date": 1686391373780
    },
    {
      "item": {
        "type": "factory",
        "id": "d7b4ea62b533cb4f"
      },
      "id": "d7b4ea62b533cb4f",
      "type": "add",
      "after": "27f5ab648a40e96f",
      "date": 1686391377605
    },
    {
      "type": "edit",
      "id": "d7b4ea62b533cb4f",
      "item": {
        "type": "code",
        "id": "d7b4ea62b533cb4f",
        "text": "paragraphItemDecoder : Decode.Decoder ParagraphItemAlias\nparagraphItemDecoder =\n    Decode.map3 ParagraphItemAlias\n        (Decode.field \"type\" Decode.string)\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"text\" Decode.string)"
      },
      "date": 1686391379959
    },
    {
      "type": "remove",
      "id": "27f5ab648a40e96f",
      "date": 1686391382772
    },
    {
      "item": {
        "type": "factory",
        "id": "7d83b0287b0c1704"
      },
      "id": "7d83b0287b0c1704",
      "type": "add",
      "after": "d7b4ea62b533cb4f",
      "date": 1686391711830
    },
    {
      "type": "edit",
      "id": "7d83b0287b0c1704",
      "item": {
        "type": "paragraph",
        "id": "7d83b0287b0c1704",
        "text": "Idea: DSL for describing expectedJson in the WikiSpec.elm test cases."
      },
      "date": 1686391745303
    },
    {
      "type": "add",
      "id": "dee81845e8e9771a",
      "item": {
        "type": "paragraph",
        "id": "dee81845e8e9771a",
        "text": "Using a DSL (Domain-Specific Language) to describe the expected JSON in your test cases can be a useful approach. It can provide a more readable and expressive way to specify the expected JSON structure and values, making your tests easier to understand and maintain. "
      },
      "after": "7d83b0287b0c1704",
      "date": 1686391802051
    },
    {
      "type": "edit",
      "id": "dee81845e8e9771a",
      "item": {
        "type": "paragraph",
        "id": "dee81845e8e9771a",
        "text": "Using a DSL (Domain-Specific Language) to describe the expected JSON in your test cases can be a useful approach. It can provide a more readable and expressive way to specify the expected JSON structure and values, making your tests easier to understand and maintain. (ChatGPT May 24 Version)"
      },
      "date": 1686391809857
    },
    {
      "type": "add",
      "id": "86fb9e6983c601c0",
      "item": {
        "type": "paragraph",
        "id": "86fb9e6983c601c0",
        "text": "Here's an example of how you could create a DSL for describing the expected JSON structure:"
      },
      "after": "dee81845e8e9771a",
      "date": 1686391826973
    },
    {
      "type": "add",
      "id": "6175cef700274012",
      "item": {
        "type": "paragraph",
        "id": "6175cef700274012",
        "text": "1. Define a custom type to represent the DSL expressions:"
      },
      "after": "86fb9e6983c601c0",
      "date": 1686391835407
    },
    {
      "item": {
        "type": "factory",
        "id": "da00c80a6efde6c0"
      },
      "id": "da00c80a6efde6c0",
      "type": "add",
      "after": "6175cef700274012",
      "date": 1686391839147
    },
    {
      "type": "edit",
      "id": "da00c80a6efde6c0",
      "item": {
        "type": "code",
        "id": "da00c80a6efde6c0",
        "text": "type ExpectedJson\n    = Field String ExpectedJson\n    | List ExpectedJson\n    | Value Json.Encode.Value\n"
      },
      "date": 1686391840968
    },
    {
      "item": {
        "type": "factory",
        "id": "c02dcc2ef308f1a7"
      },
      "id": "c02dcc2ef308f1a7",
      "type": "add",
      "after": "da00c80a6efde6c0",
      "date": 1686391852721
    },
    {
      "type": "edit",
      "id": "c02dcc2ef308f1a7",
      "item": {
        "type": "paragraph",
        "id": "c02dcc2ef308f1a7",
        "text": "2. Create helper functions to construct DSL expressions:"
      },
      "date": 1686391855549
    },
    {
      "item": {
        "type": "factory",
        "id": "0a462fe139b4411d"
      },
      "id": "0a462fe139b4411d",
      "type": "add",
      "after": "c02dcc2ef308f1a7",
      "date": 1686391860169
    },
    {
      "type": "edit",
      "id": "0a462fe139b4411d",
      "item": {
        "type": "code",
        "id": "0a462fe139b4411d",
        "text": "field : String -> ExpectedJson -> ExpectedJson\nfield fieldName expectedJson =\n    Field fieldName expectedJson\n\nlist : List ExpectedJson -> ExpectedJson\nlist expectedJsonList =\n    List expectedJsonList\n\nvalue : Json.Encode.Value -> ExpectedJson\nvalue jsonValue =\n    Value jsonValue\n"
      },
      "date": 1686391861875
    },
    {
      "item": {
        "type": "factory",
        "id": "66a969087d92a914"
      },
      "id": "66a969087d92a914",
      "type": "add",
      "after": "0a462fe139b4411d",
      "date": 1686391869746
    },
    {
      "type": "edit",
      "id": "66a969087d92a914",
      "item": {
        "type": "paragraph",
        "id": "66a969087d92a914",
        "text": "3. Write a function to validate the expected JSON using the DSL:"
      },
      "date": 1686391873440
    },
    {
      "item": {
        "type": "factory",
        "id": "603913fa1dc39b17"
      },
      "id": "603913fa1dc39b17",
      "type": "add",
      "after": "66a969087d92a914",
      "date": 1686391880085
    },
    {
      "type": "edit",
      "id": "603913fa1dc39b17",
      "item": {
        "type": "code",
        "id": "603913fa1dc39b17",
        "text": "validateJson : ExpectedJson -> Decode.Value -> Bool\nvalidateJson expectedJson actualJson =\n    -- Implement the validation logic comparing the DSL expression with the actual JSON\n"
      },
      "date": 1686391883991
    },
    {
      "item": {
        "type": "factory",
        "id": "03b807af240a7438"
      },
      "id": "03b807af240a7438",
      "type": "add",
      "after": "603913fa1dc39b17",
      "date": 1686391892571
    },
    {
      "type": "edit",
      "id": "03b807af240a7438",
      "item": {
        "type": "paragraph",
        "id": "03b807af240a7438",
        "text": "With this DSL, you can now describe the expected JSON structure and values in a more readable manner. Here's an example usage:"
      },
      "date": 1686391894006
    },
    {
      "item": {
        "type": "factory",
        "id": "7f5ed4c951ac6a52"
      },
      "id": "7f5ed4c951ac6a52",
      "type": "add",
      "after": "03b807af240a7438",
      "date": 1686391899637
    },
    {
      "type": "remove",
      "id": "7f5ed4c951ac6a52",
      "date": 1686391903397
    },
    {
      "item": {
        "type": "factory",
        "id": "e83db3280f1866a4"
      },
      "id": "e83db3280f1866a4",
      "type": "add",
      "after": "03b807af240a7438",
      "date": 1686391904550
    },
    {
      "type": "edit",
      "id": "e83db3280f1866a4",
      "item": {
        "type": "code",
        "id": "e83db3280f1866a4",
        "text": "expectedJson : ExpectedJson\nexpectedJson =\n    field \"id\" (value (Json.Encode.string \"123\"))\n        |> field \"name\" (value (Json.Encode.string \"John Doe\"))\n        |> field \"age\" (value (Json.Encode.int 25))\n        |> field \"tags\" (list [ value (Json.Encode.string \"tag1\")\n                              , value (Json.Encode.string \"tag2\")\n                              ])\n\nactualJson : Decode.Value\nactualJson =\n    -- JSON obtained from decoding\n\ntest : Bool\ntest =\n    validateJson expectedJson actualJson\n"
      },
      "date": 1686391906346
    },
    {
      "item": {
        "type": "factory",
        "id": "a417cf6d95ac7a7f"
      },
      "id": "a417cf6d95ac7a7f",
      "type": "add",
      "after": "e83db3280f1866a4",
      "date": 1686391914585
    },
    {
      "type": "edit",
      "id": "a417cf6d95ac7a7f",
      "item": {
        "type": "paragraph",
        "id": "a417cf6d95ac7a7f",
        "text": "By using this DSL, you can have a clear and expressive representation of the expected JSON structure in your test cases. It allows you to focus on the structure and values you expect, making it easier to write and maintain your tests."
      },
      "date": 1686391916413
    },
    {
      "id": "ebdec2ae026ba812",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396415712
    },
    {
      "id": "665ab46ab01bdfbc",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396420495
    },
    {
      "id": "13ce277da7688268",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396424114
    },
    {
      "id": "d7b4ea62b533cb4f",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396426543
    },
    {
      "id": "7d83b0287b0c1704",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396430235
    },
    {
      "id": "dee81845e8e9771a",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396431811
    },
    {
      "id": "86fb9e6983c601c0",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396434839
    },
    {
      "id": "6175cef700274012",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396436637
    },
    {
      "id": "da00c80a6efde6c0",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396465719
    },
    {
      "id": "c02dcc2ef308f1a7",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396468137
    },
    {
      "id": "0a462fe139b4411d",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396469780
    },
    {
      "id": "66a969087d92a914",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396472627
    },
    {
      "id": "603913fa1dc39b17",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396475100
    },
    {
      "id": "03b807af240a7438",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396478048
    },
    {
      "id": "e83db3280f1866a4",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396480164
    },
    {
      "id": "a417cf6d95ac7a7f",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396483491
    },
    {
      "id": "5550c1609f7bde9e",
      "type": "remove",
      "removedTo": {
        "page": "Scratch Pad"
      },
      "date": 1686396488476
    },
    {
      "item": {
        "type": "factory",
        "id": "eebd8051ba9c7f41"
      },
      "id": "eebd8051ba9c7f41",
      "type": "add",
      "after": "69bf4ff9730a039e",
      "date": 1686396579756
    },
    {
      "type": "edit",
      "id": "eebd8051ba9c7f41",
      "item": {
        "type": "paragraph",
        "id": "eebd8051ba9c7f41",
        "text": "⇒ [[scratch]]"
      },
      "date": 1686396590679
    },
    {
      "id": "ebdec2ae026ba812",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ebdec2ae026ba812",
        "text": "We have "
      },
      "after": "eebd8051ba9c7f41",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396616873
    },
    {
      "id": "665ab46ab01bdfbc",
      "type": "add",
      "item": {
        "type": "code",
        "id": "665ab46ab01bdfbc",
        "text": "addEventDecoder : Decode.Decoder AddEvent\naddEventDecoder =\n    Decode.map4 AddEvent\n        (Decode.field \"item\" factoryItemDecoder)\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"type\" Decode.string)\n        (Decode.field \"date\" Decode.int)"
      },
      "after": "ebdec2ae026ba812",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396633802
    },
    {
      "id": "13ce277da7688268",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "13ce277da7688268",
        "text": "and"
      },
      "after": "665ab46ab01bdfbc",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396636444
    },
    {
      "id": "d7b4ea62b533cb4f",
      "type": "add",
      "item": {
        "type": "code",
        "id": "d7b4ea62b533cb4f",
        "text": "paragraphItemDecoder : Decode.Decoder ParagraphItemAlias\nparagraphItemDecoder =\n    Decode.map3 ParagraphItemAlias\n        (Decode.field \"type\" Decode.string)\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"text\" Decode.string)"
      },
      "after": "665ab46ab01bdfbc",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396641691
    },
    {
      "id": "5550c1609f7bde9e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5550c1609f7bde9e",
        "text": "add paragraph"
      },
      "after": "eebd8051ba9c7f41",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396673898
    },
    {
      "id": "13ce277da7688268",
      "type": "move",
      "order": [
        "77f2f1d38fdb91a0",
        "a5bbbdf9087c9595",
        "c572b61cf080005b",
        "57b8440a7ef4f42a",
        "5c449fbafe66e0d9",
        "53859e347475177e",
        "3d0c5d200752f510",
        "eb2d8e4e97f4884e",
        "987f08a560e9d941",
        "fd5182eebfb2fc89",
        "a4cd755ca1abea46",
        "7f775d2953edb79a",
        "d6c230d5b4ec2345",
        "aa507998bc94f1a0",
        "725a3a38fda060c6",
        "f46f6f64d238761c",
        "700babaa05808121",
        "f681b892c978ddca",
        "b4ad503aee4e09c9",
        "dabb1ad8059f5625",
        "4eec78feca16e414",
        "8a9497d80081dbc8",
        "291579fd82ec7a65",
        "d73c377da4471ed8",
        "104bdfb861357f9a",
        "61333b72b63c5129",
        "9d5d0554f4c4ab32",
        "fa537f87032fd5e9",
        "384dd899b32e9704",
        "4f41e87c1b8c7cd0",
        "ae53c8f5d9688091",
        "69bf4ff9730a039e",
        "eebd8051ba9c7f41",
        "5550c1609f7bde9e",
        "ebdec2ae026ba812",
        "665ab46ab01bdfbc",
        "13ce277da7688268",
        "d7b4ea62b533cb4f"
      ],
      "date": 1686396678803
    },
    {
      "item": {
        "type": "factory",
        "id": "8e0fa69c9ccc58ac"
      },
      "id": "8e0fa69c9ccc58ac",
      "type": "add",
      "after": "d7b4ea62b533cb4f",
      "date": 1686396740323
    },
    {
      "type": "edit",
      "id": "8e0fa69c9ccc58ac",
      "item": {
        "type": "paragraph",
        "id": "8e0fa69c9ccc58ac",
        "text": "Idea: DSL for describing expectedJson in the WikiSpec.elm test cases."
      },
      "date": 1686396744439
    },
    {
      "type": "add",
      "id": "fc243bb6de28b469",
      "item": {
        "type": "paragraph",
        "id": "fc243bb6de28b469",
        "text": "Using a DSL (Domain-Specific Language) to describe the expected JSON in your test cases can be a useful approach. It can provide a more readable and expressive way to specify the expected JSON structure and values, making your tests easier to understand and maintain."
      },
      "after": "8e0fa69c9ccc58ac",
      "date": 1686396758596
    },
    {
      "type": "edit",
      "id": "fc243bb6de28b469",
      "item": {
        "type": "paragraph",
        "id": "fc243bb6de28b469",
        "text": "Using a DSL (Domain-Specific Language) to describe the expected JSON in your test cases can be a useful approach. It can provide a more readable and expressive way to specify the expected JSON structure and values, making your tests easier to understand and maintain. (ChatGPT May 24 Version)"
      },
      "date": 1686396766082
    },
    {
      "id": "86fb9e6983c601c0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "86fb9e6983c601c0",
        "text": "Here's an example of how you could create a DSL for describing the expected JSON structure:"
      },
      "after": "fc243bb6de28b469",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396810024
    },
    {
      "id": "6175cef700274012",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6175cef700274012",
        "text": "1. Define a custom type to represent the DSL expressions:"
      },
      "after": "86fb9e6983c601c0",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396811879
    },
    {
      "item": {
        "type": "factory",
        "id": "30d2b32ceb82cdf7"
      },
      "id": "30d2b32ceb82cdf7",
      "type": "add",
      "after": "6175cef700274012",
      "date": 1686396839564
    },
    {
      "type": "edit",
      "id": "30d2b32ceb82cdf7",
      "item": {
        "type": "code",
        "id": "30d2b32ceb82cdf7",
        "text": "type ExpectedJson\n    = Field String ExpectedJson\n    | List ExpectedJson\n    | Value Json.Encode.Value\n"
      },
      "date": 1686396842494
    },
    {
      "id": "c02dcc2ef308f1a7",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c02dcc2ef308f1a7",
        "text": "2. Create helper functions to construct DSL expressions:"
      },
      "after": "30d2b32ceb82cdf7",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396848970
    },
    {
      "id": "0a462fe139b4411d",
      "type": "add",
      "item": {
        "type": "code",
        "id": "0a462fe139b4411d",
        "text": "field : String -> ExpectedJson -> ExpectedJson\nfield fieldName expectedJson =\n    Field fieldName expectedJson\n\nlist : List ExpectedJson -> ExpectedJson\nlist expectedJsonList =\n    List expectedJsonList\n\nvalue : Json.Encode.Value -> ExpectedJson\nvalue jsonValue =\n    Value jsonValue\n"
      },
      "after": "c02dcc2ef308f1a7",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396858552
    },
    {
      "id": "66a969087d92a914",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "66a969087d92a914",
        "text": "3. Write a function to validate the expected JSON using the DSL:"
      },
      "after": "0a462fe139b4411d",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396864896
    },
    {
      "id": "603913fa1dc39b17",
      "type": "add",
      "item": {
        "type": "code",
        "id": "603913fa1dc39b17",
        "text": "validateJson : ExpectedJson -> Decode.Value -> Bool\nvalidateJson expectedJson actualJson =\n    -- Implement the validation logic comparing the DSL expression with the actual JSON\n"
      },
      "after": "0a462fe139b4411d",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396870356
    },
    {
      "item": {
        "type": "code",
        "id": "660bcf84d20ddd30",
        "text": "validateJson : ExpectedJson -> Decode.Value -> Bool\nvalidateJson expectedJson actualJson =\n    -- Implement the validation logic comparing the DSL expression with the actual JSON\n"
      },
      "id": "660bcf84d20ddd30",
      "type": "add",
      "after": "66a969087d92a914",
      "date": 1686396902676
    },
    {
      "type": "edit",
      "id": "660bcf84d20ddd30",
      "item": {
        "type": "code",
        "id": "660bcf84d20ddd30",
        "text": "validateJson : ExpectedJson -> Decode.Value -> Bool\nvalidateJson expectedJson actualJson =\n    -- Implement the validation logic comparing the DSL expression with the actual JSON\n"
      },
      "date": 1686396906081
    },
    {
      "id": "03b807af240a7438",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "03b807af240a7438",
        "text": "With this DSL, you can now describe the expected JSON structure and values in a more readable manner. Here's an example usage:"
      },
      "after": "660bcf84d20ddd30",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396912012
    },
    {
      "id": "e83db3280f1866a4",
      "type": "add",
      "item": {
        "type": "code",
        "id": "e83db3280f1866a4",
        "text": "expectedJson : ExpectedJson\nexpectedJson =\n    field \"id\" (value (Json.Encode.string \"123\"))\n        |> field \"name\" (value (Json.Encode.string \"John Doe\"))\n        |> field \"age\" (value (Json.Encode.int 25))\n        |> field \"tags\" (list [ value (Json.Encode.string \"tag1\")\n                              , value (Json.Encode.string \"tag2\")\n                              ])\n\nactualJson : Decode.Value\nactualJson =\n    -- JSON obtained from decoding\n\ntest : Bool\ntest =\n    validateJson expectedJson actualJson\n"
      },
      "after": "660bcf84d20ddd30",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396919698
    },
    {
      "id": "03b807af240a7438",
      "type": "move",
      "order": [
        "77f2f1d38fdb91a0",
        "a5bbbdf9087c9595",
        "c572b61cf080005b",
        "57b8440a7ef4f42a",
        "5c449fbafe66e0d9",
        "53859e347475177e",
        "3d0c5d200752f510",
        "eb2d8e4e97f4884e",
        "987f08a560e9d941",
        "fd5182eebfb2fc89",
        "a4cd755ca1abea46",
        "7f775d2953edb79a",
        "d6c230d5b4ec2345",
        "aa507998bc94f1a0",
        "725a3a38fda060c6",
        "f46f6f64d238761c",
        "700babaa05808121",
        "f681b892c978ddca",
        "b4ad503aee4e09c9",
        "dabb1ad8059f5625",
        "4eec78feca16e414",
        "8a9497d80081dbc8",
        "291579fd82ec7a65",
        "d73c377da4471ed8",
        "104bdfb861357f9a",
        "61333b72b63c5129",
        "9d5d0554f4c4ab32",
        "fa537f87032fd5e9",
        "384dd899b32e9704",
        "4f41e87c1b8c7cd0",
        "ae53c8f5d9688091",
        "69bf4ff9730a039e",
        "eebd8051ba9c7f41",
        "5550c1609f7bde9e",
        "ebdec2ae026ba812",
        "665ab46ab01bdfbc",
        "13ce277da7688268",
        "d7b4ea62b533cb4f",
        "8e0fa69c9ccc58ac",
        "fc243bb6de28b469",
        "86fb9e6983c601c0",
        "6175cef700274012",
        "30d2b32ceb82cdf7",
        "c02dcc2ef308f1a7",
        "0a462fe139b4411d",
        "603913fa1dc39b17",
        "66a969087d92a914",
        "660bcf84d20ddd30",
        "03b807af240a7438",
        "e83db3280f1866a4"
      ],
      "date": 1686396925128
    },
    {
      "id": "a417cf6d95ac7a7f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a417cf6d95ac7a7f",
        "text": "By using this DSL, you can have a clear and expressive representation of the expected JSON structure in your test cases. It allows you to focus on the structure and values you expect, making it easier to write and maintain your tests."
      },
      "after": "e83db3280f1866a4",
      "attribution": {
        "page": "Scratch Pad"
      },
      "date": 1686396937063
    },
    {
      "type": "fork",
      "date": 1686396943735
    },
    {
      "type": "remove",
      "id": "eebd8051ba9c7f41",
      "date": 1686397404485
    },
    {
      "type": "fork",
      "date": 1686397406614
    },
    {
      "item": {
        "type": "factory",
        "id": "3e790761bffe5272"
      },
      "id": "3e790761bffe5272",
      "type": "add",
      "after": "a417cf6d95ac7a7f",
      "date": 1686397909748
    },
    {
      "type": "edit",
      "id": "3e790761bffe5272",
      "item": {
        "type": "paragraph",
        "id": "3e790761bffe5272",
        "text": "⇒ [[scratch]]"
      },
      "date": 1686397922976
    },
    {
      "item": {
        "type": "factory",
        "id": "449156e8263ce4ac"
      },
      "id": "449156e8263ce4ac",
      "type": "add",
      "after": "3e790761bffe5272",
      "date": 1686399038385
    },
    {
      "type": "edit",
      "id": "449156e8263ce4ac",
      "item": {
        "type": "image",
        "id": "449156e8263ce4ac",
        "text": "edit image",
        "size": "wide",
        "width": 419,
        "height": 357,
        "url": "/assets/plugins/image/48c5fecaaa2e29756b61f8d927c5ca39.jpg"
      },
      "date": 1686399072750
    },
    {
      "item": {
        "type": "factory",
        "id": "a82941c4cf54997a"
      },
      "id": "a82941c4cf54997a",
      "type": "add",
      "after": "449156e8263ce4ac",
      "date": 1686399421135
    },
    {
      "type": "edit",
      "id": "a82941c4cf54997a",
      "item": {
        "type": "paragraph",
        "id": "a82941c4cf54997a",
        "text": "create EmptyStory"
      },
      "date": 1686399451285
    },
    {
      "type": "add",
      "id": "4168292410d5c06b",
      "item": {
        "type": "paragraph",
        "id": "4168292410d5c06b",
        "text": "Add factory id"
      },
      "after": "a82941c4cf54997a",
      "date": 1686399529933
    },
    {
      "type": "add",
      "id": "af97a04bc4fd927a",
      "item": {
        "type": "paragraph",
        "id": "af97a04bc4fd927a",
        "text": "edit id image"
      },
      "after": "4168292410d5c06b",
      "date": 1686399577640
    },
    {
      "type": "edit",
      "id": "a82941c4cf54997a",
      "item": {
        "type": "paragraph",
        "id": "a82941c4cf54997a",
        "text": "createType EmptyStory"
      },
      "date": 1686399585520
    },
    {
      "type": "edit",
      "id": "4168292410d5c06b",
      "item": {
        "type": "paragraph",
        "id": "4168292410d5c06b",
        "text": "Add factoryType id"
      },
      "date": 1686399594850
    },
    {
      "type": "edit",
      "id": "af97a04bc4fd927a",
      "item": {
        "type": "paragraph",
        "id": "af97a04bc4fd927a",
        "text": "editType id image"
      },
      "date": 1686399651033
    },
    {
      "type": "edit",
      "id": "4168292410d5c06b",
      "item": {
        "type": "paragraph",
        "id": "4168292410d5c06b",
        "text": "factoryType add id"
      },
      "date": 1686399660621
    },
    {
      "type": "edit",
      "id": "af97a04bc4fd927a",
      "item": {
        "type": "paragraph",
        "id": "af97a04bc4fd927a",
        "text": "editType id imageType"
      },
      "date": 1686399704089
    },
    {
      "type": "edit",
      "id": "af97a04bc4fd927a",
      "item": {
        "type": "paragraph",
        "id": "af97a04bc4fd927a",
        "text": "editType id to imageType"
      },
      "date": 1686399854240
    },
    {
      "type": "edit",
      "id": "a82941c4cf54997a",
      "item": {
        "type": "paragraph",
        "id": "a82941c4cf54997a",
        "text": "createType EmptyStory: Create EmptyStory"
      },
      "date": 1686399967716
    },
    {
      "type": "edit",
      "id": "4168292410d5c06b",
      "item": {
        "type": "paragraph",
        "id": "4168292410d5c06b",
        "text": "factoryType add id: Factory add id"
      },
      "date": 1686399980240
    },
    {
      "type": "edit",
      "id": "af97a04bc4fd927a",
      "item": {
        "type": "paragraph",
        "id": "af97a04bc4fd927a",
        "text": "editType id to imageType: Edit id toImage"
      },
      "date": 1686400017388
    },
    {
      "item": {
        "type": "factory",
        "id": "56c6a6fb2fca9151"
      },
      "id": "56c6a6fb2fca9151",
      "type": "add",
      "after": "af97a04bc4fd927a",
      "date": 1686413623328
    },
    {
      "type": "edit",
      "id": "56c6a6fb2fca9151",
      "item": {
        "type": "paragraph",
        "id": "56c6a6fb2fca9151",
        "text": "Ward via [Matrix]\nJson is to be admired for its balance between flexibility and interoperability. Users of json can easily push it off balance by expecting elaborate interpretation of that which json passes on as atomic types. Item types are just strings to json, but to a page json reader they represent the impossible: code today a handler for a type that will be invented tomorrow."
      },
      "date": 1686413643190
    },
    {
      "type": "add",
      "id": "8759e9c0d0bc36d0",
      "item": {
        "type": "paragraph",
        "id": "8759e9c0d0bc36d0",
        "text": "I intend to ignore all but a popular and useful subset of item types. But even with this expectation I caught a little slip in the code I have already written. I implemented a command, find word, which will sequence through the items looking for the one who's text contains the word. But, an item isn't required to have a text field. We often code this as item.text || \"\" which will substitute an empty string for a missing field. My search will not find the word in this text which is fine by me, But what if some plugin used the text field to store some rich text object that didn't support my regex search? Our approach so far has been to \"let it fail\". This seems counter to the expectation of languages that aspire to be more reliably correct."
      },
      "after": "56c6a6fb2fca9151",
      "date": 1686413725810
    },
    {
      "type": "edit",
      "id": "56c6a6fb2fca9151",
      "item": {
        "type": "paragraph",
        "id": "56c6a6fb2fca9151",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168641056274563grJEF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix]\nJson is to be admired for its balance between flexibility and interoperability. Users of json can easily push it off balance by expecting elaborate interpretation of that which json passes on as atomic types. Item types are just strings to json, but to a page json reader they represent the impossible: code today a handler for a type that will be invented tomorrow."
      },
      "date": 1686413753307
    },
    {
      "type": "edit",
      "id": "77f2f1d38fdb91a0",
      "item": {
        "type": "paragraph",
        "id": "77f2f1d38fdb91a0",
        "text": "⇒ [[Decode JSON in Elm]]: Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168636214571224yXOCC:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix]:\nFor a couple of months now we've been coding an hour or two a week on a Java program that can correctly read page json and follow its links through the federation."
      },
      "date": 1686413769560
    },
    {
      "item": {
        "type": "factory",
        "id": "1760fc7a9a0615a3"
      },
      "id": "1760fc7a9a0615a3",
      "type": "add",
      "after": "8759e9c0d0bc36d0",
      "date": 1686413873708
    },
    {
      "type": "edit",
      "id": "1760fc7a9a0615a3",
      "item": {
        "type": "paragraph",
        "id": "1760fc7a9a0615a3",
        "text": "I will be interested to see what sort of accommodations Ralf makes for these issues in Elm. "
      },
      "date": 1686413877254
    },
    {
      "item": {
        "type": "factory",
        "id": "922e13968455bc60"
      },
      "id": "922e13968455bc60",
      "type": "add",
      "after": "1760fc7a9a0615a3",
      "date": 1686414176179
    },
    {
      "type": "edit",
      "id": "922e13968455bc60",
      "item": {
        "type": "code",
        "id": "922e13968455bc60",
        "text": "module Main exposing (..)\n\nimport Html exposing (div, text)\nimport Json.Decode as Decode exposing (Decoder, map2, field)\n\n\n-- Define the base record type\ntype alias Item =\n    { id : String\n    , text : String\n    }\n\n\n-- Decode the base fields and allow additional fields\nitemDecoder : Decoder Item\nitemDecoder =\n    map2 Item\n        (Decode.field \"id\" Decode.string)\n        (Decode.field \"text\" Decode.string)\n\n\n-- Decode an item with additional fields\nextendedItemDecoder : Decoder (Item, Decode.Value)\nextendedItemDecoder =\n    Decode.map2\n        (\\item extraFields -> (item, extraFields))\n        itemDecoder\n        (Decode.succeed ()) -- Additional fields are ignored\n\n\n-- Example usage\njsonData : String\njsonData =\n    \"\"\"\n    {\n        \"id\": \"123\",\n        \"text\": \"Some text\",\n        \"newField\": \"New field value\"\n    }\n    \"\"\"\n\nmain =\n    case Decode.decodeString extendedItemDecoder jsonData of\n        Ok (item, extraFields) ->\n            div [] [\n                text (\"ID: \" ++ item.id),\n                text (\"Text: \" ++ item.text),\n                text (\"Extra fields: \" ++ Decode.encode extraFields)\n            ]\n\n        Err error ->\n            text (\"Decoding error: \" ++ Decode.errorToString error)\n"
      },
      "date": 1686414180174
    },
    {
      "type": "add",
      "id": "6e0852add8b4fd43",
      "item": {
        "type": "paragraph",
        "id": "6e0852add8b4fd43",
        "text": "[…]"
      },
      "after": "1760fc7a9a0615a3",
      "date": 1686414330500
    },
    {
      "item": {
        "type": "factory",
        "id": "e8ae7f161ef62215"
      },
      "id": "e8ae7f161ef62215",
      "type": "add",
      "after": "922e13968455bc60",
      "date": 1686423313686
    },
    {
      "type": "edit",
      "id": "e8ae7f161ef62215",
      "item": {
        "type": "paragraph",
        "id": "e8ae7f161ef62215",
        "text": "\nPALKAR, Shoumik, ABUZAID, Firas, BAILIS, Peter and ZAHARIA, Matei, 2018. Filter before you parse: faster analytics on raw data with sparser. Proceedings of the VLDB Endowment. 1 July 2018. Vol. 11, no. 11, p. 1576–1589. DOI 10.14778/3236187.3236207. Exploratory big data applications often run on raw unstructured or semi-structured data formats, such as JSON files or text logs. These applications can spend 80--90% of their execution time parsing the data. In this paper, we propose a new approach for reducing this overhead: apply filters on the data’s raw bytestream before parsing. This technique, which we call raw filtering, leverages the features of modern hardware and the high selectivity of queries found in many exploratory applications. With raw filtering, a user-specified query predicate is compiled into a set of filtering primitives called raw filters (RFs). RFs are fast, SIMD-based operators that occasionally yield false positives, but never false negatives. We combine multiple RFs into an RF cascade to decrease the false positive rate and maximize parsing throughput. Because the best RF cascade is data-dependent, we propose an optimizer that dynamically selects the combination of RFs with the best expected throughput, achieving within 10% of the global optimum cascade while adding less than 1.2% overhead. We implement these techniques in a system called Sparser, which automatically manages a parsing cascade given a data stream in a supported format (e.g., JSON, Avro, Parquet) and a user query. We show that many real-world applications are highly selective and benefit from Sparser. Across diverse workloads, Sparser accelerates state-of-the-art parsers such as Mison by up to 22 × and improves end-to-end application performance by up to 9 ×.\n"
      },
      "date": 1686423318165
    }
  ]
}