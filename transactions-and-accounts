{
  "title": "Transactions And Accounts",
  "story": [
    {
      "type": "html",
      "text": "You are modeling the state of a business. The business buys and sell things, and has to keep track of how much it owes, how much others owe it, how much business it has done, and how much money it is making and can expect to make.",
      "id": "e9f7120afea08ad285ad6157acdda1d5"
    },
    {
      "type": "html",
      "text": "\nWhether you are using a computer or doing everything by hand, there are some patterns that you will probably follow. (Well, maybe not. You could pay your workers each day, count inventory periodically and reorder when something was low, and find out how much money you had by asking your bank. But most people follow these patterns.)",
      "id": "a31c47f0234044fec7430e699c665992"
    },
    {
      "type": "html",
      "text": "\nYou will ",
      "id": "b5377e1e73452b19973379ba1056c086"
    },
    {
      "type": "html",
      "text": " record all changes to the state of the business with [[Business Transaction]]s, ",
      "id": "2bda1b9867f6d87fbe6286e780efa778"
    },
    {
      "type": "html",
      "text": " model the state of the business with [[Business Accounts]], ",
      "id": "f37822bb84f00ac56511862c5bde6e28"
    },
    {
      "type": "html",
      "text": " structure transactions with [[Composite Transactions]], ",
      "id": "155f3c8a7fcf557eabcd6cbfabef5e8f"
    },
    {
      "type": "html",
      "text": " fix mistakes not by backing out your transactions and redoing them, but by [[Adjusting Transactions]], and ",
      "id": "f50dbb5c3e35e5e062543ef157ab1e54"
    },
    {
      "type": "html",
      "text": " catch and resolve errors by [[Month End Closing]].",
      "id": "d2c7d652de0dc84e5f0f6608734b2cda"
    },
    {
      "type": "html",
      "text": "I believe this is an accurate description of the patterns used in systems based on transactions and accounts. However, I think life can be better. [[Month End Closing]] is the real problem, though business people have lived with it so long that they often think it is inevitable. It is a pattern that resolves many forces, so it is hard to change.",
      "id": "45f6b815fce86701958f61f092704f90"
    },
    {
      "type": "html",
      "text": "\nTo replace [[Month End Closing]] with another pattern, you have to figure out another way to resolve the forces. You can eliminate the need to change software only on the end of a month by using [[Explicit Business Rules]]. Making the business rules explicit means that it is easy to add them one by one, and does not require major changes in software. You can make them valid only for certain periods of time, so it is easy to add rules that take effect in the future and to test them now by using test transactions with future dates.",
      "id": "382406ac07c7466cc1931ea7ddc355b6"
    },
    {
      "type": "html",
      "text": "\nYou can eliminate the need to fix bad transactions by continuously making the checks that would be performed at [[Month End Closing]], so errors are corrected when they occur instead of piling up at the end of the month. If you represent business rules explicitly, the system can check the rules automatically as well as use them to process transactions.",
      "id": "67096c769508527576a54ea126995d87"
    },
    {
      "type": "html",
      "text": "\nAnother reason for representing your business rules explicitly is that you can keep track of how they change over time, and can process (or undo) a transaction based on rules in effect at the time that the transaction took place, not at the time that the transaction was processed by the computer. This means that you don't have to process transactions in any particular order, but can process them whenever all the data is available.",
      "id": "5ea98c385882de62e0fd26dcf35eb23f"
    },
    {
      "type": "html",
      "text": " [[Continuous Processing]]",
      "id": "50421cb13e91be21a3904d061bcebb01"
    },
    {
      "type": "html",
      "text": "\nMonth end closing will become simpler and easier. This will also result in designing our systems at a higher level, just the like GUI builders and DBMSs let us design our systems at a higher level.",
      "id": "aa4092a4a9aa8416c26038a4c80c3eba"
    },
    {
      "type": "html",
      "text": "\nThe big question is \"how do you represent the business rules in a transaction processing system?\" Business rules of a business transaction processing system fall into several categories:",
      "id": "0a30f298528f1c3879902661effacb14"
    },
    {
      "type": "html",
      "text": " rules for posting transactions and updating accounts, which can be divided into rules for figuring out what accounts a transaction should be posted to, and functions for calculating the value of an attribute from the transactions posted to its account,",
      "id": "5a690a5926badb89a4f5b881bc1f8c75"
    },
    {
      "type": "html",
      "text": " rules for creating new transactions",
      "id": "6ad94c1305818742d28378eaff7b1e2a"
    },
    {
      "type": "html",
      "text": " rules for creating new accounts.",
      "id": "ec47a7c6da35ee1d690096f0dc7dff53"
    },
    {
      "type": "html",
      "text": "\nRecall that the attributes of an account are functions of the transactions that have been posted to that account. When an account stores its attributes locally, they are cached results of these functions. For example, \"sales year-to-date\" on an inventory account is the sum of the \"amount\" field on all sales transactions posted to the account that year. You could encode this rule in the program that posts a sales transaction to an inventory account, as well as in a program that backs it out (if there is one) and the programs that post other kinds of transactions to the inventory account and so must avoid this field. But the system will be easier to understand if you define the meaning of this attribute only once, in terms of the transactions. ",
      "id": "b4e560426be1cb904c3315c1c44c68f3"
    },
    {
      "type": "html",
      "text": "\nAccounts (see [http://st-www.cs.uiuc.edu/users/johnson/Accounts.html st-www.cs.uiuc.edu]) is a system I've been building based on these principles.",
      "id": "0b38e7d6119531aaf024f4df7022a7ed"
    },
    {
      "type": "html",
      "text": "-- [[Ralph Johnson]]",
      "id": "7c9aceef8794611a5a06f75bbaa4c7be"
    },
    {
      "type": "html",
      "text": "---- ",
      "id": "e4c69ceb16a6b51a125fa4120f4f05f9"
    },
    {
      "type": "html",
      "text": "\nPersonally I have never liked month end closing. I think there are better ways to approach the problem(s)",
      "id": "7e7356ce47f77c3515f0c150f6bcb207"
    },
    {
      "type": "html",
      "text": " You have to report accounting information, say at year end, and not change the data after the fact.",
      "id": "38df80912b7b375f720f167dfe4c8894"
    },
    {
      "type": "html",
      "text": " The data does change after the fact. You might find missing transactions from the previous period and you have to record them. However recording these violates 1.",
      "id": "faa79861675a8e35194bed20cf15fc09"
    },
    {
      "type": "html",
      "text": "\nThis can be resolved by being specific about dates. Notice date, when you notice the information is one date. Effective date, the true date of the transaction is another.",
      "id": "857f943ee08a2f6409f142de07d97ff5"
    },
    {
      "type": "html",
      "text": "\nNow you can record data in arrears for a previous period. You can extract the original report by using the notice date as a query. You can extract transactions that are adjustments to the previous period by using effective and notice date.",
      "id": "7447c95fb47fc8c4f8918fb97c351ae7"
    },
    {
      "type": "html",
      "text": "\nIn practice, you would warn on back valued transactions being posted.",
      "id": "7c7e6a1d9e460ea9f155dec4a873a896"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "4a749005adf554e7fafac1df76dbbda8"
    },
    {
      "type": "html",
      "text": "Please post comments here, or mailto:johnson@cs.uiuc.edu.",
      "id": "355a2fafe382a6ff0bf4e9d976953487"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?TransactionsAndAccounts c2.com]",
      "id": "c10c18f1583bf3e1f1da92e49dacf154"
    }
  ],
  "journal": [
    {
      "date": 1415534415000,
      "id": "53fc9ad4b477f5107f07d96cb8f6121f",
      "type": "create",
      "item": {
        "title": "Transactions And Accounts",
        "story": [
          {
            "type": "html",
            "text": "You are modeling the state of a business. The business buys and sell things, and has to keep track of how much it owes, how much others owe it, how much business it has done, and how much money it is making and can expect to make.",
            "id": "e9f7120afea08ad285ad6157acdda1d5"
          },
          {
            "type": "html",
            "text": "\nWhether you are using a computer or doing everything by hand, there are some patterns that you will probably follow. (Well, maybe not. You could pay your workers each day, count inventory periodically and reorder when something was low, and find out how much money you had by asking your bank. But most people follow these patterns.)",
            "id": "a31c47f0234044fec7430e699c665992"
          },
          {
            "type": "html",
            "text": "\nYou will ",
            "id": "b5377e1e73452b19973379ba1056c086"
          },
          {
            "type": "html",
            "text": " record all changes to the state of the business with [[Business Transaction]]s, ",
            "id": "2bda1b9867f6d87fbe6286e780efa778"
          },
          {
            "type": "html",
            "text": " model the state of the business with [[Business Accounts]], ",
            "id": "f37822bb84f00ac56511862c5bde6e28"
          },
          {
            "type": "html",
            "text": " structure transactions with [[Composite Transactions]], ",
            "id": "155f3c8a7fcf557eabcd6cbfabef5e8f"
          },
          {
            "type": "html",
            "text": " fix mistakes not by backing out your transactions and redoing them, but by [[Adjusting Transactions]], and ",
            "id": "f50dbb5c3e35e5e062543ef157ab1e54"
          },
          {
            "type": "html",
            "text": " catch and resolve errors by [[Month End Closing]].",
            "id": "d2c7d652de0dc84e5f0f6608734b2cda"
          },
          {
            "type": "html",
            "text": "I believe this is an accurate description of the patterns used in systems based on transactions and accounts. However, I think life can be better. [[Month End Closing]] is the real problem, though business people have lived with it so long that they often think it is inevitable. It is a pattern that resolves many forces, so it is hard to change.",
            "id": "45f6b815fce86701958f61f092704f90"
          },
          {
            "type": "html",
            "text": "\nTo replace [[Month End Closing]] with another pattern, you have to figure out another way to resolve the forces. You can eliminate the need to change software only on the end of a month by using [[Explicit Business Rules]]. Making the business rules explicit means that it is easy to add them one by one, and does not require major changes in software. You can make them valid only for certain periods of time, so it is easy to add rules that take effect in the future and to test them now by using test transactions with future dates.",
            "id": "382406ac07c7466cc1931ea7ddc355b6"
          },
          {
            "type": "html",
            "text": "\nYou can eliminate the need to fix bad transactions by continuously making the checks that would be performed at [[Month End Closing]], so errors are corrected when they occur instead of piling up at the end of the month. If you represent business rules explicitly, the system can check the rules automatically as well as use them to process transactions.",
            "id": "67096c769508527576a54ea126995d87"
          },
          {
            "type": "html",
            "text": "\nAnother reason for representing your business rules explicitly is that you can keep track of how they change over time, and can process (or undo) a transaction based on rules in effect at the time that the transaction took place, not at the time that the transaction was processed by the computer. This means that you don't have to process transactions in any particular order, but can process them whenever all the data is available.",
            "id": "5ea98c385882de62e0fd26dcf35eb23f"
          },
          {
            "type": "html",
            "text": " [[Continuous Processing]]",
            "id": "50421cb13e91be21a3904d061bcebb01"
          },
          {
            "type": "html",
            "text": "\nMonth end closing will become simpler and easier. This will also result in designing our systems at a higher level, just the like GUI builders and DBMSs let us design our systems at a higher level.",
            "id": "aa4092a4a9aa8416c26038a4c80c3eba"
          },
          {
            "type": "html",
            "text": "\nThe big question is \"how do you represent the business rules in a transaction processing system?\" Business rules of a business transaction processing system fall into several categories:",
            "id": "0a30f298528f1c3879902661effacb14"
          },
          {
            "type": "html",
            "text": " rules for posting transactions and updating accounts, which can be divided into rules for figuring out what accounts a transaction should be posted to, and functions for calculating the value of an attribute from the transactions posted to its account,",
            "id": "5a690a5926badb89a4f5b881bc1f8c75"
          },
          {
            "type": "html",
            "text": " rules for creating new transactions",
            "id": "6ad94c1305818742d28378eaff7b1e2a"
          },
          {
            "type": "html",
            "text": " rules for creating new accounts.",
            "id": "ec47a7c6da35ee1d690096f0dc7dff53"
          },
          {
            "type": "html",
            "text": "\nRecall that the attributes of an account are functions of the transactions that have been posted to that account. When an account stores its attributes locally, they are cached results of these functions. For example, \"sales year-to-date\" on an inventory account is the sum of the \"amount\" field on all sales transactions posted to the account that year. You could encode this rule in the program that posts a sales transaction to an inventory account, as well as in a program that backs it out (if there is one) and the programs that post other kinds of transactions to the inventory account and so must avoid this field. But the system will be easier to understand if you define the meaning of this attribute only once, in terms of the transactions. ",
            "id": "b4e560426be1cb904c3315c1c44c68f3"
          },
          {
            "type": "html",
            "text": "\nAccounts (see [http://st-www.cs.uiuc.edu/users/johnson/Accounts.html st-www.cs.uiuc.edu]) is a system I've been building based on these principles.",
            "id": "0b38e7d6119531aaf024f4df7022a7ed"
          },
          {
            "type": "html",
            "text": "-- [[Ralph Johnson]]",
            "id": "7c9aceef8794611a5a06f75bbaa4c7be"
          },
          {
            "type": "html",
            "text": "---- ",
            "id": "e4c69ceb16a6b51a125fa4120f4f05f9"
          },
          {
            "type": "html",
            "text": "\nPersonally I have never liked month end closing. I think there are better ways to approach the problem(s)",
            "id": "7e7356ce47f77c3515f0c150f6bcb207"
          },
          {
            "type": "html",
            "text": " You have to report accounting information, say at year end, and not change the data after the fact.",
            "id": "38df80912b7b375f720f167dfe4c8894"
          },
          {
            "type": "html",
            "text": " The data does change after the fact. You might find missing transactions from the previous period and you have to record them. However recording these violates 1.",
            "id": "faa79861675a8e35194bed20cf15fc09"
          },
          {
            "type": "html",
            "text": "\nThis can be resolved by being specific about dates. Notice date, when you notice the information is one date. Effective date, the true date of the transaction is another.",
            "id": "857f943ee08a2f6409f142de07d97ff5"
          },
          {
            "type": "html",
            "text": "\nNow you can record data in arrears for a previous period. You can extract the original report by using the notice date as a query. You can extract transactions that are adjustments to the previous period by using effective and notice date.",
            "id": "7447c95fb47fc8c4f8918fb97c351ae7"
          },
          {
            "type": "html",
            "text": "\nIn practice, you would warn on back valued transactions being posted.",
            "id": "7c7e6a1d9e460ea9f155dec4a873a896"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "4a749005adf554e7fafac1df76dbbda8"
          },
          {
            "type": "html",
            "text": "Please post comments here, or mailto:johnson@cs.uiuc.edu.",
            "id": "355a2fafe382a6ff0bf4e9d976953487"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?TransactionsAndAccounts c2.com]",
            "id": "c10c18f1583bf3e1f1da92e49dacf154"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626125281891
    }
  ]
}