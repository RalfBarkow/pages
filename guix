{
  "title": "Guix",
  "story": [
    {
      "type": "paragraph",
      "id": "aa3fb68949366278",
      "text": "is a purely functional package manager written in Guile Scheme, and building on the Nix package manager. It implements purely functional package build and composition: a build process is a Scheme function that returns the path of its result in the \"store\"-the /nix/store directory. The store acts as a build cache, subject to garbage collection. Changing a bit in the build process's inputs (dependencies, environment variables, etc.) changes the result.\n\nThis approach provides users with features such as transactional upgrades and rollback, unprivileged package installation, coexistence of variants or versions of packages, etc. By construction, it allows users to track down all the packages involved in a build, down to the initial bootstrapping binaries.\n\nThis talk will present Guix, detail this incredible feature set, and show what it's like to package software with it. We will discuss whether and how it could fit in the Grand Plan of making a \"GNU distro\".\n"
    },
    {
      "type": "pagefold",
      "id": "1e23b545b28be3ec",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "71bc47fcb4aa31b7",
      "text": "Guix: Reproducible Software Deployment\nfor Reproducible Research\n[[Ludovic Courtès]]\nSoftware Heritage Fifth Anniversary\n 30 November 2021\n[https://git.savannah.gnu.org/cgit/guix/maintenance.git/plain/talks/swh-unesco-2021/talk.20211130.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "855b49079afb02f4",
      "text": "Reproducible data processing pipelines. [https://guix.gnu.org/blog/2021/reproducible-data-processing-pipelines/ post]"
    },
    {
      "type": "paragraph",
      "id": "05f47361ed719a39",
      "text": "GuixHPC [https://hpc.guix.info/ site]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Guix",
        "story": []
      },
      "date": 1638515485226
    },
    {
      "item": {
        "type": "factory",
        "id": "71bc47fcb4aa31b7"
      },
      "id": "71bc47fcb4aa31b7",
      "type": "add",
      "date": 1638515566669
    },
    {
      "type": "edit",
      "id": "71bc47fcb4aa31b7",
      "item": {
        "type": "paragraph",
        "id": "71bc47fcb4aa31b7",
        "text": "Guix: Reproducible Software Deployment\nfor Reproducible Research\n[[Ludovic Courtès]]\nSoftware Heritage Fifth Anniversary\n 30 November 2021"
      },
      "date": 1638515583168
    },
    {
      "type": "edit",
      "id": "71bc47fcb4aa31b7",
      "item": {
        "type": "markdown",
        "id": "71bc47fcb4aa31b7",
        "text": "Guix: Reproducible Software Deployment\nfor Reproducible Research\n[[Ludovic Courtès]]\nSoftware Heritage Fifth Anniversary\n 30 November 2021"
      },
      "date": 1638515585885
    },
    {
      "item": {
        "type": "factory",
        "id": "855b49079afb02f4"
      },
      "id": "855b49079afb02f4",
      "type": "add",
      "after": "71bc47fcb4aa31b7",
      "date": 1638515631932
    },
    {
      "type": "edit",
      "id": "855b49079afb02f4",
      "item": {
        "type": "paragraph",
        "id": "855b49079afb02f4",
        "text": "Reproducible data processing pipelines"
      },
      "date": 1638515635549
    },
    {
      "type": "edit",
      "id": "855b49079afb02f4",
      "item": {
        "type": "paragraph",
        "id": "855b49079afb02f4",
        "text": "Reproducible data processing pipelines [https://guix.gnu.org/blog/2021/reproducible-data-processing-pipelines/ post]"
      },
      "date": 1638515646030
    },
    {
      "type": "edit",
      "id": "855b49079afb02f4",
      "item": {
        "type": "paragraph",
        "id": "855b49079afb02f4",
        "text": "Reproducible data processing pipelines. [https://guix.gnu.org/blog/2021/reproducible-data-processing-pipelines/ post]"
      },
      "date": 1638515650745
    },
    {
      "type": "edit",
      "id": "71bc47fcb4aa31b7",
      "item": {
        "type": "markdown",
        "id": "71bc47fcb4aa31b7",
        "text": "Guix: Reproducible Software Deployment\nfor Reproducible Research\n[[Ludovic Courtès]]\nSoftware Heritage Fifth Anniversary\n 30 November 2021\n[https://git.savannah.gnu.org/cgit/guix/maintenance.git/plain/talks/swh-unesco-2021/talk.20211130.pdf pdf]"
      },
      "date": 1638515759317
    },
    {
      "item": {
        "type": "factory",
        "id": "05f47361ed719a39"
      },
      "id": "05f47361ed719a39",
      "type": "add",
      "after": "855b49079afb02f4",
      "date": 1638515803794
    },
    {
      "type": "edit",
      "id": "05f47361ed719a39",
      "item": {
        "type": "paragraph",
        "id": "05f47361ed719a39",
        "text": "GuixH[https://hpc.guix.info/ site]"
      },
      "date": 1638515829521
    },
    {
      "type": "edit",
      "id": "05f47361ed719a39",
      "item": {
        "type": "paragraph",
        "id": "05f47361ed719a39",
        "text": "GuixHPC [https://hpc.guix.info/ site]"
      },
      "date": 1638515840821
    },
    {
      "id": "2c27e8a743c29f14",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2c27e8a743c29f14",
        "text": "\n[[Guix]] is a purely functional package manager written in Guile Scheme, and building on the Nix package manager. It implements purely functional package build and composition: a build process is a Scheme function that returns the path of its result in the \"store\"-the /nix/store directory. The store acts as a build cache, subject to garbage collection. Changing a bit in the build process's inputs (dependencies, environment variables, etc.) changes the result.\n\nThis approach provides users with features such as transactional upgrades and rollback, unprivileged package installation, coexistence of variants or versions of packages, etc. By construction, it allows users to track down all the packages involved in a build, down to the initial bootstrapping binaries.\n\nThis talk will present Guix, detail this incredible feature set, and show what it's like to package software with it. We will discuss whether and how it could fit in the Grand Plan of making a \"GNU distro\".\n"
      },
      "after": "05f47361ed719a39",
      "date": 1664180406682
    },
    {
      "type": "edit",
      "id": "2c27e8a743c29f14",
      "item": {
        "type": "paragraph",
        "id": "2c27e8a743c29f14",
        "text": "*Guix* is a purely functional package manager written in Guile Scheme, and building on the Nix package manager. It implements purely functional package build and composition: a build process is a Scheme function that returns the path of its result in the \"store\"-the /nix/store directory. The store acts as a build cache, subject to garbage collection. Changing a bit in the build process's inputs (dependencies, environment variables, etc.) changes the result.\n\nThis approach provides users with features such as transactional upgrades and rollback, unprivileged package installation, coexistence of variants or versions of packages, etc. By construction, it allows users to track down all the packages involved in a build, down to the initial bootstrapping binaries.\n\nThis talk will present Guix, detail this incredible feature set, and show what it's like to package software with it. We will discuss whether and how it could fit in the Grand Plan of making a \"GNU distro\".\n"
      },
      "date": 1664180417038
    },
    {
      "id": "2c27e8a743c29f14",
      "type": "move",
      "order": [
        "2c27e8a743c29f14",
        "71bc47fcb4aa31b7",
        "855b49079afb02f4",
        "05f47361ed719a39"
      ],
      "date": 1664180419438
    },
    {
      "item": {
        "type": "factory",
        "id": "1e23b545b28be3ec"
      },
      "id": "1e23b545b28be3ec",
      "type": "add",
      "after": "05f47361ed719a39",
      "date": 1664180425253
    },
    {
      "type": "edit",
      "id": "1e23b545b28be3ec",
      "item": {
        "type": "pagefold",
        "id": "1e23b545b28be3ec",
        "text": "~"
      },
      "date": 1664180427654
    },
    {
      "id": "1e23b545b28be3ec",
      "type": "move",
      "order": [
        "2c27e8a743c29f14",
        "1e23b545b28be3ec",
        "71bc47fcb4aa31b7",
        "855b49079afb02f4",
        "05f47361ed719a39"
      ],
      "date": 1664180429963
    },
    {
      "type": "edit",
      "id": "2c27e8a743c29f14",
      "item": {
        "type": "markdown",
        "id": "2c27e8a743c29f14",
        "text": "*Guix* is a purely functional package manager written in Guile Scheme, and building on the Nix package manager. It implements purely functional package build and composition: a build process is a Scheme function that returns the path of its result in the \"store\"-the /nix/store directory. The store acts as a build cache, subject to garbage collection. Changing a bit in the build process's inputs (dependencies, environment variables, etc.) changes the result.\n\nThis approach provides users with features such as transactional upgrades and rollback, unprivileged package installation, coexistence of variants or versions of packages, etc. By construction, it allows users to track down all the packages involved in a build, down to the initial bootstrapping binaries.\n\nThis talk will present Guix, detail this incredible feature set, and show what it's like to package software with it. We will discuss whether and how it could fit in the Grand Plan of making a \"GNU distro\".\n"
      },
      "date": 1664180433702
    },
    {
      "item": {
        "type": "factory",
        "id": "aa3fb68949366278"
      },
      "id": "aa3fb68949366278",
      "type": "add",
      "after": "05f47361ed719a39",
      "date": 1694172043147
    },
    {
      "id": "aa3fb68949366278",
      "type": "move",
      "order": [
        "aa3fb68949366278",
        "2c27e8a743c29f14",
        "1e23b545b28be3ec",
        "71bc47fcb4aa31b7",
        "855b49079afb02f4",
        "05f47361ed719a39"
      ],
      "date": 1694172046464
    },
    {
      "type": "remove",
      "id": "2c27e8a743c29f14",
      "date": 1694172048384
    },
    {
      "type": "edit",
      "id": "aa3fb68949366278",
      "item": {
        "type": "paragraph",
        "id": "aa3fb68949366278",
        "text": "is a purely functional package manager written in Guile Scheme, and building on the Nix package manager. It implements purely functional package build and composition: a build process is a Scheme function that returns the path of its result in the \"store\"-the /nix/store directory. The store acts as a build cache, subject to garbage collection. Changing a bit in the build process's inputs (dependencies, environment variables, etc.) changes the result.\n\nThis approach provides users with features such as transactional upgrades and rollback, unprivileged package installation, coexistence of variants or versions of packages, etc. By construction, it allows users to track down all the packages involved in a build, down to the initial bootstrapping binaries.\n\nThis talk will present Guix, detail this incredible feature set, and show what it's like to package software with it. We will discuss whether and how it could fit in the Grand Plan of making a \"GNU distro\".\n"
      },
      "date": 1694172058601
    }
  ]
}