{
  "title": "WyCash",
  "story": [
    {
      "type": "markdown",
      "id": "0f3dd8368dbd439a",
      "text": "[http://c2.com/doc/oopsla92.html WyCash explanation]"
    },
    {
      "type": "paragraph",
      "id": "b5c5b371eb4b04f7",
      "text": "OOPSLA '92 \nExperience Report\nThe WyCash Portfolio Management System\n\nWard Cunningham \nMarch 26, 1992\nU.S. pension funds, corporations, and banks invest billions of dollars in the \"cash\" markets. Cash securities are generally considered those with a remaining term to maturity of less than one year, but can include those with maturities as long as five years. Incredibly diverse in nature, cash securities are actually negotiated between issuer and buyer, and new security types are frequently introduced into the market. WyCASH+ is a portfolio management system which provides basic accounting, record-keeping and reporting, as well as analytical computations to assist the manager of cash portfolios.\n\nFor the development of WyCASH+, Wyatt Software chose to employ object technology in order to quickly and effectively address the diversity present in the market. Objects help in two ways. First, many security types fit nicely into an inheritance hierarchy which is directly supported by our language (Smalltalk) saving us considerable effort in coding. Second, changing market demands often require massive revisions which we have been able to accomodate because of the modularity intrinsic in a totally object-oriented implementation. Our customers value our responsiveness as much as, if not more than, our product's fit to their current needs.\n\nWe developed the product by incremental growth from a working prototype. Each member of our small engineering team maintains at least general knowledge of all aspects of the roughly four megabytes of source code. This includes some libraries provided by the vendor and others written to our specification by third-party contractors. Mature sections of the program have been revised or rewritten many times providing the consolidation that is key to understanding and continued incremental development\n\nWe believe this process leads to the most appropriate product in the shortest possible time. There are pitfalls, however. Not everyone is comfortable with sudden changes in direction, especially programmers. Here the best antidote is more complete familiarity with the product and its implementation. Changes will be accepted when they are recognized as do-able.\n\nAnother, more serious pitfall is the failure to consolidate. Although immature code may work fine and be completely acceptable to the customer, excess quantities will make a program unmasterable, leading to extreme specialization of programmers and finally an inflexible product. Shipping first time code is like going into debt. A little debt speeds development so long as it is paid back promptly with a rewrite. Objects make the cost of this transaction tolerable. The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt. Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, object-oriented or otherwise."
    },
    {
      "type": "paragraph",
      "id": "f7f809f10c8f4225",
      "text": "There is little doubt that Wyatt Software will continue to employ object technology. Thoroughly versed in the leading object-oriented languages, our only decision is how best to employ their advantages. The traditional waterfall development cycle has endeavored to avoid programming catastrophy by working out a program in detail before programming begins. We watch with some interest as the community attempts to apply these techniques to objects. However, using our debt analogy, we recognize this amounts to preserving the concept of payment up-front and in-full. The modularity offered by objects and the practice of consolidation make the alternative, incremental growth, both feasible and desirable (but not always comfortable) in the competitive financial software market."
    },
    {
      "type": "paragraph",
      "id": "96e51e02d7741f6a",
      "text": "Addendum: The author reflects on the [[Debt Metaphor]] in this five minute YouTube [https://www.youtube.com/user/WardCunningham#p/a/E95B31B1A940296B/2/pqeJFYwnkjE video] recorded in 2009. Comments include a history of the metaphor, its position as a defense of refactoring, and, corrections to common misinterpretations. June Kim and Lawrence Wang provide this [http://wiki.c2.com/?WardExplainsDebtMetaphor transcription]."
    },
    {
      "type": "video",
      "id": "c849e81fd2fce86e",
      "text": "YOUTUBE pqeJFYwnkjE\n[[Debt Metaphor]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "WyCash",
        "story": []
      },
      "date": 1650826799517
    },
    {
      "item": {
        "type": "factory",
        "id": "0f3dd8368dbd439a"
      },
      "id": "0f3dd8368dbd439a",
      "type": "add",
      "date": 1650826801126
    },
    {
      "type": "edit",
      "id": "0f3dd8368dbd439a",
      "item": {
        "type": "markdown",
        "id": "0f3dd8368dbd439a",
        "text": "[http://c2.com/doc/oopsla92.html WyCash explanation]"
      },
      "date": 1650826824130
    },
    {
      "type": "fork",
      "site": "marc.tries.fed.wiki",
      "date": 1650921250982
    },
    {
      "item": {
        "type": "factory",
        "id": "b5c5b371eb4b04f7"
      },
      "id": "b5c5b371eb4b04f7",
      "type": "add",
      "after": "0f3dd8368dbd439a",
      "date": 1650921281771
    },
    {
      "type": "edit",
      "id": "b5c5b371eb4b04f7",
      "item": {
        "type": "paragraph",
        "id": "b5c5b371eb4b04f7",
        "text": "OOPSLA '92 \nExperience Report\nThe WyCash Portfolio Management System\n\nWard Cunningham \nMarch 26, 1992\nU.S. pension funds, corporations, and banks invest billions of dollars in the \"cash\" markets. Cash securities are generally considered those with a remaining term to maturity of less than one year, but can include those with maturities as long as five years. Incredibly diverse in nature, cash securities are actually negotiated between issuer and buyer, and new security types are frequently introduced into the market. WyCASH+ is a portfolio management system which provides basic accounting, record-keeping and reporting, as well as analytical computations to assist the manager of cash portfolios.\n\nFor the development of WyCASH+, Wyatt Software chose to employ object technology in order to quickly and effectively address the diversity present in the market. Objects help in two ways. First, many security types fit nicely into an inheritance hierarchy which is directly supported by our language (Smalltalk) saving us considerable effort in coding. Second, changing market demands often require massive revisions which we have been able to accomodate because of the modularity intrinsic in a totally object-oriented implementation. Our customers value our responsiveness as much as, if not more than, our product's fit to their current needs.\n\nWe developed the product by incremental growth from a working prototype. Each member of our small engineering team maintains at least general knowledge of all aspects of the roughly four megabytes of source code. This includes some libraries provided by the vendor and others written to our specification by third-party contractors. Mature sections of the program have been revised or rewritten many times providing the consolidation that is key to understanding and continued incremental development\n\nWe believe this process leads to the most appropriate product in the shortest possible time. There are pitfalls, however. Not everyone is comfortable with sudden changes in direction, especially programmers. Here the best antidote is more complete familiarity with the product and its implementation. Changes will be accepted when they are recognized as do-able.\n\nAnother, more serious pitfall is the failure to consolidate. Although immature code may work fine and be completely acceptable to the customer, excess quantities will make a program unmasterable, leading to extreme specialization of programmers and finally an inflexible product. Shipping first time code is like going into debt. A little debt speeds development so long as it is paid back promptly with a rewrite. Objects make the cost of this transaction tolerable. The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt. Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, object- oriented or otherwise.\n\nThere is little doubt that Wyatt Software will continue to employ object technology. Thoroughly versed in the leading object-oriented languages, our only decision is how best to employ their advantages. The traditional waterfall development cycle has endeavored to avoid programming catastrophy by working out a program in detail before programming begins. We watch with some interest as the community attempts to apply these techniques to objects. However, using our debt analogy, we recognize this amounts to preserving the concept of payment up-front and in-full. The modularity offered by objects and the practice of consolidation make the alternative, incremental growth, both feasible and desirable (but not always comfortable) in the competitive financial software market.\n\nAddendum: The author reflects on the Debt Metaphor in this five minute YouTube video recorded in 2009. Comments include a history of the metaphor, its position as a defense of refactoring, and, corrections to common misinterpretations. June Kim and Lawrence Wang provide this transcription."
      },
      "date": 1650921284810
    },
    {
      "type": "edit",
      "id": "b5c5b371eb4b04f7",
      "item": {
        "type": "paragraph",
        "id": "b5c5b371eb4b04f7",
        "text": "OOPSLA '92 \nExperience Report\nThe WyCash Portfolio Management System\n\nWard Cunningham \nMarch 26, 1992\nU.S. pension funds, corporations, and banks invest billions of dollars in the \"cash\" markets. Cash securities are generally considered those with a remaining term to maturity of less than one year, but can include those with maturities as long as five years. Incredibly diverse in nature, cash securities are actually negotiated between issuer and buyer, and new security types are frequently introduced into the market. WyCASH+ is a portfolio management system which provides basic accounting, record-keeping and reporting, as well as analytical computations to assist the manager of cash portfolios.\n\nFor the development of WyCASH+, Wyatt Software chose to employ object technology in order to quickly and effectively address the diversity present in the market. Objects help in two ways. First, many security types fit nicely into an inheritance hierarchy which is directly supported by our language (Smalltalk) saving us considerable effort in coding. Second, changing market demands often require massive revisions which we have been able to accomodate because of the modularity intrinsic in a totally object-oriented implementation. Our customers value our responsiveness as much as, if not more than, our product's fit to their current needs.\n\nWe developed the product by incremental growth from a working prototype. Each member of our small engineering team maintains at least general knowledge of all aspects of the roughly four megabytes of source code. This includes some libraries provided by the vendor and others written to our specification by third-party contractors. Mature sections of the program have been revised or rewritten many times providing the consolidation that is key to understanding and continued incremental development\n\nWe believe this process leads to the most appropriate product in the shortest possible time. There are pitfalls, however. Not everyone is comfortable with sudden changes in direction, especially programmers. Here the best antidote is more complete familiarity with the product and its implementation. Changes will be accepted when they are recognized as do-able.\n\nAnother, more serious pitfall is the failure to consolidate. Although immature code may work fine and be completely acceptable to the customer, excess quantities will make a program unmasterable, leading to extreme specialization of programmers and finally an inflexible product. Shipping first time code is like going into debt. A little debt speeds development so long as it is paid back promptly with a rewrite. Objects make the cost of this transaction tolerable. The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt. Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, object-oriented or otherwise."
      },
      "date": 1650921452122
    },
    {
      "type": "add",
      "id": "f7f809f10c8f4225",
      "item": {
        "type": "paragraph",
        "id": "f7f809f10c8f4225",
        "text": "\nThere is little doubt that Wyatt Software will continue to employ object technology. Thoroughly versed in the leading object-oriented languages, our only decision is how best to employ their advantages. The traditional waterfall development cycle has endeavored to avoid programming catastrophy by working out a program in detail before programming begins. We watch with some interest as the community attempts to apply these techniques to objects. However, using our debt analogy, we recognize this amounts to preserving the concept of payment up-front and in-full. The modularity offered by objects and the practice of consolidation make the alternative, incremental growth, both feasible and desirable (but not always comfortable) in the competitive financial software market.\n\nAddendum: The author reflects on the Debt Metaphor in this five minute YouTube video recorded in 2009. Comments include a history of the metaphor, its position as a defense of refactoring, and, corrections to common misinterpretations. June Kim and Lawrence Wang provide this transcription."
      },
      "after": "b5c5b371eb4b04f7",
      "date": 1650921454409
    },
    {
      "type": "edit",
      "id": "f7f809f10c8f4225",
      "item": {
        "type": "paragraph",
        "id": "f7f809f10c8f4225",
        "text": "There is little doubt that Wyatt Software will continue to employ object technology. Thoroughly versed in the leading object-oriented languages, our only decision is how best to employ their advantages. The traditional waterfall development cycle has endeavored to avoid programming catastrophy by working out a program in detail before programming begins. We watch with some interest as the community attempts to apply these techniques to objects. However, using our debt analogy, we recognize this amounts to preserving the concept of payment up-front and in-full. The modularity offered by objects and the practice of consolidation make the alternative, incremental growth, both feasible and desirable (but not always comfortable) in the competitive financial software market.\n\nAddendum: The author reflects on the Debt Metaphor in this five minute YouTube video recorded in 2009. Comments include a history of the metaphor, its position as a defense of refactoring, and, corrections to common misinterpretations. June Kim and Lawrence Wang provide this transcription."
      },
      "date": 1650921548880
    },
    {
      "type": "edit",
      "id": "f7f809f10c8f4225",
      "item": {
        "type": "paragraph",
        "id": "f7f809f10c8f4225",
        "text": "There is little doubt that Wyatt Software will continue to employ object technology. Thoroughly versed in the leading object-oriented languages, our only decision is how best to employ their advantages. The traditional waterfall development cycle has endeavored to avoid programming catastrophy by working out a program in detail before programming begins. We watch with some interest as the community attempts to apply these techniques to objects. However, using our debt analogy, we recognize this amounts to preserving the concept of payment up-front and in-full. The modularity offered by objects and the practice of consolidation make the alternative, incremental growth, both feasible and desirable (but not always comfortable) in the competitive financial software market."
      },
      "date": 1650921560623
    },
    {
      "type": "add",
      "id": "96e51e02d7741f6a",
      "item": {
        "type": "paragraph",
        "id": "96e51e02d7741f6a",
        "text": "\nAddendum: The author reflects on the Debt Metaphor in this five minute YouTube [https://www.youtube.com/user/WardCunningham#p/a/E95B31B1A940296B/2/pqeJFYwnkjE video] recorded in 2009. Comments include a history of the metaphor, its position as a defense of refactoring, and, corrections to common misinterpretations. June Kim and Lawrence Wang provide this transcription."
      },
      "after": "f7f809f10c8f4225",
      "date": 1650921571342
    },
    {
      "type": "edit",
      "id": "96e51e02d7741f6a",
      "item": {
        "type": "paragraph",
        "id": "96e51e02d7741f6a",
        "text": "Addendum: The author reflects on the Debt Metaphor in this five minute YouTube [https://www.youtube.com/user/WardCunningham#p/a/E95B31B1A940296B/2/pqeJFYwnkjE video] recorded in 2009. Comments include a history of the metaphor, its position as a defense of refactoring, and, corrections to common misinterpretations. June Kim and Lawrence Wang provide this [http://wiki.c2.com/?WardExplainsDebtMetaphor transcription]."
      },
      "date": 1650921609238
    },
    {
      "item": {
        "type": "factory",
        "id": "c849e81fd2fce86e"
      },
      "id": "c849e81fd2fce86e",
      "type": "add",
      "after": "96e51e02d7741f6a",
      "date": 1650921633625
    },
    {
      "type": "edit",
      "id": "c849e81fd2fce86e",
      "item": {
        "type": "video",
        "id": "c849e81fd2fce86e",
        "text": "YOUTUBE pqeJFYwnkjE"
      },
      "date": 1650921646623
    },
    {
      "type": "edit",
      "id": "c849e81fd2fce86e",
      "item": {
        "type": "video",
        "id": "c849e81fd2fce86e",
        "text": "YOUTUBE pqeJFYwnkjE\n[[Debt Metaphor]]"
      },
      "date": 1650921669377
    },
    {
      "type": "edit",
      "id": "96e51e02d7741f6a",
      "item": {
        "type": "paragraph",
        "id": "96e51e02d7741f6a",
        "text": "Addendum: The author reflects on the [[Debt Metaphor]] in this five minute YouTube [https://www.youtube.com/user/WardCunningham#p/a/E95B31B1A940296B/2/pqeJFYwnkjE video] recorded in 2009. Comments include a history of the metaphor, its position as a defense of refactoring, and, corrections to common misinterpretations. June Kim and Lawrence Wang provide this [http://wiki.c2.com/?WardExplainsDebtMetaphor transcription]."
      },
      "date": 1650922633704
    }
  ]
}