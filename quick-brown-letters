{
  "title": "Quick Brown Letters",
  "story": [
    {
      "type": "paragraph",
      "id": "b5ee79c2ab6e0270",
      "text": "We work out again the sample character adjacency graph mentioned in [[Graphviz Tips Remembered]]."
    },
    {
      "type": "paragraph",
      "id": "79f3222883e56ecd",
      "text": "\"the quick brown fox jumped over the lazy dogs back\""
    },
    {
      "type": "frame",
      "id": "d28867297e3b4f1f",
      "text": "http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\nHEIGHT 240"
    },
    {
      "type": "markdown",
      "id": "dcf63055151a61af",
      "text": "Add code here to extract nodes and relations from _json_ and add them to _graph_. Remember node ids in _nids_."
    },
    {
      "type": "code",
      "id": "e566389203a4eea2",
      "text": "const t = ch =>\n  'aeiou'.includes(ch) ? 'Vowel' :\n  [\" \",\"\\n\"].includes(ch) ? 'Space' :\n  'Consonant'"
    },
    {
      "type": "code",
      "id": "d1ea4d743e3c01c9",
      "text": "const n = i => {\n  if (nids[json[i]] == undefined) {\n    nids[json[i]] = \n      graph.addNode(t(json[i]), {name:json[i]})\n  }\n  return nids[json[i]]\n}"
    },
    {
      "type": "code",
      "id": "c552922cec666ac0",
      "text": "for (let i = 0; i<json.length-1; i++) {\n  graph.addRel('',n(i),n(i+1))\n}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Quick Brown Letters",
        "story": [
          {
            "type": "paragraph",
            "id": "b5ee79c2ab6e0270",
            "text": "Describe here the diagramming tool to be translated and how one can get a json formatted description out of it."
          },
          {
            "type": "frame",
            "id": "d28867297e3b4f1f",
            "text": "http://hsc.fed.wiki/assets/scripts/import-foreign-json.html\nHEIGHT 240"
          },
          {
            "type": "markdown",
            "id": "dcf63055151a61af",
            "text": "Add code here to extract nodes and relations from _json_ and add them to _graph_. Remember node ids in _nids_."
          },
          {
            "type": "code",
            "id": "c552922cec666ac0",
            "text": "nids.m = graph.addNode('Man', {name:'Pat'})\nnids.w = graph.addNode('Woman', {name:'Jane'})\nnids.c = graph.addNode('Child', {name:'Ward'})"
          },
          {
            "type": "code",
            "id": "525c4b38800ac571",
            "text": "graph.addRel('Mother', nids.w, nids.c)\ngraph.addRel('Father', nids.m, nids.c)"
          }
        ]
      },
      "date": 1667931735132
    },
    {
      "type": "remove",
      "id": "525c4b38800ac571",
      "date": 1667931793180
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "graph.addNode('Input', {name:json})"
      },
      "date": 1667931828836
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "for (let i = 0; i<json.length; i++) {\ngraph.addNode('Letter', {name:json[i]})\n}"
      },
      "date": 1667931930864
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "for (let i = 0; i<json.length; i++) {\n  if (!nids[json[i]) {\ngraph.addNode('Letter', {name:json[i]})\n}"
      },
      "date": 1667932038437
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "for (let i = 0; i<json.length; i++) {\n  if (nids[json[i] == undefined) {\n    nids[json[i] = \n      graph.addNode('Letter', {name:json[i]})\n  }\n}"
      },
      "date": 1667932147247
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "for (let i = 0; i<json.length; i++) {\n  if (nids[json[i] == undefined) {\n    nids[json[i]] = \n      graph.addNode('Letter', {name:json[i]})\n  }\n}"
      },
      "date": 1667932168990
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "for (let i = 0; i<json.length; i++) {\n  if (nids[json[i]] == undefined) {\n    nids[json[i]] = \n      graph.addNode('Letter', {name:json[i]})\n  }\n}"
      },
      "date": 1667932216102
    },
    {
      "item": {
        "type": "factory",
        "id": "d1ea4d743e3c01c9"
      },
      "id": "d1ea4d743e3c01c9",
      "type": "add",
      "after": "c552922cec666ac0",
      "date": 1667932347186
    },
    {
      "type": "edit",
      "id": "d1ea4d743e3c01c9",
      "item": {
        "type": "code",
        "id": "d1ea4d743e3c01c9",
        "text": "const n = i => {if(ni"
      },
      "date": 1667932425408
    },
    {
      "type": "edit",
      "id": "d1ea4d743e3c01c9",
      "item": {
        "type": "code",
        "id": "d1ea4d743e3c01c9",
        "text": "const n = i => {\n  if (nids[json[i]] == undefined) {\n    nids[json[i]] = \n      graph.addNode('Letter', {name:json[i]})\n  }\n  return nids[json[i]]\n}\n"
      },
      "date": 1667932474402
    },
    {
      "id": "d1ea4d743e3c01c9",
      "type": "move",
      "order": [
        "b5ee79c2ab6e0270",
        "d28867297e3b4f1f",
        "dcf63055151a61af",
        "d1ea4d743e3c01c9",
        "c552922cec666ac0"
      ],
      "date": 1667932476970
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "for (let i = 0; i<json.length; i++) {\n  n(i)\n}"
      },
      "date": 1667932522359
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "for (let i = 0; i<json.length-1; i++) {\n  graph.addRel('Follow',n(i),n(i+1))\n}"
      },
      "date": 1667932605507
    },
    {
      "type": "edit",
      "id": "d1ea4d743e3c01c9",
      "item": {
        "type": "code",
        "id": "d1ea4d743e3c01c9",
        "text": "const t = ch =>\n  'aeiou'.includes(ch) ?\n  'Volue' : 'const n = i => {\n  if (nids[json[i]] == undefined) {\n    nids[json[i]] = \n      graph.addNode('Letter', {name:json[i]})\n  }\n  return nids[json[i]]\n}\n"
      },
      "date": 1667950270966
    },
    {
      "type": "edit",
      "id": "d1ea4d743e3c01c9",
      "item": {
        "type": "code",
        "id": "d1ea4d743e3c01c9",
        "text": "const t = ch =>\n  'aeiou'.includes(ch) ?\n  'Vowle' : 'const n = i => {\n  if (nids[json[i]] == undefined) {\n    nids[json[i]] = \n      graph.addNode('Letter', {name:json[i]})\n  }\n  return nids[json[i]]\n}\n"
      },
      "date": 1667950308521
    },
    {
      "type": "edit",
      "id": "d1ea4d743e3c01c9",
      "item": {
        "type": "code",
        "id": "d1ea4d743e3c01c9",
        "text": "const t = ch =>\n  'aeiou'.includes(ch) ?\n  'Vowel' : 'Consonant'\n\nconst n = i => {\n  if (nids[json[i]] == undefined) {\n    nids[json[i]] = \n      graph.addNode('Letter', {name:json[i]})\n  }\n  return nids[json[i]]\n}\n"
      },
      "date": 1667950346247
    },
    {
      "type": "edit",
      "id": "d1ea4d743e3c01c9",
      "item": {
        "type": "code",
        "id": "d1ea4d743e3c01c9",
        "text": "const t = ch =>\n  'aeiou'.includes(ch) ?\n  'Vowel' : ch == \" \" ?\n  'Space' : 'Consonant'\n\nconst n = i => {\n  if (nids[json[i]] == undefined) {\n    nids[json[i]] = \n      graph.addNode(t(json[i]), {name:json[i]})\n  }\n  return nids[json[i]]\n}\n"
      },
      "date": 1667950471348
    },
    {
      "type": "edit",
      "id": "c552922cec666ac0",
      "item": {
        "type": "code",
        "id": "c552922cec666ac0",
        "text": "for (let i = 0; i<json.length-1; i++) {\n  graph.addRel('',n(i),n(i+1))\n}"
      },
      "date": 1667950550504
    },
    {
      "item": {
        "type": "factory",
        "id": "e566389203a4eea2"
      },
      "id": "e566389203a4eea2",
      "type": "add",
      "after": "c552922cec666ac0",
      "date": 1667950703300
    },
    {
      "type": "edit",
      "id": "d1ea4d743e3c01c9",
      "item": {
        "type": "code",
        "id": "d1ea4d743e3c01c9",
        "text": "const n = i => {\n  if (nids[json[i]] == undefined) {\n    nids[json[i]] = \n      graph.addNode(t(json[i]), {name:json[i]})\n  }\n  return nids[json[i]]\n}"
      },
      "date": 1667950716507
    },
    {
      "type": "edit",
      "id": "e566389203a4eea2",
      "item": {
        "type": "code",
        "id": "e566389203a4eea2",
        "text": "const t = ch =>\n  'aeiou'.includes(ch) ?\n  'Vowel' : ch == \" \" ?\n  'Space' : 'Consonant'"
      },
      "date": 1667950722820
    },
    {
      "id": "e566389203a4eea2",
      "type": "move",
      "order": [
        "b5ee79c2ab6e0270",
        "d28867297e3b4f1f",
        "dcf63055151a61af",
        "e566389203a4eea2",
        "d1ea4d743e3c01c9",
        "c552922cec666ac0"
      ],
      "date": 1667950725226
    },
    {
      "type": "edit",
      "id": "b5ee79c2ab6e0270",
      "item": {
        "type": "paragraph",
        "id": "b5ee79c2ab6e0270",
        "text": "We work out again the sample graph of character adjacency mentioned in [[Graphviz Remembered]]."
      },
      "date": 1667950842909
    },
    {
      "type": "edit",
      "id": "b5ee79c2ab6e0270",
      "item": {
        "type": "paragraph",
        "id": "b5ee79c2ab6e0270",
        "text": "We work out again the sample character adjacency graph mentioned in [[Graphviz Tips Remembered]]."
      },
      "date": 1667950874224
    },
    {
      "type": "add",
      "id": "79f3222883e56ecd",
      "item": {
        "type": "factory",
        "id": "79f3222883e56ecd",
        "text": "\"the quick brown fox jumped over the lazy dogs back\""
      },
      "after": "b5ee79c2ab6e0270",
      "date": 1667950913661
    },
    {
      "type": "edit",
      "id": "79f3222883e56ecd",
      "item": {
        "type": "code",
        "id": "79f3222883e56ecd",
        "text": "\"the quick brown fox jumped over the lazy dogs back\" "
      },
      "date": 1667950919013
    },
    {
      "type": "edit",
      "id": "79f3222883e56ecd",
      "item": {
        "type": "paragraph",
        "id": "79f3222883e56ecd",
        "text": "\"the quick brown fox jumped over the lazy dogs back\""
      },
      "date": 1667950952776
    },
    {
      "type": "edit",
      "id": "e566389203a4eea2",
      "item": {
        "type": "code",
        "id": "e566389203a4eea2",
        "text": "const t = ch =>\n  'aeiou'.includes(ch) ? 'Vowel' :\n  [\" \",\"\\n\"].includes(ch) ? 'Space' :\n  'Consonant'"
      },
      "date": 1667951072396
    },
    {
      "type": "fork",
      "site": "ward.dojo.fed.wiki",
      "date": 1668899455673
    }
  ]
}