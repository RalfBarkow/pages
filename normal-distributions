{
  "title": "Normal Distributions",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "We compare various approximations to normal distributions starting with Math.random(). [https://stackoverflow.com/questions/75677/converting-a-uniform-distribution-to-a-normal-distribution github]"
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = ()=>ran()-0.5\nlet tri = ()=>ran()-ran()\nlet clt = ()=>sum(12, uni)/2\nlet trg = ()=>sqrt(-2*log(ran()))*cos(2*pi*ran())/2\nlet pwr = ()=>pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = trg()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "http://three.ward.asia.wiki.org/assets/pages/snippet-template/basic.html?snippet-template\nHEIGHT 400"
    },
    {
      "type": "paragraph",
      "id": "06e866e78703f74e",
      "text": "We abbreviate aggressively so that implementations can be easily compared. "
    },
    {
      "type": "paragraph",
      "id": "2c8b210ad6a03e06",
      "text": "uni — uniform over -1/2 to 1/2"
    },
    {
      "type": "paragraph",
      "id": "c373af81aec1aae3",
      "text": "tri — triangular over -1 to 1"
    },
    {
      "type": "paragraph",
      "id": "c3b1b49bbedaa742",
      "text": "clt — central limit theorem"
    },
    {
      "type": "paragraph",
      "id": "dec1f19ae114b721",
      "text": "trg — trigonometric solution"
    },
    {
      "type": "paragraph",
      "id": "708a612df758eb52",
      "text": "pwr — raised to a power, from [https://threejs-journey.xyz/lessons/18 lesson]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Normal Distributions",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\nconst geometry = new THREE.BoxGeometry(1, 1, 1)\nconst material = new THREE.MeshNormalMaterial()\nconst box = new THREE.Mesh(geometry, material)\nscene.add(box)\ntick = () => box.rotation.y += 0.01\n\n\n"
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "http://three.ward.asia.wiki.org/assets/pages/snippet-template/basic.html?snippet-template\nHEIGHT 400"
          }
        ]
      },
      "date": 1614391055563
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We compare various approximations to normal distributions starting with Math.random()."
      },
      "date": 1614391097702
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "let geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){\n  pos[i] = (Math.random()-0.5) * 2}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614391154923
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const uni = () => Math.random()-0.5\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = uni()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614391400015
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = uni()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614391443999
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = tri()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614391449545
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We compare various approximations to normal distributions starting with Math.random(). [https://stackoverflow.com/questions/75677/converting-a-uniform-distribution-to-a-normal-distribution github]"
      },
      "date": 1614391710359
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\nconst clt = () => \n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = tri()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614391835533
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\nconst clt = () => Array(12).fill(0)\n  .reduce((a,b)=>a+uni(),0)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = clt()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614392644722
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\nconst clt = () => Array(12).fill(0)\n  .reduce((a,b)=>a+uni(),0)/12\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = clt()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614392714137
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\nconst clt = () => Array(12).fill(0)\n  .reduce((a,b)=>a+uni(),0)/4\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = clt()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614392727321
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\nconst clt = () => Array(12).fill(0)\n  .reduce((a,b)=>a+uni(),0)/2\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = clt()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614392743826
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\nconst clt = () => sum(12, uni)/2\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = clt()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614392929650
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\nconst clt = () => sum(12, uni)/2\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = uni()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394018291
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst uni = () => Math.random()-0.5\nconst tri = () => Math.random()-Math.random()\nconst clt = () => sum(12, uni)/2\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = tri()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394040707
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),2.5)*uni()>0?1:-1\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = tri()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394416522
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),2.5)*uni()>0?1:-1\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394436042
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),3)*ran()>.5?1:-1\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394635647
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),3)*(ran()>.5?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394655168
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),1.5)*(ran()>.5?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394692729
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),1)*(ran()>.5?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394785489
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),1.1)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394830376
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),2)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394863865
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),1.5)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394888327
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nconst pow = () => Math.pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614394909354
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nconst ran = Math.random\nconst uni = () => ran()-0.5\nconst tri = () => ran()-Math.random()\nconst clt = () => sum(12, uni)/2\nlet trg = () => sqrt(-2*log(R1))*cos(2*pi*R2)\nconst pow = () => Math.pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614398224376
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = () => ran()-0.5\nlet tri = () => ran()-Math.random()\nlet clt = () => sum(12, uni)/2\nlet trg = () => sqrt(-2*log(R1))*cos(2*pi*R2)\nlet pow = () => pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pow()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614398382165
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = () => ran()-0.5\nlet tri = () => ran()-Math.random()\nlet clt = () => sum(12, uni)/2\nlet trg = () => sqrt(-2*log(R1))*cos(2*pi*R2)\nlet pwr = () => pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = trg()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614398454432
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = () => ran()-0.5\nlet tri = () => ran()-Math.random()\nlet clt = () => sum(12, uni)/2\nlet trg = () => sqrt(-2*log(ran()))*cos(2*pi*ran())\nlet pwr = () => pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = trg()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614398478268
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = () => ran()-0.5\nlet tri = () => ran()-Math.random()\nlet clt = () => sum(12, uni)/2\nlet trg = () => sqrt(-2*log(ran()))*cos(2*pi*ran())/2\nlet pwr = () => pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = trg()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614398508224
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = ()=>ran()-0.5\nlet tri = ()=>ran()-Math.random()\nlet clt = ()=>sum(12, uni)/2\nlet trg = ()=>sqrt(-2*log(ran()))*cos(2*pi*ran())/2\nlet pwr = ()=>pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = trg()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614398621412
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = ()=>ran()-0.5\nlet tri = ()=>ran()-ran()\nlet clt = ()=>sum(12, uni)/2\nlet trg = ()=>sqrt(-2*log(ran()))*cos(2*pi*ran())/2\nlet pwr = ()=>pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = clt()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614398887463
    },
    {
      "item": {
        "type": "factory",
        "id": "2c8b210ad6a03e06"
      },
      "id": "2c8b210ad6a03e06",
      "type": "add",
      "after": "6cf52409eec3988c",
      "date": 1614399247373
    },
    {
      "type": "edit",
      "id": "2c8b210ad6a03e06",
      "item": {
        "type": "paragraph",
        "id": "2c8b210ad6a03e06",
        "text": "uni — uniform over -1/2 to 1/2"
      },
      "date": 1614399329970
    },
    {
      "type": "add",
      "id": "c373af81aec1aae3",
      "item": {
        "type": "paragraph",
        "id": "c373af81aec1aae3",
        "text": "tri — triangular over -1 to 1"
      },
      "after": "2c8b210ad6a03e06",
      "date": 1614399370465
    },
    {
      "type": "add",
      "id": "c3b1b49bbedaa742",
      "item": {
        "type": "paragraph",
        "id": "c3b1b49bbedaa742",
        "text": "clt — central limit theorem"
      },
      "after": "c373af81aec1aae3",
      "date": 1614399434163
    },
    {
      "type": "add",
      "id": "dec1f19ae114b721",
      "item": {
        "type": "paragraph",
        "id": "dec1f19ae114b721",
        "text": "trg — trancendental functions"
      },
      "after": "c3b1b49bbedaa742",
      "date": 1614399496561
    },
    {
      "type": "edit",
      "id": "dec1f19ae114b721",
      "item": {
        "type": "paragraph",
        "id": "dec1f19ae114b721",
        "text": "trg — trigonmetric and other transcendental functions"
      },
      "date": 1614399578466
    },
    {
      "type": "edit",
      "id": "dec1f19ae114b721",
      "item": {
        "type": "paragraph",
        "id": "dec1f19ae114b721",
        "text": "trg — trigonometric solution"
      },
      "date": 1614399624135
    },
    {
      "type": "add",
      "id": "708a612df758eb52",
      "item": {
        "type": "paragraph",
        "id": "708a612df758eb52",
        "text": "pwr — raised to a power, "
      },
      "after": "dec1f19ae114b721",
      "date": 1614399702248
    },
    {
      "type": "edit",
      "id": "708a612df758eb52",
      "item": {
        "type": "paragraph",
        "id": "708a612df758eb52",
        "text": "pwr — raised to a power, from [https://threejs-journey.xyz/lessons/18 lesson]"
      },
      "date": 1614399728822
    },
    {
      "type": "add",
      "id": "06e866e78703f74e",
      "item": {
        "type": "paragraph",
        "id": "06e866e78703f74e",
        "text": "We abbreviate aggressively so that implementations can be easily compared. "
      },
      "after": "708a612df758eb52",
      "date": 1614399939502
    },
    {
      "id": "06e866e78703f74e",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "6cf52409eec3988c",
        "06e866e78703f74e",
        "2c8b210ad6a03e06",
        "c373af81aec1aae3",
        "c3b1b49bbedaa742",
        "dec1f19ae114b721",
        "708a612df758eb52"
      ],
      "date": 1614399942180
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = ()=>ran()-0.5\nlet tri = ()=>ran()-ran()\nlet clt = ()=>sum(12, uni)/2\nlet trg = ()=>sqrt(-2*log(ran()))*cos(2*pi*ran())/2\nlet pwr = ()=>pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = pwr()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614400626535
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = ()=>ran()-0.5\nlet tri = ()=>ran()-ran()\nlet clt = ()=>sum(12, uni)/2\nlet trg = ()=>sqrt(-2*log(ran()))*cos(2*pi*ran())/2\nlet pwr = ()=>pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = tri()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614401316933
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "function sum (n,f) {\n  let s = 0\n  for (let i=0; i<n; i++) s += f()\n  return s\n}\n\nlet ran = Math.random\nlet pow = Math.pow\nlet log = Math.log\nlet cos = Math.cos\nlet sqrt = Math.sqrt\nlet pi = Math.PI\n\nlet uni = ()=>ran()-0.5\nlet tri = ()=>ran()-ran()\nlet clt = ()=>sum(12, uni)/2\nlet trg = ()=>sqrt(-2*log(ran()))*cos(2*pi*ran())/2\nlet pwr = ()=>pow(ran(),3)*(uni()>0?1:-1)\n\nlet geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)\nfor(let i=0; i<count*3; i++){pos[i] = trg()}\ngeo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))\n\nlet mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xff88cc})\n\nlet points = new THREE.Points(geo, mat)\nscene.add(points)\n"
      },
      "date": 1614401885481
    },
    {
      "type": "fork",
      "site": "three.ward.asia.wiki.org",
      "date": 1675233709949
    }
  ]
}