{
  "title": "Collect Low-Level Protocol",
  "story": [
    {
      "type": "paragraph",
      "id": "5f062b1f4b7666e0",
      "text": "We have begun writing a complete pattern language for object-oriented programming. An example from this language is the pattern entitled [[Collect Low-Level Protocol]]. Here it is in abbreviated form: "
    },
    {
      "type": "markdown",
      "id": "af7868c921899bd7",
      "text": "> Once you have initially decomposed a system into objects [Objects from the User's World] and refined the objects [Engines and Holders] you need to begin collecting useful functionality that doesn't particularly fit into any single object. Often many objects need to communicate with low-level (bit- or byte-oriented) parts of the system. For example, external files can have complex or highly encoded formats that require substantial byte or even bit manipulation to interpret. Collect all necessary protocol for decoding file formats or any other particular low-level task into an object specifically designed for the purpose. Do so even if you might otherwise spread it around several other objects. Once you have done this you are ready to begin testing and refining your objects [Elegance through Debugging]. "
    },
    {
      "type": "pagefold",
      "id": "ba484b047b44c69b",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f081d6dd27bd5be2",
      "text": "[PDF] wiley.com\nAn extensible probe architecture for network protocol performance measurement\nD Watson, GR Malan, F Jahanian - Software: Practice and …, 2004 - Wiley Online Library\n… Many tools exist to collect low-level protocol information including tcpdump [9] and CoralReef \n[10]. Both tcpdump and CoralReef acquire network frames from an underlying data source …\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Collect Low-Level Protocol",
        "story": []
      },
      "date": 1657616348526
    },
    {
      "item": {
        "type": "factory",
        "id": "f081d6dd27bd5be2"
      },
      "id": "f081d6dd27bd5be2",
      "type": "add",
      "date": 1657616357283
    },
    {
      "type": "edit",
      "id": "f081d6dd27bd5be2",
      "item": {
        "type": "paragraph",
        "id": "f081d6dd27bd5be2",
        "text": "[PDF] wiley.com\nAn extensible probe architecture for network protocol performance measurement\nD Watson, GR Malan, F Jahanian - Software: Practice and …, 2004 - Wiley Online Library\n… Many tools exist to collect low-level protocol information including tcpdump [9] and CoralReef \n[10]. Both tcpdump and CoralReef acquire network frames from an underlying data source …\n"
      },
      "date": 1657616360410
    },
    {
      "item": {
        "type": "factory",
        "id": "ba484b047b44c69b"
      },
      "id": "ba484b047b44c69b",
      "type": "add",
      "after": "f081d6dd27bd5be2",
      "date": 1657617846237
    },
    {
      "type": "edit",
      "id": "ba484b047b44c69b",
      "item": {
        "type": "pagefold",
        "id": "ba484b047b44c69b",
        "text": "~"
      },
      "date": 1657617849888
    },
    {
      "id": "ba484b047b44c69b",
      "type": "move",
      "order": [
        "ba484b047b44c69b",
        "f081d6dd27bd5be2"
      ],
      "date": 1657617852485
    },
    {
      "id": "5f062b1f4b7666e0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5f062b1f4b7666e0",
        "text": "We have begun writing a complete pattern language for object-oriented programming. An example from this language is the pattern entitled [[Collect Low-Level Protocol]]. Here it is in abbreviated form: "
      },
      "date": 1657617854937
    },
    {
      "id": "af7868c921899bd7",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "af7868c921899bd7",
        "text": "> Once you have initially decomposed a system into objects [Objects from the User's World] and refined the objects [Engines and Holders] you need to begin collecting useful functionality that doesn't particularly fit into any single object. Often many objects need to communicate with low-level (bit- or byte-oriented) parts of the system. For example, external files can have complex or highly encoded formats that require substantial byte or even bit manipulation to interpret. Collect all necessary protocol for decoding file formats or any other particular low-level task into an object specifically designed for the purpose. Do so even if you might otherwise spread it around several other objects. Once you have done this you are ready to begin testing and refining your objects [Elegance through Debugging]. "
      },
      "after": "5f062b1f4b7666e0",
      "date": 1657617858154
    }
  ]
}