{
  "title": "Substitution",
  "story": [
    {
      "type": "markdown",
      "id": "f26eb4298b64d966",
      "text": "is the primary mechanism for computation and for proof in algebraic systems. \n"
    },
    {
      "type": "markdown",
      "id": "c8abda4679c1ad81",
      "text": "In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with [[Pattern Matching]] and *substitution* over strings of symbols."
    },
    {
      "type": "pagefold",
      "id": "c38ed2cb9b088378",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "c9d8beff346d99e8",
      "text": "**But,**"
    },
    {
      "type": "paragraph",
      "id": "53d6331a758b4669",
      "text": "No need to appeal to Mathematica. [[Term Rewriting]], the foundation of Mathematica, is Turing-complete. ([[Konrad Hinsen]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170616906611663Vouhr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix])"
    },
    {
      "type": "pagefold",
      "id": "ae6e486223dd4040",
      "text": "~",
      "alias": "c38ed2cb9b088378"
    },
    {
      "type": "markdown",
      "id": "8cee46d15eecd907",
      "text": "Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
    },
    {
      "type": "paragraph",
      "id": "ec1d844b1792f096",
      "text": "Substitution has always been difficult to show in mathematical notation because the form being substituted into changes when the substitution is enacted. Below, double-struck tortoise shell brackets are used as a compromise notation for the substitute operation."
    },
    {
      "type": "code",
      "id": "9cfee6babdb61b11",
      "text": "〘A C E〙 ☞ substitute A for C in E"
    },
    {
      "type": "paragraph",
      "id": "0037c66e202ac6ed",
      "text": "Substitution is a ternary operation, involving three patterns that we have differentiated by their sequential position in the shell-bracket notation."
    },
    {
      "type": "pagefold",
      "id": "dda87de125bee39b",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "1ad75de525a73187",
      "text": "William Bricken Ph.D, Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding (Unary press, 2019), p. 47–48."
    },
    {
      "type": "code",
      "id": "14b553768c21ac48",
      "text": "〘PUT FOR INTO〙 ☞ substitute PUT for FOR in INTO"
    },
    {
      "type": "markdown",
      "id": "b323cbc69e31319b",
      "text": "- The INTO-form is the structure that is being changed by the substitution. \n- The PUT-form is the structure that is being substituted into the INTO-form, in the process changing the structure of the INTO-form. \n- The FOR-form is the sub-structure within the INTO-form being replaced by the PUT-form."
    },
    {
      "type": "paragraph",
      "id": "212d8f0694292e3b",
      "text": "Implicit within the substitution operation is an ability to locate or match the FOR structure within the INTO structure. This mechanism is far from trivial. The match might fail, in which case the substitution returns the INTO-form unchanged. The match might succeed more than once within the same INTO-form. This then requires several delicate implementation decisions that are considered in Volume II. In particular, it is critical whether substitution is partial (only some matches are changed) or total (all matches must be changed). When substitutions are nested or sequenced, additional implementation decisions are needed to [[decide]] how they might interact. At times during the course of a computation, for example, it is desirable to delay implementation of some substitutions until specific conditions are met."
    },
    {
      "type": "markdown",
      "id": "b919e6b75fddb6a9",
      "text": "The form of substitution〘A C E〙is, like the √ symbol, an instruction rather than a result. With pattern-substitution, axioms depict a **before-and-after** picture."
    },
    {
      "type": "code",
      "id": "58bbbc860ff4fc03",
      "text": "before \nE = 〔X Y Z〕"
    },
    {
      "type": "code",
      "id": "2c3fbc87567075a1",
      "text": "during \nE ⇒ 〘Q Z E〙"
    },
    {
      "type": "code",
      "id": "b5ef7d38f7b36971",
      "text": "after \nE = 〔X Y Q〕"
    },
    {
      "type": "paragraph",
      "id": "9a7ca2b1e6c11ad4",
      "text": "An equal sign is usually bidirectional, it doesn’t matter which side of the equation we consider as before. In contrast, substitution shows us a specified before, the INTO form E. The result is the entire expression〘A C E〙. To maintain consistency, all C in E must be replaced by A. Substitution must be total, considering all content forms as well as their contents."
    },
    {
      "type": "paragraph",
      "id": "564c8fde7c071b47",
      "text": "Substitution includes several structural identities that define its behavior in any algebra. […]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Substitution",
        "story": []
      },
      "date": 1659786957696
    },
    {
      "id": "f26eb4298b64d966",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "f26eb4298b64d966",
        "text": "p. 47: Substitution is the primary mechanism for computation and for proof in algebraic systems. In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with pattern-matching and substitution over strings of symbols. Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
      },
      "date": 1659786971993
    },
    {
      "item": {
        "type": "factory",
        "id": "dda87de125bee39b"
      },
      "id": "dda87de125bee39b",
      "type": "add",
      "after": "f26eb4298b64d966",
      "date": 1659786982803
    },
    {
      "type": "edit",
      "id": "dda87de125bee39b",
      "item": {
        "type": "pagefold",
        "id": "dda87de125bee39b",
        "text": "~"
      },
      "date": 1659786986357
    },
    {
      "id": "1ad75de525a73187",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1ad75de525a73187",
        "text": "William Bricken Ph.D, Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding (Unary press, 2019)."
      },
      "after": "f26eb4298b64d966",
      "date": 1659786989655
    },
    {
      "id": "dda87de125bee39b",
      "type": "move",
      "order": [
        "f26eb4298b64d966",
        "dda87de125bee39b",
        "1ad75de525a73187"
      ],
      "date": 1659786993568
    },
    {
      "type": "edit",
      "id": "f26eb4298b64d966",
      "item": {
        "type": "markdown",
        "id": "f26eb4298b64d966",
        "text": "Substitution is the primary mechanism for computation and for proof in algebraic systems. In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with pattern-matching and substitution over strings of symbols. Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
      },
      "date": 1659787000071
    },
    {
      "type": "edit",
      "id": "1ad75de525a73187",
      "item": {
        "type": "paragraph",
        "id": "1ad75de525a73187",
        "text": "William Bricken Ph.D, Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding (Unary press, 2019), p. 47."
      },
      "date": 1659787006787
    },
    {
      "type": "edit",
      "id": "f26eb4298b64d966",
      "item": {
        "type": "markdown",
        "id": "f26eb4298b64d966",
        "text": "Substitution is the primary mechanism for computation and for proof in algebraic systems. In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with [[pattern-matching]] and substitution over strings of symbols. Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
      },
      "date": 1659787034881
    },
    {
      "type": "edit",
      "id": "f26eb4298b64d966",
      "item": {
        "type": "markdown",
        "id": "f26eb4298b64d966",
        "text": "Substitution is the primary mechanism for computation and for proof in algebraic systems. In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with [[Pattern-Matching]] and *substitution* over strings of symbols. Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
      },
      "date": 1663998722100
    },
    {
      "type": "edit",
      "id": "f26eb4298b64d966",
      "item": {
        "type": "markdown",
        "id": "f26eb4298b64d966",
        "text": "is the primary mechanism for computation and for proof in algebraic systems. In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with [[Pattern-Matching]] and *substitution* over strings of symbols. Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
      },
      "date": 1680958688871
    },
    {
      "type": "edit",
      "id": "f26eb4298b64d966",
      "item": {
        "type": "markdown",
        "id": "f26eb4298b64d966",
        "text": "is the primary mechanism for computation and for proof in algebraic systems. \n"
      },
      "date": 1680958694820
    },
    {
      "type": "add",
      "id": "c8abda4679c1ad81",
      "item": {
        "type": "markdown",
        "id": "c8abda4679c1ad81",
        "text": "In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with [[Pattern-Matching]] and *substitution* over strings of symbols. Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
      },
      "after": "f26eb4298b64d966",
      "date": 1680958695898
    },
    {
      "type": "edit",
      "id": "c8abda4679c1ad81",
      "item": {
        "type": "markdown",
        "id": "c8abda4679c1ad81",
        "text": "In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with [[Pattern Matching]] and *substitution* over strings of symbols. Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
      },
      "date": 1680958710197
    },
    {
      "item": {
        "type": "factory",
        "id": "ec1d844b1792f096"
      },
      "id": "ec1d844b1792f096",
      "type": "add",
      "after": "1ad75de525a73187",
      "date": 1686155674842
    },
    {
      "id": "ec1d844b1792f096",
      "type": "move",
      "order": [
        "f26eb4298b64d966",
        "c8abda4679c1ad81",
        "ec1d844b1792f096",
        "dda87de125bee39b",
        "1ad75de525a73187"
      ],
      "date": 1686155676848
    },
    {
      "type": "edit",
      "id": "ec1d844b1792f096",
      "item": {
        "type": "paragraph",
        "id": "ec1d844b1792f096",
        "text": "Substitution has always been difficult to show in mathematical notation because the form being substituted into changes when the substitution is enacted. Below, double-struck tortoise shell brackets are used as a compromise notation for the substitute operation."
      },
      "date": 1686155678011
    },
    {
      "item": {
        "type": "factory",
        "id": "9cfee6babdb61b11"
      },
      "id": "9cfee6babdb61b11",
      "type": "add",
      "after": "1ad75de525a73187",
      "date": 1686155715653
    },
    {
      "id": "9cfee6babdb61b11",
      "type": "move",
      "order": [
        "f26eb4298b64d966",
        "c8abda4679c1ad81",
        "ec1d844b1792f096",
        "9cfee6babdb61b11",
        "dda87de125bee39b",
        "1ad75de525a73187"
      ],
      "date": 1686155717108
    },
    {
      "type": "edit",
      "id": "9cfee6babdb61b11",
      "item": {
        "type": "code",
        "id": "9cfee6babdb61b11",
        "text": "〘A C E〙 ☞ substitute A for C in E"
      },
      "date": 1686155719659
    },
    {
      "item": {
        "type": "factory",
        "id": "0037c66e202ac6ed"
      },
      "id": "0037c66e202ac6ed",
      "type": "add",
      "after": "1ad75de525a73187",
      "date": 1686155741705
    },
    {
      "id": "0037c66e202ac6ed",
      "type": "move",
      "order": [
        "f26eb4298b64d966",
        "c8abda4679c1ad81",
        "ec1d844b1792f096",
        "9cfee6babdb61b11",
        "0037c66e202ac6ed",
        "dda87de125bee39b",
        "1ad75de525a73187"
      ],
      "date": 1686155743196
    },
    {
      "type": "edit",
      "id": "0037c66e202ac6ed",
      "item": {
        "type": "paragraph",
        "id": "0037c66e202ac6ed",
        "text": "Substitution is a ternary operation, involving three patterns that we have differentiated by their sequential position in the shell-bracket notation."
      },
      "date": 1686155744529
    },
    {
      "type": "edit",
      "id": "c8abda4679c1ad81",
      "item": {
        "type": "markdown",
        "id": "c8abda4679c1ad81",
        "text": "In general, Wolfram’s *Mathematica* program demonstrates that practically all calculation, computation and symbolic demonstration can be achieved with [[Pattern Matching]] and *substitution* over strings of symbols."
      },
      "date": 1706198421596
    },
    {
      "type": "add",
      "id": "8cee46d15eecd907",
      "item": {
        "type": "markdown",
        "id": "8cee46d15eecd907",
        "text": "Furthermore, when a mathematical system can be encoded in symbolic form, computation and demonstration in that system can be fully automated."
      },
      "after": "c8abda4679c1ad81",
      "date": 1706198431715
    },
    {
      "type": "add",
      "id": "391e726d6095c044",
      "item": {
        "type": "markdown",
        "id": "391e726d6095c044",
        "text": "But,"
      },
      "after": "c8abda4679c1ad81",
      "date": 1706198457884
    },
    {
      "id": "c9d8beff346d99e8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c9d8beff346d99e8",
        "text": "But,"
      },
      "after": "c8abda4679c1ad81",
      "attribution": {
        "page": "2024-01-25"
      },
      "date": 1706199006544
    },
    {
      "type": "remove",
      "id": "391e726d6095c044",
      "date": 1706199009005
    },
    {
      "id": "53d6331a758b4669",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "53d6331a758b4669",
        "text": "No need to appeal to Mathematica. Term rewriting, the foundation of Mathematica, is Turing-complete. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170616906611663Vouhr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "after": "c9d8beff346d99e8",
      "attribution": {
        "page": "2024-01-25"
      },
      "date": 1706199081449
    },
    {
      "id": "c38ed2cb9b088378",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "c38ed2cb9b088378",
        "text": "~"
      },
      "after": "c8abda4679c1ad81",
      "attribution": {
        "page": "2024-01-25"
      },
      "date": 1706199117276
    },
    {
      "id": "ae6e486223dd4040",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "ae6e486223dd4040",
        "text": "~",
        "alias": "c38ed2cb9b088378"
      },
      "after": "53d6331a758b4669",
      "attribution": {
        "page": "2024-01-25"
      },
      "date": 1706199120181
    },
    {
      "type": "edit",
      "id": "53d6331a758b4669",
      "item": {
        "type": "paragraph",
        "id": "53d6331a758b4669",
        "text": "No need to appeal to Mathematica. Term rewriting, the foundation of Mathematica, is Turing-complete. ([[Konrad Hinsen]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170616906611663Vouhr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1706199164611
    },
    {
      "type": "edit",
      "id": "53d6331a758b4669",
      "item": {
        "type": "paragraph",
        "id": "53d6331a758b4669",
        "text": "No need to appeal to Mathematica. Term rewriting, the foundation of Mathematica, is Turing-complete. ([[Konrad Hinsen]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170616906611663Vouhr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix])"
      },
      "date": 1706199169305
    },
    {
      "type": "edit",
      "id": "53d6331a758b4669",
      "item": {
        "type": "paragraph",
        "id": "53d6331a758b4669",
        "text": "No need to appeal to Mathematica. [[Term Rewriting]], the foundation of Mathematica, is Turing-complete. ([[Konrad Hinsen]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170616906611663Vouhr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix])"
      },
      "date": 1706199270800
    },
    {
      "type": "edit",
      "id": "1ad75de525a73187",
      "item": {
        "type": "paragraph",
        "id": "1ad75de525a73187",
        "text": "William Bricken Ph.D, Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding (Unary press, 2019), p. 47–48."
      },
      "date": 1706885028130
    },
    {
      "item": {
        "type": "code",
        "id": "14b553768c21ac48",
        "text": "〘PUT FOR INTO〙 ☞ substitute PUT for FOR in INTO"
      },
      "id": "14b553768c21ac48",
      "type": "add",
      "after": "1ad75de525a73187",
      "date": 1706885029699
    },
    {
      "type": "edit",
      "id": "14b553768c21ac48",
      "item": {
        "type": "code",
        "id": "14b553768c21ac48",
        "text": "〘PUT FOR INTO〙 ☞ substitute PUT for FOR in INTO"
      },
      "date": 1706885033956
    },
    {
      "item": {
        "type": "markdown",
        "id": "b323cbc69e31319b",
        "text": "- The INTO-form is the structure that is being changed by the substitution. \n- The PUT-form is the structure that is being substituted into the INTO-form, in the process changing the structure of the INTO-form. \n- The FOR-form is the sub-structure within the INTO-form being replaced by the PUT-form."
      },
      "id": "b323cbc69e31319b",
      "type": "add",
      "after": "14b553768c21ac48",
      "date": 1706885048972
    },
    {
      "type": "edit",
      "id": "b323cbc69e31319b",
      "item": {
        "type": "markdown",
        "id": "b323cbc69e31319b",
        "text": "- The INTO-form is the structure that is being changed by the substitution. \n- The PUT-form is the structure that is being substituted into the INTO-form, in the process changing the structure of the INTO-form. \n- The FOR-form is the sub-structure within the INTO-form being replaced by the PUT-form."
      },
      "date": 1706885056749
    },
    {
      "type": "edit",
      "id": "b323cbc69e31319b",
      "item": {
        "type": "markdown",
        "id": "b323cbc69e31319b",
        "text": "- The INTO-form is the structure that is being changed by the substitution. \n- The PUT-form is the structure that is being substituted into the INTO-form, in the process changing the structure of the INTO-form. \n- The FOR-form is the sub-structure within the INTO-form being replaced by the PUT-form."
      },
      "date": 1706885065236
    },
    {
      "item": {
        "type": "paragraph",
        "id": "212d8f0694292e3b",
        "text": "Implicit within the substitution operation is an ability to locate or match the FOR structure within the INTO structure. This mechanism is far from trivial. The match might fail, in which case the substitution returns the INTO-form unchanged. The match might succeed more than once within the same INTO-form. This then requires several delicate implementation decisions that are considered in Volume II. In particular, it is critical whether substitution is partial (only some matches are changed) or total (all matches must be changed). When substitutions are nested or sequenced, additional implementation decisions are needed to decide how they might interact. At times during the course of a computation, for example, it is desirable to delay implementation of some substitutions until specific conditions are met."
      },
      "id": "212d8f0694292e3b",
      "type": "add",
      "after": "b323cbc69e31319b",
      "date": 1706885086793
    },
    {
      "type": "edit",
      "id": "212d8f0694292e3b",
      "item": {
        "type": "paragraph",
        "id": "212d8f0694292e3b",
        "text": "Implicit within the substitution operation is an ability to locate or match the FOR structure within the INTO structure. This mechanism is far from trivial. The match might fail, in which case the substitution returns the INTO-form unchanged. The match might succeed more than once within the same INTO-form. This then requires several delicate implementation decisions that are considered in Volume II. In particular, it is critical whether substitution is partial (only some matches are changed) or total (all matches must be changed). When substitutions are nested or sequenced, additional implementation decisions are needed to decide how they might interact. At times during the course of a computation, for example, it is desirable to delay implementation of some substitutions until specific conditions are met."
      },
      "date": 1706885088996
    },
    {
      "item": {
        "type": "markdown",
        "id": "b919e6b75fddb6a9",
        "text": "The form of substitution〘A C E〙is, like the √ symbol, an instruction rather than a result. With pattern-substitution, axioms depict a **before-and-after** picture."
      },
      "id": "b919e6b75fddb6a9",
      "type": "add",
      "after": "212d8f0694292e3b",
      "date": 1706885108470
    },
    {
      "type": "edit",
      "id": "b919e6b75fddb6a9",
      "item": {
        "type": "markdown",
        "id": "b919e6b75fddb6a9",
        "text": "The form of substitution〘A C E〙is, like the √ symbol, an instruction rather than a result. With pattern-substitution, axioms depict a **before-and-after** picture."
      },
      "date": 1706885109948
    },
    {
      "item": {
        "type": "code",
        "id": "58bbbc860ff4fc03",
        "text": "before \nE = 〔X Y Z〕"
      },
      "id": "58bbbc860ff4fc03",
      "type": "add",
      "after": "b919e6b75fddb6a9",
      "date": 1706885119760
    },
    {
      "type": "edit",
      "id": "58bbbc860ff4fc03",
      "item": {
        "type": "code",
        "id": "58bbbc860ff4fc03",
        "text": "before \nE = 〔X Y Z〕"
      },
      "date": 1706885121606
    },
    {
      "type": "edit",
      "id": "58bbbc860ff4fc03",
      "item": {
        "type": "code",
        "id": "58bbbc860ff4fc03",
        "text": "before \nE = 〔X Y Z〕"
      },
      "date": 1706885126934
    },
    {
      "item": {
        "type": "code",
        "id": "2c3fbc87567075a1",
        "text": "during \nE ⇒ 〘Q Z E〙"
      },
      "id": "2c3fbc87567075a1",
      "type": "add",
      "after": "58bbbc860ff4fc03",
      "date": 1706885151577
    },
    {
      "type": "edit",
      "id": "2c3fbc87567075a1",
      "item": {
        "type": "code",
        "id": "2c3fbc87567075a1",
        "text": "during \nE ⇒ 〘Q Z E〙"
      },
      "date": 1706885155573
    },
    {
      "item": {
        "type": "code",
        "id": "b5ef7d38f7b36971",
        "text": "after \nE = 〔X Y Q〕"
      },
      "id": "b5ef7d38f7b36971",
      "type": "add",
      "after": "2c3fbc87567075a1",
      "date": 1706885164561
    },
    {
      "type": "edit",
      "id": "b5ef7d38f7b36971",
      "item": {
        "type": "code",
        "id": "b5ef7d38f7b36971",
        "text": "after \nE = 〔X Y Q〕"
      },
      "date": 1706885168804
    },
    {
      "type": "edit",
      "id": "b919e6b75fddb6a9",
      "item": {
        "type": "markdown",
        "id": "b919e6b75fddb6a9",
        "text": "The form of substitution〘A C E〙is, like the √ symbol, an instruction rather than a result. With pattern-substitution, axioms depict a **before-and-after** picture."
      },
      "date": 1706885212560
    },
    {
      "type": "edit",
      "id": "b919e6b75fddb6a9",
      "item": {
        "type": "markdown",
        "id": "b919e6b75fddb6a9",
        "text": "The form of substitution〘A C E〙is, like the √ symbol, an instruction rather than a result. With pattern-substitution, axioms depict a **before-and-after** picture."
      },
      "date": 1706885223532
    },
    {
      "type": "add",
      "id": "9a7ca2b1e6c11ad4",
      "item": {
        "type": "paragraph",
        "id": "9a7ca2b1e6c11ad4",
        "text": "An equal sign is usually bidirectional, it doesn’t matter which side of the equation we consider as before. In contrast, substitution shows us a specified before, the INTO form E. The result is the entire expression 〘A C E〙. To maintain consistency, all C in E must be replaced by A. Substitution must be total, considering all content forms as well as their contents."
      },
      "after": "b919e6b75fddb6a9",
      "date": 1706885224306
    },
    {
      "id": "9a7ca2b1e6c11ad4",
      "type": "move",
      "order": [
        "f26eb4298b64d966",
        "c8abda4679c1ad81",
        "c38ed2cb9b088378",
        "c9d8beff346d99e8",
        "53d6331a758b4669",
        "ae6e486223dd4040",
        "8cee46d15eecd907",
        "ec1d844b1792f096",
        "9cfee6babdb61b11",
        "0037c66e202ac6ed",
        "dda87de125bee39b",
        "1ad75de525a73187",
        "14b553768c21ac48",
        "b323cbc69e31319b",
        "212d8f0694292e3b",
        "b919e6b75fddb6a9",
        "58bbbc860ff4fc03",
        "2c3fbc87567075a1",
        "b5ef7d38f7b36971",
        "9a7ca2b1e6c11ad4"
      ],
      "date": 1706885228956,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "edit",
      "id": "b919e6b75fddb6a9",
      "item": {
        "type": "markdown",
        "id": "b919e6b75fddb6a9",
        "text": "The form of substitution〘A C E〙is, like the √ symbol, an instruction rather than a result. With pattern-substitution, axioms depict a **before-and-after** picture."
      },
      "date": 1706885226119
    },
    {
      "type": "fork",
      "date": 1706885231244
    },
    {
      "type": "edit",
      "id": "c9d8beff346d99e8",
      "item": {
        "type": "paragraph",
        "id": "c9d8beff346d99e8",
        "text": "**But,**"
      },
      "date": 1706885266707
    },
    {
      "type": "edit",
      "id": "c9d8beff346d99e8",
      "item": {
        "type": "markdown",
        "id": "c9d8beff346d99e8",
        "text": "**But,**"
      },
      "date": 1706885267975
    },
    {
      "type": "edit",
      "id": "9a7ca2b1e6c11ad4",
      "item": {
        "type": "paragraph",
        "id": "9a7ca2b1e6c11ad4",
        "text": "An equal sign is usually bidirectional, it doesn’t matter which side of the equation we consider as before. In contrast, substitution shows us a specified before, the INTO form E. The result is the entire expression〘A C E〙. To maintain consistency, all C in E must be replaced by A. Substitution must be total, considering all content forms as well as their contents."
      },
      "date": 1706885346149
    },
    {
      "item": {
        "type": "factory",
        "id": "564c8fde7c071b47"
      },
      "id": "564c8fde7c071b47",
      "type": "add",
      "after": "9a7ca2b1e6c11ad4",
      "date": 1706885371394
    },
    {
      "type": "edit",
      "id": "564c8fde7c071b47",
      "item": {
        "type": "paragraph",
        "id": "564c8fde7c071b47",
        "text": "Substitution includes several structural identities that define its behavior in any algebra. […]"
      },
      "date": 1706885375528
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1706885466794
    },
    {
      "type": "edit",
      "id": "212d8f0694292e3b",
      "item": {
        "type": "paragraph",
        "id": "212d8f0694292e3b",
        "text": "Implicit within the substitution operation is an ability to locate or match the FOR structure within the INTO structure. This mechanism is far from trivial. The match might fail, in which case the substitution returns the INTO-form unchanged. The match might succeed more than once within the same INTO-form. This then requires several delicate implementation decisions that are considered in Volume II. In particular, it is critical whether substitution is partial (only some matches are changed) or total (all matches must be changed). When substitutions are nested or sequenced, additional implementation decisions are needed to [[decide]] how they might interact. At times during the course of a computation, for example, it is desirable to delay implementation of some substitutions until specific conditions are met."
      },
      "date": 1706885495335
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1706885578132
    }
  ]
}