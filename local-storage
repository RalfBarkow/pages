{
  "title": "Local Storage",
  "story": [
    {
      "type": "markdown",
      "id": "f9edc76ef2d32824",
      "text": "This is a minimal example of how to use `localStorage` through [[ports]]. [https://github.com/elm-community/js-integration-examples/tree/master/localStorage#local-storage---live-demo github]\n"
    },
    {
      "type": "markdown",
      "id": "a2efd737cede819d",
      "text": "It remembers user data across sessions. This data may be lost if the user clears their cookies, so it is safest to think of this as a cache rather than normal storage."
    },
    {
      "type": "code",
      "id": "035e0ee2ec262ac2",
      "text": "git clone https://github.com/elm-community/js-integration-examples.git\ncd js-integration-examples/localStorage\n\nelm make src/Main.elm --output=elm.js\nopen index.html"
    },
    {
      "type": "paragraph",
      "id": "7239ffa99e9b5e2b",
      "text": "Some terminals may not have an open command, in which case you should open the index.html file in your browser another way."
    },
    {
      "type": "assets",
      "id": "276da20d3a711a61",
      "text": "localStorage"
    },
    {
      "type": "frame",
      "id": "a63f91f1fa26cd5f",
      "text": "https://wiki.ralfbarkow.ch/assets/localStorage/index.html"
    },
    {
      "type": "pagefold",
      "id": "c61ad51a9f5dafa0",
      "text": "index.html"
    },
    {
      "type": "code",
      "id": "a32b9a10a2661354",
      "text": "[…]\n<script type=\"text/javascript\">\n// Extract the stored data from previous sessions.\nvar storedData = localStorage.getItem('myapp-model');\nvar flags = storedData ? JSON.parse(storedData) : null;\n\n// Load the Elm app, passing in the stored data.\nvar app = Elm.Main.init({\n\tnode: document.getElementById('myapp'),\n\tflags: flags\n});\n\n// Listen for commands from the `setStorage` port.\n// Turn the data to a string and put it in localStorage.\napp.ports.setStorage.subscribe(function(state) {\n    localStorage.setItem('myapp-model', JSON.stringify(state));\n});\n</script>\n[…]"
    },
    {
      "type": "pagefold",
      "id": "6ce635c63e09e9b7",
      "text": "Main.elm "
    },
    {
      "type": "code",
      "id": "2ff99c75cb5d0a73",
      "text": "[…]\n-- Here we use \"flags\" to load information in from localStorage. The\n-- data comes in as a JS value, so we define a `decoder` at the bottom\n-- of this file to turn it into an Elm value.\n--\n-- Check out index.html to see the corresponding code on the JS side.\n--\ninit : E.Value -> ( Model, Cmd Msg )\ninit flags =\n  (\n    case D.decodeValue decoder flags of\n      Ok model -> model\n      Err _ -> { name = \"\", email = \"\" }\n  ,\n    Cmd.none\n  )\n\n[…]\n\n-- JSON ENCODE/DECODE\n\n\nencode : Model -> E.Value\nencode model =\n  E.object\n    [ (\"name\", E.string model.name)\n    , (\"email\", E.string model.email)\n    ]\n\n\ndecoder : D.Decoder Model\ndecoder =\n  D.map2 Model\n    (D.field \"name\" D.string)\n    (D.field \"email\" D.string)\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Local Storage",
        "story": []
      },
      "date": 1638199376240
    },
    {
      "item": {
        "type": "factory",
        "id": "f9edc76ef2d32824"
      },
      "id": "f9edc76ef2d32824",
      "type": "add",
      "date": 1638199386792
    },
    {
      "type": "edit",
      "id": "f9edc76ef2d32824",
      "item": {
        "type": "paragraph",
        "id": "f9edc76ef2d32824",
        "text": "[https://github.com/elm-community/js-integration-examples/tree/master/localStorage#local-storage---live-demo github]"
      },
      "date": 1638199397776
    },
    {
      "type": "edit",
      "id": "f9edc76ef2d32824",
      "item": {
        "type": "paragraph",
        "id": "f9edc76ef2d32824",
        "text": "This is a minimal example of how to use localStorage through [[ports]]. [https://github.com/elm-community/js-integration-examples/tree/master/localStorage#local-storage---live-demo github]"
      },
      "date": 1638199415391
    },
    {
      "item": {
        "type": "factory",
        "id": "276da20d3a711a61"
      },
      "id": "276da20d3a711a61",
      "type": "add",
      "after": "f9edc76ef2d32824",
      "date": 1638199449476
    },
    {
      "type": "edit",
      "id": "276da20d3a711a61",
      "item": {
        "type": "assets",
        "id": "276da20d3a711a61",
        "text": "localStorage"
      },
      "date": 1638199451717
    },
    {
      "item": {
        "type": "factory",
        "id": "035e0ee2ec262ac2"
      },
      "id": "035e0ee2ec262ac2",
      "type": "add",
      "after": "276da20d3a711a61",
      "date": 1638199477837
    },
    {
      "type": "edit",
      "id": "035e0ee2ec262ac2",
      "item": {
        "type": "code",
        "id": "035e0ee2ec262ac2",
        "text": "git clone https://github.com/elm-community/js-integration-examples.git\ncd js-integration-examples/localStorage\n\nelm make src/Main.elm --output=elm.js\nopen index.html"
      },
      "date": 1638199479987
    },
    {
      "id": "035e0ee2ec262ac2",
      "type": "move",
      "order": [
        "f9edc76ef2d32824",
        "035e0ee2ec262ac2",
        "276da20d3a711a61"
      ],
      "date": 1638199481835
    },
    {
      "item": {
        "type": "factory",
        "id": "e594189b779647c2"
      },
      "id": "e594189b779647c2",
      "type": "add",
      "after": "276da20d3a711a61",
      "date": 1638199506594
    },
    {
      "type": "remove",
      "id": "e594189b779647c2",
      "date": 1638199508766
    },
    {
      "item": {
        "type": "factory",
        "id": "a63f91f1fa26cd5f"
      },
      "id": "a63f91f1fa26cd5f",
      "type": "add",
      "after": "276da20d3a711a61",
      "date": 1638199514446
    },
    {
      "type": "edit",
      "id": "a63f91f1fa26cd5f",
      "item": {
        "type": "frame",
        "id": "a63f91f1fa26cd5f",
        "text": "https://wiki.ralfbarkow.ch/assets/localStorage/index.html"
      },
      "date": 1638199516764
    },
    {
      "item": {
        "type": "factory",
        "id": "7239ffa99e9b5e2b"
      },
      "id": "7239ffa99e9b5e2b",
      "type": "add",
      "after": "a63f91f1fa26cd5f",
      "date": 1638199640674
    },
    {
      "type": "edit",
      "id": "7239ffa99e9b5e2b",
      "item": {
        "type": "paragraph",
        "id": "7239ffa99e9b5e2b",
        "text": "Some terminals may not have an open command, in which case you should open the index.html file in your browser another way."
      },
      "date": 1638199642176
    },
    {
      "id": "7239ffa99e9b5e2b",
      "type": "move",
      "order": [
        "f9edc76ef2d32824",
        "035e0ee2ec262ac2",
        "7239ffa99e9b5e2b",
        "276da20d3a711a61",
        "a63f91f1fa26cd5f"
      ],
      "date": 1638199659754
    },
    {
      "type": "edit",
      "id": "f9edc76ef2d32824",
      "item": {
        "type": "paragraph",
        "id": "f9edc76ef2d32824",
        "text": "This is a minimal example of how to use `localStorage` through [[ports]]. [https://github.com/elm-community/js-integration-examples/tree/master/localStorage#local-storage---live-demo github]"
      },
      "date": 1638199684641
    },
    {
      "type": "edit",
      "id": "f9edc76ef2d32824",
      "item": {
        "type": "markdown",
        "id": "f9edc76ef2d32824",
        "text": "This is a minimal example of how to use `localStorage` through [[ports]]. [https://github.com/elm-community/js-integration-examples/tree/master/localStorage#local-storage---live-demo github]"
      },
      "date": 1638199687498
    },
    {
      "type": "edit",
      "id": "f9edc76ef2d32824",
      "item": {
        "type": "markdown",
        "id": "f9edc76ef2d32824",
        "text": "This is a minimal example of how to use `localStorage` through [[ports]]. [https://github.com/elm-community/js-integration-examples/tree/master/localStorage#local-storage---live-demo github]\n"
      },
      "date": 1638199700767
    },
    {
      "type": "add",
      "id": "a2efd737cede819d",
      "item": {
        "type": "markdown",
        "id": "a2efd737cede819d",
        "text": "It remembers user data across sessions. This data may be lost if the user clears their cookies, so it is safest to think of this as a cache rather than normal storage."
      },
      "after": "f9edc76ef2d32824",
      "date": 1638199701159
    },
    {
      "item": {
        "type": "factory",
        "id": "a32b9a10a2661354"
      },
      "id": "a32b9a10a2661354",
      "type": "add",
      "after": "a63f91f1fa26cd5f",
      "date": 1638199757857
    },
    {
      "type": "edit",
      "id": "a32b9a10a2661354",
      "item": {
        "type": "code",
        "id": "a32b9a10a2661354",
        "text": "<script type=\"text/javascript\">\n// Extract the stored data from previous sessions.\nvar storedData = localStorage.getItem('myapp-model');\nvar flags = storedData ? JSON.parse(storedData) : null;\n\n// Load the Elm app, passing in the stored data.\nvar app = Elm.Main.init({\n\tnode: document.getElementById('myapp'),\n\tflags: flags\n});\n\n// Listen for commands from the `setStorage` port.\n// Turn the data to a string and put it in localStorage.\napp.ports.setStorage.subscribe(function(state) {\n    localStorage.setItem('myapp-model', JSON.stringify(state));\n});\n</script>\n"
      },
      "date": 1638199760196
    },
    {
      "item": {
        "type": "factory",
        "id": "6ce635c63e09e9b7"
      },
      "id": "6ce635c63e09e9b7",
      "type": "add",
      "after": "a32b9a10a2661354",
      "date": 1638199929842
    },
    {
      "type": "edit",
      "id": "6ce635c63e09e9b7",
      "item": {
        "type": "pagefold",
        "id": "6ce635c63e09e9b7",
        "text": "elm "
      },
      "date": 1638199935095
    },
    {
      "item": {
        "type": "factory",
        "id": "2ff99c75cb5d0a73"
      },
      "id": "2ff99c75cb5d0a73",
      "type": "add",
      "after": "6ce635c63e09e9b7",
      "date": 1638199936194
    },
    {
      "type": "edit",
      "id": "2ff99c75cb5d0a73",
      "item": {
        "type": "code",
        "id": "2ff99c75cb5d0a73",
        "text": "-- Here we use \"flags\" to load information in from localStorage. The\n-- data comes in as a JS value, so we define a `decoder` at the bottom\n-- of this file to turn it into an Elm value.\n--\n-- Check out index.html to see the corresponding code on the JS side.\n--\ninit : E.Value -> ( Model, Cmd Msg )\ninit flags =\n  (\n    case D.decodeValue decoder flags of\n      Ok model -> model\n      Err _ -> { name = \"\", email = \"\" }\n  ,\n    Cmd.none\n  )\n\n"
      },
      "date": 1638199938452
    },
    {
      "type": "edit",
      "id": "6ce635c63e09e9b7",
      "item": {
        "type": "pagefold",
        "id": "6ce635c63e09e9b7",
        "text": "Main.elm "
      },
      "date": 1638199960621
    },
    {
      "item": {
        "type": "factory",
        "id": "c61ad51a9f5dafa0"
      },
      "id": "c61ad51a9f5dafa0",
      "type": "add",
      "after": "2ff99c75cb5d0a73",
      "date": 1638199974523
    },
    {
      "type": "edit",
      "id": "c61ad51a9f5dafa0",
      "item": {
        "type": "pagefold",
        "id": "c61ad51a9f5dafa0",
        "text": "index.html"
      },
      "date": 1638199978965
    },
    {
      "id": "c61ad51a9f5dafa0",
      "type": "move",
      "order": [
        "f9edc76ef2d32824",
        "a2efd737cede819d",
        "035e0ee2ec262ac2",
        "7239ffa99e9b5e2b",
        "276da20d3a711a61",
        "a63f91f1fa26cd5f",
        "c61ad51a9f5dafa0",
        "a32b9a10a2661354",
        "6ce635c63e09e9b7",
        "2ff99c75cb5d0a73"
      ],
      "date": 1638199985045
    },
    {
      "type": "edit",
      "id": "a32b9a10a2661354",
      "item": {
        "type": "code",
        "id": "a32b9a10a2661354",
        "text": "[…]\n<script type=\"text/javascript\">\n// Extract the stored data from previous sessions.\nvar storedData = localStorage.getItem('myapp-model');\nvar flags = storedData ? JSON.parse(storedData) : null;\n\n// Load the Elm app, passing in the stored data.\nvar app = Elm.Main.init({\n\tnode: document.getElementById('myapp'),\n\tflags: flags\n});\n\n// Listen for commands from the `setStorage` port.\n// Turn the data to a string and put it in localStorage.\napp.ports.setStorage.subscribe(function(state) {\n    localStorage.setItem('myapp-model', JSON.stringify(state));\n});\n</script>\n[…]"
      },
      "date": 1638200010084
    },
    {
      "type": "edit",
      "id": "2ff99c75cb5d0a73",
      "item": {
        "type": "code",
        "id": "2ff99c75cb5d0a73",
        "text": "[…]\n-- Here we use \"flags\" to load information in from localStorage. The\n-- data comes in as a JS value, so we define a `decoder` at the bottom\n-- of this file to turn it into an Elm value.\n--\n-- Check out index.html to see the corresponding code on the JS side.\n--\ninit : E.Value -> ( Model, Cmd Msg )\ninit flags =\n  (\n    case D.decodeValue decoder flags of\n      Ok model -> model\n      Err _ -> { name = \"\", email = \"\" }\n  ,\n    Cmd.none\n  )\n[…]\n"
      },
      "date": 1638200016748
    },
    {
      "type": "edit",
      "id": "2ff99c75cb5d0a73",
      "item": {
        "type": "code",
        "id": "2ff99c75cb5d0a73",
        "text": "[…]\n-- Here we use \"flags\" to load information in from localStorage. The\n-- data comes in as a JS value, so we define a `decoder` at the bottom\n-- of this file to turn it into an Elm value.\n--\n-- Check out index.html to see the corresponding code on the JS side.\n--\ninit : E.Value -> ( Model, Cmd Msg )\ninit flags =\n  (\n    case D.decodeValue decoder flags of\n      Ok model -> model\n      Err _ -> { name = \"\", email = \"\" }\n  ,\n    Cmd.none\n  )\n\n[…]\n\n-- JSON ENCODE/DECODE\n\n\nencode : Model -> E.Value\nencode model =\n  E.object\n    [ (\"name\", E.string model.name)\n    , (\"email\", E.string model.email)\n    ]\n\n\ndecoder : D.Decoder Model\ndecoder =\n  D.map2 Model\n    (D.field \"name\" D.string)\n    (D.field \"email\" D.string)\n"
      },
      "date": 1638200092652
    }
  ]
}