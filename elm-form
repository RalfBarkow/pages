{
  "title": "elm-form",
  "story": [
    {
      "type": "paragraph",
      "id": "7d2d56c395747684",
      "text": "is built around the idea of managing a single Form.Model value as an unparsed set of raw field values and FieldStatus (blurred, changed, etc.). [https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/ elm-lang]"
    },
    {
      "type": "paragraph",
      "id": "3ad3d8d2aaedf44e",
      "text": "This Form.Model can even handle form state of more than one form on a page, or even across multiple pages. The package manages all of the unparsed state for you with a single Msg, a single Model entry, and then uses your Form definition to run its validations against the unparsed values (Model), and to render the form fields along with any validation errors."
    },
    {
      "type": "paragraph",
      "id": "0d844d7756a9a8b0",
      "text": "If you use elm-form with [[elm-pages]], the wiring is built into the framework so you don't need to wire in update or Model yourself, and the framework manages additional Form state for you such as in-flight form submissions. The ideas in this package originally came from elm-pages, but they are useful in a standalone context as well so this was split into a separate package."
    },
    {
      "type": "paragraph",
      "id": "9bad8d14cbaf8c85",
      "text": "Some of these underlying ideas were discussed in the Elm Radio episode Exploring a New Form API Design. "
    },
    {
      "type": "paragraph",
      "id": "28fd31a8dd0e5ca5",
      "text": "[⇒ [[Exploring a Form API Design]]]"
    },
    {
      "type": "pagefold",
      "id": "1d74e225f5d1bc32",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "252264b5500563f5",
      "site": "wiki.ralfbarkow.ch",
      "slug": "exploring-a-form-api-design",
      "title": "Exploring a Form API Design",
      "text": "We dive into some ideas for a new Form design, pulling in a lot of our favorite [[Elm]] techniques to make it safe and intuitive. [https://elm-radio.com/episode/exploring-form-api/ podcast]"
    },
    {
      "type": "audio",
      "id": "5af7bff573f01719",
      "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/43ca9779-ac0a-435b-bcae-f6e2b28e2cce/audio/faad690d-746b-4be3-850a-c822809081db/default_tc.mp3\n[[Elm Radio]], Episode#61: Exploring a New Form API Design"
    },
    {
      "type": "paragraph",
      "id": "4c6f3c9be53adeb5",
      "text": "Note: It's worth reading the MDN docs on form submissions to understand the core building blocks: Sending form data [https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data mdn]"
    },
    {
      "type": "paragraph",
      "id": "f793344bf962f74f",
      "text": "⇒ [[Wiring Pattern]]"
    },
    {
      "type": "pagefold",
      "id": "900da7bdf19b6b9a",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "74b258fe735bd8b5",
      "site": "wiki.ralfbarkow.ch",
      "slug": "formulare-gestalten",
      "title": "Formulare gestalten",
      "text": "SCHWESINGER, Borries, 2007. Formulare gestalten: das Handbuch für alle, die das Leben einfacher machen wollen. Mainz: Schmidt. ISBN 978-3-87439-708-7."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "elm-form",
        "story": []
      },
      "date": 1682071599035
    },
    {
      "item": {
        "type": "factory",
        "id": "7d2d56c395747684"
      },
      "id": "7d2d56c395747684",
      "type": "add",
      "date": 1682071624897
    },
    {
      "type": "edit",
      "id": "7d2d56c395747684",
      "item": {
        "type": "paragraph",
        "id": "7d2d56c395747684",
        "text": "is built around the idea of managing a single Form.Model value as an unparsed set of raw field values and FieldStatus (blurred, changed, etc.). This Form.Model can even handle form state of more than one form on a page, or even across multiple pages. The package manages all of the unparsed state for you with a single Msg, a single Model entry, and then uses your Form definition to run its validations against the unparsed values (Model), and to render the form fields along with any validation errors."
      },
      "date": 1682071626680
    },
    {
      "type": "edit",
      "id": "7d2d56c395747684",
      "item": {
        "type": "paragraph",
        "id": "7d2d56c395747684",
        "text": "is built around the idea of managing a single Form.Model value as an unparsed set of raw field values and FieldStatus (blurred, changed, etc.). "
      },
      "date": 1682071641745
    },
    {
      "type": "add",
      "id": "3ad3d8d2aaedf44e",
      "item": {
        "type": "paragraph",
        "id": "3ad3d8d2aaedf44e",
        "text": "This Form.Model can even handle form state of more than one form on a page, or even across multiple pages. The package manages all of the unparsed state for you with a single Msg, a single Model entry, and then uses your Form definition to run its validations against the unparsed values (Model), and to render the form fields along with any validation errors."
      },
      "after": "7d2d56c395747684",
      "date": 1682071644954
    },
    {
      "type": "edit",
      "id": "7d2d56c395747684",
      "item": {
        "type": "paragraph",
        "id": "7d2d56c395747684",
        "text": "is built around the idea of managing a single Form.Model value as an unparsed set of raw field values and FieldStatus (blurred, changed, etc.). [https://package.elm-lang.org/packages/dillonkearns/elm-form/latest/ elm-lang]"
      },
      "date": 1682071687494
    },
    {
      "item": {
        "type": "factory",
        "id": "0d844d7756a9a8b0"
      },
      "id": "0d844d7756a9a8b0",
      "type": "add",
      "after": "3ad3d8d2aaedf44e",
      "date": 1682071701251
    },
    {
      "type": "edit",
      "id": "0d844d7756a9a8b0",
      "item": {
        "type": "paragraph",
        "id": "0d844d7756a9a8b0",
        "text": "If you use elm-form with elm-pages, the wiring is built into the framework so you don't need to wire in update or Model yourself, and the framework manages additional Form state for you such as in-flight form submissions. The ideas in this package originally came from elm-pages, but they are useful in a standalone context as well so this was split into a separate package."
      },
      "date": 1682071702663
    },
    {
      "type": "edit",
      "id": "0d844d7756a9a8b0",
      "item": {
        "type": "paragraph",
        "id": "0d844d7756a9a8b0",
        "text": "If you use elm-form with [[elm-pages]], the wiring is built into the framework so you don't need to wire in update or Model yourself, and the framework manages additional Form state for you such as in-flight form submissions. The ideas in this package originally came from elm-pages, but they are useful in a standalone context as well so this was split into a separate package."
      },
      "date": 1682071711418
    },
    {
      "item": {
        "type": "factory",
        "id": "9bad8d14cbaf8c85"
      },
      "id": "9bad8d14cbaf8c85",
      "type": "add",
      "after": "0d844d7756a9a8b0",
      "date": 1682071790995
    },
    {
      "type": "edit",
      "id": "9bad8d14cbaf8c85",
      "item": {
        "type": "paragraph",
        "id": "9bad8d14cbaf8c85",
        "text": "Some of these underlying ideas were discussed in the Elm Radio episode Exploring a New Form API Design."
      },
      "date": 1682071792361
    },
    {
      "item": {
        "type": "factory",
        "id": "252264b5500563f5"
      },
      "id": "252264b5500563f5",
      "type": "add",
      "after": "9bad8d14cbaf8c85",
      "date": 1682071841608
    },
    {
      "type": "edit",
      "id": "252264b5500563f5",
      "item": {
        "type": "reference",
        "id": "252264b5500563f5",
        "site": "wiki.ralfbarkow.ch",
        "slug": "exploring-a-form-api-design",
        "title": "Exploring a Form API Design",
        "text": "We dive into some ideas for a new Form design, pulling in a lot of our favorite [[Elm]] techniques to make it safe and intuitive. [https://elm-radio.com/episode/exploring-form-api/ podcast]"
      },
      "date": 1682071845389
    },
    {
      "id": "5af7bff573f01719",
      "type": "add",
      "item": {
        "type": "audio",
        "id": "5af7bff573f01719",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/43ca9779-ac0a-435b-bcae-f6e2b28e2cce/audio/faad690d-746b-4be3-850a-c822809081db/default_tc.mp3\n[[Elm Radio]], Episode#61: Exploring a New Form API Design"
      },
      "after": "252264b5500563f5",
      "attribution": {
        "page": "Exploring a Form API Design"
      },
      "date": 1682071860286
    },
    {
      "item": {
        "type": "factory",
        "id": "4c6f3c9be53adeb5"
      },
      "id": "4c6f3c9be53adeb5",
      "type": "add",
      "after": "5af7bff573f01719",
      "date": 1682071902681
    },
    {
      "type": "edit",
      "id": "4c6f3c9be53adeb5",
      "item": {
        "type": "paragraph",
        "id": "4c6f3c9be53adeb5",
        "text": "Note: It's worth reading the MDN docs on form submissions to understand the core building blocks."
      },
      "date": 1682071915394
    },
    {
      "type": "edit",
      "id": "4c6f3c9be53adeb5",
      "item": {
        "type": "paragraph",
        "id": "4c6f3c9be53adeb5",
        "text": "Note: It's worth reading the MDN docs on form submissions to understand the core building blocks. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data mdn]"
      },
      "date": 1682071932126
    },
    {
      "type": "edit",
      "id": "4c6f3c9be53adeb5",
      "item": {
        "type": "paragraph",
        "id": "4c6f3c9be53adeb5",
        "text": "Note: It's worth reading the MDN docs on form submissions to understand the core building blocks: Sending form data [https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data mdn]"
      },
      "date": 1682071950682
    },
    {
      "item": {
        "type": "factory",
        "id": "1d74e225f5d1bc32"
      },
      "id": "1d74e225f5d1bc32",
      "type": "add",
      "after": "4c6f3c9be53adeb5",
      "date": 1682072049222
    },
    {
      "id": "1d74e225f5d1bc32",
      "type": "move",
      "order": [
        "7d2d56c395747684",
        "3ad3d8d2aaedf44e",
        "0d844d7756a9a8b0",
        "9bad8d14cbaf8c85",
        "1d74e225f5d1bc32",
        "252264b5500563f5",
        "5af7bff573f01719",
        "4c6f3c9be53adeb5"
      ],
      "date": 1682072052086
    },
    {
      "type": "edit",
      "id": "1d74e225f5d1bc32",
      "item": {
        "type": "pagefold",
        "id": "1d74e225f5d1bc32",
        "text": "~"
      },
      "date": 1682072055198
    },
    {
      "type": "edit",
      "id": "9bad8d14cbaf8c85",
      "item": {
        "type": "paragraph",
        "id": "9bad8d14cbaf8c85",
        "text": "Some of these underlying ideas were discussed in the Elm Radio episode Exploring a New Form API Design. [⇒ [[Exploring a Form API Design]]]"
      },
      "date": 1682072091098
    },
    {
      "type": "edit",
      "id": "9bad8d14cbaf8c85",
      "item": {
        "type": "paragraph",
        "id": "9bad8d14cbaf8c85",
        "text": "Some of these underlying ideas were discussed in the Elm Radio episode Exploring a New Form API Design. "
      },
      "date": 1682072097729
    },
    {
      "type": "add",
      "id": "28fd31a8dd0e5ca5",
      "item": {
        "type": "paragraph",
        "id": "28fd31a8dd0e5ca5",
        "text": "[⇒ [[Exploring a Form API Design]]]"
      },
      "after": "9bad8d14cbaf8c85",
      "date": 1682072098824
    },
    {
      "item": {
        "type": "factory",
        "id": "f793344bf962f74f"
      },
      "id": "f793344bf962f74f",
      "type": "add",
      "after": "4c6f3c9be53adeb5",
      "date": 1682072172623
    },
    {
      "type": "edit",
      "id": "f793344bf962f74f",
      "item": {
        "type": "paragraph",
        "id": "f793344bf962f74f",
        "text": "[[Wiring Pattern]]"
      },
      "date": 1682072177549
    },
    {
      "type": "edit",
      "id": "f793344bf962f74f",
      "item": {
        "type": "paragraph",
        "id": "f793344bf962f74f",
        "text": "⇒ [[Wiring Pattern]]"
      },
      "date": 1682072185551
    },
    {
      "item": {
        "type": "factory",
        "id": "900da7bdf19b6b9a"
      },
      "id": "900da7bdf19b6b9a",
      "type": "add",
      "after": "f793344bf962f74f",
      "date": 1682677607078
    },
    {
      "type": "edit",
      "id": "900da7bdf19b6b9a",
      "item": {
        "type": "pagefold",
        "id": "900da7bdf19b6b9a",
        "text": "~"
      },
      "date": 1682677610050
    },
    {
      "item": {
        "type": "factory",
        "id": "74b258fe735bd8b5"
      },
      "id": "74b258fe735bd8b5",
      "type": "add",
      "after": "900da7bdf19b6b9a",
      "date": 1682677611701
    },
    {
      "type": "edit",
      "id": "74b258fe735bd8b5",
      "item": {
        "type": "reference",
        "id": "74b258fe735bd8b5",
        "site": "wiki.ralfbarkow.ch",
        "slug": "formulare-gestalten",
        "title": "Formulare gestalten",
        "text": "SCHWESINGER, Borries, 2007. Formulare gestalten: das Handbuch für alle, die das Leben einfacher machen wollen. Mainz: Schmidt. ISBN 978-3-87439-708-7."
      },
      "date": 1682677613641
    }
  ]
}