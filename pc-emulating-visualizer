{
  "title": "PC Emulating Visualizer",
  "story": [
    {
      "type": "reference",
      "id": "800e954481a38859",
      "site": "wiki.ralfbarkow.ch",
      "slug": "blinkenlights",
      "title": "Blinkenlights",
      "text": "This project contains two programs: [https://github.com/jart/blink GitHub], [https://justine.lol site], [https://justine.lol/blinkenlights/ page], [https://justine.lol/blinkenlights/download.html download]"
    },
    {
      "type": "paragraph",
      "id": "0946686a0372d153",
      "text": "Computers once had [[operator]] panels that provided an intimate overview of the machine's internal state at any given moment. The blinking lights would communicate the personality of each piece of software. Since our minds are great at spotting patterns, developers would intuitively understand based on which way the LEDs were flashing, if a program was sorting data, collating, caught in an infinite loop, etc. This is an aspect of the computing experience that modern machines haven't done a good job at recreating, until now."
    },
    {
      "type": "paragraph",
      "id": "baf9a1801b665aef",
      "text": "What makes Blinkenlights unique is that its interface is designed under the assumption that terminal displays have grown larger than 80 columns. Therefore we can display many more panels of useful info than alternatives such as GDB. The most important panels are the ones that hexdump memory using Code Page 437. It's also able to automatically infer the type signatures of SSE registers based on the instructions. For example, here's an operating session screencast for a program that just prints images in the terminal. [https://storage.googleapis.com/justine/blinkenlights/blinkenlights.mp4 mp4]"
    },
    {
      "type": "paragraph",
      "id": "88537e1c57e8c0aa",
      "text": "Watching this program execute (c / ctrl-c) at adjustable speed (ctrl-t / alt-t) it becomes clearer that the [[Process of Printing an Image]] is basically a pipeline that goes: IDCT → Y′CbCr to RGB → decimate → sharpen → block render. Thanks to Blinkenlights we can also see that the RGB conversion is going slower than it should, because code isn't benefiting from SSE register vectorization. Many other common issues concerning micro-optimization, such as register spillage, become super apparent as well."
    },
    {
      "type": "paragraph",
      "id": "285ef9db082b3846",
      "text": "Software is conventionally written with an abstract theory of mind that's rooted in computer science concepts such as time complexity. However sometimes we get lazy at inappropriate moments and make our code accidentally quadratic [https://accidentallyquadratic.tumblr.com/ page]. Modern CPUs have a feature called spectre that makes slow algorithms go as fast as good ones for small datasets, which unfortunately makes these issues difficult to spot. On the other hand, Blinkenlights behaves more like a conventional CPU so you concretely see the true impact of algorithms that are sloppy from a theoretical standpoint, thus saving you from the potential mistake of pushing that code into production to crunch data at scale."
    },
    {
      "type": "paragraph",
      "id": "0f5817a8d2b43e27",
      "text": "Blinkenlights is also a proper emulator in the sense that it can emulate itself. This can be accomplished by simply passing the blinkenlights.com binary as an argument to itself. Blinkenlights doesn't need any system commands to be installed beforehand (e.g. gdb backend) so this does in fact emulate the entire emulation process."
    },
    {
      "type": "code",
      "id": "3c7d284f4b0837a4",
      "text": "bash blinkenlights.com -t blinkenlights.com"
    },
    {
      "type": "paragraph",
      "id": "630c3bdadceaaf3f",
      "text": "What are the tradeoffs? Blinkenlights is really good at creating a deterministic environment for program execution that can reproduce program state down to the finest detail across operating systems. It also runs as a first-class native binary on each system. But since it's an Actually Portable Executable it might not be able to perfectly conform to the conventions of your local operating system. "
    },
    {
      "type": "paragraph",
      "id": "b8060fa1cf541e92",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "d4605da90569ce43",
      "text": "If all that sounds good, then please proceed to the [https://justine.lol/blinkenlights/download.html download] page. You can get started by reading the tutorial on the Real Mode [https://justine.lol/blinkenlights/realmode.html page]."
    },
    {
      "type": "markdown",
      "id": "a2ac33f1c4b7b8e1",
      "text": "> Here's a first principles tutorial. You can program your emulator by doing the same thing that folks did back in the 1970's programming the [[Altair 8800]]: entering the raw octal instructions."
    },
    {
      "type": "paragraph",
      "id": "499ad1f78861b432",
      "text": "The only difference is we're using printf instead of those flip switches. Here's a simple program to get started: "
    },
    {
      "type": "code",
      "id": "7c4406778665cd19",
      "text": "printf '\\100\\353\\375' >prog.bin\nblinkenlights.com -rt prog.bin"
    },
    {
      "type": "paragraph",
      "id": "15d44f720e35f31d",
      "text": "You should then see your program appear in a terminal interface that looks like the following: "
    },
    {
      "type": "html",
      "id": "9ce48ee669d52853",
      "text": "<img\n  src=\"https://worker.jart.workers.dev/blinkenlights/rawoctal.png\"\n  width=\"100%\"\n>\n"
    },
    {
      "type": "paragraph",
      "id": "b89515c9af3797d4",
      "text": "You can then press the s key to step through your program. Be sure to make the terminal font size as small as possible, and to maximize the terminal window, so that you see all the panels. It’s also a good idea to enable SSH compression when accessing Linux via the net, since it’ll increase your framerate."
    },
    {
      "type": "paragraph",
      "id": "ef4f308a0239b23b",
      "text": "⇒ [[Assembling Real Mode Code]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "PC Emulating Visualizer",
        "story": []
      },
      "date": 1676120277868
    },
    {
      "item": {
        "type": "factory",
        "id": "800e954481a38859"
      },
      "id": "800e954481a38859",
      "type": "add",
      "date": 1676120279876
    },
    {
      "type": "edit",
      "id": "800e954481a38859",
      "item": {
        "type": "reference",
        "id": "800e954481a38859",
        "site": "wiki.ralfbarkow.ch",
        "slug": "blinkenlights",
        "title": "Blinkenlights",
        "text": "This project contains two programs: [https://github.com/jart/blink GitHub], [https://justine.lol site], [https://justine.lol/blinkenlights/ page], [https://justine.lol/blinkenlights/download.html download]"
      },
      "date": 1676120282174
    },
    {
      "item": {
        "type": "factory",
        "id": "0946686a0372d153"
      },
      "id": "0946686a0372d153",
      "type": "add",
      "after": "800e954481a38859",
      "date": 1676120389900
    },
    {
      "type": "edit",
      "id": "0946686a0372d153",
      "item": {
        "type": "paragraph",
        "id": "0946686a0372d153",
        "text": "Computers once had operator panels that provided an intimate overview of the machine's internal state at any given moment. The blinking lights would communicate the personality of each piece of software. Since our minds are great at spotting patterns, developers would intuitively understand based on which way the LEDs were flashing, if a program was sorting data, collating, caught in an infinite loop, etc. This is an aspect of the computing experience that modern machines haven't done a good job at recreating, until now."
      },
      "date": 1676120391554
    },
    {
      "type": "edit",
      "id": "0946686a0372d153",
      "item": {
        "type": "paragraph",
        "id": "0946686a0372d153",
        "text": "Computers once had [[operator]] panels that provided an intimate overview of the machine's internal state at any given moment. The blinking lights would communicate the personality of each piece of software. Since our minds are great at spotting patterns, developers would intuitively understand based on which way the LEDs were flashing, if a program was sorting data, collating, caught in an infinite loop, etc. This is an aspect of the computing experience that modern machines haven't done a good job at recreating, until now."
      },
      "date": 1676120419437
    },
    {
      "item": {
        "type": "factory",
        "id": "baf9a1801b665aef"
      },
      "id": "baf9a1801b665aef",
      "type": "add",
      "after": "0946686a0372d153",
      "date": 1676120486920
    },
    {
      "type": "edit",
      "id": "baf9a1801b665aef",
      "item": {
        "type": "paragraph",
        "id": "baf9a1801b665aef",
        "text": "What makes Blinkenlights unique is that its interface is designed under the assumption that terminal displays have grown larger than 80 columns. Therefore we can display many more panels of useful info than alternatives such as GDB. The most important panels are the ones that hexdump memory using Code Page 437. It's also able to automatically infer the type signatures of SSE registers based on the instructions. For example, here's an operating session screencast for a program that just prints images in the terminal."
      },
      "date": 1676120489761
    },
    {
      "type": "edit",
      "id": "baf9a1801b665aef",
      "item": {
        "type": "paragraph",
        "id": "baf9a1801b665aef",
        "text": "What makes Blinkenlights unique is that its interface is designed under the assumption that terminal displays have grown larger than 80 columns. Therefore we can display many more panels of useful info than alternatives such as GDB. The most important panels are the ones that hexdump memory using Code Page 437. It's also able to automatically infer the type signatures of SSE registers based on the instructions. For example, here's an operating session screencast for a program that just prints images in the terminal. [https://storage.googleapis.com/justine/blinkenlights/blinkenlights.mp4 mp4]"
      },
      "date": 1676120572897
    },
    {
      "item": {
        "type": "factory",
        "id": "88537e1c57e8c0aa"
      },
      "id": "88537e1c57e8c0aa",
      "type": "add",
      "after": "baf9a1801b665aef",
      "date": 1676120658615
    },
    {
      "type": "edit",
      "id": "88537e1c57e8c0aa",
      "item": {
        "type": "paragraph",
        "id": "88537e1c57e8c0aa",
        "text": "Watching this program execute (c / ctrl-c) at adjustable speed (ctrl-t / alt-t) it becomes clearer that the process of printing an image is basically a pipeline that goes: IDCT → Y′CbCr to RGB → decimate → sharpen → block render. Thanks to Blinkenlights we can also see that the RGB conversion is going slower than it should, because code isn't benefiting from SSE register vectorization. Many other common issues concerning micro-optimization, such as register spillage, become super apparent as well."
      },
      "date": 1676120660318
    },
    {
      "item": {
        "type": "factory",
        "id": "285ef9db082b3846"
      },
      "id": "285ef9db082b3846",
      "type": "add",
      "after": "88537e1c57e8c0aa",
      "date": 1676120702233
    },
    {
      "type": "edit",
      "id": "285ef9db082b3846",
      "item": {
        "type": "paragraph",
        "id": "285ef9db082b3846",
        "text": "Software is conventionally written with an abstract theory of mind that's rooted in computer science concepts such as time complexity. However sometimes we get lazy at inappropriate moments and make our code accidentally"
      },
      "date": 1676120703969
    },
    {
      "type": "edit",
      "id": "285ef9db082b3846",
      "item": {
        "type": "paragraph",
        "id": "285ef9db082b3846",
        "text": "Software is conventionally written with an abstract theory of mind that's rooted in computer science concepts such as time complexity. However sometimes we get lazy at inappropriate moments and make our code accidentally quadratic. Modern CPUs have a feature called spectre that makes slow algorithms go as fast as good ones for small datasets, which unfortunately makes these issues difficult to spot. On the other hand, Blinkenlights behaves more like a conventional CPU so you concretely see the true impact of algorithms that are sloppy from a theoretical standpoint, thus saving you from the potential mistake of pushing that code into production to crunch data at scale."
      },
      "date": 1676120710981
    },
    {
      "type": "edit",
      "id": "285ef9db082b3846",
      "item": {
        "type": "paragraph",
        "id": "285ef9db082b3846",
        "text": "Software is conventionally written with an abstract theory of mind that's rooted in computer science concepts such as time complexity. However sometimes we get lazy at inappropriate moments and make our code accidentally quadratic [https://accidentallyquadratic.tumblr.com/ page]. Modern CPUs have a feature called spectre that makes slow algorithms go as fast as good ones for small datasets, which unfortunately makes these issues difficult to spot. On the other hand, Blinkenlights behaves more like a conventional CPU so you concretely see the true impact of algorithms that are sloppy from a theoretical standpoint, thus saving you from the potential mistake of pushing that code into production to crunch data at scale."
      },
      "date": 1676120757651
    },
    {
      "type": "add",
      "id": "b77b055d14bc0190",
      "item": {
        "type": "paragraph",
        "id": "b77b055d14bc0190",
        "text": "[[Process of Printing an Image]]"
      },
      "after": "88537e1c57e8c0aa",
      "date": 1676120819644
    },
    {
      "type": "remove",
      "id": "b77b055d14bc0190",
      "date": 1676121610973
    },
    {
      "type": "edit",
      "id": "88537e1c57e8c0aa",
      "item": {
        "type": "paragraph",
        "id": "88537e1c57e8c0aa",
        "text": "Watching this program execute (c / ctrl-c) at adjustable speed (ctrl-t / alt-t) it becomes clearer that the [[Process of Printing an Image]] is basically a pipeline that goes: IDCT → Y′CbCr to RGB → decimate → sharpen → block render. Thanks to Blinkenlights we can also see that the RGB conversion is going slower than it should, because code isn't benefiting from SSE register vectorization. Many other common issues concerning micro-optimization, such as register spillage, become super apparent as well."
      },
      "date": 1676121620220
    },
    {
      "item": {
        "type": "paragraph",
        "id": "0f5817a8d2b43e27",
        "text": "Blinkenlights is also a proper emulator in the sense that it can emulate itself. This can be accomplished by simply passing the blinkenlights.com binary as an argument to itself. Blinkenlights doesn't need any system commands to be installed beforehand (e.g. gdb backend) so this does in fact emulate the entire emulation process."
      },
      "id": "0f5817a8d2b43e27",
      "type": "add",
      "after": "285ef9db082b3846",
      "date": 1676121643280
    },
    {
      "type": "edit",
      "id": "0f5817a8d2b43e27",
      "item": {
        "type": "paragraph",
        "id": "0f5817a8d2b43e27",
        "text": "Blinkenlights is also a proper emulator in the sense that it can emulate itself. This can be accomplished by simply passing the blinkenlights.com binary as an argument to itself. Blinkenlights doesn't need any system commands to be installed beforehand (e.g. gdb backend) so this does in fact emulate the entire emulation process."
      },
      "date": 1676121644817
    },
    {
      "item": {
        "type": "code",
        "id": "3c7d284f4b0837a4",
        "text": "bash blinkenlights.com -t blinkenlights.com"
      },
      "id": "3c7d284f4b0837a4",
      "type": "add",
      "after": "0f5817a8d2b43e27",
      "date": 1676121733894
    },
    {
      "type": "edit",
      "id": "3c7d284f4b0837a4",
      "item": {
        "type": "code",
        "id": "3c7d284f4b0837a4",
        "text": "bash blinkenlights.com -t blinkenlights.com"
      },
      "date": 1676121736111
    },
    {
      "type": "edit",
      "id": "3c7d284f4b0837a4",
      "item": {
        "type": "code",
        "id": "3c7d284f4b0837a4",
        "text": "bash blinkenlights.com -t blinkenlights.com"
      },
      "date": 1676121740111
    },
    {
      "item": {
        "type": "paragraph",
        "id": "630c3bdadceaaf3f",
        "text": "What are the tradeoffs? Blinkenlights is really good at creating a deterministic environment for program execution that can reproduce program state down to the finest detail across operating systems. It also runs as a first-class native binary on each system. But since it's an Actually Portable Executable it might not be able to perfectly conform to the conventions of your local operating system. "
      },
      "id": "630c3bdadceaaf3f",
      "type": "add",
      "after": "3c7d284f4b0837a4",
      "date": 1676121769980
    },
    {
      "type": "edit",
      "id": "630c3bdadceaaf3f",
      "item": {
        "type": "paragraph",
        "id": "630c3bdadceaaf3f",
        "text": "What are the tradeoffs? Blinkenlights is really good at creating a deterministic environment for program execution that can reproduce program state down to the finest detail across operating systems. It also runs as a first-class native binary on each system. But since it's an Actually Portable Executable it might not be able to perfectly conform to the conventions of your local operating system. "
      },
      "date": 1676121772253
    },
    {
      "type": "edit",
      "id": "630c3bdadceaaf3f",
      "item": {
        "type": "paragraph",
        "id": "630c3bdadceaaf3f",
        "text": "What are the tradeoffs? Blinkenlights is really good at creating a deterministic environment for program execution that can reproduce program state down to the finest detail across operating systems. It also runs as a first-class native binary on each system. But since it's an Actually Portable Executable it might not be able to perfectly conform to the conventions of your local operating system. "
      },
      "date": 1676121814826
    },
    {
      "type": "add",
      "id": "b8060fa1cf541e92",
      "item": {
        "type": "paragraph",
        "id": "b8060fa1cf541e92",
        "text": "[…]"
      },
      "after": "630c3bdadceaaf3f",
      "date": 1676121817102
    },
    {
      "type": "add",
      "id": "d4605da90569ce43",
      "item": {
        "type": "paragraph",
        "id": "d4605da90569ce43",
        "text": "If all that sounds good, then please proceed to the [https://justine.lol/blinkenlights/download.html download] page. You can get started by reading the tutorial on the Real Mode [https://justine.lol/blinkenlights/realmode.html page]."
      },
      "after": "b8060fa1cf541e92",
      "date": 1676121818261
    },
    {
      "type": "edit",
      "id": "d4605da90569ce43",
      "item": {
        "type": "paragraph",
        "id": "d4605da90569ce43",
        "text": "If all that sounds good, then please proceed to the [https://justine.lol/blinkenlights/download.html download] page. You can get started by reading the tutorial on the Real Mode [https://justine.lol/blinkenlights/realmode.html page]."
      },
      "date": 1676121827213
    },
    {
      "type": "edit",
      "id": "d4605da90569ce43",
      "item": {
        "type": "paragraph",
        "id": "d4605da90569ce43",
        "text": "If all that sounds good, then please proceed to the [https://justine.lol/blinkenlights/download.html download] page. You can get started by reading the tutorial on the Real Mode [https://justine.lol/blinkenlights/realmode.html page]."
      },
      "date": 1676121838192
    },
    {
      "type": "edit",
      "id": "d4605da90569ce43",
      "item": {
        "type": "paragraph",
        "id": "d4605da90569ce43",
        "text": "If all that sounds good, then please proceed to the [https://justine.lol/blinkenlights/download.html download] page. You can get started by reading the tutorial on the Real Mode [https://justine.lol/blinkenlights/realmode.html page]."
      },
      "date": 1676121844935
    },
    {
      "type": "edit",
      "id": "d4605da90569ce43",
      "item": {
        "type": "paragraph",
        "id": "d4605da90569ce43",
        "text": "If all that sounds good, then please proceed to the [https://justine.lol/blinkenlights/download.html download] page. You can get started by reading the tutorial on the Real Mode [https://justine.lol/blinkenlights/realmode.html page]."
      },
      "date": 1676121877494
    },
    {
      "item": {
        "type": "markdown",
        "id": "a2ac33f1c4b7b8e1",
        "text": "> Here's a first principles tutorial. You can program your emulator by doing the same thing that folks did back in the 1970's programming the [[Altair 8800]]: entering the raw octal instructions."
      },
      "id": "a2ac33f1c4b7b8e1",
      "type": "add",
      "after": "d4605da90569ce43",
      "date": 1676121894052
    },
    {
      "type": "edit",
      "id": "a2ac33f1c4b7b8e1",
      "item": {
        "type": "markdown",
        "id": "a2ac33f1c4b7b8e1",
        "text": "> Here's a first principles tutorial. You can program your emulator by doing the same thing that folks did back in the 1970's programming the [[Altair 8800]]: entering the raw octal instructions."
      },
      "date": 1676121897384
    },
    {
      "type": "edit",
      "id": "a2ac33f1c4b7b8e1",
      "item": {
        "type": "markdown",
        "id": "a2ac33f1c4b7b8e1",
        "text": "> Here's a first principles tutorial. You can program your emulator by doing the same thing that folks did back in the 1970's programming the [[Altair 8800]]: entering the raw octal instructions."
      },
      "date": 1676121910841
    },
    {
      "item": {
        "type": "paragraph",
        "id": "499ad1f78861b432",
        "text": "The only difference is we're using printf instead of those flip switches. Here's a simple program to get started: "
      },
      "id": "499ad1f78861b432",
      "type": "add",
      "after": "a2ac33f1c4b7b8e1",
      "date": 1676121949448
    },
    {
      "type": "edit",
      "id": "499ad1f78861b432",
      "item": {
        "type": "paragraph",
        "id": "499ad1f78861b432",
        "text": "The only difference is we're using printf instead of those flip switches. Here's a simple program to get started: "
      },
      "date": 1676121951777
    },
    {
      "item": {
        "type": "paragraph",
        "id": "8c316e82fb2335ee",
        "text": ""
      },
      "id": "8c316e82fb2335ee",
      "type": "add",
      "after": "499ad1f78861b432",
      "date": 1676121963714
    },
    {
      "type": "remove",
      "id": "8c316e82fb2335ee",
      "date": 1676121967026
    },
    {
      "item": {
        "type": "code",
        "id": "7c4406778665cd19",
        "text": "printf '\\100\\353\\375' >prog.bin\nblinkenlights.com -rt prog.bin"
      },
      "id": "7c4406778665cd19",
      "type": "add",
      "after": "499ad1f78861b432",
      "date": 1676121968781
    },
    {
      "type": "edit",
      "id": "7c4406778665cd19",
      "item": {
        "type": "code",
        "id": "7c4406778665cd19",
        "text": "printf '\\100\\353\\375' >prog.bin\nblinkenlights.com -rt prog.bin"
      },
      "date": 1676121971159
    },
    {
      "item": {
        "type": "paragraph",
        "id": "15d44f720e35f31d",
        "text": "You should then see your program appear in a terminal interface that looks like the following: "
      },
      "id": "15d44f720e35f31d",
      "type": "add",
      "after": "7c4406778665cd19",
      "date": 1676122035173
    },
    {
      "type": "edit",
      "id": "15d44f720e35f31d",
      "item": {
        "type": "paragraph",
        "id": "15d44f720e35f31d",
        "text": "You should then see your program appear in a terminal interface that looks like the following: "
      },
      "date": 1676122037051
    },
    {
      "item": {
        "type": "html",
        "id": "9ce48ee669d52853",
        "text": "<img\n  src=\"https://worker.jart.workers.dev/blinkenlights/rawoctal.png\"\n  width=\"100%\"\n>\n"
      },
      "id": "9ce48ee669d52853",
      "type": "add",
      "after": "15d44f720e35f31d",
      "date": 1676122043633
    },
    {
      "type": "edit",
      "id": "9ce48ee669d52853",
      "item": {
        "type": "html",
        "id": "9ce48ee669d52853",
        "text": "<img\n  src=\"https://worker.jart.workers.dev/blinkenlights/rawoctal.png\"\n  width=\"100%\"\n>\n"
      },
      "date": 1676122061378
    },
    {
      "type": "edit",
      "id": "9ce48ee669d52853",
      "item": {
        "type": "html",
        "id": "9ce48ee669d52853",
        "text": "<img\n  src=\"https://worker.jart.workers.dev/blinkenlights/rawoctal.png\"\n  width=\"100%\"\n>\n"
      },
      "date": 1676122072623
    },
    {
      "item": {
        "type": "paragraph",
        "id": "b89515c9af3797d4",
        "text": "You can then press the s key to step through your program. Be sure to make the terminal font size as small as possible, and to maximize the terminal window, so that you see all the panels. It’s also a good idea to enable SSH compression when accessing Linux via the net, since it’ll increase your framerate."
      },
      "id": "b89515c9af3797d4",
      "type": "add",
      "after": "9ce48ee669d52853",
      "date": 1676122083039
    },
    {
      "type": "edit",
      "id": "b89515c9af3797d4",
      "item": {
        "type": "paragraph",
        "id": "b89515c9af3797d4",
        "text": "You can then press the s key to step through your program. Be sure to make the terminal font size as small as possible, and to maximize the terminal window, so that you see all the panels. It’s also a good idea to enable SSH compression when accessing Linux via the net, since it’ll increase your framerate."
      },
      "date": 1676122084812,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "<html>\r\n<head><title>500 Internal Server Error</title></head>\r\n<body>\r\n<center><h1>500 Internal Server Error</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n"
      }
    },
    {
      "type": "fork",
      "date": 1676122086802
    },
    {
      "item": {
        "type": "factory",
        "id": "ef4f308a0239b23b"
      },
      "id": "ef4f308a0239b23b",
      "type": "add",
      "after": "b89515c9af3797d4",
      "date": 1676122159897
    },
    {
      "type": "edit",
      "id": "ef4f308a0239b23b",
      "item": {
        "type": "paragraph",
        "id": "ef4f308a0239b23b",
        "text": "⇒ [[Assembling Real Mode Code]]"
      },
      "date": 1676122170100
    }
  ]
}