{
  "title": "Motivations for Compositionality",
  "story": [
    {
      "type": "markdown",
      "id": "58f587a028f162e1",
      "text": "Despite the similar timing, the motivations for the two systems could hardly have been more different. Smalltalk’s lay in an outward-looking, futuristic vision of personal computing as an expansion of human thought, society and education— its inspirations including Engelbart’s NLS, Sutherland’s Sketchpad and Papert’s LOGO. It was concerned with lowering human thoughts down gracefully to a level executable by machine. Unix’s aspirations were more prosaic—to create a powerful and efficient time-sharing system suitable for minicomputers of the day, borrowing those good ideas which could be salvaged from Multics without falling victim to the overambition, slow development and machine-level inefficiency that had led to Bell Labs’ withdrawal from the latter project (Ritchie 1984). The services required of the operating system were directed largely by the hardware and the immediate problem of efficiently time-sharing it—although details of the design were also guided by its creators’ experience as programmers."
    },
    {
      "type": "markdown",
      "id": "da7d4ad31057a4e0",
      "text": "Both systems were, however, united in seeking a coherent system of powerful abstractions for interactive use by programmers and end users, and in fact drawing very limited distinction between these two categories of human. Both had also latched onto the idea of *compositionality*: that the path to a flexible and powerful system lay in a few primitives which could beget a range of simple constituent parts amenable to combination, thereby servicing a very large space of user needs using relatively little new code. Later, Kernighan and Pike (1984) would summarise Unix philosophy as “the idea that the power of a system comes more from the relationships among programs than from the programs themselves”, while Kay credited as Smalltalk’s essence the idea that “everything we can describe can be represented by the recursive composition of a single kind of behavioral building block”."
    },
    {
      "type": "markdown",
      "id": "726bee8558dd9541",
      "text": "Both Unix and Smalltalk can be seen as “grand designs” in a modernist tradition—seeking to contain and circumscribe particular visions of computation and the services supporting it. However, they differ significantly in the grandness of their ambition. Kay summarised his intention with Smalltalk’s object abstraction as being to “take the hardest and most profound thing you need to do, make it great, and then build every easier thing out of it”. This is aiming high and leaving little room at the top, instead seeking to *contain* from above. By contrast, Ritchie repeatedly emphasises the more restrained goal of building a *self-supporting* environment— that is, sufficient for running the tools necessary to develop the system itself, including ancillary tasks such as text-formatting of the system’s documentation, but with limited concern for what might characterise application programming in general. That the system’s core time-sharing and programming mechanisms could provide a usable foundation for more general applications was an aspiration, made reasonable by an evolutionary mindset and absence of truly fixed decisions, but not a critical initial part of the exercise."
    },
    {
      "type": "markdown",
      "id": "c51c49fb15bf8e17",
      "text": "Next: [[Evolution and Survival]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Motivations for Compositionality",
        "story": []
      },
      "date": 1635964659304
    },
    {
      "item": {
        "type": "factory",
        "id": "58f587a028f162e1"
      },
      "id": "58f587a028f162e1",
      "type": "add",
      "date": 1635964671850
    },
    {
      "type": "edit",
      "id": "58f587a028f162e1",
      "item": {
        "type": "markdown",
        "id": "58f587a028f162e1",
        "text": "Despite the similar timing, the motivations for the two systems could hardly have been more different. Smalltalk’s lay in an outward-looking, futuristic vision of personal computing as an expansion of human thought, society and education— its inspirations including Engelbart’s NLS, Sutherland’s Sketchpad and Papert’s LOGO. It was concerned with lowering human thoughts down gracefully to a level executable by machine. Unix’s aspirations were more prosaic—to create a powerful and efficient time-sharing system suitable for minicomputers of the day, borrowing those good ideas which could be salvaged from Multics without falling victim to the overambition, slow development and machine-level inefficiency that had led to Bell Labs’ withdrawal from the latter project (Ritchie 1984). The services required of the operating system were directed largely by the hardware and the immediate problem of efficiently time-sharing it—although details of the design were also guided by its creators’ experience as programmers."
      },
      "date": 1635964674297
    },
    {
      "item": {
        "type": "factory",
        "id": "da7d4ad31057a4e0"
      },
      "id": "da7d4ad31057a4e0",
      "type": "add",
      "after": "58f587a028f162e1",
      "date": 1635964737118
    },
    {
      "type": "edit",
      "id": "da7d4ad31057a4e0",
      "item": {
        "type": "markdown",
        "id": "da7d4ad31057a4e0",
        "text": "Both systems were, however, united in seeking a coherent system of powerful abstractions for interactive use by programmers and end users, and in fact drawing very limited distinction between these two categories of human. Both had also latched onto the idea of compositionality: that the path to a flexible and powerful system lay in a few primitives which could beget a range of simple constituent parts amenable to combination, thereby servicing a very large space of user needs using relatively little new code. Later, Kernighan and Pike (1984) would summarise Unix philosophy as “the idea that the power of a system comes more from the relationships among programs than from the programs themselves”, while Kay credited as Smalltalk’s essence the idea that “everything we can describe can be represented by the recursive composition of a single kind of behavioral building block”."
      },
      "date": 1635964740345
    },
    {
      "type": "edit",
      "id": "da7d4ad31057a4e0",
      "item": {
        "type": "markdown",
        "id": "da7d4ad31057a4e0",
        "text": "Both systems were, however, united in seeking a coherent system of powerful abstractions for interactive use by programmers and end users, and in fact drawing very limited distinction between these two categories of human. Both had also latched onto the idea of *compositionality*: that the path to a flexible and powerful system lay in a few primitives which could beget a range of simple constituent parts amenable to combination, thereby servicing a very large space of user needs using relatively little new code. Later, Kernighan and Pike (1984) would summarise Unix philosophy as “the idea that the power of a system comes more from the relationships among programs than from the programs themselves”, while Kay credited as Smalltalk’s essence the idea that “everything we can describe can be represented by the recursive composition of a single kind of behavioral building block”."
      },
      "date": 1635964770440
    },
    {
      "item": {
        "type": "factory",
        "id": "726bee8558dd9541"
      },
      "id": "726bee8558dd9541",
      "type": "add",
      "after": "da7d4ad31057a4e0",
      "date": 1635964806596
    },
    {
      "type": "edit",
      "id": "726bee8558dd9541",
      "item": {
        "type": "markdown",
        "id": "726bee8558dd9541",
        "text": "Both Unix and Smalltalk can be seen as “grand designs” in a modernist tradition—seeking to contain and circumscribe particular visions of computation and the services supporting it. However, they differ significantly in the grandness of their ambition. Kay summarised his intention with Smalltalk’s object abstraction as being to “take the hardest and most profound thing you need to do, make it great, and then build every easier thing out of it”. This is aiming high and leaving little room at the top, instead seeking to contain from above. By contrast, Ritchie repeatedly emphasises the more restrained goal of building a self-supporting environment— that is, sufficient for running the tools necessary to develop the system itself, including ancillary tasks such as text-formatting of the system’s documentation, but with limited concern for what might characterise application programming in general. That the system’s core time-sharing and programming mechanisms could provide a usable foundation for more general applications was an aspiration, made reasonable by an evolutionary mindset and absence of truly fixed decisions, but not a critical initial part of the exercise."
      },
      "date": 1635964809612
    },
    {
      "type": "edit",
      "id": "726bee8558dd9541",
      "item": {
        "type": "markdown",
        "id": "726bee8558dd9541",
        "text": "Both Unix and Smalltalk can be seen as “grand designs” in a modernist tradition—seeking to contain and circumscribe particular visions of computation and the services supporting it. However, they differ significantly in the grandness of their ambition. Kay summarised his intention with Smalltalk’s object abstraction as being to “take the hardest and most profound thing you need to do, make it great, and then build every easier thing out of it”. This is aiming high and leaving little room at the top, instead seeking to *contain* from above. By contrast, Ritchie repeatedly emphasises the more restrained goal of building a self-supporting environment— that is, sufficient for running the tools necessary to develop the system itself, including ancillary tasks such as text-formatting of the system’s documentation, but with limited concern for what might characterise application programming in general. That the system’s core time-sharing and programming mechanisms could provide a usable foundation for more general applications was an aspiration, made reasonable by an evolutionary mindset and absence of truly fixed decisions, but not a critical initial part of the exercise."
      },
      "date": 1635964851955
    },
    {
      "type": "edit",
      "id": "726bee8558dd9541",
      "item": {
        "type": "markdown",
        "id": "726bee8558dd9541",
        "text": "Both Unix and Smalltalk can be seen as “grand designs” in a modernist tradition—seeking to contain and circumscribe particular visions of computation and the services supporting it. However, they differ significantly in the grandness of their ambition. Kay summarised his intention with Smalltalk’s object abstraction as being to “take the hardest and most profound thing you need to do, make it great, and then build every easier thing out of it”. This is aiming high and leaving little room at the top, instead seeking to *contain* from above. By contrast, Ritchie repeatedly emphasises the more restrained goal of building a *self-supporting* environment— that is, sufficient for running the tools necessary to develop the system itself, including ancillary tasks such as text-formatting of the system’s documentation, but with limited concern for what might characterise application programming in general. That the system’s core time-sharing and programming mechanisms could provide a usable foundation for more general applications was an aspiration, made reasonable by an evolutionary mindset and absence of truly fixed decisions, but not a critical initial part of the exercise."
      },
      "date": 1635964875829
    },
    {
      "item": {
        "type": "factory",
        "id": "c51c49fb15bf8e17"
      },
      "id": "c51c49fb15bf8e17",
      "type": "add",
      "after": "726bee8558dd9541",
      "date": 1635964910790
    },
    {
      "type": "edit",
      "id": "c51c49fb15bf8e17",
      "item": {
        "type": "markdown",
        "id": "c51c49fb15bf8e17",
        "text": "Next: [[Evolution and Survival]]"
      },
      "date": 1635964926460
    }
  ]
}