{
  "title": "Capture Graph Changes",
  "story": [
    {
      "type": "paragraph",
      "id": "eb8f5ba7bed00138",
      "text": "\nLI, Haoyang and CHEN, Lei, 2021. Cache-based GNN System for Dynamic Graphs. In: Proceedings of the 30th ACM International Conference on Information & Knowledge Management. Online. Virtual Event Queensland Australia: ACM. 26 October 2021. p. 937–946. ISBN 978-1-4503-8446-9. DOI 10.1145/3459637.3482237. [Accessed 6 March 2024]. \n\nLI, Haoyang and CHEN, Lei, 2023. EARLY: Efficient and Reliable Graph Neural Network for Dynamic Graphs. Proceedings of the ACM on Management of Data. 13 June 2023. Vol. 1, no. 2, p. 1–28. DOI 10.1145/3589308. \nGraph neural networks have been widely used to learn node representations for many real-world static graphs. In general, they learn node representations by recursively aggregating information from neighbors. However, graphs in many applications are dynamic, evolving with continuous graph events, such as node feature and graph structure updates. These events require the node representations to be updated accordingly. Currently, due to the real-time requirement, how to efficiently and reliably update node representations under continuous graph events is still an open problem. Recent studies propose two solutions to partially address this problem, but their performance is still limited. First, local-based GNNs only update the nodes directly involved in events, suffering from the quality-deficit issue, since they neglect the other nodes affected by these events. Second, neighbor-sampling GNNs propose to sample neighbors to accelerate neighbor aggregation computations, encountering the neighbor-redundant issue. These sampled neighbors may be similar and cannot reflect the distribution of all neighbors, leading that node representations aggregated on these redundant neighbors may differ from those aggregated on all neighbors. In this paper, we propose an efficient and reliable graph neural network, namely EARLY, to update node representations for dynamic graphs. We first identify the top-k influential nodes that are most affected by graph events. Then, to sample neighbors diversely, we propose a diversity-aware layer-wise sampling technique. We theoretically demonstrate that this technique can decrease the sampling expectation error and learn more reliable node representations. Therefore, the top-k nodes selection and diversity-aware sampling enable EARLY to efficiently update node representations in a reliable way. Extensive experiments on the five real-world graphs demonstrate the effectiveness and efficiency of our proposed EARLY.\n\nLIU, Meng, WU, Jiaming and LIU, Yong, 2022. Embedding Global and Local Influences for Dynamic Graphs. In: Proceedings of the 31st ACM International Conference on Information & Knowledge Management. Online. Atlanta GA USA: ACM. 17 October 2022. p. 4249–4253. ISBN 978-1-4503-9236-5. DOI 10.1145/3511808.3557594. [Accessed 6 March 2024]. \n\nMIAO, Youshan, HAN, Wentao, LI, Kaiwei, WU, Ming, YANG, Fan, ZHOU, Lidong, PRABHAKARAN, Vijayan, CHEN, Enhong and CHEN, Wenguang, 2015. ImmortalGraph: A System for Storage and Analysis of Temporal Graphs. ACM Transactions on Storage. 29 July 2015. Vol. 11, no. 3, p. 1–34. DOI 10.1145/2700302. \nTemporal graphs that capture graph changes over time are attracting increasing interest from research communities, for functions such as understanding temporal characteristics of social interactions on a time-evolving social graph. ImmortalGraph is a storage and execution engine designed and optimized specifically for temporal graphs. Locality is at the center of ImmortalGraph’s design: temporal graphs are carefully laid out in both persistent storage and memory, taking into account data locality in both time and graph-structure dimensions. ImmortalGraph introduces the notion of\n              locality-aware batch scheduling\n              in computation, so that common “bulk” operations on temporal graphs are scheduled to maximize the benefit of in-memory data locality. The design of ImmortalGraph explores an interesting interplay among locality, parallelism, and incremental computation in supporting common mining tasks on temporal graphs. The result is a high-performance temporal-graph system that is up to 5 times more efficient than existing database solutions for graph queries. The locality optimizations in ImmortalGraph offer up to an order of magnitude speedup for temporal iterative graph mining compared to a straightforward application of existing graph engines on a series of snapshots.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Capture Graph Changes",
        "story": []
      },
      "date": 1709747520495
    },
    {
      "type": "edit",
      "id": "eb8f5ba7bed00138",
      "item": {
        "type": "paragraph",
        "id": "eb8f5ba7bed00138",
        "text": "\nLI, Haoyang and CHEN, Lei, 2021. Cache-based GNN System for Dynamic Graphs. In: Proceedings of the 30th ACM International Conference on Information & Knowledge Management. Online. Virtual Event Queensland Australia: ACM. 26 October 2021. p. 937–946. ISBN 978-1-4503-8446-9. DOI 10.1145/3459637.3482237. [Accessed 6 March 2024]. \n\nLI, Haoyang and CHEN, Lei, 2023. EARLY: Efficient and Reliable Graph Neural Network for Dynamic Graphs. Proceedings of the ACM on Management of Data. 13 June 2023. Vol. 1, no. 2, p. 1–28. DOI 10.1145/3589308. \nGraph neural networks have been widely used to learn node representations for many real-world static graphs. In general, they learn node representations by recursively aggregating information from neighbors. However, graphs in many applications are dynamic, evolving with continuous graph events, such as node feature and graph structure updates. These events require the node representations to be updated accordingly. Currently, due to the real-time requirement, how to efficiently and reliably update node representations under continuous graph events is still an open problem. Recent studies propose two solutions to partially address this problem, but their performance is still limited. First, local-based GNNs only update the nodes directly involved in events, suffering from the quality-deficit issue, since they neglect the other nodes affected by these events. Second, neighbor-sampling GNNs propose to sample neighbors to accelerate neighbor aggregation computations, encountering the neighbor-redundant issue. These sampled neighbors may be similar and cannot reflect the distribution of all neighbors, leading that node representations aggregated on these redundant neighbors may differ from those aggregated on all neighbors. In this paper, we propose an efficient and reliable graph neural network, namely EARLY, to update node representations for dynamic graphs. We first identify the top-k influential nodes that are most affected by graph events. Then, to sample neighbors diversely, we propose a diversity-aware layer-wise sampling technique. We theoretically demonstrate that this technique can decrease the sampling expectation error and learn more reliable node representations. Therefore, the top-k nodes selection and diversity-aware sampling enable EARLY to efficiently update node representations in a reliable way. Extensive experiments on the five real-world graphs demonstrate the effectiveness and efficiency of our proposed EARLY.\n\nLIU, Meng, WU, Jiaming and LIU, Yong, 2022. Embedding Global and Local Influences for Dynamic Graphs. In: Proceedings of the 31st ACM International Conference on Information & Knowledge Management. Online. Atlanta GA USA: ACM. 17 October 2022. p. 4249–4253. ISBN 978-1-4503-9236-5. DOI 10.1145/3511808.3557594. [Accessed 6 March 2024]. \n\nMIAO, Youshan, HAN, Wentao, LI, Kaiwei, WU, Ming, YANG, Fan, ZHOU, Lidong, PRABHAKARAN, Vijayan, CHEN, Enhong and CHEN, Wenguang, 2015. ImmortalGraph: A System for Storage and Analysis of Temporal Graphs. ACM Transactions on Storage. 29 July 2015. Vol. 11, no. 3, p. 1–34. DOI 10.1145/2700302. \nTemporal graphs that capture graph changes over time are attracting increasing interest from research communities, for functions such as understanding temporal characteristics of social interactions on a time-evolving social graph. ImmortalGraph is a storage and execution engine designed and optimized specifically for temporal graphs. Locality is at the center of ImmortalGraph’s design: temporal graphs are carefully laid out in both persistent storage and memory, taking into account data locality in both time and graph-structure dimensions. ImmortalGraph introduces the notion of\n              locality-aware batch scheduling\n              in computation, so that common “bulk” operations on temporal graphs are scheduled to maximize the benefit of in-memory data locality. The design of ImmortalGraph explores an interesting interplay among locality, parallelism, and incremental computation in supporting common mining tasks on temporal graphs. The result is a high-performance temporal-graph system that is up to 5 times more efficient than existing database solutions for graph queries. The locality optimizations in ImmortalGraph offer up to an order of magnitude speedup for temporal iterative graph mining compared to a straightforward application of existing graph engines on a series of snapshots.\n"
      },
      "date": 1709747524750
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709829901706
    }
  ]
}