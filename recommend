{
  "title": "recommend",
  "story": [
    {
      "type": "markdown",
      "id": "689c26670d6d4201",
      "text": "recommend | BrE ˌrɛkəˈmɛnd, AmE ˌrɛkəˈmɛnd |\ntransitive verb\n1 [[empfehlen]]\n▸ recommend sb to do sth\njmdm. empfehlen, etw. zu tun\n2 (make acceptable) sprechen für\n▸ the plan has little/nothing to recommend it\nes spricht wenig/nichts für den Plan"
    },
    {
      "type": "pagefold",
      "id": "506f79af23930109",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "84feff49fabebd4d",
      "text": "The `recommend` function of the [[Solo Super Collaborator]] is used to recommend similar items based on a [[chosen]] set of items represented by a graph."
    },
    {
      "type": "code",
      "id": "329faf65f46ff41e",
      "text": "function recommend(chosen) {\n    const vocabulary = new Set()\n    const hash = node => `${node.type}: ${node.props.name || ''}`\n    for (const poem of chosen) {\n      for (const node of poem.graph.nodes) {\n        vocabulary.add(hash(node))\n      }\n    }\n    const similar = graph => {\n      for (const node of graph.nodes) {\n        if (vocabulary.has(hash(node))) return true\n      }\n      return false\n    }\n    const beam = croquet.view.beam()\n    window.beam.querySelectorAll('input[type=checkbox]').forEach(elem => {\n      const color = !elem.checked && similar(beam[elem.value].graph) ? 'darkorange' : 'black'\n      elem.nextElementSibling.style.color = color\n    })\n  }"
    },
    {
      "type": "markdown",
      "id": "4bce9d77662343ff",
      "text": "Here's how it works:\n\n1. It initializes an empty set called `vocabulary` to [[Store Unique Representations of Nodes]].\n2. It defines a hashing function called `hash` to [[Generate a Unique Representation of Each Node]] based on its type and name (if available).\n3. It iterates over each [[Poem]] in the `chosen` array and for each node in each poem's graph, it adds the hashed representation of the node to the `vocabulary` set.\n4. It defines a function called `[[similar]]` which takes a graph as input and checks if any node in the graph has a hashed representation that matches any in the `vocabulary` set. If such a match is found, it returns `true`; otherwise, it returns `false`.\n5. It retrieves the `beam` from a `croquet.view` object (assuming `croquet.view.beam()` returns the beam) and iterates over each checkbox input element within the `beam`.\n6. For each checkbox, it determines whether it is similar to the chosen items by calling the `similar` function with the corresponding graph from the `beam`.\n7. If the checkbox is not checked and it is similar to any of the chosen items, it sets the color of its next sibling element (presumably a label or text) to 'darkorange'; otherwise, it sets it to 'black'.\n\nIn summary, this function recommends similar items in a user interface by visually highlighting them based on their [[Similarity]] to the chosen items. (ChatGPT 3.5)"
    },
    {
      "type": "image",
      "id": "f10ba47e3aa92e0f",
      "text": "function recommend",
      "size": "wide",
      "width": 418,
      "height": 253,
      "url": "/assets/plugins/image/67c3c6a0dc33b110b44fdeffc9d2ca70.jpg"
    },
    {
      "type": "paragraph",
      "id": "7244829a141fb9fe",
      "text": "See [[Solo Super Collaborator]]"
    },
    {
      "type": "markdown",
      "id": "418260b7c7f27c13",
      "text": "# Assets"
    },
    {
      "type": "assets",
      "id": "386b35489e8f5706",
      "text": "pages/recommend"
    },
    {
      "type": "paragraph",
      "id": "90848227f7b20dbe",
      "text": "⇒ [[Derive Type of Chosen Variable]]"
    },
    {
      "type": "paragraph",
      "id": "cca1366a8b92c07e",
      "text": "⇒ [[Solo Super Collaborator]] with recommend's new [[similar]] function. Try it. [http://wiki.ralfbarkow.ch/assets/pages/solo-super-collaborator/README.html?read=https://raw.githubusercontent.com/WardCunningham/search/master/README.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Color.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Client.graph.jsonl readme]"
    },
    {
      "type": "code",
      "id": "c813bacc45aff705",
      "text": "const similar = (graph) => {\n        for (const node of graph.nodes) {\n            if (vocabulary.has(hash(node))) { \n                node.props[\"recommended\"] = true;\n                return true;\n            }\n        }\n        // If no similar node found, set \"recommended\" property to false\n        for (const node of graph.nodes) {\n            node.props[\"recommended\"] = false;\n        }\n        return false;\n    }"
    },
    {
      "type": "paragraph",
      "id": "95eb325777adb374",
      "text": "⇒ [[Property Graphs as Javascript Module]]: How to add a key-value pair to the property map of a node? [https://github.com/RalfBarkow/assets/commit/8b83bf534f9595e9cfada70c6050e0b6c04bbb67 commit]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "recommend",
        "story": []
      },
      "date": 1708517712033
    },
    {
      "type": "edit",
      "id": "d3043add41843a5e",
      "item": {
        "type": "markdown",
        "id": "d3043add41843a5e",
        "text": "recommend | BrE ˌrɛkəˈmɛnd, AmE ˌrɛkəˈmɛnd |\ntransitive verb\n1 empfehlen\n▸ recommend sb to do sth\njmdm. empfehlen, etw. zu tun\n2 (make acceptable) sprechen für\n▸ the plan has little/nothing to recommend it\nes spricht wenig/nichts für den Plan"
      },
      "date": 1708517715952
    },
    {
      "item": {
        "type": "factory",
        "id": "329faf65f46ff41e"
      },
      "id": "329faf65f46ff41e",
      "type": "add",
      "after": "d3043add41843a5e",
      "date": 1708517763114
    },
    {
      "type": "edit",
      "id": "329faf65f46ff41e",
      "item": {
        "type": "code",
        "id": "329faf65f46ff41e",
        "text": "function recommend(chosen) {\n    const vocabulary = new Set()\n    const hash = node => `${node.type}: ${node.props.name || ''}`\n    for (const poem of chosen) {\n      for (const node of poem.graph.nodes) {\n        vocabulary.add(hash(node))\n      }\n    }\n    const similar = graph => {\n      for (const node of graph.nodes) {\n        if (vocabulary.has(hash(node))) return true\n      }\n      return false\n    }\n    const beam = croquet.view.beam()\n    window.beam.querySelectorAll('input[type=checkbox]').forEach(elem => {\n      const color = !elem.checked && similar(beam[elem.value].graph) ? 'darkorange' : 'black'\n      elem.nextElementSibling.style.color = color\n    })\n  }"
      },
      "date": 1708517765755
    },
    {
      "item": {
        "type": "factory",
        "id": "84feff49fabebd4d"
      },
      "id": "84feff49fabebd4d",
      "type": "add",
      "after": "329faf65f46ff41e",
      "date": 1708517877087
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "function recommend(chosen) {\n    const vocabulary = new Set()\n    const hash = node => `${node.type}: ${node.props.name || ''}`\n    for (const poem of chosen) {\n      for (const node of poem.graph.nodes) {\n        vocabulary.add(hash(node))\n      }\n    }\n    const similar = graph => {\n      for (const node of graph.nodes) {\n        if (vocabulary.has(hash(node))) return true\n      }\n      return false\n    }\n    const beam = croquet.view.beam()\n    window.beam.querySelectorAll('input[type=checkbox]').forEach(elem => {\n      const color = !elem.checked && similar(beam[elem.value].graph) ? 'darkorange' : 'black'\n      elem.nextElementSibling.style.color = color\n    })\n  }"
      },
      "date": 1708517881644
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "This function, `recommend`, is used to recommend similar items based on a chosen set of items represented by a graph. Here's how it works:\n\n1. It initializes an empty set called `vocabulary` to store unique representations of nodes.\n2. It defines a hashing function called `hash` to generate a unique representation of each node based on its type and name (if available).\n3. It iterates over each poem in the `chosen` array and for each node in each poem's graph, it adds the hashed representation of the node to the `vocabulary` set.\n4. It defines a function called `similar` which takes a graph as input and checks if any node in the graph has a hashed representation that matches any in the `vocabulary` set. If such a match is found, it returns `true`; otherwise, it returns `false`.\n5. It retrieves the `beam` from a `croquet.view` object (assuming `croquet.view.beam()` returns the beam) and iterates over each checkbox input element within the `beam`.\n6. For each checkbox, it determines whether it is similar to the chosen items by calling the `similar` function with the corresponding graph from the `beam`.\n7. If the checkbox is not checked and it is similar to any of the chosen items, it sets the color of its next sibling element (presumably a label or text) to 'darkorange'; otherwise, it sets it to 'black'.\n\nIn summary, this function recommends similar items in a user interface by visually highlighting them based on their similarity to the chosen items. (ChatGPT 3.5)"
      },
      "date": 1708517900121
    },
    {
      "id": "689c26670d6d4201",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "689c26670d6d4201",
        "text": "recommend | BrE ˌrɛkəˈmɛnd, AmE ˌrɛkəˈmɛnd |\ntransitive verb\n1 empfehlen\n▸ recommend sb to do sth\njmdm. empfehlen, etw. zu tun\n2 (make acceptable) sprechen für\n▸ the plan has little/nothing to recommend it\nes spricht wenig/nichts für den Plan"
      },
      "attribution": {
        "page": "scratch"
      },
      "date": 1708518093178
    },
    {
      "item": {
        "type": "factory",
        "id": "791fa8ba9455cffb"
      },
      "id": "791fa8ba9455cffb",
      "type": "add",
      "after": "84feff49fabebd4d",
      "date": 1708518148496
    },
    {
      "type": "edit",
      "id": "791fa8ba9455cffb",
      "item": {
        "type": "paragraph",
        "id": "791fa8ba9455cffb",
        "text": "See [[Solo Collaborator]]"
      },
      "date": 1708518156827
    },
    {
      "id": "7244829a141fb9fe",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7244829a141fb9fe",
        "text": "See [[Solo Super Collaborator]]"
      },
      "after": "791fa8ba9455cffb",
      "attribution": {
        "page": "Solo Collaborator",
        "site": "localhost:3000"
      },
      "date": 1708518300868
    },
    {
      "type": "remove",
      "id": "791fa8ba9455cffb",
      "date": 1708518303650
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "This function, `recommend`, is used to recommend similar items based on a chosen set of items represented by a graph. Here's how it works:\n\n1. It initializes an empty set called `vocabulary` to store unique representations of nodes.\n2. It defines a hashing function called `hash` to generate a unique representation of each node based on its type and name (if available).\n3. It iterates over each [[Poem]] in the `chosen` array and for each node in each poem's graph, it adds the hashed representation of the node to the `vocabulary` set.\n4. It defines a function called `similar` which takes a graph as input and checks if any node in the graph has a hashed representation that matches any in the `vocabulary` set. If such a match is found, it returns `true`; otherwise, it returns `false`.\n5. It retrieves the `beam` from a `croquet.view` object (assuming `croquet.view.beam()` returns the beam) and iterates over each checkbox input element within the `beam`.\n6. For each checkbox, it determines whether it is similar to the chosen items by calling the `similar` function with the corresponding graph from the `beam`.\n7. If the checkbox is not checked and it is similar to any of the chosen items, it sets the color of its next sibling element (presumably a label or text) to 'darkorange'; otherwise, it sets it to 'black'.\n\nIn summary, this function recommends similar items in a user interface by visually highlighting them based on their similarity to the chosen items. (ChatGPT 3.5)"
      },
      "date": 1708518361505
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "This function, `recommend`, is used to recommend similar items based on a chosen set of items represented by a graph. Here's how it works:\n\n1. It initializes an empty set called `vocabulary` to store unique representations of nodes.\n2. It defines a hashing function called `hash` to generate a unique representation of each node based on its type and name (if available).\n3. It iterates over each [[Poem]] in the `chosen` array and for each node in each poem's graph, it adds the hashed representation of the node to the `vocabulary` set.\n4. It defines a function called `[[similar]]` which takes a graph as input and checks if any node in the graph has a hashed representation that matches any in the `vocabulary` set. If such a match is found, it returns `true`; otherwise, it returns `false`.\n5. It retrieves the `beam` from a `croquet.view` object (assuming `croquet.view.beam()` returns the beam) and iterates over each checkbox input element within the `beam`.\n6. For each checkbox, it determines whether it is similar to the chosen items by calling the `similar` function with the corresponding graph from the `beam`.\n7. If the checkbox is not checked and it is similar to any of the chosen items, it sets the color of its next sibling element (presumably a label or text) to 'darkorange'; otherwise, it sets it to 'black'.\n\nIn summary, this function recommends similar items in a user interface by visually highlighting them based on their similarity to the chosen items. (ChatGPT 3.5)"
      },
      "date": 1708518384964
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "This function, `recommend`, is used to recommend similar items based on a chosen set of items represented by a graph. Here's how it works:\n\n1. It initializes an empty set called `vocabulary` to store unique representations of nodes.\n2. It defines a hashing function called `hash` to generate a unique representation of each node based on its type and name (if available).\n3. It iterates over each [[Poem]] in the `chosen` array and for each node in each poem's graph, it adds the hashed representation of the node to the `vocabulary` set.\n4. It defines a function called `[[similar]]` which takes a graph as input and checks if any node in the graph has a hashed representation that matches any in the `vocabulary` set. If such a match is found, it returns `true`; otherwise, it returns `false`.\n5. It retrieves the `beam` from a `croquet.view` object (assuming `croquet.view.beam()` returns the beam) and iterates over each checkbox input element within the `beam`.\n6. For each checkbox, it determines whether it is similar to the chosen items by calling the `similar` function with the corresponding graph from the `beam`.\n7. If the checkbox is not checked and it is similar to any of the chosen items, it sets the color of its next sibling element (presumably a label or text) to 'darkorange'; otherwise, it sets it to 'black'.\n\nIn summary, this function recommends similar items in a user interface by visually highlighting them based on their [[Similarity]] to the chosen items. (ChatGPT 3.5)"
      },
      "date": 1708518471327
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "This function, `recommend`, is used to recommend similar items based on a chosen set of items represented by a graph."
      },
      "date": 1708607035211
    },
    {
      "type": "add",
      "id": "4bce9d77662343ff",
      "item": {
        "type": "markdown",
        "id": "4bce9d77662343ff",
        "text": "Here's how it works:\n\n1. It initializes an empty set called `vocabulary` to store unique representations of nodes.\n2. It defines a hashing function called `hash` to generate a unique representation of each node based on its type and name (if available).\n3. It iterates over each [[Poem]] in the `chosen` array and for each node in each poem's graph, it adds the hashed representation of the node to the `vocabulary` set.\n4. It defines a function called `[[similar]]` which takes a graph as input and checks if any node in the graph has a hashed representation that matches any in the `vocabulary` set. If such a match is found, it returns `true`; otherwise, it returns `false`.\n5. It retrieves the `beam` from a `croquet.view` object (assuming `croquet.view.beam()` returns the beam) and iterates over each checkbox input element within the `beam`.\n6. For each checkbox, it determines whether it is similar to the chosen items by calling the `similar` function with the corresponding graph from the `beam`.\n7. If the checkbox is not checked and it is similar to any of the chosen items, it sets the color of its next sibling element (presumably a label or text) to 'darkorange'; otherwise, it sets it to 'black'.\n\nIn summary, this function recommends similar items in a user interface by visually highlighting them based on their [[Similarity]] to the chosen items. (ChatGPT 3.5)"
      },
      "after": "84feff49fabebd4d",
      "date": 1708607037057
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "The function `recommend` is used to recommend similar items based on a chosen set of items represented by a graph."
      },
      "date": 1708607053178
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "The `recommend` function is used to recommend similar items based on a chosen set of items represented by a graph."
      },
      "date": 1708607068926
    },
    {
      "id": "84feff49fabebd4d",
      "type": "move",
      "order": [
        "689c26670d6d4201",
        "84feff49fabebd4d",
        "329faf65f46ff41e",
        "4bce9d77662343ff",
        "7244829a141fb9fe"
      ],
      "date": 1708607076724
    },
    {
      "id": "506f79af23930109",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "506f79af23930109",
        "text": "~"
      },
      "after": "689c26670d6d4201",
      "attribution": {
        "page": "scratch"
      },
      "date": 1708607127713
    },
    {
      "item": {
        "type": "factory",
        "id": "f10ba47e3aa92e0f"
      },
      "id": "f10ba47e3aa92e0f",
      "type": "add",
      "after": "7244829a141fb9fe",
      "date": 1709835194761
    },
    {
      "type": "edit",
      "id": "f10ba47e3aa92e0f",
      "item": {
        "type": "image",
        "id": "f10ba47e3aa92e0f",
        "text": "function recommend",
        "size": "wide",
        "width": 418,
        "height": 253,
        "url": "/assets/plugins/image/67c3c6a0dc33b110b44fdeffc9d2ca70.jpg"
      },
      "date": 1709835224865
    },
    {
      "id": "f10ba47e3aa92e0f",
      "type": "move",
      "order": [
        "689c26670d6d4201",
        "506f79af23930109",
        "84feff49fabebd4d",
        "329faf65f46ff41e",
        "4bce9d77662343ff",
        "f10ba47e3aa92e0f",
        "7244829a141fb9fe"
      ],
      "date": 1709835252325
    },
    {
      "type": "edit",
      "id": "689c26670d6d4201",
      "item": {
        "type": "markdown",
        "id": "689c26670d6d4201",
        "text": "recommend | BrE ˌrɛkəˈmɛnd, AmE ˌrɛkəˈmɛnd |\ntransitive verb\n1 [[empfehlen]]\n▸ recommend sb to do sth\njmdm. empfehlen, etw. zu tun\n2 (make acceptable) sprechen für\n▸ the plan has little/nothing to recommend it\nes spricht wenig/nichts für den Plan"
      },
      "date": 1709846014366
    },
    {
      "type": "edit",
      "id": "4bce9d77662343ff",
      "item": {
        "type": "markdown",
        "id": "4bce9d77662343ff",
        "text": "Here's how it works:\n\n1. It initializes an empty set called `vocabulary` to [[Store Unique Representations of Nodes]].\n2. It defines a hashing function called `hash` to generate a unique representation of each node based on its type and name (if available).\n3. It iterates over each [[Poem]] in the `chosen` array and for each node in each poem's graph, it adds the hashed representation of the node to the `vocabulary` set.\n4. It defines a function called `[[similar]]` which takes a graph as input and checks if any node in the graph has a hashed representation that matches any in the `vocabulary` set. If such a match is found, it returns `true`; otherwise, it returns `false`.\n5. It retrieves the `beam` from a `croquet.view` object (assuming `croquet.view.beam()` returns the beam) and iterates over each checkbox input element within the `beam`.\n6. For each checkbox, it determines whether it is similar to the chosen items by calling the `similar` function with the corresponding graph from the `beam`.\n7. If the checkbox is not checked and it is similar to any of the chosen items, it sets the color of its next sibling element (presumably a label or text) to 'darkorange'; otherwise, it sets it to 'black'.\n\nIn summary, this function recommends similar items in a user interface by visually highlighting them based on their [[Similarity]] to the chosen items. (ChatGPT 3.5)"
      },
      "date": 1709846537290
    },
    {
      "type": "edit",
      "id": "4bce9d77662343ff",
      "item": {
        "type": "markdown",
        "id": "4bce9d77662343ff",
        "text": "Here's how it works:\n\n1. It initializes an empty set called `vocabulary` to [[Store Unique Representations of Nodes]].\n2. It defines a hashing function called `hash` to [[Generate a Unique Representation of Each Node]] based on its type and name (if available).\n3. It iterates over each [[Poem]] in the `chosen` array and for each node in each poem's graph, it adds the hashed representation of the node to the `vocabulary` set.\n4. It defines a function called `[[similar]]` which takes a graph as input and checks if any node in the graph has a hashed representation that matches any in the `vocabulary` set. If such a match is found, it returns `true`; otherwise, it returns `false`.\n5. It retrieves the `beam` from a `croquet.view` object (assuming `croquet.view.beam()` returns the beam) and iterates over each checkbox input element within the `beam`.\n6. For each checkbox, it determines whether it is similar to the chosen items by calling the `similar` function with the corresponding graph from the `beam`.\n7. If the checkbox is not checked and it is similar to any of the chosen items, it sets the color of its next sibling element (presumably a label or text) to 'darkorange'; otherwise, it sets it to 'black'.\n\nIn summary, this function recommends similar items in a user interface by visually highlighting them based on their [[Similarity]] to the chosen items. (ChatGPT 3.5)"
      },
      "date": 1709847557005
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709912522184
    },
    {
      "item": {
        "type": "factory",
        "id": "386b35489e8f5706"
      },
      "id": "386b35489e8f5706",
      "type": "add",
      "after": "7244829a141fb9fe",
      "date": 1712665653343
    },
    {
      "type": "edit",
      "id": "386b35489e8f5706",
      "item": {
        "type": "assets",
        "id": "386b35489e8f5706",
        "text": "pages/recommend"
      },
      "date": 1712665664225
    },
    {
      "item": {
        "type": "factory",
        "id": "418260b7c7f27c13"
      },
      "id": "418260b7c7f27c13",
      "type": "add",
      "after": "386b35489e8f5706",
      "date": 1712666816585
    },
    {
      "id": "418260b7c7f27c13",
      "type": "move",
      "order": [
        "689c26670d6d4201",
        "506f79af23930109",
        "84feff49fabebd4d",
        "329faf65f46ff41e",
        "4bce9d77662343ff",
        "f10ba47e3aa92e0f",
        "7244829a141fb9fe",
        "418260b7c7f27c13",
        "386b35489e8f5706"
      ],
      "date": 1712666820012
    },
    {
      "type": "edit",
      "id": "418260b7c7f27c13",
      "item": {
        "type": "markdown",
        "id": "418260b7c7f27c13",
        "text": "# Assets"
      },
      "date": 1712666826347
    },
    {
      "item": {
        "type": "factory",
        "id": "90848227f7b20dbe"
      },
      "id": "90848227f7b20dbe",
      "type": "add",
      "after": "386b35489e8f5706",
      "date": 1712669191923
    },
    {
      "type": "edit",
      "id": "90848227f7b20dbe",
      "item": {
        "type": "paragraph",
        "id": "90848227f7b20dbe",
        "text": "⇒ [[Deduce the Type of the Chosen Variable]]"
      },
      "date": 1712669246486
    },
    {
      "type": "edit",
      "id": "90848227f7b20dbe",
      "item": {
        "type": "paragraph",
        "id": "90848227f7b20dbe",
        "text": "⇒ [[Derive Type of the Chosen Variable]]"
      },
      "date": 1712669502130
    },
    {
      "type": "edit",
      "id": "90848227f7b20dbe",
      "item": {
        "type": "paragraph",
        "id": "90848227f7b20dbe",
        "text": "⇒ [[Derive Type of Chosen Variable]]"
      },
      "date": 1712669516510
    },
    {
      "type": "add",
      "id": "cca1366a8b92c07e",
      "item": {
        "type": "paragraph",
        "id": "cca1366a8b92c07e",
        "text": "⇒ [[Solo Super Collaborator]] with new recommend function"
      },
      "after": "90848227f7b20dbe",
      "date": 1712672003942
    },
    {
      "type": "edit",
      "id": "cca1366a8b92c07e",
      "item": {
        "type": "paragraph",
        "id": "cca1366a8b92c07e",
        "text": "⇒ [[Solo Super Collaborator]] with new recommend function. Try it. "
      },
      "date": 1712672068379
    },
    {
      "type": "edit",
      "id": "cca1366a8b92c07e",
      "item": {
        "type": "paragraph",
        "id": "cca1366a8b92c07e",
        "text": "⇒ [[Solo Super Collaborator]] with new recommend function. Try it. [http://search.dojo.fed.wiki/assets/pages/solo-super-collaborator/README.html?read=https://raw.githubusercontent.com/WardCunningham/search/master/README.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Color.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Client.graph.jsonl readme]"
      },
      "date": 1712672077261
    },
    {
      "type": "edit",
      "id": "cca1366a8b92c07e",
      "item": {
        "type": "paragraph",
        "id": "cca1366a8b92c07e",
        "text": "⇒ [[Solo Super Collaborator]] with new recommend function. Try it. [http://localhost:3000/assets/pages/solo-super-collaborator/README.html?read=https://raw.githubusercontent.com/WardCunningham/search/master/README.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Color.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Client.graph.jsonl readme]"
      },
      "date": 1712672105564
    },
    {
      "type": "add",
      "id": "95eb325777adb374",
      "item": {
        "type": "paragraph",
        "id": "95eb325777adb374",
        "text": "⇒ [[Property Graphs as Javascript Module]]: How to add a key-value pair to the property map of a node?"
      },
      "after": "cca1366a8b92c07e",
      "date": 1712673355554
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712678615873
    },
    {
      "type": "edit",
      "id": "95eb325777adb374",
      "item": {
        "type": "paragraph",
        "id": "95eb325777adb374",
        "text": "⇒ [[Property Graphs as Javascript Module]]: How to add a key-value pair to the property map of a node? [https://github.com/RalfBarkow/assets/commit/8b83bf534f9595e9cfada70c6050e0b6c04bbb67 commit]"
      },
      "date": 1712678641399
    },
    {
      "type": "edit",
      "id": "cca1366a8b92c07e",
      "item": {
        "type": "paragraph",
        "id": "cca1366a8b92c07e",
        "text": "⇒ [[Solo Super Collaborator]] with new recommend function. Try it. [http://wiki.ralfbarkow.ch/assets/pages/solo-super-collaborator/README.html?read=https://raw.githubusercontent.com/WardCunningham/search/master/README.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Color.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Client.graph.jsonl readme]"
      },
      "date": 1712679589495
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "The `recommend` function of the [[Solo Super Collaborator]] is used to recommend similar items based on a chosen set of items represented by a graph."
      },
      "date": 1712680442293
    },
    {
      "type": "edit",
      "id": "84feff49fabebd4d",
      "item": {
        "type": "markdown",
        "id": "84feff49fabebd4d",
        "text": "The `recommend` function of the [[Solo Super Collaborator]] is used to recommend similar items based on a [[chosen]] set of items represented by a graph."
      },
      "date": 1712683238019
    },
    {
      "item": {
        "type": "factory",
        "id": "c813bacc45aff705"
      },
      "id": "c813bacc45aff705",
      "type": "add",
      "after": "95eb325777adb374",
      "date": 1712683460416
    },
    {
      "type": "edit",
      "id": "c813bacc45aff705",
      "item": {
        "type": "code",
        "id": "c813bacc45aff705",
        "text": "const similar = (graph) => {\n        for (const node of graph.nodes) {\n            if (vocabulary.has(hash(node))) { \n                node.props[\"recommended\"] = true;\n                return true;\n            }\n        }\n        // If no similar node found, set \"recommended\" property to false\n        for (const node of graph.nodes) {\n            node.props[\"recommended\"] = false;\n        }\n        return false;\n    }"
      },
      "date": 1712683465947
    },
    {
      "type": "edit",
      "id": "cca1366a8b92c07e",
      "item": {
        "type": "paragraph",
        "id": "cca1366a8b92c07e",
        "text": "⇒ [[Solo Super Collaborator]] with new recommend's new [[similar]] function. Try it. [http://wiki.ralfbarkow.ch/assets/pages/solo-super-collaborator/README.html?read=https://raw.githubusercontent.com/WardCunningham/search/master/README.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Color.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Client.graph.jsonl readme]"
      },
      "date": 1712683515203
    },
    {
      "type": "edit",
      "id": "cca1366a8b92c07e",
      "item": {
        "type": "paragraph",
        "id": "cca1366a8b92c07e",
        "text": "⇒ [[Solo Super Collaborator]] with recommend's new [[similar]] function. Try it. [http://wiki.ralfbarkow.ch/assets/pages/solo-super-collaborator/README.html?read=https://raw.githubusercontent.com/WardCunningham/search/master/README.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Color.graph.jsonl&read=https://raw.githubusercontent.com/WardCunningham/search/master/README-Client.graph.jsonl readme]"
      },
      "date": 1712683661868
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1712699718297
    },
    {
      "id": "c813bacc45aff705",
      "type": "move",
      "order": [
        "689c26670d6d4201",
        "506f79af23930109",
        "84feff49fabebd4d",
        "329faf65f46ff41e",
        "4bce9d77662343ff",
        "f10ba47e3aa92e0f",
        "7244829a141fb9fe",
        "418260b7c7f27c13",
        "386b35489e8f5706",
        "90848227f7b20dbe",
        "cca1366a8b92c07e",
        "c813bacc45aff705",
        "95eb325777adb374"
      ],
      "date": 1712699723098
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712699896288
    }
  ]
}