{
  "title": "Table Look-up",
  "story": [
    {
      "type": "paragraph",
      "id": "4bf682530355993f",
      "text": "Techniques for making quick multiway decisions by subscripting have been called ‚Äú[[table look-at]]‚Äù as opposed to ‚Äútable look-up‚Äù [see P. M. Sherman, CACM 4 (1961), 172‚Äì173, 175]."
    },
    {
      "type": "pagefold",
      "id": "734cd7c2a4f672bf",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "755f9ab008fadcb2",
      "site": "wiki.ralfbarkow.ch",
      "slug": "digital-searching",
      "title": "Digital Searching",
      "text": "Instead of basing a search method on comparisons between keys, we can make use of their representation as a [[Sequence]] of digits or alphabetic characters."
    },
    {
      "type": "reference",
      "id": "24344f316aa9cc0c",
      "site": "wiki.ralfbarkow.ch",
      "slug": "table-lookup",
      "title": "Table Lookup",
      "text": "[‚Ä¶] a [[Node]] can perform a simple table lookup operation augmented with extrapolation or interpolation techniques to determine and apply the best ùõº and ùõΩ settings in response to dynamically changing conditions. The lookup time is O(1) and can be efficiently applied at runtime."
    },
    {
      "type": "reference",
      "id": "9e382fd0c47684cc",
      "site": "wiki.ralfbarkow.ch",
      "slug": "table-lookup-and-dispatch",
      "title": "Table Lookup and Dispatch",
      "text": "The following code implements a [[Table Lookup]] and dispatch function using [[JavaScript]]. The purpose of this function is to handle interrupts, that is, signals indicating the occurrence of an [[Event]]."
    },
    {
      "type": "reference",
      "id": "e9936973896b030a",
      "site": "code.fed.wiki.org",
      "slug": "vector-lookup-tables",
      "title": "Vector Lookup Tables",
      "text": "I ([[Ward Cunningham]]) helped electrical engineer Jeff Bradford complete a vector generator for the [[Projection Kanji Keyboard]]. Jeff simplified the ECL design by moving considerable logic into static ram lookup tables. I used APL's array manipulation to formulate and check the bit patterns that would fill these tables."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Table Look-up",
        "story": []
      },
      "date": 1694692102640
    },
    {
      "item": {
        "type": "factory",
        "id": "755f9ab008fadcb2"
      },
      "id": "755f9ab008fadcb2",
      "type": "add",
      "date": 1694692108433
    },
    {
      "type": "edit",
      "id": "755f9ab008fadcb2",
      "item": {
        "type": "reference",
        "id": "755f9ab008fadcb2",
        "site": "wiki.ralfbarkow.ch",
        "slug": "digital-searching",
        "title": "Digital Searching",
        "text": "Instead of basing a search method on comparisons between keys, we can make use of their representation as a [[Sequence]] of digits or alphabetic characters."
      },
      "date": 1694692110524
    },
    {
      "item": {
        "type": "factory",
        "id": "24344f316aa9cc0c"
      },
      "id": "24344f316aa9cc0c",
      "type": "add",
      "after": "755f9ab008fadcb2",
      "date": 1694692122440
    },
    {
      "type": "edit",
      "id": "24344f316aa9cc0c",
      "item": {
        "type": "reference",
        "id": "24344f316aa9cc0c",
        "site": "wiki.ralfbarkow.ch",
        "slug": "table-lookup",
        "title": "Table Lookup",
        "text": "[‚Ä¶] a [[Node]] can perform a simple table lookup operation augmented with extrapolation or interpolation techniques to determine and apply the best ùõº and ùõΩ settings in response to dynamically changing conditions. The lookup time is O(1) and can be efficiently applied at runtime."
      },
      "date": 1694692140885
    },
    {
      "id": "4bf682530355993f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4bf682530355993f",
        "text": "The node vectors in Table 1 are arranged according to MIX character code. This means that a trie search will be quite fast, since we are merely fetching words of an array by using the characters of our keys as subscripts. Techniques for making quick multiway decisions by subscripting have been called ‚Äútable look-at‚Äù as opposed to ‚Äú[[table look-up]]‚Äù [see P. M. Sherman, CACM 4 (1961), 172‚Äì173, 175]."
      },
      "attribution": {
        "page": "Digital Searching"
      },
      "date": 1694692164491
    },
    {
      "type": "edit",
      "id": "4bf682530355993f",
      "item": {
        "type": "paragraph",
        "id": "4bf682530355993f",
        "text": "Techniques for making quick multiway decisions by subscripting have been called ‚Äútable look-at‚Äù as opposed to ‚Äú[[table look-up]]‚Äù [see P. M. Sherman, CACM 4 (1961), 172‚Äì173, 175]."
      },
      "date": 1694692169920
    },
    {
      "item": {
        "type": "factory",
        "id": "734cd7c2a4f672bf"
      },
      "id": "734cd7c2a4f672bf",
      "type": "add",
      "after": "24344f316aa9cc0c",
      "date": 1694692182772
    },
    {
      "id": "734cd7c2a4f672bf",
      "type": "move",
      "order": [
        "4bf682530355993f",
        "734cd7c2a4f672bf",
        "755f9ab008fadcb2",
        "24344f316aa9cc0c"
      ],
      "date": 1694692184652
    },
    {
      "type": "edit",
      "id": "734cd7c2a4f672bf",
      "item": {
        "type": "pagefold",
        "id": "734cd7c2a4f672bf",
        "text": "~"
      },
      "date": 1694692187178
    },
    {
      "type": "edit",
      "id": "4bf682530355993f",
      "item": {
        "type": "paragraph",
        "id": "4bf682530355993f",
        "text": "Techniques for making quick multiway decisions by subscripting have been called ‚Äú[[table look-at]]‚Äù as opposed to ‚Äú[[table look-up]]‚Äù [see P. M. Sherman, CACM 4 (1961), 172‚Äì173, 175]."
      },
      "date": 1694692230798
    },
    {
      "type": "edit",
      "id": "4bf682530355993f",
      "item": {
        "type": "paragraph",
        "id": "4bf682530355993f",
        "text": "Techniques for making quick multiway decisions by subscripting have been called ‚Äú[[table look-at]]‚Äù as opposed to ‚Äútable look-up‚Äù [see P. M. Sherman, CACM 4 (1961), 172‚Äì173, 175]."
      },
      "date": 1694692256700
    },
    {
      "item": {
        "type": "factory",
        "id": "9e382fd0c47684cc"
      },
      "id": "9e382fd0c47684cc",
      "type": "add",
      "after": "24344f316aa9cc0c",
      "date": 1694692342110
    },
    {
      "type": "edit",
      "id": "9e382fd0c47684cc",
      "item": {
        "type": "reference",
        "id": "9e382fd0c47684cc",
        "site": "wiki.ralfbarkow.ch",
        "slug": "table-lookup-and-dispatch",
        "title": "Table Lookup and Dispatch",
        "text": "The following code implements a [[Table Lookup]] and dispatch function using [[JavaScript]]. The purpose of this function is to handle interrupts, that is, signals indicating the occurrence of an [[Event]]."
      },
      "date": 1694692344601
    },
    {
      "item": {
        "type": "factory",
        "id": "e9936973896b030a"
      },
      "id": "e9936973896b030a",
      "type": "add",
      "after": "9e382fd0c47684cc",
      "date": 1694692589042
    },
    {
      "type": "edit",
      "id": "e9936973896b030a",
      "item": {
        "type": "reference",
        "id": "e9936973896b030a",
        "site": "code.fed.wiki.org",
        "slug": "vector-lookup-tables",
        "title": "Vector Lookup Tables",
        "text": "I helped electrical engineer Jeff Bradford complete a vector generator for the [[Projection Kanji Keyboard]]. Jeff simplified the ECL design by moving considerable logic into static ram lookup tables. I used APL's array manipulation to formulate and check the bit patterns that would fill these tables."
      },
      "date": 1694692592091
    },
    {
      "type": "edit",
      "id": "e9936973896b030a",
      "item": {
        "type": "reference",
        "id": "e9936973896b030a",
        "site": "code.fed.wiki.org",
        "slug": "vector-lookup-tables",
        "title": "Vector Lookup Tables",
        "text": "I ([[Ward Cunningham]]) helped electrical engineer Jeff Bradford complete a vector generator for the [[Projection Kanji Keyboard]]. Jeff simplified the ECL design by moving considerable logic into static ram lookup tables. I used APL's array manipulation to formulate and check the bit patterns that would fill these tables."
      },
      "date": 1694692602753
    }
  ]
}