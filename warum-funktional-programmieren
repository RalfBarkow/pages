{
  "title": "Warum funktional programmieren?",
  "story": [
    {
      "type": "markdown",
      "id": "a64ca8e6c257a5c9",
      "text": "# Was bedeutet \"funktionale Programmierung\"?"
    },
    {
      "type": "paragraph",
      "id": "5bf5a7f79f8ba0e2",
      "text": "Ein klare Definition was man unter funktionaler Programmierung versteht, gibt es nicht. Inzwischen bieten viele Programmiersprachen die M√∂glichkeit einzelne Aspekte der funktionalen Programmierung umzusetzen. Um die Vorz√ºge der funktionalen Programmierung zu erleben, ist es aber von Vorteil eine Sprache zu nutzen, die das funktionale Programmierparadigma sehr sauber umsetzt. Eine dieser Sprachen ist Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
    },
    {
      "type": "paragraph",
      "id": "d4a1430c72bbd882",
      "text": "Merkmale rein funktionaler Programmiersprachen - wie z.B. [[Elm]] - sind:"
    },
    {
      "type": "markdown",
      "id": "e55b505f602f6d2e",
      "text": " * Programme werden mit Hilfe von Funktionen im mathematischen Sinne gebildet. Eine Funktion kann Werte √ºbergeben bekommen und hat immer ein Ergebnis, das sie zur√ºckliefert.\n * Funktionen haben keine Seiteneffekte. Das bedeutet, dass eine Funktion keine Auswirkungen hat, au√üer dass sie eine R√ºckgabe bewirkt. Rein funktionale Sprachen erlauben damit noch nicht einmal eine Bildschirmausgabe. Wie man dennoch Ausgaben in Elm erreichen kann, obwohl Elm eine rein funktionale Sprache ist, lernst du im Abschnitt √ºber dynamische Webseiten.\n * Funktionen sind deterministisch. Bei gleichen Parametern, die an eine Funktion √ºbergeben werden, muss eine Funktion die gleiche R√ºckgabe liefern. Somit sind die Erzeugung von Zufallszahlen oder Benutzereingaben innerhalb von Funktionen nicht erlaubt.\n * Funktionen gelten als B√ºrger erster Klasse. Man kann Funktionen also wie andere Werte auch als Parameter √ºbergeben oder von einer Funktion als R√ºckgabe erhalten. Gemeint ist hier nicht der Funktswert z.B. der Funktion f(x) = 3x f√ºr z.B. x=2, sondern die Funktion f an sich. Das klingt sehr abstrakt, wird aber in den sp√§teren Abschnitten anschaulicher. "
    },
    {
      "type": "markdown",
      "id": "13b0fdcc37ae81e6",
      "text": "# Vorteile durch Beschr√§nkung"
    },
    {
      "type": "paragraph",
      "id": "4baa8d0e31c22bfb",
      "text": "Das alles klingt nach deutlichen Einschr√§nkungen gegen√ºber anderen Sprachen und in der Tat ist das auch der Fall. Der Verzicht bringt aber Vorteile, die typisch f√ºr funktionale Sprachen sind: "
    },
    {
      "type": "markdown",
      "id": "2cd8e169dc585e46",
      "text": " *  Einige Fehler, die in anderen Sprachen logische Fehler oder Laufzeitfehler w√§ren, werden in Elm zu syntaktischen Fehlern. Das ist ein riesiger Vorteil, da der Compiler uns diese Fehler w√§hrend der Entwicklung melden kann, w√§hrend logische Fehler und Laufzeitfehler eventuell unentdeckt bleiben und dann beim Benutzer auftreten. (siehe Fehler in Programmen )\n * Die Testbarkeit funktionaler Programme ist erleichtert. Da das Ergebnis einer Funktion nur von den Parametern und nicht von internen oder externen Zust√§nden oder Ereignissen (z.B. Zufallszahlen oder Benutzereingaben) abh√§ngt, kann man leichter Testf√§lle formulieren, die alle Eventualit√§ten abdecken.\n * Da Funktionen keine Seiteneffekte haben, also z.B. nicht auf Dateiinhalte zugreifen, gibt es keine Probleme, wenn mehrere Funktionen gleichzeitig parallel ausgef√ºhrt werden. Funktionale Programme sind somit leichter parallelisierbar.\n * Die Beschr√§nkung auf Seiteneffekt-freie und deterministische Funktionen erzwingt einen guten Programmierstil. Selbst wenn du sp√§ter nie mehr in Elm programmieren solltest, wird dir die Besch√§ftigung damit einen besseren Programmierstil bringen. Viele der Dinge, die du in Elm beachten musst, gelten auch in anderen Sprachen als guter Stil. "
    },
    {
      "type": "paragraph",
      "id": "96fe05a87cde455e",
      "text": "‚áí [[Ben√∂tigte Software]]"
    },
    {
      "type": "pagefold",
      "id": "f9d355b61ea5c4ea",
      "text": "üîª"
    },
    {
      "type": "reference",
      "id": "2e1477402e3f67d5",
      "site": "wiki.ralfbarkow.ch",
      "slug": "why-program-functionally",
      "title": "Why Program Functionally?",
      "text": "A clear definition what one understands by functional programming, does not exist. Meanwhile many programming languages offer the possibility of implementing individual aspects of functional programming. In order to experience the advantages of functional programming, it is however advantageous to use a language, which implements the functional programming paradigm very cleanly. One such language is Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Warum funktional programmieren?",
        "story": []
      },
      "date": 1695286102556
    },
    {
      "item": {
        "type": "factory",
        "id": "a64ca8e6c257a5c9"
      },
      "id": "a64ca8e6c257a5c9",
      "type": "add",
      "date": 1695286112667
    },
    {
      "type": "edit",
      "id": "a64ca8e6c257a5c9",
      "item": {
        "type": "paragraph",
        "id": "a64ca8e6c257a5c9",
        "text": "Was bedeutet \"funktionale Programmierung\"?"
      },
      "date": 1695286113855
    },
    {
      "item": {
        "type": "factory",
        "id": "5bf5a7f79f8ba0e2"
      },
      "id": "5bf5a7f79f8ba0e2",
      "type": "add",
      "after": "a64ca8e6c257a5c9",
      "date": 1695286128763
    },
    {
      "type": "edit",
      "id": "5bf5a7f79f8ba0e2",
      "item": {
        "type": "paragraph",
        "id": "5bf5a7f79f8ba0e2",
        "text": "Ein klare Definition was man unter funktionaler Programmierung versteht, gibt es nicht. Inzwischen bieten viele Programmiersprachen die M√∂glichkeit einzelne Aspekte der funktionalen Programmierung umzusetzen. Um die Vorz√ºge der funktionalen Programmierung zu erleben, ist es aber von Vorteil eine Sprache zu nutzen, die das funktionale Programmierparadigma sehr sauber umsetzt. Eine dieser Sprachen ist Elm. "
      },
      "date": 1695286130386
    },
    {
      "type": "edit",
      "id": "a64ca8e6c257a5c9",
      "item": {
        "type": "paragraph",
        "id": "a64ca8e6c257a5c9",
        "text": "# Was bedeutet \"funktionale Programmierung\"?"
      },
      "date": 1695286137115
    },
    {
      "type": "edit",
      "id": "a64ca8e6c257a5c9",
      "item": {
        "type": "markdown",
        "id": "a64ca8e6c257a5c9",
        "text": "# Was bedeutet \"funktionale Programmierung\"?"
      },
      "date": 1695286139249
    },
    {
      "type": "edit",
      "id": "5bf5a7f79f8ba0e2",
      "item": {
        "type": "paragraph",
        "id": "5bf5a7f79f8ba0e2",
        "text": "Ein klare Definition was man unter funktionaler Programmierung versteht, gibt es nicht. Inzwischen bieten viele Programmiersprachen die M√∂glichkeit einzelne Aspekte der funktionalen Programmierung umzusetzen. Um die Vorz√ºge der funktionalen Programmierung zu erleben, ist es aber von Vorteil eine Sprache zu nutzen, die das funktionale Programmierparadigma sehr sauber umsetzt. Eine dieser Sprachen ist Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
      },
      "date": 1695286160819
    },
    {
      "type": "edit",
      "id": "5bf5a7f79f8ba0e2",
      "item": {
        "type": "paragraph",
        "id": "5bf5a7f79f8ba0e2",
        "text": "Ein klare Definition was man unter funktionaler Programmierung versteht, gibt es nicht. Inzwischen bieten viele Programmiersprachen die M√∂glichkeit einzelne Aspekte der funktionalen Programmierung umzusetzen. Um die Vorz√ºge der funktionalen Programmierung zu erleben, ist es aber von Vorteil eine Sprache zu nutzen, die das funktionale Programmierparadigma sehr sauber umsetzt. Eine dieser Sprachen ist [[Elm]]. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
      },
      "date": 1695286177422
    },
    {
      "item": {
        "type": "factory",
        "id": "d4a1430c72bbd882"
      },
      "id": "d4a1430c72bbd882",
      "type": "add",
      "after": "5bf5a7f79f8ba0e2",
      "date": 1695286221804
    },
    {
      "type": "edit",
      "id": "d4a1430c72bbd882",
      "item": {
        "type": "paragraph",
        "id": "d4a1430c72bbd882",
        "text": "Merkmale rein funktionaler Programmiersprachen - wie z.B. Elm - sind:"
      },
      "date": 1695286222982
    },
    {
      "item": {
        "type": "factory",
        "id": "e55b505f602f6d2e"
      },
      "id": "e55b505f602f6d2e",
      "type": "add",
      "after": "d4a1430c72bbd882",
      "date": 1695286255493
    },
    {
      "type": "edit",
      "id": "e55b505f602f6d2e",
      "item": {
        "type": "paragraph",
        "id": "e55b505f602f6d2e",
        "text": "    Programme werden mit Hilfe von Funktionen im mathematischen Sinne gebildet. Eine Funktion kann Werte √ºbergeben bekommen und hat immer ein Ergebnis, das sie zur√ºckliefert.\n    Funktionen haben keine Seiteneffekte. Das bedeutet, dass eine Funktion keine Auswirkungen hat, au√üer dass sie eine R√ºckgabe bewirkt. Rein funktionale Sprachen erlauben damit noch nicht einmal eine Bildschirmausgabe. Wie man dennoch Ausgaben in Elm erreichen kann, obwohl Elm eine rein funktionale Sprache ist, lernst du im Abschnitt √ºber dynamische Webseiten.\n    Funktionen sind deterministisch. Bei gleichen Parametern, die an eine Funktion √ºbergeben werden, muss eine Funktion die gleiche R√ºckgabe liefern. Somit sind die Erzeugung von Zufallszahlen oder Benutzereingaben innerhalb von Funktionen nicht erlaubt.\n    Funktionen gelten als B√ºrger erster Klasse. Man kann Funktionen also wie andere Werte auch als Parameter √ºbergeben oder von einer Funktion als R√ºckgabe erhalten. Gemeint ist hier nicht der Funktswert z.B. der Funktion f(x) = 3x f√ºr z.B. x=2, sondern die Funktion f an sich. Das klingt sehr abstrakt, wird aber in den sp√§teren Abschnitten anschaulicher. "
      },
      "date": 1695286257225
    },
    {
      "type": "edit",
      "id": "e55b505f602f6d2e",
      "item": {
        "type": "paragraph",
        "id": "e55b505f602f6d2e",
        "text": " * Programme werden mit Hilfe von Funktionen im mathematischen Sinne gebildet. Eine Funktion kann Werte √ºbergeben bekommen und hat immer ein Ergebnis, das sie zur√ºckliefert.\n * Funktionen haben keine Seiteneffekte. Das bedeutet, dass eine Funktion keine Auswirkungen hat, au√üer dass sie eine R√ºckgabe bewirkt. Rein funktionale Sprachen erlauben damit noch nicht einmal eine Bildschirmausgabe. Wie man dennoch Ausgaben in Elm erreichen kann, obwohl Elm eine rein funktionale Sprache ist, lernst du im Abschnitt √ºber dynamische Webseiten.\n * Funktionen sind deterministisch. Bei gleichen Parametern, die an eine Funktion √ºbergeben werden, muss eine Funktion die gleiche R√ºckgabe liefern. Somit sind die Erzeugung von Zufallszahlen oder Benutzereingaben innerhalb von Funktionen nicht erlaubt.\n * Funktionen gelten als B√ºrger erster Klasse. Man kann Funktionen also wie andere Werte auch als Parameter √ºbergeben oder von einer Funktion als R√ºckgabe erhalten. Gemeint ist hier nicht der Funktswert z.B. der Funktion f(x) = 3x f√ºr z.B. x=2, sondern die Funktion f an sich. Das klingt sehr abstrakt, wird aber in den sp√§teren Abschnitten anschaulicher. "
      },
      "date": 1695286295826
    },
    {
      "type": "edit",
      "id": "e55b505f602f6d2e",
      "item": {
        "type": "markdown",
        "id": "e55b505f602f6d2e",
        "text": " * Programme werden mit Hilfe von Funktionen im mathematischen Sinne gebildet. Eine Funktion kann Werte √ºbergeben bekommen und hat immer ein Ergebnis, das sie zur√ºckliefert.\n * Funktionen haben keine Seiteneffekte. Das bedeutet, dass eine Funktion keine Auswirkungen hat, au√üer dass sie eine R√ºckgabe bewirkt. Rein funktionale Sprachen erlauben damit noch nicht einmal eine Bildschirmausgabe. Wie man dennoch Ausgaben in Elm erreichen kann, obwohl Elm eine rein funktionale Sprache ist, lernst du im Abschnitt √ºber dynamische Webseiten.\n * Funktionen sind deterministisch. Bei gleichen Parametern, die an eine Funktion √ºbergeben werden, muss eine Funktion die gleiche R√ºckgabe liefern. Somit sind die Erzeugung von Zufallszahlen oder Benutzereingaben innerhalb von Funktionen nicht erlaubt.\n * Funktionen gelten als B√ºrger erster Klasse. Man kann Funktionen also wie andere Werte auch als Parameter √ºbergeben oder von einer Funktion als R√ºckgabe erhalten. Gemeint ist hier nicht der Funktswert z.B. der Funktion f(x) = 3x f√ºr z.B. x=2, sondern die Funktion f an sich. Das klingt sehr abstrakt, wird aber in den sp√§teren Abschnitten anschaulicher. "
      },
      "date": 1695286296666
    },
    {
      "item": {
        "type": "factory",
        "id": "13b0fdcc37ae81e6"
      },
      "id": "13b0fdcc37ae81e6",
      "type": "add",
      "after": "e55b505f602f6d2e",
      "date": 1695286357229
    },
    {
      "type": "edit",
      "id": "13b0fdcc37ae81e6",
      "item": {
        "type": "paragraph",
        "id": "13b0fdcc37ae81e6",
        "text": "Vorteile durch Beschr√§nkung"
      },
      "date": 1695286358872
    },
    {
      "item": {
        "type": "factory",
        "id": "4baa8d0e31c22bfb"
      },
      "id": "4baa8d0e31c22bfb",
      "type": "add",
      "after": "13b0fdcc37ae81e6",
      "date": 1695286363811
    },
    {
      "type": "edit",
      "id": "4baa8d0e31c22bfb",
      "item": {
        "type": "paragraph",
        "id": "4baa8d0e31c22bfb",
        "text": "Das alles klingt nach deutlichen Einschr√§nkungen gegen√ºber anderen Sprachen und in der Tat ist das auch der Fall. Der Verzicht bringt aber Vorteile, die typisch f√ºr funktionale Sprachen sind: "
      },
      "date": 1695286365873
    },
    {
      "type": "edit",
      "id": "13b0fdcc37ae81e6",
      "item": {
        "type": "paragraph",
        "id": "13b0fdcc37ae81e6",
        "text": "# Vorteile durch Beschr√§nkung"
      },
      "date": 1695286370175
    },
    {
      "type": "edit",
      "id": "13b0fdcc37ae81e6",
      "item": {
        "type": "markdown",
        "id": "13b0fdcc37ae81e6",
        "text": "# Vorteile durch Beschr√§nkung"
      },
      "date": 1695286371406
    },
    {
      "type": "edit",
      "id": "d4a1430c72bbd882",
      "item": {
        "type": "paragraph",
        "id": "d4a1430c72bbd882",
        "text": "Merkmale rein funktionaler Programmiersprachen - wie z.B. [[Elm]] - sind:"
      },
      "date": 1695286405029
    },
    {
      "type": "edit",
      "id": "5bf5a7f79f8ba0e2",
      "item": {
        "type": "paragraph",
        "id": "5bf5a7f79f8ba0e2",
        "text": "Ein klare Definition was man unter funktionaler Programmierung versteht, gibt es nicht. Inzwischen bieten viele Programmiersprachen die M√∂glichkeit einzelne Aspekte der funktionalen Programmierung umzusetzen. Um die Vorz√ºge der funktionalen Programmierung zu erleben, ist es aber von Vorteil eine Sprache zu nutzen, die das funktionale Programmierparadigma sehr sauber umsetzt. Eine dieser Sprachen ist Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
      },
      "date": 1695286411427
    },
    {
      "item": {
        "type": "factory",
        "id": "2cd8e169dc585e46"
      },
      "id": "2cd8e169dc585e46",
      "type": "add",
      "after": "4baa8d0e31c22bfb",
      "date": 1695286444469
    },
    {
      "type": "edit",
      "id": "2cd8e169dc585e46",
      "item": {
        "type": "markdown",
        "id": "2cd8e169dc585e46",
        "text": " *  Einige Fehler, die in anderen Sprachen logische Fehler oder Laufzeitfehler w√§ren, werden in Elm zu syntaktischen Fehlern. Das ist ein riesiger Vorteil, da der Compiler uns diese Fehler w√§hrend der Entwicklung melden kann, w√§hrend logische Fehler und Laufzeitfehler eventuell unentdeckt bleiben und dann beim Benutzer auftreten. (siehe Fehler in Programmen )\n * Die Testbarkeit funktionaler Programme ist erleichtert. Da das Ergebnis einer Funktion nur von den Parametern und nicht von internen oder externen Zust√§nden oder Ereignissen (z.B. Zufallszahlen oder Benutzereingaben) abh√§ngt, kann man leichter Testf√§lle formulieren, die alle Eventualit√§ten abdecken.\n * Da Funktionen keine Seiteneffekte haben, also z.B. nicht auf Dateiinhalte zugreifen, gibt es keine Probleme, wenn mehrere Funktionen gleichzeitig parallel ausgef√ºhrt werden. Funktionale Programme sind somit leichter parallelisierbar.\n * Die Beschr√§nkung auf Seiteneffekt-freie und deterministische Funktionen erzwingt einen guten Programmierstil. Selbst wenn du sp√§ter nie mehr in Elm programmieren solltest, wird dir die Besch√§ftigung damit einen besseren Programmierstil bringen. Viele der Dinge, die du in Elm beachten musst, gelten auch in anderen Sprachen als guter Stil. "
      },
      "date": 1695286446263
    },
    {
      "item": {
        "type": "factory",
        "id": "96fe05a87cde455e"
      },
      "id": "96fe05a87cde455e",
      "type": "add",
      "after": "2cd8e169dc585e46",
      "date": 1695286493056
    },
    {
      "type": "edit",
      "id": "96fe05a87cde455e",
      "item": {
        "type": "paragraph",
        "id": "96fe05a87cde455e",
        "text": "‚áí [[Ben√∂tigte Software]]"
      },
      "date": 1695286502569
    },
    {
      "type": "fork",
      "site": "de.dreyeck.ch",
      "date": 1695286606250
    },
    {
      "item": {
        "type": "factory",
        "id": "2e1477402e3f67d5"
      },
      "id": "2e1477402e3f67d5",
      "type": "add",
      "after": "96fe05a87cde455e",
      "date": 1695286946708
    },
    {
      "type": "edit",
      "id": "2e1477402e3f67d5",
      "item": {
        "type": "reference",
        "id": "2e1477402e3f67d5",
        "site": "wiki.ralfbarkow.ch",
        "slug": "why-program-functionally",
        "title": "Why Program Functionally?",
        "text": "A clear definition what one understands by functional programming, does not exist. Meanwhile many programming languages offer the possibility of implementing individual aspects of functional programming. In order to experience the advantages of functional programming, it is however advantageous to use a language, which implements the functional programming paradigm very cleanly. One such language is Elm. [https://dev.inf-schule.de/deklarativ/fp_elm/vorwort/warumfunktional inf-schule.de]"
      },
      "date": 1695286951317
    },
    {
      "item": {
        "type": "factory",
        "id": "f9d355b61ea5c4ea"
      },
      "id": "f9d355b61ea5c4ea",
      "type": "add",
      "after": "2e1477402e3f67d5",
      "date": 1695286953190
    },
    {
      "id": "f9d355b61ea5c4ea",
      "type": "move",
      "order": [
        "a64ca8e6c257a5c9",
        "5bf5a7f79f8ba0e2",
        "d4a1430c72bbd882",
        "e55b505f602f6d2e",
        "13b0fdcc37ae81e6",
        "4baa8d0e31c22bfb",
        "2cd8e169dc585e46",
        "96fe05a87cde455e",
        "f9d355b61ea5c4ea",
        "2e1477402e3f67d5"
      ],
      "date": 1695286955052
    },
    {
      "type": "edit",
      "id": "f9d355b61ea5c4ea",
      "item": {
        "type": "pagefold",
        "id": "f9d355b61ea5c4ea",
        "text": "üîª"
      },
      "date": 1695286964218
    }
  ]
}