{
  "title": "Joy Language",
  "story": [
    {
      "type": "html",
      "text": "Joy is a purely functional programming language devised by [[Manfred Von Thun]]. Whereas all other functional programming languages are based on the application of functions to arguments, Joy is based on the composition of functions. Every Joy function is unary, taking a stack as argument and producing a stack as value. Consequently much of Joy looks like ordinary postfix notation. In Joy's syntax, composition of functions is simply concatenation of the text of the functions. For this reason, Joy can be referred to as a [[Concatenative Language]].",
      "id": "d595792fe7ad6a308577ef4b6eafb8e1"
    },
    {
      "type": "html",
      "text": "\nSee [http://www.latrobe.edu.au/phimvt/joy.html www.latrobe.edu.au] (Official site), but also mirrored (mostly) at [http://www.kevinalbrecht.com/code/joy-mirror/ www.kevinalbrecht.com]",
      "id": "4bbfdbfefdd0c39e1577c29778a5c51e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "073e6f87063a1c338ebca74e04ad70dd"
    },
    {
      "type": "html",
      "text": "So, for example, in the program fragment",
      "id": "e2352828e52683ff633faa26e14645e5"
    },
    {
      "type": "html",
      "text": "\n3 4 +",
      "id": "01d42798425044c9bbfc15bc317da8f8"
    },
    {
      "type": "html",
      "text": "\n3 denotes the function which pushes 3 onto a stack, similarly for 4, and + denotes the function which replaces the top two values on a stack with their sum. 3 4 + is their composition [which in traditional mathematical notation might be denoted \"lambda s . +(4(3(s)))\"], and is equivalent to the function 7.",
      "id": "4c08782a703e61314332f887f5b2fe64"
    },
    {
      "type": "html",
      "text": "-- [[Thomas Colthurst]]",
      "id": "4051e98cabe68737b22cfca388fc0d40"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "073e6f87063a1c338ebca74e04ad70dd"
    },
    {
      "type": "html",
      "text": "something I wrote.. which I'm not quite sure is correct.",
      "id": "523fc93559d5e593eb0a48954c15dbaa"
    },
    {
      "type": "code",
      "text": " (* x y percent approxEqual *)\n DEFINE approxEqual == 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .",
      "id": "bdfd1085afb7a87cc3fd5f1c603a9cef"
    },
    {
      "type": "html",
      "text": "-- [[Shae Erisson]]",
      "id": "73ce61a1077e04a0c275c17f5b3624d1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "073e6f87063a1c338ebca74e04ad70dd"
    },
    {
      "type": "html",
      "text": "<i>So... was the language so named because it's a joy to use, or was it named after [[Bill Joy]]?</i>",
      "id": "652e100e7abf1d68122ba096960ddde3"
    },
    {
      "type": "html",
      "text": "<i>-- [[Scott Johnson]]</i>",
      "id": "6cf7cf3dea305db5e4da437795a744f0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "073e6f87063a1c338ebca74e04ad70dd"
    },
    {
      "type": "html",
      "text": "It algebraic properties are so clean that I argue that either Joy or a Joy derivative must cosmically speaking rule the programming world.",
      "id": "4b71d144e441bcd1610ec5a82fda8d67"
    },
    {
      "type": "html",
      "text": "\nWhy? ",
      "id": "2801fd8e55fbb3ccf6d381fe86826688"
    },
    {
      "type": "html",
      "text": " If it's easy to do program proving, it is easy to write bug free programs.",
      "id": "81231c022d0eb71ab1aafd294b35ceb1"
    },
    {
      "type": "html",
      "text": " If it's supremely simple to programatically manipulate, then many powerful tools to lint, debug, inspect, instrument, refactor it will evolve.",
      "id": "d9a91b153e04112cf9ef841dbe962668"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "073e6f87063a1c338ebca74e04ad70dd"
    },
    {
      "type": "html",
      "text": "<i>[[Joy Language]] is kind of a cross between [[Forth Language]] and [[Lisp Language]]. Like Lisp, lists are a key data structures, and a program can be represented by a list. Unlike Lisp (and like Forth), a program stack is used for argument passing/return, and also replaces let-bindings and the like. So there are no \"variable names\" in [[Joy Language]].</i>",
      "id": "94442bd3ae0c90efc09101b6952e9fd1"
    },
    {
      "type": "html",
      "text": "<i>[[Joy Language]] also provides support for many of the different combinators (see [[Ess And Kay Combinators]]); it could be viewed as a usable big brother to [[Un Lambda Language]].</i>",
      "id": "4688aff105060856076ecf1d233f6460"
    },
    {
      "type": "html",
      "text": "<i>It still is in the experimental stage, however... for instance, it has a set datatype (which is first-class); but the only things which can be stored in a set are the integers from 0-31.  A bit of [[Brain Death]] that comes straight out of [[Pascal Language]].</i>",
      "id": "443b6da623169156bce79a052f66fa85"
    },
    {
      "type": "html",
      "text": "<i>I think [[Joy Language]] is theoretically important. On the other hand, I'm not a big fan of [[Stack Based Language]]s for use as a source language -- see that page for the reasons why.</i>",
      "id": "f354a177a3d663ddee42f8323c348cdc"
    },
    {
      "type": "html",
      "text": "<i>-- [[Scott Johnson]]</i>",
      "id": "6cf7cf3dea305db5e4da437795a744f0"
    },
    {
      "type": "html",
      "text": "\nA somewhat more mature implementation of the principles in [[Joy Language]] can be found in [[Factor Language]] ([http://factor.sf.net factor.sf.net])",
      "id": "1018b34ade1c05da2fa57a16036cdce1"
    },
    {
      "type": "html",
      "text": "<i>I disagree, Joy is concatenative, Factor is only somewhat so. Concatenative means that you can cut code on any lexical boundary and both halves will still be legal programs. -- [[Shae Erisson]]</i>",
      "id": "04c69598e9533aa09b2ab63e419bd6fe"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "073e6f87063a1c338ebca74e04ad70dd"
    },
    {
      "type": "html",
      "text": "\n[[Category Programming Language]] [[Functional Programming Language]] [[Stack Based Language]]",
      "id": "17b6f734ee9e996e9cd619ae5113e91c"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?JoyLanguage c2.com]",
      "id": "6e4073983b9e471fecf4e2732187bbd7"
    }
  ],
  "journal": [
    {
      "date": 1315367487000,
      "id": "881ea924c38ebfb165c82c058ff88ded",
      "type": "create",
      "item": {
        "title": "Joy Language",
        "story": [
          {
            "type": "html",
            "text": "Joy is a purely functional programming language devised by [[Manfred Von Thun]]. Whereas all other functional programming languages are based on the application of functions to arguments, Joy is based on the composition of functions. Every Joy function is unary, taking a stack as argument and producing a stack as value. Consequently much of Joy looks like ordinary postfix notation. In Joy's syntax, composition of functions is simply concatenation of the text of the functions. For this reason, Joy can be referred to as a [[Concatenative Language]].",
            "id": "d595792fe7ad6a308577ef4b6eafb8e1"
          },
          {
            "type": "html",
            "text": "\nSee [http://www.latrobe.edu.au/phimvt/joy.html www.latrobe.edu.au] (Official site), but also mirrored (mostly) at [http://www.kevinalbrecht.com/code/joy-mirror/ www.kevinalbrecht.com]",
            "id": "4bbfdbfefdd0c39e1577c29778a5c51e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "073e6f87063a1c338ebca74e04ad70dd"
          },
          {
            "type": "html",
            "text": "So, for example, in the program fragment",
            "id": "e2352828e52683ff633faa26e14645e5"
          },
          {
            "type": "html",
            "text": "\n3 4 +",
            "id": "01d42798425044c9bbfc15bc317da8f8"
          },
          {
            "type": "html",
            "text": "\n3 denotes the function which pushes 3 onto a stack, similarly for 4, and + denotes the function which replaces the top two values on a stack with their sum. 3 4 + is their composition [which in traditional mathematical notation might be denoted \"lambda s . +(4(3(s)))\"], and is equivalent to the function 7.",
            "id": "4c08782a703e61314332f887f5b2fe64"
          },
          {
            "type": "html",
            "text": "-- [[Thomas Colthurst]]",
            "id": "4051e98cabe68737b22cfca388fc0d40"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "073e6f87063a1c338ebca74e04ad70dd"
          },
          {
            "type": "html",
            "text": "something I wrote.. which I'm not quite sure is correct.",
            "id": "523fc93559d5e593eb0a48954c15dbaa"
          },
          {
            "type": "code",
            "text": " (* x y percent approxEqual *)\n DEFINE approxEqual == 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .",
            "id": "bdfd1085afb7a87cc3fd5f1c603a9cef"
          },
          {
            "type": "html",
            "text": "-- [[Shae Erisson]]",
            "id": "73ce61a1077e04a0c275c17f5b3624d1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "073e6f87063a1c338ebca74e04ad70dd"
          },
          {
            "type": "html",
            "text": "<i>So... was the language so named because it's a joy to use, or was it named after [[Bill Joy]]?</i>",
            "id": "652e100e7abf1d68122ba096960ddde3"
          },
          {
            "type": "html",
            "text": "<i>-- [[Scott Johnson]]</i>",
            "id": "6cf7cf3dea305db5e4da437795a744f0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "073e6f87063a1c338ebca74e04ad70dd"
          },
          {
            "type": "html",
            "text": "It algebraic properties are so clean that I argue that either Joy or a Joy derivative must cosmically speaking rule the programming world.",
            "id": "4b71d144e441bcd1610ec5a82fda8d67"
          },
          {
            "type": "html",
            "text": "\nWhy? ",
            "id": "2801fd8e55fbb3ccf6d381fe86826688"
          },
          {
            "type": "html",
            "text": " If it's easy to do program proving, it is easy to write bug free programs.",
            "id": "81231c022d0eb71ab1aafd294b35ceb1"
          },
          {
            "type": "html",
            "text": " If it's supremely simple to programatically manipulate, then many powerful tools to lint, debug, inspect, instrument, refactor it will evolve.",
            "id": "d9a91b153e04112cf9ef841dbe962668"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "073e6f87063a1c338ebca74e04ad70dd"
          },
          {
            "type": "html",
            "text": "<i>[[Joy Language]] is kind of a cross between [[Forth Language]] and [[Lisp Language]]. Like Lisp, lists are a key data structures, and a program can be represented by a list. Unlike Lisp (and like Forth), a program stack is used for argument passing/return, and also replaces let-bindings and the like. So there are no \"variable names\" in [[Joy Language]].</i>",
            "id": "94442bd3ae0c90efc09101b6952e9fd1"
          },
          {
            "type": "html",
            "text": "<i>[[Joy Language]] also provides support for many of the different combinators (see [[Ess And Kay Combinators]]); it could be viewed as a usable big brother to [[Un Lambda Language]].</i>",
            "id": "4688aff105060856076ecf1d233f6460"
          },
          {
            "type": "html",
            "text": "<i>It still is in the experimental stage, however... for instance, it has a set datatype (which is first-class); but the only things which can be stored in a set are the integers from 0-31.  A bit of [[Brain Death]] that comes straight out of [[Pascal Language]].</i>",
            "id": "443b6da623169156bce79a052f66fa85"
          },
          {
            "type": "html",
            "text": "<i>I think [[Joy Language]] is theoretically important. On the other hand, I'm not a big fan of [[Stack Based Language]]s for use as a source language -- see that page for the reasons why.</i>",
            "id": "f354a177a3d663ddee42f8323c348cdc"
          },
          {
            "type": "html",
            "text": "<i>-- [[Scott Johnson]]</i>",
            "id": "6cf7cf3dea305db5e4da437795a744f0"
          },
          {
            "type": "html",
            "text": "\nA somewhat more mature implementation of the principles in [[Joy Language]] can be found in [[Factor Language]] ([http://factor.sf.net factor.sf.net])",
            "id": "1018b34ade1c05da2fa57a16036cdce1"
          },
          {
            "type": "html",
            "text": "<i>I disagree, Joy is concatenative, Factor is only somewhat so. Concatenative means that you can cut code on any lexical boundary and both halves will still be legal programs. -- [[Shae Erisson]]</i>",
            "id": "04c69598e9533aa09b2ab63e419bd6fe"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "073e6f87063a1c338ebca74e04ad70dd"
          },
          {
            "type": "html",
            "text": "\n[[Category Programming Language]] [[Functional Programming Language]] [[Stack Based Language]]",
            "id": "17b6f734ee9e996e9cd619ae5113e91c"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?JoyLanguage c2.com]",
            "id": "6e4073983b9e471fecf4e2732187bbd7"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1708035424487
    }
  ]
}