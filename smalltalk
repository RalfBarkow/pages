{
  "title": "Smalltalk",
  "story": [
    {
      "type": "markdown",
      "id": "63e37a8394e85499",
      "text": "Smalltalk is an object *system*, rather than a language. The entire system, including its development tools and application code is stored in a snapshot file, which is essentially a memory dump of the entire heap. ([[Two Decades of Smalltalk VM Development]], p. 58â€“59)\n"
    },
    {
      "type": "markdown",
      "id": "3e01eac89fb006f7",
      "text": "> When programming with Smalltalk, the programmer usually starts from a snapshot which contains the core libraries, the development environment and the application under development. More precisely, the snapshot includes objects (such as the classes), the compiled methods in the form of bytecodes and the running processes. Developing applications consists essentially in writing and editing code, which installs, modifies and removes classes and compiled methods to and from the class hierarchy. Programming may be done live, as the application under development is running. For example, objects may have their shape changed on the fly as instance variables are added and removed. A new snapshot can be made during or at the end of the development session."
    },
    {
      "type": "paragraph",
      "id": "f8392e76b72c7c7e",
      "text": "Snapshots can also be used to avoid long start-up times when fixing specific bugs. The VM can be run to a point where the bug is about to manifest and a snapshot taken. Then multiple analyses of the bug can be undertaken by loading the snapshot and resuming execution, either in the normal VM or in the simulator, short cutting the time to reach the bug."
    },
    {
      "type": "pagefold",
      "id": "0dc8e7976d7891dc",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "9faa8d720af38624",
      "text": "Design Principles Behind Smalltalk.\nDaniel H. H. Ingalls.\nLearning Research Group.\nXerox Palo Alto Research Center.\nBYTE Magazine, August 1981"
    },
    {
      "type": "paragraph",
      "id": "5aafc5eb1cf3b808",
      "text": "See also [[Personal Dynamic Media]]"
    },
    {
      "type": "pagefold",
      "id": "d59226e3799c4235",
      "text": "quotes"
    },
    {
      "type": "paragraph",
      "id": "5022b772c953cae9",
      "text": "The purpose of the Smalltalk project is to provide computer support for the creative spirit in everyone. Our work flows from a vision that includes a creative individual and the best computing hardware available."
    },
    {
      "type": "paragraph",
      "id": "74ab6676968b37c0",
      "text": "We have chosen to concentrate on two principle areas of research: a language of description (programming language) that serves as an interface between the models in the human mind and those in computing hardware, and a language of interaction (user interface) that matches the human communication system to that of the computer. "
    },
    {
      "type": "paragraph",
      "id": "b623a38e6fcc1565",
      "text": "Our work has followed a two- to four-year cycle that can be seen to parallel the scientific method:\n\n"
    },
    {
      "type": "paragraph",
      "id": "70a2e95847bd1ecc",
      "text": "Build an application program within the current system (make an observation)\n"
    },
    {
      "type": "paragraph",
      "id": "ea213c6caaa3c418",
      "text": "Based on that experience, redesign the language (formulate a theory)\n"
    },
    {
      "type": "paragraph",
      "id": "e1d5a1678f7deb32",
      "text": "Build a new system based on the new design (make a prediction that can be tested)\n"
    },
    {
      "type": "paragraph",
      "id": "635391ffa9cc635b",
      "text": "The Smalltalk-80 system marks our fifth time through this cycle. I'll start with a principle that is more social than technical and that is largely responsible for the particular bias of the Smalltalk project:\n"
    },
    {
      "type": "paragraph",
      "id": "35ac0585a6b92a87",
      "text": "Personal Mastery: If a system is to serve the creative spirit, it must be entirely comprehensible to a single individual."
    },
    {
      "type": "pagefold",
      "id": "3ae3c7bceec656c9",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "2d300677d7b52a11",
      "text": "The article goes on to mention a dozen more principles that were equally unexpected by the Byte Magazine hobbyist readership. Personal mastery is the perfect companion to the personal computer which completes a vision that Byte documented."
    },
    {
      "type": "paragraph",
      "id": "7116bae59505719c",
      "text": "See [[Programming Paradigms]]"
    },
    {
      "type": "paragraph",
      "id": "0e345c53e8585bda",
      "text": "Smalltalk has floundered after several decades of interest. It was only available to people who could justify paying money to express their creative spirit. Later it became clear that it would not recover because a growing internet was less concerned with power to individuals."
    },
    {
      "type": "pagefold",
      "id": "b0970268112ff96e",
      "text": "code.fed.wiki.org "
    },
    {
      "type": "markdown",
      "id": "106878b6cb4348c5",
      "text": "Ward learned Smalltalk after having dug deeply into Lisp in the course of studying VLSI tooling: \n> I read the self-hosted reference implementation and was impressed with how much innovative tooling could be built within the 32 thousand objects available in its 15-bit address space. [[Allen Wirfs-Brock]] explained how he took efficiency shortcuts while preserving the semantic ideal."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Smalltalk",
        "story": []
      },
      "date": 1426463124336
    },
    {
      "item": {
        "type": "factory",
        "id": "9faa8d720af38624"
      },
      "id": "9faa8d720af38624",
      "type": "add",
      "date": 1426463150861
    },
    {
      "type": "edit",
      "id": "9faa8d720af38624",
      "item": {
        "type": "paragraph",
        "id": "9faa8d720af38624",
        "text": "Design Principles Behind Smalltalk.\n\nDaniel H. H. Ingalls.\nLearning Research Group.\nXerox Palo Alto Research Center.\n\nBYTE Magazine, August 1981"
      },
      "date": 1426463168628
    },
    {
      "type": "edit",
      "id": "9faa8d720af38624",
      "item": {
        "type": "paragraph",
        "id": "9faa8d720af38624",
        "text": "Design Principles Behind Smalltalk.\nDaniel H. H. Ingalls.\nLearning Research Group.\nXerox Palo Alto Research Center.\nBYTE Magazine, August 1981"
      },
      "date": 1426463176730
    },
    {
      "item": {
        "type": "factory",
        "id": "d59226e3799c4235"
      },
      "id": "d59226e3799c4235",
      "type": "add",
      "after": "9faa8d720af38624",
      "date": 1426463232811
    },
    {
      "type": "edit",
      "id": "d59226e3799c4235",
      "item": {
        "type": "pagefold",
        "id": "d59226e3799c4235",
        "text": "quotes"
      },
      "date": 1426463239611
    },
    {
      "item": {
        "type": "factory",
        "id": "5022b772c953cae9"
      },
      "id": "5022b772c953cae9",
      "type": "add",
      "after": "d59226e3799c4235",
      "date": 1426463241561
    },
    {
      "type": "edit",
      "id": "5022b772c953cae9",
      "item": {
        "type": "paragraph",
        "id": "5022b772c953cae9",
        "text": "The purpose of the Smalltalk project is to provide computer support for the creative spirit in everyone. Our work flows from a vision that includes a creative individual and the best computing hardware available. We have chosen to concentrate on two principle areas of research: a language of description (programming language) that serves as an interface between the models in the human mind and those in computing hardware, and a language of interaction (user interface) that matches the human communication system to that of the computer. "
      },
      "date": 1426463249247
    },
    {
      "type": "edit",
      "id": "5022b772c953cae9",
      "item": {
        "type": "paragraph",
        "id": "5022b772c953cae9",
        "text": "The purpose of the Smalltalk project is to provide computer support for the creative spirit in everyone. Our work flows from a vision that includes a creative individual and the best computing hardware available."
      },
      "date": 1426463258520
    },
    {
      "type": "add",
      "id": "74ab6676968b37c0",
      "item": {
        "type": "paragraph",
        "id": "74ab6676968b37c0",
        "text": "We have chosen to concentrate on two principle areas of research: a language of description (programming language) that serves as an interface between the models in the human mind and those in computing hardware, and a language of interaction (user interface) that matches the human communication system to that of the computer. "
      },
      "after": "5022b772c953cae9",
      "date": 1426463261959
    },
    {
      "item": {
        "type": "factory",
        "id": "b623a38e6fcc1565"
      },
      "id": "b623a38e6fcc1565",
      "type": "add",
      "after": "74ab6676968b37c0",
      "date": 1426463291232
    },
    {
      "type": "edit",
      "id": "b623a38e6fcc1565",
      "item": {
        "type": "paragraph",
        "id": "b623a38e6fcc1565",
        "text": "Our work has followed a two- to four-year cycle that can be seen to parallel the scientific method:\n\n"
      },
      "date": 1426463300275
    },
    {
      "type": "add",
      "id": "70a2e95847bd1ecc",
      "item": {
        "type": "paragraph",
        "id": "70a2e95847bd1ecc",
        "text": "Build an application program within the current system (make an observation)\n"
      },
      "after": "b623a38e6fcc1565",
      "date": 1426463303555
    },
    {
      "type": "add",
      "id": "ea213c6caaa3c418",
      "item": {
        "type": "paragraph",
        "id": "ea213c6caaa3c418",
        "text": "Based on that experience, redesign the language (formulate a theory)\n"
      },
      "after": "70a2e95847bd1ecc",
      "date": 1426463306882
    },
    {
      "type": "add",
      "id": "e1d5a1678f7deb32",
      "item": {
        "type": "paragraph",
        "id": "e1d5a1678f7deb32",
        "text": "Build a new system based on the new design (make a prediction that can be tested)\n"
      },
      "after": "ea213c6caaa3c418",
      "date": 1426463310076
    },
    {
      "type": "add",
      "id": "635391ffa9cc635b",
      "item": {
        "type": "paragraph",
        "id": "635391ffa9cc635b",
        "text": "The Smalltalk-80 system marks our fifth time through this cycle."
      },
      "after": "e1d5a1678f7deb32",
      "date": 1426463311216
    },
    {
      "type": "edit",
      "id": "635391ffa9cc635b",
      "item": {
        "type": "paragraph",
        "id": "635391ffa9cc635b",
        "text": "The Smalltalk-80 system marks our fifth time through this cycle. I'll start with a principle that is more social than technical and that is largely responsible for the particular bias of the Smalltalk project:\n"
      },
      "date": 1426463405311
    },
    {
      "type": "add",
      "id": "35ac0585a6b92a87",
      "item": {
        "type": "paragraph",
        "id": "35ac0585a6b92a87",
        "text": "Personal Mastery: If a system is to serve the creative spirit, it must be entirely comprehensible to a single individual."
      },
      "after": "635391ffa9cc635b",
      "date": 1426463407971
    },
    {
      "item": {
        "type": "factory",
        "id": "3ae3c7bceec656c9"
      },
      "id": "3ae3c7bceec656c9",
      "type": "add",
      "after": "35ac0585a6b92a87",
      "date": 1426463445786
    },
    {
      "type": "edit",
      "id": "3ae3c7bceec656c9",
      "item": {
        "type": "pagefold",
        "id": "3ae3c7bceec656c9",
        "text": "."
      },
      "date": 1426463450074
    },
    {
      "item": {
        "type": "factory",
        "id": "2d300677d7b52a11"
      },
      "id": "2d300677d7b52a11",
      "type": "add",
      "after": "3ae3c7bceec656c9",
      "date": 1426463457746
    },
    {
      "type": "edit",
      "id": "2d300677d7b52a11",
      "item": {
        "type": "paragraph",
        "id": "2d300677d7b52a11",
        "text": "The article goes on to mention a dozen more principles that were equally unexpected by the Byte Magazine hobbyist readership. Personal mastery is the perfect companion to the personal computer which completes a vision that Byte documented. See [[Programming Paradigms]]"
      },
      "date": 1426463682059
    },
    {
      "type": "edit",
      "id": "2d300677d7b52a11",
      "item": {
        "type": "paragraph",
        "id": "2d300677d7b52a11",
        "text": "The article goes on to mention a dozen more principles that were equally unexpected by the Byte Magazine hobbyist readership. Personal mastery is the perfect companion to the personal computer which completes a vision that Byte documented."
      },
      "date": 1426463689892
    },
    {
      "type": "add",
      "id": "7116bae59505719c",
      "item": {
        "type": "paragraph",
        "id": "7116bae59505719c",
        "text": "See [[Programming Paradigms]]"
      },
      "after": "2d300677d7b52a11",
      "date": 1426463691042
    },
    {
      "item": {
        "type": "factory",
        "id": "0e345c53e8585bda"
      },
      "id": "0e345c53e8585bda",
      "type": "add",
      "after": "7116bae59505719c",
      "date": 1426463856121
    },
    {
      "type": "edit",
      "id": "0e345c53e8585bda",
      "item": {
        "type": "paragraph",
        "id": "0e345c53e8585bda",
        "text": "Smalltalk has floundered after several decades of interest. It was only available to people who could justify paying money to express their creative spirit. Later it became clear that it would not recover because a growing internet was less concerned with power to individuals."
      },
      "date": 1426464017516
    },
    {
      "type": "add",
      "id": "5aafc5eb1cf3b808",
      "item": {
        "type": "paragraph",
        "id": "5aafc5eb1cf3b808",
        "text": "See also [[Personal Dynamic Media]]"
      },
      "after": "9faa8d720af38624",
      "date": 1426466611694
    },
    {
      "type": "fork",
      "site": "h2.ward.asia.wiki.org",
      "date": 1627568380783
    },
    {
      "item": {
        "type": "factory",
        "id": "b0970268112ff96e"
      },
      "id": "b0970268112ff96e",
      "type": "add",
      "after": "0e345c53e8585bda",
      "date": 1627568456548
    },
    {
      "type": "edit",
      "id": "b0970268112ff96e",
      "item": {
        "type": "pagefold",
        "id": "b0970268112ff96e",
        "text": "code.fed.wiki.org "
      },
      "date": 1627568460418
    },
    {
      "item": {
        "type": "factory",
        "id": "1843450f66d8e701"
      },
      "id": "1843450f66d8e701",
      "type": "add",
      "after": "b0970268112ff96e",
      "date": 1627568461986
    },
    {
      "type": "remove",
      "id": "1843450f66d8e701",
      "date": 1627568465657
    },
    {
      "item": {
        "type": "factory",
        "id": "106878b6cb4348c5"
      },
      "id": "106878b6cb4348c5",
      "type": "add",
      "after": "b0970268112ff96e",
      "date": 1627568468440
    },
    {
      "type": "edit",
      "id": "106878b6cb4348c5",
      "item": {
        "type": "markdown",
        "id": "106878b6cb4348c5",
        "text": "Ward learned Smalltalk after having dug deeply into Lisp in the course of studying VLSI tooling: \n> I read the self-hosted reference implementation and was impressed with how much innovative tooling could be built within the 32 thousand objects available in its 15-bit address space. Allen Wirfs-Brock explained how he took efficiency shortcuts while preserving the semantic ideal."
      },
      "date": 1627568485409
    },
    {
      "type": "edit",
      "id": "106878b6cb4348c5",
      "item": {
        "type": "markdown",
        "id": "106878b6cb4348c5",
        "text": "Ward learned Smalltalk after having dug deeply into Lisp in the course of studying VLSI tooling: \n> I read the self-hosted reference implementation and was impressed with how much innovative tooling could be built within the 32 thousand objects available in its 15-bit address space. [[Allen Wirfs-Brock]] explained how he took efficiency shortcuts while preserving the semantic ideal."
      },
      "date": 1627568501818
    },
    {
      "item": {
        "type": "factory",
        "id": "63e37a8394e85499"
      },
      "id": "63e37a8394e85499",
      "type": "add",
      "after": "106878b6cb4348c5",
      "date": 1659967055422
    },
    {
      "id": "63e37a8394e85499",
      "type": "move",
      "order": [
        "63e37a8394e85499",
        "9faa8d720af38624",
        "5aafc5eb1cf3b808",
        "d59226e3799c4235",
        "5022b772c953cae9",
        "74ab6676968b37c0",
        "b623a38e6fcc1565",
        "70a2e95847bd1ecc",
        "ea213c6caaa3c418",
        "e1d5a1678f7deb32",
        "635391ffa9cc635b",
        "35ac0585a6b92a87",
        "3ae3c7bceec656c9",
        "2d300677d7b52a11",
        "7116bae59505719c",
        "0e345c53e8585bda",
        "b0970268112ff96e",
        "106878b6cb4348c5"
      ],
      "date": 1659967061527
    },
    {
      "type": "edit",
      "id": "63e37a8394e85499",
      "item": {
        "type": "paragraph",
        "id": "63e37a8394e85499",
        "text": "Smalltalk is an object system, rather than a language. The entire system, including its development tools and application code is stored in a snapshot file, which is essentially a memory dump of the entire heap."
      },
      "date": 1659967064596
    },
    {
      "type": "edit",
      "id": "63e37a8394e85499",
      "item": {
        "type": "paragraph",
        "id": "63e37a8394e85499",
        "text": "Smalltalk is an object system, rather than a language. The entire system, including its development tools and application code is stored in a snapshot file, which is essentially a memory dump of the entire heap. ([[Two Decades of Smalltalk VM Development]]"
      },
      "date": 1659967086049
    },
    {
      "type": "edit",
      "id": "63e37a8394e85499",
      "item": {
        "type": "paragraph",
        "id": "63e37a8394e85499",
        "text": "Smalltalk is an object system, rather than a language. The entire system, including its development tools and application code is stored in a snapshot file, which is essentially a memory dump of the entire heap. ([[Two Decades of Smalltalk VM Development]], p. 58â€“59)"
      },
      "date": 1659967118172
    },
    {
      "item": {
        "type": "factory",
        "id": "0dc8e7976d7891dc"
      },
      "id": "0dc8e7976d7891dc",
      "type": "add",
      "after": "106878b6cb4348c5",
      "date": 1659967218316
    },
    {
      "id": "0dc8e7976d7891dc",
      "type": "move",
      "order": [
        "63e37a8394e85499",
        "0dc8e7976d7891dc",
        "9faa8d720af38624",
        "5aafc5eb1cf3b808",
        "d59226e3799c4235",
        "5022b772c953cae9",
        "74ab6676968b37c0",
        "b623a38e6fcc1565",
        "70a2e95847bd1ecc",
        "ea213c6caaa3c418",
        "e1d5a1678f7deb32",
        "635391ffa9cc635b",
        "35ac0585a6b92a87",
        "3ae3c7bceec656c9",
        "2d300677d7b52a11",
        "7116bae59505719c",
        "0e345c53e8585bda",
        "b0970268112ff96e",
        "106878b6cb4348c5"
      ],
      "date": 1659967230912
    },
    {
      "type": "edit",
      "id": "0dc8e7976d7891dc",
      "item": {
        "type": "pagefold",
        "id": "0dc8e7976d7891dc",
        "text": "~"
      },
      "date": 1659967234666
    },
    {
      "type": "edit",
      "id": "63e37a8394e85499",
      "item": {
        "type": "paragraph",
        "id": "63e37a8394e85499",
        "text": "Smalltalk is an object *system*, rather than a language. The entire system, including its development tools and application code is stored in a snapshot file, which is essentially a memory dump of the entire heap. ([[Two Decades of Smalltalk VM Development]], p. 58â€“59)"
      },
      "date": 1659967246032
    },
    {
      "type": "edit",
      "id": "63e37a8394e85499",
      "item": {
        "type": "markdown",
        "id": "63e37a8394e85499",
        "text": "Smalltalk is an object *system*, rather than a language. The entire system, including its development tools and application code is stored in a snapshot file, which is essentially a memory dump of the entire heap. ([[Two Decades of Smalltalk VM Development]], p. 58â€“59)"
      },
      "date": 1659967247220
    },
    {
      "type": "edit",
      "id": "63e37a8394e85499",
      "item": {
        "type": "markdown",
        "id": "63e37a8394e85499",
        "text": "Smalltalk is an object *system*, rather than a language. The entire system, including its development tools and application code is stored in a snapshot file, which is essentially a memory dump of the entire heap. ([[Two Decades of Smalltalk VM Development]], p. 58â€“59)\n"
      },
      "date": 1659967286194
    },
    {
      "type": "add",
      "id": "3e01eac89fb006f7",
      "item": {
        "type": "markdown",
        "id": "3e01eac89fb006f7",
        "text": "> When programming with Smalltalk, the programmer usually starts"
      },
      "after": "63e37a8394e85499",
      "date": 1659967288067
    },
    {
      "type": "edit",
      "id": "3e01eac89fb006f7",
      "item": {
        "type": "markdown",
        "id": "3e01eac89fb006f7",
        "text": "> When programming with Smalltalk, the programmer usually starts from a snapshot which contains the core libraries, the development environment and the application under development. More precisely, the snapshot includes objects (such as the classes), the compiled methods in the form of bytecodes and the running processes. Developing applications consists essentially in writing and editing code, which installs, modifies and removes classes and compiled methods to and from the class hierarchy. Programming may be done live, as the application under development is running. For example, objects may have their shape changed on the fly as instance variables are added and removed. A new snapshot can be made during or at the end of the development session."
      },
      "date": 1659967301601
    },
    {
      "item": {
        "type": "factory",
        "id": "f8392e76b72c7c7e"
      },
      "id": "f8392e76b72c7c7e",
      "type": "add",
      "after": "106878b6cb4348c5",
      "date": 1659967317458
    },
    {
      "id": "f8392e76b72c7c7e",
      "type": "move",
      "order": [
        "63e37a8394e85499",
        "3e01eac89fb006f7",
        "f8392e76b72c7c7e",
        "0dc8e7976d7891dc",
        "9faa8d720af38624",
        "5aafc5eb1cf3b808",
        "d59226e3799c4235",
        "5022b772c953cae9",
        "74ab6676968b37c0",
        "b623a38e6fcc1565",
        "70a2e95847bd1ecc",
        "ea213c6caaa3c418",
        "e1d5a1678f7deb32",
        "635391ffa9cc635b",
        "35ac0585a6b92a87",
        "3ae3c7bceec656c9",
        "2d300677d7b52a11",
        "7116bae59505719c",
        "0e345c53e8585bda",
        "b0970268112ff96e",
        "106878b6cb4348c5"
      ],
      "date": 1659967327045
    },
    {
      "type": "edit",
      "id": "f8392e76b72c7c7e",
      "item": {
        "type": "paragraph",
        "id": "f8392e76b72c7c7e",
        "text": "Snapshots can also be used to avoid long start-up times when fixing specific bugs. The VM can be run to a point where the bug is about to manifest and a snapshot taken. Then multiple analyses of the bug can be undertaken by loading the snapshot and resuming execution, either in the normal VM or in the simulator, short cutting the time to reach the bug."
      },
      "date": 1659967328356
    }
  ]
}