{
  "title": "Virtual Control Panels",
  "story": [
    {
      "type": "paragraph",
      "id": "1c1e4a5953c834e8",
      "text": "Adam Solove has suggested a control panel museum. I think that would be a good challenge for wiki and a testbed for [[Method Control Loops]]. Conversation ensues. Adam's comments radically abbreviated."
    },
    {
      "type": "paragraph",
      "id": "bf3aafa64e19baae",
      "text": "Here is my admittedly superficial start on a control panel museum. "
    },
    {
      "type": "reference",
      "id": "b7a75b775983e110",
      "site": "panels.fed.wiki.org",
      "slug": "control-panel-museum",
      "title": "Control Panel Museum",
      "text": "Control panels display diverse information and respond literally to a touch of a button. We will collect panels and sometimes bring them back to life with simulations."
    },
    {
      "type": "paragraph",
      "id": "aa914e6923fc4774",
      "text": "I have a colleague who is building urban energy models in federated wiki. He has asked me for mechanisms that could do control loops as well as animations of their behavior."
    },
    {
      "type": "paragraph",
      "id": "a0e83025142af8f9",
      "text": "To make progress it helps me to have a simpler problem that I can do any way I want rather than trying to do exactly what he wants. The museum will meet this need and maybe be fun in the long run too.\n\n"
    },
    {
      "type": "paragraph",
      "id": "c6566fbce3424cd3",
      "text": "I've attached some notes on extending the Method Plugin to implement control loops. These could be handy for bringing airplane dials to life. I could also use a similar \"markup\" for state transition logic of, say, the telephone.\n\n"
    },
    {
      "type": "paragraph",
      "id": "a28668db267ac116",
      "text": "I'm a little vague on how an image gets turned into a live svg animation. Ideas? I wonder if d3.js could help?\n"
    },
    {
      "type": "html",
      "id": "145666e442675de2",
      "text": "<b>Adam: Maybe you can describe the simplest possible example that would prove we had succeeded?"
    },
    {
      "type": "paragraph",
      "id": "d96c1d976f313cd3",
      "text": "I don't have a clear notion of an end result. I do have a handful of features that a colleague, Michael Mehaffy, has been asking about. I don't want to build his application. Rather, I want to build the platform with which he can build his application. The control panel museum is a vehicle that may or may not work out.\n\n"
    },
    {
      "type": "paragraph",
      "id": "1b5c3c6bfb69ebea",
      "text": "On Michael's behalf I have expanded the Method Plugin to include unit calculation. Now I'm considering supporting closed loop calculations. I'm also interested in translation of Method calculations to javascript that will JIT for performance. I have code that will write spreadsheet formulas from Methods. That's a start. \n\n"
    },
    {
      "type": "paragraph",
      "id": "3c5720e450eb36a6",
      "text": "Why bother? My pet theory is that I can make a number of small special purpose languages that are easier to learn and share than a general purpose programming language. This could make a difference, especially if there were to be contributions by someone who understands control but doesn't think of themselves as a programmer.\n\n"
    },
    {
      "type": "paragraph",
      "id": "5ae85650eaef9e06",
      "text": "Say I have a control panel from a private aircraft. I could write simple formulas that would relate altitude and air speed to throttle and elevator. I'm told the relation is not what one would expect. Increate the throttle to go up. Operate the elevator to change speed. "
    },
    {
      "type": "paragraph",
      "id": "4cf16fa5efdce362",
      "text": "I'm assuming these are simple formulas in a closed loop. If I wrote the wiki page that explained this relationship then I could use it to bring a control panel to life. Note that this is not the same a writing a flight simulator. Rather it is modeling a property of flight that is one thing pilots think about flying. \n\n"
    },
    {
      "type": "paragraph",
      "id": "5e5a04d7729aadd0",
      "text": "Now imagine I get the formula a little wrong. Imagine someone who works these formulas regularly wants to add a term or adjust a constant. Will these be obvious if looking behind the panel? Will the calculations include lots of units? I'm thinking yes.\n"
    },
    {
      "type": "html",
      "id": "94d241494413a773",
      "text": "<b> Adam: What if we build this little demo of a car trying to stay on a track?</b> [http://worrydream.com/LadderOfAbstraction/ worrydream]"
    },
    {
      "type": "paragraph",
      "id": "6d3f4b78a49fd8e4",
      "text": "Well, a quest for a weekend might be more immediately satisfying than a ten year accumulation of museum exhibits. I think it could fit nicely into federated wiki and could be an instructive reimplementation of the demo Alan Kay loves to show.\n\n"
    },
    {
      "type": "paragraph",
      "id": "eeb1beff9fa80f8e",
      "text": "Lets think about how this might fit into plugins.\n\n"
    },
    {
      "type": "paragraph",
      "id": "eaeeeee5218fea0b",
      "text": "Alan Kay draws a track, builds a car, then shows that the feedback logic to drive the car on the road can be built out of his logic tiles. This uses some combination of sensors and actuators. His car can sense the painted road. His car can move and turn (like a turtle).\n\n"
    },
    {
      "type": "paragraph",
      "id": "f212c611fb9a1b83",
      "text": "I suggest we do something similar. The Method plugin takes input bindings and returns output bindings. I have simple logic in the Reduce plugin that finds Methods and evaluates them in turn feeding the output of one into the input of the next. This \"forward\" calculation could control the car.\n\n"
    },
    {
      "type": "paragraph",
      "id": "ccf528cbce0d4dd6",
      "text": "The new Car plugin would sense the car's environment, assemble this up as a collection of sensor readings, invoke the downstream Methods, then look through the final output for motor controls. The Car plugin would thereby implement the \"feedback\" logic I discussed in my proposed extension to Method. \n\n"
    },
    {
      "type": "paragraph",
      "id": "cfad9075eb04b9aa",
      "text": "The new Car plugin could be configured with car markup that could name and position sensors and motor controls of the car. It could also hold the car's image which it would position and rotate. \n\n"
    },
    {
      "type": "paragraph",
      "id": "6fd10d9a45d7a50d",
      "text": "The new Car plugin would also find the first image to its left and use that as the track. This would happen when the car is double clicked. That is when the car, the track, and the control logic come together. If all the pieces aren't found, we have a false start and nothing happens.\n\n"
    },
    {
      "type": "paragraph",
      "id": "0b9c1288c29f3401",
      "text": "I like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\n"
    },
    {
      "type": "paragraph",
      "id": "dd17a5d9053ecbd1",
      "text": "It might help to think about a simpler problem. "
    },
    {
      "type": "paragraph",
      "id": "89c2e40fce73128c",
      "text": "Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. "
    },
    {
      "type": "method",
      "id": "0470414e90c01bb6",
      "text": "342 x\n455 y"
    },
    {
      "type": "paragraph",
      "id": "51968346b569b3a6",
      "text": "The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n"
    },
    {
      "type": "method",
      "id": "a671a530ea545e35",
      "text": "x\ny\n0.01 scale\nCALC (x-100)*scale\nSHOW dx\nCALC (100-y)*scale\nSHOW dy"
    },
    {
      "type": "paragraph",
      "id": "049069bf37ec7356",
      "text": "This would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\n"
    },
    {
      "type": "paragraph",
      "id": "56d977e2aeec4182",
      "text": "The Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
    },
    {
      "type": "html",
      "id": "78a6ce0217a245ea",
      "text": "<b> Adam: Your suggestion on the animating dot is spot-on. How does the method plugin currently work?"
    },
    {
      "type": "paragraph",
      "id": "aa78639b613a23ca",
      "text": "My approach to inter-page communication in wiki has been to try lots of things. Thus I have many examples that draw from each other and introduce specific variations appropriate to the task at hand. \n\n"
    },
    {
      "type": "paragraph",
      "id": "9230576f619f0cb2",
      "text": "The moving dot pokes at a particular weakness that could benefit from your experience. The issue is simple: how to setup and tear down event listeners as authors refactor pages or as readers retrieve them. The hard problem here is knowing which are the strongest forces bearing on the many available choices. Even poor choices are valuable now as they will expose their limitations.\n\n"
    },
    {
      "type": "paragraph",
      "id": "61cd33040cee88b0",
      "text": "Eval:\n\n"
    },
    {
      "type": "paragraph",
      "id": "dc3d484509e0f301",
      "text": "The basic strategy used by the Method plugin is to find an input hash (javascript object), evaluate its own calculations in that context, and then produce an output hash with its own new bindings. The Method plugin offers an eval method that takes input and output hashes as arguments and will perform computations.\n\n"
    },
    {
      "type": "paragraph",
      "id": "2229f192fc64dd70",
      "text": "I have written several other plugins that exploit this capability. The Rollup plugin fetches pages, looks for type: method paragraphs, and runs them sequentially through Method plugin's eval. The effect is to reevaluate a calculation based on initial conditions in the first input hash. \n\n"
    },
    {
      "type": "paragraph",
      "id": "2a95e92e520cc6ad",
      "text": "I have used the find & eval approach in the Reduce plugin that provides a slider on initial conditions and then reevaluates pages at an animation rate. Reduce also has a feature where it will translate the computation it finds into excel spreadsheet notation. This emphasizes the \"universal\" nature of the calculations and that wiki is mostly a collaborative refactoring editor for them.\n\n"
    },
    {
      "type": "paragraph",
      "id": "4b3c905efb40fb22",
      "text": "Update:\n\n"
    },
    {
      "type": "paragraph",
      "id": "798c5063b4e8ba9a",
      "text": "Neither of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus."
    },
    {
      "type": "paragraph",
      "id": "eb60fb06aedb57a6",
      "text": "[[About Rollup Plugin]]"
    },
    {
      "type": "paragraph",
      "id": "49a090c5c3edaf89",
      "text": "[[About Reduce Plugin]]"
    },
    {
      "type": "paragraph",
      "id": "92b0d568fcc70768",
      "text": "The Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. "
    },
    {
      "type": "paragraph",
      "id": "c9bbe8974f86f1d0",
      "text": "[[About Txtzyme Plugin]]"
    },
    {
      "type": "paragraph",
      "id": "1650a29533a3bedb",
      "text": "Forward:\n\n"
    },
    {
      "type": "paragraph",
      "id": "9e18ca43648b2f75",
      "text": "A good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\n"
    },
    {
      "type": "paragraph",
      "id": "bf396890028d5b89",
      "text": "With your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Virtual Control Panels",
        "story": []
      },
      "date": 1395600594771
    },
    {
      "item": {
        "type": "factory",
        "id": "1c1e4a5953c834e8"
      },
      "id": "1c1e4a5953c834e8",
      "type": "add",
      "date": 1395600596746
    },
    {
      "type": "edit",
      "id": "1c1e4a5953c834e8",
      "item": {
        "type": "paragraph",
        "id": "1c1e4a5953c834e8",
        "text": "Adam Solove has suggested a control panel museum. I think that would be a good challenge for wiki and a testbed for [[Method Control Loops]]. Conversation ensues."
      },
      "date": 1395600702191
    },
    {
      "item": {
        "type": "paragraph",
        "id": "69df9bda98595885",
        "text": ""
      },
      "id": "69df9bda98595885",
      "type": "add",
      "after": "1c1e4a5953c834e8",
      "date": 1395600702702
    },
    {
      "type": "remove",
      "id": "69df9bda98595885",
      "date": 1395600712928
    },
    {
      "item": {
        "type": "factory",
        "id": "bf3aafa64e19baae"
      },
      "id": "bf3aafa64e19baae",
      "type": "add",
      "after": "1c1e4a5953c834e8",
      "date": 1395600736502
    },
    {
      "type": "edit",
      "id": "bf3aafa64e19baae",
      "item": {
        "type": "paragraph",
        "id": "bf3aafa64e19baae",
        "text": "Here is my admittedly superficial start on a control panel museum. I have a colleague who is building urban energy models in federated wiki. He has asked me for mechanisms that could do control loops as well as animations of their behavior. To make progress it helps me to have a simpler problem that I can do any way I want rather than trying to do exactly what he wants. The museum will meet this need and maybe be fun in the long run too.\n\n"
      },
      "date": 1395600755301
    },
    {
      "item": {
        "type": "paragraph",
        "id": "c6566fbce3424cd3",
        "text": "I've attached some notes on extending the Method Plugin to implement control loops. These could be handy for bringing airplane dials to life. I could also use a similar \"markup\" for state transition logic of, say, the telephone.\n\nI'm a little vague on how an image gets turned into a live svg animation. Ideas? I wonder if d3.js could help?\n"
      },
      "id": "c6566fbce3424cd3",
      "type": "add",
      "after": "bf3aafa64e19baae",
      "date": 1395600755812
    },
    {
      "type": "edit",
      "id": "c6566fbce3424cd3",
      "item": {
        "type": "paragraph",
        "id": "c6566fbce3424cd3",
        "text": "I've attached some notes on extending the Method Plugin to implement control loops. These could be handy for bringing airplane dials to life. I could also use a similar \"markup\" for state transition logic of, say, the telephone.\n\n"
      },
      "date": 1395600759379
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a28668db267ac116",
        "text": "I'm a little vague on how an image gets turned into a live svg animation. Ideas? I wonder if d3.js could help?\n"
      },
      "id": "a28668db267ac116",
      "type": "add",
      "after": "c6566fbce3424cd3",
      "date": 1395600759887
    },
    {
      "type": "edit",
      "id": "bf3aafa64e19baae",
      "item": {
        "type": "paragraph",
        "id": "bf3aafa64e19baae",
        "text": "Here is my admittedly superficial start on a control panel museum. "
      },
      "date": 1395600775251
    },
    {
      "item": {
        "type": "paragraph",
        "id": "aa914e6923fc4774",
        "text": "I have a colleague who is building urban energy models in federated wiki. He has asked me for mechanisms that could do control loops as well as animations of their behavior. To make progress it helps me to have a simpler problem that I can do any way I want rather than trying to do exactly what he wants. The museum will meet this need and maybe be fun in the long run too.\n\n"
      },
      "id": "aa914e6923fc4774",
      "type": "add",
      "after": "bf3aafa64e19baae",
      "date": 1395600775759
    },
    {
      "item": {
        "type": "factory",
        "id": "b7a75b775983e110"
      },
      "id": "b7a75b775983e110",
      "type": "add",
      "after": "a28668db267ac116",
      "date": 1395600806511
    },
    {
      "type": "edit",
      "id": "b7a75b775983e110",
      "item": {
        "type": "reference",
        "id": "b7a75b775983e110",
        "site": "panels.fed.wiki.org",
        "slug": "control-panel-museum",
        "title": "Control Panel Museum",
        "text": "Control panels display diverse information and respond literally to a touch of a button. Here we collect panels we've seen and sometimes bring them back to life with simulations."
      },
      "date": 1395600822617
    },
    {
      "type": "move",
      "order": [
        "1c1e4a5953c834e8",
        "bf3aafa64e19baae",
        "b7a75b775983e110",
        "aa914e6923fc4774",
        "c6566fbce3424cd3",
        "a28668db267ac116"
      ],
      "id": "b7a75b775983e110",
      "date": 1395600825902
    },
    {
      "item": {
        "type": "paragraph",
        "id": "145666e442675de2",
        "text": ""
      },
      "id": "145666e442675de2",
      "type": "add",
      "after": "a28668db267ac116",
      "date": 1395600875474
    },
    {
      "type": "edit",
      "id": "145666e442675de2",
      "item": {
        "type": "paragraph",
        "id": "145666e442675de2",
        "text": "Adam: Maybe you can describe the simplest possible example that would prove we had succeeded?"
      },
      "date": 1395600879848
    },
    {
      "type": "edit",
      "id": "aa914e6923fc4774",
      "item": {
        "type": "paragraph",
        "id": "aa914e6923fc4774",
        "text": "I have a colleague who is building urban energy models in federated wiki. He has asked me for mechanisms that could do control loops as well as animations of their behavior."
      },
      "date": 1395600896632
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a0e83025142af8f9",
        "text": "To make progress it helps me to have a simpler problem that I can do any way I want rather than trying to do exactly what he wants. The museum will meet this need and maybe be fun in the long run too.\n\n"
      },
      "id": "a0e83025142af8f9",
      "type": "add",
      "after": "aa914e6923fc4774",
      "date": 1395600897139
    },
    {
      "item": {
        "type": "paragraph",
        "id": "d96c1d976f313cd3",
        "text": ""
      },
      "id": "d96c1d976f313cd3",
      "type": "add",
      "after": "145666e442675de2",
      "date": 1395600996728
    },
    {
      "type": "edit",
      "id": "d96c1d976f313cd3",
      "item": {
        "type": "paragraph",
        "id": "d96c1d976f313cd3",
        "text": "I don't have a clear notion of an end result. I do have a handful of features that a colleague, Michael Mehaffy, has been asking about. I don't want to build his application. Rather, I want to build the platform with which he can build his application. The control panel museum is a vehicle that may or may not work out.\n\n"
      },
      "date": 1395601014900
    },
    {
      "item": {
        "type": "paragraph",
        "id": "1b5c3c6bfb69ebea",
        "text": "On Michael's behalf I have expanded the Method Plugin to include unit calculation. Now I'm considering supporting closed loop calculations. I'm also interested in translation of Method calculations to javascript that will JIT for performance. I have code that will write spreadsheet formulas from Methods. That's a start. \n\nWhy bother? My pet theory is that I can make a number of small special purpose languages that are easier to learn and share than a general purpose programming language. This could make a difference, especially if there were to be contributions by someone who understands control but doesn't think of themselves as a programmer.\n\nA scenario.\n\nSay I have a control panel from a private aircraft. I could write simple formulas that would relate altitude and air speed to throttle and elevator. I'm told the relation is not what one would expect. Increate the throttle to go up. Operate the elevator to change speed. I'm assuming these are simple formulas in a closed loop. If I wrote the wiki page that explained this relationship then I could use it to bring a control panel to life. Note that this is not the same a writing a flight simulator. Rather it is modeling a property of flight that is one thing pilots think about flying. \n\nNow imagine I get the formula a little wrong. Imagine someone who works these formulas regularly wants to add a term or adjust a constant. Will these be obvious if looking behind the panel? Will the calculations include lots of units? I'm thinking yes.\n"
      },
      "id": "1b5c3c6bfb69ebea",
      "type": "add",
      "after": "d96c1d976f313cd3",
      "date": 1395601015415
    },
    {
      "type": "edit",
      "id": "1b5c3c6bfb69ebea",
      "item": {
        "type": "paragraph",
        "id": "1b5c3c6bfb69ebea",
        "text": "On Michael's behalf I have expanded the Method Plugin to include unit calculation. Now I'm considering supporting closed loop calculations. I'm also interested in translation of Method calculations to javascript that will JIT for performance. I have code that will write spreadsheet formulas from Methods. That's a start. \n\n"
      },
      "date": 1395601026516
    },
    {
      "item": {
        "type": "paragraph",
        "id": "3c5720e450eb36a6",
        "text": "Why bother? My pet theory is that I can make a number of small special purpose languages that are easier to learn and share than a general purpose programming language. This could make a difference, especially if there were to be contributions by someone who understands control but doesn't think of themselves as a programmer.\n\nA scenario.\n\nSay I have a control panel from a private aircraft. I could write simple formulas that would relate altitude and air speed to throttle and elevator. I'm told the relation is not what one would expect. Increate the throttle to go up. Operate the elevator to change speed. I'm assuming these are simple formulas in a closed loop. If I wrote the wiki page that explained this relationship then I could use it to bring a control panel to life. Note that this is not the same a writing a flight simulator. Rather it is modeling a property of flight that is one thing pilots think about flying. \n\nNow imagine I get the formula a little wrong. Imagine someone who works these formulas regularly wants to add a term or adjust a constant. Will these be obvious if looking behind the panel? Will the calculations include lots of units? I'm thinking yes.\n"
      },
      "id": "3c5720e450eb36a6",
      "type": "add",
      "after": "1b5c3c6bfb69ebea",
      "date": 1395601027025
    },
    {
      "type": "edit",
      "id": "3c5720e450eb36a6",
      "item": {
        "type": "paragraph",
        "id": "3c5720e450eb36a6",
        "text": "Why bother? My pet theory is that I can make a number of small special purpose languages that are easier to learn and share than a general purpose programming language. This could make a difference, especially if there were to be contributions by someone who understands control but doesn't think of themselves as a programmer.\n\n"
      },
      "date": 1395601035524
    },
    {
      "item": {
        "type": "paragraph",
        "id": "5ae85650eaef9e06",
        "text": "Say I have a control panel from a private aircraft. I could write simple formulas that would relate altitude and air speed to throttle and elevator. I'm told the relation is not what one would expect. Increate the throttle to go up. Operate the elevator to change speed. I'm assuming these are simple formulas in a closed loop. If I wrote the wiki page that explained this relationship then I could use it to bring a control panel to life. Note that this is not the same a writing a flight simulator. Rather it is modeling a property of flight that is one thing pilots think about flying. \n\nNow imagine I get the formula a little wrong. Imagine someone who works these formulas regularly wants to add a term or adjust a constant. Will these be obvious if looking behind the panel? Will the calculations include lots of units? I'm thinking yes.\n"
      },
      "id": "5ae85650eaef9e06",
      "type": "add",
      "after": "3c5720e450eb36a6",
      "date": 1395601036032
    },
    {
      "item": {
        "type": "paragraph",
        "id": "7dfe456806739e4e",
        "text": "A scenario.\n\n"
      },
      "id": "7dfe456806739e4e",
      "type": "add",
      "after": "3c5720e450eb36a6",
      "date": 1395601036038
    },
    {
      "type": "remove",
      "id": "7dfe456806739e4e",
      "date": 1395601045521
    },
    {
      "type": "edit",
      "id": "5ae85650eaef9e06",
      "item": {
        "type": "paragraph",
        "id": "5ae85650eaef9e06",
        "text": "Say I have a control panel from a private aircraft. I could write simple formulas that would relate altitude and air speed to throttle and elevator. I'm told the relation is not what one would expect. Increate the throttle to go up. Operate the elevator to change speed. I'm assuming these are simple formulas in a closed loop. If I wrote the wiki page that explained this relationship then I could use it to bring a control panel to life. Note that this is not the same a writing a flight simulator. Rather it is modeling a property of flight that is one thing pilots think about flying. \n\n"
      },
      "date": 1395601053131
    },
    {
      "item": {
        "type": "paragraph",
        "id": "5e5a04d7729aadd0",
        "text": "Now imagine I get the formula a little wrong. Imagine someone who works these formulas regularly wants to add a term or adjust a constant. Will these be obvious if looking behind the panel? Will the calculations include lots of units? I'm thinking yes.\n"
      },
      "id": "5e5a04d7729aadd0",
      "type": "add",
      "after": "5ae85650eaef9e06",
      "date": 1395601053644
    },
    {
      "type": "edit",
      "id": "5ae85650eaef9e06",
      "item": {
        "type": "paragraph",
        "id": "5ae85650eaef9e06",
        "text": "Say I have a control panel from a private aircraft. I could write simple formulas that would relate altitude and air speed to throttle and elevator. I'm told the relation is not what one would expect. Increate the throttle to go up. Operate the elevator to change speed. "
      },
      "date": 1395601069945
    },
    {
      "item": {
        "type": "paragraph",
        "id": "4cf16fa5efdce362",
        "text": "I'm assuming these are simple formulas in a closed loop. If I wrote the wiki page that explained this relationship then I could use it to bring a control panel to life. Note that this is not the same a writing a flight simulator. Rather it is modeling a property of flight that is one thing pilots think about flying. \n\n"
      },
      "id": "4cf16fa5efdce362",
      "type": "add",
      "after": "5ae85650eaef9e06",
      "date": 1395601070453
    },
    {
      "type": "edit",
      "id": "145666e442675de2",
      "item": {
        "type": "paragraph",
        "id": "145666e442675de2",
        "text": "<b>Adam: Maybe you can describe the simplest possible example that would prove we had succeeded?"
      },
      "date": 1395601100920
    },
    {
      "item": {
        "type": "paragraph",
        "id": "94d241494413a773",
        "text": ""
      },
      "id": "94d241494413a773",
      "type": "add",
      "after": "5e5a04d7729aadd0",
      "date": 1395601232057
    },
    {
      "type": "edit",
      "id": "94d241494413a773",
      "item": {
        "type": "paragraph",
        "id": "94d241494413a773",
        "text": "<b> Adam: What if we build this little demo of a car trying to stay on a track?"
      },
      "date": 1395601247763
    },
    {
      "type": "edit",
      "id": "94d241494413a773",
      "item": {
        "type": "paragraph",
        "id": "94d241494413a773",
        "text": "<b> Adam: What if we demo a car trying to stay on a track?"
      },
      "date": 1395601279371
    },
    {
      "type": "edit",
      "id": "94d241494413a773",
      "item": {
        "type": "paragraph",
        "id": "94d241494413a773",
        "text": "<b> Adam: What if we build this little demo of a car trying to stay on a track?[http://worrydream.com/LadderOfAbstraction/ worrydream]"
      },
      "date": 1395601386415
    },
    {
      "type": "edit",
      "id": "94d241494413a773",
      "item": {
        "type": "paragraph",
        "id": "94d241494413a773",
        "text": "<b> Adam: What if we build this little demo of a car trying to stay on a track?</b> [http://worrydream.com/LadderOfAbstraction/ worrydream]"
      },
      "date": 1395601398688
    },
    {
      "item": {
        "type": "factory",
        "id": "6d3f4b78a49fd8e4"
      },
      "id": "6d3f4b78a49fd8e4",
      "type": "add",
      "after": "94d241494413a773",
      "date": 1395601490385
    },
    {
      "type": "edit",
      "id": "6d3f4b78a49fd8e4",
      "item": {
        "type": "paragraph",
        "id": "6d3f4b78a49fd8e4",
        "text": "Well, a quest for a weekend might be more immediately satisfying than a ten year accumulation of museum exhibits. I think it could fit nicely into federated wiki and could be an instructive reimplementation of the demo Alan Kay loves to show.\n\n"
      },
      "date": 1395601509239
    },
    {
      "item": {
        "type": "paragraph",
        "id": "eeb1beff9fa80f8e",
        "text": "Lets think about how this might fit into plugins.\n\nAlan Kay draws a track, builds a car, then shows that the feedback logic to drive the car on the road can be built out of his logic tiles. This uses some combination of sensors and actuators. His car can sense the painted road. His car can move and turn (like a turtle).\n\nI suggest we do something similar. The Method plugin takes input bindings and returns output bindings. I have simple logic in the Reduce plugin that finds Methods and evaluates them in turn feeding the output of one into the input of the next. This \"forward\" calculation could control the car.\n\nThe new Car plugin would sense the car's environment, assemble this up as a collection of sensor readings, invoke the downstream Methods, then look through the final output for motor controls. The Car plugin would thereby implement the \"feedback\" logic I discussed in my proposed extension to Method. \n\nThe new Car plugin could be configured with car markup that could name and position sensors and motor controls of the car. It could also hold the car's image which it would position and rotate. \n\nThe new Car plugin would also find the first image to its left and use that as the track. This would happen when the car is double clicked. That is when the car, the track, and the control logic come together. If all the pieces aren't found, we have a false start and nothing happens.\n\nI like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\nIt might help to think about a simpler problem. Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "eeb1beff9fa80f8e",
      "type": "add",
      "after": "6d3f4b78a49fd8e4",
      "date": 1395601509752
    },
    {
      "type": "edit",
      "id": "eeb1beff9fa80f8e",
      "item": {
        "type": "paragraph",
        "id": "eeb1beff9fa80f8e",
        "text": "Lets think about how this might fit into plugins.\n\n"
      },
      "date": 1395601512935
    },
    {
      "item": {
        "type": "paragraph",
        "id": "eaeeeee5218fea0b",
        "text": "Alan Kay draws a track, builds a car, then shows that the feedback logic to drive the car on the road can be built out of his logic tiles. This uses some combination of sensors and actuators. His car can sense the painted road. His car can move and turn (like a turtle).\n\nI suggest we do something similar. The Method plugin takes input bindings and returns output bindings. I have simple logic in the Reduce plugin that finds Methods and evaluates them in turn feeding the output of one into the input of the next. This \"forward\" calculation could control the car.\n\nThe new Car plugin would sense the car's environment, assemble this up as a collection of sensor readings, invoke the downstream Methods, then look through the final output for motor controls. The Car plugin would thereby implement the \"feedback\" logic I discussed in my proposed extension to Method. \n\nThe new Car plugin could be configured with car markup that could name and position sensors and motor controls of the car. It could also hold the car's image which it would position and rotate. \n\nThe new Car plugin would also find the first image to its left and use that as the track. This would happen when the car is double clicked. That is when the car, the track, and the control logic come together. If all the pieces aren't found, we have a false start and nothing happens.\n\nI like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\nIt might help to think about a simpler problem. Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "eaeeeee5218fea0b",
      "type": "add",
      "after": "eeb1beff9fa80f8e",
      "date": 1395601513447
    },
    {
      "type": "edit",
      "id": "eaeeeee5218fea0b",
      "item": {
        "type": "paragraph",
        "id": "eaeeeee5218fea0b",
        "text": "Alan Kay draws a track, builds a car, then shows that the feedback logic to drive the car on the road can be built out of his logic tiles. This uses some combination of sensors and actuators. His car can sense the painted road. His car can move and turn (like a turtle).\n\n"
      },
      "date": 1395601519591
    },
    {
      "item": {
        "type": "paragraph",
        "id": "f212c611fb9a1b83",
        "text": "I suggest we do something similar. The Method plugin takes input bindings and returns output bindings. I have simple logic in the Reduce plugin that finds Methods and evaluates them in turn feeding the output of one into the input of the next. This \"forward\" calculation could control the car.\n\nThe new Car plugin would sense the car's environment, assemble this up as a collection of sensor readings, invoke the downstream Methods, then look through the final output for motor controls. The Car plugin would thereby implement the \"feedback\" logic I discussed in my proposed extension to Method. \n\nThe new Car plugin could be configured with car markup that could name and position sensors and motor controls of the car. It could also hold the car's image which it would position and rotate. \n\nThe new Car plugin would also find the first image to its left and use that as the track. This would happen when the car is double clicked. That is when the car, the track, and the control logic come together. If all the pieces aren't found, we have a false start and nothing happens.\n\nI like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\nIt might help to think about a simpler problem. Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "f212c611fb9a1b83",
      "type": "add",
      "after": "eaeeeee5218fea0b",
      "date": 1395601520102
    },
    {
      "type": "edit",
      "id": "f212c611fb9a1b83",
      "item": {
        "type": "paragraph",
        "id": "f212c611fb9a1b83",
        "text": "I suggest we do something similar. The Method plugin takes input bindings and returns output bindings. I have simple logic in the Reduce plugin that finds Methods and evaluates them in turn feeding the output of one into the input of the next. This \"forward\" calculation could control the car.\n\n"
      },
      "date": 1395601528606
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ccf528cbce0d4dd6",
        "text": "The new Car plugin would sense the car's environment, assemble this up as a collection of sensor readings, invoke the downstream Methods, then look through the final output for motor controls. The Car plugin would thereby implement the \"feedback\" logic I discussed in my proposed extension to Method. \n\nThe new Car plugin could be configured with car markup that could name and position sensors and motor controls of the car. It could also hold the car's image which it would position and rotate. \n\nThe new Car plugin would also find the first image to its left and use that as the track. This would happen when the car is double clicked. That is when the car, the track, and the control logic come together. If all the pieces aren't found, we have a false start and nothing happens.\n\nI like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\nIt might help to think about a simpler problem. Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "ccf528cbce0d4dd6",
      "type": "add",
      "after": "f212c611fb9a1b83",
      "date": 1395601529118
    },
    {
      "type": "edit",
      "id": "ccf528cbce0d4dd6",
      "item": {
        "type": "paragraph",
        "id": "ccf528cbce0d4dd6",
        "text": "The new Car plugin would sense the car's environment, assemble this up as a collection of sensor readings, invoke the downstream Methods, then look through the final output for motor controls. The Car plugin would thereby implement the \"feedback\" logic I discussed in my proposed extension to Method. \n\n"
      },
      "date": 1395601546741
    },
    {
      "item": {
        "type": "paragraph",
        "id": "cfad9075eb04b9aa",
        "text": "The new Car plugin could be configured with car markup that could name and position sensors and motor controls of the car. It could also hold the car's image which it would position and rotate. \n\nThe new Car plugin would also find the first image to its left and use that as the track. This would happen when the car is double clicked. That is when the car, the track, and the control logic come together. If all the pieces aren't found, we have a false start and nothing happens.\n\nI like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\nIt might help to think about a simpler problem. Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "cfad9075eb04b9aa",
      "type": "add",
      "after": "ccf528cbce0d4dd6",
      "date": 1395601547268
    },
    {
      "type": "edit",
      "id": "cfad9075eb04b9aa",
      "item": {
        "type": "paragraph",
        "id": "cfad9075eb04b9aa",
        "text": "The new Car plugin could be configured with car markup that could name and position sensors and motor controls of the car. It could also hold the car's image which it would position and rotate. \n\n"
      },
      "date": 1395601549868
    },
    {
      "item": {
        "type": "paragraph",
        "id": "6fd10d9a45d7a50d",
        "text": "The new Car plugin would also find the first image to its left and use that as the track. This would happen when the car is double clicked. That is when the car, the track, and the control logic come together. If all the pieces aren't found, we have a false start and nothing happens.\n\nI like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\nIt might help to think about a simpler problem. Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "6fd10d9a45d7a50d",
      "type": "add",
      "after": "cfad9075eb04b9aa",
      "date": 1395601550381
    },
    {
      "type": "edit",
      "id": "6fd10d9a45d7a50d",
      "item": {
        "type": "paragraph",
        "id": "6fd10d9a45d7a50d",
        "text": "The new Car plugin would also find the first image to its left and use that as the track. This would happen when the car is double clicked. That is when the car, the track, and the control logic come together. If all the pieces aren't found, we have a false start and nothing happens.\n\n"
      },
      "date": 1395601555413
    },
    {
      "item": {
        "type": "paragraph",
        "id": "0b9c1288c29f3401",
        "text": "I like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\nIt might help to think about a simpler problem. Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "0b9c1288c29f3401",
      "type": "add",
      "after": "6fd10d9a45d7a50d",
      "date": 1395601555924
    },
    {
      "type": "edit",
      "id": "0b9c1288c29f3401",
      "item": {
        "type": "paragraph",
        "id": "0b9c1288c29f3401",
        "text": "I like this first because it puts Method computations in a feedback loop. I also like it because the car, the track and the control logic come from different pages, different sites even. Finally I like it because it is a federated solution to a problem Alan Kay likes to show. It makes everyone's cars and tracks and control equations intrinsically cataloged and shared. I don't think this would be so easy in his system.\n\n"
      },
      "date": 1395601563701
    },
    {
      "item": {
        "type": "paragraph",
        "id": "dd17a5d9053ecbd1",
        "text": "It might help to think about a simpler problem. Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "dd17a5d9053ecbd1",
      "type": "add",
      "after": "0b9c1288c29f3401",
      "date": 1395601564210
    },
    {
      "type": "edit",
      "id": "dd17a5d9053ecbd1",
      "item": {
        "type": "paragraph",
        "id": "dd17a5d9053ecbd1",
        "text": "It might help to think about a simpler problem. "
      },
      "date": 1395601570397
    },
    {
      "item": {
        "type": "paragraph",
        "id": "89c2e40fce73128c",
        "text": "Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "89c2e40fce73128c",
      "type": "add",
      "after": "dd17a5d9053ecbd1",
      "date": 1395601570906
    },
    {
      "type": "edit",
      "id": "89c2e40fce73128c",
      "item": {
        "type": "paragraph",
        "id": "89c2e40fce73128c",
        "text": "Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n"
      },
      "date": 1395601614555
    },
    {
      "item": {
        "type": "paragraph",
        "id": "1fce9c111695fd0b",
        "text": "\n\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\nThis would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "1fce9c111695fd0b",
      "type": "add",
      "after": "89c2e40fce73128c",
      "date": 1395601615064
    },
    {
      "type": "edit",
      "id": "1fce9c111695fd0b",
      "item": {
        "type": "paragraph",
        "id": "1fce9c111695fd0b",
        "text": "\t0.001 Scale\n\tCALC X-100*Scale\n\tSHOW DX\n\tCALC 100-Y*Scale\n\tSHOW DY\n\n"
      },
      "date": 1395601617762
    },
    {
      "item": {
        "type": "paragraph",
        "id": "049069bf37ec7356",
        "text": "This would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\nThe Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "049069bf37ec7356",
      "type": "add",
      "after": "1fce9c111695fd0b",
      "date": 1395601618270
    },
    {
      "type": "edit",
      "id": "049069bf37ec7356",
      "item": {
        "type": "paragraph",
        "id": "049069bf37ec7356",
        "text": "This would give me digital readouts of DX and DY while the Dot plugin shows them graphically.\n\n"
      },
      "date": 1395601623314
    },
    {
      "item": {
        "type": "paragraph",
        "id": "56d977e2aeec4182",
        "text": "The Car plugin is just a fancy version of this with more variables floating between the model (Car vs. Dot plugins) and the control equations.\n"
      },
      "id": "56d977e2aeec4182",
      "type": "add",
      "after": "049069bf37ec7356",
      "date": 1395601623822
    },
    {
      "type": "edit",
      "id": "89c2e40fce73128c",
      "item": {
        "type": "paragraph",
        "id": "89c2e40fce73128c",
        "text": "Say I had a Dot plugin that would position a dot on a blank field then ask downstream methods to compute incremental motion of that dot. The Dot plugin provides bindings for X and Y and then looks for outputs DX and DY. "
      },
      "date": 1395601636682
    },
    {
      "item": {
        "type": "paragraph",
        "id": "51968346b569b3a6",
        "text": "The Dot plugin decides how fast it repeats this process. It could also output its animation step time so this could figure into the calculations of DX and DY. I would write Methods like the following and expect the dot to orbit the origin at 100, 100.\n"
      },
      "id": "51968346b569b3a6",
      "type": "add",
      "after": "89c2e40fce73128c",
      "date": 1395601637189
    },
    {
      "type": "remove",
      "id": "1fce9c111695fd0b",
      "date": 1395601656982
    },
    {
      "item": {
        "type": "factory",
        "id": "a671a530ea545e35"
      },
      "id": "a671a530ea545e35",
      "type": "add",
      "after": "56d977e2aeec4182",
      "date": 1395601659847
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "0.001 Scale\nCALC X-100*Scale\nSHOW DX\nCALC 100-Y*Scale\nSHOW DY\n"
      },
      "date": 1395601680873
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "0.001 Scale\nCALC X-100*Scale\nCALC 100-Y*Scale"
      },
      "date": 1395601721049
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "0.001 Scale\nCALC X-100*Scale\nSHOW DX\nCALC 100-Y*Scale\nSHOW DY"
      },
      "date": 1395601766786
    },
    {
      "type": "move",
      "order": [
        "1c1e4a5953c834e8",
        "bf3aafa64e19baae",
        "b7a75b775983e110",
        "aa914e6923fc4774",
        "a0e83025142af8f9",
        "c6566fbce3424cd3",
        "a28668db267ac116",
        "145666e442675de2",
        "d96c1d976f313cd3",
        "1b5c3c6bfb69ebea",
        "3c5720e450eb36a6",
        "5ae85650eaef9e06",
        "4cf16fa5efdce362",
        "5e5a04d7729aadd0",
        "94d241494413a773",
        "6d3f4b78a49fd8e4",
        "eeb1beff9fa80f8e",
        "eaeeeee5218fea0b",
        "f212c611fb9a1b83",
        "ccf528cbce0d4dd6",
        "cfad9075eb04b9aa",
        "6fd10d9a45d7a50d",
        "0b9c1288c29f3401",
        "dd17a5d9053ecbd1",
        "89c2e40fce73128c",
        "51968346b569b3a6",
        "049069bf37ec7356",
        "a671a530ea545e35",
        "56d977e2aeec4182"
      ],
      "id": "a671a530ea545e35",
      "date": 1395601775534
    },
    {
      "type": "move",
      "order": [
        "1c1e4a5953c834e8",
        "bf3aafa64e19baae",
        "b7a75b775983e110",
        "aa914e6923fc4774",
        "a0e83025142af8f9",
        "c6566fbce3424cd3",
        "a28668db267ac116",
        "145666e442675de2",
        "d96c1d976f313cd3",
        "1b5c3c6bfb69ebea",
        "3c5720e450eb36a6",
        "5ae85650eaef9e06",
        "4cf16fa5efdce362",
        "5e5a04d7729aadd0",
        "94d241494413a773",
        "6d3f4b78a49fd8e4",
        "eeb1beff9fa80f8e",
        "eaeeeee5218fea0b",
        "f212c611fb9a1b83",
        "ccf528cbce0d4dd6",
        "cfad9075eb04b9aa",
        "6fd10d9a45d7a50d",
        "0b9c1288c29f3401",
        "dd17a5d9053ecbd1",
        "89c2e40fce73128c",
        "51968346b569b3a6",
        "a671a530ea545e35",
        "049069bf37ec7356",
        "56d977e2aeec4182"
      ],
      "id": "a671a530ea545e35",
      "date": 1395601781203
    },
    {
      "item": {
        "type": "factory",
        "id": "78a6ce0217a245ea"
      },
      "id": "78a6ce0217a245ea",
      "type": "add",
      "after": "56d977e2aeec4182",
      "date": 1395601871177
    },
    {
      "type": "edit",
      "id": "78a6ce0217a245ea",
      "item": {
        "type": "paragraph",
        "id": "78a6ce0217a245ea",
        "text": "<b> Adam: Your suggestion on the animating dot is spot-on. How does the method plugin currently work?"
      },
      "date": 1395601925409
    },
    {
      "item": {
        "type": "factory",
        "id": "aa78639b613a23ca"
      },
      "id": "aa78639b613a23ca",
      "type": "add",
      "after": "78a6ce0217a245ea",
      "date": 1395601978578
    },
    {
      "type": "edit",
      "id": "aa78639b613a23ca",
      "item": {
        "type": "paragraph",
        "id": "aa78639b613a23ca",
        "text": "My approach to inter-page communication in wiki has been to try lots of things. Thus I have many examples that draw from each other and introduce specific variations appropriate to the task at hand. \n\n"
      },
      "date": 1395601998401
    },
    {
      "item": {
        "type": "paragraph",
        "id": "9230576f619f0cb2",
        "text": "The moving dot pokes at a particular weakness that could benefit from your experience. The issue is simple: how to setup and tear down event listeners as authors refactor pages or as readers retrieve them. The hard problem here is knowing which are the strongest forces bearing on the many available choices. Even poor choices are valuable now as they will expose their limitations.\n\nEval:\n\nThe basic strategy used by the Method plugin is to find an input hash (javascript object), evaluate its own calculations in that context, and then produce an output hash with its own new bindings. The Method plugin offers an eval method that takes input and output hashes as arguments and will perform computations.\n\nI have written several other plugins that exploit this capability. The Rollup plugin fetches pages, looks for type: method paragraphs, and runs them sequentially through Method plugin's eval. The effect is to reevaluate a calculation based on initial conditions in the first input hash. This was important to Nike.\n\nI have used the find & eval approach in the Reduce plugin that provides a slider on initial conditions and then reevaluates pages at an animation rate. Reduce also has a feature where it will translate the computation it finds into excel spreadsheet notation. This emphasizes the \"universal\" nature of the calculations and that wiki is mostly a collaborative refactoring editor for them.\n\nUpdate:\n\nNiether of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\nThe Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "9230576f619f0cb2",
      "type": "add",
      "after": "aa78639b613a23ca",
      "date": 1395601998914
    },
    {
      "type": "edit",
      "id": "9230576f619f0cb2",
      "item": {
        "type": "paragraph",
        "id": "9230576f619f0cb2",
        "text": "The moving dot pokes at a particular weakness that could benefit from your experience. The issue is simple: how to setup and tear down event listeners as authors refactor pages or as readers retrieve them. The hard problem here is knowing which are the strongest forces bearing on the many available choices. Even poor choices are valuable now as they will expose their limitations.\n\n<b> Eval:\n\nThe basic strategy used by the Method plugin is to find an input hash (javascript object), evaluate its own calculations in that context, and then produce an output hash with its own new bindings. The Method plugin offers an eval method that takes input and output hashes as arguments and will perform computations.\n\nI have written several other plugins that exploit this capability. The Rollup plugin fetches pages, looks for type: method paragraphs, and runs them sequentially through Method plugin's eval. The effect is to reevaluate a calculation based on initial conditions in the first input hash. This was important to Nike.\n\nI have used the find & eval approach in the Reduce plugin that provides a slider on initial conditions and then reevaluates pages at an animation rate. Reduce also has a feature where it will translate the computation it finds into excel spreadsheet notation. This emphasizes the \"universal\" nature of the calculations and that wiki is mostly a collaborative refactoring editor for them.\n\nUpdate:\n\nNiether of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\nThe Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "date": 1395602023600
    },
    {
      "type": "edit",
      "id": "9230576f619f0cb2",
      "item": {
        "type": "paragraph",
        "id": "9230576f619f0cb2",
        "text": "The moving dot pokes at a particular weakness that could benefit from your experience. The issue is simple: how to setup and tear down event listeners as authors refactor pages or as readers retrieve them. The hard problem here is knowing which are the strongest forces bearing on the many available choices. Even poor choices are valuable now as they will expose their limitations.\n\n"
      },
      "date": 1395602044414
    },
    {
      "item": {
        "type": "paragraph",
        "id": "61cd33040cee88b0",
        "text": "<b> Eval:\n\nThe basic strategy used by the Method plugin is to find an input hash (javascript object), evaluate its own calculations in that context, and then produce an output hash with its own new bindings. The Method plugin offers an eval method that takes input and output hashes as arguments and will perform computations.\n\nI have written several other plugins that exploit this capability. The Rollup plugin fetches pages, looks for type: method paragraphs, and runs them sequentially through Method plugin's eval. The effect is to reevaluate a calculation based on initial conditions in the first input hash. This was important to Nike.\n\nI have used the find & eval approach in the Reduce plugin that provides a slider on initial conditions and then reevaluates pages at an animation rate. Reduce also has a feature where it will translate the computation it finds into excel spreadsheet notation. This emphasizes the \"universal\" nature of the calculations and that wiki is mostly a collaborative refactoring editor for them.\n\nUpdate:\n\nNiether of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\nThe Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "61cd33040cee88b0",
      "type": "add",
      "after": "9230576f619f0cb2",
      "date": 1395602044927
    },
    {
      "type": "edit",
      "id": "61cd33040cee88b0",
      "item": {
        "type": "paragraph",
        "id": "61cd33040cee88b0",
        "text": "<b> Eval:\n\n"
      },
      "date": 1395602047927
    },
    {
      "item": {
        "type": "paragraph",
        "id": "dc3d484509e0f301",
        "text": "The basic strategy used by the Method plugin is to find an input hash (javascript object), evaluate its own calculations in that context, and then produce an output hash with its own new bindings. The Method plugin offers an eval method that takes input and output hashes as arguments and will perform computations.\n\nI have written several other plugins that exploit this capability. The Rollup plugin fetches pages, looks for type: method paragraphs, and runs them sequentially through Method plugin's eval. The effect is to reevaluate a calculation based on initial conditions in the first input hash. This was important to Nike.\n\nI have used the find & eval approach in the Reduce plugin that provides a slider on initial conditions and then reevaluates pages at an animation rate. Reduce also has a feature where it will translate the computation it finds into excel spreadsheet notation. This emphasizes the \"universal\" nature of the calculations and that wiki is mostly a collaborative refactoring editor for them.\n\nUpdate:\n\nNiether of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\nThe Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "dc3d484509e0f301",
      "type": "add",
      "after": "61cd33040cee88b0",
      "date": 1395602048438
    },
    {
      "type": "edit",
      "id": "dc3d484509e0f301",
      "item": {
        "type": "paragraph",
        "id": "dc3d484509e0f301",
        "text": "The basic strategy used by the Method plugin is to find an input hash (javascript object), evaluate its own calculations in that context, and then produce an output hash with its own new bindings. The Method plugin offers an eval method that takes input and output hashes as arguments and will perform computations.\n\n"
      },
      "date": 1395602053231
    },
    {
      "item": {
        "type": "paragraph",
        "id": "2229f192fc64dd70",
        "text": "I have written several other plugins that exploit this capability. The Rollup plugin fetches pages, looks for type: method paragraphs, and runs them sequentially through Method plugin's eval. The effect is to reevaluate a calculation based on initial conditions in the first input hash. This was important to Nike.\n\nI have used the find & eval approach in the Reduce plugin that provides a slider on initial conditions and then reevaluates pages at an animation rate. Reduce also has a feature where it will translate the computation it finds into excel spreadsheet notation. This emphasizes the \"universal\" nature of the calculations and that wiki is mostly a collaborative refactoring editor for them.\n\nUpdate:\n\nNiether of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\nThe Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "2229f192fc64dd70",
      "type": "add",
      "after": "dc3d484509e0f301",
      "date": 1395602053742
    },
    {
      "type": "edit",
      "id": "2229f192fc64dd70",
      "item": {
        "type": "paragraph",
        "id": "2229f192fc64dd70",
        "text": "I have written several other plugins that exploit this capability. The Rollup plugin fetches pages, looks for type: method paragraphs, and runs them sequentially through Method plugin's eval. The effect is to reevaluate a calculation based on initial conditions in the first input hash. \n\n"
      },
      "date": 1395602076766
    },
    {
      "item": {
        "type": "paragraph",
        "id": "2a95e92e520cc6ad",
        "text": "I have used the find & eval approach in the Reduce plugin that provides a slider on initial conditions and then reevaluates pages at an animation rate. Reduce also has a feature where it will translate the computation it finds into excel spreadsheet notation. This emphasizes the \"universal\" nature of the calculations and that wiki is mostly a collaborative refactoring editor for them.\n\nUpdate:\n\nNiether of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\nThe Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "2a95e92e520cc6ad",
      "type": "add",
      "after": "2229f192fc64dd70",
      "date": 1395602077276
    },
    {
      "type": "edit",
      "id": "2a95e92e520cc6ad",
      "item": {
        "type": "paragraph",
        "id": "2a95e92e520cc6ad",
        "text": "I have used the find & eval approach in the Reduce plugin that provides a slider on initial conditions and then reevaluates pages at an animation rate. Reduce also has a feature where it will translate the computation it finds into excel spreadsheet notation. This emphasizes the \"universal\" nature of the calculations and that wiki is mostly a collaborative refactoring editor for them.\n\n"
      },
      "date": 1395602081894
    },
    {
      "item": {
        "type": "paragraph",
        "id": "4b3c905efb40fb22",
        "text": "Update:\n\nNiether of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\nThe Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "4b3c905efb40fb22",
      "type": "add",
      "after": "2a95e92e520cc6ad",
      "date": 1395602082404
    },
    {
      "type": "edit",
      "id": "4b3c905efb40fb22",
      "item": {
        "type": "paragraph",
        "id": "4b3c905efb40fb22",
        "text": "<b> Update:\n\n"
      },
      "date": 1395602100895
    },
    {
      "item": {
        "type": "paragraph",
        "id": "798c5063b4e8ba9a",
        "text": "Neither of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\nThe Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "798c5063b4e8ba9a",
      "type": "add",
      "after": "4b3c905efb40fb22",
      "date": 1395602101406
    },
    {
      "type": "edit",
      "id": "798c5063b4e8ba9a",
      "item": {
        "type": "paragraph",
        "id": "798c5063b4e8ba9a",
        "text": "Neither of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus.\n\n"
      },
      "date": 1395602105893
    },
    {
      "item": {
        "type": "paragraph",
        "id": "92b0d568fcc70768",
        "text": "The Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\nForward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "92b0d568fcc70768",
      "type": "add",
      "after": "798c5063b4e8ba9a",
      "date": 1395602106405
    },
    {
      "type": "edit",
      "id": "92b0d568fcc70768",
      "item": {
        "type": "paragraph",
        "id": "92b0d568fcc70768",
        "text": "The Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. \n\n"
      },
      "date": 1395602117108
    },
    {
      "item": {
        "type": "paragraph",
        "id": "1650a29533a3bedb",
        "text": "<b> Forward:\n\nA good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "1650a29533a3bedb",
      "type": "add",
      "after": "92b0d568fcc70768",
      "date": 1395602117618
    },
    {
      "type": "edit",
      "id": "1650a29533a3bedb",
      "item": {
        "type": "paragraph",
        "id": "1650a29533a3bedb",
        "text": "<b> Forward:\n\n"
      },
      "date": 1395602119932
    },
    {
      "item": {
        "type": "paragraph",
        "id": "9e18ca43648b2f75",
        "text": "A good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\nWith your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "9e18ca43648b2f75",
      "type": "add",
      "after": "1650a29533a3bedb",
      "date": 1395602120442
    },
    {
      "type": "edit",
      "id": "9e18ca43648b2f75",
      "item": {
        "type": "paragraph",
        "id": "9e18ca43648b2f75",
        "text": "A good step forward would be to get a dot moving with a rough approximation of the eval protocol, perhaps just written as a function taking input and output hashes, a stub for finding and evaling with a remote Method. I'll leave this to you.\n\n"
      },
      "date": 1395602124268
    },
    {
      "item": {
        "type": "paragraph",
        "id": "bf396890028d5b89",
        "text": "With your permission I will copy some of these notes to a wiki page or two. I consider this our own experiment but in good open source style I'd like to be public about intentions and results.\n"
      },
      "id": "bf396890028d5b89",
      "type": "add",
      "after": "9e18ca43648b2f75",
      "date": 1395602124778
    },
    {
      "type": "edit",
      "id": "1c1e4a5953c834e8",
      "item": {
        "type": "paragraph",
        "id": "1c1e4a5953c834e8",
        "text": "Adam Solove has suggested a control panel museum. I think that would be a good challenge for wiki and a testbed for [[Method Control Loops]]. Conversation ensues. Adam's comments radically abbreviated."
      },
      "date": 1395602181146
    },
    {
      "type": "edit",
      "id": "61cd33040cee88b0",
      "item": {
        "type": "paragraph",
        "id": "61cd33040cee88b0",
        "text": "Eval:\n\n"
      },
      "date": 1395602212303
    },
    {
      "type": "edit",
      "id": "4b3c905efb40fb22",
      "item": {
        "type": "paragraph",
        "id": "4b3c905efb40fb22",
        "text": "Update:\n\n"
      },
      "date": 1395602219889
    },
    {
      "type": "edit",
      "id": "1650a29533a3bedb",
      "item": {
        "type": "paragraph",
        "id": "1650a29533a3bedb",
        "text": "Forward:\n\n"
      },
      "date": 1395602226512
    },
    {
      "item": {
        "type": "factory",
        "id": "0470414e90c01bb6"
      },
      "id": "0470414e90c01bb6",
      "type": "add",
      "after": "bf396890028d5b89",
      "date": 1395602279481
    },
    {
      "type": "edit",
      "id": "0470414e90c01bb6",
      "item": {
        "type": "method",
        "id": "0470414e90c01bb6",
        "text": "342 X\n455 Y"
      },
      "date": 1395602298994
    },
    {
      "type": "move",
      "order": [
        "1c1e4a5953c834e8",
        "bf3aafa64e19baae",
        "b7a75b775983e110",
        "aa914e6923fc4774",
        "a0e83025142af8f9",
        "c6566fbce3424cd3",
        "a28668db267ac116",
        "145666e442675de2",
        "d96c1d976f313cd3",
        "1b5c3c6bfb69ebea",
        "3c5720e450eb36a6",
        "5ae85650eaef9e06",
        "4cf16fa5efdce362",
        "5e5a04d7729aadd0",
        "94d241494413a773",
        "6d3f4b78a49fd8e4",
        "eeb1beff9fa80f8e",
        "eaeeeee5218fea0b",
        "f212c611fb9a1b83",
        "ccf528cbce0d4dd6",
        "cfad9075eb04b9aa",
        "6fd10d9a45d7a50d",
        "0b9c1288c29f3401",
        "dd17a5d9053ecbd1",
        "89c2e40fce73128c",
        "0470414e90c01bb6",
        "51968346b569b3a6",
        "a671a530ea545e35",
        "049069bf37ec7356",
        "56d977e2aeec4182",
        "78a6ce0217a245ea",
        "aa78639b613a23ca",
        "9230576f619f0cb2",
        "61cd33040cee88b0",
        "dc3d484509e0f301",
        "2229f192fc64dd70",
        "2a95e92e520cc6ad",
        "4b3c905efb40fb22",
        "798c5063b4e8ba9a",
        "92b0d568fcc70768",
        "1650a29533a3bedb",
        "9e18ca43648b2f75",
        "bf396890028d5b89"
      ],
      "id": "0470414e90c01bb6",
      "date": 1395602309126
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "X\nY\n0.001 Scale\nCALC X-100*Scale\nSHOW DX\nCALC 100-Y*Scale\nSHOW DY"
      },
      "date": 1395602332144
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "X\nY\n0.001 Scale\nCALC X-100*Scale\nSUM DX\nCALC 100-Y*Scale\nSUM DY"
      },
      "date": 1395602352664
    },
    {
      "type": "edit",
      "id": "0470414e90c01bb6",
      "item": {
        "type": "method",
        "id": "0470414e90c01bb6",
        "text": "342 x\n455 y"
      },
      "date": 1395602369998
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "x\ny\n0.001 scale\nCALC x-100*scale\nSUM dx\nCALC 100-y*scale\nSUM dy"
      },
      "date": 1395602412983
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "x\ny\n0.001 scale\nCALC (x-100)*scale\nSUM dx\nCALC 100-y*scale\nSUM dy"
      },
      "date": 1395602464682
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "x\ny\n0.1 scale\nCALC (x-100)*scale\nSUM dx\nCALC (100-y)*scale\nSUM dy"
      },
      "date": 1395602480268
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "x\ny\n0.01 scale\nCALC (x-100)*scale\nSUM dx\nCALC (100-y)*scale\nSUM dy"
      },
      "date": 1395602488492
    },
    {
      "type": "edit",
      "id": "a671a530ea545e35",
      "item": {
        "type": "method",
        "id": "a671a530ea545e35",
        "text": "x\ny\n0.01 scale\nCALC (x-100)*scale\nSHOW dx\nCALC (100-y)*scale\nSHOW dy"
      },
      "date": 1395602512034
    },
    {
      "type": "edit",
      "id": "798c5063b4e8ba9a",
      "item": {
        "type": "paragraph",
        "id": "798c5063b4e8ba9a",
        "text": "Neither of these cause the redisplay of content beyond that of the Rollup or Reduce plugin. I have used general event broadcasts to synchronize displays. For example, the \"thumb\" event allows related Data, Method, Line and Radar plugins to track scrubbing of one or another's focus."
      },
      "date": 1395602727155
    },
    {
      "item": {
        "type": "paragraph",
        "id": "eb60fb06aedb57a6",
        "text": ""
      },
      "id": "eb60fb06aedb57a6",
      "type": "add",
      "after": "798c5063b4e8ba9a",
      "date": 1395602727664
    },
    {
      "type": "edit",
      "id": "eb60fb06aedb57a6",
      "item": {
        "type": "paragraph",
        "id": "eb60fb06aedb57a6",
        "text": "[[About Rollup Plugin]]"
      },
      "date": 1395602736016
    },
    {
      "item": {
        "type": "paragraph",
        "id": "49a090c5c3edaf89",
        "text": ""
      },
      "id": "49a090c5c3edaf89",
      "type": "add",
      "after": "eb60fb06aedb57a6",
      "date": 1395602736523
    },
    {
      "type": "edit",
      "id": "49a090c5c3edaf89",
      "item": {
        "type": "paragraph",
        "id": "49a090c5c3edaf89",
        "text": "[[About Reduce Plugin]]"
      },
      "date": 1395602744218
    },
    {
      "type": "edit",
      "id": "92b0d568fcc70768",
      "item": {
        "type": "paragraph",
        "id": "92b0d568fcc70768",
        "text": "The Txtzyme plugin also has some hack to cause a Line plugin to accept new data when it flows up over websockets from attached Txtzyme hardware. "
      },
      "date": 1395602761289
    },
    {
      "item": {
        "type": "paragraph",
        "id": "c9bbe8974f86f1d0",
        "text": ""
      },
      "id": "c9bbe8974f86f1d0",
      "type": "add",
      "after": "92b0d568fcc70768",
      "date": 1395602761797
    },
    {
      "type": "edit",
      "id": "c9bbe8974f86f1d0",
      "item": {
        "type": "paragraph",
        "id": "c9bbe8974f86f1d0",
        "text": "[[About Txtzyme Plugin]]"
      },
      "date": 1395602774776
    },
    {
      "item": {
        "type": "paragraph",
        "id": "c8797c0ebb99cff9",
        "text": ""
      },
      "id": "c8797c0ebb99cff9",
      "type": "add",
      "after": "c9bbe8974f86f1d0",
      "date": 1395602775284
    },
    {
      "type": "edit",
      "id": "c8797c0ebb99cff9",
      "item": {
        "type": "paragraph",
        "id": "c8797c0ebb99cff9",
        "text": "[[About Line Plugin]]"
      },
      "date": 1395602782344
    },
    {
      "type": "remove",
      "id": "c8797c0ebb99cff9",
      "date": 1395602801049
    },
    {
      "type": "edit",
      "id": "b7a75b775983e110",
      "item": {
        "type": "reference",
        "id": "b7a75b775983e110",
        "site": "panels.fed.wiki.org",
        "slug": "control-panel-museum",
        "title": "Control Panel Museum",
        "text": "<i>Control panels display diverse information and respond literally to a touch of a button. Here we collect panels we've seen and sometimes bring them back to life with simulations."
      },
      "date": 1396064595543
    },
    {
      "type": "edit",
      "id": "b7a75b775983e110",
      "item": {
        "type": "reference",
        "id": "b7a75b775983e110",
        "site": "panels.fed.wiki.org",
        "slug": "control-panel-museum",
        "title": "Control Panel Museum",
        "text": "<i>Control panels display diverse information and respond literally to a touch of a button. We will collect panels and sometimes bring them back to life with simulations."
      },
      "date": 1396064662744
    },
    {
      "type": "edit",
      "id": "b7a75b775983e110",
      "item": {
        "type": "reference",
        "id": "b7a75b775983e110",
        "site": "panels.fed.wiki.org",
        "slug": "control-panel-museum",
        "title": "Control Panel Museum",
        "text": "Control panels display diverse information and respond literally to a touch of a button. We will collect panels and sometimes bring them back to life with simulations."
      },
      "date": 1420344912926
    },
    {
      "type": "edit",
      "id": "145666e442675de2",
      "item": {
        "type": "html",
        "id": "145666e442675de2",
        "text": "<b>Adam: Maybe you can describe the simplest possible example that would prove we had succeeded?"
      },
      "date": 1420344926528
    },
    {
      "type": "edit",
      "id": "94d241494413a773",
      "item": {
        "type": "html",
        "id": "94d241494413a773",
        "text": "<b> Adam: What if we build this little demo of a car trying to stay on a track?</b> [http://worrydream.com/LadderOfAbstraction/ worrydream]"
      },
      "date": 1420344933606
    },
    {
      "type": "edit",
      "id": "78a6ce0217a245ea",
      "item": {
        "type": "html",
        "id": "78a6ce0217a245ea",
        "text": "<b> Adam: Your suggestion on the animating dot is spot-on. How does the method plugin currently work?"
      },
      "date": 1420344945857
    },
    {
      "type": "fork",
      "site": "ward.fed.wiki.org",
      "date": 1707844977570
    }
  ]
}