{
  "title": "TraitBuilderEnhancer",
  "story": [
    {
      "type": "paragraph",
      "id": "ff73993d3302dadc",
      "text": "I am here to extend the ShiftClassBuilder when creating a [[Trait]] or TraitedClass.\n"
    },
    {
      "type": "paragraph",
      "id": "990d2e6644235d4a",
      "text": "My class side method #isApplicableFor: is responsible of detecting if we are creating a trait or a class using a trait.\n\nI create the new class using the TraitedMetaclass or MetaclassForTraits.\nI inject the methods from TraitedClass to the generated metaclass. \n\nAlso I add all the slots and methods in the trait composition."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "TraitBuilderEnhancer",
        "story": []
      },
      "date": 1662443208582
    },
    {
      "item": {
        "type": "factory",
        "id": "ff73993d3302dadc"
      },
      "id": "ff73993d3302dadc",
      "type": "add",
      "date": 1662443210042
    },
    {
      "type": "edit",
      "id": "ff73993d3302dadc",
      "item": {
        "type": "paragraph",
        "id": "ff73993d3302dadc",
        "text": "I am here to extend the ShiftClassBuilder when creating a Trait or TraitedClass.\nMy class side method #isApplicableFor: is responsible of detecting if we are creating a trait or a class using a trait.\n\nI create the new class using the TraitedMetaclass or MetaclassForTraits.\nI inject the methods from TraitedClass to the generated metaclass. \n\nAlso I add all the slots and methods in the trait composition."
      },
      "date": 1662443211658
    },
    {
      "type": "edit",
      "id": "ff73993d3302dadc",
      "item": {
        "type": "paragraph",
        "id": "ff73993d3302dadc",
        "text": "I am here to extend the ShiftClassBuilder when creating a [[Trait]] or TraitedClass.\n"
      },
      "date": 1662443253990
    },
    {
      "type": "add",
      "id": "990d2e6644235d4a",
      "item": {
        "type": "paragraph",
        "id": "990d2e6644235d4a",
        "text": "My class side method #isApplicableFor: is responsible of detecting if we are creating a trait or a class using a trait.\n\nI create the new class using the TraitedMetaclass or MetaclassForTraits.\nI inject the methods from TraitedClass to the generated metaclass. \n\nAlso I add all the slots and methods in the trait composition."
      },
      "after": "ff73993d3302dadc",
      "date": 1662443254800
    }
  ]
}