{
  "title": "Cypress",
  "story": [
    {
      "type": "paragraph",
      "id": "90853bfa4d650a73",
      "text": "Presented by [[Amir Rustamzadeh]], Sr. Engineer at Cypress.io [https://www.cypress.io/ site]"
    },
    {
      "type": "video",
      "id": "a3c62de368f5bfa6",
      "text": "YOUTUBE LcGHiFnBh3Y\nCypress in a Nutshell webcast"
    },
    {
      "type": "paragraph",
      "id": "25620af36fb8648b",
      "text": "hi everyone thanks for joining me for this Cyprus in a nutshell webcast my name is Amir one of the engineers on the Cyprus team I'm Michael for today's to help you get up and running with Cyprus quickly and to also give you a nice general overview of what the tool can do for you we've got a lot to cover so let's go and get started now prefer we get down to the nitty gritty details let's take a quick minute to talk about what Cyprus is many of you probably already have an idea but for those that are just getting acquainted let's take a quick second first and foremost"
    },
    {
      "type": "paragraph",
      "id": "7849aa69b6808b2f",
      "text": "Cyprus is a tool for reliably testing anything that runs in a web browser it specially shines with testing modern web applications like the ones written in react view and angular and so on but it's important to mention that Cyprus is completely tech stack agnostic it doesn't matter what you how and what you've written your app in if it runs in the browser the goal of Cyprus is to help you test it and best of all Cyprus is free and open source under the MIT license you can do with it as you wish for kit it's open source but even more importantly is the mission and the goal of Cyprus any good projects should have a solid mission backing it and the goal of Cyprus is to not just be another testing tool the mission is to create a testing experience that's truly enjoyable and will make you actually want to write tests we want to foster a productive ecosystem that actually champions a process that actually works now let's take a look at some of the non-technical reasons of why you would consider adopting Cyprus we'll get to the technical reasons later on in the presentation but for now let's just look at the non-technical ones well Cyprus has been growing in popularity fairly rapidly currently the Cyprus repository has over 13,000 stars on github and is also being downloaded over five hundred and thirty thousand times on a weekly basis from NPM and as I said this this growth has been fairly rapid last year we came out of beta and we've been seeing hockey style growth this is actually a graph of of how the github stars have been progressing another awesome thing that happened recently was that thought works technology radar identified Cyprus as the number one tool to adopt now this technology radar what it does is that it it follows the maturation of a piece of technology over time and they assess you know how how things are going as the technology is progressing and it was great to see Cyprus identified as the number one to it tool to adopt especially in comparison to other great testing tools like Tess cafe and puppeteer we're also seeing a growing demand for testing skills specifically Cyprus skills within the job market and this is by no accident there's now more demand than ever to create very polished user experiences so any time spent learning Cyprus is time well spent I should also mention that Cyprus is a sustainable open-source project since its popular we receive a lot of feedback from the community our issues section is filled with great contributions feedbacks discourse there's a lot of good conversations going on there and we're always open to more but more importantly Cyprus the project is backed by Cyprus I owe the company which consists of a team that's laser focus on creating the absolute best testing tool for day industry these are folks that come in every day and are absolutely focused on hearing our users and developing new features ok now you've heard a little bit about what Cyprus is and why you might want to adopt it now it's time to dive in and start using it first and foremost let's talk about setup and installation well it's very simple with Cyprus all you got to do is NPM install Cyprus it's just this one line there's no additional tools or binaries or anything else to setup or configure this is it you do this and you get one tool that handles everything for you once you do that you're gonna get two things you're going to get the Cypress desktop app this is the Cypress GUI that you will use in your day to day work floo and you would also get the cyprus CLI tool which you will use to start cyprus but also to run cyprus within your CI environment and we'll see how these two programs work throughout this presentation let's talk about the cyprus desktop app first well how do we open it cyprus is binary in your node module so you can use MPX to call the cyprus open command to bring up cyprus and when you do that for the very first time especially in a fresh clean new project cyprus is going to scaffold to cyprus directory which includes all the various directories that are sector specific which you can fill to configure and modify the behavior of cyprus and we'll get to these these directories and though in a little bit for example the cyprus scaffolding looks like this within this cyprus folder that gets placed in the top of your project directory you're going to have a fixtures folder an integration foale or a plugins folder and a support folder as i said we'll get to talk about you know these specific directories but the integration folder is the most important one here because that's the one you're going to be putting your test files into and don't worry if you don't like the naming of this folder because it's fully configurable okay so this is how the cyprus desktop GUI looks like when you bring it up it's going to show you a list of all the test files within your cyprus integration or test file directory and you can go ahead and start using it by clicking one of the suspect files here so for us we're gonna click on that first spec file action spec jeaious and let's see what happens well when you do that cyprus is going to bring up a full version of chrome and this is how the cyprus test runner looks like we're going to bring in your app and start running in running all the tests that you have written in that spec file this is how the experience looks like but let's break it apart and look at its various traits so on the right hand side is your app your app gets pulled in it within an iframe and everything else you see is you know the Cypress test runner in the left hand side we have the Cypress command log which shows every single test within your spec file and if you click on one of these tests it will show you every single command that took place within that test so everything that happened in thin your test you can see right here within the command log and the cool part here and this is one of my personal favorite features it's this ability to time travel throughout your test as you're scrubbing your mouse or you know selecting one of the commands within the command log"
    },
    {
      "type": "paragraph",
      "id": "206ce9f24c6e4d85",
      "text": "Cypress takes a dom snapshot after every single action it takes so you can easily travel through the actions that your test took to see the state of your app at that point in time this is not just fun to watch but immensely helpful for seeing what your tests are actually doing and very useful when you're debugging now let's go ahead and take a look at the Cypress API and this is one of the reasons Cypress is a joy to use because the API is very intuitive and almost English like let's go ahead and look at look at some examples and how we use it well you can access the Cypress API via this CY global that's made available within your test file so you can do CY dot my command to use a Cypress command and this is all very well documented in our Docs which that link is there right here for you so let's take a look at an example you know we can use this Get Command to get an element on the page for example button and once we get this button we can make actions against it and also make assertions against it so for example here I'm getting the button I'm clicking the button then I'm making an assertion that this button now has a particular class this is a simple use case but you can do even more advanced things like making a request against an API endpoint then grabbing the response body and an assertion against that response body Cyprus commands are very easy and simple to use but their functionality is actually very rich so they typically accept multiple types of arguments that expand their potential use cases at the important thing to point out about the Cyprus API is that it's a chaining API and handles a subject that gets passed through this this chain so let's let's clarify that a bit so when I when I you know use this git command to grab that button element the button element becomes the subject and this subject is going to get passed through this chain of commands that you can you know use to manipulate the subject and make assertions towards it the other important thing to know about the Cyprus API and this is very critical and one of the biggest differentiating factors about Cyprus when you're typing you know sucker's test means writing Cyprus tests you know Cyprus is not going to imperative Lea execute the commands that you are telling it what it's going to do is it's actually going to make a pretty simplistic aliy a to do list of everything you ask of it and it's going to run everything you've asked of it in the order you've asked of it in the exact order you've asked of it so if things are going to run in a deterministic manner and this is very important because the Turman ism is crucial to you know accomplishing Flake freeness in your tests another thing to know about the Cyprus API and this is one of the things I really love about it is how it has this ability to automatically wait when making assertions so for example when we click this button and then we make this assertion that it has this class Cyprus is going to automatically wait for this particular assertion to come to life within the Dom I don't have to add any weights or sleeps or anything like that in my tests anymore because Cyprus will automatically check the state of the world in my app - to see if this assertion will pass or not and by default this you know the assertions we wait for them for four seconds this is a pragmatic time but it's fully configurable okay so now we've dived in a bit but let's go ahead and dive in deeper okay so to explore some key concepts and just for this webcast I've written this example application I call it bird board it's a simple torta crud client that no one needs and no one ever asked for but it's really gonna help us explore some concepts here yet this app is written in view it's backed by an expressed back-end it has a little API behind it and the data is stored in a  database but as I mentioned earlier is that you know Cypress is completely agnostic to your tech stack so this is all just for this example and this board app is like many other applications it has a way for users to sign up and you know for users to to log in and these are typically you know very critical pads in our application you know a you know if they don't work then many other things will work within the app so it's very important that we that we test these paths for our users okay so how can we go ahead and accomplish this with cyber's well we can go ahead and write a test for for our sign up and login process we can start things off by using the Cypress visit command to first visit the signup page then once we've done that we want to go ahead and drive the UI of our signup form to register our first user so we'll go ahead and use the get command to grab the email input box of the signup form and then we could type in our email we'll do the same thing for the password fields use the type command to type in things into input boxes and then we can grab the the signup button using its ID as the selector for the element and then we can use the click command to click that button and to finish the signup process now once the user signs up they're going to get directed to the login page so they can log in I know this isn't knowing usually when people sign up they automatically get logged in but this is just for the sake of demonstration so to ensure that the user has successfully moved from the signup process - to the login page we can check the address bar and the current location of user within within our app and we can use the the location command to get some information about the users current location within the app and we can grab the path name of their current URL and then we can make the assertion that the path name is the login page and you know we can make these assertions using this shift command there are various ways to make assertions that are well documented in our documentation but you will see us using this shift command to make quick and snappy assertions now once we've logged in the user once you're sorry we've landed on the login page wanted login the user and we can do the same process as we did with the signup page which is you know type in our email address using the type command and then clicking that login button and once we've logged in we're going to make the assertion that we've successfully landed on the board page which is the main page of the app where you can see all the all the tweets coming in okay so and and this is how it looks like this is a little video of it and it's in a loop so we can first see that we are signing up the user and we're logging in then we're landing on the main page of the app and then as you can see this is running very fast Cypress is very fast it is going to run things very quickly because it runs right alongside your application okay so I run this test once everything seems to be passing but then I run it again and it's not passing so this is a bit confusing and Cyprus is communicating that to me it's saying that you know my assertion to check that the user has moved from a successfully move from this signup page to a login page is is failing and I can see this is a happening after I make a post request to the signup API endpoint which is responding with the 400 and Cyprus is showing that to me in in the command log well how can I go about debugging this well I can go ahead and click on the post requests within the Cyprus command log and I've actually bring up dev tools Cyprus is going to output additional information about that request almost everything you need to know about that request within the dev tools command log and this is again very useful for for debugging but I think I know what's going on here so you know I'm running my tests I'm creating that user and then I'm trying to rerun rerun the test by creating that same user and my back-end is not responding properly because you know the user already exists they you know with the email amir at cyprus AO this user already exists now i could do a lot better job of communicating that in my front end and that's that's another story but right now my tests are not cleaning up after themselves you know when they're getting ran multiple times so i need to i need to handle that how can I go about doing this well Cyprus has this task command and this task command allows me to run you know JavaScript at the system level so your tests generally are going to be running within the browser they take actions against your app that's running within the browser and Cypress test runner runs alongside your application it runs within the same run loop as your application but if I use the task command I can actually run JavaScript at the system level and the reason I'm able to do this is that Cyprus also has a node server component it's no backing component which can execute my code on the system so let's go ahead and see how I can use this task a man to clean up after my first test well I can clean up by clearing my database I can have this utility you know from my server just this general purpose clear database function I wrote and then I can call that function within a task that I could declare this is how you declare tasks if this is done within the plugins directory I remember this is one of the folders that Cyprus originally scaffolded when I first started up Cyprus so I can call this command clear clear DB and this is just the general purpose function it can accept arguments and return whatever but for this example over here I'm just going to call that clear database function to clear my database and this is going to go ahead and make a request to my MongoDB to clear to clear it up so now that I've declared this task how can I go ahead about using it within my test well we can simply call the task amang within the before each hook of our test so before each time this test starts we're going to clear our database that's it done great so how can we go about optimizing that this this test further well I see this section you know line 16 through 18 this is all just for logging in the end the user and login is a pretty common thing you have to do when you're testing your application my colleagues that are working with me on this project will want to probably you know also log in with in their tests so it would be really nice if I can except encapsulate the login actions into a login command that everybody else can also use and it just really cleans up the test here so how can we go about declaring custom commands and you know and this is the end goal here by the way you know to have this custom login command where we can pass in no the users credentials and we just log in so the way we can accomplish this is by using this the Cyprus global which offers this commands API and we can add commands to it just like you're seeing here on the screen and the place that we declared this is within the commands file that's located within the support directory in your in your Cypress folder so we can declare this custom login command it's going to accept an email and a password and again this is just a general-purpose function and then we can move those actions we've got earlier into this function to encapsulate this this logic so now great things are looking looking better how can we go about furthering this test further well the other component of this test was this the signup process you know it's great to have this test so we can drive our UI and you know gain confidence that our UI is properly interacting with our back-end and everything is fine but signing up is also a thing that happens quite often but we only need to run the test against the UI once game compton confidence in it but it's not very efficient to do this over and over and over again it would be great if the user was already properly provisioned in the database so I can go ahead and you know go on with the rest of my test and you usually need some users in place to to do most of your tests typically anyways so how can we go about accomplishing this well we can go back to our trusty friend the tasks command and we can declare a new task and I'm going to declare a task for seeding the database I have this you know the seed database function I you know in my my server code base and this is simply going to provision the user that we were creating manually not manually but you know by driving the UI to create it so we're just gonna call this function to see their database do you just have a user ready when our test starts once we do this you know and inner before each hook we can call this DB tasks and we can pass in user data that we want here but you know just passing in like a you know we can store this information in like a dedicated you know file that you know that includes details about seed users or so on you know there's various ways of accomplishing this but the important thing to notice is that you know tasks commands can accept arguments for those functions that we've declared earlier great so now we are you know clearing your database and seeing our database properly and we can see everything run now all together very efficiently great so but we can go one step further and this is going to highlight another great benefit of Cypress so let's move our old log in command and rename it log in with UI because there's another way to accomplish this we can actually log in programmatically remember that Cypress again runs right alongside your application it runs within the same run loop as your application which means it has direct programmatic access to your app you can use the same code that your app uses within your test and this is immensely useful so you know to to make the login process even more efficient I can directly call the function that does the login within my application right here in this custom login command and the way I could do this is you know I can attach the instance of my app to the global window of the browser and then I can just use the window command of Cypress to access that global app instance and you know I'm using view X as the central state management of this application and if you don't know what that is it's okay it's just similar to kind of redux if you're coming from the react world but Jenna generally put is just a way to handle state within your app and since I have access to this part of my application I can dispatch that login functionality directly programmatically and you know this isn't just something to to look at and then move on to the next slide we should really take pause here because you know I'm getting the chance to use the code I've written on that that you know explains and implements the functionality of my of my application and I can reuse it within my test this is going to give me even a higher level of confidence in my end-to-end tests so over here you know again accepting you know an email password I'm going to dispatch the login action I have implemented in my application to programmatically log in my user ok and again this is how the bird board app looks like you can type in something you know your favorite hashtags and it will kind of aggregate all the tweets regarding all the hashtags you've entered in that top input box great so let's let's explore some other concepts here so so far you know we are clearing your database we're seeing your database damn burger visiting our login page you know but since we've seeded our database properly there's already a user there so we can just go ahead and login and we could do that via our custom login come in but now let's go ahead and test the actual app ok so the way the the app works is that when you first load the page it's going to make you know a request to this slash tweets endpoint and it's going to grab the tweets that we want to see regarding the hashtags that we have so you know in the backend the requests are actually being made to the Twitter API and this is a third party API generally speaking you don't want to you know test those raw api's in in your test environment you usually you know expect that these third-party aps work there's this contract that hey I don't control this system you know I am a user of this system so there's this general expectation that things are going to work and and this is generally a sound practice though there are cases where you want to test third party api's but generally you don't want to do that because you don't control that system and this is a great opportunity to to introduce stubbing so we can stop the response over tweets endpoints how can we go about doing this in Cyprus well we can start things off by using the Cyprus server command this is going to initiate a server for us to pass our request to that's going to enable stubbing then we can use the Cyprus route command and we can describe what we want the response of the tweets endpoint to be so the first argument is the is the request method type and in this case we're going to make a get request to the tweets endpoint and we want the response to be the set of tweets now where are we storing these the these that these tweets well we can use fixtures to - you know describe what the response should be and you can store fixtures within the Cyprus fixtures directory directory which was which was one of the other directories that Cyprus provision when you be first yeah started it up and we can easily refer to the the fixtures within our fixtures folder by using this pattern right here we can refer to them just by strings so we can say fix your colon tweets and the thing that comes after the colon is essentially the name of that JSON file and there are various ways to handle fixtures and we describe this all within our documentation but this is one of like you know the general purpose ways of accomplishing it so again the cui wrap command is explaining how we want this API endpoint to be stubbed and to refer to this route again in our tests we can use this as command to essentially label this route so we want to label this route as tweets just giving it a name so we can refer to it later great so then we're know we're going to you know drive the input box up top and that in our app team put some hashtags and after we do that we want to you know see the response of of that get tweets endpoint and what we can do that is we can wait for that response to return the way we can do that is using the Cypress wait command now you remember you know you could be saying well I'm here you said I don't really do have to you know do waiting anything like that in Cypress well that's true generally you don't have to but this is a different type of waiting you know we're we're waiting on this label this labeled route to return and we can do that by you know using this this string pattern here which is at tweets and this is how we refer to that label I mentioned earlier you know chained off the cypress route command and we call these aliases so we're waiting on the at tweets alias here and this refers to the tweets endpoint and once we do that once that that response is received from that request then we can go ahead and make assertions against that response body in this case we're making sure that the length of of all the data that we've received matches what we're seeing in the actual URL what's rendered in the UI and this is this is how that test test will look like now when you're establishing routes to do stubbing cypress is actually going to show that to you in the command log as well so if you notice up top here it's going to show you hey we're stubbing this slash tweets route we're using the get method and in fact it is stuff and it's also showing you the alias that we're using to refer to it and it's no it's labeled in this nice yellow color which is makes it easy to follow throughout our tests now the cypress route command is actually more more powerful it has much more functionality and i urge you to look up the documentation for it but we can even do you know do other things to simulate problematic scenarios so for example you know one of the big issues with it really you know making requests to an API endpoint is you know is how long does it take to to respond should we have a timeout you know how should our app respond when things are not working properly what if it's not getting the proper status and and so on and this is all doable with the route command so for example I can you know use this delay option to simulate a three-second delay in the response and I can even set the status of the response to be a 404 and this way I can simulate you know that problematic scenario and I can test if my app is handling it properly so for example if you might wanna you know show an error message or show a loading loading screen or so on but this is all possible with the route command and also notice that I'm handling fixtures allured differently here in the previous test I was referring to my tweets picture with that that string pattern which is fixtures : tweets but now I'm using the Cypress fixtures command to to refer to so there so there are various ways to to use fixtures here again this is the whole test test running so again I am you know clearing the database the database logging in and testing my app fully ok so now we've seen how to use Cypress in our day-to-day workflow via the Cypress desktop app but how do we run Cypress in CI you can't run the desktop app you know NCI so how do you go about running Sepphoris headless lis the way we can accomplish that is by using the Cypress run command so when using Cypress it in a headed manner we're using the Cypress open command and to run the headless Lee we use the run command now when we do run Cypress in a headless manner we do get automatic video recordings of the full test runs out of the box and this is really helpful because when you're running browser tests in CI you know you can't really see what's on in a browser right you know it's all very visual and it's really nice to see a full video recording so you can easily see what took place and especially when errors took place let's go in and take a look at how it all looks like so again we use the Cypress run command and we're running that action spec file we saw earlier and separates is going to show you now all the tests says that it's executing you know how long the tech is going to show you the test results and it's going to show you that video recording which is just an mp4 file but it's essentially everything you see in the in the browser and it includes all the aspects of the test runner as well now this brings us to the other half of the Cypress story which is the Cypress dashboard this is a purely optional and complimentary service to the Cypress test Runner and what it allows you to do is report or as we like to say record your test run results to this dashboard and it gives you much better introspection of what's going on in CI and it's a much better collaboration point as well for your team let's go ahead and take a quick look so this is how the Cypress dashboard looks like and this is the view for the Cypress project itself we use Cypress to test Cypress and it's very similar to how you know CI provider apps might look like because in this case for showing you you know the recent test runs you've had and we show you some git commit history information and how long it took you know which how many tests passed which ones didn't refer references back to your CI provider you know the context to test ran in so like know that which browser which operating system and so on one thing I like to clarify with the dashboard service is that it's completely free for open source projects also have a very generous free plan and and so anybody can really get up and running with using this service let's let's learn a little bit about it you know once you click into one of these test runs you get to see all the test spec files that ran you can see the direct you know terminal output you're used to seeing when you're running the test headless Lee just similar to you know how you would see things in CI as well you can see that full video recording we just talked about and you can share this video colleagues it's very helpful one debugging and you can speed things up or download the video if you if you would like as well so this is also very helpful for for debugging scenarios no but you know pen we were just looking at passing tests and passing tests are very boring what's more interesting is is how we see things when things go wrong and and this is really where the dashboard shines because it really organizes and presents error points and errors very nicely so yeah if you click on like this failures tab for this test run we get to see each error that took place get some more information about it even see the full stack trace and and again though we have access to you know the direct you know terminal output screenshots that took place and and also the video as well so you know you know we can actually click on you know on that air and see the screenshots that that took place at that point in time and Cyprus automatically does this it takes screenshots when things go wrong and this you know again helps you with debugging problems now the other aspect of the dashboard is it's pretty hidden there's no UI for it it's it's its ability to paralyze your test files this one of my favorite features and it's one of the first things I worked on I joined Cyprus um and by just passing this parallel flag in you know with when you're running Cyprus headless lis Cyprus will automatically figure out how to optimally load-balanced your test files across your CI machines so if you have ten CI machines provision in your environment Cyprus will optimally figure out how to distribute your test files across those those machines this is something that probably works its own full webcast and you're all interested I would love to do one just on parallelization alone now the other thing that I would really like to mention about Cyprus its documentation this is something we're really proud of and it's really one of the reasons why Cyprus has become so successful and if you're looking for a one-stop place to to start learning Cyprus it's definitely the documentation this isn't like you know what other documentation is you know software documentation you've seen the past it's not just you know a list of API commands it's really started it's really a guide and it's very prescriptive you know we offer our opinions or best practices our thoughts on various matters and we walk you through core concepts and you can read it almost like a book that's how I originally read it and then once I went over the core concepts and some of the guides that's when I you know you know went and explored the API itself we also have this example recipes repo which I urge everyone to check out and this is packed with you know tips tricks and you know and recipes for how you would handle certain situations you know this is especially helpful for figuring out how to do things you know in common scenarios like logging in or a you know so on so I really urge everyone to check this out it's packed with a lot of good information and and we also have a dedicated page to you know communicate a roadmap you know we always get asked what you guys working on what's in progress what's down the line and you can always refer to our roadmap page to check out our progress see the status of things that we put links for the issues and and and pull requests of the things we're working on and we offer you know this roadmap page for our test runner but also the dashboard service as well so if you have any questions about a roadmap check this page out first but if you have more questions feel free to reach out and Cypress due to its popularity you know and the reason why it's really popular is it's community we have a pretty active Gator channel so if you have any questions hop on their ass question someone is going to come help you out either from the community or someone on the Cypress team and if you have any problems with Cypress find any issues or bugs feel free to you know file an issue we read everything so I urge you to that if you find any any problems and one thing I'd like to point out is that you know any successful technology open source technology I should say is really owes its success to its community and this is very true for Cypress you know Cypress would not be where it's at today if it wasn't for all the feedback the great debates and just though the overall you know passion people have for Cypress so we really appreciate this and we're going to be doing more and more to help grow the community and give back to our community as well with that said this concludes you know that this webcast thanks for joining me if you have any questions feel free to reach out to me on Twitter or free failure to shoot me an email I'll be glad to help you out again thanks for joining me and I'll see you on the next quick web cast thank you"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Cypress",
        "story": []
      },
      "date": 1696920729195
    },
    {
      "id": "a3c62de368f5bfa6",
      "type": "add",
      "item": {
        "type": "video",
        "id": "a3c62de368f5bfa6",
        "text": "YOUTUBE LcGHiFnBh3Y\nCypress in a Nutshell webcast"
      },
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1696920734527
    },
    {
      "item": {
        "type": "factory",
        "id": "25620af36fb8648b"
      },
      "id": "25620af36fb8648b",
      "type": "add",
      "after": "a3c62de368f5bfa6",
      "date": 1696920740285
    },
    {
      "type": "edit",
      "id": "25620af36fb8648b",
      "item": {
        "type": "paragraph",
        "id": "25620af36fb8648b",
        "text": "hi everyone thanks for joining me for this Cyprus in a nutshell webcast my name is Amir one of the engineers on the Cyprus team I'm Michael for today's to help you get up and running with Cyprus quickly and to also give you a nice general overview of what the tool can do for you we've got a lot to cover so let's go and get started now prefer we get down to the nitty gritty details let's take a quick minute to talk about what Cyprus is many of you probably already have an idea but for those that are just getting acquainted let's take a quick second first and foremost Cyprus is a tool for reliably testing anything that runs in a web browser it specially shines with testing modern web applications like the ones written in react view and angular and so on but it's important to mention that Cyprus is completely tech stack agnostic it doesn't matter what you how and what you've written your app in if it runs in the browser the goal of Cyprus is to help you test it and best of all Cyprus is free and open source under the MIT license you can do with it as you wish for kit it's open source but even more importantly is the mission and the goal of Cyprus any good projects should have a solid mission backing it and the goal of Cyprus is to not just be another testing tool the mission is to create a testing experience that's truly enjoyable and will make you actually want to write tests we want to foster a productive ecosystem that actually champions a process that actually works now let's take a look at some of the non-technical reasons of why you would consider adopting Cyprus we'll get to the technical reasons later on in the presentation but for now let's just look at the non-technical ones well Cyprus has been growing in popularity fairly rapidly currently the Cyprus repository has over 13,000 stars on github and is also being downloaded over five hundred and thirty thousand times on a weekly basis from NPM and as I said this this growth has been fairly rapid last year we came out of beta and we've been seeing hockey style growth this is actually a graph of of how the github stars have been progressing another awesome thing that happened recently was that thought works technology radar identified Cyprus as the number one tool to adopt now this technology radar what it does is that it it follows the maturation of a piece of technology over time and they assess you know how how things are going as the technology is progressing and it was great to see Cyprus identified as the number one to it tool to adopt especially in comparison to other great testing tools like Tess cafe and puppeteer we're also seeing a growing demand for testing skills specifically Cyprus skills within the job market and this is by no accident there's now more demand than ever to create very polished user experiences so any time spent learning Cyprus is time well spent I should also mention that Cyprus is a sustainable open-source project since its popular we receive a lot of feedback from the community our issues section is filled with great contributions feedbacks discourse there's a lot of good conversations going on there and we're always open to more but more importantly Cyprus the project is backed by Cyprus I owe the company which consists of a team that's laser focus on creating the absolute best testing tool for day industry these are folks that come in every day and are absolutely focused on hearing our users and developing new features ok now you've heard a little bit about what Cyprus is and why you might want to adopt it now it's time to dive in and start using it first and foremost let's talk about setup and installation well it's very simple with Cyprus all you got to do is NPM install Cyprus it's just this one line there's no additional tools or binaries or anything else to setup or configure this is it you do this and you get one tool that handles everything for you once you do that you're gonna get two things you're going to get the Cypress desktop app this is the Cypress GUI that you will use in your day to day work floo and you would also get the cyprus CLI tool which you will use to start cyprus but also to run cyprus within your CI environment and we'll see how these two programs work throughout this presentation let's talk about the cyprus desktop app first well how do we open it cyprus is binary in your node module so you can use MPX to call the cyprus open command to bring up cyprus and when you do that for the very first time especially in a fresh clean new project cyprus is going to scaffold to cyprus directory which includes all the various directories that are sector specific which you can fill to configure and modify the behavior of cyprus and we'll get to these these directories and though in a little bit for example the cyprus scaffolding looks like this within this cyprus folder that gets placed in the top of your project directory you're going to have a fixtures folder an integration foale or a plugins folder and a support folder as i said we'll get to talk about you know these specific directories but the integration folder is the most important one here because that's the one you're going to be putting your test files into and don't worry if you don't like the naming of this folder because it's fully configurable okay so this is how the cyprus desktop GUI looks like when you bring it up it's going to show you a list of all the test files within your cyprus integration or test file directory and you can go ahead and start using it by clicking one of the suspect files here so for us we're gonna click on that first spec file action spec jeaious and let's see what happens well when you do that cyprus is going to bring up a full version of chrome and this is how the cyprus test runner looks like we're going to bring in your app and start running in running all the tests that you have written in that spec file this is how the experience looks like but let's break it apart and look at its various traits so on the right hand side is your app your app gets pulled in it within an iframe and everything else you see is you know the Cypress test runner in the left hand side we have the Cypress command log which shows every single test within your spec file and if you click on one of these tests it will show you every single command that took place within that test so everything that happened in thin your test you can see right here within the command log and the cool part here and this is one of my personal favorite features it's this ability to time travel throughout your test as you're scrubbing your mouse or you know selecting one of the commands within the command log Cypress takes a dom snapshot after every single action it takes so you can easily travel through the actions that your test took to see the state of your app at that point in time this is not just fun to watch but immensely helpful for seeing what your tests are actually doing and very useful when you're debugging now let's go ahead and take a look at the Cypress API and this is one of the reasons Cypress is a joy to use because the API is very intuitive and almost English like let's go ahead and look at look at some examples and how we use it well you can access the Cypress API via this CY global that's made available within your test file so you can do CY dot my command to use a Cypress command and this is all very well documented in our Docs which that link is there right here for you so let's take a look at an example you know we can use this Get Command to get an element on the page for example button and once we get this button we can make actions against it and also make assertions against it so for example here I'm getting the button I'm clicking the button then I'm making an assertion that this button now has a particular class this is a simple use case but you can do even more advanced things like making a request against an API endpoint then grabbing the response body and an assertion against that response body Cyprus commands are very easy and simple to use but their functionality is actually very rich so they typically accept multiple types of arguments that expand their potential use cases at the important thing to point out about the Cyprus API is that it's a chaining API and handles a subject that gets passed through this this chain so let's let's clarify that a bit so when I when I you know use this git command to grab that button element the button element becomes the subject and this subject is going to get passed through this chain of commands that you can you know use to manipulate the subject and make assertions towards it the other important thing to know about the Cyprus API and this is very critical and one of the biggest differentiating factors about Cyprus when you're typing you know sucker's test means writing Cyprus tests you know Cyprus is not going to imperative Lea execute the commands that you are telling it what it's going to do is it's actually going to make a pretty simplistic aliy a to do list of everything you ask of it and it's going to run everything you've asked of it in the order you've asked of it in the exact order you've asked of it so if things are going to run in a deterministic manner and this is very important because the Turman ism is crucial to you know accomplishing Flake freeness in your tests another thing to know about the Cyprus API and this is one of the things I really love about it is how it has this ability to automatically wait when making assertions so for example when we click this button and then we make this assertion that it has this class Cyprus is going to automatically wait for this particular assertion to come to life within the Dom I don't have to add any weights or sleeps or anything like that in my tests anymore because Cyprus will automatically check the state of the world in my app - to see if this assertion will pass or not and by default this you know the assertions we wait for them for four seconds this is a pragmatic time but it's fully configurable okay so now we've dived in a bit but let's go ahead and dive in deeper okay so to explore some key concepts and just for this webcast I've written this example application I call it bird board it's a simple torta crud client that no one needs and no one ever asked for but it's really gonna help us explore some concepts here yet this app is written in view it's backed by an expressed back-end it has a little API behind it and the data is stored in a  database but as I mentioned earlier is that you know Cypress is completely agnostic to your tech stack so this is all just for this example and this board app is like many other applications it has a way for users to sign up and you know for users to to log in and these are typically you know very critical pads in our application you know a you know if they don't work then many other things will work within the app so it's very important that we that we test these paths for our users okay so how can we go ahead and accomplish this with cyber's well we can go ahead and write a test for for our sign up and login process we can start things off by using the Cypress visit command to first visit the signup page then once we've done that we want to go ahead and drive the UI of our signup form to register our first user so we'll go ahead and use the get command to grab the email input box of the signup form and then we could type in our email we'll do the same thing for the password fields use the type command to type in things into input boxes and then we can grab the the signup button using its ID as the selector for the element and then we can use the click command to click that button and to finish the signup process now once the user signs up they're going to get directed to the login page so they can log in I know this isn't knowing usually when people sign up they automatically get logged in but this is just for the sake of demonstration so to ensure that the user has successfully moved from the signup process - to the login page we can check the address bar and the current location of user within within our app and we can use the the location command to get some information about the users current location within the app and we can grab the path name of their current URL and then we can make the assertion that the path name is the login page and you know we can make these assertions using this shift command there are various ways to make assertions that are well documented in our documentation but you will see us using this shift command to make quick and snappy assertions now once we've logged in the user once you're sorry we've landed on the login page wanted login the user and we can do the same process as we did with the signup page which is you know type in our email address using the type command and then clicking that login button and once we've logged in we're going to make the assertion that we've successfully landed on the board page which is the main page of the app where you can see all the all the tweets coming in okay so and and this is how it looks like this is a little video of it and it's in a loop so we can first see that we are signing up the user and we're logging in then we're landing on the main page of the app and then as you can see this is running very fast Cypress is very fast it is going to run things very quickly because it runs right alongside your application okay so I run this test once everything seems to be passing but then I run it again and it's not passing so this is a bit confusing and Cyprus is communicating that to me it's saying that you know my assertion to check that the user has moved from a successfully move from this signup page to a login page is is failing and I can see this is a happening after I make a post request to the signup API endpoint which is responding with the 400 and Cyprus is showing that to me in in the command log well how can I go about debugging this well I can go ahead and click on the post requests within the Cyprus command log and I've actually bring up dev tools Cyprus is going to output additional information about that request almost everything you need to know about that request within the dev tools command log and this is again very useful for for debugging but I think I know what's going on here so you know I'm running my tests I'm creating that user and then I'm trying to rerun rerun the test by creating that same user and my back-end is not responding properly because you know the user already exists they you know with the email amir at cyprus AO this user already exists now i could do a lot better job of communicating that in my front end and that's that's another story but right now my tests are not cleaning up after themselves you know when they're getting ran multiple times so i need to i need to handle that how can I go about doing this well Cyprus has this task command and this task command allows me to run you know JavaScript at the system level so your tests generally are going to be running within the browser they take actions against your app that's running within the browser and Cypress test runner runs alongside your application it runs within the same run loop as your application but if I use the task command I can actually run JavaScript at the system level and the reason I'm able to do this is that Cyprus also has a node server component it's no backing component which can execute my code on the system so let's go ahead and see how I can use this task a man to clean up after my first test well I can clean up by clearing my database I can have this utility you know from my server just this general purpose clear database function I wrote and then I can call that function within a task that I could declare this is how you declare tasks if this is done within the plugins directory I remember this is one of the folders that Cyprus originally scaffolded when I first started up Cyprus so I can call this command clear clear DB and this is just the general purpose function it can accept arguments and return whatever but for this example over here I'm just going to call that clear database function to clear my database and this is going to go ahead and make a request to my MongoDB to clear to clear it up so now that I've declared this task how can I go ahead about using it within my test well we can simply call the task amang within the before each hook of our test so before each time this test starts we're going to clear our database that's it done great so how can we go about optimizing that this this test further well I see this section you know line 16 through 18 this is all just for logging in the end the user and login is a pretty common thing you have to do when you're testing your application my colleagues that are working with me on this project will want to probably you know also log in with in their tests so it would be really nice if I can except encapsulate the login actions into a login command that everybody else can also use and it just really cleans up the test here so how can we go about declaring custom commands and you know and this is the end goal here by the way you know to have this custom login command where we can pass in no the users credentials and we just log in so the way we can accomplish this is by using this the Cyprus global which offers this commands API and we can add commands to it just like you're seeing here on the screen and the place that we declared this is within the commands file that's located within the support directory in your in your Cypress folder so we can declare this custom login command it's going to accept an email and a password and again this is just a general-purpose function and then we can move those actions we've got earlier into this function to encapsulate this this logic so now great things are looking looking better how can we go about furthering this test further well the other component of this test was this the signup process you know it's great to have this test so we can drive our UI and you know gain confidence that our UI is properly interacting with our back-end and everything is fine but signing up is also a thing that happens quite often but we only need to run the test against the UI once game compton confidence in it but it's not very efficient to do this over and over and over again it would be great if the user was already properly provisioned in the database so I can go ahead and you know go on with the rest of my test and you usually need some users in place to to do most of your tests typically anyways so how can we go about accomplishing this well we can go back to our trusty friend the tasks command and we can declare a new task and I'm going to declare a task for seeding the database I have this you know the seed database function I you know in my my server code base and this is simply going to provision the user that we were creating manually not manually but you know by driving the UI to create it so we're just gonna call this function to see their database do you just have a user ready when our test starts once we do this you know and inner before each hook we can call this DB tasks and we can pass in user data that we want here but you know just passing in like a you know we can store this information in like a dedicated you know file that you know that includes details about seed users or so on you know there's various ways of accomplishing this but the important thing to notice is that you know tasks commands can accept arguments for those functions that we've declared earlier great so now we are you know clearing your database and seeing our database properly and we can see everything run now all together very efficiently great so but we can go one step further and this is going to highlight another great benefit of Cypress so let's move our old log in command and rename it log in with UI because there's another way to accomplish this we can actually log in programmatically remember that Cypress again runs right alongside your application it runs within the same run loop as your application which means it has direct programmatic access to your app you can use the same code that your app uses within your test and this is immensely useful so you know to to make the login process even more efficient I can directly call the function that does the login within my application right here in this custom login command and the way I could do this is you know I can attach the instance of my app to the global window of the browser and then I can just use the window command of Cypress to access that global app instance and you know I'm using view X as the central state management of this application and if you don't know what that is it's okay it's just similar to kind of redux if you're coming from the react world but Jenna generally put is just a way to handle state within your app and since I have access to this part of my application I can dispatch that login functionality directly programmatically and you know this isn't just something to to look at and then move on to the next slide we should really take pause here because you know I'm getting the chance to use the code I've written on that that you know explains and implements the functionality of my of my application and I can reuse it within my test this is going to give me even a higher level of confidence in my end-to-end tests so over here you know again accepting you know an email password I'm going to dispatch the login action I have implemented in my application to programmatically log in my user ok and again this is how the bird board app looks like you can type in something you know your favorite hashtags and it will kind of aggregate all the tweets regarding all the hashtags you've entered in that top input box great so let's let's explore some other concepts here so so far you know we are clearing your database we're seeing your database damn burger visiting our login page you know but since we've seeded our database properly there's already a user there so we can just go ahead and login and we could do that via our custom login come in but now let's go ahead and test the actual app ok so the way the the app works is that when you first load the page it's going to make you know a request to this slash tweets endpoint and it's going to grab the tweets that we want to see regarding the hashtags that we have so you know in the backend the requests are actually being made to the Twitter API and this is a third party API generally speaking you don't want to you know test those raw api's in in your test environment you usually you know expect that these third-party aps work there's this contract that hey I don't control this system you know I am a user of this system so there's this general expectation that things are going to work and and this is generally a sound practice though there are cases where you want to test third party api's but generally you don't want to do that because you don't control that system and this is a great opportunity to to introduce stubbing so we can stop the response over tweets endpoints how can we go about doing this in Cyprus well we can start things off by using the Cyprus server command this is going to initiate a server for us to pass our request to that's going to enable stubbing then we can use the Cyprus route command and we can describe what we want the response of the tweets endpoint to be so the first argument is the is the request method type and in this case we're going to make a get request to the tweets endpoint and we want the response to be the set of tweets now where are we storing these the these that these tweets well we can use fixtures to - you know describe what the response should be and you can store fixtures within the Cyprus fixtures directory directory which was which was one of the other directories that Cyprus provision when you be first yeah started it up and we can easily refer to the the fixtures within our fixtures folder by using this pattern right here we can refer to them just by strings so we can say fix your colon tweets and the thing that comes after the colon is essentially the name of that JSON file and there are various ways to handle fixtures and we describe this all within our documentation but this is one of like you know the general purpose ways of accomplishing it so again the cui wrap command is explaining how we want this API endpoint to be stubbed and to refer to this route again in our tests we can use this as command to essentially label this route so we want to label this route as tweets just giving it a name so we can refer to it later great so then we're know we're going to you know drive the input box up top and that in our app team put some hashtags and after we do that we want to you know see the response of of that get tweets endpoint and what we can do that is we can wait for that response to return the way we can do that is using the Cypress wait command now you remember you know you could be saying well I'm here you said I don't really do have to you know do waiting anything like that in Cypress well that's true generally you don't have to but this is a different type of waiting you know we're we're waiting on this label this labeled route to return and we can do that by you know using this this string pattern here which is at tweets and this is how we refer to that label I mentioned earlier you know chained off the cypress route command and we call these aliases so we're waiting on the at tweets alias here and this refers to the tweets endpoint and once we do that once that that response is received from that request then we can go ahead and make assertions against that response body in this case we're making sure that the length of of all the data that we've received matches what we're seeing in the actual URL what's rendered in the UI and this is this is how that test test will look like now when you're establishing routes to do stubbing cypress is actually going to show that to you in the command log as well so if you notice up top here it's going to show you hey we're stubbing this slash tweets route we're using the get method and in fact it is stuff and it's also showing you the alias that we're using to refer to it and it's no it's labeled in this nice yellow color which is makes it easy to follow throughout our tests now the cypress route command is actually more more powerful it has much more functionality and i urge you to look up the documentation for it but we can even do you know do other things to simulate problematic scenarios so for example you know one of the big issues with it really you know making requests to an API endpoint is you know is how long does it take to to respond should we have a timeout you know how should our app respond when things are not working properly what if it's not getting the proper status and and so on and this is all doable with the route command so for example I can you know use this delay option to simulate a three-second delay in the response and I can even set the status of the response to be a 404 and this way I can simulate you know that problematic scenario and I can test if my app is handling it properly so for example if you might wanna you know show an error message or show a loading loading screen or so on but this is all possible with the route command and also notice that I'm handling fixtures allured differently here in the previous test I was referring to my tweets picture with that that string pattern which is fixtures : tweets but now I'm using the Cypress fixtures command to to refer to so there so there are various ways to to use fixtures here again this is the whole test test running so again I am you know clearing the database the database logging in and testing my app fully ok so now we've seen how to use Cypress in our day-to-day workflow via the Cypress desktop app but how do we run Cypress in CI you can't run the desktop app you know NCI so how do you go about running Sepphoris headless lis the way we can accomplish that is by using the Cypress run command so when using Cypress it in a headed manner we're using the Cypress open command and to run the headless Lee we use the run command now when we do run Cypress in a headless manner we do get automatic video recordings of the full test runs out of the box and this is really helpful because when you're running browser tests in CI you know you can't really see what's on in a browser right you know it's all very visual and it's really nice to see a full video recording so you can easily see what took place and especially when errors took place let's go in and take a look at how it all looks like so again we use the Cypress run command and we're running that action spec file we saw earlier and separates is going to show you now all the tests says that it's executing you know how long the tech is going to show you the test results and it's going to show you that video recording which is just an mp4 file but it's essentially everything you see in the in the browser and it includes all the aspects of the test runner as well now this brings us to the other half of the Cypress story which is the Cypress dashboard this is a purely optional and complimentary service to the Cypress test Runner and what it allows you to do is report or as we like to say record your test run results to this dashboard and it gives you much better introspection of what's going on in CI and it's a much better collaboration point as well for your team let's go ahead and take a quick look so this is how the Cypress dashboard looks like and this is the view for the Cypress project itself we use Cypress to test Cypress and it's very similar to how you know CI provider apps might look like because in this case for showing you you know the recent test runs you've had and we show you some git commit history information and how long it took you know which how many tests passed which ones didn't refer references back to your CI provider you know the context to test ran in so like know that which browser which operating system and so on one thing I like to clarify with the dashboard service is that it's completely free for open source projects also have a very generous free plan and and so anybody can really get up and running with using this service let's let's learn a little bit about it you know once you click into one of these test runs you get to see all the test spec files that ran you can see the direct you know terminal output you're used to seeing when you're running the test headless Lee just similar to you know how you would see things in CI as well you can see that full video recording we just talked about and you can share this video colleagues it's very helpful one debugging and you can speed things up or download the video if you if you would like as well so this is also very helpful for for debugging scenarios no but you know pen we were just looking at passing tests and passing tests are very boring what's more interesting is is how we see things when things go wrong and and this is really where the dashboard shines because it really organizes and presents error points and errors very nicely so yeah if you click on like this failures tab for this test run we get to see each error that took place get some more information about it even see the full stack trace and and again though we have access to you know the direct you know terminal output screenshots that took place and and also the video as well so you know you know we can actually click on you know on that air and see the screenshots that that took place at that point in time and Cyprus automatically does this it takes screenshots when things go wrong and this you know again helps you with debugging problems now the other aspect of the dashboard is it's pretty hidden there's no UI for it it's it's its ability to paralyze your test files this one of my favorite features and it's one of the first things I worked on I joined Cyprus um and by just passing this parallel flag in you know with when you're running Cyprus headless lis Cyprus will automatically figure out how to optimally load-balanced your test files across your CI machines so if you have ten CI machines provision in your environment Cyprus will optimally figure out how to distribute your test files across those those machines this is something that probably works its own full webcast and you're all interested I would love to do one just on parallelization alone now the other thing that I would really like to mention about Cyprus its documentation this is something we're really proud of and it's really one of the reasons why Cyprus has become so successful and if you're looking for a one-stop place to to start learning Cyprus it's definitely the documentation this isn't like you know what other documentation is you know software documentation you've seen the past it's not just you know a list of API commands it's really started it's really a guide and it's very prescriptive you know we offer our opinions or best practices our thoughts on various matters and we walk you through core concepts and you can read it almost like a book that's how I originally read it and then once I went over the core concepts and some of the guides that's when I you know you know went and explored the API itself we also have this example recipes repo which I urge everyone to check out and this is packed with you know tips tricks and you know and recipes for how you would handle certain situations you know this is especially helpful for figuring out how to do things you know in common scenarios like logging in or a you know so on so I really urge everyone to check this out it's packed with a lot of good information and and we also have a dedicated page to you know communicate a roadmap you know we always get asked what you guys working on what's in progress what's down the line and you can always refer to our roadmap page to check out our progress see the status of things that we put links for the issues and and and pull requests of the things we're working on and we offer you know this roadmap page for our test runner but also the dashboard service as well so if you have any questions about a roadmap check this page out first but if you have more questions feel free to reach out and Cypress due to its popularity you know and the reason why it's really popular is it's community we have a pretty active Gator channel so if you have any questions hop on their ass question someone is going to come help you out either from the community or someone on the Cypress team and if you have any problems with Cypress find any issues or bugs feel free to you know file an issue we read everything so I urge you to that if you find any any problems and one thing I'd like to point out is that you know any successful technology open source technology I should say is really owes its success to its community and this is very true for Cypress you know Cypress would not be where it's at today if it wasn't for all the feedback the great debates and just though the overall you know passion people have for Cypress so we really appreciate this and we're going to be doing more and more to help grow the community and give back to our community as well with that said this concludes you know that this webcast thanks for joining me if you have any questions feel free to reach out to me on Twitter or free failure to shoot me an email I'll be glad to help you out again thanks for joining me and I'll see you on the next quick web cast thank you"
      },
      "date": 1696920742746
    },
    {
      "id": "90853bfa4d650a73",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "90853bfa4d650a73",
        "text": "Presented by Amir Rustamzadeh, Sr. Engineer at Cypress.io"
      },
      "attribution": {
        "page": "2023-10-10"
      },
      "date": 1696920775239
    },
    {
      "type": "edit",
      "id": "90853bfa4d650a73",
      "item": {
        "type": "paragraph",
        "id": "90853bfa4d650a73",
        "text": "Presented by [[Amir Rustamzadeh]], Sr. Engineer at Cypress.io"
      },
      "date": 1696920786825
    },
    {
      "type": "edit",
      "id": "90853bfa4d650a73",
      "item": {
        "type": "paragraph",
        "id": "90853bfa4d650a73",
        "text": "Presented by [[Amir Rustamzadeh]], Sr. Engineer at Cypress.io [https://www.cypress.io/ site]"
      },
      "date": 1696920803078
    },
    {
      "type": "edit",
      "id": "25620af36fb8648b",
      "item": {
        "type": "paragraph",
        "id": "25620af36fb8648b",
        "text": "hi everyone thanks for joining me for this Cyprus in a nutshell webcast my name is Amir one of the engineers on the Cyprus team I'm Michael for today's to help you get up and running with Cyprus quickly and to also give you a nice general overview of what the tool can do for you we've got a lot to cover so let's go and get started now prefer we get down to the nitty gritty details let's take a quick minute to talk about what Cyprus is many of you probably already have an idea but for those that are just getting acquainted let's take a quick second first and foremost"
      },
      "date": 1696920848865
    },
    {
      "type": "add",
      "id": "7849aa69b6808b2f",
      "item": {
        "type": "paragraph",
        "id": "7849aa69b6808b2f",
        "text": "Cyprus is a tool for reliably testing anything that runs in a web browser it specially shines with testing modern web applications like the ones written in react view and angular and so on but it's important to mention that Cyprus is completely tech stack agnostic it doesn't matter what you how and what you've written your app in if it runs in the browser the goal of Cyprus is to help you test it and best of all Cyprus is free and open source under the MIT license you can do with it as you wish for kit it's open source but even more importantly is the mission and the goal of Cyprus any good projects should have a solid mission backing it and the goal of Cyprus is to not just be another testing tool the mission is to create a testing experience that's truly enjoyable and will make you actually want to write tests we want to foster a productive ecosystem that actually champions a process that actually works now let's take a look at some of the non-technical reasons of why you would consider adopting Cyprus we'll get to the technical reasons later on in the presentation but for now let's just look at the non-technical ones well Cyprus has been growing in popularity fairly rapidly currently the Cyprus repository has over 13,000 stars on github and is also being downloaded over five hundred and thirty thousand times on a weekly basis from NPM and as I said this this growth has been fairly rapid last year we came out of beta and we've been seeing hockey style growth this is actually a graph of of how the github stars have been progressing another awesome thing that happened recently was that thought works technology radar identified Cyprus as the number one tool to adopt now this technology radar what it does is that it it follows the maturation of a piece of technology over time and they assess you know how how things are going as the technology is progressing and it was great to see Cyprus identified as the number one to it tool to adopt especially in comparison to other great testing tools like Tess cafe and puppeteer we're also seeing a growing demand for testing skills specifically Cyprus skills within the job market and this is by no accident there's now more demand than ever to create very polished user experiences so any time spent learning Cyprus is time well spent I should also mention that Cyprus is a sustainable open-source project since its popular we receive a lot of feedback from the community our issues section is filled with great contributions feedbacks discourse there's a lot of good conversations going on there and we're always open to more but more importantly Cyprus the project is backed by Cyprus I owe the company which consists of a team that's laser focus on creating the absolute best testing tool for day industry these are folks that come in every day and are absolutely focused on hearing our users and developing new features ok now you've heard a little bit about what Cyprus is and why you might want to adopt it now it's time to dive in and start using it first and foremost let's talk about setup and installation well it's very simple with Cyprus all you got to do is NPM install Cyprus it's just this one line there's no additional tools or binaries or anything else to setup or configure this is it you do this and you get one tool that handles everything for you once you do that you're gonna get two things you're going to get the Cypress desktop app this is the Cypress GUI that you will use in your day to day work floo and you would also get the cyprus CLI tool which you will use to start cyprus but also to run cyprus within your CI environment and we'll see how these two programs work throughout this presentation let's talk about the cyprus desktop app first well how do we open it cyprus is binary in your node module so you can use MPX to call the cyprus open command to bring up cyprus and when you do that for the very first time especially in a fresh clean new project cyprus is going to scaffold to cyprus directory which includes all the various directories that are sector specific which you can fill to configure and modify the behavior of cyprus and we'll get to these these directories and though in a little bit for example the cyprus scaffolding looks like this within this cyprus folder that gets placed in the top of your project directory you're going to have a fixtures folder an integration foale or a plugins folder and a support folder as i said we'll get to talk about you know these specific directories but the integration folder is the most important one here because that's the one you're going to be putting your test files into and don't worry if you don't like the naming of this folder because it's fully configurable okay so this is how the cyprus desktop GUI looks like when you bring it up it's going to show you a list of all the test files within your cyprus integration or test file directory and you can go ahead and start using it by clicking one of the suspect files here so for us we're gonna click on that first spec file action spec jeaious and let's see what happens well when you do that cyprus is going to bring up a full version of chrome and this is how the cyprus test runner looks like we're going to bring in your app and start running in running all the tests that you have written in that spec file this is how the experience looks like but let's break it apart and look at its various traits so on the right hand side is your app your app gets pulled in it within an iframe and everything else you see is you know the Cypress test runner in the left hand side we have the Cypress command log which shows every single test within your spec file and if you click on one of these tests it will show you every single command that took place within that test so everything that happened in thin your test you can see right here within the command log and the cool part here and this is one of my personal favorite features it's this ability to time travel throughout your test as you're scrubbing your mouse or you know selecting one of the commands within the command log Cypress takes a dom snapshot after every single action it takes so you can easily travel through the actions that your test took to see the state of your app at that point in time this is not just fun to watch but immensely helpful for seeing what your tests are actually doing and very useful when you're debugging now let's go ahead and take a look at the Cypress API and this is one of the reasons Cypress is a joy to use because the API is very intuitive and almost English like let's go ahead and look at look at some examples and how we use it well you can access the Cypress API via this CY global that's made available within your test file so you can do CY dot my command to use a Cypress command and this is all very well documented in our Docs which that link is there right here for you so let's take a look at an example you know we can use this Get Command to get an element on the page for example button and once we get this button we can make actions against it and also make assertions against it so for example here I'm getting the button I'm clicking the button then I'm making an assertion that this button now has a particular class this is a simple use case but you can do even more advanced things like making a request against an API endpoint then grabbing the response body and an assertion against that response body Cyprus commands are very easy and simple to use but their functionality is actually very rich so they typically accept multiple types of arguments that expand their potential use cases at the important thing to point out about the Cyprus API is that it's a chaining API and handles a subject that gets passed through this this chain so let's let's clarify that a bit so when I when I you know use this git command to grab that button element the button element becomes the subject and this subject is going to get passed through this chain of commands that you can you know use to manipulate the subject and make assertions towards it the other important thing to know about the Cyprus API and this is very critical and one of the biggest differentiating factors about Cyprus when you're typing you know sucker's test means writing Cyprus tests you know Cyprus is not going to imperative Lea execute the commands that you are telling it what it's going to do is it's actually going to make a pretty simplistic aliy a to do list of everything you ask of it and it's going to run everything you've asked of it in the order you've asked of it in the exact order you've asked of it so if things are going to run in a deterministic manner and this is very important because the Turman ism is crucial to you know accomplishing Flake freeness in your tests another thing to know about the Cyprus API and this is one of the things I really love about it is how it has this ability to automatically wait when making assertions so for example when we click this button and then we make this assertion that it has this class Cyprus is going to automatically wait for this particular assertion to come to life within the Dom I don't have to add any weights or sleeps or anything like that in my tests anymore because Cyprus will automatically check the state of the world in my app - to see if this assertion will pass or not and by default this you know the assertions we wait for them for four seconds this is a pragmatic time but it's fully configurable okay so now we've dived in a bit but let's go ahead and dive in deeper okay so to explore some key concepts and just for this webcast I've written this example application I call it bird board it's a simple torta crud client that no one needs and no one ever asked for but it's really gonna help us explore some concepts here yet this app is written in view it's backed by an expressed back-end it has a little API behind it and the data is stored in a  database but as I mentioned earlier is that you know Cypress is completely agnostic to your tech stack so this is all just for this example and this board app is like many other applications it has a way for users to sign up and you know for users to to log in and these are typically you know very critical pads in our application you know a you know if they don't work then many other things will work within the app so it's very important that we that we test these paths for our users okay so how can we go ahead and accomplish this with cyber's well we can go ahead and write a test for for our sign up and login process we can start things off by using the Cypress visit command to first visit the signup page then once we've done that we want to go ahead and drive the UI of our signup form to register our first user so we'll go ahead and use the get command to grab the email input box of the signup form and then we could type in our email we'll do the same thing for the password fields use the type command to type in things into input boxes and then we can grab the the signup button using its ID as the selector for the element and then we can use the click command to click that button and to finish the signup process now once the user signs up they're going to get directed to the login page so they can log in I know this isn't knowing usually when people sign up they automatically get logged in but this is just for the sake of demonstration so to ensure that the user has successfully moved from the signup process - to the login page we can check the address bar and the current location of user within within our app and we can use the the location command to get some information about the users current location within the app and we can grab the path name of their current URL and then we can make the assertion that the path name is the login page and you know we can make these assertions using this shift command there are various ways to make assertions that are well documented in our documentation but you will see us using this shift command to make quick and snappy assertions now once we've logged in the user once you're sorry we've landed on the login page wanted login the user and we can do the same process as we did with the signup page which is you know type in our email address using the type command and then clicking that login button and once we've logged in we're going to make the assertion that we've successfully landed on the board page which is the main page of the app where you can see all the all the tweets coming in okay so and and this is how it looks like this is a little video of it and it's in a loop so we can first see that we are signing up the user and we're logging in then we're landing on the main page of the app and then as you can see this is running very fast Cypress is very fast it is going to run things very quickly because it runs right alongside your application okay so I run this test once everything seems to be passing but then I run it again and it's not passing so this is a bit confusing and Cyprus is communicating that to me it's saying that you know my assertion to check that the user has moved from a successfully move from this signup page to a login page is is failing and I can see this is a happening after I make a post request to the signup API endpoint which is responding with the 400 and Cyprus is showing that to me in in the command log well how can I go about debugging this well I can go ahead and click on the post requests within the Cyprus command log and I've actually bring up dev tools Cyprus is going to output additional information about that request almost everything you need to know about that request within the dev tools command log and this is again very useful for for debugging but I think I know what's going on here so you know I'm running my tests I'm creating that user and then I'm trying to rerun rerun the test by creating that same user and my back-end is not responding properly because you know the user already exists they you know with the email amir at cyprus AO this user already exists now i could do a lot better job of communicating that in my front end and that's that's another story but right now my tests are not cleaning up after themselves you know when they're getting ran multiple times so i need to i need to handle that how can I go about doing this well Cyprus has this task command and this task command allows me to run you know JavaScript at the system level so your tests generally are going to be running within the browser they take actions against your app that's running within the browser and Cypress test runner runs alongside your application it runs within the same run loop as your application but if I use the task command I can actually run JavaScript at the system level and the reason I'm able to do this is that Cyprus also has a node server component it's no backing component which can execute my code on the system so let's go ahead and see how I can use this task a man to clean up after my first test well I can clean up by clearing my database I can have this utility you know from my server just this general purpose clear database function I wrote and then I can call that function within a task that I could declare this is how you declare tasks if this is done within the plugins directory I remember this is one of the folders that Cyprus originally scaffolded when I first started up Cyprus so I can call this command clear clear DB and this is just the general purpose function it can accept arguments and return whatever but for this example over here I'm just going to call that clear database function to clear my database and this is going to go ahead and make a request to my MongoDB to clear to clear it up so now that I've declared this task how can I go ahead about using it within my test well we can simply call the task amang within the before each hook of our test so before each time this test starts we're going to clear our database that's it done great so how can we go about optimizing that this this test further well I see this section you know line 16 through 18 this is all just for logging in the end the user and login is a pretty common thing you have to do when you're testing your application my colleagues that are working with me on this project will want to probably you know also log in with in their tests so it would be really nice if I can except encapsulate the login actions into a login command that everybody else can also use and it just really cleans up the test here so how can we go about declaring custom commands and you know and this is the end goal here by the way you know to have this custom login command where we can pass in no the users credentials and we just log in so the way we can accomplish this is by using this the Cyprus global which offers this commands API and we can add commands to it just like you're seeing here on the screen and the place that we declared this is within the commands file that's located within the support directory in your in your Cypress folder so we can declare this custom login command it's going to accept an email and a password and again this is just a general-purpose function and then we can move those actions we've got earlier into this function to encapsulate this this logic so now great things are looking looking better how can we go about furthering this test further well the other component of this test was this the signup process you know it's great to have this test so we can drive our UI and you know gain confidence that our UI is properly interacting with our back-end and everything is fine but signing up is also a thing that happens quite often but we only need to run the test against the UI once game compton confidence in it but it's not very efficient to do this over and over and over again it would be great if the user was already properly provisioned in the database so I can go ahead and you know go on with the rest of my test and you usually need some users in place to to do most of your tests typically anyways so how can we go about accomplishing this well we can go back to our trusty friend the tasks command and we can declare a new task and I'm going to declare a task for seeding the database I have this you know the seed database function I you know in my my server code base and this is simply going to provision the user that we were creating manually not manually but you know by driving the UI to create it so we're just gonna call this function to see their database do you just have a user ready when our test starts once we do this you know and inner before each hook we can call this DB tasks and we can pass in user data that we want here but you know just passing in like a you know we can store this information in like a dedicated you know file that you know that includes details about seed users or so on you know there's various ways of accomplishing this but the important thing to notice is that you know tasks commands can accept arguments for those functions that we've declared earlier great so now we are you know clearing your database and seeing our database properly and we can see everything run now all together very efficiently great so but we can go one step further and this is going to highlight another great benefit of Cypress so let's move our old log in command and rename it log in with UI because there's another way to accomplish this we can actually log in programmatically remember that Cypress again runs right alongside your application it runs within the same run loop as your application which means it has direct programmatic access to your app you can use the same code that your app uses within your test and this is immensely useful so you know to to make the login process even more efficient I can directly call the function that does the login within my application right here in this custom login command and the way I could do this is you know I can attach the instance of my app to the global window of the browser and then I can just use the window command of Cypress to access that global app instance and you know I'm using view X as the central state management of this application and if you don't know what that is it's okay it's just similar to kind of redux if you're coming from the react world but Jenna generally put is just a way to handle state within your app and since I have access to this part of my application I can dispatch that login functionality directly programmatically and you know this isn't just something to to look at and then move on to the next slide we should really take pause here because you know I'm getting the chance to use the code I've written on that that you know explains and implements the functionality of my of my application and I can reuse it within my test this is going to give me even a higher level of confidence in my end-to-end tests so over here you know again accepting you know an email password I'm going to dispatch the login action I have implemented in my application to programmatically log in my user ok and again this is how the bird board app looks like you can type in something you know your favorite hashtags and it will kind of aggregate all the tweets regarding all the hashtags you've entered in that top input box great so let's let's explore some other concepts here so so far you know we are clearing your database we're seeing your database damn burger visiting our login page you know but since we've seeded our database properly there's already a user there so we can just go ahead and login and we could do that via our custom login come in but now let's go ahead and test the actual app ok so the way the the app works is that when you first load the page it's going to make you know a request to this slash tweets endpoint and it's going to grab the tweets that we want to see regarding the hashtags that we have so you know in the backend the requests are actually being made to the Twitter API and this is a third party API generally speaking you don't want to you know test those raw api's in in your test environment you usually you know expect that these third-party aps work there's this contract that hey I don't control this system you know I am a user of this system so there's this general expectation that things are going to work and and this is generally a sound practice though there are cases where you want to test third party api's but generally you don't want to do that because you don't control that system and this is a great opportunity to to introduce stubbing so we can stop the response over tweets endpoints how can we go about doing this in Cyprus well we can start things off by using the Cyprus server command this is going to initiate a server for us to pass our request to that's going to enable stubbing then we can use the Cyprus route command and we can describe what we want the response of the tweets endpoint to be so the first argument is the is the request method type and in this case we're going to make a get request to the tweets endpoint and we want the response to be the set of tweets now where are we storing these the these that these tweets well we can use fixtures to - you know describe what the response should be and you can store fixtures within the Cyprus fixtures directory directory which was which was one of the other directories that Cyprus provision when you be first yeah started it up and we can easily refer to the the fixtures within our fixtures folder by using this pattern right here we can refer to them just by strings so we can say fix your colon tweets and the thing that comes after the colon is essentially the name of that JSON file and there are various ways to handle fixtures and we describe this all within our documentation but this is one of like you know the general purpose ways of accomplishing it so again the cui wrap command is explaining how we want this API endpoint to be stubbed and to refer to this route again in our tests we can use this as command to essentially label this route so we want to label this route as tweets just giving it a name so we can refer to it later great so then we're know we're going to you know drive the input box up top and that in our app team put some hashtags and after we do that we want to you know see the response of of that get tweets endpoint and what we can do that is we can wait for that response to return the way we can do that is using the Cypress wait command now you remember you know you could be saying well I'm here you said I don't really do have to you know do waiting anything like that in Cypress well that's true generally you don't have to but this is a different type of waiting you know we're we're waiting on this label this labeled route to return and we can do that by you know using this this string pattern here which is at tweets and this is how we refer to that label I mentioned earlier you know chained off the cypress route command and we call these aliases so we're waiting on the at tweets alias here and this refers to the tweets endpoint and once we do that once that that response is received from that request then we can go ahead and make assertions against that response body in this case we're making sure that the length of of all the data that we've received matches what we're seeing in the actual URL what's rendered in the UI and this is this is how that test test will look like now when you're establishing routes to do stubbing cypress is actually going to show that to you in the command log as well so if you notice up top here it's going to show you hey we're stubbing this slash tweets route we're using the get method and in fact it is stuff and it's also showing you the alias that we're using to refer to it and it's no it's labeled in this nice yellow color which is makes it easy to follow throughout our tests now the cypress route command is actually more more powerful it has much more functionality and i urge you to look up the documentation for it but we can even do you know do other things to simulate problematic scenarios so for example you know one of the big issues with it really you know making requests to an API endpoint is you know is how long does it take to to respond should we have a timeout you know how should our app respond when things are not working properly what if it's not getting the proper status and and so on and this is all doable with the route command so for example I can you know use this delay option to simulate a three-second delay in the response and I can even set the status of the response to be a 404 and this way I can simulate you know that problematic scenario and I can test if my app is handling it properly so for example if you might wanna you know show an error message or show a loading loading screen or so on but this is all possible with the route command and also notice that I'm handling fixtures allured differently here in the previous test I was referring to my tweets picture with that that string pattern which is fixtures : tweets but now I'm using the Cypress fixtures command to to refer to so there so there are various ways to to use fixtures here again this is the whole test test running so again I am you know clearing the database the database logging in and testing my app fully ok so now we've seen how to use Cypress in our day-to-day workflow via the Cypress desktop app but how do we run Cypress in CI you can't run the desktop app you know NCI so how do you go about running Sepphoris headless lis the way we can accomplish that is by using the Cypress run command so when using Cypress it in a headed manner we're using the Cypress open command and to run the headless Lee we use the run command now when we do run Cypress in a headless manner we do get automatic video recordings of the full test runs out of the box and this is really helpful because when you're running browser tests in CI you know you can't really see what's on in a browser right you know it's all very visual and it's really nice to see a full video recording so you can easily see what took place and especially when errors took place let's go in and take a look at how it all looks like so again we use the Cypress run command and we're running that action spec file we saw earlier and separates is going to show you now all the tests says that it's executing you know how long the tech is going to show you the test results and it's going to show you that video recording which is just an mp4 file but it's essentially everything you see in the in the browser and it includes all the aspects of the test runner as well now this brings us to the other half of the Cypress story which is the Cypress dashboard this is a purely optional and complimentary service to the Cypress test Runner and what it allows you to do is report or as we like to say record your test run results to this dashboard and it gives you much better introspection of what's going on in CI and it's a much better collaboration point as well for your team let's go ahead and take a quick look so this is how the Cypress dashboard looks like and this is the view for the Cypress project itself we use Cypress to test Cypress and it's very similar to how you know CI provider apps might look like because in this case for showing you you know the recent test runs you've had and we show you some git commit history information and how long it took you know which how many tests passed which ones didn't refer references back to your CI provider you know the context to test ran in so like know that which browser which operating system and so on one thing I like to clarify with the dashboard service is that it's completely free for open source projects also have a very generous free plan and and so anybody can really get up and running with using this service let's let's learn a little bit about it you know once you click into one of these test runs you get to see all the test spec files that ran you can see the direct you know terminal output you're used to seeing when you're running the test headless Lee just similar to you know how you would see things in CI as well you can see that full video recording we just talked about and you can share this video colleagues it's very helpful one debugging and you can speed things up or download the video if you if you would like as well so this is also very helpful for for debugging scenarios no but you know pen we were just looking at passing tests and passing tests are very boring what's more interesting is is how we see things when things go wrong and and this is really where the dashboard shines because it really organizes and presents error points and errors very nicely so yeah if you click on like this failures tab for this test run we get to see each error that took place get some more information about it even see the full stack trace and and again though we have access to you know the direct you know terminal output screenshots that took place and and also the video as well so you know you know we can actually click on you know on that air and see the screenshots that that took place at that point in time and Cyprus automatically does this it takes screenshots when things go wrong and this you know again helps you with debugging problems now the other aspect of the dashboard is it's pretty hidden there's no UI for it it's it's its ability to paralyze your test files this one of my favorite features and it's one of the first things I worked on I joined Cyprus um and by just passing this parallel flag in you know with when you're running Cyprus headless lis Cyprus will automatically figure out how to optimally load-balanced your test files across your CI machines so if you have ten CI machines provision in your environment Cyprus will optimally figure out how to distribute your test files across those those machines this is something that probably works its own full webcast and you're all interested I would love to do one just on parallelization alone now the other thing that I would really like to mention about Cyprus its documentation this is something we're really proud of and it's really one of the reasons why Cyprus has become so successful and if you're looking for a one-stop place to to start learning Cyprus it's definitely the documentation this isn't like you know what other documentation is you know software documentation you've seen the past it's not just you know a list of API commands it's really started it's really a guide and it's very prescriptive you know we offer our opinions or best practices our thoughts on various matters and we walk you through core concepts and you can read it almost like a book that's how I originally read it and then once I went over the core concepts and some of the guides that's when I you know you know went and explored the API itself we also have this example recipes repo which I urge everyone to check out and this is packed with you know tips tricks and you know and recipes for how you would handle certain situations you know this is especially helpful for figuring out how to do things you know in common scenarios like logging in or a you know so on so I really urge everyone to check this out it's packed with a lot of good information and and we also have a dedicated page to you know communicate a roadmap you know we always get asked what you guys working on what's in progress what's down the line and you can always refer to our roadmap page to check out our progress see the status of things that we put links for the issues and and and pull requests of the things we're working on and we offer you know this roadmap page for our test runner but also the dashboard service as well so if you have any questions about a roadmap check this page out first but if you have more questions feel free to reach out and Cypress due to its popularity you know and the reason why it's really popular is it's community we have a pretty active Gator channel so if you have any questions hop on their ass question someone is going to come help you out either from the community or someone on the Cypress team and if you have any problems with Cypress find any issues or bugs feel free to you know file an issue we read everything so I urge you to that if you find any any problems and one thing I'd like to point out is that you know any successful technology open source technology I should say is really owes its success to its community and this is very true for Cypress you know Cypress would not be where it's at today if it wasn't for all the feedback the great debates and just though the overall you know passion people have for Cypress so we really appreciate this and we're going to be doing more and more to help grow the community and give back to our community as well with that said this concludes you know that this webcast thanks for joining me if you have any questions feel free to reach out to me on Twitter or free failure to shoot me an email I'll be glad to help you out again thanks for joining me and I'll see you on the next quick web cast thank you"
      },
      "after": "25620af36fb8648b",
      "date": 1696920850203
    },
    {
      "type": "edit",
      "id": "7849aa69b6808b2f",
      "item": {
        "type": "paragraph",
        "id": "7849aa69b6808b2f",
        "text": "Cyprus is a tool for reliably testing anything that runs in a web browser it specially shines with testing modern web applications like the ones written in react view and angular and so on but it's important to mention that Cyprus is completely tech stack agnostic it doesn't matter what you how and what you've written your app in if it runs in the browser the goal of Cyprus is to help you test it and best of all Cyprus is free and open source under the MIT license you can do with it as you wish for kit it's open source but even more importantly is the mission and the goal of Cyprus any good projects should have a solid mission backing it and the goal of Cyprus is to not just be another testing tool the mission is to create a testing experience that's truly enjoyable and will make you actually want to write tests we want to foster a productive ecosystem that actually champions a process that actually works now let's take a look at some of the non-technical reasons of why you would consider adopting Cyprus we'll get to the technical reasons later on in the presentation but for now let's just look at the non-technical ones well Cyprus has been growing in popularity fairly rapidly currently the Cyprus repository has over 13,000 stars on github and is also being downloaded over five hundred and thirty thousand times on a weekly basis from NPM and as I said this this growth has been fairly rapid last year we came out of beta and we've been seeing hockey style growth this is actually a graph of of how the github stars have been progressing another awesome thing that happened recently was that thought works technology radar identified Cyprus as the number one tool to adopt now this technology radar what it does is that it it follows the maturation of a piece of technology over time and they assess you know how how things are going as the technology is progressing and it was great to see Cyprus identified as the number one to it tool to adopt especially in comparison to other great testing tools like Tess cafe and puppeteer we're also seeing a growing demand for testing skills specifically Cyprus skills within the job market and this is by no accident there's now more demand than ever to create very polished user experiences so any time spent learning Cyprus is time well spent I should also mention that Cyprus is a sustainable open-source project since its popular we receive a lot of feedback from the community our issues section is filled with great contributions feedbacks discourse there's a lot of good conversations going on there and we're always open to more but more importantly Cyprus the project is backed by Cyprus I owe the company which consists of a team that's laser focus on creating the absolute best testing tool for day industry these are folks that come in every day and are absolutely focused on hearing our users and developing new features ok now you've heard a little bit about what Cyprus is and why you might want to adopt it now it's time to dive in and start using it first and foremost let's talk about setup and installation well it's very simple with Cyprus all you got to do is NPM install Cyprus it's just this one line there's no additional tools or binaries or anything else to setup or configure this is it you do this and you get one tool that handles everything for you once you do that you're gonna get two things you're going to get the Cypress desktop app this is the Cypress GUI that you will use in your day to day work floo and you would also get the cyprus CLI tool which you will use to start cyprus but also to run cyprus within your CI environment and we'll see how these two programs work throughout this presentation let's talk about the cyprus desktop app first well how do we open it cyprus is binary in your node module so you can use MPX to call the cyprus open command to bring up cyprus and when you do that for the very first time especially in a fresh clean new project cyprus is going to scaffold to cyprus directory which includes all the various directories that are sector specific which you can fill to configure and modify the behavior of cyprus and we'll get to these these directories and though in a little bit for example the cyprus scaffolding looks like this within this cyprus folder that gets placed in the top of your project directory you're going to have a fixtures folder an integration foale or a plugins folder and a support folder as i said we'll get to talk about you know these specific directories but the integration folder is the most important one here because that's the one you're going to be putting your test files into and don't worry if you don't like the naming of this folder because it's fully configurable okay so this is how the cyprus desktop GUI looks like when you bring it up it's going to show you a list of all the test files within your cyprus integration or test file directory and you can go ahead and start using it by clicking one of the suspect files here so for us we're gonna click on that first spec file action spec jeaious and let's see what happens well when you do that cyprus is going to bring up a full version of chrome and this is how the cyprus test runner looks like we're going to bring in your app and start running in running all the tests that you have written in that spec file this is how the experience looks like but let's break it apart and look at its various traits so on the right hand side is your app your app gets pulled in it within an iframe and everything else you see is you know the Cypress test runner in the left hand side we have the Cypress command log which shows every single test within your spec file and if you click on one of these tests it will show you every single command that took place within that test so everything that happened in thin your test you can see right here within the command log and the cool part here and this is one of my personal favorite features it's this ability to time travel throughout your test as you're scrubbing your mouse or you know selecting one of the commands within the command log"
      },
      "date": 1696920943372
    },
    {
      "type": "add",
      "id": "206ce9f24c6e4d85",
      "item": {
        "type": "paragraph",
        "id": "206ce9f24c6e4d85",
        "text": "Cypress takes a dom snapshot after every single action it takes so you can easily travel through the actions that your test took to see the state of your app at that point in time this is not just fun to watch but immensely helpful for seeing what your tests are actually doing and very useful when you're debugging now let's go ahead and take a look at the Cypress API and this is one of the reasons Cypress is a joy to use because the API is very intuitive and almost English like let's go ahead and look at look at some examples and how we use it well you can access the Cypress API via this CY global that's made available within your test file so you can do CY dot my command to use a Cypress command and this is all very well documented in our Docs which that link is there right here for you so let's take a look at an example you know we can use this Get Command to get an element on the page for example button and once we get this button we can make actions against it and also make assertions against it so for example here I'm getting the button I'm clicking the button then I'm making an assertion that this button now has a particular class this is a simple use case but you can do even more advanced things like making a request against an API endpoint then grabbing the response body and an assertion against that response body Cyprus commands are very easy and simple to use but their functionality is actually very rich so they typically accept multiple types of arguments that expand their potential use cases at the important thing to point out about the Cyprus API is that it's a chaining API and handles a subject that gets passed through this this chain so let's let's clarify that a bit so when I when I you know use this git command to grab that button element the button element becomes the subject and this subject is going to get passed through this chain of commands that you can you know use to manipulate the subject and make assertions towards it the other important thing to know about the Cyprus API and this is very critical and one of the biggest differentiating factors about Cyprus when you're typing you know sucker's test means writing Cyprus tests you know Cyprus is not going to imperative Lea execute the commands that you are telling it what it's going to do is it's actually going to make a pretty simplistic aliy a to do list of everything you ask of it and it's going to run everything you've asked of it in the order you've asked of it in the exact order you've asked of it so if things are going to run in a deterministic manner and this is very important because the Turman ism is crucial to you know accomplishing Flake freeness in your tests another thing to know about the Cyprus API and this is one of the things I really love about it is how it has this ability to automatically wait when making assertions so for example when we click this button and then we make this assertion that it has this class Cyprus is going to automatically wait for this particular assertion to come to life within the Dom I don't have to add any weights or sleeps or anything like that in my tests anymore because Cyprus will automatically check the state of the world in my app - to see if this assertion will pass or not and by default this you know the assertions we wait for them for four seconds this is a pragmatic time but it's fully configurable okay so now we've dived in a bit but let's go ahead and dive in deeper okay so to explore some key concepts and just for this webcast I've written this example application I call it bird board it's a simple torta crud client that no one needs and no one ever asked for but it's really gonna help us explore some concepts here yet this app is written in view it's backed by an expressed back-end it has a little API behind it and the data is stored in a  database but as I mentioned earlier is that you know Cypress is completely agnostic to your tech stack so this is all just for this example and this board app is like many other applications it has a way for users to sign up and you know for users to to log in and these are typically you know very critical pads in our application you know a you know if they don't work then many other things will work within the app so it's very important that we that we test these paths for our users okay so how can we go ahead and accomplish this with cyber's well we can go ahead and write a test for for our sign up and login process we can start things off by using the Cypress visit command to first visit the signup page then once we've done that we want to go ahead and drive the UI of our signup form to register our first user so we'll go ahead and use the get command to grab the email input box of the signup form and then we could type in our email we'll do the same thing for the password fields use the type command to type in things into input boxes and then we can grab the the signup button using its ID as the selector for the element and then we can use the click command to click that button and to finish the signup process now once the user signs up they're going to get directed to the login page so they can log in I know this isn't knowing usually when people sign up they automatically get logged in but this is just for the sake of demonstration so to ensure that the user has successfully moved from the signup process - to the login page we can check the address bar and the current location of user within within our app and we can use the the location command to get some information about the users current location within the app and we can grab the path name of their current URL and then we can make the assertion that the path name is the login page and you know we can make these assertions using this shift command there are various ways to make assertions that are well documented in our documentation but you will see us using this shift command to make quick and snappy assertions now once we've logged in the user once you're sorry we've landed on the login page wanted login the user and we can do the same process as we did with the signup page which is you know type in our email address using the type command and then clicking that login button and once we've logged in we're going to make the assertion that we've successfully landed on the board page which is the main page of the app where you can see all the all the tweets coming in okay so and and this is how it looks like this is a little video of it and it's in a loop so we can first see that we are signing up the user and we're logging in then we're landing on the main page of the app and then as you can see this is running very fast Cypress is very fast it is going to run things very quickly because it runs right alongside your application okay so I run this test once everything seems to be passing but then I run it again and it's not passing so this is a bit confusing and Cyprus is communicating that to me it's saying that you know my assertion to check that the user has moved from a successfully move from this signup page to a login page is is failing and I can see this is a happening after I make a post request to the signup API endpoint which is responding with the 400 and Cyprus is showing that to me in in the command log well how can I go about debugging this well I can go ahead and click on the post requests within the Cyprus command log and I've actually bring up dev tools Cyprus is going to output additional information about that request almost everything you need to know about that request within the dev tools command log and this is again very useful for for debugging but I think I know what's going on here so you know I'm running my tests I'm creating that user and then I'm trying to rerun rerun the test by creating that same user and my back-end is not responding properly because you know the user already exists they you know with the email amir at cyprus AO this user already exists now i could do a lot better job of communicating that in my front end and that's that's another story but right now my tests are not cleaning up after themselves you know when they're getting ran multiple times so i need to i need to handle that how can I go about doing this well Cyprus has this task command and this task command allows me to run you know JavaScript at the system level so your tests generally are going to be running within the browser they take actions against your app that's running within the browser and Cypress test runner runs alongside your application it runs within the same run loop as your application but if I use the task command I can actually run JavaScript at the system level and the reason I'm able to do this is that Cyprus also has a node server component it's no backing component which can execute my code on the system so let's go ahead and see how I can use this task a man to clean up after my first test well I can clean up by clearing my database I can have this utility you know from my server just this general purpose clear database function I wrote and then I can call that function within a task that I could declare this is how you declare tasks if this is done within the plugins directory I remember this is one of the folders that Cyprus originally scaffolded when I first started up Cyprus so I can call this command clear clear DB and this is just the general purpose function it can accept arguments and return whatever but for this example over here I'm just going to call that clear database function to clear my database and this is going to go ahead and make a request to my MongoDB to clear to clear it up so now that I've declared this task how can I go ahead about using it within my test well we can simply call the task amang within the before each hook of our test so before each time this test starts we're going to clear our database that's it done great so how can we go about optimizing that this this test further well I see this section you know line 16 through 18 this is all just for logging in the end the user and login is a pretty common thing you have to do when you're testing your application my colleagues that are working with me on this project will want to probably you know also log in with in their tests so it would be really nice if I can except encapsulate the login actions into a login command that everybody else can also use and it just really cleans up the test here so how can we go about declaring custom commands and you know and this is the end goal here by the way you know to have this custom login command where we can pass in no the users credentials and we just log in so the way we can accomplish this is by using this the Cyprus global which offers this commands API and we can add commands to it just like you're seeing here on the screen and the place that we declared this is within the commands file that's located within the support directory in your in your Cypress folder so we can declare this custom login command it's going to accept an email and a password and again this is just a general-purpose function and then we can move those actions we've got earlier into this function to encapsulate this this logic so now great things are looking looking better how can we go about furthering this test further well the other component of this test was this the signup process you know it's great to have this test so we can drive our UI and you know gain confidence that our UI is properly interacting with our back-end and everything is fine but signing up is also a thing that happens quite often but we only need to run the test against the UI once game compton confidence in it but it's not very efficient to do this over and over and over again it would be great if the user was already properly provisioned in the database so I can go ahead and you know go on with the rest of my test and you usually need some users in place to to do most of your tests typically anyways so how can we go about accomplishing this well we can go back to our trusty friend the tasks command and we can declare a new task and I'm going to declare a task for seeding the database I have this you know the seed database function I you know in my my server code base and this is simply going to provision the user that we were creating manually not manually but you know by driving the UI to create it so we're just gonna call this function to see their database do you just have a user ready when our test starts once we do this you know and inner before each hook we can call this DB tasks and we can pass in user data that we want here but you know just passing in like a you know we can store this information in like a dedicated you know file that you know that includes details about seed users or so on you know there's various ways of accomplishing this but the important thing to notice is that you know tasks commands can accept arguments for those functions that we've declared earlier great so now we are you know clearing your database and seeing our database properly and we can see everything run now all together very efficiently great so but we can go one step further and this is going to highlight another great benefit of Cypress so let's move our old log in command and rename it log in with UI because there's another way to accomplish this we can actually log in programmatically remember that Cypress again runs right alongside your application it runs within the same run loop as your application which means it has direct programmatic access to your app you can use the same code that your app uses within your test and this is immensely useful so you know to to make the login process even more efficient I can directly call the function that does the login within my application right here in this custom login command and the way I could do this is you know I can attach the instance of my app to the global window of the browser and then I can just use the window command of Cypress to access that global app instance and you know I'm using view X as the central state management of this application and if you don't know what that is it's okay it's just similar to kind of redux if you're coming from the react world but Jenna generally put is just a way to handle state within your app and since I have access to this part of my application I can dispatch that login functionality directly programmatically and you know this isn't just something to to look at and then move on to the next slide we should really take pause here because you know I'm getting the chance to use the code I've written on that that you know explains and implements the functionality of my of my application and I can reuse it within my test this is going to give me even a higher level of confidence in my end-to-end tests so over here you know again accepting you know an email password I'm going to dispatch the login action I have implemented in my application to programmatically log in my user ok and again this is how the bird board app looks like you can type in something you know your favorite hashtags and it will kind of aggregate all the tweets regarding all the hashtags you've entered in that top input box great so let's let's explore some other concepts here so so far you know we are clearing your database we're seeing your database damn burger visiting our login page you know but since we've seeded our database properly there's already a user there so we can just go ahead and login and we could do that via our custom login come in but now let's go ahead and test the actual app ok so the way the the app works is that when you first load the page it's going to make you know a request to this slash tweets endpoint and it's going to grab the tweets that we want to see regarding the hashtags that we have so you know in the backend the requests are actually being made to the Twitter API and this is a third party API generally speaking you don't want to you know test those raw api's in in your test environment you usually you know expect that these third-party aps work there's this contract that hey I don't control this system you know I am a user of this system so there's this general expectation that things are going to work and and this is generally a sound practice though there are cases where you want to test third party api's but generally you don't want to do that because you don't control that system and this is a great opportunity to to introduce stubbing so we can stop the response over tweets endpoints how can we go about doing this in Cyprus well we can start things off by using the Cyprus server command this is going to initiate a server for us to pass our request to that's going to enable stubbing then we can use the Cyprus route command and we can describe what we want the response of the tweets endpoint to be so the first argument is the is the request method type and in this case we're going to make a get request to the tweets endpoint and we want the response to be the set of tweets now where are we storing these the these that these tweets well we can use fixtures to - you know describe what the response should be and you can store fixtures within the Cyprus fixtures directory directory which was which was one of the other directories that Cyprus provision when you be first yeah started it up and we can easily refer to the the fixtures within our fixtures folder by using this pattern right here we can refer to them just by strings so we can say fix your colon tweets and the thing that comes after the colon is essentially the name of that JSON file and there are various ways to handle fixtures and we describe this all within our documentation but this is one of like you know the general purpose ways of accomplishing it so again the cui wrap command is explaining how we want this API endpoint to be stubbed and to refer to this route again in our tests we can use this as command to essentially label this route so we want to label this route as tweets just giving it a name so we can refer to it later great so then we're know we're going to you know drive the input box up top and that in our app team put some hashtags and after we do that we want to you know see the response of of that get tweets endpoint and what we can do that is we can wait for that response to return the way we can do that is using the Cypress wait command now you remember you know you could be saying well I'm here you said I don't really do have to you know do waiting anything like that in Cypress well that's true generally you don't have to but this is a different type of waiting you know we're we're waiting on this label this labeled route to return and we can do that by you know using this this string pattern here which is at tweets and this is how we refer to that label I mentioned earlier you know chained off the cypress route command and we call these aliases so we're waiting on the at tweets alias here and this refers to the tweets endpoint and once we do that once that that response is received from that request then we can go ahead and make assertions against that response body in this case we're making sure that the length of of all the data that we've received matches what we're seeing in the actual URL what's rendered in the UI and this is this is how that test test will look like now when you're establishing routes to do stubbing cypress is actually going to show that to you in the command log as well so if you notice up top here it's going to show you hey we're stubbing this slash tweets route we're using the get method and in fact it is stuff and it's also showing you the alias that we're using to refer to it and it's no it's labeled in this nice yellow color which is makes it easy to follow throughout our tests now the cypress route command is actually more more powerful it has much more functionality and i urge you to look up the documentation for it but we can even do you know do other things to simulate problematic scenarios so for example you know one of the big issues with it really you know making requests to an API endpoint is you know is how long does it take to to respond should we have a timeout you know how should our app respond when things are not working properly what if it's not getting the proper status and and so on and this is all doable with the route command so for example I can you know use this delay option to simulate a three-second delay in the response and I can even set the status of the response to be a 404 and this way I can simulate you know that problematic scenario and I can test if my app is handling it properly so for example if you might wanna you know show an error message or show a loading loading screen or so on but this is all possible with the route command and also notice that I'm handling fixtures allured differently here in the previous test I was referring to my tweets picture with that that string pattern which is fixtures : tweets but now I'm using the Cypress fixtures command to to refer to so there so there are various ways to to use fixtures here again this is the whole test test running so again I am you know clearing the database the database logging in and testing my app fully ok so now we've seen how to use Cypress in our day-to-day workflow via the Cypress desktop app but how do we run Cypress in CI you can't run the desktop app you know NCI so how do you go about running Sepphoris headless lis the way we can accomplish that is by using the Cypress run command so when using Cypress it in a headed manner we're using the Cypress open command and to run the headless Lee we use the run command now when we do run Cypress in a headless manner we do get automatic video recordings of the full test runs out of the box and this is really helpful because when you're running browser tests in CI you know you can't really see what's on in a browser right you know it's all very visual and it's really nice to see a full video recording so you can easily see what took place and especially when errors took place let's go in and take a look at how it all looks like so again we use the Cypress run command and we're running that action spec file we saw earlier and separates is going to show you now all the tests says that it's executing you know how long the tech is going to show you the test results and it's going to show you that video recording which is just an mp4 file but it's essentially everything you see in the in the browser and it includes all the aspects of the test runner as well now this brings us to the other half of the Cypress story which is the Cypress dashboard this is a purely optional and complimentary service to the Cypress test Runner and what it allows you to do is report or as we like to say record your test run results to this dashboard and it gives you much better introspection of what's going on in CI and it's a much better collaboration point as well for your team let's go ahead and take a quick look so this is how the Cypress dashboard looks like and this is the view for the Cypress project itself we use Cypress to test Cypress and it's very similar to how you know CI provider apps might look like because in this case for showing you you know the recent test runs you've had and we show you some git commit history information and how long it took you know which how many tests passed which ones didn't refer references back to your CI provider you know the context to test ran in so like know that which browser which operating system and so on one thing I like to clarify with the dashboard service is that it's completely free for open source projects also have a very generous free plan and and so anybody can really get up and running with using this service let's let's learn a little bit about it you know once you click into one of these test runs you get to see all the test spec files that ran you can see the direct you know terminal output you're used to seeing when you're running the test headless Lee just similar to you know how you would see things in CI as well you can see that full video recording we just talked about and you can share this video colleagues it's very helpful one debugging and you can speed things up or download the video if you if you would like as well so this is also very helpful for for debugging scenarios no but you know pen we were just looking at passing tests and passing tests are very boring what's more interesting is is how we see things when things go wrong and and this is really where the dashboard shines because it really organizes and presents error points and errors very nicely so yeah if you click on like this failures tab for this test run we get to see each error that took place get some more information about it even see the full stack trace and and again though we have access to you know the direct you know terminal output screenshots that took place and and also the video as well so you know you know we can actually click on you know on that air and see the screenshots that that took place at that point in time and Cyprus automatically does this it takes screenshots when things go wrong and this you know again helps you with debugging problems now the other aspect of the dashboard is it's pretty hidden there's no UI for it it's it's its ability to paralyze your test files this one of my favorite features and it's one of the first things I worked on I joined Cyprus um and by just passing this parallel flag in you know with when you're running Cyprus headless lis Cyprus will automatically figure out how to optimally load-balanced your test files across your CI machines so if you have ten CI machines provision in your environment Cyprus will optimally figure out how to distribute your test files across those those machines this is something that probably works its own full webcast and you're all interested I would love to do one just on parallelization alone now the other thing that I would really like to mention about Cyprus its documentation this is something we're really proud of and it's really one of the reasons why Cyprus has become so successful and if you're looking for a one-stop place to to start learning Cyprus it's definitely the documentation this isn't like you know what other documentation is you know software documentation you've seen the past it's not just you know a list of API commands it's really started it's really a guide and it's very prescriptive you know we offer our opinions or best practices our thoughts on various matters and we walk you through core concepts and you can read it almost like a book that's how I originally read it and then once I went over the core concepts and some of the guides that's when I you know you know went and explored the API itself we also have this example recipes repo which I urge everyone to check out and this is packed with you know tips tricks and you know and recipes for how you would handle certain situations you know this is especially helpful for figuring out how to do things you know in common scenarios like logging in or a you know so on so I really urge everyone to check this out it's packed with a lot of good information and and we also have a dedicated page to you know communicate a roadmap you know we always get asked what you guys working on what's in progress what's down the line and you can always refer to our roadmap page to check out our progress see the status of things that we put links for the issues and and and pull requests of the things we're working on and we offer you know this roadmap page for our test runner but also the dashboard service as well so if you have any questions about a roadmap check this page out first but if you have more questions feel free to reach out and Cypress due to its popularity you know and the reason why it's really popular is it's community we have a pretty active Gator channel so if you have any questions hop on their ass question someone is going to come help you out either from the community or someone on the Cypress team and if you have any problems with Cypress find any issues or bugs feel free to you know file an issue we read everything so I urge you to that if you find any any problems and one thing I'd like to point out is that you know any successful technology open source technology I should say is really owes its success to its community and this is very true for Cypress you know Cypress would not be where it's at today if it wasn't for all the feedback the great debates and just though the overall you know passion people have for Cypress so we really appreciate this and we're going to be doing more and more to help grow the community and give back to our community as well with that said this concludes you know that this webcast thanks for joining me if you have any questions feel free to reach out to me on Twitter or free failure to shoot me an email I'll be glad to help you out again thanks for joining me and I'll see you on the next quick web cast thank you"
      },
      "after": "7849aa69b6808b2f",
      "date": 1696920944003
    }
  ]
}