{
  "title": "Morphic",
  "story": [
    {
      "type": "markdown",
      "id": "660f85e324ae59e6",
      "text": "[http://pharo.gforge.inria.fr/PBE1/PBE1ch12.html The history of Morphic] – [[Morphic]] was developed by John Maloney and Randy Smith for the Self programming language, starting around 1993. \n"
    },
    {
      "type": "markdown",
      "id": "8b716848f53692e8",
      "text": "Maloney later wrote a new version of Morphic for Squeak, but the basic ideas behind the Self version are still alive and well in [[Pharo]] Morphic: directness and liveness. \n"
    },
    {
      "type": "markdown",
      "id": "5d6851af1dca3cc8",
      "text": "Directness means that the shapes on the screen are objects that can be examined or changed directly, that is, by pointing at them using the mouse. Liveness means that the user interface is always able to respond to user actions: information on the screen is continuously updated as the world that it describes changes. A simple example of this is that you can detach a menu item and keep it as a button. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Morphic",
        "story": []
      },
      "date": 1628681628255
    },
    {
      "item": {
        "type": "factory",
        "id": "660f85e324ae59e6"
      },
      "id": "660f85e324ae59e6",
      "type": "add",
      "date": 1628681629815
    },
    {
      "type": "edit",
      "id": "660f85e324ae59e6",
      "item": {
        "type": "markdown",
        "id": "660f85e324ae59e6",
        "text": "The history of Morphic\n\nMorphic was developed by John Maloney and Randy Smith for the Self programming language, starting around 1993. Maloney later wrote a new version of Morphic for Squeak, but the basic ideas behind the Self version are still alive and well in Pharo Morphic: directness and liveness. Directness means that the shapes on the screen are objects that can be examined or changed directly, that is, by pointing at them using the mouse. Liveness means that the user interface is always able to respond to user actions: information on the screen is continuously updated as the world that it describes changes. A simple example of this is that you can detach a menu item and keep it as a button. "
      },
      "date": 1628681632737
    },
    {
      "type": "edit",
      "id": "660f85e324ae59e6",
      "item": {
        "type": "markdown",
        "id": "660f85e324ae59e6",
        "text": "[http://pharo.gforge.inria.fr/PBE1/PBE1ch12.html The history of Morphic]\n\nMorphic was developed by John Maloney and Randy Smith for the Self programming language, starting around 1993. Maloney later wrote a new version of Morphic for Squeak, but the basic ideas behind the Self version are still alive and well in Pharo Morphic: directness and liveness. Directness means that the shapes on the screen are objects that can be examined or changed directly, that is, by pointing at them using the mouse. Liveness means that the user interface is always able to respond to user actions: information on the screen is continuously updated as the world that it describes changes. A simple example of this is that you can detach a menu item and keep it as a button. "
      },
      "date": 1628681663411
    },
    {
      "type": "edit",
      "id": "660f85e324ae59e6",
      "item": {
        "type": "markdown",
        "id": "660f85e324ae59e6",
        "text": "[http://pharo.gforge.inria.fr/PBE1/PBE1ch12.html The history of Morphic] – [[Morphic]] was developed by John Maloney and Randy Smith for the Self programming language, starting around 1993. Maloney later wrote a new version of Morphic for Squeak, but the basic ideas behind the Self version are still alive and well in Pharo Morphic: directness and liveness. Directness means that the shapes on the screen are objects that can be examined or changed directly, that is, by pointing at them using the mouse. Liveness means that the user interface is always able to respond to user actions: information on the screen is continuously updated as the world that it describes changes. A simple example of this is that you can detach a menu item and keep it as a button. "
      },
      "date": 1628681676635
    },
    {
      "type": "edit",
      "id": "660f85e324ae59e6",
      "item": {
        "type": "markdown",
        "id": "660f85e324ae59e6",
        "text": "[http://pharo.gforge.inria.fr/PBE1/PBE1ch12.html The history of Morphic] – [[Morphic]] was developed by John Maloney and Randy Smith for the Self programming language, starting around 1993. \n"
      },
      "date": 1628681770987
    },
    {
      "type": "add",
      "id": "8b716848f53692e8",
      "item": {
        "type": "markdown",
        "id": "8b716848f53692e8",
        "text": "Maloney later wrote a new version of Morphic for Squeak, but the basic ideas behind the Self version are still alive and well in Pharo Morphic: directness and liveness. Directness means that the shapes on the screen are objects that can be examined or changed directly, that is, by pointing at them using the mouse. Liveness means that the user interface is always able to respond to user actions: information on the screen is continuously updated as the world that it describes changes. A simple example of this is that you can detach a menu item and keep it as a button. "
      },
      "after": "660f85e324ae59e6",
      "date": 1628681772145
    },
    {
      "type": "edit",
      "id": "8b716848f53692e8",
      "item": {
        "type": "markdown",
        "id": "8b716848f53692e8",
        "text": "Maloney later wrote a new version of Morphic for Squeak, but the basic ideas behind the Self version are still alive and well in [[Pharo]] Morphic: directness and liveness. \n"
      },
      "date": 1628681792099
    },
    {
      "type": "add",
      "id": "5d6851af1dca3cc8",
      "item": {
        "type": "markdown",
        "id": "5d6851af1dca3cc8",
        "text": "Directness means that the shapes on the screen are objects that can be examined or changed directly, that is, by pointing at them using the mouse. Liveness means that the user interface is always able to respond to user actions: information on the screen is continuously updated as the world that it describes changes. A simple example of this is that you can detach a menu item and keep it as a button. "
      },
      "after": "8b716848f53692e8",
      "date": 1628681793746
    }
  ]
}