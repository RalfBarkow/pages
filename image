{
  "title": "Image",
  "story": [
    {
      "type": "paragraph",
      "id": "33ac01597870cbed",
      "text": "The image consists of all the objects in your computer, both the ones you create and the ones [[Smalltalk]] already provides."
    },
    {
      "type": "markdown",
      "id": "a66ce5d2dbe2189c",
      "text": "Because “everything is an object,” the image contains unusual objects like compiled methods. That is, whenever you write and compile a Smalltalk method, Smalltalk's compiler produces an instance of the class *[[CompiledMethod]]*. Each of these objects consists of bytecodes, which are the machine instructions that the virtual machine knows how to execute."
    },
    {
      "type": "paragraph",
      "id": "6582b816e191e7fe",
      "text": "A running Smalltalk system therefore consists of these two pieces of software – a [[Virtual Machine]] running on your underlying computer hardware plus an image run­ning bytecodes on the virtual machine. This is really a familiar notion cloaked in a fancy name. An interpreter – a BASIC interpreter, or a Pascal p-code interpreter – is also a virtual machine. Instead of executing the bytecodes in a Smalltalk image, it exe­cutes some other language, like BASIC or p-code. Sometimes people even refer to the Smalltalk virtual machine as the Smalltalk interpreter."
    },
    {
      "type": "paragraph",
      "id": "1bc43c29a4b7cbe3",
      "text": "The difference between Smalltalk's virtual machine and other, simpler virtual machines (or interpreters) is sophistication. The Smalltalk virtual machine does more than merely execute one bytecode after another. It also manages processing and memory resources, much as a full-blown operating system does."
    },
    {
      "type": "paragraph",
      "id": "f654f688eb263b86",
      "text": "By the way, one side-effect of this arrangement, or of any arrangement based on a virtual machine, is a technique for transporting applications between computer architectures. If Smalltalk runs on one computer architecture, we ought to be able to make it run on another by rewriting only the virtual machine. The image should run as well on one virtual machine as another. The industry's early learning experience with Smalltalk came about in just this fashion. Early in the 1980s, Xerox PARC released the Smalltalk-80 image, along with the specification for its virtual machine, so that any computer manufacturer could run Smalltalk-80 on their own hardware, merely by writing a virtual machine. In those days a basic virtual machine implementation could be built in about one programmer-year."
    },
    {
      "type": "pagefold",
      "id": "3d277cff50dc8a9a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "0921249cf742e2fc",
      "text": "[[How Object-Oriented Languages Work]], p. 182"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Image",
        "story": []
      },
      "date": 1654364029211
    },
    {
      "item": {
        "type": "factory",
        "id": "33ac01597870cbed"
      },
      "id": "33ac01597870cbed",
      "type": "add",
      "date": 1654364114833
    },
    {
      "type": "edit",
      "id": "33ac01597870cbed",
      "item": {
        "type": "paragraph",
        "id": "33ac01597870cbed",
        "text": "The image consists of all the objects in your computer» both the ones you create and the ones Smalltalk already provides."
      },
      "date": 1654364116534
    },
    {
      "type": "edit",
      "id": "33ac01597870cbed",
      "item": {
        "type": "paragraph",
        "id": "33ac01597870cbed",
        "text": "The image consists of all the objects in your computer, both the ones you create and the ones Smalltalk already provides."
      },
      "date": 1654364127755
    },
    {
      "type": "edit",
      "id": "33ac01597870cbed",
      "item": {
        "type": "paragraph",
        "id": "33ac01597870cbed",
        "text": "The image consists of all the objects in your computer, both the ones you create and the ones [[Smalltalk]] already provides."
      },
      "date": 1654364136743
    },
    {
      "item": {
        "type": "factory",
        "id": "a66ce5d2dbe2189c"
      },
      "id": "a66ce5d2dbe2189c",
      "type": "add",
      "after": "33ac01597870cbed",
      "date": 1654374608872
    },
    {
      "type": "edit",
      "id": "a66ce5d2dbe2189c",
      "item": {
        "type": "paragraph",
        "id": "a66ce5d2dbe2189c",
        "text": "Because “everything is an object»” the image contains unusual objects like compiled method}. That is» whenever you write and compile a Smalltalk method» Smalltalk's compiler produces an instance of the class CompiledMethod. Each of these objects consists of bytecodes, which are the machine instructions that the virtual machine knows how to execute."
      },
      "date": 1654374613574
    },
    {
      "type": "edit",
      "id": "a66ce5d2dbe2189c",
      "item": {
        "type": "paragraph",
        "id": "a66ce5d2dbe2189c",
        "text": "Because “everything is an object,” the image contains unusual objects like compiled methods. That is, whenever you write and compile a Smalltalk method, Smalltalk's compiler produces an instance of the class Compiled Method. Each of these objects consists of bytecodes, which are the machine instructions that the virtual machine knows how to execute."
      },
      "date": 1654374698351
    },
    {
      "item": {
        "type": "factory",
        "id": "6582b816e191e7fe"
      },
      "id": "6582b816e191e7fe",
      "type": "add",
      "after": "a66ce5d2dbe2189c",
      "date": 1654406924708
    },
    {
      "type": "edit",
      "id": "6582b816e191e7fe",
      "item": {
        "type": "paragraph",
        "id": "6582b816e191e7fe",
        "text": "A running Smalltalk system therefore consists of these two pieces of software—a virtual machine running on your underlying computer hardware plus an image run­ ning bytecodes on the virtual machine. This is really a familiar notion cloaked in a fancy name An interpreter—a BASIC interpreter, or a Pascal p-code interpreter—is also a virtual machine. Instead ofexecuting the bytecodes in a Smalltalk image, it exe­ cutes some other language, like BASIC or p-code. Sometimes people even refer to the Smalltalk virtual machine as the Smalltalk interpreter."
      },
      "date": 1654406935641
    },
    {
      "type": "edit",
      "id": "6582b816e191e7fe",
      "item": {
        "type": "paragraph",
        "id": "6582b816e191e7fe",
        "text": "A running Smalltalk system therefore consists of these two pieces of software – a virtual machine running on your underlying computer hardware plus an image run­ning bytecodes on the virtual machine. This is really a familiar notion cloaked in a fancy name An interpreter—a BASIC interpreter, or a Pascal p-code interpreter—is also a virtual machine. Instead of executing the bytecodes in a Smalltalk image, it exe­ cutes some other language, like BASIC or p-code. Sometimes people even refer to the Smalltalk virtual machine as the Smalltalk interpreter."
      },
      "date": 1654406988978
    },
    {
      "type": "edit",
      "id": "6582b816e191e7fe",
      "item": {
        "type": "paragraph",
        "id": "6582b816e191e7fe",
        "text": "A running Smalltalk system therefore consists of these two pieces of software – a virtual machine running on your underlying computer hardware plus an image run­ning bytecodes on the virtual machine. This is really a familiar notion cloaked in a fancy name An interpreter – a BASIC interpreter, or a Pascal p-code interpreter – is also a virtual machine. Instead of executing the bytecodes in a Smalltalk image, it exe­cutes some other language, like BASIC or p-code. Sometimes people even refer to the Smalltalk virtual machine as the Smalltalk interpreter."
      },
      "date": 1654407059754
    },
    {
      "item": {
        "type": "factory",
        "id": "0921249cf742e2fc"
      },
      "id": "0921249cf742e2fc",
      "type": "add",
      "after": "6582b816e191e7fe",
      "date": 1654407136632
    },
    {
      "type": "edit",
      "id": "a66ce5d2dbe2189c",
      "item": {
        "type": "paragraph",
        "id": "a66ce5d2dbe2189c",
        "text": "Because “everything is an object,” the image contains unusual objects like compiled methods. That is, whenever you write and compile a Smalltalk method, Smalltalk's compiler produces an instance of the class *[[CompiledMethod]]*. Each of these objects consists of bytecodes, which are the machine instructions that the virtual machine knows how to execute."
      },
      "date": 1654407159433
    },
    {
      "type": "edit",
      "id": "a66ce5d2dbe2189c",
      "item": {
        "type": "markdown",
        "id": "a66ce5d2dbe2189c",
        "text": "Because “everything is an object,” the image contains unusual objects like compiled methods. That is, whenever you write and compile a Smalltalk method, Smalltalk's compiler produces an instance of the class *[[CompiledMethod]]*. Each of these objects consists of bytecodes, which are the machine instructions that the virtual machine knows how to execute."
      },
      "date": 1654407161173
    },
    {
      "type": "edit",
      "id": "6582b816e191e7fe",
      "item": {
        "type": "paragraph",
        "id": "6582b816e191e7fe",
        "text": "A running Smalltalk system therefore consists of these two pieces of software – a [[Virtual Machine]] running on your underlying computer hardware plus an [[Image]] run­ning bytecodes on the virtual machine. This is really a familiar notion cloaked in a fancy name An interpreter – a BASIC interpreter, or a Pascal p-code interpreter – is also a virtual machine. Instead of executing the bytecodes in a Smalltalk image, it exe­cutes some other language, like BASIC or p-code. Sometimes people even refer to the Smalltalk virtual machine as the Smalltalk interpreter."
      },
      "date": 1654759922705
    },
    {
      "type": "edit",
      "id": "6582b816e191e7fe",
      "item": {
        "type": "paragraph",
        "id": "6582b816e191e7fe",
        "text": "A running Smalltalk system therefore consists of these two pieces of software – a [[Virtual Machine]] running on your underlying computer hardware plus an [[Image]] run­ning bytecodes on the virtual machine. This is really a familiar notion cloaked in a fancy name. An interpreter – a BASIC interpreter, or a Pascal p-code interpreter – is also a virtual machine. Instead of executing the bytecodes in a Smalltalk image, it exe­cutes some other language, like BASIC or p-code. Sometimes people even refer to the Smalltalk virtual machine as the Smalltalk interpreter."
      },
      "date": 1654760074600
    },
    {
      "type": "edit",
      "id": "0921249cf742e2fc",
      "item": {
        "type": "paragraph",
        "id": "0921249cf742e2fc",
        "text": "[[How Object-Oriented Languages work]], p. "
      },
      "date": 1654760102069
    },
    {
      "type": "edit",
      "id": "0921249cf742e2fc",
      "item": {
        "type": "paragraph",
        "id": "0921249cf742e2fc",
        "text": "[[How Object-Oriented Languages work]], p. 182"
      },
      "date": 1654760109062
    },
    {
      "type": "edit",
      "id": "0921249cf742e2fc",
      "item": {
        "type": "paragraph",
        "id": "0921249cf742e2fc",
        "text": "[[How Object-Oriented Languages Work]], p. 182"
      },
      "date": 1654760143381
    },
    {
      "item": {
        "type": "factory",
        "id": "3d277cff50dc8a9a"
      },
      "id": "3d277cff50dc8a9a",
      "type": "add",
      "after": "0921249cf742e2fc",
      "date": 1654760312969
    },
    {
      "type": "edit",
      "id": "3d277cff50dc8a9a",
      "item": {
        "type": "pagefold",
        "id": "3d277cff50dc8a9a",
        "text": "~"
      },
      "date": 1654760316241
    },
    {
      "id": "3d277cff50dc8a9a",
      "type": "move",
      "order": [
        "33ac01597870cbed",
        "a66ce5d2dbe2189c",
        "6582b816e191e7fe",
        "3d277cff50dc8a9a",
        "0921249cf742e2fc"
      ],
      "date": 1654760318116
    },
    {
      "type": "add",
      "id": "1bc43c29a4b7cbe3",
      "item": {
        "type": "paragraph",
        "id": "1bc43c29a4b7cbe3",
        "text": "The difference between Smalltalk's virtual machine and other, simpler virtual machines (or interpreters) is sophistication. The Smalltalk virtual machine does more than merely execute one bytecode after another. It also manages processing and memory resources, much as a full-blown operating system does."
      },
      "after": "6582b816e191e7fe",
      "date": 1654760323332
    },
    {
      "type": "add",
      "id": "f654f688eb263b86",
      "item": {
        "type": "paragraph",
        "id": "f654f688eb263b86",
        "text": "By the way, one side-effect of this arrangement, or of any arrangement based on a virtual machine, is a technique for transporting applications between computer architectures. IfSmalltalk runs on one computer architecture, we ought to be able to make it run on another by rewriting only the virtual machine. The image should run as well on one virtual machine as another. The industry's early learning experience with Smalltalk came about in just this fashion. Early in the 1980s, Xerox PARC released the Smalltalk-80 image, along with the specification for its virtual machine, so that any computer manufacturer could run Smalltalk-80 on their own hardware, merely by writing a virtual machine. In those days a basic virtual machine implementation could be built in about one programmor-year."
      },
      "after": "1bc43c29a4b7cbe3",
      "date": 1654760383522
    },
    {
      "type": "edit",
      "id": "f654f688eb263b86",
      "item": {
        "type": "paragraph",
        "id": "f654f688eb263b86",
        "text": "By the way, one side-effect of this arrangement, or of any arrangement based on a virtual machine, is a technique for transporting applications between computer architectures. If Smalltalk runs on one computer architecture, we ought to be able to make it run on another by rewriting only the virtual machine. The image should run as well on one virtual machine as another. The industry's early learning experience with Smalltalk came about in just this fashion. Early in the 1980s, Xerox PARC released the Smalltalk-80 image, along with the specification for its virtual machine, so that any computer manufacturer could run Smalltalk-80 on their own hardware, merely by writing a virtual machine. In those days a basic virtual machine implementation could be built in about one programmor-year."
      },
      "date": 1654760397177
    },
    {
      "type": "edit",
      "id": "f654f688eb263b86",
      "item": {
        "type": "paragraph",
        "id": "f654f688eb263b86",
        "text": "By the way, one side-effect of this arrangement, or of any arrangement based on a virtual machine, is a technique for transporting applications between computer architectures. If Smalltalk runs on one computer architecture, we ought to be able to make it run on another by rewriting only the virtual machine. The image should run as well on one virtual machine as another. The industry's early learning experience with Smalltalk came about in just this fashion. Early in the 1980s, Xerox PARC released the Smalltalk-80 image, along with the specification for its virtual machine, so that any computer manufacturer could run Smalltalk-80 on their own hardware, merely by writing a virtual machine. In those days a basic virtual machine implementation could be built in about one programmer-year."
      },
      "date": 1654760436512
    },
    {
      "type": "edit",
      "id": "6582b816e191e7fe",
      "item": {
        "type": "paragraph",
        "id": "6582b816e191e7fe",
        "text": "A running Smalltalk system therefore consists of these two pieces of software – a [[Virtual Machine]] running on your underlying computer hardware plus an image run­ning bytecodes on the virtual machine. This is really a familiar notion cloaked in a fancy name. An interpreter – a BASIC interpreter, or a Pascal p-code interpreter – is also a virtual machine. Instead of executing the bytecodes in a Smalltalk image, it exe­cutes some other language, like BASIC or p-code. Sometimes people even refer to the Smalltalk virtual machine as the Smalltalk interpreter."
      },
      "date": 1674554620242
    }
  ]
}