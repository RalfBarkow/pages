{
  "title": "2023-06-01",
  "story": [
    {
      "type": "paragraph",
      "id": "aa45c48ed5ff8e9d",
      "text": "⇒ [[Elm and JSON]] ⇒ [[Decoding JSON HTTP Responses]] ⇒ [[Exploratory Parsing]]"
    },
    {
      "type": "paragraph",
      "id": "f990515c4a3f2ffc",
      "text": "We show the BadBoy error in the view when it occurs. [https://github.com/RalfBarkow/vite-elm-dojo/commit/43299f2f68b7f743dbd7ab3a42786a0e1690be1c commit] – Display error message in the view "
    },
    {
      "type": "paragraph",
      "id": "4b8fe32340c9a9a1",
      "text": "I don't want to describe exactly what should be written and anything else is a \"syntax error\". Wiki allows writers to write what they think makes sense. With [[Exploratory Parsing]] we now have a way for the parser writer to discover what has been written after the fact.\n\n"
    },
    {
      "type": "paragraph",
      "id": "4ce218e5e26f8833",
      "text": "I'd like to change the behavior of the Try Again! button. The application should automatically try to read the next journal object."
    },
    {
      "type": "paragraph",
      "id": "338dc1cdd5b412ed",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "dd56c242f1481bc5",
      "text": "Note: journal.typeOfJournal == \"edit\""
    },
    {
      "type": "pagefold",
      "id": "d3347231d02a631f",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "940590f73186786d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "create-new-page-test",
      "title": "Create New Page Test",
      "text": "add test text"
    },
    {
      "type": "paragraph",
      "id": "72464f32db6795bd",
      "text": "JSON for Create New Page Test"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-06-01",
        "story": []
      },
      "date": 1685607971152
    },
    {
      "item": {
        "type": "factory",
        "id": "aa45c48ed5ff8e9d"
      },
      "id": "aa45c48ed5ff8e9d",
      "type": "add",
      "date": 1685607978015
    },
    {
      "type": "edit",
      "id": "aa45c48ed5ff8e9d",
      "item": {
        "type": "paragraph",
        "id": "aa45c48ed5ff8e9d",
        "text": "[["
      },
      "date": 1685607986944
    },
    {
      "type": "edit",
      "id": "aa45c48ed5ff8e9d",
      "item": {
        "type": "paragraph",
        "id": "aa45c48ed5ff8e9d",
        "text": "[[Decoding JSON HTTP Responses]]"
      },
      "date": 1685607999508
    },
    {
      "type": "edit",
      "id": "aa45c48ed5ff8e9d",
      "item": {
        "type": "paragraph",
        "id": "aa45c48ed5ff8e9d",
        "text": "⇒ [[Elm and JSON]] ⇒ [[Decoding JSON HTTP Responses]]"
      },
      "date": 1685608025192
    },
    {
      "type": "edit",
      "id": "aa45c48ed5ff8e9d",
      "item": {
        "type": "paragraph",
        "id": "aa45c48ed5ff8e9d",
        "text": "⇒ [[Elm and JSON]] ⇒ [[Decoding JSON HTTP Responses]] ⇒ [[Exploratory Parsing]]"
      },
      "date": 1685610006557
    },
    {
      "item": {
        "type": "factory",
        "id": "4b8fe32340c9a9a1"
      },
      "id": "4b8fe32340c9a9a1",
      "type": "add",
      "after": "aa45c48ed5ff8e9d",
      "date": 1685612389726
    },
    {
      "type": "edit",
      "id": "4b8fe32340c9a9a1",
      "item": {
        "type": "paragraph",
        "id": "4b8fe32340c9a9a1",
        "text": "Now I don't want to describe exactly what should be written and anything else is a \"syntax error\". Wiki allows writers to write what they think makes sense. With Exploratory Parsing we now have a way for the parser writer to discover what has been written after the fact.\n\nI want to display the BadBoy errors in the view as they occur and "
      },
      "date": 1685612390992
    },
    {
      "type": "edit",
      "id": "4b8fe32340c9a9a1",
      "item": {
        "type": "paragraph",
        "id": "4b8fe32340c9a9a1",
        "text": "Now I don't want to describe exactly what should be written and anything else is a \"syntax error\". Wiki allows writers to write what they think makes sense. With Exploratory Parsing we now have a way for the parser writer to discover what has been written after the fact.\n\nI want to display the BadBoy errors in the view as they occur and …"
      },
      "date": 1685612394713
    },
    {
      "type": "add",
      "id": "4ce218e5e26f8833",
      "item": {
        "type": "paragraph",
        "id": "4ce218e5e26f8833",
        "text": "Now I'd like to change the behavior of the Try Again! button. The application should automatically try to read the next journal object."
      },
      "after": "4b8fe32340c9a9a1",
      "date": 1685612548285
    },
    {
      "type": "edit",
      "id": "4b8fe32340c9a9a1",
      "item": {
        "type": "paragraph",
        "id": "4b8fe32340c9a9a1",
        "text": "Now I don't want to describe exactly what should be written and anything else is a \"syntax error\". Wiki allows writers to write what they think makes sense. With Exploratory Parsing we now have a way for the parser writer to discover what has been written after the fact.\n\nI want to display the BadBoy errors in the view as they occur and … [commit] – Display error message in the view "
      },
      "date": 1685614624874
    },
    {
      "type": "edit",
      "id": "4b8fe32340c9a9a1",
      "item": {
        "type": "paragraph",
        "id": "4b8fe32340c9a9a1",
        "text": "Now I don't want to describe exactly what should be written and anything else is a \"syntax error\". Wiki allows writers to write what they think makes sense. With Exploratory Parsing we now have a way for the parser writer to discover what has been written after the fact.\n\nI want to display the BadBoy errors in the view as they occur and … [https://github.com/RalfBarkow/vite-elm-dojo/commit/43299f2f68b7f743dbd7ab3a42786a0e1690be1c commit] – Display error message in the view "
      },
      "date": 1685614634091
    },
    {
      "type": "edit",
      "id": "4b8fe32340c9a9a1",
      "item": {
        "type": "paragraph",
        "id": "4b8fe32340c9a9a1",
        "text": "Now I don't want to describe exactly what should be written and anything else is a \"syntax error\". Wiki allows writers to write what they think makes sense. With Exploratory Parsing we now have a way for the parser writer to discover what has been written after the fact.\n\n"
      },
      "date": 1685614672048
    },
    {
      "type": "add",
      "id": "f990515c4a3f2ffc",
      "item": {
        "type": "paragraph",
        "id": "f990515c4a3f2ffc",
        "text": "We display the BadBoy errors in the view as they occur and … [https://github.com/RalfBarkow/vite-elm-dojo/commit/43299f2f68b7f743dbd7ab3a42786a0e1690be1c commit] – Display error message in the view "
      },
      "after": "4b8fe32340c9a9a1",
      "date": 1685614673246
    },
    {
      "id": "f990515c4a3f2ffc",
      "type": "move",
      "order": [
        "aa45c48ed5ff8e9d",
        "f990515c4a3f2ffc",
        "4b8fe32340c9a9a1",
        "4ce218e5e26f8833"
      ],
      "date": 1685614674810
    },
    {
      "type": "edit",
      "id": "f990515c4a3f2ffc",
      "item": {
        "type": "paragraph",
        "id": "f990515c4a3f2ffc",
        "text": "We display the BadBoy error in the view as they occur and … [https://github.com/RalfBarkow/vite-elm-dojo/commit/43299f2f68b7f743dbd7ab3a42786a0e1690be1c commit] – Display error message in the view "
      },
      "date": 1685614687332
    },
    {
      "type": "edit",
      "id": "f990515c4a3f2ffc",
      "item": {
        "type": "paragraph",
        "id": "f990515c4a3f2ffc",
        "text": "We show the BadBoy error in the view when it occurs. [https://github.com/RalfBarkow/vite-elm-dojo/commit/43299f2f68b7f743dbd7ab3a42786a0e1690be1c commit] – Display error message in the view "
      },
      "date": 1685614738662
    },
    {
      "type": "edit",
      "id": "4b8fe32340c9a9a1",
      "item": {
        "type": "paragraph",
        "id": "4b8fe32340c9a9a1",
        "text": "Now I don't want to describe exactly what should be written and anything else is a \"syntax error\". Wiki allows writers to write what they think makes sense. With [[Exploratory Parsing]] we now have a way for the parser writer to discover what has been written after the fact.\n\n"
      },
      "date": 1685614768945
    },
    {
      "item": {
        "type": "factory",
        "id": "60c38e45f5369d0f"
      },
      "id": "60c38e45f5369d0f",
      "type": "add",
      "after": "4ce218e5e26f8833",
      "date": 1685615606915
    },
    {
      "type": "edit",
      "id": "60c38e45f5369d0f",
      "item": {
        "type": "code",
        "id": "60c38e45f5369d0f",
        "text": "updatePageWithEdit : String -> String -> Page -> Page\nupdatePageWithEdit storyId editedText page =\n    let\n        updatedJournal =\n            List.map (updateJournalWithEdit storyId editedText) page.journal\n    in\n    { page | journal = updatedJournal }\n\nupdateJournalWithEdit : String -> String -> Journal -> Journal\nupdateJournalWithEdit storyId editedText journal =\n    if journal.typeOfJournal == \"edit\" && journal.item.id == storyId then\n        { journal | item = { journal.item | text = editedText } }\n    else\n        journal\n"
      },
      "date": 1685615608954
    },
    {
      "type": "add",
      "id": "338dc1cdd5b412ed",
      "item": {
        "type": "paragraph",
        "id": "338dc1cdd5b412ed",
        "text": "[…]"
      },
      "after": "4ce218e5e26f8833",
      "date": 1685615615631
    },
    {
      "item": {
        "type": "factory",
        "id": "dd56c242f1481bc5"
      },
      "id": "dd56c242f1481bc5",
      "type": "add",
      "after": "60c38e45f5369d0f",
      "date": 1685615880264
    },
    {
      "type": "edit",
      "id": "dd56c242f1481bc5",
      "item": {
        "type": "paragraph",
        "id": "dd56c242f1481bc5",
        "text": "To display the story as it was at the time recorded in the journal, you can modify the viewJournalItem function to render the story based on the recorded journal entry date. Here's an updated version of the code:"
      },
      "date": 1685615881755
    },
    {
      "item": {
        "type": "factory",
        "id": "898da205a21282ca"
      },
      "id": "898da205a21282ca",
      "type": "add",
      "after": "dd56c242f1481bc5",
      "date": 1685615885964
    },
    {
      "type": "edit",
      "id": "898da205a21282ca",
      "item": {
        "type": "code",
        "id": "898da205a21282ca",
        "text": "import Time exposing (Time, fromPosix)\n\n-- ...\n\nviewJournalItem : Journal -> Html Msg\nviewJournalItem journal =\n    case journal.typeOfJournal of\n        \"edit\" ->\n            div []\n                [ h3 [] [ text \"Edit\" ]\n                , p [] [ text journal.item.text ]\n                , button [ onClick (EditStory journal.item.id journal.item.text) ] [ text \"Edit\" ]\n                , viewStoryAtTime journal.date\n                ]\n\n        -- Handle other journal types\n\n        _ ->\n            text \"\"\n\nviewStoryAtTime : Int -> Html Msg\nviewStoryAtTime timestamp =\n    let\n        storyAtTime =\n            getStoryAtTime timestamp model.page.story\n    in\n    case storyAtTime of\n        Just story ->\n            div []\n                [ h3 [] [ text \"Story at Time\" ]\n                , p [] [ text story.text ]\n                ]\n                \n        Nothing ->\n            text \"\"\n\ngetStoryAtTime : Int -> List Story -> Maybe Story\ngetStoryAtTime timestamp stories =\n    let\n        timeAtJournal = fromPosix (toFloat timestamp)\n        storiesBeforeTime =\n            List.filter (\\story -> storyIsBeforeTime timeAtJournal story) stories\n    in\n    List.head storiesBeforeTime\n\nstoryIsBeforeTime : Time -> Story -> Bool\nstoryIsBeforeTime time story =\n    let\n        storyTime = fromPosix (toFloat story.timestamp)\n    in\n    storyTime <= time\n"
      },
      "date": 1685615887618
    },
    {
      "type": "edit",
      "id": "dd56c242f1481bc5",
      "item": {
        "type": "paragraph",
        "id": "dd56c242f1481bc5",
        "text": "Note: journal.typeOfJournal == \"edit\""
      },
      "date": 1685615914849
    },
    {
      "type": "add",
      "id": "7c0db39e319bc3f3",
      "item": {
        "type": "paragraph",
        "id": "7c0db39e319bc3f3",
        "text": "To display the story as it was at the time recorded in the journal, you can modify the viewJournalItem function to render the story based on the recorded journal entry date. Here's an updated version of the code:"
      },
      "after": "dd56c242f1481bc5",
      "date": 1685615915617
    },
    {
      "type": "edit",
      "id": "898da205a21282ca",
      "item": {
        "type": "code",
        "id": "898da205a21282ca",
        "text": "import Time\n\n-- ...\n\nviewJournalItem : Journal -> Html Msg\nviewJournalItem journal =\n    case journal.typeOfJournal of\n        \"edit\" ->\n            div []\n                [ h3 [] [ text \"Edit\" ]\n                , p [] [ text journal.item.text ]\n                , button [ onClick (EditStory journal.item.id journal.item.text) ] [ text \"Edit\" ]\n                , viewStoryAtTime journal.date\n                ]\n\n        -- Handle other journal types\n\n        _ ->\n            text \"\"\n\nviewStoryAtTime : Int -> Html Msg\nviewStoryAtTime timestamp =\n    let\n        storyAtTime =\n            getStoryAtTime timestamp model.page.story\n    in\n    case storyAtTime of\n        Just story ->\n            div []\n                [ h3 [] [ text \"Story at Time\" ]\n                , p [] [ text story.text ]\n                ]\n                \n        Nothing ->\n            text \"\"\n\ngetStoryAtTime : Int -> List Story -> Maybe Story\ngetStoryAtTime timestamp stories =\n    let\n        timeAtJournal = fromPosix (toFloat timestamp)\n        storiesBeforeTime =\n            List.filter (\\story -> storyIsBeforeTime timeAtJournal story) stories\n    in\n    List.head storiesBeforeTime\n\nstoryIsBeforeTime : Time -> Story -> Bool\nstoryIsBeforeTime time story =\n    let\n        storyTime = fromPosix (toFloat story.timestamp)\n    in\n    storyTime <= time\n"
      },
      "date": 1685616810472
    },
    {
      "item": {
        "type": "factory",
        "id": "81fb6be677674cdc"
      },
      "id": "81fb6be677674cdc",
      "type": "add",
      "after": "898da205a21282ca",
      "date": 1685616844204
    },
    {
      "type": "edit",
      "id": "81fb6be677674cdc",
      "item": {
        "type": "paragraph",
        "id": "81fb6be677674cdc",
        "text": "See Time"
      },
      "date": 1685616849303
    },
    {
      "type": "edit",
      "id": "81fb6be677674cdc",
      "item": {
        "type": "paragraph",
        "id": "81fb6be677674cdc",
        "text": "See Time [https://package.elm-lang.org/packages/elm/time/latest/Time page]"
      },
      "date": 1685616860161
    },
    {
      "item": {
        "type": "factory",
        "id": "4afcf06af03c0f0d"
      },
      "id": "4afcf06af03c0f0d",
      "type": "add",
      "after": "81fb6be677674cdc",
      "date": 1685616892392
    },
    {
      "type": "edit",
      "id": "4afcf06af03c0f0d",
      "item": {
        "type": "code",
        "id": "4afcf06af03c0f0d",
        "text": "elm install elm/time                                          ~/Projects/RalfBarkow/vite-elm-dojo\nI found it in your elm.json file, but in the \"indirect\" dependencies.\nShould I move it into \"direct\" dependencies for more general use? [Y/n]:"
      },
      "date": 1685616895096
    },
    {
      "item": {
        "type": "factory",
        "id": "d3347231d02a631f"
      },
      "id": "d3347231d02a631f",
      "type": "add",
      "after": "4afcf06af03c0f0d",
      "date": 1685617517390
    },
    {
      "type": "edit",
      "id": "d3347231d02a631f",
      "item": {
        "type": "pagefold",
        "id": "d3347231d02a631f",
        "text": "~"
      },
      "date": 1685617520243
    },
    {
      "item": {
        "type": "factory",
        "id": "003043144f510421"
      },
      "id": "003043144f510421",
      "type": "add",
      "after": "d3347231d02a631f",
      "date": 1685617521387
    },
    {
      "type": "edit",
      "id": "003043144f510421",
      "item": {
        "type": "paragraph",
        "id": "003043144f510421",
        "text": "If you cannot change the JSON data and it does not conform to the expected structure, you'll need to update your decoder to handle the actual structure of the JSON."
      },
      "date": 1685617523856
    },
    {
      "item": {
        "type": "factory",
        "id": "7900b75fe2d2b574"
      },
      "id": "7900b75fe2d2b574",
      "type": "add",
      "after": "003043144f510421",
      "date": 1685617537256
    },
    {
      "type": "edit",
      "id": "7900b75fe2d2b574",
      "item": {
        "type": "paragraph",
        "id": "7900b75fe2d2b574",
        "text": "Based on the error message you received (\"Expecting an OBJECT with a field named text\"), it seems that the item field in the JSON data is not always an object with a text field. To handle this situation, you can use the andThen function in your decoder to perform additional decoding based on the actual value of the item field."
      },
      "date": 1685617538485
    },
    {
      "item": {
        "type": "factory",
        "id": "dadc7d7db9a95e85"
      },
      "id": "dadc7d7db9a95e85",
      "type": "add",
      "after": "7900b75fe2d2b574",
      "date": 1685618147912
    },
    {
      "type": "edit",
      "id": "dadc7d7db9a95e85",
      "item": {
        "type": "paragraph",
        "id": "dadc7d7db9a95e85",
        "text": "Here's an example of how you can modify your decodeStoryEdit decoder to handle different types of item values:"
      },
      "date": 1685618149320
    },
    {
      "item": {
        "type": "factory",
        "id": "aee61da1deff0f53"
      },
      "id": "aee61da1deff0f53",
      "type": "add",
      "after": "dadc7d7db9a95e85",
      "date": 1685618158315
    },
    {
      "type": "edit",
      "id": "aee61da1deff0f53",
      "item": {
        "type": "code",
        "id": "aee61da1deff0f53",
        "text": "import Json.Decode as Json exposing (Decoder, field, int, string, andThen)\n\ndecodeStoryEdit : Decoder Journal\ndecodeStoryEdit =\n    map4 Journal\n        (field \"type\" string)\n        (field \"id\" string)\n        (field \"item\" decodeJournalItem)\n        (field \"date\" int)\n\ndecodeJournalItem : Decoder JournalItem\ndecodeJournalItem =\n    field \"type\" string |> andThen decodeItemOfType\n\ndecodeItemOfType : String -> Decoder JournalItem\ndecodeItemOfType itemType =\n    case itemType of\n        \"paragraph\" ->\n            decodeParagraph\n\n        -- Handle other item types here\n\n        _ ->\n            -- Handle unknown item types or fallback behavior\n            fail (\"Unknown item type: \" ++ itemType)\n\ndecodeParagraph : Decoder JournalItem\ndecodeParagraph =\n    map3 Paragraph\n        (field \"type\" string)\n        (field \"id\" string)\n        (field \"text\" string)\n"
      },
      "date": 1685618160310
    },
    {
      "item": {
        "type": "factory",
        "id": "0ebb62514979fd49"
      },
      "id": "0ebb62514979fd49",
      "type": "add",
      "after": "aee61da1deff0f53",
      "date": 1685618426533
    },
    {
      "type": "edit",
      "id": "0ebb62514979fd49",
      "item": {
        "type": "paragraph",
        "id": "0ebb62514979fd49",
        "text": "[…]"
      },
      "date": 1685618429563
    },
    {
      "type": "add",
      "id": "6216fb87cedddc99",
      "item": {
        "type": "paragraph",
        "id": "6216fb87cedddc99",
        "text": "Journal types are edit,  add, move etc.\n\n"
      },
      "after": "0ebb62514979fd49",
      "date": 1685618430802
    },
    {
      "item": {
        "type": "factory",
        "id": "cf3df5fda910f4a5"
      },
      "id": "cf3df5fda910f4a5",
      "type": "add",
      "after": "6216fb87cedddc99",
      "date": 1685618444592
    },
    {
      "type": "edit",
      "id": "cf3df5fda910f4a5",
      "item": {
        "type": "paragraph",
        "id": "cf3df5fda910f4a5",
        "text": "If the variations in the \"item\" field are based on the different journal types (e.g., edit, add, move), you can update the decodeStoryEdit function accordingly. Here's an example:"
      },
      "date": 1685618445931
    },
    {
      "item": {
        "type": "factory",
        "id": "150d0ddde9d37ec7"
      },
      "id": "150d0ddde9d37ec7",
      "type": "add",
      "after": "cf3df5fda910f4a5",
      "date": 1685618455189
    },
    {
      "type": "edit",
      "id": "150d0ddde9d37ec7",
      "item": {
        "type": "code",
        "id": "150d0ddde9d37ec7",
        "text": "decodeStoryEdit : Decoder Journal\ndecodeStoryEdit =\n    andThen decodeJournalByType (field \"type\")\n\n\ndecodeJournalByType : String -> Decoder Journal\ndecodeJournalByType journalType =\n    case journalType of\n        \"edit\" ->\n            map4 Journal\n                (succeed journalType)\n                (field \"id\" string)\n                decodeEditItem\n                (field \"date\" int)\n\n        \"add\" ->\n            map4 Journal\n                (succeed journalType)\n                (field \"id\" string)\n                decodeAddItem\n                (field \"date\" int)\n\n        \"move\" ->\n            map4 Journal\n                (succeed journalType)\n                (field \"id\" string)\n                decodeMoveItem\n                (field \"date\" int)\n\n        _ ->\n            fail (\"Unsupported journal type: \" ++ journalType)\n\n\ndecodeEditItem : Decoder JournalItem\ndecodeEditItem =\n    -- Decoder for 'edit' type journal item\n    -- Adjust the decoder according to the expected fields for the 'edit' type\n\n\ndecodeAddItem : Decoder JournalItem\ndecodeAddItem =\n    -- Decoder for 'add' type journal item\n    -- Adjust the decoder according to the expected fields for the 'add' type\n\n\ndecodeMoveItem : Decoder JournalItem\ndecodeMoveItem =\n    -- Decoder for 'move' type journal item\n    -- Adjust the decoder according to the expected fields for the 'move' type\n"
      },
      "date": 1685618457118
    },
    {
      "item": {
        "type": "factory",
        "id": "48b0706d2b615aec"
      },
      "id": "48b0706d2b615aec",
      "type": "add",
      "after": "150d0ddde9d37ec7",
      "date": 1685619728580
    },
    {
      "type": "edit",
      "id": "48b0706d2b615aec",
      "item": {
        "type": "paragraph",
        "id": "48b0706d2b615aec",
        "text": "[…]"
      },
      "date": 1685619731286
    },
    {
      "item": {
        "type": "factory",
        "id": "b71d74a9b75bede8"
      },
      "id": "b71d74a9b75bede8",
      "type": "add",
      "after": "7f32c03effdf3b7c",
      "date": 1685619732905
    },
    {
      "type": "edit",
      "id": "b71d74a9b75bede8",
      "item": {
        "type": "code",
        "id": "b71d74a9b75bede8",
        "text": "-- MODEL\n\ntype alias Model =\n    { page : Result Http.Error Page\n    }\n\n...\n\n-- UPDATE\n\ntype Msg\n    = FetchPage\n    | GotPage (Result Http.Error Page)\n\n...\n\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n    case msg of\n        FetchPage ->\n            (model, getWikiPageJson)\n\n        GotPage result ->\n            ({ model | page = result }, Cmd.none)\n\n...\n\n-- VIEW\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ h2 [] [ text \"Wiki Page JSON\" ]\n        , viewPage model.page\n        , viewError model.page\n        ]\n\n\nviewPage : Result Http.Error Page -> Html Msg\nviewPage result =\n    case result of\n        Ok page ->\n            div []\n                [ button [ onClick FetchPage, style \"display\" \"block\" ] [ text \"Fetch Page\" ]\n                , div [ style \"font-weight\" \"bold\" ] [ text page.title ]\n                ]\n\n        Err _ ->\n            text \"Loading...\"\n\n\n...\n\n-- HTTP\n\ndecodePage : Decoder Page\ndecodePage =\n    map3 Page\n        (field \"title\" string)\n        (field \"story\" (list decodeStory))\n        (field \"journal\" (list decodeJournal))\n\n\ndecodeStory : Decoder Story\ndecodeStory =\n    map3 Story\n        (field \"type\" string)\n        (field \"id\" string)\n        (field \"text\" string)\n\n\ndecodeJournal : Decoder Journal\ndecodeJournal =\n    map4 Journal\n        (field \"type\" string)\n        (field \"id\" string)\n        decodeJournalItem\n        (field \"date\" int)\n\n\ndecodeJournalItem : Decoder JournalItem\ndecodeJournalItem =\n    map3 JournalItem\n        (field \"type\" string)\n        (field \"id\" string)\n        (field \"text\" string)\n\n...\n\ndecodeJournalByType : String -> Decoder Journal\ndecodeJournalByType journalType =\n    ...\n\n...\n\ndecodeEditItem : Decoder JournalItem\ndecodeEditItem =\n    map3 JournalItem\n        (field \"type\" string)\n        (field \"id\" string)\n        (field \"text\" string)\n\n...\n\ndecodeAddItem : Decoder JournalItem\ndecodeAddItem =\n    map3 JournalItem\n        (field \"type\" string)\n        (field \"id\" string)\n        (field \"text\" string)\n\n...\n\ndecodeMoveItem : Decoder JournalItem\ndecodeMoveItem =\n    map4 JournalItem\n        (field \"type\" string)\n        (field \"id\" string)\n        (field \"from\" string)\n        (field \"to\" string)\n"
      },
      "date": 1685619734844
    },
    {
      "type": "remove",
      "id": "b71d74a9b75bede8",
      "date": 1685620491337
    },
    {
      "type": "remove",
      "id": "7c0db39e319bc3f3",
      "date": 1685620509959
    },
    {
      "type": "remove",
      "id": "898da205a21282ca",
      "date": 1685620511856
    },
    {
      "type": "remove",
      "id": "81fb6be677674cdc",
      "date": 1685620513954
    },
    {
      "type": "remove",
      "id": "4afcf06af03c0f0d",
      "date": 1685620515655
    },
    {
      "type": "remove",
      "id": "60c38e45f5369d0f",
      "date": 1685640483349
    },
    {
      "type": "remove",
      "id": "aee61da1deff0f53",
      "date": 1685640494448
    },
    {
      "type": "remove",
      "id": "dadc7d7db9a95e85",
      "date": 1685640495505
    },
    {
      "type": "remove",
      "id": "003043144f510421",
      "date": 1685640506175
    },
    {
      "type": "remove",
      "id": "7900b75fe2d2b574",
      "date": 1685640509966
    },
    {
      "type": "remove",
      "id": "0ebb62514979fd49",
      "date": 1685640513034
    },
    {
      "type": "remove",
      "id": "6216fb87cedddc99",
      "date": 1685640514878
    },
    {
      "type": "remove",
      "id": "cf3df5fda910f4a5",
      "date": 1685640518103
    },
    {
      "type": "remove",
      "id": "150d0ddde9d37ec7",
      "date": 1685640519191
    },
    {
      "type": "remove",
      "id": "48b0706d2b615aec",
      "date": 1685640521642
    },
    {
      "item": {
        "type": "factory",
        "id": "940590f73186786d"
      },
      "id": "940590f73186786d",
      "type": "add",
      "after": "d3347231d02a631f",
      "date": 1685640534084
    },
    {
      "type": "edit",
      "id": "940590f73186786d",
      "item": {
        "type": "reference",
        "id": "940590f73186786d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "create-new-page-test",
        "title": "Create New Page Test",
        "text": "add test text"
      },
      "date": 1685640536371
    },
    {
      "item": {
        "type": "factory",
        "id": "72464f32db6795bd"
      },
      "id": "72464f32db6795bd",
      "type": "add",
      "after": "940590f73186786d",
      "date": 1685686552576
    },
    {
      "type": "edit",
      "id": "72464f32db6795bd",
      "item": {
        "type": "paragraph",
        "id": "72464f32db6795bd",
        "text": "JSON for Create New Page Test"
      },
      "date": 1685686554243
    },
    {
      "type": "edit",
      "id": "4b8fe32340c9a9a1",
      "item": {
        "type": "paragraph",
        "id": "4b8fe32340c9a9a1",
        "text": "I don't want to describe exactly what should be written and anything else is a \"syntax error\". Wiki allows writers to write what they think makes sense. With [[Exploratory Parsing]] we now have a way for the parser writer to discover what has been written after the fact.\n\n"
      },
      "date": 1685871166620
    },
    {
      "type": "edit",
      "id": "4ce218e5e26f8833",
      "item": {
        "type": "paragraph",
        "id": "4ce218e5e26f8833",
        "text": "I'd like to change the behavior of the Try Again! button. The application should automatically try to read the next journal object."
      },
      "date": 1685871199873
    }
  ]
}