{
  "title": "Generic Type",
  "story": [
    {
      "type": "paragraph",
      "id": "4f1a7e4c8e52c100",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=1997 33:18]\na generic type is a map from one or more types to types put another way a generic type is a"
    },
    {
      "type": "paragraph",
      "id": "8e8785d6a1ac7bd3",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "f8a445ad8b14bb36",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2078 34:38]\nsometimes an overloaded word is called [[Polymorphic]] which means that the word has many forms but the truth is that the word has but"
    },
    {
      "type": "paragraph",
      "id": "ca533aa1cf5958ef",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "038783d94a16d7d3",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2184 36:24] Complex Number … [[Pair]] of [[Number]]s"
    },
    {
      "type": "paragraph",
      "id": "0cdf4f9b0f63021f",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "120674718623f2d6",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2236 37:16] [[Interval]]"
    },
    {
      "type": "paragraph",
      "id": "7cc10796aa0bbe49",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2265 37:42]\njohn horton conway wants to find a game to be a pair of sets of games see his book on numbers and games"
    },
    {
      "type": "paragraph",
      "id": "ac8ae53df5c3a8f4",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2302 38:22] [[Vector]]"
    },
    {
      "type": "paragraph",
      "id": "bae736f44ac562fe",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2436 40:34]\ngeneric types and overloaded\n40:39\noperators would let a user code up all of these and in such a way that they would look in all ways just like the types that are\n40:44\nbuilt in they would let users grow the java programming language in a smooth and clean way and it would\n40:51\nnot just be for numbers generic types would be good for coding hash sets for example and there are many other uses\n40:57\nand each user would not have to code up such number classes each for his own use when a language gives you the right\n41:03\ntools such classes can be coded by a few and then put up as libraries for others to use\n41:09\nor not as they choose but they don't have to be built in as part of the base language\n\n"
    },
    {
      "type": "paragraph",
      "id": "da52de222029efa2",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2474 41:15] if you give a person a fish you can eat for a day if you teach a person to fish he can eat\n41:21\nhis whole life long if you give a person tools he can make a fishing pole\n41:27\nand lots of other tools he can build a machine to crank out fishing poles in this way he can help others to catch\n41:34\nfish\n"
    },
    {
      "type": "paragraph",
      "id": "61425ee459c0302b",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2498 41:42]\nmeta means that you step back from your own [[Place]]\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\n[[Verbs Turn to Nouns]] what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the [[Slot]] of an other pattern\n42:05\na meta-foo is a foo in whose slots you can put parts of a foo"
    },
    {
      "type": "paragraph",
      "id": "3c05228ed1bcde1e",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2533 42:13]\nin a way a language design of the old school is a pattern for programs but now we\n42:19\nneed to go meta we should now think of a language design as being a pattern for language\n42:24\ndesigns a tool for making more tools of the same kind this is the nub of what i want to say\n42:32\na language design can no longer be a thing it must be a pattern a pattern for\n42:38\ngrowth a pattern for growing the pattern for defining the patterns that programmers can use for their real\n42:44\nwork and their main goal my point is that a good programmer in these times does not just write programs\n42:51\na good programmer builds a working vocabulary in other words a good programmer does language design though not from scratch\n42:58\nbut building on the frame of a base language"
    },
    {
      "type": "paragraph",
      "id": "d8a0210363457160",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2581 43:04]\nin the course of giving this talk because i started with a small language i've had to define 50 or more new words\n43:10\nor phrases and 16 names of persons or things and i laid out six rules for making new words\n43:16\nfrom old ones in this way i added to the base language\n"
    },
    {
      "type": "pagefold",
      "id": "8694b3cb91f2af06",
      "text": "ChatGPT Like the Child"
    },
    {
      "type": "paragraph",
      "id": "65facf6f3acd300b",
      "text": "43:21\nif i were to write a book starting from just the words one syllable i am sure that i would have to define\n43:27\nhundreds of new words it should give no one pause to note that the writing of a program having a\n43:32\nmillion lines of code might need many many hundreds of new words\n43:38\nthat is to say a new language built on the base language i will be so bold as to say that it\n43:45\ncannot be done any other way well there may be one other way which is\n43:51\nto use a large rich programming language that has grown over tens or hundreds of years that has\n43:57\nall we need to say what we want to say that we are taught as we grow up and take for granted\n44:04\nit may be that a hundred years from now there will be a programming language that by then is stood the test of time\n44:10\nneeds no more changes for most uses and is used by all persons who write programs because each [[Child]] learns it in school"
    },
    {
      "type": "paragraph",
      "id": "68604d1580968ff2",
      "text": "[[Language Design]] (see Microsoft to make [[ChatGPT]]  available soon via Azure cloud service [https://www.heise.de/news/Microsoft-macht-ChatGPT-bald-ueber-Cloud-Dienst-Azure-verfuegbar-7460919.html heise.de])"
    },
    {
      "type": "paragraph",
      "id": "0c0c3653363edf02",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2657 44:17]\nbut that is not where we are now so language design is not at all the\n44:25\nsame kind of work it was 30 years ago or 20 years ago"
    },
    {
      "type": "paragraph",
      "id": "35ebe8483da7d8cf",
      "text": "[[Plan For Growth]] [⇒ [[Limits to Growth]]]"
    },
    {
      "type": "paragraph",
      "id": "37d203ddef1057a0",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=2724 45:25]\nis to [[plan]] for growth\n45:32\nplan for growth with help from users this is a win for you because you have help this is a win for the users\n45:39\nbecause they get to have their say and get to bend the growth to their needs but you need to have one\n45:45\nor more persons two or one or more groups to take on the task of judging and testing and sifting what the users\n45:51\ndo and say and adding what they think best to the big pile of code in the hope that other users will trust\n45:57\nwhat they say and not have to go to all the work to test and judge and sift each new claim\n46:03\nor each new piece of code each for his own self. Parts of the language must be designed\n46:09\nto help the task of growth of growing the language"
    },
    {
      "type": "paragraph",
      "id": "c5288eab03e85038",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "a77c62b43555ffa7",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=3078 51:17]\nI learned in my youth from the books of such great teachers of writing as strunk\n51:23\nand white that it is better to choose short words when i can i should not choose long hard words just\n51:30\nto make other persons think that i know a lot i should try to make my thoughts clear"
    },
    {
      "type": "paragraph",
      "id": "57af4c4723ffd26a",
      "text": "[https://youtu.be/lw6TaiXzHAE?t=3104 51:41]\nFrom the work of planning this talk in\n51:47\nwhich i have tried to go with this rule of short words much farther than in the past i found\n51:53\nthat for the most part they were right. Short words work well if we choose them well [⇒ [[Infinitely Slow Step]]]"
    },
    {
      "type": "paragraph",
      "id": "b624f741ccefb1dd",
      "text": "[…]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Generic Type",
        "story": []
      },
      "date": 1673999713456
    },
    {
      "id": "4f1a7e4c8e52c100",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4f1a7e4c8e52c100",
        "text": "[[https://youtu.be/lw6TaiXzHAE?t=1997 33:18]]\na generic type is a map from one or more types to types put another way a generic type is a"
      },
      "date": 1673999717217
    },
    {
      "type": "edit",
      "id": "4f1a7e4c8e52c100",
      "item": {
        "type": "paragraph",
        "id": "4f1a7e4c8e52c100",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=1997 33:18]]\na generic type is a map from one or more types to types put another way a generic type is a"
      },
      "date": 1673999722623
    },
    {
      "type": "edit",
      "id": "4f1a7e4c8e52c100",
      "item": {
        "type": "paragraph",
        "id": "4f1a7e4c8e52c100",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=1997 33:18]\na generic type is a map from one or more types to types put another way a generic type is a"
      },
      "date": 1673999726651
    },
    {
      "item": {
        "type": "factory",
        "id": "8e8785d6a1ac7bd3"
      },
      "id": "8e8785d6a1ac7bd3",
      "type": "add",
      "after": "4f1a7e4c8e52c100",
      "date": 1673999840476
    },
    {
      "type": "edit",
      "id": "8e8785d6a1ac7bd3",
      "item": {
        "type": "paragraph",
        "id": "8e8785d6a1ac7bd3",
        "text": "[…]"
      },
      "date": 1673999844097
    },
    {
      "type": "add",
      "id": "f8a445ad8b14bb36",
      "item": {
        "type": "paragraph",
        "id": "f8a445ad8b14bb36",
        "text": "\n34:38\nsometimes an overloaded word is called [[polymorphic]] which means that the word has many forms but the truth is that the word has but"
      },
      "after": "8e8785d6a1ac7bd3",
      "date": 1673999855264
    },
    {
      "type": "edit",
      "id": "f8a445ad8b14bb36",
      "item": {
        "type": "paragraph",
        "id": "f8a445ad8b14bb36",
        "text": "34:38\nsometimes an overloaded word is called [[Polymorphic]] which means that the word has many forms but the truth is that the word has but"
      },
      "date": 1673999879383
    },
    {
      "type": "edit",
      "id": "f8a445ad8b14bb36",
      "item": {
        "type": "paragraph",
        "id": "f8a445ad8b14bb36",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2078 34:38]\nsometimes an overloaded word is called [[Polymorphic]] which means that the word has many forms but the truth is that the word has but"
      },
      "date": 1673999900051
    },
    {
      "item": {
        "type": "factory",
        "id": "ca533aa1cf5958ef"
      },
      "id": "ca533aa1cf5958ef",
      "type": "add",
      "after": "f8a445ad8b14bb36",
      "date": 1674000038801
    },
    {
      "type": "edit",
      "id": "ca533aa1cf5958ef",
      "item": {
        "type": "paragraph",
        "id": "ca533aa1cf5958ef",
        "text": "[…]"
      },
      "date": 1674000042629
    },
    {
      "type": "add",
      "id": "038783d94a16d7d3",
      "item": {
        "type": "paragraph",
        "id": "038783d94a16d7d3",
        "text": "https://youtu.be/lw6TaiXzHAE?t=2184"
      },
      "after": "ca533aa1cf5958ef",
      "date": 1674000046758
    },
    {
      "type": "edit",
      "id": "038783d94a16d7d3",
      "item": {
        "type": "paragraph",
        "id": "038783d94a16d7d3",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2184 36:24] Complex Number"
      },
      "date": 1674000073077
    },
    {
      "type": "edit",
      "id": "038783d94a16d7d3",
      "item": {
        "type": "paragraph",
        "id": "038783d94a16d7d3",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2184 36:24] Complex Number … [[Pair]] of [[Number]]s"
      },
      "date": 1674000100103
    },
    {
      "item": {
        "type": "factory",
        "id": "0cdf4f9b0f63021f"
      },
      "id": "0cdf4f9b0f63021f",
      "type": "add",
      "after": "038783d94a16d7d3",
      "date": 1674000147575
    },
    {
      "type": "edit",
      "id": "0cdf4f9b0f63021f",
      "item": {
        "type": "paragraph",
        "id": "0cdf4f9b0f63021f",
        "text": "[…]"
      },
      "date": 1674000151007
    },
    {
      "type": "add",
      "id": "120674718623f2d6",
      "item": {
        "type": "paragraph",
        "id": "120674718623f2d6",
        "text": "https://youtu.be/lw6TaiXzHAE?t=2236 "
      },
      "after": "0cdf4f9b0f63021f",
      "date": 1674000155111
    },
    {
      "type": "edit",
      "id": "120674718623f2d6",
      "item": {
        "type": "paragraph",
        "id": "120674718623f2d6",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2236 37:16 [[Interval]]"
      },
      "date": 1674000179919
    },
    {
      "type": "edit",
      "id": "120674718623f2d6",
      "item": {
        "type": "paragraph",
        "id": "120674718623f2d6",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2236 37:16] [[Interval]]"
      },
      "date": 1674000189241
    },
    {
      "item": {
        "type": "factory",
        "id": "7cc10796aa0bbe49"
      },
      "id": "7cc10796aa0bbe49",
      "type": "add",
      "after": "120674718623f2d6",
      "date": 1674000258729
    },
    {
      "type": "edit",
      "id": "7cc10796aa0bbe49",
      "item": {
        "type": "paragraph",
        "id": "7cc10796aa0bbe49",
        "text": "\n37:42\nlanguage john horton conway wants to find a game\n37:48\nto be a pair of sets of games see his book on numbers and games"
      },
      "date": 1674000264197
    },
    {
      "type": "edit",
      "id": "7cc10796aa0bbe49",
      "item": {
        "type": "paragraph",
        "id": "7cc10796aa0bbe49",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2262 37:42]\njohn horton conway wants to find a game to be a pair of sets of games see his book on numbers and games"
      },
      "date": 1674000291813
    },
    {
      "type": "edit",
      "id": "7cc10796aa0bbe49",
      "item": {
        "type": "paragraph",
        "id": "7cc10796aa0bbe49",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2265 37:42]\njohn horton conway wants to find a game to be a pair of sets of games see his book on numbers and games"
      },
      "date": 1674000314007
    },
    {
      "item": {
        "type": "factory",
        "id": "ac8ae53df5c3a8f4"
      },
      "id": "ac8ae53df5c3a8f4",
      "type": "add",
      "after": "7cc10796aa0bbe49",
      "date": 1674000367238
    },
    {
      "type": "edit",
      "id": "ac8ae53df5c3a8f4",
      "item": {
        "type": "paragraph",
        "id": "ac8ae53df5c3a8f4",
        "text": "https://youtu.be/lw6TaiXzHAE?t=2302 "
      },
      "date": 1674000371295
    },
    {
      "type": "edit",
      "id": "ac8ae53df5c3a8f4",
      "item": {
        "type": "paragraph",
        "id": "ac8ae53df5c3a8f4",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2302 38:22] Vector"
      },
      "date": 1674000391137
    },
    {
      "type": "edit",
      "id": "ac8ae53df5c3a8f4",
      "item": {
        "type": "paragraph",
        "id": "ac8ae53df5c3a8f4",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2302 38:22] [[Vector]]"
      },
      "date": 1674000412365
    },
    {
      "item": {
        "type": "factory",
        "id": "fd9d4c96238469f4"
      },
      "id": "fd9d4c96238469f4",
      "type": "add",
      "after": "ac8ae53df5c3a8f4",
      "date": 1674000726068
    },
    {
      "type": "edit",
      "id": "fd9d4c96238469f4",
      "item": {
        "type": "paragraph",
        "id": "fd9d4c96238469f4",
        "text": "\n40:34\nuse them do kvetch generic types and overloaded\n40:39\noperators would let a user code up all of these and in such a way that they would look in all ways just like the types that are\n40:44\nbuilt in they would let users grow the java programming language in a smooth and clean way and it would\n40:51\nnot just be for numbers generic types would be good for coding hash sets for example and there are many other uses\n40:57\nand each user would not have to code up such number classes each for his own use when a language gives you the right\n41:03\ntools such classes can be coded by a few and then put up as libraries for others to use\n41:09\nor not as they choose but they don't have to be built in as part of the base language\n41:15\nif you give a person a fish you can eat for a day if you teach a person to fish he can eat\n41:21\nhis whole life long if you give a person tools he can make a fishing pole\n41:27\nand lots of other tools he can build a machine to crank out fishing poles in this way he can help others to catch\n41:34\nfish\n41:42\nmeta means that you step back from your own place\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\nverbs turn to nouns what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na metaphoo is a foo in whose slots you can put parts of a foo"
      },
      "date": 1674000731714
    },
    {
      "type": "edit",
      "id": "fd9d4c96238469f4",
      "item": {
        "type": "paragraph",
        "id": "fd9d4c96238469f4",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2434 40:34]\nuse them do kvetch generic types and overloaded\n40:39\noperators would let a user code up all of these and in such a way that they would look in all ways just like the types that are\n40:44\nbuilt in they would let users grow the java programming language in a smooth and clean way and it would\n40:51\nnot just be for numbers generic types would be good for coding hash sets for example and there are many other uses\n40:57\nand each user would not have to code up such number classes each for his own use when a language gives you the right\n41:03\ntools such classes can be coded by a few and then put up as libraries for others to use\n41:09\nor not as they choose but they don't have to be built in as part of the base language\n41:15\nif you give a person a fish you can eat for a day if you teach a person to fish he can eat\n41:21\nhis whole life long if you give a person tools he can make a fishing pole\n41:27\nand lots of other tools he can build a machine to crank out fishing poles in this way he can help others to catch\n41:34\nfish\n41:42\nmeta means that you step back from your own place\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\nverbs turn to nouns what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na metaphoo is a foo in whose slots you can put parts of a foo"
      },
      "date": 1674000752893
    },
    {
      "type": "edit",
      "id": "fd9d4c96238469f4",
      "item": {
        "type": "paragraph",
        "id": "fd9d4c96238469f4",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2434 40:34]\ngeneric types and overloaded\n40:39\noperators would let a user code up all of these and in such a way that they would look in all ways just like the types that are\n40:44\nbuilt in they would let users grow the java programming language in a smooth and clean way and it would\n40:51\nnot just be for numbers generic types would be good for coding hash sets for example and there are many other uses\n40:57\nand each user would not have to code up such number classes each for his own use when a language gives you the right\n41:03\ntools such classes can be coded by a few and then put up as libraries for others to use\n41:09\nor not as they choose but they don't have to be built in as part of the base language\n41:15\nif you give a person a fish you can eat for a day if you teach a person to fish he can eat\n41:21\nhis whole life long if you give a person tools he can make a fishing pole\n41:27\nand lots of other tools he can build a machine to crank out fishing poles in this way he can help others to catch\n41:34\nfish\n41:42\nmeta means that you step back from your own place\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\nverbs turn to nouns what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na metaphoo is a foo in whose slots you can put parts of a foo"
      },
      "date": 1674000778062
    },
    {
      "type": "remove",
      "id": "fd9d4c96238469f4",
      "date": 1674000809815
    },
    {
      "type": "add",
      "id": "bae736f44ac562fe",
      "item": {
        "type": "paragraph",
        "id": "bae736f44ac562fe",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2434 40:34]\ngeneric types and overloaded\n40:39\noperators would let a user code up all of these and in such a way that they would look in all ways just like the types that are\n40:44\nbuilt in they would let users grow the java programming language in a smooth and clean way and it would\n40:51\nnot just be for numbers generic types would be good for coding hash sets for example and there are many other uses\n40:57\nand each user would not have to code up such number classes each for his own use when a language gives you the right\n41:03\ntools such classes can be coded by a few and then put up as libraries for others to use\n41:09\nor not as they choose but they don't have to be built in as part of the base language\n\n"
      },
      "after": "ac8ae53df5c3a8f4",
      "date": 1674000847186
    },
    {
      "type": "add",
      "id": "da52de222029efa2",
      "item": {
        "type": "paragraph",
        "id": "da52de222029efa2",
        "text": "41:15 if you give a person a fish you can eat for a day if you teach a person to fish he can eat\n41:21\nhis whole life long if you give a person tools he can make a fishing pole\n41:27\nand lots of other tools he can build a machine to crank out fishing poles in this way he can help others to catch\n41:34\nfish\n41:42\nmeta means that you step back from your own place\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\nverbs turn to nouns what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na metaphoo is a foo in whose slots you can put parts of a foo"
      },
      "after": "bae736f44ac562fe",
      "date": 1674000851159
    },
    {
      "type": "edit",
      "id": "bae736f44ac562fe",
      "item": {
        "type": "paragraph",
        "id": "bae736f44ac562fe",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2436 40:34]\ngeneric types and overloaded\n40:39\noperators would let a user code up all of these and in such a way that they would look in all ways just like the types that are\n40:44\nbuilt in they would let users grow the java programming language in a smooth and clean way and it would\n40:51\nnot just be for numbers generic types would be good for coding hash sets for example and there are many other uses\n40:57\nand each user would not have to code up such number classes each for his own use when a language gives you the right\n41:03\ntools such classes can be coded by a few and then put up as libraries for others to use\n41:09\nor not as they choose but they don't have to be built in as part of the base language\n\n"
      },
      "date": 1674000966682
    },
    {
      "type": "edit",
      "id": "da52de222029efa2",
      "item": {
        "type": "paragraph",
        "id": "da52de222029efa2",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2473 41:15] if you give a person a fish you can eat for a day if you teach a person to fish he can eat\n41:21\nhis whole life long if you give a person tools he can make a fishing pole\n41:27\nand lots of other tools he can build a machine to crank out fishing poles in this way he can help others to catch\n41:34\nfish\n41:42\nmeta means that you step back from your own place\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\nverbs turn to nouns what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na metaphoo is a foo in whose slots you can put parts of a foo"
      },
      "date": 1674001037940
    },
    {
      "type": "edit",
      "id": "da52de222029efa2",
      "item": {
        "type": "paragraph",
        "id": "da52de222029efa2",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2474 41:15] if you give a person a fish you can eat for a day if you teach a person to fish he can eat\n41:21\nhis whole life long if you give a person tools he can make a fishing pole\n41:27\nand lots of other tools he can build a machine to crank out fishing poles in this way he can help others to catch\n41:34\nfish\n41:42\nmeta means that you step back from your own place\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\nverbs turn to nouns what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na metaphoo is a foo in whose slots you can put parts of a foo"
      },
      "date": 1674001067750
    },
    {
      "type": "edit",
      "id": "da52de222029efa2",
      "item": {
        "type": "paragraph",
        "id": "da52de222029efa2",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2474 41:15] if you give a person a fish you can eat for a day if you teach a person to fish he can eat\n41:21\nhis whole life long if you give a person tools he can make a fishing pole\n41:27\nand lots of other tools he can build a machine to crank out fishing poles in this way he can help others to catch\n41:34\nfish\n"
      },
      "date": 1674001109614
    },
    {
      "type": "add",
      "id": "61425ee459c0302b",
      "item": {
        "type": "paragraph",
        "id": "61425ee459c0302b",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2498 41:42]\nmeta means that you step back from your own place\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\nverbs turn to nouns what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na metaphoo is a foo in whose slots you can put parts of a foo"
      },
      "after": "da52de222029efa2",
      "date": 1674001119286
    },
    {
      "type": "edit",
      "id": "61425ee459c0302b",
      "item": {
        "type": "paragraph",
        "id": "61425ee459c0302b",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2498 41:42]\nmeta means that you step back from your own [[Place]]\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\n[[verbs turn to nouns]] what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na meta-foo is a foo in whose slots you can put parts of a foo"
      },
      "date": 1674001210886
    },
    {
      "type": "edit",
      "id": "61425ee459c0302b",
      "item": {
        "type": "paragraph",
        "id": "61425ee459c0302b",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2498 41:42]\nmeta means that you step back from your own [[Place]]\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\n[[Verbs Turn to Nouns]] what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the slot of an other pattern\n42:05\na meta-foo is a foo in whose slots you can put parts of a foo"
      },
      "date": 1674001221299
    },
    {
      "type": "edit",
      "id": "61425ee459c0302b",
      "item": {
        "type": "paragraph",
        "id": "61425ee459c0302b",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2498 41:42]\nmeta means that you step back from your own [[Place]]\n41:47\nwhat you used to do is now what you see what you were is now what you act on\n41:54\n[[Verbs Turn to Nouns]] what you used to think of as a pattern\n42:00\nis now treated as a thing to put in the [[Slot]] of an other pattern\n42:05\na meta-foo is a foo in whose slots you can put parts of a foo"
      },
      "date": 1674001265344
    },
    {
      "item": {
        "type": "factory",
        "id": "3c05228ed1bcde1e"
      },
      "id": "3c05228ed1bcde1e",
      "type": "add",
      "after": "61425ee459c0302b",
      "date": 1674001416060
    },
    {
      "type": "edit",
      "id": "3c05228ed1bcde1e",
      "item": {
        "type": "paragraph",
        "id": "3c05228ed1bcde1e",
        "text": "\n42:13\nin a way a language design of the old school is a pattern for programs but now we\n42:19\nneed to go meta we should now think of a language design as being a pattern for language\n42:24\ndesigns a tool for making more tools of the same kind this is the nub of what i want to say\n42:32\na language design can no longer be a thing it must be a pattern a pattern for\n42:38\ngrowth a pattern for growing the pattern for defining the patterns that programmers can use for their real\n42:44\nwork and their main goal my point is that a good programmer in these times does not just write programs\n42:51\na good programmer builds a working vocabulary in other words a good programmer does language design though not from scratch\n42:58\nbut building on the frame of a base language"
      },
      "date": 1674001420298
    },
    {
      "type": "edit",
      "id": "3c05228ed1bcde1e",
      "item": {
        "type": "paragraph",
        "id": "3c05228ed1bcde1e",
        "text": "42:13\nin a way a language design of the old school is a pattern for programs but now we\n42:19\nneed to go meta we should now think of a language design as being a pattern for language\n42:24\ndesigns a tool for making more tools of the same kind this is the nub of what i want to say\n42:32\na language design can no longer be a thing it must be a pattern a pattern for\n42:38\ngrowth a pattern for growing the pattern for defining the patterns that programmers can use for their real\n42:44\nwork and their main goal my point is that a good programmer in these times does not just write programs\n42:51\na good programmer builds a working vocabulary in other words a good programmer does language design though not from scratch\n42:58\nbut building on the frame of a base language"
      },
      "date": 1674001432446
    },
    {
      "type": "edit",
      "id": "3c05228ed1bcde1e",
      "item": {
        "type": "paragraph",
        "id": "3c05228ed1bcde1e",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2533 42:13]\nin a way a language design of the old school is a pattern for programs but now we\n42:19\nneed to go meta we should now think of a language design as being a pattern for language\n42:24\ndesigns a tool for making more tools of the same kind this is the nub of what i want to say\n42:32\na language design can no longer be a thing it must be a pattern a pattern for\n42:38\ngrowth a pattern for growing the pattern for defining the patterns that programmers can use for their real\n42:44\nwork and their main goal my point is that a good programmer in these times does not just write programs\n42:51\na good programmer builds a working vocabulary in other words a good programmer does language design though not from scratch\n42:58\nbut building on the frame of a base language"
      },
      "date": 1674001441725
    },
    {
      "item": {
        "type": "factory",
        "id": "d8a0210363457160"
      },
      "id": "d8a0210363457160",
      "type": "add",
      "after": "3c05228ed1bcde1e",
      "date": 1674001509549
    },
    {
      "type": "edit",
      "id": "d8a0210363457160",
      "item": {
        "type": "paragraph",
        "id": "d8a0210363457160",
        "text": "https://youtu.be/lw6TaiXzHAE?t=2579"
      },
      "date": 1674001511888
    },
    {
      "type": "edit",
      "id": "d8a0210363457160",
      "item": {
        "type": "paragraph",
        "id": "d8a0210363457160",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2579 43:04]\nin the course of giving this talk because i started with a small language i've had to define 50 or more new words\n43:10\nor phrases and 16 names of persons or things and i laid out six rules for making new words\n43:16\nfrom old ones in this way i added to the base language\n43:21\nif i were to write a book starting from just the words one syllable i am sure that i would have to define\n43:27\nhundreds of new words it should give no one pause to note that the writing of a program having a\n43:32\nmillion lines of code might need many many hundreds of new words\n43:38\nthat is to say a new language built on the base language i will be so bold as to say that it\n43:45\ncannot be done any other way well there may be one other way which is\n43:51\nto use a large rich programming language that has grown over tens or hundreds of years that has\n43:57\nall we need to say what we want to say that we are taught as we grow up and take for granted\n44:04\nit may be that a hundred years from now there will be a programming language that by then is stood the test of time\n44:10\nneeds no more changes for most uses and is used by all persons who write programs because each child learns it in school"
      },
      "date": 1674001615059
    },
    {
      "type": "edit",
      "id": "d8a0210363457160",
      "item": {
        "type": "paragraph",
        "id": "d8a0210363457160",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2581 43:04]\nin the course of giving this talk because i started with a small language i've had to define 50 or more new words\n43:10\nor phrases and 16 names of persons or things and i laid out six rules for making new words\n43:16\nfrom old ones in this way i added to the base language\n43:21\nif i were to write a book starting from just the words one syllable i am sure that i would have to define\n43:27\nhundreds of new words it should give no one pause to note that the writing of a program having a\n43:32\nmillion lines of code might need many many hundreds of new words\n43:38\nthat is to say a new language built on the base language i will be so bold as to say that it\n43:45\ncannot be done any other way well there may be one other way which is\n43:51\nto use a large rich programming language that has grown over tens or hundreds of years that has\n43:57\nall we need to say what we want to say that we are taught as we grow up and take for granted\n44:04\nit may be that a hundred years from now there will be a programming language that by then is stood the test of time\n44:10\nneeds no more changes for most uses and is used by all persons who write programs because each child learns it in school"
      },
      "date": 1674001655677
    },
    {
      "item": {
        "type": "factory",
        "id": "68604d1580968ff2"
      },
      "id": "68604d1580968ff2",
      "type": "add",
      "after": "d8a0210363457160",
      "date": 1674001790923
    },
    {
      "type": "edit",
      "id": "68604d1580968ff2",
      "item": {
        "type": "paragraph",
        "id": "68604d1580968ff2",
        "text": "[[Lan"
      },
      "date": 1674001795515
    },
    {
      "type": "add",
      "id": "0c0c3653363edf02",
      "item": {
        "type": "paragraph",
        "id": "0c0c3653363edf02",
        "text": "\n44:17\nbut that is not where we are now so language design is not at all the\n44:25\nsame kind of work it was 30 years ago or 20 years ago"
      },
      "after": "68604d1580968ff2",
      "date": 1674001803654
    },
    {
      "type": "edit",
      "id": "68604d1580968ff2",
      "item": {
        "type": "paragraph",
        "id": "68604d1580968ff2",
        "text": "[[Language Design]"
      },
      "date": 1674001815365
    },
    {
      "type": "edit",
      "id": "0c0c3653363edf02",
      "item": {
        "type": "paragraph",
        "id": "0c0c3653363edf02",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2657 44:17]\nbut that is not where we are now so language design is not at all the\n44:25\nsame kind of work it was 30 years ago or 20 years ago"
      },
      "date": 1674001829676
    },
    {
      "type": "edit",
      "id": "68604d1580968ff2",
      "item": {
        "type": "paragraph",
        "id": "68604d1580968ff2",
        "text": "[[Language Design]]"
      },
      "date": 1674001832025
    },
    {
      "item": {
        "type": "factory",
        "id": "35ebe8483da7d8cf"
      },
      "id": "35ebe8483da7d8cf",
      "type": "add",
      "after": "0c0c3653363edf02",
      "date": 1674001925263
    },
    {
      "type": "edit",
      "id": "35ebe8483da7d8cf",
      "item": {
        "type": "paragraph",
        "id": "35ebe8483da7d8cf",
        "text": "[[Plan For Growth]]"
      },
      "date": 1674001929690
    },
    {
      "type": "edit",
      "id": "35ebe8483da7d8cf",
      "item": {
        "type": "paragraph",
        "id": "35ebe8483da7d8cf",
        "text": "[[Plan For Growth]] [⇒ [[Limits to Growth]]"
      },
      "date": 1674001970721
    },
    {
      "item": {
        "type": "factory",
        "id": "37d203ddef1057a0"
      },
      "id": "37d203ddef1057a0",
      "type": "add",
      "after": "35ebe8483da7d8cf",
      "date": 1674002000741
    },
    {
      "type": "edit",
      "id": "35ebe8483da7d8cf",
      "item": {
        "type": "paragraph",
        "id": "35ebe8483da7d8cf",
        "text": "[[Plan For Growth]] [⇒ [[Limits to Growth]]]"
      },
      "date": 1674002002257
    },
    {
      "type": "edit",
      "id": "37d203ddef1057a0",
      "item": {
        "type": "paragraph",
        "id": "37d203ddef1057a0",
        "text": "https://youtu.be/lw6TaiXzHAE?t=2734"
      },
      "date": 1674002003257
    },
    {
      "type": "edit",
      "id": "37d203ddef1057a0",
      "item": {
        "type": "paragraph",
        "id": "37d203ddef1057a0",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2734 45:25]\nis to plan for growth\n45:32\nplan for growth with help from users this is a win for you because you have help this is a win for the users\n45:39\nbecause they get to have their say and get to bend the growth to their needs but you need to have one\n45:45\nor more persons two or one or more groups to take on the task of judging and testing and sifting what the users\n45:51\ndo and say and adding what they think best to the big pile of code in the hope that other users will trust\n45:57\nwhat they say and not have to go to all the work to test and judge and sift each new claim\n46:03\nor each new piece of code each for his own self parts of the language must be designed\n46:09\nto help the task of growth of growing the language"
      },
      "date": 1674002085081
    },
    {
      "type": "edit",
      "id": "37d203ddef1057a0",
      "item": {
        "type": "paragraph",
        "id": "37d203ddef1057a0",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2726 45:25]\nis to plan for growth\n45:32\nplan for growth with help from users this is a win for you because you have help this is a win for the users\n45:39\nbecause they get to have their say and get to bend the growth to their needs but you need to have one\n45:45\nor more persons two or one or more groups to take on the task of judging and testing and sifting what the users\n45:51\ndo and say and adding what they think best to the big pile of code in the hope that other users will trust\n45:57\nwhat they say and not have to go to all the work to test and judge and sift each new claim\n46:03\nor each new piece of code each for his own self parts of the language must be designed\n46:09\nto help the task of growth of growing the language"
      },
      "date": 1674002168768
    },
    {
      "type": "edit",
      "id": "37d203ddef1057a0",
      "item": {
        "type": "paragraph",
        "id": "37d203ddef1057a0",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2724 45:25]\nis to plan for growth\n45:32\nplan for growth with help from users this is a win for you because you have help this is a win for the users\n45:39\nbecause they get to have their say and get to bend the growth to their needs but you need to have one\n45:45\nor more persons two or one or more groups to take on the task of judging and testing and sifting what the users\n45:51\ndo and say and adding what they think best to the big pile of code in the hope that other users will trust\n45:57\nwhat they say and not have to go to all the work to test and judge and sift each new claim\n46:03\nor each new piece of code each for his own self parts of the language must be designed\n46:09\nto help the task of growth of growing the language"
      },
      "date": 1674002196722
    },
    {
      "type": "edit",
      "id": "37d203ddef1057a0",
      "item": {
        "type": "paragraph",
        "id": "37d203ddef1057a0",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2724 45:25]\nis to [[plan]] for growth\n45:32\nplan for growth with help from users this is a win for you because you have help this is a win for the users\n45:39\nbecause they get to have their say and get to bend the growth to their needs but you need to have one\n45:45\nor more persons two or one or more groups to take on the task of judging and testing and sifting what the users\n45:51\ndo and say and adding what they think best to the big pile of code in the hope that other users will trust\n45:57\nwhat they say and not have to go to all the work to test and judge and sift each new claim\n46:03\nor each new piece of code each for his own self parts of the language must be designed\n46:09\nto help the task of growth of growing the language"
      },
      "date": 1674002218977
    },
    {
      "type": "edit",
      "id": "37d203ddef1057a0",
      "item": {
        "type": "paragraph",
        "id": "37d203ddef1057a0",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2724 45:25]\nis to [[plan]] for growth\n45:32\nplan for growth with help from users this is a win for you because you have help this is a win for the users\n45:39\nbecause they get to have their say and get to bend the growth to their needs but you need to have one\n45:45\nor more persons two or one or more groups to take on the task of judging and testing and sifting what the users\n45:51\ndo and say and adding what they think best to the big pile of code in the hope that other users will trust\n45:57\nwhat they say and not have to go to all the work to test and judge and sift each new claim\n46:03\nor each new piece of code each for his own self. Parts of the language must be designed\n46:09\nto help the task of growth of growing the language"
      },
      "date": 1674002262302
    },
    {
      "item": {
        "type": "factory",
        "id": "c5288eab03e85038"
      },
      "id": "c5288eab03e85038",
      "type": "add",
      "after": "37d203ddef1057a0",
      "date": 1674002404209
    },
    {
      "type": "edit",
      "id": "c5288eab03e85038",
      "item": {
        "type": "paragraph",
        "id": "c5288eab03e85038",
        "text": "[…]"
      },
      "date": 1674002408196
    },
    {
      "item": {
        "type": "factory",
        "id": "a77c62b43555ffa7"
      },
      "id": "a77c62b43555ffa7",
      "type": "add",
      "after": "c5288eab03e85038",
      "date": 1674002624086
    },
    {
      "type": "edit",
      "id": "a77c62b43555ffa7",
      "item": {
        "type": "paragraph",
        "id": "a77c62b43555ffa7",
        "text": "\n51:17\nmy thought i learned in my youth from the books of such great teachers of writing as strunk\n51:23\nand white that it is better to choose short words when i can i should not choose long hard words just\n51:30\nto make other persons think that i know a lot i should try to make my thoughts clear"
      },
      "date": 1674002627223
    },
    {
      "type": "edit",
      "id": "a77c62b43555ffa7",
      "item": {
        "type": "paragraph",
        "id": "a77c62b43555ffa7",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=3077 51:17]\nmy thought i learned in my youth from the books of such great teachers of writing as strunk\n51:23\nand white that it is better to choose short words when i can i should not choose long hard words just\n51:30\nto make other persons think that i know a lot i should try to make my thoughts clear"
      },
      "date": 1674002638760
    },
    {
      "type": "edit",
      "id": "a77c62b43555ffa7",
      "item": {
        "type": "paragraph",
        "id": "a77c62b43555ffa7",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=3078 51:17]\nI learned in my youth from the books of such great teachers of writing as strunk\n51:23\nand white that it is better to choose short words when i can i should not choose long hard words just\n51:30\nto make other persons think that i know a lot i should try to make my thoughts clear"
      },
      "date": 1674002676906
    },
    {
      "item": {
        "type": "factory",
        "id": "57af4c4723ffd26a"
      },
      "id": "57af4c4723ffd26a",
      "type": "add",
      "after": "a77c62b43555ffa7",
      "date": 1674002771214
    },
    {
      "type": "edit",
      "id": "57af4c4723ffd26a",
      "item": {
        "type": "paragraph",
        "id": "57af4c4723ffd26a",
        "text": "\n51:41\nand i am sure you will from the work of planning this talk in\n51:47\nwhich i have tried to go with this rule a short words much farther than in the past i found\n51:53\nthat for the most part they were right short words work well if we choose them well"
      },
      "date": 1674002775279
    },
    {
      "type": "edit",
      "id": "57af4c4723ffd26a",
      "item": {
        "type": "paragraph",
        "id": "57af4c4723ffd26a",
        "text": "[https://youtu.be/lw6TaiXzHAE 51:41]\nand i am sure you will from the work of planning this talk in\n51:47\nwhich i have tried to go with this rule a short words much farther than in the past i found\n51:53\nthat for the most part they were right short words work well if we choose them well"
      },
      "date": 1674002799730
    },
    {
      "type": "edit",
      "id": "57af4c4723ffd26a",
      "item": {
        "type": "paragraph",
        "id": "57af4c4723ffd26a",
        "text": "[https://youtu.be/lw6TaiXzHAE 51:41]\nand i am sure you will from the work of planning this talk in\n51:47\nwhich i have tried to go with this rule a short words much farther than in the past i found\n51:53\nthat for the most part they were right short words work well if we choose them well [⇒ [[Infinitely Slow Step]] ]"
      },
      "date": 1674002905183
    },
    {
      "type": "edit",
      "id": "57af4c4723ffd26a",
      "item": {
        "type": "paragraph",
        "id": "57af4c4723ffd26a",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=3106 51:41]\nand i am sure you will from the work of planning this talk in\n51:47\nwhich i have tried to go with this rule a short words much farther than in the past i found\n51:53\nthat for the most part they were right short words work well if we choose them well [⇒ [[Infinitely Slow Step]] ]"
      },
      "date": 1674003026929
    },
    {
      "type": "edit",
      "id": "57af4c4723ffd26a",
      "item": {
        "type": "paragraph",
        "id": "57af4c4723ffd26a",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=3104 51:41]\nFrom the work of planning this talk in\n51:47\nwhich i have tried to go with this rule a short words much farther than in the past i found\n51:53\nthat for the most part they were right short words work well if we choose them well [⇒ [[Infinitely Slow Step]] ]"
      },
      "date": 1674003064467
    },
    {
      "type": "edit",
      "id": "57af4c4723ffd26a",
      "item": {
        "type": "paragraph",
        "id": "57af4c4723ffd26a",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=3104 51:41]\nFrom the work of planning this talk in\n51:47\nwhich i have tried to go with this rule a short words much farther than in the past i found\n51:53\nthat for the most part they were right short words work well if we choose them well [⇒ [[Infinitely Slow Step]]]"
      },
      "date": 1674003149977
    },
    {
      "type": "add",
      "id": "b624f741ccefb1dd",
      "item": {
        "type": "paragraph",
        "id": "b624f741ccefb1dd",
        "text": "[…]"
      },
      "after": "57af4c4723ffd26a",
      "date": 1674003152428
    },
    {
      "type": "edit",
      "id": "57af4c4723ffd26a",
      "item": {
        "type": "paragraph",
        "id": "57af4c4723ffd26a",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=3104 51:41]\nFrom the work of planning this talk in\n51:47\nwhich i have tried to go with this rule of short words much farther than in the past i found\n51:53\nthat for the most part they were right short words work well if we choose them well [⇒ [[Infinitely Slow Step]]]"
      },
      "date": 1674003242127
    },
    {
      "type": "edit",
      "id": "68604d1580968ff2",
      "item": {
        "type": "paragraph",
        "id": "68604d1580968ff2",
        "text": "[[Language Design]] (see Microsoft to make ChatGPT available soon via Azure cloud service"
      },
      "date": 1674003639777
    },
    {
      "type": "edit",
      "id": "68604d1580968ff2",
      "item": {
        "type": "paragraph",
        "id": "68604d1580968ff2",
        "text": "[[Language Design]] (see Microsoft to make ChatGPT available soon via Azure cloud service [https://www.heise.de/news/Microsoft-macht-ChatGPT-bald-ueber-Cloud-Dienst-Azure-verfuegbar-7460919.html heise.de]"
      },
      "date": 1674003656232
    },
    {
      "type": "edit",
      "id": "68604d1580968ff2",
      "item": {
        "type": "paragraph",
        "id": "68604d1580968ff2",
        "text": "[[Language Design]] (see Microsoft to make ChatGPT available soon via Azure cloud service [https://www.heise.de/news/Microsoft-macht-ChatGPT-bald-ueber-Cloud-Dienst-Azure-verfuegbar-7460919.html heise.de])"
      },
      "date": 1674003662861
    },
    {
      "type": "edit",
      "id": "d8a0210363457160",
      "item": {
        "type": "paragraph",
        "id": "d8a0210363457160",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=2581 43:04]\nin the course of giving this talk because i started with a small language i've had to define 50 or more new words\n43:10\nor phrases and 16 names of persons or things and i laid out six rules for making new words\n43:16\nfrom old ones in this way i added to the base language\n"
      },
      "date": 1674003730172
    },
    {
      "type": "add",
      "id": "65facf6f3acd300b",
      "item": {
        "type": "paragraph",
        "id": "65facf6f3acd300b",
        "text": "43:21\nif i were to write a book starting from just the words one syllable i am sure that i would have to define\n43:27\nhundreds of new words it should give no one pause to note that the writing of a program having a\n43:32\nmillion lines of code might need many many hundreds of new words\n43:38\nthat is to say a new language built on the base language i will be so bold as to say that it\n43:45\ncannot be done any other way well there may be one other way which is\n43:51\nto use a large rich programming language that has grown over tens or hundreds of years that has\n43:57\nall we need to say what we want to say that we are taught as we grow up and take for granted\n44:04\nit may be that a hundred years from now there will be a programming language that by then is stood the test of time\n44:10\nneeds no more changes for most uses and is used by all persons who write programs because each child learns it in school"
      },
      "after": "d8a0210363457160",
      "date": 1674003733711
    },
    {
      "item": {
        "type": "factory",
        "id": "8694b3cb91f2af06"
      },
      "id": "8694b3cb91f2af06",
      "type": "add",
      "after": "b624f741ccefb1dd",
      "date": 1674003740539
    },
    {
      "type": "edit",
      "id": "8694b3cb91f2af06",
      "item": {
        "type": "pagefold",
        "id": "8694b3cb91f2af06",
        "text": "ChatGPT"
      },
      "date": 1674003742613
    },
    {
      "id": "8694b3cb91f2af06",
      "type": "move",
      "order": [
        "4f1a7e4c8e52c100",
        "8e8785d6a1ac7bd3",
        "f8a445ad8b14bb36",
        "ca533aa1cf5958ef",
        "038783d94a16d7d3",
        "0cdf4f9b0f63021f",
        "120674718623f2d6",
        "7cc10796aa0bbe49",
        "ac8ae53df5c3a8f4",
        "bae736f44ac562fe",
        "da52de222029efa2",
        "61425ee459c0302b",
        "3c05228ed1bcde1e",
        "d8a0210363457160",
        "8694b3cb91f2af06",
        "65facf6f3acd300b",
        "68604d1580968ff2",
        "0c0c3653363edf02",
        "35ebe8483da7d8cf",
        "37d203ddef1057a0",
        "c5288eab03e85038",
        "a77c62b43555ffa7",
        "57af4c4723ffd26a",
        "b624f741ccefb1dd"
      ],
      "date": 1674003750548
    },
    {
      "type": "edit",
      "id": "68604d1580968ff2",
      "item": {
        "type": "paragraph",
        "id": "68604d1580968ff2",
        "text": "[[Language Design]] (see Microsoft to make [[ChatGPT]]  available soon via Azure cloud service [https://www.heise.de/news/Microsoft-macht-ChatGPT-bald-ueber-Cloud-Dienst-Azure-verfuegbar-7460919.html heise.de])"
      },
      "date": 1674003766578
    },
    {
      "type": "edit",
      "id": "57af4c4723ffd26a",
      "item": {
        "type": "paragraph",
        "id": "57af4c4723ffd26a",
        "text": "[https://youtu.be/lw6TaiXzHAE?t=3104 51:41]\nFrom the work of planning this talk in\n51:47\nwhich i have tried to go with this rule of short words much farther than in the past i found\n51:53\nthat for the most part they were right. Short words work well if we choose them well [⇒ [[Infinitely Slow Step]]]"
      },
      "date": 1674004512945
    },
    {
      "type": "edit",
      "id": "65facf6f3acd300b",
      "item": {
        "type": "paragraph",
        "id": "65facf6f3acd300b",
        "text": "43:21\nif i were to write a book starting from just the words one syllable i am sure that i would have to define\n43:27\nhundreds of new words it should give no one pause to note that the writing of a program having a\n43:32\nmillion lines of code might need many many hundreds of new words\n43:38\nthat is to say a new language built on the base language i will be so bold as to say that it\n43:45\ncannot be done any other way well there may be one other way which is\n43:51\nto use a large rich programming language that has grown over tens or hundreds of years that has\n43:57\nall we need to say what we want to say that we are taught as we grow up and take for granted\n44:04\nit may be that a hundred years from now there will be a programming language that by then is stood the test of time\n44:10\nneeds no more changes for most uses and is used by all persons who write programs because each [[Child]] learns it in school"
      },
      "date": 1674004666010
    },
    {
      "type": "edit",
      "id": "8694b3cb91f2af06",
      "item": {
        "type": "pagefold",
        "id": "8694b3cb91f2af06",
        "text": "ChatGPT as Child"
      },
      "date": 1674004777356
    },
    {
      "type": "edit",
      "id": "8694b3cb91f2af06",
      "item": {
        "type": "pagefold",
        "id": "8694b3cb91f2af06",
        "text": "ChatGPT Like the Child"
      },
      "date": 1674004860180
    }
  ]
}