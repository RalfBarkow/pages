{
  "title": "Javascript Tooling",
  "story": [
    {
      "type": "paragraph",
      "id": "afc8ddd6ad31be56",
      "text": "One definitive answer (of many) for building javascript apps. Plausible recommendations and rationale, if you're just starting out (as of April 2018): use babel, webpack, & gulp.  Wiki's current tools are equally plausible: coffeescript, browserify, & grunt.  Related reading also recommend the yarn and webpack combination.  [http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/ blog]"
    },
    {
      "type": "markdown",
      "id": "f6ca7dd820fc1ed3",
      "text": "# The Short Answer\n\nIt is easy to decide which tools you need:\n\n* Small projects can get away with just an ES6 compiler\n* Single Page Apps need a module bundler too\n* Once your app is in production, use a task runner to automate anything else\n\nAnd here are the packages which fulfill these requirements:\n\n* For compiling and polyfilling ES6, use Babel\n* For bundling your JavaScript files and dependencies into static assets, use Webpack\n* If your have other tasks like renaming files to avoid caching or publishing to the web, automate them with Gulp\n\n"
    },
    {
      "type": "markdown",
      "id": "e6a5b9aa0c8337bd",
      "text": "# Why Babel, Webpack, & Gulp?"
    },
    {
      "type": "markdown",
      "id": "928b1f265a98e6b7",
      "text": "Babel transforms ES6 to ES5. It also allows custom transforms – and the community has created a lot of them. In particular, Babel has transforms for ES7 features like async/await and decorators. It also transforms your React JSX.\n"
    },
    {
      "type": "markdown",
      "id": "e2d9d3230353b9e3",
      "text": "There are two module bundling tools which dominate the landscape: Browserify and Webpack.  Browserify teaches browser-based apps to pretend to be node modules.  Webpack is more generalized browser app dependency packaging.\n"
    },
    {
      "type": "markdown",
      "id": "b1ccfd73ef6c2f6a",
      "text": "Both have scary example configurations in the wild.  The author prefers his own terse webpack config.\n\n"
    },
    {
      "type": "markdown",
      "id": "edaa299e85483a71",
      "text": "There are two task runners which dominate: Grunt and Gulp.  Grunt uses a declarative json configuration and more complicated plugins.  Gulp plugins are just javascript functions, and Gulp knows about streams and promises."
    },
    {
      "type": "pagefold",
      "id": "1feaaaff7fb93f6b",
      "text": "."
    },
    {
      "type": "markdown",
      "id": "25aec93774c6891c",
      "text": "Wiki's matrix chat brought my attention to Polymer.  Although `polymer` is it's own command-line application too, the example used `bower`.  Bower's website says \"we're still here, but use `yarn` and `webpack` for new projects.\"\n"
    },
    {
      "type": "markdown",
      "id": "165e07e64d50c224",
      "text": "This pretty much characterizes my experience with Javascript ecosystem for the past decade.\n\n"
    },
    {
      "type": "markdown",
      "id": "0ca026b6bfba228e",
      "text": "Everyone has their own build tools.  There's many ways to write modules.  There's many ways to do promises.  There's server-side vs browser-side cultural differences.  Many different test languages.\n"
    },
    {
      "type": "markdown",
      "id": "89ff0f5fede6f87f",
      "text": "See [[Javascript Modules]]\n"
    },
    {
      "type": "markdown",
      "id": "98aa4130107b6b5d",
      "text": "I guess this is also true of any large programming ecosystem.  It's hard to get started on projects when there are so many choices to make before you can even get started."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Javascript Tooling",
        "story": []
      },
      "date": 1522791585926
    },
    {
      "item": {
        "type": "factory",
        "id": "afc8ddd6ad31be56"
      },
      "id": "afc8ddd6ad31be56",
      "type": "add",
      "date": 1522791588374
    },
    {
      "type": "edit",
      "id": "afc8ddd6ad31be56",
      "item": {
        "type": "paragraph",
        "id": "afc8ddd6ad31be56",
        "text": "[http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/ blog]"
      },
      "date": 1522791603364
    },
    {
      "type": "edit",
      "id": "afc8ddd6ad31be56",
      "item": {
        "type": "paragraph",
        "id": "afc8ddd6ad31be56",
        "text": "This guy on the internet gives a definitive answer to what tools to use to build javascript apps. I appreciate the brief response and the succinct rationale.  Seems mostly legit as of April 2018.  [http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/ blog]"
      },
      "date": 1522792003450
    },
    {
      "item": {
        "type": "factory",
        "id": "f6ca7dd820fc1ed3"
      },
      "id": "f6ca7dd820fc1ed3",
      "type": "add",
      "after": "afc8ddd6ad31be56",
      "date": 1522792047712
    },
    {
      "type": "edit",
      "id": "f6ca7dd820fc1ed3",
      "item": {
        "type": "factory",
        "id": "f6ca7dd820fc1ed3",
        "text": "The Short Answer\n\nIt is easy to decide which tools you need:\n\n    Small projects can get away with just an ES6 compiler\n    Single Page Apps need a module bundler too\n    Once your app is in production, use a task runner to automate anything else\n\nAnd here are the packages which fulfil these requirements:\n\n    For compiling and polyfilling ES6, use Babel\n    For bundling your JavaScript files and dependencies into static assets, use Webpack\n    If your have other tasks like renaming files to avoid caching or publishing to the web, automate them with Gulp\n"
      },
      "date": 1522792056260
    },
    {
      "type": "edit",
      "id": "f6ca7dd820fc1ed3",
      "item": {
        "type": "markdown",
        "id": "f6ca7dd820fc1ed3",
        "text": "# The Short Answer\n\nIt is easy to decide which tools you need:\n\n* Small projects can get away with just an ES6 compiler\n* Single Page Apps need a module bundler too\n* Once your app is in production, use a task runner to automate anything else\n\nAnd here are the packages which fulfill these requirements:\n\n* For compiling and polyfilling ES6, use Babel\n* For bundling your JavaScript files and dependencies into static assets, use Webpack\n* If your have other tasks like renaming files to avoid caching or publishing to the web, automate them with Gulp\n\n"
      },
      "date": 1522792109266
    },
    {
      "type": "add",
      "id": "e6a5b9aa0c8337bd",
      "item": {
        "type": "markdown",
        "id": "e6a5b9aa0c8337bd",
        "text": "# Why Babel, Webpack, & Gulp?"
      },
      "after": "f6ca7dd820fc1ed3",
      "date": 1522792160952
    },
    {
      "type": "edit",
      "id": "afc8ddd6ad31be56",
      "item": {
        "type": "paragraph",
        "id": "afc8ddd6ad31be56",
        "text": "This guy on the internet gives a definitive answer to what tools to use to build javascript apps. I appreciate the brief response and the succinct rationale.  Seems mostly legit as of April 2018: use babel, webpack, & gulp  [http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/ blog]"
      },
      "date": 1522792177920
    },
    {
      "item": {
        "type": "factory",
        "id": "928b1f265a98e6b7"
      },
      "id": "928b1f265a98e6b7",
      "type": "add",
      "after": "e6a5b9aa0c8337bd",
      "date": 1522792185544
    },
    {
      "type": "edit",
      "id": "928b1f265a98e6b7",
      "item": {
        "type": "markdown",
        "id": "928b1f265a98e6b7",
        "text": "Babel transforms ES6 to ES5. It also allows custom transforms – and the community has created a lot of them. In particular, Babel has transforms for ES7 features like async/await and decorators. It also transforms your React JSX.\n"
      },
      "date": 1522792382050
    },
    {
      "type": "add",
      "id": "e2d9d3230353b9e3",
      "item": {
        "type": "markdown",
        "id": "e2d9d3230353b9e3",
        "text": "_(sounds a lot like `coffeescript`)_\n"
      },
      "after": "928b1f265a98e6b7",
      "date": 1522792438036
    },
    {
      "type": "edit",
      "id": "e2d9d3230353b9e3",
      "item": {
        "type": "markdown",
        "id": "e2d9d3230353b9e3",
        "text": "_(sounds a lot like `coffeescript`)_\n\nThere are two module bundling tools which dominate the landscape: Browserify, and Webpack.  Browserify teaches browser-based apps to pretend to be node modules.  "
      },
      "date": 1522792624606
    },
    {
      "type": "edit",
      "id": "e2d9d3230353b9e3",
      "item": {
        "type": "markdown",
        "id": "e2d9d3230353b9e3",
        "text": "_(sounds a lot like `coffeescript`)_\n\nThere are two module bundling tools which dominate the landscape: Browserify, and Webpack.  Browserify teaches browser-based apps to pretend to be node modules.  Webpack is more generalized browser app dependency packaging.\n"
      },
      "date": 1522792869344
    },
    {
      "type": "add",
      "id": "b1ccfd73ef6c2f6a",
      "item": {
        "type": "markdown",
        "id": "b1ccfd73ef6c2f6a",
        "text": "Both have scary example configurations in the wild.  The author prefers his own terse webpack config.\n"
      },
      "after": "e2d9d3230353b9e3",
      "date": 1522792916588
    },
    {
      "type": "edit",
      "id": "afc8ddd6ad31be56",
      "item": {
        "type": "paragraph",
        "id": "afc8ddd6ad31be56",
        "text": "This guy on the internet gives a definitive answer to what tools to use to build javascript apps. Plausible recommendations and rationale as of April 2018: use babel, webpack, & gulp  [http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/ blog]"
      },
      "date": 1522793130374
    },
    {
      "type": "edit",
      "id": "b1ccfd73ef6c2f6a",
      "item": {
        "type": "markdown",
        "id": "b1ccfd73ef6c2f6a",
        "text": "Both have scary example configurations in the wild.  The author prefers his own terse webpack config.\n\n"
      },
      "date": 1522793155378
    },
    {
      "type": "add",
      "id": "edaa299e85483a71",
      "item": {
        "type": "markdown",
        "id": "edaa299e85483a71",
        "text": "There are two task runners which dominate: Grunt and Gulp."
      },
      "after": "b1ccfd73ef6c2f6a",
      "date": 1522793185814
    },
    {
      "type": "edit",
      "id": "e2d9d3230353b9e3",
      "item": {
        "type": "markdown",
        "id": "e2d9d3230353b9e3",
        "text": "_(sounds a lot like `coffeescript`)_\n\nThere are two module bundling tools which dominate the landscape: Browserify and Webpack.  Browserify teaches browser-based apps to pretend to be node modules.  Webpack is more generalized browser app dependency packaging.\n"
      },
      "date": 1522793190134
    },
    {
      "type": "edit",
      "id": "edaa299e85483a71",
      "item": {
        "type": "markdown",
        "id": "edaa299e85483a71",
        "text": "There are two task runners which dominate: Grunt and Gulp.  Grunt uses a declarative json configuration and more complicated plugins.  Gulp plugins are just javascript functions, and Gulp knows about streams and promises."
      },
      "date": 1522793281624
    },
    {
      "type": "edit",
      "id": "afc8ddd6ad31be56",
      "item": {
        "type": "paragraph",
        "id": "afc8ddd6ad31be56",
        "text": "This guy on the internet gives a definitive answer to what tools to use to build javascript apps. Plausible recommendations and rationale as of April 2018: use babel, webpack, & gulp.  Having now paraphrased the article, not sure there's much improvement over coffeescript, browserify, & grunt that wiki currently uses.  [http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/ blog]"
      },
      "date": 1522793598292
    },
    {
      "type": "edit",
      "id": "e2d9d3230353b9e3",
      "item": {
        "type": "markdown",
        "id": "e2d9d3230353b9e3",
        "text": "There are two module bundling tools which dominate the landscape: Browserify and Webpack.  Browserify teaches browser-based apps to pretend to be node modules.  Webpack is more generalized browser app dependency packaging.\n"
      },
      "date": 1522793609450
    },
    {
      "item": {
        "type": "factory",
        "id": "fa71c82cb2fbd8d9"
      },
      "id": "fa71c82cb2fbd8d9",
      "type": "add",
      "after": "edaa299e85483a71",
      "date": 1522793618128
    },
    {
      "type": "edit",
      "id": "fa71c82cb2fbd8d9",
      "item": {
        "type": "pagefold",
        "id": "fa71c82cb2fbd8d9",
        "text": "."
      },
      "date": 1522793625408
    },
    {
      "item": {
        "type": "factory",
        "id": "727f99e8d32fb2f0"
      },
      "id": "727f99e8d32fb2f0",
      "type": "add",
      "after": "fa71c82cb2fbd8d9",
      "date": 1522793627456
    },
    {
      "type": "edit",
      "id": "727f99e8d32fb2f0",
      "item": {
        "type": "factory",
        "id": "727f99e8d32fb2f0",
        "text": "Wiki uses `coffeescript` "
      },
      "date": 1522793639734
    },
    {
      "type": "edit",
      "id": "727f99e8d32fb2f0",
      "item": {
        "type": "markdown",
        "id": "727f99e8d32fb2f0",
        "text": "Wiki uses coffeescript, browserify, and grunt.  Having re-read the arguments I'm not as moved as I was on first impression.\n"
      },
      "date": 1522793824748
    },
    {
      "type": "add",
      "id": "1b1ba70c97d06460",
      "item": {
        "type": "markdown",
        "id": "1b1ba70c97d06460",
        "text": "I see forces tugging wiki in various directions, but many suggest more stuff on the client and less stuff on the server.  And similar forces tugging on the node.js community.  I wonder if there will be a general migration towards ESM and maybe with it a migration from `browserify` toward `webpack`.  I see no reason to rush to change here.\n"
      },
      "after": "727f99e8d32fb2f0",
      "date": 1522794147644
    },
    {
      "type": "add",
      "id": "17ffc2394c5e9bc1",
      "item": {
        "type": "markdown",
        "id": "17ffc2394c5e9bc1",
        "text": "I also don't read any compelling reason to change from `grunt` to `gulp`."
      },
      "after": "1b1ba70c97d06460",
      "date": 1522794287324
    },
    {
      "type": "edit",
      "id": "afc8ddd6ad31be56",
      "item": {
        "type": "paragraph",
        "id": "afc8ddd6ad31be56",
        "text": "This guy on the internet gives a definitive answer to what tools to use to build javascript apps. Plausible recommendations and rationale, if you're just starting out (as of April 2018): use babel, webpack, & gulp.  Wiki's current tools are equally plausible: coffeescript, browserify, & grunt.  [http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/ blog]"
      },
      "date": 1522794402888
    },
    {
      "type": "remove",
      "id": "17ffc2394c5e9bc1",
      "date": 1522794445102
    },
    {
      "type": "remove",
      "id": "1b1ba70c97d06460",
      "date": 1522794446382
    },
    {
      "type": "remove",
      "id": "727f99e8d32fb2f0",
      "date": 1522794448578
    },
    {
      "type": "remove",
      "id": "fa71c82cb2fbd8d9",
      "date": 1522794452906
    },
    {
      "type": "edit",
      "id": "afc8ddd6ad31be56",
      "item": {
        "type": "paragraph",
        "id": "afc8ddd6ad31be56",
        "text": "One definitive answer (of many) for building javascript apps. Plausible recommendations and rationale, if you're just starting out (as of April 2018): use babel, webpack, & gulp.  Wiki's current tools are equally plausible: coffeescript, browserify, & grunt.  Related reading also recommend the yarn and webpack combination.  [http://jamesknelson.com/which-build-system-should-i-use-for-my-javascript-app/ blog]"
      },
      "date": 1523292695196
    },
    {
      "item": {
        "type": "factory",
        "id": "1feaaaff7fb93f6b"
      },
      "id": "1feaaaff7fb93f6b",
      "type": "add",
      "after": "edaa299e85483a71",
      "date": 1523292709258
    },
    {
      "type": "edit",
      "id": "1feaaaff7fb93f6b",
      "item": {
        "type": "pagefold",
        "id": "1feaaaff7fb93f6b",
        "text": "."
      },
      "date": 1523292712980
    },
    {
      "item": {
        "type": "factory",
        "id": "25aec93774c6891c"
      },
      "id": "25aec93774c6891c",
      "type": "add",
      "after": "1feaaaff7fb93f6b",
      "date": 1523296487024
    },
    {
      "type": "edit",
      "id": "25aec93774c6891c",
      "item": {
        "type": "markdown",
        "id": "25aec93774c6891c",
        "text": "Wiki's matrix chat brought my attention to Polymer.  Although `polymer` is it's own command-line application too, the example used `bower`.  Bower's website says \"we're still here, but use `yarn` and `webpack` for new projects.\"\n"
      },
      "date": 1523296823104
    },
    {
      "type": "add",
      "id": "165e07e64d50c224",
      "item": {
        "type": "markdown",
        "id": "165e07e64d50c224",
        "text": "This pretty much characterizes my experience with Javascript ecosystem for the past decade.\n\n"
      },
      "after": "25aec93774c6891c",
      "date": 1523296842842
    },
    {
      "type": "add",
      "id": "0ca026b6bfba228e",
      "item": {
        "type": "markdown",
        "id": "0ca026b6bfba228e",
        "text": "Everyone has their own build tools.  There's many ways to write modules.  There's many ways to do promises.  There's server-side vs browser-side cultural differences.  Many different test languages.\n"
      },
      "after": "165e07e64d50c224",
      "date": 1523296943990
    },
    {
      "type": "add",
      "id": "89ff0f5fede6f87f",
      "item": {
        "type": "markdown",
        "id": "89ff0f5fede6f87f",
        "text": "See [[Javascript Modules]]\n"
      },
      "after": "0ca026b6bfba228e",
      "date": 1523296947232
    },
    {
      "type": "add",
      "id": "98aa4130107b6b5d",
      "item": {
        "type": "markdown",
        "id": "98aa4130107b6b5d",
        "text": "I guess this is also true of any large programming ecosystem.  It's hard to get started on projects when there are so many choices to make before you can even get started."
      },
      "after": "89ff0f5fede6f87f",
      "date": 1523297026912
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1523466342305
    },
    {
      "type": "fork",
      "site": "clive.tries.fed.wiki",
      "date": 1636031415109
    }
  ]
}