{
  "title": "Scheduled Task",
  "story": [
    {
      "type": "html",
      "text": "<b>Intent:</b> Ensure that desired operations are performed at specific points in the future.",
      "id": "54847b68687bf644b16ad7a137a660e4"
    },
    {
      "type": "html",
      "text": "\nIn [[Real Time]] systems, it is often necessary to ensure that something is done at a specific time.  A scheduler object (note: not quite the same as [[Scheduler Pattern]]) keeps track of these actions, and invokes them at the appropriate times.",
      "id": "983b3f2e147b56ca940abeb473049574"
    },
    {
      "type": "html",
      "text": "\nTimes may be expressed as \"wall time\" or as some sort of internal time (\"ticks\", milliseconds-since-startup, etc.).",
      "id": "68b85668c966f2fdf40b012249b8bfc7"
    },
    {
      "type": "html",
      "text": "\nIf highly accurate scheduling of tasks is needed (to milliseconds or less), the scheduler task needs to run at a very high priority, or be hooked into a high-frequency interrupt routine.",
      "id": "1b256b9f6d6e6c43ebf0321d479e9afd"
    },
    {
      "type": "html",
      "text": "<i>Is there another, more common name for this pattern?</i>",
      "id": "c196d0acc61733a0b8f2184f84931b87"
    },
    {
      "type": "html",
      "text": "<b>See also:</b> [[Command Pattern]], [[Memento Pattern]]",
      "id": "df9e1cf6b0fa963b1128b773803d494b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
    },
    {
      "type": "html",
      "text": "\nOn many common multitasking operating systems, the OS will allow you to start more and more processes, and each one will run slower and slower.",
      "id": "e9218980d842a142b37fef82455bbb20"
    },
    {
      "type": "html",
      "text": "\nA real-time task scheduler is specifically designed to provide real-time guarantees.\nThe way it does that is",
      "id": "4bf3b6d14d668630a563ce850e10e236"
    },
    {
      "type": "html",
      "text": "(1) You tell it how often you want some task to run, and",
      "id": "dbc394775740b88d8f28bd9a68b83c4f"
    },
    {
      "type": "html",
      "text": "(2) it needs to know the *maximum* amount of time that task will run each time.\nEvery time you ask it to run one more task,\nit analyzes the load it's already carrying, and if it cannot guarantee that all the tasks will continue to run at the desired rate, it refuses to add another task.",
      "id": "c785078255b92a466c07f2915b615fce"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
    },
    {
      "type": "html",
      "text": " harmonic task scheduling:<br>basically, everything repeats at a \"fundamental frequency\", and every sliver of time is dedicated to some particular task or another. Tasks are assigned pieces based on their worst-case run-time.",
      "id": "7db3dcbc6e6f1c7785d09116ae725d52"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
    },
    {
      "type": "html",
      "text": "\nThe PPR has [[Martin Fowler]]'s \"Recurring Events\" document at [http://c2.com/ppr/schedule.pdf c2.com]",
      "id": "5ad14a8c7cae3701836453b38b8f7088"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
    },
    {
      "type": "html",
      "text": "<b>The RMA (rate monotonic algorithm)</b>\nis a procedure for assigning fixed priorities\nto tasks ...\nA task is considered schedulable if\nall tasks meet all deadlines all the time.\nThe algorithm is simple:",
      "id": "43241b3a4c54ec5cafc22f580795d0e0"
    },
    {
      "type": "html",
      "text": "\t\tAssign the priority of each task according to its period, so that the shorter the period the higher the priority.",
      "id": "f00bf0a58ba0233bc5fb72e3c5b86c44"
    },
    {
      "type": "html",
      "text": "\nRMA is the optimal fixed-priority algorithm.\nIf a task set cannot be scheduled using the RMA algorithm,\nit cannot be scheduled using any fixed-priority algorithm.",
      "id": "dcc57d78acdccbc69ce3d2c495c623e8"
    },
    {
      "type": "html",
      "text": "\nSometimes a particular set of tasks will have a total utilization\nabove the worst-case schedulable bound and still be schedulable with fixed priorities.\nSchedulability then ... must be analyzed by hand.",
      "id": "7c2d3ac0e80a9380a118b90532caa090"
    },
    {
      "type": "html",
      "text": "\nGuidelines:",
      "id": "dc578da72e80f0716cf1a663896e71c0"
    },
    {
      "type": "html",
      "text": "...\nAlways assign priorities according to RMA.\nManually assigning fixed priorities\nwill not give you a better solution.",
      "id": "e8834f94f3f1f0c50e164a1b6302263f"
    },
    {
      "type": "html",
      "text": "\nIf total utilization\nis less than or equal to",
      "id": "54262c3c46c82ae94f58417d25752294"
    },
    {
      "type": "html",
      "text": "[ ln(2) = 69.3% of CPU utilization],\nall tasks will meet all deadlines,\nso no additional work needs to be done.",
      "id": "ab55f873c5e7aa5a6f31df2070bc84d3"
    },
    {
      "type": "html",
      "text": "...",
      "id": "d0a692235a0eaff37a0dcacab2db00f7"
    },
    {
      "type": "html",
      "text": "\nTo achieve 100% CPU utilization\nwhen using fixed priorities,\nassign periods so that all tasks are harmonic.\nThis means that\nfor each task,\nits period is an exact multiple of every other task\nthat has a shorter period.",
      "id": "8f5bd826c548d3e6b732e97fab0d2dc7"
    },
    {
      "type": "html",
      "text": "...",
      "id": "d0a692235a0eaff37a0dcacab2db00f7"
    },
    {
      "type": "html",
      "text": "\nFor example, a three-task set whose periods are 10, 20, and 40",
      "id": "067f3a32482f49d61e2fa96965fcfed3"
    },
    {
      "type": "html",
      "text": "... is harmonic, and preferred over a task set\nwith periods 10, 20, and 50.",
      "id": "562870940412c37412c4dc9056950e0b"
    },
    {
      "type": "html",
      "text": "--",
      "id": "159ffaf96ea0f418ad7fccfc1e123d7a"
    },
    {
      "type": "html",
      "text": "<i>Rate Monotonic Scheduling</i>\narticle by David B. Stewart and Michael Barr\nin _Embedded Systems Programming_ 2002-03",
      "id": "b1b8208e94d48bf25605be1659ba9b27"
    },
    {
      "type": "html",
      "text": "\nSee",
      "id": "2b4bc2468a3bf6679e9d5ba95ef1ff21"
    },
    {
      "type": "html",
      "text": "<i>What is RMA?</i> section of\n[http://www.faqs.org/faqs/realtime-computing/faq/ www.faqs.org]",
      "id": "b71376a38663434ee494bc29ff0bbdc1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]] | [[Category Behavioral Patterns]] | [[Category Real Time Patterns]] | [[Category Real Time]]",
      "id": "e97608725e59ff1476a7b934eb75f9a3"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ScheduledTask c2.com]",
      "id": "695db2459842acd48f25ce9c52aaa9fa"
    }
  ],
  "journal": [
    {
      "date": 1290850946000,
      "id": "7c025b5027a5e67ce8d7a67569a67d35",
      "type": "create",
      "item": {
        "title": "Scheduled Task",
        "story": [
          {
            "type": "html",
            "text": "<b>Intent:</b> Ensure that desired operations are performed at specific points in the future.",
            "id": "54847b68687bf644b16ad7a137a660e4"
          },
          {
            "type": "html",
            "text": "\nIn [[Real Time]] systems, it is often necessary to ensure that something is done at a specific time.  A scheduler object (note: not quite the same as [[Scheduler Pattern]]) keeps track of these actions, and invokes them at the appropriate times.",
            "id": "983b3f2e147b56ca940abeb473049574"
          },
          {
            "type": "html",
            "text": "\nTimes may be expressed as \"wall time\" or as some sort of internal time (\"ticks\", milliseconds-since-startup, etc.).",
            "id": "68b85668c966f2fdf40b012249b8bfc7"
          },
          {
            "type": "html",
            "text": "\nIf highly accurate scheduling of tasks is needed (to milliseconds or less), the scheduler task needs to run at a very high priority, or be hooked into a high-frequency interrupt routine.",
            "id": "1b256b9f6d6e6c43ebf0321d479e9afd"
          },
          {
            "type": "html",
            "text": "<i>Is there another, more common name for this pattern?</i>",
            "id": "c196d0acc61733a0b8f2184f84931b87"
          },
          {
            "type": "html",
            "text": "<b>See also:</b> [[Command Pattern]], [[Memento Pattern]]",
            "id": "df9e1cf6b0fa963b1128b773803d494b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
          },
          {
            "type": "html",
            "text": "\nOn many common multitasking operating systems, the OS will allow you to start more and more processes, and each one will run slower and slower.",
            "id": "e9218980d842a142b37fef82455bbb20"
          },
          {
            "type": "html",
            "text": "\nA real-time task scheduler is specifically designed to provide real-time guarantees.\nThe way it does that is",
            "id": "4bf3b6d14d668630a563ce850e10e236"
          },
          {
            "type": "html",
            "text": "(1) You tell it how often you want some task to run, and",
            "id": "dbc394775740b88d8f28bd9a68b83c4f"
          },
          {
            "type": "html",
            "text": "(2) it needs to know the *maximum* amount of time that task will run each time.\nEvery time you ask it to run one more task,\nit analyzes the load it's already carrying, and if it cannot guarantee that all the tasks will continue to run at the desired rate, it refuses to add another task.",
            "id": "c785078255b92a466c07f2915b615fce"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
          },
          {
            "type": "html",
            "text": " harmonic task scheduling:<br>basically, everything repeats at a \"fundamental frequency\", and every sliver of time is dedicated to some particular task or another. Tasks are assigned pieces based on their worst-case run-time.",
            "id": "7db3dcbc6e6f1c7785d09116ae725d52"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
          },
          {
            "type": "html",
            "text": "\nThe PPR has [[Martin Fowler]]'s \"Recurring Events\" document at [http://c2.com/ppr/schedule.pdf c2.com]",
            "id": "5ad14a8c7cae3701836453b38b8f7088"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
          },
          {
            "type": "html",
            "text": "<b>The RMA (rate monotonic algorithm)</b>\nis a procedure for assigning fixed priorities\nto tasks ...\nA task is considered schedulable if\nall tasks meet all deadlines all the time.\nThe algorithm is simple:",
            "id": "43241b3a4c54ec5cafc22f580795d0e0"
          },
          {
            "type": "html",
            "text": "\t\tAssign the priority of each task according to its period, so that the shorter the period the higher the priority.",
            "id": "f00bf0a58ba0233bc5fb72e3c5b86c44"
          },
          {
            "type": "html",
            "text": "\nRMA is the optimal fixed-priority algorithm.\nIf a task set cannot be scheduled using the RMA algorithm,\nit cannot be scheduled using any fixed-priority algorithm.",
            "id": "dcc57d78acdccbc69ce3d2c495c623e8"
          },
          {
            "type": "html",
            "text": "\nSometimes a particular set of tasks will have a total utilization\nabove the worst-case schedulable bound and still be schedulable with fixed priorities.\nSchedulability then ... must be analyzed by hand.",
            "id": "7c2d3ac0e80a9380a118b90532caa090"
          },
          {
            "type": "html",
            "text": "\nGuidelines:",
            "id": "dc578da72e80f0716cf1a663896e71c0"
          },
          {
            "type": "html",
            "text": "...\nAlways assign priorities according to RMA.\nManually assigning fixed priorities\nwill not give you a better solution.",
            "id": "e8834f94f3f1f0c50e164a1b6302263f"
          },
          {
            "type": "html",
            "text": "\nIf total utilization\nis less than or equal to",
            "id": "54262c3c46c82ae94f58417d25752294"
          },
          {
            "type": "html",
            "text": "[ ln(2) = 69.3% of CPU utilization],\nall tasks will meet all deadlines,\nso no additional work needs to be done.",
            "id": "ab55f873c5e7aa5a6f31df2070bc84d3"
          },
          {
            "type": "html",
            "text": "...",
            "id": "d0a692235a0eaff37a0dcacab2db00f7"
          },
          {
            "type": "html",
            "text": "\nTo achieve 100% CPU utilization\nwhen using fixed priorities,\nassign periods so that all tasks are harmonic.\nThis means that\nfor each task,\nits period is an exact multiple of every other task\nthat has a shorter period.",
            "id": "8f5bd826c548d3e6b732e97fab0d2dc7"
          },
          {
            "type": "html",
            "text": "...",
            "id": "d0a692235a0eaff37a0dcacab2db00f7"
          },
          {
            "type": "html",
            "text": "\nFor example, a three-task set whose periods are 10, 20, and 40",
            "id": "067f3a32482f49d61e2fa96965fcfed3"
          },
          {
            "type": "html",
            "text": "... is harmonic, and preferred over a task set\nwith periods 10, 20, and 50.",
            "id": "562870940412c37412c4dc9056950e0b"
          },
          {
            "type": "html",
            "text": "--",
            "id": "159ffaf96ea0f418ad7fccfc1e123d7a"
          },
          {
            "type": "html",
            "text": "<i>Rate Monotonic Scheduling</i>\narticle by David B. Stewart and Michael Barr\nin _Embedded Systems Programming_ 2002-03",
            "id": "b1b8208e94d48bf25605be1659ba9b27"
          },
          {
            "type": "html",
            "text": "\nSee",
            "id": "2b4bc2468a3bf6679e9d5ba95ef1ff21"
          },
          {
            "type": "html",
            "text": "<i>What is RMA?</i> section of\n[http://www.faqs.org/faqs/realtime-computing/faq/ www.faqs.org]",
            "id": "b71376a38663434ee494bc29ff0bbdc1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "481ad7bee7ec31fc51ce0e74d377fa1b"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]] | [[Category Behavioral Patterns]] | [[Category Real Time Patterns]] | [[Category Real Time]]",
            "id": "e97608725e59ff1476a7b934eb75f9a3"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ScheduledTask c2.com]",
            "id": "695db2459842acd48f25ce9c52aaa9fa"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1654018943789
    }
  ]
}