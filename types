{
  "title": "Types",
  "story": [
    {
      "type": "paragraph",
      "id": "1a6619504ddff013",
      "text": "See [[The Behavioural Point of View]]."
    },
    {
      "type": "markdown",
      "id": "beb391aec953eba4",
      "text": "> Most [[Type]] systems use a concept of “[[Name]]”. If two *types* have the same name, then they must be equivalent. Names don’t work for any situation where we care about [[Behaviour]], and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n"
    },
    {
      "type": "markdown",
      "id": "2008c4a452392790",
      "text": "See [[Being the Same]].\n\n"
    },
    {
      "type": "pagefold",
      "id": "97d50fc332cb3995",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "6b6ee40b8c25bcee",
      "text": "[[JavaScript]] with syntax for types. [https://www.typescriptlang.org/ site]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Types",
        "story": []
      },
      "date": 1651215194852
    },
    {
      "item": {
        "type": "factory",
        "id": "6b6ee40b8c25bcee"
      },
      "id": "6b6ee40b8c25bcee",
      "type": "add",
      "date": 1651215207994
    },
    {
      "type": "edit",
      "id": "6b6ee40b8c25bcee",
      "item": {
        "type": "paragraph",
        "id": "6b6ee40b8c25bcee",
        "text": "JavaScript with syntax for types"
      },
      "date": 1651215209912
    },
    {
      "type": "edit",
      "id": "6b6ee40b8c25bcee",
      "item": {
        "type": "paragraph",
        "id": "6b6ee40b8c25bcee",
        "text": "JavaScript with syntax for types. [https://www.typescriptlang.org/ site]"
      },
      "date": 1651215221263
    },
    {
      "type": "edit",
      "id": "6b6ee40b8c25bcee",
      "item": {
        "type": "paragraph",
        "id": "6b6ee40b8c25bcee",
        "text": "[[JavaScript]] with syntax for types. [https://www.typescriptlang.org/ site]"
      },
      "date": 1651215230199
    },
    {
      "item": {
        "type": "factory",
        "id": "1a6619504ddff013"
      },
      "id": "1a6619504ddff013",
      "type": "add",
      "after": "6b6ee40b8c25bcee",
      "date": 1651399189684
    },
    {
      "type": "edit",
      "id": "1a6619504ddff013",
      "item": {
        "type": "paragraph",
        "id": "1a6619504ddff013",
        "text": "See [[The Behavioural Point of View]]."
      },
      "date": 1651399195681
    },
    {
      "item": {
        "type": "factory",
        "id": "97d50fc332cb3995"
      },
      "id": "97d50fc332cb3995",
      "type": "add",
      "after": "1a6619504ddff013",
      "date": 1651399208940
    },
    {
      "id": "beb391aec953eba4",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "Most type systems use a concept of “name”. If two [[types]] have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\n\n"
      },
      "after": "1a6619504ddff013",
      "date": 1651399230245
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "> Most type systems use a concept of “name”. If two [[types]] have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\n\n"
      },
      "date": 1651399268098
    },
    {
      "type": "edit",
      "id": "97d50fc332cb3995",
      "item": {
        "type": "pagefold",
        "id": "97d50fc332cb3995",
        "text": "."
      },
      "date": 1651399273141
    },
    {
      "id": "6b6ee40b8c25bcee",
      "type": "move",
      "order": [
        "1a6619504ddff013",
        "beb391aec953eba4",
        "97d50fc332cb3995",
        "6b6ee40b8c25bcee"
      ],
      "date": 1651399276703
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "> Most type systems use a concept of “name”. If two [[types]] have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n"
      },
      "date": 1651399293733
    },
    {
      "type": "add",
      "id": "2008c4a452392790",
      "item": {
        "type": "markdown",
        "id": "2008c4a452392790",
        "text": "See [[Being the Same]].\n\n"
      },
      "after": "beb391aec953eba4",
      "date": 1651399300542
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "> Most type systems use a concept of “[[name]]”. If two [[types]] have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n"
      },
      "date": 1651399313441
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "> Most type systems use a concept of “[[name]]”. If two [[types]] have the same name, then they must be equivalent. Names don’t work for any situation where we care about [[behaviour]], and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n"
      },
      "date": 1651399331305
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "> Most type systems use a concept of “[[name]]”. If two *types* have the same name, then they must be equivalent. Names don’t work for any situation where we care about [[behaviour]], and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n"
      },
      "date": 1663796932662
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "> Most type systems use a concept of “[[name]]”. If two *types* have the same name, then they must be equivalent. Names don’t work for any situation where we care about [[Behaviour]], and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n"
      },
      "date": 1663796951475
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "> Most type systems use a concept of “[[Name]]”. If two *types* have the same name, then they must be equivalent. Names don’t work for any situation where we care about [[Behaviour]], and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n"
      },
      "date": 1663797569256
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "> Most [[Type]] systems use a concept of “[[Name]]”. If two *types* have the same name, then they must be equivalent. Names don’t work for any situation where we care about [[Behaviour]], and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n"
      },
      "date": 1703053410085
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703054580954
    }
  ]
}