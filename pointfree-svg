{
  "title": "pointfree-svg",
  "story": [
    {
      "type": "paragraph",
      "id": "155a1b73a133054a",
      "text": "a non-browser demo to generate a SVG graphic [https://github.com/thi-ng/umbrella/tree/develop/examples/pointfree-svg#pointfree-svg github]"
    },
    {
      "type": "code",
      "id": "9b1944c12cfb33fe",
      "text": "import { serialize } from \"https://cdn.skypack.dev/@thi.ng/hiccup\";\nimport * as svg from \"https://cdn.skypack.dev/@thi.ng/hiccup-svg\";\nimport { ensureStack, maptos } from \"https://cdn.skypack.dev/@thi.ng/pointfree\";\nimport { ffi, run } from \"https://cdn.skypack.dev/@thi.ng/pointfree-lang\";\n//import { writeFileSync } from \"fs\";"
    },
    {
      "type": "frame",
      "id": "5396a0b4e33715c0",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 256"
    },
    {
      "type": "code",
      "id": "4b7c9b7ce31346f6",
      "text": "\n// rudimentary generic graphics lib & helper words\nconst libsrc = `\n( helper words for forming 2D vectors )\n: xy ( x y -- [x y] ) vec2 ;\n: yx ( x y -- [y x] ) swap vec2 ;\n\n( appends a hiccup shape element to @shapes array )\n: addshape ( s -- ) @shapes pushl drop ;\n\n( creates hiccup element with 2 args & shape type )\n: shape2 ( a b type -- ) -rot vec3 execjs addshape;\n\n( transforms 2 points into a svg line )\n: line ( a b -- ) @svg.line shape2 ;\n\n( transforms point and radius into a svg circle )\n: circle ( p r -- ) @svg.circle shape2 ;\n\n( creates a horizontal line )\n: hline ( y width -- ) over 0 yx -rot yx line ;\n\n( creates a vertical line )\n: vline ( x height -- ) over 0 xy -rot xy line ;\n\n(\n    2D grid loop construct\n    executes body quot for each iteration\n)\n: loop2 ( cols rows body -- )\n  >r [ over [ over cprd exec ] dotimes drop ] dotimes\n  drop rdrop ;\n`;\n// user code to generate SVG graphic and write out as file\n// the whole block has this stack effect:\n//\n// ( filename res -- )\nconst usersrc = `\n( creates grid of lines with given grid res )\n: grid ( res -- )\n  dup [10 * 100 dup2 hline vline] dotimes ;\n\n(\n    creates triangular grid of circles with given grid res\n    only creates circles for grid cells where x <= y\n)\n: circlegrid ( res -- )\n  dup [dup2 <= [xy 10 v* 3 circle] [drop2] if] loop2 ;\n\ngrid circlegrid\n\n( create SVG root element in hiccup format )\n[@svg.svg {width: 200, height: 200, stroke: \"#f04\", fill: \"none\"}]\n\n( concat generated shapes )\n@shapes cat\n\n(\n    execute entire quotation as JS function,\n    i.e call @svg.svg with all remaining values in quot / array\n)\nexecjs\n\n( serialize hiccup format to SVG and write to disk )\nserialize swap write-file\n`;\n// initialize environment and pre-compile library source\nconst env = ffi(\n// predefined variables\n{\n    \"svg.line\": svg.line,\n    \"svg.circle\": svg.circle,\n    \"svg.svg\": svg.svg,\n    shapes: [],\n}, \n// foreign function interface (FFI)\n// custom words usable by the DSL\n{\n    // ( svgdom -- svgstring )\n    serialize: maptos(serialize),\n    // ( body filename -- )\n    \"write-file\": (ctx) => {\n        const stack = ctx[0];\n        ensureStack(stack, 2);\n        writeFileSync(stack.pop(), stack.pop());\n        return ctx;\n    },\n});\n// compile lib (resulting words are stored in env)\nrun(libsrc, env);\n// compile & execute user code with given stack params\nrun(usersrc, env, [\"output.svg\", 21]);"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "pointfree-svg",
        "story": []
      },
      "date": 1678863678082
    },
    {
      "id": "9b1944c12cfb33fe",
      "type": "add",
      "item": {
        "type": "code",
        "id": "9b1944c12cfb33fe",
        "text": "import { serialize } from \"@thi.ng/hiccup\";\nimport * as svg from \"@thi.ng/hiccup-svg\";\nimport { ensureStack, maptos } from \"@thi.ng/pointfree\";\nimport { ffi, run } from \"@thi.ng/pointfree-lang\";\nimport { writeFileSync } from \"fs\";\n// rudimentary generic graphics lib & helper words\nconst libsrc = `\n( helper words for forming 2D vectors )\n: xy ( x y -- [x y] ) vec2 ;\n: yx ( x y -- [y x] ) swap vec2 ;\n\n( appends a hiccup shape element to @shapes array )\n: addshape ( s -- ) @shapes pushl drop ;\n\n( creates hiccup element with 2 args & shape type )\n: shape2 ( a b type -- ) -rot vec3 execjs addshape;\n\n( transforms 2 points into a svg line )\n: line ( a b -- ) @svg.line shape2 ;\n\n( transforms point and radius into a svg circle )\n: circle ( p r -- ) @svg.circle shape2 ;\n\n( creates a horizontal line )\n: hline ( y width -- ) over 0 yx -rot yx line ;\n\n( creates a vertical line )\n: vline ( x height -- ) over 0 xy -rot xy line ;\n\n(\n    2D grid loop construct\n    executes body quot for each iteration\n)\n: loop2 ( cols rows body -- )\n  >r [ over [ over cprd exec ] dotimes drop ] dotimes\n  drop rdrop ;\n`;\n// user code to generate SVG graphic and write out as file\n// the whole block has this stack effect:\n//\n// ( filename res -- )\nconst usersrc = `\n( creates grid of lines with given grid res )\n: grid ( res -- )\n  dup [10 * 100 dup2 hline vline] dotimes ;\n\n(\n    creates triangular grid of circles with given grid res\n    only creates circles for grid cells where x <= y\n)\n: circlegrid ( res -- )\n  dup [dup2 <= [xy 10 v* 3 circle] [drop2] if] loop2 ;\n\ngrid circlegrid\n\n( create SVG root element in hiccup format )\n[@svg.svg {width: 200, height: 200, stroke: \"#f04\", fill: \"none\"}]\n\n( concat generated shapes )\n@shapes cat\n\n(\n    execute entire quotation as JS function,\n    i.e call @svg.svg with all remaining values in quot / array\n)\nexecjs\n\n( serialize hiccup format to SVG and write to disk )\nserialize swap write-file\n`;\n// initialize environment and pre-compile library source\nconst env = ffi(\n// predefined variables\n{\n    \"svg.line\": svg.line,\n    \"svg.circle\": svg.circle,\n    \"svg.svg\": svg.svg,\n    shapes: [],\n}, \n// foreign function interface (FFI)\n// custom words usable by the DSL\n{\n    // ( svgdom -- svgstring )\n    serialize: maptos(serialize),\n    // ( body filename -- )\n    \"write-file\": (ctx) => {\n        const stack = ctx[0];\n        ensureStack(stack, 2);\n        writeFileSync(stack.pop(), stack.pop());\n        return ctx;\n    },\n});\n// compile lib (resulting words are stored in env)\nrun(libsrc, env);\n// compile & execute user code with given stack params\nrun(usersrc, env, [\"output.svg\", 21]);"
      },
      "attribution": {
        "page": "2023-03-15"
      },
      "date": 1678863695896
    },
    {
      "type": "edit",
      "id": "9b1944c12cfb33fe",
      "item": {
        "type": "code",
        "id": "9b1944c12cfb33fe",
        "text": "import { serialize } from \"https://cdn.skypack.dev/@thi.ng/hiccup\";\nimport * as svg from \"https://cdn.skypack.dev/@thi.ng/hiccup-svg\";\nimport { ensureStack, maptos } from \"https://cdn.skypack.dev/@thi.ng/pointfree\";\nimport { ffi, run } from \"https://cdn.skypack.dev/@thi.ng/pointfree-lang\";\nimport { writeFileSync } from \"fs\";\n// rudimentary generic graphics lib & helper words\nconst libsrc = `\n( helper words for forming 2D vectors )\n: xy ( x y -- [x y] ) vec2 ;\n: yx ( x y -- [y x] ) swap vec2 ;\n\n( appends a hiccup shape element to @shapes array )\n: addshape ( s -- ) @shapes pushl drop ;\n\n( creates hiccup element with 2 args & shape type )\n: shape2 ( a b type -- ) -rot vec3 execjs addshape;\n\n( transforms 2 points into a svg line )\n: line ( a b -- ) @svg.line shape2 ;\n\n( transforms point and radius into a svg circle )\n: circle ( p r -- ) @svg.circle shape2 ;\n\n( creates a horizontal line )\n: hline ( y width -- ) over 0 yx -rot yx line ;\n\n( creates a vertical line )\n: vline ( x height -- ) over 0 xy -rot xy line ;\n\n(\n    2D grid loop construct\n    executes body quot for each iteration\n)\n: loop2 ( cols rows body -- )\n  >r [ over [ over cprd exec ] dotimes drop ] dotimes\n  drop rdrop ;\n`;\n// user code to generate SVG graphic and write out as file\n// the whole block has this stack effect:\n//\n// ( filename res -- )\nconst usersrc = `\n( creates grid of lines with given grid res )\n: grid ( res -- )\n  dup [10 * 100 dup2 hline vline] dotimes ;\n\n(\n    creates triangular grid of circles with given grid res\n    only creates circles for grid cells where x <= y\n)\n: circlegrid ( res -- )\n  dup [dup2 <= [xy 10 v* 3 circle] [drop2] if] loop2 ;\n\ngrid circlegrid\n\n( create SVG root element in hiccup format )\n[@svg.svg {width: 200, height: 200, stroke: \"#f04\", fill: \"none\"}]\n\n( concat generated shapes )\n@shapes cat\n\n(\n    execute entire quotation as JS function,\n    i.e call @svg.svg with all remaining values in quot / array\n)\nexecjs\n\n( serialize hiccup format to SVG and write to disk )\nserialize swap write-file\n`;\n// initialize environment and pre-compile library source\nconst env = ffi(\n// predefined variables\n{\n    \"svg.line\": svg.line,\n    \"svg.circle\": svg.circle,\n    \"svg.svg\": svg.svg,\n    shapes: [],\n}, \n// foreign function interface (FFI)\n// custom words usable by the DSL\n{\n    // ( svgdom -- svgstring )\n    serialize: maptos(serialize),\n    // ( body filename -- )\n    \"write-file\": (ctx) => {\n        const stack = ctx[0];\n        ensureStack(stack, 2);\n        writeFileSync(stack.pop(), stack.pop());\n        return ctx;\n    },\n});\n// compile lib (resulting words are stored in env)\nrun(libsrc, env);\n// compile & execute user code with given stack params\nrun(usersrc, env, [\"output.svg\", 21]);"
      },
      "date": 1678863730179
    },
    {
      "item": {
        "type": "factory",
        "id": "4b7c9b7ce31346f6"
      },
      "id": "4b7c9b7ce31346f6",
      "type": "add",
      "after": "9b1944c12cfb33fe",
      "date": 1678863742745
    },
    {
      "type": "edit",
      "id": "9b1944c12cfb33fe",
      "item": {
        "type": "code",
        "id": "9b1944c12cfb33fe",
        "text": "import { serialize } from \"https://cdn.skypack.dev/@thi.ng/hiccup\";\nimport * as svg from \"https://cdn.skypack.dev/@thi.ng/hiccup-svg\";\nimport { ensureStack, maptos } from \"https://cdn.skypack.dev/@thi.ng/pointfree\";\nimport { ffi, run } from \"https://cdn.skypack.dev/@thi.ng/pointfree-lang\";\nimport { writeFileSync } from \"fs\";"
      },
      "date": 1678863756086
    },
    {
      "type": "edit",
      "id": "4b7c9b7ce31346f6",
      "item": {
        "type": "code",
        "id": "4b7c9b7ce31346f6",
        "text": "\n// rudimentary generic graphics lib & helper words\nconst libsrc = `\n( helper words for forming 2D vectors )\n: xy ( x y -- [x y] ) vec2 ;\n: yx ( x y -- [y x] ) swap vec2 ;\n\n( appends a hiccup shape element to @shapes array )\n: addshape ( s -- ) @shapes pushl drop ;\n\n( creates hiccup element with 2 args & shape type )\n: shape2 ( a b type -- ) -rot vec3 execjs addshape;\n\n( transforms 2 points into a svg line )\n: line ( a b -- ) @svg.line shape2 ;\n\n( transforms point and radius into a svg circle )\n: circle ( p r -- ) @svg.circle shape2 ;\n\n( creates a horizontal line )\n: hline ( y width -- ) over 0 yx -rot yx line ;\n\n( creates a vertical line )\n: vline ( x height -- ) over 0 xy -rot xy line ;\n\n(\n    2D grid loop construct\n    executes body quot for each iteration\n)\n: loop2 ( cols rows body -- )\n  >r [ over [ over cprd exec ] dotimes drop ] dotimes\n  drop rdrop ;\n`;\n// user code to generate SVG graphic and write out as file\n// the whole block has this stack effect:\n//\n// ( filename res -- )\nconst usersrc = `\n( creates grid of lines with given grid res )\n: grid ( res -- )\n  dup [10 * 100 dup2 hline vline] dotimes ;\n\n(\n    creates triangular grid of circles with given grid res\n    only creates circles for grid cells where x <= y\n)\n: circlegrid ( res -- )\n  dup [dup2 <= [xy 10 v* 3 circle] [drop2] if] loop2 ;\n\ngrid circlegrid\n\n( create SVG root element in hiccup format )\n[@svg.svg {width: 200, height: 200, stroke: \"#f04\", fill: \"none\"}]\n\n( concat generated shapes )\n@shapes cat\n\n(\n    execute entire quotation as JS function,\n    i.e call @svg.svg with all remaining values in quot / array\n)\nexecjs\n\n( serialize hiccup format to SVG and write to disk )\nserialize swap write-file\n`;\n// initialize environment and pre-compile library source\nconst env = ffi(\n// predefined variables\n{\n    \"svg.line\": svg.line,\n    \"svg.circle\": svg.circle,\n    \"svg.svg\": svg.svg,\n    shapes: [],\n}, \n// foreign function interface (FFI)\n// custom words usable by the DSL\n{\n    // ( svgdom -- svgstring )\n    serialize: maptos(serialize),\n    // ( body filename -- )\n    \"write-file\": (ctx) => {\n        const stack = ctx[0];\n        ensureStack(stack, 2);\n        writeFileSync(stack.pop(), stack.pop());\n        return ctx;\n    },\n});\n// compile lib (resulting words are stored in env)\nrun(libsrc, env);\n// compile & execute user code with given stack params\nrun(usersrc, env, [\"output.svg\", 21]);"
      },
      "date": 1678863758301
    },
    {
      "id": "5396a0b4e33715c0",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "5396a0b4e33715c0",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 256"
      },
      "after": "9b1944c12cfb33fe",
      "attribution": {
        "page": "2023-03-15"
      },
      "date": 1678863763050
    },
    {
      "type": "edit",
      "id": "9b1944c12cfb33fe",
      "item": {
        "type": "code",
        "id": "9b1944c12cfb33fe",
        "text": "import { serialize } from \"https://cdn.skypack.dev/@thi.ng/hiccup\";\nimport * as svg from \"https://cdn.skypack.dev/@thi.ng/hiccup-svg\";\nimport { ensureStack, maptos } from \"https://cdn.skypack.dev/@thi.ng/pointfree\";\nimport { ffi, run } from \"https://cdn.skypack.dev/@thi.ng/pointfree-lang\";\n//import { writeFileSync } from \"fs\";"
      },
      "date": 1678863771713
    },
    {
      "item": {
        "type": "factory",
        "id": "155a1b73a133054a"
      },
      "id": "155a1b73a133054a",
      "type": "add",
      "after": "4b7c9b7ce31346f6",
      "date": 1678863866191
    },
    {
      "id": "155a1b73a133054a",
      "type": "move",
      "order": [
        "155a1b73a133054a",
        "9b1944c12cfb33fe",
        "5396a0b4e33715c0",
        "4b7c9b7ce31346f6"
      ],
      "date": 1678863872637
    },
    {
      "type": "edit",
      "id": "155a1b73a133054a",
      "item": {
        "type": "paragraph",
        "id": "155a1b73a133054a",
        "text": "https://github.com/thi-ng/umbrella/tree/develop/examples/pointfree-svg#pointfree-svg github"
      },
      "date": 1678863905950
    },
    {
      "type": "edit",
      "id": "155a1b73a133054a",
      "item": {
        "type": "paragraph",
        "id": "155a1b73a133054a",
        "text": "a non-browser demo combining the following packages to generate the above SVG graphic: […] [https://github.com/thi-ng/umbrella/tree/develop/examples/pointfree-svg#pointfree-svg github]"
      },
      "date": 1678863932208
    },
    {
      "type": "edit",
      "id": "155a1b73a133054a",
      "item": {
        "type": "paragraph",
        "id": "155a1b73a133054a",
        "text": "a non-browser demo to generate a SVG graphic […] [https://github.com/thi-ng/umbrella/tree/develop/examples/pointfree-svg#pointfree-svg github]"
      },
      "date": 1678863957792
    },
    {
      "type": "edit",
      "id": "155a1b73a133054a",
      "item": {
        "type": "paragraph",
        "id": "155a1b73a133054a",
        "text": "a non-browser demo to generate a SVG graphic [https://github.com/thi-ng/umbrella/tree/develop/examples/pointfree-svg#pointfree-svg github]"
      },
      "date": 1678863962837
    }
  ]
}