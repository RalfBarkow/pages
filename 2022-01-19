{
  "title": "2022-01-19",
  "story": [
    {
      "type": "pagefold",
      "id": "1adf82ca9a5b873f",
      "text": "r/Zettelkasten"
    },
    {
      "type": "markdown",
      "id": "858756eaedbae602",
      "text": "**u/davidoskky** via [https://www.reddit.com/r/Zettelkasten/comments/s634ap/notes_for_recipes/ht648fg/ reddit]\n\nThanks, the video was interesting.\n\nWhat you're describing is exactly my objective: I want to identify more or less the common procedure for  the same recipe done by different people. Then I wish to compare the recipes among them, to find what is most common and what isn't.\n\nThe main difficulty here is finding a way to compare the recipes in an orderly way, so that insight about all the main differences and thing in common can be identified.\n\nFor example: the vast majority of recipes start by stir frying Onions and Carrots, to save space I shortened this with an acronym.\n\nWhat I note down is pretty much the ingredients in the order they are inserted while cooking and some notable cooking times of important steps, I separate steps with newlines.On recipes which have steps substantially different from the average I also note down these steps.\n\n&#x200B;\n\nFor example this is one of the recipes (in Italian...) while it would be hard to cook for someone who has never done it by following these instructions, this is clear to me and contains no redundant information; moreover this also contains a note on a common variation of this recipe.\n\n>Soffritto Cipolla Lardo Porri Burro Alloro Salvia Sedano  \n>  \n>Patate a pezzetti  \n>  \n>Trippa Pepe Sale Brodo 1 ora  \n>  \n>Verza a striscioline 1 ora  \n>  \n>Servire con parmigiano  \n>  \n>  \n>  \n>Togliendo la verza si possono usare tante cipolle"
    },
    {
      "type": "pagefold",
      "id": "6ea6096c87a68dd8",
      "text": "Federated Wiki"
    },
    {
      "type": "markdown",
      "id": "6d7359c9009979bd",
      "text": "**\"Answer a Form representing the receiver when empty.\"**"
    },
    {
      "type": "paragraph",
      "id": "5fc2f136d5cf6b1e",
      "text": "Plumbin' has its own [http://plumbin.ward.wiki.org/view/plumbin-in-wiki site]. I chose the flag to be the same color as the drop of water that appears when a fluid circuit completes. This is from 1997 version."
    },
    {
      "type": "html",
      "id": "067780e963560dea",
      "text": "<center>\n  <img\n    width=\"100%\"\n    src=\"https://dreyeck.freedombox.rocks/_matrix/media/r0/download/matrix.org/TbGjWUKRQCRQbtFNFYjBssGz\"\n  >\n</center>"
    },
    {
      "type": "paragraph",
      "id": "e0a77c4afd603cfc",
      "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1642544411172994mnFfn:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
    },
    {
      "type": "paragraph",
      "id": "3e1457ec0263b166",
      "text": "The drop appears by switching tile images. But the tank fills proportionally to the pressure in the line so it is really a bar graph. I need a construction that drag and drop like other tiles which are just img tags. I think I will need multiple wrappers and some mixture of relative and absolute positing. I was hoping it would be much simpler than the smalltalk maybe leaving out the bubbles."
    },
    {
      "type": "code",
      "id": "5ffbc1284d331fb4",
      "text": "form\n\"Answer a Form representing the receiver.\"\n| aForm indicator bubble |\naForm _ self emptyForm deepCopy.\nindicator _ self indicator.\nindicator _ indicator insetBy:\n(0@((1-self indication) * indicator height) rounded corner: 0@0).\naForm fill: indicator fillColor: Color blue.\n10 timesRepeat:\n[bubble _ (indicator left to: indicator right) atRandom @\n(indicator top to: indicator bottom) atRandom.\naForm colorAt: bubble put: Color white].\n^aForm\n"
    },
    {
      "type": "pagefold",
      "id": "f1ce7694ec4ccf19",
      "text": "gt"
    },
    {
      "type": "paragraph",
      "id": "f7bff3fb7718fc59",
      "text": "The-Project-Project [https://github.com/seandenigris/The-Project-Project github]"
    },
    {
      "type": "video",
      "id": "cac86284e795463f",
      "text": "YOUTUBE a3jBZIlXN1A\nTools for Thought Rocks: November 2021"
    },
    {
      "type": "markdown",
      "id": "febd5db66b868d32",
      "text": "https://youtu.be/a3jBZIlXN1A?t=2912"
    },
    {
      "type": "pagefold",
      "id": "694eb5b43c9c9482",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "ba3c314b5cb7a174",
      "text": "# Are Smalltalk and Pharo out-dated? \n\nAlan Kay [https://www.quora.com/Are-Smalltalk-and-Pharo-out-dated?share=1 quora]\n\nSure. What’s disappointing is that Smalltalk is still quite comparable to most programming languages in use today (and not always negatively).\n\nThis means that the computing establishment has done a terrible job in coming up with something qualitatively better over more than 40 years.\n\nAdded: October 27, 2020.\n\nIn a conscious analogy to Lisp, Smalltalk is made from just a few ideas with as much of the language as possible as “library”. Both languages have enough of a reflective meta-structure to allow many different pathways from the kernel.\n\nSo, a simple way to improve things using Smalltalk would be just to completely rewrite the library from scratch. Dan Ingalls used to do this every few years at Parc, and we did quite a bit — though not enough — when Squeak was done in the 90s.\n\nOne of the human “cognitive biases” is “loss aversion” and this ties in with others such as “investment value” (the time put into something makes it worth more), etc. There is also plain laziness, etc. All these have made the history of Smalltalk after Parc completely different from how we used Smalltalk within Parc.\n\nBut the 40 years since 1980, with the immense scalings and other happenings that have taken place — really demand a deeper set of designs, some of which affect the underlying semantics, especially for message passing.\n\nI’ve written and talked about some of these elsewhere, so won’t iterate here. People who consider themselves to be computerists and who are interested in languages, should take a look at what languages need to be able to do. If they did, they could not just answer the question, but also start to provide some of the new problems to be solved and the start of solutions for them."
    },
    {
      "type": "pagefold",
      "id": "1f5af4d1d61530eb",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f3e5f1630ff9e8f2",
      "text": "The Analyst Workstation System [http://bitsavers.informatik.uni-stuttgart.de/pdf/xerox/xsis/XSIS_Product_Brochure_Jun88.pdf pdf]"
    },
    {
      "type": "pagefold",
      "id": "e1566ec5e1ba4cb6",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "b0130bd98826a0f1",
      "text": "Richard Kenneth Eng\n, former Project Team Leader at ATI Technologies (1993-2000)"
    },
    {
      "type": "markdown",
      "id": "4848b222f599b5eb",
      "text": "How can Pharo be outdated??? It’s only 9 years old! That’s newer than Haskell, R, Groovy, Scala, F#, and Clojure, all of which have been getting lots of attention lately.\n\nFor all intents and purposes, Pharo is a new language\n\n, one that is most actively being developed. It’s exceeding any mandate that Smalltalk previously had. Its list of innovations is too long to include here, but Dimitris Chloupis in another question gave a partial list:\n\n1. Nativeboost, having an inline assembler is something that definitely is not a common feature in a dynamic language. There is even effort to create a portable assembler that will be even better fit for smalltalk.\n\n1. Moose is a code visualisation set of tools, containing many means to visualise and analyse code. Again not that common for dynamic languages AFAIK especially if you take into accoun that is open source.\n\n1. Amber itself is a big deal because not only brings smalltalk to javascript as a language but also as an IDE, IDEs that run inside the browser are not that common.\n\n1. Conitinuations in seaside also is a new feature , though seaside have been using them for quite some time now\n\n1. Fuel serialize live objects , for transmitting your objects around\n\n1. OZ allows one image to manipulate another one. Very good for debugging an image that has crashed and is unable to open/load.\n\n1. Pharo Launcher, does not just launch images, but allow you to download releases of pharo , some of them are loaded with their own libs etc . Making it easy to have tons of diffirent images everyone specializing in something diffirent and of course create your own and upload it. This is where the power of Image really shows and since images is something that appears only in smalltalk and lisp , definetly an innovation.\n\n1. Smalltalkhub, is pharo's Github, but unlike Github its fully open source and all smalltalk.\n\n1. Phratch is a port of Scratch to Pharo, this is important because Scratch has ported to Flash and this is an effort to keep Scratch smalltalk based. Excellent platform for teaching a kid coding.\n\n1. Shampoo , good support for pharo in emacs, meaning you can replace the pharo gui for emacs and have of course immediate access to all the thing that make emacs great. I would love to had that for python as well but alas .\n\n1. Command line support for Pharo, now that is easy to dismiss because come on , like all language work from command line, so what if Pharo woke up and finally decided to take advantage of command line. Well pharo is more than a programming language, its IDE and even an OS so having all that power from command line is definitely innovative and huge boost to any user using the terminal. Coral is similar that allows pharo to be used as Bash replacement.\n\n1. Many other projects including mine to bring a new fresh GUI api to pharo are WIPs that will definetly produced new exciting features for pharo and there is so much more than I missed here that definetly worths attention.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "d2dbcb05f7ce31ca",
      "text": "Even Smalltalk itself is far from irrelevant. Check out this list of Smalltalks [https://medium.com/smalltalk-talk/smalltalk-choices-6c39d09a40e6 medium] that show Smalltalk’s incredible versatility. There’s a Smalltalk for the web (two, actually), and for the JVM, and for Windows native, and for high performance, and for heavy-duty distributed database applications.\n\nSmalltalk is still used commercially around the globe. It has been for more than three decades. Some of its well-known users include JPMorgan, Desjardins, UBS, Florida Power & Light, Texas Instruments, Telecom Argentina, Orient Overseas Container Lines, Siemens AG, and so on. In the 2000s, the U.S. joint military used Smalltalk to write a million-line battle simulation program called JWARS. The project shut down in 2010 due to budgetary reasons. But it had a great run!\n\n\nSmalltalk is still cutting edge. Check out:\n\n1. Virtual Reality – Open Cobalt\nand 3D Immersive Collaboration\n1. Internet of Things – Pharo PI\n1. Machine learning – BioSmalltalk\n1. Data visualization – Agile Visualization\n\nDoes that sound even remotely outdated?"
    },
    {
      "type": "pagefold",
      "id": "6ca19efca251d264",
      "text": "DH"
    },
    {
      "type": "paragraph",
      "id": "433b93b94abcb8d0",
      "text": "p. 106"
    },
    {
      "type": "markdown",
      "id": "5ee624abbba7b4d5",
      "text": "There is also a scientistic turn towards neuroscience (Hayles) or engineering (Ramsay) for epistemological or methodological innovation. They also produce outputs for the visual exploration of data, which can take many forms, for instance these examples drawn from Boonstra et al. (2004): [[Lifelines]], The Lexis pencil, calendar view, concentric circles, visual analysis of texts, historical GIS, etc. For example, a technique we might think about using is *exploratory data analysis and data mining*, where data mining is a general term for a variety of techniques that are meant to gain insight into a data set."
    },
    {
      "type": "pagefold",
      "id": "8ad257c704d065be",
      "text": "DE"
    },
    {
      "type": "markdown",
      "id": "33b05f42776b7508",
      "text": "Es gibt auch eine wissenschaftliche Hinwendung zu den Neurowissenschaften (Hayles) oder zu den Ingenieurwissenschaften (Ramsay), wenn es um erkenntnistheoretische oder methodologische Innovationen geht. Sie produzieren auch Ergebnisse für die visuelle Untersuchung von Daten, die viele Formen annehmen können, wie zum Beispiel diese Beispiele aus Boonstra et al. (2004): [[Lifelines]], The Lexis pencil, Kalenderansicht, konzentrische Kreise, visuelle Analyse von Texten, historisches GIS, usw. Eine Technik, die wir in Erwägung ziehen könnten, ist zum Beispiel die *explorative Datenanalyse und das Data Mining*, wobei Data Mining ein allgemeiner Begriff für eine Vielzahl von Techniken ist, die dazu dienen, Einblicke in einen Datensatz zu gewinnen."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-01-19",
        "story": []
      },
      "date": 1642572670453
    },
    {
      "item": {
        "type": "factory",
        "id": "1adf82ca9a5b873f"
      },
      "id": "1adf82ca9a5b873f",
      "type": "add",
      "date": 1642572671858
    },
    {
      "type": "edit",
      "id": "1adf82ca9a5b873f",
      "item": {
        "type": "pagefold",
        "id": "1adf82ca9a5b873f",
        "text": "r/Zettelkasten"
      },
      "date": 1642572675369
    },
    {
      "item": {
        "type": "factory",
        "id": "858756eaedbae602"
      },
      "id": "858756eaedbae602",
      "type": "add",
      "after": "1adf82ca9a5b873f",
      "date": 1642572699217
    },
    {
      "type": "edit",
      "id": "858756eaedbae602",
      "item": {
        "type": "markdown",
        "id": "858756eaedbae602",
        "text": "Thanks, the video was interesting.\n\nWhat you're describing is exactly my objective: I want to identify more or less the common procedure for  the same recipe done by different people. Then I wish to compare the recipes among them, to find what is most common and what isn't.\n\nThe main difficulty here is finding a way to compare the recipes in an orderly way, so that insight about all the main differences and thing in common can be identified.\n\nFor example: the vast majority of recipes start by stir frying Onions and Carrots, to save space I shortened this with an acronym.\n\nWhat I note down is pretty much the ingredients in the order they are inserted while cooking and some notable cooking times of important steps, I separate steps with newlines.On recipes which have steps substantially different from the average I also note down these steps.\n\n&#x200B;\n\nFor example this is one of the recipes (in Italian...) while it would be hard to cook for someone who has never done it by following these instructions, this is clear to me and contains no redundant information; moreover this also contains a note on a common variation of this recipe.\n\n>Soffritto Cipolla Lardo Porri Burro Alloro Salvia Sedano  \n>  \n>Patate a pezzetti  \n>  \n>Trippa Pepe Sale Brodo 1 ora  \n>  \n>Verza a striscioline 1 ora  \n>  \n>Servire con parmigiano  \n>  \n>  \n>  \n>Togliendo la verza si possono usare tante cipolle"
      },
      "date": 1642572701213
    },
    {
      "type": "edit",
      "id": "858756eaedbae602",
      "item": {
        "type": "markdown",
        "id": "858756eaedbae602",
        "text": "u/davidoskky via [reddit]\nThanks, the video was interesting.\n\nWhat you're describing is exactly my objective: I want to identify more or less the common procedure for  the same recipe done by different people. Then I wish to compare the recipes among them, to find what is most common and what isn't.\n\nThe main difficulty here is finding a way to compare the recipes in an orderly way, so that insight about all the main differences and thing in common can be identified.\n\nFor example: the vast majority of recipes start by stir frying Onions and Carrots, to save space I shortened this with an acronym.\n\nWhat I note down is pretty much the ingredients in the order they are inserted while cooking and some notable cooking times of important steps, I separate steps with newlines.On recipes which have steps substantially different from the average I also note down these steps.\n\n&#x200B;\n\nFor example this is one of the recipes (in Italian...) while it would be hard to cook for someone who has never done it by following these instructions, this is clear to me and contains no redundant information; moreover this also contains a note on a common variation of this recipe.\n\n>Soffritto Cipolla Lardo Porri Burro Alloro Salvia Sedano  \n>  \n>Patate a pezzetti  \n>  \n>Trippa Pepe Sale Brodo 1 ora  \n>  \n>Verza a striscioline 1 ora  \n>  \n>Servire con parmigiano  \n>  \n>  \n>  \n>Togliendo la verza si possono usare tante cipolle"
      },
      "date": 1642572906897
    },
    {
      "type": "edit",
      "id": "858756eaedbae602",
      "item": {
        "type": "markdown",
        "id": "858756eaedbae602",
        "text": "u/davidoskky via [https://www.reddit.com/r/Zettelkasten/comments/s634ap/notes_for_recipes/ht648fg/ reddit]\nThanks, the video was interesting.\n\nWhat you're describing is exactly my objective: I want to identify more or less the common procedure for  the same recipe done by different people. Then I wish to compare the recipes among them, to find what is most common and what isn't.\n\nThe main difficulty here is finding a way to compare the recipes in an orderly way, so that insight about all the main differences and thing in common can be identified.\n\nFor example: the vast majority of recipes start by stir frying Onions and Carrots, to save space I shortened this with an acronym.\n\nWhat I note down is pretty much the ingredients in the order they are inserted while cooking and some notable cooking times of important steps, I separate steps with newlines.On recipes which have steps substantially different from the average I also note down these steps.\n\n&#x200B;\n\nFor example this is one of the recipes (in Italian...) while it would be hard to cook for someone who has never done it by following these instructions, this is clear to me and contains no redundant information; moreover this also contains a note on a common variation of this recipe.\n\n>Soffritto Cipolla Lardo Porri Burro Alloro Salvia Sedano  \n>  \n>Patate a pezzetti  \n>  \n>Trippa Pepe Sale Brodo 1 ora  \n>  \n>Verza a striscioline 1 ora  \n>  \n>Servire con parmigiano  \n>  \n>  \n>  \n>Togliendo la verza si possono usare tante cipolle"
      },
      "date": 1642573036530
    },
    {
      "type": "edit",
      "id": "858756eaedbae602",
      "item": {
        "type": "markdown",
        "id": "858756eaedbae602",
        "text": "u/davidoskky via [https://www.reddit.com/r/Zettelkasten/comments/s634ap/notes_for_recipes/ht648fg/ reddit]\n\nThanks, the video was interesting.\n\nWhat you're describing is exactly my objective: I want to identify more or less the common procedure for  the same recipe done by different people. Then I wish to compare the recipes among them, to find what is most common and what isn't.\n\nThe main difficulty here is finding a way to compare the recipes in an orderly way, so that insight about all the main differences and thing in common can be identified.\n\nFor example: the vast majority of recipes start by stir frying Onions and Carrots, to save space I shortened this with an acronym.\n\nWhat I note down is pretty much the ingredients in the order they are inserted while cooking and some notable cooking times of important steps, I separate steps with newlines.On recipes which have steps substantially different from the average I also note down these steps.\n\n&#x200B;\n\nFor example this is one of the recipes (in Italian...) while it would be hard to cook for someone who has never done it by following these instructions, this is clear to me and contains no redundant information; moreover this also contains a note on a common variation of this recipe.\n\n>Soffritto Cipolla Lardo Porri Burro Alloro Salvia Sedano  \n>  \n>Patate a pezzetti  \n>  \n>Trippa Pepe Sale Brodo 1 ora  \n>  \n>Verza a striscioline 1 ora  \n>  \n>Servire con parmigiano  \n>  \n>  \n>  \n>Togliendo la verza si possono usare tante cipolle"
      },
      "date": 1642573044942
    },
    {
      "item": {
        "type": "factory",
        "id": "6ea6096c87a68dd8"
      },
      "id": "6ea6096c87a68dd8",
      "type": "add",
      "after": "858756eaedbae602",
      "date": 1642573756103
    },
    {
      "type": "edit",
      "id": "6ea6096c87a68dd8",
      "item": {
        "type": "pagefold",
        "id": "6ea6096c87a68dd8",
        "text": "~"
      },
      "date": 1642573759900
    },
    {
      "item": {
        "type": "factory",
        "id": "6d7359c9009979bd"
      },
      "id": "6d7359c9009979bd",
      "type": "add",
      "after": "6ea6096c87a68dd8",
      "date": 1642573761616
    },
    {
      "type": "edit",
      "id": "6d7359c9009979bd",
      "item": {
        "type": "paragraph",
        "id": "6d7359c9009979bd",
        "text": "\"Answer a Form representing the receiver when empty.\"\n"
      },
      "date": 1642573766434
    },
    {
      "item": {
        "type": "factory",
        "id": "e0a77c4afd603cfc"
      },
      "id": "e0a77c4afd603cfc",
      "type": "add",
      "after": "6d7359c9009979bd",
      "date": 1642573884417
    },
    {
      "type": "edit",
      "id": "e0a77c4afd603cfc",
      "item": {
        "type": "paragraph",
        "id": "e0a77c4afd603cfc",
        "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1642544411172994mnFfn:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1642573898312
    },
    {
      "item": {
        "type": "factory",
        "id": "3e1457ec0263b166"
      },
      "id": "3e1457ec0263b166",
      "type": "add",
      "after": "e0a77c4afd603cfc",
      "date": 1642573908538
    },
    {
      "item": {
        "type": "factory",
        "id": "5ffbc1284d331fb4"
      },
      "id": "5ffbc1284d331fb4",
      "type": "add",
      "after": "3e1457ec0263b166",
      "date": 1642573911678
    },
    {
      "type": "edit",
      "id": "3e1457ec0263b166",
      "item": {
        "type": "paragraph",
        "id": "3e1457ec0263b166",
        "text": "The drop appears by switching tile images. But the tank fills proportionally to the pressure in the line so it is really a bar graph. I need a construction that drag and drop like other tiles which are just img tags. I think I will need multiple wrappers and some mixture of relative and absolute positing. I was hoping it would be much simpler than the smalltalk maybe leaving out the bubbles."
      },
      "date": 1642573912155
    },
    {
      "type": "edit",
      "id": "5ffbc1284d331fb4",
      "item": {
        "type": "code",
        "id": "5ffbc1284d331fb4",
        "text": "form\n\"Answer a Form representing the receiver.\"\n| aForm indicator bubble |\naForm _ self emptyForm deepCopy.\nindicator _ self indicator.\nindicator _ indicator insetBy:\n(0@((1-self indication) * indicator height) rounded corner: 0@0).\naForm fill: indicator fillColor: Color blue.\n10 timesRepeat:\n[bubble _ (indicator left to: indicator right) atRandom @\n(indicator top to: indicator bottom) atRandom.\naForm colorAt: bubble put: Color white].\n^aForm\n"
      },
      "date": 1642573920180
    },
    {
      "item": {
        "type": "factory",
        "id": "067780e963560dea"
      },
      "id": "067780e963560dea",
      "type": "add",
      "after": "5ffbc1284d331fb4",
      "date": 1642573974783
    },
    {
      "type": "edit",
      "id": "067780e963560dea",
      "item": {
        "type": "html",
        "id": "067780e963560dea",
        "text": "<center>\n  <img\n    width=\"100%\"\n\n  >\n</center>"
      },
      "date": 1642573998761
    },
    {
      "type": "edit",
      "id": "067780e963560dea",
      "item": {
        "type": "html",
        "id": "067780e963560dea",
        "text": "<center>\n  <img\n    width=\"100%\"\n    src=\"https://dreyeck.freedombox.rocks/_matrix/media/r0/download/matrix.org/TbGjWUKRQCRQbtFNFYjBssGz\"\n  >\n</center>"
      },
      "date": 1642574010933
    },
    {
      "id": "067780e963560dea",
      "type": "move",
      "order": [
        "1adf82ca9a5b873f",
        "858756eaedbae602",
        "067780e963560dea",
        "6ea6096c87a68dd8",
        "6d7359c9009979bd",
        "e0a77c4afd603cfc",
        "3e1457ec0263b166",
        "5ffbc1284d331fb4"
      ],
      "date": 1642574032629
    },
    {
      "id": "6ea6096c87a68dd8",
      "type": "move",
      "order": [
        "1adf82ca9a5b873f",
        "858756eaedbae602",
        "6ea6096c87a68dd8",
        "067780e963560dea",
        "6d7359c9009979bd",
        "e0a77c4afd603cfc",
        "3e1457ec0263b166",
        "5ffbc1284d331fb4"
      ],
      "date": 1642574035947
    },
    {
      "type": "edit",
      "id": "6ea6096c87a68dd8",
      "item": {
        "type": "pagefold",
        "id": "6ea6096c87a68dd8",
        "text": "Federated Wiki"
      },
      "date": 1642574050774
    },
    {
      "id": "6d7359c9009979bd",
      "type": "move",
      "order": [
        "1adf82ca9a5b873f",
        "858756eaedbae602",
        "6ea6096c87a68dd8",
        "6d7359c9009979bd",
        "067780e963560dea",
        "e0a77c4afd603cfc",
        "3e1457ec0263b166",
        "5ffbc1284d331fb4"
      ],
      "date": 1642574060110
    },
    {
      "type": "edit",
      "id": "858756eaedbae602",
      "item": {
        "type": "markdown",
        "id": "858756eaedbae602",
        "text": "**u/davidoskky** via [https://www.reddit.com/r/Zettelkasten/comments/s634ap/notes_for_recipes/ht648fg/ reddit]\n\nThanks, the video was interesting.\n\nWhat you're describing is exactly my objective: I want to identify more or less the common procedure for  the same recipe done by different people. Then I wish to compare the recipes among them, to find what is most common and what isn't.\n\nThe main difficulty here is finding a way to compare the recipes in an orderly way, so that insight about all the main differences and thing in common can be identified.\n\nFor example: the vast majority of recipes start by stir frying Onions and Carrots, to save space I shortened this with an acronym.\n\nWhat I note down is pretty much the ingredients in the order they are inserted while cooking and some notable cooking times of important steps, I separate steps with newlines.On recipes which have steps substantially different from the average I also note down these steps.\n\n&#x200B;\n\nFor example this is one of the recipes (in Italian...) while it would be hard to cook for someone who has never done it by following these instructions, this is clear to me and contains no redundant information; moreover this also contains a note on a common variation of this recipe.\n\n>Soffritto Cipolla Lardo Porri Burro Alloro Salvia Sedano  \n>  \n>Patate a pezzetti  \n>  \n>Trippa Pepe Sale Brodo 1 ora  \n>  \n>Verza a striscioline 1 ora  \n>  \n>Servire con parmigiano  \n>  \n>  \n>  \n>Togliendo la verza si possono usare tante cipolle"
      },
      "date": 1642574118032
    },
    {
      "type": "edit",
      "id": "6d7359c9009979bd",
      "item": {
        "type": "paragraph",
        "id": "6d7359c9009979bd",
        "text": "\"Answer a Form representing the receiver when empty.\""
      },
      "date": 1642574153618
    },
    {
      "type": "add",
      "id": "5fc2f136d5cf6b1e",
      "item": {
        "type": "paragraph",
        "id": "5fc2f136d5cf6b1e",
        "text": "Plumbin' has its own site. I chose the flag to be the same color as the drop of water that appears when a fluid circuit completes. This is from 1997 version."
      },
      "after": "6d7359c9009979bd",
      "date": 1642574156348
    },
    {
      "type": "edit",
      "id": "6d7359c9009979bd",
      "item": {
        "type": "paragraph",
        "id": "6d7359c9009979bd",
        "text": "**\"Answer a Form representing the receiver when empty.\"**"
      },
      "date": 1642574163287
    },
    {
      "type": "edit",
      "id": "6d7359c9009979bd",
      "item": {
        "type": "markdown",
        "id": "6d7359c9009979bd",
        "text": "**\"Answer a Form representing the receiver when empty.\"**"
      },
      "date": 1642574164728
    },
    {
      "type": "edit",
      "id": "5fc2f136d5cf6b1e",
      "item": {
        "type": "paragraph",
        "id": "5fc2f136d5cf6b1e",
        "text": "Plumbin' has its own [site]. I chose the flag to be the same color as the drop of water that appears when a fluid circuit completes. This is from 1997 version."
      },
      "date": 1642574462107
    },
    {
      "type": "edit",
      "id": "5fc2f136d5cf6b1e",
      "item": {
        "type": "paragraph",
        "id": "5fc2f136d5cf6b1e",
        "text": "Plumbin' has its own [http://plumbin.ward.wiki.org/view/plumbin-in-wiki site]. I chose the flag to be the same color as the drop of water that appears when a fluid circuit completes. This is from 1997 version."
      },
      "date": 1642574468702
    },
    {
      "item": {
        "type": "factory",
        "id": "f1ce7694ec4ccf19"
      },
      "id": "f1ce7694ec4ccf19",
      "type": "add",
      "after": "5ffbc1284d331fb4",
      "date": 1642575625120
    },
    {
      "type": "edit",
      "id": "f1ce7694ec4ccf19",
      "item": {
        "type": "pagefold",
        "id": "f1ce7694ec4ccf19",
        "text": "gt"
      },
      "date": 1642575628837
    },
    {
      "item": {
        "type": "factory",
        "id": "f7bff3fb7718fc59"
      },
      "id": "f7bff3fb7718fc59",
      "type": "add",
      "after": "f1ce7694ec4ccf19",
      "date": 1642575630469
    },
    {
      "type": "edit",
      "id": "f7bff3fb7718fc59",
      "item": {
        "type": "paragraph",
        "id": "f7bff3fb7718fc59",
        "text": "The-Project-Project [github]"
      },
      "date": 1642575688330
    },
    {
      "type": "edit",
      "id": "f7bff3fb7718fc59",
      "item": {
        "type": "paragraph",
        "id": "f7bff3fb7718fc59",
        "text": "The-Project-Project [https://github.com/seandenigris/The-Project-Project github]"
      },
      "date": 1642575696242
    },
    {
      "item": {
        "type": "factory",
        "id": "cac86284e795463f"
      },
      "id": "cac86284e795463f",
      "type": "add",
      "after": "f7bff3fb7718fc59",
      "date": 1642583147295
    },
    {
      "type": "edit",
      "id": "cac86284e795463f",
      "item": {
        "type": "video",
        "id": "cac86284e795463f",
        "text": "YOUTUBE a3jBZIlXN1A"
      },
      "date": 1642583158159
    },
    {
      "item": {
        "type": "factory",
        "id": "febd5db66b868d32"
      },
      "id": "febd5db66b868d32",
      "type": "add",
      "after": "cac86284e795463f",
      "date": 1642583171143
    },
    {
      "type": "edit",
      "id": "febd5db66b868d32",
      "item": {
        "type": "paragraph",
        "id": "febd5db66b868d32",
        "text": "https://youtu.be/a3jBZIlXN1A?t=2912"
      },
      "date": 1642583173807
    },
    {
      "type": "edit",
      "id": "febd5db66b868d32",
      "item": {
        "type": "markdown",
        "id": "febd5db66b868d32",
        "text": "https://youtu.be/a3jBZIlXN1A?t=2912"
      },
      "date": 1642583178241
    },
    {
      "type": "edit",
      "id": "cac86284e795463f",
      "item": {
        "type": "video",
        "id": "cac86284e795463f",
        "text": "YOUTUBE a3jBZIlXN1A\nTools for Thought Rocks: November 2021"
      },
      "date": 1642583219561
    },
    {
      "item": {
        "type": "factory",
        "id": "694eb5b43c9c9482"
      },
      "id": "694eb5b43c9c9482",
      "type": "add",
      "after": "febd5db66b868d32",
      "date": 1642591793459
    },
    {
      "type": "edit",
      "id": "694eb5b43c9c9482",
      "item": {
        "type": "pagefold",
        "id": "694eb5b43c9c9482",
        "text": "~"
      },
      "date": 1642591796836
    },
    {
      "item": {
        "type": "factory",
        "id": "ba3c314b5cb7a174"
      },
      "id": "ba3c314b5cb7a174",
      "type": "add",
      "after": "694eb5b43c9c9482",
      "date": 1642591798342
    },
    {
      "type": "edit",
      "id": "ba3c314b5cb7a174",
      "item": {
        "type": "paragraph",
        "id": "ba3c314b5cb7a174",
        "text": "Are Smalltalk and Pharo out-dated?\n6 Answers\nProfile photo for Alan Kay\nAlan Kay\n, Have designed a few programming languages\nUpdated 1 year ago · Author has 550 answers and 5.3M answer views\n\nSure. What’s disappointing is that Smalltalk is still quite comparable to most programming languages in use today (and not always negatively).\n\nThis means that the computing establishment has done a terrible job in coming up with something qualitatively better over more than 40 years.\n\nAdded: October 27, 2020.\n\nIn a conscious analogy to Lisp, Smalltalk is made from just a few ideas with as much of the language as possible as “library”. Both languages have enough of a reflective meta-structure to allow many different pathways from the kernel.\n\nSo, a simple way to improve things using Smalltalk would be just to completely rewrite the library from scratch. Dan Ingalls used to do this every few years at Parc, and we did quite a bit — though not enough — when Squeak was done in the 90s.\n\nOne of the human “cognitive biases” is “loss aversion” and this ties in with others such as “investment value” (the time put into something makes it worth more), etc. There is also plain laziness, etc. All these have made the history of Smalltalk after Parc completely different from how we used Smalltalk within Parc.\n\nBut the 40 years since 1980, with the immense scalings and other happenings that have taken place — really demand a deeper set of designs, some of which affect the underlying semantics, especially for message passing.\n\nI’ve written and talked about some of these elsewhere, so won’t iterate here. People who consider themselves to be computerists and who are interested in languages, should take a look at what languages need to be able to do. If they did, they could not just answer the question, but also start to provide some of the new problems to be solved and the start of solutions for them.\n6K viewsView upvotes\nView 1 share\nAnswer requested by\nPeter Fisk"
      },
      "date": 1642591801372
    },
    {
      "type": "edit",
      "id": "ba3c314b5cb7a174",
      "item": {
        "type": "paragraph",
        "id": "ba3c314b5cb7a174",
        "text": "# Are Smalltalk and Pharo out-dated?\n\nAlan Kay\n, Have designed a few programming languages\nUpdated 1 year ago · Author has 550 answers and 5.3M answer views\n\nSure. What’s disappointing is that Smalltalk is still quite comparable to most programming languages in use today (and not always negatively).\n\nThis means that the computing establishment has done a terrible job in coming up with something qualitatively better over more than 40 years.\n\nAdded: October 27, 2020.\n\nIn a conscious analogy to Lisp, Smalltalk is made from just a few ideas with as much of the language as possible as “library”. Both languages have enough of a reflective meta-structure to allow many different pathways from the kernel.\n\nSo, a simple way to improve things using Smalltalk would be just to completely rewrite the library from scratch. Dan Ingalls used to do this every few years at Parc, and we did quite a bit — though not enough — when Squeak was done in the 90s.\n\nOne of the human “cognitive biases” is “loss aversion” and this ties in with others such as “investment value” (the time put into something makes it worth more), etc. There is also plain laziness, etc. All these have made the history of Smalltalk after Parc completely different from how we used Smalltalk within Parc.\n\nBut the 40 years since 1980, with the immense scalings and other happenings that have taken place — really demand a deeper set of designs, some of which affect the underlying semantics, especially for message passing.\n\nI’ve written and talked about some of these elsewhere, so won’t iterate here. People who consider themselves to be computerists and who are interested in languages, should take a look at what languages need to be able to do. If they did, they could not just answer the question, but also start to provide some of the new problems to be solved and the start of solutions for them.\n6K viewsView upvotes\nView 1 share\nAnswer requested by\nPeter Fisk"
      },
      "date": 1642591818686
    },
    {
      "type": "edit",
      "id": "ba3c314b5cb7a174",
      "item": {
        "type": "paragraph",
        "id": "ba3c314b5cb7a174",
        "text": "# Are Smalltalk and Pharo out-dated? [https://www.quora.com/Are-Smalltalk-and-Pharo-out-dated?share=1 quora]\n\nAlan Kay\n, Have designed a few programming languages\nUpdated 1 year ago · Author has 550 answers and 5.3M answer views\n\nSure. What’s disappointing is that Smalltalk is still quite comparable to most programming languages in use today (and not always negatively).\n\nThis means that the computing establishment has done a terrible job in coming up with something qualitatively better over more than 40 years.\n\nAdded: October 27, 2020.\n\nIn a conscious analogy to Lisp, Smalltalk is made from just a few ideas with as much of the language as possible as “library”. Both languages have enough of a reflective meta-structure to allow many different pathways from the kernel.\n\nSo, a simple way to improve things using Smalltalk would be just to completely rewrite the library from scratch. Dan Ingalls used to do this every few years at Parc, and we did quite a bit — though not enough — when Squeak was done in the 90s.\n\nOne of the human “cognitive biases” is “loss aversion” and this ties in with others such as “investment value” (the time put into something makes it worth more), etc. There is also plain laziness, etc. All these have made the history of Smalltalk after Parc completely different from how we used Smalltalk within Parc.\n\nBut the 40 years since 1980, with the immense scalings and other happenings that have taken place — really demand a deeper set of designs, some of which affect the underlying semantics, especially for message passing.\n\nI’ve written and talked about some of these elsewhere, so won’t iterate here. People who consider themselves to be computerists and who are interested in languages, should take a look at what languages need to be able to do. If they did, they could not just answer the question, but also start to provide some of the new problems to be solved and the start of solutions for them.\n6K viewsView upvotes\nView 1 share\nAnswer requested by\nPeter Fisk"
      },
      "date": 1642591832698
    },
    {
      "type": "edit",
      "id": "ba3c314b5cb7a174",
      "item": {
        "type": "markdown",
        "id": "ba3c314b5cb7a174",
        "text": "# Are Smalltalk and Pharo out-dated? [https://www.quora.com/Are-Smalltalk-and-Pharo-out-dated?share=1 quora]\n\nAlan Kay\n, Have designed a few programming languages\nUpdated 1 year ago · Author has 550 answers and 5.3M answer views\n\nSure. What’s disappointing is that Smalltalk is still quite comparable to most programming languages in use today (and not always negatively).\n\nThis means that the computing establishment has done a terrible job in coming up with something qualitatively better over more than 40 years.\n\nAdded: October 27, 2020.\n\nIn a conscious analogy to Lisp, Smalltalk is made from just a few ideas with as much of the language as possible as “library”. Both languages have enough of a reflective meta-structure to allow many different pathways from the kernel.\n\nSo, a simple way to improve things using Smalltalk would be just to completely rewrite the library from scratch. Dan Ingalls used to do this every few years at Parc, and we did quite a bit — though not enough — when Squeak was done in the 90s.\n\nOne of the human “cognitive biases” is “loss aversion” and this ties in with others such as “investment value” (the time put into something makes it worth more), etc. There is also plain laziness, etc. All these have made the history of Smalltalk after Parc completely different from how we used Smalltalk within Parc.\n\nBut the 40 years since 1980, with the immense scalings and other happenings that have taken place — really demand a deeper set of designs, some of which affect the underlying semantics, especially for message passing.\n\nI’ve written and talked about some of these elsewhere, so won’t iterate here. People who consider themselves to be computerists and who are interested in languages, should take a look at what languages need to be able to do. If they did, they could not just answer the question, but also start to provide some of the new problems to be solved and the start of solutions for them.\n6K viewsView upvotes\nView 1 share\nAnswer requested by\nPeter Fisk"
      },
      "date": 1642591834057
    },
    {
      "type": "edit",
      "id": "ba3c314b5cb7a174",
      "item": {
        "type": "markdown",
        "id": "ba3c314b5cb7a174",
        "text": "# Are Smalltalk and Pharo out-dated? [https://www.quora.com/Are-Smalltalk-and-Pharo-out-dated?share=1 quora]\n\nAlan Kay\n\nSure. What’s disappointing is that Smalltalk is still quite comparable to most programming languages in use today (and not always negatively).\n\nThis means that the computing establishment has done a terrible job in coming up with something qualitatively better over more than 40 years.\n\nAdded: October 27, 2020.\n\nIn a conscious analogy to Lisp, Smalltalk is made from just a few ideas with as much of the language as possible as “library”. Both languages have enough of a reflective meta-structure to allow many different pathways from the kernel.\n\nSo, a simple way to improve things using Smalltalk would be just to completely rewrite the library from scratch. Dan Ingalls used to do this every few years at Parc, and we did quite a bit — though not enough — when Squeak was done in the 90s.\n\nOne of the human “cognitive biases” is “loss aversion” and this ties in with others such as “investment value” (the time put into something makes it worth more), etc. There is also plain laziness, etc. All these have made the history of Smalltalk after Parc completely different from how we used Smalltalk within Parc.\n\nBut the 40 years since 1980, with the immense scalings and other happenings that have taken place — really demand a deeper set of designs, some of which affect the underlying semantics, especially for message passing.\n\nI’ve written and talked about some of these elsewhere, so won’t iterate here. People who consider themselves to be computerists and who are interested in languages, should take a look at what languages need to be able to do. If they did, they could not just answer the question, but also start to provide some of the new problems to be solved and the start of solutions for them.\n6K viewsView upvotes\nView 1 share\nAnswer requested by\nPeter Fisk"
      },
      "date": 1642591847265
    },
    {
      "type": "edit",
      "id": "ba3c314b5cb7a174",
      "item": {
        "type": "markdown",
        "id": "ba3c314b5cb7a174",
        "text": "# Are Smalltalk and Pharo out-dated? [https://www.quora.com/Are-Smalltalk-and-Pharo-out-dated?share=1 quora]\n\nAlan Kay\n\nSure. What’s disappointing is that Smalltalk is still quite comparable to most programming languages in use today (and not always negatively).\n\nThis means that the computing establishment has done a terrible job in coming up with something qualitatively better over more than 40 years.\n\nAdded: October 27, 2020.\n\nIn a conscious analogy to Lisp, Smalltalk is made from just a few ideas with as much of the language as possible as “library”. Both languages have enough of a reflective meta-structure to allow many different pathways from the kernel.\n\nSo, a simple way to improve things using Smalltalk would be just to completely rewrite the library from scratch. Dan Ingalls used to do this every few years at Parc, and we did quite a bit — though not enough — when Squeak was done in the 90s.\n\nOne of the human “cognitive biases” is “loss aversion” and this ties in with others such as “investment value” (the time put into something makes it worth more), etc. There is also plain laziness, etc. All these have made the history of Smalltalk after Parc completely different from how we used Smalltalk within Parc.\n\nBut the 40 years since 1980, with the immense scalings and other happenings that have taken place — really demand a deeper set of designs, some of which affect the underlying semantics, especially for message passing.\n\nI’ve written and talked about some of these elsewhere, so won’t iterate here. People who consider themselves to be computerists and who are interested in languages, should take a look at what languages need to be able to do. If they did, they could not just answer the question, but also start to provide some of the new problems to be solved and the start of solutions for them."
      },
      "date": 1642591940047
    },
    {
      "type": "edit",
      "id": "ba3c314b5cb7a174",
      "item": {
        "type": "markdown",
        "id": "ba3c314b5cb7a174",
        "text": "# Are Smalltalk and Pharo out-dated? \n\nAlan Kay [https://www.quora.com/Are-Smalltalk-and-Pharo-out-dated?share=1 quora]\n\nSure. What’s disappointing is that Smalltalk is still quite comparable to most programming languages in use today (and not always negatively).\n\nThis means that the computing establishment has done a terrible job in coming up with something qualitatively better over more than 40 years.\n\nAdded: October 27, 2020.\n\nIn a conscious analogy to Lisp, Smalltalk is made from just a few ideas with as much of the language as possible as “library”. Both languages have enough of a reflective meta-structure to allow many different pathways from the kernel.\n\nSo, a simple way to improve things using Smalltalk would be just to completely rewrite the library from scratch. Dan Ingalls used to do this every few years at Parc, and we did quite a bit — though not enough — when Squeak was done in the 90s.\n\nOne of the human “cognitive biases” is “loss aversion” and this ties in with others such as “investment value” (the time put into something makes it worth more), etc. There is also plain laziness, etc. All these have made the history of Smalltalk after Parc completely different from how we used Smalltalk within Parc.\n\nBut the 40 years since 1980, with the immense scalings and other happenings that have taken place — really demand a deeper set of designs, some of which affect the underlying semantics, especially for message passing.\n\nI’ve written and talked about some of these elsewhere, so won’t iterate here. People who consider themselves to be computerists and who are interested in languages, should take a look at what languages need to be able to do. If they did, they could not just answer the question, but also start to provide some of the new problems to be solved and the start of solutions for them."
      },
      "date": 1642591955648
    },
    {
      "item": {
        "type": "factory",
        "id": "1f5af4d1d61530eb"
      },
      "id": "1f5af4d1d61530eb",
      "type": "add",
      "after": "ba3c314b5cb7a174",
      "date": 1642592225849
    },
    {
      "type": "edit",
      "id": "1f5af4d1d61530eb",
      "item": {
        "type": "pagefold",
        "id": "1f5af4d1d61530eb",
        "text": "~"
      },
      "date": 1642592228632
    },
    {
      "item": {
        "type": "factory",
        "id": "f3e5f1630ff9e8f2"
      },
      "id": "f3e5f1630ff9e8f2",
      "type": "add",
      "after": "1f5af4d1d61530eb",
      "date": 1642592230069
    },
    {
      "type": "edit",
      "id": "f3e5f1630ff9e8f2",
      "item": {
        "type": "paragraph",
        "id": "f3e5f1630ff9e8f2",
        "text": "The Analyst Workstation System [pdf]"
      },
      "date": 1642592244042
    },
    {
      "type": "edit",
      "id": "f3e5f1630ff9e8f2",
      "item": {
        "type": "paragraph",
        "id": "f3e5f1630ff9e8f2",
        "text": "The Analyst Workstation System [http://bitsavers.informatik.uni-stuttgart.de/pdf/xerox/xsis/XSIS_Product_Brochure_Jun88.pdf pdf]"
      },
      "date": 1642592253236
    },
    {
      "item": {
        "type": "factory",
        "id": "e1566ec5e1ba4cb6"
      },
      "id": "e1566ec5e1ba4cb6",
      "type": "add",
      "after": "f3e5f1630ff9e8f2",
      "date": 1642592372183
    },
    {
      "type": "edit",
      "id": "e1566ec5e1ba4cb6",
      "item": {
        "type": "pagefold",
        "id": "e1566ec5e1ba4cb6",
        "text": "~"
      },
      "date": 1642592376975
    },
    {
      "item": {
        "type": "factory",
        "id": "b0130bd98826a0f1"
      },
      "id": "b0130bd98826a0f1",
      "type": "add",
      "after": "e1566ec5e1ba4cb6",
      "date": 1642592378743
    },
    {
      "type": "edit",
      "id": "b0130bd98826a0f1",
      "item": {
        "type": "paragraph",
        "id": "b0130bd98826a0f1",
        "text": "Richard Kenneth Eng\n, former Project Team Leader at ATI Technologies (1993-2000)"
      },
      "date": 1642592382245
    },
    {
      "item": {
        "type": "factory",
        "id": "77fe54180160376e"
      },
      "id": "77fe54180160376e",
      "type": "add",
      "after": "b0130bd98826a0f1",
      "date": 1642592401536
    },
    {
      "type": "remove",
      "id": "77fe54180160376e",
      "date": 1642592403956
    },
    {
      "item": {
        "type": "factory",
        "id": "4848b222f599b5eb"
      },
      "id": "4848b222f599b5eb",
      "type": "add",
      "after": "b0130bd98826a0f1",
      "date": 1642592406295
    },
    {
      "type": "edit",
      "id": "4848b222f599b5eb",
      "item": {
        "type": "markdown",
        "id": "4848b222f599b5eb",
        "text": "How can Pharo be outdated??? It’s only 9 years old! That’s newer than Haskell, R, Groovy, Scala, F#, and Clojure, all of which have been getting lots of attention lately.\n\nFor all intents and purposes, Pharo is a new language\n\n, one that is most actively being developed. It’s exceeding any mandate that Smalltalk previously had. Its list of innovations is too long to include here, but Dimitris Chloupis in another question gave a partial list:\n\n    1) Nativeboost, having an inline assembler is something that definitely is not a common feature in a dynamic language. There is even effort to create a portable assembler that will be even better fit for smalltalk.\n\n    2) Moose is a code visualisation set of tools, containing many means to visualise and analyse code. Again not that common for dynamic languages AFAIK especially if you take into accoun that is open source.\n\n    3) Amber itself is a big deal because not only brings smalltalk to javascript as a language but also as an IDE, IDEs that run inside the browser are not that common.\n\n    4) Conitinuations in seaside also is a new feature , though seaside have been using them for quite some time now\n\n    5) Fuel serialize live objects , for transmitting your objects around\n\n    6) OZ allows one image to manipulate another one. Very good for debugging an image that has crashed and is unable to open/load.\n\n    7) Pharo Launcher, does not just launch images, but allow you to download releases of pharo , some of them are loaded with their own libs etc . Making it easy to have tons of diffirent images everyone specializing in something diffirent and of course create your own and upload it. This is where the power of Image really shows and since images is something that appears only in smalltalk and lisp , definetly an innovation.\n\n    8) Smalltalkhub, is pharo's Github, but unlike Github its fully open source and all smalltalk.\n\n    9) Phratch is a port of Scratch to Pharo, this is important because Scratch has ported to Flash and this is an effort to keep Scratch smalltalk based. Excellent platform for teaching a kid coding.\n\n    10) Shampoo , good support for pharo in emacs, meaning you can replace the pharo gui for emacs and have of course immediate access to all the thing that make emacs great. I would love to had that for python as well but alas .\n\n    11) Command line support for Pharo, now that is easy to dismiss because come on , like all language work from command line, so what if Pharo woke up and finally decided to take advantage of command line. Well pharo is more than a programming language, its IDE and even an OS so having all that power from command line is definitely innovative and huge boost to any user using the terminal. Coral is similar that allows pharo to be used as Bash replacement.\n\n    12) Many other projects including mine to bring a new fresh GUI api to pharo are WIPs that will definetly produced new exciting features for pharo and there is so much more than I missed here that definetly worths attention.\n\nEven Smalltalk itself is far from irrelevant. Check out this list of Smalltalks\n\nthat show Smalltalk’s incredible versatility. There’s a Smalltalk for the web (two, actually), and for the JVM, and for Windows native, and for high performance, and for heavy-duty distributed database applications.\n\nSmalltalk is still used commercially around the globe. It has been for more than three decades. Some of its well-known users include JPMorgan, Desjardins, UBS, Florida Power & Light, Texas Instruments, Telecom Argentina, Orient Overseas Container Lines, Siemens AG, and so on. In the 2000s, the U.S. joint military used Smalltalk to write a million-line battle simulation program called JWARS. The project shut down in 2010 due to budgetary reasons. But it had a great run!\n\nSmalltalk is still cutting edge. Check out:\n\n    Virtual Reality – Open Cobalt\n\nand 3D Immersive Collaboration\nInternet of Things – Pharo PI\nMachine learning – BioSmalltalk\nData visualization – Agile Visualization\n\nDoes that sound even remotely outdated?"
      },
      "date": 1642592407971
    },
    {
      "type": "edit",
      "id": "4848b222f599b5eb",
      "item": {
        "type": "markdown",
        "id": "4848b222f599b5eb",
        "text": "How can Pharo be outdated??? It’s only 9 years old! That’s newer than Haskell, R, Groovy, Scala, F#, and Clojure, all of which have been getting lots of attention lately.\n\nFor all intents and purposes, Pharo is a new language\n\n, one that is most actively being developed. It’s exceeding any mandate that Smalltalk previously had. Its list of innovations is too long to include here, but Dimitris Chloupis in another question gave a partial list:\n\n1. Nativeboost, having an inline assembler is something that definitely is not a common feature in a dynamic language. There is even effort to create a portable assembler that will be even better fit for smalltalk.\n\n1. Moose is a code visualisation set of tools, containing many means to visualise and analyse code. Again not that common for dynamic languages AFAIK especially if you take into accoun that is open source.\n\n1. Amber itself is a big deal because not only brings smalltalk to javascript as a language but also as an IDE, IDEs that run inside the browser are not that common.\n\n1. Conitinuations in seaside also is a new feature , though seaside have been using them for quite some time now\n\n1. Fuel serialize live objects , for transmitting your objects around\n\n1. OZ allows one image to manipulate another one. Very good for debugging an image that has crashed and is unable to open/load.\n\n1.Pharo Launcher, does not just launch images, but allow you to download releases of pharo , some of them are loaded with their own libs etc . Making it easy to have tons of diffirent images everyone specializing in something diffirent and of course create your own and upload it. This is where the power of Image really shows and since images is something that appears only in smalltalk and lisp , definetly an innovation.\n\n1. Smalltalkhub, is pharo's Github, but unlike Github its fully open source and all smalltalk.\n\n1. Phratch is a port of Scratch to Pharo, this is important because Scratch has ported to Flash and this is an effort to keep Scratch smalltalk based. Excellent platform for teaching a kid coding.\n\n1. Shampoo , good support for pharo in emacs, meaning you can replace the pharo gui for emacs and have of course immediate access to all the thing that make emacs great. I would love to had that for python as well but alas .\n\n1. Command line support for Pharo, now that is easy to dismiss because come on , like all language work from command line, so what if Pharo woke up and finally decided to take advantage of command line. Well pharo is more than a programming language, its IDE and even an OS so having all that power from command line is definitely innovative and huge boost to any user using the terminal. Coral is similar that allows pharo to be used as Bash replacement.\n\n1. Many other projects including mine to bring a new fresh GUI api to pharo are WIPs that will definetly produced new exciting features for pharo and there is so much more than I missed here that definetly worths attention.\n\nEven Smalltalk itself is far from irrelevant. Check out this list of Smalltalks\n\nthat show Smalltalk’s incredible versatility. There’s a Smalltalk for the web (two, actually), and for the JVM, and for Windows native, and for high performance, and for heavy-duty distributed database applications.\n\nSmalltalk is still used commercially around the globe. It has been for more than three decades. Some of its well-known users include JPMorgan, Desjardins, UBS, Florida Power & Light, Texas Instruments, Telecom Argentina, Orient Overseas Container Lines, Siemens AG, and so on. In the 2000s, the U.S. joint military used Smalltalk to write a million-line battle simulation program called JWARS. The project shut down in 2010 due to budgetary reasons. But it had a great run!\n\nSmalltalk is still cutting edge. Check out:\n\n    Virtual Reality – Open Cobalt\n\nand 3D Immersive Collaboration\nInternet of Things – Pharo PI\nMachine learning – BioSmalltalk\nData visualization – Agile Visualization\n\nDoes that sound even remotely outdated?"
      },
      "date": 1642592511624
    },
    {
      "type": "edit",
      "id": "4848b222f599b5eb",
      "item": {
        "type": "markdown",
        "id": "4848b222f599b5eb",
        "text": "How can Pharo be outdated??? It’s only 9 years old! That’s newer than Haskell, R, Groovy, Scala, F#, and Clojure, all of which have been getting lots of attention lately.\n\nFor all intents and purposes, Pharo is a new language\n\n, one that is most actively being developed. It’s exceeding any mandate that Smalltalk previously had. Its list of innovations is too long to include here, but Dimitris Chloupis in another question gave a partial list:\n\n1. Nativeboost, having an inline assembler is something that definitely is not a common feature in a dynamic language. There is even effort to create a portable assembler that will be even better fit for smalltalk.\n\n1. Moose is a code visualisation set of tools, containing many means to visualise and analyse code. Again not that common for dynamic languages AFAIK especially if you take into accoun that is open source.\n\n1. Amber itself is a big deal because not only brings smalltalk to javascript as a language but also as an IDE, IDEs that run inside the browser are not that common.\n\n1. Conitinuations in seaside also is a new feature , though seaside have been using them for quite some time now\n\n1. Fuel serialize live objects , for transmitting your objects around\n\n1. OZ allows one image to manipulate another one. Very good for debugging an image that has crashed and is unable to open/load.\n\n1. Pharo Launcher, does not just launch images, but allow you to download releases of pharo , some of them are loaded with their own libs etc . Making it easy to have tons of diffirent images everyone specializing in something diffirent and of course create your own and upload it. This is where the power of Image really shows and since images is something that appears only in smalltalk and lisp , definetly an innovation.\n\n1. Smalltalkhub, is pharo's Github, but unlike Github its fully open source and all smalltalk.\n\n1. Phratch is a port of Scratch to Pharo, this is important because Scratch has ported to Flash and this is an effort to keep Scratch smalltalk based. Excellent platform for teaching a kid coding.\n\n1. Shampoo , good support for pharo in emacs, meaning you can replace the pharo gui for emacs and have of course immediate access to all the thing that make emacs great. I would love to had that for python as well but alas .\n\n1. Command line support for Pharo, now that is easy to dismiss because come on , like all language work from command line, so what if Pharo woke up and finally decided to take advantage of command line. Well pharo is more than a programming language, its IDE and even an OS so having all that power from command line is definitely innovative and huge boost to any user using the terminal. Coral is similar that allows pharo to be used as Bash replacement.\n\n1. Many other projects including mine to bring a new fresh GUI api to pharo are WIPs that will definetly produced new exciting features for pharo and there is so much more than I missed here that definetly worths attention.\n\nEven Smalltalk itself is far from irrelevant. Check out this list of Smalltalks [\n\nthat show Smalltalk’s incredible versatility. There’s a Smalltalk for the web (two, actually), and for the JVM, and for Windows native, and for high performance, and for heavy-duty distributed database applications.\n\nSmalltalk is still used commercially around the globe. It has been for more than three decades. Some of its well-known users include JPMorgan, Desjardins, UBS, Florida Power & Light, Texas Instruments, Telecom Argentina, Orient Overseas Container Lines, Siemens AG, and so on. In the 2000s, the U.S. joint military used Smalltalk to write a million-line battle simulation program called JWARS. The project shut down in 2010 due to budgetary reasons. But it had a great run!\n\nSmalltalk is still cutting edge. Check out:\n\n    Virtual Reality – Open Cobalt\n\nand 3D Immersive Collaboration\nInternet of Things – Pharo PI\nMachine learning – BioSmalltalk\nData visualization – Agile Visualization\n\nDoes that sound even remotely outdated?"
      },
      "date": 1642592552995
    },
    {
      "type": "edit",
      "id": "4848b222f599b5eb",
      "item": {
        "type": "markdown",
        "id": "4848b222f599b5eb",
        "text": "How can Pharo be outdated??? It’s only 9 years old! That’s newer than Haskell, R, Groovy, Scala, F#, and Clojure, all of which have been getting lots of attention lately.\n\nFor all intents and purposes, Pharo is a new language\n\n, one that is most actively being developed. It’s exceeding any mandate that Smalltalk previously had. Its list of innovations is too long to include here, but Dimitris Chloupis in another question gave a partial list:\n\n1. Nativeboost, having an inline assembler is something that definitely is not a common feature in a dynamic language. There is even effort to create a portable assembler that will be even better fit for smalltalk.\n\n1. Moose is a code visualisation set of tools, containing many means to visualise and analyse code. Again not that common for dynamic languages AFAIK especially if you take into accoun that is open source.\n\n1. Amber itself is a big deal because not only brings smalltalk to javascript as a language but also as an IDE, IDEs that run inside the browser are not that common.\n\n1. Conitinuations in seaside also is a new feature , though seaside have been using them for quite some time now\n\n1. Fuel serialize live objects , for transmitting your objects around\n\n1. OZ allows one image to manipulate another one. Very good for debugging an image that has crashed and is unable to open/load.\n\n1. Pharo Launcher, does not just launch images, but allow you to download releases of pharo , some of them are loaded with their own libs etc . Making it easy to have tons of diffirent images everyone specializing in something diffirent and of course create your own and upload it. This is where the power of Image really shows and since images is something that appears only in smalltalk and lisp , definetly an innovation.\n\n1. Smalltalkhub, is pharo's Github, but unlike Github its fully open source and all smalltalk.\n\n1. Phratch is a port of Scratch to Pharo, this is important because Scratch has ported to Flash and this is an effort to keep Scratch smalltalk based. Excellent platform for teaching a kid coding.\n\n1. Shampoo , good support for pharo in emacs, meaning you can replace the pharo gui for emacs and have of course immediate access to all the thing that make emacs great. I would love to had that for python as well but alas .\n\n1. Command line support for Pharo, now that is easy to dismiss because come on , like all language work from command line, so what if Pharo woke up and finally decided to take advantage of command line. Well pharo is more than a programming language, its IDE and even an OS so having all that power from command line is definitely innovative and huge boost to any user using the terminal. Coral is similar that allows pharo to be used as Bash replacement.\n\n1. Many other projects including mine to bring a new fresh GUI api to pharo are WIPs that will definetly produced new exciting features for pharo and there is so much more than I missed here that definetly worths attention.\n\n\n"
      },
      "date": 1642592567704
    },
    {
      "type": "add",
      "id": "d2dbcb05f7ce31ca",
      "item": {
        "type": "markdown",
        "id": "d2dbcb05f7ce31ca",
        "text": "Even Smalltalk itself is far from irrelevant. Check out this list of Smalltalks [https://medium.com/smalltalk-talk/smalltalk-choices-6c39d09a40e6 medium]\n\nthat show Smalltalk’s incredible versatility. There’s a Smalltalk for the web (two, actually), and for the JVM, and for Windows native, and for high performance, and for heavy-duty distributed database applications.\n\nSmalltalk is still used commercially around the globe. It has been for more than three decades. Some of its well-known users include JPMorgan, Desjardins, UBS, Florida Power & Light, Texas Instruments, Telecom Argentina, Orient Overseas Container Lines, Siemens AG, and so on. In the 2000s, the U.S. joint military used Smalltalk to write a million-line battle simulation program called JWARS. The project shut down in 2010 due to budgetary reasons. But it had a great run!\n\nSmalltalk is still cutting edge. Check out:\n\n    Virtual Reality – Open Cobalt\n\nand 3D Immersive Collaboration\nInternet of Things – Pharo PI\nMachine learning – BioSmalltalk\nData visualization – Agile Visualization\n\nDoes that sound even remotely outdated?"
      },
      "after": "4848b222f599b5eb",
      "date": 1642592574463
    },
    {
      "type": "edit",
      "id": "d2dbcb05f7ce31ca",
      "item": {
        "type": "markdown",
        "id": "d2dbcb05f7ce31ca",
        "text": "Even Smalltalk itself is far from irrelevant. Check out this list of Smalltalks [https://medium.com/smalltalk-talk/smalltalk-choices-6c39d09a40e6 medium] that show Smalltalk’s incredible versatility. There’s a Smalltalk for the web (two, actually), and for the JVM, and for Windows native, and for high performance, and for heavy-duty distributed database applications.\n\nSmalltalk is still used commercially around the globe. It has been for more than three decades. Some of its well-known users include JPMorgan, Desjardins, UBS, Florida Power & Light, Texas Instruments, Telecom Argentina, Orient Overseas Container Lines, Siemens AG, and so on. In the 2000s, the U.S. joint military used Smalltalk to write a million-line battle simulation program called JWARS. The project shut down in 2010 due to budgetary reasons. But it had a great run!\n\nSmalltalk is still cutting edge. Check out:\n\n    Virtual Reality – Open Cobalt\n\nand 3D Immersive Collaboration\nInternet of Things – Pharo PI\nMachine learning – BioSmalltalk\nData visualization – Agile Visualization\n\nDoes that sound even remotely outdated?"
      },
      "date": 1642592586635
    },
    {
      "type": "edit",
      "id": "d2dbcb05f7ce31ca",
      "item": {
        "type": "markdown",
        "id": "d2dbcb05f7ce31ca",
        "text": "Even Smalltalk itself is far from irrelevant. Check out this list of Smalltalks [https://medium.com/smalltalk-talk/smalltalk-choices-6c39d09a40e6 medium] that show Smalltalk’s incredible versatility. There’s a Smalltalk for the web (two, actually), and for the JVM, and for Windows native, and for high performance, and for heavy-duty distributed database applications.\n\nSmalltalk is still used commercially around the globe. It has been for more than three decades. Some of its well-known users include JPMorgan, Desjardins, UBS, Florida Power & Light, Texas Instruments, Telecom Argentina, Orient Overseas Container Lines, Siemens AG, and so on. In the 2000s, the U.S. joint military used Smalltalk to write a million-line battle simulation program called JWARS. The project shut down in 2010 due to budgetary reasons. But it had a great run!\n\n\nSmalltalk is still cutting edge. Check out:\n\n1. Virtual Reality – Open Cobalt\nand 3D Immersive Collaboration\n1. Internet of Things – Pharo PI\n1. Machine learning – BioSmalltalk\n1. Data visualization – Agile Visualization\n\nDoes that sound even remotely outdated?"
      },
      "date": 1642592686411
    },
    {
      "item": {
        "type": "factory",
        "id": "6ca19efca251d264"
      },
      "id": "6ca19efca251d264",
      "type": "add",
      "after": "d2dbcb05f7ce31ca",
      "date": 1642595228918
    },
    {
      "type": "edit",
      "id": "6ca19efca251d264",
      "item": {
        "type": "pagefold",
        "id": "6ca19efca251d264",
        "text": "DH"
      },
      "date": 1642595232294
    },
    {
      "item": {
        "type": "factory",
        "id": "433b93b94abcb8d0"
      },
      "id": "433b93b94abcb8d0",
      "type": "add",
      "after": "6ca19efca251d264",
      "date": 1642595233463
    },
    {
      "type": "edit",
      "id": "433b93b94abcb8d0",
      "item": {
        "type": "paragraph",
        "id": "433b93b94abcb8d0",
        "text": "There is also a scientistic turn towards neuroscience (Hayles) or engineering (Ramsay) for epistemological or methodological innovation.\nThey also produce outputs for the visual exploration of data, which can take many forms, for instance these examples drawn from Boonstra et al. (2004): Lifelines, The Lexis pencil, calendar view, concentric circles, visual analysis of texts, historical GIS, etc. For example, a technique we might think about\nusing is exploratory data analysis and data mining, where data mining is a general term for a variety of techniques that are meant to gain insight into\na data set."
      },
      "date": 1642595259568
    },
    {
      "type": "edit",
      "id": "433b93b94abcb8d0",
      "item": {
        "type": "paragraph",
        "id": "433b93b94abcb8d0",
        "text": "p. 106"
      },
      "date": 1642595366911
    },
    {
      "type": "add",
      "id": "5ee624abbba7b4d5",
      "item": {
        "type": "paragraph",
        "id": "5ee624abbba7b4d5",
        "text": "There is also a scientistic turn towards neuroscience (Hayles) or engineering (Ramsay) for epistemological or methodological innovation. They also produce outputs for the visual exploration of data, which can take many forms, for instance these examples drawn from Boonstra et al. (2004): Lifelines, The Lexis pencil, calendar view, concentric circles, visual analysis of texts, historical GIS, etc. For example, a technique we might think about using is *exploratory data analysis and data mining*, where data mining is a general term for a variety of techniques that are meant to gain insight into a data set."
      },
      "after": "433b93b94abcb8d0",
      "date": 1642595438251
    },
    {
      "type": "edit",
      "id": "5ee624abbba7b4d5",
      "item": {
        "type": "markdown",
        "id": "5ee624abbba7b4d5",
        "text": "There is also a scientistic turn towards neuroscience (Hayles) or engineering (Ramsay) for epistemological or methodological innovation. They also produce outputs for the visual exploration of data, which can take many forms, for instance these examples drawn from Boonstra et al. (2004): Lifelines, The Lexis pencil, calendar view, concentric circles, visual analysis of texts, historical GIS, etc. For example, a technique we might think about using is *exploratory data analysis and data mining*, where data mining is a general term for a variety of techniques that are meant to gain insight into a data set."
      },
      "date": 1642595439894
    },
    {
      "item": {
        "type": "factory",
        "id": "8ad257c704d065be"
      },
      "id": "8ad257c704d065be",
      "type": "add",
      "after": "5ee624abbba7b4d5",
      "date": 1642595448683
    },
    {
      "type": "edit",
      "id": "8ad257c704d065be",
      "item": {
        "type": "pagefold",
        "id": "8ad257c704d065be",
        "text": "DE"
      },
      "date": 1642595452392
    },
    {
      "item": {
        "type": "factory",
        "id": "33b05f42776b7508"
      },
      "id": "33b05f42776b7508",
      "type": "add",
      "after": "8ad257c704d065be",
      "date": 1642595454285
    },
    {
      "type": "edit",
      "id": "33b05f42776b7508",
      "item": {
        "type": "markdown",
        "id": "33b05f42776b7508",
        "text": "Es gibt auch eine wissenschaftliche Hinwendung zu den Neurowissenschaften (Hayles) oder zu den Ingenieurwissenschaften (Ramsay), wenn es um erkenntnistheoretische oder methodologische Innovationen geht. Sie produzieren auch Ergebnisse für die visuelle Untersuchung von Daten, die viele Formen annehmen können, wie zum Beispiel diese Beispiele aus Boonstra et al. (2004): Lifelines, The Lexis pencil, Kalenderansicht, konzentrische Kreise, visuelle Analyse von Texten, historisches GIS, usw. Eine Technik, die wir in Erwägung ziehen könnten, ist zum Beispiel die *explorative Datenanalyse und das Data Mining*, wobei Data Mining ein allgemeiner Begriff für eine Vielzahl von Techniken ist, die dazu dienen, Einblicke in einen Datensatz zu gewinnen."
      },
      "date": 1642595456727
    },
    {
      "type": "edit",
      "id": "5ee624abbba7b4d5",
      "item": {
        "type": "markdown",
        "id": "5ee624abbba7b4d5",
        "text": "There is also a scientistic turn towards neuroscience (Hayles) or engineering (Ramsay) for epistemological or methodological innovation. They also produce outputs for the visual exploration of data, which can take many forms, for instance these examples drawn from Boonstra et al. (2004): [[Lifelines]], The Lexis pencil, calendar view, concentric circles, visual analysis of texts, historical GIS, etc. For example, a technique we might think about using is *exploratory data analysis and data mining*, where data mining is a general term for a variety of techniques that are meant to gain insight into a data set."
      },
      "date": 1642595902878
    },
    {
      "type": "edit",
      "id": "33b05f42776b7508",
      "item": {
        "type": "markdown",
        "id": "33b05f42776b7508",
        "text": "Es gibt auch eine wissenschaftliche Hinwendung zu den Neurowissenschaften (Hayles) oder zu den Ingenieurwissenschaften (Ramsay), wenn es um erkenntnistheoretische oder methodologische Innovationen geht. Sie produzieren auch Ergebnisse für die visuelle Untersuchung von Daten, die viele Formen annehmen können, wie zum Beispiel diese Beispiele aus Boonstra et al. (2004): [[Lifelines]], The Lexis pencil, Kalenderansicht, konzentrische Kreise, visuelle Analyse von Texten, historisches GIS, usw. Eine Technik, die wir in Erwägung ziehen könnten, ist zum Beispiel die *explorative Datenanalyse und das Data Mining*, wobei Data Mining ein allgemeiner Begriff für eine Vielzahl von Techniken ist, die dazu dienen, Einblicke in einen Datensatz zu gewinnen."
      },
      "date": 1642596105301
    }
  ]
}