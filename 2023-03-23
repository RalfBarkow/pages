{
  "title": "2023-03-23",
  "story": [
    {
      "type": "paragraph",
      "id": "05aee0b3df7982e5",
      "text": "⇒ [[Valency]] ⇒ [[Subcategorization]] ⇒ [[Verb]] "
    },
    {
      "type": "paragraph",
      "id": "0ad7010b7e23e71a",
      "text": "⇒ [[Learning]] ⇒ [[Theory]] ⇒ [[Learning Process]] "
    },
    {
      "type": "markdown",
      "id": "d1139c415762e45d",
      "text": "Exzerpt | ɛksˈt͜sɛrpt |\nneuter noun Gen. Exzerpt[e]s Pl. Exzerpte\nexcerpt"
    },
    {
      "type": "pagefold",
      "id": "c6da559508d7fa89",
      "text": "Table Lookup and Dispatch"
    },
    {
      "type": "paragraph",
      "id": "ef44266ef8110a38",
      "text": "⇒ [[Task Location]] ⇒ [[Model Free Method Zoo]] ⇒ [[Understanding Machines]] ⇒ [[Table Lookup]] ⇒ [[Interrupt Vector Table]] ⇒ [[Dispatch Table]] ⇒ [[Table Lookup and Dispatch]]"
    },
    {
      "type": "code",
      "id": "22acf4f9975a39ca",
      "text": "// Define an array to hold the interrupt vector table\nlet ivt = [];"
    },
    {
      "type": "code",
      "id": "10893239e255c334",
      "text": "import { $compile } from \"https://cdn.skypack.dev/@thi.ng/rdom\";"
    },
    {
      "type": "code",
      "id": "4986a1da64967ed1",
      "text": "// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n    $compile(\n      [\"pre\", {}, \"No task assigned to interrupt \", interruptNumber, \".\"]\n    ).mount(document.getElementById(\"output\"));\n  }\n}\n"
    },
    {
      "type": "paragraph",
      "id": "5195bfa67c3156d2",
      "text": "Output frame: [⇒ [[Static Import Snippet]], importjs.html]"
    },
    {
      "type": "frame",
      "id": "ddedbbab48a1c800",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 150"
    },
    {
      "type": "reference",
      "id": "6e7adca8a4947ee9",
      "site": "wiki.ralfbarkow.ch",
      "slug": "read-context-of-frame",
      "title": "Read Context of Frame",
      "text": "We send a message to the Frame asking it to send us info about the page surrounding it. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]"
    },
    {
      "type": "code",
      "id": "c8963fb39e7da82f",
      "text": "window.addEventListener(\"message\", handler)\nlet message = { action:\"sendFrameContext\" }\nwindow.parent.postMessage(message, \"*\")"
    },
    {
      "type": "paragraph",
      "id": "433e0069aa2ef6ee",
      "text": "We stop listening then process the data we got."
    },
    {
      "type": "code",
      "id": "00e55c113558b626",
      "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n\n"
    },
    {
      "type": "code",
      "id": "d7574718b64878e4",
      "text": "// Define a function to add a new entry to the interrupt vector table\nfunction addEntry(ivtIndex, taskFunction) {\n  ivt[ivtIndex] = taskFunction;\n}\n\n// Define task functions\nfunction task1() {\n  console.log(\"Task 1 executed.\");\n  $compile(\n    [\"pre\", {}, \"Task 1 executed.\"]\n  ).mount(document.getElementById(\"output\"));\n}\n\nfunction task2() {\n  console.log(\"Task 2 executed.\");\n  $compile(\n    [\"pre\", {}, \"Task 2 executed.\"]\n  ).mount(document.getElementById(\"output\"));\n}\n\nfunction task3() {\n  console.log(\"Task 3 executed.\");\n  $compile(\n    [\"pre\", {}, \"Task 3 executed.\"]\n  ).mount(document.getElementById(\"output\"));\n}"
    },
    {
      "type": "code",
      "id": "ffa8a37d180c60bb",
      "text": "// Add entries to the interrupt vector table\naddEntry(0, task1);\naddEntry(1, task2);\naddEntry(2, task3);"
    },
    {
      "type": "code",
      "id": "8859f8ab344d4f31",
      "text": "    show(page)\n  }\n"
    },
    {
      "type": "code",
      "id": "4f012f477cadcea9",
      "text": "} // end of function handler"
    },
    {
      "type": "code",
      "id": "cff317c5386f7b33",
      "text": "function show (page) {\n\n"
    },
    {
      "type": "code",
      "id": "3b414cfd84b3491d",
      "text": "// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
    },
    {
      "type": "code",
      "id": "0130fe33b11c4037",
      "text": "} // end of function show"
    },
    {
      "type": "paragraph",
      "id": "0b42bc5f7084f306",
      "text": "⇒ .innerHTML body generation use case ⇒ [[@thi.ng/hiccup]] ⇒ [[@thi.ng/rdom]] ⇒ [[User Interaction Graph]]"
    },
    {
      "type": "paragraph",
      "id": "2965aa870bcba4f2",
      "text": "Changing the innerHTML property of an HTML element is a common way to  display data in HTML. [https://www.studocu.com/row/document/jamaa%D8%A9-alesra%D8%A1-jordan/software-engineering/java-script-a-little-summary-for-html-and-some-examples-for-practicing/27918404 page]"
    },
    {
      "type": "paragraph",
      "id": "85806559bdaa7335",
      "text": "How can I get the click event inside an innerHTML? [https://stackoverflow.com/questions/60234468/how-can-i-get-the-click-event-inside-an-innerhtml stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "02cf27b653317942",
      "text": "JavaScript Interactivity [https://geobgu.xyz/web-mapping-2020/javascript-interactivity.html page]"
    },
    {
      "type": "pagefold",
      "id": "416a4aa43c69b09a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a0eaff4843eecd6b",
      "text": "⇒ [[Pair Programming Conversational Agents]]"
    },
    {
      "type": "paragraph",
      "id": "fd20654c6e47e315",
      "text": "natural language understanding (NLU) model"
    },
    {
      "type": "paragraph",
      "id": "5c17db6be69714af",
      "text": "Codex JavaScript Sandbox"
    },
    {
      "type": "pagefold",
      "id": "86e3a68f08790498",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "7070d212daf8d730",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1679155305183661gEjhz:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] once suggested at a software engineering workshop that every line of code should be annotated with what window was read before the line was written. This might be the [[Time]] that matters."
    },
    {
      "type": "paragraph",
      "id": "f0d0fcd88695533b",
      "text": "My suggestion was taken as some far-fetched thought experiment by a community that was not yet coding in windows. I was already fascinated by my year or two with Smalltalk-80 where I knew that Strings annotated character by character with objects became Texts, run-length encoded for efficiency. And, a window was just an object. This story would be better if I had actually coded what I described. I think I was succumbed with group think and just thought about how this might be useful hoping for something more like commit comments."
    },
    {
      "type": "paragraph",
      "id": "72005275b4feee4c",
      "text": "⇒ [[User Interaction Graph]]"
    },
    {
      "type": "markdown",
      "id": "9d8580cfead02baf",
      "text": "> Each node on the graph is uniquely identified by the hash of the Document Object Model (DOM) which it represents. The current state of the DOM (including any modifications done by client-side JavaScript) can be obtained via JavaScript read of document.body.innerHTML. This variable is saved to a file and its hash is used to label its corresponding node on the user-interaction graph. Therefore, for any node on the user-interaction graph, by setting document.body.innerHTML to the value stored in the file with the same hash (label) as this given node, we can reset the DOM state of the browser to that which it was during the dataset generation phase."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-03-23",
        "story": []
      },
      "date": 1679554976356
    },
    {
      "item": {
        "type": "factory",
        "id": "e7042bd3b2a3c74d"
      },
      "id": "e7042bd3b2a3c74d",
      "type": "add",
      "date": 1679555205748
    },
    {
      "type": "edit",
      "id": "e7042bd3b2a3c74d",
      "item": {
        "type": "paragraph",
        "id": "e7042bd3b2a3c74d",
        "text": "\nWU, Wen-Jie and XU, Yan, 2010. Correlation analysis of visual verbs’ subcategorization based on Pearson’s correlation coefficient. In: 2010 International Conference on Machine Learning and Cybernetics. July 2010. p. 2042–2046. DOI 10.1109/ICMLC.2010.5580507. In the research of modern linguistics, word frame information, which is significant in the study of Chinese information processing, draws more researchers’ attention. Its distinction between word argument and auxiliaries plays an important part in the precision of syntactic analysis, elimination of semantic ambiguities and semantic role labeling. Therefore, the study of categorization frame information became a hot issue in the recent years. With the constant development of machine learning technology, an increasing number of computational methods have been applied to many fields, including text classification, language processing and semantic analysis, etc. This approach is the supplement and breakthrough to the traditional methods of linguistic study. In this paper, Pearson’s correlation coefficient, which can reflect the correlative information between two variables, is adopted to analyze the correlation between the frequency and functions of Chinese visual verbs. The result is that word frequency takes on positive correlations with the main functions of the word, though with certain differences in the degree of the correlation.\n"
      },
      "date": 1679555211762
    },
    {
      "item": {
        "type": "factory",
        "id": "05aee0b3df7982e5"
      },
      "id": "05aee0b3df7982e5",
      "type": "add",
      "after": "e7042bd3b2a3c74d",
      "date": 1679555222698
    },
    {
      "id": "05aee0b3df7982e5",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "e7042bd3b2a3c74d"
      ],
      "date": 1679555224694
    },
    {
      "type": "edit",
      "id": "05aee0b3df7982e5",
      "item": {
        "type": "paragraph",
        "id": "05aee0b3df7982e5",
        "text": "⇒ [[Subcategorization]]"
      },
      "date": 1679555238643
    },
    {
      "type": "edit",
      "id": "05aee0b3df7982e5",
      "item": {
        "type": "paragraph",
        "id": "05aee0b3df7982e5",
        "text": "⇒ [[Subcategorization]] Verb Valency"
      },
      "date": 1679555331456
    },
    {
      "type": "edit",
      "id": "05aee0b3df7982e5",
      "item": {
        "type": "paragraph",
        "id": "05aee0b3df7982e5",
        "text": "⇒ [[Valency]] ⇒ [[Subcategorization]] ⇒ [[Verb]] "
      },
      "date": 1679555348127
    },
    {
      "id": "e7042bd3b2a3c74d",
      "type": "remove",
      "removedTo": {
        "page": "Subcategorization"
      },
      "date": 1679555508974
    },
    {
      "item": {
        "type": "factory",
        "id": "b949005bc8cdd8d1"
      },
      "id": "b949005bc8cdd8d1",
      "type": "add",
      "after": "05aee0b3df7982e5",
      "date": 1679557563377
    },
    {
      "type": "edit",
      "id": "b949005bc8cdd8d1",
      "item": {
        "type": "paragraph",
        "id": "b949005bc8cdd8d1",
        "text": "\nSCHUNK, Dale H., 2012. Learning theories: an educational perspective. . 6th ed. Boston: Pearson. ISBN 978-0-13-707195-1. LB1060 .S37 2012\n"
      },
      "date": 1679557565380
    },
    {
      "type": "edit",
      "id": "b949005bc8cdd8d1",
      "item": {
        "type": "paragraph",
        "id": "b949005bc8cdd8d1",
        "text": "SCHUNK, Dale H., 2012. Learning theories: an educational perspective. . 6th ed. Boston: Pearson. ISBN 978-0-13-707195-1. LB1060 .S37 2012\n"
      },
      "date": 1679557570929
    },
    {
      "type": "add",
      "id": "0ad7010b7e23e71a",
      "item": {
        "type": "paragraph",
        "id": "0ad7010b7e23e71a",
        "text": " [[Learning]]"
      },
      "after": "05aee0b3df7982e5",
      "date": 1679557589961
    },
    {
      "type": "edit",
      "id": "0ad7010b7e23e71a",
      "item": {
        "type": "paragraph",
        "id": "0ad7010b7e23e71a",
        "text": "⇒ [[Learning]] ⇒ [[Theory]]"
      },
      "date": 1679557604502
    },
    {
      "type": "edit",
      "id": "b949005bc8cdd8d1",
      "item": {
        "type": "paragraph",
        "id": "b949005bc8cdd8d1",
        "text": "SCHUNK, Dale H., 2012. Learning theories: an educational perspective. 6th ed. Boston: Pearson. ISBN 978-0-13-707195-1. \n"
      },
      "date": 1679557622915
    },
    {
      "item": {
        "type": "factory",
        "id": "802b71128b49a738"
      },
      "id": "802b71128b49a738",
      "type": "add",
      "after": "b949005bc8cdd8d1",
      "date": 1679557900095
    },
    {
      "type": "edit",
      "id": "802b71128b49a738",
      "item": {
        "type": "paragraph",
        "id": "802b71128b49a738",
        "text": "Bruner, J. (1985). Models of the learner. Educational Researcher, 14(6), 5–8."
      },
      "date": 1679557904045
    },
    {
      "item": {
        "type": "factory",
        "id": "1380b7fd614b4249"
      },
      "id": "1380b7fd614b4249",
      "type": "add",
      "after": "802b71128b49a738",
      "date": 1679558376681
    },
    {
      "type": "edit",
      "id": "1380b7fd614b4249",
      "item": {
        "type": "paragraph",
        "id": "1380b7fd614b4249",
        "text": "> At the heart of the decision process there must be a value judgment about how the mind should be cultivated and to what end."
      },
      "date": 1679558379644
    },
    {
      "type": "edit",
      "id": "1380b7fd614b4249",
      "item": {
        "type": "markdown",
        "id": "1380b7fd614b4249",
        "text": "> At the heart of the decision process there must be a value judgment about how the mind should be cultivated and to what end."
      },
      "date": 1679558380805
    },
    {
      "type": "edit",
      "id": "1380b7fd614b4249",
      "item": {
        "type": "markdown",
        "id": "1380b7fd614b4249",
        "text": "> At the heart of the decision process there must be a value judgment about how the mind should be cultivated and to what [[End]]."
      },
      "date": 1679558397015
    },
    {
      "type": "edit",
      "id": "1380b7fd614b4249",
      "item": {
        "type": "markdown",
        "id": "1380b7fd614b4249",
        "text": "> At the heart of the decision process there must be a value judgment about how the mind should be cultivated and to what [[end]]."
      },
      "date": 1679558410048
    },
    {
      "type": "edit",
      "id": "0ad7010b7e23e71a",
      "item": {
        "type": "paragraph",
        "id": "0ad7010b7e23e71a",
        "text": "⇒ [[Learning]] ⇒ [[Theory]] ⇒ [Learning Process]] "
      },
      "date": 1679558468949
    },
    {
      "type": "edit",
      "id": "0ad7010b7e23e71a",
      "item": {
        "type": "paragraph",
        "id": "0ad7010b7e23e71a",
        "text": "⇒ [[Learning]] ⇒ [[Theory]] ⇒ [[Learning Process]] "
      },
      "date": 1679558473816
    },
    {
      "id": "b949005bc8cdd8d1",
      "type": "remove",
      "removedTo": {
        "page": "Learning Process"
      },
      "date": 1679558524290
    },
    {
      "id": "802b71128b49a738",
      "type": "remove",
      "removedTo": {
        "page": "Learning Process"
      },
      "date": 1679558526901
    },
    {
      "id": "1380b7fd614b4249",
      "type": "remove",
      "removedTo": {
        "page": "Learning Process"
      },
      "date": 1679558529284
    },
    {
      "item": {
        "type": "factory",
        "id": "d1139c415762e45d"
      },
      "id": "d1139c415762e45d",
      "type": "add",
      "after": "0ad7010b7e23e71a",
      "date": 1679560216886
    },
    {
      "type": "edit",
      "id": "d1139c415762e45d",
      "item": {
        "type": "markdown",
        "id": "d1139c415762e45d",
        "text": "Exzerpt | ɛksˈt͜sɛrpt |\nneuter noun Gen. Exzerpt[e]s Pl. Exzerpte\nexcerpt"
      },
      "date": 1679560219421
    },
    {
      "item": {
        "type": "factory",
        "id": "ef44266ef8110a38"
      },
      "id": "ef44266ef8110a38",
      "type": "add",
      "after": "d1139c415762e45d",
      "date": 1679563042922
    },
    {
      "type": "edit",
      "id": "ef44266ef8110a38",
      "item": {
        "type": "paragraph",
        "id": "ef44266ef8110a38",
        "text": "⇒ [[Task Location]]"
      },
      "date": 1679563061699
    },
    {
      "type": "edit",
      "id": "ef44266ef8110a38",
      "item": {
        "type": "paragraph",
        "id": "ef44266ef8110a38",
        "text": "⇒ [[Task Location]] ⇒ [[Table Lookup]]"
      },
      "date": 1679563168541
    },
    {
      "type": "edit",
      "id": "ef44266ef8110a38",
      "item": {
        "type": "paragraph",
        "id": "ef44266ef8110a38",
        "text": "⇒ [[Task Location]] ⇒ [[Table Lookup]] ⇒ [[Interrupt Vector Table]] ⇒ [[Dispatch Table]]"
      },
      "date": 1679563807337
    },
    {
      "item": {
        "type": "factory",
        "id": "4986a1da64967ed1"
      },
      "id": "4986a1da64967ed1",
      "type": "add",
      "after": "ef44266ef8110a38",
      "date": 1679570626799,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "fork",
      "date": 1679570644792
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "// Define an array to hold the interrupt vector table\nlet ivt = [];\n\n// Define a function to add a new entry to the interrupt vector table\nfunction addEntry(ivtIndex, taskFunction) {\n  ivt[ivtIndex] = taskFunction;\n}\n\n// Define task functions\nfunction task1() {\n  console.log(\"Task 1 executed.\");\n}\n\nfunction task2() {\n  console.log(\"Task 2 executed.\");\n}\n\nfunction task3() {\n  console.log(\"Task 3 executed.\");\n}\n\n// Add entries to the interrupt vector table\naddEntry(0, task1);\naddEntry(1, task2);\naddEntry(2, task3);\n\n// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  }\n}\n\n// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679570670502
    },
    {
      "item": {
        "type": "factory",
        "id": "ca292c3c33128cab"
      },
      "id": "ca292c3c33128cab",
      "type": "add",
      "after": "4986a1da64967ed1",
      "date": 1679570718174
    },
    {
      "type": "edit",
      "id": "ca292c3c33128cab",
      "item": {
        "type": "frame",
        "id": "ca292c3c33128cab",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/basicjs.html\nHEIGHT 75"
      },
      "date": 1679570721240
    },
    {
      "type": "edit",
      "id": "ef44266ef8110a38",
      "item": {
        "type": "paragraph",
        "id": "ef44266ef8110a38",
        "text": "⇒ [[Task Location]] ⇒ [[Table Lookup]] ⇒ [[Interrupt Vector Table]] ⇒ [[Dispatch Table]] "
      },
      "date": 1679571182667
    },
    {
      "type": "add",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "Static Import Snippet"
      },
      "after": "ef44266ef8110a38",
      "date": 1679571183606
    },
    {
      "id": "ff30b94a0bed5243",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "4986a1da64967ed1",
        "ff30b94a0bed5243",
        "ca292c3c33128cab"
      ],
      "date": 1679571187686
    },
    {
      "type": "edit",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "⇒ [[Static Import Snippet]]"
      },
      "date": 1679571200816
    },
    {
      "id": "6e7adca8a4947ee9",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "6e7adca8a4947ee9",
        "site": "wiki.ralfbarkow.ch",
        "slug": "read-context-of-frame",
        "title": "Read Context of Frame",
        "text": "We send a message to the Frame asking it to send us info about the page surrounding it. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]"
      },
      "after": "ef44266ef8110a38",
      "attribution": {
        "page": "Journal to Graph"
      },
      "date": 1679571418908
    },
    {
      "id": "c8963fb39e7da82f",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "window.addEventListener(\"message\", handler)\nlet message = { action:\"sendFrameContext\" }\nwindow.parent.postMessage(message, \"*\")"
      },
      "after": "6e7adca8a4947ee9",
      "attribution": {
        "page": "Journal to Graph"
      },
      "date": 1679571425302
    },
    {
      "id": "433e0069aa2ef6ee",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "433e0069aa2ef6ee",
        "text": "We stop listening then process the data we got."
      },
      "after": "c8963fb39e7da82f",
      "attribution": {
        "page": "Journal to Graph"
      },
      "date": 1679571429482
    },
    {
      "id": "00e55c113558b626",
      "type": "add",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    show(page, journal)\n  }\n}"
      },
      "after": "433e0069aa2ef6ee",
      "attribution": {
        "page": "Journal to Graph"
      },
      "date": 1679571441724
    },
    {
      "item": {
        "type": "factory",
        "id": "4f012f477cadcea9"
      },
      "id": "4f012f477cadcea9",
      "type": "add",
      "after": "ca292c3c33128cab",
      "date": 1679571467909
    },
    {
      "id": "4f012f477cadcea9",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "4f012f477cadcea9",
        "4986a1da64967ed1",
        "ff30b94a0bed5243",
        "ca292c3c33128cab"
      ],
      "date": 1679571474435
    },
    {
      "type": "edit",
      "id": "4f012f477cadcea9",
      "item": {
        "type": "code",
        "id": "4f012f477cadcea9",
        "text": "}"
      },
      "date": 1679571483938
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    show(page, journal)\n  }\n"
      },
      "date": 1679571490678
    },
    {
      "type": "add",
      "id": "ed7d289cc7d808d0",
      "item": {
        "type": "paragraph",
        "id": "ed7d289cc7d808d0",
        "text": "End of handler function"
      },
      "after": "ef44266ef8110a38",
      "date": 1679571506111
    },
    {
      "id": "ed7d289cc7d808d0",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ff30b94a0bed5243",
        "ca292c3c33128cab"
      ],
      "date": 1679571513177
    },
    {
      "item": {
        "type": "factory",
        "id": "8859f8ab344d4f31"
      },
      "id": "8859f8ab344d4f31",
      "type": "add",
      "after": "ca292c3c33128cab",
      "date": 1679571552729
    },
    {
      "id": "8859f8ab344d4f31",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ff30b94a0bed5243",
        "ca292c3c33128cab"
      ],
      "date": 1679571557224
    },
    {
      "type": "edit",
      "id": "8859f8ab344d4f31",
      "item": {
        "type": "code",
        "id": "8859f8ab344d4f31",
        "text": "."
      },
      "date": 1679571564027
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n"
      },
      "date": 1679571572038
    },
    {
      "type": "edit",
      "id": "8859f8ab344d4f31",
      "item": {
        "type": "code",
        "id": "8859f8ab344d4f31",
        "text": "    show(page, journal)\n  }\n"
      },
      "date": 1679571575078
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n\n"
      },
      "date": 1679571610277
    },
    {
      "type": "edit",
      "id": "8859f8ab344d4f31",
      "item": {
        "type": "code",
        "id": "8859f8ab344d4f31",
        "text": "    show(page)\n  }\n"
      },
      "date": 1679571617419
    },
    {
      "id": "ca075d681c953999",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ca075d681c953999",
        "text": "The page we show in the Journal to Graph frame below is the page on the screen which might be a ghost, maybe retrieved from history."
      },
      "after": "ed7d289cc7d808d0",
      "attribution": {
        "page": "Journal to Graph"
      },
      "date": 1679571642803
    },
    {
      "id": "cff317c5386f7b33",
      "type": "add",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page, journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<h1>Journal to Graph</h1>\n<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "after": "ca075d681c953999",
      "attribution": {
        "page": "Journal to Graph"
      },
      "date": 1679571649676
    },
    {
      "id": "ff30b94a0bed5243",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "4986a1da64967ed1",
        "ca292c3c33128cab"
      ],
      "date": 1679571668205
    },
    {
      "id": "ca292c3c33128cab",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "ca292c3c33128cab",
        "4986a1da64967ed1"
      ],
      "date": 1679571702824
    },
    {
      "id": "ff30b94a0bed5243",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "ff30b94a0bed5243",
        "ca292c3c33128cab",
        "4986a1da64967ed1"
      ],
      "date": 1679571708336
    },
    {
      "id": "ddedbbab48a1c800",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "ddedbbab48a1c800",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/basicjs.html\nHEIGHT 75"
      },
      "after": "ff30b94a0bed5243",
      "attribution": {
        "page": "Static Import Snippet"
      },
      "date": 1679571730919
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n\n  const actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<h1>Journal to Graph</h1>\n<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679571765812
    },
    {
      "id": "4986a1da64967ed1",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "4986a1da64967ed1",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "ca292c3c33128cab"
      ],
      "date": 1679571784548
    },
    {
      "id": "4986a1da64967ed1",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "ca292c3c33128cab"
      ],
      "date": 1679571857216
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679571951572
    },
    {
      "type": "edit",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "⇒ [[Static Import Snippet]] ("
      },
      "date": 1679572004554
    },
    {
      "type": "edit",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "⇒ [[Static Import Snippet]] (basicjs.html)"
      },
      "date": 1679572012518
    },
    {
      "type": "edit",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "⇒ [[Static Import Snippet]] (basicjs.html):"
      },
      "date": 1679572016187
    },
    {
      "item": {
        "type": "factory",
        "id": "0130fe33b11c4037"
      },
      "id": "0130fe33b11c4037",
      "type": "add",
      "after": "ca292c3c33128cab",
      "date": 1679572051283
    },
    {
      "id": "0130fe33b11c4037",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "ca292c3c33128cab"
      ],
      "date": 1679572057663
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n"
      },
      "date": 1679572071330
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679572072298
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n\n"
      },
      "date": 1679572080063
    },
    {
      "item": {
        "type": "factory",
        "id": "22acf4f9975a39ca"
      },
      "id": "22acf4f9975a39ca",
      "type": "add",
      "after": "ca292c3c33128cab",
      "date": 1679572115578
    },
    {
      "id": "22acf4f9975a39ca",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "ca292c3c33128cab"
      ],
      "date": 1679572120810
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "\n\n// Define a function to add a new entry to the interrupt vector table\nfunction addEntry(ivtIndex, taskFunction) {\n  ivt[ivtIndex] = taskFunction;\n}\n\n// Define task functions\nfunction task1() {\n  console.log(\"Task 1 executed.\");\n}\n\nfunction task2() {\n  console.log(\"Task 2 executed.\");\n}\n\nfunction task3() {\n  console.log(\"Task 3 executed.\");\n}\n\n// Add entries to the interrupt vector table\naddEntry(0, task1);\naddEntry(1, task2);\naddEntry(2, task3);\n\n// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  }\n}\n\n// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679572134694
    },
    {
      "type": "edit",
      "id": "22acf4f9975a39ca",
      "item": {
        "type": "code",
        "id": "22acf4f9975a39ca",
        "text": "// Define an array to hold the interrupt vector table\nlet ivt = [];"
      },
      "date": 1679572135542
    },
    {
      "id": "22acf4f9975a39ca",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "ca292c3c33128cab"
      ],
      "date": 1679572160894
    },
    {
      "type": "edit",
      "id": "8859f8ab344d4f31",
      "item": {
        "type": "code",
        "id": "8859f8ab344d4f31",
        "text": "    show(page, ivt)\n  }\n"
      },
      "date": 1679572171505
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "// Define a function to add a new entry to the interrupt vector table\nfunction addEntry(ivtIndex, taskFunction) {\n  ivt[ivtIndex] = taskFunction;\n}\n\n// Define task functions\nfunction task1() {\n  console.log(\"Task 1 executed.\");\n}\n\nfunction task2() {\n  console.log(\"Task 2 executed.\");\n}\n\nfunction task3() {\n  console.log(\"Task 3 executed.\");\n}\n\n// Add entries to the interrupt vector table\naddEntry(0, task1);\naddEntry(1, task2);\naddEntry(2, task3);\n\n// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  }\n}\n\n// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679572178654
    },
    {
      "item": {
        "type": "factory",
        "id": "d7574718b64878e4"
      },
      "id": "d7574718b64878e4",
      "type": "add",
      "after": "ca292c3c33128cab",
      "date": 1679572215688
    },
    {
      "id": "d7574718b64878e4",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "d7574718b64878e4",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "ca292c3c33128cab"
      ],
      "date": 1679572218992
    },
    {
      "type": "remove",
      "id": "ca292c3c33128cab",
      "date": 1679572229358
    },
    {
      "id": "d7574718b64878e4",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "d7574718b64878e4",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572259944
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "\n\n// Add entries to the interrupt vector table\naddEntry(0, task1);\naddEntry(1, task2);\naddEntry(2, task3);\n\n// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  }\n}\n\n// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679572279527
    },
    {
      "type": "edit",
      "id": "d7574718b64878e4",
      "item": {
        "type": "code",
        "id": "d7574718b64878e4",
        "text": "// Define a function to add a new entry to the interrupt vector table\nfunction addEntry(ivtIndex, taskFunction) {\n  ivt[ivtIndex] = taskFunction;\n}\n\n// Define task functions\nfunction task1() {\n  console.log(\"Task 1 executed.\");\n}\n\nfunction task2() {\n  console.log(\"Task 2 executed.\");\n}\n\nfunction task3() {\n  console.log(\"Task 3 executed.\");\n}"
      },
      "date": 1679572282615
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "// Add entries to the interrupt vector table\naddEntry(0, task1);\naddEntry(1, task2);\naddEntry(2, task3);\n\n// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  }\n}\n\n// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679572288207
    },
    {
      "id": "d7574718b64878e4",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "d7574718b64878e4",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572364077
    },
    {
      "item": {
        "type": "factory",
        "id": "ffa8a37d180c60bb"
      },
      "id": "ffa8a37d180c60bb",
      "type": "add",
      "after": "ddedbbab48a1c800",
      "date": 1679572424232
    },
    {
      "id": "ffa8a37d180c60bb",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "d7574718b64878e4",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ffa8a37d180c60bb",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572428633
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "\n\n// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  }\n}\n\n// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679572433396
    },
    {
      "type": "edit",
      "id": "ffa8a37d180c60bb",
      "item": {
        "type": "code",
        "id": "ffa8a37d180c60bb",
        "text": "// Add entries to the interrupt vector table\naddEntry(0, task1);\naddEntry(1, task2);\naddEntry(2, task3);"
      },
      "date": 1679572434193
    },
    {
      "id": "ffa8a37d180c60bb",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572453067
    },
    {
      "id": "22acf4f9975a39ca",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572493952
    },
    {
      "id": "22acf4f9975a39ca",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572528726
    },
    {
      "id": "d7574718b64878e4",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "ffa8a37d180c60bb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "d7574718b64878e4",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572536361
    },
    {
      "item": {
        "type": "factory",
        "id": "3b414cfd84b3491d"
      },
      "id": "3b414cfd84b3491d",
      "type": "add",
      "after": "ddedbbab48a1c800",
      "date": 1679572561542
    },
    {
      "id": "3b414cfd84b3491d",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "ffa8a37d180c60bb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "d7574718b64878e4",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "4986a1da64967ed1",
        "3b414cfd84b3491d",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572564335
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "\n// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  }\n}\n"
      },
      "date": 1679572578143
    },
    {
      "type": "edit",
      "id": "3b414cfd84b3491d",
      "item": {
        "type": "code",
        "id": "3b414cfd84b3491d",
        "text": "// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679572580311
    },
    {
      "id": "4986a1da64967ed1",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "4986a1da64967ed1",
        "ffa8a37d180c60bb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "d7574718b64878e4",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "3b414cfd84b3491d",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572594497
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  }\n}\n"
      },
      "date": 1679572598125
    },
    {
      "id": "ffa8a37d180c60bb",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "3b414cfd84b3491d",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572623108
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page, ivt) {\n\n"
      },
      "date": 1679572651585
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "  let html = `<pre>${ivt}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679572659925
    },
    {
      "id": "3b414cfd84b3491d",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679572812573
    },
    {
      "type": "edit",
      "id": "8859f8ab344d4f31",
      "item": {
        "type": "code",
        "id": "8859f8ab344d4f31",
        "text": "    show(page)\n  }\n"
      },
      "date": 1679572912711
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page,) {\n\n"
      },
      "date": 1679572938549
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "  let html = `<pre>${page}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679572944540
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "  let html = `<pre>${page.journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679572960790
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n\n"
      },
      "date": 1679572998665
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679573033727
    },
    {
      "id": "3b414cfd84b3491d",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "22acf4f9975a39ca",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "3b414cfd84b3491d"
      ],
      "date": 1679573050038
    },
    {
      "id": "22acf4f9975a39ca",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "3b414cfd84b3491d"
      ],
      "date": 1679573249909
    },
    {
      "id": "3b414cfd84b3491d",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679573264018
    },
    {
      "item": {
        "type": "factory",
        "id": "63fda071cda62270"
      },
      "id": "63fda071cda62270",
      "type": "add",
      "after": "ddedbbab48a1c800",
      "date": 1679573372631
    },
    {
      "id": "63fda071cda62270",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "63fda071cda62270",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679573377056
    },
    {
      "id": "63fda071cda62270",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "63fda071cda62270",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679573388767
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "\n  output.innerHTML = html\n}"
      },
      "date": 1679573389520
    },
    {
      "type": "remove",
      "id": "63fda071cda62270",
      "date": 1679573389868
    },
    {
      "item": {
        "type": "factory",
        "id": "2fa31988734822ae"
      },
      "id": "2fa31988734822ae",
      "type": "add",
      "after": "ddedbbab48a1c800",
      "date": 1679573393419
    },
    {
      "id": "2fa31988734822ae",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "2fa31988734822ae",
        "0130fe33b11c4037",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800"
      ],
      "date": 1679573395492
    },
    {
      "type": "edit",
      "id": "2fa31988734822ae",
      "item": {
        "type": "code",
        "id": "2fa31988734822ae",
        "text": "  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`"
      },
      "date": 1679573397602
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "  output.innerHTML = html\n}"
      },
      "date": 1679573413125
    },
    {
      "type": "edit",
      "id": "ca075d681c953999",
      "item": {
        "type": "paragraph",
        "id": "ca075d681c953999",
        "text": "The page we show in the frame below is the page on the screen which might be a ghost, maybe retrieved from history."
      },
      "date": 1679573555310
    },
    {
      "id": "ff30b94a0bed5243",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "2fa31988734822ae",
        "0130fe33b11c4037",
        "ddedbbab48a1c800"
      ],
      "date": 1679573566356
    },
    {
      "id": "ddedbbab48a1c800",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ca075d681c953999",
        "ddedbbab48a1c800",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "2fa31988734822ae",
        "0130fe33b11c4037"
      ],
      "date": 1679573575626
    },
    {
      "item": {
        "type": "factory",
        "id": "416a4aa43c69b09a"
      },
      "id": "416a4aa43c69b09a",
      "type": "add",
      "after": "0130fe33b11c4037",
      "date": 1679574957658
    },
    {
      "type": "edit",
      "id": "416a4aa43c69b09a",
      "item": {
        "type": "pagefold",
        "id": "416a4aa43c69b09a",
        "text": "~"
      },
      "date": 1679574963513
    },
    {
      "item": {
        "type": "factory",
        "id": "a0eaff4843eecd6b"
      },
      "id": "a0eaff4843eecd6b",
      "type": "add",
      "after": "416a4aa43c69b09a",
      "date": 1679574966033
    },
    {
      "type": "edit",
      "id": "a0eaff4843eecd6b",
      "item": {
        "type": "paragraph",
        "id": "a0eaff4843eecd6b",
        "text": "Pair Programming Conversational Agents"
      },
      "date": 1679574968087
    },
    {
      "type": "edit",
      "id": "a0eaff4843eecd6b",
      "item": {
        "type": "paragraph",
        "id": "a0eaff4843eecd6b",
        "text": "[[Pair Programming Conversational Agents]]"
      },
      "date": 1679574976737
    },
    {
      "type": "add",
      "id": "ecdf357f2aa7857c",
      "item": {
        "type": "paragraph",
        "id": "ecdf357f2aa7857c",
        "text": "Snippet Template"
      },
      "after": "a0eaff4843eecd6b",
      "date": 1679575070681
    },
    {
      "type": "edit",
      "id": "a0eaff4843eecd6b",
      "item": {
        "type": "paragraph",
        "id": "a0eaff4843eecd6b",
        "text": "⇒ [[Pair Programming Conversational Agents]]"
      },
      "date": 1679575335507
    },
    {
      "type": "remove",
      "id": "ecdf357f2aa7857c",
      "date": 1679575347366
    },
    {
      "type": "edit",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "⇒ [[Static Import Snippet]] (basicjs.html) (or ⇒ [[Snippet Template]]):"
      },
      "date": 1679575380271
    },
    {
      "type": "edit",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "⇒ [[Static Import Snippet]] (basicjs.html): (or ⇒ [[Snippet Template]]):"
      },
      "date": 1679575393010
    },
    {
      "type": "edit",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "⇒ [[Static Import Snippet]] (basicjs.html): (or ⇒ [[Snippet Template]])"
      },
      "date": 1679575398540
    },
    {
      "type": "edit",
      "id": "ff30b94a0bed5243",
      "item": {
        "type": "paragraph",
        "id": "ff30b94a0bed5243",
        "text": "⇒ [[Static Import Snippet]] (basicjs.html):"
      },
      "date": 1679575413095
    },
    {
      "type": "add",
      "id": "5c17db6be69714af",
      "item": {
        "type": "paragraph",
        "id": "5c17db6be69714af",
        "text": "Codex JavaScript Sandbox"
      },
      "after": "a0eaff4843eecd6b",
      "date": 1679576502627
    },
    {
      "type": "add",
      "id": "fd20654c6e47e315",
      "item": {
        "type": "paragraph",
        "id": "fd20654c6e47e315",
        "text": "natural language understanding (NLU) model"
      },
      "after": "a0eaff4843eecd6b",
      "date": 1679576628508
    },
    {
      "id": "0b42bc5f7084f306",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0b42bc5f7084f306",
        "text": ".innerHTML body generation use case"
      },
      "after": "416a4aa43c69b09a",
      "attribution": {
        "page": "@thi.ng/hiccup"
      },
      "date": 1679578905785
    },
    {
      "id": "416a4aa43c69b09a",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ca075d681c953999",
        "ddedbbab48a1c800",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "2fa31988734822ae",
        "0130fe33b11c4037",
        "0b42bc5f7084f306",
        "416a4aa43c69b09a",
        "a0eaff4843eecd6b",
        "fd20654c6e47e315",
        "5c17db6be69714af"
      ],
      "date": 1679578907419
    },
    {
      "type": "edit",
      "id": "0b42bc5f7084f306",
      "item": {
        "type": "paragraph",
        "id": "0b42bc5f7084f306",
        "text": "⇒ .innerHTML body generation use case"
      },
      "date": 1679578918341
    },
    {
      "type": "edit",
      "id": "0b42bc5f7084f306",
      "item": {
        "type": "paragraph",
        "id": "0b42bc5f7084f306",
        "text": "⇒ .innerHTML body generation use case ⇒ [[@thi.ng/hiccup]] ⇒ [[@thi.ng/rdom]]"
      },
      "date": 1679578941545
    },
    {
      "item": {
        "type": "factory",
        "id": "e257b8d196435ec8"
      },
      "id": "e257b8d196435ec8",
      "type": "add",
      "after": "5c17db6be69714af",
      "date": 1679579259618
    },
    {
      "type": "edit",
      "id": "e257b8d196435ec8",
      "item": {
        "type": "paragraph",
        "id": "e257b8d196435ec8",
        "text": "\nLESCISIN, Michael and MAHMOUD, Qusay H., 2018. Dataset for Web Traffic Security Analysis. In: IECON 2018 - 44th Annual Conference of the IEEE Industrial Electronics Society. October 2018. p. 2700–2705. DOI 10.1109/IECON.2018.8591589. Patterns of network activity can reveal an abundance of information on the behaviour of an application. Research has shown that despite the widespread use of network encryption protocols such as TLS or SSH, network application confidentiality can often times be violated through network traffic pattern analysis. Achieving sound mitigation of these information leaks while maintaining network usage efficiency is still an ongoing research topic. The goal of the research conducted in this paper is to provide network security researchers with a dataset of captured network traffic from a popular SSL/TLS protected website, which we have chosen to be reddit.com, for the purpose of evaluating algorithms for attacking and defending against network based side-channel information leaks. Our dataset is represented as a graph describing a crawl through the website. Every path from the center of the graph to any other connected point represents a sequence of user interactions with the website. By following a directed path through the graph, researchers can obtain probable sequences of user interactions with a website and the associated patterns of network traffic which these interactions generate.\n"
      },
      "date": 1679579262243
    },
    {
      "id": "e257b8d196435ec8",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ca075d681c953999",
        "ddedbbab48a1c800",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "2fa31988734822ae",
        "0130fe33b11c4037",
        "0b42bc5f7084f306",
        "e257b8d196435ec8",
        "416a4aa43c69b09a",
        "a0eaff4843eecd6b",
        "fd20654c6e47e315",
        "5c17db6be69714af"
      ],
      "date": 1679579269095
    },
    {
      "type": "add",
      "id": "8612afa0f0984327",
      "item": {
        "type": "paragraph",
        "id": "8612afa0f0984327",
        "text": "Each node on the graph is uniquely identified by the hash of the Document Object Model (DOM) which it represents. The current state of the DOM (including any modifications done by client-side JavaScript) can be obtained via JavaScript read of document.body.innerHTML. This variable is saved to a file and its hash is used to label its corresponding node on the user-interaction graph. Therefore, for any node on the user-interaction graph, by setting document.body.innerHTML to the value stored in the file with the same hash (label) as this given node, we can reset the DOM state of the browser to that which it was during the dataset generation phase."
      },
      "after": "0b42bc5f7084f306",
      "date": 1679579289051
    },
    {
      "type": "edit",
      "id": "0b42bc5f7084f306",
      "item": {
        "type": "paragraph",
        "id": "0b42bc5f7084f306",
        "text": "⇒ .innerHTML body generation use case ⇒ [[@thi.ng/hiccup]] ⇒ [[@thi.ng/rdom]] User ⇒ [[Interaction Graph]]"
      },
      "date": 1679579782054
    },
    {
      "type": "edit",
      "id": "0b42bc5f7084f306",
      "item": {
        "type": "paragraph",
        "id": "0b42bc5f7084f306",
        "text": "⇒ .innerHTML body generation use case ⇒ [[@thi.ng/hiccup]] ⇒ [[@thi.ng/rdom]] ⇒ [[User Interaction Graph]]"
      },
      "date": 1679579792171
    },
    {
      "id": "8612afa0f0984327",
      "type": "remove",
      "removedTo": {
        "page": "User Interaction Graph"
      },
      "date": 1679579798822
    },
    {
      "id": "e257b8d196435ec8",
      "type": "remove",
      "removedTo": {
        "page": "User Interaction Graph"
      },
      "date": 1679579805315
    },
    {
      "type": "add",
      "id": "2965aa870bcba4f2",
      "item": {
        "type": "paragraph",
        "id": "2965aa870bcba4f2",
        "text": "Changing the innerHTML property of an HTML element is a common way to  display data in HTML."
      },
      "after": "0b42bc5f7084f306",
      "date": 1679580284027
    },
    {
      "type": "edit",
      "id": "2965aa870bcba4f2",
      "item": {
        "type": "paragraph",
        "id": "2965aa870bcba4f2",
        "text": "Changing the innerHTML property of an HTML element is a common way to  display data in HTML. [https://www.studocu.com/row/document/jamaa%D8%A9-alesra%D8%A1-jordan/software-engineering/java-script-a-little-summary-for-html-and-some-examples-for-practicing/27918404 page]"
      },
      "date": 1679580311667
    },
    {
      "type": "add",
      "id": "85806559bdaa7335",
      "item": {
        "type": "paragraph",
        "id": "85806559bdaa7335",
        "text": "How can I get the click event inside an innerHTML?"
      },
      "after": "2965aa870bcba4f2",
      "date": 1679580397023
    },
    {
      "type": "edit",
      "id": "85806559bdaa7335",
      "item": {
        "type": "paragraph",
        "id": "85806559bdaa7335",
        "text": "How can I get the click event inside an innerHTML? [https://stackoverflow.com/questions/60234468/how-can-i-get-the-click-event-inside-an-innerhtml stackoverflow]"
      },
      "date": 1679580415498
    },
    {
      "type": "add",
      "id": "02cf27b653317942",
      "item": {
        "type": "paragraph",
        "id": "02cf27b653317942",
        "text": "JavaScript Interactivity"
      },
      "after": "85806559bdaa7335",
      "date": 1679580450721
    },
    {
      "type": "edit",
      "id": "02cf27b653317942",
      "item": {
        "type": "paragraph",
        "id": "02cf27b653317942",
        "text": "JavaScript Interactivity [https://geobgu.xyz/web-mapping-2020/javascript-interactivity.html page]"
      },
      "date": 1679580465827
    },
    {
      "item": {
        "type": "factory",
        "id": "86e3a68f08790498"
      },
      "id": "86e3a68f08790498",
      "type": "add",
      "after": "5c17db6be69714af",
      "date": 1679583328174
    },
    {
      "type": "edit",
      "id": "86e3a68f08790498",
      "item": {
        "type": "pagefold",
        "id": "86e3a68f08790498",
        "text": "~"
      },
      "date": 1679583333880
    },
    {
      "item": {
        "type": "factory",
        "id": "7070d212daf8d730"
      },
      "id": "7070d212daf8d730",
      "type": "add",
      "after": "86e3a68f08790498",
      "date": 1679583335421
    },
    {
      "type": "edit",
      "id": "7070d212daf8d730",
      "item": {
        "type": "paragraph",
        "id": "7070d212daf8d730",
        "text": "Ward via [matrix] once suggested at a software engineering workshop that every line of code should be annotated with what window was read before the line was written. This might be the time that matters."
      },
      "date": 1679583346272
    },
    {
      "type": "edit",
      "id": "7070d212daf8d730",
      "item": {
        "type": "paragraph",
        "id": "7070d212daf8d730",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1679155305183661gEjhz:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] once suggested at a software engineering workshop that every line of code should be annotated with what window was read before the line was written. This might be the time that matters."
      },
      "date": 1679583356779
    },
    {
      "type": "add",
      "id": "f0d0fcd88695533b",
      "item": {
        "type": "paragraph",
        "id": "f0d0fcd88695533b",
        "text": "My suggestion was taken as some far-fetched thought experiment by a community that was not yet coding in windows. I was already fascinated by my year or two with Smalltalk-80 where I knew that Strings annotated character by character with objects became Texts, run-length encoded for efficiency. And, a window was just an object. This story would be better if I had actually coded what I described. I think I was succumbed with group think and just thought about how this might be useful hoping for something more like commit comments."
      },
      "after": "7070d212daf8d730",
      "date": 1679583370876
    },
    {
      "type": "edit",
      "id": "7070d212daf8d730",
      "item": {
        "type": "paragraph",
        "id": "7070d212daf8d730",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1679155305183661gEjhz:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] once suggested at a software engineering workshop that every line of code should be annotated with what window was read before the line was written. This might be the [[Time]] that matters."
      },
      "date": 1679583397457
    },
    {
      "item": {
        "type": "factory",
        "id": "72005275b4feee4c"
      },
      "id": "72005275b4feee4c",
      "type": "add",
      "after": "f0d0fcd88695533b",
      "date": 1679583424074
    },
    {
      "type": "edit",
      "id": "72005275b4feee4c",
      "item": {
        "type": "paragraph",
        "id": "72005275b4feee4c",
        "text": "⇒ [[User Interaction Graph]]"
      },
      "date": 1679583425950
    },
    {
      "id": "9d8580cfead02baf",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9d8580cfead02baf",
        "text": "Each node on the graph is uniquely identified by the hash of the Document Object Model (DOM) which it represents. The current state of the DOM (including any modifications done by client-side JavaScript) can be obtained via JavaScript read of document.body.innerHTML. This variable is saved to a file and its hash is used to label its corresponding node on the user-interaction graph. Therefore, for any node on the user-interaction graph, by setting document.body.innerHTML to the value stored in the file with the same hash (label) as this given node, we can reset the DOM state of the browser to that which it was during the dataset generation phase."
      },
      "after": "72005275b4feee4c",
      "attribution": {
        "page": "User Interaction Graph"
      },
      "date": 1679583432623
    },
    {
      "type": "edit",
      "id": "9d8580cfead02baf",
      "item": {
        "type": "paragraph",
        "id": "9d8580cfead02baf",
        "text": "> Each node on the graph is uniquely identified by the hash of the Document Object Model (DOM) which it represents. The current state of the DOM (including any modifications done by client-side JavaScript) can be obtained via JavaScript read of document.body.innerHTML. This variable is saved to a file and its hash is used to label its corresponding node on the user-interaction graph. Therefore, for any node on the user-interaction graph, by setting document.body.innerHTML to the value stored in the file with the same hash (label) as this given node, we can reset the DOM state of the browser to that which it was during the dataset generation phase."
      },
      "date": 1679583440287
    },
    {
      "type": "edit",
      "id": "9d8580cfead02baf",
      "item": {
        "type": "markdown",
        "id": "9d8580cfead02baf",
        "text": "> Each node on the graph is uniquely identified by the hash of the Document Object Model (DOM) which it represents. The current state of the DOM (including any modifications done by client-side JavaScript) can be obtained via JavaScript read of document.body.innerHTML. This variable is saved to a file and its hash is used to label its corresponding node on the user-interaction graph. Therefore, for any node on the user-interaction graph, by setting document.body.innerHTML to the value stored in the file with the same hash (label) as this given node, we can reset the DOM state of the browser to that which it was during the dataset generation phase."
      },
      "date": 1679583442419
    },
    {
      "type": "fork",
      "date": 1679584648557
    },
    {
      "type": "edit",
      "id": "ddedbbab48a1c800",
      "item": {
        "type": "frame",
        "id": "ddedbbab48a1c800",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 75"
      },
      "date": 1679584735589
    },
    {
      "id": "10893239e255c334",
      "type": "add",
      "item": {
        "type": "code",
        "id": "10893239e255c334",
        "text": "import { $compile } from \"https://cdn.skypack.dev/@thi.ng/rdom\";"
      },
      "after": "d1139c415762e45d",
      "attribution": {
        "page": "@thi.ng/rdom"
      },
      "date": 1679584771840
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "$compile(\n  [\"div\", {}, [\"h1\", {}, \"Hello Federated Wiki\"]]\n).mount(document.getElementById(\"output\");\n\n\n}"
      },
      "date": 1679585013892
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "$compile(\n  [\"pre\", {}, ]]\n).mount(document.getElementById(\"output\");\n\n}"
      },
      "date": 1679585065334
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "$compile(\n  [\"pre\", {}, ${actions.join(\"\\n\")}]]\n).mount(document.getElementById(\"output\");\n\n}"
      },
      "date": 1679585077138
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "$compile(\n  [\"pre\", {}, ${actions.join(\"\\n\")}]\n).mount(document.getElementById(\"output\");\n\n}"
      },
      "date": 1679585096253
    },
    {
      "type": "edit",
      "id": "2fa31988734822ae",
      "item": {
        "type": "code",
        "id": "2fa31988734822ae",
        "text": "  let actions = page.journal.map(item => [ item.type, item.id ])\n"
      },
      "date": 1679585117931
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "$compile(\n  [\"pre\", {}, ${actions.join(\"\\n\")}]\n).mount(document.getElementById(\"output\"));\n\n}"
      },
      "date": 1679585147066
    },
    {
      "type": "remove",
      "id": "2fa31988734822ae",
      "date": 1679585170684
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "$compile(\n  [\"pre\", {}, \"Hello\"]\n).mount(document.getElementById(\"output\"));\n\n}"
      },
      "date": 1679585184079
    },
    {
      "type": "fork",
      "date": 1679585445301
    },
    {
      "type": "edit",
      "id": "d7574718b64878e4",
      "item": {
        "type": "code",
        "id": "d7574718b64878e4",
        "text": "// Define a function to add a new entry to the interrupt vector table\nfunction addEntry(ivtIndex, taskFunction) {\n  ivt[ivtIndex] = taskFunction;\n}\n\n// Define task functions\nfunction task1() {\n  console.log(\"Task 1 executed.\");\n  $compile(\n  [\"pre\", {}, \"Task 1 executed.\"]\n).mount(document.getElementById(\"output\"));\n}\n\nfunction task2() {\n  console.log(\"Task 2 executed.\");\n}\n\nfunction task3() {\n  console.log(\"Task 3 executed.\");\n}"
      },
      "date": 1679585507251
    },
    {
      "type": "edit",
      "id": "d7574718b64878e4",
      "item": {
        "type": "code",
        "id": "d7574718b64878e4",
        "text": "// Define a function to add a new entry to the interrupt vector table\nfunction addEntry(ivtIndex, taskFunction) {\n  ivt[ivtIndex] = taskFunction;\n}\n\n// Define task functions\nfunction task1() {\n  console.log(\"Task 1 executed.\");\n  $compile(\n  [\"pre\", {}, \"Task 1 executed.\"]\n).mount(document.getElementById(\"output\"));\n}\n\nfunction task2() {\n  console.log(\"Task 2 executed.\");\n  $compile(\n  [\"pre\", {}, \"Task 2 executed.\"]\n).mount(document.getElementById(\"output\"));\n}\n\nfunction task3() {\n  console.log(\"Task 3 executed.\");\n  $compile(\n  [\"pre\", {}, \"Task 3 executed.\"]\n).mount(document.getElementById(\"output\"));\n}"
      },
      "date": 1679585562664
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  $compile(\n  [\"pre\", {}, \"No task assigned to interrupt\"]\n).mount(document.getElementById(\"output\"));\n  }\n}\n"
      },
      "date": 1679585595691
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  $compile(\n  [\"pre\", {}, \"No task assigned to interrupt\", interruptNumber]\n).mount(document.getElementById(\"output\"));\n  }\n}\n"
      },
      "date": 1679585656473
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n  $compile(\n  [\"pre\", {}, \"No task assigned to interrupt \", interruptNumber, \".\"]\n).mount(document.getElementById(\"output\"));\n  }\n}\n"
      },
      "date": 1679585694124
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "$compile(\n  [\"pre\", {}, \"show page DONE.\"]\n).mount(document.getElementById(\"output\"));\n\n}"
      },
      "date": 1679585733190
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "\n}"
      },
      "date": 1679585766644
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "}"
      },
      "date": 1679585769016
    },
    {
      "type": "edit",
      "id": "ddedbbab48a1c800",
      "item": {
        "type": "frame",
        "id": "ddedbbab48a1c800",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 150"
      },
      "date": 1679585782736
    },
    {
      "type": "edit",
      "id": "d7574718b64878e4",
      "item": {
        "type": "code",
        "id": "d7574718b64878e4",
        "text": "// Define a function to add a new entry to the interrupt vector table\nfunction addEntry(ivtIndex, taskFunction) {\n  ivt[ivtIndex] = taskFunction;\n}\n\n// Define task functions\nfunction task1() {\n  console.log(\"Task 1 executed.\");\n  $compile(\n    [\"pre\", {}, \"Task 1 executed.\"]\n  ).mount(document.getElementById(\"output\"));\n}\n\nfunction task2() {\n  console.log(\"Task 2 executed.\");\n  $compile(\n    [\"pre\", {}, \"Task 2 executed.\"]\n  ).mount(document.getElementById(\"output\"));\n}\n\nfunction task3() {\n  console.log(\"Task 3 executed.\");\n  $compile(\n    [\"pre\", {}, \"Task 3 executed.\"]\n  ).mount(document.getElementById(\"output\"));\n}"
      },
      "date": 1679585848364
    },
    {
      "type": "edit",
      "id": "4986a1da64967ed1",
      "item": {
        "type": "code",
        "id": "4986a1da64967ed1",
        "text": "// Define a function to perform table lookup and dispatch\nfunction handleInterrupt(interruptNumber) {\n  let taskFunction = ivt[interruptNumber];\n  if (taskFunction) {\n    taskFunction();\n  } else {\n    console.log(`No task assigned to interrupt ${interruptNumber}.`);\n    $compile(\n      [\"pre\", {}, \"No task assigned to interrupt \", interruptNumber, \".\"]\n    ).mount(document.getElementById(\"output\"));\n  }\n}\n"
      },
      "date": 1679585878372
    },
    {
      "type": "edit",
      "id": "3b414cfd84b3491d",
      "item": {
        "type": "code",
        "id": "3b414cfd84b3491d",
        "text": "// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(1); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679585910948
    },
    {
      "type": "edit",
      "id": "3b414cfd84b3491d",
      "item": {
        "type": "code",
        "id": "3b414cfd84b3491d",
        "text": "// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679585925393
    },
    {
      "type": "edit",
      "id": "3b414cfd84b3491d",
      "item": {
        "type": "code",
        "id": "3b414cfd84b3491d",
        "text": "// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(4); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679586039338
    },
    {
      "type": "edit",
      "id": "3b414cfd84b3491d",
      "item": {
        "type": "code",
        "id": "3b414cfd84b3491d",
        "text": "// Call the handleInterrupt function with different interrupt numbers\nhandleInterrupt(0); // Output: Task 1 executed.\nhandleInterrupt(1); // Output: Task 2 executed.\nhandleInterrupt(2); // Output: Task 3 executed.\nhandleInterrupt(3); // Output: No task assigned to interrupt 3.\n"
      },
      "date": 1679586053285
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "} // – end of function show"
      },
      "date": 1679586153553
    },
    {
      "type": "edit",
      "id": "4f012f477cadcea9",
      "item": {
        "type": "code",
        "id": "4f012f477cadcea9",
        "text": "} // – end of function handler"
      },
      "date": 1679586181533
    },
    {
      "type": "edit",
      "id": "0130fe33b11c4037",
      "item": {
        "type": "code",
        "id": "0130fe33b11c4037",
        "text": "} // end of function show"
      },
      "date": 1679586256375
    },
    {
      "type": "edit",
      "id": "4f012f477cadcea9",
      "item": {
        "type": "code",
        "id": "4f012f477cadcea9",
        "text": "} // end of function handler"
      },
      "date": 1679586261407
    },
    {
      "item": {
        "type": "factory",
        "id": "c6da559508d7fa89"
      },
      "id": "c6da559508d7fa89",
      "type": "add",
      "after": "9d8580cfead02baf",
      "date": 1679586289648
    },
    {
      "id": "c6da559508d7fa89",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "c6da559508d7fa89",
        "10893239e255c334",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ca075d681c953999",
        "ddedbbab48a1c800",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "0b42bc5f7084f306",
        "2965aa870bcba4f2",
        "85806559bdaa7335",
        "02cf27b653317942",
        "416a4aa43c69b09a",
        "a0eaff4843eecd6b",
        "fd20654c6e47e315",
        "5c17db6be69714af",
        "86e3a68f08790498",
        "7070d212daf8d730",
        "f0d0fcd88695533b",
        "72005275b4feee4c",
        "9d8580cfead02baf"
      ],
      "date": 1679586299758
    },
    {
      "type": "edit",
      "id": "c6da559508d7fa89",
      "item": {
        "type": "pagefold",
        "id": "c6da559508d7fa89",
        "text": "Table Lookup"
      },
      "date": 1679586314757
    },
    {
      "type": "add",
      "id": "6379a029dd6637ab",
      "item": {
        "type": "paragraph",
        "id": "6379a029dd6637ab",
        "text": "👆️"
      },
      "after": "ca075d681c953999",
      "date": 1679586458732
    },
    {
      "id": "6379a029dd6637ab",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "c6da559508d7fa89",
        "10893239e255c334",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ca075d681c953999",
        "ddedbbab48a1c800",
        "6379a029dd6637ab",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "0b42bc5f7084f306",
        "2965aa870bcba4f2",
        "85806559bdaa7335",
        "02cf27b653317942",
        "416a4aa43c69b09a",
        "a0eaff4843eecd6b",
        "fd20654c6e47e315",
        "5c17db6be69714af",
        "86e3a68f08790498",
        "7070d212daf8d730",
        "f0d0fcd88695533b",
        "72005275b4feee4c",
        "9d8580cfead02baf"
      ],
      "date": 1679586462033
    },
    {
      "type": "add",
      "id": "5195bfa67c3156d2",
      "item": {
        "type": "paragraph",
        "id": "5195bfa67c3156d2",
        "text": "Output:"
      },
      "after": "ca075d681c953999",
      "date": 1679586481051
    },
    {
      "type": "edit",
      "id": "ca075d681c953999",
      "item": {
        "type": "paragraph",
        "id": "ca075d681c953999",
        "text": "The page we show in the Output frame below is the page on the screen which might be a ghost, maybe retrieved from history."
      },
      "date": 1679586497347
    },
    {
      "type": "edit",
      "id": "c6da559508d7fa89",
      "item": {
        "type": "pagefold",
        "id": "c6da559508d7fa89",
        "text": "Table Lookup and Dispatch"
      },
      "date": 1679586750648
    },
    {
      "type": "remove",
      "id": "ca075d681c953999",
      "date": 1679586801309
    },
    {
      "id": "5195bfa67c3156d2",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "c6da559508d7fa89",
        "10893239e255c334",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "5195bfa67c3156d2",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "ddedbbab48a1c800",
        "6379a029dd6637ab",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "0b42bc5f7084f306",
        "2965aa870bcba4f2",
        "85806559bdaa7335",
        "02cf27b653317942",
        "416a4aa43c69b09a",
        "a0eaff4843eecd6b",
        "fd20654c6e47e315",
        "5c17db6be69714af",
        "86e3a68f08790498",
        "7070d212daf8d730",
        "f0d0fcd88695533b",
        "72005275b4feee4c",
        "9d8580cfead02baf"
      ],
      "date": 1679586808091
    },
    {
      "id": "ddedbbab48a1c800",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "c6da559508d7fa89",
        "10893239e255c334",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "5195bfa67c3156d2",
        "ddedbbab48a1c800",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "ed7d289cc7d808d0",
        "ff30b94a0bed5243",
        "6379a029dd6637ab",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "0b42bc5f7084f306",
        "2965aa870bcba4f2",
        "85806559bdaa7335",
        "02cf27b653317942",
        "416a4aa43c69b09a",
        "a0eaff4843eecd6b",
        "fd20654c6e47e315",
        "5c17db6be69714af",
        "86e3a68f08790498",
        "7070d212daf8d730",
        "f0d0fcd88695533b",
        "72005275b4feee4c",
        "9d8580cfead02baf"
      ],
      "date": 1679586820339
    },
    {
      "type": "remove",
      "id": "ed7d289cc7d808d0",
      "date": 1679586839172
    },
    {
      "id": "ff30b94a0bed5243",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "c6da559508d7fa89",
        "10893239e255c334",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "4986a1da64967ed1",
        "5195bfa67c3156d2",
        "ddedbbab48a1c800",
        "ff30b94a0bed5243",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "6379a029dd6637ab",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "0b42bc5f7084f306",
        "2965aa870bcba4f2",
        "85806559bdaa7335",
        "02cf27b653317942",
        "416a4aa43c69b09a",
        "a0eaff4843eecd6b",
        "fd20654c6e47e315",
        "5c17db6be69714af",
        "86e3a68f08790498",
        "7070d212daf8d730",
        "f0d0fcd88695533b",
        "72005275b4feee4c",
        "9d8580cfead02baf"
      ],
      "date": 1679586847994
    },
    {
      "type": "remove",
      "id": "ff30b94a0bed5243",
      "date": 1679586857056
    },
    {
      "type": "edit",
      "id": "5195bfa67c3156d2",
      "item": {
        "type": "paragraph",
        "id": "5195bfa67c3156d2",
        "text": "Output: [⇒ [[Static Import Snippet]] (basicjs.html)]"
      },
      "date": 1679586866343
    },
    {
      "type": "edit",
      "id": "5195bfa67c3156d2",
      "item": {
        "type": "paragraph",
        "id": "5195bfa67c3156d2",
        "text": "Output: [⇒ [[Static Import Snippet]], basicjs.html]"
      },
      "date": 1679586882945
    },
    {
      "type": "edit",
      "id": "5195bfa67c3156d2",
      "item": {
        "type": "paragraph",
        "id": "5195bfa67c3156d2",
        "text": "Output: [⇒ [[Static Import Snippet]], importjs.html]"
      },
      "date": 1679586893569
    },
    {
      "type": "remove",
      "id": "6379a029dd6637ab",
      "date": 1679586952065
    },
    {
      "type": "edit",
      "id": "5195bfa67c3156d2",
      "item": {
        "type": "paragraph",
        "id": "5195bfa67c3156d2",
        "text": "Output frame: [⇒ [[Static Import Snippet]], importjs.html]"
      },
      "date": 1679587118879
    },
    {
      "type": "edit",
      "id": "ef44266ef8110a38",
      "item": {
        "type": "paragraph",
        "id": "ef44266ef8110a38",
        "text": "⇒ [[Task Location]] ⇒ [[Table Lookup]] ⇒ [[Interrupt Vector Table]] ⇒ [[Dispatch Table]] ⇒ [[Table Lookup and Dispatch]]"
      },
      "date": 1679587416764
    },
    {
      "type": "edit",
      "id": "ef44266ef8110a38",
      "item": {
        "type": "paragraph",
        "id": "ef44266ef8110a38",
        "text": "⇒ [[Task Location]] ⇒ [[Model Free Method Zoo]] ⇒ [[Table Lookup]] ⇒ [[Interrupt Vector Table]] ⇒ [[Dispatch Table]] ⇒ [[Table Lookup and Dispatch]]"
      },
      "date": 1679601658808
    },
    {
      "type": "edit",
      "id": "ef44266ef8110a38",
      "item": {
        "type": "paragraph",
        "id": "ef44266ef8110a38",
        "text": "⇒ [[Task Location]] ⇒ [[Model Free Method Zoo]] ⇒ [[Understanding Machines]] ⇒ [[Table Lookup]] ⇒ [[Interrupt Vector Table]] ⇒ [[Dispatch Table]] ⇒ [[Table Lookup and Dispatch]]"
      },
      "date": 1679601691589
    },
    {
      "id": "10893239e255c334",
      "type": "move",
      "order": [
        "05aee0b3df7982e5",
        "0ad7010b7e23e71a",
        "d1139c415762e45d",
        "c6da559508d7fa89",
        "ef44266ef8110a38",
        "22acf4f9975a39ca",
        "10893239e255c334",
        "4986a1da64967ed1",
        "5195bfa67c3156d2",
        "ddedbbab48a1c800",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d7574718b64878e4",
        "ffa8a37d180c60bb",
        "8859f8ab344d4f31",
        "4f012f477cadcea9",
        "cff317c5386f7b33",
        "3b414cfd84b3491d",
        "0130fe33b11c4037",
        "0b42bc5f7084f306",
        "2965aa870bcba4f2",
        "85806559bdaa7335",
        "02cf27b653317942",
        "416a4aa43c69b09a",
        "a0eaff4843eecd6b",
        "fd20654c6e47e315",
        "5c17db6be69714af",
        "86e3a68f08790498",
        "7070d212daf8d730",
        "f0d0fcd88695533b",
        "72005275b4feee4c",
        "9d8580cfead02baf"
      ],
      "date": 1679601727979
    }
  ]
}