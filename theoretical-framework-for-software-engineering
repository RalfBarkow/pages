{
  "title": "Theoretical Framework for Software Engineering",
  "story": [
    {
      "type": "paragraph",
      "id": "06c963223b1ae96a",
      "text": "The OOP paradigm is a close simulation of the systems theoretical model of communication between distinct (identity) [[Self-Referential Machines]] (i.e. objects), that can be categorized (classification, inheritance), have certain sensors (i.e. inputs), certain behaviors (i.e. outputs) and, by virtue of their autonomy, can react differently to identical inputs (polymorphism)."
    },
    {
      "type": "paragraph",
      "id": "37f11ec4dc0cb1a9",
      "text": "Further, the OOP framework represents a human conception about the human conception of the world, and in that sense, it is the outcome of a recursive analysis that exemplifies first and second-order cybernetics and systems theory (Bateson G., 2002; Checkland P., 1999; Foerster von H., 1984; 2002; 2003; Heidegger M., 2006; Heylighen F., 2001; Maturana H.R., 2005)."
    },
    {
      "type": "paragraph",
      "id": "f24fa855bde8d527",
      "text": "In fact, the only thing that OOP lacks compared to the human conception of reality is [[Embodiment]]; but here too, if one considers software as residing in hardware (a legitimate conception in our opinion), the embodiment of software becomes a self-evident fact. It should be therefore of no surprise that we are proposing [[Systems Theory]] as a theoretical framework for software engineering in all of its aspects."
    },
    {
      "type": "pagefold",
      "id": "598d68113c15ddc0",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "bcae259aff09e9f6",
      "text": "MAVROFIDES, Thomas, KAMEAS, Achilles and DIMARAKI, Evangelia, [no date]. A Theoretical Framework for Software Engineering: Rediscovering Cybernetics and Systems Theory."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Theoretical Framework for Software Engineering",
        "story": []
      },
      "date": 1694074214004
    },
    {
      "id": "06c963223b1ae96a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "06c963223b1ae96a",
        "text": "As we can now see, the OOP paradigm is a close simulation of the systems theoretical model of communication between distinct (identity) [[Self-Referential Machines]] (i.e. objects), that can be categorized (classification, inheritance), have certain sensors (i.e. inputs), certain behaviors (i.e. outputs) and, by virtue of their autonomy, can react differently to identical inputs (polymorphism). Further, the OOP framework represents a human conception about the human conception of the world, and in that sense, it is the outcome of a recursive analysis that exemplifies first and second-order cybernetics and systems theory (Bateson G., 2002; Checkland P., 1999; Foerster von H., 1984; 2002; 2003; Heidegger M., 2006; Heylighen F., 2001; Maturana H.R., 2005). In fact, the only thing that OOP lacks compared to the human conception of reality is embodiment; but here too, if one considers software as residing in hardware (a legitimate conception in our opinion), the embodiment of software becomes a self-evident fact. It should be therefore of no surprise that we are proposing systems theory as a theoretical framework for software engineering in all of its aspects."
      },
      "attribution": {
        "page": "2023-09-07"
      },
      "date": 1694074216960
    },
    {
      "id": "598d68113c15ddc0",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "598d68113c15ddc0",
        "text": "~"
      },
      "after": "06c963223b1ae96a",
      "attribution": {
        "page": "2023-09-07"
      },
      "date": 1694074225408
    },
    {
      "id": "bcae259aff09e9f6",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "bcae259aff09e9f6",
        "text": "MAVROFIDES, Thomas, KAMEAS, Achilles and DIMARAKI, Evangelia, [no date]. A Theoretical Framework for Software Engineering: Rediscovering Cybernetics and Systems Theory."
      },
      "after": "598d68113c15ddc0",
      "attribution": {
        "page": "2023-09-07"
      },
      "date": 1694074229225
    },
    {
      "type": "edit",
      "id": "06c963223b1ae96a",
      "item": {
        "type": "paragraph",
        "id": "06c963223b1ae96a",
        "text": "As we can now see, the OOP paradigm is a close simulation of the systems theoretical model of communication between distinct (identity) [[Self-Referential Machines]] (i.e. objects), that can be categorized (classification, inheritance), have certain sensors (i.e. inputs), certain behaviors (i.e. outputs) and, by virtue of their autonomy, can react differently to identical inputs (polymorphism)."
      },
      "date": 1694074258708
    },
    {
      "type": "add",
      "id": "37f11ec4dc0cb1a9",
      "item": {
        "type": "paragraph",
        "id": "37f11ec4dc0cb1a9",
        "text": "Further, the OOP framework represents a human conception about the human conception of the world, and in that sense, it is the outcome of a recursive analysis that exemplifies first and second-order cybernetics and systems theory (Bateson G., 2002; Checkland P., 1999; Foerster von H., 1984; 2002; 2003; Heidegger M., 2006; Heylighen F., 2001; Maturana H.R., 2005). In fact, the only thing that OOP lacks compared to the human conception of reality is embodiment; but here too, if one considers software as residing in hardware (a legitimate conception in our opinion), the embodiment of software becomes a self-evident fact. It should be therefore of no surprise that we are proposing systems theory as a theoretical framework for software engineering in all of its aspects."
      },
      "after": "06c963223b1ae96a",
      "date": 1694074259718
    },
    {
      "type": "edit",
      "id": "06c963223b1ae96a",
      "item": {
        "type": "paragraph",
        "id": "06c963223b1ae96a",
        "text": "The OOP paradigm is a close simulation of the systems theoretical model of communication between distinct (identity) [[Self-Referential Machines]] (i.e. objects), that can be categorized (classification, inheritance), have certain sensors (i.e. inputs), certain behaviors (i.e. outputs) and, by virtue of their autonomy, can react differently to identical inputs (polymorphism)."
      },
      "date": 1694074269692
    },
    {
      "type": "edit",
      "id": "37f11ec4dc0cb1a9",
      "item": {
        "type": "paragraph",
        "id": "37f11ec4dc0cb1a9",
        "text": "Further, the OOP framework represents a human conception about the human conception of the world, and in that sense, it is the outcome of a recursive analysis that exemplifies first and second-order cybernetics and systems theory (Bateson G., 2002; Checkland P., 1999; Foerster von H., 1984; 2002; 2003; Heidegger M., 2006; Heylighen F., 2001; Maturana H.R., 2005)."
      },
      "date": 1694074313200
    },
    {
      "type": "add",
      "id": "f24fa855bde8d527",
      "item": {
        "type": "paragraph",
        "id": "f24fa855bde8d527",
        "text": "In fact, the only thing that OOP lacks compared to the human conception of reality is embodiment; but here too, if one considers software as residing in hardware (a legitimate conception in our opinion), the embodiment of software becomes a self-evident fact. It should be therefore of no surprise that we are proposing systems theory as a theoretical framework for software engineering in all of its aspects."
      },
      "after": "37f11ec4dc0cb1a9",
      "date": 1694074314108
    },
    {
      "type": "edit",
      "id": "f24fa855bde8d527",
      "item": {
        "type": "paragraph",
        "id": "f24fa855bde8d527",
        "text": "In fact, the only thing that OOP lacks compared to the human conception of reality is embodiment; but here too, if one considers software as residing in hardware (a legitimate conception in our opinion), the embodiment of software becomes a self-evident fact. It should be therefore of no surprise that we are proposing [[Systems Theory]] as a theoretical framework for software engineering in all of its aspects."
      },
      "date": 1694074345475
    },
    {
      "type": "edit",
      "id": "f24fa855bde8d527",
      "item": {
        "type": "paragraph",
        "id": "f24fa855bde8d527",
        "text": "In fact, the only thing that OOP lacks compared to the human conception of reality is [[Embodiment]]; but here too, if one considers software as residing in hardware (a legitimate conception in our opinion), the embodiment of software becomes a self-evident fact. It should be therefore of no surprise that we are proposing [[Systems Theory]] as a theoretical framework for software engineering in all of its aspects."
      },
      "date": 1694075748567
    }
  ]
}