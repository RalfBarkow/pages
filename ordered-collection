{
  "title": "Ordered Collection",
  "story": [
    {
      "type": "html",
      "text": "A collection of items that can be accessed in an ordered fashion. Allows items to be inserted or removed by position. This is unlike an associative collection, such as a Map, or a Set that does not allow clients to positionally insert elements. Only an ordered collection can be sorted. If you have an un-ordered bag of elements, sorting them has no effect since its elements cannot be positionally accessed -- i.e. One cannot ask <i>is first element greater than second element?</i>.",
      "id": "e1720048ddce71cd03b18d605c163051"
    },
    {
      "type": "html",
      "text": "<i>You're confusing ordering with sequence, I think.  Among the various types of sorted collections you can have are:</i>",
      "id": "e8e0789d6c7f0fbb815b810e5bd99bfe"
    },
    {
      "type": "html",
      "text": " <i>Ordered set/bag.  Ordering does make sense here--as iteration through the collection can be made to proceed in an ordered fashion.  (Compare with a hashtable, for which such a traversal will provide the elements in an arbitrary, though deterministic, order).</i>",
      "id": "bc4e2ccb738d0082464855c0d1555687"
    },
    {
      "type": "html",
      "text": " <i>Ordered map/dict/multiset.  Similar to set/bag.  You can retrieve elements by key, obviously; but an iteration will proceed through the collection in a defined order</i>",
      "id": "f0daa383300de3f973d4fa6f11e7edd7"
    },
    {
      "type": "html",
      "text": " <i>Ordered array.  Elements are accessed (usually) by integers in range [0 .. size-1] or [1 .. size]; invariant that a(x) <= a(y) for all x<y is maintained.  Compare with an ordinary array; where the order of elements is the order of insertion (or changes only according to explicit order-changing operations by the program).</i>",
      "id": "82bc36eb88b0dd107717ce52f353705c"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?OrderedCollection c2.com]",
      "id": "2c7dac51a77091e4c2daf4de91c6c01d"
    }
  ],
  "journal": [
    {
      "date": 1415880726000,
      "id": "aaa707c9df9008118823703043d0ea38",
      "type": "create",
      "item": {
        "title": "Ordered Collection",
        "story": [
          {
            "type": "html",
            "text": "A collection of items that can be accessed in an ordered fashion. Allows items to be inserted or removed by position. This is unlike an associative collection, such as a Map, or a Set that does not allow clients to positionally insert elements. Only an ordered collection can be sorted. If you have an un-ordered bag of elements, sorting them has no effect since its elements cannot be positionally accessed -- i.e. One cannot ask <i>is first element greater than second element?</i>.",
            "id": "e1720048ddce71cd03b18d605c163051"
          },
          {
            "type": "html",
            "text": "<i>You're confusing ordering with sequence, I think.  Among the various types of sorted collections you can have are:</i>",
            "id": "e8e0789d6c7f0fbb815b810e5bd99bfe"
          },
          {
            "type": "html",
            "text": " <i>Ordered set/bag.  Ordering does make sense here--as iteration through the collection can be made to proceed in an ordered fashion.  (Compare with a hashtable, for which such a traversal will provide the elements in an arbitrary, though deterministic, order).</i>",
            "id": "bc4e2ccb738d0082464855c0d1555687"
          },
          {
            "type": "html",
            "text": " <i>Ordered map/dict/multiset.  Similar to set/bag.  You can retrieve elements by key, obviously; but an iteration will proceed through the collection in a defined order</i>",
            "id": "f0daa383300de3f973d4fa6f11e7edd7"
          },
          {
            "type": "html",
            "text": " <i>Ordered array.  Elements are accessed (usually) by integers in range [0 .. size-1] or [1 .. size]; invariant that a(x) <= a(y) for all x<y is maintained.  Compare with an ordinary array; where the order of elements is the order of insertion (or changes only according to explicit order-changing operations by the program).</i>",
            "id": "82bc36eb88b0dd107717ce52f353705c"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?OrderedCollection c2.com]",
            "id": "2c7dac51a77091e4c2daf4de91c6c01d"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1627081584348
    }
  ]
}