{
  "title": "8086 Microcode Architecture",
  "story": [
    {
      "type": "paragraph",
      "id": "1b6bf71ebca86e66",
      "text": "One interesting issue is how the micro-instructions are organized in the ROM, and how the right micro-instructions are executed for a particular machine instruction. The 8086 uses a clever mapping from the machine instruction to a microcode address that allows machine instructions to share microcode. [https://www.righto.com/2022/11/how-8086-processors-microcode-engine.html post]"
    },
    {
      "type": "image",
      "id": "4c6d0b0a62cd51b6",
      "text": "8086 Microcode Store",
      "size": "wide",
      "width": 420,
      "height": 395,
      "url": "/assets/plugins/image/15783e912aa2aa1a29e4a74d3d74af7e.jpg"
    },
    {
      "type": "paragraph",
      "id": "1485acf0fe8860f4",
      "text": "Different processors use a variety of approaches to microcode organization. One technique is for each micro-instruction to contain a field with the address of the next micro-instruction. This provides complete flexibility for the arrangement of micro-instructions, but requires a field to hold the address, increasing the number of bits in each micro-instruction."
    },
    {
      "type": "paragraph",
      "id": "780b9a59f03f756f",
      "text": "A common alternative is to execute micro-instructions sequentially, with a micro-program-counter stepping through each micro-address unless there is an explicit jump to a new address. This approach avoids the cost of an address field in each instruction, but requires a program counter with an incrementer, increasing the hardware complexity.\n"
    },
    {
      "type": "paragraph",
      "id": "ae6ee5234c43c065",
      "text": "The 8086 uses a hybrid approach. A 4-bit program counter steps through the bottom 4 bits of the address, so up to 16 micro-instructions can be executed in sequence without a jump."
    },
    {
      "type": "paragraph",
      "id": "a327a2682c4a1dc4",
      "text": "This approach has the advantage of requiring a smaller 4-bit incrementer for the program counter, rather than a 13-bit incrementer. The microcode engine provides a \"short jump\" operation that makes it easy to jump within the group of 16 instructions using a 4-bit jump target, rather than a full 13-bit address."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "8086 Microcode Architecture",
        "story": []
      },
      "date": 1670096018996
    },
    {
      "item": {
        "type": "factory",
        "id": "1b6bf71ebca86e66"
      },
      "id": "1b6bf71ebca86e66",
      "type": "add",
      "date": 1670096055744
    },
    {
      "type": "edit",
      "id": "1b6bf71ebca86e66",
      "item": {
        "type": "paragraph",
        "id": "1b6bf71ebca86e66",
        "text": "One interesting issue is how the micro-instructions are organized in the ROM, and how the right micro-instructions are executed for a particular machine instruction. The 8086 uses a clever mapping from the machine instruction to a microcode address that allows machine instructions to share microcode."
      },
      "date": 1670096058665
    },
    {
      "type": "edit",
      "id": "1b6bf71ebca86e66",
      "item": {
        "type": "paragraph",
        "id": "1b6bf71ebca86e66",
        "text": "One interesting issue is how the micro-instructions are organized in the ROM, and how the right micro-instructions are executed for a particular machine instruction. The 8086 uses a clever mapping from the machine instruction to a microcode address that allows machine instructions to share microcode. [https://www.righto.com/2022/11/how-8086-processors-microcode-engine.html post]"
      },
      "date": 1670096075781
    },
    {
      "item": {
        "type": "factory",
        "id": "4c6d0b0a62cd51b6"
      },
      "id": "4c6d0b0a62cd51b6",
      "type": "add",
      "after": "1b6bf71ebca86e66",
      "date": 1670096145391
    },
    {
      "type": "edit",
      "id": "4c6d0b0a62cd51b6",
      "item": {
        "type": "image",
        "id": "4c6d0b0a62cd51b6",
        "text": "8086 Microcode Store",
        "size": "wide",
        "width": 420,
        "height": 395,
        "url": "/assets/plugins/image/15783e912aa2aa1a29e4a74d3d74af7e.jpg"
      },
      "date": 1670096167084
    },
    {
      "item": {
        "type": "factory",
        "id": "1485acf0fe8860f4"
      },
      "id": "1485acf0fe8860f4",
      "type": "add",
      "after": "4c6d0b0a62cd51b6",
      "date": 1670096202755
    },
    {
      "type": "edit",
      "id": "1485acf0fe8860f4",
      "item": {
        "type": "paragraph",
        "id": "1485acf0fe8860f4",
        "text": "Different processors use a variety of approaches to microcode organization. One technique is for each micro-instruction to contain a field with the address of the next micro-instruction. This provides complete flexibility for the arrangement of micro-instructions, but requires a field to hold the address, increasing the number of bits in each micro-instruction. A common alternative is to execute micro-instructions sequentially, with a micro-program-counter stepping through each micro-address unless there is an explicit jump to a new address. This approach avoids the cost of an address field in each instruction, but requires a program counter with an incrementer, increasing the hardware complexity.\n"
      },
      "date": 1670096211519
    },
    {
      "type": "add",
      "id": "ae6ee5234c43c065",
      "item": {
        "type": "paragraph",
        "id": "ae6ee5234c43c065",
        "text": "The 8086 uses a hybrid approach. A 4-bit program counter steps through the bottom 4 bits of the address, so up to 16 micro-instructions can be executed in sequence without a jump. This approach has the advantage of requiring a smaller 4-bit incrementer for the program counter, rather than a 13-bit incrementer. The microcode engine provides a \"short jump\" operation that makes it easy to jump within the group of 16 instructions using a 4-bit jump target, rather than a full 13-bit address."
      },
      "after": "1485acf0fe8860f4",
      "date": 1670096212868
    },
    {
      "type": "edit",
      "id": "1485acf0fe8860f4",
      "item": {
        "type": "paragraph",
        "id": "1485acf0fe8860f4",
        "text": "Different processors use a variety of approaches to microcode organization. One technique is for each micro-instruction to contain a field with the address of the next micro-instruction. This provides complete flexibility for the arrangement of micro-instructions, but requires a field to hold the address, increasing the number of bits in each micro-instruction."
      },
      "date": 1670096260157
    },
    {
      "type": "add",
      "id": "780b9a59f03f756f",
      "item": {
        "type": "paragraph",
        "id": "780b9a59f03f756f",
        "text": "A common alternative is to execute micro-instructions sequentially, with a micro-program-counter stepping through each micro-address unless there is an explicit jump to a new address. This approach avoids the cost of an address field in each instruction, but requires a program counter with an incrementer, increasing the hardware complexity.\n"
      },
      "after": "1485acf0fe8860f4",
      "date": 1670096264115
    },
    {
      "type": "edit",
      "id": "ae6ee5234c43c065",
      "item": {
        "type": "paragraph",
        "id": "ae6ee5234c43c065",
        "text": "The 8086 uses a hybrid approach. A 4-bit program counter steps through the bottom 4 bits of the address, so up to 16 micro-instructions can be executed in sequence without a jump."
      },
      "date": 1670096287020
    },
    {
      "type": "add",
      "id": "a327a2682c4a1dc4",
      "item": {
        "type": "paragraph",
        "id": "a327a2682c4a1dc4",
        "text": "This approach has the advantage of requiring a smaller 4-bit incrementer for the program counter, rather than a 13-bit incrementer. The microcode engine provides a \"short jump\" operation that makes it easy to jump within the group of 16 instructions using a 4-bit jump target, rather than a full 13-bit address."
      },
      "after": "ae6ee5234c43c065",
      "date": 1670096288251
    },
    {
      "type": "fork",
      "site": "found.ward.fed.wiki",
      "date": 1670942001236
    }
  ]
}