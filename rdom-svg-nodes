{
  "title": "rdom-svg-nodes",
  "story": [
    {
      "type": "paragraph",
      "id": "d43e58c831c65a5e",
      "text": "[[rdom]] powered SVG graph with draggable nodes [https://github.com/thi-ng/umbrella/tree/develop/examples/rdom-svg-nodes#rdom-svg-nodes github], [https://github.com/thi-ng/umbrella/blob/8ab2cbfe2f59b7ef672b6e1cf2a43368f8437ddf/packages/rdom/README.md#usage-examples github]"
    },
    {
      "type": "html",
      "id": "4863c42f1928fc1b",
      "text": "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"179.367\" height=\"61.313\" viewBox=\"0 3.715312500000003 179.3671875 61.31250000000001\" stroke=\"none\"><style>path { fill: #333; } @media (prefers-color-scheme: dark) { path { fill: #ccc; } }</style><path d=\"M0 47.520L7.031 47.520C10.469 35.817 13.986 24.193 17.367 12.434L19.969 3.715L12.938 3.715L10.336 12.434L4.711 12.434L3.445 16.864L9.070 16.864Z\"/><path d=\"M18.281 47.520L25.313 47.520C27.919 38.759 30.449 29.922 33.117 21.223L23.977 21.223L29.109 3.715L22.078 3.715C19.919 11.002 17.838 18.366 15.609 25.583L9.141 47.520L16.172 47.520L22.641 25.583L24.750 25.583Z\"/><path d=\"M44.508 13.454C44.489 11.502 42.949 9.973 40.992 9.973C39.023 9.973 37.477 11.520 37.477 13.489C37.477 15.387 39.023 16.934 40.992 16.934C42.949 16.934 44.489 15.406 44.508 13.454C44.508 13.442 44.508 13.430 44.508 13.418ZM27.422 47.520L34.453 47.520L42.258 21.223L35.227 21.223Z\"/><path d=\"M44.578 44.145C44.578 42.176 43.031 40.629 41.063 40.629C39.164 40.629 37.617 42.176 37.617 44.145C37.617 46.114 39.164 47.661 41.133 47.661C43.102 47.661 44.648 46.114 44.648 44.145Z\"/><path d=\"M54.844 47.520L61.875 47.520C64.481 38.759 67.012 29.922 69.680 21.223L53.508 21.223C50.839 29.922 48.310 38.760 45.703 47.520L52.734 47.520L59.203 25.583L61.313 25.583Z\"/><path d=\"M58.781 65.028L74.953 65.028C78.918 51.954 82.725 38.721 86.625 25.583L87.961 21.223L71.789 21.223C69.121 29.922 66.591 38.760 63.984 47.520L71.016 47.520L77.484 25.583L79.594 25.583L69.258 60.668L67.148 60.668L68.414 56.309L61.383 56.309C60.544 59.244 59.677 62.150 58.781 65.028Z\"/><path d=\"M77.063 65.028L84.094 65.028L102.234 3.715L95.203 3.715Z\"/><path d=\"M105.750 30.012L112.781 30.012C113.612 27.046 114.479 24.116 115.383 21.223L99.211 21.223C96.543 29.922 94.013 38.760 91.406 47.520L98.438 47.520L104.906 25.583L107.016 25.583Z\"/><path d=\"M109.688 47.520L125.859 47.520C130.136 32.883 134.489 18.322 138.797 3.715L131.766 3.715L120.094 43.161L117.984 43.161L124.523 21.223L117.492 21.223C114.894 29.992 112.245 38.710 109.688 47.520Z\"/><path d=\"M127.969 47.520L144.141 47.520C146.266 40.176 148.455 32.896 150.609 25.583L151.945 21.223L135.773 21.223C133.537 28.479 131.416 35.851 129.234 43.161ZM143.578 25.583L138.375 43.161L136.266 43.161L141.469 25.583Z\"/><path d=\"M164.531 47.520L171.563 47.520C174.169 38.759 176.699 29.922 179.367 21.223L154.055 21.223C151.386 29.922 148.857 38.760 146.250 47.520L153.281 47.520L159.750 25.583L161.859 25.583L155.391 47.520L162.422 47.520L168.891 25.583L171 25.583Z\"/></svg>"
    },
    {
      "type": "paragraph",
      "id": "efa4727f75dbd37a",
      "text": "The program starts by importing several functions from different modules via CDN. These functions include defAtom, equivArrayLike, circle, line, svg, $compile, $list, fromAtom, indexed, partition, repeatedly and random2. "
    },
    {
      "type": "code",
      "id": "b465cd9a1c52e801",
      "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { equivArrayLike } from 'https://esm.run/@thi.ng/equiv';\nimport { circle, line, svg } from 'https://esm.run/@thi.ng/hiccup-svg';\nimport { $compile, $list } from 'https://esm.run/@thi.ng/rdom';\nimport { fromAtom } from 'https://esm.run/@thi.ng/rstream';\nimport { indexed, partition, repeatedly } from \"https://esm.run/@thi.ng/transducers\";\nimport { random2 } from \"https://esm.run/@thi.ng/vectors\";"
    },
    {
      "type": "paragraph",
      "id": "0cbd06841a788433",
      "text": "The defAtom function creates a new reactive atom with an initial value of an array of NUM random points within a square area with a side length of WIDTH.\n\n"
    },
    {
      "type": "code",
      "id": "60e74ecdab330abb",
      "text": "const WIDTH = 600;\nconst NUM = 10;\nconst R = 20;\n// define atom of NUM random points\nconst db = defAtom([...repeatedly(() => random2([], R, WIDTH - R), NUM)]);\n"
    },
    {
      "type": "paragraph",
      "id": "bdee7b00cd4c7a8f",
      "text": "The program then defines a clicked variable to keep track of which point is currently being dragged (initialized to -1).\n\n"
    },
    {
      "type": "code",
      "id": "280017167942d56d",
      "text": "// ID of currently dragged point\nlet clicked = -1;\n"
    },
    {
      "type": "frame",
      "id": "5396a0b4e33715c0",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 256"
    },
    {
      "type": "paragraph",
      "id": "11198dff8340dece",
      "text": "The $compile function creates an SVG element with width, height, and viewBox attributes to be displayed in the frame above, and mouse event handlers for drag-and-drop interaction. "
    },
    {
      "type": "code",
      "id": "91e8dabb74c01aca",
      "text": "$compile(svg({\n    width: WIDTH,\n    height: WIDTH,\n    viewBox: `0 0 ${WIDTH} ${WIDTH}`,\n    // mouse drag & release handlers are on SVG element itself\n    // for better UX when fast dragging\n    onmousemove: (e) => clicked !== -1 && db.resetIn([clicked], [e.clientX, e.clientY]),\n    onmouseup: () => (clicked = -1),\n    // add new point on double click\n    ondblclick: (e) => db.swap((pts) => [...pts, [e.clientX, e.clientY]]),\n}, "
    },
    {
      "type": "paragraph",
      "id": "7c14437485c60cf5",
      "text": "The $list function is used to create two reactive lists, one for lines and one for circles, each with a corresponding set of attributes and mouse event handlers.\n\n"
    },
    {
      "type": "code",
      "id": "13d464f27ff39579",
      "text": "// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n"
    },
    {
      "type": "paragraph",
      "id": "0c28a449b913b44c",
      "text": "To create the line and circle elements, the program uses a combination of the map and indexed functions to transform the array of points into consecutive pairs for lines, and to assign a unique index to each point for circles. The circle and line functions are used to create the corresponding SVG elements for each point pair.\n\n"
    },
    {
      "type": "paragraph",
      "id": "3d2b79b8de993c43",
      "text": "When the user clicks on a circle element, it becomes selected, and the mousedown event handler updates the clicked variable with its index. When the user drags a selected circle element, the mousemove event handler updates its position in the reactive atom. When the user releases the mouse button, the mouseup event handler sets clicked back to -1.\n\n"
    },
    {
      "type": "code",
      "id": "36b6796b53efae63",
      "text": "// update selection & point position in atom on mouse click\n([i, p]) => circle(p, R, {\n    onmousedown: (e) => {\n        clicked = i;\n        db.resetIn([i], [e.clientX, e.clientY]);\n    },\n}), \n// value based equivalence predicate\nequivArrayLike))).mount(document.getElementById(\"output\"));"
    },
    {
      "type": "paragraph",
      "id": "bdf54d76a84ff46a",
      "text": "Note: The id property has been changed from \"app\" to \"output\"."
    },
    {
      "type": "paragraph",
      "id": "bffc0c9dee4cb5a6",
      "text": "Overall, the program creates a simple interactive SVG graph with draggable nodes that can be used for various applications, such as data visualization or interactive art."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "rdom-svg-nodes",
        "story": []
      },
      "date": 1678775247800
    },
    {
      "id": "5396a0b4e33715c0",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "5396a0b4e33715c0",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 256"
      },
      "attribution": {
        "page": "ellipse-proximity"
      },
      "date": 1678775257233
    },
    {
      "item": {
        "type": "factory",
        "id": "60e74ecdab330abb"
      },
      "id": "60e74ecdab330abb",
      "type": "add",
      "after": "5396a0b4e33715c0",
      "date": 1678775289994
    },
    {
      "type": "edit",
      "id": "60e74ecdab330abb",
      "item": {
        "type": "code",
        "id": "60e74ecdab330abb",
        "text": "import { defAtom } from \"@thi.ng/atom\";\nimport { equivArrayLike } from \"@thi.ng/equiv\";\nimport { circle, line, svg } from \"@thi.ng/hiccup-svg\";\nimport { $compile, $list } from \"@thi.ng/rdom\";\nimport { fromAtom } from \"@thi.ng/rstream\";\nimport { indexed, partition, repeatedly } from \"@thi.ng/transducers\";\nimport { random2 } from \"@thi.ng/vectors\";\nconst WIDTH = 600;\nconst NUM = 10;\nconst R = 20;\n// define atom of NUM random points\nconst db = defAtom([...repeatedly(() => random2([], R, WIDTH - R), NUM)]);\n// ID of currently dragged point\nlet clicked = -1;\n$compile(svg({\n    width: WIDTH,\n    height: WIDTH,\n    viewBox: `0 0 ${WIDTH} ${WIDTH}`,\n    // mouse drag & release handlers are on SVG element itself\n    // for better UX when fast dragging\n    onmousemove: (e) => clicked !== -1 && db.resetIn([clicked], [e.clientX, e.clientY]),\n    onmouseup: () => (clicked = -1),\n    // add new point on double click\n    ondblclick: (e) => db.swap((pts) => [...pts, [e.clientX, e.clientY]]),\n}, \n// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n// update selection & point position in atom on mouse click\n([i, p]) => circle(p, R, {\n    onmousedown: (e) => {\n        clicked = i;\n        db.resetIn([i], [e.clientX, e.clientY]);\n    },\n}), \n// value based equivalence predicate\nequivArrayLike))).mount(document.getElementById(\"app\"));"
      },
      "date": 1678775292379
    },
    {
      "item": {
        "type": "factory",
        "id": "b465cd9a1c52e801"
      },
      "id": "b465cd9a1c52e801",
      "type": "add",
      "after": "60e74ecdab330abb",
      "date": 1678775297936
    },
    {
      "id": "b465cd9a1c52e801",
      "type": "move",
      "order": [
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "60e74ecdab330abb"
      ],
      "date": 1678775303168
    },
    {
      "type": "edit",
      "id": "60e74ecdab330abb",
      "item": {
        "type": "code",
        "id": "60e74ecdab330abb",
        "text": "const WIDTH = 600;\nconst NUM = 10;\nconst R = 20;\n// define atom of NUM random points\nconst db = defAtom([...repeatedly(() => random2([], R, WIDTH - R), NUM)]);\n// ID of currently dragged point\nlet clicked = -1;\n$compile(svg({\n    width: WIDTH,\n    height: WIDTH,\n    viewBox: `0 0 ${WIDTH} ${WIDTH}`,\n    // mouse drag & release handlers are on SVG element itself\n    // for better UX when fast dragging\n    onmousemove: (e) => clicked !== -1 && db.resetIn([clicked], [e.clientX, e.clientY]),\n    onmouseup: () => (clicked = -1),\n    // add new point on double click\n    ondblclick: (e) => db.swap((pts) => [...pts, [e.clientX, e.clientY]]),\n}, \n// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n// update selection & point position in atom on mouse click\n([i, p]) => circle(p, R, {\n    onmousedown: (e) => {\n        clicked = i;\n        db.resetIn([i], [e.clientX, e.clientY]);\n    },\n}), \n// value based equivalence predicate\nequivArrayLike))).mount(document.getElementById(\"app\"));"
      },
      "date": 1678775313290
    },
    {
      "type": "edit",
      "id": "b465cd9a1c52e801",
      "item": {
        "type": "code",
        "id": "b465cd9a1c52e801",
        "text": "import { defAtom } from \"@thi.ng/atom\";\nimport { equivArrayLike } from \"@thi.ng/equiv\";\nimport { circle, line, svg } from \"@thi.ng/hiccup-svg\";\nimport { $compile, $list } from \"@thi.ng/rdom\";\nimport { fromAtom } from \"@thi.ng/rstream\";\nimport { indexed, partition, repeatedly } from \"@thi.ng/transducers\";\nimport { random2 } from \"@thi.ng/vectors\";"
      },
      "date": 1678775314705
    },
    {
      "type": "edit",
      "id": "b465cd9a1c52e801",
      "item": {
        "type": "code",
        "id": "b465cd9a1c52e801",
        "text": "import { defAtom } from \"https://cdn.skypack.dev/@thi.ng/atom\";\nimport { equivArrayLike } from \"https://cdn.skypack.dev/@thi.ng/equiv\";\nimport { circle, line, svg } from \"https://cdn.skypack.dev/@thi.ng/hiccup-svg\";\nimport { $compile, $list } from \"https://cdn.skypack.dev/@thi.ng/rdom\";\nimport { fromAtom } from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport { indexed, partition, repeatedly } from \"https://cdn.skypack.dev/@thi.ng/transducers\";\nimport { random2 } from \"https://cdn.skypack.dev/@thi.ng/vectors\";"
      },
      "date": 1678775345968
    },
    {
      "item": {
        "type": "factory",
        "id": "d43e58c831c65a5e"
      },
      "id": "d43e58c831c65a5e",
      "type": "add",
      "after": "60e74ecdab330abb",
      "date": 1678775421031
    },
    {
      "id": "d43e58c831c65a5e",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "60e74ecdab330abb"
      ],
      "date": 1678775426814
    },
    {
      "type": "edit",
      "id": "d43e58c831c65a5e",
      "item": {
        "type": "paragraph",
        "id": "d43e58c831c65a5e",
        "text": "rdom powered SVG graph with draggable nodes"
      },
      "date": 1678775429699
    },
    {
      "type": "edit",
      "id": "d43e58c831c65a5e",
      "item": {
        "type": "paragraph",
        "id": "d43e58c831c65a5e",
        "text": "rdom powered SVG graph with draggable nodes [https://github.com/thi-ng/umbrella/tree/develop/examples/rdom-svg-nodes#rdom-svg-nodes github]"
      },
      "date": 1678775457109
    },
    {
      "item": {
        "type": "factory",
        "id": "b7fa8259221c75b8"
      },
      "id": "b7fa8259221c75b8",
      "type": "add",
      "after": "60e74ecdab330abb",
      "date": 1678775469537
    },
    {
      "id": "b7fa8259221c75b8",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "b7fa8259221c75b8",
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "60e74ecdab330abb"
      ],
      "date": 1678775476760
    },
    {
      "type": "edit",
      "id": "b7fa8259221c75b8",
      "item": {
        "type": "html",
        "id": "b7fa8259221c75b8",
        "text": "<img\n  src=\"https://raw.githubusercontent.com/thi-ng/umbrella/develop/assets/examples/rdom-svg-nodes.png\"\n  width=\"100%\"\n>"
      },
      "date": 1678775492087
    },
    {
      "type": "edit",
      "id": "d43e58c831c65a5e",
      "item": {
        "type": "paragraph",
        "id": "d43e58c831c65a5e",
        "text": "[[rdom]] powered SVG graph with draggable nodes [https://github.com/thi-ng/umbrella/tree/develop/examples/rdom-svg-nodes#rdom-svg-nodes github]"
      },
      "date": 1678775507596
    },
    {
      "type": "edit",
      "id": "60e74ecdab330abb",
      "item": {
        "type": "code",
        "id": "60e74ecdab330abb",
        "text": "const WIDTH = 600;\nconst NUM = 10;\nconst R = 20;\n// define atom of NUM random points\nconst db = defAtom([...repeatedly(() => random2([], R, WIDTH - R), NUM)]);\n// ID of currently dragged point\nlet clicked = -1;\n$compile(svg({\n    width: WIDTH,\n    height: WIDTH,\n    viewBox: `0 0 ${WIDTH} ${WIDTH}`,\n    // mouse drag & release handlers are on SVG element itself\n    // for better UX when fast dragging\n    onmousemove: (e) => clicked !== -1 && db.resetIn([clicked], [e.clientX, e.clientY]),\n    onmouseup: () => (clicked = -1),\n    // add new point on double click\n    ondblclick: (e) => db.swap((pts) => [...pts, [e.clientX, e.clientY]]),\n}, \n// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n// update selection & point position in atom on mouse click\n([i, p]) => circle(p, R, {\n    onmousedown: (e) => {\n        clicked = i;\n        db.resetIn([i], [e.clientX, e.clientY]);\n    },\n}), \n// value based equivalence predicate\nequivArrayLike))).mount(document.getElementById(\"pre\"));"
      },
      "date": 1678775986961
    },
    {
      "type": "edit",
      "id": "60e74ecdab330abb",
      "item": {
        "type": "code",
        "id": "60e74ecdab330abb",
        "text": "const WIDTH = 600;\nconst NUM = 10;\nconst R = 20;\n// define atom of NUM random points\nconst db = defAtom([...repeatedly(() => random2([], R, WIDTH - R), NUM)]);\n// ID of currently dragged point\nlet clicked = -1;\n$compile(svg({\n    width: WIDTH,\n    height: WIDTH,\n    viewBox: `0 0 ${WIDTH} ${WIDTH}`,\n    // mouse drag & release handlers are on SVG element itself\n    // for better UX when fast dragging\n    onmousemove: (e) => clicked !== -1 && db.resetIn([clicked], [e.clientX, e.clientY]),\n    onmouseup: () => (clicked = -1),\n    // add new point on double click\n    ondblclick: (e) => db.swap((pts) => [...pts, [e.clientX, e.clientY]]),\n}, \n// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n// update selection & point position in atom on mouse click\n([i, p]) => circle(p, R, {\n    onmousedown: (e) => {\n        clicked = i;\n        db.resetIn([i], [e.clientX, e.clientY]);\n    },\n}), \n// value based equivalence predicate\nequivArrayLike))).mount(document.getElementById(\"output\"));"
      },
      "date": 1678776125775
    },
    {
      "type": "remove",
      "id": "b7fa8259221c75b8",
      "date": 1678776155435
    },
    {
      "type": "edit",
      "id": "d43e58c831c65a5e",
      "item": {
        "type": "paragraph",
        "id": "d43e58c831c65a5e",
        "text": "[[rdom]] powered SVG graph with draggable nodes [https://github.com/thi-ng/umbrella/tree/develop/examples/rdom-svg-nodes#rdom-svg-nodes github], [https://github.com/thi-ng/umbrella/blob/8ab2cbfe2f59b7ef672b6e1cf2a43368f8437ddf/packages/rdom/README.md#usage-examples github]"
      },
      "date": 1678776589562
    },
    {
      "id": "bdf54d76a84ff46a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "bdf54d76a84ff46a",
        "text": "Note: The id property has been changed from \"app\" to \"output\"."
      },
      "after": "60e74ecdab330abb",
      "attribution": {
        "page": "Closest Points on Ellipses"
      },
      "date": 1678809436282
    },
    {
      "item": {
        "type": "factory",
        "id": "91e8dabb74c01aca"
      },
      "id": "91e8dabb74c01aca",
      "type": "add",
      "after": "bdf54d76a84ff46a",
      "date": 1679318168975
    },
    {
      "type": "edit",
      "id": "60e74ecdab330abb",
      "item": {
        "type": "code",
        "id": "60e74ecdab330abb",
        "text": "const WIDTH = 600;\nconst NUM = 10;\nconst R = 20;\n// define atom of NUM random points\nconst db = defAtom([...repeatedly(() => random2([], R, WIDTH - R), NUM)]);\n// ID of currently dragged point\nlet clicked = -1;\n"
      },
      "date": 1679318186248
    },
    {
      "type": "edit",
      "id": "91e8dabb74c01aca",
      "item": {
        "type": "code",
        "id": "91e8dabb74c01aca",
        "text": "$compile(svg({\n    width: WIDTH,\n    height: WIDTH,\n    viewBox: `0 0 ${WIDTH} ${WIDTH}`,\n    // mouse drag & release handlers are on SVG element itself\n    // for better UX when fast dragging\n    onmousemove: (e) => clicked !== -1 && db.resetIn([clicked], [e.clientX, e.clientY]),\n    onmouseup: () => (clicked = -1),\n    // add new point on double click\n    ondblclick: (e) => db.swap((pts) => [...pts, [e.clientX, e.clientY]]),\n}, \n// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n// update selection & point position in atom on mouse click\n([i, p]) => circle(p, R, {\n    onmousedown: (e) => {\n        clicked = i;\n        db.resetIn([i], [e.clientX, e.clientY]);\n    },\n}), \n// value based equivalence predicate\nequivArrayLike))).mount(document.getElementById(\"output\"));"
      },
      "date": 1679318187667
    },
    {
      "id": "91e8dabb74c01aca",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "60e74ecdab330abb",
        "91e8dabb74c01aca",
        "bdf54d76a84ff46a"
      ],
      "date": 1679318190070
    },
    {
      "id": "efa4727f75dbd37a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "efa4727f75dbd37a",
        "text": "The program starts by importing several functions from different modules via CDN. These functions include defAtom, equivArrayLike, circle, line, svg, $compile, $list, fromAtom, indexed, partition, repeatedly and random2. "
      },
      "after": "d43e58c831c65a5e",
      "attribution": {
        "page": "2023-03-22"
      },
      "date": 1679502280538
    },
    {
      "id": "0cbd06841a788433",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0cbd06841a788433",
        "text": "The defAtom function creates a new reactive atom with an initial value of an array of NUM random points within a square area with a side length of WIDTH.\n\n"
      },
      "after": "5396a0b4e33715c0",
      "attribution": {
        "page": "2023-03-22"
      },
      "date": 1679502290978
    },
    {
      "item": {
        "type": "factory",
        "id": "0ee184edc2af38ca"
      },
      "id": "0ee184edc2af38ca",
      "type": "add",
      "after": "bdf54d76a84ff46a",
      "date": 1679502341724
    },
    {
      "id": "0ee184edc2af38ca",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "0cbd06841a788433",
        "0ee184edc2af38ca",
        "60e74ecdab330abb",
        "91e8dabb74c01aca",
        "bdf54d76a84ff46a"
      ],
      "date": 1679502350635
    },
    {
      "id": "60e74ecdab330abb",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "0ee184edc2af38ca",
        "91e8dabb74c01aca",
        "bdf54d76a84ff46a"
      ],
      "date": 1679502357801
    },
    {
      "type": "edit",
      "id": "60e74ecdab330abb",
      "item": {
        "type": "code",
        "id": "60e74ecdab330abb",
        "text": "const WIDTH = 600;\nconst NUM = 10;\nconst R = 20;\n// define atom of NUM random points\nconst db = defAtom([...repeatedly(() => random2([], R, WIDTH - R), NUM)]);\n"
      },
      "date": 1679502363720
    },
    {
      "id": "bdee7b00cd4c7a8f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "bdee7b00cd4c7a8f",
        "text": "The program then defines a clicked variable to keep track of which point is currently being dragged (initialized to -1).\n\n"
      },
      "after": "60e74ecdab330abb",
      "attribution": {
        "page": "2023-03-22"
      },
      "date": 1679502368477
    },
    {
      "id": "11198dff8340dece",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "11198dff8340dece",
        "text": "The $compile function creates an SVG element with width, height, and viewBox attributes, and mouse event handlers for drag-and-drop interaction. The $list function is used to create two reactive lists, one for lines and one for circles, each with a corresponding set of attributes and mouse event handlers.\n\n"
      },
      "after": "0ee184edc2af38ca",
      "attribution": {
        "page": "2023-03-22"
      },
      "date": 1679502393926
    },
    {
      "id": "0c28a449b913b44c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0c28a449b913b44c",
        "text": "To create the line and circle elements, the program uses a combination of the map and indexed functions to transform the array of points into consecutive pairs for lines, and to assign a unique index to each point for circles. The circle and line functions are used to create the corresponding SVG elements for each point pair.\n\nWhen the user clicks on a circle element, it becomes selected, and the mousedown event handler updates the clicked variable with its index. When the user drags a selected circle element, the mousemove event handler updates its position in the reactive atom. When the user releases the mouse button, the mouseup event handler sets clicked back to -1.\n\nOverall, the program creates a simple interactive SVG graph with draggable nodes that can be used for various applications, such as data visualization or interactive art."
      },
      "after": "bdf54d76a84ff46a",
      "attribution": {
        "page": "2023-03-22"
      },
      "date": 1679502454829
    },
    {
      "item": {
        "type": "factory",
        "id": "36b6796b53efae63"
      },
      "id": "36b6796b53efae63",
      "type": "add",
      "after": "0c28a449b913b44c",
      "date": 1679502498118
    },
    {
      "type": "edit",
      "id": "91e8dabb74c01aca",
      "item": {
        "type": "code",
        "id": "91e8dabb74c01aca",
        "text": "$compile(svg({\n    width: WIDTH,\n    height: WIDTH,\n    viewBox: `0 0 ${WIDTH} ${WIDTH}`,\n    // mouse drag & release handlers are on SVG element itself\n    // for better UX when fast dragging\n    onmousemove: (e) => clicked !== -1 && db.resetIn([clicked], [e.clientX, e.clientY]),\n    onmouseup: () => (clicked = -1),\n    // add new point on double click\n    ondblclick: (e) => db.swap((pts) => [...pts, [e.clientX, e.clientY]]),\n}, \n// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n"
      },
      "date": 1679502515052
    },
    {
      "type": "edit",
      "id": "36b6796b53efae63",
      "item": {
        "type": "code",
        "id": "36b6796b53efae63",
        "text": "// update selection & point position in atom on mouse click\n([i, p]) => circle(p, R, {\n    onmousedown: (e) => {\n        clicked = i;\n        db.resetIn([i], [e.clientX, e.clientY]);\n    },\n}), \n// value based equivalence predicate\nequivArrayLike))).mount(document.getElementById(\"output\"));"
      },
      "date": 1679502516654
    },
    {
      "id": "bdf54d76a84ff46a",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "0ee184edc2af38ca",
        "11198dff8340dece",
        "91e8dabb74c01aca",
        "0c28a449b913b44c",
        "36b6796b53efae63",
        "bdf54d76a84ff46a"
      ],
      "date": 1679502522731
    },
    {
      "id": "0c28a449b913b44c",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "0ee184edc2af38ca",
        "11198dff8340dece",
        "91e8dabb74c01aca",
        "36b6796b53efae63",
        "0c28a449b913b44c",
        "bdf54d76a84ff46a"
      ],
      "date": 1679502527097
    },
    {
      "type": "edit",
      "id": "0c28a449b913b44c",
      "item": {
        "type": "paragraph",
        "id": "0c28a449b913b44c",
        "text": "To create the line and circle elements, the program uses a combination of the map and indexed functions to transform the array of points into consecutive pairs for lines, and to assign a unique index to each point for circles. The circle and line functions are used to create the corresponding SVG elements for each point pair.\n\n"
      },
      "date": 1679502535970
    },
    {
      "type": "add",
      "id": "3d2b79b8de993c43",
      "item": {
        "type": "paragraph",
        "id": "3d2b79b8de993c43",
        "text": "When the user clicks on a circle element, it becomes selected, and the mousedown event handler updates the clicked variable with its index. When the user drags a selected circle element, the mousemove event handler updates its position in the reactive atom. When the user releases the mouse button, the mouseup event handler sets clicked back to -1.\n\nOverall, the program creates a simple interactive SVG graph with draggable nodes that can be used for various applications, such as data visualization or interactive art."
      },
      "after": "0c28a449b913b44c",
      "date": 1679502536554
    },
    {
      "id": "0c28a449b913b44c",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "5396a0b4e33715c0",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "0ee184edc2af38ca",
        "11198dff8340dece",
        "91e8dabb74c01aca",
        "0c28a449b913b44c",
        "36b6796b53efae63",
        "3d2b79b8de993c43",
        "bdf54d76a84ff46a"
      ],
      "date": 1679502543542
    },
    {
      "type": "edit",
      "id": "3d2b79b8de993c43",
      "item": {
        "type": "paragraph",
        "id": "3d2b79b8de993c43",
        "text": "When the user clicks on a circle element, it becomes selected, and the mousedown event handler updates the clicked variable with its index. When the user drags a selected circle element, the mousemove event handler updates its position in the reactive atom. When the user releases the mouse button, the mouseup event handler sets clicked back to -1.\n\n"
      },
      "date": 1679502550501
    },
    {
      "type": "add",
      "id": "bffc0c9dee4cb5a6",
      "item": {
        "type": "paragraph",
        "id": "bffc0c9dee4cb5a6",
        "text": "Overall, the program creates a simple interactive SVG graph with draggable nodes that can be used for various applications, such as data visualization or interactive art."
      },
      "after": "3d2b79b8de993c43",
      "date": 1679502551138
    },
    {
      "type": "remove",
      "id": "0ee184edc2af38ca",
      "date": 1679502606523
    },
    {
      "id": "5396a0b4e33715c0",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "11198dff8340dece",
        "5396a0b4e33715c0",
        "91e8dabb74c01aca",
        "0c28a449b913b44c",
        "36b6796b53efae63",
        "3d2b79b8de993c43",
        "bffc0c9dee4cb5a6",
        "bdf54d76a84ff46a"
      ],
      "date": 1679502623606
    },
    {
      "id": "11198dff8340dece",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "5396a0b4e33715c0",
        "11198dff8340dece",
        "91e8dabb74c01aca",
        "0c28a449b913b44c",
        "36b6796b53efae63",
        "3d2b79b8de993c43",
        "bffc0c9dee4cb5a6",
        "bdf54d76a84ff46a"
      ],
      "date": 1679502633879
    },
    {
      "item": {
        "type": "code",
        "id": "280017167942d56d",
        "text": "// ID of currently dragged point\nlet clicked = -1;\n"
      },
      "id": "280017167942d56d",
      "type": "add",
      "after": "bdf54d76a84ff46a",
      "date": 1679502730303
    },
    {
      "id": "280017167942d56d",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "280017167942d56d",
        "5396a0b4e33715c0",
        "11198dff8340dece",
        "91e8dabb74c01aca",
        "0c28a449b913b44c",
        "36b6796b53efae63",
        "3d2b79b8de993c43",
        "bffc0c9dee4cb5a6",
        "bdf54d76a84ff46a"
      ],
      "date": 1679502738343
    },
    {
      "type": "edit",
      "id": "280017167942d56d",
      "item": {
        "type": "code",
        "id": "280017167942d56d",
        "text": "// ID of currently dragged point\nlet clicked = -1;\n"
      },
      "date": 1679502741255
    },
    {
      "type": "edit",
      "id": "11198dff8340dece",
      "item": {
        "type": "paragraph",
        "id": "11198dff8340dece",
        "text": "The $compile function creates an SVG element with width, height, and viewBox attributes to be displayed in the frame above, and mouse event handlers for drag-and-drop interaction. "
      },
      "date": 1679502810053
    },
    {
      "type": "add",
      "id": "7c14437485c60cf5",
      "item": {
        "type": "paragraph",
        "id": "7c14437485c60cf5",
        "text": "The $list function is used to create two reactive lists, one for lines and one for circles, each with a corresponding set of attributes and mouse event handlers.\n\n"
      },
      "after": "11198dff8340dece",
      "date": 1679502811763
    },
    {
      "id": "bffc0c9dee4cb5a6",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "280017167942d56d",
        "5396a0b4e33715c0",
        "11198dff8340dece",
        "7c14437485c60cf5",
        "91e8dabb74c01aca",
        "0c28a449b913b44c",
        "36b6796b53efae63",
        "3d2b79b8de993c43",
        "bdf54d76a84ff46a",
        "bffc0c9dee4cb5a6"
      ],
      "date": 1679502824258
    },
    {
      "id": "3d2b79b8de993c43",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "280017167942d56d",
        "5396a0b4e33715c0",
        "11198dff8340dece",
        "7c14437485c60cf5",
        "91e8dabb74c01aca",
        "0c28a449b913b44c",
        "3d2b79b8de993c43",
        "36b6796b53efae63",
        "bdf54d76a84ff46a",
        "bffc0c9dee4cb5a6"
      ],
      "date": 1679502829791
    },
    {
      "item": {
        "type": "code",
        "id": "13d464f27ff39579",
        "text": "// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n"
      },
      "id": "13d464f27ff39579",
      "type": "add",
      "after": "bffc0c9dee4cb5a6",
      "date": 1679502860302
    },
    {
      "id": "13d464f27ff39579",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "280017167942d56d",
        "5396a0b4e33715c0",
        "11198dff8340dece",
        "7c14437485c60cf5",
        "13d464f27ff39579",
        "91e8dabb74c01aca",
        "0c28a449b913b44c",
        "3d2b79b8de993c43",
        "36b6796b53efae63",
        "bdf54d76a84ff46a",
        "bffc0c9dee4cb5a6"
      ],
      "date": 1679502865816
    },
    {
      "id": "91e8dabb74c01aca",
      "type": "move",
      "order": [
        "d43e58c831c65a5e",
        "efa4727f75dbd37a",
        "b465cd9a1c52e801",
        "0cbd06841a788433",
        "60e74ecdab330abb",
        "bdee7b00cd4c7a8f",
        "280017167942d56d",
        "5396a0b4e33715c0",
        "11198dff8340dece",
        "91e8dabb74c01aca",
        "7c14437485c60cf5",
        "13d464f27ff39579",
        "0c28a449b913b44c",
        "3d2b79b8de993c43",
        "36b6796b53efae63",
        "bdf54d76a84ff46a",
        "bffc0c9dee4cb5a6"
      ],
      "date": 1679502879204
    },
    {
      "type": "edit",
      "id": "91e8dabb74c01aca",
      "item": {
        "type": "code",
        "id": "91e8dabb74c01aca",
        "text": "$compile(svg({\n    width: WIDTH,\n    height: WIDTH,\n    viewBox: `0 0 ${WIDTH} ${WIDTH}`,\n    // mouse drag & release handlers are on SVG element itself\n    // for better UX when fast dragging\n    onmousemove: (e) => clicked !== -1 && db.resetIn([clicked], [e.clientX, e.clientY]),\n    onmouseup: () => (clicked = -1),\n    // add new point on double click\n    ondblclick: (e) => db.swap((pts) => [...pts, [e.clientX, e.clientY]]),\n}, "
      },
      "date": 1679502892171
    },
    {
      "type": "edit",
      "id": "13d464f27ff39579",
      "item": {
        "type": "code",
        "id": "13d464f27ff39579",
        "text": "// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n"
      },
      "date": 1679502893689
    },
    {
      "type": "edit",
      "id": "13d464f27ff39579",
      "item": {
        "type": "code",
        "id": "13d464f27ff39579",
        "text": "// reactive \"list\" of lines\n$list(\n// transform atom view into consecutive pairs:\n// e.g. [a,b,c,d] => [[a,b],[b,c],[c,d]]\nfromAtom(db).map((pts) => [...partition(2, 1, pts)]), \n// list wrapper element & its attribs\n\"g\", { stroke: \"#00f\" }, \n// list item constructor (here an SVG line)\n([a, b]) => line(a, b), \n// value based equivalence predicate\n// applied to raw values from stream (here point pairs)\n// item ctors are only called if predicate returns false\nequivArrayLike), \n// reactive list of circles\n$list(\n// transform atom view to label each point with its array index\n// (needed to determine point selection in mouse event handler)\nfromAtom(db).map((pts) => [...indexed(0, pts)]), \n// list wrapper element & its attribs\n\"g\", { fill: \"#00f\" }, \n// list items here are SVG circles\n"
      },
      "date": 1679502897480
    },
    {
      "type": "edit",
      "id": "11198dff8340dece",
      "item": {
        "type": "paragraph",
        "id": "11198dff8340dece",
        "text": "The $compile function creates an SVG element with width, height, and viewBox attributes to be displayed in the frame above, and mouse event handlers for drag-and-drop interaction. "
      },
      "date": 1679503063255
    },
    {
      "type": "fork",
      "date": 1679503313190
    },
    {
      "type": "edit",
      "id": "b465cd9a1c52e801",
      "item": {
        "type": "code",
        "id": "b465cd9a1c52e801",
        "text": "import { defAtom } from \"https://esm.run/@thi.ng/atom\";\nimport { equivArrayLike } from \"https://esm.run/@thi.ng/equiv\";\nimport { circle, line, svg } from \"https://esm.run/@thi.ng/hiccup-svg\";\nimport { $compile, $list } from \"https://esm.run/@thi.ng/rdom\";\nimport { fromAtom } from \"https://esm.run/@thi.ng/rstream\";\nimport { indexed, partition, repeatedly } from \"https://esm.run/@thi.ng/transducers\";\nimport { random2 } from \"https://cdn.skypack.dev/@thi.ng/vectors\";"
      },
      "date": 1713456456484
    },
    {
      "id": "4863c42f1928fc1b",
      "type": "add",
      "item": {
        "type": "html",
        "id": "4863c42f1928fc1b",
        "text": "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"179.367\" height=\"61.313\" viewBox=\"0 3.715312500000003 179.3671875 61.31250000000001\" stroke=\"none\"><style>path { fill: #333; } @media (prefers-color-scheme: dark) { path { fill: #ccc; } }</style><path d=\"M0 47.520L7.031 47.520C10.469 35.817 13.986 24.193 17.367 12.434L19.969 3.715L12.938 3.715L10.336 12.434L4.711 12.434L3.445 16.864L9.070 16.864Z\"/><path d=\"M18.281 47.520L25.313 47.520C27.919 38.759 30.449 29.922 33.117 21.223L23.977 21.223L29.109 3.715L22.078 3.715C19.919 11.002 17.838 18.366 15.609 25.583L9.141 47.520L16.172 47.520L22.641 25.583L24.750 25.583Z\"/><path d=\"M44.508 13.454C44.489 11.502 42.949 9.973 40.992 9.973C39.023 9.973 37.477 11.520 37.477 13.489C37.477 15.387 39.023 16.934 40.992 16.934C42.949 16.934 44.489 15.406 44.508 13.454C44.508 13.442 44.508 13.430 44.508 13.418ZM27.422 47.520L34.453 47.520L42.258 21.223L35.227 21.223Z\"/><path d=\"M44.578 44.145C44.578 42.176 43.031 40.629 41.063 40.629C39.164 40.629 37.617 42.176 37.617 44.145C37.617 46.114 39.164 47.661 41.133 47.661C43.102 47.661 44.648 46.114 44.648 44.145Z\"/><path d=\"M54.844 47.520L61.875 47.520C64.481 38.759 67.012 29.922 69.680 21.223L53.508 21.223C50.839 29.922 48.310 38.760 45.703 47.520L52.734 47.520L59.203 25.583L61.313 25.583Z\"/><path d=\"M58.781 65.028L74.953 65.028C78.918 51.954 82.725 38.721 86.625 25.583L87.961 21.223L71.789 21.223C69.121 29.922 66.591 38.760 63.984 47.520L71.016 47.520L77.484 25.583L79.594 25.583L69.258 60.668L67.148 60.668L68.414 56.309L61.383 56.309C60.544 59.244 59.677 62.150 58.781 65.028Z\"/><path d=\"M77.063 65.028L84.094 65.028L102.234 3.715L95.203 3.715Z\"/><path d=\"M105.750 30.012L112.781 30.012C113.612 27.046 114.479 24.116 115.383 21.223L99.211 21.223C96.543 29.922 94.013 38.760 91.406 47.520L98.438 47.520L104.906 25.583L107.016 25.583Z\"/><path d=\"M109.688 47.520L125.859 47.520C130.136 32.883 134.489 18.322 138.797 3.715L131.766 3.715L120.094 43.161L117.984 43.161L124.523 21.223L117.492 21.223C114.894 29.992 112.245 38.710 109.688 47.520Z\"/><path d=\"M127.969 47.520L144.141 47.520C146.266 40.176 148.455 32.896 150.609 25.583L151.945 21.223L135.773 21.223C133.537 28.479 131.416 35.851 129.234 43.161ZM143.578 25.583L138.375 43.161L136.266 43.161L141.469 25.583Z\"/><path d=\"M164.531 47.520L171.563 47.520C174.169 38.759 176.699 29.922 179.367 21.223L154.055 21.223C151.386 29.922 148.857 38.760 146.250 47.520L153.281 47.520L159.750 25.583L161.859 25.583L155.391 47.520L162.422 47.520L168.891 25.583L171 25.583Z\"/></svg>"
      },
      "after": "d43e58c831c65a5e",
      "attribution": {
        "page": "rdom"
      },
      "date": 1713456605755
    },
    {
      "type": "edit",
      "id": "5396a0b4e33715c0",
      "item": {
        "type": "frame",
        "id": "5396a0b4e33715c0",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 256"
      },
      "date": 1713456775094
    },
    {
      "type": "edit",
      "id": "b465cd9a1c52e801",
      "item": {
        "type": "code",
        "id": "b465cd9a1c52e801",
        "text": "import { defAtom } from \"https://esm.run/@thi.ng/atom\";\nimport { equivArrayLike } from \"https://esm.run/@thi.ng/equiv\";\nimport { circle, line, svg } from \"https://esm.run/@thi.ng/hiccup-svg\";\nimport { $compile, $list } from \"https://esm.run/@thi.ng/rdom\";\nimport { fromAtom } from \"https://esm.run/@thi.ng/rstream\";\nimport { indexed, partition, repeatedly } from \"https://esm.run/@thi.ng/transducers\";\nimport { random2 } from \"https://esm.run/@thi.ng/vectors\";"
      },
      "date": 1713457213242
    },
    {
      "type": "edit",
      "id": "b465cd9a1c52e801",
      "item": {
        "type": "code",
        "id": "b465cd9a1c52e801",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { equivArrayLike } from 'https://esm.run/@thi.ng/equiv';\nimport { circle, line, svg } from 'https://esm.run/@thi.ng/hiccup-svg';\nimport { $compile, $list } from 'https://esm.run/@thi.ng/rdom';\nimport { fromAtom } from 'https://esm.run/@thi.ng/rstream';\nimport { indexed, partition, repeatedly } from \"https://esm.run/@thi.ng/transducers\";\nimport { random2 } from \"https://esm.run/@thi.ng/vectors\";"
      },
      "date": 1713457378473
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713518148545
    }
  ]
}