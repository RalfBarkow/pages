{
  "title": "Spaghetti Code",
  "story": [
    {
      "type": "html",
      "text": "Code in which control flow is tangled up like Spaghetti.",
      "id": "5ffcb4aacea229ee27ca227d7219199a"
    },
    {
      "type": "markdown",
      "text": "> ...and one of those things that \"everybody else does.\"",
      "id": "794bf7a7462f946dbf041e4300210f56"
    },
    {
      "type": "html",
      "text": "\nFor a more \"scientific\", pattern-based approach to pasta, see the \"[[Big Ball Of Mud]]\" development model in [[Pattern Languages Of Program Design]] v4.0. The same article is available online at [http://www.laputan.org/mud/mud.html www.laputan.org].",
      "id": "8fd4f4b1161c0e8af11be192ab4044b9"
    },
    {
      "type": "markdown",
      "text": "- [[Spaghetti Code]]: unstructured and intertwined code\n- [[Ravioli Code]]: lots and lot of little code modules/objects\n- [[Lasagna Code]]: a layered approach\n- [[Cous Cous Code]]\n- [http://www.catb.org/~esr/jargon/html/S/spaghetti-code.html catb.org]",
      "id": "78bec7dec651b7294c3585cb9897f2be"
    },
    {
      "type": "html",
      "text": "<i>Not quite as bad as [[Chinese Noodle Code]] or [[Ramen Code]].</i> But worse than [[Macaroni Code]]....",
      "id": "cfdea310ca0072d6fd68f15d91c79397"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "The term [[Spaghetti Code]] came into vogue with the invention of block structured programming languages - languages with if and while statements that executed blocks of code delimited with begin and end statements (or punctuation).",
      "id": "d68ee5327f6f0715e6f50182c0da3b49"
    },
    {
      "type": "html",
      "text": "\n[[Niklaus Wirth]] proved that anything that could be coded could be coded as nested blocks controlled by \"if\" constructs and \"while\" constricts, and championed the idea that things <i>should</i> be coded in this way. That is, your if-goto statments should not branch just anywhere, but should respect a block structure of the code. Code that did not was \"spaghetti code\".",
      "id": "2e8c16aeb7c843d3bdbd87a06652dee1"
    },
    {
      "type": "html",
      "text": "\nThen they invented ALGOL-60 and the other block structured languages, which formalised this idea of structuring your code. Kids these days are brought up with structured programming languages and don't know how bad we had it. Original BASIC, anyone?",
      "id": "04c33f88283b6c20c1fd7723d3bbac1c"
    },
    {
      "type": "html",
      "text": "-- [[Paul Murray]]",
      "id": "21d1c2fcda42a84b638d0fdbb643028c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "Does anyone else get the feeling that [[Hyper Text]] and URLs in web-based IT applications tend to become the Web designers' version of [[Spaghetti Code]]?",
      "id": "d243c6575a9fa1e15424c92953e3c0f7"
    },
    {
      "type": "html",
      "text": "\nYes! Every time I do [[Active Server Pages]]. It seems like it's going back 20 years. -- sg",
      "id": "7faf71c6999f42ebbd8751bdb545aacf"
    },
    {
      "type": "html",
      "text": "\nYou should take a look at recent Smalltalk and Scheme web-services frameworks. By using continuations to model web interactions, it is possible (and easy) to separate displaying and logic on web applications: [http://citeseer.nj.nec.com/graunke01automatically.html citeseer.nj.nec.com]",
      "id": "438fce56e89f30dcd99ecdbc121167fa"
    },
    {
      "type": "html",
      "text": "\nTo quote the Seaside webpage ([http://www.beta4.com/seaside2/ www.beta4.com]):",
      "id": "116a236c3421fabb6999d2ed46777045"
    },
    {
      "type": "html",
      "text": "<i>Its most unique feature is its approach to session management: unlike servlet models which require a separate handler for each page or request, Seaside models an entire user session as a continuous piece of code, with natural, linear control flow - pages can call and return to each other like subroutines, complex sequences of forms can be managed from a single method, objects are passed by reference rather than marshalled into URLs or hidden fields - while fully supporting the backtracking and parallelism inherent to the web browser.</i>",
      "id": "d74b8d73b440875ba7eac1a542257578"
    },
    {
      "type": "html",
      "text": "(Perhaps this should be moved to a different page?)",
      "id": "d603de9129275479821c3797212ff420"
    },
    {
      "type": "html",
      "text": "-- [[Carlos Scheidegger]]",
      "id": "560e54d89c9bf1e76af9cdb2a59fe7cf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "Also known as Cpaghe++i code.  [[[Drive By Slander]] alert]",
      "id": "a6e53395cccfa1c956141c37b1aed15a"
    },
    {
      "type": "html",
      "text": "<i>Yes, spoken like a true Java weenie. We Know Who You Are.</i>",
      "id": "3346b4b642fcc80258d87dc6169d48db"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "Q. Who first introduced spaghetti code to the West?",
      "id": "f3ec8445a06ef44a6874bd62fa25df67"
    },
    {
      "type": "html",
      "text": "\nA. Macro Polo.",
      "id": "ed0b523da23362867e828fc51dd59068"
    },
    {
      "type": "html",
      "text": "--[[Andrew Koenig]]",
      "id": "55f61d9a84453cb8dc9928f55ecea192"
    },
    {
      "type": "html",
      "text": "<i>[[Worst Pun Ever]]  (also an anagram away from \"Macro Loop\")</i>",
      "id": "800bdd3de4749f740695a0b23ef4c622"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "\nSometimes this term refers to the use of [[Go To]]s. However, sometimes it is used to describe code that one finds hard to read or grok. Outside of [[Go To]] usage, there is no clear consensus definition or criteria that one can use to measure \"spaghettiness\". As somebody joked above, spaghetti code often is all code that is not our own because it was generated by minds that think differently than us.  Calling somebody else's code spaghetti code is almost a sure way to start a [[Flame War]]. Thus, it is recommended that you provide something more specific, such as \"needs more descriptive variables\", \"factor these repeating parts into function calls\", etc.",
      "id": "d3a3d609af5543b8b465709eae1926a0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "Overuse of callback listeners... ",
      "id": "33e3dd6a51c1c2e044a46cc07bffa508"
    },
    {
      "type": "html",
      "text": "for (Listener l :<br>listeners) //Anyone and everyone.",
      "id": "1df8293c3db918b461da76aab3dd7fac"
    },
    {
      "type": "code",
      "text": "    l.somethingHappened(); //Where does this go? Fire up the debugger.",
      "id": "e34b50c2c8317c22293eeadfb4ed2d3e"
    },
    {
      "type": "html",
      "text": "...can create [[Spaghetti Code]]. This is essentially [[Dynamic Spaghetti Code]], as an indeterminate number of \"lines\" can register themselves to be called from an indeterminate number of \"gotos\". The price of decoupling, I guess.",
      "id": "723f4088d7f7a71b65bfdd6d31afb9d6"
    },
    {
      "type": "html",
      "text": "<i>I see nothing wrong with a widget handling it's own events in most apps. Listeners seem silly in that regard, at least as the primary option/tool. (There's a discussion around here somewhere related.)</i>",
      "id": "1b6e2c2a16748f57af83d8e7ebaa1572"
    },
    {
      "type": "html",
      "text": "[In most properly-designed GUI applications, a given widget does handle its own events.  Listeners, however, allow you to decouple widgets from the environment in which they are manipulated.  This is useful for creating (for example) interactive GUI design tools that allow the designer to dynamically interact with live, working widgets -- perhaps populated with real data -- as the GUI is being built, without having to explicitly code the widgets to work with the GUI builder.  They also allow you to write code that subscribes to a given event from a large quantity of widgets (such as detecting when an end-user has updated a complex form) without having to explicitly code each widget to broadcast or announce that the end-user has manipulated it.  Thus, Listeners can reduce [[Spaghetti Code]].]",
      "id": "2f19fda67b853cef48005aee19f1296b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "image",
      "url": "http://imgs.xkcd.com/comics/goto.png",
      "text": "imgs.xkcd.com",
      "id": "012bb5a1016a63fa414c32a7d1466ba0"
    },
    {
      "type": "html",
      "text": "",
      "id": "1e473a19466a486aa540a5c1dd1e3dc9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "\nOther instances of [[Spaghetti Code]] can include",
      "id": "96477859d27b381ecad74b1f9e6b01b5"
    },
    {
      "type": "html",
      "text": " overuse of events (excessive listeners - difficult to discern which listener is breaking your code)",
      "id": "59fbb3ed3c9f74e38c926cdfc63f1136"
    },
    {
      "type": "html",
      "text": " overuse of abstractions and interfaces (no way to tell which concrete instance is being instantiated without debugging, and even then, the code path in one's own environment might not be the one that broke in production or QA)",
      "id": "380cba0d5e31bd954efd16d2caab403a"
    },
    {
      "type": "html",
      "text": " excessive dependency upon config files (slight changes can drastically alter behavior in unexpected ways)",
      "id": "68b8afd637bc9a75fd284911807148b7"
    },
    {
      "type": "html",
      "text": "\nAll of the above are based on good design patterns.  These patterns are intended to be used in specific ways, and it's always possible to use them in such a way that they cause unpredictable results, sending the thread through nigh-chaotic paths through one's code.",
      "id": "4fb33f36d353c451f3e24c97b46ae00e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "See also:",
      "id": "1f7efadc0cb887ca95ec97fea7e9cacd"
    },
    {
      "type": "html",
      "text": " [[Pasta Code]]",
      "id": "9e7ba9612ec728970b54073103c59409"
    },
    {
      "type": "html",
      "text": " See picture (with wires) at [[Extremely Interstrangled]]",
      "id": "8ccd986860574fc53406810190bd36b4"
    },
    {
      "type": "html",
      "text": " [[Ravioli Code]]",
      "id": "6d00667acd3b1d1205e8ce634ebf1937"
    },
    {
      "type": "html",
      "text": " [[[http://www.website.com www.website.com] | anchor text]]",
      "id": "afe79f4c4a6d816a6117b9bac38c5080"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c08e9b0fa6106aa4f9238316855423f8"
    },
    {
      "type": "html",
      "text": "[[Category Jargon]] [[Category Development Anti Pattern]] [[Category Branching And Flow]]",
      "id": "e82f6295f20bd38ffe19e7d96f7c6da4"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SpaghettiCode c2.com]",
      "id": "7001b1f394cde20988a8c04e7b253177"
    }
  ],
  "journal": [
    {
      "date": 1389375858000,
      "id": "2e676c8530e95b164aa5ca6ec2fdfacd",
      "type": "create",
      "item": {
        "title": "Spaghetti Code",
        "story": [
          {
            "type": "html",
            "text": "Code in which control flow is tangled up like Spaghetti.",
            "id": "5ffcb4aacea229ee27ca227d7219199a"
          },
          {
            "type": "html",
            "text": "<i>...and one of those things that \"everybody else does.\"</i>",
            "id": "794bf7a7462f946dbf041e4300210f56"
          },
          {
            "type": "html",
            "text": "\nFor a more \"scientific\", pattern-based approach to pasta, see the \"[[Big Ball Of Mud]]\" development model in [[Pattern Languages Of Program Design]] v4.0. The same article is available online at [http://www.laputan.org/mud/mud.html www.laputan.org].",
            "id": "8fd4f4b1161c0e8af11be192ab4044b9"
          },
          {
            "type": "html",
            "text": "\nSee also: [http://www.catb.org/~esr/jargon/html/S/spaghetti-code.html www.catb.org]",
            "id": "78bec7dec651b7294c3585cb9897f2be"
          },
          {
            "type": "html",
            "text": "\nThe opposite of [[Ravioli Code]].",
            "id": "b01b7ad0230f027c4de7a9c4d12c3122"
          },
          {
            "type": "html",
            "text": "<i>Not quite as bad as [[Chinese Noodle Code]] or [[Ramen Code]].</i> But worse than [[Macaroni Code]]....",
            "id": "cfdea310ca0072d6fd68f15d91c79397"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "The term [[Spaghetti Code]] came into vogue with the invention of block structured programming languages - languages with if and while statements that executed blocks of code delimited with begin and end statements (or punctuation).",
            "id": "d68ee5327f6f0715e6f50182c0da3b49"
          },
          {
            "type": "html",
            "text": "\n[[Niklaus Wirth]] proved that anything that could be coded could be coded as nested blocks controlled by \"if\" constructs and \"while\" constricts, and championed the idea that things <i>should</i> be coded in this way. That is, your if-goto statments should not branch just anywhere, but should respect a block structure of the code. Code that did not was \"spaghetti code\".",
            "id": "2e8c16aeb7c843d3bdbd87a06652dee1"
          },
          {
            "type": "html",
            "text": "\nThen they invented ALGOL-60 and the other block structured languages, which formalised this idea of structuring your code. Kids these days are brought up with structured programming languages and don't know how bad we had it. Original BASIC, anyone?",
            "id": "04c33f88283b6c20c1fd7723d3bbac1c"
          },
          {
            "type": "html",
            "text": "-- [[Paul Murray]]",
            "id": "21d1c2fcda42a84b638d0fdbb643028c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "Does anyone else get the feeling that [[Hyper Text]] and URLs in web-based IT applications tend to become the Web designers' version of [[Spaghetti Code]]?",
            "id": "d243c6575a9fa1e15424c92953e3c0f7"
          },
          {
            "type": "html",
            "text": "\nYes! Every time I do [[Active Server Pages]]. It seems like it's going back 20 years. -- sg",
            "id": "7faf71c6999f42ebbd8751bdb545aacf"
          },
          {
            "type": "html",
            "text": "\nYou should take a look at recent Smalltalk and Scheme web-services frameworks. By using continuations to model web interactions, it is possible (and easy) to separate displaying and logic on web applications: [http://citeseer.nj.nec.com/graunke01automatically.html citeseer.nj.nec.com]",
            "id": "438fce56e89f30dcd99ecdbc121167fa"
          },
          {
            "type": "html",
            "text": "\nTo quote the Seaside webpage ([http://www.beta4.com/seaside2/ www.beta4.com]):",
            "id": "116a236c3421fabb6999d2ed46777045"
          },
          {
            "type": "html",
            "text": "<i>Its most unique feature is its approach to session management: unlike servlet models which require a separate handler for each page or request, Seaside models an entire user session as a continuous piece of code, with natural, linear control flow - pages can call and return to each other like subroutines, complex sequences of forms can be managed from a single method, objects are passed by reference rather than marshalled into URLs or hidden fields - while fully supporting the backtracking and parallelism inherent to the web browser.</i>",
            "id": "d74b8d73b440875ba7eac1a542257578"
          },
          {
            "type": "html",
            "text": "(Perhaps this should be moved to a different page?)",
            "id": "d603de9129275479821c3797212ff420"
          },
          {
            "type": "html",
            "text": "-- [[Carlos Scheidegger]]",
            "id": "560e54d89c9bf1e76af9cdb2a59fe7cf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "Also known as Cpaghe++i code.  [[[Drive By Slander]] alert]",
            "id": "a6e53395cccfa1c956141c37b1aed15a"
          },
          {
            "type": "html",
            "text": "<i>Yes, spoken like a true Java weenie. We Know Who You Are.</i>",
            "id": "3346b4b642fcc80258d87dc6169d48db"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "Q. Who first introduced spaghetti code to the West?",
            "id": "f3ec8445a06ef44a6874bd62fa25df67"
          },
          {
            "type": "html",
            "text": "\nA. Macro Polo.",
            "id": "ed0b523da23362867e828fc51dd59068"
          },
          {
            "type": "html",
            "text": "--[[Andrew Koenig]]",
            "id": "55f61d9a84453cb8dc9928f55ecea192"
          },
          {
            "type": "html",
            "text": "<i>[[Worst Pun Ever]]  (also an anagram away from \"Macro Loop\")</i>",
            "id": "800bdd3de4749f740695a0b23ef4c622"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "\nSometimes this term refers to the use of [[Go To]]s. However, sometimes it is used to describe code that one finds hard to read or grok. Outside of [[Go To]] usage, there is no clear consensus definition or criteria that one can use to measure \"spaghettiness\". As somebody joked above, spaghetti code often is all code that is not our own because it was generated by minds that think differently than us.  Calling somebody else's code spaghetti code is almost a sure way to start a [[Flame War]]. Thus, it is recommended that you provide something more specific, such as \"needs more descriptive variables\", \"factor these repeating parts into function calls\", etc.",
            "id": "d3a3d609af5543b8b465709eae1926a0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "Overuse of callback listeners... ",
            "id": "33e3dd6a51c1c2e044a46cc07bffa508"
          },
          {
            "type": "html",
            "text": "for (Listener l :<br>listeners) //Anyone and everyone.",
            "id": "1df8293c3db918b461da76aab3dd7fac"
          },
          {
            "type": "code",
            "text": "    l.somethingHappened(); //Where does this go? Fire up the debugger.",
            "id": "e34b50c2c8317c22293eeadfb4ed2d3e"
          },
          {
            "type": "html",
            "text": "...can create [[Spaghetti Code]]. This is essentially [[Dynamic Spaghetti Code]], as an indeterminate number of \"lines\" can register themselves to be called from an indeterminate number of \"gotos\". The price of decoupling, I guess.",
            "id": "723f4088d7f7a71b65bfdd6d31afb9d6"
          },
          {
            "type": "html",
            "text": "<i>I see nothing wrong with a widget handling it's own events in most apps. Listeners seem silly in that regard, at least as the primary option/tool. (There's a discussion around here somewhere related.)</i>",
            "id": "1b6e2c2a16748f57af83d8e7ebaa1572"
          },
          {
            "type": "html",
            "text": "[In most properly-designed GUI applications, a given widget does handle its own events.  Listeners, however, allow you to decouple widgets from the environment in which they are manipulated.  This is useful for creating (for example) interactive GUI design tools that allow the designer to dynamically interact with live, working widgets -- perhaps populated with real data -- as the GUI is being built, without having to explicitly code the widgets to work with the GUI builder.  They also allow you to write code that subscribes to a given event from a large quantity of widgets (such as detecting when an end-user has updated a complex form) without having to explicitly code each widget to broadcast or announce that the end-user has manipulated it.  Thus, Listeners can reduce [[Spaghetti Code]].]",
            "id": "2f19fda67b853cef48005aee19f1296b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "image",
            "url": "http://imgs.xkcd.com/comics/goto.png",
            "text": "imgs.xkcd.com",
            "id": "012bb5a1016a63fa414c32a7d1466ba0"
          },
          {
            "type": "html",
            "text": "",
            "id": "1e473a19466a486aa540a5c1dd1e3dc9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "\nOther instances of [[Spaghetti Code]] can include",
            "id": "96477859d27b381ecad74b1f9e6b01b5"
          },
          {
            "type": "html",
            "text": " overuse of events (excessive listeners - difficult to discern which listener is breaking your code)",
            "id": "59fbb3ed3c9f74e38c926cdfc63f1136"
          },
          {
            "type": "html",
            "text": " overuse of abstractions and interfaces (no way to tell which concrete instance is being instantiated without debugging, and even then, the code path in one's own environment might not be the one that broke in production or QA)",
            "id": "380cba0d5e31bd954efd16d2caab403a"
          },
          {
            "type": "html",
            "text": " excessive dependency upon config files (slight changes can drastically alter behavior in unexpected ways)",
            "id": "68b8afd637bc9a75fd284911807148b7"
          },
          {
            "type": "html",
            "text": "\nAll of the above are based on good design patterns.  These patterns are intended to be used in specific ways, and it's always possible to use them in such a way that they cause unpredictable results, sending the thread through nigh-chaotic paths through one's code.",
            "id": "4fb33f36d353c451f3e24c97b46ae00e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "See also:",
            "id": "1f7efadc0cb887ca95ec97fea7e9cacd"
          },
          {
            "type": "html",
            "text": " [[Pasta Code]]",
            "id": "9e7ba9612ec728970b54073103c59409"
          },
          {
            "type": "html",
            "text": " See picture (with wires) at [[Extremely Interstrangled]]",
            "id": "8ccd986860574fc53406810190bd36b4"
          },
          {
            "type": "html",
            "text": " [[Ravioli Code]]",
            "id": "6d00667acd3b1d1205e8ce634ebf1937"
          },
          {
            "type": "html",
            "text": " [[[http://www.website.com www.website.com] | anchor text]]",
            "id": "afe79f4c4a6d816a6117b9bac38c5080"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c08e9b0fa6106aa4f9238316855423f8"
          },
          {
            "type": "html",
            "text": "[[Category Jargon]] [[Category Development Anti Pattern]] [[Category Branching And Flow]]",
            "id": "e82f6295f20bd38ffe19e7d96f7c6da4"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SpaghettiCode c2.com]",
            "id": "7001b1f394cde20988a8c04e7b253177"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "code.sfw.c2.com",
      "date": 1629283553003
    },
    {
      "type": "edit",
      "id": "794bf7a7462f946dbf041e4300210f56",
      "item": {
        "type": "factory",
        "text": "> ...and one of those things that \"everybody else does.\"</i>",
        "id": "794bf7a7462f946dbf041e4300210f56"
      },
      "date": 1629283598484
    },
    {
      "type": "edit",
      "id": "794bf7a7462f946dbf041e4300210f56",
      "item": {
        "type": "markdown",
        "text": "> ...and one of those things that \"everybody else does.\"",
        "id": "794bf7a7462f946dbf041e4300210f56"
      },
      "date": 1629283606629
    },
    {
      "type": "edit",
      "id": "78bec7dec651b7294c3585cb9897f2be",
      "item": {
        "type": "html",
        "text": "-  [[Spaghetti Code]]: unstructured and intertwined code\n- [[Ravioli Code]]: lots and lot of little code modules/objects\n- [[Lasagna Code]]: a layered approach\n- [[Cous Cous Code]]\n\nSee also: [http://www.catb.org/~esr/jargon/html/S/spaghetti-code.html www.catb.org]",
        "id": "78bec7dec651b7294c3585cb9897f2be"
      },
      "date": 1629283672157
    },
    {
      "type": "edit",
      "id": "78bec7dec651b7294c3585cb9897f2be",
      "item": {
        "type": "markdown",
        "text": "- [[Spaghetti Code]]: unstructured and intertwined code\n- [[Ravioli Code]]: lots and lot of little code modules/objects\n- [[Lasagna Code]]: a layered approach\n- [[Cous Cous Code]]\n\nSee also: [http://www.catb.org/~esr/jargon/html/S/spaghetti-code.html www.catb.org]",
        "id": "78bec7dec651b7294c3585cb9897f2be"
      },
      "date": 1629283686192
    },
    {
      "type": "edit",
      "id": "78bec7dec651b7294c3585cb9897f2be",
      "item": {
        "type": "markdown",
        "text": "- [[Spaghetti Code]]: unstructured and intertwined code\n- [[Ravioli Code]]: lots and lot of little code modules/objects\n- [[Lasagna Code]]: a layered approach\n- [[Cous Cous Code]]\n- [http://www.catb.org/~esr/jargon/html/S/spaghetti-code.html catb.org]",
        "id": "78bec7dec651b7294c3585cb9897f2be"
      },
      "date": 1629283710848
    },
    {
      "type": "remove",
      "id": "b01b7ad0230f027c4de7a9c4d12c3122",
      "date": 1629283715899
    },
    {
      "type": "fork",
      "site": "handler.livecode.world",
      "date": 1629451344448
    }
  ]
}