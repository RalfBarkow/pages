{
  "title": "Fizz Buzz Revisited",
  "story": [
    {
      "type": "paragraph",
      "id": "2b22afc646d829f3",
      "text": "My mind wandered after browsing Alain Marty's recent post on the derivation of all things computationally useful from lambda. [http://lambdaway.free.fr/lambdawalks/?view=fromroots2canopy lambdaway]"
    },
    {
      "type": "paragraph",
      "id": "61dc3d597654acad",
      "text": "The appendix offered two dozen related links wherein I chose \"whiteboard problems\" that included [[Fizz Buzz]] written in lambda calculus. [https://www.jtolio.com/2017/03/whiteboard-problems-in-pure-lambda-calculus/ post]"
    },
    {
      "type": "paragraph",
      "id": "3613c602a0c314c6",
      "text": "I wondered how I would do in a job interview that included live coding this only slightly tricky problem."
    },
    {
      "type": "code",
      "id": "727e422e4bd1dabe",
      "text": "for (let i = 1; i <= 100; i++) {\n  let words = []\n  if (!(i%3)) words.push('fizz')\n  if (!(i%5)) words.push('buzz')\n  if (words.length)\n    console.log(words.join(' '))\n  else\n    console.log(i)\n}"
    },
    {
      "type": "paragraph",
      "id": "2e8a348ff80331ef",
      "text": "I made two mistakes. I guess wrong about the operator precedence between not and mod. And I forgot to convert the empty array to something recognizably false. I looked up published implementations fizz buzz to see what I might have missed. [https://rosettacode.org/wiki/FizzBuzz#Javascript rosettacode]"
    },
    {
      "type": "paragraph",
      "id": "6d137006274c73b3",
      "text": "With functional abstraction and lazy-or I was able to reduce fizz buzz to a shorter and possibly more readable four lines using language features I use every day."
    },
    {
      "type": "code",
      "id": "56b0525f3997f0fe",
      "text": "for (let i = 1; i <= 100; i++) {\n  const div = (n, word) => i%n ? '' : word\n  console.log(div(3,'fizz')+div(5,'buzz') || i)\n}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Fizz Buzz Revisited",
        "story": []
      },
      "date": 1611110337532
    },
    {
      "item": {
        "type": "factory",
        "id": "2b22afc646d829f3"
      },
      "id": "2b22afc646d829f3",
      "type": "add",
      "date": 1611110422762
    },
    {
      "type": "edit",
      "id": "2b22afc646d829f3",
      "item": {
        "type": "paragraph",
        "id": "2b22afc646d829f3",
        "text": "My mind wandered after "
      },
      "date": 1611110466262
    },
    {
      "type": "edit",
      "id": "2b22afc646d829f3",
      "item": {
        "type": "paragraph",
        "id": "2b22afc646d829f3",
        "text": "My mind wandered after browsing Alain "
      },
      "date": 1611110501759
    },
    {
      "type": "edit",
      "id": "2b22afc646d829f3",
      "item": {
        "type": "paragraph",
        "id": "2b22afc646d829f3",
        "text": "My mind wandered after browsing Alain Marty's recent post on the derivation of all things useful from lambda. "
      },
      "date": 1611110571003
    },
    {
      "type": "edit",
      "id": "2b22afc646d829f3",
      "item": {
        "type": "paragraph",
        "id": "2b22afc646d829f3",
        "text": "My mind wandered after browsing Alain Marty's recent post on the derivation of all things useful from lambda. [http://lambdaway.free.fr/lambdawalks/?view=fromroots2canopy lambdaway]"
      },
      "date": 1611110595105
    },
    {
      "type": "edit",
      "id": "2b22afc646d829f3",
      "item": {
        "type": "paragraph",
        "id": "2b22afc646d829f3",
        "text": "My mind wandered after browsing Alain Marty's recent post on the derivation of all things computationally useful from lambda. [http://lambdaway.free.fr/lambdawalks/?view=fromroots2canopy lambdaway]"
      },
      "date": 1611110647238
    },
    {
      "type": "add",
      "id": "61dc3d597654acad",
      "item": {
        "type": "paragraph",
        "id": "61dc3d597654acad",
        "text": "The appendix offered "
      },
      "after": "2b22afc646d829f3",
      "date": 1611110680878
    },
    {
      "type": "edit",
      "id": "61dc3d597654acad",
      "item": {
        "type": "paragraph",
        "id": "61dc3d597654acad",
        "text": "The appendix offered two dozen related links wherein I chose \"whiteboard problems\""
      },
      "date": 1611110771951
    },
    {
      "type": "edit",
      "id": "61dc3d597654acad",
      "item": {
        "type": "paragraph",
        "id": "61dc3d597654acad",
        "text": "The appendix offered two dozen related links wherein I chose \"whiteboard problems\". [https://www.jtolio.com/2017/03/whiteboard-problems-in-pure-lambda-calculus/ post]"
      },
      "date": 1611110804688
    },
    {
      "type": "edit",
      "id": "61dc3d597654acad",
      "item": {
        "type": "paragraph",
        "id": "61dc3d597654acad",
        "text": "The appendix offered two dozen related links wherein I chose \"whiteboard problems\" that included [[Fizz Buzz]] written in lambda calculus. [https://www.jtolio.com/2017/03/whiteboard-problems-in-pure-lambda-calculus/ post]"
      },
      "date": 1611110842756
    },
    {
      "type": "add",
      "id": "3613c602a0c314c6",
      "item": {
        "type": "paragraph",
        "id": "3613c602a0c314c6",
        "text": "I wondered how I would do in a job interview that included live coding this only slightly tricky problem."
      },
      "after": "61dc3d597654acad",
      "date": 1611111004419
    },
    {
      "item": {
        "type": "factory",
        "id": "727e422e4bd1dabe"
      },
      "id": "727e422e4bd1dabe",
      "type": "add",
      "after": "3613c602a0c314c6",
      "date": 1611111022231
    },
    {
      "type": "edit",
      "id": "727e422e4bd1dabe",
      "item": {
        "type": "code",
        "id": "727e422e4bd1dabe",
        "text": "for (let i = 1; i <= 100; i++) {\n  if (!(i%3)) words.push('fizz')\n  if (!(i%5)) words.push('buzz')\n  if (words.length)\n    console.log(words.join(' '))\n  else\n    console.log(i)\n}"
      },
      "date": 1611111027935
    },
    {
      "item": {
        "type": "factory",
        "id": "2e8a348ff80331ef"
      },
      "id": "2e8a348ff80331ef",
      "type": "add",
      "after": "727e422e4bd1dabe",
      "date": 1611111187049
    },
    {
      "type": "edit",
      "id": "2e8a348ff80331ef",
      "item": {
        "type": "paragraph",
        "id": "2e8a348ff80331ef",
        "text": "I made two mistakes. I guess wrong about the operator precedence between not and mod and I forgot to take the length of the words array"
      },
      "date": 1611111293784
    },
    {
      "type": "edit",
      "id": "727e422e4bd1dabe",
      "item": {
        "type": "code",
        "id": "727e422e4bd1dabe",
        "text": "for (let i = 1; i <= 100; i++) {\n  let words = []\n  if (!(i%3)) words.push('fizz')\n  if (!(i%5)) words.push('buzz')\n  if (words.length)\n    console.log(words.join(' '))\n  else\n    console.log(i)\n}"
      },
      "date": 1611111304273
    },
    {
      "type": "edit",
      "id": "2e8a348ff80331ef",
      "item": {
        "type": "paragraph",
        "id": "2e8a348ff80331ef",
        "text": "I made two mistakes. I guess wrong about the operator precedence between not and mod. And I forgot to convert the empty array to something recognizably false. I looked up published implementations fizz buzz to see what I might have missed."
      },
      "date": 1611111448890
    },
    {
      "type": "edit",
      "id": "2e8a348ff80331ef",
      "item": {
        "type": "paragraph",
        "id": "2e8a348ff80331ef",
        "text": "I made two mistakes. I guess wrong about the operator precedence between not and mod. And I forgot to convert the empty array to something recognizably false. I looked up published implementations fizz buzz to see what I might have missed. [https://rosettacode.org/wiki/FizzBuzz#Javascript rosettacode]"
      },
      "date": 1611111466257
    },
    {
      "type": "add",
      "id": "6d137006274c73b3",
      "item": {
        "type": "paragraph",
        "id": "6d137006274c73b3",
        "text": "With functional abstraction and lazy-or I was able to reduce fizz buzz to a shorter and possibly more readable four lines."
      },
      "after": "2e8a348ff80331ef",
      "date": 1611111612881
    },
    {
      "item": {
        "type": "factory",
        "id": "56b0525f3997f0fe"
      },
      "id": "56b0525f3997f0fe",
      "type": "add",
      "after": "6d137006274c73b3",
      "date": 1611111617654
    },
    {
      "type": "edit",
      "id": "56b0525f3997f0fe",
      "item": {
        "type": "code",
        "id": "56b0525f3997f0fe",
        "text": "for (let i = 1; i <= 100; i++) {\n  const div = (n, word) => i%n ? '' : word\n  console.log(div(3,'fizz')+div(5,'buzz') || i)\n}"
      },
      "date": 1611111623410
    },
    {
      "type": "edit",
      "id": "6d137006274c73b3",
      "item": {
        "type": "paragraph",
        "id": "6d137006274c73b3",
        "text": "With functional abstraction and lazy-or I was able to reduce fizz buzz to a shorter and possibly more readable four lines using language features I use every day."
      },
      "date": 1611112021176
    },
    {
      "type": "fork",
      "date": 1611112415126
    },
    {
      "type": "fork",
      "site": "found.ward.bay.wiki.org",
      "date": 1652512021723
    }
  ]
}