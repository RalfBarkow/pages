{
  "title": "Process Input Data",
  "story": [
    {
      "type": "paragraph",
      "id": "4820e38d56722465",
      "text": "Operators process input data and [[Emit Output]], […]"
    },
    {
      "type": "reference",
      "id": "ad99298f839419a2",
      "site": "wiki.ralfbarkow.ch",
      "slug": "emit-output",
      "title": "Emit Output",
      "text": "Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent operators and data, respectively. Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators."
    },
    {
      "type": "pagefold",
      "id": "e6a92f1c63465e84",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "388e9d14247ba9d5",
      "text": "SELVATICI, Lorenzo, 2020. A Streaming System with Coordination-Free Fault-Tolerance. Master’s Thesis. Systems Group, Department of Computer Science, ETH Zurich. [https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/455359/1/Selvatici_Lorenzo.pdf pdf]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Process Input Data",
        "story": []
      },
      "date": 1713818039587
    },
    {
      "id": "4820e38d56722465",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4820e38d56722465",
        "text": "Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent operators and data, respectively. Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators."
      },
      "attribution": {
        "page": "Emit Output"
      },
      "date": 1713818047131
    },
    {
      "type": "edit",
      "id": "4820e38d56722465",
      "item": {
        "type": "paragraph",
        "id": "4820e38d56722465",
        "text": "Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators."
      },
      "date": 1713818057422
    },
    {
      "type": "edit",
      "id": "4820e38d56722465",
      "item": {
        "type": "paragraph",
        "id": "4820e38d56722465",
        "text": "Operators process input data and [[Emit Output]], […]"
      },
      "date": 1713818080730
    },
    {
      "item": {
        "type": "factory",
        "id": "ad99298f839419a2"
      },
      "id": "ad99298f839419a2",
      "type": "add",
      "after": "4820e38d56722465",
      "date": 1713818082720
    },
    {
      "type": "edit",
      "id": "ad99298f839419a2",
      "item": {
        "type": "reference",
        "id": "ad99298f839419a2",
        "site": "wiki.ralfbarkow.ch",
        "slug": "emit-output",
        "title": "Emit Output",
        "text": "Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent operators and data, respectively. Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators."
      },
      "date": 1713818088004
    },
    {
      "id": "e6a92f1c63465e84",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "e6a92f1c63465e84",
        "text": "~"
      },
      "after": "ad99298f839419a2",
      "attribution": {
        "page": "Emit Output"
      },
      "date": 1713818091979
    },
    {
      "id": "388e9d14247ba9d5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "388e9d14247ba9d5",
        "text": "SELVATICI, Lorenzo, 2020. A Streaming System with Coordination-Free Fault-Tolerance. Master’s Thesis. Systems Group, Department of Computer Science, ETH Zurich. [https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/455359/1/Selvatici_Lorenzo.pdf pdf]."
      },
      "after": "e6a92f1c63465e84",
      "attribution": {
        "page": "Emit Output"
      },
      "date": 1713818095946
    }
  ]
}