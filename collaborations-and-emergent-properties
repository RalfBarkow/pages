{
  "title": "Collaborations and Emergent Properties",
  "story": [
    {
      "type": "paragraph",
      "id": "9cde3901ff371579",
      "text": "Let’s consider the requirements for our reference finder now. In particular, what is exactly its purpose? It turns out that it is connected to the garbage collection services provided by the virtual machine."
    },
    {
      "type": "markdown",
      "id": "62c7a19595bc5c30",
      "text": "As we discussed before, objects that are referenced, directly or indirectly, from objects like `Smalltalk` are considered not garbage. This also means that objects that cannot be found after traversing the image starting at `Smalltalk` are considered garbage, and thus the space they take can be reclaimed by the [[garbage collector]].\n"
    },
    {
      "type": "markdown",
      "id": "718360f1cb1e3bed",
      "text": "What does it mean, exactly, that objects cannot be found after traversing the image starting at `Smalltalk`? Perhaps the part about traversing the image is clear already: anything that is known by `Smalltalk` is not garbage, anything that is known by objects known by `Smalltalk` is not garbage, and so on.\n"
    },
    {
      "type": "markdown",
      "id": "4428e84932559499",
      "text": "But what are we referring to when we say that objects cannot be found by this traversal? From a pragmatic point of view, we may consider that since we cannot send messages to garbage objects, it is safe for them to be physically removed from the image. But there is a deeper, more subtle implication at play here.\n"
    },
    {
      "type": "markdown",
      "id": "8438c74347b4bbdf",
      "text": "What makes an object garbage is that if any objects know it by name, then it is only because the referrers are also garbage. In other words, objects are garbage when they are not stored in any instance name (indexed or not) of objects known to be not garbage.\n"
    },
    {
      "type": "markdown",
      "id": "6da838ced4273e62",
      "text": "These would be so called *strong references*. However, there are objects that can refer to others by means of *weak references*. Weak references are not followed by the virtual machine as it traverses the image looking for garbage.\n"
    },
    {
      "type": "markdown",
      "id": "16fee5c14cb46d8e",
      "text": "In practice, garbage detection works by making `Smalltalk` not garbage by definition, any then stating that instance name references from objects that are not garbage make the referenced objects inherit the property of being not garbage through the reference.\n"
    },
    {
      "type": "markdown",
      "id": "7323fe283d0efb90",
      "text": "Fortunately, all of this is done by the virtual machine for us, so we do not have to deal with it explicitly. In fact, sometimes we may even rely on the garbage collector to make up space by getting rid of stuff our objects do not reference any more.\n"
    },
    {
      "type": "markdown",
      "id": "4360fab4ed1b4422",
      "text": "All is well and everybody is happy until, for some reason, the virtual machine refuses to let go of some object. This means that there is a reference to it, that there must be at least one instance name pointing to it from some object that is known to be not garbage.\n"
    },
    {
      "type": "markdown",
      "id": "afed8a80f2ac854d",
      "text": "Sometimes we remember where the reference is. But that does not always happen, especially in object systems composed of a large amount of parts. So, where is the reference to our suspicious object, and which is the object that knows our suspect by name?"
    },
    {
      "type": "markdown",
      "id": "253a38afe38c647e",
      "text": "It turns out that we can have Smalltalk figure this out by itself. Our objective is then to find all references to an arbitrary object starting from `Smalltalk`. In order to find an answer to that question, we will replicate the work of the virtual machine — to a point. Instead of looking at objects in terms of a Smalltalk space, we will look at them as forms and distinctions."
    },
    {
      "type": "paragraph",
      "id": "7952ca6d3210bd4f",
      "text": "⇒  [[Intentions and Distinctions]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Collaborations and Emergent Properties",
        "story": []
      },
      "date": 1660222233460
    },
    {
      "item": {
        "type": "factory",
        "id": "9cde3901ff371579"
      },
      "id": "9cde3901ff371579",
      "type": "add",
      "date": 1660222240288
    },
    {
      "type": "edit",
      "id": "9cde3901ff371579",
      "item": {
        "type": "paragraph",
        "id": "9cde3901ff371579",
        "text": "Let’s consider the requirements for our reference finder now. In particular, what is exactly its purpose? It turns out that it is connected to the garbage collection services provided by the virtual machine."
      },
      "date": 1660222243898
    },
    {
      "type": "add",
      "id": "253a38afe38c647e",
      "item": {
        "type": "paragraph",
        "id": "253a38afe38c647e",
        "text": "[…]"
      },
      "after": "9cde3901ff371579",
      "date": 1660222245784
    },
    {
      "item": {
        "type": "factory",
        "id": "7952ca6d3210bd4f"
      },
      "id": "7952ca6d3210bd4f",
      "type": "add",
      "after": "253a38afe38c647e",
      "date": 1660222285896
    },
    {
      "type": "edit",
      "id": "7952ca6d3210bd4f",
      "item": {
        "type": "paragraph",
        "id": "7952ca6d3210bd4f",
        "text": "– [[Intentions and Distinctions]]"
      },
      "date": 1660222291811
    },
    {
      "type": "edit",
      "id": "7952ca6d3210bd4f",
      "item": {
        "type": "paragraph",
        "id": "7952ca6d3210bd4f",
        "text": "⇒  [[Intentions and Distinctions]]"
      },
      "date": 1660222298345
    },
    {
      "type": "add",
      "id": "62c7a19595bc5c30",
      "item": {
        "type": "paragraph",
        "id": "62c7a19595bc5c30",
        "text": "As we discussed before, objects that are referenced, directly or indirectly, from objects like Smalltalk are considered not garbage. This also means that objects that cannot be found after traversing the image starting at Smalltalk are considered garbage, and thus the space they take can be reclaimed by the garbage collector."
      },
      "after": "9cde3901ff371579",
      "date": 1660291718389
    },
    {
      "type": "edit",
      "id": "62c7a19595bc5c30",
      "item": {
        "type": "paragraph",
        "id": "62c7a19595bc5c30",
        "text": "As we discussed before, objects that are referenced, directly or indirectly, from objects like `Smalltalk` are considered not garbage. This also means that objects that cannot be found after traversing the image starting at Smalltalk are considered garbage, and thus the space they take can be reclaimed by the garbage collector."
      },
      "date": 1660291737516
    },
    {
      "type": "edit",
      "id": "62c7a19595bc5c30",
      "item": {
        "type": "markdown",
        "id": "62c7a19595bc5c30",
        "text": "As we discussed before, objects that are referenced, directly or indirectly, from objects like `Smalltalk` are considered not garbage. This also means that objects that cannot be found after traversing the image starting at Smalltalk are considered garbage, and thus the space they take can be reclaimed by the garbage collector."
      },
      "date": 1660291738775
    },
    {
      "type": "edit",
      "id": "62c7a19595bc5c30",
      "item": {
        "type": "markdown",
        "id": "62c7a19595bc5c30",
        "text": "As we discussed before, objects that are referenced, directly or indirectly, from objects like `Smalltalk` are considered not garbage. This also means that objects that cannot be found after traversing the image starting at `Smalltalk` are considered garbage, and thus the space they take can be reclaimed by the garbage collector."
      },
      "date": 1660291758805
    },
    {
      "type": "edit",
      "id": "62c7a19595bc5c30",
      "item": {
        "type": "markdown",
        "id": "62c7a19595bc5c30",
        "text": "As we discussed before, objects that are referenced, directly or indirectly, from objects like `Smalltalk` are considered not garbage. This also means that objects that cannot be found after traversing the image starting at `Smalltalk` are considered garbage, and thus the space they take can be reclaimed by the [[garbage collector]]."
      },
      "date": 1660291777435
    },
    {
      "type": "edit",
      "id": "62c7a19595bc5c30",
      "item": {
        "type": "markdown",
        "id": "62c7a19595bc5c30",
        "text": "As we discussed before, objects that are referenced, directly or indirectly, from objects like `Smalltalk` are considered not garbage. This also means that objects that cannot be found after traversing the image starting at `Smalltalk` are considered garbage, and thus the space they take can be reclaimed by the [[garbage collector]].\n"
      },
      "date": 1660291918507
    },
    {
      "type": "add",
      "id": "718360f1cb1e3bed",
      "item": {
        "type": "markdown",
        "id": "718360f1cb1e3bed",
        "text": "What does it mean, exactly, that objects cannot be found after traversing the image starting at `Smalltalk`? Perhaps the part about traversing the image is clear already: anything that is known by Smalltalk is not garbage, anything that is known by objects known by `Smalltalk` is not garbage, and so on."
      },
      "after": "62c7a19595bc5c30",
      "date": 1660291936710
    },
    {
      "type": "edit",
      "id": "718360f1cb1e3bed",
      "item": {
        "type": "markdown",
        "id": "718360f1cb1e3bed",
        "text": "What does it mean, exactly, that objects cannot be found after traversing the image starting at `Smalltalk`? Perhaps the part about traversing the image is clear already: anything that is known by `Smalltalk` is not garbage, anything that is known by objects known by `Smalltalk` is not garbage, and so on."
      },
      "date": 1660291953813
    },
    {
      "type": "edit",
      "id": "718360f1cb1e3bed",
      "item": {
        "type": "markdown",
        "id": "718360f1cb1e3bed",
        "text": "What does it mean, exactly, that objects cannot be found after traversing the image starting at `Smalltalk`? Perhaps the part about traversing the image is clear already: anything that is known by `Smalltalk` is not garbage, anything that is known by objects known by `Smalltalk` is not garbage, and so on.\n"
      },
      "date": 1660291978816
    },
    {
      "type": "add",
      "id": "4428e84932559499",
      "item": {
        "type": "markdown",
        "id": "4428e84932559499",
        "text": "But what are we referring to when we say that objects cannot be found by this traversal? From a pragmatic point of view, we may consider that since we cannot send messages to garbage objects, it is safe for them to be physically removed from the image. But there is a deeper, more subtle implication at play here."
      },
      "after": "718360f1cb1e3bed",
      "date": 1660291992478
    },
    {
      "type": "edit",
      "id": "4428e84932559499",
      "item": {
        "type": "markdown",
        "id": "4428e84932559499",
        "text": "But what are we referring to when we say that objects cannot be found by this traversal? From a pragmatic point of view, we may consider that since we cannot send messages to garbage objects, it is safe for them to be physically removed from the image. But there is a deeper, more subtle implication at play here.\n"
      },
      "date": 1660291999528
    },
    {
      "type": "add",
      "id": "8438c74347b4bbdf",
      "item": {
        "type": "markdown",
        "id": "8438c74347b4bbdf",
        "text": "What makes an object garbage is that if any objects know it by name, then it is only because the referrers are also garbage. In other words, objects are garbage when they are not stored in any instance name (indexed or not) of objects known to be not garbage6."
      },
      "after": "4428e84932559499",
      "date": 1660292003872
    },
    {
      "type": "edit",
      "id": "8438c74347b4bbdf",
      "item": {
        "type": "markdown",
        "id": "8438c74347b4bbdf",
        "text": "What makes an object garbage is that if any objects know it by name, then it is only because the referrers are also garbage. In other words, objects are garbage when they are not stored in any instance name (indexed or not) of objects known to be not garbage.\n"
      },
      "date": 1660292015173
    },
    {
      "type": "add",
      "id": "6da838ced4273e62",
      "item": {
        "type": "markdown",
        "id": "6da838ced4273e62",
        "text": "These would be so called *strong references*. However, there are objects that can refer to others by means of weak references. Weak references are not followed by the virtual machine as it traverses the image looking for garbage."
      },
      "after": "8438c74347b4bbdf",
      "date": 1660292023496
    },
    {
      "type": "edit",
      "id": "6da838ced4273e62",
      "item": {
        "type": "markdown",
        "id": "6da838ced4273e62",
        "text": "These would be so called *strong references*. However, there are objects that can refer to others by means of *weak references*. Weak references are not followed by the virtual machine as it traverses the image looking for garbage."
      },
      "date": 1660292035269
    },
    {
      "type": "edit",
      "id": "6da838ced4273e62",
      "item": {
        "type": "markdown",
        "id": "6da838ced4273e62",
        "text": "These would be so called *strong references*. However, there are objects that can refer to others by means of *weak references*. Weak references are not followed by the virtual machine as it traverses the image looking for garbage.\n"
      },
      "date": 1660292058020
    },
    {
      "type": "add",
      "id": "16fee5c14cb46d8e",
      "item": {
        "type": "markdown",
        "id": "16fee5c14cb46d8e",
        "text": "In practice, garbage detection works by making `Smalltalk` not garbage by definition, any then stating that instance name references from objects that are not garbage make the referenced objects inherit the property of being not garbage through the reference."
      },
      "after": "6da838ced4273e62",
      "date": 1660292066455
    },
    {
      "type": "edit",
      "id": "16fee5c14cb46d8e",
      "item": {
        "type": "markdown",
        "id": "16fee5c14cb46d8e",
        "text": "In practice, garbage detection works by making `Smalltalk` not garbage by definition, any then stating that instance name references from objects that are not garbage make the referenced objects inherit the property of being not garbage through the reference.\n"
      },
      "date": 1660292099320
    },
    {
      "type": "add",
      "id": "7323fe283d0efb90",
      "item": {
        "type": "markdown",
        "id": "7323fe283d0efb90",
        "text": "Fortunately, all of this is done by the virtual machine for us, so we do not have to deal with it explicitly. In fact, sometimes we may even rely on the garbage collector to make up space by getting rid of stuff our objects do not reference any more."
      },
      "after": "16fee5c14cb46d8e",
      "date": 1660292100853
    },
    {
      "type": "edit",
      "id": "7323fe283d0efb90",
      "item": {
        "type": "markdown",
        "id": "7323fe283d0efb90",
        "text": "Fortunately, all of this is done by the virtual machine for us, so we do not have to deal with it explicitly. In fact, sometimes we may even rely on the garbage collector to make up space by getting rid of stuff our objects do not reference any more.\n"
      },
      "date": 1660292129848
    },
    {
      "type": "add",
      "id": "4360fab4ed1b4422",
      "item": {
        "type": "markdown",
        "id": "4360fab4ed1b4422",
        "text": "All is well and everybody is happy until, for some reason, the virtual machine refuses to let go of some object. This means that there is a reference to it, that there must be at least one instance name pointing to it from some object that is known to be not garbage."
      },
      "after": "7323fe283d0efb90",
      "date": 1660292130586
    },
    {
      "type": "edit",
      "id": "4360fab4ed1b4422",
      "item": {
        "type": "markdown",
        "id": "4360fab4ed1b4422",
        "text": "All is well and everybody is happy until, for some reason, the virtual machine refuses to let go of some object. This means that there is a reference to it, that there must be at least one instance name pointing to it from some object that is known to be not garbage.\n"
      },
      "date": 1660292170439
    },
    {
      "type": "add",
      "id": "afed8a80f2ac854d",
      "item": {
        "type": "markdown",
        "id": "afed8a80f2ac854d",
        "text": "Sometimes we remember where the reference is. But that does not always happen, especially in object systems composed of a large amount of parts. So, where is the reference to our suspicious object, and which is the object that knows our suspect by name?"
      },
      "after": "4360fab4ed1b4422",
      "date": 1660292173458
    },
    {
      "type": "edit",
      "id": "253a38afe38c647e",
      "item": {
        "type": "paragraph",
        "id": "253a38afe38c647e",
        "text": "It turns out that we can have Smalltalk figure this out by itself. Our objective is then to find all references to an arbitrary object starting from `Smalltalk`. In order to find an answer to that question, we will replicate the work of the virtual machine — to a point. Instead of looking at objects in terms of a Smalltalk space, we will look at them as forms and distinctions."
      },
      "date": 1660292202019
    },
    {
      "type": "edit",
      "id": "253a38afe38c647e",
      "item": {
        "type": "markdown",
        "id": "253a38afe38c647e",
        "text": "It turns out that we can have Smalltalk figure this out by itself. Our objective is then to find all references to an arbitrary object starting from `Smalltalk`. In order to find an answer to that question, we will replicate the work of the virtual machine — to a point. Instead of looking at objects in terms of a Smalltalk space, we will look at them as forms and distinctions."
      },
      "date": 1660292203433
    }
  ]
}