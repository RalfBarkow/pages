{
  "title": "Ampleforth",
  "story": [
    {
      "type": "video",
      "id": "b06cc3fdec79487e",
      "text": "YOUTUBE eBuiL6asa5Y\nA demo of Ampleforth, as given in [[Gilda Bracha]]'s Programming 17 keynote."
    },
    {
      "type": "markdown",
      "id": "1684e01002f48ff4",
      "text": "See also\n- [https://groups.google.com/g/newspeaklanguage/c/FizKz_OSUZY?pli=1 Org to Ampleforth]\n"
    },
    {
      "type": "markdown",
      "id": "d8cbb4835dfd4e0f",
      "text": "- [https://mzimmerm.github.io/2021/07/writing-live-documents-in-newspeak-ampleforth-in-org-mode mzimmerm]\n"
    },
    {
      "type": "markdown",
      "id": "2470cc43986afeba",
      "text": "- [https://bracha.org/newspeak-modules.pdf pdf] – Modules as Objects in Newspeak\n> **Abstract**. We describe support for modularity in Newspeak, a programming language descended from Smalltalk [33] and Self [69]. Like Self, all computation — even an object’s own access to its internal structure — is performed by invoking methods on objects. However, like Smalltalk, Newspeak is class-based. Classes can be nested arbitrarily, as in Beta [44]. Since all names denote method invocations, all classes are virtual;\nin particular, superclasses are virtual, so all classes act as mixins. Unlike its predecessors, there is no static state in Newspeak, nor is there a global namespace. Modularity in Newspeak is based exclusively on class nesting. There are no separate modularity constructs such as packages. Top level classes act as module definitions, which are independent, immutable, self-contained parametric namespaces. They can be instantiated into modules which may be stateful and mutually recursive.\n"
    },
    {
      "type": "markdown",
      "id": "6d11b08587f1bee3",
      "text": "- [https://blog.bracha.org/illiterateProgramming/out/illiterateProgramming.html blog] – Illiterate Programming\n"
    },
    {
      "type": "markdown",
      "id": "0d66c0586b998eb3",
      "text": "- https://www.madoko.net/"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Ampleforth",
        "story": []
      },
      "date": 1631713381088
    },
    {
      "item": {
        "type": "factory",
        "id": "b06cc3fdec79487e"
      },
      "id": "b06cc3fdec79487e",
      "type": "add",
      "date": 1631713382397
    },
    {
      "type": "edit",
      "id": "b06cc3fdec79487e",
      "item": {
        "type": "video",
        "id": "b06cc3fdec79487e",
        "text": "YOUTUBE eBuiL6asa5Y"
      },
      "date": 1631713392509
    },
    {
      "type": "edit",
      "id": "b06cc3fdec79487e",
      "item": {
        "type": "video",
        "id": "b06cc3fdec79487e",
        "text": "YOUTUBE eBuiL6asa5Y\nA demo of Ampleforth, as given in [[Gilda Bracha]]'s Programming 17 keynote."
      },
      "date": 1631713455154
    },
    {
      "item": {
        "type": "factory",
        "id": "1684e01002f48ff4"
      },
      "id": "1684e01002f48ff4",
      "type": "add",
      "after": "b06cc3fdec79487e",
      "date": 1631713580939
    },
    {
      "type": "edit",
      "id": "1684e01002f48ff4",
      "item": {
        "type": "markdown",
        "id": "1684e01002f48ff4",
        "text": "See also\n- [Org to Ampleforth]"
      },
      "date": 1631713593288
    },
    {
      "type": "edit",
      "id": "1684e01002f48ff4",
      "item": {
        "type": "markdown",
        "id": "1684e01002f48ff4",
        "text": "See also\n- [https://groups.google.com/g/newspeaklanguage/c/FizKz_OSUZY?pli=1 Org to Ampleforth]"
      },
      "date": 1631713600707
    },
    {
      "type": "edit",
      "id": "1684e01002f48ff4",
      "item": {
        "type": "markdown",
        "id": "1684e01002f48ff4",
        "text": "See also\n- [https://groups.google.com/g/newspeaklanguage/c/FizKz_OSUZY?pli=1 Org to Ampleforth]\n"
      },
      "date": 1631713928695
    },
    {
      "type": "add",
      "id": "d8cbb4835dfd4e0f",
      "item": {
        "type": "markdown",
        "id": "d8cbb4835dfd4e0f",
        "text": "- [https://mzimmerm.github.io/2021/07/writing-live-documents-in-newspeak-ampleforth-in-org-mode mzimmerm]"
      },
      "after": "1684e01002f48ff4",
      "date": 1631713939665
    },
    {
      "type": "edit",
      "id": "d8cbb4835dfd4e0f",
      "item": {
        "type": "markdown",
        "id": "d8cbb4835dfd4e0f",
        "text": "- [https://mzimmerm.github.io/2021/07/writing-live-documents-in-newspeak-ampleforth-in-org-mode mzimmerm]\n"
      },
      "date": 1631713987331
    },
    {
      "type": "add",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf"
      },
      "after": "d8cbb4835dfd4e0f",
      "date": 1631713993776
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf Modules as Objects in Newspeak]"
      },
      "date": 1631714018947
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf pdf] –Modules as Objects in Newspeak"
      },
      "date": 1631714029984
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf pdf] – Modules as Objects in Newspeak"
      },
      "date": 1631714035122
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf pdf] – Modules as Objects in Newspeak\n> **Abstract**. We describe support for modularity in Newspeak, a programming language descended from Smalltalk [33] and Self [69]. Like Self, all\ncomputation — even an object’s own access to its internal structure — is performed by invoking methods on objects. However, like Smalltalk,\nNewspeak is class-based. Classes can be nested arbitrarily, as in Beta [44]. Since all names denote method invocations, all classes are virtual;\nin particular, superclasses are virtual, so all classes act as mixins. Unlike its predecessors, there is no static state in Newspeak, nor is there a\nglobal namespace. Modularity in Newspeak is based exclusively on class nesting. There are no separate modularity constructs such as packages.\nTop level classes act as module definitions, which are independent, immutable, self-contained parametric namespaces. They can be instantiated\ninto modules which may be stateful and mutually recursive."
      },
      "date": 1631714133563
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf pdf] – Modules as Objects in Newspeak\n> **Abstract**. We describe support for modularity in Newspeak, a programming language descended from Smalltalk [33] and Self [69]. Like Self, all computation — even an object’s own access to its internal structure — is performed by invoking methods on objects. However, like Smalltalk,\nNewspeak is class-based. Classes can be nested arbitrarily, as in Beta [44]. Since all names denote method invocations, all classes are virtual;\nin particular, superclasses are virtual, so all classes act as mixins. Unlike its predecessors, there is no static state in Newspeak, nor is there a\nglobal namespace. Modularity in Newspeak is based exclusively on class nesting. There are no separate modularity constructs such as packages.\nTop level classes act as module definitions, which are independent, immutable, self-contained parametric namespaces. They can be instantiated\ninto modules which may be stateful and mutually recursive."
      },
      "date": 1631714140552
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf pdf] – Modules as Objects in Newspeak\n> **Abstract**. We describe support for modularity in Newspeak, a programming language descended from Smalltalk [33] and Self [69]. Like Self, all computation — even an object’s own access to its internal structure — is performed by invoking methods on objects. However, like Smalltalk, Newspeak is class-based. Classes can be nested arbitrarily, as in Beta [44]. Since all names denote method invocations, all classes are virtual;\nin particular, superclasses are virtual, so all classes act as mixins. Unlike its predecessors, there is no static state in Newspeak, nor is there a\nglobal namespace. Modularity in Newspeak is based exclusively on class nesting. There are no separate modularity constructs such as packages.\nTop level classes act as module definitions, which are independent, immutable, self-contained parametric namespaces. They can be instantiated\ninto modules which may be stateful and mutually recursive."
      },
      "date": 1631714146308
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf pdf] – Modules as Objects in Newspeak\n> **Abstract**. We describe support for modularity in Newspeak, a programming language descended from Smalltalk [33] and Self [69]. Like Self, all computation — even an object’s own access to its internal structure — is performed by invoking methods on objects. However, like Smalltalk, Newspeak is class-based. Classes can be nested arbitrarily, as in Beta [44]. Since all names denote method invocations, all classes are virtual;\nin particular, superclasses are virtual, so all classes act as mixins. Unlike its predecessors, there is no static state in Newspeak, nor is there a global namespace. Modularity in Newspeak is based exclusively on class nesting. There are no separate modularity constructs such as packages.\nTop level classes act as module definitions, which are independent, immutable, self-contained parametric namespaces. They can be instantiated\ninto modules which may be stateful and mutually recursive."
      },
      "date": 1631714160199
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf pdf] – Modules as Objects in Newspeak\n> **Abstract**. We describe support for modularity in Newspeak, a programming language descended from Smalltalk [33] and Self [69]. Like Self, all computation — even an object’s own access to its internal structure — is performed by invoking methods on objects. However, like Smalltalk, Newspeak is class-based. Classes can be nested arbitrarily, as in Beta [44]. Since all names denote method invocations, all classes are virtual;\nin particular, superclasses are virtual, so all classes act as mixins. Unlike its predecessors, there is no static state in Newspeak, nor is there a global namespace. Modularity in Newspeak is based exclusively on class nesting. There are no separate modularity constructs such as packages. Top level classes act as module definitions, which are independent, immutable, self-contained parametric namespaces. They can be instantiated into modules which may be stateful and mutually recursive."
      },
      "date": 1631714175220
    },
    {
      "type": "edit",
      "id": "2470cc43986afeba",
      "item": {
        "type": "markdown",
        "id": "2470cc43986afeba",
        "text": "- [https://bracha.org/newspeak-modules.pdf pdf] – Modules as Objects in Newspeak\n> **Abstract**. We describe support for modularity in Newspeak, a programming language descended from Smalltalk [33] and Self [69]. Like Self, all computation — even an object’s own access to its internal structure — is performed by invoking methods on objects. However, like Smalltalk, Newspeak is class-based. Classes can be nested arbitrarily, as in Beta [44]. Since all names denote method invocations, all classes are virtual;\nin particular, superclasses are virtual, so all classes act as mixins. Unlike its predecessors, there is no static state in Newspeak, nor is there a global namespace. Modularity in Newspeak is based exclusively on class nesting. There are no separate modularity constructs such as packages. Top level classes act as module definitions, which are independent, immutable, self-contained parametric namespaces. They can be instantiated into modules which may be stateful and mutually recursive.\n"
      },
      "date": 1631714271310
    },
    {
      "type": "add",
      "id": "6d11b08587f1bee3",
      "item": {
        "type": "markdown",
        "id": "6d11b08587f1bee3",
        "text": "- [https://blog.bracha.org/illiterateProgramming/out/illiterateProgramming.html blog] – "
      },
      "after": "2470cc43986afeba",
      "date": 1631714285722
    },
    {
      "type": "edit",
      "id": "6d11b08587f1bee3",
      "item": {
        "type": "markdown",
        "id": "6d11b08587f1bee3",
        "text": "- [https://blog.bracha.org/illiterateProgramming/out/illiterateProgramming.html blog] – Illiterate Programming"
      },
      "date": 1631714295535
    },
    {
      "type": "edit",
      "id": "6d11b08587f1bee3",
      "item": {
        "type": "markdown",
        "id": "6d11b08587f1bee3",
        "text": "- [https://blog.bracha.org/illiterateProgramming/out/illiterateProgramming.html blog] – Illiterate Programming\n"
      },
      "date": 1631714317644
    },
    {
      "type": "add",
      "id": "0d66c0586b998eb3",
      "item": {
        "type": "markdown",
        "id": "0d66c0586b998eb3",
        "text": "- https://www.madoko.net/"
      },
      "after": "6d11b08587f1bee3",
      "date": 1631714319614
    }
  ]
}