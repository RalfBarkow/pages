{
  "title": "Concatenating",
  "story": [
    {
      "type": "paragraph",
      "id": "c0c9eac606d0d156",
      "text": "Strings are typically represented in memory by the integer address at or near the first character of the string. Typically concatenation involves allocating new memory with enough room for both strings then transferring the bytes of both to the new location."
    },
    {
      "type": "html",
      "id": "f36372f06ff68b0f",
      "text": "Strings A and B might be concatenated by a special operator such as <b>A || B</b> or by a String specific interpretation of the addition operator <b>A + B</b>. "
    },
    {
      "type": "paragraph",
      "id": "0017b2f21a42c263",
      "text": "The space allocated to a string can be stored as an integer as part of a prefix to the string or as a special sentinel value at the end. Classically C uses a zero-byte as the sentinel which complicates concatenation because the non-zero characters of both strings must be counted to know how much space to allocate for the combined string."
    },
    {
      "type": "paragraph",
      "id": "5f4441a1d2370d29",
      "text": "Repeatedly adding single characters to a long string can lead to many sentinel searches and many storage allocations. Some languages offer a String Buffer type that is internally optimized for this operation by preallocating more memory than initially needed."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Concatenating",
        "story": []
      },
      "date": 1571183714001
    },
    {
      "item": {
        "type": "factory",
        "id": "c0c9eac606d0d156"
      },
      "id": "c0c9eac606d0d156",
      "type": "add",
      "date": 1571183718849
    },
    {
      "type": "edit",
      "id": "c0c9eac606d0d156",
      "item": {
        "type": "paragraph",
        "id": "c0c9eac606d0d156",
        "text": "Strings are typically represented in memory by the integer address at or near the first character of the string. Typically concatenation involves allocating new memory with enough room for both strings then transferring the bytes of both to the new location."
      },
      "date": 1571183879334
    },
    {
      "type": "add",
      "id": "f36372f06ff68b0f",
      "item": {
        "type": "paragraph",
        "id": "f36372f06ff68b0f",
        "text": "Strings A and B might be concatenated by a special operator such as || or by a String specific interpretation of the + operator. "
      },
      "after": "c0c9eac606d0d156",
      "date": 1571184048723
    },
    {
      "type": "edit",
      "id": "f36372f06ff68b0f",
      "item": {
        "type": "html",
        "id": "f36372f06ff68b0f",
        "text": "Strings A and B might be concatenated by a special operator such as <b>||</b> or by a String specific interpretation of the <b>+</b> operator. "
      },
      "date": 1571184096980
    },
    {
      "type": "edit",
      "id": "f36372f06ff68b0f",
      "item": {
        "type": "html",
        "id": "f36372f06ff68b0f",
        "text": "Strings A and B might be concatenated by a special operator such as <b>A || B</b> or by a String specific interpretation of the <b>A + B</b> operator. "
      },
      "date": 1571184139253
    },
    {
      "type": "edit",
      "id": "f36372f06ff68b0f",
      "item": {
        "type": "html",
        "id": "f36372f06ff68b0f",
        "text": "Strings A and B might be concatenated by a special operator such as <b>A || B</b> or by a String specific interpretation of the addition operator <b>A + B</b>. "
      },
      "date": 1571184176388
    },
    {
      "item": {
        "type": "factory",
        "id": "0017b2f21a42c263"
      },
      "id": "0017b2f21a42c263",
      "type": "add",
      "after": "f36372f06ff68b0f",
      "date": 1571184216624
    },
    {
      "type": "edit",
      "id": "0017b2f21a42c263",
      "item": {
        "type": "paragraph",
        "id": "0017b2f21a42c263",
        "text": "The space allocated to a string can be stored as an integer as part of a prefix to the string or as a special sentinel value at the end. Classically C uses a zero-byte as the sentinel which complicates concatenation because the non-zero characters of both strings must be counted to know how much space to allocate for the combined string."
      },
      "date": 1571184419610
    },
    {
      "type": "add",
      "id": "5f4441a1d2370d29",
      "item": {
        "type": "paragraph",
        "id": "5f4441a1d2370d29",
        "text": "Repeatedly adding single characters to a long string can lead to many sentinel searches and many storage allocations. Some languages offer a String Buffer type that is internally optimized for this operation by preallocating more memory than initially needed."
      },
      "after": "0017b2f21a42c263",
      "date": 1571184588725
    },
    {
      "type": "fork",
      "site": "ward.fed.wiki.org",
      "date": 1710004298980
    }
  ]
}