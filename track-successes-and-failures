{
  "title": "Track Successes and Failures",
  "story": [
    {
      "type": "paragraph",
      "id": "7fc56ea1991be688",
      "text": "To track successes and failures when using [[Decode.oneOf]], you can use Result type to capture the outcome of each decoding attempt."
    },
    {
      "type": "paragraph",
      "id": "0809e0260f54428c",
      "text": "Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
    },
    {
      "type": "paragraph",
      "id": "24b038451b60f174",
      "text": "Json.Decode.Attempt, a package to fail loudly and gracefully [https://discourse.elm-lang.org/t/json-decode-attempt-a-package-to-fail-loudly-and-gracefully/6787 discourse], [https://package.elm-lang.org/packages/MackeyRMS/json-decode-attempt/latest page], [https://github.com/MackeyRMS/json-decode-attempt/tree/2.0.0 github]"
    },
    {
      "type": "paragraph",
      "id": "677d58a3911b9103",
      "text": "Here's an example: (ChatGPT May 24 Version)"
    },
    {
      "type": "code",
      "id": "0f8e25d322a5e5f4",
      "text": "import Json.Decode exposing (Decode)\nimport Result exposing (Result(..))\n\n-- Define decoders\ndecoder1 : Decode Int\ndecoder1 = Decode.int\n\ndecoder2 : Decode String\ndecoder2 = Decode.string\n\ndecoder3 : Decode Bool\ndecoder3 = Decode.bool\n\n-- Wrap decoders with Decode.attempt to capture successes and failures\nattemptedDecoder1 : Decode (Result String Int)\nattemptedDecoder1 = Decode.attempt (\\value -> Ok value) decoder1\n\nattemptedDecoder2 : Decode (Result String String)\nattemptedDecoder2 = Decode.attempt (\\value -> Ok value) decoder2\n\nattemptedDecoder3 : Decode (Result String Bool)\nattemptedDecoder3 = Decode.attempt (\\value -> Ok value) decoder3\n\n-- Combine attempted decoders using Decode.oneOf\ncombinedDecoder : Decode (Result String (Int, String, Bool))\ncombinedDecoder =\n    Decode.oneOf\n        [ Decode.map (\\value -> (value, \"\", False)) attemptedDecoder1\n        , Decode.map (\\value -> (0, value, False)) attemptedDecoder2\n        , Decode.map (\\value -> (0, \"\", value)) attemptedDecoder3\n        ]\n\n-- Example usage\njson1 : String\njson1 = \"42\"\n\njson2 : String\njson2 = \"\\\"Hello, World!\\\"\"\n\njson3 : String\njson3 = \"true\"\n\nresult1 : Result String (Int, String, Bool)\nresult1 = Decode.decodeString combinedDecoder json1\n\nresult2 : Result String (Int, String, Bool)\nresult2 = Decode.decodeString combinedDecoder json2\n\nresult3 : Result String (Int, String, Bool)\nresult3 = Decode.decodeString combinedDecoder json3\n"
    },
    {
      "type": "paragraph",
      "id": "8c23e0c40345735f",
      "text": "In the example above, attemptedDecoder1, attemptedDecoder2, and attemptedDecoder3 are the individual decoders wrapped with Decode.attempt to capture their successes as Ok results. If a decoder fails, the Err result will be captured. Then, these attempted decoders are combined using Decode.oneOf to create a single decoder, combinedDecoder, which returns a tuple of the decoded values along with their success or failure status."
    },
    {
      "type": "paragraph",
      "id": "c0e49b572dc25e59",
      "text": "By using the Result type, you can inspect the outcome of each decoding attempt and handle successes and failures accordingly. This allows you to track and handle different decoding scenarios in a controlled manner."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Track Successes and Failures",
        "story": []
      },
      "date": 1686330920022
    },
    {
      "item": {
        "type": "factory",
        "id": "7fc56ea1991be688"
      },
      "id": "7fc56ea1991be688",
      "type": "add",
      "date": 1686330927164
    },
    {
      "type": "edit",
      "id": "7fc56ea1991be688",
      "item": {
        "type": "paragraph",
        "id": "7fc56ea1991be688",
        "text": "To track successes and failures when using Decode.oneOf, you can use Result type to capture the outcome of each decoding attempt. Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
      },
      "date": 1686330928588
    },
    {
      "type": "add",
      "id": "677d58a3911b9103",
      "item": {
        "type": "paragraph",
        "id": "677d58a3911b9103",
        "text": "Here's an example: ()"
      },
      "after": "7fc56ea1991be688",
      "date": 1686330938230
    },
    {
      "type": "edit",
      "id": "677d58a3911b9103",
      "item": {
        "type": "paragraph",
        "id": "677d58a3911b9103",
        "text": "Here's an example: (ChatGPT May 24 Version)"
      },
      "date": 1686330946090
    },
    {
      "item": {
        "type": "factory",
        "id": "0f8e25d322a5e5f4"
      },
      "id": "0f8e25d322a5e5f4",
      "type": "add",
      "after": "677d58a3911b9103",
      "date": 1686330949627
    },
    {
      "type": "edit",
      "id": "0f8e25d322a5e5f4",
      "item": {
        "type": "code",
        "id": "0f8e25d322a5e5f4",
        "text": "import Json.Decode exposing (Decode)\nimport Result exposing (Result(..))\n\n-- Define decoders\ndecoder1 : Decode Int\ndecoder1 = Decode.int\n\ndecoder2 : Decode String\ndecoder2 = Decode.string\n\ndecoder3 : Decode Bool\ndecoder3 = Decode.bool\n\n-- Wrap decoders with Decode.attempt to capture successes and failures\nattemptedDecoder1 : Decode (Result String Int)\nattemptedDecoder1 = Decode.attempt (\\value -> Ok value) decoder1\n\nattemptedDecoder2 : Decode (Result String String)\nattemptedDecoder2 = Decode.attempt (\\value -> Ok value) decoder2\n\nattemptedDecoder3 : Decode (Result String Bool)\nattemptedDecoder3 = Decode.attempt (\\value -> Ok value) decoder3\n\n-- Combine attempted decoders using Decode.oneOf\ncombinedDecoder : Decode (Result String (Int, String, Bool))\ncombinedDecoder =\n    Decode.oneOf\n        [ Decode.map (\\value -> (value, \"\", False)) attemptedDecoder1\n        , Decode.map (\\value -> (0, value, False)) attemptedDecoder2\n        , Decode.map (\\value -> (0, \"\", value)) attemptedDecoder3\n        ]\n\n-- Example usage\njson1 : String\njson1 = \"42\"\n\njson2 : String\njson2 = \"\\\"Hello, World!\\\"\"\n\njson3 : String\njson3 = \"true\"\n\nresult1 : Result String (Int, String, Bool)\nresult1 = Decode.decodeString combinedDecoder json1\n\nresult2 : Result String (Int, String, Bool)\nresult2 = Decode.decodeString combinedDecoder json2\n\nresult3 : Result String (Int, String, Bool)\nresult3 = Decode.decodeString combinedDecoder json3\n"
      },
      "date": 1686330951477
    },
    {
      "item": {
        "type": "factory",
        "id": "8c23e0c40345735f"
      },
      "id": "8c23e0c40345735f",
      "type": "add",
      "after": "0f8e25d322a5e5f4",
      "date": 1686330964522
    },
    {
      "type": "edit",
      "id": "8c23e0c40345735f",
      "item": {
        "type": "paragraph",
        "id": "8c23e0c40345735f",
        "text": "In the example above, attemptedDecoder1, attemptedDecoder2, and attemptedDecoder3 are the individual decoders wrapped with Decode.attempt to capture their successes as Ok results. If a decoder fails, the Err result will be captured. Then, these attempted decoders are combined using Decode.oneOf to create a single decoder, combinedDecoder, which returns a tuple of the decoded values along with their success or failure status."
      },
      "date": 1686330966140
    },
    {
      "item": {
        "type": "factory",
        "id": "c0e49b572dc25e59"
      },
      "id": "c0e49b572dc25e59",
      "type": "add",
      "after": "8c23e0c40345735f",
      "date": 1686331006062
    },
    {
      "type": "edit",
      "id": "c0e49b572dc25e59",
      "item": {
        "type": "paragraph",
        "id": "c0e49b572dc25e59",
        "text": "By using the Result type, you can inspect the outcome of each decoding attempt and handle successes and failures accordingly. This allows you to track and handle different decoding scenarios in a controlled manner."
      },
      "date": 1686331007421
    },
    {
      "type": "add",
      "id": "24b038451b60f174",
      "item": {
        "type": "paragraph",
        "id": "24b038451b60f174",
        "text": "Json.Decode.Attempt, a package to fail loudly and gracefully"
      },
      "after": "7fc56ea1991be688",
      "date": 1686331049142
    },
    {
      "type": "edit",
      "id": "24b038451b60f174",
      "item": {
        "type": "paragraph",
        "id": "24b038451b60f174",
        "text": "Json.Decode.Attempt, a package to fail loudly and gracefully [https://discourse.elm-lang.org/t/json-decode-attempt-a-package-to-fail-loudly-and-gracefully/6787 discourse]"
      },
      "date": 1686331060213
    },
    {
      "type": "edit",
      "id": "24b038451b60f174",
      "item": {
        "type": "paragraph",
        "id": "24b038451b60f174",
        "text": "Json.Decode.Attempt, a package to fail loudly and gracefully [https://discourse.elm-lang.org/t/json-decode-attempt-a-package-to-fail-loudly-and-gracefully/6787 discourse], [https://package.elm-lang.org/packages/MackeyRMS/json-decode-attempt/latest page]"
      },
      "date": 1686331178913
    },
    {
      "type": "edit",
      "id": "24b038451b60f174",
      "item": {
        "type": "paragraph",
        "id": "24b038451b60f174",
        "text": "Json.Decode.Attempt, a package to fail loudly and gracefully [https://discourse.elm-lang.org/t/json-decode-attempt-a-package-to-fail-loudly-and-gracefully/6787 discourse], [https://package.elm-lang.org/packages/MackeyRMS/json-decode-attempt/latest page], [https://github.com/MackeyRMS/json-decode-attempt/tree/2.0.0 github]"
      },
      "date": 1686331215151
    },
    {
      "type": "edit",
      "id": "7fc56ea1991be688",
      "item": {
        "type": "paragraph",
        "id": "7fc56ea1991be688",
        "text": "To track successes and failures when using [[Decode.oneOf]], you can use Result type to capture the outcome of each decoding attempt. Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
      },
      "date": 1694157625759
    },
    {
      "type": "edit",
      "id": "7fc56ea1991be688",
      "item": {
        "type": "paragraph",
        "id": "7fc56ea1991be688",
        "text": "To track successes and failures when using [[Decode.oneOf]], you can use Result type to capture the outcome of each decoding attempt."
      },
      "date": 1694158058291
    },
    {
      "type": "add",
      "id": "0809e0260f54428c",
      "item": {
        "type": "paragraph",
        "id": "0809e0260f54428c",
        "text": "Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
      },
      "after": "7fc56ea1991be688",
      "date": 1694158059040
    }
  ]
}