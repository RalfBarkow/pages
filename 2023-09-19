{
  "title": "2023-09-19",
  "story": [
    {
      "type": "paragraph",
      "id": "9e388c8fcd738609",
      "text": "⇒ [[Pile]] ⇒ [[KWIC Indexing]] ⇒ [[Trie]] ⇒ [[Patricia]]"
    },
    {
      "type": "image",
      "id": "927b9bf7f7dedbf1",
      "text": "[[Pile]] Demo – Full Text Search",
      "size": "wide",
      "width": 430,
      "height": 306,
      "url": "/assets/plugins/image/b5d516d536ccb78a4a7362bb4993bae1.jpg"
    },
    {
      "type": "paragraph",
      "id": "7a6e044f468d77d5",
      "text": "⇒ [[Index Thomisticus]]"
    },
    {
      "type": "markdown",
      "id": "24c73a357a8da545",
      "text": "> The most significant early employment of computer resources in the humanities was the [[Index Thomisticus]], a concordance to the works of Thomas Aquinas initiated by Father Roberto Busa. "
    },
    {
      "type": "reference",
      "id": "c89f914f144e67e0",
      "site": "ward.asia.wiki.org",
      "slug": "search-index-downloads",
      "title": "Search Index Downloads",
      "text": "We make available the search index as downloadable files in several formats including json objects designed for network graphing."
    },
    {
      "type": "reference",
      "id": "5f641616975f8402",
      "site": "jeff.dojo.fed.wiki",
      "slug": "typescript-transcripts",
      "title": "Typescript Transcripts",
      "text": "[[Robert Sterbal]] suggests that a reverse chronological list of the formatted transcripts would be useful for folks who would like to catch up. (2023-08-30). [[Transcript Suggestions]]"
    },
    {
      "type": "paragraph",
      "id": "ba3608543a2b7c0d",
      "text": "⇒ [[KWIC Index]] ⇐ [[KWIC Indexing]]"
    },
    {
      "type": "reference",
      "id": "67c2225983d2a677",
      "site": "sfw.c2.com",
      "slug": "reverse-index",
      "title": "Reverse Index",
      "text": "[[Reverse Index]] is the purpose of Category headings. It enables you to find all the references to something without knowing where they are."
    },
    {
      "type": "pagefold",
      "id": "6d338db350b4dca2",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "04df1bf88a2168c3",
      "text": "⇒ [[encode]] and [[decode]] a [[Story]] in the [[Journal]]"
    },
    {
      "type": "reference",
      "id": "ac4cf3a2b59894e7",
      "site": "wiki.ralfbarkow.ch",
      "slug": "pile-vs-neural-networks",
      "title": "Pile vs Neural Networks",
      "text": "[[Pile]] is bidirectional and thus contrasts with e.g. neural networks, which also encode data/signals but do not reliably re-produce them. "
    },
    {
      "type": "reference",
      "id": "cc98b4c155b5667f",
      "site": "wiki.ralfbarkow.ch",
      "slug": "code",
      "title": "Code",
      "text": "The term code indicates a “[[Duplication Rule]]” which allows the correlation of every entity within its area of observation with a corresponding entity within the system."
    },
    {
      "type": "pagefold",
      "id": "67ac1b5f5a2cb0a7",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "bb5eaa37dd7bb3fd",
      "site": "jeff.dojo.fed.wiki",
      "slug": "typescript-2023-09-17",
      "title": "Typescript 2023-09-17",
      "text": "Text extraction. See [[Typescript Archive]]"
    },
    {
      "type": "paragraph",
      "id": "adc58f5f2bc56f89",
      "text": "crazy.fed.wiki/register.js"
    },
    {
      "type": "reference",
      "id": "77d3f5238c4ae7c4",
      "site": "marc.relocalizecreativity.net",
      "slug": "explaining-relocalize-creativity",
      "title": "Explaining ReLocalize Creativity",
      "text": "Using screen recording to explain a [[Diagram]] relating the [[ReLocalize Creativity]] tools to each another. "
    },
    {
      "type": "paragraph",
      "id": "fe1573d1d5668719",
      "text": "⇒ [[Eric Dobbs]] ⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa] (cdn.jsdelivr.net needs script permisssion), [https://glitch.com/edit/#!/glitch-hello-installable?path=public%2Findex.js%3A2%3A0 glitch], [https://github.com/dobbs/wiki-spike-css github]"
    },
    {
      "type": "paragraph",
      "id": "a214ec7501d8d406",
      "text": "glitch-hello-installable [https://glitch.com/edit/#!/glitch-hello-installable?path=public%2Findex.js%3A2%3A0 page]"
    },
    {
      "type": "paragraph",
      "id": "53843f14030c508f",
      "text": "@observablehq/runtime [https://www.npmjs.com/package/@observablehq/runtime npm] ⇒ [[Observable Runtime]]"
    },
    {
      "type": "paragraph",
      "id": "c0c9f294e5e6bd59",
      "text": "AlgorithmWatch [https://algorithmwatch.ch/en/ site]"
    },
    {
      "type": "paragraph",
      "id": "a247afcd5f0474c2",
      "text": "⇒ [[Eric Dobbs]] ⇒ [[Wiki Spike CSS]] ⇒ Click the hamburger menu [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L63 code] ⇒ Explore Code ⇒ Inspect"
    },
    {
      "type": "image",
      "id": "70aa9b08fef02736",
      "text": "Explore Code",
      "size": "wide",
      "width": 430,
      "height": 165,
      "url": "/assets/plugins/image/d1841f6b5c81bfaea94a33f811faba97.jpg"
    },
    {
      "type": "paragraph",
      "id": "419df55f9bdb1dcf",
      "text": "Note: I my imagination I have already added another type. ⇒ [[MiniLatex]]"
    },
    {
      "type": "paragraph",
      "id": "8e5e4b983ecb95a0",
      "text": "⇒ Inspect ⇒ wiki.js [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js code]",
      "alias": "419df55f9bdb1dcf"
    },
    {
      "type": "code",
      "id": "047378642372f4e1",
      "text": "import {Runtime, Inspector, Library} from 'https://cdn.jsdelivr.net/npm/@observablehq/runtime@5.8.2/+esm'"
    },
    {
      "type": "code",
      "id": "bb0893e7ef637244",
      "text": "window.addEventListener(\"load\", async () => {\n"
    },
    {
      "type": "paragraph",
      "id": "91a5f56ffdbf51a0",
      "text": "⇒ Click the hamburger menu [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L63 code] ⇒ Explore Code ⇐ [[Ghost Page]]"
    },
    {
      "type": "code",
      "id": "edbe80afd5e6cbb1",
      "text": "  document.querySelector('footer form').addEventListener('submit', async event => {\n    event.preventDefault()\n    const article = event.target.closest('article')\n    const keepLineup = true\n    if (event.submitter.name == 'menu') {\n      event.stopPropagation()\n      event.stopImmediatePropagation()\n      wiki.addPanel(\n        wiki.ghost('Explore Code', [{type:'editor', text:'almost blank'}]),\n        article,\n        keepLineup\n      )\n      return\n    }\n    const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })\n\n"
    },
    {
      "type": "code",
      "id": "73b380697a912dca",
      "text": "function panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n"
    },
    {
      "type": "code",
      "id": "c35737429b80df9f",
      "text": "function randomId() {\n"
    },
    {
      "type": "code",
      "id": "991947fc794bc825",
      "text": "function ghost(title, story) {\n"
    },
    {
      "type": "code",
      "id": "8bbd18d18e23f250",
      "text": "async function sitemap(domain) {\n"
    },
    {
      "type": "code",
      "id": "3766cbe42967e0aa",
      "text": "async function panel(domain, {slug}) {\n"
    },
    {
      "type": "pagefold",
      "id": "87ed715cd2064434",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "1bf9eb99d29cbfc0",
      "site": "jon.federated.wiki",
      "slug": "carver-mead-rewrites-maxwell",
      "title": "Carver Mead rewrites Maxwell",
      "text": "Mead sees two important states of matter: coherent and incoherent. Before lasers there wasn't a lot of coherent to be so easily observed."
    },
    {
      "type": "paragraph",
      "id": "7400e9d73087909f",
      "text": "The Spectator Interview [https://web.archive.org/web/20040605034223/https://freespace.virgin.net/ch.thompson1/People/CarverMead.htm archive]"
    },
    {
      "type": "markdown",
      "id": "7627139653528441",
      "text": "> He picks up Feynman's challenge in a new book, [[Collective Electrodynamics]] (MIT Press), declaring that a physics that does not make sense, that defies human intuition, is obscurantist: It balks thought and intellectual progress. It blocks the light of the age. "
    },
    {
      "type": "paragraph",
      "id": "0cd9fe2b50e8cba6",
      "text": "Chip daddy Mead: 'A bunch of big egos' are strangling science [https://www.theregister.com/2013/02/20/carver_mead_on_the_future_of_science/ theregister]"
    },
    {
      "type": "video",
      "id": "1693d528df9b3623",
      "text": "YOUTUBE eAZWXX5930M\n[[Carver Mead]] “A Personal Journey Through the Information Revolution”"
    },
    {
      "type": "video",
      "id": "05c31b625ac07c60",
      "text": "YOUTUBE oGHRMpIR2NE\nKyoto Prize Laureate Introduction: [[Carver Mead]]"
    },
    {
      "type": "paragraph",
      "id": "45c1db2d97cd3cca",
      "text": "When I was a student, it was commonly understood that one would study a subject until one became an expert; then, one would go out into the world and apply that expertise in one’s profession. It went without saying that the expertise itself, as updated through one’s experience, would allow the practice of that profession until retirement. The tacit assumption involved in that world view was that the knowledge base evolves slowly, an assumption then already losing validity. Today, we face an explosive growth of knowledge; by any measure, our knowledge base is doubling every few years. How do we, as a human culture, prepare ourselves and our children for this world in which the knowledge base turns over many times within a single human lifetime? ([[Collective Electrodynamics]], Foreword)"
    },
    {
      "type": "paragraph",
      "id": "ebf1a7a412dacbad",
      "text": "⇒ [[Formulation of a Problem]]"
    },
    {
      "type": "paragraph",
      "id": "c412c04077aaff9e",
      "text": "[[Functional Programming]] was developed to make programs more transparent. [⇐ [[Funktionale Programmierung]]] "
    },
    {
      "type": "paragraph",
      "id": "2687950da038e81f",
      "text": "Functional programming renounces for this some concepts, which belong in the imperative and the object-oriented programming based on this to the standard. As a consequence a programming approach results, which differs from the classical imperative one: Instead of developing programs (algorithms), which prescribe step by step, how one arrives at the solution, one tries to seize the problem with the help of functions as precisely as possible."
    },
    {
      "type": "paragraph",
      "id": "ea5b9dda1b7cb051",
      "text": "In his wonderful book, [[The Act of Creation]], [[Arthur Koestler]] (3) defines the creative process as starting with the juxtaposition of two concepts from separate conceptual spaces. Such a conjunction creates not merely a new idea but an enlargement of the space of ideas, a cross-fertilization that is the very stuff of which innovation is made. If we, by education, by scientific practices, by social norms, restrict the development of individual talents to narrow specializations, we will thereby lose the ability to innovate."
    },
    {
      "type": "paragraph",
      "id": "69d560e9192c79d8",
      "text": "⇒ [[Juxtaposition of Two Concepts]] ⇒ [[Gegenbegriffsaustausch]] ⇒ [[Pile]] ⇒ [[Negate a Difference]] ⇒ ([A)] ⇒ [[Imaginary Pattern]]"
    },
    {
      "type": "paragraph",
      "id": "399a88a332638fb7",
      "text": "The form ([A)] is possible as an [[Imaginary Pattern]], but that extension to the concept of containment would also require a completely new mapping to the interpretation. That type of mapping is even difficult to write in conventional notation. Function notation also obeys the structural restrictions of containers. But we could read ([A)] as a Venn diagram, for instance, where the round- and square- boundaries each identify a set, and A identifies the intersection of both sets. The two overlapping functions become two different properties shared by the single object A."
    },
    {
      "type": "paragraph",
      "id": "96a6ee20a5a4d56e",
      "text": "Context: Chapter 9, [[Domain]], [[Accumulation]], ([A)], \"not a distinction\""
    },
    {
      "type": "paragraph",
      "id": "f202b0f80cfe1456",
      "text": "18. ([A)] is not a valid containment pattern: We are considering here only the act of distinction. A boundary identifies a difference. Set intersection denies that difference."
    },
    {
      "type": "paragraph",
      "id": "65415ae206e717e9",
      "text": "⇒ [[Closure]]: But there is a subtlety for void-based forms: closure loses meaning when transformations create void-equivalent forms. The [[Domain]] of [[Non-existent Form]]s is a [[Nonsense]] concept. ⇒ [[Wholeness Versus All]] ⇒ [[Object Intrinsically Addressable]] ⇒ [[Copy a Structure]]"
    },
    {
      "type": "reference",
      "id": "dda48e37a1f51d28",
      "site": "wiki.ralfbarkow.ch",
      "slug": "object-intrinsically-addressable",
      "title": "Object Intrinsically Addressable",
      "text": "Every knowledge object—from the largest documents, to aggregate branches, down to content units such as characters—has an unambiguous address, understandable and readable by a user, and referenceable anywhere in the hyperdocument system."
    },
    {
      "type": "paragraph",
      "id": "a945af58168d9e57",
      "text": "Note in the context of [[Closure]]: With the concept of [[Society]] as a totality (as a complete system)  we are [[refer]]ring to all of the [[Domain]] of [[Discourse]]. "
    },
    {
      "type": "paragraph",
      "id": "adecb46ea6cf09b8",
      "text": "We have the choice of building meaning upon a [[Domain]] that includes a lot of meaningless junk, or building the domain upon [[Meaning (Sinn)]], in which case there will be meaningless junk to clear away."
    },
    {
      "type": "paragraph",
      "id": "a582223f01f1cba8",
      "text": "The functional systems of society clear away as meaningless junk anything that is not re-produced by one of them - art, science, politics, law, etc."
    },
    {
      "type": "paragraph",
      "id": "1db9bf33bc82cc4e",
      "text": "When a new functional system of society differentiates itself, it removes, so to speak, parts of the previously meaningless junk."
    },
    {
      "type": "paragraph",
      "id": "3fdbef248e72737e",
      "text": "⇒ [[Inconsistent vs Consistent]] ⇐ [[Closure]]"
    },
    {
      "type": "markdown",
      "id": "ce320ef4afd03c08",
      "text": "> Stretching to adopt Gödel’s perspective, if we wish to address all possible structures (a complete system), then some will be illusionary (an inconsistent system). Alternatively if we wish to avoid illusion (a consistent system), then some structures will transform into nothing, leaving the system incomplete."
    },
    {
      "type": "paragraph",
      "id": "77bfe03ed0732153",
      "text": "[[Society]] [[address]]es all [[possible]] structure (a complete system). Some structures [⇒ [[Structure (Struktur)]]] will be illusionary (an inconsistent system)."
    },
    {
      "type": "paragraph",
      "id": "f7fc265c4a60a09d",
      "text": "Problem der Nichtadressierbarkeit [https://ralfbarkow.wordpress.com/2015/11/15/problem-der-nichtadressierbarkeit/ post]"
    },
    {
      "type": "paragraph",
      "id": "d5a0034d19e8c192",
      "text": "Von kreativen Sprüngen und überlebenden Fehlern [https://ralfbarkow.wordpress.com/2015/11/11/von-kreativen-spruengen-und-ueberlebenden-fehlern/ post]"
    },
    {
      "type": "paragraph",
      "id": "83885820078c8b0a",
      "text": "Two Concepts Of The Symbolic [https://ralfbarkow.wordpress.com/2007/01/29/two-concepts-of-the-symbolic/ post]"
    },
    {
      "type": "paragraph",
      "id": "526293b1d08751b7",
      "text": "0000000010… [https://ralfbarkow.wordpress.com/2006/11/29/0000000010/ post]"
    },
    {
      "type": "markdown",
      "id": "fc5f00bcfd64b77a",
      "text": "> How to achieve persistence of a 2D coordinate system representing connexions? This post explains it in a bottom-up approach."
    },
    {
      "type": "paragraph",
      "id": "29ef56cbfc2840d2",
      "text": "⇒ [[Persistent Binary String]] ⇒ Monads as containers [https://wiki.haskell.org/Monads_as_containers page]"
    },
    {
      "type": "paragraph",
      "id": "fea396a7aa92bce1",
      "text": "Combinative Pointer [https://ralfbarkow.wordpress.com/2006/05/12/combinative-pointer/ post]"
    },
    {
      "type": "paragraph",
      "id": "eb3083f06782d155",
      "text": "What is a Pile_Object without an observer? [https://ralfbarkow.wordpress.com/2006/05/04/what-is-a-pile_object-without-an-observer/ post] ⇒ [[Observation-Independent Reality]]"
    },
    {
      "type": "paragraph",
      "id": "8a806584090e767f",
      "text": "The thought that there would be an observation-independent reality is one that only a soulless babbling automaton can comfortably endure."
    },
    {
      "type": "paragraph",
      "id": "525c3414521d0cbf",
      "text": "⇒ [[Quantum Computation as Geometry]] [https://ralfbarkow.wordpress.com/2006/04/14/quantum-computation-as-geometry/ post], [https://doi.org/10.1126/science.1121541 doi] ⇒ [[Kolmogorov Complexity]] ⇒ Principle of [[Minimum Description Length]] (\"at least lg C bits long\")"
    },
    {
      "type": "markdown",
      "id": "a528945782d91170",
      "text": "> Here we show that finding optimal quantum circuits is essentially equivalent to finding the shortest path between two points in a certain curved geometry. By recasting the problem of finding quantum circuits as a geometric problem, we open up the possibility of using the mathematical techniques of Riemannian geometry to suggest new quantum algorithms or to prove limitations on the power of quantum computers."
    },
    {
      "type": "pagefold",
      "id": "3d1adfd4f74483bd",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "4b423120b3301f3f",
      "text": "⇒ [[James Form]] ⇒ [[James Units and Operations]] ⇒ [[Container Types]]"
    },
    {
      "type": "image",
      "id": "7cff5abf9e38d20b",
      "text": "Figure 6-1: James units and operations",
      "size": "wide",
      "width": 416,
      "height": 175,
      "url": "/assets/plugins/image/9efcdf9b8b36ab43eecb56b4ad6c58db.jpg"
    },
    {
      "type": "paragraph",
      "id": "ce5d7b264526726b",
      "text": "unit: [ ] – interpretation: –∞"
    },
    {
      "type": "paragraph",
      "id": "d9d3ddd412fc6643",
      "text": "unit: [A] – interpretation: log# A"
    },
    {
      "type": "paragraph",
      "id": "95b73fd7290e7349",
      "text": "⇒ [[Negate a Difference]] ⇒ ([A)] "
    },
    {
      "type": "markdown",
      "id": "c197a73c3bc028e3",
      "text": "> ([A)] is not a valid containment pattern: We are considering here only the act of [[Distinction]]. A boundary identifies a difference. [[Set Intersection]] denies that difference.",
      "alias": "f202b0f80cfe1456"
    },
    {
      "type": "paragraph",
      "id": "f9ea99283c9aee47",
      "text": "⇒ [A] – interpretation: log# A ⇒ [[Pile]] ⇒ [[Pile Memory]] ⇒ [[Tree Arranged on Pages]] "
    },
    {
      "type": "markdown",
      "id": "36a9b6917261a24a",
      "text": "> KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of “(JACK)” the node would contain the number 24 (which indicates the starting place of “JACK BUILT?” in the text string)."
    },
    {
      "type": "paragraph",
      "id": "b2bc4c7aee9397e5",
      "text": "log C ⇒ lg C ⇒ log10 C"
    },
    {
      "type": "paragraph",
      "id": "068095104323082e",
      "text": "⇒ [[Kolmogorov Complexity]] ⇒ Principle of [[Minimum Description Length]] (\"at least lg C bits long\") ⇒ [[Quantum Computation as Geometry]]: finding the shortest path between two points in a certain curved geometry. "
    },
    {
      "type": "pagefold",
      "id": "0edfff98b8f81d2e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "8c2733d497f18fcf",
      "text": "⇒ [[Loop]] [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page], statementsHelp,  ParserHelpers [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L6-L7 code]"
    },
    {
      "type": "paragraph",
      "id": "f60f58d21e281fff",
      "text": "Notice that the statements are tracked in reverse as we [[Loop]], and we reorder them only once we are Done. This is a very common pattern with loop! [⇒ [[Track in Reverse Order]]]"
    },
    {
      "type": "markdown",
      "id": "097128d65eddb346",
      "text": "> Check out DoubleQuoteString.elm [https://github.com/elm/parser/blob/master/examples/DoubleQuoteString.elm code] for another example."
    },
    {
      "type": "paragraph",
      "id": "9450c7539e77f2c4",
      "text": "⇒ [[Escape Characters]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-09-19",
        "story": []
      },
      "date": 1695096950676
    },
    {
      "item": {
        "type": "factory",
        "id": "927b9bf7f7dedbf1"
      },
      "id": "927b9bf7f7dedbf1",
      "type": "add",
      "date": 1695096952190
    },
    {
      "type": "edit",
      "id": "927b9bf7f7dedbf1",
      "item": {
        "type": "image",
        "id": "927b9bf7f7dedbf1",
        "text": "[[Pile]] Demo – Full Text Search",
        "size": "wide",
        "width": 430,
        "height": 306,
        "url": "/assets/plugins/image/b5d516d536ccb78a4a7362bb4993bae1.jpg"
      },
      "date": 1695096993974
    },
    {
      "item": {
        "type": "factory",
        "id": "9e388c8fcd738609"
      },
      "id": "9e388c8fcd738609",
      "type": "add",
      "after": "927b9bf7f7dedbf1",
      "date": 1695097251595
    },
    {
      "id": "9e388c8fcd738609",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1"
      ],
      "date": 1695097253237
    },
    {
      "type": "edit",
      "id": "9e388c8fcd738609",
      "item": {
        "type": "paragraph",
        "id": "9e388c8fcd738609",
        "text": "⇒ [[Pile]]"
      },
      "date": 1695097254933
    },
    {
      "type": "edit",
      "id": "9e388c8fcd738609",
      "item": {
        "type": "paragraph",
        "id": "9e388c8fcd738609",
        "text": "⇒ [[Pile]] ⇒ [[KWIC Indexing]] ⇒ [[Trie]] ⇒ [[Patricia]]"
      },
      "date": 1695097335480
    },
    {
      "item": {
        "type": "factory",
        "id": "7a6e044f468d77d5"
      },
      "id": "7a6e044f468d77d5",
      "type": "add",
      "after": "927b9bf7f7dedbf1",
      "date": 1695098878684
    },
    {
      "type": "edit",
      "id": "7a6e044f468d77d5",
      "item": {
        "type": "paragraph",
        "id": "7a6e044f468d77d5",
        "text": "⇒ [[Index Thomisticus]]"
      },
      "date": 1695098888095
    },
    {
      "id": "24c73a357a8da545",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "24c73a357a8da545",
        "text": "> The most significant early employment of computer resources in the humanities was the [[Index Thomisticus]], a concordance to the works of Thomas Aquinas initiated by Father Roberto Busa. The Index became the basis for the published and database versions of the concordance and is considered to be the first electronic text project in the humanities (Smith, 2002). The project began as a government-industry-scholarly partnership, launching the first generation of IBM’s large-scale digital calculating machines for research work nearly two decades before the computing industry started expanding its reach to everyday life. When “in 1950, Roberto Busa, S.J. announced in Speculum (25:424-25) his plans for an index to the works of Thomas Aquinas, requesting ‘any information ... about such mechanical devices as would serve to achieve the greatest possible accuracy, with a maximum economy of human labor’” (Burton, 1984, p. 891). Published some 30 years later (in 1974-1979), the Index became the work of major importance for theologians, philosophers, cultural historians, medievalists, Latin scholars, and linguists (Burton, 1984)."
      },
      "after": "7a6e044f468d77d5",
      "attribution": {
        "page": "Index Thomisticus"
      },
      "date": 1695098909834
    },
    {
      "type": "edit",
      "id": "24c73a357a8da545",
      "item": {
        "type": "markdown",
        "id": "24c73a357a8da545",
        "text": "> The most significant early employment of computer resources in the humanities was the [[Index Thomisticus]], a concordance to the works of Thomas Aquinas initiated by Father Roberto Busa. "
      },
      "date": 1695098916722
    },
    {
      "item": {
        "type": "factory",
        "id": "c89f914f144e67e0"
      },
      "id": "c89f914f144e67e0",
      "type": "add",
      "after": "24c73a357a8da545",
      "date": 1695098959995
    },
    {
      "type": "edit",
      "id": "c89f914f144e67e0",
      "item": {
        "type": "reference",
        "id": "c89f914f144e67e0",
        "site": "ward.asia.wiki.org",
        "slug": "search-index-downloads",
        "title": "Search Index Downloads",
        "text": "We make available the search index as downloadable files in several formats including json objects designed for network graphing."
      },
      "date": 1695098964241
    },
    {
      "item": {
        "type": "factory",
        "id": "5f641616975f8402"
      },
      "id": "5f641616975f8402",
      "type": "add",
      "after": "c89f914f144e67e0",
      "date": 1695099290053
    },
    {
      "type": "edit",
      "id": "5f641616975f8402",
      "item": {
        "type": "reference",
        "id": "5f641616975f8402",
        "site": "jeff.dojo.fed.wiki",
        "slug": "typescript-transcripts",
        "title": "Typescript Transcripts",
        "text": "Robert Sterbal suggests that a reverse chronological list of the formatted transcripts would be useful for folks who would like to catch up. (2023-08-30). [[Transcript Suggestions]]"
      },
      "date": 1695099293679
    },
    {
      "type": "edit",
      "id": "5f641616975f8402",
      "item": {
        "type": "reference",
        "id": "5f641616975f8402",
        "site": "jeff.dojo.fed.wiki",
        "slug": "typescript-transcripts",
        "title": "Typescript Transcripts",
        "text": "[[Robert Sterbal]] suggests that a reverse chronological list of the formatted transcripts would be useful for folks who would like to catch up. (2023-08-30). [[Transcript Suggestions]]"
      },
      "date": 1695099306205
    },
    {
      "item": {
        "type": "factory",
        "id": "ba3608543a2b7c0d"
      },
      "id": "ba3608543a2b7c0d",
      "type": "add",
      "after": "5f641616975f8402",
      "date": 1695099422290
    },
    {
      "type": "edit",
      "id": "ba3608543a2b7c0d",
      "item": {
        "type": "paragraph",
        "id": "ba3608543a2b7c0d",
        "text": "⇒ [[KWIC Index]]"
      },
      "date": 1695099437336
    },
    {
      "type": "edit",
      "id": "ba3608543a2b7c0d",
      "item": {
        "type": "paragraph",
        "id": "ba3608543a2b7c0d",
        "text": "⇒ [[KWIC Index]] ⇐ [[KWIC Indexing]]"
      },
      "date": 1695099522050
    },
    {
      "item": {
        "type": "factory",
        "id": "6d338db350b4dca2"
      },
      "id": "6d338db350b4dca2",
      "type": "add",
      "after": "ba3608543a2b7c0d",
      "date": 1695099822708
    },
    {
      "type": "edit",
      "id": "6d338db350b4dca2",
      "item": {
        "type": "pagefold",
        "id": "6d338db350b4dca2",
        "text": "~"
      },
      "date": 1695099825672
    },
    {
      "item": {
        "type": "factory",
        "id": "04df1bf88a2168c3"
      },
      "id": "04df1bf88a2168c3",
      "type": "add",
      "after": "6d338db350b4dca2",
      "date": 1695099826911
    },
    {
      "type": "edit",
      "id": "04df1bf88a2168c3",
      "item": {
        "type": "paragraph",
        "id": "04df1bf88a2168c3",
        "text": "⇒ [[encode]] a [[Story]] in the [[Journal]] and [[decode]]"
      },
      "date": 1695099870034
    },
    {
      "id": "cc98b4c155b5667f",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "cc98b4c155b5667f",
        "site": "wiki.ralfbarkow.ch",
        "slug": "code",
        "title": "Code",
        "text": "The term code indicates a “[[Duplication Rule]]” which allows the correlation of every entity within its area of observation with a corresponding entity within the system."
      },
      "after": "04df1bf88a2168c3",
      "attribution": {
        "page": "decode"
      },
      "date": 1695099940305
    },
    {
      "id": "ac4cf3a2b59894e7",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "ac4cf3a2b59894e7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "pile-vs-neural-networks",
        "title": "Pile vs Neural Networks",
        "text": "Data, e.g. \"PETER\", are not held \"in the system\" themselves, but are represented by \"placeholders\" or the linking of \"placeholders\". The data itself is therefore not \"in the system\", but can only be generated from it again. [[Pile]] is in this respect bidirectional and stands thus in contrast to e.g. neural networks, which encode data/signals also, but do not produce again reliably. But this is not their purpose. But that is the purpose of a pile – and in this respect it is and remains a data storage device. ([[Ralf Westphal]] (2006), personal commun"
      },
      "after": "04df1bf88a2168c3",
      "attribution": {
        "page": "encode"
      },
      "date": 1695099971930
    },
    {
      "type": "edit",
      "id": "ac4cf3a2b59894e7",
      "item": {
        "type": "reference",
        "id": "ac4cf3a2b59894e7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "pile-vs-neural-networks",
        "title": "Pile vs Neural Networks",
        "text": "[[Pile]] is bidirectional and stands thus in contrast to e.g. neural networks, which encode data/signals also, but do not produce again reliably. But this is not their purpose. But that is the purpose of a pile – and in this respect it is and remains a data storage device. ([[Ralf Westphal]] (2006), personal commun"
      },
      "date": 1695099991278
    },
    {
      "type": "edit",
      "id": "ac4cf3a2b59894e7",
      "item": {
        "type": "reference",
        "id": "ac4cf3a2b59894e7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "pile-vs-neural-networks",
        "title": "Pile vs Neural Networks",
        "text": "[[Pile]] is bidirectional and stands thus in contrast to e.g. neural networks, which encode data/signals also, but do not produce again reliably. "
      },
      "date": 1695100013052
    },
    {
      "type": "edit",
      "id": "ac4cf3a2b59894e7",
      "item": {
        "type": "reference",
        "id": "ac4cf3a2b59894e7",
        "site": "wiki.ralfbarkow.ch",
        "slug": "pile-vs-neural-networks",
        "title": "Pile vs Neural Networks",
        "text": "[[Pile]] is bidirectional and thus contrasts with e.g. neural networks, which also encode data/signals but do not reliably re-produce them. "
      },
      "date": 1695100027459
    },
    {
      "type": "edit",
      "id": "04df1bf88a2168c3",
      "item": {
        "type": "paragraph",
        "id": "04df1bf88a2168c3",
        "text": "⇒ [[encode]] and [[decode]] a [[Story]] in the [[Journal]]"
      },
      "date": 1695100167768
    },
    {
      "item": {
        "type": "factory",
        "id": "67c2225983d2a677"
      },
      "id": "67c2225983d2a677",
      "type": "add",
      "after": "cc98b4c155b5667f",
      "date": 1695100509472
    },
    {
      "id": "67c2225983d2a677",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f"
      ],
      "date": 1695100511622
    },
    {
      "type": "edit",
      "id": "67c2225983d2a677",
      "item": {
        "type": "reference",
        "id": "67c2225983d2a677",
        "site": "sfw.c2.com",
        "slug": "reverse-index",
        "title": "Reverse Index",
        "text": "[[Reverse Index]] is the purpose of Category headings. It enables you to find all the references to something without knowing where they are."
      },
      "date": 1695100514321
    },
    {
      "item": {
        "type": "factory",
        "id": "67ac1b5f5a2cb0a7"
      },
      "id": "67ac1b5f5a2cb0a7",
      "type": "add",
      "after": "cc98b4c155b5667f",
      "date": 1695102111427
    },
    {
      "type": "edit",
      "id": "67ac1b5f5a2cb0a7",
      "item": {
        "type": "pagefold",
        "id": "67ac1b5f5a2cb0a7",
        "text": "~"
      },
      "date": 1695102114714
    },
    {
      "item": {
        "type": "factory",
        "id": "77d3f5238c4ae7c4"
      },
      "id": "77d3f5238c4ae7c4",
      "type": "add",
      "after": "67ac1b5f5a2cb0a7",
      "date": 1695102116106
    },
    {
      "type": "edit",
      "id": "77d3f5238c4ae7c4",
      "item": {
        "type": "reference",
        "id": "77d3f5238c4ae7c4",
        "site": "marc.relocalizecreativity.net",
        "slug": "explaining-relocalize-creativity",
        "title": "Explaining ReLocalize Creativity",
        "text": "Using screen recording to explain an [https://arrows.app/#/import/json=eyJncmFwaCI6eyJzdHlsZSI6eyJmb250LWZhbWlseSI6InNhbnMtc2VyaWYiLCJiYWNrZ3JvdW5kLWNvbG9yIjoiI2ZmZmZmZiIsImJhY2tncm91bmQtaW1hZ2UiOiIiLCJiYWNrZ3JvdW5kLXNpemUiOiIxMDAlIiwibm9kZS1jb2xvciI6IiNmZmZmZmYiLCJib3JkZXItd2lkdGgiOjQsImJvcmRlci1jb2xvciI6IiMwMDAwMDAiLCJyYWRpdXMiOjUwLCJub2RlLXBhZGRpbmciOjUsIm5vZGUtbWFyZ2luIjoyLCJvdXRzaWRlLXBvc2l0aW9uIjoiYXV0byIsIm5vZGUtaWNvbi1pbWFnZSI6IiIsIm5vZGUtYmFja2dyb3VuZC1pbWFnZSI6IiIsImljb24tcG9zaXRpb24iOiJpbnNpZGUiLCJpY29uLXNpemUiOjY0LCJjYXB0aW9uLXBvc2l0aW9uIjoia"
      },
      "date": 1695102120119
    },
    {
      "type": "edit",
      "id": "77d3f5238c4ae7c4",
      "item": {
        "type": "reference",
        "id": "77d3f5238c4ae7c4",
        "site": "marc.relocalizecreativity.net",
        "slug": "explaining-relocalize-creativity",
        "title": "Explaining ReLocalize Creativity",
        "text": "Using screen recording to explain a [[Diagram]]"
      },
      "date": 1695102163397
    },
    {
      "type": "edit",
      "id": "77d3f5238c4ae7c4",
      "item": {
        "type": "reference",
        "id": "77d3f5238c4ae7c4",
        "site": "marc.relocalizecreativity.net",
        "slug": "explaining-relocalize-creativity",
        "title": "Explaining ReLocalize Creativity",
        "text": "Using screen recording to explain a [[Diagram]] relating the ReLocalize Creativity tool to one another. "
      },
      "date": 1695102278026
    },
    {
      "type": "edit",
      "id": "77d3f5238c4ae7c4",
      "item": {
        "type": "reference",
        "id": "77d3f5238c4ae7c4",
        "site": "marc.relocalizecreativity.net",
        "slug": "explaining-relocalize-creativity",
        "title": "Explaining ReLocalize Creativity",
        "text": "Using screen recording to explain a [[Diagram]] relating the [[ReLocalize Creativity]] tools to one another. "
      },
      "date": 1695102311021
    },
    {
      "type": "edit",
      "id": "77d3f5238c4ae7c4",
      "item": {
        "type": "reference",
        "id": "77d3f5238c4ae7c4",
        "site": "marc.relocalizecreativity.net",
        "slug": "explaining-relocalize-creativity",
        "title": "Explaining ReLocalize Creativity",
        "text": "Using screen recording to explain a [[Diagram]] relating the [[ReLocalize Creativity]] tools to each another. "
      },
      "date": 1695102526972
    },
    {
      "item": {
        "type": "factory",
        "id": "aff15c4dd552d607"
      },
      "id": "aff15c4dd552d607",
      "type": "add",
      "after": "77d3f5238c4ae7c4",
      "date": 1695102874026
    },
    {
      "type": "edit",
      "id": "aff15c4dd552d607",
      "item": {
        "type": "code",
        "id": "aff15c4dd552d607",
        "text": "import {Runtime, Inspector, Library} from 'https://cdn.jsdelivr.net/npm/@observablehq/runtime@5.8.2/+esm'"
      },
      "date": 1695102876941
    },
    {
      "item": {
        "type": "factory",
        "id": "c0c9f294e5e6bd59"
      },
      "id": "c0c9f294e5e6bd59",
      "type": "add",
      "after": "aff15c4dd552d607",
      "date": 1695103109908
    },
    {
      "type": "edit",
      "id": "c0c9f294e5e6bd59",
      "item": {
        "type": "paragraph",
        "id": "c0c9f294e5e6bd59",
        "text": "AlgorithmWatch"
      },
      "date": 1695103114909
    },
    {
      "type": "edit",
      "id": "c0c9f294e5e6bd59",
      "item": {
        "type": "paragraph",
        "id": "c0c9f294e5e6bd59",
        "text": "AlgorithmWatch [https://algorithmwatch.ch/de/ site]"
      },
      "date": 1695103122594
    },
    {
      "type": "edit",
      "id": "c0c9f294e5e6bd59",
      "item": {
        "type": "paragraph",
        "id": "c0c9f294e5e6bd59",
        "text": "AlgorithmWatch [https://algorithmwatch.ch/en/ site]"
      },
      "date": 1695103137462
    },
    {
      "item": {
        "type": "factory",
        "id": "fe1573d1d5668719"
      },
      "id": "fe1573d1d5668719",
      "type": "add",
      "after": "c0c9f294e5e6bd59",
      "date": 1695103287846
    },
    {
      "id": "fe1573d1d5668719",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "aff15c4dd552d607",
        "c0c9f294e5e6bd59"
      ],
      "date": 1695103290122
    },
    {
      "type": "edit",
      "id": "fe1573d1d5668719",
      "item": {
        "type": "paragraph",
        "id": "fe1573d1d5668719",
        "text": "https://css-spikes.dbbs.co/pwa/"
      },
      "date": 1695103294989
    },
    {
      "type": "edit",
      "id": "fe1573d1d5668719",
      "item": {
        "type": "paragraph",
        "id": "fe1573d1d5668719",
        "text": "⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa]"
      },
      "date": 1695103466173
    },
    {
      "type": "edit",
      "id": "fe1573d1d5668719",
      "item": {
        "type": "paragraph",
        "id": "fe1573d1d5668719",
        "text": "⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa], [https://glitch.com/edit/#!/glitch-hello-installable?path=public%2Findex.js%3A2%3A0 glitch]"
      },
      "date": 1695103621970
    },
    {
      "type": "edit",
      "id": "fe1573d1d5668719",
      "item": {
        "type": "paragraph",
        "id": "fe1573d1d5668719",
        "text": "⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa] (cdn.jsdelivr.net needs script permisssion), [https://glitch.com/edit/#!/glitch-hello-installable?path=public%2Findex.js%3A2%3A0 glitch]"
      },
      "date": 1695103734196
    },
    {
      "item": {
        "type": "factory",
        "id": "32cc5013ccfd09d8"
      },
      "id": "32cc5013ccfd09d8",
      "type": "add",
      "after": "c0c9f294e5e6bd59",
      "date": 1695103842168
    },
    {
      "type": "edit",
      "id": "32cc5013ccfd09d8",
      "item": {
        "type": "paragraph",
        "id": "32cc5013ccfd09d8",
        "text": "⇒ [[MiniLatex]]"
      },
      "date": 1695103854349
    },
    {
      "item": {
        "type": "factory",
        "id": "adc58f5f2bc56f89"
      },
      "id": "adc58f5f2bc56f89",
      "type": "add",
      "after": "32cc5013ccfd09d8",
      "date": 1695104126839
    },
    {
      "type": "edit",
      "id": "adc58f5f2bc56f89",
      "item": {
        "type": "paragraph",
        "id": "adc58f5f2bc56f89",
        "text": "crazy.fed.wiki/register.js"
      },
      "date": 1695104128461
    },
    {
      "item": {
        "type": "factory",
        "id": "047378642372f4e1"
      },
      "id": "047378642372f4e1",
      "type": "add",
      "after": "32cc5013ccfd09d8",
      "date": 1695104231038
    },
    {
      "type": "edit",
      "id": "047378642372f4e1",
      "item": {
        "type": "code",
        "id": "047378642372f4e1",
        "text": "import {Runtime, Inspector, Library} from 'https://cdn.jsdelivr.net/npm/@observablehq/runtime@5.8.2/+esm'\nwindow.addEventListener(\"load\", async () => {\n  const wiki = {}\n\n  // document.addEventListener('dragstart', event => event.preventDefault())\n  // document.addEventListener('dragover', event => event.preventDefault())\n  // document.addEventListener('drop', async function drop(event) {\n  //   event.preventDefault()\n  //   const {files, items, types} = (event.dataTransfer||{})\n  //   wiki.addPanel(ghost('Drop Inspector', [{\n  //     type:'unknown',\n  //     text:'',\n  //     event,\n  //     files,\n  //     items,\n  //     types\n  //   }]))\n  // })\n  // document.addEventListener('paste', async function paste(event) {\n  //   event.preventDefault()\n  //   const {clipboardData} = event\n  //   const {files, items, types} = clipboardData\n  //   wiki.addPanel(ghost('Paste Inspector', [{\n  //     type:'unknown',\n  //     text:'',\n  //     event,\n  //     files,\n  //     items,\n  //     types\n  //   }]))\n  // })\n\n  document.querySelector('footer form').addEventListener('submit', async event => {\n    event.preventDefault()\n    const article = event.target.closest('article')\n    const keepLineup = true\n    if (event.submitter.name == 'menu') {\n      event.stopPropagation()\n      event.stopImmediatePropagation()\n      wiki.addPanel(\n        wiki.ghost('Explore Code', [{type:'editor', text:'almost blank'}]),\n        article,\n        keepLineup\n      )\n      return\n    }\n    const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })\n\n  const stdlib = new Library()\n  const lib = Object.assign({}, stdlib, {\n    async linked() {\n      return function linked(text) {\n        return text\n          .replace(/\\[\\[(.*?)\\]\\]/g, (_,title) => `<a class=\"internal\" data-title=\"${title}\" href=\"#\">${title}</a>`)\n          .replace(/\\[(https?:.*?) (.*?)\\]/g, (_,url,word) => `<a href=\"${url.replace(/^https?:/,'')}\">${word}</a>`)\n      }\n    },\n    async annotateLinks() {\n      return function annotateLinks(el) {\n        el.querySelectorAll('a').forEach(a => {\n          if (a.classList.contains('internal')) {\n            a.onclick = event => {\n              let {title} = event.target.dataset.title\n              // TODO do the internal link thing\n            }\n          } else {\n            a.setAttribute('target', '_blank')\n          }\n        })\n        return el\n      }\n    },\n    async html() {\n      const {default:DOMPurify} = await import('https://cdn.jsdelivr.net/npm/dompurify@3.0.5/+esm')\n      const origHtml = await stdlib.html()\n\n      function sanitize(dirty) {\n        return DOMPurify.sanitize(dirty, {\n          RETURN_DOM: true,\n          SANITIZE_DOM: false,\n          IN_PLACE: true,\n          ADD_TAGS: ['foreignObject', 'feDropShadow']\n        });\n      }\n\n      return function sanitizedTaggedTemplateLiteral(...args) {\n        return sanitize(origHtml(...args))\n      }\n    }\n  })\n  Object.assign(wiki, {\n    runtime: new Runtime(lib),\n    lineup: [],\n    modules: [],\n    plugins: [\n      {\n        type: 'unknown',\n        deps: ['html'],\n        fn: (item, html) => {\n          const div = document.createElement('div')\n          div.classList.add('item', 'unknown')\n          const inspector = new Inspector(div)\n          inspector.fulfilled(item)\n          div.prepend(html`<p><em>Unknown type:</em> ${item.type}`)\n          return div\n        }\n      },\n      {\n        type: 'editor',\n        deps: ['html'],\n        fn: (item, html) => {\n          const editor = html`\n          <div>\n            <button>Show Preview</button>\n            <select>\n              ${wiki.plugins.map(p => html`<option value=\"${p.type}\">${p.type}</option>`)}\n            </select>\n            <textarea rows=\"12\" style=\"width:100%;\">${item.text}</textarea>\n          </div>`\n          editor.dataset.id = `item${item.id}`\n          editor.value = {\n            id: `item${wiki.randomId()}`,\n            type: wiki.plugins[0].type,\n            text: item.text\n          }\n          editor.querySelector('select').addEventListener('change', event => {\n            editor.value = {...editor.value, type: event.target.value}\n            editor.dispatchEvent(new Event('input'))\n          })\n          editor.querySelector('textarea').addEventListener('input', event => {\n            editor.value = {...editor.value, text: event.currentTarget.value}\n          })\n          editor.querySelector('button').addEventListener('click', event => {\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            const panelId = article.getAttribute('id')\n            const panel = wiki.ghost('Preview', [{\n              ...editor.value,\n              observe: {panelId, itemId: `item${item.id}`}\n            }])\n            //TODO viewer is not the right name\n            panel.notebook = 'viewer'\n            wiki.addPanel(panel, article, keepLineup)\n          })\n          return editor\n        }\n      },\n      {\n        type: 'paragraph',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`<p>${linked(item.text)}`)\n      },\n      {\n        type: 'html',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`${linked(item.text)}`)\n      },\n      {\n        type: 'markdown',\n        deps: ['md', 'linked', 'annotateLinks'],\n        fn: (item, md, linked, annotateLinks) => annotateLinks(md`${linked(item.text)}`)\n      },\n      {\n        type: 'reference',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => {\n          const {site, slug, title, text} = item\n          const flag = `//${site}/favicon.png`\n          const p = annotateLinks(html`\n          <p><img class=\"remote\" src=\"${flag}\">\n            <a class=\"internal\" data-title=\"${title}\"\n               href=\"//${site}/${slug}.html\">${title}</a> - ${linked(text)}`)\n\n          p.querySelector('a[data-title]').addEventListener('click', async (event) => {\n            event.preventDefault()\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            try {\n              const res = await fetch(`//${site}/${slug}.json`)\n              let page =  await res.json()\n              wiki.addPanel({id: randomId(), flag, page}, article, keepLineup)\n            } catch(error) {\n              wiki.addPanel(ghost(title, [{\n                type: 'unknown',\n                text: 'create this page'\n              }]), article, keepLineup)\n            }\n          })\n          return p\n        }\n      },\n      {\n        type: 'pagefold',\n        deps: ['html'],\n        fn: (item, html) => html`<hr class=\"pagefold\" data-content=\"${item.text}\">`\n      }\n    ],\n    addPanel(panel, article, keepLineup=false) {\n      if (!!keepLineup == false) {\n        const mainEl = document.querySelector('main')\n        while (mainEl.lastChild && mainEl.lastChild.firstChild != article) {\n          wiki.lineup.pop()\n          wiki.modules.pop()\n          mainEl.lastChild.remove()\n        }\n      }\n        wiki.lineup.push(panel)\n        const pragmas = panel.page.story.filter(item => item.text.startsWith('►'))\n        if(pragmas.length) {\n          console.log({pragmas:pragmas.map(item=>item.text)})\n        }\n        const module = panelModule(wiki.runtime, panel)\n        wiki.modules.push(module)\n        /*\n          We have coupled the next bit of code to invasive knowledge\n          about panelModule(). TODO is there a better way to do this?\n\n          We started this with:\n\n          document.querySelector('main').lastChild.scrollIntoView()\n\n          That scrolled before the new page had been rendered in the\n          DOM.\n\n          What we have now works, but it has to know that 'panel' is a\n          special variable name, that it updates the DOM as a\n          side-effect, and that it specifically adds to 'main'.\n        */\n        module.value('panel').then(panel =>\n          document.querySelector(\"main > *:last-of-type\")\n            .scrollIntoView({behavior:'smooth'})\n        )\n    },\n    findPage({title, context=[]}) {\n      for(let siteMap of context) {\n        for(let page of Object.values(siteMap)) {\n          if (page.title.toLowerCase() == title.toLowerCase()) {\n            return page\n          }\n        }\n      }\n      return {}\n    },\n    ghost,\n    randomId,\n    sitemap,\n    panel\n  })\n\n  const notebooks = [\n    {\n      notebook: 'page',\n      fn: panelAdapter\n    },\n    {\n      notebook: 'viewer',\n      fn({id, flag, page: {title, story=[], journal=[]}}) {\n        return function define(runtime, observer) {\n          const main = runtime.module()\n          // TODO main.variable(observer('twins')).define(/* ... */)\n\n          const {panelId, itemId} = story[0].observe\n          const idx = wiki.lineup.findIndex(p => `panel${p.id}` == panelId)\n          main.import(itemId, 'item', wiki.modules[idx])\n          main.variable().define(\n            'plugin',\n            ['item'],\n            (item) => wiki.plugins.find(({type}) => type == item.type)\n          )\n\n          // initialize preview with an empty div so it exists before\n          // we have to redefine it when the author changes the editor\n          main.variable().define('preview', ['html'], html => html`<div>`)\n          // anonymous variable subscribes to changes in 'plugin' and\n          // redefines 'preview' accordingly\n          main.variable(true).define(\n            ['plugin'],\n            async plugin => {\n              main.redefine('preview', ['item', ...plugin.deps], plugin.fn)\n            }\n          )\n\n          main.variable().define('width', '490px')\n          main.variable().define('title', title)\n          main.variable().define('flag', flag)\n          main.variable().define('panelId', `panel${id}`)\n\n          // TODO for(let edit of journal) {/*...*/}\n          main.variable(observer('panel')).define(\n            'panel',\n            ['html', 'width', 'title', 'flag', 'panelId', 'preview'],\n            (html, width, title, flag, panelId, preview) => html`\n            <article id=\"${panelId}\">\n            <div class=twins></div>\n            <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n            ${preview}\n            <footer></footer>\n            </article>`\n          )\n        }\n      }\n    }\n  ]\n\n  function panelModule(runtime, panel) {\n    const {notebook='page'} = panel\n    const adapter = notebooks.find(nb => nb.notebook == notebook).fn\n    return runtime.module(\n      adapter(panel),\n      name => {\n        if (name == 'panel') {\n          return Inspector.into('main')()\n        }\n        return null\n      }\n    )\n  }\n\n  window.wiki = wiki\n})\n\nfunction panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n  // TODO panelAdapter() is not the right name--keep having to ask\n  // what this thing does. It is an adapter which adapts a wiki panel\n  // into an Observable module definition. But the name on the outside\n  // doesn't explain the role within Observable.\n\n  // TODO maybe change flag to site and lookup the flag from the site\n  return function define(runtime, observer) {\n    const main = runtime.module()\n    // TODO main.variable(observer('twins')).define(/* ... */)\n    main.variable().define('width', '490px')\n    main.variable().define('title', title)\n    main.variable().define('flag', flag)\n    main.variable().define('panelId', `panel${id}`)\n    for(let item of story) {\n      // Using item.id to name the Observable variables. Not sure this\n      // will be useful. Although id collisions are very unlikely,\n      // they are not impossible and they will be very confusing to\n      // debug. maybe TODO: guarantee uniqueness here\n      //\n      // Speculate that wiki's look-left pattern can be represented in\n      // Observable by using variable.import() in page modules to the\n      // right pulling variables from pages modules to their left.\n      // https://github.com/observablehq/runtime#variable_import\n\n      // TODO: wrap this function in some way to inject the wiki\n      // dependency, or more specifically, the plugins, instead of\n      // using a global here\n      let plugin = window.wiki.plugins.find(({type}) => type == item.type)\n      plugin ||= window.wiki.plugins.find(({type}) => type == 'unknown')\n      const itemId = `item${item.id}`\n      main.variable().define(`boot${item.id}`, () => item)\n      main.variable().define(`viewof ${itemId}`, [`boot${item.id}`, ...plugin.deps], plugin.fn)\n      main.variable()\n        .define(itemId, ['Generators', `viewof ${itemId}`], (G, el) => G.input(el))\n    }\n    const deps = ['html', 'title', 'flag', 'panelId', 'width',\n                  ...story.map(item => `viewof item${item.id}`)]\n    main.variable(observer('panel'))\n      .define('panel', deps, (html, title, flag, panelId, width, ...story) => {\n        return html`\n          <article id=\"${panelId}\">\n          <div class=twins></div>\n          <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n          ${story}\n          <footer></footer>\n          </article>`\n      })\n    // TODO for(let edit of journal) {/*...*/}\n  }\n}\n\nfunction randomId() {\n  let x = new Uint32Array(2)\n  crypto.getRandomValues(x)\n  return Array.from(x, i=>i.toString(16)).join('')\n}\n\nfunction ghost(title, story) {\n  let page = {title, story: story.map(item => ({\n    id: randomId(),\n    type: 'paragraph',\n    ...item\n  }))}\n  let journal = [{\n    action: 'create',\n    item: page,\n    date: +(new Date())\n  }]\n  return {\n    id: randomId(),\n    flag: './icon-120.png',\n    page: {\n      ...page,\n      journal\n    }\n  }\n}\n\nasync function sitemap(domain) {\n  try {\n    const res = await fetch(`//${domain}/system/sitemap.json`)\n    return {\n      domain,\n      sitemap: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n\nasync function panel(domain, {slug}) {\n  try {\n    const res = await fetch(`//${domain}/${slug}.json`)\n    return {\n      id: randomId(),\n      flag: `//${domain}/favicon.png`,\n      page: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n"
      },
      "date": 1695104233194
    },
    {
      "type": "edit",
      "id": "047378642372f4e1",
      "item": {
        "type": "code",
        "id": "047378642372f4e1",
        "text": "import {Runtime, Inspector, Library} from 'https://cdn.jsdelivr.net/npm/@observablehq/runtime@5.8.2/+esm'\nwindow.addEventListener(\"load\", async () => {\n  const wiki = {}\n\n  document.querySelector('footer form').addEventListener('submit', async event => {\n    event.preventDefault()\n    const article = event.target.closest('article')\n    const keepLineup = true\n    if (event.submitter.name == 'menu') {\n      event.stopPropagation()\n      event.stopImmediatePropagation()\n      wiki.addPanel(\n        wiki.ghost('Explore Code', [{type:'editor', text:'almost blank'}]),\n        article,\n        keepLineup\n      )\n      return\n    }\n    const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })\n\n  const stdlib = new Library()\n  const lib = Object.assign({}, stdlib, {\n    async linked() {\n      return function linked(text) {\n        return text\n          .replace(/\\[\\[(.*?)\\]\\]/g, (_,title) => `<a class=\"internal\" data-title=\"${title}\" href=\"#\">${title}</a>`)\n          .replace(/\\[(https?:.*?) (.*?)\\]/g, (_,url,word) => `<a href=\"${url.replace(/^https?:/,'')}\">${word}</a>`)\n      }\n    },\n    async annotateLinks() {\n      return function annotateLinks(el) {\n        el.querySelectorAll('a').forEach(a => {\n          if (a.classList.contains('internal')) {\n            a.onclick = event => {\n              let {title} = event.target.dataset.title\n              // TODO do the internal link thing\n            }\n          } else {\n            a.setAttribute('target', '_blank')\n          }\n        })\n        return el\n      }\n    },\n    async html() {\n      const {default:DOMPurify} = await import('https://cdn.jsdelivr.net/npm/dompurify@3.0.5/+esm')\n      const origHtml = await stdlib.html()\n\n      function sanitize(dirty) {\n        return DOMPurify.sanitize(dirty, {\n          RETURN_DOM: true,\n          SANITIZE_DOM: false,\n          IN_PLACE: true,\n          ADD_TAGS: ['foreignObject', 'feDropShadow']\n        });\n      }\n\n      return function sanitizedTaggedTemplateLiteral(...args) {\n        return sanitize(origHtml(...args))\n      }\n    }\n  })\n  Object.assign(wiki, {\n    runtime: new Runtime(lib),\n    lineup: [],\n    modules: [],\n    plugins: [\n      {\n        type: 'unknown',\n        deps: ['html'],\n        fn: (item, html) => {\n          const div = document.createElement('div')\n          div.classList.add('item', 'unknown')\n          const inspector = new Inspector(div)\n          inspector.fulfilled(item)\n          div.prepend(html`<p><em>Unknown type:</em> ${item.type}`)\n          return div\n        }\n      },\n      {\n        type: 'editor',\n        deps: ['html'],\n        fn: (item, html) => {\n          const editor = html`\n          <div>\n            <button>Show Preview</button>\n            <select>\n              ${wiki.plugins.map(p => html`<option value=\"${p.type}\">${p.type}</option>`)}\n            </select>\n            <textarea rows=\"12\" style=\"width:100%;\">${item.text}</textarea>\n          </div>`\n          editor.dataset.id = `item${item.id}`\n          editor.value = {\n            id: `item${wiki.randomId()}`,\n            type: wiki.plugins[0].type,\n            text: item.text\n          }\n          editor.querySelector('select').addEventListener('change', event => {\n            editor.value = {...editor.value, type: event.target.value}\n            editor.dispatchEvent(new Event('input'))\n          })\n          editor.querySelector('textarea').addEventListener('input', event => {\n            editor.value = {...editor.value, text: event.currentTarget.value}\n          })\n          editor.querySelector('button').addEventListener('click', event => {\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            const panelId = article.getAttribute('id')\n            const panel = wiki.ghost('Preview', [{\n              ...editor.value,\n              observe: {panelId, itemId: `item${item.id}`}\n            }])\n            //TODO viewer is not the right name\n            panel.notebook = 'viewer'\n            wiki.addPanel(panel, article, keepLineup)\n          })\n          return editor\n        }\n      },\n      {\n        type: 'paragraph',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`<p>${linked(item.text)}`)\n      },\n      {\n        type: 'html',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`${linked(item.text)}`)\n      },\n      {\n        type: 'markdown',\n        deps: ['md', 'linked', 'annotateLinks'],\n        fn: (item, md, linked, annotateLinks) => annotateLinks(md`${linked(item.text)}`)\n      },\n      {\n        type: 'reference',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => {\n          const {site, slug, title, text} = item\n          const flag = `//${site}/favicon.png`\n          const p = annotateLinks(html`\n          <p><img class=\"remote\" src=\"${flag}\">\n            <a class=\"internal\" data-title=\"${title}\"\n               href=\"//${site}/${slug}.html\">${title}</a> - ${linked(text)}`)\n\n          p.querySelector('a[data-title]').addEventListener('click', async (event) => {\n            event.preventDefault()\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            try {\n              const res = await fetch(`//${site}/${slug}.json`)\n              let page =  await res.json()\n              wiki.addPanel({id: randomId(), flag, page}, article, keepLineup)\n            } catch(error) {\n              wiki.addPanel(ghost(title, [{\n                type: 'unknown',\n                text: 'create this page'\n              }]), article, keepLineup)\n            }\n          })\n          return p\n        }\n      },\n      {\n        type: 'pagefold',\n        deps: ['html'],\n        fn: (item, html) => html`<hr class=\"pagefold\" data-content=\"${item.text}\">`\n      }\n    ],\n    addPanel(panel, article, keepLineup=false) {\n      if (!!keepLineup == false) {\n        const mainEl = document.querySelector('main')\n        while (mainEl.lastChild && mainEl.lastChild.firstChild != article) {\n          wiki.lineup.pop()\n          wiki.modules.pop()\n          mainEl.lastChild.remove()\n        }\n      }\n        wiki.lineup.push(panel)\n        const pragmas = panel.page.story.filter(item => item.text.startsWith('►'))\n        if(pragmas.length) {\n          console.log({pragmas:pragmas.map(item=>item.text)})\n        }\n        const module = panelModule(wiki.runtime, panel)\n        wiki.modules.push(module)\n        /*\n          We have coupled the next bit of code to invasive knowledge\n          about panelModule(). TODO is there a better way to do this?\n\n          We started this with:\n\n          document.querySelector('main').lastChild.scrollIntoView()\n\n          That scrolled before the new page had been rendered in the\n          DOM.\n\n          What we have now works, but it has to know that 'panel' is a\n          special variable name, that it updates the DOM as a\n          side-effect, and that it specifically adds to 'main'.\n        */\n        module.value('panel').then(panel =>\n          document.querySelector(\"main > *:last-of-type\")\n            .scrollIntoView({behavior:'smooth'})\n        )\n    },\n    findPage({title, context=[]}) {\n      for(let siteMap of context) {\n        for(let page of Object.values(siteMap)) {\n          if (page.title.toLowerCase() == title.toLowerCase()) {\n            return page\n          }\n        }\n      }\n      return {}\n    },\n    ghost,\n    randomId,\n    sitemap,\n    panel\n  })\n\n  const notebooks = [\n    {\n      notebook: 'page',\n      fn: panelAdapter\n    },\n    {\n      notebook: 'viewer',\n      fn({id, flag, page: {title, story=[], journal=[]}}) {\n        return function define(runtime, observer) {\n          const main = runtime.module()\n          // TODO main.variable(observer('twins')).define(/* ... */)\n\n          const {panelId, itemId} = story[0].observe\n          const idx = wiki.lineup.findIndex(p => `panel${p.id}` == panelId)\n          main.import(itemId, 'item', wiki.modules[idx])\n          main.variable().define(\n            'plugin',\n            ['item'],\n            (item) => wiki.plugins.find(({type}) => type == item.type)\n          )\n\n          // initialize preview with an empty div so it exists before\n          // we have to redefine it when the author changes the editor\n          main.variable().define('preview', ['html'], html => html`<div>`)\n          // anonymous variable subscribes to changes in 'plugin' and\n          // redefines 'preview' accordingly\n          main.variable(true).define(\n            ['plugin'],\n            async plugin => {\n              main.redefine('preview', ['item', ...plugin.deps], plugin.fn)\n            }\n          )\n\n          main.variable().define('width', '490px')\n          main.variable().define('title', title)\n          main.variable().define('flag', flag)\n          main.variable().define('panelId', `panel${id}`)\n\n          // TODO for(let edit of journal) {/*...*/}\n          main.variable(observer('panel')).define(\n            'panel',\n            ['html', 'width', 'title', 'flag', 'panelId', 'preview'],\n            (html, width, title, flag, panelId, preview) => html`\n            <article id=\"${panelId}\">\n            <div class=twins></div>\n            <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n            ${preview}\n            <footer></footer>\n            </article>`\n          )\n        }\n      }\n    }\n  ]\n\n  function panelModule(runtime, panel) {\n    const {notebook='page'} = panel\n    const adapter = notebooks.find(nb => nb.notebook == notebook).fn\n    return runtime.module(\n      adapter(panel),\n      name => {\n        if (name == 'panel') {\n          return Inspector.into('main')()\n        }\n        return null\n      }\n    )\n  }\n\n  window.wiki = wiki\n})\n\nfunction panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n  // TODO panelAdapter() is not the right name--keep having to ask\n  // what this thing does. It is an adapter which adapts a wiki panel\n  // into an Observable module definition. But the name on the outside\n  // doesn't explain the role within Observable.\n\n  // TODO maybe change flag to site and lookup the flag from the site\n  return function define(runtime, observer) {\n    const main = runtime.module()\n    // TODO main.variable(observer('twins')).define(/* ... */)\n    main.variable().define('width', '490px')\n    main.variable().define('title', title)\n    main.variable().define('flag', flag)\n    main.variable().define('panelId', `panel${id}`)\n    for(let item of story) {\n      // Using item.id to name the Observable variables. Not sure this\n      // will be useful. Although id collisions are very unlikely,\n      // they are not impossible and they will be very confusing to\n      // debug. maybe TODO: guarantee uniqueness here\n      //\n      // Speculate that wiki's look-left pattern can be represented in\n      // Observable by using variable.import() in page modules to the\n      // right pulling variables from pages modules to their left.\n      // https://github.com/observablehq/runtime#variable_import\n\n      // TODO: wrap this function in some way to inject the wiki\n      // dependency, or more specifically, the plugins, instead of\n      // using a global here\n      let plugin = window.wiki.plugins.find(({type}) => type == item.type)\n      plugin ||= window.wiki.plugins.find(({type}) => type == 'unknown')\n      const itemId = `item${item.id}`\n      main.variable().define(`boot${item.id}`, () => item)\n      main.variable().define(`viewof ${itemId}`, [`boot${item.id}`, ...plugin.deps], plugin.fn)\n      main.variable()\n        .define(itemId, ['Generators', `viewof ${itemId}`], (G, el) => G.input(el))\n    }\n    const deps = ['html', 'title', 'flag', 'panelId', 'width',\n                  ...story.map(item => `viewof item${item.id}`)]\n    main.variable(observer('panel'))\n      .define('panel', deps, (html, title, flag, panelId, width, ...story) => {\n        return html`\n          <article id=\"${panelId}\">\n          <div class=twins></div>\n          <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n          ${story}\n          <footer></footer>\n          </article>`\n      })\n    // TODO for(let edit of journal) {/*...*/}\n  }\n}\n\nfunction randomId() {\n  let x = new Uint32Array(2)\n  crypto.getRandomValues(x)\n  return Array.from(x, i=>i.toString(16)).join('')\n}\n\nfunction ghost(title, story) {\n  let page = {title, story: story.map(item => ({\n    id: randomId(),\n    type: 'paragraph',\n    ...item\n  }))}\n  let journal = [{\n    action: 'create',\n    item: page,\n    date: +(new Date())\n  }]\n  return {\n    id: randomId(),\n    flag: './icon-120.png',\n    page: {\n      ...page,\n      journal\n    }\n  }\n}\n\nasync function sitemap(domain) {\n  try {\n    const res = await fetch(`//${domain}/system/sitemap.json`)\n    return {\n      domain,\n      sitemap: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n\nasync function panel(domain, {slug}) {\n  try {\n    const res = await fetch(`//${domain}/${slug}.json`)\n    return {\n      id: randomId(),\n      flag: `//${domain}/favicon.png`,\n      page: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n"
      },
      "date": 1695104258182
    },
    {
      "type": "add",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "Explore Code"
      },
      "after": "32cc5013ccfd09d8",
      "date": 1695104358343
    },
    {
      "type": "edit",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa] ⇒ Explore Code"
      },
      "date": 1695104373119
    },
    {
      "type": "add",
      "id": "419df55f9bdb1dcf",
      "item": {
        "type": "paragraph",
        "id": "419df55f9bdb1dcf",
        "text": "wiki.js:"
      },
      "after": "a247afcd5f0474c2",
      "date": 1695104416820
    },
    {
      "type": "edit",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa] ⇒ Click the hamburger menu ⇒ Explore Code"
      },
      "date": 1695104606058
    },
    {
      "type": "edit",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa] ⇒ Click the hamburger menu ⇒ Explore Code ⇒ Inspect"
      },
      "date": 1695104617762
    },
    {
      "item": {
        "type": "factory",
        "id": "70aa9b08fef02736"
      },
      "id": "70aa9b08fef02736",
      "type": "add",
      "after": "adc58f5f2bc56f89",
      "date": 1695104722970
    },
    {
      "id": "70aa9b08fef02736",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "aff15c4dd552d607",
        "c0c9f294e5e6bd59",
        "32cc5013ccfd09d8",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "047378642372f4e1",
        "adc58f5f2bc56f89"
      ],
      "date": 1695104740051
    },
    {
      "type": "edit",
      "id": "70aa9b08fef02736",
      "item": {
        "type": "image",
        "id": "70aa9b08fef02736",
        "text": "Explore Code",
        "size": "wide",
        "width": 430,
        "height": 165,
        "url": "/assets/plugins/image/d1841f6b5c81bfaea94a33f811faba97.jpg"
      },
      "date": 1695104767736
    },
    {
      "id": "adc58f5f2bc56f89",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "adc58f5f2bc56f89",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "aff15c4dd552d607",
        "c0c9f294e5e6bd59",
        "32cc5013ccfd09d8",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "047378642372f4e1"
      ],
      "date": 1695104946230
    },
    {
      "id": "77d3f5238c4ae7c4",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "77d3f5238c4ae7c4",
        "adc58f5f2bc56f89",
        "fe1573d1d5668719",
        "aff15c4dd552d607",
        "c0c9f294e5e6bd59",
        "32cc5013ccfd09d8",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "047378642372f4e1"
      ],
      "date": 1695104961895
    },
    {
      "item": {
        "type": "factory",
        "id": "bb0893e7ef637244"
      },
      "id": "bb0893e7ef637244",
      "type": "add",
      "after": "047378642372f4e1",
      "date": 1695104967812
    },
    {
      "type": "edit",
      "id": "047378642372f4e1",
      "item": {
        "type": "code",
        "id": "047378642372f4e1",
        "text": "import {Runtime, Inspector, Library} from 'https://cdn.jsdelivr.net/npm/@observablehq/runtime@5.8.2/+esm'"
      },
      "date": 1695104982798
    },
    {
      "type": "edit",
      "id": "bb0893e7ef637244",
      "item": {
        "type": "code",
        "id": "bb0893e7ef637244",
        "text": "\nwindow.addEventListener(\"load\", async () => {\n  const wiki = {}\n\n  document.querySelector('footer form').addEventListener('submit', async event => {\n    event.preventDefault()\n    const article = event.target.closest('article')\n    const keepLineup = true\n    if (event.submitter.name == 'menu') {\n      event.stopPropagation()\n      event.stopImmediatePropagation()\n      wiki.addPanel(\n        wiki.ghost('Explore Code', [{type:'editor', text:'almost blank'}]),\n        article,\n        keepLineup\n      )\n      return\n    }\n    const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })\n\n  const stdlib = new Library()\n  const lib = Object.assign({}, stdlib, {\n    async linked() {\n      return function linked(text) {\n        return text\n          .replace(/\\[\\[(.*?)\\]\\]/g, (_,title) => `<a class=\"internal\" data-title=\"${title}\" href=\"#\">${title}</a>`)\n          .replace(/\\[(https?:.*?) (.*?)\\]/g, (_,url,word) => `<a href=\"${url.replace(/^https?:/,'')}\">${word}</a>`)\n      }\n    },\n    async annotateLinks() {\n      return function annotateLinks(el) {\n        el.querySelectorAll('a').forEach(a => {\n          if (a.classList.contains('internal')) {\n            a.onclick = event => {\n              let {title} = event.target.dataset.title\n              // TODO do the internal link thing\n            }\n          } else {\n            a.setAttribute('target', '_blank')\n          }\n        })\n        return el\n      }\n    },\n    async html() {\n      const {default:DOMPurify} = await import('https://cdn.jsdelivr.net/npm/dompurify@3.0.5/+esm')\n      const origHtml = await stdlib.html()\n\n      function sanitize(dirty) {\n        return DOMPurify.sanitize(dirty, {\n          RETURN_DOM: true,\n          SANITIZE_DOM: false,\n          IN_PLACE: true,\n          ADD_TAGS: ['foreignObject', 'feDropShadow']\n        });\n      }\n\n      return function sanitizedTaggedTemplateLiteral(...args) {\n        return sanitize(origHtml(...args))\n      }\n    }\n  })\n  Object.assign(wiki, {\n    runtime: new Runtime(lib),\n    lineup: [],\n    modules: [],\n    plugins: [\n      {\n        type: 'unknown',\n        deps: ['html'],\n        fn: (item, html) => {\n          const div = document.createElement('div')\n          div.classList.add('item', 'unknown')\n          const inspector = new Inspector(div)\n          inspector.fulfilled(item)\n          div.prepend(html`<p><em>Unknown type:</em> ${item.type}`)\n          return div\n        }\n      },\n      {\n        type: 'editor',\n        deps: ['html'],\n        fn: (item, html) => {\n          const editor = html`\n          <div>\n            <button>Show Preview</button>\n            <select>\n              ${wiki.plugins.map(p => html`<option value=\"${p.type}\">${p.type}</option>`)}\n            </select>\n            <textarea rows=\"12\" style=\"width:100%;\">${item.text}</textarea>\n          </div>`\n          editor.dataset.id = `item${item.id}`\n          editor.value = {\n            id: `item${wiki.randomId()}`,\n            type: wiki.plugins[0].type,\n            text: item.text\n          }\n          editor.querySelector('select').addEventListener('change', event => {\n            editor.value = {...editor.value, type: event.target.value}\n            editor.dispatchEvent(new Event('input'))\n          })\n          editor.querySelector('textarea').addEventListener('input', event => {\n            editor.value = {...editor.value, text: event.currentTarget.value}\n          })\n          editor.querySelector('button').addEventListener('click', event => {\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            const panelId = article.getAttribute('id')\n            const panel = wiki.ghost('Preview', [{\n              ...editor.value,\n              observe: {panelId, itemId: `item${item.id}`}\n            }])\n            //TODO viewer is not the right name\n            panel.notebook = 'viewer'\n            wiki.addPanel(panel, article, keepLineup)\n          })\n          return editor\n        }\n      },\n      {\n        type: 'paragraph',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`<p>${linked(item.text)}`)\n      },\n      {\n        type: 'html',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`${linked(item.text)}`)\n      },\n      {\n        type: 'markdown',\n        deps: ['md', 'linked', 'annotateLinks'],\n        fn: (item, md, linked, annotateLinks) => annotateLinks(md`${linked(item.text)}`)\n      },\n      {\n        type: 'reference',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => {\n          const {site, slug, title, text} = item\n          const flag = `//${site}/favicon.png`\n          const p = annotateLinks(html`\n          <p><img class=\"remote\" src=\"${flag}\">\n            <a class=\"internal\" data-title=\"${title}\"\n               href=\"//${site}/${slug}.html\">${title}</a> - ${linked(text)}`)\n\n          p.querySelector('a[data-title]').addEventListener('click', async (event) => {\n            event.preventDefault()\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            try {\n              const res = await fetch(`//${site}/${slug}.json`)\n              let page =  await res.json()\n              wiki.addPanel({id: randomId(), flag, page}, article, keepLineup)\n            } catch(error) {\n              wiki.addPanel(ghost(title, [{\n                type: 'unknown',\n                text: 'create this page'\n              }]), article, keepLineup)\n            }\n          })\n          return p\n        }\n      },\n      {\n        type: 'pagefold',\n        deps: ['html'],\n        fn: (item, html) => html`<hr class=\"pagefold\" data-content=\"${item.text}\">`\n      }\n    ],\n    addPanel(panel, article, keepLineup=false) {\n      if (!!keepLineup == false) {\n        const mainEl = document.querySelector('main')\n        while (mainEl.lastChild && mainEl.lastChild.firstChild != article) {\n          wiki.lineup.pop()\n          wiki.modules.pop()\n          mainEl.lastChild.remove()\n        }\n      }\n        wiki.lineup.push(panel)\n        const pragmas = panel.page.story.filter(item => item.text.startsWith('►'))\n        if(pragmas.length) {\n          console.log({pragmas:pragmas.map(item=>item.text)})\n        }\n        const module = panelModule(wiki.runtime, panel)\n        wiki.modules.push(module)\n        /*\n          We have coupled the next bit of code to invasive knowledge\n          about panelModule(). TODO is there a better way to do this?\n\n          We started this with:\n\n          document.querySelector('main').lastChild.scrollIntoView()\n\n          That scrolled before the new page had been rendered in the\n          DOM.\n\n          What we have now works, but it has to know that 'panel' is a\n          special variable name, that it updates the DOM as a\n          side-effect, and that it specifically adds to 'main'.\n        */\n        module.value('panel').then(panel =>\n          document.querySelector(\"main > *:last-of-type\")\n            .scrollIntoView({behavior:'smooth'})\n        )\n    },\n    findPage({title, context=[]}) {\n      for(let siteMap of context) {\n        for(let page of Object.values(siteMap)) {\n          if (page.title.toLowerCase() == title.toLowerCase()) {\n            return page\n          }\n        }\n      }\n      return {}\n    },\n    ghost,\n    randomId,\n    sitemap,\n    panel\n  })\n\n  const notebooks = [\n    {\n      notebook: 'page',\n      fn: panelAdapter\n    },\n    {\n      notebook: 'viewer',\n      fn({id, flag, page: {title, story=[], journal=[]}}) {\n        return function define(runtime, observer) {\n          const main = runtime.module()\n          // TODO main.variable(observer('twins')).define(/* ... */)\n\n          const {panelId, itemId} = story[0].observe\n          const idx = wiki.lineup.findIndex(p => `panel${p.id}` == panelId)\n          main.import(itemId, 'item', wiki.modules[idx])\n          main.variable().define(\n            'plugin',\n            ['item'],\n            (item) => wiki.plugins.find(({type}) => type == item.type)\n          )\n\n          // initialize preview with an empty div so it exists before\n          // we have to redefine it when the author changes the editor\n          main.variable().define('preview', ['html'], html => html`<div>`)\n          // anonymous variable subscribes to changes in 'plugin' and\n          // redefines 'preview' accordingly\n          main.variable(true).define(\n            ['plugin'],\n            async plugin => {\n              main.redefine('preview', ['item', ...plugin.deps], plugin.fn)\n            }\n          )\n\n          main.variable().define('width', '490px')\n          main.variable().define('title', title)\n          main.variable().define('flag', flag)\n          main.variable().define('panelId', `panel${id}`)\n\n          // TODO for(let edit of journal) {/*...*/}\n          main.variable(observer('panel')).define(\n            'panel',\n            ['html', 'width', 'title', 'flag', 'panelId', 'preview'],\n            (html, width, title, flag, panelId, preview) => html`\n            <article id=\"${panelId}\">\n            <div class=twins></div>\n            <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n            ${preview}\n            <footer></footer>\n            </article>`\n          )\n        }\n      }\n    }\n  ]\n\n  function panelModule(runtime, panel) {\n    const {notebook='page'} = panel\n    const adapter = notebooks.find(nb => nb.notebook == notebook).fn\n    return runtime.module(\n      adapter(panel),\n      name => {\n        if (name == 'panel') {\n          return Inspector.into('main')()\n        }\n        return null\n      }\n    )\n  }\n\n  window.wiki = wiki\n})\n\nfunction panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n  // TODO panelAdapter() is not the right name--keep having to ask\n  // what this thing does. It is an adapter which adapts a wiki panel\n  // into an Observable module definition. But the name on the outside\n  // doesn't explain the role within Observable.\n\n  // TODO maybe change flag to site and lookup the flag from the site\n  return function define(runtime, observer) {\n    const main = runtime.module()\n    // TODO main.variable(observer('twins')).define(/* ... */)\n    main.variable().define('width', '490px')\n    main.variable().define('title', title)\n    main.variable().define('flag', flag)\n    main.variable().define('panelId', `panel${id}`)\n    for(let item of story) {\n      // Using item.id to name the Observable variables. Not sure this\n      // will be useful. Although id collisions are very unlikely,\n      // they are not impossible and they will be very confusing to\n      // debug. maybe TODO: guarantee uniqueness here\n      //\n      // Speculate that wiki's look-left pattern can be represented in\n      // Observable by using variable.import() in page modules to the\n      // right pulling variables from pages modules to their left.\n      // https://github.com/observablehq/runtime#variable_import\n\n      // TODO: wrap this function in some way to inject the wiki\n      // dependency, or more specifically, the plugins, instead of\n      // using a global here\n      let plugin = window.wiki.plugins.find(({type}) => type == item.type)\n      plugin ||= window.wiki.plugins.find(({type}) => type == 'unknown')\n      const itemId = `item${item.id}`\n      main.variable().define(`boot${item.id}`, () => item)\n      main.variable().define(`viewof ${itemId}`, [`boot${item.id}`, ...plugin.deps], plugin.fn)\n      main.variable()\n        .define(itemId, ['Generators', `viewof ${itemId}`], (G, el) => G.input(el))\n    }\n    const deps = ['html', 'title', 'flag', 'panelId', 'width',\n                  ...story.map(item => `viewof item${item.id}`)]\n    main.variable(observer('panel'))\n      .define('panel', deps, (html, title, flag, panelId, width, ...story) => {\n        return html`\n          <article id=\"${panelId}\">\n          <div class=twins></div>\n          <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n          ${story}\n          <footer></footer>\n          </article>`\n      })\n    // TODO for(let edit of journal) {/*...*/}\n  }\n}\n\nfunction randomId() {\n  let x = new Uint32Array(2)\n  crypto.getRandomValues(x)\n  return Array.from(x, i=>i.toString(16)).join('')\n}\n\nfunction ghost(title, story) {\n  let page = {title, story: story.map(item => ({\n    id: randomId(),\n    type: 'paragraph',\n    ...item\n  }))}\n  let journal = [{\n    action: 'create',\n    item: page,\n    date: +(new Date())\n  }]\n  return {\n    id: randomId(),\n    flag: './icon-120.png',\n    page: {\n      ...page,\n      journal\n    }\n  }\n}\n\nasync function sitemap(domain) {\n  try {\n    const res = await fetch(`//${domain}/system/sitemap.json`)\n    return {\n      domain,\n      sitemap: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n\nasync function panel(domain, {slug}) {\n  try {\n    const res = await fetch(`//${domain}/${slug}.json`)\n    return {\n      id: randomId(),\n      flag: `//${domain}/favicon.png`,\n      page: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n"
      },
      "date": 1695104983896
    },
    {
      "item": {
        "type": "factory",
        "id": "edbe80afd5e6cbb1"
      },
      "id": "edbe80afd5e6cbb1",
      "type": "add",
      "after": "bb0893e7ef637244",
      "date": 1695105013551
    },
    {
      "type": "edit",
      "id": "bb0893e7ef637244",
      "item": {
        "type": "code",
        "id": "bb0893e7ef637244",
        "text": "window.addEventListener(\"load\", async () => {\n  const wiki = {}\n"
      },
      "date": 1695105025965
    },
    {
      "type": "edit",
      "id": "edbe80afd5e6cbb1",
      "item": {
        "type": "code",
        "id": "edbe80afd5e6cbb1",
        "text": "\n\n  document.querySelector('footer form').addEventListener('submit', async event => {\n    event.preventDefault()\n    const article = event.target.closest('article')\n    const keepLineup = true\n    if (event.submitter.name == 'menu') {\n      event.stopPropagation()\n      event.stopImmediatePropagation()\n      wiki.addPanel(\n        wiki.ghost('Explore Code', [{type:'editor', text:'almost blank'}]),\n        article,\n        keepLineup\n      )\n      return\n    }\n    const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })\n\n  const stdlib = new Library()\n  const lib = Object.assign({}, stdlib, {\n    async linked() {\n      return function linked(text) {\n        return text\n          .replace(/\\[\\[(.*?)\\]\\]/g, (_,title) => `<a class=\"internal\" data-title=\"${title}\" href=\"#\">${title}</a>`)\n          .replace(/\\[(https?:.*?) (.*?)\\]/g, (_,url,word) => `<a href=\"${url.replace(/^https?:/,'')}\">${word}</a>`)\n      }\n    },\n    async annotateLinks() {\n      return function annotateLinks(el) {\n        el.querySelectorAll('a').forEach(a => {\n          if (a.classList.contains('internal')) {\n            a.onclick = event => {\n              let {title} = event.target.dataset.title\n              // TODO do the internal link thing\n            }\n          } else {\n            a.setAttribute('target', '_blank')\n          }\n        })\n        return el\n      }\n    },\n    async html() {\n      const {default:DOMPurify} = await import('https://cdn.jsdelivr.net/npm/dompurify@3.0.5/+esm')\n      const origHtml = await stdlib.html()\n\n      function sanitize(dirty) {\n        return DOMPurify.sanitize(dirty, {\n          RETURN_DOM: true,\n          SANITIZE_DOM: false,\n          IN_PLACE: true,\n          ADD_TAGS: ['foreignObject', 'feDropShadow']\n        });\n      }\n\n      return function sanitizedTaggedTemplateLiteral(...args) {\n        return sanitize(origHtml(...args))\n      }\n    }\n  })\n  Object.assign(wiki, {\n    runtime: new Runtime(lib),\n    lineup: [],\n    modules: [],\n    plugins: [\n      {\n        type: 'unknown',\n        deps: ['html'],\n        fn: (item, html) => {\n          const div = document.createElement('div')\n          div.classList.add('item', 'unknown')\n          const inspector = new Inspector(div)\n          inspector.fulfilled(item)\n          div.prepend(html`<p><em>Unknown type:</em> ${item.type}`)\n          return div\n        }\n      },\n      {\n        type: 'editor',\n        deps: ['html'],\n        fn: (item, html) => {\n          const editor = html`\n          <div>\n            <button>Show Preview</button>\n            <select>\n              ${wiki.plugins.map(p => html`<option value=\"${p.type}\">${p.type}</option>`)}\n            </select>\n            <textarea rows=\"12\" style=\"width:100%;\">${item.text}</textarea>\n          </div>`\n          editor.dataset.id = `item${item.id}`\n          editor.value = {\n            id: `item${wiki.randomId()}`,\n            type: wiki.plugins[0].type,\n            text: item.text\n          }\n          editor.querySelector('select').addEventListener('change', event => {\n            editor.value = {...editor.value, type: event.target.value}\n            editor.dispatchEvent(new Event('input'))\n          })\n          editor.querySelector('textarea').addEventListener('input', event => {\n            editor.value = {...editor.value, text: event.currentTarget.value}\n          })\n          editor.querySelector('button').addEventListener('click', event => {\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            const panelId = article.getAttribute('id')\n            const panel = wiki.ghost('Preview', [{\n              ...editor.value,\n              observe: {panelId, itemId: `item${item.id}`}\n            }])\n            //TODO viewer is not the right name\n            panel.notebook = 'viewer'\n            wiki.addPanel(panel, article, keepLineup)\n          })\n          return editor\n        }\n      },\n      {\n        type: 'paragraph',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`<p>${linked(item.text)}`)\n      },\n      {\n        type: 'html',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`${linked(item.text)}`)\n      },\n      {\n        type: 'markdown',\n        deps: ['md', 'linked', 'annotateLinks'],\n        fn: (item, md, linked, annotateLinks) => annotateLinks(md`${linked(item.text)}`)\n      },\n      {\n        type: 'reference',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => {\n          const {site, slug, title, text} = item\n          const flag = `//${site}/favicon.png`\n          const p = annotateLinks(html`\n          <p><img class=\"remote\" src=\"${flag}\">\n            <a class=\"internal\" data-title=\"${title}\"\n               href=\"//${site}/${slug}.html\">${title}</a> - ${linked(text)}`)\n\n          p.querySelector('a[data-title]').addEventListener('click', async (event) => {\n            event.preventDefault()\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            try {\n              const res = await fetch(`//${site}/${slug}.json`)\n              let page =  await res.json()\n              wiki.addPanel({id: randomId(), flag, page}, article, keepLineup)\n            } catch(error) {\n              wiki.addPanel(ghost(title, [{\n                type: 'unknown',\n                text: 'create this page'\n              }]), article, keepLineup)\n            }\n          })\n          return p\n        }\n      },\n      {\n        type: 'pagefold',\n        deps: ['html'],\n        fn: (item, html) => html`<hr class=\"pagefold\" data-content=\"${item.text}\">`\n      }\n    ],\n    addPanel(panel, article, keepLineup=false) {\n      if (!!keepLineup == false) {\n        const mainEl = document.querySelector('main')\n        while (mainEl.lastChild && mainEl.lastChild.firstChild != article) {\n          wiki.lineup.pop()\n          wiki.modules.pop()\n          mainEl.lastChild.remove()\n        }\n      }\n        wiki.lineup.push(panel)\n        const pragmas = panel.page.story.filter(item => item.text.startsWith('►'))\n        if(pragmas.length) {\n          console.log({pragmas:pragmas.map(item=>item.text)})\n        }\n        const module = panelModule(wiki.runtime, panel)\n        wiki.modules.push(module)\n        /*\n          We have coupled the next bit of code to invasive knowledge\n          about panelModule(). TODO is there a better way to do this?\n\n          We started this with:\n\n          document.querySelector('main').lastChild.scrollIntoView()\n\n          That scrolled before the new page had been rendered in the\n          DOM.\n\n          What we have now works, but it has to know that 'panel' is a\n          special variable name, that it updates the DOM as a\n          side-effect, and that it specifically adds to 'main'.\n        */\n        module.value('panel').then(panel =>\n          document.querySelector(\"main > *:last-of-type\")\n            .scrollIntoView({behavior:'smooth'})\n        )\n    },\n    findPage({title, context=[]}) {\n      for(let siteMap of context) {\n        for(let page of Object.values(siteMap)) {\n          if (page.title.toLowerCase() == title.toLowerCase()) {\n            return page\n          }\n        }\n      }\n      return {}\n    },\n    ghost,\n    randomId,\n    sitemap,\n    panel\n  })\n\n  const notebooks = [\n    {\n      notebook: 'page',\n      fn: panelAdapter\n    },\n    {\n      notebook: 'viewer',\n      fn({id, flag, page: {title, story=[], journal=[]}}) {\n        return function define(runtime, observer) {\n          const main = runtime.module()\n          // TODO main.variable(observer('twins')).define(/* ... */)\n\n          const {panelId, itemId} = story[0].observe\n          const idx = wiki.lineup.findIndex(p => `panel${p.id}` == panelId)\n          main.import(itemId, 'item', wiki.modules[idx])\n          main.variable().define(\n            'plugin',\n            ['item'],\n            (item) => wiki.plugins.find(({type}) => type == item.type)\n          )\n\n          // initialize preview with an empty div so it exists before\n          // we have to redefine it when the author changes the editor\n          main.variable().define('preview', ['html'], html => html`<div>`)\n          // anonymous variable subscribes to changes in 'plugin' and\n          // redefines 'preview' accordingly\n          main.variable(true).define(\n            ['plugin'],\n            async plugin => {\n              main.redefine('preview', ['item', ...plugin.deps], plugin.fn)\n            }\n          )\n\n          main.variable().define('width', '490px')\n          main.variable().define('title', title)\n          main.variable().define('flag', flag)\n          main.variable().define('panelId', `panel${id}`)\n\n          // TODO for(let edit of journal) {/*...*/}\n          main.variable(observer('panel')).define(\n            'panel',\n            ['html', 'width', 'title', 'flag', 'panelId', 'preview'],\n            (html, width, title, flag, panelId, preview) => html`\n            <article id=\"${panelId}\">\n            <div class=twins></div>\n            <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n            ${preview}\n            <footer></footer>\n            </article>`\n          )\n        }\n      }\n    }\n  ]\n\n  function panelModule(runtime, panel) {\n    const {notebook='page'} = panel\n    const adapter = notebooks.find(nb => nb.notebook == notebook).fn\n    return runtime.module(\n      adapter(panel),\n      name => {\n        if (name == 'panel') {\n          return Inspector.into('main')()\n        }\n        return null\n      }\n    )\n  }\n\n  window.wiki = wiki\n})\n\nfunction panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n  // TODO panelAdapter() is not the right name--keep having to ask\n  // what this thing does. It is an adapter which adapts a wiki panel\n  // into an Observable module definition. But the name on the outside\n  // doesn't explain the role within Observable.\n\n  // TODO maybe change flag to site and lookup the flag from the site\n  return function define(runtime, observer) {\n    const main = runtime.module()\n    // TODO main.variable(observer('twins')).define(/* ... */)\n    main.variable().define('width', '490px')\n    main.variable().define('title', title)\n    main.variable().define('flag', flag)\n    main.variable().define('panelId', `panel${id}`)\n    for(let item of story) {\n      // Using item.id to name the Observable variables. Not sure this\n      // will be useful. Although id collisions are very unlikely,\n      // they are not impossible and they will be very confusing to\n      // debug. maybe TODO: guarantee uniqueness here\n      //\n      // Speculate that wiki's look-left pattern can be represented in\n      // Observable by using variable.import() in page modules to the\n      // right pulling variables from pages modules to their left.\n      // https://github.com/observablehq/runtime#variable_import\n\n      // TODO: wrap this function in some way to inject the wiki\n      // dependency, or more specifically, the plugins, instead of\n      // using a global here\n      let plugin = window.wiki.plugins.find(({type}) => type == item.type)\n      plugin ||= window.wiki.plugins.find(({type}) => type == 'unknown')\n      const itemId = `item${item.id}`\n      main.variable().define(`boot${item.id}`, () => item)\n      main.variable().define(`viewof ${itemId}`, [`boot${item.id}`, ...plugin.deps], plugin.fn)\n      main.variable()\n        .define(itemId, ['Generators', `viewof ${itemId}`], (G, el) => G.input(el))\n    }\n    const deps = ['html', 'title', 'flag', 'panelId', 'width',\n                  ...story.map(item => `viewof item${item.id}`)]\n    main.variable(observer('panel'))\n      .define('panel', deps, (html, title, flag, panelId, width, ...story) => {\n        return html`\n          <article id=\"${panelId}\">\n          <div class=twins></div>\n          <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n          ${story}\n          <footer></footer>\n          </article>`\n      })\n    // TODO for(let edit of journal) {/*...*/}\n  }\n}\n\nfunction randomId() {\n  let x = new Uint32Array(2)\n  crypto.getRandomValues(x)\n  return Array.from(x, i=>i.toString(16)).join('')\n}\n\nfunction ghost(title, story) {\n  let page = {title, story: story.map(item => ({\n    id: randomId(),\n    type: 'paragraph',\n    ...item\n  }))}\n  let journal = [{\n    action: 'create',\n    item: page,\n    date: +(new Date())\n  }]\n  return {\n    id: randomId(),\n    flag: './icon-120.png',\n    page: {\n      ...page,\n      journal\n    }\n  }\n}\n\nasync function sitemap(domain) {\n  try {\n    const res = await fetch(`//${domain}/system/sitemap.json`)\n    return {\n      domain,\n      sitemap: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n\nasync function panel(domain, {slug}) {\n  try {\n    const res = await fetch(`//${domain}/${slug}.json`)\n    return {\n      id: randomId(),\n      flag: `//${domain}/favicon.png`,\n      page: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}"
      },
      "date": 1695105026930
    },
    {
      "item": {
        "type": "factory",
        "id": "d50594b312e787e1"
      },
      "id": "d50594b312e787e1",
      "type": "add",
      "after": "edbe80afd5e6cbb1",
      "date": 1695105041162
    },
    {
      "type": "edit",
      "id": "edbe80afd5e6cbb1",
      "item": {
        "type": "code",
        "id": "edbe80afd5e6cbb1",
        "text": "document.querySelector('footer form').addEventListener('submit', async event => {\n    event.preventDefault()\n    const article = event.target.closest('article')\n    const keepLineup = true\n    if (event.submitter.name == 'menu') {\n      event.stopPropagation()\n      event.stopImmediatePropagation()\n      wiki.addPanel(\n        wiki.ghost('Explore Code', [{type:'editor', text:'almost blank'}]),\n        article,\n        keepLineup\n      )\n      return\n    }"
      },
      "date": 1695105078601
    },
    {
      "type": "edit",
      "id": "d50594b312e787e1",
      "item": {
        "type": "code",
        "id": "d50594b312e787e1",
        "text": "\n    const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })\n\n  const stdlib = new Library()\n  const lib = Object.assign({}, stdlib, {\n    async linked() {\n      return function linked(text) {\n        return text\n          .replace(/\\[\\[(.*?)\\]\\]/g, (_,title) => `<a class=\"internal\" data-title=\"${title}\" href=\"#\">${title}</a>`)\n          .replace(/\\[(https?:.*?) (.*?)\\]/g, (_,url,word) => `<a href=\"${url.replace(/^https?:/,'')}\">${word}</a>`)\n      }\n    },\n    async annotateLinks() {\n      return function annotateLinks(el) {\n        el.querySelectorAll('a').forEach(a => {\n          if (a.classList.contains('internal')) {\n            a.onclick = event => {\n              let {title} = event.target.dataset.title\n              // TODO do the internal link thing\n            }\n          } else {\n            a.setAttribute('target', '_blank')\n          }\n        })\n        return el\n      }\n    },\n    async html() {\n      const {default:DOMPurify} = await import('https://cdn.jsdelivr.net/npm/dompurify@3.0.5/+esm')\n      const origHtml = await stdlib.html()\n\n      function sanitize(dirty) {\n        return DOMPurify.sanitize(dirty, {\n          RETURN_DOM: true,\n          SANITIZE_DOM: false,\n          IN_PLACE: true,\n          ADD_TAGS: ['foreignObject', 'feDropShadow']\n        });\n      }\n\n      return function sanitizedTaggedTemplateLiteral(...args) {\n        return sanitize(origHtml(...args))\n      }\n    }\n  })\n  Object.assign(wiki, {\n    runtime: new Runtime(lib),\n    lineup: [],\n    modules: [],\n    plugins: [\n      {\n        type: 'unknown',\n        deps: ['html'],\n        fn: (item, html) => {\n          const div = document.createElement('div')\n          div.classList.add('item', 'unknown')\n          const inspector = new Inspector(div)\n          inspector.fulfilled(item)\n          div.prepend(html`<p><em>Unknown type:</em> ${item.type}`)\n          return div\n        }\n      },\n      {\n        type: 'editor',\n        deps: ['html'],\n        fn: (item, html) => {\n          const editor = html`\n          <div>\n            <button>Show Preview</button>\n            <select>\n              ${wiki.plugins.map(p => html`<option value=\"${p.type}\">${p.type}</option>`)}\n            </select>\n            <textarea rows=\"12\" style=\"width:100%;\">${item.text}</textarea>\n          </div>`\n          editor.dataset.id = `item${item.id}`\n          editor.value = {\n            id: `item${wiki.randomId()}`,\n            type: wiki.plugins[0].type,\n            text: item.text\n          }\n          editor.querySelector('select').addEventListener('change', event => {\n            editor.value = {...editor.value, type: event.target.value}\n            editor.dispatchEvent(new Event('input'))\n          })\n          editor.querySelector('textarea').addEventListener('input', event => {\n            editor.value = {...editor.value, text: event.currentTarget.value}\n          })\n          editor.querySelector('button').addEventListener('click', event => {\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            const panelId = article.getAttribute('id')\n            const panel = wiki.ghost('Preview', [{\n              ...editor.value,\n              observe: {panelId, itemId: `item${item.id}`}\n            }])\n            //TODO viewer is not the right name\n            panel.notebook = 'viewer'\n            wiki.addPanel(panel, article, keepLineup)\n          })\n          return editor\n        }\n      },\n      {\n        type: 'paragraph',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`<p>${linked(item.text)}`)\n      },\n      {\n        type: 'html',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`${linked(item.text)}`)\n      },\n      {\n        type: 'markdown',\n        deps: ['md', 'linked', 'annotateLinks'],\n        fn: (item, md, linked, annotateLinks) => annotateLinks(md`${linked(item.text)}`)\n      },\n      {\n        type: 'reference',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => {\n          const {site, slug, title, text} = item\n          const flag = `//${site}/favicon.png`\n          const p = annotateLinks(html`\n          <p><img class=\"remote\" src=\"${flag}\">\n            <a class=\"internal\" data-title=\"${title}\"\n               href=\"//${site}/${slug}.html\">${title}</a> - ${linked(text)}`)\n\n          p.querySelector('a[data-title]').addEventListener('click', async (event) => {\n            event.preventDefault()\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            try {\n              const res = await fetch(`//${site}/${slug}.json`)\n              let page =  await res.json()\n              wiki.addPanel({id: randomId(), flag, page}, article, keepLineup)\n            } catch(error) {\n              wiki.addPanel(ghost(title, [{\n                type: 'unknown',\n                text: 'create this page'\n              }]), article, keepLineup)\n            }\n          })\n          return p\n        }\n      },\n      {\n        type: 'pagefold',\n        deps: ['html'],\n        fn: (item, html) => html`<hr class=\"pagefold\" data-content=\"${item.text}\">`\n      }\n    ],\n    addPanel(panel, article, keepLineup=false) {\n      if (!!keepLineup == false) {\n        const mainEl = document.querySelector('main')\n        while (mainEl.lastChild && mainEl.lastChild.firstChild != article) {\n          wiki.lineup.pop()\n          wiki.modules.pop()\n          mainEl.lastChild.remove()\n        }\n      }\n        wiki.lineup.push(panel)\n        const pragmas = panel.page.story.filter(item => item.text.startsWith('►'))\n        if(pragmas.length) {\n          console.log({pragmas:pragmas.map(item=>item.text)})\n        }\n        const module = panelModule(wiki.runtime, panel)\n        wiki.modules.push(module)\n        /*\n          We have coupled the next bit of code to invasive knowledge\n          about panelModule(). TODO is there a better way to do this?\n\n          We started this with:\n\n          document.querySelector('main').lastChild.scrollIntoView()\n\n          That scrolled before the new page had been rendered in the\n          DOM.\n\n          What we have now works, but it has to know that 'panel' is a\n          special variable name, that it updates the DOM as a\n          side-effect, and that it specifically adds to 'main'.\n        */\n        module.value('panel').then(panel =>\n          document.querySelector(\"main > *:last-of-type\")\n            .scrollIntoView({behavior:'smooth'})\n        )\n    },\n    findPage({title, context=[]}) {\n      for(let siteMap of context) {\n        for(let page of Object.values(siteMap)) {\n          if (page.title.toLowerCase() == title.toLowerCase()) {\n            return page\n          }\n        }\n      }\n      return {}\n    },\n    ghost,\n    randomId,\n    sitemap,\n    panel\n  })\n\n  const notebooks = [\n    {\n      notebook: 'page',\n      fn: panelAdapter\n    },\n    {\n      notebook: 'viewer',\n      fn({id, flag, page: {title, story=[], journal=[]}}) {\n        return function define(runtime, observer) {\n          const main = runtime.module()\n          // TODO main.variable(observer('twins')).define(/* ... */)\n\n          const {panelId, itemId} = story[0].observe\n          const idx = wiki.lineup.findIndex(p => `panel${p.id}` == panelId)\n          main.import(itemId, 'item', wiki.modules[idx])\n          main.variable().define(\n            'plugin',\n            ['item'],\n            (item) => wiki.plugins.find(({type}) => type == item.type)\n          )\n\n          // initialize preview with an empty div so it exists before\n          // we have to redefine it when the author changes the editor\n          main.variable().define('preview', ['html'], html => html`<div>`)\n          // anonymous variable subscribes to changes in 'plugin' and\n          // redefines 'preview' accordingly\n          main.variable(true).define(\n            ['plugin'],\n            async plugin => {\n              main.redefine('preview', ['item', ...plugin.deps], plugin.fn)\n            }\n          )\n\n          main.variable().define('width', '490px')\n          main.variable().define('title', title)\n          main.variable().define('flag', flag)\n          main.variable().define('panelId', `panel${id}`)\n\n          // TODO for(let edit of journal) {/*...*/}\n          main.variable(observer('panel')).define(\n            'panel',\n            ['html', 'width', 'title', 'flag', 'panelId', 'preview'],\n            (html, width, title, flag, panelId, preview) => html`\n            <article id=\"${panelId}\">\n            <div class=twins></div>\n            <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n            ${preview}\n            <footer></footer>\n            </article>`\n          )\n        }\n      }\n    }\n  ]\n\n  function panelModule(runtime, panel) {\n    const {notebook='page'} = panel\n    const adapter = notebooks.find(nb => nb.notebook == notebook).fn\n    return runtime.module(\n      adapter(panel),\n      name => {\n        if (name == 'panel') {\n          return Inspector.into('main')()\n        }\n        return null\n      }\n    )\n  }\n\n  window.wiki = wiki\n})\n\nfunction panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n  // TODO panelAdapter() is not the right name--keep having to ask\n  // what this thing does. It is an adapter which adapts a wiki panel\n  // into an Observable module definition. But the name on the outside\n  // doesn't explain the role within Observable.\n\n  // TODO maybe change flag to site and lookup the flag from the site\n  return function define(runtime, observer) {\n    const main = runtime.module()\n    // TODO main.variable(observer('twins')).define(/* ... */)\n    main.variable().define('width', '490px')\n    main.variable().define('title', title)\n    main.variable().define('flag', flag)\n    main.variable().define('panelId', `panel${id}`)\n    for(let item of story) {\n      // Using item.id to name the Observable variables. Not sure this\n      // will be useful. Although id collisions are very unlikely,\n      // they are not impossible and they will be very confusing to\n      // debug. maybe TODO: guarantee uniqueness here\n      //\n      // Speculate that wiki's look-left pattern can be represented in\n      // Observable by using variable.import() in page modules to the\n      // right pulling variables from pages modules to their left.\n      // https://github.com/observablehq/runtime#variable_import\n\n      // TODO: wrap this function in some way to inject the wiki\n      // dependency, or more specifically, the plugins, instead of\n      // using a global here\n      let plugin = window.wiki.plugins.find(({type}) => type == item.type)\n      plugin ||= window.wiki.plugins.find(({type}) => type == 'unknown')\n      const itemId = `item${item.id}`\n      main.variable().define(`boot${item.id}`, () => item)\n      main.variable().define(`viewof ${itemId}`, [`boot${item.id}`, ...plugin.deps], plugin.fn)\n      main.variable()\n        .define(itemId, ['Generators', `viewof ${itemId}`], (G, el) => G.input(el))\n    }\n    const deps = ['html', 'title', 'flag', 'panelId', 'width',\n                  ...story.map(item => `viewof item${item.id}`)]\n    main.variable(observer('panel'))\n      .define('panel', deps, (html, title, flag, panelId, width, ...story) => {\n        return html`\n          <article id=\"${panelId}\">\n          <div class=twins></div>\n          <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n          ${story}\n          <footer></footer>\n          </article>`\n      })\n    // TODO for(let edit of journal) {/*...*/}\n  }\n}\n\nfunction randomId() {\n  let x = new Uint32Array(2)\n  crypto.getRandomValues(x)\n  return Array.from(x, i=>i.toString(16)).join('')\n}\n\nfunction ghost(title, story) {\n  let page = {title, story: story.map(item => ({\n    id: randomId(),\n    type: 'paragraph',\n    ...item\n  }))}\n  let journal = [{\n    action: 'create',\n    item: page,\n    date: +(new Date())\n  }]\n  return {\n    id: randomId(),\n    flag: './icon-120.png',\n    page: {\n      ...page,\n      journal\n    }\n  }\n}\n\nasync function sitemap(domain) {\n  try {\n    const res = await fetch(`//${domain}/system/sitemap.json`)\n    return {\n      domain,\n      sitemap: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n\nasync function panel(domain, {slug}) {\n  try {\n    const res = await fetch(`//${domain}/${slug}.json`)\n    return {\n      id: randomId(),\n      flag: `//${domain}/favicon.png`,\n      page: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}"
      },
      "date": 1695105079922
    },
    {
      "type": "add",
      "id": "91a5f56ffdbf51a0",
      "item": {
        "type": "paragraph",
        "id": "91a5f56ffdbf51a0",
        "text": "⇒ Click the hamburger menu ⇒ Explore Code"
      },
      "after": "419df55f9bdb1dcf",
      "date": 1695105135132
    },
    {
      "id": "91a5f56ffdbf51a0",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "77d3f5238c4ae7c4",
        "adc58f5f2bc56f89",
        "fe1573d1d5668719",
        "aff15c4dd552d607",
        "c0c9f294e5e6bd59",
        "32cc5013ccfd09d8",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "d50594b312e787e1"
      ],
      "date": 1695105144351
    },
    {
      "type": "edit",
      "id": "91a5f56ffdbf51a0",
      "item": {
        "type": "paragraph",
        "id": "91a5f56ffdbf51a0",
        "text": "⇒ Click the hamburger menu ⇒ Explore Code ⇐ [[Ghost Page]]"
      },
      "date": 1695105200501
    },
    {
      "item": {
        "type": "factory",
        "id": "42550a5b492da887"
      },
      "id": "42550a5b492da887",
      "type": "add",
      "after": "d50594b312e787e1",
      "date": 1695105280814
    },
    {
      "type": "edit",
      "id": "d50594b312e787e1",
      "item": {
        "type": "code",
        "id": "d50594b312e787e1",
        "text": "const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))"
      },
      "date": 1695105320425
    },
    {
      "type": "edit",
      "id": "42550a5b492da887",
      "item": {
        "type": "code",
        "id": "42550a5b492da887",
        "text": "\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })\n\n  const stdlib = new Library()\n  const lib = Object.assign({}, stdlib, {\n    async linked() {\n      return function linked(text) {\n        return text\n          .replace(/\\[\\[(.*?)\\]\\]/g, (_,title) => `<a class=\"internal\" data-title=\"${title}\" href=\"#\">${title}</a>`)\n          .replace(/\\[(https?:.*?) (.*?)\\]/g, (_,url,word) => `<a href=\"${url.replace(/^https?:/,'')}\">${word}</a>`)\n      }\n    },\n    async annotateLinks() {\n      return function annotateLinks(el) {\n        el.querySelectorAll('a').forEach(a => {\n          if (a.classList.contains('internal')) {\n            a.onclick = event => {\n              let {title} = event.target.dataset.title\n              // TODO do the internal link thing\n            }\n          } else {\n            a.setAttribute('target', '_blank')\n          }\n        })\n        return el\n      }\n    },\n    async html() {\n      const {default:DOMPurify} = await import('https://cdn.jsdelivr.net/npm/dompurify@3.0.5/+esm')\n      const origHtml = await stdlib.html()\n\n      function sanitize(dirty) {\n        return DOMPurify.sanitize(dirty, {\n          RETURN_DOM: true,\n          SANITIZE_DOM: false,\n          IN_PLACE: true,\n          ADD_TAGS: ['foreignObject', 'feDropShadow']\n        });\n      }\n\n      return function sanitizedTaggedTemplateLiteral(...args) {\n        return sanitize(origHtml(...args))\n      }\n    }\n  })\n  Object.assign(wiki, {\n    runtime: new Runtime(lib),\n    lineup: [],\n    modules: [],\n    plugins: [\n      {\n        type: 'unknown',\n        deps: ['html'],\n        fn: (item, html) => {\n          const div = document.createElement('div')\n          div.classList.add('item', 'unknown')\n          const inspector = new Inspector(div)\n          inspector.fulfilled(item)\n          div.prepend(html`<p><em>Unknown type:</em> ${item.type}`)\n          return div\n        }\n      },\n      {\n        type: 'editor',\n        deps: ['html'],\n        fn: (item, html) => {\n          const editor = html`\n          <div>\n            <button>Show Preview</button>\n            <select>\n              ${wiki.plugins.map(p => html`<option value=\"${p.type}\">${p.type}</option>`)}\n            </select>\n            <textarea rows=\"12\" style=\"width:100%;\">${item.text}</textarea>\n          </div>`\n          editor.dataset.id = `item${item.id}`\n          editor.value = {\n            id: `item${wiki.randomId()}`,\n            type: wiki.plugins[0].type,\n            text: item.text\n          }\n          editor.querySelector('select').addEventListener('change', event => {\n            editor.value = {...editor.value, type: event.target.value}\n            editor.dispatchEvent(new Event('input'))\n          })\n          editor.querySelector('textarea').addEventListener('input', event => {\n            editor.value = {...editor.value, text: event.currentTarget.value}\n          })\n          editor.querySelector('button').addEventListener('click', event => {\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            const panelId = article.getAttribute('id')\n            const panel = wiki.ghost('Preview', [{\n              ...editor.value,\n              observe: {panelId, itemId: `item${item.id}`}\n            }])\n            //TODO viewer is not the right name\n            panel.notebook = 'viewer'\n            wiki.addPanel(panel, article, keepLineup)\n          })\n          return editor\n        }\n      },\n      {\n        type: 'paragraph',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`<p>${linked(item.text)}`)\n      },\n      {\n        type: 'html',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`${linked(item.text)}`)\n      },\n      {\n        type: 'markdown',\n        deps: ['md', 'linked', 'annotateLinks'],\n        fn: (item, md, linked, annotateLinks) => annotateLinks(md`${linked(item.text)}`)\n      },\n      {\n        type: 'reference',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => {\n          const {site, slug, title, text} = item\n          const flag = `//${site}/favicon.png`\n          const p = annotateLinks(html`\n          <p><img class=\"remote\" src=\"${flag}\">\n            <a class=\"internal\" data-title=\"${title}\"\n               href=\"//${site}/${slug}.html\">${title}</a> - ${linked(text)}`)\n\n          p.querySelector('a[data-title]').addEventListener('click', async (event) => {\n            event.preventDefault()\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            try {\n              const res = await fetch(`//${site}/${slug}.json`)\n              let page =  await res.json()\n              wiki.addPanel({id: randomId(), flag, page}, article, keepLineup)\n            } catch(error) {\n              wiki.addPanel(ghost(title, [{\n                type: 'unknown',\n                text: 'create this page'\n              }]), article, keepLineup)\n            }\n          })\n          return p\n        }\n      },\n      {\n        type: 'pagefold',\n        deps: ['html'],\n        fn: (item, html) => html`<hr class=\"pagefold\" data-content=\"${item.text}\">`\n      }\n    ],\n    addPanel(panel, article, keepLineup=false) {\n      if (!!keepLineup == false) {\n        const mainEl = document.querySelector('main')\n        while (mainEl.lastChild && mainEl.lastChild.firstChild != article) {\n          wiki.lineup.pop()\n          wiki.modules.pop()\n          mainEl.lastChild.remove()\n        }\n      }\n        wiki.lineup.push(panel)\n        const pragmas = panel.page.story.filter(item => item.text.startsWith('►'))\n        if(pragmas.length) {\n          console.log({pragmas:pragmas.map(item=>item.text)})\n        }\n        const module = panelModule(wiki.runtime, panel)\n        wiki.modules.push(module)\n        /*\n          We have coupled the next bit of code to invasive knowledge\n          about panelModule(). TODO is there a better way to do this?\n\n          We started this with:\n\n          document.querySelector('main').lastChild.scrollIntoView()\n\n          That scrolled before the new page had been rendered in the\n          DOM.\n\n          What we have now works, but it has to know that 'panel' is a\n          special variable name, that it updates the DOM as a\n          side-effect, and that it specifically adds to 'main'.\n        */\n        module.value('panel').then(panel =>\n          document.querySelector(\"main > *:last-of-type\")\n            .scrollIntoView({behavior:'smooth'})\n        )\n    },\n    findPage({title, context=[]}) {\n      for(let siteMap of context) {\n        for(let page of Object.values(siteMap)) {\n          if (page.title.toLowerCase() == title.toLowerCase()) {\n            return page\n          }\n        }\n      }\n      return {}\n    },\n    ghost,\n    randomId,\n    sitemap,\n    panel\n  })\n\n  const notebooks = [\n    {\n      notebook: 'page',\n      fn: panelAdapter\n    },\n    {\n      notebook: 'viewer',\n      fn({id, flag, page: {title, story=[], journal=[]}}) {\n        return function define(runtime, observer) {\n          const main = runtime.module()\n          // TODO main.variable(observer('twins')).define(/* ... */)\n\n          const {panelId, itemId} = story[0].observe\n          const idx = wiki.lineup.findIndex(p => `panel${p.id}` == panelId)\n          main.import(itemId, 'item', wiki.modules[idx])\n          main.variable().define(\n            'plugin',\n            ['item'],\n            (item) => wiki.plugins.find(({type}) => type == item.type)\n          )\n\n          // initialize preview with an empty div so it exists before\n          // we have to redefine it when the author changes the editor\n          main.variable().define('preview', ['html'], html => html`<div>`)\n          // anonymous variable subscribes to changes in 'plugin' and\n          // redefines 'preview' accordingly\n          main.variable(true).define(\n            ['plugin'],\n            async plugin => {\n              main.redefine('preview', ['item', ...plugin.deps], plugin.fn)\n            }\n          )\n\n          main.variable().define('width', '490px')\n          main.variable().define('title', title)\n          main.variable().define('flag', flag)\n          main.variable().define('panelId', `panel${id}`)\n\n          // TODO for(let edit of journal) {/*...*/}\n          main.variable(observer('panel')).define(\n            'panel',\n            ['html', 'width', 'title', 'flag', 'panelId', 'preview'],\n            (html, width, title, flag, panelId, preview) => html`\n            <article id=\"${panelId}\">\n            <div class=twins></div>\n            <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n            ${preview}\n            <footer></footer>\n            </article>`\n          )\n        }\n      }\n    }\n  ]\n\n  function panelModule(runtime, panel) {\n    const {notebook='page'} = panel\n    const adapter = notebooks.find(nb => nb.notebook == notebook).fn\n    return runtime.module(\n      adapter(panel),\n      name => {\n        if (name == 'panel') {\n          return Inspector.into('main')()\n        }\n        return null\n      }\n    )\n  }\n\n  window.wiki = wiki\n})\n\nfunction panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n  // TODO panelAdapter() is not the right name--keep having to ask\n  // what this thing does. It is an adapter which adapts a wiki panel\n  // into an Observable module definition. But the name on the outside\n  // doesn't explain the role within Observable.\n\n  // TODO maybe change flag to site and lookup the flag from the site\n  return function define(runtime, observer) {\n    const main = runtime.module()\n    // TODO main.variable(observer('twins')).define(/* ... */)\n    main.variable().define('width', '490px')\n    main.variable().define('title', title)\n    main.variable().define('flag', flag)\n    main.variable().define('panelId', `panel${id}`)\n    for(let item of story) {\n      // Using item.id to name the Observable variables. Not sure this\n      // will be useful. Although id collisions are very unlikely,\n      // they are not impossible and they will be very confusing to\n      // debug. maybe TODO: guarantee uniqueness here\n      //\n      // Speculate that wiki's look-left pattern can be represented in\n      // Observable by using variable.import() in page modules to the\n      // right pulling variables from pages modules to their left.\n      // https://github.com/observablehq/runtime#variable_import\n\n      // TODO: wrap this function in some way to inject the wiki\n      // dependency, or more specifically, the plugins, instead of\n      // using a global here\n      let plugin = window.wiki.plugins.find(({type}) => type == item.type)\n      plugin ||= window.wiki.plugins.find(({type}) => type == 'unknown')\n      const itemId = `item${item.id}`\n      main.variable().define(`boot${item.id}`, () => item)\n      main.variable().define(`viewof ${itemId}`, [`boot${item.id}`, ...plugin.deps], plugin.fn)\n      main.variable()\n        .define(itemId, ['Generators', `viewof ${itemId}`], (G, el) => G.input(el))\n    }\n    const deps = ['html', 'title', 'flag', 'panelId', 'width',\n                  ...story.map(item => `viewof item${item.id}`)]\n    main.variable(observer('panel'))\n      .define('panel', deps, (html, title, flag, panelId, width, ...story) => {\n        return html`\n          <article id=\"${panelId}\">\n          <div class=twins></div>\n          <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n          ${story}\n          <footer></footer>\n          </article>`\n      })\n    // TODO for(let edit of journal) {/*...*/}\n  }\n}\n\nfunction randomId() {\n  let x = new Uint32Array(2)\n  crypto.getRandomValues(x)\n  return Array.from(x, i=>i.toString(16)).join('')\n}\n\nfunction ghost(title, story) {\n  let page = {title, story: story.map(item => ({\n    id: randomId(),\n    type: 'paragraph',\n    ...item\n  }))}\n  let journal = [{\n    action: 'create',\n    item: page,\n    date: +(new Date())\n  }]\n  return {\n    id: randomId(),\n    flag: './icon-120.png',\n    page: {\n      ...page,\n      journal\n    }\n  }\n}\n\nasync function sitemap(domain) {\n  try {\n    const res = await fetch(`//${domain}/system/sitemap.json`)\n    return {\n      domain,\n      sitemap: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n\nasync function panel(domain, {slug}) {\n  try {\n    const res = await fetch(`//${domain}/${slug}.json`)\n    return {\n      id: randomId(),\n      flag: `//${domain}/favicon.png`,\n      page: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}"
      },
      "date": 1695105322339
    },
    {
      "type": "edit",
      "id": "42550a5b492da887",
      "item": {
        "type": "code",
        "id": "42550a5b492da887",
        "text": "const stdlib = new Library()\n  const lib = Object.assign({}, stdlib, {\n    async linked() {\n      return function linked(text) {\n        return text\n          .replace(/\\[\\[(.*?)\\]\\]/g, (_,title) => `<a class=\"internal\" data-title=\"${title}\" href=\"#\">${title}</a>`)\n          .replace(/\\[(https?:.*?) (.*?)\\]/g, (_,url,word) => `<a href=\"${url.replace(/^https?:/,'')}\">${word}</a>`)\n      }\n    },\n    async annotateLinks() {\n      return function annotateLinks(el) {\n        el.querySelectorAll('a').forEach(a => {\n          if (a.classList.contains('internal')) {\n            a.onclick = event => {\n              let {title} = event.target.dataset.title\n              // TODO do the internal link thing\n            }\n          } else {\n            a.setAttribute('target', '_blank')\n          }\n        })\n        return el\n      }\n    },\n    async html() {\n      const {default:DOMPurify} = await import('https://cdn.jsdelivr.net/npm/dompurify@3.0.5/+esm')\n      const origHtml = await stdlib.html()\n\n      function sanitize(dirty) {\n        return DOMPurify.sanitize(dirty, {\n          RETURN_DOM: true,\n          SANITIZE_DOM: false,\n          IN_PLACE: true,\n          ADD_TAGS: ['foreignObject', 'feDropShadow']\n        });\n      }\n\n      return function sanitizedTaggedTemplateLiteral(...args) {\n        return sanitize(origHtml(...args))\n      }\n    }\n  })\n  Object.assign(wiki, {\n    runtime: new Runtime(lib),\n    lineup: [],\n    modules: [],\n    plugins: [\n      {\n        type: 'unknown',\n        deps: ['html'],\n        fn: (item, html) => {\n          const div = document.createElement('div')\n          div.classList.add('item', 'unknown')\n          const inspector = new Inspector(div)\n          inspector.fulfilled(item)\n          div.prepend(html`<p><em>Unknown type:</em> ${item.type}`)\n          return div\n        }\n      },\n      {\n        type: 'editor',\n        deps: ['html'],\n        fn: (item, html) => {\n          const editor = html`\n          <div>\n            <button>Show Preview</button>\n            <select>\n              ${wiki.plugins.map(p => html`<option value=\"${p.type}\">${p.type}</option>`)}\n            </select>\n            <textarea rows=\"12\" style=\"width:100%;\">${item.text}</textarea>\n          </div>`\n          editor.dataset.id = `item${item.id}`\n          editor.value = {\n            id: `item${wiki.randomId()}`,\n            type: wiki.plugins[0].type,\n            text: item.text\n          }\n          editor.querySelector('select').addEventListener('change', event => {\n            editor.value = {...editor.value, type: event.target.value}\n            editor.dispatchEvent(new Event('input'))\n          })\n          editor.querySelector('textarea').addEventListener('input', event => {\n            editor.value = {...editor.value, text: event.currentTarget.value}\n          })\n          editor.querySelector('button').addEventListener('click', event => {\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            const panelId = article.getAttribute('id')\n            const panel = wiki.ghost('Preview', [{\n              ...editor.value,\n              observe: {panelId, itemId: `item${item.id}`}\n            }])\n            //TODO viewer is not the right name\n            panel.notebook = 'viewer'\n            wiki.addPanel(panel, article, keepLineup)\n          })\n          return editor\n        }\n      },\n      {\n        type: 'paragraph',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`<p>${linked(item.text)}`)\n      },\n      {\n        type: 'html',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => annotateLinks(html`${linked(item.text)}`)\n      },\n      {\n        type: 'markdown',\n        deps: ['md', 'linked', 'annotateLinks'],\n        fn: (item, md, linked, annotateLinks) => annotateLinks(md`${linked(item.text)}`)\n      },\n      {\n        type: 'reference',\n        deps: ['html', 'linked', 'annotateLinks'],\n        fn: (item, html, linked, annotateLinks) => {\n          const {site, slug, title, text} = item\n          const flag = `//${site}/favicon.png`\n          const p = annotateLinks(html`\n          <p><img class=\"remote\" src=\"${flag}\">\n            <a class=\"internal\" data-title=\"${title}\"\n               href=\"//${site}/${slug}.html\">${title}</a> - ${linked(text)}`)\n\n          p.querySelector('a[data-title]').addEventListener('click', async (event) => {\n            event.preventDefault()\n            const article = event.target.closest('article')\n            const keepLineup = event.shiftKey\n            try {\n              const res = await fetch(`//${site}/${slug}.json`)\n              let page =  await res.json()\n              wiki.addPanel({id: randomId(), flag, page}, article, keepLineup)\n            } catch(error) {\n              wiki.addPanel(ghost(title, [{\n                type: 'unknown',\n                text: 'create this page'\n              }]), article, keepLineup)\n            }\n          })\n          return p\n        }\n      },\n      {\n        type: 'pagefold',\n        deps: ['html'],\n        fn: (item, html) => html`<hr class=\"pagefold\" data-content=\"${item.text}\">`\n      }\n    ],\n    addPanel(panel, article, keepLineup=false) {\n      if (!!keepLineup == false) {\n        const mainEl = document.querySelector('main')\n        while (mainEl.lastChild && mainEl.lastChild.firstChild != article) {\n          wiki.lineup.pop()\n          wiki.modules.pop()\n          mainEl.lastChild.remove()\n        }\n      }\n        wiki.lineup.push(panel)\n        const pragmas = panel.page.story.filter(item => item.text.startsWith('►'))\n        if(pragmas.length) {\n          console.log({pragmas:pragmas.map(item=>item.text)})\n        }\n        const module = panelModule(wiki.runtime, panel)\n        wiki.modules.push(module)\n        /*\n          We have coupled the next bit of code to invasive knowledge\n          about panelModule(). TODO is there a better way to do this?\n\n          We started this with:\n\n          document.querySelector('main').lastChild.scrollIntoView()\n\n          That scrolled before the new page had been rendered in the\n          DOM.\n\n          What we have now works, but it has to know that 'panel' is a\n          special variable name, that it updates the DOM as a\n          side-effect, and that it specifically adds to 'main'.\n        */\n        module.value('panel').then(panel =>\n          document.querySelector(\"main > *:last-of-type\")\n            .scrollIntoView({behavior:'smooth'})\n        )\n    },\n    findPage({title, context=[]}) {\n      for(let siteMap of context) {\n        for(let page of Object.values(siteMap)) {\n          if (page.title.toLowerCase() == title.toLowerCase()) {\n            return page\n          }\n        }\n      }\n      return {}\n    },\n    ghost,\n    randomId,\n    sitemap,\n    panel\n  })\n\n  const notebooks = [\n    {\n      notebook: 'page',\n      fn: panelAdapter\n    },\n    {\n      notebook: 'viewer',\n      fn({id, flag, page: {title, story=[], journal=[]}}) {\n        return function define(runtime, observer) {\n          const main = runtime.module()\n          // TODO main.variable(observer('twins')).define(/* ... */)\n\n          const {panelId, itemId} = story[0].observe\n          const idx = wiki.lineup.findIndex(p => `panel${p.id}` == panelId)\n          main.import(itemId, 'item', wiki.modules[idx])\n          main.variable().define(\n            'plugin',\n            ['item'],\n            (item) => wiki.plugins.find(({type}) => type == item.type)\n          )\n\n          // initialize preview with an empty div so it exists before\n          // we have to redefine it when the author changes the editor\n          main.variable().define('preview', ['html'], html => html`<div>`)\n          // anonymous variable subscribes to changes in 'plugin' and\n          // redefines 'preview' accordingly\n          main.variable(true).define(\n            ['plugin'],\n            async plugin => {\n              main.redefine('preview', ['item', ...plugin.deps], plugin.fn)\n            }\n          )\n\n          main.variable().define('width', '490px')\n          main.variable().define('title', title)\n          main.variable().define('flag', flag)\n          main.variable().define('panelId', `panel${id}`)\n\n          // TODO for(let edit of journal) {/*...*/}\n          main.variable(observer('panel')).define(\n            'panel',\n            ['html', 'width', 'title', 'flag', 'panelId', 'preview'],\n            (html, width, title, flag, panelId, preview) => html`\n            <article id=\"${panelId}\">\n            <div class=twins></div>\n            <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n            ${preview}\n            <footer></footer>\n            </article>`\n          )\n        }\n      }\n    }\n  ]\n\n  function panelModule(runtime, panel) {\n    const {notebook='page'} = panel\n    const adapter = notebooks.find(nb => nb.notebook == notebook).fn\n    return runtime.module(\n      adapter(panel),\n      name => {\n        if (name == 'panel') {\n          return Inspector.into('main')()\n        }\n        return null\n      }\n    )\n  }\n\n  window.wiki = wiki\n})\n\nfunction panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n  // TODO panelAdapter() is not the right name--keep having to ask\n  // what this thing does. It is an adapter which adapts a wiki panel\n  // into an Observable module definition. But the name on the outside\n  // doesn't explain the role within Observable.\n\n  // TODO maybe change flag to site and lookup the flag from the site\n  return function define(runtime, observer) {\n    const main = runtime.module()\n    // TODO main.variable(observer('twins')).define(/* ... */)\n    main.variable().define('width', '490px')\n    main.variable().define('title', title)\n    main.variable().define('flag', flag)\n    main.variable().define('panelId', `panel${id}`)\n    for(let item of story) {\n      // Using item.id to name the Observable variables. Not sure this\n      // will be useful. Although id collisions are very unlikely,\n      // they are not impossible and they will be very confusing to\n      // debug. maybe TODO: guarantee uniqueness here\n      //\n      // Speculate that wiki's look-left pattern can be represented in\n      // Observable by using variable.import() in page modules to the\n      // right pulling variables from pages modules to their left.\n      // https://github.com/observablehq/runtime#variable_import\n\n      // TODO: wrap this function in some way to inject the wiki\n      // dependency, or more specifically, the plugins, instead of\n      // using a global here\n      let plugin = window.wiki.plugins.find(({type}) => type == item.type)\n      plugin ||= window.wiki.plugins.find(({type}) => type == 'unknown')\n      const itemId = `item${item.id}`\n      main.variable().define(`boot${item.id}`, () => item)\n      main.variable().define(`viewof ${itemId}`, [`boot${item.id}`, ...plugin.deps], plugin.fn)\n      main.variable()\n        .define(itemId, ['Generators', `viewof ${itemId}`], (G, el) => G.input(el))\n    }\n    const deps = ['html', 'title', 'flag', 'panelId', 'width',\n                  ...story.map(item => `viewof item${item.id}`)]\n    main.variable(observer('panel'))\n      .define('panel', deps, (html, title, flag, panelId, width, ...story) => {\n        return html`\n          <article id=\"${panelId}\">\n          <div class=twins></div>\n          <header><h1><img src=\"${flag}\"> ${title}</h1></header>\n          ${story}\n          <footer></footer>\n          </article>`\n      })\n    // TODO for(let edit of journal) {/*...*/}\n  }\n}\n\nfunction randomId() {\n  let x = new Uint32Array(2)\n  crypto.getRandomValues(x)\n  return Array.from(x, i=>i.toString(16)).join('')\n}\n\nfunction ghost(title, story) {\n  let page = {title, story: story.map(item => ({\n    id: randomId(),\n    type: 'paragraph',\n    ...item\n  }))}\n  let journal = [{\n    action: 'create',\n    item: page,\n    date: +(new Date())\n  }]\n  return {\n    id: randomId(),\n    flag: './icon-120.png',\n    page: {\n      ...page,\n      journal\n    }\n  }\n}\n\nasync function sitemap(domain) {\n  try {\n    const res = await fetch(`//${domain}/system/sitemap.json`)\n    return {\n      domain,\n      sitemap: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}\n\nasync function panel(domain, {slug}) {\n  try {\n    const res = await fetch(`//${domain}/${slug}.json`)\n    return {\n      id: randomId(),\n      flag: `//${domain}/favicon.png`,\n      page: await res.json()\n    }\n  } catch (error) {\n    return {error}\n  }\n}"
      },
      "date": 1695105352100
    },
    {
      "type": "edit",
      "id": "d50594b312e787e1",
      "item": {
        "type": "code",
        "id": "d50594b312e787e1",
        "text": "const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })"
      },
      "date": 1695105360670
    },
    {
      "item": {
        "type": "factory",
        "id": "bb5eaa37dd7bb3fd"
      },
      "id": "bb5eaa37dd7bb3fd",
      "type": "add",
      "after": "42550a5b492da887",
      "date": 1695105453951
    },
    {
      "id": "bb5eaa37dd7bb3fd",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "77d3f5238c4ae7c4",
        "adc58f5f2bc56f89",
        "fe1573d1d5668719",
        "aff15c4dd552d607",
        "c0c9f294e5e6bd59",
        "32cc5013ccfd09d8",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "d50594b312e787e1",
        "bb5eaa37dd7bb3fd",
        "42550a5b492da887"
      ],
      "date": 1695105464334
    },
    {
      "id": "bb5eaa37dd7bb3fd",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "77d3f5238c4ae7c4",
        "adc58f5f2bc56f89",
        "fe1573d1d5668719",
        "aff15c4dd552d607",
        "c0c9f294e5e6bd59",
        "32cc5013ccfd09d8",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "d50594b312e787e1",
        "42550a5b492da887"
      ],
      "date": 1695105506406
    },
    {
      "type": "edit",
      "id": "bb5eaa37dd7bb3fd",
      "item": {
        "type": "reference",
        "id": "bb5eaa37dd7bb3fd",
        "site": "jeff.dojo.fed.wiki",
        "slug": "typescript-2023-09-17",
        "title": "Typescript 2023-09-17",
        "text": "Text extraction. See [[Typescript Archive]]"
      },
      "date": 1695105524056
    },
    {
      "type": "remove",
      "id": "d50594b312e787e1",
      "date": 1695105956279,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "remove",
      "id": "42550a5b492da887",
      "date": 1695105958743,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1695106438618
    },
    {
      "type": "edit",
      "id": "91a5f56ffdbf51a0",
      "item": {
        "type": "paragraph",
        "id": "91a5f56ffdbf51a0",
        "text": "⇒ Click the hamburger menu [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L46 code] ⇒ Explore Code ⇐ [[Ghost Page]]"
      },
      "date": 1695106610809
    },
    {
      "type": "edit",
      "id": "419df55f9bdb1dcf",
      "item": {
        "type": "paragraph",
        "id": "419df55f9bdb1dcf",
        "text": "wiki.js: [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L46 code]"
      },
      "date": 1695106862074
    },
    {
      "type": "edit",
      "id": "419df55f9bdb1dcf",
      "item": {
        "type": "paragraph",
        "id": "419df55f9bdb1dcf",
        "text": "wiki.js [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L46 code]"
      },
      "date": 1695106877572
    },
    {
      "type": "edit",
      "id": "419df55f9bdb1dcf",
      "item": {
        "type": "paragraph",
        "id": "419df55f9bdb1dcf",
        "text": "wiki.js [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js code]"
      },
      "date": 1695106930822
    },
    {
      "type": "remove",
      "id": "d50594b312e787e1",
      "date": 1695106971110
    },
    {
      "type": "remove",
      "id": "42550a5b492da887",
      "date": 1695106973050
    },
    {
      "type": "edit",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa] ⇒ Click the hamburger menu ⇒ Explore Code ⇒ Inspect"
      },
      "date": 1695106991689
    },
    {
      "type": "edit",
      "id": "fe1573d1d5668719",
      "item": {
        "type": "paragraph",
        "id": "fe1573d1d5668719",
        "text": "⇒ [[Eric Dobbs]] ⇒ [[CSS-Spikes]] [https://css-spikes.dbbs.co/pwa/ pwa] (cdn.jsdelivr.net needs script permisssion), [https://glitch.com/edit/#!/glitch-hello-installable?path=public%2Findex.js%3A2%3A0 glitch], [https://github.com/dobbs/wiki-spike-css github]"
      },
      "date": 1695106998556
    },
    {
      "type": "add",
      "id": "53843f14030c508f",
      "item": {
        "type": "paragraph",
        "id": "53843f14030c508f",
        "text": "@observablehq/runtime"
      },
      "after": "fe1573d1d5668719",
      "date": 1695107045151
    },
    {
      "type": "remove",
      "id": "aff15c4dd552d607",
      "date": 1695107047546
    },
    {
      "type": "edit",
      "id": "53843f14030c508f",
      "item": {
        "type": "paragraph",
        "id": "53843f14030c508f",
        "text": "@observablehq/runtime [https://www.npmjs.com/package/@observablehq/runtime npm]"
      },
      "date": 1695107057717
    },
    {
      "type": "edit",
      "id": "53843f14030c508f",
      "item": {
        "type": "paragraph",
        "id": "53843f14030c508f",
        "text": "@observablehq/runtime [https://www.npmjs.com/package/@observablehq/runtime npm] ⇒ [[Observable Runtime]]"
      },
      "date": 1695107109671
    },
    {
      "id": "a214ec7501d8d406",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a214ec7501d8d406",
        "text": "glitch-hello-installable [https://glitch.com/edit/#!/glitch-hello-installable?path=public%2Findex.js%3A2%3A0 page]"
      },
      "after": "fe1573d1d5668719",
      "attribution": {
        "page": "Observable Runtime"
      },
      "date": 1695107433883
    },
    {
      "type": "edit",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "⇒ [[Eric Dobbs]] ⇒ [[Wiki Spike CSS]] ⇒ Click the hamburger menu ⇒ Explore Code ⇒ Inspect"
      },
      "date": 1695107466143
    },
    {
      "type": "edit",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "⇒ [[Eric Dobbs]] ⇒ [[Wiki Spike CSS]] ⇒ Click the hamburger menu [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L46 code] ⇒ Explore Code ⇒ Inspect"
      },
      "date": 1695107484902
    },
    {
      "type": "edit",
      "id": "419df55f9bdb1dcf",
      "item": {
        "type": "paragraph",
        "id": "419df55f9bdb1dcf",
        "text": "⇒ Inspect ⇒ wiki.js [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js code]"
      },
      "date": 1695107510718
    },
    {
      "type": "edit",
      "id": "bb0893e7ef637244",
      "item": {
        "type": "code",
        "id": "bb0893e7ef637244",
        "text": "window.addEventListener(\"load\", async () => {\n"
      },
      "date": 1695107664658
    },
    {
      "type": "edit",
      "id": "edbe80afd5e6cbb1",
      "item": {
        "type": "code",
        "id": "edbe80afd5e6cbb1",
        "text": "  document.querySelector('footer form').addEventListener('submit', async event => {\n    event.preventDefault()\n    const article = event.target.closest('article')\n    const keepLineup = true\n    if (event.submitter.name == 'menu') {\n      event.stopPropagation()\n      event.stopImmediatePropagation()\n      wiki.addPanel(\n        wiki.ghost('Explore Code', [{type:'editor', text:'almost blank'}]),\n        article,\n        keepLineup\n      )\n      return\n    }\n    const site = await wiki.sitemap(new FormData(event.target).get('domain'))\n    const {domain, sitemap} = site\n    const panel = ghost(\n      domain,\n      sitemap\n        .sort((left, right) => left.date > right.date ? -1 : 1)\n        .map(({synopsis, slug, title, date}) => ({\n          type: 'reference',\n          site: domain,\n          slug,\n          title,\n          text: synopsis\n        })))\n    panel.flag = `//${domain}/favicon.png`\n    wiki.addPanel(panel, article, keepLineup)\n  })\n\n"
      },
      "date": 1695107786760
    },
    {
      "type": "fork",
      "date": 1695107862541
    },
    {
      "type": "edit",
      "id": "91a5f56ffdbf51a0",
      "item": {
        "type": "paragraph",
        "id": "91a5f56ffdbf51a0",
        "text": "⇒ Click the hamburger menu [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L63 code] ⇒ Explore Code ⇐ [[Ghost Page]]"
      },
      "date": 1695107958504
    },
    {
      "type": "edit",
      "id": "419df55f9bdb1dcf",
      "item": {
        "type": "paragraph",
        "id": "419df55f9bdb1dcf",
        "text": "Note: I my imagination have in already added another type."
      },
      "date": 1695108405375
    },
    {
      "id": "32cc5013ccfd09d8",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "77d3f5238c4ae7c4",
        "adc58f5f2bc56f89",
        "fe1573d1d5668719",
        "a214ec7501d8d406",
        "53843f14030c508f",
        "c0c9f294e5e6bd59",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "32cc5013ccfd09d8",
        "3cf0e20ab61c9e60",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1"
      ],
      "date": 1695108411994,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1695108421277
    },
    {
      "type": "remove",
      "id": "32cc5013ccfd09d8",
      "date": 1695108459662
    },
    {
      "type": "edit",
      "id": "419df55f9bdb1dcf",
      "item": {
        "type": "paragraph",
        "id": "419df55f9bdb1dcf",
        "text": "Note: I my imagination have in already added another type. ⇒ [[MiniLatex]]"
      },
      "date": 1695108460883
    },
    {
      "id": "8e5e4b983ecb95a0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8e5e4b983ecb95a0",
        "text": "⇒ Inspect ⇒ wiki.js [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js code]",
        "alias": "419df55f9bdb1dcf"
      },
      "after": "419df55f9bdb1dcf",
      "date": 1695108529594
    },
    {
      "type": "edit",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "⇒ [[Eric Dobbs]] ⇒ [[Wiki Spike CSS]] ⇒ Click the hamburger menu https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L63 code] ⇒ Explore Code ⇒ Inspect"
      },
      "date": 1695108684043
    },
    {
      "type": "edit",
      "id": "a247afcd5f0474c2",
      "item": {
        "type": "paragraph",
        "id": "a247afcd5f0474c2",
        "text": "⇒ [[Eric Dobbs]] ⇒ [[Wiki Spike CSS]] ⇒ Click the hamburger menu [https://github.com/dobbs/wiki-spike-css/blob/67b70cccb15a73838e9746518ac300963def215e/pwa/wiki.js#L33-L63 code] ⇒ Explore Code ⇒ Inspect"
      },
      "date": 1695108696742
    },
    {
      "type": "edit",
      "id": "419df55f9bdb1dcf",
      "item": {
        "type": "paragraph",
        "id": "419df55f9bdb1dcf",
        "text": "Note: I my imagination I have already added another type. ⇒ [[MiniLatex]]"
      },
      "date": 1695108752440
    },
    {
      "item": {
        "type": "factory",
        "id": "73b380697a912dca"
      },
      "id": "73b380697a912dca",
      "type": "add",
      "after": "edbe80afd5e6cbb1",
      "date": 1695109068874
    },
    {
      "type": "edit",
      "id": "73b380697a912dca",
      "item": {
        "type": "code",
        "id": "73b380697a912dca",
        "text": "function panelAdapter({id, flag, page: {title, story=[], journal=[]}}) {\n"
      },
      "date": 1695109070977
    },
    {
      "item": {
        "type": "factory",
        "id": "c35737429b80df9f"
      },
      "id": "c35737429b80df9f",
      "type": "add",
      "after": "73b380697a912dca",
      "date": 1695109076251
    },
    {
      "type": "edit",
      "id": "c35737429b80df9f",
      "item": {
        "type": "code",
        "id": "c35737429b80df9f",
        "text": "function randomId() {\n"
      },
      "date": 1695109077972
    },
    {
      "item": {
        "type": "factory",
        "id": "991947fc794bc825"
      },
      "id": "991947fc794bc825",
      "type": "add",
      "after": "c35737429b80df9f",
      "date": 1695109082767
    },
    {
      "type": "edit",
      "id": "991947fc794bc825",
      "item": {
        "type": "code",
        "id": "991947fc794bc825",
        "text": "function ghost(title, story) {\n"
      },
      "date": 1695109084451
    },
    {
      "item": {
        "type": "factory",
        "id": "8bbd18d18e23f250"
      },
      "id": "8bbd18d18e23f250",
      "type": "add",
      "after": "991947fc794bc825",
      "date": 1695109088801
    },
    {
      "type": "edit",
      "id": "8bbd18d18e23f250",
      "item": {
        "type": "code",
        "id": "8bbd18d18e23f250",
        "text": "async function sitemap(domain) {\n"
      },
      "date": 1695109090510
    },
    {
      "item": {
        "type": "factory",
        "id": "3766cbe42967e0aa"
      },
      "id": "3766cbe42967e0aa",
      "type": "add",
      "after": "8bbd18d18e23f250",
      "date": 1695109094818
    },
    {
      "type": "edit",
      "id": "3766cbe42967e0aa",
      "item": {
        "type": "code",
        "id": "3766cbe42967e0aa",
        "text": "async function panel(domain, {slug}) {\n"
      },
      "date": 1695109097046
    },
    {
      "id": "adc58f5f2bc56f89",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "adc58f5f2bc56f89",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "a214ec7501d8d406",
        "53843f14030c508f",
        "c0c9f294e5e6bd59",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "8e5e4b983ecb95a0",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "73b380697a912dca",
        "c35737429b80df9f",
        "991947fc794bc825",
        "8bbd18d18e23f250",
        "3766cbe42967e0aa"
      ],
      "date": 1695109316589
    },
    {
      "item": {
        "type": "factory",
        "id": "87ed715cd2064434"
      },
      "id": "87ed715cd2064434",
      "type": "add",
      "after": "3766cbe42967e0aa",
      "date": 1695111746155
    },
    {
      "type": "edit",
      "id": "87ed715cd2064434",
      "item": {
        "type": "pagefold",
        "id": "87ed715cd2064434",
        "text": "~"
      },
      "date": 1695111748837
    },
    {
      "item": {
        "type": "factory",
        "id": "1bf9eb99d29cbfc0"
      },
      "id": "1bf9eb99d29cbfc0",
      "type": "add",
      "after": "87ed715cd2064434",
      "date": 1695111750377
    },
    {
      "type": "edit",
      "id": "1bf9eb99d29cbfc0",
      "item": {
        "type": "reference",
        "id": "1bf9eb99d29cbfc0",
        "site": "jon.federated.wiki",
        "slug": "carver-mead-rewrites-maxwell",
        "title": "Carver Mead rewrites Maxwell",
        "text": "Mead sees two important states of matter: coherent and incoherent. Before lasers there wasn't a lot of coherent to be so easily observed."
      },
      "date": 1695111752600
    },
    {
      "item": {
        "type": "factory",
        "id": "7400e9d73087909f"
      },
      "id": "7400e9d73087909f",
      "type": "add",
      "after": "1bf9eb99d29cbfc0",
      "date": 1695111795262
    },
    {
      "type": "edit",
      "id": "7400e9d73087909f",
      "item": {
        "type": "paragraph",
        "id": "7400e9d73087909f",
        "text": "The Spectator Interview "
      },
      "date": 1695111797628
    },
    {
      "type": "edit",
      "id": "7400e9d73087909f",
      "item": {
        "type": "paragraph",
        "id": "7400e9d73087909f",
        "text": "The Spectator Interview [https://web.archive.org/web/20040605034223/https://freespace.virgin.net/ch.thompson1/People/CarverMead.htm archive]"
      },
      "date": 1695111807501
    },
    {
      "type": "add",
      "id": "0cd9fe2b50e8cba6",
      "item": {
        "type": "paragraph",
        "id": "0cd9fe2b50e8cba6",
        "text": "Chip daddy Mead: 'A bunch of big egos' are strangling science\n"
      },
      "after": "7400e9d73087909f",
      "date": 1695111842466
    },
    {
      "type": "edit",
      "id": "0cd9fe2b50e8cba6",
      "item": {
        "type": "paragraph",
        "id": "0cd9fe2b50e8cba6",
        "text": "Chip daddy Mead: 'A bunch of big egos' are strangling science [https://www.theregister.com/2013/02/20/carver_mead_on_the_future_of_science/ theregister]"
      },
      "date": 1695111856057
    },
    {
      "type": "add",
      "id": "7627139653528441",
      "item": {
        "type": "paragraph",
        "id": "7627139653528441",
        "text": "> He picks up Feynman's challenge in a new book, Collective Electrodynamics (MIT Press), declaring that a physics that does not make sense, that defies human intuition, is obscurantist: It balks thought and intellectual progress. It blocks the light of the age. "
      },
      "after": "7400e9d73087909f",
      "date": 1695111912597
    },
    {
      "type": "edit",
      "id": "7627139653528441",
      "item": {
        "type": "markdown",
        "id": "7627139653528441",
        "text": "> He picks up Feynman's challenge in a new book, Collective Electrodynamics (MIT Press), declaring that a physics that does not make sense, that defies human intuition, is obscurantist: It balks thought and intellectual progress. It blocks the light of the age. "
      },
      "date": 1695111913777
    },
    {
      "type": "edit",
      "id": "7627139653528441",
      "item": {
        "type": "markdown",
        "id": "7627139653528441",
        "text": "> He picks up Feynman's challenge in a new book, [[Collective Electrodynamics]] (MIT Press), declaring that a physics that does not make sense, that defies human intuition, is obscurantist: It balks thought and intellectual progress. It blocks the light of the age. "
      },
      "date": 1695111924663
    },
    {
      "item": {
        "type": "factory",
        "id": "1693d528df9b3623"
      },
      "id": "1693d528df9b3623",
      "type": "add",
      "after": "0cd9fe2b50e8cba6",
      "date": 1695113171507
    },
    {
      "type": "edit",
      "id": "1693d528df9b3623",
      "item": {
        "type": "video",
        "id": "1693d528df9b3623",
        "text": "YOUTUBE eAZWXX5930M"
      },
      "date": 1695113184580
    },
    {
      "type": "edit",
      "id": "1693d528df9b3623",
      "item": {
        "type": "video",
        "id": "1693d528df9b3623",
        "text": "YOUTUBE eAZWXX5930M\nCarver Mead “A Personal Journey Through the Information Revolution”"
      },
      "date": 1695113219729
    },
    {
      "type": "edit",
      "id": "1693d528df9b3623",
      "item": {
        "type": "video",
        "id": "1693d528df9b3623",
        "text": "YOUTUBE eAZWXX5930M\n[[Carver Mead]] “A Personal Journey Through the Information Revolution”"
      },
      "date": 1695113228757
    },
    {
      "item": {
        "type": "factory",
        "id": "05c31b625ac07c60"
      },
      "id": "05c31b625ac07c60",
      "type": "add",
      "after": "1693d528df9b3623",
      "date": 1695114871328
    },
    {
      "type": "edit",
      "id": "05c31b625ac07c60",
      "item": {
        "type": "video",
        "id": "05c31b625ac07c60",
        "text": "YOUTUBE oGHRMpIR2NE"
      },
      "date": 1695114881502
    },
    {
      "type": "edit",
      "id": "05c31b625ac07c60",
      "item": {
        "type": "video",
        "id": "05c31b625ac07c60",
        "text": "YOUTUBE oGHRMpIR2NE\nKyoto Prize Laureate Introduction: [[Carver Mead]]"
      },
      "date": 1695114910112
    },
    {
      "item": {
        "type": "factory",
        "id": "45c1db2d97cd3cca"
      },
      "id": "45c1db2d97cd3cca",
      "type": "add",
      "after": "05c31b625ac07c60",
      "date": 1695114949155
    },
    {
      "type": "edit",
      "id": "45c1db2d97cd3cca",
      "item": {
        "type": "paragraph",
        "id": "45c1db2d97cd3cca",
        "text": "When I was a student, it was commonly understood that one would study a subject until one became an expert; then, one would go out into the world and apply that expertise in one’s profession. It went without saying that the expertise itself, as updated through one’s experience, would allow the practice of that profession until retirement. The tacit assumption involved in that world view was that the knowledge base evolves slowly, an assumption then already losing validity. Today, we face an explosive growth of knowledge; by any measure, our knowledge base is doubling every few years. How do we, as a human culture, prepare ourselves and our children for this world in which the knowledge base turns over many times within a single human lifetime?"
      },
      "date": 1695114950876
    },
    {
      "type": "edit",
      "id": "45c1db2d97cd3cca",
      "item": {
        "type": "paragraph",
        "id": "45c1db2d97cd3cca",
        "text": "When I was a student, it was commonly understood that one would study a subject until one became an expert; then, one would go out into the world and apply that expertise in one’s profession. It went without saying that the expertise itself, as updated through one’s experience, would allow the practice of that profession until retirement. The tacit assumption involved in that world view was that the knowledge base evolves slowly, an assumption then already losing validity. Today, we face an explosive growth of knowledge; by any measure, our knowledge base is doubling every few years. How do we, as a human culture, prepare ourselves and our children for this world in which the knowledge base turns over many times within a single human lifetime? ([[Collective Electrodynamics]])"
      },
      "date": 1695115014512
    },
    {
      "type": "edit",
      "id": "45c1db2d97cd3cca",
      "item": {
        "type": "paragraph",
        "id": "45c1db2d97cd3cca",
        "text": "When I was a student, it was commonly understood that one would study a subject until one became an expert; then, one would go out into the world and apply that expertise in one’s profession. It went without saying that the expertise itself, as updated through one’s experience, would allow the practice of that profession until retirement. The tacit assumption involved in that world view was that the knowledge base evolves slowly, an assumption then already losing validity. Today, we face an explosive growth of knowledge; by any measure, our knowledge base is doubling every few years. How do we, as a human culture, prepare ourselves and our children for this world in which the knowledge base turns over many times within a single human lifetime? ([[Collective Electrodynamics]], Foreword)"
      },
      "date": 1695115029041
    },
    {
      "item": {
        "type": "factory",
        "id": "ebf1a7a412dacbad"
      },
      "id": "ebf1a7a412dacbad",
      "type": "add",
      "after": "45c1db2d97cd3cca",
      "date": 1695115100594
    },
    {
      "type": "edit",
      "id": "ebf1a7a412dacbad",
      "item": {
        "type": "paragraph",
        "id": "ebf1a7a412dacbad",
        "text": "⇒ [[Formulation of a Problem]]"
      },
      "date": 1695115109386
    },
    {
      "item": {
        "type": "factory",
        "id": "c412c04077aaff9e"
      },
      "id": "c412c04077aaff9e",
      "type": "add",
      "after": "ebf1a7a412dacbad",
      "date": 1695115421449
    },
    {
      "type": "edit",
      "id": "c412c04077aaff9e",
      "item": {
        "type": "paragraph",
        "id": "c412c04077aaff9e",
        "text": "[[Functional Programming]]"
      },
      "date": 1695115427192
    },
    {
      "type": "edit",
      "id": "c412c04077aaff9e",
      "item": {
        "type": "paragraph",
        "id": "c412c04077aaff9e",
        "text": "[[Functional Programming]] was developed to make programs more transparent."
      },
      "date": 1695115457702
    },
    {
      "id": "2687950da038e81f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2687950da038e81f",
        "text": "Funktionale Programmierung verzichtet hierzu auf einige Konzepte, die in der imperativen und der hierauf basierenden objektorientierten Programierung zum Standard gehören. Als Folge ergibt sich ein Programmieransatz, der sich vom klassischen imperativen unterscheidet: Anstatt Programme (Algorithmen) zu entwickeln, die schrittweise vorschreiben, wie man zur Lösung gelangt, versucht man, das Problem mit Hilfe von Funktionen möglichst präzise zu erfassen."
      },
      "after": "c412c04077aaff9e",
      "attribution": {
        "page": "Funktionale Programmierung"
      },
      "date": 1695115477566
    },
    {
      "type": "edit",
      "id": "2687950da038e81f",
      "item": {
        "type": "paragraph",
        "id": "2687950da038e81f",
        "text": "Funktionale Programmierung verzichtet hierzu auf einige Konzepte, die in der imperativen und der hierauf basierenden objektorientierten Programierung zum Standard gehören. Als Folge ergibt sich ein Programmieransatz, der sich vom klassischen imperativen unterscheidet: Anstatt Programme (Algorithmen) zu entwickeln, die schrittweise vorschreiben, wie man zur Lösung gelangt, versucht man, das Problem mit Hilfe von Funktionen möglichst präzise zu erfassen.aFunctional programming renounces for this some concepts, which belong in the imperative and the object-oriented programming based on this to the standard. As a consequence a programming approach results, which differs from the classical imperative one: Instead of developing programs (algorithms), which prescribe step by step, how one arrives at the solution, one tries to seize the problem with the help of functions as precisely as possible."
      },
      "date": 1695115484705
    },
    {
      "type": "edit",
      "id": "2687950da038e81f",
      "item": {
        "type": "paragraph",
        "id": "2687950da038e81f",
        "text": "Functional programming renounces for this some concepts, which belong in the imperative and the object-oriented programming based on this to the standard. As a consequence a programming approach results, which differs from the classical imperative one: Instead of developing programs (algorithms), which prescribe step by step, how one arrives at the solution, one tries to seize the problem with the help of functions as precisely as possible."
      },
      "date": 1695115492382
    },
    {
      "type": "edit",
      "id": "c412c04077aaff9e",
      "item": {
        "type": "paragraph",
        "id": "c412c04077aaff9e",
        "text": "[[Functional Programming]] was developed to make programs more transparent. [⇐ [[ Funktionale Programmierung]]] "
      },
      "date": 1695115571478
    },
    {
      "type": "edit",
      "id": "c412c04077aaff9e",
      "item": {
        "type": "paragraph",
        "id": "c412c04077aaff9e",
        "text": "[[Functional Programming]] was developed to make programs more transparent. [⇐ [[Funktionale Programmierung]]] "
      },
      "date": 1695115578945
    },
    {
      "item": {
        "type": "factory",
        "id": "ea5b9dda1b7cb051"
      },
      "id": "ea5b9dda1b7cb051",
      "type": "add",
      "after": "2687950da038e81f",
      "date": 1695115921040
    },
    {
      "type": "edit",
      "id": "ea5b9dda1b7cb051",
      "item": {
        "type": "paragraph",
        "id": "ea5b9dda1b7cb051",
        "text": "In his wonderful book, The Act of Creation, Arthur Koestler (3) defines the creative process as starting with the juxtaposition"
      },
      "date": 1695115922816
    },
    {
      "type": "edit",
      "id": "ea5b9dda1b7cb051",
      "item": {
        "type": "paragraph",
        "id": "ea5b9dda1b7cb051",
        "text": "In his wonderful book, The Act of Creation, Arthur Koestler (3) defines the creative process as starting with the juxtaposition of two concepts from separate conceptual spaces. Such a conjunction creates not merely a new idea but an enlargement of the space of ideas, a cross-fertilization that is the very stuff of which innovation is made. If we, by education, by scientific practices, by social norms, restrict the development of individual talents to narrow specializations, we will thereby lose the ability to innovate."
      },
      "date": 1695115947396
    },
    {
      "type": "edit",
      "id": "ea5b9dda1b7cb051",
      "item": {
        "type": "paragraph",
        "id": "ea5b9dda1b7cb051",
        "text": "In his wonderful book, The Act of Creation, [[Arthur Koestler]] (3) defines the creative process as starting with the juxtaposition of two concepts from separate conceptual spaces. Such a conjunction creates not merely a new idea but an enlargement of the space of ideas, a cross-fertilization that is the very stuff of which innovation is made. If we, by education, by scientific practices, by social norms, restrict the development of individual talents to narrow specializations, we will thereby lose the ability to innovate."
      },
      "date": 1695115960464
    },
    {
      "type": "edit",
      "id": "ea5b9dda1b7cb051",
      "item": {
        "type": "paragraph",
        "id": "ea5b9dda1b7cb051",
        "text": "In his wonderful book, [[The Act of Creation]], [[Arthur Koestler]] (3) defines the creative process as starting with the juxtaposition of two concepts from separate conceptual spaces. Such a conjunction creates not merely a new idea but an enlargement of the space of ideas, a cross-fertilization that is the very stuff of which innovation is made. If we, by education, by scientific practices, by social norms, restrict the development of individual talents to narrow specializations, we will thereby lose the ability to innovate."
      },
      "date": 1695116027691
    },
    {
      "item": {
        "type": "factory",
        "id": "3d1adfd4f74483bd"
      },
      "id": "3d1adfd4f74483bd",
      "type": "add",
      "after": "ea5b9dda1b7cb051",
      "date": 1695117273798
    },
    {
      "type": "edit",
      "id": "3d1adfd4f74483bd",
      "item": {
        "type": "pagefold",
        "id": "3d1adfd4f74483bd",
        "text": "~"
      },
      "date": 1695117277883
    },
    {
      "item": {
        "type": "factory",
        "id": "4b423120b3301f3f"
      },
      "id": "4b423120b3301f3f",
      "type": "add",
      "after": "3d1adfd4f74483bd",
      "date": 1695117279045
    },
    {
      "type": "edit",
      "id": "4b423120b3301f3f",
      "item": {
        "type": "paragraph",
        "id": "4b423120b3301f3f",
        "text": "Figure 6-1: James units and operations"
      },
      "date": 1695117280604
    },
    {
      "type": "edit",
      "id": "4b423120b3301f3f",
      "item": {
        "type": "paragraph",
        "id": "4b423120b3301f3f",
        "text": "⇒ [[James Form]]"
      },
      "date": 1695117309761
    },
    {
      "type": "add",
      "id": "e1ba12fad7159644",
      "item": {
        "type": "paragraph",
        "id": "e1ba12fad7159644",
        "text": "Figure 6-1: James units and operations"
      },
      "after": "4b423120b3301f3f",
      "date": 1695117311240
    },
    {
      "type": "add",
      "id": "ce5d7b264526726b",
      "item": {
        "type": "paragraph",
        "id": "ce5d7b264526726b",
        "text": "log# A"
      },
      "after": "e1ba12fad7159644",
      "date": 1695117327738
    },
    {
      "type": "edit",
      "id": "ce5d7b264526726b",
      "item": {
        "type": "paragraph",
        "id": "ce5d7b264526726b",
        "text": "unit: [ ]"
      },
      "date": 1695117341012
    },
    {
      "type": "add",
      "id": "e9c8b9ad8c7b6060",
      "item": {
        "type": "paragraph",
        "id": "e9c8b9ad8c7b6060",
        "text": "log# A"
      },
      "after": "ce5d7b264526726b",
      "date": 1695117341593
    },
    {
      "type": "add",
      "id": "d9d3ddd412fc6643",
      "item": {
        "type": "paragraph",
        "id": "d9d3ddd412fc6643",
        "text": "unit: [A] – "
      },
      "after": "ce5d7b264526726b",
      "date": 1695117366640
    },
    {
      "type": "edit",
      "id": "d9d3ddd412fc6643",
      "item": {
        "type": "paragraph",
        "id": "d9d3ddd412fc6643",
        "text": "unit: [A] – interpretation: "
      },
      "date": 1695117380505
    },
    {
      "type": "remove",
      "id": "e9c8b9ad8c7b6060",
      "date": 1695117383417
    },
    {
      "type": "edit",
      "id": "d9d3ddd412fc6643",
      "item": {
        "type": "paragraph",
        "id": "d9d3ddd412fc6643",
        "text": "unit: [A] – interpretation: log# A"
      },
      "date": 1695117384378
    },
    {
      "type": "edit",
      "id": "ce5d7b264526726b",
      "item": {
        "type": "paragraph",
        "id": "ce5d7b264526726b",
        "text": "unit: [ ] – interpretation: –∞"
      },
      "date": 1695117428837
    },
    {
      "type": "edit",
      "id": "4b423120b3301f3f",
      "item": {
        "type": "paragraph",
        "id": "4b423120b3301f3f",
        "text": "⇒ [[James Form]] ⇒ [[Container Types]]"
      },
      "date": 1695117450136
    },
    {
      "type": "remove",
      "id": "e1ba12fad7159644",
      "date": 1695117464020
    },
    {
      "item": {
        "type": "factory",
        "id": "f9ea99283c9aee47"
      },
      "id": "f9ea99283c9aee47",
      "type": "add",
      "after": "d9d3ddd412fc6643",
      "date": 1695117521964
    },
    {
      "type": "edit",
      "id": "f9ea99283c9aee47",
      "item": {
        "type": "paragraph",
        "id": "f9ea99283c9aee47",
        "text": "⇒ [[Pile]] ⇒ [GetChild]] ⇒ [[Trie]] ⇒ [[Patricia]]"
      },
      "date": 1695117532974
    },
    {
      "type": "edit",
      "id": "f9ea99283c9aee47",
      "item": {
        "type": "paragraph",
        "id": "f9ea99283c9aee47",
        "text": "⇒ [[Pile]] ⇒ [[GetChild]] ⇒ [[Trie]] ⇒ [[Patricia]]"
      },
      "date": 1695117537088
    },
    {
      "type": "add",
      "id": "b2bc4c7aee9397e5",
      "item": {
        "type": "paragraph",
        "id": "b2bc4c7aee9397e5",
        "text": "log C"
      },
      "after": "f9ea99283c9aee47",
      "date": 1695117723324
    },
    {
      "type": "add",
      "id": "532096c680079887",
      "item": {
        "type": "paragraph",
        "id": "532096c680079887",
        "text": "KEY"
      },
      "after": "b2bc4c7aee9397e5",
      "date": 1695117877122
    },
    {
      "type": "edit",
      "id": "f9ea99283c9aee47",
      "item": {
        "type": "paragraph",
        "id": "f9ea99283c9aee47",
        "text": "⇒ [[Pile]] ⇒ [[Pile Memory]] ⇒ [[Tree Arranged on Pages]] "
      },
      "date": 1695117999728
    },
    {
      "id": "36a9b6917261a24a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "36a9b6917261a24a",
        "text": "KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of “(JACK)” the node would contain the number 24 (which indicates the starting place of “JACK BUILT?” in the text string)."
      },
      "after": "532096c680079887",
      "attribution": {
        "page": "Tree Arranged on Pages"
      },
      "date": 1695118018430
    },
    {
      "type": "edit",
      "id": "b2bc4c7aee9397e5",
      "item": {
        "type": "paragraph",
        "id": "b2bc4c7aee9397e5",
        "text": "log C "
      },
      "date": 1695118025448
    },
    {
      "type": "edit",
      "id": "b2bc4c7aee9397e5",
      "item": {
        "type": "paragraph",
        "id": "b2bc4c7aee9397e5",
        "text": "log C ⇒ lg C"
      },
      "date": 1695118032505
    },
    {
      "id": "8c2733d497f18fcf",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8c2733d497f18fcf",
        "text": "⇒ [[Loop]] [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page], statementsHelp,  ParserHelpers [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L6-L7 code]"
      },
      "after": "36a9b6917261a24a",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695118136211
    },
    {
      "id": "f60f58d21e281fff",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we [[Loop]], and we reorder them only once we are Done. This is a very common pattern with loop! [⇒ [[Track in Reverse Order]]]"
      },
      "after": "8c2733d497f18fcf",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695118147044
    },
    {
      "id": "097128d65eddb346",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "097128d65eddb346",
        "text": "> Check out DoubleQuoteString.elm [https://github.com/elm/parser/blob/master/examples/DoubleQuoteString.elm code] for another example."
      },
      "after": "f60f58d21e281fff",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695118154662
    },
    {
      "type": "edit",
      "id": "36a9b6917261a24a",
      "item": {
        "type": "paragraph",
        "id": "36a9b6917261a24a",
        "text": "> KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of “(JACK)” the node would contain the number 24 (which indicates the starting place of “JACK BUILT?” in the text string)."
      },
      "date": 1695118190533
    },
    {
      "type": "edit",
      "id": "36a9b6917261a24a",
      "item": {
        "type": "markdown",
        "id": "36a9b6917261a24a",
        "text": "> KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of “(JACK)” the node would contain the number 24 (which indicates the starting place of “JACK BUILT?” in the text string)."
      },
      "date": 1695118191467
    },
    {
      "type": "remove",
      "id": "532096c680079887",
      "date": 1695118198502
    },
    {
      "type": "edit",
      "id": "b2bc4c7aee9397e5",
      "item": {
        "type": "paragraph",
        "id": "b2bc4c7aee9397e5",
        "text": "log C ⇒ lg C ⇒ log10 C"
      },
      "date": 1695118257343
    },
    {
      "type": "edit",
      "id": "4b423120b3301f3f",
      "item": {
        "type": "paragraph",
        "id": "4b423120b3301f3f",
        "text": "⇒ [[James Form]] ⇒ [[James Units and Operations]] ⇒ [[Container Types]]"
      },
      "date": 1695118353210
    },
    {
      "type": "add",
      "id": "9450c7539e77f2c4",
      "item": {
        "type": "paragraph",
        "id": "9450c7539e77f2c4",
        "text": "[[escape characters]]"
      },
      "after": "f60f58d21e281fff",
      "date": 1695119352940
    },
    {
      "type": "edit",
      "id": "9450c7539e77f2c4",
      "item": {
        "type": "paragraph",
        "id": "9450c7539e77f2c4",
        "text": "[[Escape Characters]]"
      },
      "date": 1695119366638
    },
    {
      "id": "097128d65eddb346",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "adc58f5f2bc56f89",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "a214ec7501d8d406",
        "53843f14030c508f",
        "c0c9f294e5e6bd59",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "8e5e4b983ecb95a0",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "73b380697a912dca",
        "c35737429b80df9f",
        "991947fc794bc825",
        "8bbd18d18e23f250",
        "3766cbe42967e0aa",
        "87ed715cd2064434",
        "1bf9eb99d29cbfc0",
        "7400e9d73087909f",
        "7627139653528441",
        "0cd9fe2b50e8cba6",
        "1693d528df9b3623",
        "05c31b625ac07c60",
        "45c1db2d97cd3cca",
        "ebf1a7a412dacbad",
        "c412c04077aaff9e",
        "2687950da038e81f",
        "ea5b9dda1b7cb051",
        "3d1adfd4f74483bd",
        "4b423120b3301f3f",
        "ce5d7b264526726b",
        "d9d3ddd412fc6643",
        "f9ea99283c9aee47",
        "b2bc4c7aee9397e5",
        "36a9b6917261a24a",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "9450c7539e77f2c4"
      ],
      "date": 1695119456127
    },
    {
      "type": "edit",
      "id": "9450c7539e77f2c4",
      "item": {
        "type": "paragraph",
        "id": "9450c7539e77f2c4",
        "text": "⇒ [[Escape Characters]]"
      },
      "date": 1695119589492
    },
    {
      "item": {
        "type": "factory",
        "id": "0edfff98b8f81d2e"
      },
      "id": "0edfff98b8f81d2e",
      "type": "add",
      "after": "9450c7539e77f2c4",
      "date": 1695119714273
    },
    {
      "id": "0edfff98b8f81d2e",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "adc58f5f2bc56f89",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "a214ec7501d8d406",
        "53843f14030c508f",
        "c0c9f294e5e6bd59",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "8e5e4b983ecb95a0",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "73b380697a912dca",
        "c35737429b80df9f",
        "991947fc794bc825",
        "8bbd18d18e23f250",
        "3766cbe42967e0aa",
        "87ed715cd2064434",
        "1bf9eb99d29cbfc0",
        "7400e9d73087909f",
        "7627139653528441",
        "0cd9fe2b50e8cba6",
        "1693d528df9b3623",
        "05c31b625ac07c60",
        "45c1db2d97cd3cca",
        "ebf1a7a412dacbad",
        "c412c04077aaff9e",
        "2687950da038e81f",
        "ea5b9dda1b7cb051",
        "3d1adfd4f74483bd",
        "4b423120b3301f3f",
        "ce5d7b264526726b",
        "d9d3ddd412fc6643",
        "f9ea99283c9aee47",
        "b2bc4c7aee9397e5",
        "36a9b6917261a24a",
        "0edfff98b8f81d2e",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "9450c7539e77f2c4"
      ],
      "date": 1695119718273
    },
    {
      "type": "edit",
      "id": "0edfff98b8f81d2e",
      "item": {
        "type": "pagefold",
        "id": "0edfff98b8f81d2e",
        "text": "~"
      },
      "date": 1695119721104
    },
    {
      "id": "7cff5abf9e38d20b",
      "type": "add",
      "item": {
        "type": "image",
        "id": "7cff5abf9e38d20b",
        "text": "Figure 6-1: James units and operations",
        "size": "wide",
        "width": 416,
        "height": 175,
        "url": "/assets/plugins/image/9efcdf9b8b36ab43eecb56b4ad6c58db.jpg"
      },
      "after": "4b423120b3301f3f",
      "attribution": {
        "page": "James Units and Operations"
      },
      "date": 1695119760924
    },
    {
      "type": "add",
      "id": "caeae3e44fa84011",
      "item": {
        "type": "paragraph",
        "id": "caeae3e44fa84011",
        "text": "The form ([A)] is possible as an imaginary pattern, but that extension to the concept of containment would also require a completely new mapping to the interpretation. That type of mapping is even difficult to write in conventional notation. Function notation also obeys the structural restrictions of containers. But we could read ([A)] as a Venn diagram, for instance, where the roundand square- boundaries each identify a set, and A identifies the intersection of both sets. The two overlapping functions become two different properties shared by the single object A."
      },
      "after": "ea5b9dda1b7cb051",
      "date": 1695119889078
    },
    {
      "type": "add",
      "id": "69d560e9192c79d8",
      "item": {
        "type": "paragraph",
        "id": "69d560e9192c79d8",
        "text": "⇒ [[Juxtaposition of Two Concepts]]"
      },
      "after": "ea5b9dda1b7cb051",
      "date": 1695119911328
    },
    {
      "type": "add",
      "id": "0310ed656147d64b",
      "item": {
        "type": "paragraph",
        "id": "0310ed656147d64b",
        "text": "\nBRICKEN, William, 2019. Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding. . Unary press. ISBN 978-1-73248-513-6, p. "
      },
      "after": "caeae3e44fa84011",
      "date": 1695119948047
    },
    {
      "type": "edit",
      "id": "0310ed656147d64b",
      "item": {
        "type": "paragraph",
        "id": "0310ed656147d64b",
        "text": "BRICKEN, William, 2019. Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding. . Unary press. ISBN 978-1-73248-513-6, p. 217"
      },
      "date": 1695119958011
    },
    {
      "type": "add",
      "id": "96a6ee20a5a4d56e",
      "item": {
        "type": "paragraph",
        "id": "96a6ee20a5a4d56e",
        "text": "Context: [[Accumulation]]"
      },
      "after": "0310ed656147d64b",
      "date": 1695120049466
    },
    {
      "type": "edit",
      "id": "96a6ee20a5a4d56e",
      "item": {
        "type": "paragraph",
        "id": "96a6ee20a5a4d56e",
        "text": "Context: [[Accumulation]], \"not a distinction\""
      },
      "date": 1695120081167
    },
    {
      "type": "edit",
      "id": "96a6ee20a5a4d56e",
      "item": {
        "type": "paragraph",
        "id": "96a6ee20a5a4d56e",
        "text": "Context: [[Accumulation]], ([A)], \"not a distinction\""
      },
      "date": 1695120097898
    },
    {
      "type": "add",
      "id": "adecb46ea6cf09b8",
      "item": {
        "type": "paragraph",
        "id": "adecb46ea6cf09b8",
        "text": "We have the choice of building meaning upon a domain that includes a lot of meaningless junk, or building the domain upon meaning, in which case there will be meaningless junk to clear away."
      },
      "after": "96a6ee20a5a4d56e",
      "date": 1695120147129
    },
    {
      "type": "edit",
      "id": "96a6ee20a5a4d56e",
      "item": {
        "type": "paragraph",
        "id": "96a6ee20a5a4d56e",
        "text": "Context: Chapter 9, , [[Accumulation]], ([A)], \"not a distinction\""
      },
      "date": 1695120187674
    },
    {
      "type": "edit",
      "id": "96a6ee20a5a4d56e",
      "item": {
        "type": "paragraph",
        "id": "96a6ee20a5a4d56e",
        "text": "Context: Chapter 9, [[Domain]], [[Accumulation]], ([A)], \"not a distinction\""
      },
      "date": 1695120196207
    },
    {
      "type": "add",
      "id": "65415ae206e717e9",
      "item": {
        "type": "paragraph",
        "id": "65415ae206e717e9",
        "text": "[[Closure]]"
      },
      "after": "96a6ee20a5a4d56e",
      "date": 1695120320039
    },
    {
      "type": "edit",
      "id": "65415ae206e717e9",
      "item": {
        "type": "paragraph",
        "id": "65415ae206e717e9",
        "text": "[[Closure]]: But there is a subtlety for void-based forms: closure loses meaning when transformations create void-equivalent forms. The domain of non-existent forms is a nonsense concept."
      },
      "date": 1695120336256
    },
    {
      "type": "edit",
      "id": "65415ae206e717e9",
      "item": {
        "type": "paragraph",
        "id": "65415ae206e717e9",
        "text": "⇒ [[Closure]]: But there is a subtlety for void-based forms: closure loses meaning when transformations create void-equivalent forms. The domain of non-existent forms is a nonsense concept."
      },
      "date": 1695120342327
    },
    {
      "type": "edit",
      "id": "0310ed656147d64b",
      "item": {
        "type": "paragraph",
        "id": "0310ed656147d64b",
        "text": "BRICKEN, William, 2019. Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding. . Unary press. ISBN 978-1-73248-513-6, p. 216–217"
      },
      "date": 1695120353796
    },
    {
      "type": "edit",
      "id": "0310ed656147d64b",
      "item": {
        "type": "paragraph",
        "id": "0310ed656147d64b",
        "text": "BRICKEN, William, 2019. Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding. . Unary press. ISBN 978-1-73248-513-6, p. 216–217."
      },
      "date": 1695120356679
    },
    {
      "type": "edit",
      "id": "0310ed656147d64b",
      "item": {
        "type": "paragraph",
        "id": "0310ed656147d64b",
        "text": "]]BRICKEN, William, 2019. [[Iconic Arithmetic Volume I: The Design of Mathematics for Human Understanding. . Unary press. ISBN 978-1-73248-513-6, p. 216–217."
      },
      "date": 1695120362707
    },
    {
      "type": "edit",
      "id": "0310ed656147d64b",
      "item": {
        "type": "paragraph",
        "id": "0310ed656147d64b",
        "text": "BRICKEN, William, 2019. [[Iconic Arithmetic]] Volume I: The Design of Mathematics for Human Understanding. . Unary press. ISBN 978-1-73248-513-6, p. 216–217."
      },
      "date": 1695120371371
    },
    {
      "type": "add",
      "id": "f2fe132bf9e8b466",
      "item": {
        "type": "paragraph",
        "id": "f2fe132bf9e8b466",
        "text": "Since void-equivalent forms are meaningless,"
      },
      "after": "65415ae206e717e9",
      "date": 1695120408872
    },
    {
      "type": "edit",
      "id": "f2fe132bf9e8b466",
      "item": {
        "type": "paragraph",
        "id": "f2fe132bf9e8b466",
        "text": "Since void-equivalent forms are meaningless, their illusionary presence is irrelevant."
      },
      "date": 1695120423052
    },
    {
      "type": "edit",
      "id": "adecb46ea6cf09b8",
      "item": {
        "type": "paragraph",
        "id": "adecb46ea6cf09b8",
        "text": "We have the choice of building meaning upon a [[Domain]] that includes a lot of meaningless junk, or building the domain upon meaning, in which case there will be meaningless junk to clear away."
      },
      "date": 1695120437286
    },
    {
      "type": "add",
      "id": "ce320ef4afd03c08",
      "item": {
        "type": "paragraph",
        "id": "ce320ef4afd03c08",
        "text": "Stretching to adopt Gödel’s perspective, if we wish to address all possible structures (a complete system), then some will be illusionary (an inconsistent system). Alternatively if we wish to avoid illusion (a consistent system), then some structures will transform into nothing, leaving the system incomplete."
      },
      "after": "adecb46ea6cf09b8",
      "date": 1695120470989
    },
    {
      "type": "add",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note: The idea of society as a totality (as a complete system) is illusionary?!"
      },
      "after": "ce320ef4afd03c08",
      "date": 1695120623222
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note: Society as a totality (as a complete system) contains some illusionary possible structures illusionary?!"
      },
      "date": 1695120810472
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note: Society as a totality (as a complete system) addresses some illusionary possible structures illusionary?!"
      },
      "date": 1695120822832
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note: Society as a totality (as a complete system) addresses some illusionary possible structures?!"
      },
      "date": 1695120887241
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note: Society as a totality (as a complete system) addresses some illusionary possible structures as well. The science of society is incomplete. Science is an incomplete system."
      },
      "date": 1695121004400
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note: Society as a totality (as a complete system) addresses also some illusionary possible structures as well. The science of society is incomplete. Science is an incomplete system."
      },
      "date": 1695121027210
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note: Society as a totality (as a complete system) addresses also some illusionary possible structures. The science of society is incomplete. Science is an incomplete system."
      },
      "date": 1695121043487
    },
    {
      "type": "add",
      "id": "f202b0f80cfe1456",
      "item": {
        "type": "paragraph",
        "id": "f202b0f80cfe1456",
        "text": "18. ([A)] is not a valid containment pattern: We are considering here only the act of distinction. A boundary identifies a difference. Set intersection denies that difference."
      },
      "after": "96a6ee20a5a4d56e",
      "date": 1695121297534
    },
    {
      "type": "add",
      "id": "6bb1c44cfb650aa8",
      "item": {
        "type": "paragraph",
        "id": "6bb1c44cfb650aa8",
        "text": "negates"
      },
      "after": "f202b0f80cfe1456",
      "date": 1695121380254
    },
    {
      "type": "edit",
      "id": "6bb1c44cfb650aa8",
      "item": {
        "type": "paragraph",
        "id": "6bb1c44cfb650aa8",
        "text": "negate a difference"
      },
      "date": 1695121396949
    },
    {
      "type": "edit",
      "id": "6bb1c44cfb650aa8",
      "item": {
        "type": "paragraph",
        "id": "6bb1c44cfb650aa8",
        "text": "⇒ [[Negate a Difference]]"
      },
      "date": 1695121415142
    },
    {
      "id": "0310ed656147d64b",
      "type": "remove",
      "removedTo": {
        "page": "Negate a Difference"
      },
      "date": 1695121440493
    },
    {
      "id": "f2fe132bf9e8b466",
      "type": "remove",
      "removedTo": {
        "page": "Closure"
      },
      "date": 1695122992928
    },
    {
      "id": "adecb46ea6cf09b8",
      "type": "remove",
      "removedTo": {
        "page": "Closure"
      },
      "date": 1695122999477
    },
    {
      "id": "ce320ef4afd03c08",
      "type": "remove",
      "removedTo": {
        "page": "Closure"
      },
      "date": 1695123014429
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note: Society as a totality (as a complete system) [[address]]es also some illusionary possible structures. The science of society is incomplete. Science is an incomplete system."
      },
      "date": 1695123049927
    },
    {
      "item": {
        "type": "factory",
        "id": "dda48e37a1f51d28"
      },
      "id": "dda48e37a1f51d28",
      "type": "add",
      "after": "9450c7539e77f2c4",
      "date": 1695123144946
    },
    {
      "id": "dda48e37a1f51d28",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "adc58f5f2bc56f89",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "a214ec7501d8d406",
        "53843f14030c508f",
        "c0c9f294e5e6bd59",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "8e5e4b983ecb95a0",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "73b380697a912dca",
        "c35737429b80df9f",
        "991947fc794bc825",
        "8bbd18d18e23f250",
        "3766cbe42967e0aa",
        "87ed715cd2064434",
        "1bf9eb99d29cbfc0",
        "7400e9d73087909f",
        "7627139653528441",
        "0cd9fe2b50e8cba6",
        "1693d528df9b3623",
        "05c31b625ac07c60",
        "45c1db2d97cd3cca",
        "ebf1a7a412dacbad",
        "c412c04077aaff9e",
        "2687950da038e81f",
        "ea5b9dda1b7cb051",
        "69d560e9192c79d8",
        "caeae3e44fa84011",
        "96a6ee20a5a4d56e",
        "f202b0f80cfe1456",
        "6bb1c44cfb650aa8",
        "65415ae206e717e9",
        "dda48e37a1f51d28",
        "a945af58168d9e57",
        "3d1adfd4f74483bd",
        "4b423120b3301f3f",
        "7cff5abf9e38d20b",
        "ce5d7b264526726b",
        "d9d3ddd412fc6643",
        "f9ea99283c9aee47",
        "b2bc4c7aee9397e5",
        "36a9b6917261a24a",
        "0edfff98b8f81d2e",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "9450c7539e77f2c4"
      ],
      "date": 1695123150997
    },
    {
      "type": "edit",
      "id": "dda48e37a1f51d28",
      "item": {
        "type": "reference",
        "id": "dda48e37a1f51d28",
        "site": "wiki.ralfbarkow.ch",
        "slug": "object-intrinsically-addressable",
        "title": "Object Intrinsically Addressable",
        "text": "Every knowledge object—from the largest documents, to aggregate branches, down to content units such as characters—has an unambiguous address, understandable and readable by a user, and referenceable anywhere in the hyperdocument system. Such intrinsic addressability should be integrated deeply into commands for editing, structuring, jumping. Intrinsic addressing options not only are natural to learn and embed in links, but serve as parameters for direct, user-invoked jumping and manipulation commands."
      },
      "date": 1695123154168
    },
    {
      "type": "edit",
      "id": "dda48e37a1f51d28",
      "item": {
        "type": "reference",
        "id": "dda48e37a1f51d28",
        "site": "wiki.ralfbarkow.ch",
        "slug": "object-intrinsically-addressable",
        "title": "Object Intrinsically Addressable",
        "text": "Every knowledge object—from the largest documents, to aggregate branches, down to content units such as characters—has an unambiguous address, understandable and readable by a user, and referenceable anywhere in the hyperdocument system."
      },
      "date": 1695123175149
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note([[Closure]]): Society as a totality (as a complete system) [[address]]es also some illusionary possible structures. The science of society is incomplete. Science is an incomplete system."
      },
      "date": 1695123212948
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note in the context of [[Closure]]: Society as a totality (as a complete system) [[address]]es also some illusionary possible structures. The science of society is incomplete. Science is an incomplete system."
      },
      "date": 1695123233011
    },
    {
      "id": "6bb1c44cfb650aa8",
      "type": "remove",
      "removedTo": {
        "page": "Closure"
      },
      "date": 1695123298512
    },
    {
      "id": "399a88a332638fb7",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "399a88a332638fb7",
        "text": "The form ([A)] is possible as an imaginary pattern, but that extension to the concept of containment would also require a completely new mapping to the interpretation. That type of mapping is even difficult to write in conventional notation. Function notation also obeys the structural restrictions of containers. But we could read ([A)] as a Venn diagram, for instance, where the roundand square- boundaries each identify a set, and A identifies the intersection of both sets. The two overlapping functions become two different properties shared by the single object A."
      },
      "after": "69d560e9192c79d8",
      "attribution": {
        "page": "Negate a Difference"
      },
      "date": 1695123455799
    },
    {
      "type": "remove",
      "id": "caeae3e44fa84011",
      "date": 1695123457498
    },
    {
      "type": "edit",
      "id": "399a88a332638fb7",
      "item": {
        "type": "paragraph",
        "id": "399a88a332638fb7",
        "text": "The form ([A)] is possible as an imaginary pattern, but that extension to the concept of containment would also require a completely new mapping to the interpretation. That type of mapping is even difficult to write in conventional notation. Function notation also obeys the structural restrictions of containers. But we could read ([A)] as a Venn diagram, for instance, where the round- and square- boundaries each identify a set, and A identifies the intersection of both sets. The two overlapping functions become two different properties shared by the single object A."
      },
      "date": 1695123491305
    },
    {
      "type": "edit",
      "id": "69d560e9192c79d8",
      "item": {
        "type": "paragraph",
        "id": "69d560e9192c79d8",
        "text": "⇒ [[Juxtaposition of Two Concepts]] ⇒ [[Pile]]"
      },
      "date": 1695123547478
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note in the context of [[Closure]]: With the concept of [[Society]] as a totality (as a complete system) [[address]]es also some illusionary possible structures. The science of society is incomplete. Science is an incomplete system."
      },
      "date": 1695124169393
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note in the context of [[Closure]]: With the concept of [[Society]] as a totality (as a complete system)"
      },
      "date": 1695124187540
    },
    {
      "type": "add",
      "id": "77bfe03ed0732153",
      "item": {
        "type": "paragraph",
        "id": "77bfe03ed0732153",
        "text": "[[address]]es also some illusionary possible structures. The science of society is incomplete. Science is an incomplete system."
      },
      "after": "a945af58168d9e57",
      "date": 1695124188950
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note in the context of [[Closure]]: With the concept of [[Society]] as a totality (as a complete system) we "
      },
      "date": 1695124192571
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note in the context of [[Closure]]: With the concept of [[Society]] as a totality (as a complete system)  we are [[refer]]ring to all of the [[Domain]]. "
      },
      "date": 1695124202386
    },
    {
      "type": "edit",
      "id": "a945af58168d9e57",
      "item": {
        "type": "paragraph",
        "id": "a945af58168d9e57",
        "text": "Note in the context of [[Closure]]: With the concept of [[Society]] as a totality (as a complete system)  we are [[refer]]ring to all of the [[Domain]] of [[Discourse]]. "
      },
      "date": 1695124226649
    },
    {
      "id": "adecb46ea6cf09b8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "adecb46ea6cf09b8",
        "text": "We have the choice of building meaning upon a [[Domain]] that includes a lot of meaningless junk, or building the domain upon meaning, in which case there will be meaningless junk to clear away."
      },
      "after": "a945af58168d9e57",
      "attribution": {
        "page": "Closure"
      },
      "date": 1695124315015
    },
    {
      "type": "edit",
      "id": "adecb46ea6cf09b8",
      "item": {
        "type": "paragraph",
        "id": "adecb46ea6cf09b8",
        "text": "We have the choice of building meaning upon a [[Domain]] that includes a lot of meaningless junk, or building the domain upon [[meaning]], in which case there will be meaningless junk to clear away."
      },
      "date": 1695124350462
    },
    {
      "type": "edit",
      "id": "adecb46ea6cf09b8",
      "item": {
        "type": "paragraph",
        "id": "adecb46ea6cf09b8",
        "text": "We have the choice of building meaning upon a [[Domain]] that includes a lot of meaningless junk, or building the domain upon [[Meaning (Sinn)]], in which case there will be meaningless junk to clear away."
      },
      "date": 1695124367028
    },
    {
      "type": "add",
      "id": "a582223f01f1cba8",
      "item": {
        "type": "paragraph",
        "id": "a582223f01f1cba8",
        "text": "The functional systems of society clear away as meaningless junk anything that is not re-produced by one of them-science, politics, law, etc."
      },
      "after": "adecb46ea6cf09b8",
      "date": 1695124591959
    },
    {
      "type": "edit",
      "id": "a582223f01f1cba8",
      "item": {
        "type": "paragraph",
        "id": "a582223f01f1cba8",
        "text": "The functional systems of society clear away as meaningless junk anything that is not re-produced by one of them - art, science, politics, law, etc."
      },
      "date": 1695124717706
    },
    {
      "type": "add",
      "id": "1db9bf33bc82cc4e",
      "item": {
        "type": "paragraph",
        "id": "1db9bf33bc82cc4e",
        "text": "When a new functional system of society differentiates itself, it removes, so to speak, parts of the previously meaningless junk."
      },
      "after": "a582223f01f1cba8",
      "date": 1695124835057
    },
    {
      "id": "ce320ef4afd03c08",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ce320ef4afd03c08",
        "text": "Stretching to adopt Gödel’s perspective, if we wish to address all possible structures (a complete system), then some will be illusionary (an inconsistent system). Alternatively if we wish to avoid illusion (a consistent system), then some structures will transform into nothing, leaving the system incomplete."
      },
      "after": "1db9bf33bc82cc4e",
      "attribution": {
        "page": "Closure"
      },
      "date": 1695124890676
    },
    {
      "type": "edit",
      "id": "ce320ef4afd03c08",
      "item": {
        "type": "paragraph",
        "id": "ce320ef4afd03c08",
        "text": "> Stretching to adopt Gödel’s perspective, if we wish to address all possible structures (a complete system), then some will be illusionary (an inconsistent system). Alternatively if we wish to avoid illusion (a consistent system), then some structures will transform into nothing, leaving the system incomplete."
      },
      "date": 1695124894127
    },
    {
      "type": "edit",
      "id": "ce320ef4afd03c08",
      "item": {
        "type": "markdown",
        "id": "ce320ef4afd03c08",
        "text": "> Stretching to adopt Gödel’s perspective, if we wish to address all possible structures (a complete system), then some will be illusionary (an inconsistent system). Alternatively if we wish to avoid illusion (a consistent system), then some structures will transform into nothing, leaving the system incomplete."
      },
      "date": 1695124894995
    },
    {
      "type": "add",
      "id": "3fdbef248e72737e",
      "item": {
        "type": "paragraph",
        "id": "3fdbef248e72737e",
        "text": "[[Inconsistent vs Consistent]]"
      },
      "after": "1db9bf33bc82cc4e",
      "date": 1695124971867
    },
    {
      "type": "edit",
      "id": "3fdbef248e72737e",
      "item": {
        "type": "paragraph",
        "id": "3fdbef248e72737e",
        "text": "[[Inconsistent vs Consistent]] ⇐ [[Closure]]"
      },
      "date": 1695124991514
    },
    {
      "type": "edit",
      "id": "77bfe03ed0732153",
      "item": {
        "type": "paragraph",
        "id": "77bfe03ed0732153",
        "text": "[[Society]] [[address]]es all possible structure (a complete system) also some illusionary possible structures. The science of society is incomplete. Science is an incomplete system."
      },
      "date": 1695125052902
    },
    {
      "type": "edit",
      "id": "77bfe03ed0732153",
      "item": {
        "type": "paragraph",
        "id": "77bfe03ed0732153",
        "text": "[[Society]] [[address]]es all possible structure (a complete system)."
      },
      "date": 1695125058094
    },
    {
      "type": "add",
      "id": "6b2a28b95517c357",
      "item": {
        "type": "paragraph",
        "id": "6b2a28b95517c357",
        "text": "also some illusionary possible structures. The science of society is incomplete. Science is an incomplete system."
      },
      "after": "77bfe03ed0732153",
      "date": 1695125058696
    },
    {
      "type": "edit",
      "id": "77bfe03ed0732153",
      "item": {
        "type": "paragraph",
        "id": "77bfe03ed0732153",
        "text": "[[Society]] [[address]]es all possible structure (a complete system). Some [Structure]]s"
      },
      "date": 1695125113532
    },
    {
      "type": "edit",
      "id": "77bfe03ed0732153",
      "item": {
        "type": "paragraph",
        "id": "77bfe03ed0732153",
        "text": "[[Society]] [[address]]es all possible structure (a complete system). Some [[Structure]]s"
      },
      "date": 1695125117392
    },
    {
      "type": "edit",
      "id": "77bfe03ed0732153",
      "item": {
        "type": "paragraph",
        "id": "77bfe03ed0732153",
        "text": "[[Society]] [[address]]es all possible structure (a complete system). Some structures [⇒ [[Structure (Struktur)]]]"
      },
      "date": 1695125182930
    },
    {
      "type": "edit",
      "id": "77bfe03ed0732153",
      "item": {
        "type": "paragraph",
        "id": "77bfe03ed0732153",
        "text": "[[Society]] [[address]]es all [[possible]] structure (a complete system). Some structures [⇒ [[Structure (Struktur)]]]"
      },
      "date": 1695125232447
    },
    {
      "type": "edit",
      "id": "77bfe03ed0732153",
      "item": {
        "type": "paragraph",
        "id": "77bfe03ed0732153",
        "text": "[[Society]] [[address]]es all [[possible]] structure (a complete system). Some structures [⇒ [[Structure (Struktur)]]] will be illusionary (an inconsistent system)."
      },
      "date": 1695125267685
    },
    {
      "type": "remove",
      "id": "6b2a28b95517c357",
      "date": 1695126257498
    },
    {
      "type": "edit",
      "id": "3fdbef248e72737e",
      "item": {
        "type": "paragraph",
        "id": "3fdbef248e72737e",
        "text": "⇒ [[Inconsistent vs Consistent]] ⇐ [[Closure]]"
      },
      "date": 1695126271523
    },
    {
      "type": "add",
      "id": "068095104323082e",
      "item": {
        "type": "paragraph",
        "id": "068095104323082e",
        "text": "Kolmogorov Complexity"
      },
      "after": "b2bc4c7aee9397e5",
      "date": 1695126330362
    },
    {
      "id": "068095104323082e",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "adc58f5f2bc56f89",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "a214ec7501d8d406",
        "53843f14030c508f",
        "c0c9f294e5e6bd59",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "8e5e4b983ecb95a0",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "73b380697a912dca",
        "c35737429b80df9f",
        "991947fc794bc825",
        "8bbd18d18e23f250",
        "3766cbe42967e0aa",
        "87ed715cd2064434",
        "1bf9eb99d29cbfc0",
        "7400e9d73087909f",
        "7627139653528441",
        "0cd9fe2b50e8cba6",
        "1693d528df9b3623",
        "05c31b625ac07c60",
        "45c1db2d97cd3cca",
        "ebf1a7a412dacbad",
        "c412c04077aaff9e",
        "2687950da038e81f",
        "ea5b9dda1b7cb051",
        "69d560e9192c79d8",
        "399a88a332638fb7",
        "96a6ee20a5a4d56e",
        "f202b0f80cfe1456",
        "65415ae206e717e9",
        "dda48e37a1f51d28",
        "a945af58168d9e57",
        "adecb46ea6cf09b8",
        "a582223f01f1cba8",
        "1db9bf33bc82cc4e",
        "3fdbef248e72737e",
        "ce320ef4afd03c08",
        "77bfe03ed0732153",
        "3d1adfd4f74483bd",
        "4b423120b3301f3f",
        "7cff5abf9e38d20b",
        "ce5d7b264526726b",
        "d9d3ddd412fc6643",
        "f9ea99283c9aee47",
        "b2bc4c7aee9397e5",
        "36a9b6917261a24a",
        "068095104323082e",
        "0edfff98b8f81d2e",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "9450c7539e77f2c4"
      ],
      "date": 1695126332143
    },
    {
      "type": "edit",
      "id": "068095104323082e",
      "item": {
        "type": "paragraph",
        "id": "068095104323082e",
        "text": "⇒ [[Kolmogorov Complexity]] "
      },
      "date": 1695126352843
    },
    {
      "type": "edit",
      "id": "068095104323082e",
      "item": {
        "type": "paragraph",
        "id": "068095104323082e",
        "text": "⇒ [[Kolmogorov Complexity]]  ⇒ [[Principle of Minimum Description Length]]"
      },
      "date": 1695126425602
    },
    {
      "type": "edit",
      "id": "068095104323082e",
      "item": {
        "type": "paragraph",
        "id": "068095104323082e",
        "text": "⇒ [[Kolmogorov Complexity]] ⇒ Principle of [[Minimum Description Length]]"
      },
      "date": 1695126438363
    },
    {
      "type": "edit",
      "id": "068095104323082e",
      "item": {
        "type": "paragraph",
        "id": "068095104323082e",
        "text": "⇒ [[Kolmogorov Complexity]] ⇒ Principle of [[Minimum Description Length]] (\""
      },
      "date": 1695126478052
    },
    {
      "type": "edit",
      "id": "068095104323082e",
      "item": {
        "type": "paragraph",
        "id": "068095104323082e",
        "text": "⇒ [[Kolmogorov Complexity]] ⇒ Principle of [[Minimum Description Length]] (\"at least lg C bits long\")"
      },
      "date": 1695126487285
    },
    {
      "type": "add",
      "id": "f7fc265c4a60a09d",
      "item": {
        "type": "paragraph",
        "id": "f7fc265c4a60a09d",
        "text": "\nProblem der Nichtadressierbarkeit\n\n"
      },
      "after": "77bfe03ed0732153",
      "date": 1695126652678
    },
    {
      "type": "edit",
      "id": "f7fc265c4a60a09d",
      "item": {
        "type": "paragraph",
        "id": "f7fc265c4a60a09d",
        "text": "Problem der Nichtadressierbarkeit [https://ralfbarkow.wordpress.com/2015/11/15/problem-der-nichtadressierbarkeit/ post]\n"
      },
      "date": 1695126664598
    },
    {
      "type": "edit",
      "id": "f7fc265c4a60a09d",
      "item": {
        "type": "paragraph",
        "id": "f7fc265c4a60a09d",
        "text": "Problem der Nichtadressierbarkeit [https://ralfbarkow.wordpress.com/2015/11/15/problem-der-nichtadressierbarkeit/ post]"
      },
      "date": 1695126841917
    },
    {
      "type": "add",
      "id": "d5a0034d19e8c192",
      "item": {
        "type": "paragraph",
        "id": "d5a0034d19e8c192",
        "text": "Von kreativen Sprüngen und überlebenden Fehlern"
      },
      "after": "f7fc265c4a60a09d",
      "date": 1695126844760
    },
    {
      "type": "edit",
      "id": "d5a0034d19e8c192",
      "item": {
        "type": "paragraph",
        "id": "d5a0034d19e8c192",
        "text": "Von kreativen Sprüngen und überlebenden Fehlern [https://ralfbarkow.wordpress.com/2015/11/11/von-kreativen-spruengen-und-ueberlebenden-fehlern/ post]"
      },
      "date": 1695126857335
    },
    {
      "type": "edit",
      "id": "69d560e9192c79d8",
      "item": {
        "type": "paragraph",
        "id": "69d560e9192c79d8",
        "text": "⇒ [[Juxtaposition of Two Concepts]] ⇒ [[Gegenbegriffsaustausch]] ⇒ [[Pile]]"
      },
      "date": 1695126957363
    },
    {
      "type": "add",
      "id": "83885820078c8b0a",
      "item": {
        "type": "paragraph",
        "id": "83885820078c8b0a",
        "text": "Two Concepts Of The Symbolic"
      },
      "after": "d5a0034d19e8c192",
      "date": 1695127202048
    },
    {
      "type": "edit",
      "id": "83885820078c8b0a",
      "item": {
        "type": "paragraph",
        "id": "83885820078c8b0a",
        "text": "Two Concepts Of The Symbolic [https://ralfbarkow.wordpress.com/2007/01/29/two-concepts-of-the-symbolic/ post]"
      },
      "date": 1695127213138
    },
    {
      "type": "add",
      "id": "526293b1d08751b7",
      "item": {
        "type": "paragraph",
        "id": "526293b1d08751b7",
        "text": "0000000010…"
      },
      "after": "83885820078c8b0a",
      "date": 1695127263299
    },
    {
      "type": "edit",
      "id": "526293b1d08751b7",
      "item": {
        "type": "paragraph",
        "id": "526293b1d08751b7",
        "text": "0000000010… [https://ralfbarkow.wordpress.com/2006/11/29/0000000010/ post]"
      },
      "date": 1695127275614
    },
    {
      "type": "add",
      "id": "fc5f00bcfd64b77a",
      "item": {
        "type": "paragraph",
        "id": "fc5f00bcfd64b77a",
        "text": "How to achieve persistence of a 2D coordinate system representing connexions? This post explains it in a bottom-up approach. "
      },
      "after": "526293b1d08751b7",
      "date": 1695127287320
    },
    {
      "type": "edit",
      "id": "fc5f00bcfd64b77a",
      "item": {
        "type": "paragraph",
        "id": "fc5f00bcfd64b77a",
        "text": "How to achieve persistence of a 2D coordinate system representing connexions? This post explains it in a bottom-up approach."
      },
      "date": 1695127408703
    },
    {
      "type": "add",
      "id": "29ef56cbfc2840d2",
      "item": {
        "type": "paragraph",
        "id": "29ef56cbfc2840d2",
        "text": "⇒ [[Persistent Binary String]]"
      },
      "after": "fc5f00bcfd64b77a",
      "date": 1695127416985
    },
    {
      "type": "edit",
      "id": "fc5f00bcfd64b77a",
      "item": {
        "type": "paragraph",
        "id": "fc5f00bcfd64b77a",
        "text": "> How to achieve persistence of a 2D coordinate system representing connexions? This post explains it in a bottom-up approach."
      },
      "date": 1695127420771
    },
    {
      "type": "edit",
      "id": "fc5f00bcfd64b77a",
      "item": {
        "type": "markdown",
        "id": "fc5f00bcfd64b77a",
        "text": "> How to achieve persistence of a 2D coordinate system representing connexions? This post explains it in a bottom-up approach."
      },
      "date": 1695127421950
    },
    {
      "type": "edit",
      "id": "29ef56cbfc2840d2",
      "item": {
        "type": "paragraph",
        "id": "29ef56cbfc2840d2",
        "text": "⇒ [[Persistent Binary String]] ⇒ Monads as containers"
      },
      "date": 1695127460132
    },
    {
      "type": "edit",
      "id": "29ef56cbfc2840d2",
      "item": {
        "type": "paragraph",
        "id": "29ef56cbfc2840d2",
        "text": "⇒ [[Persistent Binary String]] ⇒ Monads as containers [https://wiki.haskell.org/Monads_as_containers page]"
      },
      "date": 1695127470734
    },
    {
      "type": "add",
      "id": "fea396a7aa92bce1",
      "item": {
        "type": "paragraph",
        "id": "fea396a7aa92bce1",
        "text": "Combinative Pointer"
      },
      "after": "29ef56cbfc2840d2",
      "date": 1695127629620
    },
    {
      "type": "edit",
      "id": "fea396a7aa92bce1",
      "item": {
        "type": "paragraph",
        "id": "fea396a7aa92bce1",
        "text": "Combinative Pointer [https://ralfbarkow.wordpress.com/2006/05/12/combinative-pointer/ post]"
      },
      "date": 1695127638606
    },
    {
      "type": "add",
      "id": "eb3083f06782d155",
      "item": {
        "type": "paragraph",
        "id": "eb3083f06782d155",
        "text": "What is a Pile_Object without an observer?"
      },
      "after": "fea396a7aa92bce1",
      "date": 1695127690371
    },
    {
      "type": "edit",
      "id": "eb3083f06782d155",
      "item": {
        "type": "paragraph",
        "id": "eb3083f06782d155",
        "text": "What is a Pile_Object without an observer? [https://ralfbarkow.wordpress.com/2006/05/04/what-is-a-pile_object-without-an-observer/ post]"
      },
      "date": 1695127701572
    },
    {
      "type": "add",
      "id": "7706f81b74cb50d3",
      "item": {
        "type": "paragraph",
        "id": "7706f81b74cb50d3",
        "text": "\nPOULSEN, Quirin, 2023. Über Technisation, technische Intelligenz der Gesellschaft und Wege aus der ökologischen Krise. [online]. 2023. [Zugriff am: 14 September 2023]. Verfügbar unter: https://kusanowsky.files.wordpress.com/2023/04/2.-technisation-technische-intelligenz-der-gesellschaft.pdf\n"
      },
      "after": "eb3083f06782d155",
      "date": 1695127736991
    },
    {
      "type": "edit",
      "id": "7706f81b74cb50d3",
      "item": {
        "type": "paragraph",
        "id": "7706f81b74cb50d3",
        "text": "POULSEN, Quirin, 2023. [[Über Technisation]], technische Intelligenz der Gesellschaft und Wege aus der ökologischen Krise. [online]. 2023. [Zugriff am: 14 September 2023]. Verfügbar unter: https://kusanowsky.files.wordpress.com/2023/04/2.-technisation-technische-intelligenz-der-gesellschaft.pdf\n"
      },
      "date": 1695127747274
    },
    {
      "type": "edit",
      "id": "7706f81b74cb50d3",
      "item": {
        "type": "paragraph",
        "id": "7706f81b74cb50d3",
        "text": "POULSEN, Quirin, 2023. [[Über Technisation]], technische Intelligenz der Gesellschaft und Wege aus der ökologischen Krise. [online]. 2023. [Zugriff am: 14 September 2023]. Verfügbar unter: https://kusanowsky.files.wordpress.com/2023/04/2.-technisation-technische-intelligenz-der-gesellschaft.pdf"
      },
      "date": 1695127793041
    },
    {
      "type": "add",
      "id": "8a806584090e767f",
      "item": {
        "type": "paragraph",
        "id": "8a806584090e767f",
        "text": "The thought that there would be an observation-independent reality is one that only a soulless babbling automaton can comfortably endure."
      },
      "after": "7706f81b74cb50d3",
      "date": 1695127796295
    },
    {
      "type": "edit",
      "id": "eb3083f06782d155",
      "item": {
        "type": "paragraph",
        "id": "eb3083f06782d155",
        "text": "What is a Pile_Object without an observer? [https://ralfbarkow.wordpress.com/2006/05/04/what-is-a-pile_object-without-an-observer/ post] ⇒ [[Observation-Independent Reality]]"
      },
      "date": 1695127838977
    },
    {
      "id": "8a806584090e767f",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "adc58f5f2bc56f89",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "a214ec7501d8d406",
        "53843f14030c508f",
        "c0c9f294e5e6bd59",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "8e5e4b983ecb95a0",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "73b380697a912dca",
        "c35737429b80df9f",
        "991947fc794bc825",
        "8bbd18d18e23f250",
        "3766cbe42967e0aa",
        "87ed715cd2064434",
        "1bf9eb99d29cbfc0",
        "7400e9d73087909f",
        "7627139653528441",
        "0cd9fe2b50e8cba6",
        "1693d528df9b3623",
        "05c31b625ac07c60",
        "45c1db2d97cd3cca",
        "ebf1a7a412dacbad",
        "c412c04077aaff9e",
        "2687950da038e81f",
        "ea5b9dda1b7cb051",
        "69d560e9192c79d8",
        "399a88a332638fb7",
        "96a6ee20a5a4d56e",
        "f202b0f80cfe1456",
        "65415ae206e717e9",
        "dda48e37a1f51d28",
        "a945af58168d9e57",
        "adecb46ea6cf09b8",
        "a582223f01f1cba8",
        "1db9bf33bc82cc4e",
        "3fdbef248e72737e",
        "ce320ef4afd03c08",
        "77bfe03ed0732153",
        "f7fc265c4a60a09d",
        "d5a0034d19e8c192",
        "83885820078c8b0a",
        "526293b1d08751b7",
        "fc5f00bcfd64b77a",
        "29ef56cbfc2840d2",
        "fea396a7aa92bce1",
        "eb3083f06782d155",
        "8a806584090e767f",
        "7706f81b74cb50d3",
        "3d1adfd4f74483bd",
        "4b423120b3301f3f",
        "7cff5abf9e38d20b",
        "ce5d7b264526726b",
        "d9d3ddd412fc6643",
        "f9ea99283c9aee47",
        "b2bc4c7aee9397e5",
        "36a9b6917261a24a",
        "068095104323082e",
        "0edfff98b8f81d2e",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "9450c7539e77f2c4"
      ],
      "date": 1695127845440
    },
    {
      "id": "7706f81b74cb50d3",
      "type": "remove",
      "removedTo": {
        "page": "Observation-Independent Reality"
      },
      "date": 1695127867125
    },
    {
      "type": "add",
      "id": "525c3414521d0cbf",
      "item": {
        "type": "paragraph",
        "id": "525c3414521d0cbf",
        "text": "Quantum Computation as Geometry"
      },
      "after": "8a806584090e767f",
      "date": 1695128700006
    },
    {
      "type": "edit",
      "id": "525c3414521d0cbf",
      "item": {
        "type": "paragraph",
        "id": "525c3414521d0cbf",
        "text": "Quantum Computation as Geometry [https://ralfbarkow.wordpress.com/2006/04/14/quantum-computation-as-geometry/ post]"
      },
      "date": 1695128710151
    },
    {
      "type": "edit",
      "id": "525c3414521d0cbf",
      "item": {
        "type": "paragraph",
        "id": "525c3414521d0cbf",
        "text": "Quantum Computation as Geometry [https://ralfbarkow.wordpress.com/2006/04/14/quantum-computation-as-geometry/ post], [https://doi.org/10.1126/science.1121541 doi]"
      },
      "date": 1695128746224
    },
    {
      "type": "edit",
      "id": "525c3414521d0cbf",
      "item": {
        "type": "paragraph",
        "id": "525c3414521d0cbf",
        "text": "⇒ [[Quantum Computation as Geometry]] [https://ralfbarkow.wordpress.com/2006/04/14/quantum-computation-as-geometry/ post], [https://doi.org/10.1126/science.1121541 doi]"
      },
      "date": 1695128917607
    },
    {
      "type": "edit",
      "id": "525c3414521d0cbf",
      "item": {
        "type": "paragraph",
        "id": "525c3414521d0cbf",
        "text": "⇒ [[Quantum Computation as Geometry]] [https://ralfbarkow.wordpress.com/2006/04/14/quantum-computation-as-geometry/ post], [https://doi.org/10.1126/science.1121541 doi] ⇒ [[Kolmogorov Complexity]] ⇒ Principle of [[Minimum Description Length]] (\"at least lg C bits long\")"
      },
      "date": 1695128977031
    },
    {
      "id": "a528945782d91170",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a528945782d91170",
        "text": "Here we show that finding optimal quantum circuits is essentially equivalent to finding the shortest path between two points in a certain curved geometry. By recasting the problem of finding quantum circuits as a geometric problem, we open up the possibility of using the mathematical techniques of Riemannian geometry to suggest new quantum algorithms or to prove limitations on the power of quantum computers."
      },
      "after": "525c3414521d0cbf",
      "attribution": {
        "page": "Quantum Computation as Geometry"
      },
      "date": 1695129062053
    },
    {
      "type": "edit",
      "id": "a528945782d91170",
      "item": {
        "type": "paragraph",
        "id": "a528945782d91170",
        "text": "> Here we show that finding optimal quantum circuits is essentially equivalent to finding the shortest path between two points in a certain curved geometry. By recasting the problem of finding quantum circuits as a geometric problem, we open up the possibility of using the mathematical techniques of Riemannian geometry to suggest new quantum algorithms or to prove limitations on the power of quantum computers."
      },
      "date": 1695129075405
    },
    {
      "type": "edit",
      "id": "a528945782d91170",
      "item": {
        "type": "markdown",
        "id": "a528945782d91170",
        "text": "> Here we show that finding optimal quantum circuits is essentially equivalent to finding the shortest path between two points in a certain curved geometry. By recasting the problem of finding quantum circuits as a geometric problem, we open up the possibility of using the mathematical techniques of Riemannian geometry to suggest new quantum algorithms or to prove limitations on the power of quantum computers."
      },
      "date": 1695129076439
    },
    {
      "type": "add",
      "id": "95b73fd7290e7349",
      "item": {
        "type": "paragraph",
        "id": "95b73fd7290e7349",
        "text": "⇒ [[Negate a Difference]]"
      },
      "after": "d9d3ddd412fc6643",
      "date": 1695129167119
    },
    {
      "id": "c197a73c3bc028e3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c197a73c3bc028e3",
        "text": "For example ([A)] is not a valid containment pattern: We are considering here only the act of [[Distinction]]. A boundary identifies a difference. [[Set Intersection]] denies that difference.",
        "alias": "f202b0f80cfe1456"
      },
      "after": "95b73fd7290e7349",
      "attribution": {
        "page": "Negate a Difference"
      },
      "date": 1695129194585
    },
    {
      "type": "edit",
      "id": "c197a73c3bc028e3",
      "item": {
        "type": "paragraph",
        "id": "c197a73c3bc028e3",
        "text": "> ([A)] is not a valid containment pattern: We are considering here only the act of [[Distinction]]. A boundary identifies a difference. [[Set Intersection]] denies that difference.",
        "alias": "f202b0f80cfe1456"
      },
      "date": 1695129205240
    },
    {
      "type": "edit",
      "id": "c197a73c3bc028e3",
      "item": {
        "type": "markdown",
        "id": "c197a73c3bc028e3",
        "text": "> ([A)] is not a valid containment pattern: We are considering here only the act of [[Distinction]]. A boundary identifies a difference. [[Set Intersection]] denies that difference.",
        "alias": "f202b0f80cfe1456"
      },
      "date": 1695129206337
    },
    {
      "type": "edit",
      "id": "95b73fd7290e7349",
      "item": {
        "type": "paragraph",
        "id": "95b73fd7290e7349",
        "text": "⇒ [[Negate a Difference]] ⇒"
      },
      "date": 1695129223437
    },
    {
      "type": "edit",
      "id": "95b73fd7290e7349",
      "item": {
        "type": "paragraph",
        "id": "95b73fd7290e7349",
        "text": "⇒ [[Negate a Difference]] ⇒ ([A)] "
      },
      "date": 1695129228368
    },
    {
      "type": "edit",
      "id": "f9ea99283c9aee47",
      "item": {
        "type": "paragraph",
        "id": "f9ea99283c9aee47",
        "text": "⇒ [A] – interpretation: log# A ⇒ [[Pile]] ⇒ [[Pile Memory]] ⇒ [[Tree Arranged on Pages]] "
      },
      "date": 1695129276587
    },
    {
      "id": "b2bc4c7aee9397e5",
      "type": "move",
      "order": [
        "9e388c8fcd738609",
        "927b9bf7f7dedbf1",
        "7a6e044f468d77d5",
        "24c73a357a8da545",
        "c89f914f144e67e0",
        "5f641616975f8402",
        "ba3608543a2b7c0d",
        "67c2225983d2a677",
        "6d338db350b4dca2",
        "04df1bf88a2168c3",
        "ac4cf3a2b59894e7",
        "cc98b4c155b5667f",
        "67ac1b5f5a2cb0a7",
        "bb5eaa37dd7bb3fd",
        "adc58f5f2bc56f89",
        "77d3f5238c4ae7c4",
        "fe1573d1d5668719",
        "a214ec7501d8d406",
        "53843f14030c508f",
        "c0c9f294e5e6bd59",
        "a247afcd5f0474c2",
        "70aa9b08fef02736",
        "419df55f9bdb1dcf",
        "8e5e4b983ecb95a0",
        "047378642372f4e1",
        "bb0893e7ef637244",
        "91a5f56ffdbf51a0",
        "edbe80afd5e6cbb1",
        "73b380697a912dca",
        "c35737429b80df9f",
        "991947fc794bc825",
        "8bbd18d18e23f250",
        "3766cbe42967e0aa",
        "87ed715cd2064434",
        "1bf9eb99d29cbfc0",
        "7400e9d73087909f",
        "7627139653528441",
        "0cd9fe2b50e8cba6",
        "1693d528df9b3623",
        "05c31b625ac07c60",
        "45c1db2d97cd3cca",
        "ebf1a7a412dacbad",
        "c412c04077aaff9e",
        "2687950da038e81f",
        "ea5b9dda1b7cb051",
        "69d560e9192c79d8",
        "399a88a332638fb7",
        "96a6ee20a5a4d56e",
        "f202b0f80cfe1456",
        "65415ae206e717e9",
        "dda48e37a1f51d28",
        "a945af58168d9e57",
        "adecb46ea6cf09b8",
        "a582223f01f1cba8",
        "1db9bf33bc82cc4e",
        "3fdbef248e72737e",
        "ce320ef4afd03c08",
        "77bfe03ed0732153",
        "f7fc265c4a60a09d",
        "d5a0034d19e8c192",
        "83885820078c8b0a",
        "526293b1d08751b7",
        "fc5f00bcfd64b77a",
        "29ef56cbfc2840d2",
        "fea396a7aa92bce1",
        "eb3083f06782d155",
        "8a806584090e767f",
        "525c3414521d0cbf",
        "a528945782d91170",
        "3d1adfd4f74483bd",
        "4b423120b3301f3f",
        "7cff5abf9e38d20b",
        "ce5d7b264526726b",
        "d9d3ddd412fc6643",
        "95b73fd7290e7349",
        "c197a73c3bc028e3",
        "f9ea99283c9aee47",
        "36a9b6917261a24a",
        "b2bc4c7aee9397e5",
        "068095104323082e",
        "0edfff98b8f81d2e",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "9450c7539e77f2c4"
      ],
      "date": 1695129302386
    },
    {
      "type": "edit",
      "id": "068095104323082e",
      "item": {
        "type": "paragraph",
        "id": "068095104323082e",
        "text": "⇒ [[Kolmogorov Complexity]] ⇒ Principle of [[Minimum Description Length]] (\"at least lg C bits long\") ⇒ [[Quantum Computation as Geometry]] "
      },
      "date": 1695129357211
    },
    {
      "type": "edit",
      "id": "068095104323082e",
      "item": {
        "type": "paragraph",
        "id": "068095104323082e",
        "text": "⇒ [[Kolmogorov Complexity]] ⇒ Principle of [[Minimum Description Length]] (\"at least lg C bits long\") ⇒ [[Quantum Computation as Geometry]]: finding the shortest path between two points in a certain curved geometry. "
      },
      "date": 1695129386003
    },
    {
      "type": "edit",
      "id": "69d560e9192c79d8",
      "item": {
        "type": "paragraph",
        "id": "69d560e9192c79d8",
        "text": "⇒ [[Juxtaposition of Two Concepts]] ⇒ [[Gegenbegriffsaustausch]] ⇒ [[Pile]] ⇒ [[Negate a Difference]] ⇒ ([A)] "
      },
      "date": 1695129848422
    },
    {
      "type": "edit",
      "id": "399a88a332638fb7",
      "item": {
        "type": "paragraph",
        "id": "399a88a332638fb7",
        "text": "The form ([A)] is possible as an [[Imaginary Pattern]], but that extension to the concept of containment would also require a completely new mapping to the interpretation. That type of mapping is even difficult to write in conventional notation. Function notation also obeys the structural restrictions of containers. But we could read ([A)] as a Venn diagram, for instance, where the round- and square- boundaries each identify a set, and A identifies the intersection of both sets. The two overlapping functions become two different properties shared by the single object A."
      },
      "date": 1695129917226
    },
    {
      "type": "edit",
      "id": "69d560e9192c79d8",
      "item": {
        "type": "paragraph",
        "id": "69d560e9192c79d8",
        "text": "⇒ [[Juxtaposition of Two Concepts]] ⇒ [[Gegenbegriffsaustausch]] ⇒ [[Pile]] ⇒ [[Negate a Difference]] ⇒ ([A)] ⇒ [[Imaginary Pattern]]"
      },
      "date": 1695129960724
    },
    {
      "type": "edit",
      "id": "65415ae206e717e9",
      "item": {
        "type": "paragraph",
        "id": "65415ae206e717e9",
        "text": "⇒ [[Closure]]: But there is a subtlety for void-based forms: closure loses meaning when transformations create void-equivalent forms. The [[Domain]] of [[Non-existent Form]]s is a [[Nonsense]] concept."
      },
      "date": 1695132100864
    },
    {
      "type": "edit",
      "id": "65415ae206e717e9",
      "item": {
        "type": "paragraph",
        "id": "65415ae206e717e9",
        "text": "⇒ [[Closure]]: But there is a subtlety for void-based forms: closure loses meaning when transformations create void-equivalent forms. The [[Domain]] of [[Non-existent Form]]s is a [[Nonsense]] concept. ⇒ [[Wholeness Versus All]]"
      },
      "date": 1695132196993
    },
    {
      "type": "edit",
      "id": "65415ae206e717e9",
      "item": {
        "type": "paragraph",
        "id": "65415ae206e717e9",
        "text": "⇒ [[Closure]]: But there is a subtlety for void-based forms: closure loses meaning when transformations create void-equivalent forms. The [[Domain]] of [[Non-existent Form]]s is a [[Nonsense]] concept. ⇒ [[Wholeness Versus All]] ⇒ [[Object Intrinsically Addressable]]"
      },
      "date": 1695132225362
    },
    {
      "type": "edit",
      "id": "65415ae206e717e9",
      "item": {
        "type": "paragraph",
        "id": "65415ae206e717e9",
        "text": "⇒ [[Closure]]: But there is a subtlety for void-based forms: closure loses meaning when transformations create void-equivalent forms. The [[Domain]] of [[Non-existent Form]]s is a [[Nonsense]] concept. ⇒ [[Wholeness Versus All]] ⇒ [[Object Intrinsically Addressable]] ⇒ [[Copy a Structure]]"
      },
      "date": 1695132311309
    }
  ]
}