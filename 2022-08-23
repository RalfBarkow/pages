{
  "title": "2022-08-23",
  "story": [
    {
      "type": "paragraph",
      "id": "571fea8ef833fe41",
      "text": "I am debugging the following code (in gt and in Cuis):"
    },
    {
      "type": "code",
      "id": "a376477e0ca352c1",
      "text": "book := (Book new setIsbn: '0-671-20158-1'). \nbook = (Book new setIsbn: '0-671-20158-1')."
    },
    {
      "type": "markdown",
      "id": "0dfa732261ad9540",
      "text": "`guineaPig` ?"
    },
    {
      "type": "paragraph",
      "id": "525997fead7f88e5",
      "text": "Inside Smalltalk. [https://rmod-files.lille.inria.fr/FreeBooks/InsideST/InsideSmalltalkNoOCRed.pdf pdf], [https://rmod-files.lille.inria.fr/FreeBooks/InsideST/InsideSmalltalkII.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "9a65c34bc5cbacec",
      "text": "> We also thank [[Dave Thomas]] who, many years ago, foresaw the potential of object-oriented programming and motivated us to become involved in research in the area. To the many students at Carleton University in Ottawa and to others who attended our object-oriented programming and Smalltalk workshops, our sincere thanks for being such willing **guinea pigs** for much of the material that now appears in this book. Our thanks also to the reviewers and, in particular, Richard Bernat of the University of Texas at Austin and Bharot Jayaraman of the University of North Carolina at Chapel Hill, for their helpful comments. To Marcia Horton, Christina Burghard, and their colleagues at Prentice Hall, for their support and patience in the development of the book. Finally, on a more personal note, we thank our respective wives, Maria Doughty and Christine Pugh, for their support and understanding, and our children, Brannon, Robin, Chloe, and Gareth, who have yet to understand why their \"daddies\" were too often unavailable."
    },
    {
      "type": "paragraph",
      "id": "7973ad8e13742e6a",
      "text": "Simulating the Cog VM. [https://clementbera.wordpress.com/2016/05/30/simulating-the-cog-vm/ post], Simulator menu"
    },
    {
      "type": "markdown",
      "id": "ce0000168d0cce16",
      "text": "> In the menu (in the Cog Simulator, the Stack Simulator has a subset of them), there are in order:\n1) toggle Transcript (toggle between simulator and external Transcript the output stream)\nclone VM (clone the simulator, to have **guinea pigs** to reproduce bugs, typically bugs hard to reproduce once you’ve reproduced them once or GC bugs)\n"
    },
    {
      "type": "paragraph",
      "id": "198a77b981c390e5",
      "text": "Integrating LLVM in Cog ? [https://clementbera.wordpress.com/2014/05/28/the-sista-chronicles-viii-integrating-llvm-in-cog/ post], [https://clementbera.wordpress.com/page/3/ site] ([[Clément Béra]] ~ Smalltalk, Tips 'n Tricks)\n"
    },
    {
      "type": "markdown",
      "id": "46b83bb290f6d58e",
      "text": "> Let’s take the example of the fresh new Javascript webkit VM implemented by guys loving LLVM […]"
    },
    {
      "type": "paragraph",
      "id": "9c4a3ac671872fba",
      "text": "Introducing the WebKit FTL JIT. [https://webkit.org/blog/3362/introducing-the-webkit-ftl-jit/ post]"
    },
    {
      "type": "paragraph",
      "id": "c04642a9049eb093",
      "text": "Opal can recompile the whole Pharo image. [https://clementbera.wordpress.com/2013/03/22/toward-a-zero-bugs-interpreter-compiler/ post]"
    },
    {
      "type": "paragraph",
      "id": "ef15d37feac8ff24",
      "text": "AST Tree Coverage Tool. [https://clementbera.wordpress.com/2013/04/06/ast-tree-coverage-tool/ post]"
    },
    {
      "type": "pagefold",
      "id": "67194397b1ed4712",
      "text": "~"
    },
    {
      "type": "code",
      "id": "be8130b760dfa8ed",
      "text": "library add: (Book new setIsbn: '0-671-S0158-1'). \"Trouble!\""
    },
    {
      "type": "paragraph",
      "id": "5ed0a5ec7b56d9cb",
      "text": "Smalltalk [[Singleton Pattern]]: how do I initialize the instance variables? [https://stackoverflow.com/questions/438729/smalltalk-singleton-pattern-how-do-i-initialize-the-instance-variables stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "8a73829416d77bc8",
      "text": "How to override equality method in Smalltalk [https://stackoverflow.com/questions/20858306/how-to-override-equality-method-in-smalltalk stackoverflow]"
    },
    {
      "type": "markdown",
      "id": "85d561eb1a6050d7",
      "text": "> Also about [[Disappearing Element]]. Set is a hashed collection. This means that before comparing it's element with the one you are looking for, it select's a subset by hash. So if you are not overriding hash it may select a subset that won't contain your desired element."
    },
    {
      "type": "pagefold",
      "id": "f9ed2d8bd5c51d0e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "70c21945d4426fb5",
      "text": "⇒ [[Transformation Rule]] ⇒ [[Network Dialect]] ⇒ [[Map]] ⇒ [[Negative Lessons]]"
    },
    {
      "type": "graphviz",
      "id": "224c74aee0c7b936",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "markdown",
      "id": "e277fa06d25ddcbb",
      "text": "> The fluidity of object and reference in networks can be expressed as a [[Transformation Rule]] that is unique to this (and similar) dialects, structure sharing. In structure sharing, nodes in a network that share the same linking structure can be joined into a single node with multiple links. Entire subnetworks are replaced by links to shared structure. **[[Structure Sharing]] is not available in textual dialects.** The textual representation of each of the above forms is ([A])([A]). Multiple occurrence of the same variable in a textual dialect emulates shared structure in a network dialect. The absence of structure sharing in symbolic mathematics has lead to rampant replication of symbols and a presumption that replication is free. As noted in Chapter 9, replication is the source of complexity."
    },
    {
      "type": "pagefold",
      "id": "f2ae1bbbca4eb9b1",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "db882a1aabf9b160",
      "text": "⇒ [[Steering Agile Architecture]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-08-23",
        "story": []
      },
      "date": 1661230646200
    },
    {
      "item": {
        "type": "factory",
        "id": "a376477e0ca352c1"
      },
      "id": "a376477e0ca352c1",
      "type": "add",
      "date": 1661230649935
    },
    {
      "item": {
        "type": "factory",
        "id": "9c4a3ac671872fba"
      },
      "id": "9c4a3ac671872fba",
      "type": "add",
      "after": "a376477e0ca352c1",
      "date": 1661230652208
    },
    {
      "type": "edit",
      "id": "9c4a3ac671872fba",
      "item": {
        "type": "paragraph",
        "id": "9c4a3ac671872fba",
        "text": "Introducing the WebKit FTL JIT. "
      },
      "date": 1661230657965
    },
    {
      "type": "edit",
      "id": "9c4a3ac671872fba",
      "item": {
        "type": "paragraph",
        "id": "9c4a3ac671872fba",
        "text": "Introducing the WebKit FTL JIT. [https://webkit.org/blog/3362/introducing-the-webkit-ftl-jit/ post]"
      },
      "date": 1661230676115
    },
    {
      "type": "edit",
      "id": "a376477e0ca352c1",
      "item": {
        "type": "code",
        "id": "a376477e0ca352c1",
        "text": "book := (Book new setIsbn: '0-671-20158-1'). \nbook = (Book new setIsbn: '0-671-20158-1')."
      },
      "date": 1661230719554
    },
    {
      "item": {
        "type": "factory",
        "id": "571fea8ef833fe41"
      },
      "id": "571fea8ef833fe41",
      "type": "add",
      "after": "9c4a3ac671872fba",
      "date": 1661230752402
    },
    {
      "id": "571fea8ef833fe41",
      "type": "move",
      "order": [
        "571fea8ef833fe41",
        "a376477e0ca352c1",
        "9c4a3ac671872fba"
      ],
      "date": 1661230757337
    },
    {
      "type": "edit",
      "id": "571fea8ef833fe41",
      "item": {
        "type": "paragraph",
        "id": "571fea8ef833fe41",
        "text": "I am debugging the following code (in gt and in Cuis):"
      },
      "date": 1661230758738
    },
    {
      "item": {
        "type": "factory",
        "id": "0dfa732261ad9540"
      },
      "id": "0dfa732261ad9540",
      "type": "add",
      "after": "9c4a3ac671872fba",
      "date": 1661230908067
    },
    {
      "id": "0dfa732261ad9540",
      "type": "move",
      "order": [
        "571fea8ef833fe41",
        "a376477e0ca352c1",
        "0dfa732261ad9540",
        "9c4a3ac671872fba"
      ],
      "date": 1661230910528
    },
    {
      "type": "edit",
      "id": "0dfa732261ad9540",
      "item": {
        "type": "paragraph",
        "id": "0dfa732261ad9540",
        "text": "`guineaPig` ?"
      },
      "date": 1661230919849
    },
    {
      "type": "edit",
      "id": "0dfa732261ad9540",
      "item": {
        "type": "markdown",
        "id": "0dfa732261ad9540",
        "text": "`guineaPig` ?"
      },
      "date": 1661230921828
    },
    {
      "item": {
        "type": "factory",
        "id": "9a65c34bc5cbacec"
      },
      "id": "9a65c34bc5cbacec",
      "type": "add",
      "after": "9c4a3ac671872fba",
      "date": 1661230981301
    },
    {
      "id": "9a65c34bc5cbacec",
      "type": "move",
      "order": [
        "571fea8ef833fe41",
        "a376477e0ca352c1",
        "0dfa732261ad9540",
        "9a65c34bc5cbacec",
        "9c4a3ac671872fba"
      ],
      "date": 1661230983221
    },
    {
      "item": {
        "type": "factory",
        "id": "525997fead7f88e5"
      },
      "id": "525997fead7f88e5",
      "type": "add",
      "after": "9c4a3ac671872fba",
      "date": 1661230985359
    },
    {
      "id": "525997fead7f88e5",
      "type": "move",
      "order": [
        "571fea8ef833fe41",
        "a376477e0ca352c1",
        "0dfa732261ad9540",
        "525997fead7f88e5",
        "9a65c34bc5cbacec",
        "9c4a3ac671872fba"
      ],
      "date": 1661230987911
    },
    {
      "type": "edit",
      "id": "525997fead7f88e5",
      "item": {
        "type": "paragraph",
        "id": "525997fead7f88e5",
        "text": "Inside Smalltalk. [pdf]"
      },
      "date": 1661230994053
    },
    {
      "type": "edit",
      "id": "525997fead7f88e5",
      "item": {
        "type": "paragraph",
        "id": "525997fead7f88e5",
        "text": "Inside Smalltalk. [https://rmod-files.lille.inria.fr/FreeBooks/InsideST/InsideSmalltalkNoOCRed.pdf pdf]"
      },
      "date": 1661231001205
    },
    {
      "type": "edit",
      "id": "9a65c34bc5cbacec",
      "item": {
        "type": "paragraph",
        "id": "9a65c34bc5cbacec",
        "text": "> We also thank Dave Thomas who, many years ago, foresaw the potential of objectoriented programming and motivated us to become involved in research in the area. To the many students at Carleton University in Ottawa and to others who attended our objectoriented programming and Smalltalk workshops, our sincere thanks for being such willing guinea pigs for much of the material that now appears in this book. Our thanks also to the reviewers and, in particular, Richard Bernat of the University of Texas at Austin and Bharot Jayaraman of the University of North Carolina at Chapel Hill, for their helpful comments. To Marcia Horton, Christina Burghard, and their colleagues at Prentice Hall, for their support and patience in the development of the book. Finally, on a more personal note, we thank our respective wives, Maria Doughty and Christine Pugh, for their support and understanding, and our children, Brannon, Robin, Chloe, and Gareth, who have yet to understand why their \"daddies\" were too often unavailable."
      },
      "date": 1661231065167
    },
    {
      "type": "edit",
      "id": "9a65c34bc5cbacec",
      "item": {
        "type": "markdown",
        "id": "9a65c34bc5cbacec",
        "text": "> We also thank Dave Thomas who, many years ago, foresaw the potential of objectoriented programming and motivated us to become involved in research in the area. To the many students at Carleton University in Ottawa and to others who attended our objectoriented programming and Smalltalk workshops, our sincere thanks for being such willing guinea pigs for much of the material that now appears in this book. Our thanks also to the reviewers and, in particular, Richard Bernat of the University of Texas at Austin and Bharot Jayaraman of the University of North Carolina at Chapel Hill, for their helpful comments. To Marcia Horton, Christina Burghard, and their colleagues at Prentice Hall, for their support and patience in the development of the book. Finally, on a more personal note, we thank our respective wives, Maria Doughty and Christine Pugh, for their support and understanding, and our children, Brannon, Robin, Chloe, and Gareth, who have yet to understand why their \"daddies\" were too often unavailable."
      },
      "date": 1661231066601
    },
    {
      "type": "edit",
      "id": "9a65c34bc5cbacec",
      "item": {
        "type": "markdown",
        "id": "9a65c34bc5cbacec",
        "text": "> We also thank Dave Thomas who, many years ago, foresaw the potential of object-oriented programming and motivated us to become involved in research in the area. To the many students at Carleton University in Ottawa and to others who attended our objectoriented programming and Smalltalk workshops, our sincere thanks for being such willing guinea pigs for much of the material that now appears in this book. Our thanks also to the reviewers and, in particular, Richard Bernat of the University of Texas at Austin and Bharot Jayaraman of the University of North Carolina at Chapel Hill, for their helpful comments. To Marcia Horton, Christina Burghard, and their colleagues at Prentice Hall, for their support and patience in the development of the book. Finally, on a more personal note, we thank our respective wives, Maria Doughty and Christine Pugh, for their support and understanding, and our children, Brannon, Robin, Chloe, and Gareth, who have yet to understand why their \"daddies\" were too often unavailable."
      },
      "date": 1661231080691
    },
    {
      "type": "edit",
      "id": "9a65c34bc5cbacec",
      "item": {
        "type": "markdown",
        "id": "9a65c34bc5cbacec",
        "text": "> We also thank [[Dave Thomas]] who, many years ago, foresaw the potential of object-oriented programming and motivated us to become involved in research in the area. To the many students at Carleton University in Ottawa and to others who attended our objectoriented programming and Smalltalk workshops, our sincere thanks for being such willing guinea pigs for much of the material that now appears in this book. Our thanks also to the reviewers and, in particular, Richard Bernat of the University of Texas at Austin and Bharot Jayaraman of the University of North Carolina at Chapel Hill, for their helpful comments. To Marcia Horton, Christina Burghard, and their colleagues at Prentice Hall, for their support and patience in the development of the book. Finally, on a more personal note, we thank our respective wives, Maria Doughty and Christine Pugh, for their support and understanding, and our children, Brannon, Robin, Chloe, and Gareth, who have yet to understand why their \"daddies\" were too often unavailable."
      },
      "date": 1661231091365
    },
    {
      "type": "edit",
      "id": "9a65c34bc5cbacec",
      "item": {
        "type": "markdown",
        "id": "9a65c34bc5cbacec",
        "text": "> We also thank [[Dave Thomas]] who, many years ago, foresaw the potential of object-oriented programming and motivated us to become involved in research in the area. To the many students at Carleton University in Ottawa and to others who attended our object-oriented programming and Smalltalk workshops, our sincere thanks for being such willing **guinea pigs** for much of the material that now appears in this book. Our thanks also to the reviewers and, in particular, Richard Bernat of the University of Texas at Austin and Bharot Jayaraman of the University of North Carolina at Chapel Hill, for their helpful comments. To Marcia Horton, Christina Burghard, and their colleagues at Prentice Hall, for their support and patience in the development of the book. Finally, on a more personal note, we thank our respective wives, Maria Doughty and Christine Pugh, for their support and understanding, and our children, Brannon, Robin, Chloe, and Gareth, who have yet to understand why their \"daddies\" were too often unavailable."
      },
      "date": 1661231126392
    },
    {
      "item": {
        "type": "factory",
        "id": "198a77b981c390e5"
      },
      "id": "198a77b981c390e5",
      "type": "add",
      "after": "9c4a3ac671872fba",
      "date": 1661231188720
    },
    {
      "id": "198a77b981c390e5",
      "type": "move",
      "order": [
        "571fea8ef833fe41",
        "a376477e0ca352c1",
        "0dfa732261ad9540",
        "525997fead7f88e5",
        "9a65c34bc5cbacec",
        "198a77b981c390e5",
        "9c4a3ac671872fba"
      ],
      "date": 1661231190854
    },
    {
      "type": "edit",
      "id": "198a77b981c390e5",
      "item": {
        "type": "paragraph",
        "id": "198a77b981c390e5",
        "text": "Integrating LLVM in Cog ? "
      },
      "date": 1661231194041
    },
    {
      "type": "edit",
      "id": "198a77b981c390e5",
      "item": {
        "type": "paragraph",
        "id": "198a77b981c390e5",
        "text": "Integrating LLVM in Cog ? [https://clementbera.wordpress.com/2014/05/28/the-sista-chronicles-viii-integrating-llvm-in-cog/ post]"
      },
      "date": 1661231203924
    },
    {
      "type": "edit",
      "id": "198a77b981c390e5",
      "item": {
        "type": "paragraph",
        "id": "198a77b981c390e5",
        "text": "Integrating LLVM in Cog ? [https://clementbera.wordpress.com/2014/05/28/the-sista-chronicles-viii-integrating-llvm-in-cog/ post], [https://clementbera.wordpress.com/page/3/ site]"
      },
      "date": 1661231223846
    },
    {
      "type": "edit",
      "id": "198a77b981c390e5",
      "item": {
        "type": "paragraph",
        "id": "198a77b981c390e5",
        "text": "Integrating LLVM in Cog ? [https://clementbera.wordpress.com/2014/05/28/the-sista-chronicles-viii-integrating-llvm-in-cog/ post], [https://clementbera.wordpress.com/page/3/ site] (Clément Béra ~ Smalltalk, Tips 'n Tricks)\n"
      },
      "date": 1661231256611
    },
    {
      "type": "edit",
      "id": "198a77b981c390e5",
      "item": {
        "type": "paragraph",
        "id": "198a77b981c390e5",
        "text": "Integrating LLVM in Cog ? [https://clementbera.wordpress.com/2014/05/28/the-sista-chronicles-viii-integrating-llvm-in-cog/ post], [https://clementbera.wordpress.com/page/3/ site] ([[Clément Béra]] ~ Smalltalk, Tips 'n Tricks)\n"
      },
      "date": 1661231270573
    },
    {
      "type": "edit",
      "id": "525997fead7f88e5",
      "item": {
        "type": "paragraph",
        "id": "525997fead7f88e5",
        "text": "Inside Smalltalk. [https://rmod-files.lille.inria.fr/FreeBooks/InsideST/InsideSmalltalkNoOCRed.pdf pdf], [https://rmod-files.lille.inria.fr/FreeBooks/InsideST/InsideSmalltalkII.pdf pdf]"
      },
      "date": 1661231320379
    },
    {
      "item": {
        "type": "factory",
        "id": "7973ad8e13742e6a"
      },
      "id": "7973ad8e13742e6a",
      "type": "add",
      "after": "9c4a3ac671872fba",
      "date": 1661231522913
    },
    {
      "id": "7973ad8e13742e6a",
      "type": "move",
      "order": [
        "571fea8ef833fe41",
        "a376477e0ca352c1",
        "0dfa732261ad9540",
        "525997fead7f88e5",
        "9a65c34bc5cbacec",
        "7973ad8e13742e6a",
        "198a77b981c390e5",
        "9c4a3ac671872fba"
      ],
      "date": 1661231525724
    },
    {
      "type": "edit",
      "id": "7973ad8e13742e6a",
      "item": {
        "type": "paragraph",
        "id": "7973ad8e13742e6a",
        "text": "Simulating the Cog VM"
      },
      "date": 1661231528156
    },
    {
      "type": "edit",
      "id": "7973ad8e13742e6a",
      "item": {
        "type": "paragraph",
        "id": "7973ad8e13742e6a",
        "text": "Simulating the Cog VM. [https://clementbera.wordpress.com/2016/05/30/simulating-the-cog-vm/ post]"
      },
      "date": 1661231538460
    },
    {
      "type": "edit",
      "id": "7973ad8e13742e6a",
      "item": {
        "type": "paragraph",
        "id": "7973ad8e13742e6a",
        "text": "Simulating the Cog VM. [https://clementbera.wordpress.com/2016/05/30/simulating-the-cog-vm/ post], Simulator menu"
      },
      "date": 1661231576674
    },
    {
      "type": "add",
      "id": "ce0000168d0cce16",
      "item": {
        "type": "paragraph",
        "id": "ce0000168d0cce16",
        "text": "> In the menu (in the Cog Simulator, the Stack Simulator has a subset of them), there are in order:\n1) toggle Transcript (toggle between simulator and external Transcript the output stream)\nclone VM (clone the simulator, to have guinea pigs to reproduce bugs, typically bugs hard to reproduce once you’ve reproduced them once or GC bugs)\n"
      },
      "after": "7973ad8e13742e6a",
      "date": 1661231606946
    },
    {
      "type": "edit",
      "id": "ce0000168d0cce16",
      "item": {
        "type": "markdown",
        "id": "ce0000168d0cce16",
        "text": "> In the menu (in the Cog Simulator, the Stack Simulator has a subset of them), there are in order:\n1) toggle Transcript (toggle between simulator and external Transcript the output stream)\nclone VM (clone the simulator, to have guinea pigs to reproduce bugs, typically bugs hard to reproduce once you’ve reproduced them once or GC bugs)\n"
      },
      "date": 1661231608255
    },
    {
      "type": "edit",
      "id": "ce0000168d0cce16",
      "item": {
        "type": "markdown",
        "id": "ce0000168d0cce16",
        "text": "> In the menu (in the Cog Simulator, the Stack Simulator has a subset of them), there are in order:\n1) toggle Transcript (toggle between simulator and external Transcript the output stream)\nclone VM (clone the simulator, to have **guinea pigs** to reproduce bugs, typically bugs hard to reproduce once you’ve reproduced them once or GC bugs)\n"
      },
      "date": 1661231650190
    },
    {
      "item": {
        "type": "factory",
        "id": "46b83bb290f6d58e"
      },
      "id": "46b83bb290f6d58e",
      "type": "add",
      "after": "9c4a3ac671872fba",
      "date": 1661231723071
    },
    {
      "id": "46b83bb290f6d58e",
      "type": "move",
      "order": [
        "571fea8ef833fe41",
        "a376477e0ca352c1",
        "0dfa732261ad9540",
        "525997fead7f88e5",
        "9a65c34bc5cbacec",
        "7973ad8e13742e6a",
        "ce0000168d0cce16",
        "198a77b981c390e5",
        "46b83bb290f6d58e",
        "9c4a3ac671872fba"
      ],
      "date": 1661231728122
    },
    {
      "type": "edit",
      "id": "46b83bb290f6d58e",
      "item": {
        "type": "markdown",
        "id": "46b83bb290f6d58e",
        "text": "> Let’s take the example of the fresh new Javascript webkit VM implemented by guys loving LLVM"
      },
      "date": 1661231732257
    },
    {
      "type": "edit",
      "id": "46b83bb290f6d58e",
      "item": {
        "type": "markdown",
        "id": "46b83bb290f6d58e",
        "text": "> Let’s take the example of the fresh new Javascript webkit VM implemented by guys loving LLVM […]"
      },
      "date": 1661231737669
    },
    {
      "item": {
        "type": "factory",
        "id": "c04642a9049eb093"
      },
      "id": "c04642a9049eb093",
      "type": "add",
      "after": "9c4a3ac671872fba",
      "date": 1661232487656
    },
    {
      "type": "edit",
      "id": "c04642a9049eb093",
      "item": {
        "type": "paragraph",
        "id": "c04642a9049eb093",
        "text": "Opal can recompile the whole Pharo image. "
      },
      "date": 1661232491161
    },
    {
      "type": "edit",
      "id": "c04642a9049eb093",
      "item": {
        "type": "paragraph",
        "id": "c04642a9049eb093",
        "text": "Opal can recompile the whole Pharo image. [https://clementbera.wordpress.com/2013/03/22/toward-a-zero-bugs-interpreter-compiler/ post]"
      },
      "date": 1661232509136
    },
    {
      "item": {
        "type": "factory",
        "id": "ef15d37feac8ff24"
      },
      "id": "ef15d37feac8ff24",
      "type": "add",
      "after": "c04642a9049eb093",
      "date": 1661232553831
    },
    {
      "type": "edit",
      "id": "ef15d37feac8ff24",
      "item": {
        "type": "paragraph",
        "id": "ef15d37feac8ff24",
        "text": "AST Tree Coverage Tool. "
      },
      "date": 1661232557211
    },
    {
      "type": "edit",
      "id": "ef15d37feac8ff24",
      "item": {
        "type": "paragraph",
        "id": "ef15d37feac8ff24",
        "text": "AST Tree Coverage Tool. [https://clementbera.wordpress.com/2013/04/06/ast-tree-coverage-tool/ post]"
      },
      "date": 1661232572432
    },
    {
      "item": {
        "type": "factory",
        "id": "be8130b760dfa8ed"
      },
      "id": "be8130b760dfa8ed",
      "type": "add",
      "after": "ef15d37feac8ff24",
      "date": 1661232853137
    },
    {
      "type": "edit",
      "id": "be8130b760dfa8ed",
      "item": {
        "type": "code",
        "id": "be8130b760dfa8ed",
        "text": "RB 8/22/2022 22:30:19 ° 2 lines of code ° as yet unclassified ° 63 implementors ° 75 senders ° in no package ° only in change set 5400-CuisCore-AuthorName-2022Aug22-22h26m"
      },
      "date": 1661232862752
    },
    {
      "type": "edit",
      "id": "be8130b760dfa8ed",
      "item": {
        "type": "code",
        "id": "be8130b760dfa8ed",
        "text": "library add: (Book new setIsbn: '0-671-S0158-1'). \"Trouble!\""
      },
      "date": 1661232890503
    },
    {
      "item": {
        "type": "factory",
        "id": "67194397b1ed4712"
      },
      "id": "67194397b1ed4712",
      "type": "add",
      "after": "be8130b760dfa8ed",
      "date": 1661232897058
    },
    {
      "type": "edit",
      "id": "67194397b1ed4712",
      "item": {
        "type": "pagefold",
        "id": "67194397b1ed4712",
        "text": "~"
      },
      "date": 1661232900354
    },
    {
      "id": "67194397b1ed4712",
      "type": "move",
      "order": [
        "571fea8ef833fe41",
        "a376477e0ca352c1",
        "0dfa732261ad9540",
        "525997fead7f88e5",
        "9a65c34bc5cbacec",
        "7973ad8e13742e6a",
        "ce0000168d0cce16",
        "198a77b981c390e5",
        "46b83bb290f6d58e",
        "9c4a3ac671872fba",
        "c04642a9049eb093",
        "ef15d37feac8ff24",
        "67194397b1ed4712",
        "be8130b760dfa8ed"
      ],
      "date": 1661232903155
    },
    {
      "item": {
        "type": "factory",
        "id": "5ed0a5ec7b56d9cb"
      },
      "id": "5ed0a5ec7b56d9cb",
      "type": "add",
      "after": "be8130b760dfa8ed",
      "date": 1661233115587
    },
    {
      "type": "edit",
      "id": "5ed0a5ec7b56d9cb",
      "item": {
        "type": "paragraph",
        "id": "5ed0a5ec7b56d9cb",
        "text": "smalltalk singleton pattern: how do I initialize the instance variables? "
      },
      "date": 1661233119247
    },
    {
      "type": "edit",
      "id": "5ed0a5ec7b56d9cb",
      "item": {
        "type": "paragraph",
        "id": "5ed0a5ec7b56d9cb",
        "text": "smalltalk [[singleton pattern]]: how do I initialize the instance variables? [https://stackoverflow.com/questions/438729/smalltalk-singleton-pattern-how-do-i-initialize-the-instance-variables stackoverflow]"
      },
      "date": 1661233139584
    },
    {
      "item": {
        "type": "factory",
        "id": "8a73829416d77bc8"
      },
      "id": "8a73829416d77bc8",
      "type": "add",
      "after": "5ed0a5ec7b56d9cb",
      "date": 1661233897181
    },
    {
      "type": "edit",
      "id": "8a73829416d77bc8",
      "item": {
        "type": "paragraph",
        "id": "8a73829416d77bc8",
        "text": "How to override equality method in Smalltalk?"
      },
      "date": 1661233901001
    },
    {
      "type": "edit",
      "id": "8a73829416d77bc8",
      "item": {
        "type": "paragraph",
        "id": "8a73829416d77bc8",
        "text": "How to override equality method in Smalltalk? [https://stackoverflow.com/questions/20858306/how-to-override-equality-method-in-smalltalk stackoverflow]"
      },
      "date": 1661233917456
    },
    {
      "type": "edit",
      "id": "8a73829416d77bc8",
      "item": {
        "type": "paragraph",
        "id": "8a73829416d77bc8",
        "text": "How to override equality method in Smalltalk [https://stackoverflow.com/questions/20858306/how-to-override-equality-method-in-smalltalk stackoverflow]"
      },
      "date": 1661233923643
    },
    {
      "item": {
        "type": "factory",
        "id": "85d561eb1a6050d7"
      },
      "id": "85d561eb1a6050d7",
      "type": "add",
      "after": "8a73829416d77bc8",
      "date": 1661234161731
    },
    {
      "type": "edit",
      "id": "85d561eb1a6050d7",
      "item": {
        "type": "markdown",
        "id": "85d561eb1a6050d7",
        "text": "> Also about disappearing element. Set is a hashed collection. This means that before comparing it's element with the one you are looking for, it select's a subset by hash. So if you are not overriding hash it may select a subset that won't contain your desired element."
      },
      "date": 1661234164856
    },
    {
      "item": {
        "type": "factory",
        "id": "4a4ccf63a9e20fe4"
      },
      "id": "4a4ccf63a9e20fe4",
      "type": "add",
      "after": "85d561eb1a6050d7",
      "date": 1661234214512
    },
    {
      "type": "edit",
      "id": "4a4ccf63a9e20fe4",
      "item": {
        "type": "reference",
        "id": "4a4ccf63a9e20fe4",
        "site": "wiki.ralfbarkow.ch",
        "slug": "defines--but-not-hash",
        "title": "Defines #= but not #hash",
        "text": "Identity is such a fundamental Smalltalk notion that if you override the `==` method Smalltalk ignores your override. By contrast, you can override the `=` method at will."
      },
      "date": 1661234226711
    },
    {
      "type": "edit",
      "id": "85d561eb1a6050d7",
      "item": {
        "type": "markdown",
        "id": "85d561eb1a6050d7",
        "text": "> Also about [[disappearing element]]. Set is a hashed collection. This means that before comparing it's element with the one you are looking for, it select's a subset by hash. So if you are not overriding hash it may select a subset that won't contain your desired element."
      },
      "date": 1661234318405
    },
    {
      "type": "remove",
      "id": "4a4ccf63a9e20fe4",
      "date": 1661234327927
    },
    {
      "item": {
        "type": "factory",
        "id": "f9ed2d8bd5c51d0e"
      },
      "id": "f9ed2d8bd5c51d0e",
      "type": "add",
      "after": "85d561eb1a6050d7",
      "date": 1661237294093
    },
    {
      "type": "edit",
      "id": "f9ed2d8bd5c51d0e",
      "item": {
        "type": "pagefold",
        "id": "f9ed2d8bd5c51d0e",
        "text": "~"
      },
      "date": 1661237297054
    },
    {
      "item": {
        "type": "factory",
        "id": "64119fb6343b7fb9"
      },
      "id": "64119fb6343b7fb9",
      "type": "add",
      "after": "f9ed2d8bd5c51d0e",
      "date": 1661237299444
    },
    {
      "type": "edit",
      "id": "64119fb6343b7fb9",
      "item": {
        "type": "reference",
        "id": "64119fb6343b7fb9",
        "site": "wellspring.fed.wiki",
        "slug": "esomorphic-transformation",
        "title": "Esomorphic Transformation",
        "text": "Sometimes we make up new words for lived experiences that have no name – and so it is here."
      },
      "date": 1661237303198
    },
    {
      "item": {
        "type": "factory",
        "id": "6596f4e33cc9da7f"
      },
      "id": "6596f4e33cc9da7f",
      "type": "add",
      "after": "64119fb6343b7fb9",
      "date": 1661237309781
    },
    {
      "type": "edit",
      "id": "6596f4e33cc9da7f",
      "item": {
        "type": "reference",
        "id": "6596f4e33cc9da7f",
        "site": "wellspring.fed.wiki",
        "slug": "transmutational-experience",
        "title": "Transmutational Experience",
        "text": "A transmutational experience is one where something deep inside of us changes based on an experience that we have had, an internal experience that precedes the manifestations of an external transformation."
      },
      "date": 1661237313035
    },
    {
      "item": {
        "type": "factory",
        "id": "96fcc2abc6134946"
      },
      "id": "96fcc2abc6134946",
      "type": "add",
      "after": "6596f4e33cc9da7f",
      "date": 1661237362175
    },
    {
      "type": "edit",
      "id": "96fcc2abc6134946",
      "item": {
        "type": "reference",
        "id": "96fcc2abc6134946",
        "site": "marc.tries.fed.wiki",
        "slug": "transform",
        "title": "Transform",
        "text": "Transformations back and forth from 2D to 3D and 4D (dynamics); from black and white to color and back, from linear to circular or networks, from linar to Bayesian, etc. etc. can provide dramatic insights--the comparison and interaction in one's mind among the view points and projections."
      },
      "date": 1661237367408
    },
    {
      "item": {
        "type": "factory",
        "id": "70c21945d4426fb5"
      },
      "id": "70c21945d4426fb5",
      "type": "add",
      "after": "96fcc2abc6134946",
      "date": 1661237441499
    },
    {
      "type": "edit",
      "id": "70c21945d4426fb5",
      "item": {
        "type": "paragraph",
        "id": "70c21945d4426fb5",
        "text": "[[Transformation Rule]]"
      },
      "date": 1661237446037
    },
    {
      "id": "64119fb6343b7fb9",
      "type": "remove",
      "date": 1661237598131
    },
    {
      "id": "6596f4e33cc9da7f",
      "type": "remove",
      "date": 1661237601551
    },
    {
      "id": "96fcc2abc6134946",
      "type": "remove",
      "date": 1661237609306
    },
    {
      "type": "edit",
      "id": "70c21945d4426fb5",
      "item": {
        "type": "paragraph",
        "id": "70c21945d4426fb5",
        "text": "⇒ [[Transformation Rule]]"
      },
      "date": 1661237635106
    },
    {
      "item": {
        "type": "factory",
        "id": "224c74aee0c7b936"
      },
      "id": "224c74aee0c7b936",
      "type": "add",
      "after": "70c21945d4426fb5",
      "date": 1661237636687
    },
    {
      "type": "edit",
      "id": "224c74aee0c7b936",
      "item": {
        "type": "graphviz",
        "id": "224c74aee0c7b936",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1661237647438
    },
    {
      "type": "edit",
      "id": "70c21945d4426fb5",
      "item": {
        "type": "paragraph",
        "id": "70c21945d4426fb5",
        "text": "⇒ [[Transformation Rule]] ⇒ [[Network Dialect]]"
      },
      "date": 1661237725447
    },
    {
      "type": "edit",
      "id": "70c21945d4426fb5",
      "item": {
        "type": "paragraph",
        "id": "70c21945d4426fb5",
        "text": "⇒ [[Transformation Rule]] ⇒ [[Network Dialect]] ⇒ [[Map]]"
      },
      "date": 1661237750355
    },
    {
      "type": "edit",
      "id": "70c21945d4426fb5",
      "item": {
        "type": "paragraph",
        "id": "70c21945d4426fb5",
        "text": "⇒ [[Transformation Rule]] ⇒ [[Network Dialect]] ⇒ [[Map]] ⇒ [[Negative Lessons]]"
      },
      "date": 1661237859900
    },
    {
      "id": "e277fa06d25ddcbb",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "e277fa06d25ddcbb",
        "text": "> The fluidity of object and reference in networks can be expressed as a transformation rule that is unique to this (and similar) dialects, structure sharing. In structure sharing, nodes in a network that share the same linking structure can be joined into a single node with multiple links. Entire subnetworks are replaced by links to shared structure. **Structure sharing is not available in textual dialects.** The textual representation of each of the above forms is ([A])([A]). Multiple occurrence of the same variable in a textual dialect emulates shared structure in a network dialect. The absence of structure sharing in symbolic mathematics has lead to rampant replication of symbols and a presumption that replication is free. As noted in Chapter 9, replication is the source of complexity."
      },
      "after": "224c74aee0c7b936",
      "date": 1661238044165
    },
    {
      "type": "edit",
      "id": "e277fa06d25ddcbb",
      "item": {
        "type": "markdown",
        "id": "e277fa06d25ddcbb",
        "text": "> The fluidity of object and reference in networks can be expressed as a [[transformation rule]] that is unique to this (and similar) dialects, structure sharing. In structure sharing, nodes in a network that share the same linking structure can be joined into a single node with multiple links. Entire subnetworks are replaced by links to shared structure. **Structure sharing is not available in textual dialects.** The textual representation of each of the above forms is ([A])([A]). Multiple occurrence of the same variable in a textual dialect emulates shared structure in a network dialect. The absence of structure sharing in symbolic mathematics has lead to rampant replication of symbols and a presumption that replication is free. As noted in Chapter 9, replication is the source of complexity."
      },
      "date": 1661238063256
    },
    {
      "type": "edit",
      "id": "e277fa06d25ddcbb",
      "item": {
        "type": "markdown",
        "id": "e277fa06d25ddcbb",
        "text": "> The fluidity of object and reference in networks can be expressed as a [[Transformation Rule]] that is unique to this (and similar) dialects, structure sharing. In structure sharing, nodes in a network that share the same linking structure can be joined into a single node with multiple links. Entire subnetworks are replaced by links to shared structure. **Structure sharing is not available in textual dialects.** The textual representation of each of the above forms is ([A])([A]). Multiple occurrence of the same variable in a textual dialect emulates shared structure in a network dialect. The absence of structure sharing in symbolic mathematics has lead to rampant replication of symbols and a presumption that replication is free. As noted in Chapter 9, replication is the source of complexity."
      },
      "date": 1661238072662
    },
    {
      "type": "edit",
      "id": "e277fa06d25ddcbb",
      "item": {
        "type": "markdown",
        "id": "e277fa06d25ddcbb",
        "text": "> The fluidity of object and reference in networks can be expressed as a [[Transformation Rule]] that is unique to this (and similar) dialects, structure sharing. In structure sharing, nodes in a network that share the same linking structure can be joined into a single node with multiple links. Entire subnetworks are replaced by links to shared structure. **[[Structure Sharing]] is not available in textual dialects.** The textual representation of each of the above forms is ([A])([A]). Multiple occurrence of the same variable in a textual dialect emulates shared structure in a network dialect. The absence of structure sharing in symbolic mathematics has lead to rampant replication of symbols and a presumption that replication is free. As noted in Chapter 9, replication is the source of complexity."
      },
      "date": 1661238105271
    },
    {
      "type": "edit",
      "id": "85d561eb1a6050d7",
      "item": {
        "type": "markdown",
        "id": "85d561eb1a6050d7",
        "text": "> Also about [[Disappearing Element]]. Set is a hashed collection. This means that before comparing it's element with the one you are looking for, it select's a subset by hash. So if you are not overriding hash it may select a subset that won't contain your desired element."
      },
      "date": 1661238184612
    },
    {
      "type": "edit",
      "id": "5ed0a5ec7b56d9cb",
      "item": {
        "type": "paragraph",
        "id": "5ed0a5ec7b56d9cb",
        "text": "Smalltalk [[Singleton Pattern]]: how do I initialize the instance variables? [https://stackoverflow.com/questions/438729/smalltalk-singleton-pattern-how-do-i-initialize-the-instance-variables stackoverflow]"
      },
      "date": 1661238281356
    },
    {
      "item": {
        "type": "factory",
        "id": "f2ae1bbbca4eb9b1"
      },
      "id": "f2ae1bbbca4eb9b1",
      "type": "add",
      "after": "e277fa06d25ddcbb",
      "date": 1661239491353
    },
    {
      "type": "edit",
      "id": "f2ae1bbbca4eb9b1",
      "item": {
        "type": "pagefold",
        "id": "f2ae1bbbca4eb9b1",
        "text": "~"
      },
      "date": 1661239495105
    },
    {
      "item": {
        "type": "factory",
        "id": "db882a1aabf9b160"
      },
      "id": "db882a1aabf9b160",
      "type": "add",
      "after": "f2ae1bbbca4eb9b1",
      "date": 1661239496556
    },
    {
      "type": "edit",
      "id": "db882a1aabf9b160",
      "item": {
        "type": "paragraph",
        "id": "db882a1aabf9b160",
        "text": "Steering agile architecture"
      },
      "date": 1661239501668
    },
    {
      "type": "edit",
      "id": "db882a1aabf9b160",
      "item": {
        "type": "paragraph",
        "id": "db882a1aabf9b160",
        "text": "[[Steering Agile Architecture]]"
      },
      "date": 1661239514888
    },
    {
      "type": "edit",
      "id": "db882a1aabf9b160",
      "item": {
        "type": "paragraph",
        "id": "db882a1aabf9b160",
        "text": "⇒ [[Steering Agile Architecture]]"
      },
      "date": 1661239523407
    }
  ]
}