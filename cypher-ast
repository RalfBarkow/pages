{
  "title": "Cypher AST",
  "story": [
    {
      "type": "markdown",
      "id": "4f19ef406590814d",
      "text": "– https://community.neo4j.com/t/cypher-ast/35089"
    },
    {
      "type": "paragraph",
      "id": "46c73c1044533383",
      "text": "bill.dickenson\nMar '21\n\nNot strictly an AST ( more of a parse tree) but when you combine it with the symbol tree, you get close.\n\nStart with this [[Cypher.g4]].txt (22.6 KB)\nThe ANTLR site ( and the two books on it) gives pretty good descriptions on generating the files. Unless you plan to do a lot, the python generated is pretty easy to use, the java and typescript are good.\n\nOnce you have a parser/lexer, you will need to write a visitor. Easy enough. OR if your needs are simpler, look at generating a .dot file (Graphviz) which is a very simple parse tree/ast.\n\nWe incorporated it into our product easily. Its not a wildly complex language and it does parse well."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Cypher AST",
        "story": []
      },
      "date": 1652852895193
    },
    {
      "item": {
        "type": "factory",
        "id": "4f19ef406590814d"
      },
      "id": "4f19ef406590814d",
      "type": "add",
      "date": 1652852903172
    },
    {
      "type": "edit",
      "id": "4f19ef406590814d",
      "item": {
        "type": "paragraph",
        "id": "4f19ef406590814d",
        "text": "– https://community.neo4j.com/t/cypher-ast/35089"
      },
      "date": 1652852908677
    },
    {
      "item": {
        "type": "factory",
        "id": "46c73c1044533383"
      },
      "id": "46c73c1044533383",
      "type": "add",
      "after": "4f19ef406590814d",
      "date": 1652853157066
    },
    {
      "type": "edit",
      "id": "46c73c1044533383",
      "item": {
        "type": "paragraph",
        "id": "46c73c1044533383",
        "text": "bill.dickenson\nMar '21\n\nNot strictly an AST ( more of a parse tree) but when you combine it with the symbol tree, you get close.\n\nStart with this Cypher.g4.txt (22.6 KB)\nThe ANTLR site ( and the two books on it) gives pretty good descriptions on generating the files. Unless you plan to do a lot, the python generated is pretty easy to use, the java and typescript are good.\n\nOnce you have a parser/lexer, you will need to write a visitor. Easy enough. OR if your needs are simpler, look at generating a .dot file (Graphviz) which is a very simple parse tree/ast.\n\nWe incorporated it into our product easily. Its not a wildly complex language and it does parse well."
      },
      "date": 1652853158509
    },
    {
      "type": "edit",
      "id": "46c73c1044533383",
      "item": {
        "type": "paragraph",
        "id": "46c73c1044533383",
        "text": "bill.dickenson\nMar '21\n\nNot strictly an AST ( more of a parse tree) but when you combine it with the symbol tree, you get close.\n\nStart with this [[Cypher.g4]].txt (22.6 KB)\nThe ANTLR site ( and the two books on it) gives pretty good descriptions on generating the files. Unless you plan to do a lot, the python generated is pretty easy to use, the java and typescript are good.\n\nOnce you have a parser/lexer, you will need to write a visitor. Easy enough. OR if your needs are simpler, look at generating a .dot file (Graphviz) which is a very simple parse tree/ast.\n\nWe incorporated it into our product easily. Its not a wildly complex language and it does parse well."
      },
      "date": 1652853179739
    },
    {
      "type": "edit",
      "id": "4f19ef406590814d",
      "item": {
        "type": "markdown",
        "id": "4f19ef406590814d",
        "text": "– https://community.neo4j.com/t/cypher-ast/35089"
      },
      "date": 1652853224083
    }
  ]
}