{
  "title": "Myth Of Metadata",
  "story": [
    {
      "type": "html",
      "text": "[[Meta Data]] Myth:",
      "id": "01b69fc47561305da9cc49754e79426a"
    },
    {
      "type": "html",
      "text": " Just by the sheer existence of metadata in a system some system components never designed/developed to work together will magically work together.",
      "id": "ac1cc0c6b9971c3fb4ebe1985a8a5ddd"
    },
    {
      "type": "html",
      "text": " The metadata information (to what ever level it is provided) is enough to successfully use an interface, component, class, method, etc.",
      "id": "5af2b41bb7f0ee3e24ac7d92b580f710"
    },
    {
      "type": "html",
      "text": "[[Meta Data]] Reality:",
      "id": "84a31cf36b48b7ac9d1fa4476d5e1ce3"
    },
    {
      "type": "html",
      "text": " There is no such thing as a [[Free Lunch]]",
      "id": "7c7c9b15008db3c66e440bdf251609d9"
    },
    {
      "type": "html",
      "text": " Evaluating metadata is hard to do. Dynamically adapting a client to an interface via metadata analysis is even harder.",
      "id": "7355a15e880b31916c541102f55482b6"
    },
    {
      "type": "html",
      "text": " Metadata usage in a system needs to be designed and documented (and restricted) in order to be successful.",
      "id": "7c05927b640cd7e0e1bb689728497c06"
    },
    {
      "type": "html",
      "text": " Metadata is almost always proprietary.",
      "id": "c20ee8d984472b0949516e96f8622976"
    },
    {
      "type": "html",
      "text": " Metadata is a new source of really obscure bugs.",
      "id": "53d58077c380d221ed993229fd75f609"
    },
    {
      "type": "html",
      "text": " Metadata is almost never independent of the component or the container, so creating a huge (and profitable) dependency.",
      "id": "5a98bba9c0ba4229aafeaed0b20e8ce3"
    },
    {
      "type": "html",
      "text": " Metadata is hard",
      "id": "eef53f31667ba30d82a1ede41c133fe1"
    },
    {
      "type": "html",
      "text": "<i>Rather than argue over the general value of metadata, perhaps we should explore where metadata works well and where it doesn't. The alternatives can get pretty ugly also.</i>",
      "id": "344f9db59c0e1b36bbe7e4f7d2e51c69"
    },
    {
      "type": "html",
      "text": "\nSee: [[Job Security]], [[Barbie Principle]]",
      "id": "a2cb9e78d3c2f2f63039ff3a449fc813"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "84f29a8aedd9097d0d250a78f71c58fd"
    },
    {
      "type": "html",
      "text": "Related to this myth, there's another myth: that [[Extensible Markup Language]] is superior to ASN.1 or CORBA [[Common Data Representation]] or any other data interchange format because it is \"self describing\". That's a little too much.",
      "id": "0bbc9884e0d43310a1e81d1d58d02e1f"
    },
    {
      "type": "html",
      "text": "\nLet's take an example: ",
      "id": "29fa41b434881e2a51af69e32e149a4f"
    },
    {
      "type": "code",
      "text": "  <order customer_id=\"X\">\n  <item quantity=\"5\" >\n  <product>\n  <name>BookX</name>\n  <identification type=\"ISBN\">....</identification>\n  <quotedprice value=\"44.95\" currency=\"USD\" /> \n  </product>\n  </item>",
      "id": "31a3151ebcd8ad24b83f18642d104646"
    },
    {
      "type": "html",
      "text": "...",
      "id": "6fb700c1fd2af75120b35958f230c028"
    },
    {
      "type": "code",
      "text": "  </order>",
      "id": "d1e723bb6ffbf844b053f3cc7b69d612"
    },
    {
      "type": "html",
      "text": "To me as a programmer, the thing is indeed <i>almost</i> self-describing. If I also saw a DTD or a Schema file well commented, I would be thrilled. To a computer, these considerations have absolutely no value, we cannot yet build intelligence into computers to take in meta-data and do something useful with it. Before we can arrive there, we still have to find better ways to understand and define metadata.",
      "id": "3e54c3b887fbe720c88b93953eb08138"
    },
    {
      "type": "html",
      "text": "\nBefore we do that, ASN.1, [[Common Data Representation]] and XML are absolutely equivalent to a computer; the difference is that with XML we trade bandwidth for human convenience. XML can be easier to hand edit (just needs a text-editor), but for the purpose of building communications between systems this is irrelevant. When the computer can do everything, we won't care about these formats. For now, XML is easier for humans and library writers. That is all.",
      "id": "1e60d95c2cc0572df650be03f4082945"
    },
    {
      "type": "html",
      "text": "-- [[Costin Cozianu]] and others",
      "id": "71ee5852a54557148cf33df0d9d9e116"
    },
    {
      "type": "code",
      "text": "  <asd dfr_id=\"X\">\n  <iu lwm=\"5\" >\n  <rtj>\n  <nmj>BookX</nmj>\n  <qaz bvn=\"ISBN\">....</qaz>\n  <pkdw cvv=\"44.95\"dfgfd=\"USD\" /> \n  </rtj>\n  </iu>",
      "id": "cc4d4f0a205e458bc10a3db630c3d849"
    },
    {
      "type": "html",
      "text": "...",
      "id": "6fb700c1fd2af75120b35958f230c028"
    },
    {
      "type": "code",
      "text": "  </asd>",
      "id": "3a28789a265815b66eb98c20197b2910"
    },
    {
      "type": "html",
      "text": "The above shows why XML is not self describing. Using tags that look meaningful to a human and assuming that there is indeed meaning in the tags available to a machine has been called the [[Gensym Fallacy]] in the AI community. Moreover, there are no machine available semantics in the structure of the XML: what is the relationship between rtj and qaz above?",
      "id": "26d79fdd6dc5d8b42211cdc4aec19be6"
    },
    {
      "type": "html",
      "text": "<i>In the above example, I can provide metadata that defines precisely what each of the above tags \"means\" to the machine. XML provides a syntax so that this metadata is denoted using exactly the same syntax as the tags it applies to. If you had supplied the metadata, I could not only answer your question but dynamically alter, extend, or remove that relationship. I would encourage you to compare the construction of a distributed API using XML to the same task performed using, for example, IDL. Both allow the metadata to be described - but only XML describes it in the SAME syntax. -- [[Tom Stambaugh]]</i>",
      "id": "70f82d298b95cd44248d20733b6e2aa5"
    },
    {
      "type": "html",
      "text": "\nThere is questionable value in having the metadata encoded with the same mechanism as the data itself. There are places where this works, and places where it doesn't. However, you have to be more explicit when you say that you can define, what things \"mean\" to a machine. -- [[Costin Cozianu]]",
      "id": "647d4f29e984a5664c4ad11ae6b3e157"
    },
    {
      "type": "html",
      "text": "<i>While I appreciate your effort to be even-handed, in twenty years of using Smalltalk I haven't found any \"places where [this] doesn't [work]\" (but see [[In All My Years Ive Never]]). As far being more explicit when I say that I can define what things \"mean\" to a machine, I refer you to the Smalltalk metastructure. Specifically, classes #Behavior, #Class, #Metaclass, #[[Compiled Method]], #Block and #Process will be a good start. Xml is more than expressive enough to allow me to specify precisely what I mean by member, type, method, and so on. I can then use that specification in text such as you supplied to parse, traverse, and process pretty much anything you want. If you really care about what I mean by \"mean\", I direct you to, for example, the work of Brian Cantwell-Smith - specifically, his definition of a \"notation\", \"symbol\" and \"meaning\", and his definition of the theta/arctheta, phi/arcphi, and psi/arcpsi functions. That's as precise a definition of \"mean\" as I know. -- [[Tom Stambaugh]]</i>",
      "id": "f9495d8c40d299fa572dc56c7861f06a"
    },
    {
      "type": "html",
      "text": "\nSorry Tom, XML is capable of no such thing. XML is a tool for making markup languages. If we wanted to make a markup language to describe Smalltalk, that would be fine, but the semantics and meaning of Smalltalk expressions are <i>not</i> available from or held within the XML data. that would be like claiming the meaning of English sentences are held with its alphabet, or even its individual words. The best you can do with XML is lay out Smalltalk expressions for consumption by a Smalltalk evaluation. That does not make the the XML meaningful of itself - a process is what determines what that XML means. The common form of this myth in the XML Community is 'XML is like Lisp', but XML does not work like Smaltalk, Lisp or logic languages founded on a [[Model Theoretic Semantics]]. Quite the opposite, being a pure syntactic form, XML has no semantics or evaluation rules whatsoever that would allow us to accept what you're claiming. -- [[Bill Dehora]]",
      "id": "1f4baf3c3fd36158c37798f291483195"
    },
    {
      "type": "html",
      "text": "\nI'd like to mention that the semantics and meaning of English aren't available in sentences, paragraphs, or any other syntactic construct. The meaning is in the reader that evaluates it. Showing an English sentence to someone who doesn't know English and asking what it means demonstrates this. Metadata is most problematic when the meaning is ambiguous.",
      "id": "ee6eae90303c562c6401b99bc30df042"
    },
    {
      "type": "html",
      "text": "\nSo the problem is that you've been referring to Smalltalk, an example where things work. Still not even Smalltalk's metastructure is not as omnipotently expressive as you credit it. Such constructs as \"type\" (which is widely accepted within the [[Computer Science]] community that should be essentially different from the concept of class) that can be expressed in other languages as a primitive of the language (or of the metamodel) can't be equivalently expressed in Smalltalk. Other favorite examples of mine are relational databases where the metastructure is expressed as a set of relations (dat dictionary). But not all models have this characteristic that their metamodel can be sensibly or efficiently defined within the model.",
      "id": "e3774cdd9ab805f49ff15893f0fc5355"
    },
    {
      "type": "html",
      "text": "<i>I've worked on, with, and seen multiple Smalltalk environments that include the notion of \"Type\" (usually, but not always, mapped onto \"Class\"). For example, \"Strongtalk\" was externally available for awhile. Within IBM, researchers in RTP built a similar environment that used specially formatted (ala Javadoc) comment headers to accomplish similar goals. At my own startup, we built an Eiffel-style \"weak typing\" system in Smalltalk. It is straightforward (not \"trivial\", but requiring no \"inventions\") to create an \"[[Instance Specification]]\" class, instances of which can then be used to describe instance variable slots in the Smalltalk metastructure. The question of whether or not these are \"primitive\" is a [[Red Herring]] - anything can be made a primitive in Smalltalk, but few things matter enough to make it worthwhile. I agree that \"not all models ...\" - in fact, most commercial systems (Java and [[Cee Plus Plus]] to pick on two) cannot \"sensibly or efficiently\" define their metastructure from within the environment. This, in my opinion, is an important reason why those environments are so hosed and why a good object-oriented developer is so much less productive in those environments. Lisp and Eiffel, on the other hand, are two environments for which the metamodel is reasonably strong. -- [[Tom Stambaugh]]</i>",
      "id": "4d25881f12d25fac84f5e72029ec091a"
    },
    {
      "type": "html",
      "text": "\nNow, going back to the expressivity of XML, I very much doubt that it is as expressive as you may want it to be and among things that you can't <i>easily</i> express are types, constraints, relations and almost every useful data modeling construct. With a little effort, you can define new XML document types to encode that metadata also, but that was not my point. Expressing such things in XML is like expressing them in ASCII: of course you can do it, but there's nothing in XML that offers you a significant support for such an endeavour.",
      "id": "6b3c9585be6c85a2123e444c30b92a5f"
    },
    {
      "type": "html",
      "text": "<i>Of COURSE you have to define \"new XML document types\"! That is the entire point - that you can, and that all participants can adjust themselves accordingly. And if you really feel that \"there's nothing in XML that offers you a significant support for such an endeavor\", I suggest that you try and accomplish the task in ASCII. I've had exactly the opposite experience. I was able to replace pages of IDL with a dirt-simple XML dtd and associated documents. It saved my team literally months, even years, of development time. -- [[Tom Stambaugh]]</i>",
      "id": "191da1ee8c7f0d83bc61abccb184e0d8"
    },
    {
      "type": "html",
      "text": "\nOn the \"meaning\" of data, in plain English, there are two aspects to this story:",
      "id": "aca2c865559180b8af4fe80ae6885ce9"
    },
    {
      "type": "html",
      "text": " the \"internal meaning\", or the meaning to the system, is the set of constraints that the data must satisfy in order for the system to accept it as valid, and be able to operate with it.",
      "id": "0f626a66b89be8435751fe81e9320307"
    },
    {
      "type": "html",
      "text": " the \"external meaning\", what data means to the users of the system.",
      "id": "db53ac0a66bcc0e75514175f0236b260"
    },
    {
      "type": "html",
      "text": "\nEncoding external meaning within the system, and verifying that that data is \"meaningful\", is something that we have yet to find out whether is tractable at all. This was the subject of this page: no matter what wonderful metamodels you may construct, you cannot, at the current state of affairs in AI, or as far as I and the other contributors know about, achieve self-describing data that software systems can dynamically combine and produce results meaningful to the human user.",
      "id": "182c225ca513921a2686e1957537736e"
    },
    {
      "type": "html",
      "text": "<i>Cantwell-Smith was doing this at least a decade ago (Lisp-2, Lisp-3). I'm not sure what \"current state of affairs in AI\" you refer to, but software systems routinely \"dynamically combine and produce results meaningful to the human user\" every day, at least at the level I'm talking about. -- [[Tom Stambaugh]]</i>",
      "id": "9adfa96b845bdfe00c9b097755e39323"
    },
    {
      "type": "html",
      "text": "\nThe \"internal meaning\", the set of constraints that data must satisfy, is what a \"data modeler\" devises as an approximation of the ideal set of constraints that would allow only correct data (from the perspective of \"external meaning\") to enter and be transformed by the software system. The data that satisfy all these internal constraints is said to be consistent, but not necessarily \"correct\" - fully satisfying the external meaning and being a truthful representation of the reality modeled. The more significant internal constraints the software system can verify and enforce, the lesser probability of errors you have. From this perspective, of supporting internal constraints, the XML itself and related technologies (including XML Schema, parsers, XPath, DOM, SAX, et cetera) are currently offering far from satisfactory possibilities, and that's what I was referring to when I asked you to be more precise. -- [[Costin Cozianu]]",
      "id": "5fed97d8bfe64aa3f7ea8a6c8dedef09"
    },
    {
      "type": "html",
      "text": "<i>Well, perhaps you have a different threshold of \"satisfactory\" than me. I mean that when I have to build a system of distributed clients communicating with distributed servers in a heterogeneous (software, platform, OS, etc) environment, I find \"XML itself and related technologies\" a) more than satisfactory and b) qualitatively and quantitatively superior to alternatives like IDL, RMI, COM, and so on. -- [[Tom Stambaugh]]</i>",
      "id": "d805d8da1a538ef6d8f92c4a48ed126f"
    },
    {
      "type": "html",
      "text": "\nTo cut a long story short, XML metadata is, at this time, expressed as DTD which is NOT XML. What would be XML metadata in XML - XML Schema - has at best beta support in current validating parsers, and when we talk about production quality parsers there's none. While XML schema is kind of promising, the constraints you can express in DTD are just not good enough. ",
      "id": "c453d3e3220363db9fbb17b697e3c1d5"
    },
    {
      "type": "html",
      "text": "\nSo when you say that XML is quantitatively and qualitatively superior to IDL, you have to have some arguments behind it. There's no data out there that can be encoded as XML and can't be encoded as GIOP. In GIOP you can restrict a specific piece of data to have a predefined type, while with the \"current technologies\" you can't in XML. Quantitatively , maybe you want to say that XML is bloated or something, the same data encoded in XML is surely taking a lot more (maybe an order or two of magnitude), in terms of space, bandwidth, CPU cycles. But this all depends on what you use XML for, XML is different things to different people. Just stating that XML is qualitatively and quantitatively superior, well, allow me to have a different opinion. -- [[Costin Cozianu]]",
      "id": "e803ae6bdb884805392d9ca3562dbac6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "84f29a8aedd9097d0d250a78f71c58fd"
    },
    {
      "type": "html",
      "text": "For real examples of [[Meta Data]], see how the [[Meta Object Protocol]] works in [[Common Lisp]].",
      "id": "525ce2c1e2a27015c33a87d445ac100a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "84f29a8aedd9097d0d250a78f71c58fd"
    },
    {
      "type": "html",
      "text": " <i>Metadata is almost always proprietary.</i>",
      "id": "7441d70163edbc46ddfcaccb298c3fb2"
    },
    {
      "type": "html",
      "text": "\nSo, Tags in LaTeX are proprietary? The MOP is proprietary?",
      "id": "8a51f6015e62319242a8ec5b3c76722b"
    },
    {
      "type": "html",
      "text": "\nMaybe what you mean is: bad examples of [[Meta Data]] adopted bandwagon style\nby companies trying to lock customers in is proprietary?",
      "id": "51f23fbfe8b2bb5df87f28baa0e1587d"
    },
    {
      "type": "html",
      "text": "<i>Maybe :)</i>",
      "id": "798250fded9b18eb3eb3d441255a1559"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "84f29a8aedd9097d0d250a78f71c58fd"
    },
    {
      "type": "html",
      "text": " <i>So, Tags in LaTeX are proprietary? The MOP is proprietary?</i>",
      "id": "8524059a7ca380634c766ab53ff979e0"
    },
    {
      "type": "html",
      "text": "\nThe metadata description languages are separate from the data themselves. Different fields care about different data. So it's often a thing like \"well, the Dublin Core spec specifies xxx core things, but we really need to track yy and zz as well.\" The metadata description specs are often ambiguous enough that companies / projects end up extending in proprietary ways because it's not obvious whether the language can be used to specify the extra fields they want.",
      "id": "36821adb48ddcd956a60c9e9df828644"
    },
    {
      "type": "html",
      "text": "\nI think a big part of the reality is that people interpret metadata differently. I might call the author of a piece of content <b>Creator</b>, while you might use <b>Author</b>, and use <b>Creator</b> as a field to specify who actually placed instantiated that piece of content. So already, the pipe dream of intercommunication is gone - even if we're using the same language to describe them!",
      "id": "4cc03230c0318be50554cc930061f662"
    },
    {
      "type": "html",
      "text": "-- jps",
      "id": "b50e3fa7ab9924b73915ebf22f66cd2c"
    },
    {
      "type": "html",
      "text": "<i>Of course, but then I say + is useless because I interpret it differently than you.</i>",
      "id": "6472d7219d1c21fbcf16c67b83f640c3"
    },
    {
      "type": "html",
      "text": "\nThere is metadata in XML, but we don't trust it. When combined with schemas, the metadata in XML becomes markup and can not completely the data without schemas. ",
      "id": "99282f8c297be1ff1ed04ea128a37e00"
    },
    {
      "type": "html",
      "text": "\nMetadata is also duplicated in processing applications, as we can't process XML otherwise.",
      "id": "06a67346e0b2ebfb8b9b75291804c27d"
    },
    {
      "type": "html",
      "text": "\nYes, metadata in XML is a myth.",
      "id": "a999b411007726b866970c29e62d864c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "84f29a8aedd9097d0d250a78f71c58fd"
    },
    {
      "type": "html",
      "text": "You guys. <i><tsk, tsk></i> Confusing metadata's usefulness with its description? You know, if I can describe something well enough with carefully chosen names, attributes, and other metadata, even one of you losers can figure it out. Eh? Hey, I should know - I use to be a non-XML loser!",
      "id": "42839a8e0aee70cd45b3c13530010ec5"
    },
    {
      "type": "html",
      "text": "<i><ahem></i>",
      "id": "ab0bdd5a64f0ccc92b217556200e7326"
    },
    {
      "type": "html",
      "text": "\nBut seriously, folks - how can names and metadata <i>not</i> contribute to the value of information being conveyed through XML? Granted, the Bloofta content of an Ekmotz entity may mean nothing to me just looking at it, but to anything that understands Ekmotz and Bloofta they are the world. The same thing is true of any written word that is conveyed through any medium. The entities being described need to have the same meaning to both sending and receiving parties for there to be any meaningful discussion at all. How does the presence or absence of metadata have any impact on that?",
      "id": "7134f2911e6481128caf613594e14d3c"
    },
    {
      "type": "html",
      "text": "\nOh, and by the way - let's not confuse the use of XML with the use of straight-up binary data. Each has its application areas and places where it should never venture. For intra-application communication, between servlets on the same host, and long haul, high volume situations it should be obvious that XML is not a good choice. For inter-application comm, between servers on multiple hosts (or through multiple switches, etc.), and local database storage, XML provides a solution that allows for much analysis by human intervention. I like that. Lots. -- [[Marty Schrader]]",
      "id": "f07910e8ca45a960280517099f040d6c"
    },
    {
      "type": "html",
      "text": "<i>But look at what you're saying - we require something</i> else <i>that understands what is inscribed. The point is that XML adds precisely no meaning or semantic import to what is inscribed in it. You could have just as easily picked [[Comma Separated Values]] or ASN.1. -- [[Bill Dehora]]</i>",
      "id": "48bbd61f4a24e483d4e0f5f1d94ec9e7"
    },
    {
      "type": "html",
      "text": "\nSure, I guess. But XML carries names with every element and attribute, so those names convey some meaning to me as an observer. If somebody chooses name that don't convey any meaning or are actually misleading then the advantage goes out the window. I hope we're not talking about that.",
      "id": "851d0a64a4c503e0f1ad5ca2973caf08"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "84f29a8aedd9097d0d250a78f71c58fd"
    },
    {
      "type": "html",
      "text": "I thought the purpose of XML was to have a specification for developing custom markup languages for data interchange between parties that have agreed to the meaning of the markup.",
      "id": "a766fa82d45a60ba981c2a147635386b"
    },
    {
      "type": "html",
      "text": "\nGiven this purpose, there was the idea for namespaces which I thought were supposed to be a collection of predefined, universal markup tags that one could reference so that both parties were using the same tags and wouldn't have to create them.",
      "id": "8d371afdf97455d7a472b3175ff23200"
    },
    {
      "type": "html",
      "text": "\nThese namespaces would be abstractions of specific vertical markets since the fundamental language of most vertical markets are identical.  In a way, namespaces would be like \"jargon dictionaries\".",
      "id": "b7ee7065c6a493d2fcbb45d9be047632"
    },
    {
      "type": "html",
      "text": "\nThe idea is good since it is based on the use of agreed forms of communication just like a protocol.",
      "id": "c935c55877937d255b4def35bb8122ee"
    },
    {
      "type": "html",
      "text": "\nApparently, XML was seen as just some form of easily customizable alternate storage format.  I figured XML through the use of namespaces would serve the same purpose for data interchange as browser specifications do for browsers, result in a situation where there was an agreed upon set of functionality that all browsers would implement and eliminate the need for different communications to different browsers for the same function.",
      "id": "26a9963533d13997202adcaac2c19d5f"
    },
    {
      "type": "html",
      "text": "\nThis was my understanding when reading about XML when it first appeared.  As usual, one can never be sure to what use humans will put new tools when they are placed in their hands.",
      "id": "963079a4cd3df3660fc393d05cc0b1a2"
    },
    {
      "type": "html",
      "text": "\nI haven't done any programming beyond simple shell scripts in a long time since I am not a programmer.  For my internal use I use CSV as my generic data transfer format.  This means I am not qualified to speak about how XML is used.  I'm also not sure that my understanding of the original purpose of XML is correct.  I would appreciate any comment or critique of this that would enhance my understanding.",
      "id": "4b66b8dc9da4300929794c37313b5bcf"
    },
    {
      "type": "html",
      "text": "\nE.Drake.",
      "id": "63c5dc089deecfb2962bfe5891ba783c"
    },
    {
      "type": "html",
      "text": "<i>Your understanding is correct.  The views that pushed XML as a general replacement for SQL and its databases -- and in some cases the DBMS too -- have been almost entirely shown to have been misunderstandings or delusions.  XML can, however, be used as a format for representing documents -- which sometimes raises [[Laynes Law]]-invoking debates over the distinction between a \"database\" and a \"document\".</i>",
      "id": "60fb483101d664a66cefe2f5253f7381"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "84f29a8aedd9097d0d250a78f71c58fd"
    },
    {
      "type": "html",
      "text": "Contributors: [[Costin Cozianu]], [[Tom Stambaugh]], [[Marty Schrader]], miscellaneous...",
      "id": "d07585e5cb8abb183adeaed75cc10f10"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "84f29a8aedd9097d0d250a78f71c58fd"
    },
    {
      "type": "html",
      "text": "[[Category Semantic Web]]",
      "id": "c34ed7a0ea55467dfbf92caf55e0a171"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?MythOfMetadata c2.com]",
      "id": "a06da0cb05ea64a030f6317ebf8bb565"
    }
  ],
  "journal": [
    {
      "date": 1284036138000,
      "id": "0846189313acab9ca8148daef747aba0",
      "type": "create",
      "item": {
        "title": "Myth Of Metadata",
        "story": [
          {
            "type": "html",
            "text": "[[Meta Data]] Myth:",
            "id": "01b69fc47561305da9cc49754e79426a"
          },
          {
            "type": "html",
            "text": " Just by the sheer existence of metadata in a system some system components never designed/developed to work together will magically work together.",
            "id": "ac1cc0c6b9971c3fb4ebe1985a8a5ddd"
          },
          {
            "type": "html",
            "text": " The metadata information (to what ever level it is provided) is enough to successfully use an interface, component, class, method, etc.",
            "id": "5af2b41bb7f0ee3e24ac7d92b580f710"
          },
          {
            "type": "html",
            "text": "[[Meta Data]] Reality:",
            "id": "84a31cf36b48b7ac9d1fa4476d5e1ce3"
          },
          {
            "type": "html",
            "text": " There is no such thing as a [[Free Lunch]]",
            "id": "7c7c9b15008db3c66e440bdf251609d9"
          },
          {
            "type": "html",
            "text": " Evaluating metadata is hard to do. Dynamically adapting a client to an interface via metadata analysis is even harder.",
            "id": "7355a15e880b31916c541102f55482b6"
          },
          {
            "type": "html",
            "text": " Metadata usage in a system needs to be designed and documented (and restricted) in order to be successful.",
            "id": "7c05927b640cd7e0e1bb689728497c06"
          },
          {
            "type": "html",
            "text": " Metadata is almost always proprietary.",
            "id": "c20ee8d984472b0949516e96f8622976"
          },
          {
            "type": "html",
            "text": " Metadata is a new source of really obscure bugs.",
            "id": "53d58077c380d221ed993229fd75f609"
          },
          {
            "type": "html",
            "text": " Metadata is almost never independent of the component or the container, so creating a huge (and profitable) dependency.",
            "id": "5a98bba9c0ba4229aafeaed0b20e8ce3"
          },
          {
            "type": "html",
            "text": " Metadata is hard",
            "id": "eef53f31667ba30d82a1ede41c133fe1"
          },
          {
            "type": "html",
            "text": "<i>Rather than argue over the general value of metadata, perhaps we should explore where metadata works well and where it doesn't. The alternatives can get pretty ugly also.</i>",
            "id": "344f9db59c0e1b36bbe7e4f7d2e51c69"
          },
          {
            "type": "html",
            "text": "\nSee: [[Job Security]], [[Barbie Principle]]",
            "id": "a2cb9e78d3c2f2f63039ff3a449fc813"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "84f29a8aedd9097d0d250a78f71c58fd"
          },
          {
            "type": "html",
            "text": "Related to this myth, there's another myth: that [[Extensible Markup Language]] is superior to ASN.1 or CORBA [[Common Data Representation]] or any other data interchange format because it is \"self describing\". That's a little too much.",
            "id": "0bbc9884e0d43310a1e81d1d58d02e1f"
          },
          {
            "type": "html",
            "text": "\nLet's take an example: ",
            "id": "29fa41b434881e2a51af69e32e149a4f"
          },
          {
            "type": "code",
            "text": "  <order customer_id=\"X\">\n  <item quantity=\"5\" >\n  <product>\n  <name>BookX</name>\n  <identification type=\"ISBN\">....</identification>\n  <quotedprice value=\"44.95\" currency=\"USD\" /> \n  </product>\n  </item>",
            "id": "31a3151ebcd8ad24b83f18642d104646"
          },
          {
            "type": "html",
            "text": "...",
            "id": "6fb700c1fd2af75120b35958f230c028"
          },
          {
            "type": "code",
            "text": "  </order>",
            "id": "d1e723bb6ffbf844b053f3cc7b69d612"
          },
          {
            "type": "html",
            "text": "To me as a programmer, the thing is indeed <i>almost</i> self-describing. If I also saw a DTD or a Schema file well commented, I would be thrilled. To a computer, these considerations have absolutely no value, we cannot yet build intelligence into computers to take in meta-data and do something useful with it. Before we can arrive there, we still have to find better ways to understand and define metadata.",
            "id": "3e54c3b887fbe720c88b93953eb08138"
          },
          {
            "type": "html",
            "text": "\nBefore we do that, ASN.1, [[Common Data Representation]] and XML are absolutely equivalent to a computer; the difference is that with XML we trade bandwidth for human convenience. XML can be easier to hand edit (just needs a text-editor), but for the purpose of building communications between systems this is irrelevant. When the computer can do everything, we won't care about these formats. For now, XML is easier for humans and library writers. That is all.",
            "id": "1e60d95c2cc0572df650be03f4082945"
          },
          {
            "type": "html",
            "text": "-- [[Costin Cozianu]] and others",
            "id": "71ee5852a54557148cf33df0d9d9e116"
          },
          {
            "type": "code",
            "text": "  <asd dfr_id=\"X\">\n  <iu lwm=\"5\" >\n  <rtj>\n  <nmj>BookX</nmj>\n  <qaz bvn=\"ISBN\">....</qaz>\n  <pkdw cvv=\"44.95\"dfgfd=\"USD\" /> \n  </rtj>\n  </iu>",
            "id": "cc4d4f0a205e458bc10a3db630c3d849"
          },
          {
            "type": "html",
            "text": "...",
            "id": "6fb700c1fd2af75120b35958f230c028"
          },
          {
            "type": "code",
            "text": "  </asd>",
            "id": "3a28789a265815b66eb98c20197b2910"
          },
          {
            "type": "html",
            "text": "The above shows why XML is not self describing. Using tags that look meaningful to a human and assuming that there is indeed meaning in the tags available to a machine has been called the [[Gensym Fallacy]] in the AI community. Moreover, there are no machine available semantics in the structure of the XML: what is the relationship between rtj and qaz above?",
            "id": "26d79fdd6dc5d8b42211cdc4aec19be6"
          },
          {
            "type": "html",
            "text": "<i>In the above example, I can provide metadata that defines precisely what each of the above tags \"means\" to the machine. XML provides a syntax so that this metadata is denoted using exactly the same syntax as the tags it applies to. If you had supplied the metadata, I could not only answer your question but dynamically alter, extend, or remove that relationship. I would encourage you to compare the construction of a distributed API using XML to the same task performed using, for example, IDL. Both allow the metadata to be described - but only XML describes it in the SAME syntax. -- [[Tom Stambaugh]]</i>",
            "id": "70f82d298b95cd44248d20733b6e2aa5"
          },
          {
            "type": "html",
            "text": "\nThere is questionable value in having the metadata encoded with the same mechanism as the data itself. There are places where this works, and places where it doesn't. However, you have to be more explicit when you say that you can define, what things \"mean\" to a machine. -- [[Costin Cozianu]]",
            "id": "647d4f29e984a5664c4ad11ae6b3e157"
          },
          {
            "type": "html",
            "text": "<i>While I appreciate your effort to be even-handed, in twenty years of using Smalltalk I haven't found any \"places where [this] doesn't [work]\" (but see [[In All My Years Ive Never]]). As far being more explicit when I say that I can define what things \"mean\" to a machine, I refer you to the Smalltalk metastructure. Specifically, classes #Behavior, #Class, #Metaclass, #[[Compiled Method]], #Block and #Process will be a good start. Xml is more than expressive enough to allow me to specify precisely what I mean by member, type, method, and so on. I can then use that specification in text such as you supplied to parse, traverse, and process pretty much anything you want. If you really care about what I mean by \"mean\", I direct you to, for example, the work of Brian Cantwell-Smith - specifically, his definition of a \"notation\", \"symbol\" and \"meaning\", and his definition of the theta/arctheta, phi/arcphi, and psi/arcpsi functions. That's as precise a definition of \"mean\" as I know. -- [[Tom Stambaugh]]</i>",
            "id": "f9495d8c40d299fa572dc56c7861f06a"
          },
          {
            "type": "html",
            "text": "\nSorry Tom, XML is capable of no such thing. XML is a tool for making markup languages. If we wanted to make a markup language to describe Smalltalk, that would be fine, but the semantics and meaning of Smalltalk expressions are <i>not</i> available from or held within the XML data. that would be like claiming the meaning of English sentences are held with its alphabet, or even its individual words. The best you can do with XML is lay out Smalltalk expressions for consumption by a Smalltalk evaluation. That does not make the the XML meaningful of itself - a process is what determines what that XML means. The common form of this myth in the XML Community is 'XML is like Lisp', but XML does not work like Smaltalk, Lisp or logic languages founded on a [[Model Theoretic Semantics]]. Quite the opposite, being a pure syntactic form, XML has no semantics or evaluation rules whatsoever that would allow us to accept what you're claiming. -- [[Bill Dehora]]",
            "id": "1f4baf3c3fd36158c37798f291483195"
          },
          {
            "type": "html",
            "text": "\nI'd like to mention that the semantics and meaning of English aren't available in sentences, paragraphs, or any other syntactic construct. The meaning is in the reader that evaluates it. Showing an English sentence to someone who doesn't know English and asking what it means demonstrates this. Metadata is most problematic when the meaning is ambiguous.",
            "id": "ee6eae90303c562c6401b99bc30df042"
          },
          {
            "type": "html",
            "text": "\nSo the problem is that you've been referring to Smalltalk, an example where things work. Still not even Smalltalk's metastructure is not as omnipotently expressive as you credit it. Such constructs as \"type\" (which is widely accepted within the [[Computer Science]] community that should be essentially different from the concept of class) that can be expressed in other languages as a primitive of the language (or of the metamodel) can't be equivalently expressed in Smalltalk. Other favorite examples of mine are relational databases where the metastructure is expressed as a set of relations (dat dictionary). But not all models have this characteristic that their metamodel can be sensibly or efficiently defined within the model.",
            "id": "e3774cdd9ab805f49ff15893f0fc5355"
          },
          {
            "type": "html",
            "text": "<i>I've worked on, with, and seen multiple Smalltalk environments that include the notion of \"Type\" (usually, but not always, mapped onto \"Class\"). For example, \"Strongtalk\" was externally available for awhile. Within IBM, researchers in RTP built a similar environment that used specially formatted (ala Javadoc) comment headers to accomplish similar goals. At my own startup, we built an Eiffel-style \"weak typing\" system in Smalltalk. It is straightforward (not \"trivial\", but requiring no \"inventions\") to create an \"[[Instance Specification]]\" class, instances of which can then be used to describe instance variable slots in the Smalltalk metastructure. The question of whether or not these are \"primitive\" is a [[Red Herring]] - anything can be made a primitive in Smalltalk, but few things matter enough to make it worthwhile. I agree that \"not all models ...\" - in fact, most commercial systems (Java and [[Cee Plus Plus]] to pick on two) cannot \"sensibly or efficiently\" define their metastructure from within the environment. This, in my opinion, is an important reason why those environments are so hosed and why a good object-oriented developer is so much less productive in those environments. Lisp and Eiffel, on the other hand, are two environments for which the metamodel is reasonably strong. -- [[Tom Stambaugh]]</i>",
            "id": "4d25881f12d25fac84f5e72029ec091a"
          },
          {
            "type": "html",
            "text": "\nNow, going back to the expressivity of XML, I very much doubt that it is as expressive as you may want it to be and among things that you can't <i>easily</i> express are types, constraints, relations and almost every useful data modeling construct. With a little effort, you can define new XML document types to encode that metadata also, but that was not my point. Expressing such things in XML is like expressing them in ASCII: of course you can do it, but there's nothing in XML that offers you a significant support for such an endeavour.",
            "id": "6b3c9585be6c85a2123e444c30b92a5f"
          },
          {
            "type": "html",
            "text": "<i>Of COURSE you have to define \"new XML document types\"! That is the entire point - that you can, and that all participants can adjust themselves accordingly. And if you really feel that \"there's nothing in XML that offers you a significant support for such an endeavor\", I suggest that you try and accomplish the task in ASCII. I've had exactly the opposite experience. I was able to replace pages of IDL with a dirt-simple XML dtd and associated documents. It saved my team literally months, even years, of development time. -- [[Tom Stambaugh]]</i>",
            "id": "191da1ee8c7f0d83bc61abccb184e0d8"
          },
          {
            "type": "html",
            "text": "\nOn the \"meaning\" of data, in plain English, there are two aspects to this story:",
            "id": "aca2c865559180b8af4fe80ae6885ce9"
          },
          {
            "type": "html",
            "text": " the \"internal meaning\", or the meaning to the system, is the set of constraints that the data must satisfy in order for the system to accept it as valid, and be able to operate with it.",
            "id": "0f626a66b89be8435751fe81e9320307"
          },
          {
            "type": "html",
            "text": " the \"external meaning\", what data means to the users of the system.",
            "id": "db53ac0a66bcc0e75514175f0236b260"
          },
          {
            "type": "html",
            "text": "\nEncoding external meaning within the system, and verifying that that data is \"meaningful\", is something that we have yet to find out whether is tractable at all. This was the subject of this page: no matter what wonderful metamodels you may construct, you cannot, at the current state of affairs in AI, or as far as I and the other contributors know about, achieve self-describing data that software systems can dynamically combine and produce results meaningful to the human user.",
            "id": "182c225ca513921a2686e1957537736e"
          },
          {
            "type": "html",
            "text": "<i>Cantwell-Smith was doing this at least a decade ago (Lisp-2, Lisp-3). I'm not sure what \"current state of affairs in AI\" you refer to, but software systems routinely \"dynamically combine and produce results meaningful to the human user\" every day, at least at the level I'm talking about. -- [[Tom Stambaugh]]</i>",
            "id": "9adfa96b845bdfe00c9b097755e39323"
          },
          {
            "type": "html",
            "text": "\nThe \"internal meaning\", the set of constraints that data must satisfy, is what a \"data modeler\" devises as an approximation of the ideal set of constraints that would allow only correct data (from the perspective of \"external meaning\") to enter and be transformed by the software system. The data that satisfy all these internal constraints is said to be consistent, but not necessarily \"correct\" - fully satisfying the external meaning and being a truthful representation of the reality modeled. The more significant internal constraints the software system can verify and enforce, the lesser probability of errors you have. From this perspective, of supporting internal constraints, the XML itself and related technologies (including XML Schema, parsers, XPath, DOM, SAX, et cetera) are currently offering far from satisfactory possibilities, and that's what I was referring to when I asked you to be more precise. -- [[Costin Cozianu]]",
            "id": "5fed97d8bfe64aa3f7ea8a6c8dedef09"
          },
          {
            "type": "html",
            "text": "<i>Well, perhaps you have a different threshold of \"satisfactory\" than me. I mean that when I have to build a system of distributed clients communicating with distributed servers in a heterogeneous (software, platform, OS, etc) environment, I find \"XML itself and related technologies\" a) more than satisfactory and b) qualitatively and quantitatively superior to alternatives like IDL, RMI, COM, and so on. -- [[Tom Stambaugh]]</i>",
            "id": "d805d8da1a538ef6d8f92c4a48ed126f"
          },
          {
            "type": "html",
            "text": "\nTo cut a long story short, XML metadata is, at this time, expressed as DTD which is NOT XML. What would be XML metadata in XML - XML Schema - has at best beta support in current validating parsers, and when we talk about production quality parsers there's none. While XML schema is kind of promising, the constraints you can express in DTD are just not good enough. ",
            "id": "c453d3e3220363db9fbb17b697e3c1d5"
          },
          {
            "type": "html",
            "text": "\nSo when you say that XML is quantitatively and qualitatively superior to IDL, you have to have some arguments behind it. There's no data out there that can be encoded as XML and can't be encoded as GIOP. In GIOP you can restrict a specific piece of data to have a predefined type, while with the \"current technologies\" you can't in XML. Quantitatively , maybe you want to say that XML is bloated or something, the same data encoded in XML is surely taking a lot more (maybe an order or two of magnitude), in terms of space, bandwidth, CPU cycles. But this all depends on what you use XML for, XML is different things to different people. Just stating that XML is qualitatively and quantitatively superior, well, allow me to have a different opinion. -- [[Costin Cozianu]]",
            "id": "e803ae6bdb884805392d9ca3562dbac6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "84f29a8aedd9097d0d250a78f71c58fd"
          },
          {
            "type": "html",
            "text": "For real examples of [[Meta Data]], see how the [[Meta Object Protocol]] works in [[Common Lisp]].",
            "id": "525ce2c1e2a27015c33a87d445ac100a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "84f29a8aedd9097d0d250a78f71c58fd"
          },
          {
            "type": "html",
            "text": " <i>Metadata is almost always proprietary.</i>",
            "id": "7441d70163edbc46ddfcaccb298c3fb2"
          },
          {
            "type": "html",
            "text": "\nSo, Tags in LaTeX are proprietary? The MOP is proprietary?",
            "id": "8a51f6015e62319242a8ec5b3c76722b"
          },
          {
            "type": "html",
            "text": "\nMaybe what you mean is: bad examples of [[Meta Data]] adopted bandwagon style\nby companies trying to lock customers in is proprietary?",
            "id": "51f23fbfe8b2bb5df87f28baa0e1587d"
          },
          {
            "type": "html",
            "text": "<i>Maybe :)</i>",
            "id": "798250fded9b18eb3eb3d441255a1559"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "84f29a8aedd9097d0d250a78f71c58fd"
          },
          {
            "type": "html",
            "text": " <i>So, Tags in LaTeX are proprietary? The MOP is proprietary?</i>",
            "id": "8524059a7ca380634c766ab53ff979e0"
          },
          {
            "type": "html",
            "text": "\nThe metadata description languages are separate from the data themselves. Different fields care about different data. So it's often a thing like \"well, the Dublin Core spec specifies xxx core things, but we really need to track yy and zz as well.\" The metadata description specs are often ambiguous enough that companies / projects end up extending in proprietary ways because it's not obvious whether the language can be used to specify the extra fields they want.",
            "id": "36821adb48ddcd956a60c9e9df828644"
          },
          {
            "type": "html",
            "text": "\nI think a big part of the reality is that people interpret metadata differently. I might call the author of a piece of content <b>Creator</b>, while you might use <b>Author</b>, and use <b>Creator</b> as a field to specify who actually placed instantiated that piece of content. So already, the pipe dream of intercommunication is gone - even if we're using the same language to describe them!",
            "id": "4cc03230c0318be50554cc930061f662"
          },
          {
            "type": "html",
            "text": "-- jps",
            "id": "b50e3fa7ab9924b73915ebf22f66cd2c"
          },
          {
            "type": "html",
            "text": "<i>Of course, but then I say + is useless because I interpret it differently than you.</i>",
            "id": "6472d7219d1c21fbcf16c67b83f640c3"
          },
          {
            "type": "html",
            "text": "\nThere is metadata in XML, but we don't trust it. When combined with schemas, the metadata in XML becomes markup and can not completely the data without schemas. ",
            "id": "99282f8c297be1ff1ed04ea128a37e00"
          },
          {
            "type": "html",
            "text": "\nMetadata is also duplicated in processing applications, as we can't process XML otherwise.",
            "id": "06a67346e0b2ebfb8b9b75291804c27d"
          },
          {
            "type": "html",
            "text": "\nYes, metadata in XML is a myth.",
            "id": "a999b411007726b866970c29e62d864c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "84f29a8aedd9097d0d250a78f71c58fd"
          },
          {
            "type": "html",
            "text": "You guys. <i><tsk, tsk></i> Confusing metadata's usefulness with its description? You know, if I can describe something well enough with carefully chosen names, attributes, and other metadata, even one of you losers can figure it out. Eh? Hey, I should know - I use to be a non-XML loser!",
            "id": "42839a8e0aee70cd45b3c13530010ec5"
          },
          {
            "type": "html",
            "text": "<i><ahem></i>",
            "id": "ab0bdd5a64f0ccc92b217556200e7326"
          },
          {
            "type": "html",
            "text": "\nBut seriously, folks - how can names and metadata <i>not</i> contribute to the value of information being conveyed through XML? Granted, the Bloofta content of an Ekmotz entity may mean nothing to me just looking at it, but to anything that understands Ekmotz and Bloofta they are the world. The same thing is true of any written word that is conveyed through any medium. The entities being described need to have the same meaning to both sending and receiving parties for there to be any meaningful discussion at all. How does the presence or absence of metadata have any impact on that?",
            "id": "7134f2911e6481128caf613594e14d3c"
          },
          {
            "type": "html",
            "text": "\nOh, and by the way - let's not confuse the use of XML with the use of straight-up binary data. Each has its application areas and places where it should never venture. For intra-application communication, between servlets on the same host, and long haul, high volume situations it should be obvious that XML is not a good choice. For inter-application comm, between servers on multiple hosts (or through multiple switches, etc.), and local database storage, XML provides a solution that allows for much analysis by human intervention. I like that. Lots. -- [[Marty Schrader]]",
            "id": "f07910e8ca45a960280517099f040d6c"
          },
          {
            "type": "html",
            "text": "<i>But look at what you're saying - we require something</i> else <i>that understands what is inscribed. The point is that XML adds precisely no meaning or semantic import to what is inscribed in it. You could have just as easily picked [[Comma Separated Values]] or ASN.1. -- [[Bill Dehora]]</i>",
            "id": "48bbd61f4a24e483d4e0f5f1d94ec9e7"
          },
          {
            "type": "html",
            "text": "\nSure, I guess. But XML carries names with every element and attribute, so those names convey some meaning to me as an observer. If somebody chooses name that don't convey any meaning or are actually misleading then the advantage goes out the window. I hope we're not talking about that.",
            "id": "851d0a64a4c503e0f1ad5ca2973caf08"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "84f29a8aedd9097d0d250a78f71c58fd"
          },
          {
            "type": "html",
            "text": "I thought the purpose of XML was to have a specification for developing custom markup languages for data interchange between parties that have agreed to the meaning of the markup.",
            "id": "a766fa82d45a60ba981c2a147635386b"
          },
          {
            "type": "html",
            "text": "\nGiven this purpose, there was the idea for namespaces which I thought were supposed to be a collection of predefined, universal markup tags that one could reference so that both parties were using the same tags and wouldn't have to create them.",
            "id": "8d371afdf97455d7a472b3175ff23200"
          },
          {
            "type": "html",
            "text": "\nThese namespaces would be abstractions of specific vertical markets since the fundamental language of most vertical markets are identical.  In a way, namespaces would be like \"jargon dictionaries\".",
            "id": "b7ee7065c6a493d2fcbb45d9be047632"
          },
          {
            "type": "html",
            "text": "\nThe idea is good since it is based on the use of agreed forms of communication just like a protocol.",
            "id": "c935c55877937d255b4def35bb8122ee"
          },
          {
            "type": "html",
            "text": "\nApparently, XML was seen as just some form of easily customizable alternate storage format.  I figured XML through the use of namespaces would serve the same purpose for data interchange as browser specifications do for browsers, result in a situation where there was an agreed upon set of functionality that all browsers would implement and eliminate the need for different communications to different browsers for the same function.",
            "id": "26a9963533d13997202adcaac2c19d5f"
          },
          {
            "type": "html",
            "text": "\nThis was my understanding when reading about XML when it first appeared.  As usual, one can never be sure to what use humans will put new tools when they are placed in their hands.",
            "id": "963079a4cd3df3660fc393d05cc0b1a2"
          },
          {
            "type": "html",
            "text": "\nI haven't done any programming beyond simple shell scripts in a long time since I am not a programmer.  For my internal use I use CSV as my generic data transfer format.  This means I am not qualified to speak about how XML is used.  I'm also not sure that my understanding of the original purpose of XML is correct.  I would appreciate any comment or critique of this that would enhance my understanding.",
            "id": "4b66b8dc9da4300929794c37313b5bcf"
          },
          {
            "type": "html",
            "text": "\nE.Drake.",
            "id": "63c5dc089deecfb2962bfe5891ba783c"
          },
          {
            "type": "html",
            "text": "<i>Your understanding is correct.  The views that pushed XML as a general replacement for SQL and its databases -- and in some cases the DBMS too -- have been almost entirely shown to have been misunderstandings or delusions.  XML can, however, be used as a format for representing documents -- which sometimes raises [[Laynes Law]]-invoking debates over the distinction between a \"database\" and a \"document\".</i>",
            "id": "60fb483101d664a66cefe2f5253f7381"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "84f29a8aedd9097d0d250a78f71c58fd"
          },
          {
            "type": "html",
            "text": "Contributors: [[Costin Cozianu]], [[Tom Stambaugh]], [[Marty Schrader]], miscellaneous...",
            "id": "d07585e5cb8abb183adeaed75cc10f10"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "84f29a8aedd9097d0d250a78f71c58fd"
          },
          {
            "type": "html",
            "text": "[[Category Semantic Web]]",
            "id": "c34ed7a0ea55467dfbf92caf55e0a171"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?MythOfMetadata c2.com]",
            "id": "a06da0cb05ea64a030f6317ebf8bb565"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1660216455776
    }
  ]
}