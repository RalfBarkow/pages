{
  "title": "Animals",
  "story": [
    {
      "type": "paragraph",
      "id": "7dc0054033e6aed4",
      "text": "Animals builds a decision-tree that guesses an animal. When it fails to guess yours, it asks for a question that might divide the search space."
    },
    {
      "type": "html",
      "id": "233606a74ef3d088",
      "text": "I coded Animals in <i>icon</i> which was a challenge to use its sense of expression success or failure to control flow."
    },
    {
      "type": "paragraph",
      "id": "170847c2b4d713da",
      "text": "Of course the behavior of the program depends on the quality of questions offered by users. I programmed in the first few questions to divide the space:"
    },
    {
      "type": "html",
      "id": "9cee527af8685d18",
      "text": "<pre>node (\"Does it swim\",\n    node (\"a trout\"),\n    node (\"Can it fly\",\n        node (\"an eagle\"),\n        node (\"a cat\")))\n"
    },
    {
      "type": "paragraph",
      "id": "822a4aeb40a3726c",
      "text": "My brother's girlfriend Teresa thought she would surely stump the program when she chose pterodactyl. She knew she'd lost when it asked, is it hard to spell? "
    },
    {
      "type": "paragraph",
      "id": "88c570a81b883618",
      "text": "The program stored the tree of choices as nodes, either branches that asked about a characteristic, or leaves that asked about a specific animal. The subtrees of a branch either had or didn't have the specific characteristic."
    },
    {
      "type": "paragraph",
      "id": "39fbfefadef2f166",
      "text": "Nodes were written recursively to a flat-file database. When reading, I had only to distinguish leaves from branches. When I read a branch, I read (recursively) two more nodes, one for \"yes\" and one for \"no\"."
    },
    {
      "type": "paragraph",
      "id": "9aab4f8fb68cb65e",
      "text": "Try recursing through this sample data:"
    },
    {
      "type": "html",
      "id": "5e46fb65899c5324",
      "text": "<pre>Does it swim\nIs it warm blooded\nIs it really big\na whale\na seal\nIs it very small\nan amoeba\nDoes it have legs\na frog\na trout\nCan it fly\nIs it furry\nDoes it have bones\na bat\nWill it sting\na bee\na moth\nIs it endangered\nan eagle\nWould it live in the city\nWill it sing\na parrot\na pigeon\na hawk\nHas it four legs\nIs it really big\nDoes it have spots\na giraffe\nan elephant\nIs it a domestic animal\nDo you have to walk it\na dog\na cat\nDoes it eat plants\nIs it magical\nan unicorn\na bear\nWill it eat people\na tiger\nDoes it live on a farm\na pig\nIs it striped\na skunk\na fox\nIt has more than four\na spider\nDoes it stand erect\na man\nDoes it leave a trail\na slug\na snake\n"
    },
    {
      "type": "html",
      "id": "812709b821d655c2",
      "text": "I read the database with the following <i>icon</i> code. The read_node procedure reads one line, establishes it as the match subject, then, based on matching, either creates a leaf node with that subject or creates a branch node with the subject and two more nodes."
    },
    {
      "type": "html",
      "id": "a47a7999ebf315e5",
      "text": "<pre>procedure read_database ()\n    if file := open (filename, \"r\") then {\n        root := read_node ()\n        close (file)\n        return \\root\n    }\nend\n\nprocedure read_node ()\n    return read (file) ? {\n        (match (\"a \" | \"an \") & node (&subject)) |\n        node (&subject, read_node (), read_node ())\n    }\nend\n"
    },
    {
      "type": "paragraph",
      "id": "2b619f6731aaabe9",
      "text": "See also [[Animals Decision Tree in Dot]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "id": "7146469ea0db7af5",
      "item": {
        "title": "Animals"
      },
      "date": 1335324593432
    },
    {
      "item": {
        "type": "factory",
        "id": "7dc0054033e6aed4"
      },
      "id": "7dc0054033e6aed4",
      "type": "add",
      "date": 1335324603407
    },
    {
      "type": "edit",
      "id": "7dc0054033e6aed4",
      "item": {
        "type": "paragraph",
        "id": "7dc0054033e6aed4",
        "text": "I coded the "
      },
      "date": 1335324633593
    },
    {
      "type": "edit",
      "id": "7dc0054033e6aed4",
      "item": {
        "type": "paragraph",
        "id": "7dc0054033e6aed4",
        "text": "Animals builds a decision-tree that guesses an animal. When it fails to guess yours, it asks for a question that might divide the search space."
      },
      "date": 1335324659754
    },
    {
      "item": {
        "type": "factory",
        "id": "233606a74ef3d088"
      },
      "id": "233606a74ef3d088",
      "type": "add",
      "after": "7dc0054033e6aed4",
      "date": 1335324662279
    },
    {
      "type": "edit",
      "id": "233606a74ef3d088",
      "item": {
        "type": "paragraph",
        "id": "233606a74ef3d088",
        "text": "I coded Animals in ICON which was a challenge to use its sense of expression success or failure to control flow."
      },
      "date": 1335324785560
    },
    {
      "item": {
        "type": "factory",
        "id": "170847c2b4d713da"
      },
      "id": "170847c2b4d713da",
      "type": "add",
      "after": "233606a74ef3d088",
      "date": 1335324788210
    },
    {
      "type": "edit",
      "id": "170847c2b4d713da",
      "item": {
        "type": "paragraph",
        "id": "170847c2b4d713da",
        "text": "Of course the behavior of the program depends on the quality of questions offered by users. I programmed in the first few questions to divide the space: does it fly? can it swim?"
      },
      "date": 1335324886511
    },
    {
      "item": {
        "type": "factory",
        "id": "822a4aeb40a3726c"
      },
      "id": "822a4aeb40a3726c",
      "type": "add",
      "after": "170847c2b4d713da",
      "date": 1335324894950
    },
    {
      "type": "edit",
      "id": "822a4aeb40a3726c",
      "item": {
        "type": "paragraph",
        "id": "822a4aeb40a3726c",
        "text": "My brother's girlfriend Teresa thought she would surely stump the program when she chose pyradactile "
      },
      "date": 1335324981821
    },
    {
      "type": "edit",
      "id": "822a4aeb40a3726c",
      "item": {
        "type": "paragraph",
        "id": "822a4aeb40a3726c",
        "text": "My brother's girlfriend Teresa thought she would surely stump the program when she chose pterodactyl. She knew she'd lost when it asked, is it hard to spell? "
      },
      "date": 1335325066875
    },
    {
      "item": {
        "type": "factory",
        "id": "5e46fb65899c5324"
      },
      "id": "5e46fb65899c5324",
      "type": "add",
      "after": "822a4aeb40a3726c",
      "date": 1338656799403
    },
    {
      "type": "edit",
      "id": "5e46fb65899c5324",
      "item": {
        "type": "paragraph",
        "id": "5e46fb65899c5324",
        "text": "<pre>Does it swim\nIs it warm blooded\nIs it really big\na whale\na seal\nIs it very small\nan ameoba\nDoes it have legs\na frog\na trout\nCan it fly\nIs it furry\nDoes it have bones\na bat\nWill it sting\na bee\na moth\nIs it endangered\nan eagle\nWould it live in the city\nWill it sing\na parriot\na pidgeon\na hawk\nHas it four legs\nIs it really big\nDoes it have spots\na giraffe\nan elephant\nIs it a domestic animal\nDo you have to walk it\na dog\na cat\nDoes it eat plants\nIs it magical\nan unicorn\na bear\nWill it eat people\na tiger\nDoes it live on a farm\na pig\nIs it striped\na skunk\na fox\nIt has more than four\na spider\nDoes it stand erect\na man\nDoes it leave a trail\na slug\na snake\n"
      },
      "date": 1338656817425
    },
    {
      "item": {
        "type": "factory",
        "id": "a47a7999ebf315e5"
      },
      "id": "a47a7999ebf315e5",
      "type": "add",
      "after": "5e46fb65899c5324",
      "date": 1338656951020
    },
    {
      "type": "edit",
      "id": "a47a7999ebf315e5",
      "item": {
        "type": "paragraph",
        "id": "a47a7999ebf315e5",
        "text": "<pre>procedure read_database ()\n        if file := open (filename, \"r\") then {\n                root := read_node ()\n                close (file)\n                return \\root\n        }\nend\n\nprocedure read_node ()\n        return read (file) ? {\n                (match (\"a \" | \"an \") & node (&subject)) |\n                node (&subject, read_node (), read_node ())\n        }\nend\n"
      },
      "date": 1338656966668
    },
    {
      "item": {
        "type": "paragraph",
        "id": "88c570a81b883618",
        "text": ""
      },
      "id": "88c570a81b883618",
      "type": "add",
      "after": "822a4aeb40a3726c",
      "date": 1338657066487
    },
    {
      "type": "edit",
      "id": "88c570a81b883618",
      "item": {
        "type": "paragraph",
        "id": "88c570a81b883618",
        "text": "The program stored the tree of choices as nodes, either branches that asked about a characteristic, or leaves that asked about a specific animal. The subtrees of a branch either had or didn't have the specific characteristic."
      },
      "date": 1338657431902
    },
    {
      "item": {
        "type": "paragraph",
        "id": "39fbfefadef2f166",
        "text": ""
      },
      "id": "39fbfefadef2f166",
      "type": "add",
      "after": "88c570a81b883618",
      "date": 1338657432407
    },
    {
      "type": "edit",
      "id": "39fbfefadef2f166",
      "item": {
        "type": "paragraph",
        "id": "39fbfefadef2f166",
        "text": "Nodes were written recursively to a flat-file database. When reading, I had only to distinguish leaves from branches. When I read a branch, I read (recursively) two more nodes. "
      },
      "date": 1338657614976
    },
    {
      "item": {
        "type": "paragraph",
        "id": "9aab4f8fb68cb65e",
        "text": ""
      },
      "id": "9aab4f8fb68cb65e",
      "type": "add",
      "after": "39fbfefadef2f166",
      "date": 1338657615481
    },
    {
      "type": "edit",
      "id": "9aab4f8fb68cb65e",
      "item": {
        "type": "paragraph",
        "id": "9aab4f8fb68cb65e",
        "text": "Try recursing through this sample data:"
      },
      "date": 1338657624576
    },
    {
      "item": {
        "type": "paragraph",
        "id": "812709b821d655c2",
        "text": ""
      },
      "id": "812709b821d655c2",
      "type": "add",
      "after": "5e46fb65899c5324",
      "date": 1338657641216
    },
    {
      "type": "edit",
      "id": "812709b821d655c2",
      "item": {
        "type": "paragraph",
        "id": "812709b821d655c2",
        "text": "Here is the ICON code I used to read files like the one above."
      },
      "date": 1338657916766
    },
    {
      "type": "edit",
      "id": "812709b821d655c2",
      "item": {
        "type": "paragraph",
        "id": "812709b821d655c2",
        "text": "Here is the ICON code I used to recursively read files like the one above. The read_node procedure reads one line, establishes it as the subject of matching, and then either creates a leaf node with that subject or creates a branch node with the subject and two subnodes."
      },
      "date": 1338658112850
    },
    {
      "type": "edit",
      "id": "39fbfefadef2f166",
      "item": {
        "type": "paragraph",
        "id": "39fbfefadef2f166",
        "text": "Nodes were written recursively to a flat-file database. When reading, I had only to distinguish leaves from branches. When I read a branch, I read (recursively) two more nodes, one for \"yes\" and one for \"no\"."
      },
      "date": 1338658348268
    },
    {
      "type": "edit",
      "id": "233606a74ef3d088",
      "item": {
        "type": "paragraph",
        "id": "233606a74ef3d088",
        "text": "I coded Animals in <i>icon</i> which was a challenge to use its sense of expression success or failure to control flow."
      },
      "date": 1338658387378
    },
    {
      "type": "edit",
      "id": "812709b821d655c2",
      "item": {
        "type": "paragraph",
        "id": "812709b821d655c2",
        "text": "Here is the <i>icon</i> code I used to recursively read files like the one above. The read_node procedure reads one line, establishes it as the subject of matching, and then either creates a leaf node with that subject or creates a branch node with the subject and two subnodes."
      },
      "date": 1338658406682
    },
    {
      "type": "edit",
      "id": "170847c2b4d713da",
      "item": {
        "type": "paragraph",
        "id": "170847c2b4d713da",
        "text": "Of course the behavior of the program depends on the quality of questions offered by users. I programmed in the first few questions to divide the space: does it swim? can it fly?"
      },
      "date": 1338658486055
    },
    {
      "item": {
        "type": "paragraph",
        "id": "9cee527af8685d18",
        "text": ""
      },
      "id": "9cee527af8685d18",
      "type": "add",
      "after": "170847c2b4d713da",
      "date": 1338659788969
    },
    {
      "type": "edit",
      "id": "9cee527af8685d18",
      "item": {
        "type": "paragraph",
        "id": "9cee527af8685d18",
        "text": "<pre>node (\"Does it swim\",\n    node (\"a trout\"),\n    node (\"Can it fly\",\n        node (\"an eagle\"),\n        node (\"a cat\")))\n"
      },
      "date": 1338659795802
    },
    {
      "type": "edit",
      "id": "170847c2b4d713da",
      "item": {
        "type": "paragraph",
        "id": "170847c2b4d713da",
        "text": "Of course the behavior of the program depends on the quality of questions offered by users. I programmed in the first few questions to divide the space:"
      },
      "date": 1338659876167
    },
    {
      "type": "edit",
      "id": "812709b821d655c2",
      "item": {
        "type": "paragraph",
        "id": "812709b821d655c2",
        "text": "I used the following <i>icon</i> code. The read_node procedure reads one line, establishes it as the match subject, then, based on matching, either creates a leaf node with that subject or creates a branch node with the subject and two more nodes."
      },
      "date": 1338660108951
    },
    {
      "type": "edit",
      "id": "812709b821d655c2",
      "item": {
        "type": "paragraph",
        "id": "812709b821d655c2",
        "text": "I read this with the following <i>icon</i> code. The read_node procedure reads one line, establishes it as the match subject, then, based on matching, either creates a leaf node with that subject or creates a branch node with the subject and two more nodes."
      },
      "date": 1338660132319
    },
    {
      "type": "edit",
      "id": "a47a7999ebf315e5",
      "item": {
        "type": "paragraph",
        "id": "a47a7999ebf315e5",
        "text": "<pre>procedure read_database ()\n    if file := open (filename, \"r\") then {\n        root := read_node ()\n        close (file)\n        return \\root\n    }\nend\n\nprocedure read_node ()\n        return read (file) ? {\n                (match (\"a \" | \"an \") & node (&subject)) |\n                node (&subject, read_node (), read_node ())\n        }\nend\n"
      },
      "date": 1338660191397
    },
    {
      "type": "edit",
      "id": "a47a7999ebf315e5",
      "item": {
        "type": "paragraph",
        "id": "a47a7999ebf315e5",
        "text": "<pre>procedure read_database ()\n    if file := open (filename, \"r\") then {\n        root := read_node ()\n        close (file)\n        return \\root\n    }\nend\n\nprocedure read_node ()\n    return read (file) ? {\n        (match (\"a \" | \"an \") & node (&subject)) |\n        node (&subject, read_node (), read_node ())\n    }\nend\n"
      },
      "date": 1338660222253
    },
    {
      "type": "edit",
      "id": "812709b821d655c2",
      "item": {
        "type": "paragraph",
        "id": "812709b821d655c2",
        "text": "I read the database with the following <i>icon</i> code. The read_node procedure reads one line, establishes it as the match subject, then, based on matching, either creates a leaf node with that subject or creates a branch node with the subject and two more nodes."
      },
      "date": 1338660401584
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org"
    },
    {
      "item": {
        "type": "factory",
        "id": "2b619f6731aaabe9"
      },
      "id": "2b619f6731aaabe9",
      "type": "add",
      "after": "a47a7999ebf315e5",
      "date": 1338823017449
    },
    {
      "type": "edit",
      "id": "2b619f6731aaabe9",
      "item": {
        "type": "paragraph",
        "id": "2b619f6731aaabe9",
        "text": "See also [[Animals Decision Tree in Dot]]"
      },
      "date": 1338823050457
    },
    {
      "type": "fork",
      "site": "localhost:1111",
      "date": 1338823324147
    },
    {
      "type": "edit",
      "id": "233606a74ef3d088",
      "item": {
        "type": "html",
        "id": "233606a74ef3d088",
        "text": "I coded Animals in <i>icon</i> which was a challenge to use its sense of expression success or failure to control flow."
      },
      "date": 1421016299687
    },
    {
      "type": "edit",
      "id": "9cee527af8685d18",
      "item": {
        "type": "html",
        "id": "9cee527af8685d18",
        "text": "<pre>node (\"Does it swim\",\n    node (\"a trout\"),\n    node (\"Can it fly\",\n        node (\"an eagle\"),\n        node (\"a cat\")))\n"
      },
      "date": 1421016301503
    },
    {
      "type": "edit",
      "id": "5e46fb65899c5324",
      "item": {
        "type": "html",
        "id": "5e46fb65899c5324",
        "text": "<pre>Does it swim\nIs it warm blooded\nIs it really big\na whale\na seal\nIs it very small\nan ameoba\nDoes it have legs\na frog\na trout\nCan it fly\nIs it furry\nDoes it have bones\na bat\nWill it sting\na bee\na moth\nIs it endangered\nan eagle\nWould it live in the city\nWill it sing\na parriot\na pidgeon\na hawk\nHas it four legs\nIs it really big\nDoes it have spots\na giraffe\nan elephant\nIs it a domestic animal\nDo you have to walk it\na dog\na cat\nDoes it eat plants\nIs it magical\nan unicorn\na bear\nWill it eat people\na tiger\nDoes it live on a farm\na pig\nIs it striped\na skunk\na fox\nIt has more than four\na spider\nDoes it stand erect\na man\nDoes it leave a trail\na slug\na snake\n"
      },
      "date": 1421016308419
    },
    {
      "type": "edit",
      "id": "a47a7999ebf315e5",
      "item": {
        "type": "html",
        "id": "a47a7999ebf315e5",
        "text": "<pre>procedure read_database ()\n    if file := open (filename, \"r\") then {\n        root := read_node ()\n        close (file)\n        return \\root\n    }\nend\n\nprocedure read_node ()\n    return read (file) ? {\n        (match (\"a \" | \"an \") & node (&subject)) |\n        node (&subject, read_node (), read_node ())\n    }\nend\n"
      },
      "date": 1421016312939
    },
    {
      "type": "edit",
      "id": "812709b821d655c2",
      "item": {
        "type": "html",
        "id": "812709b821d655c2",
        "text": "I read the database with the following <i>icon</i> code. The read_node procedure reads one line, establishes it as the match subject, then, based on matching, either creates a leaf node with that subject or creates a branch node with the subject and two more nodes."
      },
      "date": 1421017305503
    },
    {
      "type": "edit",
      "id": "5e46fb65899c5324",
      "item": {
        "type": "html",
        "id": "5e46fb65899c5324",
        "text": "<pre>Does it swim\nIs it warm blooded\nIs it really big\na whale\na seal\nIs it very small\nan amoeba\nDoes it have legs\na frog\na trout\nCan it fly\nIs it furry\nDoes it have bones\na bat\nWill it sting\na bee\na moth\nIs it endangered\nan eagle\nWould it live in the city\nWill it sing\na parrot\na pigeon\na hawk\nHas it four legs\nIs it really big\nDoes it have spots\na giraffe\nan elephant\nIs it a domestic animal\nDo you have to walk it\na dog\na cat\nDoes it eat plants\nIs it magical\nan unicorn\na bear\nWill it eat people\na tiger\nDoes it live on a farm\na pig\nIs it striped\na skunk\na fox\nIt has more than four\na spider\nDoes it stand erect\na man\nDoes it leave a trail\na slug\na snake\n"
      },
      "date": 1708057170734
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1709294913930
    }
  ]
}