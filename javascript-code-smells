{
  "title": "JavaScript Code Smells",
  "story": [
    {
      "type": "paragraph",
      "id": "c9c847cbc05ffdeb",
      "text": "This is a collection of practices that I think should be avoided in JavaScript. Not absolutely never used, I'll leave that list for another page, or the community at large. But instead a guide to things that should be a flag, maybe I should rethink how I'm doing this and see if I can refactor this code to make it better by avoiding this."
    },
    {
      "type": "paragraph",
      "id": "770c0ae395c1c984",
      "text": "Function calls that take no paramaters and return no value. What this means is that the functions only impact on the program is side effects. It makes it hard to track what inputs effect the outcome of the function."
    },
    {
      "type": "paragraph",
      "id": "16aa60eaa33b9016",
      "text": "Another kind of code smell are functions that take a large number of arguments. The order is hard to keep track of, if you want to specify one you have to pass something for all the ones before it, and it is hard to read/reuse function calls. One easy way to deal with that is pass an options object that you can use essentially as keyword arguments."
    },
    {
      "type": "paragraph",
      "id": "b55893012c50abbb",
      "text": "Functions that have several different possible callbacks passed in as arguments or set as properties. This is common in older style apis, but is much harder to understand and manage than an event emitter. The rules for what gets called when, and how to add/remove functions are well established with event emitters, and that convention goes along way toward the usability of your code."
    },
    {
      "type": "paragraph",
      "id": "418cd815cdb5d42f",
      "text": "Callbacks that end up several deep. As the indentation marches off to the right of the screen your functions are closing over more and more state, and it's harder and harder to tell what side effects change what. Teasing those nested callbacks out into another abstraction, or higher order functions that return the callback you need, or even just moving things up a level or two and giving it a name can greatly help code clarity."
    },
    {
      "type": "paragraph",
      "id": "ac8e6babe4c407d6",
      "text": "Code that does the same thing in two or more different places. Duplicate code leaves you vulnerable to changes only making it to one part of your program or another, so it makes your system more fragile."
    },
    {
      "type": "paragraph",
      "id": "e36db4688c4deddf",
      "text": "Mixing tabs and spaces.  Whitespace is insignificant in JavaScript except as a visual cue to the developer. You can really chose any amount of white space you want per logical indentation, but if you don't indent with all the same character, and at the expected places people will have a hard time working on your code."
    },
    {
      "type": "paragraph",
      "id": "797d7bacd30c684c",
      "text": "Putting too much functionality into one module. This is especially bad if it's all in one file. There is no hard and fast rule as to how much is too much, but it's best if you can fit the logic of a whole module into your head at one time. Anything that can be should be split into separate files, and if any of those can be made useful in any way to any other project they should be published independently."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "JavaScript Code Smells"
      },
      "date": 1358753217763
    },
    {
      "item": {
        "type": "factory",
        "id": "c9c847cbc05ffdeb"
      },
      "id": "c9c847cbc05ffdeb",
      "type": "add",
      "date": 1358753232900
    },
    {
      "type": "edit",
      "id": "c9c847cbc05ffdeb",
      "item": {
        "type": "paragraph",
        "id": "c9c847cbc05ffdeb",
        "text": "This is a collection of practices that I think should be avoided in JavaScript. Not absolutely never used, I'll leave that list for another page, or the community at large. But instead a guide to things that should be a flag, maybe I should rethink how I'm doing this and see if I can refactor this code to make it better by avoiding this."
      },
      "date": 1358753438851
    },
    {
      "item": {
        "type": "paragraph",
        "id": "770c0ae395c1c984",
        "text": ""
      },
      "id": "770c0ae395c1c984",
      "type": "add",
      "after": "c9c847cbc05ffdeb",
      "date": 1358753439355
    },
    {
      "type": "edit",
      "id": "770c0ae395c1c984",
      "item": {
        "type": "paragraph",
        "id": "770c0ae395c1c984",
        "text": "Function calls that take no paramaters and return no value. What this means is that the functions only impact on the program is side effects. It makes it hard to track what inputs effect the outcome of the function, and what effects it has."
      },
      "date": 1358753698901
    },
    {
      "item": {
        "type": "factory",
        "id": "16aa60eaa33b9016"
      },
      "id": "16aa60eaa33b9016",
      "type": "add",
      "after": "770c0ae395c1c984",
      "date": 1358836039779
    },
    {
      "type": "edit",
      "id": "16aa60eaa33b9016",
      "item": {
        "type": "paragraph",
        "id": "16aa60eaa33b9016",
        "text": "Another kind of code smell are functions that take a large number of arguments. The order is hard to keep track of, if you want to specify one you have to pass something for all the ones before it, and it is hard to read/reuse function calls. One easy way to deal with that is pass an options object that you can use essentially as keyword arguments."
      },
      "date": 1358836282071
    },
    {
      "type": "fork",
      "site": "nrn.io"
    },
    {
      "type": "edit",
      "id": "770c0ae395c1c984",
      "item": {
        "type": "paragraph",
        "id": "770c0ae395c1c984",
        "text": "Function calls that take no paramaters and return no value. What this means is that the functions only impact on the program is side effects. It makes it hard to track what inputs effect the outcome of the function."
      },
      "site": "nrn.io",
      "date": 1358915875625
    },
    {
      "type": "fork",
      "date": 1358915896860
    },
    {
      "item": {
        "type": "paragraph",
        "id": "b55893012c50abbb",
        "text": ""
      },
      "id": "b55893012c50abbb",
      "type": "add",
      "after": "16aa60eaa33b9016",
      "date": 1358920414860
    },
    {
      "type": "edit",
      "id": "b55893012c50abbb",
      "item": {
        "type": "paragraph",
        "id": "b55893012c50abbb",
        "text": "Functions that have several different possible callbacks passed in as arguments or set as properties. This is common in older style apis, but is much harder to understand and manage than an event emitter. The rules for what gets called when, and how to add/remove functions are well established with event emitters, and that convention goes along way toward the usability of your code."
      },
      "date": 1358920640722
    },
    {
      "item": {
        "type": "paragraph",
        "id": "418cd815cdb5d42f",
        "text": ""
      },
      "id": "418cd815cdb5d42f",
      "type": "add",
      "after": "b55893012c50abbb",
      "date": 1359439497591
    },
    {
      "type": "edit",
      "id": "418cd815cdb5d42f",
      "item": {
        "type": "paragraph",
        "id": "418cd815cdb5d42f",
        "text": "Callbacks that end up several deep. As the indentation marches off to the right of the screen your functions are closing over more and more state, and it's harder and harder to tell what side effects change what. Teasing those nested callbacks out into another abstraction, or higher order functions that return the callback you need, or even just moving things up a level or two and giving it a name can greatly help code clarity."
      },
      "date": 1359439737916
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ac8e6babe4c407d6",
        "text": ""
      },
      "id": "ac8e6babe4c407d6",
      "type": "add",
      "after": "418cd815cdb5d42f",
      "date": 1359792630750
    },
    {
      "type": "edit",
      "id": "ac8e6babe4c407d6",
      "item": {
        "type": "paragraph",
        "id": "ac8e6babe4c407d6",
        "text": "Code that does the same thing in two or more different places. Duplicate code leaves you vulnerable to changes only making it to one part of your program or another, so it makes your system more fragile."
      },
      "date": 1359792778229
    },
    {
      "item": {
        "type": "paragraph",
        "id": "e36db4688c4deddf",
        "text": ""
      },
      "id": "e36db4688c4deddf",
      "type": "add",
      "after": "ac8e6babe4c407d6",
      "date": 1359874541185
    },
    {
      "type": "edit",
      "id": "e36db4688c4deddf",
      "item": {
        "type": "paragraph",
        "id": "e36db4688c4deddf",
        "text": "Mixing tabs and spaces.  Whitespace is insignificant in JavaScript except as a visual cue to the developer. You can really chose any amount of white space you want per logical indentation, but if you don't indent with all the same character, and at the expected places people will have a hard time working on your code."
      },
      "date": 1359874543968
    },
    {
      "item": {
        "type": "factory",
        "id": "797d7bacd30c684c"
      },
      "id": "797d7bacd30c684c",
      "type": "add",
      "after": "e36db4688c4deddf",
      "date": 1362218608500
    },
    {
      "type": "edit",
      "id": "797d7bacd30c684c",
      "item": {
        "type": "paragraph",
        "id": "797d7bacd30c684c",
        "text": "Putting too much functionality into one module. This is especially bad if it's all in one file. There is no hard and fast rule as to how much is too much, but it's best if you can fit the logic of a whole module into your head at one time. Anything that can be should be split into separate files, and if any of those can be made useful in any way to any other project they should be published independently."
      },
      "date": 1362218829215
    },
    {
      "item": {
        "type": "factory",
        "id": "04022f17b7743c5f"
      },
      "id": "04022f17b7743c5f",
      "type": "add",
      "after": "797d7bacd30c684c",
      "date": 1413433998985
    },
    {
      "type": "edit",
      "id": "04022f17b7743c5f",
      "item": {
        "type": "code",
        "id": "04022f17b7743c5f",
        "text": "var foo = 'bar'"
      },
      "date": 1413434033870
    },
    {
      "type": "edit",
      "id": "04022f17b7743c5f",
      "item": {
        "type": "code",
        "id": "04022f17b7743c5f",
        "text": "function doSomething () {\n  // thing\n}\n\ndoSomething(); // <- what relation does this have to the surrounding code"
      },
      "date": 1413434146349
    },
    {
      "type": "move",
      "order": [
        "c9c847cbc05ffdeb",
        "770c0ae395c1c984",
        "16aa60eaa33b9016",
        "b55893012c50abbb",
        "04022f17b7743c5f",
        "418cd815cdb5d42f",
        "ac8e6babe4c407d6",
        "e36db4688c4deddf",
        "797d7bacd30c684c"
      ],
      "id": "04022f17b7743c5f",
      "date": 1413434156657
    },
    {
      "type": "move",
      "order": [
        "c9c847cbc05ffdeb",
        "04022f17b7743c5f",
        "770c0ae395c1c984",
        "16aa60eaa33b9016",
        "b55893012c50abbb",
        "418cd815cdb5d42f",
        "ac8e6babe4c407d6",
        "e36db4688c4deddf",
        "797d7bacd30c684c"
      ],
      "id": "04022f17b7743c5f",
      "date": 1413434160529
    },
    {
      "type": "move",
      "order": [
        "c9c847cbc05ffdeb",
        "770c0ae395c1c984",
        "04022f17b7743c5f",
        "16aa60eaa33b9016",
        "b55893012c50abbb",
        "418cd815cdb5d42f",
        "ac8e6babe4c407d6",
        "e36db4688c4deddf",
        "797d7bacd30c684c"
      ],
      "id": "04022f17b7743c5f",
      "date": 1413434168386
    },
    {
      "type": "edit",
      "id": "04022f17b7743c5f",
      "item": {
        "type": "code",
        "id": "04022f17b7743c5f",
        "text": "function doSomething () {\n  // thing\n}\n\ndoSomething(); // <- what relation does this have \n                        //       to the surrounding code"
      },
      "date": 1413434199599
    },
    {
      "type": "edit",
      "id": "04022f17b7743c5f",
      "item": {
        "type": "code",
        "id": "04022f17b7743c5f",
        "text": "function doSomething () {\n  // thing\n}\n\ndoSomething(); // <- what relation does this have \n                        //   to the surrounding code"
      },
      "date": 1413434207841
    },
    {
      "type": "edit",
      "id": "04022f17b7743c5f",
      "item": {
        "type": "code",
        "id": "04022f17b7743c5f",
        "text": "function doSomething () {\n  // thing\n}\n\ndoSomething(); // <- what relation does this have \n              //   to the surrounding code"
      },
      "date": 1413434223976
    },
    {
      "type": "edit",
      "id": "04022f17b7743c5f",
      "item": {
        "type": "code",
        "id": "04022f17b7743c5f",
        "text": "function doSomething () {\n  // thing\n}\n\ndoSomething(); // <- what relation does this have \n               //   to the surrounding code"
      },
      "date": 1413434230392
    },
    {
      "type": "edit",
      "id": "04022f17b7743c5f",
      "item": {
        "type": "code",
        "id": "04022f17b7743c5f",
        "text": "function doSomething () {\n  // thing\n}\n\ndoSomething(); // <- what relation does this have \n               //    to the surrounding code"
      },
      "date": 1413434235794
    },
    {
      "type": "edit",
      "id": "04022f17b7743c5f",
      "item": {
        "type": "code",
        "id": "04022f17b7743c5f",
        "text": "function doSomething () {\n  // thing\n}\n\ndoSomething(); // <- what relation does this have \n               //    to the surrounding code?"
      },
      "date": 1413434243318
    },
    {
      "type": "remove",
      "id": "04022f17b7743c5f",
      "date": 1413434267623
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1678777288722
    }
  ]
}