{
  "title": "Elevator Simulator Revisited",
  "story": [
    {
      "type": "paragraph",
      "id": "d1fbc454848ec248",
      "text": "I have suggested before that writing and debugging a little simulator offers considerable insight into how computer programs give meaning to calculations. After sketching a few methods at the whiteboard recently, I completed the code to discover a small version took 100 lines. [http://wiki.c2.com/?LittleSimulator wiki]"
    },
    {
      "type": "paragraph",
      "id": "b78c969d640ca2d6",
      "text": "Here elevator E takes person P to work W."
    },
    {
      "type": "html",
      "id": "6449aec9623cbd76",
      "text": "<video src=http://c2.com/wiki/elevator/elevator.mov width=420 controls> </video>\n<i>Recorded Jun 27, 2017</i>"
    },
    {
      "type": "paragraph",
      "id": "03bfd9d24d1a2796",
      "text": "My code has considerable limitations."
    },
    {
      "type": "paragraph",
      "id": "48e8a8ef4f4b71b0",
      "text": "My whiteboard version passed a hash of parameters through the queue with each event. This avoids state in globals so that there could be many elevators and riders."
    },
    {
      "type": "paragraph",
      "id": "68ddf4725c414c0c",
      "text": "I chose to busy-wait for passengers to get on and off the elevator. More intertwined logic could save cycles and expose interesting collaborations."
    },
    {
      "type": "code",
      "id": "78cb52727af3f3ce",
      "text": "# http://wiki.c2.com/?LittleSimulator\n# usage: ruby sim.rb\n\n\n# S I M U L A T O R\n\n@clock = 0\n@queue = []\n\ndef advance\n  @event = @queue.shift\n  @clock = @event[:time]\n  send @event[:action]\nend\n\ndef delay sec, action\n  @queue << {time: @clock+sec, action: action}\n  @queue = @queue.sort_by {|event| event[:time]}\nend\n\n\n# E L E V A T O R\n\n@floor = 1\n@going = +1\ndelay 1, 'move'\n\ndef move\n  @floor += @going\n  if (1..30).include? @floor+@going\n    delay 2, 'move'\n  else\n    @going = -@going\n    delay 5, 'move'\n  end\nend\n\n\n# P A S S E N G E R\n\n@at = 2\n@want = 5\ndelay 1, 'wait'\n\ndef going\n  @want <=> @at\nend\n\ndef wait\n  if @floor == @at and going == @going\n    delay 1, 'ride'\n  else\n    delay 1, 'wait'\n  end\nend\n\ndef ride\n  @at = @floor\n  if @at == @want\n    delay 60, 'work'\n  else\n    delay 1, 'ride'\n  end\nend\n\ndef work\n  @want = 1+rand(30)\n  if @at == @want\n    delay 60, 'work'\n  else\n    delay 1, 'wait'\n  end\nend\n\n\n# A N I M A T I O N\n\ndelay 0, 'frame'\n\ndef frame\n  puts @clear ||= `clear`\n  draw 'E', @floor\n  draw 'P', @at\n  draw \"W\", @want\n  puts @clock\n  delay 1, 'frame'\n  sleep 0.1\nend\n\ndef draw ch, pos\n  puts \"#{' '*pos}#{ch}\"\nend\n\n\n# M A I N\n\nwhile @clock < 1000.0\n  advance\nend\n\n"
    },
    {
      "type": "paragraph",
      "id": "376274d181872536",
      "text": "I had the simulator running for a few dozen cycles before I thought to add the character-based animation. I added the rider's going-logic after I saw the P board the E going the wrong way. It was chance that ruby's <=> operator answered the same numeric code as the elevator."
    },
    {
      "type": "paragraph",
      "id": "d27227cdd849d374",
      "text": "I was wishing I had the rather exotic animation system I built in Smalltalk many years ago. It was meant as a backend to simulators or other data feeds."
    },
    {
      "type": "paragraph",
      "id": "701cf23d87c338d4",
      "text": "See [[Animation with Captured Gestures]]"
    },
    {
      "type": "paragraph",
      "id": "441b15562bd9e860",
      "text": "I have delighted myself coding this application in the strangely continuous rule systems of Cocoa Worlds. "
    },
    {
      "type": "paragraph",
      "id": "5b4a9fdaa45659c8",
      "text": "See [[Elevator Simulator]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Elevator Simulator Revisited",
        "story": []
      },
      "date": 1498653082369
    },
    {
      "item": {
        "type": "factory",
        "id": "d1fbc454848ec248"
      },
      "id": "d1fbc454848ec248",
      "type": "add",
      "date": 1498653084915
    },
    {
      "type": "edit",
      "id": "d1fbc454848ec248",
      "item": {
        "type": "paragraph",
        "id": "d1fbc454848ec248",
        "text": "I have suggested before that writing and debugging a little simulator offers considerable insight into how computer programs give meaning to calculations. After sketching a few methods at the white board recently, I completed the code to discover it took 100 lines."
      },
      "date": 1498653388955
    },
    {
      "type": "edit",
      "id": "d1fbc454848ec248",
      "item": {
        "type": "paragraph",
        "id": "d1fbc454848ec248",
        "text": "I have suggested before that writing and debugging a little simulator offers considerable insight into how computer programs give meaning to calculations. After sketching a few methods at the white board recently, I completed the code to discover it took 100 lines. [http://wiki.c2.com/?LittleSimulator wiki]"
      },
      "date": 1498653423867
    },
    {
      "type": "add",
      "id": "441b15562bd9e860",
      "item": {
        "type": "paragraph",
        "id": "441b15562bd9e860",
        "text": "I have delighted myself coding this application in the strangely continuous rule systems of Cocoa Worlds. See [[Elevator Simulator]]"
      },
      "after": "d1fbc454848ec248",
      "date": 1498653554472
    },
    {
      "type": "edit",
      "id": "441b15562bd9e860",
      "item": {
        "type": "paragraph",
        "id": "441b15562bd9e860",
        "text": "I have delighted myself coding this application in the strangely continuous rule systems of Cocoa Worlds. "
      },
      "date": 1498653561693
    },
    {
      "type": "add",
      "id": "5b4a9fdaa45659c8",
      "item": {
        "type": "paragraph",
        "id": "5b4a9fdaa45659c8",
        "text": "See [[Elevator Simulator]]"
      },
      "after": "441b15562bd9e860",
      "date": 1498653563123
    },
    {
      "item": {
        "type": "factory",
        "id": "6449aec9623cbd76"
      },
      "id": "6449aec9623cbd76",
      "type": "add",
      "after": "5b4a9fdaa45659c8",
      "date": 1498653599578
    },
    {
      "type": "edit",
      "id": "6449aec9623cbd76",
      "item": {
        "type": "html",
        "id": "6449aec9623cbd76",
        "text": "<video src=http://c2.com/wiki/elevator/elevator.mov width=420 controls> </video>\n<i>Recorded Jun 27, 2017</i>"
      },
      "date": 1498653785175
    },
    {
      "type": "move",
      "order": [
        "d1fbc454848ec248",
        "6449aec9623cbd76",
        "441b15562bd9e860",
        "5b4a9fdaa45659c8"
      ],
      "id": "6449aec9623cbd76",
      "date": 1498653809039
    },
    {
      "type": "add",
      "id": "b78c969d640ca2d6",
      "item": {
        "type": "paragraph",
        "id": "b78c969d640ca2d6",
        "text": "Here elevator E takes person P to work W."
      },
      "after": "d1fbc454848ec248",
      "date": 1498653885564
    },
    {
      "type": "add",
      "id": "03bfd9d24d1a2796",
      "item": {
        "type": "paragraph",
        "id": "03bfd9d24d1a2796",
        "text": "My code has considerable limitations."
      },
      "after": "441b15562bd9e860",
      "date": 1498654200458
    },
    {
      "type": "move",
      "order": [
        "d1fbc454848ec248",
        "b78c969d640ca2d6",
        "6449aec9623cbd76",
        "03bfd9d24d1a2796",
        "441b15562bd9e860",
        "5b4a9fdaa45659c8"
      ],
      "id": "03bfd9d24d1a2796",
      "date": 1498654204021
    },
    {
      "type": "add",
      "id": "48e8a8ef4f4b71b0",
      "item": {
        "type": "paragraph",
        "id": "48e8a8ef4f4b71b0",
        "text": "My whiteboard version passed a hash of parameters through the queue with each event. This avoids state in globals so that there could be many elevators and many riders."
      },
      "after": "03bfd9d24d1a2796",
      "date": 1498654338912
    },
    {
      "type": "edit",
      "id": "48e8a8ef4f4b71b0",
      "item": {
        "type": "paragraph",
        "id": "48e8a8ef4f4b71b0",
        "text": "My whiteboard version passed a hash of parameters through the queue with each event. This avoids state in globals so that there could be many elevators and riders."
      },
      "date": 1498654364020
    },
    {
      "type": "add",
      "id": "68ddf4725c414c0c",
      "item": {
        "type": "paragraph",
        "id": "68ddf4725c414c0c",
        "text": "I chose to busy-wait for passengers to get on and off the elevator. More intertwined logic could save cycles and expose interesting collaborations."
      },
      "after": "48e8a8ef4f4b71b0",
      "date": 1498654761671
    },
    {
      "item": {
        "type": "factory",
        "id": "78cb52727af3f3ce"
      },
      "id": "78cb52727af3f3ce",
      "type": "add",
      "after": "5b4a9fdaa45659c8",
      "date": 1498654867944
    },
    {
      "type": "move",
      "order": [
        "d1fbc454848ec248",
        "b78c969d640ca2d6",
        "6449aec9623cbd76",
        "03bfd9d24d1a2796",
        "48e8a8ef4f4b71b0",
        "68ddf4725c414c0c",
        "78cb52727af3f3ce",
        "441b15562bd9e860",
        "5b4a9fdaa45659c8"
      ],
      "id": "78cb52727af3f3ce",
      "date": 1498654872862
    },
    {
      "type": "edit",
      "id": "78cb52727af3f3ce",
      "item": {
        "type": "code",
        "id": "78cb52727af3f3ce",
        "text": "# http://wiki.c2.com/?LittleSimulator\n# usage: ruby sim.rb\n\n\n# S I M U L A T O R\n\n@clock = 0\n@queue = []\n\ndef advance\n  @event = @queue.shift\n  @clock = @event[:time]\n  send @event[:action]\nend\n\ndef delay sec, action\n  @queue << {time: @clock+sec, action: action}\n  @queue = @queue.sort_by {|event| event[:time]}\nend\n\n\n# E L E V A T O R\n\n@floor = 1\n@going = +1\ndelay 1, 'move'\n\ndef move\n  @floor += @going\n  if (1..30).include? @floor+@going\n    delay 2, 'move'\n  else\n    @going = -@going\n    delay 5, 'move'\n  end\nend\n\n\n# P A S S E N G E R\n\n@at = 2\n@want = 5\ndelay 1, 'wait'\n\ndef going\n  @want <=> @at\nend\n\ndef wait\n  if @floor == @at and going == @going\n    delay 1, 'ride'\n  else\n    delay 1, 'wait'\n  end\nend\n\ndef ride\n  @at = @floor\n  if @at == @want\n    delay 60, 'work'\n  else\n    delay 1, 'ride'\n  end\nend\n\ndef work\n  @want = 1+rand(30)\n  if @at == @want\n    delay 60, 'work'\n  else\n    delay 1, 'wait'\n  end\nend\n\n\n# A N I M A T I O N\n\ndelay 0, 'frame'\n\ndef frame\n  puts @clear ||= `clear`\n  draw 'E', @floor\n  draw 'P', @at\n  draw \"W\", @want\n  puts @clock\n  delay 1, 'frame'\n  sleep 0.1\nend\n\ndef draw ch, pos\n  puts \"#{' '*pos}#{ch}\"\nend\n\n\n# M A I N\n\nwhile @clock < 1000.0\n  advance\nend\n\n"
      },
      "date": 1498654878845
    },
    {
      "type": "add",
      "id": "376274d181872536",
      "item": {
        "type": "paragraph",
        "id": "376274d181872536",
        "text": "I had the simulator running for a few dozen cycles before I thought to add the character-based animation. I added the rider's going-logic after I saw the P board the E going the wrong way."
      },
      "after": "441b15562bd9e860",
      "date": 1498655097493
    },
    {
      "type": "move",
      "order": [
        "d1fbc454848ec248",
        "b78c969d640ca2d6",
        "6449aec9623cbd76",
        "03bfd9d24d1a2796",
        "48e8a8ef4f4b71b0",
        "68ddf4725c414c0c",
        "78cb52727af3f3ce",
        "376274d181872536",
        "441b15562bd9e860",
        "5b4a9fdaa45659c8"
      ],
      "id": "376274d181872536",
      "date": 1498655105700
    },
    {
      "type": "add",
      "id": "d27227cdd849d374",
      "item": {
        "type": "paragraph",
        "id": "d27227cdd849d374",
        "text": "I was wishing I had the rather exotic animation system I built in Smalltalk many years ago. It was meant as a backend to simulators or other data feeds."
      },
      "after": "376274d181872536",
      "date": 1498655324938
    },
    {
      "type": "add",
      "id": "701cf23d87c338d4",
      "item": {
        "type": "paragraph",
        "id": "701cf23d87c338d4",
        "text": "See [[Animation with Captured Gestures]]"
      },
      "after": "d27227cdd849d374",
      "date": 1498655331160
    },
    {
      "item": {
        "type": "factory",
        "id": "6574eadc6e5a83aa"
      },
      "id": "6574eadc6e5a83aa",
      "type": "add",
      "after": "5b4a9fdaa45659c8",
      "date": 1498655338251
    },
    {
      "type": "edit",
      "id": "6574eadc6e5a83aa",
      "item": {
        "type": "pagefold",
        "id": "6574eadc6e5a83aa",
        "text": "."
      },
      "date": 1498655342832
    },
    {
      "type": "move",
      "order": [
        "d1fbc454848ec248",
        "b78c969d640ca2d6",
        "6449aec9623cbd76",
        "03bfd9d24d1a2796",
        "48e8a8ef4f4b71b0",
        "68ddf4725c414c0c",
        "78cb52727af3f3ce",
        "376274d181872536",
        "6574eadc6e5a83aa",
        "d27227cdd849d374",
        "701cf23d87c338d4",
        "441b15562bd9e860",
        "5b4a9fdaa45659c8"
      ],
      "id": "6574eadc6e5a83aa",
      "date": 1498655349463
    },
    {
      "type": "remove",
      "id": "6574eadc6e5a83aa",
      "date": 1498655453596
    },
    {
      "type": "edit",
      "id": "376274d181872536",
      "item": {
        "type": "paragraph",
        "id": "376274d181872536",
        "text": "I had the simulator running for a few dozen cycles before I thought to add the character-based animation. I added the rider's going-logic after I saw the P board the E going the wrong way. It was chance that ruby's <=> operator answered in the same code I used for the elevator."
      },
      "date": 1498655935848
    },
    {
      "type": "edit",
      "id": "376274d181872536",
      "item": {
        "type": "paragraph",
        "id": "376274d181872536",
        "text": "I had the simulator running for a few dozen cycles before I thought to add the character-based animation. I added the rider's going-logic after I saw the P board the E going the wrong way. It was chance that ruby's <=> operator answered in the same numeric code I used for the elevator."
      },
      "date": 1498656282677
    },
    {
      "type": "edit",
      "id": "376274d181872536",
      "item": {
        "type": "paragraph",
        "id": "376274d181872536",
        "text": "I had the simulator running for a few dozen cycles before I thought to add the character-based animation. I added the rider's going-logic after I saw the P board the E going the wrong way. It was chance that ruby's <=> operator answered the same numeric code I used for the elevator."
      },
      "date": 1498656301321
    },
    {
      "type": "edit",
      "id": "376274d181872536",
      "item": {
        "type": "paragraph",
        "id": "376274d181872536",
        "text": "I had the simulator running for a few dozen cycles before I thought to add the character-based animation. I added the rider's going-logic after I saw the P board the E going the wrong way. It was chance that ruby's <=> operator answered the same numeric code as the elevator."
      },
      "date": 1498656321341
    },
    {
      "type": "fork",
      "date": 1498656546131
    },
    {
      "type": "edit",
      "id": "d1fbc454848ec248",
      "item": {
        "type": "paragraph",
        "id": "d1fbc454848ec248",
        "text": "I have suggested before that writing and debugging a little simulator offers considerable insight into how computer programs give meaning to calculations. After sketching a few methods at the whiteboard recently, I completed the code to discover it took 100 lines. [http://wiki.c2.com/?LittleSimulator wiki]"
      },
      "date": 1498656693881
    },
    {
      "type": "edit",
      "id": "d1fbc454848ec248",
      "item": {
        "type": "paragraph",
        "id": "d1fbc454848ec248",
        "text": "I have suggested before that writing and debugging a little simulator offers considerable insight into how computer programs give meaning to calculations. After sketching a few methods at the whiteboard recently, I completed the code to discover a small simulator took 100 lines. [http://wiki.c2.com/?LittleSimulator wiki]"
      },
      "date": 1498656733266
    },
    {
      "type": "edit",
      "id": "d1fbc454848ec248",
      "item": {
        "type": "paragraph",
        "id": "d1fbc454848ec248",
        "text": "I have suggested before that writing and debugging a little simulator offers considerable insight into how computer programs give meaning to calculations. After sketching a few methods at the whiteboard recently, I completed the code to discover a small version took 100 lines. [http://wiki.c2.com/?LittleSimulator wiki]"
      },
      "date": 1498656754143
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1627474903092
    }
  ]
}