{
  "title": "The Map to Logic",
  "story": [
    {
      "type": "markdown",
      "id": "ffad7052b5c6f8b1",
      "text": "The partitions of Mark-Arithmetic I, `{(),()()}/{(())}`, assert the *Call* rule `()=()()`; idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. \n"
    },
    {
      "type": "code",
      "id": "3fc40d2082fc0580",
      "text": "f       void\nt       ( )\n¬A      (A)\nA → B   (A) B\nA ∨ B    A  B\nA ∧ B  ((A)(B))"
    },
    {
      "type": "markdown",
      "id": "14d1dc15d5a1114b",
      "text": "Spencer Brown's innovation was to equate `(())` with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The *Cross* rule generalizes to algebra as both  *Occlusion*, which terminates proofs, and *Involution*, which enforces depth parity.\n"
    },
    {
      "type": "code",
      "id": "92266135b2dc5392",
      "text": "CALL           ()() = () \nCROSS          (()) = void \nOCCLUSION    (A ()) = void \nINVOLUTION    ((A)) = A \nPERVASION   A {A B} = A {B}"
    },
    {
      "type": "markdown",
      "id": "ed4173a0831f8ce0",
      "text": "⇒ [[Pervasion]]"
    },
    {
      "type": "pagefold",
      "id": "3cec103a77e12e7b",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "e5677b0428466e69",
      "text": "idempotency ⇒ [[Idempotence]]: […] in the words of [[George Boole]], who explains his figure-like law of idempotence (\" x x = x \") as follows:"
    },
    {
      "type": "markdown",
      "id": "f074bc8bf6404c5c",
      "text": "> The case supposed [...] is that of *absolute* identity of meaning. The law which it expresses is practically exemplified in language. To say „good, good“ in relation to any subject, though a cumbrous and useless pleonasm, is the same as to say „good“. Thus „good, good“ men, is equivalent to „good“ men. Such repetitions of words are indeed sometimes employed to heighten a quality or strengthen an affirmation. But this effect is merely secondary and conventional; it is not founded in the intrinsic relations of language and thought.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "The Map to Logic",
        "story": []
      },
      "date": 1660280295822
    },
    {
      "item": {
        "type": "factory",
        "id": "ffad7052b5c6f8b1"
      },
      "id": "ffad7052b5c6f8b1",
      "type": "add",
      "date": 1660280312775
    },
    {
      "type": "edit",
      "id": "ffad7052b5c6f8b1",
      "item": {
        "type": "paragraph",
        "id": "ffad7052b5c6f8b1",
        "text": "The partitions of Mark-Arithmetic I, {(),()()}/{(())}, assert the Call rule ()=()(); idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. Spencer Brown's innovation was to equate (()) with nothing"
      },
      "date": 1660280316058
    },
    {
      "type": "edit",
      "id": "ffad7052b5c6f8b1",
      "item": {
        "type": "paragraph",
        "id": "ffad7052b5c6f8b1",
        "text": "The partitions of Mark-Arithmetic I, {(),()()}/{(())}, assert the Call rule ()=()(); idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. Spencer Brown's innovation was to equate (()) with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The Cross rule generalizes to algebra as both  Occlusion, which terminates proofs, and Involution, which enforces depth parity\n\n> t ( )\n¬A (A)\nA→B (A) B\nA ∨ B A B\nA ∧ B ((A)(B))"
      },
      "date": 1660280503359
    },
    {
      "type": "edit",
      "id": "ffad7052b5c6f8b1",
      "item": {
        "type": "paragraph",
        "id": "ffad7052b5c6f8b1",
        "text": "The partitions of Mark-Arithmetic I, {(),()()}/{(())}, assert the Call rule ()=()(); idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. Spencer Brown's innovation was to equate (()) with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The Cross rule generalizes to algebra as both  Occlusion, which terminates proofs, and Involution, which enforces depth parity\n"
      },
      "date": 1660280522510
    },
    {
      "type": "add",
      "id": "3efaa044292077ad",
      "item": {
        "type": "paragraph",
        "id": "3efaa044292077ad",
        "text": "> t ( )\n¬A (A)\nA→B (A) B\nA ∨ B A B\nA ∧ B ((A)(B))"
      },
      "after": "ffad7052b5c6f8b1",
      "date": 1660280523212
    },
    {
      "type": "edit",
      "id": "3efaa044292077ad",
      "item": {
        "type": "markdown",
        "id": "3efaa044292077ad",
        "text": "> t ( )\n¬A (A)\nA→B (A) B\nA ∨ B A B\nA ∧ B ((A)(B))"
      },
      "date": 1660280524803
    },
    {
      "type": "edit",
      "id": "3efaa044292077ad",
      "item": {
        "type": "markdown",
        "id": "3efaa044292077ad",
        "text": "> f void\nt ( )\n¬A (A)\nA→B (A) B\nA ∨ B A B\nA ∧ B ((A)(B))"
      },
      "date": 1660280536783
    },
    {
      "type": "edit",
      "id": "3efaa044292077ad",
      "item": {
        "type": "markdown",
        "id": "3efaa044292077ad",
        "text": "> f   void\nt   ( )\n¬A   (A)\nA→B   (A) B\nA ∨ B   A B\nA ∧ B (  (A)(B))"
      },
      "date": 1660280569642
    },
    {
      "item": {
        "type": "factory",
        "id": "3fc40d2082fc0580"
      },
      "id": "3fc40d2082fc0580",
      "type": "add",
      "after": "3efaa044292077ad",
      "date": 1660280585323
    },
    {
      "type": "edit",
      "id": "3fc40d2082fc0580",
      "item": {
        "type": "code",
        "id": "3fc40d2082fc0580",
        "text": "f   void\nt   ( )\n¬A   (A)\nA→B   (A) B\nA ∨ B   A B\nA ∧ B (  (A)(B))"
      },
      "date": 1660280591154
    },
    {
      "type": "remove",
      "id": "3efaa044292077ad",
      "date": 1660280599827
    },
    {
      "type": "edit",
      "id": "3fc40d2082fc0580",
      "item": {
        "type": "code",
        "id": "3fc40d2082fc0580",
        "text": "f       void\nt       ( )\n¬A      (A)\nA→B     (A) B\nA ∨ B   A B\nA ∧ B   ((A)(B))"
      },
      "date": 1660280624725
    },
    {
      "type": "edit",
      "id": "3fc40d2082fc0580",
      "item": {
        "type": "code",
        "id": "3fc40d2082fc0580",
        "text": "f       void\nt       ( )\n¬A      (A)\nA→B     (A) B\nA ∨ B    A  B\nA ∧ B   ((A)(B))"
      },
      "date": 1660280648634
    },
    {
      "type": "edit",
      "id": "3fc40d2082fc0580",
      "item": {
        "type": "code",
        "id": "3fc40d2082fc0580",
        "text": "f       void\nt       ( )\n¬A      (A)\nA → B   (A) B\nA ∨ B    A  B\nA ∧ B   ((A)(B))"
      },
      "date": 1660280677680
    },
    {
      "type": "edit",
      "id": "3fc40d2082fc0580",
      "item": {
        "type": "code",
        "id": "3fc40d2082fc0580",
        "text": "f       void\nt       ( )\n¬A      (A)\nA → B   (A) B\nA ∨ B    A  B\nA ∧ B  ((A)(B))"
      },
      "date": 1660280690500
    },
    {
      "type": "edit",
      "id": "ffad7052b5c6f8b1",
      "item": {
        "type": "paragraph",
        "id": "ffad7052b5c6f8b1",
        "text": "The partitions of Mark-Arithmetic I, `{(),()()}/{(())}`, assert the Call rule `()=()()`; idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. Spencer Brown's innovation was to equate (()) with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The Cross rule generalizes to algebra as both  Occlusion, which terminates proofs, and Involution, which enforces depth parity\n"
      },
      "date": 1660280785511
    },
    {
      "type": "edit",
      "id": "ffad7052b5c6f8b1",
      "item": {
        "type": "markdown",
        "id": "ffad7052b5c6f8b1",
        "text": "The partitions of Mark-Arithmetic I, `{(),()()}/{(())}`, assert the Call rule `()=()()`; idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. Spencer Brown's innovation was to equate (()) with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The Cross rule generalizes to algebra as both  Occlusion, which terminates proofs, and Involution, which enforces depth parity\n"
      },
      "date": 1660280786842
    },
    {
      "type": "edit",
      "id": "ffad7052b5c6f8b1",
      "item": {
        "type": "markdown",
        "id": "ffad7052b5c6f8b1",
        "text": "The partitions of Mark-Arithmetic I, `{(),()()}/{(())}`, assert the Call rule `()=()()`; idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. Spencer Brown's innovation was to equate `(())` with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The Cross rule generalizes to algebra as both  Occlusion, which terminates proofs, and Involution, which enforces depth parity\n"
      },
      "date": 1660280839482
    },
    {
      "type": "edit",
      "id": "ffad7052b5c6f8b1",
      "item": {
        "type": "markdown",
        "id": "ffad7052b5c6f8b1",
        "text": "The partitions of Mark-Arithmetic I, `{(),()()}/{(())}`, assert the *Call* rule `()=()()`; idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. Spencer Brown's innovation was to equate `(())` with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The *Cross* rule generalizes to algebra as both  Occlusion, which terminates proofs, and Involution, which enforces depth parity\n"
      },
      "date": 1660280922518
    },
    {
      "type": "edit",
      "id": "ffad7052b5c6f8b1",
      "item": {
        "type": "markdown",
        "id": "ffad7052b5c6f8b1",
        "text": "The partitions of Mark-Arithmetic I, `{(),()()}/{(())}`, assert the *Call* rule `()=()()`; idempotency is the primary differentiator between logic and numerics. The mark is TRUE, while forms SHARING a space are interpreted as joined by disjunction. BOUNDING is negation. \n"
      },
      "date": 1660280960713
    },
    {
      "type": "add",
      "id": "14d1dc15d5a1114b",
      "item": {
        "type": "markdown",
        "id": "14d1dc15d5a1114b",
        "text": "Spencer Brown's innovation was to equate `(())` with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The *Cross* rule generalizes to algebra as both  Occlusion, which terminates proofs, and Involution, which enforces depth parity\n"
      },
      "after": "ffad7052b5c6f8b1",
      "date": 1660280963279
    },
    {
      "id": "3fc40d2082fc0580",
      "type": "move",
      "order": [
        "ffad7052b5c6f8b1",
        "3fc40d2082fc0580",
        "14d1dc15d5a1114b"
      ],
      "date": 1660280965192
    },
    {
      "type": "edit",
      "id": "14d1dc15d5a1114b",
      "item": {
        "type": "markdown",
        "id": "14d1dc15d5a1114b",
        "text": "Spencer Brown's innovation was to equate `(())` with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The *Cross* rule generalizes to algebra as both  *Occlusion*, which terminates proofs, and *Involution*, which enforces depth parity.\n"
      },
      "date": 1660281030712
    },
    {
      "type": "edit",
      "id": "14d1dc15d5a1114b",
      "item": {
        "type": "markdown",
        "id": "14d1dc15d5a1114b",
        "text": "Spencer Brown's innovation was to equate `(())` with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The *Cross* rule generalizes to algebra as both  *Occlusion*, which terminates proofs, and *Involution*, which enforces depth parity.\n\n[[Pervasion]]"
      },
      "date": 1660281051256
    },
    {
      "type": "edit",
      "id": "14d1dc15d5a1114b",
      "item": {
        "type": "markdown",
        "id": "14d1dc15d5a1114b",
        "text": "Spencer Brown's innovation was to equate `(())` with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The *Cross* rule generalizes to algebra as both  *Occlusion*, which terminates proofs, and *Involution*, which enforces depth parity.\n"
      },
      "date": 1660281080193
    },
    {
      "type": "edit",
      "id": "14d1dc15d5a1114b",
      "item": {
        "type": "markdown",
        "id": "14d1dc15d5a1114b",
        "text": "Spencer Brown's innovation was to equate `(())` with nothing at all, that is, with the contents of the dotted frame prior to drawing the first mark. This created two Boolean equivalence  classes while using only one symbol. Truth is confounded  with existence, a capability unique to the spatial structure of the mark. The *Cross* rule generalizes to algebra as both  *Occlusion*, which terminates proofs, and *Involution*, which enforces depth parity.\n"
      },
      "date": 1660281199777
    },
    {
      "item": {
        "type": "code",
        "id": "92266135b2dc5392",
        "text": "CALL           ()() = () \nCROSS          (()) = void \nOCCLUSION    (A ()) = void \nINVOLUTION    ((A)) = A \nPERVASION   A {A B} = A {B}"
      },
      "id": "92266135b2dc5392",
      "type": "add",
      "after": "ed4173a0831f8ce0",
      "date": 1660281203715
    },
    {
      "id": "92266135b2dc5392",
      "type": "move",
      "order": [
        "ffad7052b5c6f8b1",
        "3fc40d2082fc0580",
        "14d1dc15d5a1114b",
        "92266135b2dc5392",
        "ed4173a0831f8ce0"
      ],
      "date": 1660281208548,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "ed4173a0831f8ce0",
      "item": {
        "type": "markdown",
        "id": "ed4173a0831f8ce0",
        "text": "⇒ [[Pervasion]]"
      },
      "after": "14d1dc15d5a1114b",
      "date": 1660281209849
    },
    {
      "type": "edit",
      "id": "92266135b2dc5392",
      "item": {
        "type": "code",
        "id": "92266135b2dc5392",
        "text": "CALL           ()() = () \nCROSS          (()) = void \nOCCLUSION    (A ()) = void \nINVOLUTION    ((A)) = A \nPERVASION   A {A B} = A {B}"
      },
      "date": 1660281246877
    },
    {
      "type": "fork",
      "date": 1660281248380
    },
    {
      "item": {
        "type": "factory",
        "id": "3cec103a77e12e7b"
      },
      "id": "3cec103a77e12e7b",
      "type": "add",
      "after": "ed4173a0831f8ce0",
      "date": 1660281439805
    },
    {
      "type": "edit",
      "id": "3cec103a77e12e7b",
      "item": {
        "type": "pagefold",
        "id": "3cec103a77e12e7b",
        "text": "~"
      },
      "date": 1660281443401
    },
    {
      "item": {
        "type": "factory",
        "id": "e5677b0428466e69"
      },
      "id": "e5677b0428466e69",
      "type": "add",
      "after": "3cec103a77e12e7b",
      "date": 1660281470281
    },
    {
      "type": "edit",
      "id": "e5677b0428466e69",
      "item": {
        "type": "paragraph",
        "id": "e5677b0428466e69",
        "text": "Idempotence: "
      },
      "date": 1660281474572
    },
    {
      "type": "edit",
      "id": "e5677b0428466e69",
      "item": {
        "type": "paragraph",
        "id": "e5677b0428466e69",
        "text": "Idempotence: […] in the words of George Boole, who explains his figure-like law of idempotence (\" x x = x \") as follows (Boole 2005: 22 f.):"
      },
      "date": 1660281511342
    },
    {
      "item": {
        "type": "factory",
        "id": "f074bc8bf6404c5c"
      },
      "id": "f074bc8bf6404c5c",
      "type": "add",
      "after": "e5677b0428466e69",
      "date": 1660281524106
    },
    {
      "type": "edit",
      "id": "f074bc8bf6404c5c",
      "item": {
        "type": "markdown",
        "id": "f074bc8bf6404c5c",
        "text": "> The case supposed [...] is that of absolute identity of meaning. The law which it expresses is practically exemplified in language. To say „good, good“ in re- lation to any subject, though a cumbrous and useless pleonasm, is the same as to say „good“. Thus „good, good“ men, is equivalent to „good“ men. Such repetitions of words are indeed sometimes employed to heighten a quality or strengthen an affirmation. But this effect is merely secondary and conven- tional; it is not founded in the intrinsic relations of language and thought.\n"
      },
      "date": 1660281527273
    },
    {
      "type": "edit",
      "id": "f074bc8bf6404c5c",
      "item": {
        "type": "markdown",
        "id": "f074bc8bf6404c5c",
        "text": "> The case supposed [...] is that of *absolute* identity of meaning. The law which it expresses is practically exemplified in language. To say „good, good“ in re- lation to any subject, though a cumbrous and useless pleonasm, is the same as to say „good“. Thus „good, good“ men, is equivalent to „good“ men. Such repetitions of words are indeed sometimes employed to heighten a quality or strengthen an affirmation. But this effect is merely secondary and conven- tional; it is not founded in the intrinsic relations of language and thought.\n"
      },
      "date": 1660281586911
    },
    {
      "type": "edit",
      "id": "e5677b0428466e69",
      "item": {
        "type": "paragraph",
        "id": "e5677b0428466e69",
        "text": "idempotency Idempotence: […] in the words of George Boole, who explains his figure-like law of idempotence (\" x x = x \") as follows (Boole 2005: 22 f.):"
      },
      "date": 1660281611795
    },
    {
      "type": "edit",
      "id": "e5677b0428466e69",
      "item": {
        "type": "paragraph",
        "id": "e5677b0428466e69",
        "text": "idempotency ⇒ [[Idempotence]]: […] in the words of George Boole, who explains his figure-like law of idempotence (\" x x = x \") as follows (Boole 2005: 22 f.):"
      },
      "date": 1660281621921
    },
    {
      "type": "edit",
      "id": "e5677b0428466e69",
      "item": {
        "type": "paragraph",
        "id": "e5677b0428466e69",
        "text": "idempotency ⇒ [[Idempotence]]: […] in the words of [[George Boole]], who explains his figure-like law of idempotence (\" `x x = x` \") as follows (Boole 2005: 22 f.):"
      },
      "date": 1660281673851
    },
    {
      "type": "edit",
      "id": "e5677b0428466e69",
      "item": {
        "type": "markdown",
        "id": "e5677b0428466e69",
        "text": "idempotency ⇒ [[Idempotence]]: […] in the words of [[George Boole]], who explains his figure-like law of idempotence (\" `x x = x` \") as follows (Boole 2005: 22 f.):"
      },
      "date": 1660281675185
    },
    {
      "type": "edit",
      "id": "e5677b0428466e69",
      "item": {
        "type": "markdown",
        "id": "e5677b0428466e69",
        "text": "idempotency ⇒ [[Idempotence]]: […] in the words of [[George Boole]], who explains his figure-like law of idempotence (\" x x = x \") as follows (Boole 2005: 22 f.):"
      },
      "date": 1660281693624
    },
    {
      "type": "edit",
      "id": "e5677b0428466e69",
      "item": {
        "type": "markdown",
        "id": "e5677b0428466e69",
        "text": "idempotency ⇒ [[Idempotence]]: […] in the words of [[George Boole]], who explains his figure-like law of idempotence (\" x x = x \") as follows:"
      },
      "date": 1660281720072
    },
    {
      "type": "edit",
      "id": "f074bc8bf6404c5c",
      "item": {
        "type": "markdown",
        "id": "f074bc8bf6404c5c",
        "text": "> The case supposed [...] is that of *absolute* identity of meaning. The law which it expresses is practically exemplified in language. To say „good, good“ in relation to any subject, though a cumbrous and useless pleonasm, is the same as to say „good“. Thus „good, good“ men, is equivalent to „good“ men. Such repetitions of words are indeed sometimes employed to heighten a quality or strengthen an affirmation. But this effect is merely secondary and conven- tional; it is not founded in the intrinsic relations of language and thought.\n"
      },
      "date": 1660281739104
    },
    {
      "type": "edit",
      "id": "f074bc8bf6404c5c",
      "item": {
        "type": "markdown",
        "id": "f074bc8bf6404c5c",
        "text": "> The case supposed [...] is that of *absolute* identity of meaning. The law which it expresses is practically exemplified in language. To say „good, good“ in relation to any subject, though a cumbrous and useless pleonasm, is the same as to say „good“. Thus „good, good“ men, is equivalent to „good“ men. Such repetitions of words are indeed sometimes employed to heighten a quality or strengthen an affirmation. But this effect is merely secondary and conventional; it is not founded in the intrinsic relations of language and thought.\n"
      },
      "date": 1660281766236
    },
    {
      "id": "92266135b2dc5392",
      "type": "move",
      "order": [
        "ffad7052b5c6f8b1",
        "3fc40d2082fc0580",
        "14d1dc15d5a1114b",
        "92266135b2dc5392",
        "ed4173a0831f8ce0",
        "3cec103a77e12e7b",
        "e5677b0428466e69",
        "f074bc8bf6404c5c"
      ],
      "date": 1660281774898
    }
  ]
}