{
  "title": "Workspace Unit",
  "story": [
    {
      "type": "paragraph",
      "id": "83a6837d8e636b55",
      "text": "[[Unit]] is a General Purpose Visual Programming Language and Environment built with a primary focus on Developer Experience."
    },
    {
      "type": "paragraph",
      "id": "6ea9146a47d68cd3",
      "text": "unit.tools [https://unit.tools/ site] is a [[Marketplace]] to explore, collect and play with live visual programs built in Unit."
    },
    {
      "type": "paragraph",
      "id": "aaabdf609801441a",
      "text": "We download 4 tools (see assets)."
    },
    {
      "type": "paragraph",
      "id": "2af249d670a0c342",
      "text": "We could drag and drop these tools ([[JSON]] files) into a running Unit app."
    },
    {
      "type": "video",
      "id": "20f914508ae61e2d",
      "text": "HTML5 mp4 http://localhost:3000/assets/pages/workspace-unit/unit-drag-and-drop-tools.mov\nunit-drag-and-drop-tools"
    },
    {
      "type": "paragraph",
      "id": "4359ba8daec9766b",
      "text": "localStorage set"
    },
    {
      "type": "video",
      "id": "309f5e245cb51d14",
      "text": "START 401\nEND 489\nYOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
    },
    {
      "type": "paragraph",
      "id": "803baadf940cad31",
      "text": "if you keep looking for input you can find text input and so text input I tried playing around with this"
    },
    {
      "type": "paragraph",
      "id": "c4dff2123008e15b",
      "text": "Note: We use \"editable field\" instead of \"text input\""
    },
    {
      "type": "paragraph",
      "id": "3c01f946f2760b6b",
      "text": "and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch"
    },
    {
      "type": "paragraph",
      "id": "5d80e558d41d34a0",
      "text": "the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data"
    },
    {
      "type": "paragraph",
      "id": "7762efde628fe81d",
      "text": "and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World"
    },
    {
      "type": "video",
      "id": "6956510d32937e3a",
      "text": "HTML5 mp4 http://localhost:3000/assets/pages/workspace-unit/unit-foo-barkow.mov\nfoo barkow"
    },
    {
      "type": "paragraph",
      "id": "1deaae18a117034c",
      "text": "Note the chain – barkow, editable field, watch input, set, local storage – flashed yellow"
    },
    {
      "type": "markdown",
      "id": "598b5eb17fe1c38d",
      "text": "# Assets"
    },
    {
      "type": "assets",
      "id": "b4e564755bb0767a",
      "text": "pages/workspace-unit"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Workspace Unit",
        "story": []
      },
      "date": 1711818404633
    },
    {
      "item": {
        "type": "factory",
        "id": "83a6837d8e636b55"
      },
      "id": "83a6837d8e636b55",
      "type": "add",
      "date": 1711818411519
    },
    {
      "item": {
        "type": "factory",
        "id": "b4e564755bb0767a"
      },
      "id": "b4e564755bb0767a",
      "type": "add",
      "after": "83a6837d8e636b55",
      "date": 1711818413187
    },
    {
      "type": "edit",
      "id": "b4e564755bb0767a",
      "item": {
        "type": "assets",
        "id": "b4e564755bb0767a",
        "text": "pages/workspace-unit"
      },
      "date": 1711818417898
    },
    {
      "type": "edit",
      "id": "83a6837d8e636b55",
      "item": {
        "type": "paragraph",
        "id": "83a6837d8e636b55",
        "text": "[[Unit]] is a General Purpose Visual Programming Language and Environment built with a primary focus on Developer Experience."
      },
      "date": 1711818590869
    },
    {
      "type": "add",
      "id": "6ea9146a47d68cd3",
      "item": {
        "type": "paragraph",
        "id": "6ea9146a47d68cd3",
        "text": "unit.tools\nMarketplace to explore, collect and play with live visual programs built in Unit."
      },
      "after": "83a6837d8e636b55",
      "date": 1711818828086
    },
    {
      "type": "edit",
      "id": "6ea9146a47d68cd3",
      "item": {
        "type": "paragraph",
        "id": "6ea9146a47d68cd3",
        "text": "unit.tools \nMarketplace to explore, collect and play with live visual programs built in Unit."
      },
      "date": 1711818840060
    },
    {
      "type": "edit",
      "id": "6ea9146a47d68cd3",
      "item": {
        "type": "paragraph",
        "id": "6ea9146a47d68cd3",
        "text": "unit.tools [https://unit.tools/ site] is a \n[[Marketplace]] to explore, collect and play with live visual programs built in Unit."
      },
      "date": 1711818861057
    },
    {
      "type": "edit",
      "id": "6ea9146a47d68cd3",
      "item": {
        "type": "paragraph",
        "id": "6ea9146a47d68cd3",
        "text": "unit.tools [https://unit.tools/ site] is a [[Marketplace]] to explore, collect and play with live visual programs built in Unit."
      },
      "date": 1711818871776
    },
    {
      "type": "add",
      "id": "aaabdf609801441a",
      "item": {
        "type": "paragraph",
        "id": "aaabdf609801441a",
        "text": "We download 4 tools (see assets)."
      },
      "after": "6ea9146a47d68cd3",
      "date": 1711819319965
    },
    {
      "type": "add",
      "id": "598b5eb17fe1c38d",
      "item": {
        "type": "paragraph",
        "id": "598b5eb17fe1c38d",
        "text": "# Assets"
      },
      "after": "aaabdf609801441a",
      "date": 1711819368877
    },
    {
      "type": "edit",
      "id": "598b5eb17fe1c38d",
      "item": {
        "type": "markdown",
        "id": "598b5eb17fe1c38d",
        "text": "# Assets"
      },
      "date": 1711819370437
    },
    {
      "type": "add",
      "id": "2af249d670a0c342",
      "item": {
        "type": "paragraph",
        "id": "2af249d670a0c342",
        "text": "We could drag and drop these tools (JSON files) into a running Unit app."
      },
      "after": "aaabdf609801441a",
      "date": 1711819472302
    },
    {
      "item": {
        "type": "factory",
        "id": "20f914508ae61e2d"
      },
      "id": "20f914508ae61e2d",
      "type": "add",
      "after": "b4e564755bb0767a",
      "date": 1711819898665
    },
    {
      "type": "edit",
      "id": "20f914508ae61e2d",
      "item": {
        "type": "video",
        "id": "20f914508ae61e2d",
        "text": "HTML5 mp4 http://localhost:3000/assets/pages/workspace-unit/unit-drag-and-drop-tools.mov"
      },
      "date": 1711819905971
    },
    {
      "type": "edit",
      "id": "20f914508ae61e2d",
      "item": {
        "type": "video",
        "id": "20f914508ae61e2d",
        "text": "HTML5 mp4 http://localhost:3000/assets/pages/workspace-unit/unit-drag-and-drop-tools.mov\nunit-drag-and-drop-tools"
      },
      "date": 1711819963069
    },
    {
      "type": "edit",
      "id": "2af249d670a0c342",
      "item": {
        "type": "paragraph",
        "id": "2af249d670a0c342",
        "text": "We could drag and drop these tools ([[JSON]] files) into a running Unit app."
      },
      "date": 1711820006178
    },
    {
      "id": "20f914508ae61e2d",
      "type": "move",
      "order": [
        "83a6837d8e636b55",
        "6ea9146a47d68cd3",
        "aaabdf609801441a",
        "2af249d670a0c342",
        "20f914508ae61e2d",
        "598b5eb17fe1c38d",
        "b4e564755bb0767a"
      ],
      "date": 1711820051973
    },
    {
      "item": {
        "type": "factory",
        "id": "4359ba8daec9766b"
      },
      "id": "4359ba8daec9766b",
      "type": "add",
      "after": "b4e564755bb0767a",
      "date": 1711822689099
    },
    {
      "id": "4359ba8daec9766b",
      "type": "move",
      "order": [
        "83a6837d8e636b55",
        "6ea9146a47d68cd3",
        "aaabdf609801441a",
        "2af249d670a0c342",
        "20f914508ae61e2d",
        "4359ba8daec9766b",
        "598b5eb17fe1c38d",
        "b4e564755bb0767a"
      ],
      "date": 1711822691722
    },
    {
      "type": "edit",
      "id": "4359ba8daec9766b",
      "item": {
        "type": "paragraph",
        "id": "4359ba8daec9766b",
        "text": "localStorage set"
      },
      "date": 1711822700404
    },
    {
      "id": "309f5e245cb51d14",
      "type": "add",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "YOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
      },
      "after": "4359ba8daec9766b",
      "attribution": {
        "page": "2024-03-29",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1711822997467
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "START 332\nYOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
      },
      "date": 1711823014617
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "START 401\nYOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
      },
      "date": 1711829314821
    },
    {
      "id": "803baadf940cad31",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "803baadf940cad31",
        "text": "if you keep looking for input you can find text input and so text input I tried playing around with this and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World and so I'm gonna hold down D and clear up my canvas here just to delete some of the stuff um or probably needed that console log let me grab that back so then I was like okay well if I have a value in here how can I read a value back out so I have Foo is the key this text input is changing the value and it's sitting in local storage how can I get this value out of local storage so the same as set there's a get platform method and we can connect local storage to that unit and we can connect to this constant to the name and now we can see the value comes out hello world which is good and we can actually hook that up to console log here and that'll fire and we see Hello World so now if I change this goodbye world and hit enter these this flash you probably didn't see it on the stream and then we get the log uh goodbye world is this evaluated we can refresh up here goodbye world and I ran into a situation where it wasn't always updating the output as well so if it changed us to goodbye um and so then I started playing around like if I wanted these to be completely disconnected so if I didn't want this to fire every time I updated storage uh here there was another node in here called a delay which was pretty cool so you can come into delay and set up some number of milliseconds I can say every 500 milliseconds I want to emit some value and so every 500 milliseconds I can actually emit the constant Foo and then I can run with a different copy of local storage and a different copy of get oops yeah let's just get I keep wanting to say get value so with a completely different copy of local storage here uh this every 500 milliseconds is going to Output Foo and then that will cause this to execute and I can get this value goodbye and once again we could plug this into a console log here and then we should start seeing do I set that up right oh uh our delay got consumed yes of course it did uh once again we need a constant uh here so we'll just say 500 for 500 milliseconds and that'll give us a constant input into this delay and now what are we missing let's see 500 milliseconds comes into the delay maybe I should split these apart Let's uh let's unhook this just so we can see this separate flow so I'm just holding down D and clicking on things to delete them so 500 milliseconds comes in a constant here goes into our delay so that'll prevent that from being consumed by the delay and I think I deleted the value on the delay I'm not sure how you get pins back so I've messed up that delay so let's get a delay back here there we go so we want the output of the delay to go into the name and then here our constant will give us 500 milliseconds and let's just go ahead and do another constant instead of sharing the other one oops double click on that so we can add the food string and we'll plug that in here and so now it's pulsing and so we are we have a get from local storage that is running and then let's um let's delete the get here really quick let's set this up again because I think I lost another node when I disconnected those um so I want to get oops that's the object get wrong one hold down D there get platform method there we go so local storage get Foo value goodbye and then up here we say hello again so we should see this update after uh half a second in five more milliseconds oh maybe I still don't have it wired upright that's what I was playing with before I jumped on the stream now and I thought oh I'm going to stream this because it's pretty cool the delay runs uh it outputs this value but I may still have something not not set up right the life's number string outputs a string plug that into get value here let's throw that onto a console log because maybe it just realizes there's no drain on this and it's not actually doing anything there it is yep so that's pretty cool too so however these flows get evaluated um they detect that there's no output there and so I had to actually have that drain into something so that's pretty cool but there's all kinds of stuff in here there's uh for loops and things you kind of have to figure out what to search for and look around in here but I may dig through the source code and figure out how to make an index of this and maybe generate some additional documentation because I find the whole concept of this platform very fascinating yeah so just over the foo bar and then that runs yeah anyways that was that so just a short stream uh just showing off uh unit since I O U N dot i t and it was just unit flow programming and figure out how to uh maybe add show notes um on well I can certainly put a …"
      },
      "after": "309f5e245cb51d14",
      "attribution": {
        "page": "2024-03-29"
      },
      "date": 1711829335742
    },
    {
      "type": "edit",
      "id": "803baadf940cad31",
      "item": {
        "type": "paragraph",
        "id": "803baadf940cad31",
        "text": "if you keep looking for input you can find text input and so text input I tried playing around with this"
      },
      "date": 1711829418961
    },
    {
      "type": "fork",
      "date": 1711829484932
    },
    {
      "type": "add",
      "id": "c4dff2123008e15b",
      "item": {
        "type": "paragraph",
        "id": "c4dff2123008e15b",
        "text": "Note: We use \"editable field\" instead of \"text input\""
      },
      "after": "803baadf940cad31",
      "date": 1711829489304
    },
    {
      "id": "3c01f946f2760b6b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3c01f946f2760b6b",
        "text": "and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World and so I'm gonna hold down D and clear up my canvas here just to delete some of the stuff um or probably needed that console log let me grab that back so then I was like okay well if I have a value in here how can I read a value back out so I have Foo is the key this text input is changing the value and it's sitting in local storage how can I get this value out of local storage so the same as set there's a get platform method and we can connect local storage to that unit and we can connect to this constant to the name and now we can see the value comes out hello world which is good and we can actually hook that up to console log here and that'll fire and we see Hello World so now if I change this goodbye world and hit enter these this flash you probably didn't see it on the stream and then we get the log uh goodbye world is this evaluated we can refresh up here goodbye world and I ran into a situation where it wasn't always updating the output as well so if it changed us to goodbye um and so then I started playing around like if I wanted these to be completely disconnected so if I didn't want this to fire every time I updated storage uh here there was another node in here called a delay which was pretty cool so you can come into delay and set up some number of milliseconds I can say every 500 milliseconds I want to emit some value and so every 500 milliseconds I can actually emit the constant Foo and then I can run with a different copy of local storage and a different copy of get oops yeah let's just get I keep wanting to say get value so with a completely different copy of local storage here uh this every 500 milliseconds is going to Output Foo and then that will cause this to execute and I can get this value goodbye and once again we could plug this into a console log here and then we should start seeing do I set that up right oh uh our delay got consumed yes of course it did uh once again we need a constant uh here so we'll just say 500 for 500 milliseconds and that'll give us a constant input into this delay and now what are we missing let's see 500 milliseconds comes into the delay maybe I should split these apart Let's uh let's unhook this just so we can see this separate flow so I'm just holding down D and clicking on things to delete them so 500 milliseconds comes in a constant here goes into our delay so that'll prevent that from being consumed by the delay and I think I deleted the value on the delay I'm not sure how you get pins back so I've messed up that delay so let's get a delay back here there we go so we want the output of the delay to go into the name and then here our constant will give us 500 milliseconds and let's just go ahead and do another constant instead of sharing the other one oops double click on that so we can add the food string and we'll plug that in here and so now it's pulsing and so we are we have a get from local storage that is running and then let's um let's delete the get here really quick let's set this up again because I think I lost another node when I disconnected those um so I want to get oops that's the object get wrong one hold down D there get platform method there we go so local storage get Foo value goodbye and then up here we say hello again so we should see this update after uh half a second in five more milliseconds oh maybe I still don't have it wired upright that's what I was playing with before I jumped on the stream now and I thought oh I'm going to stream this because it's pretty cool the delay runs uh it outputs this value but I may still have something not not set up right the life's number string outputs a string plug that into get value here let's throw that onto a console log because maybe it just realizes there's no drain on this and it's not actually doing anything there it is yep so that's pretty cool too so however these flows get evaluated um they detect that there's no output there and so I had to actually have that drain into something so that's pretty cool but there's all kinds of stuff in here there's uh for loops and things you kind of have to figure out what to search for and look around in here but I may dig through the source code and figure out how to make an index of this and maybe generate some additional documentation because I find the whole concept of this platform very fascinating yeah so just over the foo bar and then that runs yeah anyways that was that so just a short stream uh just showing off uh unit since I O U N dot i t and it was just unit flow programming and figure out how to uh maybe add show notes um on well I can certainly put a …"
      },
      "after": "c4dff2123008e15b",
      "attribution": {
        "page": "2024-03-29"
      },
      "date": 1711829542200
    },
    {
      "type": "fork",
      "date": 1711829549815
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711829590135
    },
    {
      "type": "edit",
      "id": "3c01f946f2760b6b",
      "item": {
        "type": "paragraph",
        "id": "3c01f946f2760b6b",
        "text": "and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World"
      },
      "date": 1711829816231
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "START 401\nEND 488\nYOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
      },
      "date": 1711829957007
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "START 401\nEND 490\nYOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
      },
      "date": 1711830060041
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "START 401\nEND 489\nYOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
      },
      "date": 1711830161792
    },
    {
      "item": {
        "type": "factory",
        "id": "6956510d32937e3a"
      },
      "id": "6956510d32937e3a",
      "type": "add",
      "after": "b4e564755bb0767a",
      "date": 1711830313383
    },
    {
      "type": "edit",
      "id": "6956510d32937e3a",
      "item": {
        "type": "video",
        "id": "6956510d32937e3a",
        "text": "HTML5 mp4 https://wiki.ralfbarkow.ch/assets/pages/workspace-unit/unit-foo-barkow.mov\nfoo barkow"
      },
      "date": 1711830333394
    },
    {
      "id": "6956510d32937e3a",
      "type": "move",
      "order": [
        "83a6837d8e636b55",
        "6ea9146a47d68cd3",
        "aaabdf609801441a",
        "2af249d670a0c342",
        "20f914508ae61e2d",
        "4359ba8daec9766b",
        "309f5e245cb51d14",
        "803baadf940cad31",
        "c4dff2123008e15b",
        "3c01f946f2760b6b",
        "6956510d32937e3a",
        "598b5eb17fe1c38d",
        "b4e564755bb0767a"
      ],
      "date": 1711830353562
    },
    {
      "type": "edit",
      "id": "3c01f946f2760b6b",
      "item": {
        "type": "paragraph",
        "id": "3c01f946f2760b6b",
        "text": "and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch"
      },
      "date": 1711830525059
    },
    {
      "type": "add",
      "id": "5d80e558d41d34a0",
      "item": {
        "type": "paragraph",
        "id": "5d80e558d41d34a0",
        "text": "the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World"
      },
      "after": "3c01f946f2760b6b",
      "date": 1711830525556
    },
    {
      "type": "edit",
      "id": "5d80e558d41d34a0",
      "item": {
        "type": "paragraph",
        "id": "5d80e558d41d34a0",
        "text": "the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data"
      },
      "date": 1711830558639
    },
    {
      "type": "add",
      "id": "7762efde628fe81d",
      "item": {
        "type": "paragraph",
        "id": "7762efde628fe81d",
        "text": "and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World"
      },
      "after": "5d80e558d41d34a0",
      "date": 1711830559152
    },
    {
      "item": {
        "type": "factory",
        "id": "1deaae18a117034c"
      },
      "id": "1deaae18a117034c",
      "type": "add",
      "after": "b4e564755bb0767a",
      "date": 1711830668086
    },
    {
      "id": "1deaae18a117034c",
      "type": "move",
      "order": [
        "83a6837d8e636b55",
        "6ea9146a47d68cd3",
        "aaabdf609801441a",
        "2af249d670a0c342",
        "20f914508ae61e2d",
        "4359ba8daec9766b",
        "309f5e245cb51d14",
        "803baadf940cad31",
        "c4dff2123008e15b",
        "3c01f946f2760b6b",
        "5d80e558d41d34a0",
        "7762efde628fe81d",
        "6956510d32937e3a",
        "1deaae18a117034c",
        "598b5eb17fe1c38d",
        "b4e564755bb0767a"
      ],
      "date": 1711830672521
    },
    {
      "type": "edit",
      "id": "1deaae18a117034c",
      "item": {
        "type": "paragraph",
        "id": "1deaae18a117034c",
        "text": "Note the chain flashed yellow"
      },
      "date": 1711830701138
    },
    {
      "type": "edit",
      "id": "1deaae18a117034c",
      "item": {
        "type": "paragraph",
        "id": "1deaae18a117034c",
        "text": "Note the chain – barkow, editable field, watch input, set, local storage –flashed yellow"
      },
      "date": 1711830808130
    },
    {
      "type": "edit",
      "id": "1deaae18a117034c",
      "item": {
        "type": "paragraph",
        "id": "1deaae18a117034c",
        "text": "Note the chain – barkow, editable field, watch input, set, local storage – flashed yellow"
      },
      "date": 1711830814599
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1711830976282
    },
    {
      "type": "edit",
      "id": "6956510d32937e3a",
      "item": {
        "type": "video",
        "id": "6956510d32937e3a",
        "text": "HTML5 mp4 http://localhost:3000/assets/pages/workspace-unit/unit-foo-barkow.mov\nfoo barkow"
      },
      "date": 1711831006125
    }
  ]
}