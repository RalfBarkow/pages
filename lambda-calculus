{
  "title": "Lambda Calculus",
  "story": [
    {
      "type": "paragraph",
      "id": "b98c2aaa4f9b0644",
      "text": "The lambda calculus, and the closely related theory of combinators, are important in the foundations of mathematics, logic and computer science. This paper provides an informal and entertaining introduction by means of an animated graphical notation. [https://dkeenan.com/Lambda/ page]"
    },
    {
      "type": "video",
      "id": "f2ee42298f699cef",
      "text": "YOUTUBE Sl78pEdLp-g\nIntroduction to Lambda Calculus using Smalltalk by [[Facundo Javier Gelatti]]"
    },
    {
      "type": "paragraph",
      "id": "da3ab7a3ec4727f5",
      "text": "It can be said that Lambda Calculus is the smallest universal programming language of the world. It consists of a single transformation rule (variable substitution) and a single function definition scheme. It was introduced by [[Alonzo Church]] in the 1930s as a way to formalizing the concept of effective computability. Since then, it has influenced many programming languages that we use today, including Smalltalk. Understanding the concepts defined in Lambda Calculus is not only interesting, but also important, because it encodes the basic principles of computing and programming, and it gives you another point of view from which to analyze the nature of computation. In this talk, I will introduce the concept of Lambda Calculus, and show you how some usual values and structures (such as booleans or pairs) can be implemented in Smalltalk using some of those concepts. The Lambda Calculus computation model can be approximated in Smalltalk by only allowing the definition and calling of one-argument blocks. For me, it was enlightening to see how booleans and other structures that I used every day were implemented in Smalltalk only by using objects and messages. I hope I can give that feeling back, by showing you how these concepts can be also implemented only using blocks."
    },
    {
      "type": "pagefold",
      "id": "a15a399ebf630eaa",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "6ce95a4c10275695",
      "site": "marc.tries.fed.wiki",
      "slug": "lambda-calculus",
      "title": "Lambda Calculus",
      "text": "https://en.m.wikipedia.org/wiki/Lambda_calculus"
    },
    {
      "type": "graphviz",
      "id": "6796382ccb914c64",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Lambda Calculus",
        "story": []
      },
      "date": 1659789344589
    },
    {
      "item": {
        "type": "factory",
        "id": "6ce95a4c10275695"
      },
      "id": "6ce95a4c10275695",
      "type": "add",
      "date": 1659789346816
    },
    {
      "type": "edit",
      "id": "6ce95a4c10275695",
      "item": {
        "type": "reference",
        "id": "6ce95a4c10275695",
        "site": "marc.tries.fed.wiki",
        "slug": "lambda-calculus",
        "title": "Lambda Calculus",
        "text": "https://en.m.wikipedia.org/wiki/Lambda_calculus"
      },
      "date": 1659789349327
    },
    {
      "item": {
        "type": "factory",
        "id": "a15a399ebf630eaa"
      },
      "id": "a15a399ebf630eaa",
      "type": "add",
      "after": "6ce95a4c10275695",
      "date": 1659789365907
    },
    {
      "type": "edit",
      "id": "a15a399ebf630eaa",
      "item": {
        "type": "pagefold",
        "id": "a15a399ebf630eaa",
        "text": "~"
      },
      "date": 1659789368718
    },
    {
      "id": "a15a399ebf630eaa",
      "type": "move",
      "order": [
        "a15a399ebf630eaa",
        "6ce95a4c10275695"
      ],
      "date": 1659789370211
    },
    {
      "item": {
        "type": "factory",
        "id": "b98c2aaa4f9b0644"
      },
      "id": "b98c2aaa4f9b0644",
      "type": "add",
      "after": "6ce95a4c10275695",
      "date": 1659789371539
    },
    {
      "id": "b98c2aaa4f9b0644",
      "type": "move",
      "order": [
        "b98c2aaa4f9b0644",
        "a15a399ebf630eaa",
        "6ce95a4c10275695"
      ],
      "date": 1659789372973
    },
    {
      "type": "edit",
      "id": "b98c2aaa4f9b0644",
      "item": {
        "type": "paragraph",
        "id": "b98c2aaa4f9b0644",
        "text": "The lambda calculus, and the closely related theory of combinators, are important in the foundations of mathematics, logic and computer science. This paper provides an informal and entertaining introduction by means of an animated graphical notation."
      },
      "date": 1659789374782
    },
    {
      "type": "edit",
      "id": "b98c2aaa4f9b0644",
      "item": {
        "type": "paragraph",
        "id": "b98c2aaa4f9b0644",
        "text": "The lambda calculus, and the closely related theory of combinators, are important in the foundations of mathematics, logic and computer science. This paper provides an informal and entertaining introduction by means of an animated graphical notation. [https://dkeenan.com/Lambda/ page]"
      },
      "date": 1659789384974
    },
    {
      "item": {
        "type": "factory",
        "id": "e1a7a28a355ad5d8"
      },
      "id": "e1a7a28a355ad5d8",
      "type": "add",
      "after": "6ce95a4c10275695",
      "date": 1669792844496
    },
    {
      "id": "e1a7a28a355ad5d8",
      "type": "move",
      "order": [
        "b98c2aaa4f9b0644",
        "a15a399ebf630eaa",
        "e1a7a28a355ad5d8",
        "6ce95a4c10275695"
      ],
      "date": 1669792847705
    },
    {
      "id": "e1a7a28a355ad5d8",
      "type": "move",
      "order": [
        "b98c2aaa4f9b0644",
        "e1a7a28a355ad5d8",
        "a15a399ebf630eaa",
        "6ce95a4c10275695"
      ],
      "date": 1669792849619
    },
    {
      "type": "remove",
      "id": "e1a7a28a355ad5d8",
      "date": 1669792853069
    },
    {
      "item": {
        "type": "factory",
        "id": "f2ee42298f699cef"
      },
      "id": "f2ee42298f699cef",
      "type": "add",
      "after": "6ce95a4c10275695",
      "date": 1669792856083
    },
    {
      "type": "edit",
      "id": "f2ee42298f699cef",
      "item": {
        "type": "video",
        "id": "f2ee42298f699cef",
        "text": "YOUTUBE Sl78pEdLp-g"
      },
      "date": 1669792866135
    },
    {
      "id": "f2ee42298f699cef",
      "type": "move",
      "order": [
        "b98c2aaa4f9b0644",
        "f2ee42298f699cef",
        "a15a399ebf630eaa",
        "6ce95a4c10275695"
      ],
      "date": 1669792870848
    },
    {
      "type": "edit",
      "id": "f2ee42298f699cef",
      "item": {
        "type": "video",
        "id": "f2ee42298f699cef",
        "text": "YOUTUBE Sl78pEdLp-g\nIntroduction to Lambda Calculus using Smalltalk by Facundo Javier Gelatti"
      },
      "date": 1669792887292
    },
    {
      "type": "edit",
      "id": "f2ee42298f699cef",
      "item": {
        "type": "video",
        "id": "f2ee42298f699cef",
        "text": "YOUTUBE Sl78pEdLp-g\nIntroduction to Lambda Calculus using Smalltalk by [[Facundo Javier Gelatti]]"
      },
      "date": 1669792901037
    },
    {
      "item": {
        "type": "factory",
        "id": "da3ab7a3ec4727f5"
      },
      "id": "da3ab7a3ec4727f5",
      "type": "add",
      "after": "6ce95a4c10275695",
      "date": 1669792923192
    },
    {
      "id": "da3ab7a3ec4727f5",
      "type": "move",
      "order": [
        "b98c2aaa4f9b0644",
        "f2ee42298f699cef",
        "da3ab7a3ec4727f5",
        "a15a399ebf630eaa",
        "6ce95a4c10275695"
      ],
      "date": 1669792925152
    },
    {
      "type": "edit",
      "id": "da3ab7a3ec4727f5",
      "item": {
        "type": "paragraph",
        "id": "da3ab7a3ec4727f5",
        "text": "t can be said that Lambda Calculus is the smallest universal programming language of the world. It consists of a single transformation rule (variable substitution) and a single function definition scheme. It was introduced by Alonzo Church in the 1930s as a way to formalizing the concept of effective computability. Since then, it has influenced many programming languages that we use today, including Smalltalk. Understanding the concepts defined in Lambda Calculus is not only interesting, but also important, because it encodes the basic principles of computing and programming, and it gives you another point of view from which to analyze the nature of computation. In this talk, I will introduce the concept of Lambda Calculus, and show you how some usual values and structures (such as booleans or pairs) can be implemented in Smalltalk using some of those concepts. The Lambda Calculus computation model can be approximated in Smalltalk by only allowing the definition and calling of one-argument blocks. For me, it was enlightening to see how booleans and other structures that I used every day were implemented in Smalltalk only by using objects and messages. I hope I can give that feeling back, by showing you how these concepts can be also implemented only using blocks."
      },
      "date": 1669792926409
    },
    {
      "type": "edit",
      "id": "da3ab7a3ec4727f5",
      "item": {
        "type": "paragraph",
        "id": "da3ab7a3ec4727f5",
        "text": "t can be said that Lambda Calculus is the smallest universal programming language of the world. It consists of a single transformation rule (variable substitution) and a single function definition scheme. It was introduced by [[Alonzo Church]] in the 1930s as a way to formalizing the concept of effective computability. Since then, it has influenced many programming languages that we use today, including Smalltalk. Understanding the concepts defined in Lambda Calculus is not only interesting, but also important, because it encodes the basic principles of computing and programming, and it gives you another point of view from which to analyze the nature of computation. In this talk, I will introduce the concept of Lambda Calculus, and show you how some usual values and structures (such as booleans or pairs) can be implemented in Smalltalk using some of those concepts. The Lambda Calculus computation model can be approximated in Smalltalk by only allowing the definition and calling of one-argument blocks. For me, it was enlightening to see how booleans and other structures that I used every day were implemented in Smalltalk only by using objects and messages. I hope I can give that feeling back, by showing you how these concepts can be also implemented only using blocks."
      },
      "date": 1669792947332
    },
    {
      "type": "edit",
      "id": "da3ab7a3ec4727f5",
      "item": {
        "type": "paragraph",
        "id": "da3ab7a3ec4727f5",
        "text": "It can be said that Lambda Calculus is the smallest universal programming language of the world. It consists of a single transformation rule (variable substitution) and a single function definition scheme. It was introduced by [[Alonzo Church]] in the 1930s as a way to formalizing the concept of effective computability. Since then, it has influenced many programming languages that we use today, including Smalltalk. Understanding the concepts defined in Lambda Calculus is not only interesting, but also important, because it encodes the basic principles of computing and programming, and it gives you another point of view from which to analyze the nature of computation. In this talk, I will introduce the concept of Lambda Calculus, and show you how some usual values and structures (such as booleans or pairs) can be implemented in Smalltalk using some of those concepts. The Lambda Calculus computation model can be approximated in Smalltalk by only allowing the definition and calling of one-argument blocks. For me, it was enlightening to see how booleans and other structures that I used every day were implemented in Smalltalk only by using objects and messages. I hope I can give that feeling back, by showing you how these concepts can be also implemented only using blocks."
      },
      "date": 1669986048487
    },
    {
      "item": {
        "type": "factory",
        "id": "6796382ccb914c64"
      },
      "id": "6796382ccb914c64",
      "type": "add",
      "after": "6ce95a4c10275695",
      "date": 1670945535767
    },
    {
      "type": "edit",
      "id": "6796382ccb914c64",
      "item": {
        "type": "graphviz",
        "id": "6796382ccb914c64",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1670945538049
    }
  ]
}