{
  "title": "graphStreamIncoming",
  "story": [
    {
      "type": "paragraph",
      "id": "e7e2d45c9b6125b0",
      "text": "This function, graphStreamIncoming [https://github.com/RalfBarkow/assets/blob/2a6474fef4b628267c91af7b15d0fc9a6cb9f9ad/pages/parse-page-paragraphs/speed-bot.html#L399-L403 code], is designed to handle messages containing graph data. "
    },
    {
      "type": "code",
      "id": "849228427d247609",
      "text": "function graphStreamIncoming(message){ \n    return Graph.load(message);\n}"
    },
    {
      "type": "paragraph",
      "id": "a56fb9f033733b2d",
      "text": "The starting point was the [[Question]] of whether the [[Speed Bot]] app can also [[contain]] a function that reads the graphStream of a \"SOURCE graph\" frame. See [[broadcastGraph]]"
    },
    {
      "type": "paragraph",
      "id": "10027bd86b6c852b",
      "text": "We added an event listener [https://github.com/RalfBarkow/assets/blob/2a6474fef4b628267c91af7b15d0fc9a6cb9f9ad/pages/parse-page-paragraphs/speed-bot.html#L419-L428 code] that can read all messages and let the function [[graphStream]] deal with the graphStream messages."
    },
    {
      "type": "code",
      "id": "31e116b6403cc186",
      "text": "// Add event listener for message\nwindow.addEventListener('message', function (event) {\n    const message = event.data;\n\n    // Handle message event here\n    if (message.action === 'graphStream') {\n        graphStream(message);\n    }\n});"
    },
    {
      "type": "paragraph",
      "id": "968c32f6356f8a89",
      "text": "We can filter out the graphStream messages and display the incoming graph in the cosole log."
    },
    {
      "type": "image",
      "id": "646d57f3ccda1b34",
      "text": "Diff in rels",
      "size": "wide",
      "width": 418,
      "height": 85,
      "url": "/assets/plugins/image/2579b484829d813faa722f3f8433dcde.jpg"
    },
    {
      "type": "paragraph",
      "id": "c80ac23dfea80505",
      "text": "We receive 2 graphStream action messages in a row and realize that it is a [[Graph Update]] where only one relationship has been added."
    },
    {
      "type": "paragraph",
      "id": "02f9d0e527248446",
      "text": "Are we observing an \"[[Edge Insertion]]\" here?"
    },
    {
      "type": "image",
      "id": "17372cf6c8c814c4",
      "text": "42 â€“ 43",
      "size": "wide",
      "width": 418,
      "height": 293,
      "url": "/assets/plugins/image/750e44807883942b4f0134b6619a5a76.jpg"
    },
    {
      "type": "paragraph",
      "id": "06d60caa01d1b381",
      "text": "The next page visited adds a new [[Relation]] of type \"fromPickToNext\" to rels."
    },
    {
      "type": "paragraph",
      "id": "ce36faadbc973b16",
      "text": "We inspect the function in the [[Glamorous Toolkit]]."
    },
    {
      "type": "image",
      "id": "55a6f3cab27d583f",
      "text": "Function inspected as Javascript snippet in the Glamorous Toolkit",
      "size": "wide",
      "width": 419,
      "height": 255,
      "url": "/assets/plugins/image/1d94895fd838c30e7e3205838a21dffa.jpg"
    },
    {
      "type": "paragraph",
      "id": "65195d54b7e24c4a",
      "text": "Note the 2 key-value pairs."
    },
    {
      "type": "paragraph",
      "id": "1608e1da8c3461c9",
      "text": "Each JavaScript function has a unique ID in a registry."
    },
    {
      "type": "paragraph",
      "id": "3664493860bd47f1",
      "text": "JSLinkObject>>#registerIdJSExpression:"
    },
    {
      "type": "code",
      "id": "3e46b32d22d064d8",
      "text": "registerIdJSExpression: objExpr\n\t^ self javaScriptRegistryExpression => #register_with_id jsCallWith: (Array with: objExpr with: self id)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "graphStreamIncoming",
        "story": []
      },
      "date": 1709748519872
    },
    {
      "item": {
        "type": "factory",
        "id": "849228427d247609"
      },
      "id": "849228427d247609",
      "type": "add",
      "date": 1709748524186
    },
    {
      "type": "edit",
      "id": "849228427d247609",
      "item": {
        "type": "code",
        "id": "849228427d247609",
        "text": "function graphStreamIncoming(message){ // message.graph\n    console.log(\"graphStreamIncoming reached\");\n    // Is the function called twice in every case? See graphStream\n\n    // Parse the JSON string into a JavaScript object\n    const json = JSON.parse(message);\n\n    const incomingGraph = new Graph(json.nodes, json.rels); // incoming broadcast\n    return incomingGraph; // return message as Graph;\n}"
      },
      "date": 1709748527909
    },
    {
      "item": {
        "type": "factory",
        "id": "e7e2d45c9b6125b0"
      },
      "id": "e7e2d45c9b6125b0",
      "type": "add",
      "after": "849228427d247609",
      "date": 1709748577089
    },
    {
      "type": "edit",
      "id": "e7e2d45c9b6125b0",
      "item": {
        "type": "paragraph",
        "id": "e7e2d45c9b6125b0",
        "text": "This function, graphStreamIncoming, is designed to handle incoming messages containing graph data. "
      },
      "date": 1709748579033
    },
    {
      "id": "e7e2d45c9b6125b0",
      "type": "move",
      "order": [
        "e7e2d45c9b6125b0",
        "849228427d247609"
      ],
      "date": 1709748581028
    },
    {
      "id": "a56fb9f033733b2d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "I wanted to know if the [[Speed Bot]] app can also include a receiver function that reads the graphStream."
      },
      "after": "849228427d247609",
      "attribution": {
        "page": "broadcastGraph"
      },
      "date": 1709748794036
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "I wanted to know if the [[Speed Bot]] app can also include a receiver function that reads the graphStream. See also [[broadcastGraph]]"
      },
      "date": 1709748814865
    },
    {
      "item": {
        "type": "factory",
        "id": "968c32f6356f8a89"
      },
      "id": "968c32f6356f8a89",
      "type": "add",
      "after": "a56fb9f033733b2d",
      "date": 1709748879241
    },
    {
      "type": "edit",
      "id": "968c32f6356f8a89",
      "item": {
        "type": "paragraph",
        "id": "968c32f6356f8a89",
        "text": "Then I realized that I can filter out the graphStream messages."
      },
      "date": 1709748885866
    },
    {
      "item": {
        "type": "factory",
        "id": "31e116b6403cc186"
      },
      "id": "31e116b6403cc186",
      "type": "add",
      "after": "968c32f6356f8a89",
      "date": 1709748950695
    },
    {
      "type": "edit",
      "id": "31e116b6403cc186",
      "item": {
        "type": "code",
        "id": "31e116b6403cc186",
        "text": "// Add event listener for message\nwindow.addEventListener('message', function (event) {\n    console.log('Message event received:', event);\n\n    const message = event.data;\n\n    // Handle message event here\n    if (message.action === 'graphStream') {\n        graphStreamIncoming(message.graph);\n    }\n});"
      },
      "date": 1709748953162
    },
    {
      "id": "31e116b6403cc186",
      "type": "move",
      "order": [
        "e7e2d45c9b6125b0",
        "849228427d247609",
        "a56fb9f033733b2d",
        "31e116b6403cc186",
        "968c32f6356f8a89"
      ],
      "date": 1709748960167
    },
    {
      "type": "add",
      "id": "10027bd86b6c852b",
      "item": {
        "type": "paragraph",
        "id": "10027bd86b6c852b",
        "text": "I have added an event listener that can read all messages."
      },
      "after": "a56fb9f033733b2d",
      "date": 1709748998175
    },
    {
      "type": "edit",
      "id": "10027bd86b6c852b",
      "item": {
        "type": "paragraph",
        "id": "10027bd86b6c852b",
        "text": "I added an event listener that can read all messages and let graphStreamIncoming deal with them."
      },
      "date": 1709749119893
    },
    {
      "type": "edit",
      "id": "10027bd86b6c852b",
      "item": {
        "type": "paragraph",
        "id": "10027bd86b6c852b",
        "text": "I added an event listener that can read all messages and let graphStreamIncoming deal with the graphStream."
      },
      "date": 1709749158235
    },
    {
      "item": {
        "type": "factory",
        "id": "c80ac23dfea80505"
      },
      "id": "c80ac23dfea80505",
      "type": "add",
      "after": "968c32f6356f8a89",
      "date": 1709749318551
    },
    {
      "type": "edit",
      "id": "c80ac23dfea80505",
      "item": {
        "type": "paragraph",
        "id": "c80ac23dfea80505",
        "text": "I noticed that we receive 2 graphStream action messages in a row and that this is a graph update where only one relation was added."
      },
      "date": 1709749320078
    },
    {
      "id": "646d57f3ccda1b34",
      "type": "add",
      "item": {
        "type": "image",
        "id": "646d57f3ccda1b34",
        "text": "Diff in rels",
        "size": "wide",
        "width": 418,
        "height": 85,
        "url": "/assets/plugins/image/2579b484829d813faa722f3f8433dcde.jpg"
      },
      "after": "c80ac23dfea80505",
      "attribution": {
        "page": "2024-03-06"
      },
      "date": 1709749327423
    },
    {
      "id": "646d57f3ccda1b34",
      "type": "move",
      "order": [
        "e7e2d45c9b6125b0",
        "849228427d247609",
        "a56fb9f033733b2d",
        "10027bd86b6c852b",
        "31e116b6403cc186",
        "968c32f6356f8a89",
        "646d57f3ccda1b34",
        "c80ac23dfea80505"
      ],
      "date": 1709749335617
    },
    {
      "id": "02f9d0e527248446",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing the \"edge insertion\" phenomenon here (next page adds a new rel of type \"fromPickToNext\" to rels)."
      },
      "after": "c80ac23dfea80505",
      "attribution": {
        "page": "2024-03-06"
      },
      "date": 1709749504682
    },
    {
      "id": "17372cf6c8c814c4",
      "type": "add",
      "item": {
        "type": "image",
        "id": "17372cf6c8c814c4",
        "text": "42 â€“ 43",
        "size": "wide",
        "width": 418,
        "height": 293,
        "url": "/assets/plugins/image/750e44807883942b4f0134b6619a5a76.jpg"
      },
      "after": "02f9d0e527248446",
      "attribution": {
        "page": "2024-03-06"
      },
      "date": 1709749511111
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing the \"edge insertion\" phenomenon here (next page adds a new [[Relation]] of type \"fromPickToNext\" to rels)."
      },
      "date": 1709749572059
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing the \"edge insertion\" phenomenon here:"
      },
      "date": 1709749605307
    },
    {
      "type": "add",
      "id": "06d60caa01d1b381",
      "item": {
        "type": "paragraph",
        "id": "06d60caa01d1b381",
        "text": "(next page adds a new [[Relation]] of type \"fromPickToNext\" to rels)."
      },
      "after": "02f9d0e527248446",
      "date": 1709749606590
    },
    {
      "id": "06d60caa01d1b381",
      "type": "move",
      "order": [
        "e7e2d45c9b6125b0",
        "849228427d247609",
        "a56fb9f033733b2d",
        "10027bd86b6c852b",
        "31e116b6403cc186",
        "968c32f6356f8a89",
        "646d57f3ccda1b34",
        "c80ac23dfea80505",
        "02f9d0e527248446",
        "17372cf6c8c814c4",
        "06d60caa01d1b381"
      ],
      "date": 1709749609444
    },
    {
      "type": "edit",
      "id": "06d60caa01d1b381",
      "item": {
        "type": "paragraph",
        "id": "06d60caa01d1b381",
        "text": "The next page adds a new [[Relation]] of type \"fromPickToNext\" to rels."
      },
      "date": 1709749617571
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "I think we are observing a \"edge insertion\" here:"
      },
      "date": 1709749642865
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "Are we observing a \"edge insertion\" here?"
      },
      "date": 1709749660645
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "I wanted to know if the [[Speed Bot]] app can also include a function that reads the graphStream. See also [[broadcastGraph]]"
      },
      "date": 1709809894662
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "I wanted to know if the [[Speed Bot]] app can also include a function that reads the graphStream. See [[broadcastGraph]]"
      },
      "date": 1709809909968
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "I wanted to know if the [[Speed Bot]] app can also include a function that reads the [[graphStream]]. See [[broadcastGraph]]"
      },
      "date": 1709809960259
    },
    {
      "type": "edit",
      "id": "968c32f6356f8a89",
      "item": {
        "type": "paragraph",
        "id": "968c32f6356f8a89",
        "text": "We can filter out the graphStream messages."
      },
      "date": 1709809991579
    },
    {
      "type": "edit",
      "id": "02f9d0e527248446",
      "item": {
        "type": "paragraph",
        "id": "02f9d0e527248446",
        "text": "Are we observing an \"[[Edge Insertion]]\" here?"
      },
      "date": 1709810071235
    },
    {
      "type": "edit",
      "id": "06d60caa01d1b381",
      "item": {
        "type": "paragraph",
        "id": "06d60caa01d1b381",
        "text": "The next page visited adds a new [[Relation]] of type \"fromPickToNext\" to rels."
      },
      "date": 1709810111088
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "The starting point was the question of whether x."
      },
      "date": 1709810262165
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "The starting point was the question of whether the [[Speed Bot]] app can also include a function that reads the [[graphStream]]. See [[broadcastGraph]]"
      },
      "date": 1709810273290
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "The starting point was the question of whether the [[Speed Bot]] app can also [[contain]] a function that reads the [[graphStream]]. See [[broadcastGraph]]"
      },
      "date": 1709810294689
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "The starting point was the [[Question]] of whether the [[Speed Bot]] app can also [[contain]] a function that reads the [[graphStream]]. See [[broadcastGraph]]"
      },
      "date": 1709810317289
    },
    {
      "type": "edit",
      "id": "10027bd86b6c852b",
      "item": {
        "type": "paragraph",
        "id": "10027bd86b6c852b",
        "text": "We added an event listener that can read all messages and let graphStreamIncoming deal with the graphStream."
      },
      "date": 1709810354232
    },
    {
      "type": "edit",
      "id": "968c32f6356f8a89",
      "item": {
        "type": "paragraph",
        "id": "968c32f6356f8a89",
        "text": "We can filter out the graphStream messages and display the incoming graph in the cosole log."
      },
      "date": 1709810411338
    },
    {
      "type": "edit",
      "id": "c80ac23dfea80505",
      "item": {
        "type": "paragraph",
        "id": "c80ac23dfea80505",
        "text": "We receive 2 graphStream action messages in a row and that this is a graph update where only one relation was added."
      },
      "date": 1709810445386
    },
    {
      "type": "edit",
      "id": "c80ac23dfea80505",
      "item": {
        "type": "paragraph",
        "id": "c80ac23dfea80505",
        "text": "We receive 2 graphStream action messages in a row and notice that this is a graph update where only one relation was added."
      },
      "date": 1709810469094
    },
    {
      "type": "edit",
      "id": "c80ac23dfea80505",
      "item": {
        "type": "paragraph",
        "id": "c80ac23dfea80505",
        "text": "We receive 2 graphStream action messages in a row and realize that it is a graph update where only one relationship has been added."
      },
      "date": 1709810487112
    },
    {
      "item": {
        "type": "factory",
        "id": "ce36faadbc973b16"
      },
      "id": "ce36faadbc973b16",
      "type": "add",
      "after": "06d60caa01d1b381",
      "date": 1709810634667
    },
    {
      "type": "edit",
      "id": "ce36faadbc973b16",
      "item": {
        "type": "paragraph",
        "id": "ce36faadbc973b16",
        "text": "We inspect the function within [[Glamorous Toolkit]]."
      },
      "date": 1709810661555
    },
    {
      "type": "edit",
      "id": "ce36faadbc973b16",
      "item": {
        "type": "paragraph",
        "id": "ce36faadbc973b16",
        "text": "We inspect the function in the [[Glamorous Toolkit]]."
      },
      "date": 1709810677830
    },
    {
      "item": {
        "type": "factory",
        "id": "55a6f3cab27d583f"
      },
      "id": "55a6f3cab27d583f",
      "type": "add",
      "after": "ce36faadbc973b16",
      "date": 1709810680603
    },
    {
      "type": "edit",
      "id": "55a6f3cab27d583f",
      "item": {
        "type": "image",
        "id": "55a6f3cab27d583f",
        "text": "function as Javascript snippet inspected in the Glamorous Toolkit",
        "size": "wide",
        "width": 419,
        "height": 255,
        "url": "/assets/plugins/image/1d94895fd838c30e7e3205838a21dffa.jpg"
      },
      "date": 1709810750134
    },
    {
      "type": "edit",
      "id": "55a6f3cab27d583f",
      "item": {
        "type": "image",
        "id": "55a6f3cab27d583f",
        "text": "Function inspected as Javascript snippet in the Glamorous Toolkit",
        "size": "wide",
        "width": 419,
        "height": 255,
        "url": "/assets/plugins/image/1d94895fd838c30e7e3205838a21dffa.jpg"
      },
      "date": 1709810790867
    },
    {
      "type": "edit",
      "id": "849228427d247609",
      "item": {
        "type": "code",
        "id": "849228427d247609",
        "text": "function graphStreamIncoming(message){ // message.graph\n    console.log(\"graphStreamIncoming reached\");\n\n    return Graph.load(message);\n}"
      },
      "date": 1709820727279
    },
    {
      "type": "edit",
      "id": "849228427d247609",
      "item": {
        "type": "code",
        "id": "849228427d247609",
        "text": "function graphStreamIncoming(message){ // message.graph\n    return Graph.load(message);\n}"
      },
      "date": 1709820747353
    },
    {
      "type": "edit",
      "id": "849228427d247609",
      "item": {
        "type": "code",
        "id": "849228427d247609",
        "text": "function graphStreamIncoming(message){ \n    return Graph.load(message);\n}"
      },
      "date": 1709820759937
    },
    {
      "type": "edit",
      "id": "31e116b6403cc186",
      "item": {
        "type": "code",
        "id": "31e116b6403cc186",
        "text": "// Add event listener for message\nwindow.addEventListener('message', function (event) {\n\n    const message = event.data;\n\n    // Handle message event here\n    if (message.action === 'graphStream') {\n        graphStreamIncoming(message.graph);\n    }\n});"
      },
      "date": 1709820851828
    },
    {
      "type": "edit",
      "id": "31e116b6403cc186",
      "item": {
        "type": "code",
        "id": "31e116b6403cc186",
        "text": "// Add event listener for message\nwindow.addEventListener('message', function (event) {\n    const message = event.data;\n\n    // Handle message event here\n    if (message.action === 'graphStream') {\n        graphStreamIncoming(message.graph);\n    }\n});"
      },
      "date": 1709820856578
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709828076083
    },
    {
      "type": "edit",
      "id": "e7e2d45c9b6125b0",
      "item": {
        "type": "paragraph",
        "id": "e7e2d45c9b6125b0",
        "text": "This function, graphStreamIncoming [https://github.com/RalfBarkow/assets/blob/2a6474fef4b628267c91af7b15d0fc9a6cb9f9ad/pages/parse-page-paragraphs/speed-bot.html#L399-L403 code], is designed to handle incoming messages containing graph data. "
      },
      "date": 1709828164253
    },
    {
      "type": "edit",
      "id": "31e116b6403cc186",
      "item": {
        "type": "code",
        "id": "31e116b6403cc186",
        "text": "// Add event listener for message\nwindow.addEventListener('message', function (event) {\n    const message = event.data;\n\n    // Handle message event here\n    if (message.action === 'graphStream') {\n        graphStream(message);\n    }\n});"
      },
      "date": 1709828221477
    },
    {
      "type": "edit",
      "id": "10027bd86b6c852b",
      "item": {
        "type": "paragraph",
        "id": "10027bd86b6c852b",
        "text": "We added an event listener [https://github.com/RalfBarkow/assets/blob/2a6474fef4b628267c91af7b15d0fc9a6cb9f9ad/pages/parse-page-paragraphs/speed-bot.html#L419-L428 code] that can read all messages and let graphStreamIncoming deal with the graphStream."
      },
      "date": 1709828293295
    },
    {
      "type": "edit",
      "id": "10027bd86b6c852b",
      "item": {
        "type": "paragraph",
        "id": "10027bd86b6c852b",
        "text": "We added an event listener [https://github.com/RalfBarkow/assets/blob/2a6474fef4b628267c91af7b15d0fc9a6cb9f9ad/pages/parse-page-paragraphs/speed-bot.html#L419-L428 code] that can read all messages and let [[graphStream]] deal with the graphStream."
      },
      "date": 1709828330744
    },
    {
      "type": "edit",
      "id": "10027bd86b6c852b",
      "item": {
        "type": "paragraph",
        "id": "10027bd86b6c852b",
        "text": "We added an event listener [https://github.com/RalfBarkow/assets/blob/2a6474fef4b628267c91af7b15d0fc9a6cb9f9ad/pages/parse-page-paragraphs/speed-bot.html#L419-L428 code] that can read all messages and let the function [[graphStream]] deal with the graphStream."
      },
      "date": 1709828395945
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "The starting point was the [[Question]] of whether the [[Speed Bot]] app can also [[contain]] a function that reads the graphStream. See [[broadcastGraph]]"
      },
      "date": 1709828408629
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "The starting point was the [[Question]] of whether the [[Speed Bot]] app can also [[contain]] a function that reads the graphStream of a \"Source graph\" frame. See [[broadcastGraph]]"
      },
      "date": 1709828468766
    },
    {
      "type": "edit",
      "id": "a56fb9f033733b2d",
      "item": {
        "type": "paragraph",
        "id": "a56fb9f033733b2d",
        "text": "The starting point was the [[Question]] of whether the [[Speed Bot]] app can also [[contain]] a function that reads the graphStream of a \"SOURCE graph\" frame. See [[broadcastGraph]]"
      },
      "date": 1709828475780
    },
    {
      "type": "edit",
      "id": "e7e2d45c9b6125b0",
      "item": {
        "type": "paragraph",
        "id": "e7e2d45c9b6125b0",
        "text": "This function, graphStreamIncoming [https://github.com/RalfBarkow/assets/blob/2a6474fef4b628267c91af7b15d0fc9a6cb9f9ad/pages/parse-page-paragraphs/speed-bot.html#L399-L403 code], is designed to handle messages containing graph data. "
      },
      "date": 1709828532541
    },
    {
      "type": "edit",
      "id": "10027bd86b6c852b",
      "item": {
        "type": "paragraph",
        "id": "10027bd86b6c852b",
        "text": "We added an event listener [https://github.com/RalfBarkow/assets/blob/2a6474fef4b628267c91af7b15d0fc9a6cb9f9ad/pages/parse-page-paragraphs/speed-bot.html#L419-L428 code] that can read all messages and let the function [[graphStream]] deal with the graphStream messages."
      },
      "date": 1709828846995
    },
    {
      "type": "edit",
      "id": "c80ac23dfea80505",
      "item": {
        "type": "paragraph",
        "id": "c80ac23dfea80505",
        "text": "We receive 2 graphStream action messages in a row and realize that it is a [[Graph Update]] where only one relationship has been added."
      },
      "date": 1709828879857
    },
    {
      "item": {
        "type": "factory",
        "id": "762c033459748d27"
      },
      "id": "762c033459748d27",
      "type": "add",
      "after": "55a6f3cab27d583f",
      "date": 1709829074021
    },
    {
      "type": "remove",
      "id": "762c033459748d27",
      "date": 1709829103834
    },
    {
      "type": "edit",
      "id": "65195d54b7e24c4a",
      "item": {
        "type": "paragraph",
        "id": "65195d54b7e24c4a",
        "text": "Note the 2 key-value pairs."
      },
      "date": 1709829108981
    },
    {
      "type": "fork",
      "date": 1709832815143
    },
    {
      "type": "add",
      "id": "1608e1da8c3461c9",
      "item": {
        "type": "paragraph",
        "id": "1608e1da8c3461c9",
        "text": "Every JavaScript function has a unique id in a registry."
      },
      "after": "65195d54b7e24c4a",
      "date": 1709832905042
    },
    {
      "type": "edit",
      "id": "1608e1da8c3461c9",
      "item": {
        "type": "paragraph",
        "id": "1608e1da8c3461c9",
        "text": "Each JavaScript function has a unique ID in a registry."
      },
      "date": 1709832921157
    },
    {
      "item": {
        "type": "factory",
        "id": "3e46b32d22d064d8"
      },
      "id": "3e46b32d22d064d8",
      "type": "add",
      "after": "1608e1da8c3461c9",
      "date": 1709845314985
    },
    {
      "type": "edit",
      "id": "3e46b32d22d064d8",
      "item": {
        "type": "code",
        "id": "3e46b32d22d064d8",
        "text": "JSLinkObject>>#registerIdJSExpression:"
      },
      "date": 1709845321034
    },
    {
      "type": "edit",
      "id": "3e46b32d22d064d8",
      "item": {
        "type": "code",
        "id": "3e46b32d22d064d8",
        "text": "registerIdJSExpression: objExpr\n\t^ self javaScriptRegistryExpression => #register_with_id jsCallWith: (Array with: objExpr with: self id)"
      },
      "date": 1709845339823
    },
    {
      "type": "add",
      "id": "3664493860bd47f1",
      "item": {
        "type": "paragraph",
        "id": "3664493860bd47f1",
        "text": "JSLinkObject>>#registerIdJSExpression:"
      },
      "after": "1608e1da8c3461c9",
      "date": 1709845354294
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709906596527
    }
  ]
}