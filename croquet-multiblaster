{
  "title": "Croquet Multiblaster",
  "story": [
    {
      "type": "paragraph",
      "id": "a9f53e5f608fb2e7",
      "text": "This is an homage to Asteroids, implemented as a single HTML page without any backend code. All clients are kept in sync automatically by [[Croquet]]'s synchronization technology. [https://github.com/croquet/multiblaster github], [https://croquet.io/multiblaster/index.html?q=9zguex297g#pw=InauQyhaxzp-QOFJqn9H-A play it!]"
    },
    {
      "type": "markdown",
      "id": "1cd026bafd4cfd73",
      "text": "**Assets**:\n"
    },
    {
      "type": "assets",
      "id": "da82ff21a12b1b28",
      "text": "pages/croquet-multiblaster"
    },
    {
      "type": "markdown",
      "id": "bc4c0e45ee6e3780",
      "text": "[https://wiki.ralfbarkow.ch/assets/pages/croquet-multiblaster/index.html enlarge]"
    },
    {
      "type": "pagefold",
      "id": "8fc31fcfb9173268",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "04bfb2692d07aa60",
      "text": "Below this pagefold we reveal the code which does the [[Multiblaster]]."
    },
    {
      "type": "markdown",
      "id": "bde168cafdce8ef2",
      "text": "**Frame**: `run-world.html`"
    },
    {
      "type": "frame",
      "id": "65d97c995c7adf15",
      "text": "//wiki.ralfbarkow.ch/assets/pages/world-core-tutorial-1/run-world.html\nHEIGHT 55"
    },
    {
      "type": "paragraph",
      "id": "dfddd2d989966f0c",
      "text": "Import [[Frame Integration Promises]] and setup DOM helpers."
    },
    {
      "type": "code",
      "id": "5cbd82e529085e9a",
      "text": "import * as frame from \"https://wiki.ralfbarkow.ch/assets/v1/frame.js\"\nconst $ = (s, el=document) => el.querySelector(s)\nconst $$ = (s, el=document) => \n  Array.from(el.querySelectorAll(s))"
    },
    {
      "type": "paragraph",
      "id": "8ca86f0eb2f8116a",
      "text": "â€¦"
    },
    {
      "type": "code",
      "id": "619ae886090dff83",
      "text": "class Game extends Croquet.Model {\n    init() {\n        this.ships = new Map();\n        this.asteroids = new Set();\n        this.blasts = new Set();\n        this.subscribe(this.sessionId, \"view-join\", this.viewJoined);\n        this.subscribe(this.sessionId, \"view-exit\", this.viewExited);\n        Asteroid.create({});\n        this.mainLoop();\n    }\n\n    viewJoined(viewId) {\n        const ship = Ship.create({ viewId });\n        this.ships.set(viewId, ship);\n    }\n\n    viewExited(viewId) {\n        const ship = this.ships.get(viewId);\n        this.ships.delete(viewId);\n        ship.destroy();\n    }\n\n    checkCollisions() {\n        for (const asteroid of this.asteroids) {\n            if (asteroid.wasHit) continue;\n            const minx = asteroid.x - asteroid.size;\n            const maxx = asteroid.x + asteroid.size;\n            const miny = asteroid.y - asteroid.size;\n            const maxy = asteroid.y + asteroid.size;\n            for (const blast of this.blasts) {\n                if (blast.x > minx && blast.x < maxx && blast.y > miny && blast.y < maxy) {\n                    asteroid.hitBy(blast);\n                    break;\n                }\n            }\n            for (const ship of this.ships.values()) {\n                if (!ship.wasHit && ship.x + 10 > minx && ship.x - 10 < maxx && ship.y + 10 > miny && ship.y - 10 < maxy) {\n                    if (!ship.score && Math.abs(ship.x-500) + Math.abs(ship.y-500) < 40) continue; // no hit if just spawned\n                    ship.hitBy(asteroid);\n                    break;\n                }\n            }\n        }\n    }\n\n    mainLoop() {\n        for (const ship of this.ships.values()) ship.move();\n        for (const asteroid of this.asteroids) asteroid.move();\n        for (const blast of this.blasts) blast.move();\n        this.checkCollisions();\n        this.future(50).mainLoop(); // move & check every 50 ms\n    }\n}\nGame.register(\"Game\");"
    },
    {
      "type": "code",
      "id": "6ad5c221ad42403a",
      "text": "class Ship extends Croquet.Model {\n    init({ viewId }) {\n        this.viewId = viewId;\n        this.reset();\n        this.subscribe(viewId, \"left-thruster\", this.leftThruster);\n        this.subscribe(viewId, \"right-thruster\", this.rightThruster);\n        this.subscribe(viewId, \"forward-thruster\", this.forwardThruster);\n        this.subscribe(viewId, \"fire-blaster\", this.fireBlaster);\n    }\n\n    reset() {\n        this.x = 500;\n        this.y = 500;\n        this.a = -Math.PI / 2;\n        this.dx = 0;\n        this.dy = 0;\n        this.left = false;\n        this.right = false;\n        this.forward = false;\n        this.score = 0;\n        this.wasHit = 0;\n    }\n\n    leftThruster(active) {\n        if (this.wasHit) return;\n        this.left = active;\n    }\n\n    rightThruster(active) {\n        if (this.wasHit) return;\n        this.right = active;\n    }\n\n    forwardThruster(active) {\n        if (this.wasHit) return;\n        this.forward = active;\n    }\n\n    fireBlaster() {\n        if (this.wasHit) return;\n        const dx = Math.cos(this.a) * 20;\n        const dy = Math.sin(this.a) * 20;\n        const x = this.x + dx;\n        const y = this.y + dy;\n        Blast.create({ x, y, dx, dy, ship: this });\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris for 3 seconds\n            if (++this.wasHit > 60) this.reset();\n        } else {\n            // process thruster controls\n            if (this.forward) {\n                this.dx += Math.cos(this.a) * 0.5;\n                this.dy += Math.sin(this.a) * 0.5;\n                if (this.dx > 10) this.dx = 10;\n                if (this.dx < -10) this.dx = -10;\n                if (this.dy > 10) this.dy = 10;\n                if (this.dy < -10) this.dy = -10;\n            }\n            if (this.left) this.a -= 0.2;\n            if (this.right) this.a += 0.2;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n        // drift through space\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n    }\n\n    hitBy(asteroid) {\n        // turn both into debris\n        this.wasHit = 1;\n        asteroid.wasHit = 1;\n    }\n}\nShip.register(\"Ship\");"
    },
    {
      "type": "code",
      "id": "e2ab2000dade55c2",
      "text": "class Asteroid extends Croquet.Model {\n    init({ size, x, y, a, dx, dy, da }) {\n        if (size) {\n            // init second asteroid after spliting\n            this.size = size;\n            this.x = x;\n            this.y = y;\n            this.a = a;\n            this.dx = dx;\n            this.dy = dy;\n            this.da = da;\n        } else {\n            // init new large asteroid\n            this.size = 40;\n            this.x = Math.random() * 400 - 200;\n            this.y = Math.random() * 400 - 200;\n            this.a = Math.random() * Math.PI * 2;\n            const speed = Math.random() * 4 + 1;\n            this.dx = Math.cos(this.a) * speed;\n            this.dy = Math.sin(this.a) * speed;\n            this.da = (0.02 + Math.random() * 0.03) * (Math.random() < 0.5 ? 1 : -1);\n            this.wasHit = 0;\n            this.move();\n        }\n        this.wellKnownModel(\"modelRoot\").asteroids.add(this);\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris, larger pieces drift longer\n            if (++this.wasHit > this.size) this.destroy();\n        }\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n        if (!this.wasHit) {\n            this.a += this.da;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n    }\n\n    hitBy(blast) {\n        if (!blast.ship.wasHit) blast.ship.score++;\n        if (this.size > 20) {\n            // split into two smaller faster asteroids\n            this.size *= 0.7;\n            this.da *= 1.5;\n            this.dx = -blast.dy * 10 / this.size;\n            this.dy = blast.dx * 10 / this.size;\n            Asteroid.create({ size: this.size, x: this.x, y: this.y, a: this.a, dx: -this.dx, dy: -this.dy, da: this.da });\n        } else {\n            // turn into debris\n            this.wasHit = 1;\n        }\n        blast.destroy();\n    }\n\n    destroy() {\n        const asteroids = this.wellKnownModel(\"modelRoot\").asteroids;\n        asteroids.delete(this);\n        super.destroy();\n        // keep at least 5 asteroids around\n        if (asteroids.size < 5) Asteroid.create({});\n    }\n}\nAsteroid.register(\"Asteroid\");"
    },
    {
      "type": "code",
      "id": "5d0b0e921554af00",
      "text": "class Blast extends Croquet.Model {\n    init({x, y, dx, dy, ship}) {\n        this.ship = ship;\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.t = 0;\n        this.wellKnownModel(\"modelRoot\").blasts.add(this);\n    }\n\n    move() {\n        // move for 1.5 second before disappearing\n        if (++this.t < 30) {\n            this.x += this.dx;\n            this.y += this.dy;\n            if (this.x < 0) this.x += 1000;\n            if (this.x > 1000) this.x -= 1000;\n            if (this.y < 0) this.y += 1000;\n            if (this.y > 1000) this.y -= 1000;\n        } else {\n            this.destroy();\n        }\n    }\n\n    destroy() {\n        this.wellKnownModel(\"modelRoot\").blasts.delete(this);\n        super.destroy();\n    }\n}\nBlast.register(\"Blast\");"
    },
    {
      "type": "paragraph",
      "id": "f2bec2b8d6b48327",
      "text": "Code below is executed outside of synced VM"
    },
    {
      "type": "code",
      "id": "630fea1d81fe2b9e",
      "text": "class Display extends Croquet.View {\n    constructor(model) {\n        super(model);\n        this.model = model;\n\n        const joystick = document.getElementById(\"joystick\");\n        const knob = document.getElementById(\"knob\");\n\n        document.onkeydown = (e) => {\n            joystick.style.display = \"none\";\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", true); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", true); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", true); break;\n                case \" \":                              this.publish(this.viewId, \"fire-blaster\"); break;\n            }\n        };\n        document.onkeyup = (e) => {\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", false); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", false); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", false); break;\n            }\n        };\n\n        let x = 0, y = 0, id = 0, right = false, left = false, forward = false;\n        document.onpointerdown = (e) => {\n            if (!id) {\n                id = e.pointerId;\n                x = e.clientX;\n                y = e.clientY;\n                joystick.style.left = `${x - 60}px`;\n                joystick.style.top = `${y - 60}px`;\n                joystick.style.display = \"block\";\n            }\n        };\n        document.onpointermove = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (dx > 30) {\n                    dx = 30;\n                    if (!right) { this.publish(this.viewId, \"right-thruster\", true); right = true; }\n                } else if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (dx < -30) {\n                    dx = -30;\n                    if (!left) { this.publish(this.viewId, \"left-thruster\", true); left = true; }\n                } else if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false; }\n                if (dy < -30) {\n                    dy = -30;\n                    if (!forward) { this.publish(this.viewId, \"forward-thruster\", true); forward = true; }\n                } else if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                if (dy > 0) dy = 0;\n                knob.style.left = `${20 + dx}px`;\n                knob.style.top = `${20 + dy}px`;\n            }\n        }\n        document.onpointerup = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                id = 0;\n                if (!right && !left && !forward) {\n                    this.publish(this.viewId, \"fire-blaster\");\n                }\n                if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false;  }\n                if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                knob.style.left = `20px`;\n                knob.style.top = `20px`;\n            } else {\n                this.publish(this.viewId, \"fire-blaster\");\n            }\n        }\n        document.onpointercancel = document.onpointerup;\n        document.oncontextmenu = e => { e.preventDefault();  this.publish(this.viewId, \"fire-blaster\"); }\n        document.ontouchend = e => e.preventDefault(); // prevent double-tap zoom on iOS\n        codelink.ontouchend = () => codelink.click(); // but allow clicking link\n\n        this.smoothing = new WeakMap(); // position cache for interpolated rendering\n\n        this.context = canvas.getContext(\"2d\");\n    }\n\n    // update is called once per render frame\n    // read from shared model, interpolate, render\n    update() {\n        this.context.clearRect(0, 0, 1000, 1000);\n        this.context.font = '40px sans-serif';\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"white\";\n        for (const ship of this.model.ships.values()) {\n            const { x, y, a } = this.smoothPosAndAngle(ship);\n            this.context.save();\n            this.context.translate(x, y);\n            if (ship.score) this.context.fillText(ship.score, 30, 15);\n            this.context.rotate(a);\n            if (ship.wasHit) this.drawShipDebris(ship.wasHit);\n            else this.drawShip(ship.forward, ship.viewId === this.viewId);\n            this.context.restore();\n        }\n        for (const asteroid of this.model.asteroids) {\n            const { x, y, a } = this.smoothPosAndAngle(asteroid);\n            this.context.save();\n            this.context.translate(x, y);\n            this.context.rotate(a);\n            if (asteroid.wasHit) this.drawAsteroidDebris(asteroid.size, asteroid.wasHit * 2);\n            else this.drawAsteroid(asteroid.size);\n            this.context.restore();\n        }\n        for (const blast of this.model.blasts) {\n            const { x, y } = this.smoothPos(blast);\n            this.context.save();\n            this.context.translate(x, y);\n            this.drawBlast();\n            this.context.restore();\n        }\n    }\n\n    smoothPos(obj) {\n        if (!this.smoothing.has(obj)) {\n            this.smoothing.set(obj, { x: obj.x, y: obj.y, a: obj.a });\n        }\n        const smoothed = this.smoothing.get(obj);\n        const dx = obj.x - smoothed.x;\n        const dy = obj.y - smoothed.y;\n        if (Math.abs(dx) < 50) smoothed.x += dx * 0.3; else smoothed.x = obj.x;\n        if (Math.abs(dy) < 50) smoothed.y += dy * 0.3; else smoothed.y = obj.y;\n        return smoothed;\n    }\n\n    smoothPosAndAngle(obj) {\n        const smoothed = this.smoothPos(obj);\n        const da = obj.a - smoothed.a;\n        if (Math.abs(da) < 1) smoothed.a += da * 0.3; else smoothed.a = obj.a;\n        return smoothed;\n    }\n\n    drawShip(thrust, highlight) {\n        this.context.beginPath();\n        this.context.moveTo(+20,   0);\n        this.context.lineTo(-20, +10);\n        this.context.lineTo(-20, -10);\n        this.context.closePath();\n        this.context.stroke();\n        if (highlight) {\n            this.context.fill();\n        }\n        if (thrust) {\n            this.context.beginPath();\n            this.context.moveTo(-20, +5);\n            this.context.lineTo(-30,  0);\n            this.context.lineTo(-20, -5);\n            this.context.stroke();\n        }\n    }\n\n    drawShipDebris(t) {\n        this.context.beginPath();\n        this.context.moveTo(+20 + t,   0 + t);\n        this.context.lineTo(-20 + t, +10 + t);\n        this.context.moveTo(-20 - t * 1.4, +10);\n        this.context.lineTo(-20 - t * 1.4, -10);\n        this.context.moveTo(-20 + t, -10 - t);\n        this.context.lineTo(+20 + t,   0 - t);\n        this.context.stroke();\n    }\n\n    drawAsteroid(size) {\n        this.context.beginPath();\n        this.context.moveTo(+size,  0);\n        this.context.lineTo( 0, +size);\n        this.context.lineTo(-size,  0);\n        this.context.lineTo( 0, -size);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    drawAsteroidDebris(size, t) {\n        this.context.beginPath();\n        this.context.moveTo(+size + t,  0 + t);\n        this.context.lineTo( 0 + t, +size + t);\n        this.context.moveTo(-size - t,  0 - t);\n        this.context.lineTo( 0 - t, -size - t);\n        this.context.moveTo(-size - t,  0 + t);\n        this.context.lineTo( 0 - t, +size + t);\n        this.context.moveTo(+size + t,  0 - t);\n        this.context.lineTo( 0 + t, -size - t);\n        this.context.stroke();\n    }\n\n    drawBlast() {\n        this.context.beginPath();\n        this.context.ellipse(0, 0, 2, 2, 0, 0, 2 * Math.PI);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}\n\nCroquet.App.makeWidgetDock(); // shows QR code\n\nCroquet.Session.join({\n    apiKey: '1_i65fcn11n7lhrb5n890hs3dhj11hfzfej57pvlrx', // get your own from croquet.io/keys\n    appId: 'io.croquet.multiblaster',\n    name: Croquet.App.autoSession(),\n    password: Croquet.App.autoPassword(),\n    model: Game,\n    view: Display,\n});"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Croquet Multiblaster",
        "story": []
      },
      "date": 1654176685188
    },
    {
      "item": {
        "type": "factory",
        "id": "a9f53e5f608fb2e7"
      },
      "id": "a9f53e5f608fb2e7",
      "type": "add",
      "date": 1654176687606
    },
    {
      "type": "edit",
      "id": "a9f53e5f608fb2e7",
      "item": {
        "type": "paragraph",
        "id": "a9f53e5f608fb2e7",
        "text": "â€“ [https://github.com/croquet/multiblaster github]"
      },
      "date": 1654176695450
    },
    {
      "id": "883e8a5fdd496df3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame."
      },
      "after": "a9f53e5f608fb2e7",
      "date": 1654177262452
    },
    {
      "type": "edit",
      "id": "a9f53e5f608fb2e7",
      "item": {
        "type": "paragraph",
        "id": "a9f53e5f608fb2e7",
        "text": "This is an homage to Asteroids, implemented as a single HTML page without any backend code. All clients are kept in sync automatically by Croquet's synchronization technology. [https://github.com/croquet/multiblaster github]"
      },
      "date": 1654177290042
    },
    {
      "type": "edit",
      "id": "a9f53e5f608fb2e7",
      "item": {
        "type": "paragraph",
        "id": "a9f53e5f608fb2e7",
        "text": "This is an homage to Asteroids, implemented as a single HTML page without any backend code. All clients are kept in sync automatically by [[Croquet]]'s synchronization technology. [https://github.com/croquet/multiblaster github]"
      },
      "date": 1654177303882
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "paragraph",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame and the **Script Tag** way to use "
      },
      "date": 1654177339747
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "paragraph",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame and the **Script Tag** way  to use Croquet:"
      },
      "date": 1654177356504
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "markdown",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame and the **Script Tag** way  to use Croquet:"
      },
      "date": 1654177357649
    },
    {
      "item": {
        "type": "factory",
        "id": "c50b7efeded4ac19"
      },
      "id": "c50b7efeded4ac19",
      "type": "add",
      "after": "883e8a5fdd496df3",
      "date": 1654177365431
    },
    {
      "type": "edit",
      "id": "c50b7efeded4ac19",
      "item": {
        "type": "code",
        "id": "c50b7efeded4ac19",
        "text": "       <meta charset=\"utf-8\">\n       <script src=\"https://unpkg.com/@croquet/croquet@1.0.5\"></script>\n"
      },
      "date": 1654177367323
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "markdown",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame and the **Script Tag** way  to use [[Croquet]]:"
      },
      "date": 1654177399160
    },
    {
      "item": {
        "type": "factory",
        "id": "030e8039030bf491"
      },
      "id": "030e8039030bf491",
      "type": "add",
      "after": "c50b7efeded4ac19",
      "date": 1654177415372
    },
    {
      "type": "edit",
      "id": "030e8039030bf491",
      "item": {
        "type": "paragraph",
        "id": "030e8039030bf491",
        "text": "[[Multiblaster]]"
      },
      "date": 1654177425421
    },
    {
      "type": "edit",
      "id": "030e8039030bf491",
      "item": {
        "type": "paragraph",
        "id": "030e8039030bf491",
        "text": "â‡’ [[Multiblaster]]"
      },
      "date": 1654177430764
    },
    {
      "type": "edit",
      "id": "030e8039030bf491",
      "item": {
        "type": "paragraph",
        "id": "030e8039030bf491",
        "text": "â‡’ [[Multiblaster]] (Frame test)"
      },
      "date": 1654177440416
    },
    {
      "id": "6e8c89022e2182db",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "6e8c89022e2182db",
        "text": "> First, get a free API key from [https://croquet.io/keys/ croquet.io/keys]"
      },
      "after": "883e8a5fdd496df3",
      "date": 1654177464296
    },
    {
      "id": "6e8c89022e2182db",
      "type": "move",
      "order": [
        "a9f53e5f608fb2e7",
        "6e8c89022e2182db",
        "883e8a5fdd496df3",
        "c50b7efeded4ac19",
        "030e8039030bf491"
      ],
      "date": 1654177514851
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "markdown",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame â‡’ **Script Tag** way  to use [[Croquet]]:"
      },
      "date": 1654177535232
    },
    {
      "type": "edit",
      "id": "883e8a5fdd496df3",
      "item": {
        "type": "markdown",
        "id": "883e8a5fdd496df3",
        "text": "Uses [[UNPKG]] Script and [https://croquet.io/docs/croquet/ api.croquet.io], XHR, Frame â‡’ **Script Tag**:"
      },
      "date": 1654177542086
    },
    {
      "type": "fork",
      "date": 1654177655038
    },
    {
      "type": "remove",
      "id": "6e8c89022e2182db",
      "date": 1654177950226
    },
    {
      "type": "remove",
      "id": "883e8a5fdd496df3",
      "date": 1654880566256
    },
    {
      "type": "remove",
      "id": "c50b7efeded4ac19",
      "date": 1654880568041
    },
    {
      "id": "8fc31fcfb9173268",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "8fc31fcfb9173268",
        "text": "~"
      },
      "after": "a9f53e5f608fb2e7",
      "date": 1654880572800
    },
    {
      "id": "04bfb2692d07aa60",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "04bfb2692d07aa60",
        "text": "Below this pagefold we reveal the code which does the [[Multiblaster]]. (See [[JS Snippet Template]] (`esm.html`) and [[Static Import Snippet]])"
      },
      "after": "030e8039030bf491",
      "date": 1654880575114
    },
    {
      "type": "remove",
      "id": "030e8039030bf491",
      "date": 1654880577713
    },
    {
      "id": "65d97c995c7adf15",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "65d97c995c7adf15",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 55"
      },
      "after": "04bfb2692d07aa60",
      "date": 1654880632982
    },
    {
      "id": "dfddd2d989966f0c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "dfddd2d989966f0c",
        "text": "Import [[Frame Integration Promises]] and setup DOM helpers."
      },
      "after": "65d97c995c7adf15",
      "date": 1654880636726
    },
    {
      "id": "5cbd82e529085e9a",
      "type": "add",
      "item": {
        "type": "code",
        "id": "5cbd82e529085e9a",
        "text": "import * as frame from \"https://wiki.ralfbarkow.ch/assets/v1/frame.js\"\nconst $ = (s, el=document) => el.querySelector(s)\nconst $$ = (s, el=document) => \n  Array.from(el.querySelectorAll(s))"
      },
      "after": "dfddd2d989966f0c",
      "date": 1654880645543
    },
    {
      "item": {
        "type": "factory",
        "id": "de4f559aaec5c4d8"
      },
      "id": "de4f559aaec5c4d8",
      "type": "add",
      "after": "5cbd82e529085e9a",
      "date": 1654880658029
    },
    {
      "type": "edit",
      "id": "de4f559aaec5c4d8",
      "item": {
        "type": "code",
        "id": "de4f559aaec5c4d8",
        "text": "// Code that does it.\n\nexport async function emit(el) {\n el.innerHTML = 2 + 3\n}\n\n"
      },
      "date": 1654880660120
    },
    {
      "type": "add",
      "id": "1cd026bafd4cfd73",
      "item": {
        "type": "paragraph",
        "id": "1cd026bafd4cfd73",
        "text": "Assets:"
      },
      "after": "a9f53e5f608fb2e7",
      "date": 1654880705909
    },
    {
      "id": "da82ff21a12b1b28",
      "type": "add",
      "item": {
        "type": "assets",
        "id": "da82ff21a12b1b28",
        "text": "pages/croquet-multiblaster"
      },
      "after": "1cd026bafd4cfd73",
      "date": 1654880708940
    },
    {
      "type": "edit",
      "id": "de4f559aaec5c4d8",
      "item": {
        "type": "code",
        "id": "de4f559aaec5c4d8",
        "text": "class Game extends Croquet.Model {\n    init() {\n        this.ships = new Map();\n        this.asteroids = new Set();\n        this.blasts = new Set();\n        this.subscribe(this.sessionId, \"view-join\", this.viewJoined);\n        this.subscribe(this.sessionId, \"view-exit\", this.viewExited);\n        Asteroid.create({});\n        this.mainLoop();\n    }\n\n    viewJoined(viewId) {\n        const ship = Ship.create({ viewId });\n        this.ships.set(viewId, ship);\n    }\n\n    viewExited(viewId) {\n        const ship = this.ships.get(viewId);\n        this.ships.delete(viewId);\n        ship.destroy();\n    }\n\n    checkCollisions() {\n        for (const asteroid of this.asteroids) {\n            if (asteroid.wasHit) continue;\n            const minx = asteroid.x - asteroid.size;\n            const maxx = asteroid.x + asteroid.size;\n            const miny = asteroid.y - asteroid.size;\n            const maxy = asteroid.y + asteroid.size;\n            for (const blast of this.blasts) {\n                if (blast.x > minx && blast.x < maxx && blast.y > miny && blast.y < maxy) {\n                    asteroid.hitBy(blast);\n                    break;\n                }\n            }\n            for (const ship of this.ships.values()) {\n                if (!ship.wasHit && ship.x + 10 > minx && ship.x - 10 < maxx && ship.y + 10 > miny && ship.y - 10 < maxy) {\n                    if (!ship.score && Math.abs(ship.x-500) + Math.abs(ship.y-500) < 40) continue; // no hit if just spawned\n                    ship.hitBy(asteroid);\n                    break;\n                }\n            }\n        }\n    }\n\n    mainLoop() {\n        for (const ship of this.ships.values()) ship.move();\n        for (const asteroid of this.asteroids) asteroid.move();\n        for (const blast of this.blasts) blast.move();\n        this.checkCollisions();\n        this.future(50).mainLoop(); // move & check every 50 ms\n    }\n}\nGame.register(\"Game\");"
      },
      "date": 1654880790643
    },
    {
      "id": "8ca86f0eb2f8116a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8ca86f0eb2f8116a",
        "text": "Import Croquet Version: 1.1.0-12"
      },
      "after": "5cbd82e529085e9a",
      "date": 1654880803953
    },
    {
      "item": {
        "type": "factory",
        "id": "7c0451e9d559d03c"
      },
      "id": "7c0451e9d559d03c",
      "type": "add",
      "after": "de4f559aaec5c4d8",
      "date": 1654880815637
    },
    {
      "id": "7c0451e9d559d03c",
      "type": "move",
      "order": [
        "a9f53e5f608fb2e7",
        "1cd026bafd4cfd73",
        "da82ff21a12b1b28",
        "8fc31fcfb9173268",
        "04bfb2692d07aa60",
        "65d97c995c7adf15",
        "dfddd2d989966f0c",
        "5cbd82e529085e9a",
        "8ca86f0eb2f8116a",
        "7c0451e9d559d03c",
        "de4f559aaec5c4d8"
      ],
      "date": 1654880822149
    },
    {
      "type": "edit",
      "id": "7c0451e9d559d03c",
      "item": {
        "type": "code",
        "id": "7c0451e9d559d03c",
        "text": "import * as Croquet from \"https://wiki.ralfbarkow.ch/assets/v1/frame.js\""
      },
      "date": 1654880854241
    },
    {
      "type": "edit",
      "id": "7c0451e9d559d03c",
      "item": {
        "type": "code",
        "id": "7c0451e9d559d03c",
        "text": "import * as Croquet from \"https://wiki.ralfbarkow.ch/assets/pages/croquet-multiblaster/croquet-croquet.js\""
      },
      "date": 1654880875679
    },
    {
      "type": "edit",
      "id": "65d97c995c7adf15",
      "item": {
        "type": "frame",
        "id": "65d97c995c7adf15",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 55"
      },
      "date": 1654880957368
    },
    {
      "type": "edit",
      "id": "a9f53e5f608fb2e7",
      "item": {
        "type": "paragraph",
        "id": "a9f53e5f608fb2e7",
        "text": "This is an homage to Asteroids, implemented as a single HTML page without any backend code. All clients are kept in sync automatically by [[Croquet]]'s synchronization technology. [https://github.com/croquet/multiblaster github], [https://croquet.io/multiblaster/index.html?q=9zguex297g#pw=InauQyhaxzp-QOFJqn9H-A"
      },
      "date": 1654881010593
    },
    {
      "type": "edit",
      "id": "a9f53e5f608fb2e7",
      "item": {
        "type": "paragraph",
        "id": "a9f53e5f608fb2e7",
        "text": "This is an homage to Asteroids, implemented as a single HTML page without any backend code. All clients are kept in sync automatically by [[Croquet]]'s synchronization technology. [https://github.com/croquet/multiblaster github], [https://croquet.io/multiblaster/index.html?q=9zguex297g#pw=InauQyhaxzp-QOFJqn9H-A play it!]"
      },
      "date": 1654881040312
    },
    {
      "type": "edit",
      "id": "65d97c995c7adf15",
      "item": {
        "type": "frame",
        "id": "65d97c995c7adf15",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 55"
      },
      "date": 1654881141905
    },
    {
      "type": "edit",
      "id": "de4f559aaec5c4d8",
      "item": {
        "type": "code",
        "id": "de4f559aaec5c4d8",
        "text": "class Ship extends Croquet.Model {\n    init({ viewId }) {\n        this.viewId = viewId;\n        this.reset();\n        this.subscribe(viewId, \"left-thruster\", this.leftThruster);\n        this.subscribe(viewId, \"right-thruster\", this.rightThruster);\n        this.subscribe(viewId, \"forward-thruster\", this.forwardThruster);\n        this.subscribe(viewId, \"fire-blaster\", this.fireBlaster);\n    }\n\n    reset() {\n        this.x = 500;\n        this.y = 500;\n        this.a = -Math.PI / 2;\n        this.dx = 0;\n        this.dy = 0;\n        this.left = false;\n        this.right = false;\n        this.forward = false;\n        this.score = 0;\n        this.wasHit = 0;\n    }\n\n    leftThruster(active) {\n        if (this.wasHit) return;\n        this.left = active;\n    }\n\n    rightThruster(active) {\n        if (this.wasHit) return;\n        this.right = active;\n    }\n\n    forwardThruster(active) {\n        if (this.wasHit) return;\n        this.forward = active;\n    }\n\n    fireBlaster() {\n        if (this.wasHit) return;\n        const dx = Math.cos(this.a) * 20;\n        const dy = Math.sin(this.a) * 20;\n        const x = this.x + dx;\n        const y = this.y + dy;\n        Blast.create({ x, y, dx, dy, ship: this });\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris for 3 seconds\n            if (++this.wasHit > 60) this.reset();\n        } else {\n            // process thruster controls\n            if (this.forward) {\n                this.dx += Math.cos(this.a) * 0.5;\n                this.dy += Math.sin(this.a) * 0.5;\n                if (this.dx > 10) this.dx = 10;\n                if (this.dx < -10) this.dx = -10;\n                if (this.dy > 10) this.dy = 10;\n                if (this.dy < -10) this.dy = -10;\n            }\n            if (this.left) this.a -= 0.2;\n            if (this.right) this.a += 0.2;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n        // drift through space\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n    }\n\n    hitBy(asteroid) {\n        // turn both into debris\n        this.wasHit = 1;\n        asteroid.wasHit = 1;\n    }\n}\nShip.register(\"Ship\");"
      },
      "date": 1654881156127
    },
    {
      "type": "remove",
      "id": "de4f559aaec5c4d8",
      "date": 1654881240975
    },
    {
      "type": "edit",
      "id": "7c0451e9d559d03c",
      "item": {
        "type": "code",
        "id": "7c0451e9d559d03c",
        "text": "import * from \"https://wiki.ralfbarkow.ch/assets/pages/croquet-multiblaster/croquet-croquet.js\""
      },
      "date": 1654881279065
    },
    {
      "type": "edit",
      "id": "7c0451e9d559d03c",
      "item": {
        "type": "code",
        "id": "7c0451e9d559d03c",
        "text": "import Croquet from \"https://wiki.ralfbarkow.ch/assets/pages/croquet-multiblaster/croquet-croquet.js\""
      },
      "date": 1654881304629
    },
    {
      "type": "edit",
      "id": "7c0451e9d559d03c",
      "item": {
        "type": "code",
        "id": "7c0451e9d559d03c",
        "text": "import * from \"https://wiki.ralfbarkow.ch/assets/pages/croquet-multiblaster/croquet-croquet.js\""
      },
      "date": 1654881952341
    },
    {
      "type": "edit",
      "id": "7c0451e9d559d03c",
      "item": {
        "type": "code",
        "id": "7c0451e9d559d03c",
        "text": "import * as from \"https://wiki.ralfbarkow.ch/assets/pages/croquet-multiblaster/croquet-croquet.js\""
      },
      "date": 1654881971203
    },
    {
      "type": "edit",
      "id": "7c0451e9d559d03c",
      "item": {
        "type": "code",
        "id": "7c0451e9d559d03c",
        "text": "import * as Croquet from \"https://wiki.ralfbarkow.ch/assets/pages/croquet-multiblaster/croquet-croquet.js\""
      },
      "date": 1654882083020
    },
    {
      "item": {
        "type": "factory",
        "id": "f13c132fb6df7379"
      },
      "id": "f13c132fb6df7379",
      "type": "add",
      "after": "7c0451e9d559d03c",
      "date": 1654882113557
    },
    {
      "type": "edit",
      "id": "f13c132fb6df7379",
      "item": {
        "type": "paragraph",
        "id": "f13c132fb6df7379",
        "text": "ReferenceError"
      },
      "date": 1654882116484
    },
    {
      "type": "edit",
      "id": "f13c132fb6df7379",
      "item": {
        "type": "paragraph",
        "id": "f13c132fb6df7379",
        "text": "ReferenceError: exports is not defined"
      },
      "date": 1654882125446
    },
    {
      "type": "edit",
      "id": "f13c132fb6df7379",
      "item": {
        "type": "paragraph",
        "id": "f13c132fb6df7379",
        "text": "**//FIXME** ReferenceError: exports is not defined"
      },
      "date": 1654882135580
    },
    {
      "type": "edit",
      "id": "f13c132fb6df7379",
      "item": {
        "type": "markdown",
        "id": "f13c132fb6df7379",
        "text": "**//FIXME** ReferenceError: exports is not defined"
      },
      "date": 1654882137029
    },
    {
      "type": "edit",
      "id": "8ca86f0eb2f8116a",
      "item": {
        "type": "paragraph",
        "id": "8ca86f0eb2f8116a",
        "text": "Import Bundle of @croquet/croquet Version: 1.1.0-12"
      },
      "date": 1654882227437
    },
    {
      "type": "edit",
      "id": "04bfb2692d07aa60",
      "item": {
        "type": "markdown",
        "id": "04bfb2692d07aa60",
        "text": "Below this pagefold we reveal the code which does the [[Multiblaster]] (cf [[JS Snippet Template]] (`esm.html`) and [[Static Import Snippet]])."
      },
      "date": 1654882264636
    },
    {
      "type": "edit",
      "id": "04bfb2692d07aa60",
      "item": {
        "type": "markdown",
        "id": "04bfb2692d07aa60",
        "text": "Below this pagefold we reveal the code which does the [[Multiblaster]] (cf. [[JS Snippet Template]] (`esm.html`) and [[Static Import Snippet]])."
      },
      "date": 1654882281307
    },
    {
      "type": "edit",
      "id": "04bfb2692d07aa60",
      "item": {
        "type": "markdown",
        "id": "04bfb2692d07aa60",
        "text": "Below this pagefold we reveal the code which does the [[Multiblaster]] (cf. [[JS Snippet Template]] (`esm.html`) and [[Static Import Snippet]] as well as [[Enrich Any SVG]])."
      },
      "date": 1654882428208
    },
    {
      "type": "edit",
      "id": "1cd026bafd4cfd73",
      "item": {
        "type": "paragraph",
        "id": "1cd026bafd4cfd73",
        "text": "Assets: (from [[World Core Tutorial 1]])"
      },
      "date": 1654882978424
    },
    {
      "type": "edit",
      "id": "1cd026bafd4cfd73",
      "item": {
        "type": "paragraph",
        "id": "1cd026bafd4cfd73",
        "text": "**Assets**: (from [[World Core Tutorial 1]])"
      },
      "date": 1654883003558
    },
    {
      "type": "edit",
      "id": "1cd026bafd4cfd73",
      "item": {
        "type": "markdown",
        "id": "1cd026bafd4cfd73",
        "text": "**Assets**: (from [[World Core Tutorial 1]])"
      },
      "date": 1654883005008
    },
    {
      "type": "fork",
      "date": 1654933376784
    },
    {
      "type": "edit",
      "id": "04bfb2692d07aa60",
      "item": {
        "type": "markdown",
        "id": "04bfb2692d07aa60",
        "text": "Below this pagefold we reveal the code which does the [[Multiblaster]] (cf. [[JS Snippet Template]] (`esm.html`) and [[Static Import Snippet]] as well as [[Enrich Any SVG]]).\n"
      },
      "date": 1654941336717
    },
    {
      "type": "add",
      "id": "bde168cafdce8ef2",
      "item": {
        "type": "markdown",
        "id": "bde168cafdce8ef2",
        "text": "**Frame**:"
      },
      "after": "04bfb2692d07aa60",
      "date": 1654941337462
    },
    {
      "type": "edit",
      "id": "65d97c995c7adf15",
      "item": {
        "type": "frame",
        "id": "65d97c995c7adf15",
        "text": "//wiki.ralfbarkow.ch/assets/pages/world-core-tutorial-1/run-world.html\nHEIGHT 55"
      },
      "date": 1654941348341
    },
    {
      "type": "edit",
      "id": "bde168cafdce8ef2",
      "item": {
        "type": "markdown",
        "id": "bde168cafdce8ef2",
        "text": "**Frame**: run-world.html"
      },
      "date": 1654942643522
    },
    {
      "type": "edit",
      "id": "bde168cafdce8ef2",
      "item": {
        "type": "markdown",
        "id": "bde168cafdce8ef2",
        "text": "**Frame**: `run-world.html`"
      },
      "date": 1654942666029
    },
    {
      "type": "remove",
      "id": "7c0451e9d559d03c",
      "date": 1655116121965
    },
    {
      "type": "edit",
      "id": "8ca86f0eb2f8116a",
      "item": {
        "type": "paragraph",
        "id": "8ca86f0eb2f8116a",
        "text": "â€¦"
      },
      "date": 1655116129537
    },
    {
      "item": {
        "type": "factory",
        "id": "619ae886090dff83"
      },
      "id": "619ae886090dff83",
      "type": "add",
      "after": "f13c132fb6df7379",
      "date": 1655116169402
    },
    {
      "type": "edit",
      "id": "619ae886090dff83",
      "item": {
        "type": "code",
        "id": "619ae886090dff83",
        "text": "class Game extends Croquet.Model {\n    init() {\n        this.ships = new Map();\n        this.asteroids = new Set();\n        this.blasts = new Set();\n        this.subscribe(this.sessionId, \"view-join\", this.viewJoined);\n        this.subscribe(this.sessionId, \"view-exit\", this.viewExited);\n        Asteroid.create({});\n        this.mainLoop();\n    }\n\n    viewJoined(viewId) {\n        const ship = Ship.create({ viewId });\n        this.ships.set(viewId, ship);\n    }\n\n    viewExited(viewId) {\n        const ship = this.ships.get(viewId);\n        this.ships.delete(viewId);\n        ship.destroy();\n    }\n\n    checkCollisions() {\n        for (const asteroid of this.asteroids) {\n            if (asteroid.wasHit) continue;\n            const minx = asteroid.x - asteroid.size;\n            const maxx = asteroid.x + asteroid.size;\n            const miny = asteroid.y - asteroid.size;\n            const maxy = asteroid.y + asteroid.size;\n            for (const blast of this.blasts) {\n                if (blast.x > minx && blast.x < maxx && blast.y > miny && blast.y < maxy) {\n                    asteroid.hitBy(blast);\n                    break;\n                }\n            }\n            for (const ship of this.ships.values()) {\n                if (!ship.wasHit && ship.x + 10 > minx && ship.x - 10 < maxx && ship.y + 10 > miny && ship.y - 10 < maxy) {\n                    if (!ship.score && Math.abs(ship.x-500) + Math.abs(ship.y-500) < 40) continue; // no hit if just spawned\n                    ship.hitBy(asteroid);\n                    break;\n                }\n            }\n        }\n    }\n\n    mainLoop() {\n        for (const ship of this.ships.values()) ship.move();\n        for (const asteroid of this.asteroids) asteroid.move();\n        for (const blast of this.blasts) blast.move();\n        this.checkCollisions();\n        this.future(50).mainLoop(); // move & check every 50 ms\n    }\n}\nGame.register(\"Game\");"
      },
      "date": 1655116171828
    },
    {
      "type": "remove",
      "id": "f13c132fb6df7379",
      "date": 1655116179962
    },
    {
      "item": {
        "type": "factory",
        "id": "6ad5c221ad42403a"
      },
      "id": "6ad5c221ad42403a",
      "type": "add",
      "after": "619ae886090dff83",
      "date": 1655116266322
    },
    {
      "type": "edit",
      "id": "6ad5c221ad42403a",
      "item": {
        "type": "code",
        "id": "6ad5c221ad42403a",
        "text": "class Ship extends Croquet.Model {\n    init({ viewId }) {\n        this.viewId = viewId;\n        this.reset();\n        this.subscribe(viewId, \"left-thruster\", this.leftThruster);\n        this.subscribe(viewId, \"right-thruster\", this.rightThruster);\n        this.subscribe(viewId, \"forward-thruster\", this.forwardThruster);\n        this.subscribe(viewId, \"fire-blaster\", this.fireBlaster);\n    }\n\n    reset() {\n        this.x = 500;\n        this.y = 500;\n        this.a = -Math.PI / 2;\n        this.dx = 0;\n        this.dy = 0;\n        this.left = false;\n        this.right = false;\n        this.forward = false;\n        this.score = 0;\n        this.wasHit = 0;\n    }\n\n    leftThruster(active) {\n        if (this.wasHit) return;\n        this.left = active;\n    }\n\n    rightThruster(active) {\n        if (this.wasHit) return;\n        this.right = active;\n    }\n\n    forwardThruster(active) {\n        if (this.wasHit) return;\n        this.forward = active;\n    }\n\n    fireBlaster() {\n        if (this.wasHit) return;\n        const dx = Math.cos(this.a) * 20;\n        const dy = Math.sin(this.a) * 20;\n        const x = this.x + dx;\n        const y = this.y + dy;\n        Blast.create({ x, y, dx, dy, ship: this });\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris for 3 seconds\n            if (++this.wasHit > 60) this.reset();\n        } else {\n            // process thruster controls\n            if (this.forward) {\n                this.dx += Math.cos(this.a) * 0.5;\n                this.dy += Math.sin(this.a) * 0.5;\n                if (this.dx > 10) this.dx = 10;\n                if (this.dx < -10) this.dx = -10;\n                if (this.dy > 10) this.dy = 10;\n                if (this.dy < -10) this.dy = -10;\n            }\n            if (this.left) this.a -= 0.2;\n            if (this.right) this.a += 0.2;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n        // drift through space\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n    }\n\n    hitBy(asteroid) {\n        // turn both into debris\n        this.wasHit = 1;\n        asteroid.wasHit = 1;\n    }\n}\nShip.register(\"Ship\");"
      },
      "date": 1655116268506
    },
    {
      "item": {
        "type": "factory",
        "id": "e2ab2000dade55c2"
      },
      "id": "e2ab2000dade55c2",
      "type": "add",
      "after": "6ad5c221ad42403a",
      "date": 1655116292022
    },
    {
      "type": "edit",
      "id": "e2ab2000dade55c2",
      "item": {
        "type": "code",
        "id": "e2ab2000dade55c2",
        "text": "class Asteroid extends Croquet.Model {\n    init({ size, x, y, a, dx, dy, da }) {\n        if (size) {\n            // init second asteroid after spliting\n            this.size = size;\n            this.x = x;\n            this.y = y;\n            this.a = a;\n            this.dx = dx;\n            this.dy = dy;\n            this.da = da;\n        } else {\n            // init new large asteroid\n            this.size = 40;\n            this.x = Math.random() * 400 - 200;\n            this.y = Math.random() * 400 - 200;\n            this.a = Math.random() * Math.PI * 2;\n            const speed = Math.random() * 4 + 1;\n            this.dx = Math.cos(this.a) * speed;\n            this.dy = Math.sin(this.a) * speed;\n            this.da = (0.02 + Math.random() * 0.03) * (Math.random() < 0.5 ? 1 : -1);\n            this.wasHit = 0;\n            this.move();\n        }\n        this.wellKnownModel(\"modelRoot\").asteroids.add(this);\n    }\n\n    move() {\n        if (this.wasHit) {\n            // keep drifting as debris, larger pieces drift longer\n            if (++this.wasHit > this.size) this.destroy();\n        }\n        this.x += this.dx;\n        this.y += this.dy;\n        if (this.x < 0) this.x += 1000;\n        if (this.x > 1000) this.x -= 1000;\n        if (this.y < 0) this.y += 1000;\n        if (this.y > 1000) this.y -= 1000;\n        if (!this.wasHit) {\n            this.a += this.da;\n            if (this.a < 0) this.a += Math.PI * 2;\n            if (this.a > Math.PI * 2) this.a -= Math.PI * 2;\n        }\n    }\n\n    hitBy(blast) {\n        if (!blast.ship.wasHit) blast.ship.score++;\n        if (this.size > 20) {\n            // split into two smaller faster asteroids\n            this.size *= 0.7;\n            this.da *= 1.5;\n            this.dx = -blast.dy * 10 / this.size;\n            this.dy = blast.dx * 10 / this.size;\n            Asteroid.create({ size: this.size, x: this.x, y: this.y, a: this.a, dx: -this.dx, dy: -this.dy, da: this.da });\n        } else {\n            // turn into debris\n            this.wasHit = 1;\n        }\n        blast.destroy();\n    }\n\n    destroy() {\n        const asteroids = this.wellKnownModel(\"modelRoot\").asteroids;\n        asteroids.delete(this);\n        super.destroy();\n        // keep at least 5 asteroids around\n        if (asteroids.size < 5) Asteroid.create({});\n    }\n}\nAsteroid.register(\"Asteroid\");"
      },
      "date": 1655116294048
    },
    {
      "item": {
        "type": "factory",
        "id": "5d0b0e921554af00"
      },
      "id": "5d0b0e921554af00",
      "type": "add",
      "after": "e2ab2000dade55c2",
      "date": 1655116321631
    },
    {
      "type": "edit",
      "id": "5d0b0e921554af00",
      "item": {
        "type": "code",
        "id": "5d0b0e921554af00",
        "text": "class Blast extends Croquet.Model {\n    init({x, y, dx, dy, ship}) {\n        this.ship = ship;\n        this.x = x;\n        this.y = y;\n        this.dx = dx;\n        this.dy = dy;\n        this.t = 0;\n        this.wellKnownModel(\"modelRoot\").blasts.add(this);\n    }\n\n    move() {\n        // move for 1.5 second before disappearing\n        if (++this.t < 30) {\n            this.x += this.dx;\n            this.y += this.dy;\n            if (this.x < 0) this.x += 1000;\n            if (this.x > 1000) this.x -= 1000;\n            if (this.y < 0) this.y += 1000;\n            if (this.y > 1000) this.y -= 1000;\n        } else {\n            this.destroy();\n        }\n    }\n\n    destroy() {\n        this.wellKnownModel(\"modelRoot\").blasts.delete(this);\n        super.destroy();\n    }\n}\nBlast.register(\"Blast\");"
      },
      "date": 1655116324859
    },
    {
      "item": {
        "type": "factory",
        "id": "f2bec2b8d6b48327"
      },
      "id": "f2bec2b8d6b48327",
      "type": "add",
      "after": "5d0b0e921554af00",
      "date": 1655116335439
    },
    {
      "type": "edit",
      "id": "f2bec2b8d6b48327",
      "item": {
        "type": "paragraph",
        "id": "f2bec2b8d6b48327",
        "text": "Code below is executed outside of synced VM"
      },
      "date": 1655116339498
    },
    {
      "item": {
        "type": "factory",
        "id": "630fea1d81fe2b9e"
      },
      "id": "630fea1d81fe2b9e",
      "type": "add",
      "after": "f2bec2b8d6b48327",
      "date": 1655116365126
    },
    {
      "type": "edit",
      "id": "630fea1d81fe2b9e",
      "item": {
        "type": "code",
        "id": "630fea1d81fe2b9e",
        "text": "class Display extends Croquet.View {\n    constructor(model) {\n        super(model);\n        this.model = model;\n\n        const joystick = document.getElementById(\"joystick\");\n        const knob = document.getElementById(\"knob\");\n\n        document.onkeydown = (e) => {\n            joystick.style.display = \"none\";\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", true); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", true); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", true); break;\n                case \" \":                              this.publish(this.viewId, \"fire-blaster\"); break;\n            }\n        };\n        document.onkeyup = (e) => {\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", false); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", false); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", false); break;\n            }\n        };\n\n        let x = 0, y = 0, id = 0, right = false, left = false, forward = false;\n        document.onpointerdown = (e) => {\n            if (!id) {\n                id = e.pointerId;\n                x = e.clientX;\n                y = e.clientY;\n                joystick.style.left = `${x - 60}px`;\n                joystick.style.top = `${y - 60}px`;\n                joystick.style.display = \"block\";\n            }\n        };\n        document.onpointermove = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (dx > 30) {\n                    dx = 30;\n                    if (!right) { this.publish(this.viewId, \"right-thruster\", true); right = true; }\n                } else if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (dx < -30) {\n                    dx = -30;\n                    if (!left) { this.publish(this.viewId, \"left-thruster\", true); left = true; }\n                } else if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false; }\n                if (dy < -30) {\n                    dy = -30;\n                    if (!forward) { this.publish(this.viewId, \"forward-thruster\", true); forward = true; }\n                } else if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                if (dy > 0) dy = 0;\n                knob.style.left = `${20 + dx}px`;\n                knob.style.top = `${20 + dy}px`;\n            }\n        }\n        document.onpointerup = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                id = 0;\n                if (!right && !left && !forward) {\n                    this.publish(this.viewId, \"fire-blaster\");\n                }\n                if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false;  }\n                if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                knob.style.left = `20px`;\n                knob.style.top = `20px`;\n            } else {\n                this.publish(this.viewId, \"fire-blaster\");\n            }\n        }\n        document.onpointercancel = document.onpointerup;\n        document.oncontextmenu = e => { e.preventDefault();  this.publish(this.viewId, \"fire-blaster\"); }\n        document.ontouchend = e => e.preventDefault(); // prevent double-tap zoom on iOS\n        codelink.ontouchend = () => codelink.click(); // but allow clicking link Â¯\\_(ãƒ„)_/Â¯\n\n        this.smoothing = new WeakMap(); // position cache for interpolated rendering\n\n        this.context = canvas.getContext(\"2d\");\n    }\n\n    // update is called once per render frame\n    // read from shared model, interpolate, render\n    update() {\n        this.context.clearRect(0, 0, 1000, 1000);\n        this.context.font = '40px sans-serif';\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"white\";\n        for (const ship of this.model.ships.values()) {\n            const { x, y, a } = this.smoothPosAndAngle(ship);\n            this.context.save();\n            this.context.translate(x, y);\n            if (ship.score) this.context.fillText(ship.score, 30, 15);\n            this.context.rotate(a);\n            if (ship.wasHit) this.drawShipDebris(ship.wasHit);\n            else this.drawShip(ship.forward, ship.viewId === this.viewId);\n            this.context.restore();\n        }\n        for (const asteroid of this.model.asteroids) {\n            const { x, y, a } = this.smoothPosAndAngle(asteroid);\n            this.context.save();\n            this.context.translate(x, y);\n            this.context.rotate(a);\n            if (asteroid.wasHit) this.drawAsteroidDebris(asteroid.size, asteroid.wasHit * 2);\n            else this.drawAsteroid(asteroid.size);\n            this.context.restore();\n        }\n        for (const blast of this.model.blasts) {\n            const { x, y } = this.smoothPos(blast);\n            this.context.save();\n            this.context.translate(x, y);\n            this.drawBlast();\n            this.context.restore();\n        }\n    }\n\n    smoothPos(obj) {\n        if (!this.smoothing.has(obj)) {\n            this.smoothing.set(obj, { x: obj.x, y: obj.y, a: obj.a });\n        }\n        const smoothed = this.smoothing.get(obj);\n        const dx = obj.x - smoothed.x;\n        const dy = obj.y - smoothed.y;\n        if (Math.abs(dx) < 50) smoothed.x += dx * 0.3; else smoothed.x = obj.x;\n        if (Math.abs(dy) < 50) smoothed.y += dy * 0.3; else smoothed.y = obj.y;\n        return smoothed;\n    }\n\n    smoothPosAndAngle(obj) {\n        const smoothed = this.smoothPos(obj);\n        const da = obj.a - smoothed.a;\n        if (Math.abs(da) < 1) smoothed.a += da * 0.3; else smoothed.a = obj.a;\n        return smoothed;\n    }\n\n    drawShip(thrust, highlight) {\n        this.context.beginPath();\n        this.context.moveTo(+20,   0);\n        this.context.lineTo(-20, +10);\n        this.context.lineTo(-20, -10);\n        this.context.closePath();\n        this.context.stroke();\n        if (highlight) {\n            this.context.fill();\n        }\n        if (thrust) {\n            this.context.beginPath();\n            this.context.moveTo(-20, +5);\n            this.context.lineTo(-30,  0);\n            this.context.lineTo(-20, -5);\n            this.context.stroke();\n        }\n    }\n\n    drawShipDebris(t) {\n        this.context.beginPath();\n        this.context.moveTo(+20 + t,   0 + t);\n        this.context.lineTo(-20 + t, +10 + t);\n        this.context.moveTo(-20 - t * 1.4, +10);\n        this.context.lineTo(-20 - t * 1.4, -10);\n        this.context.moveTo(-20 + t, -10 - t);\n        this.context.lineTo(+20 + t,   0 - t);\n        this.context.stroke();\n    }\n\n    drawAsteroid(size) {\n        this.context.beginPath();\n        this.context.moveTo(+size,  0);\n        this.context.lineTo( 0, +size);\n        this.context.lineTo(-size,  0);\n        this.context.lineTo( 0, -size);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    drawAsteroidDebris(size, t) {\n        this.context.beginPath();\n        this.context.moveTo(+size + t,  0 + t);\n        this.context.lineTo( 0 + t, +size + t);\n        this.context.moveTo(-size - t,  0 - t);\n        this.context.lineTo( 0 - t, -size - t);\n        this.context.moveTo(-size - t,  0 + t);\n        this.context.lineTo( 0 - t, +size + t);\n        this.context.moveTo(+size + t,  0 - t);\n        this.context.lineTo( 0 + t, -size - t);\n        this.context.stroke();\n    }\n\n    drawBlast() {\n        this.context.beginPath();\n        this.context.ellipse(0, 0, 2, 2, 0, 0, 2 * Math.PI);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}\n\nCroquet.App.makeWidgetDock(); // shows QR code\n\nCroquet.Session.join({\n    apiKey: '1_i65fcn11n7lhrb5n890hs3dhj11hfzfej57pvlrx', // get your own from croquet.io/keys\n    appId: 'io.croquet.multiblaster',\n    name: Croquet.App.autoSession(),\n    password: Croquet.App.autoPassword(),\n    model: Game,\n    view: Display,\n});"
      },
      "date": 1655116367023
    },
    {
      "type": "edit",
      "id": "1cd026bafd4cfd73",
      "item": {
        "type": "markdown",
        "id": "1cd026bafd4cfd73",
        "text": "**Assets**:"
      },
      "date": 1655116464287
    },
    {
      "type": "edit",
      "id": "630fea1d81fe2b9e",
      "item": {
        "type": "code",
        "id": "630fea1d81fe2b9e",
        "text": "class Display extends Croquet.View {\n    constructor(model) {\n        super(model);\n        this.model = model;\n\n        const joystick = document.getElementById(\"joystick\");\n        const knob = document.getElementById(\"knob\");\n\n        document.onkeydown = (e) => {\n            joystick.style.display = \"none\";\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", true); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", true); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", true); break;\n                case \" \":                              this.publish(this.viewId, \"fire-blaster\"); break;\n            }\n        };\n        document.onkeyup = (e) => {\n            if (e.repeat) return;\n            switch (e.key) {\n                case \"a\": case \"A\": case \"ArrowLeft\":  this.publish(this.viewId, \"left-thruster\", false); break;\n                case \"d\": case \"D\": case \"ArrowRight\": this.publish(this.viewId, \"right-thruster\", false); break;\n                case \"w\": case \"W\": case \"ArrowUp\":    this.publish(this.viewId, \"forward-thruster\", false); break;\n            }\n        };\n\n        let x = 0, y = 0, id = 0, right = false, left = false, forward = false;\n        document.onpointerdown = (e) => {\n            if (!id) {\n                id = e.pointerId;\n                x = e.clientX;\n                y = e.clientY;\n                joystick.style.left = `${x - 60}px`;\n                joystick.style.top = `${y - 60}px`;\n                joystick.style.display = \"block\";\n            }\n        };\n        document.onpointermove = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                let dx = e.clientX - x;\n                let dy = e.clientY - y;\n                if (dx > 30) {\n                    dx = 30;\n                    if (!right) { this.publish(this.viewId, \"right-thruster\", true); right = true; }\n                } else if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (dx < -30) {\n                    dx = -30;\n                    if (!left) { this.publish(this.viewId, \"left-thruster\", true); left = true; }\n                } else if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false; }\n                if (dy < -30) {\n                    dy = -30;\n                    if (!forward) { this.publish(this.viewId, \"forward-thruster\", true); forward = true; }\n                } else if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                if (dy > 0) dy = 0;\n                knob.style.left = `${20 + dx}px`;\n                knob.style.top = `${20 + dy}px`;\n            }\n        }\n        document.onpointerup = (e) => {\n            e.preventDefault();\n            if (id === e.pointerId) {\n                id = 0;\n                if (!right && !left && !forward) {\n                    this.publish(this.viewId, \"fire-blaster\");\n                }\n                if (right) { this.publish(this.viewId, \"right-thruster\", false); right = false; }\n                if (left) { this.publish(this.viewId, \"left-thruster\", false); left = false;  }\n                if (forward) { this.publish(this.viewId, \"forward-thruster\", false); forward = false; }\n                knob.style.left = `20px`;\n                knob.style.top = `20px`;\n            } else {\n                this.publish(this.viewId, \"fire-blaster\");\n            }\n        }\n        document.onpointercancel = document.onpointerup;\n        document.oncontextmenu = e => { e.preventDefault();  this.publish(this.viewId, \"fire-blaster\"); }\n        document.ontouchend = e => e.preventDefault(); // prevent double-tap zoom on iOS\n        codelink.ontouchend = () => codelink.click(); // but allow clicking link\n\n        this.smoothing = new WeakMap(); // position cache for interpolated rendering\n\n        this.context = canvas.getContext(\"2d\");\n    }\n\n    // update is called once per render frame\n    // read from shared model, interpolate, render\n    update() {\n        this.context.clearRect(0, 0, 1000, 1000);\n        this.context.font = '40px sans-serif';\n        this.context.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n        this.context.lineWidth = 3;\n        this.context.strokeStyle = \"white\";\n        for (const ship of this.model.ships.values()) {\n            const { x, y, a } = this.smoothPosAndAngle(ship);\n            this.context.save();\n            this.context.translate(x, y);\n            if (ship.score) this.context.fillText(ship.score, 30, 15);\n            this.context.rotate(a);\n            if (ship.wasHit) this.drawShipDebris(ship.wasHit);\n            else this.drawShip(ship.forward, ship.viewId === this.viewId);\n            this.context.restore();\n        }\n        for (const asteroid of this.model.asteroids) {\n            const { x, y, a } = this.smoothPosAndAngle(asteroid);\n            this.context.save();\n            this.context.translate(x, y);\n            this.context.rotate(a);\n            if (asteroid.wasHit) this.drawAsteroidDebris(asteroid.size, asteroid.wasHit * 2);\n            else this.drawAsteroid(asteroid.size);\n            this.context.restore();\n        }\n        for (const blast of this.model.blasts) {\n            const { x, y } = this.smoothPos(blast);\n            this.context.save();\n            this.context.translate(x, y);\n            this.drawBlast();\n            this.context.restore();\n        }\n    }\n\n    smoothPos(obj) {\n        if (!this.smoothing.has(obj)) {\n            this.smoothing.set(obj, { x: obj.x, y: obj.y, a: obj.a });\n        }\n        const smoothed = this.smoothing.get(obj);\n        const dx = obj.x - smoothed.x;\n        const dy = obj.y - smoothed.y;\n        if (Math.abs(dx) < 50) smoothed.x += dx * 0.3; else smoothed.x = obj.x;\n        if (Math.abs(dy) < 50) smoothed.y += dy * 0.3; else smoothed.y = obj.y;\n        return smoothed;\n    }\n\n    smoothPosAndAngle(obj) {\n        const smoothed = this.smoothPos(obj);\n        const da = obj.a - smoothed.a;\n        if (Math.abs(da) < 1) smoothed.a += da * 0.3; else smoothed.a = obj.a;\n        return smoothed;\n    }\n\n    drawShip(thrust, highlight) {\n        this.context.beginPath();\n        this.context.moveTo(+20,   0);\n        this.context.lineTo(-20, +10);\n        this.context.lineTo(-20, -10);\n        this.context.closePath();\n        this.context.stroke();\n        if (highlight) {\n            this.context.fill();\n        }\n        if (thrust) {\n            this.context.beginPath();\n            this.context.moveTo(-20, +5);\n            this.context.lineTo(-30,  0);\n            this.context.lineTo(-20, -5);\n            this.context.stroke();\n        }\n    }\n\n    drawShipDebris(t) {\n        this.context.beginPath();\n        this.context.moveTo(+20 + t,   0 + t);\n        this.context.lineTo(-20 + t, +10 + t);\n        this.context.moveTo(-20 - t * 1.4, +10);\n        this.context.lineTo(-20 - t * 1.4, -10);\n        this.context.moveTo(-20 + t, -10 - t);\n        this.context.lineTo(+20 + t,   0 - t);\n        this.context.stroke();\n    }\n\n    drawAsteroid(size) {\n        this.context.beginPath();\n        this.context.moveTo(+size,  0);\n        this.context.lineTo( 0, +size);\n        this.context.lineTo(-size,  0);\n        this.context.lineTo( 0, -size);\n        this.context.closePath();\n        this.context.stroke();\n    }\n\n    drawAsteroidDebris(size, t) {\n        this.context.beginPath();\n        this.context.moveTo(+size + t,  0 + t);\n        this.context.lineTo( 0 + t, +size + t);\n        this.context.moveTo(-size - t,  0 - t);\n        this.context.lineTo( 0 - t, -size - t);\n        this.context.moveTo(-size - t,  0 + t);\n        this.context.lineTo( 0 - t, +size + t);\n        this.context.moveTo(+size + t,  0 - t);\n        this.context.lineTo( 0 + t, -size - t);\n        this.context.stroke();\n    }\n\n    drawBlast() {\n        this.context.beginPath();\n        this.context.ellipse(0, 0, 2, 2, 0, 0, 2 * Math.PI);\n        this.context.closePath();\n        this.context.stroke();\n    }\n}\n\nCroquet.App.makeWidgetDock(); // shows QR code\n\nCroquet.Session.join({\n    apiKey: '1_i65fcn11n7lhrb5n890hs3dhj11hfzfej57pvlrx', // get your own from croquet.io/keys\n    appId: 'io.croquet.multiblaster',\n    name: Croquet.App.autoSession(),\n    password: Croquet.App.autoPassword(),\n    model: Game,\n    view: Display,\n});"
      },
      "date": 1655116705163
    },
    {
      "type": "edit",
      "id": "04bfb2692d07aa60",
      "item": {
        "type": "markdown",
        "id": "04bfb2692d07aa60",
        "text": "Below this pagefold we reveal the code which does the [[Multiblaster]]."
      },
      "date": 1655116949120
    },
    {
      "type": "edit",
      "id": "1cd026bafd4cfd73",
      "item": {
        "type": "markdown",
        "id": "1cd026bafd4cfd73",
        "text": "**Assets**:\n"
      },
      "date": 1655222246503
    },
    {
      "type": "add",
      "id": "bc4c0e45ee6e3780",
      "item": {
        "type": "markdown",
        "id": "bc4c0e45ee6e3780",
        "text": "[https://wiki.ralfbarkow.ch/assets/pages/croquet-multiblaster/index.html enlarge]"
      },
      "after": "1cd026bafd4cfd73",
      "date": 1655222253949
    },
    {
      "id": "bc4c0e45ee6e3780",
      "type": "move",
      "order": [
        "a9f53e5f608fb2e7",
        "1cd026bafd4cfd73",
        "da82ff21a12b1b28",
        "bc4c0e45ee6e3780",
        "8fc31fcfb9173268",
        "04bfb2692d07aa60",
        "bde168cafdce8ef2",
        "65d97c995c7adf15",
        "dfddd2d989966f0c",
        "5cbd82e529085e9a",
        "8ca86f0eb2f8116a",
        "619ae886090dff83",
        "6ad5c221ad42403a",
        "e2ab2000dade55c2",
        "5d0b0e921554af00",
        "f2bec2b8d6b48327",
        "630fea1d81fe2b9e"
      ],
      "date": 1655222255898
    }
  ]
}