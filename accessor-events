{
  "title": "Accessor Events",
  "story": [
    {
      "type": "html",
      "text": "Accessor events are automatic and syntactically transparent accessor methods. For example, in [[Visual Fox Pro]] 6, if a method named property_Assign() exists, this method fires automatically when property is modified.  If a method named property_Access() is defined, this method fires automatically when property is read.  The property_Assign() and property_Access() methods, if they exist, are responsible for completing the transaction and circularities are preempted by the class internals.",
      "id": "fc35dc787b8b784da7c96aed0b2606f0"
    },
    {
      "type": "html",
      "text": "\nMoreover, if a method named THIS_Access() is defined, this method fires for every property read, every property write, and every method call.  This_Access() should return an object instance (usually THIS) that will handle the message.  Think of this as a pre-hook for all inbound messages destined to an instance.",
      "id": "3cd4fccee3f96606a41e7dbb86027d25"
    },
    {
      "type": "html",
      "text": "\nAn example, in [[Visual Fox Pro]] 6 code:",
      "id": "c91c1d464138241f232da385b199ad1b"
    },
    {
      "type": "code",
      "text": "  x= CREATE(\"Foo\")\n  x.Caption= \"this is lowercase\"\n  ?x.Caption  && echoes \"The Caption is: THIS IS LOWERCASE\"\n  ?x.Tag      && echoes \"Instance B\"",
      "id": "0f1d03d705a4643a02e58aa94ba80b30"
    },
    {
      "type": "code",
      "text": "  DEFINE CLASS Foo AS Label\n    Caption= \"\"\n    Tag= \"Instance A\"",
      "id": "b33515e8219db7afaf12812f076ac146"
    },
    {
      "type": "code",
      "text": "    FUNCTION Caption_Assign( tcPassed)\n      *-- Force caption to uppercase\n      THIS.Caption= UPPER( tcPassed)",
      "id": "a98282ab005c4abc902529c9d1410c4d"
    },
    {
      "type": "code",
      "text": "    FUNCTION Caption_Access\n       RETURN \"The Caption is: \" + THIS.Caption\n    \n    FUNCTION THIS.Access()\n      LOCAL oBar\n      oBar= CREATE( \"Foo\")\n      oBar.Tag= \"Instance B\"\n      RETURN oBar",
      "id": "57d00b0cf1334ead577844fb3414a851"
    },
    {
      "type": "code",
      "text": "  ENDDEFINE",
      "id": "69eb1f973cb3b4b880fc89d510f710b8"
    },
    {
      "type": "html",
      "text": "\nIs this cool, or what?    [[Steven Black]]",
      "id": "c8907f2afb75712c20048f17e563a6d4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ea82d5ee874c4e3342e0807e03cf92c6"
    },
    {
      "type": "html",
      "text": "Yes. I believe [[Sather Language]] (and [[Cecil Language]] and probably others) are similar, and [[Lisp Language]] variants ([[Common Lisp Object System]]) go way back. Another approach is to use a [[Meta Object Protocol]] to change what assignment etc mean for particular objects.",
      "id": "dbce82626995a7ef034880727af80748"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "62226fb01d29f7ea7974133a986a914c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ea82d5ee874c4e3342e0807e03cf92c6"
    },
    {
      "type": "html",
      "text": "[[Category Jargon]] [[Category Events]]",
      "id": "537c186b2fb575d685c83e3ee8594c7b"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AccessorEvents c2.com]",
      "id": "9d511d06f6155801f27613ab2461e861"
    }
  ],
  "journal": [
    {
      "date": 1172435431000,
      "id": "49917c20bd1b4a5dd8af03c8d44bb494",
      "type": "create",
      "item": {
        "title": "Accessor Events",
        "story": [
          {
            "type": "html",
            "text": "Accessor events are automatic and syntactically transparent accessor methods. For example, in [[Visual Fox Pro]] 6, if a method named property_Assign() exists, this method fires automatically when property is modified.  If a method named property_Access() is defined, this method fires automatically when property is read.  The property_Assign() and property_Access() methods, if they exist, are responsible for completing the transaction and circularities are preempted by the class internals.",
            "id": "fc35dc787b8b784da7c96aed0b2606f0"
          },
          {
            "type": "html",
            "text": "\nMoreover, if a method named THIS_Access() is defined, this method fires for every property read, every property write, and every method call.  This_Access() should return an object instance (usually THIS) that will handle the message.  Think of this as a pre-hook for all inbound messages destined to an instance.",
            "id": "3cd4fccee3f96606a41e7dbb86027d25"
          },
          {
            "type": "html",
            "text": "\nAn example, in [[Visual Fox Pro]] 6 code:",
            "id": "c91c1d464138241f232da385b199ad1b"
          },
          {
            "type": "code",
            "text": "  x= CREATE(\"Foo\")\n  x.Caption= \"this is lowercase\"\n  ?x.Caption  && echoes \"The Caption is: THIS IS LOWERCASE\"\n  ?x.Tag      && echoes \"Instance B\"",
            "id": "0f1d03d705a4643a02e58aa94ba80b30"
          },
          {
            "type": "code",
            "text": "  DEFINE CLASS Foo AS Label\n    Caption= \"\"\n    Tag= \"Instance A\"",
            "id": "b33515e8219db7afaf12812f076ac146"
          },
          {
            "type": "code",
            "text": "    FUNCTION Caption_Assign( tcPassed)\n      *-- Force caption to uppercase\n      THIS.Caption= UPPER( tcPassed)",
            "id": "a98282ab005c4abc902529c9d1410c4d"
          },
          {
            "type": "code",
            "text": "    FUNCTION Caption_Access\n       RETURN \"The Caption is: \" + THIS.Caption\n    \n    FUNCTION THIS.Access()\n      LOCAL oBar\n      oBar= CREATE( \"Foo\")\n      oBar.Tag= \"Instance B\"\n      RETURN oBar",
            "id": "57d00b0cf1334ead577844fb3414a851"
          },
          {
            "type": "code",
            "text": "  ENDDEFINE",
            "id": "69eb1f973cb3b4b880fc89d510f710b8"
          },
          {
            "type": "html",
            "text": "\nIs this cool, or what?    [[Steven Black]]",
            "id": "c8907f2afb75712c20048f17e563a6d4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ea82d5ee874c4e3342e0807e03cf92c6"
          },
          {
            "type": "html",
            "text": "Yes. I believe [[Sather Language]] (and [[Cecil Language]] and probably others) are similar, and [[Lisp Language]] variants ([[Common Lisp Object System]]) go way back. Another approach is to use a [[Meta Object Protocol]] to change what assignment etc mean for particular objects.",
            "id": "dbce82626995a7ef034880727af80748"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "62226fb01d29f7ea7974133a986a914c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ea82d5ee874c4e3342e0807e03cf92c6"
          },
          {
            "type": "html",
            "text": "[[Category Jargon]] [[Category Events]]",
            "id": "537c186b2fb575d685c83e3ee8594c7b"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AccessorEvents c2.com]",
            "id": "9d511d06f6155801f27613ab2461e861"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1645326898071
    }
  ]
}