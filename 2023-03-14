{
  "title": "2023-03-14",
  "story": [
    {
      "type": "paragraph",
      "id": "e87c8d484e110941",
      "text": "⇒ [[Lineup]] ⇒ [[Lineage]] ⇒ [[Read Context of Frame]] ⇒ [[Open Page in Lineup]] ⇒ [[Reference Filter]] ⇒ [[JavaScript Streams]]"
    },
    {
      "type": "paragraph",
      "id": "3b51715a4691c631",
      "text": "⇒ [[Hiccup]], Use case [https://github.com/thi-ng/umbrella/tree/develop/packages/hiccup#use-cases github]: .innerHTML body generation [https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML mdn]"
    },
    {
      "type": "reference",
      "id": "1c42dc322b531731",
      "site": "js.ward.asia.wiki.org",
      "slug": "learning-to-like-javascript",
      "title": "Learning to Like Javascript",
      "text": "Javascript is nearly as old as the browser itself. I once considered a silly language but my attitude has changed."
    },
    {
      "type": "paragraph",
      "id": "1e67f3a1e6867755",
      "text": "⇒  [[rdom]] ⇒ [[ellipse-proximity]] ⇒ [[Closest Points on Ellipses]] ⇒ [[rdom-svg-nodes]]"
    },
    {
      "type": "pagefold",
      "id": "a60bfd65d3a8d7d8",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "31d49681f15d6a3f",
      "text": "Considering #HyperCard's immense impact on interaction design, hypermedia and also the modern \"no/low code\" movement (ahem..) – one of [[Karsten Schmidt]]'s favorite tidbits/folklore is that the idea for this tool came to Bill Atkinson during an LSD trip … [https://mastodon.thi.ng/@toxi/110004456853287500 post]"
    },
    {
      "type": "video",
      "id": "cc358a7c4fde421c",
      "text": "YOUTUBE INdByDjhClU\nTriangulation 247: [[Bill Atkinson]] Part 2"
    },
    {
      "type": "reference",
      "id": "69dc82e35929fa39",
      "site": "found.ward.bay.wiki.org",
      "slug": "hypertalk-by-dan-winkler",
      "title": "HyperTalk by Dan Winkler",
      "text": "HyperTalk was designed by Bill Atkinson [sic] to encourage 'programming for the rest of us'. It is a deceptively powerful and extensible language that introduced a lot of people to the basics of programming through a simple English-like syntax, making it easy to learn quickly enough to write off the top of your head, then hack around while you're actually using the result."
    },
    {
      "type": "pagefold",
      "id": "af6e6628acfba2e5",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "b1bcf89a63a4a178",
      "text": "⇒ [[2D Plane from Graph]]"
    },
    {
      "type": "paragraph",
      "id": "efdefd9f9c2c39f9",
      "text": "⇒ [[rstream-dot]]"
    },
    {
      "type": "paragraph",
      "id": "a0fa0c6b1dffe32a",
      "text": "⇒ [[Reactive Canvas]]"
    },
    {
      "type": "markdown",
      "id": "350f126b223d7613",
      "text": "* Reactive Canvas with TypeScript and Vue [https://dev.to/deciduously/reactive-canvas-with-typescript-and-vue-1ne9 post]"
    },
    {
      "type": "pagefold",
      "id": "2da7427dda1dc47a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "e70d1e7a67626960",
      "text": "thi-ng [https://github.com/thi-ng/umbrella/blob/develop/examples/README.md examples]"
    },
    {
      "type": "paragraph",
      "id": "9e66b9e636627f6a",
      "text": "parse-playground [https://github.com/thi-ng/umbrella/tree/develop/examples/parse-playground#parse-playground github] – Parser grammar livecoding editor/playground & codegen"
    },
    {
      "type": "video",
      "id": "2bf6f1e0c856b1d7",
      "text": "YOUTUBE mXp92s_VP40\nthi.ng/umbrella livestream #1 (take 2)"
    },
    {
      "type": "paragraph",
      "id": "e102d17a6f8cdf01",
      "text": "[https://youtu.be/mXp92s_VP40?t=646 video] – [https://github.com/thi-ng/umbrella/tree/develop/packages/transducers#blog-posts blog-posts]"
    },
    {
      "type": "markdown",
      "id": "41afb49e13a797fa",
      "text": "* [https://youtu.be/mXp92s_VP40?t=697 $compile]"
    },
    {
      "type": "paragraph",
      "id": "0272b23de8cbfe6e",
      "text": "[[@thi.ng/rdom]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-03-14",
        "story": []
      },
      "date": 1678773016311
    },
    {
      "id": "e87c8d484e110941",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e87c8d484e110941",
        "text": "⇒ [[Lineup]] ⇒ [[Lineage]]"
      },
      "attribution": {
        "page": "2023-03-13"
      },
      "date": 1678773024591
    },
    {
      "id": "8f6cd01c3027db08",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8f6cd01c3027db08",
        "text": "⇒ [[Read Context of Frame]] ⇒ [[Open Page in Lineup]] ⇒ [[Reference Filter]]"
      },
      "after": "e87c8d484e110941",
      "attribution": {
        "page": "2023-03-13"
      },
      "date": 1678773031010
    },
    {
      "type": "remove",
      "id": "8f6cd01c3027db08",
      "date": 1678773034940
    },
    {
      "type": "edit",
      "id": "e87c8d484e110941",
      "item": {
        "type": "paragraph",
        "id": "e87c8d484e110941",
        "text": "⇒ [[Lineup]] ⇒ [[Lineage]] ⇒ [[Read Context of Frame]] ⇒ [[Open Page in Lineup]] ⇒ [[Reference Filter]]"
      },
      "date": 1678773036864
    },
    {
      "item": {
        "type": "factory",
        "id": "3b51715a4691c631"
      },
      "id": "3b51715a4691c631",
      "type": "add",
      "after": "e87c8d484e110941",
      "date": 1678773071871
    },
    {
      "type": "edit",
      "id": "3b51715a4691c631",
      "item": {
        "type": "paragraph",
        "id": "3b51715a4691c631",
        "text": "Use case: "
      },
      "date": 1678773077593
    },
    {
      "type": "edit",
      "id": "3b51715a4691c631",
      "item": {
        "type": "paragraph",
        "id": "3b51715a4691c631",
        "text": "Use case: .innerHTML body generation"
      },
      "date": 1678773095567
    },
    {
      "item": {
        "type": "factory",
        "id": "1e67f3a1e6867755"
      },
      "id": "1e67f3a1e6867755",
      "type": "add",
      "after": "3b51715a4691c631",
      "date": 1678773522228
    },
    {
      "type": "edit",
      "id": "1e67f3a1e6867755",
      "item": {
        "type": "paragraph",
        "id": "1e67f3a1e6867755",
        "text": "[[rdom]]"
      },
      "date": 1678773527163
    },
    {
      "item": {
        "type": "factory",
        "id": "1c42dc322b531731"
      },
      "id": "1c42dc322b531731",
      "type": "add",
      "after": "1e67f3a1e6867755",
      "date": 1678773537137
    },
    {
      "type": "edit",
      "id": "1c42dc322b531731",
      "item": {
        "type": "reference",
        "id": "1c42dc322b531731",
        "site": "js.ward.asia.wiki.org",
        "slug": "learning-to-like-javascript",
        "title": "Learning to Like Javascript",
        "text": "Javascript is nearly as old as the browser itself. I once considered a silly language but my attitude has changed."
      },
      "date": 1678773552080
    },
    {
      "type": "edit",
      "id": "3b51715a4691c631",
      "item": {
        "type": "paragraph",
        "id": "3b51715a4691c631",
        "text": "⇒ [[Hiccup]], Use case: .innerHTML body generation"
      },
      "date": 1678773735690
    },
    {
      "type": "edit",
      "id": "3b51715a4691c631",
      "item": {
        "type": "paragraph",
        "id": "3b51715a4691c631",
        "text": "⇒ [[Hiccup]], Use case [https://github.com/thi-ng/umbrella/tree/develop/packages/hiccup#use-cases github]: .innerHTML body generation"
      },
      "date": 1678773800482
    },
    {
      "type": "edit",
      "id": "3b51715a4691c631",
      "item": {
        "type": "paragraph",
        "id": "3b51715a4691c631",
        "text": "⇒ [[Hiccup]], Use case [https://github.com/thi-ng/umbrella/tree/develop/packages/hiccup#use-cases github]: .innerHTML body generation [https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML mdn]"
      },
      "date": 1678773842107
    },
    {
      "id": "1c42dc322b531731",
      "type": "move",
      "order": [
        "e87c8d484e110941",
        "3b51715a4691c631",
        "1c42dc322b531731",
        "1e67f3a1e6867755"
      ],
      "date": 1678773883371
    },
    {
      "type": "edit",
      "id": "1e67f3a1e6867755",
      "item": {
        "type": "paragraph",
        "id": "1e67f3a1e6867755",
        "text": "⇒  [[rdom]]"
      },
      "date": 1678773894684
    },
    {
      "item": {
        "type": "factory",
        "id": "49cbc9e1e10bd3a7"
      },
      "id": "49cbc9e1e10bd3a7",
      "type": "add",
      "after": "1e67f3a1e6867755",
      "date": 1678774171095
    },
    {
      "type": "edit",
      "id": "49cbc9e1e10bd3a7",
      "item": {
        "type": "code",
        "id": "49cbc9e1e10bd3a7",
        "text": "import { closestPointEllipse } from \"@thi.ng/geom-closest-point\";\nimport { $compile } from \"@thi.ng/rdom\";\nimport { $canvas } from \"@thi.ng/rdom-canvas\";\nimport { merge, reactive } from \"@thi.ng/rstream\";\nimport { gestureStream } from \"@thi.ng/rstream-gestures\";\nimport { mapcat, repeatedly } from \"@thi.ng/transducers\";\nimport { add2, normalCCW, random2 } from \"@thi.ng/vectors\";\nconst W = 600;\n// define random ellipses ([origin, radius] tuples)\nconst ELLIPSES = [\n    ...repeatedly(() => [random2([], 50, W - 50), random2([], 10, W / 2)], 5),\n];\n// compile & mount reactive canvas component\n$compile($canvas(\n// stream merge\nmerge({\n    src: [\n        // #1 initial call to action...\n        reactive([\n            \"g\",\n            {},\n            [\n                \"text\",\n                { align: \"center\", fill: \"black\" },\n                [W / 2, W / 2],\n                \"Move your mouse / finger!\",\n            ],\n        ]),\n        // #2 stream of mouse/touch coordinates (main)\n        gestureStream(document.body).map((e) => [\n            \"g\",\n            // disable canvas clearing if no mouse buttons pressed\n            { fill: \"none\", __clear: !!e.buttons },\n            // semi-transparent white rect to fade previous frame\n            [\"rect\", { fill: [1, 1, 1, 0.2] }, [0, 0], W, W],\n            // declare ellipses, closest points and tangents\n            ...mapcat(([o, r]) => {\n                const p = closestPointEllipse(e.pos, o, r);\n                return [\n                    [\"ellipse\", { stroke: \"#ccc\" }, o, r],\n                    [\"circle\", { stroke: \"#f0f\" }, p, 5],\n                    [\"line\", { stroke: \"#666\" }, e.pos, p],\n                    [\n                        \"line\",\n                        { stroke: \"#6c0\" },\n                        p,\n                        add2(null, normalCCW([], p, e.pos, 100), p),\n                    ],\n                ];\n            }, ELLIPSES),\n        ]),\n    ],\n}), [W, W])).mount(document.getElementById(\"app\"));"
      },
      "date": 1678774173823
    },
    {
      "item": {
        "type": "factory",
        "id": "4d0b302b4b594e5c"
      },
      "id": "4d0b302b4b594e5c",
      "type": "add",
      "after": "49cbc9e1e10bd3a7",
      "date": 1678774185799
    },
    {
      "type": "edit",
      "id": "4d0b302b4b594e5c",
      "item": {
        "type": "paragraph",
        "id": "4d0b302b4b594e5c",
        "text": "[[ellipse-proximity]]"
      },
      "date": 1678774189572
    },
    {
      "id": "49cbc9e1e10bd3a7",
      "type": "remove",
      "removedTo": {
        "page": "ellipse-proximity"
      },
      "date": 1678774195045
    },
    {
      "type": "remove",
      "id": "4d0b302b4b594e5c",
      "date": 1678774549222
    },
    {
      "type": "edit",
      "id": "1e67f3a1e6867755",
      "item": {
        "type": "paragraph",
        "id": "1e67f3a1e6867755",
        "text": "⇒  [[rdom]] ⇒ [[ellipse-proximity]]"
      },
      "date": 1678774550495
    },
    {
      "type": "edit",
      "id": "1e67f3a1e6867755",
      "item": {
        "type": "paragraph",
        "id": "1e67f3a1e6867755",
        "text": "⇒  [[rdom]] ⇒ [[ellipse-proximity]] ⇒ [[rdom-svg-nodes]]"
      },
      "date": 1678775245020
    },
    {
      "type": "edit",
      "id": "e87c8d484e110941",
      "item": {
        "type": "paragraph",
        "id": "e87c8d484e110941",
        "text": "⇒ [[Lineup]] ⇒ [[Lineage]] ⇒ [[Read Context of Frame]] ⇒ [[Open Page in Lineup]] ⇒ [[Reference Filter]] ⇒ [[JavaScript Streams]]"
      },
      "date": 1678777387321
    },
    {
      "item": {
        "type": "factory",
        "id": "a60bfd65d3a8d7d8"
      },
      "id": "a60bfd65d3a8d7d8",
      "type": "add",
      "after": "1e67f3a1e6867755",
      "date": 1678779283561
    },
    {
      "type": "edit",
      "id": "a60bfd65d3a8d7d8",
      "item": {
        "type": "pagefold",
        "id": "a60bfd65d3a8d7d8",
        "text": "~"
      },
      "date": 1678779286657
    },
    {
      "item": {
        "type": "factory",
        "id": "cc358a7c4fde421c"
      },
      "id": "cc358a7c4fde421c",
      "type": "add",
      "after": "a60bfd65d3a8d7d8",
      "date": 1678779288001
    },
    {
      "type": "edit",
      "id": "cc358a7c4fde421c",
      "item": {
        "type": "video",
        "id": "cc358a7c4fde421c",
        "text": "YOUTUBE INdByDjhClU"
      },
      "date": 1678779302192
    },
    {
      "type": "edit",
      "id": "cc358a7c4fde421c",
      "item": {
        "type": "video",
        "id": "cc358a7c4fde421c",
        "text": "YOUTUBE INdByDjhClU\nTriangulation 247: Bill Atkinson Part 2"
      },
      "date": 1678779328861
    },
    {
      "item": {
        "type": "factory",
        "id": "31d49681f15d6a3f"
      },
      "id": "31d49681f15d6a3f",
      "type": "add",
      "after": "cc358a7c4fde421c",
      "date": 1678779344281
    },
    {
      "id": "31d49681f15d6a3f",
      "type": "move",
      "order": [
        "e87c8d484e110941",
        "3b51715a4691c631",
        "1c42dc322b531731",
        "1e67f3a1e6867755",
        "a60bfd65d3a8d7d8",
        "31d49681f15d6a3f",
        "cc358a7c4fde421c"
      ],
      "date": 1678779346231
    },
    {
      "type": "edit",
      "id": "31d49681f15d6a3f",
      "item": {
        "type": "paragraph",
        "id": "31d49681f15d6a3f",
        "text": "Considering #HyperCard's immense impact on interaction design, hypermedia and also the modern \"no/low code\" movement (ahem..) - one of my favorite tidbits/folklore is that the idea for this tool came to Bill Atkinson during an LSD trip..."
      },
      "date": 1678779347984
    },
    {
      "type": "edit",
      "id": "31d49681f15d6a3f",
      "item": {
        "type": "paragraph",
        "id": "31d49681f15d6a3f",
        "text": "Considering #HyperCard's immense impact on interaction design, hypermedia and also the modern \"no/low code\" movement (ahem..) – one of my favorite tidbits/folklore is that the idea for this tool came to Bill Atkinson during an LSD trip..."
      },
      "date": 1678779368696
    },
    {
      "type": "edit",
      "id": "31d49681f15d6a3f",
      "item": {
        "type": "paragraph",
        "id": "31d49681f15d6a3f",
        "text": "Considering #HyperCard's immense impact on interaction design, hypermedia and also the modern \"no/low code\" movement (ahem..) – one of [[Karsten Schmidt]]'s favorite tidbits/folklore is that the idea for this tool came to Bill Atkinson during an LSD trip … "
      },
      "date": 1678779407933
    },
    {
      "type": "edit",
      "id": "31d49681f15d6a3f",
      "item": {
        "type": "paragraph",
        "id": "31d49681f15d6a3f",
        "text": "Considering #HyperCard's immense impact on interaction design, hypermedia and also the modern \"no/low code\" movement (ahem..) – one of [[Karsten Schmidt]]'s favorite tidbits/folklore is that the idea for this tool came to Bill Atkinson during an LSD trip … [https://mastodon.thi.ng/@toxi/110004456853287500 post]"
      },
      "date": 1678779427137
    },
    {
      "type": "edit",
      "id": "cc358a7c4fde421c",
      "item": {
        "type": "video",
        "id": "cc358a7c4fde421c",
        "text": "YOUTUBE INdByDjhClU\nTriangulation 247: [[Bill Atkinson]] Part 2"
      },
      "date": 1678779434235
    },
    {
      "item": {
        "type": "factory",
        "id": "69dc82e35929fa39"
      },
      "id": "69dc82e35929fa39",
      "type": "add",
      "after": "cc358a7c4fde421c",
      "date": 1678779455827
    },
    {
      "type": "edit",
      "id": "69dc82e35929fa39",
      "item": {
        "type": "reference",
        "id": "69dc82e35929fa39",
        "site": "found.ward.bay.wiki.org",
        "slug": "hypertalk-by-dan-winkler",
        "title": "HyperTalk by Dan Winkler",
        "text": "HyperTalk was designed by Bill Atkinson [sic] to encourage 'programming for the rest of us'. It is a deceptively powerful and extensible language that introduced a lot of people to the basics of programming through a simple English-like syntax, making it easy to learn quickly enough to write off the top of your head, then hack around while you're actually using the result."
      },
      "date": 1678779459003
    },
    {
      "item": {
        "type": "factory",
        "id": "af6e6628acfba2e5"
      },
      "id": "af6e6628acfba2e5",
      "type": "add",
      "after": "69dc82e35929fa39",
      "date": 1678784955346
    },
    {
      "type": "edit",
      "id": "af6e6628acfba2e5",
      "item": {
        "type": "pagefold",
        "id": "af6e6628acfba2e5",
        "text": "~"
      },
      "date": 1678784958022
    },
    {
      "item": {
        "type": "factory",
        "id": "b1bcf89a63a4a178"
      },
      "id": "b1bcf89a63a4a178",
      "type": "add",
      "after": "af6e6628acfba2e5",
      "date": 1678784959652
    },
    {
      "type": "edit",
      "id": "b1bcf89a63a4a178",
      "item": {
        "type": "paragraph",
        "id": "b1bcf89a63a4a178",
        "text": "[[2D Plane from Graph]]"
      },
      "date": 1678784965188
    },
    {
      "type": "edit",
      "id": "b1bcf89a63a4a178",
      "item": {
        "type": "paragraph",
        "id": "b1bcf89a63a4a178",
        "text": "⇒ [[2D Plane from Graph]]"
      },
      "date": 1678797753795
    },
    {
      "item": {
        "type": "factory",
        "id": "45d0348aa6344644"
      },
      "id": "45d0348aa6344644",
      "type": "add",
      "after": "b1bcf89a63a4a178",
      "date": 1678798141417
    },
    {
      "type": "edit",
      "id": "45d0348aa6344644",
      "item": {
        "type": "code",
        "id": "45d0348aa6344644",
        "text": "import { serializeGraph } from \"@thi.ng/dot\";\n// node type style presets\nconst terminal = {\n    color: \"black\",\n    fontcolor: \"white\",\n};\n// operator nodes use \"Mrecord\" shape\n// with input and output port declarations\nconst operator = {\n    fillcolor: \"yellow\",\n    shape: \"Mrecord\",\n    ins: { 0: \"a\", 1: \"b\" },\n    outs: { \"out\": \"out\" }\n};\nserializeGraph({\n    directed: true,\n    // graph attributes\n    attribs: {\n        rankdir: \"LR\",\n        fontname: \"Inconsolata\",\n        fontsize: 9,\n        fontcolor: \"gray\",\n        label: \"Generated with @thi.ng/dot\",\n        labeljust: \"l\",\n        labelloc: \"b\",\n        // node defaults\n        node: {\n            style: \"filled\",\n            fontname: \"Inconsolata\",\n            fontsize: 11\n        },\n        // edge defaults\n        edge: {\n            arrowsize: 0.75,\n            fontname: \"Inconsolata\",\n            fontsize: 9\n        }\n    },\n    // graph nodes (the keys are used as node IDs)\n    // use spread operator to inject style presets\n    nodes: {\n        x: Object.assign(Object.assign({}, terminal), { label: \"x (12)\" }),\n        y: Object.assign(Object.assign({}, terminal), { label: \"y (23)\" }),\n        res: Object.assign(Object.assign({}, terminal), { label: \"result (8050)\", peripheries: 2 }),\n        op1: Object.assign(Object.assign({}, operator), { fillcolor: \"green\", label: \"op1\\n(+)\" }),\n        op2: Object.assign(Object.assign({}, operator), { label: \"op2\\n(*)\" }),\n    },\n    // graph edges (w/ optional ports & extra attribs)\n    edges: [\n        { src: \"x\", dest: \"op1\", destPort: 1 },\n        { src: \"y\", dest: \"op1\", destPort: 0 },\n        { src: \"y\", dest: \"op2\", destPort: 0, label: \"xform\", color: \"blue\" },\n        { src: \"op1\", srcPort: \"out\", dest: \"op2\", destPort: 1 },\n        { src: \"op2\", srcPort: \"out\", dest: \"res\" },\n    ]\n});"
      },
      "date": 1678798143657
    },
    {
      "id": "5396a0b4e33715c0",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "5396a0b4e33715c0",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 256"
      },
      "after": "45d0348aa6344644",
      "attribution": {
        "page": "rdom-svg-nodes"
      },
      "date": 1678798193423
    },
    {
      "type": "edit",
      "id": "45d0348aa6344644",
      "item": {
        "type": "code",
        "id": "45d0348aa6344644",
        "text": "import { serializeGraph } from \"https://cdn.skypack.dev/@thi.ng/dot\";\n// node type style presets\nconst terminal = {\n    color: \"black\",\n    fontcolor: \"white\",\n};\n// operator nodes use \"Mrecord\" shape\n// with input and output port declarations\nconst operator = {\n    fillcolor: \"yellow\",\n    shape: \"Mrecord\",\n    ins: { 0: \"a\", 1: \"b\" },\n    outs: { \"out\": \"out\" }\n};\nserializeGraph({\n    directed: true,\n    // graph attributes\n    attribs: {\n        rankdir: \"LR\",\n        fontname: \"Inconsolata\",\n        fontsize: 9,\n        fontcolor: \"gray\",\n        label: \"Generated with @thi.ng/dot\",\n        labeljust: \"l\",\n        labelloc: \"b\",\n        // node defaults\n        node: {\n            style: \"filled\",\n            fontname: \"Inconsolata\",\n            fontsize: 11\n        },\n        // edge defaults\n        edge: {\n            arrowsize: 0.75,\n            fontname: \"Inconsolata\",\n            fontsize: 9\n        }\n    },\n    // graph nodes (the keys are used as node IDs)\n    // use spread operator to inject style presets\n    nodes: {\n        x: Object.assign(Object.assign({}, terminal), { label: \"x (12)\" }),\n        y: Object.assign(Object.assign({}, terminal), { label: \"y (23)\" }),\n        res: Object.assign(Object.assign({}, terminal), { label: \"result (8050)\", peripheries: 2 }),\n        op1: Object.assign(Object.assign({}, operator), { fillcolor: \"green\", label: \"op1\\n(+)\" }),\n        op2: Object.assign(Object.assign({}, operator), { label: \"op2\\n(*)\" }),\n    },\n    // graph edges (w/ optional ports & extra attribs)\n    edges: [\n        { src: \"x\", dest: \"op1\", destPort: 1 },\n        { src: \"y\", dest: \"op1\", destPort: 0 },\n        { src: \"y\", dest: \"op2\", destPort: 0, label: \"xform\", color: \"blue\" },\n        { src: \"op1\", srcPort: \"out\", dest: \"op2\", destPort: 1 },\n        { src: \"op2\", srcPort: \"out\", dest: \"res\" },\n    ]\n});"
      },
      "date": 1678798212601
    },
    {
      "item": {
        "type": "factory",
        "id": "cc858f4bb722a100"
      },
      "id": "cc858f4bb722a100",
      "type": "add",
      "after": "5396a0b4e33715c0",
      "date": 1678798234719
    },
    {
      "type": "edit",
      "id": "45d0348aa6344644",
      "item": {
        "type": "code",
        "id": "45d0348aa6344644",
        "text": "import { serializeGraph } from \"https://cdn.skypack.dev/@thi.ng/dot\";\n"
      },
      "date": 1678798253979
    },
    {
      "type": "edit",
      "id": "cc858f4bb722a100",
      "item": {
        "type": "code",
        "id": "cc858f4bb722a100",
        "text": "// node type style presets\nconst terminal = {\n    color: \"black\",\n    fontcolor: \"white\",\n};\n// operator nodes use \"Mrecord\" shape\n// with input and output port declarations\nconst operator = {\n    fillcolor: \"yellow\",\n    shape: \"Mrecord\",\n    ins: { 0: \"a\", 1: \"b\" },\n    outs: { \"out\": \"out\" }\n};\nserializeGraph({\n    directed: true,\n    // graph attributes\n    attribs: {\n        rankdir: \"LR\",\n        fontname: \"Inconsolata\",\n        fontsize: 9,\n        fontcolor: \"gray\",\n        label: \"Generated with @thi.ng/dot\",\n        labeljust: \"l\",\n        labelloc: \"b\",\n        // node defaults\n        node: {\n            style: \"filled\",\n            fontname: \"Inconsolata\",\n            fontsize: 11\n        },\n        // edge defaults\n        edge: {\n            arrowsize: 0.75,\n            fontname: \"Inconsolata\",\n            fontsize: 9\n        }\n    },\n    // graph nodes (the keys are used as node IDs)\n    // use spread operator to inject style presets\n    nodes: {\n        x: Object.assign(Object.assign({}, terminal), { label: \"x (12)\" }),\n        y: Object.assign(Object.assign({}, terminal), { label: \"y (23)\" }),\n        res: Object.assign(Object.assign({}, terminal), { label: \"result (8050)\", peripheries: 2 }),\n        op1: Object.assign(Object.assign({}, operator), { fillcolor: \"green\", label: \"op1\\n(+)\" }),\n        op2: Object.assign(Object.assign({}, operator), { label: \"op2\\n(*)\" }),\n    },\n    // graph edges (w/ optional ports & extra attribs)\n    edges: [\n        { src: \"x\", dest: \"op1\", destPort: 1 },\n        { src: \"y\", dest: \"op1\", destPort: 0 },\n        { src: \"y\", dest: \"op2\", destPort: 0, label: \"xform\", color: \"blue\" },\n        { src: \"op1\", srcPort: \"out\", dest: \"op2\", destPort: 1 },\n        { src: \"op2\", srcPort: \"out\", dest: \"res\" },\n    ]\n});"
      },
      "date": 1678798255032
    },
    {
      "type": "edit",
      "id": "cc858f4bb722a100",
      "item": {
        "type": "code",
        "id": "cc858f4bb722a100",
        "text": "// define dependency graph\nconst graph = defDGraph([\n    [\"a\", \"b\"],\n    [\"a\", \"c\"],\n    [\"b\", \"d\"],\n    [\"c\", \"d\"],\n    [\"c\", \"e\"],\n]);\n\n// convert to graphviz format\nconsole.log(toDot(graph, { id: (node) => node }));\n// digraph g {\n// \"b\"[label=\"b\"];\n// \"c\"[label=\"c\"];\n// \"d\"[label=\"d\"];\n// \"e\"[label=\"e\"];\n// \"a\"[label=\"a\"];\n// \"b\" -> \"d\";\n// \"c\" -> \"d\";\n// \"c\" -> \"e\";\n// \"a\" -> \"b\";\n// \"a\" -> \"c\";\n// }"
      },
      "date": 1678798411266
    },
    {
      "type": "edit",
      "id": "45d0348aa6344644",
      "item": {
        "type": "code",
        "id": "45d0348aa6344644",
        "text": "import { defDGraph } from \"https://cdn.skypack.dev/@thi.ng/dgraph\";\nimport { toDot } from \"https://cdn.skypack.dev/@thi.ng/dgraph-dot\";"
      },
      "date": 1678798429933
    },
    {
      "type": "edit",
      "id": "cc858f4bb722a100",
      "item": {
        "type": "code",
        "id": "cc858f4bb722a100",
        "text": "\n\n// infinite iterator of randomized colors (Tachyons CSS class names)\n// used by `color` graph node below\nconst colors = choices([\n\t\"bg-red\",\n\t\"bg-blue\",\n\t\"bg-gold\",\n\t\"bg-light-green\",\n\t\"bg-pink\",\n\t\"bg-light-purple\",\n\t\"bg-orange\",\n\t\"bg-gray\",\n]);\n\n// atom for storing dataflow results (optional, here only for\n// debugging/stringifying graph state)\nconst db = defAtom<any>({});\n\n// combined mouse & touch event stream\n// this stream produces tuples of:\n// [eventtype, [pos, clickpos, delta]]\n// Note: only single touches are supported, no multitouch!\nconst gestures = gestureStream(document.getElementById(\"app\")!);\n\n// requestAnimationFrame() based counter stream. this is consumed by the\n// \"sine\" graph node below, but predefined here for visualization\n// purposes (see end of file)\nconst raf = fromRAF();\n\n// dataflow graph definition. each key in this object represents a node\n// in the graph and its value is a `NodeSpec`. the `initGraph` function\n// transforms these specs into a DAG (directed acyclic graph) of\n// @thi.ng/rstream types, so each \"node\" is actually implemented as a\n// stream of some kind...\n\n// the lexical order of node specs is irrelevant, but since the graph is\n// a DAG, no cyclic dependencies between nodes are allowed (and would\n// result in a stack overflow during node resolution)\n\n// the strings assigned to `out` values represent keys/paths in the\n// above `db` state atom and are used to store current stream values.\n// they're not necessary, but used here to capture and display the\n// current internal state of the graph and is useful for debugging /\n// backup etc.\nconst graph = initGraph(db, {\n\t// extracts current mouse/touch position from gesture tuple\n\t// the `[1, 0]` is the lookup path, i.e. `gesture[1][0]`\n\tmpos: {\n\t\tfn: extract([\"pos\"]),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"mpos\" },\n\t},\n\n\t// extracts last click position from gesture tuple\n\t// the `[1, 1]` is the lookup path, i.e. `gesture[1][1]`\n\t// (only defined during drag gestures)\n\tclickpos: {\n\t\tfn: extract([\"active\", 0, \"start\"]),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"clickpos\" },\n\t},\n\n\t// extracts & computes length of `delta` vector in gesture tuple\n\t// i.e. the distance between `clickpos` and current `mpos`\n\t// (`delta` is only defined during drag gestures)\n\t// `node1` is a helper function for nodes using only a single input\n\tdist: {\n\t\tfn: node1(\n\t\t\tmap((gesture) => {\n\t\t\t\tconst delta = getIn(gesture, [\"active\", 0, \"delta\"]);\n\t\t\t\treturn delta && Math.hypot.apply(null, delta) | 0;\n\t\t\t})\n\t\t),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"dist\" },\n\t},\n\n\t// combines `clickpos`, `dist` and `color` streams to produce a\n\t// stream of @thi.ng/hdom UI components (a circle around clickpos).\n\t// the resulting stream is then directly included in this app's root\n\t// component below... all inputs are locally renamed using the\n\t// stated input `id`s\n\t// `node` is a helper function to create a `StreamSync` based node\n\t// with multiple inputs\n\tcircle: {\n\t\tfn: node(\n\t\t\tmap((ins) => {\n\t\t\t\t// console.log(ins);\n\t\t\t\tconst { click, radius, color } = ins;\n\t\t\t\treturn click && radius && color\n\t\t\t\t\t? circle(color, click[0], click[1], radius * 2)\n\t\t\t\t\t: undefined;\n\t\t\t})\n\t\t),\n\t\tins: {\n\t\t\tclick: { stream: \"/clickpos/node\" },\n\t\t\tradius: { stream: \"/radius/node\" },\n\t\t\tcolor: { stream: \"/color/node\" },\n\t\t},\n\t\touts: { \"*\": \"circle\" },\n\t},\n\n\t// produces a new random color for each new drag gesture (and\n\t// therefore each new circle will have a potentially different\n\t// color). transformation is done using a composed transducer which\n\t// first dedupes click pos values and emits a new random color each\n\t// time clickpos is redefined (remember, clickpos is only defined\n\t// during drag gestures)\n\tcolor: {\n\t\tfn: node1(\n\t\t\tcomp(\n\t\t\t\tdedupe(equiv),\n\t\t\t\tmap((x) => x && colors.next().value)\n\t\t\t)\n\t\t),\n\t\tins: { src: { stream: \"/clickpos/node\" } },\n\t\touts: { \"*\": \"color\" },\n\t},\n\n\t// transforms a `requestAnimationFrame` event stream (frame counter @ 60fps)\n\t// into a sine wave with 0.6 .. 1.0 interval\n\tsine: {\n\t\tfn: node1(map((x: number) => 0.8 + 0.2 * Math.sin(x * 0.05))),\n\t\tins: { src: { stream: () => raf } },\n\t\touts: { \"*\": \"sin\" },\n\t},\n\n\t// multiplies `dist` and `sine` streams to produce an animated\n\t// radius value for `circle`\n\tradius: {\n\t\tfn: mul,\n\t\tins: {\n\t\t\ta: { stream: \"/sine/node\" },\n\t\t\tb: { stream: \"/dist/node\" },\n\t\t},\n\t\touts: { \"*\": \"radius\" },\n\t},\n});\n\n// start @thi.ng/hdom update loop\nstart(() => [\n\t\"div\",\n\t[\n\t\t\"pre.absolute.top-1.left-1.pa0.ma0.z-2.f7\",\n\t\tJSON.stringify(db.deref(), null, 2),\n\t],\n\t// note: direct embedding of result stream below. this works\n\t// since all @thi.ng/rstream subscriptions implement the\n\t// @thi.ng/api/IDeref interface (like several other types, e.g.\n\t// @thi.ng/atom's Atom, Cursor, View etc.)\n\tgraph.circle.node,\n]);\n\n// create a GraphViz DOT file of the entire dataflow graph\n// copy the output from the console into a new text file and then run:\n// `dot -Tsvg -o graph.svg graph.dot`\n//\n// see for more info:\n// https://github.com/thi-ng/umbrella/tree/develop/packages/rstream-dot\nconsole.log(toDot(walk([gestures, raf])));\n"
      },
      "date": 1678798910361
    },
    {
      "type": "edit",
      "id": "45d0348aa6344644",
      "item": {
        "type": "code",
        "id": "45d0348aa6344644",
        "text": "import { defDGraph } from \"https://cdn.skypack.dev/@thi.ng/dgraph\";\nimport { toDot } from \"https://cdn.skypack.dev/@thi.ng/dgraph-dot\";\n\nimport { defAtom } from \"https://cdn.skypack.dev/@thi.ng/atom\";\nimport { equiv } from \"https://cdn.skypack.dev/@thi.ng/equiv\";\nimport { start } from \"https://cdn.skypack.dev/@thi.ng/hdom\";\nimport { getIn } from \"https://cdn.skypack.dev/@thi.ng/paths\";\nimport { fromRAF } from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport { toDot, walk } from \"https://cdn.skypack.dev/@thi.ng/rstream-dot\";\nimport { gestureStream } from \"https://cdn.skypack.dev/@thi.ng/rstream-gestures\";\nimport { extract, initGraph, mul, node, node1 } from \"@thi.ng/rstream-graph\";\nimport { choices, comp, dedupe, map } from \"@thi.ng/transducers\";\n\nimport { circle } from \"./circle\";"
      },
      "date": 1678798945430
    },
    {
      "item": {
        "type": "factory",
        "id": "94f9e7cc601288f1"
      },
      "id": "94f9e7cc601288f1",
      "type": "add",
      "after": "cc858f4bb722a100",
      "date": 1678798991736
    },
    {
      "id": "94f9e7cc601288f1",
      "type": "move",
      "order": [
        "e87c8d484e110941",
        "3b51715a4691c631",
        "1c42dc322b531731",
        "1e67f3a1e6867755",
        "a60bfd65d3a8d7d8",
        "31d49681f15d6a3f",
        "cc358a7c4fde421c",
        "69dc82e35929fa39",
        "af6e6628acfba2e5",
        "b1bcf89a63a4a178",
        "45d0348aa6344644",
        "94f9e7cc601288f1",
        "5396a0b4e33715c0",
        "cc858f4bb722a100"
      ],
      "date": 1678799006047
    },
    {
      "type": "edit",
      "id": "94f9e7cc601288f1",
      "item": {
        "type": "code",
        "id": "94f9e7cc601288f1",
        "text": "const px = (x: number) => x.toFixed(3) + \"px\";\n\n// @thi.ng/hdom UI component function\nexport const circle = (col: string, x: number, y: number, w: number, h = w) => [\n\t\"div\",\n\t{\n\t\tclass: \"absolute z-1 white f7 tc br-100 o-80 \" + col,\n\t\tstyle: {\n\t\t\tleft: px(x - w / 2),\n\t\t\ttop: px(y - h / 2),\n\t\t\twidth: px(w),\n\t\t\theight: px(h),\n\t\t\t\"line-height\": px(h),\n\t\t},\n\t},\n\t`${x};${y}`,\n];\n"
      },
      "date": 1678799009983
    },
    {
      "type": "edit",
      "id": "45d0348aa6344644",
      "item": {
        "type": "code",
        "id": "45d0348aa6344644",
        "text": "import { defDGraph } from \"https://cdn.skypack.dev/@thi.ng/dgraph\";\nimport { toDot } from \"https://cdn.skypack.dev/@thi.ng/dgraph-dot\";\n\nimport { defAtom } from \"https://cdn.skypack.dev/@thi.ng/atom\";\nimport { equiv } from \"https://cdn.skypack.dev/@thi.ng/equiv\";\nimport { start } from \"https://cdn.skypack.dev/@thi.ng/hdom\";\nimport { getIn } from \"https://cdn.skypack.dev/@thi.ng/paths\";\nimport { fromRAF } from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport { toDot, walk } from \"https://cdn.skypack.dev/@thi.ng/rstream-dot\";\nimport { gestureStream } from \"https://cdn.skypack.dev/@thi.ng/rstream-gestures\";\nimport { extract, initGraph, mul, node, node1 } from \"@thi.ng/rstream-graph\";\nimport { choices, comp, dedupe, map } from \"@thi.ng/transducers\";\n\n"
      },
      "date": 1678799014035
    },
    {
      "type": "edit",
      "id": "cc858f4bb722a100",
      "item": {
        "type": "code",
        "id": "cc858f4bb722a100",
        "text": "\n// infinite iterator of randomized colors (Tachyons CSS class names)\n// used by `color` graph node below\nconst colors = choices([\n\t\"bg-red\",\n\t\"bg-blue\",\n\t\"bg-gold\",\n\t\"bg-light-green\",\n\t\"bg-pink\",\n\t\"bg-light-purple\",\n\t\"bg-orange\",\n\t\"bg-gray\",\n]);\n\n// atom for storing dataflow results (optional, here only for\n// debugging/stringifying graph state)\nconst db = defAtom<any>({});\n\n// combined mouse & touch event stream\n// this stream produces tuples of:\n// [eventtype, [pos, clickpos, delta]]\n// Note: only single touches are supported, no multitouch!\nconst gestures = gestureStream(document.getElementById(\"app\")!);\n\n// requestAnimationFrame() based counter stream. this is consumed by the\n// \"sine\" graph node below, but predefined here for visualization\n// purposes (see end of file)\nconst raf = fromRAF();\n\n// dataflow graph definition. each key in this object represents a node\n// in the graph and its value is a `NodeSpec`. the `initGraph` function\n// transforms these specs into a DAG (directed acyclic graph) of\n// @thi.ng/rstream types, so each \"node\" is actually implemented as a\n// stream of some kind...\n\n// the lexical order of node specs is irrelevant, but since the graph is\n// a DAG, no cyclic dependencies between nodes are allowed (and would\n// result in a stack overflow during node resolution)\n\n// the strings assigned to `out` values represent keys/paths in the\n// above `db` state atom and are used to store current stream values.\n// they're not necessary, but used here to capture and display the\n// current internal state of the graph and is useful for debugging /\n// backup etc.\nconst graph = initGraph(db, {\n\t// extracts current mouse/touch position from gesture tuple\n\t// the `[1, 0]` is the lookup path, i.e. `gesture[1][0]`\n\tmpos: {\n\t\tfn: extract([\"pos\"]),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"mpos\" },\n\t},\n\n\t// extracts last click position from gesture tuple\n\t// the `[1, 1]` is the lookup path, i.e. `gesture[1][1]`\n\t// (only defined during drag gestures)\n\tclickpos: {\n\t\tfn: extract([\"active\", 0, \"start\"]),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"clickpos\" },\n\t},\n\n\t// extracts & computes length of `delta` vector in gesture tuple\n\t// i.e. the distance between `clickpos` and current `mpos`\n\t// (`delta` is only defined during drag gestures)\n\t// `node1` is a helper function for nodes using only a single input\n\tdist: {\n\t\tfn: node1(\n\t\t\tmap((gesture) => {\n\t\t\t\tconst delta = getIn(gesture, [\"active\", 0, \"delta\"]);\n\t\t\t\treturn delta && Math.hypot.apply(null, delta) | 0;\n\t\t\t})\n\t\t),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"dist\" },\n\t},\n\n\t// combines `clickpos`, `dist` and `color` streams to produce a\n\t// stream of @thi.ng/hdom UI components (a circle around clickpos).\n\t// the resulting stream is then directly included in this app's root\n\t// component below... all inputs are locally renamed using the\n\t// stated input `id`s\n\t// `node` is a helper function to create a `StreamSync` based node\n\t// with multiple inputs\n\tcircle: {\n\t\tfn: node(\n\t\t\tmap((ins) => {\n\t\t\t\t// console.log(ins);\n\t\t\t\tconst { click, radius, color } = ins;\n\t\t\t\treturn click && radius && color\n\t\t\t\t\t? circle(color, click[0], click[1], radius * 2)\n\t\t\t\t\t: undefined;\n\t\t\t})\n\t\t),\n\t\tins: {\n\t\t\tclick: { stream: \"/clickpos/node\" },\n\t\t\tradius: { stream: \"/radius/node\" },\n\t\t\tcolor: { stream: \"/color/node\" },\n\t\t},\n\t\touts: { \"*\": \"circle\" },\n\t},\n\n\t// produces a new random color for each new drag gesture (and\n\t// therefore each new circle will have a potentially different\n\t// color). transformation is done using a composed transducer which\n\t// first dedupes click pos values and emits a new random color each\n\t// time clickpos is redefined (remember, clickpos is only defined\n\t// during drag gestures)\n\tcolor: {\n\t\tfn: node1(\n\t\t\tcomp(\n\t\t\t\tdedupe(equiv),\n\t\t\t\tmap((x) => x && colors.next().value)\n\t\t\t)\n\t\t),\n\t\tins: { src: { stream: \"/clickpos/node\" } },\n\t\touts: { \"*\": \"color\" },\n\t},\n\n\t// transforms a `requestAnimationFrame` event stream (frame counter @ 60fps)\n\t// into a sine wave with 0.6 .. 1.0 interval\n\tsine: {\n\t\tfn: node1(map((x: number) => 0.8 + 0.2 * Math.sin(x * 0.05))),\n\t\tins: { src: { stream: () => raf } },\n\t\touts: { \"*\": \"sin\" },\n\t},\n\n\t// multiplies `dist` and `sine` streams to produce an animated\n\t// radius value for `circle`\n\tradius: {\n\t\tfn: mul,\n\t\tins: {\n\t\t\ta: { stream: \"/sine/node\" },\n\t\t\tb: { stream: \"/dist/node\" },\n\t\t},\n\t\touts: { \"*\": \"radius\" },\n\t},\n});\n\n// start @thi.ng/hdom update loop\nstart(() => [\n\t\"div\",\n\t[\n\t\t\"pre.absolute.top-1.left-1.pa0.ma0.z-2.f7\",\n\t\tJSON.stringify(db.deref(), null, 2),\n\t],\n\t// note: direct embedding of result stream below. this works\n\t// since all @thi.ng/rstream subscriptions implement the\n\t// @thi.ng/api/IDeref interface (like several other types, e.g.\n\t// @thi.ng/atom's Atom, Cursor, View etc.)\n\tgraph.circle.node,\n]);\n\n// create a GraphViz DOT file of the entire dataflow graph\n// copy the output from the console into a new text file and then run:\n// `dot -Tsvg -o graph.svg graph.dot`\n//\n// see for more info:\n// https://github.com/thi-ng/umbrella/tree/develop/packages/rstream-dot\n//console.log(toDot(walk([gestures, raf])));\n"
      },
      "date": 1678799076745
    },
    {
      "type": "edit",
      "id": "45d0348aa6344644",
      "item": {
        "type": "code",
        "id": "45d0348aa6344644",
        "text": "import { defDGraph } from \"https://cdn.skypack.dev/@thi.ng/dgraph\";\nimport { toDot } from \"https://cdn.skypack.dev/@thi.ng/dgraph-dot\";\n\nimport { defAtom } from \"https://cdn.skypack.dev/@thi.ng/atom\";\nimport { equiv } from \"https://cdn.skypack.dev/@thi.ng/equiv\";\nimport { start } from \"https://cdn.skypack.dev/@thi.ng/hdom\";\nimport { getIn } from \"https://cdn.skypack.dev/@thi.ng/paths\";\nimport { fromRAF } from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport { walk } from \"https://cdn.skypack.dev/@thi.ng/rstream-dot\";\nimport { gestureStream } from \"https://cdn.skypack.dev/@thi.ng/rstream-gestures\";\nimport { extract, initGraph, mul, node, node1 } from \"@thi.ng/rstream-graph\";\nimport { choices, comp, dedupe, map } from \"@thi.ng/transducers\";\n\n"
      },
      "date": 1678799109768
    },
    {
      "type": "edit",
      "id": "cc858f4bb722a100",
      "item": {
        "type": "code",
        "id": "cc858f4bb722a100",
        "text": "// infinite iterator of randomized colors (Tachyons CSS class names)\n// used by `color` graph node below\nconst colors = choices([\n\t\"bg-red\",\n\t\"bg-blue\",\n\t\"bg-gold\",\n\t\"bg-light-green\",\n\t\"bg-pink\",\n\t\"bg-light-purple\",\n\t\"bg-orange\",\n\t\"bg-gray\",\n]);\n\n// atom for storing dataflow results (optional, here only for\n// debugging/stringifying graph state)\nconst db = defAtom<any>({});\n\n// combined mouse & touch event stream\n// this stream produces tuples of:\n// [eventtype, [pos, clickpos, delta]]\n// Note: only single touches are supported, no multitouch!\nconst gestures = gestureStream(document.getElementById(\"app\")!);\n\n// requestAnimationFrame() based counter stream. this is consumed by the\n// \"sine\" graph node below, but predefined here for visualization\n// purposes (see end of file)\nconst raf = fromRAF();\n\n// dataflow graph definition. each key in this object represents a node\n// in the graph and its value is a `NodeSpec`. the `initGraph` function\n// transforms these specs into a DAG (directed acyclic graph) of\n// @thi.ng/rstream types, so each \"node\" is actually implemented as a\n// stream of some kind...\n\n// the lexical order of node specs is irrelevant, but since the graph is\n// a DAG, no cyclic dependencies between nodes are allowed (and would\n// result in a stack overflow during node resolution)\n\n// the strings assigned to `out` values represent keys/paths in the\n// above `db` state atom and are used to store current stream values.\n// they're not necessary, but used here to capture and display the\n// current internal state of the graph and is useful for debugging /\n// backup etc.\nconst graph = initGraph(db, {\n\t// extracts current mouse/touch position from gesture tuple\n\t// the `[1, 0]` is the lookup path, i.e. `gesture[1][0]`\n\tmpos: {\n\t\tfn: extract([\"pos\"]),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"mpos\" },\n\t},\n\n\t// extracts last click position from gesture tuple\n\t// the `[1, 1]` is the lookup path, i.e. `gesture[1][1]`\n\t// (only defined during drag gestures)\n\tclickpos: {\n\t\tfn: extract([\"active\", 0, \"start\"]),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"clickpos\" },\n\t},\n\n\t// extracts & computes length of `delta` vector in gesture tuple\n\t// i.e. the distance between `clickpos` and current `mpos`\n\t// (`delta` is only defined during drag gestures)\n\t// `node1` is a helper function for nodes using only a single input\n\tdist: {\n\t\tfn: node1(\n\t\t\tmap((gesture) => {\n\t\t\t\tconst delta = getIn(gesture, [\"active\", 0, \"delta\"]);\n\t\t\t\treturn delta && Math.hypot.apply(null, delta) | 0;\n\t\t\t})\n\t\t),\n\t\tins: { src: { stream: () => gestures } },\n\t\touts: { \"*\": \"dist\" },\n\t},\n\n\t// combines `clickpos`, `dist` and `color` streams to produce a\n\t// stream of @thi.ng/hdom UI components (a circle around clickpos).\n\t// the resulting stream is then directly included in this app's root\n\t// component below... all inputs are locally renamed using the\n\t// stated input `id`s\n\t// `node` is a helper function to create a `StreamSync` based node\n\t// with multiple inputs\n\tcircle: {\n\t\tfn: node(\n\t\t\tmap((ins) => {\n\t\t\t\t// console.log(ins);\n\t\t\t\tconst { click, radius, color } = ins;\n\t\t\t\treturn click && radius && color\n\t\t\t\t\t? circle(color, click[0], click[1], radius * 2)\n\t\t\t\t\t: undefined;\n\t\t\t})\n\t\t),\n\t\tins: {\n\t\t\tclick: { stream: \"/clickpos/node\" },\n\t\t\tradius: { stream: \"/radius/node\" },\n\t\t\tcolor: { stream: \"/color/node\" },\n\t\t},\n\t\touts: { \"*\": \"circle\" },\n\t},\n\n\t// produces a new random color for each new drag gesture (and\n\t// therefore each new circle will have a potentially different\n\t// color). transformation is done using a composed transducer which\n\t// first dedupes click pos values and emits a new random color each\n\t// time clickpos is redefined (remember, clickpos is only defined\n\t// during drag gestures)\n\tcolor: {\n\t\tfn: node1(\n\t\t\tcomp(\n\t\t\t\tdedupe(equiv),\n\t\t\t\tmap((x) => x && colors.next().value)\n\t\t\t)\n\t\t),\n\t\tins: { src: { stream: \"/clickpos/node\" } },\n\t\touts: { \"*\": \"color\" },\n\t},\n\n\t// transforms a `requestAnimationFrame` event stream (frame counter @ 60fps)\n\t// into a sine wave with 0.6 .. 1.0 interval\n\tsine: {\n\t\tfn: node1(map((x: number) => 0.8 + 0.2 * Math.sin(x * 0.05))),\n\t\tins: { src: { stream: () => raf } },\n\t\touts: { \"*\": \"sin\" },\n\t},\n\n\t// multiplies `dist` and `sine` streams to produce an animated\n\t// radius value for `circle`\n\tradius: {\n\t\tfn: mul,\n\t\tins: {\n\t\t\ta: { stream: \"/sine/node\" },\n\t\t\tb: { stream: \"/dist/node\" },\n\t\t},\n\t\touts: { \"*\": \"radius\" },\n\t},\n});\n\n// start @thi.ng/hdom update loop\nstart(() => [\n\t\"div\",\n\t[\n\t\t\"pre.absolute.top-1.left-1.pa0.ma0.z-2.f7\",\n\t\tJSON.stringify(db.deref(), null, 2),\n\t],\n\t// note: direct embedding of result stream below. this works\n\t// since all @thi.ng/rstream subscriptions implement the\n\t// @thi.ng/api/IDeref interface (like several other types, e.g.\n\t// @thi.ng/atom's Atom, Cursor, View etc.)\n\tgraph.circle.node,\n]);\n\n// create a GraphViz DOT file of the entire dataflow graph\n// copy the output from the console into a new text file and then run:\n// `dot -Tsvg -o graph.svg graph.dot`\n//\n// see for more info:\n// https://github.com/thi-ng/umbrella/tree/develop/packages/rstream-dot\n//console.log(toDot(walk([gestures, raf])));\n"
      },
      "date": 1678799129759
    },
    {
      "type": "edit",
      "id": "45d0348aa6344644",
      "item": {
        "type": "code",
        "id": "45d0348aa6344644",
        "text": "import { defDGraph } from \"https://cdn.skypack.dev/@thi.ng/dgraph\";\nimport { toDot } from \"https://cdn.skypack.dev/@thi.ng/dgraph-dot\";\n\n"
      },
      "date": 1678799222286
    },
    {
      "type": "edit",
      "id": "cc858f4bb722a100",
      "item": {
        "type": "code",
        "id": "cc858f4bb722a100",
        "text": "// define dependency graph\nconst graph = defDGraph([\n    [\"a\", \"b\"],\n    [\"a\", \"c\"],\n    [\"b\", \"d\"],\n    [\"c\", \"d\"],\n    [\"c\", \"e\"],\n]);\n\n// convert to graphviz format\ntoDot(graph, { id: (node) => node });\n// digraph g {\n// \"b\"[label=\"b\"];\n// \"c\"[label=\"c\"];\n// \"d\"[label=\"d\"];\n// \"e\"[label=\"e\"];\n// \"a\"[label=\"a\"];\n// \"b\" -> \"d\";\n// \"c\" -> \"d\";\n// \"c\" -> \"e\";\n// \"a\" -> \"b\";\n// \"a\" -> \"c\";\n// }\n\n"
      },
      "date": 1678799255671
    },
    {
      "type": "remove",
      "id": "94f9e7cc601288f1",
      "date": 1678799259922
    },
    {
      "item": {
        "type": "factory",
        "id": "efdefd9f9c2c39f9"
      },
      "id": "efdefd9f9c2c39f9",
      "type": "add",
      "after": "cc858f4bb722a100",
      "date": 1678799460672
    },
    {
      "type": "edit",
      "id": "efdefd9f9c2c39f9",
      "item": {
        "type": "paragraph",
        "id": "efdefd9f9c2c39f9",
        "text": "[[rstream-spreadsheet]]"
      },
      "date": 1678799467636
    },
    {
      "id": "5396a0b4e33715c0",
      "type": "remove",
      "removedTo": {
        "page": "rstream-spreadsheet"
      },
      "date": 1678799516364
    },
    {
      "id": "45d0348aa6344644",
      "type": "remove",
      "removedTo": {
        "page": "rstream-spreadsheet"
      },
      "date": 1678799526932
    },
    {
      "id": "cc858f4bb722a100",
      "type": "remove",
      "removedTo": {
        "page": "rstream-spreadsheet"
      },
      "date": 1678799531213
    },
    {
      "type": "edit",
      "id": "efdefd9f9c2c39f9",
      "item": {
        "type": "paragraph",
        "id": "efdefd9f9c2c39f9",
        "text": "[[scenegraph]]"
      },
      "date": 1678799648345
    },
    {
      "type": "edit",
      "id": "efdefd9f9c2c39f9",
      "item": {
        "type": "paragraph",
        "id": "efdefd9f9c2c39f9",
        "text": "⇒ [[scenegraph]]"
      },
      "date": 1678799655070
    },
    {
      "type": "edit",
      "id": "efdefd9f9c2c39f9",
      "item": {
        "type": "paragraph",
        "id": "efdefd9f9c2c39f9",
        "text": "⇒ [[rstream-dot/]]"
      },
      "date": 1678799957454
    },
    {
      "type": "edit",
      "id": "efdefd9f9c2c39f9",
      "item": {
        "type": "paragraph",
        "id": "efdefd9f9c2c39f9",
        "text": "⇒ [[rstream-dot]]"
      },
      "date": 1678799962202
    },
    {
      "type": "edit",
      "id": "1e67f3a1e6867755",
      "item": {
        "type": "paragraph",
        "id": "1e67f3a1e6867755",
        "text": "⇒  [[rdom]] ⇒ [[ellipse-proximity]] ⇒ [[Closest Points on Ellipses]] ⇒ [[rdom-svg-nodes]]"
      },
      "date": 1678809404906
    },
    {
      "item": {
        "type": "factory",
        "id": "a0fa0c6b1dffe32a"
      },
      "id": "a0fa0c6b1dffe32a",
      "type": "add",
      "after": "efdefd9f9c2c39f9",
      "date": 1678809947726
    },
    {
      "type": "edit",
      "id": "a0fa0c6b1dffe32a",
      "item": {
        "type": "paragraph",
        "id": "a0fa0c6b1dffe32a",
        "text": "[[Reactive Canvas]]"
      },
      "date": 1678809951505
    },
    {
      "item": {
        "type": "factory",
        "id": "350f126b223d7613"
      },
      "id": "350f126b223d7613",
      "type": "add",
      "after": "a0fa0c6b1dffe32a",
      "date": 1678809991573
    },
    {
      "type": "edit",
      "id": "350f126b223d7613",
      "item": {
        "type": "markdown",
        "id": "350f126b223d7613",
        "text": "* Reactive Canvas with TypeScript and Vue"
      },
      "date": 1678809996064
    },
    {
      "type": "edit",
      "id": "350f126b223d7613",
      "item": {
        "type": "markdown",
        "id": "350f126b223d7613",
        "text": "* Reactive Canvas with TypeScript and Vue [https://dev.to/deciduously/reactive-canvas-with-typescript-and-vue-1ne9 post]"
      },
      "date": 1678810004628
    },
    {
      "type": "edit",
      "id": "a0fa0c6b1dffe32a",
      "item": {
        "type": "paragraph",
        "id": "a0fa0c6b1dffe32a",
        "text": "⇒ [[Reactive Canvas]]"
      },
      "date": 1678810024575
    },
    {
      "item": {
        "type": "factory",
        "id": "84c42cbc7f892235"
      },
      "id": "84c42cbc7f892235",
      "type": "add",
      "after": "350f126b223d7613",
      "date": 1678810190535
    },
    {
      "type": "edit",
      "id": "84c42cbc7f892235",
      "item": {
        "type": "paragraph",
        "id": "84c42cbc7f892235",
        "text": "How to communicate between iframe and the parent site?"
      },
      "date": 1678810193768
    },
    {
      "type": "edit",
      "id": "84c42cbc7f892235",
      "item": {
        "type": "paragraph",
        "id": "84c42cbc7f892235",
        "text": "How to communicate between iframe and the parent site? [https://stackoverflow.com/questions/9153445/how-to-communicate-between-iframe-and-the-parent-site stackoverflow]"
      },
      "date": 1678810642097
    },
    {
      "item": {
        "type": "factory",
        "id": "a05af4007d212ec3"
      },
      "id": "a05af4007d212ec3",
      "type": "add",
      "after": "84c42cbc7f892235",
      "date": 1678811105785
    },
    {
      "type": "edit",
      "id": "a05af4007d212ec3",
      "item": {
        "type": "markdown",
        "id": "a05af4007d212ec3",
        "text": "* use cross-document messaging."
      },
      "date": 1678811114008
    },
    {
      "type": "edit",
      "id": "a05af4007d212ec3",
      "item": {
        "type": "markdown",
        "id": "a05af4007d212ec3",
        "text": "* use cross-document messaging. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]"
      },
      "date": 1678811126946
    },
    {
      "type": "edit",
      "id": "a05af4007d212ec3",
      "item": {
        "type": "markdown",
        "id": "a05af4007d212ec3",
        "text": "* use cross-document messaging. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]\n* [[Transferable Objects]]"
      },
      "date": 1678811159470
    },
    {
      "type": "edit",
      "id": "a05af4007d212ec3",
      "item": {
        "type": "markdown",
        "id": "a05af4007d212ec3",
        "text": "* use cross-document messaging. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]\n* [[Transferable Objects]] [https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects mdn]"
      },
      "date": 1678811171493
    },
    {
      "type": "fork",
      "date": 1678811725515
    },
    {
      "item": {
        "type": "factory",
        "id": "2da7427dda1dc47a"
      },
      "id": "2da7427dda1dc47a",
      "type": "add",
      "after": "a05af4007d212ec3",
      "date": 1678811739698
    },
    {
      "type": "edit",
      "id": "2da7427dda1dc47a",
      "item": {
        "type": "pagefold",
        "id": "2da7427dda1dc47a",
        "text": "~"
      },
      "date": 1678811742515
    },
    {
      "item": {
        "type": "factory",
        "id": "e70d1e7a67626960"
      },
      "id": "e70d1e7a67626960",
      "type": "add",
      "after": "2da7427dda1dc47a",
      "date": 1678811743711
    },
    {
      "type": "edit",
      "id": "e70d1e7a67626960",
      "item": {
        "type": "paragraph",
        "id": "e70d1e7a67626960",
        "text": "thi-ng [https://github.com/thi-ng/umbrella/blob/develop/examples/README.md examples]]"
      },
      "date": 1678811759232
    },
    {
      "type": "edit",
      "id": "e70d1e7a67626960",
      "item": {
        "type": "paragraph",
        "id": "e70d1e7a67626960",
        "text": "thi-ng [https://github.com/thi-ng/umbrella/blob/develop/examples/README.md examples]"
      },
      "date": 1678811762871
    },
    {
      "item": {
        "type": "factory",
        "id": "2bf6f1e0c856b1d7"
      },
      "id": "2bf6f1e0c856b1d7",
      "type": "add",
      "after": "e70d1e7a67626960",
      "date": 1678811872924
    },
    {
      "type": "edit",
      "id": "2bf6f1e0c856b1d7",
      "item": {
        "type": "video",
        "id": "2bf6f1e0c856b1d7",
        "text": "YOUTUBE mXp92s_VP40"
      },
      "date": 1678811885267
    },
    {
      "type": "edit",
      "id": "2bf6f1e0c856b1d7",
      "item": {
        "type": "video",
        "id": "2bf6f1e0c856b1d7",
        "text": "YOUTUBE mXp92s_VP40\nthi.ng/umbrella livestream #1 (take 2)"
      },
      "date": 1678811901392
    },
    {
      "item": {
        "type": "factory",
        "id": "704c686d9655fe10"
      },
      "id": "704c686d9655fe10",
      "type": "add",
      "after": "2bf6f1e0c856b1d7",
      "date": 1678811913773
    },
    {
      "type": "remove",
      "id": "704c686d9655fe10",
      "date": 1678811919078
    },
    {
      "item": {
        "type": "factory",
        "id": "9e66b9e636627f6a"
      },
      "id": "9e66b9e636627f6a",
      "type": "add",
      "after": "2bf6f1e0c856b1d7",
      "date": 1678811936640
    },
    {
      "type": "edit",
      "id": "9e66b9e636627f6a",
      "item": {
        "type": "paragraph",
        "id": "9e66b9e636627f6a",
        "text": "l"
      },
      "date": 1678811938187
    },
    {
      "type": "edit",
      "id": "9e66b9e636627f6a",
      "item": {
        "type": "paragraph",
        "id": "9e66b9e636627f6a",
        "text": "parse-playground"
      },
      "date": 1678811950238
    },
    {
      "id": "9e66b9e636627f6a",
      "type": "move",
      "order": [
        "e87c8d484e110941",
        "3b51715a4691c631",
        "1c42dc322b531731",
        "1e67f3a1e6867755",
        "a60bfd65d3a8d7d8",
        "31d49681f15d6a3f",
        "cc358a7c4fde421c",
        "69dc82e35929fa39",
        "af6e6628acfba2e5",
        "b1bcf89a63a4a178",
        "efdefd9f9c2c39f9",
        "a0fa0c6b1dffe32a",
        "350f126b223d7613",
        "84c42cbc7f892235",
        "a05af4007d212ec3",
        "2da7427dda1dc47a",
        "e70d1e7a67626960",
        "9e66b9e636627f6a",
        "2bf6f1e0c856b1d7"
      ],
      "date": 1678811952224
    },
    {
      "type": "edit",
      "id": "9e66b9e636627f6a",
      "item": {
        "type": "paragraph",
        "id": "9e66b9e636627f6a",
        "text": "parse-playground [https://github.com/thi-ng/umbrella/tree/develop/examples/parse-playground#parse-playground github]"
      },
      "date": 1678811965571
    },
    {
      "type": "edit",
      "id": "a05af4007d212ec3",
      "item": {
        "type": "markdown",
        "id": "a05af4007d212ec3",
        "text": "* use cross-document messaging. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]\n* [[Transferable Objects]] [https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects mdn]\n* structuredClone()"
      },
      "date": 1678812655733
    },
    {
      "type": "edit",
      "id": "a05af4007d212ec3",
      "item": {
        "type": "markdown",
        "id": "a05af4007d212ec3",
        "text": "* use cross-document messaging. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]\n* [[Transferable Objects]] [https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Transferable_objects mdn]\n* structuredClone() [https://developer.mozilla.org/en-US/docs/Web/API/structuredClone mdn]"
      },
      "date": 1678812669611
    },
    {
      "type": "edit",
      "id": "9e66b9e636627f6a",
      "item": {
        "type": "paragraph",
        "id": "9e66b9e636627f6a",
        "text": "parse-playground [https://github.com/thi-ng/umbrella/tree/develop/examples/parse-playground#parse-playground github] – Parser grammar livecoding editor/playground & codegen"
      },
      "date": 1678812689977
    },
    {
      "item": {
        "type": "factory",
        "id": "e102d17a6f8cdf01"
      },
      "id": "e102d17a6f8cdf01",
      "type": "add",
      "after": "2bf6f1e0c856b1d7",
      "date": 1678812804611
    },
    {
      "type": "edit",
      "id": "e102d17a6f8cdf01",
      "item": {
        "type": "paragraph",
        "id": "e102d17a6f8cdf01",
        "text": "https://youtu.be/mXp92s_VP40?t=646 "
      },
      "date": 1678812813704
    },
    {
      "type": "edit",
      "id": "e102d17a6f8cdf01",
      "item": {
        "type": "paragraph",
        "id": "e102d17a6f8cdf01",
        "text": "[https://youtu.be/mXp92s_VP40?t=646 video] – [https://github.com/thi-ng/umbrella/tree/develop/packages/transducers#blog-posts blog-posts]"
      },
      "date": 1678812857214
    },
    {
      "item": {
        "type": "factory",
        "id": "41afb49e13a797fa"
      },
      "id": "41afb49e13a797fa",
      "type": "add",
      "after": "e102d17a6f8cdf01",
      "date": 1678813838747
    },
    {
      "type": "edit",
      "id": "41afb49e13a797fa",
      "item": {
        "type": "paragraph",
        "id": "41afb49e13a797fa",
        "text": "[https://youtu.be/mXp92s_VP40?t=697 $complie]"
      },
      "date": 1678813853878
    },
    {
      "type": "edit",
      "id": "41afb49e13a797fa",
      "item": {
        "type": "paragraph",
        "id": "41afb49e13a797fa",
        "text": "* [https://youtu.be/mXp92s_VP40?t=697 $complie]"
      },
      "date": 1678813859363
    },
    {
      "type": "edit",
      "id": "41afb49e13a797fa",
      "item": {
        "type": "markdown",
        "id": "41afb49e13a797fa",
        "text": "* [https://youtu.be/mXp92s_VP40?t=697 $complie]"
      },
      "date": 1678813860688
    },
    {
      "item": {
        "type": "factory",
        "id": "10893239e255c334"
      },
      "id": "10893239e255c334",
      "type": "add",
      "after": "41afb49e13a797fa",
      "date": 1678813914118
    },
    {
      "type": "edit",
      "id": "10893239e255c334",
      "item": {
        "type": "code",
        "id": "10893239e255c334",
        "text": "import { $compile } from \"@thi.ng/rdom\";"
      },
      "date": 1678813927528
    },
    {
      "type": "edit",
      "id": "10893239e255c334",
      "item": {
        "type": "code",
        "id": "10893239e255c334",
        "text": "import { $compile } from \"https://cdn.skypack.dev/@thi.ng/rdom\";"
      },
      "date": 1678813946471
    },
    {
      "id": "5396a0b4e33715c0",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "5396a0b4e33715c0",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 256"
      },
      "after": "10893239e255c334",
      "attribution": {
        "page": "Closest Points on Ellipses"
      },
      "date": 1678813951550
    },
    {
      "item": {
        "type": "factory",
        "id": "115011ad8799cee4"
      },
      "id": "115011ad8799cee4",
      "type": "add",
      "after": "5396a0b4e33715c0",
      "date": 1678813955788
    },
    {
      "type": "edit",
      "id": "115011ad8799cee4",
      "item": {
        "type": "code",
        "id": "115011ad8799cee4",
        "text": "$complie"
      },
      "date": 1678813967549
    },
    {
      "type": "edit",
      "id": "41afb49e13a797fa",
      "item": {
        "type": "markdown",
        "id": "41afb49e13a797fa",
        "text": "* [https://youtu.be/mXp92s_VP40?t=697 $compile]"
      },
      "date": 1678813983688
    },
    {
      "type": "edit",
      "id": "115011ad8799cee4",
      "item": {
        "type": "code",
        "id": "115011ad8799cee4",
        "text": "$compile"
      },
      "date": 1678813989037
    },
    {
      "type": "edit",
      "id": "115011ad8799cee4",
      "item": {
        "type": "code",
        "id": "115011ad8799cee4",
        "text": "$compile()"
      },
      "date": 1678814054292
    },
    {
      "item": {
        "type": "factory",
        "id": "0272b23de8cbfe6e"
      },
      "id": "0272b23de8cbfe6e",
      "type": "add",
      "after": "115011ad8799cee4",
      "date": 1678814220766
    },
    {
      "id": "0272b23de8cbfe6e",
      "type": "move",
      "order": [
        "e87c8d484e110941",
        "3b51715a4691c631",
        "1c42dc322b531731",
        "1e67f3a1e6867755",
        "a60bfd65d3a8d7d8",
        "31d49681f15d6a3f",
        "cc358a7c4fde421c",
        "69dc82e35929fa39",
        "af6e6628acfba2e5",
        "b1bcf89a63a4a178",
        "efdefd9f9c2c39f9",
        "a0fa0c6b1dffe32a",
        "350f126b223d7613",
        "84c42cbc7f892235",
        "a05af4007d212ec3",
        "2da7427dda1dc47a",
        "e70d1e7a67626960",
        "9e66b9e636627f6a",
        "2bf6f1e0c856b1d7",
        "e102d17a6f8cdf01",
        "41afb49e13a797fa",
        "0272b23de8cbfe6e",
        "10893239e255c334",
        "5396a0b4e33715c0",
        "115011ad8799cee4"
      ],
      "date": 1678814225223
    },
    {
      "type": "edit",
      "id": "0272b23de8cbfe6e",
      "item": {
        "type": "paragraph",
        "id": "0272b23de8cbfe6e",
        "text": "[[@thi.ng/rdom]]"
      },
      "date": 1678814231878
    },
    {
      "id": "10893239e255c334",
      "type": "remove",
      "removedTo": {
        "page": "@thi.ng/rdom"
      },
      "date": 1678814255656
    },
    {
      "id": "5396a0b4e33715c0",
      "type": "remove",
      "removedTo": {
        "page": "@thi.ng/rdom"
      },
      "date": 1678814282701
    },
    {
      "id": "115011ad8799cee4",
      "type": "remove",
      "removedTo": {
        "page": "@thi.ng/rdom"
      },
      "date": 1678814285794
    },
    {
      "id": "84c42cbc7f892235",
      "type": "remove",
      "removedTo": {
        "page": "2023-03-15"
      },
      "date": 1678863051999
    },
    {
      "id": "a05af4007d212ec3",
      "type": "remove",
      "removedTo": {
        "page": "2023-03-15"
      },
      "date": 1678863055419
    }
  ]
}