{
  "title": "Functions Are Containers",
  "story": [
    {
      "type": "paragraph",
      "id": "f3d9889961a92bff",
      "text": "Memoization via Representables [https://iagoleal.com/posts/representable-memoize/ post]"
    },
    {
      "type": "paragraph",
      "id": "2ae82cda351b50e1",
      "text": "What is the most basic [[Container]] type a language can have?"
    },
    {
      "type": "paragraph",
      "id": "38c7e82236bfbbca",
      "text": "Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions."
    },
    {
      "type": "paragraph",
      "id": "c5ae70a67eb1589e",
      "text": "Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: [[Memoization]]."
    },
    {
      "type": "paragraph",
      "id": "6506fb46a3f9ae03",
      "text": "Memoization is a technique for storing values of a function instead of recomputing them each time the function is called. [https://wiki.haskell.org/Memoization wiki.haskell]"
    },
    {
      "type": "pagefold",
      "id": "6ebe996c9a6b3b6b",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "76619f0509f5d293",
      "site": "wiki.ralfbarkow.ch",
      "slug": "understanding-machines",
      "title": "Understanding Machines",
      "text": "⇒ [[Model Free Method Zoo]]"
    },
    {
      "type": "markdown",
      "id": "c3ac8e6f3894c578",
      "text": "> [[Table Lookup]] (of gathered experience) – 53:32;  \nGraph algorithms (table to graph transformation) [https://www.educative.io/blog/graph-algorithms-tutorial page]\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Functions Are Containers",
        "story": []
      },
      "date": 1679895353229
    },
    {
      "id": "f3d9889961a92bff",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f3d9889961a92bff",
        "text": "Memoization via Representables [https://iagoleal.com/posts/representable-memoize/ post]"
      },
      "attribution": {
        "page": "2023-03-27"
      },
      "date": 1679895359068
    },
    {
      "id": "2ae82cda351b50e1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2ae82cda351b50e1",
        "text": "What is the most basic container type a language can have?"
      },
      "after": "f3d9889961a92bff",
      "attribution": {
        "page": "2023-03-27"
      },
      "date": 1679895360777
    },
    {
      "item": {
        "type": "factory",
        "id": "38c7e82236bfbbca"
      },
      "id": "38c7e82236bfbbca",
      "type": "add",
      "after": "2ae82cda351b50e1",
      "date": 1679895373274
    },
    {
      "type": "edit",
      "id": "38c7e82236bfbbca",
      "item": {
        "type": "paragraph",
        "id": "38c7e82236bfbbca",
        "text": "What is the most basic container type a language can have? Some people may answer vectors, others would go with hash tables, but in this post I am arguing in favor of functions. Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: memoization."
      },
      "date": 1679895375305
    },
    {
      "type": "edit",
      "id": "38c7e82236bfbbca",
      "item": {
        "type": "paragraph",
        "id": "38c7e82236bfbbca",
        "text": "Some people may answer vectors, others would go with hash tables, but in this post I am arguing in favor of functions. Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: memoization."
      },
      "date": 1679895382957
    },
    {
      "type": "edit",
      "id": "38c7e82236bfbbca",
      "item": {
        "type": "paragraph",
        "id": "38c7e82236bfbbca",
        "text": "Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: memoization."
      },
      "date": 1679895414297
    },
    {
      "type": "edit",
      "id": "38c7e82236bfbbca",
      "item": {
        "type": "paragraph",
        "id": "38c7e82236bfbbca",
        "text": "Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: [[Memoization]]."
      },
      "date": 1679895557630
    },
    {
      "type": "edit",
      "id": "2ae82cda351b50e1",
      "item": {
        "type": "paragraph",
        "id": "2ae82cda351b50e1",
        "text": "What is the most basic [[Container]] type a language can have?"
      },
      "date": 1679895599555
    },
    {
      "id": "6506fb46a3f9ae03",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6506fb46a3f9ae03",
        "text": "Memoization is a technique for storing values of a function instead of recomputing them each time the function is called. [https://wiki.haskell.org/Memoization wiki.haskell]"
      },
      "after": "38c7e82236bfbbca",
      "attribution": {
        "page": "Memoization"
      },
      "date": 1694021266621
    },
    {
      "item": {
        "type": "factory",
        "id": "6ebe996c9a6b3b6b"
      },
      "id": "6ebe996c9a6b3b6b",
      "type": "add",
      "after": "6506fb46a3f9ae03",
      "date": 1694021483937
    },
    {
      "type": "edit",
      "id": "6ebe996c9a6b3b6b",
      "item": {
        "type": "pagefold",
        "id": "6ebe996c9a6b3b6b",
        "text": "~"
      },
      "date": 1694021487538
    },
    {
      "id": "76619f0509f5d293",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "76619f0509f5d293",
        "site": "wiki.ralfbarkow.ch",
        "slug": "understanding-machines",
        "title": "Understanding Machines",
        "text": "⇒ [[Model Free Method Zoo]]"
      },
      "after": "6ebe996c9a6b3b6b",
      "attribution": {
        "page": "Memoization"
      },
      "date": 1694021490797
    },
    {
      "id": "c3ac8e6f3894c578",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c3ac8e6f3894c578",
        "text": "> [[Table Lookup]] (of gathered experience) – 53:32;  \nGraph algorithms (table to graph transformation) [https://www.educative.io/blog/graph-algorithms-tutorial page]\n"
      },
      "after": "76619f0509f5d293",
      "attribution": {
        "page": "Memoization"
      },
      "date": 1694021494287
    },
    {
      "type": "edit",
      "id": "38c7e82236bfbbca",
      "item": {
        "type": "paragraph",
        "id": "38c7e82236bfbbca",
        "text": "Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions."
      },
      "date": 1694763899420
    },
    {
      "type": "add",
      "id": "c5ae70a67eb1589e",
      "item": {
        "type": "paragraph",
        "id": "c5ae70a67eb1589e",
        "text": "Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: [[Memoization]]."
      },
      "after": "38c7e82236bfbbca",
      "date": 1694763900401
    }
  ]
}