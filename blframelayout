{
  "title": "BlFrameLayout",
  "story": [
    {
      "type": "markdown",
      "id": "9a75a650221ccdc8",
      "text": "# Frame layout\n\nI am a layout designed to block out an area on the screen to display a single child. \n\nI should be mainly used to display a single child, as it can be difficult to display multiple children at different positions on the screen without overlapping each other. \nHowever, elements with a frame layout can have multiple child elements. The `'weight'` and `'alignment'` attributes can be used to control the position of children. However, weight only works when the child matches the parent; if it fits content or has an exact size, the weight attribute is ignored. I rely on custom layout constraints for setting  attributes (see {{gtClass:BlFrameLayoutConstraints}}, {{gtClass:BlFrameLayoutConstraintsHorizontal}} and {{gtClass:BlFrameLayoutConstraintsVertical}}).\n\nI position each child element based on the top left of the screen. Child elements are stacked on top of each other, with the most recently added child on top. An important property is that the location of a child is independent from the location of other children. \n\nI am similar to the frame layout from Android. The main differences are that I:\n- provide support for controlling the size of a child element using the `'weight'`  attribute;\n- the `'gravity'`  attribute is not present; instead the `'alignment'`  attribute should be used.\n\n## Alignment\nThe alignment attribute controls the position of children within a FrameLayout. Children can be aligned both vertically and horizontally as follows:\n- horizontally children can be aligned to left, center or right;\n- vertically children can be aligned to top, center or bottom.\n\nFor example, below we align a fixed-size child horizontally to the right and vertically to the bottom. Alignment is a constraint specific to frame layouts, as it's not relevant to all layouts. To access frame-specific contraints, we send {{gtMethod:BlLayoutCommonConstraints>>#frame}} to the current constraint object, which returns an instance of {{gtClass:BlFrameLayoutConstraints}} that we can use to set the desired alignment. Other constraints like the size of an element are common to all layouts and can be set directly without requesting a specific constraint object. Both cases are illustrated by the following example:\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementDocumentationWithOneExactChildAlignBottomRightInExactParent|previewExpanded|previewHeight=400}}\n\nWhen using multiple children, if we do not specify any alignment they will be placed in the top-left corner in the order in which they were added to the parent.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithTwoExactChildrenAndNoAlignment|previewExpanded|previewHeight=400}}\n\nWith an alignment, we can better arrange these children. For example, we can place one to the right and center it. This will result in no overlapping.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithExactChildAlignTopLeftAndExactChildRightCenter|previewExpanded|previewHeight=400}}\n\nWe can also use a different alignment that results in partial overapping. \n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithExactChildAlignLeftCenterAndExactChildCenter|previewExpanded|previewHeight=400}}\n\nHere is an example of more advanced child placement:\n{{gtExample:BlFrameLayoutCompositionExamples>>#example|previewExpanded|previewHeight=400}}\n\nTo wrap up, below are all nine ways in which we can place a child using alignment.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithNineExactChildrenWithAllAlignments|previewExpanded|previewHeight=400}}\n\n## Weight\nAbove we saw that one way to set the size of a child element is by using an exact size. A second option is for a child to match the size of the parent. In this case, children that match their parent can also be configured to occupy only a fraction of the parent's size using the `weight` attribute.\n\nA child can match its parent both horizontally and vertically. If no padding or margin is used, the child will overlap the parent completely.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneChildMatchExactParent|previewExpanded|previewHeight=400}}\n\nLet's try adding some padding so we can see that, indeed, the parent is also rendered.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneChildMatchExactParentWithPadding|previewExpanded|previewHeight=400}}\n\nBy indicating a weight value when the child matches its parent, we can control the actual space it occupies. For example, in the code below the child takes 90% of the space horizontally and 50% vertically, starting from the top left corner. \n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementForDocumentationWithOneChildMatchExactParentWithWeight|previewExpanded|previewHeight=400}}\n\nWe can also have multiple children that match the same parent and take different proportions of the available space, as in the following example.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithTwoChildrenMatchingParentWithWeight|previewExpanded|previewHeight=400}}\n\nSetting this attribute only works when the element matches its parent. In other scenarios, like when the element has a fixed size, any weight specified will be ignored.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneChildWithExactSizeParentWithWeight|previewExpanded|previewHeight=400}}\n\nIf a child element has an alignment in addition to a fixed size, the weight will also be ignored.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneExactChildAlignBottomCenterAndWithWeightInExactParent|previewExpanded|previewHeight=400}}\n\n## Fit content in parent \nThe previous examples assumened that the parent had a fixed size. That, or having the parent use a \"match parent\" strategy are the common ways to use a frame layout. It is however also possible to have the parent match to its content, if the child has a fixed size. In that case, the parent size will be the same a the child's, if no padding or margin is used.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneExactChildAndFitContentParent|previewExpanded|previewHeight=400}}\n \nThis also works in case multiple children are present having different sizes.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithTwoExactChildrenAndFitContentParent|previewExpanded|previewHeight=400}}\n\nHowever, this will not work when the parent uses \"fit content\" and the child uses \"match parent\", as there is no way to determine the size. In such cases, the size of both the parent and the child will be `0@0`.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneMatchParentChildAndFitContentParent|previewExpanded|previewHeight=400}}\n\n## More examples\nFor more example on how to use frame layouts, check out these classes:\n- {{gtClass:BlFrameLayoutSingleChildExamples}}\n- {{gtClass:BlFrameLayoutMultipleChildrenExamples}}\n- {{gtClass:BlFrameLayoutCompositionExamples}}\n\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "BlFrameLayout",
        "story": []
      },
      "date": 1652019857286
    },
    {
      "item": {
        "type": "factory",
        "id": "9a75a650221ccdc8"
      },
      "id": "9a75a650221ccdc8",
      "type": "add",
      "date": 1652019862821
    },
    {
      "type": "edit",
      "id": "9a75a650221ccdc8",
      "item": {
        "type": "markdown",
        "id": "9a75a650221ccdc8",
        "text": "# Frame layout\n\nI am a layout designed to block out an area on the screen to display a single child. \n\nI should be mainly used to display a single child, as it can be difficult to display multiple children at different positions on the screen without overlapping each other. \nHowever, elements with a frame layout can have multiple child elements. The `'weight'` and `'alignment'` attributes can be used to control the position of children. However, weight only works when the child matches the parent; if it fits content or has an exact size, the weight attribute is ignored. I rely on custom layout constraints for setting  attributes (see {{gtClass:BlFrameLayoutConstraints}}, {{gtClass:BlFrameLayoutConstraintsHorizontal}} and {{gtClass:BlFrameLayoutConstraintsVertical}}).\n\nI position each child element based on the top left of the screen. Child elements are stacked on top of each other, with the most recently added child on top. An important property is that the location of a child is independent from the location of other children. \n\nI am similar to the frame layout from Android. The main differences are that I:\n- provide support for controlling the size of a child element using the `'weight'`  attribute;\n- the `'gravity'`  attribute is not present; instead the `'alignment'`  attribute should be used.\n\n## Alignment\nThe alignment attribute controls the position of children within a FrameLayout. Children can be aligned both vertically and horizontally as follows:\n- horizontally children can be aligned to left, center or right;\n- vertically children can be aligned to top, center or bottom.\n\nFor example, below we align a fixed-size child horizontally to the right and vertically to the bottom. Alignment is a constraint specific to frame layouts, as it's not relevant to all layouts. To access frame-specific contraints, we send {{gtMethod:BlLayoutCommonConstraints>>#frame}} to the current constraint object, which returns an instance of {{gtClass:BlFrameLayoutConstraints}} that we can use to set the desired alignment. Other constraints like the size of an element are common to all layouts and can be set directly without requesting a specific constraint object. Both cases are illustrated by the following example:\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementDocumentationWithOneExactChildAlignBottomRightInExactParent|previewExpanded|previewHeight=400}}\n\nWhen using multiple children, if we do not specify any alignment they will be placed in the top-left corner in the order in which they were added to the parent.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithTwoExactChildrenAndNoAlignment|previewExpanded|previewHeight=400}}\n\nWith an alignment, we can better arrange these children. For example, we can place one to the right and center it. This will result in no overlapping.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithExactChildAlignTopLeftAndExactChildRightCenter|previewExpanded|previewHeight=400}}\n\nWe can also use a different alignment that results in partial overapping. \n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithExactChildAlignLeftCenterAndExactChildCenter|previewExpanded|previewHeight=400}}\n\nHere is an example of more advanced child placement:\n{{gtExample:BlFrameLayoutCompositionExamples>>#example|previewExpanded|previewHeight=400}}\n\nTo wrap up, below are all nine ways in which we can place a child using alignment.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithNineExactChildrenWithAllAlignments|previewExpanded|previewHeight=400}}\n\n## Weight\nAbove we saw that one way to set the size of a child element is by using an exact size. A second option is for a child to match the size of the parent. In this case, children that match their parent can also be configured to occupy only a fraction of the parent's size using the `weight` attribute.\n\nA child can match its parent both horizontally and vertically. If no padding or margin is used, the child will overlap the parent completely.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneChildMatchExactParent|previewExpanded|previewHeight=400}}\n\nLet's try adding some padding so we can see that, indeed, the parent is also rendered.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneChildMatchExactParentWithPadding|previewExpanded|previewHeight=400}}\n\nBy indicating a weight value when the child matches its parent, we can control the actual space it occupies. For example, in the code below the child takes 90% of the space horizontally and 50% vertically, starting from the top left corner. \n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementForDocumentationWithOneChildMatchExactParentWithWeight|previewExpanded|previewHeight=400}}\n\nWe can also have multiple children that match the same parent and take different proportions of the available space, as in the following example.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithTwoChildrenMatchingParentWithWeight|previewExpanded|previewHeight=400}}\n\nSetting this attribute only works when the element matches its parent. In other scenarios, like when the element has a fixed size, any weight specified will be ignored.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneChildWithExactSizeParentWithWeight|previewExpanded|previewHeight=400}}\n\nIf a child element has an alignment in addition to a fixed size, the weight will also be ignored.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneExactChildAlignBottomCenterAndWithWeightInExactParent|previewExpanded|previewHeight=400}}\n\n## Fit content in parent \nThe previous examples assumened that the parent had a fixed size. That, or having the parent use a \"match parent\" strategy are the common ways to use a frame layout. It is however also possible to have the parent match to its content, if the child has a fixed size. In that case, the parent size will be the same a the child's, if no padding or margin is used.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneExactChildAndFitContentParent|previewExpanded|previewHeight=400}}\n \nThis also works in case multiple children are present having different sizes.\n{{gtExample:BlFrameLayoutMultipleChildrenExamples>>#elementWithTwoExactChildrenAndFitContentParent|previewExpanded|previewHeight=400}}\n\nHowever, this will not work when the parent uses \"fit content\" and the child uses \"match parent\", as there is no way to determine the size. In such cases, the size of both the parent and the child will be `0@0`.\n{{gtExample:BlFrameLayoutSingleChildExamples>>#elementWithOneMatchParentChildAndFitContentParent|previewExpanded|previewHeight=400}}\n\n## More examples\nFor more example on how to use frame layouts, check out these classes:\n- {{gtClass:BlFrameLayoutSingleChildExamples}}\n- {{gtClass:BlFrameLayoutMultipleChildrenExamples}}\n- {{gtClass:BlFrameLayoutCompositionExamples}}\n\n"
      },
      "date": 1652019864861
    }
  ]
}