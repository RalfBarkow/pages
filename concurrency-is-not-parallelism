{
  "title": "Concurrency Is Not Parallelism",
  "story": [
    {
      "type": "paragraph",
      "id": "ad6e7374cddd2ef3",
      "text": "[[Rob Pike]] - ‘Concurrency Is Not Parallelism’"
    },
    {
      "type": "video",
      "id": "570a7996a08d28e1",
      "text": "VIMEO 49718712\nRob (@rob_pike) is a software pioneer. His influence is everywhere: Unix, Plan 9 OS, The Unix Programming Environment book, UTF-8, and most recently the Go programming language - [http://blog.golang.org/concurrency-is-not-parallelism blog.golang.org] \nSlides: [http://talks.golang.org/2012/waza.slide talks.golang.org]"
    },
    {
      "type": "markdown",
      "id": "98cdda60dac0d575",
      "text": "## Concurrency vs. parallelism\n\nConcurrency is about dealing with lots of things at once.\n\nParallelism is about doing lots of things at once.\n\nNot the same, but related.\n\n* Concurrency is about structure, \n* parallelism is about execution.\n\nConcurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable. "
    },
    {
      "type": "markdown",
      "id": "24373e734baedb2b",
      "text": "## Concurrency plus communication\n\nConcurrency is a way to structure a program by breaking it into pieces that can be executed independently.\n\nCommunication is the means to coordinate the independent executions.\n\nThis is the Go model and (like Erlang and others) it's based on CSP:\n\nC. A. R. Hoare: Communicating Sequential Processes (CACM 1978), [https://doi.org/10.1145/359576.359585 doi], [https://dl.acm.org/doi/pdf/10.1145/359576.359585 pdf]"
    },
    {
      "type": "paragraph",
      "id": "d6c80036712a84ea",
      "text": "[…]"
    },
    {
      "type": "markdown",
      "id": "d94c6a8f9b73cfcf",
      "text": "## Concurrent procedures\n\nFour distinct gopher procedures:\n\n* load books onto cart\n* move cart to incinerator\n* unload cart into incinerator\n* return empty cart\n\nDifferent concurrent designs enable different ways to parallelize. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Concurrency Is Not Parallelism",
        "story": []
      },
      "date": 1643827737310
    },
    {
      "item": {
        "type": "factory",
        "id": "ad6e7374cddd2ef3"
      },
      "id": "ad6e7374cddd2ef3",
      "type": "add",
      "date": 1643827753795
    },
    {
      "type": "edit",
      "id": "ad6e7374cddd2ef3",
      "item": {
        "type": "paragraph",
        "id": "ad6e7374cddd2ef3",
        "text": "Rob Pike - ‘Concurrency Is Not Parallelism’"
      },
      "date": 1643827756416
    },
    {
      "type": "edit",
      "id": "ad6e7374cddd2ef3",
      "item": {
        "type": "paragraph",
        "id": "ad6e7374cddd2ef3",
        "text": "[[Rob Pike]] - ‘Concurrency Is Not Parallelism’"
      },
      "date": 1643827766099
    },
    {
      "id": "570a7996a08d28e1",
      "type": "add",
      "item": {
        "type": "video",
        "id": "570a7996a08d28e1",
        "text": "VIMEO 49718712\nRob (@rob_pike) is a software pioneer. His influence is everywhere: Unix, Plan 9 OS, The Unix Programming Environment book, UTF-8, and most recently the Go programming language - [http://blog.golang.org/concurrency-is-not-parallelism blog.golang.org] \nSlides: [http://talks.golang.org/2012/waza.slide talks.golang.org]"
      },
      "after": "ad6e7374cddd2ef3",
      "date": 1643827778415
    },
    {
      "item": {
        "type": "factory",
        "id": "98cdda60dac0d575"
      },
      "id": "98cdda60dac0d575",
      "type": "add",
      "after": "570a7996a08d28e1",
      "date": 1643827960979
    },
    {
      "type": "edit",
      "id": "98cdda60dac0d575",
      "item": {
        "type": "paragraph",
        "id": "98cdda60dac0d575",
        "text": "Concurrency vs. parallelism\n\nConcurrency is about dealing with lots of things at once.\n\nParallelism is about doing lots of things at once.\n\nNot the same, but related.\n\nConcurrency is about structure, parallelism is about execution.\n\nConcurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable. "
      },
      "date": 1643827962654
    },
    {
      "type": "edit",
      "id": "98cdda60dac0d575",
      "item": {
        "type": "paragraph",
        "id": "98cdda60dac0d575",
        "text": "## Concurrency vs. parallelism\n\nConcurrency is about dealing with lots of things at once.\n\nParallelism is about doing lots of things at once.\n\nNot the same, but related.\n\nConcurrency is about structure, parallelism is about execution.\n\nConcurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable. "
      },
      "date": 1643827969978
    },
    {
      "type": "edit",
      "id": "98cdda60dac0d575",
      "item": {
        "type": "markdown",
        "id": "98cdda60dac0d575",
        "text": "## Concurrency vs. parallelism\n\nConcurrency is about dealing with lots of things at once.\n\nParallelism is about doing lots of things at once.\n\nNot the same, but related.\n\nConcurrency is about structure, parallelism is about execution.\n\nConcurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable. "
      },
      "date": 1643827971119
    },
    {
      "type": "edit",
      "id": "98cdda60dac0d575",
      "item": {
        "type": "markdown",
        "id": "98cdda60dac0d575",
        "text": "## Concurrency vs. parallelism\n\nConcurrency is about dealing with lots of things at once.\n\nParallelism is about doing lots of things at once.\n\nNot the same, but related.\n\n* Concurrency is about structure, \n* parallelism is about execution.\n\nConcurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable. "
      },
      "date": 1643839210246
    },
    {
      "item": {
        "type": "factory",
        "id": "24373e734baedb2b"
      },
      "id": "24373e734baedb2b",
      "type": "add",
      "after": "98cdda60dac0d575",
      "date": 1643839239381
    },
    {
      "type": "edit",
      "id": "24373e734baedb2b",
      "item": {
        "type": "markdown",
        "id": "24373e734baedb2b",
        "text": "## Concurrency plus communication\n\nConcurrency is a way to structure a program by breaking it into pieces that can be executed independently.\n\nCommunication is the means to coordinate the independent executions.\n\nThis is the Go model and (like Erlang and others) it's based on CSP:\n\nC. A. R. Hoare: Communicating Sequential Processes (CACM 1978) "
      },
      "date": 1643839244927
    },
    {
      "type": "edit",
      "id": "24373e734baedb2b",
      "item": {
        "type": "markdown",
        "id": "24373e734baedb2b",
        "text": "## Concurrency plus communication\n\nConcurrency is a way to structure a program by breaking it into pieces that can be executed independently.\n\nCommunication is the means to coordinate the independent executions.\n\nThis is the Go model and (like Erlang and others) it's based on CSP:\n\nC. A. R. Hoare: Communicating Sequential Processes (CACM 1978) [https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf pdf]"
      },
      "date": 1643839539859
    },
    {
      "item": {
        "type": "factory",
        "id": "d6c80036712a84ea"
      },
      "id": "d6c80036712a84ea",
      "type": "add",
      "after": "24373e734baedb2b",
      "date": 1643839748372
    },
    {
      "type": "edit",
      "id": "d6c80036712a84ea",
      "item": {
        "type": "paragraph",
        "id": "d6c80036712a84ea",
        "text": "[…]"
      },
      "date": 1643839751926
    },
    {
      "type": "add",
      "id": "d94c6a8f9b73cfcf",
      "item": {
        "type": "paragraph",
        "id": "d94c6a8f9b73cfcf",
        "text": "## Concurrent procedures\n\nFour distinct gopher procedures:\n\n    load books onto cart\n    move cart to incinerator\n    unload cart into incinerator\n    return empty cart\n\nDifferent concurrent designs enable different ways to parallelize. "
      },
      "after": "d6c80036712a84ea",
      "date": 1643839755138
    },
    {
      "type": "edit",
      "id": "d94c6a8f9b73cfcf",
      "item": {
        "type": "markdown",
        "id": "d94c6a8f9b73cfcf",
        "text": "## Concurrent procedures\n\nFour distinct gopher procedures:\n\n    load books onto cart\n    move cart to incinerator\n    unload cart into incinerator\n    return empty cart\n\nDifferent concurrent designs enable different ways to parallelize. "
      },
      "date": 1643839756476
    },
    {
      "type": "edit",
      "id": "d94c6a8f9b73cfcf",
      "item": {
        "type": "markdown",
        "id": "d94c6a8f9b73cfcf",
        "text": "## Concurrent procedures\n\nFour distinct gopher procedures:\n\n* load books onto cart\n* move cart to incinerator\n* unload cart into incinerator\n* return empty cart\n\nDifferent concurrent designs enable different ways to parallelize. "
      },
      "date": 1643839773765
    },
    {
      "type": "edit",
      "id": "24373e734baedb2b",
      "item": {
        "type": "markdown",
        "id": "24373e734baedb2b",
        "text": "## Concurrency plus communication\n\nConcurrency is a way to structure a program by breaking it into pieces that can be executed independently.\n\nCommunication is the means to coordinate the independent executions.\n\nThis is the Go model and (like Erlang and others) it's based on CSP:\n\nC. A. R. Hoare: Communicating Sequential Processes (CACM 1978) [https://doi.org/10.1145/359576.359585 doi ][https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf pdf]"
      },
      "date": 1643840104856
    },
    {
      "type": "edit",
      "id": "24373e734baedb2b",
      "item": {
        "type": "markdown",
        "id": "24373e734baedb2b",
        "text": "## Concurrency plus communication\n\nConcurrency is a way to structure a program by breaking it into pieces that can be executed independently.\n\nCommunication is the means to coordinate the independent executions.\n\nThis is the Go model and (like Erlang and others) it's based on CSP:\n\nC. A. R. Hoare: Communicating Sequential Processes (CACM 1978) [https://doi.org/10.1145/359576.359585 doi ][https://dl.acm.org/doi/pdf/10.1145/359576.359585 pdf]"
      },
      "date": 1643840127578
    },
    {
      "type": "edit",
      "id": "24373e734baedb2b",
      "item": {
        "type": "markdown",
        "id": "24373e734baedb2b",
        "text": "## Concurrency plus communication\n\nConcurrency is a way to structure a program by breaking it into pieces that can be executed independently.\n\nCommunication is the means to coordinate the independent executions.\n\nThis is the Go model and (like Erlang and others) it's based on CSP:\n\nC. A. R. Hoare: Communicating Sequential Processes (CACM 1978), [https://doi.org/10.1145/359576.359585 doi], [https://dl.acm.org/doi/pdf/10.1145/359576.359585 pdf]"
      },
      "date": 1643840142824
    }
  ]
}