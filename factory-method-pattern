{
  "title": "Factory Method Pattern",
  "story": [
    {
      "type": "html",
      "text": "The [[Factory Method Pattern]] is one of the [[Design Patterns]] discussed in the [[Gang Of Four]] book of the same name.",
      "id": "1eb536e2b24a4eafd8414d2be36c1e91"
    },
    {
      "type": "html",
      "text": "<i>(Page 107)</i>",
      "id": "8e67abce98138c5a0ef58687ea209bc8"
    },
    {
      "type": "image",
      "url": "http://www.dofactory.com/Patterns/Diagrams/factory.gif",
      "text": "www.dofactory.com",
      "id": "f432cf675b491cca5ff7628bbf5f6567"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "5d66c677a1a31d43907dba06660aba71"
    },
    {
      "type": "html",
      "text": "<i>Be careful: [[An Operation]] method has to call [[Factory Method]]! The illustration above is confusing.</i>",
      "id": "85d81afb2fb5085dc31478cade5832ad"
    },
    {
      "type": "html",
      "text": "\nIt allows classes to defer object creation to a separate method (a [[Factory Method]]). This would be an additional method on existing classes in a hierarchy.",
      "id": "c1ddafdaf3922c1d4f9e1ca184dcd716"
    },
    {
      "type": "html",
      "text": "\nAlso called the [[Virtual Constructor]]; this is because in a statically-typed language (like [[Cee Plus Plus]]) the object returned is of the type indicated by the method signature, <i>or a subtype</i>.  Compare this with a standard constructor, which always gives you a Foo and never a subtype of Foo.  ",
      "id": "4e5a0f941228360adbe6ddad38782bf2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "008860626890730d1875077a1b6d67b1"
    },
    {
      "type": "html",
      "text": "The factory method ensures an interface which returns the product type depending on the implementation of the creator class..It's similar to Abstract Factory in that the methods of the Abstract factory can be implemented as factory methods.The main difference is that while abstract factory deals with a family of products,the factory method is only worried about a single product.",
      "id": "3ce8839a707bbf9de466d35f7b8dd620"
    },
    {
      "type": "html",
      "text": "<i>I see that differently and agree with the description in [[Abstract Factory Vs Factory Method]]</i> -- [[Ilja Preuss]]",
      "id": "d01284e43acf3f34a13dc31b54532ea3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "008860626890730d1875077a1b6d67b1"
    },
    {
      "type": "html",
      "text": "\nFactory methods are sometimes used in place of constructors for any of several reasons:",
      "id": "7e7276bd892a0e78b95c464d9c2fe524"
    },
    {
      "type": "html",
      "text": " Some languages (such as Java) do not allow constructors to have useful names",
      "id": "3a7be54e9410b08e1beb7724ee6944f6"
    },
    {
      "type": "html",
      "text": " Some languages (such as Java) do not allow constructors to have different names (which may be necessary if you want to use the same method signature for two constructors)",
      "id": "136d1770167322d2f100e3d640fa01a2"
    },
    {
      "type": "html",
      "text": " To allow the same instance to be reused instead of recreated each time it is needed (see [[Flyweight Pattern]])",
      "id": "0a7b85df5fd53a10fe3d414760f493b1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "008860626890730d1875077a1b6d67b1"
    },
    {
      "type": "html",
      "text": "Related: [[Abstract Factory Pattern]], [[Class Factory]], [[Design Patterns]]",
      "id": "f069487059ee471110290372254051a3"
    },
    {
      "type": "html",
      "text": "\nLinks:  ",
      "id": "e01ca7c7894731ef03d98a451ba07662"
    },
    {
      "type": "html",
      "text": " [http://wiki.cs.uiuc.edu/patternStories/FactoryMethodPattern wiki.cs.uiuc.edu]",
      "id": "1138ab14f6f7420894f647ba6536bb08"
    },
    {
      "type": "html",
      "text": " [http://gsraj.tripod.com/design/creational/factory/factory.html gsraj.tripod.com]",
      "id": "5b20fb4af8824c0a101341b80598bd0a"
    },
    {
      "type": "html",
      "text": " [http://www.dofactory.com/Patterns/PatternFactory.aspx www.dofactory.com]",
      "id": "cc74d016b77d795773d349e96848cdd9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "008860626890730d1875077a1b6d67b1"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]] [[Category Creational Patterns]] ",
      "id": "fcb2f358c0ad111fe7f92f76b43c810b"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?FactoryMethodPattern c2.com]",
      "id": "15628c909bf59ea456b62fa1d4320245"
    }
  ],
  "journal": [
    {
      "date": 1204930542000,
      "id": "50847e3bfe9d834303e5c739a9a99f8f",
      "type": "create",
      "item": {
        "title": "Factory Method Pattern",
        "story": [
          {
            "type": "html",
            "text": "The [[Factory Method Pattern]] is one of the [[Design Patterns]] discussed in the [[Gang Of Four]] book of the same name.",
            "id": "1eb536e2b24a4eafd8414d2be36c1e91"
          },
          {
            "type": "html",
            "text": "<i>(Page 107)</i>",
            "id": "8e67abce98138c5a0ef58687ea209bc8"
          },
          {
            "type": "image",
            "url": "http://www.dofactory.com/Patterns/Diagrams/factory.gif",
            "text": "www.dofactory.com",
            "id": "f432cf675b491cca5ff7628bbf5f6567"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "5d66c677a1a31d43907dba06660aba71"
          },
          {
            "type": "html",
            "text": "<i>Be careful: [[An Operation]] method has to call [[Factory Method]]! The illustration above is confusing.</i>",
            "id": "85d81afb2fb5085dc31478cade5832ad"
          },
          {
            "type": "html",
            "text": "\nIt allows classes to defer object creation to a separate method (a [[Factory Method]]). This would be an additional method on existing classes in a hierarchy.",
            "id": "c1ddafdaf3922c1d4f9e1ca184dcd716"
          },
          {
            "type": "html",
            "text": "\nAlso called the [[Virtual Constructor]]; this is because in a statically-typed language (like [[Cee Plus Plus]]) the object returned is of the type indicated by the method signature, <i>or a subtype</i>.  Compare this with a standard constructor, which always gives you a Foo and never a subtype of Foo.  ",
            "id": "4e5a0f941228360adbe6ddad38782bf2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "008860626890730d1875077a1b6d67b1"
          },
          {
            "type": "html",
            "text": "The factory method ensures an interface which returns the product type depending on the implementation of the creator class..It's similar to Abstract Factory in that the methods of the Abstract factory can be implemented as factory methods.The main difference is that while abstract factory deals with a family of products,the factory method is only worried about a single product.",
            "id": "3ce8839a707bbf9de466d35f7b8dd620"
          },
          {
            "type": "html",
            "text": "<i>I see that differently and agree with the description in [[Abstract Factory Vs Factory Method]]</i> -- [[Ilja Preuss]]",
            "id": "d01284e43acf3f34a13dc31b54532ea3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "008860626890730d1875077a1b6d67b1"
          },
          {
            "type": "html",
            "text": "\nFactory methods are sometimes used in place of constructors for any of several reasons:",
            "id": "7e7276bd892a0e78b95c464d9c2fe524"
          },
          {
            "type": "html",
            "text": " Some languages (such as Java) do not allow constructors to have useful names",
            "id": "3a7be54e9410b08e1beb7724ee6944f6"
          },
          {
            "type": "html",
            "text": " Some languages (such as Java) do not allow constructors to have different names (which may be necessary if you want to use the same method signature for two constructors)",
            "id": "136d1770167322d2f100e3d640fa01a2"
          },
          {
            "type": "html",
            "text": " To allow the same instance to be reused instead of recreated each time it is needed (see [[Flyweight Pattern]])",
            "id": "0a7b85df5fd53a10fe3d414760f493b1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "008860626890730d1875077a1b6d67b1"
          },
          {
            "type": "html",
            "text": "Related: [[Abstract Factory Pattern]], [[Class Factory]], [[Design Patterns]]",
            "id": "f069487059ee471110290372254051a3"
          },
          {
            "type": "html",
            "text": "\nLinks:  ",
            "id": "e01ca7c7894731ef03d98a451ba07662"
          },
          {
            "type": "html",
            "text": " [http://wiki.cs.uiuc.edu/patternStories/FactoryMethodPattern wiki.cs.uiuc.edu]",
            "id": "1138ab14f6f7420894f647ba6536bb08"
          },
          {
            "type": "html",
            "text": " [http://gsraj.tripod.com/design/creational/factory/factory.html gsraj.tripod.com]",
            "id": "5b20fb4af8824c0a101341b80598bd0a"
          },
          {
            "type": "html",
            "text": " [http://www.dofactory.com/Patterns/PatternFactory.aspx www.dofactory.com]",
            "id": "cc74d016b77d795773d349e96848cdd9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "008860626890730d1875077a1b6d67b1"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]] [[Category Creational Patterns]] ",
            "id": "fcb2f358c0ad111fe7f92f76b43c810b"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?FactoryMethodPattern c2.com]",
            "id": "15628c909bf59ea456b62fa1d4320245"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "pattern.sfw.c2.com",
      "date": 1709986880610
    }
  ]
}