{
  "title": "Actor Model",
  "story": [
    {
      "type": "paragraph",
      "id": "da16afe63b13db88",
      "text": "What is the Actor Model & When Should You Use it? [https://mattferderer.com/what-is-the-actor-model-and-when-should-you-use-it post] by [[Matt Ferderer]]"
    },
    {
      "type": "paragraph",
      "id": "2075f1dcd386d1b6",
      "text": "The basic Actor Model design pattern is simple. When you hear of an actor, think of it as a computer process or a function. It's some code that you're going to pass a message to, kind of like calling a function. Basically you send the actor instructions and it returns some information back to you. Now you're probably thinking that this isn't anything revolutionary. So let's break down some of the details. Bear in mind that every framework or language that implements the actor model does so with minor adjustments."
    },
    {
      "type": "markdown",
      "id": "86c31c63bb55ca5d",
      "text": "# Properties of an Actor"
    },
    {
      "type": "paragraph",
      "id": "be6bcaca77ec058b",
      "text": "An actor is a computer process with an address. The address is how you send a message to an actor. It's the equivalent of an e-mail address. Like e-mail addresses, actors can have multiple addresses or a single address. You can also assign one address to multiple actors. This way you can scale your application to meet traffic demands if one actor is not enough."
    },
    {
      "type": "markdown",
      "id": "2aed09793d27c32e",
      "text": "An actor has a simple job:\n\n* Store data\n* Receive messages from other actors\n* Pass messages to other actors\n* Create additional child actors\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Actor Model",
        "story": []
      },
      "date": 1645442525444
    },
    {
      "item": {
        "type": "factory",
        "id": "da16afe63b13db88"
      },
      "id": "da16afe63b13db88",
      "type": "add",
      "date": 1645442526660
    },
    {
      "type": "edit",
      "id": "da16afe63b13db88",
      "item": {
        "type": "paragraph",
        "id": "da16afe63b13db88",
        "text": "What is the Actor Model & When Should You Use it? [post]"
      },
      "date": 1645442533381
    },
    {
      "type": "edit",
      "id": "da16afe63b13db88",
      "item": {
        "type": "paragraph",
        "id": "da16afe63b13db88",
        "text": "What is the Actor Model & When Should You Use it? [https://mattferderer.com/what-is-the-actor-model-and-when-should-you-use-it post]"
      },
      "date": 1645442543788
    },
    {
      "item": {
        "type": "factory",
        "id": "2075f1dcd386d1b6"
      },
      "id": "2075f1dcd386d1b6",
      "type": "add",
      "after": "da16afe63b13db88",
      "date": 1645442592529
    },
    {
      "type": "edit",
      "id": "2075f1dcd386d1b6",
      "item": {
        "type": "paragraph",
        "id": "2075f1dcd386d1b6",
        "text": "The basic Actor Model design pattern is simple. When you hear of an actor, think of it as a computer process or a function. It's some code that you're going to pass a message to, kind of like calling a function. Basically you send the actor instructions and it returns some information back to you. Now you're probably thinking that this isn't anything revolutionary. So let's break down some of the details. Bear in mind that every framework or language that implements the actor model does so with minor adjustments."
      },
      "date": 1645442593935
    },
    {
      "item": {
        "type": "factory",
        "id": "86c31c63bb55ca5d"
      },
      "id": "86c31c63bb55ca5d",
      "type": "add",
      "after": "2075f1dcd386d1b6",
      "date": 1645442635049
    },
    {
      "type": "edit",
      "id": "86c31c63bb55ca5d",
      "item": {
        "type": "markdown",
        "id": "86c31c63bb55ca5d",
        "text": "# Properties of an Actor"
      },
      "date": 1645442641033
    },
    {
      "item": {
        "type": "factory",
        "id": "be6bcaca77ec058b"
      },
      "id": "be6bcaca77ec058b",
      "type": "add",
      "after": "86c31c63bb55ca5d",
      "date": 1645442647676
    },
    {
      "type": "edit",
      "id": "be6bcaca77ec058b",
      "item": {
        "type": "paragraph",
        "id": "be6bcaca77ec058b",
        "text": "An actor is a computer process with an address. The address is how you send a message to an actor. It's the equivalent of an e-mail address. Like e-mail addresses, actors can have multiple addresses or a single address. You can also assign one address to multiple actors. This way you can scale your application to meet traffic demands if one actor is not enough."
      },
      "date": 1645442649168
    },
    {
      "item": {
        "type": "factory",
        "id": "2aed09793d27c32e"
      },
      "id": "2aed09793d27c32e",
      "type": "add",
      "after": "be6bcaca77ec058b",
      "date": 1645442672055
    },
    {
      "type": "edit",
      "id": "2aed09793d27c32e",
      "item": {
        "type": "markdown",
        "id": "2aed09793d27c32e",
        "text": "An actor has a simple job:\n\n    Store data\n    Receive messages from other actors\n    Pass messages to other actors\n    Create additional child actors\n"
      },
      "date": 1645442674407
    },
    {
      "type": "edit",
      "id": "2aed09793d27c32e",
      "item": {
        "type": "markdown",
        "id": "2aed09793d27c32e",
        "text": "An actor has a simple job:\n\n* Store data\n* Receive messages from other actors\n* Pass messages to other actors\n* Create additional child actors\n"
      },
      "date": 1645442689441
    },
    {
      "type": "edit",
      "id": "da16afe63b13db88",
      "item": {
        "type": "paragraph",
        "id": "da16afe63b13db88",
        "text": "What is the Actor Model & When Should You Use it? [https://mattferderer.com/what-is-the-actor-model-and-when-should-you-use-it post] by [[Matt Ferderer]]"
      },
      "date": 1645442731591
    }
  ]
}