{
  "title": "Trifecta",
  "story": [
    {
      "type": "reference",
      "id": "a865c2a3b71a15ec",
      "site": "wiki.ralfbarkow.ch",
      "slug": "role-playing",
      "title": "Role-Playing",
      "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
    },
    {
      "type": "audio",
      "id": "0c7f5903c3db90c2",
      "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/d1c5f97c-9700-48b0-ab35-a039edbfd0d5/audio/16dc506d-5aa1-42c1-8838-9ffaa3e0e1e9/default_tc.mp3\nelm radio – 080: Elm and AI [https://elm-radio.com/episode/elm-and-ai/ page]"
    },
    {
      "type": "paragraph",
      "id": "7ee9d38e880c4b2d",
      "text": "[00:56:59]\nSo with this [[Trifecta]], I think each of these pieces needs to do what it is best at.\n[00:57:06]\nCompilers are good at verifying things.\n[00:57:08]\nHumans are good at, do we even need humans anymore?\n[00:57:15]\nHumans are good at critically thinking, guiding these tools.\n[00:57:20]\nHumans have [[Goals]].\n[00:57:24]\nHumans are good at gathering requirements. >> goals"
    },
    {
      "type": "paragraph",
      "id": "0a9f0400546d4cae",
      "text": "[00:57:28]\nI'm not going to say they're good at it, but at the moment they're better than a machine.\n[00:57:33]\nExactly.\n[00:57:34]\nAnd they have to because humans have goals.\n[00:57:36]\nThe AI's job is not to have goals. >> goals"
    },
    {
      "type": "paragraph",
      "id": "d79ff5a85c4e9a55",
      "text": "[00:57:39]\nHumans have goals for humans.\n[00:57:43]\nWhen a machine wants to make a program for a machine, then it can do it on its own.\n[00:57:48]\nThis is absolutely not discrimination that I'm mentioning.\n[00:57:51]\nGod."
    },
    {
      "type": "paragraph",
      "id": "ada9b580e3c3ac3e",
      "text": "[00:57:53]\nThe human is the customer.\n[00:57:55]\nThe human is the one that gets to say whether you solved the problem or not, that gets to\n[00:58:00]\nmake the calls of what the problem you're solving is.\n[00:58:02]\nSo that's like, the human needs to do that.\n[00:58:05]\nThere's no substitute for that."
    },
    {
      "type": "paragraph",
      "id": "d831fc74b1f8ba37",
      "text": "[00:58:08]\nBecause as you said, if the customer is a machine or an API or something, then you can\n[00:58:15]\nautomate it."
    },
    {
      "type": "paragraph",
      "id": "e8b01b0301b58171",
      "text": "[00:58:16]\nSo the human only asks, well, I need this, and then the machine can do the rest.\n[00:58:22]\nAnd you can have these feedback cycles with compilers and all kinds of test suites."
    },
    {
      "type": "paragraph",
      "id": "a940b9bc03cf9339",
      "text": "[00:58:32]\nSo if that trifecta is what becomes really interesting to me, the human sets the goals\n[00:58:37]\nand can sort of validate these criteria and accept or not accept them.\n[00:58:42]\nThe compiler is a verification tool.\n[00:58:46]\nIt is a tool for giving information through static analysis that is guaranteed correct\n[00:58:52]\ninformation and checking that information."
    },
    {
      "type": "paragraph",
      "id": "3e18090b1198a9f8",
      "text": "[00:58:55]\n[[Elm Review]] and other static analysis tools can provide similar input and verifications.\n[00:59:01]\nAnd AI can piece things together using those guardrails and inputs and verifications provided\n[00:59:08]\nby those other external systems."
    },
    {
      "type": "paragraph",
      "id": "18eabdcb162b54ee",
      "text": "[00:59:10]\nSo when those three things are sort of interacting, then I think it becomes really interesting,\n[00:59:15]\nespecially, as I said, when we are using these things to create higher level building blocks\n[00:59:21]\nas humans."
    },
    {
      "type": "paragraph",
      "id": "8b37c291b2bbfdf4",
      "text": "[00:59:23]\nSo we can say, give me a decoder.\n[00:59:25]\nAnd I know that it satisfies these things.\n[00:59:27]\nAnd I don't have to use brainpower to check that because I know it's an automated verification\n[00:59:31]\nof that."
    },
    {
      "type": "paragraph",
      "id": "7c913eee770395c5",
      "text": "[00:59:32]\nSo I can trust it.\n[00:59:34]\nGive me a fake it till you make it simplest thing that could possibly work green test\n[00:59:38]\nfor this test case and give it guardrails that allow me to trust that it's not going\n[00:59:44]\nbeyond that and filling in implementation details.\n[00:59:48]\nThen you can actually trust these things."
    },
    {
      "type": "paragraph",
      "id": "38a6c3fb7222a6fd",
      "text": "[00:59:50]\nAnd yeah, well, there's there's one question of, do you even need a compiler or type checker\n[00:59:58]\nin the linter and the test suites?\n[01:00:01]\nCould you not just ask the AI to verify things?"
    },
    {
      "type": "paragraph",
      "id": "de905204452661f5",
      "text": "[01:00:05]\nBut then it comes again to the point of, well, who monitors who?\n[01:00:10]\nHow do you trust the right checks?"
    },
    {
      "type": "paragraph",
      "id": "781bfd6bcb2a9d64",
      "text": "[01:00:14]\nAnd at the end of the day, we we do trust the compiler.\n[01:00:17]\nNow, that said, it is possible for the compiler to have bugs and it can.\n[01:00:23]\nBut for all intents and purposes, we fully trust the compiler.\n[01:00:27]\nWe fully trust Elm Review."
    },
    {
      "type": "paragraph",
      "id": "573491fac8d597c7",
      "text": "[01:00:28]\nOf course, possible for these things to have bugs.\n[01:00:30]\nBut I think that's a good assumption.\n[01:00:32]\nWhereas with AI, I don't fully trust it unless I verify it."
    },
    {
      "type": "paragraph",
      "id": "0c0ad636d77385f3",
      "text": "[01:00:37]\nThe thing that is very important for me with regards to the compilers and linters and test\n[01:00:43]\nsuites is that these are consistent.\n[01:00:47]\nLike if you run the same code, if you ask the compiler to verify the same code, it's\n[01:00:52]\ngoing to give you the same results. >> consistent"
    },
    {
      "type": "paragraph",
      "id": "a3902b5480415800",
      "text": "[01:00:54]\nIf you run the same code in a test suite, it's going to give you the same results.\n[01:00:59]\nIf you ask the AI to review your code, like, hey, are there any consistency issues that\n[01:01:06]\nthe linter would tell me, for instance, then from one run to another, it could tell you\n[01:01:12]\ndifferent things."
    },
    {
      "type": "paragraph",
      "id": "398f49aaffa666f7",
      "text": "[01:01:14]\nIt's kind of like asking a human, hey, can you please review this code and tell me how\n[01:01:20]\nyou can improve it?"
    },
    {
      "type": "paragraph",
      "id": "29250a338bbfd9ac",
      "text": "[01:01:21]\nWell, if I ask you today to do this seriously on my code base, you're going to find a lot\n[01:01:26]\nof problems."
    },
    {
      "type": "paragraph",
      "id": "80fc1e1d179bbb61",
      "text": "[01:01:27]\nIf I ask you tomorrow to do it again from scratch, you're going to give me a whole different\n[01:01:32]\nkind of problems."
    },
    {
      "type": "paragraph",
      "id": "09911d95d55fb976",
      "text": "[…]"
    },
    {
      "type": "pagefold",
      "id": "2acd6e3d87c58813",
      "text": "Consistency"
    },
    {
      "type": "paragraph",
      "id": "2e22eddcbb665efd",
      "text": "[01:01:40]\nLinters, when they're dealing with consistency, they give you a certain minimum of consistency\n[01:01:50]\nof code that is written in a specific way. >> consistency"
    },
    {
      "type": "paragraph",
      "id": "5d8a6f54ccc18124",
      "text": "[01:01:53]\nAnd it could go higher, probably.\n[01:01:56]\nLike you want all our functions to be named in a very similar way, for instance, but that's\n[01:02:03]\nprobably a bit too hard for a linter.\n[01:02:06]\nAn AI would always tell you different things, and we don't want that.\n[01:02:10]\nSo we need these to be trustworthy and consistent in the sense that it doesn't give you different\n[01:02:16]\nresults every time."
    },
    {
      "type": "paragraph",
      "id": "00dca86db26b98f6",
      "text": "[01:02:19]\nAnd the lower level the task, the more we can trust it.\n[01:02:22]\nJust like Elm types, because the type system is so simple, it's easy to trust it.\n[01:02:27]\nWhereas TypeScript, it's so permissive, it's hard to trust it."
    },
    {
      "type": "paragraph",
      "id": "9071cffa04a3ebe3",
      "text": "[01:02:32]\nAnd there are so many caveats and exceptions that it's hard to trust such a complex and\n[01:02:39]\npermissive system."
    },
    {
      "type": "paragraph",
      "id": "4ed704df91de11a2",
      "text": "[01:02:41]\nSo I do think that this might be a superpower of Elm.\n[01:02:44]\nAnd honestly, I think that maybe this could be a really appealing thing about Elm that\n[01:02:50]\nmakes it more mainstream.\n[01:02:53]\nThat, wow, this language, it turns out it's really good for automating and tooling.\n[01:02:59]\nAnd you know what?\n[01:03:01]\nAutomating and tooling is really hot these days because people are building all sorts\n[01:03:04]\nof AI automation.\n[01:03:05]\nAnd we can have trusted AI automation."
    },
    {
      "type": "paragraph",
      "id": "adc40beedd2097eb",
      "text": "[01:03:11]\nSo I think we're at this early stage where people are just sort of letting AI just write\n[01:03:16]\ntheir code, which is kind of crazy.\n[01:03:19]\nThey're letting AI just execute shell commands for them.\n[01:03:23]\nI saw a recent thing where somebody like...\n[01:03:28]\nWe all knew it was going to happen when you start letting AI just fill in commands in\n[01:03:33]\nyour shell."
    },
    {
      "type": "paragraph",
      "id": "aedeed8b3ca78fb8",
      "text": "[01:03:42]\nIt's kind of a crazy state of things, right?\n[01:03:44]\nBut if we can have tools that we can really trust and not have to worry about it doing\n[01:03:50]\nanything that's going to put things in a bad state or go beyond the scope of what we're\n[01:03:55]\ntrying to do, just like perfectly reliably solve a difficult problem that we can now\n[01:04:01]\ntake for granted."
    },
    {
      "type": "paragraph",
      "id": "4cda4b3947cbb928",
      "text": "[01:04:03]\nThat's awesome.\n[01:04:04]\nAnd I think Elm is a really good fit for that."
    },
    {
      "type": "paragraph",
      "id": "861951a5c8c29b5c",
      "text": "[01:04:07]\nI've also heard the opposite point of view where this could be pretty bad for Elm or\n[01:04:13]\nfor smaller languages in the sense that the AI is trained on code that is available.\n[01:04:21]\nAnd there's not a lot of Elm code out there compared to more mainstream languages like\n[01:04:26]\nJavaScript."
    },
    {
      "type": "paragraph",
      "id": "53fe4e63497a4ce0",
      "text": "[01:04:27]\nSo this could make adoption of new languages harder or smaller languages in general.\n[01:04:35]\nBut as you said, if there are guarantees like the ones that Elm provides, that can even\n[01:04:42]\nout the playing field."
    },
    {
      "type": "paragraph",
      "id": "19319ba5a01db81c",
      "text": "[01:04:44]\nBut if you're designing a language that doesn't have the same guarantees as Elm, and it's\n[01:04:49]\njust very new or very small, then you get kind of the worst of both worlds."
    },
    {
      "type": "paragraph",
      "id": "888002bd1eaea5a6",
      "text": "[01:04:56]\nAnd this all depends on writing the tooling, right?\n[01:05:00]\nAnd so I think we have an opportunity to build really cool stuff leveraging these techniques\n[01:05:07]\nright now.\n[01:05:08]\nSo I'm definitely going to be playing around with that."
    },
    {
      "type": "paragraph",
      "id": "d2f641d4c01c92af",
      "text": "[01:05:10]\nLike I've got a lot of ideas.\n[01:05:12]\nI want to make this sort of automated type puzzle solver.\n[01:05:17]\nI think, you know, having it build JSON decoders starts to become really interesting where\n[01:05:25]\nlike Mario and I were working on this Elm HTTP fusion thing, which is really cool for\n[01:05:31]\nlike having a UI where you make an HTTP request, and then you can sort of click the JSON fields\n[01:05:39]\nyou want and it generates a decoder.\n[01:05:41]\nIt's like, that's great."
    },
    {
      "type": "paragraph",
      "id": "55ee061e90a2fae8",
      "text": "[01:05:42]\nBut what if you can tell it the type you want and it can figure out what fields to get and\n[01:05:49]\ngenerate something that is provably correct because you actually ran it and verified it,\n[01:05:55]\nand then you can fully trust it, but it just solves your problem.\n[01:05:58]\nAnd it sort of can solve that last mile problem where like, there are so many things I've\n[01:06:03]\nbeen trying to automate where it's difficult to do that last little piece of the puzzle\n[01:06:09]\nand AI can do that missing piece."
    },
    {
      "type": "paragraph",
      "id": "a095f062c3e40ac0",
      "text": "[01:06:11]\nSo I think this unlocks some really cool things."
    },
    {
      "type": "paragraph",
      "id": "b0d5ef3439b789b4",
      "text": "[01:06:15]\nI've been thinking about like some other use cases I'm thinking about are like, so for\n[01:06:19]\nexample, like with Elm GraphQL, you know, we've talked with Matt about Elm GQL, which\n[01:06:25]\nsort of tries to be a simpler way of just taking a raw GraphQL query as a string.\n[01:06:32]\nAnd it's very easy to interact with GraphQL APIs through this raw query string.\n[01:06:39]\nAnd then it can generate type aliases for you of the response you get, and you just\n[01:06:45]\npaste in your GraphQL query string and it spits out some Elm code to execute that query.\n[01:06:52]\nAnd the trade off with that approach in Elm GQL versus Elm GraphQL, as we talked about\n[01:06:57]\nin our Elm GQL episode is with Elm GraphQL, you have to explicitly write everything you're\n[01:07:05]\ndecoding in Elm code."
    },
    {
      "type": "paragraph",
      "id": "a7d06a2aff388a10",
      "text": "[01:07:07]\nBut you can maintain it in Elm code and you get more fine grained control over the types\n[01:07:12]\nyou decode into.\n[01:07:14]\nSo there's a trade off."
    },
    {
      "type": "paragraph",
      "id": "af6df7c5db18b7f2",
      "text": "[01:07:16]\nBut what if you had a tool that generated an Elm GraphQL query, you get complete control\n[01:07:24]\nover the fine grained code and that you decode into, but what if you could just tell an AI\n[01:07:31]\ntool generate an Elm GraphQL query."
    },
    {
      "type": "paragraph",
      "id": "770b2ea1e4bcade8",
      "text": "[01:07:33]\nAnd using this sort of type puzzle solver I built, I can say here are all the functions\n[01:07:39]\nfor generating Elm GraphQL types, solve this problem.\n[01:07:44]\nAnd here's the raw GraphQL query.\n[01:07:46]\nAnd here is the resulting Elm type I want.\n[01:07:50]\nAnd it could, I think it could solve that pretty well.\n[01:07:54]\nSo some of these tools become more interesting when you have that extra bit of glue from\n[01:08:00]\nAI."
    },
    {
      "type": "pagefold",
      "id": "d062a5709c88d8a0",
      "text": "Boilerplate"
    },
    {
      "type": "paragraph",
      "id": "b25f18bc95f8887f",
      "text": "[01:08:01]\nAnd that would solve all of Elm's problems because all of Elm's problems are boilerplate.\n[01:08:07]\nExactly."
    },
    {
      "type": "paragraph",
      "id": "2931aa35c32b0c43",
      "text": "[01:08:08]\nIt's boilerplate that's really easy to maintain once you have it.\n[01:08:12]\nSo if it's very easy to confidently write boilerplate, then yeah, Elm becomes a lot\n[01:08:17]\nmore exciting."
    },
    {
      "type": "paragraph",
      "id": "451b50d08bbbbb89",
      "text": "[01:08:18]\nIf we take your last example, it does mean that you redo the same logic every time and\n[01:08:24]\nnot necessarily in a framework or library oriented way.\n[01:08:31]\nSo you would redo, you would inline the creation of the GraphQL query and decoding those instead\n[01:08:39]\nof using a pre-made library, which simplifies the API for that.\n[01:08:45]\nBut it could be very interesting nonetheless."
    },
    {
      "type": "paragraph",
      "id": "3784bfe2fd960859",
      "text": "[01:08:50]\nI think part of the challenge right now to using these tools effectively is like defining\n[01:08:56]\nthe problems and the workflows to leverage these as much as possible.\n"
    },
    {
      "type": "pagefold",
      "id": "7aa3a6efa971f56b",
      "text": "Refactoring"
    },
    {
      "type": "paragraph",
      "id": "8f437357033f0860",
      "text": "[01:09:02]\nAnother thing on my mind here is like refactoring.\n[01:09:05]\nSo we have, you know, if you build in an IntelliJ refactoring for like extracting a function\n[01:09:13]\nto a module, like what kinds of refactoring should we invest in building in like IDEs\n[01:09:21]\nor language servers versus using AI?\n[01:09:24]\nI mean, we could also just ask an AI to write those things to be integrated into the IDE\n[01:09:33]\nfor instance.\n[01:09:34]\nSo for instance, if you go back to the linter example, I don't want an AI to review my code\n[01:09:43]\nbecause it's going to be inconsistent."
    },
    {
      "type": "paragraph",
      "id": "56964423e3207e0b",
      "text": "[01:09:45]\nI can ask it to write a linter rule once and then I can run that linter rule multiple times.\n[01:09:51]\nBut yeah, I definitely agree that there are cases where you will want to have a transformation\n[01:09:59]\nusing AI rather than one that is hard-coded one way or another in an IDE.\n[01:10:05]\nThat could be interesting to find."
    },
    {
      "type": "paragraph",
      "id": "25954665b5a936e4",
      "text": "[01:10:12]\nI'm very bullish on what we can do with these AI tools.\n[01:10:17]\nBut I'll have you ask yourself whether you should.\n[01:10:22]\nWell, that's another question."
    },
    {
      "type": "paragraph",
      "id": "4a3b0d2273c7968d",
      "text": "[01:10:26]\nThe thing I'm bearish on would be just saying AI build a plugin.\n[01:10:34]\nYou know, people are, there's a lot of hype around like it built a Chrome extension for\n[01:10:39]\nthis thing.\n[01:10:40]\nIt built a whole app from a sketch on a napkin.\n[01:10:42]\nAnd so it's like, okay, that's very impressive."
    },
    {
      "type": "paragraph",
      "id": "dc97d154329d3eba",
      "text": "[01:10:46]\nIt's very interesting, but like how I am skeptical of how useful that is going to actually prove\n[01:10:54]\nto be.\n[01:10:55]\nLike, I don't feel like that's what's going to take people's jobs away.\n[01:10:58]\nI don't feel like that's what's going to replace the work we're doing day to day.\n[01:11:01]\nI think it's these more mature things that we can really rely on where we're choosing\n[01:11:07]\nmore constrained problems to do higher level operations and verify them and put guardrails\n[01:11:13]\non them."
    },
    {
      "type": "paragraph",
      "id": "a83042e558ebf54a",
      "text": "[01:11:15]\nI think that's my personal bias and obsession and people will get over that and not worry\n[01:11:21]\nabout that and be able to do cooler things than I can do.\n[01:11:24]\nThat's very possible.\n[01:11:25]\nI admit that's a possibility, but that's where I'm putting my money."
    },
    {
      "type": "pagefold",
      "id": "a95179c87ff58022",
      "text": "Happy Path"
    },
    {
      "type": "paragraph",
      "id": "493cce418dcd3413",
      "text": "[01:11:29]\nSo like writing, having it write the IDE completions for extracting functions and things like that.\n[01:11:38]\nLike it's like I can, the hard part isn't writing like the happy path.\n[01:11:46]\nI can write the happy path of that.\n[01:11:47]\nI've actually, I've done that in IntelliJ refactorings.\n[01:11:53]\nThe hard part is everything else that it's not considering."
    },
    {
      "type": "paragraph",
      "id": "d991085b9e6d1ba0",
      "text": "[01:11:56]\nAnd if I have to babysit it to make sure it solved each of those cases, I may as well\n[01:12:01]\ndo it myself."
    },
    {
      "type": "pagefold",
      "id": "22d391f86236879f",
      "text": "Pair with the AI"
    },
    {
      "type": "paragraph",
      "id": "95308e2de870aa61",
      "text": "[01:12:02]\nCause like the things it's going to miss, the things that I don't trust that it did\n[01:12:07]\nand I have to go check myself, it's easier to do them myself and engage with the problem\n[01:12:13]\nand solve it my way and know that I accounted for every corner case and wrote a test for\n[01:12:18]\nit than to just trust the AI and be like, okay, now I have to go check everything that\n[01:12:23]\nit did in this crazy, impossible to understand code.\n[01:12:26]\nThat's not the way I would have solved it.\n[01:12:29]\nBut if you paired with the AI."
    },
    {
      "type": "paragraph",
      "id": "51c88948a1ef8973",
      "text": "[01:12:33]\nThat's, that's the direction I think things are going.\n[01:12:35]\nJust like tell it very high level instructions.\n[01:12:39]\nBut every time you give instructions, you, there's, there's some bias, right?\n[01:12:44]\nSo at least so far the, the AI is, they're always very confident."
    },
    {
      "type": "paragraph",
      "id": "57f50140dca1ef92",
      "text": "[01:13:02]\nI've seen a lot of people in the Elm Slack ask for questions like, how do I do X or how\n[01:13:06]\ndo I do, how do I solve this problem?\n[01:13:09]\nAnd there's often that XY problem.\n[01:13:12]\nLike you ask to solve it."
    },
    {
      "type": "paragraph",
      "id": "46123e85d30d002a",
      "text": "[01:13:14]\nYou asked a solution to X, but you're actually trying to solve a different Y problem.\n[01:13:19]\nAnd so even if I imagine that the AIs will become extremely, extremely good, like 100 times better than you and me combined, or there's still only going to solve the problem\n[01:13:33]\nthat you're asking them to."
    },
    {
      "type": "paragraph",
      "id": "680b26640e76d7a2",
      "text": "[01:13:35]\nJust like, let's imagine it's the smartest person on the world that you have free access\n[01:13:40]\nto.\n[01:13:41]\nWell, if you ask them something and they don't know, they don't think about whether you're\n[01:13:46]\ngoing to, whether it makes sense to ask the question, then they're not going to tell you."
    },
    {
      "type": "paragraph",
      "id": "8d68f0ae987f1091",
      "text": "[01:13:53]\nSo you need to prompt them, but you also need to think about how you ask the question, what\n[01:13:59]\nquestion you ask.\n[01:14:00]\nAnd I'm thinking maybe we should ask them as well.\n[01:14:04]\nLike, Hey, I have this feature that I want to do.\n[01:14:08]\nSo can you tell me how I transform this HTML to a string?"
    },
    {
      "type": "paragraph",
      "id": "e49e5d655924f6a7",
      "text": "[01:14:12]\nAnd maybe you should also ask, like, does this make sense by the way?\n[01:14:15]\nBecause then they start asking, answering that question.\n[01:14:19]\nWell, that no, that doesn't make sense."
    },
    {
      "type": "paragraph",
      "id": "ed36c825e5c5faec",
      "text": "[01:14:22]\nSo I said, we're good at gathering requirements, but we're not very good at those, but that\n[01:14:29]\nis our job.\n[01:14:30]\nAnd I think it will increasingly become our job.\n[01:14:34]\nSo we're going to become AI managers."
    },
    {
      "type": "paragraph",
      "id": "861200873c78dfd4",
      "text": "[01:14:40]\nAI product owners."
    },
    {
      "type": "paragraph",
      "id": "b3a81ab12debf164",
      "text": "[01:14:44]\nI think, and what you're talking about, the word that's been coming to mind for me is that\n[01:14:50]\nthese AI engines are very suggestible.\n[01:14:54]\nLike if you say, I don't know, where might I have lost my keys?\n[01:15:03]\nHint, I often forget them in my pants that I put in the hamper.\n[01:15:11]\nThen it's going to be like, are they in the hamper?\n[01:15:14]\nBut it's going to run with, I've seen that with the Elm compiler sometimes says, hint,\n[01:15:23]\nand it tells it, maybe you need to do this.\n[01:15:25]\nAnd then it's like, okay, sure, let me try."
    },
    {
      "type": "paragraph",
      "id": "207ab0882c85f178",
      "text": "[01:15:28]\nAnd it gets fixated on this one path that the compiler sort of hinted at, and that's\n[01:15:34]\nnot a good path."
    },
    {
      "type": "paragraph",
      "id": "d8038d16b0bb5bde",
      "text": "[01:15:35]\nSo that's why with this type puzzle, I was trying to give it a very clear set of rules\n[01:15:41]\nand say, this is the set of steps you're following.\n[01:15:46]\nAnd then even teach it, this is how you adjust if you are incorrect in one of your guesses.\n[01:15:51]\nAnd so you really have to prime it and prevent it from getting fixated and biased in one\n[01:15:56]\ndirection."
    },
    {
      "type": "paragraph",
      "id": "076e58dd66848ff6",
      "text": "[01:15:58]\nBut you also said some guardrails and if you were wrong in sending those guardrails, that's\n[01:16:04]\ngoing to be a long problem for you."
    },
    {
      "type": "pagefold",
      "id": "87d79f2998e0fefb",
      "text": "Ideation"
    },
    {
      "type": "paragraph",
      "id": "a40f0fee914624fa",
      "text": "[01:16:08]\nAnd it is, I mean, these AI engines are also, they're interesting for ideation as well.\n[01:16:13]\nSo there, I mean, that's a whole nother topic we could get into, but.\n[01:16:18]\nWe mostly talked about using it for things that we know well, and that we can validate,\n[01:16:23]\nverify, which I completely agree is probably the way to use it.\n[01:16:29]\nBut it is also very good at helping you out when you don't know something.\n[01:16:33]\nAnd there it becomes a lot more dangerous because it's overconfident and it's going\n[01:16:38]\nto lead you to wrong results, wrong paths, and you're not going to be able to figure\n[01:16:44]\nthose out."
    },
    {
      "type": "paragraph",
      "id": "c88a2b66f638b8c3",
      "text": "[01:16:45]\nBut because it knows a lot more than you, it will, I think in a lot of cases, be used\n[01:16:52]\nin that way.\n[01:16:53]\nAnd there people have to weigh in the risks that are involved."
    },
    {
      "type": "paragraph",
      "id": "a6844a3dbece9002",
      "text": "[01:17:00]\nSo definitely in some cases, it's going to be amazing.\n[01:17:04]\nFor instance, I am not a good drawer, but I can ask an AI to draw something for me.\n[01:17:12]\nI actually do have a whole website filled with drawings, but I probably shouldn't train\n[01:17:17]\nit on that."
    },
    {
      "type": "paragraph",
      "id": "430f8ddbe2d6b062",
      "text": "[01:17:19]\nBut yeah, if I ask the AI to do it, then that would probably give some better results.\n[01:17:26]\nBut when it comes to code, if I can verify it, then it's better.\n[01:17:31]\nIf I can't verify it, then it's something new to me.\n[01:17:33]\nWell, that is very interesting as well.\n[01:17:36]\nAnd the thing that I'm worried here about on that matter is that if I ask the tool to\n[01:17:42]\ndo something for me for something that I don't know, whether I will start over relying on\n[01:17:47]\nit instead of learning properly and improving my own skill sets.\n[01:17:53]\nI think that's going to happen a lot with a lot of people getting into development right\n[01:17:57]\nnow."
    },
    {
      "type": "paragraph",
      "id": "22ce579d7b50477e",
      "text": "[01:17:58]\nAnd yeah, I think being an experienced developer, it's a lot easier to know what to rely on\n[01:18:04]\nit for or when it's maybe like starting to write code where you're not learning to write\n[01:18:14]\na reg x.\n[01:18:15]\nAnd you probably should sort of figure that out instead of just blindly trusting a thing.\n[01:18:19]\nOr maybe it's okay to just be like, if the test passes, I don't really care how it arrived\n[01:18:25]\nat that."
    },
    {
      "type": "paragraph",
      "id": "194ceb54d3519c91",
      "text": "[01:18:26]\nMaybe that's okay too.\n[01:18:27]\nYou know, but yeah, I can for instance, imagine a backend developer who knows a little bit\n[01:18:32]\nof Elm and they just ask the AI to generate the UI for their application or at least the\n[01:18:39]\nview parts of the application."
    },
    {
      "type": "paragraph",
      "id": "486b5cb55a3a3fa8",
      "text": "[01:18:43]\nAnd that's going to be very helpful to get started.\n[01:18:46]\nBut how do you make sure that things are correct with accessibility and all those concerns\n[01:18:52]\nthat you don't know about?"
    },
    {
      "type": "paragraph",
      "id": "991fe379ef96fdaf",
      "text": "[01:18:56]\nIs it going to fit well with a design system you set up?\n[01:19:00]\nAnd there are all these assumptions that, yeah, so you have to know what to rely on\n[01:19:04]\nit for."
    },
    {
      "type": "paragraph",
      "id": "f6a80c32136e3f41",
      "text": "[01:19:05]\nAnd if it's like, if you can have it perform a high level task that you can fully verify\n[01:19:12]\nand trust it for, that's interesting.\n[01:19:14]\nIf you can have it help you with ideation and generating a list of things to think about,\n[01:19:22]\nand that's input for you to consider some other things, that's also very good.\n[01:19:26]\nBecause that, if something is helping you with ideation, you can filter out a little\n[01:19:31]\nbit of junk to get the diamond in the rough.\n[01:19:34]\nOh, this one idea, I didn't consider that. [01:19:36]\nAnd that was really good."
    },
    {
      "type": "paragraph",
      "id": "6d62e1b4e8732c94",
      "text": "[01:19:37]\nSo that's another use case.\n[01:19:38]\nBut the sort of in-between space where you just YOLO it and blindly incorporate it into\n[01:19:45]\nyour code, I'm honestly pretty skeptical of the utility of that.\n[01:19:51]\nAnd I'm skeptical of how maintainable it's going to be working with systems like that\n[01:19:56]\nand maintaining code where there's a lot of that happening.\n[01:19:59]\nI think it's going to be okay for things that you're okay with throwing away.\n[01:20:04]\nWell, that you're okay with and that you can throw away."
    },
    {
      "type": "paragraph",
      "id": "dc26f2b096fa826b",
      "text": "[01:20:09]\nYeah, if you can scope something down really narrowly.\n[01:20:12]\nI used it the other day for writing something to traverse a directory structure to find\n[01:20:21]\nthe root Elm project by looking until it found an Elm.json file.\n[01:20:26]\nFor my Elm pages scripts, I changed it so you can do Elm pages run and then give a file\n[01:20:31]\npath and it will find the nearest Elm.json to the file you pass in.\n[01:20:36]\nAnd I wrote it with GPT-4 and I went through a few iterations and I guided it very clearly\n[01:20:43]\nwith what I wanted in the result."
    },
    {
      "type": "paragraph",
      "id": "d583bf5e4b8a2f85",
      "text": "[01:20:46]\nBut I knew it was like, this is going to generate one function for me that if it works, I can\n[01:20:52]\njust let it do its thing.\n[01:20:54]\nAlthough I didn't like the style it used.\n[01:20:56]\nSo I told it, instead of doing a bunch of for loops and while loops, can you do it using\n[01:21:03]\nfunctional style mapping and recursive functions?\n[01:21:06]\nAnd it modified it."
    },
    {
      "type": "paragraph",
      "id": "e17eb81414231d9e",
      "text": "[01:21:08]\nAnd then I said, can you use ESM imports instead?\n[01:21:11]\nAnd with a few tweaks, I had it refactor it to the style I wanted.\n[01:21:14]\nAnd so yeah, it was like a constrained thing.\n[01:21:18]\nAnd the next time you do that, you will prime it with, oh, use a functional style and use\n[01:21:23]\nESM, etc."
    },
    {
      "type": "paragraph",
      "id": "3b1c2fac041466d8",
      "text": "[01:21:26]\nAnd that was like a constrained enough thing that I know with my experience, that it's\n[01:21:33]\nlike an independent, separable problem that if it writes a function that does this, I\n[01:21:39]\ncan use that and it can be useful to my workflow.\n[01:21:41]\nSo I think there's an art to knowing when to rely on it as well.\n[01:21:45]\nI feel like we have a lot more to talk about, a lot of interesting aspects to cover, but\n[01:21:52]\nthis has already been a quite long episode."
    },
    {
      "type": "paragraph",
      "id": "27f01dd7c08ef93e",
      "text": "[01:22:06]\nAnd tell us what you've been doing with Element AI or pure functional programming and AI.\n[01:22:12]\nWe would love to hear from you.\n[01:22:13]\nWe'd love to hear what clever things you come up with or just how you use it in your workflow\n[01:22:17]\nand let us know what you want to hear about with Elm and AI in the future."
    },
    {
      "type": "paragraph",
      "id": "5c1cfc56f1ed5ded",
      "text": "[01:22:22]\nDid you prompt the audience well enough so that they give you the answers that you're\n[01:22:27]\nlooking for or do you need to rephrase it slightly?\n[01:22:30]\nMaybe let's give them some guardrails.\n[01:22:32]\nGive us your example use cases.\n[01:22:35]\nGive us an example of the problem you used with it.\n[01:22:38]\nThere we go.\n[01:22:39]\nI think we're good."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Trifecta",
        "story": []
      },
      "date": 1681975868497
    },
    {
      "item": {
        "type": "factory",
        "id": "a865c2a3b71a15ec"
      },
      "id": "a865c2a3b71a15ec",
      "type": "add",
      "date": 1681975870668
    },
    {
      "type": "edit",
      "id": "a865c2a3b71a15ec",
      "item": {
        "type": "reference",
        "id": "a865c2a3b71a15ec",
        "site": "wiki.ralfbarkow.ch",
        "slug": "role-playing",
        "title": "Role-Playing",
        "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
      },
      "date": 1681975876278
    },
    {
      "id": "0c7f5903c3db90c2",
      "type": "add",
      "item": {
        "type": "audio",
        "id": "0c7f5903c3db90c2",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/d1c5f97c-9700-48b0-ab35-a039edbfd0d5/audio/16dc506d-5aa1-42c1-8838-9ffaa3e0e1e9/default_tc.mp3\nelm radio – 080: Elm and AI [https://elm-radio.com/episode/elm-and-ai/ page]"
      },
      "after": "a865c2a3b71a15ec",
      "attribution": {
        "page": "Role-Playing"
      },
      "date": 1681975881901
    },
    {
      "id": "7ee9d38e880c4b2d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7ee9d38e880c4b2d",
        "text": "[00:56:59]\nSo with this [[Trifecta]], I think each of these pieces needs to do what it is best at.\n[00:57:06]\nCompilers are good at verifying things.\n[00:57:08]\nHumans are good at, do we even need humans anymore?\n[00:57:15]\nHumans are good at critically thinking, guiding these tools.\n[00:57:20]\nHumans have goals.\n[00:57:24]\nHumans are good at gathering requirements."
      },
      "after": "0c7f5903c3db90c2",
      "attribution": {
        "page": "Role-Playing"
      },
      "date": 1681975894163
    },
    {
      "item": {
        "type": "paragraph",
        "id": "0a9f0400546d4cae",
        "text": "[00:57:28]\nI'm not going to say they're good at it, but at the moment they're better than a machine.\n[00:57:33]\nExactly.\n[00:57:34]\nAnd they have to because humans have goals.\n[00:57:36]\nThe AI's job is not to have goals. >> goals"
      },
      "id": "0a9f0400546d4cae",
      "type": "add",
      "after": "7ee9d38e880c4b2d",
      "date": 1681976044889
    },
    {
      "type": "edit",
      "id": "0a9f0400546d4cae",
      "item": {
        "type": "paragraph",
        "id": "0a9f0400546d4cae",
        "text": "[00:57:28]\nI'm not going to say they're good at it, but at the moment they're better than a machine.\n[00:57:33]\nExactly.\n[00:57:34]\nAnd they have to because humans have goals.\n[00:57:36]\nThe AI's job is not to have goals. >> goals"
      },
      "date": 1681976046441
    },
    {
      "item": {
        "type": "paragraph",
        "id": "d79ff5a85c4e9a55",
        "text": "[00:57:39]\nHumans have goals for humans.\n[00:57:43]\nWhen a machine wants to make a program for a machine, then it can do it on its own.\n[00:57:48]\nThis is absolutely not discrimination that I'm mentioning.\n[00:57:51]\nGod."
      },
      "id": "d79ff5a85c4e9a55",
      "type": "add",
      "after": "0a9f0400546d4cae",
      "date": 1681976076769
    },
    {
      "type": "edit",
      "id": "d79ff5a85c4e9a55",
      "item": {
        "type": "paragraph",
        "id": "d79ff5a85c4e9a55",
        "text": "[00:57:39]\nHumans have goals for humans.\n[00:57:43]\nWhen a machine wants to make a program for a machine, then it can do it on its own.\n[00:57:48]\nThis is absolutely not discrimination that I'm mentioning.\n[00:57:51]\nGod."
      },
      "date": 1681976078487
    },
    {
      "type": "edit",
      "id": "7ee9d38e880c4b2d",
      "item": {
        "type": "paragraph",
        "id": "7ee9d38e880c4b2d",
        "text": "[00:56:59]\nSo with this [[Trifecta]], I think each of these pieces needs to do what it is best at.\n[00:57:06]\nCompilers are good at verifying things.\n[00:57:08]\nHumans are good at, do we even need humans anymore?\n[00:57:15]\nHumans are good at critically thinking, guiding these tools.\n[00:57:20]\nHumans have [[Goals]].\n[00:57:24]\nHumans are good at gathering requirements. >> goals"
      },
      "date": 1681976108769
    },
    {
      "type": "edit",
      "id": "7ee9d38e880c4b2d",
      "item": {
        "type": "paragraph",
        "id": "7ee9d38e880c4b2d",
        "text": "[00:56:59]\nSo with this [[Trifecta]], I think each of these pieces needs to do what it is best at.\n[00:57:06]\nCompilers are good at verifying things.\n[00:57:08]\nHumans are good at, do we even need humans anymore?\n[00:57:15]\nHumans are good at critically thinking, guiding these tools.\n[00:57:20]\nHumans have [[Goals]].\n[00:57:24]\nHumans are good at gathering requirements. >> goals"
      },
      "date": 1681976131664
    },
    {
      "type": "edit",
      "id": "0a9f0400546d4cae",
      "item": {
        "type": "paragraph",
        "id": "0a9f0400546d4cae",
        "text": "[00:57:28]\nI'm not going to say they're good at it, but at the moment they're better than a machine.\n[00:57:33]\nExactly.\n[00:57:34]\nAnd they have to because humans have goals.\n[00:57:36]\nThe AI's job is not to have goals. >> goals"
      },
      "date": 1681976155478
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ada9b580e3c3ac3e",
        "text": "[00:57:53]\nThe human is the customer.\n[00:57:55]\nThe human is the one that gets to say whether you solved the problem or not, that gets to\n[00:58:00]\nmake the calls of what the problem you're solving is.\n[00:58:02]\nSo that's like, the human needs to do that.\n[00:58:05]\nThere's no substitute for that."
      },
      "id": "ada9b580e3c3ac3e",
      "type": "add",
      "after": "d79ff5a85c4e9a55",
      "date": 1681976180187
    },
    {
      "type": "edit",
      "id": "ada9b580e3c3ac3e",
      "item": {
        "type": "paragraph",
        "id": "ada9b580e3c3ac3e",
        "text": "[00:57:53]\nThe human is the customer.\n[00:57:55]\nThe human is the one that gets to say whether you solved the problem or not, that gets to\n[00:58:00]\nmake the calls of what the problem you're solving is.\n[00:58:02]\nSo that's like, the human needs to do that.\n[00:58:05]\nThere's no substitute for that."
      },
      "date": 1681976181946
    },
    {
      "type": "add",
      "id": "d831fc74b1f8ba37",
      "item": {
        "type": "paragraph",
        "id": "d831fc74b1f8ba37",
        "text": "[00:58:08]\nBecause as you said, if the customer is a machine or an API or something, then you can\n[00:58:15]\nautomate it."
      },
      "after": "ada9b580e3c3ac3e",
      "date": 1681976203666
    },
    {
      "item": {
        "type": "paragraph",
        "id": "e8b01b0301b58171",
        "text": "[00:58:16]\nSo the human only asks, well, I need this, and then the machine can do the rest.\n[00:58:22]\nAnd you can have these feedback cycles with compilers and all kinds of test suites."
      },
      "id": "e8b01b0301b58171",
      "type": "add",
      "after": "d831fc74b1f8ba37",
      "date": 1681976214477
    },
    {
      "type": "edit",
      "id": "e8b01b0301b58171",
      "item": {
        "type": "paragraph",
        "id": "e8b01b0301b58171",
        "text": "[00:58:16]\nSo the human only asks, well, I need this, and then the machine can do the rest.\n[00:58:22]\nAnd you can have these feedback cycles with compilers and all kinds of test suites."
      },
      "date": 1681976215876
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a940b9bc03cf9339",
        "text": "[00:58:32]\nSo if that trifecta is what becomes really interesting to me, the human sets the goals\n[00:58:37]\nand can sort of validate these criteria and accept or not accept them.\n[00:58:42]\nThe compiler is a verification tool.\n[00:58:46]\nIt is a tool for giving information through static analysis that is guaranteed correct\n[00:58:52]\ninformation and checking that information."
      },
      "id": "a940b9bc03cf9339",
      "type": "add",
      "after": "e8b01b0301b58171",
      "date": 1681976226626
    },
    {
      "type": "edit",
      "id": "a940b9bc03cf9339",
      "item": {
        "type": "paragraph",
        "id": "a940b9bc03cf9339",
        "text": "[00:58:32]\nSo if that trifecta is what becomes really interesting to me, the human sets the goals\n[00:58:37]\nand can sort of validate these criteria and accept or not accept them.\n[00:58:42]\nThe compiler is a verification tool.\n[00:58:46]\nIt is a tool for giving information through static analysis that is guaranteed correct\n[00:58:52]\ninformation and checking that information."
      },
      "date": 1681976227991
    },
    {
      "item": {
        "type": "paragraph",
        "id": "3e18090b1198a9f8",
        "text": "[00:58:55]\n[[Elm Review]] and other static analysis tools can provide similar input and verifications.\n[00:59:01]\nAnd AI can piece things together using those guardrails and inputs and verifications provided\n[00:59:08]\nby those other external systems."
      },
      "id": "3e18090b1198a9f8",
      "type": "add",
      "after": "a940b9bc03cf9339",
      "date": 1681976251637
    },
    {
      "type": "edit",
      "id": "3e18090b1198a9f8",
      "item": {
        "type": "paragraph",
        "id": "3e18090b1198a9f8",
        "text": "[00:58:55]\n[[Elm Review]] and other static analysis tools can provide similar input and verifications.\n[00:59:01]\nAnd AI can piece things together using those guardrails and inputs and verifications provided\n[00:59:08]\nby those other external systems."
      },
      "date": 1681976262248
    },
    {
      "item": {
        "type": "paragraph",
        "id": "18eabdcb162b54ee",
        "text": "[00:59:10]\nSo when those three things are sort of interacting, then I think it becomes really interesting,\n[00:59:15]\nespecially, as I said, when we are using these things to create higher level building blocks\n[00:59:21]\nas humans."
      },
      "id": "18eabdcb162b54ee",
      "type": "add",
      "after": "3e18090b1198a9f8",
      "date": 1681976286015
    },
    {
      "type": "edit",
      "id": "18eabdcb162b54ee",
      "item": {
        "type": "paragraph",
        "id": "18eabdcb162b54ee",
        "text": "[00:59:10]\nSo when those three things are sort of interacting, then I think it becomes really interesting,\n[00:59:15]\nespecially, as I said, when we are using these things to create higher level building blocks\n[00:59:21]\nas humans."
      },
      "date": 1681976287314
    },
    {
      "item": {
        "type": "paragraph",
        "id": "8b37c291b2bbfdf4",
        "text": "[00:59:23]\nSo we can say, give me a decoder.\n[00:59:25]\nAnd I know that it satisfies these things.\n[00:59:27]\nAnd I don't have to use brainpower to check that because I know it's an automated verification\n[00:59:31]\nof that."
      },
      "id": "8b37c291b2bbfdf4",
      "type": "add",
      "after": "18eabdcb162b54ee",
      "date": 1681976297570
    },
    {
      "type": "edit",
      "id": "8b37c291b2bbfdf4",
      "item": {
        "type": "paragraph",
        "id": "8b37c291b2bbfdf4",
        "text": "[00:59:23]\nSo we can say, give me a decoder.\n[00:59:25]\nAnd I know that it satisfies these things.\n[00:59:27]\nAnd I don't have to use brainpower to check that because I know it's an automated verification\n[00:59:31]\nof that."
      },
      "date": 1681976299092
    },
    {
      "item": {
        "type": "paragraph",
        "id": "7c913eee770395c5",
        "text": "[00:59:32]\nSo I can trust it.\n[00:59:34]\nGive me a fake it till you make it simplest thing that could possibly work green test\n[00:59:38]\nfor this test case and give it guardrails that allow me to trust that it's not going\n[00:59:44]\nbeyond that and filling in implementation details.\n[00:59:48]\nThen you can actually trust these things."
      },
      "id": "7c913eee770395c5",
      "type": "add",
      "after": "8b37c291b2bbfdf4",
      "date": 1681976307930
    },
    {
      "type": "edit",
      "id": "7c913eee770395c5",
      "item": {
        "type": "paragraph",
        "id": "7c913eee770395c5",
        "text": "[00:59:32]\nSo I can trust it.\n[00:59:34]\nGive me a fake it till you make it simplest thing that could possibly work green test\n[00:59:38]\nfor this test case and give it guardrails that allow me to trust that it's not going\n[00:59:44]\nbeyond that and filling in implementation details.\n[00:59:48]\nThen you can actually trust these things."
      },
      "date": 1681976309159
    },
    {
      "item": {
        "type": "paragraph",
        "id": "38a6c3fb7222a6fd",
        "text": "[00:59:50]\nAnd yeah, well, there's there's one question of, do you even need a compiler or type checker\n[00:59:58]\nin the linter and the test suites?\n[01:00:01]\nCould you not just ask the AI to verify things?"
      },
      "id": "38a6c3fb7222a6fd",
      "type": "add",
      "after": "7c913eee770395c5",
      "date": 1681976324545
    },
    {
      "type": "edit",
      "id": "38a6c3fb7222a6fd",
      "item": {
        "type": "paragraph",
        "id": "38a6c3fb7222a6fd",
        "text": "[00:59:50]\nAnd yeah, well, there's there's one question of, do you even need a compiler or type checker\n[00:59:58]\nin the linter and the test suites?\n[01:00:01]\nCould you not just ask the AI to verify things?"
      },
      "date": 1681976326609
    },
    {
      "item": {
        "type": "paragraph",
        "id": "de905204452661f5",
        "text": "[01:00:05]\nBut then it comes again to the point of, well, who monitors who?\n[01:00:10]\nHow do you trust the right checks?"
      },
      "id": "de905204452661f5",
      "type": "add",
      "after": "38a6c3fb7222a6fd",
      "date": 1681976338258
    },
    {
      "type": "edit",
      "id": "de905204452661f5",
      "item": {
        "type": "paragraph",
        "id": "de905204452661f5",
        "text": "[01:00:05]\nBut then it comes again to the point of, well, who monitors who?\n[01:00:10]\nHow do you trust the right checks?"
      },
      "date": 1681976339718
    },
    {
      "item": {
        "type": "paragraph",
        "id": "781bfd6bcb2a9d64",
        "text": "[01:00:14]\nAnd at the end of the day, we we do trust the compiler.\n[01:00:17]\nNow, that said, it is possible for the compiler to have bugs and it can.\n[01:00:23]\nBut for all intents and purposes, we fully trust the compiler.\n[01:00:27]\nWe fully trust Elm Review."
      },
      "id": "781bfd6bcb2a9d64",
      "type": "add",
      "after": "de905204452661f5",
      "date": 1681976349688
    },
    {
      "type": "edit",
      "id": "781bfd6bcb2a9d64",
      "item": {
        "type": "paragraph",
        "id": "781bfd6bcb2a9d64",
        "text": "[01:00:14]\nAnd at the end of the day, we we do trust the compiler.\n[01:00:17]\nNow, that said, it is possible for the compiler to have bugs and it can.\n[01:00:23]\nBut for all intents and purposes, we fully trust the compiler.\n[01:00:27]\nWe fully trust Elm Review."
      },
      "date": 1681976350993
    },
    {
      "item": {
        "type": "paragraph",
        "id": "573491fac8d597c7",
        "text": "[01:00:28]\nOf course, possible for these things to have bugs.\n[01:00:30]\nBut I think that's a good assumption.\n[01:00:32]\nWhereas with AI, I don't fully trust it unless I verify it."
      },
      "id": "573491fac8d597c7",
      "type": "add",
      "after": "781bfd6bcb2a9d64",
      "date": 1681976363602
    },
    {
      "type": "edit",
      "id": "573491fac8d597c7",
      "item": {
        "type": "paragraph",
        "id": "573491fac8d597c7",
        "text": "[01:00:28]\nOf course, possible for these things to have bugs.\n[01:00:30]\nBut I think that's a good assumption.\n[01:00:32]\nWhereas with AI, I don't fully trust it unless I verify it."
      },
      "date": 1681976365087
    },
    {
      "item": {
        "type": "paragraph",
        "id": "0c0ad636d77385f3",
        "text": "[01:00:37]\nThe thing that is very important for me with regards to the compilers and linters and test\n[01:00:43]\nsuites is that these are consistent.\n[01:00:47]\nLike if you run the same code, if you ask the compiler to verify the same code, it's\n[01:00:52]\ngoing to give you the same results. >> consistent"
      },
      "id": "0c0ad636d77385f3",
      "type": "add",
      "after": "573491fac8d597c7",
      "date": 1681976378386
    },
    {
      "type": "edit",
      "id": "0c0ad636d77385f3",
      "item": {
        "type": "paragraph",
        "id": "0c0ad636d77385f3",
        "text": "[01:00:37]\nThe thing that is very important for me with regards to the compilers and linters and test\n[01:00:43]\nsuites is that these are consistent.\n[01:00:47]\nLike if you run the same code, if you ask the compiler to verify the same code, it's\n[01:00:52]\ngoing to give you the same results. >> consistent"
      },
      "date": 1681976379917
    },
    {
      "type": "edit",
      "id": "0c0ad636d77385f3",
      "item": {
        "type": "paragraph",
        "id": "0c0ad636d77385f3",
        "text": "[01:00:37]\nThe thing that is very important for me with regards to the compilers and linters and test\n[01:00:43]\nsuites is that these are consistent.\n[01:00:47]\nLike if you run the same code, if you ask the compiler to verify the same code, it's\n[01:00:52]\ngoing to give you the same results. >> consistent"
      },
      "date": 1681976388768
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a3902b5480415800",
        "text": "[01:00:54]\nIf you run the same code in a test suite, it's going to give you the same results.\n[01:00:59]\nIf you ask the AI to review your code, like, hey, are there any consistency issues that\n[01:01:06]\nthe linter would tell me, for instance, then from one run to another, it could tell you\n[01:01:12]\ndifferent things."
      },
      "id": "a3902b5480415800",
      "type": "add",
      "after": "0c0ad636d77385f3",
      "date": 1681976438261
    },
    {
      "type": "edit",
      "id": "a3902b5480415800",
      "item": {
        "type": "paragraph",
        "id": "a3902b5480415800",
        "text": "[01:00:54]\nIf you run the same code in a test suite, it's going to give you the same results.\n[01:00:59]\nIf you ask the AI to review your code, like, hey, are there any consistency issues that\n[01:01:06]\nthe linter would tell me, for instance, then from one run to another, it could tell you\n[01:01:12]\ndifferent things."
      },
      "date": 1681976439881
    },
    {
      "type": "add",
      "id": "398f49aaffa666f7",
      "item": {
        "type": "paragraph",
        "id": "398f49aaffa666f7",
        "text": "[01:01:14]\nIt's kind of like asking a human, hey, can you please review this code and tell me how\n[01:01:20]\nyou can improve it?"
      },
      "after": "a3902b5480415800",
      "date": 1681976472983
    },
    {
      "item": {
        "type": "paragraph",
        "id": "29250a338bbfd9ac",
        "text": "[01:01:21]\nWell, if I ask you today to do this seriously on my code base, you're going to find a lot\n[01:01:26]\nof problems."
      },
      "id": "29250a338bbfd9ac",
      "type": "add",
      "after": "398f49aaffa666f7",
      "date": 1681976491875
    },
    {
      "type": "edit",
      "id": "29250a338bbfd9ac",
      "item": {
        "type": "paragraph",
        "id": "29250a338bbfd9ac",
        "text": "[01:01:21]\nWell, if I ask you today to do this seriously on my code base, you're going to find a lot\n[01:01:26]\nof problems."
      },
      "date": 1681976493214
    },
    {
      "item": {
        "type": "paragraph",
        "id": "80fc1e1d179bbb61",
        "text": "[01:01:27]\nIf I ask you tomorrow to do it again from scratch, you're going to give me a whole different\n[01:01:32]\nkind of problems."
      },
      "id": "80fc1e1d179bbb61",
      "type": "add",
      "after": "29250a338bbfd9ac",
      "date": 1681976509249
    },
    {
      "type": "edit",
      "id": "80fc1e1d179bbb61",
      "item": {
        "type": "paragraph",
        "id": "80fc1e1d179bbb61",
        "text": "[01:01:27]\nIf I ask you tomorrow to do it again from scratch, you're going to give me a whole different\n[01:01:32]\nkind of problems."
      },
      "date": 1681976510869
    },
    {
      "type": "add",
      "id": "09911d95d55fb976",
      "item": {
        "type": "paragraph",
        "id": "09911d95d55fb976",
        "text": "[…]"
      },
      "after": "80fc1e1d179bbb61",
      "date": 1681976554093
    },
    {
      "type": "add",
      "id": "2e22eddcbb665efd",
      "item": {
        "type": "paragraph",
        "id": "2e22eddcbb665efd",
        "text": "[01:01:40]\nLinters, when they're dealing with consistency, they give you a certain minimum of consistency\n[01:01:50]\nof code that is written in a specific way. >> consistency"
      },
      "after": "09911d95d55fb976",
      "date": 1681976556074
    },
    {
      "type": "edit",
      "id": "2e22eddcbb665efd",
      "item": {
        "type": "paragraph",
        "id": "2e22eddcbb665efd",
        "text": "[01:01:40]\nLinters, when they're dealing with consistency, they give you a certain minimum of consistency\n[01:01:50]\nof code that is written in a specific way. >> consistency"
      },
      "date": 1681976574629
    },
    {
      "item": {
        "type": "pagefold",
        "id": "2acd6e3d87c58813",
        "text": "Consistency"
      },
      "id": "2acd6e3d87c58813",
      "type": "add",
      "after": "2e22eddcbb665efd",
      "date": 1681976580593
    },
    {
      "type": "edit",
      "id": "2acd6e3d87c58813",
      "item": {
        "type": "pagefold",
        "id": "2acd6e3d87c58813",
        "text": "Consistency"
      },
      "date": 1681976586369
    },
    {
      "id": "2acd6e3d87c58813",
      "type": "move",
      "order": [
        "a865c2a3b71a15ec",
        "0c7f5903c3db90c2",
        "7ee9d38e880c4b2d",
        "0a9f0400546d4cae",
        "d79ff5a85c4e9a55",
        "ada9b580e3c3ac3e",
        "d831fc74b1f8ba37",
        "e8b01b0301b58171",
        "a940b9bc03cf9339",
        "3e18090b1198a9f8",
        "18eabdcb162b54ee",
        "8b37c291b2bbfdf4",
        "7c913eee770395c5",
        "38a6c3fb7222a6fd",
        "de905204452661f5",
        "781bfd6bcb2a9d64",
        "573491fac8d597c7",
        "0c0ad636d77385f3",
        "a3902b5480415800",
        "398f49aaffa666f7",
        "29250a338bbfd9ac",
        "80fc1e1d179bbb61",
        "09911d95d55fb976",
        "2acd6e3d87c58813",
        "2e22eddcbb665efd"
      ],
      "date": 1681976590684
    },
    {
      "item": {
        "type": "paragraph",
        "id": "5d8a6f54ccc18124",
        "text": "[01:01:53]\nAnd it could go higher, probably.\n[01:01:56]\nLike you want all our functions to be named in a very similar way, for instance, but that's\n[01:02:03]\nprobably a bit too hard for a linter.\n[01:02:06]\nAn AI would always tell you different things, and we don't want that.\n[01:02:10]\nSo we need these to be trustworthy and consistent in the sense that it doesn't give you different\n[01:02:16]\nresults every time."
      },
      "id": "5d8a6f54ccc18124",
      "type": "add",
      "after": "2e22eddcbb665efd",
      "date": 1681976633510
    },
    {
      "type": "edit",
      "id": "5d8a6f54ccc18124",
      "item": {
        "type": "paragraph",
        "id": "5d8a6f54ccc18124",
        "text": "[01:01:53]\nAnd it could go higher, probably.\n[01:01:56]\nLike you want all our functions to be named in a very similar way, for instance, but that's\n[01:02:03]\nprobably a bit too hard for a linter.\n[01:02:06]\nAn AI would always tell you different things, and we don't want that.\n[01:02:10]\nSo we need these to be trustworthy and consistent in the sense that it doesn't give you different\n[01:02:16]\nresults every time."
      },
      "date": 1681976634800
    },
    {
      "item": {
        "type": "paragraph",
        "id": "00dca86db26b98f6",
        "text": "[01:02:19]\nAnd the lower level the task, the more we can trust it.\n[01:02:22]\nJust like Elm types, because the type system is so simple, it's easy to trust it.\n[01:02:27]\nWhereas TypeScript, it's so permissive, it's hard to trust it."
      },
      "id": "00dca86db26b98f6",
      "type": "add",
      "after": "5d8a6f54ccc18124",
      "date": 1681976645377
    },
    {
      "type": "edit",
      "id": "00dca86db26b98f6",
      "item": {
        "type": "paragraph",
        "id": "00dca86db26b98f6",
        "text": "[01:02:19]\nAnd the lower level the task, the more we can trust it.\n[01:02:22]\nJust like Elm types, because the type system is so simple, it's easy to trust it.\n[01:02:27]\nWhereas TypeScript, it's so permissive, it's hard to trust it."
      },
      "date": 1681976647114
    },
    {
      "item": {
        "type": "paragraph",
        "id": "9071cffa04a3ebe3",
        "text": "[01:02:32]\nAnd there are so many caveats and exceptions that it's hard to trust such a complex and\n[01:02:39]\npermissive system."
      },
      "id": "9071cffa04a3ebe3",
      "type": "add",
      "after": "00dca86db26b98f6",
      "date": 1681976656716
    },
    {
      "type": "edit",
      "id": "9071cffa04a3ebe3",
      "item": {
        "type": "paragraph",
        "id": "9071cffa04a3ebe3",
        "text": "[01:02:32]\nAnd there are so many caveats and exceptions that it's hard to trust such a complex and\n[01:02:39]\npermissive system."
      },
      "date": 1681976658140
    },
    {
      "item": {
        "type": "paragraph",
        "id": "4ed704df91de11a2",
        "text": "[01:02:41]\nSo I do think that this might be a superpower of Elm.\n[01:02:44]\nAnd honestly, I think that maybe this could be a really appealing thing about Elm that\n[01:02:50]\nmakes it more mainstream.\n[01:02:53]\nThat, wow, this language, it turns out it's really good for automating and tooling.\n[01:02:59]\nAnd you know what?\n[01:03:01]\nAutomating and tooling is really hot these days because people are building all sorts\n[01:03:04]\nof AI automation.\n[01:03:05]\nAnd we can have trusted AI automation."
      },
      "id": "4ed704df91de11a2",
      "type": "add",
      "after": "9071cffa04a3ebe3",
      "date": 1681976689209
    },
    {
      "type": "edit",
      "id": "4ed704df91de11a2",
      "item": {
        "type": "paragraph",
        "id": "4ed704df91de11a2",
        "text": "[01:02:41]\nSo I do think that this might be a superpower of Elm.\n[01:02:44]\nAnd honestly, I think that maybe this could be a really appealing thing about Elm that\n[01:02:50]\nmakes it more mainstream.\n[01:02:53]\nThat, wow, this language, it turns out it's really good for automating and tooling.\n[01:02:59]\nAnd you know what?\n[01:03:01]\nAutomating and tooling is really hot these days because people are building all sorts\n[01:03:04]\nof AI automation.\n[01:03:05]\nAnd we can have trusted AI automation."
      },
      "date": 1681976690954
    },
    {
      "item": {
        "type": "paragraph",
        "id": "adc40beedd2097eb",
        "text": "[01:03:11]\nSo I think we're at this early stage where people are just sort of letting AI just write\n[01:03:16]\ntheir code, which is kind of crazy.\n[01:03:19]\nThey're letting AI just execute shell commands for them.\n[01:03:23]\nI saw a recent thing where somebody like...\n[01:03:28]\nWe all knew it was going to happen when you start letting AI just fill in commands in\n[01:03:33]\nyour shell."
      },
      "id": "adc40beedd2097eb",
      "type": "add",
      "after": "4ed704df91de11a2",
      "date": 1681976716219
    },
    {
      "type": "edit",
      "id": "adc40beedd2097eb",
      "item": {
        "type": "paragraph",
        "id": "adc40beedd2097eb",
        "text": "[01:03:11]\nSo I think we're at this early stage where people are just sort of letting AI just write\n[01:03:16]\ntheir code, which is kind of crazy.\n[01:03:19]\nThey're letting AI just execute shell commands for them.\n[01:03:23]\nI saw a recent thing where somebody like...\n[01:03:28]\nWe all knew it was going to happen when you start letting AI just fill in commands in\n[01:03:33]\nyour shell."
      },
      "date": 1681976717717
    },
    {
      "item": {
        "type": "paragraph",
        "id": "aedeed8b3ca78fb8",
        "text": "[01:03:42]\nIt's kind of a crazy state of things, right?\n[01:03:44]\nBut if we can have tools that we can really trust and not have to worry about it doing\n[01:03:50]\nanything that's going to put things in a bad state or go beyond the scope of what we're\n[01:03:55]\ntrying to do, just like perfectly reliably solve a difficult problem that we can now\n[01:04:01]\ntake for granted."
      },
      "id": "aedeed8b3ca78fb8",
      "type": "add",
      "after": "adc40beedd2097eb",
      "date": 1681976762371
    },
    {
      "type": "edit",
      "id": "aedeed8b3ca78fb8",
      "item": {
        "type": "paragraph",
        "id": "aedeed8b3ca78fb8",
        "text": "[01:03:42]\nIt's kind of a crazy state of things, right?\n[01:03:44]\nBut if we can have tools that we can really trust and not have to worry about it doing\n[01:03:50]\nanything that's going to put things in a bad state or go beyond the scope of what we're\n[01:03:55]\ntrying to do, just like perfectly reliably solve a difficult problem that we can now\n[01:04:01]\ntake for granted."
      },
      "date": 1681976763922
    },
    {
      "item": {
        "type": "paragraph",
        "id": "4cda4b3947cbb928",
        "text": "[01:04:03]\nThat's awesome.\n[01:04:04]\nAnd I think Elm is a really good fit for that."
      },
      "id": "4cda4b3947cbb928",
      "type": "add",
      "after": "aedeed8b3ca78fb8",
      "date": 1681976791516
    },
    {
      "type": "edit",
      "id": "4cda4b3947cbb928",
      "item": {
        "type": "paragraph",
        "id": "4cda4b3947cbb928",
        "text": "[01:04:03]\nThat's awesome.\n[01:04:04]\nAnd I think Elm is a really good fit for that."
      },
      "date": 1681976793038
    },
    {
      "item": {
        "type": "paragraph",
        "id": "861951a5c8c29b5c",
        "text": "[01:04:07]\nI've also heard the opposite point of view where this could be pretty bad for Elm or\n[01:04:13]\nfor smaller languages in the sense that the AI is trained on code that is available.\n[01:04:21]\nAnd there's not a lot of Elm code out there compared to more mainstream languages like\n[01:04:26]\nJavaScript."
      },
      "id": "861951a5c8c29b5c",
      "type": "add",
      "after": "4cda4b3947cbb928",
      "date": 1681976801160
    },
    {
      "type": "edit",
      "id": "861951a5c8c29b5c",
      "item": {
        "type": "paragraph",
        "id": "861951a5c8c29b5c",
        "text": "[01:04:07]\nI've also heard the opposite point of view where this could be pretty bad for Elm or\n[01:04:13]\nfor smaller languages in the sense that the AI is trained on code that is available.\n[01:04:21]\nAnd there's not a lot of Elm code out there compared to more mainstream languages like\n[01:04:26]\nJavaScript."
      },
      "date": 1681976802685
    },
    {
      "item": {
        "type": "paragraph",
        "id": "53fe4e63497a4ce0",
        "text": "[01:04:27]\nSo this could make adoption of new languages harder or smaller languages in general.\n[01:04:35]\nBut as you said, if there are guarantees like the ones that Elm provides, that can even\n[01:04:42]\nout the playing field."
      },
      "id": "53fe4e63497a4ce0",
      "type": "add",
      "after": "861951a5c8c29b5c",
      "date": 1681976822330
    },
    {
      "type": "edit",
      "id": "53fe4e63497a4ce0",
      "item": {
        "type": "paragraph",
        "id": "53fe4e63497a4ce0",
        "text": "[01:04:27]\nSo this could make adoption of new languages harder or smaller languages in general.\n[01:04:35]\nBut as you said, if there are guarantees like the ones that Elm provides, that can even\n[01:04:42]\nout the playing field."
      },
      "date": 1681976823967
    },
    {
      "item": {
        "type": "paragraph",
        "id": "19319ba5a01db81c",
        "text": "[01:04:44]\nBut if you're designing a language that doesn't have the same guarantees as Elm, and it's\n[01:04:49]\njust very new or very small, then you get kind of the worst of both worlds."
      },
      "id": "19319ba5a01db81c",
      "type": "add",
      "after": "53fe4e63497a4ce0",
      "date": 1681976842243
    },
    {
      "type": "edit",
      "id": "19319ba5a01db81c",
      "item": {
        "type": "paragraph",
        "id": "19319ba5a01db81c",
        "text": "[01:04:44]\nBut if you're designing a language that doesn't have the same guarantees as Elm, and it's\n[01:04:49]\njust very new or very small, then you get kind of the worst of both worlds."
      },
      "date": 1681976843807
    },
    {
      "item": {
        "type": "paragraph",
        "id": "888002bd1eaea5a6",
        "text": "[01:04:56]\nAnd this all depends on writing the tooling, right?\n[01:05:00]\nAnd so I think we have an opportunity to build really cool stuff leveraging these techniques\n[01:05:07]\nright now.\n[01:05:08]\nSo I'm definitely going to be playing around with that."
      },
      "id": "888002bd1eaea5a6",
      "type": "add",
      "after": "19319ba5a01db81c",
      "date": 1681976858837
    },
    {
      "type": "edit",
      "id": "888002bd1eaea5a6",
      "item": {
        "type": "paragraph",
        "id": "888002bd1eaea5a6",
        "text": "[01:04:56]\nAnd this all depends on writing the tooling, right?\n[01:05:00]\nAnd so I think we have an opportunity to build really cool stuff leveraging these techniques\n[01:05:07]\nright now.\n[01:05:08]\nSo I'm definitely going to be playing around with that."
      },
      "date": 1681976860259
    },
    {
      "item": {
        "type": "paragraph",
        "id": "d2f641d4c01c92af",
        "text": "[01:05:10]\nLike I've got a lot of ideas.\n[01:05:12]\nI want to make this sort of automated type puzzle solver.\n[01:05:17]\nI think, you know, having it build JSON decoders starts to become really interesting where\n[01:05:25]\nlike Mario and I were working on this Elm HTTP fusion thing, which is really cool for\n[01:05:31]\nlike having a UI where you make an HTTP request, and then you can sort of click the JSON fields\n[01:05:39]\nyou want and it generates a decoder.\n[01:05:41]\nIt's like, that's great."
      },
      "id": "d2f641d4c01c92af",
      "type": "add",
      "after": "888002bd1eaea5a6",
      "date": 1681976913577
    },
    {
      "type": "edit",
      "id": "d2f641d4c01c92af",
      "item": {
        "type": "paragraph",
        "id": "d2f641d4c01c92af",
        "text": "[01:05:10]\nLike I've got a lot of ideas.\n[01:05:12]\nI want to make this sort of automated type puzzle solver.\n[01:05:17]\nI think, you know, having it build JSON decoders starts to become really interesting where\n[01:05:25]\nlike Mario and I were working on this Elm HTTP fusion thing, which is really cool for\n[01:05:31]\nlike having a UI where you make an HTTP request, and then you can sort of click the JSON fields\n[01:05:39]\nyou want and it generates a decoder.\n[01:05:41]\nIt's like, that's great."
      },
      "date": 1681976916695
    },
    {
      "item": {
        "type": "paragraph",
        "id": "55ee061e90a2fae8",
        "text": "[01:05:42]\nBut what if you can tell it the type you want and it can figure out what fields to get and\n[01:05:49]\ngenerate something that is provably correct because you actually ran it and verified it,\n[01:05:55]\nand then you can fully trust it, but it just solves your problem.\n[01:05:58]\nAnd it sort of can solve that last mile problem where like, there are so many things I've\n[01:06:03]\nbeen trying to automate where it's difficult to do that last little piece of the puzzle\n[01:06:09]\nand AI can do that missing piece."
      },
      "id": "55ee061e90a2fae8",
      "type": "add",
      "after": "d2f641d4c01c92af",
      "date": 1681976928134
    },
    {
      "type": "edit",
      "id": "55ee061e90a2fae8",
      "item": {
        "type": "paragraph",
        "id": "55ee061e90a2fae8",
        "text": "[01:05:42]\nBut what if you can tell it the type you want and it can figure out what fields to get and\n[01:05:49]\ngenerate something that is provably correct because you actually ran it and verified it,\n[01:05:55]\nand then you can fully trust it, but it just solves your problem.\n[01:05:58]\nAnd it sort of can solve that last mile problem where like, there are so many things I've\n[01:06:03]\nbeen trying to automate where it's difficult to do that last little piece of the puzzle\n[01:06:09]\nand AI can do that missing piece."
      },
      "date": 1681976929501
    },
    {
      "type": "add",
      "id": "a095f062c3e40ac0",
      "item": {
        "type": "paragraph",
        "id": "a095f062c3e40ac0",
        "text": "[01:06:11]\nSo I think this unlocks some really cool things."
      },
      "after": "55ee061e90a2fae8",
      "date": 1681976999380
    },
    {
      "type": "add",
      "id": "b0d5ef3439b789b4",
      "item": {
        "type": "paragraph",
        "id": "b0d5ef3439b789b4",
        "text": "[01:06:15]\nI've been thinking about like some other use cases I'm thinking about are like, so for\n[01:06:19]\nexample, like with Elm GraphQL, you know, we've talked with Matt about Elm GQL, which\n[01:06:25]\nsort of tries to be a simpler way of just taking a raw GraphQL query as a string.\n[01:06:32]\nAnd it's very easy to interact with GraphQL APIs through this raw query string.\n[01:06:39]\nAnd then it can generate type aliases for you of the response you get, and you just\n[01:06:45]\npaste in your GraphQL query string and it spits out some Elm code to execute that query.\n[01:06:52]\nAnd the trade off with that approach in Elm GQL versus Elm GraphQL, as we talked about\n[01:06:57]\nin our Elm GQL episode is with Elm GraphQL, you have to explicitly write everything you're\n[01:07:05]\ndecoding in Elm code."
      },
      "after": "a095f062c3e40ac0",
      "date": 1681977008943
    },
    {
      "type": "add",
      "id": "a7d06a2aff388a10",
      "item": {
        "type": "paragraph",
        "id": "a7d06a2aff388a10",
        "text": "[01:07:07]\nBut you can maintain it in Elm code and you get more fine grained control over the types\n[01:07:12]\nyou decode into.\n[01:07:14]\nSo there's a trade off."
      },
      "after": "b0d5ef3439b789b4",
      "date": 1681977055105
    },
    {
      "item": {
        "type": "paragraph",
        "id": "af6df7c5db18b7f2",
        "text": "[01:07:16]\nBut what if you had a tool that generated an Elm GraphQL query, you get complete control\n[01:07:24]\nover the fine grained code and that you decode into, but what if you could just tell an AI\n[01:07:31]\ntool generate an Elm GraphQL query."
      },
      "id": "af6df7c5db18b7f2",
      "type": "add",
      "after": "a7d06a2aff388a10",
      "date": 1681977089473
    },
    {
      "type": "edit",
      "id": "af6df7c5db18b7f2",
      "item": {
        "type": "paragraph",
        "id": "af6df7c5db18b7f2",
        "text": "[01:07:16]\nBut what if you had a tool that generated an Elm GraphQL query, you get complete control\n[01:07:24]\nover the fine grained code and that you decode into, but what if you could just tell an AI\n[01:07:31]\ntool generate an Elm GraphQL query."
      },
      "date": 1681977091050
    },
    {
      "type": "add",
      "id": "770b2ea1e4bcade8",
      "item": {
        "type": "paragraph",
        "id": "770b2ea1e4bcade8",
        "text": "[01:07:33]\nAnd using this sort of type puzzle solver I built, I can say here are all the functions\n[01:07:39]\nfor generating Elm GraphQL types, solve this problem.\n[01:07:44]\nAnd here's the raw GraphQL query.\n[01:07:46]\nAnd here is the resulting Elm type I want.\n[01:07:50]\nAnd it could, I think it could solve that pretty well.\n[01:07:54]\nSo some of these tools become more interesting when you have that extra bit of glue from\n[01:08:00]\nAI."
      },
      "after": "af6df7c5db18b7f2",
      "date": 1681977117977
    },
    {
      "item": {
        "type": "paragraph",
        "id": "b25f18bc95f8887f",
        "text": "[01:08:01]\nAnd that would solve all of Elm's problems because all of Elm's problems are boilerplate.\n[01:08:07]\nExactly."
      },
      "id": "b25f18bc95f8887f",
      "type": "add",
      "after": "770b2ea1e4bcade8",
      "date": 1681977130499
    },
    {
      "type": "edit",
      "id": "b25f18bc95f8887f",
      "item": {
        "type": "paragraph",
        "id": "b25f18bc95f8887f",
        "text": "[01:08:01]\nAnd that would solve all of Elm's problems because all of Elm's problems are boilerplate.\n[01:08:07]\nExactly."
      },
      "date": 1681977132002
    },
    {
      "item": {
        "type": "pagefold",
        "id": "d062a5709c88d8a0",
        "text": "Boilerplate"
      },
      "id": "d062a5709c88d8a0",
      "type": "add",
      "after": "b25f18bc95f8887f",
      "date": 1681977151412
    },
    {
      "item": {
        "type": "paragraph",
        "id": "2931aa35c32b0c43",
        "text": "[01:08:08]\nIt's boilerplate that's really easy to maintain once you have it.\n[01:08:12]\nSo if it's very easy to confidently write boilerplate, then yeah, Elm becomes a lot\n[01:08:17]\nmore exciting."
      },
      "id": "2931aa35c32b0c43",
      "type": "add",
      "after": "d062a5709c88d8a0",
      "date": 1681977153635
    },
    {
      "type": "edit",
      "id": "2931aa35c32b0c43",
      "item": {
        "type": "paragraph",
        "id": "2931aa35c32b0c43",
        "text": "[01:08:08]\nIt's boilerplate that's really easy to maintain once you have it.\n[01:08:12]\nSo if it's very easy to confidently write boilerplate, then yeah, Elm becomes a lot\n[01:08:17]\nmore exciting."
      },
      "date": 1681977158624
    },
    {
      "type": "edit",
      "id": "d062a5709c88d8a0",
      "item": {
        "type": "pagefold",
        "id": "d062a5709c88d8a0",
        "text": "Boilerplate"
      },
      "date": 1681977163349
    },
    {
      "id": "d062a5709c88d8a0",
      "type": "move",
      "order": [
        "a865c2a3b71a15ec",
        "0c7f5903c3db90c2",
        "7ee9d38e880c4b2d",
        "0a9f0400546d4cae",
        "d79ff5a85c4e9a55",
        "ada9b580e3c3ac3e",
        "d831fc74b1f8ba37",
        "e8b01b0301b58171",
        "a940b9bc03cf9339",
        "3e18090b1198a9f8",
        "18eabdcb162b54ee",
        "8b37c291b2bbfdf4",
        "7c913eee770395c5",
        "38a6c3fb7222a6fd",
        "de905204452661f5",
        "781bfd6bcb2a9d64",
        "573491fac8d597c7",
        "0c0ad636d77385f3",
        "a3902b5480415800",
        "398f49aaffa666f7",
        "29250a338bbfd9ac",
        "80fc1e1d179bbb61",
        "09911d95d55fb976",
        "2acd6e3d87c58813",
        "2e22eddcbb665efd",
        "5d8a6f54ccc18124",
        "00dca86db26b98f6",
        "9071cffa04a3ebe3",
        "4ed704df91de11a2",
        "adc40beedd2097eb",
        "aedeed8b3ca78fb8",
        "4cda4b3947cbb928",
        "861951a5c8c29b5c",
        "53fe4e63497a4ce0",
        "19319ba5a01db81c",
        "888002bd1eaea5a6",
        "d2f641d4c01c92af",
        "55ee061e90a2fae8",
        "a095f062c3e40ac0",
        "b0d5ef3439b789b4",
        "a7d06a2aff388a10",
        "af6df7c5db18b7f2",
        "770b2ea1e4bcade8",
        "d062a5709c88d8a0",
        "b25f18bc95f8887f",
        "2931aa35c32b0c43"
      ],
      "date": 1681977165020
    },
    {
      "item": {
        "type": "paragraph",
        "id": "451b50d08bbbbb89",
        "text": "[01:08:18]\nIf we take your last example, it does mean that you redo the same logic every time and\n[01:08:24]\nnot necessarily in a framework or library oriented way.\n[01:08:31]\nSo you would redo, you would inline the creation of the GraphQL query and decoding those instead\n[01:08:39]\nof using a pre-made library, which simplifies the API for that.\n[01:08:45]\nBut it could be very interesting nonetheless."
      },
      "id": "451b50d08bbbbb89",
      "type": "add",
      "after": "2931aa35c32b0c43",
      "date": 1681977189531
    },
    {
      "type": "edit",
      "id": "451b50d08bbbbb89",
      "item": {
        "type": "paragraph",
        "id": "451b50d08bbbbb89",
        "text": "[01:08:18]\nIf we take your last example, it does mean that you redo the same logic every time and\n[01:08:24]\nnot necessarily in a framework or library oriented way.\n[01:08:31]\nSo you would redo, you would inline the creation of the GraphQL query and decoding those instead\n[01:08:39]\nof using a pre-made library, which simplifies the API for that.\n[01:08:45]\nBut it could be very interesting nonetheless."
      },
      "date": 1681977191201
    },
    {
      "item": {
        "type": "paragraph",
        "id": "3784bfe2fd960859",
        "text": "[01:08:50]\nI think part of the challenge right now to using these tools effectively is like defining\n[01:08:56]\nthe problems and the workflows to leverage these as much as possible.\n"
      },
      "id": "3784bfe2fd960859",
      "type": "add",
      "after": "451b50d08bbbbb89",
      "date": 1681977246290
    },
    {
      "type": "edit",
      "id": "3784bfe2fd960859",
      "item": {
        "type": "paragraph",
        "id": "3784bfe2fd960859",
        "text": "[01:08:50]\nI think part of the challenge right now to using these tools effectively is like defining\n[01:08:56]\nthe problems and the workflows to leverage these as much as possible.\n"
      },
      "date": 1681977247962
    },
    {
      "type": "edit",
      "id": "3784bfe2fd960859",
      "item": {
        "type": "paragraph",
        "id": "3784bfe2fd960859",
        "text": "[01:08:50]\nI think part of the challenge right now to using these tools effectively is like defining\n[01:08:56]\nthe problems and the workflows to leverage these as much as possible.\n"
      },
      "date": 1681977256302
    },
    {
      "type": "add",
      "id": "8f437357033f0860",
      "item": {
        "type": "paragraph",
        "id": "8f437357033f0860",
        "text": "[01:09:02]\nAnother thing on my mind here is like refactoring.\n[01:09:05]\nSo we have, you know, if you build in an IntelliJ refactoring for like extracting a function\n[01:09:13]\nto a module, like what kinds of refactoring should we invest in building in like IDEs\n[01:09:21]\nor language servers versus using AI?\n[01:09:24]\nI mean, we could also just ask an AI to write those things to be integrated into the IDE\n[01:09:33]\nfor instance.\n[01:09:34]\nSo for instance, if you go back to the linter example, I don't want an AI to review my code\n[01:09:43]\nbecause it's going to be inconsistent."
      },
      "after": "3784bfe2fd960859",
      "date": 1681977260063
    },
    {
      "item": {
        "type": "pagefold",
        "id": "7aa3a6efa971f56b",
        "text": "Refactoring"
      },
      "id": "7aa3a6efa971f56b",
      "type": "add",
      "after": "8f437357033f0860",
      "date": 1681977265144
    },
    {
      "id": "7aa3a6efa971f56b",
      "type": "move",
      "order": [
        "a865c2a3b71a15ec",
        "0c7f5903c3db90c2",
        "7ee9d38e880c4b2d",
        "0a9f0400546d4cae",
        "d79ff5a85c4e9a55",
        "ada9b580e3c3ac3e",
        "d831fc74b1f8ba37",
        "e8b01b0301b58171",
        "a940b9bc03cf9339",
        "3e18090b1198a9f8",
        "18eabdcb162b54ee",
        "8b37c291b2bbfdf4",
        "7c913eee770395c5",
        "38a6c3fb7222a6fd",
        "de905204452661f5",
        "781bfd6bcb2a9d64",
        "573491fac8d597c7",
        "0c0ad636d77385f3",
        "a3902b5480415800",
        "398f49aaffa666f7",
        "29250a338bbfd9ac",
        "80fc1e1d179bbb61",
        "09911d95d55fb976",
        "2acd6e3d87c58813",
        "2e22eddcbb665efd",
        "5d8a6f54ccc18124",
        "00dca86db26b98f6",
        "9071cffa04a3ebe3",
        "4ed704df91de11a2",
        "adc40beedd2097eb",
        "aedeed8b3ca78fb8",
        "4cda4b3947cbb928",
        "861951a5c8c29b5c",
        "53fe4e63497a4ce0",
        "19319ba5a01db81c",
        "888002bd1eaea5a6",
        "d2f641d4c01c92af",
        "55ee061e90a2fae8",
        "a095f062c3e40ac0",
        "b0d5ef3439b789b4",
        "a7d06a2aff388a10",
        "af6df7c5db18b7f2",
        "770b2ea1e4bcade8",
        "d062a5709c88d8a0",
        "b25f18bc95f8887f",
        "2931aa35c32b0c43",
        "451b50d08bbbbb89",
        "3784bfe2fd960859",
        "7aa3a6efa971f56b",
        "8f437357033f0860"
      ],
      "date": 1681977266573
    },
    {
      "type": "edit",
      "id": "7aa3a6efa971f56b",
      "item": {
        "type": "pagefold",
        "id": "7aa3a6efa971f56b",
        "text": "Refactoring"
      },
      "date": 1681977268340
    },
    {
      "type": "edit",
      "id": "8f437357033f0860",
      "item": {
        "type": "paragraph",
        "id": "8f437357033f0860",
        "text": "[01:09:02]\nAnother thing on my mind here is like refactoring.\n[01:09:05]\nSo we have, you know, if you build in an IntelliJ refactoring for like extracting a function\n[01:09:13]\nto a module, like what kinds of refactoring should we invest in building in like IDEs\n[01:09:21]\nor language servers versus using AI?\n[01:09:24]\nI mean, we could also just ask an AI to write those things to be integrated into the IDE\n[01:09:33]\nfor instance.\n[01:09:34]\nSo for instance, if you go back to the linter example, I don't want an AI to review my code\n[01:09:43]\nbecause it's going to be inconsistent."
      },
      "date": 1681977287254
    },
    {
      "item": {
        "type": "paragraph",
        "id": "56964423e3207e0b",
        "text": "[01:09:45]\nI can ask it to write a linter rule once and then I can run that linter rule multiple times.\n[01:09:51]\nBut yeah, I definitely agree that there are cases where you will want to have a transformation\n[01:09:59]\nusing AI rather than one that is hard-coded one way or another in an IDE.\n[01:10:05]\nThat could be interesting to find."
      },
      "id": "56964423e3207e0b",
      "type": "add",
      "after": "8f437357033f0860",
      "date": 1681977304079
    },
    {
      "type": "edit",
      "id": "56964423e3207e0b",
      "item": {
        "type": "paragraph",
        "id": "56964423e3207e0b",
        "text": "[01:09:45]\nI can ask it to write a linter rule once and then I can run that linter rule multiple times.\n[01:09:51]\nBut yeah, I definitely agree that there are cases where you will want to have a transformation\n[01:09:59]\nusing AI rather than one that is hard-coded one way or another in an IDE.\n[01:10:05]\nThat could be interesting to find."
      },
      "date": 1681977305459
    },
    {
      "item": {
        "type": "paragraph",
        "id": "25954665b5a936e4",
        "text": "[01:10:12]\nI'm very bullish on what we can do with these AI tools.\n[01:10:17]\nBut I'll have you ask yourself whether you should.\n[01:10:22]\nWell, that's another question."
      },
      "id": "25954665b5a936e4",
      "type": "add",
      "after": "56964423e3207e0b",
      "date": 1681977337558
    },
    {
      "type": "edit",
      "id": "25954665b5a936e4",
      "item": {
        "type": "paragraph",
        "id": "25954665b5a936e4",
        "text": "[01:10:12]\nI'm very bullish on what we can do with these AI tools.\n[01:10:17]\nBut I'll have you ask yourself whether you should.\n[01:10:22]\nWell, that's another question."
      },
      "date": 1681977339512
    },
    {
      "item": {
        "type": "paragraph",
        "id": "4a3b0d2273c7968d",
        "text": "[01:10:26]\nThe thing I'm bearish on would be just saying AI build a plugin.\n[01:10:34]\nYou know, people are, there's a lot of hype around like it built a Chrome extension for\n[01:10:39]\nthis thing.\n[01:10:40]\nIt built a whole app from a sketch on a napkin.\n[01:10:42]\nAnd so it's like, okay, that's very impressive."
      },
      "id": "4a3b0d2273c7968d",
      "type": "add",
      "after": "25954665b5a936e4",
      "date": 1681977354594
    },
    {
      "type": "edit",
      "id": "4a3b0d2273c7968d",
      "item": {
        "type": "paragraph",
        "id": "4a3b0d2273c7968d",
        "text": "[01:10:26]\nThe thing I'm bearish on would be just saying AI build a plugin.\n[01:10:34]\nYou know, people are, there's a lot of hype around like it built a Chrome extension for\n[01:10:39]\nthis thing.\n[01:10:40]\nIt built a whole app from a sketch on a napkin.\n[01:10:42]\nAnd so it's like, okay, that's very impressive."
      },
      "date": 1681977355989
    },
    {
      "item": {
        "type": "paragraph",
        "id": "dc97d154329d3eba",
        "text": "[01:10:46]\nIt's very interesting, but like how I am skeptical of how useful that is going to actually prove\n[01:10:54]\nto be.\n[01:10:55]\nLike, I don't feel like that's what's going to take people's jobs away.\n[01:10:58]\nI don't feel like that's what's going to replace the work we're doing day to day.\n[01:11:01]\nI think it's these more mature things that we can really rely on where we're choosing\n[01:11:07]\nmore constrained problems to do higher level operations and verify them and put guardrails\n[01:11:13]\non them."
      },
      "id": "dc97d154329d3eba",
      "type": "add",
      "after": "4a3b0d2273c7968d",
      "date": 1681977365539
    },
    {
      "type": "edit",
      "id": "dc97d154329d3eba",
      "item": {
        "type": "paragraph",
        "id": "dc97d154329d3eba",
        "text": "[01:10:46]\nIt's very interesting, but like how I am skeptical of how useful that is going to actually prove\n[01:10:54]\nto be.\n[01:10:55]\nLike, I don't feel like that's what's going to take people's jobs away.\n[01:10:58]\nI don't feel like that's what's going to replace the work we're doing day to day.\n[01:11:01]\nI think it's these more mature things that we can really rely on where we're choosing\n[01:11:07]\nmore constrained problems to do higher level operations and verify them and put guardrails\n[01:11:13]\non them."
      },
      "date": 1681977367025
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a83042e558ebf54a",
        "text": "[01:11:15]\nI think that's my personal bias and obsession and people will get over that and not worry\n[01:11:21]\nabout that and be able to do cooler things than I can do.\n[01:11:24]\nThat's very possible.\n[01:11:25]\nI admit that's a possibility, but that's where I'm putting my money."
      },
      "id": "a83042e558ebf54a",
      "type": "add",
      "after": "dc97d154329d3eba",
      "date": 1681977413596
    },
    {
      "type": "edit",
      "id": "a83042e558ebf54a",
      "item": {
        "type": "paragraph",
        "id": "a83042e558ebf54a",
        "text": "[01:11:15]\nI think that's my personal bias and obsession and people will get over that and not worry\n[01:11:21]\nabout that and be able to do cooler things than I can do.\n[01:11:24]\nThat's very possible.\n[01:11:25]\nI admit that's a possibility, but that's where I'm putting my money."
      },
      "date": 1681977415073
    },
    {
      "item": {
        "type": "pagefold",
        "id": "a95179c87ff58022",
        "text": "Happy Path"
      },
      "id": "a95179c87ff58022",
      "type": "add",
      "after": "a83042e558ebf54a",
      "date": 1681977462219
    },
    {
      "type": "edit",
      "id": "a95179c87ff58022",
      "item": {
        "type": "pagefold",
        "id": "a95179c87ff58022",
        "text": "Happy Path"
      },
      "date": 1681977465577
    },
    {
      "type": "edit",
      "id": "a83042e558ebf54a",
      "item": {
        "type": "paragraph",
        "id": "a83042e558ebf54a",
        "text": "[01:11:15]\nI think that's my personal bias and obsession and people will get over that and not worry\n[01:11:21]\nabout that and be able to do cooler things than I can do.\n[01:11:24]\nThat's very possible.\n[01:11:25]\nI admit that's a possibility, but that's where I'm putting my money."
      },
      "date": 1681977484926
    },
    {
      "id": "a95179c87ff58022",
      "type": "move",
      "order": [
        "a865c2a3b71a15ec",
        "0c7f5903c3db90c2",
        "7ee9d38e880c4b2d",
        "0a9f0400546d4cae",
        "d79ff5a85c4e9a55",
        "ada9b580e3c3ac3e",
        "d831fc74b1f8ba37",
        "e8b01b0301b58171",
        "a940b9bc03cf9339",
        "3e18090b1198a9f8",
        "18eabdcb162b54ee",
        "8b37c291b2bbfdf4",
        "7c913eee770395c5",
        "38a6c3fb7222a6fd",
        "de905204452661f5",
        "781bfd6bcb2a9d64",
        "573491fac8d597c7",
        "0c0ad636d77385f3",
        "a3902b5480415800",
        "398f49aaffa666f7",
        "29250a338bbfd9ac",
        "80fc1e1d179bbb61",
        "09911d95d55fb976",
        "2acd6e3d87c58813",
        "2e22eddcbb665efd",
        "5d8a6f54ccc18124",
        "00dca86db26b98f6",
        "9071cffa04a3ebe3",
        "4ed704df91de11a2",
        "adc40beedd2097eb",
        "aedeed8b3ca78fb8",
        "4cda4b3947cbb928",
        "861951a5c8c29b5c",
        "53fe4e63497a4ce0",
        "19319ba5a01db81c",
        "888002bd1eaea5a6",
        "d2f641d4c01c92af",
        "55ee061e90a2fae8",
        "a095f062c3e40ac0",
        "b0d5ef3439b789b4",
        "a7d06a2aff388a10",
        "af6df7c5db18b7f2",
        "770b2ea1e4bcade8",
        "d062a5709c88d8a0",
        "b25f18bc95f8887f",
        "2931aa35c32b0c43",
        "451b50d08bbbbb89",
        "3784bfe2fd960859",
        "7aa3a6efa971f56b",
        "8f437357033f0860",
        "56964423e3207e0b",
        "25954665b5a936e4",
        "4a3b0d2273c7968d",
        "dc97d154329d3eba",
        "a83042e558ebf54a",
        "a95179c87ff58022",
        "493cce418dcd3413"
      ],
      "date": 1681977488084,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "493cce418dcd3413",
      "item": {
        "type": "paragraph",
        "id": "493cce418dcd3413",
        "text": "[01:11:29]\nSo like writing, having it write the IDE completions for extracting functions and things like that.\n[01:11:38]\nLike it's like I can, the hard part isn't writing like the happy path.\n[01:11:46]\nI can write the happy path of that.\n[01:11:47]\nI've actually, I've done that in IntelliJ refactorings.\n[01:11:53]\nThe hard part is everything else that it's not considering."
      },
      "after": "a83042e558ebf54a",
      "date": 1681977492494
    },
    {
      "type": "fork",
      "date": 1681977494595
    },
    {
      "id": "a95179c87ff58022",
      "type": "move",
      "order": [
        "a865c2a3b71a15ec",
        "0c7f5903c3db90c2",
        "7ee9d38e880c4b2d",
        "0a9f0400546d4cae",
        "d79ff5a85c4e9a55",
        "ada9b580e3c3ac3e",
        "d831fc74b1f8ba37",
        "e8b01b0301b58171",
        "a940b9bc03cf9339",
        "3e18090b1198a9f8",
        "18eabdcb162b54ee",
        "8b37c291b2bbfdf4",
        "7c913eee770395c5",
        "38a6c3fb7222a6fd",
        "de905204452661f5",
        "781bfd6bcb2a9d64",
        "573491fac8d597c7",
        "0c0ad636d77385f3",
        "a3902b5480415800",
        "398f49aaffa666f7",
        "29250a338bbfd9ac",
        "80fc1e1d179bbb61",
        "09911d95d55fb976",
        "2acd6e3d87c58813",
        "2e22eddcbb665efd",
        "5d8a6f54ccc18124",
        "00dca86db26b98f6",
        "9071cffa04a3ebe3",
        "4ed704df91de11a2",
        "adc40beedd2097eb",
        "aedeed8b3ca78fb8",
        "4cda4b3947cbb928",
        "861951a5c8c29b5c",
        "53fe4e63497a4ce0",
        "19319ba5a01db81c",
        "888002bd1eaea5a6",
        "d2f641d4c01c92af",
        "55ee061e90a2fae8",
        "a095f062c3e40ac0",
        "b0d5ef3439b789b4",
        "a7d06a2aff388a10",
        "af6df7c5db18b7f2",
        "770b2ea1e4bcade8",
        "d062a5709c88d8a0",
        "b25f18bc95f8887f",
        "2931aa35c32b0c43",
        "451b50d08bbbbb89",
        "3784bfe2fd960859",
        "7aa3a6efa971f56b",
        "8f437357033f0860",
        "56964423e3207e0b",
        "25954665b5a936e4",
        "4a3b0d2273c7968d",
        "dc97d154329d3eba",
        "a83042e558ebf54a",
        "a95179c87ff58022",
        "493cce418dcd3413"
      ],
      "date": 1681977507774
    },
    {
      "item": {
        "type": "factory",
        "id": "d991085b9e6d1ba0"
      },
      "id": "d991085b9e6d1ba0",
      "type": "add",
      "after": "493cce418dcd3413",
      "date": 1681977532218
    },
    {
      "type": "edit",
      "id": "d991085b9e6d1ba0",
      "item": {
        "type": "paragraph",
        "id": "d991085b9e6d1ba0",
        "text": "[01:11:56]\nAnd if I have to babysit it to make sure it solved each of those cases, I may as well\n[01:12:01]\ndo it myself."
      },
      "date": 1681977533765
    },
    {
      "item": {
        "type": "factory",
        "id": "95308e2de870aa61"
      },
      "id": "95308e2de870aa61",
      "type": "add",
      "after": "d991085b9e6d1ba0",
      "date": 1681977555525
    },
    {
      "type": "edit",
      "id": "95308e2de870aa61",
      "item": {
        "type": "paragraph",
        "id": "95308e2de870aa61",
        "text": "[01:12:02]\nCause like the things it's going to miss, the things that I don't trust that it did\n[01:12:07]\nand I have to go check myself, it's easier to do them myself and engage with the problem\n[01:12:13]\nand solve it my way and know that I accounted for every corner case and wrote a test for\n[01:12:18]\nit than to just trust the AI and be like, okay, now I have to go check everything that\n[01:12:23]\nit did in this crazy, impossible to understand code.\n[01:12:26]\nThat's not the way I would have solved it.\n[01:12:29]\nBut if you paired with the AI."
      },
      "date": 1681977557236
    },
    {
      "item": {
        "type": "factory",
        "id": "22d391f86236879f"
      },
      "id": "22d391f86236879f",
      "type": "add",
      "after": "95308e2de870aa61",
      "date": 1681977646282
    },
    {
      "item": {
        "type": "factory",
        "id": "51c88948a1ef8973"
      },
      "id": "51c88948a1ef8973",
      "type": "add",
      "after": "22d391f86236879f",
      "date": 1681977651564
    },
    {
      "type": "edit",
      "id": "51c88948a1ef8973",
      "item": {
        "type": "paragraph",
        "id": "51c88948a1ef8973",
        "text": "[01:12:33]\nThat's, that's the direction I think things are going.\n[01:12:35]\nJust like tell it very high level instructions.\n[01:12:39]\nBut every time you give instructions, you, there's, there's some bias, right?\n[01:12:44]\nSo at least so far the, the AI is, they're always very confident."
      },
      "date": 1681977653412
    },
    {
      "type": "edit",
      "id": "22d391f86236879f",
      "item": {
        "type": "pagefold",
        "id": "22d391f86236879f",
        "text": "Pair with the AI"
      },
      "date": 1681977679040
    },
    {
      "id": "22d391f86236879f",
      "type": "move",
      "order": [
        "a865c2a3b71a15ec",
        "0c7f5903c3db90c2",
        "7ee9d38e880c4b2d",
        "0a9f0400546d4cae",
        "d79ff5a85c4e9a55",
        "ada9b580e3c3ac3e",
        "d831fc74b1f8ba37",
        "e8b01b0301b58171",
        "a940b9bc03cf9339",
        "3e18090b1198a9f8",
        "18eabdcb162b54ee",
        "8b37c291b2bbfdf4",
        "7c913eee770395c5",
        "38a6c3fb7222a6fd",
        "de905204452661f5",
        "781bfd6bcb2a9d64",
        "573491fac8d597c7",
        "0c0ad636d77385f3",
        "a3902b5480415800",
        "398f49aaffa666f7",
        "29250a338bbfd9ac",
        "80fc1e1d179bbb61",
        "09911d95d55fb976",
        "2acd6e3d87c58813",
        "2e22eddcbb665efd",
        "5d8a6f54ccc18124",
        "00dca86db26b98f6",
        "9071cffa04a3ebe3",
        "4ed704df91de11a2",
        "adc40beedd2097eb",
        "aedeed8b3ca78fb8",
        "4cda4b3947cbb928",
        "861951a5c8c29b5c",
        "53fe4e63497a4ce0",
        "19319ba5a01db81c",
        "888002bd1eaea5a6",
        "d2f641d4c01c92af",
        "55ee061e90a2fae8",
        "a095f062c3e40ac0",
        "b0d5ef3439b789b4",
        "a7d06a2aff388a10",
        "af6df7c5db18b7f2",
        "770b2ea1e4bcade8",
        "d062a5709c88d8a0",
        "b25f18bc95f8887f",
        "2931aa35c32b0c43",
        "451b50d08bbbbb89",
        "3784bfe2fd960859",
        "7aa3a6efa971f56b",
        "8f437357033f0860",
        "56964423e3207e0b",
        "25954665b5a936e4",
        "4a3b0d2273c7968d",
        "dc97d154329d3eba",
        "a83042e558ebf54a",
        "a95179c87ff58022",
        "493cce418dcd3413",
        "d991085b9e6d1ba0",
        "22d391f86236879f",
        "95308e2de870aa61",
        "51c88948a1ef8973"
      ],
      "date": 1681977689523
    },
    {
      "item": {
        "type": "factory",
        "id": "57f50140dca1ef92"
      },
      "id": "57f50140dca1ef92",
      "type": "add",
      "after": "51c88948a1ef8973",
      "date": 1681977721246
    },
    {
      "type": "edit",
      "id": "57f50140dca1ef92",
      "item": {
        "type": "paragraph",
        "id": "57f50140dca1ef92",
        "text": "[01:13:02]\nI've seen a lot of people in the Elm Slack ask for questions like, how do I do X or how\n[01:13:06]\ndo I do, how do I solve this problem?\n[01:13:09]\nAnd there's often that XY problem.\n[01:13:12]\nLike you ask to solve it."
      },
      "date": 1681977722812
    },
    {
      "item": {
        "type": "factory",
        "id": "46123e85d30d002a"
      },
      "id": "46123e85d30d002a",
      "type": "add",
      "after": "57f50140dca1ef92",
      "date": 1681977739167
    },
    {
      "type": "edit",
      "id": "46123e85d30d002a",
      "item": {
        "type": "paragraph",
        "id": "46123e85d30d002a",
        "text": "[01:13:14]\nYou asked a solution to X, but you're actually trying to solve a different Y problem.\n[01:13:19]\nAnd so even if I imagine that the AIs will become extremely, extremely good, like 100\n[01:13:28]\ntimes better than you and me combined, or there's still only going to solve the problem\n[01:13:33]\nthat you're asking them to."
      },
      "date": 1681977740663
    },
    {
      "type": "edit",
      "id": "46123e85d30d002a",
      "item": {
        "type": "paragraph",
        "id": "46123e85d30d002a",
        "text": "[01:13:14]\nYou asked a solution to X, but you're actually trying to solve a different Y problem.\n[01:13:19]\nAnd so even if I imagine that the AIs will become extremely, extremely good, like 100 times better than you and me combined, or there's still only going to solve the problem\n[01:13:33]\nthat you're asking them to."
      },
      "date": 1681977776331
    },
    {
      "item": {
        "type": "factory",
        "id": "680b26640e76d7a2"
      },
      "id": "680b26640e76d7a2",
      "type": "add",
      "after": "46123e85d30d002a",
      "date": 1681977790509
    },
    {
      "type": "edit",
      "id": "680b26640e76d7a2",
      "item": {
        "type": "paragraph",
        "id": "680b26640e76d7a2",
        "text": "[01:13:35]\nJust like, let's imagine it's the smartest person on the world that you have free access\n[01:13:40]\nto.\n[01:13:41]\nWell, if you ask them something and they don't know, they don't think about whether you're\n[01:13:46]\ngoing to, whether it makes sense to ask the question, then they're not going to tell you."
      },
      "date": 1681977791958
    },
    {
      "item": {
        "type": "factory",
        "id": "8d68f0ae987f1091"
      },
      "id": "8d68f0ae987f1091",
      "type": "add",
      "after": "680b26640e76d7a2",
      "date": 1681977828691
    },
    {
      "type": "edit",
      "id": "8d68f0ae987f1091",
      "item": {
        "type": "paragraph",
        "id": "8d68f0ae987f1091",
        "text": "[01:13:53]\nSo you need to prompt them, but you also need to think about how you ask the question, what\n[01:13:59]\nquestion you ask.\n[01:14:00]\nAnd I'm thinking maybe we should ask them as well.\n[01:14:04]\nLike, Hey, I have this feature that I want to do.\n[01:14:08]\nSo can you tell me how I transform this HTML to a string?"
      },
      "date": 1681977830102
    },
    {
      "item": {
        "type": "factory",
        "id": "e49e5d655924f6a7"
      },
      "id": "e49e5d655924f6a7",
      "type": "add",
      "after": "8d68f0ae987f1091",
      "date": 1681977843215
    },
    {
      "type": "edit",
      "id": "e49e5d655924f6a7",
      "item": {
        "type": "paragraph",
        "id": "e49e5d655924f6a7",
        "text": "[01:14:12]\nAnd maybe you should also ask, like, does this make sense by the way?\n[01:14:15]\nBecause then they start asking, answering that question.\n[01:14:19]\nWell, that no, that doesn't make sense."
      },
      "date": 1681977844972
    },
    {
      "item": {
        "type": "factory",
        "id": "ed36c825e5c5faec"
      },
      "id": "ed36c825e5c5faec",
      "type": "add",
      "after": "e49e5d655924f6a7",
      "date": 1681977855701
    },
    {
      "type": "edit",
      "id": "ed36c825e5c5faec",
      "item": {
        "type": "paragraph",
        "id": "ed36c825e5c5faec",
        "text": "[01:14:22]\nSo I said, we're good at gathering requirements, but we're not very good at those, but that\n[01:14:29]\nis our job.\n[01:14:30]\nAnd I think it will increasingly become our job.\n[01:14:34]\nSo we're going to become AI managers."
      },
      "date": 1681977857171
    },
    {
      "item": {
        "type": "factory",
        "id": "861200873c78dfd4"
      },
      "id": "861200873c78dfd4",
      "type": "add",
      "after": "ed36c825e5c5faec",
      "date": 1681977868033
    },
    {
      "type": "edit",
      "id": "861200873c78dfd4",
      "item": {
        "type": "paragraph",
        "id": "861200873c78dfd4",
        "text": "[01:14:40]\nAI product owners."
      },
      "date": 1681977869543
    },
    {
      "item": {
        "type": "factory",
        "id": "b3a81ab12debf164"
      },
      "id": "b3a81ab12debf164",
      "type": "add",
      "after": "861200873c78dfd4",
      "date": 1681977948508
    },
    {
      "type": "edit",
      "id": "b3a81ab12debf164",
      "item": {
        "type": "paragraph",
        "id": "b3a81ab12debf164",
        "text": "[01:14:44]\nI think, and what you're talking about, the word that's been coming to mind for me is that\n[01:14:50]\nthese AI engines are very suggestible.\n[01:14:54]\nLike if you say, I don't know, where might I have lost my keys?\n[01:15:03]\nHint, I often forget them in my pants that I put in the hamper.\n[01:15:11]\nThen it's going to be like, are they in the hamper?\n[01:15:14]\nBut it's going to run with, I've seen that with the Elm compiler sometimes says, hint,\n[01:15:23]\nand it tells it, maybe you need to do this.\n[01:15:25]\nAnd then it's like, okay, sure, let me try."
      },
      "date": 1681977950559
    },
    {
      "item": {
        "type": "factory",
        "id": "207ab0882c85f178"
      },
      "id": "207ab0882c85f178",
      "type": "add",
      "after": "b3a81ab12debf164",
      "date": 1681978015409
    },
    {
      "type": "edit",
      "id": "207ab0882c85f178",
      "item": {
        "type": "paragraph",
        "id": "207ab0882c85f178",
        "text": "[01:15:28]\nAnd it gets fixated on this one path that the compiler sort of hinted at, and that's\n[01:15:34]\nnot a good path."
      },
      "date": 1681978016806
    },
    {
      "item": {
        "type": "factory",
        "id": "d8038d16b0bb5bde"
      },
      "id": "d8038d16b0bb5bde",
      "type": "add",
      "after": "207ab0882c85f178",
      "date": 1681978025744
    },
    {
      "type": "edit",
      "id": "d8038d16b0bb5bde",
      "item": {
        "type": "paragraph",
        "id": "d8038d16b0bb5bde",
        "text": "[01:15:35]\nSo that's why with this type puzzle, I was trying to give it a very clear set of rules\n[01:15:41]\nand say, this is the set of steps you're following.\n[01:15:46]\nAnd then even teach it, this is how you adjust if you are incorrect in one of your guesses.\n[01:15:51]\nAnd so you really have to prime it and prevent it from getting fixated and biased in one\n[01:15:56]\ndirection."
      },
      "date": 1681978027046
    },
    {
      "item": {
        "type": "factory",
        "id": "076e58dd66848ff6"
      },
      "id": "076e58dd66848ff6",
      "type": "add",
      "after": "d8038d16b0bb5bde",
      "date": 1681978039311
    },
    {
      "type": "edit",
      "id": "076e58dd66848ff6",
      "item": {
        "type": "paragraph",
        "id": "076e58dd66848ff6",
        "text": "[01:15:58]\nBut you also said some guardrails and if you were wrong in sending those guardrails, that's\n[01:16:04]\ngoing to be a long problem for you."
      },
      "date": 1681978040686
    },
    {
      "item": {
        "type": "factory",
        "id": "a40f0fee914624fa"
      },
      "id": "a40f0fee914624fa",
      "type": "add",
      "after": "076e58dd66848ff6",
      "date": 1681978065927
    },
    {
      "type": "edit",
      "id": "a40f0fee914624fa",
      "item": {
        "type": "paragraph",
        "id": "a40f0fee914624fa",
        "text": "[01:16:08]\nAnd it is, I mean, these AI engines are also, they're interesting for ideation as well.\n[01:16:13]\nSo there, I mean, that's a whole nother topic we could get into, but.\n[01:16:18]\nWe mostly talked about using it for things that we know well, and that we can validate,\n[01:16:23]\nverify, which I completely agree is probably the way to use it.\n[01:16:29]\nBut it is also very good at helping you out when you don't know something.\n[01:16:33]\nAnd there it becomes a lot more dangerous because it's overconfident and it's going\n[01:16:38]\nto lead you to wrong results, wrong paths, and you're not going to be able to figure\n[01:16:44]\nthose out."
      },
      "date": 1681978067277
    },
    {
      "item": {
        "type": "factory",
        "id": "c88a2b66f638b8c3"
      },
      "id": "c88a2b66f638b8c3",
      "type": "add",
      "after": "a40f0fee914624fa",
      "date": 1681978088238
    },
    {
      "type": "edit",
      "id": "c88a2b66f638b8c3",
      "item": {
        "type": "paragraph",
        "id": "c88a2b66f638b8c3",
        "text": "[01:16:45]\nBut because it knows a lot more than you, it will, I think in a lot of cases, be used\n[01:16:52]\nin that way.\n[01:16:53]\nAnd there people have to weigh in the risks that are involved."
      },
      "date": 1681978089621
    },
    {
      "item": {
        "type": "factory",
        "id": "a6844a3dbece9002"
      },
      "id": "a6844a3dbece9002",
      "type": "add",
      "after": "c88a2b66f638b8c3",
      "date": 1681978101006
    },
    {
      "type": "edit",
      "id": "a6844a3dbece9002",
      "item": {
        "type": "paragraph",
        "id": "a6844a3dbece9002",
        "text": "[01:17:00]\nSo definitely in some cases, it's going to be amazing.\n[01:17:04]\nFor instance, I am not a good drawer, but I can ask an AI to draw something for me.\n[01:17:12]\nI actually do have a whole website filled with drawings, but I probably shouldn't train\n[01:17:17]\nit on that."
      },
      "date": 1681978102238
    },
    {
      "item": {
        "type": "factory",
        "id": "430f8ddbe2d6b062"
      },
      "id": "430f8ddbe2d6b062",
      "type": "add",
      "after": "a6844a3dbece9002",
      "date": 1681978121695
    },
    {
      "type": "edit",
      "id": "430f8ddbe2d6b062",
      "item": {
        "type": "paragraph",
        "id": "430f8ddbe2d6b062",
        "text": "[01:17:19]\nBut yeah, if I ask the AI to do it, then that would probably give some better results.\n[01:17:26]\nBut when it comes to code, if I can verify it, then it's better.\n[01:17:31]\nIf I can't verify it, then it's something new to me.\n[01:17:33]\nWell, that is very interesting as well.\n[01:17:36]\nAnd the thing that I'm worried here about on that matter is that if I ask the tool to\n[01:17:42]\ndo something for me for something that I don't know, whether I will start over relying on\n[01:17:47]\nit instead of learning properly and improving my own skill sets.\n[01:17:53]\nI think that's going to happen a lot with a lot of people getting into development right\n[01:17:57]\nnow."
      },
      "date": 1681978123216
    },
    {
      "item": {
        "type": "factory",
        "id": "22ce579d7b50477e"
      },
      "id": "22ce579d7b50477e",
      "type": "add",
      "after": "430f8ddbe2d6b062",
      "date": 1681978159805
    },
    {
      "type": "edit",
      "id": "22ce579d7b50477e",
      "item": {
        "type": "paragraph",
        "id": "22ce579d7b50477e",
        "text": "[01:17:58]\nAnd yeah, I think being an experienced developer, it's a lot easier to know what to rely on\n[01:18:04]\nit for or when it's maybe like starting to write code where you're not learning to write\n[01:18:14]\na reg x.\n[01:18:15]\nAnd you probably should sort of figure that out instead of just blindly trusting a thing.\n[01:18:19]\nOr maybe it's okay to just be like, if the test passes, I don't really care how it arrived\n[01:18:25]\nat that."
      },
      "date": 1681978161225
    },
    {
      "item": {
        "type": "factory",
        "id": "194ceb54d3519c91"
      },
      "id": "194ceb54d3519c91",
      "type": "add",
      "after": "22ce579d7b50477e",
      "date": 1681978188619
    },
    {
      "type": "edit",
      "id": "194ceb54d3519c91",
      "item": {
        "type": "paragraph",
        "id": "194ceb54d3519c91",
        "text": "[01:18:26]\nMaybe that's okay too.\n[01:18:27]\nYou know, but yeah, I can for instance, imagine a backend developer who knows a little bit\n[01:18:32]\nof Elm and they just ask the AI to generate the UI for their application or at least the\n[01:18:39]\nview parts of the application."
      },
      "date": 1681978189825
    },
    {
      "item": {
        "type": "factory",
        "id": "486b5cb55a3a3fa8"
      },
      "id": "486b5cb55a3a3fa8",
      "type": "add",
      "after": "194ceb54d3519c91",
      "date": 1681978202869
    },
    {
      "type": "edit",
      "id": "486b5cb55a3a3fa8",
      "item": {
        "type": "paragraph",
        "id": "486b5cb55a3a3fa8",
        "text": "[01:18:43]\nAnd that's going to be very helpful to get started.\n[01:18:46]\nBut how do you make sure that things are correct with accessibility and all those concerns\n[01:18:52]\nthat you don't know about?"
      },
      "date": 1681978204490
    },
    {
      "item": {
        "type": "factory",
        "id": "991fe379ef96fdaf"
      },
      "id": "991fe379ef96fdaf",
      "type": "add",
      "after": "486b5cb55a3a3fa8",
      "date": 1681978218454
    },
    {
      "type": "edit",
      "id": "991fe379ef96fdaf",
      "item": {
        "type": "paragraph",
        "id": "991fe379ef96fdaf",
        "text": "[01:18:56]\nIs it going to fit well with a design system you set up?\n[01:19:00]\nAnd there are all these assumptions that, yeah, so you have to know what to rely on\n[01:19:04]\nit for."
      },
      "date": 1681978219807
    },
    {
      "item": {
        "type": "factory",
        "id": "f6a80c32136e3f41"
      },
      "id": "f6a80c32136e3f41",
      "type": "add",
      "after": "991fe379ef96fdaf",
      "date": 1681978237868
    },
    {
      "type": "edit",
      "id": "f6a80c32136e3f41",
      "item": {
        "type": "paragraph",
        "id": "f6a80c32136e3f41",
        "text": "[01:19:05]\nAnd if it's like, if you can have it perform a high level task that you can fully verify\n[01:19:12]\nand trust it for, that's interesting.\n[01:19:14]\nIf you can have it help you with ideation and generating a list of things to think about,\n[01:19:22]\nand that's input for you to consider some other things, that's also very good.\n[01:19:26]\nBecause that, if something is helping you with ideation, you can filter out a little\n[01:19:31]\nbit of junk to get the diamond in the rough.\n[01:19:34]\nOh, this one idea, I didn't consider that."
      },
      "date": 1681978239111
    },
    {
      "type": "edit",
      "id": "f6a80c32136e3f41",
      "item": {
        "type": "paragraph",
        "id": "f6a80c32136e3f41",
        "text": "[01:19:05]\nAnd if it's like, if you can have it perform a high level task that you can fully verify\n[01:19:12]\nand trust it for, that's interesting.\n[01:19:14]\nIf you can have it help you with ideation and generating a list of things to think about,\n[01:19:22]\nand that's input for you to consider some other things, that's also very good.\n[01:19:26]\nBecause that, if something is helping you with ideation, you can filter out a little\n[01:19:31]\nbit of junk to get the diamond in the rough.\n[01:19:34]\nOh, this one idea, I didn't consider that. [01:19:36]\nAnd that was really good."
      },
      "date": 1681978266018
    },
    {
      "item": {
        "type": "factory",
        "id": "87d79f2998e0fefb"
      },
      "id": "87d79f2998e0fefb",
      "type": "add",
      "after": "f6a80c32136e3f41",
      "date": 1681978283949
    },
    {
      "type": "edit",
      "id": "87d79f2998e0fefb",
      "item": {
        "type": "pagefold",
        "id": "87d79f2998e0fefb",
        "text": "Ideation"
      },
      "date": 1681978286527
    },
    {
      "id": "87d79f2998e0fefb",
      "type": "move",
      "order": [
        "a865c2a3b71a15ec",
        "0c7f5903c3db90c2",
        "7ee9d38e880c4b2d",
        "0a9f0400546d4cae",
        "d79ff5a85c4e9a55",
        "ada9b580e3c3ac3e",
        "d831fc74b1f8ba37",
        "e8b01b0301b58171",
        "a940b9bc03cf9339",
        "3e18090b1198a9f8",
        "18eabdcb162b54ee",
        "8b37c291b2bbfdf4",
        "7c913eee770395c5",
        "38a6c3fb7222a6fd",
        "de905204452661f5",
        "781bfd6bcb2a9d64",
        "573491fac8d597c7",
        "0c0ad636d77385f3",
        "a3902b5480415800",
        "398f49aaffa666f7",
        "29250a338bbfd9ac",
        "80fc1e1d179bbb61",
        "09911d95d55fb976",
        "2acd6e3d87c58813",
        "2e22eddcbb665efd",
        "5d8a6f54ccc18124",
        "00dca86db26b98f6",
        "9071cffa04a3ebe3",
        "4ed704df91de11a2",
        "adc40beedd2097eb",
        "aedeed8b3ca78fb8",
        "4cda4b3947cbb928",
        "861951a5c8c29b5c",
        "53fe4e63497a4ce0",
        "19319ba5a01db81c",
        "888002bd1eaea5a6",
        "d2f641d4c01c92af",
        "55ee061e90a2fae8",
        "a095f062c3e40ac0",
        "b0d5ef3439b789b4",
        "a7d06a2aff388a10",
        "af6df7c5db18b7f2",
        "770b2ea1e4bcade8",
        "d062a5709c88d8a0",
        "b25f18bc95f8887f",
        "2931aa35c32b0c43",
        "451b50d08bbbbb89",
        "3784bfe2fd960859",
        "7aa3a6efa971f56b",
        "8f437357033f0860",
        "56964423e3207e0b",
        "25954665b5a936e4",
        "4a3b0d2273c7968d",
        "dc97d154329d3eba",
        "a83042e558ebf54a",
        "a95179c87ff58022",
        "493cce418dcd3413",
        "d991085b9e6d1ba0",
        "22d391f86236879f",
        "95308e2de870aa61",
        "51c88948a1ef8973",
        "57f50140dca1ef92",
        "46123e85d30d002a",
        "680b26640e76d7a2",
        "8d68f0ae987f1091",
        "e49e5d655924f6a7",
        "ed36c825e5c5faec",
        "861200873c78dfd4",
        "b3a81ab12debf164",
        "207ab0882c85f178",
        "d8038d16b0bb5bde",
        "076e58dd66848ff6",
        "a40f0fee914624fa",
        "c88a2b66f638b8c3",
        "a6844a3dbece9002",
        "430f8ddbe2d6b062",
        "87d79f2998e0fefb",
        "22ce579d7b50477e",
        "194ceb54d3519c91",
        "486b5cb55a3a3fa8",
        "991fe379ef96fdaf",
        "f6a80c32136e3f41"
      ],
      "date": 1681978301019
    },
    {
      "id": "87d79f2998e0fefb",
      "type": "move",
      "order": [
        "a865c2a3b71a15ec",
        "0c7f5903c3db90c2",
        "7ee9d38e880c4b2d",
        "0a9f0400546d4cae",
        "d79ff5a85c4e9a55",
        "ada9b580e3c3ac3e",
        "d831fc74b1f8ba37",
        "e8b01b0301b58171",
        "a940b9bc03cf9339",
        "3e18090b1198a9f8",
        "18eabdcb162b54ee",
        "8b37c291b2bbfdf4",
        "7c913eee770395c5",
        "38a6c3fb7222a6fd",
        "de905204452661f5",
        "781bfd6bcb2a9d64",
        "573491fac8d597c7",
        "0c0ad636d77385f3",
        "a3902b5480415800",
        "398f49aaffa666f7",
        "29250a338bbfd9ac",
        "80fc1e1d179bbb61",
        "09911d95d55fb976",
        "2acd6e3d87c58813",
        "2e22eddcbb665efd",
        "5d8a6f54ccc18124",
        "00dca86db26b98f6",
        "9071cffa04a3ebe3",
        "4ed704df91de11a2",
        "adc40beedd2097eb",
        "aedeed8b3ca78fb8",
        "4cda4b3947cbb928",
        "861951a5c8c29b5c",
        "53fe4e63497a4ce0",
        "19319ba5a01db81c",
        "888002bd1eaea5a6",
        "d2f641d4c01c92af",
        "55ee061e90a2fae8",
        "a095f062c3e40ac0",
        "b0d5ef3439b789b4",
        "a7d06a2aff388a10",
        "af6df7c5db18b7f2",
        "770b2ea1e4bcade8",
        "d062a5709c88d8a0",
        "b25f18bc95f8887f",
        "2931aa35c32b0c43",
        "451b50d08bbbbb89",
        "3784bfe2fd960859",
        "7aa3a6efa971f56b",
        "8f437357033f0860",
        "56964423e3207e0b",
        "25954665b5a936e4",
        "4a3b0d2273c7968d",
        "dc97d154329d3eba",
        "a83042e558ebf54a",
        "a95179c87ff58022",
        "493cce418dcd3413",
        "d991085b9e6d1ba0",
        "22d391f86236879f",
        "95308e2de870aa61",
        "51c88948a1ef8973",
        "57f50140dca1ef92",
        "46123e85d30d002a",
        "680b26640e76d7a2",
        "8d68f0ae987f1091",
        "e49e5d655924f6a7",
        "ed36c825e5c5faec",
        "861200873c78dfd4",
        "b3a81ab12debf164",
        "207ab0882c85f178",
        "d8038d16b0bb5bde",
        "076e58dd66848ff6",
        "87d79f2998e0fefb",
        "a40f0fee914624fa",
        "c88a2b66f638b8c3",
        "a6844a3dbece9002",
        "430f8ddbe2d6b062",
        "22ce579d7b50477e",
        "194ceb54d3519c91",
        "486b5cb55a3a3fa8",
        "991fe379ef96fdaf",
        "f6a80c32136e3f41"
      ],
      "date": 1681978305099
    },
    {
      "item": {
        "type": "factory",
        "id": "6d62e1b4e8732c94"
      },
      "id": "6d62e1b4e8732c94",
      "type": "add",
      "after": "f6a80c32136e3f41",
      "date": 1681978323281
    },
    {
      "type": "edit",
      "id": "6d62e1b4e8732c94",
      "item": {
        "type": "paragraph",
        "id": "6d62e1b4e8732c94",
        "text": "[01:19:37]\nSo that's another use case.\n[01:19:38]\nBut the sort of in-between space where you just YOLO it and blindly incorporate it into\n[01:19:45]\nyour code, I'm honestly pretty skeptical of the utility of that.\n[01:19:51]\nAnd I'm skeptical of how maintainable it's going to be working with systems like that\n[01:19:56]\nand maintaining code where there's a lot of that happening.\n[01:19:59]\nI think it's going to be okay for things that you're okay with throwing away.\n[01:20:04]\nWell, that you're okay with and that you can throw away."
      },
      "date": 1681978324676
    },
    {
      "item": {
        "type": "factory",
        "id": "dc26f2b096fa826b"
      },
      "id": "dc26f2b096fa826b",
      "type": "add",
      "after": "6d62e1b4e8732c94",
      "date": 1681978373305
    },
    {
      "type": "edit",
      "id": "dc26f2b096fa826b",
      "item": {
        "type": "paragraph",
        "id": "dc26f2b096fa826b",
        "text": "[01:20:09]\nYeah, if you can scope something down really narrowly.\n[01:20:12]\nI used it the other day for writing something to traverse a directory structure to find\n[01:20:21]\nthe root Elm project by looking until it found an Elm.json file.\n[01:20:26]\nFor my Elm pages scripts, I changed it so you can do Elm pages run and then give a file\n[01:20:31]\npath and it will find the nearest Elm.json to the file you pass in.\n[01:20:36]\nAnd I wrote it with GPT-4 and I went through a few iterations and I guided it very clearly\n[01:20:43]\nwith what I wanted in the result."
      },
      "date": 1681978374621
    },
    {
      "item": {
        "type": "factory",
        "id": "d583bf5e4b8a2f85"
      },
      "id": "d583bf5e4b8a2f85",
      "type": "add",
      "after": "dc26f2b096fa826b",
      "date": 1681978414738
    },
    {
      "type": "edit",
      "id": "d583bf5e4b8a2f85",
      "item": {
        "type": "paragraph",
        "id": "d583bf5e4b8a2f85",
        "text": "[01:20:46]\nBut I knew it was like, this is going to generate one function for me that if it works, I can\n[01:20:52]\njust let it do its thing.\n[01:20:54]\nAlthough I didn't like the style it used.\n[01:20:56]\nSo I told it, instead of doing a bunch of for loops and while loops, can you do it using\n[01:21:03]\nfunctional style mapping and recursive functions?\n[01:21:06]\nAnd it modified it."
      },
      "date": 1681978416055
    },
    {
      "item": {
        "type": "factory",
        "id": "e17eb81414231d9e"
      },
      "id": "e17eb81414231d9e",
      "type": "add",
      "after": "d583bf5e4b8a2f85",
      "date": 1681978430152
    },
    {
      "type": "edit",
      "id": "e17eb81414231d9e",
      "item": {
        "type": "paragraph",
        "id": "e17eb81414231d9e",
        "text": "[01:21:08]\nAnd then I said, can you use ESM imports instead?\n[01:21:11]\nAnd with a few tweaks, I had it refactor it to the style I wanted.\n[01:21:14]\nAnd so yeah, it was like a constrained thing.\n[01:21:18]\nAnd the next time you do that, you will prime it with, oh, use a functional style and use\n[01:21:23]\nESM, etc."
      },
      "date": 1681978431427
    },
    {
      "item": {
        "type": "factory",
        "id": "3b1c2fac041466d8"
      },
      "id": "3b1c2fac041466d8",
      "type": "add",
      "after": "e17eb81414231d9e",
      "date": 1681978452515
    },
    {
      "type": "edit",
      "id": "3b1c2fac041466d8",
      "item": {
        "type": "paragraph",
        "id": "3b1c2fac041466d8",
        "text": "[01:21:26]\nAnd that was like a constrained enough thing that I know with my experience, that it's\n[01:21:33]\nlike an independent, separable problem that if it writes a function that does this, I\n[01:21:39]\ncan use that and it can be useful to my workflow.\n[01:21:41]\nSo I think there's an art to knowing when to rely on it as well.\n[01:21:45]\nI feel like we have a lot more to talk about, a lot of interesting aspects to cover, but\n[01:21:52]\nthis has already been a quite long episode."
      },
      "date": 1681978454032
    },
    {
      "item": {
        "type": "factory",
        "id": "27f01dd7c08ef93e"
      },
      "id": "27f01dd7c08ef93e",
      "type": "add",
      "after": "3b1c2fac041466d8",
      "date": 1681978498619
    },
    {
      "type": "edit",
      "id": "27f01dd7c08ef93e",
      "item": {
        "type": "paragraph",
        "id": "27f01dd7c08ef93e",
        "text": "[01:22:06]\nAnd tell us what you've been doing with Element AI or pure functional programming and AI.\n[01:22:12]\nWe would love to hear from you.\n[01:22:13]\nWe'd love to hear what clever things you come up with or just how you use it in your workflow\n[01:22:17]\nand let us know what you want to hear about with Elm and AI in the future."
      },
      "date": 1681978509274
    },
    {
      "item": {
        "type": "factory",
        "id": "5c1cfc56f1ed5ded"
      },
      "id": "5c1cfc56f1ed5ded",
      "type": "add",
      "after": "27f01dd7c08ef93e",
      "date": 1681978539541
    },
    {
      "type": "edit",
      "id": "5c1cfc56f1ed5ded",
      "item": {
        "type": "paragraph",
        "id": "5c1cfc56f1ed5ded",
        "text": "[01:22:22]\nDid you prompt the audience well enough so that they give you the answers that you're\n[01:22:27]\nlooking for or do you need to rephrase it slightly?\n[01:22:30]\nMaybe let's give them some guardrails.\n[01:22:32]\nGive us your example use cases.\n[01:22:35]\nGive us an example of the problem you used with it.\n[01:22:38]\nThere we go.\n[01:22:39]\nI think we're good."
      },
      "date": 1681978541723
    }
  ]
}