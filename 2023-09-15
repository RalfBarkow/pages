{
  "title": "2023-09-15",
  "story": [
    {
      "type": "paragraph",
      "id": "0a4ed9c3a924701b",
      "text": "⇒ [[Digital Searching]] ⇐ [[Traversals]] ⇒ [[oneOf]]  ⇒ [[Containers]] ⇒ [[Functions Are Containers]] ⇒ [[Subindex]]"
    },
    {
      "type": "markdown",
      "id": "69c6282306a3ae43",
      "text": "[…] at each point of the space of interval pairs, `matches:` makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction [[Vector]] at each step of the trip!\n\n> Or the direction in which mice [[traverse]] a [[Maze]]."
    },
    {
      "type": "paragraph",
      "id": "b3c61da75b572bf9",
      "text": "[…] The nodes of the trie are vectors whose subscripts run from 0 to M − 1; each component of these vectors is either a key or a link (possibly null). [⇒ [[Digital Searching]]]"
    },
    {
      "type": "pagefold",
      "id": "98ec2597029dc279",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "39ca888c8850d89f",
      "text": "⇒ [[DMX]] ⇒ [[dmx-headless]] ⇒  [[dmx.ralfbarkow.ch]]"
    },
    {
      "type": "paragraph",
      "id": "dcade7a2ff7ea741",
      "text": "Devine Lu Linvega's journal [https://wiki.xxiivv.com/site/home.html site], [https://100r.co/live/ 100r] (needs script and xhr permissions for maps.googleapis.com)"
    },
    {
      "type": "reference",
      "id": "25ce529ee3091c51",
      "site": "wiki.ralfbarkow.ch",
      "slug": "hundred-rabbits",
      "title": "Hundred Rabbits",
      "text": "is a small artist collective. Together, we explore the planned failability of modern technology at the bounds of the hyper-connected world. We research and test low-tech solutions and document our findings with the hope of building a more resilient future. [https://100r.co/site/about_us.html site]"
    },
    {
      "type": "pagefold",
      "id": "fc9f9c05a84be9fb",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "af812d56ae08f0cc",
      "text": "Opening up ChatGPT: Tracking openness, transparency, and accountability in instruction-tuned text generators [https://doi.org/10.1145/3571884.3604316 doi], [https://scholar.social/@dingemansemark/110728766949576969 post], [https://opening-up-chatgpt.github.io site]"
    },
    {
      "type": "paragraph",
      "id": "ea17558ca9b79b1a",
      "text": "⇒ [[BLOOMZ]]\n    link: [https://huggingface.co/bigscience/bloomz page], [https://github.com/bigscience-workshop/xmtf github]"
    },
    {
      "type": "paragraph",
      "id": "886ab5095fa43310",
      "text": "⇒ [[Patricia]]"
    },
    {
      "type": "paragraph",
      "id": "6848b171d0864ed7",
      "text": "⇒ [[Keyword-in-Context]]"
    },
    {
      "type": "paragraph",
      "id": "ab78fa4a121b219e",
      "text": "As an example of Algorithm K, consider Fig. 15, which is based on a “keyword-in-context” ([[KWIC]]) indexing application. The titles of all articles in the first ten volumes of the Journal of the ACM were sorted to prepare a concordance in which there was one line for every word of every title. However, certain words like “THE” and “EQUATION” were felt to be sufficiently uninformative that they were left out of the index. These special words and their frequency of occurrence are shown in the internal nodes of Fig. 15. Notice that a title such as “On the solution of an equation for a certain new problem” would be so uninformative, it wouldn’t appear in the index at all! The idea of KWIC indexing is due to H. P. Luhn, Amer.Documentation 11 (1960), 288295. (See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears.)"
    },
    {
      "type": "reference",
      "id": "d1e0da0d4a570faf",
      "site": "wiki.ralfbarkow.ch",
      "slug": "emulate-keyword-and-default-parameters",
      "title": "Emulate Keyword And Default Parameters",
      "text": "A nice pattern to be used especially when designing highly reusable classes/functions, with lots of options. We try to achieve [[Economy Of Expression]] for the client context, as well as [[Information Hiding]] as much as possible. In particular by language features such as [[Keyword Parameter Passing]] (Lisp, PL/SQL,Ada'95, [[Objective Caml]], most Unix utilities with regards to command line invocation) strongly supports these properties and we want to emulate this behavior in language without support for [[Keyword Parameter Passing]], …"
    },
    {
      "type": "pagefold",
      "id": "97680ced4c067a06",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "aedd04d69f0dd51e",
      "text": "⇒ [[MiniLatex]] ⇒ [[parse]] "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-09-15",
        "story": []
      },
      "date": 1694756831135
    },
    {
      "item": {
        "type": "factory",
        "id": "0a4ed9c3a924701b"
      },
      "id": "0a4ed9c3a924701b",
      "type": "add",
      "date": 1694756837110
    },
    {
      "type": "edit",
      "id": "0a4ed9c3a924701b",
      "item": {
        "type": "paragraph",
        "id": "0a4ed9c3a924701b",
        "text": "⇒ [[Traversals]]"
      },
      "date": 1694756851096
    },
    {
      "id": "69c6282306a3ae43",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "> The behavior of matches: is configured by the pattern and the string.\n\nIf we examine this situation carefully, we will see that at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n\n> Or the direction in which mice traverse a [[Maze]]."
      },
      "after": "0a4ed9c3a924701b",
      "attribution": {
        "page": "Traversals"
      },
      "date": 1694756892360
    },
    {
      "type": "edit",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "[…] at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n\n> Or the direction in which mice traverse a [[Maze]]."
      },
      "date": 1694756933685
    },
    {
      "type": "edit",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "[…] at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction vector at each step of the trip!\n\n> Or the direction in which mice [[traverse]] a [[Maze]]."
      },
      "date": 1694756967743
    },
    {
      "type": "edit",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "[…] at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction [[vector]] at each step of the trip!\n\n> Or the direction in which mice [[traverse]] a [[Maze]]."
      },
      "date": 1694756977404
    },
    {
      "type": "edit",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "[…] at each point of the space of interval pairs, matches: makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction [[Vector]] at each step of the trip!\n\n> Or the direction in which mice [[traverse]] a [[Maze]]."
      },
      "date": 1694757007993
    },
    {
      "type": "edit",
      "id": "69c6282306a3ae43",
      "item": {
        "type": "markdown",
        "id": "69c6282306a3ae43",
        "text": "[…] at each point of the space of interval pairs, `matches:` makes a decision about where to go next based on the individual characters of the pattern and the string, and on the current position in the space. Oh. … so the pattern and the string specify a particular variety of traversal behavior. In other words, `matches:` translates the pattern and the string into a direction [[Vector]] at each step of the trip!\n\n> Or the direction in which mice [[traverse]] a [[Maze]]."
      },
      "date": 1694757086277
    },
    {
      "type": "edit",
      "id": "0a4ed9c3a924701b",
      "item": {
        "type": "paragraph",
        "id": "0a4ed9c3a924701b",
        "text": "⇒ [[Digital Searching]] ⇒ [[Traversals]]"
      },
      "date": 1694757185542
    },
    {
      "type": "edit",
      "id": "0a4ed9c3a924701b",
      "item": {
        "type": "paragraph",
        "id": "0a4ed9c3a924701b",
        "text": "⇒ [[Digital Searching]] ⇐ [[Traversals]]"
      },
      "date": 1694757208302
    },
    {
      "item": {
        "type": "factory",
        "id": "d9f9d900345b2881"
      },
      "id": "d9f9d900345b2881",
      "type": "add",
      "after": "69c6282306a3ae43",
      "date": 1694757211791
    },
    {
      "type": "edit",
      "id": "d9f9d900345b2881",
      "item": {
        "type": "graphviz",
        "id": "d9f9d900345b2881",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1694757218725
    },
    {
      "id": "b3c61da75b572bf9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b3c61da75b572bf9",
        "text": "[…] The nodes of the trie are vectors whose subscripts run from 0 to M − 1; each component of these vectors is either a key or a link (possibly null)."
      },
      "after": "d9f9d900345b2881",
      "attribution": {
        "page": "Digital Searching"
      },
      "date": 1694757344950
    },
    {
      "type": "edit",
      "id": "b3c61da75b572bf9",
      "item": {
        "type": "paragraph",
        "id": "b3c61da75b572bf9",
        "text": "[…] The nodes of the trie are vectors whose subscripts run from 0 to M − 1; each component of these vectors is either a key or a link (possibly null). [⇒ [[Digital Searching]]]"
      },
      "date": 1694757364259
    },
    {
      "type": "edit",
      "id": "0a4ed9c3a924701b",
      "item": {
        "type": "paragraph",
        "id": "0a4ed9c3a924701b",
        "text": "⇒ [[Digital Searching]] ⇐ [[Traversals]] ⇒ [[oneOf]]"
      },
      "date": 1694759002873
    },
    {
      "type": "edit",
      "id": "0a4ed9c3a924701b",
      "item": {
        "type": "paragraph",
        "id": "0a4ed9c3a924701b",
        "text": "⇒ [[Digital Searching]] ⇐ [[Traversals]] ⇒ [[oneOf]]  ⇒ [[Containers]]"
      },
      "date": 1694763778288
    },
    {
      "type": "edit",
      "id": "0a4ed9c3a924701b",
      "item": {
        "type": "paragraph",
        "id": "0a4ed9c3a924701b",
        "text": "⇒ [[Digital Searching]] ⇐ [[Traversals]] ⇒ [[oneOf]]  ⇒ [[Containers]] ⇒ [[Functions Are Containers]]"
      },
      "date": 1694763815689
    },
    {
      "type": "edit",
      "id": "0a4ed9c3a924701b",
      "item": {
        "type": "paragraph",
        "id": "0a4ed9c3a924701b",
        "text": "⇒ [[Digital Searching]] ⇐ [[Traversals]] ⇒ [[oneOf]]  ⇒ [[Containers]] ⇒ [[Functions Are Containers]] ⇒ [[Subindex]]"
      },
      "date": 1694764660009
    },
    {
      "item": {
        "type": "factory",
        "id": "98ec2597029dc279"
      },
      "id": "98ec2597029dc279",
      "type": "add",
      "after": "b3c61da75b572bf9",
      "date": 1694770849197
    },
    {
      "type": "edit",
      "id": "98ec2597029dc279",
      "item": {
        "type": "pagefold",
        "id": "98ec2597029dc279",
        "text": "~"
      },
      "date": 1694770852163
    },
    {
      "item": {
        "type": "factory",
        "id": "25ce529ee3091c51"
      },
      "id": "25ce529ee3091c51",
      "type": "add",
      "after": "98ec2597029dc279",
      "date": 1694770853609
    },
    {
      "type": "edit",
      "id": "25ce529ee3091c51",
      "item": {
        "type": "reference",
        "id": "25ce529ee3091c51",
        "site": "wiki.ralfbarkow.ch",
        "slug": "hundred-rabbits",
        "title": "Hundred Rabbits",
        "text": "is a small artist collective. Together, we explore the planned failability of modern technology at the bounds of the hyper-connected world. We research and test low-tech solutions and document our findings with the hope of building a more resilient future. [https://100r.co/site/about_us.html site]"
      },
      "date": 1694770856076
    },
    {
      "item": {
        "type": "factory",
        "id": "39ca888c8850d89f"
      },
      "id": "39ca888c8850d89f",
      "type": "add",
      "after": "25ce529ee3091c51",
      "date": 1694770860670
    },
    {
      "type": "edit",
      "id": "39ca888c8850d89f",
      "item": {
        "type": "paragraph",
        "id": "39ca888c8850d89f",
        "text": "⇒"
      },
      "date": 1694770867269
    },
    {
      "type": "edit",
      "id": "39ca888c8850d89f",
      "item": {
        "type": "paragraph",
        "id": "39ca888c8850d89f",
        "text": "⇒ [[dmx]]"
      },
      "date": 1694770875753
    },
    {
      "type": "edit",
      "id": "39ca888c8850d89f",
      "item": {
        "type": "paragraph",
        "id": "39ca888c8850d89f",
        "text": "⇒ [[DMX]]"
      },
      "date": 1694770883373
    },
    {
      "type": "edit",
      "id": "39ca888c8850d89f",
      "item": {
        "type": "paragraph",
        "id": "39ca888c8850d89f",
        "text": "⇒ [[DMX]] ⇒ [[dmx-headless]]"
      },
      "date": 1694770908816
    },
    {
      "type": "edit",
      "id": "39ca888c8850d89f",
      "item": {
        "type": "paragraph",
        "id": "39ca888c8850d89f",
        "text": "⇒ [[DMX]] ⇒ [[dmx-headless]] ⇒  [[dmx.ralfbarkow.ch]]"
      },
      "date": 1694770943423
    },
    {
      "item": {
        "type": "factory",
        "id": "dcade7a2ff7ea741"
      },
      "id": "dcade7a2ff7ea741",
      "type": "add",
      "after": "39ca888c8850d89f",
      "date": 1694771377612
    },
    {
      "type": "edit",
      "id": "dcade7a2ff7ea741",
      "item": {
        "type": "paragraph",
        "id": "dcade7a2ff7ea741",
        "text": "Devine Lu Linvega's journal"
      },
      "date": 1694771379314
    },
    {
      "id": "dcade7a2ff7ea741",
      "type": "move",
      "order": [
        "0a4ed9c3a924701b",
        "69c6282306a3ae43",
        "d9f9d900345b2881",
        "b3c61da75b572bf9",
        "98ec2597029dc279",
        "dcade7a2ff7ea741",
        "25ce529ee3091c51",
        "39ca888c8850d89f"
      ],
      "date": 1694771384147
    },
    {
      "id": "39ca888c8850d89f",
      "type": "move",
      "order": [
        "0a4ed9c3a924701b",
        "69c6282306a3ae43",
        "d9f9d900345b2881",
        "b3c61da75b572bf9",
        "98ec2597029dc279",
        "39ca888c8850d89f",
        "dcade7a2ff7ea741",
        "25ce529ee3091c51"
      ],
      "date": 1694771388428
    },
    {
      "type": "edit",
      "id": "dcade7a2ff7ea741",
      "item": {
        "type": "paragraph",
        "id": "dcade7a2ff7ea741",
        "text": "Devine Lu Linvega's journal [https://wiki.xxiivv.com/site/home.html site]"
      },
      "date": 1694771420549
    },
    {
      "type": "edit",
      "id": "dcade7a2ff7ea741",
      "item": {
        "type": "paragraph",
        "id": "dcade7a2ff7ea741",
        "text": "Devine Lu Linvega's journal [https://wiki.xxiivv.com/site/home.html site], [https://100r.co/live/ 100r]"
      },
      "date": 1694771609856
    },
    {
      "type": "edit",
      "id": "dcade7a2ff7ea741",
      "item": {
        "type": "paragraph",
        "id": "dcade7a2ff7ea741",
        "text": "Devine Lu Linvega's journal [https://wiki.xxiivv.com/site/home.html site], [https://100r.co/live/ 100r] (uses maps.googleapis.com)"
      },
      "date": 1694771674079
    },
    {
      "type": "edit",
      "id": "dcade7a2ff7ea741",
      "item": {
        "type": "paragraph",
        "id": "dcade7a2ff7ea741",
        "text": "Devine Lu Linvega's journal [https://wiki.xxiivv.com/site/home.html site], [https://100r.co/live/ 100r] (needs script and xhr permissions for maps.googleapis.com)"
      },
      "date": 1694771722877
    },
    {
      "item": {
        "type": "factory",
        "id": "af812d56ae08f0cc"
      },
      "id": "af812d56ae08f0cc",
      "type": "add",
      "after": "25ce529ee3091c51",
      "date": 1694784247963
    },
    {
      "type": "edit",
      "id": "af812d56ae08f0cc",
      "item": {
        "type": "paragraph",
        "id": "af812d56ae08f0cc",
        "text": "Opening up ChatGPT: Tracking openness, transparency, and accountability in instruction-tuned text generators"
      },
      "date": 1694784250593
    },
    {
      "type": "edit",
      "id": "af812d56ae08f0cc",
      "item": {
        "type": "paragraph",
        "id": "af812d56ae08f0cc",
        "text": "Opening up ChatGPT: Tracking openness, transparency, and accountability in instruction-tuned text generators [https://doi.org/10.1145/3571884.3604316 doi]"
      },
      "date": 1694784264519
    },
    {
      "type": "edit",
      "id": "af812d56ae08f0cc",
      "item": {
        "type": "paragraph",
        "id": "af812d56ae08f0cc",
        "text": "Opening up ChatGPT: Tracking openness, transparency, and accountability in instruction-tuned text generators [https://doi.org/10.1145/3571884.3604316 doi], [https://scholar.social/@dingemansemark/110728766949576969 post]"
      },
      "date": 1694784519266
    },
    {
      "type": "edit",
      "id": "af812d56ae08f0cc",
      "item": {
        "type": "paragraph",
        "id": "af812d56ae08f0cc",
        "text": "Opening up ChatGPT: Tracking openness, transparency, and accountability in instruction-tuned text generators [https://doi.org/10.1145/3571884.3604316 doi], [https://scholar.social/@dingemansemark/110728766949576969 post], [https://opening-up-chatgpt.github.io site]"
      },
      "date": 1694784810584
    },
    {
      "item": {
        "type": "factory",
        "id": "ea17558ca9b79b1a"
      },
      "id": "ea17558ca9b79b1a",
      "type": "add",
      "after": "af812d56ae08f0cc",
      "date": 1694785657860
    },
    {
      "type": "edit",
      "id": "ea17558ca9b79b1a",
      "item": {
        "type": "paragraph",
        "id": "ea17558ca9b79b1a",
        "text": "⇒ [[BLOOMZ]]\n    link: [https://huggingface.co/bigscience/bloomz page]"
      },
      "date": 1694785686827
    },
    {
      "type": "edit",
      "id": "ea17558ca9b79b1a",
      "item": {
        "type": "paragraph",
        "id": "ea17558ca9b79b1a",
        "text": "⇒ [[BLOOMZ]]\n    link: [https://huggingface.co/bigscience/bloomz page], [https://github.com/bigscience-workshop/xmtf github]"
      },
      "date": 1694785733902
    },
    {
      "item": {
        "type": "factory",
        "id": "09c6a0c585f1ce3d"
      },
      "id": "09c6a0c585f1ce3d",
      "type": "add",
      "after": "ea17558ca9b79b1a",
      "date": 1694785748541
    },
    {
      "type": "edit",
      "id": "09c6a0c585f1ce3d",
      "item": {
        "type": "paragraph",
        "id": "09c6a0c585f1ce3d",
        "text": "Crosslingual Generalization through Multitask Finetuning"
      },
      "date": 1694785750756
    },
    {
      "type": "edit",
      "id": "09c6a0c585f1ce3d",
      "item": {
        "type": "paragraph",
        "id": "09c6a0c585f1ce3d",
        "text": "Crosslingual Generalization through Multitask Finetuning [https://arxiv.org/abs/2211.01786 arxiv]"
      },
      "date": 1694785761960
    },
    {
      "id": "09c6a0c585f1ce3d",
      "type": "remove",
      "removedTo": {
        "page": "BLOOMZ"
      },
      "date": 1694786177030
    },
    {
      "item": {
        "type": "factory",
        "id": "fc9f9c05a84be9fb"
      },
      "id": "fc9f9c05a84be9fb",
      "type": "add",
      "after": "ea17558ca9b79b1a",
      "date": 1694786349825
    },
    {
      "type": "edit",
      "id": "fc9f9c05a84be9fb",
      "item": {
        "type": "pagefold",
        "id": "fc9f9c05a84be9fb",
        "text": "~"
      },
      "date": 1694786352630
    },
    {
      "id": "fc9f9c05a84be9fb",
      "type": "move",
      "order": [
        "0a4ed9c3a924701b",
        "69c6282306a3ae43",
        "d9f9d900345b2881",
        "b3c61da75b572bf9",
        "98ec2597029dc279",
        "39ca888c8850d89f",
        "dcade7a2ff7ea741",
        "25ce529ee3091c51",
        "fc9f9c05a84be9fb",
        "af812d56ae08f0cc",
        "ea17558ca9b79b1a"
      ],
      "date": 1694786356982
    },
    {
      "item": {
        "type": "factory",
        "id": "ff15fbf8b579c57f"
      },
      "id": "ff15fbf8b579c57f",
      "type": "add",
      "after": "ea17558ca9b79b1a",
      "date": 1694788295000
    },
    {
      "type": "edit",
      "id": "ff15fbf8b579c57f",
      "item": {
        "type": "image",
        "id": "ff15fbf8b579c57f",
        "text": "Fig. 33. An example of Patricia's tree and TEXT.",
        "size": "wide",
        "width": 430,
        "height": 344,
        "url": "/assets/plugins/image/7415af4b0b7b316f81c001ebe222e33c.jpg"
      },
      "date": 1694788356314
    },
    {
      "item": {
        "type": "factory",
        "id": "b1f46e993600b52a"
      },
      "id": "b1f46e993600b52a",
      "type": "add",
      "after": "ff15fbf8b579c57f",
      "date": 1694788554952
    },
    {
      "type": "edit",
      "id": "b1f46e993600b52a",
      "item": {
        "type": "paragraph",
        "id": "b1f46e993600b52a",
        "text": "Donald R. Morrison [JACM 15 (1968), 514–534] has discovered a very pretty way to form N-node search trees based on the binary representation of keys, without storing keys in the nodes. His method, called “Patricia” (Practical Algorithm To Retrieve Information Coded In Alphanumeric), is especially suitable for dealing with extremely long, variable-length keys such as titles or phrases stored within a large bulk file. A closely related algorithm was published at almost exactly the same time in Germany by G. Gwehenberger, Elektronische Rechenanlagen 10 (1968), 223–226."
      },
      "date": 1694788556612
    },
    {
      "type": "add",
      "id": "886ab5095fa43310",
      "item": {
        "type": "paragraph",
        "id": "886ab5095fa43310",
        "text": "⇒ [[]]"
      },
      "after": "ea17558ca9b79b1a",
      "date": 1694788667393
    },
    {
      "type": "edit",
      "id": "886ab5095fa43310",
      "item": {
        "type": "paragraph",
        "id": "886ab5095fa43310",
        "text": "⇒ [[Patricia]]"
      },
      "date": 1694788680425
    },
    {
      "id": "b1f46e993600b52a",
      "type": "remove",
      "removedTo": {
        "page": "Patricia"
      },
      "date": 1694788685714
    },
    {
      "id": "ff15fbf8b579c57f",
      "type": "remove",
      "removedTo": {
        "page": "Patricia"
      },
      "date": 1694788687616
    },
    {
      "item": {
        "type": "factory",
        "id": "ab78fa4a121b219e"
      },
      "id": "ab78fa4a121b219e",
      "type": "add",
      "after": "886ab5095fa43310",
      "date": 1694789251280
    },
    {
      "type": "edit",
      "id": "ab78fa4a121b219e",
      "item": {
        "type": "paragraph",
        "id": "ab78fa4a121b219e",
        "text": "As an example of Algorithm K, consider Fig. 15, which is based on a “keyword-in-context” (KWIC) indexing application. The titles of all articles in the first ten volumes of the Journal of the ACM were sorted to prepare a concordance in which there was one line for every word of every title. However, certain words like “THE” and “EQUATION” were felt to be sufficiently uninformative that they were left out of the index. These special words and their frequency of occurrence are shown in the internal nodes of Fig. 15. Notice that a title such as “On the solution of an equation for a certain new problem” would be so uninformative, it wouldn’t appear in the index at all! The idea of KWIC indexing is due to H. P. Luhn, Amer.Documentation 11 (1960), 288295. (See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears.)"
      },
      "date": 1694789252975
    },
    {
      "item": {
        "type": "factory",
        "id": "d1e0da0d4a570faf"
      },
      "id": "d1e0da0d4a570faf",
      "type": "add",
      "after": "ab78fa4a121b219e",
      "date": 1694789331373
    },
    {
      "type": "edit",
      "id": "d1e0da0d4a570faf",
      "item": {
        "type": "reference",
        "id": "d1e0da0d4a570faf",
        "site": "wiki.ralfbarkow.ch",
        "slug": "emulate-keyword-and-default-parameters",
        "title": "Emulate Keyword And Default Parameters",
        "text": "A nice pattern to be used especially when designing highly reusable classes/functions, with lots of options. We try to achieve [[Economy Of Expression]] for the client context, as well as [[Information Hiding]] as much as possible. In particular by language features such as [[Keyword Parameter Passing]] (Lisp, PL/SQL,Ada'95, [[Objective Caml]], most Unix utilities with regards to command line invocation) strongly supports these properties and we want to emulate this behavior in language without support for [[Keyword Parameter Passing]], following the pri"
      },
      "date": 1694789335121
    },
    {
      "type": "add",
      "id": "6848b171d0864ed7",
      "item": {
        "type": "paragraph",
        "id": "6848b171d0864ed7",
        "text": "⇒ [[Keyword-in-Context]]"
      },
      "after": "886ab5095fa43310",
      "date": 1694789404823
    },
    {
      "type": "edit",
      "id": "ab78fa4a121b219e",
      "item": {
        "type": "paragraph",
        "id": "ab78fa4a121b219e",
        "text": "As an example of Algorithm K, consider Fig. 15, which is based on a “keyword-in-context” ([[KWIC]]) indexing application. The titles of all articles in the first ten volumes of the Journal of the ACM were sorted to prepare a concordance in which there was one line for every word of every title. However, certain words like “THE” and “EQUATION” were felt to be sufficiently uninformative that they were left out of the index. These special words and their frequency of occurrence are shown in the internal nodes of Fig. 15. Notice that a title such as “On the solution of an equation for a certain new problem” would be so uninformative, it wouldn’t appear in the index at all! The idea of KWIC indexing is due to H. P. Luhn, Amer.Documentation 11 (1960), 288295. (See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears.)"
      },
      "date": 1694790054263
    },
    {
      "id": "0a3c72c6461f739b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0a3c72c6461f739b",
        "text": "As an example of Algorithm K, consider Fig. 15, which is based on a “keyword-in-context” (KWIC) indexing application."
      },
      "after": "25ce529ee3091c51",
      "attribution": {
        "page": "Keyword-in-Context"
      },
      "date": 1694790075069
    },
    {
      "id": "0a3c72c6461f739b",
      "type": "remove",
      "removedTo": {
        "page": "KWIC"
      },
      "date": 1694790087087
    },
    {
      "item": {
        "type": "factory",
        "id": "97680ced4c067a06"
      },
      "id": "97680ced4c067a06",
      "type": "add",
      "after": "d1e0da0d4a570faf",
      "date": 1694803968441
    },
    {
      "type": "edit",
      "id": "97680ced4c067a06",
      "item": {
        "type": "pagefold",
        "id": "97680ced4c067a06",
        "text": "~"
      },
      "date": 1694803970923
    },
    {
      "item": {
        "type": "factory",
        "id": "00d330748ad52b1a"
      },
      "id": "00d330748ad52b1a",
      "type": "add",
      "after": "97680ced4c067a06",
      "date": 1694803972263
    },
    {
      "type": "edit",
      "id": "00d330748ad52b1a",
      "item": {
        "type": "code",
        "id": "00d330748ad52b1a",
        "text": "{-| Parse the given text and return an AST represeting it.\n-}\nparse : String -> List (List LatexExpression)\nparse text =\n    text\n        |> Paragraph.logicalParagraphify\n        |> List.map MiniLatexParser.parse\n\n"
      },
      "date": 1694803975206
    },
    {
      "type": "edit",
      "id": "d1e0da0d4a570faf",
      "item": {
        "type": "reference",
        "id": "d1e0da0d4a570faf",
        "site": "wiki.ralfbarkow.ch",
        "slug": "emulate-keyword-and-default-parameters",
        "title": "Emulate Keyword And Default Parameters",
        "text": "A nice pattern to be used especially when designing highly reusable classes/functions, with lots of options. We try to achieve [[Economy Of Expression]] for the client context, as well as [[Information Hiding]] as much as possible. In particular by language features such as [[Keyword Parameter Passing]] (Lisp, PL/SQL,Ada'95, [[Objective Caml]], most Unix utilities with regards to command line invocation) strongly supports these properties and we want to emulate this behavior in language without support for [[Keyword Parameter Passing]], …"
      },
      "date": 1694804016531
    },
    {
      "item": {
        "type": "factory",
        "id": "aedd04d69f0dd51e"
      },
      "id": "aedd04d69f0dd51e",
      "type": "add",
      "after": "00d330748ad52b1a",
      "date": 1694804017813
    },
    {
      "id": "aedd04d69f0dd51e",
      "type": "move",
      "order": [
        "0a4ed9c3a924701b",
        "69c6282306a3ae43",
        "d9f9d900345b2881",
        "b3c61da75b572bf9",
        "98ec2597029dc279",
        "39ca888c8850d89f",
        "dcade7a2ff7ea741",
        "25ce529ee3091c51",
        "fc9f9c05a84be9fb",
        "af812d56ae08f0cc",
        "ea17558ca9b79b1a",
        "886ab5095fa43310",
        "6848b171d0864ed7",
        "ab78fa4a121b219e",
        "d1e0da0d4a570faf",
        "97680ced4c067a06",
        "aedd04d69f0dd51e",
        "00d330748ad52b1a"
      ],
      "date": 1694804019113
    },
    {
      "type": "edit",
      "id": "aedd04d69f0dd51e",
      "item": {
        "type": "paragraph",
        "id": "aedd04d69f0dd51e",
        "text": "⇒ [[MiniLatex]]"
      },
      "date": 1694804035118
    },
    {
      "type": "add",
      "id": "39ceecfba1775af1",
      "item": {
        "type": "paragraph",
        "id": "39ceecfba1775af1",
        "text": "Driver.elm [https://github.com/RalfBarkow/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Driver.elm#L55-L63 code]:"
      },
      "after": "aedd04d69f0dd51e",
      "date": 1694804058458
    },
    {
      "type": "edit",
      "id": "aedd04d69f0dd51e",
      "item": {
        "type": "paragraph",
        "id": "aedd04d69f0dd51e",
        "text": "⇒ [[MiniLatex]] ⇒ [[parse]] "
      },
      "date": 1694836195533
    },
    {
      "id": "00d330748ad52b1a",
      "type": "remove",
      "removedTo": {
        "page": "parse"
      },
      "date": 1694836214115
    },
    {
      "type": "remove",
      "id": "d9f9d900345b2881",
      "date": 1694839812179
    },
    {
      "type": "remove",
      "id": "39ceecfba1775af1",
      "date": 1694839833982
    }
  ]
}