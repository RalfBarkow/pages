{
  "title": "Global Object",
  "story": [
    {
      "type": "markdown",
      "id": "e55f367a7f8f3f18",
      "text": "A global object is an object that always exists in the global scope. [https://developer.mozilla.org/en-US/docs/Glossary/Global_object page]"
    },
    {
      "type": "markdown",
      "id": "93df7ed38f894a99",
      "text": "In JavaScript, there's always a global object defined. In a web browser, when scripts create global variables defined with the `var` keyword, they're created as members of the global object. (In Node.js this is not the case.) The global object's interface depends on the execution context in which the script is running. For example:\n\n* In a web browser, any code which the script doesn't specifically start up as a background task has a Window as its global object. This is the vast majority of JavaScript code on the Web.\n* Code running in a Worker has a WorkerGlobalScope object as its global object.\n* Scripts running under Node.js have an object called global as their global object.\n"
    },
    {
      "type": "markdown",
      "id": "e5f75e85ed415309",
      "text": "**Note**: Unlike `var`, the statements `let` and `const` do not create properties of the global object."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Global Object",
        "story": []
      },
      "date": 1644581324603
    },
    {
      "item": {
        "type": "factory",
        "id": "e55f367a7f8f3f18"
      },
      "id": "e55f367a7f8f3f18",
      "type": "add",
      "date": 1644581384221
    },
    {
      "type": "edit",
      "id": "e55f367a7f8f3f18",
      "item": {
        "type": "paragraph",
        "id": "e55f367a7f8f3f18",
        "text": "https://developer.mozilla.org/en-US/docs/Glossary/Global_object"
      },
      "date": 1644581385793
    },
    {
      "type": "edit",
      "id": "e55f367a7f8f3f18",
      "item": {
        "type": "markdown",
        "id": "e55f367a7f8f3f18",
        "text": "https://developer.mozilla.org/en-US/docs/Glossary/Global_object"
      },
      "date": 1644581387059
    },
    {
      "type": "edit",
      "id": "e55f367a7f8f3f18",
      "item": {
        "type": "markdown",
        "id": "e55f367a7f8f3f18",
        "text": "A global object is an object that always exists in the global scope. [https://developer.mozilla.org/en-US/docs/Glossary/Global_object page]"
      },
      "date": 1644581401325
    },
    {
      "item": {
        "type": "factory",
        "id": "93df7ed38f894a99"
      },
      "id": "93df7ed38f894a99",
      "type": "add",
      "after": "e55f367a7f8f3f18",
      "date": 1644581445681
    },
    {
      "type": "edit",
      "id": "93df7ed38f894a99",
      "item": {
        "type": "paragraph",
        "id": "93df7ed38f894a99",
        "text": "In JavaScript, there's always a global object defined. In a web browser, when scripts create global variables defined with the var keyword, they're created as members of the global object. (In Node.js this is not the case.) The global object's interface depends on the execution context in which the script is running. For example:\n\n    In a web browser, any code which the script doesn't specifically start up as a background task has a Window as its global object. This is the vast majority of JavaScript code on the Web.\n    Code running in a Worker has a WorkerGlobalScope object as its global object.\n    Scripts running under Node.js have an object called global as their global object.\n"
      },
      "date": 1644581447376
    },
    {
      "type": "edit",
      "id": "93df7ed38f894a99",
      "item": {
        "type": "markdown",
        "id": "93df7ed38f894a99",
        "text": "In JavaScript, there's always a global object defined. In a web browser, when scripts create global variables defined with the var keyword, they're created as members of the global object. (In Node.js this is not the case.) The global object's interface depends on the execution context in which the script is running. For example:\n\n    In a web browser, any code which the script doesn't specifically start up as a background task has a Window as its global object. This is the vast majority of JavaScript code on the Web.\n    Code running in a Worker has a WorkerGlobalScope object as its global object.\n    Scripts running under Node.js have an object called global as their global object.\n"
      },
      "date": 1644581448169
    },
    {
      "type": "edit",
      "id": "93df7ed38f894a99",
      "item": {
        "type": "markdown",
        "id": "93df7ed38f894a99",
        "text": "In JavaScript, there's always a global object defined. In a web browser, when scripts create global variables defined with the var keyword, they're created as members of the global object. (In Node.js this is not the case.) The global object's interface depends on the execution context in which the script is running. For example:\n\n* In a web browser, any code which the script doesn't specifically start up as a background task has a Window as its global object. This is the vast majority of JavaScript code on the Web.\n* Code running in a Worker has a WorkerGlobalScope object as its global object.\n* Scripts running under Node.js have an object called global as their global object.\n"
      },
      "date": 1644581462176
    },
    {
      "type": "edit",
      "id": "93df7ed38f894a99",
      "item": {
        "type": "markdown",
        "id": "93df7ed38f894a99",
        "text": "In JavaScript, there's always a global object defined. In a web browser, when scripts create global variables defined with the `var` keyword, they're created as members of the global object. (In Node.js this is not the case.) The global object's interface depends on the execution context in which the script is running. For example:\n\n* In a web browser, any code which the script doesn't specifically start up as a background task has a Window as its global object. This is the vast majority of JavaScript code on the Web.\n* Code running in a Worker has a WorkerGlobalScope object as its global object.\n* Scripts running under Node.js have an object called global as their global object.\n"
      },
      "date": 1644581488133
    },
    {
      "item": {
        "type": "factory",
        "id": "e5f75e85ed415309"
      },
      "id": "e5f75e85ed415309",
      "type": "add",
      "after": "93df7ed38f894a99",
      "date": 1644581501614
    },
    {
      "type": "edit",
      "id": "e5f75e85ed415309",
      "item": {
        "type": "paragraph",
        "id": "e5f75e85ed415309",
        "text": "**Note*: Unlike `var`, the statements `let` and `const` do not create properties of the global object."
      },
      "date": 1644581524891
    },
    {
      "type": "edit",
      "id": "e5f75e85ed415309",
      "item": {
        "type": "markdown",
        "id": "e5f75e85ed415309",
        "text": "**Note*: Unlike `var`, the statements `let` and `const` do not create properties of the global object."
      },
      "date": 1644581526931
    },
    {
      "type": "edit",
      "id": "e5f75e85ed415309",
      "item": {
        "type": "markdown",
        "id": "e5f75e85ed415309",
        "text": "**Note**: Unlike `var`, the statements `let` and `const` do not create properties of the global object."
      },
      "date": 1644581530263
    }
  ]
}